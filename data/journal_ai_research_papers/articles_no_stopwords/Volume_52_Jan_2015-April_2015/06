Journal Artificial Intelligence Research 52 (2015) 331-360

Submitted 01/15; published 02/15

Scheduling Conservation Designs Maximum Flexibility
via Network Cascade Optimization
Xue
Alan Fern

xue@eecs.oregonstate.edu
afern@eecs.oregonstate.edu

School EECS, Oregon State University
Corvallis, 97331 USA

Daniel Sheldon

sheldon@cs.umass.edu

School Computer Science, University Massachusetts
Amherst, 01003, USA

Abstract
One approach conserving endangered species purchase protect set land
parcels way maximizes expected future population spread. Unfortunately,
ideal set parcels may cost beyond immediate budget constraints
must thus purchased incrementally. raises challenge deciding
schedule parcel purchases way maximizes flexibility budget usage
keeping population spread loss control. paper, introduce formulation
scheduling problem rely knowing future budgets organization.
particular, consider scheduling purchases way achieves population spread
less desired delays purchases long possible. schedules offer conservation
planners maximum flexibility use available budgets efficient way.
develop problem formally stochastic optimization problem network cascade
model describing commonly used model population spread. solution approach
based reducing stochastic problem novel variant directed Steiner tree
problem, call set-weighted directed Steiner graph problem. show
problem computationally hard, motivating development primal-dual algorithm
problem computes feasible solution bound quality
optimal solution. evaluate approach real synthetic conservation data
standard population spread model. algorithm shown produce near optimal
results much scalable generic off-the-shelf optimizers. Finally,
evaluate variant algorithm explore trade-offs budget savings
population growth.

1. Introduction
Reserve site selection key problem conservation planning planners select land
regions designated nature reserves, either achieve general conservation goals
preserving biodiversity, achieve specific goals supporting recovery
endangered species. general, problem extremely complex involves reasoning
interplay uncertain population spread, uncertain future budgets,
problem specific factors. particular, properly assessing population spread involves
reasoning spatial aspects landscapes sizes, shapes, connectivity.
Further, decision space huge, consisting possible land investment combinations
time.
c
2015
AI Access Foundation. rights reserved.

fiXue, Fern, & Sheldon

Given factors, would highly desirable conservation practitioners
enhance decision making via automated, semi-automated, planning scheduling
algorithms. Unfortunately, problem beyond scope existing off-the-shelf stochastic planners schedulers. largely due combination enormous state
action spaces, highly uncertain, exogenous dynamics, need spatio-temporal
reasoning. main contribution paper make progress toward handling
complexities studying useful subproblem conservation planning used
practitioners realistic scenarios. general schema used develop algorithm
widely applicable (see Section 7) one received significant attention
AI community. Thus, hope work inspire new specialized
general-purpose approaches complex stochastic planning/scheduling problems.
Recently, Sheldon et al. (2010) studied restricted, still challenging, version
conservation planning problem, refer upfront conservation design
optimization. problem, planner given upfront budget stochastic
metapopulation model (Hanski & Ovaskainen, 2000) describes species
consideration spread throughout landscape available habitat. addition
system given information costs potential land parcels available
purchase conservation. objective select set land parcels immediately
purchase conserve, subject budget constraint, maximize spread
population within specified time horizon.
key simplification present problem land parcels assumed
purchased upfront currently available budget. advantage simplification
allows reasonably efficient near optimal solution approach (Sheldon
et al., 2010). However, upfront simplification limits utility approach
number ways. First, conservation budgets generally arrive increments time,
unrealistic purchase large set parcels advance restricting small set
parcels using current budget may suboptimal long run. Moreover,
often unnecessary purchase parcels spatially remote current population
species spread enough make relevant population growth.
Second, upfront simplification requires planners commit advance conservation
strategies may take many years play out, ignores potential advantage
observing responding stochastic outcomes population spreading process
unfolds. example, population spread observed, may beneficial divert
money failed subpopulations purchase parcels near thriving populations.
contrast upfront planning, ideal approach would fully adaptive planning,
where, regular decision epochs, planner would make purchase decisions based
recent population budgetary information. Unfortunately, currently-available
adaptive planning tools scale realistic conservation scenarios. due
combination enormous state space (possible population purchase configurations),
enormous action space (possible subsets land parcels purchase), long horizons (tens
hundreds years), high degree stochasticity population spread model.
Given challenge arriving fully adaptive solution, main contribution
paper introduce problem strikes important middle-ground
upfront fully adaptive approaches. particular, consider conservation design
scheduling exploring trade-off future population cost,
332

fiScheduling Conservation Designs Maximum Flexibility

given initial conservation design (i.e. set parcels purchase) asked
schedule purchase time parcel way (1) achieves population spread
time horizon within arbitrary tolerance population loss, (2) maximizes
purchase flexibility delaying specified purchase time (i.e. purchase deadline)
parcel long possible.
problem formulation simplifies fully adaptive problem number ways.
First, set parcels purchased provided input, removes degree
freedom planning problem. Second, significantly, order select
action current time step, general case fully adaptive planning requires
computing policy dictates possible future contingency, least
reasonably likely ones. contrast, space possible schedules, focus here,
much smaller space policies even partial policies. allows compact
encoding scheduling problem, appear possible problem
computing full, even, partial policies. distinction fully adaptive
scheduling setting akin distinction closed-loop open-loop planning,
generally computing closed-loop plans considered difficult openloop plans large stochastic problems.
solution scheduling problem yields useful tool conservation planners,
first develop conservation designs capture complex decision-making
objectives, perhaps optimization software, schedule purchases obtain
efficient cost-effective implementation design. conservation planner
flexibility purchase parcels time schedule-specified
deadlines, knowing population spread hurt much purchase
delays.
addition, scheduling problem potentially used component
adaptive planner. common successful approach many adaptive planning problems
replanning, decision epoch non-adaptive plan computed current
state first actions executed. work enables replanning approach
decision epoch first computes upfront design using existing work (e.g. Sheldon
et al., 2010), computes schedule purchases parcels scheduled
purchased immediately. purchase strategy would spend minimum amount
budget step guaranteeing limited loss population spread.
addition introducing formalizing problem conservation design scheduling, second contribution paper develop principled algorithm solving
it. key idea apply Sample Average Approximation (SAA) approach (Shapiro,
2003) order arrive novel deterministic optimization problem, develop principled solution motivation special case. particular,
approximated loss tolerance ratio 0, deterministic optimization problem one
network cascade optimization, show equivalent novel variant directed
Steiner tree problem. traditional Steiner tree problem, graph edges associated
costs, objective compute Steiner tree minimum cumulative edge
cost. variant, set-weighted directed Steiner graph problem, costs associated sets edges (possibly non-disjoint) rather individual edges. show
problem computationally hard even restrictions traditional problem
admits efficient solution. present efficient primal-dual algorithm,
333

fiXue, Fern, & Sheldon

guaranteed compute feasible solution bound quality optimal
solution. early-stopping version algorithm provides natural approach
explore trade-off future population budget flexibility.
experiments real synthetic data Red-cockaded Woodpecker
conservation problem show primal-dual algorithm produces near optimal results
much scalable standard optimization tools (CPLEX). show
trade-off population budget allows flexibility purchasing land
parcels.
follows, Section 2 first presents related work, followed problem formulation Section 3. Section 4 shows reduce subproblem set-weighted
directed Steiner graph problem. Section 5 derives corresponding primal-dual algorithm
natural extension trade-off problem. Experiments presented Section 6.
Finally conclude discuss future work.

2. Related Work
Previously, many different algorithms proposed select reserve sites formulating numerical measure reserve quality (together possible addition
constraints reserve must satisfy) solving optimal set sites
proposed model (e.g. see review article, Williams, Revelle, & Levin, 2005). Although
earliest reserve site selection algorithms largely ignored spatial considerations, many
newer models incorporate spatial objectives constraints directly optimization
problems. Williams, Revelle, Levin argue primary reason importance
spatial attributes fact capture properties landscape favorable
underlying population dynamics, important, computationally difficult, research direction directly optimize respect model population
dynamics instead using spatial attributes proxy. direction
following paper addressing problem spatial conservation planning
respect specific widely adopted model population dynamics.
recent approach explicitly reasons population dynamics model
work Sheldon et al. (2010) upfront conservation design problem, described
Section 1. order cope stochasticity model, popular Sample
Average Approximation (SAA) approach employed transform stochastic problem
deterministic combinatorial optimization problem. problem encoded
Mixed Integer Program (MIP) solved using state-of-the-art solvers.
approach able solve reasonably large problems via various speedup techniques,
scalability still limited relatively small number sample scenarios used SAA,
controls accuracy approach. Kumar et al. (2012) addressed
aspect approach. Lagrangian relaxation used decompose SAA problem
independent subproblems could solved practical time frame, possibly
parallel, standard optimizers. shown significantly reduce runtime
dependence number SAA samples used.
Unfortunately, directly extending approach compute multi-stage adaptive
solutions, budget arrives increments time, seem practical. One
attempt two-stage problems considered Ahmadizadeh et al. (2010).
334

fiScheduling Conservation Designs Maximum Flexibility

explore re-planning using two-stage non-adaptive problem formulation, find
indeed offer advantages upfront planning. setting, budget split
decision epochs manually fixed. Unlike work, work explicitly separates
decision parcels buy decision buy (the focus
work), may develop efficient special-purpose algorithms latter problem
scale much easily bigger problems stages.
several existing approaches might considered fully adaptive
solution conservation problem. example, fully adaptive problem
encoded Markov Decision Process (MDP), resulting state action spaces
would far big state-of-the-art solvers. instance, recent advances solving
large spatio-temporal MDPs (Crowley & Poole, 2011) require significant restrictions
solution space, acceptable application. existing approach
stochastic planning successfully applied Bent et al. (2004), Chang
et al. (2000), Chong et al. (2000) Yoon et al. (2008), Hindsight Optimization
samples future outcomes optimistically estimates state value based
determined futures. However, action space huge, approach would
computational problems current algorithms require enumeration candidate
actions approximating state value. Another approach would formulate
adaptive planning problem multi-stage stochastic integer program. However, size
problem formulation scales exponentially number stages, running
time already costly single stage (Sheldon et al., 2010), two-stage problem
simpler setting fully adaptive (Ahmadizadeh et al., 2010).
Recently, Golovin et al. (2011) proved simple greedy planning strategy provides
near-optimal solutions adaptive conservation setting first appears similar
ours. However, order provide approximation guarantees, authors restrict
population dynamics spread occurs distinct land parcels. may
reasonable assumption slow-moving species certain insects,
focus work, ignores critical aspects population dynamics highly-mobile
animals birds, including Red-cockaded Woodpecker experiments
based.

3. Problem Formulation
section, first introduce basic terminology conservation design planning
define main stochastic optimization problem. Next, describe Sample Average
Approximation (SAA) used transform problem deterministic optimization
problem, focus remainder paper.
3.1 Basic Concepts
largely follow formulation Sheldon et al. (2010). conservation problems
involve (large) land region interest divided land parcels
smallest land units available purchase. parcel contains number distinct
habitat patches, atomic units population dynamics model
either occupied unoccupied species interest. example, Redcockaded Woodpecker problem considered experiments, habitat patches correspond
335

fiXue, Fern, & Sheldon

particular trees prepared humans (or existing birds) facilitate
nesting. parcel p cost c(p), denotes cost purchasing land
restoring conserving habitat patches suitable species
occupy.
conservation design set parcels intended purchased conserved.
Given conservation design D, purchase schedule mapping parcels
purchase times {0, 1, . . . , H, }, H time horizon interest purchasing
parcel time = means parcel going purchased. Thus scheduler
may choose purchase parcels even though part design
realize best tradeoff budget flexibility population spread. Although
species population dynamics yearly time step model (described below),
allowed purchase times (i.e. decision epochs) may less frequent depending specific
problem. upfront schedule one assigns parcels purchase time = 0.
worth noting purchase times specified schedule best viewed
purchase deadlines. is, interpret schedule constraining purchases occur
specified times. view justified fact setup below,
purchasing parcel earlier time specified never result worse population
spread.

3.1.1 Population Dynamics Model
use stochastic dynamics model Sheldon et al. (2010), instance
popular metapopulation model ecology literature (Hanski & Ovaskainen, 2000).
patch two possible states time step, either unoccupied occupied,
conserved patches may occupied. population dynamics consists two types
stochastic events. Colonization events occur population patch colonizes
unoccupied patch b, happens probability pab . Extinction events occur
patch occupied time becomes unoccupied time + 1, happens
probability 1 paa . events independent. details probabilities used
experiments given Section 6.
single-step colonization probability pab experiments typically decays
distance patches b, encodes spatio-temporal dynamics
populations slowly spread source population new habitat made available.
Thus, long-term planning population spread, often unnecessary purchase
parcels distant source population time = 0, since probability
population spreading distant patches near future negligible. delaying
purchases become relevant design (i.e. population spread
nearby), conservation organization use limited funds much flexibly. However,
non-trivial decide much delay purchases harm spread, since
decision depends much spatio-temporal details population spread
model. decision optimization problem defined designed make.
336

fiScheduling Conservation Designs Maximum Flexibility

3.2 Stochastic Optimization Problem
problem statement rely two important concepts: 1) reward schedule,
2) flexibility schedule. first define two concepts formulate
optimization problem terms them.
reward schedule , denoted R(), random variable encodes
amount population spread time H, simply count number occupied
patches time H. easy show model upfront schedule always
achieves least much reward schedule thus maximizes expected
reward. Thus, define maximum expected reward R = E[R(upfront )].
optimization goal find schedule almost achieves optimal expected reward,
i.e. E[R()] (1 )R positive real number indicates percentage
tolerance reward loss maximum purchase flexibility. know
upfront schedule achieves (1 )R , however, requires commitment expenditures
first time step thus least flexible. Indeed, formalize notion
flexibility terms expenditures time.
Given schedule define corresponding cost curve C function
purchase times accumulated cost, C (t) equal total cost parcels
purchased time 0 including time t. curve non-decreasing
provides view schedules spending profile time horizon. particular,
profile cost curve C1 never C2 , i.e. total expenditures 1
never exceed 2 , say 1 offers flexibility terms budget
management compared 2 preferred else equal.
define surrogate cost function schedules
costf () =

X

c(p) f ((p))

p

parameterized function f times {0, . . . , H, } real numbers.
require f () = 0 f parcel purchased within time horizon
would contribute surrogate cost. see surrogate cost function
simply weighted sum parcel costs, weight determined f based
parcels purchase time. Although algorithm work real-valued function,
assume henceforth f strictly decreasing. two reasons this. First,
discounting future costs makes sense due economic factors inflation. Second,
intuitively, since f decreases purchase times, minimizing respect costf would
favor schedules delay purchasing. particular, policy 1 cost profile
never greater 2 , 1 assigned lower surrogate cost f
strictly decreasing.
parcels positive costs, upfront schedule unique element
maximizes surrogate cost, schedule defers purchases time H gives
unique minimum f strictly decreasing function. However, restrict
schedules achieve least reward (1 )R , latter schedule excluded
may longer unique minimum.
337

fiXue, Fern, & Sheldon

specify problem conservation design scheduling, find
schedule set possible schedules that:
arg min costf () s.t. E[R()] (1 )R


(1)

is, schedules achieve reward (1 )R want return one
minimal terms surrogate cost (i.e. maximal flexibility). Thus, controls
trade-off flexibility reward. particular, using larger increases
set feasible schedules allows potential returning flexible schedule
sacrificing reward.
Note varying choice f may possible generate different solutions
Equation 1, minimal sense feasible policy strictly
lower cost curve. experiments, use simple discounted f given f (t) =
discount factor (0, 1).
practice, likely conservation manager particular value
mind design time. Rather, best viewed parameter varied order
observe different flexibility-reward trade-offs possible. final selection
schedule would based assessment possibilities.
Finally, worth noting = 0 (no reward approximation), upfront solution
feasible solution typical population spread models. Thus, using
> 0 necessary achieving additional flexibility. requiring
policy achieve expected reward exactly R (i.e., = 0) requires make purchases
accommodate unlikely outcomes population spread model contribute tiny,
positive, amount expected reward. example, consider outcome
population jumps initial location distant location first year,
undergoes spread. vanishingly small, positive, probability.
upfront schedule support population spread, since distant location purchased
first step. Thus, schedule purchase distant parcel first
step suffer tiny loss reward compared upfront schedule,
achieve = 0. However, purchase tend useless vast majority
probability mass.
3.3 Deterministic Optimization Problem
optimization problem stochastic sense constraint defined
terms expectation complicated population spread distribution. greatly
complicates direct solution problem. prior work stochastic optimization
upfront schedules (Sheldon et al., 2010), address complication converting
stochastic problem approximately equivalent deterministic optimization problem.
done via common Sample Average Approximation (SAA) approach (see
Shapiro, 2003 survey results). key idea approximate stochastic
optimization problem using collection samples probability distribution,
used approximate expectations probabilities via averages samples.
problem formulation, sample corresponds so-called cascade scenario,
particular realization population spread process time horizon.
main idea behind application SAA generate set cascade scenarios
338

fiScheduling Conservation Designs Maximum Flexibility

probabilistic population spread model, approximate expected reward
schedules average reward scenarios. scenarios combined single
scenario graph, illustrated Figure 1 explained detail remainder
section.
concretely, cascade scenario layered graph, layers correspond time
steps, vertex va,t patch time step t. pair patches
(a, b) time step t, coin flipped probability pab determine directed
edge (va,t , vb,t+1 ) present not. edge present patch occupied time
(through previous colonizations non-extinctions), patch b colonized
become occupied time + 1, long conserved. is, presence edge
(va,t , vb,t+1 ) interpreted meaning occupied time b conserved
time + 1, b occupied time + 1 particular scenario.
way, cascade scenario graph encodes occupancy reachability. particular, assuming
(for now) patches conserved, patch b occupied time exactly
vb,t reachable vertex va,0 corresponding initially occupied patch a.
approximate probabilistic spread model, sample set N i.i.d. cascade
n }. scenarios
scenarios {C1 , . . . , CN }, denote vertices Cn {va,t
combined single scenario graph, additional root vertex r
n ) vertex representing initially occupied patch a. Figure 1
directed edges (r, va,0
shows example scenario graph three scenarios range five time steps
involving three patches a, b, c, two parcels, one containing b
containing c. example, initially occupied patch hence
connected time step zero root node r across three scenarios. Assuming
parcels conserved (i.e. purchased upfront), vertex connected root node r,
corresponding patch considered occupied corresponding time
particular scenario. defined r connected
vertices initially occupied patches.
Scenario graphs used work estimate reward schedules follows.
n incoming
Given scenario graph, schedule said purchase node va,t
edges patch purchased later time t, is, (p) belongs
parcel p. Thus, purchasing parcel p time viewed purchasing vertices
scenario graph, along incoming edges involve patches p occur
layer later. reflects fact patch purchased conserved,
considered conserved hence eligible occupancy remainder time
horizon. Figure 1, example schedule shown purchases parcel p1 (containing
b) time 0, parcel p2 (containing c) time 3. vertices purchased
schedule shown shaded region (purchased) incoming edges
shown bold.
define conditions vertex scenario graph considered
n becomes occupied path
occupied given schedule. Vertex va,t
n . define variable X n (a, t) equal 1
purchased edges r va,t

n
va,t occupied 0 otherwise. Figure 1, shaded red set
vertices occupied example policy. example, note scenario 3,
3 occupied since path r purchased edges.
vertex vc,3
despite fact path graph r, since path involves
339

fiXue, Fern, & Sheldon

Figure 1: Example scenario graph (N = 3) problem parcels p1 = {a, b}, p2 = {c}.
schedule ((p1 ) = 0, (p2 ) = 3) illustrated, using shaded boxes
indicate purchased nodes heavy line weights indicate purchased edges.
Vertices representing occupied patches schedule colored red.

unpurchased edges. Note upfront schedule would purchase node, since
vertices edges would considered purchased schedule.
average reward schedule relative scenario graph built scenarios
{C1 , . . . , CN } denoted follows.
R() =

N
1 XX n
X (a, H)
N

n=1

average across scenarios number occupied patches time H.
Figure 1 average reward example schedule would 2. key property
scenario graphs N R() converges E[R()] fixed
. implies set schedules { : R() (1 )R(upfront )} converges
set { : R() (1 )R } N grows, set policies wish
optimize flexibility over. Further, policy , one use standard probability
concentration bounds (e.g. Chernoff bounds) show event |R() R()|
probability mass decreases exponentially fast N grows. suggests
relatively small number scenarios required reliably obtain tight approximation
true expected reward policy. practice, however, important empirically
validate approximation errors reasonable number scenarios used
approximation.
340

fiScheduling Conservation Designs Maximum Flexibility

motivates deterministic SAA formulation original stochastic optimization problem (1) flexibility optimized subject constraint based
empirical reward R. is, deterministic problem solve:
arg min costf () s.t. R() (1 )R


(2)

R = R(upfront ).
3.4 Overview Solution Approach
Recall stochastic optimization problem (1) setting = 0 resulted optimization problem would typically upfront schedule feasible solution.
Rather, here, approximate SAA formulation, typically non-upfront
solutions feasible, even using = 0. even large (but practical) values N , set scenarios used approximation tend include
highly unlikely scenarios, need accounted stochastic solution
using = 0. observation motivates solution approach (2). particular,
Section 4, first consider problem = 0, turns new variant
classic Steiner tree problem. derive incremental primal-dual algorithm
problem (Section 5) used approximately solve = 0 case
> 0 case early stopping. experiments show approach able
provide significant flexibility little loss reward, flexibility-reward trade-off
controlled > 0.

4. Set-Weighted Directed Steiner Graph Formulation
motivated above, focus optimization problem (2) case = 0.
is, must optimize flexibility subject constraint obtain optimal
empirical reward measured R. section, show formulate problem
novel variant Steiner tree problem.
4.1 Set-Weighted Directed Steiner Graph
(2), arrive final optimization problem = 0:
arg min costf () s.t. R() = R .


(3)

view problem type Steiner tree problem scenario graph.
particular, say vertex time = H terminal vertex reachable
root r, set nodes Xnupfront (a, H) = 1 hence contribute
upfront reward R . way satisfy constraint R() = R purchase
set edges scenario graph connect target nodes r. Thus,
constraint Equation 3 corresponds purchasing edges r path
terminal, Steiner tree problem.
example, consider scenario graph Figure 1. terminal nodes
1 v 3 , two
example nodes layer = 4 except vb,4
b,4
nodes connected r directed path. schedule satisfies constraint
341

fiXue, Fern, & Sheldon

R() = R must purchase edges terminals reachable r. Note
example schedule Figure 1, set purchased edges satisfy
3 .
constraint since path purchased edges terminal vertex vc,4
problem similar traditional Steiner tree problem,
significant difference. traditional problem, edge associated distinct
weight purchased individually, goal connecting terminals using
set edges minimum total weight (which always forms tree). Rather, situation
complicated purchase parcels, correspond subsets edges
scenario graph. particular, purchasing parcel p time t, incurs cost c(p)f (t)
Equation (3), corresponds purchasing edge set Ep,t cost c(p)f (t) contains
n ) come vertex u arrive vertex v n p,
edges (u, va,t
0
a,t0
t0 n {1, . . . , N }. Note cost model, total cost edge sets
purchased schedule exactly equals surrogate objective costf ().
see problem instance problem call
Set-weighted Directed Steiner Graph (SW-DSG) problem, novel variant Steiner
tree problem, goal select set vertices minimal total cost order
connect terminal vertices root. remainder paper
discuss problem general form simplify notation. input SW-DSG
directed graph G = (V, E) single root vertex r, set terminal vertices V,
set edge sets E = {E1 , . . . , EM } Es E, non-negative cost
cs Es . particular, conservation problem edge sets E = {Ep,t }
n ) : (u, v n ) E, p, t0 t, n {1, . . . , N }} cost c
Ep,t = {(u, va,t
0
p,t = c(p)f (t).
a,t0
subset E forms Steiner graph union edges connect r vertices .
desired output minimum cost subset E forms Steiner graph. Note
optimal Steiner graph need tree SW-DSG, unlike traditional Steiner
tree problem.
clear SW-DSG general original deterministic optimization
problem since latter specific edge set structure. instance, Ep,t1 Ep,t2
t1 > t2 . However, structure make easier problem SW-DSG.
following sections, prove problems NP-complete primaldual algorithm either setting. special structure lead
algorithmic advantages deriving primal-dual algorithm. Therefore, mainly discuss
problem form SW-DSG simplify notation.
SW-DSG problem motivated particular conservation application,
relevant problems Steiner style objectives, edge
resources best considered groups. example, Steiner trees often used
design communication networks edges correspond existing potentially new
communication links. situations links must purchased coherent sets
(e.g. communication infrastructure different companies/organizations), SW-DSG
problem would appropriate formulation.
4.2 Computational Complexity
knowledge, SW-DSG generalization Steiner tree problem
previously studied hence consider computational complexity.
342

fiScheduling Conservation Designs Maximum Flexibility

SW-DSG problem generalization traditional directed Steiner tree (DST)
problem, known NP-complete (Hwang, Richards, & Winter, 1992). Further,
standard complexity assumptions, DST hard approximate factor better
log(|T |) (Charikar, Chekuri, Cheung, Dai, Guha, & Li, 1998). Note results
hold even acyclic directed graphs. number effective heuristic algorithms
DST (Drummond & Santos, 2009), many successful relying shortest path computations subroutine. shortest paths computed edge
weighted graphs efficiently, turns case set-weighted problem.
particular, note shortest path problem special case DST (or SW-DSG)
single terminal vertex. problem turns NP-Hard SWDSG, even restricted acyclic graphs special edge set structure shown
original deterministic optimization problem, case scenario graphs
conservation problem.
Theorem 1. SW-DSG problem NP-hard even restricted acyclic graphs
single terminal vertex edge set structure scenario graph.
Proof. prove hardness reducing weighted set cover problem subclass
SW-DSG problems restricted scenario graph one scenario exactly one terminal.
Note consider decision version SW-DSG problem, asks
feasible Steiner graph whose cost less specified threshold C . instance
weighted set cover problem specifies ground set elements = {e1 , . . . , en }, set
= {S1 , . . . , Sm } subsets Sj S, cost Cj subset, cost bound C .
0

problem
asks whether collection total cost C
Sj 0 = S.
Given set cover instance, first describe construct scenario graph illustrated Figure 2 later describe corresponding SW-DSG instance. graph
contains 2n layers, alternate set layers element layers starting
set layer (n layers each, hence 2n layers). layer vertices labeled S1 , . . . , Sm
represent sets n vertices labeled e1 , . . . , en represent elements S.
addition include root vertex r. vertex seen parcel
single patch. edges graph go one layer immediate next layer
follows. root vertex edge going Sj first set layer. ith
element layer (i.e. layer 2i graph), include edge vertex label Sj
previous layer vertex label ei current layer whenever ei Sj . Finally,
vertex ei ith element layer edge Sj next layer.
corresponding SW-DSG (conservation problem) instance graph specified
follows. root node r single terminal vertex en final element layer.
edge sets specified follows, setting scenario graph.
edge sets Ej,t Sj time t. particular, Ej,t contains every incoming
edge vertex vertex labeled Sj layers t0 t. let
strictly decreasing f (t) sufficiently close 1 ts. cost Ej,t equal
Cj f (t) Cj cost Sj original set cover problem. words,
cost Ej,t almost Cj . Similarly, edge sets Ei,t ei time t. set
costs 0. cost threshold SW-DSG problem equal threshold C
set cover problem.
343

fiXue, Fern, & Sheldon

see reduction correct, consider case resulting SW-DSG
instance feasible solution. solution provides path r en purchased
edge sets total cost C .
Since edge set Ei,t ei zero cost, edge set cost result
purchasing edge sets Ej,t . construction path must go sequence
alternating element nodes set nodes. particular, path must traverse element
node ei = 1, . . . , n. way happen purchase
ei least one edge leading ei one immediately preceding Sj layer 2i,
possible ei Sj . happen purchasing corresponding
edge set Ej,t , corresponding Sj , cost (almost) Cj . see
collection Sj corresponding purchased edge sets must cover elements
total cost C . Thus, collection sets solution set
cover problem.
Conversely consider instance set cover problem feasible solution.
easy verify feasible solution corresponding SW-DSG problem purchase
edge sets Ej,1 corresponding Sj set cover solution. Combining
see feasible solution SW-DSG instance feasible
solution set cover instance.

Figure 2: Description reduction set cover SW-DSG single terminal
vertex scenario graph.

result proves shortest (or least cost) path problem NP-hard
SW-DSG, i.e. problem finding least cost path edges purchased
sets. Thus, difficult extend prior shortest-path-based heuristics Steiner tree
problem problem. Given SW-DSG NP, NP-complete. motivates
derivation efficient heuristic solution approach next section, computes
feasible solution along bound cost optimal solution. Importantly
bound provides sense good computed solution compared optimal.
344

fiScheduling Conservation Designs Maximum Flexibility

5. Primal-Dual Algorithm
potential solution approach SW-DSG problem encode Mixed Integer
Program (MIP), straightforward, use off-the-shelf MIP optimizer.
approach produced non-trivial results upfront conservation problem (Sheldon et al., 2010), experiments demonstrate, scale well problem.
related approach could consider rounding procedure MIPs LP-relaxation.
solving LP-relaxation easier solving MIP, experiments show
scalability LP solvers poor problem sizes interest us. Instead,
exploit MIP encoding another way, following primal-dual schema (Vazirani, 2001) derive scalable algorithm performs near optimally experiments.
work considered non-trivial generalization previous work (Wong, 1984),
primal-dual schema applied DST. Moreover, early-stopping version
primal-dual algorithm provides way trade-off schedule flexibility reward
( > 0). Note primal-dual algorithms SW-DSG original deterministic
conservation problem differ notations. words, edge set structure
conservation problem offer improvements algorithm. Thus
following, present approach SW-DSG.
5.1 Primal-Dual Algorithm SW-DSG
apply primal-dual schema, start giving primal MIP SW-DSG problem
along dual LP-relaxation Figure 3. primal MIP includes binary
variable y(Es ) edge set E, indicates whether Es purchased (y(Es ) = 1)
(y(Es ) = 0). objective primal simply sum variables
weighted costs corresponding edge sets. Steiner graph constraint, requiring
terminals connected root node purchased edges, encoded using
standard network-flow encoding (lines 24) involving flow variables xki,j . flow variable
xki,j encodes flow edge (i, j) destined terminal k. flow balance constraints
(2) guarantee one unit flow carried path root node r terminal k.
LP-relaxation primal simply replaces integer constraints y(Es )
variables positivity constraint. dual relaxed problem (lines 69) includes
k corresponding primal flow constraints. Note
dual variables uki wi,j
constraint one unit flow leaves root implied flow constraints.
omitting constraint, one could simplify dual eliminating ukr variables (or,
equivalently, set ukr = 0 k ).
Given primal dual formulations problem, apply primaldual schema designing optimization algorithms. particular, primal-dual algorithm
iterative iteration increases value dual objective purchases
single edge set Es , corresponds setting primal variable y(Es ) = 1.
iteration stops purchased edges form Steiner graph (i.e. primal becomes
feasible). value dual objective end iteration serves lower bound
optimal primal objective, provides worst-case indication far
optimal returned solution is. high level, algorithm simple greedy heuristic
continuously purchases beneficial edge set order build paths
345

fiXue, Fern, & Sheldon

(Primal) min


X

y(Es ) cs ,

subject to:

(1)

s=1

X
(i,h)E

xki,h

X

xkj,i

(j,i)E

xki,j



= r
1,
= 1, = k , k T, V


0,
=
6 r, k
X
y(Es ), k T, (i, j) E


(2)

(3)

s:(i,j)Es

xki,j 0, (i, j) E, k
y(Es ) {0, 1}

(Dual) max

X

(ukk ukr ),

(4)
(5)

subject to:

(6)

kT

X

k
wi,j
cs , {1, . . . , }

(7)

k
ukj uki wi,j
0, k T, (i, j) E

(8)

k,(i,j)Es

k
wi,j

0

(9)

Figure 3: MIP SW-DSG problem corresponding dual LP MIPs LPrelaxation. SW-DSG problem defined graph G = (V, E), root vertex
r, set terminal vertices , set edges sets E = {Es : = 1, . . . , },
Es E.

unconnected terminal. primal-dual schema provides principled way incrementally
computing heuristic time computing lower bound.
Algorithm 1 gives pseudo-code algorithm. main data structure auxiliary
graph G0 = (V, A) vertices input graph G. auxiliary graph edge
set initially empty iteration adds newly purchased edges Es E.
algorithm terminates edges form Steiner graph. edge sets used
construct graph returned solution, following pruning step
removes obviously redundant edge sets, algorithm sometimes include
iteration process.
order describe algorithm detail, first introduce terminology. Given
current auxiliary graph A, let C(k) denote set vertices directed
paths terminal node k via edges A. Note consider k included
C(k). Also, define cut set terminal node k, denoted Cut(k), set
edges (i, j) j C(k) 6 C(k). Intuitively, k already reachable
root, know least one edge Cut(k) must added order
arrive Steiner graph.
346

fiScheduling Conservation Designs Maximum Flexibility

Algorithm 1 Primal-Dual Algorithm SW-DSG.
1: {Inputs: Graph G = (V, E), edge sets E = {E1 , . . . , EM }, costs {c1 , , cM }, terminals
V}
2: Initialize:
k = 0, (i, j) E, k
uki = 0, k T, V; wi,j
0
G = (V, A) =
lowerBound = 0, solution =
3: G0 Steiner graph
4:
Let k random vertex connected r G0
5:
= {s | Es Cut(k) 6= , 6 solution}
6:
= arg minsS (s,
k)P

k0
(s, k) = cs k0 T,(m,n)Es wm,n
/|Es Cut(k)|
7:
8:
9:
10:
11:
12:
13:

ukj = ukj + (s , k), j C(k)
k = w k + (s , k), (i, j) Cut(k)
wi,j
i,j
= Es
lowerBound = lowerBound + (s , k)
solution = solution {s }
end
Pruning: solution = solution {s | s0 solution, Es Es0 }

algorithm first initializes dual variables zeros auxiliary graph
include vertices edges. iteration proceeds first randomly selecting
terminal vertex k connected r auxiliary graph. intuitive level,
algorithm select edge set Es contains cutset edge k according
heuristic (s, k) derived applying primal-dual schema. concretely,
aim iteration raise dual objective value increasing value ukk
maintaining feasibility. Increasing ukk violate constraints type (8)
dual lines 5 8 algorithm maintain feasibility selecting edge set
Es among intersects cut set k raising variables corresponding
vertices C(k) edges Cut(k) value (s , k) (including ukk ). done
way causes dual constraint type (7) corresponding edge set Es become
tight. Since constraint corresponds primal variable y(Es ), algorithm effectively
sets y(Es ) = 1, indicating purchase, adding edges Es A. dual objective
value termination sum across iterations (s , k) returned lower
bound.
key property algorithm iteration increases dual objective,
maintaining feasibility dual. guarantees iteration
dual objective value corresponds true lower bound optimal value primal.
Theorem 2. iteration primal-dual algorithm produces feasible dual solution
increased objective.
Proof. base case, initialization assigns dual variables zeros,
l },
feasible solution. suppose iteration q 1 starts feasible solution {uli , wi,j
satisfies dual constraints type (7) (8). algorithm terminates,
347

fiXue, Fern, & Sheldon

get feasible solution. Otherwise let k terminal vertex selected. variables
l } l 6= k values changed, (8) satisfied. remaining
{uli , wi,j
variables l = k, three cases. Case 1: j 6 C(k), variables ukj
k unchanged, cannot contribute violation (7) (8). Case 2:
wi,j
edge (i, j) j, C(k), increase ukj uki (s , k) continue
satisfy corresponding constraint (8). Case 3: cut set edge (i, j) Cut(k),
k (s , k) (8) remains satisfied. Since w k edges
increase ukj wi,j
i,j
cut set increased, must ensure constraints type (7) become violated.
choice (s , k) made algorithm verified never violate
constraints makes least one tight.
main portion algorithm terminates, pruning step conducted
remove edge set subset edge set solution, decreases
total cost maintaining feasibility. particular, context conservation
scheduling problem, pruning step ensures parcel purchased
final solution. aggressive computationally expensive
pruning techniques could used. example, one could consider removing
one selected edge sets final solution test feasibility.
solution still feasible, edge set eliminated. find
aggressive style pruning necessary experiments.
5.1.1 Implementation Running Time
k dual variables.
Note pseudo-code stores updates values ukj wi,j
naive implementation algorithm would result O(|E||T |) runtime
initialization well computation per iteration, |E| number edges
graph |T | number terminals. could much SW-DSG
problems large network one conservation application. However,
algorithm described way presentation purposes. turns
purposes running algorithm, implemented significantly efficiently.
k values
particular, need store update sum corresponding wi,j
edge set (i.e. sum term appears inside definition (s, k) line
6), maintain current objective value (stored lowerBound pseudo-code),
updated line 10. Therefore, iterations + 1 variables
need initialized, number edge sets much smaller
size network. implementation dominant computation per iteration
computation cut set selected terminal k. find cut set backward
traversal terminal k toward root. time computation acceptable
terminals connected relatively small parts overall graph.
case conservation problem, terminals connected nodes
cascade among ones spatially close enough reached.
applications terminals possibly connected large portion graph,
may preferable incrementally maintain cut set every terminal iteration
reduce computation. memory needed O(C|T |) C maximum
size cut set presumably C |E|. getting cut set, algorithm takes
O(M C) time identify best edge set update solution.

348

fiScheduling Conservation Designs Maximum Flexibility

5.2 Early-Stopping Fractional Connection
primal-dual algorithm, computation continues terminals
scenario graph connected paths root. context conservation
problem corresponds reward approximation loss ( = 0). modify
primal-dual algorithm allow reward approximation loss > 0.
case corresponds modifying SW-DSG feasibility constraint require
fraction 1 terminals connected, leading natural way exploring
trade-off reward flexibility.
Given incremental, greedy nature primal-dual algorithm, adds one
edge set iteration, natural choice fractional connection problem stop
algorithm whenever least fraction 1 terminals connected.
basic early-stopping approach lead improvement cost returned
solution, compared = 0, savings often quite minimal. due fact
primal-dual algorithm grows paths terminal nodes root
unaware early-stopping condition. result, paths
grown never actually connected root point algorithm stopped.
unconnected paths considered waste resources respect
meeting fractional connection constraint. Thus, make early-stopping algorithm
viable, necessary perform pruning early-stopping result. algorithm
fractional coverage two stages: 1) Generation, early-stopping used
generate initial solution meets fractional connection constraint, 2) Pruning,
solution produced stage 1 pruned maintaining fractional connection
constraint.
pruning stage use simple effective greedy strategy. idea
iterate purchased parcels schedule returned early-stopping stage
delay purchase parcel long possible ensuring number
connected terminal nodes almost always within required fractional connection
tolerance.
found conservation application, SW-DSG problem corresponds set cascades, beneficial prune using independently generated
larger set scenarios used create initial solution. analogous using validation data tune algorithm parameters Machine Learning prediction problems,
beneficial reasons. found pruning based original set
scenarios often overly aggressive hurt empirical performance due over-fitting
SAA scenarios. Since easily generate independent scenarios estimate true
expected reward pruned policies, better prune based criterion instead.
Also, since computational complexity evaluating reward pruned policies low
compared SAA optimization, afford use larger set scenarios.
particular, experiments formed initial schedules based set 10 cascade
scenarios conducted pruning step respect 40 cascade scenarios.
approach pruning viewed directly enforcing threshold
(independently estimated) expected reward original stochastic problem (Equation
1) instead enforcing threshold objective value SAA problem (Equation
2). Since cant calculate correct threshold value (the RHS Equation 1) without
349

fiXue, Fern, & Sheldon

knowing true optimum R stochastic problem, use SAA optimum R
place. SAA optimum stochastic upper bound R , generally
conservative approach enforcing Equation 1.

6. Experiments
section, first evaluate primal-dual algorithm applying real, full-scale
conservation problem. Next, verify robustness approach problems,
present results using synthetic conservation data problem generator used several
recent studies. focus first two parts experimentation case = 0,
see provides substantial gains flexibility. order explore trade-off
flexibility reward (population spread), end section, evaluate
early-stopping approach > 0.
6.1 Evaluation Primal-Dual Algorithm Real Conservation Map
real map use dataset prior work Sheldon et al. (2010)
computing upfront conservation designs. data derived conservation problem
involving Red-cockaded Woodpecker (RCW) large land region southeastern
United States interest Conservation Fund. region divided
443 non-overlapping parcels (each area least 125 acres) 2500 patches
serving potential habitat sites. Parcel costs based land prices land
parcels already conserved thus cost zero. use population spread
model Sheldon et al. (2010), based individual-based models RCW.
Since approach requires conservation design input, use design computed
Sheldon et al. (2010) using total budget constraint $320M. map area
shown left cell Figure 7, parcels making design shaded green free
parcels (with cost 0) shaded grey; red + marks indicate initially occupied patches.
method requires specifying strictly decreasing function defining surrogate cost
function, use f (t) = = 0.96. found results
sensitive value .
6.1.1 Comparing Optimal Solutions
compare solutions primal-dual algorithm optimal solutions found using
CPLEX solver applied MIP encoding SW-DSG problem. MIP encodings
become large horizon number scenarios increase. particular,
443 H + 2500 H N variables number constraints grows number
edges, cascade network, becomes impractical N H grow. Since
optimal solver cant scale large versions problem, consider problems involving
cascade networks 2 scenarios horizons ranging 15 40 years.
use CPLEX compute solutions LP-relaxation MIP. objective value
returned LP provides alternative approach computing lower bound
optimal solution thus interesting compare lower bound terms tightness
runtime. Since primal-dual algorithm stochastic due random selection
350

fiScheduling Conservation Designs Maximum Flexibility

H
H
H
H
H
H

=
=
=
=
=
=

15
20
25
30
35
40

Cost
MIP
126.8
123.6
117.6
130.4

(M$)
PD
126.22
125.7
121.4
134.0
131.3
127.5

Lower
LP
122.2
117.7
104.7
117.3
109.9

Bound
PD
84.9
71.9
61.5
56.9
64.1
59.7

Run
MIP
5.5
8.2
28
5126

Time
LP
6.13
7.6
10
15
18

(s)
PD
0.9
2.5
9.0
11
25
45

Table 1: Comparison Primal-Dual (PD) MIP LP.

terminal nodes, report averages 20 runs, noting standard deviations
negligible.
first two data columns Table 6.1.1 show (surrogate) cost solutions
found CPLEX solving MIP algorithm (PD) increasing horizons, larger
horizons correspond larger problems. method fails return solution due
memory constraints value shown table. see horizons MIP
able yield solutions CPLEX, algorithm produces solutions similar
costs (here lower cost better). see MIP solver runs memory
unable return solutions 2 largest problem instances, already scaled
versions problem (small number cascades horizon).
next two columns Table 6.1.1 provide results lower bound computed
CPLEX solving LP PD algorithm. see lower bound produced
LP significantly tighter bound produced algorithm. However,
LP cannot solved CPLEX largest problem, approach still yields
lower bound. Overall, though lower bound good LP (when
computed), generally within factor two optimal solution, provides
non-trivial assurance quality returned solution large problems.
final three columns Table 6.1.1 present time used approaches
problem, blank cells indicate method ran memory. algorithm
significantly faster MIP approach, fails two largest problems,
comparable LP approach, provides lower bound fails
largest problem. later result indicates solution based LP-rounding would
face difficulty, since even solving LP large problems (40 time steps 2500
patches each) computationally demanding. advantage primal-dual algorithm
avoids encoding LP rather works directly graph.

2. PD cost less optimal MIP cost returned CPLEX. investigating, found
CPLEX correctly evaluates solution returns, thinks solution optimal
not. appears issue due small error tolerance allowed CPLEX solver.
3. MIP takes less time LP. think possibly CPLEX uses different algorithms
LP MIP. Especially, MIP solved branch-and-bound algorithm uses modern features
cutting planes heuristics, making CPLEX powerful MIP solver.

351

fiXue, Fern, & Sheldon

6.1.2 Number Cascades Scenario Graph
According SAA, optimal solution finite set cascade scenarios converge
true optimum scenarios. Previously two cascades used due
poor scalability CPLEX. study number cascade scenarios use
ensure good solution. Recall N increases, original stochastic problem
approximated accurately. Yet larger N corresponds computation.
importantly, = 0, larger N leaves schedule less space flexibility.
extreme case N , possible schedule upfront schedule minimal
flexibility. find good value N practice, study primal-dual solutions
different number cascade scenarios validating reward R() primaldual schedule achieve. Given population spread stochastic, compute
reward R() running 20 simulations stochastic population spread model.
simulation provides reward value (number occupied patches horizon)
average results. schedules produced primal-dual algorithm
upfront schedule. Recall intention nearly match reward
upfront schedule. Figure 4 presents results time horizon H = 20.
observe primal-dual schedule achieves reward N increases,
reward converging towards expected reward upfront schedule.
see 10 cascades quite close get best performance rate improvement
slowing down. Thus, remainder experiments use 10 cascades SAA.

Figure 4: Rewards PD solutions w.r.t number cascade scenarios.

6.1.3 Quality Conservation Schedules
evaluate algorithm problems realistic sizes. Here, consider
problems based 10 cascades horizons ranging 20 100 years, well
beyond range approachable MIP LP. solution times algorithm
ranged 15 seconds H = 20 29 minutes H = 100.
First, evaluate average accumulated reward schedule returned
method horizon Figure 5. average reward upfront schedule ranged
332 H = 20 615 H = 100 time horizons primal-dual solution
attained average reward least 95.3% optimal, negligible error bars
352

fiScheduling Conservation Designs Maximum Flexibility

averages. small gap indicates 10 scenarios SAA approximation quite
goodthe gap could reduced increasing number scenarios.

Figure 5: Rewards PD schedules w.r.t.
time horizon H.

Figure 6: Cost curves PD schedules
horizons 20 100.

course, must consider cost curves corresponding schedules, since
affords flexibility criterion problem. Figure 6 presents cost
curves schedules. Note defined Section 3.2, cost curve shows (nondiscounted) accumulated cost schedule time. cost curve schedule
produced horizon H increase time H remain flat, reflecting
purchases made time. see horizons cost curves show
fairly gradual increase cost expenditures time, indicating schedules
indeed providing significant amount flexibility regarding purchase times, particularly
compared upfront schedule, cost curve flat black line
Figure 6 since parcels purchased time 0. experiments shown, found
cost curves vary small amount different values , general
trend present. Interestingly, curves sudden jump cost around 20
years. understand Figure 7 show parcel purchases made
schedule population spread map 100 year horizon. see
= 20 sharp increase cost due purchase relatively expensive
vast parcels southern part design. Looking population spread dynamics,
apparent parcels critical gateway ensuring reliable spread
southwestern part design later years. Delaying purchase longer significantly
increases probability spread occur, approach discovers.
Another interesting observation seen comparing expected population
spread PD computed schedule expected population spread upfront
schedule (Figure 7). striking difference spreads seen time steps
= 20, 60, 80 northeastern part map. upfront schedule entire
northeastern part occupied large part, PD schedule hole
northeastern part near initial bird populations located. Note, however,
hole finally occupied horizon problem (t = 100). time,
spread upfront PD schedules visually similar, agrees fact
measured rewards similar. reason difference population
spread PD schedule delays purchase northeastern parts
353

fiXue, Fern, & Sheldon

= 20

= 60

= 80

= 100

Figure 7: (Left) Original conservation design used scheduling shown green shaded
parcels. Free (zero-cost) parcels shaded dark grey red + indicates
initially occupied patches. (Right) top row shows parcels purchased
(shaded green) PD schedule horizon 100 years. middle
row shows population spread horizon schedule,
lighter red shading patch indicates smaller probability occupied
(as measured 20 simulations). bottom row shows population spread
upfront schedule horizon 100 years.

map near initial bird population 20 years time horizon ends.
population spread process schedules, found parcels
closely connected hence become occupied fairly short time bird population
nearby. apparent upfront schedule, areas already occupied
= 20. Thus, purchase parcels delayed long enough time
left population spread landscapes. Therefore, purchasing
delayed parcels far away current population, parcels
covered quickly reliably. Note flexibility mainly due definition
reward function, takes population time H account. count
population every time step, presumably good schedule would purchase hole
area soon population.
6.2 Evaluation Primal-Dual Synthetic Maps
evaluate primal-dual algorithm thoroughly, randomly selected 10 synthetic
maps generated used prior work (Ahmadizadeh et al., 2010). maps consist
region 146 non-overlapping parcels 411 patches, different configurations
parcel costs initial population. map, considered problems involving
354

fiScheduling Conservation Designs Maximum Flexibility

different conservation designs, design corresponded upfront solution
budget limited factor b total parcel cost map, b ranged 0.1
0.5. section, present similar analysis Section 6.1 show consistent
results, indicating primal-dual algorithm stable across different problems.
6.2.1 Comparing Optimal Solutions
first compare upper lower bounds returned primal-dual algorithm
optimal objective values MIP LP computed using CPLEX. Since CPLEX still
scalability issues solving larger synthetic problems, restrict comparison
problems 2 4 scenarios horizon 20 years.
Results 10 maps similar. example, Figure 8 shows
surrogate cost (PD-UB) dual objective value (PD-LB) primal-dual solution
map 768, together optimal surrogate cost (CPLEX-MIP) lower bound
computed LP CPLEX. see compared optimal, algorithm still
produce solutions similar costs, especially problem easy (b smaller).
Also, see lower bound computed CPLEX better PD lower
bound. However, PD lower bound still within factor 2.

Figure 8: Cost objective value problems map 768. horizontal axis varies
amount budget used compute upfront solution used
conservation design given scheduling algorithms.

6.2.2 Quality Conservation Schedules
consider larger problems based 10 cascade scenarios horizon H = 40,
MIP LP practically solvable.
first compare average accumulated reward schedule returned primaldual algorithm upfront schedule. Figure 9 shows results one maps,
indicating rewards achieved primal-dual schedules always close
upfront schedules, desired. results maps similar.
study cost curves schedules order illustrate flexibility
compared upfront schedules. Figure 10 presents average cost curves schedules
across 10 maps. noted budget limited, purchase
delayed much. example, b = 0.1, parcels purchased = 15,
long ahead time horizon. analysis explained fact
355

fiXue, Fern, & Sheldon

Figure 9: Rewards primal-dual schedule upfront schedule
map 1027.

Figure 10: Average cost curves PD
schedules 10 maps.

many maps small budgets, sets affordable parcels fairly spread
loosely connected. means population requires time order
reliably spread across sets. Thus, parcels must purchased quite early
horizon support spread. Rather larger budgets, sets parcels must
purchased spread tightly coupled, allows easier,
reliable population spread. Thus, possible delay purchases much larger extent
seen cost curves larger budgets. shows algorithm able
afford considerable flexibility initial conservation design supports reasonably
reliable population spread.
6.3 Early-Stopping Trading Flexibility Reward
consider early-stopping variant primal-dual algorithm, referred
PD-ES, producing schedules trade flexibility reward using > 0.
dataset use real conservation map. Figure 11 illustrates cost curves
early-stopping schedules = 0.0, 0.05, 0.10, 0.15, 0.20 H = 20, 40, 60, 80,
demonstrates possible budget saving time corresponding fraction reward loss
allowed. Figure 12 shows average simulated rewards schedules.
First notice average reward achieved early-stopping schedules
almost always within specified error tolerance, shows pruning step
generalizing effectively. see cost curves early-stopping schedules
show significant improvement even small values compared early-stopping
( = 0). example, H = 60 = 0.20, almost cost first
several years, several decades cost approximately half cost required
= 0. results show approach able provide set schedules spans
spectrum trade-offs, considered conservation managers.

7. Summary Future Work
work, addressed problem scheduling purchases parcels conservation
design. formulated problem network cascade optimization problem
356

fiScheduling Conservation Designs Maximum Flexibility

H = 20

H = 40

H = 60

H = 80

Figure 11: Cost curves PD-ES schedules pruning. red line ( = 0) shows
cost curve non-early-stopping PD schedule.
reduced novel variant classic directed Steiner tree problem. showed
problem computationally hard developed primal-dual algorithm
problem. experiments showed algorithm produces close optimal results
much scalable state-of-the-art MIP solver. showed
early-stopping variant algorithm able explore possible trade-offs
flexibility reward, important consideration practice.
scheduling problem considered work poses considerable challenges generic
off-the-shelf schedulers planners. complicating factors include: 1) highly-stochastic,
exogenous dynamics arise population spread model, 2) need reason
spatio-temporal processes, 3) long horizons must considered, 4)
combinatorial space potential investment options point time. general
solution schema pursued work likely applicable problems
pose similar challenges existing techniques. particular, general schema suggests
approximating problem via SAA studying resulting deterministic
optimization problem. Often resulting deterministic problem correspond
existing well-studied problems, state-of-the-art approximation algorithms
used. cases, work, resulting problem related
existing well-studied problem solution designed extending existing
solution frameworks. expect generic SAA schema particularly useful
357

fiXue, Fern, & Sheldon

H = 20

H = 40

H = 60

H = 80

Figure 12: Rewards primal-dual schedules early-stopping. number
data point indicates percentage PD-ES reward PD reward.

problems involving stochastic spread populations information across networks,
since deterministic problems typical map graph-theoretic problems,
vast literature.
future work, plan consider several improvements primal-dual algorithm.
Currently, iteration, algorithm randomly picks unconnected terminal
grow path from. likely intelligent selection mechanisms improve
overall results. interested developing primal-dual algorithm directly
incorporates error tolerance constraint early-stopping approach. would
provide direct method trading reward improved flexibility. Furthermore,
intend pursue fully adaptive approaches conservation problems.
One idea incorporate scheduling approach replanning algorithm selects
purchases current decision epoch based up-to-date information.
particular, decision epoch schedule would formed parcels scheduled
purchased immediately (those flexibility) would purchased subset
cases immediate budget would exceeded. Considering sophisticated
approaches take account immediate budget would natural useful
extension. would interesting consider conservation problem
variants reward function. species, rather caring population
358

fiScheduling Conservation Designs Maximum Flexibility

end, ecological goal may value spread whole period
even more. Presumably models would different properties complexities
one study paper.

Acknowledgements
Parts material paper appeared earlier work Xue, Fern, Sheldon
(2012). work supported NSF grant IIS-0964705.

References
Ahmadizadeh, K., Dilkina, C., Gomes, C. P., & Sabharwal, A. (2010). empirical study
optimization maximizing diffusion network. 16th International Conference
Principles Practice Constraint Programming.
Bent, R., & Van Hentenryck, P. (2004). Regret only! Online stochastic optimization
time constraints. Nineteenth AAAI Conference Artificial Intelligence.
Chang, H. S., Givan, R. L., & Chong, E. K. (2000). On-line scheduling via sampling.
Artificial Intelligence Planning Scheduling.
Charikar, M., Chekuri, C., Cheung, T., Dai, A., Guha, S., & Li, M. (1998). Approximation algorithm directed Steiner tree problems. Ninth Annual ACM-SIAM
Symposium Discrete Algorithms.
Chong, E. K., Givan, R. L., & Chang, H. S. (2000). framework simulation-based
network control via hindsight optimization. IEEE CDC conference.
Crowley, M., & Poole, D. (2011). Policy gradient planning environmental decision making
existing simulators. Twenty-fifth AAAI Conference Artificial Intelligence.
Drummond, L. M., & Santos, M. (2009). distributed dual ascent algorithm Steiner
problems multicast routing. Networks, 53, 170183.
Golovin, D., Krause, A., Gardner, B., Converse, S. J., & Morey, S. (2011). Dynamic resource
allocation conservation planning. Twenty-fifth AAAI Conference Artificial
Intelligence.
Hanski, I., & Ovaskainen, O. (2000). metapopulation capacity fragmented landscape. Nature, 404 (6779), 755758.
Hwang, F. K., Richards, D. S., & Winter, P. (1992). Steiner Tree Problem. Springer.
Kumar, A., Wu, X., & Zilberstein, S. (2012). Lagrangian relaxation techniques scalable spatial conservation planning. Twenty-sixth AAAI Conference Artificial
Intelligence.
Shapiro, A. (2003). Monte Carlo sampling methods. Stochastic Programming, Handbooks
Operations Research Management Science, Vol. 10, pp. 353426.
Sheldon, D., Dilkina, B., Elmachtoub, A., Finseth, R., Sabharwal, A., Conrad, J., Gomes,
C., Shmoys, D., Allen, W., Amundsen, O., & Vaughan, B. (2010). Maximizing
359

fiXue, Fern, & Sheldon

spread cascades using network design. Uncertainty Artificial Intelligence
(UAI).
Vazirani, V. V. (2001). Approximation Algorithms. Springer, Berlin.
Williams, J., ReVelle, C., & Levin, S. (2005). Spatial attributes reserve design models:
review. Environmental Modeling Assessment, 10 (3), 163181.
Wong, R. T. (1984). dual ascent approach Steiner tree problems directed graph.
Mathematical Programming, 28, 271287.
Xue, S., Fern, A., & Sheldon, D. (2012). Scheduling conservation designs via network
cascade optimization. Twenty-sixty AAAI Conference Artificial Intelligence.
Yoon, S., Fern, A., Givan, R. L., & Kambhampati, S. (2008). Probabilistic planning via
determinization hindsight. Twenty-third AAAI Conference Artificial Intelligence.

360


