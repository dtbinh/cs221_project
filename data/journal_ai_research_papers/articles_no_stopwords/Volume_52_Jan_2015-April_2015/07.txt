Journal Artificial Intelligence Research 52 (2015) 507-542

Submitted 11/14; published 04/15

Weighted Electoral Control
Piotr Faliszewski

faliszew@agh.edu.pl

Department Computer Science
AGH University Science Technology
Krakow, Poland

Edith Hemaspaandra

eh@cs.rit.edu

Department Computer Science
Rochester Institute Technology
Rochester, NY 14623, USA

Lane A. Hemaspaandra

lane@cs.rochester.edu

Department Computer Science
University Rochester
Rochester, NY 14627, USA

Abstract
Although manipulation bribery extensively studied weighted voting, almost work done election control weighted voting.
unfortunate, since weighted voting appears many important natural settings.
paper, study complexity controlling outcome weighted elections
adding deleting voters. obtain polynomial-time algorithms, NP-completeness results, many NP-complete cases, approximation algorithms. particular, scoring rules completely characterize complexity weighted voter control. work
shows quite important cases, either polynomial-time exact algorithms
polynomial-time approximation algorithms exist.

1. Introduction
many real-world election systems voters come weights. Examples range
stockholder elections weighted shares, US Electoral College, often-used example Nassau County Board Supervisors, (in effect) parliamentary system
parties typically vote blocks, Swedens system wealth-weighted voting
instituted 1866 (and longer used) wealthiest members rural communities received many 5,000 votes 10 percent districts weighted
votes three voters could decisive (Congleton, 2011). Furthermore,
many important voting applications within multiagent systems, e.g., recommender systems (Ghosh, Mundhe, Hernandez, & Sen, 1999; Lu & Boutilier, 2011), planning (Ephrati
& Rosenschein, 1997), web search (Dwork, Kumar, Naor, & Sivakumar, 2001).
applications, quite natural voters (i.e., agents) weighted (e.g.,
amount trust put power resources possess).
surprising study manipulative attacks elections, weighted
voting given great attention. bribery manipulation, two three
studied types manipulative attacks elections, study case weighted voters
extensively conducted. Yet remaining one three studied types
c
2015
AI Access Foundation. rights reserved.

fiFaliszewski, Hemaspaandra, & Hemaspaandra

attacks elections, so-called control attacks, almost attention given
case weighted voting; best knowledge, time issue
previously raised two M.S./Ph.D. theses (Russell, 2007; Lin, 2012). lack
attention troubling, since key types control attacks, adding deleting
voters, certainly occur many weighted elections. coda section,
give examples.
study complexity weighted elections arguably important types
controladding deleting votersfor various election systems. focus scoring
rules, families scoring rules, Condorcet-consistent rules, weakCondorcet-consistent
rules. Control deleting (adding) voters asks whether given election given candidate
made win deleting (adding) certain number voters (at
certain number members pool potential additional voters). control
types model issues found many electoral settings, ranging human electronic. (abstractions of) issues often faced people seeking steer election,
experts campaign management, deciding example k people
offer rides polls. Adding deleting voters occur multiagent systems.
example, agents entities Internet, one attempt denial-of-service
attack prevent votes arriving time. hand,
adding voters pertains simply encouraging agents vote, multiplying existing
agents, performing false-name attacks (for false-name attacks related settings, see,
example, Wagman & Conitzer, 2014; Waggoner, Xia, & Conitzer, 2012; Aziz, Bachrach,
Elkind, & Paterson, 2011).
Control introduced (without weights) 1992 seminal paper Bartholdi,
Tovey, Trick (1992). Control subject much attention since. attention, present paper, part line work, started Bartholdi, Tovey,
Trick (1989, 1992) Bartholdi Orlin (1991), seeks determine
types manipulative attacks elections attackers task requires polynomial-time
computation. detailed discussion line work, refer reader
related work section end paper surveys Faliszewski, Hemaspaandra, Hemaspaandra, Rothe (2009), Faliszewski, Hemaspaandra, Hemaspaandra
(2010), Brandt, Conitzer, Endriss (2013).
main results follows (see Section 6 tables summarizing results). First,
Section 4.1 provide detailed study complexity voter control scoring
protocols, case fixed numbers candidates. show constructive
control adding voters constructive control deleting voters P t-approval
(and covers plurality t0 -veto1 ) NP-complete otherwise. interesting compare result analogous theorem regarding weighted coalitional
manipulation: cases complexities voter control manipulation
(e.g., plurality Borda) cases voter control
easier (t-approval 2, elections candidates). ever possible weighted voter control harder weighted voting manipulation? show
weighted voter control NP-hard Condorcet-consistent rules least three
candidates (and clearly NP-hard weakCondorcet-consistent rules least
1. number candidates fixed, t-veto expressed (m t)-approval,
number candidates. number candidates unbounded, t-veto t0 -approval.

508

fiWeighted Electoral Control

three candidates). Since weighted coalitional manipulation 3-candidate Llull system
P (Faliszewski, Hemaspaandra, & Schnoor, 2008), together fact Llull
weakCondorcet-consistent, implies setting weighted voter control
harder weighted coalitional manipulation.
Sections 4.2 4.3 focus complexity weighted voter control
t-approval t-veto, case unbounded numbers candidates. start
Section 4.2, explain interesting cases. Section 4.2
resolve six problems left open Lin (2012). establish complexity weighted
control adding voters 2-approval, 2-veto, 3-approval, weighted control
deleting voters 2-approval, 2-veto, 3-veto. Section 4.3, give polynomialtime approximation algorithms weighted voter control t-approval t-veto.
algorithms seek minimize number voters added deleted.
believe complexity weighted voter control, generally complexity attacks weighted elections, important interesting research direction
deserves much study. particular, research suggests worthwhile
seek approximation algorithms weighted elections problems
lead interesting algorithms.

2. Motivation Studying Control Weighted Elections
Introduction, noted importance weights many electoral settings
described natural importance ofand gave pointers extensive line work
studyingcontrol attacks many (unweighted) settings. stated control attacks naturally expected occur even many weighted election settings.
present section, give examples motivating study weighted electoral
control.
Let us consider academic department salient issue particular
term question course add B.S. majors requirements. Suppose
department highly polarized issue research area, i.e., faculty given
research area vote block (either agree, tradition
meet actual faculty meetings to, within group, reach group position
support). suppose group days/times
entire group would unlikely attend, e.g., time time
major yearly research conference area. department chair, knowing
power schedule faculty meetings held, agenda
meeting, might well model task weighted control deleting voters
problem, voters groups, groups weight number faculty
members groups, deletion limit one.
fact, generally, individual voters may blur collection weighted votes
settings voter set partitions groups express identical preferences.
another example sort, one authors schools, members faculty senate
chosen election system known single transferable vote. However,
unheard departmental leaders send friendly suggestion departments
members regarding vote. one assumes departments vote blocks,
one trying decide candidates add election, convince
509

fiFaliszewski, Hemaspaandra, & Hemaspaandra

run election, order make given candidate win (or win), one effect
studying weighted constructive control adding candidates, weighted constructive control
deleting candidates, weighted destructive control adding candidates, weighted
destructive control deleting candidates.
examples given ones weightings created individuals
forming blocks, occur even highly political contexts.
example, US House Representatives, issues (for example, water rights farm
subsidies) states delegation tends vote block parochial interests
states constituents companies, pressure lobbyists state delegations abstain
given vote effect (give take issues failing quorum) control
deleting voters attack.
However, many voting cases weights inherent standalone individual voters, many cases control attacks may well occur.
example, consider US Corporate Elections. these, vote stockholder weighted
number shares. natural way frame control problems
setting case adding deleting candidates, example, regarding running
spot company officer director. even voter control come play here,
example, actor sending mailings toor phoning speaking tovoters
convince abstain voting, encourage voters vote election.
(The bound additions/deletions model counts number voters, rather
weights, quite reasonable setting, regardless weight, given
targeted voter addressed by, example, mailing/visit/phone-call, although
reality one admittedly might focus resources biggest stockholders.)
many weighted control examples presented. Let us finish
extremely high-stakes example. US Electoral College, works
majority rule among electors, electors state usually vote block,
since system lets whoever greatest popular vote given state select every
elector state (note: two fifty states different policies). Thus issue
of, example, whether someone Ralph Nader run,
withdraw name consideration particular time, sweeping
effect nation, effect weighted control adding/deleting candidates
scenario.
given number examples, voter control candidate
control, settings weighted control may occur. examples given vary
naturalness, weighted unweighted control certainly
points models dont capture nuances real world. example,
electoral partitioning problems geographic/contiguity constraints, groups
modeled voting blocks may fact defectors, Internet denial-of-service
attacks may freedom suppress vote independently rather may
suppress none votes coming given line/provider (see, e.g., Chen,
Faliszewski, Niedermeier, & Talmon, 2014). Nonetheless, belief importance
weighted elections importance control attacks remain forever separate.
feel control attacks sufficiently natural many weighted settingsvarying
academic departments companies stockholders nationsthat studying weighted
control worth undertaking. feel that, although subject
510

fiWeighted Electoral Control

present paper, important experimental studies undertaken see
extent heuristic approaches circumvent worst-case hardness results regarding
weighted control (see Rothe & Schend, 2013, assessment type approach
settings, although see Hemaspaandra & Williams, 2012, discussion
limitations heuristic attacks).

3. Preliminaries
assume reader familiar basic notions computational complexity
theory theory algorithms. provide relevant definitions conventions
regarding elections, election rules, control elections. review NPcomplete problems use reductions.
3.1 Elections
take election pair E = (C, V ), C set candidates V
collection voters. voter preference order set C. preference order
total, linear order ranks candidates preferred one least
preferred one. example, C = {a, b, c} voter likes best, b,
c, preference order > b > c. weighted elections, voter v
positive integer weight (v). voter weight (v) treated election system
(v) unweighted voters. Given two collections voters, V W , write V + W
denote concatenation.
3.2 Election Rules
election rule (or voting rule) function R given election E = (C, V ) returns
subset R(E) C, namely candidates said win election.
m-candidate scoring rule defined nonincreasing vector = (1 , . . . , )
nonnegative integers. voter v, candidate c receives pos(v,c) points,
pos(v, c) position c vs preference order. candidates maximum
total score winners. Given election E voting rule R assigns scores
candidates, write score E (c) denote cs total score E R. voting rule
used always clear context. Many election rules defined families
scoring rules, one scoring vector possible number candidates. example:
1. Plurality rule uses vectors form (1, 0, . . . , 0).
2. t-approval uses vectors (1 , . . . , ), = 1 {1, . . . , t}, = 0
> t. t-veto mean system candidates uses (mt)-approval
scoring vector. m-candidate t-approval t-veto systems often treat
vote 0/1 m-dimensional approval vector indicates candidates receive
points vote. Naturally, vector contains exactly ones t-approval
exactly zeroes t-veto.2
2. emphasize view t-approval t-veto correct settings set candidates
remains fixed. set candidates change (e.g., control adding/deleting candidates),
would use standard, preference-order-based definition.

511

fiFaliszewski, Hemaspaandra, & Hemaspaandra

3. Bordas rule uses vectors form (m 1, 2, . . . , 0), number
candidates.
Given election E = (C, V ), candidate c Condorcet winner (weak Condorcet
winner) every candidate C {c} holds half (at least half)
voters prefer c d. Note possible Condorcet winner given
election, even possible weak Condorcet winner given election.
Let Condorcet denote election system whose winner set exactly set Condorcet
winners, let weakCondorcet denote election system whose winner set exactly
set weak Condorcet winners. say rule R Condorcet-consistent whenever
Condorcet winner sole winner elected R. Analogously, rule
weakCondorcet-consistent elects exactly weak Condorcet winners whenever
exist. Every weakCondorcet-consistent system Condorcet-consistent, converse
always hold.
many Condorcet-consistent rules. briefly touch upon Copeland
family rules Maximin rule. given election E = (C, V ) two distinct
candidates c, C, let NE (c, d) number voters prefer c d. Let
rational number, 0 1. Copeland score candidate c C defined as:
k{d C {c} | NE (c, d) > NE (d, c)}k + k{d C {c} | NE (c, d) = NE (d, c)}k,
Maximin score candidate c C defined mindC{c} NE (c, d).
candidates highest score winners. Llull another name Copeland1 . Clearly,
Llull Maximin weakCondorcet-consistent.
3.3 Electoral Control
focus constructive control adding/deleting voters weighted elections. However,
standard types control studied literature (e.g., control
adding/deleting candidates various forms partitioning candidates voters;
point reader Section 5 discussion related work).
Definition 3.1. Let R voting rule. weighted constructive control adding
voters rule R (R-WCCAV) weighted constructive control deleting voters
rule R (R-WCCDV), input contains set candidates C, collection weighted
voters V (sometimes referred registered voters) preferences C, preferred
candidate p C, nonnegative integer k. R-WCCAV additional
collection W weighted voters (sometimes referred unregistered voters)
preferences C. problems ask following questions:
1. R-WCCAV: subcollection W 0 W , k voters, p
R(C, V +W 0 )?
2. R-WCCDV: subcollection V 0 V , k voters, p
R(C, V V 0 )?
Although paper focus primarily constructive control, Section 4.1 makes
comments so-called destructive variants control problems. Given voting rule R, weighted destructive control adding voters rule R (R-WDCAV)
512

fiWeighted Electoral Control

weighted destructive control deleting voters rule R (R-WDCDV) defined analogously constructive variants, difference goal
ensure distinguished candidate p winner. mention passing
throughout paper use known nonunique-winner model (a.k.a.
cowinner model), i.e., goal make p be, prevent p being, element
winner set. consider nonunique-winner model cleaner natural
model so-called unique-winner model, p must made kept
one-and-only winner election, model strongly blurs tie-breaking issues
control issues.
Note definitions parameter k defines number voters
added/deleted, total weight voters added/deleted.
standard approach modeling strategic behavior weighted elections. example,
study R-weighted-bribery (Faliszewski, Hemaspaandra, & Hemaspaandra, 2009),
bribing weighted voter unit cost regardless voters weight, study
weighted manipulation nearly single-peaked societies (Faliszewski, Hemaspaandra,
& Hemaspaandra, 2014), mavericity society depends number so-called
mavericks rather total weight. k might practice, k reflecting
ability chair add/delete voters, k practice would reflect many
voters chair viewed resources lure pressure out.
consider approximation algorithms WCCAV WCCDV t-approval
t-veto. so, assume input instances contain integer
k. Rather, goal simply find (when success possible all) small possible
collection voters add/delete p winner resulting election. (Just
mentioned previous paragraph, counting number added/deleted
voters, total weight added/deleted voters.) positive integer h,
h-approximation algorithm WCCAV/WCCDV algorithm (when success
possible all) always finds solution adds/deletes h times many voters
optimal action does. notion f ()-approximation algorithm WCCAV/WCCDV
defined analogously, argument f variable related problem
instance. meaning O(f ())-approximation algorithms similarly clear
context. natural worry seemingly incomplete definitions
interact possibility success might impossible regardless many votes
one adds/deletes. However, t-approval WCCDV t-veto WCCDV (and indeed,
scoring rule), always possible ensure p winner, example deleting
voters (recall nonunique-winner model). t-approval WCCAV
t-veto WCCAV, possible ensure ps victory adding voters
p winner add unregistered voters approve p. observations
make particularly easy discuss study approximation algorithms t-approval
t-veto, always easily check whether solution. voting
rules dont easy-checking property, analysis might much
complicated. reader may wish compare work Brelsford et al.s attempt
framing general election-problem approximation framework (Brelsford, Faliszewski,
Hemaspaandra, Schnoor, & Schnoor, 2008).
paper consider candidate-control cases (such weighted constructive control adding candidates weighted constructive control deleting candidates,
513

fiFaliszewski, Hemaspaandra, & Hemaspaandra

WCCAC WCCDC). reason bounded number candidates,
winner determination given weighted election system P holds WCCAC WCCDC P brute-force search. hand, number
candidates bounded candidate control already NP-hard plurality (and
t-approval t-veto, constructive setting destructive setting) even
without weights (Bartholdi et al., 1992; Hemaspaandra, Hemaspaandra, & Rothe, 2007;
Elkind, Faliszewski, & Slinko, 2011; Lin, 2012). Furthermore, many results candidate
control Condorcet-consistent rules claimed weighted setting. example, Maximin rule Copeland family rules, hardness results translate
immediately, straightforward see existing polynomial-time algorithms
unweighted cases work weighted cases (Faliszewski, Hemaspaandra, &
Hemaspaandra, 2011).
3.4 Weighted Coalitional Manipulation
One goals compare complexity weighted voter control complexity
weighted coalitional manipulation (WCM). WCM similar WCCAV
add voters, differs (a) add exactly given number voters,
(b) pick preference orders added voters. quite interesting see
differences problems definitions affect complexities.
Definition 3.2. Let R voting rule. R-WCM given weighted election (C, V ),
preferred candidate p C, sequence k1 , . . . , kn positive integers. ask whether
possible construct collection W = (w1 , . . . , wn ) n voters i,
1 n, (wi ) = ki , p winner R election (C, V +W ). voters W
called manipulators.
3.5 Computational Complexity
NP-hardness proofs use reductions following NP-complete problems.
Definition 3.3. instance Partition consists sequence (k1 , . . . , kt )
Ppositive
integers whose sum even. ask whether set {1, . . . , t} iI ki =
1 Pt
i=1 ki .
2
proof Theorem 4.3 use following restricted version Partition,
greater control numbers involved problem.
Definition 3.4. instance Partition 0 consists sequence (k1 , . . . , kt ) positive
integers, whose sum P
even, (a) even number, (b) ki , 1 t,
1
holds ki t+1 tj=1 kj . ask whether set {1, . . . , t} cardinality
P

1 Pt
iI ki = 2
i=1 ki .
2
Showing NP-completeness problem standard exercise. (In particular,
NP-completeness variant problem established Lemma 2.3 Faliszewski
et al., 2009; approach used show NP-completeness Partition0 .)
remaining hardness proofs based reductions restricted version wellknown Exact-Cover-By-3-Sets problem. restricted version still NP-complete (Garey
& Johnson, 1979).
514

fiWeighted Electoral Control

Definition 3.5. instance X3C 0 consists set B = {b1 , . . . , b3t } family
= {S1 , . . . , Sn } 3-element subsets B every element B occurs least
one three sets S. ask whether contains exact cover B, i.e.,
whether exist sets whose union B.
choice use X3C0 basis reductions, particular way
use it, allow us achieve something beyond simply showing given weighted
control result NP-complete. indeed able show certain weighted control
results important election systems remain NP-complete even allowed set
weights highly restricted, e.g., cases, allowed weight set {1, 2}
{1, 3}. cases sort appear within proof Theorem 4.13 highlighted
paragraph immediately preceding theorem.

4. Results
present results. Section 4.1 focus fixed numbers candidates
scoring protocols, weakCondorcet-consistent rules, Condorcet-consistent rules.
Sections 4.2 4.3 consider case unbounded number candidates, t-approval
t-veto.
4.1 Bounded Numbers Candidates
well-known weighted manipulation scoring protocols always hard, unless
scoring protocol effect plurality triviality (Hemaspaandra & Hemaspaandra, 2007).
contrast, weighted voter control easy m-candidate t-approval.
Theorem 4.1. t, WCCAV WCCDV m-candidate t-approval
P.
Proof. Let (C, V, W, p, k) instance WCCAV m-candidate t-approval.
assume add voters approve p. assume add
heaviest voters particular set approvals, i.e., add ` voters approving
p, c1 , . . . , ct1 , assume
added ` heaviest voters approving p, c1 , . . . , ct1 .
m1
Since t1 constantdifferent sets approvals consider,
suffices try sequences nonnegative integers k1 , . . . , k(m1) whose sum
t1
k, sequence check whether adding heaviest ki voters ith
approval collection makes p winner.
fixed t, clear algorithm, although brute-force nature,
runs time polynomial input size. (The actions algorithm uses relatively
innocuous, fact. example, use sorting group together votes within W
identical sets approvals, sort descending order voter weight.
number sequences nonnegative integers k1 , . . . , k(m1) whose sum
t1

m1
k easily bounded (k + 1)( t1 ) , fixed polynomial input
size despite fact k input binary, may without loss generality
m1
assume k kW k. mention passing (k + 1)( t1 ) bound often wildly
loose. particular, exact number sequences nonnegative integers k1 , . . . , k(m1)
t1

515

fiFaliszewski, Hemaspaandra, & Hemaspaandra

+k0 1
(m1
t1 )
. summing k 0 equals 0 k 0 equals k
m1
( t1 )1
gives number sequences face.)
approach argument work WCCDV. Here, delete voters
approve p, delete heaviest voters approval collection.
Again, fixed, running time easily seen polynomial.

whose sum exactly k 0

One might think argument works scoring protocol,
case. example, consider 3-candidate Borda instance V consists one
weight-1 voter b > p > W consists weight-2 weight-1 voter preference
order > p > b. adding weight-1 voter makes p winner, adding weight-2
voter not. And, fact, following result.3
Theorem 4.2. WCCAV WCCDV Borda NP-complete. result holds even
restricted fixed number 3 candidates.
Proof. start considering case adding voters. reduce Partition. Given
sequence k1 , . . . , kt positive integers sum 2K, construct election one
registered voter weight K voting b > p > > , unregistered voters weights
k1 , . . . , kt voting > p > b > . Set addition limit t. candidates,
(initial) score b K(m 1), score p K(m 2), score K(m 3).
Thus, p become winner, bs score (relative p) needs go least K,
score (relative p) go K. follows k1 , . . . , kt
partition p made winner.
use construction deleting voters case. Now, voters registered
deletion limit t. Since cant delete voters since goal make p
winner, cannot delete one voter voting b > p > > (since would
unique winner). rest argument identical case adding voters.
Interestingly, possible extend proof work scoring protocols
t-approval (the main idea stays same, technical details
involved). so, regarding complexity WCCAV WCCDV scoring protocols
fixed number candidates, cases Theorem 4.1 P cases (assuming
P 6= NP).
Theorem 4.3. scoring protocol (1 , . . . , ), exists i, 1 < < m,
1 > > , WCCAV WCCDV (1 , . . . , ) NP-complete.
Proof. Let = (1 , . . . , ) scoring protocol 1 > >
. Let third largest value set {1 , . . . , }. show WCCAV
WCCDV NP-complete scoring protocol = (1 , . . . , ) = (1 , . . . , ).
formally defined scoring protocols contain nonnegative values, using
simplifies construction affect correctness proof.
simplify notation, given candidates x1 , . . . , x` , F [x1 = i1 , x2 = i2 , . . . , x` = i` ]
mean fixed preference order ensures, , xj , 1 j `, ranked
3. analogue theorem model bounding total weight votes
added/deleted obtained Russell (2007).

516

fiWeighted Electoral Control

position gives ij points. (The candidates mentioned F [. . .] notation
ranked arbitrarily.) let 1 , 2 , 3 three highest values set {1 , . . . , }.
Clearly, 1 = 1 > 2 > 3 = 0. (Note 2 might different 2 , 3 might
different 3 . example, = (3, 3, 2, 0, 0, 1, 1), 1 = 3, 2 = 2,
3 = 0, 1 = 3, 2 = 3, 3 = 2.)
give reduction Partition -WCCAV (the membership -WCCAV NP
clear); let (k1 , . . . , kt ) instance Partition, i.e., sequence positive integers
sum 2K. form election E = (C, V ) C = {p, a, b, c4 , . . . , cm }
collection V contains following three groups voters (for WCCAV part proof
below, set = 1; WCCDV part proof use construction
larger value ):
1. group voters, weight K preference order F [b = 1 , = 2 , p = 0].
2. group voters, weight K preference order F [p = 1 , b = 2 , = 0].
3. ci C, 6 collections 2T voters, one collection permutation (x, y, z) (p, a, b); voters collection weight K preference
order F [x = 1 , = 2 , z = 3 , ci = ].
Let number points a, b, p receive third group
voters (each candidates receives number points voters).
ci C x {p, a, b}, x receives least 4T K1 points ci
voters third group (in vote third group, x receives least many
points ci , two collections 2T voters x receives 1 = 1 points
ci receives 0 points). Thus holds candidates following scores:
1. p + K1 points,
2. + K2 points,
3. b + K(1 + 2 ) points,
4. candidate ci C 2T K1 points (each ci C receives
4T K1 points third group voters 2T K1 points
first two groups voters).
result, b unique winner. unregistered voters weights
k1 , . . . , kt , preference order F = [a = 1 , p = 2 , b = 0]. set addition limit t. clear irrespective voters added, none
candidates {c4 , . . . , cm } becomes winner.
subcollection (k1 , . . . , kt ) sums K, adding corresponding
unregistered voters election ensures three p, a, b winners (each
score + K(1 + 2 )). hand, assume unregistered voters
total weight L, whose addition election ensures p among winners.
adding voters election, p +T K1 +T L2 points, +T L1 +T K2
points, b + K1 + K2 points. p score least high b,
must L K. However, score higher p, must case
517

fiFaliszewski, Hemaspaandra, & Hemaspaandra

L K (recall 1 > 2 ). means L = K. Thus possible ensure
p winner election adding unregistered voters
subcollection (k1 , . . . , kt ) sums K. And, completing proof, note
reduction carried polynomial time.
Let us move case WCCDV. use construction,
following modifications:
1. reduction Partition0 . Thus without loss generality assume
1
even number i, 1 t, holds ki 1+t
2K.
l

1
2. set = 2t (t + 1) 1
+ 1 (the reasons choice become apparent
2
course proof; intuitively convenient think large value
that, nonetheless, polynomially bounded respect t).
3. include unregistered voters fourth group voters.
4. set deletion limit 2t .
Including fourth group voters, candidates following scores: p +
K1 + 2T K2 points, + K2 + 2T K1 points, b + K(1 + 2 ) points,
candidate ci C points.
reasoning WCCAV case, see size- 2t subcollection k1 , . . . , kt sums K, deleting corresponding voters ensures
p among winners (together b); may imagine first remove
voters fourth group add back 2t them, whose weights sum
K. show way delete 2t voters ensure p
among winners, deleted voters must come fourth group, must
total weight K, must exactly 2t them. sake contradiction, let us
assume possible ensure ps victory deleting 2t voters, fewer
2t come fourth group. Let number deleted voters fourth
group (s < 2t ) let x real number xT K total weight.
xT K (see explanation regarding first inequality)



ts

2 +1
(2T K) 2T K 1
.
xT K 2T K
= TK
1+t
1+t
1+t

is, 0 x 1+t
. see first inequality holds, recall
1
lowest weight voter fourth group least 1+t
2T K (because reduce
0
Partition ). Thus highest total weight voters fourth group is, most,
total weight fourth-group voters (2T K) less weight lightest voters
ts
(2T K)).
group (which least 1+t
Prior deleting voters, K(1 2 ) points p. deleting
voters fourth group, difference decreases K(1 x)(1 2 ).
additionally delete 2t voters first three groups voters, weight K,
difference scores p decreases, most, following value
(note deleted vote p ranked positions receive 1 ,

518

fiWeighted Electoral Control

2 , 0 points):

1

K(1x)(1 2 ) K1 K
(1 2 ) K1 = K
2
t+1
2




(t + 1)1
(1 2 )
2
t+1
t+1


> 0.

final inequality follows choice . calculation shows
way ensure ps victory deleting 2t voters requires deleting exactly

2 voters fourth group. reasoning case WCCAV shows
2t deleted voters must correspond size- 2t subcollection (k1 , . . . , kt ) sums
K.
side comment, mention WDCAV WDCDV scoring protocols (that
is, destructive variants WCCAV WCCDV) simple polynomial-time algorithms: suffices loop candidates c, c 6= p, greedily add/delete voters
boost score c relative p much possible.
Theorem 4.4. scoring protocol = (1 , . . . , ), -WDCAV -WDCDV
P.
Combining Theorems 4.1 4.3, obtain following corollary, contrast analogous result WCM (Hemaspaandra & Hemaspaandra, 2007);
mention passing recent attainment dichotomy result voter control
so-called pure scoring rules, unweighted elections unbounded number candidates (Hemaspaandra, Hemaspaandra, & Schnoor, 2014).
Corollary 4.5. scoring protocol (1 , . . . , ) problems WCCAV WCCDV
NP-complete k{1 , . . . , }k 3 P otherwise.
Theorem 4.6 (Hemaspaandra & Hemaspaandra, 2007). scoring protocol
(1 , . . . , ), 2, WCM NP-complete 2 > P otherwise.
see scoring protocols fixed number candidates, either WCM
harder WCCAV WCCDV (for case t-approval 2 < m),
complexity WCM, WCCAV, WCCDV (P-membership plurality
triviality, NP-completeness remaining cases). One may wonder
property WCM responsible fact t-approval, 2 m, WCM
harder WCCAV WCCDC. Speaking informally, answer WCM
intimately involves instantiation values (initially unspecified) votes
manipulators, particular setting is, effect, requiring solve
Partition problem. hand, WCCAV WCCDV preference orders
voters fixed input, chair chooses votes add; this,
example, facilitated polynomial-time algorithm proof Theorem 4.1.
are, nonetheless, voting rules WCM easier WCCAV
WCCDV. happens, example, one hand WCCAV WCCDV particular rule chair balance differing votes way makes
problems hard, yet hand WCM particular rule
show successful manipulation one manipulators cast identical votes. Theorem 4.7, Corollary 4.8, proofs present exactly
case.
519

fiFaliszewski, Hemaspaandra, & Hemaspaandra

Theorem 4.7. every weakCondorcet-consistent election system every
Condorcet-consistent election system, WCCAV WCCDV NP-hard. result holds
even restricted fixed number 3 candidates.
Proof. show WCCAV NP-hard, reduce Partition. Given sequence
k1 , . . . , kt positive integers sum 2K, construct election two registered
voters, one voter weight 1 voting p > > b > one voter weight 2K voting
b > p > > , unregistered voters weights 2k1 , . . . , 2kt voting > p > b > .
Set addition limit t. Suppose add unregistered voters election total
vote weight equal 2L.
L < K, b Condorcet winner, thus unique winner election.
L > K, Condorcet winner, thus unique winner election.
L = K, p Condorcet winner, thus unique winner election.
WCCDV case uses construction. Now, voters registered
deletion limit t. Since delete + 2 voters, since goal
make p winner, cant delete sole voter voting b > p > a, since would
Condorcet winner. rest argument similar adding voters case.
Recall Section 3 Condorcet denotes election system whose winner set
exactly set Condorcet winners, weakCondorcet denotes election system whose
winner set exactly set weak Condorcet winners.
Corollary 4.8. Condorcet weakCondorcet, WCM P WCCAV
WCCDV NP-complete. result holds even restricted fixed number 3
candidates.
Proof. immediate WCM Condorcet weakCondorcet P. see
yes-instance WCM, suffices check whether letting manipulators rank
p (the preferred candidate) first ranking remaining candidates arbitrary
order ensures ps victory. NP-completeness WCCAV WCCDV follows directly
Theorem 4.7.
Condorcet weakCondorcet always winners. prefer
voting systems always least one winner, note WCM 3-candidate Llull
P (Faliszewski et al., 2008).
Corollary 4.9. 3-candidate Llull, WCM P WCCAV WCCDV NPcomplete.
main results section presented Table 1 Section 6.
520

fiWeighted Electoral Control

4.2 t-Approval t-Veto Unbounded Number Candidates
Let us look cases t-approval t-veto rules, unbounded number
candidates. reason focus interesting families
scoring protocols whose complexity already resolved previous section.
reason say Theorem 4.3 shows whenever least three
distinct values scoring vector, NP-completeness. scoring-protocol family
that, number candidates, three distinct values scoring vector NPhard WCCAV WCCDV. Thus really interesting cases indeed t-approval
t-veto.
starting point work Lin (2012), showed 4, WCCAV
t-approval WCCDV t-veto NP-complete, 3, WCCDV
t-approval WCCAV t-veto NP-complete. results hold even
unweighted case. known remaining unweighted cases P (Bartholdi
et al., 1992; Lin, 2012) WCCAV WCCDV plurality veto P (Lin,
2012). section, look solve remaining open cases, WCCAV 2approval, 3-approval, 2-veto, WCCDV 2-approval, 2-veto, 3-veto.
start showing 2-approval-WCCAV P. point proof techniques
(especially polynomial-time algorithms 2-approval-WCCAV 2-veto-WCCDV)
quite different Lin (2012).
Theorem 4.10. WCCAV 2-approval P.
Proof. claim Algorithm 1 solves 2-approval-WCCAV polynomial time. (In
algorithm proof correctness, whenever speak r heaviest voters voter
set X, mean min(r, kXk) heaviest voters X.)
note add voters approve p. Thus delete W
voters approve p.
Let us consider repeat-until loop Algorithm 1. reject first iteration
loop (in first forall loop) then, clearly, solution given instance.
Furthermore, claim solution input instance, second
forall loop still possible find it. see this, consider candidate c C {p}
number ` {1, . . . , k 1}. sum weights k ` heaviest voters
W approve c less sc (that is, less difference
score c score p original election), certainly need add least
k ` + 1 voters approve c. However, since altogether add k
voters, means add ` 1 voters approve c. effect,
safely delete W ` 1 heaviest voters approve c (as proof
Theorem 4.1, decide add r voters approving {p, c}, may assume
add r heaviest voters approving {p, c}; thus keeping ` 1 heaviest voters
approve {p, c} correct strategy).
So, reject first iteration repeat-until loop, certainly
solution input instance, not, start second iteration
instance solution original one had. Thus, induction,
never reject incorrectly repeat-until loop. get repeat-until without
rejecting, fewer k voters left W , adding W best
(since voters W approve p).
521

fiFaliszewski, Hemaspaandra, & Hemaspaandra

Algorithm 1: 2-approval-WCCAV
Input: (C, V, W, p, k)
forall c C {p}
let sc = score(C,V ) (c) score(C,V ) (p).
Delete W voters approve p.
repeat
forall c C {p}
sum weights k heaviest voters W approve c
less sc reject
// impossible get score(c) score(p) adding less equal k voters
W .
forall c C {p} ` {1, . . . , k 1}
sum weights k ` heaviest voters W approve c
less sc
delete W voters approving c except ` 1 heaviest voters.
// need add least k ` + 1 voters approve c,
add ` 1 voters approving c.
changes.
kW k k accept // make p winner adding k heaviest voters
W.
kW k < k
adding W make p winner accept else reject

hand, get repeat-until loop, least k voters
left W , adding k heaviest voters W make p winner. Why? Let c
candidate C {p}. Let r number voters W added approve
c. Since made repeat-until, know [the sum weights
k heaviest voters W approve c] least sc (because reject
first forall loop). show adding voters, score(c) score(p) 0,
implies p winner. r = 0, score(c) score(p) = sc - [the sum weights
k heaviest voters W ] 0. r > 0, [the sum weights k r
heaviest voters W approve c] least sc (for otherwise would
r 1 voters approving c left W due statement second forall loop).
score(c) score(p) = sc - [the sum weights k r heaviest voters W
approve c] 0.
Theorem 4.11. WCCDV 2-veto P.
Instead proving theorem directly, show general relation
complexity t-approval/t-veto WCCAV WCCDV.
Theorem 4.12. fixed t, holds t-veto-WCCDV (t-approval-WCCDV)
polynomial-time many-one reduces t-approval-WCCAV (t-veto-WCCAV).
Proof. first give reduction t-veto-WCCDV t-approval-WCCAV. idea
deleting t-veto vote v t-veto election (C, V ) equivalent, terms net effect
scores, adding t-approval vote v 0 election, v 0 approves exactly
522

fiWeighted Electoral Control

candidates v disapproves of. problem approach
reduce t-veto-WCCDV t-approval -WCCAV thus show implement
t-veto scores t-approval votes.
Let (C, V, p, k) instance t-veto-WCCDV, V = (v1 , . . . , vn ). Let = kCk.
Let max highest weight vote V . set set 1 new
candidates, kCk + kDk multiple t. set V0 collection kCk+kDk

t-approval votes, vote weight max candidate C approved
(t1)(mt)
exactly one votes. vote vi V create set Ci = {c1i , . . . , ci
}
candidates create collection voters Vi = (vi1 , . . . , vimt ). voter vij ,
1 j t, weight (vi ) approves jth candidate approved v
(j1)(t1)+1
j(t1)
1 candidates ci
, . . . , ci
.

0
0
0
form election E = (C , V ), C 0 = CD ni=1 Ci V 0 = V0 +V1 + +Vn .
candidate c, let sc cs t-veto score (C, V ); see cs t-approval score
E 0 max + sc (every candidate C receives single approval one weight max
voter V0 voter vi V candidate c vi approves of,
unique voter Vi weight vi approves c). Furthermore,
candidate c C 0 C t-approval score max E 0 (each candidate C 0 C
approved exactly one voter V 0 voter V 0 weight max ).
form instance (C 0 , V 0 , W, p, k) t-approval-WCCAV, W = (w1 , . . . , wn ),
i, 1 n, (wi ) = (vi ), wi approves exactly candidates
vi disapproves of; adding voter wi t-approval election (C 0 , V 0 ) net
effect scores candidates C deleting vi t-veto election (C, V ).
(The role candidates pad election easy use t-approval
votesthose V0 ensure candidates C least many points
candidates, irrespective voters add.) completes reduction.
Let us give reduction t-approval-WCCDV t-veto-WCCAV. idea
previous reduction main difficulty proof show
implement t-approval scores t-veto votes.4 particular, role candidates
is, again, provide convenient way padding election implementing scores
candidates. However, time construction involved
nature t-veto: opposed case t-approval, t-veto add candidate
election total number candidates approved per vote increases.
Let (C, V, p, k) instance t-approval-WCCDV, V = (v1 , . . . , vn ). Let
= kCk let max highest weight vote V . set set
candidates kDk 2t 1 kCk + kDk = integer s, 3
(note setting trivial must case > t). set V0
collection 4n(s 2) (t-veto) votes (over candidate set C D), weight
max ; candidate C approved votes whereas candidate
disapproved least half (since kDk 2t 1, easy construct
4. reader may wonder simply use previous argument applying (m t)-veto
(m t)-approval. reason given instance (m t)-veto-WCCDV (with candidates
n voters), reduction would output instance (m t)-approval-WCCAV
candidates. Thus would correct interpret instance t-veto-WCCAV instance.

523

fiFaliszewski, Hemaspaandra, & Hemaspaandra

votes5 ). vote vi V , create collection Vi (s 1) votes satisfying
following requirements: (a) candidate approved vi approved
votes Vi , (b) candidate approved vi , approved exactly (s 2) votes
Vi . (Such votes easy construct: always place top candidates vi
top positions vote; remaining positions, first vote place
candidates arbitrary, easily computable order, following vote shift
candidates cyclically positions respect previous vote.) vote
Vi weight (vi ).
form election E 0 = (C 0 , V 0 ), C 0 = C V 0 = V0 + V1 + + Vn .
0
candidate c, let sc cs
Pnt-approval score (C, V ); see cs t-veto score E
4n(s 2)max + (s 2)( i=1 (vi )) + sc (c approved every voter V0
least 2 voters group Vi , 1 n; additionally, every voter vi
approves c, (s 1)th voter group Vi approves c). Furthermore,
candidate t-veto score 3n(s 2)max E 0 (each gets
2n(s 2)max points voters V0 (s 2)max points
Vi , 1 n).
form instance (C 0 , V 0 , W, p, k) t-veto-WCCAV, W = (w1 , . . . , wn ),
i, 1 n, (wi ) = (vi ), wi disapproves exactly candidates vi
approves of; adding voter wi t-veto election (C 0 , V 0 ) net effect scores
candidates C deleting voter vi t-approval election (C, V ) has. Furthermore,
since candidate least nmax fewer points candidate C,
fact adding wi increases scores candidates affect correctness
reduction.
remaining cases (WCCDV 2-approval, WCCAV 3-approval, WCCAV
2-veto, WCCDV 3-veto) NP-complete. Interestingly, contrast many
NP-complete weighted election problems, need limited set weights
make reductions work. Namely, due choice reducing X3C0 due
particular reductions build, proof following theorem establishes (the
details given within proof) (a) every pair integers 1 < b,
holds WCCDV 2-approval WCCAV 2-veto NP-complete even
legal set weights restricted {a, b}, (b) WCCDV 3-approval WCCAV
3-veto NP-complete even legal set weights restricted {1, 3}.
Theorem 4.13. WCCAV 2-veto 3-approval WCCDV 2-approval 3-veto
NP-complete.
Proof. Membership NP immediate, suffices prove NP-hardness. first
give proof WCCDV 2-approval. Theorem 4.12 immediately gives
result WCCAV 2-veto. reduce X3C0 Definition 3.5. Let
B = {b1 , ..., b3t } let = {S1 , ..., Sn } family 3-element subsets B
every element B occurs least one three sets S. construct
5. one
{d1 , . . . , dt }
even
exactly

possible construction. Let = {d1 , . . . , d` }, ` 2t 1. form sets D0 =
D1 = {d` , . . . , d`t+1 }. = D0 D1 (D0 D1 might overlap).
number voters V0 ; exactly half disapprove candidates set D0
half disapprove candidates set D1 .

524

fiWeighted Electoral Control

following instance (C, V, p, k) WCCDV 2-approval. set C = {p} {bj | 1 j
3t} {si , s0i | 1 n} {d0 , d1 , . . . , d3t } (d0 , d1 , . . . , d3t dummy candidates
used padding). 1 j 3t, let `j number sets contain bj .
assumption, j, 1 j 3t, 1 `j 3. V consists following
voters:
weight
2
1
1
1
2
3 `j

preference order
si > s0i >
si > bi1 >
si > bi2 >
s0i > bi3 >
p > d0 >
bj > dj >





1 n Si = {bi1 , bi2 , bi3 }



1 j 3t `j < 3.

Note score(si ) = 4, score(s0i ) = 3, score(bj ) = 3, score(p) = 2, score(dj ) 2.
set k = n + 2t claim contains exact cover p become
winner deleting n + 2t voters.
(): Delete (n t) weight-2 voters corresponding sets cover
delete 3t weight-1 voters corresponding sets cover. score p
change, score si decreases 2, score s0i decreases
least 1, score bj decreases 1. So, p winner.
(): need delete 3t voters decrease score every bj candidate 1. (Note
reason delete voters preference orders form bj > dj >
(1 j 3t). suffices decrease score bj one and, since need
decrease scores candidates si s0i (1 n), always better delete voters
preference orders form si > bj > s0i > bj > .) deleting 3t
voters, values i, 1 n, score si score
s0i 2 (for i, obtaining score 2 candidates si s0i takes
least 3 unique voters 3t deleted ones).
exactly values i, 1 n, score si score s0i
2, values correspond cover. (Why so? consider
situation already deleted 3t voters preference orders forms
si > bj > s0i > bj > , bj Si . If, deleting voters,
scores si s0i decreased 2, must deleted exactly three voters
correspond members Si . Thus, deleting voters corresponding 3t members
B ensured values scores si s0i decreased 2,
must case values correspond cover.) less
values i, 1 n, score si score s0i 2,
remaining voters deleted, n them, need decrease
score si and/or s0i n values i, 1 n. possible,
since voter approves si s0i sj s0j 6= j.
Note construction uses weights 1 2. fact, establish NPcompleteness WCCDV 2-approval every set allowed weights size least
two (note set weights size one, problem P, since essence
unweighted case resolved Lin, 2012). Since reductions Theorem 4.12
change set voter weights, result WCCAV 2-veto.
525

fiFaliszewski, Hemaspaandra, & Hemaspaandra

So, suppose weight set contains w1 w2 , w2 > w1 > 0. modify construction follows. keep set candidates change voters
follows.
#
1
1
1
1
2
1
` `j

weight
w2
w1
w1
w1
w1
w2
w1

preference order
si > s0i >
si > bi1 >
si > bi2 >
s0i > bi3 >
p > d0 >
p > d0 >
bj > dj >





1 n Si = {bi1 , bi2 , bi3 }



w2 2w1
w2 > 2w1
1 j 3t.

Here, ` smallest integer `w1 > max(2w1 , w2 ). Note ` 3
``j never negative. Note score(si ) = w2 +2w1 , score(s0i ) = w2 +w1 , score(bj ) = `w1 ,
score(p) = max(2w1 , w2 ), score(dj ) max(2w1 , w2 ). argument
shows contains exact cover p become winner deleting
n + 2t voters.
turn proof WCCDV 3-veto. construction use weights
1 3. Since reductions Theorem 4.12 change set voter weights, weights
1 3 suffice get NP-completeness WCCAV 3-approval. Given instance
X3C0 described above, construct following instance (C, V, p, k) WCCDV
3-veto. set C = {p} B {si | 1 n} {r, d, d0 } (d d0 dummy candidates
used padding) V consists following voters:
#
1
1
1
1
3n 3t
3n 3
3n + 1 `j

weight
3
1
1
1
1
1
1

preference order
> p > si > r
> p > si > bi1
> p > si > bi2
> p > si > bi3
> > d0 > r
> > d0 > si
> > d0 > bj





1 n Si = {bi1 , bi2 , bi3 }



1 n
1 j 3t.

convenient count number vetoes candidate count
number approvals. Note vetoes(si ) = 3n+3, vetoes(bj ) = 3n+1, vetoes(r) = 6n3t,
vetoes(p) = 6n, vetoes(d) = vetoes(d0 ) 3n. claim contains exact cover
p become winner (i.e., lowest number vetoes) deleting
n + 2t voters.
(): Delete (n t) weight-3 voters corresponding sets cover
delete 3t weight-1 voters veto p correspond sets cover.
vetoes(si ) = vetoes(bj ) = vetoes(r) = vetoes(p) = 3n vetoes(d) = vetoes(d0 ) 3n. So,
p winner.
(): assume delete voters veto p. Suppose delete k1 weight1 voters k2 weight-3 voters, k1 +k2 n+2t. deletion, vetoes(p) = 6nk1 3k2 ,
vetoes(r) = 6n 3t 3k2 , vetoes(bj ) 3n + 1. order p winner, need
vetoes(p) vetoes(r). implies k1 3t. need vetoes(p) vetoes(bj ) 0.
526

fiWeighted Electoral Control

Since vetoes(p) vetoes(bj ) 6n k1 3k2 (3n + 1) 6n (n + 2t k2 ) 3k2 3n 1 =
2n2t2k2 1, follows k2 nt. (To see case, note require
vetoes(p) vetoes(bj ) 0 know vetoes(p) vetoes(bj ) 2n 2t 2k2 1,
must require 2n2t2k2 1 0. expression equivalent k2 nt 21 .
Since k2 , n, integers, must case k2 n t.) delete 3t weight-1
votes n weight-3 votes, deleting voters vetoes(p) = 3n. order
p winner, delete one veto bj three vetoes
si . implies set deleted weight-1 voters corresponds cover.
4.3 Approximation Greedy Algorithms
problems computationally difficult, NP-complete, natural wonder whether good polynomial-time approximation algorithms exist. So, motivated NP-completeness results discussed earlier paper cases
WCCAV/WCCDV t-approval t-veto, section studies greedy approximation algorithms problems. (Recall WCCAV NP-complete t-approval,
3, t-veto, 2, WCCDV NP-complete t-approval, 2,
t-veto, 3.) First, establish connection weighted multicover problem,
use obtain approximation results. obtain approximation
algorithm work direct action problem. Table 3 Section 6 summarizes
results approximation algorithms t-approval/t-veto WCCAV/WCCDV.
undertake this, let us address detail issue, valuably raised
referee, one might want build approximation algorithms control problems,
might use algorithms, whether unwise obtain algorithms
people using might good guys. mentioned above, seeking good
polynomial-time approximation algorithms one standard approach exact solutions
known intractable, e.g., NP-complete. algorithms allow campaign
strategist to, faced intractability computing optimal number votes add
delete achieve victory candidate, least able quickly find action
guaranteed within particular multiplicative factor optimal action. One
might expect desire get approximations would hit wall regarding
potential impossibility exerting control certain instances, discussed
Electoral Control subpart Section 3, worry hold particular problems
obtain approximation algorithms. Finally, worry people
(chairs) employ approximation algorithms may good guys,
following somewhat multilayered reply. First, good evil highly contextual.
Whether strategists attempts help candidate win good evil
much eye beholder. may decry attempts part brutal nature
politics. Others may view attempts, long illegal actions taken,
valid indeed valuable part spirited, vibrant playing field democracy. Second,
settings, control may simply modeling optimization problem, wellapproximating control isnt even candidates, simply efficiency. Third,
even one views approximating control helping evil-doers, using reason
learn control problems approximated well approximated
makes sense sticking ones head sand hoping cryptosystems
527

fiFaliszewski, Hemaspaandra, & Hemaspaandra

cant broken. Since evil-doers may well try build approximation algorithms, break
cryptosystems, natural way thwarting field richly explore
approximations vulnerabilities exist, choose election system
use given problem choose one weak respect good
approximations whatever attacks fear.
4.3.1 Weighted Multicover Approach
Let us first consider extent known algorithms Set-Cover family
problems apply setting. Specifically, use following multicover problem.
Definition 4.14. instance Weighted Multicover (WMC) consists set B =
{b1 , . . . , bm }, sequence r = (r1 , . . . , rm ) nonnegative integers (covering requirements),
collection = (S1 , . . . , Sn ) subsets B, sequence = (1 , . . . , n ) positive integers (weights sets S). goal find
P minimum-cardinality set {1, . . . , n}
, declare set exists.
bj B holds rj
iIbj Si

is, given WMC instance seek smallest collection subsets
satisfies covering requirements elements B (keeping mind set
weight covers elements times). WMC extension Set-Cover unit
costs. define problem known Covering Integer Programming (see
Kolliopoulos & Young, 2005), short written CIP. However, problem
quite important us here. reason observe WMC special
case CIP (with multiplicity constraints but) without packing constraints; footnote 6
effect describing embed problem problem. approximation
algorithm Kolliopoulos Young CIP (with multiplicity constraints but) without
packing constraints, applied special case WMC, gives following result.6
Theorem 4.15 (Kolliopoulos & Young, 2005). polynomial-time algorithm
given instance WMC set contains elements gives
O(log t)-approximation.
t-approval WCCAV WCCDV naturally translate equivalent WMC
instances. consider WCCAV first. Let (C, V, W, p, k) instance t-approval6. paper Kolliopoulos Young (2005) directly speak WMC problem, seeing
results indeed apply WMC easy, tedious, exercise. readers would
verify Theorem 4.15 holds, footnote describe exactly paper Kolliopoulos
Young one finds relevant result parameters one use. warn reader
footnote makes direct references parts paper make sense paper
simultaneously hand. footnote merely guide understanding particular way draw
papers important work; providing full-fledged survey of, even real discussion of, CIP
problem beyond needs scope paper.
Theorem 4.15 follows sentenceon page 496 work Kolliopoulos Young
(2005)starting second algorithm finds solution (which follows Theorem 8),
keeping mind none so-called packing constraints, may take
call one matrix vector call B b wont factor here. vector
corresponds rj s; element jth row ith column matrix us set
Si contains bj 0 otherwise; set cost vector c vector 1s; set
multiplicity vector vector 1s; vector x corresponds characteristic function
I; Theorem 4.15s bound number elements B contained Si .

528

fiWeighted Electoral Control

WCCAV, W = (w1 , . . . , wn ) collection voters may add. assume
without loss generality voter W ranks p among top candidates (i.e.,
approves p).
form instance (B, r, S, ) WMC follows. set B = C {p}.
c B, set covering requirement rc = score (C,V ) (c) score (C,V ) (p),
j =def max(0, ij). vote w W , let Sw set candidates w
approve of. assumption regarding voter ranking p among top candidates,
Sw contains p. set = (Sw1 , . . . , Swn ) set = ((w1 ), . . . , (wn )). easy
see set {1, . . . , n} solution instance WMC (that is, satisfies
covering requirements) adding voters {wi | I} election (C, V )
ensures p winner. reason following: add voter wi
election candidate c Swi , difference score c score
p decreases (wi ), candidate c 6 Swi difference change.
covering requirements set guarantee ps score match exceed scores
candidates election.
stress construction assume constant. Indeed,
construction applies t-veto well t-approval. using Theorem 4.15
obtain following result.
Theorem 4.16. polynomial-time O(log m)-approximation algorithm tapproval-WCCAV. polynomial-time algorithm given instance
t-veto-WCCAV (t N) gives O(log t)-approximation.
Proof. suffices use reduction t-approval/t-veto WMC apply algorithm
Theorem 4.15. case t-approval, reduction guarantees set
WMC instance contains elements. case t-veto, sets
contains elements.
obtain analogous results case t-approval/t-veto WCCDV. One
either provide direct reduction problems WMC notice reductions
given proof Theorem 4.12 maintain approximation properties.
Theorem 4.17. polynomial-time algorithm given instance tapproval-WCCDV (t N) gives O(log t)-approximation. polynomial-time
O(log m)-approximation algorithm t-veto-WCCDV.
4.3.2 Direct Approach
Using algorithms WMC, able obtain relatively strong algorithms
WCCAV/WCCDV t-approval t-veto. However, approach
find approximation algorithms t-approval-WCCAV t-veto-WCCDV whose approximation ratios depend (and not, example, kCk, i.e., m, kV k).
following seek direct algorithms problems.
show simple greedy approach yields polynomial-time tapproximation algorithm t-approval-WCCAV t-veto-WCCDV. (Recall
means cases making p win possible, number voters algorithm
adds/deletes reach victory never times optimal set additions/deletions.)
529

fiFaliszewski, Hemaspaandra, & Hemaspaandra

Let GBW (greedy weight) define following simple algorithm WCCAV.
(The votes weighted t-approval vectors induced preferences voters.)
(Pre)discard unregistered votes approve preferred candidate p. Order
(remaining) unregistered votes heaviest lightest, breaking ties voter weights
simple, transparent way (for concreteness, let us say lexicographic order
votes representations). GBW goes unregistered votes order,
reaches vote adds vote exactly vote disapproves least one candidate
whose score (i.e., total weight approvals) currently strictly greater p.
stops successfully p become winner unsuccessfully happens
algorithm runs votes consider. following result says GBW tapproximation algorithm t-approval-WCCAV, t-veto-WCCDV, using
obvious analogue GBW t-veto-WCCDV, call GBW.7
Theorem 4.18. Let 3. polynomial-time greedy algorithm GBW tapproximation algorithm t-approval-WCCAV t-veto-WCCDV; instances GBWs approximation factor problems better t.
prove Theorem 4.18s upper lower bound parts separately, following
two lemmas theorem immediately follows.
Lemma 4.19. Let 3. instances polynomial-time greedy algorithm GBW approximation factor t-approval-WCCAV better t.
instances polynomial-time greedy algorithm GBW approximation
factor t-veto-WCCDV better t.
Lemma 4.20. Let 3. polynomial-time greedy algorithm GBW t-approximation
algorithm t-approval-WCCAV t-veto-WCCDV.
proof lower-bound claim, Lemma 4.19, consists somewhat detailed pair
constructions, less interest upper-bound part Theorem 4.18, namely
Lemma 4.20. thus defer appendix proof Lemma 4.19.
Proof Lemma 4.20. Let us prove two claims GBW t-approximation
algorithm. prove result = 3 WCCAV, immediately clear
proof straightforwardly generalizes greater t; WCCDV case follows
using Theorem 4.12.
Clearly GBW polynomial-time algorithm. Consider given input instance tapproval-WCCAV, preferred candidate p. Without loss generality, assume unregistered voters approve p. say candidate gap (under current
set registered voters whatever unregistered voters already added)
candidate strictly weight approvals p does. candidate
7. completeness clarity, describe mean GBW t-veto-WCCDV. Order votes
approve p heaviest lightest, breaking ties voter weights simple, transparent way (for concreteness, let us say lexicographic order votes representations). GBW
goes votes order, reaches vote removes vote exactly
vote approves least one candidate whose score (i.e., total weight approvals) currently strictly
greater p. stops successfully p become winner unsuccessfully
happens algorithm runs votes consider.

530

fiWeighted Electoral Control

gap, 6= p, define id minimum number unregistered voters one add
remove ds gap; is, one went heaviest lightest among unregistered voters,
adding turn disapproved d, id number voters one would add
longer gap. candidate holds integer realizes id , control
impossible using unregistered voter set. Clearly, successful addition voters must
add least maxd id voters (the max throughout proof candidates initially
gap).
Let us henceforth assume control possible input case. show
added 3 maxd id voters GBW made p winner, GBW
3-approximation algorithm.
giving detailed proof, let us informally give sense proofs idea.
Let z candidate allegedly gap GBW added 3maxd id voters,
freeze action GBW point. proof argues relatively many
3 maxd id voters added GBW (i.e., least maxd id them) approve z, z
clearly gap point time GBW frozen, assumed
gap cant exist case. proof argues relatively 3 maxd id
voters added GBW (i.e., (maxd id )1 them) approve z (equivalently,
least 1 + 2 maxd id approve z), arrive contradiction.
latter argument subtle one, involving asking candidates (call y) gap
caused last added vote added, needed drilling extra level
related few/many argument focused y, show GBW must point
acted way violates definition, thus yielding contradiction. Since
many cases cover possible cases, proof achieved
goal. provide formal analysis carries argument line.
So, suppose 3 maxd id additions candidate, z, still gap.
discussed perform case analysis case arrive contradiction.
Case 1 [In least maxd id first 3maxd id votes added GBW, z approved].
Since last one added z must still gap addition,
earlier vote considered disapproved z gap z considered
would added reached. So, keeping mind iz maxd id ,
fact must added iz heaviest voters disapproving z, contrary
assumption, z longer gap additions.
Case 2 [Case 1 hold]. z approved least 1 + 2 maxd id added
votes. made final one added votes, call v 0 , eligible addition? must
candidate, say y, still gap v 0 added.
Case 2a [y disapproved least maxd id 2 maxd id votes added v 0
approved z]. Then, since ys gap removed unregistered voters disapproving
would excluded GBW, ys iy heaviest voters added. contrary
Case 2s assumption, gap get adding vote v 0 .
Case 2b [Case 2 holds Case 2a not]. approved least 1 + maxd id
2 maxd id votes v 0 GBW added approve z. 1 + maxd id
votes added approving exactly z y. made last 1 + maxd id
votes, call v 00 , eligible added? must hold candidate w gap
v 00 . moment adding v 00 would added maxd id iw votes
approving exactly z disapproving w, since w allegedly still gap,
531

fiFaliszewski, Hemaspaandra, & Hemaspaandra

GBW would fact added iw heaviest voters disapproving
w, ws gap would removed v 00 , contrary assumption w
gap made v 00 eligible.
One might naturally wonder GBW performs t-veto-WCCAV t-approvalWCCDV. argument far easier used proof Lemma 4.20,
cases GBW provides t-approximation algorithm.
Theorem 4.21. GBW t-approximation algorithm t-veto-WCCAV. GBW tapproximation algorithm t-approval-WCCDV.
Proof. Consider t-veto-WCCAV. Let p preferred candidate. candidate
initial positive gap relative preferred candidate p (i.e., surplus p
total weight approvals), let id defined proof Lemma 4.20. (Recall id
number votes would need add remove surplus p took
unregistered votes, discarded didnt simultaneously approve p disapprove
d,
P added one time heaviest lightest gap removed.)
Clearly,
id , sum taken candidates initial surplus relative
p, upper bound number votes added GBW. true since GBW
works adding extra votes heaviest lightest, restricted vetoing candidate
point positive gap relative p; GBW gap closed
largest weight votes address it. hand, overall optimal solution
id lower bound smallest number votes solutions added-vote set
would suffice remove ds positive gap (since takes id even use heaviest
votes addressing gap). overall optimal solution added vote narrows
gaps. GBWs solution uses worst times many added votes optimal
solution.
claim t-approval-WCCDV follows Theorem 4.12.
result replaces flawed claim conference version paper (Faliszewski,
Hemaspaandra, & Hemaspaandra, 2013) GBW cousins provide
O(1) approximations problems.8 course, t-approximation two
problems (namely, t-veto-WCCAV t-approval-WCCDV) wildly exciting, since
problems multicover-based approach earlier section showed
function f (t), f (t) = O(log t), even f (t)-approximation algorithms
problems. However, constant big oh algorithm large,
possible sufficiently small values approach may give better
approximation. Also, feel interesting learn behavior explicit
heuristics, especially attractive approaches greedy algorithms.
natural ask whether similar greedy algorithms work well scoring rules,
e.g., Bordas rule. Unfortunately, families scoring rules t-approval
t-veto analysis, possible, would likely significantly different
ours. main reason thatas discussed Electoral Control subpart
8. Note treat constant and, so, t-approximation algorithm provides (indeed, is)
O(1) approximate one. reason true that, technically speaking, WCCAV WCCDV
problems defined separately voting rule. example, 2-approval-WCCAV different
problem than, say, 200-approval-WCCAV.

532

fiWeighted Electoral Control

Section 3for t-approval t-veto always easy verify whether exists
solution (although, perhaps, one far optimal). scoring
rules, e.g., Borda, clear whether possible (and conjecture that,
indeed, NP-complete so). However, might interesting research direction
evaluate effectiveness greedy algorithms empirically (we point reader
work Rothe & Schend, 2013, recent survey covering experimental studies
complexity control elections).

5. Related Work
study complexity (unweighted) electoral control initiated
Bartholdi, Tovey, Trick (1992), considered constructive control
adding/deleting/partitioning candidates/voters plurality rule Condorcet rule (that is, rule chooses Condorcet winner whenever one,
winners otherwise). various types control model least flavor
actions occur real world, voter suppression targeted get-out-the-vote
drives (see survey Faliszewski et al., 2010, examples discussions).
major motivation study control obtain complexity barrier results, is,
results show detecting opportunities various control attacks computationally
difficult. particular, Bartholdi, Tovey, Trick focused NP-hardness measure
computational difficulty.
research direction continued Hemaspaandra, Hemaspaandra,
Rothe (2007), first study destructive control attacks elections. Since
then, many authors studied electoral control many varied settings many
different rules; refer reader survey Faliszewski et al. (2010). recent
research, covered survey, includes complexity-of-control results t-approval
family rules (Lin, 2012), Bucklins rule (and fallback, extension truncated
votes; Erdelyi, Fellows, Rothe, & Schend, 2015a), maximin (Faliszewski et al., 2011),
range voting (Menton, 2013), Schultzes rule ranked pairs rule (Parkes
& Xia, 2012; Menton & Singh, 2013; Hemaspaandra, Lavaee, & Menton, 2013).
present paper, compare control manipulation. recent paper Fitzsimmons,
Hemaspaandra, Hemaspaandra (2013) studies settings control manipulation occurring. Researchers have, quite different setting electing members
fill fixed-size, multimember panel, defined variants control coexisting constructive destructive aspects (Meir, Procaccia, Rosenschein, & Zohar, 2008).
work analyzing counting variants control (Wojtas & Faliszewski, 2012),
goal decide given control attack possible, count number
ways attack carried out.
complexity-barrier research line turned successful. voting
rules considered, significant number control attacks NP-hard. Indeed,
even possible construct artificial election system resistant types control
attacks (Hemaspaandra, Hemaspaandra, & Rothe, 2009). However, number
results suggest practice complexity barrier might strong one
might first think. example, Faliszewski, Hemaspaandra, Hemaspaandra, Rothe
(2011) Brandt, Brill, Hemaspaandra, Hemaspaandra (2010) shown
533

fiFaliszewski, Hemaspaandra, & Hemaspaandra

votes restricted single-peaked, many control problems known
NP-complete become polynomial-time solvable. Indeed, often holds even elections
nearly single-peaked (Faliszewski et al., 2014), many real-world elections seem
(see, e.g., discussion Gehrlein & Lepelley, 2012, ch. 2). Similarly, initial
experimental results Erdelyi, Fellows, Rothe, Schend (2015b) suggest that, least
certain distributions settings, NP-hard control problems solved
practice many instances. part different line research, Xia (2012) studied
asymptotic behavior number voters added to/deleted
randomly constructed election successful control action.
number problems involving changing structure elections.
problems include candidate cloning, possible replace given candidate
c number clones (Elkind et al., 2011; Elkind, Faliszewski, & Slinko, 2012),
possible winner problem new alternatives join, additional, yet ranked
candidates introduced (Chevaleyre, Lang, Maudet, Monnot, & Xia, 2012; Xia, Lang,
& Monnot, 2011). last problem related possible winner problem
truncated ballots (Baumeister, Faliszewski, Lang, & Rothe, 2012a).
papers directly raise issue weighted control are, best
knowledge, theses Russell (2007) Lin (2012). However, mention
papers Baumeister, Roos, Rothe, Schend, Xia (2012b), Perek, Faliszewski,
Pini, Rossi (2013), authors, effect, consider problems affecting result
election picking weights voters. (The paper Perek et al. motivates
study differently, effect studies constrained variant choosing voter weights.)
problems similar to, though different from, simultaneous (multimode) addition
deletion voters (Faliszewski et al., 2011).
paper given f ()-approximation results weighted election control problems. Elkind Faliszewski (2010) given 2-approximation algorithm weighted,
bribery-related case.

6. Conclusions
studied voter control number voting rules, including scoring protocols,
families scoring protocols, (weak)Condorcet-consistent rules. shown
complexity voter control quite different complexity weighted
coalitional manipulation: natural voting rules weighted coalitional manipulation easy weighted voter control hard, natural rules
opposite case. Furthermore, shown weighted voter control
t-approval t-veto, good, natural approximation algorithms. results
voter control weighted elections summarized Tables 1, 2, 3.

Acknowledgements
grateful anonymous AAMAS 2013 JAIR referees extremely
helpful comments suggestions, incorporated examples.
thank editor, Jerome Lang, wise guidance.
work sup534

fiWeighted Electoral Control

WCCAV

WCCDV

WCM

Plurality

P (Thm. 4.1)

P (Thm. 4.1)

P

t-approval, 2 <

Borda

P (Thm. 4.1)

P (Thm. 4.1)

NP-comp.

NP-comp. (Thm. 4.2)

NP-comp. (Thm. 4.2)

NP-comp.

= (1 , . . . , ),
k{1 , . . . , }k 3

NP-comp. (Thm. 4.3)

NP-comp. (Thm. 4.3)

NP-comp.

Llull (3 candidates)

NP-comp. (Cor. 4.9)

NP-comp. (Cor. 4.9)

P

(weak)Condorcetconsistent rules

NP-hard (Thm. 4.7)

NP-hard (Thm. 4.7)

various
complexities

Table 1: results complexity control adding/deleting voters weighted
elections fixed number candidates, 3, compared complexity weighted coalitional manipulation. result marked due
Conitzer et al. (2007), results marked due Hemaspaandra
Hemaspaandra (2007), result marked due Faliszewski et al.
(2008).

WCCAV

WCCDV

t-approval
t=2
t=3
t4

P (Thm. 4.10)
NP-complete (Thm. 4.13)
NP-complete

NP-complete (Thm. 4.13)
NP-complete
NP-complete

t-veto
t=2
t=3
t4

NP-complete (Thm. 4.13)
NP-complete
NP-complete

P (Thm. 4.11)
NP-complete (Thm. 4.13)
NP-complete

Table 2: complexity control adding deleting voters t-approval t-veto
unbounded number candidates. results marked due
Lin (2012).

ported part grants AGH-11.11.230.124, NCN-DEC-2011/03/B/ST6/01393, NCNUMO-2012/06/M/ST1/00358, NSF-CCF-{0915792,1101452,1101479}, two Bessel
Awards Alexander von Humboldt Foundation.
535

fiFaliszewski, Hemaspaandra, & Hemaspaandra

WCCAV

WCCDV

t-approval

O(log m) (Thm. 4.16)
(Thm. 4.18)

O(log t) (Thm. 4.17)
(Thm. 4.21)

t-veto

O(log t) (Thm. 4.16)
(Thm. 4.21)

O(log m) (Thm. 4.17)
(Thm. 4.18)

Table 3: Approximation ratios algorithms WCCAV WCCDV tapproval t-veto.

Appendix A. Additional Details Related Section 4.3
present deferred proof Lemma 4.19 details related Section 4.3.
Proof Lemma 4.19. goal show GBW sometimes really use fully
times optimal number added/deleted votes, cases question. Examples
(somewhat detailed but) hard construct, lower bound even holds = 2,
though Section 4.2 obtained exact solution different approach. However, one
careful set gap pattern created unregistered voters
realizable one. t-approval-WCCAV construction, easy directly.
t-veto-WCCDV construction, establish realizability small tool
hope may prove useful elsewherethat lets one set certain patterns gaps.
state tool Tool A.1.
Fix {2, 3, 4, . . .}. construct instance t-approval-WCCAV
GBW uses times many additions optimal strategy. construction
2t candidates: preferred candidate p, candidates a1 , . . . , , candidates
d1 , . . . , dt1 . Now, suppose votes registered voters, gaps
follows. candidate ai , total weight approvals ai exceeds total weight
approvals p exactly 2t. candidate di , total weight approvals
di equals total weight approvals p. easily realized, namely
registered voter set one weight-2t voter approves ai .
set unregistered voters follows. one unregistered voter,
call nice, weight 2t, approves p 1 candidates di ,
disapproves candidates ai . j, 1 j t, single
unregistered voter, call j , weight 3t, approves p ai aj ,
disapproves aj di s.
Note GBW add voters . ideal would add single voter called
nice, since suffices make p winner. 2 constructed
setting GBW t-approval-WCCAV takes times optimal number
added votes.
holds 2, similarly construct setting GBW
t-veto-WCCDV takes times optimal number deleted votes, prove
setting realizable. fact, following something flavor
536

fiWeighted Electoral Control

scheme, except slightly different vote set adjusts handle case
deleting voters, care regarding realizability. construction. Fix
{2, 3, 4, . . .}. candidate set preferred candidate p, candidates
a1 , . . . , , candidates d1 , . . . , dt1 . Let us specify voter set. put
voter set collection weight-1 votes gaps total approval weight relative
d1 created votes follows. d2 dt1 total
approval weight d1 . total approval weight p exceeds d1 3t2 + 3t.
total approval weight ai exceeds d1 3t2 .
Tool A.1 below, observe 2t-candidate t-approval voting, gap
pattern gaps multiples realized. Since current proof
using 2t-candidate t-veto, 2t-candidate t-approval, Tool A.1
applies here. particular, Tool A.1 easily builds set weight-1 votes realizing precisely
desired set gaps. (The exact number weight-1 votes used construction
important. However, gaps mentioned vote-set size mentioned
tool, precise number easily seen (3t + 3 + t(3t))(2t 1).)
yet done building voter set. voter set one
voter, call nice, weight 2t, approves exactly ai s. j,
1 j t, one voter weight 3t approves exactly aj 1
di s.
entire set votes created abovethe votes tool combined
nice votes mentionedit easy see d1 candidate
least total approval weight, tied total approval weight di .
total approval weight p exceeds d1 3t. ai exceeds d1 total
approval weight 5t.
However, light pattern votes weights here, clear GBW
(in version t-veto) delete weight-3t voters. (Note votes added
Tool A.1 weight-1 votes, highly unattractive GBW.) ideal would
delete single voter called nice, since suffices make p winner.
2 constructed realizable setting GBW t-veto-WCCDV takes
times optimal number deleted votes.
Within proof, referred used small tool build certain
patterns vote weight gaps certain approval elections. would overreach
claim McGarvey-like tool, since different setting than, far less
flexible result than, famous theorem McGarvey (1953). However, small way
tool perhaps might useful elsewhere, state prove modest tool.
Tool A.1. Let 2. Let n1 , . . . , n2t1 list nonnegative integers divisible t.
exists collection t-approval votes, 2t candidates,
votes, relative candidate getting fewest approvals, list gaps number
approvals candidate otherP2t 1 candidates precisely (n1 , . . . , n2t1 ).
Furthermore, done (2t 1)( ni )/t unweighted (i.e., weight 1) votes.
alternatively done (2t 1)2 weighted votes (or even (2t 1)k{i | ni 6= 0}k
weighted votes).
Proof. Consider election 2t candidates, votes cast t-approval votes.
Consider collection 2t 1 votes, weight one, votes approve
537

fiFaliszewski, Hemaspaandra, & Hemaspaandra

particular candidate (for example, let one first candidate),
remaining 1 approvals cyclically rotate around candidates. t-approval
votes, viewed bit vectors, these: 1 1t1 0t , 1 0 1t1 0t1 , . . ., 1 0t 1t1 , 1 1 0t 1t2 , . . .,
1 1t1 0t 1. Note first candidate approved 2t 1 votes,
candidate approved exactly 1 votes. collection votes sets
gap favor first candidate, total approval weight first
candidate candidate difference total approval weight
pair candidates zero.
Given gap pattern stated tool, gap least-approved
candidate (call candidate c) multiple t, simply use approach
paragraph repeatedly, boost candidate, d, one time whatever
multiple supposed exceed c total approval weight. (In this, play
role first candidate previous paragraph.) ds surplus relative c kt
wish use weight-1 votes, k(2t 1) weight-1 votes.
Otherwise, 2t 1 weight-k votes. total number votes
used given statement tool.
appendix seeking provide comprehensive study gap collections
realizable t-approval voting, seeking find smallest number voters
needed realize realizable gap collection. interesting direction study,
goal here. However, mention clearly exist gap collections
cannot realized. example, exists claim Tool A.1 even
always true one removes assumption divisibility t. example showing
following. Consider 4-candidate setting votes 2-approval votes,
desire gap list relative least-approved candidate (1, 1, 1), i.e.,
candidates one approval least-approved candidate. Clearly,
total number approvals set votes achieving 4B + 3, B whatever
number approvals least-approved candidate happens get vote set one
trying, total number approvals odd. However, vote set 2-approval
votes even total number approvals. gap collection cannot realized.

References
Aziz, H., Bachrach, Y., Elkind, E., & Paterson, M. (2011). False-name manipulations
weighted voting games. Journal Artificial Intelligence Research, 40, 5793.
Bartholdi, III, J., & Orlin, J. (1991). Single transferable vote resists strategic voting. Social
Choice Welfare, 8 (4), 341354.
Bartholdi, III, J., Tovey, C., & Trick, M. (1989). computational difficulty manipulating election. Social Choice Welfare, 6 (3), 227241.
Bartholdi, III, J., Tovey, C., & Trick, M. (1992). hard control election?.
Mathematical Computer Modeling, 16 (8/9), 2740.
Baumeister, D., Faliszewski, P., Lang, J., & Rothe, J. (2012a). Campaigns lazy voters:
Truncated ballots. Proceedings 11th International Conference Autonomous
Agents Multiagent Systems, pp. 577584.
538

fiWeighted Electoral Control

Baumeister, D., Roos, M., Rothe, J., Schend, L., & Xia, L. (2012b). possible winner
problem uncertain weights. Proceedings 20th European Conference
Artificial Intelligence, pp. 133138.
Brandt, F., Brill, M., Hemaspaandra, E., & Hemaspaandra, L. (2010). Bypassing combinatorial protections: Polynomial-time algorithms single-peaked electorates.
Proceedings 24th AAAI Conference Artificial Intelligence, pp. 715722.
Brandt, F., Conitzer, V., & Endriss, U. (2013). Computational social choice. Wei, G.
(Ed.), Multiagent Systems (2nd edition). MIT Press.
Brelsford, E., Faliszewski, P., Hemaspaandra, E., Schnoor, H., & Schnoor, I. (2008). Approximability manipulating elections. Proceedings 23rd AAAI Conference
Artificial Intelligence, pp. 4449. AAAI Press.
Chen, J., Faliszewski, P., Niedermeier, R., & Talmon, N. (2014). Combinatorial voter control
elections. Proceedings 39th International Symposium Mathematical
Foundations Computer Science, Part II, pp. 153164. Springer-Verlag Lecture Notes
Computer Science #8635.
Chevaleyre, Y., Lang, J., Maudet, N., Monnot, J., & Xia, L. (2012). New candidates welcome! Possible winners respect addition new candidates. Mathematical
Social Sciences, 64 (1), 7488.
Congleton, R. (2011). Swedish transition democracy (Chapter 14). Perfecting
Parliament. Cambridge University Press.
Conitzer, V., Sandholm, T., & Lang, J. (2007). elections candidates
hard manipulate?. Journal ACM, 54 (3), Article 14.
Dwork, C., Kumar, R., Naor, M., & Sivakumar, D. (2001). Rank aggregation methods
web. Proceedings 10th International World Wide Web Conference, pp.
613622. ACM Press.
Elkind, E., & Faliszewski, P. (2010). Approximation algorithms campaign management. Proceedings 6th International Workshop Internet Network
Economics, pp. 473482.
Elkind, E., Faliszewski, P., & Slinko, A. (2011). Cloning elections: Finding possible
winners. Journal Artificial Intelligence Research, 42, 529573.
Elkind, E., Faliszewski, P., & Slinko, A. (2012). Clone structures voters preferences.
Proceedings 13th ACM Conference Electronic Commerce, pp. 496513.
Ephrati, E., & Rosenschein, J. (1997). heuristic technique multi-agent planning.
Annals Mathematics Artificial Intelligence, 20 (14), 1367.
Erdelyi, G., Fellows, M., Rothe, J., & Schend, L. (2015a). Control complexity Bucklin
fallback voting: theoretical analysis. Journal Computer System Sciences,
81 (4), 632660.
Erdelyi, G., Fellows, M., Rothe, J., & Schend, L. (2015b). Control complexity Bucklin
fallback voting: experimental analysis. Journal Computer System Sciences,
81 (4), 661670.
539

fiFaliszewski, Hemaspaandra, & Hemaspaandra

Faliszewski, P., Hemaspaandra, E., & Hemaspaandra, L. (2009). hard bribery
elections?. Journal Artificial Intelligence Research, 35, 485532.
Faliszewski, P., Hemaspaandra, E., & Hemaspaandra, L. (2010). Using complexity protect
elections. Communications ACM, 53 (11), 7482.
Faliszewski, P., Hemaspaandra, E., & Hemaspaandra, L. (2011). Multimode attacks
elections. Journal Artificial Intelligence Research, 40, 305351.
Faliszewski, P., Hemaspaandra, E., & Hemaspaandra, L. (2013). Weighted electoral control. Proceedings 12th International Conference Autonomous Agents
Multiagent Systems, pp. 367374.
Faliszewski, P., Hemaspaandra, E., & Hemaspaandra, L. (2014). complexity manipulative attacks nearly single-peaked electorates. Artificial Intelligence, 207, 6999.
Faliszewski, P., Hemaspaandra, E., Hemaspaandra, L., & Rothe, J. (2009). richer understanding complexity election systems. Ravi, S., & Shukla, S. (Eds.), Fundamental Problems Computing: Essays Honor Professor Daniel J. Rosenkrantz,
pp. 375406. Springer.
Faliszewski, P., Hemaspaandra, E., Hemaspaandra, L., & Rothe, J. (2011). shield
never was: Societies single-peaked preferences open manipulation
control. Information Computation, 209 (2), 89107.
Faliszewski, P., Hemaspaandra, E., & Schnoor, H. (2008). Copeland voting: Ties matter.
Proceedings 7th International Conference Autonomous Agents Multiagent Systems, pp. 983990. International Foundation Autonomous Agents
Multiagent Systems.
Fitzsimmons, Z., Hemaspaandra, E., & Hemaspaandra, L. (2013). Control presence manipulators: Cooperative competitive cases. Proceedings 23rd
International Joint Conference Artificial Intelligence, pp. 113119. AAAI Press.
Garey, M., & Johnson, D. (1979). Computers Intractability: Guide Theory
NP-Completeness. W. H. Freeman Company.
Gehrlein, W., & Lepelley, D. (2012). Voting Paradoxes Group Coherence: Condorcet
Efficiency Voting Rules. Springer.
Ghosh, S., Mundhe, M., Hernandez, K., & Sen, S. (1999). Voting movies: anatomy
recommender systems. Proceedings 3rd Annual Conference Autonomous
Agents, pp. 434435. ACM Press.
Hemaspaandra, E., & Hemaspaandra, L. (2007). Dichotomy voting systems. Journal
Computer System Sciences, 73 (1), 7383.
Hemaspaandra, E., Hemaspaandra, L., & Rothe, J. (2007). Anyone him: complexity
precluding alternative. Artificial Intelligence, 171 (56), 255285.
Hemaspaandra, E., Hemaspaandra, L., & Rothe, J. (2009). Hybrid elections broaden
complexity-theoretic resistance control. Mathematical Logic Quarterly, 55 (4), 397
424.
540

fiWeighted Electoral Control

Hemaspaandra, E., Hemaspaandra, L., & Schnoor, H. (2014). control dichotomy pure
scoring rules. Proceedings 28th AAAI Conference Artificial Intelligence,
pp. 712720. AAAI Press.
Hemaspaandra, L., Lavaee, R., & Menton, C. (2013). Schulze ranked-pairs voting
fixed-parameter tractable bribe, manipulate, control. Proceedings
12th International Conference Autonomous Agents Multiagent Systems, pp.
13451346.
Hemaspaandra, L., & Williams, R. (2012). atypical survey typical-case heuristic
algorithms. SIGACT News, 43 (4), 7189.
Kolliopoulos, S., & Young, N. (2005). Approximation algorithms covering/packing integer programs. Journal Computer System Sciences, 71 (4), 495505.
Lin, A. (2012). Solving Hard Problems Election Systems. Ph.D. thesis, Rochester Institute
Technology, Rochester, NY.
Lu, T., & Boutilier, C. (2011). Budgeted social choice: consensus personalized decision making. Proceedings 22nd International Joint Conference Artificial
Intelligence, pp. 280286.
McGarvey, D. (1953). theorem construction voting paradoxes. Econometrica,
21 (4), 608610.
Meir, R., Procaccia, A., Rosenschein, J., & Zohar, A. (2008). complexity strategic
behavior multi-winner elections. Journal Artificial Intelligence Research, 33,
149178.
Menton, C. (2013). Normalized range voting broadly resists control. Theory Computing
Systems, 53 (4), 507531.
Menton, C., & Singh, P. (2013). Control complexity Schulze voting. Proceedings
23rd International Joint Conference Artificial Intelligence, pp. 286292.
Parkes, D., & Xia, L. (2012). complexity-of-strategic-behavior comparison
Schulzes rule ranked pairs. Proceedings 26th AAAI Conference
Artificial Intelligence, pp. 14291435.
Perek, T., Faliszewski, P., Pini, M., & Rossi, F. (2013). complexity losing voters. Proceedings 12th International Conference Autonomous Agents
Multiagent Systems, pp. 407414.
Rothe, J., & Schend, L. (2013). Challenges complexity shields supposed
protect elections manipulation control: survey. Annals Mathematics
Artificial Intelligence, 68 (13), 161193.
Russell, N. (2007). Complexity control Borda count elections.
Rochester Institute Technology.

Masters thesis,

Waggoner, B., Xia, L., & Conitzer, V. (2012). Evaluating resistance false-name manipulations elections. Proceedings 26th AAAI Conference Artificial
Intelligence, pp. 14851491.
Wagman, L., & Conitzer, V. (2014). False-name-proof voting costs two alternatives. International Journal Game Theory, 43 (3), 599618.
541

fiFaliszewski, Hemaspaandra, & Hemaspaandra

Wojtas, K., & Faliszewski, P. (2012). Possible winners noisy elections. Proceedings
26th AAAI Conference Artificial Intelligence, pp. 14991505.
Xia, L. (2012). many vote operations needed manipulate voting system?.
Proceedings (Workshop Notes) 4th International Workshop Computational
Social Choice, pp. 443454.
Xia, L., Lang, J., & Monnot, J. (2011). Possible winners new alternatives join:
New results coming up!. Proceedings 10th International Conference Autonomous Agents Multiagent Systems, pp. 829836. International Foundation
Autonomous Agents Multiagent Systems.

542


