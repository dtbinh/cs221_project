journal artificial intelligence

submitted published

strong equivalence qualitative optimization
wolfgang faber

faber mat unical

department mathematics
university calabria
via p bucci cubo b rende italy

miroslaw truszczynski

mirek cs uky edu

department computer science
university kentucky
rose street lexington ky usa

stefan woltran

woltran dbai tuwien ac

institute information systems
vienna university technology
favoritenstrae vienna austria

abstract
introduce framework qualitative optimization simply optimization represent preference theories formalism uses separate modules
describe space outcomes compared generator preferences outcomes selector consider two types optimization differ
way generator model propositional theory interpreted standard propositional logic semantics equilibrium model answer set semantics
latter interpretation generators optimization directly generalize
answer set optimization programs proposed previously study strong equivalence
optimization guarantees interchangeability within larger context characterize several versions strong equivalence obtained restricting
class optimization used extensions establish complexity
associated reasoning tasks understanding strong equivalence essential modular
representation optimization rewriting techniques simplify without
changing inherent properties

introduction
introduce framework qualitative optimization following design answer set optimization aso programs brewka niemela truszczynski
use separate modules describe space outcomes compared generator
preferences outcomes selector optimization consider selector module follows syntax semantics preference modules
aso programs generator given propositional theory propositional theory interpreted according standard propositional logic semantics
outcomes compared classical generator speak classical optimization co short generator theory interpreted
semantics equilibrium pearce speak answer set optimization
aso short use terminology equilibrium
c

ai access foundation rights reserved

fifaber truszczynski woltran

usually referred answer sets ferraris historical reasons aso
answer sets generator outcomes used determine optimal outcomes
representing reasoning preferences qualitative settings important
area knowledge representation qualitative decision theory main objectives design expressive yet intuitive languages model preferences develop automated methods reason formal representations preferences
languages literature subject preferences vast refer reader articles special issue artificial intelligence magazine goldsmith junker
recent monograph kaci thorough discussion area
additional references
understanding optimization equivalent particular one
interchanged another within larger context fundamental preference
formalism speaking informally optimization p q interchangeable
strongly equivalent every optimization r context p r qr define
optimal understanding one optimization equivalent
another sense essential preference analysis modular preference representation
rewriting techniques simplify optimization forms amenable
processing without changing inherent properties let us consider multi agent
setting agents combine preferences set alternatives goal
identifying optimal ones one agent ensemble replaced another
set optimal alternatives unaffected extension
ensemble future strong equivalence agents optimization precisely
needed guarantee full interchangeability property
notion strong equivalence general interest means restricted preference formalisms cases notably classical logic coincides equivalence
property however semantics monotone
extending theory may introduce eliminate strong equivalence
becomes strictly stronger concept one adopt theories analyzed
placed within larger context nonmonotonicity semantics salient feature
nonmonotonic logics marek truszczynski strong equivalence theories
nonmonotonic logics especially logic programming answer set semantics gelfond
lifschitz extensively studied setting lifschitz pearce valverde
turner eiter fink woltran b preference formalisms often
behave nonmonotonically adding preference may cause non optimal outcome
model become optimal one thus preference formalisms equivalence strong
equivalence typically different notions accordingly strong equivalence studied
logic programs rule preferences faber konczak programs ordered disjunction faber tompits woltran programs weak constraints eiter
faber fink woltran
extend study strong equivalence formalism qualitative optimization
formalism motivated design answer set optimization aso programs brewka et al borrows two key features aso programs make
attractive alternative preference modeling approaches logic programming
mentioned first following aso programs optimization provide
clear separation hard constraints specify space feasible outcomes


fistrong equivalence qualitative optimization

preferences soft constraints impose preference ordering feasible outcomes second optimization adopt syntax semantics preference rules aso
programs correspond closely linguistic patterns simple conditional preferences
used humans
separation preference modules hard constraints facilitates eliciting representing preferences important characterizing strong equivalence
clear separation present logic programs ordered disjunctions brewka
niemela syrjanen strong equivalence characterizations cumbersome
account complex mostly implicit interactions hard constraints
preferences optimization impose separation onedimensional forms strong equivalence hard constraints preferences
added one dimensional concepts easier study yet provide enough information construct characterizations general case
main contributions

main contribution summarized follows

propose general framework qualitative optimization extending
several ways formalism aso programs focus two important instantiations framework classes classical optimization co
answer set optimization aso latter one directly generalizes aso
programs
identify strong equivalence theories general preference formalisms point strong equivalence equivalence coincide
general preference formalisms concept strong equivalence
fundamental issues theory modularity rewriting simplification strong equivalence studied earlier context logic programs logic
programs extended preferences rules atoms heads rules
similarly motivated however best knowledge first
studies strong equivalence typical preference formalism
represents preferences terms preferred properties modeled formulas
independently constraints defining outcomes compare
relevance mainstream preference previous studies
characterize concept strong equivalence optimization relative
changing selector modules characterization independent semantics
generators applies co asp characterize
strong equivalence relative changing generators preferences fixed
case surprisingly characterization depends semantics generators
however dependence quite uniform involves characterization strong equivalence generators relative underlying semantics
considered propositional theories finally combine
characterizations one dimensional concepts strong equivalence characterization general combined notion
develop case preferences ranked practice preferences commonly ranked due hierarchical structure preference providers


fifaber truszczynski woltran

general case study allows additions preferences ranks specified interval j covers case segment hierarchy
preference providers allowed add preferences top decision makers middle management low level designers well case distinction
importance preferences non ranked case
establish complexity deciding whether two optimization strongly equivalent relative changing selectors generators
range co np p complete
organization following section introduce concept optimization
necessary terminology define equivalence interested
discuss relationship optimization formalisms
literature particular aso programs section provide
case selectors may vary hard constraints allowed section
turn characterizes strong equivalence notion preferences unaffected
generator parts subject change section finally characterizations
obtained previous sections combined order capture general case
strong equivalence complexity analysis presented section followed
discussion considerations future directions
present proof sketches simpler overly technical proofs
main text facilitate understanding intuitive level detailed proofs
found appendix
article substantially extended version earlier published conference version
faber truszczynski woltran

optimization
section provide basic definitions optimization section
followed section definitions strong equivalence notions optimization
studied remainder finally section provide
discussion related formalisms
basic definitions
qualitative optimization optimization ordered
pair p called generator selector role
generator specify family outcomes compared role selector
define relation set outcomes consequently define notion
optimal outcome relation induces relations define j j
j j j j optimization p write p g p
refer generator selector respectively
generators generators use propositional theories language determined
fixed countable universe alphabet u propositional variables form atomic
propositions boolean constant boolean connectives
define constant connectives usual way


fistrong equivalence qualitative optimization

respectively generator defined
semantics used represent outcomes corresponding optimization
consider two quite different semantics generators classical propositional logic
semantics semantics equilibrium pearce thus outcomes
equilibrium depending semantics chosen first semantics
interest due fundamental role widespread use classical propositional logic
particular means describe constraints equilibrium generalize answer sets
logic programs case arbitrary propositional theories pearce ferraris
often referred answer sets semantics equilibrium important
due demonstrated effectiveness logic programming semantics answer
sets knowledge representation applications use terms equilibrium
answer sets interchangeably
throughout represent interpretations subsets u contain
exactly atomic propositions interpreted true write state
interpretation u classical propositional model formula furthermore
denote set classical formula theory mod
equilibrium arise context propositional logic
logic ht short heyting briefly recall definitions concepts
well properties logic ht directly relevant work refer
papers pearce ferraris details
logic ht logic located intuitionistic classical logics interpretations logic ht pairs hi ji standard propositional interpretations
j write hi ji ht denote formula holds interpretation
hi ji logic ht relation ht defined recursively follows
hi ji ht
atom hi ji ht precisely
hi ji ht hi ji ht hi ji ht
hi ji ht hi ji ht hi ji ht
hi ji ht j classical satisfiability hi ji ht
hi ji ht
equilibrium model answer set propositional theory standard interpretation hi ii ht every proper subset j hj ii ht answer
sets propositional theory classical converse true
general denote set answer sets theory set
ht modht modht hi ji j hi ji ht
semantics two natural concepts equivalence two theories
equivalent classical equilibrium respectively
strongly equivalent every theory
classical equilibrium respectively
choice primitive connectives common language classical propositional logic
standard logic underlies answer set semantics



fifaber truszczynski woltran

classical semantics strong equivalence equivalence coincide
semantics equilibrium lifschitz et al states two
theories strongly equivalent equilibrium
equivalent logic ht modht modht illustrate
notions ht equilibrium relate latter classical ones
examples consider classical ht alphabet
consisting atoms explicitly mentioned theories discussed sufficient
determine equilibrium one hand happen consist atoms
mentioned differ classical ones
example let us consider theory ta classical ta
restriction mentioned true false possible
outcomes ht restriction h h
h hence one answer set equilibrium model possible
candidate answer set h ht ta holds h ht ta
thus intuitively theory contain cause hold
next let us consider theory tb ab classical b b
ht h h b b h b h b b h b b
answer sets therefore b b intuition
theory contain cause b hold simultaneously
finally let us consider theory tc b b classical
tb mod tc b b modht tc
h h b b h b h b b h b b h b modht tb
h b answer sets tb tc b
observe tb tc equivalent classical equilibrium setting
classical equilibrium former implies
strongly equivalent classical setting however strongly equivalent
equilibrium setting modht tb modht tc cf characterization strong
equivalence equilibrium semantics lifschitz et al indeed
b b obtain tb b tc
recall optimization classical interpretation generators
referred classical optimization co use
answer set semantics generators speak answer set optimization
aso
selectors follow definitions preference modules aso programs brewka
et al adjusting terminology general setting selector finite
set ranked preference rules
j
k

k j positive integers k propositional formulas
u rule r form number j rank r denoted rank r
hd r k head r body condition r bd r moreover
write hd r refer formula
rank r every preference rule r selector simple selector

otherwise ranked often omit notation simple selectors


fistrong equivalence qualitative optimization

selector j define j r rank r j
assume every integer k k write j rank interval
k k integer k j extend notation optimization
p rank interval j set p j j rank intervals
use shorthands example similar
interpretation satisfaction
degree preference rule r vi r min
w
hd r bd r hd r otherwise rule irrelevant vi r
intuitively lower satisfaction degree better outcome thus preference
rule k informally read follows irrelevant outcomes
satisfying satisfying outcomes satisfying preferred
followed outcomes satisfying outcomes satisfying etc note
brewka et al represented satisfaction degree irrelevant rule special
non numeric degree treated equivalent difference immaterial
two approaches equivalent
selectors determine preference relation interpretations given interpretations
j simple selector j holds precisely r vi r vj r
therefore j holds j exists r vi r vj r
j holds every r vi r vj r
given ranked selector define j every preference rule r vi r
vj r rule r following three conditions hold
vi r vj r
every r rank r vi r vj r
every r smaller rank r vi r vj r
moreover j rule r three conditions hold
j every r vi r vj r given optimization
p often write p similarly furthermore set
v u relation u write v restriction
v v b b v relationship equalities
two optimization follows
lemma optimization p q every set v u pv q
v
q
p
implies pv q
v v v
p
proof suppose pv q
v let j interpretations v j definiq
q
q
p
p
tion iv j j v assumption iv j j v implying v j case ipv j
q
ipv j jpv assumption iq
v j jv hold well conclude
q
q
p
p
iq
v j direction v j implies v j iv j implies iv j analogous

aspects aso selectors require additional discussion first preference rule
may irrelevant outcome case outcome satisfy
condition rule satisfy formula head
rule cases define outcome desirable respect rule
making choice followed original definition brewka et al modulo


fifaber truszczynski woltran

minor simplification mentioned earlier obviously choices could considered
instance could define irrelevant outcomes least desirable respect
rule could restrict attention selectors permit irrelevance
preference rule allow irrelevance body disjunction
options head tautology would eliminate need address issue
altogether however price constraining definintion selector rules
ultimately question right design choice secondary importance
semantics preference rules adopted provides us flexibility represent
possible definitions particular note semantics rule
n
rule
n
words conditions rule bodies modeling device making preference
rules better correspond conditional preferences expressed natural language
compiled away second type irrelevance formalism selectors allows
user override default adopted make adopted design choice explicit
making outcomes satisfying options head explicitly
desirable intuitively sufficient rewrite rule without body since bodies
removed shown earlier
n

n n
equivalently
n n
following rewriting makes least desirable
n n
equivalently
n n
another question concerns rules one option head intuitively given
semantics important satisfaction degree
indeed corollary later provides formal confirms statement
optimal preferred outcomes optimization p p denotes set
outcomes p set selected semantics
generator p thus p stands p framework co
answer sets p aso considered model p
optimal preferred p model j p j p denote
set preferred p p
following lemma asserts preference relation two optimization
equal sets outcomes preferred coincide follows


fistrong equivalence qualitative optimization

immediately definitions useful sequel statement brings
subtle notational issue formally strict preorder pair set
domain preorder transitive acyclic binary relation preorder
relation two preorders equal domain relation
domain typically whenever domain understood refer preorders
pointing relation symbols often however write preorder relation
symbol make domain explicit notation statement

lemma let p q optimization p p q
q p q
proof
observed equality preorders implies equality domains case equality p p q
q implies p q hence
p
q
j p q j iff j follows directly definition
preferred outcomes
observe eliminating rules large ranks make unpreferred outcomes preferred never make preferred outcomes unpreferred recall
given optimization p p p corresponding
optimization rules rank higher removed
lemma every optimization p every p p
proof let us assume
p case
p
p
p
p

follows otherwise interpretation j p j
thus
say rank j v r v r ii every r p
rule r p
j


rank less j v r v r
rank j vj r vi r iii every r p
j

note since p p j p moreover j sets rules
coincide thus j p follows
ranks less equal j p p
consequently
p

notions equivalence
define union optimization expected p
p set p p two optimization p
p strongly equivalent respect class r optimization referred
class contexts simply contexts every optimization r r
p r p r
consider three general classes contexts first foremost interested
class lu optimization u consider families lgu
lsu optimization form respectively first class
consists optimization added affect
set feasible outcomes cannot affect preference relation call optimization
generator second class consists optimization
added change set feasible outcomes change


fifaber truszczynski woltran

general preference relation call optimization selector
one dimensional contexts provide essential insights general case
two classes speak strong gen equivalence denoted g strong sel equivalence
denoted respectively general class lu optimization simply
speak strong equivalence denoted sg
recall notion strong equivalence definition underlying replacement property fact optimization p containing subproblem
q e guarantee q replaced p
another subproblem r without changing optimal outcomes q sg r indeed
q sg r holds one faithfully replace q r optimization otherwise
would q p r p p lu
constraining ranks rules selectors gives rise additional classes contexts parameterized rank intervals j
j

lu

j

lu

lsu j

lu j

first class contexts gives rise strong sel equivalence respect rules
rank j denoted j second class contexts yields concept strong
j
equivalence respect rules rank j denote g
call


class lu lu simple optimization
relation preference formalisms
optimization closely related aso programs brewka et al
formalism optimization extends aso programs several ways first
generators optimization arbitrary propositional theories
semantics equilibrium generators properly extend logic programs
answer set semantics used generators aso programs second selectors
optimization use arbitrary propositional formulas heads preference
rules well conditions bodies generalizes selectors
aso programs finally optimization explicitly allow alternative semantics
generators possibility mentioned pursued brewka et al
already noted introduction vast literature preference representation reasoning special issue artificial intelligence magazine goldsmith
junker monograph kaci two comprehensive sources relevant
references survey preference approaches top nonmonotonic formalisms see
delgrande schaub tompits wang discussing goes beyond scope
present especially focus strong equivalence
considered much preference essentially
relevant earlier except already mentioned introduction faber
konczak faber et al eiter et al nevertheless since work uses
preference formalism aso extension formalism aso programs
brewka et al received much attention preference
others make comments choice


fistrong equivalence qualitative optimization

first aso explicit constraints must violated
generator part preferences weaker constraints make outcomes
desirable others selector part aso match well practical settings typically kinds constraints play instance product
configuration physical constraints limiting space available possibilities every type engine put small family sedan moon roof available
basic engine option etc well user preferences describe user
would possible preferential reasoning optimization presence hard
constraints received substantial attention representative cp nets
boutilier brafman domshlak hoos poole combined constraints
described boutilier brafman domshlak hoos poole
choice propositional logic represent constraints generator part formalism standard however contrast approaches addition classical
semantics consider appealing alternative semantics answer sets
important resulting formalism answer set programming marek truszczynski
niemela steadily gaining acceptance constraint language
supported ever improving computational tools calimeri ianni krennwallner ricca

hand choice formalism selector part less obvious
several reasons motivated us first one already mentioned
earlier preference rules natural reading agreeing well linguistic
patterns humans use formulating qualitative conditional preferences second
demonstrated original work aso selectors introduced brewka et al
used approximate preference relations defined cp nets
boutilier et al one broadly studied qualitative preference systems
better computational properties instance dominance p
opposed np hard even pspace complete generalized classes
cp nets goldsmith lang truszczynski wilson
third individual preference rules closely related one standard approaches
representing preferences possibilistic logic give
basic details comprehensive discussion refer kaci ch
preference theory consists formulas distinct rank assumption
ranks distinct limiting formulas repeating ranks conjuncted
single formula rank quality outcome given score defined
minimum rank formula outcome satisfy formulas
satisfied higher score better outcome let n preference
theory index representing rank clear preference
semantics theory described precisely captured preference rule
n n
n thus aso subsume preference
formalism possibilistic logic
finally selector part aso typically consists several preference rules
rules may different ranks allows us model preferences coming
different sources different importance cases main issue


fifaber truszczynski woltran

integrating individual preferences single order single broadly
accepted way used formalism boils pareto
principle arguably common core integration principles accordingly
formalism allows conflicting rules selector instance b b
leaves conflicts unresolved resulting incomparability ranks lower
rank important rule rules less importance used compare outcomes
rules importance distinguish way handling ranks
natural shows many preference formalisms
one prominent example context prioritized propositional circumscription
lifschitz minimization certain atoms formula defined
respect classes atoms different priority formally let theory
atoms p pn v f partition model mod called
p pn v f minimal n mod n p pi
p pi n pi pi si n ii n f f
intuition behind definition atoms p pi minimized
assignments v allowed vary assignments f kept fixed atoms p
minimized p highest priority followed p etc
relation ranks quite obvious one p pn v f minimal
theory coincide preferred outcomes co x
selector given




f f f f f f f f


p p p pi n
indeed preference rules first two sets ensure interpretations
fixed part comparable preference rules last group precisely reflect prioritized process minimization atoms p pn
let us finally mention formalism optimization gives
handle classical prioritized circumscription circumscription put
top logic programs meaningless forms currently prevalent answer
set programming answer sets necessarily minimal see instance simons
niemela soininen end suffices apply embedding aso
instead co

strong sel equivalence
start analyzing case strong sel equivalence turns core case
study indeed characterizations strong sel equivalence naturally imply characterizations general case thanks following simple observation
proposition let p q optimization classical answer set
j
semantics generators j rank interval p g
q
every generator r lgu p r j q r
j

proof let r lgu since p g

j

q p r g


q r p r j q r

fistrong equivalence qualitative optimization

j

let r optimization lu p r p rg rs
qr q rg rs moreover assumption p rg j
q rg thus
p rg rs q rg rs
j

follows p r q r consequently p g

q

furthermore set outcomes optimization p unaffected changes
selector module follows choice semantics generators
matter characterizations strong sel equivalence thus whenever section
refer set outcomes optimization p use notation p
specific one mod p g p g applies co aso
respectively
formally state subsequent need one auxiliary notation
optimization p define diff p j largest k p k j
every k p k j set diff p j clear diff p j
well defined moreover p j diff p j following lemma characterizes
relation p q ranked optimization p q
lemma let p q optimization j interpretations
p q j holds one following conditions holds
diff p j diff q j p j
diff p j diff q j q j
diff p j diff q j p j q j
proof direction evident prove direction note
cases diff p j diff q j diff p j diff q j obvious thus let us
assume diff p j diff q j clearly otherwise p q j contrary
assumption follows every rule r p qs rank less vi r vj r
next every r p qs rank vi r vj r finally rules r p
r qs rank vi r vj r vi r vj r since diff p j
diff q j follows vi r vj r vi r vj r thus p j
q j needed
first main concerns strong sel equivalence relative selectors consisting
preference rules ranks rank interval j special cases strong sel equivalence
follow corollaries
considering strong sel equivalence means preference rules may added optimization three main effects outcomes equally good
may become strictly comparable strict comparability may turned incomparability
order strict comparability may reversed illustrate phenomena
may affect strong sel equivalence forthcoming examples importantly lead us towards conditions necessary strong sel equivalence
motivate characterization property formally state theorem


fifaber truszczynski woltran

example let p theory generating exactly two outcomes
b example b empty clearly p b
b equally good respect p possible make comparable

adding preference rules example let r b
p r b thus p r evident pair equally good
interpretations j one context consisting preference rules make
strictly preferred j rule least preferred j one
strictly prefer j precise ranks context
importance
example let p theory generating exactly two outcomes

b b rank clearly p b therefore
p possible make b incomparable adding appropriate

context example r b obtain
p r b b
p r
thus p r b
important note rank context preference rule must exactly equal
rank original preference rule order achieve effect otherwise one
preference rule would override general pair strictly comparable
interpretations j one appropriate context makes j incomparable
contrast example context must make use rules particular ranks
example let p theory admitting exactly two outcomes

b b rank clearly p b therefore
p possible reverse comparability b adding

appropriate context example r b obtain b p r thus
p r b
important note order achieve effect context must contain
preference rules lower ranks preference rules originally ordered j
original ordering overridden means technique
applicable preference rules rank general pair strictly comparable
interpretations j comparison stems preference rules rank adding
context consisting preference rules lower rank reverse comparability j
reversed strict order example context must make use particular
ranks
three effects may exploited order construct examples
strongly sel equivalent suggest necessary conditions strong sel equivalence
first effect turn preferred outcomes non preferred second third
turn non preferred outcomes preferred ones second third effects imply
conditions specialized context needs rules particular ranks




example consider p b q b
theory admitting exactly two outcomes b p b q b
p q two therefore equivalent however


fistrong equivalence qualitative optimization

discrepancy respect ranks preference rules take advantage
order programs strongly sel equivalent

let us consider context r b context exploits second effect
mentioned makes b incomparable respect q extended
r q r b b q r thus turning b preferred outcome
q r b hand preference rule effect p
rank weaker preference rule p hence p r
therefore p q
analyzing example observe context r exploits difference
preferred outcomes considering preference rules rank lower
indeed p q b




example next let us consider p p b q b
theory admitting exactly two outcomes b p b
q b p q observe p
q b difference example preference
rule q rank
possible construct context witnesses p strongly sel

equivalent q preference rules rank r b b
directly add conflicting preference rules override preference rule q
overridden preference rule p get p r
q r b p q
examples motivate condition theorem moreover rather easy
see counterexample p j q involve outcomes p
q selector context rank interval j make outcomes preferred
however different point view condition theorem fairly weak
cover easy cases strong sel non equivalence shown following
example




example let us define p p b q b
theory admitting exactly two outcomes b p b b q
p q b p q even equivalent hence
p j q rank interval j however p b q
b condition theorem satisfied rank intervals j
condition theorem covers cases one example example
rather simple even require context order create witness strong
sel non equivalence general one create context order make certain
outcomes preferred remains considered cases discrepancy
stemming preference rules inside context rank interval




example let p b q b theory
admitting exactly two outcomes b pair p q

example consider context r b unlike r example


fifaber truszczynski woltran

rule rank context makes b incomparable respect extended
p p r b b p r thus turning b preferred outcome
keeping therefore p r b hand
preference rule overrides one q turning b preferred outcome making
non preferred q r b therefore p q
unlike example p q b different reason allows counterexample observe diff p b
diff q b allows adding appropriate preference rule rank
important add rule one two differing ranks indeed
context comprising rules rank one serve counterexample strong
sel equivalence indeed p q
finally motivates condition theorem two outcomes discussed
earlier restrict outcomes p q context rank interval
j differ ranks one ranks inside rank interval use
constructions example order obtain counterexample strong sel equivalence
three conditions theorem indeed characterize strong selequivalence
theorem ranked optimization p q every rank interval j
p j q following conditions hold
p q
p p q
q
every j p diff p j diff q j diff p j
diff q j diff p j j diff q j j
proof quite involved requires several auxiliary properties
provide appendix together proofs main
next discuss special cases characterization theorem first
consider case allows simplification theorem
corollary ranked optimization p q every rank interval j
p j q following conditions hold
p q
p p q
q
every j p diff p j diff q j diff p j j diff q j
j
proof starting theorem note selectors p q empty
hence p p q q moreover precondition diff p j
diff q j condition theorem satisfied pair
j p one diff p j diff q j holds together


fistrong equivalence qualitative optimization

diff p j diff q j consequent satisfied case well allows
omitting precondition
addition j obtain case rank unrestricted selector contexts
condition simplified since diff p j j diff q j j never
hold j
corollary optimization p q p q equivalently p q
p q following conditions hold
p q
p p q
q
every j p diff p j diff q j
next note optimization p simple rules rank
diff p j diff p j equivalent p j observation leads following characterization strong sel equivalence simple optimization

corollary simple optimization p q following statements
equivalent
p q equivalently p q
b p q equivalently p q
c p q p p q
q
proof implication b evident definitions
b c corollary j obtain p q condition p p q
q
follows conditions corollary indeed let us consider j p
p j distinguish two cases diff p j p j
condition corollary q j implying q j ii diff p j
condition corollary diff q j since p q simple q j
consequently q j symmetry q j implies p j thus
p p q
q
q
p
c c follows lemma p p q
q p q thus
conditions corollary follow prove condition let us first assume
diff p j j p follows diff p j thus p p j since
q
q
p
q
p p q
q get q j thus diff j hence diff j diff j

diff q j reason analogously last remaining case diff p j
diff q j thus directly obtain diff p j diff q j corollary p q
follows



fifaber truszczynski woltran

corollary shows particular simple difference
relations property reflects role preference rules rank
higher allow us break ties among optimal outcomes defined preference
rules rank thus eliminate outcomes family optimal
ones cannot introduce optimal outcomes therefore affect strong
sel equivalence simple property following generalization ranked
optimization
corollary let p q ranked optimization let k maximum
rank preference rule p q relations k equivalently k
k equivalently k k coincide
proof clearly p k q implies p k q thus enough prove p k q
p k q characterization theorem observe conditions
p k q p k q since p k q
every j p k k diff p j k diff q j diff p j diff q j
diff p j k diff q j k let us consider j p k
diff p j k follows diff q j k since k maximum rank preference rule p q diff p j diff q j thus diff p j diff q j
case diff q j k similar obtain every j p k
k diff p j k diff q j diff p j diff q j property implies condition p k q thus p k q follows
observation role preference rules ranks higher ranks rules
p q implies p q strongly sel equivalent relative selectors consisting
exclusively rules p q equivalent optimal
outcomes optimal outcomes tie p tie q conversely formally
following
corollary let p q ranked optimization let k maximum
rank preference rule p q p k q p q
p p q
q
proof clearly p k p q k q p k p q k
q thus part follows theorem condition theorem reduces
p q condition implies p p q
q prove part note
condition theorem holds assumption moreover relations p p
q
q empty coincide thus condition theorem holds finally
j p diff p j k diff p j p j assumption q j diff q j diff p j case diff q j k
similar thus condition theorem holds p k q follows
lastly give simple examples illustrating used safely
modify simplify optimization rewrite one another strongly selequivalent one


fistrong equivalence qualitative optimization

example let p b c b c b c
c b c p b c regarding
co p p b c moreover evident

p p p p thus corollary p p strongly sel equivalent words
faithfully replace rules c b c selector optimization
generator single rule b c
example general principle note removing preference rules
one formula head yields strongly sel equivalent
corollary let p q two co aso p g qg qs
obtained p removing preference rules one formula head e
rules r hd r p q strongly sel equivalent
proof conditions theorem follow observation every interpretation every preference rule r hd r vi r

strong gen equivalence
focus case strong gen equivalence semantics generators makes
difference difference concerns fact two semantics
consider concepts strong equivalence different aspects characterizations specifically generators strongly equivalent relative
selected semantics indeed following example shows generators
strongly equivalent one extend uniformly extension one
single outcome trivially optimal one one
outcomes optimal ones
example consider co p b
b two outcomes b p b let r
preference rule clearly v r v b r thus p b
p
addition let q co b
q trivially q follows p q
equivalent specify optimal outcomes however strongly
gen equivalent strongly equivalent indeed let r
p r b p r b hand q r
therefore q r
moreover preference relation defined selectors considered
must coincide
example let p co b c b
c b c b c p b c
p b p c b c incomparable thus p let


fifaber truszczynski woltran

q co b c clearly q p
b c moreover q b q c thus q p q
equivalent however strongly gen equivalent indeed let r
p r b c p r b
main insight differences preference relation may hidden
preferred outcomes present exposed eliminating
preferred outcomes obscure appropriately selected generator context
considerations apply co aso therefore
formulate single theorem handles types
theorem co aso respectively p q p g q
p g qg strongly equivalent mod p g mod q g co
modht p g modht qg aso pmod p g q
mod q g
view examples unexpected two examples demonstrated conditions characterization cannot general weakened
corollary theorem follows strong sel equivalence co
stronger property strong gen equivalence
corollary co p q p q implies p g q
general implication corollary cannot reversed shown following
example
example let us consider p q
b b b p q b
moreover p b b p thus p b since qs
trivially q b thus q b
p q equivalent strongly sel equivalent though let
r b p r p p r b
hand q r b thus q r
however virtue theorem strongly gen equivalent indeed trivially
g
g
g
g
mod p
mod q
writing mod p
mod q
relations pm

q
empty therefore equal
relation strong sel equivalence strong gen equivalence aso
complex general neither property implies even p
q assumed simple p q p g
g
qg pas p g q
qg corollary p g q modht p
g
g
modht qg pmod p g q
mod q g theorem p q regular
equivalence programs imply modht p g modht qg strong equivalence
q
p
pmod p g q
mod q g imply p g qg
conclude section one corollary concerning strong gen equivalence
empty selectors



fistrong equivalence qualitative optimization

corollary co aso respectively p q p qs
p g q p g qg strongly equivalent respective semantics
mod p g mod q g co modht p g modht qg aso

evident definitions however immediate consequence
theorem indeed optimization p q empty selectors cong
g
dition pmod p g q
mod q g equivalent mod p mod q consequence
strong equivalence p g qg thus empty selectors right
hand equivalence assertion theorem reduces strong equivalence
generators

strong equivalence combined case
finally consider relation sg considering contexts combine
generators selectors since generators may vary previous section
semantics generators matters previous section difference boils
different characterizations strong equivalence generators
start characterizing strong equivalence co aso
relative combined contexts generators selectors possibly non empty
selectors consisting rules rank least j respectively
theorem ranked co aso respectively p q every rank
j
interval j p g
q following conditions hold
p g qg strongly equivalent mod p g mod q g co
modht p g modht qg aso
pmod p g q
mod q g
every j mod p g diff p j diff q j diff p j
diff q j diff p j j diff q j j
p

q



mod p
g mod q g

corresponding characterizations co aso differ respective conditions reflect different conditions guaranteeing strong equivalence generators classical answer set semantics moreover four conditions theorem obtained suitably combining extending conditions
theorem theorem first combined strong equivalence implies strong genequivalence condition taken theorem second modify conditions
theorem replacing p mod p g accordingly q
mod qg classical model p g give rise optimal classical equilibrium
one upon addition context aspect already visible theorem
finally add condition stating relations p q coincide
sets p g qg generators allowed extended one
make two outcomes extension two


fifaber truszczynski woltran

outcomes say j related differently corresponding strict relations induced
rules ranks less say p j q j optimal j
optimal extending p matter preference rules ranks
interval j use rules rank higher effect j ordered
hand j incomparable q remain incomparable
q extended j equally good respect rules rank
rendered incomparable means preference rules rank case j optimal
q extended finally j q j remains optimal matter preference
rules ranks higher add follows two relations p q
j
different cannot p g
q condition necessary
previous section case selectors p q empty reduces
strong gen equivalence generators
corollary co aso respectively p q p qs
j
every rank interval j p g
q p g qg strongly
equivalent respective semantics mod p g mod q g co
modht p g modht qg aso
simple consequence theorem condition theorem
implies mod p g mod q g since selectors p q empty
remaining conditions become trivially true
conclude section observations concerning relation sg co
aso contexts relevant may contain preference rules arbitrary ranks
start case co stronger
derived general theorems present arguments relying
previous sections possible since co equivalence strong
equivalence generators coincide
saw last section co strictly stronger relation
g fact co coincides general relation sg
theorem co p q p sg q p q
proof implication evident prove converse implication
use proposition reduces checking strong equivalence checking strong
sel equivalence let r lgu generator since p q corollary
mod p g mod qg consequently mod p r g mod q r g writing
mod p g mod p r g thus corollary
qr
pmr
finally condition corollary p q implies condition
corollary p r q r r preference rules follows
corollary p r q r thus proposition p sg q
case simple co ranked interval argument
repeated instead corollary equivalence b c corollary
way one simple co relations

g
coincide thus corollary equivalence b theorem simple
co four relations sg
coincide obtain following
g



fistrong equivalence qualitative optimization

corollary simple co p q properties p sg q p
q
g
p q p q equivalent
simple aso still sg
coincide general
g
notions different cf subtle difference condition c compared
corollary
corollary simple aso p q following conditions equivalent


p sg q equivalently p g

q



b p
q equivalently p g
g

q

c modht p g modht qg pmod p g q
mod qg
proof implication b evident
let us assume b theorem modht p g modht qg identity
implies mod p g mod qg let us assume j mod p g pmod p g j
q
pmod p g j theorem q
mod qg j mod qg j otherwise

p j diff p j theorem diff q j since q simple
diff q j thus q j q
mod qg j converse implication follows
symmetry thus c holds
finally assume c prove end conditions
theorem hold directly assumptions condition holds condition follows lemma moreover mod p g mod qg prove
condition let us assume j mod p g diff p j since p simple
p j thus q j consequently diff p j diff q j finally condition
p
q
g
g
e mod p
g mod q g obviously holds case mod p mod q

complexity
section study deciding notions strong equivalence
typically comparisons sets outcomes characterizations determine
respective complexity start concerning strong sel equivalence
theorem given optimization p q deciding p q co np complete
case co p complete case aso
proof sketch detailed argument provided appendix b membership focus
complementary consider pairs interpretations j violate least
one conditions stated corollary clearly witness pair interpretations
exists witness pair built atoms occur
p q pair guessed verified polynomial time
co polynomial time np oracle aso indeed


fifaber truszczynski woltran

violates conjunction three conditions corollary main observation
model checking polynomial classical semantics co np complete
equilibrium semantics see pearce tompits woltran thm
hardness follows considering equivalence optimizations
empty selectors known co np hard classical semantics p hard equilibrium semantics see pearce et al thm
ranked case observe increase complexity explained
characterization given theorem instead outcome checking characterization
involves optimal outcome checking difficult unless polynomial hierarchy
collapses
theorem given optimization p q rank interval j deciding
p j q p complete case co p complete case aso

proof sketch detailed argument provided appendix b membership part essentially follows arguments proof theorem
deciding p co np co p aso
hardness part reduce following sel equivalence co given two propositional theories decide whether possess
minimal known p complete e g eiter et al b
thm remains hard negation normal form nnf
given alphabet adapt construction used brewka et al
given negation normal form theory construct co pt setting
ptg

u u u u u u

pts

u u u u

u denotes set atoms occurring u u stands theory
resulting replacing u u note ranks rules selector

elements pt one one correspondence minimal
theories u follows minimal
ps pt since ps pt selectors
latter condition equivalent ps pt shown directly exploiting
characterization
concerning hardness part aso use following given
two open quantified boolean formulas qbfs x x decide whether
possess minimal p hard see lemma appendix
x construct p follows
pg z z z x
w w w
z z w w w
ps x x x x


fistrong equivalence qualitative optimization

z z stands formula obtained replacing z z x
stress ranks rules selector elements p
one one correspondence minimal x reason
x formulas x x
minimal p p
theorem rank interval j given input fixing interval
hardness still hold provided fact critical condition corollary
p q rank intervals j selectors become empty condition
reduced p q easier decide
characterizations imply remaining co np strong
gen equivalence co np hardness follows directly theorem co np completeness
deciding strong equivalence two propositional theories semantics
theorem given two co aso respectively p q deciding p g q
co np complete
finally combined case hardness follows theorem co npcompleteness deciding strong equivalence propositional theories
theorem given ranked co aso respectively p q rank interval
j
j deciding p g
q co np complete
construction hardness hold already simple optimization

discussion
introduced formalism optimization generalizing principles aso
programs particular separation hard soft constraints brewka et al
focused two important specializations optimization co
aso studied forms strong equivalence classes optimization depending contexts considered specifically considered
following cases preference information added hard constraints remain unchanged strong sel equivalence hard constraints added preferences remain
unchanged strong gen equivalence hard constraints preferences added
strong equivalence best knowledge natural classification equivalences preference formalisms studied yet certain cases
notions coincide theorem longer true underlying semantics
changed ranks contexts restricted
previous work notion strong equivalence hard constraints preferences
added studied logic programs weak constraints eiter et al
logic programs ordered disjunctions lpods faber et al
former formalism separation strong equivalence different notions
suggested aso would possible instructive compare
eiter et al lemma e g corollary similar separation
strong equivalence straightforward lpods reason syntactic nature
lpod rules act hard constraints preference rules time faber et


fifaber truszczynski woltran

al considered strong equivalence respect contexts logic programs
similar strong gen equivalence combined case strong equivalence
called strong equivalence arbitrary contexts consider
counterpart notion strong sel equivalence fact even unclear whether
every lpod generating selecting modules cleanly separated
established characterizations three types strong equivalence
exhibit striking similarities characterizations strong sel equivalence co
aso theorem precisely mirroring fact generators subject change theorem concerns strong gen equivalence co
aso case characterizations consist two requirements strong
equivalence generators equality strict preference relations restricted
class generators difference comes fact strong
equivalence classical equilibrium model semantics different characterizations theorem concerns combined case strong equivalence
differentiate co aso implicitly conditions
strong equivalence different two semantics moreover characterizations
provided theorem arise rather systematic way given theorems
case different semantics used strongly suggests
abstract principles play currently pursuing direction
conjecturing inherent feature preference formalisms separation
logical preferential constraints
coming back lpods comments suggest identifying split representation formalism might interest could lead alternative characterizations combined strong equivalence derived characterizations two
one dimensional variants
next note give rise rewriting methods transform
optimization strongly equivalent ones provided two simple examples
illustrating application example corollary similar examples
constructed concerning strong gen equivalence combined strong
equivalence systematic study optimization rewriting rules
strongly equivalent subject future work
finally established complexity deciding whether optimization
strongly equivalent notably general case strong combined equivalence co np complete co aso holds true strong
gen equivalence strong sel equivalence situation
complex contexts form j considered deciding
strong sel equivalence co np complete co p complete aso rank interval allowed part input rank interval fixed j
gets computationally harder case aso p hard
case co p hard difference co aso
case strong sel equivalence respect contexts consisting preference rules
ranks intervals j comes fact corresponding concepts
strong sel equivalence depend particular whether two theories equivalent
respect co respect equilibrium aso
two types equivalence different complexities jump complexity


fistrong equivalence qualitative optimization

strong sel equivalence arbitrary rank intervals j allowed fixed
comes fact cases concept depends properties
class outcomes optimal respect rules ranks less
cases depends properties class decision concerning optimal
outcomes two theories optimal harder
corresponding versions explaining jump
strong sel equivalence imply ranked optimization cannot efficiently
simulated simple optimization

acknowledgments
thank reviewers useful constructive comments first author
supported regione calabria eu por calabria fesr within
pia project dlvsystem r l miur prin project loden
second author supported nsf grant iis

appendix useful lemmas
provide several lemmas use later proofs discussed
main body
first two lemmas given without proofs easy consequences
ferraris ferraris lifschitz
lemma let p theory classical model p let
u p mod p
lemma let p theory j two classical j let
j b b j
b b u j
b u b j
b u b u j
p j mod p j j
lemma let p optimization p j j let
j

j

rj u

p rj
every j j pj j p rj j


fifaber truszczynski woltran

proof proving simplify notation write r rj since p j
p clearly p r p p r p r
let us consider arbitrary interpretation j p r assume j p r
particular j diff r j j diff p j j diff p r j j
consequently j p r j since rules r rank j follows j p j
contradiction fact p j thus diff p j j since diff r j j
diff p r j j therefore j p r implies j r contradiction
since definition rj r r j interpretation j follows
every j p r j p r p r
assertion evident since definition rj r r j interpretation j

lemma let p optimization j interpretations j p j
union following sets rules
j let rj j ls j
u
j

b b j
j

b b u j
j

b u b j
j

b u b u j
following hold
every r rj j vi r vj r
every interpretation k
j rule r rj j vk r
p j j
p rj j
proof simplify notation write r rj j
assertion evident prove assertion note conjunction
formulas appear top options preference rules r equivalent






u
b b j b b u j
formula two j thus every interpretation k
least one formulas appears top options preference rules r
satisfied k corresponding preference rule r vk r
finally prove assertion let us assume p j together

implies p r j thus j
p r prove converse implication let us

assume p j together implies p r j next note

diff p j k j since j p j k p r j diff p j k j property

proved implies k p r j since k arbitrary interpretation different

j since p r j j p r follows



fistrong equivalence qualitative optimization

next note property allows us infer strong sel equivalence two treated co strong sel equivalence
treated aso conversely property relies fact changing
selectors affect class outcomes proof simple omit
lemma let p q optimization mod p g p g
mod q g qg j rank interval p j q p q viewed
co p j q p q viewed aso
final section useful complexity
lemma deciding whether open qbfs x x
negation normal form minimal p hard
proof reduction p hard deciding satisfiability qbfs form zxy negation normal form let
qbf form consider following formulas z z z z u
v fresh atoms




z z
x u v v
zz




zz

xx


z z




x v u u

xx

clear negation normal form difference
compared latter uses u former uses v vice versa
point including conjuncts v v u u occurrences u v
u u minimal
open variables u z z x u v true
note considering minimal u u
move quantifier appears directly front
occurrences atoms outside
clear contains neither u v model u
model u consequently holds
minimal model u minimal model u
direction let us assume false exists interpretation z
atoms z every interpretation j atoms x false let us
consider mu z x u clearly mu model yv n model
n mu z n conjunct zz z z thus
n z follows false atoms z x interpreted n
consequently x u n thus n mu implies mu minimal model
essentially argument shows mv z x v minimal
model since mu mv different minimal
direction let us assume zxy true let minimal model
clearly v
v model let us assume u let us
assume addition x assumptions imply interpretations


fifaber truszczynski woltran

z atoms z j x atoms x true follows u
model contradiction thus x let z since zxy
true interpretation j x atoms x true atoms
z interpreted atoms x interpreted j follows z j
model since z j contradiction follows
u
consequently comment minimal model converse
holds symmetry argument thus two formulas minimal

lemma given ranked preference rule r interpretation calculating vi r
done polynomial time
proof initialize variable check whether bd r halt check
whether hd r halt otherwise increment continue checking
options head r exist set checks model checking task
propositional formula hence polynomial time upon halting equal vi r

lemma given optimization p two interpretations j calculating
diff p j done polynomial time
proof initialize variable x scan rules p ranked preference
rule r p determine whether vi r vj r polynomial time due lemma
set x rank r rank r x processed rules x equal diff p j

lemma given optimization p two interpretations j deciding whether
p j holds done polynomial time
proof first sort rules p ranks starting lowest rank upwards
following rank check rules rank whether vi r vj r
vi r vj r vi r vj r holds least one rule vi r vj r
rules rank accept rules r r rank vi r vj r
vi r vj r reject ranks processed reject lemma steps
doable polynomial time

lemma given classical optimization p interpretation deciding
whether p co np
proof witness j complementary deciding whether

p verified polynomial time j verify polynomial time
satisfy propositional theory p g well known feasible polynomial time otherwise verify polynomial time j satisfies p g j p
polynomial time latter lemma



fistrong equivalence qualitative optimization

lemma given answer set optimization p interpretation deciding
whether p p
proof witness j complementary deciding whether

p verified polynomial time np oracle j verify
satisfy p g np oracle possible answer set checking
co np complete pearce et al thm otherwise verify np oracle j
satisfies propositional theory p g j p polynomial time lemma

appendix b proofs
theorem ranked optimization p q every rank interval j
p j q following conditions hold
p q
p p q
q
every j p diff p j diff q j diff p j
diff q j diff p j j diff q j j
j

proof let r lu
let p r lemma p r since
j
r lu r thus p assumption follows q
particular q q q q since rg
q r q r j q r
j qr let us assume contrary j exists lemma
three possibilities
first assume diff q j diff r j j q latter property
implies diff q j otherwise would j q contrary q
particular q j since q follows j q
j p thus j p diff q j j diff r j j
j
r lu diff r j since j p j p r otherwise diff q j j
diff q j diff p j diff q j diff q j
diff p j case diff p j diff r j since j p j p r
j
next let us assume diff q j diff r j j r since r lu
follows diff r j diff q j recall q
thus j q consequently j p diff q j j
diff p j diff q j diff p j diff r j j diff q j
j diff p j since diff q j diff r j diff r j consequently
diff r j j thus diff p j diff r j case since j r j p r
follows
finally let us assume diff q j diff r j j q j r since
j
r lu diff r j thus diff q j since q j q
j p j p consequently j p r
cases obtained j p r contrary p r contradiction


fifaber truszczynski woltran

let us assume p q without loss generality assume
p q define r ri lus ri
lemma lemma p r hand since
q
q contrary
r ls




q

r


lemma




q

r
thus
p



u
assumption
follows p q condition holds prove condition
let us consider interpretations j p p j let ri j
selector defined lemma since p j lemma implies j
p ri j
consequently j
q ri j lemma follows q j
q
symmetry j implies p j condition holds
prove condition let us assume interpretations j satisfy
assumptions violate corresponding conclusion follows write p
diff p j q diff q j thus p q p q p j
q j without loss generality assume p q follows p finite
consequently diff p j j moreover q p j
let us assume first p take r ri j ri j
specified lemma define p p r q q r since j p
j q assumptions q thus j qi particular
j qi recall j consequently assertion lemma

diff p j
j q since rules r ranks j p


diff p j follows j p otherwise diff p j would

j p let us define r ri j ri j specified lemma since

j p assertion lemma p r p r p r r
thus p r r p j q q r r q r

assertion lemma j q contradiction
next let p clearly p j j p without loss generality let us assume
j p let r ri j let us define p p r q q r since
moreover j p
rules r ranks j p implies j p

follows lemma j p let r ri j rules r rank


diff p j diff p j thus follows j p r moreover every


diff p k
k
j diff p k k p r follows p

k p r follows lemma thus p r hand

recall diff q j q thus diff q j lemma follows


j qi consequently lemma j q r thus
q r
contradiction
follows p complete proof recall p j clearly p j
j p without loss generality let us assume j p let r ri j
let us define p p r q q r let us assume interpretation k


p
p
p
j k lemma follows diff k thus diff k

contradiction p thus every interpretation k
j k p

argument k p j consequently every interpretation k
j


p p
p p
k
k
j addition since j p lemma obtain


addition lemma
neither p p j j p p thus j p p


diff p j diff p j p since j p j p


fistrong equivalence qualitative optimization





let r rp j diff p j p ii j p iii rules r


rank p follows j p r moreover every k
j diff p k



diff p k k p r follows
k p r follows p
lemma definition p thus p r hand

recall diff q j q p thus diff q j p lemma follows


q r
j qp consequently lemma j q r thus
j



contradiction recall p
q p p r r q q r r
j
p j r r lu
theorem co aso respectively p q p g q
p g qg strongly equivalent mod p g mod q g co
modht p g modht qg aso pmod p g q
mod q g
proof first assumption implies strong equivalence generators p g qg
relative corresponding semantics recall case classical semantics
strong standard equivalence coincide follows every r lgu
p r q r moreover semantics p r mod p g rg mod p g
similarly q r mod qg rg mod qg since pmod p g q
mod q g
qr
r
lemma
r lgu change preferences p p
g rg qg rg
p r q r

let us assume p g qg strongly equivalent
r lgu p r q r without loss generality assume
interpretation p r q r let us define lgu setting
defined lemma lemma p r
q r former property implies necessarily preferred
p rt latter one implies qrt contradiction
assumption p g q thus p g qg strongly equivalent mod p g
mod qg case p q co modht p g modht qg
case p q aso
since modht p g modht qg implies mod p g mod qg latter identity holds
two cases equality write mod p g
mod qg remains pm q
towards contradiction let us assume
j exactly one two relations without loss generality
assume p j q j former identity implies particular
j let j j theory defined lemma lemma
p q j clearly j
p j q contrary
assumption p g q
theorem ranked co aso respectively p q every rank
j
interval j p g
q following conditions hold
p g qg strongly equivalent mod p g mod q g co
modht p g modht qg aso
pmod p g q
mod q g


fifaber truszczynski woltran

every j mod p g diff p j diff q j diff p j
diff q j diff p j j diff q j j
p

q



mod p
g mod q g

proof proposition suffices prove every r lgu p r j qr
p r q r recall p denotes set outcomes optimization p p mod p g case co
p p g case aso moreover type
p r mod p g r g mod p g similarly q r mod q g r g
mod q g since rules r rank least condition follows
p r
qr
p r qr lemma p r q r condition
theorem holds p r q r since p r p r mod p g
since corresponding inclusions hold q conditions theorem
p q imply conditions theorem p r q r thus
theorem p r j q r
j

let us assume p g
q p g q follows theorem implies
appropriate version condition since modht p g modht qg implies mod p g
mod q g two versions assertion mod p g mod q g
proof write mod p g equality
mod q g
next interpretations j j define r j
j lemma let us define p p r q qr p j q
moreover lemma p q j
prove condition let us assume p j follows p j recall
r contains preference rules since p j j
p p
assumption j
q since q j q j particular
q diff q j since r preference rules q j thus let us
assume diff q j let us define r ri j ri j lemma
since p j ii r preference rules iii preference rules r

rank follows p r j generator module r empty follows
p r q r j thus j
p r consequently j
q r
q
q
since diff j diff j moreover q q
thus j q lemma j q r contradiction argument shows
p j implies q j converse implication follows symmetry
condition holds
prove condition let us assume p j diff p j p j
q j thus q j let us assume diff p j since
p j since p j implies p j j
p thus j
q since
q j q j q j
prove condition without loss generality assume diff p j thus
diff p j j p latter follows properties p j diff p j diff p j since p j q
condition theorem holds p q j diff p j diff q j
diff p j j diff q j j consequently diff p j diff q j


fistrong equivalence qualitative optimization

diff p j j diff q j j condition holds
theorem given optimization p q deciding p q co np complete
case co p complete case aso
proof membership consider complementary corollary
specified decide whether least one conditions
holds
p q equivalently exactly one identities p
q holds
j p diff p j diff q j
p p q
q equivalently j j p q exactly
one properties p j q j holds
np co p aso
say pair interpretations j witness instance
yes instance demonstrates one conditions hold easy see
witness exists witness j j consist atoms
occur p q witness guessed condition verified
polynomial time co model checking interpretation
theory aso polynomial time assist two calls
np oracle since model checking equilibrium model semantics co np complete
theorem pearce et al since condition verified polynomial time
lemma condition polynomial time co polynomial time
assist four calls np oracle aso lemma
pearce et al mentioned membership part assertion follows
hardness observe case empty selectors coincides
equivalence propositional theories case co equivalence
equilibrium theories case aso former well known co np hard
latter p hard theorem pearce et al
theorem given optimization p q rank interval j deciding
p j q p complete case co p complete case aso

proof prove membership part consider complementary
theorem consists deciding whether case least one
following conditions holds
p q equivalently interpretation exactly one properties p q holds
p p q
q equivalently interpretations j p q
exactly one properties p j q j holds
j p q diff p j diff q j
diff p j diff q j holds diff p j j diff q j j


fifaber truszczynski woltran

call pair interpretations j demonstrates one conditions
holds witness easy see witness one consists
atoms occur p q complementary p
co p aso showing witness guessed
verified polynomial time np oracle dealing co
p oracle dealing aso
consider witness j two interpretations one test whether j verifies
condition matters polynomial time two calls np oracle co lemma two calls p oracle aso
lemma verify condition need four calls respective oracles test
j p q polynomial time computation test exactly one
properties p j q j holds lemma similarly condition use
four calls respective oracles test j p q polynomial time
computation test condition involving diff p j diff q j lemma
hardness part start case co therefore reduce
following strong sel equivalence given two propositional theories decide
whether possess minimal known p complete
instance equivalence positive disjunctive programs known p complete see
e g eiter et al b thm means testing whether two propositional formulas
particular class minimal remains hard
negation normal form alphabet given negation normal form theory
construct co pt elements pt one one
correspondence minimal adapt construction used brewka
et al specifically set
ptg u u u u u u
u collection atoms occurring u u stands replacing u
u
pts u u u u
first observation outcome pt must form u
u interpretation u write u clear
u u hence u u
hence one one mapping outcomes pt
let us assume pt n
n indeed n n ptg rules r pts form u u
u n obtain vn r vm r rules r pts
vn r vm r implies n pt contradicting pt thus
minimal model
conversely let us assume minimal model pt
n pt n pt hold implying pt indeed
n pt vn r vm r least one r pts vn r vm r
r pts latter implies n former shows n since n
contradicts assumption minimal model follows pt
thus pt minimal model moreover
u follows minimal


fistrong equivalence qualitative optimization

ps pt indeed r lus easy verify ps ps r
pt pt r observation follows fact distinct
j ps ps j distinct j pt pt j thus
rules r weaker rank break ties affect sets optimal
outcomes
concerning hardness aso use similar idea however shall
use following given two open qbfs x x decide whether
two qbfs possess minimal lemma p hard
moreover assume negation normal form reduction
combines idea reduction general asp consistency eiter
gottlob precisely z x introduce variable z
construct p given x follows
pg z z z x
w w w
z z w w w
z z stands replacing z z w globally atom
selector set
ps x x x x
equilibrium model pg must contain w otherwise w w would unsatisfied
must contain otherwise w w would
unsatisfied write w w set contained equilibrium
model moreover equilibrium model must form v z z x v w
indeed one x x must hold x x satisfy xx otherwise
hm x ht pg well contradicting fact equilibrium model pg
interpretation x write x x x w pg one
model x equilibrium model pg indeed
satisfies x hi ht pg j holds hj ht pg
hand satisfy x exists j
j x follows hi
j j w ht pg
key element argument z z contains occurrences negation
negation normal form
j j w z z

property allows one hi
j j w ht z z w

thus equilibrium model pg
correspondence x outcomes equilibrium
p established handle issue minimality case co
let us assume first p demonstrated satisfies
x moreover n n satisfy x indeed
n would satisfy x would n p ii rules r ps
form u u u n vn r vm r iii rules
r ps vn r vm r three properties would imply n p contradicting p conversely let us assume minimal model x
p n p n p hold


fifaber truszczynski woltran

implying p end reason follows n p would hold
vn r vm r least one r ps vn r vm r r ps
course implies n since n satisfies x recall n
equilibrium model pg n model x contradicts assumption
minimal model x thus p
minimal model x fact reasoning case co
obtain x x minimal
p p
theorem given two co aso respectively p q deciding p g q
co np complete
proof deciding strong equivalence propositional theories classical semantics
co np hard case strong equivalence equivalence coincide conp hard equilibrium model semantics lin thus hardness part
assertion follows corollary
prove membership consider complementary theorem
consists deciding whether least one conditions holds
p g qg strongly equivalent equivalently mod p g mod q g co
modht p g modht qg aso
pmod p g q
mod q g equivalently interpretations j
g
p qg exactly one properties p j q j holds
consequently consider pair interpretations j witness instance
yes instance model co hi ji
ht model aso exactly one two theories p g qg j
p g qg exactly one properties p j q j holds
easy see witness exists witness j
j consist atoms occur p q witness guessed verifying
showing condition holds done polynomial time well
known checking whether model hi ji ht model propositional theory
done polynomial time holds true deciding p j q j
lemma thus complementary np
theorem given ranked co aso respectively p q rank interval
j
j deciding p g
q co np complete
proof membership consider complementary theorem
consists deciding whether least one conditions holds
p g qg strongly equivalent mod p g mod q g co
modht p g modht qg aso
interpretations j mod p g mod q g exactly
one properties pmod p g j q
mod q g j holds


fistrong equivalence qualitative optimization

j mod p g diff p j diff q j diff p j
diff q j holds diff p j j diff q j j
p

q



mod p
g mod q g equivalently interpretations j
mod p g mod q g exactly one properties p j q j holds

prove complementary np proofs use
membership witness pair interpretations j explicitly demonstrates one
conditions holds witness exists one consisting
atoms occurring programs p q condition given pair j
restricted atoms p q one verify polynomial time whether condition
holds condition repeat argument previous proof conditions
use lemma condition lemma
hardness follows directly co np completeness deciding strong equivalence two propositional theories semantics consider corollary

references
boutilier c brafman r domshlak c hoos h poole cp nets tool
representing reasoning conditional ceteris paribus preference statements
journal artificial intelligence
boutilier c brafman r domshlak c hoos h poole preference
constrained optimization cp nets computational intelligence
brewka g niemela syrjanen logic programs ordered disjunctions
computational intelligence
brewka g niemela truszczynski answer set optimization gottlob
g walsh eds proceedings th international joint conference
artificial intelligence ijcai pp morgan kaufmann
brewka g niemela truszczynski answer set optimization unpublished
manuscript
calimeri f ianni g krennwallner ricca f answer set programming
competition ai magazine
delgrande j p schaub tompits h wang k classification survey preference handling approaches nonmonotonic reasoning computational
intelligence
eiter faber w fink woltran complexity answer set
programming bounded predicate arities implications annals mathematics
artificial intelligence
eiter fink woltran b semantical characterizations complexity
equivalences answer set programming acm transactions computational logic



fifaber truszczynski woltran

eiter gottlob g computational cost disjunctive logic programming
propositional case annals mathematics artificial intelligence

faber w truszczynski woltran strong equivalence qualitative optimization brewka g eiter mcilraith eds proceedings
th international conference principles knowledge representation
reasoning kr pp aaai press
faber w konczak k strong order equivalence annals mathematics
artificial intelligence
faber w tompits h woltran notions strong equivalence logic
programs ordered disjunction brewka g lang j eds proceedings
th international conference principles knowledge representation
reasoning kr pp aaai press
ferraris p answer sets propositional theories baral c greco g leone
n terracina g eds proceedings th international conference logic
programming nonmonotonic reasoning lpnmr vol lecture
notes computer science pp springer
ferraris p lifschitz v mathematical foundations answer set programming
essays honour dov gabbay pp college
publications
gelfond lifschitz v classical negation logic programs disjunctive
databases generation computing
goldsmith j lang j truszczynski wilson n computational complexity dominance consistency cp nets journal artificial intelligence

goldsmith j junker u eds special issue preferences vol ai
magazine
heyting die formalen regeln der intuitionistischen logik sitzungsberichte der
preussischen akademie der wissenschaften
kaci working preferences springer
lifschitz v computing circumscription joshi k ed proceedings
th international joint conference artificial intelligence ijcai pp
morgan kaufmann
lifschitz v pearce valverde strongly equivalent logic programs acm
transactions computational logic
lin f reducing strong equivalence logic programs entailment classical
propositional logic fensel giunchiglia f mcguiness l williams eds proceedings th international conference principles knowledge
representation reasoning kr pp morgan kaufmann
marek v w truszczynski nonmonotonic logic context dependent reasoning springer berlin


fistrong equivalence qualitative optimization

marek v truszczynski stable alternative logic programming
paradigm apt k marek w truszczynski warren eds logic
programming paradigm year perspective pp springer berlin
niemela logic programming stable model semantics constraint programming paradigm annals mathematics artificial intelligence
pearce logical characterisation stable answer sets dix
j pereira l przymusinski eds proceedings th international
workshop non monotonic extensions logic programming nmelp vol
lecture notes computer science pp springer
pearce tompits h woltran characterising equilibrium logic nested
logic programs reductions complexity theory practice logic programming
simons p niemela soininen extending implementing stable
model semantics artificial intelligence
turner h strong equivalence made easy nested expressions weight constraints
theory practice logic programming




