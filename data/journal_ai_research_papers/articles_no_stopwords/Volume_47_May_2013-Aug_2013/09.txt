Journal Artificial Intelligence Research 47 (2013) 351-391

Submitted 03/13; published 06/13

Strong Equivalence Qualitative Optimization Problems
Wolfgang Faber

faber@mat.unical.it

Department Mathematics
University Calabria
Via P. Bucci cubo 30B, 87036 Rende, Italy

Miroslaw Truszczynski

mirek@cs.uky.edu

Department Computer Science
University Kentucky
329 Rose Street, Lexington, KY 40506-00633, USA

Stefan Woltran

woltran@dbai.tuwien.ac.at

Institute Information Systems
Vienna University Technology
Favoritenstrae 911, 1040 Vienna, Austria

Abstract
introduce framework qualitative optimization problems (or, simply, optimization problems) represent preference theories. formalism uses separate modules
describe space outcomes compared (the generator ) preferences outcomes (the selector ). consider two types optimization problems. differ
way generator, model propositional theory, interpreted: standard propositional logic semantics, equilibrium-model (answer-set) semantics.
latter interpretation generators, optimization problems directly generalize
answer-set optimization programs proposed previously. study strong equivalence
optimization problems, guarantees interchangeability within larger context. characterize several versions strong equivalence obtained restricting
class optimization problems used extensions establish complexity
associated reasoning tasks. Understanding strong equivalence essential modular
representation optimization problems rewriting techniques simplify without
changing inherent properties.

1. Introduction
introduce framework qualitative optimization problems which, following design answer-set optimization (ASO) programs (Brewka, Niemela, & Truszczynski, 2003),
use separate modules describe space outcomes compared (the generator )
preferences outcomes (the selector ). optimization problems consider, selector module follows syntax semantics preference modules
ASO programs, generator given propositional theory. propositional theory interpreted according standard propositional logic semantics, is,
outcomes compared classical models generator, speak classical optimization problems (CO problems, short). generator theory interpreted
semantics equilibrium models (Pearce, 1997), speak answer-set optimization
problems (ASO problems, short). use terminology, equilibrium models
c
2013
AI Access Foundation. rights reserved.

fiFaber, Truszczynski, & Woltran

usually referred answer sets (Ferraris, 2005) historical reasons. ASO problems,
answer sets generator outcomes used determine optimal outcomes.
Representing reasoning preferences qualitative settings important
research area knowledge representation qualitative decision theory. main objectives design expressive yet intuitive languages model preferences, develop automated methods reason formal representations preferences
languages. literature subject preferences vast. refer reader articles special issue Artificial Intelligence Magazine (Goldsmith & Junker, 2008)
recent monograph Kaci (2011) thorough discussion area
additional references.
Understanding optimization problems equivalent, particular, one
interchanged another within larger context, fundamental preference
formalism. Speaking informally, optimization problems P Q interchangeable
strongly equivalent every optimization problem R (context), P R QR define
optimal models. Understanding one optimization problem equivalent
another sense essential preference analysis, modular preference representation,
rewriting techniques simplify optimization problems forms amenable
processing, without changing inherent properties. Let us consider multi-agent
setting, agents combine preferences set alternatives goal
identifying optimal ones. one agent ensemble replaced another
set optimal alternatives unaffected now, extension
ensemble future? Strong equivalence agents optimization problems precisely
needed guarantee full interchangeability property!
notion strong equivalence general interest, means restricted preference formalisms. cases, notably classical logic, coincides equivalence,
property models. However, semantics monotone, is,
extending theory may introduce new models eliminate some, strong equivalence
becomes strictly stronger concept, one adopt theories analyzed
placed within larger context. nonmonotonicity semantics salient feature
nonmonotonic logics (Marek & Truszczynski, 1993) strong equivalence theories
nonmonotonic logics, especially logic programming answer-set semantics (Gelfond
& Lifschitz, 1991), extensively studied setting (Lifschitz, Pearce, & Valverde,
2001; Turner, 2003; Eiter, Fink, & Woltran, 2007b). Preference formalisms often
behave nonmonotonically adding new preference may cause non-optimal outcome
(model) become optimal one. Thus, preference formalisms, equivalence strong
equivalence typically different notions. Accordingly, strong equivalence studied
logic programs rule preferences (Faber & Konczak, 2006), programs ordered disjunction (Faber, Tompits, & Woltran, 2008) programs weak constraints (Eiter,
Faber, Fink, & Woltran, 2007a).
extend study strong equivalence formalism qualitative optimization
problems. formalism motivated design answer-set optimization (ASO) programs Brewka et al. (2003). borrows two key features ASO programs make
attractive alternative preference modeling approaches based logic programming
mentioned above. First, following ASO programs, optimization problems provide
clear separation hard constraints, specify space feasible outcomes,
352

fiStrong Equivalence Qualitative Optimization Problems

preferences (soft constraints) impose preference ordering feasible outcomes. Second, optimization problems adopt syntax semantics preference rules ASO
programs correspond closely linguistic patterns simple conditional preferences
used humans.
separation preference modules hard constraints facilitates eliciting representing preferences. important characterizing strong equivalence.
clear separation present, logic programs ordered disjunctions (Brewka,
Niemela, & Syrjanen, 2004), strong equivalence characterizations cumbersome
account complex mostly implicit interactions hard constraints
preferences. optimization problems, impose separation, onedimensional forms strong equivalence, hard constraints preferences
added. one-dimensional concepts easier study yet provide enough information construct characterizations general case.
Main Contributions.

main contribution summarized follows.

propose general framework qualitative optimization problems, extending
several ways formalism ASO programs. focus two important instantiations framework, classes classical optimization (CO) problems
answer-set optimization (ASO) problems. latter one directly generalizes ASO
programs.
identify problem strong equivalence theories general preference formalisms. point strong equivalence equivalence coincide (in
general) preference formalisms concept strong equivalence
fundamental issues theory modularity, rewriting simplification. Strong equivalence studied earlier context logic programs logic
programs extended preferences rules atoms heads rules (and
similarly motivated). However, best knowledge, first
paper studies strong equivalence typical preference formalism
represents preferences terms preferred properties (modeled formulas)
independently constraints defining outcomes compare. such,
relevance mainstream preference research previous studies.
characterize concept strong equivalence optimization problems relative
changing selector modules. characterization independent semantics
generators so, applies CO ASP problems. characterize
strong equivalence relative changing generators (with preferences fixed).
case, surprisingly, characterization depends semantics generators.
However, show dependence quite uniform, involves characterization strong equivalence generators relative underlying semantics,
considered propositional theories. Finally, combine
characterizations one-dimensional concepts strong equivalence characterization general combined notion.
develop results case preferences ranked. practice, preferences commonly ranked due hierarchical structure preference providers.
353

fiFaber, Truszczynski, & Woltran

general case study allows additions preferences ranks specified interval [i, j]. covers case segment hierarchy
preference providers allowed add preferences (top decision makers, middle management, low-level designers), well case distinction
importance preferences (the non-ranked case).
establish complexity deciding whether two optimization problems strongly equivalent relative changing selectors, generators, both. results show
problems range co-NP- P3 -complete.
Organization. following section, introduce concept optimization
problem necessary terminology, define equivalence problems interested
here. discuss relationship optimization problems formalisms
literature, particular ASO programs. Section 3 provide results
case selectors may vary new hard constraints allowed. Section 4
turn characterizes strong equivalence notion, preferences unaffected
generator parts subject change. Section 5 finally show characterizations
obtained previous sections combined order capture general case
strong equivalence. complexity analysis presented Section 6, followed
discussion results considerations future directions research.
present proof sketches simpler overly technical proofs
main text facilitate understanding results intuitive level. Detailed proofs
found Appendix.
article substantially extended version earlier published conference version
(Faber, Truszczynski, & Woltran, 2012).

2. Optimization Problems
section provide basic definitions optimization problems Section 2.1,
followed Section 2.2 definitions strong equivalence notions optimization
problems studied remainder paper. Finally, Section 2.3 provide
discussion related formalisms.
2.1 Basic Definitions
qualitative optimization problem (an optimization problem, on) ordered
pair P = (T, S), called generator selector. role
generator specify family outcomes compared. role selector
define relation set outcomes and, consequently, define notion
optimal outcome. relation induces relations > : define > J J
J 6 I, J J J I. optimization problem P , write P g P
refer generator selector, respectively.
Generators. generators use propositional theories language determined
fixed countable universe (or alphabet) U propositional variables form atomic
propositions, Boolean constant , Boolean connectives , ,
define constant >, connectives usual way > := , :=
354

fiStrong Equivalence Qualitative Optimization Problems

, := ( )( ), respectively.1 Models generator, defined
semantics used, represent outcomes corresponding optimization problem.
consider two quite different semantics generators: classical propositional logic
semantics semantics equilibrium models (Pearce, 1997). Thus, outcomes
either models equilibrium models, depending semantics chosen. first semantics
interest due fundamental role widespread use classical propositional logic,
particular, means describe constraints. Equilibrium models generalize answer sets
logic programs case arbitrary propositional theories (Pearce, 1997; Ferraris, 2005)
often referred answer sets. semantics equilibrium models important
due demonstrated effectiveness logic programming semantics answer
sets knowledge representation applications. use terms equilibrium models
answer sets interchangeably.
Throughout paper, represent interpretations subsets U, contain
exactly atomic propositions interpreted true. write |= state
interpretation U (classical propositional) model formula . Furthermore,
denote set classical models formula theory Mod (T ).
Equilibrium models arise context propositional logic here-and-there,
logic HT short (Heyting, 1930). briefly recall definitions concepts,
well properties logic HT directly relevant work. refer
papers Pearce (1997) Ferraris (2005) details.
logic HT logic located intuitionistic classical logics. Interpretations logic HT pairs hI, Ji standard propositional interpretations
J. write hI, Ji |=HT denote formula holds interpretation
hI, Ji logic HT. relation |=HT defined recursively follows:
1. hI, Ji 6|=HT
2. atom a, hI, Ji |=HT precisely
3. hI, Ji |=HT hI, Ji |=HT hI, Ji |=HT
4. hI, Ji |=HT hI, Ji |=HT hI, Ji |=HT
5. hI, Ji |=HT J |= (classical satisfiability), hI, Ji 6|=HT
hI, Ji |=HT .
equilibrium model answer set propositional theory standard interpretation hI, Ii |=HT every proper subset J I, hJ, Ii 6|=HT . Answer
sets propositional theory classical models . converse true
general. denote set answer sets theory (T ), set
HT-models ModHT (T ), is, ModHT (T ) = {hI, Ji | J, hI, Ji |=HT }.
semantics two natural concepts equivalence. Two theories T1
T2 equivalent models (classical equilibrium, respectively).
strongly equivalent every theory S, T1 T2 models
(again, classical equilibrium, respectively).
1. choice primitive connectives common language classical propositional logic,
standard logic here-and-there underlies answer-set semantics.

355

fiFaber, Truszczynski, & Woltran

classical semantics, strong equivalence equivalence coincide.
semantics equilibrium models. result Lifschitz et al. (2001) states two
theories T1 T2 strongly equivalent equilibrium models T1 T2
equivalent logic HT, is, ModHT (T1 ) = ModHT (T2 ). illustrate
notions HT-models equilibrium models, relate latter classical ones.
examples, consider classical HT-models alphabet
consisting atoms explicitly mentioned theories discussed. sufficient
determine equilibrium models one hand (which happen consist atoms
mentioned) and, other, show differ classical ones.
Example 1 Let us consider theory Ta = {a a}. classical models Ta (under
restriction mentioned above) {a}, true false possible
outcomes. HT-models (again, restriction) h, i, h, {a}i,
h{a}, {a}i. Hence, one answer set (equilibrium model) . possible
candidate, {a}, answer set. h{a}, {a}i |=HT Ta holds, h, {a}i |=HT Ta
does. Thus, intuitively, theory contain cause hold.
Next, let us consider theory Tb = {ab}. classical models {a}, {b} {a, b},
HT-models h{a}, {a}i, h{b}, {b}i, h{a}, {a, b}i, h{b}, {a, b}i h{a, b}, {a, b}i.
answer sets therefore {a} {b}, {a, b}. intuition
theory contain cause b hold simultaneously.
Finally, let us consider theory Tc = {(a b) (b a)}. classical models
Tb , is, Mod (Tc ) = {{a}, {b}, {a, b}}. ModHT (Tc ) =
{h{a}, {a}i, h{b}, {b}i, h{a}, {a, b}i, h{b}, {a, b}i, h{a, b}, {a, b}i, h, {a, b}i} = ModHT (Tb )
{h, {a, b}i}. answer sets Tb : (Tc ) = {{a}, {b}}.
observe Tb Tc equivalent classical equilibrium setting
(they classical equilibrium models). former implies
strongly equivalent classical setting. However, strongly equivalent
equilibrium setting ModHT (Tb ) 6= ModHT (Tc ) (cf. characterization strong
equivalence equilibrium semantics Lifschitz et al. (2001)). indeed,
= {a b, b a}, obtain (Tb S) = {{a, b}}, (Tc S) = .
recall optimization problems classical interpretation generators
referred classical optimization problems CO problems, use
answer-set semantics generators, speak answer-set optimization problems
ASO problems.
Selectors. follow definitions preference modules ASO programs (Brewka
et al., 2003), adjusting terminology general setting. selector finite
set ranked preference rules
j
1 > > k
(1)
k j positive integers, , 1 k, propositional formulas
U. rule r form (1), number j rank r, denoted rank (r),
hd (r) = {1 , . . . , k } head r body (the condition) r, bd (r). Moreover,
write hd (r) refer formula .
rank (r) = 1 every preference rule r selector S, simple selector.
1
Otherwise, ranked. often omit 1 notation simple selectors.
356

fiStrong Equivalence Qualitative Optimization Problems

selector S, i, j {0, 1, 2, . . .} {}, define S[i,j] = {r | rank (r) j}
(where assume every integer k, k < ) write [i, j] rank interval
{k | k integer, k j}. extend notation optimization problems.
P = (T, S) rank interval [i, j], set P[i,j] = (T, S[i,j] ). rank intervals
use shorthands, example = [i, i], < [1, 1], [i, ], similar.
interpretation I, satisfaction
degree preference rule r vI (r) = min{i | |=
W
hd (r)}, |= bd (r) |= hd (r); otherwise, rule irrelevant I, vI (r) = 1.
Intuitively, lower satisfaction degree better outcome. Thus, preference
rule 1 > > k informally read follows: irrelevant outcomes (those
satisfying , satisfying ) outcomes satisfying 1 preferred,
followed outcomes satisfying 2 , outcomes satisfying 3 , etc. note
Brewka et al. (2003) represented satisfaction degree irrelevant rule special
non-numeric degree, treated equivalent 1. difference immaterial
two approaches equivalent.
Selectors determine preference relation interpretations. Given interpretations
J simple selector S, J holds precisely r S, vI (r) vJ (r).
Therefore, >S J holds J exists r vI (r) < vJ (r);
J holds every r S, vI (r) = vJ (r).
Given ranked selector S, define J every preference rule r S, vI (r) =
vJ (r), rule r0 following three conditions hold:
1. vI (r0 ) < vJ (r0 )
2. every r rank r0 , vI (r) vJ (r)
3. every r smaller rank r0 , vI (r) = vJ (r).
Moreover, >S J rule r0 three conditions hold,
J every r S, vI (r) = vJ (r). Given optimization problem
P = (T, S), often write P (and similarly > ). Furthermore, set
V 2U relation (like >, , ) 2U , write V restriction
V , is, V = {(A, B) | A, B V }. relationship equalities , >,
two optimization problems follows.
Lemma 1 optimization problems P Q, every set V 2U , PV = Q
V
Q
P
implies >PV = >Q
V V = V .
P
Proof. Suppose PV = Q
V let I, J interpretations I>V J. definiQ
Q
Q
P
P
tion, IV J J6V I. assumption IV J J6V I, implying I>V J. case IPV J
Q
IPV J JPV I. assumption IQ
V J JV hold well conclude
Q
Q
P
P
IQ
V J. direction (I>V J implies I>V J, IV J implies IV J) analogous. 2

aspects ASO selectors require additional discussion. First, preference rule
may irrelevant outcome. case outcome satisfy
condition rule or, does, satisfy formula head
rule. cases, define outcome desirable respect rule.
making choice, followed original definition (Brewka et al., 2003) (modulo
357

fiFaber, Truszczynski, & Woltran

minor simplification mentioned earlier). Obviously, choices could considered, too.
instance, could define irrelevant outcomes least desirable respect
rule. could restrict attention selectors permit irrelevance
(a preference rule allow irrelevance body disjunction
options head tautology). would eliminate need address issue
altogether, however, price constraining definintion selector rules.
Ultimately, question right design choice secondary importance
semantics preference rules adopted provides us flexibility represent
possible definitions. particular, note semantics rule
1 > . . . > n
rule
1 > . . . > n .
words, conditions (the rule bodies) modeling device making preference
rules better correspond conditional preferences expressed natural language.
compiled away. second type irrelevance, formalism selectors allows
user override default adopted. make adopted design choice explicit,
is, making outcomes satisfying options head explicitly
desirable. Intuitively, sufficient rewrite rule (without body, since bodies
removed, shown earlier)
1 > . . . > n

1 (1 . . . n ) > . . . > n ,
or, equivalently,
1 (2 . . . n ) > . . . > n
following rewriting makes least desirable:
1 > . . . > n (1 . . . n ) ,
or, equivalently,
1 > . . . > n (1 . . . n1 ) .
Another question concerns rules one option head. Intuitively, given
semantics important, satisfaction degree always 1.
Indeed, Corollary 12 later paper provides formal result confirms statement.
Optimal (preferred) outcomes. optimization problem P , (P ) denotes set
outcomes P , is, set models (under selected semantics)
generator P . Thus, (P ) stands models P framework CO problems
answer sets P , ASO problems considered. model (P )
optimal preferred P model J (P ) J >P I. denote
set preferred models P (P ).
following lemma asserts preference relation two optimization problems
equal sets outcomes, preferred models coincide. result follows
358

fiStrong Equivalence Qualitative Optimization Problems

immediately definitions useful sequel. statement brings
subtle notational issue. Formally, (strict) preorder pair (D, >), set (the
domain preorder) > transitive acyclic binary relation (the preorder
relation). Two preorders equal domain relation
domain. Typically, whenever domain understood, refer preorders
pointing relation symbols. Often, however, write >D preorder relation
symbol make domain explicit notation. statement
result below.
Lemma 2 Let P Q optimization problems >P(P ) = >Q
(Q) . Then, (P ) = (Q).
Proof.
observed above, equality preorders implies equality domains. case, equality >P(P ) = >Q
(Q) implies (P ) = (Q). Hence,
P
Q
I, J (P ) = (Q), > J iff > J. result follows directly definition
preferred outcomes. 2
observe eliminating rules large ranks make unpreferred outcomes preferred, never make preferred outcomes unpreferred. recall that,
given optimization problem P = (T, S), P<i = P[1,i1] = (T, S[1,i1] ) corresponding
optimization problem rules rank higher removed.
Lemma 3 every optimization problem P every 1, (P<i ) (P ).
Proof. Let us assume
/ (P<i ). case
/ (P<i ),
/ (P ),
/ (P )
P
<i
follows. Otherwise, interpretation J (P<i ) J >
I. Thus,
, say rank j, (i) v (r) < v (r); (ii) every r 0 P
rule r P<i
J

<i
rank less j, v (r 0 ) = v (r 0 ).
rank j, vJ (r0 ) vI (r0 ); (iii) every r0 P<i
J

note that, since (P<i ) = (P ), J (P ). Moreover, j < sets rules
coincide. Thus, J >P follows and,
ranks less equal j P P<i
consequently,
/ (P ). 2

2.2 Notions Equivalence
define union optimization problems expected, is, P1 = (T1 , S1 )
P2 = (T2 , S2 ), set P1 P2 = (T1 T2 , S1 S2 ). Two optimization problems P1
P2 strongly equivalent respect class R optimization problems (referred
class contexts simply contexts) every optimization problem R R,
(P1 R) = (P2 R).
consider three general classes contexts. First foremost, interested
class LU optimization problems U. consider families LgU
LsU optimization problems form (T, ) (, S), respectively. first class
consists optimization problems which, added problem, affect
set feasible outcomes cannot affect preference relation. call optimization
problems generator problems. second class consists optimization problems which,
added problem, change set feasible outcomes change
359

fiFaber, Truszczynski, & Woltran

(in general) preference relation. call optimization problems selector problems.
one-dimensional contexts provide essential insights general case.
two classes, speak strong gen-equivalence, denoted g , strong sel-equivalence,
denoted , respectively. general class LU optimization problems simply
speak strong equivalence, denoted sg .
recall notion strong equivalence is, definition, underlying replacement property. fact, optimization problem P = (T, S) containing subproblem
Q = (T 0 , 0 ) (i.e. 0 0 S) guarantee Q replaced P
another subproblem R without changing optimal outcomes, Q sg R. Indeed,
Q sg R holds, one faithfully replace Q R optimization problem (otherwise
would (Q P 0 ) 6= (R P 0 ) P 0 LU ).
Constraining ranks rules selectors gives rise additional classes contexts parameterized rank intervals [i, j]:
s,[i,j]

1. LU

[i,j]

2. LU

= {(, S) LsU | = S[i,j] }

= {(T, S) LU | = S[i,j] }

first class contexts gives rise strong sel-equivalence respect rules
rank [i, j], denoted s,[i,j] . second class contexts yields concept strong
s,[i,j]
equivalence respect rules rank [i, j]. denote g
. call problems
[1,1]
=1
class LU = LU simple optimization problems.
2.3 Relation Preference Formalisms
Optimization problems closely related ASO programs (Brewka et al., 2003).
formalism optimization problems extends ASO programs several ways. First,
generators optimization problems arbitrary propositional theories.
semantics equilibrium models, generators properly extend logic programs
answer-set semantics, used generators ASO programs. Second, selectors
optimization problems use arbitrary propositional formulas heads preference
rules, well conditions bodies, generalizes selectors
ASO programs. Finally, optimization problems explicitly allow alternative semantics
generators, possibility mentioned pursued Brewka et al. (2003).
already noted introduction vast literature preference representation reasoning (The special issue Artificial Intelligence Magazine, Goldsmith &
Junker, 2008, monograph Kaci, 2011, two comprehensive sources relevant
references. survey preference approaches top nonmonotonic formalisms, see
Delgrande, Schaub, Tompits, & Wang, 2004). Discussing goes beyond scope
present paper, especially problem focus (strong equivalence)
considered much preference research before, essentially
relevant earlier results except already mentioned introduction (Faber &
Konczak, 2006; Faber et al., 2008; Eiter et al., 2007a). Nevertheless, since work uses
preference formalism ASO problems, extension formalism ASO programs
Brewka et al. (2003) received much attention preference research
others, make comments choice.
360

fiStrong Equivalence Qualitative Optimization Problems

First, ASO problems explicit constraints must violated (the
generator part) preferences, is, weaker constraints make outcomes
desirable others (the selector part). ASO problems match well practical settings, typically kinds constraints play. instance, product
configuration problem physical constraints limiting space available possibilities (not every type engine put small family sedan, moon roof available
basic engine option, etc.), well user preferences describe user
would possible. Preferential reasoning (optimization) presence (hard)
constraints received substantial attention. representative approach CP-nets
(Boutilier, Brafman, Domshlak, Hoos, & Poole, 2003) combined constraints
described paper Boutilier, Brafman, Domshlak, Hoos, Poole (2004).
choice propositional logic represent constraints (the generator part formalism) standard. However, contrast approaches, addition classical
semantics consider appealing alternative, semantics answer sets.
important resulting formalism answer-set programming (Marek & Truszczynski,
1999; Niemela, 1999) steadily gaining acceptance constraint language
supported ever improving computational tools (Calimeri, Ianni, Krennwallner, & Ricca,
2012).
hand, choice formalism selector part less obvious.
several reasons motivated us. first, one already mentioned
earlier, preference rules natural reading agreeing well linguistic
patterns humans use formulating qualitative conditional preferences. Second,
demonstrated original work ASO selectors introduced (Brewka et al.,
2003), used approximate preference relations defined CP-nets
(Boutilier et al., 2003), one broadly studied qualitative preference systems,
better computational properties. instance, dominance problem P
opposed NP-hard even PSPACE-complete generalized classes
CP-nets (Goldsmith, Lang, Truszczynski, & Wilson, 2008).
Third, individual preference rules closely related one standard approaches
representing preferences based possibilistic logic. approach (we give
basic details here, comprehensive discussion refer Kaci, 2011, Ch.
3.3.3), preference theory consists formulas, distinct rank (the assumption
ranks distinct limiting formulas repeating ranks conjuncted
single formula rank). quality outcome given score defined
minimum rank formula outcome satisfy (, formulas
satisfied). higher score, better outcome. Let {1 , . . . , n } preference
theory, index representing rank . clear preference
semantics theory described precisely captured preference rule
n > n1 > . . . > 1 > 1
= 1 . . . , = 1, . . . , n. Thus, ASO problems subsume preference
formalism based possibilistic logic.
Finally, selector part ASO problems typically consists several preference rules
rules may different ranks. allows us model preferences coming
different sources different importance. cases, main issue
361

fiFaber, Truszczynski, & Woltran

integrating individual preferences single order. single broadly
accepted way so. approach used formalism boils Pareto
principle, arguably common core integration principles. Accordingly,
formalism allows conflicting rules selector (for instance, > b b > )
leaves conflicts unresolved resulting incomparability. ranks, lower
rank, important rule is. Rules less importance used compare outcomes
rules importance distinguish them. way handling ranks
natural shows many preference formalisms.
One prominent example context prioritized (propositional) circumscription
(Lifschitz, 1985), minimization (of certain atoms models formula) defined
respect classes atoms different priority. Formally, let theory
atoms (P1 , . . . , Pn , V, F ) partition A. Then, model Mod (T ) called
(P1 , . . . , Pn , V, F )-minimal N Mod (T ), (i) N (P1 Pi1 ) =
(P1 Pi1 ) N Pi Pi 1 Si n, (ii) N F = F .
intuition behind definition atoms P = Pi minimized,
assignments V allowed vary, assignments F kept fixed. Atoms P
minimized P1 highest priority followed P2 , etc.
relation ranks quite obvious. One show (P1 , . . . , Pn , V, F )-minimal
models theory coincide preferred outcomes CO problem X = (T, S),
selector given
1

1

= {f > f > | f F } {f > f > | f F }


{p > p > | p Pi , 1 n}).
Indeed preference rules first two sets ensure interpretations
fixed part comparable, preference rules last group precisely reflect prioritized process minimization atoms P1 . . . Pn .
Let us finally mention formalism optimization problems gives
handle classical prioritized circumscription, circumscription put
top logic programs (this meaningless, forms currently prevalent answer
set programming, answer sets necessarily minimal models, see instance Simons,
Niemela, & Soininen, 2002). end suffices apply embedding using ASO
problems instead CO problems.

3. Strong Sel-Equivalence
start analyzing case strong sel-equivalence turns core case
study. Indeed, characterizations strong sel-equivalence naturally imply characterizations general case thanks following simple observation.
Proposition 4 Let P Q optimization problems (either classical answer-set
s,[i,j]
semantics generators) [i, j] rank interval. P g
Q
every generator R LgU , P R s,[i,j] Q R.
s,[i,j]

Proof. () Let R LgU . Since P g

s,[i,j]

Q, P R g
362

Q R so, P R s,[i,j] Q R.

fiStrong Equivalence Qualitative Optimization Problems

[i,j]

() Let R optimization problem LU . P R = (P (Rg , ))(, Rs )
QR = (Q(Rg , ))(, Rs ). Moreover, assumption P (Rg , ) s,[i,j]
Q (Rg , ). Thus,
((P (Rg , )) (, Rs )) = ((Q (Rg , )) (, Rs )).
s,[i,j]

follows (P R) = (Q R) and, consequently, P g

Q. 2

Furthermore, set outcomes optimization problem P unaffected changes
selector module. follows choice semantics generators
matter characterizations strong sel-equivalence. Thus, whenever section
refer set outcomes optimization problem P , use notation (P ),
specific one, Mod (P g ) (P g ), applies CO ASO problems,
respectively.
formally state subsequent results, need one auxiliary notation.
optimization problem P , define diff P (I, J) largest k P<k J.
every k P<k J, set diff P (I, J) = . clear diff P (I, J)
well-defined. Moreover, P<1 J, diff P (I, J) 1. following lemma characterizes
relation >P Q ranked optimization problems P Q.
Lemma 5 Let P Q optimization problems, I, J interpretations. Then,
>P Q J holds one following conditions holds:
1. diff P (I, J) < diff Q (I, J) >P J;
2. diff P (I, J) > diff Q (I, J) >Q J;
3. diff P (I, J) = diff Q (I, J), >P J >Q J.
Proof. direction evident. prove only-if direction, note
cases diff P (I, J) < diff Q (I, J) diff P (I, J) > diff Q (I, J) obvious, too. Thus, let us
assume diff P (I, J) = diff Q (I, J) = i. Clearly, < (otherwise, P Q J, contrary
assumption). follows every rule r P Qs rank less i, vI (r) = vJ (r).
Next, every r P Qs rank i, vI (r) vJ (r). Finally, rules r P
r0 Qs , rank vI (r) 6= vJ (r) vI (r0 ) 6= vJ (r0 ) (since diff P (I, J) =
diff Q (I, J) = i). follows vI (r) < vJ (r) vI (r0 ) < vJ (r0 ). Thus, >P J
>Q J, needed. 2
first main result concerns strong sel-equivalence relative selectors consisting
preference rules ranks rank interval [i, j]. Special cases strong sel-equivalence
follow corollaries.
Considering strong sel-equivalence means preference rules may added optimization problems. three main effects so: outcomes equally good
may become strictly comparable, strict comparability may turned incomparability,
order strict comparability may reversed. illustrate phenomena,
show may affect strong sel-equivalence using forthcoming examples. Importantly, lead us towards conditions necessary strong sel-equivalence
motivate characterization property formally state Theorem 6.
363

fiFaber, Truszczynski, & Woltran

Example 2 Let P1 = (T1 , S1 ), T1 theory generating exactly two outcomes {a}
{b} (for example {a b}) S1 = empty. Clearly, (P1 ) = {{a}, {b}},
{a} {b} equally good respect P1 . possible make comparable

adding new preference rules. example, let R1 = (, {a > b }), 1. Now,
{a} >P1 R1 {b} thus (P1 R1 ) = {{a}}. evident pair equally good
interpretations I, J one find context consisting preference rules make
strictly preferred J (each new rule least preferred J one
strictly prefer J), precise ranks context
importance.
Example 3 Let P2 = (T1 , S2 ), T1 theory generating exactly two outcomes {a}

{b}, S2 = {a > b } rank 1. Clearly, {a} >P2 {b} therefore
(P2 ) = {{a}}. possible make {a} {b} incomparable adding appropriate

context, example R2 = (, {b > }). obtain {a} >
6 P2 R2 {b} {b} >
6 P2 R2 {a},
thus (P2 R2 ) = {{a}, {b}}.
important note rank context preference rule must exactly equal
rank original preference rule order achieve effect, otherwise one
preference rule would override other. general, pair strictly comparable
interpretations I, J one find appropriate context makes J incomparable,
contrast Example 2, context must make use rules particular ranks.
Example 4 Let P3 = (T1 , S3 ), T1 theory admitting exactly two outcomes {a}

{b}, S3 = {a > b } rank 2. Clearly, {a} >P3 {b} therefore
(P3 ) = {{a}}. possible reverse comparability {a} {b} adding
1
appropriate context, example R3 = (, {b > }). obtain {b} >P3 R3 {a}, thus
(P3 R3 ) = {{b}}.
important note that, order achieve effect, context must contain
preference rules lower ranks preference rules originally ordered J,
original ordering overridden. means technique
applicable preference rules rank 1. general, pair strictly comparable
interpretations I, J, comparison stems preference rules rank > 1, adding
context consisting preference rules lower rank reverse comparability J
results reversed strict order. Example 3, context must make use particular
ranks.
three effects may exploited order construct examples problems
strongly sel-equivalent suggest necessary conditions strong sel-equivalence.
first effect turn preferred outcomes non-preferred, second third
turn non-preferred outcomes preferred ones. second third effects imply
conditions specialized (context needs rules particular ranks).
2

3

Example 5 Consider P4 = (T1 , {a > b }) Q4 = (T1 , {a > b }), T1
theory admitting exactly two outcomes {a} {b}. {a} >P4 {b}, {a} >Q4 {b},
(P4 ) = (Q4 ) = {{a}}. two problems therefore equivalent. However,
364

fiStrong Equivalence Qualitative Optimization Problems

discrepancy respect ranks preference rules, take advantage
order show programs strongly sel-equivalent.
3
Let us consider context R4 = (, {b > }). context exploits second effect
mentioned makes {a} {b} incomparable respect Q4 extended
R4 ({a} 6>Q4 R4 {b} {b} 6>Q4 R4 {a}) thus turning {b} preferred outcome
(Q4 R4 ) = {{a}, {b}}. hand, new preference rule effect P4 ,
rank weaker preference rule P4 , hence (P4 R4 ) = {{a}},
therefore P4 6s,[3,i] Q4 3.
Analyzing example, observe context R4 exploits difference
preferred outcomes considering preference rules rank lower 3.
Indeed, ((P4 )<3 ) = {{a}} ((Q4 )<3 ) = {{a}, {b}}.
2

4

Example 6 Next, let us consider P5 = P4 = (T1 , {a > b }) Q5 = (T1 , {a > b }),
T1 theory admitting exactly two outcomes {a} {b}. {a} >P5 {b},
{a} >Q5 {b}, (P5 ) = (Q5 ) = {{a}}. here, observe ((P5 )<3 ) =
{{a}} ((Q5 )<3 ) = {{a}, {b}}. difference Example 5 preference
rule Q5 rank 4.
possible construct context witnesses P5 strongly sel3
3
equivalent Q5 , using preference rules rank 3: R5 = (, {a > b , b > }).
Here, directly add conflicting preference rules override preference rule Q5
overridden preference rule P5 . So, get (P5 R5 ) = {{a}}
(Q5 R5 ) = {{a}, {b}}, P5 6s,[3,i] Q5 3.
Examples 5 6 motivate condition (1) Theorem 6. Moreover, rather easy
see counterexample P s,[i,j] Q involve outcomes (P<i ) =
(Q<i ), selector context rank interval [i, j] make outcomes preferred.
However, different point view, condition (1) Theorem 6 fairly weak,
cover easy cases strong sel-non-equivalence, shown following
example.
2

2

Example 7 Let us define P6 = P4 = (T1 , {a > b }) Q6 = (T1 , {b > }), T1
theory admitting exactly two outcomes {a} {b}. {a} >P6 {b}, {b} >Q6 {a},
(P6 ) = {{a}} 6= (Q6 ) = {{b}}. P6 Q6 even equivalent, hence
P6 6s,[i,j] Q6 rank interval [i, j]. However, ((P6 )<2 ) = {{a}, {b}} ((Q6 )<2 ) =
{{a}, {b}}. condition (1) Theorem 6 satisfied rank intervals [2, j].
Condition (2) Theorem 6 covers cases one Example 7. example
rather simple, even require context order create witness strong
sel-non-equivalence, general one create context order make certain
outcomes preferred. remains considered cases discrepancy
stemming preference rules inside context rank interval.
2

3

Example 8 Let P7 = (T1 , {a > b }) Q7 = (T1 , {a > b }), T1 theory
admitting exactly two outcomes {a} {b} (this pair problems P4 Q4
2
Example 5). Consider context R7 = (, {b > }). Unlike R4 Example 5,
365

fiFaber, Truszczynski, & Woltran

rule rank 2. context makes {a} {b} incomparable respect extended
P7 ({a} 6>P7 R7 {b} {b} 6>P7 R7 {a}), thus turning {b} preferred outcome,
keeping {a} such. Therefore, (P7 R7 ) = {{a}, {b}}. hand, new
preference rule overrides one Q7 , turning {b} preferred outcome making
{a} non-preferred, (Q7 R7 ) = {{b}}. Therefore P7 6s,[2,i] Q7 2.
Unlike Example 5, ((P7 )<2 ) = ((Q7 )<2 ) = {{a}, {b}}, different reason allows counterexample. Here, observe diff P7 ({a}, {b}) = 2 6=
diff Q7 (a, b) = 3, allows adding appropriate preference rule rank 2.
important add rule one two differing ranks. Indeed,
context comprising rules rank one serve counterexample strong
sel-equivalence, indeed P7 s,[1,1] Q7 .
finally motivates condition (3) Theorem 6: two outcomes (as discussed
earlier, restrict outcomes (P<i ) = (Q<i ) context rank interval
[i, j]) differ ranks one ranks inside rank interval, use
constructions Example 8 order obtain counterexample strong sel-equivalence.
show three conditions Theorem 6 indeed characterize strong selequivalence.
Theorem 6 ranked optimization problems P Q, every rank interval [i, j],
P s,[i,j] Q following conditions hold:
1. (P<i ) = (Q<i )
2. >P(P<i ) = >Q
(Q<i )
3. every I, J (P<i ) < diff P (I, J) < diff Q (I, J), diff P (I, J) =
diff Q (I, J) diff P (I, J) > j diff Q (I, J) > j.
proof result quite involved requires several auxiliary properties.
provide appendix (together proofs main results).
Next, discuss special cases characterization Theorem 6. First,
consider case = 1, allows simplification Theorem 6.
Corollary 7 ranked optimization problems P Q, every rank interval [1, j],
P s,[1,j] Q following conditions hold:
1. (P ) = (Q)
2. >P(P ) = >Q
(Q)
3. every I, J (P ), diff P (I, J) = diff Q (I, J) diff P (I, J) > j diff Q (I, J) >
j.
Proof. Starting Theorem 6, note selectors P<1 Q<1 empty
hence (P<1 ) = (P ) (Q<1 ) = (Q). Moreover, precondition < diff P (I, J)
< diff Q (I, J) condition (3) Theorem 6 satisfied = 1 pair
I, J (P ), one diff P (I, J) = 1 diff Q (I, J) = 1 holds, together
366

fiStrong Equivalence Qualitative Optimization Problems

diff P (I, J) = diff Q (I, J) consequent satisfied case well, allows
omitting precondition. 2
addition j = , obtain case rank-unrestricted selector contexts,
condition (3) simplified more, since diff P (I, J) > j diff Q (I, J) > j never
hold j = .
Corollary 8 optimization problems P Q, P Q (equivalently, P s,1 Q
P s,[1,] Q) following conditions hold:
1. (P ) = (Q)
2. >P(P ) = >Q
(Q)
3. every I, J (P ), diff P (I, J) = diff Q (I, J).
Next, note optimization problem P simple (all rules rank 1),
diff P (I, J) > 1 diff P (I, J) = , equivalent P J. observation leads following characterization strong sel-equivalence simple optimization
problems.
Corollary 9 simple optimization problems P Q, following statements
equivalent:
(a) P Q (equivalently, P s,[1,] Q)
(b) P s,=1 Q (equivalently, P s,[1,1] Q)
(c) (P ) = (Q) P(P ) =Q
(Q) .
Proof. implication (a)(b) evident definitions.
(b)(c) Corollary 7, j = 1, obtain (P ) = (Q). condition P(P ) =Q
(Q)
follows conditions (2) (3) corollary. Indeed, let us consider I, J (P )
P J distinguish two cases. (i) diff P (I, J) = 1 >P J
condition (2) Corollary 7, >Q J, implying Q J. (ii) diff P (I, J) > 1
condition (3) Corollary 7, diff Q (I, J) > 1. Since P, Q simple, Q J,
consequently Q J. symmetry, Q J implies P J. Thus,
P(P ) =Q
(Q) .
Q
P
(c)(a) (c) follows Lemma 1 >P(P ) =>Q
(Q) (P ) =(Q) . Thus,
conditions (1) (2) Corollary 8 follow. prove condition (3), let us first assume
diff P (I, J) > 1 I, J (P ). follows diff P (I, J) = thus P(P ) J. Since
Q
Q
P
Q
P(P ) =Q
(Q) , get (Q) J thus diff (I, J) = . Hence diff (I, J) = diff (I, J).

diff Q (I, J) > 1 reason analogously. last remaining case, diff P (I, J) = 1
diff Q (I, J) = 1. Thus, directly obtain diff P (I, J) = diff Q (I, J). Corollary 8, P Q
follows. 2

367

fiFaber, Truszczynski, & Woltran

Corollary 9 shows, particular, simple problems difference
relations s,1 s,=1 . property reflects role preference rules rank 2
higher. allow us break ties among optimal outcomes, defined preference
rules rank 1. Thus, eliminate outcomes family optimal
ones, cannot introduce new optimal outcomes. Therefore, affect strong
sel-equivalence simple problems. property following generalization ranked
optimization problems.
Corollary 10 Let P Q ranked optimization problems let k maximum
rank preference rule P Q. relations s,k (equivalently, s,[k,] )
s,=k (equivalently, s,[k,k] ) coincide.
Proof. Clearly, P s,k Q implies P s,=k Q. Thus, enough prove P s,=k Q
P s,k Q. Using characterization Theorem 6, observe conditions (1)
(2) P s,=k Q P s,k Q same. Since P s,=k Q,
every I, J (P<k ) k < diff P (I, J) k < diff Q (I, J), diff P (I, J) = diff Q (I, J)
diff P (I, J) > k diff Q (I, J) > k. Let us consider I, J (P<k )
diff P (I, J) > k. follows diff Q (I, J) > k. Since k maximum rank preference rule P Q, diff P (I, J) = diff Q (I, J) = . Thus, diff P (I, J) = diff Q (I, J).
case diff Q (I, J) > k similar obtain every I, J (P<k )
k < diff P (I, J) k < diff Q (I, J), diff P (I, J) = diff Q (I, J). property implies condition (3) P s,k Q. Thus, P s,k Q follows. 2
observation role preference rules ranks higher ranks rules
P Q implies P Q strongly sel-equivalent relative selectors consisting
exclusively rules P Q equivalent (have optimal
outcomes), optimal outcomes tie P tie Q conversely. Formally,
following result.
Corollary 11 Let P Q ranked optimization problems let k maximum
rank preference rule P Q. P s,k+1 Q (P ) = (Q)
P(P ) =Q
(Q) .
Proof. Clearly, P<k+1 = P Q<k+1 = Q so, (P<k+1 ) = (P ) (Q<k+1 ) =
(Q). Thus, only-if part follows Theorem 6 (condition (1) theorem reduces
(P ) = (Q) condition (3) implies P(P ) =Q
(Q) ). prove part, note
condition (1) Theorem 6 holds assumption. Moreover, relations >P(P )
>Q
(Q) empty so, coincide. Thus, condition (2) Theorem 6 holds. Finally,
I, J (P ), diff P (I, J) > k + 1, diff P (I, J) = so, P J. assumption, Q J, is, diff Q (I, J) = = diff P (I, J). case diff Q (I, J) > k + 1
similar. Thus, condition (3) Theorem 6 holds, too, P s,k+1 Q follows. 2
Lastly, give simple examples illustrating results used safely
modify simplify optimization problems, rewrite one another strongly selequivalent one.
368

fiStrong Equivalence Qualitative Optimization Problems

Example 9 Let P = (T, S), = {a b c, (a b), (a c), (b c)} = {a >
c , b > c }, P 0 = (T, 0 ), 0 = {a b > c }. Regarding problems
CO problems, (P ) = (P 0 ) = {{a}, {b}, {c}}. Moreover, evident
0
P(P ) =P(P 0 ) . Thus, Corollary 9, P P 0 strongly sel-equivalent. words,
faithfully replace rules > c , b > c selector optimization problem
generator single rule b > c .
example general principle, note removing preference rules
one formula head yields problem strongly sel-equivalent.
Corollary 12 Let P Q two CO ASO problems P g = Qg Qs
obtained P removing preference rules one formula head (i.e.,
rules r |hd (r)| = 1). P Q strongly sel-equivalent.
Proof. Conditions (1)-(3) Theorem 6 follow observation every interpretation every preference rule r |hd (r)| = 1, vI (r) = 1. 2

4. Strong Gen-Equivalence
focus case strong gen-equivalence. semantics generators makes
difference difference concerns fact two semantics
consider, concepts strong equivalence different. aspects characterizations same. Specifically, generators strongly equivalent relative
selected semantics. Indeed, following example shows, generators
strongly equivalent, one extend uniformly extension one problem
single outcome, trivially optimal one, too, one
outcomes so, optimal ones.
Example 10 Consider CO problem P8 = (T8 , S8 ), T8 = {a b} S8 = {a >
b }. two outcomes here, {a} {b}, is, (P8 ) = {{a}, {b}}. Let r
preference rule S8 . Clearly, v{a} (r) = 1 v{b} (r) = 2. Thus, {a} >P8 {b} so,
(P8 ) = {{a}}.
addition, let Q8 = (T80 , S8 ) CO problem, T80 = {a b} S8
above. Then, (Q8 ) = {{a}} and, trivially, (Q8 ) = {{a}}. follows P8 Q8
equivalent, specify optimal outcomes. However, strongly
gen-equivalent (and so, strongly equivalent). Indeed, let R8 = ({a}, ).
(P8 R8 ) = {{b}} so, (P8 R8 ) = {{b}}. hand, (Q8 R8 ) = and,
therefore, (Q8 R8 ) = .
Moreover, preference relation > defined selectors problems considered
must coincide.
Example 11 Let P9 = (T9 , S9 ) CO problem, T9 = {a b c, (a b), (a
c), (b c)} S9 = {a > b , > c }. (P9 ) = {{a}, {b}, {c}},
{a} >P9 {b}, {a} >P9 {c}, {b} {c} incomparable. Thus, (P9 ) = {{a}}. Let
369

fiFaber, Truszczynski, & Woltran

Q9 = (T9 , S90 ) CO problem, S90 = {a > b > c }. Clearly, (Q9 ) = (P9 ) =
{{a}, {b}, {c}}. Moreover, {a} >Q9 {b} >Q9 {c}. Thus, (Q9 ) = {{a}} so, P9 Q9
equivalent. However, strongly (gen-)equivalent. Indeed, let R9 = ({a}, ).
Then, (P9 R9 ) = {{b}, {c}} (P9 R9 ) = {{b}}.
main insight differences preference relation may hidden
preferred outcomes but, present, exposed eliminating
preferred outcomes obscure appropriately selected generator context.
considerations apply CO ASO problems, therefore
formulate single theorem handles types problems.
Theorem 13 CO (ASO, respectively) problems P Q, P g Q
P g Qg strongly equivalent (that is, Mod (P g ) = Mod (Q g ) CO problems,
ModHT (P g ) = ModHT (Qg ) ASO problems) >PMod(P g ) = >Q
Mod(Q g ) .
view Examples 10 11, result unexpected. two examples demonstrated conditions characterization cannot, general, weakened.
Corollary 8 Theorem 13, follows strong sel-equivalence CO problems
stronger property strong gen-equivalence.
Corollary 14 CO problems P Q, P Q implies P g Q.
general implication Corollary 14 cannot reversed, shown following
example.
Example 12 Let us consider problems P10 = (T10 , S10 ) Q10 = (T10 , ), T10 =
{a b} S10 = {a > b , b > }. (P10 ) = (Q10 ) = {{a}, {b}}.
Moreover, {a} 6P10 {b} {b} 6P10 {a}. Thus, (P10 ) = {{a}, {b}}. Since Qs10 =
, (trivially) {a} Q10 {b}. Thus, (Q10 ) = {{a}, {b}}, too,
problems P10 Q10 equivalent. strongly sel-equivalent, though. Let
R10 = (, {a > b }). Then, P10 R10 = P10 so, (P10 R10 ) = {{a}, {b}}.
hand, {a} >Q10 R10 {b}. Thus, (Q10 R10 ) = {{a}}.
However, virtue Theorem 13, strongly gen-equivalent. Indeed, trivially
g
g
g
g
Mod (P10
) = Mod (Q10
) and, writing Mod (P10
) = Mod (Q10
), relations >PM10
10
>Q
empty therefore equal.
relation strong sel-equivalence strong gen-equivalence ASO problem
complex. general, neither property implies even problems P
Q assumed simple. P Q AS(P g ) =
g
AS(Qg ) PAS(P g ) =Q
AS(Qg ) (Corollary 9), P g Q ModHT (P ) =
g
g
ModHT (Qg ) >PMod(P g ) =>Q
Mod(Q g ) (Theorem 13). Now, AS(P ) = AS(Q ) (regular
equivalence programs) imply ModHT (P g ) = ModHT (Qg ) (strong equivalence)
Q
P
>PMod(P g ) =>Q
Mod(Q g ) imply AS(P g ) =AS(Qg ) .
conclude section one corollary concerning strong gen-equivalence
problems empty selectors.

370

fiStrong Equivalence Qualitative Optimization Problems

Corollary 15 CO (ASO, respectively) problems P Q P = Qs = ,
P g Q P g Qg strongly equivalent respective semantics
(that is, Mod (P g ) = Mod (Q g ) CO problems, ModHT (P g ) = ModHT (Qg ) ASO
problems).
result evident definitions. However, immediate consequence
Theorem 13. Indeed, optimization problems P Q empty selectors, cong
g
dition >PMod(P g ) = >Q
Mod(Q g ) equivalent Mod (P ) = Mod (Q ), consequence
strong equivalence P g Qg . Thus, problems empty selectors right
hand equivalence assertion Theorem 13 reduces strong equivalence
generators.

5. Strong Equivalence Combined Case
Finally, consider relation sg , results considering contexts combine
generators selectors. Since generators may vary here, previous section,
semantics generators matters. But, previous section, difference boils
different characterizations strong equivalence generators.
start result characterizing strong equivalence CO ASO problems
relative combined contexts (both generators selectors possibly non-empty)
selectors consisting rules rank least j, respectively.
Theorem 16 ranked CO (ASO, respectively) problems P Q, every rank
s,[i,j]
interval [i, j], P g
Q following conditions hold:
1. P g Qg strongly equivalent (that is, Mod (P g ) = Mod (Q g ) CO problems,
ModHT (P g ) = ModHT (Qg ) ASO problems)
2. >PMod(P g ) = >Q
Mod(Q g )
3. every I, J Mod (P g ) < diff P (I, J) < diff Q (I, J), diff P (I, J) =
diff Q (I, J) diff P (I, J) > j diff Q (I, J) > j
P

Q

<i
<i
4. >Mod(P
g ) = >Mod(Q g ) .

corresponding characterizations CO ASO problems differ respective conditions (1), reflect different conditions guaranteeing strong equivalence generators classical answer-set semantics. Moreover, four conditions Theorem 16 obtained suitably combining extending conditions
Theorem 6 Theorem 13. First, combined strong equivalence implies strong genequivalence, condition (1) taken Theorem 13. Second, modify conditions (2)
(3) Theorem 6 replacing (P<i ) Mod (P g ) (and accordingly (Q<i )
Mod (Qg )), classical model P g give rise optimal classical equilibrium
one upon addition context, aspect already visible Theorem 13.
Finally, add new condition stating relations >P<i >Q<i coincide
sets models P g Qg . generators allowed extended, one
make two models outcomes extension. two
371

fiFaber, Truszczynski, & Woltran

outcomes, say J, related differently corresponding strict relations induced
rules ranks less i, say >P<i J >Q<i J, optimal J
optimal problem extending P matter preference rules ranks
interval [i, j] use (rules rank higher effect J ordered).
hand, J incomparable >Q<i , remain incomparable
Q extended. J equally good respect rules rank < i,
rendered incomparable means preference rules rank i. case, J optimal
Q extended. Finally, J >Q<i I, J remains optimal matter preference
rules ranks higher add. follows two relations >P<i >Q<i
s,[i,j]
different, cannot P g
Q condition (4) necessary.
previous section, case selectors P Q empty reduces
strong gen-equivalence generators.
Corollary 17 CO (ASO, respectively) problems P Q P = Qs =
s,[i,j]
, every rank interval [i, j], P g
Q P g Qg strongly
equivalent respective semantics (that is, Mod (P g ) = Mod (Q g ) CO problems,
ModHT (P g ) = ModHT (Qg ) ASO problems).
result simple consequence Theorem 16. condition (1) theorem
implies Mod (P g ) = Mod (Q g ) so, since selectors P Q empty,
remaining conditions become trivially true.
conclude section observations concerning relation sg CO
ASO problems. contexts relevant may contain preference rules arbitrary ranks.
start case CO problems, results stronger.
derived general theorems above, present arguments relying results
previous sections, possible since CO problems equivalence strong
equivalence generators coincide.
saw last section CO problems strictly stronger relation
g . fact, CO problems, coincides general relation sg .
Theorem 18 CO problems P Q, P sg Q P Q.
Proof. only-if implication evident. prove converse implication,
use Proposition 4, reduces checking strong equivalence checking strong
sel-equivalence. Let R LgU generator problem. Since P Q, Corollary 8
Mod (P g ) = Mod (Qg ). Consequently, Mod ((P R)g ) = Mod ((Q R)g ). Writing
Mod (P g ) 0 Mod ((P R)g ) 0 . Thus, Corollary 8,
QR
>PMR
0 =>M 0 . Finally, condition (3) Corollary 8 P Q implies condition (3)
corollary P R Q R (as R preference rules 0 ). follows,
Corollary 8, P R Q R. Thus, Proposition 4, P sg Q. 2
case simple CO problems ranked interval [1, 1], argument
repeated using instead Corollary 8 equivalence (b) (c) Corollary
9. way, one show simple CO problems, relations s,=1
s,=1
g
coincide. Thus, Corollary 9 (the equivalence (a) (b)) Theorem 18, simple
CO problems four relations sg , s,=1
, s,=1 , coincide obtain following
g
result.
372

fiStrong Equivalence Qualitative Optimization Problems

Corollary 19 simple CO problems P Q, properties P sg Q, P s,=1
Q,
g
P s,=1 Q P Q equivalent.
simple ASO problems still sg s,=1
coincide general
g
notions different s,=1 (cf. subtle difference condition (c) compared
Corollary 9).
Corollary 20 simple ASO problems P Q, following conditions equivalent
s,[1,]

(a) P sg Q (equivalently, P g

Q)

s,[1,1]

(b) P s,=1
Q (equivalently, P g
g

Q)

(c) ModHT (P g )=ModHT (Qg ) PMod(P g ) = Q
Mod(Qg ) .
Proof. implication (a)(b) evident.
Let us assume (b). Theorem 16, ModHT (P g )=ModHT (Qg ). identity
implies Mod (P g ) = Mod (Qg ). Let us assume I, J Mod (P g ), PMod(P g ) J.
Q
>PMod(P g ) J then, Theorem 16, >Q
Mod(Qg ) J so, Mod(Qg ) J. Otherwise,

P J so, diff P (I, J) = . Theorem 16, diff Q (I, J) > 1. Since Q simple,
diff Q (I, J) = . Thus, Q J and, also, Q
Mod(Qg ) J. converse implication follows
symmetry. Thus, (c) holds.
Finally, assume (c) prove (a). end, show conditions (1)(4)
Theorem 16 hold. Directly assumptions, condition (1) holds. Condition (2) follows Lemma 1. Moreover, Mod (P g ) = Mod (Qg ). prove
condition (3), let us assume I, J Mod (P g ) diff P (I, J) > 1. Since P simple,
P J. Thus, Q J and, consequently, diff P (I, J) = = diff Q (I, J). Finally, condition
P<i
Q<i
g
g
(4), i.e. >Mod(P
g ) = >Mod(Q g ) , obviously holds case = 1 Mod (P ) = Mod (Q ). 2

6. Complexity
section, study problems deciding various notions strong equivalence.
Typically comparisons sets outcomes characterizations determine
respective complexity. start results concerning strong sel-equivalence.
Theorem 21 Given optimization problems P Q, deciding P Q co-NP-complete
case CO problems P2 -complete case ASO problems.
Proof. [Sketch, detailed argument provided Appendix B.] membership, focus
complementary problem consider pairs interpretations I, J violate least
one conditions stated Corollary 8. Clearly, witness pair interpretations
exists, witness pair built atoms occur
problems P Q. pair guessed, verified polynomial time (for
CO problems) polynomial time using NP oracle (for ASO problems) indeed
373

fiFaber, Truszczynski, & Woltran

violates conjunction three conditions Corollary 8. main observation
model checking polynomial classical semantics, co-NP-complete
equilibrium semantics (see Pearce, Tompits, & Woltran, 2009, Thm. 8).
Hardness follows considering equivalence problem optimizations problems
empty selectors, known co-NP-hard (for classical semantics) P2 hard (for equilibrium semantics, see Pearce et al., 2009, Thm. 11). 2
ranked case, observe increase complexity, explained
characterization given Theorem 6. Instead outcome checking, characterization
involves optimal outcome checking, difficult (unless polynomial hierarchy
collapses).
Theorem 22 Given optimization problems P Q rank interval [i, j], deciding
P s,[i,j] Q P2 -complete case CO problems P3 -complete case ASO
problems.
Proof. [Sketch, detailed argument provided Appendix B.] membership part essentially follows arguments proof Theorem 21, problem
deciding (P<i ) co-NP CO problems P2 ASO problems.
hardness part, reduce following problem sel-equivalence CO problems: Given two propositional theories , decide whether possess
minimal models. problem known P2 -complete (e.g., Eiter et al., 2007b,
Thm. 6.15), problem remains hard negation normal form (NNF)
given alphabet. adapt construction used Brewka et al., (2011).
Given negation normal form theory , construct CO problem PT setting
PTg

= [u/u0 ] {u u0 | u U },

PTs

= {u0 > u | u U },

U denotes set atoms occurring , [u/u0 ] stands theory
resulting replacing u u0 (we note ranks rules selector
1).
elements (PT ) one-to-one correspondence minimal models
. theories U follows minimal models
(PS ) = (PT ). Since problems PS PT selectors,
latter condition equivalent PS s,2 PT (which shown directly exploiting
characterization s,2 ).
Concerning hardness part ASO problems, use following problem: given
two open quantified Boolean formulas (QBFs) (X, ), (X, ), decide whether
possess minimal models. problem P3 -hard (see Lemma 30 Appendix
A). (X, ), construct P follows:
Pg = {z z 0 | z X }
{(y 0 ) w, w y, w 0 | }
{[z/z 0 ] w, w w},
Ps = {x0 > x | x X},
374

fiStrong Equivalence Qualitative Optimization Problems

[z/z 0 ] stands formula obtained replacing z z 0 (X, ) (again,
stress ranks rules selector 1). elements (P )
one-to-one correspondence minimal models (X, ). reason
show X , formulas (X, ) (X, )
minimal models P s,2 P . 2
Theorem 22 rank interval [i, j] given input. fixing interval,
hardness results still hold, provided > 1. fact, critical condition Corollary 7
(P<i ) = (Q<i ); rank intervals [1, j], selectors become empty condition
reduced (P ) = (Q), easier decide.
characterizations imply remaining problems co-NP. strong
gen-equivalence, co-NP-hardness follows directly Theorem 13 co-NP-completeness
deciding strong equivalence two propositional theories (for semantics).
Theorem 23 Given two CO (ASO, respectively) problems P Q, deciding P g Q
co-NP-complete.
Finally, combined case hardness result follows Theorem 16 co-NPcompleteness deciding strong equivalence propositional theories.
Theorem 24 Given ranked CO (ASO, respectively) problems P Q, rank interval
s,[i,j]
[i, j], deciding P g
Q co-NP-complete.
construction, hardness results hold already simple optimization problems.

7. Discussion
introduced formalism optimization problems, generalizing principles ASO
programs, particular, separation hard soft constraints (Brewka et al., 2003).
focused two important specializations optimization problems: CO problems
ASO problems. studied various forms strong equivalence classes optimization problems, depending contexts considered. Specifically, considered
following cases: new preference information added, hard constraints remain unchanged (strong sel-equivalence); hard constraints added preferences remain
unchanged (strong gen-equivalence); hard constraints preferences added
(strong equivalence). best knowledge, natural classification equivalences preference formalisms studied yet. certain cases
notions coincide (Theorem 18) longer true underlying semantics
changed ranks contexts restricted.
previous work, notion strong equivalence (both hard constraints preferences
added) studied logic programs weak constraints Eiter et al.,
(2007a) logic programs ordered disjunctions (LPODs) Faber et al., (2008).
former formalism, separation strong equivalence different notions
suggested ASO problems would possible (it instructive compare
Eiter et al., 2007a, Lemma 23, results, e.g., Corollary 20), similar separation
strong equivalence straightforward LPODs. reason syntactic nature
LPOD rules act hard constraints preference rules time. Faber et
375

fiFaber, Truszczynski, & Woltran

al., (2008) considered strong equivalence respect contexts logic programs
(which similar strong gen-equivalence) combined case strong equivalence
(called strong equivalence arbitrary contexts there), consider
counterpart notion strong sel-equivalence. fact, even unclear whether
every LPOD generating selecting modules cleanly separated.
paper, established characterizations three types strong equivalence.
exhibit striking similarities. characterizations strong sel-equivalence CO
ASO problems Theorem 6 precisely same, mirroring fact generators subject change. Theorem 13 concerns strong gen-equivalence CO
ASO problems. case, characterizations consist two requirements: strong
equivalence generators, equality strict preference relations restricted
class models generators. difference comes fact strong
equivalence classical equilibrium-model semantics different characterizations. Theorem 16 concerns combined case strong equivalence
differentiate CO ASO problems implicitly (as before, conditions
strong equivalence different two semantics). Moreover, characterizations
provided Theorem 16 arise rather systematic way given Theorems 6
13. case different semantics used strongly suggests
abstract principles play here. currently pursuing direction,
conjecturing inherent feature preference formalisms separation
logical preferential constraints.
Coming back LPODs, comments suggest identifying split representation formalism might interest. could lead alternative characterizations (combined) strong equivalence derived characterizations two
one-dimensional variants.
Next, note results give rise problem rewriting methods transform
optimization problems strongly equivalent ones. provided two simple examples
illustrating application results Example 9 Corollary 12. Similar examples
constructed results concerning strong gen-equivalence (combined) strong
equivalence. systematic study optimization problem rewriting rules result
strongly equivalent problems subject future work.
Finally, established complexity deciding whether optimization problems
strongly equivalent. Notably, general case strong (combined) equivalence problem co-NP-complete CO ASO problems. holds true strong
gen-equivalence problem. strong sel-equivalence problem, situation
complex. contexts form [1, j] [1, ] considered, problem deciding
strong sel-equivalence co-NP-complete CO problems P2 -complete ASO problems. rank interval allowed part input rank interval fixed [i, j],
2, problem gets computationally harder: case ASO problems, P3 -hard;
case CO problems P2 -hard. difference CO problems ASO problems
case strong sel-equivalence respect contexts consisting preference rules
ranks intervals [1, j] [1, ] comes fact corresponding concepts
strong sel-equivalence depend, particular, whether two theories equivalent
respect models (CO problems) respect equilibrium models (ASO problems).
two types equivalence different complexities. jump complexity
376

fiStrong Equivalence Qualitative Optimization Problems

strong sel-equivalence arbitrary rank intervals [i, j] allowed fixed
2 comes fact cases, concept depends properties
class outcomes optimal respect rules ranks less i,
cases depends properties class models. Decision problems concerning optimal
outcomes (such as: two theories optimal models) harder
corresponding versions problems models, explaining jump. results
strong sel-equivalence imply ranked optimization problems cannot efficiently
simulated simple optimization problems.

Acknowledgments
thank reviewers useful constructive comments. first author
supported Regione Calabria EU POR Calabria FESR 2007-2013 within
PIA project DLVSYSTEM s.r.l., MIUR PRIN project LoDeN.
second author supported NSF grant IIS-0913459.

Appendix A. Useful Lemmas
provide several lemmas use later proofs results discussed
main body paper.
first two lemmas given without proofs, easy consequences results
Ferraris (2005) Ferraris Lifschitz (2005).
Lemma 25 Let P theory, classical model P , let [I] = {a |
U \ I} {a | I}. Then, (P [I]) = Mod (P [I ]) = {I}.
Lemma 26 Let P theory, I, J two (classical) models 6= J, let
[I, J] = {a b | I, b J}
{a b | I, b U \ J}
{a b | U \ I, b J}
{a b | U \ I, b U \ J}.
(P [I, J]) = Mod (P [I , J ])) = {I, J}.
Lemma 27 Let P optimization problem, (P<j ), j 1, let
j

j

Rj [I] = {a > > | I} {a > > | U \ I)}.

1. (P Rj [I]);
2. every J J 6= Pj J, >P Rj [I] J.
377

fiFaber, Truszczynski, & Woltran

Proof. proving (1), simplify notation, write R Rj [I]. Since (P<j ),
(P ). Clearly, (P R) = (P ) so, (P R). show (P R),
let us consider arbitrary interpretation J (P R) assume J >P R I.
particular, J 6= so, diff R (I, J) = j. diff P (I, J) < j, diff P R (I, J) < j.
Consequently, J >(P R)<j I. Since rules R rank j, follows J >P<j I,
contradiction fact (P<j ). Thus, diff P (I, J) j. Since diff R (I, J) = j,
diff P R (I, J) = j. Therefore, J >P R implies J >R I, contradiction
(since, definition Rj [I] = R, R J interpretation J). follows
every J (P R), J 6>P R I, is, (P R).
assertion (2) evident, since definition Rj [I] = R, >R J interpretation J 6= I. 2

Lemma 28 Let P optimization problem, I, J interpretations I, J (P<j ),
union following sets rules:
j 1, let Rj0 [I, J] Ls,j
U
j

{a b > > | a, b J}
j

{a b > > | I, b U \ J}
j

{a b > > | U \ I, b J}
j

{a b > > | U \ I, b U \ J}.
following hold:
1. every r Rj0 [I, J], vI (r) = vJ (r) = 1;
2. every interpretation K
/ {I, J}, rule r Rj0 [I, J] vK (r) = 2;
3. >P J J
/ (P Rj0 [I, J]).
Proof. simplify notation, write R0 Rj0 [I, J].
assertion (1) evident. prove assertion (2), note conjunction
formulas appear top options preference rules R0 equivalent
^
^
^
^


{a | I} {a | U \ I}
{b | b J} {b | b U \ J} .
formula two models: J. Thus, every interpretation K,
least one formulas appears top options preference rules R0
satisfied K. corresponding preference rule r, vK (r) = 2.
Finally, prove assertion (3), let us assume >P J. Together (1),
0
implies >P R J. Thus, J
/ (P R0 ). prove converse implication, let us
0
assume 6>P J. Together (1), implies 6>P R J. Next, note
0
diff P (J, K) < j, since J (P<j ), K 6>P R J. diff P (J, K) j, property (2)
0
proved implies K 6>P R J. Since K arbitrary interpretation different
0
J, since 6>P R J, J (P R0 ) follows. 2

378

fiStrong Equivalence Qualitative Optimization Problems

Next, note property allows us infer strong sel-equivalence two problems treated CO problems strong sel-equivalence problems
treated ASO problems (and conversely). property relies fact changing
selectors affect class outcomes. proof simple omit it.
Lemma 29 Let P Q optimization problems Mod (P g ) = (P g )
Mod (Q g ) = (Qg ), [i, j] rank interval. Then, P s,[i,j] Q P Q viewed
CO problems, P s,[i,j] Q P Q viewed ASO problems.
final results section useful complexity results.
Lemma 30 Deciding whether open QBFs (X, ) (X, ),
negation normal form, minimal models P3 -hard.
Proof. show result reduction P3 -hard problem deciding satisfiability QBFs form ZXY , negation normal form. Let
QBF form consider following formulas, Z 0 = {z 0 | z Z}, u
v fresh atoms:
^
^

=
(z z 0 ) (
x u) (v v)
zZ

=

^
zZ

xX
0

(z z ) (

^


x v) (u u).

xX

clear negation normal form. difference
compared latter uses u former uses v vice versa,
point including conjuncts v v u u occurrences u v
. show (U, ) (U, ) minimal models
(with open variables U = Z Z 0 X {u, v}) true.
note considering models minimal models (U, ) (U, )
move quantifier appears directly front .
occurrences atoms outside .
clear contains neither u v, model (U, )
model (U, ). Consequently, holds
minimal model (U, ) minimal model (U, ).
Only-if direction: Let us assume false. Then, exists interpretation Z
atoms Z, every interpretation J atoms X, false. Let us
consider Mu = (Z \ I)0 X {u}. Clearly, Mu model YV. N model
N Mu , (Z \ I)0 N conjunct zZ (z z 0 ). Thus,
N Z = I. follows false atoms Z X interpreted N and,
consequently, X {u} N . Thus, N = Mu , implies Mu minimal model
. Essentially argument shows Mv = (Z \ I)0 X {v} minimal
model . Since Mu 6= Mv , different minimal models.
If-direction: Let us assume ZXY true. Let minimal model .
Clearly, v
/ (as \ {v} model ). Let us assume u . Let us
assume addition X \ 6= . assumptions imply interpretations
379

fiFaber, Truszczynski, & Woltran

= Z atoms Z J = X atoms X, true. follows \{u}
model , contradiction. Thus, X . Let = Z. Since ZXY
true, interpretation J X atoms X true, atoms
Z interpreted atoms X interpreted J. follows (Z \ I)0 J
model . Since (Z \ I)0 J , contradiction. follows
u
/ . Consequently, comment above, minimal model . converse
holds symmetry argument. Thus, two formulas minimal models. 2

Lemma 31 Given ranked preference rule r, interpretation I, calculating vI (r)
done polynomial time.
Proof. Initialize variable 1. Check whether 6|= bd (r) so, halt. Then, check
whether |= hd (r) so, halt; otherwise increment continue checking;
options head r exist, set = 1. checks model checking task
propositional formula hence polynomial time. Upon halting, equal vI (r). 2

Lemma 32 Given optimization problem P two interpretations I, J, calculating
diff P (I, J) done polynomial time.
Proof. Initialize variable x , scan rules P ranked preference
rule r P , determine whether vI (r) 6= vJ (r) (in polynomial time due Lemma 31). so,
set x rank (r) rank (r) < x. processed rules, x equal diff P (I, J). 2

Lemma 33 Given optimization problem P , two interpretations I, J, deciding whether
>P J holds done polynomial time.
Proof. First, sort rules P ranks. Starting lowest rank upwards,
following rank i: Check rules rank whether vI (r) < vJ (r)
vI (r) vJ (r). vI (r) < vJ (r) holds least one rule vI (r) vJ (r)
rules rank i, accept. rules r r0 rank vI (r) < vJ (r)
vI (r0 ) > vJ (r0 ), reject. ranks processed, reject. Lemma 31, steps
doable polynomial time. 2

Lemma 34 Given classical optimization problem P interpretation I, deciding
whether (P ) co-NP.
Proof. show witness J complementary problem (deciding whether

/ (P )) verified polynomial time. J = I, verify polynomial time
satisfy propositional theory P g , well-known feasible polynomial time. Otherwise, verify polynomial time J satisfies P g J >P (both
polynomial time, latter Lemma 33). 2

380

fiStrong Equivalence Qualitative Optimization Problems

Lemma 35 Given answer set optimization problem P interpretation I, deciding
whether (P ) P2 .
Proof. show witness J complementary problem (deciding whether

/ (P )) verified polynomial time using NP oracle. J = I, verify
satisfy P g using NP oracle. possible answer-set checking
co-NP-complete (Pearce et al., 2009, Thm. 8). Otherwise, verify using NP oracle J
satisfies propositional theory P g J >P (in polynomial time Lemma 33). 2

Appendix B. Proofs
Theorem 6 ranked optimization problems P Q, every rank interval [i, j],
P s,[i,j] Q following conditions hold:
1. (P<i ) = (Q<i )
2. >P(P<i ) = >Q
(Q<i )
3. every I, J (P<i ) < diff P (I, J) < diff Q (I, J), diff P (I, J) =
diff Q (I, J) diff P (I, J) > j diff Q (I, J) > j.
s,[i,j]

Proof. () Let R LU
let (P R). Lemma 3, ((P R)<i ). Since
s,[i,j]
R LU , R<i = (, ). Thus, (P<i ). assumption, follows (Q<i ).
particular, (Q<i ) and, (Q<i ) = (Q), (Q). Since Rg = ,
(Q R). show (Q R) show J (Q R)
J >QR I. Let us assume contrary J exists. Lemma 5,
three possibilities.
First, assume diff Q (I, J) < diff R (I, J) J >Q I. latter property
implies diff Q (I, J) (otherwise, would J >Q<i I, contrary (Q<i )).
particular, Q<i J and, since (Q<i ), follows J (Q<i ).
(1), J (P<i ). Thus, (2), J >P I. diff Q (I, J) j diff R (I, J) > j and,
s,[i,j]
R LU , diff R (I, J) = . Since J >P I, J >P R I. Otherwise, diff Q (I, J) < j.
< diff Q (I, J) then, (3), diff P (I, J) = diff Q (I, J). = diff Q (I, J), (3),
diff P (I, J) i. either case, diff P (I, J) < diff R (I, J). Since J >P I, J >P R I.
s,[i,j]
Next, let us assume diff Q (I, J) > diff R (I, J) J >R I. Since R LU ,
follows diff R (I, J) so, diff Q (I, J) > i. recall (Q<i ).
Thus, J (Q<i ) and, consequently, J (P<i ). diff Q (I, J) j then, (3),
diff P (I, J) = diff Q (I, J) so, diff P (I, J) > diff R (I, J). j < diff Q (I, J) then,
(3), j < diff P (I, J). Since diff Q (I, J) > diff R (I, J), diff R (I, J) < and, consequently,
diff R (I, J) j. Thus, diff P (I, J) > diff R (I, J) case, too. Since J >R I, J >P R
follows.
Finally, let us assume diff Q (I, J) = diff R (I, J), J >Q J >R I. Since
s,[i,j]
R LU , diff R (I, J) i. Thus, diff Q (I, J) and, since (Q<i ), J (Q<i ).
(1) J (P<i ) and, (2), J >P I. Consequently, J >P R I.
cases obtained J >P R I, contrary (P R), contradiction.
381

fiFaber, Truszczynski, & Woltran

() Let us assume (P<i ) 6= (Q<i ). Without loss generality, assume
(P<i ) \ (Q<i ) define R = (, Ri [I]) LUs,=i , Ri [I]
Lemma 27. lemma, (P R). hand, since
/ (Q<i )
s,=i Q, contrary
R Ls,=i
,


/
((Q

R)
).

Lemma
3,


/
(Q

R).
Thus,
P

6
<i
U
assumption.
follows (P<i ) = (Q<i ), is, condition (1) holds. prove condition
(2), let us consider interpretations I, J (P<i ) >P J. Let Ri0 [I, J]
selector defined Lemma 28. Since >P J, Lemma 28(3) implies J
/ (P Ri0 [I, J]).
Consequently, J
/ (Q Ri0 [I, J]). Lemma 28(3) again, follows >Q J.
Q
symmetry, > J implies >P J so, condition (2) holds.
prove condition (3), let us assume interpretations J satisfy
assumptions violate corresponding conclusion. follows, write p
diff P (I, J) q diff Q (I, J). Thus, p > q > i, p 6= q, p j
q j. Without loss generality, assume p < q. follows p finite and,
consequently, diff P (I, J) < 6= J. Moreover, < q p j.
Let us assume first p < i. take problem R = (, Ri [J]), Ri [J]
specified Lemma 27 define P 0 = P R Q0 = Q R. Since I, J (P<i )
I, J (Q<i ). assumptions, q > i. Thus, J Qi and, particular,
J Qi I. recall 6= J. Consequently, assertion (2) Lemma 27
0
0 ) diff P 0 (I, J) =
J >Q I. Since rules R ranks i, I, J (P<i
0
0
diff P (I, J) < i. follows J 6>P (otherwise, diff P (I, J) < would
0
J >P<i I). Let us define R0 = (, Ri0 [I, J]), Ri0 [I, J] specified Lemma 28. Since
0
J 6>P I, assertion (3) lemma, (P 0 R0 ). P 0 R0 = P (R R0 ).
Thus, (P (R R0 )) and, P s,[i,j] Q, (Q (R R0 )) = (Q0 R0 ).
0
assertion (3) Lemma 28, J 6>Q I, contradiction.
Next, let p = i. Clearly, 6>P J J 6>P I. Without loss generality, let us assume
J 6>P I. Let R0 = (, Ri [I, J]), let us define P 0 = P R0 Q0 = Q R0 . Since
0 ). Moreover, J 6>P
rules R0 ranks i, I, J (P<i ) implies I, J (P<i
0
follows Lemma 28(1) J 6>P I. Let R = (, Ri [J]). rules R rank
0
0
diff P (I, J) = diff P (I, J) = i. Thus, follows J 6>P R I. Moreover, every
0
0
0 ). diff P 0 (K, I) i,
K
/ {I, J}, diff P (K, I) < i, K 6>P R follows (P<i
0
K 6>P R follows Lemma 28(2). Thus, (P 0 R). hand,
0
recall diff Q (I, J) = q > i. Thus, diff Q (I, J) > i, (Lemma 28(1)). follows
0
0
J Qi I. Consequently, Lemma 27(2), J >Q R I. Thus,
/ (Q0 R),
contradiction.
follows p > i. complete proof (3), recall p j. Clearly, 6>P J
J 6>P I. Without loss generality, let us assume J 6>P I. Let R0 = (, Ri [I, J]),
let us define P 0 = P R0 Q0 = Q R0 . Let us assume interpretation K
/
0
P0
P
P
{I, J}, K > I. Lemma 28(2), follows diff (I, K) < i. Thus, diff (I, K) < i,
0
contradiction (P<i ). Thus, every interpretation K
/ {I, J}, K 6>P
0
and, argument, K 6>P J. Consequently, every interpretation K
/ {I, J},
0
0
P<p
P<p
K 6>
K 6>
J. addition, since I, J (P<i ), Lemma 28(1) obtain
0
0
0 ). addition, Lemma 28(1),
neither >P<p J J >P<p I. Thus, I, J (P<p
0
0
diff P (I, J) = diff P (I, J) = p and, since J 6>P I, J 6>P I.
382

fiStrong Equivalence Qualitative Optimization Problems

0

0

Let R = (, Rp [J]). (i) diff P (I, J) = p, (ii) J 6>P I, (iii) rules R
0
0
rank p, follows J 6>P R I. Moreover, every K
/ {I, J}, diff P (K, I) < i,
0
0
0
0 ). diff P (K, I) i, K 6>P R follows
K 6>P R follows (P<i
Lemma 28(2) (and definition P 0 ). Thus, (P 0 R). hand,
0
recall diff Q (I, J) = q > p. Thus, diff Q (I, J) > p, (Lemma 28(1)). follows
0
0
/ (Q0 R),
J Qp I. Consequently, Lemma 27(2), J >Q R I. Thus,
s,[i,j]
0
0
0
contradiction (we recall P
Q, P = P (R R ), Q = Q (R R0 ), and,
s,[i,j]
p j, R R0 LU ). 2
Theorem 13 CO (ASO, respectively) problems P Q, P g Q
P g Qg strongly equivalent (that is, Mod (P g ) = Mod (Q g ) CO problems,
ModHT (P g ) = ModHT (Qg ) ASO problems) >PMod(P g ) = >Q
Mod(Q g ) .
Proof. () first assumption implies strong equivalence generators P g Qg
relative corresponding semantics (we recall case classical semantics,
strong standard equivalence coincide). follows every problem R LgU ,
(P R) = (Q R). Moreover, semantics, (P R) Mod (P g Rg ) Mod (P g )
and, similarly, (Q R) Mod (Qg Rg ) Mod (Qg ). Since >PMod(P g ) = >Q
Mod(Q g ) ,
QR
R
Lemma 2,
R LgU change preferences, >P(P
g Rg ) = >(Qg Rg ) .
(P R) = (Q R).

() Let us assume P g Qg strongly equivalent. Then, problem
R LgU (P R) 6= (Q R). Without loss generality, assume
interpretation I, (P R) \ (Q R). Let us define problem LgU setting
= ([I], ), [I] defined Lemma 25. lemma, (P R ) = {I}
(Q R ) = . former property implies necessarily preferred,
(P RT ), latter one implies (QRT ) = . contradiction
assumption P g Q. Thus, P g Qg strongly equivalent, is, Mod (P g ) =
Mod (Qg ), case P Q CO problems, ModHT (P g ) = ModHT (Qg ),
case P Q ASO problems.
Since ModHT (P g ) = ModHT (Qg ) implies Mod (P g ) = Mod (Qg ), latter identity holds
two cases. equality, write Mod (P g )
Mod (Qg ). remains show >PM =>Q
. Towards contradiction, let us assume
I, J exactly one two relations; without loss generality
assume >P J 6>Q J. former identity implies, particular,
6= J. Let = ([I, J], ), [I, J] theory defined Lemma 26. lemma,
(P ) = (Q ) = {I, J}. Clearly, J
/ (P ) J (Q ), contrary
assumption P g Q. 2
Theorem 16 ranked CO (ASO, respectively) problems P Q, every rank
s,[i,j]
interval [i, j], P g
Q following conditions hold:
1. P g Qg strongly equivalent (that is, Mod (P g ) = Mod (Q g ) CO problems,
ModHT (P g ) = ModHT (Qg ) ASO problems)
2. >PMod(P g ) = >Q
Mod(Q g )
383

fiFaber, Truszczynski, & Woltran

3. every I, J Mod (P g ) < diff P (I, J) < diff Q (I, J), diff P (I, J) =
diff Q (I, J) diff P (I, J) > j diff Q (I, J) > j
P

Q

<i
<i
4. >Mod(P
g ) = >Mod(Q g ) .

Proof. () Proposition 4, suffices prove every R LgU , P R s,[i,j] QR.
(1), (P R) = (Q R) (we recall (P ) denotes set outcomes optimization problem P ; (P ) = Mod (P g ) case CO problems,
(P ) = (P g ) case ASO problems). Moreover, type problems,
(P R) Mod (P g R g ) Mod (P g ) and, similarly, (Q R) Mod (Q g R g )
Mod (Q g ). Since rules R rank least i, condition (4) follows
(P R)
(QR)
>(P R)<i =>(QR)<i . Lemma 2, ((P R)<i ) = ((Q R)<i ) so, condition
(1) Theorem 6 holds P R Q R. Since ((P R)<i ) (P R) Mod (P g ),
since corresponding inclusions hold Q, too, conditions (2)(3) theorem
P Q imply conditions (2)(3) Theorem 6 P R Q R. Thus,
Theorem 6, P R s,[i,j] Q R.
s,[i,j]

() Let us assume P g
Q. Then, P g Q follows and, Theorem 13, implies
appropriate version condition (1). Since ModHT (P g ) = ModHT (Qg ) implies Mod (P g ) =
Mod (Q g ), two versions assertion Mod (P g ) = Mod (Q g ).
proof, write Mod (P g ) and, equality,
Mod (Q g ).
Next, interpretations I, J 6= J, define R = ([I, J], ),
[I, J] Lemma 26. Let us define P1 = P R Q1 = QR. P1 s,[i,j] Q1 .
Moreover, Lemma 26, (P1 ) = (Q1 ) = {I, J}.
prove condition (4), let us assume >P<i J. follows >P1 J (we recall
R contains preference rules). Since (P1 ) = {I, J}, J
/ (P1 ) (P1 ).
assumption, J
/ (Q1 ). Since (Q1 ) = {I, J}, >Q1 J. particular,
(Q1 ). diff Q (I, J) < then, since R preference rules, >Q<i J. Thus, let us
assume diff Q (I, J) let us define R0 = (, Ri [J]), Ri [J] Lemma
27. Since (i) >P<i J, (ii) R preference rules, (iii) preference rules R0
0
rank i, follows >P1 R J. generator module R0 empty. follows
(P1 R0 ) = (Q1 R0 ) = {I, J}. Thus, J
/ (P1 R0 ) and, consequently, J
/ (Q1 R0 ).
Q
Q1
Since diff (I, J) i, diff (I, J) i. Moreover, (Q1 ) so, ((Q1 )<i ).
Thus, J ((Q1 )<i ). Lemma 27, J (Q1 R0 ), contradiction. argument shows
>P<i J implies >Q<i J. converse implication follows symmetry so,
condition (4) holds.
prove condition (2), let us assume >P J. diff P (I, J) < i, >P<i J
and, (4), >Q<i J. Thus, >Q J. Let us assume diff P (I, J) i. Since
(P1 ) = {I, J} since >P J implies >P1 J, J
/ (P1 ). Thus, J
/ (Q1 ). Since
(Q1 ) = {I, J}, >Q1 J so, >Q J.
prove condition (3), without loss generality assume < diff P (I, J). Thus,
< diff P1 (I, J) I, J ((P1 )<i ), latter follows properties (P1 ) = {I, J} diff P1 (I, J) = diff P (I, J) > i. Since P1 s,[i,j] Q1 ,
condition (3) Theorem 6 holds P1 , Q1 , J, is, diff P1 (I, J) = diff Q1 (I, J)
diff P1 (I, J) > j diff Q1 (I, J) > j. Consequently, diff P (I, J) = diff Q (I, J)
384

fiStrong Equivalence Qualitative Optimization Problems

diff P (I, J) > j diff Q (I, J) > j, is, condition (3) holds. 2
Theorem 21 Given optimization problems P Q, deciding P Q co-NP-complete
case CO problems P2 -complete case ASO problems.
Proof. membership, consider complementary problem. Corollary 8,
specified problem decide whether least one conditions (1) - (3)
holds:
1. (P ) 6= (Q), equivalently, I, exactly one identities (P )
(Q) holds;
2. I, J (P ), diff P (I, J) 6= diff Q (I, J);
3. >P(P ) 6= >Q
(Q) , equivalently, I, J, I, J (P ) (Q) exactly
one properties >P J >Q J holds.
show problem NP CO problems P2 ASO problems.
say pair interpretations I, J witness instance problem
YES instance demonstrates one conditions (1) - (3) hold. easy see
witness exists, witness I, J J consist atoms
occur P Q. witness guessed, condition (1) verified
polynomial time CO problems (this model-checking problem interpretation
theory) and, ASO problems, polynomial time assist two calls
NP oracle, since model checking equilibrium-model semantics co-NP-complete
(Theorem 8, Pearce et al. (2009)). Since condition (2) verified polynomial time
Lemma 32, condition (3) polynomial time CO problems polynomial time
assist four calls NP oracle ASO problems (Lemma 33 result
Pearce et al., (2009) mentioned above), membership part assertion follows.
hardness, observe case problems empty selectors, coincides
equivalence propositional theories case CO problems, equivalence
equilibrium theories case ASO problems. former well known co-NP-hard,
latter P2 -hard (Theorem 11, Pearce et al. (2009)). 2
Theorem 22 Given optimization problems P Q rank interval [i, j], deciding
P s,[i,j] Q P2 -complete case CO problems P3 -complete case ASO
problems.
Proof. prove membership part, consider complementary problem.
Theorem 6, problem consists deciding whether case least one
following conditions holds:
1. (P<i ) 6= (Q<i ), equivalently, interpretation I, exactly one properties (P<i ) (Q<i ) holds;
2. >P(P<i ) 6= >Q
(Q<i ) , equivalently, interpretations I, J (P<i ) (Q<i )
exactly one properties >P J >Q J holds;
3. I, J (P<i ) (Q<i ) < diff P (I, J) < diff Q (I, J),
diff P (I, J) 6= diff Q (I, J) holds diff P (I, J) j diff Q (I, J) j.
385

fiFaber, Truszczynski, & Woltran

call pair interpretations I, J demonstrates one conditions
holds witness. easy see witness, one consists
atoms occur P Q. show complementary problem P2
CO problems P3 ASO problems showing witness guessed
verified polynomial time, using NP oracle dealing CO problem
P2 oracle dealing ASO problem.
Consider witness I, J two interpretations. One test whether I, J verifies
condition (1) (only matters here) polynomial time two calls NP oracle CO problems (Lemma 34), two calls P2 oracle ASO problems
(Lemma 35). verify condition (2), need four calls respective oracles test
I, J (P<i ) (Q<i ) polynomial-time computation test exactly one
properties >P J >Q J holds (Lemma 33). Similarly, condition (3), use
four calls respective oracles test I, J (P<i ) (Q<i ) polynomial-time
computation test condition involving diff P (I, J) diff Q (I, J) (Lemma 32).
hardness part, start case CO problems. Therefore, reduce
following problem strong sel-equivalence: given two propositional theories , decide
whether possess minimal models. problem known P2 -complete
(for instance, equivalence positive disjunctive programs known P2 -complete, see
e.g., Eiter et al., 2007b, Thm. 6.15, means testing whether two propositional formulas
particular class minimal models). problem remains hard
negation normal form alphabet. Given negation normal form theory
construct CO problem PT elements (PT ) one-to-one
correspondence minimal models . adapt construction used (Brewka
et al., 2011). Specifically, set
PTg = [u/u0 ] {u u0 | u U },
U collection atoms occurring , [u/u0 ] stands replacing u
u0 ,
PTs = {u0 > u | u U }.
first observation outcome PT must form {y 0 | U \ I}
U . interpretation U write + = {y 0 | U \ I}. clear
|= u + |= u0 , hence |= + |= [u/u0 ].
Hence one-to-one mapping models outcomes + PT .
let us assume + (PT ). |= , N
N 6|= . Indeed N |= , N + |= PTg rules r PTs form u0 > u,
u \ N , obtain vN + (r) = 1 < 2 = vM + (r) rules r0 PTs
vN + (r0 ) = 2 = vM + (r0 ). implies N + >PT + , contradicting + (PT ). Thus,
minimal model .
Conversely, let us assume minimal model . + (PT )
N + (PT ) N + >PT + hold, implying + (PT ). Indeed,
N + >PT + , vN + (r) < vM + (r) least one r PTs vN + (r0 ) vM + (r0 )
r0 PTs . latter implies N former shows N 6= . Since N |=
contradicts assumption minimal model . follows + (PT ).
thus + (PT ) minimal model . Moreover,
U follows minimal models
386

fiStrong Equivalence Qualitative Optimization Problems

PS s,2 PT . Indeed, R LUs,2 easy verify (PS ) = (PS R)
(PT ) = (PT R). observation follows fact distinct
I, J (PS ) PS J distinct I, J (PT ) PT J. Thus,
rules R which, weaker rank, break ties, affect sets optimal
outcomes.
Concerning hardness ASO problems, use similar idea. However, shall
use following problem: given two open QBFs (X, ), (X, ), decide whether
two QBFs possess minimal models. Lemma 30, problem P3 -hard
and, moreover, assume negation normal form. reduction
combines idea reduction general ASP consistency (Eiter
& Gottlob, 1995). precisely, z X introduce new variable z 0 ,
construct P given (X, ) follows:
Pg = {z z 0 | z X }
{(y 0 ) w, w y, w 0 | }
{[z/z 0 ] w, w w},
[z/z 0 ] stands replacing z z 0 , w globally new atom.
selector set
Ps = {x0 > x | x X}.
equilibrium model Pg must contain w (otherwise w w would unsatisfied),
must contain {y, 0 | } (otherwise w y, w 0 would
unsatisfied); write W {y, 0 | } {w} set contained equilibrium
model. Moreover, equilibrium model must form V {z 0 | z X \ V } W .
Indeed, one x x0 must hold x X satisfy xx0 , both, otherwise
hM \ {x}, |=HT Pg well, contradicting fact equilibrium model Pg .
interpretation X write + = {x0 | x X \ I} W Pg . One show
model (X, ) + equilibrium model Pg . Indeed,
satisfies (X, ), hI + , + |=HT Pg J + holds hJ, + 6|=HT Pg .
hand, satisfy (X, ) exists J
J 6|= (X, ). follows hI + \ ({y |
/ J} {y 0 | J} {w}), + |=HT Pg (the
key element argument [z/z 0 ] contains occurrences negation,
negation normal form so, + \ ({y |
/ J} {y 0 | J} {w}) 6|= [z/z 0 ];
+
property allows one show hI \({y |
/ J}{y 0 | J}{w}), + |=HT [z/z 0 ] w).
+
Thus, equilibrium model Pg .
correspondence models (X, ) outcomes (equilibrium
models) + P established, handle issue minimality case CO
problems. Let us assume first + (P ). Then, demonstrated, satisfies
(X, ). Moreover, N , N satisfy (X, ). Indeed
N would satisfy (X, ), would (i) N + (P ), (ii) rules r Ps
form u0 > u, u \ N , vN + (r) = 1 < 2 = vM + (r), (iii) rules
r0 Ps , vN + (r0 ) = 2 = vM + (r0 ); three properties would imply N + >P + , contradicting + (P ). Conversely, let us assume minimal model (X, ).
+ (P ) N + (P ) show N + >P + hold
387

fiFaber, Truszczynski, & Woltran

(implying + (P )). end, reason follows. N + >P + would hold,
vN + (r) < vM + (r) least one r Ps , vN + (r0 ) vM + (r0 ), r0 Ps .
course implies N and, since N satisfies (X, ) (we recall N +
equilibrium model Pg so, N model (X, )), contradicts assumption
minimal model (X, ). thus + (P )
minimal model (X, ). fact, reasoning case CO problems,
obtain (X, ) (X, ) minimal models
P s,2 P . 2
Theorem 23 Given two CO (ASO, respectively) problems P Q, deciding P g Q
co-NP-complete.
Proof. Deciding strong equivalence propositional theories classical semantics
co-NP-hard case, strong equivalence equivalence coincide. coNP-hard equilibrium-model semantics (Lin, 2002). Thus, hardness part
assertion follows Corollary 15.
prove membership, consider complementary problem. Theorem 13,
consists deciding whether least one conditions (1) (2) holds:
1. P g Qg strongly equivalent or, equivalently, Mod (P g ) 6= Mod (Q g ), CO
problems, ModHT (P g ) 6= ModHT (Qg ), ASO problems;
2. >PMod(P g ) 6= >Q
Mod(Q g ) or, equivalently, interpretations I, J models
g
P Qg , exactly one properties >P J >Q J holds.
Consequently, consider pair interpretations I, J witness instance
problem YES instance model (for CO problems) hI, Ji
HT-model (for ASO problems) exactly one two theories P g Qg , I, J
models P g Qg exactly one properties >P J >Q J holds.
easy see witness exists, witness I, J
J consist atoms occur P Q. witness guessed, verifying
(showing condition (1) (2) holds) done polynomial time. well
known checking whether model (hI, Ji HT-model) propositional theory
done polynomial time, holds true deciding >P J >Q J
(Lemma 33). Thus, complementary problem NP. 2
Theorem 24 Given ranked CO (ASO, respectively) problems P Q, rank interval
s,[i,j]
[i, j], deciding P g
Q co-NP-complete.
Proof. membership, consider complementary problem. Theorem 16,
consists deciding whether least one conditions (1) - (4) holds:
1. P g Qg strongly equivalent (that is, Mod (P g ) 6= Mod (Q g ) CO problems,
ModHT (P g ) 6= ModHT (Qg ) ASO problems);
2. interpretations I, J models Mod (P g ) Mod (Q g ), exactly
one properties >PMod(P g ) J >Q
Mod(Q g ) J holds;
388

fiStrong Equivalence Qualitative Optimization Problems

3. I, J Mod (P g ) < diff P (I, J) < diff Q (I, J), diff P (I, J) 6=
diff Q (I, J) holds diff P (I, J) j diff Q (I, J) j;
P

Q

<i
<i
4. >Mod(P
g ) 6= >Mod(Q g ) or, equivalently, interpretations I, J models
Mod (P g ) Mod (Q g ), exactly one properties >P<i J >Q<i J holds.

prove complementary problem NP. proofs, use
membership witness pair interpretations I, J explicitly demonstrates one
conditions (1) - (4) holds. before, witness exists, one consisting
atoms occurring programs P Q only. condition, given pair I, J
(restricted atoms P Q), one verify polynomial time whether condition
holds (for condition (1), repeat argument previous proof, conditions (2)
(4), use Lemma 33, condition (3) Lemma 32).
Hardness follows directly co-NP-completeness deciding strong equivalence two propositional theories either semantics consider Corollary 17. 2

References
Boutilier, C., Brafman, R., Domshlak, C., Hoos, H., & Poole, D. (2003). CP-nets: tool
representing reasoning conditional ceteris paribus preference statements.
Journal Artificial Intelligence Research, 21, 135191.
Boutilier, C., Brafman, R., Domshlak, C., Hoos, H., & Poole, D. (2004). Preference-based
constrained optimization CP-nets. Computational Intelligence, 20, 137157.
Brewka, G., Niemela, I., & Syrjanen, T. (2004). Logic programs ordered disjunctions.
Computational Intelligence, 20 (2), 335357.
Brewka, G., Niemela, I., & Truszczynski, M. (2003). Answer set optimization. Gottlob,
G., & Walsh, T. (Eds.), Proceedings 18th International Joint Conference
Artificial Intelligence (IJCAI 2003), pp. 867872. Morgan Kaufmann.
Brewka, G., Niemela, I., & Truszczynski, M. (2011). Answer set optimization. Unpublished
manuscript.
Calimeri, F., Ianni, G., Krennwallner, T., & Ricca, F. (2012). answer set programming
competition. AI Magazine, 33 (4), 114118.
Delgrande, J. P., Schaub, T., Tompits, H., & Wang, K. (2004). classification survey preference handling approaches nonmonotonic reasoning. Computational
Intelligence, 20 (2), 308334.
Eiter, T., Faber, W., Fink, M., & Woltran, S. (2007a). Complexity results answer set
programming bounded predicate arities implications. Annals Mathematics
Artificial Intelligence, 51 (24), 123165.
Eiter, T., Fink, M., & Woltran, S. (2007b). Semantical characterizations complexity
equivalences answer set programming. ACM Transactions Computational Logic,
8 (3).
389

fiFaber, Truszczynski, & Woltran

Eiter, T., & Gottlob, G. (1995). computational cost disjunctive logic programming:
Propositional case. Annals Mathematics Artificial Intelligence, 15 (3/4), 289
323.
Faber, W., Truszczynski, M., & Woltran, S. (2012). Strong equivalence qualitative optimization problems. Brewka, G., Eiter, T., & McIlraith, S. A. (Eds.), Proceedings
13th International Conference Principles Knowledge Representation
Reasoning (KR 2012), pp. 188198. AAAI Press.
Faber, W., & Konczak, K. (2006). Strong order equivalence. Annals Mathematics
Artificial Intelligence, 47 (12), 4378.
Faber, W., Tompits, H., & Woltran, S. (2008). Notions strong equivalence logic
programs ordered disjunction. Brewka, G., & Lang, J. (Eds.), Proceedings
11th International Conference Principles Knowledge Representation
Reasoning (KR 2008), pp. 433443. AAAI Press.
Ferraris, P. (2005). Answer sets propositional theories. Baral, C., Greco, G., Leone,
N., & Terracina, G. (Eds.), Proceedings 8th International Conference Logic
Programming Nonmonotonic Reasoning (LPNMR 2005), Vol. 3662 Lecture
Notes Computer Science, pp. 119131. Springer.
Ferraris, P., & Lifschitz, V. (2005). Mathematical foundations answer set programming.
Show Them! Essays Honour Dov Gabbay, pp. 615664. College
Publications.
Gelfond, M., & Lifschitz, V. (1991). Classical negation logic programs disjunctive
databases. New Generation Computing, 9, 365385.
Goldsmith, J., Lang, J., Truszczynski, M., & Wilson, N. (2008). computational complexity dominance consistency CP-nets. Journal Artificial Intelligence
Research, 33, 403432.
Goldsmith, J., & Junker, U. (Eds.). (2008). Special Issue Preferences, Vol. 29(4) AI
Magazine.
Heyting, A. (1930). Die formalen Regeln der intuitionistischen Logik. Sitzungsberichte der
Preussischen Akademie der Wissenschaften, 1, 4256.
Kaci, S. (2011). Working Preferences. Springer.
Lifschitz, V. (1985). Computing circumscription. Joshi, A. K. (Ed.), Proceedings
9th International Joint Conference Artificial Intelligence (IJCAI 1985), pp.
121127. Morgan Kaufmann.
Lifschitz, V., Pearce, D., & Valverde, A. (2001). Strongly equivalent logic programs. ACM
Transactions Computational Logic, 2 (4), 526541.
Lin, F. (2002). Reducing strong equivalence logic programs entailment classical
propositional logic. Fensel, D., Giunchiglia, F., McGuiness, D. L., & Williams, M.A. (Eds.), Proceedings 8th International Conference Principles Knowledge
Representation Reasoning (KR 2002), pp. 170176. Morgan Kaufmann.
Marek, V. W., & Truszczynski, M. (1993). Nonmonotonic Logic; Context-Dependent Reasoning. Springer, Berlin.
390

fiStrong Equivalence Qualitative Optimization Problems

Marek, V., & Truszczynski, M. (1999). Stable models alternative logic programming
paradigm. Apt, K., Marek, W., Truszczynski, M., & Warren, D. (Eds.), Logic
Programming Paradigm: 25-Year Perspective, pp. 375398. Springer, Berlin.
Niemela, I. (1999). Logic programming stable model semantics constraint programming paradigm. Annals Mathematics Artificial Intelligence, 25 (3-4), 241273.
Pearce, D. (1997). new logical characterisation stable models answer sets. Dix,
J., Pereira, L. M., & Przymusinski, T. (Eds.), Proceedings 6th International
Workshop Non-Monotonic Extensions Logic Programming (NMELP 1996), Vol.
1216 Lecture Notes Computer Science, pp. 5770. Springer.
Pearce, D., Tompits, H., & Woltran, S. (2009). Characterising equilibrium logic nested
logic programs: Reductions complexity. Theory Practice Logic Programming, 9 (5), 565616.
Simons, P., Niemela, I., & Soininen, T. (2002). Extending implementing stable
model semantics. Artificial Intelligence, 138, 181234.
Turner, H. (2003). Strong equivalence made easy: Nested expressions weight constraints.
Theory Practice Logic Programming, 3 (45), 609622.

391


