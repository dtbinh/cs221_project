Journal Artificial Intelligence Research 53 (2015) 633-658

Submitted 01/15; published 08/15

Placement Loading Stations Electric Vehicles:
Detours Necessary!
Stefan Funke
Andre Nusser

funke@fmi.uni-stuttgart.de
nusser@fmi.uni-stuttgart.de

Universitat Stuttgart
Institut fur Formale Methoden der Informatik
70569 Stuttgart, Germany

Sabine Storandt

storandt@cs.uni-freiburg.de

Albert-Ludwigs-Universitat Freiburg
Institut fur Informatik
79110 Freiburg, Germany

Abstract
Compared conventional cars, electric vehicles (EVs) still suffer considerably
shorter cruising ranges. Combined sparsity battery loading stations, complete transition E-mobility still seems long way go. paper, consider
problem placing loading stations possible shortest path
sufficiently many run energy. show model problem
introduce heuristics provide close-to-optimal solutions even large road networks.

1. Introduction
Battery-powered, electric vehicles (EVs) important means towards reduction
carbon dioxide emissions recharged using renewable energies, e.g. solar wind
power. Despite environmental advantages EVs still wait breakthrough
main reason limited cruising range (often less 200km) together
sparsity battery loading stations (BLSs). Planning trip B EV
nowadays non-trivial undertaking; locations BLSs taken account,
many destinations completely range.
Hence, early phase E-mobility important goal establish network
BLSs using EV becomes worry-free enterprise. modern BLSs require
little space (see Figure 1, left, illustration), placed almost everywhere.
generates costs, natural objective minimize number installed BLSs.
previous work (Storandt & Funke, 2013), heuristic proposed determine BLS
locations one get anywhere anywhere road network without
running energy (when choosing suitable route). Unfortunately, approach
guarantees connectivity reasonability routes. fact, even rather close
destinations routes one recharging stop possible, might require long
detours several recharging stops due placement BLSs. related approach
Lam, Leung Chu (2013) suffers similar drawbacks. long run, E-Mobility
prevail road trip EV undertaken without unreasonable detours
c
2015
AI Access Foundation. rights reserved.

fiFunke, Nusser, & Storandt

Figure 1: Inner-City battery loading station (left image), feasible loading station cover
small map cut-out (right image).

introduced. paper ask placement BLSs
shortest path enough BLSs get stranded starting fully loaded
battery typically case gas stations conventional cars. call
set BLS locations EV Shortest Path Cover (ESC) define respective
optimization problem follows.
Definition 1 (EV Shortest Path Cover (ESC)). Given (di)graph G(V, E), edge costs
c : E R+ function path decides whether path traveled
along without recharging EV, problem determining minimum subset L V
BLSs every shortest path wrt c traveled without running energy
called EV Shortest Path Cover Problem.
See Figure 1, right, idea valid ESC looks like. remainder
define n = |V | = |E| otherwise noted. consider sake
clearer presentation assume unique shortest paths (which enforced using
standard techniques symbolic perturbation). describe deal ambiguous shortest paths towards end paper. function captures energy
characteristics network considered vehicle. Typically, mountainous areas
roads rough surfaces, minimal paths EV runs energy
considerably shorter flat terrain downhill. experiments determined
energy consumption road segment e = (v, w) E elevations h(v), h(w)
distance(e) + max(h(w) h(v), 0) weighting parameter (dependent
EV). is, energy consumption determined Euclidean distance
height differences, similar energy model used previous work (Artmeier, Haselmayr,
Leucker, & Sachenbacher, 2010) disregarding energy recuperation (negative edge costs).
function compares path accumulated energy consumption along edges
EVs battery capacity B R+ determine recharging necessary. Note
one could employ kind monotonous function here, approaches introduce
following work notwithstanding particular choice.
634

fiPlacement Loading Stations Electric Vehicles

1.1 Contribution
describe model ESC problem instance Hitting Set problem
sets shortest paths require least one battery recharge. allows
us use algorithms developed solving Hitting Set problems, e.g. standard greedy
approach. Unfortunately, turns difficulty computing ESC solution
already instance construction. (n2 ), n = |V | shortest paths network,
extracting storing naively requires much time space practical.
therefore design new shortest path extraction representation techniques,
allow tackle even large road networks. Moreover, develop several refinements
heuristics provide feasible ESC solutions efficiently. priori
approximation guarantee shown solutions, prove posteriori using
instance-based lower bounds real-world instances actual approximation ratio
small constant.
extended version original paper (Funke, Nusser, & Storandt, 2014b),
present following new results insights regarding ESC: prove ESC problem NP-hard (and even hard approximate). proven hardness motivation
justification development heuristic algorithms. Furthermore, explain
transform shortest paths one (newly developed) representation another, along
theoretical run time analysis experiments. ability transform representations allows flexibility might prove useful applications
compact representations shortest paths used. describe simple minimality
checks shortest paths deciding whether need considered respective Hitting Set instance. Especially large networks, checks reduce number shortest
paths stored significantly. addition, provide details involved
lower bound constructions. Finally, lay methods dealing ambiguous shortest
paths, augmenting already existing loading station set case loading
station locations restricted subset nodes network.

2. Theoretical Analysis
Let us first prove ESC problem NP-hard, hope efficient algorithms
solve ESC optimality (unless P=NP). Hence remainder paper
focus designing algorithms compute good approximate solutions.
Theorem 1 (Hardness). EV-Shortest Path Cover problem (ESC) NP-hard.
prove NP-hardness ESC solution size preserving reduction Vertex Cover
(VC), one classical NP-hard problems. use following definition
notation VC:
Definition 2 (Vertex Cover). Given graph G(V, E), goal find vertex set C V
minimal cardinality e E : e C 6= .
prove Theorem 1, show ability solve ESC problem efficiently implies
ability solve VC efficiently well. Hence, ESC NP-hard otherwise
would contradiction NP-hardness VC. end construct given
635

fiFunke, Nusser, & Storandt

1
1

1

1
1

1
1

1

1

1

1

1

1
1

Figure 2: Left: Vertex Cover instance optimal solution size 3 (red circled nodes).
Right: Respective ESC instance constructed inserting auxiliary edge per
node graph left, augmenting edges cost 1. circled
nodes indicate optimal Hitting Set path cost least 3 unhit.

VC instance Gvc (Vvc , Evc ) corresponding instance ESC specified G(V, E), c
follows:
V = Vvc , E = Evc i.e. ESC instance initially contains nodes edges
VC instance
v V add auxiliary vertex v 0 auxiliary edge {v, v 0 } G
e E set costs c(e) uniformly 1
true paths consisting less three edges false otherwise, i.e. every
shortest path traverses least three edges loading station
make set loading stations feasible ESC
construction requires polynomial time size Gvc . Figure 2 illustrates
transformation Vertex Cover instance ESC instance small example.
first show Vertex Cover solution Gvc ESC solution ESC
instance constructed described above.
Lemma 1. Vertex Cover C Gvc yields ESC L G, c, |L| = |C|.
Proof. Let C Vvc VC solution Gvc . ESC graph G contains corresponding
vertex every v Vvc , simply set L = C (so obviously |L| = |C|). remains show
placing loading stations according L, every shortest path G traveled
without running energy. Assume contradiction exists shortest path
G consisting three edges {u, v}{v, w}{w, x} neither v w L. every
edge e Evc least one two vertices L (because L = C Vertex Cover
Evc ), follows {v, w} auxiliary edge present G
Gvc . auxiliary edges cannot middle path containing three edges,
every auxiliary vertex degree 1. every path consisting three edges contains
loading station, hence L valid ESC.
complete proof Theorem 1, show valid ESC solution leads
valid Vertex Cover solution well.
636

fiPlacement Loading Stations Electric Vehicles

Lemma 2. ESC L G, c, yields Vertex Cover C Gvc |C| |L|.
Proof. Let L valid ESC solution. L might contain auxiliary vertices, construct
C replacing every auxiliary vertex v 0 L respective original vertex v. v
might part L, conclude |C| |L|. show C valid Vertex
Cover Gvc , prove every edge {v, w} Evc either v w C.
Assume contradiction exists edge {v, w} Evc {v, w} C = .
Accordingly, neither v, w, respective auxiliary vertices v 0 w0 part
ESC solution L. implies shortest path {v 0 , v}, {v, w}, {w, w0 } three edges
loading station G. contradicts L valid ESC solution, conclude
every edge {v, w} C 6= therefore C valid Vertex Cover.
L optimal solution ESC, obviously |C| = |L| fulfilled Lemma 2,
placing loading station auxiliary vertex v 0 corresponding original vertex v
time renders loading station v 0 superfluous. Hence optimal solution,
never vertices v v 0 L. combination Lemma 1, showed
every instance VC, construct polynomial time instance ESC
optimal solution translates optimal solution VC instance
size straightforward manner. Therefore hardness results VC carry
ESC. proves Theorem 1 furthermore rules existence (1 + )
polynomial-time approximation schemes ESC via proven APX-hardness factor
better 1.3606 VC (Dinur & Safra, 2004):
Corollary 1. ESC cannot approximated better 1.3606.
proven hardness, efficient algorithms solve ESC problem optimality
might difficult design unless one make use certain problem aspects battery
capacity parameter road network characteristics.

3. Modeling ESC Hitting Set Problem
following, aim good approximation algorithms heuristics solve
ESC problem practice. particular, exploit fact ESC modeled
instance well-known Hitting Set problem therefore algorithms suitable
Hitting Set computations transfer ESC. classical Hitting Set (HS) problem defined
follows:
Definition 3 (Hitting Set). Given set system (U, S) U universe elements
collection subsets U , goal find minimum cardinality subset L U
set hit least one element L, i.e. : L 6= .
case, U consists nodes road network (the possible BLS locations).
set composed vertex sets shortest s-t-paths (excluding themselves)
fully charged battery suffice reach t. function characterizes
paths energy consumption traversing exceeds battery capacity
B R+ call paths B-violating. Clearly, need consider set-minimal
paths supersets hit automatically. Theorem 2 shows Hitting Set formulation
indeed solves ESC problem (see Figure 3 illustration).
637

fiFunke, Nusser, & Storandt

v

B

l
l

v

l


B


B


B


v





Figure 3: shortest path exhibits B-violating prefix (s-v, marked red),
according Hitting Set formulation loading station l
subpath. vehicle fully reloads l, argumentation applies
subpath l-t, illustrated picture cutting prefix
s-l every layer. final s-t-path B-violating anymore. Therefore
originally considered s-t-path traveled visiting three indicated
loading stations. blue Bs mark nodes battery fully loaded,
i.e. charge level equal battery capacity.

Theorem 2 (Correctness). Hitting Set formulation leads feasible ESC solution,
i.e. placing loading stations according Hitting Set solution L, every shortest
path G traversed EV without running energy according .
Proof. Let (s, t) shortest path G B-violating, let EV
fully loaded s. Let (s, v) minimal B-violating prefix (s, t). prefix
hit loading station l L l 6= s, l 6= v demanded Hitting Set
formulation. EV reach l s, (s, v) minimal B-violating prefix l
appears v (s, v). l EV fully re-charged. Hence whole argumentation
transfers subpath (l, t). Applying argument recursively, EV finally
reach loading station (s, t) suffix path longer B-violating.
Therefore EV reach via (s, t) without running energy.

Note precision loss reformulating ESC Hitting Set problem
instance, since every solution ESC feasible solution exactly cardinality
respective Hitting Set problem instance.
point, common Hitting Set solving techniques applied solve ESC, e.g.
standard greedy algorithm. greedy algorithm repeatedly picks node hitting
far unhit sets adds solution. terminates soon sets
hit. solution computed greedy algorithm guaranteed ((ln |S|) + (1))approximation (Chvatal, 1979); ignore lower-order term (1) on.
application, number sets system upper bounded number shortest
paths graph. Therefore, |S| n2 hence greedy algorithm provides
2 ln(n) approximation guarantee. running time greedy algorithm depends
crucially fast access far unhit sets round.
638

fiPlacement Loading Stations Electric Vehicles

112
43

34
16
10
7

11

9
6

1

28





4

Figure 4: Cut-out CH-graph: Black edges original edges, blue edges indicate shortcuts. red node labels reflect contraction order. So, example,
moment node labeled 6 contracted, shortcut node 10 node 9
inserted shortest path 10 9 went 6. right side,
search space query leftmost rightmost node illustrated.
Green edges show Gout (s) purple edges Gin (t).

remainder paper, investigate efficient construction set
system using different path extraction representation schemes study influence
greedy algorithm.

4. Basics Practical ESC Computation
determine suitable BLS positions, first construct set shortest paths
EV would run energy (according ). Computing shortest path
two nodes one nodes classically performed using Dijkstras
algorithm (also shortly called Dijkstra). large street networks Dijkstra slow
process large number queries (as necessary application), though.
Therefore, instrument speed-up techniques developed accelerating shortest path
queries achieve better running times approaches. particular, employ
Contraction Hierarchies (CH) (Geisberger, Sanders, Schultes, & Delling, 2008)
purpose. basic idea behind CH augment graph G(V, E) set E 0
called shortcuts, span (large) sections shortest paths. Using shortcuts instead
original edges allows dramatic reduction operations Dijkstra run.
central operation CH preprocessing node contraction. Considering
graph G(V, E) node v contracted, goal remove v G without
affecting shortest path distances remaining nodes. achieved
creating additional shortcut edges neighbors v follows: every pair
neighbors u, w v (u, v), (v, w) E, shortcut (u, w) created (with cost
path uvw) uvw shortest path u w. resulting graph (with
v removed necessary shortcuts added) exhibits shortest path distances
original graph. CH preprocessing phase instruments node contraction first
assigning label l : V N node. Then, nodes contracted increasing label
order. contracted nodes constructed set shortcuts E 0 way,
639

fiFunke, Nusser, & Storandt

return result preprocessing phase CH-graph G0 (V, E E 0 ), is, original
graph augmented shortcuts (and labeling), see Figure 4 (left) example.
According labels, original shortcut edges (v, w) referred upwards
l(v) < l(w) downwards otherwise; paths called up/downwards consist
exclusively edges type. shown way created shortcuts,
node pair s, V shortest path exists G0 = G(V, E E 0 )
decomposed upward path starting followed downward path ending t;
highest node path wrt l called peak node following. property
path allows restrict bidirectional Dijkstra run Gout (s) Gin (t) refer
subgraphs G0 containing upwards paths starting downwards paths
ending respectively. Figure 4 (right), subgraphs illustrated. resulting
optimal path found bidirectional Dijkstra costs shortest path
original graph. representation path different, path
consists (partly) shortcuts. get shortest path original graph,
unpacking procedure applied. every shortcut, two edges (original shortcut)
directly spans memorized CH construction. Thus, unpacking one
recursively replace shortcuts spanned edges original edges identified.
Note CH scheme employed represent shortest path
concisely replacing many subpaths possible shortcuts. call
representation CH-path. experiments turns CH-paths
extremely economic representation scheme shortest paths.
one-to-all shortest path problem, PHAST algorithm (Delling, Goldberg,
Nowatzyk, & Werneck, 2011) takes advantage CH-preprocessing scheme.
first phase nodes Gout (s) source V settled via Dijkstra run.
second phase downward edges (v, w) relaxed decreasing order induced l(w),
thereby computing correct distances nodes V . second phase simply sweep
subset edges requires linear time. Correctness PHAST results
fact every node shortest path decomposed
upwards path (with contained nodes settled first phase) downwards
path. set downwards edges forms directed acyclic graph labels l(w)
induce topological order, sweep edges order assures moment
edge (v, w) relaxed, node v already settled. Hence PHAST computes exact shortest
path distances nodes network. Note single shortest path query
PHAST method choice, techniques pure CH-Dijktra computations
normally run time clearly sublinear number edges practice.

5. Construction Set System
section, investigate several strategies extract set system given ESC
instance, i.e. set minimal shortest paths G B-violating. Along
different extraction strategies, present different ways represent store respective
set shortest paths discuss advantages disadvantages representations.
640

fiPlacement Loading Stations Electric Vehicles

5.1 Naive Extraction
simplest approach comes mind compute shortest path tree (via Dijkstra)
every V identify nodes tree accumulated energy cost values
B. nodes priority queue Dijkstra settled predecessors
already belong B-violating paths, abort exploration source s.
respective paths search tree backtracked stored e.g. complete
vertex sets. small exploration radii (small bounds B) practical approach,

larger B space consumption O(n2 n), n = |V | enormous (assuming average

path length n). Even store Dijkstra search tree V via
predecessor labels, still space consumption O(n2 ). course, could easily
achieve linear space consumption number B-violating paths, storing
source vertex target vertex path. want access
nodes certain path, run Dijkstra computation network
t. huge sets paths computing nodes always demand
time-intensive. matter representation use store paths, time
complexity O(n (n log n + m)), = |E| naive extraction already limits usability
real-world instances; O(n log n + m) runtime one Dijkstra run.
fact, main difficulty Hitting Set-type problems street
networks. example, speed-up techniques shortest path queries Transit Nodes
(TN) (Bast, Funke, & Matijevic, 2009) Hub Labeling (HL) (Abraham, Delling, Goldberg,
& Werneck, 2012) based hitting certain set shortest paths well. Methods
complete instance construction impractical there. Therefore several custom-tailored
heuristics developed allow efficient computation without explicitly constructing
(Arz, Luxen, & Sanders, 2013). setting differs significantly ours,
setting poses additional criterion c identifying paths contained S. Hence
distance bound employed setting leads set equal length paths,
scenario, due different energy consumption driving uphill downhill,
lengths minimal B-violating paths differ vastly. unfortunately TN HL (and
related) heuristics carry setting. Therefore need explore new
ways extracting storing shortest path sets.
5.2 PHAST-Based Extraction
large bounds B finding B-violating paths source node resembles one-to-all
shortest path problem. PHAST explicitly designed solve task efficiently.
paths backtrack respective search tree CH-representation, i.e.
consist partly shortcuts. huge advantage compared conventional paths
terms storage, shortcuts spanning large portions shortest path
number nodes CH-path significantly smaller (about two orders magnitude
street network Germany). downsides, though: Nodes processed
second phase PHAST l-order increasingly distance; hence incorporating
B stopping criterion seems difficult. Moreover, B large leads paths
vastly differing lengths, (n2 ) lower bound (accumulated) runtime PHAST
every source might already result large overhead. Hence propose different
strategy based CH potential significantly faster.
641

fiFunke, Nusser, & Storandt

p

B = 10
3

2
3
4
2

1

5

G2
2 ]8,10]

G1

p

9

6
4

7
4

7
8 ]4,8]

3
]7,8]

9

]1,8]

1

Figure 5: Left: Schematic representation CH-graph height nodes indicating contraction order. blue-marked peak p, G1 := Gin (p) colored
red G2 := Gout (p) colored green. Note nodes bottom
layer, G1 G2 empty nothing done (which practice
true 50% nodes). Right: Energy cost labels (black) assigned
G1 G2 resulting two Dijkstra runs starting blue node.
resulting intervals nodes G2 expressed purple. we, example,
search matching targets source node labeled 3 G1 , intervals
reveal node labeled 9 G2 suitable candidate.

5.3 Peak Node Mapping (PNM)
large number B-violating paths originate source V . Exploring
paths Dijkstra PHAST time-consuming. core idea PNM
enumerate B-violating paths completely different taking CH-representation
paths consideration. explained above, shortest CH-paths unimodal respect
labeling l node maximal label called peak. Intuitively, nodes
high label appear shortest paths peaks. fact, real-world graphs,
5% nodes highest level constitute peaks reasonably long shortest paths.
gives rise path enumeration algorithm, explores paths source
peak, resulting dramatically reduced search spaces majority nodes.
Algorithm. PNM algorithm works follows: consider one one every node
p V potential peak. shortest paths peak p contain nodes
smaller label, need search upwards paths ending p downwards paths
starting p prefix suffix candidates. respective subgraphs CH-graph
G0 containing paths called G1 := Gin (p) G2 := Gout (p), see Figure 5, left,
illustration. conventional Dijkstra run G1 G2 (which typically
sparse) reveals distances p contained nodes. interested
combinations shortest (upward) paths G1 shortest (downward) paths G2
leading minimal B-violating paths. Testing naively expensive. Therefore,
construct p interval tree (Berg, Cheong, Kreveld, & Overmars, 2008)
nodes G2 . interval ]a, b], associate node t, denotes range
possible energy consumption values path prefix (s, p) G1 (s, p) (p, t)
minimal B-violating path. intervals easily computed single pass
Dijkstra search tree G2 , see Figure 5, right, example. every possible
642

fiPlacement Loading Stations Electric Vehicles

Figure 6: Illustration three methods representing storing shortest paths (stored
elements always colored orange): left complete vertex set,
middle shortcut set/CH-path (the heights vertices image correspond l-value), right triple consisting source, target
peak vertex.

source G1 , query interval tree set targets time O(log(|G2 |) + |T |)
storing resulting paths quadruples (s, p, t, c(s, p) + c(p, t)), . Note
employment interval trees make use special choice . different choices
interval computation procedure adapted.
Filtering. nodes processed, set B-violating paths which,
unfortunately, shortest paths. concatenation two shortest paths ((s, p)
(p, t)) need shortest path itself. remains filter set
appropriately. achieved using distance oracles quasi constant look-up
time e.g. provided HL another pass nodes role peak, always
pruning quadruple s, shorter path found p0 6= p. Note, pruning
already employed construction phase intermediate path set sizes
become large. final set paths stored list triples (s, p, t) even
compact representation CH-representation. Figure 6, visual comparison
provided storing path vertex set, shortcut set, PNM triple.
Accessing nodes respective shortest s-t-path G required greedy
Hitting Set algorithm longer trivial sophisticated representation schemes,
though. Therefore, develop suitable adaptions greedy algorithm work
CH-representations PNM triples Section 6.
5.4 Minimality Checks
mentioned introducing Hitting Set formulation ESC, need extract
store minimal B-violating shortest paths, i.e. paths subpath B-violating
well. Adding non-minimal paths set system course invalidate
solution, increases complexity storing sets, running time greedy
algorithm later on.
naive extraction scheme, B-violating path = sv1 . . . vk identified Dijkstra run might minimal, path might still B-violating without
prefix. precisely, check path remains B-violating removing
first edge (s, v1 ), so, dont include S. respective Dijkstra run
considering v1 source ensure B-violating path missed.
643

fiFunke, Nusser, & Storandt

PHAST-based extraction, minimality check becomes complex.
paths CH-representation, might direct access first edge path
original graph (if path starts shortcut). unpack first
shortcut performing minimality check.
PNM prefix suffix deletion might lead subpath still B-violating.
immediately decision favor triple (s, p, t), check first edge
path p last edge path p removal
destroy property path B-violating. Again, PHAST, paths
CH-representation construction, therefore unpack shortcuts first.
5.5 Transformability
Note, extraction scheme tie us certain path representation. fact,
mentioned representations (vertex sets, source-target-pairs, CH-paths, triples)
converted other. Especially transformation vertex sets CH-paths
turn favorable, CH-paths yield fair trade-off space consumption
applicability greedy algorithm explained detail Section 6.
provide details transformations including theoretical transformation times.
latter assume complete vertex set representation contains k elements.
source-target-pairs vertex sets. Given s, t, complete path computed via
Dijkstra run G backtracking, requiring O(n log n + m) time.
vertex sets CH-paths. assume CH-labels l : V N available.
recursive procedure allows turn vertex set CH-path. first
identify node v0 vertex set highest l-value (the peak).
split vertex set prefix v0 suffix v0 .
sub-paths search node highest l-value, providing us
v1 , v2 . two nodes connected v0 via direct edge/shortcut CHgraph (as nodes contracted before), (v1 , v0 ), (v0 , v2 ).
provides us prefix (nodes v1 ) suffix (nodes v2 )
recurse. algorithm stops prefix suffix
(or prefix monotonously increasing wrt l suffix monotonously
decreasing), see Figure 7, top, illustration. Assuming CH-representation
contains h shortcuts, transformation performed O(k h).
CH-paths PNM triples. need extract peak vertex (besides
source target) done O(h) CH-path consists h shortcuts.
PNM triples CH-paths. Given source s, target t, peak p, run Dijkstra
starting p G1 := Gin (p) G2 := Gout (p) settled.
number edges CH-graph assumed O(m), runtime single
transformation O(n log n+m) transformation source-targetpairs vertex sets. typically peak small l-value small G1
G2 , peak high l-value generates many s-t-paths once, amortized
costs per path considerably smaller.
644

fiPlacement Loading Stations Electric Vehicles

Figure 7: vertex sets CH-paths back. first row, vertex set given.
l-values derived CH construction indicated vertex elevations.
recursively vertex highest l value (marked red images)
prefix suffix path extracted shortcuts added span
path sections lower l-value. second row, CH-path recursively
unpacked. Shortcuts colored blue. red arrows point replacement
edges next unpacking step. final path started
first row, contain shortcuts.

CH-paths vertex sets. Given CH-path, apply unpacking method
described Section 4, i.e. recursively replace shortcuts spanned edges
path consists original edges (see Figure 7, bottom). resulting
path consists k vertices, unpacking performed O(k).
vertex sets source-target-pairs. first last vertex complete
path stored rest neglected. transformation costs O(1) O(k)
consider deletion k 2 elements well.
following, longer investigate source-target pair representation,
storing PNM triples requires one item per path time allows
efficient access paths vertices.

6. Greedy Hitting Set Computation
explained above, greedy approach natural strategy solve Hitting Set
problem approximately. Theoretically yields solutions within factor 2 ln(n)
optimum setting. practice greedy performs much better theoretical,
priori approximation guarantee implies.
simplest set system representation application greedy Hitting
Set algorithm straightforward requires deliberate operations set
system/path representations see following.
6.1 Complete Vertex Sets
paths simply given set contained vertices, single scan
sets determine best node hitting paths. Another scan remove paths
645

fiFunke, Nusser, & Storandt

hit selected node. two scans combined one
updating counter values removing newly hit paths (an initial count
still necessary). Unfortunately, space consumption approach enormous,
making single scan quite expensive.
6.2 CH-Paths
representing minimal B-violating paths CH-paths, could convert single
paths original paths unpacking shortcuts operate complete
vertex set path. Note paths would processed one one one
unpacked path would kept memory time. much better strategy
uncompressing every single CH-path get original node sets: maintaining
usage counter edge (counting many shortest paths use edge), first
scan edges CH-paths set system hit, incrementing respective
counters. traverse shortcut edges graph decreasing order
construction CH-preprocessing, incrementing counters spanned edges.
node counters, maintained identify maximum node, derived final
scan original (non-shortcut) edges. Keeping reverse information edges
spanned shortcut allows identification sets hit
node. update edge counters removing CH-paths set, picking
node requires one scan edges push counts non-shortcut
edges, one scan usage counters one scan set CH-paths.
6.3 Peak Node Triples
paths described triples source, target, peak node, get CHpath representation described Section 5.5. proceed CH-path
representation. Note, CH-path representation computed demand
peak every round avoid keeping paths CH-representation permanently memory.

7. Multi-stage Construction
country-sized graphs, even improved set system extraction methods representations reduce space time consumption enough practical. Therefore
introduce procedure interleaves set extraction greedy Hitting Set
computation multi-stage algorithm. multi-stage algorithm requires significantly
less space complete construction set system, therefore applied
considerably larger instances.
7.1 Nested Hitting Sets
instance ESC problem determined battery capacity B, make
following important observation: every capacity B 0 B, Hitting Set L0
instance corresponding B 0 feasible original instance (having enough BLSs
smaller battery capacity suffices larger battery capacity). So, example,
B = 20kWh, solving problem e.g. B 0 = 5kWh would feasible well.
construction L0 B 0 B might considerably faster due smaller exploration
646

fiPlacement Loading Stations Electric Vehicles

4

4

4


6



6

5

6



B 0 = 5, B B 0 = 15



B 0 = 10, B B 0 = 10



B 0 = 13, B B 0 = 7

4
5

2
4

B = 20

4

2
4



5

2

4
5

2
6

Figure 8: battery capacity B = 20 kWh, shortest path needs
hit loading station exhibits energy costs 21. conventional
construction, complete s-t-path would part Hitting Set instance.
three lower images illustrate happens use nested construction different values B 0 . red+purple/dashed subpath indicates
minimal B 0 -violating path starting s. brown square possible hitter
path. purple/dashed+blue path indicates minimal (B-B 0 )-violating
path starting brown square. path always subpath s-t matter B 0 chosen. hitting blue+purple path (large dot image)
assures B-violating paths hit well. nodes marked brown
squares part final solution.

radii, L0 typically much larger necessary instance defined B.
simply using solution B 0 = 5kWh although real battery capacity B = 20kWh,
expect result many superfluous loading stations.
another advantage first quickly computing Hitting Set small value
B 0 : allows us construct new, smaller problem instance feasible Hitting
Set L00 feasible original problem (defined B) L00 hopefully much
smaller L0 . second instance defined set paths originating L0
(B-B 0 )-violating.
prove Lemma 3 Hitting Set L00 second instance indeed
Hitting Set original instance.
Lemma 3. Given battery capacity B, second capacity B 0 < B. Let L0 feasible
ESC solution B 0 , L feasible Hitting Set minimal shortest (B-B 0 )-violating
paths originating L0 , L valid ESC solution battery capacity B.
Proof. Consider B-violating s-t-path original instance. must hit
node v L0 less B 0 away s. path v, . . . , hitter
target (or prefix thereof) new constructed path set (B-B 0 )-violating
paths originating L0 . Therefore subpath hitter L. Hence L hits Bviolating shortest path, makes L valid ESC solution battery capacity B. Figure
8 illustrates proof small example.
647

fiFunke, Nusser, & Storandt

7.2 Path Cover
small values B, even compute Hitting Sets without exploration
evaluation function purely based connectivity structure graph using
so-called k-Hop Path Cover (Funke, Nusser, & Storandt, 2014a) generalization
Vertex Cover. construct set vertices C V directed (not
necessarily shortest) k-hop path G contains least one vertex C (for k = 1
simply Vertex Cover). C ESC solution B B maximal energy
cost k-hop path, easily upper bounded k times maximal energy
cost edge. values k 48 takes minutes even large graphs using
variant depth first search, making step negligible overall running time.
7.3 Combination
implementation combined nested Hitting Sets k-Hop Path Covers multistage procedure, constructing sequence Hitting Sets Lr , Lr1 , , L1 = L sequence
values Br < Br1 < < B1 = B, finally returning L Hitting Set given
instance.
first Br results k-Hop Cover small value k, subsequent solutions
apply nested Hitting Set approach (and choose Bi manually). might
loss terms quality compared greedy algorithm full set system due
nested construction. experimental evaluation show, though, loss terms
quality pronounced, running times drastically improved,
graph sizes handle approach much larger.

8. Refinements Lower Bounds
section introduce speed-up strategy greedy algorithm independent employed set representation. develop algorithms construct
instance-based lower bounds ESC solution. bounds helpful
experimental evaluation, prove posteriori, running algorithms
computed solutions fact pretty close optima.
8.1 Multiple Hitters Heuristic
Even non-naive representations, considerable work involved picking
next best node greedy algorithm. might worthwhile add several
nodes Hitting Set round. Normally, pick node hits
far unhit sets, refrain picking nodes round picking
first node influences hit counters others. hand, pick nodes
interfere other, quality solution decline severely.
One way achieve generate list nodes sorted ascending order
hit counters, always picking first one going list selecting next
nodes shortest path distances least nodes already picked.
appropriately chosen, e.g. upper bound longest shortest path
B-violating. Thereby make sure path set increased hit counter two
nodes picked one round.
648

fiPlacement Loading Stations Electric Vehicles

Figure 9: Set seven node-disjoint B-violating paths (highlighted grey) small example graph. Every valid Hitting Set B-violating paths graph
contain least seven vertices, vertex hit one grey
marked paths. Therefore size set node-disjoint paths feasible lower
bound optimal Hitting Set size.

8.2 Simple Instance-Based Lower Bounds
evaluate quality heuristics, would compare outcome
optimal solution. optimal value typically unknown, instead compare
good, easily computable lower bound. study Transit Nodes (Eisner & Funke,
2012) rather involved lower bound proposed, takes effort comparable
solving Hitting Set problem itself. propose much simpler alternative suffices
purposes: by-product generation set system obtain
set node-disjoint B-violating paths. two paths set non-empty
intersection. Clearly, feasible solution must contain extra node per path set.
Hence size set node-disjoint paths yields valid lower bound, see Figure 9
illustration.
case generate set system explicitly (because use nested Hitting Sets),
greedily extract set node-disjoint paths running Dijkstra computations
random sources adding B-violating paths set long intersect
previously selected ones. size set provides valid lower bound time.

9. Dealing Real-world Settings
Throughout paper, made assumptions ESC problem sake
clean definition easier algorithm descriptions. assumptions necessarily
met practice, explain following adapt algorithms still perform
well real-world settings.
649

fiFunke, Nusser, & Storandt

9.1 Ambiguous Shortest Paths
exposition always assume uniqueness shortest paths. section
discuss necessary modifications case shortest paths ambiguous.
First all, enforce uniqueness shortest paths symbolic perturbation.
end define cost path = v0 v1 . . . vk sum c edge costs,
vector (c , v0 , v1 , . . . , vk ). Two cost vectors compared lexicographically,
is, two t-paths 1 = sv1 . . . 2 = sw1 . . . aggregated edge
costs, minimal vi 6= wi , 1 considered shorter vi < wi , otherwise
2 considered shorter. symbolic perturbation easily incorporated e.g.
Dijkstras algorithm. computation shortest paths node consider
(possibly tentative) distance label node v aggregated edge costs
ds (v) along respective path tuple (ds (v), preds (v)), preds (v) denotes
predecessor current path v. ordering case identical ds (v) values
determined node ID predecessor. Edge relaxations well organization
priority queue made according augmented distance labels. easy
see yields canonical unique shortest paths described above.
edge lengths typically measured precision around one meter rarely happens two paths exhibit exactly length. circumstances, though,
might desirable actually maintain multiple shortest paths nodes (hitting
/ allowing travel along without running energy). Fortunately, adapt algorithms cater shortest paths. minimal
change backtracking Dijkstra exploration well PNM approach
slight change CH construction. former, retrieve paths/sets, instead
following predecessor reference node v (which set edge relaxation),
inspect adjacent nodes check whether distance labels respective edge
cost sums distance label v. yields neighbors v lie shortest
path v. Recursing neighbors obtain shortest paths. CH
construction, crucial operation contraction node v. original version,
every pair neighbors u, w v (u, v), (v, w) E, shortcut (u, w) created
(with cost path uvw) uvw shortest path u w. maintain
shortest paths, add shortcut uvw shortest path u w (but possible
existence shortest paths). way every shortest path CH representation;
comes cost slightly shortcuts added.
lower bound construction Section 8.2 modified yield lower bound
case ambiguous shortest paths follows: s-t-pair contribute
lower bound shortest paths require least one recharging event.
compute valid lower bound retrieve maximal set vertex pairs,
two vertex pairs set respective shortest path node sets allowed overlap.
generalizes idea node-disjoint shortest paths case ambiguous shortest paths.
experiments showed, though, considering shortest paths yield
noticeably different results mainly due rarity reasonably long ambiguous shortest
paths. disregard ambiguities implementation, extremely small
battery capacities (corresponding cruising range less 2km), found ambiguous
650

fiPlacement Loading Stations Electric Vehicles

shortest paths covered BLS placement. larger battery capacities
BLS placement fact covered (of few) ambiguous shortest paths.
9.2 Restricted Loading Station Placement
assume ESC problem definition loading stations placed every
node network. practice, though, set possible locations might restricted
due technical, financial legal reasons. set V 0 V candidate nodes
loading stations, incorporate algorithms follows: construction
set system, check every shortest path whether least one nodes
V 0 . Otherwise, ignore path completely (as never hit anyway).
CH-based extraction methods, set flag every edge/shortcut indicating whether
spanned path contains node V 0 not. allows perform check
CH-path without unpack it. actual Hitting Set computation simply
skip nodes V 0 compute feasible solution.
Note, depending choice V 0 final Hitting Set might allow drive
shortest paths without running energy, though. incorporate
locations suitable become loading stations others without losing global
reachability demanded ESC problem formulation, introduce prize function
p : V R+ . higher prize complicated expensive place
charging station node. exploit weighted Hitting Set problem
basis computations. goal find set L elements
P universe
hit sets set system minimizing accumulated prize p(l).
set system extraction methods remain unaffected prizes. greedy Hitting
Set computation step, selection next best hitter changes. Previously, selected
node next hits far unhit sets. Now, S(v) denotes set far unhit
sets contain v, select node minimizes average prize per set p(v)/|S(v)|.
approximation guarantee greedy algorithm weighted Hitting Set problem
unweighted Hitting Set problem (Chvatal, 1979). expect
solution consist mainly cheap charging stations possibly expensive ones
required establish reachability two nodes.
9.3 Placement Given Initial Loading Station Set
Another assumption made ESC problem definition try construct
network loading stations scratch, i.e. starting loading stations all.
loading stations still sparse many areas, ones already installed
ignored. Existing loading stations easily taken account solving
ESC problem: given initial set loading stations L0 , check extraction
set system path already hit L0 . case, path
pruned. remaining steps Hitting Set computation work before.

10. Experimental Evaluation
proposed techniques computing ESC solutions evaluated multi-threaded
implementation written C++ executed 2nd generation Intel Core desktop hard651

fiFunke, Nusser, & Storandt

ware, i7-3930 (6 cores, 64GB RAM) complete set generations i7-2700 (4
cores, 32GB RAM) multi-stage construction nested Hitting Sets. use
following abbreviations state results: K=103 , M=106 , s=seconds, m=minutes, h=hours,
d=days, GB=109 Bytes. distinguish CPU time (total CPU usage) real time
(wall clock time). Several road networks Germany derived OpenStreetMap data
region
Pforzheim
Tubingen
Baden-Wurttemberg South
Southern Germany
Germany

abb.
(PF)
(TU)
(BW)
(SG)
(GE)

|V |
0.2M
0.5M
2.2M
4.2M
17.7M

|E|
0.4M
1.0M
4.6M
8.6M
36.0M

Table 1: Test graph characteristics.
(OSM, 2015) used evaluation, see Table 1 overview. edge cost function
c used travel time along edge, paths hit indeed quickest paths (the
term shortest paths conventionally used subsuming kinds metrics). Energy consumption EV modeled explained introduction using distance data
OSM elevations provided Shuttle Radar Topography Mission (NASA, 2015). B
corresponds battery capacity translates certain terrain dependent cruising
range. use capacity B PF TU allows drive 40 kilometers average,
125 kilometers larger graphs. , models much going uphill
increases energy consumption, equals 4.
10.1 Dealing Complete Set Systems
Construction Representation. Let us first examine time space complexity
extracting complete set minimal B-violating paths. constructed set systems
using naive strategy (NAIVE representing path complete sequence
vertices), PHAST-based exploration (PHAST paths CH representation),
peak node mapping (PNM representing path source,peak,target triple).
respective results found Table 2. Unfortunately, two smallest instances
feasible process using strategies; already BW graph, time space
consumption NAIVE exploded (extrapolated 500GB 23 CPU
days). comparison, PHAST factor 3 faster NAIVE, space
consumption CH-paths improvement least order magnitude. PNM
construct BW instance 4.4 CPU hours, compared week needed PHAST,
space consumption using triples decreases another factor 2 (note longer
paths advantage PNM vs. CH representation increases). SG GE,
PHAST PNM took much time space (e.g. extrapolated 557GB/112days
PHAST). larger networks, constructing complete set systems seems infeasible.

Comparison Path Representations. explained Section 5.5, path extraction
scheme tie us path representation. Instead, transform extracted
652

fiPlacement Loading Stations Electric Vehicles

Graph

PF
TU
BW
Graph

PF
TU
BW

# paths

38M
168M
2715M

space consumption
NAIVE
PHAST
PNM
vertex sets CH-paths
triples
5.2GB
0.2GB
0.1GB
24.0GB
2.1GB
0.9GB
[526.3GB]
34.6GB 14.3GB

computation time
NAIVE
PHAST
PNM
CPU
real
CPU
real
CPU
real
1.5h
0.3h 26.7m 5.0m
1.8m 25.1m
24.6h
4.1h
7.5h
1.4h 27.3m
5.4m
[23.1d] [3.9d]
7.5d 33.1h
4.4h 47.0m

Table 2: Comparison path extraction/representation schemes. B corresponds
40km (PF TU) 125km (BW) cruising range flat terrain. Timings include
CH-construction PHAST/PNM. Values brackets extrapolated.

paths introduced representations storing them. representation
provides trade-off space consumption access times single paths. Figure
10 illustrates values small large benchmark instance (TU GER).
Note, access times paths represented triples amortized. really
want extract single path only, costs comparable ones (s, t)
representation. greedy algorithm, require access huge sets paths
every round, (s, p, t) representation pays off. CH representation, access
times reported figure purely completeness. significant
greedy Hitting Set computation, though, specialized greedy algorithm CH paths
require unpack paths. fact, access times relevant greedy
algorithm even ones vertex set representation, CH representation
contains far less elements sweep over. Hence, regard CH-paths best
path representation soon set system fits memory representation.
transformation times two path representations estimated
results reported Figure 10 well. Every transformation runs constant linear
time according analysis cost less comparable accessing paths vertex
set representation. transformation time CH-paths vertex sets vice versa
corresponds access time paths CH representation. transform triples
CH-paths, need time access path triple form minus time unpack
CH-path.
Hitting Set Computation. evaluated standard greedy algorithm well
multiple hitters (MH) variation set systems PF, TU, BW varying choices
B. Figure 11 shows performance terms quality (standard greedy vs. MH)
well running time (how much faster MH compared standard greedy). ratios
averaged test graphs; bound B chosen almost zero 60 percent
653

fiFunke, Nusser, & Storandt

Figure 10: Comparison several path representation schemes terms space consumption access time. axes log scale.

maximum energy consumption shortest path respective network (in fact
long paths, set systems got simple greedy even constructed optimum,
hence approximation ratio 1 Figure 11). cases, greedy produces results much
closer optimum theoretical 2 ln n guarantee, maximum deviation
lower bound indeed less 4.5. Employing MH strategy increases HS size
slightly, yields significantly decreased running times especially smaller bounds B
(where hitters chosen). Still, compared construction time
set systems, Hitting Set computation times negligible, state
explicitly here. change employ multi-stage construction, though.
10.2 Multi-stage Construction
construction complete set system proven infeasible larger road
networks, make use idea multi-stage construction.
k-Hop Cover+PNM. Let us first examine compact set system constructed
using PNM approach initial k-Hop Path Cover. BW network
computed k = 32-Hop Cover C (146, 494 nodes) corresponds ESC solution
B 0 = 8832 (and cruising range 9km flat terrain). PNM used
create final compact set system considering (B B 0 )-violating paths start
nodes C. surprisingly, number paths hit reduces drastically
2715M Table 2 24M Table 3. running times still quite high, though,
approach save exploration peak (therefore stages
654

fiPlacement Loading Stations Electric Vehicles

40
35
runtime ratio

6
quality greedy
quality MH
runtime greedy/runtime MH

5

30
4

25
20

3

15
10

2

approximation factor

45

5
0

1
10

20
30
40
percentage max B

50

60

Figure 11: Performance greedy algorithm multiple hitters variant (MH)
averaged PF, TU BW.
Graph
BW
SG
GE

|C|
146,494
180,455
769,760

B0
8832
10048
15808

CPU
2.2h
6.0h
64.8h

real
35.5m
2.8h
27.6h

# paths
24M
75M
1085M

Table 3: Instance creation (B = 40K) via PNM initial k-hop solution C k = 32.
help much here). Since improvements terms running time using PNM
multi-stage approach cannot expected, let us concentrate naive approach
extracted paths converted CH-representation.
Multi-Stage Hitting Sets. employ following strategy: first, construct k-Hop Cover
C e.g. k = 32 yields initial Hitting Set Lr bound Br .
construct reduced set system consisting (Br1 Br )-violating paths starting
nodes Lr compute Hitting Set Lr1 set system. Here, use naive
Graph
TU
SG
TU
SG
GE
GE
GE

Br


1.8k
4.2k
15.8k
6.2k
15.8k

Bi nested HS
1k,5k,40k
2k,10k,125k
4.8k,40k
12.2k,125k
17.8k,33.8k,125k
8.2k,24.2k,125k
17.8k,25.8k,49.8k,125k

|L|
120
106
116
110
868
728
1212

LB
33
33
33
33
190
190
190

APX
3.64
3.21
3.52
3.33
4.57
3.83
6.38

CPU
9m
404m
8m
242m
908m
1156m
645m

real
3m
106m
2m
63m
265m
322m
209m

Table 4: Multi-stage Hitting Set computation (LB = lower bound, APX = approximation
factor). last two experiments seen detail Table 5.

655

fiFunke, Nusser, & Storandt


4
3
2
1
P

Bi
6.2k
8.2k
24.2k
125k


5
4
3
2
1
P

Bi
15.8k
17.8k
25.8k
49.8k
125k

tSS

363m
249m
467m
1079m
tSS

203m
101m
81m
146m
531m

#paths

34.6M
36.8M
13.5M

#paths

19.7M
17.1M
9.2M
5.6M


tHS
14s
25m
21m
31m
77m
tHS
36s
25m
21m
17m
50m
113m

|Li |
1388k
223k
16k
728

|Li |
770k
208k
38.6k
8445
1212


CPU
14s
388m
270m
498m
1156m
CPU
36s
228m
122m
98m
196m
645m

Table 5: Statistics 4-stage run starting k = 16-Hop Cover (above), 5stage construction initialized k = 32-Hop Cover (below) GE. column
#paths gives number sets hit respective stage. tSS tHS
denote CPU time set system construction Hitting Set computation
respectively.

extraction transform vertex sets CH-paths efficient storage. proceed
iteratively reaching B1 = B final Hitting Set L1 = L. intuitive demand
gap B2 B1 large make sure last Hitting Set
instance still faithfully characterizes original Hitting Set instance. Table 4 shows
results various choices multi-stage parameters. Table 5 give detailed
account intermediate calculations large GE graph. experiments confirm
larger gap B2 B1 is, better quality final Hitting
Set. comes cost expensive last stage, though. contrast
experiments, first two calculations Table 4 conducted without initial
k-Hop Cover. results obtained TU SG suggest initial k-Hop Cover
accelerates calculation maintaining similar Hitting Set size. Furthermore,
APX values remain low even though lower bounds obtained naive way.
Note example graph Germany, priori approximation guarantee
plain greedy algorithm (which feasible due excessive running time space
consumption) 2 ln n 19.5. proves excellent quality Hitting Sets
particular instances. Table 5 shows introducing multiple stages keeps intermediate
set systems rather compact, efficient computation actually possible.

11. Conclusions Future Work
showed model solve natural important facility location problem
E-mobility context, taking radically different approach previous ones avoiding
detours loading stations EVs.
656

fiPlacement Loading Stations Electric Vehicles

naive strategy allows solution small instances hundred
thousand nodes, compact representation schemes underlying set systems
heuristic modifications standard greedy approach make computation solution
even country-sized networks Germany possible. Instance-based lower bounds
certify solution quality close optimal (within factor 4) far
pessimistic theoretically achievable approximation bound. fact remarkable
all, possible compute 4-approximate solution seemingly intractable Hitting
Set problem within hours quadcore desktop PC. computation determined
around 800 locations placing BLSs would establish complete coverage Germany.
framework require metric decides shortest paths
hit identical metric determines paths shortest. fact
factored using function, depending application scenario
used implement hitting criteria (e.g. hop distances risk values).
future work intend examine exact hitting requirement relaxed.
Naturally, necessary always BLS right respective shortest
path, nearby one suffices. could modeled enlarging vertex sets
respective shortest paths surrounding vertices. Hitting Set sizes variant
expected considerably smaller hitting shortest paths directly. Another
direction research take account capacity constraints BLSs (Lam et al.,
2013); particular urban areas certainly necessary provide recharging stations
large number vehicles.

References
Abraham, I., Delling, D., Goldberg, A. V., & Werneck, R. F. (2012). Hierarchical hub
labelings shortest paths. European Symposium Algorithms (ESA), pp. 24
35. Springer.
Artmeier, A., Haselmayr, J., Leucker, M., & Sachenbacher, M. (2010). shortest path
problem revisited: Optimal routing electric vehicles. German Conference
Artificial Intelligence (KI), pp. 309316.
Arz, J., Luxen, D., & Sanders, P. (2013). Transit Node routing reconsidered. International
Symposium Experimental algorithms (SEA), pp. 5566. Springer.
Bast, H., Funke, S., & Matijevic, D. (2009). Ultrafast shortest-path queries via Transit
Nodes. shortest path problem : 9th DIMACS implemenation challenge, Vol. 74
DIMACS Series Discrete Mathematics Theoretical Computer Science, pp.
175192, Providence, RI. AMS.
Berg, M. d., Cheong, O., Kreveld, M. v., & Overmars, M. (2008). Computational Geometry:
Algorithms Applications (3rd ed. edition). Springer-Verlag TELOS, Santa Clara,
CA, USA.
Chvatal, V. (1979). greedy heuristic set-covering problem. Math. Oper. Res.,
4 (3), 233235.
657

fiFunke, Nusser, & Storandt

Delling, D., Goldberg, A. V., Nowatzyk, A., & Werneck, R. F. F. (2011). PHAST: Hardwareaccelerated shortest path trees. International Parallel Distributed Processing
Symposium (IPDPS), pp. 921931.
Dinur, I., & Safra, S. (2004). hardness approximating minimum Vertex Cover.
Annals Mathematics, 162, 2005.
Eisner, J., & Funke, S. (2012). Transit Nodes - lower bounds refined construction.
Algorithm Engineering Experiments (ALENEX).
Funke, S., Nusser, A., & Storandt, S. (2014a). k-Path Covers applications.
International Conference Large Databases (VLDB).
Funke, S., Nusser, A., & Storandt, S. (2014b). Placement loading stations electric
vehicles: detours necessary!. AAAI Conference Artificial Intelligence.
Geisberger, R., Sanders, P., Schultes, D., & Delling, D. (2008). Contraction Hierarchies:
faster simpler hierarchical routing road networks. International Workshop
Experimental Algorithms (WEA), pp. 319333. Springer.
Lam, A., Leung, Y.-W., & Chu, X. (2013). Electric vehicle charging station placement.
International Conference Smart Grid Communications (SmartGridComm), pp.
510515.
NASA (2015). Shuttle Radar Topography Mission. Online. http://www2.jpl.nasa.gov/srtm.
OSM (2015). OpenStreetMap Project. Online. http://www.openstreetmap.org.
Storandt, S., & Funke, S. (2013). Enabling E-Mobility: Facility location battery loading
stations. Conference Artificial Intelligence (AAAI).

658


