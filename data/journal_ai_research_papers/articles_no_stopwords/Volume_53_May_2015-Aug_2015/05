journal artificial intelligence

submitted published

autofolio
automatically configured selector
marius lindauer

lindauer cs uni freiburg de

university freiburg

holger h hoos

hoos cs ubc ca

university british columbia

frank hutter

fh cs uni freiburg de

university freiburg

torsten schaub

torsten cs uni potsdam de

university potsdam
inria rennes

abstract
selection techniques involve choosing set
one expected solve given instance efficiently substantially
improved state art solving many prominent ai sat csp
asp maxsat qbf although several procedures introduced
surprisingly none dominates others across scenarios furthermore
procedures parameters whose optimal values vary across scenarios holds
specifically machine learning techniques form core current procedures hyperparameters therefore successfully apply
benchmark sets two questions need answered select
ii set parameters effectively address
simultaneously automated configuration specifically demonstrate
automatically configure claspfolio implements large variety
different approaches respective parameters single highly parameterized
framework dubbed autofolio allows researchers practitioners across broad range applications exploit combined power many different
methods demonstrate autofolio significantly improve performance
claspfolio scenarios selection library leads
state art selectors scenarios matches state ofthe art performance statistically scenarios compared best single
scenario autofolio achieves average speedup factors


introduction
last decade tremendous progress boolean constraint solving technology
achieved several areas within ai sat biere asp gebser kaufmann
schaub csp tamura taga kitagawa banbara max sat abrame
habet qbf janota klieber marques silva clarke
areas multiple complementary solving strategies exist none dominates others kinds instances fact exploited selection rice methods use characteristics individual probc

ai access foundation rights reserved

filindauer hoos hutter schaub

lem instances called instance features choose promising instance selectors empirically shown improve state art
solving heterogeneous instance sets many prizes competitions instance satzilla xu hutter hoos leyton brown several
categories multiple sat competitions claspfolio gebser kaminski kaufmann
schaub schneider ziller b np track asp competition cphydra omahony hebrard holland nugent osullivan csp
competition isac ansotegui malitsky sellmann partial max sat
crafted industrial track max sat competition aqme pulina
tacchella first stage main track qbf competition
although many approaches proposed years cf smith miles
kotthoff two flexible frameworks allow implementing
comparing existing approaches fair uniform way llama kotthoff
claspfolio hoos lindauer schaub claspfolio
comprehensive encompassing strategies selection systems kadioglu
malitsky sabharwal samulowitz sellmann aspeed hoos kaminski lindauer
schaub claspfolio gebser et al b isac kadioglu malitsky sellmann tierney asp maratea pulina ricca snnap collautti
malitsky mehta osullivan satzilla xu et al xu hutter hoos
leyton brown
figure illustrates performance benefits existing selection strategies realized claspfolio yield across wide range benchmarks selection library bischl et al b observe strengths
weaknesses different scenarios satzilla default
claspfolio performs best overall achieves better performance
approaches considered scenarios aspeed isac yielding
better performance remaining cases
note selection approaches used fixed default parameter
configuration might therefore fall short full performance potential example imputation missing instance features used approaches considered figure use improve performance scenarios e g
asp potassco yields improvements others e g sat rand
satzilla plus mean imputation outperforms single best
factor
generally well known performance many machine learning techniques
depends hyper parameter settings e g case svm kernel kernel hyperparameter soft margin cf bergstra bardenet bengio kegl snoek larochelle
adams thornton hutter hoos leyton brown however hyperparameters machine learning used figure fixed manually
limited experiments therefore performance selection systems
considered could likely improved carefully chosen hyper parameter
settings
facing selection thus answer three salient questions selection use ii set parameters selection
underlying machine learning model effectively iii make


filio

l
isa
ike
c l
ike


p l
ike
sa
tzi
lla

lik
sa
e
tzi
lla

lik
au
e
tof
oli


cla

sp
fo


asp

ee



lik

e

autofolio automatically configured selector

asp potassco
csp
maxsat pms
premarshalling
proteus
qbf
sat hand
sat indu
sat rand
sat
sat hand
sat indu
sat rand

















































































































geo mean

















figure factors selection implemented claspfolio outperformed single best aslib scenarios w r penalized average runtime
par counts timeout times given runtime cutoff
fold cross validation ignoring test instances solved solver
last row shows geometric mean scenarios

best use techniques augmenting pure pre solving schedules xu et al
kadioglu et al instead common manual trial error propose automatically answer questions automated configuration
methods hutter hoos leyton brown stutzle configure flexible frameworks manual error prone potentially biased requires substantial human expert time knowledge introduce fully automatic
unbiased leverages full power broad range methods thus facilitates
easier effective use selection makes techniques accessible
broader community
specifically present autofolio general automatically determining
strong selection method particular dataset configuration
search flexible design space selection methods provide
open source implementation autofolio www ml aad org autofolio
configurator smac hutter hoos leyton brown
selection framework claspfolio hoos et al last column figure previews
obtained autofolio clearly shows significant improvements
claspfolio scenarios aslib


filindauer hoos hutter schaub

instance


portfolio

compute
features

select

solve instance


figure general outline selection

background configuration selection
section briefly introduce standard approaches selection configuration form basis autofolio
selection
figure shows general outline selection rice given
instance first compute cheap instance features numerical characteristics
including simple ones number variables clauses sat instance
complex ones statistics gathered short probing runs actual sat
solver given instance features appropriate
portfolio huberman lukose hogg gomes selman selected
solve given instance overall workflow subject runtime cutoff
one major challenge selection good mapping instance
features general offline selection consider
done training data specifically given portfolio set
instances use training data performance matrix size
feature matrix containing fixed size feature vector training
data learn mapping instance features machine learning
techniques k nn maratea et al g means kadioglu et al random
forests xu et al
related work selection systems
recent successful selection systems include satzilla xu et al xu hutter hoos leyton brown kadioglu et al malitsky sabharwal samulowitz sellmann b isac kadioglu et al ansotegui et al
cshc malitsky sabharwal samulowitz sellmann claspfolio gebser
et al b recent years systems showed excellent performance competitions
sat maxsat asp briefly review following
original version pioneering selection system satzilla xu et al
learned mapping instance features training ridge regression regression model predicts performance given
instance predicted performances satzilla selects
best predicted performance satzillas latest version xu et al uses classification
pair predict better performing one selects
run simple voting predictions thus obtained
cost sensitive training instance pairwise classification


fiautofolio automatically configured selector

weighted performance loss incurred selecting worse two
furthermore satzilla introduced concept pre solving schedules short
instance independent schedule running limited amount time one
pre solving schedule solves given instance satzilla immediately
terminate successfully saving time required compute instance features furthermore
pre solving schedules increase robustness selectors relying
one selected pre solvers solve given instance one drawback
satzilla use grid search possible pre solving schedules three
pre solvers schedule considered satzilla performs subset selection
trains classification require substantial amounts time
experiments cpu days
kadioglu et al malitsky et al b uses k nearest neighbour
select given instance solved determines
set similar training instances instance feature space selects
best performance instance set performance k nn
improved distance weighting weighting performance
instance instances distance given instance clusteringbased adaptive neighbourhood size adjust size neighbourhood different
areas feature space furthermore uses mixed integer programming compute
pre solving schedules efficiently satzilla
isac kadioglu et al clusters instances instance feature space
g means stores cluster centre well best performing
cluster instance determines nearest cluster centre
nn selects associated
cost sensitive hierarchical clustering system cshc malitsky et al
partitions feature space clusters instead isacs unsupervised clustering
creates partitioning supervised top fashion much decision
regression tree starting instances entire feature space
root tree recursively splits instances associated node two child
nodes choosing split along single feature value performance
best performing child node optimized cost sensitive supervised
trees closely resembles cost sensitive random forests satzilla
difference contrast satzillas pairwise voting builds
single model
last least claspfolio gebser et al b predecessor claspfolio use describe section contrast flexible framework claspfolio claspfolio inspired earlier version satzilla
uses regression different machine learning method support
vector regression instead ridge regression
systems selection combine extend techniques example combining regression clustering approaches collautti et al
selecting portfolios yun epstein lindauer hoos hutter
schedules amadini gabbrielli mauro instead single additional information refer interested reader two recent surveys
selection smith miles kotthoff


filindauer hoos hutter schaub

feature
generator

training instances



instance features
groups


performance
aslib scenario

feature
preprocessing

performance
preprocessing
train
selection model



performance estimation

pre solving schedule
aspeed

selection

scheduling
offline training

test instance

compute features

select

failed
run backup


run pre solving
schedule
successful
run selected

online solving

figure general workflow claspfolio objects instances
shown rectangles activities depicted rectangles rounded corners
activities related selection shown red activities related
schedules yellow
selection framework claspfolio
explain selection framework claspfolio hoos et al lindauer hoos schaub c detail since provides basis
concrete implementation general autofolio used experiments
claspfolio framework implements idea selection flexible
general way provides general view individual components
selectors implements many different selection approaches associated
techniques therefore claspfolio natural candidate serve basis
autofolio
figure shows workflow claspfolio divided aslib scenario
input claspfolio offline training selection scheduling online solving
instance
aslib scenario input claspfolio reads selection scenario supporting format selection library aslib consists
performance matrix instance features groups instance features optional information cross validation splits ground truth
note according definition aslib feature group enables list instance features
computed common block feature computation code jointly incur cost
running code



fiautofolio automatically configured selector

instances example whether sat instance satisfiable unsatisfiable
full specification aslib format refer interested reader aslib net
offline training selection given scenario training data claspfolio
pre processes instance features example normalization feature imputation
performance data example log transformation machine learning
techniques claspfolio learns selection model maps instance features

offline training scheduling compute efficient pre solving schedule claspfolio first estimates performance selection module internal
cross validation training data arrow performance estimation
claspfolio computes timeout minimal pre solving schedule answer set
programming aspeed hoos et al assigning potentially
zero length time slice overall runtime budget estimation selection
module necessary compute runtime budget pre solving schedule
selection module performs well pre solving schedule may empty
pre solving schedule cannot perform better perfect predictor predictor selects best solver contrast prediction performs
poorly example non informative instance features pre solving
schedule may allocated complete time budget selection module
ignored
online solving solving workflow follows feature generator computes
instance features instance solved computation fails
example time memory constraints feature imputation
strategy selected backup solver e single best performing solver
offline training run instance otherwise previously trained selection
model uses instance features select expected perform well
pre solving schedule available schedule runs instance feature
computation selection depending parameter setting
claspfolio latter version shown figure former
advantage time compute instance features saved instance
solved pre solving latter advantage chosen
selector removed pre solving schedule prevent running twice
list techniques implemented modules given section
configuration
figure shows general outline configuration methods given parameterized possible parameter settings c set training instances
performance metric c r objective configuration
parameter configuration c c minimizes across instances
prominent examples performance metric optimized runtime
solution quality misclassification cost target achieves configuration


filindauer hoos hutter schaub

instances


configuration space c

select c c

assess c


returns
best found
configuration c

return performance
configuration task

figure general outline configuration
procedure short configurator iteratively evaluates performance parameter configurations c c running one instances uses
decide next configurations evaluate given budget configuration process exhausted configurator returns best known parameter
configuration found
n parameters p pn respective domains dn parameter
configuration space c dn cross product domains
parameter configuration c c assigns value parameter several types
parameters including real valued integer valued categorical ones finite
unordered domain example choice different machine learning
furthermore configuration spaces structured specifically parameter pi
conditional another parameter pj value pi relevant parent
parameter pj set specific value example case pj categorical
choice machine learning pi sub parameter one
pi active pj chooses parameterizes
date four general configuration procedures paramils hutter et al
gga ansotegui sellmann tierney irace lopez ibanez dubois lacoste
stutzle birattari smac hutter et al principle could use
configurator general autofolio practice
found smac often yield better paramils gga hutter et al
hutter lindauer balint bayless hoos leyton brown lindauer hoos hutter
schaub b thus use basis concrete implementation autofolio
discussed following describe smac detail
smac sequential model configuration
sequential model configuration method smac hutter et al
hutter hoos leyton brown uses regression approximate performance metric c r hutter xu hoos leyton brown follows
general configuration workflow alternating evaluations
parameter configurations instances decision phases configurator uses
data gathered far select configurations evaluate next instances
smacs decision phases involve constructing regression model c r
data observed far model well uncertainty
predictions select promising configurations try next step automatically


fiautofolio automatically configured selector

trades exploration evaluating regions configuration space model
uncertain exploitation evaluating configurations predicted perform well
order save time evaluating configurations cnew c smac first evaluates
single instance additional evaluations carried doubling
schedule evaluations date cnew appears outperform smacs best
known configuration c evaluated number runs cnew c
cnew still performs better smac updates best known configuration c cnew
previous applications configuration
configuration demonstrated effective optimizing wide range including sat formal verification hutter babic
hoos hu timetabling chiarandini fawcett hoos multi objective optimization lopez ibanez stutzle mixed integer programming hutter hoos
leyton brown ai vallati fawcett gerevini hoos saetti generation heuristics mascia lopez ibanez dubois lacoste stutzle occupancy
scheduling lim van den briel thiebaux backhaus bent kidney exchange
matching dickerson sandholm important special case configuration hyperparameter optimization machine learning bergstra et al snoek
et al eggensperger et al
previous line work related application configuration
selection auto weka thornton et al auto weka addresses combined
selecting machine learning weka framework hall frank
holmes pfahringer reutemann witten optimizing hyperparameters
autofolio needs solve combined selection hyperparameter
optimization particular needs formulations
considers regression classification clustering important design choices
autofolio pre solving parameters well instance features use
autofolio applies one meta solving strategy configuration another one
selection previous application meta solving strategy selfconfiguration paramils hutter et al however case self configuration
yielded modest improvement default configuration paramils whereas
achieve substantial improvements default configuration claspfolio
configuration selection previously combined
different way configuration good parameter settings highly parameterized selection choose per instance
basis two systems implement date isac kadioglu et al
hydra xu hoos leyton brown isac first clusters training instances
homogeneous subsets uses configurator good solver parameterization
cluster uses selector choose parameterizations hydra
iteratively adds solver parameterizations initially empty portfolio selector
step tasking configurator solver parameterization improves
current portfolio


filindauer hoos hutter schaub

training data

test data

fold cross validation meta instances

figure split instance sets selection scenarios cross validation performed
inside configuration process test set withheld evaluating configured selector

configuration selectors
present autofolio configurators automatically
customize flexible selection frameworks specific scenarios apply
configuration context need specify parameterized selector
configuration space well performance metric judge performance
formal statement
judge performance selection system scenario
crucial partition given set instances training test set use
system training set train selector evaluate test
set instances training set instead used evaluate performance perfect
system could simply memorize best solver instance without learning anything
useful instances standard notion training test split
machine learning
scenario includes instances performance feature
data loss function l r minimized example
runtime solution cost data split disjoint sets dtrain dtest let
dtrain denote selector learned system trained data
dtrain performance p average performance
selects instances test data set dtest
p

x


l dtrain
dtest



idtest

likewise evaluate performance system sc parameterized
configuration c p sc however perform configuration simply
minimizing p sc respect c c would amount peeking test set
many times even though would yield configuration c low p sc could
expected perform well instances contained dtest instead order
obtain unbiased evaluation configured selectors performance end need
hold back test set instances touched configuration process
order still able optimize parameters without access test set standard
solution machine learning partition training set k cross validation
folds overall use instance set selection scenario illustrated figure
split full set instances training test set ii training data


fiautofolio automatically configured selector

autofolio automated configuration selector
input configurator ac selector configuration space c
training data scenario performance feature
matrix number folds k



randomly split k
start ac k meta instances average loss across
meta instances performance metric target
configuration space c
configuration budget remaining
ac selects configuration c c meta instance n k
train sc n assess loss n return loss ac



return best configuration c found ac







partitioned k folds experiments use k used
follows

k
let dtrain dtrain random partition training set dtrain crossvalidation performance cv sc sc training set


k
x
x




j
cv sc
l sc dtrain dtrain

j
k
dtrain
j
j
idtrain

end optimize performance cv sc determining configuration c c
selector good cross validation performance
c arg min cv sc



cc

evaluate c training selector sc entire training data evaluating
p sc dtest defined equation
j
following thornton et al use k folds dtrain one instance within
configuration process order avoid confusion instances
base level instances e g sat instances solved inside instance
refer instance meta instance note many configurators focusedils hutter et al irace lopez ibanez et al smac hutter et al
discard configurations perform poorly subset meta instances
therefore evaluate k cross validation folds every configuration
saves time lets us evaluate configurations within configuration
budget considerations outlines process configure
selector autofolio
since instances scenario could split configuration testing sets
many different ways one split necessarily yield representative performance
estimate therefore yield confident evaluation perform additional outer cross validation given aslib scenario instead single training test


filindauer hoos hutter schaub

split consider multiple training test splits configure selector training set assess final configurations respective test data sets average
note however practical application one would single training set would still split k cross validation splits internally single test
set
configuration space selectors
existing selectors implement one specific selection
one specific machine learning technique note however selection approaches
least implicitly admit flexibility particular could used range
machine learning techniques example satzilla xu et al uses voting
pairwise performance predictions obtained cost sensitive random forest classifiers
principle could use cost sensitive binary classifiers instead random forests
observation consider hierarchically structured configuration space
top level parameter determines overall selection
example regression used satzilla xu et al k nn
used asp maratea et al selection approaches
choose different regression techniques example ridge regression lasso
regression support vector regression random forest regression machine
learning techniques configured hyper parameters
besides selection techniques used preprocessing training data example z score feature normalization feature preprocessing step
log transformation runtime data performance preprocessing step preprocessing
techniques configured independently selection therefore
handled top level parameters
use third group parameters control pre solving schedules kadioglu et al
xu et al including parameters determine time budget pre solving
number pre solvers considered pre solving techniques freely combined
selection approaches needed added top level binary
parameter completely activates deactivates use pre solvers presolving parameters conditional switch
implemented choices claspfolio system described section
figure illustrates complete configuration space thus obtained current version
use concrete implementation autofolio covers six
different selection approaches
hierarchical regression inspired satzilla xu et al learns regression
model instace selects best
predicted performance
multiclass classification inspired llama kotthoff learns classification
model directly selects features instance
pairwise classification inspired satzilla xu et al learns cost sensitive
classification model pairs instance evaluates selects votes


fiautofolio automatically configured selector

transformation

pre solving

yes

instance
weighting

contribution
filtering

normalization



imputation

p pca

performance preprocessing

max feature time

feature preprocessing


multi class
classification

pairwise
classification

c svm
gamma svm

hierarchical
regression

clustering

snnap

k k nn

max cluste r

k
best n

random
forest

svm

gradient
boosting

random
forest

svm

gradient
boosting

ridge

lasso

svr

random
forest

ridge

lasso

svr

random
forest





























k means

gaussian
mixture

spectral
clustering

figure configuration space claspfolio including categorial parameters
integer valued parameters continous parameters parameters double boxes
top level parameters single boxes represent selection approaches classes
machine learning techniques dashed boxes machine learning techniques dotted boxes
indicate number low level parameters parameter boxes used default configuration filled grey
clustering inspired isac kadioglu et al determines subsets similar training
instances feature space best subsets
instance determines nearest cluster center selects associated
k nn inspired kadioglu et al asp maratea et al determines set similar training instances feature space given instance
selects best performance instance set
snnap inspired collautti et al predicts performance
regression uses information k nn predicted
performance space
approaches claspfolio covers least three different machine
learning techniques appropriate listed figure example pairwise
classification random forests svms gradient boosting
hyper parameters respectively preprocessing strategies supports
performance preprocessing
transformation applies log xu et al z score normalization collautti
et al performance data
instance weighting weights instances impact performance
selector instances get low weight available perform equally high weight differ substantially
performance kotthoff gent miguel
contribution filtering removes less specified contribution performance oracle known virtual best solver xu
et al form subset selection



filindauer hoos hutter schaub

feature preprocessing
normalization transforms instance features min max z score decimalpoint log scheme application pca
p pca applies principal component analysis features selects top p
principal components p parameter pca activated
imputation fills missing feature values median average frequent
value feature imputation deactivated feature vector incomplete
given instance single best solver statically selected
max feature time limits amount time spent collect features ensures
much time spent feature computation however
incomplete features missing values get imputed imputation
active
chose default configuration claspfolio used initialize
configurator satzilla configuration since shown effective
sat xu et al asp hoos et al since overall high performance
evident figure configuration uses pairwise cost sensitive random
forest classifiers z score feature normalization pre solving schedule three
pre solvers since assume prior knowledge selection scenarios
default configuration uses default instance features defined scenario designers
chose claspfolio basis autofolio designed
flexible known perform well note principle selectors
satzilla xu et al isac kadioglu et al snnap collautti et al
llama kotthoff could generalized similar way
addition claspfolio selection framework current
version autofolio employs configurator smac described section
selection framework configurator exchangeable chose
smac performed best across configuration studied
far principle configurators could used gga ansotegui et al
irace lopez ibanez et al preliminary lindauer et al b
showed paramils optimize performance claspfolio
inferior smac one scenario performance advantage small

empirical performance analysis
section empirically analyze performance autofolio
experiments autofolio employs claspfolio well known machine learning package scikit learn pedregosa et al version configurator smac version ran autofolio thirteen selection
scenarios make selection library bischl et al b
performance claspfolio compared state art selectors
found aslib net
note experiments aslib scenarios claspfolio selectors
need perform actual runs feature generators aslib scenarios already



fiautofolio automatically configured selector

shown table scenarios comprise wide variety hard combinatorial
includes performance data range solvers
set instances instance features organized feature groups associated
costs scenarios consider performance objective runtime minimization
high level scenarios comprise following data
asp potassco runtimes different parameter configurations asp solver
clasp broad range asp instances collected potassco group gebser
kaminski kaufmann ostrowski schaub schneider
csp runtimes single solver two different configurations
without lazy learning gent jefferson kotthoff miguel moore nightingale petrie
collection csp instances
maxsat pms runtime data maxsat evaluation
premarshalling runtimes ida solvers premarshalling real world time sensitive pre marshalling instances
operations literature
proteus runtimes different csp sat solvers range csp
instances preprocessed csp sat translation techniques
qbf runtime data qbf solvers aqme system pulina
tacchella qbf instances qbf solver evaluation
sat hand sat indu sat rand runtime data respective tracks sat competition
sat sat hand sat indu sat rand runtimes sat solvers broad range sat instances used train
selection system satzilla xu hutter shen hoos leyton brown b
respective tracks sat challenge
refer bischl et al b details scenarios including baseline
experiments showing selection applied effectively scenarios point common library allows us compare autofolio
fair uniform way selection methods however price pay
uniform comparison necessarily consider current state art
solving respective since aslib data collected
several years ago furthermore note current version aslib consists
deterministic performance data expect future versions consider scenarios stochastic performance data multiple runs per instance
different pseudo random number seeds autofolio applied stochastic scenarios straightforward manner optimizing mean performance across runs
instance
contain necessary performance data feature vectors order allow fair comparison
selectors data without confounding factor due hardware platform
used run experiments



filindauer hoos hutter schaub

scenario
asp potassco
csp
maxsat pms
premarshalling
proteus
qbf
sat hand
sat indu
sat rand
sat
sat hand
sat indu
sat rand
















u f fg
























































tc














reference
hoos et al
gent et al
malitsky et al
tierney malitsky
hurley et al
pulina tacchella
xu et al
xu et al
xu et al
xu et al b
xu et al b
xu et al b
xu et al b

table overview selection scenarios selection library
showing number instances number unsolvable instances u u number
number features f number feature groups fg cutoff time tc
literature reference

configuration setup
following standard practice hutter et al performed multiple case
independent runs configurator smac scenario selected
configuration claspfolio best performance training data configurator run allocated total time budget cpu days single run claspfolio
limited cpu hour runsolver tool roussel performance
metric used penalized average runtime penalty factor par counts
timeout times given runtime cutoff runtime cutoffs differ aslib
scenarios study optimization par influenced metrics
number timeouts time required evaluate single configuration claspfolio varied cpu seconds cpu hour reference machine see
mostly depending difficulty optimizing pre solving schedules
obtain robust estimate autofolios performance used fold outer crossvalidation given specific aslib scenarios configured claspfolio ten
times scenario different training test splits therefore total performed
configuration runs cpu days three different configuration spaces
see section thirteen aslib benchmarks requiring total
cpu days cpu years note although thorough evaluation autofolio
required substantial amounts computation applying single benchmark set
given training test split would require independent configuration runs two
days could thus performed weekend modern desktop machine
furthermore applying autofolio selection benchmark set cheap
comparison collecting data benchmark set instance collect


fiautofolio automatically configured selector

autofoliovote
autofolio
autofolioext

categorical

integer

real

conditionals

configurations





















table overview configuration spaces number categorical integer valued
real valued parameters number conditionals estimation number
configurations ignoring real valued parameters number categorical values
varies scenarios depending number features feature
groups
performance data aslib scenarios required cpu days
asp potassco cpu days proteus average
cpu days times much configuration budget autofolio
performed experiments bwunicluster karlsruhe whose machines
equipped two octa core intel xeon e ghz mb cache cpus
gb ram running hat enterprise linux note however runtimes
selected feature computations part aslib scenarios
depend hardware used
different configuration spaces
mentioned earlier autofolio used optimize performance single selectors satzilla multi selectors llama
claspfolio much larger configuration spaces see figure therefore studied three different parameter spaces autofolio claspfolio
autofolio considers configuration space described section additionally
adds binary parameters enable disable feature groups defined
specific selection scenario subset selection done
heuristic marginal contribution oracle performance
autofoliovote considers subset configuration space autofolio
fixes selection pairwise classification voting scheme
autofolioext considers configuration space autofolio instead parameters feature group added binary parameters instance feature
selectable increases number parameters substantially example adds additional parameters proteus
scenario

selected feature groups empty feature set claspfolio statically select single
best training data



filindauer hoos hutter schaub

scenario
asp potassco
csp
maxsat pms
premarshalling
proteus
qbf
sat hand
sat indu
sat rand
sat
sat hand
sat indu
sat rand

default
par tos




























autofoliovote
par
tos




























autofolio
par
tos




























autofolioext
par
tos




























table comparing different configuration spaces autofolio test performance best performance shown bold face indicate performance significantly better default configuration claspfolio significance levels
respectively according one sided permutation test
permutations performances values according permutation test significantly worse best performance given scenario marked


fixed selection autofoliovote pairwise classification
voting scheme since satzilla promising single experiments see e g figure hand extended configuration space
autofolioext obtained adding subset selection feature selection
configuration task feature selection well known improve many machine learning
often small subset instance features necessary predict runtime
hutter hoos leyton brown
note configuration autofoliovote found autofolio
configuration autofolio part autofolioext autofoliovote
autofolio autofolioext table gives overview configuration space sizes
analysis configuration process
table compare performance default configuration claspfolio
namely satzilla configurations optimized autofoliovote
autofolio autofolioext selection scenarios autofoliovote improved
performance test data comparison default configuration claspfolio
autofolio improved one scenario autofolioext three scenarios
performance improvements test data statistically significant
ten seven scenarios autofoliovote nine seven autofolio
five four autofolioext respectively according one sided permutation test
permutations


fiautofolio automatically configured selector

aslib scenarios configuration least one configuration
spaces considered led statistically significant improvements discuss
remaining two scenarios asp potassco csp asp potassco
performance improved substantially training data autofolio reduced par
score transfer test data none differences
test performances statistically significant note default configuration
claspfolio manually optimized scenario hoos et al
autofolio found similar configurations similar performance csp autofolio variants improved default insignificantly
note hard improve performance substantially benchmark
contains two
premarshalling autofolio solved additional instances reduced par nevertheless performance difference weakly
significant due strong constraints pre solving schedule
default configuration claspfolio solvers seconds
extensive pre solving schedules decreased number timeouts premarshalling introduced overhead many instances
scenario making harder autofolio achieve significant performance improvements scatter plot figure shows autofolio produced fewer timeouts
default claspfolio autofolio required higher runtime instances points diagonal similarly autofolio solved lot instances
proteus qbf autofolio higher runtime
instances see figure c b however number timeouts improved much proteus performance improvement
statistically significant finally sat example clear cut
case autofolio improved performance claspfolio instances
substantially reduced number timeouts see figure
overall autofoliovote performed best experiments followed autofolio
distance autofolioext respect statistical significance autofoliovote autofolio performed quite similarly former better three times
latter better suspect added flexibility
autofolio compared autofoliovote pays configuration budget
large enough evaluate enough configurations effectively search larger space
case three sat scenarios autofolio reached best
performance scenarios contain relatively instances making
evaluation claspfolio quite fast allowing smac evaluate configurations within days contrast evaluation configuration largest aslib
scenario proteus cost hour smac evaluated
configurations enough explore design space autofolio accordingly performance autofolioext proteus improved slightly
comparison default configuration autofoliovote made progress faster
performed statistically significantly better autofolio therefore believe
autofolio good choice evaluate many configurations
scenario small large configuration budget available hand


filindauer hoos hutter schaub

x

x

x

x

x

x

x

x




x

x




x

configured

configured

x





















default













default





premarshalling number timeouts b qbf number timeouts reduced
reduced default configured
default configured
x

x

x

x



x

x

x
x


x



x



x



configured

configured

x


















default













default





c proteus number timeouts
sat number timeouts reduced
reduced default configured default configured

figure scatter plots comparing per instance performance default claspfolio
satzilla autofolio left premarshalling autofolio improved penalized average runtime par reducing number timeouts
cost increased runtimes many instances right sat autofolio
improved performance instances reduced number timeouts

autofoliovote used larger scenarios configuration budget
quite small
figure shows progress configuration process terms training performance
function time sat hand proteus scenarios


fiautofolio automatically configured selector



performance

par





autofolio
autofolio ext
autofolio vote











time




autofolio
autofolio ext
autofolio vote













sat hand






time







b proteus

figure training par performance best configuration time line
shows median folds outer cross validation filled area indicates
performance quantile

fewest configuration evaluations performed fixed configuration budget
scenarios large configuration space autofolioext resulted period
stagnation performance improved proteus performance started
improve near end configuration budget contrast autofolio
autofoliovote performed quite similarly scenarios autofoliovote
somewhat faster make progress note logarithmic time axis surprisingly us
different selection approaches chosen autofolio autofoliovote
restricted configuration space autofoliovote choose pairwise classification
voting scheme autofolio used approaches outer folds
scenarios regression times two scenarios clustering times
resp snnap times resp
figure estimate influence configuration budget
performance final selector example halve configuration time
budget day penalized average runtime training set increases

choices lead good performance
analyze choices important autofolio applied two complementary methods assessing parameter importance configuration spaces
functional anova hutter hoos leyton brown b global measure
parameter importance ablation analysis fawcett hoos b local
measure high level overview parameters autofolio refer back
section full details including default values ranges parameters given
online appendix available www ml aad org autofolio


filindauer hoos hutter schaub

functional anova fanova
functional anova fanova see e g sobol general method partitioning
variance function components corresponding subsets arguments hutter
et al demonstrated technique applied efficiently quantify
importance parameters use performance data
collected configuration process purpose without requiring
executions therefore computationally efficient experiments required
minutes overall fit empirical performance model hutter xu hoos
leyton brown c r measured performance data
used predict performance arbitrary configurations instances study
parameter importance model fitting model fanova marginalizes
across instances
x
f c

c


ii

computes variance function f across entire configuration space c
partitions variance additive components due subset
parameters particular interest unary subsets often explain substantial part
variance tend easiest interpret important note fanova
partitions variance f entire configuration space provides
global measure parameter importance takes account many poorly performing
configurations
use fanova context study aslib scenario merged
performance data independent smac runs removed data points reported timeout resulted empty feature set latter
case claspfolio statically selects single best solver causing parameters
become unimportant performance claspfolio
brevity report scenario sat table shows ten
important parameters autofolio autofolioext scenario
configuration spaces maximal time spent compute instance features max featuretime turned important parameter parameter important
setting small features even none disabling
selection mechanism setting large lead increased overhead feature
computation see figure
second important parameter autofolio marginal contribution
filtering heuristic subset selection subset selection especially important scenarios sat solving include many sat
solvers performance solvers often highly correlated xu et al
autofolioext contribution filtering heuristic less important
configuration space includes binary parameters individual allowing
configurator smac directly perform subset selection context including mphasesatm marchrw special importance solver mphasesatm
single best sat one highest marginal contributions
observed timeouts particular configuration larger data sets clustering
spectral clustering



fiautofolio automatically configured selector

parameter

main effect

max feature time
contr filter

feature step cg
pre solving
impute
perf transformation
time pre solving
feature normalization
pre solving max solver

parameter












main effect

max feature time

pre solving
contr filter
mphasesatm
imputation
f marchrw
time pre solving
pre solving sec mode
perf transformation

autofolio












b autofolioext

table average main effects stdev outer cross validation splits ten
important claspfolio parameters sat according fanova

marginal par scores








max feat time sec

figure marginal performance predictions parameter max feature time data
one outer fold configuration space autofolio blue line indicates mean
predicted marginal performance red area standard deviation
oracle similarly marchrw high marginal contribution
whose performance highly correlated another solver see exploratory
data analysis bischl et al b
note analysis determines global parameter importance
respect entire parameter space example importance maximal feature
computation time mostly high crucial change improve
performance claspfolio configuration space contains settings
drastically worsen performance gain complementary insights parameters changed improve performance next performed ablation analysis
note fanova used yield local analysis parameter importance partitioning variance performance high performance regions given configuration space hutter


















par

par

lindauer hoos hutter schaub
















ute ime lter lize sp ans opt cg eaf aps sic res jois
impture ontr finorma stepsnce trspeed steps ples pl ls eps ba featups lob

c
ure ature n ste ure st f max ste
fe
featperfor
fe f mi atur feat ing r eatu
max
vot f
ng r fe



v



e e e p f r c
cg put tim op aliz ran joi sap lea ure filte asi
tep im ature speed normance teps lobps ls stepmples x featcontr teps b

e
te


ur
fe
form e atu n f eature
feat
max
per featu featur fge rf mioting r
f
v
n
voti

nd outer fold

b th outer fold

figure ablation paths two outer folds sat important
parameter impute feature step cg smaller effect b feature step cg
important parameter impute effect performance

ablation analysis
ablation analysis provides answer question changes parameter values
one configuration another caused biggest improvement performance
iteratively changing parameter value largest impact performance
path two given configurations e g default configuration
optimized configuration unlike fanova ablation analysis attempt
summarize parameter importance across entire configuration space focusses locally
paths configurations interest obtained ablation analysis
therefore complementary fanova unfortunately ablation costly
since requires runs assess performance configurations path
two given configurations autofolio experiments sat
allocated time budget days maximum wall clock time permitted jobs
cluster ablation outer cross validation folds within
budget obtained
ablation indicate feature step cg boolean parameter enables
disables computation clause graph features single important parameter
change claspfolio default default feature step cg activated
turns clause graph features often expensive compute within
time allow feature computation therefore indeed good decision
configuration procedure deactivate optional feature computation step according
ablation done outer cross validation folds average
folds responsible performance improvements achieved
et al since used ablation analysis study parameter importance
locally



fiautofolio automatically configured selector

configuration standard deviation contrast seen fanova
feature step cg quite unimportant globally main effect second
important parameter change activation feature imputation impute
average responsible overall performance improvement standard
deviation made outer cross validation folds analyzed however
impute effect performance feature step cg deactivated
impute changed ablation path case ablation
paths e g see figure hence impute impact performance
paths e g see figure b two parameters dependent effects since imputation
particularly important clause graph features computed features time
many large instances thus require imputation
globally important parameter according fanova max feature time
found rather unimportant change default value parameter
changed default optimized configuration outer folds sat
since default value already good average overall performance improvement could attributed change note along
ablation path max feature time never flipped value resulted worse performance default configuration many poorly performing values
exist explain globally high importance parameter
comparison selectors
table compare autofolio satzilla xu et al snnap version collautti et al isac implementation snnap kadioglu
et al note isac snnap pure selectors whereas
satzilla claspfolio additionally use pre solver schedules furthermore
added nave randsel simulating uninformed user selects uniformly random snnap isac satzilla overall autofolio performed best scenarios statistically indistinguishable
best system scenarios according one sided permutation test
permutations significance level therefore autofolio system
achieves state art performance scenarios
satzilla performed second best yielded statistically significantly worse performance autofolio scenarios even though statistically significant
satzilla performed slightly better autofolio scenarios reason
large standard deviation arises fact folds parameter change actually
responsible performance difference folds change alone would
sufficed achieve better performance optimized configuration
sum relative performance subset parameter improvements limited since
computed relative difference default optimized configuration
ablation paths parameter changes lead better performance final optimized
configuration parameter changed worsened performance
alexandre frechette current main developer satzilla provided internal implementation
satzilla version b count cheap feat longer limited sat
state art selectors kadioglu et al cshc malitsky et al
publicly available training procedures therefore unable train
scenarios



filindauer hoos hutter schaub

asp potassco
csp
maxsat pms
premarshalling
proteus
qbf
sat hand
sat indu
sat rand
sat
sat hand
sat indu
sat rand

oracle

sb

snnap

isac

























































satzilla randsel autofolio










































table
performance comparison autofolio snnap isac
satzilla well single best solver sb selected par training
set baseline oracle known virtual best solver bound optimal performance selector par scores averaged outer
cross validation folds instances solved solver removed test set
avoid artificially inflating par scores randsel column shows expected
performance picking uniformly random one snnap isac satzilla
best performance shown bold face performance values statistically significantly better best performing system given scenario according
one sided permutation test permutations significance level
marked
might satzilla performs extensive search determine best combination pre solving schedule grid search subset iterated local search
trained selection model
note order compensate cpu days spent well performing
configuration autofolio compared simply single best solver average
across scenarios autofolio would consecutively solve instances cpu
days standard deviation less two times configuration budget
although autofolio improved substantially single best solver sb
scenarios speedup factor sat rand still gap
oracle performance known virtual best solver sat community
gap could closed least two ways larger configuration budget
autofolio ii developing better instance features basis
selection methods

conclusions
presented autofolio best knowledge first automatically configuring selectors concrete realization
highly parameterized selection framework claspfolio showed
state art configurators selectors customized


fiautofolio automatically configured selector

robustly achieve peak performance across range selection scenarios
resulting performs significantly sometimes substantially better manually configured selectors applied box previously unseen
selection scenarios
comprehensive experiments selection scenarios different
domains sat max sat csp asp qbf container pre marshalling make
selection library aslib concrete realization autofolio outperformed
best single solver selection benchmark factors geometric
average terms par scores overall autofolio established improved stateof art performance scenarios performed par previous
state art approaches scenarios overall clearly yielded robust
performance across diverse set benchmarks
studied effect different configuration spaces showed
medium size configuration space autofolio lead state art performance
configuration budget allows evaluation sufficiently many configurations
contrast selection scenario large terms number
instances configuration budget limited configuration constrained
space used autofoliovote typically leads better performance
performance autofoliovote independently verified icon challenge
selection kotthoff evaluated different systems
small configuration budget cpu hours respect three metrics par score
number instances solved misclassification penalty throughout
metric optimized autofolio par score autofolio ranked first
respect metric ranked first respect number instances solved
second respect misclassification penalty leading overall second place
future work plan investigate potential gains larger configuration
spaces including feature subset selection used effectively
end would study performance larger configuration budgets
allow configurator assess configurations ii evaluate configurators irace lopez ibanez et al gga ansotegui et al iii
extend configuration space autofolio implementing selection
approaches e g cshc malitsky et al iv shrink larger configuration space
analysis parameter importance fanova hutter et al
ablation fawcett hoos b allowing configurator focus important parameters v automatically select pre configured selectors
features given selection scenario improve performance
starting automatic configuration configurations thus selected feurer springenberg hutter another promising avenue reducing computational cost
would pre select features instances
techniques proposed hoos et al collaborative filtering
misir sebag finally plan investigate extent autofolio
configure selection systems selecting parallel portfolios lindauer et al
exploit increasing availability parallel computing resources
overall believe automated configuration selection systems improves performance versatility systems across broad range application


filindauer hoos hutter schaub

domains autofolio facilitates future improvements making easier realize assess performance potential inherent design choices
components selection system open source implementation
autofolio available www ml aad org autofolio

acknowledgements
lindauer supported dfg german foundation emmy
noether grant hu project scha h hoos nserc discovery
grant f hutter dfg emmy noether grant hu schaub
dfg project scha respectively work performed
computational resource bwunicluster funded ministry science arts
universities state baden wurttemberg germany within framework
program bwhpc

references
abrame habet extension learning max sat endriss u
leite j eds proceedings th european starting ai researcher symposium
stairs vol frontiers artificial intelligence applications pp
ios press
amadini r gabbrielli mauro j sunny lazy portfolio
constraint solving theory practice logic programming
ansotegui c malitsky sellmann maxsat improved instance specific
configuration brodley c stone p eds proceedings twentyeighth national conference artificial intelligence aaai pp aaai
press
ansotegui c sellmann tierney k gender genetic
automatic configuration gent ed proceedings
fifteenth international conference principles practice constraint programming cp vol lecture notes computer science pp springerverlag
bergstra j bardenet r bengio kegl b hyper parameter
optimization shawe taylor j zemel r bartlett p pereira f weinberger
k eds proceedings th international conference advances neural
information processing systems nips pp
biere lingeling plingeling treengeling entering sat competition
balint belov heule jarvisalo eds proceedings sat competition solver benchmark descriptions vol b department
computer science series publications b pp university helsinki
bischl b kerschke p kotthoff l lindauer malitsky frechette hoos h
hutter f leyton brown k tierney k vanschoren j www aslib net


fiautofolio automatically configured selector

bischl b kerschke p kotthoff l lindauer malitsky frechette hoos
h hutter f leyton brown k tierney k vanschoren j b aslib
benchmark library selection computing repository corr
abs
chiarandini fawcett c hoos h modular multiphase heuristic solver
post enrolment course timetabling proceedings seventh international
conference practice theorysy automated timetabling patat pp

collautti malitsky mehta osullivan b snnap solver
nearest neighbor portfolios blockeel h kersting k nijssen
zelezny f eds machine learning knowledge discovery databases
ecml pkdd vol lecture notes computer science pp
springer verlag
dickerson j sandholm futurematch combining human value judgments
machine learning match dynamic environments bonet b koenig
eds proceedings twenty nineth national conference artificial intelligence aaai pp aaai press
eggensperger k feurer hutter f bergstra j snoek j hoos h leyton brown
k towards empirical foundation assessing bayesian optimization
hyperparameters nips workshop bayesian optimization theory practice
fawcett c hoos h www cs ubc ca labs beta projects ablation
fawcett c hoos h b analysing differences configurations
ablation journal heuristics
feurer springenberg hutter f initializing bayesian hyperparameter
optimization via meta learning bonet b koenig eds proceedings
twenty nineth national conference artificial intelligence aaai pp
aaai press
gebser kaminski r kaufmann b ostrowski schaub schneider
potassco potsdam answer set solving collection ai communications

gebser kaminski r kaufmann b schaub schneider ziller b
portfolio solver answer set programming preliminary report delgrande j
faber w eds proceedings eleventh international conference logic
programming nonmonotonic reasoning lpnmr vol lecture notes
computer science pp springer verlag
gebser kaufmann b schaub conflict driven answer set solving
theory practice artificial intelligence
gent jefferson c kotthoff l miguel moore n nightingale p petrie k
learning use lazy learning constraint solving coelho h studer
r wooldridge eds proceedings nineteenth european conference
artificial intelligence ecai pp ios press


filindauer hoos hutter schaub

gomes c selman b portfolios artificial intelligence

hall frank e holmes g pfahringer b reutemann p witten
weka data mining software update sigkdd explorations
hoos h kaminski r lindauer schaub aspeed solver scheduling via
answer set programming theory practice logic programming
hoos h kaufmann b schaub schneider robust benchmark set selection boolean constraint solvers pardalos p nicosia g eds proceedings
seventh international conference learning intelligent optimization
lion vol lecture notes computer science pp springerverlag
hoos h lindauer schaub claspfolio advances selection
answer set programming theory practice logic programming
huberman b lukose r hogg economic hard computational
science
hurley b kotthoff l malitsky osullivan b proteus hierarchical
portfolio solvers transformations simonis h ed proceedings
eleventh international conference integration ai techniques constraint programming cpaior vol lecture notes computer science
pp springer verlag
hutter f babic hoos h hu boosting verification automatic tuning
decision procedures oconner l ed formal methods computer aided
design fmcad pp ieee computer society press
hutter f hoos h leyton brown k automated configuration mixed integer
programming solvers lodi milano toth p eds proceedings
seventh international conference integration ai techniques constraint programming cpaior vol lecture notes computer science
pp springer verlag
hutter f hoos h leyton brown k sequential model optimization
general configuration coello c ed proceedings fifth
international conference learning intelligent optimization lion vol
lecture notes computer science pp springer verlag
hutter f hoos h leyton brown k efficient assessing
hyperparameter importance xing e jebara eds proceedings th
international conference machine learning icml vol pp
omnipress
hutter f hoos h leyton brown k www ml aad org smac
hutter f hoos h leyton brown k b www ml aad org fanova
hutter f hoos h leyton brown k stutzle paramils automatic
configuration framework journal artificial intelligence



fiautofolio automatically configured selector

hutter f hoos h h leyton brown k identifying key parameters
instance features forward selection pardalos p nicosia g eds
proceedings seventh international conference learning intelligent optimization lion vol lecture notes computer science pp
springer verlag
hutter f lindauer balint bayless hoos h leyton brown k
configurable sat solver challenge cssc artificial intelligence review
hutter f xu l hoos h leyton brown k runtime prediction
methods evaluation artificial intelligence
janota klieber w marques silva j clarke e solving qbf counterexample guided refinement cimatti sebastiani r eds proceedings
fifteenth international conference theory applications satisfiability testing sat vol lecture notes computer science pp
springer verlag
kadioglu malitsky sabharwal samulowitz h sellmann selection scheduling lee j ed proceedings seventeenth international conference principles practice constraint programming cp
vol lecture notes computer science pp springer verlag
kadioglu malitsky sellmann tierney k isac instance specific
configuration coelho h studer r wooldridge eds proceedings nineteenth european conference artificial intelligence ecai
pp ios press
kotthoff l llama leveraging learning automatically manage
computing repository corr abs
kotthoff l selection combinatorial search survey ai
magazine
kotthoff l icon challenge selection
icon fet eu challengeas

http challenge

kotthoff l gent miguel evaluation machine learning
selection search ai communications
lim b van den briel thiebaux backhaus bent r hvac aware
occupancy scheduling bonet b koenig eds proceedings twentynineth national conference artificial intelligence aaai pp aaai
press
lindauer hoos h hutter f sequential selection parallel
portfolio selection dhaenens c jourdan l marmion eds proceedings nineth international conference learning intelligent optimization
lion lecture notes computer science pp springer verlag
lindauer hoos h hutter f schaub b autofolio configuration selection proceedings workshops twenty nineth
national conference artificial intelligence aaai


filindauer hoos hutter schaub

lindauer hoos h schaub c www cs uni potsdam de claspfolio
lopez ibanez dubois lacoste j stutzle birattari irace package
iterated race automatic configuration tech rep iridia universite
libre de bruxelles belgium
lopez ibanez stutzle automatic configuration multi objective aco
dorigo birattari caro g doursat r engelbrecht
p floreano gambardella l gro r sahin e sayama h stutzle
eds proceedings seventh international conference swarm intelligence
ants lecture notes computer science pp springer verlag
malitsky mehta osullivan b evolving instance specific
configuration helmert roger g eds proceedings sixth annual
symposium combinatorial search socs aaai press
malitsky sabharwal samulowitz h sellmann parallel sat solver
selection scheduling milano ed proceedings eighteenth international conference principles practice constraint programming cp
vol lecture notes computer science pp springer verlag
malitsky sabharwal samulowitz h sellmann portfolios
cost sensitive hierarchical clustering rossi f ed proceedings
rd international joint conference artificial intelligence ijcai pp

malitsky sabharwal samulowitz h sellmann b boosting sequential solver portfolios knowledge sharing accuracy prediction pardalos p
nicosia g eds proceedings seventh international conference learning intelligent optimization lion vol lecture notes computer
science pp springer verlag
maratea pulina l ricca f multi engine answer set programming theory practice logic programming
mascia f lopez ibanez dubois lacoste j stutzle grammar
generation stochastic local search heuristics automatic configuration tools computers
misir sebag selection collaborative filtering
tech rep inria lri universite paris sud xi
omahony e hebrard e holland nugent c osullivan b casebased reasoning portfolio constraint solving bridge brown
k osullivan b sorensen h eds proceedings nineteenth irish conference artificial intelligence cognitive science aics
pedregosa f varoquaux g gramfort michel v thirion b grisel blondel
prettenhofer p weiss r dubourg v vanderplas j passos cournapeau
brucher perrot duchesnay e scikit learn machine learning
python journal machine learning
pulina l tacchella self adaptive multi engine solver quantified boolean
formulas constraints


fiautofolio automatically configured selector

rice j selection advances computers
roussel controlling solver execution runsolver tool journal
satisfiability boolean modeling computation
smith miles k cross disciplinary perspectives meta learning
selection acm computing surveys
snoek j larochelle h adams r p practical bayesian optimization machine learning bartlett p pereira f burges c bottou l
weinberger k eds proceedings th international conference advances
neural information processing systems nips pp
sobol sensitivity estimates nonlinear mathematical mathematical
modeling computational experiment
tamura n taga kitagawa banbara compiling finite linear csp
sat constraints
thornton c hutter f hoos h leyton brown k auto weka combined
selection hyperparameter optimization classification dhillon
koren ghani r senator bradley p parekh r j grossman r
uthurusamy r eds th acm sigkdd international conference knowledge discovery data mining kdd pp acm press
tierney k malitsky selection benchmark container premarshalling dhaenens c jourdan l marmion eds proceedings nineth international conference learning intelligent optimization
lion lecture notes computer science pp springer verlag
vallati fawcett c gerevini hoos h saetti automatic generation
efficient domain optimized planners generic parametrized planners helmert
roger g eds proceedings sixth annual symposium combinatorial
search socs aaai press
xu l hoos h leyton brown k hydra automatically configuring portfolio selection fox poole eds proceedings
twenty fourth national conference artificial intelligence aaai pp
aaai press
xu l hutter f hoos h leyton brown k satzilla portfolio selection sat journal artificial intelligence
xu l hutter f hoos h leyton brown k hydra mip automated configuration selection mixed integer programming rcra workshop
experimental evaluation solving combinatorial
explosion international joint conference artificial intelligence ijcai
xu l hutter f hoos h leyton brown k evaluating component solver
contributions portfolio selectors cimatti sebastiani
r eds proceedings fifteenth international conference theory applications satisfiability testing sat vol lecture notes computer
science pp springer verlag


filindauer hoos hutter schaub

xu l hutter f shen j hoos h leyton brown k b satzilla improved
selection cost sensitive classification balint belov
diepold gerber jarvisalo sinz c eds proceedings sat
challenge solver benchmark descriptions vol b department
computer science series publications b pp university helsinki
yun x epstein learning portfolios parallel execution
hamadi schoenauer eds proceedings sixth international conference learning intelligent optimization lion vol lecture notes
computer science pp springer verlag




