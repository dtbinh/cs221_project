Journal Artificial Intelligence Research 15 (2001) 289-318

Submitted 3/01; published 10/01

Ecient Methods Qualitative Spatial Reasoning
renz@dbai.tuwien.ac.at

Jochen Renz
Institut f
ur Informationssysteme, Technische Universit
Wien
Favoritenstr.9, A-1040 Wien, Austria

nebel@informatik.uni-freiburg.de

Bernhard Nebel
Institut f
ur Informatik, Albert-Ludwigs-Universit

Flughafen 17, D-79110 Freiburg, Germany

Abstract

theoretical properties qualitative spatial reasoning RCC-8 framework
analyzed extensively. However, empirical investigation made yet.
experiments show adaption algorithms used qualitative temporal
reasoning solve large RCC-8 instances, even phase transition region
{ provided one uses maximal tractable subsets RCC-8 identified
us. particular, demonstrate orthogonal combination heuristic methods
successful solving almost apparently hard instances phase transition region
certain size reasonable time.
1. Introduction

Representing qualitative spatial information reasoning information
important subproblem many applications, natural language understanding, document interpretation, geographical information systems. RCC-8 calculus (Randell,
Cui, & Cohn, 1992b) well suited representing topological relationships spatial
regions. Inference full calculus is, however, NP-hard (Grigni, Papadias, & Papadimitriou, 1995; Renz & Nebel, 1999). means unlikely large
instances solved reasonable time, result rule possibility
solve instances certain size reasonable time. Recently, maximal tractable
subsets RCC-8 identified (Renz & Nebel, 1999; Renz, 1999) used
speed backtracking search general NP-complete reasoning problem reducing
search space considerably.
paper address several questions emerge previous theoretical results
RCC-8 (Renz & Nebel, 1999; Renz, 1999): size possible solve
instances reasonable time? heuristic best? really much ecient
use maximal tractable subsets solving instances NP-complete consistency
problem theoretical savings given smaller branching factors indicate
effect out-balanced forward-checking power interleaved path-consistency
computations? case similar temporal problems (pointisable vs. ORD-Horn
relations) (Nebel, 1997). possible combine different heuristics way
instances solved reasonable time heuristic alone?
treat questions randomly generating instances solving using
different heuristics. so, particularly interested hardest randomly
c 2001 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiRenz & Nebel

generated instances leads question phase-transitions (Cheeseman, Kanefsky,
& Taylor, 1991): parameter randomly generating instances consistency
problem RCC-8 results phase-transition behavior? so, case
hardest instances mainly located phase-transition region instances
contained phase-transition region easily solvable? order generate instances
harder higher probability, generate two different kinds instances.
one hand generated instances contain constraints RCC-8 relations,
hand generated instances contain constraints relations
contained maximal tractable subsets. expect instances
harder average former instances.
algorithmic techniques use solving randomly generated instances
borrowed similar work qualitative temporal reasoning (Nebel, 1997; van Beek &
Manchak, 1996; Ladkin & Reinefeld, 1992). Additionally, make use fragments
RCC-8, named Hb 8, Q8 , C8, permit polynomial-time inferences (Renz & Nebel,
1999; Renz, 1999). backtracking algorithm, used solve reasoning
problem full RCC-8, decompose every disjunctive relation relations one
tractable subsets instead decomposing base relations. reduces
average branching factor backtracking tree 4.0 base relations
1.4375 Hb 8, 1.523 C8, 1.516 Q8 . Although theoretical savings
cannot observed experiments, using maximal tractable subsets instead
base relations leads significant performance improvements.
paper structured follows. Section 2, give brief sketch RCC-8
calculus algorithms used solving instances RCC-8. Section 3 describe
procedure randomly generating instances, different heuristics apply solving
instances, measure quality heuristics. Section 4 evaluate
different path-consistency algorithms order find ecient one used
forward-checking backtracking search. Section 5 observe phase-transition
behavior randomly generated instances show instances phasetransition region harder solve instances. Section 6 report
outcome running different heuristics solving instances identify several
hard instances mainly located phase-transition region. Section 7 try
solve hard instances orthogonally combining different heuristics. turns
effective leads ecient solution strategy. Finally, Section 8
evaluate strategy trying solve large instances.1
2. Region Connection Calculus RCC-8

Region Connection Calculus (RCC) first-order language representation
reasoning topological relationships extended spatial regions (Randell et al.,
1992b). Spatial regions RCC non-empty regular subsets topological space
internally connected, i.e., spatial region may consist different
disconnected pieces. Different relationships spatial regions defined based
one dyadic relation, connected relation C( ) true topological closures
spatial regions share common point.
a; b



b

1. programs available online appendix.

290

fiEfficient Methods Qualitative Spatial Reasoning






















X

X





DC(X; Y)

X





X

TPP(X; Y) TPP 1 (X; Y)

EC(X; Y)

X

X



PO(X; Y)

X





X

NTPP(X; Y) NTPP 1 (X; Y)

EQ(X; Y)

Figure 1: Two-dimensional examples eight base relations RCC-8
Region Connection Calculus RCC-8 constraint language formed eight
jointly exhaustive pairwise disjoint base relations DC, EC, PO, EQ, TPP, NTPP, TPP 1 ,
NTPP 1 definable RCC-theory possible unions base relations|
giving total number 28 = 256 different relations. base relations meaning
DisConnected, Externally Connected, Partial Overlap, EQual, Tangential Proper Part,
Non-Tangential Proper Part, converses. Examples relations shown
Figure 1. Constraints written form
variables spatial
regions RCC-8 relation. write union base relations f g.
union base relations, universal relation, written fg. Apart union
([), operations relations defined, namely, converse ( ), intersection (\),
composition (). formal definitions operations are:
xRy

x;

R

R;

^

8
8
8
8

x;
x;
x;
x;

:
:
:
:

( [ )
( \ )

x R



x R



xR

^

( )

x R





$
$
$
$ 9

_
^
,
:(

xRy

xS

xRy

xS

yRx
z

xRz

,
,

^

)

zSy :

composition base relations computed semantics relations
usually provided composition table (Randell, Cohn, & Cui, 1992a; Bennett, 1994).
RCC-8 composition table corresponds given extensional definition composition
universal region permitted (Bennett, 1997). Based table, compositions
disjunctive relations easily computed. following, Sb denotes closure
set RCC-8 relations composition, intersection, converse.
finite set RCC-8 constraints describing topological relationships different
regions represented matrix , entry represents RCC-8
relation holding region region . Without loss generality, = fEQg
=
assumed. fundamental reasoning problem (named RSAT)
framework deciding consistency set spatial formulas , i.e., whether
spatial configuration relations regions described .
interesting reasoning problem reduced polynomial time (Golumbic
& Shamir, 1993). Unfortunately, RSAT NP-complete (Renz & Nebel, 1999), i.e.,
unlikely polynomial algorithm deciding consistency. However,
shown Nebel's (1995) paper subsets RCC-8 consistency
n

n



Mji

n



j

^

Mij

291

Mij

Mii

fiRenz & Nebel

problem (written RSAT(S)) decided polynomial time.2 particular set
eight base relations B shown tractable. follows Bb consisting
32 relations tractable. even larger tractable subset containing base relations
Hb 8 (Renz & Nebel, 1999), contains 148 256 RCC-8 relations. set
shown maximal respect tractability, i.e., RCC-8 relation
added, consistency problem becomes NP-complete. Renz (1999) made complete
analysis tractability RSAT identifying maximal tractable subsets contain
base relations, altogether three subsets Hb 8, Q8 (160 relations), C8 (158 relations).
NP 8 set relations result NP-completeness combined
set base relations. contains following 76 relations contained
one Hb 8 Q8 C8 (Renz, 1999):
NP 8 = f j fPOg 6 (fNTPPg fTPPg )
(fNTPP 1g fTPP 1g )g
[ ffEC NTPP EQg fDC EC NTPP EQg
fEC NTPP 1 EQg fDC EC NTPP 1 EQgg
maximal tractable subsets contain following relations (Renz, 1999):
Hb 8 = (RCC-8 n NP 8 ) n f j (fEQ NTPPg fTPPg 6 )
(fEQ NTPP 1 g fTPP 1g 6 )g
C8 = (RCC-8 n NP 8 ) n f j fECg fPOg 6
\ fTPP NTPP TPP 1 NTPP 1 EQg =6 ;g
Q8 = (RCC-8 n NP 8 ) n f j fEQg fPOg 6
\ fTPP NTPP TPP 1 NTPP 1 g 6= ;g
;

;

R

R

R

R

R

;

;

;

;

;

;

;

;

;

;

;

;

;

R

R

R

;

;

R

R

;

R

;

;

:

R

R

R

R

;

;

R

R

R

;

R

;

relations Q8 contained one Hb 8 C8, i.e., Hb 8 [ C8 = RCC-8 n NP 8 .
Although Hb 8 smallest three maximal tractable subsets, best decomposes
RCC-8 relations: decomposing RCC-8 relation
sub-relations one
maximal tractable subsets, i.e., = 1 [ [ , one needs average 1.4375 Hb 8 relations,
1.516 Q8 relations, 1.523 C8 relations decomposing RCC-8 relations. Renz (2000)
gives detailed enumeration relations three sets.
R

R



:::

Si

Sk

2.1 Path-Consistency Algorithm

area qualitative temporal reasoning based Allen's interval calculus (Allen,
1983), path-consistency algorithm (Montanari, 1974; Mackworth, 1977; Mackworth &
Freuder, 1985) used approximate consistency realize forward-checking
(Haralick & Elliot, 1980) backtracking algorithm.
path-consistency algorithm checks consistency triples relations
eliminates relations impossible. done iteratively performing following
operation
\
Mij

Mij

Mik

Mkj

2. Strictly speaking, applies systems regions require regularity.

292

fiEfficient Methods Qualitative Spatial Reasoning

Algorithm: Path-consistency
Input: set binary constraints variables x1 ; x2 ; : : : ; x

n



represented matrix .
path-consistent set equivalent ; fail, set
exist.
n

Output:

n



1. := f( ) ( ) j 1

6= 6= g;
( indicates -th variable . Analogously )
2. 6= ;
3. select delete path ( ) ;
4. revise( )
5.

= ; return fail
6.
else := [ f(
) ( ) j 1 6= 6= g.
Q

i; j; k ;

k; i; j



i; j; k

n; < j; k

i; k

j



j

k

Q

p; r; q

Q

p; r; q

Mpq

Q

Q

p; q; ;

s; p; q



n;

p;

q

Function: revise(i; k; j )
Input: three labels i, k j indicating variables x ; x ; x
Output: true, revised; false otherwise.
Side effects: revised using operations \


j

k

ij

ij

ji

constraints involving , , .
xi

xk

xj

1. oldM := ;
2.
:= \ ( );
3. (oldM = ) return false;
4.
:= ;
5. return true.
Mij

Mij

Mij

Mj

Mij

Mik

Mkj

Mij

^

Figure 2: Path-consistency algorithm.
triples regions
fixed point reached.
= ; pair
, know inconsistent, otherwise path-consistent. Computing
done ( 3) time (see Figure 2). achieved using queue triples
regions relations recomputed (Mackworth & Freuder, 1985). Pathconsistency imply consistency. instance, following set spatial constraints
path-consistent consistent:
i; j; k

i; j



ij







n

lHH - l
HHH
l? HHHj- l?

X

DC _ TPP

Z

TPP _ TPP 1
EC _ TPP
EC _ TPP

EQ _ NTPP



EC _ NTPP

W

hand, consistency imply path-consistency, since path-consistency
form consistency (in logical sense), form disjunctive non-redundancy.
Nevertheless, path-consistency enforced consistent set constraints ap293

fiRenz & Nebel

Algorithm: Consistency
Input: set RCC-8 constraints variables x1 ; x2 ; : : : ; x

subset RCC-8 contains base relations
Decide sound complete decision
procedure.
Output: true, iff consistent.
1. Path-Consistency()
2. contains empty relation return false
3. else choose unprocessed constraint

split 1
2 1 [ [ =
4. constraint split return Decide()
5. refinements (1 )
6.
replace


7.
Consistency() return true

n

xi Rxj

R

; : : : ; Sk

Sl

xi Rxj

l



:::

Sk

R

k

xi Sl xj

Figure 3: Backtracking algorithm deciding consistency.
plying path-consistency algorithm. relations Hb 8, Q8 , C8 used, however,
path-consistency algorithm sucient deciding consistency, i.e., path-consistency
decides RSAT(Hb 8), RSAT(Q8 ), RSAT(C8 ), (Renz & Nebel, 1999; Renz, 1999).
2.2 Backtracking Algorithm

order solve instance RSAT, explore corresponding search space
using sort backtracking. experiments, used backtracking algorithm
employed solving qualitative temporal reasoning problems (Nebel, 1997), based
algorithm proposed Ladkin Reinefeld (1992). algorithm (see Figure 3)
necessary subset RCC-8 consistency decided using
sound complete (and preferably polynomial) decision procedure Decide. contains
base relations, thenS relation 2 RCC-8 decomposed sub-relations
2 =
. size particular decomposition minimal number
sub-relations used decompose . backtracking algorithm successively
selects constraints , backtracks sub-relations constraints according
decomposition decides sub-instances contain constraints using
Decide.
(optional) procedure Path-consistency line 1 used forward-checking
restricts remaining search space. Nebel (1997) showed restriction
effect soundness completeness algorithm. enforcing path-consistency
sucient deciding RSAT(S), Decide() line 5 necessary. Instead possible
always return true there.
eciency backtracking algorithm depends several factors. One is,
course, size search space explored. common way measuring
R

Si

R



Si

Si

R

294

fiEfficient Methods Qualitative Spatial Reasoning

size search space average branching factor search space, i.e.,
average number branches node search space (a node recursive 2call
) 2,
Consistency). average size search space computed (
2
(
) 2 number constraints split variables
given. backtracking algorithm described Figure 3 branching factor depends
average number relations split set relation split.
less splits average better, i.e., expected eciency
backtracking algorithm depends split set branching factor. Another factor
search space explored. backtracking algorithm Figure 3 offers two
possibilities applying heuristics. One line 3 next unprocessed constraint
chosen, line 5 next refinement chosen. two
choices uence search space path search space.
b

b

n

n =

n

n =

n

3. Test Instances, Heuristics, Measurement

previous work empirical evaluation algorithms reasoning RCC-8
benchmark problems known. Therefore randomly generated test instances
given number regions , average label-size , average degree
constraint graph. Further, used two different sets relations generating test
instances, set RCC-8 relations set hard RCC-8 relations NP 8, i.e.,
76 relations contained maximal tractable subsets Hb 8, C8 ,
Q8 . Based sets relations, used two models generate instances, denoted
( ) ( ). former model uses relations generate instances,
latter relations NP 8. instances generated follows:
1. constraint graph nodes average degree node generated.
accomplished selecting 2 ( 1) 2 possible edges using
uniform distribution.
2. edge th th node, set = universal
relation.
3. Otherwise non-universal relation selected according parameter
average size relations selected edges . accomplished selecting
one base relations uniform distribution remaining 7 relations
one probability ( 1) 7.3 results allowed relation (i.e., relation
NP 8 ( ), RCC-8 relation ( )), assign relation
edge. Otherwise repeat process.
reason generating instances using relations NP 8 assume
instances dicult solve since every relation split
backtracking search, even use maximal tractable subclass split set.
generated instances average label size = 4 0, since case relations equally
distributed.
n

n; d; l

l



H n; d; l

n



nd=



n n

j

=

Mij

Mji

l

l

l

=

H n; d; l

n; d; l

l

:

3. method could result assignment universal constraint selected link, thereby changing
degree node. However, since probability getting universal relation low,
ignore following.

295

fiRenz & Nebel

way generating random instances similar way random CSP instances finite domains usually generated (Gent, MacIntyre, Prosser, Smith, &
Walsh, 2001). Achlioptas et al. (1997) found standard models generating
random CSP instances finite domains lead trivially awed instances ! 1,
i.e., instances become locally inconsistent without propagate constraints. Since
using CSP instances infinite domains, Achlioptas et al.'s result necessarily hold random instances. We, therefore, analyze following whether
instances trivially awed ! 1. order obtain CSP finite domain, first transform constraint graph dual graph
( 1) 2 edges
constraint graph corresponds node
dual graph. Moreover, variables constraint graph corresponds
1 edges dual graph, i.e., dual graph contains ( 1) edges ( 1) 2
nodes. dual graph, node corresponds variable eight-valued domain
= fDC EC PO TPP TPP 1 NTPP NTPP 1 EQg. Ternary constraints variables imposed composition table, i.e., composition rules


must hold connected
dual graph ( =
triples nodes
n
). 3 = ( 1)( 2) 6 connected triples dual graph.


n(n 1)=2
overall number triples dual graph
.
2 unary constraints
3

domain variables given, i.e., nd=3 2 triples dual graph
nodes restricted unary constraints. Therefore, expected number
connected triples unary constraints given computed
!
!
2
3 3
!
=
( 1) 2
3
! 1, expected number triples 1 tends 3 6. instances generated
according model ( ), probability unary constraints
assigned triple lead local inconsistency 0 0036% (only 58,989
2553 = 16 581 375 possible assignments inconsistent). Since one locally inconsistent
triple makes whole instance inconsistent, interested average degree
expected number locally inconsistent triples equal one. model
( ) occurs value = 11 90, 1 = 0 5 = 9 44. = 100,
expected number locally inconsistent triples one = 13 98, 100 = 0 5
= 11 10. model ( ), none possible assignments triples leads
local inconsistency, i.e., triples randomly generated instances ( )
model locally consistent.4 analysis shows contrary Achlioptas et
al. found randomly generated CSP instances finite domains, model ( ),
model ( ) small suffer trivial local inconsistencies.
n

n

n n

=

Mij

n

n

n n

;

;

;

;

;

;

n n

;

Mij

Mik

Mij ; Mik ; Mkj

i; j

n n

=

n

Mkj

^

Mij

Mj

=

nd=

Mij

n
CT

E

n

nd=

n

:

EC

n n

n

=

EC

=

n; d; l

;

;

;



n
E


n; d; l



:

E



:







:

:

:

n

E



:

H n; d; l

H n; d; l

H n; d; l

n; d; l



4. similar result CSPs finite domains restricting constraint type, e.g.,
\not-equal" constraints graph-coloring used, possible ensure problems cannot
trivially awed.

296

fiEfficient Methods Qualitative Spatial Reasoning

solve randomly generated instances using backtracking algorithm described
previous section. search space backtracking performed depends
split set, i.e., set sub-relations allowed decompositions. Choosing
right split-set uences search noticeably uences average branching factor
search space. choose five different split sets, three maximal tractable subsets
Hb 8 Q8 C8, set base relations B closure set Bb consists
38 relations. sets following branching factors B: 4.0, B:b 2.50 ,Hb 8: 1.438,
C8: 1.523, Q8 : 1.516. is, course, worst case measure interleaved pathconsistency computations reduce branching factor considerably (Ladkin & Reinefeld,
1997).
Apart choice split set heuristics uence eciency search. general best search strategy proceed constraint
constraining relation (line 3 Figure 3) least constraining choice
sub-relation (line 5 Figure 3). investigated two different aspects choosing
next constraint processed (Nebel, 1997).
static/dynamic: Constraints processed according heuristic evaluation
constrainedness determined statically backtracking starts dynamically search.
local/global: evaluation constrainedness based local heuristic weight
criterion global heuristic criterion (van Beek & Manchak, 1996).
gives us four possibilities combine five different split sets, i.e.,
total number 20 different heuristics. evaluation constrainedness well
relations decomposed relations different split sets depends restrictiveness
relations, heuristic criterion (van Beek & Manchak, 1996). Restrictiveness
relation measure relation restricts neighborhood. instance,
universal relation given constraint network restrict neighboring relations
all, result composition relation universal relation universal
relation. identity relation, contrast, restricts neighborhood lot. every triple
variables one relation identity relation, two relations must equal.
Therefore, universal relation usually least restricting relation, identity
relation usually restricting relation. Restrictiveness relations represented
weight range 1 16 assigned every relation, 1 value
16 value least restricting relation. discuss following section
detail restrictiveness weight relation determined.
Given weights assigned every relation, compute decompositions estimate
constrainedness follows. split set RCC-8 relation compute
smallest decomposition sub-relations S, i.e., decomposition requires least number sub-relations S. one possibility, choose
decomposition least restricting sub-relations. line 5 backtracking algorithm (see Figure 3), least restricting sub-relation decomposition processed
first. local strategy, constrainedness constraint determined size
decomposition (which different every split set) weight. choose
constraint smallest decomposition larger one and,
;

;

R

R

297

fiRenz & Nebel

one constraint, one smallest weight. reason choosing relation
smallest decomposition expected forward-checking refines relations larger decomposition relations smaller decomposition. reduces
backtracking effort. global strategy, constrainedness constraint

determined adding weights neighboring relations



weight . idea behind strategy refining relation
restricted neighborhood, inconsistency detected faster refining
relation less restricted neighborhood.
order evaluate quality different heuristics, measured run-time used
solving instances well number visited nodes search space. Comparing
different approaches run-time often reliable depends several
factors implementation algorithms, used hardware, current
load used machine makes results sometimes reproducible. reason,
ran run-time experiments machine, Sun Ultra 1 128 MB
main memory. Nevertheless, suggest use run-time results mainly qualitatively
comparing different heuristics getting rough idea order magnitude
instances solved.
contrast this, number visited nodes solving instance particular
heuristic always every machine. allows comparing path
search space taken single heuristics judge heuristic makes better
choices average. However, take account time needed make
choice single node. Computing local constrainedness constraint certainly
faster computing global constrainedness. Similarly, computing constrainedness
statically faster computing dynamically. Furthermore, larger instances
require time nodes smaller instances, computing path-consistency
computing constrainedness. Taking running-time number visited nodes
together gives good indications quality heuristics.
choice make evaluating measurements aggregate
measurements single instances total picture. possibilities use
either average different percentiles median, i.e., 50% percentile.
% percentile value 0
100 obtained sorting measurements increasing
order picking measurement % element, i.e., % values less
value. Suppose instances low value (e.g. running time)
instances large value. average might larger values
almost instances, case median better indication distribution
values. case 99% percentile, instance, gives good indication
value hardest among \normal" instances. chosen use average
value measurements well distributed use 50% 99% percentile
exceptional values distribution measurements.
xRy

S;

R



xS z

zT

R

< <





4. Empirical Evaluation Path-Consistency Algorithm

Since eciency backtracking algorithm depends eciency underlying
path-consistency algorithm, first compare different implementations pathconsistency algorithm. previous empirical investigations (van Beek & Manchak, 1996)
298

fiEfficient Methods Qualitative Spatial Reasoning

reasoning Allen's interval relations (Allen, 1983), different methods computing
composition two relations evaluated. mainly full composition
table interval relations contains 213 213 = 67108864 entries, large
time stored main memory. setting, simply use composition
table specifies compositions RCC-8 relations, 256 256 table
consuming approximately 128 KB main memory. means composition
two arbitrary relations done simple table lookup.
Van Beek Manchak (1996) studied effect weighting relations
queue according restrictiveness process restricting relation first.
Restrictiveness measured base relation successively composing base
relation every possible label, summing cardinalities, i.e., number base
relations contained result composition, suitably scaling result.
reason restricting relation restricts relations
average therefore decreases probability processed again.
Restrictiveness complex relation approximated summing restrictiveness
involved base relations. Van Beek Manchak (1996) found method
weighting triples queue much ecient randomly picking arbitrary
triple. relatively small number RCC-8 relations, computed exact
restrictiveness composing relation every relation summing
cardinalities resulting compositions. scaled result weights 1 (the
restricting relation) 16 (the least restricting relations).
gives us three different implementations path-consistency algorithm. One
entries queue weighted, one approximated restrictiveness
done van Beek Manchak, one exact restrictiveness.5 order compare
implementations, randomly generated instances 50 1,000 regions.
value average degree ranging 8.0 stepping 0.5 11.0 generated
10 different instances. Figure 4 displays average CPU time different methods
applying path-consistency algorithm generated instances.
seen positive effect using weighted queue much greater problem
temporal problem (about 10 faster using ordinary queue without
weights compared 2 faster (van Beek & Manchak, 1996)). Determining
weights every relation using exact restrictiveness much advantage
approximating restrictiveness using approach van Beek Manchak (1996),
however. experiments always used \exact weights" method
determining restrictiveness amounts one table lookup.
mentioned previous section, one way measuring quality heuristics
count number visited nodes backtrack search. backtracking
algorithm, path-consistency enforced every visited node. Note adequate
multiply average running-time enforcing path-consistency instance
particular size number visited nodes order obtain approximation
required running time instance. average running-time enforcing pathconsistency given Figure 4 holds possible paths entered
queue beginning computation (see line 1 Figure 2). paths
5. weighted versions select path (i; k; j ) queue Q line 3 algorithm Figure 2
according weights different paths Q computed specified above.

299

fiRenz & Nebel

Average CPU time PCA using different queue methods A(n,d,4.0)
1000
100

"exact" weights
"approx." weights
weights

CPU time (sec)

10
1
0.1
0.01
0.001
100

200

300

400

500
600
nodes

700

800

900

1000

Figure 4: Comparing performance path-consistency algorithm using different
methods weighting queue (70 instances/data point, = 8 0 11 0)


:

:

checked algorithm. path-consistency computation
backtracking search different, however. There, paths involving currently
changed constraint entered queue, since paths might result changes
constraint graph. much faster full computation path-consistency
done beginning backtrack search.
5. Phase-Transition RCC-8

randomly generating problem instances usually problem-dependent parameter determines solubility instances. one parameter range instances
underconstrained therefore soluble high probability. another range,
problems overconstrained soluble low probability.
ranges phase-transition region probability solubility changes abruptly
high low values (Cheeseman et al., 1991). order study quality
different heuristics algorithms randomly generated instances NP-complete
problem, important aware phase-transition behavior problem.
instances contained phase-transition region often
easily solvable algorithms heuristics are, thus, useful
comparing quality. Conversely, hard instances better suited comparing
quality algorithms heuristics usually found phase-transition region.
section identify phase-transition region randomly generated instances
RSAT problem, instances using RCC-8 relations instances using
relations NP 8. Similarly empirical analysis qualitative temporal reasoning
problems (Nebel, 1997), turns phase-transition depends strongly
average degree nodes constraint graph. relations allowed, phased

300

fiEfficient Methods Qualitative Spatial Reasoning

Probability satisfiability A(n,d,4.0)

Median CPU time A(n,d,4.0)
CPU time(s)

Probability (%)
100

0.6
0.5
0.4
0.3
0.2
0.1
0

50
100
80
60
4 6
8 10
12 14
average degree
16 18

40

nodes

100
80
60

4 6
8 10
12 14
average degree
16 18

20

40

nodes

20

Figure 5: Probability satisfiability median CPU time (
Hb 8/static/global heuristic (500 instances per data point)

n; d;

4 0) using
:

transition around = 8 = 10 depending instance size (see Figure 5).
result theoretical analysis occurrence trivial aws (see Section 3),
expected larger instance sizes phase-transition behavior overlaid
mainly determined expected number locally inconsistent triples depends
average degree . Thus, although seems phase-transition shifts towards
larger values instance size increases, phase-transition asymptotically
= 9 44, theoretical value ! 1 (see Section 3). Instances pathconsistent solved fast one application path-consistency algorithm
without need backtracking. looking median CPU times given
Figure 5, one notices sharp decline median CPU times phase
transition. indicates values average degree higher
phase-transition occurs, least 50% instances path-consistent.
using \hard" relations, i.e., relations NP 8, phase-transition appears
higher values , namely, = 10 = 15 (see Figure 6). median
runtime shows, instances much harder phase-transition former
case. previous case, even strongly, seems phase-transition
shifts towards larger values instance size increases, phasetransition region narrows.
order evaluate quality path-consistency method approximation
consistency, counted number instances inconsistent path-consistent
(see Figure 7), i.e., instances approximation path-consistency algorithm consistency wrong. First all, one notes instances close
phase transition region. general case, i.e., constraints RCC-8 relations
employed, low percentage instances path-consistent inconsistent.
Therefore, figure looks erratic. data points would required order
obtain smooth curve. However, important observations made
figure, namely, path-consistency gives excellent approximation consistency even
instances large size. Except instances phase-transition region,
almost instances path-consistent consistent. picture changes










:

n









301

fiRenz & Nebel

Probability satisfiability H(n,d,4.0)

Median CPU time H(n,d,4.0)

Probability (%)

CPU time(s)

100

2
1.5

50

1
80
60
40

6 8
10 12
14 16
average degree
18 20

80

0.5

60

0

nodes

6 8
10 12
14 16
average degree
18 20

20

40

nodes

20

Figure 6: Probability satisfiability median CPU time (
Hb 8/static/global heuristic (500 instances per data point)

H n; d;

Percentage points incorrect PCA answers A(n,d,4.0)

4 0) using
:

Percentage points incorrect PCA answers H(n,d,4.0)

PC-Failures (%)
PC-Failures (%)
0.6
0.5

80
70
60
50
40
30
20
10
0

0.4
0.3
0.2

100

0.1

80
60

0
4

40

6

8 10
12 14
average degree
16 18

nodes

80
60
40

6

8 10
12 14
16 18
average degree
20

20

nodes

20

Figure 7: Percentage points incorrect answers path-consistency algorithm
( 4 0) ( 4 0)
n; d;

:

H n; d;

:

looking ( 4 0) case. almost instances phase-transition
region many instances mostly insoluble region path-consistent, though
consistent.
following evaluation different heuristics randomly generate instances average degree = 2 = 18 ( 4 0) case
= 4 = 20 ( 4 0) case. covers large area around
phase-transition. expect instances phase-transition region ( 4 0)
particularly hard makes interesting comparing quality
different heuristics.
H n; d;

:







H n; d;



n; d;

:

:

H n; d;

:

6. Empirical Evaluation Heuristics

section compare different heuristics running randomly
generated instances. instances ( 4 0) ran 20 different heuristics
n; d;

302

:

fiEfficient Methods Qualitative Spatial Reasoning

Number hard instances A(n,d,4.0)

Number hard instances H(n,d,4.0)

#Hard Instances

#Hard Instances

10
9
8
7
6
5
4
3
2
1
0

450
400
350
300
250
200
150
100
50
0

100
80
60

4 6
8 10
12 14
16 18
average degree
20

40

nodes

80
60
40

6 8
10 12
14 16
average degree
18 20

20

nodes

20

Figure 8: Number instances using 10,000 visited nodes heuristic
( 4 0) ( 4 0)
n; d;

:

H n; d;

:

(static/dynamic local/global combined five split sets B Bb Hb 8 C8 Q8 )
randomly generated instances size = 10 = 100. instances
( 4 0) restricted instances = 80 regions larger
ones appeared dicult.
first experiments found instances solved fast
less 1,000 visited nodes search space using one maximal tractable
subsets splitting. However, instances turned extremely hard, could
solved within limit 2 million visited nodes, 1.5 hours CPU
time. Therefore, ran programs maximal number 10,000 visited nodes
stored instances least one different heuristics used
10,000 visited nodes experiments (see next section). call instances
hard instances. distribution hard instances shown Figure 8. turned
heuristics using B split set heuristics using dynamic
global evaluation constrainedness many instances hard
combinations heuristics. We, therefore, include Figure 8 hard instances
B/dynamic/global heuristic ( 4 0) hard instances heuristics
b dynamic/global heuristic ( 4 0).
using B split set B/
Figure 8 shows, almost hard instances phase-transition region.
( 4 0) 500 instances per data point hard ( 4 0)
almost instances phase-transition hard. Altogether 788 hard instances
( 4 0) (out total number 759,000 generated instances) 75,081 hard
instances ( 4 0) (out total number 594,000 generated instances). Table 1
shows number hard instances heuristic except excluded
mentioned above. heuristics using Hb 8 split set solve instances
heuristics using split sets. Using C8 Q8 split set seem
improvement using B.b Among different ways computing constrainedness, static
global appears effective combination using one maximal
tractable subsets split set. split sets, dynamic local seems
;

n

H n; d;

;

;

;

n

:

n

n; d;

:

H n; d;

n; d;

:

n; d;

:

:

H n; d;

H n; d;

:

303

:

fiRenz & Nebel

Heuristics

Hb8 /sta/loc
Hb8 /sta/glo
Hb8 /dyn/loc
Hb8 /dyn/glo
C8 /sta/loc
C8 /sta/glo
C8 /dyn/loc
C8 /dyn/glo
Q8 /sta/loc
Q8 /sta/glo
Q8 /dyn/loc
Q8 /dyn/glo
Bb/sta/loc
Bb/sta/glo
Bb/dyn/loc
Bb/dyn/glo
B/sta/loc
B/sta/glo
B/dyn/loc
B/dyn/glo
total

(

n; d;

4:0)

64
42
52
100
81
58
78
108
81
54
74
104
68
89
70
162
163
222
209
(303)
788

(
4:0)
21; 129
10; 826
9; 967
24; 038
28; 830
15; 457
32; 926
41; 565
24; 189
13; 189
13; 727
29; 448
23; 711
13; 831
29; 790
{
{
{
{
{
75; 081

H n; d;

H

(80; 14:0; 4:0)
331
227
217
345
373
277
412
428
346
239
255
368
344
249
379
{
{
{
{
{
486

Table 1: Number hard instances heuristic
effective combination combining dynamic global cases worst choice
respect number solved instances.
Figure 9 compare 50% 99% percentiles different heuristics
( 4 0). give average run times since ran heuristics
10,000 visited nodes reduces real average run time values. data point
average values = 8 = 10. took average different degrees
order cover whole phase-transition region = 8 instances
size = 10 = 10 instances size = 100. different combinations
computing constrainedness, ordering run times different split
sets: B Bb C8 Hb 8 Q8 . run times using static/local, static/global, dynamic/local
computing constrainedness almost combined split set
longer split sets using dynamic/global (about 3 times longer
using Bb split set 1.5 times longer using split sets).
99% percentile run times 1.5 times longer 50% percentile run
times. Thus, even harder among \normal" instances solved easily, i.e., apart
hard instances, instances solved eciently within size range
analyzed. erratic behavior median curves results aggregation
effect observed Figure 5, namely, median elements
phase-transition inconsistent easily solvable.
n; d;

:







n



>

;

n

;

304

fiEfficient Methods Qualitative Spatial Reasoning

Median CPU time using STATIC,LOCAL A(n,d,4.0)

99%-Percentile CPU time using STATIC,LOCAL A(n,d,4.0)

0.6

0.6
B-split
B^-split
C-split
H^8-split
Q-split

0.4
0.3
0.2
0.1

20

30

40

50
60
nodes

70

80

90

0.2

100

10

Median CPU time using STATIC,GLOBAL A(n,d,4.0)

20

30

40

50
60
nodes

70

80

90

100

99%-Percentile CPU time using STATIC,GLOBAL A(n,d,4.0)

0.6

0.6
B-split
B^-split
C-split
H^8-split
Q-split

0.4

B-split
B^-split
C-split
H^8-split
Q-split

0.5
CPU time (sec)

0.5
CPU time (sec)

0.3

0
10

0.3
0.2
0.1

0.4
0.3
0.2
0.1

0

0
10

20

30

40

50
60
nodes

70

80

90

100

10

Median CPU time using DYNAMIC,LOCAL A(n,d,4.0)

20

30

40

50
60
nodes

70

80

90

100

99%-Percentile CPU time using DYNAMIC,LOCAL A(n,d,4.0)

0.6

0.6
B-split
B^-split
C-split
H^8-split
Q-split

0.4

B-split
B^-split
C-split
H^8-split
Q-split

0.5
CPU time (sec)

0.5
CPU time (sec)

0.4

0.1

0

0.3
0.2
0.1

0.4
0.3
0.2
0.1

0

0
10

20

30

40

50
60
nodes

70

80

90

100

10

Median CPU time using DYNAMIC,GLOBAL A(n,d,4.0)

20

30

40

50
60
nodes

70

80

90

100

99%-Percentile CPU time using DYNAMIC,GLOBAL A(n,d,4.0)

0.6

0.6
B-split
B^-split
C-split
H^8-split
Q-split

0.4

B-split
B^-split
C-split
H^8-split
Q-split

0.5
CPU time (sec)

0.5
CPU time (sec)

B-split
B^-split
C-split
H^8-split
Q-split

0.5
CPU time (sec)

CPU time (sec)

0.5

0.3
0.2
0.1

0.4
0.3
0.2
0.1

0

0
10

20

30

40

50
60
nodes

70

80

90

100

10

20

30

40

50
60
nodes

70

80

90

100

Figure 9: Percentile 50% 99% CPU time different heuristics solving
( 4 0) ( = 8 0 = 10 0, 2,500 instances per data point)
n; d;

:



:



:

305

fiRenz & Nebel

runtime studies ( 4 0) noticed many hard instances
40 (see Figure 8), = 80 almost instances phase-transition region
hard (see last column Table 1). Also, Table 1 shows, number hard instances
varies lot different heuristics. Therefore, possible compare percentile
running times different heuristics 40. = 80 = 14 (see last column
Table 1), instance, 50% 99% percentile element C8/dynamic/global
heuristic element no.36 element no.72, element no.141 element no.280
Hb 8/dynamic/local heuristic (out 500 sorted elements), respectively.
reason show results size = 40 (see Figure 10). Again,
took average different degrees = 10 = 15 order cover whole
phase-transition region. order run times different combinations
computing constrainedness: B Bb C8 Q8 Hb 8, Hb 8 cases fastest.
( 4 0) instances, run times dynamic/global much longer
combinations. 99% percentile run times static/global combination
Hb 8 Q8 dynamic/local combination faster
combinations. Although median CPU times ( 4 0)
40, percentile 99% CPU times much longer. already shown Figure 7
8, evidence hard instances phase-transition
region ( 4 0).
H n; d;

n >

:

n

n >

n



n



;

n; d;



;

:

n; d;

:

n <

H n; d;

:

7. Orthogonal Combination Heuristics

previous section studied quality different heuristics solving randomly
generated RSAT instances. found several instances mainly located
phase-transition region could solved heuristics within limit 10,000
visited nodes search space. Since different heuristics different search space
(depending split set) use different path search space (determined
different possibilities computing constrainedness), possible instances
hard heuristics easily solvable heuristics. Nebel (1997) observed
running different heuristics parallel solve instances particular hard set
temporal reasoning instances proposed van Beek Manchak (1996) single
heuristic alone solve, using altogether number visited nodes
heuristic alone. open question Nebel's investigation (Nebel, 1997) whether
case hard instances phase-transition region.
section evaluate power \orthogonally combining" different heuristics
solving RSAT instances, i.e., running different heuristics instance parallel
one heuristics solves instance. different ways simulating
parallel processing single processor machine. One use time slicing
different heuristics, another run heuristics fixed random order
certain number nodes search space visited unsuccessful try next
heuristic (cf. Huberman, Lukose, & Hogg, 1997). possibility chosen
parameters (e.g., order heuristics run number visited
nodes spent heuristic) determines eciency single processor
simulation orthogonal combination. order find best parameters, ran
heuristics using 10,000 visited nodes heuristic set hard instances
306

fiEfficient Methods Qualitative Spatial Reasoning

Median CPU time using STATIC,LOCAL H(n,d,4.0)

99%-Percentile CPU time using STATIC,LOCAL H(n,d,4.0)

0.045

5
B-split
C-split
B^-split
Q-split
H^8-split

CPU time (sec)

0.035
0.03

B-split
C-split
B^-split
Q-split
H^8-split

4
CPU time (sec)

0.04

0.025
0.02
0.015
0.01

3

2

1

0.005
0

0
10

15

20

25
nodes

30

35

40

10

Median CPU time using STATIC,GLOBAL H(n,d,4.0)

20

25
nodes

30

35

40

99%-Percentile CPU time using STATIC,GLOBAL H(n,d,4.0)

0.045

5
B-split
C-split
B^-split
Q-split
H^8-split

0.035
0.03

B-split
C-split
B^-split
Q-split
H^8-split

4
CPU time (sec)

0.04
CPU time (sec)

15

0.025
0.02
0.015
0.01

3

2

1

0.005
0

0
10

15

20

25
nodes

30

35

40

10

Median CPU time using DYNAMIC,LOCAL H(n,d,4.0)

20

25
nodes

30

35

40

99%-Percentile CPU time using DYNAMIC,LOCAL H(n,d,4.0)

0.045

5
B-split
C-split
B^-split
Q-split
H^8-split

0.035
0.03

B-split
C-split
B^-split
Q-split
H^8-split

4
CPU time (sec)

0.04
CPU time (sec)

15

0.025
0.02
0.015
0.01

3

2

1

0.005
0

0
10

15

20

25
nodes

30

35

40

10

Median CPU time using DYNAMIC,GLOBAL H(n,d,4.0)

20

25
nodes

30

35

40

99%-Percentile CPU time using DYNAMIC,GLOBAL H(n,d,4.0)

0.045

5
B-split
C-split
B^-split
Q-split
H^8-split

0.035
0.03

B-split
C-split
B^-split
Q-split
H^8-split

4
CPU time (sec)

0.04
CPU time (sec)

15

0.025
0.02
0.015
0.01

3

2

1

0.005
0

0
10

15

20

25
nodes

30

35

40

10

15

20

25
nodes

30

35

40

Figure 10: Percentile 50% 99% CPU time different heuristics solving
( 4 0) ( = 10 0 = 15 0, 5,500 instances per data point)
H n; d;

:



:



:

307

fiRenz & Nebel

A(n; d; 4:0)
Heuristics Solved Instances 1. Response
91:88%
19:80%
Hb8 /sta/loc
Hb8 /sta/glo
94:67%
12:56%
Hb8 /dyn/loc
93:40%
24:37%
Hb8 /dyn/glo
87:31%
13:58%
C8 /sta/loc
89:72%
6:35%
C8 /sta/glo
92:64%
5:20%
C8 /dyn/loc
90:10%
5:96%
C8 /dyn/glo
86:63%
6:60%
Q8 /sta/loc
89:72%
9:77%
Q8 /sta/glo
93:15%
12:06%
Q8 /dyn/loc
90:61%
10:15%
Q8 /dyn/glo
86:80%
12:82%
91:37%
1:40%
Bb/sta/loc
bB/sta/glo
88:71%
1:27%
Bb/dyn/loc
91:12%
0:89%
Bb/dyn/glo
79:44%
0:89%
B/sta/loc
79:31%
0:51%
B/sta/glo
71:83%
0:25%
B/dyn/loc
73:48%
0:51%
B/dyn/glo
{
0:13%
combined
99:87%

H (n; d; 4:0)
Solved Instances 1. Response
71:86%
6:92%
85:58%
14:26%
86:73%
22:28%
67:98%
15:00%
61:60%
1:47%
79:41%
5:04%
56:15%
2:26%
44:64%
2:40%
67:78%
1:63%
82:43%
3:61%
81:72%
1:83%
60:78%
4:61%
68:42%
1:84%
81:58%
5:22%
60:32%
2:56%
{
1:83%
{
1:67%
{
1:13%
{
0:42%
{
0:49%
96:48%

Table 2: Percentage solved hard instances heuristic percentage first response orthogonally running heuristics. Note sometimes different
heuristics equally fast. Therefore sum 100%.

identified previous section (those instances least one heuristic required
10,000 visited nodes) compared behavior. Since ran heuristics
instances already experiments previous section, evaluate
outcomes. led surprising result ( 4 0) instances, namely,
788 hard instances except single one solved least one heuristics
using less 10,000 visited nodes. Table 2 list percentage hard instances
could solved different heuristics percentage first response
running heuristics parallel (i.e., heuristic required smallest
number visited nodes solving instance). turns heuristics using Hb 8
split set solve instances heuristics,
often fastest finding solution. Although heuristics using two
maximal tractable subsets Q8 C8 split set solve significantly instances
heuristics using B,b much faster finding solution. Despite solving
least number instances, heuristics using B split set cases
fastest producing solution.
n; d;

308

:

fiEfficient Methods Qualitative Spatial Reasoning

First Response Solving Hard Instances A(n,d,4.0)

First Response Solving Hard Instances H(n,d,4.0)

20
700
Number solved instances

Number solved instances

inconsistent
consistent
15

10

5

inconsistent
consistent

600
500
400
300
200
100

0

0
1

10
100
1000
Minimal number visited nodes

10000

1

10
100
1000
Minimal number visited nodes

10000

Figure 11: Fastest solution hard instances running heuristics parallel
comparing minimal number visited nodes heuristics
hard instances, found five (which inconsistent) required
150 visited nodes. particularly remarkable instances
phase-transition region NP-hard problem, i.e., instances usually
considered dicult ones. note 15% (120) 788 (pathconsistent) instances inconsistent, much higher usual (cf. Figure 7).
Interestingly, inconsistent instances solved faster consistent
instances. point, noted combining heuristics orthogonally
similar randomized search techniques restarts (Selman, Levesque, & Mitchell, 1992).
However, contrast randomized search, method determine whether
instance inconsistent. Figure 11 chart number hard instances solved
smallest number visited nodes respect solubility. Due low number
hard instances ( 4 0), figure left looks bit ugly one least
approximate behavior curves comparing second figure
right curve ( 4 0) (see below). oscillating behavior
inconsistent instances (more instances solved odd even number
visited nodes) might due sizes instances|we generated instances
even number nodes only. dicult instance ( = 56 = 10) solved
b static/global heuristic using 91,000 visited nodes
inconsistent B/
heuristics using one maximal tractable subsets split set failed solve even
allowed visit 20,000,000 nodes search space.
examination set 75,081 hard instances ( 4 0). 2,640
instances could solved 20 different heuristics using 10,000 visited
nodes each. distribution shown Figure 12(a). Similar hard instances
( 4 0), heuristics using Hb 8 split set successful ones
solving hard instances ( 4 0), shown Table 2. solved
hard instances heuristics produced fastest response
50% hard instances. significant difference using C8 Q8 Bb
split set, neither number solved instances percentage first
response. previous case, computing constrainedness using static/global
dynamic/local heuristics resulted successful paths search space
n; d;

:

H n; d;

:

n

;d

H n; d;

n; d;

:

:

H n; d;

:

;

309

;

fiRenz & Nebel

First Response Solving Hard Instances H(n,d,4.0)
Number hard instances H(n,d,4.0) using orthogonal combination
inconsistent
consistent

#Hard Instances
100
80
60
40
20
0

80
60
40

6 8
10 12
14 16
average degree
18 20

nodes

Number solved instances

100

80

60

40

20

20
0
20000

40000
60000
80000
Number visited nodes

100000

(a)
(b)
Figure 12: Hard instances using orthogonal combination heuristic ( 4 0),
(a) shows distribution, (b) shows fastest solution using
100,000 visited nodes per heuristic
H n; d;

:

instances solved within 10,000 visited nodes combinations.
average produced faster solutions combinations.
observations ( 4 0) made charting fastest solutions
hard instances ( 4 0) (see Figure 11). 29% (21,307) solved
instances inconsistent. were, again, solved faster consistent
instances. 75% hard instances solved 150 visited nodes.
90% solved 1,300 visited nodes. Since Hb 8/dynamic/local heuristic
alone solves 86% instances, seems dicult combine different heuristics
way hard instances solved using 10,000 visited
nodes altogether. However, orthogonally combining two best performing heuristics
(Hb 8 /dynamic/local Hb 8/static/global) allowing maximal number 5,000
visitable nodes, solve 92% (69,056) hard instances.
tried solve 2,640 hard instances ( 4 0) solvable using
orthogonal combination heuristics 10,000 visited nodes using maximal
number 100,000 visited nodes. 471 instances still solvable,
75% solved instances inconsistent. fastest response solved instances
charted Figure 12(b). successful heuristics giving fastest response
Hb 8 /dynamic/local (42.5%) Hb 8/static/global (26.6%). three heuristics using
static/global computation constrainedness combined using Q8 C8 Bb split
set gave fastest response 15.9% solved instances Bb strategy
far best among three (9.4%).
n; d;

H n; d;

:

:

H n; d;

:

;

;

8. Combining Heuristics Solving Large Instances

previous section found combining different heuristics orthogonally solve
instances using amount visited nodes heuristic alone solve.
section use results order identify size randomly generated instances
310

fiEfficient Methods Qualitative Spatial Reasoning

almost them, especially phase-transition region, still
solved acceptable time. Since many instances ( 4 0) already dicult
size = 80 (see Figure 12), restrict analysis instances ( 4 0)
study randomly generated instances size = 100 nodes.
instances large size allowing maximal number 10,000 visited nodes
search space much obtaining acceptable runtime. 10,000 visited nodes
instances size = 100 corresponds runtime 10 seconds Sun Ultra1,
larger instances gets much slower. Therefore, restrict maximal number
visited nodes order achieve acceptable runtime. Given multi-processor machine,
different heuristics run orthogonally different processors using maximal
number visited nodes each. orthogonal combination different heuristics
simulated single-processor machine, maximal number nodes divided
number used heuristics obtain available number visitable nodes
heuristic. Thus, different heuristics use, less visitable nodes available
heuristic. Therefore, order achieve best performance, find
combination heuristics solves instances within given number visitable
nodes. chosen heuristics solve many instances alone,
complement well, i.e., instances cannot solved one heuristic
solvable heuristic.
started finding optimal combination heuristics set 788 hard
instances ( 4 0). empirical evaluation given Section 6 know
many visited nodes heuristic needs order solve 788 hard instances.
Therefore, computed number solved instances 220 possible combinations
heuristics using increasing maximal number visitable nodes heuristics
together. Since tried find combination solves instances,
computed quite fast. results given Table 3. show
good performance obtained maximal number 600 visited nodes.
case four heuristics involved, i.e., 150 visitable nodes spent four
heuristics. Since combination heuristics (Hb 8/static/global, Hb 8 /dynamic/local,
b static/local) best 1,000 visitable nodes, choose
C8/dynamic/local, B/
combination analysis. choose order processed
b static/local according
1. Hb 8/dynamic/local, 2. Hb 8 /static/global, 3. C8/dynamic/local, 4. B/
first response behavior given Table 2. Note although two heuristics
b static/local show particularly good performance
C8/dynamic/local B/
running alone (see Table 2), seem best complement two heuristics.
find next maximal number visitable nodes spend
heuristics. ran best performing heuristic (Hb 8/dynamic/local) instances
phase-transition region varying sizes. turned almost consistent
instances number visited nodes required solving slightly less twice
size instances inconsistent instances path-consistent and,
thus, solvable one visited node. Therefore, ran four heuristics
following allowing 2 visited nodes each, size instance, i.e., together
allow 8 visitable nodes. randomly generated test instances according
( 4 0) model size = 110 regions size = 500 regions
step 10 regions 100 instances size average degree ranging
H n; d;

:

n

n; d;

n

n

n; d;

:

n

n

n

n; d;

:

n

n

311

:

fiRenz & Nebel

Max Nodes Solved Instances
100
516
200
705
300
759
400
769
500
774
600
778
700
780
800
783
900
784
1100
785
1300
786
3900
787

Combination Heuristics
Hb 8-d-l
Hb 8-s-g
Hb 8-s-g, Hb 8-d-l
Hb 8-s-g, C8 -d-l
Hb 8-s-g, Hb 8-d-l, C8 -d-l
b
Hb 8-s-g, Hb 8-d-l, C8 -d-l, B-s-l
b
b
b
H8-s-g, H8-d-l, C8 -d-l, B-s-l
b
Hb 8-s-g, Hb 8-d-l, C8 -d-l, B-s-l
b
b
b
H8-s-g, H8-d-l, C8 -d-l, B-s-l
b B-s-g
b
Hb 8-s-g, Hb 8-d-l, C8 -d-l, B-s-l,
b B-s-g
b
Hb 8-s-g, Hb 8-d-l, B-s-l,
b
b
b
H8-s-g, H8-d-l, B-d-l

Table 3: Best performance combining different heuristics solving 787 solvable hard
instances ( 4 0) fixed maximal number visited nodes
n; d;

:

Probability satisfiability A(n,d,4.0)

Probability (%)

Average number visited nodes A(n,d,4.0)

Visited nodes

100

1000
900
800
700
600
500
400
300
200
100

50

4 6
8 10
12 14
average degree
16 18

500
450
400
350
300
250 nodes
200
150

4 6
8 10
12 14
average degree
16 18

500
450
400
350
300
250 nodes
200
150

Figure 13: Probability satisfiability ( 4 0) (100 instances per data point)
average number visited nodes path-consistent instances using
orthogonal combination four selected heuristics
n; d;

:

= 2 0 = 18 0 step 0.5, total number 132,000 instances. Since solving
large instances using backtracking requires lot memory, solved instances
Sun Ultra60 1GB main memory.
generated instances display phase-transition behavior continues one
given Figure 5. phase-transition ranges = 10 0 = 110 = 10 5
= 500 (see Figure 13). Apart 112 instances, instances generated solvable orthogonal combination four heuristics (Hb 8 /static/global,
b static/local) spending less 2n visited nodes
Hb 8/dynamic/local, C8/dynamic/local, B/


:



:



n

312

:

n



:

fiEfficient Methods Qualitative Spatial Reasoning

Percentile 70% CPU time using orthogonal combination A(n,d,4.0)

Percentile 99% CPU time using orthogonal combination A(n,d,4.0)
CPU time (s)

CPU time (s)
100
25
20
15
10
5
0

80
60

4 6
8 10
12 14
average degree
16 18

40

500
450
400
350
300
250 nodes
200
150

20
0
4 6
8 10
12 14
average degree
16 18

500
450
400
350
300
250 nodes
200
150

Figure 14: Percentile 70% 99% CPU time orthogonal combination four different heuristics solving large randomly generated instances ( 4 0)
n; d;

:

each. Figure 13 give average number visited nodes path-consistent
instances. seen test instances average number visited nodes
linear size instances. percentile 70% CPU time instances
phase-transition size = 500 regions 20 seconds, percentile 99% CPU
time 90 seconds. size = 400 regions, percentile 99% CPU time
less minute (see Figure 14).
131,240 test instances already solved Hb 8/static/global heuristic,
71 instances Hb 8/dynamic/local heuristic required 577 instances
C8/dynamic/local heuristic produced solution. None 112 instances
b static/local heuristic.
solved one three heuristics solved B/
tried solve instances using heuristics, using maximal number 2
visited nodes each. best performing among heuristics C8/dynamic/global
heuristic solved 87 112 instances followed C8 /static/global heuristic (83)
Q8 /dynamic/global heuristic (63). 7 instances solved heuristic
within maximal number 2 visited nodes.
n

n

n

n

9. Discussion

empirically studied behavior solving randomly generated RSAT instances using
different backtracking heuristics make use maximal tractable subsets
identified previous work. generated instances according two different models
\general model" allows 256 RCC-8 relations used \hard
model" allows relations contained maximal tractable
subsets. theoretical analysis two models showed model model
small average degree nodes constraint graph suffer trivial
local inconsistencies case similar generation procedures CSPs finite
domains (Achlioptas et al., 1997). turned randomly generated instances
models show phase-transition behavior depends strongly average
degree instances. instances outside phase-transition region


H

H



313

fiRenz & Nebel

solved eciently heuristics, instances phase-transition region
extremely hard. instances general model, path-consistent instances
consistent. Conversely, path-consistency bad approximation consistency
instances hard model. instances much harder solve instances
general model.
comparing different heuristics, found heuristics using one
maximal tractable subsets split set much faster deciding consistency
RSAT instances theoretical advantage given reduced average branching factor
resulting exponentially smaller size search space indicates.
using path-consistency forward checking method considerably reduces search space
cases. Nevertheless, using one maximal tractable subsets split set,
particular Hb 8, still leads much faster solution solves instances reasonable
time heuristics. Although two maximal tractable subsets Q8 C8
contain relations Hb 8 , average branching factor lower, i.e., using
Hb 8 one decompose relations (256 148 = 108) using two
sets (96 98 relations, respectively), Hb 8 splits relations better
two sets. relations decomposed two Hb 8 sub-relations, many
relations must decomposed three C8 sub-relations three Q8 sub-relations.
explains superior performance heuristics involving Hb 8 decomposition.
Among instances generated, stored could solved
heuristics within maximum number 10,000 visited nodes search space order
find different heuristics perform hard instances. found almost
hard instances located phase-transition region many
hard instances hard model general model. orthogonally combined
heuristics ran hard instances. turned successful. Apart
one instance, hard instances general model could solved,
low number visited nodes. hard instances hard model much
dicult: many could solved heuristics. Nevertheless,
many instances solved orthogonally combining heuristics
heuristic alone. Again, solved using low number visited nodes.
Based observations orthogonally combining different heuristics, tried
identify combination heuristics successful eciently solving many
instances used combination solving large instances. turned
best combination involves heuristics use maximal tractable subsets decomposition. combination able solve almost randomly generated
instances phase-transition region general model size = 500 regions
eciently. seems impossible considering enormous size
search space, average 1039323 instances size = 500 using Hb 8
split set.
results show despite NP-hardness, able solve almost randomly generated RSAT instances general model eciently. neither due
low number different RCC-8 relations (instances generated according hard model
hard phase-transition region) generation procedure random
instances lead trivially awed instances asymptotically. mainly due
maximal tractable subsets cover large fraction RCC-8 lead
n

n

314

fiEfficient Methods Qualitative Spatial Reasoning

extremely low branching factors. Since different maximal tractable subsets,
allow choosing many different backtracking heuristics increases
eciency: instances solved easily one heuristic, instances
heuristics. Heuristics involving maximal tractable subclasses showed best behavior
instances solved faster tractable subsets used. full classification tractable subsets gives possibility generating hard instances high
probability. Many randomly generated instances phase-transition region
hard using relations contained tractable subsets
consist = 60 regions. next step developing ecient reasoning
methods RCC-8 find methods successful solving hard
instances hard model.
n

results empirical evaluation reasoning RCC-8 suggest analyzing
computational properties reasoning problem identifying tractable subclasses
problem excellent way achieving ecient reasoning mechanisms. particular
maximal tractable subclasses used develop ecient methods solving
full problem since average branching factor lowest. Using refinement
method developed Renz's (1999) paper, tractable subclasses set relations forming
relation algebra identified almost automatically. method makes easy
develop ecient algorithms. indication empirical evaluation
much effective (even especially hard instances phase-transition
region) orthogonally combine different heuristics try get final epsilon
single heuristic. answers question raised Nebel (1997) whether orthogonal
combination heuristics useful phase-transition region. experiments
lead much better results even simulating orthogonal combination different
heuristics single processor machine spending altogether resources
one heuristic alone. contrast method time slicing different
heuristics, started new heuristic previous heuristic failed certain
number visited nodes search space. order ran heuristics
depended performance well complemented other,
successful heuristics used first. similar using algorithm portfolios proposed
Huberman et al. (1997). heuristics perform better combination
successful one matter empirical evaluation depends particular
problem. Heuristics depending maximal tractable subclasses, however, lead
best performance.
CSPs finite domains many theoretical results localizing
phase-transition behavior predicting hard instances located. contrast this, basically theoretical results CSPs infinite domains
used spatial temporal reasoning. initial theoretical analysis shows, theoretical results CSPs finite domains necessarily extend CSPs infinite
domains. would interesting develop general theory CSPs
infinite domains, possibly similar Williams Hogg's \Deep Structure" (Williams &
Hogg, 1994) Gent et al.'s \Kappa" theory (Gent, MacIntyre, Prosser, & Walsh, 1996).
315

fiRenz & Nebel
Acknowledgments

would thank Ronny Fehling assistance developing programs, Malte
Helmert proof reading paper, three anonymous reviewers
helpful comments.
research supported DFG part project fast-qual-space,
part DFG special research effort \Spatial Cognition". first author
partially supported Marie Curie Fellowship European Community programme
\Improving Human Potential" contract number HPMF-CT-2000-00667. preliminary version paper appeared Proceedings 13th European Conference
Artificial Intelligence (Renz & Nebel, 1998).
References

Achlioptas, D., Kirousis, L., Kranakis, E., Krizanc, D., Molloy, M., & Stamatiou, Y. (1997).
Random constraint satisfaction: accurate picture. 3rd Conference
Principles Practice Constraint Programming (CP'97), Vol. 1330 LNCS, pp.
107{120. Springer-Verlag.
Allen, J. F. (1983). Maintaining knowledge temporal intervals. Communications
ACM, 26 (11), 832{843.
Bennett, B. (1994). Spatial reasoning propositional logic. Doyle, J., Sandewall,
E., & Torasso, P. (Eds.), Principles Knowledge Representation Reasoning:
Proceedings 4th International Conference, pp. 51{62, Bonn, Germany. Morgan
Kaufmann.
Bennett, B. (1997). Logical Representations Automated Reasoning Spatial Relationships. Ph.D. thesis, School Computer Studies, University Leeds.
Cheeseman, P., Kanefsky, B., & Taylor, W. M. (1991). really hard problems are.
Proceedings 12th International Joint Conference Artificial Intelligence,
pp. 331{337, Sydney, Australia. Morgan Kaufmann.
Gent, I., MacIntyre, E., Prosser, P., Smith, B., & Walsh, T. (2001). Random constraint
satisfaction: Flaws structure. CONSTRAINTS, 6 (4), 345{372.
Gent, I., MacIntyre, E., Prosser, P., & Walsh, T. (1996). constrainedness search.
Proceedings 13th National Conference AI (AAAI'96), pp. 246{252.
Golumbic, M. C., & Shamir, R. (1993). Complexity algorithms reasoning time:
graph-theoretic approach. Journal Association Computing Machinery,
40 (5), 1128{1133.
Grigni, M., Papadias, D., & Papadimitriou, C. (1995). Topological inference. Proceedings
14th International Joint Conference Artificial Intelligence, pp. 901{906,
Montreal, Canada.
316

fiEfficient Methods Qualitative Spatial Reasoning

Haralick, R. M., & Elliot, G. L. (1980). Increasing tree search eciency constraint
satisfaction problems. Artificial Intelligence, 14, 263{313.
Huberman, B., Lukose, R., & Hogg, T. (1997). economics approach hard computational problems. Science, 275, 51{54.
Ladkin, P. B., & Reinefeld, A. (1992). Effective solution qualitative interval constraint
problems. Artificial Intelligence, 57 (1), 105{124.
Ladkin, P. B., & Reinefeld, A. (1997). Fast algebraic methods interval constraint problems. Annals Mathematics Artificial Intelligence, 19 (3,4).
Mackworth, A. K. (1977). Consistency networks relations. Artificial Intelligence, 8,
99{118.
Mackworth, A. K., & Freuder, E. C. (1985). complexity polynomial network
consistency algorithms constraint satisfaction problems. Artificial Intelligence, 25,
65{73.
Montanari, U. (1974). Networks constraints: fundamental properties applications
picture processing. Information Science, 7, 95{132.
Nebel, B. (1995). Computational properties qualitative spatial reasoning: First results.
Wachsmuth, I., Rollinger, C.-R., & Brauer, W. (Eds.), KI-95: Advances Artificial
Intelligence, Vol. 981 Lecture Notes Artificial Intelligence, pp. 233{244, Bielefeld,
Germany. Springer-Verlag.
Nebel, B. (1997). Solving hard qualitative temporal reasoning problems: Evaluating
eciency using ORD-Horn class. CONSTRAINTS, 3 (1), 175{190.
Randell, D. A., Cohn, A. G., & Cui, Z. (1992a). Computing transitivity tables: challenge
automated theorem provers. Proceedings 11th CADE. Springer-Verlag.
Randell, D. A., Cui, Z., & Cohn, A. G. (1992b). spatial logic based regions
connection. Nebel, B., Swartout, W., & Rich, C. (Eds.), Principles Knowledge
Representation Reasoning: Proceedings 3rd International Conference, pp.
165{176, Cambridge, MA. Morgan Kaufmann.
Renz, J. (1999). Maximal tractable fragments Region Connection Calculus: complete analysis. Proceedings 16th International Joint Conference Artificial
Intelligence, pp. 448{454, Stockholm, Sweden.
Renz, J. (2000). Qualitative Spatial Reasoning Topological Information. Ph.D. thesis,
Institut fur Informatik, Albert-Ludwigs-Universitat Freiburg.
Renz, J., & Nebel, B. (1998). Ecient methods qualitative spatial reasoning. Proceedings 13th European Conference Artificial Intelligence, pp. 562{566, Amsterdam, Netherlands. Wiley.
317

fiRenz & Nebel

Renz, J., & Nebel, B. (1999). complexity qualitative spatial reasoning: maximal
tractable fragment Region Connection Calculus. Artificial Intelligence, 108 (12), 69{123.
Selman, B., Levesque, H. J., & Mitchell, D. (1992). new method solving hard satisfiability problems. Proceedings 10th National Conference American
Association Artificial Intelligence, pp. 440{446, San Jose, CA. MIT Press.
van Beek, P., & Manchak, D. W. (1996). design experimental analysis algorithms
temporal reasoning. Journal Artificial Intelligence Research, 4, 1{18.
Williams, C. P., & Hogg, T. (1994). Exploiting deep structure constraint problems.
Artificial Intelligence, 70, 73{117.

318


