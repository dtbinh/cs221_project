Journal Artificial Intelligence Research 55 (2016) 317-359

Submitted 08/15; published 02/16

Adaptive Contract Design Crowdsourcing Markets:
Bandit Algorithms Repeated Principal-Agent Problems
Chien-Ju Ho

ch624@cornell.edu

Cornell University, Ithaca, NY, USA

Aleksandrs Slivkins

slivkins@microsoft.com

Microsoft Research, New York, NY, USA

Jennifer Wortman Vaughan

jenn@microsoft.com

Microsoft Research, New York, NY, USA

Abstract
Crowdsourcing markets emerged popular platform matching available
workers tasks complete. payment particular task typically set
tasks requester, may adjusted based quality completed work,
example, use bonus payments. paper, study requesters
problem dynamically adjusting quality-contingent payments tasks. consider
multi-round version well-known principal-agent model, whereby round
worker makes strategic choice effort level directly observable
requester. particular, formulation significantly generalizes budget-free online task
pricing problems studied prior work. treat problem multi-armed bandit
problem, arm representing potential contract. cope large (and
fact, infinite) number arms, propose new algorithm, AgnosticZooming,
discretizes contract space finite number regions, effectively treating region
single arm. discretization adaptively refined, promising regions
contract space eventually discretized finely. analyze algorithm,
showing achieves regret sublinear time horizon substantially improves
non-adaptive discretization (which competing approach literature).
results advance state art several different topics: theory crowdsourcing
markets, principal-agent problems, multi-armed bandits, dynamic pricing.

1. Introduction
Crowdsourcing harnesses human intelligence common sense complete tasks
difficult accomplish using computers alone. Crowdsourcing markets, Amazon Mechanical Turk CrowdFlower, platforms designed match available human workers
tasks complete. Using platforms, requesters may post tasks would
completed, along amount money willing pay. Workers
choose whether accept available tasks complete work.
course human workers equal, human-produced work. tasks,
proofreading English text, easier workers others, requiring less
effort produce high quality results. Additionally, workers dedicated
others, willing spend extra time make sure task completed properly. encourage
high quality results, requesters may set quality-contingent bonus payments top
base payment task, rewarding workers producing valuable output.
c
2016
AI Access Foundation. rights reserved.

fiHo, Slivkins, & Vaughan

viewed offering workers contract specifies much paid based
quality output.1
examine requesters problem dynamically setting quality-contingent payments
tasks. consider setting time evolves rounds. round, requester
posts new contract, performance-contingent payment rule specifies different levels
payment different levels output quality. random, unidentifiable worker
arrives market strategically decides whether accept requesters task
much effort exert; choice effort level directly observable requester.
worker completes task (or chooses complete it), requester observes
workers output, pays worker according offered contract, adjusts
contract next round. properties random worker (formally: distribution
workers types) known requester, may learned time.
goal requester maximize expected utility, value receives completed
work minus payments made. call dynamic contract design problem.
concreteness, consider special case worker strategically choose
perform task low effort high effort, task may completed either
low quality high quality. low effort incurs cost results low quality,
turn brings value requester. high effort leads high quality
positive probability (which may vary one worker another, unknown
requester). requester observes quality completed tasks, therefore cannot
always infer effort level. example captures two main tenets model:
properties random worker unknown requester workers strategic
decisions unobservable.
treat dynamic contract design problem multi-armed bandit (MAB) problem,
arm representing potential contract. Since action space large (potentially
infinite) well-defined real-valued structure, natural consider algorithm
uses discretization. algorithm, AgnosticZooming, divides action space
regions, chooses among regions, effectively treating region single metaarm. discretization defined adaptively, promising areas
action space eventually discretized finely less promising areas.
general idea adaptive discretization appeared prior work MAB (Kleinberg,
Slivkins, & Upfal, 2008; Bubeck, Munos, Stoltz, & Szepesvari, 2011a; Slivkins, 2014, 2011),
approach adaptive discretization new problem-specific. main difficulty,
compared prior work, algorithm given information links
observable numerical structure contracts expected utilities thereof.
analyze performance, propose concept called width dimension measures
nice particular problem instance is. show AgnosticZooming achieves
regret sublinear time horizon problem instances small width dimension.
particular, width dimension d, achieves regret O(log (d+1)/(d+2) )
rounds. problem instances large width dimension, AgnosticZooming matches
performance naive algorithm uniformly discretizes space runs
1. tasks, labeling websites relevant particular search query not, verifying
quality work may difficult completing task. tasks assigned batches,
batch containing one instances correct answer already known (often called
gold data). Quality-contingent payments based known instances.

318

fiAdaptive Contract Design Crowdsourcing Markets

standard bandit algorithm. illustrate general results via corollaries special
cases, including high-low example described above. support theoretical results
simulations.
Further, consider special case setting worker chooses whether
accept reject given task. special case corresponds dynamic task pricing
problem previously studied literature. results significantly improve prior
work problem.
contributions summarized follows. define broad, practically important setting crowdsourcing markets; identify novel problem-specific structure,
algorithm regret bounds; distill ideas prior work work
structures; argue approach productive deriving corollaries comparing
prior work; identify analyze specific examples theory applies.
main conceptual contributions model adaptive discretization approach
mentioned above. Finally, paper prompts research dynamic contract design
along several directions outline conclusion.
1.1 Related Work
work builds three areas research. First, model viewed multi-round
version classical principal-agent model contract theory (Laffont & Martimort,
2002). single round model corresponds basic principal-agent setting,
adverse selection (unknown workers type) moral hazard (unobservable workers decisions). Unlike much existing work contract theory, prior worker types
known principal, may learned time. Accordingly, techniques
different employed contract theory.
Second, methods build developed rich literature MAB
continuous outcome spaces. closest line work Lipschitz MAB (Kleinberg
et al., 2008), algorithm given distance function arms,
expected rewards arms assumed satisfy Lipschitz-continuity (or relaxation
thereof) respect distance function (Agrawal, 1995; Kleinberg, 2004; Auer,
Ortner, & Szepesvari, 2007; Kleinberg et al., 2008; Bubeck et al., 2011a; Slivkins, 2014).
related techniques idea adaptive discretization (Kleinberg et al., 2008;
Bubeck et al., 2011a; Slivkins, 2014), particular, zooming algorithm (Kleinberg
et al., 2008; Slivkins, 2014). However, zooming algorithm cannot applied directly
setting required numerical similarity information immediately
available. problem arises web search advertising, natural
assume algorithm observe tree-shaped taxonomy arms (Kocsis &
Szepesvari, 2006; Munos & Coquelin, 2007; Pandey, Agarwal, Chakrabarti, & Josifovski,
2007) used explicitly reconstruct relevant parts underlying metric
space (Slivkins, 2011; Bull, 2013). take different approach, using notion virtual
width estimate similarity information. Explicit comparisons results
prior MAB work made throughout paper.
Finally, work follows several theoretical papers pricing crowdsourcing
markets (Kleinberg & Leighton, 2003; Badanidiyuru, Kleinberg, & Singer, 2012; Singer
& Mittal, 2013; Singla & Krause, 2013; Badanidiyuru, Kleinberg, & Slivkins, 2013).
319

fiHo, Slivkins, & Vaughan

particular, Badanidiyuru et al. (2012) Singla Krause (2013) study version
setting simple, single-price contracts (independent output), focus
dealing global budget constraint.
thorough literature review (including discussion related empirical
work) found Section 9.

2. Setting: Dynamic Contract Design Problem
section, formally define problem set solve discuss
implications several aspects model.
2.1 Model
start describing static model, captures happens single round
interaction requester worker. described above, version
standard principal-agent model (Laffont & Martimort, 2002). define dynamic
model, extension static model multiple rounds, new worker arriving
round. detail objective pricing algorithm simplifying
assumptions make throughout paper. Finally, compare setting
classic multi-armed bandit problem.
2.1.1 Static Model
begin description occurs interaction requester
single worker. requester first posts task may completed worker,
contract specifying worker paid completes task. task
completed, requester pays worker specified contract, requester
derives value completed task; normalization, assume value derived
[0, 1]. requesters utility given task value minus payment
worker.
worker observes contract decides whether complete task,
chooses level effort exert, turn determines cost (in terms time,
energy, missed opportunities) distribution quality work. model
quality, assume (small) finite set possible outcomes result
worker completing task (or choosing complete it), realized outcome
determines value requester derives task. realized outcome
observed requester, contract requester offers mapping
outcomes payments worker.
emphasize two crucial (and related) features principal-agent model:
mapping effort level outcomes randomized, effort level
directly observed requester. line standard observation
crowdsourcing even honest, high-effort workers occasionally make errors.
workers utility given task payment requester minus
cost corresponding chosen effort level. Given contract offered, worker
chooses effort level strategically maximize expected utility. Crucially,
chosen effort level directly observable requester.
320

fiAdaptive Contract Design Crowdsourcing Markets

workers choice perform task modeled separate effort level zero
cost (called null effort level) separate outcome zero value zero payment
(called null outcome) null effort level deterministically leads null
outcome, effort level lead outcome.
mapping outcomes requesters value called requesters value
function. mapping effort levels costs called cost function,
mapping effort levels distributions outcomes called production function.
purposes paper, worker completely specified two functions;
say cost function production function comprise workers type. Unlike
traditional versions principal-agent problem, setting workers type
observable requester, prior given.
2.1.2 Dynamic Model
dynamic model consider paper natural extension static model
multiple rounds multiple workers. still concerned single requester.
round, new worker arrives. assume stochastic environment
workers type round i.i.d. sample fixed unknown distribution
types, called supply distribution. requester posts new task contract
task. tasks type, sense set possible effort
levels set possible outcomes tasks. worker strategically
chooses effort level maximize expected utility task. Based
chosen effort level workers production function, outcome realized.
requester observes outcome (but workers effort level) pays worker
amount specified contract. type arriving worker never revealed
requester. requester adjust contract one round another, total
utility sum utility rounds. simplicity, assume number
rounds known advance, though assumption relaxed using standard
doubling trick (Cesa-Bianchi & Lugosi, 2006) full executions algorithm
repeated phases exponentially increasing time horizons.
2.1.3 Dynamic Contract Design Problem
Throughout paper, take point view requester interacting workers
dynamic model. algorithms examine dynamically choose contracts offer
round goal maximizing requesters expected utility. problem
instance consists several quantities, known algorithm,
not. known quantities number outcomes, requesters value
function, time horizon (i.e., number rounds). latent quantities
number effort levels, set worker types, supply distribution. algorithm
adjusts contract round round observes realized outcomes receives
feedback.
focus contracts bounded (offer payments [0, 1]), monotone (assign
equal higher payments outcomes higher value requester). Let X
set bounded, monotone contracts. compare given algorithm given
subset candidate contracts Xcand X. Letting OPT(Xcand ) optimal utility
321

fiHo, Slivkins, & Vaughan

contracts Xcand , goal minimize algorithms regret R(T |Xcand ), defined
OPT(Xcand ) minus algorithms expected utility.
subset Xcand may finite infinite, possibly Xcand = X. natural
example finite Xcand set bounded, monotone contracts payments
integer multiples > 0; call uniform mesh granularity ,
denote Xcand ().
2.1.4 Notation
Let v() value function requester, v() denoting value outcome .
Let set outcomes let number non-null outcomes.
index outcomes = {0, 1, 2 , . . . , m} order increasing value (ties broken
arbitrarily), convention 0 null outcome.
Let ci () () cost function production function type i.
cost choosing effort level e ci (e),
Pthe probability obtaining outcome
chosen effort e (|e). Let (|e) = 0 ( 0 |e) probability obtaining
outcome least good chosen effort e.
Recall contract x function outcomes (non-negative) payments.
contract x offered worker sampled i.i.d. supply distribution, V (x)
expected value requester, P (x) 0 expected payment, U (x) = V (x)P (x)
expected utility requester. Let OPT(Xcand ) = supxXcand U (x).
2.1.5 Assumption: First-Order Stochastic Dominance (FOSD)
Given two effort levels e e0 , say e FOSD e0 type (|e) (|e0 )
outcomes , strict inequality least one outcome.2 say type
satisfies FOSD assumption two distinct effort levels, one effort level FOSD
type i. assume types satisfy assumption.
2.1.6 Assumption: Consistent Tie-Breaking
multiple effort levels maximize expected utility given worker contract x,
assume tie broken consistently sense worker chooses effort
level contract leads particular tie. assumption minor;
avoided (with minor technical complications) adding random perturbations
contracts. assumption implicit throughout paper.
2.2 Discussion
jumping results, discuss implications several aspects model
detail.
2.2.1 Number Outcomes
results assume small number outcomes. regime important practice
several reasons. First, tasks naturally small number outcomes.
2. mimics standard notion FOSD two distributions linearly ordered set.

322

fiAdaptive Contract Design Crowdsourcing Markets

example, binary labeling task four possible outcomes completed:
{yes/no} {correct/incorrect}. Second, often makes sense group together multiple
outcomes similar value requester (such false positives false negatives)
value known precisely. added benefit contracts become
simpler workers perspective. Third, even task completed many
different ways, quality may difficult evaluate fine granularity; good example
translation sentence. Fourth, even fine-grained quality evaluation exists,
error count speech transcription tasks, may difficult make consistent
across different tasks.
Even = 2 non-null outcomes, setting studied before. special
case = 1 equivalent dynamic pricing problem Kleinberg Leighton
(2003); obtain improved results it, too.
2.2.2 Benchmark
benchmark OPT() considers contracts bounded monotone. practice,
restricting contracts may appealing human parties involved. However,
restriction without loss generality: problem instances monotone
contracts optimal; see Appendix example. Further, clear whether
bounded monotone contracts optimal among monotone contracts.
benchmark OPT(Xcand ) relative given set Xcand , typically finite
discretization contract space. two reasons this. First, crowdsourcing platforms may require payments multiples minimum unit (e.g., one
cent), case natural restrict attention contracts satisfying
constraint. Second, achieving guarantees relative OPT(X) full generality
problem appears beyond reach techniques. many machine learning
scenarios, useful consider restricted benchmark set set alternatives compare to.3 settings, considered important handle arbitrary benchmark sets,
do.
One known approach obtain guarantees relative OPT(X) start
finite Xcand X, design algorithm guarantees relative OPT(Xcand ), then,
separate result, bound discretization error OPT(X) OPT(Xcand ). choice
Xcand drives tradeoff discretization error regret R(T |Xcand ),
one choose Xcand optimize tradeoff. However, one upper-bound
discretization error (very) simple special cases (see Section 5), unclear whether
extended full generality dynamic contract design.
2.2.3 Alternative Worker Models
One crucial tenets model workers maximize expected utility.
rationality assumption standard economics, often used make
problem amenable rigorous analysis. However, considerable literature
suggesting practice workers may deviate rational behavior. Thus,
worth pointing results rely heavily rationality assumption.
3. particularly relevant analogy contextual bandits policy sets (Dudik, Hsu, Kale, Karampatziakis,
Langford, Reyzin, & Zhang, 2011).

323

fiHo, Slivkins, & Vaughan

FOSD assumption (which fairly standard) circumvented, too. fact,
assumptions regarding worker behavior serve enable us prove Lemma 3.1,
specifically guarantee collective worker behavior satisfies natural
increment payment property used proof Lemma 3.1: requester increases
increment payment particular outcome (as described next section),
probability obtaining outcome least good increases. particular,
property consistent worker behavior takes account long-term effects
changes reputation scores. consistent workers acting upon subjective
(and possibly incorrect) beliefs offered contract, beliefs
guaranteed base payment may actually depend quality submitted work.4
2.2.4 Minimum Wage
ethical legal reasons one may want enforce form minimum wage.
expressed within model minimal payment completed task, i.e.,
non-null outcome. algorithm easily modified accommodate
constraint. Essentially, suffices restrict action space contracts pay least
completed task. Formally, increment space defined Section 3
[, 1] [0, 1]m1 rather [0, 1]m , quadrants cell defined
splitting cell half dimension. results easily carry version
(restricting Xcand contracts pay least completed task). omit
discussion issue sake simplicity.
2.2.5 Comparison Multi-Armed Bandits (MAB)
Dynamic contract design modeled special case MAB problem
additional, problem-specific structure. basic MAB problem defined follows.
algorithm repeatedly chooses actions fixed action space collects rewards
chosen actions; available actions traditionally called arms. specifically, time
partitioned rounds, round algorithm selects arm receives
reward chosen arm. information, reward algorithm
would received choosing alternative arm, revealed. MAB problem
stochastic rewards, reward arm given round i.i.d. sample
distribution depends arm round. standard measure
algorithms performance regret respect best fixed arm, defined
difference expected total reward benchmark (usually best fixed arm)
algorithm.
Thus, dynamic contract design naturally modeled MAB problem
stochastic rewards, arms correspond monotone contracts. prior work
MAB large infinite action spaces often assumes known upper bounds similarity arms. precisely, prior work would assume algorithm given
metric contracts expected rewards Lipschitz-continuous respect
4. worker model incorporates subjective beliefs suggested Ho, Slivkins, Suri,
Vaughan (2015) based experimental evidence, model satisfies increment payment property
mentioned above.

324

fiAdaptive Contract Design Crowdsourcing Markets

D, i.e., upper bounds |U (x)U (y)| D(x, y) two contracts x, y.5 However,
setting upper bounds absent. hand, problem
auxiliary structure compared standard MAB setting. particular, algorithms
reward decomposes value payment, determined outcome,
turn probabilistically determined workers strategic choice effort
level. Effectively, auxiliary structure provides soft information similarity
contracts, sense numerically similar contracts usually (but always)
induce similar response workers.
2.2.6 Applicability Model
Despite considerable generality, model somewhat idealized. Let us discuss several
potential concerns regarding applicable realistic model is.
implicit intuition behind using performance-based payments incentivize better quality. growing empirical literature incentives crowdsourcing markets
finds happens types tasks others. particular, experiments work Ho et al. (2015) suggest happens task
effort-responsive, sense one obtain higher quality work increasing effort,
effort levels costly worker. observation consistent
worker model: indeed, effort-responsiveness task joint property production
function cost function implies significant response sufficiently increased
quality-based payments. Ho et al. propose pilot experiments determine whether given
type tasks effort-responsive, turn would shed light whether use qualitybased payments tasks practice. comprehensive discussion related
empirical work found Section 9. observe model results
single non-null outcome applicable novel even task effort-responsive.
Following bulk prior work dynamic pricing MAB, assume
collective worker response given contract, given distribution outcomes,
depend contracts offered past, algorithm used
choose future contracts. Thus, model possibility price experimentation
may alter future worker responses, workers may try game system.
effects easy model extremely difficult analyze, even relatively
simple scenario single non-null outcome emphasis adaptive discretization.
Additionally, available empirical work provide sufficient guidance
choose realistic model effects among theoretically plausible alternatives.
leave future work.
MAB point view, model incorporate possibility
worker response may intrinsically change time, fact requesters may
hard budget constraints total amount money spend. reflects
limitations state-of-the-art work MAB: adaptive discretization, budgets, adversarial change time fairly well-understood separately, two (let
alone three) studied jointly. said, conjecture techniques
would useful generalizing dynamic pricing dynamic contract design richer
settings.
5. upper bound informative D(x, y) < 1.

325

fiHo, Slivkins, & Vaughan

Likewise, model scenario requesters stream tasks overwhelms
crowdsourcing market causes drastic change available worker population
(and therefore worker response). particular, assume worker pool
sufficiently large accommodate requester. relatively benign assumption
large crowdsourcing system.
deploy dynamic selection prices contracts practice (regardless particular
algorithm used) crowdsourcing platform needs enable requesters change
prices/contracts relatively fast response observed worker responses. feature
currently instrumented commercial platforms Amazon Mechanical Turk,
appears easily implementable engineering point view. believe main
hurdle would incorporate dynamic price/contract selection overall economic
design market. Given multitude existing crowdsourcing markets relative
ease deploying new market designs, believe direction well worth studying.

3. Algorithm: AgnosticZooming
section, specify algorithm. call AgnosticZooming zooms
promising areas action space, without knowing precise
measure similarity contracts. zooming viewed dynamic
form discretization. stating algorithm itself, discuss discretization
action space detail, laying groundwork approach.
3.1 Discretization Action Space
round, AgnosticZooming algorithm partitions action space several regions chooses among regions, effectively treating region meta-arm.
section, discuss subsets action space used regions, introduce
useful notions properties subsets.
3.1.1 Increment Space Cells
describe approach discretization, useful think contracts terms
increment payments. Specifically, represent monotone contract x : [0, )
vector x [0, )m , number non-null outcomes x = x()x( 1)
0 non-null outcome . (Recall convention 0 null outcome
x(0) = 0.) call vector increment representation contract x, denote
incr(x). Note x bounded, incr(x) [0, 1]m . Conversely, call contract
weakly bounded monotone increment representation lies [0, 1]m .
contract necessarily bounded.
discretize space weakly bounded contracts, viewed multi-dimensional
unit cube. precisely, define increment space [0, 1]m convention
every vector represents corresponding weakly bounded contract. region discretization closed, axis-aligned m-dimensional cube increment space; henceforth,
cubes called cells. size cell length one side. cell called
relevant contains least one candidate contract. relevant cell called atomic
contains exactly one candidate contract, composite otherwise.
326

fiAdaptive Contract Design Crowdsourcing Markets

composite cell C, algorithm use two contracts: maximal corner,
denoted x+ (C), increment payments maximal, minimal corner,
denoted x (C), increment payments minimal. two contracts
called anchors C. atomic cell C, algorithm use one contract:
unique candidate contract, called anchor C. Note anchors
necessarily candidate contracts.
3.1.2 Virtual Width
take advantage problem structure, essential estimate similar
contracts within given composite cell C are. Ideally, would know maximal
difference expected utility:
width(C) = supx,yC |U (x) U (y)| .
estimate width using proxy, called virtual width, expressed terms
anchors:


VirtWidth(C) = V (x+ (C)) P (x (C)) V (x (C)) P (x+ (C)) .
(1)
definition one crucial place problem structure used. (Note
difference utility anchors.) useful due following lemma (proved
Section 3.3).
Lemma 3.1. types satisfy FOSD assumption consistent tie-breaking holds,
width(C) VirtWidth(C) composite cell C.
Recall proof lemma place paper use
assumptions worker behavior. developments hold model worker
behavior satisfies Lemma 3.1.
3.2 Description Algorithm
ideas place, ready describe algorithm. high-level
outline AgnosticZooming simple. algorithm maintains set active cells
cover increment space times. Initially, single active cell
comprising entire increment space. round t, algorithm chooses one active
cell Ct using upper confidence index posts contract xt sampled uniformly random
among anchors cell. observing feedback, algorithm may choose
zoom Ct , removing Ct set active cells activating relevant quadrants
thereof, quadrants cell C defined 2m sub-cells half size
one corners center C. remainder section, specify
cell Ct chosen (the selection rule), algorithm decides whether zoom
Ct (the zooming rule).
Let us first introduce notation. Consider cell C active round t. Let
U (C) expected utility single round C chosen algorithm,
i.e., average expected utility anchor(s) C. Let nt (C) number times
cell chosen round t. Consider rounds C chosen
327

fiHo, Slivkins, & Vaughan

algorithm round t. Let Ut (C) average utility rounds.
composite cell C, let Vt+ (C) Pt+ (C) average value average payment
rounds anchor x+ (C) chosen. Similarly, let Vt (C) Pt (C) average
value average payment rounds anchor x (C) chosen. Accordingly,
estimate virtual width composite cell C time


Wt (C) = Vt+ (C) Pt (C) Vt (C) Pt+ (C) .
(2)
bound deviations, define confidence radius
p
radt (C) = crad log(T )/nt (C),

(3)

absolute constant crad ; analysis, crad 16 suffices. show
high probability sample averages defined stay within radt (C) respective
expectations. high probability event holds, width estimate Wt (C) always
within 4 radt (C) VirtWidth(C).
algorithm pseudocode summarized Algorithm 1. selection rule
zooming rule explained detail below.
ALGORITHM 1: AgnosticZooming
Inputs: subset Xcand X candidate contracts.
Data structure: Collection cells. Initially, = { [0, 1]m }.
round = 1
Let Ct = argmaxCA (C), () defined Equation (4).
Sample contract xt u.a.r. among anchors Ct . \\ Anchors defined Section 3.1.
Post contract xt observe feedback.
|Ct Xcand | > 1 5 radt+1 (Ct ) < Wt+1 (Ct )
{all relevant quadrants Ct } \ {Ct }. \\ C relevant |C Xcand | 1.

3.2.1 Selection Rule
selection rule follows. round t, algorithm chooses active cell C
maximal index (). (C) upper confidence bound expected utility
candidate contract C, defined
(
Ut (C) + radt (C)
C atomic cell,
(C) =
(4)
Ut (C) + Wt (C) + 5 radt (C) otherwise.
nt (C) = 0, Ut (C) Wt (C) initialized finite values. Since radt (C)
infinite nt (C) = 0, AgnosticZooming first select cell never selected
time t.
3.2.2 Zooming Rule
zoom composite cell Ct
Wt+1 (Ct ) > 5 radt+1 (Ct ),
328

fiAdaptive Contract Design Crowdsourcing Markets

i.e., uncertainty due random sampling, expressed confidence radius, becomes
sufficiently small compared uncertainty due discretization, expressed virtual
width. never zoom atomic cells.
3.2.3 Notes Integer Payments
practice may necessary allow contracts payments integer
multiples amount , e.g., whole cents. (In case assume candidate
contracts property, too.) redefine two anchors composite
cell: maximal (resp., minimal) anchor nearest allowed contract maximal
(resp., minimal) corner. Width redefined supremum allowed contracts
given cell. modifications, analysis goes without significant
changes. omit discussion issue.
3.3 Proof Lemma 3.1 (virtual width)
two vectors x, x0 <m , write x0 x x0 pointwise dominates x, i.e., x0j xj
j. two monotone contracts x, x0 , write x0 x incr(x0 ) incr(x).
Claim 3.2. Consider worker whose type satisfies FOSD assumption two weakly
bounded contracts x, x0 x0 x. Let e (resp., e0 ) effort levels exerted
worker offered contract x (resp., x0 ). e FOSD e0 .
Proof. sake contradiction, assume e FOSD e0 . Note e 6= e0 .
Let workers type. Recall (|e) denotes probability generating
outcome 0 given effort level e. Define F = ( (1|e) , . . . , (m|e) ), define F0
similarly e0 .
Let x x0 increment representations x x0 . Given contract x,
workers expected utility effort level e Ui (x|e) = x F ci (e). Since e optimal
effort level given contract, Ui (x|e) Ui (x|e0 ), therefore
x F x F0 ci (e) ci (e0 ).
Similarly, since e0 optimal effort level given contract x0 ,
x0 F0 x0 F ci (e0 ) ci (e).
Combining two inequalities, obtain
(x x0 ) (F F0 ) 0.

(5)

Note Equation (5) holds equality Ui (x|e) = Ui (x|e0 ) Ui (x0 |e) =
Ui (x0 |e0 ), worker breaks tie e e0 different way two different
contracts. contradicts consistent tie-breaking assumption. However, Equation (5)
cannot hold strict equality, either, x0 x (since e FOSD e0 )
F F0 (|e) > (|e0 ) outcome > 0. Therefore obtain
contradiction, completing proof.
proof Claim 3.2 place paper directly use consistent
tie-breaking assumption. (But rest paper relies claim.)
329

fiHo, Slivkins, & Vaughan

Claim 3.3. Assume types satisfy FOSD assumption. Consider weakly bounded
contracts x, x0 x0 x. V (x0 ) V (x) P (x0 ) P (x).
Proof. Consider worker, let type. Let e e0 chosen effort levels
contracts x x0 , respectively. FOSD assumption, either e = e0 , e0 FOSD
e, e FOSD e0 . Claim 3.2 rules latter possibility.
Define vectors F F0 proof Claim 3.2. Note F0 F.
P = x F P 0 = x0 F0 expected payment contracts x x0 ,
respectively. Further, letting v denote increment representation requesters value
outcome, V = v F V 0 = v F0 expected requesters value contracts
x x0 , respectively. Since x0 x F0 F, follows P 0 P V 0 V . Since
holds worker, holds expectation workers.
finish proof Lemma 3.1, consider composite cell C anchors x+ =
x = x (C), fix contract x C. Since x+ x x , Claim 3.3
follows V (x+ ) V (x) V (x ) P (x+ ) P (x) P (x ). Therefore |U (x)
U (y)| VirtWidth(C). Taking supremum x C over, obtain width(C)
VirtWidth(C), claimed.
x+ (C)

4. Regret Bounds Discussion
present main regret bound AgnosticZooming. Formulating result requires
new, problem-specific structure. Stated terms structure, result somewhat difficult access. explain significance, state several corollaries, compare
results prior work.
4.1 Main Result
start main regret bound. algorithm itself, regret bound parameterized set Xcand candidate contracts; goal bound algorithms
regret respect candidate contracts.
Recall OPT(Xcand ) = supxXcand U (x) optimal expected utility candidate
contracts. algorithms regret respect candidate contracts R(T |Xcand ) =
OPT(Xcand ) U , time horizon U expected cumulative utility
algorithm.
Define badness (x) contract x X difference expected utility
optimal candidate contract x: (x) = OPT(Xcand ) U (x). Let X = {x Xcand :
(x) }.
interested cells potentially used AgnosticZooming.
Formally, recursively define collection feasible cells follows: (i) cell [0, 1]m
feasible, (ii) feasible cell C, relevant quadrants C feasible. Note
definition feasible cell implicitly depends set Xcand candidate contracts:
definition, feasible cell one contains candidate contract.
Let F denote collection feasible, composite cells C VirtWidth(C)
. Xcand , let F (Y ) collection cells C F overlap ,
let N (Y ) = |F (Y )|; sometimes write N (Y |Xcand ) place N (Y ) emphasize
dependence Xcand .
330

fiAdaptive Contract Design Crowdsourcing Markets

Using structure defined above, main theorem stated follows. prove
theorem Section 6.
Theorem 4.1. Consider dynamic contract design problem types satisfying
FOSD assumption constant number outcomes. Consider AgnosticZooming, parameterized set Xcand candidate contracts. Assume max(2m + 1, 18).
absolute constant 0 > 0 > 0,
X

R(T |Xcand ) + O(log )

=2j : jN

N 0 (X |Xcand )
.


(6)

Remark 1. discussed Section 2.2, target practically important case small
number outcomes. impact larger exponential dependence
O() notation, and, importantly, increased number candidate policies (typically
exponential given granularity).
Remark 2. regret bounds depend number worker types, line
prior work dynamic pricing. Essentially, bandit approaches tend
depend expected reward given arm (and perhaps variance),
finer properties distribution.
Equation (6) shape similar several regret bounds literature,
discussed below. make apparent, observe regret bounds bandits
metric spaces often stated terms covering numbers. (For fixed collection
F subsets given ground set X, covering number subset X relative
F smallest number subsets F sufficient cover .) numbers
N (Y |Xcand ) are, essentially, covering feasible cells virtual width close
. make point precise follows. Let -minimal cell cell F
contain cell F . Let Nmin (Y ) covering number relative
collection -minimal cells, i.e., smallest number -minimal cells sufficient
cover .
N (Y ) dlog 1 e Nmin (Y ) Xcand 0,

(7)

smallest size feasible cell.6 Thus, Equation (6) easily restated
using covering numbers Nmin () instead N ().
4.2 Corollary: Polynomial Regret
Literature regret-minimization often states polynomial regret bounds form
R(T ) = O(T ), < 1. covering-number regret bounds precise versatile, exponent polynomial regret bound expresses algorithms performance
particularly succinct lucid way.
bandits metric spaces exponent typically determined appropriately defined notion dimension, covering dimension,7 succinctly
6. prove Equation (7), observe cell C F (Y ) exists -minimal cell C 0 C,
-minimal cell C 0 exist dlog 1 e cells C F (Y ) C 0 C.
7. Given covering numbers N (), covering dimension smallest 0 N (Y ) =
O(d ) > 0.

331

fiHo, Slivkins, & Vaughan

captures difficulty problem instance. Interestingly, dependence
dimension typically shape; = (d + 1)/(d + 2), several different notions
dimension. line tradition, define width dimension:
n

WidthDim = inf 0 : N 0 (X |Xcand ) > 0 , > 0.
(8)
Note width dimension depends Xcand problem instance, parameterized constant > 0. optimizing choice Equation (6), obtain
following corollary.
Corollary 4.2. Consider setting Theorem 4.1. > 0, let = WidthDim .

R(T |Xcand ) O( log ) (1+d)/(2+d) .

(9)

width dimension similar zooming dimension work Kleinberg
et al. (2008) near-optimality dimension work bandits metric spaces
(Bubeck et al., 2011a).
4.3 Comparison Prior Work
compare results previous work non-adaptive discretization bandits
metric spaces.
4.3.1 Non-Adaptive Discretization
One approach prior work directly applicable dynamic contract design
problem non-adaptive discretization. algorithm, call NonAdaptive,
runs off-the-shelf MAB algorithm, treating set candidate contracts Xcand arms.8
concreteness, following prior work (Kleinberg & Leighton, 2003; Kleinberg,
2004; Kleinberg et al., 2008), use well-known algorithm UCB1 (Auer, Cesa-Bianchi, &
Fischer, 2002) off-the-shelf MAB algorithm.
compare AgnosticZooming NonAdaptive, useful derive several worstcase corollaries Theorem 4.1, replacing N (X ) various (loose) upper bounds.9
Corollary 4.3. setting Theorem 4.1, regret AgnosticZooming upperbounded follows:
P
(a) R(T |Xcand ) + =2j : jN O(|X | /), (0, 1).
p
(b) R(T |Xcand ) O( |Xcand |).
O() notation hides logarithmic dependence .
best known regret bounds NonAdaptive coincide Corollary 4.3
poly-logarithmic factors. However, regret bounds Theorem 4.1 may significantly
better ones Corollary 4.3. discuss next section,
context specific example.
8. simplify proofs lower bounds, assume candidate contracts randomly
permuted given MAB algorithm.
9. use facts X Xcand , N (Y ) N0 (Y ), N0min (Y ) |Y | subsets X.

332

fiAdaptive Contract Design Crowdsourcing Markets

4.3.2 Bandits Metric Spaces
Consider variant dynamic contract design algorithm given priori
information similarity contracts: function : Xcand Xcand [0, 1]
|U (x) U (y)| D(x, y) two candidate contracts x, y. algorithm given
function (call algorithm D-aware), machinery bandits metric spaces
(Kleinberg et al., 2008; Bubeck et al., 2011a) used perform adaptive discretization
obtain significant advantage NonAdaptive. argue obtain similar
results AgnosticZooming without knowing D.
practice, similarity information would coarse, probably aggregated according
predefined hierarchy. formalize idea, hierarchy represented
collection F subsets Xcand , D(x, y) function smallest subset
F containing x y. hierarchy F natural given structure
contract space. One natural hierarchy collection feasible cells,
corresponds splitting cells half dimension. Formally, D(x, y) = f (Cx,y )
f f (Cx,y ) width(Cx,y ), Cx,y smallest feasible cell containing
x y.
Given shape D, let us state regret bounds D-aware algorithms work
Kleinberg et al. (2008) Bubeck et al. (2011a). simplify notation, assume
action space restricted Xcand . regret bounds similar shape
Theorem 4.1:
R(T |Xcand ) + O(log )

(X )
N()


X
=2j :

jN



,

(10)

numbers N () similar high-level meaning N (), nearly coincide
Nmin () D(x, y) = VirtWidth(Cx,y ). One use Equation (10) derive
polynomial regret bound Equation (9).
precise comparison, focus results work Kleinberg et al.
(2008). (The regret bounds Bubeck et al., 2011a similar spirit, stated
terms slightly different structure.) covering-type regret bound work
Kleinberg et al. (2008) focuses balls radius according distance D,
N (Y ) smallest number balls sufficient cover . special case
D(x, y) = VirtWidth(Cx,y ) balls radius precisely feasible cells virtual width
. similar (albeit technically same) -minimal cells
definition Nmin ().
Further, covering numbers N (Y ) determine zooming dimension:
n


ZoomDim = inf 0 : N/8
(X ) > 0 , > 0.
(11)
definition coincides covering dimension worst case, much
smaller nice problem instances X significantly small subset Xcand .
definition, one obtains polynomial regret bound version Equation (9) = ZoomDim .
conclude AgnosticZooming essentially matches regret bounds D-aware
algorithms, despite fact D-aware algorithms access much information.
333

fiHo, Slivkins, & Vaughan

5. Special Case: High-Low Example
apply machinery Section 4 special case, show AgnosticZooming
significantly outperforms NonAdaptive.
basic special case one non-null outcome. Essentially,
worker makes strategic choice whether accept reject given task (where reject
corresponds null effort level), choice fully observable. setting
studied (Kleinberg & Leighton, 2003; Badanidiyuru et al., 2012; Singla & Krause,
2013; Badanidiyuru et al., 2013); call dynamic task pricing. contract
completely specified price p non-null outcome. supply distribution
summarized function S(p) = Pr[accept|p], corresponding expected utility
U (p) = S(p)(v p), v value non-null outcome. special case
already quite rich, S() arbitrary non-decreasing function. using
adaptive discretization, achieve significant improvement prior work; see Section 8
discussion.
consider somewhat richer setting workers strategic decisions
observable; salient feature setting, called moral hazard contract
theory literature. two non-null outcomes (low high), two non-null effort
levels (low high). Low outcome brings zero value requester, high outcome
brings value v > 0. Low effort level inflicts zero cost worker leads low outcome
probability 1. assume workers break ties effort levels consistent
way: high better low better null. (Hence, low effort incurs zero cost,
possible outcomes low high.) call high-low example;
perhaps simplest example features moral hazard.
example, workers type consists pair (ch , h ), ch 0 cost
high effort h [0, 1] probability high outcome given high effort. Note
dynamic task pricing equivalent special case h = 1.
following claim states crucial property high-low example.
Claim 5.1. Consider high-low example fixed supply distribution. probability obtaining high outcome given contract x Pr[high outcome | contract x] depends
p = x(high) x(low); denote probability S(p). Moreover, S(p) non-decreasing
p. Therefore:
expected utility U (x) = S(p)(v p) x(low).
discretization error OPT(X) OPT(Xcand ()) 3, > 0.
bound discretization error, essential S(p) non-decreasing p.
Recall Xcand (), uniform mesh granularity > 0, consists bounded,
monotone contracts payments N.
purposes, supply distribution summarized via function S(). Denote
U (p) = S(p)(v p). Note U (x) maximized setting x(low) = 0, case
U (x) = U (p). Thus, algorithm knows given high-low example, set
x(low) = 0, thereby reducing dimensionality search space. problem
essentially reduces dynamic task pricing S().
However, general algorithm know whether presented highlow example (because effort levels observable). follows
consider algorithms restrict x(low) = 0.
334

fiAdaptive Contract Design Crowdsourcing Markets

5.1 Nice Supply Distribution
focus supply distribution nice, sense S() satisfies
following two properties:
S(p) Lipschitz-continuous: |S(p) S(p0 )| L|p p0 | constant L.
U (p) strongly concave, sense U 00 () exists satisfies U 00 () C < 0.
L C absolute constants. call strongly Lipschitz-concave.
properties fairly natural. example, satisfied h
worker types marginal distribution ch piecewise uniform
density 1 , absolute constant 1.
show choice Xcand X, AgnosticZooming small width dimension
setting, therefore small regret.
Lemma 5.2. Consider high-low example strongly Lipschitz-concave supply distribution. width dimension 21 , given Xcand X. Therefore,
AgnosticZooming Xcand regret R(T |Xcand ) = O(log ) 3/5 .
contrast performance NonAdaptive, parameterized natural
choice Xcand = Xcand (). focus R(T |X): regret w.r.t. best contract X.
show AgnosticZooming achieves R(T |X) = O(T 3/5 ) wide range Xcand , whereas
NonAdaptive cannot better R(T |X) = O(T 3/4 ) Xcand = Xcand (), > 0.
Lemma 5.3. Consider setting Lemma 5.2. Then:
(a) AgnosticZooming Xcand Xcand (T 2/5 ) regret R(T |X) = O(T 3/5 log ).
(b) NonAdaptive Xcand = Xcand () cannot achieve regret R(T |X) < o(T 3/4 )
problem instances, > 0. 10

5.2 Proofs
Proof Claim 5.1. Consider contract x x(low) = b x(high) = b + p,
worker type (ch , h ). worker exerts high effort, pays cost ch receives
expected payment h (p + b) + (1 h )b, total expected payoff ph + b ch .
expected payoff exerting low effort b. Therefore choose exert high effort
ph + b ch b, i.e., ch /h p, choose exert low effort otherwise.
Therefore


Pr[high outcome | contract x] = E h 1{ch /h p} .
(ch ,h )

function p, call S(p). Moreover, non-decreasing function simply
expression inside expectation non-decreasing p.
trivially follows U (x) = S(p)(v p) x(low).
upper-bound discretization error using standard approach work
dynamic pricing (Kleinberg & Leighton, 2003). Fix discretization granularity > 0.
> 0, exists contract x X OPT(X) U (x ) < . Round x (high)
10. lower bound holds even UCB1 NonAdaptive replaced MAB algorithm.

335

fiHo, Slivkins, & Vaughan

x (low) down, respectively, nearest integer multiple ; let x Xcand ()
resulting contract. Denoting p = x(high) x(low) p = x (high) x (low),
see p p p + 2. follows
U (x) U (x ) 3 OPT(X) 3.
Since holds > 0, conclude OPT(X) OPT(Xcand ()) 3.
Proof Lemma 5.2. calculate width dimension, need count number
feasible cells increment space (i) virtual width larger equal
O() (ii) overlap X , set contracts badness smaller .
first characterize X . use xp,b denote contract x(high) = p + b
x(low) = b. benefit representation that, p b would two axes
increment space. Let xp ,0 optimal contract. Since U (xp,b ) strongly concave
p, know b, exist constants c1 c2 p [0, 1],
c1 (p p)2 U (xp ,b ) U (xp,b ) c2 (p p)2 . know U (xp ,b ) = U (xp ,0 ) b.
Therefore.
X = {xp,b : (p p )2 + b O()}
write


X = {xp,b : p h ( ) p p + h ( ) b O()}

Intuitively, X contains contracts {xp,b } p O( ) away p b O()
away b = 0.
Next characterize virtual width cell. use Cp,b,d denote cell
size anchors {xp,b , x(p+d),(b+d) }. derive expected payment value
two anchors as:
P + (Cp,b,d ) = (p + d)S(p + d) + b +
V + (Cp,b,d ) = vS(p + d)
P (Cp,b,d ) = pS(p) + b
V (Cp,b,d ) = vS(p)
definition, get (we use dF represent S(p + d) S(p) simplification)
VirtWidth(Cp,b,d ) = (v + p)dF + dS(p) + dF + d.
count number feasible cells virtual width larger h ()
overlaps X . Note since total number feasible cells Cp,b,d large
small, treat number cells large constant. Also, relevant
cell Cp,b,d , p p . Therefore, care feasible cells Cp,b,d small
p close p .
Since S(p) Lipschitz, dF = O(d). Therefore, relevant cell Cp,d ,
VirtWidth(Cp,b,d ) = O(d)
Given two arguments, know number cells virtual width

larger overlaps X O(/) O( /) = O(1/2 ). Therefore
width dimension 1/2.
336

fiAdaptive Contract Design Crowdsourcing Markets

Proof Sketch Lemma 5.3(b). Consider version NonAdaptive runs off-theshelf MAB algorithm ALG candidate contracts Xcand = Xcand (). ALG, arms
candidate contracts; recall arms randomly permuted
given ALG.
Fix > 0. easy construct problem instance discretization error Error ,
OPT(X) OPT(Xcand ()) (). Note Xcand contains N = ( 2 ) suboptimal contracts suboptimal w.r.t. OPT(Xcand ). (For example, contracts x x(low) > 0
suboptimal.)
Fix problem instance MAB N suboptimal arms. Using standard lowerbound arguments MAB, one show one runs ALG problem instance
obtainedby randomly permuting arms I, expected regret rounds
least ( N ).

Therefore, R(T |Xcand ) ( N ). follows


R(T |X) ( N ) + Error ( / + ) (T 3/4 ).

6. Proof Main Regret Bound (Theorem 4.1)
prove main result Section 4. high-level approach define
clean execution algorithm execution high-probability events
satisfied, derive bounds regret conditional clean execution. analysis
clean execution involve probabilistic arguments. approach tends
simplify regret analysis.
start listing simple invariants enforced AgnosticZooming:
Invariant 6.1. round execution AgnosticZooming:
(a) active cells relevant,
(b) candidate contract contained active cell,
(c) Wt (C) 5 radt (C) active composite cell C.
Note zooming rule essential ensure Invariant 6.1(c).
Throughout, say algorithm activates cell cell added
collection active cells. cell stays active activated.
6.1 Analysis Randomness
Definition 6.2 (Clean Execution). execution AgnosticZooming called clean
round active cell C holds
|U (C) Ut (C)| radt (C),
|VirtWidth(C) Wt (C)| 4 radt (C)

(12)
(if C composite).

(13)

Lemma 6.3. Assume crad 16 max(1 + 2m , 18). Then:
(a) Pr [ Equation (12) holds rounds t, active cells C ] 1 2 2 .
(b) Pr [ Equation (13) holds rounds t, active composite cells C ] 1 16 2 .
Consequently, execution AgnosticZooming clean probability least 1 1/T .
337

fiHo, Slivkins, & Vaughan

Lemma 6.3 follows standard concentration inequality known Chernoff
Bounds. However, one needs careful conditioning details.
Proof Lemma 6.3(a). Consider execution AgnosticZooming. Let N total
number activated cells. Since 2m cells activated one round,
N 1 + 2m 2 . Let Cj min(j, N )-th cell activated algorithm. (If multiple
quadrants activated round, order according fixed ordering
quadrants.)
Fix feasible cell C j 2 . claim
Pr [ |U (C) Ut (C)| radt (C) rounds | Cj = C ] 1 2 4 .

(14)

Let n(C) = n1+T (C) total number times cell C chosen algorithm.
N: 1 n(C) let Us requesters utility round C
chosen s-th time. Further, let DC distribution U1 , conditional
event n(S) 1. (That is, per-round reward choosing cell C.) Let U10 , . . . , UT0
family mutually independent random variables, distribution DC .
n , conditional event {Cj = C} {n(C) = n}, tuple (U1 , . . . , Un )
joint distribution tuple (U10 , . . . , Un0 ). Consequently, applying Chernoff
Bounds latter tuple, follows

hfi

q
P

Pr fiU (C) n1 ns=1 Us n1 crad log(T ) {Cj = C} {n(C) = n}
1 2 2crad 1 2 5 .
Taking Union Bound n , plugging radt (Cj ), nt (Cj ), Ut (Cj ),
obtain Equation (14).
Now, let us keep j fixed Equation (14), integrate C. precisely, let us
multiply sides Equation (14) Pr[Cj = C] sum feasible cells C.
obtain, j 2 :
Pr [ |U (Cj ) Ut (Cj )| radt (Cj ) rounds ] 1 2 4 .

(15)

(Note obtain Equation (15), need take Union Bound
feasible cells C.) conclude, take Union Bound j 1 + 2 .
Proof Sketch Lemma 6.3(b). show



Pr fiV + (C) Vt+ (C)fi radt (C) rounds t, active composite cells C 1

4
,
T2

(16)

similarly V (), P + () P (). four statements proved similarly,
using technique Lemma 6.3(a). follows, sketch proof one
four cases, namely Equation (16).
given composite cell C, interested rounds anchor x+ (C)
selected algorithm. Letting n+
(C) number times anchor chosen
time t, let us define corresponding notion confidence radius:

1 crad log
+
radt (C) =
.
2
n+
(C)
338

fiAdaptive Contract Design Crowdsourcing Markets

technique proof Lemma 6.3(a), establish following
high-probability event:

+
fiV (C) V + (C)fi rad+ (C).
(17)


precisely, prove
Pr [ Equation (17) holds rounds t, active composite cells C ] 1 2 2 .
Further, need prove w.h.p. anchor x+ (C) played sufficiently often.
1
11
Noting E[n+
(C)] = 2 nt (C), establish auxiliary high-probability event:
n+
(C)

1
2

nt (C) 14 radt (C).

(18)

precisely, use Chernoff Bounds show that, crad 16,
Pr [ Equation (18) holds rounds t, active composite cells C ] 1 2 2 .

(19)

Now, letting n0 = (crad log )1/3 , observe
nt (C) n0
nt (C) < n0




1
n+
(C) 4 nt (C)
radt (C) 1




+
(C),

firad+t (C) rad
fiV (C) V + (C)fi radt (C).




Therefore, Equations (17) (18) hold, fiV + (C) Vt+ (C)fi radt (C).
completes proof Equation (16).
6.2 Analysis Clean Execution
rest analysis focuses clean execution. Recall Ct cell chosen
algorithm round t.
Claim 6.4. clean execution, I(Ct ) OPT(Xcand ) round t.
Proof. Fix round t, let x candidate contract. Invariant 6.1(b), exists
active cell, call Ct , contains x .
claim (Ct ) U (x ). consider two cases, depending whether Ct
atomic. Ct atomic anchor unique, U (Ct ) = U (x ), (Ct ) U (x )
clean execution. Ct composite
(Ct ) U (Ct ) + VirtWidth(Ct )


U (Ct )


U (x )

+

clean execution

width(Ct )

Lemma 3.1
definition width, since x Ct .

proved (Ct ) U (x ). Now, selection rule (Ct ) (Ct )
U (x ). Since holds candidate contract x , claim follows.
11. constant
proof.

1
4

Equation (18) enable consistent choice n0 remainder

339

fiHo, Slivkins, & Vaughan

Claim 6.5. clean execution, round t, index (Ct ) upper-bounded
follows:
(a) Ct atomic I(Ct ) U (Ct ) + 2 radt (Ct ).
(b) Ct composite I(Ct ) U (x) + O(radt (Ct )) contract x Ct .
Proof. Fix round t. Part (a) follows (Ct ) = Ut (Ct ) + radt (Ct ) definition
index, Ut (Ct ) U (Ct ) + radt (Ct ) clean execution.
part (b), fix contract x Ct . Then:
Ut (Ct ) U (Ct ) + radt (Ct )

clean execution

U (x) + width(Ct ) + radt (Ct )

definition width

U (x) + VirtWidth(Ct ) + radt (Ct )

Lemma 3.1

U (x) + Wt (Ct ) + 5 radt (Ct )

clean execution.

(Ct ) = Ut (Ct ) + Wt (Ct ) + 5 radt (Ct )

(20)

definition index

U (x) + 2 Wt (Ct ) + 10 radt (Ct )

Equation (20)

U (x) + 20 radt (Ct )

Invariant 6.1(c).

relevant cell C, define badness (C) follows. C composite, (C) =
supxC (x) maximal badness among contracts C. C atomic x C
unique candidate contract C, (C) = (x).
Claim 6.6. clean execution, (C) O(radt (C)) round active
cell C.
Proof. Claims 6.4 6.5, (Ct ) O(radt (Ct )) round t. Fix round
let C active cell round. C never selected round t, claim
trivially true. Else, let recent round C selected
algorithm. (C) O(rads (C)). claim follows since rads (C) = radt (C).
Claim 6.7. clean execution, cell C selected O(log /((C))2 ) times.
Proof. Claim 6.6, (C) O(radT (C)). claim follows definition radT
Equation (3).
Let n(x) n(C) number times contract x cell C, respectively, chosen
algorithm. regret algorithm
R(T |Xcand ) =

P

xX

n(x) (x)

P

cells C

n(C) (C).

(21)

next result (Lemma 6.8) upper-bounds right-hand side Equation (21) clean
execution. Lemma 6.3, suffices complete proof Theorem 4.1
Lemma 6.8. Consider clean execution AgnosticZooming. (0, 1),
P

cells C

n(C) (C) + O(log )
340

P

=2j : jN

|F (X2 )|
.


fiAdaptive Contract Design Crowdsourcing Markets

proof Lemma 6.8 relies simple properties (), stated below.
Claim 6.9. Consider two relevant cells C Cp . Then:
(a) (C) (Cp ).
(b) (C) > 0, C overlaps X .
Proof. prove part (a), one needs consider two cases, depending whether cell Cp
composite. is, claim follows trivially. Cp atomic, C atomic, too,
(C) = (Cp ) = (x), x unique candidate contract Cp .
part (b), exists candidate contract x C. easy see (x) (C)
(again, consider two cases, depending whether C composite.) So, x X .
Proof Lemma 6.8. Let denote sum question. Let collection
cells ever activated algorithm. Among cells, consider badness
order :
G := { C : (C) [, 2) } .
Claim 6.7, algorithm chooses cell C G O(log /2 ) times,
n(C) (C) O(log /).
Fix (0, 1) observe cells C (C) contribute
. Therefore suffices focus G , /2. follows
P
+ O(log ) =2i /2 |G | .
(22)
bound |G | follows. Consider cell C G . cell called leaf never
zoomed (i.e., removed active set) algorithm. C activated
round cell Cp zoomed on, Cp called parent C. consider two cases,
depending whether C leaf.
(i) Assume cell C leaf. Since (C) < 2, C overlaps X2 Claim 6.9(b).
Note C zoomed round, say round 1.
5 radt (C) Wt (C)

zooming rule

VirtWidth(C) + 4 radt (C)

clean execution,

radt (C) VirtWidth(C). Therefore, using Claim 6.6,
(C) O(radt (C)) O(VirtWidth(C)).
follows C F() (X2 ).
(ii) Assume cell C leaf. Let Cp parent C. Since C Cp , (C)
(Cp ) Claim 6.9(a). Therefore, invoking case (i),
(C) (Cp ) O(VirtWidth(Cp )).
Since (C) < 2, C overlaps X2 Claim 6.9(b), therefore Cp .
follows Cp F() (X2 ).


Combing two cases, follows |G | (2m + 1) fiF() (X2 )fi. Plugging
(22) making appropriate substitution () simplify resulting expression,
obtain regret bound Theorem 4.1
341

fiHo, Slivkins, & Vaughan

7. Simulations
evaluate performance AgnosticZooming simulations. AgnosticZooming
compared two versions NonAdaptive use, respectively, two standard bandit
algorithms: UCB1 (Auer et al., 2002) Thompson Sampling (Thompson, 1933)
Gaussian priors. algorithms, round numerical score (called index )
computed arm, arm maximal index chosen. UCB1, index
arm high-confidence upper bound expected reward arm. Thompson
Sampling, index sampled independently Bayesian posterior distribution
arms expected reward.
7.1 Setup
consider generalized version high-low example Section 5
requesters value low outcome could nonzero. results reported below,
set requesters values V (high) = 1 V (low) = .3, probability obtaining
high outcome given high effort h = .8. explicitly report results,
additionally tried wide range alternative values V (high), V (low), h found
similar qualitatively. Intuitively, varying requesters values h
changes contracts algorithms converge (that is, optimal arms),
impact problem structure; width dimension settings.
generalized high-low example, workers type characterized cost ch
high effort. consider three supply distributions:
Uniform: ch uniformly distributed [0, 1].
Homogeneous: ch every worker.
Two-type: ch uniformly distributed two values, c0h c00h .
first two distributions represent extreme cases workers either
extremely homogeneous extremely diverse. third distribution one way get
middle ground. distribution, run algorithm 100 times.12
Homogeneous Supply Distribution, ch drawn uniformly random [0, 1] run.
Two-Type Supply Distribution, c0h c00h drawn independently uniformly
[0, 1] run.
UCB1 AgnosticZooming, replace logarithmic confidence terms
small constants. find beneficial practice algorithms, consistent
prior work (Radlinski, Kleinberg, & Joachims, 2008; Slivkins, Radlinski, & Gollapudi,
2013). algorithms, tried several different constants found performance
sensitive particular constant used long order 1.
results reported below, set confidence terms equal 1. UCB1, means

given arm played na times,
p index average reward plus 1/ na .
AgnosticZooming, means radt () = 1/nt ().
three algorithms run Xcand = Xcand (), > 0 parameter
specifying granularity discretization.
12. standard errors plots order 0.001 less. (Note point
average 100 runs average previous rounds.)

342

fiAdaptive Contract Design Crowdsourcing Markets

7.2 Overview Results.
Across simulations, AgnosticZooming either outperforms nearly matches NonAdaptive.
performance appear suffer large hidden constants appear
analysis. find AgnosticZooming converges faster NonAdaptive
near-optimal smaller. consistent intuition AgnosticZooming
focuses exploring promising regions contract space. large,
AgnosticZooming converges slowly NonAdaptive, eventually achieves similar
performance. Further, find AgnosticZooming small performs well compared
NonAdaptive larger . particular, much worse initially, much better
eventually.
simulations suggest time horizon known advance one tune
, NonAdaptive achieve near-optimal performance. However, real applications approximately optimal may difficult compute, may known
advance. AgnosticZooming performs consistently well wide range therefore
require prior knowledge careful tuning .
7.3 Detailed Results
algorithm, compute time-averaged cumulative utility rounds given
b (T, ), various values .
granularity , denoted U
b (T, ) changes
First, fix time horizon 5,000 rounds, study U
. results shown Figure 1. observe AgnosticZooming either closely
matches outperforms versions NonAdaptive across supply distributions
values . AgnosticZooming performs consistently well different
performance versions NonAdaptive decreases rapidly small.
Second, study three algorithms perform time. Specifically, plot
b (T, ), three values , namely 0.02, 0.08, 0.2. Since setting =
vs. U
0.08 close optimal examples, values represent, respectively, values small, adequate, large. results shown Figure 2.
small values , AgnosticZooming quickly zooms promising regions contract space, leading faster converge alternatives. However, large,
AgnosticZooming converges slowly, eventually achieves similar performance.
regime, AgnosticZooming reap benefits adaptive discretization
mesh candidate contracts sparse, still suffers overhead. suggests
time horizon known advance one optimize given ,
NonAdaptive achieve near-optimal performance. AgnosticZooming performs consistently different choices therefore require either prior knowledge
careful tuning .
demonstrate benefit know tune , compare
performance AgnosticZooming small NonAdaptive different
b (T, ). See Figure 3.
values . algorithm choice , plot vs. U
show results Uniform Supply Distribution since results distributions similar. Additionally, omit results Thompson Sampling since
UCB1 performed better experiments.13 find small , AgnosticZooming
13. conjecture replaced logarithmic confidence term UCB1 1.

343

fi0.4

0.4

0.3

0.3

0.2

0.2

0.1
0.0

AgnosticZooming
UCB1
ThompsonSampling

0.1
0.2
0.00

0.05

0.10


0.15

Average Utility

Average Utility

Ho, Slivkins, & Vaughan

0.1
0.0

AgnosticZooming
UCB1
ThompsonSampling

0.1
0.2

0.20

0.00

(a) Uniform Supply Distribution

0.05

0.10


0.15

0.20

(b) Homogeneous Supply Distribution

0.4

Average Utility

0.3
0.2
0.1
0.0

AgnosticZooming
UCB1
ThompsonSampling

0.1
0.2
0.00

0.05

0.10


0.15

0.20

(c) Two-Type Supply Distribution

Figure 1: requesters average per-round utility 5,000 rounds vs. choice
initial discretization .

small converges nearly fast NonAdaptive larger . large,
AgnosticZooming small matches NonAdaptive optimal .
Finally, Figure 4, confirm intuition OPT(Xcand ()) decreases
granularity . end, run AgnosticZooming 50,000 rounds (so algorithm
time nearly converge optimal contract), examine average utility
last 5,000 rounds. expected, see average requester utility achievable
small significantly higher utility achievable larger.
simulation results suggest AgnosticZooming performs well across different
supply distributions different settings , requiring careful tuning algorithm
parameters. Given smaller value , better payoff optimal
contract OPT(Xcand ()), AgnosticZooming small good algorithm variety
settings.
344

fiAdaptive Contract Design Crowdsourcing Markets

AgnosticZooming
0.4
0.3
0.2
0.1
0.0
0.1
0.2

ThompsonSampling

Uniform: =0.02

Uniform: =0.08

Uniform: =0.20

Two-Type: =0.02

Two-Type: =0.08

Two-Type: =0.20

Homogeneous: =0.02

Homogeneous: =0.08

Homogeneous: =0.20

Average Utility

0.4
0.3
0.2
0.1
0.0
0.1
0.2

UCB1

0.4
0.3
0.2
0.1
0.0
0.1
0.2
0

1000 2000 3000 4000 5000

0

1000 2000 3000 4000 5000

0

1000 2000 3000 4000 5000

Time

Figure 2: requesters average per-round utility time different supply distributions discretization sizes.

8. Application Dynamic Task Pricing
discuss dynamic task pricing, seen special case dynamic contract
design exactly one non-null outcome. identify important family
problem instances AgnosticZooming out-performs NonAdaptive.
8.1 Background
dynamic task pricing problem, basic version, defined follows.
one principal (buyer) sequentially interacts multiple agents (sellers).
round t, agent arrives, one item sale. principal offers price pt item,
agent agrees sell pt ct , ct [0, 1] agents private
cost item. principal derives value v item bought; utility
value bought items minus payment. time horizon (the number rounds)
known. private cost ct independent sample fixed distribution,
called supply distribution. interested prior-independent version,
supply distribution known principal. algorithms goal choose
offered prices pt maximize expected utility principal.
345

fiHo, Slivkins, & Vaughan

Uniform

0.5

AgnosticZooming: = .02
UCB1: = .02
UCB1: = .08
UCB1: = .20

0.4

Average Utility

0.3
0.2
0.1
0.0
0.1
0.2
0

1000

2000

Time

3000

4000

5000

Figure 3: requesters average per-round utility time using AgnosticZooming
small compared NonAdaptive three different values .

Uniform

Average Utility Last 5k rounds

0.4
0.3
0.2
0.1
0.0
0.1

AgnosticZooming

0.2
0.00

0.05

0.10

0.15


0.20

0.25

0.30

Figure 4: Average requester utility last 5,000 rounds 50,000-round run
AgnosticZooming different values .

Dynamic task pricing seen special case dynamic contract design
exactly one non-null outcome (which corresponds sale). Indeed,
special case exactly one non-null effort level e without loss generality (because
non-null effort levels deterministically lead non-null outcome).
346

fiAdaptive Contract Design Crowdsourcing Markets

One crucial simplification compared full generality dynamic contract design
discretization error easily bounded above: 14
OPT(X) OPT(Xcand ())

> 0.

Worst-case regret bounds implicit prior work dynamic inventory-pricing (Kleinberg & Leighton, 2003).15 Let NonAdaptive() denote algorithm NonAdaptive Xcand =
Xcand (). Then, analysis work Kleinberg Leighton (2003), NonAdaptive()
achieves regret R(T ) = O(T + 2 ). optimized R(T ) = O(T 2/3 )
= O(T 1/3 ). Moreover, matching lower bound: R(T ) = (T 2/3 )
algorithm.
Further, folklore result NonAdaptive() achieves regret R(T ) = O(T 2/3 )
= (T 1/3 ). (We sketch lower-bounding example proof Lemma 8.4,
make paper self-contained.)
8.2 Preliminaries
contract summarized single number: offered price p non-null
outcome. Let F (p) probability worker accepting task price p, let
U (p) = F (p) (v p) corresponding expected utility algorithm.
Note contracts trivially monotone optimal contract bounded
without loss generality. follows OPT(X) = supp0 U (p), optimal expected
utility possible prices.
cell C price interval C = [p, p0 ] [0, 1], virtual width


VirtWidth(C) = v F (p0 ) p F (p) v F (p) p0 F (p0 ) .
8.3 Results: General Case
using AgnosticZooming Xcand = X.
First, let us prove reasonable choice worst case: namely,
achieve optimal O(T 2/3 ) regret.
Lemma 8.1. Consider dynamic task pricing problem. AgnosticZooming Xcand =
X achieves regret O(T 2/3 log ).
Proof Sketch. Fix > 0. key observation VirtWidth(C) either
p0 p 4 , F (p0 ) F (p) 4 . Call C red cell former happens, blue cell
otherwise. Therefore collection mutually disjoint cells virtual width
O( 1 ) red cells O( 1 ) blue cells, hence O( 1 ) cells total.
follows O( 1 ) active cells virtual width .
So, notation Theorem 4.1 N () O( 1 ). follows width
dimension 1, turn implies desired regret bound.
14. Recall Xcand () denotes set prices [0, 1] integer multiples given > 0; call
set additive -mesh.
15. algorithmic result dynamic task pricing easy modification analysis work
Kleinberg Leighton (2003) dynamic inventory-pricing. lower bound work Kleinberg
Leighton translated dynamic inventory-pricing dynamic task pricing without
introducing new ideas. omit details version.

347

fiHo, Slivkins, & Vaughan

8.4 Results: Nice Problem Instances
focus problem instances piecewise-uniform costs bounded density. Formally,
say instance dynamic task pricing k-piecewise-uniform costs interval
[0,1] partitioned k N sub-intervals supply distribution uniform
sub-interval. problem instance -bounded density, 1 supply
distribution probability density function almost everywhere, density
1
. Using full power Theorem 4.1, obtain following regret bound.
Theorem 8.2. Consider dynamic task pricing problem k-piecewise-uniform costs
-bounded density, absolute constants k N > 1. AgnosticZooming
Xcand = X achieves regret R(T ) = O(T 3/5 ).
Proof Sketch. Since supply distribution density , follows F ()
Lipschitz-continuous function Lipschitz constant . follows cell virtual
width least diameter least (/), > 0. (Note cell
simply sub-interval [p, q] [0, 1], diameter simply q p.)

Second, claim X contained union k intervals diameter O( ).
see this, consider partition [0, 1] k subintervals supply distribution
uniform density subinterval. Let [pj , qj ] j-th subinterval. Let pj
local optimum U () subinterval, let Xj, = {x [pj , qj ] : U (pj ) U (x) }.

X j Xj, . show Xj, [pj , pj + ] = O( ).
Recall N0 (X ) number feasible cells virtual width least 0
overlap X . follows N0 (X ) k times maximal number

feasible cells diameter least (/) overlap interval diameter O( ).
Therefore: N0 (X ) = O(k3/2 1/2 log 1 ). Moreover, less sophisticated upper
bound N0 (X ): number feasible cell diameter least (/).
N0 (X ) = O(/)(log 1 ). theorem follows plugging upper bounds
N0 (X ) Equation (6).
8.5 Comparison NonAdaptive
Consider NonAdaptive(0 ), 0 = (T 1/3 ) granularity required optimal
worst-case performance. Call problem instance nice 2-piecewise-uniform costs
-bounded density, sufficiently large absolute constant ; say = 4
concreteness. claim AgnosticZooming outperforms NonAdaptive(0 ) nice
problem instances.
Lemma 8.3. NonAdaptive(0 ) achieves regret R(T ) = (T 2/3 ) worst case
nice problem instances.
Proof Sketch. Recall k = 2 supply distribution density 1 interval
[0, p0 ], density 2 interval [p0 , 1], numbers 1 , 2 , p0 . pick p0
sufficiently far point Xcand (0 ). Note function U () parabola
two intervals. adjust densities U () achieves maximum
p0 , maximum either two parabolas sufficiently far p0 .
discretization error Xcand (0 ) least (0 ), implies regret (0 ).
348

fiAdaptive Contract Design Crowdsourcing Markets

8.6 Lower Bound NonAdaptive
provide specific lower-bounding example worst-case performance NonAdaptive(),
arbitrary > 0. Let F family problem instances k-piecewiseuniform costs -bounded density, k N = 4.
Lemma 8.4. Let R (T ) maximal
problem inp regret NonAdaptive()
2/3
stances F. R (T ) = (T + /) (T ).
Proof Sketch. piecewise-uniform costs, F (0) = 0 F (p) = 1. Assume
principal derives value v = 1 item. expected utility price p
U (p) = F (p)(1 p).
Fix > 0. Use following problem instance. Let P = [ 25 , 35 ] {4j + : j N}.
Set U (p) = 41 p P0 . Further, pick p P/2 set U (p ) = 41 + ().
defines F (p) p P {0, 1, p }. rest prices, define F () via linear
interpolation. completes description problem instance.
show X consists N = ( 1 ) candidate contracts. Therefore, using stanp

dard lower-bounding arguments MAB, obtain R(T |Xcand ) ( N ) = ( /).
Further, show discretization error least (), implying R(T )
R(T |Xcand ) + (T ).

9. Related Work
paper related three different areas: contract theory, market design crowdsourcing, online decision problems. outline connections
areas.
9.1 Contract Theory
model viewed extension classic principal-agent model contract
theory (Laffont & Martimort, 2002). basic version classic model,
single principal interacts single agent whose type (specified cost function
production function, described Section 2) generally assumed known.
principal specifies contract mapping outcomes payments principal commits
make agent. agent chooses action (i.e., effort level) stochastically
results outcome order maximize expected utility given contract.
principal observes outcome, cannot directly observe agents effort level, creating
moral hazard problem. goal principal design contract maximize
expected utility, difference utility receives
outcome payment makes. maximization written constrained
optimization problem, shown linear contracts optimal.
adverse selection variation principal-agent problem relaxes assumption
agents type known. existing literature principal-agent problem
adverse selection focuses applying revelation principle (Laffont & Martimort, 2002).
setting, principal offers menu contracts, contract chosen agent
reveals agents type. problem selecting menu contracts maximizes
principals expected utility formulated constrained optimization.
349

fiHo, Slivkins, & Vaughan

work differs classic setting consider principal interacting
multiple agents, principal may adjust contract time online manner.
Several authors considered extensions classic model multiple agents.
Levy Vukina (2002) show multiple agents optimal set individual
linear contracts agent rather single uniform contract agents, offer
variety descriptive explanations common see uniform contracts
practice. Babaioff, Feldman, Nisan (2006) consider setting one principal
interacts multiple agents, observes single outcome function
agents effort levels. Misra, Nair, Daljord (2012) consider variant
algorithm must decide set uniform contract many agents
select subset agents hire.
Alternative online versions problem considered literature well.
dynamic principal agent problem (Sannikov, 2008; Williams, 2009; Sannikov, 2012),
single principal interacts single agent repeatedly period time. agent
choose exert different effort different time, outcome time function
efforts exerted agent t. principal cannot observe agents
efforts observe outcome. goal principal design optimal
contract time maximize payoff. work different line work since
consider setting multiple agents different, unknown types. algorithm
needs learn distribution agent types design optimal contract accordingly.
Conitzer Garera (2006) study online principal agent problem similar
setting ours. However, focus empirically comparing different online algorithms,
including bandit approaches uniform discretization, gradient ascent, Bayesian
update approaches problem. goal provide algorithm nice theoretical
guarantees.
Bohren Kravitz (2013) study setting outcome unverifiable.
address issue, propose assign bundle tasks worker. verify
outcome, task bundle chosen verifiable task non-trivial
probability. verifiable task either gold standard task known answer
task assigned multiple workers verification. payment task bundle
conditional outcome verified tasks. setting, assume task
outcome verifiable. relax assumption adopting similar approaches.
9.2 Incentives Crowdsourcing Systems
Researchers recently begun examine design incentive mechanisms encourage
high-quality work crowdsourcing systems. Jain, Chen, Parkes (2012) explore ways
award virtual points users online question-and-answer forums improve
quality answers. Ghosh Hummel (2011, 2013) Ghosh McAfee (2011) study
distribute user generated content (e.g., Youtube videos) users encourage
production high-quality internet content people motivated attention. Ho,
Zhang, Vaughan, van der Schaar (2012) Zhang van der Schaar (2012) consider
design two-sided reputation systems encourage good behavior workers
requesters crowdsourcing markets. consider crowdsourcing markets,
350

fiAdaptive Contract Design Crowdsourcing Markets

work differs focuses design monetary contracts, perhaps
natural incentive scheme, incentivize workers exert effort.
problem closest studied context crowdsourcing
systems online task pricing problem requester unlimited supply
tasks completed budget B spend (Badanidiyuru et al., 2012; Singer
& Mittal, 2013). Workers private costs arrive online, requester sets single
price arriving worker. goal learn optimal single fixed price time.
work viewed generalization task pricing problem, special
case setting number non-null outcomes fixed 1.
empirical work examining workers behavior varies based
financial incentives offered crowdsourcing markets. Mason Watts (2009) study
workers react changes performance-independent financial incentives. study,
increasing financial incentives increases number tasks workers complete,
quality output. Yin, Chen, Sun (2013) provide potential explanation
phenomenon using concept anchoring effect: workers cost completing task
influenced first price worker sees task. Horton Chilton (2010) run
experiments estimate workers reservation wage completing tasks. show
many workers respond rationally offered contracts, whereas workers appeared
target payment mind.
recent research studies effects performance-based payments (PBPs). Harris
(2011) runs MTurk experiments resume screening, workers get bonus
perform well. concludes quality work better PBPs
uniform payments. Yin et al. (2013) show varying magnitude bonus
much effect certain settings. Ho et al. (2015) perform comprehensive set
experiments aimed determining whether, when, PBPs increase quality
submitted work. results suggest PBPs increase quality tasks
increased time effort leads higher quality work. results suggest
workers may interpret contract performance-based even stated (since
requesters always option reject work). Based evidence, propose
new model worker behavior extends principal-agent model explicitly reflect
workers subjective beliefs likelihood paid.
Overall, previous empirical work demonstrates workers crowdsourcing markets
respond change financial incentives, behavior always
follow traditional rational-worker model similar people real-world market.
work, start analysis rational-worker assumption ubiquitous economic theory, demonstrate results still hold without assumptions
long collective worker behavior satisfies natural properties (namely, long
Lemma 3.1 holds). note results hold generalized worker model proposed Ho et al. (2015), consistent experimental evidence discussed
above.
351

fiHo, Slivkins, & Vaughan

9.3 Sequential Decision Problems
sequential decision problems, algorithm makes sequential decisions time. Two
directions relevant paper multi-armed bandits (MAB) dynamic
pricing.
MAB studied since 1933 (Thompson, 1933) operations research, economics,
several branches computer science including machine learning, theoretical computer
science, AI, algorithmic economics. survey prior work MAB beyond scope
paper; reader encouraged refer work Cesa-Bianchi Lugosi (2006)
Bubeck Cesa-Bianchi (2012) background prior-independent MAB,
work Gittins, Glazebrook, Weber (2011) background Bayesian MAB.
briefly discuss lines work MAB directly relevant paper.
setting modeled prior-independent MAB stochastic rewards: reward given arm i.i.d. sample time-invariant distribution, neither
distribution Bayesian prior known algorithm. basic formulation
(with small number arms) well understood (Lai & Robbins, 1985; Auer et al., 2002;
Bubeck & Cesa-Bianchi, 2012). handle problems large infinite number arms,
one typically needs side information similarity arms. typical way model
side information, called Lipschitz MAB (Kleinberg et al., 2008), algorithm
given distance function arms, expected rewards assumed satisfy
Lipschitz-continuity (or relaxation thereof) respect distance function (Agrawal,
1995; Kleinberg, 2004; Auer et al., 2007; Kleinberg et al., 2008; Bubeck et al., 2011a;
Slivkins, 2014). related paper idea adaptive discretization
often used setting (Kleinberg et al., 2008; Bubeck et al., 2011a; Slivkins, 2014),
particularly zooming algorithm (Kleinberg et al., 2008; Slivkins, 2014). particular,
general template algorithm similar one zooming algorithm (but
selection rule zooming rule different, reflecting lack priori
known similarity information).
settings (including ours), numerical similarity information required Lipschitz MAB immediately available. example, applications web search
advertising natural assume algorithm observe tree-shaped taxonomy arms (Kocsis & Szepesvari, 2006; Munos & Coquelin, 2007; Pandey et al., 2007;
Slivkins, 2011; Bull, 2013). particular, Slivkins (2011) Bull (2013) explicitly reconstruct (the relevant parts of) metric space defined taxonomy. different
direction, Bubeck, Stoltz, Yu (2011b) study version Lipschitz MAB
Lipschitz constant known, essentially recover performance NonAdaptive
setting.
MAB partial monitoring (Audibert & Bubeck, 2010; Bartok, Foster, Pal,
Rakhlin, & Szepesvari, 2014; Antos, Bartok, Pal, & Szepesvari, 2013), round
algorithm receives auxiliary feedback rewards round (along reward
chosen arm), goal take advantage auxiliary feedback. Dynamic
task pricing cast framework: given price p accepted, higher
price would too, rejected, lower price would be. However,
aware way link dynamic task pricing existing results partial monitoring
352

fiAdaptive Contract Design Crowdsourcing Markets

via connection. general version dynamic contract design appear fit
partial monitoring framework, essentially due moral hazard.
Dynamic pricing (a.k.a. online posted-price auctions) refers settings
principal interacts agents arrive time offers agent price
transaction, selling buying item. version principal sells items
extensively studied operations research, typically Bayesian setting; see
work den Boer (2015) literature review. study prior-independent,
non-parameterized formulations initiated work Blum, Kumar, Rudra,
Wu (2003) Kleinberg Leighton (2003) continued several others (Besbes
& Zeevi, 2009; Babaioff, Dughmi, Kleinberg, & Slivkins, 2015; Besbes & Zeevi, 2012; Wang,
Deng, & Ye, 2014; Badanidiyuru et al., 2013; Badanidiyuru, Langford, & Slivkins, 2014).
Further, Badanidiyuru et al. (2012) Singla Krause (2013) studied version
principal buys items, equivalently commissions tasks; call version
dynamic task pricing. Modulo budget constraints, essentially special case
setting round worker offered chance perform task specified
price, either accept reject offer. particular, workers strategic choice
directly observable. general settings studied (Badanidiyuru et al., 2013,
2014; Agrawal & Devanur, 2014; Agrawal, Devanur, & Li, 2015).16 However, work
(after initial papers, see Blum et al., 2003 Kleinberg & Leighton, 2003) focused
models constraints principals supply budgets, imply
improved results specialized unconstrained settings.

10. Conclusions
Motivated applications crowdsourcing markets, define dynamic contract design
problem, multi-round version principal-agent model unobservable strategic
decisions. treat problem multi-armed bandit problem, design algorithm
problem, derive regret bounds compare favorably prior work. main
conceptual contribution, aside identifying model, adaptive discretization
approach rely Lipschitz-continuity assumptions. provably improve
uniform discretization approach prior work, general case
illustrative special cases. theoretical results supported simulations.
generality shortcomings model discussed Section 2.2.
believe dynamic contract design problem deserves study, several
directions outline below.
1. clear whether provable results improved, perhaps using substantially
different algorithms relative different problem-specific structures. particular, one
needs establish lower bounds order argue optimality; lower bounds
dynamic contract design currently known.
2. adaptive discretization approach may fine-tuned improve performance
practice. particular, definition index (C) given feasible cell C
16. papers Badanidiyuru et al. (2014) Agrawal Devanur (2014) concurrent independent work respect conference publication paper, work Agrawal et al.
(2015) subsequent work.

353

fiHo, Slivkins, & Vaughan

may re-defined several different ways. First, use information C
sophisticated way, similar sophisticated indices basic K-armed
bandit problem; example, see work Garivier Cappe (2011). Second, index
incorporate information cells. Third, defined smoother,
probabilistic way, e.g., Thompson Sampling (Thompson, 1933).
3. Deeper insights structure (static) principal-agent problem needed,
primarily order optimize choice Xcand , set candidate contracts.
natural target uniform mesh Xcand (). optimize granularity , one
needs upper-bound discretization error OPT(Xcand ) OPT(Xcand ()) terms
function f () f () 0 0. first-order open question resolve
whether done general case, provide specific example cannot.
related open question concerns effect increasing granularity: upper-bound
difference OPT(Xcand ()) OPT(Xcand (0 )), > 0 > 0, terms function 0 .
Further, known whether optimal mesh contracts fact uniform mesh.
interest effect restricting attention monotone contracts.
prove monotone contracts may optimal (Appendix A), significance
phenomenon unclear. One would characterize scenarios restricting
monotone contracts alright (in sense best monotone contract good,
much worse, best contract), scenarios restriction results
significant loss. latter scenarios, different algorithms may needed.
4. much extensive analysis special cases order. general results
difficult access (which appears inherent property general problem),
immediate direction special cases deriving lucid corollaries current regret
bounds. particular, desirable optimize choice candidate contracts. Apart
massaging current results, one design improved algorithms derive
specialized lower bounds. Particularly appealing special cases concern supply distributions
mixtures small number types, supply distributions belong
(simple) parameterized family unknown parameter.
Going beyond current model, natural direction incorporate budget constraint, extending corresponding results dynamic task pricing. main difficulty
settings distribution two contracts may perform much better
fixed contract; see work Badanidiyuru et al. (2013) discussion. Effectively,
algorithm needs optimize distributions. first step, one use nonadaptive discretization conjunction general algorithms bandits budget
constraints, sometimes called bandits knapsacks (Badanidiyuru et al., 2013; Agrawal
& Devanur, 2014). However, clear choose optimal mesh contracts
(as discussed throughout paper), mesh likely uniform (because
uniform special case dynamic task pricing budget; see Badanidiyuru et al., 2013 discussion). eventual target research direction marry
adaptive discretization techniques prior work bandits knapsacks.

354

fiAdaptive Contract Design Crowdsourcing Markets

Acknowledgments
thank anonymous reviewers useful comments. Much research
completed Ho intern Microsoft Research. research partially supported NSF grant IIS-1054911. opinions, findings, conclusions, recommendations authors alone.

Appendix A. Monotone Contracts May Optimal
section provide example problem instance monotone contracts
suboptimal (at least restricting attention contracts non-negative
payoffs). example, three non-null outcomes (i.e., = 3), two non-null
effort levels, low effort high effort, denote e` eh respectively.
single worker type. Since one type, drop subscript
describing cost function c. let c(e` ) = 0, let c(eh ) positive value less
0.5(v(2) v(1)). worker chooses low effort, outcome equally likely 1
3. worker chooses high effort, equally likely 2 3. easy verify
type satisfies FOSD assumption. Finally, simplicity, assume workers
break ties high effort effort level favor high effort,
workers break ties low effort null effort level favor low effort.
Lets consider optimal contract. Since single worker type
workers type break ties way, consider separately best contract
would make workers choose null effort level, best contract would make
workers choose low effort, best contract would make workers choose high
effort, compare requesters expected value each.
Since c(e` ) = 0 workers break ties low effort null effort favor low
effort, contract would cause workers choose null effort; workers always
prefer low effort null effort.
easy see best contract (in terms requester expected value) would
make workers choose low effort would set x(1) = x(3) = 0 x(2) sufficiently low
workers would enticed choose high effort; setting x(2) = 0 sufficient.
case, expected value requester would 0.5(v(1) + v(3)).
lets consider contracts cause workers choose high effort. worker chooses
high effort, expected value requester
0.5(v(2) x(2) + v(3) x(3)).

(23)

Workers choose high effort
0.5(x(1) + x(3)) 0.5(x(2) + x(3)) c(eh )

0.5x(1) 0.5x(2) c(eh ).

(24)

find contract maximizes requesters expected value workers choose
high effort, want maximize Equation 23 subject constraint Equation 24.
Since x(3) doesnt appear Equation 24, set 0 maximize Equation 23.
355

fiHo, Slivkins, & Vaughan

Since x(1) appear Equation 23, set x(1) = 0 make Equation 24
easy possible satisfy. see optimal occurs x(2) = 2c(eh ).
Plugging contact x Equation 23, expected utility case 0.5(v(2) +
v(3)) c(eh ). Since assumed c(eh ) < 0.5(v(2) v(1))), strictly preferable
constant 0 contract, fact unique optimal contract. Since x(2) > x(3),
unique optimal contract monotonic.

References
Agrawal, R. (1995). continuum-armed bandit problem. SIAM J. Control Optimization, 33 (6), 19261951.
Agrawal, S., & Devanur, N. R. (2014). Bandits concave rewards convex knapsacks.
15th ACM Conf. Economics Computation (EC).
Agrawal, S., Devanur, N. R., & Li, L. (2015). Contextual bandits global constraints
objective.. Technical report, arXiv:1506.03374.
Antos, A., Bartok, G., Pal, D., & Szepesvari, C. (2013). Toward classification finite
partial-monitoring games. Theor. Comput. Sci., 473, 7799.
Audibert, J., & Bubeck, S. (2010). Regret Bounds Minimax Policies Partial
Monitoring. J. Machine Learning Research (JMLR), 11, 27852836.
Auer, P., Cesa-Bianchi, N., & Fischer, P. (2002). Finite-time analysis multiarmed
bandit problem.. Machine Learning, 47 (2-3), 235256.
Auer, P., Ortner, R., & Szepesvari, C. (2007). Improved Rates Stochastic ContinuumArmed Bandit Problem. 20th Conf. Learning Theory (COLT), pp. 454468.
Babaioff, M., Dughmi, S., Kleinberg, R. D., & Slivkins, A. (2015). Dynamic pricing
limited supply. ACM Trans. Economics Computation, 3 (1), 4.
Babaioff, M., Feldman, M., & Nisan, N. (2006). Combinatorial agency. 7th ACM Conf.
Electronic Commerce (EC).
Badanidiyuru, A., Kleinberg, R., & Singer, Y. (2012). Learning budget: posted price
mechanisms online procurement. 13th ACM Conf. Electronic Commerce
(EC), pp. 128145.
Badanidiyuru, A., Kleinberg, R., & Slivkins, A. (2013). Bandits knapsacks. 54th
IEEE Symp. Foundations Computer Science (FOCS).
Badanidiyuru, A., Langford, J., & Slivkins, A. (2014). Resourceful contextual bandits.
27th Conf. Learning Theory (COLT).
Bartok, G., Foster, D. P., Pal, D., Rakhlin, A., & Szepesvari, C. (2014). Partial monitoring
- classification, regret bounds, algorithms. Math. Oper. Res., 39 (4), 967997.
Besbes, O., & Zeevi, A. (2009). Dynamic pricing without knowing demand function:
Risk bounds near-optimal algorithms. Operations Research, 57, 14071420.
Besbes, O., & Zeevi, A. J. (2012). Blind network revenue management. Operations Research,
60 (6), 15371550.
356

fiAdaptive Contract Design Crowdsourcing Markets

Blum, A., Kumar, V., Rudra, A., & Wu, F. (2003). Online learning online auctions.
14th ACM-SIAM Symp. Discrete Algorithms (SODA), pp. 202204.
Bohren, J. A., & Kravitz, T. (2013). Incentives spot market labor output
unverifiable. Working paper.
Bubeck, S., & Cesa-Bianchi, N. (2012). Regret Analysis Stochastic Nonstochastic
Multi-armed Bandit Problems. Foundations Trends Machine Learning, 5 (1),
1122.
Bubeck, S., Munos, R., Stoltz, G., & Szepesvari, C. (2011a). Online Optimization XArmed Bandits. J. Machine Learning Research (JMLR), 12, 15871627.
Bubeck, S., Stoltz, G., & Yu, J. Y. (2011b). Lipschitz bandits without lipschitz constant.
22nd Intl. Conf. Algorithmic Learning Theory (ALT), pp. 144158.
Bull, A. D. (2013). Adaptive-treed bandits. Tech. rep. 1302.2489, arxiv.org.
Cesa-Bianchi, N., & Lugosi, G. (2006). Prediction, learning, games. Cambridge Univ.
Press.
Conitzer, V., & Garera, N. (2006). Online learning algorithms online principal-agent
problems (and selling goods online). International Conference Machine Learning
(ICML).
den Boer, A. V. (2015). Dynamic pricing learning: Historical origins, current research,
new directions. Surveys Operations Research Management Science. Forthcoming.
Dudik, M., Hsu, D., Kale, S., Karampatziakis, N., Langford, J., Reyzin, L., & Zhang, T.
(2011). Efficient optimal leanring contextual bandits. 27th Conf. Uncertainty
Artificial Intelligence (UAI).
Garivier, A., & Cappe, O. (2011). KL-UCB Algorithm Bounded Stochastic Bandits
Beyond. 24th Conf. Learning Theory (COLT).
Ghosh, A., & Hummel, P. (2011). game-theoretic analysis rank-order mechanisms
user-generated content. 12th ACM Conf. Electronic Commerce (EC).
Ghosh, A., & Hummel, P. (2013). Learning incentives user-generated content: Multiarmed bandits endogenous arms. Proc. 4th Conference Innovations
Theoretical Computer Science (ITCS).
Ghosh, A., & McAfee, P. (2011). Incentivizing high-quality user-generated content. 20th
Intl. World Wide Web Conf. (WWW).
Gittins, J., Glazebrook, K., & Weber, R. (2011). Multi-Armed Bandit Allocation Indices.
John Wiley & Sons.
Harris, C. G. (2011). Youre hired! examination crowdsourcing incentive models
human resource tasks. CSDM.
Ho, C., Slivkins, A., Suri, S., & Vaughan, J. W. (2015). Incentivizing high quality crowdwork. 24th Intl. World Wide Web Conf. (WWW).
Ho, C.-J., Zhang, Y., Vaughan, J. W., & van der Schaar, M. (2012). Towards social norm
design crowdsourcing markets. HCOMP.
357

fiHo, Slivkins, & Vaughan

Horton, J. J., & Chilton, L. B. (2010). labor economics paid crowdsourcing. 11th
ACM Conf. Electronic Commerce (EC).
Jain, S., Chen, Y., & Parkes, D. (2012). Designing incentives online question-and-answer
forums. Games Economic Behavior.
Kleinberg, R. (2004). Nearly tight bounds continuum-armed bandit problem.
18th Advances Neural Information Processing Systems (NIPS).
Kleinberg, R., & Leighton, T. (2003). value knowing demand curve: Bounds
regret online posted-price auctions.. 44th IEEE Symp. Foundations
Computer Science (FOCS), pp. 594605.
Kleinberg, R., Slivkins, A., & Upfal, E. (2008). Multi-armed bandits metric spaces.
40th ACM Symp. Theory Computing (STOC), pp. 681690.
Kleinberg, R. D., & Leighton, F. T. (2003). value knowing demand curve: Bounds
regret online posted-price auctions. IEEE Symp. Foundations Computer
Science (FOCS).
Kocsis, L., & Szepesvari, C. (2006). Bandit Based Monte-Carlo Planning. 17th European
Conf. Machine Learning (ECML), pp. 282293.
Laffont, J.-J., & Martimort, D. (2002). Theory Incentives: Principal-Agent
Model. Princeton University Press.
Lai, T. L., & Robbins, H. (1985). Asymptotically efficient Adaptive Allocation Rules.
Advances Applied Mathematics, 6, 422.
Levy, A., & Vukina, T. (2002). Optimal linear contracts heterogeneous agents.
European Review Agricultural Economics.
Mason, W., & Watts, D. (2009). Financial incentives performance crowds.
HCOMP.
Misra, S., Nair, H. S., & Daljord, O. (2012). Homogenous contracts heterogeneous
agents: Aligning salesforce composition compensation. Working Paper.
Munos, R., & Coquelin, P.-A. (2007). Bandit algorithms tree search. 23rd Conf.
Uncertainty Artificial Intelligence (UAI).
Pandey, S., Agarwal, D., Chakrabarti, D., & Josifovski, V. (2007). Bandits Taxonomies:
Model-based Approach. SIAM Intl. Conf. Data Mining (SDM).
Radlinski, F., Kleinberg, R., & Joachims, T. (2008). Learning diverse rankings multiarmed bandits. 25th Intl. Conf. Machine Learning (ICML), pp. 784791.
Sannikov, Y. (2008). continuous-time version principal-agent problem.
Review Economics Studies.
Sannikov, Y. (2012). Contracts: theory dynamic principal-agent relationships
continuous-time approach. 10th World Congress Econometric Society.
Singer, Y., & Mittal, M. (2013). Pricing mechanisms crowdsourcing markets. 22nd
Intl. World Wide Web Conf. (WWW).
Singla, A., & Krause, A. (2013). Truthful incentives crowdsourcing tasks using regret
minimization mechanisms. 22nd Intl. World Wide Web Conf. (WWW).
358

fiAdaptive Contract Design Crowdsourcing Markets

Slivkins, A. (2011). Multi-armed bandits implicit metric spaces. 25th Advances
Neural Information Processing Systems (NIPS).
Slivkins, A. (2014). Contextual bandits similarity information. J. Machine Learning
Research (JMLR), 15 (1), 25332568. Preliminary version COLT 2011.
Slivkins, A., Radlinski, F., & Gollapudi, S. (2013). Ranked bandits metric spaces: Learning optimally diverse rankings large document collections. J. Machine Learning
Research (JMLR), 14 (Feb), 399436. Preliminary version 27th ICML, 2010.
Thompson, W. R. (1933). likelihood one unknown probability exceeds another
view evidence two samples.. Biometrika, 25 (3-4), 285294.
Wang, Z., Deng, S., & Ye, Y. (2014). Close gaps: learning-while-doing algorithm
single-product revenue management problems. Operations Research, 62 (2), 318331.
Williams, N. (2009). dynamic principal-agent problems continuous time. Working
Paper.
Yin, M., Chen, Y., & Sun, Y.-A. (2013). effects performance-contingent financial
incentives online labor markets. AAAI.
Zhang, Y., & van der Schaar, M. (2012). Reputation-based incentive protocols crowdsourcing applications. Infocom.

359


