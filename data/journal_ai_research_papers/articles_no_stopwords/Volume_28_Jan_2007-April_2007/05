journal artificial intelligence

submitted published

proactive job shop scheduling
probabilistic durations
j christopher beck

jcb mie utoronto ca

department mechanical industrial engineering
university toronto canada

nic wilson

n wilson c ucc ie

cork constraint computation centre
university college cork ireland

abstract
classical scheduling formulations assume fixed known duration activity weaken assumption requiring instead duration
represented independent random variable known mean variance
best solutions ones high probability achieving good makespan
first create theoretical framework formally showing monte carlo simulation
combined deterministic scheduling solve propose
associated deterministic scheduling whose solution proved certain conditions lower bound probabilistic propose investigate
number techniques solving combinations monte carlo
simulation solutions associated deterministic constraint programming tabu search empirical demonstrate combination use
associated deterministic monte carlo simulation
scale best terms size uncertainty experiments point
correlation quality deterministic solution quality
probabilistic solution major factor responsible success

introduction
proactive scheduling techniques seek produce line schedule robust execution time events assume perfect knowledge
duration activity durations determined execution time
observed activity finished however partial knowledge form
known probability distribution duration execution time activities
dispatched according sequences defined line schedule measure
robustness probability given quality achieved specifically
address job shop scheduling related generalizations
durations activities random variables objective
solution high probability good ideally minimal makespan
challenging even evaluating solution hard
address develop theoretical framework within formally
define construct monte carlo simulation
evaluating solutions partial solutions b solving carefully defined
deterministic job shop scheduling lower bound probabilistic
c

ai access foundation rights reserved

fibeck wilson

minimum makespan probabilistic job shop scheduling use framework
define number embodying three solution approaches
branch bound search monte carlo simulation search node
search pruned almost certain monte carlo simulation
partial solution cannot extended solution better current best
solution
iterative deterministic search descending lower bound deterministic job
shop whose solution lower bound probabilistic job shop
defined parameter q lower bound proof depends q less
equal q instance dependent threshold value instance
difficult compute starting high q value use tree search
monte carlo simulation solve sequence deterministic decreasing
q values q large highly constrained easy solve
solutions exist q descends best probabilistic makespan previous
iterations used restrict search able reach value q
q q within cpu time limit search approximately complete
subject sampling error
deterministic filtering search deterministic scheduling constraint
programming tabu search used define number filter
operate generating series solution candidates
evaluated monte carlo simulation
empirical indicate monte carlo branch bound
practical small iterative search descending q values
good better branch bound small performs
significantly better larger however even medium sized
techniques inferior heuristic approaches deterministic filtering
contributions

main contributions

introduction finding proactive schedules probabilistic execution guarantees class underlying deterministic scheduling
np hard
development method generating lower bound probabilistic minimum makespan
development particular monte carlo evaluating solutions
design empirical analysis number approximately complete heuristic solution techniques constraint constructive search tabu
search
identification correlation deterministic probabilistic solution
quality key factor performance filter


fiproactive jsp

plan next section define probabilistic job shop scheduling illustrating example section discusses related work section
present theoretical framework formally define derive
generating lower bound associated deterministic job shop
monte carlo simulation used evaluate solutions partial solutions
six search defined section empirical investigations
appear section section shown apply much
general classes scheduling directions future work theoretical
algorithmic extensions discussed

probabilistic job shop scheduling
job shop scheduling probabilistic durations natural extension
standard deterministic job shop scheduling jsp
job shop scheduling
jsp involves set activities ai positive duration di
instance jsp assumed durations positive integers
positive real numbers partitioned jobs job associated
total ordering set activities activity must execute specified
unary capacity resource activities require resource overlap
execution activity started must executed entire duration
represent formally another partition resource sets two activities
resource set require resource
solution consists total ordering resource set conflict
jobs ordering e union resource orderings job orderings acyclic
relation thus ai aj resource set solution orders ai
aj meaning aj starts sooner end ai aj ai set
solutions job shop labeled partial solution consists partial
ordering resource set extended solution
let partial solution path path sequence activities
ai immediately precedes aj sequence ai aj
job ai precedes aj job ii ai aj resource set
orders ai aj length len path
p solution equal
sum durations activities path e ai di makespan make
solution defined length longest path path said
critical path length equal makespan solution e one
longest paths minimum makespan job shop scheduling defined
minimum value make solutions
definitions focus solutions rather schedules briefly indicate definitions relate perhaps immediately intuitive definitions focusing
schedules schedule assigns start time activity considered
empirical investigations examine integer case shown theoretical hold
case positive real number durations



fibeck wilson

function set activities set time points defining activity
starts set time points assumed set non negative integers
set non negative real numbers let starti start time activity ai
respect particular schedule let endi end time starti di ai aj
write ai aj constraint endi startj schedule defined valid
following two conditions hold two different activities ai aj ai precedes
aj job ai aj b ai aj resource set
ai aj aj ai since ai aj allowed overlap
let z valid schedule define make z makespan z maxai endi
time last activity completed minimum makespan defined
minimum value make z valid schedules
solution defines valid schedule sched activity started soon
immediate predecessors finished activities without predecessors
started time point sched non delay schedule given precedence constraints
expressed immediate predecessor activity aj respect particular
solution defined activity immediate predecessor aj
respect ordering job containing aj respect ordering associated
solution resource set containing aj shown makespan
sched equal make defined earlier hence justifying definition
conversely given valid schedule z define solution call sol z
ordering resource set relation defined z schedule
makespan sched sol z equal make sol z less equal
makespan z implies minimum makespan solutions equal
minimum makespan valid schedules therefore interested schedules
best makespans need consider solutions associated schedules
summarize aiming minimum makespan jsp focus
searching solutions rather schedules schedule z
exists solution sol z z consistent e satisfies precedence constraints expressed ii solution efficiently construct
schedule sched optimal among schedules consistent furthermore
makespan sched equal make
jsp example consider job shop scheduling involving two jobs five activities shown figure first job consists sequence activities
second job consists sequence three resources involved
require first resource hence activities cannot overlap
precedes ii precedes activities require second resource
requires third resource hence resource sets
four solutions
sa involves orderings
sb defined
sc
sd


fiproactive jsp





























solution sa




solution sb
















solution sc


solution sd

figure example jsp four solutions
duration activity ai di sequence sa path whose length
sa path len
sa paths subsequences one two hence make sa makespan
solution sa equal max max
particular make sa time units
make sb make sc make sd hence minimum
makespan make sa
let z sched sa schedule associated solution sa generated
follows predecessors start beginning setting z hence
activity starts time point ends time point predecessor
set z similarly set z activity ends
time point continuing set z activity two immediate
predecessors solution sa set start soon
activities completed time point max
activities completed completed time point
max max confirms makespan
make sa solution sa equal makespan associated schedule sched sa
independent general probabilistic job shop scheduling
independent probabilistic job shop scheduling defined way
jsp except duration di associated activity ai random variable
assume instance probabilistic jsp durations positive
integer valued random variables positive real valued random variables
known distribution pi expected value e di variance var di


fibeck wilson

random variables fully independent length path solution
random variable write len makespan make solution
length longest path therefore random variable sometimes
refer random makespan
generalize non independent case probabilistic job shop scheduling joint probability measure p durations vectors intention
efficiently sample joint density function example bayesian
network might used represent p activity ai distribution pi defined
appropriate marginal distribution expected value variance
loosely speaking probabilistic job shop scheduling want
small value possible solution whose random makespan
high probability less deadline activities finish time value
called probabilistic minimum makespan
evaluating solution deterministic jsp e finding associated makespan given
duration activity achieved low degree polynomial time longest
path without ordering resource set disjunctions resource
constraints must satisfied solution turn easy
np complete jsp garey johnson pert networks hand generalize
simple longest path allowing durations independent random variables
leading p complete hagstrom probabilistic jsp makes
generalizations consequently finding optimal solutions probabilistic jsp
appears hard focus methods finding good solutions instead
evaluating approximately solution probabilistic jsp done relatively
efficiently monte carlo simulation large number trials randomly
sample duration every activity generate makespan associated
trial roughly speaking approximately evaluate solution evaluating sampled
distribution makespans described detail section
almost solution techniques involve associating deterministic job shop
given probabilistic job shop replacing number q random
duration mean distribution plus q times standard deviation hence set
duration di activity ai associated deterministic q
case continuous time case time points integers set bi qi c
certain values q leads minimum makespan deterministic
lower bound probabilistic minimum makespan shown section
lower bound useful pruning branch bound generally
solving associated deterministic used help solve
probabilistic
assumptions joint probability somewhat restrictive example
model allow activitys duration depend start time however
extended certain situations kind despite restrictions common
related literaturesee section model apply interesting class
could allow duration activity probabilistically dependent start time given
additional natural coherence condition time point conditional probability
endi given starti monotonically increasing e pr endi starti
pr endi starti condition ensures given solution



fiproactive jsp

previously addressed extending model richer representations
relaxing assumptions remains future work
probabilistic jsp example consider independent probabilistic job shop scheduling structure jsp example figure durations
activities independent real valued random variables referred
respectively approximately normally distributed standard deviation means
durations activities deterministic equal respectively
let sa path length len approximately
normally distributed random variablewith mean variance
hence standard deviation
length sa path approximately normal random variable
mean standard deviation random makespan make sa solution
sa random variable equaling maximum random variables len len
general maximum two independent normally distributed random variables
normally distributed however high probability longer distribution
make sa approximately equal distribution len

previous work
considerable work scheduling uncertainty variety fields
including artificial intelligence ai operations fault tolerant computing
systems surveys literature mostly focusing ai see work
davenport beck herroelen leus bidot
highest level two approaches proactive scheduling
knowledge uncertainty taken account generating line
schedule reactive scheduling decisions made line deal unexpected
changes significant work reactive scheduling indeed techniques
combine reactive proactive scheduling least commitment approaches see
surveys noted interest pure proactive scheduling three categories
proactive approaches identified redundancy techniques probabilistic
techniques contingent policy techniques herroelen leus briefly
look turn
redundancy techniques
redundancy techniques generate schedule includes allocation extra
resources time schedule intuition redundant allocations
help cushion impact unexpected events execution example extra time
consumed activity takes longer expected execute
clear conflict insertion redundancy common measures schedule quality
e g makespan focus work tends intelligent insertion redundancy
order achieve satisfactory trade schedule quality robustness
advantage delaying starting activity predecessors finished allowing delay
would break assumptions underlying formulation



fibeck wilson

common fault tolerant scheduling real time guarantees reserve redundant
resources e processors time former case multiple instantiations given
process executed parallel error detection done comparing
different instantiations contrast time redundancy time reserved
execution process fails given fault model technique used
provide real time guarantees ghosh melhem mosse ghosh
similar used work gao davenport gefflot beck
context job shop scheduling statistical information mean time
failure mean repair time machines used extend duration
critical activities former work require solution produced must respect
constraints slack activity given solution slack room
activity move without breaking constraint increasing cost typically
formalized difference activitys possible time window solution e
latest possible end time less earliest possible start time duration activity
advantage gaos purely modeling
changed incorporate extended durations scheduling techniques used
solve however davenport et al reasoning slack shared
amongst set activities lead better solutions cost specialized solving
approaches
leon wu storer present job shop scheduling
objective function modified linear combination expected makespan
expected delay assuming machines break execution time disruptions dealt shifting activities later time maintaining sequence
original schedule basic technique properly seen probabilistic
authors exact calculation measure intractable unless
single disruption assumed likely multiple disruptions authors
present number surrogate measures empirically best surrogate measure
deterministic makespan minus mean activity slack unlike gao davenport et al
leon et al provide formal probabilistic foundation temporal redundancy plays
central role practical application
probabilistic techniques
probabilistic techniques use representations uncertainty reason likely outcomes
schedule executed rather explicitly inserting redundancy attempt
create robust schedule probabilistic techniques build schedule optimizes
measure probabilistic performance performance measures typically come two forms
expected value expected makespan expected weighted tardiness probabilistic guarantee respect threshold value deterministic optimization measure
example latter measure discussed probability flow time
schedule less particular value
optimal expected value scheduling widely studied pinedo
many cases takes form dispatch rules slightly
complicated polynomial time optimal schedule tractable
alternative representations uncertainty fuzzy sets used herroelen leus



fiproactive jsp

e g machine serve heuristics difficult
one example work ai literature wurman wellman
extends decision theoretic concepts scheduling
studied assumes single machine stochastic processing time stochastic set time
objective minimization expected weighted number tardy jobs
authors propose state space search solve multi objective stochastic
dominance critical aspects work use number sophisticated path
pruning rules relaxation heuristics evaluation promising nodes
threshold measure used burns punnekkat littlewood wright
fault tolerant single processor pre emptive scheduling application objective
minimum fault arrival rate tasks scheduled meet deadlines
fault model probability observing fault arrival rate calculated
used measure schedule quality optimization
schedule maximizes probability tasks meeting deadlines fault
arrival process
one machine manufacturing context independent activities daniels carrillo define robust schedule sequence maximizes probability
execution achieve flow time greater given threshold underlying deterministic scheduling solvable polynomial time indeed
minimum expected flow time schedule found polynomial time shown
finding robust schedule np hard daniels carrillo present branch bound
heuristic techniques solve
contingent policy approaches
unlike approaches described contingent policy approaches
generate single line schedule rather produced branching contingent
schedule extreme policy specifies actions taken particular
set circumstances arises given importance line schedule terms
coordination entities context surrounding scheduling
difference significant practical implications see herroelen leus
discussion
elegant example contingent scheduling case work
drummond bresina swanson given initial deterministic schedule
single telescope observation identifies activity likely fail
available uncertainty information point schedule produced
assuming activity indeed fail repeated application identification
likely fail activity generation schedule branching schedule
number likely contingencies accounted alternative schedules
execution time activity fails execution switches alternative schedule
one exists alternative exist line rescheduling done empirical
demonstrate significantly larger portion existing branching schedule
executed without revert rescheduling compared original deterministic
schedule


fibeck wilson

one weaknesses case scheduling surrounds combinatorics
multiple resources multiple inter dependent telescopes quickly becomes
intractable policy approaches markov decision processes mdps boutilier
dean hanks applied objective
produce policy mapping states actions direct line execution
schedule given state encountered corresponding action taken meuleau et
al apply mdps stochastic military resource allocation weapons
must allocated targets given limited number weapons uncertainty
effectiveness given allocation mdp used derive optimal policy
states represented number remaining weapons targets actions
weapon allocation decisions goal minimize expected number surviving
targets empirical demonstrated computational challenges
target weapon required approximately hours cpu time albeit
outdated hardware
literature substantial work cited brucker drexl mohring
neumann pesch herroelen leus stochastic resource constraint
project scheduling generalization job shop scheduling general form
approaches multi stage stochastic programming objective finding
scheduling policy minimize expected makespan context scheduling
policy makes decisions line activities execute decisions need made
beginning schedule end time activity information used
decisions must become known time decision
making number different classes policy investigated example
minimal forbidden subset activities f set activities f cannot
executed simultaneously due resource constraints subset f
executed pre selective policy identifies set f waiting activity j f
j cannot started least one activity f j executed
execution j started least one activity f finished
proactive identify waiting activity minimal forbidden
subset expected makespan minimized computational challenges
pre selective policies particular due number minimal forbidden subsets
led work different classes policy well heuristic approaches
discussion
work falls within probabilistic scheduling approaches
closely inspired robustness work daniels carrillo however unlike
daniels carrillo address scheduling model deterministic
underlies probabilistic job shop scheduling np hard
first work aware seeks provide probabilistic guarantees
underlying deterministic computationally difficult

theoretical framework
section develop theoretical framework probabilistic job shop
section define compare solutions call makespans


fiproactive jsp

makespan solution less time value least chance
random makespan less useful idea far
solutions makespan optimum makespan e minimum makespan
solutions section describe finding lower bound
optimum makespan section considers evaluating given solution
monte carlo simulation estimate makespan
order separate theoretical contributions empirical analysis summarize notation introduced section section readers interested primarily
empirical therefore move directly section
section makes use notation introduced section definitions section
jsp solution paths solution makespan solution minimum
makespan definitions section probabilistic jsp random makespan
solution
comparing solutions probabilistic makespan
standard job shop solutions compared considering associated
makespans probabilistic case makespan solution random variable
comparing solutions less straight forward map random makespan scalar
quantity called makespan sums good solutions compared
comparing associated makespans simple idea prefer solutions smaller
expected makespan however may substantial probability makespan
solution much higher expected value instead take following
confident random makespan solution
cannot confident makespan solution prefer
solution solution
fix value used bound probabilities although imagine
natural applications work would quite small e g less
assume range probability event least
say event sufficiently certain experiments described section
use value sufficiently certain means occurs least
chance
let time value let solution said achievable
sufficiently certain jobs finish use solution
pr make make random makespan
said achievable solution achievable
e exists solution making sufficiently certain jobs finish
time value achievable maxss pr make
max solutions
define ach set achievable define
makespan infimum ach minimum makespan
defined infimum ach set achievable
greatest lower bound ach fact shown proposition smallest
element ach hence ach equal closed interval e set time points




fibeck wilson

inf maxss pr make sometimes refer
probabilistic makespan refer probabilistic minimum makespan
prefer solutions better e smaller makespans equivalently solution
considered better time value achievable
achievable optimal solutions ones whose makespan equal
minimum makespan
prove technical properties makespans achievability relevant
mathematical later sections particular proposition ii states minimum makespan achievable e exists solution makes
sufficiently certain jobs finish smallest value satisfying
property
lemma notation
ach



ss

ach

ii exists solution ach ach
iii minss minimum solutions
proof
achievable
solution ach true

ss ach
ii consider following property set time values time
value greater e interval upper
bound let b two sets property b b
suppose otherwise neither b b exists x b
b x must different assume without loss
generality x property contradiction required
hence b equal equal b induction follows
union finite number sets
property one sets set ach
satisfies property therefore ss ach achs solution
ach achs implies
iii let solution let time value clearly achievable
achievable implies hence minss
ii solution minss required


proposition
let solution achievable e pr make

ii achievable e exists solution pr make
note probabilistic makespan number time value opposed random makespan
solution random variable



fiproactive jsp

proof
discrete case set time values set non negative integers
infimum definitions minimum ii
follow immediately definitions
consider case set time values set non negative real
numbers


n let gm pr make
let gn pr n


make n countable additivity axiom probability measures gm
p
p
gn means l
n
n gn tends gm l tends infinity hence gl
pl
p
n gn tends limm gm
l gn g

definition pr make
pr make

pr make
gm pr make
gm implies pr make gm tends
tends infinity

ii part ii lemma solution part implies
pr make

probabilistic jsp example continued continue example section
section set corresponding confidence value
achievable solution sa since chance paths
simultaneously shorter length probability random
makespan make sa less
consider value ofd since len random length mean
standard deviation chance
len approximately chance
normal distribution standard deviations mean
probability therefore achievable solution since
less chance random makespan make sa
makespan referred probabilistic makespan solution
therefore fact makespan sa approximately equal
since approximately chance random makespan make
easy achievable
solution minimum makespan equal sa hence
lower bound minimum makespan
section lower bound minimum makespan found
solving particular deterministic jsp
common generate deterministic replacing random
duration mean distribution certain conditions minimum makespan deterministic jsp lower bound probabilistic minimum
makespan instance example minimum makespan deterministic
jsp probabilistic minimum makespan however obvious
weakness take account spreads distributions especially important since typically considering small value


fibeck wilson

generate stronger lower bound taking account variances
distributions generating associated deterministic job shop
generating deterministic jsp probabilistic jsp value q
probabilistic job shop generate particular deterministic job shop depending parameter q use transformation almost
section deterministic jsp probabilistic jsp except
random duration replaced particular time value solving corresponding
deterministic give us information probabilistic deterministic jsp consists set activities partitioned resource sets
jobs total order job duration activity
deterministic defined qi respectively mean
standard deviation duration activity ai probabilistic job shop
hence q associated deterministic corresponds replacing random
duration mean let makeq deterministic makespan solution e
makespan associated deterministic defined length
longest pathsee section let makeq minimum deterministic makespan
solutions
let solution say probabilistically optimal let
path path probabilistic deterministic said
deterministically critical path critical path deterministic
length deterministic
lenq p
equal sum
p
p durations
activities path
ai qi equals
ai q
ai
introduce following rather technical definition whose significance made clear
proposition q sufficient exists deterministically critical path
probabilistically optimal solution pr len lenq e
chance random path length greater deterministic length
following shows sufficient value q leads deterministic
minimum makespan makeq lower bound probabilistic minimum makespan
therefore lower bound deterministic minimum makespan lower
bound probabilistic minimum makespan
proposition probabilistic jsp suppose q sufficient solution
pr make makeq therefore makeq achievable strict
lower bound minimum makespan e makeq
proof since q sufficient exists deterministically critical path probabilistically optimal solution pr len lenq lenq
makeq critical path definition makeq makeq
makeq pr len makeq definition makespan sample
random durations vector make least large len
pr make makeq hence pr make makeq pr make
makeq implies makeq since pr make
proposition since probabilistically optimal solution
makeq solution makeq makeq
implies makeq achievable e pr make makeq


fiproactive jsp

finding sufficient q values
proposition shows lower bound probabilistic minimum makespan
sufficient value q solve lower bound
associated deterministic section looks finding sufficient
values q breaking condition simpler conditions
remainder section assume independent probabilistic jsp
let path solution define e len
p expected value
length probabilistic jsp equal pai define
var len variance length equal ai since
assuming durations independent
p
defining adequate b b write b b equals ai
qp

b
ai say b adequate deterministically critical path
probabilistically optimal solution pr len b e
chance b standard deviations longer expected length
duration normally distributed len normally distributed since
sum independent normal distributions even durations normally
distributed len often close normally distributed cf central limit
theorem extensions pr len b approximately b
unit normal distribution b value slightly less
adequate given approximate normality
defining b adequate values q say q b adequate exists
deterministically critical path probabilistically optimal solution
lenq b
following proposition shows task finding sufficient values q
broken follows almost immediately definitions
proposition q b adequate b adequate q sufficient
proof since q b adequate exists deterministically critical path
probabilistically optimal solution lenq b since b adequate
pr len b hence pr len lenq required

establishing b adequate values q value q b adequate
exists deterministically critical path probabilistically optimal solution
qp
p
p
p

lenq b equivalently
ai
ai q
ai
ai b
qp

q

mean ai

meanp
ai
ai
number activities path mean ai ai
activity ai uncertain e standard deviation equals
omitted summations means becomes number uncertain
activities path
q b

p

ai





written q



b


fibeck wilson

well known quite easily shown root qmean square collection
mean ai
numbers least large mean hence mean greater


equal therefore crude sufficient condition q b adequate q bm
upper bound number uncertain activities path
probabilistically optimal solution could take upper bound number
uncertain activities path solution particular could generate badequate q choosing q bm
sufficient value q putting two conditions together proposition

q value little less
sufficient given

lengths paths approximately normally distributed upper bound
number uncertain activities path optimal solution hence
proposition minimum makespan makeq associated deterministic
strict lower bound minimum makespan example
since chance normal distribution
standard deviations mean set q little less



one sometimes generate larger sufficient value q hence stronger lower
bound makeq focusing significantly uncertain activities choose value

p path say
p activity aj uncertain respect

ai j ai sum durations
activities uncertain fraction sum durations
path hence activities uncertain relatively small standard
deviations define upper bound number uncertain activities
involved path probabilistically optimal solution shown

b adequate
slight modification earlier argument q value b

hence q value little less







sufficient

experiments described section use varying n n jobs n
activities per job solutions paths involving large numbers activities
unlikely good solutions particular one might assume
optimal solution deterministically critical path involving
n activities given assumption following value q sufficient

e g
making makeq lower bound probabilistic minimum makespan q
n
q



n

motivates choice q table section

probabilistic jsp example continued number uncertain activities
running example see section figure section one
set
leads choice q slightly less
proposition discussion value q sufficient durations
associated deterministic given setting di qi
q q q solution sa best solution
makespan makeq sa q q q hence minimum


fiproactive jsp

deterministic makespan makeq equals approximately lower bound
probabilistic minimum makespan illustrating proposition
however sc clearly poor solution could consider solutions
sa sb sd deterministically critical path solutions involves two
uncertain activities within
range interest q values set
q leads stronger lower bound
tight lower bound minimum makespan
discussion lower bound
example able use construct tight lower bound
probabilistic minimum makespan however situation rather exceptional
two features example enable tight lower bound best
solution path almost longest path b standard deviations
uncertain durations equal analysis root mean square
approximated mean good approximation standard
deviations fairly similar extreme case non zero standard deviations
durations example root mean square actually equal
mean
generally number ways lower bound tend
conservative particular
choice often conservative us confident
genuine upper bound number uncertain activities path
optimal solution
approximating root mean square standard deviations average
standard deviations crude approximation standard deviations
durations vary considerably activities
approximating random variable make random length particular path
strength lower bound method however computationally feasible
reasonably large uses existing well developed jsp methods
evaluating solution monte carlo simulation
given time value want assess exists solution
chance random makespan greater methods
involve generating solutions partial solutions testing condition
noted earlier evaluating solution amounts solving pert uncertain durations p complete hagstrom p complete
computation dempster shafer belief wilson natural take monte carlo simulation burt garman try perform
exact computation instead choose accuracy level require high
chance random estimate within true value evaluation


fibeck wilson

optimal complexity low degree polynomial potentially high constant factor
corresponding number trials required given accuracy
evaluate solution partial solution monte carlo simulation perform
large number n independent trials assigning values random variable
trial generates deterministic check efficiently corresponding
makespan greater say trial succeeds proportion trials
succeed estimate pr make chance random makespan
case independent probabilistic jsps generate
random durations vector picking distribution pi value random duration
di activity ai general case picking random durations vector still
efficient many situations example distribution represented bayesian
network
estimating chance random makespan greater
perform n trials l n
trial l
pick random durations vector joint density function
let tl trial succeeds corresponding deterministic makespan greater
otherwise set tl
p
let n n
l tl proportion trials succeed estimate p
p pr make chance randomly generated durations vector leads
makespan solution greater expected value equal
q p since
pn
e tl p e n l e tl p standard deviation p p
n
shown follows v ar tl e tl e tl p p p p variables
p
p p

tl independent v ar n n
n
random variable n
v ar tl
n
binomially distributed demoivre laplace limit theorem feller
use normal distribution approximate
means large n generating value
high probability give value close pr make choose accuracy level
confidence level r e g r choose n pr p r
particular r normal approximation choosing number n trials
sufficient fixed accuracy level confidence level r number
trials n constant depend size
therefore excellent complexity complexity low order polynomial
single deterministic propagation must optimal clearly cannot hope beat
complexity deterministic propagation however constant factor large
require high accuracy
solution good enough
let time value let solution suppose monte carlo
n trials want confident achievable e


fiproactive jsp

pr make therefore need observed least little smaller
since estimate pr make
formalize shall use confidence interval style let k recall
p pr make unknown quantity want information
say p k implausible given following condition
holds p p
implies least k standard deviations expected value e
p kn p p
case p p k implausible given unlikely
event would happened example k given normal approximation
event happen every experiments k event
happen every experiments
pr make k implausible given confident
pr make achievable upper bound
hence minimum makespan confidence level
normal approximation binomial distribution k unit normal
distribution example k gives confidence around
similarly say p k implausible given
following condition holds p implies
least k standard
p
deviations expected value e p kn p p
definitions k implausibility slightly informal formal definitions
follows suppose k n define
p k implausible given p
p p following
condition holds p kn p p similarly p k implausible given
p
p p following condition holds p kn p p
k implausibility conditions cannot tested directly definition since
p unknown fortunately following gives equivalent conditions
easily checked
proposition definitions
k
n

p

p
ii p k implausible given kn
p k implausible given

p
proof p k implausible given setting p gives kn
p
required conversely suppose kn follows k


assume k write f x x k x x
since
n
p
k
k

n
f f
n
since f x quadratic polynomial positive coefficient x implies
solution equation f x two solutions since f
follows must solution f x greater

since p
solution implies p f p p k p p
n
q
p p
p p k
n p k implausible given
proving


fibeck wilson

q

con ii p k implausible given setting p gives k
q n
q
since p implies p k p p
since
versely k
n
n
right hand side strictly increasing function p p k implausible given
required

part shows us evaluate solution respect
p bound
k

generate monte carlo simulation least n less
confidence p e pr make
confidence achievable solution e upper bound
probabilistic makespan part ii used branch bound
described section determining backtrack node
generating upper approximation probabilistic makespan
solution
suppose given solution wish time value large enough
confident probabilistic makespan e
upper bound makespan monte carlo simulation
adapted purpose simulate values random makespan make
record distribution decide value k corresponding desired
degree confidence e g k corresponds confidence choose
minimal suchpthat associated value generated simulation satisfies
kn proposition pr make k implausible
given therefore confident pr make
confidence upper bound makespan balance
use notation represent upper estimate found
way

searching solutions
theoretical framework provides two key tools use building search
first use monte carlo simulation evaluate solution partial solution see
section second appropriate choice q value solve associated
deterministic lower bound minimum makespan
instance see section section make use tools
variations define number constructive local search describing
recall important concepts notation introduced
earlier sections
explicitly deal case independent probabilistic jsps durations positive integer random variables given
however valid
generalized probabilistic case assumptions noted section provided efficient way sample activity durations


fiproactive jsp

continuous random variables provided deterministic solver
handle continuous time values
summary notation
remainder makes use notation concepts earlier sections
briefly summarize
jsp probabilistic jsp solution totally orders activities requiring
resource e activities resource set activity ai aj require
resource determines ai must completed time
aj starts vice versa see section partial solution partially orders set
activities resource set associated solution non delay schedule relative
solution activities without predecessors started time
activities started soon predecessors completed makespan
solution time jobs completed associated non delay
schedule probabilistic jsp see section makespan make solution
random variable since depends random durations
quantity use evaluate solution makespan known
probabilistic makespan defined section probability random
makespan approximately equal
precisely smallest time value pr make
value therefore represents degree confidence required minimum makespan
known probabilistic minimum makespan minimum
solutions
time value achievable solution chance
random makespan achievable
see section
solutions probabilistic jsps evaluated monte carlo simulation see section
method derived generating upper approximation use
notation represent upper approximation constructed
approximately equal high chance less
see section thus represents probable upper bound probabilistic
minimum makespan
probabilistic job shop often associate deterministic jsp see section
mapping parameterized non negative real number q associated
deterministic jsp structure probabilistic jsp difference
duration activity ai equal qi mean
standard deviation respectively duration ai probabilistic
write makeq makespan solution respect associated deterministic
jsp makeq minimum makespan minimum makeq solutions
section shown propositions analysis section
certain values q time value makeq lower bound


fibeck wilson

constructive search
four constructive search introduced uses constraintbased tree search core search technique incorporating simulation q values different ways section define constructive detail provide
description heuristics constraint propagation building blocks used

b b n approximately complete branch bound
given ability estimate probabilistic makespan solution ability
test condition implies partial solution cannot extended solution
better probabilistic makespan obviously applicable search technique branch andbound b b use monte carlo simulation derive upper lower bounds
solution quality able cover entire search space
approximately complete approximately small probability
miss optimal solution due sampling error
b b tree rooted binary tree associated node e tree
partial solution se solution node leaf node empty partial solution
associated root node associated non leaf node e pair
activities ai aj j resource set whose sequence determined
partial solution se two nodes e extend se one sequences ai aj
adds opposite sequence heuristic used choose sequence try first
described section
value global variable confidence corresponding
choice ksee section exists solution whose makespan
whenever reach leaf node e upper estimate se
probabilistic makespan monte carlo simulation method
section set min variable initialized high value
non leaf nodes e check see worth exploring subtree e
perform monte carlo simulation partial solution se current value
generates use proposition ii determine pr make e
k implausible given backtrack since confident
exists solution extending partial solution se improves current best solution
k chosen sufficiently large confident miss good solution
refer b b n performs b ranch b ound simulation
n ode
b b dq l approximately complete iterative tree search
internal node e tree previous used monte carlo simulation
without strong propagation within trial lower bound probabilistic
makespans solutions extending partial solution se alternative idea generating
large number tests need much higher confidence usual
confidence interval fortunately confidence associated k normal approximation


binomial approximation tail normal distribution approximately k e k
tends extremely fast k increases



fiproactive jsp

b b dq l
returns solution lowest probabilistic makespan










findfirstb bsimleaves
q qinit
q timed
findoptb bsimleaves q
n il

end
q q qdec
end
return
b b dq l approximately complete iterative tree search

lower bound use section minimum makespan
solutions extending se associated deterministic q value
sufficient minimum makespan see proposition lower bound
probabilistic makespan standard constraint propagation deterministic durations
enables lower bound computed much faster simulation previous
leaf node simulation used b b n estimate
probabilistic makespan solution
basic idea requires selection q value however rather parameterize
others choose perform repeated tree
searches descending q value
finds initial solution line therefore initial
upper bound probabilistic makespan q subsequently starting
high q value one deterministic lower bound perform
tree search leaf e reached simulation used se
high q value likely deterministic makespan makeq se much greater
se since enforce constraint makeq se se finding se
simulation causes search return interior node high tree
makeq si se si represents set solutions subtree node
makeq si deterministic lower bound makespan solutions high
q values commonly observed experiments nodes
meet criterion therefore search able quickly exhaust search
space happens reduce q value small amount qdec e g
restart tree search eventually often quickly reach q value
exists full solution se makeq se se solution stored
current best set se b b n used upper bound
subsequent search
presents pseudocode basic make use two functions
defined pseudocode
findfirstb bsimleaves c q creates jsp activity durations defined
q value passed conducts branch bound search monte carlo


fibeck wilson

simulation used leaf node standard constraint propagation used
interior nodes first solution found whose probabilistic makespan less
c returned value probabilistic makespan c set
high line backtracking needed solution therefore one
leaf node visited one simulation performed
findoptb bsimleaves c q findfirstb bsimleaves c q except
solution lowest probabilistic makespan returned rather first one found
solution found nil value returned unless q value low enough
deterministic makespan lower bound probabilistic makespan
function necessarily return globally optimal solution
starting solution q serve initial upper bound optimal
probabilistic makespan practice b b dq l run limit cpu time
q reached within time limit approximately complete
noted possible especially high q value solution se
makeq se much larger se therefore search backtrack deepest
interior node makeq si se fact assignment se value
global cut upper bound probabilistic makespan technical reasons
beyond scope standard constraint tree search implementations
automatically handle global cuts therefore modified standard behavior
repeatedly post upper bound constraint makeq si causing series backtracks
correct interior node
refer b b dq l series b ranch b ound
searches descending q values simulation used leaves tree
b b dq l example novel constraint search technique might
useful wider context cost function expensive evaluate
inexpensive parameterizable lower bound calculation search overconstraining e choosing parameter value lead lower
bound iteratively relaxing bounding function may worth investigating
discuss section
b b tbs heuristic tree search
previous similar b b n beck wilson indicated
simulation responsible large percentage e g run time
reduce number times require simulation simulating solutions
good deterministic makespan deterministic filtering search central idea
rest investigated
simple method filtering solutions first spend fixed amount cpu time
solution low deterministic makespan makeq fixed q value
standard constructive tree search search restarted q value
whenever solution si found makeq si makeq simulation run
evaluate si estimate probabilistic makespan si probabilistic
makespan found better lowest probabilistic makespan far solution
stored search continued entire tree explored maximum allowed
cpu time expired contains pseudocode


fiproactive jsp

b b tbs q
returns solution lowest probabilistic makespan found










dinitial findoptb b q tinitial

solutions exist timed
findnextb b dinitial q time remaining
simulate


end
end
return
b b tbs heuristic tree search
make use number functions defined pseudocode
findoptb b c q creates jsp activity durations defined q
value passed conducts deterministic branch bound search cpu
seconds c upper bound deterministic makespan search
tree exhausted time limit reached best deterministic solution found
e one minimum makespan together deterministic makespan
returned monte carlo simulation done
findnextb b c q function produces sequence solutions one solution
time called whose deterministic makespan less c
defined q value cpu time limit solutions produced
leaves b b search tree order encountered note
c value change given enough cpu time
evaluate probabilistic makespan solutions whose deterministic makespan
less equal dinitial
simulate standard monte carlo simulation run solution
estimate probabilistic makespan returned

complete even choice q value deterministic
makespans lower bounds probabilistic makespan
guarantee optimal probabilistic solution deterministic makespan less
dinitial therefore even infinite cpu time may evaluated
called b b tbs b ranch b ound imed b etter olution
fixed cpu time spent good deterministic solution deterministic
solution found good better initial solution simulated
b b bs iterative heuristic tree search
extreme filtering first finds optimal deterministic solution uses
deterministic makespan filter choosing solutions simulate fixed


fibeck wilson

b b bs q
returns solution smallest probabilistic makespan found













dinitial findoptb b q
simulate

timed
search complete
makeq findnextb b dinitial q time remaining
simulate


end
end
ii
end
return
b b bs iterative heuristic tree search

q value optimal solution found simulated cpu time remaining
search series iterations starting optimal deterministic makespan
bound solutions deterministic makespan good general better
current bound found simulated subsequent iterations bound
deterministic makespan increased resulting larger set solutions
simulated solution lowest estimated probabilistic makespan returned
larger optimal deterministic makespan may found within cpu
limit case best deterministic solution found simulated returned
e one simulation done
formally finding optimal deterministic solution makespan make q
series iterations beginning executed iteration bound
deterministic makespans set makeq solutions se whose deterministic
makespans makeq se makeq simulated one lowest
probabilistic makespan returned presents pseudocode depends
functions defined
complete large enough cost bound greater
deterministic makespan activity permutations simulated
however may grow unreasonably large therefore treat
practically incomplete
refer b b bs b ranch b ound terative b est olution
heuristic constraint propagation details
described use texture heuristics decide pair activities sequence sequence try first heuristic builds resource profiles
combine probabilistic estimates contention activity resource
time point maximum point resource profiles selected activity


fiproactive jsp

pair contends resource selected time point heuristically chosen
sequence chosen one maximizes remaining slack intuition
pair activities contending highly contended resource time point
critical pair activities sequenced early search otherwise via
constraint propagation decisions time windows activities may
pruned point neither sequence possible texture heuristics
complexity search node mn number resources n
number activities resource
detailed description analysis texture heuristic see work
beck fox beck
constraint propagation used e except b b n
use strong constraint propagation techniques constraint scheduling temporal
propagation timetables le pape couronne vergamini gosselin edge finder
nuijten balance constraint laborie
local search
reason deterministic filtering search needs
branch bound indeed given finding simulating solutions
low deterministic makespans local search may perform better
constructive search
section present two deterministic filtering tabu search
define discuss details tabu search procedure
tabu tbs tabu search analog b b tbs
central idea behind tabu search deterministic filtering search generate
sequence promising deterministic solutions simulated seems reasonable
create analog b b tbs tabu search fixed q fixed amount
tinitial cpu time beginning run solution lowest possible deterministic makespan dinitial sought search restarted whenever solution
found deterministic makespan makeq dinitial monte carlo simulation
used approximate probabilistic makespan solution lowest estimated
probabilistic makespan returned
presents pseudocode simple use following
functions pseudo code given
findbesttabu c q function analogous findoptb b c q tabu search
run cpu seconds solution lowest deterministic makespan
q value less c returned
findnexttabu c q function analogous findnextb b c q sequence
solutions one solution time called whose deterministic makespan less
early experiments explored even simpler way tabu search solve probabilistic jsp
incorporating simulation neighborhood evaluation given search state move operator see
section details defines set neighboring states neighbor run monte
carlo simulation choose neighbor lowest probabilistic makespan technique
surprisingly proved impractical considerable cpu time spent determine single move



fibeck wilson

tabu tbs q
returns solution lowest probabilistic makespan found










dinitial findbesttabu q tinitial

termination criteria unmet
findnexttabu dinitial q time remaining
simulate


end
end
return
tabu tbs local search filtering
c returned defined q value cpu time
limit solution produced next solution found tabu search meets
makespan requirement

call tabu tbs tabu imed b etter olution
b b tbs c value updated iteration initial search line
used good deterministic solution simulation done solutions whose
deterministic makespan better solution found initial search
tabu bs iterative tabu search
core tabu search implementation fixed durations necessarily use entire
cpu time see section fact especially small instances often terminates
quickly therefore create iterative tabu solver probabilistic
jsp similar b b bs
first phase time limit one second less overall time limit
tabu search used good deterministic solution fixed q value
solution simulated tabu search may terminate time
limit expired remaining time spent generating solutions deterministic
makespan within fixed percentage initial solutions deterministic makespan
b b bs iterations run increasing value starting
iteration simulate solutions found tabu search whose deterministic makespan
dinitial dinitial value deterministic makespan found
phase solution lowest probabilistic makespan returned
termed tabu bs tabu terative b est earch pseudocode
presented
tabu search details
tabu search used solutions deterministic durations tsab
due nowicki smutnicki restricted move operator termed
tabuf proposed beck wilson corresponds first iteration tabu bs



fiproactive jsp

tabu bs q
returns solution smallest probabilistic makespan found













dinitial findbesttabu q
simulate

timed
termination criteria unmet
makeq findnexttabu dinitial q time remaining
simulate


end
end
ii
end
return
tabu bs iterative tabu filtering

n blazewicz domschke pesch produces neighborhood swapping
subset pairs adjacent activities resource given solution standard
tabu list ten moves done immediate past kept escape local minima
use standard aspiration criteria accepting move tabu list resulting
solution better solution found far
one important additions basic tabu search mechanism tsab
maintenance elite pool solutions small set e best solutions encountered far updated whenever best solution
encountered standard tabu search stagnates e made large number
moves without finding best solution search returns one elite solutions
continues search solution removed set elite solutions search
terminated maximum cpu time reached elite solution pool
empty
summary
table summarizes introduced

empirical investigations
empirical investigations address two main issues scaling behavior
approximately complete heuristic methods size uncertainty increase
whether deterministic methods represent uncertainty duration
extensions useful respect scaling two interesting subquestions first approximately complete techniques compare
second cross point terms size heuristic
techniques perform approximately complete techniques


fibeck wilson

deterministic

b b

complete
yes

b b dq l

b b

yes

b b tbs

b b



b b bs

b b

yes

tabu tbs

tabu



tabu bs

tabu



name
b b n

description
b b simulation node upper
lower bounds
b b deterministic durations used lower
bounds simulation done leaf node
durations decrease iteration
good deterministic solution
restart search simulating whenever
deterministic solution good found
optimal deterministic solution
restart search simulating whenever
deterministic solution within found
repeat increasing
good deterministic solution
restart search simulating whenever
deterministic solution good found
good deterministic solution
possible restart search simulating whenever
deterministic solution within
found repeat increasing

table summary introduced probabilistic makespan
instance job shop scheduling probabilistic durations

heuristic techniques necessary assign fixed durations activity
standard use mean duration however cases
representation uncertainty surrounding duration take
account want high probability execution general
heuristically use formulation lower bound minimum makespans presented
section duration activity ai defined qi q fixed
non negative value respectively mean standard deviation
duration ai since longer limited producing lower bound
flexibility selecting q intuitively want q value leads situation
good deterministic solutions low values probabilistic makespan
experiment number q values analysis section shown table
cases set b see section corresponding value q
generated instance monte carlo simulation simulating paths
n activities
experimental details
empirical investigations examine four sets probabilistic jsps size
jobs consisting activities
set three uncertainty levels uj considered deterministic
generated existing generator watson barbulescu whitley howe


fiproactive jsp

q


q


n

q
q q




n

q
meanai
meanai

q

table q values used experiments choices q q motivated
analysis section

integer durations drawn uniformly interval three probabilistic instances
different levels uncertainty produced setting mean duration
deterministic duration activity ai randomly drawing uniform
distribution standard deviation duration activity ai interval
uj distribution duration approximately normal size
generate deterministic transformed probabilistic instances
sizes chosen elicit range behavior small
approximately complete expected able prove
approximate optimality larger even underlying deterministic
could solved optimality within time limit used chose use
existing generator rather example modifying existing benchmark
allowed us full control structure three levels
uncertainty simply chosen low medium high uncertainty conditions
compare
given stochastic nature simulation tabu search run times instance different random seeds run
time limit cpu seconds monte carlo simulation uses n independent
trials
hardware used experiments ghz pentium mb main
memory running linux redhat implemented ilog scheduler

recall b b dq l employ descending sequence q values
except initial q value qinit set
decrement qdec qinit value used
change made observing qinit initial tree search
would often fail solution prove none existed within reasonable
amount time believe due instances size
solution q satisfied constraint simulated makespan must
less equal deterministic approximation e makeq se se see
section yet search space sufficiently large require significant
amount search prove reducing qinit initial solution found
quickly instances
primary evaluation criterion mean normalized probabilistic makespan mnpm
achieved relevant subset instances display
data different subsets examine performance different sizes
uncertainty levels mean normalized probabilistic makespan defined follows


fibeck wilson

mnpm l

x l
l
dlb l





l set instances l mean estimate probabilistic
makespan found l runs dlb l lower bound probabilistic makespan l except dlb found solving
deterministic q simple plausibly sufficient q value see section
table instance solved constraint tree search incorporating
texture heuristics global constraint propagation used maximum
time cpu seconds given deterministic smaller
easily solved optimality however none solved optimality
dlb values chosen represent best solutions found
true lower bounds
analysis
table presents overview experiments size
uncertainty level q q shown heuristic
large performance difference among non zero q values q q q return
issue section cell table mean value independent
runs aside instances runs reached cpu
second time limit therefore report cpu times


size





unc
level













b b complete
n
dq l
























b b heuristic
tbs
bs






















tabu
tbs
bs


















table mean normalized probabilistic makespans indicates
set runs high confidence found approximately optimal
makespans indicates sets normalization done
approximate lower bounds lowest mnpm found set
shown bold



fiproactive jsp

impression gained looking bold entries indicate
lowest mean normalized probabilistic makespan mnpm found
set b b n b b dq l approximately optimal solutions smallest
set b b dq l tabu bs lowest probabilistic makespans
performance complete b b techniques
especially b b n degrade heuristic b b
lowest probabilistic makespans finally largest tabu
techniques clearly superior
one anomaly overall table seen b b n b b dq l
entries two three uncertainty levels terminate limit cpu time resulting approximately optimal solutions however
mean normalized probabilistic makespans lower b b dq l
conjecture artifact b b dq l biases simulation
toward lower probabilistic makespan values b b n particular solution
simulated b b dq l solution may simulated multiple
times leading bias illustration assume b b dq l finds approximately
optimal solution searching tree corresponding q q subsequent
iteration q q q provided deterministic makespan less previously identified probabilistic makespan e makeq solution found
simulated actual identity current best solution used
determine solutions simulate subsequent simulation lower value
generated replace previous lowest probabilistic makespan value
leads situation may simulate solution multiple times keeping
lowest probabilistic makespan found simulations similar simulation
possible tabu bs
test statistical significance table ran series randomized
paired tests cohen p statistical tests
displayed table different sizes different uncertainty levels
collapsed example statistics
instances informal impression discussed reflected tests b bdq l tabu bs dominating two smallest sizes branch bound
heuristic approaches performing best tabu techniques
delivering best
overview primary interpretation performance
experiments follows smaller complete techniques
able cover entire search space least significant portion though
case b b dq l solutions chosen simulation heuristically driven
deterministic makespan values lower bound section ensure
good solutions found provided iterations small q values run within
cpu time limit complete techniques able
simulate sufficient variety solutions especially b b n heuristic guidance
poor note however b b dq l competitive many
sets better tabu believe
stem ability b b heuristic quickly


fibeck wilson


size





statistical significance
p
b b dq l tabu bs b b tbs b b bs tabu tbs b b n
b b dq l tabu bs b b bs b b tbs tabu tbs b b n
b b tbs b b bs tabu bs b b dq l tabu tbs b b n
tabu tbs tabu bs b b tbs b b bs b b dq l b b n

table statistically significant relationships among
shown table within set significant difference
relation indicates left hand set significantly
lower mnpm right hand set set indicated
represents complicated relationship amongst tabu bs
tabu tbs pairs set significant performance differences

optimal deterministic solution systematically simulate solutions
deterministic makespans close optimal contrast tabu
systematically enumerate solutions finally largest
hypothesize tabu search techniques best performance able
better deterministic solutions simulate
size size increase see unexpected decrease
quality probabilistic makespans found simple reasonable explanation
trend less search space explored within given cpu time
larger likely factors contribute trend e g
quality lower bound may well systematically decrease size increases
uncertainty level normalized makespan values increase within size
uncertainty level rises calculated normalization
lower bound possible observed decrease solution quality actually due
decrease quality lower bound rather reduction quality
solutions found uncertainty increases test idea table
normalized optimal probabilistic makespans found b b n
rather deterministic lower bound table shows apart
b b dq l tabu bs trend increasing mean normalized probabilistic
makespan still evident least putative decreasing quality
lower bound cannot entire explanation trend worse performance
higher levels uncertainty section revisit question provide
evidence could explain perform worse uncertainty increased
lend credibility conjecture observed super optimal
performance b b dq l tabu bs small due repeatedly
simulating solution low levels uncertainty repeated simulations truly
best solution vary greatly resulting mnpm value higher levels
uncertainty distribution simulated makespans wider therefore repeated
simulation solution biases toward smaller probabilistic makespan values
observe b b dq l tabu bs table


fiproactive jsp

unc
level




b b complete
n
dq l








b b heuristic
tbs
bs







tabu
tbs
bs




table mean normalized probabilistic makespans
set normalized optimal probabilistic makespans found b b n

balance section turn detailed analysis
analysis b b complete
performance b b n poor unable exhaustively search branchand bound tree high computational cost running simulation every node
relatively weak lower bound partial solutions provide conspire technique
scale beyond small

size





uncertainty










level






table lowest q value used size uncertainty level b bdq l except initial q value
initial q value

b b dq l able perform somewhat better b b n larger even
able exhaustively search tree q table shows
minimum q values attained size uncertainty level deterministic
durations defined q value serve guide prune search iteration
therefore heuristic see search heuristically guided
extent solutions low deterministic makespans low probabilistic
makespans however characteristics solutions found search unclear
recall b b dq l starts high q value combination constraint
deterministic makespan must less equal best simulated probabilis one idea improving lower bound investigate incorporate resourcebased propagators e g edge finding evaluation partial solution single trial
internal node deterministic makespan found sampling distributions finding
longest path temporal network sampling however possible apply
standard propagation techniques might insert additional edges precedence graph
thereby increase makespan improving lower bound



fibeck wilson

tic makespan found far significantly prunes search space ideally would
search high q solutions good probabilistic makespans
wish good solutions quickly simulated probabilistic makespan
values used prune subsequent search lower q values therefore effort
better understand b b dq l search examine characteristics initial
solutions finds
idea quality solutions produced high q values seen
comparing probabilistic makespan found high q first solution found
best solution found run table presents comparison form f
mean normalized makespans initial solutions found b b n b b dql data indicate first solution found b b dq l much better
found b b n b b n searches initial solution upper bound
deterministic makespan constrain solution therefore
easy e backtracking little constraint propagation
heuristic information available guide search solution small makespan
contrast b b dq l searches initial solution high q value means
searching highly constrained search space deterministic makespan must
less probabilistic makespan therefore tight upper bound
deterministic makespan relative durations incorporate q values
many cases initial iterations fail feasible solutions quickly
eventually q value low enough allow feasible solution however search
solution strongly guided propagation constraints summary
initial search b b n guidance constraint propagation toward good
solution b dq l guided constraint propagation overly constrained
table shows experiments guidance tends better
initial solutions believe observation may useful generally constraint
solving see section
provide fuller indication performance differences table presents
improvement first solution achieved difference first solution
last solution dl found dl value reported table
larger sets improvement made first solution b b dq l
greater smaller sets improvement b b n greater
b b dq l however suspect ceiling effect reduces amount b b dq l
improve e initial solutions already quite close optimal
analysis heuristic
turn performance heuristic first examine hypothesis
performance dependent two factors ability
solutions low deterministic makespans correlation good deterministic
probabilistic makespans turn analysis effect differing q
values heuristic performance
finding good deterministic makespans argued performance
heuristic techniques b b dq l dependent upon ability solutions
good deterministic makespans provide evidence argument looked


fiproactive jsp


size





unc
level













b b n
df
df l

























b b dq l
df
df l

























table mean normalized makespan first solutions found
df difference mean normalized makespans first
last solutions df dl

quality best deterministic solutions found b b bs tabu bs
hypothesize better performing found better deterministic
solutions worse performer
table presents two largest sets mean
normalized deterministic makespan mndm calculated follows
mndm l

makeq l
x
l
makeq min l b b bs





l set instances makeq l mean deterministic makespan found
l runs makeq min l b b bs lowest deterministic
makespan found b b bs runs l mndm therefore
provides relative measure quality average deterministic makespans
two higher value worse average makespan found relative
b b bs
table consistent hypothesis b b bs
outperforms tabu bs former able solutions lower mean deterministic
makespan reversed tabu bs finding
better mean deterministic makespans better probabilistic makespans
lends support original motivation deterministic filtering performance terms probabilistic solution quality
positively related quality deterministic solutions able
next section addresses question performance relationship observed
sets influenced conjectured
repeated simulation behavior tabu bs



fibeck wilson


size



uncertainty
level







mndm
b b bs tabu bs













table mean normalized deterministic makespan mndm b b bs tabui bs

correlation deterministic probabilistic makespan ability good deterministic makespans would irrelevant
ability good probabilistic makespans without correlation two
reasonable expect level uncertainty instance impact
correlation low uncertainty variations duration small meaning
expect probabilistic makespan relatively close deterministic makespan
uncertainty level high distribution probabilistic makespans single
solution wider resulting less correlation hypothesize impact
uncertainty level contributes observed performance degradation see tables
heuristic techniques higher uncertainty levels size held constant
examine hypothesis generated deterministic jsp
instances generator parameters used standard deviations
duration activity instances generated independently
five uncertainty levels uj resulting total
instances uncertainty level instance four q
values table randomly generated deterministic solutions
simulated r statistical package r development core team
measured correlation coefficient set cell table
pairs data points deterministic probabilistic makespans random
deterministic solutions instances
uncertainty level






q






q






q






q






table correlation coefficient r comparing pairs deterministic probabilistic makespans set probabilistic jsps cell represents
correlation coefficient deterministic probabilistic pairs



fiproactive jsp

table supports explanation performance heuristic techniques
uncertainty level increases correlation deterministic makespan
corresponding probabilistic makespan lessens strength correlation somewhat
surprising even highest uncertainty level standard deviation duration activity uniformly drawn times mean duration
correlation q q positive indication heuristic
suggests may scale well higher uncertainty levels provided
reasonable q value used examine impact q values original experiments implications deterministic probabilistic makespan correlation
next section
emphasized correlations deterministic probabilistic makespans randomly generated solutions addressed
correlations might change high quality solutions might considered
appropriate population sample one technical difficulty
design experiment examine ensure sufficiently randomized sample
population good solutions could depend strongly rather
arbitrary particular choice quality cutoff solutions
effect q values heuristic requires fixed q value
experimented four different values see table table displays significant pairwise differences among q values heuristic measured randomized
paired tests cohen p observed almost
significant differences low levels uncertainty smallest
set higher levels uncertainty larger q never better
one higher q values many cases q worst mean makespan
among q values majority sets
significant differences given never case lower q value leads
significantly better higher q value
correlation table provide explanation differences
performance q competitive
large difference correlations deterministic probabilistic solutions e
uncertainty levels uncertainty level significant
reduction correlation coefficient q corresponding reduction mean
normalized probabilistic makespans found q
summary
experiments summarized follows
principled use simulation b b n useful small
simulation time major component run time resulting little
exploration search space
b b dq l idea iteratively reducing parameter determines validity lower bound equal performance small prob addressing behavior b b dq l q descends run
examining fixed q values



fibeck wilson


size








unc
level

















b b
tbs
bs
q q q q
q q q
q q q q
q q q q
q q q q
q q q q
q q q
q q q
q q
q q q
q q q
q q

tabu
tbs
bs
q q
q q q q
q q q q
q q
q q q
q q q
q q
q q q q
q q
q q q q q q q q
q q q q

q q q q

table pair wise statistical tests set
notation b indicates q achieved significantly
better solution e lower probabilistic makespan used q b
indicates significant differences statistical tests randomized paired
tests cohen p

lems much better performance larger compared b b n
work needed understand behavior however preliminary evidence indicates able good solutions quickly current
application domain
series heuristic proposed deterministic makespan
filter solutions would simulated demonstrated performance depends ability good deterministic
makespans correlation quality deterministic probabilistic solutions shown even quite high uncertainty
level deterministic constructed lead strong deterministic probabilistic makespan correlation
central success heuristic use q value governed
extent duration uncertainty represented durations activities
deterministic shown incorporation uncertainty
data leads stronger correlation deterministic probabilistic makespans
corresponding ability better probabilistic makespans


fiproactive jsp

extensions future work
section look three kinds extensions work first
theoretical framework fact applies far general probabilistic scheduling
job shop scheduling section discuss ways
probabilistic jsp presented might improved finally discuss
possibility developing central idea b b dq l solving
general constraint optimization
generalization scheduling
derived important case job shop scheduling
fact valid much broader class scheduling including
resource constrained project scheduling common form e g probabilistic
version deterministic studied work laborie section
describe extend framework approaches
relies fact job shop scheduling one focus
orderings activities rather directly assignments start times activities
specifically definition minimum makespan orderings equivalent
one start time assignments equivalence holds much generally
first give basic definitions properties immediate extensions defined section characterize class scheduling
properties require use logical expression represent
constraints give key relating schedule
minimum makespan ordering minimum makespan section discusses
extended class probabilistic scheduling section considers different
optimization functions
schedules orderings makespans
section given set activities activity ai associated positive duration di deterministic case schedule defined
function set activities set time points non negative
numbers defining activity starts let z schedule makespan make z
schedule z defined time last activity completed e
maxai z ai di say z orders ai aj aj starts earlier
ai ends e z ai di z aj
essential aspect job shop one focus
orderings activities rather schedules section use term solution
ordering satisfies constraints given jsp define ordering
strict partial order e irreflexive transitive relation set activities
hence ordering ai ai ai
ai aj aj ak
ai ak ai aj say orders ai aj say
ai predecessor aj path path sequence activities
ai precedes aj sequence orders ai aj length len path
ordering defined sum durations activities path


fibeck wilson

p
e ai di makespan make ordering defined length
longest path path said critical path length equal
makespan ordering e one longest paths
schedule associated ordering schedule z define ordering sol z
follows sol z orders activity ai aj z orders ai aj
conversely ordering one define non delay schedule optimal
among schedules compatible ordering starting activity soon
predecessors finish let ordering inductively define schedule z sched
follows ai predecessor start ai time e z ai otherwise
set z ai maxaj pred ai z aj dj pred ai set predecessors ai
fact acyclic guarantees defines schedule section
following two important properties first states makespan ordering
equal makespan associated schedule second states makespan
schedule better makespan associated ordering
proposition
ordering make sched make
ii schedule z make sol z make z
proof straight forward follows easily induction schedule z
respects precedence constraints expressed ordering last activity
path end earlier z length path applying critical path
implies ii make sol z make z implies half make sched make
working backwards activity finishes last sched choosing immediate
predecessor stage one generates reverse order path whose length equal
make sched hence showing make sched make proving
positive precedence expressions
define class scheduling call positive precedence expressions ppes represent constraints scheduling assumes
preemption activities cannot interrupted started use
makespan cost function
activities ai aj expression j interpreted constraint
possible schedules activity aj starts earlier end activity ai
expressions called primitive precedence expressions positive precedence expression
defined logical formula built primitive precedence expressions conjunctions
disjunctions term positive used since involve negations formally
set e positive precedence expressions defined smallest set
e contains j ai aj b e
e
positive precedence expressions interpreted constraining schedules
let e ppe let z schedule define z satisfies recursively
follows


fiproactive jsp

z satisfies primitive precedence expression j z orders
aj e z ai di z aj
z satisfies conjunction two constraint expressions satisfies

z satisfies disjunction two constraint expressions satisfies
least one
similarly ordering positive precedence expression recursively define
satisfies obvious way satisfies j orders
aj ordering satisfies satisfies ordering satisfies
satisfies
positive precedence expressions powerful enough represent constraints
job shop scheduling resource constrained project scheduling
jsps positive precedence expressions resource constraints job shop scheduling give rise disjunctions primitive precedence expressions pair
activities ai aj require resource expression j j
expresses ai aj overlap one precedes
ordering activities job expressed terms primitive expressions j
ai precedes aj within job hence constraints job shop
expressed positive precedence expression conjunctive normal form e conjunction
disjunctions primitive precedence expressions
rcpsps ppes constraints resource constrained project scheduling
rcpsp pinedo brucker et al laborie ghallab laborie
expressed positive precedence expression conjunctive normal form
rcpsp precedence constraints activities expressed
primitive precedence expression let conjunction rcpsp
set resources positive capacity associated activity
resource r rate usage ai r resource r activity ai following
resource constraints schedule resource r time point sum
ai r activities ai progress e started
yet ended must exceed capacity resource r
define forbidden set conflict set set activities whose total usage
resource exceeds capacity resource let f set forbidden sets
wished could delete f set superset set f
could delete set h contains elements ai aj ai precedes aj
according resource constraints expressed equivalently h f
exists time every activity h progress holds
h f exist two activities h overlap since pairs
activities h overlap activities h progress latest start time
activities h e exists ai aj h j hence schedule satisfies
resource constraints satisfies positive precedence expression defined


fibeck wilson




hf



j

ai aj h
j

therefore expression represents rcpsp e schedule satisfies constraints
rcpsp satisfies
another class scheduling represented positive
precedence expression class precedence constraints gillies
liu mohring skutella stork
solutions minimum makespan
fixed positive precedence expression say schedule z valid
satisfies say ordering solution satisfies ordering satisfies
j construction sched satisfies j follows immediately
schedule z satisfies j sol z satisfies j following
proved easily induction number connectives
lemma ppe solution sched valid schedule
z valid schedule sol z solution
minimum makespan defined infimum makespan valid
schedules e infimum make z valid schedules z minimum solution
makespan defined minimum makespan solutions e minimum
make solutions following key links schedulebased definition minimum makespan solution definition follows
proposition lemma since solution valid schedule e sched
value makespan valid schedule z solution e
sol z least good value makespan
proposition let positive precedence expression minimum
makespan equal minimum solution makespan
probabilistic scheduling ppes
probabilistic versions scheduling defined way
jsps duration activity ai random variable positive precedence
expression used represent constraints
definitions sections immediately extended much
general setting still hold exactly proofs
particular probabilistic one associates corresponding deterministic
way lower bound section longest
path characterization makespan monte carlo least usefulness
relies fact makespan solution equal makespan associated
schedule furthermore section extend given one method
solving corresponding deterministic


fiproactive jsp

ordering policies use fixing partial ordering activities
irrespective sampled values durations known earliest start policies
radermacher policies studied rcpsps see e g
stork however aim work minimize expected makespan whereas
attempting minimize makespan
different optimization functions
evaluating comparing solutions use monte
carlo simulation generate sample distribution techniques quite general
much work generalizes immediately regular cost functions regular means function monotonic sense increasing
end activity schedule decrease cost regular function
efficiently computable measurement sample distributions accommodated
example could easily adapt situations probability extreme solutions
important basing optimization function maximum sampled makespan conversely could use measures tightness makespan distribution situations
minimizing variance measure accuracy schedule important furthermore weighted combinations functions e g makespan plus measure
distribution tightness could easily incorporated
modify account ways comparing solutions
sample distributions example could perform tests sample
distributions determine one solution significantly lower expected makespan
toward better probabilistic jsps
two directions future work presented first
b b n could improved make use deterministic techniques incorporate probabilistic reasoning existing deterministic techniques example number
deterministic lower bound formulations pert networks exist operations literature ludwig mohring stork may used evaluate partial
solutions similarly perhaps dominance rules presented daniels carrillo
one machine robustness generalized multiple resources another
improving b b n performance incorporate explicit reasoning
probability distributions standard constraint propagation techniques techniques
longest path calculations edge finding make inferences propagation
minimum maximum values temporal variables believe many
techniques adapted reason probabilistic intervals related work
done example simple temporal networks uncertainty morris muscettola
vidal tsamardinos
second direction future work improvement heuristic
key advantage make use deterministic techniques
scheduling transforming probabilistic deterministic bring
significant set existing tools bear developments include adaptively changing q values search order lead
solutions better values probabilistic makespan deeper understanding


fibeck wilson

relationship good deterministic solutions good probabilistic solutions
building work necessary pursue work principled fashion
course proactive techniques sufficient practice schedules dynamic
need adapted jobs arrive existing jobs canceled execution time
reactive component necessary deal unexpected sufficiently unlikely disruptions
nonetheless occur complete solution scheduling uncertainty needs
incorporate elements reason uncertainty different levels granularity
different time pressures see work bidot vidal laborie beck
recent work direction
exploiting unsound lower bounds constraint programming
b b dq l may represent solving applied
beyond current application area abstract away probabilistic jsp application
central idea b b dq l exploit unsound lower bound constrain
search run subsequent searches gradually relaxed unsound lower bound
may play strengths constraint programming searching within
highly constrained spaces
example assignment ap well known lower bound traveling
salesman tsp used cost constraint literature
focacci lodi milano rousseau gendreau pesant focacci given
tsp p let ap p q corresponding assignment travel distances
multiplied q let dij distance cities j p let ij
distance cities j ap p q ij dij q q
similar b b dq l applied solve tsp
would interesting investigate compares traditional
optimization constraint programming may particularly useful applications evaluation partial solutions expensive exists
parameterizable inexpensive lower bound

conclusion
addressed job shop scheduling durations activities
independent random variables theoretical framework created formally define
prove soundness two components monte carlo simulation
upper bounds probabilistic makespan solution partial solution
carefully defined deterministic jsp whose optimal makespan lower bound
probabilistic makespan corresponding probabilistic jsp
used two components together constraint programming
tabu search define number solve probabilistic jsps introduced
three solution approaches branch bound technique monte carlo simulation
evaluate partial solutions iterative deterministic search monte carlo simulation
evaluate solutions series increasingly less constrained
parameterizable lower bound number deterministic filtering
generate sequence solutions deterministic jsp simulated
monte carlo simulation


fiproactive jsp

empirical evaluation demonstrated branch bound technique
able approximately optimal solutions small instances iterative
deterministic search performs well better branch bound
sizes however medium large instances deterministic filtering
techniques perform much strongly providing optimality guarantees
experimentation demonstrated techniques deterministic methods
correlation deterministic makespan probabilistic makespan key factor
performance taking account variance duration deterministic
led strong correlations good algorithmic performance
proactive scheduling techniques seek incorporate uncertainty offline predictive schedule goal techniques increase robustness
schedules produced important schedule typically generated
executed isolation decisions deliver raw materials
schedule stream factories affected individual schedule indeed
schedule seen locus competing constraints across company supply
chain fox differences predictive schedule execution
significant source disruption leading cascading delays across widely separated entities
ability therefore develop schedules robust uncertainty important
represents step direction

acknowledgments
work received support science foundation ireland grants pi c
natural sciences engineering council canada
ilog sa authors would thank daria terekhov radoslaw szymanek
comments previous versions preliminary versions work reported
published beck wilson

references
beck j c texture measurements basis heuristic commitment techniques
constraint directed scheduling ph thesis university toronto
beck j c fox dynamic structure analysis basis
constraint directed scheduling heuristics artificial intelligence
beck j c wilson n job shop scheduling probabilistic durations
proceedings sixteenth european conference artificial intelligence ecai
pp
beck j c wilson n proactive scheduling probabilistic durations proceedings nineteenth international joint conference artificial
intelligence ijcai pp
bidot j general framework integrating techniques scheduling uncertainty ph thesis ecole nationale dingeieurs de tarbes


fibeck wilson

bidot j vidal laborie p beck j c general framework scheduling
stochastic environment proceedings twentieth international joint
conference artificial intelligence ijcai pp
blazewicz j domschke w pesch e job shop scheduling conventional solution techniques european journal operational

boutilier c dean hanks decision theoretic structural assumptions computational leverage journal artificial intelligence

brucker p drexl mohring r neumann k pesch e resource constrained
project scheduling notation classification methods european journal
operational
burns punnekkat littlewood b wright probabilistic guarantees fault tolerant real time systems tech rep deva tr design validation esprit long term project available
http www fcul ec org deva
burt j garman b monte carlo techniques stochastic network analysis proceedings fourth annual conference applications simulation
pp
cohen p r empirical methods artificial intelligence mit press cambridge mass
daniels r carrillo j robust scheduling single machine systems
uncertain processing times iie transactions
davenport j gefflot c beck j c slack techniques robust
schedules proceedings sixth european conference ecp
davenport beck j c survey techniques scheduling uncertainty
tech rep available http www tidel mie utoronto ca publications php
drummond bresina j swanson k case scheduling proceedings
twelfth national conference artificial intelligence aaai pp
menlo park ca aaai press mit press
feller w introduction probability theory applications third edition john wiley sons york london
focacci f lodi milano hybrid exact tsptw
informs journal computing
fox constraint directed search case study job shop scheduling ph
thesis carnegie mellon university intelligent systems laboratory robotics institute pittsburgh pa cmu ri tr
gao h building robust schedules temporal protectionan empirical study
constraint scheduling machine failure uncertainty masters thesis
department industrial engineering university toronto


fiproactive jsp

garey r johnson computers intractability guide theory
np completeness w h freeman company york
ghosh guaranteeing fault tolerance scheduling real time systems
ph thesis university pittsburgh
ghosh melhem r mosse enhancing real time schedules tolerate
transient faults real time systems symposium
gillies w liu j w scheduling tasks precedence constraints siam j comput
hagstrom j n computational complexity pert networks

herroelen w leus r project scheduling uncertainty survey
potentials european journal operational
laborie p propagating resource constraints ai
scheduling existing approaches artificial intelligence
laborie p complete mcs search application resource constrained
project scheduling proceedings nineteenth international joint conference
artificial intelligence ijcai pp
laborie p ghallab sharable resource constraints proceedings fourteenth international joint conference artificial intelligence
ijcai
le pape c couronne p vergamini gosselin v time versus capacity
compromises project scheduling proceedings thirteenth workshop
uk special interest group
leon v j wu storer r h robustness measures robust scheduling
job shop iie transactions
ludwig mohring r stork f computational study bounding
makespan distribution stochastic project networks annals operations

meuleau n hauskrecht kim k peshkin l kaelbling l dean boutilier c
solving large weakly coupled markov decision processes proceedings
fifteenth national conference artificial intelligence aaai
mohring r skutella stork f scheduling precedence constraints siam j comput
morris p muscettola n vidal dynamic control plans temporal
uncertainty proceedings seventeenth international joint conference
artificial intelligence ijcai
nowicki e smutnicki c fast taboo search job shop
management science
nuijten w p time resource constrained scheduling constraint satisfaction ph thesis department mathematics computing science
eindhoven university technology


fibeck wilson

pinedo scheduling theory systems nd edition prenticehall
r development core team r language environment statistical computing
r foundation statistical computing vienna austria isbn
radermacher f j scheduling project networks annals operations

rousseau l gendreau pesant g focacci f solving vrptws
constraint programming column generation annals operations

stork f branch bound stochastic resource constrained project
scheduling tech rep technische universitat berlin department mathematics
tsamardinos probabilistic robust execution temporal plans
uncertainty methods applications artificial intelligence proceedings
second hellenic conference artificial intelligence vol lecture notes
artificial intelligence pp
watson j p barbulescu l whitley l howe contrasting structured
random permutation flow shop scheduling search space topology
performance informs journal computing
wilson n dempster shafer theory kohlas j moral
eds uncertainty defeasible reasoning handbook
defeasible reasoning kluwer academic publishers
wurman p wellman optimal factory scheduling stochastic dominance
proceedings twelfth conference uncertainty artificial intelligence
uai




