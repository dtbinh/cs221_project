Journal Artificial Intelligence Research 12 (2000) 235-270

Submitted 12/99; published 5/00

Backbone Fragility Local Search Cost Peak
Josh Singer

joshuas@dai.ed.ac.uk

Division Informatics, University Edinburgh
80 South Bridge, Edinburgh EH1 1HN, United Kingdom

Ian P. Gent

ipg@dcs.st-and.ac.uk

School Computer Science, University St. Andrews
North Haugh, St. Andrews, Fife KY16 9SS, United Kingdom

Alan Smaill

A.Smaill@ed.ac.uk

Division Informatics, University Edinburgh
80 South Bridge, Edinburgh EH1 1HN, United Kingdom

Abstract
local search algorithm WSat one successful algorithms solving
satisfiability (SAT) problem. notably effective solving hard Random 3-SAT
instances near so-called satisfiability threshold, still shows peak search cost
near threshold large variations cost different instances. make number
significant contributions analysis WSat high-cost random instances, using
recently-introduced concept backbone SAT instance. backbone set
literals entailed instance. find number solutions predicts
cost well small-backbone instances much less relevant large-backbone
instances appear near threshold dominate overconstrained region.
show strong correlation search cost Hamming distance
nearest solution early WSats search. pattern leads us introduce measure
backbone fragility instance, indicates persistent backbone clauses
removed. propose high-cost random instances local search
large backbones backbone-fragile. suggest decay cost
beyond satisfiability threshold due increasing backbone robustness (the opposite
backbone fragility). hypothesis makes three correct predictions. First,
backbone robustness instance negatively correlated local search cost
factors controlled for. Second, backbone-minimal instances (which 3-SAT
instances altered backbone-fragile) unusually hard WSat. Third,
clauses often unsatisfied search whose deletion
effect backbone. understanding pathologies local search methods, hope
contribute development new better techniques.

1. Introduction
problem instances require high computational cost algorithms
solve? Answering question help us understand interaction search
algorithms problem instance structure potentially suggest principled improvements, example Minimise-Kappa heuristic (Gent, MacIntyre, Prosser, & Walsh,
1996; Walsh, 1998).
paper study propositional satisfiability problem (SAT). SAT important
first perhaps archetypal NP-complete problem. Furthermore, many
c
2000
AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiSinger, Gent & Smaill

AI tasks practical interest constraint satisfaction, planning timetabling
naturally encoded SAT instances.
SAT instance C propositional formula conjunctive normal form. C bag
clauses represents conjunction. clause disjunction literals,
Boolean variables negations. variables constitute set n symbols V .
assignment mapping V {true, false}. decision question SAT asks whether
exists assignment makes C true standard logical interpretation
connectives. assignment solution instance. solution,
SAT instance said satisfiable. study, assignments clauses
unsatisfied important. refer quasi-solutions. k-SAT SAT
problem restricted clauses containing k literals. Notably, k-SAT decision problem
NP-hard k 3 (Cook, 1971). several NP-hard decision problems, 3SAT, certain probabilistic distributions instances parameterised control parameter
exhibit sharp threshold phase transition probability solution
(Cheeseman, Kanefsky, & Taylor, 1991; Gent et al., 1996; Mitchell, Selman, & Levesque,
1992). critical value control parameter instances generated
parameter region lower critical value (the underconstrained region)
almost always solutions. generated overconstrained region
control parameter higher critical value almost always solutions.
many problem distributions, threshold associated peak search cost
wide range algorithms. Instances generated distribution control
parameter near critical value hardest cost decays move value
lower higher values. behaviour interest basic AI research. devoid
regularities, random instances represent challenge faced algorithm
absence assumptions problem domain, knowledge
exploited design algorithm transformation problem instance.
Random k-SAT parameterised distribution k-SAT instances. Random k-SAT,
n fixed control parameter m/n. Varying m/n produces sharp threshold
probability satisfiability associated cost peak range complete algorithms
(Crawford & Auton, 1996; Larrabee & Tsuji, 1992). cost peak pattern Random
k-SAT conjectured extend reasonable complete methods Cook
Mitchell, (1997) give overview analytic experimental results
average-case hardness SAT distributions.
paper study behaviour local search Random k-SAT. term local
search encompasses class procedures series assignments examined
objective finding solution. first assignment typically selected random.
Local search proceeds moving one assignment another flipping (i.e.
inverting) truth value single variable. variable flip chosen using heuristic
may include randomness, element hill-climbing (for example number
satisfied clauses) memory. Usually, local search incomplete SAT decision
problem: guarantee solution exists, found within time
bound. Unlike complete procedures, local search cannot usually prove certain
solution exists.
relatively recent discovery (e.g. Selman, Levesque Mitchell, 1992)
average cost local search procedures scales much better best complete
236

fiBackbone Fragility Local Search Cost Peak

procedures critical value m/n Random 3-SAT. recent studies, (e.g. Parkes
Walser, 1996) confirmed detail. Therefore system completeness
may sacrificed, local search procedures important role play,
generated much interest recent years.
restrict instances distribution satisfiable
increase control parameter, peak cost local search procedures
solve instances near critical value several constraint-like problems (Clark, Frank,
Gent, MacIntyre, Tomov, & Walsh, 1996; Hogg & Williams, 1994). underconstrained
region, average cost increases m/n due decreasing number solutions per
instance (Clark et al., 1996). However, overconstrained region, cost decreases
m/n although number solutions per instance continues fall. Several researchers
noted fact surprise (Clark et al., 1996; Parkes, 1997; Yokoo, 1997) since
number solutions change special way near critical value. Why, then,
cost satisfiable instances peak near critical value, decay?
Parkes (1997) provided appealing answer first part question study
backbone satisfiable Random 3-SAT instances. satisfiable SAT instances,
backbone set literals logically entailed clauses instance1 .
Variables appear entailed literals forced take particular truth
value solutions. Parkes study demonstrated instances underconstrained region, small fraction variables, any, appear backbone.
However, control parameter increased towards critical value, subclass
instances large backbones, mentioning around 75-95% variables, rapidly
emerges. Soon control parameter increased overconstrained region
large-backbone instances account satisfiable instances. Parkes
showed fixed value control parameter, cost local search procedure WSat strongly influenced size backbone. suggests peak
average WSat cost near critical value control parameter increased may due
emergence large-backbone instances point. Parkes noted given
size backbone, cost actually higher instances underconstrained region
falls control parameter increased. identified fall indicative
another factor produces overall peak cost. main aim paper
identify factor responsible pattern; instances certain size
backbone costly solve others?
remainder paper organised follows. Section 2 review details
WSat algorithm Random k-SAT distribution discuss experimental
conditions used. elucidate patterns cost intend
explain show number solutions backbone size interact. Section
3 identify remarkable pattern WSats search behaviour clearly distinguishes
high cost lower cost instances certain backbone size. WSat usually drawn
early search quasi-solutions clauses unsatisfied. high cost
instances, quasi-solutions distant nearest solution, lower cost
instances equal backbone size, less distant. Section 4 develop causal
hypothesis, postulating structural property instances induces search space
1. Here, use term backbone follows Monasson, Zecchina, Kirkpatrick, Selman Troyansky
(1999a, 1999b) whose definition backbone equivalent satisfiable instances.

237

fiSinger, Gent & Smaill

structure turn causes observed search behaviour thus cost pattern.
suggest instances certain backbone size high cost backbonefragile, i.e. removal clauses random results instance
greatly reduced backbone size. discuss property may measured show
control parameter increased, instances certain backbone size become less
backbone-fragile.
hypothesis true scientific merit makes correct predictions. hypothesis made three correct predictions provide experimental evidence.
Section 5 show degree instance backbone-fragile accounts
variance cost control parameter backbone-size fixed.
Section 6 consider generation instances backbone-fragile.
clauses removed backbone unaffected, found resulting instances became progressively backbone-fragile. Eventually, clauses
removed without affecting backbone instance said backbone minimal.
hypothesis correctly predicts clauses removed way Random
3-SAT instances, cost becomes considerably higher. Section 7 show hypothesis makes correct prediction relating search behaviour: clauses
often unsatisfied search whose removal affects backbone.
Section 8 relate study previous research give suggestions work.
Finally, Section 9 concludes.

2. Background
section discuss local search algorithm WSat, measurement computational cost representativeness local search algorithms general.
review Random k-SAT distribution overall cost pattern WSat Random
k-SAT. Finally look backbone size number solutions interact affect
cost.
2.1 WSat Algorithm
term WSat first introduced Selman et al. (1994). refers local search
architecture subject number subsequent empirical studies
(Hoos, 1999a; McAllester, Selman, & Kautz, 1997; Parkes & Walser, 1996; Parkes, 1997).
pseudocode outline WSat algorithm given Figure 1. important feature
WSat that, unlike earlier local search algorithms, chooses unsatisfied clause
flips variable appearing clause: Select-variable-from-clause must
return variable mentioned clause. architecture first seen random walk
algorithm due Papadimitriou (1991). WSat may use different strategies Selectvariable-from-clause. study, used SKC strategy introduced Selman,
Kautz Cohen (1994); refer combination simply WSat. Pseudocode
SKC strategy given Figure 2.
follow Hoos (1998) approach measuring computational cost SAT
instances local search algorithm WSat. Rather run-times, measure runlengths : number flips taken find solution. set noise level p 0.55,
Hoos found approximately optimal Random 3-SAT. Hoos Stutzle (1998) showed
238

fiBackbone Fragility Local Search Cost Peak

WSat(C, Max-tries, Max-flips, p)
= 1 Max-tries
:= random assignment
j = 1 Max-flips
clause := unsatisfied clause C, selected random
v := Select-variable-from-clause(clause, C, p)
:= vs value flipped
satisfying
return
end
end
end
return satisfying assignment found

Figure 1: WSat local search algorithm

Select-variable-from-clause(clause, C, p)
variable x mentioned clause
breaks[x] := number clauses C would
become unsatisfied x flipped
end
variable clause breaks[y] = 0
return variable, breaking ties randomly
else
probability 1 p
return variable z clause
minimises breaks[z], breaking ties randomly
probability p
return variable z clause
chosen randomly
end

Figure 2: SKC variable selection strategy

run lengths easiest instances exponentially distributed many local
search variants. implies random restart mechanism (the re-randomisation
Max-flips flips) significantly worthwhile.
239

fiSinger, Gent & Smaill

known date whether, without using restart, WSat almost surely (i.e.
probability approaching 1) find solution satisfiable 3-SAT instances given unlimited
flips. local search algorithm eventually find solution conditions,
said probabilistically approximately complete (PAC). Hoos (1999a) proved whether
several local search algorithms PAC Culberson Gent (1999a) proved
WSat PAC 2-SAT case. Hoos (1998) observed data suggested WSat
could PAC. set Max-tries 1 Max-flips infinite runs reported
paper. solution found every run, evidence WSat may
PAC.
Another implication exponential distribution run lengths large number
samples must taken obtain good estimate mean. Following Hoos, use
median 1000 WSat runs instance descriptive statistic representing
WSats search cost instance. appears give stable estimate cost
(as less sensitive long tail mean) moderate amount
computational effort.
One objection studying single algorithm local search class may
representative: results obtained algorithm may generalise members
class. accept objection, evidence certain conditions,
one local search algorithm actually large extent representative whole class.
example Hoos (1998) found high correlation computational costs
random instances pairs different local search algorithms, including WSat.
suggests algorithm-independent property instances results
high cost class algorithms.
2.2 Random k-SAT
use well-studied Random k-SAT distribution (Franco & Paull, 1983; Mitchell et al.,
1992) k = 3. Random k-SAT distribution k-SAT instances, parameterised
ratio clauses variables m/n. Let V fixed set Boolean variable symbols
size n. generate instance Random k-SAT clauses n variables,
clause C independently chosen randomly selecting literals k distinct variables
V independently negating probability 12 . guarantee
variables mentioned instance contain duplicate clauses.
local search cannot solve unsatisfiable instances, filter using complete
SAT procedure. order control effects backbone size, need
isolate portion satisfiable part distribution backbone size
certain value. obtained calculating backbone size satisfiable
instance discarding whose backbone required size. term
controlling backbone size. Satisfiable instances certain backbone sizes rare
certain values m/n. example m/n 4.49, found 1 20,000
generated instances satisfiable backbone size 10. Hence generation instances
way somewhat costly computational terms. therefore one
limits value n data could collected.
240

fiBackbone Fragility Local Search Cost Peak

primarily interested threshold region control parameter,
cost peak occurs: region near point 50% instances satisfiable.
looked region 90% 20% satisfiability.
2.3 Pattern WSat Cost Random 3-SAT
Figure 3 show peak WSat cost mentioned e.g. Parkes
(1997). peak slightly 50% point (4.29) median appears shift
higher percentiles. similar pattern noticed Hogg Williams (1994)
local search cost graph colouring.

9000

8000
95th

7000

cost

6000

5000

90th

4000

3000
75th
2000
50th
1000

0

25th

4

4.1

4.2

4.3
m/n

4.4

4.5

Figure 3: cost peak WSat m/n varied. level m/n, generated
5000 satisfiable instances. measured per-instance WSat cost these.
line plot gives different point cost distribution, e.g. 90th
percentile difficulty 500th costly instance WSat.

Parkes (1997) Yokoo (1997) suggest local search cost peak shown
WSat Figure 3 result two competing factors. m/n increased number
solutions per instance falls causes onset high cost. However, number
solutions continues fall overconstrained region cost decreases.
must therefore second factor whose effect outweighs number solutions
overconstrained region cause fall cost. main aim paper
identify factor. pattern WSat cost Random 3-SAT identified Parkes (1997)
241

fiSinger, Gent & Smaill

starting point. Parkes observed given backbone size n, average
cost falls m/n increased.
Figure 4 shows fall WSat cost n = 100 Random 3-SAT instances.
point plot median cost 1000 instances2 length bars
interquartile range instance cost. fall cost approximately exponential decay
range m/n near threshold range backbone sizes. rate decay
affected backbone size, cost large-backbone instances decaying fastest.
length error bars Figure 4 along log scale cost axis indicates
distribution per-instance cost positively skewed even backbone size
controlled. example point m/n 4.11 backbone size 0.9n
difference 75th percentile median 4000 whereas
median 25th percentile half that. spread cost large, particularly
relative effect control parameter. think significant portion
variance cost among instances due errors estimates cost
instance.

backbone size = 0.9 n
backbone size = 0.5 n
backbone size = 0.1 n

4

cost

10

3

10

4

4.05

4.1

4.15

4.2

4.25
m/n

4.3

4.35

4.4

4.45

4.5

Figure 4: effect varying m/n cost backbone size controlled.

2. cost instance defined median run length 1000 runs point Figure 4
median medians.

242

fiBackbone Fragility Local Search Cost Peak

2.4 Number Solutions Backbone Size Controlled
studied effect number solutions WSat cost. number solutions
determined using modified complete procedure. small-backbone instances,
evidence number solutions actually increases m/n, least
overconstrained region. Figure 5 shows plot number solutions, backbone
size controlled 0.1n. point median 1000 instances bars show
interquartile range. possible increase number solutions may help explain
fall cost small-backbone instances, appears weak effect
account full.
6

10

number solutions

backbone size = 0.1 n

5

10

4

10

4

4.05

4.1

4.15

4.2

4.25
m/n

4.3

4.35

4.4

4.45

4.5

Figure 5: Number solutions n = 100, m/n varied, backbone size controlled
0.1n.

studied relationship number solutions WSat cost
backbone size controlled different values. Figure 6 shows log-log plot number
solutions cost, m/n 4.29 backbone size 0.1n. linear least squares
regression (lsr) fit superimposed. Table 1 gives summary data log-log scatter plot
different backbone sizes transition : gradient intercept lsr fits,
product-moment correlation r rank correlation.
number solutions strongly negatively related cost smaller backbone sizes transition strength relationship fairly constant
m/n varied. speculate strong relationship instances arises
243

fiSinger, Gent & Smaill

m/n
4.03

4.11

4.18

4.23

4.29

4.35

4.41

4.49

Backbone
size
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n

Intercept
lsr fit
3.8993
4.1410
4.2070
3.8727
4.1551
4.1387
3.7867
4.0533
4.0202
3.7771
3.9890
3.9891
3.7309
3.9169
3.7836
3.6981
3.8933
3.8173
3.6083
3.8445
3.7772
3.5483
3.7577
3.6228

Gradient
lsr fit
0.1967
0.2123
0.1372
0.1989
0.2304
0.1336
0.1911
0.2180
0.1146
0.1932
0.2140
0.1270
0.1910
0.2076
0.0610
0.1896
0.2133
0.1018
0.1782
0.2094
0.1120
0.1748
0.2043
0.0842

r

Rank corr.

0.7808
0.6761
0.1307
0.7696
0.6834
0.1275
0.7664
0.6932
0.1159
0.7829
0.6729
0.1317
0.7787
0.6921
0.0612
0.8007
0.6872
0.1044
0.7784
0.7024
0.1179
0.7972
0.6954
0.0992

-0.7731
-0.6699
-0.1365
-0.7669
-0.6855
-0.1291
-0.7760
-0.6974
-0.1217
-0.7873
-0.6867
-0.1329
-0.7844
-0.6941
-0.0534
-0.7994
-0.6967
-0.0903
-0.7628
-0.7085
-0.1045
-0.7932
-0.6991
-0.0783

Table 1: Data log-log correlations number solutions cost n = 100,
m/n varied backbone size fixed different values.

244

fiBackbone Fragility Local Search Cost Peak

m/n = 4.29, backbone size = 0.1 n

4

cost

10

3

10

2

10
2
10

3

10

4

10

5

10
number solutions

6

10

7

10

8

10

Figure 6: Scatter plot number solutions cost n = 100, m/n = 4.29
backbone size fixed 0.1n.

finding backbone straightforward main difficulty encountering solution
backbone satisfied. density solutions region satisfying
backbone important. larger backbone sizes, number solutions less
relevant cost. significant change number solutions large backbone
instances observed m/n varied. number solutions cost
strongly related instances unsurprising, large backbone size implies
solutions lie compact cluster local searchs main difficulty finding
cluster (i.e. satisfying backbone). Therefore expect density solutions
within cluster important. Hoos (1998) observed correlation
number solutions local search cost becomes small overconstrained region.
explained simply fact large-backbone instances dominate
region.

3. Search Behaviour: Hamming Distance Nearest Solution
order suggest cause cost decay large-backbone instances
observed Section 2.3, made detailed study WSats search behaviour, i.e.
assignments visited search. report exploratory part research
245

fiSinger, Gent & Smaill

section. explain somewhat novel search behaviour metrics used
giving results discussion them.
3.1 Definitions Methods
Assuming local search algorithm PAC, given run unlimited length, fb ,
number flips taken find first assignment b clauses unsatisfied,
well-defined b 0. f0 equal run length.
particular run local search algorithm consists series assignments
T0 , T1 , ..., Tf0 , Ti assignment visited flips made. found
Random 3-SAT n = 100, assignment satisfying clauses quickly
found remainder search, clauses (1 - 10) unsatisfied.
shown Gent Walsh (1993) GSat, rapid hill-climbing phase,
suggested Hoos (1998), followed long plateau-like phase number
unsatisfied clauses low constantly changing. experiments used f5
arbitrary indicator length hill-climbing phase. Unlike GSat, WSat
well-defined end point hill-climbing phase, since short bursts hill-climbing
continue occur rest search. think using fb indicator
value b 1 10 would give similar results.
Local search proceeds flipping variable values might expect Hamming distance current assignment nearest solution may
interest. Hamming distance two assignments hd(T1 , T2 ) simply number
variables T1 T2 assign differently. studied Hamming distance
current assignment solution Tsol C hd(T, Tsol ) minimised.
abbreviate hdns(T, C) (Hamming distance nearest solution). assignment
, hdns(T, C) may calculated using complete SAT procedure modified
every solution C visited Hamming distance calculated.
3.2 Results
section, data based Random 3-SAT instances n = 100 backbone size
controlled various values 0.1n 0.9n. Recall control backbone
certain value, generate satisfiable Random 3-SAT instances usual discard
whose backbone required size. varied m/n point 90%
satisfiability (4.03) point 20% satisfiability (4.49). hdns(Tf5 , C) Hamming
distance first assignment 5 clauses unsatisfied
nearest solution. instance calculated median value f5 mean
value hdns(Tf5 , C) based 1000 runs WSat. plots Figures 7 8,
point median 1000 instances.
Figure 7 shows effect varying m/n f5 backbone size controlled.
values f5 low compared cost range small. although
cost find solution varies considerably instance instance, quasi-solutions
quickly found matter overall cost. However, notable effects
backbone size m/n f5 . might expected, larger backbone instances,
overall cost generally higher, WSat takes slightly longer find quasi-solution.
effect m/n unexpected. backbone size controlled 0.5n more, m/n
246

fiBackbone Fragility Local Search Cost Peak

increased WSat takes slightly longer find quasi-solution, although simultaneously cost
decreasing seen Figure 4.

170

backbone size = 0.9 n
backbone size = 0.7 n
backbone size = 0.5 n
backbone size = 0.3 n
backbone size = 0.1 n

160

150

140

f5

130

120

110

100

90

80

4

4.05

4.1

4.15

4.2

4.25
m/n

4.3

4.35

4.4

4.45

4.5

Figure 7: effect varying m/n f5 backbone size controlled.
Figure 8 shows effect varying m/n hdns(Tf5 , C) effects backbone
size controlled for. plot, bars give interquartile range. spread
values mean hdns(Tf5 , C) point small relative effect varying
m/n. positive effect backbone size hdns(Tf5 , C) one might expect
since backbone size affects cost.
backbone size controlled, m/n increased satisfiability threshold,
mean hdns(Tf5 , C) decreases linearly wide range backbone values. Hence, although
quasi-solution (Tf5 ) usually quickly found, instances lower m/n quasisolution considerably Hamming-distant nearest solution. m/n increased,
backbone size controlled, effect gradually lessened.
looked relationship search behaviour cost
m/n fixed backbone size controlled. found case variance
hdns(Tf5 , C) accounts cost variance. Figure 9 shows plot mean
hdns(Tf5 , C) cost backbone size controlled 0.5n m/n fixed 4.29.
lsr fit superimposed. plot suggests hdns(Tf5 , C) linearly related log cost.
Table 2 gives intercept gradient lsr fits r values backbone size
controlled three values m/n varied. Variance hdns(Tf5 , C) accounts
variance cost three different backbone sizes consistent
247

fiSinger, Gent & Smaill

45

backbone size = 0.9 n
backbone size = 0.5 n
backbone size = 0.1 n
40

5

hdns(Tf ,C)

35

30

25

20

15

4

4.05

4.1

4.15

4.2

4.25
m/n

4.3

4.35

4.4

4.45

4.5

Figure 8: effect varying m/n hdns(Tf5 , C) backbone size controlled.

threshold. scatter plots (not shown) linear lsr fits data similar
shape Figure 9 consistent linear relationship. r values
greatest small-backbone instances reasons unclear. Possibly, since
search shorter small-backbone instances, success follows quickly f5
hdns(Tf5 , C) better indicator likelihood finding solution.
Figure 8 showed backbone size controlled, hdns(Tf5 , C) falls linearly m/n
increased. gradient fall 14. Table 2 showed backbone size
controlled m/n fixed, hdns(Tf5 , C) linearly related log cost, gradient
fit around 0.08. Given linear relationship continues hold
constant gradient m/n varied (in fact gradient decreases slightly) assuming
increasing m/n affecting cost means, would expect linear
decrease log mean cost gradient 1.12, slightly steeper
observed decrease log median cost shown Figure 4.
results consistent idea whatever factor causes cost decay
exponentially m/n varied largely causing hdns(Tf5 , C) fall linearly.
3.3 Discussion
identified pattern search behaviour strongly related pattern
cost discussed Section 2.3. interpretation pattern follows.
248

fiBackbone Fragility Local Search Cost Peak

m/n

Backbone size

4.03

0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n

4.11

4.18

4.23

4.29

4.35

4.41

4.49

Intercept
lsr fit
1.0528
0.6928
0.7065
1.0166
0.6315
0.8158
1.0858
0.8090
0.8109
1.1290
0.8343
0.7480
1.1289
1.0032
0.8382
1.1664
0.9835
0.9835
1.2029
1.0274
1.1070
1.2458
1.1472
1.1930

Gradient
lsr fit
0.0844
0.0925
0.0895
0.0868
0.0955
0.0867
0.0839
0.0895
0.0864
0.0821
0.0887
0.0878
0.0826
0.0828
0.0856
0.0811
0.0842
0.0808
0.0795
0.0830
0.0768
0.0777
0.0787
0.0742

r
0.9445
0.8769
0.7308
0.9511
0.8852
0.7196
0.9556
0.8799
0.7195
0.9581
0.8974
0.7691
0.9550
0.8935
0.7579
0.9628
0.8996
0.7728
0.9565
0.9135
0.7816
0.9661
0.9197
0.8086

Table 2: Data correlations hdns(Tf5 , C) log10 cost n = 100 m/n
backbone size fixed different values.

249

fiSinger, Gent & Smaill

5

10

4

cost

10

3

10

2

10

16

18

20

22

24

26
hdns(Tf ,C)

28

30

32

34

36

5

Figure 9: relationship hdns(Tf5 , C) log cost backbone size controlled
0.5n m/n fixed 4.29.

instance quasi-solutions WSat visits form interconnected areas search space
local search always move solution them, without often moving
assignment many clauses unsatisfied. evidence simply WSat
runs apparently always successful visit assignments clauses
unsatisfied infrequently. Frank, Cheeseman Stutz (1997) mentioned
analysis GSat search spaces Random 3-SAT, local minima clauses
unsatisfied usually escaped unsatisfying one clause.
believe instances higher cost quasi-solution area extends parts
search space Hamming-distant solutions, whereas instances lower cost
area less extensive. mean Hamming distance early quasi-solution
Tf5 nearest solution accurate indicator extensive quasi-solution
area is. interpretation suggests hdns(Tf5 , C) strongly correlated cost:
extensiveness quasi-solution area determines costly search.
suggests why, instances higher cost, quasi-solutions found slightly quickly:
quasi-solution area extensive, random starting point shorter series
hill-climbing flips required find quasi-solution.
250

fiBackbone Fragility Local Search Cost Peak

mean hdns(Tf5 , C) decreases linearly m/n increased backbone size
controlled. time, cost decays exponentially. think m/n
increased, quasi-solution area becomes progressively less extensive.

4. Causal Hypothesis
pattern search behaviour Section 3 interpretation suggested
causal hypothesis account decay cost discussed Section 2.3 hence
overall peak. key hypothesis property SAT instances: backbone fragility.
property qualitatively consistent observations. importantly,
although backbone fragility implications instances search space topology,
property based logical structure SAT instance. section motivate
define backbone fragility, discuss may measured show relates
patterns reported Sections 2.3 3.
4.1 Backbone Fragility : Motivation
Suppose B small sub-bag clauses satisfiable SAT instance C,
exists set quasi-solutions QB clauses B unsatisfied.
structural property C would cause quasi-solutions QB attractive WSat?
already know backbone Random 3-SAT instance small, solutions
found little search (Parkes, 1997). solutions C B (C B denotes C
one copy member B removed) either solutions C members QB .
assume assignments attractive WSat C approximately
assignments attractive C B, members QB (which
solutions C B) attractive C backbone C B small, particularly
Cs backbone large. Furthermore TB QB , number variables
appear backbone C B upper bound hdns(TB , C), large reduction
backbone size allows high hdns(TB , C). summarise, removal certain
small sub-bag clauses causes backbone size greatly reduced, expect
quasi-solutions clauses unsatisfied attractive WSat
possibly Hamming-distant nearest solution.
interested quasi-solutions general rather QB . removing
random small set clauses average causes large reduction backbone size,
say instance backbone-fragile. effect backbone smaller
average, instance backbone-robust. large-backbone instance backbone-fragile,
extension argument expect general quasi-solutions attractive
may Hamming-distant nearest solution. Hence idea consistent
observations interpretation Section 3: backbone fragility approximately
corresponds extensive quasi-solution area is.
idea backbone fragility underlying factor causing search behaviour
pattern appealing reasons. entailed literal l C, must
sub-bag clauses C whose conjunction entails l. given backbone size, clauses
added, given entailed literal l expect extra clauses allow alternative
combinations clauses entail l. Hence adding clauses whilst controlling
backbone size, random removal clauses less effect backbone since
251

fiSinger, Gent & Smaill

fact literal entailed depends less presence particular sub-bags.
clauses added, expect instances become less backbone-fragile. Given
hypothetical relationship backbone fragility search behaviour, would
explain qualitatively search behaviour changes m/n varied.
think backbone fragility property instances logical structure,
study may lead results complexity issues, postpone discussion
Section 8.
4.2 Measurement Backbone Robustness
define measure backbone robustness instance allow us
test predictions hypothesis. take instance C delete clauses random,
halting process backbone size reduced least half. point
record result number deleted clauses. constitutes one robustness trial.
metric backbone robustness mean result possible trials, i.e.
average number random deletions clauses must made reduce
backbone size half.
infeasible compute results possible robustness trials. Therefore,
measuring backbone robustness instance estimated computing average
random sample trials. used least 100 robustness trials case order
ensure reasonably accurate estimate, continued sample robustness trials
standard error less 0.05 sample mean (in case estimate
mean accurate within 10% 95% confidence level). n = 100,
using satisfiable instances near satisfiability threshold whose backbone size
controlled 50, usually less 250 robustness trials required estimate
converge way. Even then, backbone robustness costly compute.
different possible metrics backbone fragility/robustness, found
metric described gave clearest results purposes without unnecessarily complicated definition. metrics, reduction backbone size
random fixed fraction clauses removed, may suitable contexts.
4.3 Change Backbone Robustness Control Parameter Varied
discussed Section 4.1 expect backbone size controlled, backbone robustness
increases m/n increased. Since measure backbone robustness defined terms
size backbone, useful comparing instances equal backbone
size.
found increasing control parameter made instances backbone-robust,
expected. Figure 10 shows effect backbone robustness increasing m/n
satisfiability threshold n = 100 backbone size controlled. point
median 1000 instances.
note backbone robustness defined measure generally higher
instances larger backbones. think large-backbone
instances, backbone must reduced larger number literals fragility trial
requires clauses removed.
252

fiBackbone Fragility Local Search Cost Peak

22

20

18

backbone robustness

16

14

12

10

8

backbone size = 0.9 n
backbone size = 0.5 n
backbone size = 0.1 n

6

4

4

4.05

4.1

4.15

4.2

4.25
m/n

4.3

4.35

4.4

4.45

4.5

Figure 10: Backbone robustness satisfiability transition, backbone size
fixed 0.1n 0.5n 0.9n.

5. Correct Prediction Cost Variance
may assert fall cost observed increase control parameter
due change factor F , example Yokoo (1997) has.
assertion makes important testable prediction: variation F
control parameter fixed accounts variation cost. However may
factors whose influence cost great obscure effect F
control parameter fixed. best reveal effect F , any, effects
factors may controlled for.
Backbone robustness proposed factor F . backbone size another factor
strongly influences cost. result section effects
m/n backbone size controlled for, i.e. fixed, effects backbone
robustness seen quite clearly large-backbone instances.
5.1 Correlation Data
Figure 11 shows plot log cost measure backbone robustness
Random 3-SAT instances n = 100, m/n 4.29 backbone size controlled 0.1n,
0.5n 0.9n. linear lsr fit superimposed case. Table 3 gives intercept,
253

fiSinger, Gent & Smaill

m/n

Backbone size

4.03

0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n
0.1n
0.5n
0.9n

4.11

4.18

4.23

4.29

4.35

4.41

4.49

Intercept
lsr fit
3.0338
3.7075
4.2846
2.9639
3.6675
4.2287
2.9365
3.6067
4.1811
2.9257
3.5142
4.1313
2.8766
3.4903
4.0934
2.8261
3.4325
3.9939
2.7925
3.3772
3.9284
2.7164
3.3506
3.8720

Gradient
lsr fit
0.0204
0.0370
0.0419
0.0134
0.0351
0.0370
0.0146
0.0302
0.0338
0.0155
0.0239
0.0312
0.0136
0.0225
0.0290
0.0109
0.0199
0.0237
0.0100
0.0172
0.0211
0.0073
0.0170
0.0198

r

r 95%

r +95%

0.1928
0.3730
0.4711
0.1490
0.3891
0.4535
0.1745
0.3840
0.5306
0.2107
0.3643
0.5253
0.1894
0.3863
0.5325
0.1671
0.3734
0.4984
0.1763
0.3452
0.5152
0.1392
0.4034
0.5549

0.2506
0.4191
0.5165
0.2088
0.4355
0.5001
0.2356
0.4272
0.5687
0.2659
0.4105
0.5645
0.2483
0.4350
0.5721
0.2250
0.4222
0.5394
0.2321
0.3954
0.5582
0.1926
0.4585
0.5949

0.1400
0.3235
0.4251
0.0873
0.3417
0.4065
0.1149
0.3389
0.4921
0.1553
0.3154
0.4818
0.1300
0.3395
0.4931
0.1105
0.3244
0.4555
0.1175
0.2919
0.4692
0.0841
0.3516
0.5125

Rank corr.
coefficient
0.1934
0.3713
0.4699
0.1402
0.3770
0.4662
0.1663
0.3738
0.5466
0.2116
0.3436
0.5457
0.2053
0.3996
0.5467
0.1724
0.3782
0.5243
0.1683
0.3582
0.5270
0.1355
0.4027
0.5604

Table 3: Data correlation backbone robustness log10 cost n = 100
m/n backbone size fixed different values.

gradient r values lsr fits backbone size controlled three values
m/n varied threshold.
r values suggest effect backbone robustness cost, particularly large
backbone sizes. smaller backbone sizes, imagine finding backbone less
issue backbone fragility, hinders this, less effect. larger
backbone sizes, think main difficulty WSat satisfying backbone; backbone
fragility important. However, given somewhat unclear shape scatter plots,
several concerns significance correlation, address
using simple statistical methods.
254

fiBackbone Fragility Local Search Cost Peak

m/n = 4.29, backbone size = 0.1 n

3

cost

10

2

10

0

5

10

15
20
25
backbone robustness

30

35

40

35

40

35

40

m/n = 4.29, backbone size = 0.5 n

4

cost

10

3

10

2

10

0

5

10

15
20
25
backbone robustness

30

m/n = 4.29, backbone size = 0.9 n
5

10

cost

4

10

3

10

2

10

0

5

10

15
20
25
backbone robustness

30

Figure 11: Scatter plot backbone robustness cost n = 100, m/n = 4.29
backbone size fixed 0.1n, 0.5n 0.9n.

255

fiSinger, Gent & Smaill

5.2 Artifact Distributions Variables?
One concern observed r could arisen simply distributions
two variables rather relationship them. serious
concern distributions unknown.
null hypothesis, H0 value r results distributions
two variables equal observed r. randomisation method used test H0 .
See Appendix details method. data set presented, 1000 randomised
pairings data constructed. case, found observed r
fall within range sampling distribution r randomised pairings. H0
therefore rejected 99.9% confidence level.
r coefficient, given above, greatly affected outliers. Therefore rank
correlation coefficient, less affected, calculated. rank correlation
given Table 3. found case rank correlation coefficient
considerably different r coefficient. demonstrates observed r
greatly affected outliers.
5.3 Confidence Intervals Correlation
Given relationship two variables merely artifact
distributions outliers, accurate measurement r? bootstrap
method used obtain bounds confidence interval statistic. Again,
reader referred Appendix details method. Using method 1000
pseudo-samples obtained lower upper bounds 95% confidence interval r,
given Table 3 r 95% r +95% respectively. data implies 95%
confidence, upper bounds amount error estimates r 2
0.02 0.05.

6. Correct Prediction Backbone-Fragile Instances
hypothesis proposes high backbone fragility instances quite accurately represents
factor (via search behaviour patterns uncovered Section 3) causes high
WSat cost instances. However, plausible high backbone fragility
by-product unmeasured latent factor causally related
cost.
help establish causal link backbone fragility cost, therefore created sets random SAT instances higher backbone fragility usual Random
3-SAT instances. degree following methodological precedent Bayardo
Schrag (1996), created random instances contained small unsatisfiable subinstances constraints overall. often found exceptionally
hard complete procedure Ntab. experiments thereby helped establish
feature instance structure cause exceptionally high cost complete
procedures.
cannot easily set backbone fragility directly, since generation parameter.
One manipulation experiment possible use instance generation procedure results instances higher backbone fragility. hypothesis predicts
256

fiBackbone Fragility Local Search Cost Peak

instances generated using procedure harder Random 3-SAT instances.
section define procedure test prediction. may procedure manipulating latent factor. However, since procedure specifically
designed increase backbone fragility, correct prediction still lends credibility
hypothesis.
6.1 Backbone-minimal Sub-instances
Suppose SAT instance C remove clause backbone
affected removal clause. clauses repeatedly removed, eventually
instance clause removed without disturbing backbone.
case backbone-minimal sub-instance (BMS) C. formally,
following definition:
Definition SAT instance C 0 BMS C iff
C 0 sub-instance C (i.e. sub-bag clauses) C 0
backbone C.
clause c C 0 exists literal l that:
1. C 0 l
2. (C 0 {c}) l satisfiable
i.e. every strict sub-instance C 0 strictly smaller backbone backbone C 0 2
BMSs seen satisfiable analogues minimal unsatisfiable sub-instances
(MUSs) unsatisfiable instances studied amongst others Culberson Gent (1999b)
context graph colouring Gent Walsh (1996) Bayardo Schrag
(1996) satisfiability. MUS instance C sub-instance unsatisfiable,
removal one clause sub-instance renders satisfiable.
unsatisfiable instances must MUS, satisfiable SAT instances must
BMS. BMS depend non-empty backbone
backbone instance empty, BMS empty sub-instance. instance
one BMS. Different BMSs instance may share clauses. One BMS
instance cannot strict sub-instance another.
Suppose backbone satisfiable instance C set literals {l1 , l2 , . . . , lk }. Let
clause l1 l2 . . . lk . following useful fact:
Theorem C 0 BMS C iff C 0 MUS C 2
simple proof given Appendix B. Due fact, methods studying
MUSs applied study BMSs. study BMSs satisfiable
instance C finding backbone C studying MUSs C d:
corresponds BMS C since must present every MUS C d.
find BMS C determine backbone, find random MUS C using
MUS-finding method Gent Walsh (1996) remove result.
257

fiSinger, Gent & Smaill

Instances
Preserve-backbone(C, 0, C 0 )
Preserve-backbone(C, 5, C 0 )
Preserve-backbone(C, 10, C 0 )
Preserve-backbone(C, 20, C 0 )
Preserve-backbone(C, 40, C 0 )
Preserve-backbone(C, 80, C 0 )
BMS

Backbone robustness
10th percentile Median 90th percentile
8.5845 12.9700
20.6300
7.7374 12.0317
19.1700
7.1977 11.0851
17.3500
6.0690
9.3913
14.5351
4.2622
6.4899
9.9900
2.0745
2.8661
3.9851
1.0200
1.0600
1.1600

Table 4: effect Preserve-backbone backbone robustness.

6.2 Interpolating Instance one BMSs
BMS C 0 established, study effects interpolation
C C 0 removing random C clauses appear
C 0 . equivalent removing clauses random backbone preserved.
Preserve-backbone(C, mr , C 0 ) denote C mr clauses, appear
BMS C 0 , removed random. resulting instance backbone
C.
increasing m/n controlling backbone size causes backbone robustness
increase, found deleting clauses backbone unaffected causes
backbone robustness (as measured above) decrease, one might expect.
used 500 Random 3-SAT instances n = 100 m/n = 4.29. instance
found one BMS. used Preserve-backbone interpolate mr set
various values. Table 4 shows effect increasing mr backbone robustness.
BMSs threshold instances backbone-fragile removal one clause
likely reduce backbone half more.
hypothesis predicts interpolation C C 0 proceeds, cost
local search increases backbone robustness decreases. conceivable,
although would surprising, removing clauses random instances
near threshold generally makes cost local search increase.
case, increase cost interpolation towards BMS could merely due
removal clauses per se rather removal clauses whilst preserving backbone.
control possibility removed clauses according two procedures.
procedure Random(C, mr ) removes mr clauses C random. procedure
Reduce-backbone(C, mr ) removes mr clauses time clause removed,
size backbone reduced. clause removed chosen randomly
clauses. procedure therefore uses opposite removal criterion Preservebackbone. backbone becomes empty, clauses removed.
Figure 12 shows effect per-instance cost applying three clause removal
procedures set 500 Random 3-SAT threshold instances. plot
median per-instance cost.
258

fiBackbone Fragility Local Search Cost Peak

4

10

cost

Preservebackbone
Reducebackbone
Random

3

10

2

10

0

10

20

30

40
mr

50

60

70

80

Figure 12: effect three clause removal procedures median per-instance cost.

observe removing clauses randomly backbone strictly reduced, causes cost reduced, removal clauses cause higher
cost. Reduce-backbone procedure causes greater initial fall cost, backbone size reduced quickly Random. However, cost stabilises
Reduce-backbone backbone becomes empty thereafter clauses
removed.
Removing clauses according Preserve-backbone causes local search cost
increase amount approximately exponential number clauses removed. Table
5 gives data effect cost data BMSs. interpolation shifts
whole distribution up, median. median cost BMSs,
backbone-fragile instances, three times 90th cost
percentile Random 3-SAT instances.
BMSs instances 254 318 clauses. results
therefore demonstrate existence instances underconstrained region
much harder typical instances near satisfiability threshold. However since
obtained sampling Random 3-SAT directly, know
often occur. far know, vanishingly rare therefore, contrast
exceptionally hard instances complete algorithms, seems unlikely affect
mean cost. Also, Gent Walsh (1996) showed exceptionally hard
259

fiSinger, Gent & Smaill

Instances
Preserve-backbone(C, 0, C 0 )
Preserve-backbone(C, 5, C 0 )
Preserve-backbone(C, 10, C 0 )
Preserve-backbone(C, 20, C 0 )
Preserve-backbone(C, 40, C 0 )
Preserve-backbone(C, 80, C 0 )
BMS

Per-instance cost
10th percentile Median 90th percentile
517
1450
5175
537
1515
5657
557
1608
6009
570
1803
7037
643
2295
10683
816
4154
24313
1556
16945
135883

Table 5: effect Preserve-backbone per-instance cost.

instances complete algorithms hard different reason threshold
instances, BMSs apparently hard reason backbonefragile.
One useful by-product section means generating harder test instances
local search variants without increasing n. However instances require O(m + n)
complete searches generate: O(n) determine satisfiability backbone O(m)
reduce BMS.

7. Correct Prediction Search Behaviour
Recall motivating discussion Section 4.1 suggested quasisolutions QB would attractive backbone C B small. say
clauses B likely set unsatisfied clauses removal
clauses B large effect backbone. part hypothesis makes
prediction search behaviour clauses often unsatisfied WSat
whose removal reduces backbone size most. section show prediction
correct.
looked individual instances cost percentiles set 5000 Random
k-SAT instances n = 100 m/n = 4.29. Per-instance cost determined
previous sections. clause instance, calculated number backbone
literals longer entailed clause removed. simple measure
backbone contribution (bc) clause much backbone size depends
presence clauses. clauses backbone contribution high, termed backbonecritical clause. made 1000 runs WSat instance conditions
previous sections. search, time current assignment changed recorded
whether clause unsatisfied. result averaging number times clause
unsatisfied runs gives unsatisfaction frequency (uf ) clause.
Figure 13 shows plot two quantities clauses instance whose cost
median 5000 threshold instances. note figure clauses whose
presence contributes backbone often unsatisfied average
WSat search.
260

fiBackbone Fragility Local Search Cost Peak

3

10

unsatisfaction frequency

2

10

1

10

0

10

0

5

10
15
backbone contribution

20

25

Figure 13: Scatter plot unsatisfaction frequency backbone contribution
clauses cost median 5000 instances, m/n = 4.29, n = 100.

Table 6 confirms pattern. row table gives data one instance.
selected cost percentiles; individual instances varying degrees difficulty. example
row labelled 30th corresponds instance whose cost 1500th rank
easiest difficult 5000 instances, 50th percentile instance
one used produce Figure 13. third fourth columns give mean
standard deviation unsatisfaction frequency clauses instance
last two columns give statistics sub-bag clauses
backbone-critical (their backbone contribution top 10%).
Table 7 shows converse effect present: clauses often
unsatisfied (their unsatisfaction frequency top 10%) backbone-critical
average. Although effect quite clear means, sometimes particularly
large standard deviations bc values frequently unsatisfied clauses.
because, seen Figure 13, clauses often unsatisfied even
though removing affect backbone size all.
found experiments removal clauses along small random
bags clauses average reduce backbone size considerably. large standard
deviations therefore arise true backbone contribution clauses
apparent using simple measure.
261

fiSinger, Gent & Smaill

Cost
Percentile

Backbone
size

10th
20th
30th
40th
50th
60th
70th
80th
90th

16
11
13
36
48
25
63
70
93

clauses
uf mean
11.3430
13.1079
21.0207
22.9825
29.5615
36.2940
52.4198
92.2623
108.3124

uf std. dev.
8.0704
10.9596
16.3680
21.3118
25.9275
35.6327
48.1078
87.7827
127.1968

backbonecritical clauses
uf mean uf std. dev.
20.8703
8.8730
30.1817
16.8730
41.4660
21.1142
56.6841
27.4660
72.0704
38.7779
96.1664
54.3081
119.7691
66.8187
167.3428
149.8058
306.7200
198.6933

Table 6: Unsatisfaction frequencies clauses different cost percentile instances.

Cost
Percentile
10th
20th
30th
40th
50th
60th
70th
80th
90th

Backbone
size
16
11
13
36
48
25
63
70
93

clauses
bc mean
0.5921
0.4848
0.3963
1.8089
1.0629
1.3800
3.3916
0.6946
3.0653

bc std. dev.
1.2358
1.0380
1.2405
4.2411
3.2781
3.4920
8.8630
3.4577
10.0376

often
unsatisfied clauses
bc mean bc std. dev.
2.0909
1.8529
1.7727
1.9632
1.8409
2.4490
8.3182
6.4620
6.3182
6.6043
7.7500
5.7794
14.9091
15.8126
2.5909
7.8602
16.9318
20.6436

Table 7: Backbone contributions clauses different cost percentile instances.

262

fiBackbone Fragility Local Search Cost Peak

instances different costs satisfiability threshold, clauses
likely unsatisfied search higher backbone contribution average.
Conversely, clauses largest backbone contribution likely
unsatisfied search. section therefore demonstrates well explaining
differences cost instances, backbone fragility hypothesis explain
differences difficulty satisfying particular clauses search.

8. Related Work
Clark et al. (1996) showed number solutions correlated search cost
number local search algorithms random instances different constraint problems,
including Random 3-SAT. pattern confirmed Hoos (1998) using improved
methodology. Clark et al.s work first step towards understanding variance
cost number constraints fixed. followed approach
looking number solutions using linear regression estimate strengths
relationships factors.
Schrag Crawford (1996) made early empirical study clauses (including
literals) entailed Random 3-SAT instances. Parkes (1997), whose study
discussed Section 1, looked detail backbone size Random 3-SAT effect
local search cost. linked position cost peak satisfiability
threshold emergence large-backbone instances occurs point. Parkes
identified fall WSat cost instances given backbone size.
therefore basis study. Parkes conjectured presence failed cluster
may cause high WSat cost large-backbone Random 3-SAT instances.
According hypothesis, addition single clause could remove group solutions
Hamming distant remaining solutions, reducing size backbone
dramatically. clause would large backbone contribution. Therefore
explanation general high cost threshold region certain features common
Parkes conjecture. particular agree presence clauses
large backbone contribution causes high cost. especially demonstrated
results Section 7.
Frank et al. (1997) studied detail topology GSat search space induced
different classes random SAT instances. study discussed implications search
space structure future algorithms, well effects structures algorithms
GSat. noted local search algorithms WSat may
blind structures studied search different ways GSat.
Yokoo (1997) addressed question cost peak local search
m/n increased. approach analyse whole search space small satisfiable random instances. study, examined SAT, Yokoo
showed results generalised colourability problem. Yokoo used deterministic
hill-climbing algorithm. studied number assignments solution
reachable (solution-reachable assignments) via algorithms deterministic moves,
largely determines cost algorithm.
followed Yokoo looking factor competing number solutions whose
effect cost changes m/n increased. factor Yokoo proposed cause
263

fiSinger, Gent & Smaill

overall fall cost decrease number local minima assignments
local move decreased number unsatisfied clauses. decrease
number demonstrated m/n increased. decrease attributed
decreasing size basins (interconnected regions local minima number
unsatisfied clauses). Yokoo claimed (p. 363) that:
adding constraints [...] makes [instance] easier decreasing number
local minima.
However, think clear priori relationship number
local minima cost given instance Yokoo study sufficiently
convince us explanation. contrast Yokoo, studied detail
relationship backbone fragility instances WSats cost instances
confirmed testing predictions hypothesis. Also, studied instance properties related logical structure clauses rather search space topology
induced think potential generalise across algorithms
even address complexity issues, explain towards end section.
Hoos (1998) analysed search spaces SAT instances relation local search
cost looking two new measures induced objective function defined,
including one based local minima. Although via measures, Hoos able
account Random 3-SAT cost peak, found features correlated
cost SAT encodings problems shown (Hoos, 1999b)
measures help distinguish alternative encodings problem.
pattern uncovered fit work makes instances
require high cost solve? Gent Walsh (1996) looked probability unsatisfiable SAT instance became satisfiable fixed number clauses removed random.
unsatisfiable instances highest computational cost complete procedure found unsatisfiability-fragile unsatisfiability
sensitive random removal clauses. may therefore fragility instances unsatisfiability backbone size cause high computational cost
context complete procedures incomplete local search, would interesting
link two algorithm classes. link may form basis possible explanation reasons threshold Random 3-SAT instances may universally hard
average case, opposed merely costly class algorithms. Recent work
Monasson et al. (1999a, 1999b) suggested parameterised distributions instances
hard average case, e.g. Random 3-SAT, exhibit discontinuity
backbone size3 control parameter varied, whereas polynomial time average-case
distributions, Random 2-SAT, backbone size changes smoothly. propose
complexity distribution linked presence discontinuity.
conjecture may asymptotic limit, instances backboneor unsatisfiability-fragile persist n increased discontinuity.
line research may therefore establish testable causal mechanism pattern,
showing properties instance distributions affect algorithm performance.
would interesting compare backbone fragility different random distributions
3-SAT instances, introduced Bayardo Schrag (1996) Iwama,
3. Monasson et al.s definition backbone extends unsatisfiable instances.

264

fiBackbone Fragility Local Search Cost Peak

Miyano Asahiro (1996) see whether differences local search cost could explained.
method generates satisfiable instances quickly solved local search
analysed Koutsoupias Papadimitriou (1992) Gent (1998). Random clauses
added formula Random 3-SAT conflict certain
solution set advance. conjecture overconstrained examples
quickly solved local search backbone-robust.
interesting possibility mentioned Hoos Stutzle (1998) suggested exponential run length distribution, local search equivalent random generate-andtest drastically reduced search space. conjecture reduced search space
corresponds quasi-solution area. Measurements hdns(TB , C) quasi-solutions
TB may therefore indicative extensiveness reduced search space, especially
since metric linearly correlated log cost. experimentation vein
may therefore reveal topology reduced search space could
turn lead better local search algorithms designed exploit knowledge.
Finally, emphasise notions backbone backbone-fragility
equally applicable non-random SAT instances. future may able confirm
results shown random SAT instances apply equally benchmark realworld SAT instances. However, one caveat entailed literals may uncommon
instances may need study fragility sets entailed formulas.

9. Conclusion
reconsidered question cost local search peaks near Random
3-SAT satisfiability threshold. overall pattern one two competing factors.
cause onset high cost control parameter increased previously
established decreasing number solutions. proposed cause
subsequent fall cost falling backbone fragility.
found striking pattern search behaviour local search algorithm WSat.
instances given backbone size, underconstrained region control parameter, WSat attracted early quasi-solutions Hamming-distant
nearest solution. distance strongly related search cost. control
parameter increased, distance decreases. suggested backbone fragility
cause pattern.
defined measure backbone robustness. Backbone-fragile instances low
robustness. able test predictions hypothesis fall backbone
fragility cause overall decay cost control parameter increased.
found hypothesis made three correct predictions. Firstly degree
instance backbone-fragile correlated cost effects factors
controlled for. Secondly, Random 3-SAT instances altered
backbone-fragile (by removing clauses without disrupting backbone) cost
increases. Thirdly, clauses often unsatisfied search whose
deletion effect backbone.
summarise interpretation evidence. underconstrained region,
instances small backbones predominant. region, rapid hill-climbing
phase typically results assignment close nearest solution (and probably
265

fiSinger, Gent & Smaill

satisfies backbone). Since finding small backbone largely accomplished hillclimbing, typical cost WSat low region variance cost due variance
density solutions region search space backbone satisfied.
threshold region, large-backbone instances quickly appear large quantities.
large-backbone instances, main difficulty local search identify backbone
rather find solution backbone identified. identification
large backbone may accomplished rapid hill-climbing phase greater lesser
extent. think extent determined backbone fragility instance.
large-backbone instance backbone-fragile hill-climbing phase ineffective
results assignment Hamming-distant nearest solution (probably
implying much backbone identified). costly plateau search
required find solution. Hence rare large-backbone instances occur
underconstrained region, extremely costly solve high backbone
fragility.
large-backbone instance backbone robust, rapid hill-climbing phase
effective determining backbone plateau phase shorter. overall
instance less costly WSat solve. Hence large-backbone instances, since
backbone fragility increases add clauses, cost decreases. overconstrained region,
large backbone instances dominant backbone fragility becomes main factor
determining cost. Hence cost decreases region. hypothesis proposes following
explanation cost peak: Typical cost peaks threshold region
appearance many large-backbone instances still moderately backbone-fragile,
followed increasing backbone robustness instances.

Acknowledgments
research supported UK Engineering Physical Sciences Research Council
studentship 97305799 first author. first two authors members crossuniversity Apes research group (http://www.cs.strath.ac.uk/~apes/). would
thank members Apes group, anonymous reviewers
earlier paper Andrew Tuson invaluable comments discussions.

266

fiBackbone Fragility Local Search Cost Peak

Appendix A: Randomisation Bootstrap Tests
summarise methods used context. explanation methods
given Cohen (1995).
A.1 Randomisation Estimating Correlation Coefficient due
Distributions Variables
Randomisation used estimate correlation coefficient two variables
results simply distributions rather relationship. start
two vectors data x = hx1 , x2 , . . . , xN = hy1 , y2 , . . . , yN i. correlation
coefficient merely due distributions x y, dependent
particular xi paired yi . Therefore calculate correlation coefficient resulting
merely distributions pair x data randomly.
construct K randomisations. randomisation consists vector 0 ,
simply random permutation y. randomisation, calculate correlation
coefficient x 0 note value xi paired random value
y. randomised correlation coefficients give us estimate correlation
coefficients resulting distributions variables. K large enough,
accurate estimate compared correlation coefficient
observed data.
A.2 Bootstrap Estimation Confidence Intervals Correlation Coefficients
original sample h(x1 , y1 ), (x2 , y2 ), . . . (xN , yN )i N pairs. pseudo-sample
original consists N pairs. j th pair pseudo-sample (xbj , yjb ) = (xq , yq )
q random number 1 N . pair pseudo-sample chosen
independently i.e. pairs sampled original replacement. assume
original sample pairs data representative whole population pairs.
Given this, composing pseudo-samples sampling whole population.
Therefore measuring correlation coefficient many pseudo-samples, study
correlation coefficient would looked taken many sets samples
whole population. distribution correlation coefficient among many
pseudo-samples (the bootstrap sampling distribution) infer bounds confidence
interval observed correlation coefficients.
Many pseudo-samples taken, correlation coefficient calculated
pseudo-samples. gives bootstrap sampling distribution correlation coefficient. 97.5th percentile distribution upper bound 95% confidence
interval correlation coefficient, 2.5th percentile lower bound.

Appendix B: Relationship BMSs MUSs
Let C satisfiable SAT instance {l1 , l2 , . . . , lk } set literals entailed
C. Let clause l1 l2 . . . lk .
Theorem C 0 BMS C iff C 0 MUS C 2
267

fiSinger, Gent & Smaill

Proof Suppose C 0 BMS C. C 0 d, sub-instance C d, must
unsatisfiable, violates every literal backbone C 0 . removed C 0 d,
result C 0 satisfiable. clause c removed C 0 d, must
literal backbone C 0 , li say, (C 0 {c}) li satisfiable. Therefore,
since li literal d, (C 0 {c}) satisfiable. Therefore C 0 MUS
C d.
Conversely, suppose C 0 MUS C d. Since C 0 minimally unsatisfiable,
0
C satisfiable. Since C 0 sub-instance C, backbone C 0 must subset
backbone C. Suppose literal lj backbone C
backbone C 0 . would solution C 0 lj . would
solution C 0 d, since lj one literal d. contradicts C 0 unsatisfiable
lj i.e. C 0 C must backbone.
C 0 minimally unsatisfiable. Therefore clause c C 0 , (C 0 {c})
satisfiable. solution (C 0 {c}) must make literal lk true, must
therefore solution (C 0 {c}) lk . Therefore lk , backbone
C 0 , backbone (C 0 {c}). Hence C 0 BMS C 2

References
Bayardo, R. J., & Schrag, R. (1996). Using CSP Look-Back Techniques Solve Exceptionally Hard SAT Instances. Proceedings Second International Conference
Principles Practice Constraint Programming, pp. 4660. Springer.
Cheeseman, P., Kanefsky, B., & Taylor, W. (1991). Really Hard Problems Are.
Proceedings IJCAI-91, pp. 331340. Morgan Kaufmann.
Clark, D., Frank, J., Gent, I. P., MacIntyre, E., Tomov, N., & Walsh, T. (1996). Local Search
Number Solutions. Proceedings Second International Conference
Principles Practice Constraint Programming, pp. 119133. Springer.
Cohen, P. (1995). Empirical Methods Artificial Intelligence. MIT Press.
Cook, S. (1971). Complexity Theorem-Proving Procedures. Proc. 3rd Ann. ACM
Symp. Theory Computing, pp. 151158.
Cook, S., & Mitchell, D. (1997). Finding Hard Instances Satisfiability Problem:
Survey. Satisfiability Problem: Theory Applications, Vol. 35 DIMACS Series
Discrete Mathematics Theoretical Computer Science, pp. 1 18. American
Mathematical Society.
Crawford, J. M., & Auton, L. D. (1996). Experimental Results Crossover Point
Random 3SAT. Artificial Intelligence, 81, 3157.
Culberson, J., & Gent, I. P. (1999a). Completeness WalkSAT 2-SAT. Tech.
rep. APES-15-1999, APES Research Group.
Available http://apes.cs.strath.ac.uk/apesreports.html.
268

fiBackbone Fragility Local Search Cost Peak

Culberson, J., & Gent, I. P. (1999b). Well reach: hard problems hard. Tech.
rep. APES-13-1999, APES Research Group.
Available http://apes.cs.strath.ac.uk/apesreports.html.
Franco, J., & Paull, M. (1983). Probabilistic analysis Davis Putnam procedure
solving satisfiability problem. Discrete Applied Math., 5, 7787.
Frank, J., Cheeseman, P., & Stutz, J. (1997). Gravity Fails: Local Search Topology.
J. Artificial Intelligence Research, 7, 249281.
Gent, I. P. (1998). Stupid Algorithm Satisfiability. Tech. rep. APES-02-1998,
APES Research Group.
Available http://apes.cs.strath.ac.uk/apesreports.html.
Gent, I. P., MacIntyre, E., Prosser, P., & Walsh, T. (1996). Constrainedness Search.
Proceedings AAAI-96, pp. 246252. AAAI Press / MIT Press.
Gent, I. P., & Walsh, T. (1993). Empirical Analysis Search GSAT. J. Artificial
Intelligence Research, 1, 4759.
Gent, I. P., & Walsh, T. (1996). satisfiability constraint gap. Artificial Intelligence,
81, 5980.
Hogg, T., & Williams, C. P. (1994). hardest constraint problems: double phase
transition. Artificial Intelligence, 69, 359377.
Hoos, H. (1998). Stochastic Local Search - Methods, Models, Applications. Ph.D. thesis,
Darmstadt University Technology.
Hoos, H. (1999a). Run-time Behaviour Stochastic Local Search Algorithms
SAT. Proceedings AAAI-99, pp. 661666. AAAI Press / MIT Press.
Hoos, H. (1999b). SAT-Encodings, Search Space Structure, Local Search Performance.
Proceedings IJCAI-99, pp. 296302. Morgan Kaufmann.
Hoos, H., & Stutzle, T. (1998). Characterising Run-time Behaviour Stochastic Local
Search. Tech. rep. AIDA-98-01, Darmstadt University Technology.
Iwama, K., Miyano, E., & Asahiro, Y. (1996). Random generation test instances controlled attributes. Cliques, Coloring, Satisfiability, Vol. 26 DIMACS Series
Discrete Mathematics Theoretical Computer Science, pp. 377394. American
Mathematical Society.
Koutsoupias, E., & Papadimitriou, C. H. (1992). greedy algorithm satisfiability.
Information Processing Letters, 43 (1), 53 55.
Larrabee, T., & Tsuji, Y. (1992). Evidence Satisfiability Threshold Random 3CNF
Formulas. Tech. rep. UCSC-CRL-92-42, Jack Baskin School Engineering, University
California, Santa Cruz.
269

fiSinger, Gent & Smaill

McAllester, D., Selman, B., & Kautz, H. (1997). Evidence Invariants Local Search.
Proceedings AAAI-97, pp. 321326. AAAI Press / MIT Press.
Mitchell, D., Selman, B., & Levesque, H. (1992). Hard Easy Distributions SAT
Problems. Proceedings AAAI-92, pp. 459465. AAAI Press / MIT Press.
Monasson, R., Zecchina, R., Kirkpatrick, S., Selman, B., & Troyansky, L. (1999a). 2+PSAT: Relation Typical-Case Complexity Nature Phase Transition.
Random Structures Algorithms, 15, 414 440.
Monasson, R., Zecchina, R., Kirkpatrick, S., Selman, B., & Troyansky, L. (1999b). Determining computational complexity characteristic phase transitions. Nature, 400,
133137.
Papadimitriou, C. H. (1991). selecting satisfying truth assignment. Proc. 32nd
IEEE Symp. Foundations Comp. Sci., pp. 163169.
Parkes, A. (1997). Clustering Phase Transition. Proceedings AAAI-97, pp.
340345. AAAI Press / MIT Press.
Parkes, A., & Walser, J. (1996). Tuning Local Search Satisfiability Testing. Proceedings AAAI-96, pp. 356362. AAAI Press / MIT Press.
Schrag, R., & Crawford, J. (1996). Implicates prime implicates Random 3-SAT.
Artificial Intelligence, 81, 199222.
Selman, B., Kautz, H., & Cohen, B. (1994). Noise Strategies Improving Local Search.
Proceedings AAAI-94, pp. 337343. AAAI Press / MIT Press.
Walsh, T. (1998). Constrainedness Knife-Edge. Proceedings AAAI-98, pp. 406
411. AAAI Press / MIT Press.
Yokoo, M. (1997). Adding Constraints Makes Problem Easier Hill-Climbing
Algorithms: Analysing Landscapes CSPs. Proceedings Third International
Conference Principles Practice Constraint Programming, pp. 356370.
Springer.

270


