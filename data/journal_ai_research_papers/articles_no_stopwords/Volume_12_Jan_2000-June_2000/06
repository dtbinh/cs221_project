Journal Artificial Intelligence Research 12 (2000) 199-217

Submitted 12/1999; published 5/2000

Complexity Reasoning Cardinality Restrictions
Nominals Expressive Description Logics
Stephan Tobies

tobies@informatik.rwth-aachen.de

LuFG Theoretical Computer Science, RWTH Aachen
Ahornstr. 55, 52074 Aachen, Germany

Abstract

study complexity combination Description Logics ALCQ ALCQI
terminological formalism based cardinality restrictions concepts. combinations naturally embedded C 2 , two variable fragment predicate logic
counting quantifiers, yields decidability NExpTime. show approach leads optimal solution ALCQI , ALCQI cardinality restrictions
complexity C 2 (NExpTime-complete). contrast, show ALCQ,
problem solved ExpTime. result obtained reduction reasoning cardinality restrictions reasoning (in general weaker) terminological
formalism general axioms ALCQ extended nominals . Using reduction,
show that, extension ALCQI nominals, reasoning general axioms
NExpTime-complete problem. Finally, sharpen result show pure
concept satisfiability ALCQI nominals NExpTime-complete. Without nominals,
problem known PSpace-complete.
1. Introduction

Description Logics (DLs) used knowledge based systems represent reason taxonomical knowledge application domain semantically well-defined
manner (Woods & Schmolze, 1992). allow definition complex concepts (i.e.,
classes, unary predicates) roles (binary predicates) built atomic ones
application given set constructors. example, following concept describes
parents least two daughters:
Human u (Male Female) u (> 2 hasChild Female) u 8hasChild:Human
concept example DL ALCQ. ALCQ extends \standard" DL ALC
(Schmidt-Schau & Smolka, 1991) qualifying number restrictions, i.e., concepts restricting number individuals related via given role (here hasChild), instead
allowing existential universal restrictions ALC. ALCQ syntactic variant
(multi-)modal logic K graded modalities (Fine, 1972). paper study
problems DLs ALCQ ALCQI . latter extends ALCQ possibility
refer inverse role relations. Additionally, paper encounter nominals,
i.e., concepts referring single elements domain. extensions ALCQ ALCQI
nominals denoted ALCQO ALCQIO. example concept ALCQIO
describes common children individuals ALICE BOB living ALICE BOB

9hasChild 1 :ALICE u 9hasChild 1:BOB u 9livesWith:(ALICE BOB):
c 2000 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiTobies

Concept Satisfiability
GCIs
Cardinality Restr.

ALCQ

-c.
-c.
ExpTime-c.
PSpace

ExpTime

ALCQO

open

-c.
ExpTime-c.
ExpTime

ALCQI

-c.
-c.
NExpTime-c.
PSpace

ExpTime

ALCQIO

NExpTime-c.
NExpTime-c.
NExpTime-c.

Figure 1: Complexity results established paper (shown bold face)
Here, parent relationship expressed inverse hasChild relationship.
terminological component (TBox) allows organisation defined concepts
roles forms knowledge base DL system. TBoxes studied DLs range weak
ones allowing acyclic introduction abbreviations complex concepts,
TBoxes capable expressing various forms general axioms, cardinality restrictions
express restrictions number elements extension concept may
have. following, give examples three types assertions.
following TBox introduces parent abbreviation human least
one child whose children human, toddler young human, busy parent
parent least two children toddlers.
Parent = Human u (> 1 hasChild) u 8hasChild:Human
Toddler = Human u VeryYoung
BusyParent = Parent u (> 2 hasChild Toddler)
next expressions general axioms stating males females disjoint (?
denotes empty concept) males females coincide humans
exactly two human parents.
Female u Male = ?
Female Male = Human u (= 2 hasChild 1 Human)
Finally, following expression cardinality restriction expressing
two earliest ancestors:
( 2 (Human u (6 0 hasChild 1 Human)))
Cardinality restriction first introduced Baader et al. (1996) terminological
formalism DL ALCQ; see, express general axioms hence
expressive terminological formalisms considered paper.
key component DL system reasoning component provides services
subsumption consistency tests knowledge stored TBox. subsumption
test, example, could infer previous definitions Male Female
subsumed Human BusyParent subsumed Parent busy parent must
least one child. exist sound complete algorithms reasoning large
number DLs different TBox formalisms optimal respect known
worst-case complexity problems (see Donini et al., 1996, overview).
200

fiThe Complexity Cardinality Restrictions Nominals

paper establish number new complexity results DLs cardinality
restrictions nominals. Figure 1 summarises new complexity bounds established
paper. problems complete respective complexity class. paper
organised follows.
giving basic definitions Section 2, show consistency TBoxes
cardinality restrictions ALCQI NExpTime-complete problem (Section 3). Membership NExpTime shown translation satisfiability problem C 2 (Pacholski et al., 1997)1 , two variable fragment first order predicate logic augmented
counting quantifiers. matching lower bound established reduction
NExpTime-complete bounded domino problem.
Section 4, show reasoning cardinality restrictions reduced
reasoning (weaker) formalism general axioms presence nominals.
yields interesting complexity results reasoning cardinality restrictions
nominals. Using result (De Giacomo, 1995), reduction shows consistency TBoxes cardinality restrictions ALCQ ExpTime. improves
result (Baader et al., 1996), shown problem solved
NExpTime. Moreover, show DL number restrictions, inverse roles,
nominals reasoning problems become NExpTime-hard, solves open problem
(De Giacomo, 1995). combination particular interest application DLs
area reasoning database schemata (Calvanese et al., 1998a, 1998b).
2. Logic

ALCQI

Definition 2.1 Let NC set atomic concept names NR set atomic role
names. Concepts ALCQI built inductively using following rules:
2 NC concepts, and, C , C1 , C2 concepts,

:C; C1 u C2;



(> n C );

concepts, n 2 N = R = R 1 R 2 NR .
cardinality restriction ALCQI expression form (> n C ) (6 n C )
C concept n 2 N ; ALCQI -TCBox 2 finite set cardinality restrictions.
semantics concepts defined relative interpretation = (I ; ),
consists domain valuation (I ) maps concept name subset
AI role name R subset RI . valuation inductively
extended arbitrary concepts using following rules, ]M denotes cardinality
set :
(:C )I := n C ;
(C1 u C2 )I := C1I \ C2I ;
(> n R C )I := fa 2 j ]fb 2 j (a; b) 2 RI ^ b 2 C g ng;
(> n R 1 C )I := fa 2 j ]fb 2 j (b; a) 2 RI ^ b 2 C g ng:
1. NExpTime-result valid assume unary coding numbers counting quantifiers.
standard assumption made results concerning complexity DLs.
2. subscripted \C" indicates TBox consists cardinality restrictions

201

fiTobies

x(A)
:= Ax
2 NC
x(:C )
:= : x(C )
x(C1 u C2) := x(C1 ) ^ x(C2 )
x(> n R C ) := 9ny:(Rxy ^ (C ))
x(> n R 1 C ) := 9ny:(Ryx ^ (C ))
(C )
:= x(C )[xny; ynx]
(./ n C )
:= 9./nx: x(C ) ./ 2 f>; 6g
(T )
:= Vf (./ n C ) j (./ n C ) 2 g
Figure 2: translation ALCQI C 2
interpretation satisfies cardinality restriction (> n C ) iff ](C ) n, satisfies (6 n C ) iff ](C ) n. satisfies TCBox iff satisfies cardinality restrictions
; case, called model denote fact j= . TCBox
model called consistent.
ALCQ denote fragment ALCQI contain inverse roles
R 1.

Using constructors Definition 2.1, use (8 C ) abbreviation
cardinality restriction (6 0 :C ) introduce following abbreviations concepts:
C1 C2 = :(:C1 u :C2 )
(6 n C ) = :(> (n + 1) C )
C1 ! C2 = :C1 C2
(= n C ) = (6 n C ) u (> n C )
9S:C = (> 1 C )
> = :A 2 NC
8S:C = (6 0 :C )
TBoxes consisting cardinality restrictions first studied (Baader et al.,
1996) DL ALCQ. Obviously, two concepts C; extension interpretation iff satisfies cardinality restriction (6 0 (C u :D) (:C u D)). Hence,
cardinality restrictions express terminological axioms form C = D,
satisfied interpretation iff C = DI . General axioms expressive TBox
formalisms usually studied DL context (De Giacomo & Lenzerini, 1996). One standard inference service DL systems satisfiability concept C respect TCBox
, i.e., interpretation j= C 6= ;. TBox formalism
based cardinality restrictions easily reduced TBox consistency, obviously C satisfiable respect iff [ f(> 1 C )g consistent TCBox.
reason, restrict attention TCBox consistency; standard inferences
concept subsumption reduced consistency well.
exist direct decision procedure ALCQI TCBox consistency.
Nevertheless problem decided help well-known translation
ALCQI -TCBoxes C 2 (Borgida, 1996), given Figure 2. logic C 2 fragment
predicate logic formulae may contain two variables, enriched
counting quantifiers form 9`. translation yields satisfiable sentence
C 2 translated TCBox consistent. Since translation ALCQI C 2
202

fiThe Complexity Cardinality Restrictions Nominals

performed linear time, NExpTime upper bound (Gradel et al., 1997; Pacholski
et al., 1997) satisfiability C 2 directly carries ALCQI -TCBox consistency:
Lemma 2.2 Consistency ALCQI -TCBox decided NExpTime.
Please note NExpTime-completeness result (Pacholski et al., 1997)
valid assume unary coding numbers input; implies number n may
stored logarithmic space k-ary representation consumes n units
storage. standard assumption made results concerning complexity
DLs. come back issue Section 3.3.
3. Consistency

ALCQI -TCBoxes NExpTime-complete

show NExpTime lower bound complexity TCBox consistency,
use bounded version domino problem. Domino problems (Wang, 1963; Berger,
1966) successfully employed establish undecidability complexity results
various description modal logics (Spaan, 1993; Baader & Sattler, 1999).
3.1 Domino Systems
Definition 3.1 n 2 N , let Zn denote set f0; : : : ; n 1g n denote addition
modulo n. domino system triple = (D; H; V ), finite set (of tiles)
H; V relations expressing horizontal vertical compatibility constraints
tiles. s; 2 N , let U (s; t) torus Zs Zt, let w = w0 : : : wn 1
word length n (with n s). say tiles U (s; t) initial condition
w iff exists mapping : U (s; t) ! that, (x; ) 2 U (s; t),

(x; y) = (x 1; y) = d0, (d; d0 ) 2 H (horizontal constraint);
(x; y) = (x; 1) = d0 , (d; d0 ) 2 V (vertical constraint);
(i; 0) = wi 0 < n (initial condition).

Bounded domino systems capable expressing computational behaviour
restricted, so-called simple, Turing Machines (TM). restriction non-essential
following sense: Every language accepted time (n) space (n) one-tape TM
accepted within time space bounds simple TM, long (n); (n)
2n (Borger et al., 1997).
Theorem 3.2 ((Borger et al., 1997), Theorem 6.1.2)

Let simple TM input alphabet . exists domino system =
(D; H; V ) linear time reduction takes input x 2 word w 2
jxj = jwj
accepts x time t0 space s0, tiles U (s; t) initial condition w
s0 + 2; t0 + 2;
accept x, tile U (s; t) initial condition w
s; 2.
203

fiTobies

Corollary 3.3

domino system following NExpTime-hard problem:
Given initial condition w = w0 : : : wn 1 length n. tile torus
U (2n+1 ; 2n+1 ) initial condition w?
Proof. Let (w.l.o.g. simple) non-deterministic TM time- (and hence space-)
bound 2n deciding arbitrary NExpTime-complete language L(M ) alphabet .
Let according domino system trans reduction Theorem 3.2.
function trans linear reduction L(M ) problem above: v 2
jvj = n, holds v 2 L(M ) iff accepts v time space 2jvj iff tiles
U (2n+1 ; 2n+1 ) initial condition trans(v ).
3.2 Defining Torus Exponential Size

Similar proving undecidability reduction unbounded domino problems, defining infinite grids key problem, defining torus exponential size key
obtaining NExpTime-completeness proof reduction bounded domino problems.
able apply Corollary 3.3 TCBox consistency ALCQI , must characterise
torus Z2 Z2 TCBox polynomial size. characterise torus, use
2n concepts X0 ; : : : ; Xn 1 Y0 ; : : : ; Yn 1 , Xi (resp., Yi) codes ith bit
binary representation X-coordinate (resp., Y-coordinate) element a.
interpretation element 2 , define pos(a)
n

n

pos(a) := (xpos(a); ypos(a)) :=
(

nX1

xi

1

n
X

2 ;


=0 (



=0

yi



2





;



62 XiI
0; 62 YiI
= 01;; ifotherwise
yi =
1; otherwise :
use well-known characterisation binary addition (e.g. (Borger et al., 1997))
relate positions elements torus:
Lemma 3.4 Let x; x0 natural numbers binary representations
xi

x

=


x0 x + 1

1

n
X

=0



1

xi

2i
1

n^ k^

(mod 2 ) iff
n

k

^

(

=0 j =0
1 1

n^ k_
k

(

=0 j =0

x0

=

1

n
X

=0



x0i

2i :

xj

= 1) ! (xk = 1 $ x0k = 0)

xj

= 0) ! (xk = x0k ) ;

empty conjunction disjunction interpreted true false, respectively.
204

fiThe Complexity Cardinality Restrictions Nominals

Deast

=

Xk

u

n

n

(

=0 j =0
1 kG1

k
n

Xj

1

=0
1

k

=0
k=0
1k 1

k
n

(8 9north:>);
(8 (= 1 north 1 >));
(> 1 C(2 1;2 1) );
(8 Deast u Dnorth )
n

n

:Xk u

G G

=

n

n

=0
1

k
n

G

1;2 1)

1

G

C(2n

=

n

G

C(0;0)

= (8 9east:>);
(8 (= 1 east 1 >));
(> 1 C(0;0) );
(6 1 C(2 1;2 1) );
G

Tn

n

:Yk

Yk

) ! ((Xk ! 8east::Xk ) u (:Xk ! 8east:Xk )) u

( :Xj ) ! ((Xk ! 8east:Xk ) u (:Xk ! 8east::Xk )) u

=0 j =0
1

G

k
n

=

=0

G

Dnorth

k

((Yk ! 8east:Yk ) u (:Yk ! 8east::Yk ))

:::

Figure 3: TCBox defining torus exponential size
TCBox Tn defined Figure 3. concept C(0;0) satisfied elements
domain pos(a) = (0; 0) holds. C(2 1;2 1) similar concept, whose
instances satisfy pos(a) = (2n 1; 2n 1).
concept Dnorth similar Deast role north substituted east
variables Xi Yi swapped. concept Deast (resp. Dnorth ) enforces that,
along role east (resp. north), value xpos (resp. ypos) increases one
value ypos (resp. xpos) unchanged. analogous formula Lemma 3.4.
following lemma consequence definition pos Lemma 3.4.
Lemma 3.5 Let = (I ; ) interpretation, Deast ; Dnorth defined Figure 3,
a; b 2 .
n

implies:
(a; b) 2 eastI 2 Deast
implies:
(a; b) 2 northI 2 Dnorth

n

xpos(b) xpos(a) + 1
ypos(b) = ypos(a)
xpos(b) = xpos(a)
ypos(b) ypos(a) + 1

(mod 2n)

(mod 2n)
TCBox Tn defines torus exponential size following sense:
Lemma 3.6 Let Tn TCBox defined Figure 3. Let = (I ; ) model
Tn .
(I ; eastI ; northI ) = (U (2n ; 2n ); S1 ; S2 ) ;
205

fiTobies

U (2n; 2n ) torus Z2 Z2 S1; S2 horizontal vertical successor
relations torus.
Proof. show function pos isomorphism U (2n ; 2n ). Injectivity
pos shown induction \Manhattan distance" d(a) pos-value element
pos-value upper right corner.
element 2 define d(a)
d(a) = (2n 1 xpos(a)) + (2n 1 ypos(a)):
Note pos(a) = pos(b) implies d(a) = d(b). Since j= (6 1 C(2 1;2 1) ),
one element 2 d(a) = 0. Hence, exactly one element
pos(a) = (2n 1; 2n 1). assume elements a; b 2
pos(a) = pos(b) d(a) = d(b) > 0. either xpos(a) < 2n 1 ypos(a) < 2n 1.
W.l.o.g., assume xpos(a) < 2n 1. j= Tn, follows a; b 2 (9east:>)I . Let
a1 ; b1 elements (a; a1 ) 2 eastI (b; b1 ) 2 eastI . Since d(a1 ) = d(b1 ) < d(a)
pos(a1 ) = pos(b1), induction hypothesis yields a1 = b1 . Lemma 3.5 follows

xpos(a1 ) xpos(b1 ) xpos(a) + 1 (mod 2n )
ypos(a1 ) = ypos(b1 ) = ypos(a)
implies = b a1 2 (= 1 east 1:>)I f(a; a1 ); (b; a1 )g eastI . Hence
pos injective.
prove pos surjective use similar technique. time, use
induction distance lower left corner. element (x; y) 2 U (2n ; 2n),
define:
d0 (x; ) = x + y:
show induction that, (x; y) 2 U (2n ; 2n ), element 2
pos(a) = (x; y). d0 (x; y) = 0, x = = 0. Since j= (> 1 C(0;0) ),
element 2 pos(a) = (0; 0). consider (x; y) 2 U (2n ; 2n )
d0 (x; ) > 0. Without loss generality assume x > 0 (if x = 0 > 0 must hold).
Hence (x 1; y) 2 U (2n ; 2n ) d0 (x 1; y) < d0 (x; y). induction hypothesis,
follows element 2 pos(a) = (x 1; y). must
element a1 (a; a1 ) 2 eastI Lemma 3.5 implies pos(a1 ) = (x; y). Hence
pos surjective.
Finally, pos indeed homomorphism immediate consequence Lemma 3.5.
n

n

n

n

interesting note need inverse roles guarantee pos injective. achieved adding cardinality restriction (6 (2n 2n) >)
Tn , injectivity pos follows surjectivity simple cardinality
considerations. course size cardinality restriction would polynomial
n assume binary coding numbers. note made explicit use
special expressive power cardinality restrictions stating that, model Tn,
extension C(2 1;2 1) must one element. cannot expressed
ALCQI -TBox consisting terminological axioms.
n

n

206

fiThe Complexity Cardinality Restrictions Nominals

3.3 Reducing Domino Problems TCBox Consistency

Lemma 3.6 proved, easy reduce bounded domino problem
TCBox consistency. use standard reduction applied DL context,
e.g., (Baader & Sattler, 1999).
Lemma 3.7 Let = (D; V; H ) domino system. Let w = w0 : : : wn 1 2 .
TCBox (n; D; w) that:
(n; D; w) consistent iff tiles U (2n; 2n ) initial condition w.
(n; D; w) computed time polynomial n.
Proof. define (n; D; w) := Tn [ TD [ Tw , Tn defined Figure 3, TD captures
vertical horizontal compatibility constraints domino system D, Tw enforces initial condition. use atomic concept Cd tile 2 D. TD consists
following cardinality restrictions:
G
:(Cd u Cd0 ));
(8 Cd ); (8
d2D d0 2Dnfdg

Cd0

))); (8

G

(d;d0 )2H

G

G

d2D

(Cd ! (8east:

G

G

(8

d2D

d2D

G

(Cd ! (8north:

(d;d0 )2V

Cd0

))):

Tw consists cardinality restrictions
(8 (C(0;0) ! Cw0 )); : : : ; (8 (C(n 1;0) ! Cw 1 );
n

where, x; y, C(x;y) concept satisfied element iff pos(a) = (x; y),
defined similarly C(0;0) C(2 1;2 1) .
definition (n; D; w) Lemma 3.6, follows model (n; D; w)
immediately induces tiling U (2n ; 2n ) vice versa. Also, fixed domino system
D, (n; D; w) obviously polynomially computable.
main result section immediate consequence Lemma 2.2, Lemma 3.7, Corollary 3.3:
n

n

Theorem 3.8

Consistency ALCQI -TCBoxes NExpTime-complete, even unary coding numbers
used input.
Recalling note proof Lemma 3.6, see argument
applies ALCQ allow binary coding numbers.
Corollary 3.9

Consistency ALCQ-TCBoxes NExpTime-hard, binary coding used represent
numbers cardinality restrictions.
noted open problem decided NExpTime, binary
coding numbers used, since reduction C 2 yields decidability 2-NExpTime.
207

fiTobies

following section, see that, unary coding numbers, deciding consistency ALCQ-TCBoxes done ExpTime (Corollary 4.8). shows
coding numbers indeed uence complexity reasoning problem.
worth noting complexity pure concept satisfiability ALCQ depend coding; problem PSpace-complete binary unary coding
numbers (Tobies, 2000).
unary coding, needed inverse roles cardinality restrictions
reduction. consistent fact satisfiability ALCQI concepts respect
TBoxes consisting terminological axioms still ExpTime, shown
reduction ExpTime-complete logics CIN (De Giacomo, 1995) CPDL (Pratt,
1979). shows cardinality restrictions concepts additional source
complexity. One reason might ALCQI cardinality restrictions longer
tree-model property.
4. Reasoning Nominals

Nominals, i.e., atomic concepts referring single individualsof domain, studied
area DLs (Borgida & Patel-Schneider, 1994; Donini et al., 1996) modal logics
(Gargov & Goranko, 1993; Blackburn & Seligman, 1996; Areces et al., 1999). section
show how, presence nominals, consistency TCBoxes polynomially
reduced consistency TBoxes consisting general inclusion axioms, which, general,
easier problem. correspondence used obtain two novel results: (i) show
that, unary coding, consistency ALCQ-TBoxes consisting cardinality restrictions
decided ExpTime; (ii) show that, presence inverse roles
number restrictions, reasoning nominals strictly harder without nominals:
complexity determining consistency TBoxes general axioms rises ExpTime
NExpTime, complexity concept satisfiability rises PSpace NExpTime.
Definition 4.1 Let NI set individual names (also called nominals) disjoint
NC NR . Concepts ALCQIO defined ALCQI -concepts additional rule
that, every 2 NI , ALCQIO-concept.
general concept inclusion axiom ALCQIO expression C v D,
C ALCQIO-concepts. TIBox ALCQIO finite set general
inclusion axioms ALCQIO, subscript \I" stands \Inclusion".
semantics ALCQIO concepts defined similar ALCQI , additional
requirement every interpretation maps nominal 2 NI singleton set oI ;
seen name element oI . Please note unique
name assumption, i.e., assume o1 6= o2 implies oI1 6= oI2 .
interpretation satisfies axiom C v iff C DI . satisfies TIBox Tgci iff
satisfies axioms Tgci ; case called model Tgci, denote
fact j= Tgci . TIBox model called consistent.
Cardinality restrictions, TCBoxes, interpretation ALCQIO defined analogously ALCQI .
208

fiThe Complexity Cardinality Restrictions Nominals

R

ALCQO denote fragment ALCQIO contain inverse roles

1.

Consistency TCBoxes TIBoxes ALCQO ALCQIO Exp-hard decided NExpTime, unary coding numbers used.
Proof. Consistency TIBoxes (and hence TCBoxes) ExpTime-hard already (a
syntactical variant of) ALC (Halpern & Moses, 1992). Assuming unary coding numbers,
reduce problems satisfiability C 2, yields NExpTime upper
bound.
Lemma 4.2
Time

4.1 Expressing Cardinality Restrictions Using Nominals

following show how, assumption unary coding numbers, consistency
ALCQI -TCBoxes polynomially reduced consistency ALCQIO-TIBoxes.
noted that, conversely, possible polynomially reduce consistency
ALCQIO-TIBoxes consistency ALCQI -TCBoxes: arbitrary concept C ,
cardinality restrictions f(6 1 C ); (> 1 C )g force interpretation C singleton.
Since gain insight reduction, formally prove
result.
Definition 4.3 Let = f(./1 n1 C1 ); : : : (./k nk Ck )g ALCQI -TCBox. W.l.o.g.,
assume contains cardinality restriction form (> 0 C ) trivially
satisfied interpretation. translation , denoted (T ), ALCQIO-TIBox
defined follows:

[

(T ) = f(./i ni Ci) j 1 kg;
(./i ni Ci ) defined depending whether ./i =6 ./i =>.
(

n
1
(./i ni Ci ) = ffoCji vv Coi tj 1 tj oi ng g [ foj v :o` j 1 j < ` n g











=6 ;
./i =>
./i

o1i ; : : : ; oni fresh distinct nominals use convention empty
disjunction interpreted :> deal case ni = 0.


Assuming unary coding numbers, translation TCBox obviously computable polynomial time.
Lemma 4.4 Let ALCQI -TCBox. consistent iff (T ) consistent.
Proof. Let = f(./1 n1 C1 ); : : : (./k nk Ck )g consistent TCBox. Hence,
model , j= (./i ni Ci ) 1 k. show construct model
0 (T ) fromj . 0 identical every respect except interpretation
nominals oi (which appear ).
./i =6, j= implies ]CiI ni. ni = 0, have0 introduced
new nominals, (T ) contains Ci v :>. Otherwise, define (oji )I CiI
209

fiTobies

f(oji )I 0 j 1 j nig. implies CiI 0 (o1i )I 0 [ [ (oni )I 0 hence, either case,
0 j= (6 ni Ci).
./i =>, ni > 0 must hold, j= implies ]CiI 0ni. Let x1; : : : xn ni
distinct elements fx1 ; : : : ; xn g CiI . set (oji )I = fxj g. Since
chosen distinct individuals interpret different nominals, 0 j= oji v :o`i every
1 < ` ni. Moreover, xj 2 CiI implies 0 j= oji v Ci hence 0 j= (> ni Ci).






chosen distinct nominals every cardinality restrictions, hence previous
construction well-defined and, since 0 satisfies (./i ni Ci ) every i, 0 j= (T ).
converse direction, let models (T ). fact j= (and hence
consistency ) shown follows: let (./i ni Ci) arbitrary cardinality
restriction . ./i =6 ni = 0, (6 0 Ci) = fCi v :>g and,
since j= (T ),nwe CiI = ; hence j= (6 0 Ci). ./i =6
ni > 0,
n
1

1
fCi v oi oi g (T ). j= (T ) follows ]Ci ](oi oi ) ni. ./i =>,
foji v Ci j 1 j nig[foji v :o`i j 1 j < ` nig (T ). first set
axioms get f(oji )I j 1 j nig CiI . secondSset axioms get that,
every 1 j < ` ni, (oji )I 6= (o`i )I . implies ni = ] f(oji )I j 1 j nig ]CiI .




Theorem 4.5

Assuming unary coding numbers, consistency ALCQI -TCBoxes polynomially
reduced consistency ALCQIO-TIBoxes. Similarly, consistency ALCQ-TCBoxes
polynomially reduced consistency ALCQO-TIBoxes.
Proof. first proposition follows fact (T ) polynomially computable
assume unary coding numbers Lemma 4.4. second proposition
follows fact translation introduce additional inverse roles.
contain inverse roles, neither (T ), hence result translating
ALCQ-TCBox ALCQO-TIBox.
4.2 Complexity Results

use Theorem 4.5 obtain new complexity results DLs cardinality
restrictions nominals.
4.2.1

ALCQ ALCQO

De Giacomo (1995) obtains complexity results various DLs sophisticated polynomial
reduction propositional dynamic logic. author establishes many complexity results,
one special interest purposes.
Theorem 4.6 ((De Giacomo, 1995), Section 7.3)

Satisfiability logical implication CNO knowledge bases (TBox ABox) Exp-complete.
DL CNO studied author strict extension ALCQO; TBoxes thesis
correspond call TIBoxes paper. Unary coding numbers assumed
Time

210

fiThe Complexity Cardinality Restrictions Nominals

throughout thesis. Although unique name assumption made, inherent
utilised reduction since explicitly enforced. thus possible eliminate
propositions require unique interpretation individuals reduction. Hence,
together Lemma 4.2, get following corollary.
Corollary 4.7

Consistency ALCQO-TIBoxes ExpTime-complete unary coding number assumed.
Together Theorem 4.5, solves open problem concerning lower bound
complexity ALCQ cardinality restrictions; moreover, shows NExpTime-algorithm presented (Baader et al., 1996) optimal respect worst case
complexity.
Corollary 4.8

Consistency ALCQ-TCBoxes ExpTime-complete, unary coding numbers cardinality number restrictions used.
4.2.2

ALCQIO

Conversely, using Theorem 4.5 enables us transfer NExpTime-completeness result
Theorem 3.8 ALCQIO.
Corollary 4.9

Consistency ALCQIO-TIBoxes TCBoxes NExpTime-complete.
Proof. TIBoxes, immediate corollary Theorem 4.5 Theorem 3.8.
Reasoning TCBoxes hard TIBoxes presences nominals.
results explains gap (De Giacomo, 1995). author establishes
complexity satisfiability knowledge bases consisting TIBoxes ABoxes
CNO, allows qualifying number restrictions, CIO, allows inverse
roles, reduction ExpTime-complete PDL. results given combination CINO, strict extension ALCQIO. Corollary 4.8 shows that, assuming
ExpTime 6= NExpTime, cannot polynomial reduction satisfiability
problem CINO knowledge bases ExpTime-complete PDL. Again, possible explanation leap complexity loss tree model property. CIO
CNO, consistency decided searching tree-like pseudo-models even presence
nominals, seems longer possible case knowledge bases CINO.
Unique Name Assumption noted definition nominals nonstandard Description Logics sense impose unique name assumption widely made, i.e., two individual names o1 ; o2 2 NI , oI1 6= oI2
required. Even without unique name assumption, possible enforce distinct interpretation nominals adding axioms form o1 v :o2. Moreover, imposing unique
name assumption presence inverse roles number restriction leads peculiar
effects. Consider following TIBox:
= fo v (6 k R >); > v 9R :og
211

fiTobies

unique name assumption, consistent iff NI contains k individual
names, individual name must interpreted unique element domain, every element domain must reachable oI via role R, oI may
k R-successors. believe dependency consistency TIBox
constraints explicit TIBox counter-intuitive hence
imposed unique name assumption.
Nevertheless, possible obtain tight complexity bound consistency ALCQIOTIBoxes unique name assumption without using Theorem 4.5, immediate
adaption proof Theorem 3.8.
Corollary 4.10

Consistency ALCQIO-TIBoxes unique name assumption NExpTime-complete
unary coding numbers assumed.
Proof. simple inspection reduction used prove Theorem 3.8, especially
proof Lemma 3.6 shows single nominal, marks upper right
corner torus, necessary perform reduction. individual name
create role name, following TIBox defines torus exponential size:

Tn = > v 9east:>;
> v 9north:>;
> v (= 1 east 1 >); > v (= 1 north 1 >);
> v 9create:C(0;0) ; v C(2 1;2 1) ;
C(2 1;2 1) v o;
> v Deast u Dnorth
n

n

n

n

Since reduction uses single individual name, unique name assumption
irrelevant.
Internalisation Axioms presence inverse roles nominals, possible
internalise general inclusion axioms concepts using spy-point technique used,
e.g., (Blackburn & Seligman, 1996; Areces et al., 1999). main idea technique
enforce elements model concept reachable distinct point
(the spy-point) marked individual name single step.
Definition 4.11 Let ALCQIO-TIBox. W.l.o.g., assume form
f> v C1 ; : : : ; > v Ck g. Let spy denote fresh role name fresh individual name.
define function spy inductively structure concepts setting Aspy =
2 NC , ospy = 2 NI , (:C )spy = :C spy, (C1 u C2 )spy = C1spy u C2spy ,
(> n R C )spy = (> n R (9spy :i) u C spy).
internalisation CT defined follows:
G

=iu

>vC 2T

C spy

u

G

CT

>vC 2T

8spy:C spy

Lemma 4.12 Let ALCQIO-TIBox. consistent iff CT satisfiable.
Proof. -direction let model CT 2 (CT )I . implies iI = fag.

Let 0 defined

0 = fag [ fx 2 j (a; x) 2 spyI g
212

fiThe Complexity Cardinality Restrictions Nominals

0 = jI0 .
0
0
Claim 1: every x 2 every ALCQIO-concept C , x 2 (C spy )I iff x 2 C .
proof claim induction structure C . interesting case
C = (> n R ). case C spy = (> n R (9spy :i) u spy ).
x 2 (> n R (9spy :i) u spy )I
iff ]fy 2 j (x; y) 2 RI 2 (9spy :i)I \ (Dspy)I g > n
() iff ]fy 2 0 j (x; y) 2 RI 0 2 DI 0 g > n
iff x 2 (> n R D)I 0 ;
equivalence () holds set equality 0 definition 0.
construction,0 every > v C 2 every x 2 , x 2 (C spy )I . Due Claim 1,
implies x 2 C hence 0 j= > v C .
only-if -direction, let interpretation I0 j= . pick
arbitrary
0

0


element 2 define extension setting = fag spy = f(a; x) j
x 2 . Since spy occur , still 0 j= .
0
Claim 2: every x 2 every ALCQIO-concept C contain spy,
0
0
x 2 C iff x 2 (C spy )I .
Again, claim proved induction structure concepts
interesting case C = (> n R D).
0
x 2 (> n R )I
iff ]fy 2 0 j (x; y) 2 RI 0 2 DI 0 g > n
() iff ]fy 2 0 j (x; y) 2 RI 0 ; (a; y) 2 spyI 0 ; 2 (Dspy)I 0 g > n
iff x 2 (> n R (9spy :i) u Dspy)I 0 :
Again, equivalence () holds due set equality definition 0.
Since, every > v C0 2 , 0 j= > v C , Claim 2 yields ( >vC 2T C spy)I 0 =
0
hence 2 (CT )I
consequence, obtain sharper result already pure concept satisfiability
ALCQIO NExpTime-complete problem.
F

Corollary 4.13

Concept satisfiability ALCQIO NExpTime-complete.
Proof. Lemma 4.12, get function mapping ALCQIO-TIBox CT
reduction consistency ALCQIO-TIBoxes ALCQIO-concept satisfiability.
Corollary 4.9 know former problem NExpTime-complete. Obviously, CT
computed polynomial time. Hence, lower complexity bound transfers.
213

fiTobies

Concept Satisfiability
GCIs
Cardinality Restr.

ALCQ

-c.
-c.
ExpTime-c.
PSpace

ExpTime

ALCQO

open

-c.
ExpTime-c.
ExpTime

ALCQI

-c.
-c.
NExpTime-c.

ALCQIO

-c.
-c.
NExpTime-c.

PSpace

NExpTime

ExpTime

NExpTime

Figure 4: Complexity reasoning problems
5. Conclusion

Combining results (De Giacomo, 1995) (Tobies, 2000) results
paper, obtain classification complexity concept satisfiability TBoxconsistency various DLs TBoxes consisting either cardinality restrictions
general concept inclusion axioms shown Figure 4, assume unary coding
numbers.
result ALCQIO shows current efforts extending expressive DLs
logic SHIQ (Horrocks et al., 1999) DLR(Calvanese et al., 1998c) propositional
dynamic logics CPDLg (De Giacomo & Lenzerini, 1996) nominals dicult tasks,
one wants obtain practical decision procedure, since already concept satisfiability
logics NExpTime-hard problem.
shown that, complexity C 2, ALCQI reach
expressive power (Tobies, 1999). Cardinality restrictions, although interesting knowledge
representation, inherently hard handle algorithmically. applies nominals
presence inverse roles number restrictions. explanation offer
lack tree model property, identified Vardi (1997) explanation
good algorithmic behaviour many modal logics.
first glance, results make ALCQI cardinality restrictions concepts
ALCQIO general axioms obsolete knowledge representation C 2 delivers
expressive power computational price. Yet, likely dedicated
algorithm ALCQI may better average complexity C 2 algorithm;
algorithm yet developed. highly desirable would applicable
reasoning problems expressive DLs nominals, applications area
reasoning database schemata (Calvanese et al., 1998a, 1998b).
interesting question lies coding numbers: allow binary coding
numbers, translation approach together result (Pacholski et al., 1997)
leads 2-NExpTime algorithm. C 2, open question whether additional
exponential blow-up necessary. positive answer would settle question C 2
proof negative answer might give hints result C 2 might
improved. ALCQ cardinality restrictions, partially solved problem:
unary coding, problem ExpTime-complete whereas, binary coding,
NExpTime-hard.

214

fiThe Complexity Cardinality Restrictions Nominals

Acknowledgments

would thank Franz Baader, Ulrike Sattler, anonymous referees valuable
comments suggestions. work supported DFG, Project No. GR 1324/3{
1.
References

Aiello, L. C., Doyle, J., & Shapiro, S. C. (Eds.)., Proceedings KR'96 (1996). Principles
Knowledge Representation Reasoning: Proceedings Fifth International
Conference (KR'96). Morgan Kaufmann Publishers, San Francisco, California.
Areces, C., Blackburn, P., & Marx, M. (1999). road-map complexity hybrid logics.
Proceedings Annual Conference European Association Computer
Science Logic (CSL-99), LNCS 1683, pp. 307{321. Springer-Verlag.
Baader, F., Buchheit, M., & Hollunder, B. (1996). Cardinality restrictions concepts.
Artificial Intelligence, 88 (1{2), 195{213.
Baader, F., & Sattler, U. (1999). Expressive number restrictions description logics.
Journal Logic Computation, 9 (3), 319{350.
Berger, R. (1966). undecidability dominoe problem. Memoirs American
Mathematical Society, 66.
Blackburn, P., & Seligman, J. (1996). Hybrid languages. Journal Logic, Language
Information, 3 (4), 251{272.
Borger, E., Gradel, E., & Gurevich, Y. (1997). Classical Decision Problem. Perspectives
Mathematical Logic. Springer-Verlag, Berlin.
Borgida, A. (1996). relative expressiveness description logics first order logics.
Artificial Intelligence, 82, 353{367.
Borgida, A., & Patel-Schneider, P. F. (1994). semantic complete algorithm
subsumption classic description logic. Journal Artificial Intelligence Research,
1, 277{308.
Calvanese, D., De Giacomo, G., Lenzerini, M., Nardi, D., & Rosati, R. (1998a). Source integration data warehousing. Proceedings Ninth International Workshop
Database Expert Systems Applications (DEXA-98), pp. 192{197. IEEE Computer
Society Press.
Calvanese, D., De Giacomo, G., & Lenzerini, M. (1998b). decidability query
containment constraints. Proceedings Seventeenth ACM SIGACT
SIGMOD SIGART Symposium Principles Database Systems (PODS-98).
Calvanese, D., De Giacomo, G., Lenzerini, M., Nardi, D., & Rosati, R. (1998c). Description
logic framework information integration. Proc. 6th Int. Conf.
Principles Knowledge Representation Reasoning (KR'98), pp. 2{13.
215

fiTobies

De Giacomo, G. (1995). Decidability Class-Based Knowledge Representation Formalisms. Ph.D. thesis, Dipartimento di Informatica e Sistemistica, Univ. di Roma
\La Sapienza".
De Giacomo, G., & Lenzerini, M. (1996). TBox ABox reasoning expressive description
logics.. Aiello et al. (Aiello et al., 1996), pp. 316{327.
Donini, F. M., Lenzerini, M., Nardi, D., & Schaerf, A. (1996). Reasoning description
logics. Brewka, G. (Ed.), Foundation Knowledge Representation, pp. 191{236.
CSLI-Publications.
Fine, K. (1972). many possible worlds. Notre Dame Journal Formal Logic, 13,
516{520.
Gargov, G., & Goranko, V. (1993). Modal logic names. J. Philosophical Logic, 22,
607{636.
Gradel, E., Otto, M., & Rosen, E. (1997). Two-variable logic counting decidable.
Proceedings, Twelth Annual IEEE Symposium Logic Computer Science, pp.
306{317 Warsaw, Poland. IEEE Computer Society Press.
Halpern, J. Y., & Moses, Y. (1992). guide completeness complexity model
logics knowledge belief. Artificial Intelligence, 54 (3), 319{379.
Horrocks, I., Sattler, U., & Tobies, S. (1999). Practical reasoning expressive description
logics. Proceedings 6th International Conference Logic Programming
Automated Reasoning (LPAR'99), pp. 161{180.
Pacholski, L., Szwast, W., & Tendera, L. (1997). Complexity two-variable logic
counting. Proceedings, Twelth Annual IEEE Symposium Logic Computer
Science, pp. 318{327 Warsaw, Poland. IEEE Computer Society Press.
Pratt, V. R. (1979). Models program logics. Proceedings Twentieth IEEE
Symposium Foundations Computer Science, pp. 115{122. IEEE.
Schmidt-Schau, M., & Smolka, G. (1991). Attributive concept descriptions complements. Artificial Intelligence, 48, 1{26.
Spaan, E. (1993). Complexity Modal Logics. Ph.D. thesis, University Amsterdam.
Tobies, S. (1999). NExpTime-complete description logic strictly contained C 2.
Flum, J., & Rodriguez-Artalejo, M. (Eds.), Proceedings Annual Conference
European Association Computer Science Logic (CSL-99), LNCS 1683, pp.
292{306. Springer-Verlag.
Tobies, S. (2000). PSPACE reasoning graded modal logics. Journal Logic Computation. appear.
216

fiThe Complexity Cardinality Restrictions Nominals

Vardi, M. Y. (1997). modal logic robustly decidable?. Descriptive Complexity
Finite Models: Proceedings DIMACS Workshop, January 14-17, 1996, No. 31
DIMACS Series Discrete Mathematics Theoretical Computer Science, pp.
149{184. American Math. Society.
Wang, H. (1963). Dominoes AEA case Decision Problem. Bell Syst. Tech.
J., 40, 1{41.
Woods, W. A., & Schmolze, J. G. (1992). Kl-One family. Computers Mathematics
Applications { Special Issue Artificial Intelligence, 23 (2{5), 133{177.

217


