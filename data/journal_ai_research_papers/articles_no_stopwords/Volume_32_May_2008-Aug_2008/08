Journal Artificial Intelligence Research 32 (2008)

Submitted 11/07; published 07/08

M-DPOP: Faithful Distributed Implementation
Efficient Social Choice Problems
Adrian Petcu
Boi Faltings

ADRIAN . PETCU @ EPFL . CH
BOI . FALTINGS @ EPFL . CH

Artificial Intelligence Lab, Ecole Polytechnique Federale de Lausanne,
Station 14, 1015 Lausanne, Switzerland

David C. Parkes

PARKES @ EECS . HARVARD . EDU

School Engineering Applied Sciences, Harvard University
33 Oxford Street, Cambridge, 02138 USA

Abstract
efficient social choice problem, goal assign values, subject side constraints,
set variables maximize total utility across population agents, agent
private information utility function. paper model social choice problem
distributed constraint optimization problem (DCOP), agent communicate
agents share interest one variables. Whereas existing DCOP algorithms
easily manipulated agent, either misreporting private information deviating
algorithm, introduce M-DPOP, first DCOP algorithm provides faithful distributed
implementation efficient social choice. provides concrete example methods
mechanism design unified distributed optimization. Faithfulness ensures
agent benefit unilaterally deviating aspect protocol, neither informationrevelation, computation, communication, whatever private information agents.
allow payments agents central bank, central authority
require. achieve faithfulness, carefully integrate Vickrey-Clarke-Groves (VCG) mechanism DPOP algorithm, agent asked perform computation, report
information, send messages best interest. Determining agent payment
requires solving social choice problem without agent i. Here, present method reuse
computation performed solving main problem way robust manipulation
excluded agent. Experimental results structured problems show much 87%
computation required solving marginal problems avoided re-use, providing
good scalability number agents. unstructured problems, observe sensitivity
M-DPOP density problem, show reusability decreases almost
100% sparse problems around 20% highly connected problems. close discussion features DCOP enable faithful implementations problem, challenge
reusing computation main problem marginal problems algorithms
ADOPT OptAPO, prospect methods avoid welfare loss occur
transfer payments bank.

1. Introduction
Distributed optimization problems model environments set agents must agree
set decisions subject side constraints. consider settings agent
preferences subsets decisions. agents self interested, one would
obtain decision maximizes utility. However, system whole agrees (or
social designer determines) solution selected maximize total utility across
c
2008
AI Access Foundation. rights reserved.

fiP ETCU , FALTINGS , & PARKES

agents. Thus, problem efficient social choice. motivation, mind massively
distributed problems meeting scheduling, decisions
hold meeting, allocating airport landing slots airlines, decisions
airline allocated slot, scheduling contractors construction projects.
One approach solve problems central authority computes optimal solution. combination incentive mechanism Vickrey-Clarke-Groves (VCG)
mechanism (Jackson, 2000), prevent manipulation misreporting preferences. However, many practical settings hard bound problem central
authority feasible. Consider meeting scheduling: agent participates
meetings, general possible find set meetings constraints
meetings thus optimized separately. Similarly, contractors construction
project simultaneously work projects, creating web dependencies hard
optimize centralized fashion. Privacy concerns favor decentralized solutions (Greenstadt,
Pearce, & Tambe, 2006).
Algorithms distributed constraint reasoning, ABT AWC (Yokoo & Hirayama,
2000), AAS (Silaghi, Sam-Haroud, & Faltings, 2000), DPOP (Petcu & Faltings, 2005b)
ADOPT (Modi, Shen, Tambe, & Yokoo, 2005), deal large problems long influence agent solution limited bounded number variables. However,
current techniques assume cooperative agents, provide robustness misreports
preferences deviations algorithm self-interested agents. major limitation.
recent years, faithful distributed implementation (Parkes & Shneidman, 2004) proposed
framework within achieve synthesis methods (centralized) MD distributed
problem solving. Faithfulness ensures agent benefit unilaterally deviating
aspect protocol, neither information-revelation, computation, communication, whatever private information agents. now, distributed implementation applied
lowest-cost routing (Shneidman & Parkes, 2004; Feigenbaum, Papadimitriou, Sami, & Shenker,
2002), policy-based routing (Feigenbaum, Ramachandran, & Schapira, 2006), Internet,
efficient social choice, problem broad applicability.
paper, make following contributions:
show model problem efficient social choice DCOP, adapt
DPOP algorithm exploit local structure distributed model achieve
scalability would possible solving problem centralized problem graph.
provide algorithm whose first stage faithfully generate DCOP representation
underlying social choice problem. DCOP representation generated,
next stages M-DPOP algorithm faithful, form ex post Nash equilibrium
induced non-cooperative game.
establishing DCOP models social choice problems solved faithfully,
observe communication information structure problem
agent prevent rest system, aggregate, correctly determining marginal
impact allowing agents (reported) preferences total utility achieved
agents. provides generality techniques DCOP algorithms.
Part achieving faithfulness requires solving DCOP agents (reported) preferences ignored turn, without agent able interfere computational
706

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

process. provide algorithm robustness property, nevertheless able
reuse, possible, intermediate results computation solving main problem
agents.
experimental analysis, structured meeting scheduling problems common
benchmark literature, demonstrate much 87% computation required
solving marginal problems avoided reuse. Results provided
unstructured resource allocation problems 1 , show M-DPOP sensitive problem
density: loose problems, around 80% computation reused,
decreases highly connected problems.
M-DPOP algorithm defines strategy agent extensive-form game induced
DCOP efficient social choice. particular, M-DPOP algorithm defines messages
agent send, computation agent perform, response messages
received agents. proving M-DPOP forms game-theoretic equilibrium, show
agent benefit unilaterally deviating, whatever utility functions agents
whatever constraints. Although robust dominant strategy equilibrium, (ex
post) equilibrium requires every agent follow algorithm, Parkes Shneidman (2004)
earlier commented appears necessary cost decentralization.
total payment made agent bank always non-negative M-DPOP never
runs deficit (i.e. bank always receives non-negative net payment agents).
settings, transfer utility bank undesirable would best avoided. provide
statistics problem domains studied show loss represent much
35% total utility achieved solution problems studied. payments
cannot naively redistributed back agents without breaking faithfulness, extant work redistribution mechanisms VCG payments suggests mitigated (Guo & Conitzer, 2007;
Faltings, 2004; Cavallo, 2006; Moulin, 2007; Bailey, 1997). defer extension M-DPOP,
details surprisingly involved interesting right, future work.
reuse computation, solving marginal problems agent removed turn,
especially important settings distributed optimization motivating scenarios
problem size massive, perhaps spanning multiple organizations encompassing
thousands decisions. example, consider project scheduling, inter-firm logistics, intra-firm
meeting scheduling, etc. appropriate problem structure, DCOP algorithms problems
scale linearly size problem. instance, DPOP able solve problems
single back-and-forth traversal problem graph. without re-use additional
cost solving marginal problem would make computational cost quadratic rather
linear number agents, could untenable massive-scale applications.
rest paper organized follows: preliminaries (Section 2), Section 3
describe DPOP (Petcu & Faltings, 2005b) algorithm distributed constraint optimization,
focus study. Section 4 introduces model self-interested agents defines
(centralized) VCG mechanism. Section 4.4 provides simple method, Simple M-DPOP make
DPOP faithful serves illustrate excellent fit information communication
structure DCOPs faithful VCG mechanisms. Section 5 describe main algorithm, MDPOP, computation re-used solving marginal problems agent removed
1. consider distributed combinatorial auctions, instances randomly generated using distribution CATS
problem suite (Leyton-Brown & Shoham, 2006).

707

fiP ETCU , FALTINGS , & PARKES

turn. present experimental results Section 6. Section 7 discuss adapting DCOP
algorithms social choice (ADOPT OptAPO, see Section 7.2), waste due
payments Section 7.3. conclude Section 8.
1.1 Related Work
work draws two research areas: distributed algorithms constraint satisfaction optimization, mechanism design coordinated decision making multi-agent systems
self-interested agents. briefly overview relevant results areas.
1.1.1 C ONSTRAINT ATISFACTION



PTIMIZATION

Constraint satisfaction optimization powerful paradigms model wide range
tasks scheduling, planning, optimal process control, etc. Traditionally, problems
gathered single place, centralized algorithm applied find solution. However,
social choice problems naturally distributed, often preclude use centralized entity
gather information compute solutions.
Distributed Constraint Satisfaction (DisCSP) (Yokoo, Durfee, Ishida, & Kuwabara, 1992;
Sycara, Roth, Sadeh-Koniecpol, & Fox, 1991; Collin, Dechter, & Katz, 1991, 1999; Solotorevsky,
Gudes, & Meisels, 1996) Distributed Constraint Optimization (DCOP) (Modi et al., 2005;
Zhang & Wittenburg, 2003; Petcu & Faltings, 2005b; Gershman, Meisels, & Zivan, 2006) formalisms introduced enable distributed solutions. agents involved problems
must communicate find solution overall problem (unknown one
them). Briefly, problems consist individual subproblems (each agent holds subproblem), connected (some of) peers subproblems via constraints limit
individual agent do. goal find feasible solutions overall problem (in
case DisCSP), optimal ones case DCOP.
Many distributed algorithms DCOP introduced, none deals selfinterested agents. well known ones ADOPT, DPOP OptAPO:
ADOPT (Modi et al., 2005) backtracking based, bound propagation algorithm. ADOPT
completely decentralized message passing asynchronous. ADOPT
advantage requiring linear memory, linear-size messages, applicability large
problems 2 questionable due fact produces number messages
exponential depth DFS tree chosen.
OptAPO (Mailler & Lesser, 2005) centralized-distributed hybrid uses mediator nodes
centralize subproblems solve dynamic asynchronous mediation sessions.
authors show message complexity significantly smaller ADOPTs. However, designed cooperative settings, settings self-interested agents
social choice problem, unclear whether agents would agree revealing constraints
utility functions (possibly many) agents, solve partially
centralized subproblems.
DPOP (Petcu & Faltings, 2005b) complete algorithm based dynamic programming
generates linear number messages. DPOP, size messages depends
2. largest ADOPT experiments aware comprise problems around 20 agents 40 variables.

708

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

structure problem: largest message exponential induced width
problem (see Section 3.1.4) ADOPT, DPOP maintains full distribution
problem. features suggest DPOP good foundation efficient distributed
implementation VCG-based mechanism social choice problems.
discussion features algorithms applicability social choice
problems provided Section 7. paper, focus DPOP provide appropriate
modifications payments effective environments self-interested agents.
Section 7.2 provide brief discussion opportunites challenges
applying methodology ADOPT OptAPO.
1.1.2 ECHANISM ESIGN



ISTRIBUTED MPLEMENTATION

long tradition using centralized incentive mechanisms within Distributed AI, going
back least work Ephrati Rosenschein (1991) considered use VCG
mechanism compute joint plans; see work Sandholm (1996) Parkes et al. (2001)
recent discussions. noteworthy work Rosenschein Zlotkin (1994, 1996)
rules encounter, provided non-VCG based approaches task allocation systems
two agents.
hand, known methods distributed problem solving
presence self-interested agents. example, RACO N ET (Sandholm, 1993) improved
upon C ONTRACT N ET system (Davis & Smith, 1983) negotiation-based, distributed task reallocation, providing better economic realism, RACO N ET nevertheless studied simple,
myopically-rational agent behaviors performance game-theoretic agents never analyzed; remains true recent works (Endriss, Maudet, Sadri, & Toni, 2006; Dunne,
Wooldridge, & Laurence, 2005; Dunne, 2005). Similarly, Wellmans work market-oriented programming (Wellman, 1993, 1996) considers role virtual markets support optimal
resource allocation, developed model price-taking agents (i.e. agents treat
current prices though final), rather game-theoretic agents.
first step providing satisfactory synthesis distributed algorithms MD
provided agenda distributed algorithmic mechanism design (DAMD), due work
Feigenbaum colleagues (Feigenbaum et al., 2002; Feigenbaum & Shenker, 2002).
authors (FPSS) provided efficient algorithm lowest-cost interdomain routing Internet,
terminating optimal routes payments VCG mechanism. up-shot
agents case autonomous systems running network domains could benefit misreporting information transit costs. missing analysis consideration
robustness algorithm manipulation. Distributed implementation (Parkes
& Shneidman, 2004) introduces additional requirement. algorithm faithful agent
cannot benefit deviating required actions, including information-revelation, computation message passing. number principles achieving faithfulness ex post Nash
equilibrium provided Parkes Shneidman (2004). careful incentive design small
amount cryptography able remove remaining opportunities manipulation
lowest-cost routing algorithm FPSS. Building this, Feigenbaum et al. (2006) recently provide faithful method policy-based interdomain routing, better capturing typical business
agreements Internet domains.
709

fiP ETCU , FALTINGS , & PARKES

first work achieve faithfulness general DCOP algorithms, demonstrated
via application efficient social choice. work, Monderer Tennenholtz (1999) consider distributed single item allocation problem, focus (faithful) communication
provide distributed computation. Izmalkov et al. (2005) adopt cryptographic primitives
ballot boxes show convert centralized mechanisms DI fully connected
communication graph. interest demonstrating theoretical possibility ideal mechanism design without trusted center. work different focus: seek computational
tractability, require fully connected communication graphs, make appeal cryptographic primitives. hand, content retain desired behavior equilibrium
(remaining consistent MD literature) Izmalkov et al. avoid introduction
additional equilibria beyond exist centralized mechanism.
briefly mention two related topics. note well established literature iterative
VCG mechaisms (Mishra & Parkes, 2007; Ausubel, Cramton, & Milgrom, 2006; Bikhchandani,
de Vries, Schummer, & Vohra, 2002). provide partially distributed implementation
combinatorial allocation problems, center typically issuing demand queries agents
via prices, prices triggering computation part agents generating demand set
response. auctions often interpreted decentralized primal-dual algorithms (Parkes
& Ungar, 2000; de Vries & Vohra, 2003). setting differs remains center
performs computation, solving winner determination problem round, agent
communicates directly center peer-to-peer. Mualem (2005) initiates orthogonal
direction within computer science related topic Nash implementation (Jackson, 2001)
economics, approach relies information part private part common knowledge,
one agent entirely private information preferences.

2. Preliminaries: Modeling Social Choice
assume social choice problem consists finite possibly large number decisions
made time. decision modeled variable take
values discrete finite domain. agent private information variables
places relations. relation associated agent defines utility agent
possible assignment values variables domain relation. may
hard constraints restrict space feasible joint assignments subsets variables.
Definition 1 (Social Choice Problem - SCP) efficient social choice problem modeled
tuple < A, X , D, C, R > that:
X = {X1 , ..., Xm } set public decision variables (e.g. hold
meetings, resources allocated, etc);
= {d1 , ..., dm } set finite public domains variables X (e.g. list possible
time slots venues, list agents eligible receive resource, etc);
C = {c1 , ..., cq } set public constraints specify feasible combinations values
variables involved. constraint cj function cj : dj1 .. djk {, 0}
returns 0 allowed combinations values involved variables,
disallowed ones. denote scope(cj ) set variables associated constraint cj ;
710

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

= {A1 , ..., } set self-interested agents involved optimization problem;
X(Ai ) X (privately known) 3 set variables agent Ai interested
relations.
R = {R1 , ..., Rn } set private relations, Ri set relations specified
agent Ai relation rij Ri function rij : dj1 .. djk R specified agent
Ai , denotes utility Ai receives possible values involved variables
{j1 , . . . , jk } (negative values mean costs). denote scope(rij ) domain variables
rij defined on.
private relations agent may, themselves, induced solution local optimization problems additional, private decision variables additional, private constraints.
kept local agent part SCP definition.
optimal solution SCP complete instantiation X variables X , s.t.
X
X
Ri (X) +
cj (X),
(1)
X arg max
XD

i{1,..,n}

cj C

rj (X) agent Ai total utility assignment X. natural
Ri (X) =
rij Ri
problem social choice: goal find solution maximizes total utility agents,
respecting hard constraints; notice second sum X infeasible precludes
outcome. assume throughout feasible solution. introducing VCG
mechanism require solution SCP influence agents relations
removed turn. this, let SCP (A) denote main problem
Eq. (1)
Pand SCP (Ai ) denote
P
marginal problem without agent Ai , i.e. maxXD j6=i Rj (X) + cj C cj (X). Note
decision variables remain. difference SCP (A) SCP (Ai )
preferences agent Ai ignored solving SCP (Ai ).
variable Xj , refer agents Ai Xj X(Ai ) forming community
Xj . choose emphasize following assumptions:
P

agent knows variables interested, together domain
variable hard constraints involve variable.
decision variable supported community mechanism allows interested
agents report interest learn other. example, mechanism
implemented using bulletin board.
constraint cj C, every agent Ak community Xl scope(cj ), i.e.
Xl X(Ak ), read membership lists communities Xm scope(cj )
Xm 6= Xl . words, every agent involved hard constraint knows
agents involved hard constraint.
agent communicate directly agents communities
member, agents involved shared hard constraints.
communication agents required.
3. Note private knowledge variables interest requirement; algorithms present work
public private knowledge variables interest. required agents interested
variable know - see assumptions below.

711

fiP ETCU , FALTINGS , & PARKES

Figure 1: operator placement problem: (a) centralized model (each variable server load possible
values feasible combinations services run server , edges correspond
relations represent agent preferences). (b) decentralized (DCOP) model replicated
variables. agent local replica variables interest inter-agent edges denote
equality constraints ensure agreement. preferences modeled relations hyperedges local respective agents.

Section 4 establish step identifying SCP, via community mechanism, faithful self-interested agents choose volunteer communities
member (and communities.)
2.1 Modeling Social Choice Constraint Optimization
first introduce centralized, constraint optimization problem (COP) model efficient social choice problem. model represented centralized problem graph. Given this,
model distributed constraint optimization problem (DCOP), along associated
distributed problem graph. distributed problem graph makes explicit control structure
distributed algorithm ultimately used multi-agent system solve problem.
sections illustrated reference overlay network optimization problem (Huebsch,
Hellerstein, Lanham, et al., 2003; Faltings, Parkes, Petcu, & Shneidman, 2006; Pietzuch, Ledlie,
Shneidman, Roussopoulos, Welsh, & Seltzer, 2006):
OVERLAY N ETWORK PTIMIZATION Consider problem optimal placement data aggregation processing operators overlay network large-scale sensor network (Huebsch
et al., 2003; Pietzuch et al., 2006). application, multiple users multiple servers.
user associated query client machine located particular node
overlay network. query associated set data producers, known user located
712

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

nodes network. query requires set data aggregation processing operators, placed server nodes nodes data producers
users node. user assigns utility different assignments operators servers represent preferences different kinds data aggregation. Examples in-network operators
data aggregation include database style join operators; e.g., user may desire volcano data X
earthquake data joined sent them. address this, specific operator call
VolcanoXEarthquakeY Join created put network. Naturally, user prefers
operators placed best servers network, without regard costs incurred, overloading servers, denying service users, etc. problem find optimal
allocation operators servers, subject capacity compatibility constraints.
Faltings et al. (2006) model problem one efficient social choice. distributed algorithm, executed user clients situated network nodes, used determine assignment
data aggregation processing operators server nodes.
2.1.1 C ENTRALIZED COP ODEL ULTI G RAPH
Viewed centralized problem, SCP defined constraint optimization problem
multigraph, i.e. graph several distinct edges connect set nodes. denote
COP (A), provide illustration Figure 1(a). decision variables nodes,
relations defined subsets variables form edges multigraph; hyperedges connect
two vertices case relation involving two variables.
multiple edges involve set variables, edge corresponding
relations distinct agent set variables. hard constraints represented
edges graph.
Example 1 (Centralized Model Overlay Optimization) example Figure 1(a) contains
3 users Ai 3 servers Sj . simplicity reasons, assume user Ai one single operator oi want executed server. According prerequisites compatibility
issues, assume S1 execute o1 o2 , o3 . Similarly, assume S2 execute
o2 o3 , o1 , S3 execute combination two three operators. Agents preferences operators executed (e.g. proximity
data sources, computational capabilities servers, cost electricity, etc). example, A1
extracts utility 10 o1 executed S1 , utility 5 o1 executed S3 .
model problem optimization problem, use following:
1. variables: server Si , create variable Si denotes set operators Si
execute.
2. values: variable Si take values set possible combinations operators
server execute. example, S1 = {null, o1 , o2 , o1 + o2 }, null means
server executes operator, oi executes operator oi , o1 + o2 executes
o1 o2 .
3. constraints: restrict possible combinations assignments. Example: two servers
execute operator.
4. relations: allow agents express preferences combinations assignments. A1 models
preference placement o1 using relation r10 , defined variables S1
713

fiP ETCU , FALTINGS , & PARKES

S3 . relation associates utility value combination assignments S1
S3 (in total 4 8 = 32 combinations) follows:
0 combinations o1 executed neither S1 , S3 (e.g. hS1 = o2 , S3 =
o3 i)
10 combinations o1 executed S1 (e.g. hS1 = o1 , S3 = o2 + o3 i)
5 combinations o1 executed S3 (e.g. hS1 = o2 , S3 = o1 i)
depict variables nodes graph, constraints relations (hyper)edges (see
Figure 1(a)). problem get arbitrarily complex, multiple operators per agent, groups
servers able execute certain groups compatible operators, etc.
2.1.2 ECENTRALIZED COP (DCOP) ODEL U SING R EPLICATED VARIABLES
useful define alternate graphical representation SCP, centralized problem
graph replaced distributed problem graph. distributed problem graph direct correspondence DPOP algorithm solving DCOPs. denote DCOP (A) problem
agents included, corresponds main social choice problem, SCP (A). Similarly,
DCOP (Ai ) problem agent Ai removed, corresponds SCP (Ai ).
distributed model, agent local replica variables interested.4
public variable, Xv X(Ai ), agent Ai interested, agent local replica, denoted
Xvi . Agent Ai models local problem COP (X(Ai ), Ri ), specifying relations rij Ri
locally replicated variables.
Refer Figure 1(b) translation centralized problem Figure 1(a) DCOP
model. agent local variables loads servers interest itself, i.e.
servers execute one operators (e.g. S12 represents A2 local replica variable
representing server S1 ). Local edges correspond local all-different constraints agents
variables ensure execute operator several servers time. Equality
constraints local replicas value ensure global agreement operators
run servers.
Agents specify relations via local edges local replicas. example, agent A1
relation load servers S1 S3 express preference placement
operator o1 relation r10 , assign e.g. utility 5 S3 executing o1 , utility 10 S1
executing o1 .
begin understand potential manipulation self-interested agents
example. Notice although globally optimal solution may require assigning o1 S3 ,
less preferable A1 , providing utility 5 instead 10. Therefore, absence incentive
mechanism, A1 could benefit simple manipulation: declare utility + hS1 = o1 i, thus
changing final assignment suboptimal one nevertheless better itself.
4. alternate model designates owner agent decision variable. owner agent would centralize
aggregate preferences agents interested variable. Subsequently, owner agents would use
distributed optimization algorithm find optimal solution. model limits reusability computation
main problem solving marginal problems agent removed turn excluding
owner agent variable, one needs assign ownership another agent restart computational process
regards variable connected variables. reuse computation important making M-DPOP
scalable. approach disaggregated facilitates greater reuse.

714

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

neighborhood local copy Xvi variable composed three kinds variables:
Neighbors(Xvi ) = Siblings(Xvi ) Local neighbors(Xvi ) Hard neighbors(Xvi ).

(2)

siblings local copies Xv belong agents Aj 6= Ai interested Xv :
Siblings(Xvi ) = {Xvj | Aj 6= Ai Xv X(Aj )}

(3)

siblings Xvi connected pairwise equality constraint. ensures
agents eventually consistent value variable. second set variables
local neighbors Xvi local optimization problem Ai . local copies
variables agent Ai interested in, connected Xvi via relations Ai local
problem:
Local neighbors(Xvi ) = {Xui | Xu X(Ai ), rij Ri s.t. Xui scope(ri )}

(4)

must consider set hard constraints contain scope variable Xv
public variables: Hard (Xv ) = {cs C|Xv scope(cs )}. constraints connect
Xv variables Xu appear scope, may interest
agents well. Consequently, Xvi connected local copies Xtj
variables Xt appear hard constraints:
Hard neighbors(Xvi ) = {Xtj |cs Hard (Xv ) s.t. Xt scope(cs ), Xt X(Aj )}

(5)

general, agent private variables, relations constraints involve
private variables, link public decision variables. example, consider meeting
scheduling application employees company. Apart work-related meetings
schedule together, one employees personal items agenda, appointments doctor, etc. Decisions values private variables information
local relations constraints remain private. provide additional complications
discussed paper.
2.2 Example Social Choice Problems
continuing present main results describe three additional problems social choice
serve motivate work. fact, problem efficient social choice fundamental
microeconomics political science (Mas-Colell, Whinston, & Green, 1995). problem
present large scale distributed, involves actors system businesses
cannot expected cooperate, either revealing preferences following rules
distributed algorithm.
IRPORT LOT LLOCATION . airports become congested, governments turning
market-based approaches allocate landing takeoff slots. instance, U.S. Federal Aviation Administration recently commisioned study use auction allocate slots
New Yorks congested LaGuardia airport (Ball, Donohue, & Hoffman, 2006). problem large
scale expands include airports throughout U.S., eventually World, exhibits
self-interest (airlines profit-maximizing agents private information utilities
715

fiP ETCU , FALTINGS , & PARKES

different slot allocations), one privacy major concern competitiveness airline industry. typical policy goal maximize total utility allocation,
i.e. one efficient social choice. problem motivates study combinatorial auctions
Section 6. combinatorial auction (CA) one set heterogeneous, indivisible goods
allocated agents, values expressed sets goods; e.g., want
9am slot get 10am slot indifferent 9am 9:05am slot.
airport slot allocation problem motivated first paper CAs (Rassenti, Smith, & Bulfin,
1982), recognized airlines would likely need express utilities sets slots
correspond right fly schedule airport.
PEN -ACCESS W IRELESS N ETWORKS . wireless spectrum today owned operated
closed networks, example cellular companies T-Mobile AT&T. However
plenty debate creating open-access wireless networks bandwidth must available
use phone software.5 recently proposed using auction protocol
allow service providers bid dynamic auction right use spectrum given period
time deliver services.6 Taken logical conclusion, idea anticipated Rosenschein
Zlotkin (1994) wired telephony, suggests secondary market wireless spectrum
corresponds problem efficient social choice: allocate spectrum maximize total utility
consumers. problem large scale, exhibits self-interest, inherently decentralized.
EETING CHEDULING P ROBLEM . Consider large organization dozens departments, spread across dozens sites, employing tens thousands people. Employees
different sites departments want setup thousands meetings week. Due privacy
concerns among different departments, centralized problem solving desirable. Furthermore,
although organization whole desires minimize cost whole process, department employee self interested wishes maximize utility. artificial
currency created purpose weekly assignment made employee. Employees
express preferences meeting schedules units currency.
Refer Figure 2 example problem, 3 agents want setup 3 meetings.
Figure 2(b) shows agent local variables time slots corresponding meetings
participates (e.g. M12 represents A2 local replica variable representing meeting M1 ).
Local edges correspond local all-different constraints agents variables ensure
participate several meetings time. Equality constraints local
replicas value ensure global agreement. Agents specify relations via local edges
local replicas. example, agent A1 relation time meeting M1 express
preference meeting later day relation r10 , assign low utilities morning
time slots high utilities afternoon time slots. Similarly, A2 prefers holding meeting M2
meeting M1 , use local relation r20 assign high utilities satisfactory
combinations timeslots low utility otherwise. example, hM1 = 9AM, M2 = 11AM
gets utility 10, hM1 = 9AM, M2 = 8AM gets utility 2.
5. breakthrough ruling, U.S. Federal Communications Commission (FCC) require open access
around one-third spectrum auctioned early 08.
stopped short mandating spectrum made available wholesale market would service providers.
See
http://www.fcc.gov/073107/700mhz news release 073107.pdf
6. Google proposed auction filing made FCC May 21st, 2007.
See
http://gullfoss2.fcc.gov/prod/ecfs/retrieve.cgi?native pdf=pdf&id document=6519412647.

716

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Figure 2: meeting scheduling problem. (a) centralized model (each vertex meeting variable, red
edges correspond hard constraints non-overlap meetings share participant (that
agent A2 hyperedge particpates every meeting), blue edges correspond
relations represent agent preferences). (b) decentralized (DCOP) model replicated
variables. agent local replica variables interest inter-agent edges denote
equality constraints ensure agreement. hard constraint non-overlap meetings
M1 , M2 M3 local hyperedge agent A2 . (c) DFS arrangement decentralized
problem graph. Used DPOP algorithm control order problem solving.

experimental results presented Section 6 adopt meeting scheduling prototypical
structured social choice problems problem instances associated organizational
hierarchy. Meeting scheduling introduced Section 2.1. second set experiments
consider combinatorial auctions (CAs), agents bid bundles goods,
consider set problem instances unstructured provide comparison point
meeting scheduling. CAs provide nice abstraction kinds allocation problems exist
airport wireless network domains.

3. Cooperative Case: Efficient Social Choice via DPOP
section, review DPOP (Petcu & Faltings, 2005b), general purpose distributed
optimization algorithm. DPOP (Distributed Pseudotree Optimization Protocol) based dynamic
programming adapts Dechters (Dechter, 2003) general bucket elimination scheme distributed case. main advantage generates linear number messages.
contrast optimization algorithms ADOPT (Modi et al., 2005) ensures minimal network overhead produced message exchange. hand, concern DPOP
size individual messages since grows exponentially parameter constraint graph
called induced width (see Section 3.1.4). Nevertheless, problems exhibit local structure,
DPOP typically scales much larger problems, orders magnitude efficient,
717

fiP ETCU , FALTINGS , & PARKES

techniques (Petcu & Faltings, 2005b, 2007). simplify exposition, first illustrate
DPOP general DCOP context, show instantiate DPOP social choice problems. particular, explain leverage structure provided local replicas. consider
cooperative agents throughout section.
3.1 DPOP Algorithm DCOPs
section presents DPOP algorithm generic DCOPs. simplify exposition,
assume section agent Ai represents single variable Xi ,
constraint graph given.
DPOP composed three phases:
Phase one constructs DFS arrangement, DFS (A), defines control flow message passing computation DPOP.
Phase two bottom-up utility propagation along tree constructed phase 1.
phase utilities different values variables aggregated reflect optimal decisions
made subtrees rooted node tree.
Phase three top-down value assignment propagation along tree constructed phase
1. phase decisions made based aggregate utility information phase 2.
describing phases refer Figure 3 running example. introduce
explicit numerical example illustrate phases two three detail.
3.1.1 DPOP P HASE NE : DFS REE G ENERATION
first phase performs depth-first search (DFS) traversal problem graph, thereby constructing DFS arrangement problem graph. DFS arrangement subsequently used
provide control flow DPOP guide variable elimination order. underlying problem graph tree DFS arrangement tree. general, DFS arrangement
graph define union set tree edges additional back edges, connect
nodes ancestors.7
Definition 2 (DFS arrangement) DFS arrangement graph G defines rooted tree
subset edges (the tree edges) remaining edges included back edges. tree
edges defined adjacent nodes G fall branch tree.
Figure 3 shows example DFS arrangement. tree edges shown solid lines (e.g.
1 3) back edges shown dashed lines (e.g. 12 2, 4 0). Two nodes Xi Xv
said branch DFS arrangement path higher node
lower node along tree edges; e.g., nodes X0 X11 Figure 3. DFS arrangements already
investigated means boost search constraint optimization problems (Freuder & Quinn,
1985; Modi et al., 2005; Dechter & Mateescu, 2006). advantage allow algorithms
exploit relative independence nodes lying different branches DFS arrangement
7. simplicity, assume follows original problem connected. However difficulty
applying DPOP disconnected problems. DFS arrangement becomes DFS forest, agents
connected component simply execute DPOP parallel separate control thread. solution overall
problem union optimal solutions independent subproblem.

718

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Figure 3: DFS arrangement problem graph. Tree edges shown solid back edges
dashed. DFS arrangement constructed initializing token-passing X0 . k-ary
constraints, C4 , treated cliques.

(i.e. nodes direct descendants ancestors one-another), possible
perform search parallel independent branches combine results.
introduce definitions related DFS arrangements:
Definition 3 (DFS concepts) Given node Xi DFS arrangement, define:
parent Pi / children Ci : Xi ancestor/descendants connected Xi via tree-edges (e.g.
P4 = X1 , C4 = {X9 , X10 }).
pseudo-parents PP : Xi ancestors connected Xi via back-edges (PP 5 = {X0 }).
pseudo-children PC : Xi descendants connected Xi via back-edges (e.g. PC 1 =
{X8 }).
separator Sep Xi : ancestors Xi directly connected Xi descendants Xi (e.g. Sep 3 = {X1 } Sep 11 = {X0 , X2 , X5 }).
tree neighbors TN Xi nodes linked Xi via tree edges, TN = Pi Ci
(e.g. TN 4 = {X1 , X9 , X10 }).
Removing nodes Sep completely disconnects subtree rooted Xi rest
problem. case problem tree, Sep = {Pi }, Xi X . general case, Sep
contains Pi , PP pseudoparents descendants Xi pseudoparents
ancestors Xi . example, Figure 3, separator node X4 contains parent X1 ,
pseudoparent X0 . necessary sufficient values variables {X0 , X1 }
set problem rooted node X4 independent rest problem. Separators
play important role DPOP contingent solutions must maintained propagating
utility information DFS arrangement different possible assignments separator variables.
Constructing DFS Tree Generating DFS trees distributed manner task
received lot attention, many algorithms available: example Collin
Dolev (1994), Barbosa (1996), Cidon (1988), Cheung (1983) name few. purposes executing DPOP, assume example algorithm Cheung (1983),
briefly outline below. instantiate DPOP SCPs, present adaptation
DFS generation algorithm exploit particulars SCP.
simple DFS construction algorithm starts agents labeling internally neighbors
not-visited. One agents graph designated root, using example leader
719

fiP ETCU , FALTINGS , & PARKES

election algorithm Abu-Amara (1988),8 simply picking agent
lowest ID. root initiates propagation token, unique message
circulated agents graph, thus visiting them. Initially, token contains
ID root. root sends one neighbors, waits return sending
one (still) unvisited neighbors. agent Xi first receives token, marks
sender parent. neighbors Xi contained token marked Xi pseudoparents
(PP ).
this, Xi adds ID token, sends token turn one notvisited neighbors Xj , become children. Every time agent receives token one
neighbors, marks sender visited. token return either Xj (the child
Xi sent first place), another neighbor, Xk . latter case, means
cycle subtree, Xk marked pseudochild.
dead end reached, last agent backtracks sending token back parent.
neighbors marked visited, Xi finished exploring subtree. Xi removes
ID token, sends token back parent; process finished Xi .
root marked neighbors visited, entire DFS construction process over.
Handling Non-binary Constraints. special treatment required construct neighbors
variable correspond k-ary constraints, k > 2. example, Figure 3 (left),
4-ary constraint C4 involving {X0 , X2 , X5 , X11 }. Eq. 2, implies {X0 , X2 , X5 , X11 }
neighbors, DFS construction process appear along branch
tree. produces result Figure 3 (right).
3.1.2 DPOP P HASE WO : UTIL P ROPAGATION (I NFERENCE )
Phase two bottom-to-top pass DFS arrangement utility information aggregated
propagated leaves towards root node parent tree edges
back edges. high level, leaves start computing sending UTIL messages
parents, UTIL message informs parent local utility solutions
rest problem, minimally specified terms local utility different value assignments
separator variables. Subsequently node propagates UTIL message represents
contingent utility subtree rooted node assignments values separator variables.
detail, nodes perform following steps:
1. Wait UTIL messages children, store them.
2. Perform aggregation: join messages children, relations
parents pseudoparents.
3. Perform optimization: project resulting join picking optimal
values combination values variables join.
4. Send result parent new UTIL message.
8. cases problem initially disconnected, required choose multiple roots, one connected component. standard leader election algorithm, executed agents problem, elect
exactly many leaders connected components.

720

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

UTIL message sent node Xi parent Pi multidimensional matrix informs
Pi much utility, ui (Sep ) subtree rooted Xi receives different assignments values
variables define separator Sep subtree. One variables, definition,
variable managed parent Pi . UTIL message already represents result optimization,
variables local subtree optimized different assignments separator
variables. compute UTIL message node uses two operations: aggregation optimization.
Aggregations apply JOIN operator optimizations apply PROJECT operator described
Petcu Faltings (2005b), briefly summarized here.
Let UTILij UTILkj denote UTIL messages sent nodes Xi Xk parent
node Xj . denote dim(UTILkj ) set dimensions matrix, i.e. set
variables separator sending node Xk . Assuming Xj node receiving messages,
define:
Definition 4 (JOIN operator) operator (join): UTILij UTILkj join two
UTIL matrices. matrix dim(UTILij ) dim(UTILkj ) dimensions.
value cell join sum corresponding cells two source matrices.
Definition 5 (PROJECT operator) operator (projection): Xj dim(UTILij ),
UTILij Xj projection optimization UTILij matrix along Xj axis:
instantiation variables {dim(UTILij ) \ Xj }, corresponding values
UTILij (one value Xj ) tried, maximal one chosen. result matrix
one less dimension (Xj ).
Notice subtree rooted Xi influenced rest problem Xi
separator variables. Therefore, UTIL message contains optimal utility obtained subtree
instantiation variables Sep separator size plays crucial role bounding
message size.
Example 2 (UTIL propagation) Figure 4 shows simple example UTIL propagation.
problem tree structure (Figure 4(a)), 3 relations r31 , r21 , r10 detailed Figure 4(b).
relations variables (X3 , X1 ), (X2 , X1 ) (X1 , X0 ) respectively.
individual variables local replicas. UTIL phase X2 X3 project r21 r31 , respectively. results highlighed cells r21 r31 Figure 4(b).
instance, optimal value X2 given X1 := assign X2 := c utility
5. projections define UTIL messages send X1 . X1 receives messages X2
X3 , joins together relation X0 (adds utilities messages
corresponding cells r10 ). projects join. instance, optimal value
X1 given X0 := b X1 := 2 + 5 + 6 max{3 + 4 + 4, 3 + 6 + 3}. result
depicted Figure 4(d). UTIL message X0 receives X1 . value
message represents total utility entire problem value X0 . return
example context third phase value propagation.
Non-binary Relations Constraints. binary constraints/relations, k-ary constraint
introduced UTIL propagation once, lowest node DFS arrangement
part scope constraint. example, Figure 3, constraint C4 introduced
UTIL propagation once, X11 , computing message parent, X5 .
721

fiP ETCU , FALTINGS , & PARKES

Figure 4: Numerical example UTIL propagation. (a) simple DCOP problem three
relations r31 , r21 r10 (X3 , X1 ), (X2 , X1 ) (X1 , X0 ) respectively. (b) Projections
X2 X3 relations X1 . results sent X1 UTIL21 , UTIL31
respectively. (c) X1 joins UTIL21 UTIL31 relation X0 . (d) X1 projects
join sends result X0 .

3.1.3 DPOP P HASE HREE : VALUE P ROPAGATION
Phase three top-to-bottom pass assigns values variables, decisions made recursively
root leaves. VALUE propagation phase initiated root agent
X0 received UTIL messages children. Based UTIL messages,
root assigns variable X0 value v maximizes sum utility
communicated subtrees. sends VALUE(X0r v ) message every child.
process continues recursively leaves, agents Xi assigning optimal values
variables. end phase, algorithm finishes, variables assigned
optimal values.
Example 3 (Value propagation) Return example Figure 4. X0 receives UTIL
message node X1 simply choose value X0 produces largest utility
whole problem: X0 = (X0 = X0 = c produce result example, either one
chosen). value-assignment propagation phase X0 informs X1 choice via
message VALUE (X0 a). Node X1 assigns optimal value X1 = c process continues
message V ALU E(X1 c) sent children, X2 X3 . children assign X2 = b
X3 = algorithm terminates optimal solution hX0 = a, X1 = c, X2 = b, X3 = ai
total utility 15.
3.1.4 C OMPLEXITY NALYSIS DPOP
DPOP produces number messages scales linearly size problem graph, i.e.
linearly number nodes edges DCOP model (Petcu & Faltings, 2005b).
complexity DPOP lies size UTIL messages (note tokens passed around
722

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

constructing DFS(A) VALUE messages size linear problem graph). Petcu
Faltings (2005b) show size largest UTIL message exponential parameter
called induced width (Kloks, 1994; Dechter, 2003).
induced width, denoted w, constraint graph given chosen DFS arrangement
structural parameter equals size largest separator node DFS arrangement
(see Definition 3.):
w = max |Sep |.
Xi X

(6)

example Figure 3, induced width graph given particular DFS ordering
w = 3, given Sep11 = {X0 , X2 , X5 }. Intuitively, problem tree-like structure,
lower induced width. particular, problem graph tree induced
width equal 1 DFS arrangement always tree. Problem graphs cliques,
hand, induced width equal number nodes minus 1, irrespective
DFS-tree arrangement.
Proposition 1 (DPOP Complexity) (Petcu & Faltings, 2005b) number messages passed
DPOP 2m, (n 1) (n 1) phases one, two three respectively, n
number nodes edges DCOP model replicated variables. maximal number
utility values computed node DPOP O(Dw+1 ), largest UTIL message
O(Dw ) entries, w induced width DFS ordering used.
case trees, DPOP generates UTIL messages dimension equal domain size
variable defining parent node. case cliques, maximal message size
DPOP exponential n 1. DFS arrangements yield width, desirable
construct DFS arrangements provide low induced width. However, finding tree arrangement
lowest induced width NP-hard optimization problem (Arnborg, 1985). Nevertheless,
good heuristics identified finding tree arrangements low width (Kloks, 1994;
Bayardo & Miranker, 1995; Bidyuk & Dechter, 2004; Petcu & Faltings, 2007, 2005b). Although
designed explored centralized context, (notably max-degree
maximum cardinality set) easily amenable distributed environment.
3.2 DPOP Applied Social Choice Problems
section, instantiate DPOP efficient social choice problems. Specifically, first show
optimization problem constructed agents preferences potential variables
interest. Subsequently, show changes make DPOP adapt SCP domain.
prominent adaptation exploits fact several variables represent local replicas
variable, treated UTIL VALUE phases.
adaptation improves efficiency significantly, allows complexity claims stated terms
induced width centralized COP problem graph rather distributed COP problem
graph (see Section 3.2.5).
3.2.1 NITIALIZATION : C OMMUNITY F ORMATION
initialize algorithm, agent first forms communities around variables interest,
X(Ai ), defines local optimization problem COP (X(Ai ), Ri ) replicated variable Xvi
723

fiP ETCU , FALTINGS , & PARKES

Xv X(Ai ). Shorthand Xvi COP denotes agent Ai local replica variable
Xv . agent owns multiple nodes conceptualize node associated virtual agent operated owning agent. virtual agent responsible
associated variable.
agents subscribe communities interested, learn
agents belong communities. Neighboring relations established local variable
according Eq. 2, follows: agents community Xv connect corresponding local
copies Xv equality constraints. so, local problems COP (X(Ai ), Ri )
connected according interests owning agents. Local relations
COP (X(Ai ), Ri ) connect corresponding local variables. Hard constraints connect local copies
variables involve. Thus, overall problem graph formed.
example, consider Figure 2(b). decision variables start times three
meetings. agent models local optimization problem creating local copies variables
interested expressing preferences local relations. Formally, initialization
process described Algorithm 1.
Algorithm 1: DPOP init: community formation building DCOP (A).
DPOP init(A, X , D, C, R):
1 agent Ai models interests COP (X(Ai ), Ri ): set relations Ri imposed
set X(Ai ) variables Xvi replicate public variable Xv X(Ai )
2 agent Ai subscribes communities Xv X(Ai )
3 agent Ai connects local copies Xvi X(Ai ) corresponding local copies
agents via equality constraints

3.2.2 DFS RAVERSAL
method DFS traversal described Algorithm 2. algorithm starts choosing one
variables, X0 , root. done randomly, example using distributed algorithm
random number generation, leader election algorithm Ostrovski (1994), simply
picking variable lowest ID. agents involved community X0 randomly
choose one them, Ar leader. local copy X0r variable X0 becomes root
DFS. Making assumption virtual agents act behalf variable problem,
functioning token passing mechanism similar described Section 3.1.1,
additional consideration given community structure. root chosen, agents
participate distributed depth-first traversal problem graph. convenience, describe
DFS process token-passing algorithm members within community observe
release pick token agents. neighbors node sorted (in
line 7) prioritize copies variables held agents, local variables,
finally variables linked hard constraints.
Example 4 Consider meeting scheduling example Figure 2. Assume M3 chosen
start community A2 chosen within community leader. A2 creates empty
token DFS = adds M32 ID token (DFS = {M32 }). Eq. 2, Neighbors(M32 ) =
{M33 , M31 , M12 , M22 }. A2 sends token DFS = {M32 } first unvisited neighbor
724

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Algorithm 2: DPOP Phase One: DFS construction.
Inputs: Ai knows COP , Neighbors(Xvi ), Xvi COP
Outputs: Ai knows P (Xvi ), PP (Xvi ), C(Xvi ), PC (Xvi ), Xvi COP .
1
2
3

4
5
6
7

8
9
10

Procedure Initialization
agents choose one variables, X0 , root.
Agents X0 community elect leader, Ar .
Ar initiates token passing X0r construct DFS
Procedure Token Passing (performed virtual agent Xvi COP )
Xvi root P (Xvi ) = null; create empty token DFS :=
else DFS :=Handle incoming tokens()
Let DFS := DFS {Xvi }
Sort Neighbors(Xvi ) Siblings(Xvi ), Local neighbors(Xvi ),
Hard neighbors(Xvi ). Set C(Xvi ) := null.
forall Xl Neighbors(Xvi ) s.t. Xl visited yet
C(Xvi ) := C(Xvi ) Xl . Send DFS Xl wait DFS token return.
Send DFS token back P (Xvi ).
Procedure Handle incoming tokens() //run virtual agent Xvi COP

11
12
13
14

15

Wait incoming DFS message; let Xl sender
Mark Xl visited.
first DFS message (i.e. Xl parent)
P (Xvi ) := Xl ; PP (Xvi ) := {Xk 6= Xl |Xk Neighbors(Xvi ) DFS }; PP (Xvi ) :=
else
Xl
/ C(Xvi ) (i.e. DFS coming pseudochild)
PC (Xvi ) := PC (Xvi ) Xl

list, i.e. M33 , belongs A3 . A3 receives token adds copy M3 (now DFS =
{M32 , M33 }). A3 sends token M33 first unvisited neighbor, M31 (which belongs A1 ).
Agent A1 receives token adds copy M3 (now DFS = {M32 , M33 , M31 }).
M31 neighbor list Neighbors(M31 ) = {M32 , M33 , M11 }. Since token A1 received
already contains M32 M33 , means already visited. Thus, next variable
visit M11 , happens variable belongs A1 . token passed
M11 internally (no message exchange required), M11 added token (now DFS =
{M32 , M33 , M31 , M11 }).
process continues, exploring sibling variables community turn, passing another community, on. Eventually replicas variable arranged
chain equality constraints (back-edges) predecessors replicas
variable. dead end reached, last agent backtracks sending token back
parent. example, happens A3 receives token A2 M2 community.
Then, A3 sends back token A2 on. Eventually, token returns path
way root process completes.
725

fiP ETCU , FALTINGS , & PARKES

3.2.3 H ANDLING



P UBLIC H ARD C ONSTRAINTS .

Social choice problems, defined Definition 1 contain side constraints, form publicly known hard constraints, represent domain knowledge resource allocated
once, hotel accomodate 100 people, person one meeting
time. etc. constraints owned agent, available agents
interested variable involved domain constraint. Handling constraints
essentially unchanged handling non-binary constraints standard DPOP, described
Section 3.1.1 DFS construction phase, Section 3.1.2 UTIL phase. Specifically:
DFS Construction: Neighboring relationships defined Eq. 2 require local variable
local copies share hard constraint considered neighbors.
prioritization line 7 Algorithm 2 (for DFS construction), DFS traversal mostly made
according structure defined relations agents hard constraints
appear backedges DFS arrangement problem graph.
UTIL Propagation: Hard constraints introduced UTIL propagation phase lowest
agent community variable scope hard constraint, i.e. agent
variable lowest DFS ordering. example, constraint M2
M3 Figure 2 specify M2 occur M3 becomes backedge
2 communities would assigned A3 handling.
3.2.4 H ANDLING R EPLICA VARIABLES
distributed model SCP replicates decision variable every interested agent connects copies equality constraints. handling replica variables carefully
avoid increasing induced width k DCOP model compared induced width
w centralized model. adaptation, UTIL messages DPOP distributed problem graph would conditioned many variables local copies
original variable. However, local copies represent variable must assigned
value; thus, sending many combinations different local copies variable take
different values wasteful. Therefore, handle multiple replicas variable UTIL
propagation though single, original variable, condition relations one
value. realized updating JOIN operator follows:
Definition 6 (Updated JOIN operator SCP) Defined two steps:
Step 1: Consider UTIL messages received input. one, consider variable
Xvi message conditioned, local copy original variable Xv .
Rename Xvi input UTIL message Xv , i.e. corresponding name original
problem.
Step 2: Apply normal JOIN operator DPOP.
Applying updated JOIN operator makes local copies variable become indistinguishable other, merges single dimension UTIL message
avoids exponential blow-up.
Example 5 Consider meeting scheduling example Figure 2. centralized model Figure 2(a) DFS arrangement yields induced width 2 clique 3 nodes.
726

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Nevertheless, corresponding DCOP model Figure 2(b) induced width 3, seen
DFS arrangement Figure 2(c), Sep M22 = {M32 , M33 , M12 }. Applying DPOP
DFS arrangement, M22 would condition UTIL message UTILM22 M12 variables
separator: {M32 , M33 , M12 }. However, M32 M33 represent variable, M3 . Therefore, M22 apply updated JOIN operator, leverages equality constraint
two local replicas collapse single dimension (called M3 ) message M12 .
result outgoing message 2 dimensions: {M3 , M12 }, takes much less
space. possible 3 agents involved, i.e. A1 , A2 A3 know M31 , M32
M33 represent variable.
change, VALUE propagation phase modified top local
copy variable solve optimization problem compute best value, announcing
result local copies assume value.
3.2.5 C OMPLEXITY NALYSIS DPOP PPLIED OCIAL C HOICE
special handling replica variables, DPOP applied SCPs scale induced
width centralized problem graph, independently number agents involved
number local replica variables.
Consider DFS arrangement centralized model SCP equivalent
DFS arrangement DCOP model. Equivalent means original variables
SCP visited order corresponding communities visited
distributed DFS construction. (Recall distributed DFS traversal described Section 3.1.1
visits local copies community DCOP moving next community). Let
w denote induced width DFS arrangement centralized SCP. Similarly, let k denote
induced width DFS arrangement distributed model. Let = maxm |dm | denote
maximal domain variable. Then, following:
Theorem 1 (DPOP Complexity SCP) number messages passed DPOP solving
SCP 2m, (n 1) (n 1) phases one, two three respectively, n
number nodes edges DCOP model replicated variables. maximal number
utility values computed node DPOP O(Dw+1 ), largest UTIL message
O(Dw+1 ) entries, w induced width centralized problem graph.
P ROOF. first part claim (number messages) follows trivially Proposition 1.
second part (message size computation): given DFS arrangement DCOP, applying
Proposition 1 trivially gives basic DPOP algorithm, maximal amount computation
node O(Dk+1 ), largest UTIL message O(Dk ) entries, k induced width DCOP problem graph. improve analysis need consider special
handling replica variables.
Consider UTIL messages travel along DFS tree, whose sets dimensions
contain separators sending nodes. Recall updated JOIN collapses local replicas
original variables. union dimensions UTIL messages join DPOP
DCOP model becomes identical set dimensions nodes DPOP
centralized model. Thus, node DCOP model performs amount computation
counterpart centralized model. follows computation required DPOP scales
O(Dw+1 ) rather O(Dk+1 ) special handling.
727

fiP ETCU , FALTINGS , & PARKES

remains one additional difference DPOP DFS arrangement centralized SCP versus DPOP DFS arrangement DCOP. variable Xv replicated
across multiple agents projected UTIL propagation local optimization top-most agent handling local replica Xv . first node
relevant information place support optimization step. particular, whenever node
maximal separator set associated top-most replica variable
must retain dependence value assigned variable UTIL message sends
parent. increases worst case message size DPOP O(Dw+1 ), opposed O(Dw )
normal DPOP. Computation remains O(Dw+1 ) utility determined
value Xv anyway, projecting Xv out. 2
see effect message size described proof, local variable cannot
immediately removed UTIL propagation, consider problem Figure 2. Suppose agent A3 involved meeting M1 . introduces additional back-edge
M23 M13 DFS arrangement decentralized model shown Figure 2(c). DFS
arrangement COP model corresponds decentralized model simply traversal
COP order communities visited distributed DFS construction. corresponds chain: M3 M1 M2 . introduction additional back-edge
M23 M13 distributed DFS arrangement change DFS COP model,
width remains w = 2. However, M23 top copy M2 , agent A3 cannot project
M2 outgoing UTIL message. result sends UTIL message w + 1 = 3
dimensions, opposed w = 2.

4. Handling Self-interest: Faithful Algorithm Social Choice
adapted DPOP remain efficient SCPs, turn issue self-interest. Without modification, agent manipulate DPOP misreporting private relations
deviating algorithm various ways. setting meeting scheduling, example,
agent might benefit misrepresenting local preferences (I massively utility
meeting occurring 2pm 9am), incorrectly propagating utility information
(competing) agents (The person team high utility meeting 2pm),
incorrectly propagating value decisions (It already decided meeting
involving person team 9am meeting must 2pm.)
introducing carefully crafted payments, leveraging information communication
structure inherent DCOPs social choice, careful partitioning computation
agent asked reveal information, perform optimization, send messages
interest, able achieve faithfulness. mean agent choose,
even self-interested, follow modified algorithm. first define VCG mechanism
social choice illustrate ability prevent manipulation centralized problem solving
simple example. place, next review definitions faithful distributed implementation results useful principle, partition principle. describe Simple
M-DPOP algorithm without reuse computation prove faithfulness.
728

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

4.1 Review: Mechanism Design VCG Mechanism
Mechanism design (MD) addresses problem optimizing criteria, frequently social welfare, presence self-interested agents private information relevant
problem hand. standard story, agents report private information center, solves
optimization problem enforces outcome.
second-price, sealed-bid (Vickrey) auction simple example mechanism: agent
makes claim value item auctioneer, allocates item highest
bidder second-highest price (Krishna, 2002). Vickrey auction useful
non-manipulable, weakly dominant strategy agent report true value,
efficient, item allocated agent highest value.
setting efficient social choice, assume existence currency agents
make payments, make standard assumption quasilinear utility functions, agent
Ai net utility is,
ui (X, p) = Ri (X) p,

(7)

assignment X variables X payment p
center, i.e., net utility
P R
j
(X),
minus amount
r
defined utility assignment, Ri (X) =
j
ri Ri
payment. One celebrated results MD provided Vickrey-Clarke-Groves
(VCG) mechanism, generalizes Vickreys second price auction problem efficient
social choice:
Definition 7 (VCG mechanism Efficient Social Choice) Given knowledge public constraints C, public decision variables X , Vickrey-Clarke-Groves (VCG) mechanism works
follows:
agent, Ai , makes report Ri private relations.
centers decision, X , solves SCP (A) given reports R = (R1 , . . . , Rn ).
agent Ai , makes payment
Tax (Ai ) =

X



Rj (Xi
) Rj (X ) ,

(8)

j6=i

, , solution SCP (A ) given reports R
center, Xi


=
(R1 , . . . , Ri1 , Ri+1 , . . . , Rn ).

agent makes payment equals negative marginal externality presence
imposes rest system, terms impact preferences solution
SCP.
VCG mechanism number useful properties:
Strategyproofness: agents weakly dominant strategy, i.e. utility-maximizing strategy whatever strategies whatever private information agents, truthfully report preferences center. sense VCG mechanism
non-manipulable.
729

fiP ETCU , FALTINGS , & PARKES

Efficiency: equilibrium, mechanism makes decision maximizes total utility
agents feasible solutions SCP.
Participation:
P
equilibrium, utility agent Ai , Ri (X ) Tax (Ai ) = (Ri (X ) +
P


j6=i Rj (Xi ), non-negative, principle optimality, therej6=i Rj (X ))
fore agents choose participate.
No-Deficit:
payment
made agent Ai non-negative SCP,
P
P


j6=i Rj (X ) principle optimality, therefore entire
j6=i Rj (Xi )
mechanism runs budget surplus.
begin understand VCG mechanism strategyproof, notice first term
Tax (Ai ) independent Ai report. second term, taken together
agents
P

true utility decision, provides Ai net utility Ri (X ) + j6=i Rj (X ).
total utility agents, maximize agent simply report true preference
information, center explicitly solve problem picking X .
Example 6 Return example Figure 4. make SCP associating agents
A1 , A2 A3 relations r10 , r21 r31 variables {X0 , X1 }, {X1 , X2 }, {X1 , X3 } respectively. Breaking ties before, solution SCP (A) < X0 = a, X1 = c, X2 = b, X3 =
> utility < 6, 6, 3 > agents A1 , A2 A3 respectively. Removing agent A1 , solution
would < X0 =?, X1 = a, X2 = c, X3 = > utility < 5, 6 > agents A2 A3 . ?
indicates agents A2 A3 indifferent value X0 . Removing agent A2 , solution
would < X0 = c, X1 = b, X2 =?, X3 = c >, utility < 7, 4 > agents A1 A3 . Removing agent A3 , solution would < X0 = a, X1 = c, X2 = b, X3 =? >, utility < 6, 6 >
agents A1 A2 . VCG mechanism would assign < X0 = a, X1 = c, X2 = b, X3 = >,
payments (5 + 6) (6 + 3) = 2, (7 + 4) (6 + 3) = 2, (6 + 6) (6 + 6) = 0 collected
agents A1 , A2 A3 respectively. A3 negative impact agents A1 A2
incur payment. agents make payments: presence A1 helps A2 hurts A3
more, presence A2 hurts A1 A3 . conflict problem
value assigned variable X1 . Agents A1 , A2 A3 prefer X1 assigned b, c
respectively. chosen solution, agent A2 gets best outcome. Considering case
A3 , force either b selected reporting suitably high utility choice,
X1 = must pay 4 X1 = b must pay 1, either case weakly prefers
current outcome makes zero payment.
introduced VCG mechanism, important realize VCG mechanism
provides known, general purpose, method exists solve optimization problems
presence self-interest private information. positive side, straightforward
extend VCG mechanism (and techniques paper) maximize linear weighted sum
utility agent, weights fixed known, instance social
planner (Jackson, 2000). Roberts (1979) hand, established Groves mechanisms VCG mechanism important special case non-trivial
strategyproof mechanisms domain social choice unless known structure
agent preferences; e.g., everyone prefers earlier meetings, resource always weakly
preferred less. Together another technical assumption, Roberts theorem extended Lavi et al. (2003) domains kind structure, instance combinatorial
730

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

auctions. see real sense possible address self-interested
DCOPs maximizing something total utility participants.
4.2 Faithful Distributed Implementation
goal faithful distributed implementation distribute computation required solve
SCP determine payments population agents, retaining
analog strategyproofness. challenging opens additional opportunities
manipulation beyond centralized VCG mechanism.
presenting results, introduce following additional assumptions over-and-above
made far:
Agents rational helpful, meaning although self-interested, follow protocol whenever deviation make strictly better (given behavior
agents).
agent prevented posing several independent agents external technique
(perhaps cryptographic) providing strong (perhaps pseudonymous) identities.
Catastrophic failure occur agents community variable eventually
choose value variable.
trusted bank, connected trusted communication channel agent,
authority collect payments agent.
property rational helpful required able rely upon agents compute
payments agents make. Strong identities required avoid known vulnerabilities
VCG mechanism shown Yokoo, Sakurai Matsubara (2004), wherein agents
sometimes better participating multiple identities. Catastrophic failure ensures
decision determined protocol actually executed. prevents hold-out problem,
unhappy agent refuses adopt consensus decision. alternative solution would
agents report final decision trusted party, responsible enforcement.
trusted communication channel, mean agent send message bank without
interference agent. messages sent agent upon termination
M-DPOP, inform bank agents payments. bank assumed work
distributed MD (Feigenbaum et al., 2002, 2006; Shneidman & Parkes, 2004),
trusted entity require. purpose ensure payments used align incentives.
provide formal definition distributed implementation need concept local
state. local state agent Ai corresponds sequence messages agent
received sent, together initial information available agent (including
relations, public information constraints). Given this, distributed implementation,
dM =< g, , >, defined terms three components (Shneidman & Parkes, 2004; Parkes &
Shneidman, 2004):
Strategy space, , defines set feasible strategies available agent Ai ,
strategy defines message(s) agent Ai send every possible local state.
Suggested protocol, = (s1 , . . . , sn ), defines strategy parameterized
private relations Ri agent Ai .
731

fiP ETCU , FALTINGS , & PARKES

Outcome rule, g = (g1 , g2 ), g1 : n defines assignment values, g1 () D,
variables X given joint strategy, = (1 , . . . , n ) n , g2 : n Rn defines
payment g2,i () R made agent Ai given joint strategy n .
defining message(s) sent every state, strategy encompasses
computation performed internally agent, information agent reveals private
inputs (e.g. relations), decisions agent makes propagate information
received messages agents.9 suggested protocol si corresponds algorithm,
takes input private information available agent relevant details
agents local state, generates message messages send neighbors network.
applied distributed input R = (R1 , . . . , Rn ) known parts input hard
constraints C, protocol induces particular execution trace algorithm. turn
induces outcome g(), = s(R), g1 () final assignment values (information
distributed across agents) g2 () vector payments bank
collect agents.10
main question ask, given distributed algorithm corresponding suggested
protocol, whether suggested protocol forms ex post Nash equilibrium induced game:
Definition 8 (Ex post Nash equilibrium.) Given distributed implementation dM =< g, , >,
suggested protocol = (s1 , . . . , sn ) ex post Nash equilibrium (EPNE) if, agents
Ai , relations Ri , relations agents Ri , alternate strategies ,
Ri (g1 (si (Ri ), si (Ri ))) g2 (si (Ri ), si (Ri )) Ri (g1 (i , si (Ri ))) g2 (i , si (Ri ))
(9)
EPNE, agent Ai benefit deviating protocol, si , whatever particular
instance DCOP (i.e. private relations R = (R1 , . . . , Rn )), long agents
choose follow protocol. latter requirement makes EPNE weaker dominantstrategy equilibrium, si would best protocol agent even agents
followed arbitrary protocol.
Definition 9 (Faithfulness) Distributed implementation, dM = < g, , >, ex post faithful
suggested protocol ex post Nash equilibrium.
is, suggested protocol, s, said ex post faithful (or simply faithful)
best interest every agent Ai follow aspects algorithm information revelation,
computation message-passing whatever private inputs agents, long every
agent follows algorithm.
9. idea agent limited set possible messages sent local state implied
notion (restricted) strategy space justified following sense. Agents model autonomous
self-interested and, course, free send message state. hand, suggested
protocol followed every agent, messages semantically meaningful recipient
agent(s) trigger meaningful change local state recipient agent(s); i.e. change local state
changes future (external) behavior recipient agent. way, strategy space characterizes complete
set interesting behaviors available agent given agents follow suggested protocol.
sufficient, technical perspecitve, define ex post Nash equilibrium.
10. outcome rule must well-defined unilateral deviation s, i.e. one agent deviates
follow suggested protocol. Either protocol still reaches terminal state decisions payments
defined, protocol reaches bad state suitably negative utility participants, livelock
deadlock. neglect latter possibility rest analysis, easily treated introducing
special notation bad outcome.

732

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

4.3 Partition Principle Applied Efficient Social Choice
One cannot achieve faithful DI efficient SCP simply running DPOP, n + 1 times
problem graph, main problem agents effect nullified turn
asking simply propagate messages. Agent Ai would seek following: (a) interfere
computational process SCP (Ai ), make solution close possible
SCP (A), marginal impact appears small; (b) otherwise decrease payment,
example increasing apparent utility agents solution SCP (A), turn
increases value second term VCG payment (Eq. 8).
opportunity manipulation recognized Parkes Shneidman (2004)
general setting, proposed partition principle method achieving faithfulness distributed VCG mechanisms, instantiated context efficient SCPs:
Definition 10 (partition principle) distributed algorithm, corresponding suggested protocol
s, satisfies partition principle application efficient social choice, if:
1. (Correctness) optimal solution obtained SCP (A) SCP (Ai ) every agent
follows s, bank receives messages instruct collect correct VCG payment
every agent.
2. (Robustness) Agent Ai cannot influence solution SCP (Ai ), report(s)
bank receives negative externality Ai imposes rest system
conditioned solutions SCP (A) SCP (Ai ).
3. (Enforcement) decision corresponds SCP (A) enforced, bank collects
payments instructed.
Theorem 2 (Parkes & Shneidman, 2004) distributed algorithm efficient social choice
satisfies partition principle ex post faithful distributed implementation.
intuition behind result, note opportunity manipulation agent
Ai restricted to: (a) influencing solution computed SCP (A); (b) influencing
payments made agents. Agent Ai cannot prevent agents correctly solving
SCP (Ai ) correctly reporting negative externality Ai imposes agents
presence. long agents follow algorithm, ex post faithfulness follows
strategyproofness VCG mechanism additional opportunity manipulation, available misreporting preferences centralized context,
change (either increase reduce) amount agents payment. opportunity
(b). Opportunity (a) new. agent always influence solution context
centralized VCG mechanism misreporting preferences.
Remark: suggested previous work, weakening dominant-strategy equilibrium centralized VCG mechanism, ex post Nash equilibrium distributed implementation, viewed cost decentralization. incentive properties necessarily rely
payments collected rely turn computation performed agents
turn strategy followed agents.11
11. exception provided Izmalkov et al. (2005), able avoid use cryptographic
primitives, case best thought physical devices ballot boxes.

733

fiP ETCU , FALTINGS , & PARKES

4.4 Simple M-DPOP
Algorithm 3 describes simple-M-DPOP. variation main problem, SCP (A) solved,
followed social choice problem, SCP (Ai ) agent removed turn.12

n + 1 problems solved, every agent Aj knows local part solution X Xi
Ai 6= Aj , part solution affects utility. provides enough
information allow system agents without agent Ai , Ai , send message
bank component payment agent Ai make.
Algorithm 3: Simple-M-DPOP.
1 Run DPOP DCOP (A) DFS (A); find X
2 forall Ai

3
Build DFS (Ai ); run DPOP DCOP (Ai ) DFS (Ai ); find Xi
) R (X ) report bank.
4
agents Aj P
6= Ai compute Tax j (Ai ) = Rj (Xi
j
5
Bank deducts j6=i Tax j (Ai ) Ai account
6

Ai assigns values X solution local COPi

computation payments
P disaggregated across agents. tax payment collected
agent Ai Tax (Ai ) = j6=i Tax j (Ai ),

Tax j (Ai ) = Rj (Xi
) Rj (X ),

(10)

component payment occurs negative effect agent Ai
utility agent Aj . information communicated bank agent Aj equilibrium.
important observation, able satisfy partition principle, components Ai payment satisfy locality property, agent Aj compute component Ai payment private information relations local information
affect utility. information availabout parts solutions X Xi
able upon termination simple-M-DPOP. Correctly determining payment, condition
, rely aspect agents algorithm, including
solutions X Xi
13
Ai .
Figure 5 provides illustration Simple M-DPOP earlier meeting scheduling example,
shows marginal problems (and DFS arrangements problem)
related main problem.
Theorem 3 simple-M-DPOP algorithm faithful distributed implementation efficient social choice terminates outcome VCG mechanism.
P ROOF. prove establish simple-M-DPOP satisfies partition principle
appeal Theorem 2. First, DPOP computes optimal solutions SCP (A) SCP (Ai )
12. Simple M-DPOP presented setting main problem subproblems connected extends
immediately disconnected problems. Indeed, may main problem connected one
subproblems disconnected. see additional incentive concerns notice sufficient
recognize correctness robustness properties partition principle would retained case.
13. similar disaggregation identified Feigenbaum et al. (2002) lowest-cost interdomain routing
Internet. Shneidman Parkes (2004) subsequently modified protocol authors agents
Ai enough information report payments made agent Ai .

734

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Figure 5: Simple M-DPOP: agent Ai excluded turn optimization DCOP (Ai ).
illustrated meeting scheduling example.

Ai every agent follows protocol. immediate correctness
DCOP model SCP correctness DPOP. correct VCG payments collected
every agent follows algorithm correctness disaggregation VCG payments
Eq. 10. Second, agent Ai cannot influence solution SCP (Ai ) involved
computation way. DFS arrangement constructed, problem solved,
agents, completely ignore Ai messages agent Ai might send. (Any hard
constraints Ai may handled SCP (A) reassigned automatically agent
SCP (Ai ) consequence fact DFS arrangement reconstructed). DPOP
still solves SCP (Ai ) correctly case problem graph corresponding SCP (Ai )
becomes disconnected (in case DFS arrangement forest). robustness value
reports agents 6= Ai negative externality imposed Ai , conditioned solutions
SCP (A) SCP (Ai ), follows locality property payment terms Tax j (Ai )
Aj 6= Ai . enforcement, bank trusted empowered collect payments, agents
finally set local copies variables X prevent catastrophic failure. Agent Ai
deviate long agents deviate. Moreover, agent Ai agent
interested variable value already optimal agent Ai anyway. 2
partition principle, faithfulness, sweeping implications. agent
follow subtantive aspects simple-M-DPOP, agent choose faithfully participate community discovery phase, algorithm choosing root community,
selecting leader agent Phase one DPOP.14
14. One observe useful agent misreport local utility another agent Aj sending
UTIL messages around system. one hand, deviation could course change selection X

Xk
k 6= {i, j} thus payments agents solution ultimately selected. But, deviating

735

fiP ETCU , FALTINGS , & PARKES

Remark Antisocial Behavior: Note reporting exaggerated taxes hurts agents
increase ones utility excluded assumption agents selfinterested helpful.

5. M-DPOP: Reusing Computation Retaining Faithfulness
section, present main result, M-DPOP algorithm. simple-M-DPOP,
computation solve main problem completely isolated computation solve
marginal problems. comparison, M-DPOP re-use computation already performed
solving main problem solving marginal problems. enables algorithm scale well
problems agents influence limited small part entire problem
little additional computation required beyond DPOP. problems agents
influence limited precisely interest induced
tree width small DPOP scales.
challenge face, facilitating re-use computation, retain incentive
properties provided partition principle. possible new manipulation agent
Ai deviate computation DCOP (A), intended effect change solution
DCOP (Ai ) via indirect impact computation performed DCOP (A)
reused solving DCOP (Ai ). prevent this, determine UTIL messages
DCOP (A) could influenced agent Ai .
Example 7 Refer Figure 6. agent Ai controls X3 X10 . way
influencing messages sent subtrees rooted {X14 , X15 , X2 , X7 , X5 , X11 }. want
able reuse many UTIL messages possible. solving problem agent
Ai removed strive construct DFS arrangement problem DCOP (Ai )
similar possible DFS main problem. done goal maximizing
re-use computation across problems. See Figure 6(b). Notice DFS forest,
three distinct connected components. UTIL messages sent shaded nodes
re-used solving DCOP (Ai ). UTIL messages sent nodes subtrees
influenced agent Ai except {X14 , X15 , X5 } X9 , different
local DFS arrangement.
M-DPOP uses safe reusability idea suggested example. See Algorithm 4. first
stage, M-DPOP solves main problem Simple-M-DPOP. complete,
marginal problem DCOP (Ai ) solved parallel. solve DCOP (Ai ), DFS forest (it
forest case DCOP (Ai ) becomes disconnected) constructed modification
DFS (A), retaining much structure DFS (A) possible. new DPOP (Ai )
execution performed DFS U IL messages determined either reusable
reusable sender message based differences DFS DFS (A).
explain DFS constructed.
way agent cannot change utility information finally used determining payments.
agent Aj computes marginal effect agent Ai local solution, component
Tax j (Ai ) agent Ai payment.

736

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Figure 6: Reconstructing DFS (Ai ) DFS (A) M-DPOP. result general DFS forest.
bold nodes main DFS initiate DFS propagation. one initiated X5 redundant
eventually stopped X9 . ones X4 X15 useful, subtrees become
really disconnected removing Ai . X14 initiate propagation since X1
pseudoparent. X1 controlled Ai , eventually connect X14 . Notice
X0 X9 X1 X14 turned tree edges.

5.1 Phase One M-DPOP Marginal Problem: Constructing DFS
Given graph DCOP (A) DFS arrangement DFS (A) DCOP (A), one removes set
nodes X(Ai ) DCOP (A) (the ones belong Ai ), need algorithm constructs
DFS arrangement, DFS , DCOP (A) \ X(Ai ). want achieve following properties:
1. DFS must represent correct DFS arrangement graph DCOP (Ai ) (a DFS forest
case DCOP (Ai ) becomes disconnected).
2. DFS must constructed way non-manipulable Ai , i.e. without allowing
agent Ai interfere construction.
3. DFS similar possible DFS (A). allows reusing UTIL messages
DPOP (A), saves computation communication.
main difficulty stems fact removing nodes represent variables interest agent Ai DFS (A) create disconnected subtrees. need reconnect possibly
rearrange (now disconnected) subtrees DFS (A) whenever possible. Return example Figure 6. Removing agent Ai nodes X3 X10 disrupts tree two ways:
subtrees become completely disconnected rest problem (e.g. X15 X18 X19 );
ones remain connected via back-edges, thus forming invalid DFS arrangement
737

fiP ETCU , FALTINGS , & PARKES

Algorithm 4: M-DPOP: faithfully reuses computation main problem.
1 Run DPOP DCOP (A) DFS (A); find X
2 forall Ai
parallel
3

Create DFS Algorithm 5 adjusting DFS (A)

4

Run DPOP DCOP (Ai ) DFS :
leaves DFS observe changes DFS
send null UTILi messages

5

6

7
8

else compute UTILi messages anew, DPOP
subsequently, nodes Xk DF do:
Xk receives null UTILi msgs (Pk = Pki P Pk = P Pki Ck = Cki )
Xk sends null UTILi message
else
node Xk computes UTILi message, reusing:
forall Xl N eighbors(Xk ) s.t. Xl sent UTILi = null
Xk reuses UTIL message Xl sent DCOP (A)
Compute levy taxes simple-M-DPOP;
Ai assigns values X solution local COPi ;

(e.g. X5 X8 X9 ). basic principle use reconnect disconnected parts via back-edges
DFS (A) whenever possible. intended preserve much structure possible. example, Figure 6, back edge X0 X9 turned tree edge, X5 becomes
X9 child. Node X8 remains X5 child.
DFS reconstruction algorithm presented Algorithm 5. high-level overview
follows (in bold state purpose step):
1. (Similarity DFS (A) :) nodes retain DFS data structures constructing
DFS (A); i.e., lists children, pseudo parents/children, parents
DFS (A). use data starting point building DFS arrangements,
DFS (Ai ), marginal problems.
2. (At least one traversal connected component DFS forest:) root
DFS (A) children15 removed nodes initiate DFS token passing
DFS (A), except changes:
node Xk sends token neighbors owned Ai .
order Xk sends token neighbors based DFS (A): First Xk
children DFS (A), pseudochildren, pseudoparents,
parent. order helps preserve structure DFS (A) DFS (Ai ).
15. Children pseudoparents excluded node, instance X14 Figure 6, initiate DFS token
passing would redundant: would eventually receive DFS token pseudoparent.

738

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Algorithm 5: Reconstruction DFS DFS (A).
data structures DFS denoted superscript .

Procedure Token passing DFS (executed nodes Xk
/ X(Ai )) :
1
2

3
4
5

forall Xl Neighbors(Xk ) s.t. Xl belongs Ai
Remove Xl Neighbors(Xk ) Ck , PC k , PP k //i.e. send nothing Ai
Sort Neighbors(Xk ) order: Ck , PC k , PP k , Pk //mimic DFS (A)
Xk root, Pk X(Ai ) (i.e. executed root children Ai )
Initiate DFS normal DFS (Algorithm 2)
else Process incoming tokens()
Send DFS (Xk ) back Pki // Xk subtree completely explored
Procedure Process incoming tokens()

6
7
8
9
10
11

Wait incoming DFS token; Let Xl sender
Xl Ai ignore message
else
first token received


Pki = Xl ; PP
k = {Xj 6= Pk |Xj Neighbors(Xi ) DFS }


rootk = first node token DFS

17

else
let Xr first node DFS

traversal
Xr 6= rooti
k //i.e. another DFS
depth Xr DFS (A) < depth root
k DFS (A)




Reset Pk , PP k , Ck , PC k //override redundant DFS lower root


Pki = Xl ; PP
k = {Xj 6= Pk |Xj Neighbors(Xi ) DFS }

root k = Xr

18

Continue Algorithm 2

12
13
14
15
16

3. (Unique traversal connected component DFS forest:) node Xk retains
root path DFS (A) knows depth DFS arrangement. new token
DFS arrives:
first DFS token arrives, sender (let Xl ) marked
parent Xk DFS : Pki = Xl . Notice Xl could different
parent Xk DFS (A). Xk stores first node received token DFS ,
root
k : (provisional) root connected component Xk belongs
DCOP (Ai ).
first DFS token arrives, two possibilities:
token received part DFS traversal process. Xk recognizes
fact first node newly received token
previously stored root
k . case, Xk proceeds normal, Algorithm 2:
marks sender pseudochild, etc.
739

fiP ETCU , FALTINGS , & PARKES

token received part another DFS traversal process, initiated another
node root
k (see text could happen). Let Xr first
node newly received token. Xk recognizes situation fact Xr

previously stored rooti
traversal
k . case, DFS
initiated higher node DFS (A) prevails, one dropped.
determine traversal pursue one drop, Xk compares depths

rooti
k Xr DFS (A). Xr higher, becomes new rootk . Xk
overrides previous DFS information one new token.
continues token passing new token Algorithm 2.
see necessary start propagations children removed nodes (step
2), consider example Figure 6. Removing X10 X3 completely disconnects
subtree {X4 , X6 , X11 , X7 , X12 , X13 }. X4 started propagation, subtree would
visited since connections rest problem
nodes subtree.16 17
Lemma 1 (DFS correctness) Algorithm 5 constructs correct DFS arrangement (or forest),
DFS DCOP (Ai ) given correct DFS arrangement DFS (A) DCOP (A).
P ROOF. First, since DFS started child node controlled Ai ,
root, ensured connected component DFS-traversed least (follows
Step 2). Second, DFS process similar normal DFS construction, node
sends token neighbors (except ones controlled Ai );
pre-specified order (the one given DFS (A)). follows nodes connected component
eventually visited (follows Step 3). Third, higher-priority DFS traversals override
lower priority ones (i.e. DFS traversals initiated nodes higher tree priority),
Step 3. Eventually one single DFS-traversal performed single connected component. 2
Lemma 2 (DFS robustness) DFS arrangement, DFS , constructed Algorithm 5 nonmanipulable agent Ai , input DFS arrangement solution phase DCOP (A).
P ROOF. follows directly Step 3, since Ai participate process all:
neighbors send messages (see Algorithm 5, line 1), messages may send
simply ignored (see Algorithm 5, line 7) 2
fact, additional links created constructing DFS . possible changes
edges reverse direction (parents/children pseudoparents-pseudochildren
16. DFS traversals initiated Step 2 redundant part problem graph visited
once. simple overriding rule Step 3 ensures single DFS tree eventually adopted
connected component, namely one initiated highest node original DFS (A).
example, Figure 6, X5 starts unnecessary DFS propagation, eventually stopped X9 ,
receives higher priority DFS token X0 . Since X9 knows X0 higher DFS (A) X5 , drops
propagation initiated X5 , relays one initiated X0 . sending X5 token
DFS received X0 adds itself. Upon receiving new token X9 , node X5 realizes
X9 new parent DFS . Thus, redundant propagation initiated X5 eliminated result
consistent DFS subtree single connected component P1 .
17. simple time-out mechanism used ensure agent knows provisional DFS ordering final
(i.e. higher priority DFS traversals arrive future).

740

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

switch places), existing back-edges turn tree edges. Again, one see
Figure 6.18
5.2 Phase Two M-DPOP Marginal Problem: UTILi propagations
DFS built, marginal problem without Ai solved DFS . Utility propagation proceeds normal DPOP except nodes determine whether UTIL message
sent DPOP (A) reused. signaled parent sending special null UTIL
message. specifically, process follows:
leaves DFS initiate UTILi propagations:
1. leaves DFS observe changes local DFS arrangement compared DFS (A) UTIL message sent DCOP (A) remains valid
announce parents sending instead null UTILi message.
2. Otherwise, leaf node computes UTIL message anew sends (new)
parent DFS .
nodes wait incoming UTILi messages and:
1. every incoming messages node Xk receives children null
changes parent/pseudoparents propagate null UTILi message
parent.
2. Otherwise, Xk recompute UTILi message. reusing UTIL
messages received DCOP (A) children sent null messages
DCOP (Ai ) joining new UTIL messages received.
example, consider DCOP (Ai ) Figure 6, X16 X17 children X14 . X14
recompute UTIL message send new parent X1 . this, reuse
messages sent X16 X17 DCOP (A), neither sending subtrees contain Ai .
16
so, X14 reuses effort spent DCOP (A) compute messages UTIL16
20 , UTIL21 ,
14
UTIL14
16 UTIL17 .
Theorem 4 M-DPOP algorithm faithful distributed implementation efficient social
choice terminates outcome VCG mechanism.
P ROOF. partition principle appeal Theorem 3 (and turn Theorem 2). First,
agent Ai cannot prevent construction valid DFS DCOP (Ai ) (Lemmas 1 2).
Second, agent Ai cannot influence execution DPOP DCOP (Ai ) messages
Ai influenced main problem DCOP (A) recomputed system without Ai .
rest proof follows simple-M-DPOP, leveraging locality tax payment messages
enforcement provided bank via catastrophic failure assumption. 2
18. simple alternative children nodes Xki belong Ai , create bypass link first ancestor
Xki belong Ai . example, Figure 6, X4 X5 could create link X1 bypass X3
completely DFS (Ai ). However, additional communication links may required approach.

741

fiP ETCU , FALTINGS , & PARKES

6. Experimental Evaluation: Understanding Effectiveness M-DPOP
present results experimental evaluation DPOP, Simple M-DPOP M-DPOP
two different domains: distributed meeting scheduling problems (MS), combinatorial auctions
(CAs). first set experiments investigate performance M-DPOP structured
constraint optimization problem (MS) received lot attention cooperative distributed
constraint optimization. second set experiments (CAs), investigate unstructured domains, observe performance specifically ability re-use computation computing
payments M-DPOP respect problem density. CAs provide abstract model many
real world allocation problems much studied mechanism design (Cramton, Shoham, &
Steinberg, 2006).
6.1 Distributed Meeting Scheduling
distributed meeting scheduling, consider set agents working large organization
representing individuals, groups individuals, engaged scheduling meetings
upcoming period time. Although agents self interested, organization
whole requires optimal overall schedule, minimizes cost (alternatively, maximizes
utility agents). makes necessary use faithful distributed implementation
M-DPOP. enabling this, suppose organization distributes virtual currency
agent (perhaps using currency allocation prioritize particular participants.) relations held
agents defining agents utility solution scheduling problem thus stated
units currency.
agent Ai set local replicate variables Xji meeting Mj
involved. domain variable Xj (and thus local replicas Xji ) represents feasible
time slots meeting. equality constraint included replica variables ensure
meeting times aligned across agents. Since agent cannot participate one
meeting all-different constraint variables Xij belonging agent.
modeled clique constraint meeting variables. agent assigns utility
possible time meeting imposing unary relation variable Xji .
relation private Ai , denotes much utility Ai associates starting meeting Mj
time dj , dj domain meeting Mj . social objective find schedule
total utility maximized satisfying all-different constraints agent.
Following Maheswaran et al. (2004), model organization providing hierarchical
structure. realistic organization, majority interactions within departments,
small number across departments even interactions typically take place
two departments adjacent hierarchy. hierarchical organization provides structure
test instances: high probability (around 70%) generate meetings within departments,
lower probability (around 30%) generate meetings agents belonging
parent-child departments. generated random problems structure, increasing
number agents: 10 100 agents. agent participates 1 5 meetings,
uniform random utility 0 10 possible schedule meeting
participates. problems generated feasible solutions.19
19. test instances found http://liawww.epfl.ch/People/apetcu/research/mdpop/MSexperiments.tgz

742

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

problem size, averaged results 100 different instances. solved main
problems using DPOP marginal ones using simple-M-DPOP, M-DPOP respectively.
experiments performed FRODO multiagent simulation environment (Petcu, 2006),
1.6Ghz/1GB RAM laptop. FRODO simulated multiagent system, agent executes
asynchronously thread, communicates peers via message exchange.
experiments geared towards showing much effort M-DPOP able reuse
main marginal problems. Figure 6.1 shows absolute computational effort terms
number messages (Figure 6.1(a)), terms total size messages exchanged,
bytes (Figure 6.1(b)). curves DPOP represent number messages (total size
messages, respectively) required solving cooperative problem. curves simpleM-DPOP M-DPOP represent total number (size, respectively) UTIL messages,
main marginal economies.
notice several interesting facts. First, number messages required DPOP increases
linearly number agents DPOPs complexity terms number messages
always linear size problem. hand, number messages simple-MDPOP increases roughly quadratically number agents, since solves linear number
marginal economies scratch using DPOP, requiring linear number messages.
performance M-DPOP lies somewhere DPOP simple-M-DPOP
advantage achieved simple-M-DPOP size problem increases, culminating
almost order magnitude improvement Simple M-DPOP largest problem sizes (i.e.
100 agents problem). Similar observations made total size UTIL
messages, good measure computation, traffic memory requirements, inspecting
Figure 6.1(b). metrics find performance M-DPOP slightly superlinear size problem.
Figure 8 shows percentage additional effort required solving marginal problems
reused main problem, i.e. probability UTIL message required solving marginal problem taken directly message already used main problem.
clearly see problem size increases actually reuse computation
main problem. intuition behind large problems, individual agent
localized particular area problem. translates agent localized
specific branch tree, thus rendering computation performed branches reusable
marginal problem corresponds respective agent. Looking percentage
reuse defined terms message size rather number messages see
trending upwards size problem increases.
6.2 Combinatorial Auctions
Combinatorial Auctions (CAs) popular means allocate resources multiple agents. CAs,
bidders bid bundles goods (as opposed bidding single goods). Combinatorial bids
model complementarity substitutability among goods, i.e. valuation
bundle more, respectively less sum valuations individual items.
setting agents distributed (geographically logically), form problem graph
neighbors agents bids overlap. objective find feasible solution (i.e.
declare bids winning losing two winning bids share good) maximizes
total utility agents.
743

fiP ETCU , FALTINGS , & PARKES

100000

1e+07

10000
# messages

DPOP
simple_M-DPOP
M-DPOP

Total Size UTIL Messages

DPOP
simple_M-DPOP
M-DPOP

1000

100

1e+06

100000

10000

10

1000
10

20

30

40

50

60

70

80

90 100

10

20

Number agents

30

40

50

60

70

80

90 100

Number agents

(a) Number messages

(b) Total size UTIL messages (in valuations)

Figure 7: Meeting scheduling problem: measures absolute computational effort (in terms number

% effort marginals reused main

messages sent total size UTIL messages) DPOP, simple-M-DPOP MDPOP. curves DPOP represent effort spent main problem, ones
simple-M-DPOP M-DPOP represent total effort main marginal problems.

90
85
80
75
70
65
60
55

Total information
Number messages

50
10

20

30

40

50

60

70

80

90

100

Number agents

Figure 8: Meeting scheduling problem: Percentage effort required marginal problems
reused M-DPOP main problem. Reuse measured terms percentage
UTIL messages reused (dashed) terms total size UTIL
messages reused fraction total UTIL message size (solid).

744

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

CAs adopted stylized model distributed allocation problems airport slot
allocation wireless spectrum allocation discussed Introduction. CA instances
provide counterpoint meeting scheduling problems represent problems
less structure. DCOP model, agent holds variable one bids, two
possible values: 0 bid rejected, 1 bid accepted. pair overlapping
bids (bids share least one good) connected one constraint specifies
cannot accepted. multiple bids submitted agent
connected additional constraints capture bid logic, instance exclusive-or constraints
one bid accepted.
generated random problems using CATS (Leyton-Brown, Pearson, & Shoham, 2000), using
L3 distribution Sandholm (2002). L3 Constant distribution agent
demands bundle 3 goods, selected uniformly random, value distributed uniformly
[0, 1]. simulations consider market 50 goods vary number agents
5 40. recorded performance DPOP, simple-MDPOP M-DPOP
graphs Figures 9 10. Figure 9 shows density problems increase, three
algorithms require effort solving (both terms number messages, terms
total information exchange).
Figure 10 shows reusability varies problem density: one see loose problems reusability good, close 100% problems 5 agents. density
problems increases number agents, reusability decreases well, around 20%
dense problems, 40 agents. explain phenomenon follows: loose
problems (many goods bidders), bids mostly non-overlapping, turn ensures
removing individual agents solving marginal problems affect computation
performed solving main problem. end spectrum, dense problems
tend highly connected, produces DFS trees similar chains.
case, removing agents close bottom chain invalidates much computation performed solving main problem. Therefore, limited amount computation
reused.
noting L3 recognized one hardest problem distributions CATS
suite (Leyton-Brown et al., 2000), remark need limit experiments distribution problems large induced tree width (and high density problem graphs).
Consider example problem every agent bids bundle overlaps every
agent. problem graph clique DPOP scale. leave detailed
examination future work, recent extension DPOP H-DPOP (Kumar, Petcu, & Faltings,
2007) immediately address issue. H-DPOP, consistency techniques used order
compactly represent UTIL messages, tightly constrained problems, orders magnitude
improvements DPOP reported (see Section 7.1).

7. Discussion
section discuss alternatives improving computational performance M-DPOP,
possibility faithful variations DCOP algorithms (ADOPT (Modi et al., 2005)
OptAPO (Mailler & Lesser, 2004)), loss utility agents occur due
transfer payments bank, mentioning approach address problem.
745

fiP ETCU , FALTINGS , & PARKES

10000

1e+08
Total Size UTIL Messages

DPOP
simple_M-DPOP
M-DPOP
# messages

1000

100

10

DPOP
simple_M-DPOP
M-DPOP

1e+07
1e+06
100000
10000
1000
100
10

1

1
5

10

15
20
25
30
Number agents

35

40

5

(a) Number messages

10

15
20
25
30
Number agents

35

40

(b) Total size UTIL messages (in valuations)

Figure 9: Combinatorial Auctions problems: measures absolute computational effort (in terms

% effort marginals reused main

number messages sent total size UTIL messages) DPOP, simple-M-DPOP
M-DPOP. curves DPOP represent effort spent main problem, ones
simple-M-DPOP M-DPOP represent effort main marginal problems.
higher number agents (and thus bids, thus constraints problem graph
problem density), greater computational effort solve problem.

100
90
80
70
60
50
40
30
Total information
Number messages

20
10
5

10

15

20

25

30

35

40

Number agents

Figure 10: Combinatorial Auctions problems: Percentage effort required marginal problems
reused M-DPOP main problem. Reuse measured terms percentage
UTIL messages reused (dashed) terms total size UTIL
messages reused fraction total UTIL message size (solid).

746

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

7.1 Algorithmic Alternatives Improved Performance
M-DPOP scales well problem size long induced width problem remains
low. characteristic M-DPOP inherits DPOP, based. problems
high induced width, DPOP/M-DPOP require producing, sending storing large messages,
may unfeasible undesirable. mitigate problem, several advances basic
DPOP algorithm recently proposed. new algorithms sacrifice optimality
return computational tractability, makes difficult combine VCG payment
mechanism way faithfulness guaranteed. Nevertheless, H-DPOP (Kumar et al.,
2007) MB-DPOP (Petcu & Faltings, 2007) employ two different techniques preserve
optimality guarantees, fitted M-DPOP.
H-DPOP leverages observation many real problems contain hard constraints significantly reduce space feasible assignments. example, auctions, possible
allocate item one bidder. meeting scheduling, possible set two different start times given meeting. Unfortunately, DPOP take advantage pruning
power hard constraints, sends messages explicitly represent value combinations, including many infeasible ones. H-DPOP addresses issue using Constraint Decision
Diagrams (CDD) introduced Cheng Yap (2005) compactly represent UTIL messages
excluding unfeasible combinations. Performance improvements several orders magnitude
achieved, especially highly constrained problems (Kumar et al., 2007).
MB-DPOP (Petcu & Faltings, 2007) uses idea cycle cutsets (Dechter, 2003) explore
parts search space sequentially. Dense parts problem explored iterating
assignments subset nodes designated cycle cuts, assignment performing
limited UTIL propagation similar one DPOP. Easy parts problem explored
one-shot UTIL messages, exactly DPOP. MB-DPOP offers thus configurable tradeoff
number messages exchanged, size messages memory
requirements.
7.2 Achieving Faithfulness DCOP Algorithms
partition principle, described Section 4.3, algorithm independent. question
whether another, optimal DCOP algorithm made faithful therefore revolves, critically, around
whether algorithm satisfy robustness requirement partition priciple. make
following observations:
Robustness first sense, i.e. agent Ai influence solution efficient SCP without agent Ai , always achievable cost restarting computation
marginal problem agent removed turn, proposed simple-M-DPOP.
Robustness second sense, i.e. agent Ai influence report(s) bank
receives negative externality Ai imposes rest system, conditioning
solutions main problem problem without Ai , requires DCOP
algorithm terminates every agent knowing part solution relevant
defining utility; robustness property follows disaggregation payments.
Thus, one content restart DCOP algorithm multiple times, kinds
results provide simple-M-DPOP generally available. possible
747

fiP ETCU , FALTINGS , & PARKES

already mentioned locality property payments, follows disaggregation
VCG payment across agents Eq. (10) information communication
structure DCOP.
useful property DCOP context self-interested agents, worth reemphasizing, possible retain faithfulness even one agent plays pivotal role
connecting problem graph. Suppose problem, DCOP (Ai ), becomes disconnected without Ai . But, case optimal solution represented union optimal
solutions connected subcomponent problem, information needs flow disconnected components either purpose solving problem purpose
reporting components agent Ai tax.
discuss following two sections adaptation two prominent complete DCOP algorithms: ADOPT (Modi et al., 2005) OptAPO (Mailler & Lesser, 2004).
discuss following two sections adaptation two prominent complete DCOP algorithms: ADOPT (Modi et al., 2005) OptAPO (Mailler & Lesser, 2004).
consider computational aspects making algorithms faithful, specifically issues related efficient handling replica variables providing reusability main
marginal problems.
7.2.1 U SING ADOPT



FAITHFUL , E FFICIENT OCIAL C HOICE

ADOPT polynomial-space search algorithm DCOP guaranteed find globally
optimal solution allowing agents execute asynchronously parallel. agents
ADOPT make local decisions based conservative cost estimates. ADOPT works DFS
arrangement, constructed detailed Section 3.1.1. Roughly speaking, main process
executed ADOPT backtrack search DFS tree.
Adaptation ADOPT DCOP Model Replicated Variables. ADOPTs complexity
given number messages, exponential height DFS tree. Similar
DPOP, using DCOP model replicated variables could artificially increase complexity
solving process. Specifically, height DFS tree increased using replicated
variables compared centralized problem graph. ADOPT modified exploit special
structure replicated local variables similar way DPOP. Specifically, ADOPT
explore sequentially values original variable, ignore assignments replicas
variable take different values. works allowing agent owns
highest replica variable freely choose values variable. agent announces
new value variable agents owning replicas variable. agents
would consider announced value replicas, add corresponding utilities, continue search process. Using special handling replica variables,
resulting complexity longer exponential height distributed DFS tree,
height DFS tree obtained traversing original problem graph. example, Figure 2, sufficient explore values M32 , directly assign values M33 M31
via VALUE messages, without trying combinations values. reduces ADOPTs
complexity exponential 6, exponential 3.
Reusability Computation ADOPT. Turning re-use computation main
marginal problems, note ADOPT uses DFS arrangement easy
identify parts DFS arrangement main problem impossible agent
748

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

manipulate, therefore reused computing solution marginal problem
agent removed. However, major difference DPOP ADOPT DPOP,
agent stores outgoing UTIL message, thus available utilities contingent
assignments variables agents separator. makes possible agent
simply reuse information marginal economies structure DFS proves
safe. contrast, ADOPT store information linear memory
policy. turn makes impossible reuse computation main problem marginal
problems. marginal problems solved scratch, thus performance would
scale poorly problem size increases even structured problems meeting scheduling.
see two alternatives addressing problem: (a) renounce linear memory guarantees,
use caching scheme example NCBB (Chechetka & Sycara, 2006): would allow
similar reusability M-DPOP, previously computated utilities extracted
cache instead recomputed. Alternatively, (b) one devise scheme
previously computed best solution saved reference, subsequently used
approximation solving marginal problems. could possibly provide better bounds
thus allow better pruning, computation could saved. alternatives
outside scope paper, considered future work.
7.2.2 U SING PTAPO



FAITHFUL , E FFICIENT OCIAL C HOICE

OptAPO (Mailler & Lesser, 2004) popular algorithm DCOP. Similar
adaptations DPOP ADOPT social choice, OptAPO made take advantage
special features DCOP model replicated variables. complexity would
artificially increased use DCOP model. OptAPO particularity uses
mediator agents centralize subproblems solve dynamic asynchronous mediation sessions, i.e. partial centralization. mediator agents announce results
agents, previously sent subproblems mediators. process alone would
introduce additional possibility manipulation setting self interested agents. However,
using VCG mechanism addresses concern agents choose behave correctly according protocol.
ADOPT, main issue using OptAPO faithful social choice reusability
computation main marginal problems. Specifically, consider solving
main problem, mediator agent Ai centralized aggregated preferences number
agents, solving mediation problems dictated OptAPO protocol. Subsequently,
trying compute solution marginal problem without agent Ai , computation
go waste, could manipulated Ai solving main problem. Furthermore, since OptAPOs centralization process asynchronous conflict-driven opposed
structure-driven M-DPOP, unclear whether computation main problem
could safely reused marginal problems. make matters worse, experimental studies (Davin & Modi, 2005; Petcu & Faltings, 2006) show many situations, OptAPO ends
relying single agent system centralize solve whole problem. implies
solving marginal problem without agent, one reuse zero effort main
problem.
749

fiP ETCU , FALTINGS , & PARKES

7.3 Loss Utility due Wasting VCG Taxes
VCG mechanism, agents net utility difference utility derives
optimal solution VCG tax pay. net utility whole group agents
sum individual net utilities agents, i.e. total utility assignment values
variables net total payment made agents bank. loss utility
using M-DPOP great 35% total utility optimal solution meeting
scheduling domain. problem size increases, money burnt
form VCG taxes. Similar waste observed others; e.g., Faltings (2004),
context efficient social choice.
One cannot naively redistribute payment back agents, instance sharing payments equally across agents would break faithfulness. example, agent Ai would prefer
agents make greater payments, order receive larger repayment bank.
faithfulness properties M-DPOP would unravel. hand, problem
inherent structure possible redistribute fraction payments back agents.
idea careful redistribution suggested Bailey (1997), subsequently extended
Cavallo (2006), Guo Conitzer (2007) Moulin (2007). Another approach, advocated example Faltings (2004), simply preclude agent problem transfer payments
agent. work centralized context.
important issue future work, then, study budget surplus accrues bank
M-DPOP seek mitigate welfare loss setting distributed implementation.
defer discussion topic future work, investigate methods
leverage structure problem redistributing majority payments back agents
without compromising either efficiency faithfulness.

8. Conclusions
developed M-DPOP, faithful, distributed algorithm solve efficient
social choice problems multi-agent systems private information self-interest. agent
improve utility either misreporting local information deviating aspect
algorithm (e.g., computation, message-passing, information revelation.) centralized
component bank able receive messages payments collect payments.
addition promoting efficient decisions, minimize amount additional computational
effort required computing VCG payments reusing effort main problem. first
set experimental results shows significant amount computation required
marginal problems reused main problem, sometimes 87%. provides
near-linear scalability massive, distributed social choice problems local structure
maximal induced tree width small. second set experiments performed problems
without local structure shows problem density increases, amount effort required increases, reusability computation decreases. results suggest M-DPOP
good candidate solving loose problems exhibit local structure induced width
remains small. addition addressing need reduce total payments made agents
bank, one issue future work relates need provide robustness faced adversarial
faulty agents: current solution fragile sense, equilibrium properties relying
agents following protocol. papers (Lysyanskaya & Triandopoulos, 2006; Aiyer,
Alvisi, Clement, Dahlin, Martin, & Porth, 2005; Shneidman & Parkes, 2003) provide robustness
750

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

mixture models (e.g. rational, adversarial) aware work
mixture models context efficient social choice. Another interesting direction find ways
allow approximate social choice, example memory-limited DPOP variations (Petcu
& Faltings, 2005a) retaining incentive properties, perhaps approximate equilibria. Future
research consider design distributed protocols robust false-name
manipulations agents participate multiple pseudonyms (Yokoo et al., 2004),
seek mitigate opportunities collusive behavior possibility multiple equilibria exist incentive mechanisms (Ausubel & Milgrom, 2006; Andelman, Feldman, &
Mansour, 2007; Katz & Gordon, 2006).

Acknowledgments
Parkes supported part National Science Foundation grants IIS-0238147, IIS-0534620
Alfred P. Sloan Foundation award. Petcu supported Swiss National Science Foundation
grant 200020-103421/1. authors would thank Wei Xue valuable feedback several
parts paper. thank Jeffrey Shneidman feedback early version paper.
thank Aaron Bernstein valuable insights DFS reconstruction process. three
anonymous reviewers provided excellent suggestions improving exposition work.
earlier version paper appeared Proc. Fifth International Joint Conference
Autonomous Agents Multiagent Systems (AAMAS), 2006.

References
Abu-Amara, H. H. (1988). Fault-tolerant distributed algorithm election complete networks. IEEE
Trans. Comput., 37(4), 449453.
Aiyer, A. S., Alvisi, L., Clement, A., Dahlin, M., Martin, J.-P., & Porth, C. (2005). Bar fault tolerance
cooperative services. 20th ACM Symposium Operating Systems Principles.
Andelman, N., Feldman, M., & Mansour, Y. (2007). Strong price anarchy. ACM-SIAM Symposium
Discrete Algorithms 2007 (SODA07).
Arnborg, S. (1985). Efficient algorithms combinatorial problems graphs bounded decomposability
- survey. BIT, 25(1), 223.
Ausubel, L., Cramton, P., & Milgrom, P. (2006). clock-proxy auction: practical combinatorial auction
design. Cramton et al. (Cramton et al., 2006), chap. 5.
Ausubel, L., & Milgrom, P. (2006). lovely lonely Vickrey auction. Cramton et al. (Cramton et al.,
2006), chap. 1.
Bailey, M. J. (1997). demand revealing process: distribute surplus. PublicChoice, 107126.
Ball, M., Donohue, G., & Hoffman, K. (2006). Auctions safe, efficient, equitable allocation
airspace system resources. Cramton, Shoham, S. (Ed.), Combinatorial Auctions. MIT Press.
Barbosa, V. (1996). Introduction Distributed Algorithms. MIT Press.
Bayardo, R., & Miranker, D. (1995). space-time trade-off solving constraint satisfaction problems.. Proceedings 15th International Joint Conference Artificial Intelligence, IJCAI-95,
Montreal, Canada.
Bidyuk, B., & Dechter, R. (2004). finding minimal w-cutset. AUAI 04: Proceedings 20th
conference Uncertainty artificial intelligence, pp. 4350, Arlington, Virginia, United States.
AUAI Press.
751

fiP ETCU , FALTINGS , & PARKES

Bikhchandani, S., de Vries, S., Schummer, J., & Vohra, R. V. (2002). Linear programming Vickrey
auctions. Dietrich, B., & Vohra, R. (Eds.), Mathematics Internet: E-Auction Markets, pp.
75116. IMA Volumes Mathematics Applications, Springer-Verlag.
Cavallo, R. (2006). Optimal decision-making minimal waste: Strategyproof redistribution vcg payments. Proc. 5th Int. Joint Conf. Autonomous Agents Multi Agent Systems (AAMAS06).
Chechetka, A., & Sycara, K. (2006). any-space algorithm distributed constraint optimization.
Proceedings AAAI Spring Symposium Distributed Plan Schedule Management.
Cheng, K. C. K., & Yap, R. H. C. (2005). Constrained decision diagrams.. Proceedings National
Conference Artificial Intelligence, AAAI-05, pp. 366371, Pittsburgh, USA.
Cheung, T.-Y. (1983). Graph traversal techniques maximum flow problem distributed computation..
IEEE Trans. Software Eng., 9(4), 504512.
Cidon, I. (1988). Yet another distributed depth-first-search algorithm. Inf. Process. Letters, 26(6), 301305.
Collin, Z., Dechter, R., & Katz, S. (1991). Feasibility Distributed Constraint Satisfaction.
Proceedings 12th International Joint Conference Artificial Intelligence, IJCAI-91, pp. 318
324, Sidney, Australia.
Collin, Z., Dechter, R., & Katz, S. (1999). Self-stabilizing distributed constraint satisfaction. Chicago Journal
Theoretical Computer Science.
Collin, Z., & Dolev, S. (1994). Self-stabilizing depth-first search. Information Processing Letters, 49(6),
297301.
Cramton, P., Shoham, Y., & Steinberg, R. (Eds.). (2006). Combinatorial Auctions. MIT Press.
Davin, J., & Modi, P. J. (2005). Impact problem centralization distributed constraint optimization
algorithms. AAMAS 05: Proceedings fourth international joint conference Autonomous
agents multiagent systems, pp. 10571063, New York, NY, USA. ACM Press.
Davis, R., & Smith, R. G. (1983). Negotiation metaphor distributed problem solving. Artificial
Intelligence, 63109.
de Vries, S., & Vohra, R. V. (2003). Combinatorial auctions: survey. Informs Journal Computing, 15(3),
284309.
Dechter, R. (2003). Constraint Processing. Morgan Kaufmann.
Dechter, R., & Mateescu, R. (2006). AND/OR search spaces graphical models. Artificial Intelligence.
appear.
Dunne, P. E. (2005). Extremal behaviour multiagent contract negotiation. Journal Artificial Intelligence
Research (JAIR), 23, 4178.
Dunne, P. E., Wooldridge, M., & Laurence, M. (2005). complexity contract negotiation. Artificial
Intelligence Journal, 164(1-2), 2346.
Endriss, U., Maudet, N., Sadri, F., & Toni, F. (2006). Negotiating socially optimal allocations resources.
Journal Artificial Intelligence Research, 25, 315348.
Ephrati, E., & Rosenschein, J. (1991). Clarke tax consensus mechanism among automated agents.
Proceedings National Conference Artificial Intelligence, AAAI-91, pp. 173178, Anaheim,
CA.
Faltings, B. (2004). budget-balanced, incentive-compatible scheme social choice. Workshop
Agent-mediated E-commerce (AMEC) VI. Springer Lecture Notes Computer Science.
Faltings, B., Parkes, D., Petcu, A., & Shneidman, J. (2006). Optimizing streaming applications selfinterested users using M-DPOP. COMSOC06: International Workshop Computational Social
Choice, pp. 206219, Amsterdam, Netherlands.
752

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Feigenbaum, J., Papadimitriou, C., Sami, R., & Shenker, S. (2002). BGP-based mechanism lowest-cost
routing. Proceedings 2002 ACM Symposium Principles Distributed Computing, pp.
173182.
Feigenbaum, J., Ramachandran, V., & Schapira, M. (2006). Incentive-compatible interdomain routing.
Proceedings 7th Conference Electronic Commerce, pp. 130139.
Feigenbaum, J., & Shenker, S. (2002). Distributed Algorithmic Mechanism Design: Recent Results
Future Directions. Proceedings 6th International Workshop Discrete Algorithms
Methods Mobile Computing Communications, pp. 113.
Freuder, E. C., & Quinn, M. J. (1985). Taking advantage stable sets variables constraint satisfaction
problems. Proceedings 9th International Joint Conference Artificial Intelligence, IJCAI85, pp. 10761078, Los Angeles, CA.
Gershman, A., Meisels, A., & Zivan, R. (2006). Asynchronous forward-bounding distributed constraints
optimization. Proceedings 17th European Conference Artificial Intelligence (ECAI-06),
Riva del Garda, Italy.
Greenstadt, R., Pearce, J. P., & Tambe, M. (2006). Analysis privacy loss distributed constraint optimization. Proc. Twenty-First National Conference Artificial Intelligence (AAAI-06).
Guo, M., & Conitzer, V. (2007). Worst-case optimal redistribution vcg payments. Proceedings
8th ACM Conference Electronic Commerce (EC-07), pp. 3039.
Huebsch, R., Hellerstein, J. M., Lanham, N., et al. (2003). Querying Internet PIER. VLDB.
Izmalkov, S., Micali, S., & Lepinski, M. (2005). Rational secure computation ideal mechanism design.
FOCS 05: Proceedings 46th Annual IEEE Symposium Foundations Computer Science,
pp. 585595, Washington, DC, USA. IEEE Computer Society.
Jackson, M. O. (2000). Mechanism theory. Encyclopedia Life Support Systems. EOLSS Publishers.
Jackson, M. O. (2001). crash course Implementation theory. Social Choice Welfare, 18(4), 655708.
Katz, J., & Gordon, S. D. (2006). Rational secret sharing, revisited. Proc. Security Cryptography
Networks.
Kloks, T. (1994). Treewidth, Computations Approximations, Vol. 842 Lecture Notes Computer
Science. Springer.
Krishna, V. (2002). Auction Theory. Academic Press.
Kumar, A., Petcu, A., & Faltings, B. (2007). H-DPOP: Using hard constraints prune search space.
IJCAI07 - Distributed Constraint Reasoning workshop, DCR07, pp. 4055, Hyderabad, India.
Lavi, R., Mualem, A., & Nisan, N. (2003). Towards characterization truthful combinatorial auctions.
Proc. 44th Annual Symposium Foundations Computer Science.
Leyton-Brown, K., Pearson, M., & Shoham, Y. (2000). Towards universal test suite combinatorial
auction algorithms. Proceedings ACM Conference Electronic Commerce, EC-00, pp. 235
245.
Leyton-Brown, K., & Shoham, Y. (2006). test suite combinatorial auctions. Cramton, P., Shoham,
Y., & Steinberg, R. (Eds.), Combinatorial Auctions, chap. 18. MIT Press.
Lysyanskaya, A., & Triandopoulos, N. (2006). Rationality adversarial behavior multi-party computation. 26th Annual Int. Cryptology Conference (CRYPTO06).
Maheswaran, R. T., Tambe, M., Bowring, E., Pearce, J. P., & Varakantham, P. (2004). Taking DCOP
real world: Efficient complete solutions distributed multi-event scheduling. AAMAS-04.
Mailler, R., & Lesser, V. (2004). Solving distributed constraint optimization problems using cooperative mediation. Proceedings Third International Joint Conference Autonomous Agents MultiAgent
Systems (AAMAS 2004), 1, 438445.
753

fiP ETCU , FALTINGS , & PARKES

Mailler, R., & Lesser, V. (2005). Asynchronous partial overlay: new algorithm solving distributed
constraint satisfaction problems. Journal Artificial Intelligence Research (JAIR).
Mas-Colell, A., Whinston, M. D., & Green, J. R. (1995). Microeconomic Theory. Oxford University Press.
Mishra, D., & Parkes, D. (2007). Ascending price Vickrey auctions general valuations. Journal
Economic Theory, 132, 335366.
Modi, P. J., Shen, W.-M., Tambe, M., & Yokoo, M. (2005). ADOPT: Asynchronous distributed constraint
optimization quality guarantees. AI Journal, 161, 149180.
Monderer, D., & Tennenholtz, M. (1999). Distributed games: mechanisms protocols. Proc. 16th
National Conference Artificial Intelligence (AAAI-99), pp. 3237.
Moulin, H. (2007). Efficient, strategy-proof almost budget-balanced assignment. Tech. rep., Rice University.
Mualem, A. (2005). decentralized incentive compatible mechanisms partially informed environments.
Proc. ACM Conf. Electronic Commerce (EC).
Ostrovsky, R., Rajagopalan, S., & Vazirani, U. (1994). Simple efficient leader election full information model. STOC 94: Proceedings twenty-sixth annual ACM symposium Theory
computing, pp. 234242, New York, NY, USA. ACM Press.
Parkes, D. C., Kalagnanam, J. R., & Eso, M. (2001). Achieving budget-balance Vickrey-based payment
schemes exchanges. Proc. 17th International Joint Conference Artificial Intelligence (IJCAI01), pp. 11611168.
Parkes, D. C., & Shneidman, J. (2004). Distributed implementations Vickrey-Clarke-Groves mechanisms.
Proc. 3rd Int. Joint Conf. Autonomous Agents Multi Agent Systems, pp. 261268.
Parkes, D. C., & Ungar, L. H. (2000). Iterative combinatorial auctions: Theory practice. Proc. 17th
National Conference Artificial Intelligence (AAAI-00), pp. 7481.
Petcu, A. (2006). FRODO: FRamework Open Distributed constraint Optimization. Technical
report no. 2006/001, Swiss Federal Institute Technology (EPFL), Lausanne, Switzerland. http:
//liawww.epfl.ch/frodo/.
Petcu, A., & Faltings, B. (2005a). A-DPOP: Approximations distributed optimization. Proceedings
Eleventh International Conference Principles Practice Constraint Programming
(CP05), pp. 802806, Sitges, Spain.
Petcu, A., & Faltings, B. (2005b). DPOP: scalable method multiagent constraint optimization.
Proceedings 19th International Joint Conference Artificial Intelligence, IJCAI-05, pp. 266
271, Edinburgh, Scotland.
Petcu, A., & Faltings, B. (2006). PC-DPOP: partial centralization extension DPOP. Proceedings
Second International Workshop Distributed Constraint Satisfaction Problems, ECAI06, Riva
del Garda, Italy.
Petcu, A., & Faltings, B. (2007). MB-DPOP: new memory-bounded algorithm distributed optimization. Proceedings 20th International Joint Conference Artificial Intelligence, IJCAI-07,
Hyderabad, India.
Pietzuch, P., Ledlie, J., Shneidman, J., Roussopoulos, M., Welsh, M., & Seltzer, M. (2006). Network-Aware
Operator Placement Stream-Processing Systems. ICDE.
Rassenti, S. J., Smith, V. L., & Bulfin, R. L. (1982). combinatorial mechanism airport time slot allocation. Bell Journal Economics, 13, 402417.
Roberts, K. (1979). characterization implementable rules. Laffont, J.-J. (Ed.), Aggregation
Revelation Preferences, pp. 321348. North-Holland, Amsterdam.
Rosenschein, J. S., & Zlotkin, G. (1994). Designing conventions automated negotiation. AI Magazine.
Fall.
754

fiM-DPOP: FAITHFUL ISTRIBUTED MPLEMENTATION E FFICIENT OCIAL C HOICE P ROBLEMS

Sandholm, T. (2002). Algorithm optimal winner determination combinatorial auctions. Artificial
Intelligence, 135, 154.
Sandholm, T. W. (1993). implementation Contract Net Protocol based marginal-cost calculations. Proc. 11th National Conference Artificial Intelligence (AAAI-93), pp. 256262.
Sandholm, T. W. (1996). Limitations Vickrey auction computational multiagent systems. Second
International Conference Multiagent Systems (ICMAS-96), pp. 299306.
Shneidman, J., & Parkes, D. C. (2003). Rationality self-interest peer peer networks. 2nd Int.
Workshop Peer-to-Peer Systems (IPTPS03).
Shneidman, J., & Parkes, D. C. (2004). Specification faithfulness networks rational nodes. Proc.
23rd ACM Symp. Principles Distributed Computing (PODC04), St. Johns, Canada.
Silaghi, M.-C., Sam-Haroud, D., & Faltings, B. (2000). Asynchronous search aggregations.
AAAI/IAAI, pp. 917922, Austin, Texas.
Solotorevsky, G., Gudes, E., & Meisels, A. (1996). Modeling Solving Distributed Constraint Satisfaction
Problems (DCSPs). Proceedings Second International Conference Principles Practice
Constraint Programming (CP96), pp. 561562, Cambridge, Massachusetts, USA.
Sycara, K., Roth, S. F., Sadeh-Koniecpol, N., & Fox, M. S. (1991). Distributed constrained heuristic search.
IEEE Transactions Systems, Man, Cybernetics, 21(6), 14461461.
Wellman, M. P. (1993). market-oriented programming environment application distributed multicommodity flow problems. Journal Artificial Intelligence Research, 1, 123.
Wellman, M. P. (1996). Market-oriented programming: early lessons. Clearwater, S. H. (Ed.),
Market-Based Control: Paradigm Distributed Resource Allocation, chap. 4, pp. 7495. World
Scientific.
Yokoo, M., Durfee, E. H., Ishida, T., & Kuwabara, K. (1992). Distributed constraint satisfaction formalizing distributed problem solving. International Conference Distributed Computing Systems, pp.
614621.
Yokoo, M., & Hirayama, K. (2000). Algorithms distributed constraint satisfaction: review. Autonomous
Agents Multi-Agent Systems, 3(2), 185207.
Yokoo, M., Sakurai, Y., & Matsubara, S. (2004). effect false-name bids combinatorial auctions:
New Fraud Internet Auctions. Games Economic Behavior, 46(1), 174188.
Zhang, W., & Wittenburg, L. (2003). Distributed breakout algorithm distributed constraint optimization
problems - DBArelax. Proceedings International Joint Conference Autonomous Agents
Multi Agent Systems (AAMAS-03), Melbourne, Australia.
Zlotkin, G., & Rosenschein, J. S. (1996). Mechanisms automated negotiation state oriented domains.
Journal Artificial Intelligence Research, 5, 163238.

755


