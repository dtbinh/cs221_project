Journal Artificial Intelligence Research 46 (2013) 343-412

Submitted 08/12; published 03/13

Hybrid LPRPG Heuristic Modelling Numeric
Resource Flows Planning
Amanda Coles
Andrew Coles
Maria Fox
Derek Long

amanda.coles@kcl.ac.uk
andrew.coles@kcl.ac.uk
maria.fox@kcl.ac.uk
derek.long@kcl.ac.uk

Department Informatics
Kings College London
Strand Building
London, WC2R 2LS, UK

Abstract
Although use metric fluents fundamental many practical planning problems,
study heuristics support fully automated planners working fluents
remains relatively unexplored. widely used heuristic relaxation metric
fluents interval-valued variables idea first proposed decade ago. heuristics
depend domain encodings supply additional information fluents,
capacity constraints resource-related annotations.
particular challenge approaches handling interactions metric
fluents represent exchange, transformation quantities raw materials
quantities processed goods, trading money materials. usual relaxation
metric fluents often poor situations, since recognise
resources, spent, longer available spent again.
present heuristic numeric planning problems building propositional
relaxed planning graph, using mathematical program numeric reasoning.
define class producerconsumer planning problems demonstrate numeric
constraints modelled mixed integer program (MIP). MIP
combined metric Relaxed Planning Graph (RPG) heuristic produce integrated
hybrid heuristic. MIP tracks resource use accurately usual relaxation,
relaxes ordering actions, RPG captures causal propositional aspects
problem. discuss two components interact produce single unified
heuristic go explore numeric features planning problems
integrated MIP. show encoding limited subset propositional problem augment MIP yield accurate guidance, partly exploiting structure
propositional landmarks propositional resources. results show
use heuristic enhances scalability problems numeric resource interaction
key finding solution.

1. Introduction
Domain-independent planning research last decade focussed, part,
propositional planning, leading important discoveries powerful new heuristics
planning propositional domains. Relatively little effort invested planning
metric fluents, despite importance representing many practical planning problems.
c
2013
AI Access Foundation. rights reserved.

fiColes, Coles, Fox & Long

Numbers essential efficiently encoding resources, money, fuel materials.
state-of-the-art remains influential approach proposed Hoffmann (2003),
extends ignore-delete-effects relaxation propositional fluents metric fluents
tracking accumulating upper bound increasing fluents ignoring decreasing (negative) effects. symmetrical treatment fluents purposes determining
lower bound leads representation equivalent interval metric
fluent, goals preconditions satisfied provided value interval
sufficient satisfy condition. Although lpg (Gerevini, Saetti, & Serina, 2006)
mips (Edelkamp, 2003) capable handling metric fluents, depend
relaxation heuristic offer search guidance. approaches explored
(Do & Kambhampati, 2001; Koehler, 1998), comparatively less successful.
Planners using MetricFF heuristic generally effective solving problems complex interactions values numeric resources,
exchange quantities one materials production others.
contrast, solving problems numbers heart operational research mathematical programming techniques. Many powerful solvers developed solving
Linear Programming problems (LPs) Mixed Integer Programming problems (MIPs),
problems expressed linear constraints variables (which, case
MIPs, integers). Although efforts exploit linear programming
propositional planning, either schedule actions (Long & Fox, 2003a) directly,
heuristic (van den Briel, Benton, Kambhampati, & Vossen, 2007), relatively little work
considered exploitation linear programming techniques improve behaviour
numeric domain-independent planners (Kautz & Walser, 2000; Shin & Davis, 2005; Wolfman & Weld, 2000; Benton, van den Briel, & Kambhampati, 2007) (this work
considered Section 1.1).
paper, revisit issue planning numeric resources, beginning
Metric Relaxed Planning Graph (RPG) heuristic (Hoffmann, 2003). focus specifically
domains exclusively exhibit call producer-consumer behaviour (defined
Section 2.3), actions increase decrease numeric resources fixed quantities.
course, represents subset possible numeric behaviours, common
intuitive one. Furthermore, easy recognise syntactically domain encoding,
simple resort alternative strategies domains conform
constraint, might include use producer-consumer relaxations approximations
domains complex numeric behaviour.
explore behaviour RPG heuristic, demonstrating typical
patterns interactions producer-consumer numeric planning domains lead highly
uninformative heuristic guidance, particularly domains offer opportunities exchanges metric variables. address this, introduce novel heuristic based
mixed integer program (MIP), used alongside RPG, better capture numeric
constraints. described MIP constructed, used complement RPG, discuss extensions improve identified weakness,
encode information propositional behaviour problem. evaluate
lp-rpg heuristic exploring spectrum between, one end, strict separation
numbers propositions MIP RPG components; and, other, discarding
344

fiA Hybrid LP-RPG Heuristic Planning

RPG entirely encoding preconditions effects actions entirely MIP.
so, determine best trade-off two lies.
work report paper extension earlier work reporting development lp-rpg (Coles, Fox, Long, & Smith, 2008). extends work
additional detail several variants core heuristic, exploring impact
tighter integration propositional metric fluents heuristic.
1.1 Related Work
integration linear programming (LP) MIP techniques planning
considered number contexts. relevant present work use
LP basis heuristic propositional over-subscription planning problems (Benton,
Do, & Kambhampati, 2005). setting, goal planning find plan
maximum utility, defined terms reward goals achieved, minus costs
occurred achieving them. Benton et al. use LP optimisation tool help
decide set goals planner satisfy order achieve maximum reward.
work Benton et al. work described paper exploit relaxation
action ordering rather effects, employ LP well RPG
structure. two key differences focus work using MIP
capture interactions within numeric planning problems, rely conventional
Relaxed Planning Graph (Hoffmann & Nebel, 2001) propositional reasoning, rather
encoding structure MIP. work van den Briel et al. (van den Briel et al.,
2007; van den Briel, Vossen, & Kambhampati, 2008) explores use mathematical
programming encode solve planning problems.
structure LP MIP models proposed Benton et al. (2007) van den
Briel et al. (2008) makes time consuming solve, requiring actions selected
satisfy preconditions effects actions, delete effects paired
add effects. contrast, MIP LP models propose attempt capture
causal plan structure, making construction solutions programs
state much feasible. difference interaction two
components: integration MIP RPG lp-rpg much tighter,
MIP used graph building indicate variable bounds, relaxed plan
extraction indicate actions use. comparison, earlier approach, MIP
used solely introduce bias RPG action selection, giving preference actions
used solution MIP.
Linear programming exploited planning work. Lpsat (Wolfman
& Weld, 2000) uses planning-as-satisfiability approach, linked use LP solver
ensure literals representing (linear) constraints metric fluents maintained
plan construction. heuristic guidance search, based
standard DPLL search satisfying assignment combined confirmation
corresponding LP satisfiable. Ip-sat (Kautz & Walser, 2000) uses MIP encoding
planning problems basis solving them, Vossen et al. (1999), similar way
later work van den Briel et al. (van den Briel et al., 2008). planners MIP
used directly heart solver, planning problems translated MIPs
rather used guide search. Tm-lpsat (Shin & Davis, 2005) uses lpsat
345

fiColes, Coles, Fox & Long

system solve planning problems continuous processes. Kongming (Li & Williams,
2008) another example planner exploits compilation planning problems
mathematical programs, solved using CPLEX, tackle hybrid mixed-continuous planning
problems. colin system (Coles, Coles, Fox, & Long, 2012) uses LP encodings
manage reasoning effects continuous processes.
completely different use linear mixed integer programming planning lies
work Ono Williams (2008) Blackmore, Ono Williams (2011) uses
mixed integer programming foundation solving problem risk allocation
plan-level control systems.
Alternative approaches handling numeric variables planning include implemented MetricFF, discussed detail Section 3, Sapa (Do & Kambhampati, 2001)
Resource-ipp (Koehler, 1998). Sapa heuristic cost estimates generated using relaxed plan extraction supplemented additional costs representing minimal set
additional resource producing actions required achieve resource requirements
relaxed plans. approach straightforward implement interesting
modification pure relaxed plan heuristic, separates problem producing
resources solution rest problem, consequence relaxed
plan using steps high resource demands constructed preference
longer plan lower demands. heuristic value state distorted
penalty attached relaxed plan achieve high resource requirement, potentially hugely overestimating true distance state goal. Resource-ipp depends
identification consumers producers, paper, builds
resource time map tracks production consumption resources
Graphplan-based search plan. approach leads extension mutex
relation used constrain search Graphplan (Blum & Furst, 1995). However,
iterative-deepening search used Graphplan-based planners scalable solve
large problems forward state-space search proved dominant strategy past
decade.

2. Problem Definition
section define class planning problems consider paper.
subset general class pddl 2.1 non-temporal, numeric planning problems,
represent linear producerconsumer problems. include example Settlers
domain, used throughout paper illustrate ideas presented.
2.1 PDDL 2.1 Numeric Planning Problems
work, concerned finding sequential plans solve non-temporal, numeric
planning problems, defined using (a subset of) pddl 2.1 (Fox & Long, 2003). Within
pddl, class problems defined follows:1
1. pddl2.1 supports specification objective function measure plan quality, defined
numeric variables planning problem, work focus minimising plan length.

346

fiA Hybrid LP-RPG Heuristic Planning

initial state, state consists set propositions, and/or assignment values set numeric variables. notational convenience, refer
vector numeric values given state v propositional facts F .
A, set actions. tuple hpre, eff i:
pre preconditions a: conditions must hold state
executed.
eff effects a: applied, state updated according
effects. eff consists of:
eff , propositions deleted state;
eff + , propositions added state;
eff n , effects acting upon numeric variables.
G, goal: set propositions F ? set conditions numeric variables,
N ? . sets may empty. state hF, vi goal state F ? F v
satisfies condition N ? .
general case, pddl numeric conditions (as used pre N ? ) expressed
form:
hf (v), op, ci
s.t.
op {, <, =, >, }, c <
Numeric effects (as eff n) expressed as:
hv, op, f (v)i

s.t.

op {=, +=, =, =, =}

common Hoffmanns work MetricFF (2003) restrict attention
preconditions expressed Linear Normal Form (LNF). is, expression
f (v) within preconditions must form weighted sum state variables
plus constant, w.v + k. Likewise, consider numeric effects f (v) LNF,
op {+=, =, =}. restrictions guarantee termination construction
RPG evaluating state: introducing non-LNF preconditions, scaling effects,
lead asymptotic numeric behaviour certain conditions satisfied
infinite limit. lp-rpg heuristic describe work, require
numeric behaviour actions represented producerconsumer behaviour. is,
effects cause constant increments decrements variables affect and, apart
specific circumstances, permit assignment effects. precisely define
notions circumstances allow assignment effects later paper.
solution planning problem (sequential) plan: sequence actions transforms initial state goal state, respecting preconditions action application.
state hF, vi, application action effects eff ,eff + ,eff n yields successor
state hF 0 , v0 i, where:
F 0 = (F \ eff ) eff +
v0 [x] op (w.v + c) hv, op, w.v + ci eff n
v0 [x] = v[x]
otherwise
347

fiColes, Coles, Fox & Long

2.2 Example Problem: Settlers
Settlers domain, introduced 2002 International Planning Competition (IPC) (Long
& Fox, 2003b) used 2004 (Hoffmann & Edelkamp, 2005), good example
problem exhibiting interesting use metric fluents. aim Settlers problems
build transport building infrastructure extraction, refinement
transportation materials. numeric structure domain perhaps sophisticated IPC domains date. First, six numeric resources several
actions act upon each. available resources, effects actions upon
(consumption resource shown negative value production shown
positive value) shown Table 12 . Another interesting feature domain
resources directly produced: whilst raw materials Timber, Stone
Ore directly extracted, Wood, Coal Iron must refined respective
raw form. Finally, domain contains transferable resources. addition actions
shown table, resources refined consumed fuel transportation,
resources loaded unloaded vehicles. effect load unload
actions increase decrease amount resource vehicle, decrease
increase amount stored given location. Apart consuming producing (i.e.
releasing) remaining cargo space vehicle, resource produced consumed
loading unloading moved. However, expressing model pddl
requires pair effects described, decreasing one variable increasing another,
indistinguishable combination production consumption.
2.3 ProducerConsumer Problems
define constrained producerconsumer numeric behaviour considered
paper. first define producer consumer actions, two categories producer. Using
define notion producerconsumer variable. identification
consumers producers new idea common identify resource producers
consumers scheduling (for example, Laborie work scheduling
resource constraints, see Laborie, 2003).
2.3.1 ProducerConsumer Actions
simple production action defined follows:
Definition 2.1 Simple Producer
ground action simple producer given numeric variable v iff:
effect (increase (v) c) (where c positive constant)
precondition refers v.
definition two important consequences:
2. table represents debugged version original domain available http://sourceforge.net/
projects/tsgp/files/

348

fiA Hybrid LP-RPG Heuristic Planning

Action
Move cart
Move train
Move ship
Fell timber
Quarry stone
Mine ore
Saw wood
Make coal
Smelt iron
Build cabin
Build quarry
Build mine
Build saw-mill
Build iron-works
Build coal-stack
Build dock
Build wharf
Build house
Build cart
Build train
Build ship
Build rail

Timber

Stone

Ore

Wood

Coal

Iron

-1
-2
+1
+1
+1
-1
-1

+1
+1
-2

-1

+1

-2
-2
-2

-2

-2
-2
-1

-2

-1
-2
-1

-1
-1

-2
-4
-1

Table 1: Production consumption Settlers domain
1. simple producer produces uniformly: state satisfies preconditions,
effect upon v always increase value constant amount, c,
irrespective precise details s.
2. potential maximum value v attained use
restricted value v itself: minimum maximum bounds v
must hold allow production.
define bounded producer follows:
Definition 2.2 Bounded Producer
ground action bounded producer numeric variable v iff:
effect (increase (v) c) (where c positive constant),
precondition (<= (v) (- ub c))
preconditions depending v.
bounded producer, a, applied v (ub c). Therefore, maximum
amount v attained using a, denoted max prod (a, v), ub, achieved
applying state v = (ub c). (In practice, state might reachable
actual upper bound value v reachable using might lower ub).
simple producer, a0 , assume max prod (a0 , v) = .
349

fiColes, Coles, Fox & Long

define bounded consumer follows:
Definition 2.3 Bounded Consumer
ground action consumer respect given numeric variable v iff:
precondition (>= (v) (+ lb c))),
effect (decrease (v) c), c constant
preconditions depending v.
definition analogous bounded producer, since requires v exceed
minimum value allowing consumption. consequence, lb minimum amount
v attained using a, denoted min cons(a, v) (by applying state
v = lb + c).
are, course, many resource use behaviours might encoded
planning domains. producer-consumer behaviour identify natural intuitive
one (a producer produces fixed quantity resource consumer consumes fixed
quantity depends availability quantity). variants
compiled form (e.g. consumers must leave fixed sized store resource
untouched simply translate origin resource measurement) consider,
below, possible extensions basic behaviour. Nonetheless, must emphasise
heuristic develop paper targeted producer-consumer behaviour
usefulness depends common domains practice. frequent
occurrence model scheduling resources suggests natural
useful behaviour.
2.3.2 ProducerConsumer Variables
definitions (bounded) producer consumer actions, define properties
variables manipulate:
Definition 2.4 ProducerConsumer Variable
variable v denotes resource produced/consumed iff:
set prod (v) actions increase value v contains bounded producers,
set cons(v) actions decrease value v contains consumers,
upper bound v bounded producers v
lower bound v consumers v.

350

fiA Hybrid LP-RPG Heuristic Planning

2.3.3 Handling Integer Resources
Consumer actions (Definition 2.3) require amount resource available
consumption must least much consumer actually consumes.
domain encodings, behaviour essentially consistent producerconsumer patterns
represented using precondition consumer action consumes c units v
form v > k rather v c (and k < c). general case, v <, know
v k + (where epsilon infinitesimal positive), c units v consumed,
suggesting lower bound v (k c + ). However, case consumers
consume integral quantities, rewrite strict inequality since must 1
case. Consider, example, fragment load action Settlers:
:precondition (> (available timber l1) 0)
:effect
(decrease (available timber l1) 1)
effects change quantities available resources integral,
rewritten:
:precondition (>= (available timber l1) 1)
:effect
(decrease (available timber l1) 1)
similar transformation used constant effects variable
rational, simply finding least common multiple, LCM , denominators
fractions involved using = 1/LCM .

3. MetricFF Revisited
section briefly review way MetricFF (Hoffmann, 2003) handles metric
fluents highlight weaknesses approach faced particular
kinds numeric behaviours planning domains.
3.1 Metric Relaxed Planning Graph Heuristic
Metric RPG heuristic based performing relaxed reachability analysis forwards
state evaluated, reachability analysis captured planning
graph (Blum & Furst, 1995) structure. Two elements domain relaxed: delete
conditions actions ignored optimistic upper lower bounds used record
interval possible values metric fluent may reach. Positive effects metric
variable increase upper bound reachable values negative effects decrease
lower bound. Satisfaction preconditions tested checking value interval
variable satisfies metric condition precondition. interesting note
preconditions tested individually, possible, principle, single value could
satisfy conditions simultaneously, even though condition separately satisfied
value. Conjunctions convex preconditions, includes linear conditions,
satisfiable value case condition satisfiable interval
associated variable, except case conjunction inconsistent,
likely arise erroneous domain encodings.
351

fiColes, Coles, Fox & Long

MetricFF allows preconditions combine multiple variables, effects depend
values variables. lp-rpg allow linear combinations variables
preconditions, effects must conform producerconsumer definitions
allow constant increases decreases.
Heuristic evaluation state using Metric RPG heuristic undertaken two
phases: graph expansion phase solution extraction phase. remind
reader two processes convenience reference discussion follows.
3.1.1 Metric RPG Expansion
Graph expansion concisely defined follows:
Definition 3.1 RPG Expansion
Let F (i) denote fact layer, comprising:
F P (i), set propositions;
F V (i), array upper- lower- bound pairs task numeric variable v
A(i) denotes action layer, consisting list ground actions. RPG begins
fact layer, F (0), defined based state evaluated:
F P (0) contains propositions hold S;
entry hLBv , UBv F V (0) set hS[v], S[v]i, i.e. value v S.
RPG expanded adding successive action layers, followed new fact layers:
Action layer A(i + 1) contains actions A, that:
propositional preconditions F P (i);
numeric preconditions satisfied values variables
F V (i).
Fact layer F P (i + 1) determined A(i + 1):
propositions F P (i + 1) F P (i), plus new facts added
action A(i + 1);
values numeric values F V (i + 1) first set F V (i), updated
extending interval variable include values achieved
maximum minimum possible assignment effects, action A(i + 1)
turn.
termination condition met, RPG expanded actionlayerfact-layer pairs.
reachability analysis therefore consists alternate steps: determining actions
applicable, hence instantiating next action layer, using extend
next fact layer. process presented graphically Figure 1, small problem
facts f0 ...fn numeric variables v0 , v1 . Considering first propositions:
352

fiA Hybrid LP-RPG Heuristic Planning



i+1

F i+1

f0

i+2

F i+2

f0

f0

f1



f1



f1

f2

B

f2

B

f2

f3

f3

f4

v0[0,0]

v0[0,2]
2

v1[2,2]

+2

f4

>=

+2

2

C

>=

2

C

v0[0,4]
2

v1[0,2]

v1[2,2]

Figure 1: Portion relaxed planning graph, C produces 2 units v0, consumes
2 units v1
Arrows fact action layers denote precondition dependencies actions
instance, action appear layer A(i + 1) f0 present F (i).
Arrows action fact layers denote effects instance, f3 F (i + 1)
added A.
numeric variables v0 , v1 , bounds shown square brackets. Action C
seen one precondition (v1 2) two effects (increase v0 2, decrease v1
2). C exhibits producerconsumer behaviour consumes 2 units v1 , produces
2 units v0 . preconditions satisfied F (i) therefore effects applied
layer A(i + 1), upper bound v0 increased lower bound v1
decreased. Moreover, bounds change layer F (i + 2), possible
application C.
variable bounds continue diverge way, RPG expansion needs
well-defined termination condition. positive case, terminate success
first layer F (i) goal propositions F P (i) goal numeric expressions
satisfied F V (i) (in relaxed sense). negative case, terminate failure
F (i) three following hold:
1. actions appear A(i + 1) present A(i) (and hence new propositions would present F P (i + 1)),
2. hitherto unsatisfied preconditions v c, action, U B(v) would change
F V (i) F V (i + 1),
3. hitherto unsatisfied preconditions v c, action, LB(v) would change
F V (i) F V (i + 1).
353

fiColes, Coles, Fox & Long

Algorithm 1: Adding action relaxed plan
Data: R metric RPG, action include relaxed plan, q subgoal
queue
1 foreach propositional precondition pre
2
l layer pre first appears;
3
l > 0 insert pre q[l].prop;
4
5
6

foreach numeric precondition pre
l layer pre first appears;
l > 0 insert pre q[l].num;

intuition behind conditions monotonic expansion RPG
implies that, new facts appearing numeric preconditions could become satisfied future layer, graph expansion stagnated relaxed problem
unsolvable.
3.1.2 Metric RPG Solution Extraction
expanded planning graph found relaxed solution exists (all
goals appeared), next step extract relaxed solution plan. done
regressing planning graph, using priority queue intermediate sub-goals
(latest layer first). subgoal, achieving action added relaxed plan
preconditions added queue goals achieved earlier layer.
relaxed plan extraction algorithm shown Algorithm 2. lines 3 6, priority
queue initialised top-level goals problem. propositional numeric
goals added priority queue achieved earliest fact layer
appeared. priority queue seeded, solution extraction proceeds regressing
layer-by-layer. propositions, suffices find action adds fact
increment heuristic value one add preconditions achieving action
queue, using Algorithm 1. numeric preconditions, process slightly
involved:
subgoal achieve v k v k layer F (l), action A(l)
assigns value k v, action chosen satisfy subgoal.
Otherwise, v k (or v k) must achieved layer F (l), actions increasing
(decreasing) v chosen A(l) residual value k (i.e.
original value k adjusted take account effects selected actions)
small enough (large enough) reachable layer F (l 1). residual condition
v k (v k) added queue subgoal achieved F (l 1),
modified value k.
Note lines 13, 19, 25, 32 39, actions chosen action layer 1
recorded adding set ha. used basis helpful action set:
action effect common action set ha considered helpful. Helpful
actions important element performance MetricFF: actions achieve
effects exploited relaxed solution state promoted search
state.
354

fiA Hybrid LP-RPG Heuristic Planning

Algorithm 2: Relaxed plan extraction

5

Data: R - metric RPG; F ? , N ? - problem goals
Result: ha - helpful actions, h - heuristic value
ha , h 0;
q deepest-first priority queue goal layers;
foreach p F ?
l layer p first appears;
insert p q[l].prop;

6
7
8

foreach f N ?
l layer f first holds;
insert f q[l].num;

9

q empty
(l, hprop, numi) pop(q);
foreach p prop
h h + 1; achiever p;
action layer 1 add ha;
prop prop \ add effects a;
call Algorithm 1 R, a, q;

1
2
3
4

10
11
12
13
14
15
16
17
18
19
20
21

foreach (v c) num
action A(l) assigned v = k, k c
h h + 1;
l = 1 add ha;
call Algorithm 1 R, a, q;
remove (v c0 ), c0 k (v c0 ), c0 k num;

22
23
24
25
26

foreach (v c) num
action A(l) assigned v = k, k c
h h + 1;
l = 1 add ha;
call Algorithm 1 R, a, q;
remove conditions (v c), c k num;

27
28
29
30
31
32
33
34
35
36
37
38
39
40
41

foreach (v c) num
F V (l 1)[v].upper < c
h h + 1; next increaser v;
decrease c (v, a);
l 1 add ha;
call Algorithm 1 R, a, q;
l > 0 insert (v c) q[l 1].num;
foreach (v c) num
F V (l 1)[v].lower > c
h h + 1; next decreaser v;
increase c (v, a);
l 1 add ha;
call Algorithm 1 R, a, q;
l > 0 insert (v c) q[l 1].num;

355

fiColes, Coles, Fox & Long

3.1.3 Use Relaxed Plan Search
relaxed plan, computed heuristic calculation, used two ways search.
MetricFF makes use two-stage search approach, number actions
relaxed plan used heuristic goal-distance estimate. first search phase,
enforced hill-climbing (EHC), greedy hill climbing search approach. thought
performing breadth first search forward initial state I, state progression
action application, state new global-best heuristic value found.
state, S, found, states discarded EHC search continues
manner S. search strategy incomplete due greedy nature,
discarding states could lead loss solution. such, followed
complete WA* search, order guarantee completeness planner (subject
sufficient time memory).
Since EHC phase already incomplete, designed find solutions quickly,
MetricFF makes use another completeness-sacrificing technique order attempt
guide planner solutions quickly. technique referred helpful action
pruning. Here, actions helpful action set state considered
successor generation: actions helpful discarded. Note pruning
used best-first search would compromise completeness. practice helpful
action pruning improves performance MetricFF many domains, however,
lead difficulties actions needed find solution given state appear
helpful action set. attempt compensate this, EHC terminates
considering helpful actions, returns state last global-best heuristic
value, searches considering applicable actions, either terminates
(leading WA*) state new global-best heuristic value found,
point helpful-action pruning re-enabled, EHC continues.
3.2 Problems Metric RPG Heuristic
Although Metric RPG powerful tool support planning metric fluents,
common situations planning problems heuristic gives flawed
guidance. problems include resource persistence cyclical resource transfer.
discuss phenomena result misleading heuristic guidance
relaxed plan length poorly approximating actual solution length helpful
action distortion.
3.2.1 Resource Persistence
Resource persistence consequence using relaxation ignores negative effects.
resource consumed disappear relaxation negative effects.
opportunity reuse resource suggest significantly shorter plan
available case reality. Although problem occurs propositional
metric fluents, fact metric fluents commonly encode resources must
carefully managed means problem often acute domains metric
fluents. example, state Settlers domain 2 units resource
produced ship required (either goal means travel
356

fiA Hybrid LP-RPG Heuristic Planning

otherwise inaccessible location), relaxed plan require production
resources (see Table 1).
One approach approximating number missing resource production actions
introduced planner Sapa (Do & Kambhampati, 2001). v = state
evaluated, relaxed plan consumes c units v, produces p,
(c p) > s, shortfall production v, would necessitate additional
actions added relaxed plan. case, maximum amount v
produced single action v, heuristic value increased by:


cps
.
v
increase lower bound number additional actions needed and,
indicate actions might be, serves increase heuristic value states whose
relaxed plans resource production shortfalls. does, however, two main limitations. First, relaxed plan extraction (such approach shown Algorithm 2) chooses
actions without consideration undesirable resource consumption side-effects.
good search choice might lead state worse heuristic value purely
accident choice achieving actions (consuming resource unnecessarily). Second,
increasing heuristic value without adding specific additional actions relaxed plan,
helpful actions record fact appropriate resource production helpful.
3.2.2 Cyclical Resource Transfer
phenomenon Cyclical Resource Transfer (CRT) consequence encoding
actions move resources around, combined relaxation negative effects.
encode movement resource, removed one location added another.
removal encoded decrease relaxed building Metric RPG.
result, moving resources appears generate new resource destination, making
movement spuriously attractive alternative production. Consider state 1
unit timber cart location, p1, goal 2 units timber
p1. Clearly, solution plan must involve production timber. However,
valid relaxed plan solution, found using Metric RPG heuristic, is:
0:
1:

(load v1 p1 timber)
(unload v1 p1 timber)

3.2.3 Helpful Action Distortion
problems resource persistence CRT important consequence EHC
search. result relaxed plans misleadingly short lengths,
relaxed plans typically contain production actions useless transfer actions.
situation, production actions often appear helpful action set,
therefore included EHC search, even states could conveniently
applied. refer problem helpful action distortion. illustrate arises,
reference Settlers domain, consider state unit
timber location a, goal unit timber location b. relaxed
plan use timber construct cart load timber onto cart
transport it. planner therefore consider producing timber.
357

fiColes, Coles, Fox & Long

4. Compiling ProducerConsumer Behaviour Mathematical
Program
section describe mathematical program built characterise
interaction numeric variables action choices producerconsumer framework.
4.1 Constraints ProducerConsumer Variables Actions
definition producerconsumer variables (Definition 2.4) implies actions
useful property preconditions variables derived effects
actions, together global variable bounds. Specifically, action a:
produces c units v precondition requiring v d, = ub(v) c,
ub(v) global upper bound v applied. condition
expresses effect upper bound precondition value
v (since v ub(v)).
consumes c units v v must satisfy v lb(v) + c action
applied. Again, expression leads effect precondition tied
one constraint.
ordering actions relaxed (that is, causal relations force
ordered ignored) value v series actions applied, v 0 ,
given by:
X
v0 = v +
Ca .(v, a)
(1)
aA

Ca non-negative (count) variable indicating many times action
applied, v 0 [lb(v), ub(v)] (v, a) defined follows:
produces c units v (v, a) = c;
consumes c units v (v, a) = c;
Otherwise, (v, a) = 0.
Note equation linear, since Definitions 2.2 2.3 require (v, a) constant
v a.
equations support construction mathematical program consisting one
variable action, a, one variable flow equation producerconsumer
variable, v. program is, fact, mixed integer program (MIP), variables
(the action counts, a) represent applications actions, integral. However,
relaxation exploited allow action count variables take non-integral
values, yielding linear program (LP). significant potential benefit
LPs solved far efficiently MIPs.
358

fiA Hybrid LP-RPG Heuristic Planning

4.2 Bounding Action Variables
Within equation associated state variable (i.e. Equation 1), action
corresponding variable denoting many times applied. general
limit number times action applied. However, numeric decrease
effects propositional delete effects may impose constraints practice, due limited
availability resources. example, applying action increases v expense
decreasing w, w resource producer, limit
Ca implicit consequence instance Equation 1 governing value w.
Specifically, ai never exceed w/(w, a): value w divided change causes
w. Moreover, w monotonically decreasing (w, a) constant action
a, global upper bound Ca set w(I)/(w, a), w(I) value w
initial state, I.
action increases v expense irreversibly deleting fact p, fact
precondition, clearly applied one-shot action (Coles,
Coles, Fox, & Long, 2009). However, contrast numeric delete effects discussed
above, captured producerconsumer constraints concerned
numeric change. However, constraint use captured
setting upper bound Ca 1. Moreover, collection actions a0 ...an1
depend fact p irreversibly delete it, say form one-shot
action set p, add constraint:
Ca0 + Ca1 + ... + Can1 1

(2)

4.3 Assignment Constraints
general, direct assignments values variables cannot represented directly constraints following form Equation 1. Assignments correspond, effectively, statedependent increases decreases. instance, assignment value 2 variable
v, state v = 0, equivalent producing 2 units, equivalent consuming
1 unit applied state v = 3. However, producerconsumer equations
notion state, coefficients action variables denote production
consumption. Therefore, state variables subject constant-valued change
MIP cannot used encode general assignment effects without extending
allow quadratic constraints (that is, constraints involving products pairs variables).
However, specific conditions assignments safely modelled
within mathematical program retaining linearity constraints.
One class assignment effects encoded MIP
actions assignment effects variable, v = k, applied states
v = c known constant, c. case, effect rewritten
increase effect v k c, making assignment actions follow standard pattern
producer/consumer actions. particular case rewriting made possible
following conditions hold set actions A:
1. action depend upon affect v condition satisfied
achieved actions actions A.
2. Applying action precludes assignments v.
359

fiColes, Coles, Fox & Long

conditions ensure set actions assign v form one-shot action
set value v assumed 0 prior application one actions
set, action set rewritten increase v assignment value.
situation one arises encodings objects created certain actions
objects associated metric variables initialised object creation
(such capacity newly created vehicle Settlers domain).

5. Linear ProgrammingRelaxed Planning Graph Heuristic
defined producerconsumer behaviour shown supports construction
MIP action ordering relaxed. MIP is, principle, hard solve (constructing
solutions NP-hard), basis heuristic evaluation states seems sensible
relax integrality constraints action variables reduce problem
linear program. first consider LP used two stages heuristic
evaluation state (reachability analysis relaxed plan extraction)
reconsider question whether relaxation linear program necessary practice
compromise might full MIP LP.
5.1 Overview
context use LP forward state-space search planner. task
intend use heuristic evaluation states. Thus, assume
state (a complete assignment variables define problem,
propositional numeric) interested estimating number actions
required transition goal state. approach use based
strategy used MetricFF: first construct reachability analysis using layered graph
alternating facts actions extract relaxed plan. determine whether
action applied reachability stage check propositional preconditions
usual way numeric preconditions checked determining whether values
reachable ranges recorded metric variables satisfy condition.
reachable ranges calculated using LP described, explain below.
Extraction relaxed plan involves determining actions support required
conditions (both goals preconditions selected actions), conditions
involve numeric variables use LP decide actions required
many used.
5.2 Using LP Graph Expansion
graph expansion phase calculation Metric RPG heuristic seen
layer-by-layer relaxed propositional reachability analysis, synchronised relaxed
numeric bounds analysis. Definition 3.1 shows numeric variable bounds appear
graph expansion algorithm two places. First, F (i) used determine
actions appear A(i + 1), next action layer (those whose preconditions within
reachable range). Then, actions deemed applicable used update variable
bounds subsequent fact layer, F (i + 1).
360

fiA Hybrid LP-RPG Heuristic Planning

maximise: v00
v00 = 0 + 2.CC
v10 = 2 2.CC
v00 0
v10 0
C0

v00
1
1

v10

1

CC
-2
2

=
=




1
1
1

(a) Equations

max
0
2
0
0
0

v00 [0, 2]
v10 [0, 2]
(c) Solutions min/max

(b) RowColumn

Figure 2: LP maximise value v0 layer F (i + 2) Figure 1 (treating layer
initial state construction)

Due relaxed nature way numeric values considered, metric RPG
tends produce highly optimistic bounds numeric values. Returning Figure 1,
see that, effect, action C converts two units v1 two units v0 and,
initially, two units v1 present. Hence, most, could hope produce two
v1 , F V (i + 2), upper bound v1 already 4. Ignoring consumption effect
C makes possible produce arbitrary amounts v0 : C applicable upper
bound v1 greater equal two, reality true long C
yet applied.
accurate estimate variable bounds layer F V (i) found using
LP encoding described Section 4.1. model parameterised follows:
action variables corresponding actions A(i) used, ensures
reachable actions considered computing resource bounds. relevant
one-shot action constraints included. absence restriction number
action applications contrasts constraint used Metric action
may applied per action layer. practice prevent LP variables
becoming unbounded, set finite, large maximum value action variables.
initial value variable v set state, S, evaluated.
post-value variable, v 0 , F V (i)[v], range values could reach
F V (i). always, v 0 [lb(v), ub(v)].
Substituting parameters producerconsumer equation (Equation 1) yields:
X
F V (i)[v] = S[v] +
Ca .(v, a)
(3)
aA(i)

model, use LP solver find upper lower bounds
F V (i)[v], setting objective function accordingly.
Returning example, consider finding upper bounds variables F (i+2)
Figure 1 starting state corresponding one given figure (thus,
considering constraints layer 2 following state treating starting
point). corresponding LP shown Figure 2, primed variables ones
361

fiColes, Coles, Fox & Long

use represent values numeric variables layer interest (i.e.
case layer 2 ahead state evaluated). Maximising v00 , i.e. using upper
bound F V (i)[v0 ], yields result 2: greater value possible, since setting C
value greater 1 (and thus producing v0 ) would lead violation constraint
v10 0. ranges variables computed, using LP four times (minimising
maximising two variables), shown Figure 2c. seen,
improve bounds calculated situation MetricFF (Figure 1),
v00 [0, 4] v10 [2, 2] respectively.
5.2.1 Notes LP Efficiency
LP solved twice per variable per layer expanding planning
graph, important steps taken minimise computational cost. reduce
costs using combination techniques, avoid needing solve LP
computing bound given variable, others reduce cost solving
LP itself.
1. First, consequence termination criteria RPG expansion (Section 3.1.1),
need compute upper (lower) bound given variable current
value large enough (small enough) satisfy preconditions goals
appears. case, avoid solve LP determine variable
bound, instead re-use bound computed previous layer, without
affecting behaviour heuristic.
2. variable never appears numeric precondition goal, entirely
excluded LP.
3. bounds variables change monotonically additional layers added
planning graph. Therefore, computing new upper (lower) bound variable v temporarily add LP constraints corresponding bounds
computed preceding layer (each added separately variable first minimised maximised). so, refuse admit tighter variable bound
previous layer.
4. Finally, actions increase (decrease) effect variable yet
added LP, need compute upper (lower) bound variable,
effect bound variable increased (decreased)
beyond value state evaluated.
5.3 Basic Use LP Solution Extraction
consider LP used give guidance action selection relaxed
plan extraction. First, observe LP directly affected propositions,
hence cannot used find actions able achieve given fact. Thus,
concern LP used identify actions use attain
numeric subgoals either top-level numeric goals, numeric preconditions
actions chosen solution extraction.
362

fiA Hybrid LP-RPG Heuristic Planning

Algorithm 3: Adding weighted action relaxed plan

1
2
3
4
5
6
7
8
9
10
11
12

Data: R metric RPG, action include relaxed plan, q subgoal
queue, w weight
foreach propositional precondition pre
l layer pre first appears;
l > 0
(pre, k) q[l].prop
k < w k w;
else insert (pre, w) q[l].prop;
foreach numeric precondition pre
l layer pre first appears;
l > 0
({pre}, k) q[l].num
k < w k w;
else insert ({pre}, w) q[l].num;

first key difference using LP relaxed plan extraction concerns
choice actions achieve numeric preconditions. original metric RPG heuristic,
given numeric precondition (e.g. x c) fact layer + 1 regressed
beneficial numeric effects layer i, giving residual numeric precondition (e.g. x c0 )
achieved fact layer i. (This process shown lines 28 41 Algorithm 2).
lp-rpg case, shown Algorithm 4, numeric precondition layer l (temporarily)
added LP generated layer l (as constraint (line 22). find actions use
achieve this, LP solved (line 23), objective minimise weighted
sum across action variables (one possible weighting scheme suffice
purpose minimise sum action variables, though return question
appropriate weighting schemes later paper). Finally, actions whose corresponding
variables non-zero (line 24) added relaxed plan (lines 25 34).
Second, must accommodate fact LP, relaxation underlying
MIP (in action variables integers), may solved applying actions nonintegral number times. simple example, several actions increment
given variable, alone would suffice achieve goal value variable,
valid optimal solution LP sum variables corresponding actions 1. every action non-zero action count variable
solution considered applied relaxed plan length could greatly over-estimate
required number actions. mitigate problem, subgoal (e.g. x c) arising
solution extraction associated weight, weights, along
values given action variables LP, used update relaxed plan length.
weights manipulated throughout Algorithms 3 4, use summarised
follows:

Initially, goal fact added subgoal queue associated weight 1, i.e.
achieved, entirely. note that, contrast Algorithm 1,
363

fiColes, Coles, Fox & Long

Algorithm 4: Relaxed plan extraction LP

1
2
3
4
5

Data: R - metric RPG; P G - propositional goals;
N G - numeric goals
Result: ha - helpful actions, h - heuristic value
ha , h 0;
q deepest-first priority queue goal layers;
foreach p P G
l layer p first appears;
insert (p, 1) q[l].prop;

|N G| > 1
l final layer R;
8
insert (N G, 1) q[l].num;

6
7

9
10
11
12

else
f fact N G;
l layer f first holds;
insert ({f }, 1) q[l].num;

q empty
(l, hprop, numi) pop(q);
foreach (p, w) prop
h h + w;
achiever p;
action layer 1 add ha;
19
call Algorithm 3 R, a, q, w;
20
prop prop \ add effects a;

13
14
15
16
17
18

21
22
23
24
25
26
27
28
29
30
31
32
33
34

foreach (G, w) num
LP LP(l) + constraint(s) G;
solve LP, minimising weighted action sum;
av {action variable (a = c) LP | c 6= 0};
foreach av
h h + w.c;
layer 1 add ha;
foreach propositional precondition pre
l layer pre first appears;
c min[c, 1];
(pre, k) q[l].prop
k < w.c k w.c;
remove (pre, k) q[l].prop;
else insert (pre, w.c) q[l].prop;

subgoal queue records layer goal introduced well
associated weight.
action chosen applied Ca times achieve queued propositional/numeric sub-goal g, either:
chosen applied (i.e. Ca = 1) achiever propositional
subgoal g, associated weight w;
364

fiA Hybrid LP-RPG Heuristic Planning

action applied (given non-zero value Ca ) solving LP
achieve numeric subgoal g, associated weight w.
cases, relaxed plan length incremented Ca .w.
weight given preconditions w0 = w.min[Ca , 1]. weights
preconditions used update weight attached achieving corresponding sub-goals earlier layers:
propositional precondition p already recorded subgoal earlier
layer, weight k, weight updated max[k, w0 ]. Otherwise,
p added subgoal RPG, satisfied first layer
appears, weight w0 .
case added support propositional sub-goal: numeric
precondition p already recorded subgoal earlier layer,
weight k, weight updated max[k, w0 ]; otherwise, p added
subgoal RPG, satisfied first layer appears,
weight w0 .
5.4 Consequences Use LP Solution Extraction
Use LP aid identification selection actions support achievement
numeric goals subgoals extraction relaxed solution lead
important consequences heuristic guidance offered relaxed solution.
already noted problem non-integral fragments actions might combined
achieve numeric effects indicated managed handling fractional
preconditions fractional action costs. However, potential problems
discuss.
5.4.1 Partially Applied Helpful Actions
Consider situation precisely five possible ways achieve particular
numeric goal, uses three actions. simple example small
problem Settlers domain, five carts unit timber available
location A: goal one unit timber location B achieved loading
timber onto carts A, moving B, unloading B.
metric RPG heuristic used achieve goal, three actions would used.
Working backwards goal, selected actions would be:
action layer three, unload action (from cart c) increase amount timber
B;
action layer two, action move cart c B;
action layer one, action load unit timber onto cart c.
solving LP achieve goal (ignoring propositional preconditions),
objective minimising sum action variables, solution returned
365

fiColes, Coles, Fox & Long

objective value 2. denote relevant load/unload action variable pair
cart (li , ui ), pool solutions could returned satisfying:


li = ui

i[1..5]

(

X

(li + ui )) = 2

i[1..5]

Then, non-zero variable ui = k relevant action move cart B
added relaxed plan, weight k (line 19, Algorithm 4).
purposes providing contribution relaxed plan length, unimportant
solutions returned: sum action variables 2,
sum move actions added 1, giving total relaxed plan length 3. However,
discussed Section 3.1.2, relaxed plan used determine set helpful actions:
effect common actions relaxed plan chosen
action layer one. example, action layer one consists action (or actions)
load unit timber onto cart A. original metric RPG case, exactly one action
would used. However, using LP five actions could (fractionally) used.
consequence within pool LP solutions could returned,
lead search much greater branching factor, case factor
five greater.
source problem relaxation integrality constraints action
variables extent affects search depends precise solution returned
LP solver: different solvers may greater lesser tendency return solutions
action variables assigned non-integral values. extreme response
problem would revert MIP require action variables integral rather
real-valued. Alternatively, focussing issue identified here, one could require
action variables corresponding actions action layer one integers. either
case, result mixed integer programming problem, since cost MIP-solving
exponential number integer variables, difference variants
significant. change need made point switch using
LP solution extraction rather graph expansion as, prior this, assignments
action variables unimportant (only value objective function used).
course, price pay potentially significant, MIP-solving NP-hard,
LP-solving polynomial. However, exchange shift complexity,
example given above, left single helpful action, longer possible
fractionally load timber onto cart: one cart must chosen. extent
two possible integer-modifications affect search performance considered later
evaluation.
5.4.2 Preferring Earlier Actions
Within Metric RPG heuristic explicit preference using actions
appear earlier relaxed planning graph. shown Algorithm 1, fact
needed, either goal satisfy precondition action chosen insertion
relaxed plan, queued sub-goal satisfied first fact layer
appeared. Then, action chosen support fact, amongst
earliest possible achievers. intuition behind preference earlier actions based
366

fiA Hybrid LP-RPG Heuristic Planning

observation that, later action appears relaxed planning graph,
greater number actions need added relaxed plan support
preconditions. Therefore, preferring earlier actions usually leads shorter relaxed plans
hence closer approximations optimal relaxed plan length.
Within LP, objective set minimise sum action variables (i.e. use
actions possible), distinction actions appear earlier
RPG appear later. Recalling LP disregards propositional
preconditions actions, failing take account action first added
RPG lead LP-based relaxed plan extraction generating poor quality solutions
and, consequently, poor search guidance.
address this, pressure generated within LP objective function
tuned prefer actions need fewer supporting actions relaxed plan.
achieved forcing LP favour actions appear RPG earlier. encode
preference earlier actions weighting scheme action variables
objective function. Actions appearing earlier given smaller weights
appear later. propose (and, later, evaluate) two ways achieving this. first,
simpler, use geometric series dictate coefficient given action variable
based layer l first appears. case, objective coefficient
is:
kl
k < k > 1.
value k controls extent earlier actions preferred, interpreted treating k.n actions selected layer l exactly good selecting n actions
layer l + 1 (so anything less k.n actions layer l preferable selecting
n actions layer l + 1). Throughout remainder paper, refer scheme
layer-weighting value k.
second option record, cost action, estimate number
actions needed support propositional preconditions, use weight
objective function. achieved using RPG cost propagation algorithm
Sapa (Do & Kambhampati, 2003). achieve this, planning graph expanded,
costs fact action recorded updated layer. Initially, fact
p state evaluated, cost fact layer zero, cost(p, 0), zero. (For fact
p true time zero, cost(p, 0) = .) fact costs used derive action
costs, using rules akin used hadd /hmax (Bonet & Geffner, 2001). cost
action layer t, cost(a, t) defined according one either:
cost max (a, t) = max cost(p, 1)
ppre(a)

cost sum (a, t) =

X

cost(p, 1).

ppre(a)

action costs, turn, used update costs proposition
subsequent fact layer, cost fact reduced cheaper
way achieve it. action layer t, potentially reduce cost
propositions p adds:
cost(p, t) = cost(a, t) + 1 iff (cost(a, t) + 1) < cost(p, 1)
= cost(p, 1) otherwise
367

fiColes, Coles, Fox & Long

planning graph expanded, process alternating action cost estimation,
fact cost estimation, used propagate cost information RPG.
setting objective LP, use cost action, cost(a, t), coefficient
action variable corresponding a. Using cost propagation described,
costs derived solely basis propositional preconditions effects. Therefore,
cost(a, t) estimate number actions needed support preconditions
a. purposes, desirable: LP will, itself, add actions support numeric
preconditions, estimate number actions needed support propositional
preconditions action measure cost impact upon relaxed plan due
action selected.

6. Adding Propositions LP
Benton et al. (2005) explore idea using LP guide search propositional planning
problems context over-subscription planning. work LP used
determine goal subset achieve, gain maximum utility. Whilst successful
achieving aim, authors observe use LP heuristic guide search
expensive, indeed expensive feasible. propositions encoded
LP way propose, task solving LP becomes equivalent solving
entire planning problem relaxed action ordering non-integer action variables.
section, reconsider inclusion propositions LP, considering spectrum
possibilities including propositions way include propositions.
Even though focus work numeric problems, including propositions
LP might still interest. instance, supporting propositional goal might
require consumption numeric resources. worst case, one could compile
problem numeric goals become preconditions action achieves
dummy propositional fact goal, modify problem goal goal. Since
numeric goals modified problem, LP used solve
individual preconditions dummy action (inevitably) chosen, rather
requiring goals satisfied conjunction, described Section 7.1. Since
dummy-goal model merely reformulation original problem, information
theoretically accessible conveyed LP. generally, hope
identify intermediate landmark propositions, well final goals, could usefully
encoded LP.
6.1 Adding Propositional Goals LP
Although LP describe Section 4 contain specific reference propositions, hence propositional goals, formulate constraints act proxy
them, considering actions achieve them. need introduce additional
variables. Instead, add constraints ensure least one achiever chosen
propositional goal. goal fact g true state evaluated,
list actions [a0 ..an1 ] achieve g, add constraint LP
recent layer planning graph:
a0 + ... + an1 1.
368

fiA Hybrid LP-RPG Heuristic Planning

is, least one achieving action must used or, specifically, given actions
partially applied, total least one achieving action must used. LP
containing constraints used augment positive termination criteria
graph expansion, detailed Section 3.1.2. terminate first fact layer where:
1. goal propositions F ? F P (i) (as before);
2. goal numeric expressions N ? satisfied (individually) F V (i) (as before);
3. LP used compute numeric bounds layer F (i) still solvable
constraints propositional goals added.
Use goal-checking LP two key consequences. First, actions layer
F (i) cannot used satisfy goals whilst respecting numeric constraints
LP, additional layers added planning graph necessary actions
appeared (or termination criterion reached). Thus, reasoning resource
persistence (Section 3.2.1), heuristic better able recognise cases where, although propositional goals might appear individually reachable, either additional
production needed meet collectively, alternative actions need used,
state dead-end. Second, solution LP used confirm point (3) above, used
indicate actions add relaxed plan achieve propositional goals.
propositional preconditions actions satisfied usual way (line 28
Algorithm 4).
requiring sum action variables selected achieve goals
least one, allowing variables real-valued, LP could, theory, provide
weaker guidance RPG. similar issue noted Section 5.4.1
considering helpful actions, could ameliorated similar manner, namely making
goal-achieving action variables integral. return issue evaluation,
considering whether benefits search.
6.2 Using Landmarks LP
landmark fact (Hoffmann, Porteous, & Sebastia, 2004) propositional fact must
true point every solution plan given planning problem. first work
landmarks (Porteous, Sebastia, & Hoffmann, 2001) proposed method extracting
subset landmarks planning problem based regressing goals using
delete relaxation FF. Since introduction idea 2001 (Porteous et al., 2001),
landmarks come play increasingly important role planning. Recent development new techniques extracting landmarks (Richter, Helmert, & Westphahl, 2008;
Zhu & Givan, 2003) development heuristics based different relaxations (Richter
& Westphal, 2010; Domshlak, Katz, & Lefler, 2010; Helmert & Domshlak, 2009; Karpas &
Domshlak, 2009) allowed planning community exploit landmarks successfully.
relaxed plan extraction phase lp-rpg heuristic relaxes action ordering
propositional preconditions effects might benefit substantially delete-relaxation
landmarks. use landmark facts LP offers mechanism
tightly couple LP RPG, allowing increased information sharing
369

fiColes, Coles, Fox & Long

propositional numeric components heuristic. know landmark
fact must occur solution plan, yet appeared path state
evaluated, add constraints representing LP,
propositional goals. is, sum action variables [a0 ..an1 ] achieving
given landmark must greater equal 1. propositional goals, constraint introduces need provide numeric support action(s) chosen support
landmark. Goals special case landmarks, important feature goals
that, even achieved path current state, true
current state must reachieved. Constraints added LP
ensure this. reflect landmarks achieved path current state,
state modified record record updated new landmarks seen.
approach similar lama (Richter & Westphal, 2010).
set disjunctive landmarks set propositional facts, one must
true solution planning problem. extraction disjunctive landmarks
considered (Gregory, Cresswell, Long, & Porteous, 2004) even difficult
case conjunctive landmarks exploit planning systems.
knowledge certain fact must true allow planner infer certain actions
must present solution plans, inform heuristics. However, disjunctive
landmarks less informative. Disjunctive landmarks often arise problem symmetry.
example, might know order deliver package one place another
loaded truck, truck. disjunctive landmark
package truck generated: even know truck use,
know one disjunctive landmarks must hold. Thus, context numeric
resources, truck must fueled (assuming start empty), might entail
additional costs. therefore interest take account disjunctive landmarks
numeric reasoning.
able make use disjunctive landmarks LP constrain
problem, ensuring support given least one fact within (unreached) disjunctive landmark. dealing standard conjunctive landmarks, constraint
sum least one achiever must added propositional landmark.
disjunctive landmarks, however, constraint slightly different. disjunctive landmark
set L satisfied constituent landmarks satisfied. is, apply
actions:
achieves(L) = {a | eff + (a) L 6= }.
encode disjunctive landmarks LP (assuming yet met)
two possibilities. first add binary variable sf fact f L,
constraints sf take value 1 least total one action
adding f , least one variable sf take value 1. is, least
one disjunctive landmarks toP
fully met. alternative, potentially cheaper,
approach add constraint ( achieves(L)) 1. allows disjunctive
landmark considered satisfied sum across action variables supporting
constituent facts least 1. somewhat weaker constraint individual,
non-disjunctive landmarks, guarantee support least 1
individual constituent fact. instance, two-fact disjunctive landmark satisfied
support constituent fact 0.5. considered approaches
370

fiA Hybrid LP-RPG Heuristic Planning

found negligible difference performance (time taken nodes expanded)
two encodings real saving achieved using relaxed approach.
6.3 Managing Propositional Preconditions Effects
far, considered propositions must achieved planning problem due
goals landmarks. However, second class propositions: that, given
values assigned action variables LP, must supporting actions added
solution relaxed plan.
extend LP capture propositional preconditions effects, first introduce
binary variable f (an integer whose value 0 1) fact f true
state evaluated. involved two constraints. First, actions
+
[a+
0 ...an1 ] add f :
+
a+
0 + ... + an1 f.
case proposition corresponding f goal, f = 1 hence one
achieving actions must positive value (since constraint expressed using
continuous variables, actions might partially applied relaxation). Then,
actions [ap0 ..apm1 ] f precondition:
N.f ap0 + ... + apm1
use N denote (sufficiently) large number. constraint ensures
least one actions depending proposition corresponding f used relaxed
plan, f must positive (that is, corresponding proposition required true
within relaxation). use N ensure f = 1 sufficient satisfy
preconditions many actions. pair constraints effectively conditional version
constraint meet propositional goal, described Section 6.1. cases
proposition neither goal landmark, constraints serve enforce least
one action adds f chosen (has positive value) LP action requiring f
chosen even partially.3
6.4 Recognising Propositional Resources
Finally, consider one case potentially useful model propositions
equivalent numeric form. pddl, finite domain integer resources modelled
two ways: numeric variables, set propositions. Consider following two
formulations fell-timber action Settlers Domain (for simplicity effect
metric tracking variable labour omitted):
(:action fell-timber
:parameters (?p - place)
:precondition (has-cabin ?p)
3. tempting consider replacing constraint, slightly troublesome N , constraints
form f api i. Unfortunately, appropriate action variable, api ,
greater 1 (due multiple applications action) yet f = 1 sufficient satisfy
precondition action applications.

371

fiColes, Coles, Fox & Long

:effect (increase (available timber ?p) 1)
)
(:action fell-timber
:parameters (?p - place ?n0 ?n1 - value)
:precondition (and (has-cabin ?p)
(timber ?p ?n0)
(less-than ?n0 ?n1))
:effect (and (not (timber ?p ?n0))
(timber ?p ?n1))
)
representations models situation, uses different mechanism so. first uses numeric variables, second uses propositions.
using either numeric propositional formulations MetricFF heuristic,
little practical difference guidance given. numeric case, fell-timber
action applied, upper bound amount timber place p increased.
means action consuming amount timber executed subsequent
layers, regardless many actions using resource applied.
propositional case, delete effect timber (i.e. deleting fact
previously some) relaxed so, again, number actions requiring amount
timber applied.
Turning attention lp-rpg heuristic, however, observe although
RPG part heuristic exhibits weakness propositional case,
different relaxation used LP numeric reasoning means consumption
timber would disregarded. LP relaxes action ordering, rather delete
effects (or production/consumption effects), resource modelled numerically,
interaction captured accounted for. therefore interests using
lp-rpg convert resources modelled propositionally numeric formulation,
reasoned LP, rather RPG.
Although formulation resources example instance common
idiom used capture numeric resources propositional encoding, situations
natural model resources propositionally outset. often
case binary resources: resources either present not. resources are,
course, special case general resource model described above. Consider
propositional numeric counterparts action switch water pump:
(:action activate
:parameters (?p - pump)
:precondition (off ?p)
:effect (and (not (off ?p))
(on ?p))
)
(:action activate
:parameters (?p - pump)
372

fiA Hybrid LP-RPG Heuristic Planning

:precondition (<= (pumping ?p) 0)
:effect (increase (pumping ?p) 1)
)
Corresponding actions similarly created switch pump (the fact (on
?p) deleted (off ?p) added, equivalently unit (pumping ?p) consumed).
many senses, natural formulation action first, using propositions.
way binary resources encoded benchmark domains. However,
second formulation equivalent (assuming value (pumping ?p) initial state
1 0). interaction propositional resource resources
identified planning problem, little motivation add LP, since
numeric support required. case binary resource impact another
numeric variable is, shall see, efficient model numeric resources.
Suppose water pumps control flow water. Two ways model
pddl shown below:
(:action activate
:parameters (?p - pump)
:precondition (off ?p)
:effect
(and (increase (water-flow) 1)
(not (off ?p))
(on ?p))
)
(:action activate
:parameters (?p - pump)
:precondition (<= (pumping ?p) 0)
:effect (and (increase (pumping ?p) 1)
(increase (water-flow) 1))
)
first two actions switches pump (a binary, propositional resource)
produces unit (water-flow). actions domain preconditions
water flow, action run water wheel precondition ( (water-flow) 3)
interaction propositional numeric variables problem.
use first model action, RPG capture propositional part
action (whether pump off) LP encode numeric part
action. Since RPG relaxes delete effects represent fact (off ?p)
longer true and, hence, prevent pump switched many times.
LP built using first formulation, action activate consume numeric
resources, used arbitrarily often increase water flow fact
switching necessary achieve increase ignored. Thus, mixing propositions
numeric resources action degrades information available LP.
Using second formulation, state pump appears LP variable,
use activate deactivate denote actions activating deactivating
373

fiColes, Coles, Fox & Long

pump, constraints pumping 0 variable are:
pumping 0 = init + activate deactivate
pumping 0 0
pumping 0 1
clear activate action applied once: applied
deactivate must applied, corresponding effect water-flow, order
satisfy last constraints. provides useful guidance, indicates
water flow cannot reach 3 units using actions: actions control pumps,
means increasing flow, need added LP, expansion
planning graph. means attain sufficient flow found, dead-end
discovered would otherwise wasted search effort.
Static-analysis techniques capable identifying propositional resources developed (such tim system described Long & Fox, 2000). used
preprocessing stage recognise propositional resources planning domains translate
equivalent numeric resources. use translation approach recognised
resources, resulting numeric preconditions effects included LP
way numeric variables. so, LP order-relaxation rather
RPG delete-relaxation used compute heuristic values, preventing impossible reuse
resource cases described.

7. Extending Scope Numeric Reasoning LP
Section 4 discussed LP encoding captures producerconsumer behaviour
actions, used first version LPRPG (Coles et al., 2008). section discuss
encoding enhanced, use numeric information representing
structure planning problem, improve guidance resulting heuristic
provide planner. address two key issues here: ensuring conjunctions
numeric goals satisfied, considering issue fractionally applied actions
LP.
7.1 Checking Numeric Goals alongside Propositional Goals
Section 6.1 noted constrain LP finds actions achieve
propositional goals. extend further, capture numeric goals, N ? , adding
numeric goal directly LP constraint. propositional goals,
clear advantages terms resource persistence (Section 3.2.1), insisting goals
simultaneously achievable, rather individually achievable. Additionally, though,
raises expressive power numeric goals able handle anything
expressed Linear Normal Form (LNF) LNF formula added
LP constraint.
7.2 Catalytic Resources
far considered numeric variables conform producerconsumer behaviour. However, another related class variables expressed
374

fiA Hybrid LP-RPG Heuristic Planning

LP similar way producerconsumer variables. variables represent resources must present order action applied,
consumed. resources used support many actions4 . example
resource catalyst chemical reaction. catalyst must either created
reactions, bought, present, enables reactions, allows take
place quickly. catalytic reactions, resource must present,
consumed, though could non-catalytic reactions may consume resource.
Another example one might consider building unit plant, support
process. unit must order process occur, built
used many times enable actions without necessitating destruction. Often
planning problems, presence structures represented propositions,
need case. many indistinguishable processing units present, several
units catalyst needed, often makes sense represent numerically5 .
extend lp-rpg heuristic provide guidance problems,
actions require v c affect value v, encounter difficulty
LP encodes notion time: ordering actions relaxed, impossible ascertain
value v specific time order determine whether (catalyst) precondition
satisfied not. therefore add additional constraints LP determine upper
lower bounds v obtained optimistic pessimistic possible ordering
actions whose variables non-zero. find optimistic upper lower bound
v, v v respectively, add constraints:
X
v = v +
a. max((v, a), 0)
(4)
aA
v = v +

X

a. min((v, a), 0)

(5)

aA
upper bound equivalent ordering production actions consumption
actions. lower bound, reversed, equivalent consumption actions
ordered production actions. bounds computed
possible values resource variables reachability graph,
considering actions actually selected execution relaxed plan,
rather could possibly applied. seen, neither requires
explicit notion time.
Using bounds, action precondition v c applied, even
fractionally, must case v c, otherwise precondition action
could never met ordering actions chosen. course, v c, cannot
guarantee legal ordering producers consumers achieves
value. need least feasible opportunity satisfy precondition
added LP introduction binary ([0, 1] integer) variable pair
constraints. actions [a0 ..an1 ] requiring precondition v c, using N
4. note complementary class variables whose values must remain certain level
order actions applied, produced. seem less useful real problems,
nonetheless handled analogous way.
5. Section 6 show could captured LP even expressed propositionally.

375

fiColes, Coles, Fox & Long

denote large number, denote new binary variable, add pair constraints:
N.s a0 + ... + an1
v lb(v) + (c lb(v)).s

(6)

first constraint forces take value 1 actions requiring
precondition v c applied. second constraint determines lower bound
v based value s: = 0, lower bound v lb(v), global lower
bound v. Otherwise, = 1, since action needing precondition applied,
thus v c. constraint = 1 implies least one
actions [a0 ...an1 ] applied. However, since non-zero value makes
LP harder solve, pressure set = 1 reason
precondition must satisfied. important note constraints
added LP problems v c preconditions matched v = c effect.
modified heuristic able support planning models previously could not.
behaviour domains without characteristics entirely unaffected.

8. Results
section present thorough evaluation lp-rpg heuristic: comparing
state-of-the-art numeric planners, considering use different LP solvers performing
ablation studies determine effective many potential different configurations lp-rpg discussed paper. include weighting action variables
LP according RPG layer appear, inclusion propositions
numeric goals LP consideration variables LP remain
integer relaxed real numbers. tests run 3.4GHz
Pentium IV machines limited 30 minutes 1.5GB memory. planner
planner-configuration fails report solution within limits deemed
failed solve problem.
8.1 Evaluation Domains
First discuss selection evaluation domains. purpose selecting domains
select construct examples informative evaluating behaviour
heuristic. Domains numeric variables conform producer-consumer
behaviour identified syntactically different planning strategy
employed. Since syntactic analysis trivial, overhead making decision
negligible, assume performance domains approach
applicable consistent whichever alternative strategy selected deployment.
consider existing competition benchmarks producerconsumer behaviour,
introduce new domains exhibit behaviour. current benchmarks exhibit interesting producerconsumer behaviour, order make comparison informative possible make use do:
MPrime domain IPC 1;
Rovers domain (Numeric variant) IPC 3;
376

fiA Hybrid LP-RPG Heuristic Planning

Settlers domain IPC 3;
alternative encoding Settlers domain (described below);
Pathways domain IPC 5. (We developed metric domain derived
Metric Time variant, replacing durative actions comparable nontemporal actions.)
addition standard IPC problem set Settlers (problems 120), introduce
new problems make full use scope domain. domain allows
building ships transporting materials disjoint islands; however,
benchmark set none problems require this. building ships requires large amount
infrastructure, therefore add problems challenge planners,
materials must imported overseas order achieve goals. first problems
(21) requires merely building ship, 22 requires import timber overseas,
23 requires building housing overseas. 24 adds goals 23, requiring
planner achieve goals mainland build housing island. final
problem, 25, considers 3 disjoint islands resources must combined achieve
goal island. problems requires building much greater infrastructure
required original IPC 3 settlers problems. consider two variants
settlers domain: standard IPC 3 domain, encoding based representation
carts proposed Gregory Rendl (2008). Here, number carts given
location represented numeric variable (carts-at ?location). two
possible move actions carts: one moves cart unit resource one
location another; one moves cart without moving resources, i.e.
cart moves whilst empty. encoding possible carts transport
single unit material, necessary maintain specific named identities
capacities cart.
addition benchmark domains, use two domains created development lp-rpg:
Market Trader Domain (Coles et al., 2008);
Hydro Power Domain.
Market Trader Domain, trader begins small amount money,
goal increased certain level. must achieved travelling
markets, sells collection goods certain price
good type, buys another (lower) price. Money made buying items
cheaper transporting (via camel) locations command
higher price; moving associated cost food required camel.
representation general class real-world trading problems aim
make money buying, transporting selling goods. Hydro Power domain
concerned financial gains, domain different structure: rather
transportation, concerned energy storage using hydroelectric reservoirs.
buying electricity pump water uphill periods low demand, electricity
cheaper, storing potential energy, electricity sold higher price
377

fiColes, Coles, Fox & Long

Domain
Market Trader
Hydro Power
Pathways Metric
Settlers
Settlers Numeric Carts
MPrime
Rovers Numeric
Sugar
Total

lp-rpg
20
27
30
18
23
30
15
18
181

lp-rpg-FF
0
3
21
7
13
30
13
7
94

MetricFF
0
1
13
8
8
28
10
14
82

lpgtd
0
5
0
19
7
30
20
20
101

Table 2: Coverage achieved different planners

times greater demand. domain encoding augmented take account energy
loss: purchasing one unit energy sufficient provide one unit energy later
losses storage process. problem, despite temporal axis,
interested profit made, force planner advance time
specific point: ask sufficient profit made planner
choose advance time necessary. general problem models continuous processes:
customer demand changes continuously. Here, simplify problem discretising
30 minute time intervals, using demand schedule transformer domain (Bell,
Coles, Coles, Fox, & Long, 2009), based UK National Grid figures. original
transformer model represent temporal features problem advance time
action, rather temporal pddl, since lp-rpg temporal planner.
final domain consider Sugar domain (Radzi, 2011). Here, objective
produce sugar industrial processes, refining raw cane. domain
taken set domains designed optimisation planning: several
paths goal, originally included allow planner choice trajectories
challenge find better quality solutions. set domains designed
challenging metric optimisation problems, domains set trivial
standard MetricFF: plan metric ignored almost problems solved
less 1 second6 . Therefore, domains, consider Sugar domain,
remains challenging MetricFF even optimisation required: number
paths appear lead goal large without good guidance difficult
find solution problem.

6. say domains uninteresting present interesting challenge
explored Radzi (2011), using carefully modified variant lp-rpg. However, challenge
find good quality plans, quality determined complex metric simple plan length;
neither MetricFF lp-rpg form discussed difficulty finding poor quality plans
problems.

378

fiA Hybrid LP-RPG Heuristic Planning

markettrader
100

hydropower
10000

LPRPG

1000

LPRPG
LPRPG-FF

LPG

100
10

Time (s)

Time (s)

10

1

1
0.1
0.01
0.1

0.001
2

4

6

8

10
12
Problem Number

14

16

18

20

5

10

15
20
Problem Number

10000

LPRPG
LPRPG-FF

Metric-LPG

100

30

sugar

pathwaysmetric
1000

25

1000

LPRPG
LPRPG-FF

LPG

100
10

Time (s)

Time (s)

10

1

1

0.1
0.1
0.01

0.01

0.001

0.001
5

10

15
20
Problem Number

25

30

2

4

6

8

10
12
Problem Number

settlers
10000

1000

14

16

18

20

settlersnumeric
1000

LPRPG
LPRPG-FF

LPG

LPRPG
LPRPG-FF

LPG

100

Time (s)

Time (s)

100

10

10

1
1
0.1

0.1

0.01

0.01
5

10
15
Problem Number

20

25

5

10
15
Problem Number

mprime
1000

100

25

roversnumeric
1000

LPRPG
LPRPG-FF

LPG

100

LPRPG
LPRPG-FF

LPG

10
Time (s)

10
Time (s)

20

1

1

0.1

0.1

0.01

0.01

0.001

0.001
5

10

15
20
Problem Number

25

30

2

4

6

8

10
12
Problem Number

14

16

18

Figure 3: Comparison MetricFF lpgtd: time taken solve problems

379

20

fiColes, Coles, Fox & Long

Market Trader
200

Hydro Power
300

LPRPG
Best known

LPRPG
LPRPG-FF

LPG
Best known

180
250
160
200
Solution Quality

Solution Quality

140
120
100

150

100
80
50
60
40

0
2

4

6

8

10
12
Problem Number

14

16

18

20

5

10

15
Problem Number

Pathways Metric
9000

7000

30

LPRPG
LPRPG-FF

LPG
Best known

250

200
Solution Quality

6000
Solution Quality

25

Sugar
300

LPRPG
LPRPG-FF

Metric-LPG
Best known

8000

20

5000
4000

150

3000

100

2000
50
1000
0

0
5

10

15
Problem Number

20

25

30

2

4

6

8

10
12
Problem Number

Settlers
900

700

1000

18

20

LPRPG
LPRPG-FF

LPG
Best known

800
Solution Quality

600
Solution Quality

16

Settlers Num. Carts
1200

LPRPG
LPRPG-FF

LPG
Best known

800

14

500
400
300

600

400

200
200
100
0

0
5

10

15
Problem Number

20

25

5

10

M-Prime
300

250

20

25

Rovers Numeric
300

LPRPG
LPRPG-FF

LPG
Best known

250

LPRPG
LPRPG-FF

LPG
Best known

200
Solution Quality

200
Solution Quality

15
Problem Number

150

150

100

100

50

50

0

0
5

10

15
Problem Number

20

25

30

2

4

6

8

10
12
Problem Number

14

Figure 4: Comparison MetricFF lpgtd: plan length

380

16

18

20

fiA Hybrid LP-RPG Heuristic Planning

8.2 Comparison Planners
first compare performance lp-rpg existing numeric planners. use
found strong (though uniformly best) configuration planner,
demonstrate subsequent sections:
Landmarks Propositional Goals added LP (as Section 6.1);
weight action variable objective function used solution extraction 3l , l layer appeared RPG expansion;
Action variables corresponding actions action layer 1 integral;
IBM ILOG CPLEX version 12.1.0 used LP solver.
compare two historically successful numeric planners: MetricFF (Hoffmann, 2003) lpgtd (Gerevini et al., 2006). remain state art, many
modern planners (e.g. lama) handle numeric preconditions, action costs.
clarify differences performance, compare lp-rpg-FF: reimplementation MetricFF based lp-rpg code difference that, computing
upper- lower-bounds numeric variables RPG expansion, lp-rpg-FF allows
actions applied many times action layer, rather per action
layer MetricFF. Since publication earlier comparison lpgtd (Coles et al.,
2008), new improved version lpgtd produced. version lpgtd
performs much better earlier version, use results here.
consider variant lpgtd, Metric-lpgtd (Gerevini, Saetti, & Serina, 2008), designed
responsive plan metrics based numeric variables. experiments showed
Metric-lpgtd perform significantly differently lpgtd generating first
feasible plans problems plan length metric, apart Pathways domain lpgtd crashes problems. Therefore, report performance lpgtd
domains except Pathways report figures Metric-lpgtd.
interesting pattern emerges relative performance planners across set
evaluation domains, shown Figure 3. domains organised top
strongly numeric, relying propositions, towards bottom
propositional structure consequently less numeric structure. two
heavily propositional domains (MPrime Rovers) lpgtd generally
successful planner, solving problems evaluation sets, often
fastest planner problems. pattern holds standard competition
problems (1-20) competition formulation Settlers domain. MetricFF
performs quite well MPrime Rovers domains, struggles Settlers
domain due numeric structure present.
strongly numeric domains, however, lpgtd performs poorly: indeed fails
solve single problem Pathways Market Trader domains. due
crashing, rather planner searches exhausts resource limits without finding
solution. Hydro Power, lpgtd solves five easiest problems, able
scale beyond this. experiments observed lpgtd struggles domains
limited propositional structure generally, search guidance gets
numeric problems poor. Comparing two Settlers variants gives
381

fiColes, Coles, Fox & Long

interesting insights: carts turned numeric resource, lpgtd struggles
much solving 7, instead 19 problems, whereas performance lp-rpg fact
improved. Note although lpgtd successful IPC 3 problems, cannot solve
richer problems ship building overseas transport required; whereas lp-rpg
capable solving instances.
Turning attention comparison MetricFF observe problems
solved planners generally solved quickly MetricFF, particularly
domains propositional structure. lp-rpg additional
overhead solving LP state (and partly, course, due highly efficient
MetricFF code-base). Occasionally general pattern broken, lp-rpg faster;
slight variations ordering heuristically equivalent states lead
significant differences performance. results lp-rpg-FF show similar
coverage MetricFF, although sometimes solving different problems (again
branch orderings different code base cause differences, marked
Pathways Sugar domains), serve demonstrate basic
implementation performing drastically differently standard MetricFF causing
gains observe.
Looking numeric domains particular, lp-rpg heuristic able provide much better guidance, allowing lp-rpg solve many problems MetricFF.
Notably, Market Trader domain neither MetricFF lp-rpg-FF solve
problems. due poor guidance standard RPG heuristic gives domain, relaxing transfer numeric resources. relaxed plan buy item
repeatedly sell item sufficient profit made. Again, Hydro Power,
similar situation occurs: one unit energy pumped up, unit
energy repeatedly sold future time day, making sufficient profit without
guidance. Pathways, chemical reactions must take place, relaxation used
MetricFF allow units substance used repeatedly, several different
reactions, despite fact used consumed. lp-rpg heuristic permit therefore gives much better search guidance, allowing lp-rpg
solve problems domain. numeric resource transfer present Settlers
domain leads poor guidance MetricFF heuristic MetricFF able solve
problems result. use LP effective domain allowing
problems solved. different formulations seem make little difference
coverage MetricFF, neither making problems easier MetricFF solve.
quality solutions (plan length) produced different planners displayed
Figure 4. emphasize lp-rpg current form making attempt
minimise general measure plan quality, results merely intended give
indication whether large degradation, indeed fortuitous increase,
quality moving using standard RPG heuristic hybrid lp-rpg approach.
potential improve plan quality using lp-rpg-style approach explored
work domains preferences (Coles & Coles, 2011) range
different metrics (Radzi, 2011). None problems use specified metric functions
minimise, instead use number actions solution plan. value
RPG heuristic tend minimise. None planners run optimisation
mode (where available) simply report first plan found search.
382

fiA Hybrid LP-RPG Heuristic Planning

domains quality solutions produced lp-rpg comparable
produced MetricFF lpgtd. sugar domain lp-rpg heuristic compares
favourably lpgtd, although could perhaps hope running lpgtd quality mode
would enable produce better solutions. Pathways, lp-rpg produces particularly
long solutions, trade off, able scale solve far problems.
return issue solution length domain considering weighting
action variables LP solution extraction.
summary, lpgtd seems generally successful domains sufficient propositional structure MetricFF generally efficient problems
capable solving. structure domain becomes heavily numeric
planners perform poorly. lp-rpg, however, able solve many problems
planners, making use search guidance LP captures numeric
interactions well.
8.3 LP Solvers
lp-rpg construction use LP performed using functions commonly
available wide range LP solvers: adding variables constraints model, setting
variable bounds, marking whether variables real integer valued, changing objective
function, on. current implementation employs minimal abstraction layer
lp-rpg LP solver itself, almost LP solver used.
section, consider use three LP solvers:
IBM ILOG CPLEX version 12.1.0, commercial mixed integer-linear programming
solver.
COIN-OR LP (CLP) version 1.12.0, open-source LP solver. models feature
integer variables, CLP used within COIN-OR Branch-and-Cut (CBC) version 2.5.0,
is, again, open-source.
LPSolve version 5.5.0.13, open-source mixed integer-linear programming solver.
experiments LP solvers, found CPLEX substantially
robust two, particularly LP extended include satisfying
propositional goals landmarks. Thus, purposes comparison here,
use configuration lp-rpg (equivalent used earlier paper (Coles et al.,
2008)) efficient presented elsewhere paper, robust
(caused CLP LPSolve crash less often) testing:
Propositional goals landmarks added LP: encodes numeric goals
only.
integer variables (potentially) helpful actions, assignment
effects.
layer-weighting scheme k = 1.1 used.
refer configuration limited-lp-rpg.
383

fiColes, Coles, Fox & Long

Market Trader
1000

Hydro Power
10

CPLEX
LPSolve
CLP

CPLEX
LPSolve
CLP

100
1
Time (s)

Time (s)

10

1
0.1
0.1

0.01

0.01
2

4

6

8

10
12
Problem Number

14

16

18

20

5

10

15
20
Problem Number

Pathways Metric
1000

100

25

30

Sugar
10000

CPLEX
LPSolve
CLP

CPLEX
LPSolve
CLP

1000

100

Time (s)

Time (s)

10

1

10
0.1
1

0.01

0.001

0.1
5

10

15

20

25

30

2

4

6

8

Problem Number

Settlers
10000

10

12

14

16

18

20

Problem Number

Settlers Numeric Carts
10000

CPLEX
LPSolve
CLP

1000

1000

CPLEX
LPSolve
CLP

100
Time (s)

Time (s)

100

10

10
1
1

0.1

0.1

0.01
5

10
15
Problem Number

20

25

5

10
15
Problem Number

M-Prime

25

Rovers Numeric
1000

CPLEX
LPSolve
CLP

100

100

10

10

Time (s)

Time (s)

1000

20

1

1

0.1

0.1

0.01

CPLEX
LPSolve
CLP

0.01
5

10

15
20
Problem Number

25

30

2

4

6

8

10
12
Problem Number

14

16

18

20

Figure 5: Time taken limited-lp-rpg solve problems using different LP solvers

384

fiA Hybrid LP-RPG Heuristic Planning

Market Trader
300

Hydro Power
300

CPLEX
CLP
LPSolve

250

200
Plan Length

200
Plan Length

CPLEX
CLP
LPSolve

250

150

150

100

100

50

50

0

0
2

4

6

8

10
12
Problem Number

14

16

18

20

5

10

15
Problem Number

Pathways Metric
3000

2500

25

30

Sugar
55

CPLEX
CLP
LPSolve

CPLEX
CLP
LPSolve

50
45
40

2000

35

Plan Length

Plan Length

20

1500

30
25

1000

20
15

500

10
0

5
5

10

15
20
Problem Number

25

30

2

4

6

8

Settlers
500
450

10
12
Problem Number

14

16

18

20

Settlers Num. Carts
800

CPLEX
CLP
LPSolve

700

CPLEX
CLP
LPSolve

400
600
350
Plan Length

Plan Length

300
250
200

500
400
300

150
200
100
100

50
0

0
5

10
15
Problem Number

20

25

5

10
15
Problem Number

M-Prime
60

50

25

Rovers Numeric
120

CPLEX
CLP
LPSolve

100

CPLEX
CLP
LPSolve

80
Plan Length

40
Plan Length

20

30

60

20

40

10

20

0

0
5

10

15
Problem Number

20

25

30

2

4

6

8

10
12
Problem Number

14

16

18

20

Figure 6: Lengths plans produced limited-lp-rpg using different LP solvers

385

fiColes, Coles, Fox & Long

Domain
Market Trader
Hydro Power
Pathways Metric
Sugar
Settlers
Settlers Numeric Carts
MPrime
Rovers Numeric
Total

CPLEX
20
29
28
9
12
21
28
13
160

CLP
16
30
1
10
11
10
30
12
120

LPSolve
15
30
2
9
15
8
30
12
121

Table 3: Coverage limited-lp-rpg different LP solvers

results tests shown Figure 5, Table 3. Beginning Market
Trader domain, quite clear CPLEX faster CLP domain. LPSolve,
turn, substantially out-performs CPLEX many problems, two orders magnitude.
speed, though, comes cost terms robustness: CPLEX solves 20 problems,
LPSolve solves 15. LPSolve demonstrates strong performance Hydro
Power domain, CLP falls LPSolve CPLEX.
Pathways Metric domain illustrates robustness CPLEX extension beyond
basic producerconsumer model encoding. domain contains actions numeric
preconditions must true, affected action. described Section 7.2, encoding requires integer variable precondition. domain
contains goals referring multiple numeric variables, e.g:
(>= (+ (available cycDp1) (available c-Myc-Max)) 3)))
seen, domain, CPLEX LP solver allows lp-rpg
solve anything smallest problems. Beyond problem 2, CLP unable solve
LP reach goals initial state. Using LPSolve, solvable LPs reported
unsolvable, whilst planner make attempt search, erroneous state pruning
happening result LPs falsely declared unsolvable renders unable find
solutions.
Sugar domain, solver leads planner performing particularly well,
10 problems solved. contrasts earlier results, shown Table 2,
different configuration lp-rpg, using CPLEX richer LPs, able solve
18 problems. However, noted start section, compromise
performance planner using CPLEX allow reasonable comparison CLP
LPSolve: using richer LP models here, CPLEX solves 18 problems LPSolve
CLP perform far worse (falsely claiming LPs unsolvable, returning suboptimal
solutions, detriment performance planner).
two different encodings Settlers domain, carts represented either explicitly using carts-at function, see CPLEX robust
alternative domain encodings. original IPC domain model, LPSolve performs
particularly well, CLP markedly different CPLEX. Using numeric-carts
386

fiA Hybrid LP-RPG Heuristic Planning

Domain

LPSolve
CLP
CPLEX
Build (ms)Solve (ms)Build (ms)Solve (ms)Build (ms)Solve (ms)
Market Trader
5.0
167.1
1.3
137.9
17.3
44.6
Hydro Power
0.7
1.4
0.3
5.9
9.4
6.6
Pathways Metric
0.0
1.3
4.3
8.8
4.4
3.1
Sugar
0.8
7.5
1.6
42.0
17.6
22.9
Settlers
2.6
31.9
2.2
170.6
165.5
87.6
Settlers Num. Carts
2.2
22.9
1.6
71.0
48.0
33.6
MPrime
3.1
5.4
5.3
11.5
76.2
6.3
Rovers Numeric
0.8
4.6
0.7
7.2
14.8
1.9
Average
1.9
30.3
2.2
56.8
44.1
25.8
Table 4: Time spent LP building solving using different LP solvers

encoding, however, CPLEX considerably better solvers, robust
change LP structure arising alternative domain encoding.
MPrime Rovers domain, CLP LPSolve consistently faster
CPLEX.
Summarising, see limited-lp-rpg solve problem using CLP
LPSolve, usually faster using CPLEX, CPLEX offers better coverage
greater robustness grants access richer encodings allow better performance.
order investigate detail planner takes much longer solve problems using CPLEX devised tests. Table 4 shows average time spent,
per state, building solving LP LP solver. (The building time time
required integrate constraints inserted lp-rpg internal model used
particular solver.) Note results necessarily directly comparable: planners necessarily take paths state space, might evaluating
different states. paths are, nonetheless, often similar times taken
strongly indicative. give fairest possible comparison, include table
data problems solved three configurations, data presented
planner across exactly problem set. startling observation CPLEX
typically spends order magnitude longer building LPs two solvers (in
Settlers two orders magnitude). So, often solves LPs quickly, total time spent handling LPs generally greater. Indeed, CPLEX, time spent
solving LPs is, 5 8 domains, dominated time spent building them.
indicates that, although CPLEX good choice use LP solver (it solves
LPs efficiently), practice solvers faster due substantial overheads
building large number LPs necessary (at least one per state). results suggest
robust LP solver low LP building overheads could dramatically improve
performance lp-rpg.
considering solution quality note way LP Solvers
direct search different trajectory solvers return different optimal solutions
LP point search. Recall planner configuration seeks
directly minimise plan length: objective function LPs uses weighted sum
387

fiColes, Coles, Fox & Long

Domain
Market Trader
Hydro Power
Pathways Metric
Sugar
Settlers
Settlers Numeric Carts
MPrime
Rovers Numeric
Total

1l
18
30
30
11
13
22
29
10
163

1.1l
20
29
28
9
19
22
30
13
170

3l
20
27
30
18
18
23
30
15
181

5l
20
27
30
18
17
21
30
15
178

10l
20
26
30
20
16
21
30
15
178

hmax
20
28
30
16
20
23
30
14
181

hadd
20
28
30
16
22
23
29
15
183

Table 5: Coverage varying LP objective function weighting schemes

number actions. Figure 6 shows similar picture arises plan length
time performance: LPSolve often leads planner shorter solutions CPLEX (also
helping explain often faster, since explores search tree smaller depth).
particular happens Rovers Numeric Sugar domains well Settlers
variants. Across domains little variation quality solutions produced.
8.4 LP Objective Function Weighting Schemes
using LP solution extraction phase, one open issue weighting
scheme use objective function. Since LP ignores propositional preconditions
actions, using simple objective minimising sum action variables (layerweighting scheme k = 1) gives LP solver freedom select equally actions
appearing layers RPG, regardless many actions subsequently need
added relaxed plan support them. discussed earlier, using layer-weighting
scheme k > 1, using weighting scheme based estimated costs achieving
preconditions actions, encourage LP solutions favour actions
cheaper apply. hmax hadd heuristics candidates base
estimates cost application actions. course, cases
choice earlier action, one lower costs achieve preconditions,
flawed choice, worse choice would made using k = 1
layer-weighting scheme: simply nature heuristics.
section, evaluate range LP action-variable layer-weighting schemes
action-cost estimate schemes. use k 1, 1.1, 3, 5, 10 layer-weighting schemes.
consider setting action variable weights 1 plus cost meeting propositional
preconditions hmax hadd action-cost estimate schemes. parameters
planners set sensible defaults: action variables first action layer
integral, propositional goals landmarks included goal-checking LP.
Results showing coverage configurations shown Table 5. first
observation weighting scheme better using layer-weighting
k = 1 action variables. particularly noticeable Settlers domain,
several situations earlier actions preferred. example,
388

fiA Hybrid LP-RPG Heuristic Planning

Weight 1 vs Weight 1.1: Time
Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Weight 1.1 (Nodes)

100

Weight 1.1 (Time (s))

Weight 1 vs Weight 1.1: Nodes Expanded

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

10

1

100

10
0.1

0.01
0.01

1
0.1

1

10
Weight 1 (Time (s))

100

1000

1

10

Weight 1 vs Weight 3
Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Weight3 (Nodes)

Weight 3 (Time (s))

100

1000

Weight 1 vs Weight 3: Nodes Expanded

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

100
Weight 1 (Nodes)

10

1

100

10
0.1

0.01
0.01

1
0.1

1

10
Weight 1 (Time (s))

100

1000

1

10

100
Weight 1 (Nodes)

Weight 1 vs Weight 5: Time
Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Weight5 (Nodes)

100

Weight 5 (Time (s))

Weight 1 vs Weight 5: Nodes Expanded

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

1000

10

1

100

10
0.1

0.01
0.01

1
0.1

1

10
Weight 1 (Time (s))

100

1000

1

10

Weight 1 vs Weight 10: Time

Weight 10 (Time (s))

100

1000

Weight 1 vs Weight 10: Nodes Expanded

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Weight10 (Nodes)

1000

100
Weight 1 (Nodes)

10

1

100

10
0.1

0.01
0.01

1
0.1

1

10
Weight 1 (Time (s))

100

1000

1

10

100
Weight 1 (Nodes)

1000

Figure 7: Layer-weighting schemes LP (k = 1 versus k = x different values x)

389

fiColes, Coles, Fox & Long

Weight 1 vs H Max: Nodes Expanded

Weight 1 vs H Max: Time

H Max (Time (s))

100

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

H Max (Nodes)

1000

10

1

100

10
0.1

0.01
0.01

1
0.1

1
10
Weight 1 (Time (s))

100

1

1000

10

100
Weight1 (Nodes)

Weight 1 vs H Add: Nodes Expanded

Weight 1 vs H Add: Time

H Add (Time (s))

100

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

H Add (Nodes)

1000

1000

10

1

100

10
0.1

0.01
0.01

1
0.1

1
10
Weight 1 (Time (s))

100

1

1000

10

100
Weight 1 (Nodes)

1000

Figure 8: Action weighting schemes LP objective function (layer-weighting k = 1
versus action-cost estimate based schemes using hadd hmax )
supposing cart location A, unit resource, initially available
B, needs moved location C. two two-action solutions LP.
Annotating action layer appears, are:
load cart (0), unload cart C (1);
load cart B (1), unload cart C (1).
Using layer-weighting scheme k = 1 two solutions indistinguishable
(each cost 2). However, latter selected, two actions needed support
relaxed plan: moving cart B moving cart C. alternative action
variable weighting schemes set weight loading cart B higher
loading A, leading preference first solution, better outcome
search guidance. similar phenomenon occurs Rovers domain, favouring
earlier actions increases preference recharging rovers close current
locations. domain leads better avoidance dead-ends, since postponing
recharging actions risks possibility rover little charge left get
back recharging location.
data layer-weighting schemes show results peak k = 3, reasonable trade-off minimising number actions chosen LP solution
favouring earlier actions. overall performance hmax same, losing performance
390

fiA Hybrid LP-RPG Heuristic Planning

Time Taken
Nodes Expanded
Plan Length
k=
1.1 3 5 10 hmax hadd 1.1 3 5 10 hmax hadd 1.1 3 5 10 hmax hadd
k=1 X X X X X
X X X X X X
X 7 X X X X
X
k = 1.1
X X X 7
7
X X X 7
X
X X X X
X
k=3
7 7 X
X
7 7 X
X
X X X
X
k=5
X X
X
7 X
7
7 X
X
k = 10
X
X
X
7
X
X
hmax
7
X
7

Table 6: Results Two-Tailed Wilcoxon Signed Rank Tests comparing different LP weighting schemes. X indicates significance (0 = 0.05), colour indicates better performer
(faster, fewer nodes expanded shorter plans).

Sugar Rovers gaining Settlers Hydro Power. Using hadd gives
gains Settlers, leading slightly better coverage layer-weighting scheme
k = 3. difference performance k = 3 hadd weighting schemes
domain-dependent. hadd increases weight action 1 propositional preconditions true state evaluated. Settlers domain,
gives particularly good performance, sound approach, neatly capturing
example case discussed earlier section: loading unloading cart
current location preferable later locations. domains earlier actions
preferable even propositional preconditions require little support, hadd fails
give adequate bias, layer-weighting scheme higher k performs better.
instance, Sugar domain, best coverage obtained using k = 10,
k = 3 scheme performs strongly hadd here.
Examining performance configurations detail, comparing time
taken find solution plans number nodes evaluated, scatterplots comparing
configurations tested layer-weighting k = 1 shown Figures 7
8, layer-weighting schemes action-cost estimate based schemes. lprpg usually exhausts time limit 30 minutes memory limit, time-taken
scatterplots closely similar coverage table. Coverage directly reflected
number points far right graphs, indicating layer-weighting scheme
k = 1 (the x-axis) unable find solution within 30 minutes, lp-rpg using
different weighting scheme able solve problem. points
k = 3 hadd schemes, points hadd appearing predominantly
Settlers domain k = 3 spread across domains.
Since always clear scatterplots whether one configuration better
whether differences significant, used Two-Tailed Wilcoxon
Signed Rank Test compare pair tested configurations terms time taken
nodes evaluated, plan length.7 tests performed p = 0.05. results
tests summarised Table 6. number interesting observations made:
7. Wilcoxon signed-rank test non-parametric statistical test used compare set matched
samples (such pairs results two different planners sequence problems)
assess whether population mean ranks differ (i.e. paired difference test). useful
absolute values necessarily comparable samples drawn completely

391

fiColes, Coles, Fox & Long
1l vs 1.1l: Plan Length
10000

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000
3l (Plan Length)

1000
1.1l (Plan Length)

1l vs 3l: Plan Length
10000

100

100

10

10

1

1
1

10

100

1000

10000

1

10

100

1l (Plan Length)

1l vs 5l: Plan Length
10000

10l (Plan Length)

5l (Plan Length)

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

100

10

100

10

1

1
1

10

100

1000

10000

1

10

1l (Plan Length)

1000

10000

1000

10000

1l vs hadd: Plan Length
10000

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

hadd

1000

100
1l (Plan Length)

1.1l vs hmax
10000

hmax (Plan Length)

10000

1l vs 10l: Plan Length
10000

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

1000

1l (Plan Length)

100

10

100

10

1

1
1

10

100

1000

10000

l

1

10

100
l

1.1 (Plan Length)

1 (Plan Length)

Figure 9: Effect quality varying action weighting schemes LP objective function

k = 3 gives better coverage k = 5 k = 10, take significantly
different amount time explore significantly different number nodes.
is, however, significant difference time taken nodes, favour k = 3,
compared configurations tested.
action-cost based weighting schemes slower layer-weighting schemes
k 3. Furthermore, compared k = 3, expand nodes.
unknown distribution. two-tailed version makes assumption two contenders
better performance (i.e. lower mean rank).

392

fiA Hybrid LP-RPG Heuristic Planning

key strength action-cost based weighting schemes lies quality
solutions found. general trend, layer-weighting schemes gain coverage lose
quality k increases. action-cost based schemes generate significantly shorter
plans configuration tested, including layer-weighting k = 1.
increase plan length plans found using layer-weighting scheme increasing k seen Figure 9. reason increase quite clear: basic
objective function LP minimise number actions. However, weightings
added actions according RPG layer appear, longer plans
make use earlier actions become attractive. increase plan length is,
however, largely restricted two domains. first, worst affected, Pathways Metric, increase k causes preference reactions less efficient (in terms
number actions needed) performed using actions earliest layers
planning graph. second Settlers Numeric Carts, increase k
leads solutions preference resource production refinement approaches
less efficient, comprise actions appear earlier planning graphs.
perhaps expected, two domains excluded statistical analysis,
significant difference plan length k = 3 action-cost based
schemes.
weighting schemes tested best results obtained using k = 3 hadd :
single best option. former faster, expands fewer nodes, gives good
balance coverage across domains used. latter less prone variations plan
quality domains, strong performance Settlers domain leads two
problems solved overall within test domains.
8.5 Use Integer Constraints
Section 5.4.1 discussed fact LP relaxation MIP, proposed
certain situations may beneficial relax action variables, making
integral. section, explore hypothesis, considering five configurations
lp-rpg:
1. Minimal Integers: actions assignment effects (as Section 4.3) integers.
2. First-layer: above, variables actions appearing RPG layer 1 (the potentially helpful actions) integral.
3. Propositional-Goal Achievers: above, variables actions achieve
propositional goals landmarks integral.
4. Numeric-Goal Achievers: above, additionally, variables actions affecting
numeric state variables appear numeric goals integral.
5. All: (action) variables integral.
coverage configurations shown Tables 7 8, layerweighting using k = 1.1 k = 3, respectively. k = 3 results, coverage fairly
insensitive configuration used. peak coverage Numeric Goal
393

fiColes, Coles, Fox & Long

Domain

Minimal
First-Layer Prop. Goal Num. Goal

(Assignments) Actions
Achievers Achievers Variables
Market Trader
20
20
20
20
20
Hydro Power
23
29
29
29
29
Pathways Metric
30
28
28
30
29
Settlers
21
19
19
19
19
Settlers Num. Carts
22
22
22
22
21
MPrime
30
30
30
30
30
Rovers Numeric
14
13
13
13
15
Sugar
10
9
9
9
19
Total
170
170
170
172
182
Table 7: Coverage varying action variables integer MIP (layer-weighting
k = 1.1)

Domain

Minimal
First-Layer Prop. Goal Num. Goal

(Assignments) Actions
Achievers Achievers Variables
Market Trader
20
20
20
20
20
Hydro Power
23
27
27
29
29
Pathways Metric
30
30
30
30
30
Settlers
20
18
18
18
15
Settlers Num. Carts
22
23
23
23
23
MPrime
30
30
30
30
30
Rovers Numeric
15
15
15
15
15
Sugar
20
18
18
18
20
Total
180
181
181
183
182
Table 8: Coverage varying action variables integer MIP (layer-weighting
k = 3)

Achievers configuration, though difference worst configuration
3 problems. Using k = 1.1, marked increase coverage action
variables integral. due Sugar domain: compared preceding configuration table, additional 10 problems solved. domain,
using k = 3, though, even better coverage obtained using minimal number
integral action variables. Thus, appears need integral variables domain
reduced objective preference earlier actions sufficiently high. Disregarding
Sugar domain, results k = 1.1 domains close, k = 3
configuration.
interesting that, even many integers MIP, performance lp-rpg
terms coverage different using integers all. Considering
computational complexity solving MIP, rather solving LP, time spent
calculating heuristic considerably higher, rendering all-integers approach
394

fiA Hybrid LP-RPG Heuristic Planning

Minimal Ints vs First Layer Actions: Time

100

Minimal Ints vs First Layer Actions: Nodes Expanded

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

First Layer Actions (Nodes)

First Layer Actions (Time (s))

1000

10

1

100

10

0.1

0.01
0.01

1
0.1

1
10
Minimal Ints (Time (s))

100

1000

1

10

Minimal Ints vs (First Layer Actions +) Prop Goal Achievers: Time

100

1000

Minimal Ints vs (First Layer Actions +) Prop Goal Achievers: Nodes Expanded

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Prop Goal Achievers (Nodes)

Prop Goal Achievers (Time (s))

1000

100
Minimal Ints (Nodes)

10

1

100

10

0.1

0.01
0.01

1
0.1

1
10
Minimal Ints (Time (s))

100

1000

1

Minimal Ints vs (First Layer Actions + Prop Goal Achievers) Numeric Goal Achievers: Time

100

100
Minimal Ints (Nodes)

1000

Minimal Ints vs (First Layer Actions + Prop Goal Achievers) Numeric Goal Achievers: Nodes Exp.

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Num. Goal Achievers (Nodes)

Num. Goal Achievers (Time (s))

1000

10

10

1

100

10

0.1

0.01
0.01

1
0.1

1
10
Minimal Ints (Time (s))

100

1000

1

10

Minimal Ints vs Ints: Time

Ints (Time (s))

100

1000

Minimal Ints vs Ints: Nodes Expanded

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Ints (Nodes)

1000

100
Minimal Ints (Nodes)

10

1

100

10
0.1

0.01
0.01

1
0.1

1
10
Minimal Ints (Time (s))

100

1000

1

10

100
Minimal Ints (Nodes)

Figure 10: Changing variables integer (k = 3)

395

1000

fiColes, Coles, Fox & Long

Time Taken
First Prop. Num.
Layer Goal Goal
Acts Ach. Ach.
Minimal Ints
X
X
X
First Layer Acts
7
X
Prop. Goal Ach.
X
Num. Goal Ach.

Nodes Expanded
Plan Length
First Prop. Num. First Prop. Num.
In- Layer Goal Goal In- Layer Goal Goal Ints Acts Ach. Ach. ts Acts Ach. Ach. ts
X
7
7
7
7
7
7
7
7
X
7
X X
7
7
7
X
X X
7
7
X
7
7

Table 9: Results Two-Tailed Wilcoxon Signed Rank Tests comparing different sets
variables integers MIP (using layer-weighting k = 1.1). X indicates significance
(p = 0.05), colour indicates better performer (faster, fewer nodes expanded shorter
plans).

Time Taken
First Prop. Num.
Layer Goal Goal
Acts Ach. Ach.
Minimal Ints
X
X
X
First Layer Acts
X
X
Prop. Goal Ach.
X
Num. Goal Ach.

Nodes Expanded
Plan Length
First Prop. Num. First Prop. Num.
In- Layer Goal Goal In- Layer Goal Goal Ints Acts Ach. Ach. ts Acts Ach. Ach. ts
X
7
7
7
7
7
7
7
7
X
7
X X
7
7
7
X
7
X
7
7
X
7
7

Table 10: Results Two-Tailed Wilcoxon Signed Rank Tests comparing different sets
variables integers MIP (using layer-weighting k = 3). X indicates significance
(p = 0.05), colour indicates better performer (faster, fewer nodes expanded shorter
plans).

impractical. Investigating further, scatterplots time taken number
nodes expanded shown Figure 10. (The results shown k = 3, overall
picture k = 1.1 used.) configuration compared Minimal
Integers configuration. general trend, one moves left column (increasing
proportion action variables integral), points drift line
= x, i.e. time taken solve problems increases. time, though, moving
right-hand column decrease number nodes evaluated. Thus,
increasing proportion integral action variables seems improve search guidance,
though sufficiently allow pay-off terms time taken solve problems.
confirm significance observations, applied Two-Tailed Wilcoxon Signed
Rank Tests, results Tables 9 10, k = 1.1 k = 3, respectively.
cases, consistent increase time taken solve problems
proportion integral action variables increased: difference significant every
case using k = 1.1 comparing First Layer Actions Propositional
Goal Achievers. significant difference plan length pair
configurations. results nodes somewhat less clear. appear
using Minimal Integers leads expansion significantly different number nodes,
396

fiA Hybrid LP-RPG Heuristic Planning

Domain

Minimal Ints
First Layer Actions
Ints
Build (ms)Solve (ms)Build (ms)Solve (ms)Build (ms)Solve (ms)
Market Trader(20)
26.4
27.7
27.8
52.1
27.2
55.3
Hydro Power (21)
8.8
1.8
9.2
6.5
10.8
6.2
Pathways Metric (30)
58.5
271.2
64.9
834.0
65.4
3468.9
Sugar (16)
24.9
33.8
26.1
46.6
24.7
329.2
Settlers (9)
282.3
96.1
453.8
201.6
295.2
204.7
Settlers Num. Carts (16) 399.4
101.6
520.9
462.8
408.8
222.1
MPrime (28)
78.8
4.8
75.6
6.3
78.9
6.1
Rovers Numeric (11)
57.7
1.7
42.4
2.1
59.0
2.8
Average
117.1
67.3
152.6
201.5
121.3
536.9
Table 11: Time spent building solving LP varying variables integer
MIP; numbers shown domains indicate many problem instances solved
used computing reported average

compared configuration. part due limitation
tests pairwise-solved problems included, difference coverage
reflected data analysed test. Considering configurations, though,
Integers evaluates fewer nodes First Layer Actions Propositional Goal
Achievers, regardless weight used, cannot shown expand fewer nodes
Numeric Goal Achievers, configuration offered better coverage Table 8.
Although seen increasing number integer variables makes planner
slower, somewhat surprising amount planner made slower
greater is. theory would expect making variables integer would
dramatically decrease performance planner, however, appears so.
investigate consider long spent building solving LP
state configuration. Table 11 gives indication seeing
surprising result: 5 8 domains solving time LP less building
time (for Ints configuration), showing key bottleneck using LP
solver is, fact, building LP. Building time is, course, likely vary
configurations (the variation due different states expanded) compared
solving time small. two three remaining domains, Pathways
Sugar, see increase cost solving LP first-layer actions made
integral, much larger increase actions made integral, pattern
expected. final domain, Market Trader, main increase occurs
first-layer action variables integral: structure domain means integral
first layer actions often causes variables layers become integral. Solving
times does, however, remain within order magnitude building time, overhead
particularly large domain compared previous two.
397

fiColes, Coles, Fox & Long

8.6 Including Numeric Goal Conjunct
Section 7.1 discussed possibility including entire numeric goal conjunct
problem LP. well theoretically increasing ability detect dead-ends
insisting goals attainable time, rather individually
allows arbitrary LNF goals used, found domains Pathways.
section, investigate impact extension. particular, explore whether
use numeric-goal-checking LP including numeric goal conjunct improves
worsens performance. ensure goal-checking LP case
numeric goal conjunction used, tests, configurations,
disable inclusion propositional goals landmarks LP. gain insights
impact numeric-goal-checking LP affected choice action-variable
layer-weighting schemes, consider two: k = 1.1 k = 3.
Domain

Market Trader
Hydro Power
Pathways Metric
Sugar
Settlers
Settlers Num. Carts
MPrime
Rovers Numeric
Total (Excl. Pathways)
Total


Num.Goal
(k = 3)
20
27
30
18
13
19
28
13
138
168

Without
Num. Goal
(k = 3)
20
27
0
14
14
18
29
13
135
135


Num. Goal
(k = 1.1)
20
29
28
9
12
21
28
13
132
160

Without
Num. Goal
(k = 1.1)
20
30
0
14
10
22
29
13
138
138

Table 12: Coverage varying whether Numeric Goal conjunct included LP (with)
(without)

coverage results running lp-rpg without numeric goal conjunct
shown Table 12. Looking results excluding Pathways domain (which
solved numeric goal conjunct included, since goals expressed
arbitrary LNF), one make two immediate observations: use numeric
goal conjunct improves performance actions weighted k = 3, solving 3 additional
problems, use worsens performance actions weighted k = 1.1, solving 6
fewer problems. difference impact interesting consequence relationship
RPG structure LP:
no-goal-conjunct case, goal appears fact layer l, LP used meet
goal LP (l) LP containing actions action layer l (Algorithm 4,
line 22). favours earlier actions RPG, precluding actions
layer l used.
numeric goal-conjunct case, LP extended layer l0 which,
first, goals appear, second, LP constrained meet goals, using
actions layer l0 , satisfied. individual goals, point may later
398

fiA Hybrid LP-RPG Heuristic Planning

vs Without Numeric Goal Conjunct: Nodes Expanded

vs Without Numeric Goal Conjunct: Time
Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Hydro Power
Market Trader

100

Numeric Goal Conjunct (Nodes)

Numeric Goal Conjunct (Time (s))

1000

10

1

0.1

0.01

0.001
0.001

0.01

0.1
1
10
100
Without Numeric Goal Conjunct (Time (s))

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Hydro Power
Market Trader

1000

100

10

1

1000

1

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Hydro Power
Market Trader

10

1

0.1

0.01

0.001
0.001

0.01

0.1
1
10
100
Without Numeric Goal Conjunct (Time (s))

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Hydro Power
Market Trader

1000
Numeric Goal Conjunct (Nodes)

Numeric Goal Conjunct (Time (s))

100

1000

vs Without Numeric Goal Conjunct (Weight 3): Nodes Expanded

vs Without Numeric Goal Conjunct (Weight 3): Time
1000

10
100
Without Numeric Goal Conjunct (Nodes)

100

10

1

1000

1

10
100
Without Numeric Goal Conjunct (Nodes)

1000

Figure 11: Including numeric goals LP
layer l first appeared, case actions l0
l chosen meet goals, whereas previous case could not.
difference actions available support given goal makes
action-variable weighting scheme important. use k = 3 rather k = 1.1
means actions added layer l layer l0 (inclusive) available meet
goal first appeared layer l, objective function leads preference use
earlier actions.
coverage results experiments give unequivocal picture
impact feature performance. Figure 11 shows scatterplots time taken
solve problems, number nodes evaluated, numeric goal-conjunct
used not, k = 1.1 k = 3. appears general trend
inclusion numeric goal conjunct reduce number nodes evaluated. case
weighting k = 3, Two-Tailed Wilcoxon Signed Rank Test confirms use
numeric goal conjunct reduces number nodes evaluated (p = 0.05). Using k = 1.1
suggests similar trend, results significant.
weighting schemes, use numeric goal conjunct introduces small
statistically significant time overhead. due additional time taken
evaluate state: RPG must extended point goals
satisfied together, rather individually. Whether pays off, i.e. whether reduction
nodes evaluated sufficient offset this, depends domain appears
399

fiColes, Coles, Fox & Long

correlated extent numeric goals interact. one extreme,
Rovers domain, goals propositional difference performance.
hand, Sugar domain, Settlers domain numeric carts
used, beneficial. domains concern production reprocessing raw
materials, one form another, leading interaction goals. instance, unit
resource may sufficient satisfy goals individually, additional production may
required support both. cases use numeric goal conjunct improves
time performance. Inclusion numeric goal conjunct significant impact
length plans produced (according Two-Tailed Wilcoxon Signed Rank Test).
summarise results section, main benefit use numeric
goal conjunct able extend expressivity planner domains
goals written using arbitrary LNF. success approach domains
varies. terms coverage, whether better use numeric goal conjunct
evaluation domains depends weighting scheme. using layer-weighting
scheme, k = 3, inclusion numeric goal conjunct slightly beneficial lp-rpg
therefore set use configuration default.
8.7 Including Propositions LP
previous section, observed inclusion numeric goal conjunct
goal-checking LP variable impact performance, depending weighting scheme
used. Perhaps interesting use goal-checking LP using LP meet
propositional goals, landmarks, described Section 6.1. evaluate technique
consider four configurations:
1. propositions: using goal-checking LP containing numeric-goal conjunct.
2. Propositional goals: previous case, including propositional goals
goal-checking LP.
3. Landmarks: previous case, including landmarks.
4. propositions: previous case, constrained ensure action
variable non-zero, actions added meet propositional preconditions (as
described Section 6.3).
form spectrum, case information propositions
included LP all, last goal-checking LP must meet
propositional goals, preconditions actions chosen so. consider
two layer-weighting schemes (k = 1.1 k = 3), action variables actions
first action layer integral.
coverage results k = 1.1 shown Table 13 k = 3 Table 14.
seen, cases, general pattern emerges: coverage improves
including configuration landmarks included LP, declines
final Propositions configuration. Including propositions appears, however,
remain better including propositions all.
Scatterplots illustrating time taken number nodes evaluated solving
problems shown Figures 12 13 (for weights k = 1.1 k = 3, respectively).
400

fiA Hybrid LP-RPG Heuristic Planning

Props vs Propositional Goals: Time

100

Props vs Propositional Goals: Nodes Expanded
10000

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
settlers
Pathways Metric
Hydro Power
Market Trader

10

1

Sugar
Rovers Numeric
M-Prime
Settlers Numeric Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Propositional Goals (Nodes)

Propositional Goals (Time (s))

1000

100

10

0.1

0.01
0.01

1
0.1

1
10
Props (Time (s))

100

1000

1

10

Props vs Landmarks: Time

Landmarks (Time (s))

100

1000

10000

Props vs Landmarks: Nodes Expanded
10000

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Numeric Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000
Landmarks (Nodes)

1000

100
Props (Nodes)

10

1

100

10
0.1

0.01
0.01

1
0.1

1
10
Props (Time (s))

100

1000

1

10

Props vs Props: Time

Props (Time (s))

100

1000

10000

Props vs Props: Nodes Expanded
10000

Sugar
Rovers Num.
M-Prime
Settlers Num. Carts
settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Numeric Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000
Props (Nodes)

1000

100
Props (Nodes)

10

1

100

10
0.1

0.01
0.01

1
0.1

1
10
Props (Time (s))

100

1000

1

10

100
Props (Nodes)

1000

Figure 12: Varying propositions included LP (k = 1.1)

401

10000

fiColes, Coles, Fox & Long

Props vs Propositional Goals: Time

Prop Goals (Time (s))

100

Props vs Propositional Goals: Nodes Expanded

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Propositional Goals (Nodes)

1000

10

1

100

10

0.1

0.01
0.01

1
0.1

1
10
Props (Time (s))

100

1000

1

10

Props vs Landmarks: Time

Landmarks (Time (s))

100

1000

Props vs Landmarks: Nodes Expanded

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

100

Landmarks

1000

100
Props (Nodes)

10

1
10
0.1

0.01
0.01

1
0.1

1
10
Props (Time (s))

100

1000

1

10

Props vs Props: Time

Props (Time (s))

100

1000

Props vs Props: Nodes Expanded

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

Sugar
Rovers Numeric
M-Prime
Settlers Num. Carts
Settlers
Pathways Metric
Hydro Power
Market Trader

1000

Props (Nodes)

1000

100
Props

10

1

100

10
0.1

0.01
0.01

1
0.1

1
10
Props (Time (s))

100

1000

1

10

100
Props (Nodes)

Figure 13: Varying propositions included LP (k = 3)

402

1000

fiA Hybrid LP-RPG Heuristic Planning

Domain
Market Trader
Hydro Power
Pathways Metric
Sugar
Settlers
Settlers Numeric
MPrime
Rovers Numeric
Total

Props
20
29
28
9
12
21
28
13
160

Prop Goals
20
29
28
9
19
22
28
9
164

Landmarks
20
29
28
9
19
22
30
13
170

Props
19
30
30
14
11
21
27
15
167

Table 13: Coverage varying propositions included LP (using k = 1.1)

Domain
Market Trader
Hydro Power
Pathways Metric
Sugar
Settlers
Settlers Numeric
MPrime
Rovers Numeric
Total

Props
20
27
30
18
13
19
28
13
168

Prop Goals
20
27
30
18
18
23
28
13
177

Landmarks
20
27
30
18
18
23
30
15
181

Props
20
28
30
19
11
21
30
14
173

Table 14: Coverage varying propositions included LP (using k = 3)

scatterplot compares one configurations 24 enumerated list
configuration 1 (no propositions). Comparing Propositional Goals Landmarks
configurations suggests inclusion Landmarks leads problems
solved quickly compared propositions configuration. particularly
evident Settlers, Settlers Numeric Carts, MPrime Rovers Numeric domains.
Whether using Landmarks offer gains Propositional Goals alone depends structure problems. two Settlers variants, including propositional goals (such
(connected-by-rail p1 p2) (has-ironworks p3)) necessitates use specific actions ((build-rail p1 p2) (build-ironworks p3), respectively). Since actions
consume numeric resources, including propositional goals sufficient cause LP
introduce production actions necessary support resource consumption. Rovers,
goals communicated data generated rock samples, soil analyses
images. actions adding facts consume number units energy,
benefit including propositional goals LP. However, actions
propositional preconditions: instance, rover communicate rock data,
must taken sample rock. propositional preconditions included
landmarks LP, thereby forcing production energy needed
403

fiColes, Coles, Fox & Long

communicate requisite data, energy acquired it. leads
inclusion additional recharge actions or, suitable actions available, better deadend detection. similar situation arises MPrime: actions achieve goal facts
consume resources, actions achieve (landmark) preconditions
actions do, including landmarks improves informedness heuristic.
Two-Tailed Wilcoxon Signed Rank Tests shown Tables 15 16 confirm
(p = 0.05) either k = 1.1 k = 3 use Propositional Goals improves
Propositions, use Landmarks improves Propositional Goals. Indeed,
p = 0.05 total-ordering time-performance k = 3:
Propositions Propositional Goals Landmarks
results show similar behaviour numbers nodes evaluated (the right-hand
columns Figures 12 13) although differences statistically significant.
Wilcoxon tests show neither k = 1.1 k = 3 difference
Propositional Goals Landmarks statistically significant. Note, however, using
Landmarks allows problems solved. comparisons Propositions,
Propositional Goals Landmarks, weight k = 1.1, significant, latter two
improving upon former. weight k = 3 tests inconclusive, although
using Landmarks allows 13 additional problems solved (recall comparisons
restricted problems solved variants comparison).

Props
Prop Goals
Landmarks

Time Taken
Prop LandAll
Goals marks Props
X
X
7
X
X
X

Nodes Expanded
Prop LandAll
Goals marks Props
X
X
X
7
X
X

Plan Length
Prop LandAll
Goals marks Props
7
7
X
7
X
X

Table 15: Results Two-Tailed Wilcoxon Signed Rank Tests comparing inclusion different propositions LP (using layer-weighting k = 1.1). X indicates significance
(p = 0.05), colour indicates better performer (faster, fewer nodes expanded shorter
plans).

Props
Prop Goals
Landmarks

Time Taken
Prop LandAll
Goals marks Props
X
X
7
X
X
X

Nodes Expanded
Prop LandAll
Goals marks Props
X
7
X
7
X
X

Plan Length
Prop LandAll
Goals marks Props
7
7
X
7
X
X

Table 16: Results Two-Tailed Wilcoxon Signed Rank Tests comparing inclusion different propositions LP (using layer-weighting k = 3). X indicates significance (p = 0.05),
colour indicates better performer (faster, fewer nodes expanded shorter plans).

404

fiA Hybrid LP-RPG Heuristic Planning

Domain

Props
Landmarks
Props
Build (ms)Solve (ms)Build (ms)Solve (ms)Build (ms)Solve (ms)
Market Trader (20)
27.8
52.1
28.0
52.3
29.7
74.5
Hydro Power (27)
9.3
6.6
9.8
6.6
11.7
5.5
Pathways Metric (30)
64.9
834.0
67.0
833.3
68.6
905.5
Sugar (18)
27.2
47.5
27.3
47.5
39.9
82.3
Settlers (8)
436.4
145.5
421.6
137.9
563.9
3153.0
Settlers Num. Carts (15) 204.5
434.8
252.5
133.0
244.2
2253.8
MPrime (28)
75.6
6.3
78.9
5.7
91.2
24.5
Rovers Numeric (11)
42.4
2.1
56.3
2.0
76.3
31.2
Average
111.0
191.1
117.7
152.3
140.7
816.3
Table 17: Time spent building solving LP, varying propositions included;
numbers shown domains indicate many problem instances solved used
computing reported average

results shown bottom Figures 12 13 indicate Propositions
configuration less consistent performance.
show, however, (p = 0.05) k = 1.1 k = 3, Propositions
configuration takes longer solve problems Propositional Goals configuration
Landmarks configuration. perhaps surprising feasible consider
including propositions LP manner, given results reported van den Briel
et al. (2007). key difference disregarding delete effects, fact
needed precondition need added once. work reported van
den Briel et al., however, cases fact required precondition deleted,
delete effect must balanced equivalent number add effects (less one
fact true initially).
Looking number nodes evaluated using Propositions configuration
find important result: shown bottom right Figures 12 13, whichever
weight used, Propositions tends expand fewer nodes. Furthermore, Propositions expands fewer nodes three configurations overall
best configuration terms nodes expanded (significant result, p = 0.05). Unfortunately,
overhead associated node higher results poorer coverage
time performance. result indicates numericpropositional separation used
lp-rpg heuristic sensible trade-off, use RPG meet propositional
preconditions sacrificing performance terms nodes expanded exchange
reduction time taken solve problems.
Table 17 shows increase costs associated solving LPs including propositions.
results taken problems solved three configurations, although
remains case configurations expand exactly states solving
problems. three domains Hydro Power, MPrime Rovers Numeric
cost building LPs dominates cost solving them, significant
decreases performance domains. course, cost building LPs increases
propositions included since variables required. Settlers domain
405

fiColes, Coles, Fox & Long

order magnitude increase time spent solving LPs, indicating
including propositions LPs makes difficult solve. Sometimes
informed search guidance gleaned information allows planner find
solutions expanding far fewer nodes.
Adding landmarks LP appears make solving LP slightly faster:
partly side effect landmarks configuration needing solve fewer LPs per state,
since uses one LP meet goals instead one LP per goal. Propositions
configuration often needs solve one LP solution extraction phase. However,
size difficulty LP means benefits solving fewer LPs (in terms
time taken) negated.
Tables 15 16 show results statistical tests comparing lengths plans
found various configurations. significant results that, regardless
weight used, Propositions finds shorter plans configurations.
propositions included LP, typically single LP call made
solution extraction, simultaneously achieving goals action preconditions.
configurations, first, LP call made goals, then, action
added support propositional precondition action implied solution
LP, numeric preconditions met another LP call. Thus, several
LP calls rather one. fragmenting production relaxed plan
way, efficacy relaxed plan eroded. example, plan lengths improved
two variants Settlers. Here, production resources requires building
infrastructure: sawmill required refine timber wood, on. two units
wood made, LP knowledge propositional preconditions,
difference LP building two units wood location A, one unit
location B one location C need build one two sawmills, depending
option chosen, discovered actions chosen meet
propositional preconditions actions required solution LP. LP
includes Propositions, cases this, difference building
one sawmill two, LP prefer single-sawmill solution, ultimately leading
better search guidance. Thus, Propositions produces plans significantly shorter,
domains fact propositions outside LP disguises true costs
action choices solution LP.
8.8 Propositional Resource Analysis
end Section 6.4, identified conditions possible turn propositions model resources equivalent numeric representation. purposes,
lp-rpg, would allow resource, within heuristic, managed LP
rather RPG. end, use three domains containing propositional stacks
represent resources, evaluate encoding affects performance lp-rpg,
numeric planners. five planners evaluated MetricFF, lpgtd, lp-rpg (using
analysis translates propositional resource stacks equivalent numeric representation described Long & Fox, 2000), lp-rpg analysis disabled,
lp-rpg-FF. three domains use are:
406

fiA Hybrid LP-RPG Heuristic Planning

Domain

MetricFF

lpgtd

lp-rpg-FF

Settlers Prop. Timber
Settlers Prop. Carts
MPrime Prop.
Total

7
4
29
40

4
4
30
38

8
10
29
68

lp-rpg
Anal.
Anal.
5
16
13
22
29
30
47
47

Table 18: Coverage without propositional resource analysis

variant IPC3 Settlers domain, amount timber given location
(or given vehicle) represented stack propositions, range n0
n10.
variant Settlers Numeric Carts encoding, number carts
given location represented stack propositions.
MPrime domain IPC1, encoding represents fuel level stack
propositions.
first two these, propositional encoding enforces limit 10 amount
timber (respectively, number carts) given location. necessary limitation forced action grounding. numeric representation, decreasing one resource
increasing another done single ground action, appropriate numeric
effects conditions. ground action need stipulate precise levels
resource operation, long limits resource levels
respected. propositional case, however, one ground action needed pair
discrete levels two resources, parameters action stipulating pre-
post-values resource. level 10 chosen avoid placing overly restrictive
bounds resource levels, creating manageable number ground actions.
issue grounding accounts limited choice domains: propositional stack
used represent resources take modest range discrete values.
Rovers domain, example, set reachable energy levels rover
range [0, 80]. Market Trader domain, amount money could held
given time real value one decimal place (this consequence choice
problem files), greater equal zero.
Results domains shown Table 18. Comparing, first, lp-rpg without
analysis lp-rpg analysis, see encoding resources LP
numbers grants consistent improvement performance. Figure 14 shows time
taken find solutions similarly improved, perhaps strikingly second Settlers
variant (with propositional cart levels).
MetricFF lpgtd perform well MPrime domain, two Settlers
encodings, lp-rpg resource analysis performs markedly better,
planners solving handful problems. contrasts earlier results, shown
Table 2, lpgtd particular performed well Settlers domain.
interesting contrast see here, Propositional Timber variant derived
IPC 3 model lpgtd performs well leads considerably worse performance.
407

fiColes, Coles, Fox & Long

Settlers Propositional Stack Timber
10000

1000

Settlers Propositional Stack Carts
10000

LPRPG-Analysis
LPRPG-FF

LPG
LPRPG-No-Analysis

1000

Time (s)

100

Time (s)

100

LPRPG-Analysis
LPRPG-FF

LPG
LPRPG-No-Analysis

10

10

1

1

0.1

0.1
5

10

15
Problem Number

20

25

5

10

15
Problem Number

20

25

M-Prime Propositional Resource Stack
10000

1000

LPRPG-Analysis
LPRPG-FF

LPG
LPRPG-No-Analysis

Time (s)

100

10

1

0.1

0.01
5

10

15
Problem Number

20

25

30

Figure 14: Using propositional resource analysis

supports role resource analysis allowing lp-rpg robust
number almost-equivalent domain encodings used, mixed propositional
numeric encodings resource levels. observed significant change length
plans produced lp-rpg without propositional resource analysis.

9. Conclusions Future Work
modern planning systems ineffective reasoning numbers. However, managing complex numeric interactions important part driving AI planning towards
future real-world application. paper shown that, using linear program
model numeric resource flows, ability planners reason domains involving
complex numeric interactions greatly improved.
key contribution separation heuristic search control relaxed
planning graph, based delete-relaxation, linear program allows exact reasoning
numeric constraints relaxes action ordering.
explored different configurations heuristic, put
less information LP, impact performance planner whole.
exploration different LP solvers reveals less efficient handling
various combinations constraints. found that, LPSolve CLP, conjunction
limited version lp-rpg published 2008 (Coles et al., 2008), solve simple
408

fiA Hybrid LP-RPG Heuristic Planning

problems quickly, CPLEX coupled full power extended LPRPG needed
handle complex test instances.
work far focussed developing search control methods perform
well numeric planning problems particular character: producer-consumer
behaviour define Sectionsect:prodcondefinition. Although believe
common behaviour, practice, numeric domains exhibit range behaviours.
several possible ways exploit lp-rpg approach domains. One use
approach actions conform constraints producer-consumer behaviour,
pushing numeric behaviour metric RPG way currently
handle propositional goals preconditions separate RPG. would yield
benefits potentially better estimates reachable ranges action use costs
parts domain express producer-consumer behaviour. challenging
consider behaviours relaxed producer-consumer behaviour
obtain useful heuristic information. example, actions production effects vary
could encoded family producers increasing capability, discretising range
production options introducing reachability analysis increased
production capabilities become available. general, relaxations must make reachability
least permissive actual reachability (that is, action must applicable
relaxed reachability analysis least early action actually reachable)
relaxed plan extraction minimise estimated cost goal effectively (this
difficult relaxed plan optimal). Within constraints, believe
use LP approximations provide tool tackling wider range behaviours
explore paper.
exciting challenge future work integrate lp-rpg method
optimising plans according given objective function. recent 2008 2011
planning competitions highlighted importance optimising planning emphasis solution quality. development is, however, non-trivial: challenges lie
integration cost optimisation LP RPG well deciding
use heuristic trades goal distance quality search. first step
direction accomplished Radzi PhD thesis (Radzi, 2011), advances
numeric planning described paper open many possibilities extending
initial work.

References
Bell, K. R. W., Coles, A. J., Coles, A. I., Fox, M., & Long, D. (2009). role AI planning
decision support tool power substation management. Artificial Intelligence
Communications, 22 (1), 3757.
Benton, J., Do, M. B., & Kambhampati, S. (2005). Over-subscription planning numeric goals. Proceedings 19th International Joint Conference Artificial
Intelligence (IJCAI), pp. 12071213.
Benton, J., van den Briel, M., & Kambhampati, S. (2007). hybrid linear programming
relaxed plan heuristic partial satisfaction planning problems. Proceedings
17th International Conference Planning Scheduling (ICAPS).
409

fiColes, Coles, Fox & Long

Blackmore, L., Ono, M., & Williams, B. (2011). Chance-constrained optimal path planning
obstacles. Robotics, IEEE Transactions on, 27 (6), 1080 1094.
Blum, A., & Furst, M. (1995). Fast planning planning graph analysis. Proceedings
14th International Joint Conference Artificial Intelligence (IJCAI 95), pp.
16361642.
Bonet, B., & Geffner, H. (2001). Heuristic Search Planner 2.0. Artificial Intelligence Magazine, 22 (3), 7780.
Coles, A., Coles, A., Fox, M., & Long, D. (2012). COLIN: Planning continuous linear
numeric change. Journal Artificial Intelligence Research, 44, 196.
Coles, A. I., Fox, M., Long, D., & Smith, A. J. (2008). hybrid relaxed planning graph-lp
heuristic numeric planning domains. Proceedings Eighteenth International
Conference Automated Planning Scheduling (ICAPS 08).
Coles, A. J., & Coles, A. I. (2011). LPRPG-P: Relaxed plan heuristics planning
preferences. Proceedings 21st International Conference Automated Planning Scheduling (ICAPS).
Coles, A. J., Coles, A. I., Fox, M., & Long, D. (2009). Extending use inference
temporal planning forwards search. Proceedings 19th International
Conference Automated Planning Scheduling (ICAPS 09).
Do, M. B., & Kambhampati, S. (2001). Sapa: domain-independent heuristic metric temporal planner. Proceedings European Conference Planning (ECP01).
Do, M. B., & Kambhampati, S. (2003). SAPA: multi-objective metric temporal planner.
Journal Artificial Intelligence Research, 20, 155194.
Domshlak, C., Katz, M., & Lefler, S. (2010). abstractions met landmarks. Proceedings 20th International Conference Planning Scheduling (ICAPS).
Edelkamp, S. (2003). Taming numbers durations model checking integrated
planning system. Journal Artificial Intelligence Research, 20, 195238.
Fox, M., & Long, D. (2003). PDDL2.1: extension PDDL expressing temporal
planning domains. Journal Artificial Intelligence Research, 20, 61124.
Gerevini, A., Saetti, A., & Serina, I. (2006). approach temporal planning scheduling domains predictable exogenous events. Journal Artificial Intelligence
Research, 25, 187231.
Gerevini, A., Saetti, A., & Serina, I. (2008). approach efficient planning numerical
fluents multi-criteria plan quality. Artificial Intelligence, 172 (8-9), 899944.
Gregory, P., & Rendl, A. (2008). constraint model settlers planning domain.
Aylett, R. (Ed.), Proceedings UK Planning Special Interest Group (PlanSIG).
Herriot Watt University.
Gregory, P., Cresswell, S., Long, D., & Porteous, J. (2004). extraction disjunctive landmarks planning problems via symmetry reduction.. Proceedings
Conference Symmetry Search (SymCon 2004), pp. 3441.
410

fiA Hybrid LP-RPG Heuristic Planning

Helmert, M., & Domshlak, C. (2009). Landmarks, critical paths abstractions: Whats
difference anyway?. Proceedings 19th International Conference Planning Scheduling (ICAPS), pp. 162169.
Hoffmann, J. (2003). Metric-FF planning system: Translating ignoring delete lists
numeric state variables. Journal Artificial Intelligence Research, 20, 291341.
Hoffmann, J., & Edelkamp, S. (2005). deterministic part IPC-4: overview. Journal
Artificial Intelligence Research, 24, 519579.
Hoffmann, J., Porteous, J., & Sebastia, L. (2004). Ordered landmarks planning. Journal
Artificial Intelligence Research, 22, 215278.
Hoffmann, J., & Nebel, B. (2001). planning system: Fast plan generation
heuristic search. Journal Artificial Intelligence Research, 14, 253302.
Karpas, E., & Domshlak, C. (2009). Cost-optimal planning landmarks. Proceedings
21st International Joint Conference Artificial Intelligence (IJCAI 09), pp.
17281733.
Kautz, H., & Walser, J. (2000). Integer optimization models AI planning problems.
Knowledge Engineering Review, 15 (1), 101117.
Koehler, J. (1998). Planning resource constraints. Proceedings European
Conference Artificial Intelligence (ECAI98), pp. 489493.
Laborie, P. (2003). Algorithms propagating resource constraints AI planning
scheduling: Existing approaches new results. Artificial Intelligence, 143 (2), 151
188.
Li, H. X., & Williams, B. C. (2008). Generative planning hybrid systems based flow
tubes. Proceedings 18th International Conference Automated Planning
Scheduling, ICAPS, pp. 206213.
Long, D., & Fox, M. (2000). Automatic synthesis use generic types planning.
Proceedings Artificial Intelligence Planning Scheduling (AIPS), pp. 196205.
Long, D., & Fox, M. (2003a). Exploiting Graphplan framework temporal planning.
Proceedings International Conference Artificial Intelligence Planning
Scheduling (ICAPS).
Long, D., & Fox, M. (2003b). 3rd International Planning Competition: Results
analysis. Journal Artificial Intelligence Research, 20, 159.
Ono, M., & Williams, B. C. (2008). efficient motion planning algorithm stochastic
dynamic systems constraints probability failure. Proceedings 23rd
AAAI Conference Artificial Intelligence, AAAI, pp. 13761382.
Porteous, J., Sebastia, L., & Hoffmann, J. (2001). extraction, ordering, usage
landmarks planning. Proceedings 6th European Conference Planning
(ECP 01).
Radzi, N. H. M. (2011). Multi-Objective Planning using Linear Programming. Ph.D. thesis,
University Strathclyde.
411

fiColes, Coles, Fox & Long

Richter, S., Helmert, M., & Westphahl, M. (2008). Landmarks revisited. Proceedings
23rd AAAI Conference Artificial Intelligence (AAAI 08), pp. 975982.
Richter, S., & Westphal, M. (2010). LAMA Planner: Guiding Cost-Based Anytime
Planning Landmarks.. Journal Artificial Intelligence Research, 39, 127177.
Shin, J.-A., & Davis, E. (2005). Processes continuous change SAT-based planner.
Journal Artificial Intelligence Research, 166, 194253.
van den Briel, M., Benton, J., Kambhampati, S., & Vossen, T. (2007). LP-based heuristic
optimal planning. Principles Practice Constraint Programming (CP
2007), pp. 651665.
van den Briel, M. H. L., Vossen, T., & Kambhampati, S. (2008). Loosely coupled formulations automated planning: integer programming perspective. Journal
Artificial Intelligence Research, 31, 217257.
Vossen, T., Ball, M. O., Lotem, A., & Nau, D. S. (1999). use integer programming
models AI planning. Proceedings 16th International Joint Conference
Artificial Intelligence (IJCAI 99), pp. 304309.
Wolfman, S., & Weld, D. (2000). Combining linear programming satisfiability solving
resource planning. Knowledge Engineering Review, 15 (1).
Zhu, L., & Givan, R. (2003). Landmark extraction via planning graph propagation. Proceedings Doctoral Consortium 13th International Conference Planning
Scheduling (ICAPS-DC 03), pp. 156160.

412


