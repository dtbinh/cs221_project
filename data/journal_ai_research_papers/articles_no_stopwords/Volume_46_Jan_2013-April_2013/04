journal artificial intelligence

submitted published

description logic knowledge action bases
babak bagheri hariri
diego calvanese
marco montali

bagheri inf unibz
calvanese inf unibz
montali inf unibz

krdb centre knowledge data
free university bozen bolzano
piazza domenicani bolzano italy

giuseppe de giacomo
riccardo de masellis
paolo felli

degiacomo dis uniroma
demasellis dis uniroma
felli dis uniroma

dipartimento di ingegneria informatica automatica e gestionale
sapienza universita di roma
via ariosto roma italy

abstract
description logic knowledge action bases kab mechanism providing
semantically rich representation information domain interest terms description logic knowledge base actions change information time possibly introducing
objects resort variant dl lite unique name assumption enforced
equality objects may asserted inferred actions specified sets
conditional effects conditions epistemic queries knowledge base
tbox abox effects expressed terms aboxes setting address
verification temporal properties expressed variant first order calculus quantification across states notably decidability verification suitable restriction inspired
notion weak acyclicity data exchange

introduction
recent work business processes services databases bringing forward need considering data processes first class citizens process service design nigam caswell
bhattacharya gerede hull liu su deutsch hull patrizi vianu vianu
meyer smirnov weske particular called artifact centric approaches
advocate sort middle ground conceptual formalization dynamic systems
actual implementation promising effective practice cohn hull
verification temporal properties presence data represents significant challenge survey see calvanese de giacomo montali since taking account
data evolve time systems infinite number states neither finite state
model checking clarke grumberg peled current techniques infinitestate model checking mostly tackle recursion burkart caucal moller steffen
apply case recently advancements issue cangialosi de giacomo de masellis rosati damaggio deutsch vianu bagheri hariri calvanese
de giacomo de masellis felli belardinelli lomuscio patrizi context
suitably constrained relational database settings
c

ai access foundation rights reserved

fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

work maintaining information relational database
sophisticated applications foreseen enrich data intensive business processes semantic
level information maintained semantically rich knowledge base allows
operating incomplete information calvanese de giacomo lembo montali santoso
limonad de leenheer linehan hull vaculin leads us look combine
first order data ontologies processes maintaining basic inference tasks specifically
verification decidable setting capture domain interest terms semantically
rich formalisms provided ontological languages description logics dls
baader calvanese mcguinness nardi patel schneider languages natively deal
incomplete knowledge modeled domain additional flexibility comes added
cost however differently relational databases evaluate queries need resort logical
implication moreover incomplete information combined ability evolving system
actions notoriously fragile setting w r decidability wolter zakharyaschev
b gabbay kurusz wolter zakharyaschev particular due nature
dl assertions general definitions constraints get one
difficult kinds domain descriptions reasoning actions reiter
amounts dealing complex forms state constraints lin reiter
overcome difficulty virtually solutions aim robustness called
functional view knowledge bases levesque kb provides ability querying
logical implication ask ability progressing kb forms
updates tell baader ghilardi lutz calvanese de giacomo lenzerini rosati
notice functional view tightly related epistemic interpretation kb
calvanese de giacomo lembo lenzerini rosati indeed work related
epistemic dynamic logic van ditmarsch van der hoek kooi though
scope decidability presented could application context
well
follow functional view kbs however key point work execution step external information incorporated system form individuals denoted
function terms systems closed w r available information makes
framework particularly interesting challenging particular presence individuals requires specific treatment equality since system progresses information
acquired distinct function terms may inferred denote object
specifically introduce called knowledge action bases kabs kab
equipped ontology precisely tbox expressed case variant dllitea calvanese de giacomo lembo lenzerini rosati b extends core
web ontology language owl ql motik cuenca grau horrocks wu fokoue lutz
particularly well suited data management tbox captures intensional information
domain interest similarly uml class diagrams conceptual data though
software component used run time kab includes abox acts
storage state abox maintains data interest accessed relying query answering logical implication certain answers notably variant dl litea without
unique name assumption una allow explicit equality assertions abox
way suitably treat function terms represent individuals acquired execution
technically need dealing equality breaks first order rewritability dl litea query
answering requires addition rewriting process inference equality performed


fid escription l ogic k nowledge action bases

artale calvanese kontchakov zakharyaschev query language use unions
conjunctive queries possibly composing certain answers full fol constructs
gives rise epistemic query language asks known current kb calvanese et al apart kb kab contains actions whose execution changes
state kb e abox actions specified sets conditional effects
conditions epistemic queries kb effects expressed terms aboxes
actions static pre conditions whereas process used specify actions
executed step simplicity model processes condition action rules
condition expressed query kb
setting address verification temporal dynamic properties expressed firstorder variant calculus park stirling atomic formulae queries
kb refer constants function terms controlled form
quantification across states allowed notice previous decidability actions
dl kbs assumed information coming outside system sense
individual terms added executing actions calvanese et al baader et al
rosati franconi instead allow arbitrary introduction terms
unsurprisingly even simple kabs temporal properties verification
undecidable however rich class kabs verification fact decidable
reducible finite state model checking obtain following cangialosi et al
bagheri hariri et al rely recent data exchange finiteness
chase tuple generating dependencies fagin kolaitis miller popa though case
need extend deal incomplete information ii inference equality
iii quantification across states verification language
organized follows section give preliminaries dl litea without
una going knowledge base formalism section describes kab framework detail section discusses execution semantics section introduce
verification formalism kabs section verification kabs general undecidable even considering simple temporal properties kabs section give
main technical verification weakly acyclic kabs decidable e xp ime section
extensively survey related work section concludes

knowledge base formalism
description logics dls baader et al knowledge representation formalisms
tailored representing domain interest terms concepts classes denoting sets
objects roles relations denoting binary relations objects dl knowledge bases
kbs alphabet concept role names alphabet individuals
dl kb formed two distinct parts tbox represents intensional level kb
contains description domain interest terms universal assertions concepts
roles abox represents instance level kb contains extensional
information participation individuals concepts roles
expressing kbs use dl litenu variant dl litea language poggi lembo
calvanese de giacomo lenzerini rosati calvanese de giacomo lembo lenzerini
rosati drop unique name assumption una line standard web
ontology language owl bao et al essentially dl litenu extends owl ql


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

profile owl including functionality assertions possibility state equality
individuals
syntax concept role expressions dl litenu follows
r p p
v r r

b n r
c b b

n denotes concept name p role name p inverse role
formally dl litenu kb tbox finite set tbox assertions form
b v c

r v v

funct r

called respectively concept inclusions role inclusions functionality assertions follow
usual assumption dl lite according tbox may contain neither funct p
funct p contains r v p r v p role r poggi et al calvanese et al
condition expresses roles functionality assertions cannot specialized
dl litenu tboxes able capture essential features conceptual modeling formalisms
uml class diagrams entity relationship schemas namely isa classes
associations relationships disjointness classes associations typing associations association multiplicities particular mandatory participation functionality
main missing feature completeness hierarchies would require introduction
disjunction would compromise good computational properties dl lite
abox dl litenu kb finite set abox assertions form
n

p



called respectively concept membership assertions role membership assertions equality
assertions terms denoting individuals see presence equality assertions abox requires specific treatment equality goes beyond usual reasoning
techniques dl lite first order rewritability although reasoning remains polynomial
artale et al hand allow explicit disequality though one use
membership disjoint concepts assert two individuals different
dl litenu admits complex terms denoting individuals terms inductively defined
starting finite set constants applying finite set uninterpreted functions
arity greater set individual terms countably infinite
call function terms terms involving functions structure terms impact
inference equality congruence relation structure terms e ti
n f function symbol arity n f tn f n apart
aspect related equality treat individuals denoted terms simply ordinary
individual constants dls
adopt standard semantics dls fol interpretations
interpretation domain interpretation function ti n
p term concept name n role name p coherently congruence
relation terms f tn f n whenever tii
n
complex concepts roles interpreted follows
r
b

ri
b

p
r


p
r

fid escription l ogic k nowledge action bases

interpretation satisfies assertion form
b v c b c
r v v ri v
funct r ri
n ti n
p ti ti p
ti ti
model kb satisfies assertions kb satisfiable
model say abox consistent w r tbox kb satisfiable
assertion logically implied kb denoted every model
satisfies well
following characterization satisfiability logical implication dl litenu easy
consequence artale et al
theorem checking satisfiability logical implication dl litenu pt ime complete
proof pt ime lower bound immediate consequence lower bound established
artale et al dl litenu allow use complex individual terms
upper bound artale et al provide pt ime first
functionality assertions exhaustively propagate equality resorting pt ime
combined complexity reasoning dl lite absence una adapt
changing first step propagate pt ime equality terms
active domain due functionalities due congruence
next introduce queries usual cf owl answers queries formed constants terms denoting individuals explicitly mentioned abox active domain
abox denoted adom finite set constants terms appearing concept role
equality assertions predicate alphabet kb denoted alph set
concept role names occurring
union conjunctive queries ucq q kb fol formula form
conj x yn conj n x yn free variables x existentially quantified variables yn conj x q conjunction atoms form n z p z z
n p respectively denote concept role name occurring alph z z
constants adom variables x n certain answers q
set ans q substitutions free variables q constants terms
adom q evaluates true every model e q logically implied
following notation used assertions denote q q free
variables called boolean certain answers empty substitution denoting
true nothing denoting false
easy consequence artale et al obtain following
characterization query answering dl litenu
theorem computing ans q ucq q dl litenu kb pt ime complete
size
customary view substitution simply tuple constants assuming ordering free
variables q



fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

proof proof theorem first propagate pt ime equality terms
active domain functionality congruence closure resort query answering
dl lite presence una pt ime combined size tbox
abox resulting equality propagation actually ac size abox
consider extension ucqs called ecqs queries query language
eql lite ucq calvanese et al fol query language whose atoms ucqs
evaluated according certain answer semantics ecq kb possibly
open formula form
q q x q q q x q
q denotes certain answers ucq q x denotes certain answers
x set hx yi adom x logical operators
usual meaning quantification ranges elements adom
formally define relation q holds substitution free variables
q written q inductively follows






q
x
q
q q
x q







q
x
q
q q
exists adom x q

x denotes substitution obtained assigning x constant term x
already present value replaced pair x added substitution
certain answer q denoted ans q set substitutions
free variables q q holds e
ans q

q

following line proof calvanese et al considering theorem
basic step evaluating ucq get
theorem computing ans q ecq q dl litenu kb pt imecomplete size
recall dl lite enjoys rewritability property states every ucq q
every dl lite kb
ans q

ans rew q

rew q ucq computed reformulation calvanese et al b
notice way compiled away tbox extended ecqs
well e every ecq q ans q ans rew q query rew q
obtained q substituting atom q q ucq rew q calvanese et al
setting exploit rewritability pre processed
abox pt ime propagating equalities individual terms adom according
functionality assertions congruence terms


fid escription l ogic k nowledge action bases

say two aboxes equivalent w r tbox predicate alphabet
denoted

every abox assertion concept assertion n n role
assertion p p equivalence assertion viceversa every abox assertion concept assertion n n
role assertion p p equivalence assertion
notice every ecq q whose concept role names belong
ans q ans q notice applying theorem boolean
query corresponding abox assertion obtain abox
equivalence checked pt ime

knowledge action bases
knowledge action base kab tuple k form
knowledge component knowledge base form action component action
base practice k stores information interest kb formed fixed tbox
initial abox evolves executing actions according sequencing established
process evolution individuals acquired kb individuals
witnesses pieces information inserted kab environment kab
runs e external world represent objects function terms kab
evolves identity individuals intuitively preserved induces necessity
remembering equalities terms denoting individuals discovered past describe
detail components kab
tbox
dl litenu tbox used capture intensional knowledge domain interest
tbox fixed evolve execution kab
abox
dl litenu abox stores extensional information interest notice
abox initial state kab kab evolves due effect actions
abox indeed state system evolves accordingly store date information
actions acquire information external world calls external
services represented functions given information services
except name parameters passed functions remain uninterpreted
assume service calls depends passed parameters hence
represent individuals returned service calls function terms presence
function terms impact treatment equality since principle need close equality
w r congruence closure generates infinite number logically implied equality
assertions going keep assertions implicit computing needed


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

actions
finite set actions action modifies current abox adding deleting
assertions thus generating abox action form
act x e en
act x signature e en finite set effects forming effect
specification action signature constituted name act list x individual input
parameters need instantiated actual individuals execution time effect ei
form
qi q




qi ucq e positive query extracts bulk data process obtained
certain answers qi free variables qi include action parameters

q
arbitrary ecq whose free variables occur among free variables qi
refines negation quantification qi query qi q

whole extracts individual terms used form state kab notice
ucq ecq division convenience readily available positive part
condition exploit later

set non ground abox assertions include terms constants free
variables qi function terms f x arguments x free variables qi
terms grounded values extracted qi q
give rise ground abox
assertions contribute form next state kab
precisely given current abox k substitution input parameters
action denote action instantiated actual parameters coming
firing state get state computed simultaneously applying
instantiated effects follows
effect ei form extracts set ans qi q
tuples
terms adom tuple asserts set abox assertions obtained
applying substitution free variables qi function term
f x appearing ground term introduced form f x
terms represent constants coming external environment kab running

denote ei overall set abox assertions e


ei



ans qi q


disregard specific treatment output parameters assume instead user freely pose queries
kb extracting whatever information interested



fid escription l ogic k nowledge action bases

moreover let eq ht ans x x observe due
semantics queries terms eq must appear explicitly adom
possibly infinite number equalities due congruence appear eq
though logically implied hence equalities eq equality assertions involving terms adom appear explicitly obtained
closing functionality congruence terms
overall effect action parameter substitution abox


ei
eq


notice presence function terms action effects makes domain aboxes obtained executing actions continuously changing general unbounded size notice
persistence assumption equalities e implicitly copy equalities holding current state one implies system evolves acquire
information equalities terms never lose information equalities already acquired
finally observe execution mechanism persistence frame assumption except equality made principle every move substitute whole old state e abox
one hand clear easily write effect specifications
copy big chunks old state one example p x
p x copies
entire set assertions involving role p sense execution mechanism adopted
basic address elaboration tolerance issues typical
reasoning actions frame ramification qualification
reiter consider irrelevant contrary relevant
issues desirable adopt basic mechanism simply
general enough expose difficulties need overcome order get decidability
verification setting
process
process component kab possibly nondeterministic program uses kab aboxes
store intermediate final computation actions atomic instructions
aboxes arbitrarily queried kab tbox updated
actions specify process component adopt rule specification
specifically process finite set condition action rules condition action rule
expression form
q
action q ecq whose free variables exactly parameters
rule expresses tuple condition q holds action actual
parameters executed processes force execution actions constrain
user process able choose action rules forming process allow
moreover processes inherit entirely states kab knowledge component tbox
abox see e g cohn hull
see work kowalski sadri



fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

villain v character
livesin v character
livesin v city
character v livesin
funct livesin
enemy v villain
enemy v superhero
defeated v villain
defeated v superhero
defeated v enemy
alterego v superhero
alterego v character
funct alterego



alterego
enemy

superhero

character



livesin

city

villain

subset
defeated

figure kabs tbox example
observe adopt basic rule specification spite simplicity
able expose difficulties setting choices possible particular
process could maintain state besides one kab long additional
state finite embeddable kab would easily extend case
example let us consider kab k describing super heroes comics world
cities characters live figure shows tbox rendering
uml class diagram relationship uml class diagrams description logics
general dl lite particular refer work berardi calvanese de giacomo
calvanese de giacomo lembo lenzerini poggi rodrguez muro rosati
dynamics domain characters superheroes super villains
fight classic plot superheroes help endeavors law enforcement
fighting villains threatening city live villain reveals perpetrating
nefarious purposes citys peace consequently becomes declared enemy
superheroes living city character lives one city time common trait
superheroes secret identity superhero said alter ego character
identity common life hence abox assertion alterego p means superhero
alter ego character p villains try unmask superheroes e secret identity
order exploit knowledge defeat notice subtle difference use
alterego p assertion model fact alter ego p whereas asserting p
capture knowledge p semantically denote individual may include
actions following ones
becomesh p c character p livesin p c v villain v livesin v c
superhero sh p alterego sh p p
copyall
states exists least one villain living city c superhero sh p created
purpose protecting c superhero p alter ego copyall shortcut
explicitly copying concept role assertions state equality assertions


fid escription l ogic k nowledge action bases

implicitly copied action
unmask p alterego p
copyall

p

states superhero alter ego p gets unmasked asserting equality
p known p action
fight v p villain v character p alterego p p
copyall

defeated v

states villain v fights superhero defeats unmasked e known
equal alter ego action
challenge v
villain v superhero p alterego p livesin p sc defeated v
livesin v sc enemy v
copyall
states villain v challenges superhero defeated next lives
city enemy action
threatencity v c
villain v superhero p alterego p livesin p c
enemy v livesin v c
copyall
states villain v threatens city c becomes enemy superheroes
live c
process might include following rules
character p superhero livesin c
superhero character c
enemy v v defeated v
villain v superhero
villain v city c v villain v livesin v c v v








becomesh p c
unmask c
fight v
challenge v
threatencity v c

instance first rule states character become superhero city already
one whereas last one states villain threaten city city
another villain known distinct
notice execution reasoning kb performed instance consider
initial abox
superhero batman villain joker alterego batman bruce
livesin bruce gotham livesin batman gotham livesin joker city
state bruce batman live city batman alter ego bruce
known whether denote individual executing challenge joker batman
indeed allowed process generates abox added assertions enemy joker
batman livesin joker gotham gotham city implied functionality livesin



fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

kab transition system
semantics kabs given terms possibly infinite transition systems represent
possible evolutions kab time actions executed according process notice
transition systems must equipped semantically rich states since full kb associated formally define kind transition system need follows transition
system tuple form u abox
u countably infinite set terms denoting individuals called universe
tbox
set states
initial state
abox function given state returns abox associated
individuals terms u conforms
transition relation pairs states
convenience
introduce active domain whole transition system defined
adom adom abox introduce predicate alphabet alph
set concepts roles occurring co domain abox
kab generates transition system form execution formally given
kab k define generated transition system k u abox
follows
u formed constants function terms inductively formed starting
adom applying functions occurring actions
tbox kab
abox identity function e state simply abox
initial state
defined mutual induction smallest sets satisfying following property rule q evaluate q tuple returned
abox consistent w r abox
notice alphabet alph k k simply formed set alph k concepts
roles occur k
kab transition system k infinite tree infinitely many different aboxes
nodes general fact get transition system infinite enough perform
indefinitely simple action adds terms step e g action form
c x

c f x copyall

hence classical model checking clarke et al developed finite
transition systems cannot applied directly verifying kabs


fid escription l ogic k nowledge action bases

verification formalism
specify dynamic properties kabs use first order variant calculus stirling
park calculus virtually powerful temporal logic used model checking
finite state transition systems able express linear time logics ltl psl
branching time logics ctl ctl clarke et al main characteristic
calculus ability expressing directly least greatest fixpoints predicate transformer
operators formed formulae relating current state next one fixpoint
constructs one easily express sophisticated properties defined induction co induction
reason virtually logics used verification considered fragments
calculus technically calculus separates local properties asserted current state
states immediate successors current one properties talking states
arbitrarily far away current one stirling latter expressed use
fixpoints
work use first order variant calculus allow local properties
expressed ecqs time allow arbitrary first order quantification across
states given nature ecqs used formulating local properties first order quantification
ranges terms denoting individuals formally introduce logic la defined follows
q x hi z z
q possibly open ecq z second order predicate variable arity make use
following abbreviations x x hi
z z z z formulae z z respectively denote least
greatest fixpoint formula seen predicate transformer z usual calculus
formulae form z z must obey syntactic monotonicity w r z
states every occurrence variable z must within scope even number
negation symbols ensures least fixpoint z well greatest fixpoint z
exists
semantics la formulae defined possibly infinite transition systems form
hu abox seen since la contains formulae individual
predicate free variables given transition system introduce individual variable valuation
v e mapping individual variables x u predicate variable valuation v e
mapping predicate variables z subsets three notions place
assign meaning formulae associating v v extension function
v v maps

formulae subsets formally extension function v v defined inductively follows
q
v v

v v

v v
x
v v
hi
v v
z
v v
z
v v









ans qv abox true

v v


v v v v
adom abox
v x v




v v
v z

e
v v z e e

qv stands boolean ecq obtained q substituting free variables according
v intuitively
v v assigns constructs following meaning


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

boolean connectives expected meaning
quantification individuals done terms current abox notice
terms referred later states associated abox include
terms anymore
extension hi consists states state transition
formula holds valuation v
extension consists states states transition
formula holds valuation v
extension z smallest subset e assigning z
extension e resulting extension valuation v contained e
extension z least fixpoint operator
v v z e v z e denotes
predicate valuation obtained v forcing valuation z e
similarly extension z greatest subset e assigning
z extension e resulting extension contains e extension
z



e

e

formally
z
greatest fixpoint operator
v v
v v z e

v v z e
closed formula
v v depend v v denote extension

simply closed formula holds state case write
closed formula holds denoted call model
checking verifying whether holds
next example shows simple temporal properties expressed la
example considering kab example easily express temporal properties
following ones
current superheroes live gotham live gotham forever form
safety
x superhero x livesin x gotham z livesin x gotham z
eventually current superheroes unmasked form liveness
x superhero x z alterego x x z
exists possible future situation current superheroes unmasked another form liveness
x superhero x z alterego x x hiz
along every future true every superhero exists evolution
eventually leads unmask form liveness holds every moment
x superhero x z alterego x x hiz


fid escription l ogic k nowledge action bases

consider two transition systems sharing universe predicate alphabet
say behaviorally equivalent satisfy exactly la formulas
formally capture equivalence make use notion bisimulation milner
suitably extended deal query answering kbs
given two transition systems

hu abox

hu abox sharing universe u tbox
alph alph bisimulation relation b
b implies
abox abox
exists b
exists b
say two states bisimilar exists bisimulation b
b two transition systems initial state initial state bisimilar
b following theorem states formula evaluation la indeed invariant
w r bisimulation equivalently check bisimilar transition systems
theorem let two transition systems share universe tbox
predicate alphabet bisimilar two states
including initial ones bisimilar closed la formulas


iff



proof proof analogous standard proof bisimulation invariance calculus stirling though taking account bisimulation guarantees ecqs evaluated
identically bisimilar states notice assumption two transition systems share
universe predicate alphabet makes easy compare answers queries
making use notion bisimulation example redefine transition system
generated kab k maintaining bisimilarity modifying definition
k hu abox given section follows
modify function term introduced generated abox
current abox already term
ii abox abox obtained current state logically equivalent
abox abox already generate state generate state
simply add k

verification kabs
immediate see verification kabs undecidable general easy represent
turing machines kab actually fragment capabilities
kabs shown next lemma
lemma checking formulas form z n hiz n atomic concept
individual occurring undecidable already kab k
note terms present current abox preserved abox together equalities
terms



fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

first c
value c x
value c av
cell cr aq
cell n c aq next c n c last n c
last c
cell c
cell cr
stop

first c
cell c value c x
cell c aq value c av
cell c aq value c av next c cr
cell c aq value c av last c
cell c last c
cell c first c
cell c next c cr
cell c aqf

figure effects action used encode transition q v q v r turing machine
empty tbox
actions make use negation equality
trivial process poses restriction executability actions
proof given turing machine hq q qf construct corresponding
kab km mimics behavior specifically encode halting
verification km roughly speaking km maintains tape
state information current abox encodes transitions actions
construction makes use tape initially contains unique cell represented constant
extended fly needed cells right represented function terms
form n n cells left represented function terms form
p p make use one constant aq state q q one constant av
tape symbol value v special constant following concepts roles
cell c h cell tape c cell identifier h corresponds current
state head currently points c head currently point
c
next cl cr relative position cells stating cr cell immediately following cl
value c v cell c currently contains value v v
first c last c respectively denote current first cell last cell portion
tape explored far
stop c used detect halts
initial state km contains unique cell defined
cell aq value first last
action component contains action parameters transition
process poses restriction executability actions e contains rule true
action
provide specification actions detailing case right shift transition
q v q v r corresponding action specification consists set effects shown
figure first effect maintains first position tape unaltered second third


fid escription l ogic k nowledge action bases

effects deal cell values remain except current cell updated
according transition next three effects deal right shift turing machine
state current cell next cell therefore last one head moved
next cell state change recorded case last cell remains
instead current cell last one moving head tape must properly
extended function n used create identifier successor cell starting
identifier current one furthermore since transition corresponds right shift one
cell first cell cells immediately following cell marked marked
next state finally last effect used identify case reached final state
marked inserting state special assertion stop
construction left shift transition done symmetrically function p create
predecessor cell construction km satisfies conditions theorem observe
transition system km generated km every action corresponding every transition
executed abox state km since empty actually generate
successor state however state unique action corresponds actually
executed transition generate successor state containing abox assertion form
cell c aq state q therefore aboxes states properly corresponding
configurations could eventually lead abox state km stop holds
latter happen halts precisely one induction length
respectively halting computation shortest path initial state km
state stop holds halts km z stop hiz
concludes proof
previous lemma shows undecidability already special case immediately
obtain following
theorem verification la formulae kabs undecidable
observe lemma uses kb constituted abox containing concept
role assertions makes use conjunctive queries defining actions effects moreover formula check makes use quantification simply seen
propositional ctl formula form ef p expressing proposition p eventually holds along
one path

verification weakly acyclic kabs
spite theorem next introduce notable class kabs verification arbitrary
la properties decidable rely syntactic restriction resembles notion
weak acyclicity data exchange fagin et al guarantees boundedness aboxes
generated execution kab turn decidability verification
ready introduce notion weak acyclicity context introduce
edge labeled directed dependency graph kab k defined follows nodes
called positions obtained tbox node every concept name n
two nodes every role name p corresponding domain range p edges
use original definition weak acyclicity however applied variants weak
acyclicity see discussion section



fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

villain

livesin

livesin

city

enemy

character

alterego

defeats


defeats





alterego


superhero

enemy

figure weakly acyclic dependency graph example
drawn considering every effect specification q q
action contained
tracing values copied contribute generate values system progresses
particular let p position corresponding concept role component rewriting rew q
q variable x every position p variable x include normal
edge p p every position p function term f x include

special edge p
p say k weakly acyclic dependency graph cycle going
special edge
example kab example weakly acyclic dependency graph shown figure
contain cycle going special edges readability self loops shown
figure present nodes dashed edges used compactly represent
contributions given rewriting queries e g dashed edge form villain character
denotes every outgoing edge character exists outgoing edge villain
type target hence w r weak acyclicity dashed edges simply replaced
normal edges
ready state main work going prove remainder
section
theorem verification la properties weakly acyclic kab decidable e xp ime
size kab
observe restriction imposed weak acyclicity variants severe
many real cases kabs indeed weakly acyclic transformed weakly acyclic ones
cost redesign indeed weakly acyclic kabs cannot indefinitely generate values
old ones depend chain unboundedly many previous values words
current values depend bounded number old values unbounded systems exist
theory e g turing machines higher level processes business process management
service oriented modeling typically require boundedness practice systematically
transform systems weakly acyclic ones remains open issue
remainder section present proof theorem several steps
normalized kab first introduce normalized form k kab k isolates
contribution equalities tbox actions effects kab important point
normalizing kab preserves weak acyclicity


fid escription l ogic k nowledge action bases

normalized introduce normalized version norm avoids
consider equalities generating bulk set tuples used effects generate
next abox transition system k norm generated normalized version
norm normalized kab k bisimilar transition system k generated k hence two transition systems satisfy la formulae

positive dominant next step introduce call positive dominant k
normalized kab k obtained k essentially dropping equalities negations
tbox however k contains enough information positive part
drop features active domain transition system k generated
k overestimates active domain transition system k norm generated
normalized kab k moreover normalized hence original kab weakly
acyclic positive dominant finally positive dominant weakly acyclic
size active domain transition system k polynomially bounded size
initial abox hence size active domain k norm implies
size k norm finite exponential size initial abox
putting together tying together get claim
following detail steps
normalized kab
given kab k build kab k called normalized form
k applying sequence transformations preserve semantics k producing
kab format easier study
view abox partitioned part collecting concept role assertions
part collecting equality assertions denote e q former eq
latter closed w r functionality assertions tbox notice
closure computed polynomial time size
k individuals appearing equality assertions abox occur special concept assertions form dummy concept dummy unrelated
concepts roles kab
adding concept assertions dummy equality assertion
appear elsewhere
adding right hand part action effect ei concept assertion dummy
equality assertion right hand part ei
adding action effect specification form
dummy x

dummy x

notice transformation get aboxes containing additional
concept dummy however never queried actions effects rules forming
process impact transformation simply adom aboxes


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

kab transition system readily identified set terms occurring
concept role assertion without looking equality assertions
given abox denote two transformations respectively add closure equalities extension dummy
manipulate resulting effect specification
q q



follows
replace q q rew q rew q calvanese et al exploiting
calvanese et al b artale et al guarantee
every ecq q every abox equalities closed functionality
congruence
ans q

ans rew q

replace effect specification rew q rew q
resulting


step set effect specifications qi rew q
one cq qi

ucq rew q
effect specification qi rew q
express qi make
equalities used join terms explicit remove constants qi specifically
replace effect specification
qi q rew q




qi cq without repeated variables obtained qi replacing
variable x occurring qi j th occurrence x except first one x j
ii replacing constant c variable xc
v
v
q x x j xc c first conjunction contains one equality
x x j variable x qi variable x j introduced step
ii second conjunction contains one equality constant c
qi
clarify latter consider following example
example given query

qi n x p x p c x
step replaces qi q

qi n x p x p xc x



q x x x x xc c

fid escription l ogic k nowledge action bases

correctness
step immediate notice qi equivalent qi
v
v
j
x x xc c equivalence latter qi q consequence
construction artale et al shows query entailment presence
equalities reduced query evaluation saturating equalities w r transitivity
reflexivity symmetry functionality
given action denote action normalized
since transformations preserve logical equivalence long query dummy

lemma alph k
normalization kab preserves weak acyclicity crucial consideration
later
lemma k weakly acyclic k weakly acyclic
proof consider effect specification q q
belonging action k
contribution effect specification dependency graph g k limited cq qi
ucq rew q set concept role assertions observe
qi corresponds query qi k variable qi occurs exactly every free
variable x qi appears every occurrence x qi edge included
g dependency graph g k one edges appears corresponding single
occurrence variable x qi
notice dummy omitted dependency graph g since definition k
dummy occur left hand side effects except trivial effect dummy x
dummy x true k dummy needed therefore g indeed subgraph
g hence weak acyclicity g implies weak acyclicity g
normalized
next give simplified version call norm start observing
reformulate definition given section first need define
suitable notion join two queries let q q two ecqs may free variables
common let two aboxes define ans q ans q
set substitutions free variables q q qi holds ai e
ai qi given action parameters substitution abox



apply e
e

effect specification e q q q
apply e








ans q ans q q



eq

fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

instead define norm
norm





apply norm e

e

effect specification e q q q
apply norm e








eq

ans q e q ans q q

notice difference norm latter use e q
instead compute answers cqs q
following lemma shows applications norm give rise logically
equivalent aboxes
lemma alph k norm
proof order prove claim enough concept role assertion norm whose concept role name belongs alph k
concept role assertion whose concept role name belongs alph k norm actually prove
slightly stronger
abox assertion apply norm e apply e

abox assertion apply e apply norm e

monotonicity q fact e q



contained

ans q e q ans q q

ans q ans q q

hence claim follows
consider abox assertion apply e definition apply know
exists effect e q q q
assignment free variables


q
include free variables q q ans q

ans q q let x xn free variables q
x xn tn variable xi let n xi unique concept atom
q xi occurs similar considerations hold xi occurs role atom
n ti e q n e q ti eq former
case let denote ti latter case let denote consider substitution
x xn n construction ans q e q since
ans q q ti eq n
ans q e q ans q q since



fid escription l ogic k nowledge action bases

identical modulo eq
eq apply norm e
infer apply norm e hence claim holds
combining lemma lemma get k norm k behave
equivalently starting equivalent aboxes
lemma alph k alph k norm
proof claim direct consequence lemma lemma equivalence
observation logical equivalence transitive
given kab k normalized version k call transition system generated
way k norm k instead k normalized transition system
generated k denote k norm
lemma given kab k transition systems k k norm bisimilar
proof let k u abox k norm u norm abox norm norm
define relation b norm follows b iff abox alph k
abox norm b bisimulation prove b closed
definition bisimulation indeed b
abox alph k abox definition
exists action substitution
abox notice abox consistent w r let
us consider norm abox since abox alph k abox
lemma alph k therefore consistent w r hence
norm b
similarly norm exists action substitution
norm abox consistent w r let us consider
abox since alph k lemma alph k
therefore consistent w r hence considering equivalence
enjoys symmetry b
proves claim
direct consequence lemma considering bismulation invariance
theorem faithfully check la formulas k norm instead k
positive dominant
next step weakly acyclic kab k normalized transition system k norm
finite considering another transition system behaviorally unrelated
k norm hence k whose active domain bounds active domain k norm
obtain transition system essentially ignoring negative information equalities
allows us refer back literature data exchange boundedness call
transition system positive dominant
given normalized kab k define positive dominant k kab
e q

k true


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

action without parameters effect specification constituted copyall
one effect form
e q
qi

effect qi qi q
every action observe parameters

actions become simply free variables
notice applicable every step process trivially allows
resulting state consistent since k empty tbox moreover equality assertion
ever generated transition system k constituted single run incrementally
accumulates facts derived iterated application increasing
abox behavior closely resembles chase tuple generating dependencies tgds data
exchange application corresponds parallel chase step deutsch nash
remmel
technical point view notice k already normalized form e k k
norm identical since neither equality negation considered hence
k k norm
next lemma shows k preserves weak acyclicity k
lemma k weakly acyclic positive dominant k weakly acyclic
proof claim follows fact construction dependency graph g k
equal g indeed qi connection ai preserved k hence get
claim
next k weakly acyclic active domain aboxes transition
system k polynomially bounded active domain initial abox
lemma k weakly acyclic exists polynomial p
e q

adom k p adom
proof observe exists strict connection execution k chase
set tgds data exchange therefore proof closely resembles one fagin et al
thm shown weakly acyclic tgds every chase sequence bounded
let k u e q abox let g v e dependency graph k
let n adom e q every node p v consider incoming path finite
infinite path ending p let rank p maximum number special edges
incoming path since k weakly acyclic hypothesis g contain cycles going
special edges therefore rank p finite let r maximum among rank pi
nodes observe r v indeed path lead node twice special
edges otherwise g would contain cycle going special edges thus breaking weak
acyclicity hypothesis next observe partition nodes v according rank
obtaining set sets v v vr vi set nodes rank
let us consider state obtained e q applying action contained
k arbitrary number times prove induction following claim
every exists polynomial pi total number distinct values c occur
positions vi pi n


fid escription l ogic k nowledge action bases

base case consider p v definition p incoming path containing special edges
therefore values stored p along run e q indeed p store
values part initial abox e q holds nodes v hence fix
p n n
inductive step consider p vi r first kind values may stored
inside p values stored inside p e q number values
n addition value may stored p two reasons copied
position p vj j generated possibly function term built applying
effects contain function head
first determine number fresh individuals generated function terms
possibility generating storing value p action reflected
presence special edges definition special edge entering p must start node

p v vi
p induction hypothesis number distinct values exist p
bounded h n j pj n let ba maximum number special edges
enter position positions tbox ba bounds arity taken function term
contained every choice ba values v vi one special edge
enter position number values generated position p bounded tf h n ba
tf total number facts contained effects note number
depend data e q considering positions vi total number values
generated bounded f n vi tf h n ba clearly f polynomial
tf ba determined
count next number distinct values copied positions vi positions
vj j copy represented graph normal edge going node vj
node vi j observe first normal edges start nodes
v vi cannot start nodes vj j prove contradiction
assume exists p p e p vi p vj j case
rank p would j contradicts fact p vi consequence number
distinct values copied positions vi bounded total number values
v vi corresponds h n previous consideration
putting together define pi n n f n h n since pi polynomial
claim proven
notice claim bounded r constant hence exists
fixed polynomial p number distinct values exist every state
bounded p n k inflationary applied copies concept role
assertions current next state since k contains single run p n bound
adom k well
following lemma shows key feature positive dominant
lemma adom k adom k
e q

proof let k k true
first observe every abox k adom adom e q definition k
role special concept dummy


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

induction construction k u abox k
e q

u abox state exists state
e q
e q
base case holds initial states two transition systems definition
inductive case given e q
unique state
note exists action k substitution parameters
norm similarly taking account parameters
executable k norm
construction k effect e form
e q q q

e

effect e form
e q

e q

e

e e q obtained e removing equality assertions induction hypothesis
e q observing ans q e q ans q q
e q
ans q obtain e
e e apply norm e
e apply e hence get claim e q
since abox k active domain adom adom e q identical construction since adom k adom k simply union active
domains generated aboxes get claim
putting together
kab k weakly acyclic lemma normalized form k weakly acyclic well
lemma positive dominant k hence lemma size active
domain adom k transition system k k polynomially related size
initial abox
lemma implies size active domain adom k norm
transition system k k polynomially related size initial abox hence number
possible states k finite fact exponential size initial abox
follows checking la formulae k done e xp ime w r size k
finally lemma k k bisimilar bisimulation invariance theorem
k k satisfy exactly la formulae hence check la formula k
sufficient check k done e xp ime concludes proof
theorem

related work
provide detailed review work related framework presented
previous sections


fid escription l ogic k nowledge action bases

combining description logics temporal logics
work deeply related studies combinations description logics temporal logics indeed actions progress knowledge time although temporal logics
mention actions easily used describing progression mechanisms including transition systems see e g clarke et al calvanese de giacomo vardi
mostly explored combination standard description logics standard
temporal logics level certainly natural form combination
logical point view technically form combination gives rise combined logic
two dimensional semantics one dimension time dl domain
schild wolter zakharyaschev b gabbay et al unfortunately
computational point view form combination suffers key undecidability
makes fragile many practical purposes possibility specifying roles
preserve extension time called rigid roles causes undecidability referring
domain interest example would example undecidability
theories specify instance character livesin city forever moreover
undecidability already holds concept satisfiability w r fixed tbox e
tbox axioms must hold time points without aboxes single rigid role wolter
zakharyaschev b gabbay et al holds reasoning service
much simpler conjunctive query answering calvanese de giacomo lenzerini
even fixed tbox data abox assertions hence individual terms one
simplest kinds temporal formulae namely forever something true safety clarke et al

decidability regained dropping tboxes altogether decision
still hard non elementary time gabbay et al ii allowing temporal operators
concepts schild artale franconi gutierrez basulto jung lutz
jamroga case complexity depends crucially description logic iii allowing temporal operators tbox abox assertions lutz wolter zakharyaschev
baader et al fact cases ii iii mixed baader laux wolter
zakharyaschev
allowing temporal operators assertions case iii tightly related
functional adopted fact admit temporal operators front
assertions allows us consider temporal whose time points actually sets
description logic assertions hence keeps temporal component distinct description
logic one exactly particular baader et al directly
compared apart obvious differences formalism used one key point get
decidability individual terms mentioned abox assertions fixed priori
possible adapting techniques presented could extended allow
functions denoting terms hence allowing adding fresh individual terms temporal
evolution

lose decidability suffices able specify verify persistence binary predicates roles allows
one build infinite grid hence encode turing machine computation robinson van emde boas




fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

combining description logics actions
somehow hampered undecidability mentioned beginning section
combinations description logics action theories studied years particular
liu lutz milicic wolter b study combinations description logics action
theories level w r two classical reasoning actions
namely projection executability require explicitly give sequence
actions check property resulting final state projection check executability
sequence actions comes certain precondition reiter
sophisticated temporal properties particular forever something true mentioned would
lead undecidability way notice undecidability deeply questions
computational point view possibility adding sound complete automated reasoning
capabilities proposals owl semantic markup web services martin paolucci
mcilraith burstein mcdermott mcguinness parsia payne sabou solanki srinivasan sycara

possibly first proposal implicitly functional view kb pioneering
work de giacomo iocchi nardi rosati adopts epistemic description logic
certain answers combined action formalism describe routines mobile
robot one important point individual terms bounded fixed priori
functional view first spelled calvanese de giacomo lenzerini
rosati calvanese et al work projection executability
studied however distinction kb states actions specified
updates framework gives rise single transition system whose states labeled
kbs fact tbox fixed abox changes state state however
individual terms considered fixed priori hence resulting transition system finite
although studied work sophisticated forms temporal properties proposed
readily verifiable setting interestingly apart kbs action work
golog programs considered programs whose atomic actions defined
action formalism combined usual less usual programming constructs
sequence loop else nondeterministic pick value levesque reiter
lesperance lin scherl de giacomo lesperance levesque important
characteristic programs finite number control states notice
memory storage programs kept action theory kb case although
scope finiteness allows easily extending program
well
interesting alternative way combine description logics reasoning actions
one reported gu soutchanski description logics kb used special
fol theory describing initial situation situation calculus basic action theory reiter
notice tbox assertions act state constraints lin reiter
would lead undecidability discussed wolter zakharyaschev b gabbay
et al fact essentially persist way actions

actually mainly focus concepts description logic includes universal role allows
one express tbox assertions concepts baader et al



fid escription l ogic k nowledge action bases

description logics update
observe effects action setting seen basic form update previous
state katsuno mendelzon although mechanism sidesteps semantic computational difficulties description logic kb update liu et al b de giacomo lenzerini poggi
rosati calvanese kharlamov nutt zheleznyakov lenzerini savo
simply rejecting execution actions would lead inconsistent state adopting proper
forms update setting interesting issue future
artifacts data aware processes
work closely related verification artifact centric business processes
nigam caswell bhattacharya et al artifact centric approaches model business
processes giving equal importance control flow perspective data interest
artifact typically represented tuple schema artifact type together
set actions services specify information maintained artifact
manipulated time action usually represented terms pre post conditions
respectively used determine action eligible execution relate
current artifact state successor state obtained action execution pre postconditions modeled first order formulae post conditions employ existentially quantified
variables account external inputs environment differently kabs
approaches targeting artifact centric processes assume complete information data
relational database maintain artifacts information aim works
verify whether relational artifact centric process meets temporal dynamic property
formalized first order variants branching linear temporal logics
work deutsch et al infinite domain artifacts database equipped
dense linear order mentioned pre conditions post conditions properties
runs receive unbounded external input infinite domain decidability verification
achieved avoiding branching time properties restricting formulae used specify
pre post conditions properties particular refers read read write
database relations differently querying latter checking whether contain given tuple constants authors restriction tight integrity constraints cannot
added framework since even single functional dependency leads undecidability
verification damaggio et al extend disallowing read write relations
allows extension decidability integrity constraints expressed embedded
dependencies terminating chase decidable arithmetic major difference
concepts kab considered read write relations
arbitrarily queried determine progression system differently works
belardinelli et al consider first order variant ctl quantification across states
verification formalism framework supports incorporation values external environment parameters actions corresponding execution semantics considers
possible actual values thus leading infinite state transition systems decidability verification authors assumption state system
constituted union artifacts relational instances bounded active domain possible construct faithful abstract transition system differently original one
finite number states belardinelli lomuscio patrizi improve belar

fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

dinelli et al introducing semantic property uniformity roughly speaking
says transition system representing execution process study able
distinguish among states constants patterns data assumptions uniformity state boundedness decidability verification achieved richer
logic namely ctl quantification across states interpreted active domain semantics
notion state boundedness adopted independently developed framework
bagheri hariri calvanese de giacomo deutsch montali first order
variants calculus similar one considered considered beside differences
way data external information modeled sufficient syntactic conditions guarantee state boundedness proposed works developed within relational database
setting extend trivially systems actions change dl knowledge bases
connection data artifact centric business processes data exchange exploit first established cangialosi et al de giacomo de masellis
rosati transition relation described terms tgds map
current state represented relational database instance next one null values used
model incorporation unknown data system process evolution essentially
form chase suitable weak acyclicity conditions chase terminates guaranteeing
turn system finite state decidability shown first order calculus without
first order quantification across states extended bagheri hariri et al
tgds replaced actions rule process follow structure
kab action component revised framework values imported external environment represented uninterpreted function terms play role nulls
work cangialosi et al de giacomo et al since bagheri hariri et al
cangialosi et al de giacomo et al rely purely relational setting choice leads ad hoc interpretation equality null value function term
considered equal differently works allow sophisticated
schema constraints e tbox provide time fine grained treatment
equality individuals inferred equal due application schema
constraints execution action treatment equality differentiates work
one bagheri hariri calvanese de giacomo de masellis introduces preliminary version framework presented una assumed equality
considered specifically bagheri hariri et al propose semantic artifacts
means represent artifacts corresponding processes higher level abstraction relational artifacts representing artifact data semantically rich knowledge base operating
incomplete information kabs constitute general framework seamlessly
customized account semantic artifacts major difference work bagheri hariri
et al constituted verification formalism particular works focus
form calculus ecqs used query states system bagheri hariri et al
support quantification across states done
calvanese et al investigate framework data centric processes mixes proposed bagheri hariri et al relational artifacts notion knowledge
bases used particular semantically governed data aware processes introduced
mechanism model dynamic system working relational database providing
time conceptual representation manipulated data terms dl lite knowledge base
relying ontology data access calvanese et al declarative mappings used


fid escription l ogic k nowledge action bases

connect knowledge base underlying relational database differently kabs
system evolves relational layer knowledge base used understand ultimately
govern execution higher level abstraction
observe presented fully subsume bagheri hariri et al
underlying description logic owl ql one hand remove possibility
asserting functionality roles knowledge component equating individuals action action component precisely obtain setting presented bagheri hariri
et al hand frameworks established complexity upper bounds


conclusions
studied verification knowledge action bases dynamic systems
constituted knowledge base expressed description logics action specification
changes knowledge base time obtained interesting decidability
relying notion weak acyclicity connection theory chase tgds
relational databases
work used original notion weak acyclicity however easy adopt
advanced forms acyclicity since depend ability finding finite
bound number distinct function terms generated applying chase
majority approaches adopt forms weak acyclicity focus databases marnette
geerts meier schmidt wei lausen cuenca grau horrocks krotzsch kupke
magka motik wang investigate sophisticated forms acyclicity context
knowledge bases without una thus seamlessly applied kabs interestingly
manage impact equalities setting without una resort singularization technique presented marnette closely resembles normalization kabs introduced
section
weak acyclicity allows us gain decidability bounding number distinct function
terms occur transition system alternative gain decidability bound
number distinct terms occurring abox assertions state variants notion state
boundedness proposed recently contexts belardinelli et al de giacomo
lesperance patrizi bagheri hariri et al great interest explore
setting presented actions acting description logic knowledge base
observe decidability well ones commented section
comes verification exponential size initial abox precludes direct application techniques large scale systems without careful analysis
modularized small units verified almost separately important
direction investigation
acknowledgments
partially supported eu ict collaborative project acsi
artifact centric service interoperation grant agreement n fp large scale
integrating project ip optique scalable end user access big data grant agreement n fp


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

references
artale calvanese kontchakov r zakharyaschev dl lite family
relations j artificial intelligence
artale franconi e temporal description logic reasoning actions
plans j artificial intelligence
artale franconi e temporal description logics gabbay fisher vila l
eds handbook temporal reasoning artificial intelligence foundations artificial
intelligence elsevier
baader f calvanese mcguinness nardi patel schneider p f eds
description logic handbook theory implementation applications cambridge university press
baader f ghilardi lutz c ltl description logic axioms acm trans
computational logic
baader f laux terminological logics modal operators proc th
int joint conf artificial intelligence ijcai pp
bagheri hariri b calvanese de giacomo g de masellis r verification
conjunctive query semantic artifacts proc th int workshop description logic dl vol ceur electronic workshop proceedings http
ceur ws org
bagheri hariri b calvanese de giacomo g de masellis r felli p foundations
relational artifacts verification proc th int conference business process
management bpm vol lecture notes computer science pp
springer
bagheri hariri b calvanese de giacomo g deutsch montali verification relational data centric dynamic systems external services corr technical report arxiv arxiv org e print archive available http arxiv org abs

bagheri hariri b calvanese de giacomo g deutsch montali verification
relational data centric dynamic systems external services proc nd acm
sigact sigmod sigart symp principles database systems pods
bao j et al owl web ontology language document overview second edition w c
recommendation world wide web consortium available http www w org
tr owl overview
belardinelli f lomuscio patrizi f verification deployed artifact systems via data
abstraction proc th int joint conf service oriented computing icsoc
vol lecture notes computer science pp springer
belardinelli f lomuscio patrizi f abstraction technique verification
artifact centric systems proc th int conf principles knowledge
representation reasoning kr pp
berardi calvanese de giacomo g reasoning uml class diagrams artificial
intelligence


fid escription l ogic k nowledge action bases

bhattacharya k gerede c hull r liu r su j towards formal analysis artifactcentric business process proc th int conference business process
management bpm vol lecture notes computer science pp
springer
burkart caucal moller f steffen b verification infinite structures
handbook process algebra elsevier science
calvanese de giacomo g lembo lenzerini poggi rodrguez muro
rosati r ontologies databases dl lite tessaris franconi e eds reasoning web semantic technologies informations systems th int
summer school tutorial lectures rw vol lecture notes computer science pp springer
calvanese de giacomo g lembo lenzerini rosati r eql lite effective first order query processing description logics proc th int joint conf
artificial intelligence ijcai pp
calvanese de giacomo g lembo lenzerini rosati r b tractable reasoning efficient query answering description logics dl lite family j automated
reasoning
calvanese de giacomo g lembo lenzerini rosati r data complexity
query answering description logics artificial intelligence
calvanese de giacomo g lembo montali santoso ontology
governance data aware processes proc th int conf web reasoning rule
systems rr vol lecture notes computer science pp springer
calvanese de giacomo g lenzerini conjunctive query containment answering description logics constraints acm trans computational logic

calvanese de giacomo g lenzerini rosati r actions programs description logic ontologies proc th int workshop description logic dl
vol ceur electronic workshop proceedings http ceur ws org pp

calvanese de giacomo g lenzerini rosati r actions programs
description logic knowledge bases functional lakemeyer g mcilraith
eds knowing reasoning acting essays honour hector levesque college
publications
calvanese de giacomo g montali foundations data aware process analysis
database theory perspective proc nd acm sigact sigmod sigart symp
principles database systems pods
calvanese de giacomo g vardi reasoning actions
ltl action theories proc th int conf principles knowledge representation reasoning kr pp
calvanese kharlamov e nutt w zheleznyakov updating aboxes dl lite
proc th alberto mendelzon int workshop foundations data management


fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

amw vol ceur electronic workshop proceedings http ceur ws
org pp
cangialosi p de giacomo g de masellis r rosati r conjunctive artifact centric
services proc th int joint conf service oriented computing icsoc
vol lecture notes computer science pp springer
clarke e grumberg peled model checking mit press cambridge
usa
cohn hull r business artifacts data centric modeling business
operations processes bull ieee computer society technical committee data
engineering
cuenca grau b horrocks krotzsch kupke c magka motik b wang z
acyclicity conditions application query answering description logics
proc th int conf principles knowledge representation reasoning
kr pp
damaggio e deutsch vianu v artifact systems data dependencies
arithmetic proc th int conf database theory icdt pp
de giacomo g de masellis r rosati r verification conjunctive artifact centric
services int j cooperative information systems
de giacomo g iocchi l nardi rosati r theory implementation
cognitive mobile robots j logic computation
de giacomo g lenzerini poggi rosati r instance level update erasure description logic ontologies j logic computation special issue ontology
dynamics
de giacomo g lesperance levesque h j congolog concurrent programming
language situation calculus artificial intelligence
de giacomo g lesperance patrizi f bounded situation calculus action theories
decidable verification proc th int conf principles knowledge
representation reasoning kr pp
deutsch hull r patrizi f vianu v automatic verification data centric business
processes proc th int conf database theory icdt pp
deutsch nash remmel j b chase revisited proc th acm
sigact sigmod sigart symp principles database systems pods pp

fagin r kolaitis p g miller r j popa l data exchange semantics query
answering theoretical computer science
gabbay kurusz wolter f zakharyaschev many dimensional modal logics
theory applications elsevier science publishers
gu soutchanski description logic situation calculus ann mathematics
artificial intelligence


fid escription l ogic k nowledge action bases

gutierrez basulto v jung j c lutz c complexity branching temporal description
logics proc th eur conf artificial intelligence ecai pp
jamroga w concepts agents coalitions alternating time proc th eur
conf artificial intelligence ecai pp
katsuno h mendelzon difference updating knowledge base
revising proc nd int conf principles knowledge representation
reasoning kr pp
kowalski r sadri f abductive logic programming agents destructive
databases ann mathematics artificial intelligence
lenzerini savo f updating inconsistent description logic knowledge bases
proc th eur conf artificial intelligence ecai pp
levesque h j reiter r lesperance lin f scherl r golog logic programming language dynamic domains j logic programming
levesque h j foundations functional knowledge representation artificial
intelligence
limonad l de leenheer p linehan hull r vaculin r ontology dynamic
entities proc st int conf conceptual modeling er
lin f reiter r state constraints revisited j logic programming
liu h lutz c milicic wolter f reasoning actions description
logics general tboxes proc th eur conference logics artificial
intelligence jelia vol lecture notes computer science springer
liu h lutz c milicic wolter f b updating description logic aboxes proc
th int conf principles knowledge representation reasoning kr
pp
lutz c wolter f zakharyaschev temporal description logics survey proc
th int symp temporal representation reasoning time pp
marnette b generalized schema mappings termination tractability proc
th acm sigact sigmod sigart symp principles database systems
pods pp
marnette b geerts f static analysis schema mappings ensuring oblivious termination proc th int conf database theory icdt pp
martin paolucci mcilraith burstein mcdermott mcguinness parsia b
payne sabou solanki srinivasan n sycara k bringing semantics
web services owl proc st int workshop semantic web
services web process composition swswpc
meier schmidt wei f lausen g semantic query optimization presence
types ed proc th acm sigact sigmod sigart symp
principles database systems pods
meyer smirnov weske data business processes emisa forum



fibagheri h ariri c alvanese e g iacomo e asellis f elli ontali

milner r algebraic definition simulation programs proc nd int
joint conf artificial intelligence ijcai pp
motik b cuenca grau b horrocks wu z fokoue lutz c owl web ontology language profiles second edition w c recommendation world wide web consortium available http www w org tr owl profiles
nigam caswell n business artifacts operational specification
ibm systems journal
park r finiteness mu ineffable theoretical computer science
poggi lembo calvanese de giacomo g lenzerini rosati r linking
data ontologies j data semantics x
reiter r knowledge action logical foundations specifying implementing
dynamical systems mit press
robinson r undecidability nonperiodicity tilings plane inventiones math

rosati r franconi e generalized ontology production systems proc
th int conf principles knowledge representation reasoning kr pp
aaai press
schild k combining terminological logics tense logic proc th portuguese
conf artificial intelligence epia vol lecture notes computer science
pp springer
stirling c modal temporal properties processes springer
van ditmarsch h van der hoek w kooi b dynamic epistemic logic springer
van emde boas p convenience tilings sorbi ed complexity logic
recursion theory vol lecture notes pure applied mathematics pp
marcel dekker inc
vianu v automatic verification database driven systems frontier proc
th int conf database theory icdt pp
wolter f zakharyaschev satisfiability description logics modal
operators proc th int conf principles knowledge representation
reasoning kr pp
wolter f zakharyaschev modal description logics modalizing roles fundamenta
informaticae
wolter f zakharyaschev b temporalizing description logic gabbay
de rijke eds frontiers combining systems pp studies press wiley




