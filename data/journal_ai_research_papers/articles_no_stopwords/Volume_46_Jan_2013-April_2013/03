journal artificial intelligence

submitted published

probabilistic continuous dynamic systems
bounded risk
masahiro ono

ono appi keio ac jp

keio university
hiyoshi kohoku ku
yokohama kanagawa japan

brian c williams

williams mit edu

massachusetts institute technology
massachusetts avenue
cambridge usa

lars blackmore

lars blackmore spacex com

spacex
rocket road
hawthorne ca usa

abstract
presents model planner called probabilistic sulu planner p sulu
planner controls stochastic systems goal directed manner within user specified risk
bounds objective p sulu planner allow users command continuous stochastic
systems unmanned aerial space vehicles manner intuitive safe
end first develop plan representation called chance constrained qualitative state
plan ccqsp users specify desired evolution plant state well
acceptable level risk example ccqsp statement go b within
minutes less probability failure develop p sulu planner
tractably solve ccqsp order enable ccqsp develop
following two capabilities risk sensitive risk bounds
goal directed continuous domain temporal constraints first capability
ensures probability failure bounded second capability essential planner
solve continuous state space vehicle path demonstrate
capabilities p sulu planner simulations two real world scenarios path
scheduling personal aerial vehicle well space rendezvous autonomous cargo
spacecraft

introduction
increasing need risk sensitive optimal uncertain environments
guaranteeing acceptable probability success motivating example article
boeing concept future aerial personal transportation system pts shown figure
pts consists fleet small personal aerial vehicles pav enable flexible point point
transportation individuals families
c

ai access foundation rights reserved

fio w illiams b lackmore

order provide safety pts highly automated us pilot error
listed primary cause fatal general aviation accidents according joseph
nall report aircraft owners pilots association air safety foundation automated
path scheduling collision avoidance traffic management significantly improve
safety pts well efficiency challenges operating system include
adapting uncertainties environment storms turbulence satisfying
complicated needs users
substantial body work uncertainty relevant however
distinctive three key respects first planner p sulu planner allows
users explicitly limit probability constraint violation capability particularly important risk sensitive missions impact failure significant second planner
goal directed mean achieves time evolved goals within user specified temporal constraints third planner works continuous state space continuous state space
representation fits naturally many real world applications aerial space
underwater vehicles important resources

figure personal transportation system pts courtesy boeing company
figure shows sample pts scenario passenger pav starts provincetown
wants go bedford within minutes passenger wants go scenic
area remain minutes flight fly zone nfz
storm must avoided however storms future location uncertain vehicles
location uncertain well due control error exogenous disturbances thus risk
penetrating nfz storm passengers want limit risk
order handle introduce novel planner called probabilistic
sulu planner p sulu planner building upon prior work model plan executive called
sulu leaute williams p sulu planner provides following three capabilities
order meet needs described scenario goal directed continuous
domain near optimal risk sensitive risk bounds
goal directed continuous domain p sulu planner must plan actions
continuous effects achieve time evolved goals specified users case pts
scenario figure pav must sequentially achieve two temporally extended goals called


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure sample plan personal aerial vehicle pav

episodes going scenic area arriving bedford additional
temporal constraints goals inherent scenario temporal constraints
come physical limitations fuel capacity others come passenger requirements
near optimal stochastic cost reduction performance improvement important issues system pts scenario passengers may want minimize trip
time fuel usage p sulu planner finds near optimal control sequence according
user defined objective function satisfying given constraints
risk sensitive risk bounds real world systems subject uncertainties state estimation error modeling uncertainty exogenous disturbance
case pavs position velocity vehicle estimated kalman filter
typically involve gaussian distributed uncertainties system model used
control perfect vehicles subject unpredictable disturbances turbulence uncertainty executed plan inevitably deviates
original plan hence involves risk constraint violation deterministic plan execution
particularly susceptible risk optimized order minimize given cost function
since optimal plan typically pushes one constraint boundaries hence
leaves margin error example shortest path pts scenario shown figure
cuts close nfzs storm generally constraint boundaries
tiny perturbation planned path may penetration obstacles
risk reduced setting safety margin path obstacles cost
longer path length however often impossible guarantee zero risk since typically non zero probability disturbance large enough push vehicle
feasible region therefore passengers vehicle must accept risk
time need limit certain level generally users autonomous
system uncertainty able specify bounds risk planner must
guarantee system able operate within bounds constraints called
chance constraints


fio w illiams b lackmore

overview planner
section describes inputs outputs p sulu planner informally rigorously
defined section
nputs
initial condition p sulu planner plans control sequence starting current state
typically estimated noisy sensor measurements therefore p sulu planner takes
probability distribution instead point estimate current state initial condition
stochastic plant model control community generate sequence
control inputs actuate physical system called plant action model plant
typically system real valued equations control state observable variables psulu planner takes input linear stochastic plant model specifies probabilistic state
transitions continuous domain stochastic extension continuous plant model used
leaute williams limit focus gaussian distributed uncertainty
chance constrained qualitative state plan ccqsp order provide users intuitive way command stochastic systems develop plan representation called chanceconstrained qualitative state plan ccqsp extension qualitative state plan qsp developed used leaute williams hofmann williams blackmore
li williams ccqsp specifies desired evolution plant state time
defined set discrete events set episodes impose constraints plant state
evolution set temporal constraints events set chance constraints specify
reliability constraints success sets episodes plan
ccqsp may depicted directed acyclic graph shown figure circles
represent events squares represent episodes flexible temporal constraints represented
simple temporal network stn dechter meiri pearl specifies upper lower
bounds duration two events shown pairs numbers parentheses
plan figure describes pts scenario depicted figure stated informally
start provincetown reach scenic region within time units remain
time units end flight bedford probability
failure episodes must less times remain safe region
avoiding fly zones storm limit probability penetrating
obstacles entire flight must take time units
formal definition ccqsp given section
objective function user p sulu planner specify objective function e g cost
function assume convex function
utput
executable control sequence p sulu planner plans finite horizon one two
outputs p sulu planner executable control sequence horizon satisfies
constraints specified input ccqsp case pts scenario outputs vehicles actuation inputs acceleration ladder angle nominal paths shown


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure example chance constrained qualitative state plan ccqsp plan representation specify desired evolution plant state acceptable levels
risk pts scenario figure passengers pav would go
provincetown bedford fly scenic region way safe region
means entire state space except obstacles risk episodes must within
risk bounds specified chance constraints

figure order control sequence executable must dynamically feasible
example curvature pavs path must exceed vehicles maneuverability
optimal schedule output p sulu planner optimal schedule set execution time steps events input ccqsp minimizes given cost function case
pts scenario shown figure schedule specifies leave scenic region
arrive bedford example p sulu planner finds schedule satisfies simple
temporal constraints specified ccqsp minimizes cost function
two outputs control sequence schedule must consistent
time evolved goals achieved optimal schedule applying control sequence
given initial conditions

p sulu planner must solve difficult generating executable control sequence
ccqsp involves combinatorial optimization discrete schedule non convex
optimization continuous control sequence article develop p sulu
planner three technical steps call spirals
first spiral described section solve special case ccqsp feasible state space convex e g path without obstacles
schedule fixed shown figure transformed convex optimization risk allocation presented previous work ono
williams obtain feasible near optimal solution ccqsp
optimally solving convex optimization interior point method blackmore ono

second spiral presented section consider ccqsp
non convex state space order include obstacles figure b develop branch
bound called non convex iterative risk allocation nira subproblems
branch bound search nira convex chance constrained optimal control
solved first spiral nira cannot handle flexible schedule


fio w illiams b lackmore

third spiral described section develop another branch boundbased namely p sulu planner solve general ccqsp
flexible schedule obstacles subproblems branch bound search psulu planner non convex chance constrained optimal control solved
nira
dp suluw section

nira section

ono williams b section

fixed schedule

fixed schedule



simple temporal
constraints






c



goal



goal

c

obstacle
start

start

convex fixed schedule

obstacle

waypoint

waypoint

waypoint
start

b non convex fixed schedule

goal



c non convex flexible schedule

figure three spiral ccqsp

related work
recall ccqsp distinguished use time evolved goals continuous states actions stochastic optimal solutions chance constraints
control disciplines explored aspects solution total novel
solving efficiently risk allocation novel
specifically extensive literature discrete actions achieve
temporally extended goals tegs tlplan bacchus kabanza talplan
kvarnstrom doherty treat tegs temporal domain control knowledge prune
search space progressing temporal formula however since teg planners assume
discrete state spaces cannot handle continuous states effects without discretization ignoring chance constraints representation time evolved goals used tlplan
p sulu planner similar tlplan uses version metric interval temporal logic mitl
alur feder henzinger applied discrete states p sulu planner uses qualitative state plans qsps leaute williams hofmann williams li
continuous states li shows given state space qsp expressed mitl
key difference defines p sulu planner addition chance constraints together
use continuous variables
several planners particularly employed components model executives command actions continuous state space example sulu leaute williams
takes input deterministic linear model qsp specifies desired evolution plant
state well flexible temporal constraints outputs continuous control sequence chekhov
hofmann williams takes input qsp nonlinear deterministic system model
outputs continuous control sequence order enable fast real time plan execution chekhov
precomputes flow tubes sets continuous state trajectories end goal regions specified given plan kongming li provides generative capability hybrid


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

systems involving continuous discrete actions employs compact representation
hybrid plans called hybrid flow graph combines strengths graph
discrete actions flow tubes continuous actions planners adapt effects uncertainty explicitly reason effects uncertainty example
sulu employs receding horizon continuously replans control sequence
latest measurements chekhovs flow tube representation feasible policies allows executive generate control sequences response disturbances line p sulu planner
distinct continuous planners plans model uncertainty dynamics instead reacting plan guarantees user specified probability success explicitly
reasoning effects uncertainty
ai literatures domain description language pddl supports mixed
discrete continuous domains fox long probabilistic pddl younes littman
relational dynamic influence diagram language rddl sanner handle stochastic systems recently coles coles fox long developed forward chaining
heuristic search planner named colin deal continuous linear change durationdependent effects however planners handle chance constraints note
outputs p sulu planner continuous space discrete time time dependent mdp
developed boyan littman handle continuous time encoding time state
extension p sulu planner continuous time would interesting future direction
work within ai community probabilistic focused discrete domains builds upon markov decision process mdp framework growing subcommunity focused extensions mdps continuous domain however tractability
issue since typically require partitioning approximation continuous state space
straightforward partitioning continuous state action spaces discrete states actions often leads exponential blow running time furthermore feasible state
space unbounded impossible partition space finite number compact subspaces alternative function approximation boyan moore
convergence guaranteed approximation error bounded bertsekas tsitsiklis
lagoudakis parr time dependent mdps boyan littman feng dearden
meuleau washington efficient partitioning continuous state space make
assumption set available states actions finite e discrete hence
mdps continuous state space rn requires approximate state space
finite number discrete states essentially different mdp approaches
continuous variables directly optimized convex optimization without discretization continuous state space hence continuity state space harm tractability
p sulu planner
second point comparison treatment risk p sulu planner mdp
framework offers marrying utility risk however mdp balance
utility risk assigning large negative utility event constraint violation
cannot guarantee bounds probability constraint violation constrained mdp
altman explicitly impose constraints dolgov durfee showed
stationary deterministic policies constrained mdps obtained solving mixed
integer linear program milp however constrained mdp framework impose bounds
expected value costs cannot guarantee strict upper bounds probability


fio w illiams b lackmore

constraint violation contrast p sulu planner allows users impose chance constraints
explicitly restrict probability constraint violation far authors know
risk sensitive reinforcement learning proposed geibel wysotzki
work considers chance constraints mdp framework developed reinforcement
learning mdps constraint probability entering error states work
distinct p sulu planner goal directed mean achieves
time evolved goals within user specified temporal constraints summarize prior mdp work
supports continuous state actions combination general continuous noise transitions
ensuring probability failure bounded
risk sensitive control methods continuous domain extensively studied discipline control theory example celebrated h control method minimizes effect
disturbances output system guaranteeing stability system stoorvogel
risk sensitive control approaches allow users choose level risk averseness
minimization expected exponentiated cost function jacobson fleming mceneaney however approaches address chance constraints optimal scheduling several methods proposed solving stochastic optimal control
continuous variables chance constraints method proposed van hessem turns
stochastic deterministic conservative ellipsoidal relaxation
blackmore proposes sampling method called particle control evaluates joint
chance constraints monte carlo simulation instead conservative bound
stochastic reduced milp although theoretical guarantee obtain exactly optimal solution infinite number samples used
computation time issue blackmore et al nemirovski shapiro employed
booles inequality decompose joint chance constraint individual chance constraints although booles inequality less conservative ellipsoidal relaxation still
non negligible conservatism since fixes individual risk bound uniform value
builds upon modifications allow flexible individual risk bounds
best authors knowledge p sulu planner first goal directed planner
able plan continuous state space chance constraints
innovations
p sulu planner enabled six innovations presented article
first order allow users command stochastic systems intuitively develop plan
representation ccqsp section
second order decompose chance constraint disjunctive clause disjunction
individual chance constraints introduce risk selection section
third order obtain lower bounds branch bound search nira develop
fixed risk relaxation frr linear program relaxation subproblems section
fourth minimize search space optimal schedule introducing forward
checking method efficiently prunes infeasible assignment execution time steps section
fifth order enhance computation time schedule optimization introduce method
obtain lower bound branch bound solving fixed schedule
partial assignment schedule section


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

sixth order minimize number non convex subproblems solved branch andbound search introduce variable ordering heuristic namely convex episode first cef
heuristic explores episodes convex feasible state region ones
non convex state region section
rest article organized follows section formally defines ccqsp
states ccqsp section derives encoding chanceconstrained optimization well encodings two limited versions ccqsp
one fixed schedule convex state space another fixed
schedule non convex state space section reviews solution fixed schedule ccqsp
convex state space section develops nira solves
fixed schedule ccqsp non convex state space section introduces
p sulu planner solves ccqsp flexible schedule nonconvex state space finally section shows simulation scenarios including
personal transportation system pts

statement
recall p sulu planner takes input linear stochastic plant model specifies
effects actions initial state description describing distribution initial states ccqsp
specifies desired evolutions state variables well acceptable levels risk
objective function output executable control sequence optimal schedule
performed finite horizon since p sulu planner incorporated finite horizon
optimal control first define variables used formulations define
elements inputs outputs
definition time step
consider series discretized finite time steps n fixed time interval
integer n size horizon since time interval take
positive real value suffices consider time steps integer indices approximate
systems dynamics use term time step mean integer index discretized time
steps term time mean real valued time define sets follows
n


n




limit scope article discrete time stochastic system optimizing
control sequence continuous time stochastic system requires solving stochastic differential
equation sde repeatedly performing computation tractable except simple

definitions events
event denotes start end episode behavior plan representation
definition event e e instance executed certain time step


fio w illiams b lackmore

define two special events start event e end event ee without loss generality
assume e executed end event ee represents termination entire
plan
definitions variables
variables used formulation involve discrete schedule continuous state vector
continuous control vector
formally define event well schedule follows
definition execution time step e integer valued scalar represents
time step event e e executed schedule e e ee
sequence execution time steps events e e finally partial schedule
e e e e ordered set execution time steps subset events e
definition start event executed e e following notation
schedule denote e execution time event e e see definition
schedule definition
consider continuous state space state vector state sequence defined
follows
definition state vector xt rnx real valued vector represents state plant
time step state sequence x n x xn vector state variables time step
n
actions assignments continuous decision variables referred control
vector
definition control vector ut rnu real valued vector represents control input
system time step control sequence u n u un vector control inputs
time n
definitions inputs
subsection defines four inputs p sulu planner initial condition stochastic plant
model ccqsp objective function
nitial c ondition
belief state beginning plan represented initial state assumed
gaussian distribution known mean x covariance matrix x
x n x x



parameters specified initial condition defined follows
definition initial condition pair x x x mean initial state
x covariance matrix initial state


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

tochastic p lant odel
p sulu planner controls dynamical systems actions correspond settings continuous control variables whose effects continuous state variables p sulu planner
specifies actions effects plant model plant model considered state
transition model continuous space employ variant linear plant model additive
gaussian uncertainty commonly used context chance constrained stochastic optimal control charnes cooper nemirovski shapiro oldewurtel jones morari
van hessem modification consider controller saturation specifically
assume following plant model
xt xt b u ut wt



wt rnx state independent disturbance th time step zero mean gaussian
distribution given covariance matrix denoted wt
wt n wt



although model prohibits state dependent disturbance types noise involved
target applications state independent example pts scenario introduced section
primary source uncertainty wind turbulence typically dependent
state vehicle space rendezvous scenario discussed section main sources
perturbations space craft tidal force unmodeled gravitational effects sun moon
planets wertz wiley j larson noises modeled state dependent
noise practice scale planned actions significantly smaller solar
system
dependent state space craft note formulation encode
time varying noise specifying different covariance matrices wt time step
set u rnu compact convex set represents continuous domain feasible
control inputs infeasible control input ut
u given plant actuators saturate
function u rnu u represents effect actuator saturation follows

u
u u
u u

pu u otherwise
pu u projection u u example u one dimensional u l u
pu u max min u u l note u introduces nonlinearity plant
parameters specified stochastic plant model defined
follows
definition stochastic plant model four tuple n b n w n u
n b n sets n matrices n b n
b b b n w n set n covariance matrices w n w w wn
u rnu compact convex set represents domain feasible control inputs
note xt well wt random variable ut deterministic variable figure
illustrates plant model typical plant model probability circles grow time since
disturbance wt added every time step drawn figure effect represents commonly
observed tendency distant future involves uncertainty near future


fio w illiams b lackmore

x

x





x
x




x





nominal
path

x



x

figure illustration stochastic plant model used p sulu planner
order mitigate accumulation uncertainty employ close loop control
generates control input ut incorporating nominal control input ut rnu
error feedback follows
ut ut k xt xt

k matrix representing constant stabilizing feedback gain time xt
nominal state vector nominal state xt obtained following recursion
x x
xt xt b ut




closed loop control employed geibel wysotzki oldewurtel
et al context chance constrained optimal control shown significantly
improves performance
closed loop method nominal control input ut planned execution actual control input ut computed real time feedback term
linearly responds error xt xt choosing feedback gain k appropriately
growth probability circles figure slowed neglecting effect controller
saturation e assuming u rnx follows xt gaussian distribution
covariance matrix xt evolves follows
xt b k xt b k wt



typical plant eigenvalues one therefore error feedback
e k size xt grows wt iteration choosing k
norm largest eigenvalue b k less one covariance xt grow
continuously feedback gain found standard control techniques
linear quadratic regulator lqr bertsekas since consider finite horizon discretetime optimal time varying lqr gain k obtained solving finitehorizon discrete time riccati equation practice often suffices use steady state e
time invariant lqr gain obtained solving infinite horizon discrete time riccati
equation simplicity note feedback gain k optimized real time
often used robust stochastic model predictive controls goulart kerrigan
maciejowski oldewurtel et al ono however extension beyond
scope


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

issue error xt xt happens large control input ut may exceed
feasible domain u resulting actuator saturation therefore hold due
nonlinearity function u address issue risk allocation
specifically impose chance constraints control saturation allocate risk state
control constraints discussed detail section
c hance constrained q ualitative tate p lan ccqsp
qualitative state plan qsp leaute williams temporally flexible plan specifies
desired evolution plant state activities qsp called episodes specify
constraints plant state ccqsp extension qsps stochastic plans involve
chance constraints defined follows
definition chance constrained qualitative state plan ccqsp four tuple p e c
e set discrete events set episodes set simple temporal constraints
c set chance constraints
four elements ccqsp defined precisely moment qsp ccqsp
illustrated diagrammatically directed acyclic graph discrete events e
represented vertices drawn circles episodes arcs ovals ccqsp start
event e end ee corresponds beginning end mission respectively
example figure shows ccqsp pts scenario state regions obstacles
ccqsp illustrated figure involves four events e e e e ee meanings
described follows
start event e corresponds take pav provincetown
second event e corresponds time step pav reaches scenic region
event e associated time instant pav left scenic region
end event ee corresponds arrival pav bedford
ccqsp four episodes two chance constraints c c c
natural language expression ccqsp
start provincetown reach scenic region within time units remain
time units end flight bedford probability
failure activities must less times remain safe region
avoiding fly zones storm limit probability penetrating
obstacles entire flight must take time units
formally define three types constraints episodes temporal constraints
chance constraint
episodes episode specifies desired state system control time
interval

definition episode esa ee
ts te ra associated start event ea end
n
event ee
ra r region state space set time steps state xt
must region ra



fio w illiams b lackmore

feasible region ra subset rn approximate ra set linear
constraints later section
ts te subset given function episodes start time step ts esa
end time step te ee
different forms ts te types episodes
following three types episodes particularly interest us
start episode ts te ts
end episode ts te te
remain episode ts te ts ts te
given episode set time steps plant state must region ra
obtained substituting esa ee
execution time steps start event end
event episode ts te words episode requires plant state
ra time steps esa ee
rest article use following
abbreviated notation


esa ee

notation episode equivalent following state constraint

xt ra



ta

example ccqsp shown figure four episodes start provincetown remain scenic region end bedford remain safe region
section solve relaxed optimization partial schedule definition
order obtain lower bound optimal objective value relaxed
subset episodes relevant given partial schedule imposed formally
define partial episode set partial schedule follows
definition given partial schedule partial episode set subset
involves episodes whose start event end event assigned execution time steps


esa e ee
e
definition e given definition
chance constraint recall chance constraint probabilistic constraint requires
constraints defining episode satisfied within user specified probability ccqsp
multiple chance constraints chance constraint associated least one episode
chance constraint formally defined follows
definition chance constraint c c c constraint requiring



pr
xt ra c



ac ta

c user specified risk bound c set episodes associated chance
constraint c


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

note every episode ccqsp must associated exactly one chance constraint
episode must involved one chance constraint unassociated
chance constraint
example ccqsp shown figure two chance constraints c c associated episodes c c therefore c requires probability
satisfying three episodes colored green c
requires probability satisfying episode
make following assumption necessary order guarantee convexity
constraints section
assumption
c
assumption requires risk bounds less claim assumption
constrain practical applications since typically user autonomous system would
accept risk
temporal constraint ccqsp includes simple temporal constraints stcs dechter et al
impose upper lower bounds duration episodes temporal
distances two events e
min max constraint specifydefinition simple temporal constraint es ee
b b
ing duration start event es end event ee
real valued interval
max
bmin

b



temporal constraints represented diagrammatically arcs nodes labeled
max labels episodes example ccqsp shown figure
time bounds bmin
b
four simple temporal constraints one requires time e e
time units one requires time e e least units units one
requires time e ee time units one requires time e
ee time units
schedule feasible satisfies temporal constraints ccqsp number
feasible schedules finite since discrete finite denote sf domain feasible
schedules formally defined follows
sf e


max
bmin
ee


e b



e number events ccqsp temporal duration multiplied time
real valued time set discrete time steps
bmin
interval bmin


bjective f unction
section formally define objective function
definition objective function j un xn sf r real valued function
nominal control sequence u n nominal state sequence x n schedule assume
j convex function x n u n


fio w illiams b lackmore

typical example objective function quadratic sum control inputs requires
total control efforts minimized
j u n x n

n



ut



another example
j u n x n ee



minimizes total plan execution time requiring end event ee qualitative
state plan scheduled soon possible
often need minimize expectation cost function note case
expectation function x n u n reduced function u n
follows probability distributions x n u n uniquely determined
u n k practice often convenient express objective function
function u n x n rather function u n since x n specified
u n two expressions equivalent conversion expectation cost
function function nominal values conducted priori
controller saturation conversion often obtained closed form
conversion particularly straight forward cost function polynomial since
expectation equivalent combination raw moments readily derived
cumulants note third higher cumulants gaussian distribution zero
examples conversion regarding three commonly used cost functions linear quadratic
manhattan norm
e xt xt
e xtt qxt


xtt qxt

nx


e xt

xt



tr qxt


x



f

x




q positive definite matrix xt ith diagonal element xt f
confluent hypergeometric function functions convex expectation function
ut transformed function ut manner note second term
right hand side constant hence minimizing xtt qxt yields solution
minimizing e xtt qxt
controller saturation difficult obtain conversion closed form due
nonlinearity u practice use approximation assumes saturation
since closed loop control explicitly limits probability controller saturation
small probability see section detail approximation error trivial claim
empirically validated section
definitions outputs
output p sulu planner optimal solution consists optimal control sequence u n un optimal schedule sf


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

definition optimal solution pair u n solution satisfies constraints
given ccqsp definition initial condition stochastic plant model
solution minimizes given objective function j u n x n definition
statement
formally define ccqsp
ccqsp
given stochastic plant model n b n w n initial condition
x x ccqsp p e c objective function j u n x n ccqsp
optimal solution u n p j
note p sulu planner gives near optimal solution p sulu planner
employs two approximations namely risk allocation section risk selection section
sake computational tractability solution strictly optimal
general however empirically section suboptimality due risk allocation
risk selection significantly smaller existing approximation methods

encoding
section encodes ccqsp stated previous section mathematical programming sections address solve form mathematical
recall build ccqsp planner p sulu planner three spirals first
present encoding general ccqsp non convex state space
flexible schedule figure c subsection present encodings two
special cases ccqsp subsections one non convex
state space fixed schedule figure b one convex state space fixed schedule figure
encoding ccqsp non convex state space flexible
schedule
e ncoding f easible r egions
order encode mathematical programming geometric constraint
xt ra must represented algebraic constraints purpose approximate
feasible state regions ra set half spaces represented linear state
constraint
figure shows two simple examples feasible region outside obstacle
approximated triangle feasible region b inside pickup region
approximated triangle feasible region approximated set linear constraints
follows





hti x g

b






hti x g



approximate feasible regions set linear constraints sufficient condition
original state constraint xt ra


fio w illiams b lackmore

figure approximate representation feasible regions set linear constraints

assume set linear state constraints approximates feasible region
reduced conjunctive normal form cnf follows




hta k j xt ga k j



kka jja k

ka ka jc jc sets indices replacing xt ra
chance constraint c encoded follows

pr










htc k j xt gc k j c



ac ta kka jja k

order simplify notation merge indices c
k ka
index ic ic ic ic ka ac let ai
ki ti indices correspond combined index let hc j hc ai ki j
notations three conjunctions combined one obtain following
encoding chance constraint

pr






htc j xti gc j c



iic jjc

specification chance constraints given requires ic disjunctive clauses
state constraints must satisfied probability c ith disjunctive clause cth
chance constraint composed jc linear state constraints
ccqsp p lanning p roblem e ncoding
ccqsp solved
third spiral encoded follows


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

general ccqsp
min
u n


j u n x n



sf



xt xt b u ut wt









ut ut k xt xt




pr
htc j xti gc j c
cc




iic jjc

x n x x

wt n wt





recall sf formally defined set schedules satisfy temporal constraints given ccqsp ccqsp execution hybrid optimization
discrete variables schedule continuous variables u n control sequence note
temporal constraints within solved section similar encoding
employed chance constraint mdp proposed geibel wysotzki however
encoding differs geibel wysotzki two respects optimize continuous control sequence u n discrete schedule temporal constraints
allow joint chance constraints require satisfaction multiple state constraints given
probability solved section
encoding ccqsp non convex state space fixed
schedule
restricted version ccqsp fixed schedule solved
second spiral obtained fixing follows
ccqsp fixed schedule
j min
u n


j u n x n



xt xt b u ut wt




ut ut k xt xt




pr
htc j xti gc j c
cc





iic jjc

x n x x

wt n wt





j optimal objective value ccqsp schedule fixed
note schedule decision variable treated constant
therefore objective function j function control sequence mean


fio w illiams b lackmore

state since fixed schedule since assumed j convex function regarding
u n x n j convex function section solves
encoding ccqsp convex state space fixed schedule
restrictive version ccqsp fixed schedule convex state
space solved first spiral obtained removing disjunctions chance
constraints follows
ccqsp fixed schedule convex state space

min
u n

j u n x n



xt xt b u ut wt




ut ut k xt xt




pr
htc xti gc c
cc





iic

x n x x

wt n wt





section solves

ccqsp convex state space fixed schedule
section presents solution methods ccqsp
convex state space fixed schedule shown figure obstacles
environment execution time steps achieve time evolved goals fixed ccqsp
reduced convex chance constrained finite horizon optimal control
past work presented risk allocation conservatively approximates
chance constrained finite horizon optimal control tractable convex optimization
ono williams b blackmore ono although optimal solution
approximated convex optimization exactly optimal solution original convex chance constrained finite horizon optimal control suboptimality significantly smaller previous approaches section gives brief overview risk allocation
well solution convex chance constrained finite horizon optimal control

deterministic approximation
evaluating whether joint chance constraint satisfied requires computing integral
multivariate probability distribution arbitrary region since probability involves
multiple constraints integral cannot obtained closed form address issue
decomposing intractable joint chance constraint set individual chance constraints
involves univariate probability distribution key feature individual


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

goal

goal
walls

walls

nominal path
safety margin

start

start

uniform risk allocation

b optimal risk allocation

figure risk allocation strategies racing car example

chance constraint transformed equivalent deterministic constraint
evaluated analytically
r isk llocation pproach
decomposition considered allocation risk decomposition risk
bound joint chance constraint distributed individual chance constraints
many feasible risk allocations risk allocation minimum
cost offer readers intuitive understanding risk allocation example


racing car example consider racing car example shown figure dynamics
vehicle gaussian distributed uncertainty task plan path minimizes time
reach goal guarantee probability crashing wall race less
chance constraint control sequence equivalent nominal
path shown solid lines figure limit probability crashing wall
good driver would set safety margin colored dark gray figure plan
nominal path outside safety margin
driver wants set safety margin small possible order make nominal path
shorter however since probability crashing race bounded certain
lower bound size safety margin given constraint different ways
setting safety margin figure width margin uniform figure b safety
margin narrow around corner wide places
intelligent driver would take strategy b since knows going closer wall
corner makes path shorter straight line key observation
taking risk e setting narrow safety margin corner greater reward
e time saving taking risk straight line gives rise notion risk
allocation good risk allocation strategy save risk reward small taking
reward great illustrated example risk allocation must optimized
order minimize objective function joint chance constrained stochastic optimization



fio w illiams b lackmore

ecomposition c onjunctive j oint c hance c onstraints r isk
llocation
derive mathematical representation risk allocation reformulating chance constraint conjunction constraints conjunction chance constraints reformulation
initially presented prekopa introduced chance constrained optimal control
ono williams b concept risk allocation originally developed ono
williams let ci proposition true false following lemma
holds
lemma
pr

n



ci



n






pr ci



n






proof
pr

n



ci pr







n


n



ci




pr ci



cc




n


n



n


pr ci



pr ci

n








overline c negation literal c use following booles inequality obtain


n
n


pr cc
pr
cc




following immediately follows lemma substituting linear constraint
htc xti gc ci chance constraint c
corollary following set constraints sufficient condition joint chance constraint








c
pr hc xti gc c
c c



cc

iic

iic

newly introduced variables c represent upper bounds probability violating
linear state constraint refer individual risk bounds individual risk bound


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

c viewed amount risk allocated ith clause fact c bound
probability implies c second term requires total amount risk
upper bounded original risk bound c analogue resource allocation
allocation resource optimized upper bound total amount
available resource likewise allocation risk c must optimized order minimize
cost therefore call decomposition method risk allocation
c onservatism r isk llocation pproach
mentioned previously risk allocation gives conservative approximation
original chance constraint subsection evaluates level conservatism risk allocation

let pf ail true probability failure defined probability solution violates
constraints e left hand side since sufficient necessary condition
pf ail smaller equal risk bound general pf ail hence
conservatism introduced risk allocation represented
pf ail
best case scenario risk allocation violations constraints
mutually exclusive meaning solution violates one constraint satisfies
constraints case becomes necessary sufficient condition hence
risk allocation involve conservatism therefore
pf ail
hand worst case scenario constraints equivalent meaning
solution violates one constraint violates constraints case
pf ail

n

n

n number constraints
practical lie somewhere best case scenario worst case scenario typically closer best case worst case scenario example
two separate obstacles path collisions two obstacles mutually
exclusive events collision obstacle one time step usually imply collisions
time steps rough approximation real world situation assume satisfaction constraints probabilistically independent assumption true probability
failure


pf ail
pr qc u

iic

iic

ic set index state constraints note therefore conservatism introduced risk allocation second order
pf ail
example true probability failure approximately pf ail
practical cases users prefer set small risk bounds typically less cases
conservatism introduced risk allocation becomes small


fio w illiams b lackmore

c onversion eterministic c onstraints
individual chance constraint involves single linear constraint furthermore
assuming actuator saturation xti gaussian distribution covariance
matrix given hence htc xti univariate gaussian distribution following lemma
transforms individual chance constraint equivalent deterministic constraint involves
mean state variables instead random state variables
lemma following two conditions equivalent


pr htc xti gc c htc xti gc mc c

mc c



htc x ti hc erf c



note erf inverse gauss error function x ti covariance matrix
xti lemma holds mc inverse cumulative distribution function
univariate zero mean gaussian distribution variance htc x ti hc
r isk llocation pproach c losed loop c ontrol p olicy
close loop control policy employed e k risk actuator
saturation since nonlinearity function u makes probability distribution
xti non gaussian mc cannot obtained although theoretically possible
derive mc non gaussian distributions difficult case since inverse
cumulative distribution function xti cannot obtained closed form
solution issue summarized lemma allows us assume xti
gaussian distributed hence use even possibility actuator saturation
enabled imposing additional chance constraints bound risk actuator
saturation follows
pr ut u

bound risk actuator saturation time step method presented
section approximate u polytope follows

ut u
hu ut gu
iiu

assuming xti gaussian distributed use lemma transform deterministic
constraints nominal control inputs follows


hu ut gu mu


iiu

iiu


mu c



htu x hu erf c

following lemma holds




fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

lemma following set constraints sufficient condition joint chance constraint



c
htc xti gc mc c

cc iic

tcmax




c
c

iiu
iic


hu ut gu mu

tt iiu


mc mu given tcmax last time step episodes
associated chance constraint c executed given schedule
tcmax max ee

ac

intuitively constraint requires probability c episode constraints
satisfied actuators saturate episodes associated c executed
proof consider two plants n b n w n u
n b n w n rnu u rnu compact convex set see definition
difference two plants possibility actuator saturation
probability distribution state variables non gaussian
gaussian note different probability distributions xti
ut order explicitly plant model considered use notations xm
ti


ut proof
first consider follows lemmas


max

tc










pr
htc xm

g



u

u






c
c
ti



cc



iic

let w n w wn define feasible disturbance set wc v n rn nx
follows


max

tc












htc xm
u

u


g



wc v n w n rn nx
c
ti




iic




definition


max
tc





u pr w n wc v n
pr
htc xm
um
ti gc

iic





fio w illiams b lackmore

next consider note identical long actuator saturations

e um
u therefore given w n wc v n follows xt




xm
ut ut hence

max

tc




w n wc v n
htc xm
um
ti gc
u


iic

accordingly given c c




htc xm
pr
ti gc
iic





pr





tcmax


htc xm
ti gc





um
u



iic

pr w n wc v n
max


tc





um
u
pr
htc xm

ti gc


iic

c
completes proof lemma
note lemma probabilistic extension closed loop robust model predictive
control rmpc methods proposed acikmese carson iii bayard richards
methods avoid risk actuator saturation imposing tightened control
constraints ut since consider stochastic uncertainty replace constraint tightening
chance constraints
convex programming solution
lemma replace stochastic optimization deterministic
convex optimization
deterministic approximation
min
u n c


j u n x n





xt

hc xti

xt b ut



gc mc c



cc iic



tt

hu ut gu mu



iiu



tcmax

c

cc iic




iiu

c



fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

follows immediately corollaries feasible solution
feasible solution furthermore blackmore ono showed optimal
solution near optimal solution following lemma guarantees
tractability
lemma convex optimization
proof inverse error function erf x concave x since assume section
c feasible ranges upperbounded since safety margin function
mc c mu convex c constraints
convex within feasible region constraints convex since
linear finally objective function convex assumption section therefore
convex optimization
since convex optimization solved interior point method
optimally efficiently completes first spiral ccqsps fixed schedule
convex constraints next section present solution method non convex
branch bound whose subproblems convex

ccqsp non convex state space
next consider second spiral comprised section variant ccqsp
involves fixed schedule non convex constraints obstacles
shown figure b encoded chance constrained optimization
addition obstacle avoidance constraints requires disjunctive state constraints hence
non convex chance constrained optimization section introduces
novel called non convex iterative risk allocation nira optimally solves deterministic approximation
solution ccqsp non convex state space two fold
first step described section obtain deterministic approximation order
handle disjunctive chance constraints develop additional decomposition called
risk selection reformulates chance constraint disjunction constraints disjunction individual chance constraints chance constraints decomposed
set individual chance constraints risk allocation risk selection technique
section used obtain equivalent deterministic constraints obtain
disjunctive convex programming section
deterministic disjunctive convex programming solved second step described sections introduce nira significantly reduces computation time without making compromise optimality solution
reduction computation time enabled bounding fixed risk relaxation
frr frr relaxes nonlinear constraints subproblems branch bound
linear constraints many cases frr nonlinear subproblems formulated linear
programming lp approximated lp nira obtains strictly optimal solution
solving subproblems exactly without frr unpruned leaf nodes search tree
subproblems solved approximately frr order reduce computation time


fio w illiams b lackmore

deterministic approximation
section first obtain deterministic approximation
r isk election pproach
deterministic approximation obtained decomposing non convex joint chance constraint
set individual chance constraints risk allocation risk selection revisit
race car example explain concept risk selection intuitively

figure racing car example risk selection guarantees risk bound
paths lets vehicle choose better one

racing car example consider example shown figure vehicle uncertain
dynamics plans path minimizes time reach goal vehicle allowed choose
one two routes shown figure impose chance constraint limits probability
crashing wall mission
satisfaction chance constraint guaranteed following process first
routes safety margin limits probability crash throughout route
start goal let vehicle plan nominal path operates within
safety margins since routes safety margin chance constraint satisfied
matter route vehicle chooses therefore vehicle optimize path choosing
route smaller cost optimization process considered selection
risk vehicle given two options figure routes b involve
level risk vehicle selects one less cost hence name
decomposition risk selection
ecomposition c onjunctive j oint c hance c onstraint r isk
election
subsection derive mathematical representation risk selection let ci proposition true false following lemma holds



fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

lemma
pr

n



ci



n


pr ci



proof following inequality holds


pr

n



ci pr ci





hence

pr

n



ci pr ci



n


pr ci





following corollary follows immediately lemmas
corollary following set constraints sufficient condition disjunctive joint chance
constraint

c



cc







iic jjc



tcmax

c



tt


iiu

iic



htc j xti gc j mc c

c







hu ut gu mu



iiu

note resulting set constraints sufficient condition original chance
constraint therefore solution satisfies guaranteed satisfy furthermore
although conservative approximation conservatism introduced risk selection
generally small many practical applications claim empirically validated section

eterministic pproximation p roblem
corollary non convex fixed schedule ccqsp approximated following deterministic convex optimization later convenience
label part optimization objective function plant model c chance
constraints states chance constraints control inputs r risk allocation constraint


fio w illiams b lackmore

deterministic approximation
min
u n c




j u n x n



xt xt b ut

c
htc j xti gc j mc j c




cc iic jjc





hu ut gu mu



tt iiu

r



tcmax

c

cc iic



c



iiu

follows immediately corollary optimal solution guaranteed
feasible solution original regard satisfying chance constraints
furthermore empirically demonstrate section near optimal
solution applications
nira branch bound solution
next present non convex iterative risk allocation nira recall nira
optimally solves branch bound standard branch bound
solution involving disjunctive nonlinear constraints
use bounding nonlinear convex relaxed subproblems constructed
removing non convex constraints corresponding disjunction
used balas li williams different known disjunctive linear
programming whose subproblems lps instead convex programmings however although
standard branch bound guaranteed globally optimal solution
computation time slow needs solve numerous nonlinear subproblems
order compute relaxed bounds
bounding fixed risk relaxation frr addresses issue computing
lower bounds efficiently observe relaxed subproblems nonlinear convex optimization frr relaxes nonlinear constraints linear constraints particularly
objective function linear frr subproblem lp
efficiently solved optimal objective value frr subproblem lower bound
optimal objective value original subproblem
nira solves frrs subproblems order efficiently obtain lower bounds
solving original subproblems exactly without relaxation unpruned leaf nodes order obtain
exact optimal solution nira achieves significant reduction computation time
without loss optimality
nira lgorithm overview
shows pseudocode nira input deterministic approximation non convex chance constrained optimal control five tuple


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

non convex iterative risk allocation nira
function nira returns optimal solution
set queue filo queue
incumbent
rootsubproblem obtainrootsubproblem
queue rootsubproblem
queue empty

subproblem last entry queue

remove subproblem queue

lb obtainlowerbound subproblem

lb incumbent

c c ic

j u solve subproblem

j incumbent


incumbent j u u update optimal solution

end

else

ii

ic

c c

end

j jc

newsubproblems expand subproblem c j

add newsubproblems queue

end

end

end
end

return u

c r well fixed schedule output optimal nominal control sequence

u u un
node branch bound search tree corresponds subproblem convex
chance constrained optimization use filo queue store subproblems
search conducted depth first manner line node corresponding
subproblem solved obtain lower bound objective value subsequent subproblems
line details bounding approaches explained subsection lower bound
larger incumbent prunes branch otherwise branch expanded
line branch expanded leaf without pruned subproblems solved exactly
line subsection explains expansion procedure detail nira

globally optimal solution since solution u obtained solving
subproblems leaf nodes exactly next two subsections introduces branching bounding
methods


fio w illiams b lackmore

branching
subsection explains nira constructs root subproblem line
well expands nodes line root subproblem convex
optimal ccqsp without chance constraints node expanded
subproblems children nodes constructed adding one constraint disjunction
subproblem parent node order simplify notations let cc j represent individual
chance constraint

rue htc j gc j xti mc j c
cc j
f alse otherwise
walk e xample
first present walk example intuitively explain branching procedure example instance involves four individual chance constraints


ht j xti g j j

j

notation defined set individual chance constraints represented
follows
c c c c



figure shows tree obtained dividing original subproblems sequentially
subproblems corresponding trees four leaf nodes nodes figure exhaust
conjunctive e convex combinations among chance constraints hand
subproblems corresponding three branch nodes nodes figure involve disjunctive
e nonconvex clauses chance constraints relax non convex subproblems convex
subproblems removing clauses contain disjunctions order obtain search tree
shown figure b

figure branch bound search tree sample disjunctive convex programming
constraints tree non convex subproblems b tree relaxed convex subproblems



fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

non convex optimally solved repeatedly solving relaxed
convex subproblems presented section following subsections introduce construct search tree relaxed convex subproblems one
figure b
r elaxed c onvex ubproblem
formulation relaxed convex subproblems given represent index
j j c since convex relaxation chooses one disjunct disjunction specified
optimal objective value relaxed
c let ic set indices denote jsp
subproblem
convex relaxed subproblem nira


jsp


min
u n c


j u n x n

c

xt xt b ut

htc j c xti gc j c mc j c c
cc iic





hu ut gu mu



tt iiu

r



tcmax

c

cc iic



c



iiu

note identical hence introduced section
used solve relaxed subproblems
c onstruction root ubproblem
root subproblem special case ic empty set c c
function presented used line nira
construct root subproblem branch bound tree note
use object oriented notation subproblem represent objective function
subproblem resulting root subproblem follows
e xpansion ubproblems
order create child subproblem subproblem function described
used line nira adds individual chance constraint
specified indices c j conjunct note resulting child subproblem still
convex optimization individual chance constraint added conjunctively nira
enumerates children nodes disjuncts jc lines


fio w illiams b lackmore

construction root subproblem nira
function obtainrootsubproblem returns root subproblem
rootsubproblem
rootsubproblem
rootsubproblem
c c

rootsubproblem ic max
tc

rootsubproblem rc lhs
iiu

rootsubproblem rc rhs rc rhs
end
return rootsubproblem
expansion subproblem nira
function
expand subproblem c j
lem
subproblem ic subproblem ic
subproblem rc lhs subproblem rc lhs c
return subproblem

returns



child

subprob

bounding
subsection present two implementations obtainlowerbound function line
first one uses optimal solution convex subproblems
lower bounds typically extensive computation time second one solves
lp relaxation convex subproblems called fixed risk relaxation frr frr dramatically
reduces computation time compared first implementation nira employs
second implementation
imple b ounding
shows straightforward way obtain lower bounds simply solves
convex relaxed subproblems methods presented section optimal
objective value relaxed subproblem gives lower bound optimal objective value
subproblems example optimal solution relaxed subproblem node
figure b gives lower bound objective value subproblems nodes
constraints relaxed subproblems subset constraints
subproblems note optimization formulated minimizations
however despite simplicity computation time slow needs solve myriad subproblems example simple path
simple implementation obtainlowerbound function line
function obtainlowerbound naive subproblem returns lower bound
solve subproblem presented section
return optimal objective value



fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

ten time steps one rectangular obstacle requires solution worst
case although branch bound process often significantly reduces number subproblems
solved moreover subproblems nonlinear convex optimization
due nonlinearity mc j mu general nonlinear optimization requires significantly solution time specific classes optimization
linear programmings lps quadratic programmings qps
f ixed r isk r elaxation
relaxation fixed risk relaxation frr addresses issue frr linearizes
nonlinear constraints fixing individual risk allocations
c upper bound objective function linear frr lp
frr convex piecewise linear objective function reformulated lp
introducing slack variables see section example general convex objective function
approximated convex piecewise linear function hence many cases frrs
subproblems lps solved efficiently fixed risk relaxation
follows
fixed risk relaxation

jf rr min
u n


j u n x n



xt xt b ut
htc xti gc mc j c c



cc iic



hu ut gu mu c



tt iiu

note nonlinear terms mc j mu become constant fixing c
c constant optimal objective value frr provides tightest lower
bound among linear relaxations constraints following lemmas hold
lemma gives lower bound optimal objective value

jf rr jsp

proof mc j mu monotonically decreasing functions since c c
c individual chance constraints fixed risk relaxation less stricter
first conjunct therefore cost optimal solution fixed risk
relaxation less equal original subproblem
lemma frr gives tightest lower bound among linear relaxations constraints

proof linear relaxation becomes tighter fixing c lesser value
however setting c values less c may exclude feasible solutions one


fio w illiams b lackmore

frr implementation obtainlowerbound function line
function obtainlowrebound frr subproblem returns lower bound
c j subproblem c

subproblem cc j rhs mc j c apply fixed risk relaxation
end


subproblem dt rhs mu apply fixed risk relaxation
end
remove subproblem r
solve subproblem lp solver
return optimal objective value

sets c c c hence frr tightest linear relaxation
resulting tightest lower bound
note optimal solution fixed risk relaxation typically infeasible
solution since setting c c violates constraint
implements fixed risk relaxation lp relaxation solved lp solver
optimal objective value returned
completes second spiral ccqsps fixed schedule nonconvex
constraints next section turn final spiral involves flexible temporal constraints

ccqsp flexible schedule
section presents complete p sulu planner efficiently solves general ccqsp
flexible schedule non convex state space section
schedule events satisfies simple temporal constraints
well nominal control sequence u n satisfies chance constraints minimizes cost
first generate feasible schedule extend control sequence
schedule iteratively improving candidate schedules branch bound
build p sulu planner upon nira presented previous section recall
nira optimizes nominal control sequence u n given fixed schedule p sulu
planner uses nira subroutine takes schedule input outputs optimal
objective value well executable control sequence denote optimal objective value
given schedule j notation ccqsp flexible
schedule rewritten schedule optimization follows
min j

ssf



recall domain feasible schedules sf definition finite set since consider
discretized finite set time steps see section hence schedule optimization
combinatorial constraint optimization constraints given form
simple temporal constraints


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

p sulu planner
function psulu ccqsp returns optimal schedule control sequence
incumbent
set queue filo queue
e e e
initialize partial schedule
queue e
queue empty

e last entry queue

remove e queue

j u n obtainlowerbound ccqsp e

j incumbent

e e

incumbent j optctlsequence u n optschedule

else

expand ccqsp queue e e

end

end
end
return optctlsequence optschedule

overview
solution use branch bound branch bound
search p sulu planner incrementally assigns execution time step event order
schedule minimizes j objective function evaluated solving
fixed schedule ccqsp nira although combination
two branch bound searches p sulu planner nira equivalent one unified
branch bound search practice treat separately ease explanation
shown figure branch bound searches optimal schedule
incrementally assigning execution time steps event depth first manner node
search tree corresponds partial schedule definition assigns execution time steps
subset events included ccqsp partial schedule root node involves
assignment start node e tree expanded assigning execution time step one
event time example node e figure represents partial schedule
assigns execution time step event e e leaving ee unassigned
p sulu planner obtains lower bound objective function value j solving
ccqsp partial schedule extended p sulu
planner minimizes search space dynamically pruning domain forward checking
specifically execution time assigned event iteration branch andbound search p sulu planner runs shortest path tighten real valued upper
lower bounds execution time step unassigned events according newly assigned
execution time step
shows pseudocode node search tree fixedschedule ccqsp solved given partial schedule node


fio w illiams b lackmore

leaf tree optimal objective value less incumbent optimal solution
updated line node leaf optimal objective value corresponding
subproblem lower bound optimal objective value subsequent nodes lower
bound less incumbent node expanded enumerating feasible execution time
assignments unassigned event line otherwise node expanded hence
pruned details branch bound process described later subsections

figure example ccqsp b plan satisfies ccqsp

figure directed distance graph representation ccqsp figure b dgraph shows shortest distances nodes c updated graph
execution time assigned event e

e
e

e






e



ee

ee











b

figure branch bound search schedule assume time interval

node e expanded de given e
max
since de dmin

e figure b b

node emin




expanded dee given e e since dmax
e
e
figure c



fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

walk example present walk example give readers insight solution process consider ccqsp shown figure ccqsp specifies mission
go waypoint get goal region b avoiding obstacle c shown
figure b assume time interval
figures illustrate solution process p sulu planner initialized
assigning execution time start event e figure distance graph representation simple temporal constraints dechter ccqsp note simple chance
constraint equivalently represented pair inequality constraints follows
e e l u e e u e e l
two inequality constraints represented two directional edges two nodes
distance graph p sulu planner runs pair shortest path distance
graph obtain graph shown figure b graph completed distance graph
edge labeled shortest path length graph represents tightest temporal
constraints enumerates feasible execution time assignments event
e graph according graph execution time event e must
since consider discrete time steps time interval feasible
execution time steps e idea behind enumerating feasible execution time
steps assign event thus tighten bounds unassigned events order ensure
feasibility
node e p sulu planner solves frr fixed schedule ccqsp
end episode execution schedule e
words tries optimal path goes neglects goal b
obstacle c solution exists optimal cost gives lower bound objective value
feasible paths go assume solution exist
p sulu planner prunes node e goes next node e solves
frr corresponding fixed schedule subproblem best path goes
assume p sulu planner finds solution p sulu planner expands
node following process first fixes execution time e graph
runs shortest path order tighten temporal constraints c psulu planner uses updated graph enumerate feasible execution time assignments
event ee visits nodes solves fixed schedule subproblems exactly
episodes fully assigned schedule example node ee computes
best path goes reaches b avoiding obstacle c
shown figure b assume optimal objective values subproblems
ee ee records solution ee cost
incumbent
backs visits node e relaxed subproblem
end episode solved obtain lower bound objective value subsequent
nodes lower bound turns exceeds incumbent therefore branch
pruned since nodes expand terminated incumbent
solution returned


fio w illiams b lackmore

implementation expand function line
function expand ccqsp queue e e
fix distance e e e graph ccqsp
update graph running shortest path
choose e e e
choose unassigned event
e e e
max
de dmin
e tt de
de

e e e


e
update partial schedule

e e

queue e
end
branching
outlines implementation expand function takes partial
schedule input adds queue set schedules assign execution time step
additional event e words domain newly added schedules e one
assigned event domain input partial schedule e details
explained following parts subsection
e numeration f easible ime tep ssignments graph
enumerating feasible time steps simple temporal constraints must respected
accomplish use graph translate bounds durations two events
bounds execution time step event shown dechter et al
set feasible execution times event e bounded distance e e dgraph graph directed graph weights edges represent shortest distances
nodes figure b order obtain graph representation first translate
simple temporal constraints directed distance graph figure weight
edge two nodes events corresponds maximum duration time origin node
destination node specified corresponding simple temporal constraint distance
takes negative value represent lower bounds graph figure b obtained
distance graph figure running pair shortest path dechter et al
forward checking graph p sulu planner incrementally assigns
execution time step event explained walk example p sulu planner
minimizes search space forward checking graph forward checking
methods constraint programming method prunes values unassigned variables e
execution times unassigned event violate simple temporal constraints different
normal forward checking back tracking performed due decomposability
graph forward checking conducted following process execution time step
assigned event e e e distance e e fixed tt distance
e e fixed tt distance graph line recall
index discretized time steps fixed interval temporal bounds given
real valued times section run shortest path update graph line


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

given partial schedule denote updated shortest distance start event e e

min
graph dmax
e distance e e de
example execution time assigned event e figure c e e
distance e e fixed distance opposite direction fixed
run shortest path update graph obtain
min
updated distances dmax
ee dee
max
dechter et al showed de corresponds upper bound feasible execution time unassigned event e dmin
ee corresponds negative lower bound
hence partial schedule assigned events e e updated domain unassigned
max
event e
e bounded dmin
e de note domain execution time steps
max
e included equal dmin
e de consider discrete execution
time steps finite set forward checking p sulu planner computes
max

real valued bounds dmin
e de feasible values unassigned variable e

enumerated search tree expanded e
enumerating domain execution time steps unassigned event readily
extract feasible execution time steps unassigned event e
e updated graph
partial schedule let de domain execution time steps unassigned event
e
e given partial schedule finite domain de obtained follows
max
de dmin
e tt de

note de may empty temporal constraints tight even though feasible user p sulu planner must make small enough de empty
example figure b graph given partial schedule e according
graph e must executed assuming set feasible
execution time steps e de shown figure likewise figure c
graph given partial schedule e e feasible execution time ee
hence set feasible execution time steps ee dee
shown figure b
enumeration conducted line creates extensions
input partial schedule assigning time steps e line puts extended
partial schedules queue line
e fficient variable rdering b ranch b ound earch
choosing next event assign time step line two variable ordering
heuristics found effective order reduce computation time
first heuristic convex episode first cef heuristic prioritizes events
associated non convex constraints idea cef heuristic
observation subproblems branch bound particularly difficult solve
episodes e involve non convex state constraints remain r c
plane minus obstacle c episode walk example figures example
non convex episodes therefore effective reduce computation time
p sulu planner minimize number non convex subproblems solved branch andbound process idea realized sorting events episodes convex
feasible region examined branch bound process episodes


fio w illiams b lackmore

non convex feasible region walk example note visited event e
event ee example end episode involves convex state
constraint remain r c plane minus obstacle c non convex
second one well known constrained variable heuristic p sulu planner
expands node counts number feasible time steps unassigned events chooses
one least number feasible time steps second heuristic used break ties
first heuristic

bounding
next present implementation obtainlowerbound function line
obtains lower bound solving relaxed ccqsp fixed
partial schedule
outlines implementation obtainlowerbound function takes partial
schedule input outputs lower bound objective function well optimal
control sequence given partial schedule constructs relaxed optimization
involves episodes whose start end events assigned execution time steps line
optimization involves non convex constraints nira used obtain
solution line otherwise solve frr convex optimization
obtain lower bound efficiently line input fully assigned schedule e e
corresponding node leaf node case obtain exact solution ccqsp
fixed schedule running nira line details
explained subsequent part subsection

implementation obtainlowerbound function line
function obtainlowerbound ccqsp e returns optimal objective value control sequence
subprblem given ccqsp
e e episodes non convex state regions

j u n nira subprblem
else

j obtainlowrebound frr subprblem

u n
end
return j u n

r elaxed ptimization p roblem partial chedule
consider relaxed optimization follows


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

relaxed optimization partial schedule
j

min
u n un


j u n x n



xt xt b ut





htc k j xt gc k j mc k j c k

cc c ta kka jja k





c k c



kka c

j optimal objective value relaxed subproblem partial schedule
recall partial episode set involves episodes whose start
end nodes assigned execution time steps partial schedule definition
notational simplicity merge three conjunctions obtain following

htc j xti gc j mc j c
cc iic jjc

note chance constraint exactly except partial schedule
specified instead fully assigned schedule hence instance non convex
ccqsp fixed schedule optimally solved
nira note fully assigned schedule leaf node branch andbound search tree
optimal objective value gives lower bound optimal objective value
subsequent subproblems branch bound tree property formally stated
lemma order prove feature first define concept extension
partial schedule follows
definition schedule e extension partial schedule e
assign time steps events domain
e e e e
example figure b fully assigned schedule e e ee
e e ee extension partial schedule e e
following lemma holds
lemma schedule extension partial schedule optimal objective value
lower bound optimal objective value
j j
proof since partial schedule e e hence since e e
e e state constraints chance constraint partial schedule
included full schedule means feasible state space


fio w illiams b lackmore

subset one hence chance constraint
satisfied chance constraint satisfied therefore
better less equal cost
former looser constraints

example figure b e assigned execution time step ee
therefore node e chance constrained optimization end
episode solved partial schedule e e see figure gives
lower bound cost fully assigned schedules e e
ee e e ee
obtains lower bound solving exactly nira
involves episodes non convex state regions line function called leaf node
solved exactly nira solutions leaf subproblems
candidate solutions optimal solution overall hence solving exactly
ensure optimality branch bound search
f urther b ounding frr
relaxed subproblem convex p sulu planner solves frr subproblem instead solving exactly nira order obtain lower bound efficiently
line many practical ccqsp execution one episode
non convex feasible region example ccqsp shown figures
safe region r minus obstacles non convex provincetown start
region scenic region bedford goal region convex case subproblems
solved exactly leaf nodes lower bounds evaluated approximate
solutions frrs subproblems non leaf nodes


section empirically demonstrate p sulu planner efficiently operate
systems within given risk bound first present simulation settings section section presents simulation nira validates claim
efficiently compute feasible near optimal solution section demonstrates p sulu planner two different benchmark simulation highlight p sulu planners
capability operate within user specified risk bound section deploys p sulu planner
pts scenarios section applies p sulu planner space rendezvous
autonomous cargo spacecraft international space station
simulation settings
recall stated section p sulu planner takes four inputs stochastic plant model
initial condition ccqsp p objective function j section specifies
j commonly used sections specify p
corresponding section


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

tochastic p lant odel
section explains plant model used sections section uses different plant
model described detail section consider point mass double integrator plant
shown parameters umax vmax set individually
plant model commonly assumed literatures unmanned aerial vehicle uav
path kuwata leaute wang yadav balakrishnan
state vector xt consists positions velocities x directions control
vector consists accelerations
xt x vx vy

ut ax ay

plant model specified following matrices













b
w











ut umax cxt vmax



c

























first constraint imposed order limit acceleration nonlinear constraint
approximated following set linear constraints
r n ut umax n nr


n
n
sin
r n cos
nr
nr
choose nr second constraint imposed order limit velocity use
linear approximation
bjective f unction
sections cost function manhattan norm control input
horizon follows
j xti u




ux uy



cost function represents total change momentum roughly proportional
fuel consumption aerial vehicle note minimization piece wise linear
cost function equivalently replaced following minimization
linear cost function additional linear constraints introducing slack variables x
min




x







x ux x ux uy uy


fio w illiams b lackmore

section minimize expected quadratic cost follows




j xti u
e u x u





c omputing environment
simulations except ones section conducted machine dual core
intel xeon cpu clocked ghz gb ram implemented
c c run debian os simulations section conducted machine
quad core intel core cpu clocked ghz gb ram
implemented matlab run windows os used ibm ilog cplex optimization
solver academic edition version linear program solver snopt version
convex optimization solver
nira simulation
first statistically compare performance nira prior art recall nira
solver ccqsp non convex state constraints fixed schedule
used subroutine p sulu planner
c ompared lgorithms
two existing solve
fixed risk allocation blackmore et al fixes risk allocation
uniform value assumption cost function linear
reformulated mixed integer linear programming milp
solved efficiently milp solver cplex
particle control blackmore particle control sampling method
uses finite number samples approximate joint chance constraints control
sequence optimized number samples violate constraints less c np
np total number samples optimization reformulated
milp assumption cost function linear
compare nira mdp section although mdp solve
exactly nira avoid risk considering penalty cost constraint
violations purpose comparison highlight capabilities chance constrained
provide guarantee probability failure
p roblem ettings
compare closed loop open loop niras two path
randomized location obstacle shown figure vehicle starts
heads goal avoiding rectangular obstacle obstacle
edge length placed random location within square region corners
consider ten time steps time interval require


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

mean state risk bound set set standard
deviation disturbance use expected quadratic cost function given
steady state lqr gain used closed loop nira q r
n n identity matrix q r cost matrices state control variables
respectively


nira closed loop
nira open loop
fixed risk allocation
particle control



nira closed loop
nira open loop
































nominal trajectories











b nominal trajectories ellipses

figure instance path used obstacle
fixed size randomly placed within unit square run b mean
standard deviation closed loop open loop niras

p erformance c omparison
recall solution nira used p sulu planner solve subproblems exactly optimal solution since risk allocation section
risk selection section replace chance constraint sufficient condition
since chance constraint difficult evaluate previously proposed
methods solve optimization approximation provide empirical evidence risk
allocation selection solution significantly closer optimal solution
prior art satisfaction original constraint guaranteed
evaluate suboptimality solutions difference risk bound
resulting probability constraint violation pf ail estimated monte carlo simulation pf ail equal left hand side value hence chance
constraint equivalent
pf ail
strictly optimal solution achieve pf ail although exact
solution unavailable since solve exactly solution suboptimal pf ail ratio pf ail represents degree suboptimality solution
violates chance constraint pf ail


fio w illiams b lackmore


nira closed loop
nira open loop
fixed risk allocation
particle control
particles

computation time
sec




probability failure

cost















table averages standard deviations computation time probability constraint violation cost four run times
random location obstacle risk bound set note particle
control less cost two methods solutions violate
chance constraint

table compares performance four values table averages standard deviations runs random locations obstacle probability
constraint violation pf ail evaluated monte carlo simulations samples
comparison closed loop open loop niras comparing nira existing first compare two variants nira closed loop open loop niras table
shows closed loop nira less cost open loop nira importantly
former outperforms latter test cases reduction cost closed loop
explained figure b shows ellipses probability distribution
state since closed loop nira assumes feedback control future position less uncertain plan generated closed loop nira less conservative fact table
shows pf ail closed loop nira closer risk bound open loop
nira however closed loop requires twice much solution time
open loop one since complicated due additional chance constraints control input
comparison fixed risk allocation table shows closed open niras
average probabilities failure respectively within userspecified risk bound hand fixed risk allocation
conservative probability failure pf ail smaller
indicates solution nira significantly closer exactly optimal solution
fixed risk allocation fact nira less cost fixed risk
allocation runs optimizes risk allocation
fixed risk allocation uses predetermined risk allocation
figure shows suboptimality measure pf ail open loop nira different settings risk bound values suboptimality nira significantly smaller
fixed risk allocation graph shows tendency suboptimality nira
gets smaller less suboptimality fixed risk allocation approximately constant
nira achieves improvement solution optimality cost computation time table
shows nira takes longer computation time risk allocation factor


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

pfail

figure suboptimality nira fixed risk allocation strictly optimal solution
pf ail smaller value pf ail indicates solution suboptimal

two hence nira fixed risk allocation provide users trade
suboptimality computation time
comparison particle control table shows average probability failure
particle control higher risk bound meaning
tends generate infeasible solutions hand nira guarantees satisfaction
chance constraint since employs conservative approximation joint chance constraint
particle control guarantee solution converges optimal solution increasing number samples infinity however large number samples impractical
since computation time memory usage grow exponentially number samples increases
example used samples analysis table samples took
seconds hours solve obstacles centered
computation samples could conducted shortage memory
hand computation time nira significantly shorter pc guaranteeing
feasibility solution
ptimal p lanning e xpected c ost
next demonstrate capability p sulu planner handle expected cost instead cost
expected trajectory path presented specifically
consider expected quadratic cost function shown conducting open loop
cost function transformed function nominal control inputs constant term
equality however performing closed loop equality
exact due controller saturation nevertheless use approximation expected
cost explained section subsection empirically evaluate error
approximation


fio w illiams b lackmore

approximate expected cost


actual expected cost


table comparison approximate expected cost obtained closed loop nira
actual expected cost table shows mean variance runs random
location obstacle

table compares approximate expected cost function value obtained closed loop
nira actual expected cost estimated monte carlo simulation one million samples
path solved times randomized location obstacle risk
bound set shown table approximate cost almost exactly agrees
actual cost closed loop explicitly bounds risk
controller saturation
c omparison mdp
next compare nira mdp formulation sake tractability mdp
consider single integrator dynamics two dimensional state space two dimensional
control input specifies velocity vehicle rest setting
except state space discretized grid implement finite horizon
mdp path planner imposes penalty c event failure minimizes
expected cost explicit state dynamic programming mdp path planner imposes
cost follows




u x u ci xt
e


xt indicator function one xt obstacle zero otherwise
resulting optimization solved via dynamic programming
ran mdp path planner three values penalty c
choice c conducted simulations randomized obstacle position figure shows
typical output mdp path planner note small penalty c path
planner chooses take risk failure ignoring obstacle simply
penalty failure smaller expected reduction cost going obstacle
issue utilitarian approaches mdps minimization unconstrained cost
sometimes lead impractical solution
table shows mean standard deviation path lengths well maximum
minimum mean resulting probability failure among runs expected
imposing larger penalty mdp path planner chooses risk averse path
longer nominal path length sense mdp conduct trade cost
risk mdp particularly useful primary concern user cost failure instead
probability failure hand user would impose hard bound
probability failure chance constrained advantage observe
even penalty value mdp path planner wide range failure
probabilities depending location obstacle notably c


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

paths move directly across obstacle accept probability failure
others go around obstacle undesirable behaviors crossing obstacle likely
suppressed imposing greater penalty without guarantee moreover imposing heavy
penalty failure often overly conservative risk averse solution hand
behavior nira regarding risk predictable sense path guaranteed
go around obstacle regardless location chance constraint requires
exists margin path boundary obstacle p sulu planner
inherits property nira











c
c
c














figure optimal paths generated mdp planner different penalty levels c
red rectangle represents obstacle note path c cuts
obstacle

penalty c

path length









probability failure
max
mean min




table runs randomized obstacle location

p sulu planner simulation
next present simulation p sulu planner two order illustrate
capability schedule constraints empirically evaluate scalability
p sulu


fio w illiams b lackmore

figure sample ccqsp personal aerial vehicles path scheduling

figure output p sulu planner ccqsp figure three different settings
risk bound obs compared path planned deterministic planner sulu
consider chance constraints

path p lanning bstacles
simulation test p sulu planner path environment shown
figure input ccqsp shown figure ccqsp requires vehicle arrive
goal region within minutes going waypoint waypoint temporal
constraints specified figure imposes two chance constraints one requires
vehicle achieve time evolved goals certainty another requires vehicle
limit probability violating obstacles obs set
figure shows plans generated p sulu planner three different risk bounds
obs computation times seconds seconds
seconds respectively figure shows plan generated sulu deterministic planner
explicitly consider uncertainty leaute williams observe sulu leaves
margin path obstacles sulu path probability
hitting obstacles estimated monte carlo simulation samples hand
p sulu planner leaves margins path obstacles order satisfy risk bound


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

specified chance constraint margins larger plans smaller risk bounds
probabilities failure three plans generated p sulu planner estimated monte carlo
simulations samples respectively hence chance
constraints satisfied schedule optimized p sulu planner e e
e ee satisfies temporal constraints ccqsp
figure appears path cuts across obstacle due discretization
time optimization requires vehicle locations discrete time step
satisfy constraints consider state issue addressed
constraint tightening method kuwata
path p lanning ndoor e nvironment

figure sample ccqsp path indoor environment







goal






start


















figure output p sulu planner ccqsp figure three different settings
risk bound obs

next give p sulu planner ccqsp shown figure simulates path indoor environment vehicle must get goal region side
room three five seconds remain safe region episode requires vehicle stay


fio w illiams b lackmore

within room outside obstacle five second horizon ccqsp
imposes two chance constraints shown figure set
given ccqsp planner faces choice heading straight goal going
narrow passage left wall obstacle minimizes path length involves
higher risk constraint violation making detour around right side obstacle involves
less risk longer path
figure shows p sulu planners outputs obs computation times seconds seconds seconds respectively consistent
intuition p sulu planner allowed risk planner chooses go straight
goal resulting cost function value user gives risk bound
chooses risk averse path resulting cost function values respectively
example demonstrates p sulu planners capability make intelligent choice order
minimize cost limiting risks user specified levels
calability nalysis
subsection conduct empirical analysis scalability p sulu planner
environment becomes increasingly constrained shown figure measured computation time solve path different numbers obstacles waypoints
simulations path starts ends square region centered figure
shows twenty simulation zero three obstacles zero four waypoints obstacles
waypoints represented blue red squares figure respectively positions
center obstacles positions center
waypoints computation time shown caption
subfigure figure
comparing figure horizontally observe exponential growth computation time number obstacles expected since number disjunctive
clauses state constraint p sulu planner increases exponentially number
obstacles building tractable extension p sulu planner large number obstacles
future work hand comparing vertically computation
time number obstacles different number waypoints stays order
magnitude adding extra waypoint increases number conjunctive
clauses state constraints
remaining sections describe application psulu two real world air
vehicle space vehicle control third application building energy management variant
p sulu planner reported ono graybill williams
pts scenarios
next deploy p sulu planner pts scenarios robotic air taxi system introduced
section
cenarios
consider three scenarios specified ccqsps shown figure scenarios
similar scenic flight scenario introduced beginning see figure


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec

sec




















































figure computation time p sulu planner path different numbers obstacles waypoints

scenario personal aerial vehicle pav takes runway provincetown municipal
airport kpvc provincetown massachusetts fly scenic region lands runway
hanscom field kbed bedford massachusetts vehicle required stay within
scenic region least minutes minutes entire flight must take
minutes less minutes scenario scenario except runways
used take landing
scenario simulates leisure flight coast massachusetts pav takes runway
provincetown municipal airport flies two regions whales often seen
vehicle lands runway hanscom field
place three fly zones shown figure entire flight must take
minutes less minutes scenario three chance constraints c c c shown
figure first one c concerned vehicles operation requires vehicle
take land right runways right airports less probability
failure second chance constraint c concerned leisure activities requires
vehicle fly scenic regions less probability failure finally c
concerned passengers safety requires vehicle limit risk penetrating
fly zones
runway airport specified number represents clockwise angle north example
runway points degrees away north



fio w illiams b lackmore

p lant parameters
set umax approximates maximum cruise speed private jet airplanes
gulfstream v maximum acceleration determined maximum bank angle
assuming aircraft flying constant speed lateral acceleration given function
bank angle follows
g tan
g acceleration gravity typically passenger aircraft limits bank angle
degrees passenger comfort even though aircraft capable turning larger bank
angle hence use
umax tan
set seconds
imulation r esults
figure shows paths planned p sulu planner three scenarios scenarios
episode requirements ccqsps figure met within specified temporal
chance constraints
table compares performance sulu p sulu planner expected sulus plans
excessive probabilities failure scenarios sulu consider
uncertainty process although pav subject disturbance reality
hand p sulu planner successfully limits probability failure within user specified
risk bounds three scenarios furthermore although p sulu planner significantly reduces
risk failure cost higher sulu capability
limiting risk maximizing efficiency time desirable feature pts
transports passengers
scenario number
planner
computation time sec
pf ail
pf ail
pf ail
cost function value j


sulu








p sulu






sulu






p sulu







sulu






p sulu






table performance comparison prior art sulu p sulu planner pf ail pf ail
pf ail represent probabilities failure regarding chance constraints c c
c figure respectively



fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure ccqsps pts scenarios

figure paths planned p sulu planner



fio w illiams b lackmore

shown table p sulu planner typically takes several minutes compute plan
length computation time would allowed pts applications since assume psulu planner used preplanning take passengers pav specify requirements
p sulu planner creates risk sensitive flight plan assume real time plan executive
executes plan take
note desirable real time risk sensitive plan executive since risk factors location storms change time future work reduce computation
time p sulu planner used real time execution
space rendezvous scenario
p sulu planner general planner whose application limited specific plant model
order generality planner deployed p sulu planner system whose
plant model significantly different pts
specifically chose autonomous space rendezvous scenario h ii transfer vehicle
htv shown figure subject htv unmanned cargo spacecraft developed
japanese aerospace exploration agency jaxa used resupply international space
station iss collision vehicle iss may fatal disaster even collision
speed low example august russian unmanned resupply vehicle progress collided mir space station failed attempt automatic rendezvous docking
one modules mir permanently depressurized order avoid
accident htv required follow specified safety sequence automated rendezvous
described following subsection

figure h ii transfer vehicle htv japanese unmanned cargo vehicle conducts autonomous
rendezvous international space station image courtesy nasa

htv r endezvous equence
htvs autonomous rendezvous mission final phase starts initiation ai point located km behind iss shown figure first htv moves
r bar initiation ri point located iss guided relative gps


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

navigation ri point htv switches navigation mode rendezvous sensor rvs navigation rvs navigation htv measures distance iss precisely beaming laser
reflector placed nadir earth facing side iss htv proceeds hold point
hp located iss required hold hp order perform degree
yaw around maneuver orientation htv allows vehicle abort rendezvous
quickly case emergency yaw around maneuver htv resumes
holds parking point pp iss finally htv approaches
distance meters iss stops within capture box cb isss robotic
arm robotic arm grabs htv docks iss please refer report japan
aerospace exploration agency details rendezvous sequence
ri

hp

pp cb


iss





iss orbit



x

earth
ai initiation
ri r bar initiation
hp hold point
pp parking point
cb capture box

ai point


figure htvs final sequence japan aerospace exploration agency
rendezvous sequence described represented ccqsp shown figure
addition time evolved goals specified actual rendezvous sequence specify temporal
constraints chance constraints simulation shown figure require htv hold
intermediate goal least seconds transition goals must take
least seconds order make sure vehicle moves slowly enough entire mission
must completed within seconds hour minutes require htv stay within
safe zone conic area iss rvs navigation phase probability
since otherwise laser may reflected back htv properly assume goals
square regions sides ri hp sides pp sides cb finally
require htv achieves time evolved goals success probability
rbital dynamics
rendezvous considered two body chaser spacecraft e g htv
moves relation target spacecraft e g iss circular orbit
convenient describe motion chaser spacecraft rotating frame fixed
target space craft known hill coordinate frame schaub junkins shown
figure set x axis pointing away center earth axis along


fio w illiams b lackmore

figure ccqsp representation htvs final sequence assume
time evolved goals ones used actual flight missions temporal constraints
chance constraints added authors

orbital velocity target spacecraft since htvs path within x plane dont consider
z axis
known relative motion chase spacecraft hill coordinate frame described following clohessy wiltshire cw equation vallado
x x fx
x fy
angular speed target spacecrafts orbit fx fy force per unit
mass acceleration x directions first terms right hand sides represent
coriolis force
object follows cw equation moves unintuitive manner unforced motion
straight line due coriolis effect general object cannot stay position
without external force example figure shows fuel optimal path visit two waypoints
b come back start seen figure optimal path typically
straight line virtue p sulu planner handle irregular dynamic systems
way regular systems setting b matrices plant model
appropriately
state vector consists positions velocity x plane
x x vx vy
obtain discrete time cw equation impulse invariant discretization
xk axk buk


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk



start

b

figure typical motion spacecraft hill coordinate frame solid line fuel
optimal path visits b returns start minutes note
optimal path straight line hill coordinate frame











b


cos
sin
sin
cos






sin

cos


cos

sin



cos
sin


sin
cos

sin

cos


cos

sin



cos
sin

sin
cos












use isss orbital angular speed rad sec station goes around
earth minutes choose interval seconds number time steps n
set hence entire plan seconds hour minutes discretization
assumed impulse inputs follows


fx
fy




n



k uk

k

dirac delta function assumption justified thrusters
reaction control system rcs spacecraft used final maneuver
operate short duration seconds burn wertz wiley j larson
consider stochastic uncertainty w added discrete time dynamic equation
xk axk buk w
assumption additive uncertainty commonly used past autonomous
rendezvous formation flight space shields sirlin wette smith hadaegh


fio w illiams b lackmore

campbell udrea assume w
following covariance matrix





w





zero mean gaussian distribution













bjective f unction
employ objective function j requires p sulu planner minimize fuel consumption follows tsiolkovsky rocket equation fuel consumption spacecraft
proportional total change velocity called delta v v wertz wiley j larson
total fuel consumption summation fuel consumption reaction jets x
directions time steps hence objective function described follows
j u n vx vy
n

fx fy dt




k n
n

fifi n



k ux k dtfi
k uy k dtfi






k
k n


ux k uy k

k

imulation r esult
figure shows p sulu planner compare sulu
well nominal assume htv moves ai ri
two impulse transition called cw guidance law matsumoto dubowsky jacobsen ohkami
vallado ri cb follows predetermined path goes center
safe zone shown figure b constant speed
shown figure optimal paths generated p sulu planner sulu
straight curved paths exploit coriolis effect minimize fuel consumption
table compares performance three approaches two rows regarding
probabilities failure correspond two chance constraints specified ccqsp shown
figure probabilities evaluated monte carlo simulation one million samples
expected probabilities failure path generated p sulu planner less
risk bounds specified ccqsp shown figure hand
sulus path almost probability failure sulu minimizes fuel
consumption without considering uncertainty resulting path pushes boundaries
feasible regions evident figure c note although p sulu planner
significantly reduces probability constraint violation compared sulu cost delta v
higher sulu p sulu planner significantly smaller cost delta
v nominal sec reduction delta v equivalent
kg saving fuel assuming kg mass vehicle sec specific impulse


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure sulu p sulu planner nominal
input ccqsp shown figure

isp thrusters although p sulu planner takes longer compute plan
two approaches second computation time negligible compared hour
minute plan duration

computation time sec
probability failure pf ail navigation
probability failure pf ail goals
cost function value delta v j sec

sulu





p sulu planner





nominal





table performance comparison sulu p sulu planner nominal
htv rendezvous scenario



fio w illiams b lackmore

conclusions
article introduced model planner p sulu planner operates within userspecified risk bounds p sulu planner optimizes continuous control sequence discrete
schedule given input continuous stochastic plant model objective function newly
developed plan representation chance constrained qualitative state plan ccqsp ccqsp
involves time evolved goals simple temporal constraints chance constraints specify
users acceptable levels risk subsets plan
developing p sulu planner two fold first step developed
efficient called non convex iterative risk allocation nira plan nonconvex state space fixed schedule solved key concept
risk allocation risk selection achieves tractability allocating specified risk individual constraints mapping equivalent disjunctive convex program
nira employs branch bound solve disjunctive convex program
subproblems fixed schedule ccqsp convex state space solved
previously developed blackmore ono developed novel relaxation method called fixed risk relaxation frr provides tightest linear relaxation
nonlinear constraints convex subproblems
second step developed p sulu planner solve ccqsp flexible schedule scheduling formulated combinatorial constrained
optimization cop solved branch bound subproblem branch bound search ccqsp fixed schedule
solved nira domain feasible schedule pruned running shortest path graph representation given temporal constraints lower bounds optimal objective value subproblems obtained solving fixed schedule ccqsp
subset state constraints imposed proposed efficient variable
ordering prioritizes convex subproblems non convex ones demonstrated p sulu
planner examples personal aerial transportation system autonomous space
rendezvous showed efficiently solve ccqsp small suboptimality compared past

acknowledgments
upon work supported part boeing company grant mitba gta national science foundation grant iis opinions
findings conclusions recommendations expressed publication authors
necessarily reflect view sponsoring agencies would thank michael
kerstetter scott smith ronald provine hui li boeing company support thanks
robert irwin advice draft

references
acikmese b carson iii j bayard robust model predictive control
incrementally conic uncertain nonlinear systems international journal robust
nonlinear control


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

aircraft owners pilots association air safety foundation joseph nall report
accident trands factors
altman e constrained markov decision processes stochastic modeling chapman
hall crc
alur r feder henzinger benefits relaxing punctuality journal
acm
bacchus f kabanza f temporally extended goals annals mathematics
artificial intelligence pp
balas e disjunctive programming annals discrete mathematics
bertsekas p dynamic programming optimal control third edition
athena scientific
bertsekas p tsitsiklis j n neuro dynamic programming st edition athena
scientific
blackmore l probabilistic particle control optimal robust predictive control
proceedings aiaa guidance navigation control conference
blackmore l li h williams b c probabilistic optimal robust path
obstacles proceedings american control conference
blackmore l ono convex chance constrained predictive control without sampling
proceedings aiaa guidance navigation control conference
boyan j littman l exact solutions time dependent mdps advances
neural information processing systems pp mit press
boyan j moore w generalization reinforcement learning safely approximating value function advances neural information processing systems
campbell e udrea b collision avoidance satellite clusters proceedings
american control conference
charnes cooper w w chance constrained programming management science

coles j coles fox long colin continuous linear numeric
change j artif intell res jair
dechter r constraint processing elsevier
dechter r meiri pearl j temporal constraint networks artificial intelligence

dolgov durfee e stationary deterministic policies constrained mdps multiple rewards costs discount factors proceedings nineteenth international
joint conference artificial intelligence ijcai pp
feng z dearden r meuleau n washington r dynamic programming structured
continuous markov decision proceedings proceedings twentieth
conference annual conference uncertainty artificial intelligence uai pp
arlington virginia auai press


fio w illiams b lackmore

fleming w mceneaney w risk sensitive control infinite time horizon siam
journal control optimization
fox long modelling mixed discrete continuous domains journal
artificial intelligence
geibel p wysotzki f risk sensitive reinforcement learning applied control
constraints journal artificial intelligence
goulart p j kerrigan e c maciejowski j optimization state feedback
policies robust control constraints automatica
hofmann g williams b c robust execution temporally flexible plans bipedal
walking devices proceedings international conference automated
scheduling icaps
jacobson optimal stochastic linear systems exponential performance criteria
relation deterministic differential games automatic control ieee transactions

japan aerospace exploration agency htv mission press kit available line http
www jaxa jp countdown h bf pdf presskit htv e pdf
kuwata j p cooperative distributed robust trajectory optimization receding horizon milp ieee transactions control systems technology
kuwata real time trajectory design unmanned aerial vehicles receding horizon
control masters thesis massachusetts institute technology
kvarnstrom j doherty p talplanner temporal logic forward chaining planner
annals mathematics artificial intelligence
lagoudakis g parr r least squares policy iteration journal machine learning

leaute coordinating agile systems model execution temporal plans
masters thesis massachusetts institute technology
leaute williams b c coordinating agile systems model execution temporal plans proceedings twentieth national conference artificial
intelligence aaai
li h williams b c generalized conflict learning hybrid discrete linear optimization proc th international conf principles practice constraint programming
li h x kongming generative planner hybrid systems temporally extended
goals ph thesis massachusetts institute technology
matsumoto dubowsky jacobsen ohkami fly guidance
uncontrolled rotating satellite capture proceedings aiaa guidance navigation
control conference exhibit
nemirovski shapiro convex approximations chance constrained programs
siam journal optimization


fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

oldewurtel f jones c n morari tractable approximation chance constrained
stochastic mpc affine disturbance feedback proceedings conference decision control
ono closed loop chance constrained mpc probabilistic resolvability proceedings ieee conference decision control
ono graybill w williams b c risk sensitive plan execution connected sustainable home proceedings th acm workshop embedded systems buildsys
ono williams b c efficient motion stochastic dynamic
systems constraints probability failure proceedings twenty third aaai
conference artificial intelligence aaai
ono williams b c b iterative risk allocation robust model
predictive control joint chance constraint proceedings th ieee conference
decision control
prekopa use discrete moment bounds probabilistic constrained stochastic
programming annals operations
richards j robust stable model predictive control constraint tightening
american control conference p pp
sanner relational dynamic influence diagram language rddl language description
available http users cecs anu edu au ssanner ippc rddl
pdf
schaub h junkins j l analytical mechanics space systems american institute
aeronautics astronautics inc
shields j sirlin wette metrology sensor characterization pointing control
formation interferometer testbed fit proceedings ieee aerospace conference
smith r hadaegh f distributed estimation communication control deep space
formations iet control theory applications
stoorvogel h control state space prentice hall
vallado fundamentals astrodynamics applications second edition microcosm press
van hessem h stochastic inequality constrained closed loop model predictive control
application chemical process operation ph thesis delft university technology
wang x yadav v balakrishnan n cooperative uav formation flying obstacle collision avoidance ieee transactions control systems technology
wertz j r wiley j larson e space mission analysis design third edition
microcosm springer
younes h l littman l ppddl extension pddl expressing
domains probabilistic effects tech rep carnegie mellon university




