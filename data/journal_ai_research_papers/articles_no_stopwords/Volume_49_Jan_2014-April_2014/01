Journal Artificial Intelligence Research 49 (2014) 49-78

Submitted 07/13; published 01/14

Robustness Stability Constraint Programming
Dynamism Uncertainty
Laura Climent

LCLIMENT @ DSIC . UPV. ES

Instituto de Automatica e Informatica Industrial
Universidad Politecnica de Valencia, Spain.

Richard J. Wallace

R . WALLACE @4 C . UCC . IE

INSIGHT Center Data Analytics
Department Computer Science. University College Cork, Ireland.

Miguel A. Salido

MSALIDO @ DSIC . UPV. ES

Instituto de Automatica e Informatica Industrial
Universidad Politecnica de Valencia, Spain.

Federico Barber

FBARBER @ DSIC . UPV. ES

Instituto de Automatica e Informatica Industrial
Universidad Politecnica de Valencia, Spain.

Abstract
Many real life problems solved constraint programming, come uncertain
dynamic environments. dynamism, original problem may change time,
thus solution found original problem may become invalid. reason, dealing
problems become important issue fields constraint programming.
cases, extant knowledge uncertain dynamic environment. cases,
information fragmentary unknown. paper, extend concept robustness
stability Constraint Satisfaction Problems (CSPs) ordered domains, limited
assumptions need made possible changes. present search algorithm searches
robust stable solutions CSPs nature. well-known meeting
criteria simultaneously desirable objective constraint solving uncertain dynamic
environments. present compelling evidence search algorithm outperforms
general-purpose algorithms dynamic CSPs using random instances benchmarks derived
real life problems.

1. Introduction
Constraint programming powerful tool solving many artificial intelligence problems
modeled CSPs. Much effort spent increasing efficiency algorithms
solving CSPs, reflected literature. However, techniques assume set
variables, domains constraints involved CSP known fixed problem
modeled. strong limitation deal real life situations problems
may come uncertain dynamic environments. Due dynamism environment,
original problem corresponding modeled CSP may evolve. addition, since
c
2014
AI Access Foundation. rights reserved.

fiC LIMENT, WALLACE , ALIDO & BARBER

real world uncertain nature, information dynamism environment may
incomplete, erroneous even may exist. situations, solution holds original
model become invalid changes original problem.
approaches deal situation classified as: (i) reactive approaches, whose
main objective obtain new solution similar possible previous solution (the solution
found changes occurred) efficient way, (ii) proactive approaches, use
knowledge possible future changes order avoid minimize effects (for survey
see Verfaillie & Jussien, 2005). Thus, proactive approaches applied changes occur,
reactive approaches applied changes invalidate original solution.
Reactive approaches re-solve CSP solution loss, consumes computational
time. clear inconvenience, especially deal short-term changes, solution loss frequent. addition, many applications, online planning scheduling,
time required calculate new solution may long actions taken redress
situation. addition, loss solution several negative effects modeled situation. example, task assignment production system several machines, could cause
shutdown production system, breakage machines, loss material/object
production, etc. transport timetabling problem, solution loss, due disruption
point, may produce delay propagates entire schedule. negative effects
probably entail economic loss well.
Proactive approaches try avoid drawbacks stated and, therefore, highly valued dealing problems uncertain dynamic environments. Given advantages
proactive approaches potentially offer, paper restrict approach. Heretofore two main types proactive approaches considered, distinguished
basis characteristics solutions obtain, called robust flexible
(see Section 2). important survey constraint solving uncertain dynamic environments
(Verfaillie & Jussien, 2005), authors mention possibility developing proactive strategies
combine solution features robustness flexibility. state: production
solutions time robust flexible, every chance resist changes
easily adapted resist, obviously desirable objective. paper,
present algorithm meets objective combining solution robustness stability.
solution feature stability special case flexibility.
Many proactive approaches proposed literature assume existence knowledge
uncertain dynamic environment (see Section 3). cases difficult characterize
robustness solutions detailed information possible future changes available. consider situations added difficulty stemming fact
limited assumptions changes made. discussion focuses CSPs ordered
discrete domains model problems order elements domain
significant. cases, common type change problems may undergo restrictive
modifications bounds solution space. assumptions motivations
introduced Climent et al. (2013). Moreover, examples real life problems exhibit
type dynamism described, specifically, temporal reasoning-based problems, spatial geometric reasoning problems, design problems. temporal problems, delays inherent
feature, implies restrictive modifications bounds involved disruptions.
instance, Fu, Lau, Varakantham, Xiao (2012) stated unexpected external events
manpower availability, weather changes, etc. lead delays advances completion activities
50

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

scheduling problems. spatial geometric reasoning problems, constraints readjusted due measurement errors. latter occur design problems, data
completely certain.
paper, present algorithm searches solutions CSPs ordered domains,
robust stable often repaired using value similar
magnitude undergo value loss. paper organized follows. next section recalls
general definitions. Section 3 gives brief account earlier proactive procedures. Section 4
presents new conception robustness stability exists order elements
domain. Sections 5 6 describe main objective finding solutions meet stability
robustness criteria simultaneously. Then, Section 7 search algorithm meets
objectives explained. Section 8 presents case study scheduling problems. Section 9 describes
experiments various types CSPs, showing effectiveness present approach
finding solutions stable robust. Section 10 gives conclusions.

2. Technical Background
section give basic definitions used rest paper, following standard
notations definitions literature.
Definition 2.1 Constraint Satisfaction Problem (CSP) represented triple P = hX , D, Ci
X finite set variables X = {x1 , x2 , ..., xn }, set domains = {D1 , D2 , ..., Dn }
variable xi X set values variable take, C
finite set constraints C = {C1 , C2 , ..., Cm } restrict values variables simultaneously take. denote DC set unary constraints associated D.
Definition 2.2 tuple assignment values subset variables Xt X .
tuple feasible call s. means assignment domain values
variables violate constraint. complete assignment (it involves
variables CSP), solution CSP. Xs subset variables involved
s. X \Xs set unassigned variables s. value assigned variable x
denoted s(x). addition, denote Ds (x) D(x) subset domain values
variable x consistent s.
number possible tuples constraint
Q Ci C composed elements
Cartesian product domains var(Ci ): xj var(Ci ) Dj , var(Ci ) X set
variables involved Ci (scope Ci ).
Definition 2.3 tightness constraint ratio number forbidden tuples
number possible tuples. Tightness defined within interval [0,1].
Inferential processes CSPs narrow search space possible partial solutions. work
use one known used consistency procedure: arc-consistency.
Definition 2.4 CSP arc-consistent (Mackworth, 1977a) iff pair constrained variables
xi xj , value Di exists least one value b Dj partial
assignment (xi = a, xj = b) satisfies constraints related xi xj . value
51

fiC LIMENT, WALLACE , ALIDO & BARBER

domain variable arc-consistent eliminated part
solution. domain variable arc-consistent iff values arc-consistent. Thus,
problem arc-consistent iff arcs arc-consistent:
Cij C, D(xi ), b D(xj ): b satisfy Cij .
following, several properties associated solutions problems come
dynamic environments defined.
Definition 2.5 robust solution CSP within set solutions one highest
likelihood remaining solution given set changes CSP.
Definition 2.6 flexible solution anything (a partial solution, complete solution, conditional
solution, set solutions, etc.) that, case change, easily modified produce solution
new problem (Verfaillie & Jussien, 2005).
specific concept flexibility concept stability.
Definition 2.7 solution s1 stable another solution s2 if, event
change invalidates them, closer alternative s1 s2 exists (modified work
presented Hebrard, 2006).
main difference Definition 2.7 Definition 2.6 former introduces
concept closer solution. measurement closeness made calculating distances
solutions. concrete information distance equations explained following
sections. would remark Definition 2.5 consider alterations original
solution resistance changes problem. hand, Definition 2.6
Definition 2.7 consider changes original solution new solution produced
change problem.

3. Related Work: Proactive Approaches
Several approaches proposed past handling type problem,
classified based kind solutions obtain. Thus, techniques search robust
solutions others search flexible solutions (for survey see Verfaillie & Jussien, 2005).
section describe techniques search robust solutions limitations.
discuss technique searches certain type stable solutions: super-solutions.
3.1 Searching Robust Solutions
Many earlier approaches search robust solutions use additional information uncertain dynamic environment problem occurs, often involves probabilistic representations. one example type, information gathered form penalties
values invalidated changes problem (Wallace & Freuder, 1998). Nevertheless, Probabilistic CSP model (PCSP) (Fargier & Lang, 1993), exists information
associated constraint, expressing probability existence. techniques focus
dynamism variables CSP. instance, Mixed CSP model (MCSP) (Fargier,
52

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

Lang, & Schiex, 1996) subsequent Uncertain CSP model (UCSP) (Yorke-Smith & Gervet,
2009) consider dynamism certain uncontrollable variables take different values
uncertain domains. related model, uses Simple Temporal Networks, adds data
time uncertainties preferences, represent starting ending times events (STPPUs) (Rossi, Venable, & Yorke-Smith, 2006). Stochastic CSP model (SCSP) (Walsh, 2002)
considers probability distributions associated uncontrollable variables. Branching
CSP model (BCSP) considers possible addition variables (with certain associated gain)
current problem (Fowler & Brown, 2000).
models, form algorithm dependent detailed knowledge
dynamic environment. purpose, list possible changes required explicit
representation uncertainty, often form associated probability distribution. result,
approaches cannot used necessary information unknown. many real problems,
however, knowledge possible changes either limited non-existent. Hence,
important need techniques find robust solutions kind environment.
instance, Climent et al. (2013) cope CSPs model problems order
domain elements significant. Specifically, CSPs modeled Weighted Constraint
Satisfaction Problems (WCSPs) (Larrosa & Schiex, 2004) penalizing valid tuples based
coverings. Instead requiring extra detailed dynamism information, authors make limited
assumptions concerning changes might occur, related nature CSPs
ordered domains. Specifically, dynamism assumed take form restrictions bounds
solution space. paper, make assumptions dynamism.
previous WCSP modeling approach computes robustness based feasible neighbours compose
covering surrounds analyzed value respect constraint boundary. Thus,
cases neighbour feasible respect one bound another bound,
neighbour feasible solution space. reason, approach obtains robustness
approximations problems high relation constraints.
hand, algorithm described paper computes feasible assignments respect entire
solution space, avoids weakness WCSP modeling approach explained above.
comparison approaches found Section 9.
3.2 Searching Super-Solutions
Techniques search stable solutions certain type, denoted super-solutions,
presented Hebrard (2006). goal able repair invalid solution changes
occur, minimal changes specified advance. Since another approach
require detailed additional information changes problem, interest
compare search algorithm introduced paper.
Definition 3.1 solution (a, b)-super-solution loss values variables
repaired assigning values variables changing values b
variables (Hebrard, 2006).
CSPs, major focus finding (1, 0)-super-solutions. high
computational cost computing b > 0 > 1. one reasons analyze
particular super-solution case paper. reason given Verfaillie Jussien
(2005), authors state desirable objective limit much possible changes
53

fiC LIMENT, WALLACE , ALIDO & BARBER

produced solution, motives search (a, 0)-super-solutions. general, unusual find (1, 0)-super-solutions variables repaired. reason, Hebrard
(2006) developed branch bound-based algorithm finding solutions close
(1, 0)-super-solutions, i.e., number repairable variables maximized (also called maximizing (1, 0)-repairability).

4. Extending Robustness Stability CSPs Ordered Domains
section extend original definition solution robustness (Definition 2.5) solution
stability (Definition 2.7) consider CSPs ordered domains, limited assumptions
made changes problem derived inherent structure. Given
framework therefore existence significant order values domains,
reasonable assume original bounds solution space restricted relaxed,
even cover possible changes. bounds solution space delimited
domains constraints CSP. Note possibility solution loss exists
changes original bounds solution space restrictive. reason,
solution located farther away bounds likely remain solution. Given
assumptions, specialize Definition 2.5 framework follows.
Definition 4.1 robust solution CSP ordered domains without detailed dynamism
data solution maximizes distance dynamic bounds solution space.
Furthermore, definition stable solutions CSPs ordered domains made
precise possible define specific notion closeness two solutions
due existent order domain values. Hebrard (2006) measures level dissimilarity
two solutions counting
Pn number variables take different values solutions, i.e.,
Hamming distance ( i=1 (s1i 6= s2i )). Later, Hebrard, OSullivan, Walsh (2007) consider
another similarity measure: Manhattan distance.
P measure uses sum absolute difference values (of variable) solutions ( ni=1 |s1i s2i |). Note unlike Hamming
distance, Manhattan distance requires order elements order calculate absolute
difference values. following definition, apply Manhattan distance notion
stable solutions CSPs ordered domains.
Definition 4.2 Given order relationship values set solutions, solution s1
stable another solution s2 iff, event change invalidates them, exists
alternative solution s1 lower Manhattan distance Manhattan distance
alternative solution s2.
Furthermore, present extension Definition 3.1 CSPs ordered domains fixing
maximum Manhattan distance original solution repaired solution,
called c.
Definition 4.3 solution (a, b, c)-super-solution loss values variables most,
repaired assigning values whose Manhattan distance respect original
values lower equal c, involves changing values b variables most.
definition holds (1, 0, c)-super-solutions (1, 0, c)-repairability,
main focus stability analysis paper.
54

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

5. Searching Robust Stable Solutions: General Main Objective
order find robust stable solutions CSPs ordered domains assumptions,
combine robustness stability criteria presented Section 4. mentioned, calculating
distances required search robust solutions framework. However, measure
distance dynamic bounds solution space always obvious easy derive,
since bounds delimited domains constraints CSP, latter may
extensionally expressed. However, deductions minimum distances bounds
made based feasibility neighbours solution. idea first motivated
simple example formalized.
Example 5.1 Figure 1 shows two solution spaces (one convex non-convex) whose
dynamic bounds marked contiguous lines. robust solutions according Definition
4.1 highlighted. Note two contiguous feasible neighbours sides
assignment (discontinuous lines).

(a) Convex Solution Space

(b) Non-convex Solution Space

Figure 1: Robust solutions different solution spaces.
example, conclude ensure solution located
least distance bound certain direction n-dimensional space tuples
distances lower equal direction feasible. Therefore, number
feasible contiguous surrounding neighbours solution measure robustness
solution face restrictive changes affect original bounds solution space (see
Definition 4.1). addition fulfilling main objective finding solutions whose values
high number feasible neighbours close assignment, criterion used obtain
solutions high stability. value assigned variable least one
feasible neighbour values, variable repairable. is, assigned value
lost, easily repaired assigning neighbour value (since value consistent
rest values assignment). Regarding stability notion Definition 4.2, note
difference lost value repairable value low, since immediate
neighbours. fact, value difference one, minimum possible.
55

fiC LIMENT, WALLACE , ALIDO & BARBER

set feasible contiguous neighbour values value v differences greater
k respect v increasing, decreasing, directions respect order
relationship denoted Nk (x, v, s, ). Value v feasible value variable x feasible
partial/complete assignment s. Here, say values feasible, mean
feasible respect s. (Recall use Ds (x) D(x) subset domain values
consistent feasible partial assignment s.) list operators composed
set paired elements, operator pairs. operator pair denoted {{>, +}, {<, }}.
operator pairs fix order directions analyze. Thus, set {>, +} refers values greater
v (increasing direction) set {<, } refers values lower v (decreasing direction).
operator pair, operator position j referenced ij . instance, list
operators = {{>, +}, {<, }}, operator pair 1 references {>, +} operator 12
references operator +. Given notation, define Nk (x, v, s, ) as:
Nk (x, v, s, )= {w Ds (x) : , w i1 v |v w| k

(1)

z j [1 . . . (|v w| 1)], (v z2 j) Ds (x)}
first condition Equation 1 ensures value w greater lower v according
operator i1 {>, <} distance values less equal k.
second condition ensures values closer v w feasible values s.
least one not, value w cannot belong Nk (x, v, s, ). mentioned previously,
set feasible neighbours value contiguous. Otherwise, infeasible
space value another feasible value. instance, Figure 1(b) value 5
belong Nk (y, 2, {x = 2}, ) k value 4 feasible value
therefore outside bounds solution space.
general case CSPs ordered domains assume bounds
dynamic, desirable objective find contiguous surrounding feasible neighbours
sides. reason = {{>, +}, {<, }}. list operator pairs, last condition
Equation 1 checks values directions closer v w, feasible
values s. instance, Figure 1(b), Nk (y, 2, {x = 2}, {{>, +}, {<, }}) = {1, 3} k
value. Note neighbours sides value 2 respect axis. Section
8, show specific case desirable apply one operator pair due
nature problem.
apply Equation 1 domains ordered Z, monotonic order-preserving
function applied. instance, consider = {f reezing, cold, mild, warm, hot,
boiling}, monotonic function assigns greater values values higher temperatures could
defined. example, f (f reezing) = 1, f (cold) = 2, f (mild) = 3, f (warm) = 4, f (hot) =
5 f (boiling) = 6.

6. Objective Function
Section 5 stated main desirable objective selected value many contiguous feasible neighbours certain direction, determine minimum distance
value bound direction. approximating distance several values assigned
(partial complete assignment), compute number neighbours value. Therefore,
56

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

define objective function search algorithm sum size Nk (x, v, s, )
(denoted |Nk (x, v, s, )|) variable x X . incomplete assignment, calculate
maximum |Nk (x, v, s, )| v Ds (x) unassigned variable x X \Xs (upper
bound). Note maximum size set neighbour values variable | | k,
| | number pair operators. Thus, maximum size set neighbour values
2k composed two operator pairs k composed one operator pair. Note
necessary check values Ds (x) if, least one them, size
set maximum possible. following equation, formalize objective function
used search algorithm.

f (s, k, ) = {

X

max{|Nk (x, v, s, )|, v Ds (x)} +

X

|Nk (y, s(y), s, )|}

(2)

yXs

xX \Xs

Example 5.1, robust solutions Figures 1(a) 1(b) (highlighted solutions) f (s, k, {{>, +}, {<, }}) = 4, k 1, since every value assigned solution
two contiguous neighbours sides.
Next, give formal rationale using total number neighbours solution (sum
feasible surrounding neighbours value solution) measure robustness.
k = 1, convex solution space, value either zero, one two feasible neighbours. discount case zero neighbours assignment zero feasible
neighbours, must part singleton domain, part solutions.
need consider values one two feasible neighbours.
case, solution greater sum one whose assignments feasible neighbour pairs. easily seen consider difference solution whose
values one feasible neighbour solution; difference equal
number feasible neighbour pairs associated latters assignments.
Proposition 1. assume two feasible neighbours confers greater robustness
one probabilities single changes independent, solution
greater feasible neighbour-sum another robust, vice versa.
non-convex case, unfortunately possible one assignment zero feasible
neighbours, assignments variable one two. case, cannot
assume Proposition 1. However, number variables problem increases, becomes
increasingly unlikely variable assignment zero feasible neighbours
associated largest neighbour-sum remaining variables.
Regarding measure stability, solution maximizes (1, 0, k)-repairability (see
Definition 4.3) maximizes number variables repaired neighbour value
distance less equal k (without modifying variable). However, obtain robust
solutions maximize sum neighbour values value solution. Note even
maximization criteria identical, mentioned, number variables
problem increases, becomes increasingly unlikely non-repairable variable associated
largest neighbour-sum remaining variables. work use
technique finding robust stable solutions CSPs ordered domains. Nevertheless,
basic units measure criteria different.
57

fiC LIMENT, WALLACE , ALIDO & BARBER

7. Search Algorithm
section present algorithm finding robust stable solutions according main
objective described Section 6. purpose, incorporated optimization criterion
Branch & Bound algorithm (Algorithm 1) maximizes objective function f (s, k, )
(see Equation 2). mentioned, function sums |Nk | assigned variable maximum
possible |Nk | unassigned variable. Note computation upper bound final
total number feasible contiguous neighbours solution.
Algorithm 1 (B&B-Nk ) anytime algorithm uses inference process prunes
branches whose objective function value lower equal current maximum function
value obtained, referred lb (lower bound). process stops branches
explored pruned, providing solution maximum f (s, k, ). hand,
limit search time therefore quality best solution found fixing time cutoff.
course, time Algorithm 1 spends searching, robust stable solution
provided be. addition, compute maximum possible objective function value,
maximum number neighbours variable multiplied number variables
CSP, denoted ub (upper bound). Thus, objective function value new solution found
equal ub, algorithm stops, since solution optimal.
Algorithm 1: B&B-Nk : Branch & Bound anytime algorithm
Data: P = hX , D, Ci, , k, scale, m, time cutoff (optional)
Result: s, Nk , lb
; // Partial assignment
Xs ; // Set variables assigned
Nk ; // Set contiguous surrounding neighbours
lb 1; // Maximum f (s, k, ) solutions
ub | | k |X |;
1;
GAC3-Nk (P, s, Xs , Nk , , k, lb);
repeat
restarting-scratch new solution found
1;
C scale mi ; //number fails cutoff
+ 1;
time cutoff MGAC3-Nk (P, s, Xs , Nk , , k, lb, 0, C, ub);
implemented Branch & Bound algorithm using Geometric restart strategy (Walsh,
1999) order reduce repetition fails search due early wrong assignments
(thrashing). Thus, time number failures (referenced nbF ) reaches number-offails cutoff value condition (C) checked Algorithm 3, algorithm restarts search
scratch, except constraint weights stored dom/wdeg heuristic variable selection
(Boussemart et al., 2004). value number fails cutoff increased geometrically Algorithm 1 according scale factor (referred scale) multiplicative factor (referred
m). implemented two different options carry solution found. first,
called restarting-completion, first solution found, algorithm continues search
58

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

completion (this done assigning huge number representing number fails cutoff).
second option, called restarting-scratch, solution found, algorithm restarts
search scratch restarts number fails cutoff computation (the constraint weighs
remain same). instances large domain sizes, restarting option effective
avoids spending large amount time specific branch. latter happens
Algorithm 1 checks many domain values variables located low levels search tree, objective function partial assignment better current maximum (lb).
case, exists time cutoff, Algorithm 1 could analyze branches tree
may contain solutions better quality.
inference process carried Algorithm 2 (GAC3-Nk ), extension
well-known AC3 (Mackworth, 1977b) performs Generalized Arc Consistency (GAC) (Mohr
& Henderson, 1986; Bessiere, 2006). specific notation included, var(c),
scope c C. original seekSupport function GAC3 searches support
domain value. modified function slightly providing set values
analysed parameter function. Thus, values deleted
exist consistent support respect partial assignment, seekSupport returns
false. function first called values domain variables (for checking
partial assignment GAC3) later Nk assigned variables (for checking
Nk (x, s(x), s, ) GAC3 respect s). order ensure contiguity values Nk ,
Algorithm 2 checks consistency subsets Ni Nk , equal one initially,
increased one unit least one values Ni inconsistent reaches value
k. complexity updating Ni reduced | | domains ordered. Note
case greater lower values candidates set, updating
cost 2 i. composing set contiguous neighbour values GAC3 respect s,
Algorithm 2 analyzes objective function f (s, k, ) greater lb. not,
GAC3, returns false.
Algorithm 3 (MGAC3-Nk ) performs Maintaining GAC3 procedure assigning variable x X new value v D(x), value selected GAC3-Nk respect s.
implemented two value selection heuristics: lexicographical order selection value
maximizes |Nk (x, v, s, )|, starting intermediate values. real life problems
lexicographical selection order effective finding feasible solutions quickly.
example scheduling problems, whose domain values represent time units; hence importance
selecting low values order exceed maximum fixed makespan. However,
important select low values, heuristic starts intermediate values may offer better
results selecting values maximize objective function current node
search tree. Furthermore, since search starts intermediate values, likelihood selecting
values located far domain bounds higher.
Algorithm 3 responsible updating set assigned variables Xs , partial assignment maximum objective function value lb (for solution found). Furthermore,
stores domains set neighbours variables making assignment. Note
variable x assigned, D(x) contains single value value assigned x. Algorithm 2 (GAC3-Nk ) returns false, Algorithm 3 (MGAC3-Nk ) carries backtracking
process restores domains set neighbours variables.
reduce computational time deal CSPs convex domains, implemented Bounds Arc Consistency discrete CSPs (Lhomme, 1993). main feature
59

fiC LIMENT, WALLACE , ALIDO & BARBER

Algorithm 2: GAC3-Nk : Global Arc Consistency algorithm
Data: P, s, Xs , Nk , , k, lb, nbF
Result: D, Nk , nbF
Q {(x, c), c C, x var(c)} // var(c) scope c
Q 6=
(x, c) takeElement(Q);
seekD seekSupport(x, D(x), c); // Found support D(x) c?
D(x) =
nbF nbF + 1; // number failures
return false
seekD
Q Q {(y, c ), c C c 6= c x, var(c ) x 6= y}
x Xs
1;
repeat
update Ni (x, s(x), s, ) applying Equation 1;
seekN seekSupport(x, Ni (x, s(x), s, ), c);
+ 1;
seekN = false > k;
Nk (x, s(x), s, ) Ni (x, s(x), s, )
return f (s, k, ) > lb // See Equation 2

consistency technique arc consistency restricted respect bounds
convex domain. Thus, including search algorithm affects seekSupport function, instead seeking support set values, checks minimum
maximum bounds. Note implementation necessary search robust stable solutions; however allows significant reduction search time. apply bounds
consistency tentative values assignment set neighbours, since
require complete consistency check. Otherwise could exist infeasible gaps, would
break contiguity requirement ensures minimum distances bounds.

8. Case Study: Searching Robust Stable Schedules
types real life problems whose structure provide us specific information
dynamism. section analyze well known type problem literature:
scheduling problems. problems converted satisfiability problems fixing
maximum makespan, modeled CSPs. CSP modeling usually consists
associating start end time task particular variable (in paper use
start time). domain associated variable represents possible time units, means
possible fix maximum desired makespan. Finally, duration tasks
order (if exists) fixed means CSP constraints.
section, first explain robustness scheduling measurement units,
describe objective function CSPs model scheduling problems give example
application.
60

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

Algorithm 3: MGAC3-Nk : Maintaining Global Arc Consistency
Data: P, s, Xs , Nk , , k, lb, nbF, C, ub
Result: s, Nk , lb
select x X \Xs ; // dom/wdeg heuristic
Xs Xs x;
save Nk ;
D(x) 6= nbF < C
select min(v) D(x); // Heuristic 1: lexicographical value order
select v D(x), max{|Nk (x, v, s, )|} starting intermediate values; // Heuristic 2
{x = v}
D(x) v;
GAC3-Nk (P, s, Xs , Nk , k, lb, nbF )
Xs = X
// New solution found
lb f (s, k, );
lb = ub
return true // Best possible sum achieved
C ; // restarting-completion
return false // restarting-scratch
MGAC3-Nk (P, s, Xs , Nk , k, lb, nbF, C, uB)
return true
restore D\D(x) Nk ;
s\{x = v};
Xs Xs \x;
return false

8.1 Robustness Measurement Scheduling
section, introduce several criteria measuring scheduling robustness.
purpose, use terms buffers slack refer spare time related tasks.
two main factors enhance capability schedule absorb unexpected delays
activities: number buffers duration. Ideally, according robustness criterion,
buffer time long possible longer is, longer delays
able absorb. reason another straight-forward robustness measurement proposed
Leon et al. (1994) slack average schedule. combination duration
buffers distribution across schedule provides accurate robustness measure

denoted Rslack
. slight variant measure introduced Surico et al. (2008) consists
maximizing slack average (shorted avg) minimizing standard deviation (shorted
std) schedule s. regulating importance standard deviation term, authors
use parameter called , take value interval [0.2,0.25], according authors
considerations.


Rslack
= avg(slack) std(slack)

61

(3)

fiC LIMENT, WALLACE , ALIDO & BARBER

Another means measuring robustness system, defined Kitano (2007) related
resistance perturbations certain probability occurrence. approach
extended Escamilla et al. (2012) scheduling problems probabilities task delays
, Z discrete set unexpected
unknown. robustness measure denoted RF,Z
delays duration tasks, F measures whether schedule still feasible disruption
1
, z Z probability
(F (z) = 1 satisfiable, otherwise F (z) = 0) p(z) = |z|
instance z Z (i.e., delays considered probability occurrence).

RF,Z
=

X

p(z) F (z)

(4)

zZ

8.2 Objective Function Scheduling
CSP models scheduling problems, fact domain values represent time units implications respect measures robustness stability. problems, value
solution lost, lower values cannot used replacing unfeasible value represent time units already taken place. Thus, incident, time point
available, neither values lower t. Therefore, lower feasible neighbours
improve robustness stability solution CSP models scheduling problem
(since cannot absorb delays used repairable values). Given characteristics,
main desirable objective search neighbours greater value assigned. this,
fix set operators = {{>, +}} scheduling problems. illustrated below.
Example 8.1 consider toy scheduling problem two tasks: T0 T1 . duration two time units must executed order listed. maximum makespan
allowed six time units. Figure 2 see associated CSP model solution space.
variables X0 X1 represent start times tasks T0 T1 , respectively. domain
variables (represented discontinuous lines) [0 . . . 4], preserves maximum
makespan six time units (the maximum start time task maximum makespan minus
duration aforesaid task). one constraint controlling execution order tasks
(T0 must start T1 ), C0 : X1 X0 + 2. solution space represented dark
gray area, six solutions (black dots).
specific information given dynamic environment, schedule
robust? stated Section 8.1, greater number time buffers greater duration, robust schedule is. determine solution modeled
CSP meets requirements? answer obtained determining feasible contiguous
neighbours greater values, located distances less equal k solution. However,
depending value k, either prioritize selection schedules large number
short time buffers prioritize selection schedules lower number long time
buffers. number greater feasible neighbours associated value variable corresponds
total amount slack located task represented variable. Thus, slack
able absorb delay previous task long itself, without modifying tasks
present schedule (robustness feature). Furthermore, slack following task sufficient
absorb delay, start following task delayed (after repairing broken assigned
value) long enough buffer associated later task (stability feature).
62

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

3

4

X1

0

1

2

C0

0

1

2

3

4

X0

Figure 2: CSP model associated Example 8.1 solution space.
example, two-dimensional CSP representing scheduling problem
two tasks, three schedules robust according criteria stated above.
maximize sum distances greater values located distance one (k = 1)
value assignment, obtain solution shown Figure 3(a), whose sum f (s0 , k =
1, {>, +}) = 1 + 1. first number Nk (x0 , v0 , s, {>, +}) second Nk (x1 , v1 , s, {>, +}),
v0 v1 values assigned variables x0 x1 respectively. Note sums
neighbours greater solution values located distance one
f (s1 , k = 1, {>, +}) = 1 + 0 f (s2 , k = 1, {>, +}) = 0 + 1, respectively. following (a)
figures, greater neighbours indicated elipse, arrow pointing solution (the
circled dot). associated (b) figures, schedules equivalent solutions marked (a)
shown. Note greater neighbours indicated (a) figures correspond slack
(b) figures. instance, Figure 3(b) task associated slack duration one,
corresponds existence one greater neighbour value assignment Figure 3(a).
hand, maximize sum greater neighbors values k > 1, three
solutions represented Figures 3(a), 4(a) 5(a) classified best solutions according
objective function. computation sum neighbours located distance lower
equal k, k > 1 is: f (s0 , k > 1, {>, +}) = 1 + 1 (Figure 3(a)), f (s1 , k > 1, {>, +}) = 2 + 0
(Figure 4(a)) f (s2 , k > 1, {>, +}) = 0 + 2 (Figure 5(a)). Note schedules Figures
4(b) 5(b) one time buffer, duration two time units, unlike schedule
represented Figure 3(b) two time buffers one unit each. Thus, fixing k = 1
prioritize seek high number time buffers. However, greater k values, prioritize
duration, even case distribution may optimal.
consider stability solutions, small modifications solutions always
preferred. case, possible task starts scheduled time, reassigning
start time closer greater neighbour, composing another schedule similar
original one. Therefore, search feasible greater neighbours (which introduces buffers
tasks schedule) improving both, robustness stability obtained schedules.
search schedules buffers k time units achieved model
reformulation techniques. achieved adding two variables original variable (the
variables represent start time tasks). One variable represents slack following
task variable represents sum slack original starting time.
63

fiC LIMENT, WALLACE , ALIDO & BARBER

0

1

2

X0

4
3

Slack

T0

2

X1

0
(a) Solution space.

1

2

T1
3

4

Slack
5

6

(b) Schedule marked solution.

Figure 3: Robust schedule s0 = (x0 = 0, x1 = 3) Example 8.1 greater neighbours
k 1.

0

1

2

X0

4
3

Slack

T0

2

X1

0
(a) Solution space.

1

2

3

T1
4

5

6

(b) Schedule marked solution.

Figure 4: Robust schedule s1 = (x0 = 0, x1 = 4) Example 8.1 greater neighbours
k > 1.

0

1

2

X0

4
3

T0

2

X1

0
(a) Solution space.

1

Slack

T1
2

3

4

5

6

(b) Schedule marked solution.

Figure 5: Robust schedule s2 = (x0 = 0, x1 = 2) Example 8.1 greater neighbours
k > 1.

64

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

instance, let pi starting time task xi . Thus, would add constraint pi = pi + si ,
si represents slack associated task xi . addition, depending maximum desired
duration buffers, another constraint may added, si k. case, delay
k timeP
units. addition, objective function express goal maximizing total
slack (max ni=1 si ) must defined.
Furthermore, proactive specific approaches scheduling problems involve
CSP found Herroelen Leus (2005) survey. main advantage approach
presented paper proactive alternatives scheduling problems approach
applied slack-values require consistency check. requirement necessary
scheduling problems intermediate non-valid slack values possible. Examples type
problem scheduling problems limited machine availability (see, instance Schmidt,
2000). cases, machines unavailable certain time intervals; reason, tasks
require resources cannot executed time units. happens
scheduling operators, workers breaks day. Moreover,
exist reactive approaches, re-schedule activities disruption invalidates
original schedule found. example, solving dynamic Resource-Constrained Project Scheduling
Problems (RCPSP) (Elkhyari, Gueret, & Jussien, 2004).

9. Experimental Results
section, present results experiments designed evaluate performance Algorithm 1. Solutions obtained restarting-completion procedure referred neighbour
solutions graphs tables throughout section. Solutions obtained restarting-scratch
referred neighbour solutions(R). Experiments done random problems
benchmarks presented literature. random instances generator (RBGenerator 2.0),
benchmarks parser XCSP instances found Christophe Lecoutres web
page 1 .
addition assessing search Algorithm 1, evaluated two proactive methods
require specific additional information dynamism. One WCSP
modeling technique (Climent et al., 2013), based dynamism assumptions
present work. solutions obtained technique referred WCSP-mod
solutions. evaluated approach scheduling problems
consider adaptation scheduling problems presented Section 8.2 (neighbouring values lower magnitude considered). proactive approach
maximizes (1, 0)-repairability (see Section 3.2). implement technique, modified Algorithm 1 (B&B-Nk ) exchanging MGAC3-Nk GAC3-Nk algorithms MAC+
GAC+ (Hebrard, 2006), respectively. solutions obtained technique referred
(1, 0)-super-solutions. addition, solutions ordinary CSP solver analyzed (referred simple solutions), order detect whether cases solutions
similar robustness and/or stability.
addition, added geometric restart (restarting-completion) bounds consistency techniques explained Section 7 ordinary CSP solver super-solutions solver order
provide computational advantages. approach models CSPs WCSP,
1. http://www.cril.univ-artois.fr/ lecoutre/index.html

65

fiC LIMENT, WALLACE , ALIDO & BARBER

used solver one used Climent et al. (2013): ToulBar22 . necessary
use different solver evaluation technique approach requires WCSP
solver. approaches evaluated, values selected lexicographical order
time cutoff fixed 100 seconds. Experiments run Intel Core i5-650 Processor (3.20
Ghz). addition, geometric restart, scale factor fixed 10 multiplicative
factor 1.5.
evaluation based two main features solutions obtained proactive approaches:
stability robustness. tables section, best robustness/stability results obtained
marked bold. accordance assumptions laid previous sections, use
robustness stability measures described Section 4. Here, note ordinary CSP
solver super-solutions solver consider dynamism assumptions WCSP
modeling technique approach presented paper. say, consider
possible future restrictive modifications bounds solution space CSPs ordered
domains. Regarding stability, technique maximizes (1, 0)-repairability searches
stable solutions according Definition 3.1. However, mentioned above, paper analyze
precise concept stability CSPs ordered domains, (1, 0, c)-repairability (see
Definition 4.3).
9.1 Robustness Analysis General CSPs
section analyze robustness stability solutions obtained wide range
tightness values. purpose, random CSPs generated RBGenerator 2.0,
non-convex constraints represented extensionally. non-convexity domains, bounds consistency technique cannot used. CSPs generated 25 variables
domain size 30 200 binary constraints. Domain values integer values interval
[0, 29]. tightness values analyzed 0.1, 0.2, 0.3. (Note: 0.34 critical value
tightness CSP typology.) tightness generated 10 random instances
solved Algorithm 1 k = 1. analysis deal general case CSPs
ordered domains (see Section 5.1) fixed set operators search algorithm
= {{>, +}, {<, }} value selection heuristic 2 (see Section 7), maximizes
|Nk (x, v, s, )| starting intermediate values.
mentioned previously, usually feasible compute complete set solutions
CSP. reason, order measure robustness solutions obtained four
approaches, sampled closest surrounding neighbours (k = 1). Thus, closest surrounding neighbour solution CSP, means analyzed solution could become
infeasible change magnitude one greater original bound/s invalidate
neighbour. hand, neighbour solution CSP, means restrictive modification would invalidate analyzed solution. Therefore, satisfiability checking
random sample neighbours solutions provides estimation likelihood
solutions remain valid, say, estimation robustness.
sampling feasibility neighbourhood solutions, made certain number
random modifications magnitude k values assigned variables solutions.
number values assigned variables solutions modified, denoted
nbV arM od [1 . . . 10]. value nbV arM od, sampled 500 neighbours
2. http://carlit.toulouse.inra.fr/cgi-bin/awki.cgi/ToolBarIntro

66

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

solution analyzed checked feasibility. average number feasible neighbours
type solution shown Table 9.1. observed Algorithm 1 either restarting
option dramatically outperformed ordinary CSP solver technique maximizes
(1, 0)-repairability. outperformed WCSP modeling approach tightness 0.2 0.3.
weakness latter approach obtains robustness approximations problems
high relation constraints, computes feasible neighbours
constraint boundary. Thus, higher tightness, higher likelihood existence
neighbour tuples feasible one constraint/domain another one.
conflicting situations less frequent unconstrained instances. reason, tightness
0.1 performance modeling approach better. However, obtains better robustness
results Algorithm 1 highly unrestricted instances high nbV arM od values. regard
Algorithm 1, restarting-completion option provides better results restarting-scratch
(differentiated R) unconstrained instances, preform similarly higher
tightness values. Figure 6(b) selected nbV arM od = 2 emphasize trends robustness
stability function varying tightness.
tightness

0.1

0.2

nbV arM od

2

Approach

Average Number feasible neighbours sample

simple
super
WCSP-m
neigh
neigh(R)

7.2
8.8
152.4
206.8
191.6

4

0.6
0.6
60.2
75
74.4

6

0
0
24.5
27.4
24.4

8

0
0
12.8
10.8
7.9

10

0
0
5.8
3.8
2.9

2

0.2
1
5.7
36.2
33.9

0.3
4

0
0
0.1
2.5
2

6

0
0
0
0
0.5

8

10

2

4

6

0
0
0
0
0.1

0
0
0
0
0

0
0.4
0.4
2.8
2.5

0
0
0.1
0.1
0

0
0
0
0
0

Table 1: Robustness Analysis Based tightness (< 2, 25, 30, 200, tightness >).
stability measurement, (1, 0, 1)-repairability used (see Definition 4.3), measures number variables replaced value located distance one
value assigned without modifying rest values solution. Stability results shown
Figure 6(a). mentioned, solution value lost, objective find closest repairable
values. reason, algorithm consider feasible values k units greater
smaller value assigned, since could result future solutions Manhattan
distance new solution original one would exaggeratedly great (see Section
4). hand, technique maximizes (1, 0)-repairability considers value
repairable value. fact represents disadvantage searching repairable values
ordered domains. observed Figure 6(a), see poor performance
super-solutions (1, 0, 1)-repairability.
would note CSPs highly restricted, stability robustness
solutions obtained evaluated methods similar. due fact
cases CSPs solutions consequently distances solutions
bounds low. instances, number solutions low
solutions scattered within tuple-space, likelihood solution located
bounds solution space high. reason, likelihood variable
67

fiC LIMENT, WALLACE , ALIDO & BARBER

25
neighbours solution
neighbours (R) solution
simple solution
(1,0)-super-solution
WCSP-mod solution

(1, 0, 1)-repairability

20

15

10

5

0
0.1

0.2
Tightness

0.3

Average sampling number neighbour solutions

(a) Stability analysis
neighbours solution
neighbours (R) solution
simple solution
(1,0)-super-solution
WCSP-mod solution

200

150

100

50

0
0.1

0.2
Tightness

0.3

(b) Robustness analysis nbV arM od = 2

Figure 6: Combined robustness-stability based tightness (< 2, 25, 30, 200, tightness >).
curves shifted improving clarity graph.

68

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

feasible repairable value near-by low. even case none solutions
assignment feasible neighbours located distance k. case, solutions
equally robust stable k value.
9.2 Scheduling Benchmarks Evaluation
section, evaluate approaches scheduling benchmarks literature order
determine robustness schedules obtained wide range k values. analyzed five
sets 10 job-shop CSP instances, studied Sadeh Fox (1996). instance composed
10 jobs five tasks five resources. job random linear sequence
resources visit, exception bottleneck resources, visited fixed
number operations (in order increase resource contention).
analysis deals scheduling problems (see Section 8) fixed set
operators search Algorithm 1 = {{>, +}} value selection done heuristic
1, values selected lexicographical order. Regarding proactive technique
evaluated, author (1, 0)-repairability approach (Hebrard, 2006) made extension
concept breakage (the loss assigned value) scheduling problems. breakage
kind problem considered delay duration task. Therefore, values
greater value assigned time units considered repairable values. reason,
evaluation scheduling problems, incorporated condition (1, 0)-repairability
approach. proper comparison approach approaches, used values
k parameters. following, order avoid term repetition, assume = k.
Note ordinary CSP solver use parameter, obtains schedule
value k.
measuring robustness schedules obtained, used robustness measures introduced Section 8.1. first robustness assessment made measuring total slack whose
duration exceed k, denoted tS(k). addition, accurate measure

(k) (see Equation 3), measures average total slack, minus standard
used, Rslack
deviation multiplied parameter. parameter fixed 0.25, inside
interval authors consider appropriate parameter. Another robustness measure used

based resistance schedule faced perturbations, denoted RF,Z
(see Equation 4), Z set incidents consist delays durations maxd tasks.
used 2 different values maxd : 1 k. case, independently simulated 500
delays maxd units equal probability entire schedule checked schedule
remained valid. stability measurement, again, (1, 0, 1)-repairability used (see Definition
4.3), equivalent measurement number buffers schedule, denoted
nbB. Note desired objective cases repairs necessary, start time
task delayed short time possible.
following figures tables show evaluation two Sadeh problem sets.
problem sets obtained similar results. show results e0ddr1 e0ddr2 benchmarks order compare robustness stability schedules obtained different numbers
bottlenecks problem (other parameters fixed). Sadeh stated e0ddr1 benchmark
contained one bottleneck hand, e0ddr2 benchmark contained two bottlenecks.
Tables 9.2 9.2 show means robustness stability measures scheduling problems. addition, measurements shown, including number schedules obtained nbS,
69

fiC LIMENT, WALLACE , ALIDO & BARBER

total number restarts done search algorithm nbR, total number nodes explored nbN
total number failures nbF . Figure 7 shows stability robustness measurements

(k) e0ddr1. horizontal axis
(vertical axis): mean number buffers mean Rslack
figures represents value ratio parameters k.
k

Approach

nbS

nbR

nbN

nbF

nbB

tS(k)


Rslack
(k)


RF,Z
(1)


RF,Z
(k)

1

simple
super
neigh
neigh(R)

1
9.1
12.7
15.5

3.1
3.1
3.1
28.8

208
7770.4
10171.1
2820.4

85
3043.7
2465.9
628.1

16.1
21.4
27.8
31.3

16.1
21.4
27.8
31.3

0.208
0.308
0.436
0.509

0.328
0.434
0.562
0.628

0.338
0.43
0.555
0.618

3

simple
super
neigh
neigh(R)

1
7.3
15.9
15.5

3.1
3.1
3.1
27.7

208
8138.2
5880.5
2406.5

85
2619.2
2485.1
670.5

16.1
18.9
20.9
22.3

44.3
52.4
59.4
62.1

0.555
0.702
0.832
0.886

0.328
0.384
0.424
0.448

0.311
0.36
0.409
0.413

5

simple
super
neigh
neigh(R)

1
7.1
19
12.9

3.1
3.1
3.1
23.8

208
8373.2
3947.7
2082.3

85
2654.2
1674.7
517.8

16.1
19.1
19.5
20.2

67.8
82.9
86.3
87.3

0.832
1.101
1.159
1.182

0.328
0.388
0.396
0.406

0.288
0.343
0.364
0.35

7

simple
super
neigh
neigh(R)

1
6.5
19.9
11.5

3.1
3.1
3.1
21.2

208
8319.1
3205.9
1871.8

85
3219.5
1032.6
489.5

16.1
18.1
18.9
18.7

88.1
101.8
107.8
108.6

1.057
1.298
1.4
1.413

0.328
0.368
0.384
0.376

0.271
0.303
0.331
0.314

9

simple
super
neigh
neigh(R)

1
5.7
20.8
11.4

3.1
3.1
3.1
19.7

208
8715.7
2793.6
1711.4

85
2620.7
974.2
462.8

16.1
17.6
18.6
18.2

105.7
117.6
126.5
126

1.242
1.452
1.602
1.588

0.328
0.358
0.378
0.368

0.257
0.277
0.303
0.293

11

simple
super
neigh
neigh(R)

1
6
19
7.9

3.1
3.1
3.1
16.9

208
8019.9
2518.5
1593.9

85
1775.8
844.4
435.5

16.1
18.2
18.1
18.4

120.5
133.6
140.2
138.8

1.389
1.629
1.72
1.693

0.328
0.37
0.368
0.374

0.244
0.256
0.28
0.277

Table 2: Evaluation e0ddr1 benchmark.
expected, schedules obtained approaches e0ddr1 benchmark
robust stable e0ddr2 benchmark (see Tables 9.2 9.2) robustness
analysis, see algorithm k = 11 (for restarting options) increased robustness
(k) 0.5 units problems one bottleneck. Therefore,
measure RF,Z
expected, fewer bottlenecks scheduling problem has, robust schedule obtained
algorithm. Detailed results robustness measures found columns tS(k),

(1) Rs (k) tables. instance, largest k value analyzed (k =
Rslack
(k), RF,Z
F,Z
11), total sum buffer times duration k schedule obtained Algorithm
1 restarting-completion 140.2 time units e0ddr1 benchmark 109.67 time units
e0ddr2 benchmark (more 30 time units difference). Regarding stability analysis,
algorithm k = 1 restarting-scratch (differentiated R) found schedules four mean
number buffers (nbB) problems one bottleneck problems two
70

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

k

Approach

nbS

nbR

nbN

nbF

nbB

tS(k)


Rslack
(k)


RF,Z
(1)


RF,Z
(k)

1

simple
super
neigh
neigh(R)

0.9
6.5
10.1
12.4

4
3.9
4
25.4

227
8024.33
11264.22
2555.67

98.89
1975.67
1865.22
709.33

14.11
19.89
24.33
27.44

14.11
19.89
24.33
27.44

0.17
0.28
0.37
0.43

0.28
0.4
0.49
0.55

0.28
0.41
0.49
0.55

3

simple
super
neigh
neigh(R)

0.9
4.9
16.4
11.9

4
3.9
3.9
22.2

227
8602.67
7141.78
2282.67

98.89
1198.67
1711.33
503.89

14.11
17.33
20.22
20.11

37.56
47.22
56
55.22

0.44
0.61
0.77
0.76

0.28
0.35
0.4
0.4

0.25
0.32
0.37
0.37

5

simple
super
neigh
neigh(R)

0.9
4.4
17.3
8.6

4
3.9
3.9
18.9

227
9102.78
5755.22
2036.11

98.89
743.67
1657.33
452.78

14.11
17.11
18.11
17.89

55.11
70.89
76.67
73.89

0.63
0.89
0.99
0.95

0.28
0.34
0.36
0.36

0.22
0.29
0.31
0.3

7

simple
super
neigh
neigh(R)

0.9
3.8
15.2
7.7

4
3.9
3.9
17.5

227
9721.67
4903
1827.44

98.89
914.22
1272.56
428.78

14.11
15.78
16.89
17.22

68.22
82.22
88.78
88.67

0.75
0.97
1.09
1.09

0.28
0.32
0.34
0.35

0.2
0.25
0.26
0.26

9

simple
super
neigh
neigh(R)

0.9
3.1
15.7
6.4

4
3.9
3.9
16.2

227
9971
4344.44
1657.56

98.89
959.56
1161.78
449.22

14.11
15.56
16.78
16.78

78.67
92.89
101.11
100.44

0.84
1.06
1.2
1.19

0.28
0.31
0.34
0.34

0.18
0.21
0.24
0.23

11

simple
super
neigh
neigh(R)

0.9
2.3
14.7
5.6

4
3.9
3.9
14.4

227
10698.22
4251.78
1588.89

98.89
1090.44
1223.56
390

14.11
15.22
16.22
16.11

87.44
98.89
109.67
107.67

0.91
1.08
1.25
1.22

0.28
0.3
0.32
0.32

0.16
0.19
0.21
0.2

Table 3: Evaluation e0ddr2 benchmark.

71

fiC LIMENT, WALLACE , ALIDO & BARBER

32
neighbours solution
neighbours solution (R)
simple solution
(1,0)-super-solution

30

Mean number buffers

28
26
24
22
20
18
16
1

3

5

7

9

11

k

(a) Stability analysis
1.8
neighbours solution
neighbours solution (R)
simple solution
(1,0)-super-solution

1.6

Mean RslackS(k)

1.4
1.2
1
0.8
0.6
0.4
0.2
1

3

5

7

9

11

k

(b) Robustness analysis

Figure 7: Combined robustness-stability k parameter: mean measures e0ddr1 benchmark.

72

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

bottlenecks best case. Therefore, expected, fewer bottlenecks scheduling problem
has, stable schedule obtained algorithm.
tables figure, see Algorithm 1 either restarting option outperformed ordinary CSP solver technique maximizes (1, 0)-repairability.
Furthermore, analysis k parameter shows parameters lowest values, number buffers schedules found algorithm markedly greater
two techniques (see Figure 7(a)). contrast, improvement robustness algorithm
respect ordinary solver little marked greater k values. comparison
(1, 0)-repairability technique shows tendency e0ddr2 benchmark (see nbB Table
9.2).
Regarding robustness measures plotted figure shown
(1) measure number
Tables 9.2 9.2, see correlation RF,Z
(1)
buffers. relation expected, since random incidents generated measuring RF,Z
delays one unit time. Therefore, buffers (whatever duration) greater

likelihood schedule absorb delays one time unit. addition, tS(k), Rslack
(k)

RF,Z (k) measures correlated. Recall tS(k) total slack whose duration

(k) average minus standard deviation multiplied parameter.
exceed k Rslack
Therefore, unless distribution slack poor, two values must proportional.

(k), greater proportionality respect
Note lower parameter Rslack

two robustness measures. RF,Z (k) measure calculated generating random delays
duration k schedule. reason, robustness measure strongly related
two aforementioned. example relation aforementioned measurement
units observed Table 9.2 k = 11, schedules obtained restarting-scratch
(1) values, schedules
option (differentiated R) greater numbers buffers RF,Z

(k) values.
obtained restarting-completion option greater tS(k), Rslack
(k) RF,Z
means latter greater total slack whose duration exceed k, distribution
limited.
Tables 9.2 9.2 observe measurements correlated robustness
stability, important information still extracted them. k > 1, restartingcompletion algorithm finds greater mean number solutions (nbS). k = 1
restarting-scratch (differentiated R) find solutions. greater k is, easier
find new solutions whose objective function better maximum one (if instance
highly restricted). reason, mean number solutions found greater high
k values. restarting options, mean number solutions considerably higher
approach maximizes (1, 0)-repairability. effect stronger greater values
k condition repairable value latter technique becomes restrictive.
Moreover, technique considers feasible values domains repairable values; result,
feasibility checking slower techniques assume k neighbours (as technique
does). expected, mean number restarts (nbR) much greater restarting-scratch
option techniques restart finding first solution. consequence,
mean number nodes explored (nbN ) mean number failures (nbF ) lower.
schedules obtained Algorithm 1 lowest k value highest number buffers.
hand, robustness measures greater greater k values. Depending
dynamic nature problem, would desirable prioritize higher number
buffers short duration lower number buffers long duration (if two features cannot
73

fiC LIMENT, WALLACE , ALIDO & BARBER

maximized). Thus, known possible future delays duration
least time units, make sense compute k values lower obtained
time buffers could absorb delay. hand, known possible future delays
cannot duration greater d, make sense compute k values greater
time units may decrease number buffers. Hence, information
possible future changes have, better robustness results obtain. However, even
information unknown, obtain schedule certain level robustness
stability setting k intermediate value Algorithm 1.
34
neighbours solution
neighbours solution (R)
simple solution
(1,0)-super-solution

32

Mean number buffers

30
28
26
24
22
20
18
16
10

20

30

40

50
60
Time(s)

70

80

90

100

70

80

90

100

(a) k = 1
34
neighbours solution
neighbours solution (R)
simple solution
(1,0)-super-solution

32

Mean number buffers

30
28
26
24
22
20
18
16
10

20

30

40

50
60
Time(s)

(b) k = 7

Figure 8: Mean number buffers time intervals e0ddr1 benchmark.
evaluation consists analyzing best results obtained technique
fixed cutoff time. However, wanted analyze change degree robustness
stability schedules found time. evaluation, used e0ddr1 benchmark
determined mean 50 instances interval time discretization 10
74

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

seconds. Figures 8(a) 8(b) show mean number buffers found approach k = 1
k = 7. measures shown since similar trends found cases. would
highlight 20 seconds simple solution technique find better schedules
searches one schedule instance (which done less equal 20
seconds). remarkable aspect k = 1 Algorithm 1 restarting options
obtains greater number buffer times approach maximizes (1, 0)-repairability,
k = 1 time intervals (see Figure 8(a)).
hand, Figure 8(b), represents k = 7, shows unstable results. Since
difficult find buffers seven time units, may happen algorithm sacrifices
shorter buffers order find one buffer seven time units. Thus, even overall tendency
measure increase time, entirely uniform. hand,
upward shape trend approach searches super-solutions due fact
considers values repairable possible alternative start time task
follows task sharing resource, equivalent slack associated
task schedule. reason, schedules better technique may contain lower
number buffers. feature marked greater values k, since repairable values
least k unit times greater assigned values, therefore unlikely
find repairable values close assigned ones.
concluded general approach maximizes (1, 0)-repairability finds
solutions lower robustness stability (considering closest repairable values)
approach aforementioned reason. Another disadvantage assumes delays
duration d. Thus, values greater value considered repairable values.
However, consider k neighbours therefore, slacks duration lower k
valued objective function contrast (1, 0)-repairability objective function.
basis evaluation, conclude difference performance
two restarting options (restarting-completion restarting-scratch) significant. Sometimes, time needed restart scratch solution makes option less effective
restarting-completion. cases, restarting-completion option loses time branches
better solutions, restarting-scratch explores branches. instance,
random experiments, restarting-completion provided slightly better results generally (see Table 9.1 Figure 6(b)), scheduling problems, restarting-scratch obtained schedules
bit robust stable lower k values (see k [1, 5] Figure 7). greater k
values, restarting options gave similar results.

10. Conclusions
paper extend concept robustness stability CSPs discrete ordered
domains limited assumptions made changes problems. particular, uncertainty statistics probabilities incidences occur
original problem. context, reasonable assume original bounds solution
space may undergo restrictive modifications, introduced Climent et al. (2013). Therefore, main objective searching robust solutions find solutions maximize
Euclidean distances dynamic bounds solution space. hand, main
objective searching stable solutions terms repairable variables find solutions whose
repairable values close possible broken assignments.
75

fiC LIMENT, WALLACE , ALIDO & BARBER

paper, present new search algorithm combines criteria robustness
stability framework. algorithm developed paper searches solution
maximizes sum contiguous feasible surrounding neighbours distances k less
values solution. obtained solutions high probability remaining valid
possible future restrictive changes constraints domains original problem
(robustness criterion), high number variables easily repaired
value distance lower equal k undergo value loss (stability criterion).
evaluated new algorithm experiments well-known scheduling benchmarks
well random CSPs. shown versions new algorithm outperform
three approaches evaluated: ordinary CSP solvers, technique maximizes
(1, 0)-repairability, approach models CSPs WCSPs many conditions
real differences robustness solutions might obtained. latter occurs
problem constrained valid solutions. respect
two restarting options developed algorithm, found performance
significantly different, although certain situations advantage one other.
slightly constrained CSPs, algorithm obtains solutions greatest number closer
neighbour solutions, greatest (1, 0, 1)-repairability highest values specific measures
scheduling robustness. Furthermore, shown increasing k large problems,
increase robustness, although may happen (1, 0, 1)-repairability decreases.
instance, scheduling problems schedules obtained lower k values tend maximize
number buffers even size small. However, computation higher k values tends
give priority duration buffers consequence, number buffers obtained
lower. Therefore, depending dynamic nature problem, would desirable
prioritize higher number short buffers lower number long buffers (if
possible maximize features).
extension robustness stability definition CSPs discrete ordered
domains development search algorithm finding robust stable solutions
context, useful practical many real life situations problems undergo restrictive
changes added difficulty information possible future changes limited
non-existent. Even difficult conditions, search algorithm able provide stable
robust solutions. Finding solutions located far away dynamic bounds important
face restrictive modifications bounds solution space. Moreover, cases
value lost, important replace nearby value order solution
similar possible original one. closeness feature handled algorithm
approach searches super-solutions.

Acknowledgments
work partially supported research project TIN2010-20976-C02-01 FPU
program fellowship (Min. de Ciencia e Innovacion, Spain). wish thank Dr. Christophe
Lecoutre Dr. Diarmuid Grimes assistance.
76

fiROBUSTNESS TABILITY C ONSTRAINT P ROGRAMMING DYNAMISM U NCERTAINTY

References
Bessiere, C. (2006). Constraint propagation. Foundations Artificial Intelligence, 2, 2983.
Boussemart, F., Hemery, F., Lecoutre, C., & Sais, L. (2004). Boosting systematic search weighting constraints. Proceedings 16th European Conference Artificial Intelligence
(ECAI-04), Vol. 16, p. 146.
Climent, L., Wallace, R. J., Salido, M. A., & Barber, F. (2013). Modeling robustness CSPs
weighted CSPs. Proceedings 10th International Conference Integration Artificial Intelligence Operations Research techniques Constraint Programming (CPAIOR13), pp. 4460.
Elkhyari, A., Gueret, C., & Jussien, N. (2004). Constraint programming dynamic scheduling
problems. Hiroshi Kise, editor, ISS04 International Scheduling Symposium, pp. 8489.
Escamilla, J., Rodriguez-Molins, M., Salido, M., Sierra, M., Menca, C., & Barber, F. (2012). Robust solutions job-shop scheduling problems operators. 24th IEEE International
Conference Tools Artificial Intelligence (ICTAI-12), pp. 209306.
Fargier, H., & Lang, J. (1993). Uncertainty Constraint Satisfaction Problems: probabilistic approach. Proceedings Symbolic Quantitative Approaches Reasoning Uncertainty (EC-SQARU-93), pp. 97104.
Fargier, H., Lang, J., & Schiex, T. (1996). Mixed Constraint Satisfaction: framework decision
problems incomplete knowledge. Proceedings 13th National Conference
Artificial Intelligence (AAAI-96), pp. 175180.
Fowler, D., & Brown, K. (2000). Branching Constraint Satisfaction Problems solutions robust
likely changes. Proceedings International Conference Principles
Practice Constraint Programming (CP-2000), pp. 500504.
Fu, N., Lau, H., Varakantham, P., & Xiao, F. (2012). Robust local search solving RCPSP/max
durational uncertainty. Journal Artificial Intelligence Research, 43, 4386.
Hebrard, E. (2006). Robust Solutions Constraint Satisfaction Optimisation Uncertainty. Ph.D. thesis, University New South Wales.
Hebrard, E., OSullivan, B., & Walsh, T. (2007). Distance constraints Constraint Satisfaction.
Proceedings 20th International Joint Conference Artificial Intelligence (IJCAI-07),
pp. 106111.
Herroelen, W., & Leus, R. (2005). Project scheduling uncertainty: Survey research potentials. European Journal Operational Research, 165(2), 289306.
Kitano, H. (2007). Towards theory biological robustness. Molecular Systems Biology, 3(1).
Larrosa, J., & Schiex, T. (2004). Solving weighted CSP maintaining arc consistency. Artificial
Intelligence, 159, 126.
Leon, V., Wu, S., & Robert, H. (1994). Robustness measures robust scheduling job shops.
IIE transactions, 26(5), 3243.
Lhomme, O. (1993). Consistency techniques numeric CSPs. Proceedings 13th International Joint Conference Artificial Intelligence (IJCAI-93), Vol. 13, pp. 232232.
77

fiC LIMENT, WALLACE , ALIDO & BARBER

Mackworth, A. (1977a). Consistency network relations. Artificial Intelligence, 8, 99118.
Mackworth, A. (1977b). reading sketch maps. Proceedings 5th International Joint
Conference Artificial Intelligence (IJCAI-77), pp. 598606.
Mohr, R., & Henderson, T. C. (1986). Arc path consistency revisited. Artificial intelligence,
28(2), 225233.
Rossi, F., Venable, K., & Yorke-Smith, N. (2006). Uncertainty soft temporal constraint problems:
general framework controllability algorithms fuzzy case. Journal Artificial
Intelligence Research, 27(1), 617674.
Sadeh, N., & Fox, M. (1996). Variable value ordering heuristics job shop scheduling
Constraint Satisfaction Problem. Artificial Intelligence, 86(1), 141.
Schmidt, G. (2000). Scheduling limited machine availability. European Journal Operational
Research, 121(1), 115.
Surico, M., Kaymak, U., Naso, D., & Dekker, R. (2008). Hybrid meta-heuristics robust
scheduling. ERIM Report Series Reference No. ERS-2006-018-LIS, Available SSRN:
http://ssrn.com/abstract=902747.
Verfaillie, G., & Jussien, N. (2005). Constraint solving uncertain dynamic environments:
survey. Constraints, 10(3), 253281.
Wallace, R., & Freuder, E. (1998). Stable solutions Dynamic Constraint Satisfaction Problems.
Proceedings 4th International Conference Principles Practice Constraint Programming (CP-98), pp. 447461.
Walsh, T. (1999). Search small world. Proceedings International Joint Conference
Artificial Intelligence, Vol. 16, pp. 11721177.
Walsh, T. (2002). Stochastic Constraint Programming. Proceedings 15th European Conference Artificial Intelligence (ECAI-02), pp. 111115.
Yorke-Smith, N., & Gervet, C. (2009). Certainty closure: Reliable constraint reasoning incomplete erroneous data. Journal ACM Transactions Computational Logic (TOCL),
10(1), 3.

78


