journal artificial intelligence

submitted published

robustness stability constraint programming
dynamism uncertainty
laura climent

lcliment dsic upv es

instituto de automatica e informatica industrial
universidad politecnica de valencia spain

richard j wallace

r wallace c ucc ie

insight center data analytics
department computer science university college cork ireland

miguel salido

msalido dsic upv es

instituto de automatica e informatica industrial
universidad politecnica de valencia spain

federico barber

fbarber dsic upv es

instituto de automatica e informatica industrial
universidad politecnica de valencia spain

abstract
many real life solved constraint programming come uncertain
dynamic environments dynamism original may change time
thus solution found original may become invalid reason dealing
become important issue fields constraint programming
cases extant knowledge uncertain dynamic environment cases
information fragmentary unknown extend concept robustness
stability constraint satisfaction csps ordered domains limited
assumptions need made possible changes present search searches
robust stable solutions csps nature well known meeting
criteria simultaneously desirable objective constraint solving uncertain dynamic
environments present compelling evidence search outperforms
general purpose dynamic csps random instances benchmarks derived
real life

introduction
constraint programming powerful tool solving many artificial intelligence
modeled csps much effort spent increasing efficiency
solving csps reflected literature however techniques assume set
variables domains constraints involved csp known fixed
modeled strong limitation deal real life situations
may come uncertain dynamic environments due dynamism environment
original corresponding modeled csp may evolve addition since
c

ai access foundation rights reserved

fic liment wallace alido barber

real world uncertain nature information dynamism environment may
incomplete erroneous even may exist situations solution holds original
model become invalid changes original
approaches deal situation classified reactive approaches whose
main objective obtain solution similar possible previous solution solution
found changes occurred efficient way ii proactive approaches use
knowledge possible future changes order avoid minimize effects survey
see verfaillie jussien thus proactive approaches applied changes occur
reactive approaches applied changes invalidate original solution
reactive approaches solve csp solution loss consumes computational
time clear inconvenience especially deal short term changes solution loss frequent addition many applications online scheduling
time required calculate solution may long actions taken redress
situation addition loss solution several negative effects modeled situation example task assignment production system several machines could cause
shutdown production system breakage machines loss material object
production etc transport timetabling solution loss due disruption
point may produce delay propagates entire schedule negative effects
probably entail economic loss well
proactive approaches try avoid drawbacks stated therefore highly valued dealing uncertain dynamic environments given advantages
proactive approaches potentially offer restrict heretofore two main types proactive approaches considered distinguished
basis characteristics solutions obtain called robust flexible
see section important survey constraint solving uncertain dynamic environments
verfaillie jussien authors mention possibility developing proactive strategies
combine solution features robustness flexibility state production
solutions time robust flexible every chance resist changes
easily adapted resist obviously desirable objective
present meets objective combining solution robustness stability
solution feature stability special case flexibility
many proactive approaches proposed literature assume existence knowledge
uncertain dynamic environment see section cases difficult characterize
robustness solutions detailed information possible future changes available consider situations added difficulty stemming fact
limited assumptions changes made discussion focuses csps ordered
discrete domains model order elements domain
significant cases common type change may undergo restrictive
modifications bounds solution space assumptions motivations
introduced climent et al moreover examples real life exhibit
type dynamism described specifically temporal reasoning spatial geometric reasoning design temporal delays inherent
feature implies restrictive modifications bounds involved disruptions
instance fu lau varakantham xiao stated unexpected external events
manpower availability weather changes etc lead delays advances completion activities


firobustness tability c onstraint p rogramming dynamism u ncertainty

scheduling spatial geometric reasoning constraints readjusted due measurement errors latter occur design data
completely certain
present searches solutions csps ordered domains
robust stable often repaired value similar
magnitude undergo value loss organized follows next section recalls
general definitions section gives brief account earlier proactive procedures section
presents conception robustness stability exists order elements
domain sections describe main objective finding solutions meet stability
robustness criteria simultaneously section search meets
objectives explained section presents case study scheduling section describes
experiments types csps showing effectiveness present
finding solutions stable robust section gives conclusions

technical background
section give basic definitions used rest following standard
notations definitions literature
definition constraint satisfaction csp represented triple p hx ci
x finite set variables x x x xn set domains dn
variable xi x set values variable take c
finite set constraints c c c cm restrict values variables simultaneously take denote dc set unary constraints associated
definition tuple assignment values subset variables xt x
tuple feasible call means assignment domain values
variables violate constraint complete assignment involves
variables csp solution csp xs subset variables involved
x xs set unassigned variables value assigned variable x
denoted x addition denote ds x x subset domain values
variable x consistent
number possible tuples constraint
q ci c composed elements
cartesian product domains var ci xj var ci dj var ci x set
variables involved ci scope ci
definition tightness constraint ratio number forbidden tuples
number possible tuples tightness defined within interval
inferential processes csps narrow search space possible partial solutions work
use one known used consistency procedure arc consistency
definition csp arc consistent mackworth iff pair constrained variables
xi xj value di exists least one value b dj partial
assignment xi xj b satisfies constraints related xi xj value


fic liment wallace alido barber

domain variable arc consistent eliminated part
solution domain variable arc consistent iff values arc consistent thus
arc consistent iff arcs arc consistent
cij c xi b xj b satisfy cij
following several properties associated solutions come
dynamic environments defined
definition robust solution csp within set solutions one highest
likelihood remaining solution given set changes csp
definition flexible solution anything partial solution complete solution conditional
solution set solutions etc case change easily modified produce solution
verfaillie jussien
specific concept flexibility concept stability
definition solution stable another solution event
change invalidates closer alternative exists modified work
presented hebrard
main difference definition definition former introduces
concept closer solution measurement closeness made calculating distances
solutions concrete information distance equations explained following
sections would remark definition consider alterations original
solution resistance changes hand definition
definition consider changes original solution solution produced
change

related work proactive approaches
several approaches proposed past handling type
classified kind solutions obtain thus techniques search robust
solutions others search flexible solutions survey see verfaillie jussien
section describe techniques search robust solutions limitations
discuss technique searches certain type stable solutions super solutions
searching robust solutions
many earlier approaches search robust solutions use additional information uncertain dynamic environment occurs often involves probabilistic representations one example type information gathered form penalties
values invalidated changes wallace freuder nevertheless probabilistic csp model pcsp fargier lang exists information
associated constraint expressing probability existence techniques focus
dynamism variables csp instance mixed csp model mcsp fargier


firobustness tability c onstraint p rogramming dynamism u ncertainty

lang schiex subsequent uncertain csp model ucsp yorke smith gervet
consider dynamism certain uncontrollable variables take different values
uncertain domains related model uses simple temporal networks adds data
time uncertainties preferences represent starting ending times events stppus rossi venable yorke smith stochastic csp model scsp walsh
considers probability distributions associated uncontrollable variables branching
csp model bcsp considers possible addition variables certain associated gain
current fowler brown
form dependent detailed knowledge
dynamic environment purpose list possible changes required explicit
representation uncertainty often form associated probability distribution
approaches cannot used necessary information unknown many real
however knowledge possible changes limited non existent hence
important need techniques robust solutions kind environment
instance climent et al cope csps model order
domain elements significant specifically csps modeled weighted constraint
satisfaction wcsps larrosa schiex penalizing valid tuples
coverings instead requiring extra detailed dynamism information authors make limited
assumptions concerning changes might occur related nature csps
ordered domains specifically dynamism assumed take form restrictions bounds
solution space make assumptions dynamism
previous wcsp modeling computes robustness feasible neighbours compose
covering surrounds analyzed value respect constraint boundary thus
cases neighbour feasible respect one bound another bound
neighbour feasible solution space reason obtains robustness
approximations high relation constraints
hand described computes feasible assignments respect entire
solution space avoids weakness wcsp modeling explained
comparison approaches found section
searching super solutions
techniques search stable solutions certain type denoted super solutions
presented hebrard goal able repair invalid solution changes
occur minimal changes specified advance since another
require detailed additional information changes interest
compare search introduced
definition solution b super solution loss values variables
repaired assigning values variables changing values b
variables hebrard
csps major focus finding super solutions high
computational cost computing b one reasons analyze
particular super solution case reason given verfaillie jussien
authors state desirable objective limit much possible changes


fic liment wallace alido barber

produced solution motives search super solutions general unusual super solutions variables repaired reason hebrard
developed branch bound finding solutions close
super solutions e number repairable variables maximized called maximizing repairability

extending robustness stability csps ordered domains
section extend original definition solution robustness definition solution
stability definition consider csps ordered domains limited assumptions
made changes derived inherent structure given
framework therefore existence significant order values domains
reasonable assume original bounds solution space restricted relaxed
even cover possible changes bounds solution space delimited
domains constraints csp note possibility solution loss exists
changes original bounds solution space restrictive reason
solution located farther away bounds likely remain solution given
assumptions specialize definition framework follows
definition robust solution csp ordered domains without detailed dynamism
data solution maximizes distance dynamic bounds solution space
furthermore definition stable solutions csps ordered domains made
precise possible define specific notion closeness two solutions
due existent order domain values hebrard measures level dissimilarity
two solutions counting
pn number variables take different values solutions e
hamming distance later hebrard osullivan walsh consider
another similarity measure manhattan distance
p measure uses sum absolute difference values variable solutions ni note unlike hamming
distance manhattan distance requires order elements order calculate absolute
difference values following definition apply manhattan distance notion
stable solutions csps ordered domains
definition given order relationship values set solutions solution
stable another solution iff event change invalidates exists
alternative solution lower manhattan distance manhattan distance
alternative solution
furthermore present extension definition csps ordered domains fixing
maximum manhattan distance original solution repaired solution
called c
definition solution b c super solution loss values variables
repaired assigning values whose manhattan distance respect original
values lower equal c involves changing values b variables
definition holds c super solutions c repairability
main focus stability analysis


firobustness tability c onstraint p rogramming dynamism u ncertainty

searching robust stable solutions general main objective
order robust stable solutions csps ordered domains assumptions
combine robustness stability criteria presented section mentioned calculating
distances required search robust solutions framework however measure
distance dynamic bounds solution space obvious easy derive
since bounds delimited domains constraints csp latter may
extensionally expressed however deductions minimum distances bounds
made feasibility neighbours solution idea first motivated
simple example formalized
example figure shows two solution spaces one convex non convex whose
dynamic bounds marked contiguous lines robust solutions according definition
highlighted note two contiguous feasible neighbours sides
assignment discontinuous lines

convex solution space

b non convex solution space

figure robust solutions different solution spaces
example conclude ensure solution located
least distance bound certain direction n dimensional space tuples
distances lower equal direction feasible therefore number
feasible contiguous surrounding neighbours solution measure robustness
solution face restrictive changes affect original bounds solution space see
definition addition fulfilling main objective finding solutions whose values
high number feasible neighbours close assignment criterion used obtain
solutions high stability value assigned variable least one
feasible neighbour values variable repairable assigned value
lost easily repaired assigning neighbour value since value consistent
rest values assignment regarding stability notion definition note
difference lost value repairable value low since immediate
neighbours fact value difference one minimum possible


fic liment wallace alido barber

set feasible contiguous neighbour values value v differences greater
k respect v increasing decreasing directions respect order
relationship denoted nk x v value v feasible value variable x feasible
partial complete assignment say values feasible mean
feasible respect recall use ds x x subset domain values
consistent feasible partial assignment list operators composed
set paired elements operator pairs operator pair denoted
operator pairs fix order directions analyze thus set refers values greater
v increasing direction set refers values lower v decreasing direction
operator pair operator position j referenced ij instance list
operators operator pair references operator
references operator given notation define nk x v
nk x v w ds x w v v w k



z j v w v z j ds x
first condition equation ensures value w greater lower v according
operator distance values less equal k
second condition ensures values closer v w feasible values
least one value w cannot belong nk x v mentioned previously
set feasible neighbours value contiguous otherwise infeasible
space value another feasible value instance figure b value
belong nk x k value feasible value
therefore outside bounds solution space
general case csps ordered domains assume bounds
dynamic desirable objective contiguous surrounding feasible neighbours
sides reason list operator pairs last condition
equation checks values directions closer v w feasible
values instance figure b nk x k
value note neighbours sides value respect axis section
specific case desirable apply one operator pair due
nature
apply equation domains ordered z monotonic order preserving
function applied instance consider f reezing cold mild warm hot
boiling monotonic function assigns greater values values higher temperatures could
defined example f f reezing f cold f mild f warm f hot
f boiling

objective function
section stated main desirable objective selected value many contiguous feasible neighbours certain direction determine minimum distance
value bound direction approximating distance several values assigned
partial complete assignment compute number neighbours value therefore


firobustness tability c onstraint p rogramming dynamism u ncertainty

define objective function search sum size nk x v
denoted nk x v variable x x incomplete assignment calculate
maximum nk x v v ds x unassigned variable x x xs upper
bound note maximum size set neighbour values variable k
number pair operators thus maximum size set neighbour values
k composed two operator pairs k composed one operator pair note
necessary check values ds x least one size
set maximum possible following equation formalize objective function
used search

f k

x

max nk x v v ds x

x

nk



yxs

xx xs

example robust solutions figures b highlighted solutions f k k since every value assigned solution
two contiguous neighbours sides
next give formal rationale total number neighbours solution sum
feasible surrounding neighbours value solution measure robustness
k convex solution space value zero one two feasible neighbours discount case zero neighbours assignment zero feasible
neighbours must part singleton domain part solutions
need consider values one two feasible neighbours
case solution greater sum one whose assignments feasible neighbour pairs easily seen consider difference solution whose
values one feasible neighbour solution difference equal
number feasible neighbour pairs associated latters assignments
proposition assume two feasible neighbours confers greater robustness
one probabilities single changes independent solution
greater feasible neighbour sum another robust vice versa
non convex case unfortunately possible one assignment zero feasible
neighbours assignments variable one two case cannot
assume proposition however number variables increases becomes
increasingly unlikely variable assignment zero feasible neighbours
associated largest neighbour sum remaining variables
regarding measure stability solution maximizes k repairability see
definition maximizes number variables repaired neighbour value
distance less equal k without modifying variable however obtain robust
solutions maximize sum neighbour values value solution note even
maximization criteria identical mentioned number variables
increases becomes increasingly unlikely non repairable variable associated
largest neighbour sum remaining variables work use
technique finding robust stable solutions csps ordered domains nevertheless
basic units measure criteria different


fic liment wallace alido barber

search
section present finding robust stable solutions according main
objective described section purpose incorporated optimization criterion
branch bound maximizes objective function f k
see equation mentioned function sums nk assigned variable maximum
possible nk unassigned variable note computation upper bound final
total number feasible contiguous neighbours solution
b b nk anytime uses inference process prunes
branches whose objective function value lower equal current maximum function
value obtained referred lb lower bound process stops branches
explored pruned providing solution maximum f k hand
limit search time therefore quality best solution found fixing time cutoff
course time spends searching robust stable solution
provided addition compute maximum possible objective function value
maximum number neighbours variable multiplied number variables
csp denoted ub upper bound thus objective function value solution found
equal ub stops since solution optimal
b b nk branch bound anytime
data p hx ci k scale time cutoff optional
nk lb
partial assignment
xs set variables assigned
nk set contiguous surrounding neighbours
lb maximum f k solutions
ub k x

gac nk p xs nk k lb
repeat
restarting scratch solution found

c scale mi number fails cutoff

time cutoff mgac nk p xs nk k lb c ub
implemented branch bound geometric restart strategy walsh
order reduce repetition fails search due early wrong assignments
thrashing thus time number failures referenced nbf reaches number offails cutoff value condition c checked restarts search
scratch except constraint weights stored dom wdeg heuristic variable selection
boussemart et al value number fails cutoff increased geometrically according scale factor referred scale multiplicative factor referred
implemented two different options carry solution found first
called restarting completion first solution found continues search


firobustness tability c onstraint p rogramming dynamism u ncertainty

completion done assigning huge number representing number fails cutoff
second option called restarting scratch solution found restarts
search scratch restarts number fails cutoff computation constraint weighs
remain instances large domain sizes restarting option effective
avoids spending large amount time specific branch latter happens
checks many domain values variables located low levels search tree objective function partial assignment better current maximum lb
case exists time cutoff could analyze branches tree
may contain solutions better quality
inference process carried gac nk extension
well known ac mackworth b performs generalized arc consistency gac mohr
henderson bessiere specific notation included var c
scope c c original seeksupport function gac searches support
domain value modified function slightly providing set values
analysed parameter function thus values deleted
exist consistent support respect partial assignment seeksupport returns
false function first called values domain variables checking
partial assignment gac later nk assigned variables checking
nk x x gac respect order ensure contiguity values nk
checks consistency subsets ni nk equal one initially
increased one unit least one values ni inconsistent reaches value
k complexity updating ni reduced domains ordered note
case greater lower values candidates set updating
cost composing set contiguous neighbour values gac respect
analyzes objective function f k greater lb
gac returns false
mgac nk performs maintaining gac procedure assigning variable x x value v x value selected gac nk respect
implemented two value selection heuristics lexicographical order selection value
maximizes nk x v starting intermediate values real life
lexicographical selection order effective finding feasible solutions quickly
example scheduling whose domain values represent time units hence importance
selecting low values order exceed maximum fixed makespan however
important select low values heuristic starts intermediate values may offer better
selecting values maximize objective function current node
search tree furthermore since search starts intermediate values likelihood selecting
values located far domain bounds higher
responsible updating set assigned variables xs partial assignment maximum objective function value lb solution found furthermore
stores domains set neighbours variables making assignment note
variable x assigned x contains single value value assigned x gac nk returns false mgac nk carries backtracking
process restores domains set neighbours variables
reduce computational time deal csps convex domains implemented bounds arc consistency discrete csps lhomme main feature


fic liment wallace alido barber

gac nk global arc consistency
data p xs nk k lb nbf
nk nbf
q x c c c x var c var c scope c
q
x c takeelement q
seekd seeksupport x x c found support x c
x
nbf nbf number failures
return false
seekd
q q c c c c c x var c x
x xs

repeat
update ni x x applying equation
seekn seeksupport x ni x x c

seekn false k
nk x x ni x x
return f k lb see equation

consistency technique arc consistency restricted respect bounds
convex domain thus including search affects seeksupport function instead seeking support set values checks minimum
maximum bounds note implementation necessary search robust stable solutions however allows significant reduction search time apply bounds
consistency tentative values assignment set neighbours since
require complete consistency check otherwise could exist infeasible gaps would
break contiguity requirement ensures minimum distances bounds

case study searching robust stable schedules
types real life whose structure provide us specific information
dynamism section analyze well known type literature
scheduling converted satisfiability fixing
maximum makespan modeled csps csp modeling usually consists
associating start end time task particular variable use
start time domain associated variable represents possible time units means
possible fix maximum desired makespan finally duration tasks
order exists fixed means csp constraints
section first explain robustness scheduling measurement units
describe objective function csps model scheduling give example
application


firobustness tability c onstraint p rogramming dynamism u ncertainty

mgac nk maintaining global arc consistency
data p xs nk k lb nbf c ub
nk lb
select x x xs dom wdeg heuristic
xs xs x
save nk
x nbf c
select min v x heuristic lexicographical value order
select v x max nk x v starting intermediate values heuristic
x v
x v
gac nk p xs nk k lb nbf
xs x
solution found
lb f k
lb ub
return true best possible sum achieved
c restarting completion
return false restarting scratch
mgac nk p xs nk k lb nbf c ub
return true
restore x nk
x v
xs xs x
return false

robustness measurement scheduling
section introduce several criteria measuring scheduling robustness
purpose use terms buffers slack refer spare time related tasks
two main factors enhance capability schedule absorb unexpected delays
activities number buffers duration ideally according robustness criterion
buffer time long possible longer longer delays
able absorb reason another straight forward robustness measurement proposed
leon et al slack average schedule combination duration
buffers distribution across schedule provides accurate robustness measure

denoted rslack
slight variant measure introduced surico et al consists
maximizing slack average shorted avg minimizing standard deviation shorted
std schedule regulating importance standard deviation term authors
use parameter called take value interval according authors
considerations


rslack
avg slack std slack





fic liment wallace alido barber

another means measuring robustness system defined kitano related
resistance perturbations certain probability occurrence
extended escamilla et al scheduling probabilities task delays
z discrete set unexpected
unknown robustness measure denoted rf z
delays duration tasks f measures whether schedule still feasible disruption

z z probability
f z satisfiable otherwise f z p z z
instance z z e delays considered probability occurrence

rf z


x

p z f z



zz

objective function scheduling
csp scheduling fact domain values represent time units implications respect measures robustness stability value
solution lost lower values cannot used replacing unfeasible value represent time units already taken place thus incident time point
available neither values lower therefore lower feasible neighbours
improve robustness stability solution csp scheduling
since cannot absorb delays used repairable values given characteristics
main desirable objective search neighbours greater value assigned
fix set operators scheduling illustrated
example consider toy scheduling two tasks duration two time units must executed order listed maximum makespan
allowed six time units figure see associated csp model solution space
variables x x represent start times tasks respectively domain
variables represented discontinuous lines preserves maximum
makespan six time units maximum start time task maximum makespan minus
duration aforesaid task one constraint controlling execution order tasks
must start c x x solution space represented dark
gray area six solutions black dots
specific information given dynamic environment schedule
robust stated section greater number time buffers greater duration robust schedule determine solution modeled
csp meets requirements answer obtained determining feasible contiguous
neighbours greater values located distances less equal k solution however
depending value k prioritize selection schedules large number
short time buffers prioritize selection schedules lower number long time
buffers number greater feasible neighbours associated value variable corresponds
total amount slack located task represented variable thus slack
able absorb delay previous task long without modifying tasks
present schedule robustness feature furthermore slack following task sufficient
absorb delay start following task delayed repairing broken assigned
value long enough buffer associated later task stability feature


firobustness tability c onstraint p rogramming dynamism u ncertainty





x







c











x

figure csp model associated example solution space
example two dimensional csp representing scheduling
two tasks three schedules robust according criteria stated
maximize sum distances greater values located distance one k
value assignment obtain solution shown figure whose sum f k
first number nk x v second nk x v
v v values assigned variables x x respectively note sums
neighbours greater solution values located distance one
f k f k respectively following
figures greater neighbours indicated elipse arrow pointing solution
circled dot associated b figures schedules equivalent solutions marked
shown note greater neighbours indicated figures correspond slack
b figures instance figure b task associated slack duration one
corresponds existence one greater neighbour value assignment figure
hand maximize sum greater neighbors values k three
solutions represented figures classified best solutions according
objective function computation sum neighbours located distance lower
equal k k f k figure f k
figure f k figure note schedules figures
b b one time buffer duration two time units unlike schedule
represented figure b two time buffers one unit thus fixing k
prioritize seek high number time buffers however greater k values prioritize
duration even case distribution may optimal
consider stability solutions small modifications solutions
preferred case possible task starts scheduled time reassigning
start time closer greater neighbour composing another schedule similar
original one therefore search feasible greater neighbours introduces buffers
tasks schedule improving robustness stability obtained schedules
search schedules buffers k time units achieved model
reformulation techniques achieved adding two variables original variable
variables represent start time tasks one variable represents slack following
task variable represents sum slack original starting time


fic liment wallace alido barber







x




slack





x


solution space










slack




b schedule marked solution

figure robust schedule x x example greater neighbours
k







x




slack





x


solution space














b schedule marked solution

figure robust schedule x x example greater neighbours
k







x








x


solution space



slack












b schedule marked solution

figure robust schedule x x example greater neighbours
k



firobustness tability c onstraint p rogramming dynamism u ncertainty

instance let pi starting time task xi thus would add constraint pi pi si
si represents slack associated task xi addition depending maximum desired
duration buffers another constraint may added si k case delay
k timep
units addition objective function express goal maximizing total
slack max ni si must defined
furthermore proactive specific approaches scheduling involve
csp found herroelen leus survey main advantage
presented proactive alternatives scheduling
applied slack values require consistency check requirement necessary
scheduling intermediate non valid slack values possible examples type
scheduling limited machine availability see instance schmidt
cases machines unavailable certain time intervals reason tasks
require resources cannot executed time units happens
scheduling operators workers breaks day moreover
exist reactive approaches schedule activities disruption invalidates
original schedule found example solving dynamic resource constrained project scheduling
rcpsp elkhyari gueret jussien

experimental
section present experiments designed evaluate performance solutions obtained restarting completion procedure referred neighbour
solutions graphs tables throughout section solutions obtained restarting scratch
referred neighbour solutions r experiments done random
benchmarks presented literature random instances generator rbgenerator
benchmarks parser xcsp instances found christophe lecoutres web
page
addition assessing search evaluated two proactive methods
require specific additional information dynamism one wcsp
modeling technique climent et al dynamism assumptions
present work solutions obtained technique referred wcsp mod
solutions evaluated scheduling
consider adaptation scheduling presented section neighbouring values lower magnitude considered proactive
maximizes repairability see section implement technique modified b b nk exchanging mgac nk gac nk mac
gac hebrard respectively solutions obtained technique referred
super solutions addition solutions ordinary csp solver analyzed referred simple solutions order detect whether cases solutions
similar robustness stability
addition added geometric restart restarting completion bounds consistency techniques explained section ordinary csp solver super solutions solver order
provide computational advantages csps wcsp
http www cril univ artois fr lecoutre index html



fic liment wallace alido barber

used solver one used climent et al toulbar necessary
use different solver evaluation technique requires wcsp
solver approaches evaluated values selected lexicographical order
time cutoff fixed seconds experiments run intel core processor
ghz addition geometric restart scale factor fixed multiplicative
factor
evaluation two main features solutions obtained proactive approaches
stability robustness tables section best robustness stability obtained
marked bold accordance assumptions laid previous sections use
robustness stability measures described section note ordinary csp
solver super solutions solver consider dynamism assumptions wcsp
modeling technique presented say consider
possible future restrictive modifications bounds solution space csps ordered
domains regarding stability technique maximizes repairability searches
stable solutions according definition however mentioned analyze
precise concept stability csps ordered domains c repairability see
definition
robustness analysis general csps
section analyze robustness stability solutions obtained wide range
tightness values purpose random csps generated rbgenerator
non convex constraints represented extensionally non convexity domains bounds consistency technique cannot used csps generated variables
domain size binary constraints domain values integer values interval
tightness values analyzed note critical value
tightness csp typology tightness generated random instances
solved k analysis deal general case csps
ordered domains see section fixed set operators search
value selection heuristic see section maximizes
nk x v starting intermediate values
mentioned previously usually feasible compute complete set solutions
csp reason order measure robustness solutions obtained four
approaches sampled closest surrounding neighbours k thus closest surrounding neighbour solution csp means analyzed solution could become
infeasible change magnitude one greater original bound invalidate
neighbour hand neighbour solution csp means restrictive modification would invalidate analyzed solution therefore satisfiability checking
random sample neighbours solutions provides estimation likelihood
solutions remain valid say estimation robustness
sampling feasibility neighbourhood solutions made certain number
random modifications magnitude k values assigned variables solutions
number values assigned variables solutions modified denoted
nbv arm od value nbv arm od sampled neighbours
http carlit toulouse inra fr cgi bin awki cgi toolbarintro



firobustness tability c onstraint p rogramming dynamism u ncertainty

solution analyzed checked feasibility average number feasible neighbours
type solution shown table observed restarting
option dramatically outperformed ordinary csp solver technique maximizes
repairability outperformed wcsp modeling tightness
weakness latter obtains robustness approximations
high relation constraints computes feasible neighbours
constraint boundary thus higher tightness higher likelihood existence
neighbour tuples feasible one constraint domain another one
conflicting situations less frequent unconstrained instances reason tightness
performance modeling better however obtains better robustness
highly unrestricted instances high nbv arm od values regard
restarting completion option provides better restarting scratch
differentiated r unconstrained instances preform similarly higher
tightness values figure b selected nbv arm od emphasize trends robustness
stability function varying tightness
tightness





nbv arm od





average number feasible neighbours sample

simple
super
wcsp
neigh
neigh r








































































































table robustness analysis tightness tightness
stability measurement repairability used see definition measures number variables replaced value located distance one
value assigned without modifying rest values solution stability shown
figure mentioned solution value lost objective closest repairable
values reason consider feasible values k units greater
smaller value assigned since could future solutions manhattan
distance solution original one would exaggeratedly great see section
hand technique maximizes repairability considers value
repairable value fact represents disadvantage searching repairable values
ordered domains observed figure see poor performance
super solutions repairability
would note csps highly restricted stability robustness
solutions obtained evaluated methods similar due fact
cases csps solutions consequently distances solutions
bounds low instances number solutions low
solutions scattered within tuple space likelihood solution located
bounds solution space high reason likelihood variable


fic liment wallace alido barber


neighbours solution
neighbours r solution
simple solution
super solution
wcsp mod solution

repairability













tightness



average sampling number neighbour solutions

stability analysis
neighbours solution
neighbours r solution
simple solution
super solution
wcsp mod solution













tightness



b robustness analysis nbv arm od

figure combined robustness stability tightness tightness
curves shifted improving clarity graph



firobustness tability c onstraint p rogramming dynamism u ncertainty

feasible repairable value near low even case none solutions
assignment feasible neighbours located distance k case solutions
equally robust stable k value
scheduling benchmarks evaluation
section evaluate approaches scheduling benchmarks literature order
determine robustness schedules obtained wide range k values analyzed five
sets job shop csp instances studied sadeh fox instance composed
jobs five tasks five resources job random linear sequence
resources visit exception bottleneck resources visited fixed
number operations order increase resource contention
analysis deals scheduling see section fixed set
operators search value selection done heuristic
values selected lexicographical order regarding proactive technique
evaluated author repairability hebrard made extension
concept breakage loss assigned value scheduling breakage
kind considered delay duration task therefore values
greater value assigned time units considered repairable values reason
evaluation scheduling incorporated condition repairability
proper comparison approaches used values
k parameters following order avoid term repetition assume k
note ordinary csp solver use parameter obtains schedule
value k
measuring robustness schedules obtained used robustness measures introduced section first robustness assessment made measuring total slack whose
duration exceed k denoted ts k addition accurate measure

k see equation measures average total slack minus standard
used rslack
deviation multiplied parameter parameter fixed inside
interval authors consider appropriate parameter another robustness measure used

resistance schedule faced perturbations denoted rf z
see equation z set incidents consist delays durations maxd tasks
used different values maxd k case independently simulated
delays maxd units equal probability entire schedule checked schedule
remained valid stability measurement repairability used see definition
equivalent measurement number buffers schedule denoted
nbb note desired objective cases repairs necessary start time
task delayed short time possible
following figures tables evaluation two sadeh sets
sets obtained similar e ddr e ddr benchmarks order compare robustness stability schedules obtained different numbers
bottlenecks parameters fixed sadeh stated e ddr benchmark
contained one bottleneck hand e ddr benchmark contained two bottlenecks
tables means robustness stability measures scheduling addition measurements shown including number schedules obtained nbs


fic liment wallace alido barber

total number restarts done search nbr total number nodes explored nbn
total number failures nbf figure shows stability robustness measurements

k e ddr horizontal axis
vertical axis mean number buffers mean rslack
figures represents value ratio parameters k
k



nbs

nbr

nbn

nbf

nbb

ts k


rslack
k


rf z



rf z
k



simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r














































table evaluation e ddr benchmark
expected schedules obtained approaches e ddr benchmark
robust stable e ddr benchmark see tables robustness
analysis see k restarting options increased robustness
k units one bottleneck therefore
measure rf z
expected fewer bottlenecks scheduling robust schedule obtained
detailed robustness measures found columns ts k

rs k tables instance largest k value analyzed k
rslack
k rf z
f z
total sum buffer times duration k schedule obtained
restarting completion time units e ddr benchmark time units
e ddr benchmark time units difference regarding stability analysis
k restarting scratch differentiated r found schedules four mean
number buffers nbb one bottleneck two


firobustness tability c onstraint p rogramming dynamism u ncertainty

k



nbs

nbr

nbn

nbf

nbb

ts k


rslack
k


rf z



rf z
k



simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r
















































simple
super
neigh
neigh r














































table evaluation e ddr benchmark



fic liment wallace alido barber


neighbours solution
neighbours solution r
simple solution
super solution



mean number buffers




















k

stability analysis

neighbours solution
neighbours solution r
simple solution
super solution



mean rslacks k




















k

b robustness analysis

figure combined robustness stability k parameter mean measures e ddr benchmark



firobustness tability c onstraint p rogramming dynamism u ncertainty

bottlenecks best case therefore expected fewer bottlenecks scheduling
stable schedule obtained
tables figure see restarting option outperformed ordinary csp solver technique maximizes repairability
furthermore analysis k parameter shows parameters lowest values number buffers schedules found markedly greater
two techniques see figure contrast improvement robustness
respect ordinary solver little marked greater k values comparison
repairability technique shows tendency e ddr benchmark see nbb table

regarding robustness measures plotted figure shown
measure number
tables see correlation rf z

buffers relation expected since random incidents generated measuring rf z
delays one unit time therefore buffers whatever duration greater

likelihood schedule absorb delays one time unit addition ts k rslack
k

rf z k measures correlated recall ts k total slack whose duration

k average minus standard deviation multiplied parameter
exceed k rslack
therefore unless distribution slack poor two values must proportional

k greater proportionality respect
note lower parameter rslack

two robustness measures rf z k measure calculated generating random delays
duration k schedule reason robustness measure strongly related
two aforementioned example relation aforementioned measurement
units observed table k schedules obtained restarting scratch
values schedules
option differentiated r greater numbers buffers rf z

k values
obtained restarting completion option greater ts k rslack
k rf z
means latter greater total slack whose duration exceed k distribution
limited
tables observe measurements correlated robustness
stability important information still extracted k restartingcompletion finds greater mean number solutions nbs k
restarting scratch differentiated r solutions greater k easier
solutions whose objective function better maximum one instance
highly restricted reason mean number solutions found greater high
k values restarting options mean number solutions considerably higher
maximizes repairability effect stronger greater values
k condition repairable value latter technique becomes restrictive
moreover technique considers feasible values domains repairable values
feasibility checking slower techniques assume k neighbours technique
expected mean number restarts nbr much greater restarting scratch
option techniques restart finding first solution consequence
mean number nodes explored nbn mean number failures nbf lower
schedules obtained lowest k value highest number buffers
hand robustness measures greater greater k values depending
dynamic nature would desirable prioritize higher number
buffers short duration lower number buffers long duration two features cannot


fic liment wallace alido barber

maximized thus known possible future delays duration
least time units make sense compute k values lower obtained
time buffers could absorb delay hand known possible future delays
cannot duration greater make sense compute k values greater
time units may decrease number buffers hence information
possible future changes better robustness obtain however even
information unknown obtain schedule certain level robustness
stability setting k intermediate value

neighbours solution
neighbours solution r
simple solution
super solution



mean number buffers



















time

















k

neighbours solution
neighbours solution r
simple solution
super solution



mean number buffers



















time

b k

figure mean number buffers time intervals e ddr benchmark
evaluation consists analyzing best obtained technique
fixed cutoff time however wanted analyze change degree robustness
stability schedules found time evaluation used e ddr benchmark
determined mean instances interval time discretization


firobustness tability c onstraint p rogramming dynamism u ncertainty

seconds figures b mean number buffers found k
k measures shown since similar trends found cases would
highlight seconds simple solution technique better schedules
searches one schedule instance done less equal
seconds remarkable aspect k restarting options
obtains greater number buffer times maximizes repairability
k time intervals see figure
hand figure b represents k shows unstable since
difficult buffers seven time units may happen sacrifices
shorter buffers order one buffer seven time units thus even overall tendency
measure increase time entirely uniform hand
upward shape trend searches super solutions due fact
considers values repairable possible alternative start time task
follows task sharing resource equivalent slack associated
task schedule reason schedules better technique may contain lower
number buffers feature marked greater values k since repairable values
least k unit times greater assigned values therefore unlikely
repairable values close assigned ones
concluded general maximizes repairability finds
solutions lower robustness stability considering closest repairable values
aforementioned reason another disadvantage assumes delays
duration thus values greater value considered repairable values
however consider k neighbours therefore slacks duration lower k
valued objective function contrast repairability objective function
basis evaluation conclude difference performance
two restarting options restarting completion restarting scratch significant sometimes time needed restart scratch solution makes option less effective
restarting completion cases restarting completion option loses time branches
better solutions restarting scratch explores branches instance
random experiments restarting completion provided slightly better generally see table figure b scheduling restarting scratch obtained schedules
bit robust stable lower k values see k figure greater k
values restarting options gave similar

conclusions
extend concept robustness stability csps discrete ordered
domains limited assumptions made changes particular uncertainty statistics probabilities incidences occur
original context reasonable assume original bounds solution
space may undergo restrictive modifications introduced climent et al therefore main objective searching robust solutions solutions maximize
euclidean distances dynamic bounds solution space hand main
objective searching stable solutions terms repairable variables solutions whose
repairable values close possible broken assignments


fic liment wallace alido barber

present search combines criteria robustness
stability framework developed searches solution
maximizes sum contiguous feasible surrounding neighbours distances k less
values solution obtained solutions high probability remaining valid
possible future restrictive changes constraints domains original
robustness criterion high number variables easily repaired
value distance lower equal k undergo value loss stability criterion
evaluated experiments well known scheduling benchmarks
well random csps shown versions outperform
three approaches evaluated ordinary csp solvers technique maximizes
repairability csps wcsps many conditions
real differences robustness solutions might obtained latter occurs
constrained valid solutions respect
two restarting options developed found performance
significantly different although certain situations advantage one
slightly constrained csps obtains solutions greatest number closer
neighbour solutions greatest repairability highest values specific measures
scheduling robustness furthermore shown increasing k large
increase robustness although may happen repairability decreases
instance scheduling schedules obtained lower k values tend maximize
number buffers even size small however computation higher k values tends
give priority duration buffers consequence number buffers obtained
lower therefore depending dynamic nature would desirable
prioritize higher number short buffers lower number long buffers
possible maximize features
extension robustness stability definition csps discrete ordered
domains development search finding robust stable solutions
context useful practical many real life situations undergo restrictive
changes added difficulty information possible future changes limited
non existent even difficult conditions search able provide stable
robust solutions finding solutions located far away dynamic bounds important
face restrictive modifications bounds solution space moreover cases
value lost important replace nearby value order solution
similar possible original one closeness feature handled
searches super solutions

acknowledgments
work partially supported project tin c fpu
program fellowship min de ciencia e innovacion spain wish thank dr christophe
lecoutre dr diarmuid grimes assistance


firobustness tability c onstraint p rogramming dynamism u ncertainty

references
bessiere c constraint propagation foundations artificial intelligence
boussemart f hemery f lecoutre c sais l boosting systematic search weighting constraints proceedings th european conference artificial intelligence
ecai vol p
climent l wallace r j salido barber f modeling robustness csps
weighted csps proceedings th international conference integration artificial intelligence operations techniques constraint programming cpaior pp
elkhyari gueret c jussien n constraint programming dynamic scheduling
hiroshi kise editor iss international scheduling symposium pp
escamilla j rodriguez molins salido sierra menca c barber f robust solutions job shop scheduling operators th ieee international
conference tools artificial intelligence ictai pp
fargier h lang j uncertainty constraint satisfaction probabilistic proceedings symbolic quantitative approaches reasoning uncertainty ec sqaru pp
fargier h lang j schiex mixed constraint satisfaction framework decision
incomplete knowledge proceedings th national conference
artificial intelligence aaai pp
fowler brown k branching constraint satisfaction solutions robust
likely changes proceedings international conference principles
practice constraint programming cp pp
fu n lau h varakantham p xiao f robust local search solving rcpsp max
durational uncertainty journal artificial intelligence
hebrard e robust solutions constraint satisfaction optimisation uncertainty ph thesis university south wales
hebrard e osullivan b walsh distance constraints constraint satisfaction
proceedings th international joint conference artificial intelligence ijcai
pp
herroelen w leus r project scheduling uncertainty survey potentials european journal operational
kitano h towards theory biological robustness molecular systems biology
larrosa j schiex solving weighted csp maintaining arc consistency artificial
intelligence
leon v wu robert h robustness measures robust scheduling job shops
iie transactions
lhomme consistency techniques numeric csps proceedings th international joint conference artificial intelligence ijcai vol pp


fic liment wallace alido barber

mackworth consistency network relations artificial intelligence
mackworth b reading sketch maps proceedings th international joint
conference artificial intelligence ijcai pp
mohr r henderson c arc path consistency revisited artificial intelligence

rossi f venable k yorke smith n uncertainty soft temporal constraint
general framework controllability fuzzy case journal artificial
intelligence
sadeh n fox variable value ordering heuristics job shop scheduling
constraint satisfaction artificial intelligence
schmidt g scheduling limited machine availability european journal operational

surico kaymak u naso dekker r hybrid meta heuristics robust
scheduling erim report series reference ers lis available ssrn
http ssrn com abstract
verfaillie g jussien n constraint solving uncertain dynamic environments
survey constraints
wallace r freuder e stable solutions dynamic constraint satisfaction
proceedings th international conference principles practice constraint programming cp pp
walsh search small world proceedings international joint conference
artificial intelligence vol pp
walsh stochastic constraint programming proceedings th european conference artificial intelligence ecai pp
yorke smith n gervet c certainty closure reliable constraint reasoning incomplete erroneous data journal acm transactions computational logic tocl





