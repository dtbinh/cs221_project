journal artificial intelligence

submitted published

argumentation semantics labeling attacks
generalization labeling arguments
samer nofal

amer n ofal gju edu jo

dept computer science german jordanian university
p box amman jordan

katie atkinson
paul e dunne

k atkinson liverpool ac uk
p e unne liverpool ac uk

dept computer science university liverpool
ashton street liverpool l bx united kingdom

abstract
dung argumentation framework af pair r set abstract arguments
r binary relation called attack relation capturing conflicting arguments labeling enumerating extensions e sets acceptable arguments
set arguments e elements subject labeling
present implemented listing extensions labeling attacks e elements r along arguments specifically concerned enumerating
extensions af number argumentation semantics preferred stable complete
semi stable stage ideal grounded impact particular enumerating
extensions af extended allow attacks attacks demonstrate impact
instantiate example namely argumentation frameworks
recursive attacks afra thereby end unified enumerate extensions
af afra

introduction
computational argumentation covering theory applications attracted major attention
ai community notably last twenty years e g bench capon dunne
besnard hunter rahwan simari modgil toni bex bratko chesnevar dvorak
falappa fan gaggl garca gonzalez gordon leite mozina reed simari szeider torroni
woltran dungs abstract argumentation frameworks afs dung widely studied
model af described pair r set abstract arguments r aa
binary relation called attack relation represent conflicting arguments central notion
afs argumentation semantics set criteria characterise acceptable arguments
define criteria rigorously section different reasons number argumentation
semantics proposed literature explaining reasons detail scope
however see work baroni caminada giacomin excellent
introduction argumentation semantics
argumentation semantics one might multiple distinct extensions defined
section labeling e g dimopoulos magirou papadimitriou doutre
mengin modgil caminada listing extensions developed
arguments e elements target labeled illustrate
enumerate extensions several argumentation semantics labeling attacks e elements r
c

ai access foundation rights reserved

fin ofal atkinson unne

along arguments instead labeling arguments solely particularly interest listing
extensions af extended formalisms allow attacks attacks e g modgil b gabbay
baroni cerutti giacomin guida b throughout term
labeling argumentation semantics distinguished common term
labeling semantics although concepts involve labeling mapping former term
e labeling refers course actions extension enumeration
process classifies arguments might extension excluded
respective extension classification essential order construct concrete
extensions given af later term e labeling semantics refers
describing e constructing extensions labeling mapping
section provide necessary background materials section review explicit selection dominant argumentation semantics preferred stable complete semi
stable stage ideal grounded list extensions labeling arguments
section develop respective argumentation semantics definite
enumerating extensions argumentation framework recursive attacks afra afextended model allows attacks attacks baroni et al b construct
extensions labeling attacks together arguments since af special case afra baroni et al b developed afra list extensions af section
report experiments concerning practical efficiency section concludes
summary review related work

preliminaries
start definition dungs argumentation frameworks dung
definition dungs argumentation frameworks
argumentation framework af pair r set arguments r
binary relation
refer x r x attacks attacked x denote x respectively
subset containing arguments attack resp attacked argument x
extending notation natural way sets arguments
x







x x
x x

given subset
x acceptable w r every x r z
z r
conflict free x x
r
admissible conflict free every x acceptable w r
preferred extension maximal w r admissible set
stable extension conflict free


fia lgorithms rgumentation emantics

figure argumentation framework
complete extension admissible set x acceptable
w r x
stage extension conflict free maximal w r
semi stable extension admissible maximal w r
ideal extension maximal w r admissible set contained every preferred extension
grounded extension least fixed point f x
x acceptable w r
preferred complete stable grounded semantics introduced work dung
whereas stage semantics ideal semantics semi stable semantics presented papers
verheij dung mancarella toni caminada carnielli dunne
respectively give example consider framework depicted figure nodes represent
arguments edges correspond attacks e elements r example b
preferred grounded stable ideal complete semi stable stage extension note
intend example differences semantics
offering explicit means weaken attacks formalisms modgil b gabbay
baroni et al b extend afs attacks e elements r subject
attacks present extension enumeration instance formalisms namely argumentation frameworks recursive attacks afra introduced baroni et
al b
definition argumentation framework recursive attacks afra pair r
set arguments r set pairs x x r
let x z r say source x denoted src x z target
x denoted trg x z
let x r r say directly de f eats x x trg
let x r say indirectly de f eats x src x trg
let x r r say de f eats x directly indirectly defeats x
given subset r
conflict free exist x x defeats
element x r acceptable w r r defeats x
z z defeats
admissible conflict free x x acceptable w r


fin ofal atkinson unne

figure argumentation framework recursive attacks
preferred extension maximal w r admissible set

stable extension conflict free x r x
exists de f eats x
complete extension admissible every element r
acceptable w r belongs
stage resp semi stable extension conflict free resp admissible
x defeats x maximal w r
ideal extension maximal w r admissible set contained every preferred extension
grounded extension least fixed point f x r
x acceptable w r
referring figure b h e grounded stable preferred ideal complete stage
semi stable extension
consider issue expressing afra af let h r afra
corresponding af h r defined r r x x
r x de f eats example corresponding af afra depicted figure
described b c e f g h r e g f e g e g h c h f h g

selection argumentation semantics
section review explicit list number argumentation semantics
extensions af labeling arguments solely particularly subsection recall
nofal atkinson dunne preferred semantics section present
implementation dimopoulos et al stable semantics
modify nofal atkinson dunne produce specific
complete stage semi stable ideal semantics subsections respectively
subsection present implementation building grounded extension
enumerating preferred extensions af
lists preferred extensions af taken work nofal
atkinson dunne shown likely efficient
doutre mengin modgil caminada recall


fia lgorithms rgumentation emantics

implemented present seen extension
backtracking procedure traverses abstract binary search
tree core notion related use five labels must
blank undec informally label identifies arguments might preferred
extension label identifies argument attacked argument blank
label unprocessed argument whose final label decided yet must label
identifies arguments attack arguments undec label designates arguments might
included preferred extension might defended argument
enumerate preferred extensions starts blank default label
arguments initial state represents root node search tree forks
left resp right child e state picking argument blank labeled resp
undec every time argument say x labeled neighbour arguments labels
might change every x label becomes every z x x
label z becomes must process e forking children continues
every x label x blank point captures preferred extension
every x label x belongs undec x label x
subset previously found preferred extension exists
backtracks try preferred extensions important kinds
exploit properties whereby might bypass expanding child search tree thus considerable
time might saved uses two pruning properties
lines skips labeling argument e skips expanding left child
z label z w z
blank label words z labeled later
w z label w must undec thus efficient skip
trying include argument attacked z preferred extension
lines skips labeling argument undec e skips expanding right
child every z current label z must
admissible set say constructed undec
admissible recall preferred extensions maximal admissible sets hence
need label undec
another fundamental issue take account selection blank arguments
labeled point behind adopting selection strategy try achieve preferred extension efficiently critical constructing one extension
therefore line applies following selection options
tries select first blank argument say attacked
attacked must arguments justification selection related
second pruning property used note earlier pick
labeled bigger part search tree avoided recall lead
expanding right child according second pruning property
otherwise picks blank argument say z z
label z maximal intuition maximising number
arguments minimise number blank must arguments thus


fin ofal atkinson unne

figure enumerating preferred extensions af
generated state e child due selecting much closer state
preferred extension captured recall preferred extension achieved
x label x undec
self contained self explanatory figure
however illustrates running af
enumerating stable extensions af
lists stable extensions seen implementation
dimopoulos et al differs two ways


fia lgorithms rgumentation emantics

enumerating preferred extensions af r





























lab must undec blank lab

foreach x lab lab x blank
e pre f erred e pre f erred

call preferred extensions lab
report e pre f erred set preferred extensions
procedure preferred extensions lab begin
lab blank
select lab blank z lab z must
otherwise select lab blank z lab z blank x x
lab x x x z lab x
lab lab
lab
foreach z lab z
foreach z
lab z undec blank
lab z must
w z lab w blank
lab undec
goto line
call preferred extensions lab
z lab z blank undec
lab undec
else
lab lab
x lab x must
x lab x
e pre f erred e pre f erred e pre f erred
end procedure



fin ofal atkinson unne

uses four labels blank must usage labels
outlined one distinction role undec label used overloaded must label meaning must
label used labeling argument say x trying build stable extension without x
argument say x outside candidate stable extension attacked
argument extension hence x labeled must undec
case
p w label w preferred extension
x label x blank must p subset previously
found preferred extension line set w label w stable
extension every x label x blank must
enumerating stable extensions af r





























lab must blank lab

foreach x lab lab x blank
estable estable

call stable extensions lab
report estable set stable extensions
procedure stable extensions lab begin
lab blank
select lab blank z lab z must
otherwise select lab blank z lab z blank x x
lab x x x z lab x
lab lab
lab
foreach z lab z
foreach z
lab z blank
lab z must
w z lab w blank
lab must
goto line
call stable extensions lab
z lab z blank
lab must
else
lab lab
x lab x must
x lab x
estable estable
end procedure



fia lgorithms rgumentation emantics

enumerating complete extensions af
lists complete extensions modification enumerates preferred extensions p w label w preferred extension
x label x blank must p subset
previously found preferred extension line set w label w
complete extension
c every x label x must
c z undec blank label every z label

recall complete extension admissible set every x acceptable respect
x belongs thus condition c ensures admissibility c guarantees completeness
enumerating stage extensions af
lists stage extensions alteration enumerates
preferred extensions uses four labels undec blank usage
labels outlined one distinction role must label used
overloaded undec label meaning undec label
used identifying arguments attack argument argument attacks
argument stage extension necessarily attacked argument extension
constructs conflict free subsets particular line keeps
record conflict free set w label w x label
x blank constructing conflict free subsets decides conflict
free subset say stage extension maximal see lines might
expected argument selection pruning strategies used admissibility semantics
applicable stage semantics conflict free sets therefore pruning
strategy skip labeling argument say undec z
label z undec following property conflict free set say
captured undec conflict free hence
need label undec since recall labels argument undec
trying build stage extension excluding argument selecting next blank argument
labeled consider rule
r select blank argument z label z undec
r otherwise select blank argument x x label x
blank maximal
note correlation r applied pruning strategy earlier label
argument selected r bigger part search tree bypassed
regarding benefit r recall aim argument selection accelerate achieving
goal state conflict free subset maximal x
blank label indeed r minimises number blank arguments maximising number
undec arguments


fin ofal atkinson unne

enumerating complete extensions af r






























lab must undec blank lab

foreach x lab lab x blank
ecomplete ecomplete

call complete extensions lab
report ecomplete set complete extensions
procedure complete extensions lab begin
lab must
x lab x undec blank z x lab z
w lab w
ecomplete ecomplete
lab blank
select lab blank z lab z must
otherwise select lab blank z lab z blank x x
lab x x x z lab x
lab lab
lab
foreach z lab z
foreach z
lab z undec blank
lab z must
w z lab w blank
lab undec
goto line
call complete extensions lab
z lab z blank undec
lab undec
else
lab lab
end procedure



fia lgorithms rgumentation emantics

enumerating stage extensions af r






























lab undec blank lab

foreach x lab lab x blank
estage lab lab undec blank estage

call conflict free sets lab
foreach lab estage
foreach lab estage
x lab x z lab z
estage estage lab
continue next iteration line
foreach lab estage
report x lab x stage extension
procedure conflict free sets lab begin
lab blank
select lab blank z lab z undec
otherwise select lab blank z lab z blank x x
lab x blank x x z z lab x blank
lab lab
lab
foreach z lab z
foreach z
lab z blank
lab z undec
call conflict free sets lab
z lab z blank
lab undec
else
lab lab
estage estage lab
end procedure



fin ofal atkinson unne

enumerating semi stable extensions af
enumerates semi stable extensions reproduction actually firstly builds admissible sets decides
admissible set say semi stable extension maximal see lines

enumerating semi stable extensions af r



































lab must undec blank lab

foreach x lab lab x blank
esemistable lab lab must undec blank
esemistable

call admissible sets lab
foreach lab esemistable
foreach lab esemistable
x lab x z lab z
esemistable esemistable lab
continue next iteration line
foreach lab esemistable
report x lab x semi stable extension
procedure admissible sets lab begin
lab blank
select lab blank z lab z must
otherwise select lab blank z lab z blank x x
lab x x x z lab x
lab lab
lab
foreach z lab z
foreach z
lab z undec blank
lab z must
w z lab w blank
lab undec
goto line
call admissible sets lab
z lab z blank undec
lab undec
else
lab lab
x lab x must
esemistable esemistable lab
end procedure



fia lgorithms rgumentation emantics

constructing ideal extension af
builds ideal extension modification
line records w label w admissible set x label
x blank must however constructs line x
exists admissible set x building set admissible sets
constructed considers admissible set ideal extension

see lines recall ideal extension maximal w r admissible
set contained every preferred extension satisfying condition implies
arguments attacked admissible set see definition
means contained every preferred extension ensure maximal collects
admissible sets descending order larger sets smaller ones consequence
checks collected admissible sets condition starting larger admissible sets
smaller ones
constructing grounded extension af
viewed another implementation described modgil
caminada building grounded extension

labeling attacks generalization labeling arguments
section illustrate enumerate extensions number argumentation semantics labeling attacks together arguments instead labeling arguments solely end
develop listing extensions afra baroni et al b preferred
stable complete stage semi stable ideal grounded semantics subsections
respectively basically generalization
presented previous section hence list extensions af afra
enumerating preferred extensions af afra
enumerates preferred extensions afra generalization
idea five labels must blank undec
blank label initial label arguments attacks blank attack r labeled
indicate might preferred extension argument x labeled
r label trg x attack z r labeled
r label trg z src z blank argument x labeled
implying x might preferred extension r label
src x z r trg z x label z attack labeled undec
try preferred extension excluding attack z label blank undec labeled
must r label trg z src every
time attack labeled labels attacks arguments might change accordingly see
lines selection rule line represents strategy
selects next attack blank labeled rule grounds parallel
selection rule applied enumerating preferred extensions af likewise
applies two pruning tactics


fin ofal atkinson unne

constructing ideal extension af r
































lab must undec blank lab

foreach x lab lab x blank
eideal z eideal



call admissible sets lab
foreach eideal
eideal
report eideal ideal extension exit
procedure admissible sets lab begin
lab blank
select lab blank z lab z must
otherwise select lab blank z lab z blank x x
lab x x x z lab x
lab lab
lab
foreach z lab z
foreach z
lab z undec blank
lab z must
w z lab w blank
lab undec
goto line
call admissible sets lab
z lab z blank undec
lab undec
else
lab lab
w lab w must
x lab x
eideal eideal eideal z lab z
end procedure

constructing grounded extension af r








lab undec lab

foreach w lab lab w undec
x lab x undec x lab
foreach x lab x undec x lab
lab x
foreach z x lab z
report grounded extension w lab w



fia lgorithms rgumentation emantics

figure works afra
lines skips labeling attack e skips expanding left child

z trg z src label f z
w label blank trg w z src z
lines skips labeling attack undec e skips expanding right
child z r trg z src label z must
get general idea see figure shows works
afra depicted figure
enumerating stable extensions af afra
enumerates stable extensions actually modification
lists preferred extensions however two differences
uses four labels blank must usage labels
outlined one difference role undec label used overloaded must label must
label used labeling attack say x trying build stable extension without x
attack say x outside candidate stable extension defeated
attack extension hence x labeled must
preferred extension say p x r x
blank must p subset previously found preferred extension
encounter stable extension x r x blank
must


fin ofal atkinson unne

enumerating preferred extensions afra r



































lab r must undec blank lab

foreach x r lab lab x blank
e pre f erred ar e pre f erred

call preferred extensions lab
report e pre f erred set preferred extensions
procedure preferred extensions lab begin
r lab blank
select r lab blank
z r trg z src lab z must otherwise select r
lab blank z r lab z blank
x src x trg lab x x src x trg z lab x
lab lab
lab
lab src
lab trg
trg
foreach z r src z trg
lab z
foreach z r lab z blank undec trg z src
lab z must
w r lab w blank trg w z src z
lab undec
goto line
call preferred extensions lab
z r lab z blank undec trg z src
lab undec
else
lab lab
w r lab w must
foreach x lab x blank z r trg z x lab z
lab x
x r lab x
e pre f erred
e pre f erred e pre f erred
end procedure



fia lgorithms rgumentation emantics

enumerating stable extensions afra r

































lab r must blank lab

foreach x r lab lab x blank
e stable ar e stable

call stable extensions lab
report e stable set stable extensions
procedure stable extensions lab begin
r lab blank
select r lab blank
z r trg z src lab z must otherwise select r
lab blank z r lab z blank
x src x trg lab x x src x trg z lab x
lab lab
lab
lab src
lab trg
trg
foreach z r src z trg
lab z
foreach z r lab z blank trg z src
lab z must
w r lab w blank trg w z src z
lab must
goto line
call stable extensions lab
z r lab z blank trg z src
lab must
else
lab lab
w r lab w must
foreach x lab x blank z r trg z x lab z
lab x
e stable e stable x r lab x
end procedure



fin ofal atkinson unne

enumerating complete extensions af afra
enumerates complete extensions modification lists preferred extensions achieve preferred extension say p
x r label x blank must p subset
previously found preferred extension however line encounter complete
extension
c z r must label
c exist w r
label w undec blank
b r trg w src w label
thus c ensures admissibility c guarantees completeness
enumerating stage extensions af afra
lists stage extensions rewrite however uses four labels blank undec usage labels outlined
one difference role must label used
overloaded undec label undec label used identifying attacks attack argument attack attack defeats argument attack
stage extension necessarily defeated attack extension
lines finds set conflict free subsets r rather constructing
admissible subsets done set w r label w
reported admissible set x r label x blank
must set w r label w recorded conflict free
set e stage extension candidate x r label x blank
see lines building set conflict free subsets decides conflict
free subset r stage extension x defeats x maximal see
lines stated earlier argument selection pruning strategies used semantics
admissible sets applicable stage semantics conflict free
sets therefore pruning strategy line skip labeling attack undec
e skip expanding right child
z r trg z src trg z src z
label f z undec
property conflict free set say formed undec
conflict free hence need label undec since
selecting next blank attack labeled apply following rule see line
r select blank attack z r trg z src trg z src z
label z undec
r otherwise select blank attack x label x blank src x
trg trg x src maximal


fia lgorithms rgumentation emantics

enumerating complete extensions afra r


































lab r must undec blank lab

foreach x r lab lab x blank
e complete ar e complete

call complete extensions lab
report e complete set complete extensions
procedure complete extensions lab begin
v r lab v must w r lab w undec blank
r trg w src w lab
foreach x lab x blank z r trg z x lab z
lab x
e complete e complete x r lab x
r lab blank
select r lab blank
z r trg z src lab z must otherwise select r
lab blank z r lab z blank
x src x trg lab x x src x trg z lab x
lab lab
lab
lab src
lab trg
trg
foreach z r src z trg
lab z
foreach z r lab z blank undec trg z src
lab z must
w r lab w blank trg w z src z
lab undec
goto line
call complete extensions lab
z r lab z blank undec trg z src
lab undec
else
lab lab
end procedure



fin ofal atkinson unne

aim r maximise gain applied pruning strategy meaning earlier
label selected argument r greater saving terms part
search tree pruned regarding r note goal state e conflict free set reached
x r label x blank thus r tries maximise
number undec attacks arguments implies minimising number blank
attacks arguments
enumerating semi stable extensions af afra
lists semi stable extensions variation
basically constructs admissible sets line records set w label w
admissible set semi stable extension candidate x r
label x blank must constructing set admissible sets
decides admissible set semi stable extension x defeats x
maximal see lines
constructing ideal extension af afra
builds ideal extension particular finds admissible sets lines way however enumerating admissible sets
line builds set
x r admissible set trg x src x
building set admissible sets constructed decides
admissible set ideal extension
see lines recall
ideal extension maximal w r admissible set contained every preferred
extension satisfying condition implies arguments attacks defeated
admissible set see definition means contained every preferred
extension ensure maximal collects admissible sets descending order
larger sets smaller ones consequence checks collected admissible sets
condition starting larger admissible sets smaller ones
constructing grounded extension af afra
builds grounded extension actually generalization

practical efficiency
presented implemented c fedora release
machine processors intel core ghz gb memory evaluation criterion considered average elapsed time measured seconds elapsed time obtained
time command linux present experimental two purposes first
explore efficiency section second purpose confirm
generalized section enumerate extensions labeling attacks together
arguments perform efficiently section enumerate extensions
labeling arguments alone


fia lgorithms rgumentation emantics

enumerating stage extensions afra r




































lab r undec blank lab

foreach x r lab lab x blank
e stage lab lab r undec blank
e stage

call conflict free sets lab
foreach lab e stage
foreach lab e stage
x lab x z lab z
e stage e stage lab
continue next iteration line
foreach lab e stage
report x lab x stage extension
procedure conflict free sets lab begin
r lab blank
select r lab blank
z r trg z src trg z src z lab z undec
otherwise select r lab blank
z r lab z blank x lab x blank src x trg trg x
src x lab x blank src x trg z trg x z src z
lab lab
lab
lab src
lab trg
trg
foreach z r src z trg
lab z
foreach z r lab z blank trg z src
lab z undec
call conflict free sets lab
z r lab z blank trg z src trg z src z
lab undec
else
lab lab
foreach x lab x blank z r trg z x lab z
lab x
e stage e stage lab
end procedure



fin ofal atkinson unne

enumerating semi stable extensions afra r




































lab r must undec blank lab

foreach x r lab lab x blank
e semistable lab lab r must undec blank
e semistable

call admissible sets lab
foreach lab e semistable
foreach lab e semistable
x lab x z lab z
e semistable e semistable lab
continue next iteration line
foreach lab e semistable
report x lab x semi stable extension
procedure admissible sets lab begin
r lab blank
select r lab blank
z r trg z src lab z must otherwise select r
lab blank z r lab z blank x src x trg lab x
x src x trg z lab x
lab lab lab lab src
lab trg
trg
foreach z r src z trg lab z
foreach z r lab z blank undec trg z src
lab z must
w r lab w blank trg w z src z
lab undec goto line
call admissible sets lab
z r lab z blank undec trg z src
lab undec
else
lab lab
r lab must
foreach x lab x blank z r trg z x lab z
lab x
e semistable e semistable lab
end procedure



fia lgorithms rgumentation emantics

constructing ideal extension afra r





































lab r must undec blank lab

foreach x r lab lab x blank
e ideal z ar e ideal



call admissible sets lab
foreach e ideal

x e ideal x
report e ideal ideal extension exit
procedure admissible sets lab begin
r lab blank
select r lab blank
z r trg z src lab z must otherwise select r
lab blank z r lab z blank
x src x trg lab x x src x trg z lab x
lab lab
lab
lab src
lab trg
trg
foreach z r src z trg
lab z
foreach z r lab z blank undec trg z src
lab z must
w r lab w blank trg w z src z
lab undec
goto line
call admissible sets lab
z r lab z blank undec trg z src
lab undec
else
lab lab
w r lab w must
foreach x lab x blank z r trg z x lab z
lab x
x r lab x
e ideal e ideal e ideal z lab z
end procedure



fin ofal atkinson unne

constructing grounded extension afra r















lab r undec lab

foreach w r lab lab w undec
x r lab x undec r trg x src x lab
foreach x r lab x undec r trg x src x lab

lab x
lab src x
lab trg x
trg x
foreach z r trg x src z
lab z
foreach x lab x undec z r trg z x lab z
lab x
report grounded extension w r lab w

compared dynpartix implemented system
dynamic programming dvorak pichler woltran b given af dynpartix basically computes tree decomposition af extensions enumerated
tree decomposition used dynpartix fixed parameter tractable
time complexity depends tree width given af linear size
af dvorak et al b since dynpartix computes extensions preferred stable
complete semantics figures depict respectively efficiency versus dynpartix summary figures likely efficient
dynpartix running experiments represented figures set time
limit seconds every execution runs dynpartix encountered timeouts
enumerating preferred extensions timeouts enumerating complete extensions
timeouts plotted within figures seconds explains steady behavior dynpartix noted particularly figure see performance
contrast behavior present figures respectively profiling reported running times including time needed get corresponding af
afra note process e expressing afra af runs polynomial time
worst quadratic time figures plot running times instances afra randomly
generated r r r r r r instances r
grows probability used setting attacks random generation goes note instances considered
quite small example randomly generated afra r corresponding af r emphasize aim experiments
compare performance performance
mean experiments check scalability although important issue
examined said crucial evaluation consider large frameworks
higher level recursive attacks back experiments case involved
exceeding second time limit occurred enumerating semi stable extensions referring


fia lgorithms rgumentation emantics

figure enumerating preferred extensions instances af p
tracked average elapsed time instances generated
randomly probability p e probability x attacks x

figure note resp encountered resp timeouts bottom
line conclusion figures enumerating extensions afra labeling attacks together
arguments seems efficient enumerating extensions corresponding af via
labeling arguments alone

discussion conclusion
started refining implemented enumerating extensions dungs
argumentation frameworks afs number argumentation semantics preferred stable
complete stage semi stable ideal grounded semantics except stage
grounded semantics share similar core structure basically build admissible sets
order construct extensions case stage semantics actually constructs
conflict free sets purpose listing stage extensions hence applies
slightly different expanding search tree elaborated earlier concerning
grounded semantics presented builds grounded extension polynomial time
furthermore explored practical efficiency profiling performance
running wide spectrum af instances sparse instances dense ones essence
construct extensions total function maps arguments solely
set labels reflecting different states illustrated generalized
total mapping labels attacks together arguments implemented
generalized enumerate extensions afra af extended model
c implementations found http sourceforge net projects argtools files



fin ofal atkinson unne

figure enumerating stable extensions instances af p
tracked average elapsed time instances generated
randomly probability p

figure enumerating complete extensions instances af p
tracked average elapsed time instances generated
randomly probability p



fia lgorithms rgumentation emantics

figure enumerating preferred extensions instances afra p
tracked average elapsed time instances generated
randomly probability p

figure enumerating stable extensions instances afra p
tracked average elapsed time instances generated
randomly probability p



fin ofal atkinson unne

figure enumerating complete extensions instances afra p
tracked average elapsed time instances generated
randomly probability p

figure listing stage extensions instances afra p
tracked average elapsed time instances generated randomly probability p



fia lgorithms rgumentation emantics

figure listing semi stable extensions instances afra p
tracked average elapsed time instances generated
randomly probability p

figure constructing ideal extension instances afra p
tracked average elapsed time instances generated
randomly probability p



fin ofal atkinson unne

figure constructing grounded extension instances afra p
tracked average elapsed time instances generated
randomly probability p

allows attacks attacks words offered unified enumerating extensions
af afra given fact af special case afra baroni et al b
hand showed labeling attacks alongside arguments potentially used
basis enumerating extensions related formalisms allow attacks attacks e g modgil
b gabbay nonetheless confirmed fact extensions
instance formalisms listed working corresponding af however
demonstrated enumerate extensions afra applying labeling directly native
form without compromising running time efficiency omitted soundness completeness
proof presented since follows immediately proof
nofal atkinson dunne preferred semantics presented
handle frameworks self attacking arguments perfectly however
easily modified initial label self attacking argument undec instead
blank instance change necessary made modify line
follows
foreach x
x x r lab lab x undec
else lab lab x blank
general undec label instead blank label default label
argument attack extension self attacking arguments outgoing
attacks simply arguments present conflict recall blank
arguments attacks tried label
future work plan study additional options argument selection intend
evaluate strategies pruning search space


fia lgorithms rgumentation emantics

discuss related work existing doutre mengin modgil
caminada listing preferred extensions engineered towards enumerating
extensions argumentation semantics example papers caminada
presented enumerating semi stable respectively stage extensions building
modgil caminada however present
nofal atkinson dunne enumerating preferred extensions
likely efficient existing nofal et al give
examples related work labeling semantics theory caminada gabbay
defined argumentation semantics total mapping undec
broadly speaking labeled arguments correspond extension say
labeled arguments correspond undec labeled arguments correspond
hard see connection theory caminada gabbay
example capture preferred extension arguments
mapped one labels undec listing works present labelingbased semantics modgil defined labeling semantics extended
af modgil b villata boella van der torre described argumentation
semantics terms attacks arguments work gabbay set argumentation
semantics af extended model barringer gabbay woods among
features allow attacks attacks topic extension computation general study
li oren norman examined approximation versus exact computations whereas
experiments baumann brewka wong liao lei dai evaluated effect
splitting af computation preferred extensions work dondio studied
grounded semantics acceptance status argument varies subgraphs
given af computational complexity argumentation semantics widely studied see e g
dimopoulos nebel toni dunne ordyniak szeider another line
concerns encoding computational afs formalisms solving
respective solver e g besnard doutre nieves cortes osorio
egly gaggl woltran amgoud devred dvorak jarvisalo wallner woltran
cerutti dunne giacomin vallati charwat dvorak gaggl wallner woltran
approaches called reduction methods stress focus
algorithmic implementations argumentation semantics

acknowledgments
thank anonymous reviewers comments improved presentation work

references
amgoud l devred c argumentation frameworks constraint satisfaction
benferhat grant j eds sum vol lecture notes computer science
pp springer
baroni p caminada giacomin introduction argumentation semantics
knowledge engineering review


fin ofal atkinson unne

baroni p cerutti f giacomin guida g b argumentation framework recursive attacks international journal approximate reasoning
barringer h gabbay woods j temporal dynamics support attack networks
argumentation zoology hutter stephan w eds mechanizing mathematical reasoning vol lecture notes computer science pp springer
baumann r brewka g wong r splitting argumentation frameworks empirical
evaluation modgil oren n toni f eds first international workshop theory
applications formal argumentation vol lecture notes computer
science pp springer
bench capon dunne p argumentation artificial intelligence artificial intelligence
besnard p doutre checking acceptability set arguments delgrande
j schaub eds nmr pp
besnard p hunter elements argumentation mit press
caminada computing semi stable semantics mellouli k ed
ecsqaru vol lecture notes computer science pp springer
caminada stage semantics baroni p cerutti f giacomin
simari g eds comma vol frontiers artificial intelligence applications
pp ios press
caminada carnielli w dunne p semi stable semantics j log comput

caminada gabbay logical account formal argumentation studia logica

cerutti f dunne p giacomin vallati sat computing
extensions abstract argumentation tafa second international workshop theory
applications formal argumentation
charwat g dvorak w gaggl wallner j woltran implementing abstract argumentation survey tech rep dbai tr technische universitat wien database
artificial intelligence group
dimopoulos magirou v papadimitriou c kernels defaults even graphs
annals mathematics artificial intelligence
dimopoulos nebel b toni f finding admissible preferred arguments
hard cohn giunchiglia f selman b eds kr pp morgan
kaufmann
dondio p computing grounded semantics subgraphs argumentation
framework empirical evaluation clima xiv workshop computational logic
multi agent systems
doutre mengin j preferred extensions argumentation frameworks query answering computation gore r leitsch nipkow eds ijcar vol
lecture notes computer science pp springer


fia lgorithms rgumentation emantics

dung p acceptability arguments fundamental role non monotonic
reasoning logic programming n person games artificial intelligence
dung p mancarella p toni f computing ideal skeptical argumentation artificial
intelligence
dunne p computational properties argument systems satisfying graph theoretic constraints artificial intelligence
dunne p computational complexity ideal semantics artificial intelligence

dvorak w jarvisalo wallner j p woltran complexity sensitive decision
procedures abstract argumentation brewka g eiter mcilraith eds kr
aaai press
dvorak w pichler r woltran b towards fixed parameter tractable
abstract argumentation artificial intelligence
egly u gaggl woltran answer set programming encodings argumentation
frameworks argument computation
gabbay semantics higher level attacks extended argumentation frames part
overview studia logica
li h oren n norman probabilistic argumentation frameworks modgil
oren n toni f eds first international workshop theory applications
formal argumentation vol lecture notes computer science pp
springer
liao b lei l dai j computing preferred labellings exploiting sccs
sceptically rejected arguments tafa second international workshop theory applications formal argumentation
modgil labellings games extended argumentation frameworks boutilier c
ed ijcai pp
modgil b reasoning preferences argumentation frameworks artificial intelligence
modgil caminada proof theories abstract argumentation
frameworks rahwan simari g eds argumentation artificial intelligence pp
springer
modgil toni f bex f bratko chesnevar c dvorak w falappa fan x gaggl
garca gonzalez gordon leite j mozina reed c simari g szeider
torroni p woltran added value argumentation ossowski ed
agreement technologies vol law governance technology series pp
springer netherlands
nieves j cortes u osorio preferred extensions stable theory
practice logic programming
nofal atkinson k dunne p decision argument systems
preferred semantics artif intell


fin ofal atkinson unne

ordyniak szeider augmenting tractable fragments abstract argumentation
walsh ed proceedings nd international joint conference artificial intelligence ijcai pp
rahwan simari g argumentation artificial intelligence springer
verheij b two approaches dialectical argumentation admissible sets argumentation
stages proceedings eighth dutch conference ai pp
villata boella g van der torre l attack semantics abstract argumentation
walsh ed proceedings nd international joint conference artificial intelligence ijcai pp




