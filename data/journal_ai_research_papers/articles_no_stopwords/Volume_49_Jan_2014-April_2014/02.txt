Journal Artificial Intelligence Research 49 (2014) 79-109

Submitted 07/13; published 01/14

Closure Consistency Logic-Associated Argumentation
Phan Minh Dung
Phan Minh Thang

dung.phanminh@gmail.com
thangfm@gmail.com

Computer Science Information Management Program
Asian Institute Technology
GPO Box 4, Klong Luang, Pathumthani 12120, Thailand

Abstract
Properties logical closure consistency important properties logical
reasoning system. Caminada Amgoud showed every logic-based argument
system satisfies relevant properties. conditions closure contraposition transposition monotonic part underlying logic, ASPIC-like systems
satisfy properties. contrast, logical closure consistency properties
well-understood well-known widely applied systems logic programming
assumption based argumentation. Though conditions closure contraposition
transposition seem intuitive ASPIC-like systems, rule many sensible ASPIC-like
systems satisfy properties closure consistency.
present new condition referred self-contradiction axiom guarantees
consistency property ASPIC-like assumption-based systems implied
properties closure contraposition transposition. develop logicassociated abstract argumentation framework, associating abstract argumentation
abstract logics represent conclusions arguments. show logic-associated
abstract argumentation frameworks capture ASPIC-like systems (without preferences)
assumption-based argumentation. present two simple natural properties compactness cohesion logic-associated abstract argumentation frameworks show
capture logical closure consistency properties. demonstrate
assumption-based argumentation ASPIC-like systems, cohesion follows naturally
self-contradiction axiom. give translation ASPIC-like systems (without preferences) equivalent assumption-based systems keeps self-contradiction
axiom invariant.

1. Introduction
Properties logical closure consistency important properties logical reasoning system. Caminada Amgoud (2007) showed every logic-based argument
system satisfies relevant properties. conditions closure contraposition transposition monotonic part underlying logic,1 properties
fulfilled ASPIC systems. Prakken (2010) later Modgil Prakken (2013)
developed idea ASPIC+, rich complex logic-based argumentation
system.
following example illustrates many sensible ASPIC assumptionbased systems satisfy properties closure consistency neither closed
contraposition transposition.
1. precise definition closure contraposition transposition given section 4.
c
2014
AI Access Foundation. rights reserved.

fiDung & Thang

Example 1 Consider ASPIC-like system = (RS, RD)
1. RD = RD0 RD1 set defeasible rules
(a) RD0 consists two defeasible rules
d1 : p f

d2 : b f

representing defaults birds fly, penguins dont
(b) RD1 consists single defeasible rule
th bh
representing default Thais normally black hair
2. RS = RS0 RS1 set strict rules
(a) RS0 consists three strict rules
p

pb

p Oj(d2 )

Oj(d2 ) means rule d2 applicable,
(b) RS1 consists single strict rule
th
difficult see satisfies properties closure consistency.
Even though neither closed contraposition transposition,
reason rule systems consideration long capture
intuition concerned applications. fact, systems often offer natural representation concerned applications closed contraposition
transposition. illuminate point, imagine another ASPIC-like system containing
strict defeasible rules closed contraposition.2
Suppose interested colour hair concerned Thai individual.
Consider argument : th bh. Let B1 : p f B2 : p b f . Let
CN consequence operator defined strict rules3 . f CN ({f, bh}),
follows closure contraposition property CN, bh CN ({f, f }). Therefore argument B conclusion bh contains B1 , B2 subarguments. B
hence attacks A. B attacked (by undercut) argument C : p Oj(d2 ) B2
attack C, accepted grounded extension. set {A}
admissible. words, draw conclusion hair colour Thais,
system needs resolve completely unrelated controversy flying capabilities
penguins birds.
2. example, adding absurdity rules representing proposition inconsistency implies
every thing, form a, l atom appearing RS RD l literal
set atoms. difficult see closed contraposition (see appendix section 1).
3. precise definition given definition 1.

80

fiClosure Consistency Logic-Associated Argumentation

general, condition closure contraposition creates attack
defeasible argument inconsistency ASPIC systems. words, systems happen contain knowledge several causally independent domains
flying penguins hair colour Thais, closure contraposition interlink
making necessary resolve possible inconsistencies parts systems able answer query, independent whether inconsistencies
causally related query not.4
contrast, argument systems AS, attack {A}
admissible. Controversy flying capabilities penguins effect
acceptance A.
Though closure transposition avoids problem conflict propagation,
adopted many well-known practical systems indiscriminate application
could lead counter-intuitive result many cases. example, consider simplified
version example birds fly penguins dont aspic+ whose set strict rules
closure transposition following strict rules:
app, b f

p f

pb

p app

app ordinary premise app = app.
Therefore rule app p included set strict rules.
Suppose knowledge base consists ordinary premise app stating
default birds fly applicable.
Without information, two arguments are: app B
p.
Accepting ordinary premise app simply says information
default birds fly applied. say anything penguin. closure
transposition implies definitely penguin around (a rather slippery way
make conclusion).
context logic programming, rule app p rather unnatural app
viewed assumption explicit negation operator whose intuitive reading
explicit negation assertion based hard evidence,
another assumption (Gelfond & Lifschitz, 1990).
contrast ASPIC systems, much research done study logical
closure consistency semantics well-known widely applied systems
logic programming assumption based argumentation (Gelfond & Lifschitz, 1988;
Lifschitz, 1999; Bondarenko, Dung, Kowalski, & Toni, 1997). Properties closure
transposition contraposition embraced logic programming assumption based
argumentation. Prakken (2012) observed assumption-based argumentation yields
unintuitive argument unwanted conclusion inference rules satisfy transposition property. hence natural ask
whether conditions implied conditions closure contraposition transposition still guaranteeing important properties logical closure
consistency,
4. Pollock (1995) Wu (2012) pointed classical propositional proof systems propagate
conflicts throughout knowledge bases unrelated parts.

81

fiDung & Thang

whether logical closure consistency properties could stated studied
general framework generalizing assumption-based ASPIC-like systems possibly
logic-based argument systems ?
present paper new condition referred self-contradiction axiom5
guarantees consistency complete extension semantics implied
conditions closure contraposition transposition time,
includes systems could avoid problem conflict-propagation. example 1
AS, satisfy self-contradiction axiom.
turns consistency closure properties logic-based argument systems could studied within general logic-associated abstract argumentation framework,
obtained associating abstract argumentation abstract logics represent conclusions arguments. demonstrate logic-associated abstract argumentation frameworks capture ASPIC-like systems (without preferences) assumption-based argumentation. present two simple natural properties compactness cohesion
logic-associated abstract argumentation frameworks show capture logical
closure consistency complete extension semantics. demonstrate
assumption-based argumentation ASPIC-like systems cohesion follows naturally
self-contradiction axiom.
give translation ASPIC-like systems (without preferences) equivalent assumption-based systems keeps self-contradiction property invariant.
paper structured follows. section 2 recall abstract argumentation
Tarski abstract logics. introduce section 3 framework abstract argumentation associated abstract logics sentences abstract logics represent
argument conclusions. present section two simple natural conditions compactness cohesion show ensure satisfaction properties logical
closure consistency complete extensions. sections 4, 5 show compactness
cohesions could captured naturally ASPIC-like systems assumption-based argumentation. introduce section 4 fundamental axiom self-contradiction show
connections properties closure contraposition transposition. provide section 6 transformation ASPIC-like systems equivalent
assumption-based framework. section 7, discuss recent systems based
Tarskis abstract logics. conclude.6

2. Preliminaries
abstract argumentation framework (Dung, 1995) defined simply pair (AR, att)
set arguments AR att AR AR (A, B) att represents attack
argument argument B. set argument attacks argument
argument attacks A. attacks another set attacks argument
. conflict-free attack itself. conflicting attacks itself.
argument acceptable wrt set arguments attacks attack A.
admissible conflict-free counter-attacks attack it. semantics
5. intuitive reading self-contradiction X causes contradiction X contradicts
itself.
6. preliminary extended abstract paper published Dung Thang (2011).

82

fiClosure Consistency Logic-Associated Argumentation

abstract argumentation determined acceptability arguments various
associated notions extensions. complete extension admissible set containing every
argument acceptable wrt it. Complete extensions could viewed conflict-free fixed
points characteristic function F : 2AR 2AR defined F (S) = set acceptable
arguments wrt S. Preferred extensions maximal conflict-free fixed points F
least fixed point F called grounded extension. could many preferred
extensions, exists unique grounded extension. stable extension conflict-free
set arguments attacks every argument belonging it.
Amgoud Besnard (2009) proposed use Tarskis abstract logic argumentation characterized simply consequence operator.
Given language L well-formed formulas, Tarski abstract logic (Amgoud & Besnard,
2009) defined consequence operator CN: 2L 2L following axioms
satisfied:
1. (Expansion)

X CN (X)

2. (Idempotence)
3. (Finiteness)

CN (CN (X)) = CN (X)

CN (X) = {CN (Y ) | X finite }

4. (Absurdity)

CN ({x}) = L x L

5. (Coherence)

CN () 6= L

introduce consequence operator set strict inference rules.
strict rule7 form
1 , . . . , n
1 , . . . , n , L.
Definition 1 Let RS set strict rules. Define consequence operator CNRS :
2L 2L follows: set X L, CNRS (X) smallest set
1. X CNRS (X),
2. rule 1 , . . . n RS, {1 , . . . n } CNRS (X) CNRS (X).


3. Associating Abstract Argumentation Abstract Logics
Intuitively, argument proof conclusion. many cases, proofs constructed following proof theory formal logics. logics could nonmonotonic. notions closure consistency defined according monotonic
parts underlying logics.
Many logics underlying argumentation systems assumption-based argumentation
ASPIC-systems always impose absurdity axiom. motivates slight
generalization Tarski abstract logics following definition.
7. often referred inference rules assumption-based argumentation.

83

fiDung & Thang

Definition 2 Given language L, abstract logic defined pair (CN, CON RA)
CN: 2L 2L represents consequence operator CON RA 2L collection
contradictory sets following axioms hold:
1. CN satisfies expansion, idempotence finiteness axioms.
2. (Weak Absurdity) CON RA superset belongs CON RA.8
3. (Weak Coherence) CN () 6 CON RA.
Given abstract logic (CN, CON RA), X closed iff X = CN (X). set X
CON RA said contradictory.
set X L said inconsistent iff closure CN (X) contradictory.9 X said
consistent iff inconsistent. X minimal inconsistent iff X inconsistent
proper subset X consistent.10
Definition 3 say abstract logic satisfies
strong absurdity axiom CON RA 6= X CON RA, CN (X) = L.

follows immediately abstract logic Tarski abstract logic satisfies
strong absurdity axiom x L {x} inconsistent.11
Example 2 Let RS0 = { wr; go; b hw; hw} set strict rules,12
L language consisting literals whose atoms occur rules RS0 . Define
AL0 = (CN0 , CON RA) follows:
X CON RA iff X contains pair literals {l, l}.
CN0 consequence operator defined RS0 .
illustration, CN0 () = {wr, go}, CN0 ({m}) = {wr, go, m, hw} CN0 ({m, b}) =
{wr, go, m, hw, b, hw}. Hence set {m, b} inconsistent contradictory.
difficult see AL0 abstract logic. CN0 ({hw, hw}) =
{hw, hw}, follows AL0 satisfy strong absurdity axiom.
8. Note CON RA could empty case definite logic programs L consists
positive literals. Nonetheless, CON RA 6= L CON RA.
9. words, set sentences X inconsistent contradiction could derived though
contradiction may present directly X (i.e. inconsistent set may contradictory).
10. proper subset X subset X 6= X.
11. Tarskian one, abstract logic needs satisfy absurdity coherence. {x}
inconsistent, CN ({x}) contradictory. Since strong absurdity satisfied, CN (CN ({x})) = L.
idempotence, CN (CN ({x})) = CN ({x}). Hence CN ({x}) = L. coherence holds.
weak coherence axiom abstract logic, CN () 6 CON RA. Due strong absurdity,
CON RA 6= . Due weak absurdity, fact CON RA 6= , follows L
CON RA. Hence CN () 6= L.
12. rules taken example Caminada Amgoud (2007) wr = John wears
something looks wedding ring, = John married, hw = John wife, go =
John often goes late, b = John bachelor.

84

fiClosure Consistency Logic-Associated Argumentation

Inspired Amgoud Besnards idea (2009), use abstract logics represent
conclusions arguments difference them, specify detail structure
individual arguments.
Definition 4 logic-associated argumentation framework language L
quadruple (AF, , AL, Cnl)
1. AF = (AR, att) abstract argumentation framework,
2. AL = (CN, CON RA) abstract logic L,
3. Cnl : AR L assigns argument A, conclusion Cnl(A) L,
4. partial order13 AR B means subargument B
arguments C AR, C attacks C attacks B.
Remark 1
set arguments, Cnl(S) denotes set conclusions
arguments S.
set subarguments denoted Sub(A). set arguments S,
Sub(S) contains subarguments arguments S.

next give example logic-associated argumentation framework.
Example 3 Let LAF0 = (AF0 , 0 , AL0 , Cnl) AL0 defined example 2
AF0 = (AR0 , att0 )
1. arguments AR0 constructed rules set strict rules RS0
example 2, set defeasible rules RD = {wr m; go b}. 6
arguments14 :
A1 : wr, A3 : wr m, A5 : wr hw.
A2 : go, A4 : go b,

A6 : go b hw.

Attack relation: A5 attacks A6 vice versa. attacks. Let
att0 = {(A5 , A6 ), (A6 , A5 )}.
2. subargument relation 0 reflexive transitive closure A1 A3 A5
A2 A4 A6 .
Definition 5 Let LAF = (AF, , AL, Cnl), AL = (CN, CON RA), logic-associated
argumentation framework.
1. LAF said satisfy closure-property complete extension E AF,
Cnl(E) closed wrt AL.
13. partial order reflexive, asymmetric transitive relation.
14. precise definition see definition 12.

85

fiDung & Thang

2. LAF said satisfy consistency-property complete extension E
AF, Cnl(E) consistent wrt AL.
Example 4 (Continuation example 3)
grounded extension AF0 GE = {A1 , A2 , A3 , A4 }. two preferred
extensions E1 = {A1 , A2 , A3 , A4 , A5 } E2 = {A1 , A2 , A3 , A4 , A6 }.
Cnl(GE) = {wr, go, m, b} CN0 (Cnl(GE)) = Cnl(GE) {hw, hw}. Hence
set conclusions arguments grounded extension neither closed consistent wrt abstract logic AL0 . Hence LAF0 satisfies neither closure-property
consistency-property.
easy see sets conclusions arguments two preferred
extensions neither closed consistent either.
Example 5 (Continuation example 4)
Let RS1 = RS0 {hw m, hw b}. consequence operator wrt RS1
denoted CN1 . Let AL1 = (CN1 , CON RA) AF1 = (AR1 , att1 )
AR1 = AR0 {A7 , A8 } A7 : A5 b A8 : A6 m,15
att1 = {(A7 , A4 ), (A7 , A6 ), (A7 , A8 ), (A8 , A3 ), (A8 , A5 ), (A8 , A7 )},
1 reflexive transitive closure 0 {A5 A7 , A6 A8 }.
grounded extension AF1 GE = {A1 , A2 }. Two preferred extensions AF1
E1 = {A1 , A2 , A3 , A5 , A7 } E2 = {A1 , A2 , A4 , A6 , A8 }.
difficult see sets Cnl(GE ) = {wr, go}, Cnl(E1 ) = {wr, go, m, hw, b},
Cnl(E2 ) = {wr, go, b, hw, m} closed consistent.
Let LAF1 = (AF1 , 1 , AL1 , Cnl). closure consistency properties satisfied
LAF1 .
end section, assume arbitrary fixed logicassociated framework LAF = (AF, , AL, Cnl).
turns closure consistency properties based intuitive
idea base argument.
Definition 6 Let argument BA finite set subarguments A. BA
said base following conditions satisfied:
1. Cnl(A) CN (Cnl(BA))
2. argument C, C attacks iff C attacks BA.
easy see argument A, {A} base A.
example 3, though Cnl(A5 ) CN0 (Cnl(A3 )), {A3 } base A5 since A6
attacks A5 A6 attack A3 .
Note empty set base arguments A1 A2 .
contrast, example 5, {A3 } base A5 A7 {A4 } base A6 A8 .
15. i.e. A7 wr hw b, A8 go b hw m.

86

fiClosure Consistency Logic-Associated Argumentation

Definition 7
1. argument said generated set arguments
base BA BA Sub(S).
2. set arguments generated denoted GN(S).
follows immediately
Lemma 1 Let set arguments. following assertions hold:
1. argument A, generated {A}.
2. Sub(S) GN (S).
3. Cnl(GN (S)) CN (Cnl(Sub(S))).
4. CN (Cnl(GN (S))) = CN (Cnl(Sub(S))).
5. argument C, C attacks GN (S) iff C attacks S.
Proof See appendix section 3.
Theorem 1 Let E complete extension. GN (E) = E
Proof See appendix section 3.
Theorem 1 motivates following definitions 8, 9.
Definition 8 say logic-associated argumentation framework LAF compact
set arguments S, Cnl(GN (S)) closed.
argumentation framework example 3 compact since = {A3 }, GN (S) =
{A1 , A2 , A3 } Cnl(GN (S)) = {wr, go, m} closed since CN ({wr, go, m}) = {wr, go, m, hw}.
contrast, argumentation framework example 5 compact. example,
GN (S) = {A1 , A2 , A3 , A5 , A7 } (wrt LAF1 ) Cnl(GN (S)) = {wr, go, m, hw, b}
closed consistent.
Theorem 2 compact logic-associated argumentation framework satisfies closureproperty.
Proof. Let E complete extension. compactness, follows Cnl(GN (E))
closed. theorem 1, Cnl(E) closed.
lemma 1, follows LAF compact iff Cnl(GN (S)) = CN (Cnl(Sub(S))) iff
CN (Cnl(Sub(S))) Cnl(GN (S)). proved
Lemma 2 LAF compact iff set arguments, CN (Cnl(Sub(S))) Cnl(GN (S))
Notation 1 Abusing notations simplicity, often refer set arguments
inconsistent (resp. consistent) Cnl(Sub(S)) inconsistent (resp. consistent).
87

fiDung & Thang

Intuitively, inconsistency among set arguments indicates possible conflict among
generated arguments. insight motivates following definitions.
Definition 9 logic-associated argumentation framework LAF said cohesive
inconsistent set argument S, GN (S) conflicting.
illustration, consider logic-associated argumentation framework example 3.
Let = {A3 , A4 }. clear inconsistent. difficult see
base argument {A5 , A6 } contains argument itself. Therefore GN (S) =
{A1 , A2 , A3 , A4 }. GN (S) thus conflict-free. framework LAF0 hence cohesive.
Note argumentation framework LAF1 example 5 compact cohesive.
Theorem 3 Let LAF cohesive logic-associated argumentation framework. LAF
satisfies consistency-property.
Proof Let E complete extension. Suppose Cnl(E) inconsistent. cohesion
LAF, follows GN (E) conflicting. theorem 1, E conflicting. Contradiction.
Hence Cnl(E) consistent.
follows immediately theorems 2 3:
Corollary 1 Let LAF compact cohesive logic-associated argumentation framework. LAF satisfies closure- consistency-properties.
next sections, show ASPIC-like systems (without preferences) assumptionbased argumentation instances logic-associated argumentation frameworks.
introduce axiom self-contradiction guarantee cohesion (and consistency)
systems.

4. Argumentation Strict Defeasible Rules
assume language L literals literal atom explicit negation
atom a. set literals said contradictory contains pair a, a.
important note identify a. X L, denote X = {l | l
X}.
defeasible rule form
1 , . . . , n
1 , . . . , n , L.
Definition 10 rule-based argumentation system pair = (RS, RD) set RS
strict rules set RD defeasible rules CNRS () contradictory.
following definition 11 identifies abstract logic underlying rule-based argumentation system = (RS, RD).
88

fiClosure Consistency Logic-Associated Argumentation

Definition 11 Let = (RS, RD) rule-based argumentation system. Define
ALAS = (CNAS , CON RAAS )
CON RAAS collection contradictory sets CNAS = CNRS .
follows immediately
Lemma 3 ALAS abstract logic.
recall arguments attack relations rule-based argumentation systems
introduced Caminada Amgoud (2007), Prakken (2010), Pollock (1987), Modgil
Prakken (2013).
Definition 12

1. Rules form / , arguments conclusion .

2. Let r strict/defeasible rule form 1 , . . . , n / , n 0. suppose A1 , . . . , , n 0, arguments conclusions 1 , . . . , n respectively.
A1 , . . . , / argument conclusion last rule r.
3. Every argument constructed applying finitely many times two steps.
next introduce key notations.
Notation 2
1. strict argument argument containing defeasible rule. Nonstrict arguments called defeasible arguments.
2. basic defeasible argument argument whose last rule defeasible one,
i.e. form A1 , . . . , .
basic defeasible argument B, last rule B denoted Lr(B).
3. B subargument argument form A1 , . . . , / , denoted
B A, B = B subargument Ai .
Remark 2 conclusion argument denoted Cnl(A).
Remark 3 Arguments form A1 , . . . , / often viewed proof
trees root labelled children root roots subtrees
A1 , . . . , . Note n = 0, proof tree consists root.
Illustrations argumentation systems based strict defeasible rules given
examples 3, 5.
following notion attack adopted articles Caminada Amgoud (2007),
Prakken (2010), Pollock (1987), Modgil Prakken (2013).
Definition 13 argument attacks argument B (on B) B basic defeasible
subargument B one following conditions satisfied:
89

fiDung & Thang

1. (Undercutting) Cnl(A) = Oj(Lr(B )) defeasible rule r, Oj(r) atom
denoting rule r applicable.
2. (Rebutting) Cnl(A) = Cnl(B ).
Remark 4 simplicity, identify rule-based argumentation system logicassociated argumentation framework (AFAS , , ALAS , Cnl) AFAS argumentation framework obtained according definitions 12,13.
Theorem 4 Rule-based argumentation systems compact.
Proof See appendix section 4.
following lemma reveals simple important relation arguments
basic defeasible subarguments.
Lemma 4 Let argument BD set basic defeasible subarguments A.
Cnl(A) CNAS (Cnl(BD)).
Proof See appendix section 4.
introduce fundamental condition underlying cohesion rule-based argumentation.
Definition 14 abstract logic ALAS said satisfy
self-contradiction axiom minimal inconsistent set X L : X CNAS (X).16

example illustrates intuition self-contradiction axiom using
famous birds fly penguins dont-example.
Example 6 Let = (RS, RD) RD consists two defeasible rules:
d1 : p f

d2 : b f

RS consists three strict rules
r0 : p

r1 : p b

r2 : p Oj(d2 )

Oj(d2 ) atom stating rule d2 applicable.
obvious set strict rules RS closed transposition.
straightforward see CNAS ({f, f }) = {f, f } =
6 L. Hence underlying abstract
logic ALAS satisfies neither strong absurdity axiom closure transposition
property.17
16. intuitive reading self-contradiction X causes contradiction X contradicts
itself.
17. See section 4.1 precise definitions closure transposition contraposition relationships strong absurdity self-contradiction

90

fiClosure Consistency Logic-Associated Argumentation

difficult see ALAS satisfies self-contradiction axiom.18
difficult see satisfies properties closure consistency.
following theorem shows self-contradiction sufficient cohesion.
Theorem 5 Suppose ALAS satisfies self-contradiction axiom. cohesive.
Proof See appendix section 4.
follows immediately corollary 1
Corollary 2 Suppose ALAS satisfies self-contradiction axiom. satisfies
closure- consistency-properties.
next relate theorem 5 corollary 2 results Caminada Amgoud
(2007), Prakken (2010), Modgil Prakken (2013).
4.1 Sufficient Conditions Self-Contradiction Abstract Logics ALAS
simplicity, possibilities misunderstanding, often write respectively
CN , CON RA AL CNAS , CON RAAS ALAS section.
first recall definitions closure contraposition transposition
articles Caminada Amgoud (2007), Prakken (2010), Modgil Prakken (2013).
Definition 15

1. AL said

closed contraposition set X L, X CN (X)
CN (X \ {} {}).
2. set strict rules RS said
closed transposition rule 1 , . . . , n RS, rules
form 1 , . . . , i1 , , i+1 , n belong RS.
relations closure contraposition axioms self-contradiction
strong absurdity illuminated following lemma.
Lemma 5
1. AL closed contraposition, AL satisfies strong absurdity
axiom.
2. AL satisfies strong absurdity axiom AL satisfies self-contradiction axiom.
18. Let minimal inconsistent set. show CNAS (S). contradictory minimality
implies = {a, a} L. self-contradiction axioms holds obviously. Suppose
contradictory. Hence pair {a, a} CNAS (S) atom a. difficult
see CNAS (S) = CNAS () S. Therefore CNAS (S) \ CNAS () = {p, b, Oj(d2 )}. follows
{a, a} CNAS () 6= {a, a} 6= . minimality S, consists exactly one element.
Therefore : CNAS (S).

91

fiDung & Thang

Proof See appendix section 4.
relations closure transposition self-contradiction axiom
illuminated following lemma.
Lemma 6 Let = (RS, RD) set strict rules RS closed transposition. ALAS satisfies self-contradiction axiom.
Proof See appendix section 4.
following example shows reverses assertions lemmas 5, 6 hold
general.
Example 7 Let L = {a, a, b, b}. Let CONTRA set contradictory sets
L.
1. X L, define CN (X) = X. obvious abstract logic AL =
(CN, CON RA) satisfies self-contradiction axiom strong absurdity
axiom.
2. Consider set strict rules RS consisting normal rule b together
absurdity rules form x, x x {a, b}, L. Let CN
consequence operator wrt RS.
obvious AL = (CN, CON RA) satisfies strong absurdity axiom (and
hence self-contradiction axiom). b CN ({a}), 6 CN ({b}) =
{b}, follows AL closed contraposition.
clear set strict rules closed transposition.
3. Consider set strict rules RS consisting two strict rules b b
a. clear rule set closed transposition corresponding
consequence operator satisfy strong absurdity axiom.
following picture illustrates relationships key properties rule-based
argumentation.

Figure 1:

92

fiClosure Consistency Logic-Associated Argumentation

5. Assumption-Based Argumentation
Given logical language L, assumption-based argumentation (ABA) framework (Bondarenko et al., 1997) triple F = (R, A, ) R set inference rules form
(total) one-one
1 , . . . n (for n 0), L set assumptions,
mapping L, x referred contrary x following
properties satisfied:
assumptions appear heads rules R,
contraries assumptions assumptions,
L contains explicit negation operator CNR () contradictory wrt
, i.e. L, {, } 6 CNR ().
following edition birds fly penguins dont example provides illustration.
Example 8 F = (R, A,

) R consists rules

ab1 , p f

ab2 , b f

p

pb

p ab2

= {not ab1 , ab2 } ab1 = ab1 , ab2 = ab2
identify structure abstract logics underlying ABA frameworks below.
5.1 Assumption-based Abstract Logics
set X L said contradictory iff
X contradictory wrt


, i.e. exists assumption {, } X,

X contradictory wrt ,19 i.e. exists L {, } X.
Definition 16 Let F = (R, A,

) ABA framework. Define

ALF = (CNF , CON RAF )

1. CNF = CNR .
2. CON RAF set contradictory sets.
follows immediately
Lemma 7 ALF abstract logic.
19. L contains explicit negation operator .

93

fiDung & Thang

Remark 5 simplicity, possibilities misunderstanding, often write
section CN (S) CON RA CNF (S) CON RAF respectively.
adapt self-contradiction axiom assumption-based argumentation below.
Definition 17 Let F ABA framework. say abstract logic ALF satisfies

ab-self-contradiction axiom20 inconsistent set assumptions X,
X CNF (X).
5.2 Closure Consistency Assumption-Based Argumentation
first recall definitions arguments attack relation associated ABA framework.
Definition 18
1. assumption argument whose support conclusion
{}, respectively.
2. Let 1 , . . . n rule. suppose A1 , . . . , arguments
conclusions 1 , . . . , n respectively. A1 , . . . , argument whose
conclusion whose support union supports A1 , . . . ,
3. Every argument constructed applying finitely many times two steps.
Remark 6 Arguments often viewed proof trees. Arguments form A1 , . . . ,
proof trees root labelled children root roots
subtrees A1 , . . . , . Note n = 0, proof tree consists root.
assumption proof tree consists root labelled
Notation 3

1. support argument denoted supp(A).

support set arguments union supports individual
argument denoted supp(S).
2. conclusion argument denoted Cnl(A).
Definition 19
supp(B).

1. argument attacks argument B Cnl(A) =

2. say B subargument argument form A1 , . . . , Ak , denoted
B A, B = B subargument Ai .
Remark 7 simplicity, identify assumption-based framework F logicassociated argumentation framework (AFF , , ALF , Cnl) AFF argumentation
framework generated F (according definitions 18, 19).
difficult see
Theorem 6 ABA frameworks compact.
20. ab stands assumption-based.

94

fiClosure Consistency Logic-Associated Argumentation

Proof See appendix section 5.

Theorem 7 Let F ABA framework. ALF satisfies ab-self-contradiction axiom,
F cohesive.
Proof See appendix section 5.
follows immediately theorems 6,7, corollary 1
Corollary 3 Let F ABA framework. ALF satisfies ab-self-contradiction axiom,
F satisfies closure- consistency-properties.
5.3 Logic Programming
Logic programming could classified three different classes definite programs,
normal programs extended programs increasing complexity. Bondarenko, Dung,
Kowalski Toni(1997) showed logic programs instances assumption-based
argumentation. discuss underlying abstract logics classes selfcontradiction axiom.
5.3.1 Definite Logic Programs
definite logic program simply assumption-based argumentation framework F =
(R, A, ) based language L
1. L consists ground atoms set assumptions empty.
2. Rules R form a1 , . . . , h h, a1 , . . . , atoms L.
contradiction L, CON RAF = . ab-self-contradiction axiom
hold trivially. Since attack arguments, extension set
arguments. closure consistency properties hold obviously.

5.3.2 Normal Logic Programs
normal logic program assumption-based argumentation framework F = (R, A,
based language L

)

1. L consists atoms form a, b, . . . together negation-as-failure literals
form atom.
2. Assumptions negation-as-failure literals whose contraries a.
3. Rules R form l1 , . . . , ln h h atom l1 , . . . , ln literals
L.
95

fiDung & Thang

CON RAF consists subsets L contain pair a, atom a.
ab-self-contradiction axiom holds obviously.21 closure consistency properties hence hold extensions normal programs.

5.3.3 Extended Logic Programs
extended logic program (Gelfond & Lifschitz, 1990; Lifschitz, 1999) assumptionbased argumentation framework F = (R, A, ) based language L
1. L consists atoms form a, b, . . . explicit negations a, b, . . . together
negation-as-failure literals form l l classical literal (i.e.
atom explicit negation atom).
2. Assumptions negation-as-failure literals l whose contraries l.
3. R consists rules form l1 , . . . , ln h h classical literal
l1 , . . . , ln literals L
CON RAF consists subsets L contain pair a, atom
pair l, l classical literal l.
theorems 6,7 corollary 3, follows immediately
Corollary 4 Let F extended logic program. CNF () contradictory wrt
ALF satisfies ab-self-contradiction axiom F compact cohesive hence
satisfies closure consistency properties.

6. Translating Rule-Based Argumentation Assumption-Based
Argumentation
showed previous two sections self-contradiction axioms sufficient
natural conditions ensuring closure consistency properties assumptionbased rule-based argumentation.
section, argue self-contradiction axiom rule-based systems
subsumed assumption-based self-contradiction axiom giving translation
rule-based systems equivalent assumption-based ones. generally, translation suggests rule-based argument systems (without preferences) subsumed
assumption-based argumentation.
Let = (RS, RD) arbitrary fixed rule-based argumentation system
r RD, rule RS RD whose head coincides Oj(r)
whose body contains occurrence Oj(r). translate assumption-based
system following definition.
Definition 20 (AS) = (R, A,

) defined follows:

21. give short proof here. Let X inconsistent set assumptions. Hence assumption
s.t. {, } CNF (X). Since assumptions appear heads rules, X.

96

fiClosure Consistency Logic-Associated Argumentation

1. = {Oj(r) | r RD } {not l | l head rule RD}
Oj(r) viewed assumption indicating rule r applicable l
negation-as-failure assumption stating evidence-to-the-contrary
l.
2.

R = RS {T r(r) | r RD }
r(r) form
Oj(r), h, 1 , . . . , n h
r form 1 , . . . , n h

3.

Oj(r) = Oj(r) l = l

Remark 8 Since rule RS RD whose head form Oj(r), assumption coincides head rule R. Therefore CNT (AS) ()
contradictory wrt . difficult see CNT (AS) () = CNAS (). CNT (AS) ()
hence contradictory wrt . Therefore CNT (AS) () contradictory.
(AS) hence assumption-based argumentation system.
(AS) distinct systems, attentive reader may ask sense
equivalent?
giving formal elaboration question, let us look example.
Example 9 Consider simple rule-based system consisting one strict rule one
defeasible rule :
r0 : b
r1 : b f
two arguments here:
A1 : b A2 : A1 f
arguments attack other. Hence complete extension E
contains arguments A1 , A2 .
corresponding assumption-based system (AS) consists two rules:
b

Oj(r1 ), f, b f

four arguments assumption-based system:
B1 : b

B2 : C 0 , C 1 , B1 f

C0 : Oj(r1 )

C1 : f

attacks four arguments. complete extension E
(AS) consists four arguments. fact information contained E fully captured set = {B1 , B2 } since C0 , C1 subarguments B2 , hence attack
97

fiDung & Thang

attack B2 . could view set equivalent representative
E . could viewed representing core E .
equivalence E E captured correspondence arguments
A1 , A2 arguments B1 , B2 respectively.
Note arguments C0 , C1 extension E (AS) explicitly represent implicit
meta-level information contained extension E AS, namely, defeasible rule r1 applicable argument conclusion f .
Let AF0 = (AR0 , att0 ), AF1 = (AR1 , att1 ) argumentation frameworks corresponding AS, (AS) respectively.
Definition 21 Let set arguments AF1 . core S, denoted Core(S),
defined
Core(S) = \
i.e Core(S) contains arguments assumptions.
illustration, example 9, Core(E ) = {B1 , B2 }.
Lemma 8
1. Let set arguments AF1 argument AF1 .
holds: acceptable wrt iff acceptable wrt Core(S).
2. Let set arguments AF1 . admissible iff Core(S) admissible.
Proof See appendix section 6.
following lemma states complete sets identified uniquely cores.
Lemma 9 Let E, E complete extensions AF1 . holds:
E = E iff Core(E) = Core(E )
Proof See appendix section 6.
present bijection complete extensions AF0 complete extensions
AF1 defining natural one-one mapping AR0 AR1 :
Definition 22 Define
C : AR0 AR1
following properties satisfied:
1. form A1 , . . . , h, n 0, C(A) form
C(A1 ), . . . , C(An ) h 22
22. Note form h, C(A) = A.

98

fiClosure Consistency Logic-Associated Argumentation

2. basic defeasible argument form A1 , . . . , h C(A)
form
Oj(r), h, C(A1 ), . . . , C(An ) h 23
r last rule A.
set arguments AR0 , let C(S) = {C(A) | }. follows
Lemma 10 Let A, B AR0 AR0 . following observations hold:
1. Cnl(A) = Cnl(C(A)).
2. C one-one mapping AR0 onto AR1 \
3. (A, B) att0 iff (C(A), C(B)) att1 .
4. admissible AF0 C(S) admissible AF1 .
5. acceptable wrt iff C(A) acceptable wrt C(S)
Proof See appendix section 6.
Let L language
L0 = L \ {Oj(r), Oj(r) | r defeasible rule AS}
equivalence (AS) established following theorem.
Theorem 8 complete extension E AF0 complete extension E AF1
vice versa following properties hold:
1. C(E) = Core(E )
2. literal l L0 ,

l Cnl(E) iff l Cnl(E )

Proof See appendix section 6.
following theorem shows self-contradiction axiom rule-based argumentation subsumed ab-self-contradiction axiom assumption-based argumentation.
Let ALi = (CNi , CON RAi ), = 0,1, abstract logics associated AS, (AS)
respectively.
Theorem 9 AL0 satisfies self-contradiction axiom AL1 satisfies ab-selfcontradiction axiom.
Proof See appendix section 6.
23. Note defeasible rule r form h, C(A) form Oj(r), h, h.

99

fiDung & Thang

7. Discussion
Amgoud Besnard (2009) introduced use Tarskis abstract logic study
consistency property logic-based argumentation. following, discuss
compactness cohesion could fulfilled systems.
remarked earlier, Tarski abstract logic represented abstract logic
CON RA 6= X CON RA, CN (X) = L x L
CN ({x}) CON RA.
Tarski abstract logic said adjunctive x, L, CN ({x}) 6=
CN ({x, y}) 6= CN ({y}) exists z CN ({z}) = CN ({x, y}).
knowledge base defined set L x , x consistent.
argument pair = (X, ) X finite consistent support
denoted supp(A), CN (X) conclusion denoted Cnl(A).
support set arguments union supports individual arguments.
AR denotes set arguments .
X called minimal conflict set X inconsistent proper subset X
consistent.24
rest discussion, assume minimal conflict sets contain two
elements.
Let att AR AR attack relation.
1. att said context-sensitive iff a, b AR, supp(a)supp(b) inconsistent
either (a, b) att (b, a) att.
2. att said conflict-dependent iff a, b AR, (a, b) att supp(a)
supp(b) inconsistent.
3. att said symmetric iff a, b AR, (a, b) att (b, a) att.
argument B said subargument argument A, denoted B B =
B = ({}, ) supp(A).
Lemma 11 minimal conflict sets binary attack relation att contextsensitive, conflict-dependent symmetric LAF = (AF, , AL, Cnl) compact
cohesive logic-associated argumentation framework.
Proof See appendix section 7.
follows immediately theorem 1:
Corollary 5 minimal conflict sets binary attack relation att contextsensitive, conflict-dependent symmetric LAF satisfies properties closure
consistency.
24. difficult see minimal conflict set finite CN (X) = L, L = CN ({x})
x L, follows x CN (X). finiteness axiom, finite subset X
x CN (Y ). Hence CN (Y ) = L. minimality X, follows X = . X hence
finite.

100

fiClosure Consistency Logic-Associated Argumentation

Corollary 5 rather limited due restrictions imposed attack relations.
structure arguments rather poor abstract logics reveal
structure consequence relation. approach marrying abstract argumentation abstract logics resulting logic-associated abstract argumentation addresses
problem specifying subargument structure relation attack relation.
Caminada Amgoud (2007) studied unrestricted rebuts two arguments contrary conclusions considered attack other. Defeasible argumentation attacks based unrestricted rebuts violates consistency closure
properties except grounded semantics. Unrestricted rebuts gain much attention research assumption-based argumentation logic programming.
suggests relevant structural features underlying unrestricted attacks
still understood. sensible idea could study kind attacks within
proposed framework logic-associated abstract argumentation could shed lights
instances defeasible assumption-based argumentation.
Non-interference, another key rationality postulate structured argumentation
proposed Caminada, Carnielli, Dunne (2012) studied extensively Caminada et al. (2012), Wu (2012). Non-interference conceptually different consistency closure properties later properties could viewed correctness
argument systems former structural modularity. focus
correctness argument systems, study structural modularity outside
scope paper. Nonetheless, non-interference seems related property
localizing conflicts arguments systems say argument system localized
argument attacking every argument. difficult see aspic systems
closed contraposition localized rebutting attack it.
contrast, self-contradiction axiom allows us develop localized aspic systems. would
interesting see two concepts localized conflicts non-interference
interrelated.
Toni (2008) generalized assumption-based argumentation represent reasoning
strict defeasible rules satisfying rational properties logical closure
consistency. showed section 6, standard assumption-based argumentation
captures rule-based argumentation system simple elegant transformation. Hence
necessary generalize assumption-based argumentation capture defeasible reasoning strict defeasible rules. Nevertheless, proposal Toni (2008) interesting.
Nielsen Parson (2007) proposed generalization abstract argumentation
allowing sets attacking arguments. Prakken (2010) Modgil Prakken (2013)
studied preferences arguments. would interesting see whether
properties compactness cohesion satisfied frameworks.
believe compactness cohesion self-contradiction properties could
serve guideline principles design logic-based argumentation systems ensure
satisfaction properties logical closure consistency. pointed Caminada
Amgoud (2007), several argument systems (Garcia & Simari, 2004; Governatori,
Maher, Antoniou, & Billington, 2004) satisfying consistency property. would
interesting see results paper could applied them.
101

fiDung & Thang

Appendix A. Section 1
Let CN consequence operator wrt . clear CN () = {p, b, Oj(d2 ), th}.
Let c CN (X) c L X L. Let x X. show x CN (Y )
= X \ {x} {c}. c CN (), absurdity rules, follows immediately
x CN (Y ). Suppose c 6 CN (). Hence c CN (X) iff c X X contains pair
literals a, a. c X x 6= c, c . Hence {c, c} . absurdity
rules, L = CN (Y ). c X x = c x . Hence x CN (Y ). X contains
pair literals a, x 6 {a, a}, L = CN (Y ). x {a, a} x .

Appendix B. Section 3
Lemma 1 Let set arguments. following assertions hold:
1. argument A, generated {A}.
2. Sub(S) GN (S).
3. Cnl(GN (S)) CN (Cnl(Sub(S))).
4. CN (Cnl(GN (S))) = CN (Cnl(Sub(S))).
5. argument C, C attacks GN (S) iff C attacks S.
Proof first assertion obvious definitions 6 7. Since Sub(S),
{A} Sub(S), follows immediately first assertion argument Sub(S)
generated S. third assertion follow immediately definitions 6 7.
fourth assertion follows second third ones.
GN (S), clear C attacks S, C attacks GN (S). Suppose C attacks
GN (S). Let GN (S) s.t. C attacks A. Let BA base BA Sub(S).
C hence attacks BA. Therefore C attacks Sub(S). Thus C attacks S.
Theorem 1 Let E complete extension. GN (E) = E
Proof Since attack GN (E) attack E (lemma 1, last assertion),
attack GN (E) counterattacked E E complete extension. Therefore
GN (E) E. second assertion lemma 1, follows E GN (E). Hence GN (E) =
E.

Appendix C. Section 4
Remark 9 strict argument X L strict argument set rules RS {
| X}.
Remark 10 strict argument X, set premises A, denoted P rem(A),
set literals X labelling leaves (viewed proof tree).
Theorem 4 Rule-based argumentation systems compact.

102

fiClosure Consistency Logic-Associated Argumentation

Proof Let rule-based system let set arguments wrt
CNAS (Cnl(Sub(S))). lemma 2, need show Cnl(GN (S)).
Let X minimal subset Cnl(Sub(S)) CNAS (X). Hence
strict argument A0 X conclusion . let SX minimal set arguments
Sub(S) s.t. Cnl(SX ) = X. Let argument obtained replacing leaf
A0 (viewed proof tree) labelled literal X argument conclusion
SX . obvious conclusion . show SX base
A. Suppose B argument attacking A. Since A0 strict argument X, B must
attack basic defeasible subargument argument SX . Hence B attacks SX . Thus
GN (S). Hence Cnl(GN (S)). proved rule-based argumentation system compact.
Lemma 4 Let argument BD set basic defeasible subarguments
A. Cnl(A) CNAS (Cnl(BD)).
Proof induction size A.
Basic Step form / .
Suppose form CNAS (). BD = , lemma holds.
Suppose form BD = {A}. lemma holds.
Inductive Step. Suppose form A1 , . . . , /
Suppose form A1 , . . . , BD. lemma holds obviously.
Suppose form A1 , . . . , . Hence BD union sets
BD1 , . . . , BDn basic defeasible subarguments A1 , . . . , respectively. induction hypothesis, Cnl(Ai ) CNAS (Cnl(BDi )), 0 n. Hence Cnl(A) CNAS (Cnl(BD)).

Theorem 5 Suppose ALAS satisfies self-contradiction axiom. cohesive.
Proof Let inconsistent set arguments. Hence Cnl(Sub(S)) inconsistent. Define
BD set basic defeasible arguments Sub(S). clear BD 6= .
lemma 4, follows Cnl(Sub(S) CNAS (Cnl(BD)). Hence CNAS (Cnl(Sub(S))) =
CNAS (Cnl(BD)). Cnl(BD) therefore inconsistent. Since ALAS satisfies self-contradiction
axiom, Cnl(BD) CNAS (Cnl(BD)). Let B BD
Cnl(B) = . CNAS (Cnl(Sub(S))) = CNAS (Cnl(BD)), follows CNAS (Cnl(Sub(S))).
compactness Sub(S) GN (S), follows argument
GN (S) Cnl(A) = . Hence attacks B. Since B BD Sub(S)
GN (S), GN (S) conflicting.
Lemma 5
1. AL closed contraposition, AL satisfies strong absurdity axiom.
2. AL satisfies strong absurdity axiom AL satisfies self-contradiction
axiom.
Proof
103

fiDung & Thang

1. Suppose AL closed contraposition. Let X CON RA. Hence
atom s.t. {a, a} X. CN ({a, }) literal ,
closure contraposition property, follows CN ({a, a}). Hence
CN (X) literal . proved L = CN (X) X CON RA.
definition 10, follows AL satisfies strong absurdity axiom.
2. Suppose AL satisfies strong absurdity axiom. Let X L X minimal
inconsistent. Therefore CN (X) CON RA. idempotence axiom
strong absurdity axiom, CN (X) = L. holds obviously: X CN (X).
Lemma 6 Let = (RS, RD) set strict rules RS closed transposition. ALAS satisfies self-contradiction axiom.
Proof first prove following assertion.
Assertion: Let strict argument X conclusion =
6 P rem(A) X.
P rem(A), argument B premises P rem(A) {}
conclusion .
Proof prove induction height (as proof tree).25
height 0, theorem obvious.
Suppose form A1 , . . . , Cnl(Ai ) = . Let P rem(A).
Without loss generality, let P rem(An ). closure transposition, rule
1 , . . . , n1 , n belongs RS. Let B argument A1 , . . . , An1 ,
n .
induction hypothesis, proof tree r whose premises P rem(An )
{n } whose conclusion .
Let r tree obtained r replacing occurrence premise n
argument B. clear P rem(T r ) P rem(A) {} Cnl(T r ) = .
Let X L s.t. X minimal inconsistent. Hence two arguments A0 , A1
premises X conclusions , respectively. minimality X,
holds: X = P rem(A0 ) P rem(A1 ). Let X. Without loss generality, suppose
P rem(A0 ). assertion, follows exists argument B
conclusion P rem(B) P rem(A0 ) {}. Let argument obtained
replacing leaf labelled B tree A1 . clear P rem(A) X
conclusion .

Appendix D. Section 5
Theorem 6 ABA frameworks compact.
Proof Let set arguments. Let SU = Sub(S) CSU = Cnl(SU ).
need prove CN (CSU ) Cnl(GN (S)) (lemma 2). Let CN (CSU ). easy
see argument (viewed proof tree) conclusion whose leaves
25. height proof tree length (the number links) longest path root leaf
node.

104

fiClosure Consistency Logic-Associated Argumentation

labelled sentences CSU . Expand proof tree leaf labelled CSU
proof tree representing argument SU conclusion . new proof tree
corresponds argument B conclusion . proof trees SU used
expand obviously form base B. hence clear B generated S.
Theorem 7 Let F ABA framework. ALF satisfies ab-self-contradiction axiom,
F cohesive.
Proof Let inconsistent set arguments. Hence supp(S) inconsistent. Since
CNF satisfies assumption-based self-contradiction axiom, supp(S)
CNF (supp(S)). lemma 2, argument GN (S)
Cnl(A) = . obvious attacks argument whose premises contain .
Since GN (S), GN (S) hence conflicting.

Appendix E. Section 6
Lemma 8
1. Let set arguments AF1 argument AF1 . holds:
acceptable wrt iff acceptable wrt Core(S).
2. Let set arguments AF1 . admissible iff Core(S) admissible.
Proof
1. Since Core(S) S, acceptable wrt Core(S), obviously acceptable wrt S.
Suppose acceptable wrt S. Let B attack A. Hence s.t.
attacks B. Therefore assumption. Hence Core(S). B hence
attacked Core(S), i.e. acceptable Core(S).
2. Follows immediately previous assertion.
Lemma 9. Let E, E complete extensions AF1 . holds:
E = E iff Core(E) = Core(E )
Proof need show Core(E) = Core(E ) implies E = E . reverse
direction obvious. Let Core(E) = Core(E ) = S. Let E \ S. hence
assumption acceptable wrt E. lemma 8, acceptable wrt S. Thus acceptable
wrt E (lemma 8). Hence E . Similarly, could show assumption E \
belongs E. thus proved E = E .
Lemma 10 Let A, B AR0 AR0 . following observations hold:
1. Cnl(A) = Cnl(C(A)).
2. C one-one mapping AR0 onto AR1 \
105

fiDung & Thang

3. (A, B) att0 iff (C(A), C(B)) att1 .
4. admissible AF0 C(S) admissible AF1 .
5. acceptable wrt iff C(A) acceptable wrt C(S)
Proof
1. first assertion obvious.
2. obvious argument AR0 C(A) A.
Viewing argument AR0 proof tree, height tree defined
length (i.e. number links) longest path root leaf. Let AR0,k
set trees height k AR0 . prove induction C one-one
AR0,k .
obvious C one-one AR0,0 . Suppose C one-one AR0,k . Let A, B
two different arguments AR0,k+1 . last rules A,B different
obvious C(A), C(B) different. Suppose last rules A,B identical.
A, B respectively forms A1 , . . . , / h, B1 , . . . , Bn / h.
Without loss generality, assume A1 6= B1 . Hence induction
hypothesis, C(A1 ) 6= C(B1 ). Therefore C(A) 6= C(B).
straightforward prove induction B AR1 \ A,
AR0 C(A) = B.
3. (a) Suppose (A, B) att0 . Let B basic defeasible subargument B
attacks B (on B ). two cases:
i. Cnl(A) = Oj(Lr(B )) (undercut attack). Cnl(A) = Cnl(C(A)),
follows Cnl(C(A)) = Oj(Lr(B)) Oj(Lr(B)) supp(C(B)). C(A)
hence attacks C(B) wrt att1 .
ii. Cnl(A) = h h = Cnl(B ). Hence Cnl(C(A)) = h h
supp(C(B)). C(A) hence attacks C(B) wrt att1 .
(b) Suppose (C(A), C(B)) att1 . two cases:
i. Cnl(C(A)) = Oj(r) defeasible rule r Oj(r) supp(C(B)).
Cnl(A) = Cnl(C(A)), follows Cnl(A) = Oj(r) r defeasible
rule B. Hence basic defeasible subargument B B
Lr(B ) = r. Hence attacks B B AF0 .
ii. Cnl(C(A)) = h h supp(B). Hence basic defeasible
rule r B hd(r) = h. Therefore subargument B B
Lr(B ) = r. Hence attacks B B (by rebutting) AF0 .
4. assertion 3, clear conflict-free iff C(S) conflict-free.
Suppose defends attacks. Let attack C(S) AF1 . Therefore
assumption. second assertion, B = C 1 (A). assertion
3, follows B attacks S. Therefore attacks B. Hence C(S) attacks A.
106

fiClosure Consistency Logic-Associated Argumentation

Suppose C(S) defends attacks. Let attack AF0 . Let B = C(A).
assertion 3, follows B attacks C(S). Therefore C(S) attacks B. Hence attacks
A.
5. Follows immediately assertion 3.
Theorem 8 complete extensions E AF0 complete extension E
AF1 vice versa following properties hold:
1. C(E) = Core(E )
2. literal l L0 , l Cnl(E) iff l Cnl(E )
Proof Let E complete extension AF0 . assertion 4 lemma 10, follows
= C(E) admissible. Let set assumptions acceptable wrt S. show
E = complete. Let B AF1 acceptable wrt E . Suppose B
assumption. Let = C 1 (B). lemma 10, assertion 5, acceptable wrt E. Hence
E. Therefore B S. B assumption, B . proved E
complete Core(E ) = C(E). uniqueness E follows directly lemma 9.
Let l L0 l Cnl(E ). Since l 6 A, clear l Cnl(Core(E )). Hence
l Cnl(C(E)). first assertion lemma 10, follows l Cnl(E).
Theorem 9 AL0 satisfies self-contradiction axiom AL1 satisfies ab-selfcontradiction axiom.
Proof Suppose AL0 satisfies self-contradiction axiom. Let X inconsistent
set assumptions (AS). want show exists X
CN1 (X). Suppose contrary. follows immediately atom
{a, a} CN1 (X). two cases.
Case 1: {a, a} =
6 . Since 6 A, assumption. classical negation
apply negation-as-failure literal, follows = Oj(d) RD.
Oj(d) = CN1 (X), contradiction hypothesis 6 X
CN1 (X). case hence occur.
Case 2: {a, a} = . Therefore {a, a} X = . Let S1 set arguments
AR1 \ whose support subset X. {a, a} CN1 (X) \ X, follows S1 6= .
difficult see Cnl(S1 ) = CN1 (X) \ X. Let S0 set arguments
AR0 S0 = C 1 (S1 ). Cnl(S0 ) = Cnl(S1 ), follows Cnl(S0 )
closed (wrt CN0 ). easy see Sub(S0 ) = S0 . Let BS set basic
defeasible arguments S0 . lemma 4, clear CN0 (Cnl(BS)) = Cnl(S0 ). Since
{a, a} CN1 (X) \ X = Cnl(S0 ) = CN0 (Cnl(BS)), Cnl(BS) hence inconsistent
wrt AS. AL0 satisfies self-contradiction axiom, literal h Cnl(BS)
h CN0 (Cnl(BS)). Let = h. h Cnl(BS), follows
supp(C(BS)) supp(S1 ) = X. h CN0 (Cnl(BS)) = Cnl(S1 ) = CN1 (X) \ X,
follows CN1 (X). Contradiction.
proved AL1 satisfies assumption-based self-contradiction axiom.
107

fiDung & Thang

Appendix F. Section 7
Lemma 11 minimal conflict sets binary attack relation att contextsensitive, conflict-dependent symmetric LAF = (AF, , AL, Cnl) compact
cohesive logic-associated argumentation framework.
Proof show LAF logic-associated argumentation framework, need show
A, B, C AR, C attacks B B C attacks A. B = A, nothing prove. Suppose B = ({}, ) supp(A). conflict-dependency,
follows supp(C) {} inconsistent. Hence supp(C) supp(A) inconsistent.
context-sensitivity symmetry attack relation, follows C attacks A.
Let set arguments CN (Cnl(Sub(S))). Hence exists finite
X supp(S) CN (X). Let = (X, ). Let X = {({}, ) | X}.
clear X Sub(S). show X base A. Suppose B attacks A. Hence
conflict-dependency att, exists minimal conflict set {, } supp(A),
supp(B). Hence B attacks argument ({}, ) X . Hence GN (S).
proved CN (Cnl(Sub(S))) Cnl(GN (S). Hence lemma 2, AF compact.
Let inconsistent set arguments. Hence supp(S) inconsistent. exists
binary minimal conflict set {, } supp(S). Hence arguments = ({}, ), B = ({}, )
attack other. A, B GN (S), GN (S) conflicting.

References
Amgoud, L., & Besnard, P. (2009). Bridging gap abstract argumentation
systems logic. SUM, pp. 1227.
Bondarenko, A., Dung, P., Kowalski, R., & Toni, F. (1997). abstract, argumentationtheoretic approach default reasoning. Artif. Intell., 93, 63101.
Caminada, M., & Amgoud, L. (2007). evaluation argumentation formalisms.
Artificial Intelligence, 171, 286310.
Caminada, M., Carnielli, W., & Dunne, P. (2012). Semi-stable semantics. Journal Logic
Computation, 22 (5), 12071254.
Dung, P. M. (1995). acceptability arguments fundamental role nonmonotonic reasoning, logic programming n-person gamescceptability arguments
fundamental role nonmono- tonic reasoning, logic programming n-person
games. Artif. Intell., 77 (2), 321358.
Dung, P. M., & Thang, P. M. (2011). Closure consistency rationalities logic-based argumentation. Balduccini, M., & Son, T. C. (Eds.), Logic Programming, Knowledge
Representation, Nonmonotonic Reasoning, Vol. 6565, pp. 3343. Springer.
Garcia, A., & Simari, G. (2004). Defeasible logic programming: argumentative approach.
TPLP, 4 (1-2), 95138.
Gelfond, M., & Lifschitz, V. (1988). stable model semantics logic programming.
ICLP/SLP, pp. 579597. MIT Press.
108

fiClosure Consistency Logic-Associated Argumentation

Gelfond, M., & Lifschitz, V. (1990). Logic programs classical negation. ICLP, pp.
579597. MIT Press.
Governatori, G., Maher, M., Antoniou, G., & Billington, D. (2004). Argumentation semantics defeasible logic. J. Log. Comput., 14 (5), 675702.
Lifschitz, V. (1999). Answer set planning (abstract). LPNMR, pp. 373374. MIT Press.
Modgil, S., & Prakken, H. (2013). general account argumentation preferences.
Artificial Intelligence, 195, 361397.
Nielsen, S., & Parson, S. (2007). generation dungs abstract framework argumentation: Arguing sets attacking arguments. LNCS, No. 4766, pp. 5473.
Springer Verlag.
Pollock, J. (1995). Cognitive carpentry: blueprint build person.. MIT Press,
Cambridge MA.
Pollock, J. (1987). Defeasible reasoning. Cognitive Science, 11 (4), 481518.
Prakken, H. (2010). abstract framework argumentation structured arguments.
J. Arguments Computation, 1 (2), 93124.
Prakken, H. (2012). reflection two current trends formal argumentation. Artikis, A., Craven, R., Cicekli, N. K., Sadighi, B., & Stathis, K. (Eds.), Logic Programs,
Norms Action, Vol. 7360 Lecture Notes Computer Science, pp. 249272.
Springer Verlag.
Toni, F. (2008). Assumption-based argumentation closed consistent defeasible reasoning. JSAI, 390402.
Wu, Y. (2012). Arguments Conclusions. Ph.D. thesis, University Luxemburg.

109


