Journal Artificial Intelligence Research 54 (2015) 631-677

Submitted 7/15; published 12/15

Practical, Integer-Linear Programming Model Delete-Free
Tasks Use Heuristic Cost-Optimal Planning
Tatsuya Imai

TATSUYA . IMAI .30100041@ GMAIL . COM

Graduate School Information Science Engineering
Tokyo Institute Technology
Tokyo, Japan

Alex Fukunaga

FUKUNAGA @ IDEA . C . U - TOKYO . AC . JP

Graduate School Arts Sciences
University Tokyo
Tokyo, Japan

Abstract
propose new integer-linear programming model delete relaxation cost-optimal
planning. straightforward IP delete relaxation impractical, enhanced model
incorporates variable reduction techniques based landmarks, relevance-based constraints, dominated action elimination, immediate action application, inverse action constraints, resulting
IP used directly solve delete-free planning problems. show IP model
competitive previous state-of-the-art solvers delete-free problems. LP-relaxation
IP model often good approximation IP, providing approach approximating optimal value delete-free task complementary well-known LM-cut
heuristic. show constraints partially consider delete effects added
IP/LP models. embed new IP/LP models forward-search based planner, show
performance resulting planner standard IPC benchmarks comparable
state-of-the-art cost-optimal planning.

1. Introduction
delete relaxation classical planning problem relaxation planning problem
delete effects eliminated operators. delete relaxation, every proposition
becomes true remains true never becomes false again. delete relaxation
studied extensively classical planning literature used estimate cost
optimal plan original planning problem therefore useful basis heuristic
functions search-based domain-independent planning algorithms. solution original
planning problem solution delete relaxation, cost optimal solution
delete-relaxed problem lower cost original problem relaxation,
every proposition needs established once. Thus, optimal cost delete relaxation
planning problem (denoted h+ ) lower bound optimal cost original planning
problem. Despite fact computing h+ easier solving original planning problem,
computing h+ NP-equivalent (Bylander, 1994) poses challenging problem.
addition importance basis heuristic functions standard classical planning,
delete relaxation interesting right, problems
naturally modeled delete-free problems (i.e., problems actions delete
effects). example, minimal seed set problem, problem systems biology seeks
c
2015
AI Access Foundation. rights reserved.

fiI MAI & F UKUNAGA

minimal set nutrients necessary organism fully express metabolism,
mapped delete-free planning problem (Gefen & Brafman, 2011). Another application
relational database query plan generation (Robinson, McIlraith, & Toman, 2014),
problem determining join orders modeled delete-free problem.
paper, propose new, integer programming (IP) approach computing h+ .1 show
model allows fast computation h+ , linear programming (LP) relaxation
model used successfully heuristic function A* -based planner. rest
paper structured follows: begin review previous work delete relaxation
well applications LP planning. introduce IP(T + ), basic integer programming
model delete-free planning problem (Section 3) show correctly computes h+ . Since
straightforward IP(T + ) model often intractable useful practice computing
h+ , develop enhanced model, IPe (T + ), reduces number variables IP
using techniques landmark-based constraints, relevance analysis (Section 4). evaluate
performance basic IP(T + ) enhanced IPe (T + ) models Section 5, show
IPe (T + ) competitive state-of-the-art methods computing h+ .
objective use IP models basis heuristic forward state-space
search based planning, solving IP every node search algorithm computationally daunting, Section 6, propose evaluate two relaxations IP(T + )-based IP models.
consider LP(T + ) LPe (T + ), LP-relaxation IP(T + ) IPe (T + ), show
LP-relaxations usually closely approximate h+ . introduce time-relaxation IP
LP models (IPetr (T + ) LPetr (T + ), respectively) reduces number variables,
cost sometimes underestimating h+ , show time-relaxations usually closely
approximate h+ . experimentally compare closely relaxed, delete-free models approximate h+ LM-cut heuristic (Helmert & Domshlak, 2009) show approaches
complementary.
Next, Section 7, evaluate utility IP LP models heuristics forwardsearch based planning embedding A* -based planner. results show although
LPetr (T + ) competitive LM-cut heuristic overall, domains
LPetr (T + ) yields state-of-the-art performance, outperforming LM-cut.
turn strengthening IP LP models partially considering delete effects
(Section 8). add constraints enforce lower bounds number times action must
used. correspond net change constraints recently proposed Pommerening
et al. (2014), well action order relaxation van den Briel et al. (2007). tightened
bound IPc (T ) dominates IP(T + ). Counting constraints added LP-relaxation


LPec (T ), well time-relaxed LP-relaxation LPectr (T ). However, additional counting
constraints makes IP LP difficult, A* -based planner uses bounds,
tradeoff tighter bound (fewer nodes searched A* ) time spent per node.
result, find although counting constraints result enhanced performance domains,
significantly degrades performance domains. experimentally compare countingconstraint enhanced models LMC-SEQ LP model Pommerening et al. (2014)
combines landmark net-change constraints, show that, LM-cut vs delete-free LPs,
models complementary.
1. paper revises extends work originally reported authors paper presented ECAI2014 (Imai &
Fukunaga, 2014). Formal results proofs ECAI paper included, paper contains
much thorough experimental evaluation models (all experimental data new).

632

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

Table 1 provides overview IP/LP models discussed Sections 3-8,
serves roadmap paper . model, indicate section text
model introduced, constraints used model, variable elimination optimizations
used model. Figure 1 directed graph showing dominance relationships among
optimal costs IP/LP models.
Finally, clear dominance relationship among LP models (with respect
performance A* -based planners use LP models heuristic function),
propose evaluate simple automatic configuration heuristic selects LP use
heuristic A* (Section 9). simple automated bound selection significantly boosts performance, resulting ensemble-based LP-heuristic competitive state-of-the-art heuristics. Section 10 concludes paper summary discussion results directions future work.

2. Background Related Work
section first introduces notation planning tasks used rest paper, surveys related work solving delete-free planning tasks well previous applications
IP/LP domain-independent planning.
2.1 Preliminary Definitions
STRIPS planning task defined 4-tuple = hP, A, I, Gi. P set propositions.
set actions. state represented subset P , applying action state adds
propositions removes propositions state. action composed
three subsets P , hpre(a), add(a), del(a)i called preconditions, add effects,
delete effects. action applicable state iff satisfies pre(a) S. applying
S, propositions change S(a) = ((S \ del(a)) add(a)). sequence actions
= (a0 , , ), use S() denote ((((S \ del(a0 )) add(a0 )) \ del(a1 )) ) add(an ).
Let P initial state G P goal. solution planning task sequence
actions transform state satisfies G S. Formally, feasible solution, i.e.,
plan, sequence actions = (a0 , , ) satisfies (i) i, pre(ai ) I((a0 , , ai1 )),
(ii) G I().
basic STRIPS planning task extended STRIPS planning action costs,
action associated (non-negative) cost c(a). objective cost-optimal planning STRIPS
model action costs find plan minimizes sum costs
P
actions i=n
c(a
).
i=0
delete relaxation task , denoted + , task hP, A+ , I, Gi A+ set
delete-free actions defined A+ = {hpre(a), add(a), | A}. use + denote
task delete-free beginning without relaxed.
2.2 Previous Work Computing h+ Relaxations
delete relaxation used basis planning heuristics since beginning
recent era interest forward-state space search based planning (Bonet & Geffner, 2001). Unfortunately, computing h+ known NP-equivalent reduction vertex cover (Bylander,
633

fiI MAI & F UKUNAGA

Model
IP(T + ) (Sec. 3)
IPe (T + ) (Sec. 4)

Constraints
C1, C2, C3, C4,
C5, C6,
C1, C2a C3, C4,
C5, C6

Variable Eliminations
None
Landmarks (4.1), relevance (4.2), dominated
action elimination (4.3),
immediate action application (4.4)
None
IPe (T + )
IPe (T + )

LP(T + ) (Sec. 6.1)
LPe (T + ) (Sec. 6.1)
LPetr (T + ) (Sec. 6.2)

IP(T + )
IPe (T + )
C1, C2a C3, C4,

IPc (T ) (Sec. 8)

C1, C2, C3, C4,
C5, C6, C7 C8

None

IPec (T + ) (Sec. 8)

C1, C2a C3, C4,
C5, C6 C7 C8

LPc (T ) (Sec. 8)

LPec (T ) (Sec. 8)

LPectr (T ) (Sec. 8)

IPc (T )

IPec (T )
C1, C2a C3, C4,
C7 C8

Landmarks (4.1), relevance
(4.2), modified dominated
action elimination (Definition 2)
None

IPec (T )

IPec (T )

A* /autoconf (Sec. 9)

Selects among LPe (T + ), LPetr (T + ), LPec (T ),

LPectr (T ).



Basic delete-free task IP
model (computes h+ )
Enhanced IP model (computes h+ )

LP relaxation IP(T + )
LP relaxation IPe (T + )
LP-relaxation timerelaxation IPe (T + )
Basic delete-free task
IP model enhanced
counting constraints
Enhanced IP model
counting constraints

LP relaxation IPc (T )

LP relaxation IPec (T )
LP-relaxation time
relaxation IPec (T )



Automatic LP Model Selection

Table 1: Overview delete-relaxation based IP/LP models paper

LP(T+)

LPtr(T+)

LPe(T+)

IP(T+) = IPe(T+) =aaa
h+

IPcec(T)

LPec
c(T)

LPtre(T+)

IPtre(T+)

ec(T)
IPctr

e (T)
c
LPctr

IPtr(T+)

Figure 1: Dominance relationships among IP/LP models. Edge modeli modelj indicates
optimal cost modeli optimal cost modelj . 4 highlighted LPs components
A* /autoconf model.

634

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

1994), therefore, beginning, researchers avoided direct computation h+ , instead
sought approximations h+ .
satisficing planning, optimal solutions required, successful approach deriving heuristics approximate delete relaxation. additive heuristic (hadd ) assumes
subgoals independent computes sum achieving subgoal delete-relaxed
model (Bonet & Geffner, 2001). heuristic (Hoffmann & Nebel, 2001) constructs planning
graph (Blum & Furst, 1997) delete-relaxed problem, extracts relaxed plan, computes
number actions relaxed plan, upper bound h+ .
case cost-optimal planning, action assigned cost objective
find minimal cost plan, lower bounds h+ basis several admissible heuristic functions
used literature. Bonet Geffner (2001) proposed hmax heuristic,
computes highest cost associated achieving costly, single proposition.
hmax admissible, often informative (i.e, gap hmax h+ large)
considers single costly goal proposition. admissible landmark cut
(LM-cut) heuristic (Helmert & Domshlak, 2009), approximates h+ follows. state s, LMcut heuristic first computes hmax (s), zero infinite, h+ zero infinite,
hLM cut (s) = hmax (s). Otherwise, disjunctive action landmark L (a set actions least one
must included relaxed plan) computed, cost actions L reduced
c(m), cost minimal-cost action L, hLM cut increased c(m). process
repeated hmax (s) (for remaining, reduced problem) becomes 0. approximations
h+ informative hmax include set-additive heuristic (Keyder & Geffner, 2008)
cost-sharing approximations hmax (Mirkis & Domshlak, 2007).
Previous planners avoided direct computation h+ extra search efficiency
gained using h+ offset high cost computing h+ . far aware, first
actual use h+ inside cost-optimal planner Betz Helmert (2009), implemented
domain-specific implementations h+ several domains. recently, Haslum et al. evaluated
use domain-independent algorithm h+ (Haslum, Slaney, & Thiebaux, 2012)
heuristic function A* -based cost-optimal planning, found performance relatively
poor (Haslum, 2012).
recent years, several advances computation h+ . Since, described
above, LM-cut heuristic (Helmert & Domshlak, 2009) lower bound h+ , cost-optimal
planner using A* search algorithm LM-cut heuristic directly applied delete
relaxation classical planning problem order compute h+ . possible improve upon
developing methods exploit delete-free property specifically tailored
solving delete relaxation. Pommerening Helmert (2012) developed approach uses
IDA* branch-and-bound incrementally computed LM-cut heuristic. Gefen Brafman
(2012) proposed action pruning delete-free problems.
different approach computing h+ based observation h+ could formulated
problem finding minimal hitting set sets disjunctive action landmarks (Bonet &
Helmert, 2010). led methods computing h+ searching minimum-cost hitting set
complete set action landmarks delete-relaxed planning problem (Bonet & Castillo,
2011; Haslum et al., 2012). original implementation Haslum et al.s hitting-set based
h+ solver used problem-specific branch-and-bound algorithm (Haslum et al., 2012), improved
implementation (which use experimental evaluation Section 5) uses integer programming solve hitting set problem (Haslum, 2014a).
635

fiI MAI & F UKUNAGA

2.3 Integer/Linear Programming Classical Planning
Another related line research modeling classical planning integer/linear programs
(ILP). use high-performance, general problem solvers solve planning problems
pioneered Kautz Selman, solved planning problems encoding propositional
satisfiability (SAT) applied state-of-the-art SAT solvers. basic approach instantiate
SAT formula satisfying assignment implies t-step plan. SATPLAN starts small
value (e.g., trivially, 1, lower bound), instantiates propositional formula F (t)
satisfiable plan parallel steps less exists. F (t) satisfiable,
minimal parallel makespan plan found. Otherwise, incremented, process
repeated plan found. initial encodings modestly successful (Kautz &
Selman, 1992), advances SAT solver technology well improvements encoding
integration planning graphs (Blum & Furst, 1997) led dramatic performance improvements (Kautz & Selman, 1996, 1999). Recent work SAT-based planning includes improved
encodings well execution strategies SAT strategies improve upon simply incrementing
(Rintanen, Heljanko, & Niemela, 2006). addition, improvements SAT solvers
specifically target domain-independent planning investigated (Rintanen, 2012)
Since expressiveness integer programming (IP) subsumes SAT, SAT encodings
straightforwardly translated IP. However, direct translation SAT encodings IP resulted
poor performance, state-change formulation replaces original fluents SAT
encoding set variables directly expresses addition, deletion, persistence
fluents shown successful basis IP model planning (Vossen, Ball,
Lotem, & Nau, 1999). formulation strengthened additional mutual exclusion constraints (Dimopoulos, 2001). Optiplan model (van den Briel & Kambhampati, 2005) combined
state-change IP formulation planning-graph based model refinement strategies improvements Dimopoulous (2001). SAT-based approaches described above, IP models
feasible plan steps exists constructed. However, unlike
SAT formulation, easy directly encode action costs objective function IP
model, IP models used directly solve cost-optimal planning problems. Another
approach decomposes planning instance set network flow problems, subproblem corresponds state variable original planning problem (van den Briel, Vossen, &
Kambhampati, 2008).
Instead modeling directly solving classical planning problem IP, another approach, adopt paper, uses ILP models provide heuristic function guides
state-space search planning algorithms A* . early instance approach (which,
knowledge, earliest application LP classical planning) LPlan,
LP encoding classical planning problem used heuristic function partial order
planner (Bylander, 1997). Van den Briel et al. (2007) developed admissible heuristic based
LP model represents planning problem order actions executed
relaxed, variable represents number times action executed. Delete effects
considered, constraints number actions delete values
incremented actions add value. Although LP-based heuristic
integrated planning system, compared relaxed problem cost found model
Bylanders LPlan LP model, well LP model h+ .
636

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

knowledge, h+ implementation van den Briel et al. (2007) first implementation IP model h+ . First, relaxed planning graph (Blum & Furst, 1997) expanded
quiescence, results instantiation actions relevant optimal
delete-free task well upper bound number steps optimal delete-free task.
Then, h+ computed using delete-relaxed, step-based encoding planning problem
Optiplan (van den Briel, 2015).
Cooper et al. (2011) showed optimal solution dual LP model relaxes action ordering corresponds best lower bound obtained applying
transformations original planning problem shift costs among actions affect
fluents.
Bonet proposed hSEQ , admissible, flow-based LP heuristic based Petri Net state equations (Bonet, 2013) used heuristic A* -based planner. Bonet van den
Briel (2014) enhanced Bonets flow-based LP model adding action landmark constraint implementing variable merging strategies, resulting competitive, admissible heuristic. Karpas
Domshlak (2009) proposed LP formulation compute optimal partitioning landmarks. Pommerening et al. (2014) proposed operator counting framework enabled unification
number ideas, including state equation formulation (Bonet, 2013), post-hoc optimization constraints (Pommerening, Roger, & Helmert, 2013), well landmarks (the formulation Bonet
& Helmert, 2010, dual formulation Karpas & Domshlak, 2009) state
abstraction heuristics (Katz & Domshlak, 2010). showed combinations constraints resulted strong heuristics significantly outperformed LM-cut heuristic. recent survey
Roger Pommerening (2015) presents survey LP-based heuristics planning
includes earlier conference version paper (Imai & Fukunaga, 2014) suggests
delete-relaxation model could incorporated operator counting framework associating
operator-counting variable action variable (see below) delete-relaxed problem.

3. IP(T + ): Basic IP Formulation Delete-Free Task
define integer program IP(T + ), IP formulation delete free task
+ = hP, A+ , I, Gi. Note feasible solution IP(T + ) (not optimal solution),
derive corresponding, feasible non-redundant (i.e., action appears once)
plan + cost IP(T + ) solution.
First, define variables IP(T + ). addition able derive plan IP(T + ),
always exists injective mapping feasible non-redundant plan IP(T + ) solution.
Thus, show feasible assignments variables derived feasible plan
+ , well meanings roles variables. use = (a0 , , ) denote
plan + corresponding solution IP(T + ). say first achiever p plan
p 6 I, first action achieves (establishes) p.
proposition: p P, U (p) {0, 1}. U (p) = 1 iff p I(). U (p) indicates whether proposition p
achieved relaxed plan + .
action: A, U (a) {0, 1}. U (a) = 1 iff holds. U (a) indicates whether action
used relaxed plan.
add effect: A, p add(a), E(a, p) {0, 1}. E(a, p) = 1 iff holds first
achiever p. E(a, p) = 0 p true I, p achieved.
637

fiI MAI & F UKUNAGA

time (proposition): p P, (p) {0, , |A|}. (p) = p I() p added
at1 first. (p) = 0 p member I. (p) indicates time step p first
achieved first achiever.
time (action): A, (a) {0, , |A|}. (a) = = . (a) = |A| 6 .
(a) indicates time step first used.
initial proposition: p P, I(p) {0, 1}. I(p) = 1 iff p I.
p P achieved once, i.e., p appears add effects multiple actions ,
assign (p) index first action . p achieved, i.e., p 6 I() holds,
assign arbitrary value {0, , |A|} (p). Given delete-free task + feasible
non-redundant plan , call assignment solution derived .
use
Pthe following fact later proofs: solution derived feasible solution satisfies (a) s.t.padd(a ) E(a , p) 1 proposition p U (p) = 1, (b)
P

s.t.padd(a ) E(a , p) = 0 proposition p U (p) = 0.
Variables I(p) auxiliary variables computing h+ . Although redundant
solving delete-free task one time, useful avoid reconstructing constraints
state IP(T + ) LP(T + ) embedded heuristic function forward-search planner
called state.
objective function defined follows:
X
minimize:
c(a)U (a).
(1)
aA

objective function, cost solution IP(T + ) equal cost
corresponding (delete-free) plan.
Finally define following six constraints.
(C1) p G, U (p) = 1. (The goals must achieved).
(C2) A, p pre(a), U (p) U (a). (Actions require preconditions).
(C3) A, p add(a), U (a) E(a, p). (An action first achiever used).
P
(C4) p P, I(p) + s.t.padd(a ) E(a , p) = U (p). (If proposition achieved, must
true initial state effect action).
(C5) A, p pre(a), (p) (a). (Actions must preceded satisfaction
preconditions).
(C6) A, p add(a), (a) + 1 (p) + (|A| + 1)(1 E(a, p)). (If first achiever
p, must precede p).
show solution IP(T + ) derived feasible non-redundant plan
feasible. variable V IP(T + ), VF describes assignment V solution F
IP(T + ).
T+

Proposition 1. Given delete-free task + feasible, non-redundant plan + ,
solution F IP(T + ) derived feasible solution IP(T + ).
638

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

Proof. F clearly satisfies constraint C1 since satisfies G I().
Constraint C2 satisfied exists action proposition p pre(a)
U (a)F = 1 U (p)F = 0. However, U (a)F = 1, U (p)F = 1
delete-free feasible plan p established point. show F satisfies
constraints C3 C4 similar arguments. exists action proposition
p add(a) E(a, p)F = 1, U (a)F = 1 must hold according definition F .
addition, exists proposition p U (p)F = 1, exists first achiever p
E(a, p)F = 1, p member initial state I.
action member , propositions precondition must achieved
used. Hence, according definition F , (p)F (a)F action
plan . action member , (a)F = |A|. Thus, constraint
C5 satisfied action plan , regardless values (p)F .
Finally F satisfies constraint C6 action proposition precondition
p pre(a). first achiever p, i.e., E(a, p) = 0, constraint C6 satisfied
regardless values (p)F (a)F . first achiever p, then, according
definition F , (p)F = (a)F + 1 , satisfies constraint C6.
addition, exists feasible plan IP(T + ) feasible solution. IP(T + )
solved optimally, optimal plan + obtained according following proposition.
Proposition 2. Given feasible solution F IP(T + ), action sequence = (a0 , , )
obtained ordering actions set {a | U (a)F = 1} ascending order (a)F feasible
plan + .
Proof. First show satisfies condition (ii) plan (i.e., G I()) using proof
contradiction. Assume exists proposition g G satisfies g 6 I(). Then,
exists action achieving g . Since F solution IP(T + ), U (g)F = 1 due constraint
C1. Since g 6 I() implies g 6 I, I(g)F = 0. Therefore, satisfy constraint C4, must
exist action g add(a) E(a, g)F = 1. However, satisfy constraint C3,
U (a)F = 1 hold. means , contradicts assumption.
Next show satisfies condition (i) (i.e., i, pre(ai ) I((a0 , , ai1 ))). base
case inductive proof, assume exists proposition p P satisfying p pre(a0 )
p 6 I. Since a0 , U (a0 )F = 1 hold, U (p)F = 1 hold according
constraint U (p)F U (a0 )F . Then, similar proof condition (ii), must exist action
p add(a), U (a)F = 1, E(a, p)F = 1. However, satisfy constraint C5,
(p) (a0 ) must true, (a) + 1 (p) hold satisfy constraint C6. Therefore
U (a)F = 1 (a) < (a0 ), a0 first action , contradiction.
Similar case = 0, > 0, pre(ai ) I((a0 , , ai1 )) true, must
exist action 6 (a0 , , ai1 ) U (a)F = 1 (a) < (ai ), contradicting fact
ai i-th action sequence .
Corollary 1. Given optimal solution F IP(T + ), sequence actions built ordering
actions set {a | U (a)F = 1} ascending order (a)F optimal plan + .
P
+ ) 3|P | + 2|A| +
number variables

IP(T
|add(a)|. number constraints
P
P

Pless 2|P
P| + 2 aA |pre(a)| + 2 aA |add(a)|. number terms O(|P | +
|pre(a)| + |add(a)|).
639

fiI MAI & F UKUNAGA

4. Enhanced IP Model
IP(T + ) provides IP model exactly computing h+ , shall see Section 5
IP(T + ) competitive previous methods computing h+ . Thus, section,
introduce variable elimination techniques modifications constraints order
speed computation h+ . show experimental results, IPe (T + ),
incorporates enhancements, computes h+ significantly faster IP(T + ). enhancements adopted IP framework previous work planning research.
particular, landmark-based variable reduction method plays key role.
Note enhancements introduce constraints render solutions IP(T + )
mapped feasible plans + infeasible. However, show cases, least one
optimal plan always remain valid enhanced model, optimal cost enhanced
model still corresponds h+ .
4.1 Landmark-Based IP Model Reduction
landmark element needs used every feasible solution (Hoffmann, Porteous,
& Sebastia, 2004). use two kinds landmarks, called fact landmarks action landmarks
work Gefen Brafman (2012). fact landmark planning task proposition
becomes true state every feasible plan, action landmark planning task
action included every feasible plan. say fact action landmark
l landmark proposition p l landmark task hP, A, I, {p}i. Similarly say
landmark l landmark action l landmark task hP, A, I, pre(a)i.
IP model delete-free task + , proposition p fact landmark proposition
goal G, substitute U (p) = 1. Similarly, action action landmark,
substitute U (a) = 1. Landmark extraction substitution clearly prune feasible
solutions IP(T + ).
actually extract set landmarks satisfy intensional definitions, landmark
extraction algorithm necessary. easy see given
feasible delete-free task,
proposition
add
p P fact landmark p holds P, \ Ap , \ {p}, G infeasible,
= {a | p add(a)}. Similarly action action landmark
Aadd
p
hP, \ {a}, I, Gi infeasible. Hence, landmark candidate, test whether
landmark checking feasibility delete-free task excludes candidate.
feasibility delete-free task checked using following, straightforward algorithm based
delete-relaxed planning graph method Hoffmann Nebel (2001): fluent, let
e(p) {0, 1} represent whether p achievable not. action, let e(a) {0, 1} represent
whether preconditions satisfied not. Initially, e(p) = 1 p , e(p) = 0
fluents. e(a) = 0 a. step algorithm, actions
e(a) = 0 whose preconditions satisfied; (1) set e(a) = 1, (2) set e(p) = 1
e add(a). algorithm terminates reaches quiescence, i.e., actions
e(a) = 0 whose preconditions satisfied found. takes |A| steps.
repeating feasibility check facts actions, algorithm collects fact
landmarks action landmarks satisfying definitions O(|T + |2 )-time.
interested computing h+ once, straightforward method one
described would sufficient. However, since intend use h+ -based models
heuristic functions forward state-space search planning, landmark extraction needs
640

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

performed repeatedly search, efficiency extraction procedure important.
experimented several methods, describe effective method below.
method extracting landmarks based method Zhu Givan (2003),
proposed planning based propagation method collecting causal landmarks. method
later generalized Keyder et al. AND-OR graph based landmark extraction method (Keyder,
Richter, & Helmert, 2010).
Zhu Givan (2003) define proposition p causal landmark hP, \ Apre
p , \ {p}, Gi
pre
infeasible, Ap = {a | p pre(a)}. focus causal landmarks, ignoring
(non-causal) landmarks nonessential (even misleading) point view
guiding search algorithm uses landmark-based heuristic. contrast, use landmarks
order reduce number variables IP model delete relaxation. Thus, instead
focusing causal landmarks using Zhu Givans criteria, seek larger set landmarks
slightly modifying
criterion landmark
detection. hP, \ Apre
p , \ {p}, Gi

solution, P, \ Aadd
,

\
{p},
G
must


infeasible,
furthermore, using
p
pre
add
Ap instead Ap extract larger set fact landmarks. addition, Zhu Givan
used forward propagation algorithm based layered planning graph delete-free task
+ , use following, open-list based propagation algorithm.
proposition p, compute set fact landmarks p, using iterative method
based following update equations characterizing fact landmarks:
p member initial state I, {p} set fact landmarks achieve p.

p member I, set fact landmarks p {p} aA s.t.padd(a) (add(a)


p pre(a) (fact landmarks p )).
pseudocode open list based propagation algorithm shown Algorithm 1.
initialization phase, candidate set proposition p 6 set P , fact landmarks
p set {p} (Lines 1-3). addition, action inserted FIFO queue Q
satisfies pre(a) (Lines 4-7). main loop iterative method similar straightforward method described above. iteration, action retrieved Q, candidate
set fact landmarks updated p add(a) based second equation (Lines 12-14).
Moreover, method memorizes achievability p (Line 11), action inserted Q
members pre(a ) achievable candidate set p pre(a ) changed (Lines
15-17). process continues Q becomes empty. clarity simplicity, implementation details/optimizations omitted Algorithm 1, e.g., instead literally inserting every
member P L[p] Line 3, use single flag represent L[p] = P Updating candidate set always reduces number elements, method always terminates. Unlike
simpler O|T + |2 algorithm described above, algorithm complete (not landmarks
extracted). However, soundness method guaranteed following proposition.
Proposition 3. Given delete-free STRIPS planning task hP, A+ , I, Gi, assume propositions
P achieved. Let L(p) set fact landmark candidates p computed
landmark extracting method.
(i) L(p) = {p} p I,


(ii) L(p) = {p} aA s.t.padd(a) (add(a) p pre(a) L(p )) p 6
641

fiI MAI & F UKUNAGA

Algorithm 1 landmark extracting method
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:

// L[p] sets candidates fact landmarks p P .
L[p] P p 6 I;
L[p] {p} p I;
I;

insert FIFO queue Q pre(a) S;
end
Q empty
retrieve action Q.
p add(a)
{p}.

X L[p] (add(a) p pre(a) L[p ]);
L[p] 6= X
L[p] X.
Apre
p

insert Q pre(a ) 6 Q;
end
end
end
end
// point, L[p] contain sets fact landmarks p P .

satisfied, elements L(p) fact landmarks p.
Proof. Assume proposition q satisfies q L(p) q fact landmark p.
p 6= q since proposition fact landmark itself. Then, L(p) one
proposition, condition (i) (ii), p 6 holds. Since q landmark, exists
non-empty feasible plan delete-free task hP, A+ , I, {p}i achieve q.
Let = (a0 , , ) plan, let ai action achieves p first.
p 6= q stated above, andS
q 6 add(ai ) since achieve q. Hence, according
condition (ii), q p pre(ai ) L(p ). Let p member pre(ai ) satisfies q L(p ).
Since feasible plan achieve q, p achieved , thus p 6= q holds. Then,
L(p ) one proposition, again, p 6 holds. Hence, = (a0 , , ai1 )
non-empty feasible plan delete-free task hP, A+ , I, {p }i achieve q.
argument extended ad infinitum, length clearly finite,
contradiction. Thus, members L(p) fact landmarks p proposition p P .

addition fact landmarks extracted using procedure, algorithm
extracts action landmarks using criterion: proposition p fact landmark G,
one action achieve p, used action landmark G.
642

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

4.2 Relevance Analysis
Backchaining relevance analysis widely used eliminate propositions actions irrelevant task. action relevant (i) add(a) G 6= , (ii) exists relevant action
satisfying add(a) pre(a ) 6= . proposition p relevant (i) p G, (ii) exists
relevant action p pre(a) holds.
addition, noted Haslum et al. (2012), sufficient consider relevance respect subset first achievers add effect. Although defined first achiever
achievability proposition, equivalent following definition: action first
achiever proposition p p add(a) p fact landmark a. Let fadd(a) denote
{p add(a) | first achiever p}. sufficient use fadd instead add
definition relevance.
p P relevant, eliminate variable U (a) = 0 U (p) = 0.
addition this, p add(a) first achiever p, eliminate variable
E(a, p) = 0. possible fact landmark fact irrelevant, case set U (p) = 1.
variable elimination prunes feasible solutions, clearly prune optimal
solutions.
4.3 Dominated Action Elimination
delete-free task, two actions add effects, clearly sufficient use
one two actions. idea generalized following reduction,
eliminates useless (dominated) actions.
Proposition 4. Given feasible delete-free task + , exists optimal plan
contain exists action satisfying following: (i) fadd(a) fadd(a ), (ii)
p pre(a ), p fact landmark p I, (iii) c(a) c(a ).
Proof. plan = (a0 , , ai1 , a, ai+1 , , ) + , show sequence actions
= (a0 , , ai1 , , ai+1 , , ) feasible plan. proposition pre(a ) fact
landmark a, hence, pre(a) I((a0 , , ai1 )), pre(a ) I((a0 , , ai1 ))
holds. definition first achievers, add(a) \ fadd(a) I((a0 , , ai1 )),
I((a0 , , ai1 , a)) I((a0 , , ai1 , ). Therefore G I( ) ( feasible plan).
Finally, c() c( ) c(a) c(a ). Therefore, plan contains a, optimal,
exists another optimal plan contain a.
exists dominated action a, eliminate variable setting U (a) = 0.
variable elimination prunes feasible solutions IP(T + ). Moreover, sometimes prunes
optimal solutions c(a) = c(a ) holds condition (iii). However, shown proof
above, least one optimal solution remains.
slight generalization similar set constraints Robinson (2012)[Definition
5.3.4, p. 108] MaxSAT-based planner. Robinsons dominance condition checks whether (R1)
add(a) \ add(a ) \ I, (R2) pre(a ) \ pre(a) \ I, (R3) c(a) c(a ).
condition (iii) (R3) equivalent, condition (i) less strict condition (R1)
instead checking add effects, condition (i) tests whether propositions
first achiever subsumed . Furthermore, condition (ii) subsumes (R2)
proposition pre(a ) fact landmark a, pre(a) I((a0 , , ai1 )), pre(a )
I((a0 , , ai1 )) holds, satisfying (R2).
643

fiI MAI & F UKUNAGA

4.4 Immediate Action Application
delete-free task + , actions immediately applied initial state without
affecting optimality relaxed plan. adopt immediate application zero-cost actions
(Gefen & Brafman, 2011) well immediate application action landmarks (Gefen & Brafman,
2012). delete-free task + , action satisfies c(a) = 0 pre(a) I,
sequence made placing optimal plan hP, \ {a}, add(a), Gi optimal
plan + . Similarly, action action landmark + applicable I,
applied immediately.
IP(T + ) model, variables (p) p eliminated substituting zero
values. Given sequence immediately applicable actions (a0 , , ak ) (it must correct
applicable sequence), eliminate variables follows: (i) U (ai ) = 1, (ii) (ai ) = i,
(iii) p pre(ai ), U (p) = 1, (iv) p add(ai ) \ I((a0 , , ai1 )), U (p) = 1, (p) =
E(ai , p) = 1, (v) p add(ai ) \ I((a0 , , ai1 )), \ {a0 , , ai }, E(a, p) = 0.
4.5 Iterative Application Variable Eliminations
variable elimination techniques described interact synergistically
resulting cascade eliminations. Therefore, used iterative variable elimination algorithm
applies eliminations quiescence. order elimination applied shown
Algorithm 2. full landmark extraction pass variable elimination would extremely
expensive. Therefore, perform landmark extraction iterative application
eliminations.
Algorithm 2 Iterative Variable Elimination
relevance analysis;
landmark extraction;
variable eliminated
immediate action application;
dominated actions elimination;
relevance analysis;

4.6 Inverse Action Constraints
define following inverse relationship pair actions delete-free task + .
Definition 1 (inverse action). two actions a1 , a2 A, a1 inverse action a2 if: (i)
add(a1 ) pre(a2 ), (ii) add(a2 ) pre(a1 ).
definition, clear a1 inverse action a2 , a2 inverse action a1 .
Inverse actions satisfy following fact.
Proposition 5. Given delete-free task + , let = (a0 , , ) feasible plan. ai
inverse action aj , < j holds, = (a0 , , aj1 , aj+1 , , )
feasible plan.
Proof. Since feasible plan + , pre(ai ) I((a0 , , ai1 )) I((a0 , , aj1 )).
definition inverse actions, add(aj ) pre(ai ) holds, add(aj ) pre(ai ) I((a0 , , aj1 )) =
644

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

I((a0 , , aj )). Hence (aj+1 , , ) applicable I((a0 , , aj1 )), G I( ) =
I().
Corollary 2. delete-free task + , feasible solution = (a0 , , ) optimal
ai inverse action aj ai aj non-zero cost.
several possible ways use proposition (e.g., U (a) + U (a ) 1,
inv(a), inv(a) set inverse actions a). order avoid adding large number
constraints IP(T + ) model (|A/2|2 worst case half actions inverses
other), modify constraint C2 follows:
P
(C2a) A, p pre(a), U (p) inv(a,p) E(a , p) U (a), inv(a, p) denotes set
inverse actions p add effect.


Proposition 6. Given delete-free task + , IP(T + ) constraint C2 feasible solution,
optimal solution IP(T + ) constraint C2 feasible IP(T + ) constraint
C2a.
Proof. Let F optimal solution IP(T + ) constraint C2 derived optimal plan
+ . Since F satisfies constraints IP(T + ) constraint C2, suffices show
F satisfies constraint C2a action proposition p pre(a).
P
Recall feasible solution derived feasible plan satisfies s.t.padd(a ) E(a , p)
P
1 proposition p U (p) = 1, satisfies s.t.padd(a ) E(a , p) = 0
P
P
proposition p U (p) = 0. Since s.t.padd(a ) E(a , p) inv(a,p) E(a , p)
action proposition p pre(a), F clearly satisfies constraint C2a U (p)F = 1


U (a)F = 0,
Pif U (p)F = 0 U (a)F = 0 hold.

show inv(a,p) E(a , p)F = 0 holds U (a)F = U (p)F = 1, assume
exists action inv(a, p) E(a , p)F = 1. According constraint C3, U (a )F = 1.
However, since F derived optimal plan + , must exist optimal plan +
contains . contradicts Corollary 2.
Since F feasible solution, exist action proposition p pre(a)
U (a)F = 1 U (p)F = 0. Hence F satisfies constraint C2a
p pre(a).
4.7 IPe (T + ): Enhanced IP Model h+
define IPe (T + ) integer programming model result first adding inverse
action constraints described Section 4.6 basic IP(T + ) model applying iterative reduction algorithm Algorithm 2 (which applies reductions Sections 4.1-4.4)
quiescence. previously noted, IPe (T + ) computes h+ . shall see below, cumulative
effects enhancements quite significant, resulting much practical IP model
computing h+ . See Table 1 summary relationship IPe (T + ) IP(T + ).

5. Experimental Evaluation IP Models Delete-Free Planning (Exact
Computation h+ )
section, evaluate effectiveness integer programming model delete relaxation method solving delete-free tasks computing h+ exactly. evaluate following
models:
645

fiI MAI & F UKUNAGA

IP(T + ): basic IP model (Section 3).
IP(T + )+LM: IP(T + ) landmark-based variable reduction method (Section 4.1).
IPe (T + ): enhanced model includes enhancements described Sections
4.1-4.6 designed speed computation h+ (landmark-based reduction,
relevance analysis, dominated action elimination, immediate action application, inverse action constraints).
emphasize (unlike models evaluated later sections)
IP models compute h+ exactly.
Following previous work solvers delete-free problems, main results based
evaluation using delete-free versions standard IPC benchmark problems (Section 5.1).
addition, Section 5.2, present results much smaller scale study set natural,
delete-free problems systems biology (Gefen & Brafman, 2011).
5.1 Evaluation Delete-Free Versions IPC Benchmark Instances
Following methodology evaluating delete-free planning previous work (Haslum et al.,
2012; Pommerening & Helmert, 2012; Gefen & Brafman, 2012), evaluate IP models
solving International Planning Contest (IPC) benchmark instances delete effects
actions ignored. Below, experiments used CPLEX 12.61 solver solve integer
linear programs. experiments single-threaded executed Xeon E5-2680, 2.8GHz.
previous work computing h+ evaluated using several different sets
experimental settings (different CPU limits different problem instances), present results
4 sets comparisons. first 3 sets comparisons, compare benchmark results reported
previous publications results obtained running solvers problem instances,
fourth set results compares models improved implementation minimal
hitting set based approach (Haslum et al., 2012) one original authors.
Comparison results Pommerening Helmert (2012) (experimental setup described Section 5.1.1, results shown Table 2).
Comparison results Gefen Brafman (2012) (experimental setup described
Section 5.1.2, results shown Table 3).
Comparison results Haslum et al. (2012) (experimental setup described Section
5.1.2, results shown Table 4).
Comparison HST/CPLEX, improved implementation algorithm (Haslum
et al., 2012) (experimental setup described Section 5.1.3, results shown Table 5
Figures 2-3).
results copied previous work (Pommerening & Helmert, 2012; Haslum et al., 2012;
Gefen & Brafman, 2012) Tables 2-4 obtained using hardware available several years ago
original papers written, results IP(T + ), IPe (T + ), HST/CPLEX
obtained slightly recent hardware. Since coverage coarse metric based binary results (solved/unsolved), significantly impacted differences machine speed,
646

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

e.g., many problems threshold slightly faster machine (equivalent running
slightly longer) results many instances solved. order eliminate possibility
improvements hardware since 2010 (when first results compared
published) explain improvements obtained using approach, include results running best IP model (IPe (T + )) significantly shorter CPU time limit previous
experiments, addition results use CPU time limit previous experiments.
5.1.1 C OMPARISON R ESULTS P OMMERENING
ELETE -F REE V ERSIONS IPC B ENCHMARKS



H ELMERT (2012)



first comparison results Pommerening Helmert (2012). Table 2 shows
results running IP(T + ), IP(T + )+LM, IPe (T + ) 5 minute time limit 2GB memory
limitation. Coverage (# problem instances solved) domain shown. columns
solver name contains PH12 Table 2 copied paper Pommerening Helmert
(2012). FD/PH12 Fast Downward using A* LM-cut heuristic applied deleterelaxed problems, BC/PH12 hitting set based approach Bonet Castillo (2011),
BnB/PH12 IDA*/PH12 best performing strategies using incremental LM-cut
heuristic delete-free problems proposed Pommerening Helmert (2012). Pommerening
Helmert obtained results using AMD Opteron 2356 processor 2GB memory limit
5 minute time limit.
Table 2 includes column IPe (T + )/1min, shows results 1-minute runs
IPe (T + ). columns Table 4 5 minute runs.
5.1.2 C OMPARISONS R ESULTS G EFEN B RAFMAN (2012) H ASLUM ET AL .
(2012) ELETE -F REE V ERSIONS IPC B ENCHMARKS
Next, evaluated h+ solvers previous results obtained 30-minute time
limit 2GB memory limit. Table 3 compares IP(T + ), IP(T + )+LM, IPe (T + )
results (Gefen & Brafman, 2012, p. 62, Table 2). LM-cut/GB12 column A*
LM-cut heuristic (Helmert & Domshlak, 2009) applied directly delete-free instances order
compute h+ . LM-cut+Pruning/GB12 column A* LM-cut using pruning techniques
delete-free instances proposed Gefen Brafman (2012). Table 4 compares IP(T + )
IPe (T + ) results Haslum et al. (2012, p. 356, Table 1). BC/HST12 column
method Bonet Castillo (2011). ML/HST12 column minimal landmark method
proposed Haslum et al.. original work Haslum et al. (2012), minimum-cost hitting
set problem solved using specialized branch-and-bound algorithm, ML/HST12 column reflects performance original algorithm. However, Minimal Landmark method
later significantly improved replacing hitting set solver CPLEX-based solver
(Haslum, 2014b), Table 4 includes HST/CPLEX column, shows results
Minimal Landmark method using CPLEX hitting set solver. obtained HST/CPLEX
results running HST/CPLEX code machine used run IP models.
Table 4 includes column IPe (T + )/5min, shows results 5-minute runs
IPe (T + ) (all columns Table 4 30 minute runs).
Note Table 4, instances IPC2008 IPC2011 sequential satisfying track (i.e., -sat08 -sat11 domain names), accordance original paper
(Haslum et al., 2012).
647

fiI MAI & F UKUNAGA

5.1.3 C OMPARISON



HST/CPLEX



ELETE -F REE V ERSIONS IPC B ENCHMARKS

detailed comparison improved implementation hitting-set based method
Haslum et al. (2012). Although original version algorithm used problem-specific
branch-and-bound method solve hitting set problems, used recent version
Haslums h+ solver (source dated 2014-1-17), configured use CPLEX 12.61 solve hitting set subproblem. configuration abbreviated HST/CPLEX. shown Table
4, HST/CPLEX significantly outperforms original HST implementation described (Haslum
et al., 2012), compares favorably vs. previous methods.
Tables 5-6 Figures 2-3 compare IP(T + ), IPe (T + ), IP(T + )+LM, HST/CPLEX 1376
IPC benchmark instances. algorithms run 2GB memory limit. Table 5 shows results
30 minute time limit, Table 6 shows results 5 minute time limit. Tables 5
6 compares coverage runtimes per domain, Figure 2 compares cumulative number
instances solved function time, Figure 3 compares runtimes individual
instances.
contrast previous set experiments described Section 5.1.2, used optimal track
instances (-opt08 -opt11 domain names) satisficing optimal track
instances available benchmark sets. subsequent sections,
focus applying models basis heuristics forward-search, cost-optimal planning.
5.1.4 ISCUSSION R ESULTS ELETE -F REE V ERSIONS IPC B ENCHMARKS
surprisingly, basic IP(T + ) model competitive previous state-of-the-art methods specifically developed computing h+ (Haslum et al., 2012; Pommerening &
Helmert, 2012). However, Table 3 shows basic IP(T + ) model least competitive
A* LM-cut enhanced Gefen Brafmans pruning methods delete-free instances
(Prune/GB12). IP(T + ) significantly outperforms standard A* LM-cut (Table 3, LMcut/GB12 Table 2, FD/PH12).
hand, enhancing IP(T + ) landmark-based model reduction method results
significant improvement, IP(T + )+LM competitive previous methods except
HST/CPLEX.
IPe (T + ) model, includes enhancement described Section 4 reducing
model order compute h+ faster, performs well overall, competitive
previous methods. example, Table 4, IPe (T + ) highest coverage (or tied highest)
19/28 domains. Table 5, Figure 2, Figure 3 show IPe (T + ) HST/CPLEX
similar coverage 30-minute time limit, IPe (T + ) tends somewhat faster overall.
However, clear dominance relationship IPe (T + ) HST/CPLEX, since
domains IPe (T + ) clearly performs better (e.g., rovers, satellite, freecell) ,
domains HST/CPLEX performs better (e.g., airport, pegsol, scanalyzer, transport). Thus,
IP-based approach minimal landmark approaches seem complementary strengths
respect solving delete-free problems.
Aside coverage, Figure 3 shows many delete-free instances solved much faster
IPe (T + ) HST/CPLEX. difference solving easy delete-free instance 0.1
vs. 0.5 seconds may seem important need solve instance once. However,
speed difference IPe (T + ) HST/CPLEX easy delete-free instances
significant implication consider using h+ solvers heuristic functions A* -based
648

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

planners, may need solve delete-free problems many thousands times course
single A* search. result, see Section 7, A* using IPe (T + ) heuristic
significantly outperforms A* using HST/CPLEX heuristic.
order eliminate possibility CPU speed differences account qualitative improvements coverage obtained IP models compared previously published results, Table
2 includes column IPe (T + )/1min, result 1-minute runs IPe (T + ), Table
4 includes column IPe (T + )/5min, result 5-minute runs IPe (T + ) effect,
simulate machines run 1/5 1/6 (respectively) speed machine used
experiments Tables 2 4. offsets improvements single-core CPU
performance 2010-2015. coverage achieved IPe (T + )/1min (753) Table 2
higher solvers Table 2 given 5 minutes. Similarly, coverage
achieved IPe (T + )/5min (847) Table 4 higher solvers Table 4
given 30 minutes.
Therefore, overall, IPe (T + ) competitive previous state-of-the-art delete-free solvers,
results indicate direct computation h+ using integer programming viable approach,
least computing delete-free task once.
5.2 Comparison HST/CPLEX Minimal Seed Set Problem
assess performance best IP model, IPe (T + ) natural, delete-free task,
compared IPe (T + ) HST/CPLEX set minimal seed set problem instances systems
biology (Gefen & Brafman, 2011). consist 22 instances originally evaluated Gefen
Brafman, well three additional versions 22 instances provided
original authors, version uses different set action costs (Gefen & Brafman, 2011, p.
322), total 22 4 = 88 instances. solvers run 1 hour CPU time limit per
instance 2GB RAM limit.
Figure 4 shows scatter plot comparing runtimes problem instance. coverage
IPe (T + ) 87 instances, coverage HST/CPLEX 88 instances. one hand,
Figure 4 shows majority instances solved significantly faster IPe (T + ),
IPe (T + ) solves 22 instances 10 times faster HST/CPLEX. hand,
one instance HST/CPLEX 10 times faster IPe (T + ),
one instance solved 40.7 seconds HST/CPLEX solved within
time limit IPe (T + ) (The dre instance type 2 preprocessing Gefen & Brafman,
2011, p. 322).

6. Relaxations h+ Models
Although delete-free planning problems interesting right, main motivation
developing efficient IP model delete-free problems able use basis
heuristic function forward-state space search based domain-independent planner. far,
presented IP(T + ), basic IP model computes h+ , proposed IPe (T + ),
incorporates number enhancements which, shown experimental results Section
5, significantly increase scalability model provide new approach computing h+
competitive previous state-of-the-art methods. possible simply use IPe (T + )
heuristic function forward search based planner. However, shown Section 5,
computing h+ remains relatively expensive even using IPe (T + ), surprising, given
649

fiI MAI & F UKUNAGA

(Pommerening & Helmert, 2012, Table 2)
Domain (# problems)
airport(50)
blocks(35)
depot(22)
driverlog(20)
freecell(80)
grid(5)
gripper(20)
logistics00(28)
logistics98(35)
miconic(150)
no-mprime(35)
no-mystery(30)
openstacks-opt08(30)
pathways-noneg(30)
pipes-notankage(50)
pipes-tankage(50)
psr-small(50)
rovers(40)
satellite(36)
tpp(30)
trucks(30)
zenotravel(20)
Total coverage (876)
# Best Domains

IP(T + )

IP(T + )+LM

IPe (T + )

IPe (T + )/1min

FD/PH12

BC/PH12

BnB/PH12

IDA*/PH12

solved
22
35
6
14
11
0
20
24
8
150
15
15
2
30
8
5
50
40
31
11
30
14
541
7

solved
36
35
19
14
17
4
20
28
21
150
20
21
30
30
13
9
50
40
30
24
30
14
655
9

solved
36
35
21
15
80
5
20
28
27
150
31
30
30
30
11
9
50
40
34
30
30
20
762
19

solved
35
35
21
14
80
5
20
28
24
150
30
28
30
30
10
9
50
40
34
30
30
20
753
15

solved
34
35
7
14
6
1
20
23
9
150
27
26
5
5
17
10
50
13
6
13
7
13
491
5

solved
50
35
5
2
1
1
20
26
7
150
14
16
0
4
3
2
50
12
6
12
3
8
427
5

solved
50
35
14
15
2
2
20
28
16
150
27
28
5
5
18
9
50
19
8
23
9
13
546
7

solved
50
35
14
15
3
2
20
28
15
150
26
28
4
5
19
10
50
19
9
24
9
13
548
9

Table 2: Coverage (# instances solved) delete-free problems (exact computation h+ ).
5-minute time limit (except IPe (T + )/1min run 1-minute time limit), 2GB
RAM. Comparison data Table 2 paper Pommerening Helmert (2012). #
Best domains number domains solver achieves highest coverage
(including ties).
(Gefen & Brafman, 2012, Table 2)
Domain (# problems)
blocks(35)
depot(22)
driverlog(20)
freecell(80)
gripper(20)
logistics00(28)
logistics98(35)
miconic(150)
no-mystery(30)
pipesworld-notankage(50)
pipesworld-tankage(50)
rovers(40)
Total coverage (560)
# Best Domains

IP(T + )

IP(T + )+LM

IPe (T + )

LM-cut/GB12

Prune/GB12

solved
35
8
14
12
20
24
8
150
21
11
7
40
350
4

solved
35
19
14
20
20
28
23
150
23
17
9
40
398
6

solved
35
21
15
80
20
28
28
150
30
17
9
40
473
11

solved
35
7
14
6
20
23
10
150
26
17
10
13
331
5

solved
35
12
15
2
20
28
16
150
26
9
9
23
345
5

Table 3: Coverage (# instances solved) delete-free problems (exact computation h+ ).
30-minute time limit, 2GB RAM. Comparison data Table 2 paper Gefen
Brafman (2012).

650

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

(Haslum et al, 2012,
Table 2)
IP(T + )

Domain (# problems)
airport(50)
barman-sat11(20)
blocks(35)
depot(22)
driverlog(20)
elevators-sat08(30)
floortile-sat11(20)
freecell(80)
gripper(20)
logistics98(35)
logistics00(28)
miconic(150)
no-mprime(35)
nomystery-sat11(20)
parcprinter-08(30)
pegsol-08(30)
pipesworld-notankage(50)
pipesworld-tankage(50)
psr-small(50)
rovers(40)
satellite(36)
scanalyzer-08(30)
sokoban-sat08(30)
transport-sat08(30)
trucks(30)
visitall-sat11(20)
woodworking-sat08(30)
zenotravel(20)
Total coverage (1041)
# Best Domains

solved
22
7
35
8
14
1
19
12
20
8
24
150
20
11
30
25
11
7
50
40
31
10
25
2
30
8
29
15
664
7

IP(T + )+LM

solved
40
8
35
19
14
5
20
20
20
23
28
150
23
13
30
24
17
9
50
40
31
10
29
3
30
7
30
15
743
10

IPe (T + )

solved
39
9
35
21
15
30
20
80
20
28
28
150
34
19
30
26
17
9
50
40
34
10
29
7
30
8
30
20
868
19

HST/CPLEX

solved
50
20
35
20
14
30
12
76
20
20
28
150
31
7
30
30
24
10
50
32
14
21
30
15
30
16
29
14
858
16

IPe (T + )

HST/CPLEX

5min

5min

solved
36
6
35
21
15
30
19
80
20
27
28
150
31
19
30
25
11
9
50
40
34
9
29
6
30
7
30
20
847
16

solved
50
20
35
20
14
30
12
48
20
18
28
150
26
4
30
30
17
10
50
31
11
16
30
12
30
10
29
12
793
12

ML/HST12

BC/HST12

solved
50
18
35
18
13
27
12
17
20
15
27
150
28
5
30
30
20
15
50
18
8
15
30
6
30
2
19
13
721
10

solved
50
5
35
12
8
11
9
0
20
6
27
99
17
4
30
30
9
6
50
19
5
4
30
6
30
0
9
10
541
8

Table 4: Coverage (# instances solved) delete-free problems (exact computation h+ ).
30-minute time limit (except IPe (T + )/5min HST/CPLEX/5min run 5minute time limit), 2GB RAM. Comparison data Table 2 paper Haslum et al.
(2012).

651

fiI MAI & F UKUNAGA

IP(T + )/30min

Domain (# problems)
airport(50)
barman-opt11(20)
blocks(35)
depot(22)
driverlog(20)
elevators-opt08(30)
elevators-opt11(20)
floortile-opt11(20)
freecell(80)
grid(5)
gripper(20)
logistics98(35)
logistics00(28)
miconic(150)
no-mprime(35)
no-mystery(30)
nomystery-opt11(20)
openstacks(30)
openstacks-opt08(30)
openstacks-opt11(20)
parcprinter-08(30)
parcprinter-opt11(20)
parking-opt11(20)
pathways-noneg(30)
pegsol-08(30)
pegsol-opt11(20)
pipesworld-notankage(50)
pipesworld-tankage(50)
psr-small(50)
rovers(40)
satellite(36)
scanalyzer-08(30)
scanalyzer-opt11(20)
sokoban-opt08(30)
sokoban-opt11(20)
tpp(30)
transport-opt08(30)
transport-opt11(20)
trucks(30)
visitall-opt11(20)
woodworking-opt08(30)
woodworking-opt11(20)
zenotravel(20)
Total coverage (1376)
# Best Domains

solved

22
8
35
8
14
2
1
20
12
0
20
8
24
150
20
21
13
5
3
0
30
20
2
30
25
13
11
7
50
40
31
10
7
29
20
13
4
0
30
20
30
20
15

time
253.97
1616.97
0.08
151.07
19.05
294.94
525.76
4.67
130.82
0
0.02
194.01
12.21
0.08
202.01
187.66
180.88
114.55
506.63
0
0.08
0.06
529.75
1.50
229.13
360.87
370.96
154.58
0.03
11.77
35.88
306.24
442.44
34.12
39.14
256.03
289.63
0
1.94
3.97
2.04
2.40
35.54
843
14

IP(T + )+LM/30min
solved

40
8
35
19
14
20
13
20
20
4
20
23
28
150
23
23
17
25
30
20
30
20
18
30
24
14
17
9
50
40
31
10
7
29
20
24
4
0
30
20
30
20
15

time
173.58
1522.41
0.00
12.75
15.77
201.74
179.16
1.76
259.96
5.59
0.02
89.77
0.03
0.09
221.48
129.89
224.40
82.48
0.08
0.04
0.04
0.03
172.21
1.13
39.01
105.91
198.51
22.87
0.02
0.34
38.40
292.41
439.54
0.61
0.47
55.71
45.00
0
0.70
1.76
0.52
0.47
36.69
1044
17

IPe (T + )/30min
solved

39
20
35
21
15
30
20
20
80
5
20
28
28
150
34
30
20
30
30
20
30
20
20
30
26
15
17
9
50
40
34
10
7
30
20
30
15
16
30
20
30
20
20

time sd
134.68 452.99
14.29 40.80
0.00 0.00
0.92 1.90
5.47 18.32
0.38 0.46
0.32 0.42
1.08 3.02
0.32 0.21
6.50 11.29
0.00 0.00
39.07 132.25
0.01 0.02
0.01 0.01
53.06 132.87
12.84 44.49
0.11 0.11
0.39 1.09
0.01 0.01
0.01 0.01
0.02 0.01
0.01 0.01
0.30 0.23
0.05 0.03
40.72 126.79
86.91 183.21
221.80 306.90
18.39 44.42
0.01 0.05
0.13 0.22
0.96 1.64
86.52 173.64
129.49 213.41
56.97 305.42
0.23 0.28
4.58 9.54
151.31 421.56
203.80 424.60
0.03 0.02
1.07 2.93
0.02 0.01
0.02 0.01
3.21 9.13
1214
34

HST/CPLEX/30min
solved

50
20
35
20
14
30
20
15
76
5
20
20
28
150
31
30
8
27
30
20
30
20
20
30
30
20
24
10
50
32
14
21
13
30
20
28
27
20
30
20
30
20
14

time sd
9.99 36.34
0.04 0.08
0.00 0.00
3.50 8.70
17.30 56.93
0.09 0.07
0.07 0.04
54.56 193.72
320.71 433.35
1.41 1.61
0.01 0.01
146.85 339.48
0.03 0.06
0.04 0.05
106.60 242.37
12.43 29.27
0.36 0.49
81.80 258.73
0.04 0.04
0.03 0.02
0.07 0.12
0.04 0.05
15.97 30.89
2.55 3.08
0.01 0.01
0.01 0.01
223.55 358.14
4.32 11.94
0.01 0.05
34.36 123.88
205.10 384.71
242.91 460.55
338.77 536.07
0.07 0.12
0.07 0.13
142.13 272.08
100.16 146.57
18.30 35.03
1.32 2.10
0.21 0.38
0.15 0.27
0.09 0.07
179.65 453.63
1202
31

Table 5: Detailed comparison IP(T + ), IP(T + )+LM, IPe (T + ), HST/CPLEX 1376 deletefree tasks (exact computation h+ ). 30-minute time limit, 2GB RAM. Coverage mean
standard deviation runtimes (average successful runs only, excludes unsuccessful runs).

652

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

IP(T + )/5min

Domain (# problems)
airport(50)
barman-opt11(20)
blocks(35)
depot(22)
driverlog(20)
elevators-opt08(30)
elevators-opt11(20)
floortile-opt11(20)
freecell(80)
grid(5)
gripper(20)
logistics98(35)
logistics00(28)
miconic(150)
no-mprime(35)
no-mystery(30)
nomystery-opt11(20)
openstacks(30)
openstacks-opt08(30)
openstacks-opt11(20)
parcprinter-08(30)
parcprinter-opt11(20)
parking-opt11(20)
pathways-noneg(30)
pegsol-08(30)
pegsol-opt11(20)
pipesworld-notankage(50)
pipesworld-tankage(50)
psr-small(50)
rovers(40)
satellite(36)
scanalyzer-08(30)
scanalyzer-opt11(20)
sokoban-opt08(30)
sokoban-opt11(20)
tpp(30)
transport-opt08(30)
transport-opt11(20)
trucks(30)
visitall-opt11(20)
woodworking-opt08(30)
woodworking-opt11(20)
zenotravel(20)
Total coverage (1376)
# Best Domains

solved

22
0
35
6
14
1
0
20
11
0
20
8
24
150
15
15
11
5
2
0
30
20
0
30
22
9
8
5
50
40
31
7
4
28
19
11
3
0
30
20
30
20
14

time sd
0.82
0
0.08
29.35
17.33
25.40
0
4.74
73.07
0
0.02
20.45
11.64
0.08
28.01
9.35
37.85
66.39
16.89
0
0.07
0.05
0
1.53
74.55
131.78
5.53
31.71
0.03
10.26
29.87
57.26
34.20
27.27
22.22
12.42
8.64
0
1.60
3.80
1.98
2.17
4.02
790
13

IP(T + )+LM/5min

time
0.33
0
0.00
12.85
17.04
41.09
30.13
1.64
43.14
5.39
0.02
19.56
0.03
0.08
30.02
27.74
42.15
31.37
0.08
0.04
0.03
0.03
69.50
1.14
16.60
36.09
37.58
21.57
0.02
0.33
28.81
48.99
15.28
0.58
0.46
49.31
43.16
0
0.67
1.83
0.49
0.46
1.04

solved

36
0
35
19
14
16
11
20
17
4
20
21
28
150
20
21
14
24
30
20
30
20
15
30
23
12
13
9
50
40
30
7
4
29
20
24
4
0
30
20
30
20
14
994
17

IPe (T + )/5min
solved

36
20
35
21
15
30
20
20
80
5
20
27
28
150
31
30
20
30
30
20
30
20
20
30
25
13
11
9
50
40
34
9
6
29
20
30
13
13
30
20
30
20
20

time sd
4.10 23.83
13.60 38.23
0.00 0.00
0.93 1.95
5.86 19.83
0.39 0.47
0.31 0.41
1.05 2.93
0.30 0.20
6.35 11.05
0.00 0.00
13.94 36.73
0.01 0.02
0.01 0.01
14.91 51.52
12.04 41.80
0.10 0.10
0.37 1.00
0.01 0.01
0.01 0.01
0.01 0.01
0.01 0.01
0.29 0.22
0.04 0.03
16.24 37.01
16.65 20.17
16.55 52.18
14.65 34.93
0.01 0.04
0.13 0.23
1.03 1.79
41.39 56.98
52.22 66.89
0.25 0.33
0.23 0.28
4.60 9.66
11.60 24.25
28.55 42.33
0.03 0.02
1.11 3.08
0.02 0.01
0.02 0.01
3.38 9.70
1190
33

HST/CPLEX/5min
solved

50
20
35
20
14
30
20
14
48
5
20
18
28
150
26
30
8
24
30
20
30
20
20
30
30
20
17
10
50
31
11
16
9
30
20
24
24
20
30
20
30
20
12

time sd
9.44 34.94
0.04 0.08
0.00 0.00
3.47 8.57
17.03 56.02
0.08 0.07
0.07 0.04
2.80 4.21
60.87 80.81
1.37 1.54
0.01 0.00
34.28 67.68
0.03 0.06
0.04 0.05
11.27 23.42
12.88 30.69
0.34 0.46
12.20 35.90
0.04 0.04
0.03 0.02
0.07 0.11
0.04 0.05
15.07 28.61
2.47 2.92
0.01 0.01
0.01 0.01
21.71 35.68
4.31 11.93
0.01 0.05
12.55 28.76
16.92 40.99
21.91 45.07
23.20 54.45
0.07 0.12
0.07 0.13
46.47 81.70
56.58 87.08
17.45 32.84
1.74 3.16
0.21 0.38
0.14 0.26
0.08 0.07
20.86 65.51
1134
31

Table 6: Detailed comparison IP(T + ), IP(T + )+LM, IPe (T + ), HST/CPLEX 1376 deletefree tasks (exact computation h+ ). 5-minute time limit, 2GB RAM. Coverage mean
standard deviation runtimes (average successful runs only, excludes unsuccessful runs).

653

fiI MAI & F UKUNAGA

1400
1200

Instances solved

1000
800
600
400
IPe(T+)
HST/CPLEX

200
0
0.0001

IP(T+)+LM
IP(T+)

0.001

0.01

0.1

1

10

100

1000

Time (seconds)
Figure 2: Comparison IP(T + ), IP(T + )+LM, IPe (T + ), HST/CPLEX delete-free tasks
(exact computation h+ ). 30-minute time limit, 2GB RAM. cumulative number instances
(out 1376 instances Table 5) solved within ime seconds shown.
computing h+ NP-equivalent (Bylander, 1994). Haslum (2012) reported previous, baseline
results using direct computation h+ using hitting-set method proposed earlier work
(Haslum et al., 2012) heuristic A* , reported poor results. Although show Section
7 A* using IPe (T + ) performs well domains, using h+ directly heuristic A*
continues pose significant challenge. Thus, turn next relaxations IP(T + ) IPe (T + )
lower bounds h+ computed faster, making suitable admissible
heuristics forward-search planner IP models.
6.1 LP(T + ) LPe (T + ): LP Relaxations Delete-Relaxation (h+ ) Models
linear programming (LP) relaxations IP models obvious candidates tractable
alternatives computing h+ using IP(T + ) IPe (T + ). LP-relaxations trivially derived
IP models eliminating integer constraints variables, optimal cost
LP-relaxation lower bound optimal cost IP. denote LP relaxation
IP(T + ) LP(T + ) LP relaxation IPe (T + ) LPe (T + ) (see Table 1). case
problem domains integer action costs, ceiling LP costs used.
Although LPe (T + ) solved quickly, tight theoretical bounds gap IP(T + )
LP(T + ) gap IPe (T + ) LPe (T + ) difficult obtain proven
Betz Helmert (2009) exists constant c > 0 polynomial-time algorithm
computing lower bound h states s, h(s) ch+ , unless P = N P (i.e.,
h+ polynomial-time approximable constant factor c). Fortunately, worst-case
654

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

100*x

10*x

x

x/100

x/10

1

10

100

1000
100

IPe(T+)

10
1
0.1
0.01
0.001
0.001

0.01

0.1

1000

HST/CPLEX

Figure 3: Comparison runtimes IPe (T + ) HST/CPLEX 1376 delete-free instances (exact computation h+ , instances Table 5). 30-minute time limit, 2GB RAM. point represents problem instance. x-axis represents runtime HST/CPLEX, y-axis represents runtime
IPe (T + ). example, point diagonal (y = x) indicates IPe (T + ) solved problem represented point faster HST/CPLEX, point = x/10 line indicates IPe (T + )
solved problem represented point least 10 times faster HST/CPLEX. algorithm failed
solve instance within 30-minute time limit, runtime shown 1800 seconds.

theoretical approximation results necessarily apply real-world problem instances. fact,
experimental results show LP-relaxations often provide fast, accurate, lower
bounds h+ standard planning benchmark problems.
6.2 Time-Relaxation h+ Models
motivation embed computation h+ (or approximation thereof) admissible
heuristic A* , necessarily interested actual optimal delete-free plan + ,
cost plan (or approximation). particular, exact order actions
executed delete-relaxed plan matter, necessity time-related variables
brought question.
time-relaxation IP(T + ), IP(T + ) without constraints C5 C6, denoted
IPtr (T + ). LP relaxation IPtr (T + ) denoted LPtr (T + ). Table 1 summarizes relationships among models.
propositions actions task satisfy conditions, eliminating time-related
variables affect cost optimal solution IP(T + ). example, relaxed
causal AND/OR graph (Gefen & Brafman, 2012) task cycle,
decide values (p) (a) constraints C5 C6 IP(T + ) satisfied in655

fiI MAI & F UKUNAGA

1000

IPe(T+)

100
10
1

0.1
0.01
0.001
0.001

x
10*x
x/10
0.01

0.1

1

10

100

1000

HST/CPLEX

Figure 4: Runtime comparisons IPe (T + ) HST/CPLEX minimal seed set problem (88 natural,
delete-free instances Gefen & Brafman, 2011). 60-minute time limit, 2GB RAM. point represents
problem instance. algorithm failed solve instance within 60-minute time limit, runtime
shown 3600 seconds. coverage IPe (T + ) 87 instances, coverage HST/CPLEX
88 instances.

dependently values variables, case optimal costs IP(T + )
LP(T + ) optimal costs IPtr (T + ) LPtr (T + ), respectively.
Indeed, shall show experimentally Section 6.3 relaxation quite tight, i.e.,
IP(T + ) IPtr (T + ) often cost, IPtr (T + ) computed significantly faster IP(T + ). Similarly, LPtr (T + ), LPetr (T + ), IPetr (T + ), time-relaxations
LP(T + ), LPe (T + ), IPe (T + ), computed much faster non-time-relaxed
counterparts.
6.3 Experimental Evaluation LP Time Relaxation Gaps
evaluated quality LP(T + ), LPe (T + ), LPetr (T + ) linear programming bounds described comparing optimal costs computed bounds exact h+ values (computed
using IPe (T + )). used set 1376 instances Table 5. Table 7 shows mean ratio
optimal cost LP model h+ , instances h+ could computed using
IPe (T + ). perfect columns indicate fraction instances optimal cost
LP model equal h+ . Note used ceiling LP cost, since IPC benchmark
instances integer costs. stacked histogram representation data (aggregated
domains) classifies ratios optimal costs LP relaxations value h+
shown Figure 5.
expect variable-fixing constraints enhanced LPe (T + ) model would
tend increase value optimal solution LPe (T + ) compared optimal value
base LP relaxation, LP(T + ). addition, would expect optimal value LPe (T + )
would tend greater optimal value time relaxation, LPetr (T + ). Table 7 shows
656

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

general, LPe (T + ) LPetr (T + ) LP(T + ). 10/43 domains, LPe (T + ) matches h+ perfectly,
i.e., LPe (T + )/h+ = 1. 20/43 domains, LPe (T + )/h+ 0.95. almost every single domain,
optimal LP value enhanced model LPe (T + ) significantly better (higher) basic
formulation LP(T + ), confirming variable elimination additional constraints serve
tighten LP bound. Thus, enhancements basic model described Section 4 provide
significant benefit beyond speedups demonstrated Section 5. time-relaxation
LPetr (T + ) usually close LPe (T + ), indicating time relaxation potentially
achieve good tradeoff computation cost accuracy (and fact, see later
Section 7, LPetr (T + ) performs quite well used heuristic A* ).
comparison, evaluated ratio value LM-cut heuristic (Helmert &
Domshlak, 2009) h+ . Comparing average ratios lower bound h+ , see that:
LP(T + ) less informative LM-cut 31 domains, informative LM-cut 5
domains, equivalent 6 domains.
LPe (T + ) less informative LM-cut 16 domains, informative LM-cut
19 domains, equivalent 8 domains.
LPetr (T + ) less informative LM-cut 17 domains, informative LM-cut
17 domains, equivalent 9 domains.
Thus, LM-cut better approximation h+ basic LP-relaxation, LP(T + ),
LPetr (T + ) roughly equivalent LM-cut. Interestingly, LP-relaxation approach appears highly complementary cost-partitioning approach LM-cut,
LP-relaxation LM-cut informative roughly half cases
compared other.

LPe (T + )

1

1.0
[0.8-1.0)
[0.6-0.8)
[0.4-0.6)
[0.2-0.4)
[0.0-0.2)

0.9

Fraction Instances

0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0

LP

LP

e

LP

e
tr

Figure 5: Ratio optimal LP costs h+ , categorized buckets. [x:y) = fraction
instances ratio LP/h+ range [x:y). example, fraction instances
ratio optimal value LPetr (T + ) h+ range [0.8,1,0) approximately
0.24 (this stacked histogram based data Table 6.3).
657

fiI MAI & F UKUNAGA

LM-cut
perfect
1.00
.74
.74
0
.99
.97
.64
0
.89
.20
.77
.06
.80
.10
.94
.05
.29
0
.67
.40
1.00
1.00
.98
.40
.99
.92
1.00
1.00
.76
.20
.79
.28
.93
.50
.61
0
1.00
1.00
1.00
1.00
.99
.70
.99
.65
.87
0
.87
.13
.60
.26
.55
.05
.68
.02
.75
0
1.00
1.00
.87
.12
.95
.23
.95
.32
.97
.26
.94
.53
.96
.60
.98
.55
.87
.03
.84
.05
.92
0
.69
.10
.89
.13
.88
.10
.95
.50

LM-cut/h+

airport
barman-opt11
blocks
depot
driverlog
elevators-opt08
elevators-opt11
floortile-opt11
freecell
grid
gripper
logistics98
logistics00
miconic
no-mprime
no-mystery
nomystery-opt11
openstacks
openstacks-opt08
openstacks-opt11
parcprinter-08
parcprinter-opt11
parking-opt11
pathways-noneg
pegsol-08
pegsol-opt11
pipesworld-notankage
pipesworld-tankage
psr-small
rovers
satellite
scanalyzer-08
scanalyzer-opt11
sokoban-opt08
sokoban-opt11
tpp
transport-opt08
transport-opt11
trucks
visitall-opt11
woodworking-opt08
woodworking-opt11
zenotravel

LP(T + )
perfect
.46
.02
.17
0
.92
.20
.50
0
.85
.10
.21
0
.20
0
.95
.10
.12
0
.31
.20
1.00
1.00
.39
.02
.46
.03
1.00
1.00
.42
0
.39
0
.96
.60
.23
.03
1.00
1.00
1.00
1.00
.99
.66
.99
.70
.88
0
.90
.13
.26
.03
.20
0
.52
0
.58
0
.87
.82
.48
0
.82
.13
.94
.30
.96
.25
.33
.13
.28
.15
.28
.13
.08
0
.09
0
.40
0
.98
.65
.81
0
.80
0
.91
.25

LP(T + )/h+

LPe (T + )
perfect
.98
.94
.38
0
1.00
1.00
.92
.22
.87
.21
.65
0
.64
0
.95
.10
.94
.35
.81
.20
1.00
1.00
.89
.11
.99
.85
1.00
1.00
.71
.33
.77
.33
1.00
.95
1.00
.96
1.00
1.00
1.00
1.00
.99
.66
.99
.70
.92
.10
.98
.60
.64
.03
.65
0
.83
.38
.93
.55
1.00
1.00
.65
.35
.82
.21
.94
.75
.96
.71
.95
.73
.97
.80
.85
.26
.35
.08
.41
0
1.00
1.00
.98
.65
1.00
1.00
1.00
1.00
.92
.31

LPe (T + )/h+

LPetr (T + )
+
LPe
(T
)/h+
perfect
tr
.98
.38
1.00
.91
.83
.64
.62
.95
.92
.79
1.00
.88
.99
1.00
.63
.72
1.00
.88
1.00
1.00
.99
.99
.87
.98
.64
.65
.79
.91
1.00
.65
.82
.94
.96
.94
.97
.85
.35
.41
1.00
.97
1.00
1.00
.89

.70
0
1.00
.18
.05
0
0
.10
.23
.20
1.00
.05
.78
1.00
.17
.30
.95
1.00
1.00
1.00
.66
.70
0
.60
.03
0
.08
.36
1.00
.30
.20
.34
.29
.66
.75
.26
.03
0
1.00
.65
1.00
1.00
.30

Table 7: Gaps LP models h+ : mean ratio LP model h+ (on 1228
instances solved using IPe (T + ) shown. perfect columns indicate fraction instances
optimal cost LP model equal h+ .

658

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

Figure 6 compares runtimes CPLEX LP solver relaxed h+ models. LPe (T + )
significantly faster LP(T + ), solving many instances 2-10 times faster (and solving instances 10 times faster), demonstrating benefits enhanced model. comparison LPetr (T + ) LPe (T + ) shows using time relaxation results addition speedup
factor 2. additional speedup may seem significant solving
single LP instance takes fraction second, cumulative effects using LP models heuristic forward-search based planning significant, show Section 7,
results increased coverage using LPetr (T + ) heuristic A* , compared LPe (T + ).

100

100

10

10

LPetr(T+)

1000

LPe(T+)

1000

1

0.1

0.1

x
10*x
2*x
x/2
x/10

0.01
0.001
0.001

1

0.01

0.1

1

LP(T+)

10

100

x
10*x
2*x
x/2
x/10

0.01

1000

0.001
0.001

0.01

0.1

1

LPe(T+)

10

100

1000

Figure 6: Runtime comparisons relaxed h+ models. 1376 delete-free instances (exact computation
h+ , instances Table 5). 30-minute time limit, 2GB RAM. point represents problem instance.
left subfigure compare LP(T + ) vs LPe (T + ), showing impact enhancements basic LP
model, right subfigure compares LPe (T + ) vs LPetr (T + ), showing impact time relaxation.
algorithm failed solve instance within 30-minute time limit, runtime shown 1800
seconds.

7. Cost-Optimal Planners Using h+ -Based Heuristics
embedded IP LP models introduced far A* -based, cost-optimal
forward search planner (our planner implementation, uses propositional representation
internally) evaluated performance. Note particular experiment limited admissible heuristics whose value bounded h+ . later results Section 8 9 include
heuristics necessarily bounded h+ . Specifically, evaluated following
solver configurations:
A* /IP(T + ) : A* basic delete-free IP model IP(T + ) heuristic.
A* /IPe (T + ) : A* enhanced delete-free IP model IPe (T + ) heuristic.
A* /LPe (T + ) : A* LP relaxation enhanced delete-free IP model IPe (T + )
heuristic.
A* /LPetr (T + ) : A* LP relaxation time-relaxed, enhanced delete-free IP model
IPe (T + ) heuristic.
659

fiI MAI & F UKUNAGA

hsp/HST/CPLEX : A* heuristic hitting-set based h+ solver HST/CPLEX
(Haslum et al., 2012) using CPLEX solve hitting set instances (hsp planner provided
Patrik Haslum).
FD/hmax : Fast Downward using hmax heuristic (Bonet & Geffner, 2001).
FD/LM-cut : Fast Downward using landmark cut heuristic (Helmert & Domshlak, 2009)
(the standard seq-opt-lmcut configuration)
per standard IPC sequential optimal track settings, solver configurations run
30 minute time limit per problem 2GB RAM limit. set 1376 instances IPC1998IPC-2011 used. planner currently handles STRIPS subset PDDL action costs.
Table 8 compares coverage heuristics. Figure 7a shows cumulative coverage
(out 1376) solved function time solver configurations compared Table 8,
Figure 7b shows cumulative coverage function number node evaluations (calls
heuristic function A* ).
compare IP/LP-based A* -heuristics planners, note significant implementation-level differences heuristic function affect execution
speed. example, Fast Downward uses multi-valued SAS+ representation (Backstrom & Nebel,
1995) internally represent states, planner uses STRIPS propositional representation,
significant differences internal data structures implementation details. Thus,
results used qualitative comparisons.
Table 8 shows A* /IP(T + ), uses basic IP(T + ) model, worst coverage
among IP models (403), comparable A* /HST/CPLEX(398). noted Haslum
(2012), straightforward use h+ heuristic unsuccessful (even worse FD using
hmax , coverage 540) cost computing h+ search node high.
However, shown Section 5, solving IPe (T + ) IP model significantly faster
IP(T + ) A* /HST/CPLEX. makes much viable heuristic function A* ,
result, A* /IPe (T + ) coverage 635, significantly outperforming A* /HST/CPLEX
well FD/hmax.
shown Section 6.3, LP relaxations IP models provide relatively tight lower
bounds h+ . Since LP models solved much faster IP, quite effective
used heuristics A* . Thus, A* /LPe (T + ), uses LP-relaxation enhanced
IPe (T + ) model, coverage 696, A* /LPetr (T + ), uses LP-relaxation
time-relaxed, enhanced IP model, coverage 705.
Section 6.3, showed LPe (T + ) LPetr (T + ) models complementary LMcut respect informativeness, suggests least respect search efficiency,
LP models competitive LM-cut. Figure 7b shows fact, A* /LPe (T + )
A* /LPetr (T + ) tend search quite efficiently, seen lines
LM-cut line (i.e., problems solved using given number evaluations) 105 106 node evaluations, point overtaken LM-cut line.
informativeness comparison Section 6.3 showed LP models comparable complementary LM-cut respect informativeness, FD/LM-cut outperforms A* /LPetr (T + )
A* /LPetr (T + ) domains. LM-cut implementation Fast Downward
often significantly faster current implementation LP-based heuristics. Nevertheless, several domains (freecell, parcprinter-08, parcprinter-opt11, satellite, trucks, visitall),
660

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

Domain (# problems)
airport(50)
barman-opt11(20)
blocks(35)
depot(22)
driverlog(20)
elevators-opt08(30)
elevators-opt11(20)
floortile-opt11(20)
freecell(80)
grid(5)
gripper(20)
logistics98(35)
logistics00(28)
miconic(150)
no-mprime(35)
no-mystery(30)
nomystery-opt11(20)
openstacks(30)
openstacks-opt08(30)
openstacks-opt11(20)
parcprinter-08(30)
parcprinter-opt11(20)
parking-opt11(20)
pathways-noneg(30)
pegsol-08(30)
pegsol-opt11(20)
pipesworld-notankage(50)
pipesworld-tankage(50)
psr-small(50)
rovers(40)
satellite(36)
scanalyzer-08(30)
scanalyzer-opt11(20)
sokoban-opt08(30)
sokoban-opt11(20)
tpp(30)
transport-opt08(30)
transport-opt11(20)
trucks(30)
visitall-opt11(20)
woodworking-opt08(30)
woodworking-opt11(20)
zenotravel(20)
Total coverage (1376)
# Best domains

FD/hmax

FD/LM-cut

hsp/HST/CPLEX

A* /IP(T + )

A* /IPe (T + )

A* /LPe (T + )

solved
21
4
18
4
9
15
13
4
15
2
7
2
10
50
23
17
8
7
19
14
14
10
0
4
27
17
16
7
49
6
6
9
6
27
20
6
11
6
7
9
9
4
8
540
15

solved
28
4
28
7
14
22
18
7
15
2
7
6
20
141
23
16
14
7
19
14
19
14
3
5
27
17
17
8
49
7
7
15
12
30
20
6
11
6
10
11
17
12
13
748
36

solved
24
0
17
1
7
3
1
1
19
1
2
3
10
79
15
15
8
5
7
2
19
14
0
4
17
4
9
6
19
4
5
5
2
6
3
5
7
2
3
15
14
8
7
398
0

solved
14
0
19
2
9
0
0
2
8
0
4
3
16
137
10
5
8
0
2
0
19
14
0
5
1
0
3
2
43
7
8
5
2
3
1
5
2
0
7
9
12
7
9
403
0

solved
24
0
27
7
10
9
7
4
54
2
5
5
19
140
20
15
14
7
10
5
21
16
2
5
10
2
10
8
48
7
10
5
2
17
13
6
7
2
13
10
17
11
9
635
13

solved
25
0
28
7
11
13
10
6
44
2
6
6
20
140
18
13
14
7
11
6
20
16
1
5
26
16
12
7
48
7
10
8
5
23
19
6
9
4
15
16
16
10
10
696
14

+
A* /LPe
tr (T )

solved
25
0
28
7
13
13
10
7
43
2
6
6
20
141
17
12
14
7
11
6
20
16
1
5
26
16
13
7
48
7
10
8
5
25
19
6
10
5
15
16
17
11
11
705
17

Table 8: Comparison forward search (A* ) planners, part 1: Number problems solved 30
minute, 2GB RAM limit using A* IP/LP models bounded h+ (Sections
3-7) heuristic functions. Comparison Fast Downward hmax , Fast Downward
Landmark Cut, hsp planner using HST/CPLEX (Haslum et al., 2012) compute h+ ,
heuristic function.

A* /LPetr (T + ) achieves higher coverage FD/LM-cut. Thus, A* /LPetr (T + ), best
model among bounded h+ , considered fairly powerful, admissible heuristic function forward-state search based planning.
661

fiI MAI & F UKUNAGA

800
700

Instances solved

600
500
400
300
FD/LMcut
A*/LPetr(T+)
A*/LPe(T+)
A*/IPe(T+)
FD/hmax

200
100
0
0.1

1

10

100

1000

Time (seconds)
(a) Cumulative number problems solved (out 1376) vs time (30 minute time limit).

800
700

Instances solved

600
500
400
300
FD/LMcut
A*/LPetr(T+)
A*/LPe(T+)
A*/IPe(T+)
FD/hmax

200
100
0

1

10

100

1000

10000 100000 1e+06

1e+07

1e+08

Evaluations
(b) Cumulative number problems solved (out 1376) vs number search nodes evaluated (30 minute
time limit).

Figure 7: Comparison forward search (A* ) planners, part 1 ( heuristics bounded
h+ ).

662

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

8. Incorporating Counting Constraints
far, concentrated efficient computation h+ well relaxations h+ ,
models far bounded h+ . However, IP model extended
constraints consider delete effects. adding variables constraints related delete effects
actions, model calculate lower bounds number times action must
applied. New variables defined follows:
A, N (a) {0, 1, } : N (a) = n iff used n times.
p P, G(p) {0, 1} : G(p) = 1 iff p G.
G(p) auxiliary variable similar I(p). Furthermore, extended model, meaning
U (a) {0, 1} slightly modified mean action used least optimal
solution (in basic model proposed Section 3, pure delete-free model, U (a)
denoted whether used exactly optimal solution).
New constraints defined follows:
(C7) A, N (a) U (a).
P
P
(C8) p P, G(p) + as.t.ppredel(a) N (a) I(p) + as.t.padd(a) N (a),

predel(a) = pre(a) del(a). Finally, objective function modified minimize
P
aA c(a)N (a). Given planning task , use IPc (T ) denote IP problem adds
new variables constraints IP(T + )
idea types constraints previously proposed several times (for SAS+
formulation), correspond action order relaxation van den Briel et al. (2007), state
equation heuristic Bonet (2013), net change constraints Pommerening et al. (2014).
Intuitively, final constraint states number uses actions adding p must greater
equal number uses actions requiring deleting p time feasible
plan . feasible plan STRIPS planning task always satisfies condition. Hence,
task feasible plan , clearly derive feasible solution IPc (T )
cost . addition this, stronger proposition proved modifications
models enhancements Section 4.
Proposition 7. Given task , feasible plan = (a0 , , ) , exists feasible
solution IPc (T ) cost cost . addition this, exists feasible solution IPc (T ) combination landmark extraction substitution, relevance
analysis, inverse action constraints cost cost .
Proof. Let + delete relaxation subsequence plan extracted Algorithm 3.
First show subsequence + feasible delete-free plan + , show
assignment derived + satisfies constraints.
+
+
+
+
use (a+
0 , , ) denote elements . show feasible , assume
+
+
a+
first infeasible action . Let p proposition p pre(ai ) p 6
+
+
I((a0 , , ai1 )). Since valid feasible plan , delete-relaxation entire sequence
valid feasible plan + . Hence, a+
feasible, Algorithm 3
+
skipped actions add p ai applied. Since line 5 Algorithm 3 equal
+
I((a+
0 , , ai1 )) i, skipped actions add p satisfy add(ai ) \ 6= , thus
663

fiI MAI & F UKUNAGA

Algorithm 3 Extracting subsequence = (a0 , , ) (for proof Proposition 7)
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:

+ (); // empty
I;
= a0 , ,
Let delete-relaxation a.
relevant + add(a ) \ 6=
append end + ;
add(a );
end
end
return + ;

irrelevant + . However contradicts definition relevance analysis
+
+
fact a+
relevant. Similar argument, G I( ). Hence valid feasible
plan + .
Define assignment F IPc (T ) as:
VF := VF + variable V defined IP(T + ), F + assignment
derived + IP(T + ),
N (a)F := (the number occurrences ) A.
assignment F clearly satisfies constraints C1 C6. assignment F satisfies
constraint C8 since valid plan , F satisfies constraint C7 since U (a)F = 0
included . Hence F feasible solution IPc (T ) cost .
addition, F feasible solution IPc (T ) combination landmark extraction
substitution, relevance analysis, inverse action constraints. see checking
feasibility F type modified constraints independently. F satisfies
modified constraints, satisfies combination constraints.
F satisfies constraints added landmark extraction substitution (i.e. substituting 1 variables corresponding landmarks) since + valid feasible plan + . F
satisfies constraints added relevance analysis (i.e. substituting 0 irrelevant actions
propositions) since + contains relevant actions. Finally, show
P F satisfies inverse
action constraints similarly proof Proposition 6. inv(a,p) E(a , p)F = 0
P
U (a)F = 0 U (p)F = 0 hold, inv(a,p) E(a , p)F 1
P
U (a)F = 0 U (p)F = 1 hold. addition, show inv(a,p) E(a , p)F = 0
U (a)F = U (p)F = 1. Assume exists inv(a, p) E(a , p)F = 1. Then,
constraint C3, U (a )F = 1, means member + . Without loss generality,
assume applied applied + . Since add(a ) pre(a) definition inverse
actions, nothing new added state applying . line 5 Algorithm 3 equal

I((a+
0 , , )), contradicts add(ai ) \ 6= .
Unfortunately, counting constraints conflict dominated action elimination (Section 4.3)
zero cost immediate action application (Section 4.4). counting constraints used,
necessary disable zero cost immediate action application modify condition
dominated actions follows:
664

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

Definition 2 (modified dominated action definition). Given feasible task , action dominated action (i) add(a) add(a ), (ii) p pre(a ), p fact landmark
p I, (iii) c(a) c(a ), (iv) pre(a ) del(a ) pre(a) del(a).
longer use modified dominated actions make feasible plan , since fact
landmarks sometimes deleted achieved. However following fact proved.
Proposition 8. Given task , let = (a0 , , ) feasible solution . exists
feasible solution IPc (T ) combination landmark extraction substitution, relevance
analysis, inverse action constraints, modified dominated action elimination cost
equal less cost .
Proof. Recall dominated action elimination constraints substitute 0s U (a) dominated action a. contain modified dominated actions, proposition holds
due Proposition 7.
Otherwise, derive feasible solution using sequence actions made replacing
modified dominated actions corresponding dominating actions. Let
sequence. Note sum costs actions clearly less equal .
Let + relaxation subsequence extracted Algorithm 3. Since
prove delete-relaxation feasible plan + argument similar proof
Proposition 4, prove + feasible plan + argument similar
proof Proposition 7.
+ feasible plan, derive feasible solution IPc (T ) constraints
proof Proposition 7. solution satisfies constraints C1 C6
combination landmark extraction substitution, relevance analysis, inverse action
constraints. satisfies constraint C7 U (a) = 0 included , satisfies
constraint C8 replacing dominated actions invalidate constraint C8 feasible
plan . satisfies dominated action elimination constraints (i.e. U (a) = 0
dominated action a) since contain modified dominated action.




IPec (T ) LPec (T ) denote models constructed applying valid reductions
IPc (T ) LPc (T ) respectively. LP time relaxations IP(T + ) described Section 6

applied IPc (T ) well, LPectr (T ) time-relaxed, LP-relaxation enhanced

IPec (T ) model. Table 1 summarizes relationships among models.
8.1 Experimental Results Models Enhanced Counting Constraints


see impact adding counting constraints, evaluated informativeness LPec (T ),

LPectr (T ), LPe (T + ), LPetr (T + ) comparing values LM-cut heuristic values


(Helmert & Domshlak, 2009). Table 9 shows values LPec (T ), LPectr (T ), LPe (T + ),
LPetr (T + ) multiple LM-cut values (means domain shown). Note
contrast Table 7, limited 1228 instances h+ could computed
exactly, Table 9 includes 1376 instances (because LM-cut values could computed
1376 instances).
majority domains, counting constraints result informative heuristic,

compared models without counting constraints, cases, LPe (T + ) LPec (T )

LPetr (T + ) LPectr (T ). sometimes possible optimal value LPe (T + ) larger
665

fiI MAI & F UKUNAGA





optimal value LPec (T ) LPetr (T + ) larger optimal value LPectr (T )
explained Section 8, additional constraints part IPe (T + )

incompatible IPc (T ) excluded IPec (T ), resulting different LP polytopes
LP-relaxations.
Next, see impact adding counting constraints forward-search planning using


delete-relaxation LP models, compare A* /LPec (T ) A* /LPe (T + ), A* /LPectr (T )
A* /LPetr (T + ). Coverage instances previous experiment shown Table 10.
tradeoff improved search efficiency due additional informativeness
heuristic provided counting constraints, additional time required solve LPs
(because additional constraints make LP difficult solve). Table 10 shows

overall effects enhancing delete-relaxation model mixed. A* /LPec (T ) attains coverage

672 instances, lower coverage A* /LPe (T + ), A* /LPectr (T ) solves 716
problems compared 705 problems solved A* /LPetr (T + ). domains
adding counting constraints significantly improved coverage, including parcprinter, pathwaysnoneg, rovers, woodworking. hand, coverage dropped significantly elevators, freecell, openstacks result adding counting constraints. time relaxation seems
advantageous overall, resulting increase 672 instances A* /LPe (T + ) 716 problems
A* /LPetr (T + ).
Table 9 shows value LMC-SEQ LP value (Pommerening et al., 2014). combination landmark constraints net change constraints operator-counting framework analogous combination delete-free model counting constraints,


interesting compare optimal LP values. LPec (T ) LPectr (T ) higher average value
LMC-SEQ 16 15 domains, respectively, LMC-SEQ higher value


LPec (T ) LPectr (T ) 17 domains. Thus, previous comparison LM-cut
LPe (T + ) LPetr (T + ) Section 6.2, delete-relaxation approach seems complementary
LMC-SEQ combination operator-counting framework. hand, comparing
results forward search based optimal planning using LP models, see FD/LMC


SEQ significantly higher coverage A* /LPec (T ) A* /LPectr (T ), well A* /LPec (T )

A* /LPectr (T ).

9. Automatic LP Model Selection
definitions models, know STRIPS planning task action
costs, relationships among IP models follows: IPtr (T + ) IPetr (T + ) IP(T + ) =

IPe (T + ) = h+ IPc (T ) = IPec (T ). LP relaxations, know LP(T + )




LPe (T + ), LPetr (T + ) LPe (T + ), LPectr (T ) LPec (T ), LPectr (T ) LPec (T ). Note

LPec (T ) always dominate LPe (T + ), dominated action elimination immediate action application eliminate different sets variables two LP models. Figure 1
illustrates dominance relationships among bounds.

time-relaxed LPetr (T + ) LPectr (T ) dominated non-time-relaxed models

LPe (T + ) LPec (T ), respectively, time-relaxed LPs significantly cheaper compute
non-relaxed counterparts.

Similarly, although IPec (T ) dominates IPe (T + ), possible LPe (T + ) larger

LPec (T ). Furthermore, two LPs optimal value, one solved faster
clearly preferable LPs must solved node A* search. Thus, set
666

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

airport
barman-opt11
blocks
depot
driverlog
elevators-opt08
elevators-opt11
floortile-opt11
freecell
grid
gripper
logistics98
logistics00
miconic
no-mprime
no-mystery
nomystery-opt11
openstacks
openstacks-opt08
openstacks-opt11
parcprinter-08
parcprinter-opt11
parking-opt11
pathways-noneg
pegsol-08
pegsol-opt11
pipesworld-notankage
pipesworld-tankage
psr-small
rovers
satellite
scanalyzer-08
scanalyzer-opt11
sokoban-opt08
sokoban-opt11
tpp
transport-opt08
transport-opt11
trucks
visitall-opt11
woodworking-opt08
woodworking-opt11
zenotravel

LMC-SEQ

LPe (T + )

1.00
2.23
1.07
1.10
1.04
1.02
1.01
1.05
2.64
1.09
1.00
1.00
1.00
1.00
1.00
1.01
1.03
1.36
1.00
1.00
1.08
1.05
1.00
1.53
1.34
1.33
1.45
1.32
2.60
1.23
1.00
1.00
1.01
1.15
1.11
1.43
1.11
1.08
1.00
1.50
1.04
1.05
1.00

.85
.51
1.00
1.43
1.01
.84
.80
1.01
3.14
1.20
1.00
.91
.99
1.00
.89
.98
1.07
1.61
1.00
1.00
1.00
1.00
1.04
1.13
1.09
1.10
1.18
1.27
1.00
.72
.83
.98
.98
1.01
1.01
.89
.49
.49
1.08
1.42
1.12
1.13
.96

+
LPe
tr (T )

.85
.51
1.00
1.42
.99
.82
.77
1.01
3.07
1.19
1.00
.90
.99
1.00
.78
.90
1.07
1.43
1.00
1.00
1.00
1.00
.99
1.13
1.05
1.10
1.16
1.26
1.00
.72
.75
.94
.98
1.00
1.01
.89
.49
.49
1.08
1.41
1.12
1.13
.94





LPe
c (T )

LPe
ctr (T )

.98
3.59
1.07
1.54
1.12
.71
.67
1.08
3.08
1.55
1.00
1.01
1.00
1.00
.82
.84
1.10
1.61
1.00
1.00
1.08
1.05
1.06
1.72
1.25
1.22
1.73
1.35
2.61
.81
.85
.97
.97
1.13
1.12
1.42
.18
.18
1.08
1.48
1.18
1.19
.94

.98
3.59
1.07
1.54
1.12
.71
.67
1.08
3.07
1.55
1.00
1.01
1.00
1.00
.82
.81
1.10
1.43
1.00
1.00
1.08
1.05
1.00
1.72
1.23
1.22
1.70
1.20
2.61
.81
.75
.93
.97
1.13
1.12
1.42
.18
.18
1.08
1.47
1.18
1.19
.93

Table 9: Optimal values LP models relative LM-cut value 1376 IPC instances. Means
domain shown. E.g., barman-opt11, mean LMC-SEQ value 2.23 times LM
cut value, LPe (T + ) LPetr (T + ) values 0.51 times LM-cut value, LPec (T )

LPectr (T ) values 3.59 times LM-cut value.

667

fiI MAI & F UKUNAGA

800
700

Instances solved

600
500
400
300

FD/LMC-SEQ
A*/Autoconf
FD/LMC
A*/LPe
ctr(T)
A*/LPetr(T+)
FD/SEQ

200
100
0
0.1

1

10

100

1000

Time (seconds)
(a) Cumulative number problems solved (out 1376) vs time (30 minute time limit).

800
700

Instances solved

600
500
400
300

FD/LMC-SEQ
A*/Autoconf

200

FD/LMC
A*/LPe
ctr(T)

100

A*/LPetr(T+)
FD/SEQ

0

1

10

100

1000

10000 100000 1e+06

1e+07

1e+08

Evaluations
(b) Cumulative number problems solved (out 1376) vs number search nodes evaluated (30 minute
time limit).

Figure 8: Comparison forward search (A* ) planners, part 2.

668

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

4 viable LP heuristics, none dominate others considering accuracy
time. best choice optimize tradeoff heuristic accuracy node expansion
rate depends problem instance. difficult choose best heuristic priori
general, know (1) whether worthwhile use counting constraints not, (2)
whether time-relaxation tight particular problem instance.
Thus, implemented simple mechanism automatically selecting LP used

problem works follows: First, compute LPe (T + ), LPec (T ), LPetr (T + ),

LPectr (T ) problem instance (i.e., root node A* search). select one
based following rule: Choose heuristic highest value, break ties choosing heuristic cheapest compute. Although cheapest heuristic could identified
according CPU time required compute heuristic, many problems, computations fast robust timing measurements, simply break ties order LPetr (T + ),


LPectr (T ), LPe (T + ), LPec (T ), ordering usually accurately reflects timing order.
mechanism makes simplistic assumption ranking behavior LP bounds
root node similar ranking LP bounds throughout search graph. sophisticated method heuristic selection may result better performance (c.f. Domshlak, Karpas,
& Markovitch, 2012), avenue future work.
9.1 Experimental Results Automated Model Selection Comparison
State-of-the-Art
compared A* using LP-based heuristics, including A* /autoconf, state-of-the-art heuristics. Specifically, compared:
FD/LM-cut : Fast Downward using landmark cut heuristic (Helmert & Domshlak, 2009)
(the standard seq-opt-lmcut configuration)
FD/LMC : Fast Downward using LP-model optimal cost partitioning landmark
cut constraints (Pommerening et al., 2014)
FD/SEQ : Fast Downward using lower-bound net change constraints (Pommerening et al.,
2014), corresponding state-equation heuristic Bonet (2013).
FD/OPT-SYS1, FD/PHO-SYS1, FD/PHO-SYS2 : Fast Downward using optimal cost partitioning constraints projections goal variables (OPT-SYS1), post-hoc optimization
constraints (PHO-SYS1, PHO-SYS2) (Pommerening et al., 2014).
FD/LMC-SEQ : Fast Downward using landmark cut net change constraints.
A* /LPe (T + ) : A* LP relaxation enhanced delete-free IP model IPe (T + )
(Section 4) heuristic.
A* /LPetr (T + ) : A* LP relaxation time-relaxed, enhanced delete-free IP model
IPe (T + ) heuristic.


A* /LPec (T ) : A* LP relaxation enhanced delete-free IP model counting

constraints IPec (T ) heuristic.


A* /LPectr (T ) : A* LP relaxation time-relaxed, enhanced delete-free IP model

counting constraints IPec (T ) heuristic.
669

fiI MAI & F UKUNAGA

9.1.1 C OVERAGE R ESULTS
coverage results (number problems solved) shown Tables 10. time spent
root node A* /autoconf LP model selection included runtimes, counts
30-minute runtime limit. Figures 8a-8b show cumulative number instances solved
function number time number node evaluations, respectively (for legibility,
subset algorithms included Figures 8a-8b). Table 11 shows summary total coverage
results forward-search configurations included Tables 8 10.
results indicate automatic LP model selection significantly boosts performance
A* -based planner compared relying single LP model. A* /autoconf achieved coverage 761 1376 instances, significantly better 4 individual components.
Furthermore, A* /autoconf attained higher coverage solver configurations Table
10 except FD/LMC-SEQ (Pommerening et al., 2014), solved 781 instances. Note
A* /autoconf higher coverage FD/LMC-SEQ 11/43 domains (floortile-opt11, freecell,
grid, logistics98, nomystery-opt11, pathways-noneg, rovers, satellite, trucks, woodworking-opt08,
woodworking-opt11).
9.1.2 ACCURACY A* / AUTOCONF ODEL ELECTION
analyzed accuracy model selection evaluating performance A* /autoconf
problem instance vs performance four component models. coverage
considered, 96.4% instances, A* /autoconf made correct decision respect
coverage, model selection A* /autoconf deemed correct either A* /autoconf
solved problem instance, none 4 components solved problem instance.
hand, runtimes considered well coverage, 83.0% instances, A* /autoconf
made correct decision, selection deemed correct A* /autoconf selected
model best runtime (including ties), none 4 components solved problem

instance. baseline, LPectr (T ), best coverage among component models,
correct choice according criterion 49.9% time. Mistakes selections made
A* /autoconf seen Table 10 coverage results example, woodworking-opt11

domain, A* /autoconf solved 18 instances compared 20 instances solved LPectr (T ). Thus,
significant room improvement runtimes considered addition coverage,
improving model selection using machine learning techniques direction future work.

10. Discussion Conclusion
paper proposed new, integer-linear programming formulation delete relaxation h+
cost-optimal, domain-independent planning. started basic IP model IP(T + ),
showed enhanced model IPe (T + ), incorporates landmark-based variable reduction,
relevance analysis, action elimination, competitive previous methods solving deletefree versions standard IPC planning benchmarks tasks (i.e., exact computation h+ ).
results embedding IP model heuristic function A* -based forward search
planner confirmed plain IP(T + ) model practical (coverage 403/1367 instances
vs. 540 Fast Downward using hmax ). However, showed IPe (T + ) model,
uses variable reduction methods reduce size IP models exactly computes h+ ,
performed much better, coverage 635 instances. According summary results
670

fiFD/SEQ

A* /LPe (T + )

+
A* /LPe
tr (T )

22
4
28
7
12
11
9
2
15
1
7
4
16
50
21
15
12
7
19
14
15
11
5
4
27
17
14
8
49
6
6
12
9
24
19
6
11
6
6
16
10
5
9
571
10

28
4
27
7
13
19
16
2
15
2
7
5
21
54
21
15
16
7
19
14
17
13
1
4
27
17
16
8
49
6
6
7
4
29
20
6
11
6
7
16
16
11
11
620
12

22
4
28
7
12
10
8
4
39
1
7
4
16
52
20
15
10
7
17
12
28
20
4
4
28
18
15
8
50
6
6
14
11
20
17
8
11
6
9
17
14
9
9
627
12

25
0
28
7
11
13
10
6
44
2
6
6
20
140
18
13
14
7
11
6
20
16
1
5
26
16
12
7
48
7
10
8
5
23
19
6
9
4
15
16
16
10
10
696
5

25
0
28
7
13
13
10
7
43
2
6
6
20
141
17
12
14
7
11
6
20
16
1
5
26
16
13
7
48
7
10
8
5
25
19
6
10
5
15
16
17
11
11
705
6

A* /autoconf

FD/PHO-SYS2

20
4
26
4
10
8
6
2
8
1
6
2
14
45
19
13
8
7
11
6
11
7
1
4
22
12
13
7
48
6
5
10
7
18
15
6
9
4
3
15
8
3
8
462
2



FD/PHO-SYS1

30
4
29
7
13
19
16
6
33
2
6
6
20
141
22
16
12
7
16
11
29
20
2
5
28
18
14
8
50
7
7
14
11
29
20
8
11
6
10
19
21
16
12
781
18

A* /LPe
ctr (T )

FD/OPT-SYS1

28
4
28
7
13
20
16
6
15
2
6
6
20
141
23
16
14
7
19
14
18
13
2
5
27
17
17
8
49
7
7
14
11
28
20
6
11
6
10
10
16
11
12
730
13



FD/LMC-SEQ

28
4
28
7
14
22
18
7
15
2
7
6
20
141
23
16
14
7
19
14
19
14
3
5
27
17
17
8
49
7
7
15
12
30
20
6
11
6
10
11
17
12
13
748
22

25
0
29
7
12
6
4
6
17
2
6
7
20
139
15
11
8
7
6
2
29
20
1
14
22
12
12
7
50
11
9
7
4
22
19
8
6
1
12
17
30
20
10
672
12

25
3
29
7
13
8
6
7
21
3
6
7
20
140
16
11
11
7
10
5
29
20
1
14
26
16
13
7
50
11
9
8
5
26
19
8
6
1
15
17
30
20
10
716
15

25
2
29
7
13
13
10
7
44
3
6
7
20
141
18
12
14
7
11
6
29
20
1
14
26
16
13
7
50
11
10
8
5
25
19
8
10
5
15
17
28
18
11
761
16

A* /LPe
c (T )

FD/LMC

Domain
airport(50)
barman-opt11(20)
blocks(35)
depot(22)
driverlog(20)
elevators-opt08(30)
elevators-opt11(20)
floortile-opt11(20)
freecell(80)
grid(5)
gripper(20)
logistics98(35)
logistics00(28)
miconic(150)
no-mprime(35)
no-mystery(30)
nomystery-opt11(20)
openstacks(30)
openstacks-opt08(30)
openstacks-opt11(20)
parcprinter-08(30)
parcprinter-opt11(20)
parking-opt11(20)
pathways-noneg(30)
pegsol-08(30)
pegsol-opt11(20)
pipesworld-notankage(50)
pipesworld-tankage(50)
psr-small(50)
rovers(40)
satellite(36)
scanalyzer-08(30)
scanalyzer-opt11(20)
sokoban-opt08(30)
sokoban-opt11(20)
tpp(30)
transport-opt08(30)
transport-opt11(20)
trucks(30)
visitall-opt11(20)
woodworking-opt08(30)
woodworking-opt11(20)
zenotravel(20)
Total coverage (1376)
# Best domains

FD/LM-cut

N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

Table 10: Comparison forward search (A* ) planners, part 2: Number problems solved
30 minute, 2GB RAM limit using A* IP/LP models heuristic functions. Includes LP


models incorporate counting constraints (LPec (T ), LPectr (T ), Section 8), well A* /autoconf
(Section 9). Comparison Fast Downward using operator-counting LP models (Pommerening
et al., 2014).

671

fiI MAI & F UKUNAGA

Configuration
FD/LM-cut

# solved
748

FD/hmax
FD/SEQ
FD/PHO-SYS1
FD/PHO-SYS2
FD/LMC

540
627
571
620
730

FD/OPT-SYS1
FD/LMC-SEQ
A* /HST/CPLEX

462
781
398

A* /IP(T + )
A* /IPe (T + )
A* /LPe (T + )
A* /LPetr (T + )

A* /LPec (T )
*
e
/LPctr (T )
A* /autoconf

403
635
696
705
672
716
761

Description
Fast Downward (FD) using standard Landmark Cut heuristic
(seq-opt-lmcut)
FD using hmax heuristic
FD using SEQ LP heuristic (Pommerening et al., 2014)
FD using PHO-SYS1 LP heuristic (Pommerening et al., 2014)
FD using PHO-SYS2 LP heuristic (Pommerening et al., 2014)
FD using LP model optimal cost partitioning landmark constraints (Pommerening et al., 2014)
FD using OPT-SYS1 LP heuristic (Pommerening et al., 2014)
FD using LMC+SEQ LP heuristic (Pommerening et al., 2014)
hsp planner using A* h+ heuristic (Haslum et al., 2012; Haslum,
2012)
basic IP formulation h+
IP(T + ) enhancements Sections 4.1-4.6
LP relaxation IPe (T + )
LP relaxation time-relaxed model IPetr (T + )

LP relaxation IPec (T )

LP relaxation time-relaxed model IPectr (T )
Automated selection LP root node(Section 9)

Table 11: Summary coverage (# solved) 1376 IPC benchmark problems instances 30
minute time limit 2GB RAM (see Tables 8-10 detailed results)
Table 11, aggregate coverage IPe (T + ) comparable coverage obtained LPbased SEQ, OPT-SYS1, PHO-SYS1, PHO-SYS2 heuristics recently implemented using
operator-counting framework Pommerening et al. (2014). However, aggregate coverage
IPC benchmarks skewed miconic domain, SEQ, OPT-SYS1, PHO-SYS1,
PHO-SYS2 perform particularly poorly compared heuristics. miconic domain
included, IPe (T + ) competitive LP-based models. Note freecell
domain, A* IPe (T + ) heuristic solved 54/80 instances, significantly higher
methods, least 1 domain exact h+ computation using IPe (T + ) model
performs extremely well compared state-of-the-art heuristics.
showed gap optimal value LP relaxations IP models
h+ tended quite small (the gap often zero), suggesting LP relaxations,
computed much faster IP models, could used heuristic A* -based planning.
time-relaxation eliminates time-related constraints proposed another way
reduce model order solvable faster. comparison LP-relaxed delete relaxation
models LM-cut (Helmert & Domshlak, 2009) heuristic values showed approaches
complementary respect closely approximate h+ . Thus, LP-relaxation
delete-free models provides novel, practical alternative approximating h+ . showed
A* search using LPe (T + ) (LP-relaxation delete-free task) LPetr (T + ) (time relaxed,
LP-relaxation delete-free task) significantly improves upon IP models, solving 696 705
instances, respectively, making usable practical heuristics.
major advantage LP-based heuristics relative ease additional constraints
added order obtain improved heuristics. showed counting constraints,
corresponding net change constraints proposed previous work (van den Briel et al., 2007;

Pommerening et al., 2014), could added LP model. resulting heuristic, LPectr (T )
mixed results, improving performance domains, degrading performance

domains, i.e., LPetr (T + ) LPectr (T ) complementary heuristics.
672

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL



Since dominance relationship among A* /LPe (T + ), A* /LPetr (T + ), A* /LPec (T )

*
/LPectr (T ), proposed A* /autoconf , simple method automatically selects among
4 heuristics computing 4 heuristic values root node using accurate heuristic
(breaking ties according speed). showed overall, A* /autoconf significantly improves upon
4 components, competitive landmark-cut heuristic, solving 761/1367 instances
achieving state-of-the-art performance several domains.
A* /autoconf lower total coverage compared Fast Downward using LMC-SEQ
LP-based heuristic (Pommerening et al., 2014), LP(T + )-based approach outperforms LMCSEQ several domains including freecell, pathways-noneg, rovers, satellite, trucks, woodworking. Although A* /autoconf includes LP models counting constraints consider
delete effects, note A* /LPetr (T + ), uses pure delete-free LP, performs quite well, obtaining higher coverage operator-count based heuristics Pommerening et al. (2014)
floortile, freecell, nomystery-opt11, satellite, trucks domains, counting constraints
required order A* using delete-relaxation based LPs achieve state-of-the-art
performance domains.
comparison optimal values counting-constraint enhanced delete-relaxation LP


models LPec (T ) LPectr (T ) optimal LP values LMC-SEQ model showed
complementary, class models outperforming roughly
number domains (Section 8.1). Thus, integrating two approaches single LP model
promising direction future work. recent survey LP-based heuristics planning,
Roger Pommerening (2015) noted delete-relaxation model incorporated
operator counting framework Pommerening et al. (2014) adding operator-counting variables
operator delete-relaxed problem promising direction future work. Note
Pommerening et al. (2014) approach use landmarks, used
different purposes. landmark constraints used Pommerening et al. (2014) used directly
operator counting constraints. contrast, approach uses landmarks order decrease
size IP/LP models delete-free task used purpose speeding
computation IP/LP models, i.e., landmark based reduction change optimal value
IP(T + ).

showed adding counting constraints consider delete effects (i.e., LPec (T )

LPectr (T )) improve performance domains, domains, coverage dropped
significantly. additional constraints make LP difficult solve,
increased search efficiency due tighter bound enough overcome increased cost
solving LP search node. A* /autoconf attempts address selecting models
counting constraints return higher value model without counting constraints root node, otherwise uses model include counting constraints
(i.e., LPe (T + ) LPetr (T + )). hand, strengthening delete-relaxation considering
delete effects active area research, recently, two frameworks allow flexible interpolation delete relaxation original model proposed.
Keyder, Hoffmann, Haslum (2014) propose approach adds new fluents represent
conjunctions fluents original planning task. Red-black planning (Domshlak, Hoffmann, &
Katz, 2015) framework separates state variables two groups red variables
relaxed, black variables relaxed. Combining flexible relaxation frameworks
IP approach developing principled approach deciding use counting
constraints avenue future work.
673

fiI MAI & F UKUNAGA

current implementation uses CPLEX solver naively, relying entirely default control
parameters. Systematically tuning improving implementation IP/LP models order
make better use incremental IP/LP solving capabilities promising direction future work.
Although shown LP models often compute h+ exactly, domains
significant gaps h+ optimal cost LP models. Improved
modeling techniques may allow tighter LP bounds. example, Constraint C6 uses straightforward
big-M encoding, may possible obtain tighter bounds using methods.
Furthermore, although solving IP node forward-search based planner previously considered impractical, shown IPe (T + ) model, computes h+
exactly, almost useful practical heuristic, improving techniques used solve IP
IPe (T + ) may result balance accuracy speed necessary practical general
purpose heuristic. example, significant performance improvements might obtainable improving use IP solver. example, contrast LP solvers, parallel speedups
often difficult obtain, IP solvers often sped significantly parallelization, current
IP solvers already provide parallel search algorithms (which use paper
limited experiments single threads). number cores per processor continues increase, possible cases, IP-based heuristics may become useful LP-based
heuristics.

Acknowledgments
Thanks Patrik Haslum assistance code computing h+ hsp f planner.
Thanks Florian Pommerening assistance code LP heuristic-based Fast Downward (Pommerening et al., 2014). Thanks anonymous reviewers numerous helpful suggestions significantly improved paper. research supported JSPS Grant-in-Aid
JSPS Fellows JSPS KAKENHI grant.

References
Backstrom, C., & Nebel, B. (1995). Complexity Results SAS+ Planning. Computational Intelligence, 11(4), 625655.
Betz, C., & Helmert, M. (2009). Planning h+ theory practice. KI 2009, pp. 916.
Springer.
Blum, A., & Furst, M. (1997). Fast Planning Planning Graph Analysis. Artificial Intelligence, 90(1-2), 281300.
Bonet, B. (2013). admissible heuristic SAS+ planning obtained state equation.
Proceedings International Joint Conference Artificial Intelligence (IJCAI), pp.
22682274.
Bonet, B., & Castillo, J. (2011). complete algorithm generating landmarks. Proceedings
International Conference Automated Planning Scheduling (ICAPS).
Bonet, B., & Geffner, H. (2001). Planning heuristic search. Artificial Intelligence, 129(1-2),
533.
Bonet, B., & Helmert, M. (2010). Strengthening landmark heuristics via hitting sets. Proceedings
European Conference Artificial Intelligence (ECAI), pp. 329334.
674

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

Bonet, B., & van den Briel, M. (2014). Flow-based heuristics optimal planning: Landmarks
merges. Proceedings International Conference Automated Planning
Scheduling (ICAPS).
Bylander, T. (1994). Computational Complexity Propositional STRIPS Planning. Artificial
Intelligence, 69(12), 165204.
Bylander, T. (1997). linear programming heuristic optimal planning. Proceedings
National Conference Artificial Intelligence (AAAI), pp. 694699.
Cooper, M. C., de Roquemaurel, M., & Regnier, P. (2011). Transformation optimal planning
problems. Journal Experimental & Theoretical Artificial Intelligence, 23(2), 181199.
Dimopoulos, Y. (2001). Improved integer programming models heuristic search ai planning.
Proceedings 6th European Conference Planning (ECP), pp. 5057.
Domshlak, C., Karpas, E., & Markovitch, S. (2012). Online speedup learning optimal planning.
Journal Artificial Intelligence Research, 44, 709755.
Domshlak, C., Hoffmann, J., & Katz, M. (2015). Red-black planning: new systematic approach
partial delete relaxation. Artificial Intelligence, 221, 73114.
Gefen, A., & Brafman, R. (2011). minimal seed set problem. Proceedings International Conference Automated Planning Scheduling (ICAPS), pp. 319322.
Gefen, A., & Brafman, R. (2012). Pruning methods optimal delete-free planning. Proceedings
International Conference Automated Planning Scheduling (ICAPS), pp. 5664.
Haslum, P. (2012). Incremental lower bounds additive cost planning problems. Proceedings
International Conference Automated Planning Scheduling (ICAPS), pp. 7482.
Haslum, P. (2014a) Personal communication.
Haslum, P. (2014b). Hsp* code documentatoin http://users.cecs.anu.edu.au/
patrik/un-hsps.html..
Haslum, P., Slaney, J., & Thiebaux, S. (2012). Minimal landmarks optimal delete-free planning. Proceedings International Conference Automated Planning Scheduling
(ICAPS), pp. 353357.
Helmert, M., & Domshlak, C. (2009). Landmarks, critical paths abstractions: Whats difference anyway?. Proceedings International Conference Automated Planning
Scheduling (ICAPS), pp. 162169.
Hoffmann, J., & Nebel, B. (2001). Planning System: Fast Plan Generation Heuristic Search. Journal Artificial Intelligence Research, 14, 253302.
Hoffmann, J., Porteous, J., & Sebastia, L. (2004). Ordered landmarks planning. Journal
Artificial Intelligence Research, 22, 215278.
Imai, T., & Fukunaga, A. (2014). practical, integer-linear programming model deleterelaxation cost-optimal planning. Proceedings European Conference Artificial
Intelligence (ECAI).
Karpas, E., & Domshlak, C. (2009). Cost-optimal planning landmarks. Proceedings
International Joint Conference Artificial Intelligence (IJCAI), pp. 17281733.
675

fiI MAI & F UKUNAGA

Katz, M., & Domshlak, C. (2010). Optimal admissible composition abstraction heuristics. Artificial Intelligence, 174(12-13), 767798.
Kautz, H., & Selman, B. (1992). Planning Satisfiability. Proceedings European Conference Artificial Intelligence (ECAI), pp. 359363.
Kautz, H. A., & Selman, B. (1996). Pushing envelope: Planning, propositional logic stochastic search. Proceedings National Conference Artificial Intelligence (AAAI), pp.
11941201.
Kautz, H. A., & Selman, B. (1999). Unifying sat-based graph-based planning. Proceedings
International Joint Conference Artificial Intelligence (IJCAI), pp. 318325.
Keyder, E., Richter, S., & Helmert, M. (2010). Sound complete landmarks and/or graphs.
Proceedings European Conference Artificial Intelligence (ECAI), pp. 335340.
Keyder, E., & Geffner, H. (2008). Heuristics planning action costs revisited. Proceedings
European Conference Artificial Intelligence (ECAI), pp. 588592.
Keyder, E. R., Hoffmann, J., & Haslum, P. (2014). Improving delete relaxation heuristics
explicitly represented conjunctions. Journal Artificial Intelligence Research, 50, 487533.
Mirkis, V., & Domshlak, C. (2007). Cost-sharing approximations h+. Proceedings
International Conference Automated Planning Scheduling (ICAPS), pp. 240247.
Pommerening, F., & Helmert, M. (2012). Optimal planning delete-free tasks incremental LM-cut. Proceedings International Conference Automated Planning
Scheduling (ICAPS), pp. 363367.
Pommerening, F., Roger, G., Helmert, M., & Bonet, B. (2014). LP-based heuristics costoptimal planning. Proceedings International Conference Automated Planning
Scheduling (ICAPS).
Pommerening, F., Roger, G., & Helmert, M. (2013). Getting pattern databases
classical planning. Proceedings International Joint Conference Artificial
Intelligence (IJCAI).
Rintanen, J. (2012). Planning satisfiability: Heuristics. Artificial Intelligence, 193, 4586.
Rintanen, J., Heljanko, K., & Niemela, I. (2006). Planning satisfiability: parallel plans algorithms plan search. Artificial Intelligence, 170(12-13), 10311080.
Robinson, N. (2012). Advancing Planning-as-Satisfiability. Ph.D. thesis, Griffith University.
Robinson, N., McIlraith, S. A., & Toman, D. (2014). Cost-based query optimization via AI planning.
Proceedings Twenty-Eighth AAAI Conference Artificial Intelligence, July 27 -31,
2014, Quebec City, Quebec, Canada., pp. 23442351.
Roger, G., & Pommerening, F. (2015). Linear programming heuristics optimal planning.
AAAI2015 Workshop Planning, Search, Optimization.
van den Briel, M. (2015) Personal communication.
van den Briel, M., Benton, J., Kambhampati, S., & Vossen, T. (2007). LP-based heuristic
optimal planning. Proceedings International Conference Principles Practice
Constraint Programming (CP).
676

fiO N P RACTICAL , NTEGER -L INEAR P ROGRAMMING ODEL

van den Briel, M., & Kambhampati, S. (2005). Optiplan: planner based integer programming.
Journal Artificial Intelligence Research, 24, 919931.
van den Briel, M., Vossen, T., & Kambhampati, S. (2008). Loosely coupled formulation automated planning: integer programming perspective. Journal Artificial Intelligence
Research, 31, 217257.
Vossen, T., Ball, M. O., Lotem, A., & Nau, D. S. (1999). use integer programming models
AI planning. Proceedings International Joint Conference Artificial Intelligence
(IJCAI), pp. 304309.
Zhu, L., & Givan, R. (2003). Landmark extraction via planning graph propagation. Proceedings
ICAPS Doctoral Consortium, pp. 156160.

677


