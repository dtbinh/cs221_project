journal artificial intelligence

submitted published

practical integer linear programming model delete free
tasks use heuristic cost optimal
tatsuya imai

tatsuya imai gmail com

graduate school information science engineering
tokyo institute technology
tokyo japan

alex fukunaga

fukunaga idea c u tokyo ac jp

graduate school arts sciences
university tokyo
tokyo japan

abstract
propose integer linear programming model delete relaxation cost optimal
straightforward ip delete relaxation impractical enhanced model
incorporates variable reduction techniques landmarks relevance constraints dominated action elimination immediate action application inverse action constraints resulting
ip used directly solve delete free ip model
competitive previous state art solvers delete free lp relaxation
ip model often good approximation ip providing approximating optimal value delete free task complementary well known lm cut
heuristic constraints partially consider delete effects added
ip lp embed ip lp forward search planner
performance resulting planner standard ipc benchmarks comparable
state art cost optimal

introduction
delete relaxation classical relaxation
delete effects eliminated operators delete relaxation every proposition
becomes true remains true never becomes false delete relaxation
studied extensively classical literature used estimate cost
optimal plan original therefore useful basis heuristic
functions search domain independent solution original
solution delete relaxation cost optimal solution
delete relaxed lower cost original relaxation
every proposition needs established thus optimal cost delete relaxation
denoted h lower bound optimal cost original
despite fact computing h easier solving original
computing h np equivalent bylander poses challenging
addition importance basis heuristic functions standard classical
delete relaxation interesting right
naturally modeled delete free e actions delete
effects example minimal seed set systems biology seeks
c

ai access foundation rights reserved

fii mai f ukunaga

minimal set nutrients necessary organism fully express metabolism
mapped delete free gefen brafman another application
relational database query plan generation robinson mcilraith toman
determining join orders modeled delete free
propose integer programming ip computing h
model allows fast computation h linear programming lp relaxation
model used successfully heuristic function planner rest
structured follows begin review previous work delete relaxation
well applications lp introduce ip basic integer programming
model delete free section correctly computes h since
straightforward ip model often intractable useful practice computing
h develop enhanced model ipe reduces number variables ip
techniques landmark constraints relevance analysis section evaluate
performance basic ip enhanced ipe section
ipe competitive state art methods computing h
objective use ip basis heuristic forward state space
search solving ip every node search computationally daunting section propose evaluate two relaxations ip ip
consider lp lpe lp relaxation ip ipe
lp relaxations usually closely approximate h introduce time relaxation ip
lp ipetr lpetr respectively reduces number variables
cost sometimes underestimating h time relaxations usually closely
approximate h experimentally compare closely relaxed delete free approximate h lm cut heuristic helmert domshlak approaches
complementary
next section evaluate utility ip lp heuristics forwardsearch embedding planner although
lpetr competitive lm cut heuristic overall domains
lpetr yields state art performance outperforming lm cut
turn strengthening ip lp partially considering delete effects
section add constraints enforce lower bounds number times action must
used correspond net change constraints recently proposed pommerening
et al well action order relaxation van den briel et al tightened
bound ipc dominates ip counting constraints added lp relaxation


lpec well time relaxed lp relaxation lpectr however additional counting
constraints makes ip lp difficult planner uses bounds
tradeoff tighter bound fewer nodes searched time spent per node
although counting constraints enhanced performance domains
significantly degrades performance domains experimentally compare countingconstraint enhanced lmc seq lp model pommerening et al
combines landmark net change constraints lm cut vs delete free lps
complementary
revises extends work originally reported authors presented ecai imai
fukunaga formal proofs ecai included contains
much thorough experimental evaluation experimental data



fio n p ractical nteger l inear p rogramming odel

table provides overview ip lp discussed sections
serves roadmap model indicate section text
model introduced constraints used model variable elimination optimizations
used model figure directed graph showing dominance relationships among
optimal costs ip lp
finally clear dominance relationship among lp respect
performance planners use lp heuristic function
propose evaluate simple automatic configuration heuristic selects lp use
heuristic section simple automated bound selection significantly boosts performance resulting ensemble lp heuristic competitive state art heuristics section concludes summary discussion directions future work

background related work
section first introduces notation tasks used rest surveys related work solving delete free tasks well previous applications
ip lp domain independent
preliminary definitions
strips task defined tuple hp gi p set propositions
set actions state represented subset p applying action state adds
propositions removes propositions state action composed
three subsets p hpre add del called preconditions add effects
delete effects action applicable state iff satisfies pre applying
propositions change del add sequence actions
use denote del add del add
let p initial state g p goal solution task sequence
actions transform state satisfies g formally feasible solution e
plan sequence actions satisfies pre ai ai
ii g
basic strips task extended strips action costs
action associated non negative cost c objective cost optimal strips
model action costs plan minimizes sum costs
p
actions n
c


delete relaxation task denoted task hp gi set
delete free actions defined hpre add use denote
task delete free beginning without relaxed
previous work computing h relaxations
delete relaxation used basis heuristics since beginning
recent era interest forward state space search bonet geffner unfortunately computing h known np equivalent reduction vertex cover bylander


fii mai f ukunaga

model
ip sec
ipe sec

constraints
c c c c
c c
c c c c
c c

variable eliminations
none
landmarks relevance dominated
action elimination
immediate action application
none
ipe
ipe

lp sec
lpe sec
lpetr sec

ip
ipe
c c c c

ipc sec

c c c c
c c c c

none

ipec sec

c c c c
c c c c

lpc sec

lpec sec

lpectr sec

ipc

ipec
c c c c
c c

landmarks relevance
modified dominated
action elimination definition
none

ipec

ipec

autoconf sec

selects among lpe lpetr lpec

lpectr



basic delete free task ip
model computes h
enhanced ip model computes h

lp relaxation ip
lp relaxation ipe
lp relaxation timerelaxation ipe
basic delete free task
ip model enhanced
counting constraints
enhanced ip model
counting constraints

lp relaxation ipc

lp relaxation ipec
lp relaxation time
relaxation ipec



automatic lp model selection

table overview delete relaxation ip lp

lp

lptr

lpe

ip ipe aaa
h

ipcec

lpec
c

lptre

iptre

ec
ipctr

e
c
lpctr

iptr

figure dominance relationships among ip lp edge modeli modelj indicates
optimal cost modeli optimal cost modelj highlighted lps components
autoconf model



fio n p ractical nteger l inear p rogramming odel

therefore beginning researchers avoided direct computation h instead
sought approximations h
satisficing optimal solutions required successful deriving heuristics approximate delete relaxation additive heuristic hadd assumes
subgoals independent computes sum achieving subgoal delete relaxed
model bonet geffner heuristic hoffmann nebel constructs
graph blum furst delete relaxed extracts relaxed plan computes
number actions relaxed plan upper bound h
case cost optimal action assigned cost objective
minimal cost plan lower bounds h basis several admissible heuristic functions
used literature bonet geffner proposed hmax heuristic
computes highest cost associated achieving costly single proposition
hmax admissible often informative e gap hmax h large
considers single costly goal proposition admissible landmark cut
lm cut heuristic helmert domshlak approximates h follows state lmcut heuristic first computes hmax zero infinite h zero infinite
hlm cut hmax otherwise disjunctive action landmark l set actions least one
must included relaxed plan computed cost actions l reduced
c cost minimal cost action l hlm cut increased c process
repeated hmax remaining reduced becomes approximations
h informative hmax include set additive heuristic keyder geffner
cost sharing approximations hmax mirkis domshlak
previous planners avoided direct computation h extra search efficiency
gained h offset high cost computing h far aware first
actual use h inside cost optimal planner betz helmert implemented
domain specific implementations h several domains recently haslum et al evaluated
use domain independent h haslum slaney thiebaux
heuristic function cost optimal found performance relatively
poor haslum
recent years several advances computation h since described
lm cut heuristic helmert domshlak lower bound h cost optimal
planner search lm cut heuristic directly applied delete
relaxation classical order compute h possible improve upon
developing methods exploit delete free property specifically tailored
solving delete relaxation pommerening helmert developed uses
ida branch bound incrementally computed lm cut heuristic gefen brafman
proposed action pruning delete free
different computing h observation h could formulated
finding minimal hitting set sets disjunctive action landmarks bonet
helmert led methods computing h searching minimum cost hitting set
complete set action landmarks delete relaxed bonet castillo
haslum et al original implementation haslum et al hitting set
h solver used specific branch bound haslum et al improved
implementation use experimental evaluation section uses integer programming solve hitting set haslum


fii mai f ukunaga

integer linear programming classical
another related line modeling classical integer linear programs
ilp use high performance general solvers solve
pioneered kautz selman solved encoding propositional
satisfiability sat applied state art sat solvers basic instantiate
sat formula satisfying assignment implies step plan satplan starts small
value e g trivially lower bound instantiates propositional formula f
satisfiable plan parallel steps less exists f satisfiable
minimal parallel makespan plan found otherwise incremented process
repeated plan found initial encodings modestly successful kautz
selman advances sat solver technology well improvements encoding
integration graphs blum furst led dramatic performance improvements kautz selman recent work sat includes improved
encodings well execution strategies sat strategies improve upon simply incrementing
rintanen heljanko niemela addition improvements sat solvers
specifically target domain independent investigated rintanen
since expressiveness integer programming ip subsumes sat sat encodings
straightforwardly translated ip however direct translation sat encodings ip resulted
poor performance state change formulation replaces original fluents sat
encoding set variables directly expresses addition deletion persistence
fluents shown successful basis ip model vossen ball
lotem nau formulation strengthened additional mutual exclusion constraints dimopoulos optiplan model van den briel kambhampati combined
state change ip formulation graph model refinement strategies improvements dimopoulous sat approaches described ip
feasible plan steps exists constructed however unlike
sat formulation easy directly encode action costs objective function ip
model ip used directly solve cost optimal another
decomposes instance set network flow subproblem corresponds state variable original van den briel vossen
kambhampati
instead modeling directly solving classical ip another adopt uses ilp provide heuristic function guides
state space search early instance
knowledge earliest application lp classical lplan
lp encoding classical used heuristic function partial order
planner bylander van den briel et al developed admissible heuristic
lp model represents order actions executed
relaxed variable represents number times action executed delete effects
considered constraints number actions delete values
incremented actions add value although lp heuristic
integrated system compared relaxed cost found model
bylanders lplan lp model well lp model h


fio n p ractical nteger l inear p rogramming odel

knowledge h implementation van den briel et al first implementation ip model h first relaxed graph blum furst expanded
quiescence instantiation actions relevant optimal
delete free task well upper bound number steps optimal delete free task
h computed delete relaxed step encoding
optiplan van den briel
cooper et al showed optimal solution dual lp model relaxes action ordering corresponds best lower bound obtained applying
transformations original shift costs among actions affect
fluents
bonet proposed hseq admissible flow lp heuristic petri net state equations bonet used heuristic planner bonet van den
briel enhanced bonets flow lp model adding action landmark constraint implementing variable merging strategies resulting competitive admissible heuristic karpas
domshlak proposed lp formulation compute optimal partitioning landmarks pommerening et al proposed operator counting framework enabled unification
number ideas including state equation formulation bonet post hoc optimization constraints pommerening roger helmert well landmarks formulation bonet
helmert dual formulation karpas domshlak state
abstraction heuristics katz domshlak showed combinations constraints resulted strong heuristics significantly outperformed lm cut heuristic recent survey
roger pommerening presents survey lp heuristics
includes earlier conference version imai fukunaga suggests
delete relaxation model could incorporated operator counting framework associating
operator counting variable action variable see delete relaxed

ip basic ip formulation delete free task
define integer program ip ip formulation delete free task
hp gi note feasible solution ip optimal solution
derive corresponding feasible non redundant e action appears
plan cost ip solution
first define variables ip addition able derive plan ip
exists injective mapping feasible non redundant plan ip solution
thus feasible assignments variables derived feasible plan
well meanings roles variables use denote
plan corresponding solution ip say first achiever p plan
p first action achieves establishes p
proposition p p u p u p iff p u p indicates whether proposition p
achieved relaxed plan
action u u iff holds u indicates whether action
used relaxed plan
add effect p add e p e p iff holds first
achiever p e p p true p achieved


fii mai f ukunaga

time proposition p p p p p p added
first p p member p indicates time step p first
achieved first achiever
time action
indicates time step first used
initial proposition p p p p iff p
p p achieved e p appears add effects multiple actions
assign p index first action p achieved e p holds
assign arbitrary value p given delete free task feasible
non redundant plan call assignment solution derived
use
pthe following fact later proofs solution derived feasible solution satisfies padd e p proposition p u p b
p

padd e p proposition p u p
variables p auxiliary variables computing h although redundant
solving delete free task one time useful avoid reconstructing constraints
state ip lp embedded heuristic function forward search planner
called state
objective function defined follows
x
minimize
c u

aa

objective function cost solution ip equal cost
corresponding delete free plan
finally define following six constraints
c p g u p goals must achieved
c p pre u p u actions require preconditions
c p add u e p action first achiever used
p
c p p p padd e p u p proposition achieved must
true initial state effect action
c p pre p actions must preceded satisfaction
preconditions
c p add p e p first achiever
p must precede p
solution ip derived feasible non redundant plan
feasible variable v ip vf describes assignment v solution f
ip


proposition given delete free task feasible non redundant plan
solution f ip derived feasible solution ip


fio n p ractical nteger l inear p rogramming odel

proof f clearly satisfies constraint c since satisfies g
constraint c satisfied exists action proposition p pre
u f u p f however u f u p f
delete free feasible plan p established point f satisfies
constraints c c similar arguments exists action proposition
p add e p f u f must hold according definition f
addition exists proposition p u p f exists first achiever p
e p f p member initial state
action member propositions precondition must achieved
used hence according definition f p f f action
plan action member f thus constraint
c satisfied action plan regardless values p f
finally f satisfies constraint c action proposition precondition
p pre first achiever p e e p constraint c satisfied
regardless values p f f first achiever p according
definition f p f f satisfies constraint c
addition exists feasible plan ip feasible solution ip
solved optimally optimal plan obtained according following proposition
proposition given feasible solution f ip action sequence
obtained ordering actions set u f ascending order f feasible
plan
proof first satisfies condition ii plan e g proof
contradiction assume exists proposition g g satisfies g
exists action achieving g since f solution ip u g f due constraint
c since g implies g g f therefore satisfy constraint c must
exist action g add e g f however satisfy constraint c
u f hold means contradicts assumption
next satisfies condition e pre ai ai base
case inductive proof assume exists proposition p p satisfying p pre
p since u f hold u p f hold according
constraint u p f u f similar proof condition ii must exist action
p add u f e p f however satisfy constraint c
p must true p hold satisfy constraint c therefore
u f first action contradiction
similar case pre ai ai true must
exist action ai u f ai contradicting fact
ai th action sequence
corollary given optimal solution f ip sequence actions built ordering
actions set u f ascending order f optimal plan
p
p
number variables

ip
add number constraints
p
p

pless p
p aa pre aa add number terms p
pre add


fii mai f ukunaga

enhanced ip model
ip provides ip model exactly computing h shall see section
ip competitive previous methods computing h thus section
introduce variable elimination techniques modifications constraints order
speed computation h experimental ipe
incorporates enhancements computes h significantly faster ip enhancements adopted ip framework previous work
particular landmark variable reduction method plays key role
note enhancements introduce constraints render solutions ip
mapped feasible plans infeasible however cases least one
optimal plan remain valid enhanced model optimal cost enhanced
model still corresponds h
landmark ip model reduction
landmark element needs used every feasible solution hoffmann porteous
sebastia use two kinds landmarks called fact landmarks action landmarks
work gefen brafman fact landmark task proposition
becomes true state every feasible plan action landmark task
action included every feasible plan say fact action landmark
l landmark proposition p l landmark task hp p similarly say
landmark l landmark action l landmark task hp pre
ip model delete free task proposition p fact landmark proposition
goal g substitute u p similarly action action landmark
substitute u landmark extraction substitution clearly prune feasible
solutions ip
actually extract set landmarks satisfy intensional definitions landmark
extraction necessary easy see given
feasible delete free task
proposition
add
p p fact landmark p holds p ap p g infeasible
p add similarly action action landmark
aadd
p
hp gi infeasible hence landmark candidate test whether
landmark checking feasibility delete free task excludes candidate
feasibility delete free task checked following straightforward
delete relaxed graph method hoffmann nebel fluent let
e p represent whether p achievable action let e represent
whether preconditions satisfied initially e p p e p
fluents e step actions
e whose preconditions satisfied set e set e p
e add terminates reaches quiescence e actions
e whose preconditions satisfied found takes steps
repeating feasibility check facts actions collects fact
landmarks action landmarks satisfying definitions time
interested computing h straightforward method one
described would sufficient however since intend use h
heuristic functions forward state space search landmark extraction needs


fio n p ractical nteger l inear p rogramming odel

performed repeatedly search efficiency extraction procedure important
experimented several methods describe effective method
method extracting landmarks method zhu givan
proposed propagation method collecting causal landmarks method
later generalized keyder et al graph landmark extraction method keyder
richter helmert
zhu givan define proposition p causal landmark hp apre
p p gi
pre
infeasible ap p pre focus causal landmarks ignoring
non causal landmarks nonessential even misleading point view
guiding search uses landmark heuristic contrast use landmarks
order reduce number variables ip model delete relaxation thus instead
focusing causal landmarks zhu givans criteria seek larger set landmarks
slightly modifying
criterion landmark
detection hp apre
p p gi

solution p aadd



p
g
must


infeasible
furthermore
p
pre
add
ap instead ap extract larger set fact landmarks addition zhu givan
used forward propagation layered graph delete free task
use following open list propagation
proposition p compute set fact landmarks p iterative method
following update equations characterizing fact landmarks
p member initial state p set fact landmarks achieve p

p member set fact landmarks p p aa padd add


p pre fact landmarks p
pseudocode open list propagation shown
initialization phase candidate set proposition p set p fact landmarks
p set p lines addition action inserted fifo queue q
satisfies pre lines main loop iterative method similar straightforward method described iteration action retrieved q candidate
set fact landmarks updated p add second equation lines
moreover method memorizes achievability p line action inserted q
members pre achievable candidate set p pre changed lines
process continues q becomes empty clarity simplicity implementation details optimizations omitted e g instead literally inserting every
member p l p line use single flag represent l p p updating candidate set reduces number elements method terminates unlike
simpler described complete landmarks
extracted however soundness method guaranteed following proposition
proposition given delete free strips task hp gi assume propositions
p achieved let l p set fact landmark candidates p computed
landmark extracting method
l p p p


ii l p p aa padd add p pre l p p


fii mai f ukunaga

landmark extracting method






















l p sets candidates fact landmarks p p
l p p p
l p p p


insert fifo queue q pre
end
q empty
retrieve action q
p add
p

x l p add p pre l p
l p x
l p x
apre
p

insert q pre q
end
end
end
end
point l p contain sets fact landmarks p p

satisfied elements l p fact landmarks p
proof assume proposition q satisfies q l p q fact landmark p
p q since proposition fact landmark l p one
proposition condition ii p holds since q landmark exists
non empty feasible plan delete free task hp p achieve q
let plan let ai action achieves p first
p q stated ands
q add ai since achieve q hence according
condition ii q p pre ai l p let p member pre ai satisfies q l p
since feasible plan achieve q p achieved thus p q holds
l p one proposition p holds hence ai
non empty feasible plan delete free task hp p achieve q
argument extended ad infinitum length clearly finite
contradiction thus members l p fact landmarks p proposition p p

addition fact landmarks extracted procedure
extracts action landmarks criterion proposition p fact landmark g
one action achieve p used action landmark g


fio n p ractical nteger l inear p rogramming odel

relevance analysis
backchaining relevance analysis widely used eliminate propositions actions irrelevant task action relevant add g ii exists relevant action
satisfying add pre proposition p relevant p g ii exists
relevant action p pre holds
addition noted haslum et al sufficient consider relevance respect subset first achievers add effect although defined first achiever
achievability proposition equivalent following definition action first
achiever proposition p p add p fact landmark let fadd denote
p add first achiever p sufficient use fadd instead add
definition relevance
p p relevant eliminate variable u u p
addition p add first achiever p eliminate variable
e p possible fact landmark fact irrelevant case set u p
variable elimination prunes feasible solutions clearly prune optimal
solutions
dominated action elimination
delete free task two actions add effects clearly sufficient use
one two actions idea generalized following reduction
eliminates useless dominated actions
proposition given feasible delete free task exists optimal plan
contain exists action satisfying following fadd fadd ii
p pre p fact landmark p iii c c
proof plan ai ai sequence actions
ai ai feasible plan proposition pre fact
landmark hence pre ai pre ai
holds definition first achievers add fadd ai
ai ai therefore g feasible plan
finally c c c c therefore plan contains optimal
exists another optimal plan contain
exists dominated action eliminate variable setting u
variable elimination prunes feasible solutions ip moreover sometimes prunes
optimal solutions c c holds condition iii however shown proof
least one optimal solution remains
slight generalization similar set constraints robinson definition
p maxsat planner robinsons dominance condition checks whether r
add add r pre pre r c c
condition iii r equivalent condition less strict condition r
instead checking add effects condition tests whether propositions
first achiever subsumed furthermore condition ii subsumes r
proposition pre fact landmark pre ai pre
ai holds satisfying r


fii mai f ukunaga

immediate action application
delete free task actions immediately applied initial state without
affecting optimality relaxed plan adopt immediate application zero cost actions
gefen brafman well immediate application action landmarks gefen brafman
delete free task action satisfies c pre
sequence made placing optimal plan hp add gi optimal
plan similarly action action landmark applicable
applied immediately
ip model variables p p eliminated substituting zero
values given sequence immediately applicable actions ak must correct
applicable sequence eliminate variables follows u ai ii ai
iii p pre ai u p iv p add ai ai u p p
e ai p v p add ai ai ai e p
iterative application variable eliminations
variable elimination techniques described interact synergistically
resulting cascade eliminations therefore used iterative variable elimination
applies eliminations quiescence order elimination applied shown
full landmark extraction pass variable elimination would extremely
expensive therefore perform landmark extraction iterative application
eliminations
iterative variable elimination
relevance analysis
landmark extraction
variable eliminated
immediate action application
dominated actions elimination
relevance analysis

inverse action constraints
define following inverse relationship pair actions delete free task
definition inverse action two actions inverse action
add pre ii add pre
definition clear inverse action inverse action
inverse actions satisfy following fact
proposition given delete free task let feasible plan ai
inverse action aj j holds aj aj
feasible plan
proof since feasible plan pre ai ai aj
definition inverse actions add aj pre ai holds add aj pre ai aj


fio n p ractical nteger l inear p rogramming odel

aj hence aj applicable aj g

corollary delete free task feasible solution optimal
ai inverse action aj ai aj non zero cost
several possible ways use proposition e g u u
inv inv set inverse actions order avoid adding large number
constraints ip model worst case half actions inverses
modify constraint c follows
p
c p pre u p inv p e p u inv p denotes set
inverse actions p add effect


proposition given delete free task ip constraint c feasible solution
optimal solution ip constraint c feasible ip constraint
c
proof let f optimal solution ip constraint c derived optimal plan
since f satisfies constraints ip constraint c suffices
f satisfies constraint c action proposition p pre
p
recall feasible solution derived feasible plan satisfies padd e p
p
proposition p u p satisfies padd e p
p
p
proposition p u p since padd e p inv p e p
action proposition p pre f clearly satisfies constraint c u p f


u f
pif u p f u f hold

inv p e p f holds u f u p f assume
exists action inv p e p f according constraint c u f
however since f derived optimal plan must exist optimal plan
contains contradicts corollary
since f feasible solution exist action proposition p pre
u f u p f hence f satisfies constraint c
p pre
ipe enhanced ip model h
define ipe integer programming model first adding inverse
action constraints described section basic ip model applying iterative reduction applies reductions sections
quiescence previously noted ipe computes h shall see cumulative
effects enhancements quite significant resulting much practical ip model
computing h see table summary relationship ipe ip

experimental evaluation ip delete free exact
computation h
section evaluate effectiveness integer programming model delete relaxation method solving delete free tasks computing h exactly evaluate following



fii mai f ukunaga

ip basic ip model section
ip lm ip landmark variable reduction method section
ipe enhanced model includes enhancements described sections
designed speed computation h landmark reduction
relevance analysis dominated action elimination immediate action application inverse action constraints
emphasize unlike evaluated later sections
ip compute h exactly
following previous work solvers delete free main
evaluation delete free versions standard ipc benchmark section
addition section present much smaller scale study set natural
delete free systems biology gefen brafman
evaluation delete free versions ipc benchmark instances
following methodology evaluating delete free previous work haslum et al
pommerening helmert gefen brafman evaluate ip
solving international contest ipc benchmark instances delete effects
actions ignored experiments used cplex solver solve integer
linear programs experiments single threaded executed xeon e ghz
previous work computing h evaluated several different sets
experimental settings different cpu limits different instances present
sets comparisons first sets comparisons compare benchmark reported
previous publications obtained running solvers instances
fourth set compares improved implementation minimal
hitting set haslum et al one original authors
comparison pommerening helmert experimental setup described section shown table
comparison gefen brafman experimental setup described
section shown table
comparison haslum et al experimental setup described section
shown table
comparison hst cplex improved implementation haslum
et al experimental setup described section shown table
figures
copied previous work pommerening helmert haslum et al
gefen brafman tables obtained hardware available several years ago
original papers written ip ipe hst cplex
obtained slightly recent hardware since coverage coarse metric binary solved unsolved significantly impacted differences machine speed


fio n p ractical nteger l inear p rogramming odel

e g many threshold slightly faster machine equivalent running
slightly longer many instances solved order eliminate possibility
improvements hardware since first compared
published explain improvements obtained include running best ip model ipe significantly shorter cpu time limit previous
experiments addition use cpu time limit previous experiments
c omparison r esults p ommerening
elete f ree v ersions ipc b enchmarks



h elmert



first comparison pommerening helmert table shows
running ip ip lm ipe minute time limit gb memory
limitation coverage instances solved domain shown columns
solver name contains ph table copied pommerening helmert
fd ph fast downward lm cut heuristic applied deleterelaxed bc ph hitting set bonet castillo
bnb ph ida ph best performing strategies incremental lm cut
heuristic delete free proposed pommerening helmert pommerening
helmert obtained amd opteron processor gb memory limit
minute time limit
table includes column ipe min shows minute runs
ipe columns table minute runs
c omparisons r esults g efen b rafman h aslum et al
elete f ree v ersions ipc b enchmarks
next evaluated h solvers previous obtained minute time
limit gb memory limit table compares ip ip lm ipe
gefen brafman p table lm cut gb column
lm cut heuristic helmert domshlak applied directly delete free instances order
compute h lm cut pruning gb column lm cut pruning techniques
delete free instances proposed gefen brafman table compares ip
ipe haslum et al p table bc hst column
method bonet castillo ml hst column minimal landmark method
proposed haslum et al original work haslum et al minimum cost hitting
set solved specialized branch bound ml hst column reflects performance original however minimal landmark method
later significantly improved replacing hitting set solver cplex solver
haslum b table includes hst cplex column shows
minimal landmark method cplex hitting set solver obtained hst cplex
running hst cplex code machine used run ip
table includes column ipe min shows minute runs
ipe columns table minute runs
note table instances ipc ipc sequential satisfying track e sat sat domain names accordance original
haslum et al


fii mai f ukunaga

c omparison



hst cplex



elete f ree v ersions ipc b enchmarks

detailed comparison improved implementation hitting set method
haslum et al although original version used specific
branch bound method solve hitting set used recent version
haslums h solver source dated configured use cplex solve hitting set subproblem configuration abbreviated hst cplex shown table
hst cplex significantly outperforms original hst implementation described haslum
et al compares favorably vs previous methods
tables figures compare ip ipe ip lm hst cplex
ipc benchmark instances run gb memory limit table shows
minute time limit table shows minute time limit tables
compares coverage runtimes per domain figure compares cumulative number
instances solved function time figure compares runtimes individual
instances
contrast previous set experiments described section used optimal track
instances opt opt domain names satisficing optimal track
instances available benchmark sets subsequent sections
focus applying basis heuristics forward search cost optimal
iscussion r esults elete f ree v ersions ipc b enchmarks
surprisingly basic ip model competitive previous state art methods specifically developed computing h haslum et al pommerening
helmert however table shows basic ip model least competitive
lm cut enhanced gefen brafmans pruning methods delete free instances
prune gb ip significantly outperforms standard lm cut table lmcut gb table fd ph
hand enhancing ip landmark model reduction method
significant improvement ip lm competitive previous methods except
hst cplex
ipe model includes enhancement described section reducing
model order compute h faster performs well overall competitive
previous methods example table ipe highest coverage tied highest
domains table figure figure ipe hst cplex
similar coverage minute time limit ipe tends somewhat faster overall
however clear dominance relationship ipe hst cplex since
domains ipe clearly performs better e g rovers satellite freecell
domains hst cplex performs better e g airport pegsol scanalyzer transport thus
ip minimal landmark approaches seem complementary strengths
respect solving delete free
aside coverage figure shows many delete free instances solved much faster
ipe hst cplex difference solving easy delete free instance
vs seconds may seem important need solve instance however
speed difference ipe hst cplex easy delete free instances
significant implication consider h solvers heuristic functions


fio n p ractical nteger l inear p rogramming odel

planners may need solve delete free many thousands times course
single search see section ipe heuristic
significantly outperforms hst cplex heuristic
order eliminate possibility cpu speed differences account qualitative improvements coverage obtained ip compared previously published table
includes column ipe min minute runs ipe table
includes column ipe min minute runs ipe effect
simulate machines run respectively speed machine used
experiments tables offsets improvements single core cpu
performance coverage achieved ipe min table
higher solvers table given minutes similarly coverage
achieved ipe min table higher solvers table
given minutes
therefore overall ipe competitive previous state art delete free solvers
indicate direct computation h integer programming viable
least computing delete free task
comparison hst cplex minimal seed set
assess performance best ip model ipe natural delete free task
compared ipe hst cplex set minimal seed set instances systems
biology gefen brafman consist instances originally evaluated gefen
brafman well three additional versions instances provided
original authors version uses different set action costs gefen brafman p
total instances solvers run hour cpu time limit per
instance gb ram limit
figure shows scatter plot comparing runtimes instance coverage
ipe instances coverage hst cplex instances one hand
figure shows majority instances solved significantly faster ipe
ipe solves instances times faster hst cplex hand
one instance hst cplex times faster ipe
one instance solved seconds hst cplex solved within
time limit ipe dre instance type preprocessing gefen brafman
p

relaxations h
although delete free interesting right main motivation
developing efficient ip model delete free able use basis
heuristic function forward state space search domain independent planner far
presented ip basic ip model computes h proposed ipe
incorporates number enhancements shown experimental section
significantly increase scalability model provide computing h
competitive previous state art methods possible simply use ipe
heuristic function forward search planner however shown section
computing h remains relatively expensive even ipe surprising given


fii mai f ukunaga

pommerening helmert table
domain
airport
blocks
depot
driverlog
freecell
grid
gripper
logistics
logistics
miconic
mprime
mystery
openstacks opt
pathways noneg
pipes notankage
pipes tankage
psr small
rovers
satellite
tpp
trucks
zenotravel
total coverage
best domains

ip

ip lm

ipe

ipe min

fd ph

bc ph

bnb ph

ida ph

solved

























solved

























solved

























solved

























solved

























solved

























solved

























solved

























table coverage instances solved delete free exact computation h
minute time limit except ipe min run minute time limit gb
ram comparison data table pommerening helmert
best domains number domains solver achieves highest coverage
including ties
gefen brafman table
domain
blocks
depot
driverlog
freecell
gripper
logistics
logistics
miconic
mystery
pipesworld notankage
pipesworld tankage
rovers
total coverage
best domains

ip

ip lm

ipe

lm cut gb

prune gb

solved















solved















solved















solved















solved















table coverage instances solved delete free exact computation h
minute time limit gb ram comparison data table gefen
brafman



fio n p ractical nteger l inear p rogramming odel

haslum et al
table
ip

domain
airport
barman sat
blocks
depot
driverlog
elevators sat
floortile sat
freecell
gripper
logistics
logistics
miconic
mprime
nomystery sat
parcprinter
pegsol
pipesworld notankage
pipesworld tankage
psr small
rovers
satellite
scanalyzer
sokoban sat
transport sat
trucks
visitall sat
woodworking sat
zenotravel
total coverage
best domains

solved































ip lm

solved































ipe

solved































hst cplex

solved































ipe

hst cplex

min

min

solved































solved































ml hst

bc hst

solved































solved































table coverage instances solved delete free exact computation h
minute time limit except ipe min hst cplex min run minute time limit gb ram comparison data table haslum et al




fii mai f ukunaga

ip min

domain
airport
barman opt
blocks
depot
driverlog
elevators opt
elevators opt
floortile opt
freecell
grid
gripper
logistics
logistics
miconic
mprime
mystery
nomystery opt
openstacks
openstacks opt
openstacks opt
parcprinter
parcprinter opt
parking opt
pathways noneg
pegsol
pegsol opt
pipesworld notankage
pipesworld tankage
psr small
rovers
satellite
scanalyzer
scanalyzer opt
sokoban opt
sokoban opt
tpp
transport opt
transport opt
trucks
visitall opt
woodworking opt
woodworking opt
zenotravel
total coverage
best domains

solved













































time














































ip lm min
solved













































time














































ipe min
solved













































time sd














































hst cplex min
solved













































time sd














































table detailed comparison ip ip lm ipe hst cplex deletefree tasks exact computation h minute time limit gb ram coverage mean
standard deviation runtimes average successful runs excludes unsuccessful runs



fio n p ractical nteger l inear p rogramming odel

ip min

domain
airport
barman opt
blocks
depot
driverlog
elevators opt
elevators opt
floortile opt
freecell
grid
gripper
logistics
logistics
miconic
mprime
mystery
nomystery opt
openstacks
openstacks opt
openstacks opt
parcprinter
parcprinter opt
parking opt
pathways noneg
pegsol
pegsol opt
pipesworld notankage
pipesworld tankage
psr small
rovers
satellite
scanalyzer
scanalyzer opt
sokoban opt
sokoban opt
tpp
transport opt
transport opt
trucks
visitall opt
woodworking opt
woodworking opt
zenotravel
total coverage
best domains

solved













































time sd














































ip lm min

time












































solved















































ipe min
solved













































time sd














































hst cplex min
solved













































time sd














































table detailed comparison ip ip lm ipe hst cplex deletefree tasks exact computation h minute time limit gb ram coverage mean
standard deviation runtimes average successful runs excludes unsuccessful runs



fii mai f ukunaga




instances solved





ipe
hst cplex





ip lm
ip















time seconds
figure comparison ip ip lm ipe hst cplex delete free tasks
exact computation h minute time limit gb ram cumulative number instances
instances table solved within ime seconds shown
computing h np equivalent bylander haslum reported previous baseline
direct computation h hitting set method proposed earlier work
haslum et al heuristic reported poor although section
ipe performs well domains h directly heuristic
continues pose significant challenge thus turn next relaxations ip ipe
lower bounds h computed faster making suitable admissible
heuristics forward search planner ip
lp lpe lp relaxations delete relaxation h
linear programming lp relaxations ip obvious candidates tractable
alternatives computing h ip ipe lp relaxations trivially derived
ip eliminating integer constraints variables optimal cost
lp relaxation lower bound optimal cost ip denote lp relaxation
ip lp lp relaxation ipe lpe see table case
domains integer action costs ceiling lp costs used
although lpe solved quickly tight theoretical bounds gap ip
lp gap ipe lpe difficult obtain proven
betz helmert exists constant c polynomial time
computing lower bound h states h ch unless p n p e
h polynomial time approximable constant factor c fortunately worst case


fio n p ractical nteger l inear p rogramming odel

x

x

x

x

x










ipe














hst cplex

figure comparison runtimes ipe hst cplex delete free instances exact computation h instances table minute time limit gb ram point represents instance x axis represents runtime hst cplex axis represents runtime
ipe example point diagonal x indicates ipe solved represented point faster hst cplex point x line indicates ipe
solved represented point least times faster hst cplex failed
solve instance within minute time limit runtime shown seconds

theoretical approximation necessarily apply real world instances fact
experimental lp relaxations often provide fast accurate lower
bounds h standard benchmark
time relaxation h
motivation embed computation h approximation thereof admissible
heuristic necessarily interested actual optimal delete free plan
cost plan approximation particular exact order actions
executed delete relaxed plan matter necessity time related variables
brought question
time relaxation ip ip without constraints c c denoted
iptr lp relaxation iptr denoted lptr table summarizes relationships among
propositions actions task satisfy conditions eliminating time related
variables affect cost optimal solution ip example relaxed
causal graph gefen brafman task cycle
decide values p constraints c c ip satisfied

fii mai f ukunaga



ipe










x
x
x












hst cplex

figure runtime comparisons ipe hst cplex minimal seed set natural
delete free instances gefen brafman minute time limit gb ram point represents
instance failed solve instance within minute time limit runtime
shown seconds coverage ipe instances coverage hst cplex
instances

dependently values variables case optimal costs ip
lp optimal costs iptr lptr respectively
indeed shall experimentally section relaxation quite tight e
ip iptr often cost iptr computed significantly faster ip similarly lptr lpetr ipetr time relaxations
lp lpe ipe computed much faster non time relaxed
counterparts
experimental evaluation lp time relaxation gaps
evaluated quality lp lpe lpetr linear programming bounds described comparing optimal costs computed bounds exact h values computed
ipe used set instances table table shows mean ratio
optimal cost lp model h instances h could computed
ipe perfect columns indicate fraction instances optimal cost
lp model equal h note used ceiling lp cost since ipc benchmark
instances integer costs stacked histogram representation data aggregated
domains classifies ratios optimal costs lp relaxations value h
shown figure
expect variable fixing constraints enhanced lpe model would
tend increase value optimal solution lpe compared optimal value
base lp relaxation lp addition would expect optimal value lpe
would tend greater optimal value time relaxation lpetr table shows


fio n p ractical nteger l inear p rogramming odel

general lpe lpetr lp domains lpe matches h perfectly
e lpe h domains lpe h almost every single domain
optimal lp value enhanced model lpe significantly better higher basic
formulation lp confirming variable elimination additional constraints serve
tighten lp bound thus enhancements basic model described section provide
significant benefit beyond speedups demonstrated section time relaxation
lpetr usually close lpe indicating time relaxation potentially
achieve good tradeoff computation cost accuracy fact see later
section lpetr performs quite well used heuristic
comparison evaluated ratio value lm cut heuristic helmert
domshlak h comparing average ratios lower bound h see
lp less informative lm cut domains informative lm cut
domains equivalent domains
lpe less informative lm cut domains informative lm cut
domains equivalent domains
lpetr less informative lm cut domains informative lm cut
domains equivalent domains
thus lm cut better approximation h basic lp relaxation lp
lpetr roughly equivalent lm cut interestingly lp relaxation appears highly complementary cost partitioning lm cut
lp relaxation lm cut informative roughly half cases
compared

lpe












fraction instances











lp

lp

e

lp

e
tr

figure ratio optimal lp costs h categorized buckets x fraction
instances ratio lp h range x example fraction instances
ratio optimal value lpetr h range approximately
stacked histogram data table


fii mai f ukunaga

lm cut
perfect























































































lm cut h

airport
barman opt
blocks
depot
driverlog
elevators opt
elevators opt
floortile opt
freecell
grid
gripper
logistics
logistics
miconic
mprime
mystery
nomystery opt
openstacks
openstacks opt
openstacks opt
parcprinter
parcprinter opt
parking opt
pathways noneg
pegsol
pegsol opt
pipesworld notankage
pipesworld tankage
psr small
rovers
satellite
scanalyzer
scanalyzer opt
sokoban opt
sokoban opt
tpp
transport opt
transport opt
trucks
visitall opt
woodworking opt
woodworking opt
zenotravel

lp
perfect























































































lp h

lpe
perfect























































































lpe h

lpetr

lpe

h
perfect
tr
























































































table gaps lp h mean ratio lp model h
instances solved ipe shown perfect columns indicate fraction instances
optimal cost lp model equal h



fio n p ractical nteger l inear p rogramming odel

figure compares runtimes cplex lp solver relaxed h lpe
significantly faster lp solving many instances times faster solving instances times faster demonstrating benefits enhanced model comparison lpetr lpe shows time relaxation addition speedup
factor additional speedup may seem significant solving
single lp instance takes fraction second cumulative effects lp heuristic forward search significant section
increased coverage lpetr heuristic compared lpe









lpetr



lpe









x
x
x
x
x













lp





x
x
x
x
x














lpe







figure runtime comparisons relaxed h delete free instances exact computation
h instances table minute time limit gb ram point represents instance
left subfigure compare lp vs lpe showing impact enhancements basic lp
model right subfigure compares lpe vs lpetr showing impact time relaxation
failed solve instance within minute time limit runtime shown
seconds

cost optimal planners h heuristics
embedded ip lp introduced far cost optimal
forward search planner planner implementation uses propositional representation
internally evaluated performance note particular experiment limited admissible heuristics whose value bounded h later section include
heuristics necessarily bounded h specifically evaluated following
solver configurations
ip basic delete free ip model ip heuristic
ipe enhanced delete free ip model ipe heuristic
lpe lp relaxation enhanced delete free ip model ipe
heuristic
lpetr lp relaxation time relaxed enhanced delete free ip model
ipe heuristic


fii mai f ukunaga

hsp hst cplex heuristic hitting set h solver hst cplex
haslum et al cplex solve hitting set instances hsp planner provided
patrik haslum
fd hmax fast downward hmax heuristic bonet geffner
fd lm cut fast downward landmark cut heuristic helmert domshlak
standard seq opt lmcut configuration
per standard ipc sequential optimal track settings solver configurations run
minute time limit per gb ram limit set instances ipc ipc used planner currently handles strips subset pddl action costs
table compares coverage heuristics figure shows cumulative coverage
solved function time solver configurations compared table
figure b shows cumulative coverage function number node evaluations calls
heuristic function
compare ip lp heuristics planners note significant implementation level differences heuristic function affect execution
speed example fast downward uses multi valued sas representation backstrom nebel
internally represent states planner uses strips propositional representation
significant differences internal data structures implementation details thus
used qualitative comparisons
table shows ip uses basic ip model worst coverage
among ip comparable hst cplex noted haslum
straightforward use h heuristic unsuccessful even worse fd
hmax coverage cost computing h search node high
however shown section solving ipe ip model significantly faster
ip hst cplex makes much viable heuristic function
ipe coverage significantly outperforming hst cplex
well fd hmax
shown section lp relaxations ip provide relatively tight lower
bounds h since lp solved much faster ip quite effective
used heuristics thus lpe uses lp relaxation enhanced
ipe model coverage lpetr uses lp relaxation
time relaxed enhanced ip model coverage
section showed lpe lpetr complementary lmcut respect informativeness suggests least respect search efficiency
lp competitive lm cut figure b shows fact lpe
lpetr tend search quite efficiently seen lines
lm cut line e solved given number evaluations node evaluations point overtaken lm cut line
informativeness comparison section showed lp comparable complementary lm cut respect informativeness fd lm cut outperforms lpetr
lpetr domains lm cut implementation fast downward
often significantly faster current implementation lp heuristics nevertheless several domains freecell parcprinter parcprinter opt satellite trucks visitall


fio n p ractical nteger l inear p rogramming odel

domain
airport
barman opt
blocks
depot
driverlog
elevators opt
elevators opt
floortile opt
freecell
grid
gripper
logistics
logistics
miconic
mprime
mystery
nomystery opt
openstacks
openstacks opt
openstacks opt
parcprinter
parcprinter opt
parking opt
pathways noneg
pegsol
pegsol opt
pipesworld notankage
pipesworld tankage
psr small
rovers
satellite
scanalyzer
scanalyzer opt
sokoban opt
sokoban opt
tpp
transport opt
transport opt
trucks
visitall opt
woodworking opt
woodworking opt
zenotravel
total coverage
best domains

fd hmax

fd lm cut

hsp hst cplex

ip

ipe

lpe

solved














































solved














































solved














































solved














































solved














































solved















































lpe
tr

solved














































table comparison forward search planners part number solved
minute gb ram limit ip lp bounded h sections
heuristic functions comparison fast downward hmax fast downward
landmark cut hsp planner hst cplex haslum et al compute h
heuristic function

lpetr achieves higher coverage fd lm cut thus lpetr best
model among bounded h considered fairly powerful admissible heuristic function forward state search


fii mai f ukunaga




instances solved





fd lmcut
lpetr
lpe
ipe
fd hmax














time seconds
cumulative number solved vs time minute time limit




instances solved





fd lmcut
lpetr
lpe
ipe
fd hmax













e

e

e

evaluations
b cumulative number solved vs number search nodes evaluated minute
time limit

figure comparison forward search planners part heuristics bounded
h



fio n p ractical nteger l inear p rogramming odel

incorporating counting constraints
far concentrated efficient computation h well relaxations h
far bounded h however ip model extended
constraints consider delete effects adding variables constraints related delete effects
actions model calculate lower bounds number times action must
applied variables defined follows
n n n iff used n times
p p g p g p iff p g
g p auxiliary variable similar p furthermore extended model meaning
u slightly modified mean action used least optimal
solution basic model proposed section pure delete free model u
denoted whether used exactly optimal solution
constraints defined follows
c n u
p
p
c p p g p ppredel n p padd n

predel pre del finally objective function modified minimize
p
aa c n given task use ipc denote ip adds
variables constraints ip
idea types constraints previously proposed several times sas
formulation correspond action order relaxation van den briel et al state
equation heuristic bonet net change constraints pommerening et al
intuitively final constraint states number uses actions adding p must greater
equal number uses actions requiring deleting p time feasible
plan feasible plan strips task satisfies condition hence
task feasible plan clearly derive feasible solution ipc
cost addition stronger proposition proved modifications
enhancements section
proposition given task feasible plan exists feasible
solution ipc cost cost addition exists feasible solution ipc combination landmark extraction substitution relevance
analysis inverse action constraints cost cost
proof let delete relaxation subsequence plan extracted
first subsequence feasible delete free plan
assignment derived satisfies constraints




use
denote elements feasible assume



first infeasible action let p proposition p pre ai p


ai since valid feasible plan delete relaxation entire sequence
valid feasible plan hence
feasible

skipped actions add p ai applied since line equal


ai skipped actions add p satisfy add ai thus


fii mai f ukunaga

extracting subsequence proof proposition











empty


let delete relaxation
relevant add
append end
add
end
end
return

irrelevant however contradicts definition relevance analysis


fact
relevant similar argument g hence valid feasible
plan
define assignment f ipc
vf vf variable v defined ip f assignment
derived ip
n f number occurrences
assignment f clearly satisfies constraints c c assignment f satisfies
constraint c since valid plan f satisfies constraint c since u f
included hence f feasible solution ipc cost
addition f feasible solution ipc combination landmark extraction
substitution relevance analysis inverse action constraints see checking
feasibility f type modified constraints independently f satisfies
modified constraints satisfies combination constraints
f satisfies constraints added landmark extraction substitution e substituting variables corresponding landmarks since valid feasible plan f
satisfies constraints added relevance analysis e substituting irrelevant actions
propositions since contains relevant actions finally
p f satisfies inverse
action constraints similarly proof proposition inv p e p f
p
u f u p f hold inv p e p f
p
u f u p f hold addition inv p e p f
u f u p f assume exists inv p e p f
constraint c u f means member without loss generality
assume applied applied since add pre definition inverse
actions nothing added state applying line equal


contradicts add ai
unfortunately counting constraints conflict dominated action elimination section
zero cost immediate action application section counting constraints used
necessary disable zero cost immediate action application modify condition
dominated actions follows


fio n p ractical nteger l inear p rogramming odel

definition modified dominated action definition given feasible task action dominated action add add ii p pre p fact landmark
p iii c c iv pre del pre del
longer use modified dominated actions make feasible plan since fact
landmarks sometimes deleted achieved however following fact proved
proposition given task let feasible solution exists
feasible solution ipc combination landmark extraction substitution relevance
analysis inverse action constraints modified dominated action elimination cost
equal less cost
proof recall dominated action elimination constraints substitute u dominated action contain modified dominated actions proposition holds
due proposition
otherwise derive feasible solution sequence actions made replacing
modified dominated actions corresponding dominating actions let
sequence note sum costs actions clearly less equal
let relaxation subsequence extracted since
prove delete relaxation feasible plan argument similar proof
proposition prove feasible plan argument similar
proof proposition
feasible plan derive feasible solution ipc constraints
proof proposition solution satisfies constraints c c
combination landmark extraction substitution relevance analysis inverse action
constraints satisfies constraint c u included satisfies
constraint c replacing dominated actions invalidate constraint c feasible
plan satisfies dominated action elimination constraints e u
dominated action since contain modified dominated action




ipec lpec denote constructed applying valid reductions
ipc lpc respectively lp time relaxations ip described section

applied ipc well lpectr time relaxed lp relaxation enhanced

ipec model table summarizes relationships among
experimental enhanced counting constraints


see impact adding counting constraints evaluated informativeness lpec

lpectr lpe lpetr comparing values lm cut heuristic values


helmert domshlak table shows values lpec lpectr lpe
lpetr multiple lm cut values means domain shown note
contrast table limited instances h could computed
exactly table includes instances lm cut values could computed
instances
majority domains counting constraints informative heuristic

compared without counting constraints cases lpe lpec

lpetr lpectr sometimes possible optimal value lpe larger


fii mai f ukunaga





optimal value lpec lpetr larger optimal value lpectr
explained section additional constraints part ipe

incompatible ipc excluded ipec resulting different lp polytopes
lp relaxations
next see impact adding counting constraints forward search


delete relaxation lp compare lpec lpe lpectr
lpetr coverage instances previous experiment shown table
tradeoff improved search efficiency due additional informativeness
heuristic provided counting constraints additional time required solve lps
additional constraints make lp difficult solve table shows

overall effects enhancing delete relaxation model mixed lpec attains coverage

instances lower coverage lpe lpectr solves
compared solved lpetr domains
adding counting constraints significantly improved coverage including parcprinter pathwaysnoneg rovers woodworking hand coverage dropped significantly elevators freecell openstacks adding counting constraints time relaxation seems
advantageous overall resulting increase instances lpe
lpetr
table shows value lmc seq lp value pommerening et al combination landmark constraints net change constraints operator counting framework analogous combination delete free model counting constraints


interesting compare optimal lp values lpec lpectr higher average value
lmc seq domains respectively lmc seq higher value


lpec lpectr domains thus previous comparison lm cut
lpe lpetr section delete relaxation seems complementary
lmc seq combination operator counting framework hand comparing
forward search optimal lp see fd lmc


seq significantly higher coverage lpec lpectr well lpec

lpectr

automatic lp model selection
definitions know strips task action
costs relationships among ip follows iptr ipetr ip

ipe h ipc ipec lp relaxations know lp




lpe lpetr lpe lpectr lpec lpectr lpec note

lpec dominate lpe dominated action elimination immediate action application eliminate different sets variables two lp figure
illustrates dominance relationships among bounds

time relaxed lpetr lpectr dominated non time relaxed

lpe lpec respectively time relaxed lps significantly cheaper compute
non relaxed counterparts

similarly although ipec dominates ipe possible lpe larger

lpec furthermore two lps optimal value one solved faster
clearly preferable lps must solved node search thus set


fio n p ractical nteger l inear p rogramming odel

airport
barman opt
blocks
depot
driverlog
elevators opt
elevators opt
floortile opt
freecell
grid
gripper
logistics
logistics
miconic
mprime
mystery
nomystery opt
openstacks
openstacks opt
openstacks opt
parcprinter
parcprinter opt
parking opt
pathways noneg
pegsol
pegsol opt
pipesworld notankage
pipesworld tankage
psr small
rovers
satellite
scanalyzer
scanalyzer opt
sokoban opt
sokoban opt
tpp
transport opt
transport opt
trucks
visitall opt
woodworking opt
woodworking opt
zenotravel

lmc seq

lpe


























































































lpe
tr

















































lpe
c

lpe
ctr

























































































table optimal values lp relative lm cut value ipc instances means
domain shown e g barman opt mean lmc seq value times lm
cut value lpe lpetr values times lm cut value lpec

lpectr values times lm cut value



fii mai f ukunaga




instances solved






fd lmc seq
autoconf
fd lmc
lpe
ctr
lpetr
fd seq














time seconds
cumulative number solved vs time minute time limit




instances solved






fd lmc seq
autoconf



fd lmc
lpe
ctr



lpetr
fd seq











e

e

e

evaluations
b cumulative number solved vs number search nodes evaluated minute
time limit

figure comparison forward search planners part



fio n p ractical nteger l inear p rogramming odel

viable lp heuristics none dominate others considering accuracy
time best choice optimize tradeoff heuristic accuracy node expansion
rate depends instance difficult choose best heuristic priori
general know whether worthwhile use counting constraints
whether time relaxation tight particular instance
thus implemented simple mechanism automatically selecting lp used

works follows first compute lpe lpec lpetr

lpectr instance e root node search select one
following rule choose heuristic highest value break ties choosing heuristic cheapest compute although cheapest heuristic could identified
according cpu time required compute heuristic many computations fast robust timing measurements simply break ties order lpetr


lpectr lpe lpec ordering usually accurately reflects timing order
mechanism makes simplistic assumption ranking behavior lp bounds
root node similar ranking lp bounds throughout search graph sophisticated method heuristic selection may better performance c f domshlak karpas
markovitch avenue future work
experimental automated model selection comparison
state art
compared lp heuristics including autoconf state art heuristics specifically compared
fd lm cut fast downward landmark cut heuristic helmert domshlak
standard seq opt lmcut configuration
fd lmc fast downward lp model optimal cost partitioning landmark
cut constraints pommerening et al
fd seq fast downward lower bound net change constraints pommerening et al
corresponding state equation heuristic bonet
fd opt sys fd pho sys fd pho sys fast downward optimal cost partitioning constraints projections goal variables opt sys post hoc optimization
constraints pho sys pho sys pommerening et al
fd lmc seq fast downward landmark cut net change constraints
lpe lp relaxation enhanced delete free ip model ipe
section heuristic
lpetr lp relaxation time relaxed enhanced delete free ip model
ipe heuristic


lpec lp relaxation enhanced delete free ip model counting

constraints ipec heuristic


lpectr lp relaxation time relaxed enhanced delete free ip model

counting constraints ipec heuristic


fii mai f ukunaga

c overage r esults
coverage number solved shown tables time spent
root node autoconf lp model selection included runtimes counts
minute runtime limit figures b cumulative number instances solved
function number time number node evaluations respectively legibility
subset included figures b table shows summary total coverage
forward search configurations included tables
indicate automatic lp model selection significantly boosts performance
planner compared relying single lp model autoconf achieved coverage instances significantly better individual components
furthermore autoconf attained higher coverage solver configurations table
except fd lmc seq pommerening et al solved instances note
autoconf higher coverage fd lmc seq domains floortile opt freecell
grid logistics nomystery opt pathways noneg rovers satellite trucks woodworking opt
woodworking opt
accuracy autoconf odel election
analyzed accuracy model selection evaluating performance autoconf
instance vs performance four component coverage
considered instances autoconf made correct decision respect
coverage model selection autoconf deemed correct autoconf
solved instance none components solved instance
hand runtimes considered well coverage instances autoconf
made correct decision selection deemed correct autoconf selected
model best runtime including ties none components solved

instance baseline lpectr best coverage among component
correct choice according criterion time mistakes selections made
autoconf seen table coverage example woodworking opt

domain autoconf solved instances compared instances solved lpectr thus
significant room improvement runtimes considered addition coverage
improving model selection machine learning techniques direction future work

discussion conclusion
proposed integer linear programming formulation delete relaxation h
cost optimal domain independent started basic ip model ip
showed enhanced model ipe incorporates landmark variable reduction
relevance analysis action elimination competitive previous methods solving deletefree versions standard ipc benchmarks tasks e exact computation h
embedding ip model heuristic function forward search
planner confirmed plain ip model practical coverage instances
vs fast downward hmax however showed ipe model
uses variable reduction methods reduce size ip exactly computes h
performed much better coverage instances according summary


fifd seq

lpe


lpe
tr







































































































































































































































autoconf

fd pho sys

















































fd pho sys















































lpe
ctr

fd opt sys

















































fd lmc seq

























































































































































































lpe
c

fd lmc

domain
airport
barman opt
blocks
depot
driverlog
elevators opt
elevators opt
floortile opt
freecell
grid
gripper
logistics
logistics
miconic
mprime
mystery
nomystery opt
openstacks
openstacks opt
openstacks opt
parcprinter
parcprinter opt
parking opt
pathways noneg
pegsol
pegsol opt
pipesworld notankage
pipesworld tankage
psr small
rovers
satellite
scanalyzer
scanalyzer opt
sokoban opt
sokoban opt
tpp
transport opt
transport opt
trucks
visitall opt
woodworking opt
woodworking opt
zenotravel
total coverage
best domains

fd lm cut

n p ractical nteger l inear p rogramming odel

table comparison forward search planners part number solved
minute gb ram limit ip lp heuristic functions includes lp


incorporate counting constraints lpec lpectr section well autoconf
section comparison fast downward operator counting lp pommerening
et al



fii mai f ukunaga

configuration
fd lm cut

solved


fd hmax
fd seq
fd pho sys
fd pho sys
fd lmc







fd opt sys
fd lmc seq
hst cplex





ip
ipe
lpe
lpetr

lpec

e
lpctr
autoconf









description
fast downward fd standard landmark cut heuristic
seq opt lmcut
fd hmax heuristic
fd seq lp heuristic pommerening et al
fd pho sys lp heuristic pommerening et al
fd pho sys lp heuristic pommerening et al
fd lp model optimal cost partitioning landmark constraints pommerening et al
fd opt sys lp heuristic pommerening et al
fd lmc seq lp heuristic pommerening et al
hsp planner h heuristic haslum et al haslum

basic ip formulation h
ip enhancements sections
lp relaxation ipe
lp relaxation time relaxed model ipetr

lp relaxation ipec

lp relaxation time relaxed model ipectr
automated selection lp root node section

table summary coverage solved ipc benchmark instances
minute time limit gb ram see tables detailed
table aggregate coverage ipe comparable coverage obtained lpbased seq opt sys pho sys pho sys heuristics recently implemented
operator counting framework pommerening et al however aggregate coverage
ipc benchmarks skewed miconic domain seq opt sys pho sys
pho sys perform particularly poorly compared heuristics miconic domain
included ipe competitive lp note freecell
domain ipe heuristic solved instances significantly higher
methods least domain exact h computation ipe model
performs extremely well compared state art heuristics
showed gap optimal value lp relaxations ip
h tended quite small gap often zero suggesting lp relaxations
computed much faster ip could used heuristic
time relaxation eliminates time related constraints proposed another way
reduce model order solvable faster comparison lp relaxed delete relaxation
lm cut helmert domshlak heuristic values showed approaches
complementary respect closely approximate h thus lp relaxation
delete free provides novel practical alternative approximating h showed
search lpe lp relaxation delete free task lpetr time relaxed
lp relaxation delete free task significantly improves upon ip solving
instances respectively making usable practical heuristics
major advantage lp heuristics relative ease additional constraints
added order obtain improved heuristics showed counting constraints
corresponding net change constraints proposed previous work van den briel et al

pommerening et al could added lp model resulting heuristic lpectr
mixed improving performance domains degrading performance

domains e lpetr lpectr complementary heuristics


fio n p ractical nteger l inear p rogramming odel



since dominance relationship among lpe lpetr lpec


lpectr proposed autoconf simple method automatically selects among
heuristics computing heuristic values root node accurate heuristic
breaking ties according speed showed overall autoconf significantly improves upon
components competitive landmark cut heuristic solving instances
achieving state art performance several domains
autoconf lower total coverage compared fast downward lmc seq
lp heuristic pommerening et al lp outperforms lmcseq several domains including freecell pathways noneg rovers satellite trucks woodworking although autoconf includes lp counting constraints consider
delete effects note lpetr uses pure delete free lp performs quite well obtaining higher coverage operator count heuristics pommerening et al
floortile freecell nomystery opt satellite trucks domains counting constraints
required order delete relaxation lps achieve state art
performance domains
comparison optimal values counting constraint enhanced delete relaxation lp


lpec lpectr optimal lp values lmc seq model showed
complementary class outperforming roughly
number domains section thus integrating two approaches single lp model
promising direction future work recent survey lp heuristics
roger pommerening noted delete relaxation model incorporated
operator counting framework pommerening et al adding operator counting variables
operator delete relaxed promising direction future work note
pommerening et al use landmarks used
different purposes landmark constraints used pommerening et al used directly
operator counting constraints contrast uses landmarks order decrease
size ip lp delete free task used purpose speeding
computation ip lp e landmark reduction change optimal value
ip

showed adding counting constraints consider delete effects e lpec

lpectr improve performance domains domains coverage dropped
significantly additional constraints make lp difficult solve
increased search efficiency due tighter bound enough overcome increased cost
solving lp search node autoconf attempts address selecting
counting constraints return higher value model without counting constraints root node otherwise uses model include counting constraints
e lpe lpetr hand strengthening delete relaxation considering
delete effects active area recently two frameworks allow flexible interpolation delete relaxation original model proposed
keyder hoffmann haslum propose adds fluents represent
conjunctions fluents original task red black domshlak hoffmann
katz framework separates state variables two groups red variables
relaxed black variables relaxed combining flexible relaxation frameworks
ip developing principled deciding use counting
constraints avenue future work


fii mai f ukunaga

current implementation uses cplex solver naively relying entirely default control
parameters systematically tuning improving implementation ip lp order
make better use incremental ip lp solving capabilities promising direction future work
although shown lp often compute h exactly domains
significant gaps h optimal cost lp improved
modeling techniques may allow tighter lp bounds example constraint c uses straightforward
big encoding may possible obtain tighter bounds methods
furthermore although solving ip node forward search planner previously considered impractical shown ipe model computes h
exactly almost useful practical heuristic improving techniques used solve ip
ipe may balance accuracy speed necessary practical general
purpose heuristic example significant performance improvements might obtainable improving use ip solver example contrast lp solvers parallel speedups
often difficult obtain ip solvers often sped significantly parallelization current
ip solvers already provide parallel search use
limited experiments single threads number cores per processor continues increase possible cases ip heuristics may become useful lp
heuristics

acknowledgments
thanks patrik haslum assistance code computing h hsp f planner
thanks florian pommerening assistance code lp heuristic fast downward pommerening et al thanks anonymous reviewers numerous helpful suggestions significantly improved supported jsps grant aid
jsps fellows jsps kakenhi grant

references
backstrom c nebel b complexity sas computational intelligence
betz c helmert h theory practice ki pp
springer
blum furst fast graph analysis artificial intelligence
bonet b admissible heuristic sas obtained state equation
proceedings international joint conference artificial intelligence ijcai pp

bonet b castillo j complete generating landmarks proceedings
international conference automated scheduling icaps
bonet b geffner h heuristic search artificial intelligence

bonet b helmert strengthening landmark heuristics via hitting sets proceedings
european conference artificial intelligence ecai pp


fio n p ractical nteger l inear p rogramming odel

bonet b van den briel flow heuristics optimal landmarks
merges proceedings international conference automated
scheduling icaps
bylander computational complexity propositional strips artificial
intelligence
bylander linear programming heuristic optimal proceedings
national conference artificial intelligence aaai pp
cooper c de roquemaurel regnier p transformation optimal
journal experimental theoretical artificial intelligence
dimopoulos improved integer programming heuristic search ai
proceedings th european conference ecp pp
domshlak c karpas e markovitch online speedup learning optimal
journal artificial intelligence
domshlak c hoffmann j katz red black systematic
partial delete relaxation artificial intelligence
gefen brafman r minimal seed set proceedings international conference automated scheduling icaps pp
gefen brafman r pruning methods optimal delete free proceedings
international conference automated scheduling icaps pp
haslum p incremental lower bounds additive cost proceedings
international conference automated scheduling icaps pp
haslum p personal communication
haslum p b hsp code documentatoin http users cecs anu edu au
patrik un hsps html
haslum p slaney j thiebaux minimal landmarks optimal delete free proceedings international conference automated scheduling
icaps pp
helmert domshlak c landmarks critical paths abstractions whats difference anyway proceedings international conference automated
scheduling icaps pp
hoffmann j nebel b system fast plan generation heuristic search journal artificial intelligence
hoffmann j porteous j sebastia l ordered landmarks journal
artificial intelligence
imai fukunaga practical integer linear programming model deleterelaxation cost optimal proceedings european conference artificial
intelligence ecai
karpas e domshlak c cost optimal landmarks proceedings
international joint conference artificial intelligence ijcai pp


fii mai f ukunaga

katz domshlak c optimal admissible composition abstraction heuristics artificial intelligence
kautz h selman b satisfiability proceedings european conference artificial intelligence ecai pp
kautz h selman b pushing envelope propositional logic stochastic search proceedings national conference artificial intelligence aaai pp

kautz h selman b unifying sat graph proceedings
international joint conference artificial intelligence ijcai pp
keyder e richter helmert sound complete landmarks graphs
proceedings european conference artificial intelligence ecai pp
keyder e geffner h heuristics action costs revisited proceedings
european conference artificial intelligence ecai pp
keyder e r hoffmann j haslum p improving delete relaxation heuristics
explicitly represented conjunctions journal artificial intelligence
mirkis v domshlak c cost sharing approximations h proceedings
international conference automated scheduling icaps pp
pommerening f helmert optimal delete free tasks incremental lm cut proceedings international conference automated
scheduling icaps pp
pommerening f roger g helmert bonet b lp heuristics costoptimal proceedings international conference automated
scheduling icaps
pommerening f roger g helmert getting pattern databases
classical proceedings international joint conference artificial
intelligence ijcai
rintanen j satisfiability heuristics artificial intelligence
rintanen j heljanko k niemela satisfiability parallel plans plan search artificial intelligence
robinson n advancing satisfiability ph thesis griffith university
robinson n mcilraith toman cost query optimization via ai
proceedings twenty eighth aaai conference artificial intelligence july
quebec city quebec canada pp
roger g pommerening f linear programming heuristics optimal
aaai workshop search optimization
van den briel personal communication
van den briel benton j kambhampati vossen lp heuristic
optimal proceedings international conference principles practice
constraint programming cp


fio n p ractical nteger l inear p rogramming odel

van den briel kambhampati optiplan planner integer programming
journal artificial intelligence
van den briel vossen kambhampati loosely coupled formulation automated integer programming perspective journal artificial intelligence

vossen ball lotem nau use integer programming
ai proceedings international joint conference artificial intelligence
ijcai pp
zhu l givan r landmark extraction via graph propagation proceedings
icaps doctoral consortium pp




