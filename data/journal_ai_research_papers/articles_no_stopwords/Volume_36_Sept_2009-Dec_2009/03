Journal Artificial Intelligence Research 36 (2009) 547-556

Submitted 06/09; published 12/09

Research Note
Soft Goals Compiled Away
Emil Keyder

emil.keyder@upf.edu

Universitat Pompeu Fabra
Roc Boronat, 138
08018 Barcelona Spain

Hector Geffner

hector.geffner@upf.edu

ICREA & Universitat Pompeu Fabra
Roc Boronat, 138
08018 Barcelona Spain

Abstract
Soft goals extend classical model planning simple model preferences.
best plans ones least cost ones maximum utility,
utility plan sum utilities soft goals achieved minus
plan cost. Finding plans high utility appears involve two linked problems:
choosing subset soft goals achieve finding low-cost plan achieve them. New
search algorithms heuristics developed planning soft goals,
new track introduced International Planning Competition (IPC) test
performance. note, show however extensions needed:
soft goals increase expressive power basic model planning action
costs, easily compiled away. apply compilation problems
net-benefit track recent IPC, show optimal satisficing
cost-based planners better compiled problems optimal satisficing netbenefit planners original problems explicit soft goals. Furthermore, show
penalties, negative preferences expressing conditions avoid, compiled
away using similar idea.

1. Models
STRIPS problem tuple P = hF, I, O, Gi F set fluents, F
G F initial state goal situation, set actions operators
precondition, add, delete lists P re(a), Add(a), Del(a) respectively,
subsets F . action sequence = ha0 , . . . , applicable P actions ai ,
= 0, . . . , n, O, exists sequence states hs0 , . . . , sn+1 i,
s0 = I, P re(ai ) si si+1 = si Add(ai ) \ Del(ai ) = 0, . . . , n. applicable
action sequence achieves fluent g g sn+1 , plan P achieves goal
g G, write |= G. classical setting, cost plan c() given
||, number actions . cost structure generalized addition
cost function operators:
c
2009
AI Access Foundation. rights reserved.

fiKeyder & Geffner

Definition 1 STRIPS problem action costs tuple Pc = hF, I, O, G, ci,
+
P = hF, I, O, Gi STRIPS problem c function c :
7 R+
0 R0 stands
non-negative reals.
cost plan problem Pc given
||
X

c() =

c(ai )

(1)

i=1

ai denotes th action . cost function c() = || obtained special
case c(o) = 1 O. Adding utilities soft goals problem formulation
results new model:
Definition 2 STRIPS problem action costs soft goals tuple Pu = hF, I, O,
G, c, ui, P = hF, I, O, G, ci STRIPS problem action costs, u partial
function u : F 7 R+ maps subset fluents (the soft goals) positive reals.
STRIPS problem soft goals Pu , utility plan given difference
total utility obtained plan cost:
u() =

X

u(p) c() .

(2)

p:|=p

plan problem soft goals Pu optimal plan 0 utility
u( 0 ) higher u(). utility optimal plan problem hard goals
never negative, empty plan non-negative utility zero cost.
recent International Planning Competition (IPC6) featured Sequential Optimal Net Benefit Optimal tracks objective find optimal plans
respect models captured Equation 1 Equation 2 respectively (Helmert, Do,
& Refanidis, 2008).1

2. Equivalence
Given problem P soft goals, equivalent problem P 0 action costs soft
goals defined whose plans encode corresponding plans P . transformation,
first introduced Keyder Geffner (2007), simple direct, yet seems escaped attention researchers area (Smith, 2004; Sanchez & Kambhampati, 2005;
Bonet & Geffner, 2008; Baier, Bacchus, & McIlraith, 2007). Also, unlike compilation
soft goals numeric variables arbitrary plan metrics (Edelkamp, 2006), proposed
transformation makes use neither requires planners ability handle
1. PDDL3, soft goals represented expressions form ( u (is-violated hprefi)) appearing
problem metric pref preference soft goal associated formula A.
single fluent, expression corresponds u(A) = u terminology used here.
competition benchmarks contain preferences form. general case arises
compound formula fluents considered Section 4.

548

fiSoft Goals Compiled Away

action costs, basic functionality required satisficing track recent IPC
(Helmert et al., 2008).2
write actions tuples form = hPre(o), Eff(o)i, effects
positive (Adds) negative (Deletes). assume soft goal fluent p, P
contains fluent p representing negation. introduced standard way,
adding p initial state p initially true, including p Add Delete
lists actions deleting adding p respectively (Gazen & Knoblock, 1997; Nebel, 2000).
problem P 0 action costs soft goals equivalent problem P
soft goals obtained following transformation:
Definition 3 STRIPS problem action costs soft goals P = hF, I, O, G, c, ui,
compiled STRIPS problem action costs P 0 = hF 0 , 0 , O0 , G0 , c0
F 0 = F 0 (P ) S(P ) {normal-mode, end-mode}
0 = S(P ) {normal-mode}
G0 = G 0 (P )
O0 = O00 {collect(p), f orgo(p) | p SG(P )} {end}

c(o) O00
0
u(p) = forgo(p)
c (o) =

0
= collect(p) = end

SG(P ) = {p | (p F ) (u(p) > 0)}
0 (P ) = {p0 | p SG(P )}
S(P ) = {p0 | p0 0 (P )}
end = h{normal-mode}, {end-mode, normal-mode}i
collect(p) = h{end-mode, p, p0 }, {p0 , p0 }i
forgo(p) = h{end-mode, p, p0 }, {p0 , p0 }i
O00 = {hPre(o) {normal-mode}, Eff(o)i | O}
2. Edelkamps transformation associates soft goals p1 , . . . , pm numeric
variables n1 , . . . , nm ,
P
domain {0, 1}. utility plan expressed U () = n
i=1 ni u(pi ) cost(),
u(pi ) represents utility associated soft goal pi ni represents value numeric variable
final state achieved plan. transformation eliminates soft goals, requires
place plan metric whose terms (namely, whether variables u(pi ) 1 0) state-dependent.
Current heuristics deal metrics (See Sections 3 4).

549

fiKeyder & Geffner

soft goal p P , transformation adds dummy hard goal p0 P 0
achieved two ways: action collect(p) cost 0 requires p
true, action forgo(p) cost equal utility p yet performed
p false, equivalently p true. two actions used
end action makes fluent end-mode true, actions original
problem P used fluent normal-mode true prior execution
end action. Moreover, exactly one {collect(p), forgo(p)} appear soft goal
p plan, delete shared precondition p0 , action makes true.
way make normal-mode true deleted end action,
plans 0 P 0 form 0 = h, end, 00 i, plan P 00 sequence
|S 0 (P )| collect(p) forgo(p) actions order, former appearing |= p,
latter otherwise.
two problems P P 0 equivalent sense correspondence
plans P P 0 , corresponding plans ranked way.
specifically, plan P , plan 0 P 0 extends end action
set collect forgo actions, plan cost c( 0 ) = u() + ,
constant independent 0 . Finding optimal (maximum utility)
plan P therefore equivalent finding optimal (minimum cost) plan 0 P 0 .
Proposition 1 (Correspondence plans) applicable action sequence
P , let extension 0 denote sequence obtained appending end action
followed permutation actions collect(p) forgo(p) p SG(P ),
|= p 6|= p respectively.
plan P 0 plan P 0
Proof: () new actions P 0 delete p F , hard goal achieved
remain true final state reached 0 , 0 |= G. p F
u(p) > 0, either |= p 6|= p. first case, p0 achieved collect(p),
second, forgo(p), therefore 0 |= 0 (P ). Since G0 = G 0 (P ), 0 |= G0 .
() 0 plan P 0 , hard goals G P must made true 0
end action, action collect forgo actions applied
make p F true. plan obtained removing end action collect
forgo actions must therefore achieve G thus valid plan P .
2
Proposition 2 (Correspondence utilities costs) Let 1 2 two
plans P , let 10 20 extensions 1 2 respectively. Then,
u(1 ) > u(2 ) c(10 ) < c(20 )

0
0
Proof: Let
P plan P extension . demonstrate c( ) =
u() + pSG(P ) u(p). Since summation expression constant given
problem P , assertion follows directly:

550

fiSoft Goals Compiled Away

X

c( 0 ) = c() + c0 (end) +

c0 (forgo(p)) +

forgo(p) 0

X

= c() +

X

c0 (collect(p))

collect(p) 0

c0 (forgo(p))

forgo(p) 0

= c() +

X

u(p)

p:6|=p

X

= c() +

u(p)

X

u(p)

p:|=p

pSG(P )

= u() +

X

u(p)

pSG(P )
2

Proposition 3 (Equivalence) Let plan P , 0 plan P 0 extends
. Then,
optimal plan P 0 optimal plan P 0

Proof: Direct two propositions above.

2

following section, empirically compare performance net-benefit planners
problems P explicit soft goals sequential planners problems P 0
soft goals compiled away. order improve latter, make
transformation Definition 3 effective simple trick. Recall single
plan P , many extensions 0 P 0 , containing actions
cost, differing way collect forgo actions ordered.
efficiency purposes, implementation enforces fixed arbitrary ordering p1 , . . . , pm
soft goals P adding dummy hard goal p0i precondition actions
collect(pi+1 ) forgo(pi+1 ) = 1, . . . , 1. result single possible
extension 0 every plan P , space plans search therefore reduced.
optimization used experiments reported below.

3. Experimental Results
formal results imply best plans problem P action costs
soft goals computed looking best plans compiled problem P 0
action costs soft goals, standard classical planning techniques
applied. test practical value transformation, evaluate performance
optimal satisficing planning techniques soft goals. problems test
suite contain preferences conjunctions rather single fluents. preferences
handled variant approach described above, detailed Section 4.
results shown three columns Table 1 labelled Net-benefit optimal planners
results reported organizers 2008 International Planning Competition
(IPC6) (Helmert et al., 2008). results obtained using machines
551

fiKeyder & Geffner

Domain
crewplanning(30)
elevators (30)
openstacks (30)
pegsol (30)
transport (30)
woodworking (30)
total

Net-benefit optimal planners
Gamer HSP*P Mips-XXL
4
16
8
11
5
4
7
5
2
24
0
23
12
12
9
13
11
9
71
49
55

Sequential optimal planners
Gamer HSP*F HSP*0 Mips-XXL
8
21
8
19
8
8
3
6
4
6
1
22
26
14
22
15
15
9
10
14
7
71
78
50

Table 1: Coverage optimal planners: leftmost three columns give number problems
solved planners Net Benefit Optimal track IPC6, reported
competition organizers. rightmost four columns give number compiled
problems solved Sequential Optimal versions planners. Dashes indicate
version planner could run domain.

settings used competition: Xeon Woodcrest computers clock speeds 2.33
GHz, time limit 30 minutes memory limit 2GB.
first set experiments, consider problems used Net Benefit Optimal
(NBO) track IPC6, soft goals defined terms goal-state preferences
(Gerevini & Long, 2006), compare results obtained three optimal netbenefit planners results obtained Sequential Optimal (SO) variants
compilations.3 three planners entered NBO track IPC6 Gamer,
Mips-XXL, HSP*P . planners test compiled versions NBO
problems versions Gamer (Edelkamp & Kissmann, 2008) Mips-XXL
(Edelkamp & Jabbar, 2008) two planners HSP*F HSP*0 (Haslum, 2008).4
ranked first, fifth, second, third, respectively, track (Helmert
et al., 2008). Three six domains NBO track IPC6 involve numeric
variables appear preconditions actions. version Gamer
handle numeric variables, therefore unable run Gamer problems.
Numeric variables never appear soft goals left untouched compilation.
data Table 1 show two HSP* planners track run
compiled problems well as, better than, best planner NBO track run
original problems soft goals. maximum number solved problems
domain higher NBO track planners single domain, openstacks (7 vs. 6).
domains, planners able solve larger number problems
3. compiled problems currently available http://ipc.informatik.uni-freiburg.de/Domains.
4. versions HSP* bug may cause suboptimal invalid solutions computed
domains non-monotonic numeric variables (numeric variables whose values may increase
decrease) occur preconditions actions goals (See http://ipc.informatik.uni-freiburg.
de/Planners). variables present transport domain tested, yet plans
computed HSP* versions domain turn valid (as verified VAL plan
validator, Howey & Long, 2003) optimal instances checked
costs plans computed planners.

552

fiSoft Goals Compiled Away

Domain
elevators (30)
openstacks (30)
pegsol (30)
rovers (20)
total

Net-benefit satisficing planners
SGPlan YochanPS Mips-XXL
0
0
8
2
0
2
0
5
23
8
2
1
10
7
34

Cost satisficing planners
Lama
23
28
29
17
97

Table 2: Coverage quality satisficing planners: entries indicate number problems
planner generated best quality plan.

maximum number solved NBO planner. Considering performance NBO
variants planner, compilation benefits two versions
heuristic search planner HSP* , leaving BDD planners Gamer Mips-XXL relatively
unaffected. Interestingly, HSP*0 using compilation ends solving problems
Gamer, winner NBO track (78 vs. 71). drastically better performance
versions HSP* compared net-benefit version result simple scheme
handling soft goals latter, optimal plans computed possible
subset soft goals problem (roughly), change search algorithm
IDA* A*.
second set experiments, consider three domains NBO track
IPC6 contain numeric variables preconditions actions,
domain rovers net-benefit track IPC5. Domains containing numeric variables
preconditions actions considered due lack state-of-the-art cost-based
planners able handle them. Domains rovers NB track IPC5
considered contain disjunctive, existentially qualified, universally qualified
soft goals current implementation support. satisficing net-benefit
planners test problems SGPlan (Hsu & Wah, 2008), winner net
benefit track IPC5, YochanPS (Benton, Do, & Kambhampati, 2009), received
distinguished performance award competition, satisficing variant
MIPS-XXL, received distinguished performance award competition
competed optimal track IPC6. solve compiled versions problems
LAMA, winner sequential satisficing track IPC6. YochanPS, MIPS-XXL,
LAMA anytime planners, results discussed refer cost
best plan found end evaluation period 30 minutes.
Entries Table 2 show number problems domain plan
generated planner best plan produced. report data rather
showing graphs plan utilities absolute difference quality plans
meaningful except shortest plans (that ignore costs and/or soft goals)
problem significantly costly. results show running state-of-the-art
cost-based planner compiled problems yields best plan 98 total
110 instances, almost three times number instances best-performing
native soft goals planner, MIPS-XXL, gives best plan. Furthermore, 22 23
553

fiKeyder & Geffner

problems MIPS-XXL finds best plan pegsol domain, LAMA finds plan
quality. problems satisficing net-benefit planners outperform
LAMA run compiled problems therefore few.
results appear contradict results reported Benton et al. (2009),
native net-benefit planner, YochanPS , yields better results cost-based planner,
YochanCOST , run problems compiled according earlier version transformation
(Keyder & Geffner, 2007). discrepancy appears result non-informative
cost-based heuristic used YochanCOST , leads plans forgo soft goals,
fact make use optimization discussed end Section 2,
results unnecessary blowup state space. analysis differences
recent cost-based planners, see paper Keyder Geffner (2008).

4. Extensions
shown possible compile away positive utilities u(p) associated
single fluents p. show compilation extended deal positive
utilities defined formulas fluents negative utilities defined single
fluents formulas. Negative utilities stand conditions avoided rather
sought; example, utility u(p q) = 10 penalizes plan results state
p q true extra cost 10. compilation soft goals defined
formulas based standard compilation goal precondition formulas classical
planning (Gazen & Knoblock, 1997; Nebel, 1999).
positive utility logical formula compiled away introducing new
fluent pA achieved zero cost end state holds,
assigning utility associated pA . DNF formula D1 . . . Dn ,
suffices add n new actions a1 , . . . , ai = hDi , pA = 1, . . . , n.
CNF formula C1 . . . Cn , fluent pi introduced = 1, . . . , n, along
actions aij = hCij , pi j = 1, . . . , |Ci |, Cij stands jth fluent Ci .
introduce action = h{p1 , . . . , pn }, pA allows addition fluent pA states
holds. newly introduced actions zero cost, must applicable
P 0 actions original problem P collect forgo actions.
best extensions plan achieves P achieve pA use collect
action achieve hard goal fluent p0A associated pA zero cost.
negative utility u(A) < 0 formula DNF CNF compiled away
two steps, first substituting positive utility u(A) negation
compiling positive utility formula utility single fluent described
above. makes use fact negation formula CNF formula
DNF vice versa.

5. Summary
shown soft goals add expressive power easily compiled
away. implies new search algorithms heuristics strictly required
handling them. practical standpoint, experiments indicate state-of-the-art
sequential planners outperform state-of-the-art net-benefit planners compiled versions
554

fiSoft Goals Compiled Away

benchmarks used recent planning competitions. Furthermore, similar transformations
used compile away positive negative utilities logical formulas DNF
CNF.

Acknowledgments
thank Malte Helmert help compiling running many IPC6 planners,
Patrik Haslum help aspects various versions HSP, J. Benton
help compiling running YochanPS . H. Geffner partially supported Grant
TIN2006-15387-C03-03 MEC, Spain.

References
Baier, J. A., Bacchus, F., & McIlraith, S. A. (2007). heuristic search approach planning
temporally extended preferences. Proc. IJCAI-07, pp. 18081815.
Benton, J., Do, M., & Kambhampati, S. (2009). Anytime heuristic search partial satisfaction planning. Artificial Intelligence, 173 (5-6), 562592.
Bonet, B., & Geffner, H. (2008). Heuristics planning penalties rewards formulated logic computed circuits. Artificial Intelligence, 172 (12-13),
15791604.
Edelkamp, S. (2006). compilation plan constraints preferences. Proc.
ICAPS-06, pp. 374377.
Edelkamp, S., & Jabbar, S. (2008). MIPS-XXL: Featuring external shortest path search
sequential optimal plans external branch-and-bound optimal net benefit.
6th. Int. Planning Competition Booklet (ICAPS-08).
Edelkamp, S., & Kissmann, P. (2008). Gamer: Bridging planning general game playing
symbolic search. 6th. Int. Planning Competition Booklet (ICAPS-08).
Gazen, B., & Knoblock, C. (1997). Combining expressiveness UCPOP
efficiency Graphplan. Steel, S., & Alami, R. (Eds.), Proc. 4th European Conf.
Planning, pp. 221233. Springer.
Gerevini, A., & Long, D. (2006). Preferences soft constraints PDDL3. Proc.
ICAPS-06 Workshop Preferences Soft Constraints Planning, pp. 4653.
Haslum, P. (2008). Additive reversed relaxed reachability heuristics revisited. 6th.
Int. Planning Competition Booklet (ICAPS-08).
Helmert, M., Do, M., & Refanidis, I. (2008). IPC 2008 deterministic competition. 6th.
Int. Planning Competition Booklet (ICAPS-08).
Howey, R., & Long, D. (2003). VALs progress: automatic validation tool PDDL2.1
used international planning competition. Proc. 2003 ICAPS Workshop
Competition: Impact, Organization, Evaluation, Benchmarks.
Hsu, C.-W., & Wah, B. W. (2008). SGPlan planning system IPC6. 6th. Int.
Planning Competition Booklet (ICAPS-08).
555

fiKeyder & Geffner

Keyder, E., & Geffner, H. (2007). Set-additive TSP heuristics planning action costs soft goals. Proc. ICAPS-06 Workshop Heuristics DomainIndependent Planning.
Keyder, E., & Geffner, H. (2008). Heuristics planning action costs revisited.
Proc. 18th European Conference Artificial Intelligence, pp. 588592.
Nebel, B. (1999). Compilation schemes: theoretical tool assessing expressive
power planning formalisms. Proc. KI-99: Advances Artificial Intelligence, pp.
183194. Springer-Verlag.
Nebel, B. (2000). compilability expressive power propositional planning.
Journal Artificial Intelligence Research, 12, 271315.
Sanchez, R., & Kambhampati, S. (2005). Planning graph heuristics selecting objectives
over-subscription planning problems. Proc. ICAPS-05, pp. 192201.
Smith, D. E. (2004). Choosing objectives over-subscription planning. Proc. ICAPS-04,
pp. 393401.

556


