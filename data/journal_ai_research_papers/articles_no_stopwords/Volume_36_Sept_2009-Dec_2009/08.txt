Journal Artificial Intelligence Research 36 (2009) 387-414

Submitted 07/09; published 11/09

Approximate Strong Equilibrium Job Scheduling Games
Michal Feldman

mfeldman@huji.ac.il

School Business Administration
Center Study Rationality,
Hebrew University Jerusalem, Israel.

Tami Tamir

tami@idc.ac.il

School Computer Science,
Interdisciplinary Center, Herzliya, Israel.

Abstract
Nash Equilibrium (NE) strategy profile resilient unilateral deviations,
predominantly used analysis multiagent systems. downside NE
necessarily stable deviations coalitions. Yet, show paper,
cases, NE exhibit stability coalitional deviations, benefits
joint deviation bounded. sense, NE approximates strong equilibrium.
Coalition formation key issue multiagent systems. provide framework
quantifying stability performance various assignment policies solution
concepts face coalitional deviations. Within framework evaluate given
configuration according three measures: (i) IR min : maximal number ,
exists coalition minimal improvement ratio among coalition members , (ii) IR max : maximal number , exists coalition
maximal improvement ratio among coalition members , (iii) DR max :
maximal possible damage ratio agent outside coalition.
analyze measures job scheduling games identical machines. particular,
provide upper lower bounds three measures NE wellknown assignment rule Longest Processing Time (LPT).
results indicate LPT performs better general NE. However, LPT
best possible approximation. particular, present polynomial time approximation
scheme (PTAS) makespan minimization problem provides schedule
IR min 1 + given . respect computational complexity, show
given NE 3 identical machines 2 unrelated machines, NP-hard
determine whether given coalition deviate every member decreases cost.

1. Introduction
consider job scheduling systems, n jobs assigned identical machines
incur cost equal total load machine assigned to.1
problems widely studied recent years game theoretic perspective (Koutsoupias & Papadimitriou, 1999; Andelman, Feldman, & Mansour, 2007; Christodoulou,
Koutsoupias, & Nanavati, 2004; Czumaj & Vocking, 2002; A. Fiat & Olonetsky., 2007).
contrast traditional setting, central designer determines allocation
jobs machines participating entities assumed obey protocol, mul1. cost function characterizes systems jobs processed parallel, jobs
particular machine single pick-up time, need share resource simultaneously.

c
2009
AI Access Foundation. rights reserved.

fiFeldman & Tamir

tiagent systems populated heterogeneous, autonomous agents, often display
selfish behavior. Different machines jobs may owned different strategic entities,
typically attempt optimize objective rather global objective.
Game theoretic analysis provides us mathematical tools study situations,
indeed extensively used recently analyze multiagent systems. trend
motivated part emergence Internet, composed distributed
computer networks managed multiple administrative authorities shared users
competing interests (Papadimitriou, 2001).
game theoretic models applied job scheduling problems, well network games (e.g., Fabrikant, Luthra, Maneva, Papadimitriou, & Shenker, 2003; Albers,
Elits, Even-Dar, Mansour, & Roditty, 2006; Roughgarden & Tardos, 2002; Anshelevich,
Dasgupta, Kleinberg, Tardos, Wexler, & Roughgarden, 2004), use solution concept
Nash equilibrium (NE), strategy agent best response
strategies agents. NE powerful tool analyzing outcomes competitive environments, notion stability applies unilateral deviations.

numerous multiagent settings, selfish agents stand benefit cooperating forming
coalitions (Procaccia & Rosenschein, 2006). Therefore, even single agent profit
unilateral deviation, NE might still stable group agents coordinating joint deviation, profitable members group. stronger
notion stability exemplified strong equilibrium (SE) solution concept, coined
Aumann (1959). strong equilibrium, coalition deviate improve utility
every member coalition.

M3

3

2

5

M3

3

5

8

M2

3

2

5

M2

3

5

8

10

M1

M1

5

5
(a)

2

2

4

(b)

Figure 1: example configuration (a) Nash equilibrium resilient
coordinated deviations, since jobs load 5 2 profit deviation demonstrated (b).

example, consider configuration depicted Figure 1(a). figures,
job represented rectangle whose width corresponds jobs length. jobs
scheduled specific machine form vertical concatenation rectangles. example,
Figure 1(a) three machines, M1 processes two jobs length 5. Note
internal order jobs effect, since cost job defined load
machine assigned to. configuration NE since job reduce cost
unilateral deviation. One might think NE identical machines must
sustainable joint deviations. Yet, already observed (Andelman

388

fiApproximate Strong Equilibrium

et al., 2007), may true.2 example, configuration resilient
coordinated deviation coalition consisting four jobs load 5
2 deviating configuration (b), jobs load 5 decrease costs 10 8,
jobs load 2 improve 5 4. Note cost two jobs load 3
(which members coalition) increases.
example above, every member coalition improves cost (multiplicative) factor 45 . much coalition improve? bound
improvement ratio? turn out, example fact extreme one
sense clarified below. Thus, NE completely stable coordinated deviations, settings, provide us notion approximate
stability coalitional deviations (or approximate strong equilibrium).
consider subclass NE schedules, produced Longest Processing Time
(LPT) rule (Graham, 1969). LPT rule sorts jobs non-increasing order
loads greedily assigns job least loaded machine. easy verify
every configuration produced LPT rule NE (Fotakis, S. Kontogiannis, &
Spiraklis, 2002). SE? Note instance depicted Figure 1, LPT
would produced SE. However, show, always case.
paper provide framework studying notion approximate stability
coalitional deviations. analysis, consider three different measures. first
two measure stability configuration, uses notion improvement ratio
job, defined ratio jobs costs deviation.
third measures worst possible effect non-deviating jobs, explained
below.3
1. Minimum Improvement Ratio: definition, members coalition must
reduce cost. is, improvement ratio every member coalition larger
1. Clearly, coalition members might share improvement ratio.
minimum improvement ratio particular deviation minimal improvement ratio
coalition member. minimum improvement ratio schedule s, denoted IR min (s),
maximum possible deviations originated minimal improvement
ratio deviation. words, coalitional deviation originating
every member coalition reduces cost factor greater IR min (s).
closely related notion suggested Albers (2009), defined strategy
profile -SE coalition agent improve factor
. notation, schedule -SE IR min (s) . Albers
studied notion context SE existence cost-sharing games, showed
sufficiently large , -SE always exists. justification behind concept
agents may willing deviate improve sufficiently high factor (due
to, example, overhead associated deviation).
2. statement holds 3. 2 identical machines, every NE SE (Andelman et al.,
2007).
3. Throughout paper, define approximation multiplicative factor. Since improvement
damage ratios three measures presented constants greater one (as shown
below), additive ratios unbounded. Formally, value possible construct instances
(by scaling instances provide multiplicative ratio) cost jobs reduced,
cost jobs increased, least additive factor a.

389

fiFeldman & Tamir

three machines, show every NE 54 -SE. is, coalition
deviate every member improves factor larger 54 .
case, provide matching lower bound (recall Figure 1 above), holds
2
3. arbitrary m, show every NE (2 m+1
)-SE. proof technique
draws connection makespan approximation approximate stability,
makespan configuration defined maximum load machine
configuration.
next consider schedules obtained
LPT rule. show = 3,

every LPT configuration ( 21 + 46 )-SE ( 1.1123), provide matching lower
1
bound, holds 3. arbitrary m, show upper bound 43 3m
.
results indicate LPT stable NE respect coalitional
deviations. Yet, LPT best possible approximation SE. Similar notion
approximation algorithms, define SE-PTAS assignment algorithm
gets input additional parameter , specifying close SE schedule
produces (1 + )-SE time polynomial n, 1/. paper devise
SE-PTAS fixed number machines, approximates makespan within
factor 1 + .
2. Maximum Improvement Ratio: maximum improvement ratio particular
deviation maximal improvement ratio experienced coalition member.
maximum improvement ratio schedule s, denoted IR max (s), maximum
possible deviations originated maximal improvement ratio deviation.
words, coalition deviation originating exists
member coalition reduces cost factor greater IR max (s).
notion establishes bounds much agent would gain deviating
coalition agents gain something deviation. Also, notion similar
spirit stability large total improvement. suits environments
individuals willing obey specific player long hurt. Interestingly,
find given NE configuration, improvement ratio single agent may
arbitrarily large, 3. contrast, LPT configurations three machines,
agent improve factor 53 bound tight. Thus, respect
IR max , relative stability LPT compared NE significant respect
1
, believe tight.
IR min . arbitrary m, provide lower bound 2
3. Maximum Damage Ratio: case jobs load 3 Figure 1, jobs
might get hurt result coalitional deviation. third measure consider
worst possible effect deviation jobs members deviating
coalition. Formally, maximum damage ratio maximal ratio costs
non-coalition member deviation. Variants measure
considered distributed systems, e.g., Byzantine Generals problem (Lamport, Shostak,
& Pease, 1982), rational secret sharing (Halpern & Teague, 2004).4 Section 5,
prove maximum damage ratio less 2 NE configuration, less
4. rational secret sharing protocol, set players, holding share secret, aims jointly
reconstruct it. Viewing protocol game, players utilities typically assumed satisfy
following two basic constraints: (i) player prefers learning secret learning it, (ii)
conditioned learned secret, player prefers possible players learn it.

390

fiApproximate Strong Equilibrium

23 LPT configuration. bounds hold 3, cases
provide matching lower bounds.
summary, results Sections 3-5 (see Table 1) indicate NE configurations
approximately stable respect IR min measure. Moreover, performance
jobs outside coalition would hurt much result coalitional deviation.
IR max , results provide additional strength LPT rule, already
known possess attractive properties (with respect to, e.g., makespan approximation
stability unilateral deviations).

NE
LPT

IR min
upper bound
m3
m=3
2
5
2 m+1
4
4
3



1
3m

1
2

+


6
4

lower
bound
1
2

5
4

+

6
4

IR max
upper
lower
bound bound
unbounded
5
3 (m=3)

2

1


DR max
upper lower
bound bound
2
2
3
2

3
2

Table 1: results three measures. Unless specified otherwise, results hold
arbitrary number machines m.
Section 7, study computational complexity aspects coalitional deviations.
find NP-hard determine whether NE configuration 3 identical
machines SE. Moreover, given particular configuration set jobs, NPhard determine whether set jobs engage coalitional deviation.
unrelated machines (i.e., job incurs different load machine),
hardness results hold already = 2 machines. results might implications
coalitional deviations computationally restricted agents.
Related work: NE shown paper provide approximate stability coalitional deviations. related body work studies well NE approximates optimal
outcome competitive games. Price Anarchy defined ratio
worst-case NE optimum solution (Papadimitriou, 2001; Koutsoupias & Papadimitriou, 1999), extensively studied various settings, including job scheduling
(Koutsoupias & Papadimitriou, 1999; Christodoulou et al., 2004; Czumaj & Vocking, 2002),
network design (Albers et al., 2006; Anshelevich et al., 2004; Anshelevich, Dasgupta, Tardos, Wexler, & Roughgarden, 2003; Fabrikant et al., 2003), network routing (Roughgarden
& Tardos, 2002; Awerbuch, Azar, Richter, & Tsur, 2003; Christodoulou & Koutsoupias,
2005), more.
notion strong equilibrium (SE) (Aumann, 1959) expresses stability coordinated deviations. downside SE games admit SE, even
amongst admitting Nash equilibrium. Various recent works studied existence SE particular families games. example, shown every job
scheduling game (almost) every network creation game, SE exists (Andelman et al.,
2007). addition, several papers (Epstein, Feldman, & Mansour, 2007; Holzman & LawYone, 1997, 2003; Rozenfeld & Tennenholtz, 2006) provided topological characterization
existence SE different congestion games, including routing cost-sharing
391

fiFeldman & Tamir

connection games. vast literature SE (e.g., Holzman & Law-Yone, 1997, 2003;
Milchtaich, 1998; Bernheim, Peleg, & Whinston, 1987) concentrate pure strategies
pure deviations, case paper. job scheduling settings, shown
Andelman et al. (2007) mixed deviations allowed, often case SE
exists. SE exists, clearly, price anarchy respect SE (denoted
strong price anarchy Andelman et al., 2007) significantly better price
anarchy respect NE (Andelman et al., 2007; A. Fiat & Olonetsky., 2007; Leonardi
& Sankowski, 2007).
Following work, IR min bounds case = 4 machines provided
Chen (2009), extended bound 45 NE schedules, provided bound
( 12 +



345
30 )

1.119 LPT-based schedules.

2. Model Preliminaries
section give formal description model provide several useful observations properties deviations coalitions.
2.1 Resilience Deviations Coalitions
first present general game theoretic setting describe specific job scheduling
setting focus paper.
game denoted tuple G = hN, (Sj ), (cj )i, N = {1, . . . , n} set
players, Sj finite action space player j N , cj cost function player j.
joint action space players = ni=1 Si . joint action = (s1 , . . . , sn ) S,
denote sj actions players j 0 6= j, i.e., sj = (s1 , . . . , sj1 , sj+1 , . . . , sn ).
Similarly, set players , called coalition, denote actions
players , respectively. cost function player j maps joint action
real number, i.e., cj : R.
joint action pure Nash Equilibrium (NE) player j N benefit
unilaterally deviating action another action, i.e., j N Sj : cj (sj , a)
cj (s). pure joint action coalition N specifies action player
coalition, i.e., s0 j Sj . joint action resilient pure deviation
coalition pure joint action s0 cj (s , s0 ) < cj (s) every
j (i.e., players coalition deviate way player strictly
reduces cost). case say deviation s0 = (s , s0 ) profitable
deviation coalition .
pure joint action resilient pure deviations coalitions
coalition N profitable deviation s.
Definition 2.1 pure strong equilibrium (SE) pure joint action resilient
pure deviations coalitions.
Clearly, strong equilibrium refinement notion Nash equilibrium (in particular, strong equilibrium, resilient deviations coalitions size 1,
coincides definition NE).

392

fiApproximate Strong Equilibrium

2.2 Job Scheduling Identical Machines
job scheduling setting identical machines characterized set machines =
{M1 , . . . , Mm }, set {1, . . . , n} jobs, job j processing time pj . assignment
method produces assignment jobs machines, sj denotes machine
job j assigned to. assignment referred schedule configuration (we use
two terms interchangeably). load machine Mi inP
schedule sum
processing times jobs assigned Mi , Li (s) = j:sj =Mi pj . set jobs

, let s() = j {sj } denote set machines members assigned
schedule s.
makespan schedule load loaded machines. social optimum
minimizes makespan, i.e., OP = mins makespan(s).
job scheduling setting define job scheduling game jobs players.
action space Sj player j N individual machines, i.e., Sj = .
joint action space = nj=1 Sj . joint action constitutes schedule. schedule
player j N selects machine sj action incurs cost cj (s),
load machine sj , i.e., cj (s) = Li (s), sj = Mi . job scheduling game,
makespan highest cost among players. Formally, makespan(s) = maxj cj (s).
0
Let s0 two configurations. Let Pis,s
binary indicator whose value 1
1 ,i2
job j sj = Mi1 s0j = Mi2 (i.e., job chooses Mi1
Mi2 s0 ), 0 otherwise. clear context, abuse notation
0
denote Pis,s
Pi1 ,i2 . addition, denote Li (s) Li (s0 ) Li L0i , respectively.
1 ,i2
Let s0 = (s , s0 ) profitable deviation coalition . improvement
ratio job j sj = Mi1 s0j = Mi2 (i.e., job migrating machine
0
Mi1 machine Mi2 ) denoted IRs,s (j) = Li1 (s)/Li2 (s0 ). Clearly, job j ,
0
IRs,s (j) > 1. damage ratio job j 6 sj = s0j = Mi denoted
0
DRs,s (j) = Li (s0 )/Li (s).
sj 6= s0j , say job j migrates deviation. Note that, terminology,
job member profitable deviation even migrate deviation.
Yet, every job migrates deviation member deviating coalition
definition.
Definition 2.2 Given schedules s0 = (s , s0 ), minimal improvement ratio s0
0
respect IR min (s, s0 ) = minj IRs,s (j). addition, minimal improvement
ratio schedule IR min (s) = maxs0 =(s ,s0 ),N IR min (s, s0 ).
Given schedules s0 = (s , s0 ), maximal improvement ratio s0 respect
0
IR max (s, s0 ) = maxj IRs,s (j). addition, maximal improvement ratio
schedule IR max (s) = maxs0 =(s ,s0 ),N IR max (s, s0 ).
Given schedules s0 = (s , s0 ), maximal damage ratio s0 respect
0
DR max (s, s0 ) = maxjN DRs,s (j). addition, maximal damage ratio schedule
DR max (s) = maxs0 =(s ,s0 ),N DR max (s, s0 ).
particular, define notion -SE (Albers, 2009) terms minimum
improvement ratio follows:
Definition 2.3 schedule -strong equilibrium (-SE) IR min (s) .
393

fiFeldman & Tamir

next provide several useful observations claims shall use sequel.
refer profitable deviation NE-schedule NE-originated profitable deviation.
Similarly, profitable deviations schedule produced LPT rule referred
LPT-originated profitable deviation.
first observation shows NE-originated profitable deviation, job
migrates machine, job must migrate machine. Formally:
Observation 2.4 Let NE let s0 = (s , s0 ) profitable deviation. s0j = Mi
j , j 0 sj 0 = Mi s0j 0 = Mi0 i0 6= i.
obvious, since job j strictly decreases cost migrating machine
job leaves, profitably migrates unilaterally, contradicting NE.
next define special deviation structure, called flower structure
deviations loaded machine.
Definition 2.5 Let M1 loaded machine given schedule s. say
s,s0
s,s0
deviation s0 obeys flower structure > 1, P1,i
= Pi,1
= 1 i, j > 1,
0

s,s
Pi,j
= 0 (See Figure 2).

M2

M3
M1

M5

M4

Figure 2: graph representation coalition 5 machines obeying flower structure.
0

s,s
edge Mi Mj Pi,j
= 1.

0

s,s
particular, = 3, deviation s0 obeys flower structure P1,2
=
0

0

0

0

0

s,s
s,s
s,s
s,s
s,s
P2,1
= P1,3
= P3,1
= 1 P2,3
= P3,2
= 0. Recall simplicity presentation,
0

s,s
write sequel Pi,j denote Pi,j
write Li L0i denote Li (s)
Li (s0 ), respectively.

Claim 2.6 NE-originated profitable deviation three machines obeys flower structure.
Proof: Let NE M1 loaded machine s, let s0 profitable
deviation. first show P2,3 = P3,2 = 0. Assume first P2,3
P = P3,2P= 1.
Thus, L02 < L3 L03 < L2 . Clearly, since total load change, Li = L0i .
Therefore, must hold L01 > L1 . However, profitable deviation increase
load loaded machine. contradiction. Therefore, one P2,3 , P3,2
1. Assume w.l.o.g P2,3 = 1. Observation 2.4 job leaves M3 ,
cannot M2 . Thus, must P3,1 = 1. Similarly, job
M1 .
Pleaves P
P1,2 = 1, get L01 < L3 , L02 < L1 , L03 < L2 , contradicting Li = L0i .
394

fiApproximate Strong Equilibrium

0
0
0
P1,3 = 1
P getPthat0 L1 < L3 , L2 < L2 (no job added M2 ), L3 < L1 ,
contradicting Li = Li again. Thus, P2,3 = 0. proof P3,2 = 0 analogous.
remains show P1,2 = P1,3 = P2,1 = P3,1 = 1. know three machines
assigned jobs s0 assigned s. P2,3 = P3,2 = 0.
Observation 2.4 job leaves M2 , M3 , therefore, P2,1 = P3,1 = 1. Also,
job leaves M1 , thus least one P1,2 , P1,3 equals 1. Assume w.l.o.g P1,2 = 1.
show P1,3 = 1. particular, show L03 > L3 , since P2,3 = 0 must
P1,3 = 1. Assume opposite, L03 L3 . already know
P2,1 = 1.
P P1,2 =P
Thus, L02 < L1 , L01 < L2 , assumption L03 L3 . is, L0i < Li .
contradiction.

known NE schedule two identical machines SE (Andelman
et al., 2007). claim, least four jobs change machines profitable
deviation three machines. Clearly, least four jobs change machines coalition
> 3 machines. Therefore,

Corollary 2.7 Every NE-schedule stable deviations coalitions size three
less.
next two propositions characterize coalition deviation three machines.
show M1 loaded machine deviation, becomes
least loaded deviation.
Proposition 2.8 NE-originated deviation three machines, loads two
less loaded machines increasing, is, L02 > L2 L03 > L3 .
Proof: Assume contrary L02 L2 . Claim 2.6, P1,3 P
= P3,1 = P
1. Thus,
0 <
L03 < L1 , L01 < L3 , assumption L02 L2 . is,
L

Li .
0
contradiction. proof L3 > L3 analogous.

Proposition 2.9 NE-originated deviation three machines loaded machine becomes least loaded machine, is, L01 < min(L02 , L03 ).
Proof: Claim 2.6, P1,2 = 1, thus L01 < L2 . proposition, L2 < L02 .
Thus, L01 < L02 . proof L01 < L03 symmetric.


3. -Strong Equilibrium
section, stability configurations measured minimal improvement ratio
measure. first provide complete analysis (i.e. matching upper lower bounds)
three identical machines5 NE LPT. arbitrary m, provide upper
bound NE LPT, show lower bounds = 3 hold m.
Theorem 3.1 NE schedule three machines 45 -SE.
5. note unrelated machines, improvement ratio cannot bounded within finite factor
even two machines. seen simple example two jobs two machines,
load vector job 1 (1, ), load vector job 2 (, 1). job assigned machine (for
= 1, 2), resulting configuration NE, load 1 machine. However, jobs
reduce load 1 swapping.

395

fiFeldman & Tamir

Proof: Let NE-configuration three machines, let r = IR min (s). Claim
2.6, deviation obeys flower P
structure. Therefore: L01 L2 /r , L01 L3 /r , L02
L1 /r , L03 L1 /r. Let P = j pj (also = L1 + L2 + L3 ). Summing
inequalities get r (L1 + P )/(L01 + P ).
Proposition 3.2 load loaded machine half total load,
is, L1 P/2.
Proof: Let g = max(L1 L2 , L1 L3 ). flower structure, least two jobs
M1 , thus g L1 /2 - since otherwise job would benefit leaving M1 , contradicting
NE. definition g, know 2L1 L2 + L3 + 2g, since 2g L1 , get
L1 P/2.

Distinguish two cases:
1. L01 P/5: case r (L1 + P )/(L01 + P ) (3P/2)/(6P/5) = 5/4.
2. L01 < P/5: means L02 + L03 > 4P/5 (M2 M3 rest load),
is, least one L02 , L03 > 2P/5. W.l.o.g. let M2 . flower structure
job M1 migrates M2 . jobs improvement ratio L1 /L02 , which,
Proposition 3.2, less (P/2)/(2P/5) = 5/4. Thus, again, r < 5/4.

analysis tight shown Figure 1. Moreover, lower bound
extended > 3 adding 3 machines 3 heavy jobs assigned
machines. Thus,
Theorem 3.3 3, exists NE schedule IR min (s) = 54 .
LPT configurations, bound minimum improvement ratio lower.
proof following theorems appear Appendix A.
Theorem 3.4 LPT schedule three machines ( 12 +


6
4

1.1123)-SE.

Theorem 3.5 3, exists LPT schedule IR min (s) = 12 +


6
4 .

next provide upper bounds arbitrary m. analysis based drawing
connection makespan approximation SE-approximation. Assume
given schedule r-approximation minimum makespan. show
conditions original schedule, subset jobs form coalition
IR min > r, then, considering subset machines, possible get schedule
apparently better optimal one. first define set assignment rules
connection exists.
Definition 3.6 Let schedule instance = hN, i. Given , let =
hN , instance induced s, N = {j|sj }. assignment method,
A, said subset-preserving , holds sj = sj

j N , assignments produced instances I,
respectively.
396

fiApproximate Strong Equilibrium

Claim 3.7 LPT subset-preserving method.
Proof: proof induction number jobs N . show
k 6= N , first k jobs N 0 assigned machine LPT executed
Note since N sublist N , jobs N
input input I.
order N . first job scheduled first empty machine among .
job j N , induction hypothesis, j scheduled, load
machines identical load corresponding machines time j
scheduled member N . load generated jobs N come j
N . Therefore, LPT, j scheduled least loaded machine among machines
, is, sj = sj . assume LPT uses deterministic tie-breaking rule
several least loaded machines N . Therefore sj = sj case.

Lemma 3.8 Let assignment method (i) subset-preserving, (ii) yields Nash
equilibrium, (iii) approximates minimum makespan within factor r, r 1
non-decreasing m. Then, produces r-SE.
Proof: Assume contradiction exists instance schedule
produced A, exists coalition improvement ratio every member
greater r. Let coalition minimum size. job j
migrate, set jobs \ {j} smaller coalition, contradicting minimality
; therefore, every j , holds sj 6= s0j . next show s() = s0 ().
First, s() s0 (), is, every machine s() job j migrates,
must exist job migrating it, otherwise, \ {j} smaller coalition, contradicting
minimality . Second, s0 () s(), is, every machine job j
migrates, must exist job migrating (otherwise job j improve unilaterally,
contradiction NE). Given s() = s0 (), denote set machines
, let = |M |. Finally, let N N set jobs assigned machines A,
Consider instance = hN , i. Since subset-preserving, jobs N
scheduled exactly schedule scheduled part I.
particular, scheduled A, deviation exists, every job
improves factor greater r, machines take part it.
words, pair machines i, j, Pi,j = 1, Li /L0j > r(m) r(m),
r(m) approximation ratio machines. hand, since
OP (I)

produces r(m)-approximation, machine i, Li r(m)OP (I),

minimum possible makespan machines. Therefore, Pi,j = 1 r(m) <
Li /L0j


r(m)OP (I)
.
L0j

implies machine j receives least one job,


L0j < OP (I).
However, since least one job migrated participating machines,
deviation machines assigned jobs N load
contradiction.
less OP (I).

Let NE machines. Clearly, , induced schedule
2
set machines NE. Also, known NE provides (2 m+1
)approximation makespan (Finn & Horowitz, 1979; Schuurman & Vredeveld, 2007).
2
implies Lemma 3.8 applied r = 2 m+1
assignment yields
NE. Therefore,
397

fiFeldman & Tamir

Corollary 3.9 NE schedule identical machines (2

2
m+1 )

SE.

next result direct corollary Lemma 3.8, Claim 3.7, fact LPT
1
)-approximation makespan (Graham, 1969).
provides ( 43 3m
1
Corollary 3.10 schedule produced LPT identical machines ( 43 3m
)SE.

bounds tight, gap lower upper bounds
small constant.

4. Maximum Improvement Ratio
section, analyze maximum improvement ratio measure. provide complete analysis NE configurations 3, LPT configurations three
machines. lower bound LPT three machines extended arbitrary m.
contrast measures consider paper, NE LPT differ
small constant, turns respect maximum improvement ratio, NE
LPT significantly different. improvement ratio NE-originated deviations arbitrarily high, deviations LPT configurations, highest possible
improvement ratio participating job less 35 .
Theorem 4.1 Fix r 1. 3 machines, exists instance
machines NE IR max (s) > r.
Proof: Given r, consider NE-configuration three machines given Figure 3(a).
coalition consists {1, 1, 2r, 2r}. improved schedule given Figure 3(b).
improvement ratio jobs load 1 2r/2 = r. > 3, dummy machines jobs
added.

M3

2r-1

1

2r

M3

2r-1

2r

4r-1

M2

2r-1

1

2r

M2

2r-1

2r

4r-1

M1

2r

4r

M1 1 1

2r
(a)

2
(b)

Figure 3: NE-originated deviation jobs load 1 improvement ratio
r.

contrast NE-originated deviations, LPT-originated deviations able
bound maximum improvement ratio small constant. proof following
claim given Appendix A.
Theorem 4.2 Let LPT schedule three machines. holds IRmax (s) 53 .

398

fiApproximate Strong Equilibrium

1+

2m-2+

Mm

M2

2m-3

1+

2m-2+

M2

M1

2m-3

2

2m-1

2m-3

2

2m-1



2m-3


Mm

2



2

1+ 2m-1+

M1 1+ 1+ 1+

(a)

m+m

(b)

Figure 4: LPT-originated deviation machines job load 1 + assigned
M1 improvement ratio arbitrarily close 2

1
m.

bound tight, demonstrated Figure 4 = 3 (where im1
provement ratio 2
= 35 ). Moreover, figure shows lower bound
generalized 3. Note coalitional deviation example obeys
flower structure. believe example tight, flower structure seems
enable largest possible decrease load single machine. job load 1 +
remains M1 improves cost 2m 1 + m(1 + ), is, job, j,
1
IR(j) = 2m1+
m(1+) = 2 . Formally,
Theorem 4.3 3, exists LPT configuration IR max (s) =
1
2
arbitrarily small > 0.

5. Maximum Damage Ratio
section, provide results maximum damage profitable deviation
impose jobs take part coalition. Formally, quality configuration measured maxj6 DR(j). provide complete analysis NE LPT
configurations 3. again, find LPT provides strictly better
performance guarantee compared general NE: cost job LPT schedule
cannot increase factor 32 larger, increase factor arbitrarily close
2 NE schedules.
Theorem 5.1 m, DR max (s) < 2 every NE configuration s.
Proof: Let s0 = (s0 , ) profitable deviation, let M1 loaded machine
among machines either job migrated job migrated into. Observation 2.4, must job migrated M1 . implies must
least two jobs M1 s, since single job, could benefit
deviation. Therefore, exists job j sj = M1 pj L1 /2. Using fact
NE again, get machine 6= 1, Li L1 /2 (otherwise job j
improve unilaterally migrating Mi ).
addition, every machine job migrates, must hold L0i < L1 .
job migrated Mi left machine j load Lj L1 . Combining

399

fiFeldman & Tamir

bounds, get every job j stays machine job
0
migrates holds DRs,s (j) = L0i /Li < L1 /Li (2Li )/Li = 2.

analysis tight shown Figure 3: damage ratio jobs load
2r 1 (4r 1)/(2r), arbitrarily close 2. Formally,
Theorem 5.2 3, exists NE configuration DR max (s) =
2 arbitrarily small > 0.
LPT configurations obtain smaller bound:
Theorem 5.3 m, DR max (s) <

3
2

every LPT configuration s.

Proof: Let s0 = (s0 , ) profitable deviation, let M1 loaded machine
among machines either job migrated job migrated into. Since every
LPT configuration NE, M1 must least two jobs (following arguments
proof Theorem 5.1). Assume w.l.o.g lightest (also last) job assigned
M1 load 1, denote job 1-job. assumption valid
minimum improvement ratio invariant linear transformations. Let ` = L1 1. Since
LPT configuration, every machine i, must hold Li ` (otherwise, 1-job
would assigned different machine). addition, since every machine j
job migrates, Lj L1 , must hold every machine job
migrates L0i < ` + 1. distinguish two cases.
3
case (a): ` 2. Then, every machine Mi job migrates, L0i /Li < `+1
` 2.
case (b): ` < 2. show profitable deviation exists case. ` < 2,
M1 exactly 2 jobs, loads ` 1, since LPT assigns jobs non-increasing order.
LPT, every machine must (i) one job load least ` (and possibly
small jobs), (ii) two jobs load least 1 (and possible small jobs). Let k k 0
number machines type (i) (ii), respectively (excluding M1 ). Thus,
total k + 1 jobs load ` 2k 0 + 1 jobs load 1. deviation, machine
jobs load ` 1 together, three jobs load 1. k + 1 machines
assigned k + 1 jobs load ` deviation cannot assigned job
load x. So, end 2k 0 + 1 jobs load 1 assigned k 0 machines.
Thus, must machine least three jobs load 1. Contradiction.

M3

1+2

1+

2+3

M3

1+2

1

M2

1+2

1+

2+3

M2

1+2

1+3

M1

1+3

1

3+3

M1

1+

1

(a)

1+

1

3+2
2+5
2+2

(b)

Figure 5: LPT-originated deviation, damage ratio job load 1 + 2 M3
arbitrarily close 32 .

analysis tight shown Figure 5. Moreover, adding dummy machines
jobs extended 3. Formally,
400

fiApproximate Strong Equilibrium

Theorem 5.4 3, exists LPT configuration DR max (s) =
3
2 arbitrarily small > 0.

6. Approximation Scheme
section present polynomial time approximation scheme provides (1 + )SE. PTAS applied fixed number machines.
Definition 6.1 vector (l1 , l2 , . . . lm ) smaller (l1 , l2 , . . . lm ) lexicographically
i, li < li b < i, lb = lb . configuration lexicographically smaller
vector machine loads L(s) = (L1 (s), . . . , Lm (s)), sorted non increasing order,
smaller lexicographically L(s), sorted non increasing order.
PTAS combines lexicographically minimal assignment longest k jobs
LPT rule applied remaining jobs. value k depends desired approximation ratio (to defined later).
Formally, algorithm Ak defined follows:
1. Find lexicographically minimal assignment longest k jobs.
2. Add remaining jobs greedily using LPT rule.
particular, since lexicographically minimal assignment minimizes makespan
(given load loaded machine), algorithm PTAS
minimum makespan problem, restriction known PTAS Graham (1966).
Grahams algorithm, step 1, first k jobs scheduled way minimizes
makespan. scheme, requirement schedule long jobs strict.
particular, shown Andelman et al. (2007), schedule longest k jobs
SE sub-instance.

Given , let denote algorithm k =
. first show
subset machines , provides (1 + )-approximation makespan
subset jobs scheduled . Formally,
Lemma 6.2 Let = hN, instance job scheduling machines jobs
N . Let output I. given , let N N set jobs
scheduled s. Consider instance = hN , i. Let assignment

induced s. (1 + )-approximation makespan I.

Proof: Let LA
max (M ) denote largest completion time machine set
schedule produced , let OP (I) denote minimum makespan I. Let
denote largest completion time long job N scheduled minimal
lexicographic schedule found step 1. Since minimal lexicographic assignment,

minimum makespan long jobs N . particular, lower bound OP (I),


thus, makespan increased second step, is, Lmax (M ) = ,
Otherwise, makespan larger . Let j job
optimal I.
determining makespan (the job completes last N ). definition LPT,
implies machines busy job j started execution (otherwise

401

fiFeldman & Tamir

job j could start earlier). Since optimal schedule step 1 intended idles,

holds machines busy time interval [0; LA
max (M ) pj ]
Pn
Let P =
j=1 pj total processing time n jobs N . above,


P m(Lmax (M ) pj ). Also, since jobs sorted non-increasing order processing

times, pj pk+1 therefore P m(LA
max (M ) pk+1 ). lower bound

optimal solution schedule load machines balanced;


P /m, implies LA
thus OP (I)
max (M ) OP (I) + pk+1 .



order bound Lmax (M ) terms OP (I), need bound pk+1 terms
first bound gap OP (I) OP (I).
following assumption
OP (I).
used.
Claim 6.3 Let z job determining makespan (I). W.l.o.g., z one
k long jobs.
Proof: Assume makespan (I) determined one long jobs. Let M1
machine z scheduled. particular, M1 processes long jobs. Fix
schedule M1 repeat PTAS remaining jobs machines
value k. Repeat necessary makespan determined job assigned using
LPT rule.
Note algorithm still polynomial, PTAS might repeated
1 times, constant. approximation ratio improving subinstance: number jobs considered long, among set fewer jobs, is,
larger portion jobs scheduled optimally, therefore approximation ratio proof
valid sub-instance. Finally, merging last PTAS result schedule
machines holding long jobs only, get PTAS whole instance, since long
jobs scheduled optimally step. Moreover, load machine
lower bound makespan sub-instance considered machine
gets jobs.

+ pk+1 .
Claim 6.4 OP (I) OP (I)
Proof: Let z job determining makespan (I). Claim 6.3, z assumed

assigned step 2 (by LPT rule). z N (I) = LA
max (M ). Else, load
machine least (I) pz , since otherwise job z assigned
one machines . Therefore, even total load N balanced among
(I) pz . Since pz pk+1 , OP (I) (I), get
, OP (I)
+ pk+1 .
OP (I) (I) OP (I)


Claim 6.5 pk+1 OP (I)


k .

Proof: Consider k + 1 longest jobs. optimal schedule, machine assigned
least d(k + 1)/me 1 + bk/mc jobs. Since jobs processing
time least pk+1 , conclude OP (I) (1 + bk/mc)pk+1 , implies

402

fiApproximate Strong Equilibrium

0
pk+1 OP (I)/(1 + bk/mc). Claim 6.4, pk+1
mOP
(I)/(1 + bk/mc) (OP (I ) +

pk+1 )/(1 + bk/mc). follows pk+1 OP (I)

k .







Back
Lmax (I), conclude Lmax (I) OP (I) + pk+1
mbound


+ ).
OP (I)(1 + k ) = OP (I)(1

prove main result section, showing schedule produced
, (1 + )-SE. stability proved following theorem. running
time, fixed m, k, minimal lexicographic schedule first k jobs found
O(mk ) steps. Applying LPT rule takes additional O(nlogn). , get
running time scheme O(mm/ ), is, exponential (that assumed
constant) 1/.

Theorem 6.6 produces (1 + )-SE.
Proof: proof similar proof Lemma 3.8. Assume contradiction
exists instance machines, schedule produced
, exists coalition improvement ratio every member larger
1 + . Let coalition minimum size. every machine job
j migrates, must exists job migrating it, otherwise, \ {j} coalition
IR min > 1 + , contradiction minimality . Let denote set
machines part coalition, let N N set jobs assigned ,
let = |M |. Consider instance = hN , i, schedule s. Lemma
coalition exists s,
6.2, (1 + )-approximation makespan I.
machines take part it. Moreover, jobs improves factor
(1 + ). words, pair machines i, j, Pi,j = 1,
Li /L0j > 1 + . hand, since (1 + )-approximation, machine i,

(I)
Therefore, Pi,j = 1 1 + < L0i (1+)OP
. words,
Li (1 + )OP (I).
0
Lj

Lj


machine j receives least one job,
< OP (I).
However, since least one job migrated participating machines,
deviation machines assigned jobs N load
contradiction.
less OP (I).

note 0, schedule produced algorithm NE. Similar
stability proof LPT (Fotakis et al., 2002), easy verify job
benefit leaving machine Mi shortest job machine
benefit migration. However, independent whether short job, length
pj , assigned step 1 algorithm (as part minimal lexicographical schedule
long job) step 2 (by LPT), gap Li load machine
pj .
L0j

7. Computational Complexity
easy see one determine polynomial time whether given configuration
NE. Yet, SE, task involved. section, provide hardness
results coalitional deviations.
Theorem 7.1 Given NE schedule 3 identical machines, NP-hard determine SE.
403

fiFeldman & Tamir

M3

B-1

B-2

2B-3

M3

B-1

Jobs A1

2B-1

M2

B-1

B-2

2B-3

M2

B-1

Jobs A2

2B-1

2B

M1

B-2

2B-4

M1

Jobs

B-2
(b)

(a)

Figure 6: Partition induces coalition schedule identical machines.

Proof: give reduction Partition. Given set n integers a1 , . . . ,
total size 2B, question whether subset total size B, construct
schedule Figure 6(a). schedule three machines n + 4 jobs loads
a1 , . . . , , B 2, B 2, B 1, B 1. assume w.l.o.g. mini ai 3, else whole
instance scaled. Thus, schedule 6(a) NE. 3, add 3 machines
single job load 2B.
Claim 7.2 NE schedule Figure 6(a) SE partition.
Proof: partition K1 , K2 , total size B, schedule
Figure 6(b) better jobs originated partition instance two
(B 2)-jobs. partition jobs improved cost 2B cost 2B 1, (B 2)jobs improved 2B 3 2B 4.
Next, show partition initial schedule SE. Theorem 2.7, action coalition three machines, jobs must migrate M1
M2 M3 . order decrease load 2B 3, set jobs migrating M1
must set two jobs load B 2. Also, must partition jobs move
away M1 - otherwise, total load M1 least 2B 4 + 3 = 2B 1,
improvement (B 2)-jobs. implies jobs M1 split
M2 M3 . However, since partition, one two subsets total load
least B + 1. jobs join job load B 1 get total load least 2B,
improvement 2B-load initial schedule.

establishes proof Theorem.

direct corollary proof following:
Corollary 7.3 Given NE schedule coalition, NP-hard determine whether
coalition deviate.
Theorem 7.1 holds 3 identical machines. 2, configuration
NE SE (Andelman et al., 2007), therefore possible determine
whether given configuration SE polynomial time. Yet, following theorem shows
case unrelated machines, problem NP-hard already = 2.
unrelated machines environment, processing time job depends machine
assigned. every job j machine i, pi,j denotes processing time job
j processed machine i.
Theorem 7.4 Given NE schedule 2 unrelated machines, NP-hard
determine SE.
404

fiApproximate Strong Equilibrium

Proof: give reduction Partition. Given n integers a1 , . . . , total size
2B, question whether subset total size B, construct following
instance scheduling: 2 machines n + 1 jobs following loads (for
< 1/(n 1)):
pi,1 = ai + pi,2 = 2ai + , {1, . . . , n} ; pn+1,1 = B, pn+1,2 = 2B + n.
Consider schedule jobs 1, . . . , n M1 , job n + 1 M2 .
completion times machines 2B + n. NE.

M2

Jn+1

2B+n

M2

M1

J1,,Jn

2B+n

M1

(a)

2B+|A2|

Jobs A2
Jobs A1

Jn+1

2B+|A1|

(b)

Figure 7: Partition induces coalition schedule related machines.

Claim 7.5 NE schedule Figure 7(a) SE partition.
Proof: partition A1 , A2 , total size B, schedule given
Figure 7(b) better everyone. completion time M1 2B + |A1 | < 2B + n
completion time M2 2B + |A2 | < 2B + n.
Next, show partition initial schedule SE. Since
partition, partition A1 , A2 , one two subsets, w.l.o.g., A1 total
size least B + 1. A1 increase load migrating M2 even alone (bearing
load least 2B + 2 + |A1 | instead 2B + n). Therefore, A1 leave M1 .
However, A1 stays M1 , job n + 1 better-off staying M2 (since migrates,
bears load least 2B + 1 + |A1 | smaller 2B + n |A1 |
1/(n 1)).

establishes proof Theorem.

direct corollary proof following:
Corollary 7.6 Given NE schedule unrelated machines coalition, NP-hard
determine whether coalition deviate.

8. Conclusions Open Problems
paper study well NE schedules special subset obtained
outcome LPT assignment rule approximate SE job scheduling games.
using two measures IR min IR max . addition, use DR max measure
study hurtful coalitional deviations agents outside coalition. present
upper lower bounds NE LPT-based schedules, demonstrate LPTbased schedules perform better general NE schedules, gap significant
IR max measure. NE LPT, IR min bounded small constant,
405

fiFeldman & Tamir

implying notion stability coalitional deviations (assuming existence
transition cost). IR max , bounded constant LPT schedules,
universal bound NE schedules. Yet, LPT best possible approximation
SE, demonstrated SE-PTAS design, computes schedule IR min
arbitrarily close 1.
problems remain open are:
1. IR min measure, gap upper lower bounds > 4 6 .
1
2. IR max LPT-originated deviations, 3 presented lower bound 2
5
matching upper bound 3 = 3. Closing gap general left
open problem.
3. paper focuses case identical machines. would interesting study
topic approximate strong equilibrium additional job scheduling settings. particular,
setting uniformly related machines part ongoing research, already
case two machines seems rather involved. Note that, mentioned Section 7,
unrelated machines, IR min unbounded already two machines.
4. measures defined respect strong equilibrium solution concept,
profitable deviation defined one every member coalition strictly
benefits. would interesting consider measures introduce respect
additional solution concepts, coalition-proof Nash equilibrium (Bernheim et al.,
1987) (which stable profitable deviations stable
deviations sub-coalitions), respect profitable deviations none
coalition members worse-off least one member strictly better-off.
summary, introduced three general measures stability performance
schedules coalitional deviations. believe measures used
measure stability performance various algorithms coalitional deviations
performance additional settings games. hope see work
makes use measures within framework algorithmic game theory. would
interesting study families games Nash equilibria approximate strong equilibria
defined measures introduced here.
Acknowledgments. thank Leah Epstein Alon Rosen helpful discussions.
thank anonymous reviewers insightful remarks suggestions. work
partially supported Israel Science Foundation (grant number 1219/09).

Appendix A. Bounding IR min IR max LPT-originated Deviations
first provide several observation valid LPT-originated deviation.
observations used later analysis. Moreover, observations characterize
coalitions might exist schedules produced LPT-rule. Combined
flower structure (that characterizes NE-originated deviations three machines),
get set LPT-originated deviation limited must follow strict
structure.
Let M1 loaded machine. Assume w.l.o.g lightest (also last) job
assigned M1 load 1, denote job 1-job. assumption valid
6. paper provides tight bounds = 3 case = 4 considered Chen (2009).

406

fiApproximate Strong Equilibrium

minimum improvement ratio invariant linear transformations. = 2, 3, denote
Ki set (and total load) jobs remain Mi . Denote Hi,j set
(and total load) jobs migrating Mi Mj . = 1, let K1 , H1,2 , H1,3
above, excluding 1-job.
next propositions show total size jobs migrating M2 , M3 M1
remaining M2 , M3 least large last job M1 .
Proposition A.1 H2,1 , H3,1 least 1.
Proof: show H2,1 1, proof H3,1 analogous. Assume contradiction
H2,1 < 1. Since LPT schedule jobs non-increasing order, jobs composing
H2,1 assigned 1-job. Therefore, 1-job assigned, load M2
K2 least H1,2 + H1,3 + K1 (else, LPT would assign 1-job M2 ). Thus,
K2 H1,2 + H1,3 + K1 . flower structure, job migrating M1 M2 .
migration beneficial L02 < L1 . Distinguish two cases:
1. 1-job migrates M2 . case, L02 = K2 + H1,2 + 1. Therefore, K2 +
H1,2 + 1 < H1,2 + H1,3 + K1 + 1, K2 < H1,3 + K1 . However, above,
K2 H1,2 + H1,3 + K1 H1,3 + K1 . contradiction.
2. 1-job migrate M2 . case, L02 = K2 + H1,2 . Therefore, K2 +
H1,2 < H1,2 + H1,3 + K1 + 1, K2 < H1,3 + K1 + 1. However, above,
K2 H1,2 + H1,3 + K1 1 + H1,3 + K1 . contradiction. last inequality follows
fact H1,2 empty consists least one job least big
smallest job M1 .

Proposition A.2 K2 , K3 least 1.
Proof: first show K2 1. Assume K2 < 1, means 1-job assigned
M1 , load M2 composed jobs subset H2,1 only. Therefore,
LPT rule, H2,1 K1 + H1,2 + H1,3 . However, Proposition 2.8, L02 > L2 , therefore
H2,1 < H1,2 + 1. Thus, K1 + H1,3 < 1. However, H1,3 1. contradiction. show
K3 1, note K3 > 1 similar argument H3,1 H1,2 + H1,3 .
Proposition 2.8, L03 > L3 . Therefore H1,3 > H3,1 , implying K1 + H1,2 < 0. contradiction.



Theorem 3.4 LPT configuration three machines ( 21 + 46 1.1123)-SE.
Proof: Let M1 loaded machine schedule. Recall lightest (also
last) job assigned M1 1-job load 1. Let ` = L1 1. give LPT schedule
deviation s0 = (s0 , ), let r = IR min (s, s0 ).
Claim 2.6, obeys flower structure. Therefore:
(i) r L2 /L01 ; (ii) r
P
0
0
0
L3 /L1 ; (iii) r L1 /L2 ; (iv) r L1 /L3 . Let P = j pj , Clearly, P = L1 + L2 + L3 =
L01 + L02 + L03 . Summing (i) (ii), get
L01

L2 + L3
P (` + 1)
=
.
2r
2r
407

(1)

fiFeldman & Tamir

LPT, L2 , L3 `, thus P 3` + 1. Summing (iii) (iv), using Equation (1)
get
r

2L1
2(` + 1)
2(` + 1)
=

0
0
1
+ L3
P L1
P (1 2r
)+

L02

Implying,
r(3` + 1)

`+1
2r



2(` + 1)
1
(3` + 1)(1 2r
)+

`+1
2r

.

3` + 1 ` + 1
+
2` + 2
2
2

and,
r

3` + 2
.
3` + 1

(2)

Case 1: ` 3. case, Equation (2) implies r 1.1.
Case 2: ` < 3. case requires closer analysis. Let instance LPT
creates schedule deviation s0 = (s0 , ) achieving maximal IR min ` < 3.
= 2, 3, denote Hi total load jobs migrating Mi M1 , Ki
total load jobs remain Mi . flower structure, L01 H2 + H3 , therefore
H2 < K3 H3 < K2 , else would beneficial jobs composing H2 , H3
join coalition. Propositions A.1 A.2, H2 , H3 , K2 , K3 least 1.
Claim A.3 load ` M1 incurred exactly two jobs.
Proof: Clearly, since consider case ` < 3 lightest job M1 load 1,
load ` incurred two jobs. Assume contradiction ` consists single
job. Then, exactly two jobs M1 , loads ` 1. flower structure,
`-job must join coalition. W.l.o.g assume migrates M2 . migration profitable
K2 < 1, contradicting Proposition A.2.

Therefore, assume w.l.o.g instance achieving maximal IR min , M1
assigned three jobs loads 1 + , 1 + , 1, , 0.
` = 2 + + , bound Equation (2) implies
r

8 + 3( + )
3` + 2
=
.
3` + 1
7 + 3( + )

(3)

Consider first case one two big jobs M1 migrate away
M1 . show coalition deviation beneficial case. W.l.o.g, assume
job length 1 + remains M1 job length 1 + migrates M2 .
migration 1 + profitable K2 < 2 + . hand, migration
jobs migrating M2 M1 profitable K2 > H3 + 1 + 2 + .
contradiction.
Consider next case 1-job migrate away M1 . W.l.o.g,
assume job length 1 + migrates M2 job length 1 + migrates
M3 . order bound r according Equation (3), find lower bound ( + ).
Equation (1),
2r

L2 + L3
K2 + H2 + K3 + H3
K2 + K3 + 2
6++
=


.
0
L1
1 + H2 + H3
3
3
408

(4)

fiApproximate Strong Equilibrium

third inequality due fact ratio decreasing H2 + H3 ,
known least 2 Proposition A.1. last inequality since migrations
beneficial jobs leaving M1 , is, K2 < 2 + , K3 < 2 + .
Equation (4) implies 6r < 6 + + + > 6r 6. Next, apply bound
+ Equation (3) obtain
r<

18r 10
.
18r 11



6
1
implies r < 10
9 < 2 + 4 .
case analyze yet one three jobs assigned M1 migrate
away M1 deviation. Assume w.l.o.g jobs size 1+ 1 migrating
M2 job size 1 + migrating M3 . Clearly, jobs size 1 + , 1 +
migrate machine currently assigned additional load
1 K2 K3 least 1, Proposition A.2. Figure 8 shows schedule
migration (Figure 8(a)) migration (Figure 8(b)).

M3

K3

H3

M2

K2

H2

M1

1+

1+

l

1

K3+H3

M3

K2+H2

M2

K2

1+

3+ +

M1

H2

H3

K3

1+

K3+1+
1

K2+2+
H2+H 3

(b)

(a)

Figure 8: LPT coalition achieving maximal IR min .
Next, find lower bound + . Considering migration M1 M2 ,
know r (3 + + )/(2 + + K2 ). Therefore + 2r + r + K2 r 3
2r + rK2 3 (because 0). Considering migration M2 M1 , know
r (K2 + H2 )/(H2 + H3 ). Therefore, K2 H2 (r 1) + H3 r. LPT assigns 1-job
M1 load 2 + + , load M2 time K2 + H2 .
Therefore 2 + + K2 + H2 , implying H2 2 + + K2 . Also, Proposition A.1,
H3 1. use bounds H2 , H3 get improved bound K2 . Specifically,
K2 (2 + + K2 )(r 1) + r. implies K2 r 3r + r( + ) (2 + ( + )). Back
bound + , + 2r + 3r + r( + ) (2 + ( + )) 3. Thus,
+ (5r 5)/(2 r). Note (2 r) positive since Theorem 3.1, r < 5/4.
Finally, apply bound + Equation (3) obtain
r

1 + 7r
8 + 3(5r 5)/(2 r)
=
.
7 + 3(5r 5)/(2 r)
1 + 8r



implies r 12 + 46 .

bound tight. Specifically,

Theorem 3.5 3, exists LPT schedule IR min (s) = 12 + 46 .

6
1
+
2
4 , consider Figure 8,
r(3+)2
, H2 = 2 + K2 , K3 = 1
r


10+5
6,
6 6

Proof: Let r =

substitute =

K2 =

+ , H3 = 1 (the instance

409

= 0,

fiFeldman & Tamir

rounded values appears Figure 9). easy verify three jobs leaving M1
improvement ratio exactly r = 12 + 46 , holds two jobs migrating


M1 . Thus, instance IR min = 12 + 46 . Moreover, lower bound easily
extended > 3 adding dummy jobs machines. Thus,
M3

1.633

1

2.633

M3

M2

1.367

1.266

2.633

M2

1.266

M1

1.633

1

3.633

M1

1.367

1

1.633
1

1.633

3.266

1

3.266

1

2.367

(b)

(a)

Figure 9: LPT-originated
deviation three machines migrating jobs im
6
1
prove 2 + 4 .


Theorem 4.2 Let LPT schedule three machines. holds IR max (s) 53 .
Proof: Let M1 loaded machine. Recall lightest (also last) job assigned
M1 1-job load 1. = 2, 3, Ki set (and total load) jobs
remain Mi , Hi,j set (and total load) jobs migrating Mi
Mj . = 1, let K1 , H1,2 , H1,3 above, excluding 1-job.
1-job assigned M1 LPT, meaning load M2 M3 least
K1 + H1,2 + H1,3 time. Since load M2 , M3 could increase time
1-job assigned, get
K1 + H1,2 + H1,3 K2 + H2,1



K1 + H1,2 + H1,3 K3 + H3,1 .

(5)

Therefore (sum two):
2(K1 + H1,2 + H1,3 ) K2 + K3 + H2,1 + H3,1 .

(6)

Distinguish two cases:
(i) 1-job remains M1 . case, L1 = K1 + H1,2 + H1,3 + 1; L2 =
K2 +H2,1 ; L3 = K3 +H3,1 , coalition active L01 = K1 +H2,1 +H3,1 +1; L02 =
K2 + H1,2 ; L03 = K3 + H1,3 .
Since jobs H1,2 H1,3 part coalition, L02 + L03 < 2L1 . Deducing
H1,2 H1,3 sides get K2 + K3 < H1,2 + H1,3 + 2K1 + 2. Combining
Equation 6, get:
H1,2 + H1,3 < H2,1 + H3,1 + 2.
(7)
Proposition A.1, H2,1 , H3,1 , K2 , K3 least 1. Proposition 2.9,
improvement ratio 1-job, equals L1 /L01 , largest among coalition.
ratio bounded follows:
K1 + H1,2 + H1,3 + 1
K1 + H2,1 + H3,1 + 3
L1
5
=
<
.
0
L1
K1 + H2,1 + H3,1 + 1
K1 + H2,1 + H3,1 + 1
3
410

fiApproximate Strong Equilibrium

left inequality follows Equation 7. right one follow Proposition A.1
fact K1 might empty.
(ii) 1-job leaves M1 . assume w.l.o.g 1-job moves M2 .
case, L1 = K1 + H1,2 + H1,3 + 1; L2 = K2 + H2,1 ; L3 = K3 + H3,1 , coalition
active L01 = K1 + H2,1 + H3,1 ; L02 = K2 + H1,2 + 1; L03 = K3 + H1,3 .
Since jobs H1,2 H1,3 part coalition, L02 + L03 < 2L1 . Deducing
1, H1,2 H1,3 sides get K2 + K3 < H1,2 + H1,3 + 2K1 + 1. Combining
Equation 6, get:
H1,2 + H1,3 < H2,1 + H3,1 + 1.
(8)
Propositions A.1 A.2, H2,1 , H3,1 , K2 , K3 least 1. K1 empty
jobs K1 improvement ratio L1 /L01 is, Proposition 2.9, largest
ratio among coalition. ratio bounded follows:
K1 + H1,2 + H1,3 + 1
K1 + H2,1 + H3,1 + 2
L1
5
=

< .
0
L1
K1 + H2,1 + H3,1
K1 + H2,1 + H3,1
3
left inequality follows Equation 8. right one follows Proposition A.1,
fact K1 empty includes least one job load least 1.
K1 empty, show below, maximal improvement ratio less 3/2.
bound separately improvement ratio H1,2 , H1,3 , Hi,1 (i {1, 2}). Denote
ri,j IR jobs moving Mi Mj . addition Equations 5 8,
Propositions A.1 A.2, use Proposition 2.8. Specifically, H2,1 < H1,2 + 1
H3,1 < H1,3 . Finally, bear mind K1 = .
r1,2 =

H1,2 + H1,3 + 1
K2 + H2,1 + 1
K2 + H2,1 + 1
3
L1
=

<
< .
0
L2
K2 + H1,2 + 1
K2 + H1,2 + 1
K2 + H2,1
2

r1,3 =

H1,2 + H1,3 + 1
K3 + H3,1 + 1
K3 + H3,1 + 1
3
L1
=

<
< .
0
L3
K3 + H1,3
K3 + H1,3
K3 + H3,1
2

ri,1 =

Ki + Hi,1
H1,2 + H1,3
H2,1 + H3,1 + 1
Li
3
=
<
<
< .
0
L1
H2,1 + H3,1
H2,1 + H3,1
H2,1 + H3,1
2


Appendix B. List Scheduling
List Scheduling (LS) greedy scheduling algorithms jobs assigned
machines arbitrary order, similar LPT, job assigned least loaded
1
machine time assignment. LS known provide (2
)-approximation
minimum makespan (Graham, 1966). LS depart qualitatively
LPT respect makespan approximation (i.e., provide constant approximation
optimal makespan), qualitatively different respect game theoretic
properties. First, LS necessarily produce NE. Moreover, next show, LS
performs poorly respect measures introduced paper.
improvement ratio job bounded even coalition consists single
job. Consider example instance 2 machines jobs lengths 1, 1, X (in
411

fiFeldman & Tamir

order) X > 1. LS produce schedule loads 1, 1 + X. job length
1 scheduled long job migrate join short job. improvement
ratio 1 + X/2 arbitrarily large.
damage ratio deviation LS schedule bounded either. Consider
instance three machines jobs lengths {1 2, 1 , 1, 2, X, 2, 3}. easy
verify resulting LS-configuration, exists coalition job
length X migrates. Since X arbitrarily large, damage ratio job
machine X migrates arbitrarily large. note damage ratio caused
deviation single job 2. see this, consider LS configuration
assume job j length pj migrates M1 M2 . Denote Bj , Aj total
load jobs M1 assigned j respectively. Aj = 0 (j last)
beneficial j migrate (Bj < L2 , else j assigned
M2 ). Else, first job j assigned M1 Bj + pj less load
time M2 . Therefore L2 Bj + pj , particular pj L2 . damage
ratio (L1 + pj )/L1 2. analysis tight exemplified instance
= 2, = {1, 1, X}.

References
A. Fiat, H. Kaplan, M. L., & Olonetsky., S. (2007). Strong price anarchy machine
load balancing. International Colloquium Automata, Languages Programming(ICALP).
Albers, S. (2009). value coordination network design. SIAM J. Comput., 38(6),
22732302.
Albers, S., Elits, S., Even-Dar, E., Mansour, Y., & Roditty, L. (2006). Nash Equilibria
Network Creation Game. Annual ACM-SIAM Symposium Discrete Algorithms
(SODA).
Andelman, N., Feldman, M., & Mansour, Y. (2007). Strong Price Anarchy. SODA07.
Anshelevich, E., Dasgupta, A., Kleinberg, J. M., Tardos, E., Wexler, T., & Roughgarden, T.
(2004). price stability network design fair cost allocation.. FOCS,
pp. 295304.
Anshelevich, E., Dasgupta, A., Tardos, E., Wexler, T., & Roughgarden, T. (2003). Nearoptimal network design selfish agents. ACM Symposium Theory Computing (STOC).
Aumann, R. (1959). Acceptable Points General Cooperative n-Person Games. Contributions Theory Games, Vol. 4.
Awerbuch, B., Azar, Y., Richter, Y., & Tsur, D. (2003). Tradeoffs Worst-Case Equilibria.
1st International Workshop Approximation Online Algorithms.
Bernheim, D. B., Peleg, B., & Whinston, M. D. (1987). Coalition-proof nash equilibria:
concepts. Journal Economic Theory, 42, 112.
Chen, B. (2009). Equilibria load balancing games. Acta Mathematica Applicata Sinica,
appear.
412

fiApproximate Strong Equilibrium

Christodoulou, G., Koutsoupias, E., & Nanavati, A. (2004). Coordination mechanisms. J.
Daz, J. Karhumaki, A. Lepisto, D. Sannella (Eds.), Automata, Languages
Pro- gramming, Volume 3142 Lecture Notes Computer Science. Berlin: Springer,
pp. 345357.
Christodoulou, G., & Koutsoupias, E. (2005). Price Anarchy Stability
Correlated Equilibria Linear Congestion Games. Annual European Symposium
Algorithms (ESA).
Czumaj, A., & Vocking, B. (2002). Tight bounds worst-case equilibria. ACM-SIAM
Symposium Discrete Algorithms (SODA), pp. 413420.
Epstein, A., Feldman, M., & Mansour, Y. (2007). Strong Equilibrium Cost Sharing
Connection Games. ACM Conference Electronic Commerce (ACMEC).
Fabrikant, A., Luthra, A., Maneva, E., Papadimitriou, C., & Shenker, S. (2003).
network creation game. ACM Symposium Principles Distriubted Computing
(PODC).
Finn, G., & Horowitz, E. (1979). linear time approximation algorithm multiprocessor
scheduling. BIT Numerical Mathematics, 19 (3), 312320.
Fotakis, D., S. Kontogiannis, M. M., & Spiraklis, P. (2002). Structure Complexity Nash Equilibria Selfish Routing Game. International Colloquium
Automata, Languages Programming (ICALP), pp. 510519.
Graham, R. (1966). Bounds certain multiprocessing anomalies. Bell Systems Technical
Journal, 45, 15631581.
Graham, R. (1969). Bounds multiprocessing timing anomalies. SIAM J. Appl. Math.,
17, 263269.
Halpern, J. Y., & Teague, V. (2004). Rational secret sharing multiparty computation.
ACM Symposium Theory Computing (STOC), pp. 623632.
Holzman, R., & Law-Yone, N. (1997). Strong equilibrium congestion games. Games
Economic Behavior, 21, 85101.
Holzman, R., & Law-Yone, N. (2003). Network structure strong equilibrium route
selection games. Mathematical Social Sciences, 46, 193205.
Koutsoupias, E., & Papadimitriou, C. H. (1999). Worst-case equilibria.. Symposium
Theoretical Aspects Computer Science (STACS), pp. 404413.
Lamport, L., Shostak, R., & Pease, M. (1982). byzantine generals problem. ACM
Trans. Prog. Lang. Sys., 4, 382401.
Leonardi, S., & Sankowski, P. (2007). Network formation games local coalitions.
ACM Symposium Principles Distriubted Computing (PODC).
Milchtaich, I. (1998). Crowding games sequentially solvable. International Journal
Game Theory, 27, 501509.
Papadimitriou, C. H. (2001). Algorithms, games, internet. ACM Symposium
Theory Computing (STOC), pp. 749753.

413

fiFeldman & Tamir

Procaccia, A. D., & Rosenschein, J. S. (2006). communication complexity coalition
formation among autonomous agents. Int. Conference Autonomous Agents
Multiagent Systems (AAMAS), pp. 505512.
Roughgarden, T., & Tardos, E. (2002). bad selfish routing?. Journal ACM,
49 (2), 236 259.
Rozenfeld, O., & Tennenholtz, M. (2006). Strong correlated strong equilibria monotone congestion games. Workshop Internet Network Economics (WINE).
Schuurman, P., & Vredeveld, T. (2007). Performance guarantees local search
multiproces- sor scheduling. INFORMS Journal Computing, 19(1), 52 63.

414


