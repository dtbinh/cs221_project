Journal Artificial Intelligence Research 36 (2009) 513-546

Submitted 08/09; published 12/09

RoxyBot-06: Stochastic Prediction Optimization
TAC Travel
Amy Greenwald

amy@cs.brown.edu

Department Computer Science, Brown University
Providence, RI 02912 USA

Seong Jae Lee

seongjae@u.washington.edu

Computer Science Engineering, University Washington
Seattle, WA 98195 USA

Victor Naroditskiy

vnarodit@cs.brown.edu

Department Computer Science, Brown University
Providence, RI 02912 USA

Abstract
paper, describe autonomous bidding agent, RoxyBot, emerged victorious travel division 2006 Trading Agent Competition photo finish.
high level, design many successful trading agents summarized follows:
(i) price prediction: build model market prices; (ii) optimization: solve
approximately optimal set bids, given model. predict, RoxyBot builds stochastic model market prices simulating simultaneous ascending auctions. optimize,
RoxyBot relies sample average approximation method, stochastic optimization
technique.

1. Introduction
annual Trading Agent Competition (TAC) challenges entrants design build
autonomous agents capable effective trading online travel1 shopping game. first
TAC, held Boston 2000, attracted 16 entrants six countries North America,
Europe, Asia. Excitement generated event led refinement game
rules, continuation regular tournaments increasing levels competition
next six years. Year-by-year, entrants improved designs, developing new ideas
building previously successful techniques. Since TACs inception, lead author
entered successive modifications autonomous trading agent, RoxyBot. paper
reports RoxyBot-06, latest incarnation top scorer TAC-06 tournament.
key feature captured TAC travel game goods highly interdependent
(e.g., flights hotels must coordinated), yet markets goods operate
independently. second important feature TAC agents trade via three different
kinds market mechanisms, presents distinct challenges. Flights traded
posted-price environment, designated party sets price parties
1. four divisions TAC: Travel, Supply Chain Management (SCM), CAT (TAC backwards),
Ad Auctions (AA). paper concerned first; description others, see
papers Arunachalam Sadeh (2005), Cai et al. (2009), Jordan Wellman (2009), respectively.
paper, say TAC, mean TAC Travel.

c
2009
AI Access Foundation. rights reserved.

fiGreenwald, Lee, & Naroditskiy

must take leave. Hotels traded simultaneous ascending auctions, FCC
spectrum auctions. Entertainment tickets traded continuous double auctions,
New York Stock Exchange. grappling three mechanisms constructing
agent strategies, participants confronted number interesting problems.
success autonomous trading agent TAC agent often hinges upon
solutions two key problems: (i) price prediction, agent builds model
market prices; (ii) optimization, agent solves approximately
optimal set bids, given model. example, core RoxyBots 2000 architecture (Greenwald & Boyan, 2005) deterministic optimization problem, namely
bid given price predictions form point estimates. spite effectiveness
TAC-00 tournament, weakness 2000 design RoxyBot could explicitly
reason variance within prices. years since 2000, recast key challenges
faced TAC agents several different stochastic bidding problems (see, example,
paper Greenwald & Boyan, 2004), whose solutions exploit price predictions form
distributions. spite perseverance, RoxyBot fared unimpressively tournament
conditions year year, 2006. Half decade laboratory spent searching
bidding heuristics exploit stochastic information reasonable computational expense finally bore fruit, RoxyBot emerged victorious TAC-06. nutshell, secret
RoxyBot-06s success is: (hotel) price prediction simulating simultaneous ascending
auctions, optimization based sample average approximation method. Details
approach subject present article.
Overview paper organized follows. Starting Section 2, summarize
TAC market game. Next, Section 3, present high-level view RoxyBots 2006
architecture. Section 4, describe RoxyBots price prediction techniques flights, hotels, entertainment, turn. Perhaps greatest interest hotel price prediction
method. Following Wellman et al. (2005), predict hotel prices computing approximate competitive equilibrium prices. Only, instead computing prices running
tatonnement process, simulate simultaneous ascending auctions. procedure
simpler implement tatonnement, yet achieves comparable performance, runs
sufficiently fast. Section 5, describe RoxyBots optimization technique: sample average
approximation. argue approach optimal pseudo-auctions, abstract
model auctions. Section 6.1, describe simulation experiments controlled testing environment show combined approachsimultaneous ascending auctions
hotel price prediction sample average approximation bid optimizationperforms
well practice comparison reasonable bidding heuristics. Section 6.2,
detail results TAC-06 tournament, validating success RoxyBot-06s
strategy, reporting statistics shed light bidding strategies participating agents. Finally, Section 7, evaluate collective behavior autonomous
agents TAC finals since 2002. find accuracy competitive equilibrium
calculations varied year year highly dependent particular agent
pool. Still, generally speaking, collective appears moving toward competitive
equilibrium behavior.

514

fiRoxyBot-06

2. TAC Market Game: Brief Summary
section, summarize TAC game. details, see http://www.sics.se/
tac/.
Eight agents play TAC game. simulated travel agent whose task
organize itineraries clients travel TACTown five day (four
night) period. time allotted (nine minutes), agents objective procure
travel goods inexpensively possible, trading fact goods
ultimately compiled feasible trips satisfy client preferences greatest
extent possible. agents know preferences eight clients only,
56.
Travel goods sold simultaneous auctions follows:
Flight tickets sold TACAir dynamic posted-pricing environments.
flights TACTown applicable day. resale flight
tickets agents permitted.
Flight price quotes broadcast TAC server every ten seconds.
Hotel reservations sold TAC seller multi-unit ascending call markets.
Specifically, 16 hotel reservations sold hotel auction 16 highest
bidders 16th highest price. TAC seller runs eight hotel auctions, one per
night-hotel combination (recall travel takes place four night period;
moreover, two hotels: good one bad one). resale hotel
reservations agents permitted. bid withdrawal allowed.
specifically, eight hotel auctions clear minute exactly one auction
closing minutes one eight. (The precise auction close chosen
random, open auctions equally likely selected.) auction
closes, TAC server broadcasts final closing price, informs agent
winnings. others, TAC server reports current ask price, informs
agent hypothetical quantity (HQW).
Agents allocated initial endowment entertainment tickets, trade
among continuous double auctions (CDAs). three entertainment events scheduled day.
Although event auctions clear continuously, price quotes broadcast every
30 seconds.
One primary challenges posed TAC design build autonomous agents
bid effectively interdependent (i.e., complementary substitutable) goods
sold separate markets. Flight tickets hotel reservations complementary
flights useful client without corresponding hotel reservations, vice
versa. Tickets entertainment events (e.g., Boston Red Sox Boston Symphony
Orchestra) substitutable client cannot attend multiple events simultaneously.

515

fiGreenwald, Lee, & Naroditskiy

REPEAT
{start bid interval }
0. Download current prices winnings server
1. predict: build stochastic models
a. flights: Bayesian updating/learning
b. hotels: simultaneous ascending auctions
c. entertainment: sample historical data
2. optimize: sample average approximation
3. Upload current bids server
(three separate threads)
{end bid interval }
game

Table 1: high-level view RoxyBot-06s architecture.

3. RoxyBot-06s Architecture: High-Level View
approach problem bidding interdependent goods separate TAC
markets, adopt simplifying assumptions. Rather tackle game-theoretic
problem characterizing strategic equilibria, focus single agents (decision-theoretic)
problem optimizing bidding behavior, assuming agents strategies
fixed. addition, assume environment modeled terms agents
predictions market clearing prices. prices serve summarize relevant information hidden agents bidding strategies. two assumptionsfixed otheragent behaviors market information encapsulated pricessupport modular design RoxyBot-06 many successful TAC agents, consists two key stages:
(i) price prediction; (ii) optimization.
optimization problem faced TAC agents dynamic one incorporates
aspects sequentiality well simultaneity auctions. markets operate simultaneously, addition, prices discovered incrementally time. principle,
clairvoyant agentone knowledge future clearing pricescould justifiably employ
open-loop strategy: could solve TAC optimization problem start
game place bids accordingly, never reconsidering decisions. practical alternative (and usual approach taken TAC2 ), incorporate agents
architecture closed loop, bidding cycle, enabling agent condition behavior
evolution prices. price information revealed, agent improves price
predictions, reoptimizes bidding decisions, repeatedly.
One distinguishing feature RoxyBot-06 builds stochastic models market
clearing prices, rather predicting clearing prices point estimates. Given stochastic
price predictions, stochastic optimization lies heart RoxyBot-06. Assuming time
2. exception livingagents (Fritschi & Dorer, 2002), winner TAC 2001.

516

fiRoxyBot-06

discretized stages, bid intervals, iteration bidding cycle, RoxyBot-06
faces n-stage stochastic optimization problem, n number stages remaining
game. key input optimization problem sequence n 1 stochastic
models future prices, one joint probability distribution goods conditioned
past prices past hotel closings. solution optimization problem,
output iteration bidding cycle, vector bids, one per good (or auction).
Table 1 presents high-level view RoxyBot-06s architecture, emphasizing bidding
cycle. start bid interval, current prices winnings downloaded
TAC server. Next, key prediction optimization routines run. prediction module, stochastic models flight, hotel, entertainment prices built.
optimization module, bids constructed approximate solution n-stage
stochastic optimization problem. Prior end bid interval, agents bids
uploaded TAC server using three separate threads: (i) flight thread bids
flight price near predicted minimum; (ii) hotel thread bids open
hotels moments end minute; (iii) entertainment thread
places bids immediately.
discuss details RoxyBot-06s price prediction module first, optimization
module second.

4. Price Prediction
section, describe RoxyBot-06 builds stochastic models flight, hotel,
event prices. model discrete probability distribution, represented set scenarios. scenario vector future pricesprices goods bought
sold current stage. flights, price prediction model stochastic:
future buy price simply RoxyBot-06s prediction expected minimum price
current stage. hotels, future buy prices predicted Monte Carlo simulations
simultaneous ascending auctions approximate competitive equilibrium prices.
current buy prices hotels. entertainment, RoxyBot-06 predicts future buy
sell prices based historical data. Details price prediction methods focus
section.
4.1 Flights
Efforts deliberate flight purchasing start understanding TAC model
flight price evolution.
4.1.1 TAC Flight Prices Stochastic Process
Flight prices follow biased random walk. initialized uniformly range
[250, 400], constrained remain range [150, 800]. start TAC
game instance, bound z final perturbation value selected flight.
bounds revealed agents. revealed agents sequence
random flight prices. Every ten seconds, TACAir perturbs price flight
random value depends hidden parameter z current time follows:
given constants c, R > 0, (intermediate) bound perturbation value

517

fiGreenwald, Lee, & Naroditskiy

linear function t:


(z c)
(1)

perturbation value time drawn uniformly one following ranges (see
Algorithm 1):
x(t, z) = c +

U [c, x(t, z)], x(t, z) > 0
U [c, +c], x(t, z) = 0
U [x(t, z), +c], x(t, z) < 0
Observe expected perturbation value case simply average
corresponding upper lower bounds. particular,
x(t, z) > c, expected perturbation positive;
x(t, z) (0, c), expected perturbation negative;
x(t, z) (c, 0), expected perturbation positive;
otherwise, x(t, z) {c, 0, c}, expected perturbation zero.
Moreover, using Equation 1, compute expected perturbation value conditioned
z:
z [0, c], x(t, z) [0, c], prices expected increase;
z [c, c + d], x(t, z) [c, c + d], prices expected decrease;
z [c, 0], x(t, z) [c, c], prices expected increase
cT
.
expected decrease cz

cT
cz

TAC parameters set follows: c = 10, = 30, = 540, z uniformly
distributed range [c, d]. Based discussion, note following:
given information z, TAC flight prices expected increase (i.e.,
expected perturbation positive); however, conditioned z, TAC flight prices may
increase decrease (i.e., expected perturbation positive negative).
4.1.2 RoxyBot-06s Flight Prices Prediction Method
Although value hidden parameter z never revealed agents, recall
agents observe sample flight prices, say y1 , . . . , yt , depend value.
information used model probability distribution Pt [z] P [z | y1 , . . . , yt ].
probability distribution estimated using Bayesian updating. RoxyBot06, agents Walverine (Cheng et al., 2005) Mertacor (Toulis et al., 2006) took approach.
Walverine uses Bayesian updating compute next expected price perturbation
compares value threshold, postponing flight purchases prices expected
increase threshold. Mertacor uses Bayesian updating estimate
time flight prices reach minimum value. RoxyBot uses Bayesian updating
compute expected minimum price, describe.
518

fiRoxyBot-06

Algorithm 1 getRange(c, t, z)
compute x(t, z) {Equation 1}
x(t, z) > 0
= c; b = x(t, z)
else x(t, z) < 0
= x(t, z); b = +c
else
= c; b = +c
end
return [a, b] {range}
RoxyBot-06s implementation Bayesian updating presented Algorithm 2. Letting

Q0 [z] =

1
c+d

= P [z], algorithm estimates Pt+1 [z] = P [z | y1 , . . . , yt+1 ] usual:
P [y1 , . . . , yt | z]P [z]



z P [y1 , . . . , yt | z ]P [z ] dz



P [z | y1 , . . . , yt ] = P
P [y1 , . . . , yt | z] =
=




i=1



(2)

P [yi | y1 , . . . , yi1 , z]

(3)

P [yi | z]

(4)

i=1

Equation 4 follows fact future observations independent past observations; observations depend hidden parameter z.
thing left explain set values P [yi | z], = 1, . . . , t.
described pseudocode, done follows: yt+1 within appropriate range
time, probability set uniformly within bounds range; otherwise,
set 0. Presumably, Walverines Mertacors implementations Bayesian updating
different one.3 However, alluded above, agents make
use ensuing estimated probability distributions differ.
RoxyBot-06 predicts flights price expected minimum price. value
computed follows (see Algorithm 3): possible value hidden parameter z,
RoxyBot simulates expected random walk, selects minimum price along walk,
outputs prediction expectation minima, averaging according
Pt [z]. call random walk expected, since perturbation value expectation
(i.e., = ba
2 ) instead sample (i.e., U [a, b]). carrying computation,
RoxyBot generates flight price predictions point estimates. implicit decision
make RoxyBot-06s hotel event price predictions stochastic made based
intuitive sense time vs. accuracy tradeoffs RoxyBots optimization module,
hence warrants study.
3. provide details here, corresponding details agents seem publicly
available.

519

fiGreenwald, Lee, & Naroditskiy

Algorithm 2 Flight Prediction(c, d, t, yt+1 , Qt )
z {c, c + 1, . . . , d}
[a, b] = getRange(c, t, z)
yt+1 [a, b]
1
P [yt+1 | z] = ba
else
P [yt+1 | z] = 0
end
Qt+1 [z] = P [yt+1 | z]Qt [z]
end for{update probabilities}
z {c, c + 1, . . . , d}
t+1 [z]
Pt+1 [z] = P Q


z Qt+1 [z ] dz
end for{normalize probabilities}
return Pt+1 {probabilities}
Algorithm 3 Expected Minimum Price(c, t, , pt , Pt )
z R
min[z] = +
= + 1, . . . ,
[a, b] = getRange(c, , z)
= ba
2 {expected perturbation}
p = p 1 + {perturb price}
p = max(150, min(800, p ))
p < min[z]
min[z] = p
end
end
end forP
return z Pt [z] min[z] dz
4.2 Hotels
competitive market individuals effect prices negligible, equilibrium prices prices supply equals demand, assuming producers profitmaximizing consumers utility-maximizing. RoxyBot-06 predicts hotel prices
simulating simultaneous ascending auctions (SimAA) (Cramton, 2006), attempt
approximate competitive equilibrium (CE) prices. approach inspired Walverines (Cheng et al., 2005), tatonnement method (Walras, 1874) used
purpose.
4.2.1 Simultaneous Ascending Auctions
Let p~ denote vector prices. ~y (~
p) denotes cumulative supply producers,
~x(~
p) denotes cumulative demand consumers, ~z(~
p) = ~x(~
p)~y (~
p) denotes

520

fiRoxyBot-06

excess demand market. tatonnement process adjusts price vector iteration
n + 1, given price vector iteration n adjustment rate n follows: p~n+1 =
p~n + n~z(~
pn ). SimAA adjusts price vector follows: p~n+1 = p~n + max{~z(~
pn ), 0},
fixed value . processes continue excess demand non-positive:
i.e., supply exceeds demand.
Although competitive equilibrium prices guaranteed exist TAC markets (Cheng et al., 2003), SimAA adjustment process, still guaranteed converge:
prices increase, demand decreases supply increases; hence, supply eventually exceeds demand. parameter SimAA method magnitude price
adjustment. smaller value, accurate approximation (assuming CE
prices exist), value chosen lowest value time permits.
tatonnement process, hand, difficult apply
guaranteed converge. Walverine team dealt convergence issue decaying
initial value . However, careful optimization required ensure convergence
reasonable solution reasonable amount time. fact, Walverine found helpful
set initial prices certain non-zero values. complexity present using
simultaneous ascending auctions approximate competitive equilibrium prices.
4.2.2 Prediction Quality
TAC, cumulative supply fixed. Hence, key computing excess demand
compute cumulative demand. TAC agent knows preferences clients,
must estimate demand others. Walverine computes single hotel price prediction (a
point estimate) considering clients demands together 56 expected
clients. Briefly, utility expected client average across travel dates hotel
types augmented fixed entertainment bonuses favor longer trips (see paper
Cheng et al., 2005, details). contrast, RoxyBot-06 builds stochastic model
hotel prices consisting scenarios considering clients demands together
random samples 56 clients. (random expected) clients demand simply
quantity good optimal package, given current prices. cumulative demand
sum total clients individual demands.
Figure 1, present two scatter plots depict quality various hotel price
predictions beginning TAC 2002 final games. price predictions evaluated using two metrics: Euclidean distance expected value perfect prediction
(EVPP). Euclidean distance measure difference two vectors, case
actual predicted prices. value perfect prediction (VPP) client
difference surplus (value preferred package less price) based actual
predicted prices. EVPP VPP averaged distribution client preferences.4
left, plot predictions generated using competitive equilibrium ap1
proximation methods, tatonnement SimAA, fixed = 24
, making expected,
random, exact predictions. exact predictions computed based actual
clients games, client distribution; hence, serve lower bound
performance techniques data set. metrics,
expected random, SimAAs predictions outperform tatonnements.
4. See paper Wellman et al. (2004) details.

521

fiGreenwald, Lee, & Naroditskiy

44

70
livingagents
PackaTAC
Southampton
RoxyBot UMBCTAC
whitebear
SICS_baseline
ATTac

Expected Value Perfect Prediction

Expected Value Perfect Prediction

65
tatonnement, random

42

SimAA, random
40

tatonnement, expected
38

36

SimAA, expected

SimAA, exact
tatonnement, exact

60
55
50
harami

cuhk

45
kavayaH

SimAA, random

40
Walverine
35

34
180

190

200

210

220

30
180

230

Euclidean Distance

ATTac01
190

200

210

220

230

240

250

260

Euclidean Distance

Figure 1: EVPP Euclidean Distance CE price prediction methods (tatonnement
1
; expected, random, exact) TAC 2002 agents
SimAA = 24
predictions 2002 finals (60 games). plot left shows SimAAs
predictions better tatonnements expecteds better
randoms. RoxyBot-06s method hotel price prediction (SimAA, Random)
plotted right. Note differences scales two plots.

Since fixed, tatonnement guaranteed converge condition,
outcome entirely surprising. interesting, though, SimAA expected
performs comparably Walverine (see right plot).5 interesting SimAA
fewer parameter settings tatonnementonly single value compared
initial value together decay scheduleand moreover, optimize
parameter setting. Walverines parameter settings, hand, highly
optimized.
interpret prediction generated using randomly sampled clients sample
scenario, set scenarios represents draws probability distribution
CE prices. corresponding vector predicted prices evaluated actually
average multiple (40) predictions; is, evaluate estimate mean
probability distribution. predictions generated using sets random clients
good predictions expected clients (see Figure 1 left), although
40 sets random clients, results might improve. Still, predictions random
clients comprise RoxyBot-06s stochastic model hotel prices, key bidding
strategy. Moreover, using random clients helps RoxyBot-06 make better interim predictions
later game explain next.
4.2.3 Prediction Quality Time: Interim Price Prediction
graphs depicted Figure 1 pertain hotel price predictions made beginning
game, hotel auctions open. CE computations, prices initialized
0. hotel auctions close, RoxyBot-06 updates predicted prices hotel auctions
5. exception RoxyBot-06 data point (i.e., SimAA random), plot produced
Walverine team (Wellman et al., 2004).

522

fi22

140

tatonnement, expected clients
SimAA, expected clients
tatonnement, random clients
SimAA, random clients
tatonnement, random clients, distribution
SimAA, random clients, distribution

20
18
16

tatonnement, expected clients
SimAA, expected clients
tatonnement, random clients
SimAA, random clients
tatonnement, random clients, distribution
SimAA, random clients, distribution

120
Euclidean Distance per Hotel

Expected Value Perfect Prediction per Hotel

RoxyBot-06

14
12
10
8
6
4

100
80
60
40
20

2
0

0
0

1

2

3

4

5

6

7

0

Minute

1

2

3

4

5

6

7

Minute

Figure 2: EVPP Euclidean Distance TAC 2006 finals (165 games) CE price
prediction methods without distribution game progresses. Distribution improves prediction quality.

remain open. experimented two ways constructing interim price predictions.
first initialize lower bound prices hotel markets closing
(for closed auctions) current ask (for open auctions) prices computing competitive
equilibrium prices.6 second differs treatment closed auctions: simulate
process distributing goods closed auctions clients want most,
exclude closed markets (i.e., fix prices ) computations
competitive equilibrium prices.
Regarding second methodthe distribution methodwe determine distribute goods computing competitive equilibrium prices again. explained Algorithm 4, hotels (in open closed auctions) distributed random clients
determining willing pay competitive equilibrium prices what.
immediately obvious distribute goods expected clients; hence, enhanced
prediction methods random clients distribution.
Figure 2, depicts prediction quality time, shows prediction methods
enhanced distribution better predictions obtained merely initializing
prices closed hotel auctions closing prices. Hotels close early tend
sell less hotels close late; hence, prediction quality method
makes decent initial predictions bound deteriorate predictions remain relatively
constant throughout game.
4.2.4 Run Time
Table 2 shows run times CE prediction methods TAC 2002 (60 games)
TAC 2006 (165 games) finals data set minute 0, well run times
6. first blush, may seem sensible fix prices closed hotels closing prices, rather
merely lower bound (i.e., allow increase). hotel closed artificially low
price, however, price permitted increase, predicted prices hotels
complementing hotel question would artificially high.

523

fiGreenwald, Lee, & Naroditskiy

Algorithm 4 Distribute
1: hotel auctions h
2:
initialize price 0
3:
initialize supply 16
4: end
5: compute competitive equilibrium prices {Tatonnement SimAA}
6: closed hotel auctions h
7:
distribute units h demand computed competitive equilibrium prices
8:
distribute leftover units h uniformly random
9: end
minutes 17 TAC 2006 finals data set. numbers table convey
SimAAs run time, even distribution, reasonable. example, minute 0,
SimAA sample takes order 0.1 seconds. minutes 1-7, method without
distribution runs even faster. speed increase occurs CE prices bounded
current ask prices maximum price client willing pay
hotel, current ask prices increase time, correspondingly reducing size
search space. SimAA sample distribution minutes 1-7 takes twice long SimAA
sample without distribution minute 0 time takes distribute goods,
run time still (roughly) 0.2 seconds. implementation tatonnement runs
slowly fixed instead optimizing tradeoff convergence rate
accuracy, process converge, instead ran maximum number
iterations (10,000). summary, SimAA simpler tatonnement implement, yet
performs comparably optimized version tatonnement (i.e., Walverine), runs
sufficiently fast.

2002, minute 0
2006, minute 0
2006, average 17

Exp Tat
2213
2252
2248

Exp SimAA
507
508
347

Sam Tat
1345
1105
1138

Sam SimAA
157
130
97

Dist Tat

1111
2249

Dist SimAA

128
212

Table 2: Run times CE price prediction methods, milliseconds. Experiments
run AMD Athlon(tm) 64 bit 3800+ dual core processors 2M RAM.

4.2.5 Summary
simulation methods discussed sectionthe tatonnement process simultaneous ascending auctionswere employed predict hotel prices only. (In simulations,
flight prices fixed expected minima, entertainment prices fixed 80.)
principle, competitive equilibrium (CE) prices could serve predictions TAC markets. However, CE prices unlikely good predictors flight prices, since flight
prices determined exogenously. regard entertainment tickets, CE prices might
524

fiRoxyBot-06

predictive power; however, incorporating entertainment tickets tatonnement
SimAA calculations would expensive. (In simulations, following Wellman et al., 2004, client utilities simply augmented fixed entertainment bonuses
favor longer trips.) Nonetheless, future work, could interest evaluate
success related methods predicting CDA clearing prices.
Finally, note refer methods computing excess demand clientbased compute demands client individual basis. contrast,
one could employ agent-based method, whereby demands agents, clients,
would calculated. Determining agents demands involves solving so-called completion, deterministic (prices known) optimization problem heart RoxyBot-00s
architecture (Greenwald & Boyan, 2005). TAC completion NP-hard, agent-based
method predicting hotel prices expensive included RoxyBot-06s inner
loop. designing RoxyBot-06, reasoned architecture based stochastic pricing model generated using client-based method randomly sampled clients would
outperform one based point estimate pricing model generated using agent-based
method form expected clients, verify reasoning empirically.
4.3 Entertainment
bid interval, RoxyBot-06 predicts current future buy sell prices tickets
entertainment events. price predictions optimistic: agent assumes
buy (or sell) goods least (or most) expensive prices expects see
end game. specifically, current price prediction best predicted
price current bid interval.
RoxyBot-06s estimates entertainment ticket prices based historical data
past 40 games. generate scenario, sample game drawn random
collection, sequences entertainment bid, ask, transaction prices extracted.
Given history, auction a, let trade ai denote price last trade
time transacted; value initialized 200 buying 0 selling.
addition, let bid ai denote bid price time i, let ask ai denote ask price time
i.
RoxyBot-06 predicts future buy price auction time follows:
future buy =

min

i=t+1,...,T

min{trade ai , ask ai }

(5)

words, future buy price time = + 1, . . . , minimum ask price
time recent trade price. future buy price time minimum
across future buy prices later times. future sell price time predicted
analogously:
(6)
future sell = max max{trade ai , bid ai }
i=t+1,...,T

Arguably, RoxyBot-06s entertainment predictions made simplest possible way:
past data future predictions. likely one could improve upon naive approach
using generalization technique capable learning distribution data,
sampling learned distribution.

525

fiGreenwald, Lee, & Naroditskiy

4.4 Summary
section, described RoxyBot-06s price prediction methods. key ideas,
may transferable beyond TAC, least TAC agents, follows:
1. RoxyBot makes stochastic price predictions. generating set so-called
scenarios, scenario vector future prices.
2. flight, RoxyBot uses Bayesian updating predict expected minimum price.
3. hotels, RoxyBot-uses method inspired Walverines: approximates competitive
equilibrium prices simulating simultaneous ascending auctions, rather
usual tatonnement process.

5. Optimization
Next, characterize RoxyBot-06s optimization routine. (i) stochastic, (ii) global,
(iii) dynamic. takes input stochastic price predictions; considers flight, hotel,
entertainment bidding decisions unison; simultaneously reasons bids
placed current future stages game.
5.1 Abstract Auction Model
Recall treatment bidding decision-theoretic, rather game-theoretic.
particular, focus single agents problem optimizing bidding behavior, assuming agents strategies fixed. keeping basic agent architecture,
assume environment modeled terms agents predictions
market clearing prices. introduce term pseudo-auction refer market
mechanism defined two assumptionsfixed other-agent behaviors market information encapsulated prices. optimization problem RoxyBot solves one
bidding pseudo-auctions, (true) auctions. section, formally develop
abstract auction model relate TAC auctions; next, define propose
heuristics solve various pseudo-auction bidding problems.
5.1.1 Basic Formalism
section, formalize basic concepts needed precisely formulate bidding uncertainty optimization problem, including: packagessets goods, possibly
multiple units each; function describes much agent values package; pricelinesdata structures store prices unit good;
bidspairs vectors corresponding buy sell offers.
Packages Let G denote ordered set n distinct goods let N Nn represent
multiset goods marketplace, Ng denoting number units
good g G. package collection goods, is, submultiset N . write
N whenever Mg Ng g G.
instructive interpret notation TAC domain. flights, hotel rooms,
entertainment events auction TAC comprise ordered set 28 distinct

526

fiRoxyBot-06

goods. principle, multiset goods TAC marketplace is:
N TAC = h, . . . , , 16, . . . , 16, 8, . . . , 8i N28
| {z } | {z } | {z }
8 flights

8 hotels

12 events

practice, however, since agent works satisfy preferences eight clients,
suffices consider multiset goods:
N TAC8 = h8 . . . , 8, 8, . . . , 8, 8, . . . , 8i N TAC
| {z } | {z } | {z }
8 flights

8 hotels

12 events

trip corresponds package, specifically N TAC8 satisfies TAC
feasibility constraints.
Given A, B N , rely two basic operations, , defined follows:
g G,
(A B)g Ag + Bg
(A B)g Ag Bg
example, G = {, , } N = h1, 2, 3i, = h0, 1, 2i N B = h1, 1, 1i
N . Moreover, (A B) = 1, (A B) = 2, (A B) = 3; (A B) = 1,
(A B) = 0, (A B) = 1.
Value Let N denote set submultisets N : i.e., packages comprised goods
N . denote v : N R function describes value bidding agent attributes
viable package.
TAC, agents objective compile packages = 8 individual clients.
such, agents value function takes special form. client c characterized
value function vc : N R, agents value collection packages sum
~ = (X1 , . . . , Xm ),
clients respective values packages: given vector packages X
~ =
v(X)


X

vc (Xc ).

(7)

c=1

N

Pricelines buyer priceline good g vector p~g R+g , kth component,
pgk , stores marginal cost agent acquiring kth unit good g. example,
agent currently holds four units good g, four additional units g
available costs $25, $40, $65, $100, corresponding buyer priceline (a
vector length 8) given p~g = h0, 0, 0, 0, 25, 40, 65, 100i. leading zeros indicate
four goods agent holds may acquired cost.
assume buyer pricelines nondecreasing. Note assumption WLOG,
since optimizing agent buys cheaper goods expensive ones.
Given set buyer pricelines P = {~
pg | g G}, define costs additively, is,
cost goods multiset N given by:
g,

Costg (Y, P ) =

Yg
X

pgk ,

X

Costg (Y, P ).

k=1

Cost(Y, P ) =

gG

527

(8)

fiGreenwald, Lee, & Naroditskiy

N

seller priceline good g vector ~g R+g . Much buyer priceline, kth
component seller priceline g stores marginal revenue agent could earn
kth unit sells. example, market demands four units good g,
sold prices $20, $15, $10, $5, corresponding seller priceline given
~g = h20, 15, 10, 5, 0, 0, 0, 0i. Analogously buyer pricelines, tail zero revenues
indicates market demands four units.
assume seller pricelines nonincreasing. Note assumption WLOG,
since optimizing agent sells expensive goods cheaper ones.
Given set seller pricelines = {~g | g G}, define revenue additively, is,
revenue associated multiset Z N given by:
g,

Revenueg (Z, ) =

Zg
X

gk ,

X

Revenueg (Z, ).

(9)

k=1

Revenue(Z, ) =

(10)

gG

priceline constant, say prices linear. refer constant value
unit price. linear prices, cost acquiring k units good g k times
unit price good g.
Bids agent submits bid expressing offers buy sell various units goods
marketplace. divide two components h~b, ~ai, good g bid
consists buy offer, ~bg = hbg1 , . . . , bgNg i, sell offer, ~ag = hag1 , . . . , agNg i. bid
price bgk R+ (resp. agk R+ ) represents offer buy (sell) kth unit good g
price.
definition, agent cannot buy (sell) kth unit unless buys (sells) units
1, . . . , k 1. accommodate fact, impose following constraint: Buy offers must
nonincreasing k, sell offers nondecreasing. addition, agent may offer
sell good less price willing buy good: i.e., bg1 < ag1 .
Otherwise, would simultaneously buy sell good g. refer restrictions
bid monotonicity constraints.
5.1.2 Pseudo-Auction Rules
Equipped formalism, specify rules govern pseudo-auctions.
true auction, outcome pseudo-auction dictates quantity good
exchange, prices, conditional agents bid. quantity issue resolved
winner determination rule whereas price issue resolved payment rule.
Definition 5.1 [Pseudo-Auction Winner Determination Rule] Given buyer seller pricelines P , bid = h~b, ~ai, agent buys multiset goods Buy(, P ) sells
multiset goods Sell(, ),
Buyg (, P ) = max k bgk pgk
k

Sellg (, ) = max k agk gk
k

528

fiRoxyBot-06

Note monotonicity restrictions bids ensure agents offer better
equal price every unit exchanges, agent simultaneously
buy sell good.
least two alternative payment rules agent may face. first-price
pseudo-auction, agent pays bid price (for buy offers, paid bid price sell
offers) good wins. second-price pseudo-auction, agent pays (or paid)
prevailing prices, specified realized buyer seller pricelines. terminology
derives analogy standard first- second-price sealed bid auctions (Krishna,
2002; Vickrey, 1961). mechanisms, high bidder single item pays bid (the
first price), highest losing bid (the second price), respectively. salient property
first-price pseudo-auctions, price set bid winner, whereas
second-price pseudo-auctions agents bid price determines whether wins
price pays.
paper, focus second-price model. is, basic problem definitions
presume second-price auctions; however, bidding heuristics tailored
case. true auctions, adopting second-price model pseudo-auctions simplifies
problem bidder. provides reasonable approximation situation faced
TAC agents, argue:
TAC entertainment auctions, agents submit bids (i.e., buy sell offers)
form specified above. interpret agents buyer seller pricelines
current order book (not including agents bid), agents immediate winnings determined winner determination rule, payments
according second-price rule (i.e., order-book prices prevail).
TAC hotel auctions, buy bids allowed. Assuming order
book reflects outstanding bids agents own, accurate buyer
priceline would indicate agent win k units good paysfor
k unitsa price (17 k)th existing (other-agent) offer. actual
price pays 16th-highest unit offer (including offer). Since
agents bid may affect price,7 situation lies first-
second-price characterizations pseudo-auctions described above.
TAC flight auctions, agents may buy number units posted price.
situation given time modeled exactly second-price pseudo-auction
abstraction.
5.2 Bidding Problems
ready discuss optimization module repeatedly employed RoxyBot-06
within bidding cycle construct bids. key bidding decisions are: goods
bid on, price, when?
7. two ways. First, agent may submit 16th-highest unit offer, case sets
price. Second, bids multiple units, number wins determines price-setting unit,
thus affecting price winning units. Note second effect would present even
auction cleared 17th-highest price.

529

fiGreenwald, Lee, & Naroditskiy

Although RoxyBot technically faces n-stage stochastic optimization problem, solves
problem collapsing n stages two relevant stages, current
future, necessitating one stochastic model future prices (current prices known).
simplification achieved ignoring potentially useful information hotel
auctions close one one random, unspecified order, instead operating (like
TAC agents) assumption hotel auctions close end current
stage. Hence, one model hotel prices: stochastic model future prices.
Moreover, pressing decisions regarding hotels goods bid
price. need reason timing hotel bid placement.
contrast, since flight entertainment auctions clear continuously, trading agent
reason relevant tradeoffs timing placement bids goods.
Still, assumption hotel auctions close end current stage,
future stages, hotel prices, hence hotel winnings, known, remaining
decisions flight entertainment tickets buy. rational agent time
bids markets capitalize best prices. (The best prices minima
buying maxima selling.) Hence, suffices agents model future prices
markets predict best prices (conditioned current prices). is,
suffices consider one stochastic pricing model. information necessary.
established suffices RoxyBot pose solve two-stage, rather
n-stage, stochastic optimization problem, proceed define abstract series
problems designed capture essence bidding uncertainty
TAC-like hybrid markets incorporate aspects simultaneous sequential, one-shot
continuously-clearing, auctions. specifically, formulate problems twostage stochastic programs integer recourse (see book Birge & Louveaux, 1997,
introduction stochastic programming).
two-stage stochastic program, two decision-making stages, hence two
sets variables: first- second-stage variables. objective maximize sum
first-stage objectives (which depend first-stage variables) expected
value ensuing second-stage objectives (which depend first- secondstage variables). objective value second stage called recourse value,
second-stage variables integer-valued, stochastic program said
integer recourse.
high-level, bidding problem formulated two-stage stochastic program
follows: first stage, current prices known future prices uncertain,
bids selected; second stage, uncertainty resolved, goods exchanged.
objective maximize expected value second-stage objective, namely
sum inherent value final holdings profits earned, less first-stage costs.
Since second stage involves integer-valued decisions (the bidder decides goods
buy sell known prices), bidding problem one integer recourse.
section, formulate series bidding problems two-stage stochastic programs integer recourse, one tailored different type auction mechanism,
illustrating different type bidding decision. mechanisms study, inspired
TAC, one-shot continuously-clearing variants second-price pseudo-auctions.
former, bids placed first stage; latter, opportunity

530

fiRoxyBot-06

recourse. Ultimately, combine decision problems one unified problem
captures mean bidding uncertainty.
formal problem statements, rely following notation:
Variables:
Q1 multiset goods buy
Q2 multiset goods buy later
R1 multiset goods sell
R2 multiset goods sell later
Constants:
P 1 set current buyer pricelines
P 2 set future buyer pricelines
1 set current seller pricelines
2 set future seller pricelines
Note P 1 1 always known, whereas P 2 2 uncertain first stage
uncertainty resolved second stage.
Flight Bidding Problem agents task bidding flight auctions decide
many flights buy current prices later lowest future prices, given (known)
current prices stochastic model future prices. Although TAC units
flight sell price one time, state flight bidding problem
generally: allow different prices different units flight.
Definition 5.2 [Continuously-Clearing, Buying] Given set current buyer pricelines P 1
probability distribution f future buyer pricelines P 2 ,
FLT(f ) = max
EP 2 f
1
n
Q Z




max
v(Q1 Q2 ) Cost(Q1 , P 1 ) + Cost(Q1 Q2 , P 2 ) Cost(Q1 , P 2 )
2
n

Q Z



(11)

Note two cost terms referring future pricelines (Cost(, P 2 )). first
terms adds total cost goods bought first second stages.
second term subtracts cost goods bought first stage. construction
ensures that, agent buys k units good now, later purchases good incur
charges units (k + 1, k + 2, ...) goods future priceline.
Entertainment Bidding Problem Abstractly, entertainment buying problem
flight bidding problem. agent must decide many entertainment tickets
buy current prices later lowest future prices. entertainment selling
problem opposite buying problem. agent must decide many tickets
sell current prices later highest future prices.

531

fiGreenwald, Lee, & Naroditskiy

Definition 5.3 [Continuously-Clearing, Buying Selling] Given set current buyer
seller pricelines (P, )1 probability distribution f future buyer seller
pricelines (P, )2 ,

ENT(f ) = max E(P,)2 f
max v((Q1 Q2 ) (R1 R2 ))
Q1 ,R1 Zn
Q2 ,R2 Zn

Cost(Q1 , P 1 ) + Cost(Q1 Q2 , P 2 ) Cost(Q1 , P 2 )

+ Revenue(R1 , 1 ) + Revenue(R1 R2 , 2 ) Revenue(R1 , 2 )
(12)

subject Q1 R1 Q1 Q2 R1 R2 , (P, )2 .

constraints ensure agent sell units good buys.
Hotel Bidding Problem Hotel auctions close fixed times, unknown order.
Hence, iteration agents bidding cycle, one-shot auctions approximate
auctions well. Unlike continuous setup, decisions made
first second stages, one-shot setup, bids placed first stage;
second stage, winnings determined evaluated.
Definition 5.4 [One-Shot, Buying] Given probability distribution f future buyer
pricelines P 2 ,


(13)
HOT(f ) = max EP 2 f v(Buy( 1 , P 2 )) Cost(Buy( 1 , P 2 ), P 2 )
1 =h~b,0i

Hotel Bidding Problem, Selling Although possible agents sell
TAC hotel auctions, one could imagine analogous auction setup possible
sell goods well buy them.
Definition 5.5 [One-Shot, Buying Selling] Given probability distribution f
future buyer seller pricelines (P, )2 ,


max E(P,)2 f v(Buy( 1 , P 2 ) Sell( 1 , 2 )) Cost(Buy( 1 , P 2 ), P 2 ) + Revenue(Sell( 1 , 2 ), 2 )

1 =h~b,~
ai

(14)

1

2

1

2

2

subject Buy( , P ) Sell( , ), (P, ) .

Bidding Problem Finally, present (a slight generalization of) TAC bidding problem combining four previous stochastic optimization problems one. abstract
problem models bidding buy sell goods via continuously-clearing one-shot
second-price pseudo-auctions, follows:
Definition 5.6 [Bidding Uncertainty] Given set current buyer seller pricelines (P, )1 probability distribution f future buyer seller pricelines (P, )2 ,
BID(f ) =
max

Q1 ,R1 Zn , 1 =h~b,~
ai

E(P,)2 f



max

Q2 ,R2 Zn

v((Q1 Q2 ) (R1 R2 ) Buy( 1 , P 2 ) Sell( 1 , P 2 ))


Cost(Q1 , P 1 ) + Cost(Q1 Q2 , P 2 ) Cost(Q1 , P 2 ) + Cost(Buy( 1 , P 2 ), P 2 )


+ Revenue(R1 , 1 ) + Revenue(R1 R2 , 2 ) Revenue(R1 , 2 ) + Revenue(Sell( 1 , 2 ), 2 )
(15)
532

fiRoxyBot-06

subject Q1 R1 Q1 Q2 R1 R2 Buy( 1 , P 2 ) Sell( 1 , 2 ), (P, )2 .

again, bidding problem (i) stochastic: takes input stochastic model
future prices; (ii) global: seamlessly integrates flight, hotel, entertainment bidding
decisions; (iii) dynamic: facilitates simultaneous reasoning current future
stages game.
Next, describe various heuristic approaches solving problem bidding
uncertainty.
5.3 Bidding Heuristics
section, discuss two heuristic solutions bidding problem: specifically,
expected value method (EVM), approach collapses stochastic information,
sample average approximation (SAA), approach exploits stochastic information
characterizes RoxyBot-06.
5.3.1 Expected Value Method
expected value method (Birge & Louveaux, 1997) standard way approximating
solution stochastic optimization problem. First, given distribution collapsed
point estimate (e.g., mean); then, solution corresponding deterministic optimization problem output approximate solution original stochastic
optimization problem. Applying idea problem bidding uncertainty
yields:
Definition 5.7 [Expected Value Method] Given probability distribution f buyer
seller pricelines, expected values P 2 2 , respectively,
BID EVM(P 2 , 2 ) =
max

Q1 ,R1 Zn , 1 =h~b,~
ai,Q2 ,R2 Zn

v((Q1 Q2 ) (R1 R2 ) (Buy( 1 , P 2 ) Sell( 1 , P 2 ))


Cost(Q1 , P 1 ) + Cost(Q1 Q2 , P 2 ) Cost(Q1 , P 2 ) + Cost(Buy( 1 , P 2 ), P 2 )


+ Revenue(R1 , 1 ) + Revenue(R1 R2 , 2 ) Revenue(R1 , 2 ) + Revenue(Sell( 1 , 2 ), 2 )
(16)
subject Q1 R1 Q1 Q2 R1 R2 .

practice, without full knowledge distribution f , cannot implement
expected value method; particular, cannot compute P 2 2 cannot solve
BID EVM(P 2 , 2 ) exactly. can, however, solve approximation problem
expected buyer seller pricelines P 2 2 replaced average scenario
(P 2 , 2 ) (i.e., average buyer seller pricelines), defined follows:
P 2 =


1X 2
Pi ,


2 =

i=1


1X 2
.

i=1

533

fiGreenwald, Lee, & Naroditskiy

Algorithm 5 EVM(G, N, f, S)
1: sample scenarios (P, )21 , . . . , (P, )2S f
P

PS

2
2,
2: BID EVM

P
i=1
i=1
3: return
5.3.2 Sample Average Approximation
expected value method, sample average approximation intuitive way approximating solution stochastic optimization problem. idea simple: (i) generate
set sample scenarios, (ii) solve approximation problem incorporates
sample scenarios. Applying SAA heuristic (see Algorithm 6) involves solving
following approximation bidding problem:
Definition 5.8 [Sample Average Approximation] Given set scenarios,
(P, )21 , . . . , (P, )2S f ,
BID SAA((P, )21 , . . . , (P, )2S ) =
max


X

max

v((Q1 Q2 ) (R1 R2 ) (Buy( 1 , Pi2 ) Sell( 1 , Pi2 ))

2
2
n
Q1 ,R1 Zn , 1 =h~b,~
ai i=1 Q ,R Z
1
1
1


Cost(Q , P ) + Cost(Q Q2 , Pi2 ) Cost(Q1 , Pi2 ) + Cost(Buy( 1 , Pi2 ), Pi2 )


+ Revenue(R1 , 1 ) + Revenue(R1 R2 , 2i ) Revenue(R1 , 2i ) + Revenue(Sell( 1 , 2i ), 2i )
(17)
subject Q1 R1 Q1 Q2 R1 R2 .

Algorithm 6 SAA(G, N, f, S)
1: sample scenarios (P, )21 , . . . , (P, )2S f
2: BID SAA((P, )21 , . . . , (P, )2S )
3: return
Using theory large deviations, Ahmed Shapiro (2002) establish following
result: , probability optimal solution sample average approximation stochastic program integer recourse optimal solution original
stochastic optimization problem approaches 1 exponentially fast. Given hard time space
constraints, however, always possible sample sufficiently many scenarios infer
reasonable guarantees quality solution sample average approximation. Hence, propose modified SAA heuristic, SAA fed tailor-made
important scenarios, apply idea bidding problem.
5.3.3 Modified Sample Average Approximation
bids SAA places sample prices appear scenarios. SAA never bids
higher good highest sampled price, far knows, bidding
price enough win good scenarios. However, chance
534

fiRoxyBot-06

highest sampled price falls clearing price. Let us compute probability
case single-unit auction, uniform-price multi-unit auction: i.e., one
units good auctioned clear price.
Let F denote cumulative distribution function predicted prices, let f denote
corresponding density function, let G denote cumulative distribution function
clearing prices. Using notation, term 1 G(x) probability
clearing price greater x. Further, let X random variable represents
highest value among sample price predictions. P (X x) = F (x)S
probability samples (and hence highest among them) less x;
P (X = x) = (F (x)S ) = S(F (x))S1 f (x) probability highest value among
samples equals x. Putting two terms togethernamely, probability
highest sample price prediction exactly x, probability clearing price greater
xwe express probability highest SAAs sample price predictions less
clearing price follows:
Z

S(F (x))S1 f (x)(1 G(x))dx
(18)



Assuming perfect prediction (so G = F ), complex expression simplies follows:
Z
S(F (x))S1 f (x)(1 F (x))dx

Z
Z
S1
(F (x))S f (x)dx
(F (x))
f (x)dx
=






(F (x))S
(F (x))S+1
=


S+1


1
=
S+1
Hence, probability SAAs sample price predictions less clearing
price 1/(S + 1). particular, assuming perfect prediction clearing prices
TAC hotel auctions independent, probability SAA agent 49 scenarios
bidding TAC Travel chance winning eight hotels (i.e., probability
sample price least one scenarios greater clearing price)
8

1
= 0.988 0.85.
1 49+1
remedy situation, designed implemented simple variant SAA
RoxyBot-06. SAA* heuristic (see Algorithm 7) close cousin SAA, difference
arising respective scenario sets.
P Whereas SAA samples scenarios, SAA* samples
|N | scenarios, |N | = g Ng . SAA* creates additional |N | scenarios
follows: unit k good g G, sets price kth unit good g
upper limit range possible prices and, conditioning price setting, sets
prices goods mean values. Next, describe experiments
test suite bidding heuristics, including SAA SAA*, controlled testing environment.

535

fiGreenwald, Lee, & Naroditskiy

Algorithm 7 SAA(G, N, f, S)
Require: |N |
1: hard-code |N | scenarios (P, )21 , . . . , (P, )2|N |
2: sample |N | scenarios (P, )2|N |+1 , . . . , (P, )2S f
3: BID SAA((P, )21 , . . . , (P, )2S )
4: return
Agent
SMU
AMU

Predictions
Average scenario
scenarios

TMU

TMU*

Average scenario
scenarios
Average scenario

BE*

scenarios

Bids
Marginal utilities
Calculates marginal utilities scenario
Bids average marginal utilities across scenarios
Marginal utilities
Best TMU solutions
Marginal utilities, assuming goods
target set available
Best TMU*solutions


goods
goods
Goods target set
Goods target set
Goods target set
Goods target set

Table 3: Marginal-utility-based agents. marginal utility good defined
incremental utility achieved winning good, relative
utility set goods already held.

5.4 Summary
section, developed series bidding problems, heuristics solutions
problems, captures essence bidding one-shot continuously-clearing
auctions characterize TAC. bulk presentation deliberately abstract,
suggest problems solutions applicable well beyond realm
TAC: e.g., bidding interdependent goods separate eBay auctions. Still, remains
validate approach application domains.

6. Experiments
close paper two sets experimental results, first controlled testing
environment, second results final round 2006 TAC Travel competition. combined strategy hotel price prediction via SimAA bid optimization
via SAA emerged victorious settings.
6.1 Controlled Experiments
extent least, approach bidding validated success
RoxyBot-06 TAC-06. Nonetheless, ran simulations controlled testing environment
validate approach. results reported Lee (2007) Greenwald et
al. (2008), summarize well.

536

fiRoxyBot-06

built test suite agents, predict using RoxyBot-06s SimAA random
mechanism distribution. agents differ bidding strategies; possibilities
include SAA,8 SAA*, six marginal-utility-based heuristics studied Wellman et
al. (2007), summarized Table 3.
experiments conducted TAC Travel-like setting, modified remove
aspects game would obscure controlled study bidding. Specifically,
eliminated flight entertainment trading, endowed agents eight flights
eight flights day. Further, assumed hotels closed one round
bidding (i.e., hotel auctions one-shot, ensuing bid optimization problem
adheres Definition 5.4).
designed two sets experiments: one decision-theoretic one game-theoretic.
former, hotel clearing prices outcome simulation simultaneous ascending
auctions, depend actual clients game, random sampling. (Our
simulator informed individual agents.) latter, hotel clearing prices
determined bids agents submit using mechanism TAC Travel:
clearing price 16th highest bid (or zero, fewer 16 bids submitted).
first ran experiments 8 agents per game, found hotel prices
often zero: i.e., insufficient competition. changed setup include
random number agents drawn binomial distribution n = 32 p = 0.5,
requisite number agents sampled uniformly replacement set possible
agents. agents first sample number competitors binomial distribution,
generate scenarios assuming sampled number competitors.
game-theoretic nature TAC, individual agents performance
depend heavily agents included agent pool. experiments,
attempted mitigate artificial effects specific agents chose include
pool sampling agents pool play game, replacement. Thus,
agents average score games measure agents performance
various combinations opponents.
Figures 3(a) 3(b), plot mean scores obtained agent type
setting, along 95% confidence intervals. averages computed based 1000
independent observations, obtained playing 1000 games. Scores averaged across
agent types game account game dependencies. SAAB SAAT9
best performing agents game-theoretic experiments among best
decision-theoretic setting.
6.2 TAC 2006 Competition Results
Table 4 lists agents entered TAC-06 Table 5 summarizes outcome.
TAC-06 finals comprised 165 games three days, 80 games last day
weighted 1.5 times much 85 first two days. first day finals,
RoxyBot finished third, behind Mertacor Walverinethe top scorers 2005. happens,
RoxyBots optimization routine, designed stochastic hotel entertainment
8. particular implementation details explaining RoxyBot-06 applied SAA TAC domain
relegated Appendix A.
9. SAAB SAA, SAAT slight variant SAA*. See paper Greenwald et al. (2008)
details.

537

fiGreenwald, Lee, & Naroditskiy

1

0.85

0.95
Score (thousands)

Score (thousands)

0.8
0.75
0.7
0.65
0.6

0.9
0.85
0.8
0.75
0.7

0.55
0.65
0.5
0.6
SAAT SAAB

TMU

TMU*

Agent

BE*

AMU

SMU

(a) Decision-theoretic setting

SAAT SAAB

TMU

TMU*

Agent

BE*

AMU

SMU

(b) Game-theoretic setting

Figure 3: Mean scores confidence intervals.

price predictions, accidentally fed deterministic predictions (i.e., point price estimates)
entertainment. Moreover, predictions fixed, rather adapted based
recent game history.
days 2 3, RoxyBot ran properly, basing bidding auctions stochastic
information. Moreover, agent upgraded day 1 bid flights once,
twice, minute. enabled agent delay bidding somewhat
end game flights whose prices decreasing. doubt minor modification
enabled RoxyBot emerge victorious 2006, edging Walverine whisker,
integer precision reported Table 5. actual margin 0.22a mere 22 parts
400,000. Adjusting control variates (Ross, 2002) spreads top two finishers bit
further.10
Agent
006
kin agent
L-Agent
Mertacor
RoxyBot
UTTA
Walverine
WhiteDolphin

Affiliation
Swedish Inst Comp Sci
U Macau
Carnegie Mellon U
Aristotle U Thessaloniki
Brown U
U Tehran
U Michigan
U Southampton

Reference
Aurell et al., 2002
Sardinha et al., 2005
Toulis et al., 2006; Kehagias et al., 2006
Greenwald et al., 2003, 2004, 2005; Lee et al., 2007
Cheng et al., 2005; Wellman et al., 2005
& Jennings, 2002; Vetsikas & Selman, 2002

Table 4: TAC-06 participants.

10. Kevin Lochner computed adjustment factors using method described Wellman et al. (2007,
ch. 8).

538

fiRoxyBot-06

Agent
RoxyBot
Walverine
WhiteDolphin
006
Mertacor
L-Agent
kin agent
UTTA

Finals
4032
4032
3936
3902
3880
3860
3725
2680

Adjustment Factor
5
17
2
27
16
7
0
14

Table 5: TAC-06 final scores, adjustment factors based control variates.

Mean scores, utilities, costs (with 95% confidence intervals) last day
TAC-06 finals (80 games) plotted Figure 4 detailed statistics tabulated
Table 6. single metric low hotel flight costs responsible
RoxyBots success. Rather success derives right balance contradictory goals.
particular, RoxyBot incurs high hotel mid-range flight costs achieving mid-range
trip penalty high event profit.11
Let us compare RoxyBot two closest rivals: Walverine WhiteDolphin. Comparing
Walverine first, Walverine bids lower prices (by 55) fewer hotels (49 less), yet wins (0.8)
wastes less (0.42). would appear Walverines hotel bidding strategy outperforms
RoxyBots, except RoxyBot earns higher hotel bonus (15 more). RoxyBot gains
advantage spending 40 less flights earning 24 total entertainment profit.
different competition takes place RoxyBot WhiteDolphin. WhiteDolphin
bids lower prices (120 less) hotels (by 52) RoxyBot. RoxyBot spends much
(220) hotels WhiteDolphin makes earning higher hotel bonus (by
96) lower trip penalty (by 153). seems WhiteDolphins strategy minimize
costs even means sacrificing utility.
6.3 Summary
already noted, TAC Travel bidding, viewed optimization problem, n-stage
decision problem. solve n-stage decision problem sequence 2-stage decision
problems. controlled experiments reported section establish bidding
strategy, SAA, best test suite setting designed,
2 stages. TAC competition results establish strategy effective
n-stage setting.

7. Collective Behavior
hotel price prediction techniques described Section 4.2 designed compute (or
least approximate) competitive equilibrium prices without full knowledge client pop11. agent suffers trip penalties extent assigns clients packages differ
preferred.

539

fiGreenwald, Lee, & Naroditskiy

# Hotel Bids
Average Hotel Bids
# Hotels
Hotel Costs
# Unused Hotels
Hotel Bonus
Trip Penalty
Flight Costs
Event Profits
Event Bonus
Total Event Profits
Average Utility
Average Cost
Average Score

Rox
130
170
15.99
1102
2.24
613
296
4615
110
1470
1580
9787
5608
4179

Wal
81
115
16.79
1065
1.82
598
281
4655
26
1530
1556
9847
5693
4154

Whi
182
50
23.21
882
9.48
517
449
4592
6
1529
1535
9597
5468
4130

SIC
33
513
13.68
1031
0.49
617
340
4729
-6
1498
1492
9775
5765
4010

Mer
94
147
18.44
902
4.86
590
380
4834
123
1369
1492
9579
5628
3951

L-A
58
88
14.89
987
1.89
592
388
4525
-93
1399
1306
9604
5605
3999

kin
15
356
15.05
1185
0.00
601
145
4867
-162
1619
1457
10075
6213
3862

UTT
24
498
9.39
786
0.48
424
213
3199
-4
996
992
6607
3989
2618

Table 6: 2006 Finals, Last day. Tabulated Statistics. omit first two days
agents vary across days, cannot vary within. Presumably, entries
last day teams preferred versions agents.
2006 Finals, Last Day

2006 Finals, Last Day

2006 Finals, Last Day

4.5

6.5

10

6

3.5
3

9
8
7

2.5

6

2

5

Rox Wal Whi SIC Mer LA kin UTT
Agent

Cost (thousands)

Utility (thousands)

Score (thousands)

4

5.5
5
4.5
4
3.5

Rox Wal Whi SIC Mer LA kin UTT
Agent

3

Rox Wal Whi SIC Mer LA kin UTT
Agent

Figure 4: 2006 Finals, Last day. Mean scores, utilities, costs, 95% confidence
intervals.

ulation. section, assume knowledge view output tatonnement
SimAA calculations predictions ground truth. compare actual
prices final games ground truth respective years since 2002 determine
whether TAC market prices resemble CE prices. find depicted Figure 5.
nature methods, calculations pertain hotel prices only.
results highly correlated metrics (Euclidean distance EVPP).
observe accuracy CE price calculations varied year year. 2003
year TAC Supply Chain Management (SCM) introduced. Many
participants diverted attention away Travel towards SCM year, perhaps
leading degraded performance Travel. Things seem improve 2004 2005.

540

fiRoxyBot-06

cannot explain setback 2006, except noting performance highly dependent
particular agent pool, 2006 fewer agents pool.
260

45

tatonnement, exact
simAA, exact
Expected Value Perfect Prediction

240

Euclidean Distance

220
200
180
160
140
120
100
2002

2003

2004
Year

2005

2006

tatonnement, exact
simAA, expact

40

35

30

25

20
2002

2003

2004
Year

2005

2006

Figure 5: comparison actual (hotel) prices output competitive equilibrium
price calculations final games since 2002. label exact means: full
knowledge client population.

8. Conclusion
foremost aim trading agent research develop body techniques effective
design analysis trading agents. Contributions trading agent design include
invention trading strategies, together models algorithms realizing
computation methods measure evaluate performance agents characterized
strategies. Researchers seek specific solutions particular trading problems
general principles guide development trading agents across market scenarios.
paper purports contribute research agenda. described design
implementation RoxyBot-06, able trading agent demonstrated performance
TAC-06.
Although automated trading electronic markets yet fully taken hold,
trend well underway. TAC, trading agent community demonstrating
potential autonomous bidders make pivotal trading decisions effective way.
agents offer potential accelerate automation trading broadly,
thus shape future commerce.

Acknowledgments
paper extends work Lee et al. (2007). material Section 5.1 based
book Wellman et al. (2007). grateful several anonymous reviewers whose
constructive criticisms enhanced quality work. research supported
NSF Career Grant #IIS-0133689.

541

fiGreenwald, Lee, & Naroditskiy

Appendix A. TAC Bidding Problem: SAA
problem bidding simultaneous auctions characterize TAC formulated two-stage stochastic program. appendix, present implementation
details integer linear program (ILP) encoded RoxyBot-06 approximates
optimal solution stochastic program.12
formulate ILP assuming current prices known, future prices uncertain first stage revealed second stage. Note whenever prices
known, suffices agent make decisions quantity good buy,
rather bid amounts, since choosing bid amount greater
equal price good equivalent decision buy good.
Unlike main body paper, ILP formulation bidding TAC assumes
linear prices. Table 7 lists price constants decision variables auction type.
hotels, decisions pertain buy offers; flights, agent decides many
tickets buy many buy later; entertainment events, agent chooses
sell quantities well buy quantities.
Hotels
bid

Price
Yas

Flights Events
buy
buy later
Events
sell
sell later

Variable (bid)
apq
Price

Yas

Price
Na
Zas

Variable (qty)



Variable (qty)



Table 7: Auction types associated price constants decision variables.

A.1 Index Sets
indexes set goods, auctions.
af Af indexes set flight auctions.
ah Ah indexes set hotel auctions.
ae Ae indexes set event auctions.
c C indexes set clients.
p P indexes set prices.
12. precise formulation RoxyBot-06s bidding ILP appears paper Lee et al. (2007).
formulation slightly simplified, expect would perform comparably TAC. key
differences flight entertainment bidding.

542

fiRoxyBot-06

q Q indexes set quantities
(i.e., units good auction).
indexes set scenarios.
indexes set trips.
A.2 Constants
Gat indicates quantity good required complete trip t.
indicates current buy price af , ae .
Na indicates current sell price ae .
Yas indicates future buy price af , ah , ae scenario s.
Zas indicates future sell price ae scenario s.
Ha indicates hypothetical quantity hotel ah .
Oa indicates quantity good agent owns.
Uct indicates client cs value trip t.
A.3 Decision Variables
= {cst } set boolean variables indicating whether client c allocated
trip scenario s.
= {apq } set boolean variables indicating whether bid price p qth
unit ah .
= {a } set integer variables indicating many units af , ae buy now.
N = {a } set integer variables indicating many units ae sell now.
= {as } set integer variables indicating many units af , ae buy later
scenario s.
Z = {as } set integer variables indicating many units ae sell later
scenario s.
A.4 Objective Function


flight cost

current}| future {
hotel cost
z }| {
z X }|
{
X z }| { z }| {
X
X


+ Yas
Uct cts
Yas apq +
max


,,M,N,Y,Z
Af
Ah ,Q,pYas
C,T
trip value

z

543

(19)

fiGreenwald, Lee, & Naroditskiy


event revenue
event cost
}|
{ z
z
}|
{
current
future
future
current

z
}|
{
z
z
}|
{
}|
{
}| {
z
X


Na + Zas Yas


Ae

A.5 Constraints
X

cst 1 c C,

(20)



allocation

buy

z }| { z}|{
z }| {
X
cst Gat Oa + (a + )

Af ,

(21)

Ah ,

(22)

C,T

buy

allocation


z }| { z}|{
z X}|
{
X
cst Gat Oa +
apq
C,T

Q,pYas

allocation


sell

buy
z }| { z}|{
z }| {
X
z }| {
cst Gat Oa + + +
C,T

Ae ,

X

apq Ha

(23)

Ah

(24)

apq 1 Ah , q Q

(25)

P,Q

X
P

Equation (20) limits client one trip scenario. Equation (21) prevents
agent allocating flights buy. Equation (22) prevents agent
allocating hotels buy. Equation (23) prevents agent
allocating event tickets buy sell. Equation (24) ensures
agent bids least HQW units hotel auction. Equation (25) prevents agent
placing one buy offer per unit hotel auction.
agent might constrained place sell offers units good
owns, and/or place buy (sell) offers units good
market supplies (demands).
Note need explicitly enforce bid monotonicity constraints
ILP formulation:
Buy offers must nonincreasing k, sell offers nondecreasing.
ILP need constraint prices assumed linear.
effect, decisions ILP makes many units good bid
on. Hence, bids (10, 15, 20) (20, 15, 10) equivalent.
agent may offer sell less price willing buy.
544

fiRoxyBot-06

ILP would choose place buy offer sell offer good
buy price good exceeds sell price, would unprofitable.

References
Ahmed, S., & Shapiro, A. (2002). sample average approximation method
stochastic programs integer recourse. Optimization Online, http://www.
optimization-online.org.
Arunachalam, R., & Sadeh, N. M. (2005). supply chain trading agent competition.
Electronic Commerce Research Applications, 4 (1), 6684.
Aurell, E., Boman, M., Carlsson, M., Eriksson, J., Finne, N., Janson, S., Kreuger, P., &
Rasmusson, L. (2002). trading agent built constraint programming. Eighth
International Conference Society Computational Economics: Computing
Economics Finance, Aix-en-Provence.
Birge, J., & Louveaux, F. (1997). Introduction Stochastic Programming. Springer, New
York.
Cai, K., Gerding, E., McBurney, P., Niu, J., Parsons, S., & S.Phelps (2009). Overview
CAT: market design competition. Tech. rep. ULCS-09-005, University Liverpool.
Cheng, S., Leung, E., Lochner, K., K.OMalley, Reeves, D., Schvartzman, L., & Wellman,
M. (2003). Walverine: Walrasian trading agent. Proceedings Second
International Joint Conference Autonomous Agents Multi-Agent Systems, pp.
465472.
Cheng, S., Leung, E., Lochner, K., K.OMalley, Reeves, D., Schvartzman, L., & Wellman,
M. (2005). Walverine: Walrasian trading agent. Decision Support Systems, 39 (2),
169184.
Cramton, P. (2006). Simultaneous ascending auctions. Cramton, P., Shoham, Y., &
Steinberg, R. (Eds.), Combinatorial Auctions. MIT Press.
Fritschi, C., & Dorer, K. (2002). Agent-oriented software engineering successful TAC participation. Proceedings First International Joint Conference Autonomous
Agents Multiagent Systems, pp. 4546.
Greenwald, A. (2003). Bidding marginal utility simultaneous auctions. Workshop
Trading Agent Design Analysis.
Greenwald, A., & Boyan, J. (2004). Bidding uncertainty: Theory experiments.
Proceedings 20th Conference Uncertainty Artificial Intelligence, pp.
209216.
Greenwald, A., Naroditskiy, V., & Lee, S. (2008). Bidding heuristics simultaneous
auctions: Lessons tac travel. Workshop Trading Agent Design Analysis.
Greenwald, A., & Boyan, J. (2005). Bidding algorithms simultaneous auctions: case
study. Journal Autonomous Agents Multiagent Systems, 10 (1), 6789.
He, M., & Jennings, N. (2002). SouthamptonTAC: Designing successful trading agent.
Proceedings Fifteenth European Conference Artificial Intelligence, pp. 812.
545

fiGreenwald, Lee, & Naroditskiy

Jordan, P. R., & Wellman, M. P. (2009). Designing ad auctions game trading
agent competition. Workshop Trading Agent Design Analysis.
Kehagias, D., Toulis, P., & Mitkas, P. (2006). long-term profit seeking strategy continuous double auctions trading agent competition. Fourth Hellenic Conference
Artificial Intelligence, Heraklion.
Krishna, V. (2002). Auction Theory. Academic Press.
Lee, S. J. (2007). Comparison bidding algorithms simultaneous auctions. B.S. honors thesis, Brown University, http://list.cs.brown.edu/publications/theses/
ugrad/.
Lee, S., Greenwald, A., & Naroditskiy, V. (2007). Roxybot-06: (SAA)2 TAC travel agent.
Proceedings 20th International Joint Conference Artificial Intelligence,
pp. 13781383.
Ross, S. M. (2002). Simulation (Third edition). Academic Press.
Sardinha, J. A. R. P., Milidiu, R. L., Paranhos, P. M., Cunha, P. M., & de Lucena, C.
J. P. (2005). agent based architecture highly competitive electronic markets.
Proceedings Eighteenth International Florida Artificial Intelligence Research
Society Conference, Clearwater Beach, Florida, USA, pp. 326332.
Toulis, P., Kehagias, D., & Mitkas, P. (2006). Mertacor: successful autonomous trading
agent. Fifth International Joint Conference Autonomous Agents Multiagent
Systems, pp. 11911198, Hakodate.
Vetsikas, I., & Selman, B. (2002). WhiteBear: empirical study design tradeoffs autonomous trading agents. Workshop Game-Theoretic Decision-Theoretic Agents.
Vickrey, W. (1961). Counterspeculation, auctions, competitive sealed tenders. Journal
Finance, 16, 837.
Walras, L. (1874). Elements deconomie politique pure. L. Corbaz, Lausanne.
Wellman, M. P., Greenwald, A., & Stone, P. (2007). Autonomous Bidding Agents: Strategies
Lessons Trading Agent Competition. MIT Press.
Wellman, M. P., Reeves, D. M., Lochner, K. M., & Suri, R. (2005). Searching Walverine
2005. Workshop Trading Agent Design Analysis, No. 3937 Lecture Notes
Artificial Intelligence, pp. 157170. Springer.
Wellman, M., Reeves, D., Lochner, K., & Vorobeychik, Y. (2004). Price prediction
Trading Agent Competition. Artificial Intelligence Research, 21, 1936.

546


