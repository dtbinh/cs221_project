Journal Artificial Intelligence Research 35 (2009) 533-555

Submitted 12/08; published 07/09

Solving Weighted Constraint Satisfaction Problems
Memetic/Exact Hybrid Algorithms
Jose E. Gallardo
Carlos Cotta
Antonio J. Fernandez

pepeg@lcc.uma.es
ccottap@lcc.uma.es
afdez@lcc.uma.es

Dept. Lenguajes Ciencias de la Computacion
Universidad de Malaga, ETSI Informatica
Campus de Teatinos, 29071 Malaga, Spain

Abstract
weighted constraint satisfaction problem (WCSP) constraint satisfaction problem
preferences among solutions expressed. Bucket elimination complete
technique commonly used solve kind constraint satisfaction problem.
memory required apply bucket elimination high, heuristic method based
(denominated mini-buckets) used calculate bounds optimal solution.
Nevertheless, curse dimensionality makes techniques impractical large scale
problems. response situation, present memetic algorithm WCSPs
bucket elimination used mechanism recombining solutions, providing
best possible child parental set. Subsequently, multi-level model
exact/metaheuristic hybrid hybridized branch-and-bound techniques
mini-buckets studied. case study, applied algorithms resolution
maximum density still life problem, hard constraint optimization problem based
Conways game life. resulting algorithm consistently finds optimal patterns
date solved instances less time current approaches. Moreover, shown
proposal provides new best known solutions large instances.

1. Introduction
Many real problems formulated constraint satisfaction problems (CSPs)
solutions assignments set variables (each variable taking values certain
domain), exists collection constraints restrict assignment
particular values combination values; solving CSP means finding feasible assignment
values variables, i.e., one constraints satisfied. However, wide range
problems cannot posed way, either problem over-constrained (and
thus solution) problem multiple solutions objective
find best one according optimality criterion. cases, problem might
handled optimization point view associating preferences constraints.
kind CSP preferences among constraints/solutions expressed
called weighted constraint satisfaction problems (WCSPs) (Schiex, Fargier, & Verfaillie,
1995; Bistarelli, Montanari, & Rossi, 1997). Solving WCSP means optimally satisfying
set weighted constraints. clearly enlarges scope CSPs: many practical
problems modeled WCSPs, instance, radio frequency assignment,
scheduling cellular manufacturing, among others (Cabon, de Givry, Lobjois, Schiex, &
Warners, 1999; Khemmoudj & Bennaceur, 2007; Nonobe & Ibaraki, 2001).
c
2009
AI Access Foundation. rights reserved.

fiGallardo, Cotta, & Fernandez

Complete methods, branch-and-bound (Lawler & Wood, 1966) bucket elimination (Dechter, 1999), technique originated early work Bertele
Brioschi (1972) nonserial dynamic programming, two popular ways
attack WCSPs. However, although picture CSP general, noted
inclusion preferences constraints makes particular WCSP specific
consequence WCSPs tackled using specialized algorithms
specifically designed (Freuder & Wallace, 1992; Verfaillie, Lematre, & Schiex, 1996;
Kask & Detcher, 2001; Lematre, Verfaillie, Bourreau, & Laburthe, 2001; Larrosa & Schiex,
2004; Gelain, Pini, Rossi, & Venable, 2007; Khemmoudj & Bennaceur, 2007; Marinescu
& Dechter, 2007). Moreover, general techniques require large computational effort
(in time, memory both) solve many WCSPs, due size complexity,
therefore impractical many cases. alleviated using heuristic methods,
e.g., beam search (BS) (Barr & Feigenbaum, 1981) mini-buckets (Dechter, 1997),
branch-and-bound bucket elimination respectively. However, large scale problems,
high computational cost still evident.
context use alternative techniques must considered overcome
limitations general techniques; instance, evolutionary algorithms (Back, 1996; Back,
Fogel, & Michalewicz, 1997) powerful heuristics optimization problems based
principles natural evolution, flexible enough deployed wide
range problems. However, generality reduces competitiveness, unless domain
knowledge incorporated. need exploiting domain knowledge optimization
methods repeatedly shown (Wolpert & Macready, 1997; Culberson, 1998),
memetic algorithms (Moscato & Cotta, 2003, 2007; Krasnogor & Smith, 2005) represent
one successful responses need (Hart, Krasnogor, & Smith, 2005).
paper explores different ways hybridizing branch-and-bound/bucket elimination (and
corresponding heuristic methods) memetic algorithms, combining search
capabilities synergetic way.
hybrid techniques proposed used general problem solvers WCSPs.
Note essentially heuristic nature hence cannot provide optimality
proofs solutions obtain. Notice however probably provide optimal
near-optimal solutions wide range WCSPs. Furthermore, hybrid techniques
less time-consuming general methods involved them, thus applied
larger problem instances. order experimentally evaluate hybrid techniques,
tackled Maximum Density Still Life Problem, hard combinatorial optimization problem prime example weighted constraint optimization problem.
polynomial-time algorithm known solve problem, although, best
knowledge, problem yet proven NP-hard. reasons,
surprising problem attracted interest constraint-programming
community, central development assessment sophisticated techniques bucket elimination. Indeed, constitutes excellent test bed different
optimization techniques, included CSPLib1 repository. web page2
keeps record up-to-date results.
1. http://www.csplib.org
2. http://www.ai.sri.com/~nysmith/life

534

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

2. Preliminaries
section, briefly introduce concepts techniques used rest
paper. end, first define weighted constraint satisfaction problems, well
techniques bucket elimination mini-buckets. Subsequently, describe beam
search, heuristic tree search algorithm derived branch-and-bound. Finally, memetic
algorithms presented. sake notational simplicity, appropriate stick
notation Larrosa et al. (2003, 2005).
2.1 Weighted Constraint Satisfaction Problems
weighted constraint satisfaction problem (WCSP) (Schiex et al., 1995; Bistarelli et al.,
1997) constraint satisfaction problem (CSP) preferences among solutions
expressed. Formally, WCSP defined tuple (X , D, F), = {D1 , , Dn }
set finite domains, X = {x1 , , xn } set variables taking values finite
domains (Di domain variable xi ) F set cost functions (also called soft
constraints weighted constraints) used declare preferences among possible solutions.
Variable correctly assigned receive finite costs express degree preference (the
lower value better preference) variables correctly assigned receive cost
. Note f F defined subset variables, var(f ) X , called
P scope.
objective function F defined sum functions F, i.e., F = f F f .
assignment value vi Di variable xi noted xi = vi . partial assignment
< n variables tuple = (xi1 = v1 , xi2 = v2 , , xim = vm ) ij {1, . . . , n}
different. complete assignment variables values domains
satisfies every soft constraint (i.e., finite valuation F ) represents solution
WCSP. optimization goal find solution minimizes objective function.
2.2 Bucket Elimination
Bucket elimination (BE) (Dechter, 1999) generic technique suitable many automated
reasoning optimization problems and, particular, solving WCSP. functioning
based upon following two operators functions (Larrosa et al., 2005):
sum two functions f g, denoted (f + g), new function scope
var(f )var(g) returns tuple sum costs f g, i.e., (f +g)(t) =
f (t) + g(t).
elimination variable xi f , denoted f xi , new function scope
var(f ) {xi } returns tuple minimum cost extension xi ,
(f xi )(t) = minvDi {f (t (xi = v))}, (xi = v) means extension
assignment assignment value v variable xi . Observe f
unary function (i.e., arity one), constant obtained upon elimination
variable scope.
Without losing generality, let us assume lexicographic ordering variables
X , i.e., = (x1 , x2 , , xn ). Figure 1 shows pseudo-code algorithm solving
WCSP instance, returns optimal cost F one optimal assignment
535

fiGallardo, Cotta, & Fernandez

Bucket Elimination WCSP (X , D, F )
1:
2:
3:
4:
5:
6:
7:
8:
9:
10 :
11 :

function BE(X , D, F)
:= n downto 1
Bi := {f
P F | xi var(f )}
gi := (
f Bi f ) xi
F := (F {gi }) Bi
end
:=
:= 1 n P
v := argminaDi {( f Bi f )(t (xi = a))}
:= (xi = v)
end
return(F, t)
end function

Figure 1: general template, adapted Larrosa Morancho (2003), bucket
elimination WCSP (X , D, F ).

t. Observe that, initially, eliminates decreasing order one variable xi X
iteration loop comprising lines 1-5. done computing firstly bucket Bi
variable xi set cost functions F xi scope. Then, new function
gi defined sum functions Bi variable xi eliminated.
Finally, F updated removing functions involving xi (i.e., Bi ) adding
new function contain xi . consequence xi exist F
value optimal cost preserved. elimination x1 produces function
empty scope (i.e., constant) optimal cost problem. Then,
lines 6-10, generates optimal assignment variables considering order
imposed o: done starting empty assignment assigning xi
best value extension t, respect sum functions Bi (argmina {f (a)}
represents value producing minimum f (a)).
Note exponential space complexity because, general, result summing functions eliminating variables cannot expressed intensionally algebraic expressions and, consequence, intermediate results collected extensionally
tables. precise, complexity depends problem structure (as captured
constraint graph G) ordering o. According Larrosa Morancho (2003),


complexity along ordering time (Q n dw (o)+1 ) space (n dw (o) ),
largest domain size, Q cost evaluating cost functions (usually assumed (1)), w (o) induced width graph along ordering o, describes
largest clique created graph bucket elimination, corresponds
largest scope function recorded algorithm. Although finding optimal
ordering NP-hard (Arnborg, 1985), heuristics approximation algorithms
developed task check work Dechter (1999) details.
536

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

2.3 Mini-Buckets
main drawback requires exponential space store functions extensionally. complexity high, solution approximated using
mini-bucket (MB) approach presented Dechter (1997) Detcher Rish (2003). Recall that, order eliminate variable xi ,
P corresponding bucket Bi = {fi1 , . . . , fim },
calculates new cost function gi = ( f Bi f ) xi , whose time space complexity increases cardinality gi , i.e., size set f Bi var(f ) {xi }.
complexity decreased approximating function gi set smallerarity functions. basic idea partition bucket Bi k called mini-buckets
Bi1 , . . . , Bik , number variables scope Bij bounded
parameter. Afterwards,
set k cost functions reduced arity sought
P
defined gij = ( f Bi f ) xi , j = 1 . . . k, required approximation gi
j
P
P
P
computed sum gi0 = 16j6k gij = 16j6k (( f Bi f ) xi ).
j
Note minimization computed gi operator migrated inside
sum. Since, general, two non-negative functions f1 (x) f2 (x), minx (f1 (x)+
f2 (x)) > minx f1 (x) + minx f2 (x), follows gi0 lower bound gi . Therefore,
variable elimination performed using approximated cost functions, provides lower
bound optimal cost requiring less computation BE. Notice described
approach provides family under-estimating heuristic functions whose complexity
accuracy parameterized maximum number variables allowed mini-bucket.
2.4 Beam Search
Branch-and-bound (BB) (Lawler & Wood, 1966) general tree search method solving
combinatorial optimization problems. Tree search methods constructive, sense
work partial solutions. way, tree search methods start empty
solution incrementally extended adding components it. way partial
solutions extended depends constraints imposed problem solved.
solution construction mechanism maps search space tree structure,
way path root tree leaf node corresponds construction
solution. order efficiently explore search tree, BB algorithms maintain
upper bound estimate lower bounds partially constructed solutions. Assuming
minimization problem, upper bound corresponds cost best solution found
far. search process, lower bound computed partial solution
generated, estimating cost best solution constructed extending
it. lower bound greater current upper bound, solutions constructed
extending lead improvement, thus nodes descending
pruned search tree. Clearly, capability algorithm pruning
search tree depends existence accurate lower bound,
computationally inexpensive order practical.
Beam search (BS) (Barr & Feigenbaum, 1981) algorithms incomplete derivates BB
algorithms, thus heuristic methods. Essentially, BS works extending every partial
solution set B (called beam) kext possible ways. new partial
solution generated stored set B. solutions B processed,
algorithm constructs new beam selecting best kbw (called beam width)
537

fiGallardo, Cotta, & Fernandez

solutions B. Clearly, way estimating quality partial solutions,
lower bound, needed this.
interesting peculiarity BS way extends parallel set different partial
solutions several possible ways, making particularly suitable tree search method
used hybrid collaborative framework (it used provide periodically promising partial solutions population-based search method memetic algorithm).
Gallardo, Cotta, Fernandez (2007) shown kind hybrid algorithms
provide excellent results combinatorial optimization problems. subsequently present hybrid tree search/memetic algorithm WCSPs based idea.
2.5 Memetic Algorithms
Evolutionary algorithms (EAs) population-based metaheuristic optimization methods
inspired biological evolution (Back et al., 1997). order explore search space,
EA maintains set solutions known population individuals. usually
randomly initialized across search space, although heuristics may used.
initialization, three different phases iteratively performed termination condition
reached: selection, reproduction (which encompasses recombination mutation)
replacement. context EAs, objective function assigning values solution
termed fitness function, used guide search.
Note EAs black box optimization procedures sense knowledge
problem (apart fitness function) used. need exploit problemknowledge repeatedly shown (Wolpert & Macready, 1997; Culberson, 1998) however. Different attempts made answer need; Memetic algorithms (Moscato
& Cotta, 2003, 2007; Krasnogor & Smith, 2005) (MAs) one successful approaches date (Hart et al., 2005). EAs, MAs population based metaheuristics. main difference components population (sometimes termed
agents terminology) passive entities. Rather, active entities
cooperate compete order find improved solutions.
many possible ways implement MAs. common implementation
consists combining EA procedure perform local search
solutions population main generation loop (cf. Krasnogor & Smith, 2005).
Figure 2 shows general outline MA; pX , pm arity respectively refer
recombination probability, mutation probability recombination arity i.e., number
parents involved recombination. must noted however paradigm
simply reduce particular scheme different places (e.g.,
population initialization, genotype phenotype mapping, evolutionary operators, etc.)
problem specific knowledge incorporated. work, addition using
tabu search (Glover, 1989, 1990) (TS) local search procedure within MA,
designed intelligent recombination operator uses relaxation bucket elimination
order find best solution constructed set parents without
introducing implicit mutation (i.e., exogenous information).
538

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

Memetic Algorithm
1:
2:
3:
4:
5:
6:
7:
8:
9:
10 :
11 :
12 :
13 :
14 :
15 :
16 :
17 :
18 :
19 :
20 :
21 :
22 :
23 :

function (pX , pm , arity)
:= 1 popsize
pop[i] := Random solution(n)
pop[i] := Local Search(pop[i])
Evaluate(pop[i])
end
timeout
:= 1 offsize
recombination performed (under pX )
j := 1 arity
parentj := Select(pop)
end
offspring[i ] := Recombine(parent1 , parent2 , . . . , parentarity )
else
offspring[i ] := Select(pop)
end
mutation performed (under pm )
offspring[i ] := Mutate(offspring[i ])
end
offspring[i ] := Local Search(offspring[i ])
Evaluate(offspring[i ])
end
pop := Replace(pop, offspring)
end

Figure 2: Pseudo code memetic algorithm (MA). Although different variants possible respect scheme, broadly captures typical algorithmic structure
MAs.

3. Multi-Level Memetic/Exact Hybrid Algorithm WCSPs
WCSPs suitable tackled evolutionary metaheuristics. Obviously,
quality results greatly depend well knowledge problem
incorporated search mechanism. final goal present algorithmic model
based hybridization MAs exact techniques two levels: within (as
embedded operator), outside (in cooperative model). Firstly, focus
next subsection first level hybridization, incorporates exact technique
(namely BE) within embedded recombination operator. Subsequently,
proceed second level hybridization, cooperates branchand-bound based beam search algorithm uses technique mini-buckets
lower bound (see Figure 3).
539

fiGallardo, Cotta, & Fernandez



Promising Regions

BS
GA
TS
Local
Search



MB

Crossover

Lower
Bound

Upper Bound

Figure 3: Schematic description proposed hybrid algorithm.
3.1 Optimal recombination
previously mentioned, one phases constitutes typical recombination
(i.e., lines 9-14 Figure 2), individuals population combined
aim obtaining improved individuals. purpose, different standard recombination operators proposed literature (see Back et al., 1997). Although
blind operators feasible computational point view, would perform poorly,
problem knowledge used. context WCSPs, resort
order achieve sensible recombination information.
Even though performance exact method resolution WCSPs
may better basic search-based approaches, corresponding time space complexity still high, making technique unsuitable large instances.
following, explain used implement intelligent recombination operator WCSPs. operator implicitly explore possible children solutions
recombined, providing best solution constructed without introducing
implicit mutation, i.e., exogenous information (cf. Cotta & Troya, 2003). Note
use bucket elimination related usually referred Large Neighborhood
Search (Ahuja, Ergun, Orlin, & Punnen, 2002).
sake simplicity, let us assume variables WCSP (X , D, F )
domain (i.e., D1 = = Dn ), let x = (x1 , x2 , , xn ) = (y1 , y2 , , yn )
two solutions recombined, [zi ] value variable zi . operator calculate best solution obtained combining variables
x without introducing information present parents.
achieved restricting domain variables values appearing configurations recombined. recombination operator becomes BE(X , D, F),
= {[x1 ], , [xn ], [y1 ], , [yn ]}. Applying approach WCSP variables
may different domains would require previously separating set variables X
subsets variables sharing domain.
3.2 Beam Search/MA Hybrid Algorithm
subsection, describe hybrid tree search/memetic algorithm WCSPs.
algorithm combines, collaborative way (Puchinger & Raidl, 2005), BS algorithm
MA. noted previously, BS works extending parallel set different partial solutions
several possible ways, thus used provide promising partial solutions
540

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

Hybrid algorithm WCSP
1:
2:
3:
4:
5:
6:
7:
8:
9:
10 :
11 :
12 :
13 :
14 :
15 :
16 :
17 :

function BS-MA (X , D, kbw , kM )
sol :=
B := { () }
:= 1 n
B0 := {}
B
Di
B 0 := B 0 {s (xi = a)}
end
end
B := select best kbw nodes B 0
(i > kM )
initialize population best popsize nodes B 0
run
sol := min (sol, solution)
end
end
return sol
end function
Figure 4: Hybrid algorithm WCSP.

population based search method MA. goal exploit capability BS
identifying potentially good regions search space, exploit
explore regions, synergistically combining two different approaches.
proposed hybrid algorithm, executes BS interleaved way,
depicted Figure 4. pseudo-code, (possibly partial) solution WCSP instance
represented vector variables = (x1 , x2 , . . . , xi ), 6 n, (xi = a) stands
extension partial solution assigning value i-th variable noted
previously. hybrid algorithm constructs search tree, leaves consist
complete solutions internal nodes level represent partially specified (up i-th
variable) solutions. tree heuristically traversed breadth first way using BS
algorithm beam width kbw (i.e., maintaining best kbw nodes level
tree). beam selection (line 10), heuristic quality measure defined
partial solutions, whose value must partial solution unfeasible. algorithm
starts (line 2) totally unspecified solution. Initially, BS part algorithm
executed. iteration BS (lines 3-17), new variable assigned every
solution beam (line 7). interleaved execution starts partial
solutions beam least kM variables (line 11). iteration BS,
best popsize solutions beam selected (using quality measure described above)
initialize population (line 12). Since partial solutions, must
first converted full solutions, e.g., completing remaining variables randomly.
541

fiGallardo, Cotta, & Fernandez

running MA, solution used update incumbent solution (sol),
process repeated search tree exhausted.
3.3 Computing Tight Bounds Mini-Buckets
performance BS component algorithm described previous section
depend quality heuristic function used estimate partial solutions (line
10 Figure 4). order compute tight, yet computationally inexpensive, lower bound
remanning part solution resort Mini-Buckets (MB). described
Kask Detcher (2001), intermediate functions created applying MB scheme
used general mechanism compute heuristic functions estimate best
cost yet unassigned variables partial solutions. end, MB must run
preprocessing stage, using reverse order search instantiate variables.
set augmented buckets computed process used estimations
best cost extension partial solutions (check work Kask & Detcher, 2001,
details).

4. Tackling Maximum Density Still Life Problem
Previously proposed algorithms general enough used many WCSPs
executed. section present application case study maximum
density still life problem (MDSLP). problem defined context game life
proposed John H. Conway 60s divulged Martin Gardner (Gardner, 1970),
let us first describe game. played infinite checkerboard
player places checkers squares. square board called cell
eight neighbors; eight cells share one two corners it. cell alive
checker it, dead otherwise. contents board evolve iteratively,
way state time determines state time + 1 according
simple rules: (1) live cell remains alive two three live neighbors, otherwise
dies, (2) dead cell becomes alive exactly three live neighbors.
simple rules game life nevertheless generate incredibly complex
dynamics. better understand MDSLP, let us define stable pattern (also called
still life) board configuration change time, let density
region percentage living cells. MDSLP nn grid consists finding still
life maximum density. Elkies (1998) shown that, infinite boards, maximum
density 1/2 (for finite size, exact formula known). paper, concerned
MDSLP finite patterns, is, finding maximal n n still lifes.
4.1 Related Work
MDSLP tackled literature using different approaches. Bosch Trick
(2002) compared different formulations MDSLP using integer programming (IP)
constraint programming (CP). best results obtained hybrid algorithm
mixing two approaches. able solve cases n = 14 n = 15
6 8 days CPU time respectively. Smith (2002) used pure constraint
programming approach address problem. However, instances n = 10
542

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

Table 1: Best experimental results reported Bosch Trick (2002) (CP/IP), Larrosa
Morancho (2003) (BE) Larrosa et al. (2005) (HYB-BE) solving
MDSLP. Time indicated seconds.

optimum
CP/IP

HYB-BE

12
68
11536
1638
1

13
79
12050
13788
2

14
92
5 105
105
2

15
106
7 105

16
120

17
137

18
153

19
171

20
190

58

7

1091

2029

56027

2 105

could solved. best results problem reported Larrosa Morancho
(2003) Larrosa et al. (2005), showing usefulness bucket elimination (BE),
exact technique based variable elimination commonly used solving constraint
satisfaction problems described detail Section 2.2. basic approach could solve
problem n = 14 105 seconds. improvements increased boundary
n = 20 twice much time. Recently, Cheng Yap (2005, 2006) tackled
problem via use ad-hoc global case constraints, results comparable
IP/CP hybrids, thus cannot compared ones obtained previously Larrosa
et al.
Table 1 summarizes experimental results current approaches used tackle MDSLP, reporting computational times hybrid IP/CP algorithm Bosch Trick
(2002), approach Larrosa Morancho (2003) BE/search hybrid
Larrosa et al. (2005). Although different computational platforms may used
experiments, trends clear give clear indication potential
different approaches. noted techniques applied MDSLP
exact approaches. inherently limited increasing problem sizes
capabilities anytime algorithms unclear. tackle problem, recently proposed
use hybrid methods combining exact metaheuristic approaches. considered
hybridization evolutionary algorithms (a stochastic population-based search
method) endowed tabu search (a local search method)(Gallardo, Cotta, & Fernandez,
2006a). resulting algorithm memetic algorithm (MA; see Section 2.5). used
mechanism recombining solutions, providing best possible child
parental set. Experimental tests indicated algorithm provided optimal nearoptimal results acceptable computational cost. Subsequently, studied extended
multi-level models previous hybrid algorithm hybridized
branch-and-bound derivative, namely beam search (BS)(Gallardo, Cotta, & Fernandez,
2006b). Studies influence variable clustering multi-parent recombination
performance algorithm conducted. results indicated
variable clustering detrimental problem multi-parent recombination improves performance algorithm. best knowledge,
heuristic approaches applied problem date.
section, previous research problem included extended.
new contributions, redone experiments using improved implementation
543

fiGallardo, Cotta, & Fernandez

bucket elimination crossover operator, described Section 3.1. Additionally,
present extensive experimental analysis BS/MA hybrid described (Gallardo
et al., 2006b), analyzing sensitivity parameters. propose new hybrid
algorithm uses technique mini-buckets improve lower bounds
partial solutions considered BS part hybrid algorithm. new algorithm
obtained hybridization, different levels, complete solving techniques (BE),
incomplete deterministic methods (BS MB) stochastic algorithms (MAs).
experimental analysis shows new proposal consistently finds optimal solutions
MDSLP instances n = 20 considerably less time previous approaches
reported literature. Finally, order test scalability approach, novel
hybrid algorithm run large instances MDSLP optimal
solution currently unknown. results successful, algorithm performed
state-of-the-art level, providing solutions equal better best
ones reported date literature. readability reasons, many particular technical
details different algorithms MDSLP omitted, fully described
accompanying report (Gallardo, Cotta, & Fernandez, 2008). rate, model
MDSLP WCSP presented Appendix A.
4.2 Memetic Algorithm MDSLP
First all, develop MDSLP. MA, n n board represented
binary n n matrix. Based stratified gradient provided penalty based fitness
function measures number violated constraints distance feasibility
(prioritizing former latter), efficient local search strategy explores
set solutions obtained flipping exactly one cell configuration devised. order
escape local optima, tabu-search scheme used (line 19 Figure 2).
uses crossover operation described Section 3.1 (line 12 Figure 2).
One interesting property operator described limited recombining
two board configurations, instead generalized recombine number
considering domains consisting values variable parents.
multi-parental capability explored rest paper.
evaluate usefulness described hybrid recombination operator, set experiments problem sizes n = 12 n = 20 realized (recall optimal
solutions MDSLP known n = 20). experiments performed
using steady-state evolutionary algorithm (popsize = 100, pm = 1/n2 , pX = 0.9, binary
tournament selection). aim maintaining diversity, duplicated individuals
allowed population. Algorithms run optimal solution found
time limit exceeded. time limit set 3 minutes problem instances size 12
gradually increased 60 seconds size increment. algorithm
instance size, 20 independent runs made. experiments paper
performed Pentium IV PC (2400MHz 512MB RAM) SuSE Linux.
base algorithm using two-dimensional version SPX (single-point
crossover) recombination, endowed tabu search local improvement.
algorithm termed MATS , shown capable finding feasible solutions systematically, solving optimality instances n < 15 (see MATS Figure 5a).
544

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

10
9.5
9
8.5
8
7.5
7
6.5
6
5.5
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0

25
MABE
MABE1F
MABE2F
MATS

Arity=2
Arity=4
Arity=8
Arity=16

22.5
20

% distance optimum

% distance optimum

Although performance algorithm degrades larger instances, provides distributions solutions whose average relative distance optimum less 5.29%
cases. contrasts case plain EAs, incapable finding even
feasible solution runs (Gallardo et al., 2006a).

17.5
15
12.5
10
7.5
5
2.5

12

13

14

15

16

17

18

19

0

20

12

13

14

15

16

17

18

19

20

instance size

instance size

(a)

(b)

Figure 5: Relative distances optimum different (a) algorithms (b) arities sizes
ranging 12 20. subsequent figures, box summarizes 20 runs, boxes comprise second third quartiles distribution
(i.e., inner 50%), horizontal line marks median, plus sign indicates
mean, circles indicate results median 1.5 times
interquartile-distance.
MATS firstly compared MAs endowed performing recombination.
Since use recombination higher computational cost simple blind
recombination, guarantee recombining two infeasible solutions
result feasible solution, defined three variants MAs:
first one, called MA-BE, always used perform recombination.
second, termed MA-BE1F , require least one parents feasible
order apply BE; otherwise blind recombination used.
last variant, identified MA-BE2F , require two parents feasible,
thus restrictive application BE.
evaluating variants, intend explore computational tradeoffs involved
application embedded component MA. algorithms,
mutation performed prior recombination order take advantage good solutions
provided BE. Figure 5a shows empirical performance different algorithms.
Results show MA-BE returns significantly better results MATS . MA-BE2F
find slightly better solutions MA-BE smaller instances (n {13, 15, 16}),
545

fiGallardo, Cotta, & Fernandez

larger instances winner MA-BE. seems effort saved recombining
unfeasible solutions improve performance algorithm. Note
that, larger instances, MA-BE1F better MA-BE2F . correlates well
fact used frequently former latter.
mentioned Section 3.1, optimal recombination scheme use readily extended multi-parent recombination (Eiben, Raue, & Ruttkay, 1994): arbitrary number
solutions contribute constituent rows constructing new solution. Additional experiments done explore effect capability MA-BE. Figure 5b
shows results obtained MA-BE different number parents recombined
(arities 2, 4, 8 16). arity = 2, algorithm able find optimum solution
instances except n = 18 n = 20 (the relative distance optimum
best solution found less 1.04% cases). Runs arity = 4 cannot find
optimum solutions remaining instances, note distribution improves
cases. Clearly, performance algorithm deteriorates combining
4 parents due higher computational cost BE. Variable clustering could
used alleviate higher computational cost, results performance degradation
since coarser granularity pieces information hinders information mixing (Cotta
& Troya, 2000; Gallardo et al., 2006b).
4.3 BS/MA Hybrid Algorithm MDSLP
section evaluate instantiation BS hybrid algorithm described
Section 3.2 MDSLP, called BS-MA-BE. beam selection (line 10 Figure 4),
simple quality measure defined partial solutions, whose value either
partial configuration unstable, number dead cells otherwise. methodology
Section 4.2 (20 executions performed algorithm instance
size), arities {2, 3, 4}. setting remaining parameters
kbw = 2000 (preliminary tests indicated value reasonable), kM
{0.3 n, 0.5 n, 0.75 n}, i.e., best 2000 nodes kept level BS algorithm,
30%, 50% 75% levels BS tree initially descended
run. respect termination conditions, execution within
hybrid algorithm consists 1000 generations, time limits imposed hybrid
algorithms, run n iterations BS.
Figure 6a shows results different values parameter kM . order better
compare distributions, number optimal solutions obtained algorithm
(out 20 executions) shown box plot. kM = 0.3 n, performance
resulting algorithm improves significantly original MA. Note BS-MA-BE,
using arity 2 parents, able find optimum cases except n = 18
(this instance solved arity = 4). distributions different instance sizes
significantly improved. n < 17 arity {2, 3, 4}, algorithm consistently finds
optimum runs. instances, solution provided algorithm
always within 1.05% optimum, except n = 18, relative distance
optimum worst solution 1.3%. two charts show that, general,
performance algorithm deteriorates increasing values kM parameter.
may due low quality bounds used BS part.
546

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

750
Arity=2
Arity=3
Arity=4

500

k



= 0.75 n

250

0
1500
kMA = 0.50 n

1250
Arity=2
Arity=3
Arity=4

2

0

1

kMA = 0.75 n

1.5

0 0 0
0

1

1 1 0
3 9 10

0.5

Time best solution(s)

2.5

1000

750

500

250

20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

0

% distance optimum

2.5

0

2

2000
k

0 5

kMA = 0.50 n

1.5



0 0 0

= 0.30 n

1750
1

1

2 0 1

1500

10 7 10

0.5

1250

20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

0
2.5

1000

2

750
kMA = 0.30 n

1.5

0 0 3
4 2 6

1

500

2 2 1
11 13 14

250

0.5
20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

0

12

13

14

15

16

17

18

19

0

20

(a)

12

13

14

15

16

17

18

19

20

instance size

instance size

(b)

Figure 6: (a) Relative distances optimum (b) time best solution different
arities BS-MA-BE KM {0.3 n, 0.5 n, 0.75 n}, sizes ranging
12 20. numbers box indicate many times optimal
solution found.

Regarding execution times, Figure 6b shows time distributions (in seconds) reach
best solution needed algorithms. Although BS-MA-BE requires time
MA-BE, time needed remains reasonable instances, always less
2000 seconds. Note execution time increases arity, time
needed perform crossover operator. hand, execution
time decreases larger values kM number executions decreases,
although, already remarked, quality solutions worsens.
4.4 Improving Lower Bound using MB MDSLP
simple quality measure beam selection used previous section depends solely
part solution already constructed. section, experimentally
study use MB technique compute tight, yet computationally inexpensive,
547

fiGallardo, Cotta, & Fernandez

lower bound remanning part configuration aim improving
performance BS part hybrid algorithm. Basically, idea cluster cells
row board metavariable. metavariables partitioned
columns n/M cells each. Finally, resort MB estimate best cost
extensions partial board configuration considering columns.
summing estimations column extensions, bound best board extension
partial solution obtained. section, experimented = 3 (i.e., three
columns row), although complexity still high, approach
used reduce further, considering columns.
2.5
2.5

% distance optimum

2
kMA = 0.30 n

1.5

16 18

1

18

13 19

6 13 19

0.5
20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

0

12

13

14

15

20 20

16

17

20

18

20

19

2
kMA = 0.50 n

1.5

19

1

16

13 18 19

4 13 16

0.5

20

20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

instance size

20 20

20 20

0

(a)

(b)

2.5

1.5

Arity=2
Arity=3
Arity=4

750

Time b. sol(s)

2

kMA = 0.75 n
19

1

16 14 16

14 13 18

3 12 19

Arity=2
Arity=3
Arity=4

500

k



= 0.75 n

250

0.5
20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

20

0

20

(c)

12

13

14

15

16

17

18

19

20

instance size

0

(d)

Figure 7: (a)-(c) Relative distances optimum using different arities
BS-MA-BE-MB KM {0.3 n, 0.5 n, 0.75 n}, sizes ranging
12 20. (d) Time (in seconds) best solution different arities
BS-MA-BE-MB kM = 0.75 n, sizes ranging 12 20.
Experiments repeated hybrid algorithm equipped new lower bound,
BS-MA-BE-MB. Figure 7a-7c shows results experiments values kM
{0.3 n, 0.5 n, 0.75 n}. algorithm finds optimum instances arities
relative distance optimum worst solution found less 1.05%
cases. best results obtained arity = 4, although requires slightly
execution time. Note BS-MA-BE-MB less sensitive setting parameter
kM , means execution times reduced considerably using large value
parameter (see Figure 7d). particular combination parameters kM = 0.75 n
arity = 4 provides excellent results lower computational cost, execution times
always 570 seconds n 6 20. comparison, recall approach
literature solve instances described Larrosa et al. (2005) requires
33 minutes n = 18, 15 hours n = 19 2 days n = 20,
approaches unaffordable n > 15. Note however times correspond
computational platform different ours. order make fairer comparison, executed
548

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

algorithm Larrosa et al. 3 platform. case, required 1867 seconds
(i.e., 31 minutes) order solve n = 18 instance, 1 day
18 hours solve n = 20 instance. values close times reported
Larrosa et al. (2005), hence indicate computational platforms fairly
comparable.
1.5

% distance

1

Arity=2
Arity=3
Arity=4

0.5
0
0.5
1

22

24

26

28

instance size

Figure 8: Relative distances best known solutions using different arities
BS-MA-BE-MB kM = 0.3 n, large instances (i.e., sizes 22,
24, 26, 28). Note improvement best known solutions sizes 24
26.

Figure 9: New best known maximum density still lifes n {24, 26}.

Table 2: Optimal solutions SMDLP.
n
opt

12 13
68 79

14
92

15
106

16
120

17
137

18
154

19
172

20
192

22
232

24 26
276 326

28
378

4.5 Results Large Instances
already mentioned, currently approach available tackle MDSLP
n > 20. Larrosa et al. (2005) tried algorithm n = 21 n = 22, could
3. Available http://www.lsi.upc.edu/~larrosa/publications/LIFE-SOURCE-CODE.tar.gz . Time
n = 19 could obtained code provided Larrosa et al. used even sized
instances.

549

fiGallardo, Cotta, & Fernandez

solve instances within week CPU. large instances,
solutions relaxations problem known. One relaxations, known
symmetrical maximum density still life problem (SMDSLP), proposed Bosch
Trick (2002), consists considering symmetric boards (either horizontally
2
vertically) reduces search space 2n 2ndn/2e .
alone find vertically symmetric still lifes, considering variable domains
sets contain symmetric rows. Larrosa Morancho (2003) Larrosa et al.
(2005) used algorithm solve SMDSLP instances considered far
paper (i.e., n {12 . . 20}), well large instances (i.e., n {22, 24, 26, 28}).
results summarized Table 2, shows instance size optimal
symmetrical solution (as number dead cells). Clearly, cost optimal symmetric
still lifes upper bounds MDSLP, additionally observed
tight n 6 20. Results n > 20 currently best known solutions
instances.
run algorithm (BS-MA-BE-MB) large instances (i.e., n
{22, 24, 26, 28}), compare results symmetrical solutions instances. Results (displayed Figure 8) show algorithm able find two new best known
solutions MDSLP, namely n = 24 n = 26. 275 324 dead
cells respectively new solutions. solutions pictured Figure 9.
worth noting algorithm could find solution 325 dead cells
n = 26 instance. instances, algorithm could reach best known solutions consistently. computation mini-Buckets large instances done
considering four clustered cost functions variables row board,
complexity using three cost functions still high.

5. Conclusions
Many problems modeled WCSPs. One exact technique used
tackle problems BE. However, high space complexity exact technique,
makes approach impractical large instances. case, one resort minibuckets get approximate solution, although complexity large.
work, presented several proposals hybridization MB
memetic algorithms beam search order get effective heuristics shown
represent promising models.
experimentally evaluated model MDSLP, excellent example
WCSP. highly constrained nature typical many optimization scenarios. difficulty solving problem illustrates limitations classical optimization approaches,
highlights capabilities proposed approaches. Indeed, experimental results positive, solving large instances MDSLP optimality. Among
different models presented, must distinguish new algorithm resulting
hybridization, different levels, complete solving techniques (i.e., bucket elimination),
incomplete deterministic methods (i.e., beam search mini-buckets) stochastic algorithms (i.e., memetic algorithms). algorithm empirically produces good-quality results,
solving optimality large instances constrained problem relatively
short time, providing new best known solutions large instances.
550

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

future work, plan consider complete versions hybrid algorithm.
involves use appropriate data structures store yet considered promising
branch-and-bound nodes. memory requirements course grow enormously
size problem instance considered, interesting analyze computational tradeoffs algorithm anytime technique.

Acknowledgments
would thank Javier Larrosa valuable comments, helped us improve
significantly preliminary version paper. Thanks due reviewers
constructive comments. work partially supported Spanish MCInn
grant TIN2008-05941 (Nemesis).

Appendix A. MDSLP WCSP
shown Larrosa Morancho (2003) Larrosa et al. (2005), MDSLP
well formulated WCSPs. end, n n board configuration represented
n-dimensional vector (r1 , r2 , . . . , rn ). vector component encodes (as binary
string) row, j-th bit row ri (noted rij ) represents state j-th cell
i-th row (a value 1 represents live cell value 0 dead cell).
Two functions rows useful describe constraints must satisfied
valid configuration. first one,
X
zeroes(a) =
(1 ai ),
(1)
1 6i6n

returns number dead cells row (i.e., number zeroes binary string a).
second one,
Adjs(a) = Adjs 0 (a, 1 , 0 )

l,
0
Adjs (a, , l ) = Adjs 0 (a, + 1 , l + 1 ),

max(l, Adjs 0 (a, + 1 , 0 )),

(2)
i>n
ai = 1
ai = 0,

computes maximum number adjacent living cells row a. introduce ternary
predicate, Stable(ri1 , r , ri+1 ), takes three consecutive rows board configuration
satisfied if, if, cells central row stable (i.e., cells row r
remain unchanged next iteration game):
Stable(a, b, c) =

V

16i6n S(a, b, c, i)

2 6 (a, b, c, i) 6 3, bi = 1
S(a, b, c, i) =
(a, b, c, i) 6= 3,
bi = 0
P
(a, b, c, i) = max(1,i1)6j6min(n,i+1) (aj + bj + cj ) bi ,

(3)

(a, b, c, i) number living neighbors cell bi , assuming c rows
row b.
551

fiGallardo, Cotta, & Fernandez

MDSLP formulated WCSP using n cost functions , {1 . . n}.
Accordingly, fn binary scope last two rows board (var(fn ) = {rn1 , rn })
defined as:

,
Stable(a, b, 0 ) Adjs(b) > 2
fn (a, b) =
(4)
zeroes(b), otherwise.
first line checks cells row rn stable, whereas second one checks
new cells produced nn board. Note pair rows representing
unstable configuration assigned cost , whereas stable one assigned number
dead cells (to minimized).
{2 . . n 1}, corresponding cost functions ternary scope var(fi ) =
{ri1 , ri , ri+1 } defined as:

,
(a, b, c) =
zeroes(b),

Stable(a, b, c) (a1 = b1 = c1 = 1 ) (an = bn = cn = 1 )
(5)
otherwise.

case, boundary conditions checked left right board. regards
cost function f1 , binary scope first two rows board (var(f1 ) = {r1 , r2 })
specified similarly fn :

,
Stable(0 , b, c) Adjs(b) > 2
(6)
f1 (b, c) =
zeroes(b), otherwise.

References
Ahuja, R. K., Ergun, O., Orlin, J. B., & Punnen, A. P. (2002). survey large-scale
neighborhood search techniques. Discrete Appl. Math., 123 (1-3), 75102.
Arnborg, S. (1985). Efficient algorithms combinatorial problems graphs bounded
decomposability - survey. BIT, 2, 223.
Back, T. (1996). Evolutionary Algorithms Theory Practice. Oxford University Press,
New York NY.
Back, T., Fogel, D., & Michalewicz, Z. (1997). Handbook Evolutionary Computation.
Oxford University Press, New York NY.
Barr, A., & Feigenbaum, E. (1981). Handbook Artificial Intelligence. Morhan Kaufmann,
New York NY.
Bertele, U., & Brioschi, F. (1972). Nonserial Dynamic Programming. Academic Press, New
York NY.
Bistarelli, S., Montanari, U., & Rossi, F. (1997). Semiring-based constraint satisfaction
optimization. Journal ACM, 44 (2), 201236.
Bosch, R., & Trick, M. (2002). Constraint programming hybrid formulations three
life designs. International Workshop Integration AI Techniques
Constraint Programming Combinatorial Optimization Problems, CP-AI-OR02, pp.
7791.
552

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

Cabon, B., de Givry, S., Lobjois, L., Schiex, T., & Warners, J. P. (1999). Radio link
frequency assignment. Constraints, 4 (1), 7989.
Cheng, K. C. K., & Yap, R. H. C. (2005). Ad-hoc global constraints life. van Beek,
P. (Ed.), Principles Practice Constraint Programming CP2005, Vol. 3709
Lecture Notes Computer Science, pp. 182195, Berlin Heidelberg. Springer.
Cheng, K. C. K., & Yap, R. H. C. (2006). Applying ad-hoc global constraints case
constraint still-life. Constraints, 11, 91114.
Cotta, C., & Troya, J. (2000). influence representation granularity heuristic
forma recombination. Carroll, J., Damiani, E., Haddad, H., & Oppenheim, D.
(Eds.), ACM Symposium Applied Computing 2000, pp. 433439. ACM Press.
Cotta, C., & Troya, J. (2003). Embedding branch bound within evolutionary algorithms.
Applied Intelligence, 18(2), 137153.
Culberson, J. (1998). futility blind search: algorithmic view free lunch.
Evolutionary Computation, 6 (2), 109128.
Dechter, R. (1997). Mini-buckets: general scheme generating approximations automated reasoning. 15th International Joint Conference Artificial Intelligence,
pp. 12971303, Nagoya, Japan.
Dechter, R. (1999). Bucket elimination: unifying framework reasoning. Artificial
Intelligence, 113 (1-2), 4185.
Detcher, R., & Rish, I. (2003). Mini-buckets: general scheme bounded inference.
Journal ACM, 50 (2), 107153.
Eiben, A., Raue, P.-E., & Ruttkay, Z. (1994). Genetic algorithms multi-parent recombination. Davidor, Y., Schwefel, H.-P., & Manner, R. (Eds.), Parallel Problem
Solving Nature III, Vol. 866 Lecture Notes Computer Science, pp. 7887,
Berlin Heidelberg. Springer.
Elkies, N. D. (1998). still-life problem generalizations. Engel, P., & Syta, H.
(Eds.), Voronois Impact Modern Science, Book 1, pp. 228253. Institute Math,
Kyiv.
Freuder, E. C., & Wallace, R. J. (1992). Partial constraint satisfaction. Artificial Intelligence, 58 (1-3), 2170.
Gallardo, J. E., Cotta, C., & Fernandez, A. J. (2008). Finding still lifes memetic/exact
hybrid algorithms. CoRR, Available http://arxiv.org/abs/0812.4170.
Gallardo, J., Cotta, C., & Fernandez, A. (2007). hybridization memetic algorithms branch-and-bound techniques. IEEE Transactions Systems, Man
Cybernetics, part B, 37 (1), 7783.
Gallardo, J. E., Cotta, C., & Fernandez, A. J. (2006a). memetic algorithm bucket
elimination still life problem. Gottlieb, J., & Raidl, G. (Eds.), Evolutionary
Computation Combinatorial Optimization, Vol. 3906 Lecture Notes Computer
Science, pp. 7385, Berlin Heidelberg. Springer.
553

fiGallardo, Cotta, & Fernandez

Gallardo, J. E., Cotta, C., & Fernandez, A. J. (2006b). multi-level memetic/exact hybrid
algorithm still life problem. Runarsson, T. P., et al. (Eds.), Parallel Problem
Solving Nature IX, Vol. 4193 Lecture Notes Computer Science, pp. 212221,
Berlin Heidelberg. Springer.
Gardner, M. (1970). fantastic combinations John Conways new solitaire game.
Scientific American, 223, 120123.
Gelain, M., Pini, M. S., Rossi, F., & Venable, K. B. (2007). Dealing incomplete preferences soft constraint problems. Bessiere, C. (Ed.), Principles Practice
Constraint Programming CP 2007, Vol. 4741 Lecture Notes Computer Science,
pp. 286300, Berlin Heidelberg. Springer.
Glover, F. (1989). Tabu search part I. ORSA Journal Computing, 1 (3), 190206.
Glover, F. (1990). Tabu search part II. ORSA Journal Computing, 2 (1), 432.
Hart, W., Krasnogor, N., & Smith, J. (2005). Recent Advances Memetic Algorithms, Vol.
166 Studies Fuzziness Soft Computing. Springer, Berlin Heidelberg.
Kask, K., & Detcher, R. (2001). general scheme automatic generation search
heuristics specification dependencies. Artificial Intelligence, 129, 91131.
Khemmoudj, M. O. I., & Bennaceur, H. (2007). Valid inequality based lower bounds
WCSP. Bessiere, C. (Ed.), Principles Practice Constraint Programming
CP 2007, Vol. 4741 Lecture Notes Computer Science, pp. 394408, Berlin
Heidelberg. Springer.
Krasnogor, N., & Smith, J. (2005). tutorial competent memetic algorithms: model,
taxonomy, design issues. IEEE Transactions Evolutionary Computation, 9 (5),
474488.
Larrosa, J., & Morancho, E. (2003). Solving still life soft constraints bucket
elimination. Principles Practice Constraint Programming CP2003, Vol.
2833 Lecture Notes Computer Science, pp. 466479, Berlin Heidelberg. Springer.
Larrosa, J., Morancho, E., & Niso, D. (2005). practical use variable elimination
constraint optimization problems: still life case study. Journal Artificial
Intelligence Research, 23, 421440.
Larrosa, J., & Schiex, T. (2004). Solving weighted CSP maintaining arc consistency.
Artificial Intelligence, 159 (1-2), 126.
Lawler, E., & Wood, D. (1966). Branch bounds methods: survey. Operations Research,
4 (4), 669719.
Lematre, M., Verfaillie, G., Bourreau, E., & Laburthe, F. (2001). Integrating algorithms
weighted CSP constraint programming framework. International Workshop
Modelling Solving Problems Soft Constraints, Paphos, Cyprus.
Marinescu, R., & Dechter, R. (2007). Best-first and/or search graphical models.
Twenty-Second AAAI Conference Artificial Intelligence, pp. 11711176, Vancouver, Canada. AAAI Press.
Moscato, P., & Cotta, C. (2003). gentle introduction memetic algorithms. Handbook
Metaheuristics, pp. 105144. Kluwer Academic Press, Boston, Massachusetts, USA.
554

fiSolving WCSPs Memetic/Exact Hybrid Algorithms

Moscato, P., & Cotta, C. (2007). Memetic algorithms. Gonzalez, T. (Ed.), Handbook
Approximation Algorithms Metaheuristics, chap. 27. Chapman & Hall/CRC
Press.
Nonobe, K., & Ibaraki, T. (2001). improved tabu search method weighted
constraint satisfaction problem. INFOR, 39 (2), 131151.
Puchinger, J., & Raidl, G. (2005). Combining metaheuristics exact algorithms
combinatorial optimization: survey classification. Mira, J., & Alvarez, J.
(Eds.), Artificial Intelligence Knowledge Engineering Applications: Bioinspired
Approach, Vol. 3562 Lecture Notes Computer Science, pp. 4153, Berlin Heidelberg. Springer.
Schiex, T., Fargier, H., & Verfaillie, G. (1995). Valued constraint satisfaction problems: hard
easy problems. 14th International Joint Conference Artificial Intelligence,
pp. 631637, Montreal, Canada.
Smith, B. M. (2002). dual graph translation problem life. Hentenryck, P. V.
(Ed.), Principles Practice Constraint Programming - CP2002, Vol. 2470
Lecture Notes Computer Science, pp. 402414, Berlin Heidelberg. Springer.
Verfaillie, G., Lematre, M., & Schiex, T. (1996). Russian doll search solving constraint
optimization problems. Thirteenth National Conference Artificial Intelligence
Eighth Innovative Applications Artificial Intelligence Conference, AAAI / IAAI
96, pp. 181187. AAAI Press / MIT Press.
Wolpert, D., & Macready, W. (1997). free lunch theorems optimization. IEEE
Transactions Evolutionary Computation, 1 (1), 6782.

555


