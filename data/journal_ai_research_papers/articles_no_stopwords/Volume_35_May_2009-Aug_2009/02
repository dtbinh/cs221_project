journal artificial intelligence

submitted published

trust mechanisms robust efficient task allocation
presence execution uncertainty
sarvapali ramchurn

sdr ecs soton ac uk

intelligence agents multimedia
school electronics computer science
university southampton southampton uk

claudio mezzetti

c mezzetti warwick ac uk

department economics
university warwick coventry uk

andrea giovannucci

agiovannucci iua upf edu

specs laboratory
pompeu fabra university
barcelona spain

juan rodriguez aguilar

jar iiia csic es

artificial intelligence institute
spanish council scientific
barcelona spain

rajdeep k dash
nicholas r jennings

rkd ecs soton ac uk
nrj ecs soton ac uk

intelligence agents multimedia
school electronics computer science
university southampton southampton uk

abstract
vickrey clarke groves vcg mechanisms often used allocate tasks selfish rational
agents vcg mechanisms incentive compatible direct mechanisms efficient e maximise social utility individually rational e agents prefer join rather opt however important assumption mechanisms agents successfully complete allocated tasks clearly assumption unrealistic many real world applications
agents often fail endeavours moreover whether agent deemed
failed may perceived differently different agents subjective perceptions
agents probability succeeding given task often captured reasoned
notion trust given background investigate design novel mechanisms
take account trust agents allocating tasks
specifically develop class mechanisms called trust mechanisms
take account multiple subjective measures probability agent succeeding given
task produce allocations maximise social utility whilst ensuring agent obtains
negative utility mechanisms pose challenging combinatorial
optimisation np complete devise novel representation solving
develop effective integer programming solution solve instances
possible allocations seconds
c

ai access foundation rights reserved

fir amchurn ezzetti g iovannucci rodriguez dash j ennings

introduction
task allocation important challenging within field multi agent systems
involves deciding assign number tasks set agents according
allocation protocol example number computational jobs may need allocated agents
run high performance computing data centres byde number network maintenance
tasks may need performed communications companies number business clients
jennings faratin norman obrien odgers alty number transportation tasks
may need allocated number delivery companies sandholm general case
agents performing jobs asking jobs performed trying maximise
gains e g companies owning data centres servers trying minimise
number servers utilised communications companies try minimise number people
needed complete tasks demanded transportation companies try use minimum
number vehicles given mechanism design md techniques employed design
task allocation protocols since techniques produce solutions provable
desirable properties faced autonomous utility maximising actors dash parkes
jennings particular vickrey clarke groves vcg class mechanisms
advocated number domains walsh wellman hershberger suri
dash et al maximise social welfare e efficient guarantee nonnegative utility participating agents e individually rational mechanisms
agents typically reveal costs performing tasks valuation requested tasks
centre centre computes allocation tasks agent payments
need make receive however important underpinning assumption mechanisms
make agent successfully completes every task assigned centre
assumption allocation e assignment tasks asked
requester agents executed task performer agents selected centre
costs valuations provided agents ensures centre chooses
performers cheapest requesters ready pay however
agents chosen centre may ultimately successful completing assignment
example agent providing access data centre cost success rate
might preferable one providing service cheaper cost
chance successful thus order make efficient allocations circumstances
need design mechanisms consider task performers costs service
probability success pos probability may perceived differently different agents
typically different standards means evaluating performance
counterparts example different customers might evaluate performance data centre
different ways timeliness security quality output given turn notion
trust capture subjective perceptions ramchurn huynh jennings take
account agents trust agents well costs allocating tasks requires
design class mechanisms previously termed trust dash ramchurn
jennings
date however existing work trust mechanisms tbms ignores number important aspects task allocation makes less robust uncertainty see section
details first porter ronen shoham tennenholtz allow pos reports
come task performer rather agent means task requester


fit rust echanisms robust e fficient task llocation

misled task performers opinion even truthfully revealed since task requester
may believe times task performer failed task performer believes succeeded second previous work dash et al presented trust mechanism
could inefficient allocations agents strong incentives report pos
even importantly however existing trust mechanisms completely ignore computational cost associated including pos computing optimal allocation payments
thus previous work highlights economic benefits specify effectively represented efficiently solved ignoring issues previous work
failed prove mechanisms actually implemented solved whether
scale reasonable numbers agents
background provides economically efficient individually rational
mechanisms scenarios exists uncertainty agents successfully completing
assigned tasks execution uncertainty generally modelled follows first potential task performers assessed task requester uses individual experience
performance information gathered environment reports agents
performance construct estimation pos often sources called confidence reputation respectively ramchurn et al dasgupta combined
give notion trust agent performing particular task combined view trust
used robust measure pos single estimate especially one
originating task performer evident fact agent likely
partial view performance task performer derived finite subset
interactions example task requester ten tasks performed agent may benefit
experience acquired another requesters fifty interactions agent however incorporating trust decision mechanism requester introduces two major issues
first agents use reports agents build trust introduces possibility interdependent valuations means value generated one agent system
affected another agents report mechanism jehiel moldovanu mezzetti
turn makes much harder standard vcg techniques incentivise agents
reveal private information truthfully second trust optimal allocation involves
significant computational cost solving optimisation trust
mechanisms np complete
tackle issue interdependence build upon work mezzetti
construct novel mechanism incentivises agents reveal private information moreover help combat computational complexity generated trust go develop novel
representation optimisation posed trust mechanisms provide implementation integer programming ip given main bottleneck
mechanism lies searching large set possible allocations demonstrate
ip solution comfortably solve small medium instances within minutes e g tasks
agents hours e g tasks agents provide first benchmark
aim solve optimisation
detail advances state art following ways

though time taken optimal solution grows exponentially number tasks mechanism sets
baseline performance solving optimisation posed trust mechanisms



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

design novel tbms allocate tasks uncertainty completion tbms non trivial extensions porter et al
first consider reputation task performer within system addition
self report allows us build greater robustness mechanism since takes
account subjective perceptions agents task requesters particular pos
task performers
prove tbms incentive compatible efficient individually rational
develop novel representation optimisation posed tbms given
cast special matching berge solving
generalised version tbms np complete provide first integer programming
solution solution solve instances agents tasks within one minute
even larger instances within hours
rest structured follows start providing overview related
work section provide contributions listed step wise manner first
simple task allocation model detailed section introduce tbm single
requester single task scenario section develops generalised tbm multiple requesters
multiple tasks prove economic properties dealt economic aspects
turn computational implementing tbms section specifically
develop representation optimisation posed generalised tbm study
computational costs associated solving provide ip solution
section discusses number broader issues related development future trust
mechanisms

related work
associating uncertainty mechanism design build upon work areas regards
capturing uncertainty multi agent interactions work focused devising computational
trust reputation see papers teacy patel jennings luck ramchurn
et al reviews mostly use statistical methods estimate reliability
opponent agents reports direct interactions opponent
try identify false inaccurate reports checking closely report matches
agents direct experience opponent teacy et al jurca faltings
help choosing successful agents shown generate
efficient outcomes given mechanism contrast provide means use
order
case md surprisingly little work achieving efficient incentive compatible individually rational mechanisms take account uncertainty general
approaches adopted separated work reputation mechanisms mechanisms
task resource allocation former mainly aim eliciting honest feedback reputation
providers examples mechanisms include papers dellarocas miller resnick
zeckhauser jurca faltings particular miller et al recently developed peer prediction model incentivises agents report truthfully
experience mechanism operates rewarding reporters according well reports


fit rust echanisms robust e fficient task llocation

coincide experience peers specifically assigns scores distance
given agents report selected reference reporters reports given task performer
similar way jurca faltings attempted solve placing
importance repeated presence agents system order induce truthful reporting however given focus eliciting honest feedback mechanism silent
feedback actually used particular cannot employed task allocation
scenario study case objective maximise overall utility
society therefore considers value pos agents example car repair
lower value building bridge hence feedback car repairer less critical
feeback bridge builder terms impact social welfare interestingly mechanism shown truth telling non unique nash equilibrium budget balanced
individually rational see section social desiderata interplay
terms md task allocation type uncertainty taken account bayesian mechanisms dagva daspremont gerard varet arrow considers
case payoffs agents determined via probability distribution types
common knowledge agents however mechanism cannot deal
uncertainty task completion agent information pos
agents common knowledge type distributions porter et al
considered task allocation mechanism one closely
related however limit case agents report
pos serious drawback assumes agents measure pos
accurately consider case agents may different perceptions
pos e g performer believes performs better worse requester perceives
moreover consider single requester setting mechanisms develop
deal multiple tasks multiple requesters thus mechanisms considered
two way generalisation first allow multiple reports uncertainty need
fused appropriately give precise pos perceived requester second generalise
mechanism case multiple requesters agents provide combinatorial valuations
multiple tasks earlier work dash et al proposed preliminary tbm agents could followed risky potentially profitable strategy
reporting costs reporting valuations since payments made according whether succeed fail allocated task mechanism
contrast work payment scheme ensures strategy viable thus
mechanism robust moreover previous work assumed trust functions monotonically increasing pos reports similar porter et al develop
needed actually solve optimisation posed tbm present
mechanism applies general trust functions develop solve tbms
finally work case interdependent multidimensional allocation schemes interdependent payoffs jehiel moldovanu shown impossible achieve efficiency
one stage mechanism mezzetti however shown possible achieve efficiency elegant two stage mechanism reasonable assumptions mechanism
achieves efficiency without needing two reporting stages setting consider payments contingent whether tasks successful agents derive
direct payoff allocation task another agent agents assessments
completion probabilities setting exists specific function captures interde

fir amchurn ezzetti g iovannucci rodriguez dash j ennings

pendence exists among agents assessments others pos function
case agents trust model

single requester single task allocation mechanisms
section first present basic vcg mechanism simple task allocation model
single task requested single agent allocated task guaranteed completed
e agents pos equal briefly describe porter et al extension
considers task performers privately known objective probability finish
assigned task finally consider case pos task performer function
privately known variables held task performer system ensures
choice made task requester better informed drawing data sources
pos task performers porter et al mechanism would fail produce
efficient allocation settings go provide non trivial extension model
cater define trust mechanism single requester
single task scenario prelude generalised mechanism develop next
section go prove economic properties simple tbm throughout
section running example task allocation employed demonstrate workings
mechanisms discussed
allocation guaranteed task completion
task allocation scenario single agent derives value certain task performed
end agent needs allocate task one available task performers
charge certain amount execute task start considering following simple example
example moviepictures com computer graphics company image rendering task
wishes complete movie hence moviepictures com publicly announces intention
companies owning data centres execute task given interest shown many
companies moviepictures com needs decide mechanism allocate contract
much pay chosen contractor given moviepictures com know
contractors costs execute job e know much actually costs company
process images render required quality
example captured following model set agents data
centre agents example privately known cost
ci r performing rendering task furthermore let moviepictures com
represented special agent value v r rendering task
cost c v perform task c case agent cannot execute task
hence moviepictures com get task performed another agent set
cost ci v
moviepictures com needs decide procedure award contract hence
acts centre invite offers agents perform task devising
mechanism task allocation focus incentive compatible direct revelation mechanisms
drms invoking revelation principle states mechanism transformed
drm krishna context direct revelation means strategy space e
possible actions agents restricted reporting type e private information


fit rust echanisms robust e fficient task llocation

example cost valuation task incentive compatible means equilibrium strategy
e best strategy certain equilibrium concept truth telling
thus drm designer control two parts allocation rule determines wins contract payment rule determines transfer money centre e moviepictures com agents e data centres let k denote
particular allocation within space possible allocations k represent agent
gets allocated task agent setting space possible allocations
k denotes case task allocated
moreover abuse notation slightly define cost allocation k agent
ci k ci k ci k otherwise similarly centre value
non empty allocation simply value task e v k v k
v k k finally let ri r payment centre agent case ri
negative agent pay ri centre
within context task allocation direct mechanisms take form sealed bid auctions
task performers report costs centre auctioneer agents may wish report
true costs reporting falsely leads preferable outcome therefore
distinguish actual costs reported ones superscripting latter b
task allocation consists choosing allocation payment rules
certain desirable system objectives detailed satisfied allocation
rule mapping reported costs set allocations k b
ci b
ci allocation
chosen agent reports b
ci agents report vector b
ci similarly payment rule
mapping reported costs payments agent ri b
ci b
ci payment
agent agent reports b
ci agents report vector b
ci
following task execution payments agent derives utility given utility function ui k r r common domain assume agent rational expected
utility maximiser quasi linear utility function mascolell whinston green
definition quasi linear utility function one expressed
ui k ri ri ci k



k k given allocation
modelled moviepictures com would use protocol
possesses desirable properties efficiency individual rationality needs make sure
protocol incentive compatible agents must optimal report true costs
desiderata formally defined follows
definition efficiency allocation mechanism said achieve efficiency outcome
generates maximises total utility agents system without considering transfers
vectors reports b
c calculates k


x
b
ci k

k b
c arg max v k
kk

ii

definition individual rationality allocation mechanism said achieve individual rationality agents derive higher utility participating mechanism opting


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

assuming utility agent obtains opting zero individually rational
allocation k one krishna
ui k ri



definition incentive compatibility allocation mechanism said achieve incentive compatibility agents true type optimal report matter agents report

ri ci b
ci ci k ci b
ci ri b
ci b
ci ci k b
ci b
ci ci b
ci b
ci

note incentive compatibility implies vector reports agents b
ci
payments agent must depend report chosen allocation incentive
compatibility requires telling truth weakly dominant strategy important
note incentive compatibility dominant strategies strongest possible form incentive
compatibility vcg mechanism property
moviepictures com decides employ vickrey auction known second price
sealed bid auction since protocol possesses desired properties incentive compatibility
efficiency individual rationality krishna detail received
sealed bids reports b
c agents centre calculates allocation k b
c according
equation transfer ri winner given


x
v k
ri b
c v k b
c max
b
cj k


k ki

ji

ki set allocations involve task performer
allocation execution uncertainty

mechanism presented previous section assumed allocation k
decided value v k obtained centre v task allocated
otherwise thus implicit assumption allocated task agent
perform successfully however unrealistic illustrated following example
example many previous rendering tasks required moviepictures com allocated
poorrender ltd competitive prices unfortunately poorrender ltd could
complete task many cases lack staff technical
knew even bidding task moviepictures com incurred severe
losses hence moviepictures com decides alter allocation mechanism way
agents pos completing tasks factored selection cheapest agent
moviepictures com assumes contractor knows pos cost privately needs
mechanism elicit information truthfully order choose best allocation
studied porter et al briefly describe terms
mechanism order extend generalise later see sections first introduce
boolean indicator variable denote whether task completed
thus observable task allocated moreover extend


fit rust echanisms robust e fficient task llocation

notation capture centres valuation task execution v v k
v setting assume commonly observed e
agent believes agents believe rendering
example might denote whether images rendered appropriate resolution
allow usage furthermore probability task allocated
agent dependent upon another privately known variable pi pos
agent executing task note variable privately known task performer
single observation within system carried task performer
pos note task performer incurs cost ci soon attempts task
irrespective whether successful
seen value centre moviepictures com derive v known
allocation calculated hence notions efficiency individual rationality introduced section need adjusted setting given probability task
executed given agent consider expected value allocation v k p
calculated
v k p v k pi



agent chosen perform task allocation k p hp pi
vector pos values agents list assessments contractor
probability complete rendering task example need require
b vector reported pos values
agents report pos addition cost denote p
hb
p pbi
following modified desiderata need considered

definition efficiency mechanism said achieve efficiency chooses allocation
maximises sum expected utilities without considering transfers


x
b
b arg max v k p
b
ci k

k b
c p
kk

ii

b reported agents key computing efficient
note b
ci k p
allocation
definition individual rationality mechanism achieves individual rationality participating
agent derives expected utility ui non negative
ui c p ri c p ci k

ri c p expected payment agent receives
order achieve desiderata one could suppose nave extension standard
vickrey mechanism presented would sufficient mechanism centre would
ask agents report extended types b
ci pbi allocation chosen would one
maximising expected utility agents payment rule would conditioned according
equation v k p replacing v k however mechanism would fail
settings illustrated next section


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

na ive pplication v ickrey auction
example consider case moviepictures com derives value v
rendering task completed let three contractors whose costs ci render
images given c c c furthermore assume contractor
pos given p p p information represented table

efficient allocation case shaded line table involves assigning task agent
expected social utility payment agent
reverse vickrey auction expected values equation
however mechanism incentive compatible example agent reveals
pb centre implement k pay agent r
thus agents mechanism better reporting pbi matter
actual pos hence centre able implement efficient allocation
agent




ci




pi




table costs performing task agents perceived probability successfully completing
task

type extension e including pos non trivial pos report agent
affects social value expected centre agents cost allocation
reporting higher pos positively affect agents probability winning
allocation thus positively affect utility rectify need means
gain utility balanced penalty truthfully reporting type agent
maximise utility achieved porter et al mechanism briefly detail
next section
p orter et al echanism
mechanism around payments applied completion tasks specifically
mechanism finds marginal contribution agent made expected welfare
agents depending whether completes assigned task intuitively works since
payment scheme punishes agent assigned task complete e
agent incentivised reveal higher pos value real pos since
allocated task likely reap punishment rather reward obtains
successfully completes task e
detail allocation determined centre according equation payment rule agent task allocated similar vcg
marginal contribution agent system extracted comparing efficient allocation
b allowith second best allocation excluding agent agent gets ri b
c p
cated task difference expected marginal contribution extracted e


fit rust echanisms robust e fficient task llocation

taking account agents real probability success achieved follows



p
b

p

b
b
v
k
c

p


max
b
c
k

v
k





ji j

k ki

b
ri b
c p



p


b
b
cj k

max v k p




ji

k ki

ki set allocations excluding agent
mechanism would work example provided table since example agent
reports pb allocated task paid
probability probability thus average agent paid
time incur cost thereby making expected utility clearly
rational agent overstate pos fact incentive compatibility mechanism
arises agent expected utility given allocated task


b pi v k b
b ci k b
b max
ui b
c p
c p
c p


k ki



b max
pi ci k b
c p


k ki



b p ci k b
b max
c p
c p
v k b


k ki



b
v k p

b
v k p



x

ji

b
v k p

x

ji



b
cj k



b
cj k

x

ji




b
cj k

note expected utility within mechanism would
derived agents nave extension vcg truthful reporting p however
porter et al mechanism agents incentive lie pbi pi
e agent reports pos agent might allocated task even though
h

arg max v k x px cx k x
xi



kx



x

means could

b p ci k b
b max
v k b
c p
c p


k ki



x
b
b
cj k
v k p
ji

agent deriving negative utility per equation hence agent
report higher pos values complete treatment proof incentive compatibility
mechanism given porter et al furthermore mechanism
proven individually rational efficient
allocation multiple reports execution uncertainty
previous section considered mechanism agent privately known
estimation uncertainty task completion mechanism considers centre


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

receive single estimate agents pos turn attention previously
unconsidered general case several agents may estimate example
number agents may interacted given data centre provisioning company many
occasions past therefore acquired partial view pos company
estimates centre obtain accurate picture given agents likely performance
combines different estimates together combination better estimate
number reasons including
accuracy estimation accuracy estimation typically affected noise thus
combining number observations lead refined estimate obtaining
single point estimate
personal preferences agent within system may different opinions
constitutes success attempting task centre may willing assign
weight agents estimate believes agents perspective similar

illustrate points considering following example
example moviepictures com still satisfied solution chosen far
poorrender ltd still reports high pos even though moviepictures com noticed
failed task number occasions poorrender ltd believes
images rendered high enough quality used feature film moviepictures com believed moviepictures com therefore cannot rely agents
perception pos decide allocation rather moviepictures com wants ask
agents submit perception others pos moviepictures com aims
capture knowledge agents might previous sub contracted
tasks simple observations end moviepictures com needs devise mechanism
capture agents perceptions including measures pos agent use
fused measures selection process
example modelled introducing variable expected quality
service eqos noted ij perception agent pos agent j
task vector agent eqos agents including within system
noted hi ii furthermore shall denote j eqos agents
within system including agent j thus image rendering example ij
might denote probability perceived agent rendering task completed according
certain level quality computer graphics perceived differently different
agents moviepictures com needs function order combine eqos agents
give resultant pos movie rendered graphic requirements
detail given previous personal interaction j compute frequency good bad interactions probability termed confidence j pos second
take account agents opinions j known js reputation society order compute pos j ramchurn et al combination measures
generally captured concept trust defined aggregate expectation derived
history direct interactions information sources j complete


fit rust echanisms robust e fficient task llocation

task assigned aggregate trust agent j successfully complete task agent
function tr j
multiple ways trust function could computed often captured
follows
tr j

x

wl lj



li

p
wl wl function generates trust weighted sum eqos values
cases actually considered probability distributions trust function
expected value joint distribution constructed individually reported distributions
teacy et al jurca faltings much work exists literature deals
different ways combining distributions biases incompatibilities agents
perceptions taken account essentially however assign weights different reports
agents choose expected value reports trust agent however
date none actually studies get self interested agents generate reports
truthfully along maximising social welfare
direct mechanism case elicits agent cost eqos vector
ci centre decides allocation payments agents computing expected utility mechanism agent must evaluate trust probability success
agent allocated task raises conceptual difficulty agent
treat agents pos reports assessing probability task completion opposed
computing best response type reports take
agent assumes reported pos agents truthful computing trust another
agent precisely agent computes value trust function true eqos
reported eqos agents thus trust agent agent j able comb already seen general payment agent depends
plete task tr j
b
reported types agents whether task succeeds fails end let b
c
b define
agent allocated task vector reported types b
c
b
expected payment agent true types c reported types b
c
follows
h

b
b
b
b
c
c
b c ri b
b tr
b ri b
b tr
b
eri b
c
c

c

point type agent eqos plus cost multidimensional
common multidimensional world could several type reports generate
expected payment agent ready define modified notion incentive compatibility use

definition incentive compatibility dominant strategies allocation mechanism said
achieve incentive compatibility dominant strategies agents true type optimal report
matter agents report c b
ci b
b
ci b

b c ci k ci b
bi
b c ci k b
eri ci b
ci
ci eri b
ci b
ci
ci b
ci

agent uses reported pos agents computing value trust function seems natural
assumption agent rely agents truthfully reporting types case example
history interactions pos reporters publicly known e g ebay amazon



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

case agents view eqos reports agents
truthful trust agent agent j able complete task may depend
true reported types agents case could relax incentive compatibility
requirement dominant strategy ex post nash equilibrium mascolell et al
means agents report truthfully optimal agent report
true type matter true types agents replacing trust function
definition expected payment agent definition incentive compatibility would
change
definition incentive compatibility nash equilibrium allocation mechanism said
achieve incentive compatibility ex post nash equilibrium agents true type optimal
report provided agents report type truthfully ci b
ci b
ci
b c ci k b
eri ci ci c ci k ci ci eri b
ci ci
ci ci

next demonstrate porter et al mechanism would work setting extending
example
failure p orter et

al

echanism

example two agents costs performing task requested centre formed
perceptions set agents given table suppose tr
v
agent



tr

ci













table costs eqos reports agents single task scenario trust requester calculated
assuming truthful reports

porter et al specify procedure deals eqos reports however natural
instead pbi ignore
extension technique would allocate according tr b
reports agent computation payment implement example
agent winner since generates expected social utility agent would
generate utility expected utility agent allocated task according
equation
b ci k b
b max
b v k b
b tr
c
ui b
c
c


k ki

h



b
cj k
v k tr j b


b excludes reports agent ki set allocations excluding agent

j agent allocated task allocation k unfortunately extension breaks
incentive compatibility following way given efficient allocation computed
b values agents tr b
b equation value best
reported
instead p


fit rust echanisms robust e fficient task llocation

allocation obtained removing one agent could arbitrarily lower example agent
reports efficient allocation becomes agent expected social utility
agent gets expected utility systems utility drops reports
removed allocation recomputed agent truthful obtain utility since agent
would winner case effect removal agent system breaks
mechanism interdependence valuations introduced trust model
elaborate issue solve next section
thus need develop mechanism incentive compatible agents reporting
perceptions agents pos order however need additionally
consider effect reporting eqos vector agents expected utility specifically
need develop trust mechanism eqos reports agent provide
way increasing overall expected utility per intuition behind vcg
true value eqos mechanism selection optimal allocation
tasks
ingle r equester ingle task rust echanism
intuitively following mechanism works ascertaining agent derives positive utility
successfully completes task eqos report change allocation
favour thus mechanism develop regarded generalisation porter
et al
detail let k agent performing task allocation k centre first
determines allocation according

x
k
b arg max v k tr b
k b
c

b
ci k
kk





ii

computed efficient allocation adopt similar porter et
al compute payments tasks executed see section however
novelty mechanism lies use agents eqos reports computation
efficient allocation showed moreover additional payments losers
incentivise agents select efficient allocation
thus apply different payments cases agent winning allocation succeeds
e fails e agent allocated task e k
payment

b
ri b
c


b bi b
b
c
ci
v k b


b
bi b
ci





bi term independent report constant point view
reduces payment needs made agent briefly discuss value bi
could set reduce payout made centre later section provide greater
detail section
addition paying winner reward losers k following way
depending whether succeeds


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

b
rk b
c


b b
b bk b
b k
c
ci k b
c
ck
v k b


b bk b
b k
b
ci k b
c
ck





intuitively payment scheme aims incentivise agents reveal type
efficient allocation chosen let k allocation assigning task agent suppose
b agents report b
b
agent type ci reports type b
ci
ci
agent wins task derive following expected utility




b v k tr
b ci k bi b
b
ui k
ci


b reflects true pos agent agent k assigned task
note tr
agent obtains following expected utility participating mechanism





b v k k tr k
b b
b
ui k k
ck k k bi b
ci


difference equations identity winner hence
falsely reporting agent influence identity winner agent expected utility
mechanism equal expected social utility system minus constant independent
report hence agent rational report true type efficient agent
outcome chosen shows single task trust mechanism incentive compatible
efficient
proposition mechanism described equations incentive compatible
proposition mechanism described equations efficient

proof since agent ks report k affects expected utility agents see equations
interdependence agents payoffs valuations however agent
influence transfer report computation agent payment
b b
independent report
ci dependent actual execution task
therefore true value feature permits implementation efficient
allocation single stage mechanism
exemplify payments mechanism consider following extension example
example two agents zero cost performing task requested centre
eqos ij j suppose tr
v
setting bi example payment agent
task completed successfully payment task fails hence
centre profits implementing mechanism agents incentive report truthfully
agent likely succeed allocated task furthermore agents willing
participate probability success least worst case scenario
provide detailed proof generalised case section



fit rust echanisms robust e fficient task llocation

hence agents expect obtain least zero participating mechanism individually rational note total expected payment centre agents
could low
bi chosen individual rationality satisfied
proposition appropriate choice bi mechanism described equations
individually rational
proof participating mechanism agent obtain utility however
agent decides participate virtue selection efficient allocation returns
allocation social welfare generated less guaranteed winner obtain
utility ui described equation loser utility uk equation since
cases ui bi efficient allocation chosen bi set mechanism
individually rational
obviously since agents utilities tied winning agent lose
winning agent fails expectation agents make profit least case bi set
example shows centre trying minimise payments increase profits
could set bi greater zero still satisfy individual rationality section
set bi value maintains individual rationality minimising payments
general model
note sometimes may preferable centre give individual rationality
consider example modify example allow additional eqos value ij
j induce type ij participate centre could set bi
payment following success payment failure worst
case scenario centre e centres profit lowest total expected payment
mechanism best case scenario total
expected payment zero shall see section centre could substantially reduce
payments making bi depend report agents e still
may preferable centre set bi giving participation agents
eqos values ii ij general low eqos types centre faces
trade efficient task allocation payments minimisation leave study
trade future work see section initial thoughts

generalised trust mechanism
mechanisms presented previous section dealt basic task allocation
one requester one task several performers aim efficiently solve
general trust interactions one agent requests
performs one task end extend single requester single task
setting general one multiple requesters multiple tasks generalised trustbased mechanism gtbm extension needs consider number complex features
top dealt previously first need consider multiple requesters
make requests sets tasks task performers perform sets tasks well
thus centre acts clearing house determining allocation payments


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

multiple bids task requesters multiple asks task performers significantly
complicates incentivising agents reveal types since make
sure agents reveal costs valuations eqos truthfully one task
second computation efficient allocation payments consider much larger
space previously thus believe important modelled
implemented solved demonstrate mechanism scales increasing numbers
agents tasks computability aspects dealt section
following example illustrates general setting
example trust mechanism months moviepictures com made
significant profits expanded several independent business units performing rendering
tasks rendering tasks performed certain clients moviepictures com would
ways business units efficiently allocate tasks amongst however
companies uncertainties others performance rendering tasks
example business units highdeffilms com believe poorrender ltd part
moviepictures com inefficient others goodfilms com believe bad
recently large set animations rendered well cheap price cater
differences opinion maximising overall utility moviepictures com needs extend
single task trust mechanism implement generalised mechanism efficiently
order deal complex setting extend task allocation model next
subsection describing allocation rule payment scheme section proving
economic properties mechanism section
extended task allocation setting
let denote set tasks requested performed compared
single task use notation specify subset tasks
performed specifically agent similarly adding superscript task k
denotes subset tasks agent performs note nothing model restricts
agent task performer requester
selected allocation k multiple task multiple requester model generates matching involves finding agents perform tasks requested
ii let set possible allocations
agents e g k
denoted k note requested tasks need allocated matching k need
perfect
multiple task case agents may express valuations costs sets tasks well
subsets sets tasks example agent may vi vi
vi agent gets executed gets value
get executed fails agent still obtains value similarly agent may
task execution costs ci ci ci capture
inter relationships valuations let kij set tasks within allocation k
performed agent j agent kij could empty set note task
specific task requester means agents request task task performer
consider agents requesting performance multiple units tasks although model
easily extensible case explanation much intricate



fit rust echanisms robust e fficient task llocation

putting one bid matched agent performs agent agent
abuse notation slightly define k ki k ii ki ki kii
k k kii agent value assuming tasks k completed cost
allocation k vi k ci k respectively whereby
vi k vi ki
ci k ci k
kh k

moreover within model agent eqos vector ij kh j hi
represents belief successful agents within system completing tasks kh
agent h thus general level agent type given v ci
j
e j k j eqos
given set tasks ki
thatfij mustperform subset tasks k


e j completed
e j fifi k j trust exactly set tasks k
vector let trj k








j trust computed shown section simply replacing agent
agent replacing single task set tasks single requester case trust
function represents aggregate belief agents given task performer hence
task requesters form probability
give agents eqos reports given

success
q j e j fifi j

e
tri ki ki
task performer finally let tri ki ki
ji

ready present generalised trust mechanism

allocation rule payment scheme
generalised mechanism gtbm task requesters first provide centre list
tasks require performed along valuation vector associated set
tasks whereas task performers provide costs performing sets tasks agents
submit eqos vector centre thus agent provides centre reports
bi b
b
b
bi report profile given centre applies
b

vi b
ci
rules mechanism order allocation k net payments ri agent
detail
centre computes allocation according following

b
k

arg max

x

k ki k ii k ii




x

e ki
k

e tri
vbi k






e fifi ki
b b
ci k
k



thus centre uses reports agents order allocation maximises
expected utility agents within system

b
agents carry tasks allocated allocation vector k

setup agent may want sets tasks performed may unable perform
tasks cases assign default value cost sets tasks
noted task performers task requesters time vice versa



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

centre computes payments agents conditional completion tasks allocated let ki indicator function takes value one ki set
tasks requested agent agents completed takes value zero
otherwise payment agent follows

ri





x
b


ji

x

e j k b
k
j









ej b
ej k
cj
vbj k





b
bi
k
bi



bi constant point view e computed independently
bi
agent reports may depend reports agents used
reduce payout centre make
discussed section centre faces trade reducing value bi
induces participation larger set types e types low eqos increases
centres payments agents making mechanism less profitable centre thus
scale payments one might expect application gtbm depends whether
centre decides satisfy individual rationality constraint thus making sure every
type wants participate shall see section centre decides satisfy
individual rationality constraint scale payments agent increases lower
bound trust values could derived eqos report
noted computation payments requires solving several optimisation e finding optimal allocation without several reports
number agents increases difficulty computing payments increase
important payments efficiently computed elaborate
solution section however detail prove economic
properties mechanism follows
economic properties
provide proofs incentive compatibility efficiency mechanism
prove values bi make mechanism individually rational
proposition gtbm incentive compatible
proof order prove incentive compatibility analyse agent best response e
bi b
bi first calculate expected
b agents report
best report
vi b
ci
utility agent derive given mechanism
place caveat notion incentive compatibility use section e
dominant strategy ex post nash equilibrium depending whether agent computes trust functions
agents pos reports true



fit rust echanisms robust e fficient task llocation



b true types given
expected utility agent reported types


b
ui

x



b b
e k
k











bi
bi
e ki
e tri k
b
vi k



bi
bi
ci k





b
eri





eri expectation ri taken respect likelihood task completion
e j equal one e tasks k
e j
probability attached indicator variable k
completed given
set
tasks requested j kj agents different report

b
e
b hence use formula payments obtain
trj kj kj






bi
bi
e j fifi kj
e j trj k
b
vbj k





x

ke j k b b
bi
b
eri
j
bi






ji
bi
bi
b
cj k

replace expression formula ui observe agent
b key point note agent computes
affect utility report changing k
b
value trust function true value rather reported value
equation implies allocations k




bi
bi
bi ui

ui


x

efficient allocation computed taking account true type reported
bi better equal allocation
types agents
given condition since equation applies possible realisations
mechanism incentive compatible
proposition gtbm efficient

proof given incentive compatibility mechanism centre receive truthful reports
agents compute allocation according equation thereby
leading efficient outcome
proposition exist values bi gtbm individually rational
proof begin making standard assumption agent derives ui
participating mechanism remains shown agent derives non negative
utility mechanism since efficient allocation chosen worst null allocation
expected utility agent greater equal bi according equation
since bi set mechanism individually rational
note possibly many values bi besides bi guarantee individual
rationality


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

speaking generally easily seen gtbm mechanism multiple task
multiple requester scenario generalisation gtbm mechanism single requester
single task generalisation mechanism porter et al simply assume
agent eqos probability success moreover
porter et al example bi specified follows


x

bi max v k pbi
bi
b
c
k

j

k ki

ji

pbi reported probability completion agent assigned task allocation
k ki set allocations excluding agent
extracting minimum marginal contribution

considered bi could set arbitrary values try reduce
payments made centre agents interestingly possible
standard vcg mechanism pay agent marginal contribution system
however case due interdependence valuations simple comparing
social welfare without given agent system commonly done vcg
mechanisms porter et al obvious example case
agent removed domain used compute efficient allocation remaining eqos
reports arbitrarily change allocation value could turn exploited agents
improve utility example section showing failure simple extension
porter et al mechanism illustrates point
assuming centre wants induce participation agent types propose
novel extracting marginal contribution agent taking account eqos
reports agents possible reports agent could make let ki set possible
allocations agent excluded society value bi chosen
equivalent social utility mechanism agent excluded eqos reports
chosen minimise social utility





x
x
bi
e j fifi kj
e j trj k

b b
cj k
bi
min
max
vbj k


kki

ji e
kj kj

noted bi computed lowest trust values could derived
eqos reports
generalised payment scheme







x x
b
b
ej b
ej k

k

c
k
v
b
ri
j
j



b
ji k
e j k
j





x
x
e j fifi kj
e j trj k

b b
cj k
vbj k

min
max
kki ji e
kj kj





fit rust echanisms robust e fficient task llocation

point note incentive compatibility hence efficiency mechanism
still holds given payment scheme still independent reports fact ri rewards
maximum difference agent could make setting elements different values

procedure reduces payments made centre keeping individual rationality
since value efficient allocation given incentive compatibility proven earlier
higher equal value bi means
ui k



x

ji



x

e j k
k
j





e j trj
vj k
x








e j fifi kj cj k
k



min
max
kki ji e

x

kj kj





e j trj
vj k







e j kj cj k
k

noted equation implies restriction placed
functional form trust function tr payment scheme work properties
mechanism hold improvement previous mechanisms see section
considered trust functions monotonically increasing
choice bi determines whether centre runs mechanism profit
hence understand scale payments may gtbm discussed section
consider following example
example n agents n requiring single task performed
agents value task performed zero cost
performing tasks eqos agent h agent probability succeeding
task
p



agent j h kj x h j n suppose trj
hi h kj n

example eqos agent interval x x viewed
lower bound expected probability success task equation
compute value bi
p

k x
x

j
hi h
bi
max

n
ji

note depending value bi could value n x
n n x n bi increases lower bound x agents eqos actual payment
agent depend success failure task e g payment bi tasks
fail equation calculate value expected payment agent


x kj
x
h
eri
max
bi

n
hi
ji


x j x


n
ji

minimisation takes place domain trust values could general case



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

j agent allocated task agent j efficient allocation rule let ev
total expected value tasks
p

j
x
ii
ev
n
ji

note total expected value tasks greater sum expected payments
agents

j


p
j
x
x
x

x
ii


n
n
ji

ii

ji

thus centre profits mechanism lower bound difference total
p

n x n note lower
expected value total expected payments ii
bound centres profit mechanism increases lower bound eqos x
pointed discussion example section centre trying minimise payments could give individual rationality increasing bi cost inducing
agent types participate mechanism may appealing probability
task failure high cases centre may prefer avoid paying amount almost large
total value tasks hand number practical applications centre
may want use mechanism induces participation types described section
certainly case example lower bound eqos e lower bound
probability tasks successful high moreover mechanism participation
types appropriate centre mainly seeks maximise social welfare consider example government trying boost economy major public infrastructure projects
order may willing invest trust mechanism get best infrastructures built cheapest cost moreover government may willing make low profit
order ensure survivability construction companies guaranteeing payoff
participate mechanism another example company might want involve
task performers would company trying acquire much information possible
task performers order maximise returns future decisions following running scenario say movepictures com needs contract video editing company add computer
graphics movie may become blockbuster graphics well done case task
successful moviepictures com likely get many contracts future therefore critical
available information collected agents order choose reliable video
editing company case moviepictures com may accept smaller short run profit running
mechanism full participation order guarantee selected agent best one
future contracts obtained
summarise section devised mechanism incentive compatible individually rational efficient task allocation uncertainty multiple distributed reports
used order judge uncertainty noted need two stage mechanisms work mezzetti settings condition payments
completion tasks indicator function captures dependence payments task
completion far considered economic properties mechanisms
argued earlier part picture next section report implementation


fit rust echanisms robust e fficient task llocation

implementing generalised trust mechanism
shown addition trust basic task allocation complicates
payment scheme requires larger number important optimisation steps normal
vcg detail trust mechanisms require agents specify expected value set
tasks depending performer tasks turn means space solutions
explored significantly larger common task allocation moreover payment
scheme trust mechanisms requires finding efficient allocation multiple times
without agents reports added level complexity important
mechanisms actually implementable solutions found usefully sized
reasonable time
background section describe first formulation implementation gtbm particular gtbm tackle main optimisation posed
equation repeated several times payment scheme commonly
referred winner determination combinatorial auctions order solve
take insight solutions combinatorial exchanges often map well
studied matching kalagnanam parkes engel wellman lochner
develop novel representation optimisation hypergraphs
describe relationships valuations trust bids task performers cast
special hypergraph matching given representation able
solve integer programming techniques concise formulation
objective function constraints
representing search space
important define search space way relationships valuations bids
trust tasks clearly concisely captured particular representation aims map
gtbm optimisation matching well studied literature
representation must allow us define whole space feasible task allocations
subsequently define select valid solutions gtbm optimisation
allow bidders task performers askers task requesters express bids valuations consistent implementable way choose xor bidding language bidding
language requires auctioneer accept one bid xor bid
xor bid belong one agent choose particular bidding language
shown valuation expressed nisan example xor
bid context would ci xor ci xor ci means agent
would go one three bids tasks ci could replaced
vi task requesters terms running example bid would express poorrender
ltds cost performing sound editing task e movie production task e
combination e
already known computing efficient allocation payments vcg mechanisms np hard sandholm
suri gilpin levine therefore finding efficient solutions vcg mechanisms already significant
challenge right
bidding languages describing atomic bids nisan could equally well used
model would require minor changes constraints need apply



fir amchurn ezzetti g iovannucci rodriguez dash j ennings



v
h






































h



c





















figure graphical representation gtbm search space nodes colour represent valuation
cost nodes belong agent nodes v belong agent c belong
agent edges colour originate node end node

build overall representation first focus representing expected valuations costs well relationships depicted figure detail
specify three types nodes valuations along v column bids c column
task per bidder nodes column node vi v column stands
valuation submitted agent set tasks node cj c column stands
j
bid issued agent j tasks element represents allocation

single task task performer bidder j task requester yet determined represented dot words elements represent patterns single task allocations
term elements task per bidder nodes
note possible different valuations come requester
labelled subscript moreover since opted xor bidding language
valuations belonging requester mutually exclusive


fit rust echanisms robust e fficient task llocation

efining r elationships



valuations tasks



b ids

j
node vi v
given nodes defined v c relating node
define assignment task j specific valuation vi similarly
j
node cj c define assignment task
relating node
j
j
specific bid cj agent j therefore triple v
c v v
c c
fully characterises allocation task namely single task allocation hence seen
figure define two types relationships valuations task per bidder nodes
noted edges e e bids task per bidder nodes noted edges e e
relationships valuation related set task per bidder nodes
fully cover performance task valuation instance relate
v nodes agent performs task agent performs task
guarantee performance tasks similar valuation relationships node c
related set task per bidder nodes bid splits thus figure
bid c related whereas bid c related nodes
thus identify task performers task given valuation critical since
gtbm contrary common task allocation mechanisms vcg mth price auctions
requires identify exactly performs task order determine pos task
virtue requesters trust performer hence expected value task
seen representation allows us capture tasks performers tasks
since valuation node v potentially related multiple nodes likewise
bid c column potentially related multiple nodes capture related relationships precisely define special edges connect several nodes e g ones depicted
e e e e figure edges termed hyperedges combine number
singleton edges hence figure best described hypergraph berge order
precisely define matching gtbm poses elaborate formalism
hypergraphs since help concisely expressing later specifically
formal notion hypergraphs introduced berge

definition hypergraph let x x x xn finite set n elements let e
ej j j family subsets x j family e said hypergraph
x
ej j j
jj ej x
pair h x e called hypergraph elements x x xn called vertices
sets e e ej called hyperedges
say hypergraph weighted associate hyperedge e e real number
w e called weight e used give less importance edges
formal definition hypergraphs observe figure overlapping two separate hypergraphs valuation hypergraph occurs linking valuations
figure depicts sample possible relationships ease illustration



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

task per bidder nodes ii bid hypergraph occurs linking bid corresponding task per bidder nodes follows formally define hypergraphs valuations bids later structurally characterise notions feasible optimal
allocations
valuation h ypergraph
valuation hypergraph highlights main difference gtbm common combinatorial exchanges e g traditional vcg mth price auctions particular
gtbm valuations need take account trust task requester task performer
normal combinatorial exchanges task requesters indifferent task performers
means weight hyperedge valuation hypergraph dependent trust large
number edges need generated one per task performer case normal
combinatorial exchanges
define valuation hypergraph need define hyperedges emanate node
v one nodes end let v vi c cj
j sets valuations bids respectively let j
cj set tasks agent j submits bids hence
kj k j j cj c set containing tasks bid bidder
furthermore need define auxiliary sets follows given valuation set
tasks set nodes fulfils


kj

kj

instance set nodes fulfils valuation hence
subsets fulfil valuation set tasks expressed defined


kj
kj

instance considering example figure


given definitions define set hyperedges connected valuation
vi v
eiv aa vi
instance figure
e v e e e e v e e
e v e v
recall since mechanism proven incentive compatible use agents true valuations
costs instead reported counterparts



fit rust echanisms robust e fficient task llocation

set hyperedges containing valuations agent defined

eiv
eiv

set hyperedges connecting nodes v nodes defined

ev
eiv
ii

given define valuation hypergraph pair
hv v e v
thus hyperedge hv consists single valuation vertex corresponding element v
along complete task allocation valued tasks task per bidder nodes
valuation hypergraph hv partly defines space within solution needs found
however order define quality solution found important define weight
attached hyperedge hypergraph hv weight hyperedge actually equal
expected value allocation tasks set task performers bidders consider
instance valuation v possible matchings fulfil represented
pairs example hyperedge e involving pairing denotes
agent performs task agent agent performs task agent expected valuation
associated allocation depends pos agents performing tasks
respectively
case expected valuation associated e assessed
v v p p
v p p
v

p





p

p function returns pos agent assigned given task computed
confidence reputation trust notice value pi kij represents probability
agent failing perform task k agent j since requests submitted alone
v v thus expected valuation associated particular allocation represented
arc e becomes v v p p similar argument
obtain v v p p v corresponding
hyperedge e
generalising given hyperedge e e v valuation vi readily build allocation
tasks elements e vi p function returns pos
confidence reputation trust given task performer requesters point view
compute expected valuation allocation defined hyperedge e follows


x




v
pj lji
pj wji

vi

lj e l
lj e w


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

words given hyperedge e e v weight assessed equation
equivalent expected value computed equation e sum expected values
allocations agent given edge valuation hypergraph assigned
weight hv termed weighted hypergraph
b id h ypergraph
define bid hypergraph need determine hyperedges connect bids task perbidder nodes detail given bid cj c relate task per bidder nodes
constructing hyperedge ejc cj kj k hyperedge assigned weight
equal cost cj set hyperedges containing bids agent
defined

eic
eci

given set hyperedges connecting nodes c nodes defined

ec
eic
ii

finally define bid hypergraph pair
hc c e c
words hyperedge hc consists single bid vertex corresponding element
c along corresponding task per bidder nodes notice definitions valuation
bid hypergraphs ensure hyperedge h v contains single valuation v
hyperedge h c contains single bid c
efining atching p roblem gtbm
defined valuation bid hypergraphs structurally characterise notions
feasible optimal allocations needed determine computational complexity
define objective function particular purpose must firstly recall
notions hypergraph theory hypergraph two hyperedges said adjacent
intersection empty otherwise said disjoint hypergraph h x e
family e e defined matching hyperedges e pairwise disjoint respect
given matching e vertex xi said matched covered hyperedge e
incident xi vertex matched said unmatched exposed matching
leaves vertices exposed said complete
definitions characterise feasible allocations gtbm follows
first must matching valuation hypergraph necessarily complete
valuations may remain exposed second must another matching bid hypergraph
necessarily complete two matchings must related following manner
task per bidder nodes matchings words given task perbidder node must related valuation node bid node else excluded
matchings way valuations bids linked create single task allocations
instance figure e belongs matching valuation hypergraph e must


fit rust echanisms robust e fficient task llocation

part matching bid hypergraph ensure bid
e e e part matching bid hypergraph ensure bid
formally




definition feasible allocation say pair e v e c defines feasible allocation iff


e v matching hv


e c matching hc




matched e v matched e c




given feasible allocation e v e c defined straightforward assess expected utility agents within system follows
x

ee v

w e



x

w e


e e c

since weights hyperedges valuation hypergraph stand expected valuations
weights hyperedges bid hypergraph stand costs solving equation
gtbm amounts finding feasible allocation maximises expected utility agents
within system therefore following definition naturally follows
definition gtbm task allocation assessing task allocation
maximises expected utility agents within system amounts solving
arg max
e


v


e c

x

ee

wv e

x

wc e




e e c

v



e v e c stands feasible allocation
defined matching gtbm next describe solution
integer programming techniques commonly used solve
cerquides endriss giovannucci rodrguez aguilar
integer programming solution
section map posed equation integer program
papadimitriou steiglitz efficiently implemented solved given
translation resulting program solved powerful commercial solvers ilog
cplex lingo
special purpose e g dynamic programming search trees could designed solve
combinatorial however understand magnitude compare difficulty
solving similar believe better first attempt solution
standard techniques ip
http www ilog com
http www lindo com



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

bjective f unction



ide c onstraints

translation equation ip reasonably straightforward given representation
thus solving gtbm task allocation amounts maximising following objective
function
x

xe wv e

x

ye wc e



e e c

ee v

xe binary decision variable representing whether valuation hyperedge
e selected ye binary decision variable representing whether bid
hyperedge e selected thus xe decision variable selects given valuation
given task bidder matching ye selects given bid
however side constraints must fulfilled order obtain valid solution first
semantics bidding language must satisfied second hyperedge containing set taskper bidder nodes selected must ensure bids covering nodes selected
moreover employ xor bidding language auctioneer centre case
select one bid per bidder one valuation per asker thus bidders
constraint translates
x
ye

e eic

instance figure constraint ensures auctioneer selects one hyperedge e e
e since belong agent come nodes labelled subscript
c
valuations xor constraints involving collected following expression
x
xe

eeiv

instance figure constraint forces auctioneer select one hyperedge e e
e e e since belong agent come nodes labelled
subscript v
valuation hyperedge e e v selected set task per bidder nodes connected
e must performed corresponding bidder agent instance figure hyperedge
e selected task per bidder nodes must covered bid agent
case bid c one covering tasks thus select hyperedge e
forced select bid c selecting hyperedge e thus terms hyperedges must
ensure number valuation hyperarcs containing given task per bidder node less
equal number bid hyperarcs containing graphically means number
incident valuation hyperedges given node must less number incident bid
hyperedges
x

ee v kj e

xe

x

ye

kj



e e c kj e

case free disposal e allow agents execute tasks without asked
simply replace summarise solving gtbm task allocation


fit rust echanisms robust e fficient task llocation

amounts maximising objective function defined expression subject constraints
expressions next determine complexity
c omplexity r esults
represented gtbm task allocation defined corresponding ip formulation analyse computational complexity order difficulty solving gtbm
identify main parameters affect computational costs finding optimal allocation parameters allow us determine settings gtbm
practically used
proposition gtbm task allocation n p complete cannot approximated
ratio n polynomial time unless p zpp n total number bids
valuations
proof notice optimisation model formalised equation naturally translates
combinatorial exchange kalagnanam davenport lee translation achieved
representation taking goods combinatorial exchange dummy tasks
bids elements c asks weights hyperedges hv thus
bids remain exchange number valuations may significantly increase
reason introduction trust theoretical model makes initial valuations asks
elements v allocation dependent hence every single valuation v causes several asks
originated exchange considering bidder task may allocated
see examples section shown sandholm et al decision
binary single unit combinatorial exchange winner determination n p complete
optimisation cannot approximated ratio n polynomial time unless p zpp
n number bids therefore optimisation n p hard
gtbm
proof understood search space gtbm task allocation
significantly larger traditional combinatorial exchanges dependency valuations bidders performing tasks follows provide formula
allows us calculate exactly big search space allows us determine whether
instance solved actually handled solver limits
memory requirements computation time
detail say ak subset containing task per bidder nodes referring
tasks formally ak kj j example figure
thus expression assess number feasible allocations
e v

x x



ak



ii vi k

observe number possible allocations computed cardinality e v e
number valuation hyperarcs since exactly determines number ways valuations
satisfied provided bids total number decision variables integer program
thus e v e c since number expected valuations several times larger number
bids expect number decision variables associated bid hyperedges much less


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

number valuation hyperedges hence assuming e c e v number decision
variables order e v
order understand implications parameters consider case task
performers bid tasks requesters submit single valuation tasks specifically
consider scenario task performers requesters tasks given case
ak number allocations ev reality agents may
able submit bids asks tasks would significantly lower number
allocations given possible matchings hence see whether instances practically
solved appendix report running times solver showing instances less
variables comfortably solved within seconds worst case taken
together empirical formula compute size input e equation
allow us affirm even computational cost associated gtbm potential
rather high solution handle small medium sized reasonable time see
table however seen time complete grows exponentially number
set




tasks




task requesters




task performers




worst case running time

mins
days

table average running times different numbers tasks agents taken sample runs set
sample runs sets

tasks experimental analysis found impact increasing number
task performers task requesters significant increasing number tasks
explained fact given setup larger number tasks allows significantly
matchings bids asks larger number bids asks hence many task
requesters performers accommodated small numbers tasks noted
expect worst case occur fairly rarely average much less half
instances generated parameters shown figure appendix
described complete picture gtbm implementation next discuss
important issues may arise trying use gtbm task allocation

discussion
developed task allocation mechanisms operate effectively agents
cannot reliably complete tasks assigned specifically designed novel generalised
trust mechanism efficient individually rational mechanism deals
case task requesters form opinions task performers reports environment direct interactions performers addition studying economic
properties allocation mechanisms provided optimisation model generates solutions guarantee efficiency mechanism optimisation model first solver
trust mechanisms mechanisms value allocation depends
performer allocation integer programming shown
input explodes combinatorially due huge number possible allocations must
enumerated nevertheless computational cost associated gtbm shown


fit rust echanisms robust e fficient task llocation

rather high given implementation still able manage small medium sized
reasonable time
speaking generally work trust mechanisms number broader implications first gtbm shows explicitly blend work trust work
mechanism design since mechanism guarantees certain properties hold task allocation
used well founded testbed within trust evaluated trust mainly tested randomly generated scenarios
interactions obey somewhat ad hoc market rules used art testbed fullam
klos muller sabater topol barber rosenschein vercouter second work
first single stage interdependent valuations mechanism efficient individually rational
opposed mezzettis two stage mechanism made achievable settings
consider capturing interdependence types trust function making
payments agents contingent actual execution tasks another novelty
able extract maximum marginal contribution agent despite valuations interdependent shown section third implementation gtbm
highlights importance considering computational aspects mechanism since
determine whether mechanism implementable realistic scenarios indeed
bring claimed benefits work strong statement direction since provide
complete picture starting representation implementation
sample complexity analysis
practical terms gtbm step towards building robust multi agent systems uncertain
environments environments important aggregate agents preferences
taking account uncertainty order ensure solutions chosen best
possible outcome whole system prior gtbm possible come
efficient solution would maximise expected utility moreover fact agents
express perception task performers pos way building expressive
interactions buyers sellers services sandholm believe
perceptions expressed better ensuing matching buyers sellers
proof gain efficiency better matching brings see sections

introducing gtbm class mechanisms work lays foundations several
areas inquiry end outline main areas
budget balance important economic property mechanisms contexts budget
balance however mentioned section designed tbms without
considering budget balance fact gtbm budget balanced similar vcg
porter et al mechanism one possible way overcoming sacrifice
efficiency individual rationality fact dagva mechanism counterpart
vcg indeed sacrifice individual rationality budget balance see section
moreover parkes kalagnanam eso develop mechanisms number
budget balancing schemes proposed near incentive compatibility attained
making payments agents close possible vcg ones
mechanism budget balanced computes transfers allocation overall transfer system
zero mascolellp
et al thus budget balanced mechanism allocation k associated transfer
vector r ri r ri



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

effective scheme threshold rule low loss incentive compatibility
relatively high efficiency around budget balance may useful
situations centre cannot run risk incurring loss generating efficient
outcome set agents system example moviepictures com may
worth injecting money system efficient outcome subunits
nearly equally competitive price pos instead moviepictures com might
prefer mechanism generates near efficient outcome increasing bi discussed
section set agents participate might reduced
individually rational participate mechanism nevertheless
moviepictures com may obtain better outcome future study trade offs
efficiency achieved system profit made centre
trust task requesters one potential criticism mechanisms
task requesters centre must trusted reveal observed execution task
mezzetti however setting task requesters strong incentive reveal
observations case publicly visible since would prefer chosen
task performer available next time mechanism run end must
ensure task performer go bankrupt noted equations
task performer would pay significant amount centre case reported
fail task hence task requester better revealing successful execution
task performer indeed successful
another issue trust function used weights given agents eqos report
may uncertain thus case agents may learn weights multiple
interactions given important develop learning search techniques
able deal large number possible weights could used trust
functions techniques take account fact agents may lose
significantly exploring search space
iterative mechanisms gtbm one shot mechanism allocation
payments calculated given type agents v c trust
however cases participants may engaged repeated interactions
exploited trust order build accurate trust values counterparts
situations introduction multiple rounds compromise properties
mechanism allowing greater range strategies e g cornering market consistently offering low prices initial rounds accepting losses initial rounds providing
false damaging information competitors however explosion strategy
space implies agents might able compute optimal strategy due
intractability process one way solving constrain
strategies agents myopic e best response current round shown
parkes ungar proxy bidding another allow agents learn trust
without participating allocation agents accurate representation trust functions pos values mechanism implemented
one shot encounter note arises one shot mechanism
implemented iterative context solely realm gtbm


fit rust echanisms robust e fficient task llocation

computational cost discussed section developed compute
efficient allocation run multiple times compute individual payments
agents tbms hence time needed compute allocation pay agents
may impractical agents limited time solution put forward large
number bids ask large number tasks performed hence important
less complex mechanisms described nisan ronen
approximate computationally less expensive developed solve
archer papadimitriou talwar tardos require work
developing local approximation approximate mechanisms preserve
properties seek vein provides point departure
future mechanisms since provides efficient mechanisms approximate
ones compared
acknowledgments
thank anonymous reviewers highly valuable comments allowed us
improve upon previous version restrictive mechanism
helped rework proofs grateful juuso valimaki initial comments
mechanism ioannis vetsikas enrico gerding archie chapman checking proofs
discussing ideas juan rodriguez aguilar thanks iea tin c agreement
technologies consolider csd ingenio jose castillejo programme
jc spanish ministry science innovation andrea giovannucci funded
juan de la cierva contract jci eu funded synthetic forager project
ict sf claudio mezzetti thanks fondazione cassa di risparmio di padova e rovigo
support undertaken part aladdin autonomous
learning agents decentralised data information systems project jointly funded
bae systems epsrc engineering physical council strategic partnership
ep c

appendix analysing performance ip solution
section analyse computational performance integer programming solution
detailed section order gauge sizes solved reasonable time
end important recall shown section number input variables
optimization nearly equal number valuation hyperedges ev since ec ev
given assume performance solver directly related number
possible allocations approximated ev
therefore test set composed several instances gtbm task allocation
characterised number possible allocations detail produce allocations bids
valuations generated number bids submitted single bidder number
valuations submitted single requester follow geometric distribution p parameter
set milton arnold order randomly generate relatively large numbers
bids asks per agent medium sized set follows number negotiated tasks
set number task performers set number task requesters set
setting p higher would fewer bids asks per agent



fir amchurn ezzetti g iovannucci rodriguez dash j ennings

average number generated valuations instance average number bids
finally number runs experiments experiments performed
xeon dual processor machine ghz cpus gb ram commercial software employed
solve integer program ilog cplex



clock time optimal solution seconds


























possible allocations










x

figure performance ip solution

shown figure specifically x axis represents number allocations
given instance axis represents time seconds elapsed solving
corresponding instance notice dependence difficulty
number allocations quite clear moreover seen possible solve
less variables within seconds important note performance
solver used critical case future advancements mixed integer programming mip
solvers cpu clock speeds improve
given since provide general formula see equation compute
priori number generated allocations possible estimate feasibility general
performing means system designer ask task requesters
performers constrain number tasks ask number bids issue come
input solved program reasonable time important
however design special purpose deal larger inputs left
future work

references
archer papadimitriou c talwar k tardos e approximate truthful mechanism
combinatorial auctions single parameter agent internet mathematics


fit rust echanisms robust e fficient task llocation

arrow k j property rights doctrine demand revelation incomplete information boskin ed economics human welfare academic press
berge c graphs hypergraphs north holland publishing company
byde comparison mechanisms sequential compute resource auctions
proceedings fifth international joint conference autonomous agents multiagent systems aamas pp acm press
cerquides j endriss u giovannucci rodrguez aguilar j bidding languages
winner determination mixed multi unit combinatorial auctions proceedings
twentieth international joint conference artificial intelligence pp
dasgupta p trust commodity gambetta ed trust making breaking
cooperative relations pp blackwell
dash r k parkes c jennings n r computational mechanism design call
arms ieee intelligent systems
dash r k ramchurn jennings n r trust mechanism design
proceedings third international joint conference autonomous agents multiagent systems aamas vol pp
daspremont c gerard varet l incentives incomplete information journal
public economics
dellarocas c goodwill hunting economically efficient online feedback mechanism
environments variable product quality proceedings aamas workshop
agent mediated electronic commerce pp
engel wellman p lochner k bid expressiveness clearing
multi attribute double auctions proceedings seventh acm conference electronic
commerce ec pp
fullam k klos muller g sabater j topol z barber k rosenschein j vercouter
l agent reputation trust art testbed architecture proceedings
aamas workshop trust agent societies pp
hershberger j suri vickrey pricing network routing fast payment computation
proceedings forty second ieee symposium foundations computer science
pp
jehiel p moldovanu b efficient design interdependent valuations econometrica

jennings n r faratin p norman j obrien p odgers b alty j l implementing business process management system adept real world case study international journal applied artificial intelligence
jurca r faltings b incentive compatible reputation mechanism proceedings
ieee conference e commerce cec pp
jurca r faltings b minimum payments reward honest reputation feedback
proceedings seventh acm conference electronic commerce ec pp


fir amchurn ezzetti g iovannucci rodriguez dash j ennings

jurca r faltings b obtaining reliable feedback sanctioning reputation mechanisms
journal artificial intelligence jair
kalagnanam j davenport j lee h computational aspects clearing continuous double auctions assignment constraints indivisible demand tech rep ibm
rc
kalagnanam j parkes c auctions bidding exchange design simchi levi
wu shen eds handbook quantitative supply chain analysis modeling
e business era international series operations management science
chap kluwer
krishna v auction theory academic press
mascolell whinston green j microeconomic theory oxford university press
mezzetti c mechanism design interdependent valuations efficiency econometrica

mezzetti c mechanism design interdependent valuations surplus extraction economic theory
miller n resnick p zeckhauser r eliciting honest feedback peer prediction
method management science
milton j arnold j c introduction probability statistics principles applications engineering computing sciences mcgraw hill inc
nisan n bidding languages combinatorial auctions cramton p shoham
steinberg r eds combinatorial auctions pp mit press
nisan n ronen computationally feasible vcg mechanisms journal artificial
intelligence jair
papadimitriou c h steiglitz k combinatorial optimization complexity prentice hall inc upper saddle river nj usa
parkes c kalagnanam j r eso achieving budget balance vickreybased payment schemes exchanges proceedings seventeenth international joint
conference artificial intelligence ijcai pp
parkes c ungar l h preventing strategic manipulation iterative auctions proxy
agents price adjustment proceedings seventeenth national conference artificial intelligence twelfth conference innovative applications artificial intelligence pp
porter r ronen shoham tennenholtz fault tolerant mechanism design
artificial intelligence
ramchurn huynh jennings n r trust multi agent systems knowledge engineering review
sandholm expressive commerce application sourcing conducted
billion generalized combinatorial auctions ai magazine


fit rust echanisms robust e fficient task llocation

sandholm suri gilpin levine winner determination combinatorial
auction generalizations proceedings first international joint conference autonomous agents multi agent systems aamas pp
sandholm w implementation contract net protocol marginal cost
calculations proceedings twelfth international workshop distributed artificial
intelligence pp
teacy w l patel j jennings n r luck travos trust reputation
context inaccurate information sources autonomous agents multi agent systems

walsh w wellman market protocol decentralized task allocation proceedings third international conference multi agent systems icmas




