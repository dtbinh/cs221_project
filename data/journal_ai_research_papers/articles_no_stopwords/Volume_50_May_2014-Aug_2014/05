journal artificial intelligence

submitted published

automatic portfolio configuration
pbp
alfonso emilio gerevini
alessandro saetti

alfonso gerevini unibs
alessandro saetti unibs

dipartimento di ingegneria dellinformazione
universita degli studi di brescia
via branze brescia italy

mauro vallati

vallati hud ac uk

school computing engineering
university huddersfield
huddersfield west yorkshire hd dh uk

abstract
field domain independent several powerful planners implementing
different techniques developed however one systems outperforms
others every known benchmark domain work propose multi planner
automatically configures portfolio techniques given
domain configuration process given domain uses set training instances
compute analyze alternative sets macro actions planner
portfolio identifying possibly empty useful set ii select cluster planners
one identified useful set macro actions expected perform best
iii derive additional information configuring execution scheduling
selected planners time resulting system called pbp portfoliobased planner two variants focusing speed plan quality different versions
pbp entered learning track sixth seventh international
competitions experimentally analyze pbp considering speed
plan quality depth provide collection help understand pbps
behavior demonstrate effectiveness configuring portfolio
planners macro actions

introduction
last fifteen years field automated plan generation achieved significant
advancements several powerful domain independent planners today available e g
propositional hoffmann nebel lpg gerevini saetti serina
sgplan chen hsu wah fast downward helmert lama
richter westphal moreover systems performs well
less large class domains well known one
outperforms others every available benchmark domain see e g roberts howe
would useful multi planner system automatically selects
combines efficient planner portfolio given domain
c

ai access foundation rights reserved

figerevini saetti vallati

performance current systems typically affected structure
search space depends considered domain many domains
performance improved exploiting knowledge domain
structure explicitly given part input formalization
automatically derived particular several approaches encoding additional knowledge form macro actions proposed e g botea enzenberger muller
schaeffer newton levine fox long macro action macro short
sequence actions planned one time single action
macros important tradeoff consider use speedup
process reduces number search steps required reach solution
increases search space size could slow process moreover
known effectiveness macros depend set
macros increase performance planner decrease irrelevant
another
propose automatically configuring portfolio existing
planners possibly useful set macros configuration relies
statistical analysis performance planners portfolio usefulness
automatically generated sets macros considering set training instances
given domain configuration knowledge automatically generated
analysis consists cluster planners defined ordered subset planners
initial portfolio time combined round robin strategy
set useful macros planner sets time slots
time slots specify amount cpu time allocated planner cluster
resulting system called pbp portfolio planner
current implementation pbp incorporates two systems generation
macros nine efficient planners architecture open consider current
future planner additional alternative system pbp used without configuration knowledge planners portfolio scheduled without macros simple
round robin strategy predefined cpu time slots assigned randomly
ordered planners pbp used configuration knowledge domain consideration selected cluster planners possibly relative selected
sets macros scheduled ordering favors planners configuration
performed best time slots defined computed configuration
knowledge selection exploitation macros pbp worth noting
planners portfolio configured pbp necessarily use macros learned
configuration process system evaluates planner portfolio
set macros computed well empty macro set
independent systems
pbp two main variants pbp focusing speed pbp q focusing plan
quality preliminary implementation pbp gerevini saetti vallati entered
learning track sixth international competition ipc overall
winner competition track fern khardon tadepalli recently
observed ipc organizers surprisingly ipc use configuration
knowledge considerably speedup version pbp reasons implementation bugs concerning configuration phase phase inefficient use



fiplanning automatic portfolio configuration pbp

revised optimized version pbp speed quality variants entered
learning track seventh competition ipc winner
competition track coles coles olaya celorrio lopez sanner yoon
large experimental analysis presented provides collection
help understand performance behavior pbp effectiveness portfolio
configuration methods particular analysis confirms good performance
pbp context ipc benchmarks ii compares pbp existing
approaches configure planner portfolio iii evaluates accuracy pbps
identify effective cluster planners strength configured
unconfigured multi planner respect single planner iv investigates usefulness
macros considered benchmarks showing pbp selects useful macro sets
v examines execution scheduling configuration pbp selected planners
configured portfolio demonstrating default strategy works well compared
possible strategies considered analysis
several ideas techniques investigated context pbp use build previous
work besides presenting evaluating effective configuring planner
portfolio presented corroborates validates evaluates
hunches empirical studies done researchers particular
experimental analysis confirms certain sets macros useful accelerate
speed improve plan quality botea et al coles smith newton
et al others harmful diversity techniques important
construction effective planner portfolio observed e g roberts howe
round robin scheduling planner execution times robust
strategy planner portfolio howe dahlman hansen vonmayrhauser scheetz
roberts howe
remainder organized follows section discusses related work
section describes pbp section presents experimental
study finally section gives conclusions

related work
section brief presentation prominent work portfolio
design automated reasoning describe related work others planner portfolio
design automated pointing important differences pbp
related work specific differences similarities indicated
following sections presenting technical
portfolio design automated reasoning
field automated reasoning idea portfolio techniques
investigated several researchers prominent example work gomes selman
conducted theoretical experimental study parallel run stochastic
solving computationally hard search work shows
linux shell scripts evident especially small easy corrected
competition obtaining much better gerevini et al



figerevini saetti vallati

conditions running different stochastic parallel give computational gain
running multiple copies stochastic parallel
many papers portfolio design concern definition select
best instance certain according values
predetermined features instance rice example portfolios
designed aim solve instances sat maxsat qbf matos planes
letombe marques silva pulina tacchella xu hutter hoos leytonbrown satzilla prominent example portfolio designed sat
xu et al satzilla uses machine learning techniques build predictor
runtime class sat solvers satzilla attempts solve instance sat
computes values features instance predicts performance
sat solvers incorporates selects promising sat solvers order
accordingly predicted performance finally runs selected sat solvers
established ordering predicted required cpu times
matos et al propose portfolio solving maxsat
portfolio computes values several features given instance maxsat
estimates runtime solver portfolio solves instance
estimated fastest solver estimation done linear model configured
performing ridge regression marquardt snee similarly pulina tacchella
study portfolio solving qbf identify features
qbf investigate usage four inductive select best
solver use according values identified features
planner portfolio design automated
regarding automated prominent planners combining one
proposed blackbox kautz selman use variety satisfiability engines initial version included graphplan hoffmann nebel
lpg gerevini et al gerevini saetti serina sgplan chen et al
include backup strategy alternative search technique run
default method fails combination systems straightforward
use automatic portfolio configuration
previous work planner portfolios includes proposed howe collaborators howe et al roberts howe roberts howe wilson
desjardins rest refer howe collaborators name first planner portfolio bus howe et al although
analysis consider recent techniques planner
portfolio configuration learns performance set planners
time round robin policy used schedule runs planners
set learned exploited determine order runs
configuration knowledge derived domain independent performance
planners built several predictive weka data mining
package witten frank set planners forming portfolio determined
set covering solved training across several different
domains


fiplanning automatic portfolio configuration pbp

work bus originally inspired pbp similarities
computes uses different configuration knowledge methods selecting
ordering portfolio planners considerably different portfolio configuration
pbp generates domain optimized clusters planners selection ordering
pbp statistical analysis planners performance set training
wilcoxon sign rank test known wilcoxon matched pairs
test wilcoxon wilcox finally system compute analyze use
macros consider plan quality
similarly work howe et al roberts howe techniques used cenamor de la rosa fernandez fawcett vallati hutter
hoffmann hoos leyton brown learn performance set planners
according predetermined features work cenamor et al features derived sas representation
learned used determine planners run order
long selected planners run sequentially amount cpu time
uniformly assigned determined predicted execution time experimental work cenamor et al domains different
used learn configured portfolios perform worse running
unconfigured portfolio consisting incorporated planners uniform cpu time
assigned
work described fawcett et al focused generating accurately predicting planners runtime exploit large set instance features
derived pddl sas representations sat encoding
short runs planners experimental work
fawcett et al indicate generated performance able produce
accurate runtime predictions
fast downward stone soup abbreviated fdss selecting combining set forward state techniques helmert roger karpas
ipc scoring function fdss evaluates class candidate techniques basis
performance set training instances different domains
builds domain independent sequential portfolio forward planners hill climbing searching space possible sequential combinations evaluated candidate
techniques automatic portfolio configuration fdss pbp aims building different types systems single efficient domain independent planner portfolio
fdss efficient domain optimized portfolio planner given domain pbp
configuration processes resulting configured portfolios fdss pbp
significantly different particular pbp configures portfolio generic planners
different styles one possibly empty set useful learned macros
considered fdss domain independent purpose moreover
execution scheduling strategy pbp runs selected planners round robin rather
sequentially
context wilcoxon sign rank test previously used work
long fox gerevini haslum long saetti dimopoulos gerevini et al
roberts howe



figerevini saetti vallati

parlpg vallati fawcett gerevini hoos saetti b fast downward autotune
fawcett helmert hoos karpas roger seipp configure parameters planners lpg fast downward helmert respectively set training
given domain order obtain combinations parameters two planners
perform especially well given domain frameworks uses stochastic local
search procedure paramils search high performance configurations parameters
evaluating promising configurations hutter hoos stutzle hutter hoos leytonbrown stutzle extended version fdss seipp braun garimort helmert
involves twenty one configurations fast downward obtained configuring parameters fast downward autotune twenty one different domains fawcett et al
combined several alternative sequential strategies allocating cpu
times
asap vallati chrpa kitchin recent system selecting promising planner set candidates planners derives much power use
entanglements chrpa bartak chrpa mccluskey entanglements
relations operators predicates used reformulate domain model
removing unpromising operator instances restricting applicability actions
certain states resulting modified domain become significantly
easier solve planner hand since asap uses approximate method
decide entanglements pspace complete chrpa mccluskey osborne
solvable original domain become unsolvable reformulated domain given domain modified entanglements set planners
asap identifies promising planners one highest ipc score
jimenez coles coles set training

automated planner portfolio design pbp
section introducing preliminaries defining configuring
planner portfolio execution solve describe architecture
techniques configure execute planner portfolio
preliminaries configuring executing planner portfolio
differently existing work portfolio design
aware pbp design planner portfolio solving specific instance
according values predetermined features instance
instead gathered according domains planner portfolio designed whole domain basis choice empirical
observation often exists single planner combination planners performs generally better domain seems something
peculiar automated hold types reasoning
makes pbp somewhat atypical general literature portfolio design
let domain cpu time limit p set n planners initial
portfolio predefined parameter values configuring
p consists computing set triples hpi mi si n
pi p mi possibly empty set macro operators learned pi domain si


fiplanning automatic portfolio configuration pbp

sequence increasing cpu times cpu times real numbers called
time slots time lower equal
output set triples identified portfolio configuration configured
planner portfolio p rest called selected
planner cluster simply cluster depending planners macros
time slots chosen many candidate solutions portfolio configuration
special case call unconfigured planner portfolio defined
hpi spre p spre predefined h seconds
bus pbp uses round robin policy scheduling runs planners
configured portfolio let hpi mi si planner portfolio configured
domain portfolio executed solve roundrobin scheduling processes process corresponds running planner pi
macros mi pi mi short according order time slices derived
sequences precisely circular order planners determined
considering values defined first time slot
sequences sm ti tj pi ordered pj ti tj relative order pi
pj arbitrarily decided e case pi runs pj iff j every j
j planner pi mi initially run total cpu time allocated
process ti planner terminates earlier planner pi mi terminate
within assigned time slot ti suspended resumes next time
time slot assigned additional cpu time assigned processes
already terminated according circularity order planner pi mi
resumes execution total cpu time assigned start execution
equal next unprocessed time slot si e j th value si j th time
pi mi runs
figure shows example round robin scheduling portfolio hp
h ii hp h ii assuming p terminates
cpu time units p cpu time units p runs
planner p first time slot p e lower first
time slot p e round robin scheduler suspends p time
units gives p time units cpu time process repeated suspending
p total execution p consumed time units suspending
p total execution p consumed time units next
iteration p suspended total execution time reaches time units
end third time slot e time p terminates needs
cpu time p resumes run terminates time
example planners portfolio use first three time slots
given set training domain propose configuring
initial planner portfolio statistical analysis performance
planners initial portfolio alternative sets computed macros
effectiveness determined configured portfolios evaluated set test
experimental analysis disjoint training set
specified otherwise formed known benchmark
proposed implemented system called pbp portfolio
planner following depending context pbp used indicate


figerevini saetti vallati

p
p












time

figure example round robin scheduling pbp running portfolio hp h ii hp h ii given
assuming planner p macros takes total cputime units terminate p takes total cpu time units

method configuring planner portfolio generated configured portfolio
experimental evaluation configured portfolios generated pbp baseline
planner portfolio use unconfigured planner portfolio called
unconfigured version pbp denoted pbp nok pbp indicate
generated configured planner portfolio
architecture components pbp
architecture pbp consists following five main components combined
described figure
macro actions computation
integrated planner pbp computes sets alternative macros following two approaches
wizard phd thesis version newton et al system implements three
learning techniques offline evolutionary methods use genetic operators
compute macros given planner plans solving set training
instances input domain three learning techniques called chunking
bunching clumping chunking learns individual macros original domain
operators bunching learns bunches macros given pool macros
macros learned chunking process clumping learns individual
macros sets macros simultaneously learned macros filtered fitness
value fitness value reflects filtering criteria including number solved
cpu time required solve training domain
operators augmented learned macros computed macros
fitness value macro lower threshold macro discarded therefore
planner incorporated pbp expect macro pbp wizard
generate three sets macros planner order determine sets
macros used configured portfolio performance planner
evaluated pbp without sets learned filtered macros
training evaluation performed planner cluster


fiplanning

automatic portfolio configuration pbp

incorporated planners

domain
solve

multi planner
round robin scheduling
time limit

fast downward helmert

cluster planners macros

time
time slots
slots computation

lpg td gerevini saetti serina
macro botea et al
marvin coles smith
metric hoffmann nebel
sgplan chen wah hsu

portfolio configuration

lama richter westphal

yahsp vidal

solution plan
failure

planner cluster
selection ordering

performance planners macros

macro actions
computation
wizard

planners macros

performance
measurement

macroff

planners

domain
training probs

time limit

parlpg vallati et al

figure sketch pbps architecture
selection ordering component simplicity sets learned macros
identified names techniques used derive
macro botea et al botea muller schaeffer b
implemented macro botea et al computes macros analyzing solutions set training instances macros appear frequently
significantly reduce required search effort preferred particular
first macro solves training enhanced version
generates macros considering frequency sequences actions forming
macros appear computed solutions macro generation macro
solves training computed macros ranks macros terms
obtained search effort gain ranking selects five sets
macros mi set macros formed best learned
macros version integrated pbp contains enhancements
described botea et al b since macros learned macro coded
ad hoc language pbp five learned sets macros used
macro planner

planner performance measurement
expensive computation step configuration portfolio pbp
runs integrated planner expect macro without three sets macros
experiments presented section observed macro computes macros
enhanced version solves training



figerevini saetti vallati

learned wizard input training set input cpu time
limit planner run similarly macro runs without five sets
macros learned current implementation pbp incorporates eight well known
successful planners fast downward helmert lama richter westphal
lpg td gerevini et al macro botea et al b marvin coles smith
metric hoffmann sgplan chen et al yahsp vidal
recent version lpg parlpg dedicated configuration phase automatically
optimize setting collection parameters governing behavior several parts
system vallati et al b basically running parlpg consists running lpg
domain specific parameter configuration every incorporated planner runs
default parameter configuration marvin implies learn
memorize macros escape plateaus run pbp measures planner
performance terms number solved within cpu time required solving
training quality computed solutions incremental planners
e lpg parlpg lama pbp measures quality solutions generated
corresponding cpu times finally note macro actions
computation macro wizard already run incorporated planners hence
principle performance planners macros could measured macro
wizard compute however technical difficulties simplicity
pbp duplicates runs incorporated planners
time slots computation
method computing time slots pbp variant cpu time allocation strategy proposed roberts howe round robin planner scheduling let hp pn sequence increasing percentages tpi n
minimum cpu time required planner p set macros learned p
short order solve percentage training equal pi pbps
configuration planner portfolio time slots p defined
htp tpn
difference time slots pbp roberts
howe explained following example assume computed
time slots planner macros h
planner b macros mb b mb h pair
planners differently roberts howe pbp extends first time
slot e greatest time slot smaller
first time slot b mb similarly subsequent time slots first time slot
extended slowest planner b mb would initially run cpu
time much greater cpu time initially assigned fastest planner
many planner quickly solves e g one cpu second
pbp would perform much slower worth noting time slot extension
observed high performance gain small easy
rest sequence increasing percentages hp pn used define
time slots called coverage percentage vector pcpv default


fiplanning automatic portfolio configuration pbp

pcpv pbp sequence h n
used work roberts howe
planner cluster selection ordering
last step configuration process pbp pbp selects cluster planners
initial portfolio described section one possibly empty set
useful macros according measured performance computed time
slots
macro selection note pbp explicit independent mechanism
selecting macros used configured portfolio macros shared
planners tools used learn wizard macro generate
macro sets specific input planner planners macro sets selected together
since planner cluster selection pbp considers candidate planner two different
sets macros learned two different candidate planners
execution order planners selected cluster implicitly defined
increasing first time slots associated planners section describes
planner cluster selection detail
multi planner round robin scheduling
pbp configured planner portfolio domain consideration
instance domain encountered pbp runs selected ordered cluster
planners one relative selected set macro actions round robin
scheduling computed time slots similar one investigated many portfolio see e g howe et al roberts howe
alternative planner scheduling strategies possible sequential execution
configured time slots however according experimental
presented section default round robin strategy
time slots derived default pcpv robust performs generally well concerning
termination resulting multi planner pbp terminates given execution
cpu time limit exceeded returning failure one among selected planners computes solution output pbp pbp q terminates time exceeded
selected planners terminate pbp q generates solution within returns failure
otherwise returns best computed solution
selecting planner cluster
performance measurement time slot computation phases pbp analyzes
obtained identify best cluster planners macros domain
consideration given cpu time limit done simulating every cluster
c k planners possibly empty set macros round robin execution planners c solving training used performance
measurement phase simulation done data runs conducted
experiments parameter k set k greater experimentally observed
considered benchmark domains cluster selected pbp would
maximum number possible combinations planners currently incorporated pbp



figerevini saetti vallati

performance measurement phase planners run ignoring data
planners perform worse another incorporated planner e planner
performs worse another one across training domain
discarded cpu time limit simulated execution cluster
time given run single planner performance measurement phase
performances simulated cluster runs compared statistical analysis
wilcoxon sign rank test wilcoxon wilcox test applies set paired
observations sample larger population tells us plausible assume
correlation pairwise observed quantities case
paired observations e g simulated runtimes two clusters training
instance correlation means equally likely
see one cluster solving faster see opposite
sample
purposes wilcoxon sign rank test appropriate require
us know sample distribution makes assumption distribution
way know priori hard hence
distribution simulated performance clusters consequently stated
gibbons chakraborti critical use non parameterized test
wilcoxon sign rank test investigated usage methods
compare performance simulated runs planner clusters including ipc score
function used vallati et al however experimentally observed
ipc domains method less effective usage wilcoxon
sign rank test
pbp performance measure considers cpu time pbp plan
quality pbp q data carrying test pbp derived follows
system computes difference simulated execution
times compared clusters planner cluster solve corresponding simulated time twice cpu time limit cluster solves
considered difference simulated times normalized
value best simulated time comparison e g cluster c requires
seconds cluster c difference favor c absolute values
differences ranked increasing numbers starting lowest value
lowest value ranked next lowest value ranked ranks
positive differences ranks negative differences summed yielding
two values r r respectively performance two compared clusters
significantly different number positive differences r approximately equal
number negative differences r sum ranks set
positive differences approximately equal sum ranks set intuitively test considers weighted sum number times cluster performs better
considered sets macros
hence k maximum number clusters
p

evaluated run simulation k
number clusters different


combinations planners macros current implementation
minimum value ensures performance gap solved one cluster
planners unsolved compared cluster bigger performance gap
solved compared clusters



fiplanning automatic portfolio configuration pbp

compared one sum weighted test uses performance
gap assign rank performance difference
number samples sufficiently large distribution used wilcoxon
sign rank test approximately normal distribution characterized two parameters called z value p value higher z value significant
difference performance p value represents level significance
performance gap p value greater null hypothesis
performance compared pair planners statistically similar refused alternative hypothesis performance statistically different accepted otherwise
statistically significant evidence perform differently pbp considers
perform pretty much similarly
wilcoxon sign rank test used form directed graph
nodes compared clusters edge cluster c another cluster c
indicates c performs better c graph already used long
fox present rd international competition long fox
strongly connected component graph collapsed single node
representing elements clusters collapsed nodes resulting dag
pbp considers nodes without incoming edges graph root nodes
one root node selected cluster otherwise pbp uses secondary criteria
select promising cluster among root nodes criteria number
solved sums ratios simulated cpu times planners
compared clusters first cpu time slots involved planners
specifically pbp selects cluster among root nodes simulation solves
highest number training break ties every pair selected clusters x
sx sy
pbp computes ratio max
sx sy sums simulated
x sy
cpu times clusters x respectively ratio greater threshold
compared cluster worst sum cpu times discarded number
remaining clusters still greater one pbp selects cluster lowest first
cpu time slots involved planners finally remaining ties broken
selecting cluster randomly experiments cluster ever randomly
selected
method used select cluster planners macros pbp q similar
applies plan qualities resulting cluster execution simulation rather
cpu times done pbp simulation pbp q considers intermediate
solutions e generated last one best quality
relative cpu times computed basic incremental planners considered
clusters solutions ignored simulated plan quality clusters including
incremental planners could much worse actual quality example assume
cpu time limit seconds computes solution quality
seconds lama computes two solutions quality seconds
respectively intermediate solutions lama ignored estimated plan quality
cluster formed planners lama would equal quality plan
generated second solution generated lama could computed cluster
seconds greater cpu time limit although intermediate
first solution lama much better ffs solution


figerevini saetti vallati

finally note performance incorporated planners measured
cpu time limit portfolio pbp q configured time limit
simply ignoring solutions computed time simulation
planner cluster performance equally distributed among planners
selected cluster planner terminates allocated time remaining time
equally distributed planners still running
integrated basic planners
subsection give brief description nine basic planners
currently incorporated pbp much detailed information available
corresponding referred papers
metric version hoffmann metric inherits main ideas used
hoffmann nebel ffs search strategy variation hill climbing space
world states goal distance estimated solving relaxed task
successor world state compared first version metric enhanced
goal orderings pruning techniques ordering knowledge provided goal
agenda moreover deals level pddl fox long e numerical state
variables numerical action preconditions effects
yahsp version vidal yahsp extends search procedure
information extracted ffs relaxed plan evaluated world state yahsp
exploits look ahead strategy complete best first search employing actions
relaxed plans order beginning valid plan lead reachable
world state
macroff botea et al b macro extends support macrooperators search engineering enhancements one main features
planner version integrated pbp use iterative macros botea et al b
e runtime combinations macro operators instantiated attempting use
many actions ffs relaxed plan possible search procedure
iterative macros successfully instantiated considered generation
next world states
marvin release coles smith marvin another planner
main improvement w r memorizing plateau escaping action sequences discovered
local search action sequences form macros applied
later plateaus encountered ffs search order escape
plateaus quickly
sgplan version chen et al domain modification script coles coles
sgplan exploits partition resolve strategy partition mutual exclusion
constraints subgoals subproblems solves subproblems individually modified version metric planner resolves
violated global constraints iteratively across subproblems observed
performance sgplan affected rules detecting domain name
number domain operators coles coles work intend consider


fiplanning automatic portfolio configuration pbp

available implemented systems chances perform well possibly combination
others least one domain range varied existing benchmark domains
sgplan definitely one systems however order prevent usage
domain specific detection rules sgplan differently planners incorporated pbp would make sgplan domain specific domains induced
sgplan behave domain independently domain modification script proposed
coles coles script changes domain name adds never applicable
action domain runs sgplan obtained domain addition
domain modification script changes names domain operators
fast downward version helmert fast downward abbreviated fd
translates input pddl specification multi valued state variable representation sas backstrom nebel searches plan space
world states heuristic derived causal graph particular graph representing
causal dependencies sas variables pbp integrates version planner
main improvement compared earlier version planner
propositional satisficing track ipc addition safe abstraction form
simplification allows planner solve certain kinds simple without
search
lama version richter westphal lama built fast downward
sas state variables multi heuristic search core feature use pseudoheuristic derived landmarks propositions must true every solution
task moreover weighted search used iteratively decreasing weights
planner continues search plans better quality
lpg td gerevini et al lpg td inherits main ideas used lpg gerevini et al
lpg uses stochastic local search space partial plans represented action
graphs search steps certain graph modifications transforming action graph
another one lpg td includes accurate heuristics selecting graph modifications
lpg
parlpg version ipc vallati et al b parlpg recent system
idea automatically configuring generic parameterized planner set training
order obtain speed optimized planners perform especially well
domains parlpg uses focusedils variant shelf
state art automatic configuration procedure paramils hutter et al
system lpg ver several components
configured flexibly via many exposed configurable parameters

experimental analysis
section present large experimental study pbp
following main goals
g describing configured portfolios analyzing configuration process pbp
section


figerevini saetti vallati

g analyzing efficiency pbp q terms speed plan quality context
competitions ipc section
g comparing performance planner portfolio configured pbp q versus
systems planner portfolios section
g evaluating effectiveness automatically computed domain specific
configuration knowledge pbp q section
g comparing performance planner portfolio configured pbp q versus
single basic planners portfolio evaluating accuracy planner
cluster selection pbp q section
g analyzing kind macros selected pbp planners configured
portfolio evaluating effectiveness selected macro set understanding pbp qs accuracy selecting useful set section
g investigating possible alternative methods scheduling execution
planners selected cluster understanding effectiveness default
round robin strategy pbp q section
experimental study uses versions pbp important
listed table g cpu time configuration step
evaluate size training set important derive effective configured
portfolios g pbp compared planners entered learning track
ipc winner deterministic track ipc g performance
pbp analyzed w r fdss seipp et al bus portfolio proposed
roberts howe although bus fdss propose design domainindependent planner portfolios principle used pbp generate
domain optimized systems experimentally investigate use
approaches comparing pbp g three different
experimental comparisons comparison pbp configured learned domainspecific knowledge dsk unconfigured version pbp pbp nok randomly
configured version pbp pbp rand comparison performance gaps pbp
pbp nok w r gaps ipc planners without learned knowledge
comparison pbp dsk pbp configured single domain without
macros pbp configured across ipc domains pbp alld g conducted
three experiments performance pbp incorporated planners
compared performance pbp analyzed w r best incorporated planner without
macros every ipc domain finally pbp compared best cluster
incorporated planners possibly macros every ipc domain g compare
performance planners forming clusters selected pbp macros
ii set macros selected pbp iii best performing set macros moreover
comment features sets macros selected used pbp finally
g perform two experimental analysis comparison clusters selected pbp
different scheduling strategies comparison performance pbp
different pcpvs pbp r r


fiplanning automatic portfolio configuration pbp

pbp default
pbp ipc
pbp ipc
pbp nok
pbp rand
pbp nom
pbp alld
pbp
pbp
pbp r pbp
pbp r
pbp

pbp versions
last version pbp configured computing domain specific knowledge dsk
version pbp entered ipc configured dsk
version pbp entered ipc configured dsk
unconfigured portfolio
randomly configured portfolio
configuration without macros
configuration without macros across ipc domains
configuration sequential scheduling planners uniform time slots
configuration sequential scheduling planners non uniform time slots
configuration round robin scheduling planners default pcpv
configuration round robin scheduling planners different pcpvs
configuration training

table main variants pbp generating different types planner portfolio configurations
used experimental analysis

presenting discussing experimental analysis describe
experimental settings
experimental settings
experiment evaluating pbp q respect ipc planners considers
ipc benchmark domains fern et al jimenez et al
experiments focus recent ipc domains regarding training used
experiments ipc domains ipc ipc
domains set sizes ipc domain
unless otherwise specified particular experiment consideration
generated generator made available organizers ipc ipc
explicit set training provided training used
learning macros configuring portfolio since learning procedure wizard
run planner training several times order make training
much time consuming half training set designed formed
took seconds solve planner half formed
took seconds half cpu time limit used testing
phase solve
regarding test used used ipc
ipc test used evaluating performance pbp q respect
planners entered ipc ipc test generally larger much
difficult ipc used evaluating pbp q respect
ipc planners well experiments analysis
experiments conducted last version pbp q
exactly one entered ipc pbp ipc short three reasons pbp ipc properly compiled lack c libraries
competition machine discovered competition b pbp ipc contains
minor syntax bug format output plans ipc domains made
generated plans invalid program validating used competition howey
code last version pbp available http chronus ing unibs pbp



figerevini saetti vallati

long fox c pbp ipc uses sgplan without domain modification
script induces sgplan behave domain independently point negatively affected
performance pbp ipc q one incorporated planners macro
could run selected b many valid plans generated pbp ipc q
rejected plan validator ipc point c changed composition clusters selected pbp ipc q include sgplan make performance
pbp q pbp ipc q substantially different difference planner
clusters selected pbp ipc pbp concerns domain blocksworld
cluster pbp ipc consists parlpg without macros cluster selected pbp
parlpg bunching set macros computed wizard
comparison ipc planners pbp q obtained
running last version machine similar cpu frequency amount ram
one used obtain official ipc data intel core tm quad processor q
gbytes ram comparison pbp q ipc planners systems
run machine ipc quad core intel xeon ghz gbytes
ram ipc organizers made available us experiment unless otherwise
specified experiments conducted quad core intel xeon tm
ghz gbytes ram
experimental analysis required many days cpu time unless otherwise indicated
ipc cpu time limit run pbp q minutes pbp q used
default configuration process cpu time limit simulated execution planner
cluster minutes planners configured portfolio run roundrobin scheduling described section performance data planner pbp q
incorporating randomized e lpg parlpg lama obtained
single run considered instance
experimental comparisons test instances generally use three alternative
methods average performance data ipc score function jimenez et al
wilcoxon sign rank test used planner cluster selection
configuration given two compared planners set average cpu time
planner computed set solved least one
compared planners cpu time limit seconds cpu time
planner solve average plan quality computed
solved compared planners
ipc score function defined follows concerning speed planner
p solves cpu time gets time score equal log

best time times required planners comparison solving
concerning plan quality p generates plan l actions solving gets quality

score equal l number actions shortest plan computed
compared planners p solve gets zero score
speed quality given domain time quality score planner p
sum time quality scores assigned p considered test
ipc score function speed refinement ipc score function
ipc ipc time scores defined according much slower planner performs
best performing one ipc score penalizes slowdowns heavily


fiplanning automatic portfolio configuration pbp

ipc score experiments observed ipc function instead
ipc function gives similar general slightly favorable pbp
wilcoxon sign rank test null hypothesis performance
compared pair systems statistically similar level confidence used
p analysis involves comparison two systems
order maintain confidence level used one hypothesis tested
e pair planners compared confidence level modified
bonferronis correction shaffer analysis usage bonferronis
correction implies experimental obtain wilcoxon sign rank test
derives comparison n systems used confidence level
n
moreover plan quality comparison wilcoxon sign rank test quality
plans computed two compared planners normalized length best plan
test solved planners since wilcoxon sign rank test uses
ranking differences values sample pair compared absolute
plan length directly without normalization differences values domains
could unintended bias small relative differences benchmark domain
large solution plans weighted important larger relative differences
domain small plans
overview configured portfolios generated pbp
section concerns experimental goal g give information configured portfolios multi planners generated default version pbp q see table
relative cpu times used automated portfolio configuration size
training set used configuring pbp table shows planners clusters selected pbp every ipc domain planner cluster table
indicates brackets sets macros selected pbp available
http chronus ing unibs pbp computed time slots clusters
omitted brevity clarity example depots pbp q selects cluster formed
macro two learned macros frequently appear macro ffs
plans solving training ii parlpg without computed macros
iii sgplan set macros obtained chunking macro generation method
wizard configured portfolios table derive following observation
experimental planner clusters selected pbp often formed different sets planners macros overall nine basic planners helpful
selected pbp q least different sets macros considered helpful
others including cases empty set
concerning speed observe domains pbp relies single
planner possibly set macros particular considered domains
parlpg outperforms incorporated planners hence domains
selected cluster contains parlpg main reason better performance parlpg
uses lpg parameter configuration automatically optimized
every considered domain greatly speedup planner vallati et al b


figerevini saetti vallati

domains
ipc domains
gold miner
matching bw
n puzzle
parking
sokoban
thoughtful
ipc domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

pbp

pbp q

yahsp cl
parlpg
parlpg
macro
parlpg
yahsp

macro lama b lpg
marvin lama lpg b
fast downward lama lpg
lama
macro lpg b
macro marvin lama

sgplan b
parlpg b
macro parlpg
parlpg
macro
parlpg
parlpg
parlpg
macro

sgplan cl lama
parlpg lpg b
macro parlpg sgplan ch
marvin parlpg
lama
lama parlpg
parlpg marvin
lpg
lama sgplan ch

table planners sets macros round brackets cluster selected pbp
ipc domains indicate macros generated
selected respectively ch b cl abbreviate three sets macros
chunking bunching clumping generated wizard respectively
five sets macros generated macro order planners listed
clusters corresponds order run

observed previous version pbp entered ipc without parlpg
selected clusters even varied
interesting observe pbp selects macro configured portfolio
planner uses non empty set macros fact selected cluster macro uses one among learned sets macros indicates macro
construction exploitation methods incorporated macro effective
system
table gives cpu times used pbp different phases portfolio
configuration applied ipc domains machine quad core intel
xeon tm ghz gbytes ram used configuration times pbp q
similar pbp macro extraction cluster simulation phases
higher performance measurement incorporated incremental
planners use whole cpu time limit order good quality plans although
configuring pbp specific domain requires considerable amount cpu time
considered configuration needs done since generated
configured portfolio selected planner cluster used domain
finally order understand small sets training sufficient
derive informative dsk test larger training ones
every ipc domain parameter configuration parlpg required hours



fiplanning automatic portfolio configuration pbp

ipc
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

macro extraction
macro wizard



















performance
measure










simulation
selection










total










table cpu hours used configuration pbp ipc domains extraction
macros macro wizard nd rd columns performance measurement phase th column cluster run simulation best cluster selection th
column total configuration time th column

compared performance pbp configured default number training half one sixth training range
size three sets training analysis
table course lower number training cheaper
training pbp hand dsk computed training
sometime much less effective informative dsk obtaining larger sets
depots pbp dsk derived training performs much
better dsks derived training
domains performance pbp three compared dsks similar
interesting observe depots domain cluster pbp two
planners domain cluster pbp derived training consists
macro parlpg training parlpg hands solution pbp
training solution pbp obtained macro
dsk derived training macro parlpg part
configured cluster pbp makes pbp performing worse
depots satellite tpp pbp q dsk derived training
performs much better dsk derived training
domains performance pbp q similar
performance pbp ipc planners
section concerns experimental goal g experimentally evaluate performance
pbp context ipc aim showing competitive
recent systems domain specific learned knowledge since time
writing several ipc planners relative domain specific knowledge available
experiment used official competition data cpu times plan qualities
number solved obtained running last version pbp


figerevini saetti vallati

ipc
domains

depots
parking
domains
ipc
domains

blocksworld
depots
parking
satellite
tpp
domains

time score














mean cpu time








solved













quality score



















mean plan length
















solved






















table time quality score average cpu time plan length number solved
pbp q configured dsk computed set default
version pbp training domains considered
ipc domains training phase pbp q derives different dsks
training sets different sizes

learning track ipc ipc competing teams aware
domains used evaluation submitting systems code submission
contest two phases first phase domains released learning
parts planners run automatically derive domain additional
knowledge set training domain second phase submitting learned knowledge ipc organizers planners run relative
learned knowledge resulting performance data compared ipc score
function interested reader details ipc organization
well collection short papers describing ipc planners entered learning
track work fern et al jimenez et al
pbp knowledge derived first phase competition portfolio configuration knowledge described previous section knowledge learned ipc planner obtusewedge consists special patterns extend
notion n gram include argument relations used aim
speeding enforced hill climbing search yoon fern givan ipc
systems wizard wizard sgplan learn set macro actions planners sgplan respectively ipc planners bootstrap planner learns
domain specific heuristic combining set existing heuristics weights obtained
evaluating performance heuristics training arfaee zilles
holte finally knowledge learned oaldaeyashp brendel schoenauer
parlpg fast downward autotune speed fast downward autotune quality fawcett
et al consists domain specific parameter configurations
table gives overall experimental evaluation best performing planners
ipc ipc domains best performing planners ipc


fiplanning automatic portfolio configuration pbp

best ipc planners
pbp
pbp q
obtusewedge
pbp ipc
pbp ipc q
rfa
wizard
wizard sgplan
best ipc planners
pbp
pbp q
bootstrap planner
fast downward autotune speed
fast downward autotune quality
oaldaeyashp
parlpg
pbp ipc
pbp ipc q
lama

solved










time score
max









quality score
max









solved












time score
max









st sol

quality score
max









last sol

table percentage solved within cpu minutes time quality scores
pbp q best performing planners took part learning track
ipc domains ipc larger scores indicate better
performances pbp ipc pbp ipc indicate versions pbp took part
ipc ipc respectively lama winner deterministic track
ipc

ipc domains terms percentage solved speed plan quality
compared planners run relative learned knowledge data
table following general experimental derived
experimental ipc domains pbp generally
faster compared ipc planners pbp q performs generally better terms plan
quality pbp q solves many
remarkably pbp q solves high percentage ipc benchmark
within cpu minutes pbp q almost computes plan better
plan computed competitor contrast time score pbp q low since
version pbp used comparison suffer technical indicated section
affected performance pbp ipc ipc planners may suffered similar
implementation might improved versions considered
however note even version pbp q entered ipc performs generally better
competing planners



figerevini saetti vallati

pbp q usually runs one planner stops selected planners
terminate cpu time limit exceeded
analysis competition planner cpu times plan qualities
wilcoxon sign rank test instead ipc score functions performance comparison
confirms pbp q generates significantly better quality plans z p

p value obtained analysis z value equal since p value
adjusted critical value
null hypothesis performance pbp
similar performance ipc planners terms speed accepted
thus hypothesis performance pbp statistically different rejected
however worth pointing critical value quite hard reach
especially given apply experiment wise error adjustment set
less stringent critical value say adjusted critical value would

p value would significant
table gives details performance comparison ipc domain
terms speed pbp best performance eight nine domains considered analysis domain perform best parking
fast downward autotune speed performs better similarly terms quality pbp q
best performance seven nine domains performs well parlpg
pbp q one domain spanner performs worse fast downward autotune speed
two domains parking tpp worth noting principle portfolio
incorporate planners promising attempting domain
current version pbp integrates planners established state art
pbp developed time fast downward autotune speed available table indicate portfolio would reach better
performance incorporated planner instance likely pbp would
select planner domain parking greatly improving performance domain
finally comment relative performance pbp winner deterministic satisficing track ipc version lama course cannot expect
domain independent planner lama performs better planner exploiting
learned specific domain knowledge hand definitely desired property
way around holds system uses form automatically
acquired domain specific knowledge effective performs better state ofthe art domain independent planner use additional knowledge
last lines tables indicate global domain domain performance
lama respect planners learning track ipc considering
score functions competition track comparison cpu time limit used
run lama minutes time limit one used run pbp q
planners took part learning track ipc worth noting
ipc domains learning track propositional ipc require
optimization explicit specified plan metric lama
pbp minimize number actions seen pbp q performs substantially
although experimental comparison considers time scores plan quality scores
noted deterministic track ipc focused plan quality hence lama
presumably developed focusing quality rather speed sense plan
quality comparison lama meaningful speed



fiplanning automatic portfolio configuration pbp

ipc planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc
pbp ipc q
pbp
pbp q
lama

solved

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp




































































































barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp




































































































barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp




































































































ipc planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc
pbp ipc q
pbp
pbp q
lama st sol

time score

ipc planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc
pbp ipc q
pbp
pbp q
lama last sol

quality score

table number solved time quality scores best performing
ipc planners ipc domain fda lama bw sat abbreviate
fast downward autotune lama blocksworld satellite respectively

better lama table pbp q solves many ipc
achieves considerably better overall time quality scores respect
lama first best quality solutions respectively table
pbp much higher speed performance every domain much higher
quality performance domains pbp q much higher quality performance
seven domains performs similarly two domains much
higher speed performance domains
moreover since deterministic track ipc cpu time limit minutes
compared lama pbp q learning track
limit first planner keeping cpu minutes second extra cpu
time lama considerably change comparison overall


figerevini saetti vallati

total time scores lama pbp q respectively
total quality scores lama pbp q respectively
lama solves pbp q solve
previous experimental analysis pbp q lama summarized
following claim suggesting portfolio planner automatically configured
given domain perform much better state art fully domain independent
planner
experimental benchmark domains learning track ipc
configured versions pbp q perform better ipc winner deterministic
track
since pbp without configuration knowledge pbp nok fully domain independent
planner interesting see well pbp nok performs w r lama
experimental comparison used benchmark domains deterministic track ipc cpu time limit ipc run minutes
moreover since deterministic track ipc focused plan quality measured total
action cost considered quality version pbp nok lama optimizes
total action cost pbp nok q incorporated planners consider number actions
plan quality although analysis relies total action cost hence somewhat
favor lama observed pbp nok q competitive lama
ipc deterministic track total quality score number solved
slightly lower pbp nok q lama
respectively lower quality score pbp q mainly two
fourteen ipc domains elevator parcprinter pbp nok q obtains much
lower scores respectively test
learning track ipc pbp nok q performs even better lama ipc quality
score versus solved versus

experimental benchmark domains deterministic learning
tracks ipc pbp q without configuration knowledge pbp nok q competitive
winner ipc deterministic track

given pbp q without configuration performs already well performance improvement obtained exploiting computed configuration knowledge even notable
section shows portfolio configuration pbp q useful improve
performance
performance pbp planner portfolios
section concerns experimental goal g compare pbp two planner portfolio
approaches fdss helmert et al bus roberts howe


fiplanning automatic portfolio configuration pbp

pbp versus fdss
table shows performance pbp q w r fdss without macros
comparison summarized follows
experimental benchmark domains learning track ipc
terms number solved pbp q performs better fdss except
domains rovers tpp fdss solves pbp pbp q
respectively terms time score pbp performs better fdss terms
quality score pbp q performs better except tpp
think least four reasons experiments pbp performed generally
better fdss main reason pbp separately configured every
considered domain fdss uses configuration determined
instances ipc designed distributions quite different
learning track ipc seipp et al reasons diversity
methods implemented planners incorporated pbp fdss b
usage macros pbp q c different portfolio configuration techniques
two compared systems concerning consider instance domain spanner
pbp q outperforms fdss pbps configured portfolios use parlpg lpg see table
every planner incorporated fdss uses heuristic forward search techniques
parlpg lpg uses heuristic techniques searching space partial plans seems
effective domain b tried learn macros fdss wizard
unfortunately useful macro learned system therefore tested
performance fdss macros learned wizard selected pbp q
planners configured portfolios see table table indicate
macros sometimes greatly improves performance pbp
really effective fdss
finally order better understand importance c developed compared pbp variant fdss called fdssd restricting differences
fdss pbp configuration techniques specifically fdssd following similarities differences w r original fdss fdssd uses configuration
techniques fdss configures planner portfolio separately input domain
instead set domains altogether uses macros integrates planners
pbp instead set forward state planners important differences
pbp fdssd method planner cluster selection scheduling
strategy used running planners forming clusters described section
substantially different
pbp computed two sets domain optimized portfolio configurations
fdssd fdss sd focusing speed fdss qd focusing plan quality ipc
domains except depots planner clusters selected fdss
pbp depots cluster fdss consists macro macro set
macro macro set cluster pbp consists parlpg macro
macro macro set domain fdss pbp
version fdss run experiment uses variants fast downward analyzed
helmert et al



figerevini saetti vallati

planners
pbp
pbp q
fdss
fdss
pbp nok
pbp nok q

solved

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp
































































barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp
































































barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp
































































planners
pbp
pbp q
fdss
fdss
pbp nok
pbp nok q

time score

planners
pbp
pbp q
fdss
fdss
pbp nok
pbp nok q

total







total







quality score
total







table number solved time quality scores pbp pbp nok fdss
without macros ipc domain fdss bw sat abbreviate fdss macros blocksworld satellite respectively

cluster cluster formed single planner hence running sequential
scheduling round robin scheduling thing compared planner
portfolios performance
planner clusters selected fdss q table domains gripper satellite
tpp pbp q cases formed
one planner domains satellite gripper observed fdss q performs
differently pbp q different scheduling strategy table shows experimental comparison pbp fdssd omitted
compared clusters formed single planner overall
derive following observation
experimental almost benchmark domains
learning track ipc pbp fast fdss sd depots slightly faster
pbp q computes plans good better computed fdss qd
solves
performance gap pbp fdssd lower gap pbp
fdss depots pbp performs slightly better terms speed number
solved ipc domains pbp q performs considerably better
terms plan quality rationale behavior section


fiplanning automatic portfolio configuration pbp

ipc domain
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

fdss qd
cl l
b ch mff b p l lpg ch lpg b
lpg ch mff cl ch cl p mff l
p
ch l
mff l lpg
p
p
l ch

table planners sets macros round brackets cluster selected fdssd
ipc domains l mff p abbreviate sgplan lama marvin
macro parlpg respectively ch b cl three sets
macros chunking bunching clumping generated wizard
five sets macros generated macro

running planner clusters round robin scheduling robust running
sequentially possibly inadequate values time slots another explanation
especially high performance difference terms plan quality different way
pbp fdssd explore portfolio configuration spaces fdssd searches
planner cluster use hill climbing space possible clusters
pbp explores whole space possible clusters bound number planners
clusters selected clusters pbp fdss sd almost
ipc domains considered training configuring planner portfolio
focusing speed quite easy cases single planner possibly macros
outperforms every planner contrary domains training
configuring planner portfolio focusing plan quality difficult
fdssd search space contains local minima prevent fdssd finding
best performing configuration planner cluster complete exploration search
space allows pbp identify
worth noting space planner clusters pbp much smaller
spaces fdss fdssd since space pbp cannot two different clusters
formed planners relative macros different relative sequences
time slots sequence time slots planner relative
set macros derived according default pcpv case space
clusters pbp would orders magnitude greater time required pbp
simulating cluster execution would negligible w r time
configuration phases see table
performance comparison pbp fdssd wilcoxon sign rank test
gives statistical compatible performance data table
experimental ipc domains statistical difference
cpu times pbp fdss sd z p


figerevini saetti vallati

ipc
domains
depots

max
score


time score
pbp
fdss sd



mean cpu time
pbp
fdss sd



solved
pbp
fdss sd



ipc
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

max
score











quality score
pbp q
fdss qd





















mean plan length
pbp q
fdss qd





















solved
pbp q
fdss qd





















table maximum score time quality score average cpu time plan length number
solved pbp fdssd benchmark depots
speed ipc domains plan quality

terms plan quality pbp q performs significantly better fdss qd z
p
pbp versus bus
although bus originally designed generate domain independent configured planner portfolio fdss principle used build domain specific configured
portfolios domain specificity obtained simply training domain fully automated executable bus available
experimental presented roberts howe derived simulation
roberts howe thereby order compare pbp bus implemented
bus planners macros integrated pbp generated
domain specific configured portfolios implementation bus
bus selects planners configured portfolio greedy set covering
approximation sets solved incorporated planners
planners forming clusters ordered according ranking
simon kadane greedy set covering approximation iteratively
selects planner reduces set covering smaller one original
input set fully covered cormen stein rivest leiserson let
domain p set selected planners set test cover initially p
empty contains training iteration chooses
planner largest set solved removes
adds selected planner p number planners largest set
solved greater one selects first evaluated planner


fiplanning automatic portfolio configuration pbp

planner evaluation order random process terminates empty
resulting set p contains planners configured portfolio
experimentally observed almost every considered domain since
one incorporated planner solves training domain set planners
forming cluster selected bus domain consists one planner except
domain parking two selected planners lama macro set clumping moreover choice planner among solve training
drastically affected random order greedy set covering approximation
evaluates coverage planners hence derive indication
performance reached implementation bus ran portfolio configuration bus nine times tested obtained nine configured portfolios analyzed
three sets experimental cpu time three sets experimental
plan quality three sets derived median performing configured
portfolio nine generated considered domain best worst performing configured portfolio possible portfolios generated greedy
set covering approximation bus experimental comparison
given table summarized following observation
experimental benchmark domains learning track ipc
terms time score average cpu time pbp q performs much better worst
median configured portfolios derived bus pbp performs slightly better
best configured portfolio oracle would select among derived
bus pbp q performs slightly worse terms coverage criterion used
bus select planners cluster pbp solves number
best configured portfolio derived bus
table performance obtained configured portfolios
generated bus varies greatly indicating planner selection method bus
accurate derive efficient domain specific configured portfolios think
main reason planner selection bus considers
coverage ignores cpu time plan quality incorporated planners however
important note planner selection method bus originally proposed
different kinds data sets instances set domains considered altogether
different used experiment different purpose generating
domain independent planner portfolio bus prominent showed
good performance roberts howe
effectiveness computed configuration knowledge
section concerns experimental goal g order understand effectiveness
automated portfolio configuration pbp compare performance pbp
computed configuration knowledge pbp q configuration pbp nok q
random configuration pbp rand q pbp nok q planners initial
portfolio selected macros used time slots
planners execution order random pbp rand q pbp nok q
except subset three randomly chosen planners possibly empty


figerevini saetti vallati

ipc
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

pbp

domains












ipc
domains

pbp q

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains












time score
bus
w





















quality score
bus
w q
q





















mean cpu time
bus
w

b








































solved
pbp
bus
w b








































mean plan length
bus
w q
q





















solved
pbp q
bus
w q q b q








































pbp

b











pbp q
b q






















b q











table time quality score mean cpu time plan length number solved
pbp q worst median best portfolios derived
bus ipc domains w b denote worst median
best portfolios among bus derive lowest median
highest time score considered ipc test respectively similarly
w q q b q denote worst median best portfolios lowest
median highest quality score respectively

randomly chosen set learned macros used instead planners different
random configuration pbp q generated every ipc
figure gives overall picture ipc domains
considering different amounts cpu times portfolio configuration specifically
time x axis cpu time limit given run planner set
macros performance measurement simulation phase simulated run
candidate clusters planners cluster selection ordering phase
run configured portfolio test phase marked points
curves pbp q correspond performance scores different configured portfolios
obtained different considered cpu time limits indicate every
considered cpu time limit configuration phase pbp q clearly performs better
pbp nok pbp rand moreover refined analysis considering domain separately
shows pbp q best performance every single considered domain
terms coverage every considered cpu time limit gaps


fiplanning automatic portfolio configuration pbp

ipc domains

time score


pbp
pbp nok
pbp rand



ipc domains

quality score


pbp q
pbp nok q
pbp rand q






































figure time score left plot quality score right plot pbp pbp nok pbp rand
respect increasing cpu time limit ranging seconds
ipc domains

pbp q two compared version pbp similar gaps plots
figure
experimental computed configuration knowledge considerably improve performance pbp q w r unconfigured randomly configured versions
pbp pbp nok pbp rand respectively
terms speed performance comparison three considered versions pbp q wilcoxon sign rank test gives similar general pbp
statistically faster versions z p
terms plan
quality pbp q performs statistically better unconfigured version z
p
comparison pbp q pbp rand q analyzed
solved pbp q pbp rand q solves plan
quality comparisons consider solved compared planners wilcoxon test indicates pbp q performs similarly pbp rand q
z p however noted low number considered
makes statistical comparison wilcoxon sign rank test
accurate informative deriving general conclusions relative performance
case
tested version pbp nok incorporated planners run
predetermined time slot sequence spre planner runs ordered
method used pbp considers relative performance planners
set training instead random order overall performance
pbp nok remains much worse performance planner cluster selected
configured version pbp
table analyzes impact performance dsk e pbp computed
configuration knowledge best performing planners entered learning track
ipc comparison confirm strong positive impact pbps dsk


figerevini saetti vallati

planner
best ipc planners
obtusewedge
pbp ipc
pbp ipc q
wizard
wizard sgplan
pbp
pbp q
best ipc planners
bootstrapplanner
fast downward autotune speed
fast downward autotune quality
oaldaeyashp
parlpg speed
pbp ipc
pbp ipc q
pbp
pbp q

solved

time

quality























































table performance gaps best performing ipc planners without dsk
terms percentage solved time quality scores ipc
benchmark domains planner rfa omitted works
dsk

experimental ipc domains dsk computed
pbp pbp q strongest impact among dsk ipc planners terms
improved speed time plan quality quality respectively dsk computed
obtusewedge strongest impact terms percentage additional solved ipc

reason impact dsk computed pbp quite low terms additional
solved ipc pbp q solves almost even without dsk
experimental ipc domains dsk computed
pbp strongest impact terms improved speed time among dsk
ipc planners use computed dsk fast downward autotune speed
strongest impact terms percentage additional solved improved plan
quality
although terms percentage additional solved improved plan quality use dsk pbp q highest impact leads high improvements pbp q allowing achieve performance generally better
fast downward autotune speed see quality score column table
finally conducted experiment understand configuring pbp specific domain generates dsk leads better performance w r configuring planner portfolio


fiplanning automatic portfolio configuration pbp

set domains altogether table compares performance pbp q
dsk dsk obtained without macros pbp nom q configuration knowledge computed across ipc domains pbp alld q planner cluster pbp alld
formed lpg sgplan planner cluster pbp alld q formed lama
marvin sgplan table indicate even without considering
usage macros portfolio configuration considered domains together greatly
decreases performance pbp
experimental ipc domains terms time score average cpu
time number solved pbp performs much better pbp nom
pbp alld terms quality score number solved pbp q performs much
better pbp nom q pbp alld q terms average plan length pbp q
pbp nom q perform usually better pbp alld q
wilcoxon sign rank test applied comparison pbp
pbp nom confirm ipc domains pbp significantly faster
pbp nom z p terms plan quality pbp q performs significantly better pbp nom q z p high performance gap
pbp pbp nom favor pbp clearly indicates usefulness macros
showing portfolio planners macros much efficient portfolio
planners
accuracy planner cluster selection
section concerns experimental goal g order test accuracy planner
cluster selection pbp carried three related experiments performance
pbp computed configuration knowledge compared performance
every basic planner incorporated initial portfolio b best performing
incorporated planner without macros considered domain c best
performing planner cluster possibly macros considered domain
following section presents experiments b section experiment c
pbp basic portfolio planners
figure gives overall picture performance pbp q w r performance
basic planners without macros terms speed plan quality cpu time limit
run ranging seconds time quality scores compared
system derived summing corresponding scores obtained system
ipc domain analysis indicates every considered cpu time limit pbp
dsk generally much faster incorporated basic planners pbp q generates
better quality plans
experimental ipc domains basic planner considered input portfolio pbp achieves overall performance better similar
performance pbp speed pbp q plan quality except low
cpu time limits compared planners perform similarly terms plan quality


figerevini saetti vallati

ipc
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains
ipc
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

time score
pbp
nom




















alld











mean
pbp











cpu time
nom
alld





















solved
pbp nom alld































quality score
pbp q
nom
alld





























mean
pbp q











plan length
nom
alld













solved
pbp q nom alld































table time quality score average cpu time plan length number solved speed quality versions pbp pbp nom abbreviated nom
pbp alld abbreviated alld ipc domains

wilcoxon sign rank test applied experiment confirm pbp
significantly faster every incorporated planner z p

terms plan quality pbp q performs significantly better z
p
except parlpg according wilcoxon sign rank test statistical
difference quality performances pbp q parlpg discrepancy
analysis figure generated different ways
unsolved handled quality score function wilcoxon sign rank
test comparing plan quality performance first considers attempted
compared planners explicitly penalizing planner zero score unsolved
second considers subset test solved
compared planners pbp q solves many parlpg
reflected relative curves figure plan quality
observed domains rovers satellite gripper solutions pbp q
computed parlpg domains blocksworld depots pbp q parlpg solves
respectively considered domains parlpg part
selected cluster running planners better understand importance parlpg pbp
analyzed performance version pbp incorporate parlpg


fiplanning automatic portfolio configuration pbp

ipc domains

time score


pbp
fd
lama st sol
lpg td st sol
macro
marvin
metric
sgplan
yahsp
parlpg






ipc domains

quality score


pbp q
fd
lama last sol
lpg td last sol
macro
marvin
metric
sgplan
yahsp
parlpg






























figure time left plot quality right plot scores pbp q relative computed configuration knowledge compared time quality scores
basic incorporated planners ipc domains increasing cpu time
limit fd abbreviates fast downward

ipc domains pbp q incorporate parlpg solved
pbp q decrease terms time score pbp without parlpg
performs worse parlpg vs however terms quality score pbp q
without parlpg performs still much better parlpg vs
analysis performance pbp terms speed drastically affected
parlpg hand importance parlpg pbp q limited
parameter configuration parlpg focused speed
two main reasons explaining observation derived experimental
globally best performance pbp q basic incorporated planner
even parlpg outperforms others every considered benchmark domain
pbp effectively selects combines efficient planners domain
consideration possibly useful set macro actions
one may wonder picture different pbp q compared basic
incorporated planners possibly empty set macros figure shows
comparison cpu time limit run ranging seconds
sake readability names combinations basic incorporated planners
sets macros learned wizard macro omitted time quality
scores compared system derived summing corresponding scores obtained compared system ipc domain domain combination
planner p macro set empty domain combination
restricted p
figure terms cpu time ipc domains
basic planner pbp learned macro set achieves overall performance
better similar performance pbp except low cpu time limits
compared planners macros perform similarly terms plan quality
cpu time limits lower seconds exist basic incorporated planners
macros perform better pbp q high cpu time limits pbp q performs much
better every compared planner macros combinations basic incorporated


figerevini saetti vallati

ipc domains

time score


pbp
planner set macros



ipc domains

quality score


pbp q
planner set macros






































figure time left plot quality right plot scores pbp q relative computed configuration knowledge compared time quality scores
combinations incorporated planners sets macros ipc domains

planners sets macros low cpu time limits perform better pbp q
sgplan set learned macros parlpg macro set bunching yahsp
macro set clumping low cpu time limits combinations planners
macros overall performance better pbp q essentially dominate
single domain barman sgplan blocksworld parlpg yahsp
since analysis figure considered test domains altogether order verify
supposition given single domain pbp performs better worse
every basic incorporated planner compared pbp q best performing basic
planner according test relative ipc scores considered
domain planner indicated bestp q single planner without macros
would use oracle specifying best basic incorporated planner
test specific domain experiment shown table
domains gripper rovers satellite spanner planner cluster pbp
bestp considered domains time score average
cpu time pbp much better bestp terms coverage three
domains pbp solves much higher number domains
coverage bestp order achieve
higher speed cluster planners useful set macro actions selected
pbp much better single planner without macros sections
study usefulness properly selected cluster planners
non empty set macros respectively
experimental ipc domain basic planner
considered input portfolio pbp faster achieves better time score solves
pbp
concerning plan quality bestp q contributes great deal success pbp q since
domains except barman spanner included cluster selected pbp q
see table barman gripper parking rovers satellite spanner tpp
cases bestp q provides solution pbp q


fiplanning automatic portfolio configuration pbp

ipc
domains

bestp

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

sgplan
parlpg
parlpg
parlpg

parlpg
parlpg
parlpg
parlpg


domains
ipc
domains

bestp q

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

sgplan
parlpg
parlpg
parlpg

parlpg
parlpg
parlpg
lama


domains

max
score











time score
pbp
bestp





















mean cpu time
pbp
bestp





















solved
pbp
bestp





















max
score











quality score
pbp q
bestp q





















mean plan length
pbp q
bestp q





















solved
pbp q
bestp q





















table maximum score time quality score average cpu time plan length number
solved pbp q best planner bestp q ipc
domains

experimental ipc domains terms plan quality relative
performance pbp q best performing basic planner bestp q oracle would
choose generally slightly favor pbp q blocksworld depots pbp q performs
better parking bestp q performs slightly better rest ipc domains
perform similarly
concerning parking table shows used benchmark
bestp q planner correctly contained cluster selected pbp q
domain see table however cluster includes additional planner lama
tested considered cpu time limit give useful
contribution pbp q solution found lama introducing noise
cluster selection fact parking useful set macros computed
pbp q main reasons pbp q performs slightly worse bestp q planners
considered test domain parking
wilcoxon sign rank test applied experiment confirms overall pbp
significantly faster bestp planner domain z p
terms plan quality test indicate performances pbp q


figerevini saetti vallati

bestp q planner significantly different z p words
test cannot derive one system performs statistically better
finally compared pbp q best performing combination p
basic planner p non empty set macros learned p ipc domain
except spanner macro computed experiment best macro set
p domain chosen considering performance p training
overall terms speed score coverage pbp performs
similarly p five domains performs much better three domains
terms quality score pbp q performs similarly four domains much better
four domains one reasons p perform worse pbp q
domains macros harmful pbp q correctly decides use
discussed context experiment presented section
analyze usefulness macros accuracy selection pbp q
pbp best performing portfolio configuration
order test accuracy planner cluster selection pbp q
compared pbp computed configuration knowledge best performing cluster
planners useful macros considered test domain worst performing
cluster solves table shows experiment considering two
best performing clusters three planners considered ipc domain
bestc planner cluster highest time score among obtained
pbp default pcpv similarly bestc q planner cluster highest
quality score therefore data time quality score columns bestc q
maximum values time quality score sums planner clusters set test
ipc domain
every domain except depots time score pbp one
best cluster much greater zero thus much better score
worst cluster terms average cpu time coverage performance
pbp best cluster almost domain depots pbp
bestc perform slightly differently case planners relative macros
cluster pbp different bestc particular macro selected
different set macros makes pbp slightly slower
concerning pbp q overall terms plan quality high performance gap
respect best cluster although pbp q performs worse domain tpp
domain training used pbp q informative enough observation
supported fact best cluster computed training instead
test different one derived test
hand observed size training similar size test
configured portfolios pbp q bestc q
wilcoxon sign rank test confirms overall performance pbp q
best cluster statistically significantly different z p speed
analysis z p quality analysis moreover observed
pbp q without configuration pbp nok q performs generally much worse


fiplanning automatic portfolio configuration pbp

ipc
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains
ipc
domains

bestc
sgplan b
parlpg b
macro
parlpg
macro
parlpg
parlpg
parlpg
macro

bestc q

barman
sgplan cl
blocksworld
parlpg
depots
mff mff
gripper
parlpg
parking

rovers
parlpg
satellite
parlpg
spanner
lpg
tpp
macro
domains



max
score











time score
pbp bestc





















mean cpu time
pbp
bestc





















solved probs
pbp bestc





















max
score











quality score
pbp q bestc q





















mean plan length
pbp q
bestc q





















solved probs
pbp q bestc q





















table maximum score time quality score average cpu time plan length number
solved pbp q best cluster bestc q ipc
domains mff abbreviates macro order planners listed
cluster depots corresponds order run

best cluster speed quality overall experimental derive
following observation
experimental ipc benchmarks terms time score average
cpu time coverage pbp performs well depots similarly
bestc terms quality score average plan length coverage pbp q performs well similarly bestc q except tpp plan quality score
coverage pbp q worse
table shows often oracle would use single planner quickly
solve ipc compute high quality plans hence one may argue
clusters formed one planner possibly set useful macros
useful rationale best clusters table formed single planner
often incorporated planner even macros requires almost cpu
time solve ipc test except domain depots thus remaining time
usually enough improve coverage quality first computed plan
running one planner purpose computing high quality plans
use set test smaller ipc picture different


figerevini saetti vallati

table compares performance pbp best performing cluster planners
sets randomly generated medium size ipc domains e
size ranging largest training smallest testing
table bestc q indicates clusters oracle would use solve sets
medium size
experimental test ipc domains sizes ranging
training sizes ipc test sizes ipc
domains best planner clusters deriving high quality plans formed
one planner
general cluster planners containing certain planner performs worse
planner alone domain planner
portfolio configured efficiently solved planner alone thus running
planners cluster waste cpu time cluster formed one
planner performs better single portfolio planner considered domain
planner dominating others terms coverage cpu
time coverage plan quality
interestingly observed sometimes cluster selected pbp q best
cluster intermediate size test formed planner solves
produces low quality plans planners produce higher quality
plans solve case barman tpp domains
although quality plans sgplan low sgplan cluster
useful contributes greatly improve coverage cluster
finally table indicate sometimes effectiveness
configured portfolio greatly affected difference size hardness
training size hardness test particular performance
gap pbp q best cluster considered randomly generated intermediatesize domain tpp lower pbp q best cluster ipc
test tpp indicates terms plan quality effectiveness
planner portfolio configuration pbp q computed relatively small training
gradually decrease size hardness test increased
macro usefulness selection accuracy
section concerns experimental goal g analyze effectiveness set
macros selected pbp planner accuracy pbp selecting
useful set macros among computed wizard macro planner
configured portfolio shown wizard macro often generate
useful sets macros speed planners botea et al b newton et al
known guarantee macros leads improving
speed planner bad set macros could even make planner slower moreover
usually degree usefulness set macros depends specific planner uses

concerning macros pbp ipc domain least one non empty set
computed macros planner selected cluster see table compared


fiplanning automatic portfolio configuration pbp

ipc domains

bestc

medium probs

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains
ipc domains

b
parlpg b
mff parlpg
parlpg
mff
parlpg
parlpg
parlpg
macro

bestc q

medium probs

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

cl
p mff lpg b
mff p lpg
parlpg
lama
parlpg
parlpg marvin
lpg
mff l ch


time score
pbp bestc





















mean cpu time
pbp
bestc





















solved probs
pbp bestc





















quality score
pbp q bestc q





















mean plan length
pbp q
bestc q





















solved probs
pbp q bestc q





















table time quality score average cpu time plan length number
solved pbp q best cluster bestc q sets medium size
ipc domains mff p l abbreviate sgplan marvin
macro parlpg lama respectively order planners listed
clusters corresponds order run

number solved number visited search nodes average cpu time time
score macros b set macros identified pbp useful planner
c set macros among computed planner terms time score
makes perform best test experiment
given table following general observation derived
experimental ipc domains often candidate set
macros planner computed wizard macro greatly increases speed
performance configured portfolio pbp correctly selects
table indicates considered domains performance
selected planners obtained sets macros identified useful pbp
usually performance achieve best sets macros
gives strong positive evidence effectiveness pbp ss selecting
useful set macros planner configured portfolio particular best
set macros set macros selected pbp see table
exception sets macros identified pbp different best set


figerevini saetti vallati

domain
planner
barman
sgplan
blocksworld
parlpg
depots
macro
parking
macro
tpp
macro



macros
n


ts



pbp macros
n

ts



best macros
n

ts

























































































































table number solved number visited search nodes n average
cpu time time score ts planners forming cluster selected
pbp macro set macros selected pbp best performing set computed macros domains considered ipc domains
least one non empty set computed macros indicate
number nodes visited sgplan could measured

case macro domain depots however shown table depots pbp
selects cluster contains macro macro set parlpg obtaining
overall performance experimentally observed similar performance
macro best set macros worth noting candidate sets
macros computed parlpg depots harmful e make speed performance
much worse pbp correctly detects choosing run parlpg zero macros
denoted parlpg table
study computing macros usually pursued main goal
speeding possibly making quality computed plan lower
macros used interestingly context pbp q several cases macros useful
improving plan quality specifically nine fifteen ipc domains
configuration phase pbp q selects clusters planners least one planner
non empty set macros see table experimentally observed training
test two reasons macros useful pbp q
domains individual planners macros leads better
quality plans case e g domains barman blocksworld planners sgplan lpg first solution respectively behavior observed
botea et al coles smith newton et al
selected cluster includes planner configured use set macros usually
planner quickly computes solution somewhat helpful
test another planner cluster solve better solutions
enough cpu time quick termination planner macros
leaves cpu time run cluster planner cpu time
important especially incremental planner included selected


fiplanning automatic portfolio configuration pbp

cluster lama parlpg many instances domains depots
satellite tpp observed behavior
experimental ipc domains use macros selected
pbp q lead better quality solutions
general use macros make plan search effective e g
multiple actions one search step size possible plateaus
depth local minima reduced hand large number macros
added domain size search space drastically increase making
harder solve rest section analyze kind number
macros selected used pbp consider macro operators e parameterized
macros defined sequences primitive domain operators macro actions e macros
derived instantiating parameters macro operators
table describes macro operators sets selected pbp planner
configured portfolio see table terms number aggregated operators
number involved parameters average numbers macro actions primitive actions
augmented domain average plan lengths obtained considered planners without
macros counting planned macro actions single action
data table derive interesting observations macros
used pbp considered domains first macro operators used pbp
planner three often aggregate primitive operators secondly
planners handle macros simply adding instantiated macro operators
domain definition sgplan parlpg average number macro actions
augmented domains much lower comparable number primitive domain
actions even domain barman sgplan uses large macro operators involving
seven primitive operators six parameters hence planners domains
macro actions drastically increase search space picture quite different
macro macro operators selected pbp domains depots parking
tpp instantiated generate number macro actions average one
orders magnitude greater number primitive domain actions reason
macro successfully use macro operators even number domain macro actions
huge planner instantiates macro operators filters macro actions search
time according relaxed plan heuristic applied current search state rather
simply adding macro actions original domain
fact experiment pbp never generates configured portfolios large
sets macro actions added domain description seems indicate number
macro actions high w r number primitive actions macro exploitation
method usually makes performance planner much worse observation confirmed additional experiment added pddl description
macro operators learned macro domain depots original description
depots run macro resulting augmented domain shown table
depots number learned macro actions one order magnitude greater
number primitive actions experimentally observed augmented
domain macro without method macros solves depots


figerevini saetti vallati

domain
planner
barman
sgplan b
blocksworld
parlpg b
depots
macro
parking
macro
tpp
macro

operators
every


parameters
every


















grounded
macros






billions
billions
billions
billions

actions











plan length
without









plan length












table number primitive operators forming selected macro operators
number parameters macro operator average number instantiated
macro actions average number domain primitive actions average plan length
without macros average plan length macros counting
planned macro action single action number nd rd columns
refers different macro operator numbers brackets standard deviations domains considered ipc domains least one non empty
set learned macros selected pbp b abbreviates bunching macro
set learned wizard two five sets macros generated
macro indicate solution found within given
cpu time limit

moreover average plan length table plans
macro actions much shorter computed original domain count
macro single action given application current
search state macro possibly combination macros macro generates single
successor state considered planners domains average distance
initial search state goal state much shorter search space includes
macros hence searching solution plan space much faster
conclude note usefulness macros depend factors different
considered analysis e g ratio number useful instantiations macro operator providing shortcuts towards goal state
number instantiations guides search towards wrong direction botea muller
schaeffer factors might affect usefulness macro operators
conjectured work mccluskey porteous
planner cluster scheduling
section concerns experimental goal g experimentally analyze possible alternative strategies scheduling execution planners portfolio configuration pbp time first experiment investigate use
pbp four sequential round robin strategies predefined configured
time slots second experiment study importance choosing specific pcpv


fiplanning automatic portfolio configuration pbp

defining time slots described section particular pbps
default pcpv
let input cpu time limit k maximum number planners cluster
n number single planners combined set macros portfolio
experiment seconds k n depending number
computed macro sets experimentally compare performance pbp
following strategies planner cluster execution portfolio configuration
sequential execution tuple k planners tk seconds run

p
every planner number candidate configured portfolios ki ni
next strategies planner terminates end time
slot remaining time slot used uniformly increase slots
subsequently running planners
every combination time slots k ti
k tk sequential execution
tuple k planners ti seconds runp
th
planner sequence
number candidate configured portfolios ki ni ui u
number non zero time slots lower experiment u
r round robin execution set k planners time slots
derived default pcpv defined section isppbps default
scheduling

strategy number candidate configured portfolios ki ni
r every pcpv p hp p set p defined round robin execution
set k planners
time uslots derived p
pk
n
number candidate configured portfolios number
increments considered pi experiment
set p r formed pcpvs obtained setting percentage
pcpv value ranging li ui l l equal
u u equal increment step pi
equal ui li instance increment step p


consequently values used first percentage p considered pcpvs

concerning execution order planners cluster considered sequence
strategies order defined planner order sequence two
sequences formed planners considered different clusters planners
differently ordered use different time slots cluster planners strategies
r r execution order determined according increasing time slots
associated planners cluster default execution order strategy
configuration phase pbp four scheduling strategies generates four
alternative clusters planners relative time slots time
run corresponding scheduling strategies used configuration
time noted portfolio configuration strategies r
planners candidate cluster executed simulation described section



figerevini saetti vallati

computationally much heavier configuration r respectively since
many candidate configured portfolios considered hand since pbp
r examines larger portfolio configuration spaces principle could obtain
accurate configured portfolios
tables compare performance pbp configured r r
solving ipc domains observed terms speed
ipc benchmark domains except depots considered scheduling strategies
affect selection best cluster since pbp selects cluster formed
single planner possibly macros depots shown tables pbp
round robin scheduling strategies solves faster
sequential scheduling strategies
concerning plan quality best cluster selected pbp q contains one
planner every ipc domain overall following observation derived
experimental ipc benchmark domains pbp q
r r solves pbp q terms plan quality overall
performs similarly pbp q
think explanation pbp q r r performs better terms number solved round robin strategy makes pbp q robust
sequential strategy respect possible incorrect ordering planner runs
inadequate values time slots decided configuration time
training difficult used testing time usually easier
inaccurate estimation effectiveness learned configuration knowledge
arise estimation time slot values incorrect planner execution
order damage severely sequential execution planners selected
cluster since planners run estimated time slot
round robin execution iteratively run multiple time
slots total cpu time limit reached planners terminate
terms plan quality evaluated ipc quality scores pbp q r r
tends perform better pbp q main reason pbp q r r solves pbp q quality score unsolved
zero consider average plan quality last four columns tables
observe mixed two domains pbp q r r performs best
two worse ones discrepancy evaluation
quality scores average plan qualities apparent since quality score
average quality evaluations different assumptions way consider
unsolved average plan quality subset test solved
pbp compared strategies considered quality score test
considered
seipp et al sequential portfolio domain independent statebased forward planners solve time slots uniform
rather configured set training considered planners
test planner quickly solves solve
context observed sequentially run n planners pbp q e
combinations basic planners without computed sets macros


fiplanning automatic portfolio configuration pbp

ipc
domains
depots




time score pbp

r
r




solved pbp


r
r





ipc
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

quality score pbp q


r
r






































solved pbp q


r
r









































table time quality score number solved pbp q scheduling
strategies r r ipc benchmark domains

uniform time slots test solved solved
pbp n planners uniform strategy performs well pbp q cpu time
limit increased several times keeping seconds pbp q differently
observed work seipp et al experimental evaluation includes many
n planners pbp q solve considerable cpu time e g number
solved planner incorporated pbp even macros
within seconds probably reason different behavior test
ipc learning track average difficult
ipc deterministic track test used work seipp et al

hand pbp sequentially runs planners strategies instead possible combinations incorporated planners
learned macros obtain behavior similar observed seipp et al
particular tables terms number solved
speed configuring time slots sequential scheduling cases
even degrade performance pbp w r uniform distribution cpu time
see tables pbp depots pbp q
satellite however context uniform distribution cpu time
planners cluster selected pbp best one since experimentally
observed pbp clearly outperforms pbp configuration done
test rather training believe main reason
behavior experiment training much smaller
easier test several cases makes pbp configured
training underestimate cpu times required solve test


figerevini saetti vallati

ipc
domains
depots

average cpu time pbp


r
r



std dev cpu time pbp


r
r





ipc
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

average plan quality


r













std dev plan























pbp q
r











quality pbp q
r
r





















table average standard deviation cpu time plan quality pbp q
scheduling strategies r r ipc benchmark domains


contrary pbp pbp r r performs similarly according three
evaluation criteria solved speed plan quality indicates
configuring time slots considering many alternative pcpvs lead
high improvements respect default predefined time slots
pbp configuring values time slots less crucial
round robin strategy sequential strategy pbp r r
less sensitive different size used configuration testing
experimental ipc benchmark domains pbp q
r r less sensitive definition time slots pbp q

rest section study configuring pcpv used define
time slots round robin planner scheduling pbp particular
address following questions focusing ipc benchmarks important setting
pcpv particular value given domain oracle specifying best
pcpv test specific domain good would default pcpv
respect
data used analysis obtained follows pcpv p set p
defined well scheduling strategy r previous experiment pbp q
run cluster selected simulating round robin scheduling
time slots derived p described section thereby pbp q configured
times different predefined pcpvs consequently different predefined
time slots resulting configured portfolios run simulation
test learning track ipc


fiplanning automatic portfolio configuration pbp

time score

quality score




























barman

bw

depots grip parking rovers

sat spanner tpp

barman

bw

depots grip parking rovers

sat spanner tpp

figure distribution time left plot quality right plot scores pbp q
pcpvs ipc bw grip sat abbreviate
blocksworld gripper satellite respectively

figure analyzes time quality scores configured portfolios box
whisker plots plot bottom whisker worst score bottom
box lower quartile score band box median score top
box upper quartile score top whisker best score finally cross
score pbp q domain default predefined pcpv following
pcpv corresponding configured portfolio obtaining best time quality score
domain called best performing pcpv domain since best performing
pcpv derived observed performance test considered
best pcpv p oracle would give us experimental data used
figure derive following observation
experimental different ipc domains different best performing pcpvs
pbp
ipc domain length whisker figure zero cluster
selected pbp q pcpv formed single planner hence
cases definition pcpv used derive time slots affect
performance pbp available cpu time assigned single selected planner
plot speed happens domains except depots plot
plan quality happens domain spanner domain barman clusters selected
pbp q configured pcpvs include sgplan learned set macros
planner cluster finding solutions test domain
domains pbp q select singleton planner
cluster pcpvs considered specific used pcpv high impact
pbps performance shown especially domains depots gripper satellite
quality score plot figure interestingly observe default predefined
pcpv used pbp q generally good choice since often crosses plots
appear near top position corresponding whiskers


figerevini saetti vallati

experimental every ipc domain cluster selected pbp q
default pcpv h performs similarly pbp q
best performing pcpv except pbp q domains parking tpp
parking best performance obtained running planners lama
pcpv equal h tpp obtained running planners lama macro sgplan pcpv equal h
two domains pbp q default pcpv perform well
best performing pcpv still better median performing pcpv main
reason domains ipc test much larger harder
used training observed section affect accuracy
portfolio configuration test terms selected planner cluster
configured pcpvs
overall experiment configured default pcpvs pbp
indicate round robin planner scheduling used tuning pcpv consequently time slots specific ipc domain greatly improve
performance resulting configured portfolio since often default pcpv performs well best pcpv specified oracle consequently given without
pcpv tuning portfolio configuration much simpler faster pbp uses default
version

conclusions
existing automated technology offers large growing set powerful techniques efficient domain independent planners none outperforms
others every domain practical perspective useful consider
portfolio involves several techniques planners
proposed automatically configuring portfolio planners learned macros given domain implemented portfolio
planner pbp computed configuration knowledge consists promising combination
basic planners portfolio one possibly empty set useful macros
scheduling information specializing execution time
configured portfolio obtained automated statistical analysis performance set candidate clusters planners relative candidate sets macros
collection training given domain planner cluster performance
computed simulating cluster execution performance data runs
individual basic planners relative sets macros portfolio
proposed portfolio planner configuration evaluated
large experimental analysis focusing ipc domains aim demonstrating high efficiency understanding effectiveness automatic configuration
investigating importance main design choices several derived
experiments analysis important experimental
indicate
configured planner portfolios generated pbp q perform well compared
state art systems learning techniques much better


fiplanning automatic portfolio configuration pbp








pbp nok e unconfigured planner portfolio pbp competitive
lama state art domain independent planner
pbp q performs much better existing domain independent portfoliobased planners often better domain optimized planner portfolio approaches
computed configuration knowledge useful selection planner
cluster forming configured portfolio generally accurate given
domain
macros domain helpful planner improving
speed plan quality pbp q generally selects helpful sets macros
context proposed round robin scheduling strategy
planner cluster execution robust strategy respect execution order
cluster planners time slots moreover configuring
time slots crucial given good default technique deriving currently
implemented pbp q

besides evaluating pbp configuring planner portfolio macros
experimental analysis corroborates validates observations empirical
studies previous work researchers include usefulness
harmfulness macros set prominent existing planners importance diversity
techniques construction effective planner portfolio
robustness round robin scheduling execution times multi planner system
current version pbp uses portfolio formed specific set selected
techniques plan synthesis computation macros planner parameter tuning
architecture pbp open sense additional alternative current future
techniques integrated moreover although chosen wilcoxon sign rank
test comparing candidate planner clusters macro sets demonstrating effectiveness methods could considered
limit current affects systems relying knowledge
learned examples training set representative
test e g much smaller easier test
computed portfolio configuration might accurate knowing
configuration time enough information characterizing test obviously
useful generating representative training sets pbp
experimentally observed minimum maximum number objects involved
test known randomly generated training sets object
bounds sufficiently representative effective configuration pbp
think future work important study incorporate pbp
additional methods supporting configuration portfolio planner
methods could refine current domain configuration
different size heuristically estimated hardness different specialized configured
portfolios moreover important extend pbp q plan quality
measured terms plan action costs rather number plan actions
directions investigating use pbp q optimal
metric temporal domains fox long extending portfolios


figerevini saetti vallati

additional automatically extracted domain specific knowledge entanglements
vallati et al finally intend investigate idea making pbp fully domainindependent computing many portfolio configurations planner clusters different
known domains classifier match domain promising
stored configuration terms expected performance domain similar idea
successfully developed sat e g xu et al

acknowledgments
many ideas techniques systems investigated use build important
previous work portfolio design without would
possible thank authors work particular authors
systems macro generators incorporated pbp special thank mark
roberts adele howe clarifications configuration planner portfolio
beniamino galvani help implementation part preliminary version
pbp ipc organizers letting us use competition machine one
experiments conducted competition would thank
organizers ipc ipc developed made available large collection
useful benchmark domains software tools used analysis
finally thank anonymous reviewers associate editor helpful
detailed comments

references
arfaee j zilles holte r c bootstrap learning heuristic functions
proceedings third annual symposium combinatorial search socs
pp aaai press
backstrom c nebel b complexity sas computational
intelligence
botea enzenberger muller schaeffer j macro improving ai
automatically learned macro operators journal artificial intelligence
botea muller schaeffer j fast iterative macros
proceedings twentieth international joint conference artificial intelligence
ijcai pp aaai press
botea muller schaeffer j b learning partial order macros solutions
proceedings fifteenth international conference automated
scheduling icaps pp aaai press
brendel schoenauer instance parameter tuning evolutionary ai proceedings thirteenth annual genetic evolutionary
computation conference gecco pp acm
cenamor de la rosa fernandez f learning predictive configure portfolios proceedings icaps workshop
learning


fiplanning automatic portfolio configuration pbp

chen hsu c wah b temporal subgoal partitioning
resolution sgplan journal artificial intelligence
chrpa l bartak r reformulating eliminating unpromising actions proceedings eighth symposium abstraction reformulation
approximation sara pp aaai press
chrpa l mccluskey l exploiting structures classical generalizing entanglements proceedings twentieth european conference artificial intelligence ecai pp ios press
chrpa l mccluskey osborne h reformulating
theoretical point view proceedings twenty fifth international florida
artificial intelligence society conference flairs pp aaai
press
coles coles lprpg p relaxed plan heuristics preferences proceedings twenty first international conference automated
scheduling icaps pp aaai press
coles coles olaya celorrio lopez c sanner yoon
survey seventh international competition ai magazine
coles smith k marvin heuristic search planner online macroaction learning journal artificial intelligence
cormen h stein c rivest r l leiserson c e introduction
rd edition mcgraw hill
fawcett c helmert hoos h karpas e roger g seipp j fd autotune
domain specific configuration fast downward proceedings icaps
workshop learning
fawcett c vallati hutter f hoffmann j hoos h h leyton brown k
improved features runtime prediction domain independent planners proceedings th international conference automated scheduling
icaps pp aaai press
fern khardon r tadepalli p first learning track international
competition machine learning
fox long pddl extension pddl expressing temporal
domains journal artificial intelligence
gerevini haslum p long saetti dimopoulos deterministic
fifth international competition pddl experimental
evaluation planners artificial intelligence
gerevini saetti serina stochastic local search
temporal action graphs journal artificial intelligence
gerevini saetti serina temporal scheduling domains predictable exogenous events journal artificial intelligence



figerevini saetti vallati

gerevini saetti vallati automatically configurable portfolio
planner macro actions pbp proceedings nineteenth international
conference automated scheduling icaps pp aaai
press
gibbons j chakraborti nonparametric statistical inference fourth edition
revised expanded statistics series textbooks monographs crc press
gomes c p selman b portfolios artificial intelligence

helmert fast downward system journal artificial intelligence

helmert roger g karpas e fast downward stone soup baseline
building planner portfolios proceedings icaps workshop
learning
hoffmann j metric system translating ignoring delete lists
numeric state variables journal artificial intelligence
hoffmann j nebel b system fast plan generation
heuristic search journal artificial intelligence
howe dahlman e hansen c vonmayrhauser scheetz exploiting
competitive planner performance proceedings fifth european conference
ecp pp springer
howey r long fox val automatic plan validation continuous effects
mixed initiative pddl proceedings sixteenth ieee
international conference tools artificial intelligence ictai pp
ieee
hutter f hoos h h stutzle automatic configuration
local search proceedings twenty second national conference artificial
intelligence aaai pp aaai press
hutter f hoos h h leyton brown k stutzle paramils automatic
configuration framework journal artificial intelligence

jimenez c coles coles seventh international competition
ipc learning part http www plg inf uc es ipc learning
kautz h selman b unifying sat graph
proceedings sixteenth international joint conferences artificial intelligence
ijcai pp aaai press
long fox third international competition
analysis journal artificial intelligence
marquardt w snee ridge regression practice american statistician


fiplanning automatic portfolio configuration pbp

matos p planes j letombe f marques silva j max sat
portfolio proceedings eighteenth european conference artificial intelligence ecai pp ios press
mccluskey l porteous j engineering compiling domain
promote validity efficiency artificial intelligence
newton levine j fox long learning macro actions arbitrary
planners domains proceedings seventeenth international conference
automated scheduling icaps pp aaai press
pulina l tacchella multi engine solver quantified boolean formulas
proceedings thirteenth international conference principles practice
constraint programming cp pp springer
rice j r selection advances computers
richter westphal lama planner guiding cost anytime
landmarks journal artificial intelligence
roberts howe directing portfolio learning proceedings
aaai workshop learning search pp
roberts howe learned performance many planners
proceedings icaps workshop ai learning
roberts howe learning planner performance artificial intelligence

roberts howe personal communication december
roberts howe e wilson b desjardins makes planners
predictable proceedings eighteenth international conference automated
scheduling icaps pp aaai press
seipp j braun garimort j helmert learning portfolios automatically tuned planners proceedings twenty second international conference
automated scheduling icaps pp aaai press
shaffer j p multiple hypothesis testing annual review psych
simon h kadane j optimal solving search none solutions
artificial intelligence
vallati chrpa l kitchin automatic selection
ieee international conference tools artificial intelligence
ictai pp ieee
vallati fawcett c gerevini hoos h saetti b automatic generation efficient domain optimized planners generic parametrized planners
proceedings th annual symposium combinatorial search socs pp
aaai press
vidal v lookahead strategy heuristic search proceedings
fourteenth international conference automated scheduling icaps pp aaai press


figerevini saetti vallati

wilcoxon f wilcox r rapid approximate statistical procedures
american cyanamid co pearl river n
witten h frank e data mining practical machine learning tools
techniques morgan kaufmann san francisco
xu l hutter f hoos h h leyton brown k satzilla portfolio
selection sat journal artificial intelligence
yoon fern givan r learning control knowledge forward search
journal machine learning




