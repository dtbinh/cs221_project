Journal Artificial Intelligence Research 50 (2014) 639696

Submitted 02/14; published 07/14

Planning Automatic Portfolio Configuration:
PbP Approach
Alfonso Emilio Gerevini
Alessandro Saetti

alfonso.gerevini@unibs.it
alessandro.saetti@unibs.it

Dipartimento di Ingegneria dellInformazione
Universita degli Studi di Brescia
Via Branze 38, I-25123 Brescia, Italy

Mauro Vallati

m.vallati@hud.ac.uk

School Computing Engineering
University Huddersfield
Huddersfield, West Yorkshire, HD1 3DH, UK

Abstract
field domain-independent planning, several powerful planners implementing
different techniques developed. However, one systems outperforms
others every known benchmark domain. work, propose multi-planner
approach automatically configures portfolio planning techniques given
domain. configuration process given domain uses set training instances to:
(i) compute analyze alternative sets macro-actions planner
portfolio identifying (possibly empty) useful set, (ii) select cluster planners,
one identified useful set macro-actions, expected perform best,
(iii) derive additional information configuring execution scheduling
selected planners planning time. resulting planning system, called PbP (Portfoliobased Planner), two variants focusing speed plan quality. Different versions
PbP entered learning track sixth seventh International Planning
Competitions. paper, experimentally analyze PbP considering planning speed
plan quality depth. provide collection results help understand PbPs
behavior, demonstrate effectiveness approach configuring portfolio
planners macro-actions.

1. Introduction
last fifteen years, field automated plan generation achieved significant
advancements, several powerful domain-independent planners today available, e.g.,
propositional planning, (Hoffmann & Nebel, 2001), LPG (Gerevini, Saetti, & Serina,
2003), SGPlan (Chen, Hsu, & Wah, 2006), Fast Downward (Helmert, 2006), LAMA
(Richter & Westphal, 2010). Moreover, systems performs well
(more less large) class planning domains problems, well-known one
outperforms others every available benchmark domain (see, e.g., Roberts & Howe,
2009). would useful multi-planner system automatically selects
combines efficient planner(s) portfolio given domain.
c
2014
AI Access Foundation. rights reserved.

fiGerevini, Saetti, & Vallati

performance current planning systems typically affected structure
search space, depends considered planning domain. many domains,
planning performance improved exploiting knowledge domain
structure explicitly given part input formalization,
automatically derived it. particular, several approaches encoding additional knowledge form macro-actions proposed (e.g., Botea, Enzenberger, Muller,
& Schaeffer, 2005; Newton, Levine, Fox, & Long, 2007). macro-action (macro short)
sequence actions planned one time single action. using
macros important tradeoff consider. use speedup planning
process, reduces number search steps required reach solution,
increases search space size, could slow planning process. Moreover,
known effectiveness macros depend planning algorithm: set
macros increase performance planner, decrease it, irrelevant,
another.
paper, propose approach automatically configuring portfolio existing
planners, possibly using useful set macros them. configuration relies
statistical analysis performance planners portfolio usefulness
automatically generated sets macros, considering set training problem instances
given domain. configuration knowledge automatically generated
analysis consists cluster planners defined by: ordered subset planners
initial portfolio, planning time combined using round-robin strategy;
set useful macros planner; sets planning time slots. planning
time slots specify amount CPU time allocated planner cluster
planning. resulting planning system called PbP (Portfolio-based Planner).
current implementation PbP incorporates two systems generation
macros nine efficient planners, architecture open consider (current
future) planner additional alternative system. PbP used without configuration knowledge, planners portfolio scheduled (without macros) simple
round-robin strategy predefined CPU-time slots assigned (randomly
ordered) planners. PbP used configuration knowledge domain consideration, selected cluster planners (possibly using relative selected
sets macros) scheduled, ordering favors planners configuration
performed best, planning time slots defined computed configuration
knowledge. selection exploitation macros PbP, worth noting
planners portfolio configured PbP necessarily use macros learned
them. configuration process, system evaluates planner portfolio
set macros computed it, well empty macro set,
independent planning systems.
PbP two main variants: PbP.s, focusing speed, PbP.q, focusing plan
quality. preliminary implementation PbP.s (Gerevini, Saetti, & Vallati, 2009) entered
learning track sixth international planning competition (IPC6) overall
winner competition track (Fern, Khardon, & Tadepalli, 2011).1 recently,
1. observed IPC6 organizers, surprisingly, IPC6 problems use configuration
knowledge considerably speedup version PbP.s. reasons implementation bugs concerning configuration phase planning phase, inefficient use

640

fiPlanning Automatic Portfolio Configuration: PbP Approach

revised optimized version PbP speed quality variants entered
learning track seventh competition (IPC7), winner
competition track (Coles, Coles, Olaya, Celorrio, Lopez, Sanner, & Yoon, 2012).
large experimental analysis presented paper provides collection results
help understand performance behavior PbP effectiveness portfolio
configuration methods. particular, analysis (i) confirms good performance
PbP context IPC6-7 benchmarks, (ii) compares PbP existing
approaches configure planner portfolio, (iii) evaluates accuracy PbPs approach
identify effective cluster planners strength using (configured
unconfigured) multi-planner respect single planner, (iv) investigates usefulness
macros considered benchmarks, showing PbP selects useful macro sets,
(v) examines execution scheduling configuration PbP selected planners
configured portfolio, demonstrating default strategy works well compared
possible strategies considered analysis.
Several ideas techniques investigated context PbP use build previous
work. Besides presenting evaluating effective approach configuring planner
portfolio, research presented paper corroborates, validates evaluates
hunches empirical studies done researchers planning. particular,
experimental analysis confirms certain sets macros useful accelerate
planning speed improve plan quality (Botea et al., 2005; Coles & Smith, 2007; Newton
et al., 2007) others harmful, diversity planning techniques important
construction effective planner portfolio, observed by, e.g., Roberts Howe
(2009), round-robin scheduling planner execution times robust
strategy planner portfolio (Howe, Dahlman, Hansen, vonMayrhauser, & Scheetz, 1999;
Roberts & Howe, 2006).
remainder paper organized follows. Section 2 discusses related work;
Section 3 describes PbP approach; Section 4 presents results experimental
study; finally, Section 5 gives conclusions.

2. Related Work
section, brief presentation prominent work algorithm portfolio
design automated reasoning, describe related work others planner portfolio
design automated planning, pointing important differences PbP
related work. specific differences similarities indicated
following sections presenting technical results.
2.1 Algorithm Portfolio Design Automated Reasoning
field automated reasoning, idea using portfolio techniques
investigated several researchers. prominent example work Gomes Selman
(2001), conducted theoretical experimental study parallel run stochastic
algorithms solving computationally hard search problems. work shows
Linux shell scripts (evident especially small easy problems), corrected
competition obtaining much better results (Gerevini et al., 2009).

641

fiGerevini, Saetti, & Vallati

conditions running different stochastic algorithms parallel give computational gain
running multiple copies stochastic algorithm parallel.
Many papers algorithm portfolio design concern definition models select
best algorithm(s) instance certain problem according values
predetermined features instance (Rice, 1976). example, algorithm portfolios
designed aim solve instances SAT, MaxSAT, QBF (Matos, Planes,
Letombe, & Marques-Silva, 2008; Pulina & Tacchella, 2007; Xu, Hutter, Hoos, & LeytonBrown, 2008). SATzilla prominent example algorithm portfolio designed SAT
(Xu et al., 2008). SATzilla uses machine learning techniques build predictor
runtime class SAT solvers. SATzilla attempts solve instance SAT
problem, computes values features instance, predicts performance
SAT solvers incorporates, selects promising SAT solvers order
accordingly predicted performance, finally runs selected SAT solvers using
established ordering predicted required CPU times.
Matos et al. (2008) propose algorithm portfolio solving MaxSAT problem.
portfolio computes values several features given instance MaxSAT problem,
estimates runtime solver portfolio, solves instance
estimated fastest solver. estimation done using (linear) model configured
performing ridge regression (Marquardt & Snee, 1975). Similarly, Pulina Tacchella
(2007) study algorithm portfolio solving QBF problem. identify features
QBF problem, investigate usage four inductive models select best
solver use according values identified features.
2.2 Planner Portfolio Design Automated Planning
Regarding automated planning, prominent planners combining one algorithms
proposed. Blackbox (Kautz & Selman, 1999) use variety satisfiability engines (the initial version included Graphplan algorithm), (Hoffmann & Nebel,
2001), LPG (Gerevini et al., 2003; Gerevini, Saetti, & Serina, 2006) SGPlan5 (Chen et al.,
2006) include backup strategy using alternative search technique run
default method fails. algorithm combination systems straightforward
use automatic portfolio configuration.
Previous work planner portfolios includes approach proposed Howe collaborators (Howe et al., 1999; Roberts & Howe, 2007, 2009; Roberts, Howe, Wilson, &
desJardins, 2008). rest paper, refer Howe collaborators approach using name first planner portfolio, BUS (Howe et al., 1999), although
analysis approach consider recent techniques planner
portfolio configuration. approach learns models performance set planners.
planning time, round-robin policy used schedule runs planners
set, learned models exploited determine order runs.
configuration-knowledge derived approach domain-independent: performance
models planners built using several predictive models WEKA data mining
package (Witten & Frank, 2005), set planners forming portfolio determined
set covering algorithm solved training problems across several different
planning domains.
642

fiPlanning Automatic Portfolio Configuration: PbP Approach

work BUS originally inspired approach. PbP similarities it,
computes uses different configuration knowledge, methods selecting
ordering portfolio planners considerably different. portfolio configuration
PbP generates domain-optimized clusters planners, selection ordering
PbP based statistical analysis planners performance set training
problems using Wilcoxon sign-rank test, known Wilcoxon matched pairs
test (Wilcoxon & Wilcox, 1964).2 Finally, system compute, analyze use
macros, consider plan quality.
Similarly work Howe et al. (1999), Roberts Howe (2007), techniques used Cenamor, de la Rosa, Fernandez (2013), Fawcett, Vallati, Hutter,
Hoffmann, Hoos, Leyton-Brown (2014) learn models performance set planners
according predetermined features. work Cenamor et al. (2013), features derived SAS+ representation planning problem. approach,
learned models used determine planners run, order,
long. selected planners run sequentially either using amount CPU time
uniformly assigned determined predicted execution time. experimental results work Cenamor et al. (2013) show problems domains different
used learn models, configured portfolios perform worse running
unconfigured portfolio consisting incorporated planners uniform CPU time
assigned them.
work described Fawcett et al. (2014) focused generating models accurately predicting planners runtime. models exploit large set instance features,
derived PDDL SAS+ representations problem, SAT encoding
planning problem, (short) runs planners. experimental results work
Fawcett et al. (2014) indicate generated performance models able produce
accurate runtime predictions.
Fast Downward Stone Soup (here abbreviated FDSS) approach selecting combining set forward-state planning techniques (Helmert, Roger, & Karpas, 2011). Using
IPC6 scoring function, FDSS evaluates class candidate techniques basis
performance set training problem instances different domains,
builds domain-independent sequential portfolio forward planners hill-climbing algorithm searching space possible sequential combinations evaluated candidate
techniques. automatic portfolio configuration FDSS PbP aims building different types planning systems: single efficient domain-independent planner portfolio
FDSS; efficient domain-optimized portfolio planner given domain PbP.
configuration processes resulting configured portfolios FDSS PbP
significantly different. particular, PbP configures portfolio generic planners (using
different styles planning), one (possibly empty) set useful learned macros,
considered FDSS domain-independent purpose. Moreover,
execution scheduling strategy PbP runs selected planners round-robin rather
sequentially.
2. context planning, Wilcoxon sign-rank test previously used work
Long Fox (2003), Gerevini, Haslum, Long, Saetti, Dimopoulos (2009), Gerevini et al. (2009),
Roberts Howe (2009).

643

fiGerevini, Saetti, & Vallati

ParLPG (Vallati, Fawcett, Gerevini, Hoos, & Saetti, 2013b) Fast Downward-autotune
(Fawcett, Helmert, Hoos, Karpas, Roger, & Seipp, 2011) configure parameters planners LPG Fast Downward (Helmert, 2006), respectively, using set training problems
given domain order obtain combinations parameters two planners
perform especially well given domain. frameworks uses stochastic local
search procedure ParamILS search high-performance configurations parameters
evaluating promising configurations (Hutter, Hoos, & Stutzle, 2007; Hutter, Hoos, LeytonBrown, & Stutzle, 2009). extended version FDSS (Seipp, Braun, Garimort, & Helmert,
2012) involves twenty one configurations Fast Downward, obtained configuring parameters Fast Downward-autotune twenty one different domains (Fawcett et al.,
2011), combined several alternative sequential strategies allocating CPU
times them.
ASAP (Vallati, Chrpa, & Kitchin, 2013a) recent system selecting promising planner set candidates planners derives much power use
entanglements (Chrpa & Bartak, 2009; Chrpa & McCluskey, 2012). Entanglements
relations planning operators predicates used reformulate domain model
removing unpromising operator instances restricting applicability actions
certain states. problem resulting modified domain become significantly
easier solve planner. hand, since ASAP uses approximate method
decide entanglements, PSPACE-complete (Chrpa, McCluskey, & Osborne, 2012),
problem solvable original domain become unsolvable reformulated domain. Given planning domain modified entanglements set planners,
ASAP identifies promising planners one highest IPC score
(Jimenez, Coles, & Coles, 2011) set training problems.

3. Automated Planner Portfolio Design PbP
section, introducing preliminaries defining problem configuring
planner portfolio execution solve planning problems, describe architecture
techniques approach configure execute planner portfolio.
3.1 Preliminaries Configuring Executing Planner Portfolio
Differently existing work algorithm portfolio design
aware, PbP design planner portfolio solving specific instance
planning problem according values predetermined features instance.
Instead, planning problems gathered according planning domains, planner portfolio designed whole domain. basis choice empirical
observation often exists single planner combination planners performs generally better problems domain. seems something
peculiar automated planning hold types reasoning problems,
makes PbP somewhat atypical general literature algorithm portfolio design.
Let planning domain, CPU-time limit, P set n planners (initial
portfolio), predefined parameter values. problem configuring
P consists computing set triples {hPi , Mi , Si | = 1 . . . m}, where: 1 n,
Pi P, Mi (possibly empty) set macro operators learned Pi domain D, Si
644

fiPlanning Automatic Portfolio Configuration: PbP Approach

sequence increasing CPU times. CPU times (real numbers) called planning
time slots, time lower equal .
output set triples identified portfolio configuration algorithm configured
(planner) portfolio P D, rest paper called selected
planner cluster (or simply cluster). Depending planners, macros planning
time slots chosen, many candidate solutions portfolio configuration
problem. special case, call unconfigured (planner) portfolio, defined
{hPi , , Spre | = 1 . . . |P|}, Spre predefined h0.1, 1, 10, 100, 1000i (in seconds).
BUS, PbP uses round-robin policy scheduling runs planners
configured portfolio. Let = {hPi , Mi , Si | = 1 . . . m} planner portfolio configured
domain D. Portfolio executed solve planning problem roundrobin scheduling processes where: process corresponds running planner Pi
macros Mi (Pi + Mi short), according order time slices derived
sequences S1...m . precisely, circular order planners determined
considering values t1...m defined first planning time slot
sequences S1 . . . Sm . ti < tj , Pi ordered Pj ; ti = tj , relative order Pi
Pj arbitrarily decided (i.e., case Pi runs Pj iff < j), every i, j 1 . . .
6= j. planner Pi + Mi initially run total CPU time allocated
process ti , planner terminates earlier. planner Pi + Mi terminate
within assigned planning time slot ti , suspended, resumes next time
time slot assigned it. additional CPU time assigned processes
already terminated. When, according circularity order, planner Pi + Mi
resumes execution, total CPU time assigned (from start execution)
equal next unprocessed time slot Si (i.e., j-th value Si j-th time
Pi + Mi runs).
Figure 1 shows example round-robin scheduling portfolio {hP1 , M1 ,
h10, 40, 160, . . . ii, hP2 , M2 , h20, 60, 180, . . . ii}, assuming P1 + M1 terminates using
80 CPU time units, P2 + M2 using 120 CPU time units. P1 + M1 runs
planner P2 + M2 , first time slot P1 + M1 (i.e., 10) lower first
time slot P2 + M2 (i.e., 20). round-robin scheduler suspends P1 + M1 10 time
units, gives P2 + M2 20 time units CPU time. process repeated suspending
P1 + M1 total execution P1 + M1 consumed 40 time units, suspending
P2 + M2 total execution P2 + M2 consumed 60 time units. next
iteration, P1 + M1 suspended total execution time reaches 80 time units,
but, end third time slot, i.e., time 140, P1 + M1 terminates needs
CPU time. Then, P2 + M2 resumes run, terminates time 200.
example, planners portfolio use first three time slots.
Given set training problems domain D, propose approach configuring
initial planner portfolio statistical analysis performance
planners initial portfolio alternative sets computed macros.
effectiveness determined configured portfolios evaluated set test
problems D, experimental analysis disjoint training problem set
that, specified otherwise, always formed known benchmark problems.
proposed approach implemented planning system called PbP (Portfolio-based
Planner). following, depending context, PbP used indicate either
645

fiGerevini, Saetti, & Vallati

P1 M1
P2 M2
10

30

60

100

140

200

Time

Figure 1: example round-robin scheduling PbP running portfolio {hP1 , M1 , h10, 40, 160, . . . ii, {hP2 , M2 , h20, 60, 180, . . . ii} given planning
problem, assuming planner P1 using macros M1 takes total 80 CPUtime units terminate P2 M2 takes total 120 CPU-time units.

method configuring planner portfolio, generated configured portfolio.
experimental evaluation configured portfolios generated PbP, baseline
planner portfolio, use unconfigured planner portfolio, called
unconfigured version PbP denoted PbP-nok (while PbP indicate
generated configured planner portfolio).
3.2 Architecture Components PbP
architecture PbP consists following five main components, combined
described Figure 2.
3.2.1 Macro-Actions Computation
integrated planner, PbP computes sets alternative macros using following two approaches.
Wizard, PhD thesis version (Newton et al., 2007). system implements three
learning techniques based offline evolutionary methods, use genetic operators
compute macros given planner plans solving set training problem
instances input domain. three learning techniques called chunking,
bunching, clumping: chunking learns individual macros original domain
operators; bunching learns bunches macros given pool macros (such
macros learned chunking process); clumping learns individual
macros sets macros simultaneously. learned macros filtered fitness
value. fitness value reflects filtering criteria including number solved
problems CPU time required solve training problems using domain
operators augmented learned macros. computed macros,
fitness value macro lower threshold, macro discarded. Therefore,
planner incorporated PbP (expect Macro-FF), PbP using Wizard
generate three sets macros planner. order determine sets
macros used configured portfolio, performance planner
evaluated PbP with/without using sets learned filtered macros
training problems. evaluation performed Planner cluster
646

fiPlanning

Planning Automatic Portfolio Configuration: PbP Approach

Incorporated Planners:

Domain
problem solve

Multi-planner
round-robin scheduling
Time limit

Fast-downward (Helmert, 2006)

Cluster planners macros

Planning time
Time slots
slots computation

LPG-td (Gerevini, Saetti & Serina, 2006)
Macro-FF (Botea et al., 2005)
Marvin (Coles & Smith, 2007)
Metric-FF (Hoffmann & Nebel, 2005)
SGPLAN5 (Chen, Wah & Hsu, 2006)

Portfolio configuration

LAMA (Richter & Westphal, 2010)

YAHSP (Vidal, 2004)

Solution plan
failure

Planner cluster
selection & ordering

Performance planners macros

Macro-actions
computation
Wizard

Planners macros

Performance
measurement

MacroFF

Planners

Domain
training probs

Time limit

ParLPG (Vallati et al., 2011)

Figure 2: sketch PbPs architecture.
selection ordering component. simplicity, sets learned macros
identified names techniques used derive them.
Macro-FF (Botea et al., 2005; Botea, Muller, & Schaeffer, 2007b). approach
implemented Macro-FF (Botea et al., 2005) computes macros analyzing solutions set training problem instances, macros appear frequently
significantly reduce required search effort preferred. particular,
first Macro-FF solves training problems using enhanced version FF;
generates macros considering frequency sequences actions forming
macros appear computed solutions.3 macro generation, Macro-FF
solves training problems using computed macros, ranks macros terms
obtained search effort gain, using ranking selects five sets
macros M1..5 , Mi = 1..5 set macros formed best learned
macros. version approach integrated PbP contains enhancements
described Botea et al. (2007b). Since macros learned Macro-FF coded
using ad-hoc language, PbP five learned sets macros M1..5 used
Macro-FF planner.

3.2.2 Planner Performance Measurement
expensive computation step configuration portfolio. PbP
runs integrated planner expect Macro-FF without three sets macros
3. experiments presented Section 4, observed Macro-FF computes macros
enhanced version solves training problem.

647

fiGerevini, Saetti, & Vallati

learned Wizard input training problem set, using input CPU time
limit planner run. Similarly, Macro-FF runs without five sets
macros learned itself. current implementation PbP incorporates eight well-known
successful planners, Fast Downward (Helmert, 2006), LAMA (Richter & Westphal, 2010),
LPG-td (Gerevini et al., 2006), Macro-FF (Botea et al., 2005, 2007b), Marvin (Coles & Smith,
2007), Metric-FF (Hoffmann, 2003), SGPlan5 (Chen et al., 2006), YAHSP (Vidal, 2004)
recent version LPG (ParLPG) using dedicated configuration phase automatically
optimize setting collection parameters governing behavior several parts
system (Vallati et al., 2013b). Basically, running ParLPG consists running LPG using
domain-specific parameter configuration. Every incorporated planner runs using
default parameter configuration. Marvin, implies planning learn
memorize macros escape plateaus. run, PbP measures planner
performance terms of: number problems solved within , CPU time required solving
training problems, quality computed solutions. incremental planners,
i.e., LPG, ParLPG LAMA, PbP measures quality solutions generated
problem corresponding CPU times. Finally, note macro-actions
computation Macro-FF Wizard already run incorporated planners hence,
principle, performance planners macros could measured Macro-FF
Wizard compute them. However, technical difficulties and, simplicity,
PbP duplicates runs (incorporated) planners.
3.2.3 Planning Time Slots Computation
method computing planning time slots PbP variant CPU-time allocation strategy proposed Roberts Howe (2007) round-robin planner scheduling. Let hp1 , . . . , pn sequence increasing percentages, tpi (i {1, . . . , n})
minimum CPU time required planner P set macros learned (P +
short) order solve percentage training problems equal pi . PbPs
configuration planner portfolio, planning time slots P + defined
= htp1 , . . . , tpn i.
difference planning time slots PbP approach Roberts
Howe explained following example. Assume computed planning
time slots planner using macros (A+MA ) h0.20, 1.40, 4.80, 22.50, . . .
planner B using macros MB (B + MB ) h14.5, 150.8, . . . i. Then, pair
planners, differently approach Roberts Howe, PbP extends first time
slot + (0.20) 4.80, i.e., greatest time slot + smaller
first time slot B + MB ; similarly subsequent time slots. first time slot
+ extended, slowest planner B + MB would initially run CPU
time much greater CPU time initially assigned fastest planner + ,
many problems planner + quickly solves (e.g., using one CPU second),
PbP would perform much slower. worth noting using time slot extension
observed high performance gain small easy problems.
rest paper, sequence increasing percentages hp1 , ..., pn used define
planning time slots called problem coverage percentage vector (PCPV). default
648

fiPlanning Automatic Portfolio Configuration: PbP Approach

PCPV PbP sequence h25, 50, 75, 80, 85, 90, 95, 97, 99i (n = 9),
used work Roberts Howe (2007).
3.2.4 Planner Cluster Selection Ordering
last step configuration process PbP. PbP selects cluster planners
initial portfolio (as described Section 3.3), one (possibly empty) set
useful macros, according measured performance computed planning time
slots.
macro selection, note PbP explicit independent mechanism
selecting macros used configured portfolio, macros shared
planners tools used learn (Wizard Macro-FF) generate
macro sets specific input planner. Planners macro sets selected together,
since planner cluster selection PbP considers candidate planner using two different
sets macros learned two different candidate planners.
execution order planners selected cluster implicitly defined
increasing first planning time slots associated planners. Section 3.3 describes
planner cluster selection detail.
3.2.5 Multi-Planner Round-Robin Scheduling
PbP configured planner portfolio domain consideration,
problem instance domain encountered, PbP runs selected ordered cluster
planners (each one using relative selected set macro-actions) round-robin
scheduling algorithm using computed planning time slots, similar one investigated many portfolio algorithms (see, e.g., Howe et al., 1999; Roberts & Howe, 2006,
2007). Alternative planner scheduling strategies possible, sequential execution
or/and using configured planning time slots. However, according experimental results
presented Section 4.8, default round-robin strategy planning
time slots derived default PCPV robust performs generally well. Concerning
termination resulting multi-planner, PbP.s terminates either given (execution)
CPU-time limit exceeded, returning failure, one among selected planners computes solution (output PbP.s); PbP.q terminates either time exceeded,
selected planners terminate. PbP.q generates solution within t, returns failure;
otherwise, returns best computed solution.
3.3 Selecting Planner Cluster
performance measurement time slot computation phases, PbP analyzes
obtained results identify best cluster planners macros domain
consideration given CPU-time limit . done simulating, every cluster
C k planners, (possibly empty) set macros, round-robin execution planners C solving training problems used performance
measurement phase.4 simulation done using data runs conducted
4. experiments parameter k set 3. k greater 3, experimentally observed
considered benchmark domains problems cluster selected PbP would same.
maximum number possible combinations planners currently incorporated PbP

649

fiGerevini, Saetti, & Vallati

performance measurement phase (the planners re-run), ignoring data
planners always perform worse another incorporated planner (i.e., planner
performs worse another one across training problems domain
discarded). CPU-time limit simulated execution cluster (the
time given run single planner performance measurement phase).
performances simulated cluster runs compared statistical analysis based
Wilcoxon sign-rank test (Wilcoxon & Wilcox, 1964). test applies set paired
observations (a sample larger population), tells us plausible assume
correlation pairwise observed quantities. case,
paired observations are, e.g., simulated runtimes two clusters training
problem instance, correlation means equally likely
see one cluster solving problem faster see opposite
sample problems.
purposes, Wilcoxon sign-rank test appropriate require
us know sample distribution, makes assumption distribution.
is, way know priori hard planning problem is, hence
distribution simulated performance clusters. Consequently, stated
Gibbons Chakraborti (2003), critical use non-parameterized test,
Wilcoxon sign-rank test. investigated usage methods
compare performance simulated runs planner clusters, including IPC score
function used Vallati et al. (2013a). However, experimentally observed
that, IPC7 domains, method less effective usage Wilcoxon
sign-rank test.
PbP, performance measure considers either CPU time (PbP.s) plan
quality (PbP.q). data carrying test PbP.s derived follows.
planning problem, system computes difference simulated execution
times compared clusters. planner cluster solve problem, corresponding simulated time twice CPU-time limit;5 cluster solves problem,
problem considered. difference simulated times normalized
value best simulated time comparison (e.g., cluster C1 requires 200
seconds cluster C2 220, difference 10% favor C1 ). absolute values
differences ranked increasing numbers, starting lowest value.
(The lowest value ranked 1, next lowest value ranked 2, on.) ranks
positive differences ranks negative differences summed, yielding
two values r+ r , respectively. performance two compared clusters
significantly different, number positive differences r+ approximately equal
number negative differences r , sum ranks set
positive differences approximately equal sum ranks set. Intuitively, test considers weighted sum number times cluster performs better
considered sets macros
hence, k = 3, maximum number clusters
P 38;
38
evaluated run simulation i=k
= 9177. number clusters 3 different
i=1

combinations planners macros 38 current implementation.
5. minimum value ensures performance gap problem solved one cluster
planners unsolved compared cluster bigger performance gap problem
solved compared clusters.

650

fiPlanning Automatic Portfolio Configuration: PbP Approach

compared one. sum weighted test uses performance
gap assign rank performance difference.
number samples sufficiently large, T-distribution used Wilcoxon
sign-rank test approximately normal distribution, characterized two parameters called z-value p-value. higher z-value, significant
difference performance is. p-value represents level significance
performance gap. p-value greater 0.05, null hypothesis
performance compared pair planners statistically similar refused, alternative hypothesis performance statistically different accepted. Otherwise,
statistically significant evidence perform differently, PbP considers
perform pretty much similarly.
results Wilcoxon sign-rank test used form directed graph
nodes compared clusters, edge cluster C1 another cluster C2
indicates C1 performs better C2 . graph already used Long
Fox present results 3rd International Planning Competition (Long & Fox,
2003). strongly connected component graph collapsed single node
representing elements clusters collapsed nodes. resulting DAG,
PbP considers nodes without incoming edges (the graph root nodes).
one root node, selected cluster, otherwise PbP uses secondary criteria
select promising cluster among root nodes. criteria number
solved problems, sums ratios (simulated) CPU times planners
compared clusters, first planning CPU-time slots involved planners.
Specifically, PbP selects cluster among root nodes simulation solves
highest number training problems. break ties, every pair selected clusters x
|sx sy |
PbP computes ratio max{s
, sx sy sums (simulated)
x ,sy }
CPU times clusters x y, respectively; ratio greater threshold 0.05,
compared cluster worst sum CPU times discarded. number
remaining clusters still greater one, PbP selects cluster lowest first
planning CPU-time slots involved planners. Finally, remaining ties broken
selecting cluster randomly, experiments cluster ever randomly
selected.
method used select cluster planners macros PbP.q similar,
applies plan qualities resulting cluster execution simulation, rather
CPU times done PbP.s. simulation, PbP.q considers intermediate
solutions (i.e., generated last one, best quality)
relative CPU times computed basic incremental planners considered
clusters. solutions ignored, simulated plan quality clusters including
incremental planners could much worse actual quality. example, assume
CPU-time limit 900 seconds, computes solution quality 50 using 100
seconds, LAMA computes two solutions quality 20 19 using 120 880 seconds,
respectively. intermediate solutions LAMA ignored, estimated plan quality
cluster formed planners LAMA would equal quality plan
generated (the second solution generated LAMA could computed cluster
using 980 seconds, greater CPU time limit), although intermediate
(first) solution LAMA much better FFs solution.
651

fiGerevini, Saetti, & Vallati

Finally, note performance incorporated planners measured
CPU-time limit , portfolio PbP.s/q (re)configured time limit
simply ignoring solutions computed time simulation
planner cluster performance. , equally distributed among planners
selected cluster. planner terminates allocated time, remaining time
equally distributed planners still running.
3.4 Integrated Basic Planners
subsection, give brief description nine basic planners
currently incorporated PbP. Much detailed information available
corresponding referred papers.
Metric-FF (Version 2.1; Hoffmann, 2003). Metric-FF inherits main ideas used
(Hoffmann & Nebel, 2001). FFs search strategy variation hill-climbing space
world states, goal distance estimated solving relaxed task
successor world state. Compared first version FF, Metric-FF enhanced
goal orderings pruning techniques ordering knowledge provided goal
agenda. Moreover, deals level 2 pddl2.1 (Fox & Long, 2003), i.e., numerical state
variables, numerical action preconditions effects.
YAHSP (Version 1.1; Vidal, 2004). YAHSP extends search procedure
information extracted FFs relaxed plan. evaluated world state, YAHSP
exploits look-ahead strategy complete best-first search employing actions
relaxed plans order find beginning valid plan lead reachable
world state.
MacroFF (Botea et al., 2005, 2007b). Macro-FF extends support using macrooperators search, engineering enhancements. One main features
planner version integrated PbP use iterative macros (Botea et al., 2007b),
i.e., runtime combinations macro operators, instantiated attempting use
many actions FFs relaxed plan possible. search procedure FF,
iterative macros successfully instantiated considered generation
next world states.
Marvin (Release 1; Coles & Smith, 2007). Marvin another planner based FF.
main improvement w.r.t. memorizing plateau-escaping action sequences discovered
(local) search FF. action sequences form macros, applied
later plateaus once-again encountered FFs search order escape
plateaus quickly.
SGPlan (Version 5.22; Chen et al., 2006) domain-modification script (Coles & Coles,
2011). SGPlan5 exploits partition-and-resolve strategy partition mutual-exclusion
constraints planning problem subgoals subproblems, solves subproblems individually using modified version Metric-FF planner, resolves
violated global constraints iteratively across subproblems. observed
performance SGPlan affected rules detecting domain name
number domain operators (Coles & Coles, 2011). work, intend consider
652

fiPlanning Automatic Portfolio Configuration: PbP Approach

available implemented systems chances perform well (possibly combination
others) least one domain range varied existing benchmark domains.
SGPlan definitely one systems. However, order prevent usage
domain-specific detection rules SGPlan that, differently planners incorporated PbP, would make SGPlan domain-specific domains, induced
SGPlan behave domain-independently domain modification script, proposed
Coles Coles (2011). script changes domain name, adds never-applicable
action domain, runs SGPlan obtained domain. addition,
domain-modification script changes names domain operators.
Fast Downward (Version 1.0.1; Helmert, 2006). Fast Downward (abbreviated FD)
translates input pddl problem specification multi-valued state variable representation SAS+ (Backstrom & Nebel, 1995), searches plan space
world states using heuristic derived causal graph, particular graph representing
causal dependencies SAS+ variables. PbP integrates 2006 version planner.
main improvement compared earlier version planner 2004
propositional satisficing track IPC4 addition safe abstraction, form problem
simplification allows planner solve certain kinds simple problems without
search.
LAMA (Version 2008; Richter & Westphal, 2010). LAMA built Fast Downward, using
SAS+ state variables multi-heuristic search. core feature use pseudoheuristic derived landmarks, propositions must true every solution
planning task. Moreover, weighted A? search used iteratively decreasing weights,
planner continues search plans better quality.
LPG-td (Gerevini et al., 2006). LPG-td inherits main ideas used LPG (Gerevini et al.,
2003). LPG uses stochastic local search space partial plans represented action
graphs. search steps certain graph modifications transforming action graph
another one. LPG-td includes accurate heuristics selecting graph modifications
LPG.
ParLPG (Version IPC7; Vallati et al., 2013b). ParLPG recent system based
idea automatically configuring generic, parameterized planner using set training
planning problems order obtain speed-optimized planners perform especially well
domains problems. ParLPG uses FocusedILS variant off-the-shelf,
state-of-the-art automatic algorithm configuration procedure ParamILS (Hutter et al., 2007,
2009), planning system LPG (ver. 1.0), several components
configured flexibly via many exposed configurable parameters.

4. Experimental Analysis
section, present results large experimental study PbP
following main goals:
(G1) describing configured portfolios analyzing configuration process PbP
(Section 4.2);
653

fiGerevini, Saetti, & Vallati

(G2) analyzing efficiency PbP.s/q terms speed plan quality context
planning competitions IPC6-7 (Section 4.3);
(G3) comparing performance planner portfolio configured PbP.s/q versus
planning systems based planner portfolios (Section 4.4);
(G4) evaluating effectiveness using (automatically computed) domain-specific
configuration knowledge PbP.s/q (Section 4.5);
(G5) comparing performance planner portfolio configured PbP.s/q versus
single basic planners portfolio, evaluating accuracy planner
cluster selection PbP.s/q (Section 4.6);
(G6) analyzing kind macros selected PbP planners configured
portfolio, evaluating effectiveness using selected macro set, understanding PbP.s/qs accuracy selecting useful set (Section 4.7);
(G7) investigating possible alternative methods scheduling execution
planners selected cluster, understanding effectiveness default
round-robin strategy PbP.s/q (Section 4.8).
experimental study uses various versions PbP, important
listed Table 1. G1, show CPU time configuration step,
evaluate size training problem set important derive effective configured
portfolios. G2, PbP compared planners entered learning track
IPC6-7 winner deterministic track IPC7. G3, performance
PbP analyzed w.r.t. FDSS (Seipp et al., 2012) BUS, portfolio approach proposed
Roberts Howe (2007). Although BUS FDSS propose design domainindependent planner portfolios, principle used, PbP, generate
domain-optimized planning systems. experimentally investigate use
approaches, comparing PbP. G4, show results three different
experimental comparisons: comparison PbP configured using learned domainspecific knowledge (DSK), unconfigured version PbP (PbP-nok) randomly
configured version PbP (PbP-rand); comparison performance gaps PbP
PbP-nok w.r.t. gaps IPC6-7 planners with/without learned knowledge;
comparison PbP using DSK, PbP configured single domain without using
macros, PbP configured across IPC7 domains (PbP-allD). G5, conducted
three experiments which: performance PbP incorporated planners
compared; performance PbP analyzed w.r.t. best incorporated planner (without
using macros) every IPC7 domain; and, finally, PbP compared best cluster
incorporated planners (possibly using macros) every IPC7 domain. G6, compare
performance planners forming clusters selected PbP using (i) macros,
(ii) set macros selected PbP, (iii) best performing set macros; moreover,
show comment features sets macros selected used PbP. Finally,
G7 perform two experimental analysis: comparison clusters selected PbP
using different scheduling strategies, comparison performance PbP using
different PCPVs (PbP R1-R2/S1-S2).
654

fiPlanning Automatic Portfolio Configuration: PbP Approach

PbP (default)
PbP-IPC6
PbP-IPC7
PbP-nok
PbP-rand
PbP-noM
PbP-allD
PbP S1
PbP S2
PbP R1 PbP
PbP R2
PbP 10/30/60

PbP versions
Last version PbP configured computing domain-specific knowledge (DSK)
Version PbP entered IPC6 configured using DSK
Version PbP entered IPC7 configured using DSK
Unconfigured portfolio
Randomly configured portfolio
Configuration without macros
Configuration without macros across IPC7 domains
Configuration using sequential scheduling planners uniform time slots
Configuration using sequential scheduling planners non-uniform time slots
Configuration using round-robin scheduling planners default PCPV
Configuration using round-robin scheduling planners different PCPVs
Configuration using 10/30/60 training problems

Table 1: Main variants PbP generating different types planner portfolio configurations
used experimental analysis.

presenting discussing results experimental analysis, describe
experimental settings.
4.1 Experimental Settings
experiment evaluating PbP.s/q respect IPC6-7 planners considers
IPC6-7 benchmark domains (Fern et al., 2011; Jimenez et al., 2011),
experiments focus recent IPC7 domains. Regarding training problems used
experiments, IPC6 domains IPC6; IPC7
domains, set 540 problems various sizes (60 problems IPC7 domain,
unless otherwise specified particular experiment consideration)
generated using problem generator made available organizers IPC7 (for IPC7,
explicit set training problems provided). training problems used
learning macros configuring portfolio. Since learning procedure Wizard
run planner training problems several times, order make training
much time consuming, half training problem set designed formed
problems took 30 seconds solve planner; half formed
problems took 450 seconds (half CPU time limit used testing
phase) solve.
Regarding test problems, used problems used IPC6-7:
IPC6 test problems used evaluating performance PbP.s/q respect
planners entered IPC6; IPC7 test problems, generally larger much
difficult IPC6 problems, used evaluating PbP.s/q respect
IPC7 planners, well experiments analysis.
experiments conducted using last version PbP.s/q,
exactly one entered IPC7 (PbP-IPC7 short) three reasons:6 (a) PbP-IPC7 properly compiled lack C-libraries
competition machine, discovered competition; (b) PbP-IPC7 contains
minor syntax bug format output plans IPC7 domains made
generated plans invalid program validating used competition (Howey,
6. code last version PbP available http://chronus.ing.unibs.it/pbp/.

655

fiGerevini, Saetti, & Vallati

Long, & Fox, 2004); (c) PbP-IPC7.s uses SGPlan5 without domain-modification
script induces SGPlan5 behave domain-independently. Point (a) negatively affected
performance PbP-IPC7.s/q, one incorporated planners (Macro-FF)
could run selected. (b), many valid plans generated PbP-IPC7.s/q
rejected plan validator IPC7. Point (c) changed composition clusters selected PbP-IPC7.q include SGPlan5, make performance
PbP.q PbP-IPC7.q substantially different. difference planner
clusters selected PbP-IPC7.s PbP.s concerns domain Blocksworld,
cluster PbP-IPC7.s consists ParLPG without macros, cluster selected PbP.s
ParLPG using Bunching set macros computed Wizard.
comparison IPC6 planners, results PbP.s/q obtained
running last version machine similar (same CPU frequency amount RAM)
one used obtain official IPC6 data (an Intel Core(tm) Quad-processor Q6600
3 Gbytes RAM). comparison PbP.s/q IPC7 planners, systems
run using machine IPC7 (a Quad-core Intel Xeon 2.93 GHz 4 Gbytes
RAM) IPC-organizers made available us experiment. Unless otherwise
specified, experiments conducted using Quad-core Intel Xeon(tm) 3.16
GHz 4 Gbytes RAM.
experimental analysis required many days CPU time. Unless otherwise indicated,
IPC6-7, CPU-time limit run PbP.s/q 15 minutes, PbP.s/q used
default configuration process (the CPU-time limit simulated execution planner
cluster 15 minutes), planners configured portfolio run roundrobin scheduling described Section 3.2. performance data planner PbP.s/q
incorporating randomized algorithm (i.e., LPG, ParLPG LAMA) obtained
single run considered problem instance.
experimental comparisons test instances generally use three alternative
methods: average performance data, IPC7 score function (Jimenez et al.,
2011), Wilcoxon sign-rank test used planner cluster selection
configuration. Given two compared planners problem set, average CPU time
planner computed problems set solved least one
compared planners, using CPU-time limit (900 seconds) CPU time
planner solve problem; average plan quality computed
problems solved compared planners.
IPC7 score function defined follows. Concerning planning speed, planner
P solves problem using CPU time, gets time score equal 1+log 1 (t/t ) ,
10
best time times required planners comparison solving
. Concerning plan quality, P generates plan l actions solving , gets quality

score equal , l number actions shortest plan computed
compared planners . P solve , gets zero score (both
speed quality). Given domain D, time (quality) score planner P
sum time (quality) scores assigned P considered test problems D.
IPC7 score function speed refinement IPC6 score function.
IPC6 IPC7 time scores defined according much slower planner performs
best performing one, IPC6 score penalizes slowdowns heavily
656

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7 score. experiments, observed using IPC6 function, instead
IPC7 function, gives similar general results slightly favorable PbP.s.
Wilcoxon sign-rank test, null hypothesis performance
compared pair planning systems statistically similar. level confidence used
p = 0.001. analysis involves comparison two planning systems,
then, order maintain confidence level used one hypothesis tested
(i.e., pair planners compared), confidence level modified
Bonferronis correction (Shaffer, 1995). analysis, usage Bonferronis
correction implies that, experimental result obtain Wilcoxon sign-rank test
derives comparison n planning systems, used confidence level 0.001
n1 .
Moreover, plan quality comparison using Wilcoxon sign-rank test, quality
plans computed two compared planners normalized length best plan
test problems solved planners. Since Wilcoxon sign-rank test uses
ranking differences values sample pair, compared absolute
plan length directly, without normalization, differences values domains
could result unintended bias, small relative differences benchmark domain
large solution plans weighted important larger relative differences
domain small plans.
4.2 Overview Configured Portfolios Generated PbP
section concerns experimental goal G1: give information configured portfolios (multi-planners) generated default version PbP.s/q (see Table 1),
relative CPU times used automated portfolio configuration, size
training problem set used configuring PbP. Table 2 shows planners clusters selected PbP every IPC6-7 domain. planner cluster, table
indicates brackets sets macros selected PbP, available
http://chronus.ing.unibs.it/pbp (the computed planning time slots clusters
omitted brevity clarity). example, Depots, PbP.q selects cluster formed
(i) Macro-FF two learned macros frequently appear Macro-FFs
plans solving training problems, (ii) ParLPG without computed macros,
(iii) SGPlan5 set macros obtained chunking macro generation method
Wizard. configured portfolios Table 2 derive following observation:
Experimental result 4.2.1 planner clusters selected PbP often formed different sets planners macros: overall nine basic planners helpful (each
selected PbP.s/q least once), different sets macros considered helpful
others, including, cases, empty set.
Concerning planning speed, observe domains PbP.s relies single
planner possibly using set macros. particular, 7 15 considered domains
ParLPG outperforms incorporated planners, hence domains
selected cluster contains ParLPG. main reason better performance ParLPG
uses LPG parameter configuration (automatically) optimized
every considered domain, greatly speedup planner (Vallati et al., 2013b).
657

fiGerevini, Saetti, & Vallati

Domains
IPC6 domains
Gold-miner
Matching-BW
N-puzzle
Parking
Sokoban
Thoughtful
IPC7 domains
Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP

PbP.s

PbP.q

YAHSP (Cl)
ParLPG ()
ParLPG ()
Macro-FF (M2)
ParLPG ()
(), YAHSP ()

Macro-FF (M1), LAMA (B), LPG (0)
Marvin (0), LAMA (), LPG (B)
Fast Downward (), LAMA (), LPG (0)
(0), LAMA ()
Macro-FF (M2), LPG (B)
Macro-FF (M5), Marvin (), LAMA ()

SGPlan5 (B)
ParLPG (B)
Macro-FF (M2), ParLPG (0)
ParLPG ()
Macro-FF (M2)
ParLPG ()
ParLPG ()
ParLPG ()
Macro-FF (M1)

SGPlan5 (Cl), (), LAMA ()
ParLPG (), LPG (B)
Macro-FF (M2), ParLPG (0), SGPlan5 (Ch)
Marvin (), ParLPG ()
(0), LAMA ()
LAMA (), ParLPG ()
ParLPG (), Marvin (0)
LPG ()
LAMA (), SGPlan5 (Ch)

Table 2: Planners sets macros (in round brackets) cluster selected PbP
IPC6-7 domains. 0 indicate macros generated
selected, respectively; Ch, B Cl abbreviate three sets macros
Chunking, Bunching Clumping generated Wizard, respectively; M1M5
five sets macros generated Macro-FF. order planners listed
clusters corresponds order run.

observed that, previous version PbP entered IPC6 without ParLPG,
selected clusters even varied.
interesting observe PbP selects Macro-FF configured portfolio
planner always uses non-empty set macros. fact selected cluster Macro-FF always uses one among learned sets macros indicates macro
construction exploitation methods incorporated Macro-FF effective
planning system.
Table 3 gives CPU times used PbP.s different phases portfolio
configuration applied IPC7 domains, machine Quad-core Intel
Xeon(tm) 3.16 GHz 4 Gbytes RAM used.7 configuration times PbP.q
similar PbP.s macro extraction cluster simulation phases,
higher performance measurement, incorporated incremental
planners use whole CPU-time limit order find good quality plans. Although
configuring PbP specific domain requires considerable amount CPU time,
considered configuration needs done once, since generated
configured portfolio (selected planner cluster) used problems domain.
Finally, order understand small sets training problems sufficient
derive informative DSK test problems larger training ones,
7. every IPC7 domain, parameter configuration ParLPG required 1400 hours.

658

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7
Domains
Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP

Macro Extraction
Macro-FF Wizard
37.5
28.5
16.4
44.2
7.1
82.9
45.3
12.9
23.8
86.5
18.2
0.0
14.1
41.3
5.25
0.8
19.3
3.9

Performance
Measure
121.6
92.7
92.4
96.8
163.0
57.3
60.0
110.7
34.5

Simulation &
Selection
0.02
0.02
0.02
0.02
0.02
0.02
0.02
0.02
0.02

Total
187.6
153.4
182.4
155.0
273.3
75.6
115.4
116.8
57.8

Table 3: CPU hours used configuration PbP.s IPC7 domains: extraction
macros Macro-FF Wizard (2nd 3rd columns), performance measurement phase (4th column), cluster run simulation best cluster selection (5th
column), total configuration time (6th column).

compared performance PbP configured using default number 60 training problems using half one-sixth training problems. (The range problem
size three sets training problems.) results analysis
Table 4. course, lower number training problems is, cheaper
training PbP is. hand, DSK computed using training problems
sometime much less effective informative DSK obtaining using larger sets.
Depots, PbP.s DSK derived 60 training problems performs much
better DSKs derived 30 10 training problems;
domains, performance PbP.s three compared DSKs similar same.
interesting observe Depots domain cluster PbP.s two
planners. domain, cluster PbP.s derived 60 training problems consists
Macro-FF ParLPG: 16 training problems ParLPG hands solution PbP.s,
44 training problems solution PbP.s obtained Macro-FF.
DSK derived 30 20 training problems, either Macro-FF ParLPG part
configured cluster PbP.s makes PbP.s performing worse.
Depots, Satellite TPP, PbP.q DSK derived 60 training problems
performs much better DSK derived 30 10 training problems.
domains, performance PbP.q similar same.
4.3 Performance PbP IPC6-7 Planners
section concerns experimental goal G2: experimentally evaluate performance
PbP context IPC6-7 aim showing competitive
recent planning systems using domain specific learned knowledge. Since time
writing several IPC6-7 planners relative domain specific knowledge available,
experiment used official competition data (CPU times, plan qualities
number solved problems) results obtained running last version PbP.
659

fiGerevini, Saetti, & Vallati

IPC7
Domains

Depots
Parking
domains
IPC7
Domains

Blocksworld
Depots
Parking
Satellite
TPP
domains

Time score
60
30
26.0
2.6
7.4
4.9
33.4
7.0

10
2.6
5.8
8.4

Mean CPU time
60
30
10
31.9
312.5 312.5
172.8 127.7 281.3
110.2 209.8 292.6

# solved problems
60
30
10
26
4
4
8
5
7
34
9
11

Quality score
60
30
10
29.9
29.6 29.6
24.7
8.6
9.2
4.8
2.8
2.0
29.6
0.0
27.8
14.8
7.7
0.0
133.8 78.7 98.6

Mean plan length
60
30
10
269.9 272.8 272.8
151.7 156.2 151.2
76.0
61.0
61.0






325.3 326.6 326.0

# solved problems
60
30
10
30
30
30
26
10
10
5
3
2
30
0
28
15
8
0
136
81
100

Table 4: Time/quality score, average CPU time/plan length number solved problems
PbP.s/q configured DSK computed using set either 60 (default
version PbP), 30 10 training problems. domains considered
IPC7 domains training phase PbP.s/q derives different DSKs
training problem sets different sizes.

learning track IPC6 IPC7, competing teams aware
domains used evaluation submitting systems. code submission,
contest two phases. first phase, domains released learning
parts planners run automatically derive, domain, additional
knowledge using set training problems domain. second phase, submitting learned knowledge IPC organizers, planners run relative
learned knowledge, resulting performance data compared using IPC score
function. interested reader find details IPC6-7 organization
well collection short papers describing IPC6-7 planners entered learning
track work Fern et al. (2011), Jimenez et al. (2011).
PbP, knowledge derived first phase competition portfolio configuration knowledge described previous section paper. knowledge learned IPC6 planner ObtuseWedge consists special patterns, extend
notion n-gram include argument relations, used aim
speeding enforced hill-climbing search (Yoon, Fern, & Givan, 2008). IPC6
planning systems Wizard+FF Wizard+SGPlan learn set macro actions planners SGPlan5, respectively. IPC7 planners, Bootstrap-Planner learns
domain-specific heuristic combining set existing heuristics weights obtained
evaluating performance heuristics training problems (Arfaee, Zilles, &
Holte, 2010). Finally, knowledge learned OALDAEYASHP (Brendel & Schoenauer,
2011), ParLPG, Fast Downward-autotune-speed Fast Downward-autotune-quality (Fawcett
et al., 2011) consists domain-specific parameter configurations.
Table 5 gives overall experimental evaluation best-performing planners
IPC6 (using IPC6 domains) best-performing planners IPC7 (using
660

fiPlanning Automatic Portfolio Configuration: PbP Approach

Best IPC6 planners
PbP.s
PbP.q
ObtuseWedge
PbP-IPC6.s
PbP-IPC6.q
RFA1
Wizard+FF
Wizard+SGPlan
Best IPC7 planners
PbP.s
PbP.q
Bootstrap-Planner
Fast Downward-autotune-speed
Fast Downward-autotune-quality
OALDAEYASHP
ParLPG
PbP-IPC7.s
PbP-IPC7.q
LAMA-2011

Problem Solved
(%)
97.0
95.0
65.0
95.6
92.8
47.2
56.7
51.1

Time score
(max = 180)
105.5
6.89
73.5
88.2
6.43
14.7
47.3
56.1

Quality score
(max = 180)
111.2
169.1
75.6
111.4
132.3
52.3
72.4
65.2

Problem Solved
(%)
87.4
83.7
4.07
77.0
32.2
7.41
57.04
71.48
70.37
37.67

Time score
(max = 270)
232.7
76.2
3.28
110.0
35.3
5.70
104.0
178.1
71.1
37.9 (1st sol.)

Quality score
(max = 270)
202.5
221.7
10.93
170.8
64.3
3.76
146.0
172.5
192.7
82.4 (last sol.)

Table 5: Percentage solved problems within 15 CPU minutes, time quality scores
PbP.s/q (best performing) planners took part learning track
IPC6-7 domains problems IPC6-7. Larger scores indicate better
performances. PbP-IPC6 PbP-IPC7 indicate versions PbP took part
IPC6 IPC7, respectively; LAMA-2011 winner deterministic track
IPC7.

IPC7 domains), terms percentage solved problems, planning speed plan quality.
compared planners run relative learned knowledge. data
Table 5, following general experimental result derived.
Experimental result 4.3.1 IPC6-7 domains problems, PbP.s generally
faster compared IPC6-7 planners, PbP.q performs generally better terms plan
quality, PbP.s/q solves many problems.8
Remarkably, PbP.s/q solves high percentage IPC6-7 benchmark problems
within 15 CPU minutes, PbP.q almost always computes plan better
plan computed competitor. contrast, time score PbP.q low, since
8. version PbP used comparison suffer technical problems indicated Section
4.1 affected performance PbP IPC7. IPC7 planners may suffered similar
problems, implementation might improved versions considered.
However, note even version PbP.s/q entered IPC7 performs generally better
competing planners.

661

fiGerevini, Saetti, & Vallati

PbP.q usually runs one planner stops selected planners
terminate CPU-time limit exceeded.
analysis competition results (planner CPU times plan qualities) using
Wilcoxon sign-rank test instead IPC score functions performance comparison
confirms PbP.q generates significantly better quality plans (z = 3.920, p < 0.001
7 ).
p-value obtained analysis 0.004 (with z-value equal 2.846). Since p-value
adjusted critical value 0.001
7 , null hypothesis (the performance PbP
similar performance IPC6-7 planners terms speed) accepted,
thus research hypothesis (the performance PbP statistically different) rejected.
However, worth pointing critical value 0.001 quite hard reach,
especially given apply experiment-wise error adjustment. set
less stringent critical value, say 0.05, adjusted critical value would 0.05
7 = 0.0071,
p-value 0.004 would significant.
Table 6 gives details performance comparison IPC7 domain.
terms speed, PbP.s best performance eight nine domains considered analysis; domain perform best Parking,
Fast Downward-Autotune-speed performs better. Similarly, terms quality, PbP.q
best performance seven nine domains, performs well ParLPG
PbP.q one domain (Spanner), performs worse Fast Downward-Autotune-speed
two domains (Parking TPP). worth noting principle portfolio approach
incorporate planners promising attempting problems domain.
current version PbP integrates planners established state-of-the-art
PbP developed, time Fast Downward-Autotune-speed available. results Table 6 indicate portfolio-based approach would reach better
performance, incorporated planner. instance, likely PbP would
select planner domain Parking, greatly improving performance domain.
Finally, comment relative performance PbP winner deterministic satisficing track IPC7, 2011 version LAMA. course, cannot expect
domain-independent planner, LAMA, performs better planner exploiting
(learned) specific domain knowledge. hand, definitely desired property
way around holds: planning system uses form (automatically
acquired) domain specific knowledge effective performs better state-ofthe-art domain-independent planner use additional knowledge.
last lines Tables 5 6 indicate global domain-by-domain performance
LAMA-2011 respect planners learning track IPC7, considering
score functions competition track.9 comparison, CPU time limit used
run LAMA 15 minutes, time limit one used run PbP.s/q
planners took part learning track IPC7. worth noting
IPC7 domains learning track propositional, IPC7 problems require
optimization explicit specified plan metric; problems, LAMA
PbP minimize number actions. seen PbP.s/q performs substantially
9. Although experimental comparison considers planning time scores plan quality scores,
noted deterministic track IPC7 focused plan quality, hence LAMA-2011
presumably developed focusing quality rather speed. sense, results plan
quality comparison LAMA-2011 meaningful planning speed.

662

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7 Planners
Bootstrap-Planner
FDA-speed
FDA-quality
OALDAEYASHP
ParLPG
PbP-IPC7.s
PbP-IPC7.q
PbP.s
PbP.q
LAMA-11

Solved problems

Barman

BW

Depots

Gripper

Parking

Rovers

Sat

Spanner

TPP

0
30
0
0
0
29
30
30
30
2

11
29
27
20
30
29
30
30
30
29

0
20
0
0
17
26
10
26
26
0

0
30
1
0
30
30
30
30
30
0

0
20
9
0
0
0
5
8
5
5

0
30
30
0
27
27
30
27
30
30

0
19
7
0
30
30
30
30
30
13

0
0
0
0
30
30
30
30
30
0

0
30
14
0
15
0
0
25
15
20

Barman

BW

Depots

Gripper

Parking

Rovers

Sat

Spanner

TPP

0.0
14.3
0.0
0.0
0.0
28.8
22.9
28.8
22.9
0.52

3.28
12.1
9.31
5.70
16.3
17.3
8.27
30.0
8.27
10.6

0.0
10.9
0.0
0.0
9.18
25.1
3.05
25.1
7.95
0.0

0.0
9.84
0.55
0.0
15.3
30.0
8.47
30.0
8.47
0.0

0.0
18.7
5.67
0.0
0.0
0.0
2.62
7.14
2.62
2.8

0.0
13.5
11.4
0.0
17.5
27.0
8.21
27.0
8.21
10.0

0.0
6.39
1.92
0.0
17.7
30.0
10.2
30.0
10.2
3.5

0.0
0.81
0.51
0.0
16.2
30.0
7.34
30.0
7.34
0.0

0.0
23.5
5.96
0.0
11.9
0.0
0.0
24.8
7.37
10.5

Barman

BW

Depots

Gripper

Parking

Rovers

Sat

Spanner

TPP

0.0
26.9
0.0
0.0
0.0
28.4
30.0
28.4
30.0
1.86

3.76
13.2
13.3
10.9
21.7
24.1
29.8
21.1
29.8
21.8

0.0
20.0
0.0
0.0
8.31
16.8
9.01
16.8
23.0
0.0

0.0
28.8
0.0
0.0
28.6
27.5
29.9
27.5
29.9
0.0

0.0
17.2
9.00
0.0
0.0
0.0
4.09
9.08
4.09
3.8

0.0
24.2
22.8
0.0
21.4
19.3
30.0
19.3
30.0
24.7

0.0
15.7
6.67
0.0
28.5
26.5
30.0
26.5
30.0
11.0

0.0
0.0
0.0
0.0
30.0
30.0
30.0
30.0
30.0
0.0

0.0
24.8
12.6
0.0
7.54
0.0
0.0
23.9
14.9
19.3

IPC7 Planners
Bootstrap-Planner
FDA-speed
FDA-quality
OALDAEYASHP
ParLPG
PbP-IPC7.s
PbP-IPC7.q
PbP.s
PbP.q
LAMA-11 (1st sol.)

Time score

IPC7 Planners
Bootstrap-Planner
FDA-speed
FDA-quality
OALDAEYASHP
ParLPG
PbP-IPC7.s
PbP-IPC7.q
PbP.s
PbP.q
LAMA-11 (last sol.)

Quality score

Table 6: Number solved problems, time/quality scores (best performing)
IPC7 planners IPC7 domain. FDA, LAMA-11, BW Sat abbreviate
Fast Downward-Autotune, LAMA-2011, Blocksworld Satellite, respectively.

better LAMA-2011. results Table 5 show PbP.s/q solves many IPC7
problems, achieves considerably better overall time quality scores respect
LAMA-2011s first best quality solutions, respectively. results Table 6 show
that: PbP.s much higher speed performance every domain, much higher
quality performance domains; PbP.q much higher quality performance
seven domains, performs similarly two domains, much
higher speed performance domains.
Moreover, since deterministic track IPC7 CPU-time limit 30 minutes,
compared LAMA-2011 PbP.s/q problems learning track using
limit first planner, keeping 15 CPU minutes second. extra CPU
time LAMA-2011 considerably change results comparison: overall,
663

fiGerevini, Saetti, & Vallati

total time scores LAMA-2011 PbP.s/q 61.9 231.9/116.5, respectively;
total quality scores LAMA-2011 PbP.s/q 80.7 227.6/206.2, respectively;
LAMA-2011 solves 101 problems PbP.s/q solve 238/230 problems.
previous experimental analysis PbP.s/q LAMA-2011 summarized
following claim, suggesting portfolio-based planner (automatically) configured
given domain, perform much better state-of-the-art fully domain-independent
planner.
Experimental result 4.3.2 benchmark domains learning track IPC7,
configured versions PbP.s/q perform better IPC7 winner deterministic
track.
Since PbP without configuration knowledge (PbP-nok) fully domain-independent
planner, interesting see well PbP-nok performs w.r.t. LAMA-2011.
experimental comparison, used benchmark domains problems deterministic track IPC7, CPU-time limit IPC7 run (30 minutes).
Moreover, since deterministic track IPC7 focused plan quality, measured total
action cost, considered quality version PbP-nok. LAMA-2011 optimizes
total action cost, PbP-nok.q incorporated planners consider number actions
plan quality. Although analysis relies total action cost, hence somewhat
favor LAMA-2011, observed PbP-nok.q competitive LAMA-2011.
problems IPC7 deterministic track, total quality score number solved
problems slightly lower PbP-nok.q LAMA-2011 (214.8 232.2,
239 250, respectively). lower quality score PbP.q mainly two
fourteen IPC7 domains (Elevator Parcprinter), PbP-nok.q obtains much
lower scores (1.0 19.0 3.0 19.6, respectively). test problems
learning track IPC7, PbP-nok.q performs even better LAMA-2011 (IPC quality
score: 168.8 versus 97.5; solved problems: 181 versus 105).

Experimental result 4.3.3 benchmark domains deterministic learning
tracks IPC7, PbP.q without configuration knowledge (PbP-nok.q) competitive
winner IPC7 deterministic track.

Given PbP.q without configuration performs already well, performance improvement obtained exploiting computed configuration knowledge even notable.
Section 4.5 shows portfolio configuration PbP.s/q useful improve
performance.
4.4 Performance PbP Planner Portfolios
section concerns experimental goal G3: compare PbP two planner portfolio
approaches: FDSS (Helmert et al., 2011) BUS (Roberts & Howe, 2007).
664

fiPlanning Automatic Portfolio Configuration: PbP Approach

4.4.1 PbP versus FDSS
Table 7 shows performance PbP.s/q w.r.t. FDSS without using macros.10
results comparison summarized follows.
Experimental result 4.4.1 benchmark domains learning track IPC7,
terms number solved problems PbP.s/q performs always better FDSS, except
domains Rovers TPP, FDSS solves problems PbP.s PbP.q,
respectively. terms time score, PbP.s always performs better FDSS. terms
quality score, PbP.q performs always better except TPP.
think least four reasons experiments PbP performed generally
better FDSS. main reason that, PbP separately configured every
considered domain, FDSS always uses configuration determined problem
instances IPC16, designed using problem distributions quite different
learning track IPC7 (Seipp et al., 2012). reasons (a) diversity
planning methods implemented planners incorporated PbP FDSS, (b)
usage macros PbP.s/q, (c) different portfolio configuration techniques
two compared systems. Concerning (a), consider instance domain Spanner,
PbP.s/q outperforms FDSS PbPs configured portfolios use ParLPG/LPG (see Table
2). every planner incorporated FDSS uses heuristic forward search techniques,
ParLPG/LPG uses heuristic techniques searching space partial plans, seems
effective domain. (b), tried learn macros FDSS using Wizard,
unfortunately useful macro learned planning system. Therefore, tested
performance FDSS using macros learned Wizard selected PbP.s/q
planners configured portfolios (see Table 2). results Table 7 indicate
that, using macros sometimes greatly improves performance PbP,
really effective FDSS.
Finally, order better understand importance (c), developed compared PbP new variant FDSS, called FDSSd , restricting differences
FDSS PbP configuration techniques. Specifically, FDSSd following similarities differences w.r.t. original FDSS. FDSSd uses configuration
techniques FDSS, configures planner portfolio separately input domain
(instead set domains altogether), uses macros, integrates planners
PbP (instead set forward-state planners). Then, important differences
PbP FDSSd method planner cluster selection scheduling
strategy used running planners forming clusters that, described Section 2,
substantially different.
PbP, computed two sets domain-optimized portfolio configurations
FDSSd : FDSS.sd focusing speed, FDSS.qd focusing plan quality. IPC7
domains except Depots, planner clusters selected FDSS.s
PbP.s. Depots, cluster FDSS.s consists Macro-FF using macro set M1
Macro-FF using macro set M2, cluster PbP.s consists ParLPG using macro
Macro-FF using macro set M2. domain FDSS.s PbP.s
10. version FDSS run experiment uses 15 38 variants Fast Downward analyzed
Helmert et al. (2011).

665

fiGerevini, Saetti, & Vallati

Planners
PbP.s
PbP.q
FDSS
FDSS+M
PbP-nok.s
PbP-nok.q

# solved problems

Barman

BW

Depots

Gripper

Parking

Rovers

Sat

Spanner

TPP

30
30
0
0
23
23

30
30
21
10
17
18

26
26
0
0
8
8

30
30
0
0
24
25

8
5
0
0
0
0

27
30
28
28
20
17

30
30
14
14
11
11

30
30
0
0
13
13

25
15
17
17
7
10

Barman

BW

Depots

Gripper

Parking

Rovers

Sat

Spanner

TPP

30.0
23.0
0.0
0.0
6.7
6.2

30.0
8.27
9.7
3.6
7.1
5.4

26.0
8.03
0.0
0.0
5.1
3.0

30.0
8.47
0.0
0.0
10.3
7.9

7.8
2.54
0.0
0.0
0.0
0.0

27.0
8.21
17.1
17.1
9.8
5.8

30.0
10.2
8.8
8.8
4.7
4.1

30.0
7.3
0.0
0.0
5.3
5.3

23.7
7.1
8.5
9.0
3.2
3.8

Barman

BW

Depots

Gripper

Parking

Rovers

Sat

Spanner

TPP

28.4
30.0
0.0
0.0
22.5
22.5

21.3
29.9
13.4
12.9
10.3
12.3

17.2
26.0
0.0
0.0
7.6
7.4

27.6
30.0
0.0
0.0
18.1
19.9

5.4
5.0
0.0
0.0
0.0
0.0

18.2
27.9
24.9
24.9
18.7
15.8

26.3
29.5
12.2
12.2
8.9
9.8

30.0
30.0
0.0
0.0
13.0
13.0

20.3
14.2
16.1
15.4
6.3
9.3

Planners
PbP.s
PbP.q
FDSS
FDSS+M
PbP-nok.s
PbP-nok.q

Time score

Planners
PbP.s
PbP.q
FDSS
FDSS+M
PbP-nok.s
PbP-nok.q

Total
236
226
80
69
123
125

Total
234.5
83.2
44.1
38.5
52.2
41.5

Quality score
Total
194.7
222.5
66.6
65.4
105.4
110.0

Table 7: Number solved problems, time/quality scores PbP, PbP-nok, FDSS
with/without using macros IPC7 domain. FDSS+M, BW Sat abbreviate FDSS using macros, Blocksworld Satellite, respectively.

cluster, cluster formed single planner. Hence, running sequential
scheduling round-robin scheduling thing, compared planner
portfolios performance.
planner clusters selected FDSS.q Table 8. domains Gripper, Satellite
TPP, PbP.q but, cases formed
one planner. domains Satellite Gripper observed FDSS.q performs
differently PbP.q different scheduling strategy. Table 9 shows results experimental comparison PbP FDSSd (results omitted
compared clusters formed single planner). Overall,
derive following observation.
Experimental result 4.4.2 almost benchmark problems domains
learning track IPC7, PbP.s fast FDSS.sd , Depots slightly faster;
PbP.q computes plans always good better computed FDSS.qd ,
solves problems.
performance gap PbP FDSSd lower gap PbP
FDSS, Depots PbP.s performs slightly better terms speed number
solved problems, IPC7 domains PbP.q performs considerably better
terms plan quality. rationale behavior that, show Section 4.6,
666

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7 Domain
Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP

FDSS.qd
(Cl), FF, L,
(B), (Ch), MFF (M1), (B),P, L, LPG (Ch), LPG (B)
LPG, M, (Ch), MFF (M1), (Cl), (Ch), (Cl), P, MFF (M2), L
M, P
(Ch), FF, L
FF, MFF (M1), L, LPG
P,
P
L (), (Ch)

Table 8: Planners sets macros (in round brackets) cluster selected FDSSd
IPC7 domains. S, L, M, MFF P abbreviate SGPlan5, LAMA, Marvin,
Macro-FF ParLPG, respectively; Ch, B Cl three sets
macros Chunking, Bunching Clumping generated Wizard; M1M5
five sets macros generated Macro-FF.

running planner clusters round-robin scheduling robust running
sequentially using possibly inadequate values planning time slots. Another explanation,
especially high performance difference terms plan quality, different way
PbP FDSSd explore portfolio configuration spaces. FDSSd searches
planner cluster use hill-climbing algorithm space possible clusters,
PbP explores whole space possible clusters (with bound number planners
clusters). selected clusters PbP.s FDSS.sd almost always
IPC7 domains considered training problems configuring planner portfolio
focusing speed quite easy, cases single planner (possibly using macros)
outperforms every planner. contrary, domains training
problems, configuring planner portfolio focusing plan quality difficult
FDSSd , search space contains local minima prevent FDSSd finding
best-performing configuration (planner cluster), complete exploration search
space allows PbP identify it.
worth noting space planner clusters PbP much smaller
spaces FDSS FDSSd , since space PbP cannot two different clusters
formed planners relative macros, different relative sequences
planning time slots (the sequence planning time slots planner relative
set macros derived according default PCPV). case, space
clusters PbP would orders magnitude greater, time required PbP
simulating cluster execution would negligible w.r.t. time
configuration phases (see Table 3).
performance comparison PbP.s FDSSd using Wilcoxon sign-rank test
gives statistical result compatible performance data Table 9
Experimental result 4.4.2: IPC7 domains, statistical difference
planning CPU times PbP.s FDSS.sd (z = 1.257, p = 0.209), while,
667

fiGerevini, Saetti, & Vallati

IPC7
Domains
Depots

Max
score
30

Time score
PbP.s
FDSS.sd
22.2
20.1

Mean CPU time
PbP.s
FDSS.sd
53.1
126.3

# solved problems
PbP.s
FDSS.sd
26
23

IPC7
Domains
Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains

Max
score
30
30
30
30
30
30
30
30
30
270

Quality score
PbP.q
FDSS.qd
30.0
30.0
30.0
14.4
24.2
19.2
30.0
23.7
4.8
2.8
29.8
17.3
30.0
25.0
30.0
30.0
15.0
15.0
223.8
177.4

Mean plan length
PbP.q
FDSS.qd
448.3
448.3
233.5
340.2
159.9
169.1
574.0
581.7
70.6
71.7
580.3
600.2
775.2
775.2
326.0
326.0
370.1
370.1
433.1
448.7

# solved problems
PbP.q
FDSS.qd
30
30
30
20
26
21
30
24
5
3
30
18
30
25
30
30
15
15
226
186

Table 9: Maximum score, time/quality score, average CPU time/plan length number
solved problems PbP FDSSd benchmark problems Depots
planning speed, IPC7 domains plan quality.

terms plan quality, PbP.q performs significantly better FDSS.qd (z = 5.767,
p < 0.001).
4.4.2 PbP versus BUS
Although BUS originally designed generate domain-independent configured planner portfolio, FDSS, principle used build domain-specific configured
portfolios. Domain specificity obtained simply training problems domain. fully-automated executable BUS available,
experimental results presented Roberts Howe (2007) derived simulation
(Roberts & Howe, 2012). Thereby, order compare PbP BUS, implemented
BUS approach using planners macros integrated PbP, generated
domain-specific configured portfolios using implementation BUS.
BUS selects planners configured portfolio greedy set covering
approximation algorithm sets problems solved incorporated planners,
planners forming clusters ordered according ranking algorithm
Simon Kadane (1975). greedy set covering approximation algorithm iteratively
selects planner reduces set covering problem smaller one, original
input set fully covered (Cormen, Stein, Rivest, & Leiserson, 2001). Let planning
domain, P set selected planners, set test problems cover. Initially, P
empty contains 60 training problems. iteration, algorithm chooses
planner largest set solved problems S, removes problems
S, adds selected planner P . number planners largest set
solved problems greater one, algorithm selects first evaluated planner
668

fiPlanning Automatic Portfolio Configuration: PbP Approach

(the planner evaluation order random). process terminates empty.
resulting set P contains planners configured portfolio.
experimentally observed almost every considered domain, since
one incorporated planner solves training problems domain, set planners
forming cluster selected BUS domain consists one planner (except
domain Parking two selected planners, LAMA using macro set Clumping). Moreover, choice planner among solve training problems
drastically affected random order greedy set covering approximation
algorithm evaluates coverage planners. Hence, derive indication
performance reached implementation BUS, ran portfolio configuration BUS nine times, tested obtained nine configured portfolios, analyzed
three sets experimental results CPU time three sets experimental results
plan quality. three sets derived using: median performing configured
portfolio nine generated considered domain, best/worst performing configured portfolio possible portfolios generated greedy
set covering approximation algorithm BUS. results experimental comparison
given Table 10 summarized following observation.
Experimental result 4.4.3 benchmark domains learning track IPC7,
terms time score average CPU time, PbP.s/q performs much better worst
median configured portfolios derived BUS; PbP.s performs slightly better
best configured portfolio oracle would select among derived
BUS, PbP.q performs slightly worse. terms problem coverage (the criterion used
BUS select planners cluster), PbP.s solves number problems
best configured portfolio derived BUS.
results Table 10 show performance obtained configured portfolios
generated BUS varies greatly, indicating planner-selection method BUS
accurate derive efficient domain-specific configured portfolios. think
main reason planner selection BUS considers problem
coverage ignores CPU time plan quality incorporated planners. However,
important note planner-selection method BUS originally proposed
different kinds data sets (problem instances set domains considered altogether
different used experiment) different purpose (generating
domain-independent planner portfolio), BUS prominent approach showed
good performance (Roberts & Howe, 2009).
4.5 Effectiveness Computed Configuration Knowledge
section concerns experimental goal G4. order understand effectiveness
automated portfolio configuration PbP, compare performance PbP
computed configuration knowledge (PbP.s/q), configuration (PbP-nok.s/q),
random configuration (PbP-rand.s/q). PbP-nok.s/q, planners initial
portfolio selected, macros used, planning time slots
planners, execution order random. PbP-rand.s/q, PbP-nok.s/q
except subset three randomly chosen planners (possibly empty)
669

fiGerevini, Saetti, & Vallati

IPC7
Domains

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP

PbP.s

domains

30.0
29.8
20.6
29.5
7.9
26.9
30.0
30.0
25.0
229.7

IPC7
Domains

PbP.q

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains

30.0
29.9
24.4
29.0
4.3
25.1
30.0
30.0
14.5
217.2

Time score
BUS
W.s
M.s
0.0
27.3
7.4
16.1
7.6
14.3
17.3
17.5
7.2
7.2
1.7
8.7
0.0
0.0
15.0
22.4
0.0
8.2
56.2
121.7
Quality score
BUS
W.q
M.q
0.0
29.5
9.4
29.7
6.0
13.5
15.2
15.2
7.8
7.8
4.4
16.9
0.0
0.0
30.0
30.0
0.0
14.7
72.8
157.9

Mean CPU time
BUS
W.s
M.s
B.s
2.0
900.0
2.7
2.0
9.9
603.2
135.1
19.7
191.4
590.9
205.0 132.5
18.2
183.8
87.3
18.3
364.1
428.1
428.1
428.1
50.5
840.4
411.5
50.5
28.3
900.0
900.0
70.2
16.9
208.1
151.1
16.9
121.2
900.0
508.6
175.3
63.2
627.0
299.6
70.3

# solved problems
PbP.s
BUS
W.s M.s B.s
30
0
30
30
30
10
30
30
26
11
22
26
30
25
30
30
8
8
8
8
27
5
18
27
30
0
0
30
30
30
30
30
25
0
15
25
236
89
183 236

Mean plan length
BUS
W.q
M.q


210.6
198.4
175.8
231.8
876.6
876.6
77.4
77.4
482.8
522.4


326.0
326.0


459.8
464.9

# solved problems
PbP.q
BUS
W.q M.q B.q
30
0
30
30
30
10
30
30
26
11
22
26
30
30
30
30
5
8
8
8
29
5
18
29
30
0
0
30
30
30
30
30
15
0
15
25
226
94
183 238

PbP.s

B.s
30.0
23.5
21.1
28.9
7.2
26.9
23.0
30.0
21.3
211.9

PbP.q
B.q
30.0
29.9
22.8
29.9
7.8
29.0
28.5
30.0
21.5
229.4


198.4
143.7
577.0
87.8
498.8

326.0

367.6

B.q

198.4
190.5
554.7
77.4
420.0

326.0

358.7

Table 10: Time/quality score, mean CPU time/plan length number solved problems
PbP.s/q, worst, median best portfolios derived
using BUS IPC7 domains. W.s, M.s B.s denote worst, median
best portfolios among BUS derive lowest, median,
highest time score considered IPC7 test problems, respectively; similarly
W.q, M.q B.q denote worst, median best portfolios lowest,
median, highest quality score, respectively.

randomly chosen set learned macros used, instead planners, different
random configuration PbP.s/q generated every IPC7 problem.
Figure 3 gives overall picture results problems IPC7 domains
considering different amounts CPU times portfolio configuration; specifically,
time x-axis CPU-time limit given run planner (with set
macros) performance measurement simulation phase, (simulated) run
candidate clusters planners planning cluster selection ordering phase,
run configured portfolio test phase. marked points
curves PbP.s/q correspond performance scores different configured portfolios
obtained different considered CPU-time limits. results indicate that, every
considered CPU-time limit configuration phase, PbP.s/q clearly performs better
PbP-nok PbP-rand. Moreover, refined analysis considering domain separately
shows PbP.s/q best performance every single considered domain,
terms problem coverage every considered CPU-time limit gaps
670

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7 domains

Time score
240

PbP.s
PbP-nok.s
PbP-rand.s

200

IPC7 domains

Quality score
240

PbP.q
PbP-nok.q
PbP-rand.q

200

160

160

120

120

80

80

40

40

0

0
1

10

100

1000

1

10

100

1000

Figure 3: Time score (left plot) quality score (right plot) PbP, PbP-nok PbP-rand
respect increasing CPU-time limit (ranging 1 1000 seconds)
IPC7 domains.

PbP.s/q two compared version PbP similar gaps plots
Figure 3.
Experimental result 4.5.1 computed configuration knowledge considerably improve performance PbP.s/q w.r.t. unconfigured randomly configured versions
PbP (PbP-nok PbP-rand, respectively).
terms planning speed, performance comparison three considered versions PbP.s/q, using Wilcoxon sign-rank test gives similar general result: PbP.s
statistically faster versions (z = 12.578, p < 0.001
2 ). terms plan
quality, PbP.q performs statistically better unconfigured version (z = 13.205,
p < 0.001
2 ). comparison PbP.q PbP-rand.q, analyzed 47
230 problems solved PbP.q, PbP-rand.q solves problems plan
quality comparisons consider problems solved compared planners. results Wilcoxon test indicates PbP.q performs similarly PbP-rand.q
(z = 1.662, p = 0.096). However, noted low number considered
problems makes statistical comparison Wilcoxon sign-rank test
accurate informative deriving general conclusions relative performance
case.
tested version PbP-nok incorporated planners run
using predetermined time slot sequence Spre planner runs ordered using
method used PbP, considers relative performance planners
set training problems instead random order. Overall performance
PbP-nok remains much worse performance (the planner cluster selected by)
configured version PbP.
Table 11 analyzes impact performance using DSK (i.e., PbP, computed
configuration knowledge) best-performing planners entered learning track
IPC6-7. results comparison confirm strong positive impact PbPs DSK.
671

fiGerevini, Saetti, & Vallati

Planner
Best IPC6 planners
ObtuseWedge
PbP-IPC6.s
PbP-IPC6.q
Wizard+FF
Wizard+SGPlan
PbP.s
PbP.q
Best IPC7 planners
BootstrapPlanner
Fast Downward-autotune-speed
Fast Downward-autotune-quality
OALDAEYASHP
ParLPG-speed
PbP-IPC7.s
PbP-IPC7.q
PbP.s
PbP.q

Solved (%)

Time

Quality

+17.3
+3.6
+0.9
6.6
1.7
+5.0
+3.3

+34.1
+ 65.2
+5.8
+21.0
+17.6
+82.5
+6.3

+23.7
3.0
+0.7
15.2
3.1
3.2
+37.5

+4.1
+43.3
+14.1
18.9
+9.3
+5.6
+7.4
+21.48
+20.74

+3.3
+65.3
+16.0
17.3
+42.1
+116.5
+24.3
+171.1
+29.4

+10.9
+99.1
+26.4
40.4
+15.6
+16.8
+40.9
+46.8
+69.8

Table 11: Performance gaps best-performing IPC6-7 planners with/without DSK
terms percentage solved problems, time quality scores IPC6-7
benchmark domains problems. Planner RFA1 omitted works
DSK.

Experimental result 4.5.2 IPC6 domains problems, DSK computed
PbP.s PbP.q strongest impact among DSK IPC6 planners terms
improved speed (time) plan quality (quality), respectively. DSK computed
ObtuseWedge strongest impact terms percentage additional solved IPC6
problems.
reason impact DSK computed PbP quite low terms additional
solved IPC6 problems PbP.s/q solves almost problems even without DSK.
Experimental result 4.5.3 IPC7 domains problems, DSK computed
PbP.s strongest impact terms improved speed (time) among DSK
IPC7 planners. use computed DSK Fast Downward-Autotune-speed
strongest impact terms percentage additional solved problems improved plan
quality.
Although terms percentage additional solved problems improved plan quality use DSK PbP.s/q highest impact, leads high improvements PbP.s/q, allowing achieve performance generally better
Fast Downward-Autotune-speed (see Quality Score column Table 5).
Finally, conducted experiment understand configuring PbP specific domain generates DSK leads better performance w.r.t. configuring planner portfolio
672

fiPlanning Automatic Portfolio Configuration: PbP Approach

set domains altogether. Table 12 compares performance PbP.s/q
DSK, DSK obtained without using macros (PbP-noM.s/q), configuration knowledge computed across IPC7 domains (PbP-allD.s/q). planner cluster PbP-allD.s
formed LPG SGPlan5, planner cluster PbP-allD.q formed LAMA,
Marvin SGPlan5. results Table 12 indicate that, even without considering
usage macros, portfolio configuration considered domains together greatly
decreases performance PbP.
Experimental result 4.5.4 IPC7 domains, terms time score, average CPU
time number solved problems, PbP.s performs much better PbP-noM.s
PbP-allD.s. terms quality score number solved problems, PbP.q performs much
better PbP-noM.q PbP-allD.q. terms average plan length, PbP.q
PbP-noM.q perform usually better PbP-allD.q.
results Wilcoxon sign-rank test applied comparison PbP
PbP-noM confirm that, IPC7 domains, PbP.s significantly faster
PbP-noM.s (z = 7.699, p < 0.001) and, terms plan quality, PbP.q performs significantly better PbP-noM.q (z = 5.465, p < 0.001). high performance gap
PbP PbP-noM, favor PbP, clearly indicates usefulness using macros,
showing portfolio planners macros much efficient portfolio
planners.
4.6 Accuracy Planner Cluster Selection
section concerns experimental goal G5. order test accuracy planner
cluster selection PbP, carried three related experiments performance
PbP using computed configuration knowledge compared performance
(a) every basic planner incorporated initial portfolio, (b) best performing
incorporated planner (without using macros) considered domain, (c) best
performing planner cluster (possibly using macros) considered domain.
following, Section 4.6.1 presents experiments (a) (b), Section 4.6.2 experiment (c).
4.6.1 PbP Basic Portfolio Planners
Figure 4 gives overall picture performance PbP.s/q w.r.t. performance
basic planners (without macros) terms speed plan quality, using CPU-time limit
run ranging 1 1000 seconds. time/quality scores compared
system derived summing corresponding scores obtained system
IPC7 domain. analysis indicates that, every considered CPU-time limit, PbP.s
DSK generally much faster incorporated basic planners, PbP.q generates
better quality plans.
Experimental result 4.6.1 IPC7 domains, basic planner considered input portfolio PbP achieves overall performance better similar
performance PbP.s speed, PbP.q plan quality (except low
CPU-time limits, compared planners perform similarly terms plan quality).
673

fiGerevini, Saetti, & Vallati

IPC7
Domains

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains
IPC7
Domains

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains

Time score
PbP.s
noM
30.0
12.0
30.0
17.3
22.3
16.5
30.0
30.0
7.8
6.2
27.0
27.0
30.0
30.0
30.0
30.0
23.7
11.9
232.3 181.3

allD
10.9
8.3
8.7
15.0
0.0
13.6
18.3
11.3
0.0
86.1

Mean
PbP.s
2.0
5.9
28.3
18.2

16.9
28.3
13.5

25.8

CPU time
noM
allD
72.9
138.6
48.1
311.4
49.3
134.8
18.2
175.1


16.9
192.7
28.3
151.0
13.5
272.0


44.7
194.4

# solved problems
PbP.s noM allD
30
30
30
30
30
21
26
21
13
30
30
30
8
7
0
27
27
26
30
30
30
30
30
25
25
13
0
236
219
175

Quality score
PbP.q
noM
allD
29.9
29.8
0.0
29.9
18.5
13.4
25.8
7.2
2.8
30.0
30.0
21.4
4.8
4.8
2.0
29.6
29.6
22.1
29.9
29.9
8.8
30.0
30.0
8.0
14.8
14.8
12.3
224.7 194.5 91.2

Mean
PbP.q

222.6
153.0
578.9
76.0
634.9
715.1
284.8
370.1
484.5

plan length
noM
allD


307.0 340.8
163.5 171.0
578.9 675.9
76.0
61.0
634.9 650.6
715.1 731.9
284.8 284.8
370.1 374.5
498.8 535.4

# solved problems
PbP.q noM allD
30
30
0
30
26
16
26
9
3
30
30
25
5
5
2
30
30
23
30
30
9
30
30
8
15
15
13
226
205
99

Table 12: Time/quality score, average CPU time/plan length number solved problems speed quality versions PbP, PbP-noM (abbreviated noM)
PbP-allD (abbreviated allD) IPC7 domains.

results Wilcoxon sign-rank test applied experiment confirm PbP.s
significantly faster every incorporated planner (z = 5.773, p < 0.001
9 ),
terms plan quality PbP.q performs significantly better (z = 3.920,
p < 0.001
9 ) except ParLPG. According Wilcoxon sign-rank test, statistical
difference quality performances PbP.q ParLPG. discrepancy
results analysis Figure 4 generated different ways
unsolved problems handled quality score function Wilcoxon sign-rank
test comparing plan quality performance: first considers problems attempted
compared planners (explicitly penalizing planner zero score unsolved
problem), second considers subset test problems solved
compared planners; PbP.q solves many problems ParLPG (230 179),
reflected relative curves Figure 4 plan quality.
observed domains Rovers, Satellite Gripper solutions PbP.q
computed ParLPG; domains Blocksworld Depots, PbP.q using ParLPG solves
5 3 problems, respectively; considered domains, ParLPG part
selected cluster running planners. better understand importance ParLPG PbP,
analyzed performance version PbP incorporate ParLPG.
674

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7 domains

Time score
240

PbP.s
FD
LAMA (1st sol.)
LPG-td (1st sol.)
Macro-FF
Marvin
Metric-FF
SGPlan5
YAHSP
ParLPG

200
160
120
80

IPC7 domains

Quality score
210

PbP.q
FD
LAMA (last sol.)
LPG-td (last sol.)
Macro-FF
Marvin
Metric-FF
SGPlan5
YAHSP
ParLPG

180
150
120
90
60

40

30

0

0
1

10

100

1000

1

10

100

1000

Figure 4: Time (left plot) quality (right plot) scores PbP.s/q relative computed configuration knowledge compared time quality scores
basic incorporated planners IPC7 domains, using increasing CPU-time
limit. FD abbreviates Fast Downward.

IPC7 domains, PbP.s/q incorporate ParLPG, problems solved
PbP.s/q decrease 10/12%, and, terms time score, PbP.s without ParLPG
performs worse ParLPG (156.1 vs. 176.5). However, terms quality score, PbP.q
without ParLPG performs still much better ParLPG (183.1 vs. 144.5). results
analysis show performance PbP terms speed drastically affected
ParLPG. hand, importance ParLPG PbP.q limited
parameter configuration ParLPG focused speed.
two main reasons explaining observation derived Experimental result 4.6.1
globally best performance PbP.s/q basic incorporated planner
(even ParLPG) outperforms others every considered benchmark domain,
PbP effectively selects combines efficient planners domain
consideration (possibly using useful set macro-actions).
One may wonder picture different PbP.s/q compared basic
incorporated planners using (possibly empty) set macros. Figure 5 shows results
comparison, using CPU-time limit run ranging 1 1000 seconds.
sake readability, names 38 combinations basic incorporated planners
sets macros (learned Wizard Macro-FF) omitted. time/quality
scores compared system derived summing corresponding scores obtained compared system IPC7 domain. domain combination
planner P macro set empty, domain combination
restricted P .
results Figure 5 show that, terms CPU time, IPC7 domains
basic planner PbP that, using learned macro set, achieves overall performance
better similar performance PbP.s (except low CPU-time limits,
compared planners macros perform similarly). terms plan quality,
CPU-time limits lower 20 seconds, exist basic incorporated planners using
macros perform better PbP.q; high CPU-time limits, PbP.q performs much
better every compared planner macros. combinations basic incorporated
675

fiGerevini, Saetti, & Vallati

IPC7 domains

Time score
240

PbP.s
planner set macros

200

IPC7 domains

Quality score
240

PbP.q
planner set macros

200

160

160

120

120

80

80

40

40

0

0
1

10

100

1000

1

10

100

1000

Figure 5: Time (left plot) quality (right plot) scores PbP.s/q relative computed configuration knowledge compared time quality scores 38
combinations incorporated planners sets macros IPC7 domains.

planners sets macros low CPU-time limits perform better PbP.q
SGPlan5 using set learned macros, ParLPG using macro set bunching, YAHSP
using macro set clumping. low CPU-time limits, combinations planners
macros overall performance better PbP.q, essentially dominate
single domain: Barman SGPlan5, Blocksworld ParLPG YAHSP.
Since analysis Figure 4 considered test domains altogether, order verify
supposition given single domain PbP performs better worse
every basic incorporated planner, compared PbP.s/q best-performing basic
planner (according test problems relative IPC scores) considered
domain. planner, indicated BestP.s/q, single planner (without macros)
would use oracle specifying best basic incorporated planner
test problems specific domain. results experiment shown Table 13.
domains Gripper, Rovers, Satellite Spanner planner cluster PbP.s
BestP.s. considered domains, time score average
CPU time PbP.s much better BestP.s. terms problem coverage, three
domains PbP.s solves much higher number problems; domains
problem coverage BestP.s. results show that, order achieve
higher planning speed, using cluster planners useful set macro-actions selected
PbP.s much better using single planner without macros. Sections 4.6.2
4.7 study usefulness using properly selected cluster planners
non-empty set macros, respectively.
Experimental result 4.6.2 IPC7 domain basic planner
considered input portfolio PbP.s faster, achieves better time score, solves
problems PbP.s.
Concerning plan quality, BestP.q contributes great deal success PbP.q, since
domains except Barman Spanner included cluster selected PbP.q
(see Table 2). Barman, Gripper, Parking, Rovers, Satellite, Spanner, TPP,
cases BestP.q provides solution PbP.q.
676

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7
Domains

BestP.s

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP

SGPlan5
ParLPG
ParLPG
ParLPG

ParLPG
ParLPG
ParLPG
ParLPG


domains
IPC7
Domains

BestP.q

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP

SGPlan5
ParLPG
ParLPG
ParLPG

ParLPG
ParLPG
ParLPG
LAMA


domains

Max
score
30
30
30
30
30
30
30
30
30
270

Time score
PbP.s
BestP.s
30.0
12.0
30.0
17.3
23.6
18.3
30.0
30.0
6.8
3.0
27.0
27.0
30.0
30.0
30.0
30.0
24.4
11.2
232.8
178.8

Mean CPU time
PbP.s
BestP.s
2.0
72.9
9.9
95.3
109.5
229.7
18.2
18.2
364.1
460.9
25.1
25.1
28.3
28.3
16.9
16.9
121.2
531.4
39.9
79.3

# solved problems
PbP.s
BestP.s
30
30
30
30
26
21
30
30
8
7
27
27
30
30
30
30
25
14
236
219

Max
score
30
30
30
30
30
30
30
30
30
270

Quality score
PbP.q
BestP.q
30.0
29.8
29.9
29.9
24.5
10.4
29.0
29.9
4.8
6.8
30.0
30.0
29.6
29.8
30.0
30.0
14.6
14.7
222.4
210.8

Mean plan length
PbP.q
BestP.q
449.3
452.9
269.9
272.8
160.1
163.1
577.3
570.1
79.0
80.6
694.7
694.7
785.2
782.8
326.0
326.0
370.1
366.3
472.6
481.8

# solved problems
PbP.q
BestP.q
30
30
30
30
26
11
30
30
5
7
30
30
30
30
30
30
15
15
226
213

Table 13: Maximum score, time/quality score, average CPU time/plan length, number
problems solved PbP.s/q best planner (BestP.s/q) IPC7
domains.

Experimental result 4.6.3 IPC7 domains, terms plan quality, relative
performance PbP.q best-performing basic planner (BestP.q) oracle would
choose generally slightly favor PbP.q: Blocksworld Depots PbP.q performs
better, Parking BestP.q performs slightly better, rest IPC7 domains
perform similarly.
Concerning Parking, Table 13 shows that, used benchmark problems,
BestP.q-planner FF, correctly contained cluster selected PbP.q
domain (see Table 2). However, cluster includes additional planner (LAMA)
that, tested problems considered CPU-time limit, give useful
contribution PbP.q (no solution found LAMA), introducing noise
cluster selection. fact Parking useful set macros computed
PbP.q main reasons PbP.q performs slightly worse BestP.q-planners
considered test problems domain Parking.
Wilcoxon sign-rank test applied experiment confirms that, overall, PbP.s
significantly faster BestP.s-planner domain (z = 3.134, p 0.001);
terms plan quality, test results indicate performances PbP.q
677

fiGerevini, Saetti, & Vallati

BestP.q-planner significantly different (z = 1.157, p = 0.247); words,
test cannot derive one system performs statistically better other.
Finally, compared PbP.s/q best-performing combination P +
basic planner P non-empty set macros learned P IPC7 domain,
except Spanner macro computed. experiment, best macro set
P domain chosen considering performance P + training
problems D. Overall, terms speed score problem coverage, PbP.s performs
similarly P + five domains, performs much better three domains;
terms quality score, PbP.q performs similarly four domains much better
four domains. One reasons P + perform worse PbP.s/q
domains macros harmful, PbP.s/q correctly decides use them.
discussed context experiment presented Section 4.7,
analyze usefulness macros accuracy selection PbP.s/q.
4.6.2 PbP Best-Performing Portfolio Configuration
order test accuracy planner cluster selection PbP.s/q,
compared PbP computed configuration knowledge best-performing cluster
planners (with useful macros) considered test domain. (The worst-performing
cluster solves problem.) Table 14 shows results experiment considering two
best-performing clusters three planners: considered IPC7 domain,
BestC.s planner cluster highest time score among obtained
PbP.s using default PCPV; similarly, BestC.q planner cluster highest
quality score. Therefore data time/quality score columns BestC.s/q
maximum values time/quality score sums planner clusters set test
problems IPC7 domain.
every domain except Depots, time score PbP.s one
best cluster much greater zero (and thus much better score
worst cluster). terms average CPU time problem coverage performance
PbP.s best cluster almost always same. domain Depots PbP.s
BestC.s perform slightly differently; case, planners relative macros
cluster PbP.s different BestC.s. particular, Macro-FF selected
different set macros, makes PbP.s slightly slower.
Concerning PbP.q, overall, terms plan quality high performance gap
respect best cluster, although PbP.q performs worse domain TPP.
domain, training problems used PbP.q informative enough. observation
supported fact best cluster computed using training problems, instead
test problems, different one derived test problems.
hand, observed that, size training problems similar size test
problems, configured portfolios PbP.q BestC.q same.
Wilcoxon sign-rank test confirms that, overall, performance PbP.s/q
best cluster statistically significantly different (z = 0.422, p = 0.673, speed
analysis; z = 2.432, p = 0.015, quality analysis). Moreover, observed
PbP.s/q without configuration (PbP-nok.s/q) performs generally much worse
678

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7
Domains

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains
IPC7
Domains

BestC.s
SGPlan5 (B)
ParLPG (B)
Macro-FF (M1)
ParLPG ()
Macro-FF (M2)
ParLPG ()
ParLPG ()
ParLPG ()
Macro-FF (M1)

BestC.q

Barman
SGPlan5 (Cl)
Blocksworld
ParLPG ()
Depots
MFF(M1),MFF(M2)
Gripper
ParLPG ()
Parking
(0)
Rovers
ParLPG ()
Satellite
ParLPG ()
Spanner
LPG ()
TPP
Macro-FF (M1)
domains

-

Max
score
30
30
30
30
30
30
30
30
30
270

Time score
PbP.s BestC.s
30.0
30.0
30.0
30.0
21.2
24.5
30.0
30.0
8.0
8.0
27.0
27.0
30.0
30.0
30.0
30.0
25.0
25.0
231.2
234.5

Mean CPU time
PbP.s
BestC.s
2.0
2.0
9.9
9.9
165.9
82.5
18.2
18.2
364.1
364.1
25.1
25.1
28.3
28.3
16.9
16.9
121.2
121.2
47.4
36.7

# solved probs
PbP.s BestC.s
30
30
30
30
26
28
30
30
8
8
27
27
30
30
30
30
25
25
236
238

Max
score
30
30
30
30
30
30
30
30
30
270

Quality score
PbP.q BestC.q
29.9
30.0
29.9
29.9
23.9
26.7
29.0
29.9
4.8
6.8
30.0
30.0
29.5
29.8
30.0
30.0
14.8
24.4
221.8
237.5

Mean plan length
PbP.q
BestC.q
449.3
448.3
269.9
272.8
160.1
165.1
577.3
570.1
79.0
80.6
694.7
694.7
785.2
782.8
326.0
326.0
370.1
379.5
461.2
487.6

# solved probs
PbP.q BestC.q
30
30
30
30
26
28
30
30
5
7
30
30
30
30
30
30
15
25
226
240

Table 14: Maximum score, time/quality score, average CPU time/plan length, number
problems solved PbP.s/q best cluster (BestC.s/q) IPC7
domains. MFF abbreviates Macro-FF. order planners listed
cluster Depots corresponds order run.

best cluster speed quality. Overall, experimental results derive
following observation.
Experimental result 4.6.4 IPC7 benchmarks, terms time score, average
CPU time problem coverage, PbP.s performs well or, Depots, similarly
BestC.s. terms quality score, average plan length problem coverage, PbP.q performs well similarly BestC.q, except TPP, plan quality score
problem coverage PbP.q worse.
Table 14 shows often oracle would use single planner either quickly
solve IPC7 problems compute high-quality plans them. Hence, one may argue
using clusters formed one planner (possibly set useful macros)
useful. rationale best clusters Table 14 formed single planner
often incorporated planner (even using macros) requires almost CPU
time solve IPC7 test problem (except domain Depots); thus remaining time
usually enough improve coverage quality (first) computed plan
running one planner. purpose computing high-quality plans,
use set test problems smaller IPC7 problems, picture different.
679

fiGerevini, Saetti, & Vallati

Table 15 compares performance PbP best performing cluster planners
sets randomly generated medium-size problems IPC7 domains (i.e.,
size ranging largest training problems smallest testing problems).
table, BestC.s/q indicates clusters oracle would use solve sets
medium-size problems.
Experimental result 4.6.5 test problems IPC7 domains sizes ranging
training problem sizes IPC7 test problem sizes, IPC7
domains best planner clusters deriving high quality plans formed
one planner.
general, cluster planners containing certain planner performs worse
planner alone planning problems domain planner
portfolio configured efficiently solved planner alone, thus running
planners cluster waste CPU time. cluster formed one
planner performs better single portfolio planner considered domain
planner dominating others terms either problem coverage CPU
time, problem coverage plan quality.
Interestingly, observed sometimes cluster selected PbP.q best
cluster intermediate-size test problems formed planner solves
problems, produces low-quality plans, planners produce higher-quality
plans, solve problems. case Barman TPP. domains,
although quality plans SGPlan5 low, SGPlan5 cluster
useful contributes greatly improve problem coverage cluster.
Finally, results Table 15 indicate sometimes effectiveness
configured portfolio greatly affected difference size/hardness
training problems size/hardness test problems. particular, performance
gap PbP.q best cluster considered randomly generated intermediatesize problems domain TPP lower PbP.q best cluster IPC7
test problems TPP. indicates that, terms plan quality, effectiveness
planner portfolio configuration PbP.q computed using relatively small training problems
gradually decrease size/hardness test problems increased.
4.7 Macro Usefulness Selection Accuracy
section concerns experimental goal G6: analyze effectiveness using set
macros selected PbP planner, accuracy PbP selecting
useful set macros among computed Wizard Macro-FF planner
configured portfolio. shown Wizard Macro-FF often generate
useful sets macros speed planners (Botea et al., 2007b; Newton et al., 2007),
known guarantee using macros always leads improving
speed planner, bad set macros could even make planner slower. Moreover,
usually degree usefulness set macros depends specific planner uses
them.
Concerning macros PbP.s, IPC7 domain least one non-empty set
computed macros planner selected cluster (see Table 2), compared
680

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7 domains

BestC.s

(medium probs)

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains
IPC7 domains

(B)
ParLPG (B)
MFF (M1), ParLPG (0)
ParLPG ()
MFF (M2)
ParLPG ()
ParLPG ()
ParLPG ()
Macro-FF (M1)

BestC.q

(medium probs)

Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains

(Cl), (), ()
P (), MFF (M1), LPG (B)
MFF (M1), P (), LPG ()
ParLPG ()
(), LAMA ()
ParLPG ()
ParLPG (), Marvin ()
LPG ()
MFF (M1), L (), (CH)


Time score
PbP.s BestC.s
30.0
30.0
30.0
30.0
28.9
29.7
30.0
30.0
22.0
22.0
30.0
30.0
30.0
30.0
30.0
30.0
30.0
30.0
260.9
261.7

Mean CPU time
PbP.s
BestC.s
1.5
1.5
7.3
7.3
57.4
52.5
13.2
13.2
308.7
308.7
17.6
17.6
14.3
14.3
13.6
13.6
93.6
93.6
50.9
50.4

# solved probs
PbP.s BestC.s
30
30
30
30
30
30
30
30
22
22
30
30
30
30
30
30
30
30
262
262

Quality score
PbP.q BestC.q
29.7
29.8
29.5
29.6
26.4
28.5
30.0
30.0
20.0
20.0
30.0
30.0
30.0
30.0
30.0
30.0
24.9
29.3
221.8
237.5

Mean plan length
PbP.q
BestC.q
327.2
327.1
174.7
173.2
143.1
145.4
472.3
472.3
63.1
63.1
694.7
694.7
524.6
524.6
257.2
257.2
219.4
220.3
462.6
463.2

# solved probs
PbP.q BestC.q
30
30
30
30
28
30
30
30
20
20
30
30
30
30
30
30
25
30
226
240

Table 15: Time/quality score, average CPU time/plan length, number problems
solved PbP.s/q best cluster (BestC.s/q) sets medium-size
problems IPC7 domains. S, M, MFF, P, L abbreviate SGPlan5, Marvin,
Macro-FF, ParLPG, LAMA, respectively. order planners listed
clusters corresponds order run.

number solved problems, number visited search nodes, average CPU time time
score using: (a) macros, (b) set macros identified PbP.s useful planner,
(c) set macros among computed planner terms time score
makes perform best test problems. results experiment,
given Table 16, following general observation derived.
Experimental result 4.7.1 IPC7 domains, often candidate set
macros planner (computed Wizard Macro-FF) greatly increases speed
performance configured portfolio, PbP.s correctly selects it.
Table 16 indicates that, considered domains, performance
selected planners obtained using sets macros identified useful PbP.s
usually performance achieve using best sets macros.
gives strong positive evidence effectiveness PbP.ss approach selecting
useful set macros planner configured portfolio. particular, best
set macros set macros selected PbP.s (see Table 2).
exception sets macros identified PbP.s different best set
681

fiGerevini, Saetti, & Vallati

Domain &
Planner
Barman
SGPlan5
Blocksworld
ParLPG
Depots
Macro-FF
Parking
Macro-FF
TPP
Macro-FF

#S

macros
#N


TS

#S

PbP.s macros
#N

TS

#S

best macros
#N

TS

30



72.9

12.0

30



1.8

30.0

30



1.8

30.0

30

3361

95.3

17.3

30

218.0

9.9

30.0

30

218.0

9.9

30.0

0

242678



0.0

26

33654

203.3

22.2

28

21231

105.1

26.2

2

1739

406.9

0.6

8

880.9

92.3

8.0

8

880.9

92.3

8.0

0

71594

600.0

0.0

25

2990

121.2

25.0

25

2990

121.2

25.0

Table 16: Number solved problems (#S), number visited search nodes (#N), average
CPU time (T) time score (TS) planners forming cluster selected
PbP.s using macro, set macros selected PbP.s, best performing set computed macros. domains considered IPC7 domains
least one non-empty set computed macros. indicate
number nodes visited SGPlan5 could measured.

case Macro-FF domain Depots. However, shown Table 2, Depots PbP.s
selects cluster contains Macro-FF macro set M2 ParLPG, obtaining
overall performance experimentally observed similar performance
Macro-FF best set macros, M1. worth noting candidate sets
macros computed ParLPG Depots harmful (i.e., make speed performance
much worse) PbP.s correctly detects this, choosing run ParLPG zero macros
(denoted ParLPG (0) Table 2).
study computing using macros usually pursued main goal
speeding planning, possibly making quality computed plan lower
macros used. Interestingly, context PbP.q, several cases macros useful
improving plan quality. Specifically, nine fifteen IPC6-7 domains,
configuration phase PbP.q selects clusters planners least one planner using
non-empty set macros (see Table 2). experimentally observed, training
problems test problems, two reasons macros useful PbP.q:
domains individual planners using macros leads better
quality plans. case, e.g., domains Barman Blocksworld using planners SGPlan5 LPG (first solution), respectively. behavior observed
Botea et al. (2005), Coles Smith (2007), Newton et al. (2007).
selected cluster includes planner configured use set macros, usually
planner quickly computes solution. somewhat helpful
test problems another planner cluster solve better solutions,
enough CPU time, quick termination planner macros
leaves CPU time run cluster planner(s). CPU time,
important especially incremental planner(s) included selected
682

fiPlanning Automatic Portfolio Configuration: PbP Approach

cluster, LAMA ParLPG. many problem instances domains Depots,
Satellite TPP observed behavior.
Experimental result 4.7.2 IPC7 domains, use macros selected
PbP.q lead better quality solutions.
general, use macros make plan search effective because, e.g.,
planning multiple actions one search step size possible plateaus
depth local minima reduced. hand, large number macros
added domain, size search space drastically increase, making
problem harder solve. rest section, analyze kind number
macros selected used PbP. consider macro operators, i.e., parameterized
macros defined sequences (primitive) domain operators, macro actions, i.e., macros
derived instantiating parameters macro operators.
Table 17 describes macro operators sets selected PbP.s planner
configured portfolio (see Table 2) terms of: number aggregated operators,
number involved parameters, average numbers macro-actions primitive actions
augmented domain, average plan lengths obtained considered planners without
using macros, using counting planned macro actions single action.
data Table 17, derive interesting observations macros
used PbP considered domains. First, macro operators used PbP
planner three, often aggregate primitive operators. Secondly,
planners handle macros simply adding instantiated macro operators
domain definition (SGPlan5 ParLPG), average number macro actions
augmented domains much lower comparable number primitive domain
actions, even domain Barman SGPlan5 uses large macro operators involving
seven primitive operators six parameters. Hence, planners domains,
macro actions drastically increase search space. picture quite different
Macro-FF, macro operators selected PbP.s domains Depots, Parking
TPP, instantiated, generate number macro actions average one
orders magnitude greater number primitive domain actions. reason
Macro-FF successfully use macro operators even number domain macro actions
huge planner instantiates macro operators filters macro actions search
time, according relaxed-plan heuristic applied current search state, rather
simply adding macro actions original domain planning.
fact experiment PbP never generates configured portfolios large
sets macro actions added domain description seems indicate that, number
macro actions high w.r.t. number primitive actions, macro exploitation
method usually makes performance planner using much worse. observation confirmed additional experiment added PDDL description
macro operators learned Macro-FF domain Depots original description
Depots, run Macro-FF using resulting augmented domain. shown Table 17,
Depots number learned macro actions one order magnitude greater
number primitive actions. experimentally observed augmented
domain Macro-FF (without method using macros) solves Depots problem.
683

fiGerevini, Saetti, & Vallati

Domain &
Planner
Barman
SGPlan5+B
Blocksworld
ParLPG+B
Depots
Macro-FF+M2
Parking
Macro-FF+M2
TPP
Macro-FF+M1

#operators
every m.
7,4

#parameters
every m.
6,4

2,3,2

2,2,2

2,2

5,6

5,2

8,5

6

9

#grounded
macros
1645
(397)
17757
(5812)
224053
(114600)
billions
(billions)
billions
(billions)

#actions
15610
(3767)
11983
(5270)
16005
(8269)
243223
(151979)
133145
(78545)

Plan length
without m.
452
(57)
415
(107)

143
(23)


Plan length
m.
374
(45)
153
(42)
119
(26)
64
(11)
238
(51)

Table 17: Number (primitive) operators forming selected macro operators,
number parameters macro operator, average number instantiated
macro actions, average number domain (primitive) actions, average plan length
without using macros, average plan length using macros counting
planned macro action single action. number 2nd 3rd columns
refers different macro operator. Numbers brackets standard deviations. domains considered IPC7 domains least one non-empty
set learned macros selected PbP.s. B abbreviates Bunching macro
set learned Wizard; M1M2 two five sets macros generated
Macro-FF. indicate solution found within given
CPU-time limit.

Moreover, results average plan length Table 17, show plans
macro actions much shorter computed original domain, count
macro single action. Given planning application current
search state macro (or possibly combination macros Macro-FF) generates single
successor state, considered planners domains, average distance
initial search state goal state much shorter search space includes
macros, hence searching solution plan space much faster.
conclude, note usefulness macros depend factors different
considered analysis, as, e.g., ratio number useful instantiations macro operator (providing shortcuts towards goal state)
number instantiations guides search towards wrong direction (Botea, Muller,
& Schaeffer, 2007a). factors might affect usefulness macro-operators
planning conjectured work McCluskey Porteous (1997).
4.8 Planner Cluster Scheduling
section concerns experimental goal G7: experimentally analyze possible alternative strategies scheduling execution planners portfolio configuration PbP planning time. first experiment, investigate use
PbP four sequential round-robin strategies predefined configured planning
time slots. second experiment, study importance choosing specific PCPV
684

fiPlanning Automatic Portfolio Configuration: PbP Approach

defining planning time slots (as described Section 3.1) particular PbPs
default PCPV.
Let input CPU-time limit, k maximum number planners cluster,
n number single planners, combined set macros, portfolio (in
experiment, = 900 seconds, k = 3, 9 n 38 depending number
computed macro sets). experimentally compare performance PbP using
following strategies planner cluster execution portfolio configuration:11
S1. Sequential execution tuple k planners Tk seconds run

P
every planner; number candidate configured portfolios ki=1 i! ni .
next (S2) strategies, planner terminates end time
slot, remaining time slot used (uniformly) increase slots
subsequently running planners.
S2. every combination time slots t1...k ti {0, 90, 180, 270, 360, 450,
540, 630, 720, 810, 900}, {1 k} t1 + + tk = , sequential execution
tuple k planners ti seconds runP
i-th
planner sequence;
number candidate configured portfolios ki=1 ni O(ui1 ), u
number non-zero planning time slots lower 900 (in experiment u = 9).
R1. Round-robin execution set k planners planning time slots
derived default PCPV defined Section 3.1 (this isPPbPs default
scheduling

strategy); number candidate configured portfolios ki=1 ni .
R2. every PCPV p = hp1 , ..., p9 set P (defined below), round-robin execution
set k planners planning
time uslots derived p;
Pk
n
number candidate configured portfolios i=1 O(s ), number
increments considered pi (in experiment = 4).
Set P R2 formed 100,000 PCPVs obtained setting percentage
PCPV value ranging li ui , with: l1 , ..., l9 equal 10, 15, 20, 25, 30, 35,
40, 45, 50; u1 , ..., u9 equal 70, 75, 80, 85, 90, 95, 98, 99, 100; increment step pi
equal ui 4li . instance, = 1, increment step p1 7010
= 15.
4
Consequently, values used first percentage p1 considered PCPVs 10,
25, 40, 55, 70.
Concerning execution order planners cluster, considered sequence
strategies S1 S2, order defined planner order sequence (two
sequences formed planners considered different clusters planners
differently ordered use different time slots); cluster planners strategies
R1 R2, execution order determined according increasing planning time slots
associated planners cluster (this default execution order strategy).
configuration phase PbP using four scheduling strategies generates four
alternative clusters planners, relative planning time slots, which, planning time,
run corresponding scheduling strategies used configuration
time. noted portfolio configuration using strategies S2 R2
11. planners candidate cluster executed simulation, described Section 3.2.

685

fiGerevini, Saetti, & Vallati

computationally much heavier configuration using S1 R1, respectively, since
many candidate configured portfolios considered. hand, since PbP
S2 R2 examines larger portfolio configuration spaces, principle, could obtain
accurate configured portfolios.
Tables 18 19 compare performance PbP configured using S1-S2 R1-R2
solving IPC7 domains problems. observed that, terms speed,
IPC7 benchmark domains except Depots, considered scheduling strategies
affect selection best cluster, since PbP.s always selects cluster formed
single planner (possibly using macros). Depots, shown Tables 18 19, PbP.s
round-robin scheduling strategies solves problems faster
sequential scheduling strategies.
Concerning plan quality, best cluster selected PbP.q contains one
planner every IPC7 domain. Overall, following observation derived:
Experimental result 4.8.1 IPC7 benchmark domains problems, PbP.q
R1-R2 solves problems PbP.q S1-S2 and, terms plan quality, overall
performs similarly PbP.q S1-S2.
think explanation PbP.q R1-R2 performs better terms number solved problems using round-robin strategy makes PbP.q robust
using sequential strategy respect possible incorrect ordering planner runs
inadequate values planning time slots decided configuration time.
training problems difficult used testing time (usually easier),
inaccurate estimation effectiveness learned configuration knowledge
arise. estimation time slot values incorrect planner execution
order damage severely sequential execution planners selected
cluster, since planners run once, using estimated time slot,
round-robin execution iteratively run (multiple) time
slots, total CPU-time limit reached planners terminate.
terms plan quality evaluated IPC quality scores, PbP.q R1-R2
tends perform better PbP.q S1-S2. main reason PbP.q R1R2 solves problems PbP.q S1-S2, quality score unsolved
problem zero. consider average plan quality (last four columns Tables 18
19), observe mixed results: two domains PbP.q R1-R2 performs best,
two worse, ones same. discrepancy evaluation results
using quality scores average plan qualities apparent, since quality score
average quality evaluations different assumptions way consider
unsolved problems. average plan quality, subset test problems solved
PbP using compared strategies considered; quality score, test
problems considered.
Seipp et al. (2012) show sequential portfolio 21 domain-independent statebased forward planners solve problems planning time slots uniform,
rather configured set training problems, because, considered planners
test problems, planner either quickly solves problem solve all.
context, observed sequentially run n planners PbP.q (i.e.,
38 combinations 9 basic planners with/without computed sets macros)
686

fiPlanning Automatic Portfolio Configuration: PbP Approach

IPC7
Domains
Depots

S1
20.8

Time Score PbP.s
S2
R1
R2
17.8
22.2
21.0

Problems Solved PbP.s
S1
S2
R1
R2
26
20
27
26

IPC7
Domains
Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains

Quality Score PbP.q
S1
S2
R1
R2
30.0
30.0
30.0
30.0
16.7
16.7
30.0
30.0
6.1
6.1
24.4
25.2
29.9
29.9
28.9
28.9
3.7
4.6
4.3
4.3
29.0
29.0
25.2
25.2
29.8
21.0
29.5
29.7
30.0
30.0
30.0
30.0
13.7
13.7
14.7
12.8
188.9 181.0 217.0 216.1

Problems Solved PbP.q
S1
S2
R1
R2
30
30
30
30
21
21
30
30
8
8
25
27
30
30
30
30
4
5
5
5
29
29
30
30
30
21
30
30
30
30
30
30
14
14
15
13
196
188
225
225

Table 18: Time/quality score number solved problems PbP.s/q using scheduling
strategies S1-S2 R1-R2 IPC7 benchmark domains problems.

using uniform time slots, 137 test problems solved (against 225 solved
PbP); n-planners uniform strategy performs well PbP.q CPU-time
limit increased several times (keeping 900 seconds PbP.q). Differently
observed work Seipp et al. (2012), experimental evaluation includes many
problems n planners PbP.q solve using considerable CPU time (e.g., number
problems solved planner incorporated PbP, even using macros,
within 10 seconds 80). Probably reason different behavior test
problems IPC7 learning track average difficult problems
IPC7 deterministic track, test problems used work Seipp et al.
(2012).
hand, PbP sequentially runs 3 planners, strategies S1S2, instead 38 possible combinations incorporated planners
learned macros, obtain behavior similar observed Seipp et al. (2012).
particular, results Tables 18 19 show terms number solved problems
speed, configuring planning time slots sequential scheduling cases
even degrade performance PbP w.r.t. using uniform distribution CPU time
(see results Tables 18 19 PbP.s using S1 S2 Depots PbP.q using
S1 S2 Satellite). However, context uniform distribution CPU time
planners cluster selected PbP best one, since experimentally
observed PbP S2 clearly outperforms PbP S1 configuration done
using test problems rather training problems. believe main reason
behavior experiment training problems much smaller
easier test problems, several cases makes PbP S2 (configured
training problems) underestimate CPU times required solve test problems.
687

fiGerevini, Saetti, & Vallati

IPC7
Domains
Depots

Average CPU Time PbP.s
S1
S2
R1
R2
256.2 360.8 185.2
185.0

Std. Dev. CPU Time PbP.s
S1
S2
R1
R2
122.3
250.4
206.1
78.2

IPC7
Domains
Barman
Blocksworld
Depots
Gripper
Parking
Rovers
Satellite
Spanner
TPP
domains

Average Plan Quality
S1
S2
R1
449.3 449.3 449.3
310.3 310.3 236.7
220.0 220.0 154.3
570.1 570.1 588.7
84.0
83.3
82.0
583.9 583.9 703.4
747.8 747.8 751.6
326.0 326.0 326.0
364.0 364.0 362.6
466.8 466.8 477.8

Std. Dev. plan
S1
S2
55.3
55.3
89.1
89.1
118.2
118.2
45.2
45.2
11.8
27.4
158.2
158.2
161.3
128.5
52.1
52.1
101.4
101.4
217.9
188.9

PbP.q
R2
449.3
236.7
159.5
588.7
82.0
703.4
751.6
326.0
362.6
477.6

quality PbP.q
R1
R2
55.3
55.3
68.6
68.6
32.5
32.8
38.0
38.0
24.8
24.8
194.9
194.9
183.8
183.8
52.1
52.1
99.1
99.1
238.4
238.8

Table 19: Average standard deviation CPU time/plan quality PbP.s/q using
scheduling strategies S1-S2 R1-R2 IPC7 benchmark domains
problems.

Contrary PbP S1-S2, PbP R1-R2 performs similarly according three
evaluation criteria (solved problems, speed plan quality). result indicates
configuring planning time slots considering many alternative PCPVs lead
high improvements respect using default predefined planning time slots,
PbP configuring values planning time slots less crucial using
round-robin strategy using sequential strategy, PbP R1-R2
less sensitive different size problems used configuration testing.
Experimental result 4.8.2 IPC7 benchmark domains problems, PbP.s/q
R1-R2 less sensitive definition planning time slots PbP.s/q
S1-S2.
rest section, study problem configuring PCPV used define
planning time slots round-robin planner scheduling PbP. particular,
address following questions focusing IPC7 benchmarks: important setting
PCPV particular value given domain? oracle specifying best
PCPV test problems specific domain, good would default PCPV
respect it?
data used analysis obtained follows. PCPV p set P
defined well scheduling strategy R2 previous experiment, PbP.s/q
run using cluster selected simulating round-robin scheduling planning
time slots derived p described Section 3.1. Thereby PbP.s/q configured
100,000 times different predefined PCPVs and, consequently, different predefined
planning time slots. resulting configured portfolios run (by simulation)
test problems learning track IPC7.
688

fiPlanning Automatic Portfolio Configuration: PbP Approach

Time score

Quality score

30

30

25

25

20

20

15

15

10

10

5

5

0

0
Barman

BW

Depots Grip. Parking Rovers

Sat. Spanner TPP

Barman

BW

Depots Grip. Parking Rovers

Sat. Spanner TPP

Figure 6: Distribution time (left plot) quality (right plot) scores PbP.s/q using
100,000 PCPVs IPC7 problems. BW, Grip. Sat. abbreviate
Blocksworld, Gripper Satellite, respectively.

Figure 6 analyzes time quality scores configured portfolios box
whisker plots. plot, bottom whisker worst score; bottom
box lower quartile score; band box median score; top
box upper quartile score; top whisker best score; finally, cross
score PbP.s/q domain using default predefined PCPV. following,
PCPV corresponding configured portfolio obtaining best time quality score
domain called best-performing PCPV domain. Since best performing
PCPV derived observed performance test problems, considered
best PCPV P oracle would give us. experimental data used
Figure 6, derive following observation.
Experimental result 4.8.3 Different IPC7 domains different best-performing PCPVs
PbP.
IPC7 domain length whisker Figure 6 zero, cluster
selected PbP.s/q PCPV formed single planner, hence
cases definition PCPV used derive planning time slots affect
performance PbP (all available CPU time assigned single selected planner).
plot speed happens domains except Depots, plot
plan quality, happens domain Spanner. domain Barman, clusters selected
PbP.q using configured PCPVs include SGPlan5 learned set macros,
planner cluster finding solutions test problems domain.
domains PbP.s/q always select singleton planner
cluster PCPVs considered, specific used PCPV high impact
PbPs performance, shown especially domains Depots, Gripper Satellite
quality-score plot Figure 6. Interestingly, observe default predefined
PCPV used PbP.s/q generally good choice, since often crosses plots
appear (or near to) top position corresponding whiskers.
689

fiGerevini, Saetti, & Vallati

Experimental result 4.8.4 every IPC7 domain, cluster selected PbP.s/q using
default PCPV h25, 50, 75, 80, 85, 90, 95, 97, 99i performs similarly PbP.s/q using
best-performing PCPV, except PbP.q domains Parking TPP.
Parking, best performance obtained running planners LAMA
PCPV equal h10, 15, 60, 65, 70, 75, 80, 95.5, 96.5i; TPP, obtained running planners LAMA, Macro-FF SGPlan5 PCPV equal h10, 15, 20, 25, 30, 35, 40, 45, 50i.
two domains, PbP.q default PCPV perform well
best-performing PCPV (but still better median-performing PCPV). main
reason domains IPC7 test problems much larger (and harder)
used training, which, observed Section 4.6, affect accuracy
portfolio configuration test problems terms selected planner cluster
configured PCPVs.
Overall, results experiment configured default PCPVs PbP
indicate that, round-robin planner scheduling used, tuning PCPV (and consequently planning time slots) specific IPC7 domain greatly improve
performance resulting configured portfolio, since often default PCPV performs well best PCPV specified oracle. Consequently, given without
PCPV tuning portfolio configuration much simpler faster, PbP uses default
version.

5. Conclusions
existing automated-planning technology offers large, growing set powerful techniques efficient domain-independent planners, none outperforms
others every planning domain. practical perspective, useful consider
portfolio-based approach planning involves several techniques planners.
paper, proposed approach automatically configuring portfolio planners learned macros given domain, implemented portfolio-based
planner PbP. computed configuration knowledge consists promising combination
basic planners portfolio, one (possibly empty) set useful macros,
scheduling information specializing execution planning time.
configured portfolio obtained automated statistical analysis performance set candidate clusters planners relative candidate sets macros, using
collection training problems given domain. planner cluster performance
computed simulating cluster execution using performance data runs
individual basic planners (and relative sets macros) portfolio.
proposed approach portfolio planner configuration evaluated
large experimental analysis, focusing IPC6-7 domains, aim demonstrating high efficiency, understanding effectiveness automatic configuration,
investigating importance main design choices. Several results derived
various experiments analysis. important experimental results
indicate that:
configured planner portfolios generated PbP.s/q perform well compared
state-of-the-art planning systems using learning techniques, much better
690

fiPlanning Automatic Portfolio Configuration: PbP Approach








PbP-nok, i.e., unconfigured planner portfolio PbP (which competitive
LAMA, state-of-the-art domain independent planner);
PbP.s/q performs much better existing domain-independent portfoliobased planners, often better domain-optimized planner portfolio approaches;
computed configuration knowledge useful selection planner
cluster forming configured portfolio generally accurate given planning
domain;
macros planning domain always helpful planner improving
planning speed plan quality, PbP.s/q generally selects helpful sets macros;
context proposed approach, round-robin scheduling strategy
planner cluster execution robust strategy respect execution order
cluster planners planning time slots; moreover, configuring planning
time slots crucial given good default technique deriving currently
implemented PbP.s/q.

Besides evaluating approach PbP configuring planner portfolio macros,
experimental analysis corroborates validates results, observations empirical
studies previous work researchers planning. include usefulness
harmfulness macros set prominent existing planners, importance diversity
planning techniques construction effective planner portfolio,
robustness round-robin scheduling execution times multi-planner system.
current version PbP uses portfolio formed specific set selected
techniques plan synthesis, computation macros planner-parameter tuning,
architecture PbP open sense additional alternative (current future)
techniques integrated. Moreover, although chosen Wilcoxon sign-rank
test comparing candidate planner clusters macro sets, demonstrating effectiveness, methods could considered.
limit current approach, affects systems relying knowledge
learned examples, training problem set representative
test problems (e.g., problems much smaller easier test problems),
computed portfolio configuration might accurate problems. Knowing
configuration time enough information characterizing test problems obviously
useful generating representative training problem sets. planning PbP,
experimentally observed that, minimum/maximum number objects involved
test problems known, randomly generated training problem sets object
bounds sufficiently representative effective configuration PbP.
think future work important study incorporate PbP
additional methods supporting problem-based configuration portfolio planner.
methods could refine current domain-based configuration problems
different size heuristically estimated hardness different, specialized configured
portfolios. Moreover, important extend PbP.q plan quality
measured terms plan action costs rather number plan actions.
directions research investigating use PbP.s/q optimal
planning metric-temporal domains (Fox & Long, 2003), extending portfolios
691

fiGerevini, Saetti, & Vallati

additional automatically extracted domain-specific knowledge, entanglements
(Vallati et al., 2013a). Finally, intend investigate idea making PbP fully domainindependent computing many portfolio configurations (planner clusters) different
known domains, using classifier match new domain promising
stored configuration terms expected performance new domain. similar idea
successfully developed SAT (e.g., Xu et al., 2008).

Acknowledgments
Many ideas, techniques, systems investigated paper use build important
previous work planning portfolio design, without research would
possible. thank authors work, particular authors
planning systems macro generators incorporated PbP. special thank Mark
Roberts Adele Howe clarifications configuration planner portfolio,
Beniamino Galvani help implementation part preliminary version
PbP.s, IPC7 organizers letting us use competition machine one
experiments conducted competition. would thank
organizers IPC6 IPC7 developed made available large collection
useful benchmark domains, problems software tools used analysis.
Finally, thank anonymous Reviewers Associate Editor helpful
detailed comments.

References
Arfaee, S., J., Zilles, S., & Holte, R., C. (2010). Bootstrap learning heuristic functions.
Proceedings Third Annual Symposium Combinatorial Search (SOCS-10),
pp. 5260. AAAI Press.
Backstrom, C., & Nebel, B. (1995). Complexity results SAS+ planning. Computational
Intelligence, 11 (4), 134.
Botea, A., Enzenberger, M., Muller, M., & Schaeffer, J. (2005). Macro-FF: Improving AI
planning automatically learned macro-operators. Journal Artificial Intelligence Research, 24, 581621.
Botea, A., Muller, M., & Schaeffer, J. (2007a). Fast planning iterative macros.
Proceedings Twentieth International Joint Conference Artificial Intelligence
IJCAI-07, pp. 18281833. AAAI Press.
Botea, A., Muller, M., & Schaeffer, J. (2007b). Learning partial-order macros solutions.
Proceedings Fifteenth International Conference Automated Planning
Scheduling (ICAPS-05), pp. 231240. AAAI Press.
Brendel, M., & Schoenauer, M. (2011). Instance-based parameter tuning evolutionary AI planning. Proceedings Thirteenth Annual Genetic Evolutionary
Computation Conference (GECCO-11), pp. 259260. ACM.
Cenamor, I., de la Rosa, T., & Fernandez, F. (2013). Learning predictive models configure planning portfolios. Proceedings ICAPS-13 Workshop Planning
Learning.
692

fiPlanning Automatic Portfolio Configuration: PbP Approach

Chen, Y., Hsu, C., & Wah, B. (2006). Temporal planning using subgoal partitioning
resolution SGPlan. Journal Artificial Intelligence Research, 26, 323369.
Chrpa, L., & Bartak, R. (2009). Reformulating planning problems eliminating unpromising actions. Proceedings Eighth Symposium Abstraction, Reformulation,
Approximation, (SARA-09), pp. 5057. AAAI press.
Chrpa, L., & McCluskey, T., L. (2012). exploiting structures classical planning problems: Generalizing entanglements. Proceedings Twentieth European Conference Artificial Intelligence (ECAI-12), pp. 240245. IOS Press.
Chrpa, L., McCluskey, T., & Osborne, H. (2012). Reformulating planning problems:
theoretical point view. Proceedings Twenty-Fifth International Florida
Artificial Intelligence Research Society Conference (FLAIRS-12), pp. 1419. AAAI
Press.
Coles, A., & Coles, A. (2011). LPRPG-P: Relaxed plan heuristics planning preferences. Proceedings Twenty-First International Conference Automated
Planning Scheduling (ICAPS-11), pp. 2633. AAAI Press.
Coles, A., Coles, A., Olaya, A., Celorrio, S., Lopez, C., Sanner, S., & Yoon, S. (2012).
survey seventh international planning competition. AI Magazine, 33 (1).
Coles, A., & Smith, K., A. (2007). Marvin: heuristic search planner online macroaction learning. Journal Artificial Intelligence Research, 28, 119156.
Cormen, T. H., Stein, C., Rivest, R. L., & Leiserson, C. E. (2001). Introduction Algorithms
(3rd edition). McGraw-Hill.
Fawcett, C., Helmert, M., Hoos, H., Karpas, E., Roger, G., & Seipp, J. (2011). FD-Autotune:
Domain-specific configuration using Fast Downward. Proceedings ICAPS-11
Workshop Planning Learning.
Fawcett, C., Vallati, M., Hutter, F., Hoffmann, J., Hoos, H., H., & Leyton-Brown, K. (2014).
Improved features runtime prediction domain-independent planners. Proceedings 24th International Conference Automated Planning Scheduling
(ICAPS), pp. 355359. AAAI Press.
Fern, A., Khardon, R., & Tadepalli, P. (2011). first learning track international
planning competition. Machine Learning, 84 (1), 81107.
Fox, M., & Long, D. (2003). PDDL2.1: extension PDDL expressing temporal
planning domains. Journal Artificial Intelligence Research, 20, 61124.
Gerevini, A., Haslum, P., Long, D., Saetti, A., & Dimopoulos, Y. (2009). Deterministic
planning fifth international planning competition: PDDL3 experimental
evaluation planners. Artificial Intelligence, 173 (5-6), 619668.
Gerevini, A., Saetti, A., & Serina, I. (2003). Planning stochastic local search
temporal action graphs. Journal Artificial Intelligence Research, 20, 239290.
Gerevini, A., Saetti, A., & Serina, I. (2006). approach temporal planning scheduling domains predictable exogenous events. Journal Artificial Intelligence
Research, 25, 187231.
693

fiGerevini, Saetti, & Vallati

Gerevini, A., Saetti, A., & Vallati, M. (2009). automatically configurable portfolio-based
planner macro-actions: PbP. Proceedings Nineteenth International
Conference Automated Planning & Scheduling (ICAPS-09), pp. 350353. AAAI
Press.
Gibbons, J., & Chakraborti, S. (2003). Nonparametric Statistical Inference, Fourth Edition:
Revised Expanded. Statistics: Series Textbooks Monographs. CRC Press.
Gomes, C., P., & Selman, B. (2001). Algorithm portfolios. Artificial Intelligence, 126 (1-2),
4362.
Helmert, M. (2006). Fast Downward planning system. Journal Artificial Intelligence
Research, 26, 191246.
Helmert, M., Roger, G., & Karpas, E. (2011). Fast Downward Stone Soup: baseline
building planner portfolios. Proceedings ICAPS-11 Workshop Planning
Learning.
Hoffmann, J. (2003). Metric-FF planning system: Translating ignoring delete lists
numeric state variables. Journal Artificial Intelligence Research, 20, 291341.
Hoffmann, J., & Nebel, B. (2001). planning system: Fast plan generation
heuristic search. Journal Artificial Intelligence Research, 14, 253302.
Howe, A., Dahlman, E., Hansen, C., vonMayrhauser, A., & Scheetz, M. (1999). Exploiting
competitive planner performance. Proceedings Fifth European Conference
Planning (ECP-99), pp. 6272. Springer.
Howey, R., Long, D., & Fox, M. (2004). VAL: Automatic plan validation, continuous effects
mixed initiative planning using PDDL. Proceedings Sixteenth IEEE
International Conference Tools Artificial Intelligence (ICTAI-04), pp. 294
301. IEEE.
Hutter, F., Hoos, H., H., & Stutzle, T. (2007). Automatic algorithm configuration based
local search. Proceedings Twenty-second National Conference Artificial
Intelligence (AAAI-07), pp. 11521157. AAAI Press.
Hutter, F., Hoos, H. H., Leyton-Brown, K., & Stutzle, T. (2009). ParamILS: automatic
algorithm configuration framework. Journal Artificial Intelligence Research, 36,
267306.
Jimenez, S., C., Coles, A., & Coles, A. (2011). Seventh International Planning Competition
IPC7 learning part. http://www.plg.inf.uc3m.es/ipc2011-learning.
Kautz, H., A., & Selman, B. (1999). Unifying SAT-based graph-based planning.
Proceedings Sixteenth International Joint Conferences Artificial Intelligence
(IJCAI-99), pp. 318325. AAAI Press.
Long, D., & Fox, M. (2003). third International Planning Competition: Results
analysis. Journal Artificial Intelligence Research, 20, 159.
Marquardt, D., W., & Snee, D. (1975). Ridge regression practice. American Statistician, 29(1), 320.
694

fiPlanning Automatic Portfolio Configuration: PbP Approach

Matos, P., Planes, J., Letombe, F., & Marques-Silva, J. (2008). MAX-SAT algorithm
portfolio. Proceedings Eighteenth European Conference Artificial Intelligence (ECAI-08), pp. 911912. IOS Press.
McCluskey, T., L., & Porteous, J., M. (1997). Engineering compiling planning domain
models promote validity efficiency. Artificial Intelligence, 95 (1), 165.
Newton, M., Levine, J., Fox, M., & Long, D. (2007). Learning macro-actions arbitrary
planners domains. Proceedings Seventeenth International Conference
Automated Planning & Scheduling (ICAPS-07), pp. 256263. AAAI Press.
Pulina, L., & Tacchella, A. (2007). multi-engine solver quantified boolean formulas.
Proceedings Thirteenth International Conference Principles Practice
Constraint Programming (CP-07), pp. 574589. Springer.
Rice, J. R. (1976). algorithm selection problem. Advances Computers, 15, 65118.
Richter, S., & Westphal, M. (2010). LAMA planner: Guiding cost-based anytime
planning landmarks. Journal Artificial Intelligence Research, 39, 127177.
Roberts, M., & Howe, A. (2006). Directing portfolio learning. Proceedings
AAAI 2006 Workshop Learning Search, pp. 129135.
Roberts, M., & Howe, A. (2007). Learned models performance many planners.
Proceedings ICAPS-07 Workshop AI Planning Learning.
Roberts, M., & Howe, A. (2009). Learning planner performance. Artificial Intelligence,
173 (5-6), 536561.
Roberts, M., & Howe, A. (2012). Personal communication. December 14.
Roberts, M., Howe, A., E., Wilson, B., & desJardins, M. (2008). makes planners
predictable?. Proceedings Eighteenth International Conference Automated
Planning Scheduling (ICAPS-08), pp. 288295. AAAI Press.
Seipp, J., Braun, M., Garimort, J., & Helmert, M. (2012). Learning portfolios automatically tuned planners. Proceedings Twenty-second International Conference
Automated Planning & Scheduling (ICAPS-12), pp. 368372. AAAI Press.
Shaffer, J., P. (1995). Multiple hypothesis testing. Annual Review Psych, 46, 561584.
Simon, H., & Kadane, J. (1975). Optimal problem-solving search: All-or-none solutions.
Artificial Intelligence, 6, 235247.
Vallati, M., Chrpa, L., & Kitchin, D. (2013a). automatic algorithm selection approach
planning. IEEE International Conference Tools Artificial Intelligence
(ICTAI), pp. 18. IEEE.
Vallati, M., Fawcett, C., Gerevini, A., Hoos, H., & Saetti, A. (2013b). Automatic generation efficient domain-optimized planners generic parametrized planners.
Proceedings 6th Annual Symposium Combinatorial Search (SOCS-13), pp.
184192. AAAI Press.
Vidal, V. (2004). lookahead strategy heuristic search planning. Proceedings
Fourteenth International Conference Automated Planning Scheduling (ICAPS04), pp. 150159. AAAI Press.
695

fiGerevini, Saetti, & Vallati

Wilcoxon, F., & Wilcox, R., A. (1964). Rapid Approximate Statistical Procedures.
American Cyanamid Co., Pearl River, N.Y.
Witten, I., H., & Frank, E. (2005). Data Mining: Practical machine learning tools
techniques. Morgan Kaufmann, San Francisco.
Xu, L., Hutter, F., Hoos, H., H., & Leyton-Brown, K. (2008). SATzilla: Portfolio-based
algorithm selection SAT. Journal Artificial Intelligence Research, 32, 565606.
Yoon, S., Fern, A., & Givan, R. (2008). Learning control knowledge forward search
planning. Journal Machine Learning Research, 9, 683718.

696


