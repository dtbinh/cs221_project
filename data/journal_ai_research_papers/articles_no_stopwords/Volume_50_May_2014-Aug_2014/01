journal artificial intelligence

submitted published

knowledge forgetting answer set programming
yisong wang

csc yswang gzu edu cn

department computer science
guizhou university guiyang china

yan zhang
yi zhou

yan scem uws edu au
yzhou scem uws edu au

artificial intelligence group
university western sydney australia

mingyi zhang

zhangmingyi gmail com

guizhou academy sciences guiyang china

abstract
ability discarding hiding irrelevant information recognized important
feature knowledge systems including answer set programming notion strong
equivalence answer set programming plays important role different gives
rise substitution principle amounts knowledge equivalence logic programs
uniformly propose semantic knowledge forgetting called ht flp forgetting
logic programs stable model flp stable model semantics respectively proposed
knowledge forgetting discards exactly knowledge logic program relevant forgotten variables thus preserves strong equivalence sense strongly equivalent logic
programs remain strongly equivalent forgetting variables
semantic forgetting expressible prove representation theorem stating
ht flp forgetting precisely characterized zhang zhous four forgetting postulates ht flp model semantics respectively reveal underlying connections
proposed forgetting forgetting propositional logic provide complexity
decision relation forgetting application proposed forgetting
considered conflict solving scenario

introduction
motivated lin reiters seminal work lin reiter notion forgetting propositional first order logics distilling knowledge base part relevant
subset alphabet attracted extensive interests kr community e g see lang
marquis zhou zhang recent years researchers developed forgetting
notions theories non classical logic systems perspectives forgetting description logics kontchakov wolter zakharyaschev wang wang topor
pan lutz wolter packer gibbins jennings forgetting logic programs
zhang foo eiter wang wong wang wang zhang forgetting modal logic zhang zhou su sattar lv zhang van ditmarsch herzig
lang marquis liu wen logical notion forgetting studied
different terms variable elimination lang liberatore marquis irrelevance independence irredundancy novelty separability bobrow subramanian greiner
c

ai access foundation rights reserved

fiwang z hang z hou z hang

pearl shown study modeling agents behaviors forgetting plays
important role conflict resolution zhang foo lang marquis
propositional logic forgetting atom p formula written forget p
formula p p p p formula obtained replacing occurrence atom p false true respectively forgetting set atoms
formula defined forget v p forget forget p v lin
easy see forgetting preserves logical equivalence logically equivalent formulas
theories remain logically equivalent forgetting atoms well known
mention atoms v
iff forget v
sense forgetting propositional logic called propositional forgetting knowledge
forgetting since forget v exactly contains logical content irrelevant v
logic programs stable model answer set semantics gelfond lifschitz issue logical equivalence rather complicated due different notions equivalence weak
equivalence strong equivalence two logic programs weakly equivalent
stable strongly equivalent
equivalent every logic program well known strong equivalence important concept answer set programming asp amounts knowledge
equivalence captures logical content logic program osorio zacarias osorio
cuevas delgrande schaub tompits woltran used simplifying
logic programs two strongly equivalent rules may interchangeable without affecting
original logic programs stable pearce tompits woltran ferraris lee lifschitz lin chen lin zhou strong equivalence characterized
logic ht viz two logic programs strongly equivalent
ht lifschitz pearce valverde instance rule following form p p ht tautology arbitrary
formula thus safely removed every logic programs without changing stable

besides stable model answer set semantics logic programs gelfond lifschitz
flp stable model semantics steadily gains importance faber pfeifer leone
truszczynski notion strong equivalence similarly generalized logic programs
flp stable semantics two theories strongly flp equivalent
flp stable every logic program shown
strong equivalence characterized terms flp viz two logic programs
strongly flp equivalent flp truszczynski
develop notion forgetting logic programs preserving strong equivalence
important propositional forgetting preserves equivalence propositional logic consider two agents need achieve agreement certain goal agents knowledge
base represented logic program suppose two consistent logic programs
combination inconsistent achieve consistent combination one may forget atoms
logic programs combination forgetting consistent
forgetting may effectively used solve conflict two agents knowledge
logic program consistent stable



fik nowledge f orgetting



nswer et p rogramming

bases zhang foo eiter wang lang marquis purpose simplicity hand agents may replace knowledge bases strongly equivalent
syntactically simpler ones
let us consider simple yale shooting scenario logic program consisting
following rules
shoot aux

aux shoot

aux shoot

aux used generate possible occurrences action shoot one interested
logic program represents knowledge auxiliary atom aux ignored
intuitively logic program consisting rule
shoot shoot
captures exactly knowledge irrelevant aux see
obtained ht forgetting aux cf example atom names cannot
obtained terms previous forgetting approaches logic programming cf example
turns preserving strong equivalence forgetting challenging
several attempts define notion forgetting logic programs none approaches
fully satisfactory zhang foo first defined syntax oriented weak strong forgetting
notions normal logic programs forgetting notions preserve neither weak equivalence
strong equivalence eiter wang proposed semantic forgetting consistent
disjunctive logic programs preserves equivalence strong equivalence specifically indicated importance preserving strong equivalence logic programming forgetting
raised issue future work wong proposed two forgetting operators disjunctive logic programs although two operators indeed preserve strong equivalence may lose
intuition weakening circumstances see section details recently proposed
forgetting logic programs may introduce extra knowledge cf see wang et al ex
thus knowledge forgetting
together preserving strong equivalence expressiveness another desired criterion
logic programming forgetting ideally would expect forgetting atoms
logic program still expressible logic program particularly necessary
view agents knowledge bases logic programs forgetting employed means conflict
solving among agents knowledge bases zhang foo previous logic programming forgetting approaches meet criterion see consider
forgetting arbitrary logic programs retaining expressibility challenging objective achieve
semantic forgetting notion
finally believe way weakening knowledge forgetting logic programs
obey common intuitions shared forgetting classical logics instance forgetting
something logic program lead weaker program certain sense
hand weakening associated relevant information forgotten
purpose zhang zhou proposed four forgetting postulates formalize
common intuitions showed forgetting propositional logic modal logic
precisely captured postulates surprisingly none previous forgetting notions logic
due one anonymous reviewers
rule strongly equivalent choice rule shoot normal rule



fiwang z hang z hou z hang

programs actually satisfies zhang zhous postulates sense previous forgetting notions
logic programs knowledge forgetting operators
summary consider following criteria knowledge forgetting notion logic programs meet
expressibility forgetting arbitrary logic program expressible via logic program
preserving strong equivalence two strongly equivalent logic programs remain strongly
equivalent forgetting variables
satisfying common intuitions forgetting preferably forgetting logic programs
semantically characterized zhang zhous four forgetting postulates
present comprehensive study knowledge forgetting context arbitrary logic programs propositional theories stable model flp stable semantics
called ht flp forgetting respectively ht flp forgetting meet
criteria hence primary advantages compared previous logic program forgetting
notions
main contributions may summarized follows ht flp
starting point investigate model theoretical characterization strong equivalence logic programs stable model flp stable model semantics explore
strong equivalence equivalence propositional logic
propose semantic forgetting logic programs stable model semantics respectively ht stable model means stable model forgetting
expressible via logic program preserves strong equivalence stable model
flp stable model semantics
investigate semantic properties forgetting forgetting satisfies
zhang zhous four postulates model respectively particular forgetting
consists logical content irrelevant forgotten atoms
establish underlying connections forgetting propositional forgetting
provide complexity decision relation forgetting particular resulting checking deciding logic program
forgetting set atoms logic program p complete related
inference terms forgetting varies co np complete p complete
theoretical negative confirm easy task simplify logic programs
forgetting fortunately kind simplification computed offline general
instance domain description involves lot auxiliary propositional variables
one firstly simplify description forgetting part auxiliary propositional
variables kind compilation lang et al
finally consider application knowledge forgetting solving conflicts
context logic programming


fik nowledge f orgetting



nswer et p rogramming

rest organized follows section briefly reviews necessary concepts
notions answer set programming section presents characterizations strong equivalence
logic programs firstly present uniform definition knowledge forgetting logic
programs section explore expressibility forgetting postulates relationship
propositional forgetting computational complexity application knowledge forgetting
conflict solving section discusses forgetting approaches logic programs finally
section concludes remarks proofs deferred
appendix clarity
revised extended version appeared proceedings kr
wang zhang zhou zhang

answer set programming
section briefly recall basic notions logic programming stable model semantics including syntax reduction stable model ferraris flp stable truszczynski strong equivalence lifschitz et al truszczynski stable
model called ht stable model convenience assume ht flp
assume propositional language la finite set propositional atoms
called signature language la
syntax
formulas la built signature place connective false
binary connectives follows
p



p true shorthand
theory set formulas
interpretation set atoms atom viewed true
false otherwise propositional logic notions model satisfaction relation
defined usual following denote x x x mod

mod mod e equivalent

formula irrelevant set v atoms written ir v exists formula
mentioning atoms v
convenience

w
v define following notations let finite set formulas
w
denote sv resp
disjunction resp conjunction formulas
denotes denotes cardinality similarly resp mean
resp
reduct stable
let formula x reduct w r x written red x recursively
uniformly defined follows
rest whenever confusion may explicitly mention signature talk
formulas la



fiwang z hang z hou z hang

r red x
r red p x p x p otherwise
r red x red x red x x
otherwise
ht r redht x redht x redht x x otherwise

redflp x x
flp r redflp x

x


otherwise e x

definition set x stable model formula x minimal set inclusion
model red x denote set stable sm
please note traditionally ht reduct named reduct red ht x written x
ht stable model called stable model ferraris redflp x written x
truszczynski
known ht stable flp stable comparable sense
ht stable flp stable flp stable ht stable
cf see truszczynski exs
example let us consider following formulas
let p p p
redht redht p redflp redht p p
thus sm ht sm flp p
let p p p p following
redht redht p p
redflp red flp p p redflp redflp p
thus sm flp

sm ht

p sm flp

definition two formulas sm equivalent stable model semantics written sm iff stable
notion ht sm equivalence indeed notion equivalence logic programs
stable model semantics cf see lifschitz et al thm


fik nowledge f orgetting



nswer et p rogramming

strong equivalence knowledge logic programs
unlike equivalence propositional logic equivalence logic programs allow
equivalent replacement e may different stable even though
equivalent
example let p q p p sm sm
sm equivalent however p stable model p q unique stable model
p p thus allow replacing p indicates
different knowledge stable model semantics
motivates notion strong equivalence
definition two formulas strongly equivalent stable model semantics
iff sm every formula case strongly equivalent
knowledge equivalent
known notion strong equivalence captured terms
interpretation pair hx x satisfiability thus
denoted recursively defined follows
hx
hx p p x
hx hx hx
hx hx hx
ht hx ht hx ht implies hx ht
flp hx flp x hx flp
mod denote set formula please note
ht flp particular modht resp modflp denotes set ht resp
flp formulas example one check none h p
h p p h p p q model every interpretation model
definition formula logical consequence formula written iff mod
mod two formulas equivalent model semantics written iff
mod mod
following proposition item proved lifschitz tang turner cf see lifschitz
et al iii prop
proposition let b c set atoms following
v
w
v
w
b c ht b c
v
w
v
w
ii b c flp b c


fiwang z hang z hou z hang

please note inverse ii generally hold instance p p flp
h p flp p p
given two formulas known strongly ht equivalent
ht stable model semantics ht equivalent viz ht
strongly flp equivalent flp stable model semantics flp equivalent
viz flp cf see truszczynski thm commonly recognized strong
equivalence amounts knowledge equivalence formulas strong equivalence captures
logical content formula stable model semantics osorio zacarias osorio
cuevas delgrande et al formally define knowledge logic programs
definition knowledge formula stable model semantics written cn
consists logical consequence viz cn
knowledge formula stands logical content formula instance
cnht cnht p p cnht p q
recall model semantics every formula transformed conjunction
formulas following normal form


b c

b c sets atoms cf ht see cabalar ferraris thm
truszczynski thm flp every formula conjunction
formulas form strongly equivalent
formula form called rule generally written
al dn b bk c cm



ai l b bi k c ci di n
logic program finite set rules let r rule form said
disjunctive
positive c
normal
horn c
logic program disjunctive resp positive normal horn iff consists disjunctive
resp positive normal horn rules logic program consistent stable model semantics least one stable model
known every logic program ht flp cf see truszczynski prop
proposition every logic program ht

flp

characterizations knowledge equivalence
section perspective consider characterization knowledge
equivalence logic programs firstly relate knowledge equivalence equivalence propositional logic secondly


fik nowledge f orgetting



nswer et p rogramming

model theoretical characterization
firstly recall basic properties satisfiability ferraris lifschitz ferraris
truszczynski
proposition let formula x
hx hy e
ii hx iff
iii hx iff x red
collection interpretations expressible whenever exists formula
mod collection interpretations may expressible instance
formula whose ones h p reason
formula mod h p p proposition
requires h p p belonging mod contradiction
given formula x hx countermodel hx
hy hy countermodel hy let x define
following formulas

x x x


flp x x x




x x x
ht x








x capture countermodel hx hy respectively
following lemma shows countermodel captured formula cf
ht see cabalar ferraris prop truszczynski props flp
lemma let x u v
hu v countermodel x iff u x v
ii hu v countermodel iff v
proposition collection interpretations expressible iff
hx implies hy
actually satisfy condition following logic program
x hx
hy hy

captures sense mod




fiwang z hang z hou z hang

note wong presented model theoretical characterization ht
disjunctive logic programs cf see wong thm formally speaking collection
ht interpretations disjunctively ht expressible e disjunctive logic program
modht iff condition following one hold
hx hy hx



together proposition
corollary collection
tions hold

flp interpretations

disjunctively

flp expressible

iff condi

actually satisfies conditions following disjunctive logic program
captures
x hx
hy hy

lemma
v
w let b bevtwo sets
w atoms x hx
b b

v

b

w

iff x

proposition set interpretations positively expressible e positive logic
program mod iff satisfies criteria
hx iff x hx xi hy




va matter
w fact case satisfies condition positive logic program
captures
x x hx xi

corollary two positive logic programs strongly equivalent equivalent
propositional logic

eiter fink tompits woltran showed disjunctive logic program
strongly equivalent normal logic program closed intersection e
every pair ht hx hx hx x ht model cf
see eiter et al thms terms characterization disjunctive logic programs
proposition obtain model characterization normal logic programs follows
corollary set interpretations normally expressible e normal logic
program mod iff satisfies addition following
criteria
hx hx hx x

proposition collection interpretations horn expressible e horn logic
program mod iff satisfies addition following criteria
hx hh hx h




fik nowledge f orgetting



nswer et p rogramming

relating knowledge equivalence propositional logic
proved strong equivalence logic programs stable model semantics related
equivalence propositional logic pearce et al lin holds strong
flp equivalence logic programs following
firstly extend language la laa p p p fresh atoms
expression la denote obtained replacing atom p
corresponding atom p following denote
p p p



please note model splitting
every p atom p belongs
denote set p p
definition ht flp recursively defined follows

p p

ht ht ht ht
flp flp flp
please note translation ht translation defined pearce tompits
woltran one verify ht ht flp given
theory la define evident linear size
example let p p p
ht p p p p p p p p
flp p p p p p p p p p p
unique flp model signature p h p p however two ht
h p h p p signature p p one easily check ht
two p p p flp unique model p p
v
w
proposition let b c b c subsets
flp ht
following proposition connects equivalence equivalence classical propositional logic cf ht see pearce et al lem
proposition let formula la x hx model iff
x model


fiwang z hang z hou z hang

following theorem shows strong equivalence logic programs stable
model semantics reduced equivalence propositional logic cf ht see
ferraris et al thm lin zhou thm
theorem two formulas iff

theorem obtain following complexity cf
tompits woltran thms

ht

see pearce

proposition deciding formula satisfiable np complete
ii deciding two formulas equivalent co np complete

knowledge forgetting logic programs
mentioned introduction concentrate knowledge forgetting logic programs
stable model semantics formally stated following
definition knowledge forgetting let logic program v logic program
knowledge forgetting v consists knowledge
mentions atom v
knowledge forgetting exists unique strong
equivalence cf theorem semantic forgetting defined explored
let v x sets atoms set v bisimilar x written v x v x v
intuitively states interpretations x agree atoms v
two interpretations hh hx v bisimilar written hh v hx h v x
v position define semantic knowledge forgetting terms
bisimulation
definition semantic knowledge forgetting let formula v formula
semantic forgetting v whenever every interpretation
mod iff mod v



according definition one see somehow exactly constructed
motivates us define following notion extension
let v x sets atoms v extension x denoted xv collection
interpretations v bisimilar x v extension interpretation hh denoted
hh iv collection interpretations v similar hh instance let
hh h p q p q v q r hh iv contains h p p h p p q
h p p q r h p q r p q r intuitively speaking v extension interpretation collection interpretations formed freely adding removing
atoms
sin v v extension collection interpretations written mv collection v
classical propositional logic corresponds formula e mod mv
corresponds formula whose truth value nothing atoms v intended
meaning case similar mv corresponds formula model


fik nowledge f orgetting



nswer et p rogramming

semantics relevant atoms v words suppose mv mod
hx hh h resp obtained x resp freely
adding removing atoms v whenever h following lemma shows equivalent
condition semantic knowledge forgetting
lemma let formula v formula forgetting v iff
following condition holds
mod mod v

condition forgetting generalization forgetting propositional logic lin
reiter terms following corollary
corollary formula forgetting set v atoms formula iff mod
mod v mod refers classical propositional logic
syntactic counterpart forgetting propositional logic defined follows lin
lang et al
forget p p p
forget v p forget forget p v
p resp p formula obtained replacing every occurrence
atom p resp
interpretations related given signature follows shall assume
signature formula theory implicitly given atoms occurring formula theory
unless explicitly stated otherwise example illustrates forgetting
computed
example let following formula
p q q p p q
signature p q mod h p q h p q p q please note
ht flp definition verify mod p
h q h q q p corresponds formula p q p q
model semantics proposition matter fact q q
note forget p p p q q q shows unlike
syntactic counterpart forgetting classical propositional logic forgetting cannot
computed via p p mod q h q h q q mod q
h q q signature q

expressibility
please note definition guarantee existence forgetting however
next theorem shows forgetting exists implies forgetting
unique strong equivalence


fiwang z hang z hou z hang

theorem expressibility theorem let formula v set atoms exists
formula mod mod v
uniqueness strong equivalence forgetting follows fact
formula forgetting v well mod mod v
mod shows strongly equivalent stable model semantics
expressibility abusing denotation denote forgetting
forget v
definition let formula v forget v formula mod
mod v e forget v forgetting v
sense forget operator maps formula set atoms formula according
definition expressibility theorem following corollary easily follows
corollary let formulas v v v sets atoms
forget forget v v forget forget v v
ii forget v forget v
firstly states forgetting independent order forgotten atoms secondly
forgetting preserves strong equivalence logic programs stable model semantics
investigate properties forgetting introduce notion irrelevance
model semantics
definition formula irrelevant set v atoms denoted ir v exists
formula mentioning atoms v
basic properties forgetting presented
proposition let two formulas v set atoms
ir forget v v
ii model iff forget v
iii forget v
iv forget v forget v
v forget v forget v forget v
vi forget v forget v forget v
vii forget v forget v ir v


fik nowledge f orgetting



nswer et p rogramming

intuitively proposition says forgetting irrelevant atoms v
e forgotten atoms sense signature forgetting constrained
v intended meaning others easily read e g item iii says
forgetting kind weakening item v shows forgetting distributive property
disjunction
mentioned earlier disjunctive programs positive programs normal logic programs horn
programs four types special cases arbitrary logic programs setting
interesting consider whether expressibility holds special programs
instance would know whether forgetting disjunctive positive
normal horn logic program still expressible disjunctive resp positive normal
horn logic program
indicated following two examples ht flp forgetting disjunctive positive
normal logic programs possibly expressible disjunctive positive logic programs
simplicity identify singleton set clear context thus
denote forget p forget p ir p ir p p mp etc
example consider following normal logic program signature p q
p q q p p q
mod h p p h q q
mod p h h q q p
h p p p h p implies forget p q q easily seen
q q cannot expressed disjunctive logic program mod p satisfy
hence forget p cannot expressed normal logic program
please note q q ht q q thus q q ht forgetting p
however q q flp forgetting p q q flp flp q q
example let positive logic program signature p q r follows
p q r p q r p r q q r p
difficult verify signature p r mod q consists
h h p r h p p h p p r h r r h r p r h p r p r
clearly satisfy condition hence captured disjunctive logic program matter fact following
forget ht q ht ht p ht r r p p p r r
forget flp q flp flp p flp r r p r p p p r r
terms proposition interestingly example shows though logic program may
ht flp ht forgetting may different flpforgetting



fiwang z hang z hou z hang

ht flp forgetting horn logic programs special interest unlike disjunctive positive normal logic programs ht flp forgetting horn
logic program expressible horn logic program
theorem horn expressibility let horn logic program v horn
logic program forget v
obtained model theoretical characterization classes disjunctive normal
logic programs respectively easily derive sufficient necessary condition ht
flp forgetting remain class e ht flp forgetting set
atoms disjunctive resp normal logic program disjunctive resp normal logic program
proposition let disjunctive logic program v forget v
expressible disjunctive logic programs
hh ht hh hh v hh
proposition let normal logic program v forget v expressible
normal logic programs addition condition following condition holds
hh hh v
hh h v h h v v



forgetting postulates
zhang zhou proposed four forgetting postulates work knowledge forgetting
showed knowledge forgetting precisely characterized four postulates
argued postulates viewed general semantic characterization
knowledge forgetting logics indeed classical propositional forgetting
characterized postulates terms forgetting logic programs addressed
introduction imposing postulates feasible existing approaches following
forgetting exactly captured postulates think one major
advantage logic program forgetting approaches
notion forgetting closely related uniform interpolation property visser
goranko otto instance forgetting description logics lutz wolter
semantic forgetting logic programs gabbay pearce valverde following
corollary follows theorem actually implies uniform interpolation property
logics model semantics namely formulas exists
formula contains atoms occurring
formula called uniform interpolant stated
corollary let two formulas v set atoms ir v


iff

forget v

let two formulas v set atoms following zhang zhous four
postulates logic programs model semantics


fik nowledge f orgetting



nswer et p rogramming

w weakening
pp positive persistence ir v
np negative persistence ir v
ir irrelevance ir v
specifying forget v w pp np ir called postulates knowledge
forgetting logic programs stable model semantics viz forgetting v
uniform interpolation property cf corollary following
representation theorem
theorem representation theorem let two formulas v set atoms
following statements equivalent
forget v
ii ir v
iii postulates w pp np ir hold
theorem justifies knowledge forgetting cf definition exists unique
strong equivalence
obvious consequence follows representation theorem
forget v ir v
says forgetting v consists logical consequence
irrelevant v reason forgetting knowledge forgetting logic programs
stable semantics mentioned introduction none
forgetting approaches logic programs knowledge forgetting since satisfy
postulates see section details
one note representation theorem applicable forgetting classical
propositional logic viz forget v ir v
relating propositional forgetting
shown strong equivalence logic programs may related equivalence
propositional logic pearce et al lin forgetting preserves strong equivalence
logic programs stable model semantics worth exploring connections
forgetting forgetting propositional logic section undertake depth
investigation aspect
first provide direct connection forgetting propositional forgetting via
following proposition
proposition let formulas v forget v
forget v



fiwang z hang z hou z hang

ii
proposition simply says forgetting classical propositional forgetting equivalent classical propositional logic thus forgetting classic propositional logic computed forgetting logic programs however seen
example forget v possibly equivalent forget v reverse ii
hold generally instance forget p q p forget p q p evidently
p p theorem immediately following corollary
corollary let horn logic program v set atoms forget v expressible horn logic program
following states horn logic programs forgetting forgetting
propositional logic strongly equivalent thus provides method computing forgetting
horn logic programs propositional forgetting
proposition let two horn logic programs v set atoms
forget v forget v
following proposition states forgetting double negative formulas closely
connected classical propositional forgetting used prove complexity
later
proposition let two formulas v set atoms
forget v iff forget v
ii forget v forget v iff forget v forget v
known strong equivalence logic programs closed related equivalence
propositional logic translating logic programs propositional theories pearce et al
lin motivates us investigate connection forgettings view
translations main section stated follows
theorem forgetting vs propositional forgetting let two formulas la
v
forget v iff forget v v
theorem know check whether formula forgetting set
v atoms formula equivalent check whether classically equivalent
forget v v theory following example shows
application theorem
example example continued recall following formula
p q q p p q


fik nowledge f orgetting



nswer et p rogramming

forget p q q signature p q p p q q
program translation yields
p q p q q p q p p q
forget p p equivalent
q q q q

e

q q q q

equivalent q q theory q q q one check
q q q q q q q theory q thus formula q q
forgetting p theorem

following example shows occurring forget v v
necessary theorem
example continued example recall p q r p p q q r
r consists
p q r p q r p r q q r p

ht

flp p q r p q p q r p r p r q q r q r p
p q r p r q q r p
one check
forget ht q q
forget flp q q
recall formula r p p p r r ht forgetting q
r p r p p p r r flp forgetting q

ht r r p p p p p r r r
flp r r p r p p p p r r
theory
ht p p r r r p
ht p p r r r p
one verify model p model ht model
flp e ht flp actually
forget q q p r p r p r
one check
p p r r r p p r p r p r
shows resp ht forgetting resp


flp forgetting

q



fiwang z hang z hou z hang

following states reduce checking whether forgetting two
formulas strongly equivalent checking whether propositional forgetting corresponding two formulas equivalent
proposition let two formulas la v set atoms forget v
forget v iff following condition holds
forget v v forget v v
computation complexity
theorem propositions imply naive compute forgetting formally speaking given formula signature set v atoms forget v
computed follows
step evaluating denoted
step restrict v denoted v e
v hh v v hh
step enumerating following formulas signature v v
x hx
v hy v
hy
v
step finally conjunct constructed formulas denoted
corollary let v given forget v
alternatively terms theorem compute forget v enumerating consequences irrelevant v exist sound complete axiomatic systems
ht logic jongh hendriks checking ht consequence relation axiomatically
doable though sound complete axiomatic system flp logic recently unknown still
enumerate formulas form signature v check flpconsequence nevertheless observed computational viewpoint
propositional forgetting two approaches would expensive appears
inevitable terms following complexity unless complexity hierarchy collapses
theorem let two formulas v set atoms
deciding forget v co np complete
ii deciding forget v forget v p complete
iii deciding forget v p complete


fik nowledge f orgetting



nswer et p rogramming

according representation theorem e theorem theorem means
checking irrelevant v e ir v intractable ii theorem
hand presents complexity forgetting equivalence checking e two formulas
strongly equivalent restricted common signatures last iii
theorem states checking formula forgetting generally difficult
proposition let two formulas v set atoms
deciding whether forget v p complete
ii deciding whether forget v co np complete
theorem proposition tell us forgetting general complexity resulting checking inference located level complexity polynomial
hierarchy propositional forgetting
conflict solving knowledge forgetting
following consider application proposed forgetting conflict solving logic
program contexts represent knowledge system consisting knowledge bases multiple
agents
definition logic program context n ary tuple n consistent
logic program conflict free n consistent stable model semantics
definition let n logic program context solution minimal
subset forget forget n conflict free
underlying signature
obvious solution conflict free logic program context
consider following simplified zhang foos conflict solving scenario cf see zhang
foo ex
example couple john mary discussing family investment plan four
different shares sharea shareb sharec shared sharea shareb high risk
high return sharec shared low risk may suitable long term
investment johns marys investment preference shares encoded following
logic programs j respectively
j



r sa sb

r sc

r sc sd

r sd

r sd sc

r sb sa sc

r sc sd
r sa sb
stands share intuitive meaning rules easily read e g rule r
says john wants buy sharea dont buy shareb rules r r r mean john
wants buy sharec shared


fiwang z hang z hou z hang

one see j stable model due confliction rule r
r r logic program context j conflict free
sd following
forget ht j ht sa sb
forget ht ht sc

sc sc

sb sa sc

sa sb

one check forget ht j forget ht unique ht stable model sa sc
thus ht solution said john mary may agreement
investment plan shares sharea shareb sharec agree give belief
knowledge shared investment shares sharea sharec
shareb
one check flp stable model semantics john mary give
belief shared investment plan shares sharea sharec
share shareb reason forget flp j forget flp unique flp stable
model sa sc

related work
section compare forgetting weak strong forgetting zhang foo
semantic forgetting eiter wang forgetting operators fs fw wong
weak strong forgetting
let normal logic program p propositional atom reduction respect p
denoted red p normal logic program obtained
rule r p head r rule r p body r
replacing r
head r body r body r p
rule r replaced rule previous step
removing rule r remaining normal logic program
let x set propositional atoms reduction respect x inductively
defined follows
red
red x p red red p x
strong forgetting p normal logic program normal logic program sforget p
obtained red p removing rule r r valid p head r
body r body r weak forgetting p normal logic program wforget p
obtained red p firstly removing rule r r valid p head r
body r removing p remaining rules
rule r valid head r body r body r body r



fik nowledge f orgetting



nswer et p rogramming

let x set atoms strong weak forgetting x recursively defined
sforget

wforget

sforget x p sforget sforget p x
wforget x p wforget wforget p x
known two forgetting operators independent ordering forgotten atoms
sense strong ht equivalence logic programs ht stable model semantics cf see
zhang foo prop
example consider two normal logic programs
p q

q p

r p

p q

q p

r q

one check strongly equivalent
sforget p

wforget p r

sforget p wforget p r q
example shows neither weak forgetting preserves strong equivalence strong forgetting one verify q r r ht flp thus
strong forgetting satisfy positive persistence weak forgetting satisfy weakening negative persistence actually ht flp forgetting
following
forget ht p ht forget ht p ht q r
forget flp p flp forget flp p flp q r
flp follows fact ht proposition



semantic forgetting
addressed certain issues weak strong forgetting eiter wang proposed
semantic forgetting consistent disjunctive logic programs formally speaking let
consistent disjunctive logic program p atom set atoms p stable model iff
stable model stable model p p
disjunctive logic program represents forgetting p
mention atom p
set atoms stable model iff p stable model p
terms definition forgetting unique strong equivalence
means forgetting preserve strong equivalence compute forgetting atom consistent disjunctive logic program proposed three forget
forget forget eiter wang example demonstrates difference
semantic forgetting forgetting


fiwang z hang z hou z hang

example let p q program signature p q r although program nothing atom r forgeti r
seems intuitive loses information irrelevant want forget however
forget r

example shows semantic forgetting satisfy positive persistence
postulate q p lost semantic forgetting forgeti r
forgetting operators fs fw
wong developed forgetting disjunctive logic programs differently work
zhang foo eiter wang wongs forgetting defined
ht logic sense probably shares common logic ground ht forgetting
wong defined two forgetting operators fs fw correspond two series program
transformations see appendix detailed definitions
interesting feature wongs forgetting preserves strong equivalence however
major issue forgetting one hand forgetting fs may cause unnecessary
information loss hand forgetting fw may introduce extra information
one want illustrated following example
example let us consider normal logic program consisting
x

z

q p

p q

p q


fs p ht x z
fw p ht x z

x

forget ht p ht x z
forget flp p flp x z

q
q q
q q

since ht q q irrelevant atoms p seems us forgetting
p affect fact fs p ht q q sense
see fs lost information wish keep shows operator fs
satisfy positive persistence postulate
hand fact ht q fw p ht q appears fw may
introduce unnecessary information indeed conflicts intuition program weakening via
forgetting e satisfy weakening postulate

mentioned introduction following example confirms expected
obtained one three forgetting approaches
example continued example normal logic program
p q q p p q


fik nowledge f orgetting



nswer et p rogramming

following
sforget p forget p fs p
wforget p fw p q
expected logic program represents information auxiliary atom
p ignored q q


concluding remarks
two semantic knowledge forgetting approaches called ht flp forgetting respectively proposed logic programs stable model flp stable model semantics respectively knowledge forgetting captured corresponding logical consequence forgotten logic programs irrelevant forgotten atoms consequently preserves
strong equivalence logic programs ht flp stable model semantics respectively
major advantage compared existing forgetting approaches logic programming
starting point investigated model theoretical characterization logic programs ht flp stable model semantics studied respective strong equivalence
classical propositional logic equivalence many properties forgetting explored
existence forgetting representation theorem complexity decision related forgettings considered application knowledge forgetting conflict solving
although presented abstract approaches computing forgetting
showed underlying difficulties computation valuable study practical
different subclasses logic programs another challenging future work extend knowledge forgetting nonmonotonic systems particular first order logic programs ferraris
et al mentioned introduction forgetting effectively used
solve confliction e g strong weak forgetting zhang foo propositional forgetting lang marquis application knowledge forgetting deserves
studying
concentrate upon knowledge forgetting logic programs
notion strong equivalence interesting work consider forgetting
stable model semantics logic programs along work wang et al last least
logic programs supported model semantics enjoys similar properties logic
programs ht flp stable semantics truszczynski consider
knowledge forgetting logic programs supported model semantics another

acknowledgments
thank mirek truszczynski encouraging us consider knowledge forgetting logic programs flp stable model semantics thank anonymous reviewers insightful comments robin bianchi help formatting yisong wang partially
supported national natural science foundation china grant stadholder
foundation guizhou province grant


fiwang z hang z hou z hang

appendix proofs section
proposition let b c set atoms following
v
w
v
w
b c ht b c
v
w
v
w
ii b c flp b c

v
w
proof
ii
suppose
hx




flp model b c flp model
v
w
b c follows following conditions hold
v
v
x b c implies x b
v
v
v
b b c implies b c
w
w
c hx flp e x
w
w
w
conditions b hx flp c e x c
together conditions b c contradiction follows


appendix b proofs section
proposition collection interpretations expressible iff
hx implies hy



actually satisfy condition following logic program
x hx
hy hy

captures sense mod
proof direction left right follows proposition prove
direction let propositional theory consisting every x
x hx
hy
hy

lemma mod



lemma
v
w let b bevtwo sets
w atoms x hx
b b

v

b

w

iff x

proof according iii proposition proposition sufficient
case ht






x b
iff x
b

b


v
w
v
w
note b x b implies x
v w
v suppose x
b e b x x follows b due b


fik nowledge f orgetting



nswer et p rogramming

w
v
v
v
w
wi e thus x b since b b x
e x x contradiction
v
w
v
w
vwe need
x b since
b
suppose
w
x v b yw x former implies b x thus x
x b latter implies x means x since x
contradiction

proposition set interpretations positively expressible e positive logic
program mod iff satisfies criteria
hx iff x hx xi hy



actually satisfy condition following logic program


x hx xi

x

captures sense mod

proof suffices prove case ht proposition
let positive logic program whose ht exact ones every
ht interpretation hx lemma hx ht iff x x e hx xi ht
hy ht e since every rule positive condition follows
let n x hx xi construct propositional theory consisting


x
x

every x n n
firstly
v mod
w n suppose x x n x n follows
x x x belongs
v hand
w suppose x n x
follows exists x n x x x e x x x x
x x thus x n contradiction
secondly modht one hand let hx ht x
lemma follows x n implies hx xi hy
thus hx hand let hx terms
hx xi hy thus x n n e x thus
hx ht lemma

proposition collection interpretations horn expressible e horn logic
program mod iff satisfies addition following criteria
hx hh hx h



proof suffices prove case ht proposition
suppose horn logic program modht proposition
modht satisfies suppose hx hh two ht follows
x h lemma thus x h
hx h due x h


fiwang z hang z hou z hang

let n ones defined proof proposition x n x
n according follows exists horn logic program set horn clauses whose

exactly
vones inwn matter fact horn program constructed
replacing x


x p x pk



x x x n p pk
firstly proving






x
x

pi
ik

v
w
pi k defined direction right left trivial v x w
belongs v
let us consider direction suppose h h model x
h x pi k x h h follows
h element x x n p pk h
contradiction
finally modht follows modht proposition

v
w
proposition let b c b c subsets
flp ht
proof note ht p p p flp p p
ht





b

c c

cc











dd




flp
b c b c

since p p p


ht








b c

dd



flp
completes proof





b c




proposition let formula la x hx model iff x
model
proof prove case

flp

induction structures let x

p trivial hand hx flp p iff x p iff
x p


fik nowledge f orgetting



nswer et p rogramming

follows inductive assumption
flp flp recall
hx flp iff

x b c hx flp
note
iff iff x
x iff x b iff iff x c
hx flp iff x flp inductive assumption
follows hx flp iff x flp


completes proof

theorem two formulas la iff
laa
proof prove case flp
flp
iff flp



iff hma

flp proposition p p

iff hma flp since flp
iff flp proposition
iff flp
hx flp
iff x flp proposition p p
iff x flp since flp flp
iff hx flp proposition



proposition deciding formula satisfiable np complete
ii deciding two formulas equivalent co np complete
proof membership formula flp satisfiable exists flp interpretation
hh hh flp feasible guess flp interpretation check
condition hh flp thus np
hardness follows fact flp satisfiable iff satisfiable nphard ii proposition shows np hard
ii membership flp exists hh
hh flp hh flp
b hh flp hh flp


fiwang z hang z hou z hang

guess flp interpretation hh check conditions b feasible
polynomial time size thus co np
hardness flp
iff flp model
iff model ii proposition
iff valid co np hard thus co np hard


appendix c proofs section
lemma let formula v formula forgetting v iff
following condition holds
mod mod v
proof knowledge forgetting v
iff every interpretation iff exists v
iff mod interpretation v
iff mod mod v



lemma let x h v subsets
x v h v x v h x v h
ii x v h v h v v x
proof note x v
x v v
h v v due x v h v
h v
thus x v similarly prove x v h
ii please note p p v p p v p p v
h v v
h v v v v
h v v since h v v
x v v since h v h v
x v v v v since x v v
x v v

follows h v v x
theorem expressibility theorem let formula v set atoms exists
formula mod mod v
proof every hx mod v exists hh hh v hx
e x v h v proposition ht thus hy mod v
due hy v ht follows collection mod v satisfies condition
formula mod mod v proposition

lemma formula irrelevant set v atoms iff hh implies hx
every two interpretations hx hh hx v hh


fik nowledge f orgetting



nswer et p rogramming

proof irrelevant v
iff exists formula mentioning atoms v
iff exists formula mentioning atoms v mod mod
iff mod hx x hh v hx hh
iff hh implies hx every two interpretations hx hh
hx v hh

proposition let two formulas v set atoms
ir forget v v
ii model iff forget v
iii forget v
iv forget v forget v
v forget v forget v forget v
vi forget v forget v forget v
vii forget v forget v ir v
proof immediately follows lemma
ii evident mod iff mod v definition
iii easy see mod mod v definition
iv let hh forget v e hh mod v terms
definition exists hh hh v hh implies hh
since thus hh mod v e hh forget v
v hh forget v
iff hh mod v
iff hh hh v hh
iff hh hh v hh hh hh
iff hh mod v hh mod v
iff hh forget v hh forget v
iff hh forget v forget v
vi hh forget v
hh mod v
hh hh v hh
hh hh v hh hh hh
hh mod v hh mod v
hh forget v hh forget v
hh forget v forget v
vii direction left right follows vi fact ir v e forget v
let us consider direction
hh forget v
hh forget v hh
hh hh v hh hh


fiwang z hang z hou z hang

hh v hh hh ir v lemma
hh mod v
hh forget v



theorem horn expressibility let horn logic program v horn
logic program forget v
proof terms proposition suffices prove ht let modht v
proposition sufficient satisfies conditions
first prove satisfies ht interpretation hx
x exists hh modht hx v hh note positive
shows hh hi ht ht lemma thus hx xi
hy due x v h v hand suppose hx xi hy
x exist two ht hh hh hh v hx xi
hh v hy lemma h h since
horn theories closed set intersection alfred h h
lemma hh h ht lemma h h v x x thus
hh h v hx follows hx
satisfies suppose hx hh two ht interpretations
follows two ht hx hh hx v
hx hh v hh since horn hh x ht
proposition lemma h x v h x v implies
hh x v hx h thus hx h

proposition let disjunctive logic program v forget v
expressible disjunctive logic programs
hh ht hh hh v hh
proof proposition suffices prove ht let ht forget ht v direction
left right obvious direction
suppose expressible disjunctive logic programs exists hx ht
hy ht hx ht follows hh ht
ht ht hh v hx v exists
hh ht hh v hh viz hh v hx hx v
hh contradiction

proposition let normal logic program v forget v expressible
normal logic programs addition condition following condition holds
hh hh v
hh h v h h v v



proof proposition suffices prove ht let ht forget ht v direction
left right easy consider direction follows
terms proposition corollary sufficient hx ht
hx ht hx x ht according corollary suppose hx


fik nowledge f orgetting



nswer et p rogramming

hx two ht two ht hh hh
hx v hh hx v hh follows v condition exists ht model hh satisfying hh v hh h
hh v hh h shows hh v hx x hence hx x ht


theorem representation theorem let two formulas v set atoms
following statements equivalent
forget v
ii ir v
iii postulates w pp np ir hold
proof let ir v evident ir v
equivalence ii follows corollary ii obviously implies iii
suffices iii ii
positive persistence follows mod
mod hand w ir ir v follows thus
mod mod thus

proposition let formulas v forget v
forget v

ii
proof
iff ht proposition
iff ht forget v since forget v
iff hy ht v hy definition
iff v proposition
iff forget v corollary
iff since forget v
ii hh
proposition
forget v since forget v
v corollary
hh v v ii proposition
hh forget v due hh v v hh definition
hh due forget v



proposition let two horn logic programs v set atoms
forget v forget v


fiwang z hang z hou z hang

proof proposition suffices ht
hh ht
h lemma
h h h v h v forget v
h h h v h v
h hh ht hh v hh
hh ht forget ht v
hh ht forget ht v
hh ht hh v hh
h h hh v hh lemma
h forget v forget v
h due forget v
hh ht
proposition let two formulas v set atoms
forget v iff forget v
ii forget v forget v iff forget v forget v
proof hh
iff e ii proposition
iff forget v since forget v
iff e v corollary
iff hh v h v v v ii proposition
iff hh forget v definition
e
iff hh ii proposition
iff hh forget v h since forget v
iff hx hh v hx definition
iff v ii proposition
iff forget v corollary
ii hh forget v
iff hx hx v hh definition
iff e v ii proposition
iff forget v corollary
iff forget v since forget v forget v
iff e v definition
iff hx v ii proposition x v v v
iff hh forget v hh v hx v definition
forget v
iff e v corollary
iff hx v ii proposition
iff hx v forget v hx v v hx definition
iff hx v forget v since forget v forget v
iff hx hx v v hx definition




fik nowledge f orgetting



nswer et p rogramming

iff e v ii proposition
iff forget v corollary



theorem forgetting vs propositional forgetting let two formulas la
v
forget v iff forget v v
model
proof let


proposition
iff hma


forget v since forget v
iff hma





definition
iff hh hh v hma


iff hh h v v


iff h h v v proposition
iff h h v v lemma
iff forget v v definition
iff forget v v
hx
iff x proposition
iff x forget v v
iff v v x
x proposition
iff hma

v



definition
iff hx forget v due hx v hma




proposition let two formulas la v set atoms forget v
forget v iff following condition holds
forget v v forget v v
proof forget v v forget v v
side similarly proved
forget v v
n n v v n
hx n x proposition
hx forget v iii proposition
hx forget v forget v forget v
hh hh v hx definition
h proposition
x forget v v h v v x
forget v v v v x n
forget v forget v side similar
hh forget v
hx hh v hx definition
x proposition
x forget v v


fiwang z hang z hou z hang

x forget v v
h h v v x
hh proposition
hx forget v hx v hh definition
hh forget v hx v hh



theorem let two formulas v set atoms
deciding forget v co np complete
ii deciding forget v forget v p complete
iii deciding forget v p complete
proof membership recall forget v iii proposition
forget v
iff forget v
iff hx forget v hx
iff hh hh v hx hx
since guessing hh hx checking satisfiability done polynomial
time size v thus complement forget v e forget v
co np
hardness follows fact proposition forget v iff
forget v co np complete cf see lang et al prop
ii membership forget v forget v exists interpretation hh

hh forget v hh forget v
b hh forget v hh forget v
one hand guess interpretation hh feasible nondeterministic turing machine hand checking hh feasible deterministic turing machine
hh forget v iff exists hx hx v hh thus
checking conditions b done polynomial time size calling
nondeterministic turing machine thus p
note ii proposition forget v forget v iff forget v
forget v p complete cf see lang et al prop thus hardness
follows
iii membership note forget v iff interpretation hh
hh hh forget v
hh hh forget v
similar case ii guessing checking polynomial time size
v calling nondeterministic turing machine thus p
note forget v iff forget v forget v forget v
latter p hard ii hardness follows



fik nowledge f orgetting



nswer et p rogramming

proposition let two formulas v set atoms
deciding whether forget v p complete
ii deciding whether forget v co np complete
proof membership recall forget v iff exists model hh
hh forget v hh forget v iff hx every interpretation hx hx v hh hh guessed polynomial
time size v checking hh forget v possible polynomial time
size v calling nondeterministic turing machine thus original
p
hardness follows following fact
forget v
iff forget v
iff forget v proposition
iff qbf v v valid p complete papadimitriou
ii membership note
forget v
iff hh forget v hh
iff hx hx v hh hh
since guessing checking polynomial size v original
co np
hardness follows fact
forget v
iff ii proposition
iff model co np complete proposition


appendix forgetting operators fw fs
wong proposed six postulates argued postulates respected forgetting
operators disjunctive logic programs strong equivalence
f ht f ht f
f appear f r ht f r
f f contain atoms
f f ht r f ht r cn
f f ht b c ht b c
f f f b ht f f b
f forgetting operator disjunctive logic programs b atoms r
disjunctive rule
cn r r disjunctive rule ht r var r var


fiwang z hang z hou z hang

var set atoms occurring
accordingly proposed two forgetting operators fs fw forgetting atom
disjunctive logic program defined procedure
let cn
form remove rules form b c replace rule form
b c b c let resulting logic program
replace remove rule form b c
b c according following table

w

b c
remove
b c

b c
remove
b c

let resulting logic program
logic program forgetting p

references
alfred h sentences true direct unions algebras journal symbolic
logic
bobrow g subramanian greiner r pearl j eds special issue relevance
artificial intelligence journal
cabalar p ferraris p propositional theories strongly equivalent logic programs
theory practice logic programming
delgrande j p schaub tompits h woltran model theoretic
belief change answer set programming acm transactions computational logic

eiter fink tompits h woltran eliminating disjunctions stable logic
programming principles knowledge representation reasoning proceedings
ninth international conference kr pp whistler canada aaai press
eiter wang k semantic forgetting answer set programming artificial intelligence

faber w pfeifer g leone n semantics complexity recursive aggregates
answer set programming artificial intelligence
ferraris p answer sets propositional theories logic programming nonmonotonic reasoning th international conference vol lecture notes computer science pp diamante italy springer
ferraris p lee j lifschitz v stable circumscription artificial intelligence
ferraris p lifschitz v mathematical foundations answer set programming
artemov n barringer h davila garcez lamb l c woods j eds
essays honour dov gabbay vol pp college publications


fik nowledge f orgetting



nswer et p rogramming

gabbay pearce valverde interpolable formulas equilibrium logic
answer set programming journal artificial intelligence
gelfond lifschitz v stable model semantics logic programming proceedings fifth international conference symposium logic programming pp
seattle washington mit press
goranko v otto handbook modal logic vol chap model theory modal
logic pp elsevier
jongh hendriks l characterization strongly equivalent logic programs
intermediate logics theory practice logic programming
kontchakov r wolter f zakharyaschev tell difference dl lite
ontologies principles knowledge representation reasoning proceedings
eleventh international conference kr pp sydney australia aaai press
lang j liberatore p marquis p propositional independence formula variable independence forgetting journal artificial intelligence
lang j marquis p reasoning inconsistency forgetting artificial intelligence
lifschitz v pearce valverde strongly equivalent logic programs acm transactions computational logic
lifschitz v tang l r turner h nested expressions logic programs annals
mathematics artificial intelligence
lin f strongest necessary weakest sufficient conditions artificial intelligence

lin f reducing strong equivalence logic programs entailment classical propositional logic proceedings eights international conference principles knowledge representation reasoning kr pp toulouse france morgan kaufmann
lin f chen discovering classes strongly equivalent logic programs journal
artificial intelligence
lin f reiter r forget proceedings aaai fall symposium relevance
pp
lin f zhou answer set logic programming circumscription via logic gk
artificial intelligence
liu wen x progression knowledge situation calculus ijcai
proceedings nd international joint conference artificial intelligence pp
barcelona catalonia spain ijcai aaai
lutz c wolter f foundations uniform interpolation forgetting expressive
description logics ijcai proceedings nd international joint conference
artificial intelligence pp barcelona catalonia spain ijcai aaai
osorio cuevas v updates answer set programming basic
structural properties tplp


fiwang z hang z hou z hang

osorio zacarias f updates logic programs properties
seipel torres j eds foiks vol lecture notes computer science
pp springer
packer h gibbins n jennings n r line semantic forgetting ijcai proceedings nd international joint conference artificial
intelligence pp barcelona catalonia spain ijcai aaai
papadimitriou c h computational complexity addison wesley
pearce tompits h woltran encodings equilibrium logic logic programs
nested expressions proceedings th portuguese conference artificial intelligence progress artificial intelligence knowledge extraction multi agent systems
logic programming constraint solving pp london uk springer verlag
pearce tompits h woltran characterising equilibrium logic nested logic
programs reductions complexity theory practice logic programming

su k sattar lv g zhang variable forgetting reasoning knowledge
journal artificial intelligence
truszczynski reducts propositional theories satisfiability relations generalizations semantics logic programs artificial intelligence
van ditmarsch h p herzig lang j marquis p introspective forgetting synthese

visser uniform interpolation layered bisimulation godel pp
wang wang k zhang forgetting answer set programs revisited ijcai
proceedings rd international joint conference artificial intelligence pp
beijing china ijcai aaai
wang zhang zhou zhang forgetting logic programs strong
equivalence principles knowledge representation reasoning proceedings
thirteenth international conference pp rome italy aaai press
wang z wang k topor r w pan j z forgetting knowledge bases dl lite
annuals mathematics artificial intelligence
wong k forgetting logic programs ph thesis university south
wales
zhang foo n solving logic program conflict strong weak forgettings
artificial intelligence
zhang zhou knowledge forgetting properties applications artificial intelligence
zhou zhang bounded forgetting proceedings twenty fifth aaai
conference artificial intelligence aaai pp san francisco california
usa aaai press




