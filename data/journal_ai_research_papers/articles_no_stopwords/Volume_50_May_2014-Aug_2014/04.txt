Journal Artificial Intelligence Research 50 (2014) 805-845

Submitted 02/14; published 08/14

Speeding Iterative Ontology Alignment using
Block-Coordinate Descent
Uthayasanker Thayasivam
Prashant Doshi

UTHAYASA @ CS . UGA . EDU
PDOSHI @ CS . UGA . EDU

THINC Lab, Department Computer Science,
University Georgia, Athens, GA 30602, USA

Abstract
domains biomedicine, ontologies prominently utilized annotating data. Consequently, aligning ontologies facilitates integrating data. Several algorithms exist automatically aligning ontologies diverse levels performance. alignment applications evolve
exhibit online run time constraints, performing alignment reasonable amount time without compromising quality alignment crucial challenge. large class alignment
algorithms iterative often consumes time others delivering solutions high
quality. present novel general approach speeding multivariable optimization
process utilized algorithms. Specifically, use technique block-coordinate descent
(BCD), exploits subdimensions alignment problem identified using partitioning
scheme. integrate approach multiple well-known alignment algorithms show
enhanced algorithms generate similar improved alignments significantly less time
comprehensive testbed ontology pairs. BCD overly constrain partition
order parts, vary partitioning ordering schemes order empirically determine
best schemes selected algorithms. biomedicine represents key application
domain ontologies, introduce comprehensive biomedical ontology testbed community order evaluate alignment algorithms. biomedical ontologies tend large,
default iterative techniques find difficult produce good quality alignment within reasonable
amount time. align significant number ontology pairs testbed using BCDenhanced algorithms. contributions represent important step toward making significant
class alignment techniques computationally feasible.

1. Introduction
Recent advances Web-based ontologies provide needed alternative conventional schemas
allowing descriptive annotations data sets. example, National Center Biomedical
Ontology (NCBO) hosts 370 curated biomedical ontologies BioPortal including
high use SNOMED-CT, whose concepts participate 2 billion data
annotations (Musen et al., 2012). Therefore, present day challenge toward data integration
manage multitude ontologies build bridges ontologies overlapping
scope problem often referred ontology matching produces alignment (Euzenat & Shvaiko, 2007). illustrate partial alignment biomedical ontologies Fig. 1.
Consequently, several algorithms exist automatically aligning ontologies using various techniques (Euzenat, Loup, Touzani, & Valtchev, 2004; Jian, Hu, Cheng, & Qu, 2005; Li, Li, & Tang,
2007; Jean-Mary, Shironoshita, & Kabuka, 2009; Doshi, Kolli, & Thomas, 2009; Wang & Xu,
2009; Hanif & Aono, 2009; Bock & Hettenhausen, 2010; Jimenez-Ruiz & Grau, 2011; Shvaiko &
c
2014
AI Access Foundation. rights reserved.

fiT HAYASIVAM & OSHI

data
starting material,
intermediate material, end
products scientific
experiment parameters

process
occurrent entities
affect individuals

sample
specimen

agent

researcher

individual involved
experimental processes

role

Entity

continuant entities
causally affect
individuals process

role person,
chemical compund,etc...

worker_role
Processual_Entity Public
sector workers
exists time occurring
happening, temporal parts
always involves depends
entity.

reagent_role

states

drug

Buffer, dye, catalyst,
solvating agent.

drug_role

chemical substance that,
absorbed cell,
alters normal cell function

drug

region

region

Specimen

region

sample

region

(a)

(b)

Figure 1: Biomedicine important application domain ontologies. Alignment (shown
dashed red) portions of, (a) Parasite Experiment Ontology (PEO) and, (b)
Ontology Biomedical Investigations (OBI) discovered automated algorithm
called AgreementMaker (Cruz et al., 2012). ontologies available NCBO.
identified map alignment signifies equivalence concepts.

Euzenat, 2013), mixed levels performance. Crucial challenges algorithms involve
scaling large ontologies performing alignment reasonable amount time without
compromising quality alignment. case point, 6 alignment algorithms (not
including variants) 21 participated 2012 2013 instances annual
ontology alignment evaluation initiative (OAEI) competition (Shvaiko et al., 2012, 2013) generated
results acceptable amount time aligning large biomedical ontologies.
Although ontology alignment traditionally perceived offline one-time task, second challenge gaining importance. particular, Hughes Ashpole (2004) note, continuously evolving ontologies applications involving real-time ontology alignment semantic
search Web service composition stress importance computational complexity considerations. Recently, established competitions OAEI (Shvaiko et al., 2011) began reporting
execution times participating alignment algorithms well. ontologies become larger,
efficiency scalability become key properties alignment algorithms.
large class algorithms performs automated alignment iterative nature (Melnik,
Garcia-molina, & Rahm, 2002; Euzenat et al., 2004; Jian et al., 2005; Li et al., 2007; Doshi et al.,
2009; Wang & Xu, 2009; Hanif & Aono, 2009; Bock & Hettenhausen, 2010). algorithms
repeatedly improve previous preliminary solution optimizing measure solution
quality. Often, carried guided search alignment space using techniques
gradient descent expectation-maximization. algorithms may run convergence,
means solution cannot improved a, possibly local, optimum.
However, practice, runs often terminated ad hoc number iterations.
repeated improvements, computed alignment usually high quality approaches
consume time general non-iterative counterparts. example, algorithms
performing among top three OAEI 2012 terms alignment quality YAM++ (Ngo
& Bellahsene, 2012), ranked first conference track, Optima+, ranked third conference track, GOMMA (Kirsten et al., 2011), ranked first anatomy library tracks,
806

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

iterative. 1 hand, YAM++ consumed excessive amount time completing
conference track (greater 5 hours) Optima+ consumed comparatively time well.
Furthermore, iterative techniques tend anytime algorithms, deliver alignment
even algorithm interrupted convergence. considerations computational
complexity delivered ways scaling algorithms larger ontologies,
ontology partitioning (Hu, Zhao, & Qu, 2006; Seddiqui & Aono, 2009; Stoutenburg, Kalita, Ewing,
& Hines, 2010; Rahm, 2011) use inverted indices (Jimenez-Ruiz & Grau, 2011), seek
speed alignment process multiple algorithms. think considerations space
time go hand hand context usability.
primary contribution article general approach comprehensive evaluation
significantly speeding convergence iterative ontology alignment techniques. Thayasivam Doshi (2012a) provide preliminary introduction approach. Objective functions
measure solution quality typically multidimensional. Instead traditional approach
modifying values large number variables iteration, decompose problem optimization subproblems objective optimized respect single
small subset, called block, variables holding variables fixed. approach
block-coordinate descent (BCD) theoretically shown converge faster considerably
relaxed conditions objective function pseudoconvexity even lack
certain cases existence optima variable (coordinate) block (Tseng, 2001).
forms standard candidate tool multidimensional optimization statistics, applied
contexts image reconstruction (Pinter, 2000; Fessler & Kim, 2011) channel capacity
computation (Blahut, 1972; Arimoto, 1972), article presents use ontology alignment.
extensively evaluate approach integrating multiple ontology alignment algorithms. selected Falcon-AO (Jian et al., 2005), MapPSO (Bock & Hettenhausen, 2010),
OLA (Euzenat & Valtchev, 2004) Optima (Doshi et al., 2009) representative algorithms.
algorithms participated OAEI competitions past, ranked
top tier. Consequently, algorithms default forms exhibit favorable alignment performance. Furthermore, implementations source codes needed approach
freely accessible.
Using comprehensive testbed several ontology pairs large spanning
multiple domains, show significant reduction execution times alignment processes
thereby converging faster. Corresponding alignment quality continues remain
improved small amount cases. enables application algorithms
toward aligning ontology pairs given amount time, subsets large ontology
partitions. Also, allows techniques run convergence possible contrast
predefined ad hoc number iterations, possibly leads similar improved alignments.
useful context techniques guaranteed converge.
BCD constrain alignment variables divided blocks except rule
block chosen least cycle blocks. Furthermore, may order
blocks consideration manner within cycle. Consequently, second contribution
empirical study impact different ordering partitioning schemes improvement
BCD brings alignment. addition default ordering scheme based increasing height
grouped entities, consider reversing ordering, third approach sample
1. GOMMA utilizes multiple matching strategies may iterative, partly contributed
toward performance OAEI well.

807

fiT HAYASIVAM & OSHI

blocks based probability distribution represents estimated likelihood finding large
alignment block. context partitioning, additionally consider grouping alignment
variables entities divided breadth-first search based partition. default
approach partitions one ontologies pair, consider impact partitioning both.
Performances iterative algorithms impacted differently various ways formulating
blocks ordering them. Notably, quality alignment may adversely impacted.
Surprisingly, algorithms differ ordering partitioning scheme optimizes
alignment performance. order comprehensively evaluate efficiency BCD-enhanced
optimized algorithms, contribute novel biomedical ontology alignment testbed. addition
important application domain, aligning biomedical ontologies unique challenges. selected biomedical ontologies published NCBO testbed, provides
primarily UMLS-sourced incomplete reference alignment. Thirty-two different biomedical
ontologies form 50 pairs testbed half 3,000+ named classes.
rest article organized follows. next section, briefly explain iterative ontology alignment introduce four representative iterative algorithms. Additionally,
briefly review technical approach BCD. show BCD may integrated iterative
ontology alignment algorithms Section 3. Section 4, empirically evaluate performances
BCD enhanced algorithms using comprehensive data set. Then, Section 5, explore
ways ordering blocks partitioning alignment variables. Thereafter, Section 6,
detail new biomedical ontology benchmark report performances BCD enhanced
optimized iterative techniques benchmark. discuss impact BCD along
limitations Section 7, conclude article Section 8. Appendix outlines representative algorithms modifications utilize BCD, followed details biomedical
ontology alignment testbed Appendix B.

2. Background
provide brief overview ontology alignment problem next subsection.
followed brief descriptions four algorithms representative iterative alignment
approaches. Finally, describe technique BCD general.
2.1 Overview Ontology Alignment
ontology specification knowledge pertaining domain interest formalized
entities relationships entities. Contemporary ontologies utilize description logics (Baader, Horrocks, & Sattler, 2003) Web Ontology Language (OWL) (McGuinness
& Harmelen, 2004) order facilitate publication Web. OWL allows use classes
represent entities, different types properties represent relationships, individuals include
instances.
ontology alignment problem find set correspondences two ontologies, O1
O2 . Though OWL based description logic, several alignment algorithms model ontologies
labeled graphs (with possible loss information) due presence class hierarchy
properties relate classes, order facilitate alignment. example, Falcon-AO
Optima transform OWL ontologies bipartite graph (Hayes & Gutierrez, 2004) OLA
utilizes OL-graph (Euzenat et al., 2004). Consequently, alignment problem often cast
matching problem graphs. ontology graph, O, defined as, = hV, E, Li where,
808

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

V set uniquely labeled vertices representing entities, E set edges representing
relations, set ordered 2-subsets V , L mapping edge
label. correspondence, , two entities, xa O1 O2 , consists relation,
r {=, , }, confidence, c R. However, alignment algorithms use focus
possible presence = relation (also called equivalentClass OWL) entities only.
case, alignment may represented |V1 | |V2 | matrix represents correspondence
two ontologies, O1 = hV1 , E1 , L1 O2 = hV2 , E2 , L2 i:


m11
m12 m1|V2 |
m21
m22 m2|V2 |




.
.



.

=


.
.

.




.
.

.
m|V1 |1 m|V1 |2 m|V1 ||V2 |

Note ontologies modeled graphs, rows columns concepts
O1 O2 defined description logic. assignment variable, , confidence
correspondence entities, xa V1 V2 . Consequently, could realvalued matrix, commonly known similarity matrix two ontologies. However,
confidence may binary 1 indicating correspondence, otherwise 0, due
match matrix becomes binary matrix representing alignment. Two algorithms
use maintain binary others use real .
alignment limited correspondences entities alone, may include correspondences relationship labels well. order facilitate matching relationships,
alignment techniques, including use transform edge-labeled graphs unlabeled
bipartite ones elevating edge labels first-class citizens graph. process involves
treating relationships resources thereby adding nodes graph.
2.2 Iterative Ontology Alignment
large class alignment algorithms iterative nature (Melnik et al., 2002; Euzenat et al., 2004;
Jian et al., 2005; Li et al., 2007; Doshi et al., 2009; Wang & Xu, 2009; Hanif & Aono, 2009;
Bock & Hettenhausen, 2010; Ngo & Bellahsene, 2012). Iterative algorithms utilize seed matrix,
0 , iteratively improved converges. seed matrix either input user
generated automatically often using fast string matching lexical matching.
Two types iterative techniques predominant. differ next match matrix,
, obtained previous iterations match matrix step. first type iterative
algorithms improve real-valued similarity matrix previous iteration, i1 , directly
updating it:
= U (M i1 )
(1)
where, U function updates similarities. type algorithms often converges
fixed point, , that, = U (M ). 2
second type iterative algorithms repeatedly explicitly search space match
matrices, denoted M. goal find alignment optimizes objective function,
2. Convergence predicated U , fixed point may exist techniques. However, convergence
desirable property iterative alignment algorithms; absence stop criteria often ad hoc.

809

fiAlignment Quality

HAYASIVAM & OSHI



Space Alignments

Figure 2: iterative update search jump one alignment another improving
previous one. two differ obtain next alignment iteration
qualitative metric used assessing it. alignment cannot improved
signifies convergence.

gives measure quality alignment context alignment
previous iteration. approach appropriate search space bounded
match matrix binary. Nevertheless, cardinality 2|V1 ||V2 | space could get
large. algorithms sample space reduce effective search space though scaling
large ontologies continues remain challenging. Formally,
Mi = arg max Q(M, Mi1 )

(2)



where, Mi alignment optimizes Q function iteration given best alignment
previous iteration, Mi1 . Convergence algorithms occurs iterations reach
point, , cannot improved searching alignment matrix, M,
Q(M, ) > Q(M , ). Equations 1 2 help solve multidimensional optimization problem
iteratively variables. abstractly illustrate iterative approaches Fig. 2.
Fig. 3, show abstract algorithms two types iterative approaches.
iterative update Fig. 3(a), may settle near fixed point calculating distance
pair alignment matrices (line 8) terminating iterations distance within
parameter, . 0 get closer fixed point obtain fixed point limit.
Iterative search Fig. 3(b) often requires seed map (line 3) obtain 0 , typically
generated using fast lexical matching.
Next, briefly review four ontology alignment algorithms optimize iteratively. selection algorithms based accessibility competitive performance previous
OAEI competitions, meant representative iteration-based alignment algorithms. 3
2.2.1 FALCON -AO
Falcon-AO (Jian et al., 2005) well-known automated ontology alignment system combining
output multiple components including linguistic matcher, iterative structural graph matching algorithm called GMO (Hu, Jian, Qu, & Wang, 2005), method partitioning large
ontologies focusing parts.
3. sought include YAM++ well evaluation, top performer conference track OAEI
2012 2013. However, source code freely available could access it.

810

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

TERATIVE U PDATE (O1 , O2 , )

TERATIVE EARCH (O1 , O2 )

Initialize:
1. Iteration counter 0
2. Calculate similarity
entities O1 O2 using measure
3. Populate real-valued matrix, 0 ,
initial similarity values
4. 0

Initialize:
1. Iteration counter 0
2. Generate seed map
O1 O2
3. Populate binary matrix, 0 ,
seed correspondences
4. 0

Iterate:
5.
6.
ii+1
7.
= U (M i1 )
8.
Dist(M , )
9.

10.
11. Extract alignment

Iterate:
5.
6.
ii+1
7.
Search arg max Q(M, i1 )


8.

9. 6= i1
10. Extract alignment

(a)

(b)

Figure 3: General algorithms iterative (a) update, (b) search approaches toward aligning
ontologies. distance function, Dist, line 8 (a) measure difference
two real-valued matrices.

GMO measures structural similarity ontologies modeled bipartite
graphs (Hayes & Gutierrez, 2004). Matrix GMO real-valued similarity matrix
iteratively updated (Eq. 1) updating variable, , average neighborhood
similarities stops changing significantly. GMO takes external input, typically obtained
lexical matching, seed. Equation 1 manifests GMO series matrix operations:
= G1 i1 GT2 + GT1 i1 G2

(3)

Here, G1 G2 adjacency matrices bipartite models two ontologies O1 O2 ,
respectively. first term summation, outbound neighborhood entities O1
O2 considered, second term considers inbound neighborhood. Iterations terminate
cosine similarity successive matrices, i1 , less parameter, .
iterative update algorithm manifests Falcon-AO shown Fig. 17(a) Appendix A.
2.2.2 AP PSO
MapPSO (Bock & Hettenhausen, 2010) utilizes discrete particle swarms perform optimization. K particles swarm represents valid candidate alignment, updated
iteratively. iteration, given particle(s) representing best alignment(s) swarm,
alignments particles adjusted influenced best particle.
Equation 2 manifests MapPSO two-step process consisting retaining best particle(s) (alignment(s)) replacing others improved ones influenced best alignment
previous iteration. measure quality alignment k th particle determined
811

fiT HAYASIVAM & OSHI

mean measures correspondences shown below:

Q(Mki )

=

|V
P1 | |V
P2 |

f (xa , )

a=1 =1

|V1 ||V2 |

(4)

where, correspondence Mki f represents weighted combination multiple syntactic possibly semantic similarity measures entities two ontologies. Improved
particles generated keeping aside random number best correspondences according f
particle, replacing others based correspondences previous best particle. Iterations terminate increment Q due new alignment matrix lower parameter,
. Iterative search Eq. 2 manifests MapPSO shown algorithm Fig. 18(a).
2.2.3 OWL-L ITE LIGNMENT
OWL-Lite alignment (OLA) (Euzenat et al., 2004) limited aligning ontologies expressed
OWL emphasis restricted dialect called OWL-Lite. OLA adopts bipartite
graph model ontology, distinguishes 8 types nodes classes, objects,
properties, restrictions others; 5 types edges: rdfs:subClassOf, rdf:type,
classes properties, objects property instances, owl:Restriction, properties individuals.
OLA computes similarity pair entities two ontologies weighted
aggregation similarities respective neighborhood entities. Due consideration
multiple types edges, cycles common. Consequently, computes similarities
entities solution large system linear equations, solved iteratively fixed point.
Let F(xa ) set nodes O1 , connected node xa via edge type,
F. Formally, similarity Sim(xa , ), vertex, xa O1 , vertex, O2 , defined as,
X

Sim(xa , ) =
wF
SetSim(F(xa ), F(y ))
(5)
F N (xa ,y )

,
where, N (xa , ) set edge types xa , P
participate. Weight, wF

wF = 1. Function, SetSim,
entity pair, xa , , edge type, F, normalized, i.e.,
F N (xa ,y )

evaluates similarity sets, F(xa ) F(y ), average maximal pairing.
OLA initializes real-valued similarity matrix, 0 , values based lexical attributes
only, iterations update variable, , matrix using structure two
ontologies. particular, two entities, xa type, updated using
Eq. 5, otherwise value 0. Iterative update Eq. 1 realized OLA Fig. 19(a)
Appendix A.
2.2.4 PTIMA
Optima (Doshi et al., 2009) formulates ontology alignment maximum likelihood problem,
searches match matrix, , gives maximum conditional probability observing
ontology O1 , given ontology, O2 , match matrix .
employs generalized expectation-maximization solve optimization problem which,
iteratively evaluates expected log likelihood candidate alignment picks one
maximizes it. implements Eq. 2 two-step process computing expectation followed
812

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

maximization, iterated convergence. expectation step consists evaluating
expected log likelihood candidate alignment given previous iterations alignment:
Q(M |M i1 ) =

|V1 | |V2 |
X
X

P r(y |xa , i1 ) logP r(xa |y , )i

(6)

a=1 =1

where, xa entities ontologies O1 O2 respectively, prior probability
. P r(xa |y , ) probability node xa correspondence node given
match matrix . prior probability computed as,
|V1 |

=

1 X
P r(y |xa , i1 )
|V1 |
a=1

generalized maximization involves finding matrix, Mi , improves previous one:
Mi = : Q(M |Mi1 ) Q(Mi1 |Mi1 )

(7)

show iterative alignment algorithm Optima Fig. 20(a).
Altogether, four alignment algorithms describe subsection represent broad
variety iterative update search techniques, realized different ways. facilitates broad
evaluation usefulness BCD. years, algorithms Falcon-AO, OLA Optima performed satisfactorily annual OAEI competitions, Falcon-AO Optima
demonstrating strong performances respect comparative quality generated alignment. example, Falcon-AO often ranked top 3 systems participated OAEI
competitions 2005 2010, performance continues remain benchmark
algorithms. Optima enhanced BCD (called Optima+) ranked second conference
track (F2-measure recall) 2012 edition OAEI competition (Thayasivam & Doshi,
2012b). Consequently, representative algorithms exhibit strong alignment performances.
hand, MapPSOs performance comparatively poor particle-swarm based iterative approach motivates selection representative set.
2.3 Block-Coordinate Descent
Large-scale multidimensional optimization problems maximize minimize real-valued continuously differentiable objective function, Q, N real variables. Block-coordinate descent (BCD)
(Tseng, 2001) established iterative technique gain faster convergence context
large-scale N -dimensional optimization problems. technique, within iteration, set
variables referred coordinates chosen objective function, Q, optimized
respect one coordinate blocks coordinates held fixed. application
setting, recall coordinates alignment variables match matrix, .
Let denote block coordinates, non-empty subset {1, 2, . . . , N }. Define set
blocks as, B = {S0 , S1 , . . . , SC }, set subsets representing coordinate
block constraint that, S0 S1 . . . SC = {1, 2, . . . , N }. B could single block
partition coordinates although required blocks may intersect.
define complement coordinate block, Sc , c {0, 1, . . . , C}, as, Sc = B Sc .
813

fiT HAYASIVAM & OSHI

illustrate, let domain real-valued, continuously differentiable, multidimensional function, Q,
N = 10 be, = {m1 , m2 , m3 , . . . , m10 }, element variable. may partition
set coordinates two blocks, C = 2, that, B = {S0 , S1 }. Let S0 = {m2 , m5 , m8 }
S1 = {m1 , m3 , m4 , m6 , m7 , m9 , m10 }. Finally, S0 denotes block, S1 .
BCD converges fixed point local global optimum objective function
relaxed conditions pseudoconvexity function requires function
bounded level sets (Tseng, 2001). pseudoconvex functions continue fixed points,
may non-unique optima along different coordinate directions. absence pseudoconvexity, BCD may oscillate without approaching fixed point function. Nevertheless, BCD
still converges function unique optima coordinate blocks.
order converge using BCD, must satisfy following rule, ensures
coordinate chosen sufficiently often (Tseng, 2001).
Definition 1 (Cyclic rule) exists constant, C C > 0, every block, Sc ,
chosen least ith iteration (i + 1)th iteration, i.
context cyclic rule, BCD mandate specific partitioning ordering scheme
blocks. simple way meet rule sequentially iterating block
although must continue iterating block converges fixed point.
Recently, Saha Tewari (2013) show nonasymptotic convergence rate 4 BCD
cyclic rule faster gradient descent (GC) start
point, conditions objective function, Q, Lipschitz continuous gradient (it
differentiable everywhere bounded derivative) strongly convex, Q
L
isotonic, identity function L Lipschitz constant. Starting
0
0 , let

initial map, MBCD
= MGC
BCD MGC denote alignment iteration BCD
cyclic rule GC, respectively. condition objective function, Q, must

). nonasymptotic
say, minimized, continuous isotonic, 1, Q(MBCD
) Q(MGC
convergence rate BCD cyclic rule objective functions previous properties
is, O(1/i), iteration count.

3. Integrating BCD Iterative Alignment
mentioned previously, ontology alignment may approached principled multivariable
optimization objective function, variables correspondences
entities two ontologies. Different algorithms formulate objective function differently.
objective functions often complex difficult differentiate, numerical iterative techniques
appropriate tend progress slowly. context, may speed convergence
rate using BCD describe below.
3.1 General Approach
Section 2.2, identified two types iterative ontology alignment algorithms. BCD may
integrated types. order integrate BCD iterations, match matrix,
, must first suitably partitioned blocks. course, existing algorithms may viewed
single block variables therefore trivially utilizing BCD.
4. rate convergence effective first iteration itself.

814

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

Though matrix may partitioned using one several ways, adopt approach
well supported context ontology alignment. important heuristic, proved
highly successful ontology schema alignment, matches parent entities two ontologies
respective child entities previously matched (Doan, Madhavan, Domingos, & Halevy,
2003). motivates grouping together variables, , coordinate block
xa participating correspondence belong height leading partition
. height ontology node length shortest path leaf node. Subsequently,
alignment blocks less height (containing child entities) optimized first followed
increasing height (containing parent entities). determining height, utilize
tree graph model ontology built internally respective ontology alignment
algorithm. include property nodes may differ algorithms.
Let partition coordinate blocks {MS0 , MS1 , . . . , MSC }, C height
largest class hierarchy ontology O1 . Thus, block submatrix many rows
number entities O1 height number columns equal number entities
O2 . example, correspondences leaf entities O1 entities O2 form
block, MS0 . context bipartite graph model utilized Falcon-AO Optima,
represents properties ontology vertices well therefore part ,
would included coordinate blocks.
Iterative ontology alignment integrated BCD optimizes respect single block, MSc ,
iteration keeping remaining blocks fixed. order meet cyclic rule, choose
block, MSc , iterations, = c + qC q {0, 1, 2, . . .}. point BCD applicable
types iterative alignment techniques outlined Section 2.2. Alignment algorithms
update similarity matrix iteratively Eq. 1 update current block interest,
MSc , remaining blocks carried forward is, shown below:
MSi c = USc (M i1 )
MSi = MSi1
Sc

(8)

Sc complement Sc B. Note MSi c combined MSi Sc forms
. Update function, USc , modifies U Eq. 1 update block coordinates.
Analogously, iterative alignment searches candidate alignment maximizes
objective function Eq. 2, choose block, MSc , iteration. search
reduced search space pertaining subset variables included MSc , best
candidate coordinate block. Formally,

MSi c , = arg max QS MSc , Mi1
MSc MSc
(9)
= i1
MS,




c
S,
where, MSc space alignments limited block, Sc . original objective function, Q,
modified QS provides measure quality block, MSc , given previous
best match matrix. Note previous iterations matrix, Mi1 , contains best block
interest iteration.
Performing update, USc , evaluating objective function, QS , focusing coordinate block may performed significantly reduced time compared performing
operations entire alignment matrix. may perform iterations cycle
815

fiT HAYASIVAM & OSHI

2.2e+07

Q-Value

2.1e+07
2e+07
1.9e+07
1.8e+07
1.7e+07

Optima BCD
Optima

1.6e+07
0

10

20

30

40

50

60

time (s)

Figure 4: BCD facilitates faster convergence aligning ontologies iasted sigkdd related
conference organization.

blocks, use partially updated matrices previous iteration evaluating
next block facilitates faster convergence. illustrate impact BCD iterative search
performed Optima example ontology pair Fig. 4. Alignment using BCD shows
faster convergence rate.
TERATIVE U PDATE BCD (O1 , O2 , )

TERATIVE EARCH BCD (O1 , O2 )

Initialize:
1. Iteration counter 0
2. Calculate similarity
entities O1 O2 using measure
3. Populate real-valued matrix, 0 ,
initial similarity values
4. Create partition :
{MS0 , MS1 , . . . , MSC }
5. 0

Initialize:
1. Iteration counter 0
2. Generate seed map
O1 O2
3. Populate binary matrix, 0 ,
seed correspondences
4. Create partition :
{MS0 , MS1 , . . . , MSC }
5. 0

Iterate:
6.
7.
c % (C + 1), + 1
8.
MSi c USc (M i1 )
9.
MSi MSi1 Sc
10. c = C
11.
Dist(M , )
else
12.
high value
13.
14.
15. Extract alignment

Iterate:
6.
7.
c % (C + 1), + 1

8.
Search MSi c , arg max QS MSc , Mi1
MSc MSc

i1

MS,
MS,
Sc
c = C
changed Mi 6= Mi1 ?
else
12.
changed true
13. changed
14. Extract alignment Mi

9.
10.
11.

(a)

(b)

Figure 5: General iterative algorithms Fig. 3 modified obtain, (a) iterative update enhanced
BCD, (b) iterative search enhanced BCD. update search steps line
numbers 8 9 modified update current block interest.

816

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

Algorithms Fig. 5 revise iterative update search algorithms Fig. 3 order
integrate BCD. primary differences involve creating partition alignment matrix,
(line 4), iterations sequentially process coordinate block keeping
others fixed (lines 7-9). completing cycle coordinate blocks determined
check line 10, evaluate whether new alignment matrix differs one previous
iteration, continue iterations (lines 11-13). Observe regular iterations
improving full match matrix replaced mini-iterations updating blocks.
Given general modifications brought BCD, describe manifest
four iterative alignment systems form representative set. modifications based
type iterative technique uniform within group. change core
alignment approach algorithm given input see next.
3.2 BCD Enhanced Falcon-AO
enhance Falcon-AO modifying GMO utilize BCD iterates. depicted Fig. 17(b),
begin partitioning similarity matrix used GMO C + 1 blocks based height
entities O1 part correspondences, mentioned previously. GMO
modified iteration, block similarity matrix updated blocks
remain unchanged. block, Sc , updated iteration i, Eq. 3 becomes:
MSi c = G1,Sc i1 GT2 + GT1,Sc i1 G2
MSi = MSi1 Sc

(10)

Here, G1,Sc focuses portion adjacency matrix O1 corresponds outbound
neighborhood entities participating correspondences block Sc , GT1,Sc focuses
inbound neighborhood entities Sc . Adjacency matrix, G2 , utilized before. outcome
matrix operations similarity matrix, many rows variables Sc columns
corresponding entities O2 . complete similarity matrix obtained iteration, i,
carrying forward remaining blocks unchanged, utilized next iteration.
general iterative update modified perform BCD Fig. 5(a) may realized Falcon-AO
algorithm Fig. 17(b) Appendix A.
3.3 BCD Enhanced MapPSO
may integrate BCD MapPSO ordering particles swarm based measure
quality coordinate block, Sc , particle iteration. Equation 4 modified
measure quality correspondences coordinate block Sc , k th particle
taking average:
|VP
1,c | |V
P2 |
f (xa , )
a=1 =1

QS (Mk ) =
(11)
|V1,c ||V2 |
where, V1,c denotes set entities ontology, O1 , identical height participating correspondences included block Sc . before, retain best particle(s) based measure

, remaining particles using best
improve alignment coordinate block, Mk,S
c
particle previous iteration. remaining coordinates held unchanged. Iterative search
MapPSO modified using BCD shown algorithm Fig. 18(b).
817

fiT HAYASIVAM & OSHI

3.4 BCD Enhanced OLA
explained earlier, OLA evolves similarity matrix similarity exchange pairs
neighboring entities. iteration, performs element-wise matrix update operation. OLA
enhanced BCD adopting Eq. 8. Specifically, similarity values coordinates
chosen block, Sc , updated using similarity computations (Eq. 5). remaining blocks,
MSi , kept unchanged.
c

mia

=



Sim(xa , ) types xa
, mia
Sc
0
otherwise

(12)

MSi = MSi1 Sc
3.5 BCD Enhanced Optima
mentioned previously, Optima utilizes generalized expectation-maximization iteratively
improve likelihood candidate alignments. Jeffery Alfred (1994) discuss BCD inspired expectation-maximization scheme call space alternating generalized expectationmaximization (SAGE). Intuitively, SAGE maximizes expected log likelihood block coordinates thereby limiting hidden space, instead maximizing likelihood complete
alignment. sequence block updates SAGE monotonically improves objective likelihood. regular objective function, monotonicity property ensures sequence
diverge, guarantee convergence. However, proper initialization lets SAGE converge
locally. 5 iteration, Optima enhanced using SAGE chooses block match matrix,
MSi c , expected log likelihood estimated. previous techniques, choose blocks
sequential manner blocks iterated order.
Equation 6 changes estimate expected log likelihood block candidate alignment:
|V1,c | |V2 |

QS (MSi c |M i1 ) =

XX


P r(y |xa , i1 ) logP r(xa |y , MSi c ) ,c

(13)

a=1 =1

Recall V1,c denotes set entities ontology, O1 , participating correspondences
, modified well utilize V
included Sc . Notice prior probability, ,c
1,c
calculations.
generalized maximization step involves finding match matrix block, MSi c , ,
improves previous one:
|Mi1 )
MSi c , = MSi c MSc : QS (MSi c , |Mi1 ) QS (MSi1
c ,

(14)

Here, MSi1
part Mi1 .
c ,
iteration i, best alignment matrix Mi , formed combining block MSi c , ,
i1
improves QS defined Eq. 14 remaining blocks previous iteration, MS,
,
complement Sc , unchanged.
5. Furthermore, convergence rate may improved choosing hidden space less Fisher information (Hero
& Fessler, 1993).

818

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

algorithm Fig. 20(b) shows Optima may enhanced BCD. expect significant savings time search reduced space alignments focused block,
MSc , iteration. Additionally, objective function, QS , prior operate
single coordinate block reduced time. Finally, using aligned blocks next iteration improves
convergence rate.

4. Empirical Analysis
use BCD expected make iterative approaches exhibit greater rate improvement, approach converges, reach fixed point faster, seek empirically determine:
1. amount speed obtained various alignment algorithms integrating BCD;

2. Changes quality final alignment, any, due BCD. may happen
iterations converge different local optimum.
Ontology

Named Classes
Conference domain
ekaw
74
sigkdd
49
iasted
150
cmt
36
edas
104
confOf
38
conference
60
Life Sciences
mouse anatomy
2,744
human anatomy
3,304

Properties
33
28
41
59
50
36
64
2
3

Table 1: Ontologies OAEI 2012 used evaluation. show number named classes
properties estimate size. Notice evaluation includes
large ontologies different domains well. Additionally, Thayasivam
Doshi (2012a) present evaluations four pairs 300 range bibliography
benchmark competition.
use comprehensive testbed several ontology pairs large spanning
two domains. used ontology pairs OAEI competition 2012 version testbed
evaluation (Shvaiko et al., 2012). Among OAEI tracks, focus test cases
involve real-world ontologies reference (true) alignment provided OAEI.
ontologies either acquired Web created independently
based real-world resources. includes pairs expressive ontologies conference
track structure knowledge related conference organization, anatomy track,
consists pair mid-sized ontologies life sciences describing anatomy
adult mouse human. list ontologies OAEI participating evaluation
Table 1 provide indication sizes. Additionally, Thayasivam Doshi (2012a)
evaluate Falcon-AO, MapPSO Optima BCD four pairs 300 range
819

fiT HAYASIVAM & OSHI

bibliography benchmark competition. Ontology pairs 100 200 ranges bibliography
benchmark utilized participating ontologies small 33 classes
64 properties. Subsequently, representative iterative techniques align quickly
order milliseconds leaving significant room improvement.
align ontology pairs using four representative algorithms, original forms
BCD using seed alignment, 0 , applicable. iterations run algorithm
converged measured total execution time, final recall, precision F-measure,
number iterations performed convergence. Recall measures fraction correspondences
reference alignment found algorithm precision measures fraction
found correspondences reference alignment thereby indicating fraction
false positives. F-measure represents harmonic mean recall precision.
averaged results 5 runs every ontology pair using original BCD
enhanced version algorithm. large number total runs, ran tests
two different computing platforms ensuring comparability. One Red Hat machine
Intel Xeon Core 2, processor speed 3 GHz 8GB memory (anatomy ontology
pair) one Windows 7 machine Intel Core i7, 1.6 GHz processor 4GB
memory (benchmark conference ontology pairs). comparing performance metrics
statistical significance, tested data normality used Students paired t-test exhibits
normality. Otherwise, employed Wilcoxon signed-rank test. utilized 1% level (p
0.01) deem significance.
Thayasivam Doshi (2012a) previously evaluate OLA bibliography domain
ontology pairs, discuss performance article completeness. Similar algorithms, introduction BCD OLA reduced execution time four pairs total 1.3
seconds compared original time 27.3 seconds. OLAs precision recall reduced slightly
causing F-measure reduce 1% ontology pair (302,101), alignments
pairs remained same.
ontologies conference domain vary widely size structure. shown
Fig. 6, introduction BCD four iterative techniques clearly improves speed
convergence differences algorithm significant (Students paired t-test, p
0.01). particular, observed order magnitude reduction time aligning relatively
larger ontologies iasted edas. example, pairs (conference, iasted) MapPSO
(edas, iasted) Optima showed reductions. Overall, observed total reduction 50
seconds Falcon-AO 3 minutes, 1 minute 37 seconds MapPSO, 31 seconds OLA
total 1 minute 37 seconds, 29 minutes 20 seconds Optima 4 minutes
53 seconds.
Falcon-AO shows change due BCD alignment, holding precision 25%
recall 66%. Optima shows 4% improvement average precision 56% 60% average
recall reduced 70% 68%. Nevertheless, causes 2% improvement average F-measure
64%. MapPSO BCD resulted significant improvement final precision 9%
43% average, although difference recall significant. precision recall
OLA remained unchanged.
mid-sized anatomy ontologies mouse human successfully aligned
MapPSO OLA despite use BCD. However, BCD reduced Falcon-AOs average execution time aligning single ontology pair 6.2 seconds 2.6 minutes, drastically
reduced Optimas average execution time 4.4 minutes 62.7 minutes. alignment gen820

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

60

20
Falcon-AO
Falcon-AO BCD

16
14

Time (sec)

40

Time (sec)

MapPSO
MapPSO BCD

18

50

30
20

12
10
8
6

10

4
2

0
e

er

f




(c

t,C


da

e
nc



fe



(C

(c

,i


(e

)

f)

aw

fO

,ek



t,c







n



fe



(C


nf


te



f,e

sig

ce

)

)


da


kd

,e

ig



(c


kd

t,s

)

)

)

)

e
nc

(c



fe



(a)

,i
ce

d)

,s
ce

(c

(c

w)

ka

f,e

f,e


nf



n



fe



(c

s)

da

kd

ig

n



fe



(c

d)

te



e
nc


nf



(c

(b)

10
OLA
OLA BCD

Optima
Optima BCD

1000

8

Time (sec)

Time (sec)

100
6

4

10

1

2

0

0.1
s)

d)

da

kd





(c

g
,si


e,i

nc

en

r
fe



(C

f

e
er



(C

)

ed

st

,e
ce

d)

te


-ia



da

(e

ka

(e

)

d)

ed

st

ia
w,

e)

kd

g
,si

t,



(c

(c)

n
Co

nc



fe

aw

k
(e





(c

d)

f)

fO

kd

n
,co





(c


s,i

da

(e

(d)

)

ed

st

g
,si

ka

(e

d)

)

kd

ed

st

ia
w,

sig

,
ed

st

(ia

Figure 6: Average execution time consumed by, (a) Falcon-AO, (b) MapPSO, (c) OLA, (d)
Optima original form BCD, 6 21 ontology pairs conference domain. ran algorithms pairs, selected ontology pairs
exhibited three highest three lowest differences average execution times
clarity. Note time axis (d) log scale. Notice improvements
execution time larger pairs. Specifically, 50% reduction average execution time ontology pair (edas, iasted) Falcon-AO order magnitude
reductions average run time ontology pairs (conference, iasted) MapPSO
(edas, iasted) Optima, observed.

erated Falcon-AO BCD remained unchanged 76.1% precision 80% recall
alignment Optima BCD improved precision 96% recall 74.2%.
Falcon-AO Optima automatically utilized ontology partitioning methods order align
mid-sized pairs.
summary, introduction BCD led significant reductions convergence time
four iterative algorithms several ontology pairs, extending order magnitude. Simultaneously, quality final alignments indicated F-measure improved pairs,
one pair showing reduction context Optima. However, observe change
F-measure many pairs. Therefore, empirical observations indicate BCD
significant adverse impact quality alignment.
821

fiT HAYASIVAM & OSHI

5. Optimizing BCD using Ordering Partitioning Schemes
mentioned previously, BCD overly constrain formation coordinate blocks
neither impose ordering consideration blocks, satisfying
cyclic rule. Consequently, explore ways ordering blocks partitioning
alignment variables context representative algorithms. include:
1. Ordered roots leaves: Cycle blocks decreasing height starting block
containing entities largest height.
2. Ordered similarity distribution: Obtain aggregate measure lexical similarity ontology entities participating block. normalized distribution similarities provides likelihood picking next block.
3. ontologies partitioned: block contains participating entities ontology
height.
4. Subtree-based partitioning: Transform ontology tree form block variables
participating entities part subtree predefined size.
5. Random partitioning: Form block randomly selecting alignment variables inclusion.
partitioning ordering utilized previous section intuitive, objective
discover ways may improve run time performances algorithms. subsequent experimentation, exclude MapPSO representative set due randomness
algorithm, leads comparatively high variability run times.
5.1 Ordering Blocks
order blocks processed may affect performance. updated
correspondences previous blocks used generating alignment current block.
Initially, blocks participating entities increasing height beginning leaves used
illustrated Fig. 7. ordering schemes could improve performance:
may reverse previous ordering cycling blocks decreasing height, beginning
block contains entities largest height. leads processing parent
entities first followed children.
may obtain quick approximate estimate amount alignment block
variables. One way compute aggregate measure lexical similarity
entities two ontologies participating block. Assuming similarity estimate amount alignment block, may convert estimates
probability distribution gives likelihood finding multiple correspondences
block. block process next sampled distribution. approach
requires relaxation cyclic rule particular block guaranteed selected. regard, expectation selecting block sufficient obtain asymptotic
convergence BCD (Nesterov, 2012).
822

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

role
agent

data

worker_role
sample

reagent_role

researcher

drug

drug_role
Specimen
O2
drug

m11

m12

m13

m14

m15

agent

m21

m22

m23

m24

m25

sample

m31

m32

m33

m34

m35

researcher

m41

m42

m43

m44

m45

m51

m52

m53

m54

m55

O1

data

Figure 7: Presence absence correspondences entities two ontologies represented
match matrix. Concepts drug, sample, researcher leaves correspondences may grouped block (highlighted). may process block
first followed block containing data agent. Alternately, may reverse
ordering optimizing blocks.

compare performances alternate ordering schemes initial 21 ontology pairs conference domain. results reversing order original scheme
shown Fig. 8. Clearly, original ordering allows three BCD-enhanced approaches
converge faster general. Optimas average recall across pairs improved slightly
68% 70%, average precision reduced 4% final 56%. Falcon-AOs average F-measure
improved insignificantly overall expense 40 seconds run time. Reversing order
impact precision recall OLA. results insightful reinforce
usefulness alignment heuristic motivating original ordering scheme.
second alternate ordering scheme involves determining aggregate lexical similarity entities participating block. distribution similarities normalized next
block consider sampled distribution. Notice Fig. 9 Falcon-AO OLA
demonstrate significant increases convergence time (p 0.01) compared utilizing BCD
initial ordering scheme; hand, overall time reduces Optima orders
magnitude pairs containing larger ontologies edas iasted.
select 6 pairs, exhibit highest lowest differences average execution times show
Fig. 9. Falcon-AOs precision recall show significant change F-measure remains
unchanged. OLA loses precision recall similarity distribution scheme. precision across pairs went 13% 37% along 24% drop recall 58% leading
drop F-measure 19%. However, Optimas F-measure remains largely unaffected.
Recall Falcon-AO OLA perform iterative updates Optima conducts
iterative search. sampled blocks undergo updates iterative update algorithms, search
algorithms may improve blocks low similarity. Consequently, blocks high
similarity sampled often repeatedly improved. results quicker convergence
823

fiT HAYASIVAM & OSHI

Falcon-AO BCD
Falcon-AO BCD (ordered roots leaves)

50

OLA BCD
OLA BCD (ordered roots leaves)

14
12

40

Time (sec)

Time (sec)

10
30

20

8
6
4

10
2
0

0

)

(

e
nc



fe



(C

f




e
nc




,ia

nc

(c

(

n
Co

t,



(c

(a)
1000

e
er

f




ed

s)

e)

d)

te


f,e

f




fe



(C

k
sig

,

c

n


)



dd


e,e

fe

(C

)

)



,c

t,

cm

)



dd

k
sig

da

)


f

n
,co





(c

,e
ce

en



r
fe

(C



(C

(b)

d)

kd

ig

en

r
fe

d)

te



,i
ce

(c

f


,s


)

ed

st

,ia


da

(e

Optima BCD
Optima BCD (ordered roots leaves)

Time (sec)

100

10

1

)

aw

,ek



fe



(C

e
nc

n



fe

n
Co

d)

te



,i
ce

f



(c

(

d)

te



,i


ka

(e

)

dd

si
d,

e

st

(ia

dd

gk

gk

si
w,

ka

(e

)

)

ed

st

ia
w,

(c)

Figure 8: Average execution times of, (a) Falcon-AO, (b) OLA, (c) Optima, BCD
uses initial ordering scheme BCD ordering blocks root(s) leaves,
6 21 ontology pairs conference domain. ran algorithms
pairs, selected ontology pairs exhibited highest lowest differences average execution times. alternate ordering increases run times
convergence observe significant improvements F-measures.

different peculiar local optima blocks high similarity converged
others predominantly remain unchanged. Thus, alignment quality remains largely unaffected
convergence time reduced, see context Optima.
5.2 Partitioning Alignment Variables
BCD impose particular way grouping variables, well-founded partitioning schemes may yield significant improvements:
extension initial scheme (Fig. 10(a)) would group variables representing
correspondences participating entities O1 O2
height relation leaf entity ontology, illustrate Fig. 10(b). Note
824

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

20

Falcon-AO BCD
Falcon-AO BCD (ordered similarity distribution)

60
50

15

Time (sec)

40

Time (sec)

OLA BCD
OLA BCD (ordered similarity distribution)

30

10

20
5
10
0

0

)

)


fe



(C

fO



(c

aw

k
sig

f,

nc

)

dd


e,e

t,



(c

)



dd

k
sig

da

(e

d)


,ia



k
sig

(e

e
nf



t,C

(a)
1000





nf


t,c



(c



(c

)

)

nc



w,

ka



(e

e)

)

dd

te

k
s,e

,ed

e
nc



fe



(

(b)

)

fO



(c

dd

gk


f,s

n



fe

n
Co

(C

d)

te



,i
ce

d)

te



,i




(e

Optima BCD
Optima BCD (ordered similarity distribution)

Time (sec)

100

10

1

0.1

(C



r
fe

d)

,e
ce

kd

ig
f,s

en

gk

,si





(c

s)

da

)
dd



(c

da

(e

(c)

)

)

)

ed

st


s,i

fO

aw

da

(e

dd

gk

k
s,e

si
w,

ka

(e

Figure 9: Average execution time consumed by, (a) Falcon-AO, (b) OLA (c) Optima
BCD utilizing previous ordering scheme BCD ordering blocks similarity distribution, 6 21 ontology pairs conference domain. Although
ran algorithms pairs, show ontology pairs exhibited highest lowest differences average execution times. new ordering helped Optima
cut total execution time 262 seconds finding 1 correct
correspondence 6 false positives across pairs.

entity heights may differ two ontologies. based observation
generalization-specialization hierarchy concepts pertaining subtopic usually
invariant across ontologies.
sophisticated scheme founded observation temporarily transform
ontology, modeled labeled graph, tree. may utilize graph
search technique handles repeated nodes, breadth-first search graphs (Russell
& Norvig, 2010), obtain tree. ontology isolated graphs leading separate
trees, use owl:thing node combine single tree. Subsequently, group
variables participating entities ontology part subtree
825

fiT HAYASIVAM & OSHI






mff mfi


mff mfi





























mff mff
mffff mff mfffi

mff mff
mffff mff mfffi




















mff mfi







mff mff
mffff mff mfffi




Figure 10: Matrices representing intermediate alignment entities O1 O2 . (a)
Identically shaded rows form block variables corresponding entities
O1 height. (b) Identically shaded rows columns correspond
entities heights O1 O2 , respectively. Variables overlapping regions
form block. (c) Entities corresponding identically shaded rows columns form
subtrees. fourth approach randomly select variables inclusion block.

predefined size (Fig. 10(c)). may discard ontology trees forming blocks.
previous schemes form blocks differing numbers variables, scheme forms
one block number variables limiting subtree size.
simple point comparison would scheme randomly selects alignment variables
inclusion block. clear way determine many variables include
block, randomly inserted variables 5 blocks.
Based findings previous subsection, blocks ordered based height
participating entities subtrees root nodes Falcon-AO OLA. begin blocks
smaller height proceed increasing height. Optima, sample blocks
using distribution based lexical similarity participating entities.
illustrated Fig. 11, partitioning ontologies helped Optima significantly saves execution times (p 0.01). pairs involving larger ontologies,
reduced order magnitude. Furthermore, Optima gains precision
pairs 6% 1% reduction recall resulting 3% gain F-measure 67%. OLA saves
execution time well relatively less Optima slight improvement alignment
quality. hand, Falcon-AO experienced increase total execution time
pairs. Optimas improved performance attributed blocks smaller allowing
comprehensive coverage search space less time. hand, iterative update
techniques Falcon-AO show improvement smaller blocks may
sign overpartitioning.
Figure 12 illustrates impact subtree-based partitioning three algorithms. Falcon-AO
exhibited significant reduction execution times (p < 0.01) simultaneously improvement
precision F-measure pairs 3%. Similar previous optimization, OLAs
execution time reduces significantly well (p < 0.01) keeping output unchanged.
826

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

12

Falcon-AO BCD
Falcon-AO BCD (both ontologies partitioned)

50

OLA BCD
OLA BCD (both ontologies partitioned)

10
40

Time (sec)

Time (sec)

8
30

20

6

4

10

2

0

0




e,e



t,s

cm

(

c
en

r

fe



(C

d)

)

d)


gk

,si

f
fO



(c

w)


gk

(


ias

d)


da

e)


gk

si

,




ed

)

ed


,ek

,
aw

k

(e

(e

1000

kd

e,s

c
en

r

fe



(C

kd

ig

ig

t,s


(c

(a)

d)

d)

da

t,e



(c

t,



(c

s)

nc



fe

n
Co

(

d)

d)

te



s,i


ed

kd

sig

w,


ek

(

(b)

Optima BCD
Optima BCD (both ontologies partitioned)

Time (sec)

100

10

1

0.1
f)

)

(

aw

,ed

fe

n


,ek

(c

f



ed

d)

te



s,i



ce



(C

)



fO



t,c

cm

(

(

d)

d)

te

ias

w,


ek

kd

ig

,s


te



(ia

(c)

Figure 11: Execution times consumed by, (a) Falcon-AO, (b) OLA, (c) Optima BCD
uses blocks obtained partitioning single ontology BCD utilizes
partitions ontologies, 6 21 ontology pairs conference domain.
Although ran algorithms pairs, selected ontology pairs exhibited highest lowest differences execution times. Optimas total execution
time pairs reduced 274 seconds. False positive correspondences reduced
37 expense 3 correct correspondences. OLA cut 10 seconds total
execution time 2 incorrect correspondences.

hand, partitioning technique reduces efficiency Optima small reduction
alignment quality well. Falcon-AOs GMO employs approach relies inbound
outbound neighbors, benefited using blocks whose participating entities form subtrees.
structure-based matching Optima limited looking correspondences
immediate children, including larger subtrees blocks may benefit Optima.
Finally, Fig. 13 explore impact randomly partitioning variables blocks
three alignment algorithms. Falcon-AO OLA showed significant increases execution time (p < 0.01) conference pairs. Falcon-AOs precision improved less
1%, recall dropped 2% overall reduction F-measure 1%. OLA exhibited minor increase precision 0.2% recall remained unchanged resulting increase
F-measure 0.2%. Optima demonstrated mixed results shown Fig. 13(c) execution
827

fiT HAYASIVAM & OSHI

35

12

Falcon-AO BCD
Falcon-AO BCD (subtree based partitioning)

30

OLA BCD
OLA BCD (subtree based partitioning)

10

25

Time (sec)

Time (sec)

8
20
15

6

4
10
2

5
0

0
f)

f)

fO

fO





(c


e,i

ce

n



fe



(C

nc



fe



(C

d)

)

aw

te

n
,co

n
,co

da

(e

d)

te

k
s,e


s,i

da

F)

d)

te


,ia

(e

f,e

t,c



k

(e

(c

d)

w)

ka

fO



aw


nf

f



(c



(c

(a)

)

aw

kd

,ek

ig

,s



da

(e

(e

)

d)

ed

st

,ia


da

kd

ig

,s




(e

(b)
1000

Optima BCD
Optima BCD (subtree based partitioning)

Time (sec)

100

10

1



(c

f)

d)

fO

te



t,i

n



fe



(C



n



fe



(C

,i
ce

d)

te



,c
ce



(e

d)

d)

te



,i


kd



(e

,
aw

d)

te

ias

ig

,s


k

(e

(c)

Figure 12: Execution times consumed by, (a) Falcon-AO, (b) OLA, (c) Optima, BCD
uses default partitioning approach BCD uses subtree-based partitioning, 6 21 ontology pairs conference domain. ran algorithms
pairs selected ontology pairs exhibited highest lowest
differences execution times. total execution time Falcon-AO complete
conference track reduces 8 sec along reduction 71 false positives. OLA
saves 1.5 sec total execution time keeping output alignments unchanged.
However, Optima consumes 192 seconds more.

time increasing pairs reducing others. whole, observe statistically significant difference execution times. Furthermore, BCD due random partitioning
improve beyond seed alignment many pairs, overall decrease F-measure
1% across pairs.
summary, side-by-side comparison various block ordering partitioning techniques
discussed previously presented Fig. 14 three alignment algorithms single ontology
pair, (edas, iasted). include random partitioning alignment performance terms
recall precision poor many ontology pairs making illsuited candidate.
Differences run time performance algorithms (edas, iasted) representative
828

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

40

30
Falcon-AO BCD
Falcon-AO BCD (randomly partitioned)

35

OLA BCD
OLA BCD (randomly partitioned)
25
20

Time (sec)

Time (sec)

30
25
20
15

15
10

10
5

5
0
nc



fe



(C

0

)



nf


e,c

)




e,e



fe



(C

)

w)

nc


,ek

da

g
,si



da

(e

(e

n
,co





(c

w

ka

(e

(a)

g
,si

d)

w)

fO

kd

kd

ias

s,



da

(e


te

f)

d)

d)





(c

kd

ig


,ek

nf

,s




(c



(e

d)

d)

te



,i


kd



(e

,
aw

d)

te

ias

ig

,s


k

(e

(b)

10

Time (sec)

Optima BCD
Optima BCD (randomly partitioned)

1

0.1

f)

en

r
fe



(C

da

,e
ce

en

r
fe

(C



d)

s)

fO



,c
ce

kd

ig

,s
ce

en

r
fe



(C



(c

(c)

)

ed

st

,ia

f
fO

(e

)

ed

st

,ia


da

)

ed

st

,ia

w
ka

(e

Figure 13: Execution times consumed by, (a) Falcon-AO, (b) OLA, (c) Optima, BCD
uses default partitioning approach BCD uses random partitioning.
show 6 21 ontology pairs conference domain. ran algorithms
pairs selected ontology pairs exhibited highest lowest
differences execution times. total execution time Falcon-AO complete
conference track increases 19.5 secs due random partitioning. OLA takes
additional 28 secs total execution time Optima saves 8.5 seconds
pairs expense alignment quality.

performances larger data set general. particular, Falcon-AOs run time reduces
using subtree-based partitioning obtain blocks. OLAs run time reduces
ontologies pair partitioned using entity height, Optima benefits ordering
blocks based preliminary measure similarity participating entities forming
blocks partitioning ontologies.

6. Aligning Large Biomedical Ontologies
Ontologies becoming increasingly critical life sciences (Bodenreider & Stevens, 2006;
Lambrix, Tan, Jakoniene, & Stromback, 2007) multiple repositories Bio2RDF (Belleau et al., 2008), OBO Foundry (Smith et al., 2007) NCBOs BioPortal (Musen et al., 2012)
829

fiT HAYASIVAM & OSHI

Time (sec)

100

default
ordered roots leaves
ordered similarity distribution
ontologies partitioned
subtree based partitioning

10

1

Falcon-AO BCD

OLA BCD

Optima BCD

Figure 14: side-by-side comparison performances three iterative algorithms using
various block ordering formation techniques. single moderately large ontology
pair, (edas, iasted), aligned. default represents iterative alignment algorithm BCD blocks ordered based height participating
entities leaves root single ontology partitioned form blocks.
Differences run times indicative performance general.

publishing growing number biomedical ontologies different domains anatomy
molecular biology. example, BioPortal hosts 370 ontologies whose domains fall
within life sciences. ontologies primarily used annotate biomedical data
literature order facilitate improved information exchange. growth ontology usage,
reconciliation overlap scope gains importance.
Evaluation general ontology alignment algorithms benefited immensely standardsetting benchmark OAEI (Shvaiko et al., 2012). addition multiple tracks real-world test
cases, competition emphasizes benchmark comparison tracks use test pairs modifications single ontology pair order systematically identify strengths weaknesses
alignment algorithms. One tracks real-world ontology pairs involves aligning
ontology adult mouse anatomy human anatomy portion NCI thesaurus (Golbeck
et al., 2003), another seeks align foundational model anatomy (FMA), SNOMED CT
national cancer institute thesaurus (NCI). However, aligning biomedical ontologies poses
unique challenges. particular,
1. Entity names often identification numbers instead descriptive names. Hence, alignment algorithm must rely labels descriptions associated entities,
expressed differently using different formats.
2. Although annotations using entities ontologies gene ontology (Ashburner
et al., 2000) growing rapidly, ontologies continue remain sparse. Consequently, may overly rely entity instances aligning biomedical ontologies.
3. Finally, biomedical ontologies tend large many including thousand entities.
motivates alignment approaches depend less brute-force steps, compels
assigning high importance issues related efficiency scalability.
Given specific challenges, combed 370 ontologies hosted NCBO
(Musen et al., 2012) OBO Foundry (Smith et al., 2007), isolated community benchmark
830

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

50 different biomedical ontology pairs. Thirty-two ontologies sizes ranging hundred
tens thousands entities constitute pairs. provide list ontologies participating
benchmark ontology pairs Appendix B. new benchmark guides comparative
evaluation alignment algorithms context key application domain biomedicine.
primary criteria including pair benchmark expectation sufficient
amount correspondences ontologies pair, determined NCBOs BioPortal. particular, calculated ratio correspondences posted BioPortal
ontology pair largest number possible correspondences could exist. selected
50 pairs largest ratio. Existing correspondences serve reference alignment.
include maps UMLS Metathesaurus crowd sourced. Nevertheless, analysis reveals existing correspondences constitute small fraction
total alignment possible two ontologies.
sought align pairs new biomedical ontology alignment testbed using BCDenhanced representative algorithms. obtained alignments evaluated using existing correspondences previously present BioPortal; reference alignments pairs likely
incomplete. secondary objective discover new correspondences ontologies
submit NCBOs BioPortal curation.
Informed experimentation described Section 5, blocks BCD Falcon-AO
formed using subtree-based partitioning one ontology ordered created. Blocks
OLA formed similarly though ontologies partitioned blocks Optima
formed partitioning ontologies basis height entities ordered
leaves root. execution times F-measure pairs successfully aligned within
arbitrary window 5 hours per pair BCD-enhanced algorithms shown Figs. 15
16. point BCD speeds algorithms explicitly promote scalability.
words, reduces time convergence provide way manage
memory order align large ontologies.
OLA BCD failed align single pair within time window. Falcon-AO enhanced
BCD without aligned 47 pairs within time window. Falcon-AO unable parse
one ontologies remaining 3 pairs due results available these.
Falcon-AO BCD aligned pairs taking 3.7 hours less time total original
consumed 7.5 hours pairs. show time pair Fig. 15(a). closer
look reveals Falcon-AO BCD exhibited time greater default 9 47 pairs.
Time pairs exceed 16 seconds due performing
subtree-based partitioning variables forming blocks BCD. corresponding Fmeasure change significantly due use BCD pairs F-measure
pairs 54.7%.
Optima enhanced BCD aligned 42 pairs within time window compared 30 pairs
without BCD. Optima unable parse one ontologies remaining 8 pairs due
results available these. Focusing 30 pairs aligned within
time window (Fig. 16), Optima BCD aligned pairs 2.3 hours taking 11.4 hours
less time compared original algorithm. Simultaneously, found additional 269 correct
correspondences across pairs increase F-measure 2%.
LogMap, fast non-iterative algorithm targets biomedical ontologies returned alignments
50 pairs 20 minutes total time. produced precision recall 23.5% 39.5%
(F-measure = 29.5%), respectively pairs. significantly less
831

fiT HAYASIVAM & OSHI

10000

Falcon-AO
Falcon-AO BCD

Time (sec)

1000

100

10

1

)
N)
)
N)
N) )
L) )
N) )
)

A) GA
N) )
)
)
) AA A)
)
T) A) A) O) RO A)
I) DA EL DA
)
)
)
BI DA P )
)
)
DA ER
)
A) )
)
RO
)
A) )
)
RO DA
G
A)
RO
)
DA O) ,OB EH IFC ,EH V) HD FA AO AO V) HD FA AO EH O) HO HD HD B-B HD GM AR N, HD ,MA ,EV ,EH ,UB E) V) ,BT ,EV ,PO ,PO VM ,EH O-C DS EV HD
EH ,TA SP S,
,N O,E O,E O,Z O,X O,T O,U ,E ,E ,Z
,T
,U O, ,BT ,V A,E A,E O,F O,E O,T O,C O,U ERO ,E G
G
G
G ,PA ,E ,U BT BT CV CV O,E D,C RO ,GR ,PS A, A,E
,

P
















F

F







IL
IL





B
E











H
H
H
H



H
FA FA B


B
B
B
B
(Z (Z (F (T (S (B (A (A (A (A (A (A (X (X (X (X (X (P (P (T (B (B (H (H (H (H (H (U (A (V (V (V (V (P (B (B (F (F (F (F (M (M (C (P (P (E (M

Ontology pair

(a)
1

Falcon-AO
Falcon-AO BCD

F-measure

0.8

0.6

0.4

0.2

0

)
N)
) )
)
N)
L) )
N) )
)

A) GA
N) )
)
)
) AA A) T) A) A) O) RON ) )
)
I) DA EL DA
)
)
BI DA P )
)
)
DA ER
A) )
)
RO
)
A) )
)
RO DA
G

A)
RO )
)
DA O) ,OB EH IFC EH V) HD FA AO AO V) HD FA AO EH O) HO HD HD B-B HD GM AR N, HD EV EH UB E) V) BT EV ,PO ,PO VM EH O-C DS EV HD
EH ,TA SP S, ,N O, ,E ,E ,Z ,X ,T ,U ,E ,E ,Z ,T ,U O, ,BT ,V A,E A,E ,F ,E ,T ,C ,U RO ,E G, G, G, G, ,PA ,E ,U BT, BT, CV CV ,E D,C O, ,GR ,PS A, ,E
,
FA B- AD AO SP AO AO AO AO AO AO AO AO AO AO AO AO IL IL AO AO AO AO AO EO HO HO HO HO B- B- B- B- FO AR HD FA
F
(Z (Z (F (T (S (B (A (A (A (A (A (A (X (X (X (X (X (P (P (T (B (B (H (H (H (H (H (U (A (V (V (V (V (P (B (B (F (F (F (F (M (M (C (P (P (E (M

Ontology pair

(b)

Figure 15: (a) Time consumed, (b) F-measure attained original Falcon-AO
optimized BCD 47 pairs large biomedical ontology testbed, respectively.
Note time axis log scale. Ontology names NCBO abbreviations.
alignment performed Red Hat machine Intel Xeon Core 2, processor speed
3 GHz 8GB memory.

Falcon-AO, exhibited precision recall 80.9% 41.3% respectively, pairs
aligned. Optima BCD exhibited precision 76.1% recall 35.8% overall
F-measure 48.7%. recall less LogMap, F-measure significantly better
due improved precision.
Finally, submitted 15 new correspondences entities pairs testbed
NCBO curation publication. nontrivial correspondences identified algorithms, present reference alignments appropriately validated us.
832

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

100000

Optima
Optima BCD

Time (sec)

10000

1000

100

10

N)
N)
N) A)
L)
N) )
N) )
)
)
)
A)
)
)
)
I)
)
A)
RO
)
I)
EL DA
)
)
)
)
A) )
)
RO
A) )
)
RO DA
G DA DA -BT DA) RO ERO ,M DA) A) V)
RO V)
DA
EB
PO
HD UBE )
DA O) ,OB EH IFC ,EH V)
N H
H

B
HD FA AO AO V)
H
VM H
HD FA AO EH O)
E
B
G
,B
HO H
V)
,P
,
,E
,M
,E
,E
,

EH ,TA SP
S, O,N PO O,E O,E O,Z O,X O,T O,U O,E O,E O,Z O,T O,U TO, ,BT O,V A,E A,E O,F O,E O,T O,C O,U ER O,E OG OG OG OG ,PA O,E O,U -BT -BT -CV -CV O,E D,C
,

FA ZFA FB TA SA BS AA AA AA AA AA AA XA XA XA XA XA PA PO TA BIL BIL HA HA HA HA HA UB AE VH VH VH VH PO BT BT FB FB FB FB MF MO
(Z
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(
(

Ontology pair

(a)
Optima
Optima BCD

1

F-measure

0.8

0.6

0.4

0.2

0

N)
) )
)
N)
)

L) )
N) )
N) )
)
)
) AA A) T) A) A) O) RON ) )
)
I) DA EL DA
)
)
BI
)
)
DA ER
A) )
RO
)
)
A) )
RO DA

)
G
RO )
DA O) ,OB EH IFC ,EH V) HD FA AO AO V) HD FA AO EH O) HO HD HD B-B HD GM AR N, HD ,MA ,EV ,EH ,UB E) V) ,BT ,EV ,PO ,PO VM
H


,
,
E
E
E
E
Z
X

U
F
E

C
U
N
E
E
Z

U

E

V
,E A,T -SP DS O, PO O, O, O, O, O, O, O, O, O, O, O, ,B O, A, A, O, O, O, O, O, ER O, OG OG OG OG ,P O,E O,U -BT -BT -CV -CV O,E D,C

L
L
F





B E H H H H
B B B B

F
F
B
(Z (Z (F (T (S (B (A (A (A (A (A (A (X (X (X (X (X (P (P (T (B (B (H (H (H (H (H (U (A (V (V (V (V (P (B (B (F (F (F (F (M (M

Ontology pair

(b)

Figure 16: (a) Time consumed, (b) F-measure attained original Optima
optimized BCD, 42 pairs biomedical ontology testbed, respectively. Note
time axis log scale.

7. Discussion
Performances iterative update search techniques impacted differently various ways
formulating blocks order processing them. Importantly, quality alignment
may adversely impacted. Nevertheless, approach grouping alignment variables blocks
based height participating entities ontologies motivated recognized
heuristic leads competitive performance observed negative impact precision
recall alignments. However, different ontology pairs may lead differing number
blocks various sizes: particular, tall ontologies exhibit deep class hierarchy result
blocks short ontologies.
833

fiT HAYASIVAM & OSHI

Given BCD-based enhancement optimization, well algorithms compare
terms execution time alignment quality state art? order answer
question, compare performances 18 algorithms participated conference
track OAEI 2012 (Shvaiko et al., 2012). Among these, iterative alignment algorithm, YAM++,
produced best F-measure 21 pairs followed LogMap utilize optimization CODI, Optima+, Optima augmented BCD. latter approaches
produced F-measures tied within 2% other. Optima+ ranked second
YAM++ alignment evaluated using F2 measure due comparatively high recall.
OAEI reports run time larger task aligning 120 conference ontology pairs. task,
YAM++ consumed 5 hours pairs, LogMap took slightly less 4
minutes Optima+ consumed 22 minutes. Falcon-AO OLA participate
OAEI 2012, ran separately 120 pairs machines, whose configurations
comparable utilized OAEI. Falcon-AO OLA enhanced BCD consumed 11
5 minutes respectively although alignment quality lower Optima+. would
place three representative algorithms top two-thirds among 18 participated
conference track OAEI terms run time OLA top half, Optima+ OLA
group 1 respect alignment quality. 6 7 competing algorithms completed evaluation
faster, 5 exhibit alignment quality substantially worse representative
algorithms. absence BCD, representative algorithms would ranked among
bottom third exceeded 5 hour cut off. Performance anatomy pair due BCD would
place Falcon-AO Optima+ top half 14 algorithms participated terms
run time F-measure. Previously, Optima without BCD ranked bottom quarter.
reductions convergence time observed increases precision alignment
due BCD is, part, optimized correspondences found previous coordinate block, influence selection correspondences current coordinate block.
Furthermore, mentioned previously, limiting randomly generated correspondences
MapPSO block instead whole ontology makes search guided. representative effect BCD iterative search general. Focusing single block
significantly reduces space alignments iterative techniques must search thereby
arriving optimum quicker. However, greater number smaller optimization subproblems must solved results imply smaller optimization problem offsets expense.
Given integrating BCD iterative algorithms converged different values Q
function iterative search different match matrices, , iterative update,
often produced better quality alignments, infer original algorithms converging
local optima instead global optima, using BCD likely resulted convergence
(better) local optima well. insight new (Euzenat et al., 2004), significant
reinforces presence local optima alignment space algorithms.
may limit efficacy iterative alignment techniques.
Falcon-AO Optima+s comparatively better performance measured using F-measure
fast, non-iterative algorithm, LogMap, biomedical ontology alignment testbed indicates
iterative techniques continue among best quality obtained alignment including large ontology pairs. motivates ways making efficient, BCD,
scalable.
6. Note MapPSO BCD would placed bottom third.

834

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

8. Conclusion Future Work
techniques scaling automated alignment large ontologies previously proposed, presented novel approach based BCD speed alignment process
important class algorithms. algorithms iterative anytime demonstrating high quality alignments often consuming time non-iterative algorithms. demonstrated
technique context four different iterative algorithms evaluated impact
total time execution final alignments precision recall. reported significant
reductions total execution times algorithms enhanced using BCD. reductions
noticeable larger ontology pairs. Often algorithms converged lesser number
iterations. Simultaneously, utilizing default scheme grouping alignment variables
participating entities one ontology block height optimizing blocks order increasing height, observe improvement precision
alignments generated algorithms significant change recall.
possible improve run time performance default partitioning
ordering scheme utilizing schemes, note may negatively impact
alignment quality. Subsequently, default scheme generally recommended existing new
iterative alignment techniques seek utilize BCD.
ability improve quickly allows iterative alignment algorithm run convergence
possible, contrast common practice terminating alignment process arbitrary
number iterations. predefining common bound number iterations difficult,
speeding convergence becomes vital. observe BCD promote scalability
large ontologies.
Finally, demonstrated benefits BCD toward aligning pairs new biomedical ontology testbed. Due large number ontologies biomedicine, critical need
ontology alignment vast domain. future work continue focus methods
would allow general principled alignment approaches Falcon-AO Optima perform better testbed producing better quality alignment pairs less time,
aligning large biomedical ontologies popular use SNOMED-CT NCI.
Consequently, believe community benchmark could potentially drive future research
toward pragmatic ontology alignment.

9. Acknowledgment
research supported part grant number R01HL087795 National Heart, Lung,
Blood Institute. content solely responsibility authors necessarily
represent official views National Heart, Lung, Blood Institute National Institutes Health. authors thank Todd Minning Rick Tarleton Center Tropical
Emerging Diseases University Georgia Amit Sheth Wright State University
useful discussions. authors thank anonymous reviewers feedback benefited
article greatly.

835

fiT HAYASIVAM & OSHI

Appendix A. Representative Iterative Algorithms Enhanced BCD
chose four representative iterative alignment algorithms, Falcon-AO, MapPSO, OLA Optima order illustrate iterative algorithms could enhanced BCD. section,
present alignment algorithm original form enhanced BCD, facilitate direct
comparison quick identification needed modifications.
FALCON -AO/GMO-BCD (O1 , O2 , )

FALCON -AO/GMO (O1 , O2 , )
Initialize:
1. Iteration counter 0
2. G1 AdjacencyMatrix (O1 )
3. G2 AdjacencyMatrix (O2 )
4. 0
5.
1
6. 0
Iterate:
7.
8.
ii+1
9.
G1 i1 GT2 + GT1 i1 G2
10. CosineSim(M , )
11.
12.
13. Extract alignment

Initialize:
1. Iteration counter 0
2. G1 AdjacencyMatrix (O1 )
3. G2 AdjacencyMatrix (O2 )
4. 0
5.
1
6. Create partition :
{MS0 , MS1 , . . . , MSC }
7. 0
Iterate:
8.
9.
c % (C + 1), + 1
10. MSi c G1,Sc i1 GT2 + GT1,Sc i1 G2
11. MSi MSi1 Sc
12. c = C
13.
CosineSim(M , )
else
14.
high value
15.
16.
17. Extract alignment

Figure 17: (a) Iterative update structural matcher, GMO, Falcon-AO. (b) Iterative update
GMO modified perform BCD.

Fig. 17, show iterative algorithm GMO component Falcon-AO
enhancement due use BCD. AdjacencyMatrix (O1 ) (line 2 Fig. 17(a)) produces binary
matrix, G1 , size |V1 | |V1 |, value 1 ith row j th column represents
edge vertex indexed vertex indexed j bipartite graph model O1 ;
analogously AdjacencyMatrix (O2 ). update distance functions implemented
shown lines 9 10, respectively, algorithm. particular, cosine similarity computes
cosine two matrices consecutive iterations serialized vectors. Notice
iteration Fig. 17(b), block variables, MSi c , updated using Eq. 10 holding
remaining blocks fixed (lines 10 11). yields partially updated complete alignment
matrix reduced time, utilized next iteration.
MapPSOs iterative search algorithm performs particle swarm optimization modification due BCD shown Fig. 18. algorithm takes input number particles, K,
836

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

AP PSO-BCD (O1 , O2 , K, )
Initialize:
1. Iteration counter 0
2. Generate seed map
O1 O2
3. Populate binary matrix, 0 ,
seed correspondences
4. Generate K particles using
0
seed 0 : P = {M10 , M20 , . . . , MK
}
5. Create partition :
{MS0 , MS1 , . . . , MSC }
6. Search M0 arg max Q(Mk0 )

AP PSO (O1 , O2 , K, )
Initialize:
1. Iteration counter 0
2. Generate seed map O1 O2
3. Populate binary matrix, 0 ,
seed correspondences
4. Generate K particles using
0
seed 0 : P = {M10 , M20 , . . . , MK
}
0
0
5. Search arg max Q(Mk )

Mk0 P

Mk0 P

Iterate:
7.
8.
c % (C + 1), + 1
9.
k 1, 2, . . . , K


, Mi1 )
U pdateBlock(Mk,S
10.
Mk,S
c
c
i1

11.
Mk,
Mk,S Sc

12. Search Mi arg max QS (Mki )

Iterate:
6.
7.
ii+1
8.
k 1, 2, . . . , K
9.
Mki U pdateP article(Mki , Mi1 )
10. Search Mi arg max Q(Mki )
Mki P

Mki P

11. |Q(Mi ) Q(Mi1 )|
12. Extract alignment Mi

c = C
changed |Q(Mi ) Q(Mi1 )| ?
else
15.
changed true
16. changed
17. Extract alignment Mi

13.
14.

(a)

(b)

Figure 18: (a) Iterative search MapPSO. Objective function, Q, given Eq. 4. (b)
MapPSOs particle swarm based iterative algorithm enhanced BCD.

threshold, , addition two ontologies aligned. iteratively searches
alignment unable find one improves previous best alignment
equal . objective function, Q, modified QS Fig. 18(b), calculated
coordinate block interest. coordinate block particle, k, updated keeping
remaining blocks unchanged (lines 10 11), followed searching best particle based
measure alignment block (line 12). steps may performed reduced
time. Additionally, randomly generated mappings MapPSO limited block instead
whole ontology, due search becomes guided.
OLAs iterative algorithm shown Fig. 19 (a), enhancement due use BCD
Fig. 19(b). distance function line 11 measures similarity updated alignment
matrix previous iteration. iterations terminate distance falls
parameter, . Observe cycle blocks BCD enhanced algorithm
Fig. 19 (b) coordinates belonging current block, MSi c , updated lines 8-11.
837

fiT HAYASIVAM & OSHI

OLA-BCD (O1 , O2 , )

OLA (O1 , O2 , )
Initialize:
1. Iteration counter 0
2. Fill real-valued matrix, 0 , lexical similarity
3. 0
Iterate:
4.
5. + 1
6.
7. types x

P

wF
SetSim(F(xa ), F(y ))
8.

F N (xa ,y )

9.
10.
11.
12.
13.
14.

else
0
Dist(M , )


Extract alignment

Initialize:
1. Iteration counter 0
2. Populate real-valued matrix 0
lexical similarity values
3. Create partition :
{MS0 , MS1 , . . . , MSC }
4. 0
Iterate:
5.
6. c % (C + 1), + 1
7. MSi c
8. types xa

P

wF
SetSim(F(a), F())
9.

F N (a,)

10. else
11. 0
12. MSi = MSi1 Sc
13. c = C
14.
Dist(M , )
else
15.
high value
16.
17.
18. Extract alignment

(a)

(b)

Figure 19: (a) OLA iteratively updates alignment matrix using combination neighboring
similarity values. (b) OLAs BCD-integrated iterative ontology alignment algorithm.

Finally, Fig. 20, outline iterative search undertaken Optima modification
due BCD. Optimas expectation-maximization based iterative search uses binary matrix, ,
represent alignment. Objective function, Q, defined Eq. 6. search improved
alignment line 8 implemented using two steps expectation maximization. Iterations
terminate sample M, improves objective function, Q further, available.
search modified Fig. 20 (b) explore reduced search space, MSc , cycle
blocks. objective function, QS , prior operate single coordinate block.

Appendix B. Biomedical Ontology Alignment Benchmark
Biomedical ontologies bring unique challenges ontology alignment problem. Moreover,
explicit interest ontologies ontology alignment domain biomedicine. Consequently, present new biomedical ontology alignment testbed, provides important
application context alignment research community. Due large sizes biomedical
838

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

PTIMA -BCD (O1 , O2 )
Initialize:
1. Iteration counter 0
2. {1, 2, . . . , |V2 |}
3.
0 |V12 |
4. Generate seed map
O1 O2
5. Populate binary matrix, M0 ,
seed correspondences
6. Create partition :
{MS0 , MS1 , . . . , MSC }

PTIMA (O1 , O2 )
Initialize:
1. Iteration counter 0
2. {1, 2, . . . , |V2 |}
3.
0 |V12 |
4. Generate seed map
O1 O2
5. Populate binary matrix, M0 ,
seed correspondences

Iterate:
7.
8.
c % (C + 1), + 1
9.
Search MSi c , arg max QS (MSi c |Mi1 )

Iterate:
6.
7.
ii+1
8.
Search Mi arg max Q(M |Mi1 )

P|V1M
|
P r(y |xa , Mi1 )
9.
|V11 | a=1
10. Mi 6= Mi1
11. Extract alignment Mi

10.
11.
12.
13.

MSc MSc
i1

MS, MS, Sc
P|V1,c |
1
i1

)
,c
|V1,c
a=1 P r(y |xa ,
|

c = C
changed Mi 6= Mi1 ?
else
14.
changed true
15. changed
16. Extract alignment Mi

(a)

(b)

Figure 20: (a) Optimas expectation-maximization based iterative search algorithm.
(b)
Expectation-maximization based iterative ontology alignment Optima BCD.

ontologies, testbed could serve comprehensive large ontology benchmark. Existing correspondences NCBO may serve reference alignments pairs, although analysis
reveals maps represent small fraction total alignment possible
two ontologies. Consequently, new correspondences discovered benchmarking may
submitted NCBO curation publication.
order create testbed, combed 370 ontologies hosted NCBO
OBO Foundry, isolated benchmark 50 different biomedical ontology pairs. Thirty-two
ontologies sizes ranging hundred tens thousands entities constitute
pairs, listed Table 2. provide snapshot full benchmark Table 3. testbed
reference alignments available download http://tinyurl.com/n4t2ns3.
primary criteria including pair benchmark presence sufficient amount
correspondences ontologies pair, determined NCBOs BioPortal.
briefly describe steps creating testbed:
1. selected ontologies, exist either OWL RDF models.
839

fiT HAYASIVAM & OSHI

2. paired ontologies ordered pairs percentage available correspondences. ratio correspondences exist BioPortal pair ontologies
consideration divided product number entities ontologies.
3. Top 100 ontology pairs based ratio selected, followed ordering pairs
based joint sizes.
4. created 5 bins equal sizes randomly sampled bin uniform distribution
obtain final 50 pairs.
Named
Data
Classes
Properties
114
0
Bilateria anatomy (BILA)
50
0
Common Anatomy Reference Ontology (CARO)
282
2
Plant Growth Development Stage (PO PSDA)
821
0
FlyBase Controlled Vocabulary (FBcv)
129
0
Spatial Ontology (BSPO)
1603
0
Amphibian gross anatomy (AAO)
238
0
Anatomical Entity Ontology (AEO)
1270
7
Cereal plant gross anatomy (GR CPGA)
1,270
6
Plant Anatomy (PO PAE)
821
0
Subcellular Anatomy Ontology (SAO)
1,041
0
Xenopus anatomy development (XAO)
1,184
0
vertebrate Homologous Organ Groups (sHOG)
1,930
4
Hymenoptera Anatomy Ontology (HAO)
3,039
0
Teleost Anatomy Ontology (TAO)
628
0
Tick gross anatomy (TADS)
2,788
5
Zebrafish anatomy development (ZFA)
4,358
0
Medaka fish anatomy development (MFO)
5,139
4
BRENDA tissue / enzyme source (BTO)
2274
0
Expressed Sequence Annotation Humans (eVOC)
7,797
0
Drosophila gross anatomy (FBbt)
2,281
24
Phenotypic quality (PATO)
7,294
112
Uber anatomy ontology (UBERON)
6,599
0
Fly taxonomy (FBsp)
1,338
4
Protein modification (MOD)
2,314
0
Human developmental anatomy (EHDAA)
8,340
0
Human developmental anatomy timed version (EHDA)
1,585
7
Plant Ontology (PO)
2,703
73
NIF Cell (NIF Cell)
2,982
1
Mouse adult gross anatomy (MA)
1,864
3
Mosquito gross anatomy (TGMA)
3,537
102
Ontology Biomedical Investigations (OBI)
31,470
9
Chemical entities biological interest (CHEBI)
Table 2: Selected ontologies NCBO biomedical ontology
alignment testbed number named classes properties
each. Notice data set includes large ontologies. NCBO abbreviations ontologies provided.
Ontology

840

Object
Properties
9
9
0
10
9
9
6
0
0
85
10
7
4
9
0
0
6
9
7
10
0
0
0
0
7
7
0
5
6
0
6
0

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

Biomedical ontology alignment testbed
Ontology O1
Ontology O2
|V1 | |V2 |
Common Anatomy Reference Ontology
Human developmental anatomy (EHDAA)
115,700
(CARO)
Bilateria anatomy (BILA)
Human developmental anatomy (EHDAA)
263,796
Bilateria anatomy (BILA)
Human developmental anatomy (EHDAA)
263,796
Spatial Ontology (BSPO)
Human developmental anatomy (EHDAA)
298,506
Plant Growth Development Stage
Plant Ontology (PO)
446,970
(PO PSDA)
Anatomical Entity Ontology (AEO)
Human developmental anatomy (EHDAA)
550,732
FlyBase Controlled Vocabulary (FBcv)
Cereal plant gross anatomy (GR CPGA)
1,042,670
FlyBase Controlled Vocabulary (FBcv)
Plant Ontology (PO)
1,301,285
Tick gross anatomy (TADS)
Human developmental anatomy (EHDAA)
1,453,192
Amphibian gross anatomy (AAO)
Xenopus anatomy development (XAO)
1,668,723
Cereal plant gross anatomy (GR CPGA)
Plant Ontology (PO)
2,012,950
Plant Anatomy (PO PAE)
Plant Ontology (PO)
2,012,950
Subcellular Anatomy Ontology (SAO)
NIF Cell (NIF Cell)
2,219,163
Expressed Sequence Annotation Humans
Xenopus anatomy development (XAO)
2,367,234
(eVOC)
Xenopus anatomy development (XAO)
Human developmental anatomy (EHDAA)
2,408,874
vertebrate Homologous Organ Groups Expressed Sequence Annotation Humans
2,692,416
(sHOG)
(eVOC)
vertebrate Homologous Organ Groups
Human developmental anatomy (EHDAA)
2,739,776
(sHOG)
Xenopus anatomy development (XAO)
Zebrafish anatomy development (ZFA)
2,902,308
Xenopus anatomy development (XAO)
Teleost Anatomy Ontology (TAO)
3,163,599
vertebrate Homologous Organ Groups
Mouse adult gross anatomy (MA)
3,530,688
(sHOG)
Hymenoptera Anatomy Ontology (HAO)
Mosquito gross anatomy (TGMA)
3,597,520
vertebrate Homologous Organ Groups
Teleost Anatomy Ontology (TAO)
3,598,176
(sHOG)
Expressed Sequence Annotation Humans
Amphibian gross anatomy (AAO)
3,645,222
(eVOC)
Amphibian gross anatomy (AAO)
Human developmental anatomy (EHDAA)
3,709,342
Hymenoptera Anatomy Ontology (HAO)
Human developmental anatomy (EHDAA)
4,466,020
Amphibian gross anatomy (AAO)
Zebrafish anatomy development (ZFA)
4,469,164
Amphibian gross anatomy (AAO)
Teleost Anatomy Ontology (TAO)
4,871,517
Expressed Sequence Annotation Humans
Human developmental anatomy (EHDAA)
5,262,036
(eVOC)
Phenotypic quality (PATO)
Human developmental anatomy (EHDAA)
5,278,234
Zebrafish anatomy development (ZFA)
Human developmental anatomy (EHDAA)
6,451,432
Plant Anatomy (PO PAE)
BRENDA tissue / enzyme source (BTO)
6,526,530
Teleost Anatomy Ontology (TAO)
Human developmental anatomy (EHDAA)
7,032,246
Xenopus anatomy development (XAO)
Uber anatomy ontology (UBERON)
7,593,054
Zebrafish anatomy development (ZFA)
Teleost Anatomy Ontology (TAO)
8,472,732
Continued next page

841

fiT HAYASIVAM & OSHI

Ontology 1
vertebrate Homologous Organ Groups
(sHOG)
Medaka fish anatomy development
(MFO)
Medaka fish anatomy development
(MFO)
BRENDA tissue / enzyme source (BTO)
Amphibian gross anatomy (AAO)
BRENDA tissue / enzyme source (BTO)
Hymenoptera Anatomy Ontology (HAO)
Hymenoptera Anatomy Ontology (HAO)
Expressed Sequence Annotation Humans
(eVOC)

Ontology 2

|V1 | |V2 |

Uber anatomy ontology (UBERON)

8,636,096

Expressed Sequence Annotation Humans
(eVOC)

9,910,092

Human developmental anatomy (EHDAA)
Expressed Sequence Annotation Humans
(eVOC)
Uber anatomy ontology (UBERON)
Human developmental anatomy (EHDAA)
Uber anatomy ontology (UBERON)
Drosophila gross anatomy (FBbt)
Uber anatomy ontology (UBERON)

Expressed Sequence Annotation Humans
(eVOC)
Zebrafish anatomy development (ZFA)
Uber anatomy ontology (UBERON)
Uber anatomy ontology (UBERON)
Mouse adult gross anatomy (MA)
Ontology Biomedical Investigations
Fly taxonomy (FBsp)
(OBI)
BRENDA tissue / enzyme source (BTO)
Uber anatomy ontology (UBERON)
Drosophila gross anatomy (FBbt)
BRENDA tissue / enzyme source (BTO)
Chemical entities biological interest
Protein modification (MOD)
(CHEBI)
Table 3: biomedical ontology pairs testbed sorted terms
|V1 | |V2 |. metric illustrative complexity aligning
pair.
Drosophila gross anatomy (FBbt)

10,084,412
11,686,086
11,692,282
11,891,646
14,077,420
15,048,210
16,586,556
17,730,378
20,335,672
21,750,708
23,340,663
37,483,866
40,068,783
42,106,860

References
Arimoto, S. (1972). algorithm computing capacity arbitrary discrete memoryless
channels. IEEE Transactions Information Theory, 18(1), 1420.
Ashburner, M., Ball, C. A., Blake, J. A., Botstein, D., Butler, H., Cherry, J. M., Davis, A. P., Dolinski, K., Dwight, S. S., Eppig, J. T., Harris, M. A., Hill, D. P., Issel-Tarver, L., Kasarskis,
A., Lewis, S., Matese, J. C., Richardson, J. E., Ringwald, M., Rubin, G. M., & Sherlock, G.
(2000). Gene ontology: tool unification biology. gene ontology consortium..
Nature genetics, 25(1), 2529.
Baader, F., Horrocks, I., & Sattler, U. (2003). Description logics ontology languages
semantic web. Lecture Notes Artificial Intelligence, pp. 228248. Springer-Verlag.
Belleau, F., Nolin, M.-A., Tourigny, N., Rigault, P., & Morissette, J. (2008). (bio2rdf): Towards
mashup build bioinformatics knowledge systems. Journal Biomedical Informatics,
41(5), 706716.
842

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

Blahut, R. E. (1972). Computation channel capacity rate-distortion functions. IEEE Transactions Information Theory, 18, 460473.
Bock, J., & Hettenhausen, J. (2010). Discrete particle swarm optimisation ontology alignment.
Information Sciences, 192, 122.
Bodenreider, O., & Stevens, R. (2006). Bio-ontologies: current trends future directions. Brief
Bioinform, 7, 256274.
Cruz, I. F., Stroe, C., & Palmonari, M. (2012). Interactive user feedback ontology matching
using signature vectors. IEEE 28th International Conference Data Engineering, pp.
13211324. IEEE Computer Society.
Doan, A., Madhavan, J., Domingos, P., & Halevy, A. (2003). Ontology matching: machine learning approach. Handbook Ontologies Information Systems, pp. 397416. Springer.
Doshi, P., Kolli, R., & Thomas, C. (2009). Inexact matching ontology graphs using expectationmaximization. Web Semantics: Science, Services Agents World Wide Web, 7(2),
90106.
Euzenat, J., Loup, D., Touzani, M., & Valtchev, P. (2004). Ontology alignment OLA.
Proceedings 3rd EON Workshop, 3rd International Semantic Web Conference, pp.
5968. CEUR-WS.
Euzenat, J., & Valtchev, P. (2004). Similarity-based ontology alignment OWL-lite. European
Conference Artificial Intelligence (ECAI), pp. 333337.
Euzenat, J., & Shvaiko, P. (2007). Ontology Matching. Springer.
Fessler, J. A., & Hero, A. O. (1994). Space-alternating generalized expectation-maximization algorithm. IEEE Transactions Signal Processing, 42, 26642677.
Fessler, J. A., & Kim, D. (2011). Axial block coordinate descent (abcd) algorithm X-ray CT
image reconstruction. Proceedings Fully 3D Image Reconstruction Radiology
Nuclear Medicine, pp. 262265.
Golbeck, J., Fragoso, G., Hartel, F., Hendler, J., Oberthaler, J., & Parsia, B. (2003). national
cancer institutes thesaurus ontology. Journal web semantics, 1(1), 7580.
Hanif, M. S., & Aono, M. (2009). Anchor-flood: results OAEI 2009. Proceedings
Workshop Ontology Matching 8th International Semantic Web Conference, pp. 127
134.
Hayes, J., & Gutierrez, C. (2004). Bipartite graphs intermediate model RDF. Proceedings 3rd International Semantic Web Conference (ISWC), Lecture Notes Computer
Science, pp. 4761. Springer Berlin / Heidelberg.
Hero, A. O., & Fessler, J. A. (1993). Asymptotic convergence properties (em)-type algorithms.
Tech. rep., Department EECS, Univ. Michigan, Ann Arbor, MI.
Hu, W., Jian, N., Qu, Y., & Wang, Y. (2005). GMO: graph matching ontologies. K-Cap
Workshop Integrating Ontologies, pp. 4350.
Hu, W., Zhao, Y., & Qu, Y. (2006). Partition-based block matching large class hierarchies.
Proceedings 1st Asian Semantic Web Conference (ASWC), pp. 7283.
843

fiT HAYASIVAM & OSHI

Hughes, T. C., & Ashpole, B. C. (2004). semantics ontology alignment. Information
Interpretation Integration Conference (I3CON).
Jean-Mary, Y. R., Shironoshita, E. P., & Kabuka, M. R. (2009). Ontology matching semantic
verification. Web Semantics: Science, Services Agents World Wide Web, 7(3),
235251.
Jian, N., Hu, W., Cheng, G., & Qu, Y. (2005). Falcon-AO: Aligning ontologies Falcon.
K-Cap Workshop Integrating Ontologies, pp. 8793.
Jimenez-Ruiz, E., & Grau, B. C. (2011). LogMap: Logic-based scalable ontology matching.
International Semantic Web Conference, pp. 273288.
Kirsten, T., Gross, A., Hartung, M., & Rahm, E. (2011). GOMMA: component-based infrastructure managing analyzing life science ontologies evolution. Journal
Biomedical Semantics, 2, 6.
Lambrix, P., Tan, H., Jakoniene, V., & Stromback, L. (2007). Biological ontologies In: Semantic
Web: Revolutionizing Knowledge Discovery Life Sciences, pp. 8599. Springer.
Li, Y., Li, J., & Tang, J. (2007).
RiMOM: Ontology alignment strategy selection. Proceedings 6th International 2nd Asian Semantic Web Conference
(ISWC2007+ASWC2007), pp. 5152.
McGuinness, D., & Harmelen, F. (2004). Owl web ontology language overview. Tech. rep., W3C.
Melnik, S., Garcia-molina, H., & Rahm, E. (2002). Similarity flooding: versatile graph matching
algorithm. ICDE: Int. Conference Data Engineering, pp. 117128.
Musen, M. A., Noy, N. F., Shah, N. H., Whetzel, P. L., Chute, C. G., Storey, M.-A. D., & Smith, B.
(2012). national center biomedical ontology. JAMIA, 19(2), 190195.
Nesterov, Y. (2012). Efficiency coordinate descent methods huge-scale optimization problems.
SIAM Journal Optimization, 22(2), 341362.
Ngo, D., & Bellahsene, Z. (2012). YAM++ : multi-strategy based approach ontology matching
task. International Conference Knowledge Engineering Knowledge Management,
pp. 421425.
Pinter, J. D. (2000). Yair censor stavros a. zenios, parallel optimization theory, algorithms,
applications. Journal Global Optimization, 16, 107108.
Rahm, E. (2011). Towards large-scale schema ontology matching. Bellahsene, Z., Bonifati,
A., & Rahm, E. (Eds.), Schema Matching Mapping, pp. 327. Springer.
Russell, S. J., & Norvig, P. (2010). Artificial Intelligence - Modern Approach (3rd edition).
Pearson Education.
Saha, A., & Tewari, A. (2013). non-asymptotic convergence cyclic coordinate descent
methods. SIAM Journal Optimization, 23(1), 576601.
Seddiqui, M. H., & Aono, M. (2009). efficient scalable algorithm segmented alignment
ontologies arbitrary size. Web Semantics: Science, Services Agents World
Wide Web, 7, 344356.
Shvaiko, P., & Euzenat, J. (2013). Ontology matching: State art future challenges. IEEE
Transactions Knowledge Data Engineering, 25(1), 158176.
844

fiS PEEDING U P TERATIVE NTOLOGY LIGNMENT USING BCD

Shvaiko, P., Euzenat, J., Heath, T., Quix, C., Mao, M., & Cruz, I. F. (Eds.). (2011). Proceedings
6th International Workshop Ontology Matching, Vol. 814 CEUR Workshop Proceedings. CEUR-WS.org.
Shvaiko, P., Euzenat, J., Kementsietsidis, A., Mao, M., Noy, N., & Stuckenschmidt, H. (Eds.).
(2012). Results Ontology Alignment Evaluation Initiative (OAEI) 2012, Vol. 946
CEUR Workshop Proceedings. CEUR-WS.org.
Shvaiko, P., Euzenat, J., Srinivas, K., Mao, M., & Jimenez-Ruiz, E. (Eds.). (2013). Preliminary
Results Ontology Alignment Evaluation Initiative (OAEI) 2013, Vol. 1111 CEUR
Workshop Proceedings. CEUR-WS.org.
Smith, B., Ashburner, M., Rosse, C., Bard, J., Bug, W., Ceusters, W., Goldberg, L. J., Eilbeck,
K., Ireland, A., Mungall, C. J., Leontis, N., Rocca-Serra, P., Ruttenberg, A., Sansone, S.-A.,
Scheuermann, R. H., Shah, N., Whetzel, P. L., & Lewis, S. (2007). OBO foundry: coordinated evolution ontologies support biomedical data integration. Nature Biotechnology,
25(11), 12511255.
Stoutenburg, S. K., Kalita, J., Ewing, K., & Hines, L. M. (2010). Scaling alignment large ontologies. International Journal Bioinformatics Research Applications, 6, 384401.
Thayasivam, U., & Doshi, P. (2012a). Improved convergence iterative ontology alignment using
block-coordinate descent. Twenty-Sixth Conference Artificial Intelligence (AAAI), pp.
150156.
Thayasivam, U., & Doshi, P. (2012b). Optima+ results OAEI 2012. Workshop Ontology Matching 11th International Semantic Web Conference (ISWC). Vol. 946 CEURWS.org.
Tseng, P. (2001). Convergence block coordinate descent method nondifferentiable minimization. Journal Optimization Theory Applications, 109, 475494.
Wang, P., & Xu, B. (2009). Lily: Ontology alignment results OAEI 2008. Proceedings
Workshop Ontology Matching 7th International Semantic Web Conference (ISWC).

845


