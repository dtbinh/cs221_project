Journal Artificial Intelligence Research 27 (2006) 551-575

Submitted 03/06; published 12/06

Causes Ineradicable Spurious Predictions Qualitative Simulation
zgr Ylmaz
A. C. Cem Say
Department Computer Engineering
Boazii University
Bebek 34342 stanbul, Turkey

YILMOZGU@BOUN.EDU.TR
SAY@BOUN.EDU.TR

Abstract
recently proved sound complete qualitative simulator exist, is,
long input-output vocabulary state-of-the-art QSIM algorithm used,
always input models cause simulator coverage guarantee make spurious
predictions output. paper, examine whether meaningfully expressive restriction
vocabulary possible one build simulator soundness
completeness properties. prove several negative results: sound qualitative simulators,
employing subsets QSIM representation retain operating region transition feature,
support least addition constancy constraints, shown inherently incomplete.
Even simulations restricted run single operating region, constraint
vocabulary containing addition, constancy, derivative, multiplication relations makes
construction sound complete qualitative simulators impossible.

1. Introduction
recently proved (Say & Akn, 2003) sound complete qualitative simulator
exist, is, long input-output vocabulary state-of-the-art QSIM algorithm
(Kuipers, 1994) used, always input models cause simulator
coverage guarantee make spurious predictions output. paper, examine whether
meaningfully expressive restriction vocabulary possible one build
simulator always output consistent solutions input model.
prove several negative results: sound qualitative simulators, employing subsets QSIM
representation retain operating region transition feature, support least
addition constancy constraints, shown inherently incomplete. problem persists
variables forced change continuously region transitions slightly larger
set constraint types allowed. Even simulations restricted run single
operating region, constraint vocabulary containing addition, constancy, derivative,
multiplication relations makes construction sound complete qualitative simulators
impossible. findings may helpful researchers interested constructing qualitative
simulators improved theoretical coverage guarantees using weaker representations.

2. Background
start brief overview qualitative simulation, concentrating representations used
input-output vocabularies qualitative simulators. Subsection 2.2 summarizes previous
work two theoretical properties qualitative simulators interest us. Subsection 2.3
short requirements specification hypothetical sound complete qualitative simulator.

2006 AI Access Foundation. rights reserved.

fiYILMAZ & SAY

2.1 Qualitative Simulation
many domains, scientists engineers incomplete amount information
model governing dynamic system consideration, renders formulating
exact ordinary differential equation (ODE) impossible. Incompletely specified differential
equations may appear contexts aim find collective proofs behavioral
properties infinite set systems sharing most, all, structure ODEs
describing them. proceed reasoning task cases, mathematical tools embodying
methods making use available information obtain (hopefully small) set
possible solutions matching model needed. Qualitative reasoning (QR) researchers
develop AI programs use weak representations (like intervals rather point values
quantities, general shape descriptions rather exact formulae functional relationships)
vocabularies perform various reasoning tasks systems incomplete
specifications. following, use notation terminology QSIM (Kuipers, 1994),
state-of-the art qualitative simulation methodology, although noted
incompleteness results proving valid reasoners whose input-output
vocabularies rich enough support representational techniques used
proofs.
qualitative simulator takes input qualitative differential equation model system
terms constraints representing relations systems variables. addition
model, qualitative values variables time point simulation
start given. algorithm produces list possible future behaviors may
exhibited systems whose ordinary differential equations match input model.
variables system modeled QSIM continuously differentiable functions time.
limits variable first derivatives exist approach endpoints
domains. variable quantity space; totally ordered collection symbols (landmarks)
representing important values take. Zero standard landmark common
variables. Quantity spaces allowed landmarks - ends, functional
relationships asymptotic shapes explicitly represented. appropriate, quantity
space declared span proper subset extended reals; instance, makes
sense bound quantity space variable certainly nonnegative (like pressure)
0 left. necessary, user specify one bounds quantity space
unreachable; example, unreachable value variables models
discussed paper. (reachable) points intervals quantity space make set
possible qualitative magnitudes variable. qualitative direction variable defined
sign derivative; therefore possible values are: inc (+), dec () std (0).
variables qualitative value pair consisting qualitative magnitude qualitative
direction. collection qualitative values variables makes state system.
laws according system operates represented constraints describing
time-independent relations variables. step simulation, QSIM uses set
transition rules implicitly generate possible next values variables.
combinations values filtered constitute complete states,
every constraint still satisfied new values variables, remain.
seven basic types constraints QSIM. (See Table 1.) type constraint
imposes different kind relation arguments. example, constraint
A(t) = B(t), combination variable values variables B
(nonzero) sign magnitudes directions filtered out. Sometimes, additional
knowledge constraints allows filtering. example, know
B landmark values a1 b1 moment time past,
552

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

eliminate value combinations B magnitudes less (or greater)
landmarks. a1 b1 called corresponding values constraint,
equation a1 = b1 correspondence. constraint model (except derivative
type) correspondence equations. sign algebra (Kuipers, 1994) employed
implement arithmetic relations using qualitative magnitudes. Note that, since + ( )
relationship corresponds infinite number possible quantitative functions
monotonicity property, single QSIM model containing constraints correspond
infinitely many ODEs.
CONSTRAINT NAME
add

NOTATION
X(t) + Y(t) = Z(t)

constant

X(t) = landmark

derivative

d/dt(X,Y)

M+

X(t) = f(Y(t)), f +



X(t) = f(Y(t)), f

minus
mult

X(t) = Y(t)
X(t) Y(t) = Z(t)

EXPLANATION

X(t) = 0
dt

X(t) = Y(t)
dt
f X(t) = f(Y(t)), f > 0
f domain
f X(t) = f(Y(t)), f < 0
f domain

Table 1: Qualitative Constraint Types
QSIM input vocabulary enables user describe complicated models terms
several different constraint sets representing different operating regions system
consideration. user specifies boundaries applicability ranges operating
regions terms conditions indicate simulator effect transition
another operating region obtained.
operating region transition occur, one specify
following possible transition:
Boolean expressions composed primitives form VariableName=QualitativeValue,
trigger transition satisfied,
name target operating region,
names variables inherit qualitative magnitudes and/or directions
first state transition last state transition,
Value assignments variables explicitly specified values first state
transition.
provided qualitative system model, name initial operating region,
description qualitative values variables initial state, QSIM starts simulation,
generates tree system states represent solutions qualitative differential
equation composed constraints input. root tree input initial state
time-point label t0, representing numerical value initial instant. Every path
553

fiYILMAZ & SAY

root leaf predicted behavior system. qualitative format,
behavior usually corresponds infinite set trajectories sharing qualitative
structure phase space. Time-point interval states appear alternately behaviors long
operating region valid. Operating region transitions reflected behaviors two
time-point states following other.
2.2 Related Work Soundness Incompleteness
important property qualitative simulators coverage guarantee: qualitative
simulation algorithm sound guaranteed that, ODE initial state matches
simulators input, behavior output matches ODEs solution.
Kuipers (1986) proved exists qualitative simulator (namely, QSIM)
soundness property. guarantee makes qualitative simulation valuable design diagnosis
method (Kuipers, 1994): design, set simulation predictions model
contain catastrophic failure, proof modeled system exhibit failure
(Shults & Kuipers, 1997). diagnosis, none behaviors simulation output
model exhibited particular system, 100% sure actual system
governed model.
Another property one would wish ones qualitative simulator possess completeness;
is, guarantee every behavior output corresponds solution least one
ODE matching input. early days QR research, conjectured (de Kleer & Brown,
1984) qualitative simulators employing local constraint satisfaction methods (Weld & de
Kleer, 1990) complete. However, paper contained guaranteed
coverage theorem, Kuipers (1986) showed version QSIM described there, and,
indeed, qualitative simulators day, incomplete, demonstrating
simulation frictionless mass-spring oscillator predicts unrealizable (spurious) behaviors,
amplitude decreases periods increases others. lack guarantee
predicted behaviors real negative impact potential applications: design,
set simulation predictions model contain catastrophic failure,
necessarily point error mechanism; maybe prediction question
spurious behavior. similar problem occurs diagnosis applications.
Several types spurious qualitative simulation predictions discovered
following years: Struss (1990) pointed that, whenever variable appeared
arithmetic constraint, spurious states could pass filter. instance, filters add
constraint unable delete states involving nonzero values variable Z equation
A(t) + Z(t) = A(t) nonzero. Clearly, sound complete qualitative simulator
would possess algebraic manipulation capabilities enable us conclude Z = 0
case. Say Kuru (1993) discovered class spurious predictions caused rigidity
internal representation correspondences, unnecessarily weak implementation
subtraction. Say (1998) showed spurious behaviors due lack explicit
enforcement lHpitals rule original algorithm. Yet another family inconsistent
predictions found caused weaknesses methods used distinguish finite
infinite time intervals behaviors (Say, 2001, see Missier, 1991). Knik Say
(2003) proved model behavior descriptions could encode information
relative (finite) lengths intervals contain, failure check overall
consistency pieces information yields another class spurious predictions. Finally,
Say (2003) showed similar encoding could occur exact numerical values
landmarks, sound complete qualitative simulator would support capability

554

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

comparing magnitudes two elements rich subset real numbers
avoid particular set spurious predictions.
Interestingly, discoveries actually good news users qualitative
simulators: order able say particular predicted behavior spurious, therefore
suitable elimination simulator output without forsaking soundness property, one
first proves behavior mathematically inconsistent simulated model
starting state. instance, aforementioned spurious oscillations frictionless massspring system shown violate conservation constraint follows directly
structure input equations. proof seen specification new
filter routine would eliminate exactly set behaviors violate law
establishes. kinetic energy constraint (Fouch & Kuipers, 1992) filter
developed fashion eliminate class spurious predictions exemplified ones
mass-spring system (Kuipers 1994). spurious prediction classes mentioned
previous paragraph had, fact, discovered simultaneously cures.
question whether exists sound complete qualitative simulator finally
settled Say Akn (2003). proved that, sound qualitative simulator using
input-output representation task specification QSIM methodology, exist input
models initial states whose simulation output contain spurious predictions. (Note
say present QSIM algorithm augmented filters make
sound complete; refutes existence program whatsoever perform
job.)
proof Say Akn (2003) shows sound complete qualitative simulator
employing vocabulary mentioned above, existed, could used solve given
instance Hilberts Tenth Problem, famously undecidable (Matiyasevich, 1993).
procedure involves building QSIM model representing given problem, simulating several
times starting carefully constructed initial states representing candidate solutions,
examining output read solution. model set contain inconsistency
answer considered problem no, existence one
behaviors output means yes. Since impossible make decision correctly
general case, follows would input models giving rise behavior predictions
whose consistency status determined simulator, whose best course action
would include output, keep soundness guarantee intact. cases
correct answer no, would result prediction spurious behaviors. Note
ineradicable spurious predictions, unlike ones discussed earlier.
important note proof necessarily mean hope constructing
sound complete qualitative simulator lost. One may try weaken input-output
representation longer possesses problematic power enables one
unambiguously encode instances Hilberts Tenth Problem QSIM model. (Of course,
weakening must kept minimum possible level resulting program useful
reasoner; instance, removing programs ability distinguish negative
nonnegative numbers would possibly yield sound complete simulator, output
program would state everything possible want
methods.) one examine incompleteness proof (Say & Akn, 2003) see
exactly features QSIM representation used construction reduction;
future qualitative simulator supporting vocabulary subset would incorporating
problem start.
listing QSIM representational items used proof: M+,
derivative, mult, constant constraint types utilized. (Note absence add
constraint, implemented using others, list.) Qualitative interval
555

fiYILMAZ & SAY

magnitudes (0, ), one might call infinite uncertainty actual value
represented number, used initializing several variables, form essential part
argument. QSIMs ability explicitly represent infinite limits utilized equating
landmark number , stating twice limit function arctan x x nears
infinity. Finally, operating region transition feature used heavily, since thanks
characteristic sine function two dependent variables represented
qualitative vocabulary.
Section 3, examine several different ways weakening QSIM vocabulary try
understand combinations features responsible problem ineradicable
spurious predictions.
2.3 Desiderata Sound Complete Qualitative Simulator
important point clarify exactly one would expect hypothetical sound
complete qualitative simulator. input model yields finite behavior tree genuine
solutions, obvious program supposed print descriptions behaviors
forming branches tree, nothing else, finite time. input model initial
state inconsistent, i.e., correct output empty tree, program report
inconsistency finite time.
Finally, input yields behavior tree infinitely many branches, program
supposed run forever, adding new state output every while. formally,
every positive i, integer program printed first
states behavior tree (according ordering root, i.e. initial state,
state number 1, descendants particular state printed state itself)
end sth step execution. Note requirements mean sound
complete simulator would able decide whether initial system state description
given consistent input model within finite time. necessity used
proofs incompleteness Section 3.

3. New Incompleteness Results Qualitative Simulators
section, examine two different ways restricting qualitative vocabulary
hope obtaining representation allows construction sound complete
simulators. Subsection 3.1 considers usage several reduced sets qualitative constraint
types, retaining operating region transition feature. examine possible
restriction way variable values handled operating region transitions. Subsection
3.2 investigation capabilities qualitative simulators restricted input
models single operating region. variants shown exhibit problem
ineradicable spurious predictions soundness guarantee present.
3.1 Reduced Constraint Sets
results subsection based undecidability properties abstract computational
devices called unlimited register machines (URMs). first present brief introduction
URMs, proceed proofs.

556

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

3.1.1 UNLIMITED REGISTER MACHINES
easiest way thinking URM see computer infinite memory
supports particularly simple programming language. URM (Cutland, 1980) program P
consists finite sequence instructions I1, I2, ..., I|P|. instructions refer machines
registers Ri, store arbitrarily big natural number. use notation r1, r2,
r3, ... register contents.
purposes, sufficient consider three types URM instructions:
succ(n): Increment content register n one.
Rn rn + 1
zero(n): Set content register n zero.
Rn 0
jump(m, n, q): Compare registers n. equal, continue instruction q.
rm = rn jump Iq
URM program starts execution first instruction. current instruction
jump whose equality condition satisfied, followed next instruction list.
program ends attempts continue beyond last instruction, jump nonexistent
address attempted. assume without loss generality jumps address I|P|+1.
P = I1, ..., I|P| URM program, computes function P(k) : Nk N. P(k)(a1, ..., ak)
computed follows:
- Initialization: Store a1, ..., ak registers R1, ..., Rk, respectively, set registers
referenced program 0.
- Iteration: Starting I1, execute instructions order described above.
- Output: program ends, computed value function number r1
contained register R1. program never stops, P(k)(a1, ..., ak) undefined.
Table 2 contains example URM program computes function f(x, y) = x + y. Note
function N2 N, input values x stored registers R1 R2,
output function expected stored R1 end program.
I1:

zero(3)

I2:

jump(2, 3, 6)

I3:

succ(1)

I4:

succ(3)

I5:

jump(1, 1, 2)

Table 2: URM Program Computing f(x, y) = x +
program first sets R3 zero. checks see R2 = R3 (in case = 0).
Otherwise, increments R1 R3. continues x incremented times,
value R1 returned.
URM model computation equivalent numerous alternative models
Turing machine model, Gdel-Kleene partial recursive functions model Churchs lambda
557

fiYILMAZ & SAY

calculus, (Cutland, 1980; Shepherdson & Sturgis, 1963) sense set functions
computable URMs identical set functions computed
models. means device simulate given URM powerful
Turing machine, since simulate given Turing machine. proofs
incompleteness QSIM vocabulary reduced constraint sets, make use
fact halting problem URMs undecidable (Cutland, 1980).
3.1.2 SOUND COMPLETE QSIM REDUCED CONSTRAINT SETS SOLVES HALTING
PROBLEM
incompleteness results new subsets QSIM vocabulary presented
subsection based following theorem, shows QSIM simulate
URM, thereby Turing-equivalent computational power.
Theorem 1: execution URM program P |P| instructions given input
represented simulation QSIM model |P|+2 operating regions.
Proof: proof construction. Suppose given URM program P
instructions I1, ..., I|P|. Let R1, ..., RN registers mentioned instructions P.
Ri, define QSIM variable NRi represent it, and, case Ri
nonzero initial value ai, set auxiliary QSIM variables representing ai. Table 3 describes
idea behind representation. four variables named U, W, Z, B. U
represents clock rises 0 1 every computational step. W derivative U.
Z constant zero every operating region. B additional auxiliary variable.
CONSTRAINTS

INITIAL VALUES

CONCLUSIONS

ONE(t) ONE(t) = ONE(t)
ONE(t) + ONE(t) = TWO(t)
ONE(t) + TWO(t) = THREE(t)

ONE(t0) = one (0, )

ONE constant 1
TWO constant 2
THREE constant 3

Table 3: QSIM Model Fragment Demonstrating Representability Exact Integer Values
QSIM model |P|+2 operating regions: instruction Ii P
corresponding operating region named OpRegi. two remaining regions OpReg0,
corresponding initialization stage P, OpReg|P|+1, corresponding end.
specification operating region must contain constraints valid
region, Boolean conditions (if any) composed primitives form
Variable = <qualitative magnitude, qualitative direction> would trigger transitions
operating regions obtained, lists detail variables inherit
previous magnitudes and/or directions transition, initialized
new values switch. Tables 4-9 describe prepare items operating
regions target model, based program P. five different operating region
templates (or types) used construction; one URM instruction type, one
OpReg0, one OpReg|P|+1.
model OpReg0 depicted Table 4. simulation P start.
NRi variables equated proper initial values specified user P: ones
initialized zero handled constant 0 constraints. ones positive initial values
558

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

specified constant values using add constraints link number
variables exemplified Table 3; instance, NR2 initialized three,
constraint THREE(t) + Z(t) = NR2(t). add constraint B, U, ONE serves express
fact landmark named one Us quantity space equal 1. (Note
add constraints mentioned paragraph exist OpReg0, since would disrupt
intended behavior operating regions.)
seen Tables 4-8, exactly variables keep values transition depends
type target operating region. Regions corresponding instructions type zero(n)
inherit value Rn predecessors, since involve replacement
value zero anyway. types regions, including succ(n) type, inherit
register contents predecessors. (Although value Rn change succ
instruction, new value depends old one, unlike case zero(n). corresponding
QSIM variable NRn increases continuously simulation region type succ(n),
new region transition occurs exactly moment increased one unit.)
Operating Region: OpReg0
{Type: Initialization}
Constraint Set: d/dt(U, W)
B(t) + U(t) = ONE(t) correspondence 0 + one = one
required number representation constraints (see Table 3)
add constraints linking NRi relevant number variables (see text)
variables except U B constant.
Possible Transition:
Trigger: ( U = <one, inc> )
New operating region: OpReg1
Variables inheriting magnitudes directions: See Table 5, indexed type OpReg1
Variables new asserted values: U <0, inc>

Table 4: Model Operating Region OpReg0, Corresponding Initialization URM

TYPE TARGET
REGION
jump(m, n, q)

VARIABLES INHERITING
QUALITATIVE MAGNITUDES
variables except U B

VARIABLES INHERITING
QUALITATIVE DIRECTIONS
variables except U, B, NRi

succ(n)

variables except U B

variables except U, B, NRi

zero(n)

variables except U NRn

variables except U, B, NRi

End

variables except U

variables except U NRi

Table 5: Variables Inherit Magnitudes and/or Directions According Type
Target Operating Region

559

fiYILMAZ & SAY

simulation given URM program proceeds follows: described previous
subsection, URM starts initial configuration, registers R1, ..., Rk store
nonnegative integers a1, ..., ak, form input program, respectively. Nk
registers set 0. Correspondingly, NRi variables QSIM model
quantity space [0, ). NRi variables nonzero initial values start simulation
qualitative values <(0, ), std>, whereas ones start <0, std>. quantity space
variable U [0, one], landmark one equated 1, mentioned above. U starts
initially qualitative value <0, inc>. derivative U, W, quantity space [0, speed, ),
speed equated 1. starts qualitative value <speed, std> constant
whole simulation. variable B quantity space (-, 0, ) starts <(0, ), dec>.
started OpReg0, QSIM compute single qualitative behavior segment, ends
transition OpReg1 U reaches <one, inc> time-point t1.
Operating Region: OpRegi
{Type: zero(n)}
Constraint Set: d/dt(U, W)
NRn(t) = 0
variables except U constant.
Possible Transition:
Trigger: ( U = <one, inc> )
New operating region: OpRegi+1
Variables inheriting magnitudes directions: See Table 5, indexed type OpRegi+1
Variables new asserted values: U <0, inc>

Table 6: Model Template Operating Regions Corresponding zero(n) Instructions

Operating Region: OpRegi
{Type: succ(n)}
Constraint Set: d/dt(U, W)
B(t) + U(t) = NRn(t)
variables except U NRn constant.
Possible Transition:
Trigger: ( U = <one, inc> )
New operating region: OpRegi+1
Variables inheriting magnitudes directions: See Table 5, indexed type OpRegi+1
Variables new asserted values: U <0, inc>

Table 7: Model Template Operating Regions Corresponding succ(n) Instructions

560

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

Note zero uncertainty values variables, even ones initial
magnitude (0, ), start simulation.
model constrained sound complete qualitative simulator guaranteed
produce exactly one behavior prediction initial state corresponding valid URM input.
see this, sufficient observe that, step simulation, sufficient
information available simulator compute exact numerical value every variable
model. (This corresponds tracing URM program keeping note register
contents step.) modeled URM halts particular input given initial
state, QSIM behavior supposed finite one, ending variable U attempts
exceed one OpReg|P|+1. URM computation halt, QSIM behavior
supposed single infinite sequence states, never visits OpReg|P|+1.
Operating Region: OpRegi
{Type: jump(m, n, q)}
Constraint Set: d/dt(U, W)
NRm(t) + B(t) = NRn(t)
variables except U constant.
Possible Transition:
Trigger: ( U = <one, inc> ) ( B <0, std> )
New operating region: OpRegi+1
Variables inheriting magnitudes directions: See Table 5, indexed type OpRegi+1
Variables new asserted values: U <0, inc>
Possible Transition:
Trigger: ( U = <one, inc> ) ( B = <0, std> )
New operating region: OpRegq
Variables inheriting magnitudes directions: See Table 5, indexed type OpRegq
Variables new asserted values: U <0, inc>

Table 8: Model Template Operating Regions Corresponding jump(m, n, q) Instructions

Operating Region: OpReg|P|+1
{Type: End}
Constraint Set: d/dt(U, W)
variables except U constant.

Table 9: Model Operating Region OpReg|P|+1, Corresponding End URM
Program
ready state new version incompleteness theorem.
561

fiYILMAZ & SAY

Theorem 2: Even qualitative representation narrowed derivative, add,
mult, constant constraints used QDEs, variable forced start finite
value zero uncertainty initial state, still impossible build sound complete
qualitative simulator based input-output vocabulary.
Proof: Assume sound complete simulator exists. show solve
halting problem URMs using algorithm subroutine.
Construct corresponding QSIM model described Theorem 1 URM program P
whose halting status particular input supposed decided. define new variable
quantity space [0, one, ), landmark one equated number 1. starts
value <one, std> initial state. Add constraints indicating constant
operating regions, specify value inherited possible transitions. Insert
new constraint S(t) = 0 OpReg|P|+1. Consider simulator supposed
checking initial state consistency. Note would inconsistency
simulation ever enters OpReg|P|+1, since new constraint inserted region says
zero, would contradict inherited value one. simulator
supposed make spurious predictions expected reject initial state time t0
inconsistent simulation going enter OpReg|P|+1, words, URM program
consideration going halt. sound complete simulator reject
initial state due inconsistency, goes simulation, conclude
program P halt. forms decision procedure halting problem. Since
halting problem undecidable, obtained contradiction, conclude sound
complete simulator using representation exist.
fact possible remove derivative constraint (which used proof
ensure behavior tree one branch) representation well,
incompleteness result shown would still stand:
Theorem 3: Even qualitative representation narrowed add, mult,
constant constraints used QDEs, variable forced start finite value
zero uncertainty initial state, still impossible build sound complete
qualitative simulator based input-output vocabulary.
Proof: make minor modification proof Theorem 2. observe
construction Theorem 1, U always starts every operating region <0, inc> fact
derivative positive constant forces reach value <one, inc> next time point.
transition next operating region occurs, U receives value <0, inc>.
happens remove variable W derivative constraints model? case,
since Us derivative fixed, three possible states U second time point
simulation operating region: <one, inc>, <one, std>, <(0, one), std>. fix
problem inserting another possible region transition specification regions,
except OpReg|P|+1. transition triggered U one values <one, std>,
<(0, one), std>, target OpReg|P|+1. variable proof Theorem 2,
well variables, inherited completely transition. unwanted
behaviors would created due elimination Us derivative end OpReg|P|+1,
therefore eliminated spurious accordance argument previous
proof. Hence, again, simulator supposed accept initial state consistent
P halt, meaning sound complete simulation impossible
representation well.

562

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

Interestingly, one even restrict representation nonnegative numbers
supported, incompleteness result proved still stands:
Theorem 4: Even qualitative representation narrowed add, mult,
constant constraints used QDEs, variable forced start finite value
zero uncertainty initial state, variable allowed negative value time
simulation, still impossible build sound complete qualitative simulator
based input-output vocabulary.
Proof: previous proof, variable B ever possibility negative value,
occur jump region. replace definition jump region template
Table 10, introduce new variables C Y. insert constraints say
variables constant operating regions. C start zero, inherited
transitions, except target region type jump. seen Table 10, B gets
value 1 two compared register values equal. unequal, B
positive value different 1. setup, Bs quantity space defined [0, one, ),
one equated 1, variable ever negative value simulation. B starts
simulation value <one, dec> satisfy add constraint seen Table 4. rest
argument identical Theorem 3.
Operating Region: OpRegi
{Type: jump(m, n, q)}
Constraint Set: NRm(t) + ONE(t) = C(t)
NRn(t) + ONE(t) = Y(t)
B(t) C(t) = Y(t)
variables except U constant.
Possible Transition:
Trigger: ( U = <one, inc> ) ( B <one, std> )
New operating region: OpRegi+1
Variables inheriting magnitudes directions: Depends type OpRegi+1,
Variables new asserted values: U <0, inc>
Possible Transition:
Trigger: ( U = <one, inc> ) ( B = <one, std> )
New operating region: OpRegq
Variables inheriting magnitudes directions: Depends type OpRegq,
Variables new asserted values: U <0, inc>

Table 10: Alternative Model Template Operating Regions Corresponding jump(m, n, q)
Instructions Avoids Negative Numbers
Alternatively, keep negative numbers remove mult constraint
representation, drop requirement variable starts simulation value zero
uncertainty.

563

fiYILMAZ & SAY

Theorem 5: Even qualitative representation narrowed add constant
constraints used QDEs, still impossible build sound complete qualitative
simulator based input-output vocabulary.
Proof: used mult constraint proofs Theorems 1-3 equating variable
landmark values unambiguous integers. Assume delete mult constraints
model Theorem 3. number variables Table 3 replaced setup shown
Table 11. Ri supposed initialized positive integer ai P, equate NRi
aiunit variable OpReg0 using method explained proof Theorem 1. Note
use constant add constraints (and lot auxiliary variables) purpose.
CONSTRAINTS
ONEUNIT(t) = unit
ONEUNIT(t) + ONEUNIT(t) = TWOUNITS(t)
ONEUNIT(t) + TWOUNITS(t) = THREEUNITS(t)

CONCLUSIONS
TWOUNITS constant 2unit
THREEUNITS constant 3unit

Table 11: Sample Model Fragment Equating Variables Integer Multiples Positive
Landmark unit
landmarks previously named one variables quantity spaces equated
unit. new model, execution succ(n) instruction increments NRns value one unit.
jump instruction compares landmarks whose values equal uunit vunit instead
comparing two landmarks whose values equal natural numbers u v. zero instruction
sets target register 0, previous construction. modeled machine
original URM does, since multiplication values coefficient unit
change flow program, and, particular, whether halts input not. rest
argument identical proof Theorem 3.
observe variables change qualitative magnitudes directions
discontinuously operating region transitions proofs previous theorems.
next theorem proves maintaining soundness completeness simultaneously impossible
even allow qualitative variable perform change, force
variables magnitude direction inherited next operating region.
Theorem 6: Even qualitative representation narrowed derivative, add
constant constraints used QDEs, variables magnitude direction allowed
perform discontinuous changes operating region transitions, still impossible build
sound complete qualitative simulator based input-output vocabulary.
Proof: again, make changes QSIM models used simulating given
URM previous theorems. always, QSIM variable NRi N
registers Ri appearing URM program. addition that, define variables Dij
i, j {1, ...,N} j. satisfies equation Dij = NRi NRj throughout
simulation; is, keep track differences pairs register values. clearly
achieved inserting several add constraints operating regions model.
difference variables enable us compare two register values operating regions type
jump.
564

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

Furthermore, define auxiliary variables TRi {1, ..., N}. TRi initialized
values corresponding NRi, using technique NRi.
instruction type given URM program, define two operating regions.
clock variable U increase first operating regions value <unit, std>,
decrease next one <unit, std> <0, std>, performing discontinuous jump
program. order obtain variable behavior, make use simple harmonic
oscillator model given Table 12, variable X (denoting displacement
rest position oscillating object) oscillates values unit/2 unit/2,
variable U equated X + unit/2, oscillating 0 unit. model template given
Table 12 added every operating region. (That table contains variable names used
constructions previous proofs. variables treated previously described
manner, unless proof specifies otherwise.) following lemma establishes correctness
construction.
CONSTRAINTS

CORRESPONDENCES

MEANING

HALFUNIT(t) + HALFUNIT(t) = ONEUNIT(t)

c1 + c1 = unit

c1 = unit / 2

HALFUNIT(t) + V(t) = E(t)

c1 + v1 = 0

v1 = unit / 2

d/dt(X, V)

dX
=V
dt

d/dt(V, A)

d2X
=A
dt

X(t) + A(t) = Z(t)

d2X
+ X =0
dt

X(t) + HALFUNIT(t) = U(t)

U = X+unit/2

Table 12: Model Template Obtain Desired Behavior Variable U Clock
Oscillating Qualitative Values <0, std> <unit, std> (This Template Inserted
Constructed Operating Regions.)
Lemma 7: number r represented QSIM landmark, QSIM variable X
equated function r sin(t t0) using derivative, add constant constraints.
Proof Lemma 7:
seen Table 12, equation
d2
X (t ) + X (t ) = 0
dt

expressed using derivative, add constant constraints. equation general
solution form
X (t ) = c1 sin + c2 cos ,
565

(1)

fiYILMAZ & SAY

hence time derivative V form
V (t ) = c1 cos c2 sin .

Assume X V initialized follows:
X (t0 ) = 0
V (t0 ) = r .

substituting values equations above, one obtains equation system
0 = c1 sin t0 + c2 cos t0
r = c1 cos t0 c2 sin t0 ,

whose solution (Ylmaz, 2005) yields c1 = r cos t0 c2 = r sin t0. Substituting c1 c2
Equation (1), get X (t ) = r (cos 0 sin sin 0 cos ) = r sin (t 0 ) , thereby proving
lemma.
Proof Theorem 6 (continued):
Therefore, equate landmark v1 V unit/2 shown Table 12, initialize X
V 0 v1, respectively, ensure
X (t ) =

unit
sin(t t0 ) ,
2

i.e., variable X oscillates values unit/2 unit/2, desired.
consistent Lemma 7, oscillating variables Table 12 start simulation
qualitative values listed Table 13. variables, except B, starts value
<(0, ), inc>, initialized previously described.
VARIABLE

QUANTITY SPACE

INITIAL VALUE

U

[0, unit]

<(0, unit), dec>

E

(-, 0, )

<0, std>

X

(-, 0, )

<0, dec>

V

(-, v1, 0, )

<v1, std>



(-, 0, )

<0, inc>

Table 13: Quantity Spaces Initial Values Oscillating Variables
going denote two operating regions corresponding ith instruction
URM program OpRegi,1 OpRegi,2. variables qualitative values inherited
possible transitions, variable ever undergoes discontinuous change. Looking
carefully Tables 14-21, correspond initialization, instruction types, ending
URM, see simulation flows unique branch exception zero type
566

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

operating regions, possibility simulation branches one
behavior, behaviors correspond expected trajectory actual
URM directed OpReg|P|+1,1. (Note transitions infinite landmarks need
considered, since assume infinite landmarks specified unreachable values
variables models.) registers stay constant OpReg|P|+1,1, single operating
region corresponding end URM program, reached. rest proof
Theorem 2. contradiction variable ensures behavior nonhalting URM leads consistent initial state, hence determining consistency initial
state equivalent deciding halting problem, leading contradiction.
Operating Region: OpReg0
{Type: Initialization}
Constraint Set: required input value representation constraints (see Table 11)
B(t) + U(t) = ONEUNIT(t) correspondence 0 + unit = unit
add constraints linking NRi TRi relevant nunit variables
add constraints defining Dij variables
clock constraints (Table 12)
variables except B, U, X, V, E, constant.
Possible Transition:
Trigger: ( U = <0, std> )
New operating region: OpReg1,1
Variables inheriting qualitative values: variables

Table 14: Template Single Operating Region Corresponding Initialization Stage
3.2 Simulation within Single Operating Region
incompleteness proofs subsection 3.1 (as well Say & Akn, 2003) depend
capability turning constraints necessary, provided
operating region transition feature. Would problem persist forsook feature,
focused simulation qualitative models single operating region? show
answer question affirmative.
3.2.1 HILBERTS TENTH PROBLEM
name suggests, Hilberts Tenth Problem tenth 23 problems
announced 1900 famous mathematician David Hilbert challenge
mathematicians 20th century. asks algorithm deciding whether given
multivariate polynomial integer coefficients integer solutions. proven
algorithm exists (Matiyasevich, 1993). fact used Say Akn (2003)
original proof existence ineradicable spurious predictions outputs qualitative
simulators employing operating region transition feature larger set constraint types
deal paper.

567

fiYILMAZ & SAY

proof presented shortly, use undecidability slightly modified variant
setup described Hilbert: assume guarantee none variables given
polynomial zero solution whose existence question. clear modified
problem unsolvable well, following argument: Assume algorithm
takes multivariate polynomial integer coefficients input, announces
whether solution variables nonzero integer values exists finite time.
use subroutine construction algorithm sought Hilberts original
problem follows: systematically produce 2n polynomials input polynomial n
variables, new polynomials corresponds different subset
variables original polynomial replaced zero. run new
polynomials. easy see find one polynomials nonzero
integer solutions original polynomial integer solutions.
Operating Region: OpRegi,1
{Type: zero(n)}
Constraint Set: add constraints defining Dij variables
clock constraints (Table 12)
variables except U, X, V, E, A, NRn, Dij n {i,j} constant.
Possible Transition:
Trigger: ( U = <unit, std> ) ( NRn = <0, std> )
New operating region: OpRegi,2
Variables inheriting qualitative values: variables
Possible Transition:
Trigger: (( U = <unit, std> ) ( NRn <0, std> )) ( NRn = <(0, ), std> ) ( NRn = <(-, 0), std> )
New operating region: OpReg|P|+1, 1
Variables inheriting qualitative values: variables

Table 15: Template First Operating Region Corresponding zero(n) Instructions
3.2.2 SOUND COMPLETE QSIM WITHIN SINGLE OPERATING REGION SOLVES HILBERTS
TENTH PROBLEM
Theorem 8: Even qualitative representation narrowed derivative, add,
mult constant constraints used QDEs, simulation proceeds single
operating region, still impossible build sound complete qualitative simulator based
input-output vocabulary.
going start proof preliminary lemmata, first
reminiscent Lemma 7 previous subsection:
Lemma 9: real constant equated QSIM variable Xi, QSIM variable Yi
equated function sin ( X (t t0 )) using derivative, add, mult, constant constraints.
Proof: case Xi = 0 trivial, handled single constant constraint.
remaining case, consider following equation set:
568

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

Operating Region: OpRegi,2
{Type: zero(n)}
Constraint Set: add constraints defining Dij variables
clock constraints (Table 12)
variables except U, X, V, E, A, TRn constant.
Possible Transition:
Trigger: ( U = <0, std> ) ( TRn = <0, std> )
New operating region: OpRegi+1,1
Variables inheriting qualitative values: variables
Possible Transition:
Trigger: (( U = <0, std> ) ( TRn <0, std> ) ) ( TRn = <(0, ), std> ) ( TRn = <(-, 0), std> )
New operating region: OpReg|P|+1, 1
Variables inheriting qualitative values: variables

Table 16: Template Second Operating Region Corresponding zero(n) Instructions

Operating Region: OpRegi,1
{Type: succ(n)}
Constraint Set: TRn(t)+ U(t)= NRn(t)
add constraints defining Dij variables
clock constraints (Table 12)
variables except U, X, V, E, A, NRn, Dij n {i,j} constant.
Possible Transition:
Trigger: ( U = <unit, std> )
New operating region: OpRegi,2
Variables inheriting qualitative values: variables

Table 17: Template First Operating Region Corresponding succ(n) Instructions
d2
Yi (t ) + Wi Yi (t ) = 0
dt

Xi > 0
X ,
Wi = X i2 , Wi =
X , X < 0.

initial values
Yi (t0 ) = 0

569

(2)

(3)

fiYILMAZ & SAY

Operating Region: OpRegi,2
{Type: succ(n)}
Constraint Set: TRn(t)+ U(t)= NRn(t)
add constraints defining Dij variables
clock constraints (Table 12)
variables except U, X, V, E, A, TRn constant.
Possible Transition:
Trigger: ( U = <0, std> )
New operating region: OpRegi+1,1
Variables inheriting qualitative values: variables

Table 18: Template Second Operating Region Corresponding succ(n) Instructions

Operating Region: OpRegi,1
{Type: jump(m, n, q)}
Constraint Set: add constraints defining Dij variables
clock constraints (Table 12)
variables except U, X, V, E, constant.
Possible Transition:
Trigger: ( U = <unit, std> )
New operating region: OpRegi,2
Variables inheriting qualitative values: variables

Table 19: Template First Operating Region Corresponding jump(m, n, q) Instructions
Vi (t0 ) = X ,

Vi(t) time derivative Yi(t).
general solution Equation (2) is:

(

)

(

)

Yi (t ) = c1 sin Wi + c2 cos Wi .

Substituting Wi Equation (3) initial values equations Yi Vi,
solving equation systems results following (Ylmaz, 2005):
Xi > 0, c1 = cos(Xit0) c2 = sin(Xit0).
Xi < 0, c1 = cos(Xit0) c2 = sin(Xit0).
substitute formula Yi(t), obtain:
Yi (t ) = cos( X t0 )sin ( X ) sin ( X t0 ) cos( X ) = sin ( X (t t0 )) ,
570

Xi > 0,

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

Operating Region: OpRegi,2
{Type: jump(m, n, q)}
Constraint Set: add constraints defining Dij variables
clock constraints (Table 12)
variables except U, X, V, E, constant.
Possible Transition:
Trigger: ( Dmn = <0, std> ) ( U = <0, std> )
New operating region: OpRegq,1
Variables inheriting qualitative values: variables
Possible Transition:
Trigger: ( Dmn <0, std> ) ( U = <0, std> )
New operating region: OpRegi+1,1
Variables inheriting qualitative values: variables

Table 20: Template Second Operating Region Corresponding jump(m, n, q) Instructions

Operating Region: OpReg|P|+1, 1
{Type: End}
Constraint Set: S(t) = 0
variables except U, X, V, E, constant.

Table 21: Model Operating Region Corresponding End URM Program
Yi (t ) = cos( X t0 )sin (( X ) ) sin ( X t0 ) cos(( X ) ) = sin ( X (t t0 )) ,

Xi < 0.

Hence, Yi(t) = sin ( X (t t0 )) Xi 0.
Table 22 shows Equations (2) (3) initial values given representable
using derivative, add, mult, constant constraints. Note Xi kept constant
initialized either (0, ) (, 0), depending intended sign number, Yi
Ci must start zero, consistent construction above.
Lemma 10: Starting t0, function = sin(tt0) reaches value 0 first time time
point tE = t0 + . Moreover function Yi = sin(Xi(tt0)) reaches 0 time point tE
Xi integer.
Proof: equation sin(tt0) = 0 implies tt0 = n, n , since interested first
time point t0 becomes 0, get tE = t0 + . part second
statement, assume function Yi = sin(Xi(tt0)) reaches 0 tE = t0 + .
sin ( X (t 0 + 0 )) = sin ( X ) = 0 implies Xi integer. part, use
knowledge Xi integer conclude Yi(tE) = sin(Xi(t0 + t0)) = sin(Xi) = 0.
571

fiYILMAZ & SAY

CONSTRAINTS

MEANING

Z=0
Xi(t) + Ci(t) = Vi(t)

Vi(t0) = Xi

d/dt(Yi, Vi)

dYi
= Vi (t )
dt

d/dt(Vi, Ai)

2Yi
= Ai (t )
dt

Xi(t) Xi(t) = Wi(t)

Wi = X i2

Wi(t) Yi(t) = Li(t)

Li (t ) = Wi Yi (t )

Ai(t) + Li(t) = Z(t)

2Yi
+ Wi Yi (t ) = 0
dt

Table 22: Model Fragment Used Obtain Relationship Yi = sin ( X (t t0 ))
Proof Theorem 8: already mentioned, proof relies contradiction, namely
sound complete simulator, existed, could used construct algorithm solving
Hilberts Tenth Problem, follows:
Assume given polynomial P(x1, x2, x3, ..., xn) integer coefficients. start
constructing QSIM model fragment says P(x1, x2, x3, ..., xn) = 0: already
seen Section 3.1 equate desired integer QSIM variable. Represent integers
appearing coefficients polynomial manner. Introduce QSIM variable Xi
xi, declare Xi constant, use add mult constraints equate sum
products P(X1, X2, X3, ..., Xn) QSIM variable P, initialized 0. Note
tantamount saying present values Xi form solution polynomial.
clearly done single operating region, constraints types mult, add
constant.
extend model necessary constraints auxiliary variables equate
new variable function sin(tt0). (Either Lemma 7 Lemma 9 used
purpose.) specify Ys quantity space [0, ), simulation guaranteed finish
= tE = t0 + . Xi, define associated auxiliary variables Ci, Li, Wi, Vi, Ai Yi,
add template Table 22 model express relationship Yi = sin(Xi(tt0)).

equate variable YS sum squares Yi, i.e. YS =

n





2

. Note YS = 0,

=1

Yi 0.
Finally, need make sure consistent behaviors ones Xi
integers (that is, relying Lemma 10, behaviors variable YS becomes 0 tE).
serve aim, add constraint F(t) Y(t) = YS(t) model.
simulate model 2n times, run corresponding different way initializing
Xi magnitudes selected set {(0, ), (, 0)}. sound complete simulator
572

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

would accept initial states Xi whose values cause
inconsistency model. Xi correspond exactly integer solutions
given polynomial, following reasoning variable F:
Note F defined YS/Y F(t) Y(t) = YS(t) constraint. know Y, Yi,
hence YS initially 0, meaning one use lHpitals rule find initial
value F. important, since Fs initial magnitude derivative infinite, QSIM
even supposed consider successors initial state. (We declare infinite landmarks
unreachable values variables, mentioned earlier. Even Fs magnitude finite
derivative infinite, simulation supposed continue, continuity
requirement would violated.) Fortunately,
n

sin ( X (t ))
2

F (t ) =

0



=1

sin (t t0 )

finite magnitude derivative t0: = t0, use lHpitals rule find
n

0
F (t0 ) = =
0

2X



sin ( X (t 0 t0 )) cos( X (t0 t0 ))

=1

= 0.

cos(t0 t0 )

Fs qualitative direction;
dF
(t ) =
dt

2 X sin ( X (t t0 )) cos( X (t t0 )) sin 2 ( X (t t0 )) cos(t t0 )

,



sin (t t0 )
sin 2 (t t0 )
=1

n



turns out, several applications lHpitals rule,
dF
(t0 ) =
dt

n

X

2


,

=1

clearly finite positive number, Fs initial qualitative value therefore <0, inc>.
Obviously, F = YS/Y guaranteed finite tE, reaches 0. variable YS
nonzero (implying least one Yi nonzero, Lemma 10 corresponding
Xi integer) tE, F(tE) equal , impossible since infinity declared
unreachable, states would eliminated spurious. If, hand, YS(tE) = 0,
then, see lHpitals rule, knowledge Xi integers,
n

0
F (t E ) = =
0


=1

n

2 X sin ( X (t E t0 ))cos ( X (t E t0 ))
=

cos (t E t0 )

2X
=1



sin ( X ) cos( X )
cos( )

= 0,

behaviors ending states supposed included simulation output.
supposedly complete sound simulator rejects initial states model due
inconsistency 2n runs, reason behavior predictions considered
simulator ended F(tE) = , inconsistency propagated back initial state led
rejection cases. conclude polynomial integer solutions.
hand, even one simulations prints initial state goes
successors, conclude solution exists. forms decision procedure required
573

fiYILMAZ & SAY

Hilberts Tenth Problem, leading contradiction. Therefore, sound complete simulation
impossible even one restricts oneself single operating region limited constraint
vocabulary mentioned statement theorem.

4. Conclusion
paper, considered several alternative subsets qualitative representation,
showed ineradicable spurious prediction problem persists even add
constant constraints allowed. one allows mult constraint well, resulting
qualitative simulator inherently incomplete even representation negative numbers
forbidden every variable forced specified zero uncertainty (i.e. single
unambiguous real number) initial state. final proof shows even ability
handling models multiple operating regions removed representation,
incompleteness problem would still persist, provided add, constant, derivative, mult
constraints allowed vocabulary. Note none vocabularies include
monotonic function constraint, relation type native qualitative
representation.
Although results paper demonstrated using QSIM representation input
output, valid qualitative simulators whose input output vocabularies
expressive specified subsets QSIM. (Also note proofs apply
automatically semi-quantitative simulators, whose representations extension
pure QSIM.) believe results important sense provide deeper
insight causes spurious predictions, helpful researchers aiming
construct provably sound complete simulators using weaker representations.
Finally, wish stress findings amount bad piece news
usefulness qualitative simulators practical domains usually utilized
may seem uninitiated eye. ones model specified level precision
involved models paper, one employ qualitative reasoner anyway.
really annoys users qualitative simulators occasional prediction eradicable
spurious behaviors, strengthening algorithms additional filters increasing
mathematical sophistication get rid continues important line
research.

References
Cutland, N. J. (1980). Computability: Introduction Recursive Function Theory. Cambridge,
UK: Cambridge University Press.
de Kleer, J., & Brown, J. S. (1984). qualitative physics based confluences. Artificial
Intelligence, 24, 7-83.
Fouch, P., & Kuipers, B. J. (1992). Reasoning energy qualitative simulation. IEEE
Transactions Systems, Man, Cybernetics, 22, 47-63.
Knik, T., & Say, A. C. C. (2003). Duration consistency filtering qualitative simulation.
Annals Mathematics Artificial Intelligence, 38, 269-309.
Kuipers, B. J., (1986). Qualitative simulation. Artificial Intelligence, 29, 289-338.

574

fiCAUSES INERADICABLE SPURIOUS PREDICTIONS QUALITATIVE SIMULATION

Kuipers, B. J. (1994). Qualitative Reasoning: Modeling Simulation Incomplete
Knowledge. Cambridge, MA: MIT Press.
Matiyasevich, Y. (1993). Hilberts Tenth Problem. Cambridge, MA: MIT Press.
Missier, A. (1991). Mathematical structures qualitative calculus, contribution qualitative
simulation. (In French) Ph.D. thesis, Institut National des Sciences Appliques de Toulouse.
Say, A. C. C. (1998). LHpitals filter QSIM. IEEE Transactions Pattern Analysis
Machine Intelligence, 20, 1-8.
Say, A. C. C. (2001). Improved reasoning infinity using qualitative simulation. Computing
Informatics, 20, 487-507.
Say, A. C. C. (2003). Sound complete qualitative simulation requires quantitative filtering.
Annals Mathematics Artificial Intelligence, 38, 257-267.
Say, A. C. C., & Akn, H. L. (2003). Sound complete qualitative simulation impossible.
Artificial Intelligence, 149, 251-266.
Say, A. C. C., & Kuru, S. (1993). Improved filtering QSIM algorithm. IEEE Transactions
Pattern Analysis Machine Intelligence, 15, 967-971.
Shepherdson, J. C., & Sturgis, H. E. (1963). Computability recursive functions. Journal
ACM, 10, 217-255.
Shults, B., & Kuipers, B. (1997). Proving properties continuous systems: Qualitative
simulation temporal logic. Artificial Intelligence, 92, 91-129.
Struss, P. (1990). Problems interval-based qualitative reasoning. Weld, D. S., & de Kleer, J.
(Eds.) Readings Qualitative Reasoning Physical Systems. San Mateo, CA: Morgan
Kaufmann, 288-305.
Weld, D. S., & de Kleer, J. (Eds.) (1990). Readings Qualitative Reasoning Physical
Systems. San Mateo, CA: Morgan Kaufmann.
Ylmaz, . (2005). Computability-theoretic limitations qualitative simulation. M. S. Thesis,
Boazii University, stanbul, Turkey.
(http://www.cmpe.boun.edu.tr/graduate/allthesis/m_3.pdf)

575


