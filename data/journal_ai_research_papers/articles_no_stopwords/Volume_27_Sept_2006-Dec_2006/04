journal artificial intelligence

submitted published

causes ineradicable spurious predictions qualitative simulation
zgr ylmaz
c cem say
department computer engineering
boazii university
bebek stanbul turkey

yilmozgu boun edu tr
say boun edu tr

abstract
recently proved sound complete qualitative simulator exist
long input output vocabulary state art qsim used
input cause simulator coverage guarantee make spurious
predictions output examine whether meaningfully expressive restriction
vocabulary possible one build simulator soundness
completeness properties prove several negative sound qualitative simulators
employing subsets qsim representation retain operating region transition feature
support least addition constancy constraints shown inherently incomplete
even simulations restricted run single operating region constraint
vocabulary containing addition constancy derivative multiplication relations makes
construction sound complete qualitative simulators impossible

introduction
recently proved say akn sound complete qualitative simulator
exist long input output vocabulary state art qsim
kuipers used input cause simulator
coverage guarantee make spurious predictions output examine whether
meaningfully expressive restriction vocabulary possible one build
simulator output consistent solutions input model
prove several negative sound qualitative simulators employing subsets qsim
representation retain operating region transition feature support least
addition constancy constraints shown inherently incomplete persists
variables forced change continuously region transitions slightly larger
set constraint types allowed even simulations restricted run single
operating region constraint vocabulary containing addition constancy derivative
multiplication relations makes construction sound complete qualitative simulators
impossible findings may helpful researchers interested constructing qualitative
simulators improved theoretical coverage guarantees weaker representations

background
start brief overview qualitative simulation concentrating representations used
input output vocabularies qualitative simulators subsection summarizes previous
work two theoretical properties qualitative simulators interest us subsection
short requirements specification hypothetical sound complete qualitative simulator

ai access foundation rights reserved

fiyilmaz say

qualitative simulation
many domains scientists engineers incomplete amount information
model governing dynamic system consideration renders formulating
exact ordinary differential equation ode impossible incompletely specified differential
equations may appear contexts aim collective proofs behavioral
properties infinite set systems sharing structure odes
describing proceed reasoning task cases mathematical tools embodying
methods making use available information obtain hopefully small set
possible solutions matching model needed qualitative reasoning qr researchers
develop ai programs use weak representations intervals rather point values
quantities general shape descriptions rather exact formulae functional relationships
vocabularies perform reasoning tasks systems incomplete
specifications following use notation terminology qsim kuipers
state art qualitative simulation methodology although noted
incompleteness proving valid reasoners whose input output
vocabularies rich enough support representational techniques used
proofs
qualitative simulator takes input qualitative differential equation model system
terms constraints representing relations systems variables addition
model qualitative values variables time point simulation
start given produces list possible future behaviors may
exhibited systems whose ordinary differential equations match input model
variables system modeled qsim continuously differentiable functions time
limits variable first derivatives exist endpoints
domains variable quantity space totally ordered collection symbols landmarks
representing important values take zero standard landmark common
variables quantity spaces allowed landmarks ends functional
relationships asymptotic shapes explicitly represented appropriate quantity
space declared span proper subset extended reals instance makes
sense bound quantity space variable certainly nonnegative pressure
left necessary user specify one bounds quantity space
unreachable example unreachable value variables
discussed reachable points intervals quantity space make set
possible qualitative magnitudes variable qualitative direction variable defined
sign derivative therefore possible values inc dec std
variables qualitative value pair consisting qualitative magnitude qualitative
direction collection qualitative values variables makes state system
laws according system operates represented constraints describing
time independent relations variables step simulation qsim uses set
transition rules implicitly generate possible next values variables
combinations values filtered constitute complete states
every constraint still satisfied values variables remain
seven basic types constraints qsim see table type constraint
imposes different kind relation arguments example constraint
b combination variable values variables b
nonzero sign magnitudes directions filtered sometimes additional
knowledge constraints allows filtering example know
b landmark values b moment time past


ficauses ineradicable spurious predictions qualitative simulation

eliminate value combinations b magnitudes less greater
landmarks b called corresponding values constraint
equation b correspondence constraint model except derivative
type correspondence equations sign algebra kuipers employed
implement arithmetic relations qualitative magnitudes note since
relationship corresponds infinite number possible quantitative functions
monotonicity property single qsim model containing constraints correspond
infinitely many odes
constraint name
add

notation
x z

constant

x landmark

derivative

dt x



x f f



x f f

minus
mult

x
x z

explanation

x
dt

x
dt
f x f f
f domain
f x f f
f domain

table qualitative constraint types
qsim input vocabulary enables user describe complicated terms
several different constraint sets representing different operating regions system
consideration user specifies boundaries applicability ranges operating
regions terms conditions indicate simulator effect transition
another operating region obtained
operating region transition occur one specify
following possible transition
boolean expressions composed primitives form variablename qualitativevalue
trigger transition satisfied
name target operating region
names variables inherit qualitative magnitudes directions
first state transition last state transition
value assignments variables explicitly specified values first state
transition
provided qualitative system model name initial operating region
description qualitative values variables initial state qsim starts simulation
generates tree system states represent solutions qualitative differential
equation composed constraints input root tree input initial state
time point label representing numerical value initial instant every path


fiyilmaz say

root leaf predicted behavior system qualitative format
behavior usually corresponds infinite set trajectories sharing qualitative
structure phase space time point interval states appear alternately behaviors long
operating region valid operating region transitions reflected behaviors two
time point states following
related work soundness incompleteness
important property qualitative simulators coverage guarantee qualitative
simulation sound guaranteed ode initial state matches
simulators input behavior output matches odes solution
kuipers proved exists qualitative simulator namely qsim
soundness property guarantee makes qualitative simulation valuable design diagnosis
method kuipers design set simulation predictions model
contain catastrophic failure proof modeled system exhibit failure
shults kuipers diagnosis none behaviors simulation output
model exhibited particular system sure actual system
governed model
another property one would wish ones qualitative simulator possess completeness
guarantee every behavior output corresponds solution least one
ode matching input early days qr conjectured de kleer brown
qualitative simulators employing local constraint satisfaction methods weld de
kleer complete however contained guaranteed
coverage theorem kuipers showed version qsim described
indeed qualitative simulators day incomplete demonstrating
simulation frictionless mass spring oscillator predicts unrealizable spurious behaviors
amplitude decreases periods increases others lack guarantee
predicted behaviors real negative impact potential applications design
set simulation predictions model contain catastrophic failure
necessarily point error mechanism maybe prediction question
spurious behavior similar occurs diagnosis applications
several types spurious qualitative simulation predictions discovered
following years struss pointed whenever variable appeared
arithmetic constraint spurious states could pass filter instance filters add
constraint unable delete states involving nonzero values variable z equation
z nonzero clearly sound complete qualitative simulator
would possess algebraic manipulation capabilities enable us conclude z
case say kuru discovered class spurious predictions caused rigidity
internal representation correspondences unnecessarily weak implementation
subtraction say showed spurious behaviors due lack explicit
enforcement lhpitals rule original yet another family inconsistent
predictions found caused weaknesses methods used distinguish finite
infinite time intervals behaviors say see missier knik say
proved model behavior descriptions could encode information
relative finite lengths intervals contain failure check overall
consistency pieces information yields another class spurious predictions finally
say showed similar encoding could occur exact numerical values
landmarks sound complete qualitative simulator would support capability



ficauses ineradicable spurious predictions qualitative simulation

comparing magnitudes two elements rich subset real numbers
avoid particular set spurious predictions
interestingly discoveries actually good news users qualitative
simulators order able say particular predicted behavior spurious therefore
suitable elimination simulator output without forsaking soundness property one
first proves behavior mathematically inconsistent simulated model
starting state instance aforementioned spurious oscillations frictionless massspring system shown violate conservation constraint follows directly
structure input equations proof seen specification
filter routine would eliminate exactly set behaviors violate law
establishes kinetic energy constraint fouch kuipers filter
developed fashion eliminate class spurious predictions exemplified ones
mass spring system kuipers spurious prediction classes mentioned
previous paragraph fact discovered simultaneously cures
question whether exists sound complete qualitative simulator finally
settled say akn proved sound qualitative simulator
input output representation task specification qsim methodology exist input
initial states whose simulation output contain spurious predictions note
say present qsim augmented filters make
sound complete refutes existence program whatsoever perform
job
proof say akn shows sound complete qualitative simulator
employing vocabulary mentioned existed could used solve given
instance hilberts tenth famously undecidable matiyasevich
procedure involves building qsim model representing given simulating several
times starting carefully constructed initial states representing candidate solutions
examining output read solution model set contain inconsistency
answer considered existence one
behaviors output means yes since impossible make decision correctly
general case follows would input giving rise behavior predictions
whose consistency status determined simulator whose best course action
would include output keep soundness guarantee intact cases
correct answer would prediction spurious behaviors note
ineradicable spurious predictions unlike ones discussed earlier
important note proof necessarily mean hope constructing
sound complete qualitative simulator lost one may try weaken input output
representation longer possesses problematic power enables one
unambiguously encode instances hilberts tenth qsim model course
weakening must kept minimum possible level resulting program useful
reasoner instance removing programs ability distinguish negative
nonnegative numbers would possibly yield sound complete simulator output
program would state everything possible want
methods one examine incompleteness proof say akn see
exactly features qsim representation used construction reduction
future qualitative simulator supporting vocabulary subset would incorporating
start
listing qsim representational items used proof
derivative mult constant constraint types utilized note absence add
constraint implemented others list qualitative interval


fiyilmaz say

magnitudes one might call infinite uncertainty actual value
represented number used initializing several variables form essential part
argument qsims ability explicitly represent infinite limits utilized equating
landmark number stating twice limit function arctan x x nears
infinity finally operating region transition feature used heavily since thanks
characteristic sine function two dependent variables represented
qualitative vocabulary
section examine several different ways weakening qsim vocabulary try
understand combinations features responsible ineradicable
spurious predictions
desiderata sound complete qualitative simulator
important point clarify exactly one would expect hypothetical sound
complete qualitative simulator input model yields finite behavior tree genuine
solutions obvious program supposed print descriptions behaviors
forming branches tree nothing else finite time input model initial
state inconsistent e correct output empty tree program report
inconsistency finite time
finally input yields behavior tree infinitely many branches program
supposed run forever adding state output every formally
every positive integer program printed first
states behavior tree according ordering root e initial state
state number descendants particular state printed state
end sth step execution note requirements mean sound
complete simulator would able decide whether initial system state description
given consistent input model within finite time necessity used
proofs incompleteness section

incompleteness qualitative simulators
section examine two different ways restricting qualitative vocabulary
hope obtaining representation allows construction sound complete
simulators subsection considers usage several reduced sets qualitative constraint
types retaining operating region transition feature examine possible
restriction way variable values handled operating region transitions subsection
investigation capabilities qualitative simulators restricted input
single operating region variants shown exhibit
ineradicable spurious predictions soundness guarantee present
reduced constraint sets
subsection undecidability properties abstract computational
devices called unlimited register machines urms first present brief introduction
urms proceed proofs



ficauses ineradicable spurious predictions qualitative simulation

unlimited register machines
easiest way thinking urm see computer infinite memory
supports particularly simple programming language urm cutland program p
consists finite sequence instructions p instructions refer machines
registers ri store arbitrarily big natural number use notation r r
r register contents
purposes sufficient consider three types urm instructions
succ n increment content register n one
rn rn
zero n set content register n zero
rn
jump n q compare registers n equal continue instruction q
rm rn jump iq
urm program starts execution first instruction current instruction
jump whose equality condition satisfied followed next instruction list
program ends attempts continue beyond last instruction jump nonexistent
address attempted assume without loss generality jumps address p
p p urm program computes function p k nk n p k ak
computed follows
initialization store ak registers r rk respectively set registers
referenced program
iteration starting execute instructions order described
output program ends computed value function number r
contained register r program never stops p k ak undefined
table contains example urm program computes function f x x note
function n n input values x stored registers r r
output function expected stored r end program


zero



jump



succ



succ



jump

table urm program computing f x x
program first sets r zero checks see r r case
otherwise increments r r continues x incremented times
value r returned
urm model computation equivalent numerous alternative
turing machine model gdel kleene partial recursive functions model churchs lambda


fiyilmaz say

calculus cutland shepherdson sturgis sense set functions
computable urms identical set functions computed
means device simulate given urm powerful
turing machine since simulate given turing machine proofs
incompleteness qsim vocabulary reduced constraint sets make use
fact halting urms undecidable cutland
sound complete qsim reduced constraint sets solves halting

incompleteness subsets qsim vocabulary presented
subsection following theorem shows qsim simulate
urm thereby turing equivalent computational power
theorem execution urm program p p instructions given input
represented simulation qsim model p operating regions
proof proof construction suppose given urm program p
instructions p let r rn registers mentioned instructions p
ri define qsim variable nri represent case ri
nonzero initial value ai set auxiliary qsim variables representing ai table describes
idea behind representation four variables named u w z b u
represents clock rises every computational step w derivative u
z constant zero every operating region b additional auxiliary variable
constraints

initial values

conclusions

one one one
one one two
one two three

one one

one constant
two constant
three constant

table qsim model fragment demonstrating representability exact integer values
qsim model p operating regions instruction ii p
corresponding operating region named opregi two remaining regions opreg
corresponding initialization stage p opreg p corresponding end
specification operating region must contain constraints valid
region boolean conditions composed primitives form
variable qualitative magnitude qualitative direction would trigger transitions
operating regions obtained lists detail variables inherit
previous magnitudes directions transition initialized
values switch tables describe prepare items operating
regions target model program p five different operating region
templates types used construction one urm instruction type one
opreg one opreg p
model opreg depicted table simulation p start
nri variables equated proper initial values specified user p ones
initialized zero handled constant constraints ones positive initial values


ficauses ineradicable spurious predictions qualitative simulation

specified constant values add constraints link number
variables exemplified table instance nr initialized three
constraint three z nr add constraint b u one serves express
fact landmark named one us quantity space equal note
add constraints mentioned paragraph exist opreg since would disrupt
intended behavior operating regions
seen tables exactly variables keep values transition depends
type target operating region regions corresponding instructions type zero n
inherit value rn predecessors since involve replacement
value zero anyway types regions including succ n type inherit
register contents predecessors although value rn change succ
instruction value depends old one unlike case zero n corresponding
qsim variable nrn increases continuously simulation region type succ n
region transition occurs exactly moment increased one unit
operating region opreg
type initialization
constraint set dt u w
b u one correspondence one one
required number representation constraints see table
add constraints linking nri relevant number variables see text
variables except u b constant
possible transition
trigger u one inc
operating region opreg
variables inheriting magnitudes directions see table indexed type opreg
variables asserted values u inc

table model operating region opreg corresponding initialization urm

type target
region
jump n q

variables inheriting
qualitative magnitudes
variables except u b

variables inheriting
qualitative directions
variables except u b nri

succ n

variables except u b

variables except u b nri

zero n

variables except u nrn

variables except u b nri

end

variables except u

variables except u nri

table variables inherit magnitudes directions according type
target operating region



fiyilmaz say

simulation given urm program proceeds follows described previous
subsection urm starts initial configuration registers r rk store
nonnegative integers ak form input program respectively nk
registers set correspondingly nri variables qsim model
quantity space nri variables nonzero initial values start simulation
qualitative values std whereas ones start std quantity space
variable u one landmark one equated mentioned u starts
initially qualitative value inc derivative u w quantity space speed
speed equated starts qualitative value speed std constant
whole simulation variable b quantity space starts dec
started opreg qsim compute single qualitative behavior segment ends
transition opreg u reaches one inc time point
operating region opregi
type zero n
constraint set dt u w
nrn
variables except u constant
possible transition
trigger u one inc
operating region opregi
variables inheriting magnitudes directions see table indexed type opregi
variables asserted values u inc

table model template operating regions corresponding zero n instructions

operating region opregi
type succ n
constraint set dt u w
b u nrn
variables except u nrn constant
possible transition
trigger u one inc
operating region opregi
variables inheriting magnitudes directions see table indexed type opregi
variables asserted values u inc

table model template operating regions corresponding succ n instructions



ficauses ineradicable spurious predictions qualitative simulation

note zero uncertainty values variables even ones initial
magnitude start simulation
model constrained sound complete qualitative simulator guaranteed
produce exactly one behavior prediction initial state corresponding valid urm input
see sufficient observe step simulation sufficient
information available simulator compute exact numerical value every variable
model corresponds tracing urm program keeping note register
contents step modeled urm halts particular input given initial
state qsim behavior supposed finite one ending variable u attempts
exceed one opreg p urm computation halt qsim behavior
supposed single infinite sequence states never visits opreg p
operating region opregi
type jump n q
constraint set dt u w
nrm b nrn
variables except u constant
possible transition
trigger u one inc b std
operating region opregi
variables inheriting magnitudes directions see table indexed type opregi
variables asserted values u inc
possible transition
trigger u one inc b std
operating region opregq
variables inheriting magnitudes directions see table indexed type opregq
variables asserted values u inc

table model template operating regions corresponding jump n q instructions

operating region opreg p
type end
constraint set dt u w
variables except u constant

table model operating region opreg p corresponding end urm
program
ready state version incompleteness theorem


fiyilmaz say

theorem even qualitative representation narrowed derivative add
mult constant constraints used qdes variable forced start finite
value zero uncertainty initial state still impossible build sound complete
qualitative simulator input output vocabulary
proof assume sound complete simulator exists solve
halting urms subroutine
construct corresponding qsim model described theorem urm program p
whose halting status particular input supposed decided define variable
quantity space one landmark one equated number starts
value one std initial state add constraints indicating constant
operating regions specify value inherited possible transitions insert
constraint opreg p consider simulator supposed
checking initial state consistency note would inconsistency
simulation ever enters opreg p since constraint inserted region says
zero would contradict inherited value one simulator
supposed make spurious predictions expected reject initial state time
inconsistent simulation going enter opreg p words urm program
consideration going halt sound complete simulator reject
initial state due inconsistency goes simulation conclude
program p halt forms decision procedure halting since
halting undecidable obtained contradiction conclude sound
complete simulator representation exist
fact possible remove derivative constraint used proof
ensure behavior tree one branch representation well
incompleteness shown would still stand
theorem even qualitative representation narrowed add mult
constant constraints used qdes variable forced start finite value
zero uncertainty initial state still impossible build sound complete
qualitative simulator input output vocabulary
proof make minor modification proof theorem observe
construction theorem u starts every operating region inc fact
derivative positive constant forces reach value one inc next time point
transition next operating region occurs u receives value inc
happens remove variable w derivative constraints model case
since us derivative fixed three possible states u second time point
simulation operating region one inc one std one std fix
inserting another possible region transition specification regions
except opreg p transition triggered u one values one std
one std target opreg p variable proof theorem
well variables inherited completely transition unwanted
behaviors would created due elimination us derivative end opreg p
therefore eliminated spurious accordance argument previous
proof hence simulator supposed accept initial state consistent
p halt meaning sound complete simulation impossible
representation well



ficauses ineradicable spurious predictions qualitative simulation

interestingly one even restrict representation nonnegative numbers
supported incompleteness proved still stands
theorem even qualitative representation narrowed add mult
constant constraints used qdes variable forced start finite value
zero uncertainty initial state variable allowed negative value time
simulation still impossible build sound complete qualitative simulator
input output vocabulary
proof previous proof variable b ever possibility negative value
occur jump region replace definition jump region template
table introduce variables c insert constraints say
variables constant operating regions c start zero inherited
transitions except target region type jump seen table b gets
value two compared register values equal unequal b
positive value different setup bs quantity space defined one
one equated variable ever negative value simulation b starts
simulation value one dec satisfy add constraint seen table rest
argument identical theorem
operating region opregi
type jump n q
constraint set nrm one c
nrn one
b c
variables except u constant
possible transition
trigger u one inc b one std
operating region opregi
variables inheriting magnitudes directions depends type opregi
variables asserted values u inc
possible transition
trigger u one inc b one std
operating region opregq
variables inheriting magnitudes directions depends type opregq
variables asserted values u inc

table alternative model template operating regions corresponding jump n q
instructions avoids negative numbers
alternatively keep negative numbers remove mult constraint
representation drop requirement variable starts simulation value zero
uncertainty



fiyilmaz say

theorem even qualitative representation narrowed add constant
constraints used qdes still impossible build sound complete qualitative
simulator input output vocabulary
proof used mult constraint proofs theorems equating variable
landmark values unambiguous integers assume delete mult constraints
model theorem number variables table replaced setup shown
table ri supposed initialized positive integer ai p equate nri
aiunit variable opreg method explained proof theorem note
use constant add constraints lot auxiliary variables purpose
constraints
oneunit unit
oneunit oneunit twounits
oneunit twounits threeunits

conclusions
twounits constant unit
threeunits constant unit

table sample model fragment equating variables integer multiples positive
landmark unit
landmarks previously named one variables quantity spaces equated
unit model execution succ n instruction increments nrns value one unit
jump instruction compares landmarks whose values equal uunit vunit instead
comparing two landmarks whose values equal natural numbers u v zero instruction
sets target register previous construction modeled machine
original urm since multiplication values coefficient unit
change flow program particular whether halts input rest
argument identical proof theorem
observe variables change qualitative magnitudes directions
discontinuously operating region transitions proofs previous theorems
next theorem proves maintaining soundness completeness simultaneously impossible
even allow qualitative variable perform change force
variables magnitude direction inherited next operating region
theorem even qualitative representation narrowed derivative add
constant constraints used qdes variables magnitude direction allowed
perform discontinuous changes operating region transitions still impossible build
sound complete qualitative simulator input output vocabulary
proof make changes qsim used simulating given
urm previous theorems qsim variable nri n
registers ri appearing urm program addition define variables dij
j n j satisfies equation dij nri nrj throughout
simulation keep track differences pairs register values clearly
achieved inserting several add constraints operating regions model
difference variables enable us compare two register values operating regions type
jump


ficauses ineradicable spurious predictions qualitative simulation

furthermore define auxiliary variables tri n tri initialized
values corresponding nri technique nri
instruction type given urm program define two operating regions
clock variable u increase first operating regions value unit std
decrease next one unit std std performing discontinuous jump
program order obtain variable behavior make use simple harmonic
oscillator model given table variable x denoting displacement
rest position oscillating object oscillates values unit unit
variable u equated x unit oscillating unit model template given
table added every operating region table contains variable names used
constructions previous proofs variables treated previously described
manner unless proof specifies otherwise following lemma establishes correctness
construction
constraints

correspondences

meaning

halfunit halfunit oneunit

c c unit

c unit

halfunit v e

c v

v unit

dt x v

dx
v
dt

dt v

x

dt

x z

x
x
dt

x halfunit u

u x unit

table model template obtain desired behavior variable u clock
oscillating qualitative values std unit std template inserted
constructed operating regions
lemma number r represented qsim landmark qsim variable x
equated function r sin derivative add constant constraints
proof lemma
seen table equation

x x
dt

expressed derivative add constant constraints equation general
solution form
x c sin c cos




fiyilmaz say

hence time derivative v form
v c cos c sin

assume x v initialized follows
x
v r

substituting values equations one obtains equation system
c sin c cos
r c cos c sin

whose solution ylmaz yields c r cos c r sin substituting c c
equation get x r cos sin sin cos r sin thereby proving
lemma
proof theorem continued
therefore equate landmark v v unit shown table initialize x
v v respectively ensure
x

unit
sin


e variable x oscillates values unit unit desired
consistent lemma oscillating variables table start simulation
qualitative values listed table variables except b starts value
inc initialized previously described
variable

quantity space

initial value

u

unit

unit dec

e



std

x



dec

v

v

v std





inc

table quantity spaces initial values oscillating variables
going denote two operating regions corresponding ith instruction
urm program opregi opregi variables qualitative values inherited
possible transitions variable ever undergoes discontinuous change looking
carefully tables correspond initialization instruction types ending
urm see simulation flows unique branch exception zero type


ficauses ineradicable spurious predictions qualitative simulation

operating regions possibility simulation branches one
behavior behaviors correspond expected trajectory actual
urm directed opreg p note transitions infinite landmarks need
considered since assume infinite landmarks specified unreachable values
variables registers stay constant opreg p single operating
region corresponding end urm program reached rest proof
theorem contradiction variable ensures behavior nonhalting urm leads consistent initial state hence determining consistency initial
state equivalent deciding halting leading contradiction
operating region opreg
type initialization
constraint set required input value representation constraints see table
b u oneunit correspondence unit unit
add constraints linking nri tri relevant nunit variables
add constraints defining dij variables
clock constraints table
variables except b u x v e constant
possible transition
trigger u std
operating region opreg
variables inheriting qualitative values variables

table template single operating region corresponding initialization stage
simulation within single operating region
incompleteness proofs subsection well say akn depend
capability turning constraints necessary provided
operating region transition feature would persist forsook feature
focused simulation qualitative single operating region
answer question affirmative
hilberts tenth
name suggests hilberts tenth tenth
announced famous mathematician david hilbert challenge
mathematicians th century asks deciding whether given
multivariate polynomial integer coefficients integer solutions proven
exists matiyasevich fact used say akn
original proof existence ineradicable spurious predictions outputs qualitative
simulators employing operating region transition feature larger set constraint types
deal



fiyilmaz say

proof presented shortly use undecidability slightly modified variant
setup described hilbert assume guarantee none variables given
polynomial zero solution whose existence question clear modified
unsolvable well following argument assume
takes multivariate polynomial integer coefficients input announces
whether solution variables nonzero integer values exists finite time
use subroutine construction sought hilberts original
follows systematically produce n polynomials input polynomial n
variables polynomials corresponds different subset
variables original polynomial replaced zero run
polynomials easy see one polynomials nonzero
integer solutions original polynomial integer solutions
operating region opregi
type zero n
constraint set add constraints defining dij variables
clock constraints table
variables except u x v e nrn dij n j constant
possible transition
trigger u unit std nrn std
operating region opregi
variables inheriting qualitative values variables
possible transition
trigger u unit std nrn std nrn std nrn std
operating region opreg p
variables inheriting qualitative values variables

table template first operating region corresponding zero n instructions
sound complete qsim within single operating region solves hilberts
tenth
theorem even qualitative representation narrowed derivative add
mult constant constraints used qdes simulation proceeds single
operating region still impossible build sound complete qualitative simulator
input output vocabulary
going start proof preliminary lemmata first
reminiscent lemma previous subsection
lemma real constant equated qsim variable xi qsim variable yi
equated function sin x derivative add mult constant constraints
proof case xi trivial handled single constant constraint
remaining case consider following equation set


ficauses ineradicable spurious predictions qualitative simulation

operating region opregi
type zero n
constraint set add constraints defining dij variables
clock constraints table
variables except u x v e trn constant
possible transition
trigger u std trn std
operating region opregi
variables inheriting qualitative values variables
possible transition
trigger u std trn std trn std trn std
operating region opreg p
variables inheriting qualitative values variables

table template second operating region corresponding zero n instructions

operating region opregi
type succ n
constraint set trn u nrn
add constraints defining dij variables
clock constraints table
variables except u x v e nrn dij n j constant
possible transition
trigger u unit std
operating region opregi
variables inheriting qualitative values variables

table template first operating region corresponding succ n instructions

yi wi yi
dt

xi
x
wi x wi
x x

initial values
yi







fiyilmaz say

operating region opregi
type succ n
constraint set trn u nrn
add constraints defining dij variables
clock constraints table
variables except u x v e trn constant
possible transition
trigger u std
operating region opregi
variables inheriting qualitative values variables

table template second operating region corresponding succ n instructions

operating region opregi
type jump n q
constraint set add constraints defining dij variables
clock constraints table
variables except u x v e constant
possible transition
trigger u unit std
operating region opregi
variables inheriting qualitative values variables

table template first operating region corresponding jump n q instructions
vi x

vi time derivative yi
general solution equation









yi c sin wi c cos wi

substituting wi equation initial values equations yi vi
solving equation systems following ylmaz
xi c cos xit c sin xit
xi c cos xit c sin xit
substitute formula yi obtain
yi cos x sin x sin x cos x sin x


xi

ficauses ineradicable spurious predictions qualitative simulation

operating region opregi
type jump n q
constraint set add constraints defining dij variables
clock constraints table
variables except u x v e constant
possible transition
trigger dmn std u std
operating region opregq
variables inheriting qualitative values variables
possible transition
trigger dmn std u std
operating region opregi
variables inheriting qualitative values variables

table template second operating region corresponding jump n q instructions

operating region opreg p
type end
constraint set
variables except u x v e constant

table model operating region corresponding end urm program
yi cos x sin x sin x cos x sin x

xi

hence yi sin x xi
table shows equations initial values given representable
derivative add mult constant constraints note xi kept constant
initialized depending intended sign number yi
ci must start zero consistent construction
lemma starting function sin tt reaches value first time time
point te moreover function yi sin xi tt reaches time point te
xi integer
proof equation sin tt implies tt n n since interested first
time point becomes get te part second
statement assume function yi sin xi tt reaches te
sin x sin x implies xi integer part use
knowledge xi integer conclude yi te sin xi sin xi


fiyilmaz say

constraints

meaning

z
xi ci vi

vi xi

dt yi vi

dyi
vi
dt

dt vi ai

yi
ai
dt

xi xi wi

wi x

wi yi li

li wi yi

ai li z

yi
wi yi
dt

table model fragment used obtain relationship yi sin x
proof theorem already mentioned proof relies contradiction namely
sound complete simulator existed could used construct solving
hilberts tenth follows
assume given polynomial p x x x xn integer coefficients start
constructing qsim model fragment says p x x x xn already
seen section equate desired integer qsim variable represent integers
appearing coefficients polynomial manner introduce qsim variable xi
xi declare xi constant use add mult constraints equate sum
products p x x x xn qsim variable p initialized note
tantamount saying present values xi form solution polynomial
clearly done single operating region constraints types mult add
constant
extend model necessary constraints auxiliary variables equate
variable function sin tt lemma lemma used
purpose specify ys quantity space simulation guaranteed finish
te xi define associated auxiliary variables ci li wi vi ai yi
add template table model express relationship yi sin xi tt

equate variable ys sum squares yi e ys

n







note ys



yi
finally need make sure consistent behaviors ones xi
integers relying lemma behaviors variable ys becomes te
serve aim add constraint f ys model
simulate model n times run corresponding different way initializing
xi magnitudes selected set sound complete simulator


ficauses ineradicable spurious predictions qualitative simulation

would accept initial states xi whose values cause
inconsistency model xi correspond exactly integer solutions
given polynomial following reasoning variable f
note f defined ys f ys constraint know yi
hence ys initially meaning one use lhpitals rule initial
value f important since fs initial magnitude derivative infinite qsim
even supposed consider successors initial state declare infinite landmarks
unreachable values variables mentioned earlier even fs magnitude finite
derivative infinite simulation supposed continue continuity
requirement would violated fortunately
n

sin x


f







sin

finite magnitude derivative use lhpitals rule
n


f


x



sin x cos x





cos

fs qualitative direction
df

dt

x sin x cos x sin x cos





sin
sin


n



turns several applications lhpitals rule
df

dt

n

x








clearly finite positive number fs initial qualitative value therefore inc
obviously f ys guaranteed finite te reaches variable ys
nonzero implying least one yi nonzero lemma corresponding
xi integer te f te equal impossible since infinity declared
unreachable states would eliminated spurious hand ys te
see lhpitals rule knowledge xi integers
n


f e





n

x sin x e cos x e


cos e

x




sin x cos x
cos



behaviors ending states supposed included simulation output
supposedly complete sound simulator rejects initial states model due
inconsistency n runs reason behavior predictions considered
simulator ended f te inconsistency propagated back initial state led
rejection cases conclude polynomial integer solutions
hand even one simulations prints initial state goes
successors conclude solution exists forms decision procedure required


fiyilmaz say

hilberts tenth leading contradiction therefore sound complete simulation
impossible even one restricts oneself single operating region limited constraint
vocabulary mentioned statement theorem

conclusion
considered several alternative subsets qualitative representation
showed ineradicable spurious prediction persists even add
constant constraints allowed one allows mult constraint well resulting
qualitative simulator inherently incomplete even representation negative numbers
forbidden every variable forced specified zero uncertainty e single
unambiguous real number initial state final proof shows even ability
handling multiple operating regions removed representation
incompleteness would still persist provided add constant derivative mult
constraints allowed vocabulary note none vocabularies include
monotonic function constraint relation type native qualitative
representation
although demonstrated qsim representation input
output valid qualitative simulators whose input output vocabularies
expressive specified subsets qsim note proofs apply
automatically semi quantitative simulators whose representations extension
pure qsim believe important sense provide deeper
insight causes spurious predictions helpful researchers aiming
construct provably sound complete simulators weaker representations
finally wish stress findings amount bad piece news
usefulness qualitative simulators practical domains usually utilized
may seem uninitiated eye ones model specified level precision
involved one employ qualitative reasoner anyway
really annoys users qualitative simulators occasional prediction eradicable
spurious behaviors strengthening additional filters increasing
mathematical sophistication get rid continues important line


references
cutland n j computability introduction recursive function theory cambridge
uk cambridge university press
de kleer j brown j qualitative physics confluences artificial
intelligence
fouch p kuipers b j reasoning energy qualitative simulation ieee
transactions systems man cybernetics
knik say c c duration consistency filtering qualitative simulation
annals mathematics artificial intelligence
kuipers b j qualitative simulation artificial intelligence



ficauses ineradicable spurious predictions qualitative simulation

kuipers b j qualitative reasoning modeling simulation incomplete
knowledge cambridge mit press
matiyasevich hilberts tenth cambridge mit press
missier mathematical structures qualitative calculus contribution qualitative
simulation french ph thesis institut national des sciences appliques de toulouse
say c c lhpitals filter qsim ieee transactions pattern analysis
machine intelligence
say c c improved reasoning infinity qualitative simulation computing
informatics
say c c sound complete qualitative simulation requires quantitative filtering
annals mathematics artificial intelligence
say c c akn h l sound complete qualitative simulation impossible
artificial intelligence
say c c kuru improved filtering qsim ieee transactions
pattern analysis machine intelligence
shepherdson j c sturgis h e computability recursive functions journal
acm
shults b kuipers b proving properties continuous systems qualitative
simulation temporal logic artificial intelligence
struss p interval qualitative reasoning weld de kleer j
eds readings qualitative reasoning physical systems san mateo ca morgan
kaufmann
weld de kleer j eds readings qualitative reasoning physical
systems san mateo ca morgan kaufmann
ylmaz computability theoretic limitations qualitative simulation thesis
boazii university stanbul turkey
http www cmpe boun edu tr graduate allthesis pdf




