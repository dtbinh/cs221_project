Journal Artificial Intelligence Research 27 (2006) 441-464

Submitted 03/06; published 12/06

Set Intersection Consistency Constraint Networks
Yuanlin Zhang

yzhang@cs.ttu.edu

Department Computer Science, Texas Tech University
Lubbock, TX 79414 USA

Roland H. C. Yap

ryap@comp.nus.edu.sg

Department Computer Science, National University Singapore
3 Science Drive 2, Singapore 117543

Abstract
paper, show close relation consistency constraint
network set intersection. proof schema provided generic way obtain consistency properties properties set intersection. approach simplifies
understanding unifies many existing consistency results, directs study
consistency set intersection properties many situations, demonstrated
results convexity tightness constraints paper. Specifically,
identify new class tree convex constraints local consistency ensures global
consistency. generalizes row convex constraints. Various consistency results
obtained constraint networks some, contrast existing work,
constraints tight.

1. Introduction
constraint network consists set variables finite domains system
constraints variables. important task find assignment
variables constraints network satisfied. assignment
exists, network satisfiable globally consistent, assignment called solution.
problem determining global consistency general constraint network NPcomplete. Usually search procedure employed find solution. practice, due
efficiency considerations, search usually equipped filtering algorithm
prunes values variable combinations values certain number variables
cannot part solution. filtering algorithm make constraint network
locally consistent sense consistent assignment variables always
extensible new variable. important interesting question local consistency is:
local consistency obtained sufficient determine global consistency
network without search? filtering algorithm polynomial
complexity, positive answer would mean network solved
polynomial time.
Much work done explore relationship local global consistency particular properties local consistency general. One direction
make use topological structure constraint network. classical result
graph constraint network tree, arc consistency network sufficient
ensure global consistency (Freuder, 1982).
c
2006
AI Access Foundation. rights reserved.

fiZhang & Yap

second direction1 makes use semantic properties constraints. monotone
constraints, path consistency implies global consistency (Montanari, 1974). Van Beek
Dechter (1995) generalize monotone constraints larger class row convex constraints.
Dechter (1992) shows certain level consistency constraint network whose
domains limited size ensures global consistency. Later, Van Beek Dechter (1997)
study consistency constraint networks tight loose constraints.
existing work along two approaches used specific different techniques
study local global consistency. particular, little commonality details
existing work. much existing work, techniques consequently
proofs given developed specifically results concerned.
paper, show much work connected together
new approach studying consistency constraint network. unite two seemingly
disparate areas: study set intersection special sets study k-consistency
constraint networks. fact, k-consistency expressed terms set intersection,
allows one obtain relationships local global consistency constraint
network properties set intersection special sets. main result
approach proof schema used lift results set intersection,
rather general, particular consistency results constraint networks. One benefit
proof schema lies provides modular way greatly simplify understanding
proofs consistency results. benefit considerable often proofs many
existing results complex hard-wired. Using new approach, show
precisely various properties set intersection key results.
Furthermore, proofs become mechanical.
following sketch illustrates briefly use approach. One property set
intersection intersection every pair (2) tree convex sets (see Section 3)
empty, intersection whole collection sets empty too.
property, see local information intersection every pair sets gives
rise global information intersection sets. Intuitively, relationship
local global information corresponds obtaining global consistency
local consistency. proof schema used lift result tree convex sets
following consistency result. binary constraint network tree convex constraints,
(2+1)-consistency (path consistency) implies global consistency network.
usefulness new set-based approach twofold. Firstly, gives clear picture
many existing results. example, many well known results second direction
based semantic properties constraints (including van Beek & Dechter, 1995, 1997),
well results first direction, shown easy proofs make use
set intersection properties. Secondly, directing study consistency set
intersection properties, helps improve existing results derive new results
demonstrated sections 57.
paper organized follows. Section 2, present necessary notations
concepts. Section 3, focus properties intersection tree convex sets sets
1. difference work concerned studying tractability constraint
languages (e.g., Schaefer, 1978; Jeavons, Cohen, & Gyssens, 1997). latter considers problems
whose constraints fixed set relations former studies constraint networks
special properties.

442

fiSet Intersection Consistency Constraint Networks

cardinality restrictions. Section 4, develop characterization k-consistency
utilizing set intersection proof schema offers generic way obtain consistency
results set intersection properties. power new approach demonstrated
new consistency results convexity tightness constraints. Tree convex
constraints studied Section 5. constraint network tree convex constraints,
local consistency ensures global consistency, result intersection property tree
convex sets. tightness constraints studied Section 6. Thanks intersection
properties sets cardinality restriction, relation local global consistency
identified weakly tight constraint networks Section 6.1. networks require
some, rather all, constraints m-tight, improving tightness result van Beek
Dechter (1997). help relational consistency, show global consistency
achieved local consistency weakly tight constraint networks Section 6.2.
type result tightness known before. Section 6.3, explore
constraint network weakly m-tight present several results number
tight constraints sufficient necessary network weakly tight. make full use
tightness constraints network, propose dually adaptive consistency
Section 6.4. Dually adaptive consistency constraint network determined
topology tightest relevant constraint variable. completeness, include
Section 7 results tightness tree convexity based relational consistency.
conclude Section 8.

2. Preliminaries
constraint network R defined set variables N = {x1 , x2 , . . . , xn }; set finite
domains = {D1 , D2 , . . . , Dn } domain Di , 1..n, set values
variable xi take; set constraints C = {cS1 , cS2 , . . . , cSe } Si , 1..e,
subset {x1 , x2 , . . . , xn } constraint cSi relation defined domains
variables Si . Without loss generality, assume that, two constraints
cSi , cSj C (i 6= j), Si 6= Sj . arity constraint cSi number variables Si .
variable x, Dx denotes domain. rest paper, often use network
mean constraint network.
instantiation variables = {x1 , . . . , xj } denoted = (a1 , . . . , aj )
ai Di 1..j. extension variable x(
/ ) denoted (a, u)
u Dx . instantiation set variables consistent satisfies constraints
R involve variables outside .
constraint network R k-consistent consistent instantiation
distinct k 1 variables, new variable x, exists u Dx
(a, u) consistent instantiation k variables. R strongly k-consistent
j-consistent j k. strongly n-consistent network called globally consistent.
information constraint networks consistency, reader referred
work Mackworth (1977), Freuder (1978) Dechter (2003).

443

fiZhang & Yap

3. Properties Set Intersection
section, develop number set intersection results used later
derive results consistency. set intersection property concerned is:
Given collection l finite sets, conditions intersection
l sets empty?
Here, particularly interested intersection property sets two interesting useful restrictions: convexity cardinality.
3.1 Tree Convex Sets
Given collection sets, structures associated elements sets
obtain interesting useful set intersection results. study
sets whose elements form tree. first introduce concept tree convex set.
Definition 1 Given discrete set U tree vertices U , set U tree
convex exists subtree whose vertices A.
subtree tree subgraph tree. Next define say
collection sets tree convex.
Definition 2 Given collection discrete sets S, let union sets U .
sets tree convex tree U every set tree convex .
collection sets said tree convex exists tree sets
collection tree convex tree.
b



........ ......
....... ... ............
.....
......
......
......
.
.
.
.
.
......
......
......
.....
......
.
.
.
.
.
......
...
.
.
.
.
..
.
..

..
...... ...........
......
......
......
......
......
......
......
......
.
.
.
.
.
......
...
.
.
.
.
......
.
...
.....
......

b

c

....
.....
....
....
.
.
.
.
.
.....
....
....



c........





.
..................
........
....
..
... .....
...
..
...
...
...
.
.
...
...
...
..
.
.
.
.
.
...
...
.
... ....
... .....
... ...
... ...
......
......

e

e

(a)

f

(b)

Figure 1: (a) tree nodes {a, b, c, d, e} (b) partial order nodes {a, b, c, d, e, f }

Example 1 Consider set U = {a, b, c, d, e} tree given Figure 1. subset
{a, b, c, d} tree convex given tree. set {b, a, c, e} since elements
set subtree. However, {b, c, e} tree convex elements form
subtree given tree.
Example 2 Consider = {{1, 9}, {3, 9}, {5, 9}}. construct tree {1, 3, 5, 9}
9 root 1, 3, 5 children, set covers nodes exactly one
branch tree. Hence, sets tree convex.
444

fiSet Intersection Consistency Constraint Networks

Tree convex sets following intersection property.
Lemma 1 (Tree Convex Sets Intersection)
Given finite collection
finite sets S,

assume sets tree convex.
E 6= iff E1 , E2 S, E1 E2 6= .
ES
Proof. Let l number sets S, tree that, Ei S, Ei
vertices subtree Ti . Assuming rooted tree, every Ti (i 1..l) rooted
tree whose root exactly node nearest root . Let ri denote root Ti
1..l.
prove
Ei 6= , want show intersection trees {Ti | 1..l}
i1..l

empty. following propositions subtrees necessary main proof.
Proposition 1 Let T1 , T2 two subtrees tree , = T1 T2 . tree.
= , trivial tree. let 6= . Since portion T1 , circuit
it. necessary prove connected. show, two nodes u, v ,
path them. u, v T1 u, v T2 respectively imply exist
paths P1 : u, . . . , v T1 P2 : u, . . . , v T2 respectively. Recall unique
path u v T1 T2 subtrees . Therefore, P1 P2 cover
nodes edges, thus , intersection T1 T2 . P1
path want.
Proposition 2 Let T1 , T2 two subtrees tree , = T1 T2 . empty
least one roots T1 T2 .
Let r1 r2 roots T1 T2 respectively. r1 , proposition correct.
Otherwise, show r2 . Assume contrary r2
/ . Clearly, r1 6= r2 . Let r
first common ancestor r1 r2 v root (T tree Proposition 1).
paths P1 : r1 , . . . , v T1 ; P2 : r2 , . . . , v T2 ; P3 : r, . . . , r1 , P4 : r, . . . , r2
. Since v descendant r1 r2 , P1 P2 share vertex v. Since r
first common ancestor r1 r2 , P3 P4 share vertex r.
verified P3 P1 share r1 , P2 P4 share r2 , vertex shared
either P1 P4 P2 P3 . Hence, closed walk P3 P1 P20 P40 , P20 P40
reverse P2 P4 respectively, simple circuit. contradicts circuit
.
Further, following observation.
Proposition 3 Let tree root r, T1 T2 two subtrees roots r1
r2 respectively. Let r1 closer r r2 , intersection T1 T2 .
r1 root empty.
proposition true r1 = r2 . let r1 farther r r2 . Clearly r2
/ T1
thus r2
/T
.

Proposition
2,
r


root


.
1

Let =
Ti . ready prove main result 6= . Select tree Tmax
i1..l

T1 , T2 , . . . , Tl root rmax farthest away r among roots
445

fiZhang & Yap

concerned trees. accordance Proposition 3, Tmax intersect every
tree implies rmax node every Ti (i 1..l). Therefore, rmax . 2
Remark. partial order represented acyclic directed graph. tempting generalize tree convexity partial convexity following way.
Given set U partial order it, set U partially convex
set nodes connected subgraph partial order. Given collection sets S,
let union sets U . sets partially convex partial
order U every set partially convex partial order.
However, generalization, get result similar Lemma 1,
illustrated following example. Consider three sets {c, b, d}, {d, f, a} {a, e, c}
nodes diagram given Figure 1(b). sets partially convex
intersect pairwise. However, intersection three sets empty.
3.2 Sets Cardinality Restrictions
Another useful restriction place sets restrict cardinalities.
special case, consider set one element a. intersection every set
empty, able conclude every set contains a, thus intersection
sets empty. Generally, set elements, following
result.
Lemma 2 Consider finite collection l sets S={E1 , E2 , . . . , El } number < l.
Assume one set E1 elements.
\
E 6=
ES
iff intersection E1 sets empty.
Proof. necessary condition immediate.
prove sufficient condition, show intersection E1
k (m k l 1) sets empty induction k. k = m, lemma
true according assumption. Assuming intersection E1
k 1 ( m) sets empty, show intersection E1 k
sets empty. Without loss generality, subscripts k sets numbered
2 k + 1. 2 k + 1, let Ai intersection E1 k sets except Ei :
Ai = E1 . . . Ei1 Ei+1 . . . Ek+1 .
First, show contradiction exist i, j 2..k + 1, 6= j
Ai Aj 6= . Assume Ai Aj = distinct j. According construction
Ai s,
[
E1
Ai ,
i2..k+1

446

fiSet Intersection Consistency Constraint Networks

|Ai | 1 induction assumption. Hence,
X
|E1 |
|Ai | k > m,
i2..k+1

contradicts |E1 | m.
Since Ai Aj 6= i, j 2..k + 1, 6= j,
\
Ei 6= .
Ai Aj =
i1..k+1

2
lemma leads following corollary intersection every + 1 sets
empty.
Corollary 1 (Small Set Intersection) Consider finite collection l sets
number < l. Assume one set elements.
\
E 6=
ES
iff intersection + 1 sets empty.
specialized versions (Zhang & Yap, 2003) Lemma 2
existing works van Beek Dechter (1997) David (1993) based.
sets concern cardinality larger certain number, intersection
sets empty conditions. reader may refer Large Sets
Intersection lemma (Zhang & Yap, 2003) details.

4. Set Intersection Consistency
section, first relate consistency constraint networks set intersection. Using
result, present proof schema allows us study relationship local
global consistency properties set intersection.
Underlying concept k-consistency whether instantiation variables
extended new variable relevant constraints new variable
satisfied. relevant constraint variable xi respect constraint contains
xi variables . Given instantiation , relevant constraint allows
set (possibly empty) values new variable. call set extension set.
satisfiability relevant constraints depends whether intersection extension
sets non-empty (see Lemma 3).
Definition 3 Given constraint cSi , variable x Si , instantiation Si {x},
extension set x respect cSi defined
Ei,x (a) = {b Dx | (a, b) satisf ies cSi }.
extension set trivial empty; otherwise non-trivial.
447

fiZhang & Yap

Recall Dx refers domain variable x. Throughout paper, often
case instantiation {x} already given, {x} superset
Si {x}. Let b instantiation obtained restricting variables
Si {x}. ease presentation, continue use Ei,x (a), rather Ei,x (b), denote
extension b x constraint cSi . make presentation easy follow,
three parameters i, a, x may omitted expression hereafter whenever
clear context. example, given instantiation new variable
x, emphasize different extension sets respect different constraints cSi , write
Ei instead Ei,x (a) simply denote extension set.
Example 3 Consider network variables {x1 , x2 , x3 , x4 , x5 }:
cS1 =
cS2 =
cS3 =
cS4 =
D1 = D4

{(a, b, d), (a, b, a)}, S1 = {x1 , x2 , x3 };
{(b, a, d), (b, a, b)}, S2 = {x2 , x4 , x3 };
{(b, d), (b, c)},
S3 = {x2 , x3 };
{(b, a, d), (b, a, a)}, S4 = {x2 , x5 , x3 };
= D5 = {a}, D2 = {b}, D3 = {a, b, c, d}.

Let = (a, b, a) instantiation variables = {x1 , x2 , x4 }. relevant constraints
x3 cS1 , cS2 , cS3 . cS4 relevant since contains x5 outside . extension
sets x3 respect relevant constraints are:
E1 (a) = {d, a}, E2 (a) = {d, b}, E3 (a) = {d, c}.
intersection extension sets empty, implying extended
satisfy relevant constraints cS1 , cS2 cS3 .
Let = (b, c) instantiation {x2 , x3 }. E1,x1 (a) = thus trivial.
words, trivial extension set, instantiation extended satisfy
constraint concern.
relationship k-consistency set intersection characterized following lemma.
Lemma 3 (Set Intersection Consistency; Lifting) constraint network R kconsistent consistent instantiation (k 1) distinct variables
= {x1 , x2 , . . . , xk1 }, new variable xk ,
\
Eij 6=
j1..l

Eij extension set xk respect cSij , cSi1 , . . . , cSil relevant
constraints.
Proof. follows directly definition k-consistency Section 2
definition extension set. 2
insight behind lemma examine consistency perspective set
intersection.
448

fiSet Intersection Consistency Constraint Networks

Example 4 Consider Example 3. would check whether network 4consistent. Consider instantiation again. trivial consistent instantiation
since network doesnt constraint among variables . extend x,
need check first three constraints cS1 cS3 . extension feasible
intersection E1 , E2 , E3 empty. show network 4-consistent,
exhausting consistent instantiations three variables. Conversely, know
network 4-consistent, immediately say intersection three extension
sets x empty.
usefulness lemma allows consistency information obtained
intersection extension sets, vice versa. point view consistency
set intersection, results set intersection properties, including Section 3,
lifted get various consistency results constraint network following
proof schema.
Proof Schema
1. (Consistency Set) certain level consistency constraint network,
derive information intersection extension sets Lemma 3.
2. (Set Set) local intersection information sets, information may
obtained intersection sets.
3. (Set Consistency) new information intersection extension sets,
higher level consistency obtained Lemma 3.
4. (Formulate conclusion consistency constraint network). 2
proof schema, step 1 (consistency set), step 3 (set consistency), step 4
straightforward many cases. So, Lemma 3 called lifting lemma
set intersection result (step 3), easily consistency results network
(step 4). proof schema establishes direct relationship set intersection
consistency properties constraint network.
following sections, demonstrate set intersection properties
proof schema used obtain new results consistency constraint network.

5. Global Consistency Tree Convex Constraints
notion extension set plays role bridge restrictions set(s)
properties special constraints. section, consider constraints arising
tree convex sets (Lemma 1). constraint tree convex extension sets respect
constraint tree convex.
Definition 4 constraint cS tree convex respect xi tree Ti Di
sets
= {ES,xi | ES,xi non-trivial extension instantiation {xi }}
tree convex Ti . constraint cS tree convex tree union
domains variables S, tree convex respect every x .
Example 5 Tree convex constraints occur relationship among
values variable. Consider constraint accessibility set facilities
449

fiZhang & Yap

set persons. personnel include network engineer, web server engineer, application
engineer, team leader. relationship among staff team leader
manages rest, forms tree structure shown Figure 2(b). different
accessibilities system includes basic access, access network routers, access
web server, access file server. order access routers servers,
one basic access right, implying tree structure (Figure 2(c)) access
rights. constraint team leader able access facilities
engineer access corresponding facility (e.g., web server engineer access
web server). tree convex constraint shown Figure 2(a) rows
named initials engineers columns initials access rights.
tree union personnel accessibilities obtained respective
trees (in Figure 2(b) (c)) adding edge, say web server leader. Note
constraint Figure 2(a) row convex.

n
w

l

r
*

w

f

*
*

*

(a)

*
*

b
*
*
*
*

leader

network
engineer

web application
engineer engineer routers

(b)

basic access

web
server

file
server

(c)

Figure 2: tree convex constraint accessibilities staffs
Example 6 Tree convex constraints used model scene labeling problems
naturally shown Zhang Freuder (2004).
Definition 5 constraint network tree convex exists tree union
variable domains constraints tree convex .
Tree convex constraints generalize row convex constraints introduced van Beek
Dechter (1995).
Definition 6 constraint cS row convex respect x sets
= {ES,x | ES,x non-trivial extension instantiation {x}}
tree convex tree node one child. tree called
total ordering. constraint cS row convex if, total ordering union
involved domains, row convex respect every x S.
Example 7 constraint c Example 5 row convex, b (basic access)
neighbor r (routers), w (web server), f (file server). However, total ordering,
value neighbor two values. Hence, c row convex
tree convex.
property set intersection tree convex sets proof schema,
following consistency results tree convex constraints.
450

fiSet Intersection Consistency Constraint Networks

Theorem 1 (Tree Convexity) Let R network constraints arity r
strongly 2(r 1) + 1 consistent. R tree convex globally consistent.
Proof. network strongly 2(r 1) + 1 consistent assumption. prove
network k consistent k {2r, . . . , n}.
Consider instantiation k 1 variables new variable x. Let
number relevant constraints l. relevant constraint, one extension set
x. So, l extension sets. intersection l sets empty,
value x extended instantiation satisfies relevant constraints.
(Consistency Set) Consider two l extension sets: E1 E2 . two
corresponding constraints involve 2(r1)+1 variables since arity constraint
r two constraints x variable. consistency lemma,
R (2(r 1) + 1)-consistent implies intersection E1 E2 empty.
(Set Set) Since relevant constraints tree convex given tree,
extension sets x tree convex. Henceforth, fact every two extension
sets intersect shows intersection l extension sets empty, tree
convex sets intersection lemma.
(Set Consistency) consistency lemma, R k-consistent. 2
Since row convex constraint tree convex, result generalizes consistency result
row convex constraints reported van Beek Dechter (1995). interesting
observe latter lifted set intersection results convex sets (Zhang
& Yap, 2003).
question raised Theorem 1 efficient check whether constraint
network tree convex. Yosiphon (2003) proposed algorithm recognize tree
convex constraint network polynomial time.

6. Consistency Tightness Constraints
section, present various consistency results networks m-tight
constraints.
6.1 Global Consistency Weakly Tight Networks
tightness constraints related consistency constraint network
van Beek Dechter (1997). m-tightness constraint characterized
cardinality extension sets following way.
Definition 7 (van Beek & Dechter, 1997) constraint cSi m-tight respect x Si
iff instantiation Si {x},
|Ei,x | |Ei,x | = |Dx |.
constraint cSi m-tight iff m-tight respect every x Si .
Given instantiation, extension set respect x domain
variable x, i.e., |Ei,x | = |Dx |, instantiation supported values x thus
easy satisfiable. Hence, definition above, instantiations affect
m-tightness constraint.
451

fiZhang & Yap



x




b

b

c

c

.......
.......
....... ............
....... ............
.....
.....
...
.
...
...
...............................................................................................................
..
.............
.
.
...
.
.
.
.
.
.......
... ...............
...
...
............ ..................... ....
...
...
.
.
.
.
.
....
.
...
...
....... ................... ...
.
.
.
.
.
.
.
.
...
.
.............
... ...........
...
.
.
.
.
.
.
.
.
...
.
.
.
.....
..
.......
...
....
.
........... ...
...
... ............
..
.
.
..
....
.
.
...
.
.
.
.
..
.
.
.
.
.
.
.
.
.
.
.
.
........ ...
...
.
.
.
.
.
..
.
.
.
.
.
.
.
.
.
.
.
...
...
.......
...
...
.........................
...
..
...
...
.................
...
...
...
.....
...
...
.....
.
.
.
.
.
.
.
.
.
.
.
..................
..................

Figure 3: constraint cxy 2-tight 3-tight
Example 8 Consider constraint cxy Figure 3 Dx = Dy = {a, b, c}. edge
graph denotes ends allowed cxy . verified values
x, extension sets cardinality 2, values y, extension sets
cardinality 1 3. Hence, cxy said 2-tight 3-tight 1-tight.
specially interested following tightness.
Definition 8 constraint cSi properly m-tight respect x Si iff instantiation Si {x},
|Ei,x | m.
constraint cSi properly m-tight iff properly m-tight respect every x Si .
constraint m-tight properly m-tight. converse might true.
example, constraint x y, x {1, 2, . . . , 10} {1, 2, . . . , 10}, 9-tight
properly 9-tight. properly 10-tight since |Ex (10)| = 10 = 10.
Next, define special constraint network allows us make accurate
connection tightness constraints consistency network.
Definition 9 constraint network weakly m-tight level k iff every set variables
{x1 , x2 , . . . , xl }(k l < n) new variable x, exists properly m-tight constraint
among relevant constraints x respect {x1 , x2 , . . . , xl }.

x1

x2

y1

x3

x4

y3

y2

y4
(b)

(a)

Figure 4: Two constraint networks. thin edge represents properly m-tight constraint
thick one represents non properly m-tight constraint

452

fiSet Intersection Consistency Constraint Networks

Example 9 network Figure 4(a) weakly tight level 3 three
variables fourth variable, one relevant constraints properly m-tight.
network Figure 4(b) weakly tight level 3 since {y1 , y3 , y4 } y2 , none
relevant constraints cy1 y2 cy4 y2 properly m-tight.
small set intersection corollary (Corollary 1), following consistency
result weakly m-tight network.
Theorem 2 (Weak Tightness) constraint network R constraints arity
r strongly ((m+1)(r1)+1)-consistent weakly m-tight level ((m+1)(r1)+1),
globally consistent.
Proof. Let j = (m+1)(r1)+1. constraint network R shown k-consistent
k (j < k n).
Let = {x1 , . . . , xk1 } set k 1 variables, instantiation
variables . Consider additional variable xk . Without loss generality, let
relevant constraints cS1 , . . . , cSl , Ei extension set xk respect
cSi l.
(Consistency Set) Consider + 1 l extension sets. corresponding
+ 1 constraints contain (m + 1)(r 1) + 1 variables including xk . Since R
((m+1)(r1)+1)-consistent, set intersection consistency lemma, intersection
+ 1 extension sets empty.
(Set Set) network weakly m-tight level ((m + 1)(r 1) + 1). So, must
properly m-tight constraint among relevant constraints cS1 , . . . , cSl . Let cSi .
know extension set |Ei | m. Since intersection every + 1 extension
sets empty, l extension sets share common element small set intersection
corollary.
(Set Consistency) lifting lemma, R k-consistent. 2
similar fashion, main tightness result van Beek Dechter (1997),
constraints required m-tight, lifted small sets intersection
corollary Zhang Yap (2003). uniform treatment lifting set intersection results
consistency results absent existing works (e.g., Dechter, 1992; van Beek &
Dechter, 1995, 1997; David, 1993).
tightness result van Beek Dechter (1997) requires every constraint
m-tight. weak tightness theorem, hand, require constraints
properly m-tight. following example illustrates difference.
Example 10 weakly m-tight network, interested topological structure.
Thus omitted domains variables here. Consider network five variables
labeled {1, 2, 3, 4, 5}. network, pair variables three variables,
constraint. Assume network already strongly 4-consistent.
Since network already strongly 4-consistent, simply ignore instantiations
less 4 variables. introduce level network weakly
m-tight. interesting level 4. Table 1 shows relevant constraints
possible extension four instantiated variables one. first row, 1234 5
453

fiZhang & Yap

Extension
1234 5,
2345 1,
3451 2,
4512 3,
5123 4,

125*,
231 ,
132 ,
123 ,
124 ,

135 ,
241 ,
142 ,
143*,
134*,

145 ,
251*,
152*,
153 ,
154 ,

Relevant constraints
235, 245, 345, 15+,
341, 351, 451, 21 ,
342, 352, 452, 12 ,
243, 253, 453, 13 ,
234, 254, 354, 14 ,

25 ,
31 ,
32+,
23+,
24 ,

35 ,
41 ,
42 ,
43 ,
34+,

45
51+
52
53
54

Table 1: Relevant constraints extending instantiation four variables new variable

stands extending instantiation variables {1, 2, 3, 4} variable 5. Entries
second column denote constraint. example, 125 denotes c125 . constraints
{1, 2, 5} {1, 3, 4} (suffixed * table) properly m-tight, network weakly
m-tight level 4. Alternatively, constraints {1, 5}, {2, 3} {3, 4} (suffixed +)
properly m-tight, network weakly m-tight. tightness result van
Beek Dechter (1997) requires binary ternary constraints m-tight.
6.2 Making Weakly Tight Networks Globally Consistent
Consider weak tightness theorem previous section. Generally, weakly m-tight
network might level local consistency required theorem. tempting
enforce level consistency network make globally consistent. However,
procedure may result constraints higher arity.
Example 11 Consider network variables {x, x1 , x2 , x3 }. Let domains x1 , x2 , x3
{1, 2, 3}, domain x {1, 2, 3, 4}, constraints variables
take different values: x 6= x1 , x 6= x2 , x 6= x3 , x1 6= x2 , x1 6= x3 , x2 6= x3 . network
strongly path consistent. checking 4-consistency network, know
instantiation (1, 2, 3) {x1 , x2 , x} consistent extended x3 . enforce 4-consistency, necessary introduce ternary constraint {x1 , x2 , x} make
(1, 2, 3) longer valid instantiation.
make new network globally consistent, newly introduced constraints
higher arity may turn require higher local consistency accordance Theorem 2.
Therefore, difficult predict exact level consistency (variable based) enforce
network make globally consistent.
section, relational consistency used make constraint network globally
consistent.
Definition 10 (van Beek & Dechter, 1997) constraint network relationally m-consistent
iff given (1) distinct constraints cS1 , . . . , cSm , (2) x
i=1 Si , (3)

consistent instantiation variables (i=1 Si {x}), exists extension
x extension consistent relations. network strongly
relationally m-consistent relationally j-consistent every j m.
454

fiSet Intersection Consistency Constraint Networks

Variables longer concern relational consistency. Instead, constraints
basic unit consideration. Intuitively, relational m-consistency concerns whether
constraints agree every one shared variables. makes sense different
constraints interact exactly shared variables.
Relational 1-, 2-consistency called relational arc, path consistency,
respectively.
Using relational consistency, able obtain global consistency enforcing local
consistency network.
Proposition 4 weak m-tightness level k constraint network preserved
process enforcing relational consistency network.
Proof. Let R constraint network relational consistency enforcing R1
network consistency enforcing. Clearly, R R1 set variables.
Consider set variables {x1 , x2 , . . . , xl } (k l < n) new variable x. Since
R weakly m-tight level k, exists properly m-tight constraint c among
relevant constraints x respect {x1 , x2 , . . . , xl }. Enforcing relational consistency
constraint network tighten constraint. So, proper m-tightness c
preserved. Hence, R1 weakly m-tight level k. 2
main result subsection.
Theorem 3 constraint network weakly m-tight level (m + 1)(r 1) + 1, r
maximal arity constraints network, globally consistent made
strongly relationally (m + 1)-consistent.
Proof. Proposition 4, network still weakly m-tight (m + 1)(r 1) + 1
enforcing strong relational (m + 1)-consistency it. Let r1 maximal arity
constraints new network consistency enforcing. Clearly, r1 r. So, network
m-tight (m + 1)(r1 1) + 1 Proposition 6. theorem follows immediately
Theorem 8 Section 7. 2
implication theorem long certain properly m-tight constraints certain combinations variables, network made globally consistent
enforcing relational (m + 1)-consistency.
following observation weak m-tightness network.
Proposition 5 constraint network weakly m-tight level constraint
every two variables network properly m-tight.
Proof. Consider level k, set variables = {x1 , x2 , . . . , xl }(k l n),
new variable x
/ . Since constraint two variables properly m-tight,
constraint c{x1 ,x} x1 x properly m-tight. Therefore, properly m-tight
constraint c{x1 ,x} among relevant constraints instantiation . 2
observation shows proper m-tightness constraints every two
variables sufficient determine level local consistency needed ensure global
consistency constraint network.
Remark. Proposition 5 assumes constraint every two variables.
constraint two variables, universal constraint introduced.
455

fiZhang & Yap

case, enforce path consistency constraint network make binary
constraints tighter lower level relational consistency needed make network
globally consistent.
6.3 Properties Weakly Tight Constraint Networks
Since weakly m-tight constraint network global consistency achieved
local consistency, interesting important investigate conditions network
weakly m-tight. Although Proposition 5 shows sufficient condition, requires every
binary constraint tight. see Example 9(a), required number
tight constraints constraint network weakly tight reduced.
subsection focused understanding relationship number tight
constraints weak tightness constraint network.
strong relationship among different levels weak tightness network.
Proposition 6 constraint network weakly m-tight level k m, weakly
m-tight level j > k.
Proof. j > k, prove network weakly tight level j. is,
set variables = {x1 , . . . , xj }(k j < n) new variable x, show
exists m-tight relevant constraint x respect . Since network weakly
tight k < j, exists m-tight relevant constraint x respect subset
. constraint still relevant x respect , thus one look for. 2
following, present two results sufficient conditions constraint network
weakly m-tight.
Theorem 4 Given constraint network (V, D, C) number m, every x V ,
least n 2 properly m-tight binary constraints it, network weakly
m-tight level 2.
Proof. two variables {x, y} third variable z, relevant constraints
z respect {x, y} cxz cyz . know number relevant binary
constraints z respect V n 1. n 2 properly m-tight means
either cxz cyz must properly m-tight. 2
fact, weak tightness higher level, need fewer constraints m-tight
shown following result.
Theorem 5 constraint network (V, D, C) weakly m-tight level k every x V ,
least n k properly m-tight binary constraints it.
Proof. set k variables new variable z, show
properly m-tight relevant constraint z respect . Otherwise, none k
binary constraints z properly m-tight. Since total number relevant binary
constraints z n 1, number properly m-tight binary constraints z
(n1)k, contradicts z involved nk properly m-tight binary constraints.
2
456

fiSet Intersection Consistency Constraint Networks

result reveals constraint network weakly tight level k, could
need n(n k + 1)/2 properly m-tight binary constraints, contrast result
Theorem 3 binary constraints required properly m-tight.
immediate question is: minimum number m-tight constraints required
network weakly tight? answered following result weak
tightness level 2.
Theorem 6 Given number m, constraint network weakly m-tight level 2,
needs least
n(n 1)/2 2bn/3c n = 0, 1 (mod 3)
otherwise
(n 2)(3n 1)/6
m-tight binary ternary constraints.
Proof.
Given network, weak m-tightness level 2 depends tightness
binary ternary constraints. Among weakly m-tight (at level 3) constraint
networks n variables, let R1 network minimal set properly m-tight
binary ternary constraints.
following exposition, constraint denoted scope. example,
use {u, v, w} {u, v} denote ternary constraint c{u,v,w} binary constraint cuv
respectively. constraint non-properly-m-tight properly m-tight.
proof consists three steps.
Step 1. preserving weak m-tightness R1 number properly mtight constraints R1 , modify, necessary, proper m-tightness constraints
R1 that, properly weak m-tight constraint {u, v, w}, none binary
constraints {u, v}, {v, w}, {u, w} properly m-tight.
modify proper m-tightness constraint c R1 remove c network
introduce new constraint set variables c desirable proper
m-tightness.
claim that, properly m-tight constraint {u, v, w}, one {u, v},
{v, w}, {u, w} properly m-tight. Otherwise, least two properly mtight, means {u, v, w} modified properly m-tight, contradicting
minimality number properly m-tight constraints R1 .
Assume {u, v} properly m-tight. Since {u, v, w} properly m-tight,
reason {u, v} properly m-tight. reason exists another
variable z one {u, z} {v, z} properly m-tight, {u, v, z}
properly m-tight, too. See Figure 5. Without loss generality, let {u, z} properly mtight, implying constraint {v, z} properly m-tight. constraint {z, v, w}
properly m-tight {v, z} {v, w} properly m-tight.
modify constraints {u, v, w} {z, v, w} properly m-tight
modify constraints {z, v} {v, w} properly m-tight. modification preserves
number properly m-tight constraints R1 weak m-tightness R1 .
Step 2. preserving weak m-tightness R1 number properly m-tight
constraints R1 , next modify, necessary, proper m-tightness constraints
R1 two properly m-tight ternary constraints share variables.
457

fiZhang & Yap

....................
.........
......
......
....... ................................
....
....
......
.....
..
..................................
.
.........
....... .... ..... .. ....
........
....
... ........................
........... .........
.
....
.
......
... ...............
..
...
.
. . ..
.
...
........
..
...
...
....
......
...
.....
....
.
.......
.
.
.
.
.......................

z

u

w

v

Figure 5: circle represents properly m-tight ternary constraint {u, v, w}. edge
two variables indicates binary constraint. tick besides edge means
properly m-tight cross means not.

Case 1: Two properly m-tight constraints {u, v, w} {u, v, z} share two variables
{u, v}. See Figure 6(a). Since {w, u} {u, z} properly m-tight (in terms step
1), {w, u, z} properly m-tight. Since {w, v} {v, z} m-tight, {w, v, z}
m-tight.
modify four ternary constraints properly m-tight modify four
binary constraints {w, u}, {u, z}, {z, v} {v, w} properly m-tight. preserves
weak m-tightness R1 number properly m-tight constraints R1 .

w
v

u

x

z

z

v
w

w

v

u

u

v

u

w

x





(b)

(a)

Figure 6: dotted ellipse together three variables inside represents ternary
constraint. (a) Left: Two ternary constraints share two variables {u, v}. Right:
ternary constraints properly m-tight. (b) Left: Two ternary
constraints share one variable w. Right: ternary constraints
properly m-tight.
Case 2: Two properly m-tight constraints {u, v, w}, {w, x, y} share one variable
w. Since {u, w} {w, x} properly m-tight, {u, w, x} properly m-tight.
Since {v, w} {w, y} properly m-tight, {v, w, y} properly m-tight.
Similarly, {u, w, y} {v, w, x} properly m-tight. Now, modify four
binary constraints {u, w}, {w, x}, {v, w}, {w, y} properly m-tight six
ternary constraints non-properly-m-tight, new network still weakly m-tight
fewer m-tight constraints. contradicts minimality number properly
m-tight constraints R1 . Hence, case 2 possible.
Step 3. result first two steps, network R1 , scopes properly
m-tight ternary constraints disjoint, binary constraint two variables
properly m-tight ternary constraint properly m-tight.
458

fiSet Intersection Consistency Constraint Networks

Let B (and respectively) set properly m-tight binary (and ternary
respectively) constraints R1 .
Assume |T | = k. Since difficult count B, count maximum number
non-properly-m-tight binary constraints R1 . 3k non-properly-m-tight binary
constraints due . non-properly-m-tight binary constraints
variable variable outside . Let V 0 variables outside .
|V 0 | = n 3k. non-properly-m-tight constraints fall variables
V 0 . Since R1 weakly tight level 2, two non-properly-m-tight constraints
variable V 0 . Hence, (n 3k)/2 non-properly-m-tight constraints
n 3k even, otherwise (n 3k 1)/2 ones. number, denoted ,
properly m-tight constraints R1 would sum cardinality B:
= k + (n(n 1)/2 3k b(n 3k)/2c) = n(n 1)/2 2k b(n 3k)/2c.
fact minimal implies k maximized. n multiple 3,
number properly m-tight constraints n(n 1)/2 2n/3; n 1 multiple
3, number n(n 1)/2 2(n 1)/3; otherwise number (n 1)(3n 1)/6. 2
result shows concept k-consistency still need significant
number constraints properly m-tight predict global consistency network
terms constraint tightness.
6.4 Dually Adaptive Consistency
main purpose characterization weak m-tightness network help identify
consistency condition solution network found without backtracking, i.e., efficiently. studied constraint tightness concept k-consistency
previous subsections. subsection, introduce dually adaptive consistency
achieve backtrack free search taking account tightness constraints
topological structure network.
idea adaptive consistency (Dechter & Pearl, 1987) enforce necessary
level consistency part network ensure global consistency. assumes
ordering variables. variable x, requires consistent instantiation
relevant variables x consistently extensible x. variables
play direct role x thus ignored dealing x.
first introduce notations used adaptive consistency.
width variable respect variable ordering number constraints
involving x variables x. See Figure 7 example.
Given network, variable ordering, variable x, directionally relevant constraints x involving x variables x. following, DR(x)
used denote directionally relevant constraints x, used denote variables
occurring constraints DR(x).
constraints DR(x) consistent x if, consistent instantiation {x}, exists u Dx (a, u) satisfies constraints
DR(x).
next define adaptive consistency network.

459

fiZhang & Yap

x

1
...... ..........
.....
....
...
.....
...
...
.
.
.
...
..
...
...
.. ........ 2
.
...
.... ....
.
... ....
...
..
.... ...
.
3 .....
... ...
.
... ...
....
....
...
...... ..........
...
.
...
...
4
...
.....
.....
......

x
x
x

x5

Figure 7: variables {x1 , x2 , . . . , x5 } ordered according subscripts. example, x1 x2 . width x2 1.

Definition 11 Given constraint network ordering variables, network
adaptively consistent variable x, directionally relevant constraints
consistent x.
adaptive consistency presented algorithm Dechter (2003) although,
purpose paper, prefer declarative characterization.
adaptively consistent network, solution found without backtracking.
Proposition 7 Given constraint network ordering variables, backtrack
free search ensured network adaptively consistent.
Proof. Assume found consistent instantiation first k variables (in terms
given ordering). consistently extended xk+1 directionally
relevant constraints xk+1 consistent xk+1 . 2
network adaptively consistent, algorithm Dechter (2003, p. 105)
used enforce adaptive consistency it.
Adaptive consistency accurate estimating local consistency
ensures global consistency, makes intuitive algorithms enforce consistency
find solution.
knowledge constraint tightness presented previous subsections,
know network adaptively consistent, sufficient make sure
some, all, directionally relevant constraints variable consistent.
position define dually adaptive consistency constraint network.
Definition 12 Consider constraint network ordering variables.
variable x network, let cx one tightest directionally relevant constraints
x cx properly mx -tight. network dually adaptively consistent
1) variable x whose width greater mx , directionally relevant
constraints consistent it,
2) variable x whose width greater mx , cx consistent every
mx directionally relevant constraints x.
Thanks set intersection result Lemma 2, main result dually
adaptive consistency.
460

fiSet Intersection Consistency Constraint Networks

Theorem 7 Given constraint network ordering variables, backtrack free
search ensured dually adaptively consistent.
Proof. need prove network adaptively consistent:
variable x, directionally relevant constraints DR(x) consistent x. Let
variables involved DR(x). Consider consistent instantiation {x}. show
exists u Dx (a, u) satisfies constraints DR(x). Let l number
constraints DR(x), let cx one tightest constraint DR(x) proper
tightness mx . constraint ci DR(x), let extension set x ci Ei .
sufficient show
c DR(x) Ei 6= .


know cx consistent every mx constraints. Hence, Ex , extension set
cx , intersects every mx extension sets a. Lemma 2 implies
c DR(x) Ei 6= .


2
theorem, need tightest directionally relevant constraint
variable, totally n 1 constraints, predict global consistency network.
could considered significant improvement results previous two
subsections.
Compared result Dechter Pearl (1987), theorem provides
lower level (the smaller tightness width) consistency ensuring global consistency.
constraint network dually adaptively consistent respect variable
ordering, made enforcing required consistency variable,
reverse order given variable ordering. make procedure efficient,
chose better variable ordering, depending topological structure
network tightness constraints.

7. Tightness Convexity Revisited
consistency results derived small set intersection tree convex set intersection
Section 5 Section 6.1 rephrased relational consistency setting.
example, new version weak tightness based relational consistency given follows.
Theorem 8 (Weak Tightness) constraint network R constraints arity
r strongly relationally (m + 1)-consistent weakly m-tight level (m + 1)(r
1) + 1, globally consistent.
Proof. Let j = (m + 1)(r 1) + 1. constraint network R shown
k-consistent k (j < k n).
Let = {x1 , . . . , xk1 } set k 1 variables, consistent instantiation
variables . Consider new variable xk . Without loss generality, let cS1 , . . . , cSl
relevant constraints xk , Ei extension set xk respect cSi
l.

461

fiZhang & Yap

(Consistency Set) Consider + 1 l extension sets. Since R relationally
(m + 1)-consistent, intersection + 1 extension sets empty.
(Set Set) network weakly m-tight. So, must properly m-tight
constraint relevant constraints cS1 , . . . , cSl . Let cSi . extension set |Ei | m.
Since every + 1 extension sets non-empty intersection, l extension sets
share common element small set intersection result (Corollary 1).
(Set Consistency) lifting lemma, R k-consistent. 2
Compared weak tightness theorem Section 6.1, exposition result
neater proof simpler.
completeness, include new version tree convex theorem using
relational consistency. proof omitted since simplified version one
Section 5 hinted proof above.
Theorem 9 (Tree Convexity) Let R tree convex constraint network. R globally
consistent strongly relationally path consistent.

8. Conclusion
lifting lemma proof schema, shown set intersection results
easily lifted consistency results constraint network. advantages
approach studying consistency.
Firstly, although approach offer completely new way prove consistency results, provide uniform way understand many seemingly different results
impact convexity tightness global consistency. addition results
shown here, results obtained easily lifting lemma proof
schema. example, work David (1993) obtained lifting corollary
Lemma 2 (Zhang & Yap, 2003). work Sam-Haroud Faltings (1996) convex
constraint networks continuous domains lifted Hellys theorem (Eckhoff,
1993) intersection convex sets Euclidean spaces.
Secondly, establishment relationship set intersection consistency
constraint network makes easier communicate consistency results researchers outside constraint network community. made possible
contribute consistency results exploiting knowledge set intersection properties.
importantly, approach singles fact set intersection properties play
fundamental role determining consistency constraint network. perspective
helps us focus properties set intersection discover generalize intersection
properties tree convex sets sets cardinality restrictions. corresponding
consistency results extended understanding convexity tightness constraints since Dechter van Beeks work (1995, 1997). identify new class tree
convex constraints global consistency ensured certain level local consistency. generalizes row convex constraints van Beek Dechter (1995).
show weakly m-tight constraint network made globally consistent enforcing
local consistency. type result tightness new. Detailed study carried
constraint network weakly m-tight. make full use tightness
constraints, propose dually adaptive consistency exploits topology
462

fiSet Intersection Consistency Constraint Networks

semantics constraint network, results relation set
intersection consistency. dually adaptive consistency, topology network
tightest relevant constraint variable determine local consistency
ensures backtrack-free search.

Acknowledgments
indebted Dr. Peter van Beek Dr. Fengming Dong helpful discussions.
constructive comments anonymous referees various versions paper
improved quality. material based works partially supported grant
Academic Research Fund National University Singapore Science
Foundation Ireland Grant 00/PI.1/C075. materials paper appeared
Proceedings International Joint Conference Artificial Intelligence 2003 (Zhang
& Yap, 2003) Proceedings Principles Practice Constraint Programming
2004 (Zhang, 2004).

References
David, P. (1993). functional bijective constraints make CSP polynomial.
Proceedings Thirteenth International Joint Conference Artificial Intelligence,
Vol. 1, pp. 224229 Chambery, France. IJCAI, Inc.
Dechter, R. (1992). local global consistency. Artificial Intelligence, 55, 87107.
Dechter, R. (2003). Constraint Processing. Morgan Kaufmann, San Francisco, CA.
Dechter, R., & Pearl, J. (1987). Network-based heuristics constraint satisfaction problems. Artificial Intelligence, 34, 138.
Eckhoff, J. (1993). Helly, Radon, Caratheodory type theorems. Gruber, P. M.,
& Wills, J. M. (Eds.), Handbook Convex Geometry, pp. 389448. North Holland,
Amsterdam.
Freuder, E. (1978). Synthesizing constraint expressions. Communications ACM, 21 (11),
958966.
Freuder, E. (1982). sufficient condition backtrack-free search. Journal ACM,
29 (1), 2432.
Jeavons, P. G., Cohen, D. A., & Gyssens, M. (1997). Closure properties constraints.
Journal ACM, 44 (4), 527548.
Mackworth, A. K. (1977). Consistency networks relations. Artificial Intelligence, 8 (1),
118126.
Montanari, U. (1974). Networks constraints: fundamental properties applications.
Information Science, 7 (2), 95132.
Sam-Haroud, D., & Faltings, B. V. (1996). Solving non-binary convex CSPs continous
domains. Proceedings International Conference Principles Practice
Constraint Programming 1996, pp. 410424 Cambridge, Massachusetts. Springer.

463

fiZhang & Yap

Schaefer, T. J. (1978). complexity satisfiability problems. Proceedings 10th
ACM Symposium Theory Computing, pp. 216226.
van Beek, P., & Dechter, R. (1995). minimality global consistency row-convex
constraint networks. Journal ACM, 42 (3), 543561.
van Beek, P., & Dechter, R. (1997). Constraint tightness looseness versus local
global consistency. Journal ACM, 44 (4), 549566.
Yosiphon, G. (2003). Efficient algorithm identifying tree convex constraints. Manuscript.
Zhang, Y. (2004). tightness constraints. Proceedings Principles Practice
Constraint Programming 2004, pp. 777781 Toronto, Canada. Springer.
Zhang, Y., & Freuder, E. C. (2004). Tractable tree convex constraints. Proceedings
National Conference Artificial Intelligence 2004, pp. 197202 San Jose, CA, USA.
AAAI press.
Zhang, Y., & Yap, R. H. C. (2003). Consistency set intersection. Proceedings
International Joint Conference Artificial Intelligence 2003, pp. 263268 Acapulco,
Mexico. IJCAI Inc.

464


