Journal Artificial Intelligence Research 27 (2006) 577615

Submitted 2/2006; published 12/2006

Understanding Algorithm Performance
Oversubscribed Scheduling Application
Laura Barbulescu

laurabar@cs.cmu.edu

Robotics Institute
Carnegie Mellon University
Pittsburgh, PA 15213 USA

Adele E. Howe
L. Darrell Whitley
Mark Roberts

howe@cs.colostate.edu
whitley@cs.colostate.edu
mroberts@cs.colostate.edu

Computer Science Department
Colorado State University
Fort Collins, CO 80523 USA

Abstract
best performing algorithms particular oversubscribed scheduling application,
Air Force Satellite Control Network (AFSCN) scheduling, appear little common. Yet, careful experimentation modeling performance real problem
instances, relate characteristics best algorithms characteristics
application. particular, find plateaus dominate search spaces (thus favoring algorithms make larger changes solutions) randomization
exploration critical good performance (due lack gradient information
plateaus). Based explanations algorithm performance, develop new
algorithm combines characteristics best performers; new algorithms performance better previous best. show hypothesis driven experimentation
search modeling explain algorithm performance motivate design
new algorithm.

1. Introduction
Effective solution Air Force Satellite Control Network (AFSCN) oversubscribed
scheduling problem runs counter works well similar scheduling problems.
similar oversubscribed problems, e.g., United States Air Force (USAF) Air Mobility Command (AMC) airlift (Kramer & Smith, 2003) scheduling telescope observations (Bresina,
1996), well solved heuristically guided constructive repair based search. best
performing solutions AFSCN genetic algorithm (Genitor), Squeaky Wheel Optimization (SWO) randomized next-descent local search. yet found
constructive repair based solution competitive.
three best performing solutions AFSCN appear little common, making
difficult explain superior performance. Genitor combines two candidate solutions
preserving elements each. SWO creates initial greedy solution attempts
improve scheduling tasks known contribute detrimentally current evaluation. Randomized local search makes incremental changes based observed immediate
gradients schedule evaluation. paper, examine performance differc
2006
AI Access Foundation. rights reserved.

fiBarbulescu, Howe, Whitley, & Roberts

ent algorithms, identify factors help explain performance leverage
explanations design new search algorithm well suited characteristics
application.
target application oversubscribed scheduling application alternative resources. AFSCN (Air Force Satellite Control Network) access scheduling requires assigning
access requests (communication relays U.S.A. government satellites) specific time slots
antenna ground station. oversubscribed tasks accommodated given available resources. considered oversubscribed, least
problem instances need overtax available resources; application though,
appears problem instances specify tasks feasibly scheduled.
application challenging shares characteristics applications
Earth Observing Satellites (EOS). important team human schedulers
laboriously performed task every day least 15 years minimal automated
assistance.
algorithms designed traverse essentially search space: solutions
represented permutations tasks, greedy schedule builder converts
schedule assigning start time resources tasks order
appear permutation. find search space dominated large flat
regions (plateaus). Additionally, size plateaus increases dramatically best
solution approached. presence plateaus indicates algorithm needs
effectively manage order find improving solutions.
explored number different hypotheses explain performance
algorithm. hypotheses include following:
Genitor, genetic algorithm, identifies patterns relative task orderings, similar backbones SAT (Singer, Gent, & Smaill, 2000), preserved members
population. effect type classic building block hypothesis (Goldberg,
1989).
SWO starts extremely close best solution need enact much change.
hypothesis implies relatively easy modify good greedy solutions
find best known solutions.
Randomized Local Search performs essentially random walk plateaus find
exits leading better solutions; given distribution solutions lack gradient
information, may good strategy any.
tested hypotheses. limited evidence existence building
blocks backbone structure. Squeaky Wheel Optimization quickly find
good solutions, cannot reliably find best known solutions. Therefore, first
two hypotheses somewhat supported data, hypotheses enough
explain observed performance.
third hypothesis appears best explanation particular local
search strategy used works well. light this, formulated another hypothesis:
SWO Genitor make long leaps search space, allow relatively
quickly traverse plateaus.
578

fiUnderstanding Algorithm Performance

last hypothesis appears well explain performance two methods.
genetic algorithm leaps naturally longer early phases search
parent solutions less similar.
Based studies, constructed new search algorithm exploits
learned search space behavior successful algorithms. Attenuated
Leap Local Search makes multiple changes solution evaluating candidate
solution. addition, number changes decreases proportionately expected proximity solution. number multiple changes, length leap, larger
early search, reduces (shortens) better solutions found. find
algorithm performs quite well: quickly finds best known solutions AFSCN
problems.

2. AFSCN Scheduling
U.S.A. Air Force Satellite Control Network currently responsible coordinating
communications civilian military organizations 100 USAF managed satellites. Space-ground communications performed using 16 antennas located
nine tracking stations around globe 1 . Figure 1 shows map current configuration
AFSCN; map shows one fewer tracking station antennae data,
due resources apparently taken off-line recently. Customer organizations submit task requests reserve antenna tracking station specified time
period based visibility windows target satellites tracking stations. Two
types task requests distinguished: low altitude high altitude orbits. low
altitude tasks specify requests access low altitude satellites; requests tend
short (e.g., 15 minutes) tight visibility window. High altitude tasks specify
requests high altitude satellites; durations requests varied
usually longer, large visibility windows.
Approximately 500 requests typically received single day. Separate schedules
produced staff human schedulers Schriever Air Force Base day.
500 requests, often 120 conflicts remain first pass scheduling. Conflicts
defined requests cannot scheduled, since conflict scheduled
requests (this means 120 requests remain unscheduled initial schedule
produced).
real problem data, extract description problem specification terms
task requests scheduled corresponding type (low high altitude), duration,
time windows alternative resources. AFSCN data include information
satellite revolution numbers, optional site equipment, tracking station maintenance times
(downtimes), possible loss data due antenna problems, various comments, etc.;
incorporate information problem specification. information
type task (low high altitude) well identifier satellite involved
included task specification. However, know satellite identifier
1. U.S.A. government planning make AFSCN core Integrated Satellite Control
Network managing satellite assets U.S.A. government agencies well, e.g., NASA, NOAA,
DoD affiliates. 2011, system first becomes operational, Remote Tracking Stations
increased enhanced accommodate additional load.

579

fiBarbulescu, Howe, Whitley, & Roberts

Figure 1: Map current AFSCN network including tracking stations, control relay.
figure produced U.S.A. Space Missile Systems Center (SMC).

corresponds actual satellite rely precomputed visibility information
present requests.
problem instance consists n task requests. task request , 1 n, specifies
required processing duration TiDur . task request specifies number j 0
pairs form (Rj , TijWin ), identifying particular alternative resource (antenna
Rj ) time window TijWin task. duration task
possible alternative resources. start end visibility time window specific
alternative resource; therefore duration same, time windows
different alternative resources. resource assigned request,
duration needs allocated within corresponding time window. denote
lower upper bounds time window j corresponding request ijWin (LB)
TijWin (UB), respectively. task, one alternative antennas needs
chosen; also, tasks cannot preempted processing initiated.
requests made specific antenna, often different antenna
tracking station may serve alternate capabilities. assume
antennas tracking station serve alternate resources.
always case practice, assumption made previous research Air
580

fiUnderstanding Algorithm Performance

Force Institute Technology (AFIT) 2 . low altitude request specifies possible resources
antennas present single tracking station (for visibility reasons, one tracking
station accommodate request). Usually two three antennas present
tracking station, therefore, two three possible resources associated
requests. High altitude requests specify antennas present
tracking stations satisfy visibility constraints; many 14 possible alternatives
specified data.
Previous research development AFSCN scheduling focused minimizing
number request conflicts AFSCN scheduling, alternatively, maximizing number
requests scheduled without conflict. requests cannot scheduled
without conflict bumped schedule. happens humans
carry AFSCN scheduling3 . Satellites valuable resources, AFSCN operators
work fit every request. means practice negotiation
customers, requests given less time requested, shifted less desirable,
still usable time slots. effect, requests altered requests least
partially satisfied deferred another day. using evaluation function minimizes
number request conflicts, assumption made fit many
requests possible requiring human schedulers figure place
requests bumped.
However, given requests need eventually scheduled, designed new
evaluation criterion schedules requests allowing overlap minimizing sum overlaps conflicting tasks. appears yield schedules
much closer human schedulers construct. conflicting tasks bumped
schedule, large difficult schedule tasks likely bumped;
placing requests back negotiated schedule means deconstructing minimal
conflict schedule rebuilding new schedule. Thus, schedule minimizes conflicts
may help much constructing negotiated schedule, whereas schedule
minimizes overlaps suggest ways fitting tasks schedule, example
reducing tasks duration two three minutes, shifting start outside
requested window short amount time.
obtained 12 days data AFSCN application 4 . first seven days
week 1992 given us Colonel James Moore Air Force Institute
Technology. data used first research projects AFSCN. obtained
additional five days data schedulers Schriever Air Force Base. Table 2 summarizes
characteristics data. best known solutions obtained performing long
runs hundreds experiments. Using various algorithms allowing hundreds

2. fact, large antennas needed high altitude requests, smaller antennas handle low
altitude requests. Depending type antennas present tracking station, antennas
always serve alternate resources request.
3. met several schedulers Schriever discuss procedure crosscheck solution. appreciate assistance Brian Bayless William Szary setting
meeting giving us data.
4. approval make public some, data.
See http://www.cs.colostate.edu/sched/data.html details obtaining problems.

581

fiBarbulescu, Howe, Whitley, & Roberts

ID
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Date
10/12/92
10/13/92
10/14/92
10/15/92
10/16/92
10/17/92
10/18/92
03/07/02
03/20/02
03/26/03
04/02/03
05/02/03

# Requests
322
302
311
318
305
299
297
483
457
426
431
419

# High
169
165
165
176
163
155
155
258
263
243
246
241

# Low
153
137
146
142
142
144
142
225
194
183
185
178

Best Conflicts
8
4
3
2
4
6
6
42
29
17
28
12

Best Overlaps
104
13
28
9
30
45
46
773
486
250
725
146

Table 1: Problem characteristics 12 days AFSCN data used experiments.
ID used tables. Best conflicts best overlaps best known
values problem two objective functions.

thousands evaluations, found better solutions 5 . refer
problems 1992 problems, recent problems, R
problems.

3. Related Scheduling Research
AFSCN application multiple resource, oversubscribed problem. Examples
applications USAF Air Mobility Command (AMC) airlift scheduling (Kramer &
Smith, 2003), NASAs shuttle ground processing (Deale et al., 1994), scheduling telescope
observations (Bresina, 1996) satellite observation scheduling (Frank, Jonsson, Morris,
& Smith, 2001; Globus, Crawford, Lohn, & Pryor, 2003).
AMC scheduling assigns delivery missions air wings (Kramer & Smith, 2003).
system adopts iterative repair approach greedily creating initial schedule ordering
tasks priority attempting insert unscheduled tasks retracting
re-arranging conflicting tasks.
Gerry scheduler designed manage large set tasks needed prepare
space shuttle next mission (Zweben, Daun, & Deale, 1994). Tasks described
terms resource requirements, temporal constraints required time windows.
original version used constructive search dependency-directed backtracking,
adequate task; subsequent version employed constraint-directed iterative repair.
satellite scheduling, customer requests data collection need matched
satellite tracking station resources. requests specify instruments required,
window time request needs executed, location sensing/communication event. task constraints need coordinated resource
5. best known values obtained running Genitor population size increased 400
allowing 50,000 evaluations per run.

582

fiUnderstanding Algorithm Performance

constraints; include windows visibility satellites, maintenance periods
downtimes tracking stations, etc. Typically, requests need scheduled
accommodated available resources. general description satellite
scheduling domain provided Jeremy Frank et al. (2001).
Pemberton (2000) solves simple one-resource satellite scheduling problem
requests priorities, fixed start times fixed durations. objective function
maximizes sum priorities scheduled requests. priority segmentation algorithm proposed, hybrid algorithm combining greedy approach branchand-bound. Wolfe Sorensen (2000) define complex one-resource problem,
window-constrained packing problem (WCP), specifies request earliest
start time, latest final time minimum maximum duration. objective function complex, combining request priority position scheduled request
required window number requests scheduled. Two greedy heuristic approaches
genetic algorithm implemented; genetic algorithm found perform best.
Globus et al. (2003) compare genetic algorithm, simulated annealing, Squeaky Wheel
Optimization (Joslin & Clements, 1999) hill climbing simplified, synthetic form
satellite scheduling problem (two satellites single instrument) find
simulated annealing excels genetic algorithm performs relatively poorly.
general version satellite scheduling (EOS observation scheduling), Frank et al. (2001)
propose constraint-based planner stochastic greedy search algorithm based
Bresinas Heuristic-Biased Stochastic Sampling (HBSS) algorithm (Bresina, 1996). HBSS
originally applied scheduling astronomy observations telescopes.
Lematre et al. (2000) research problem scheduling set photographs Agile
EOS (ROADEF Challenge, 2003). Task constraints include minimal time two
successive acquisitions, pairings requests images acquired twice different
time windows, hard requirements certain images must always acquired.
find local search approach performs better hybrid algorithm combining branchand-bound various domain-specific heuristics.
AFSCN application previously studied researchers Air Force Institute Technology (AFIT). Gooley (1993) Schalck (1993) described algorithms based
mixed-integer programming (MIP) insertion heuristics, achieved good overall performance: 91% 95% requests scheduled. Parish (1994) used Genitor
(Whitley, 1989) genetic algorithm, scheduled roughly 96% task requests, outperforming MIP approaches. three researchers used AFIT benchmark
suite consisting seven problem instances, representing actual AFSCN task request data
visibilities seven consecutive days October 12 18, 1992. Later, Jang (1996)
introduced problem generator employing bootstrap mechanism produce additional
test problems qualitatively similar AFIT benchmark problems. Jang
used generator analyze maximum capacity AFSCN, measured
aggregate number task requests satisfied single-day.
general decision problem AFSCN Scheduling minimal conflicts N Pcomplete, special subclasses AFSCN Scheduling polynomial. Burrowbridge (1999)
considers simplified version AFSCN scheduling, task specifies one resource (antenna) low-altitude satellites present. objective maximize
number scheduled tasks. Due orbital dynamics low-altitude satellites,
583

fiBarbulescu, Howe, Whitley, & Roberts

task requests problem negligible slack ; i.e., window size equal
request duration. Assuming one task scheduled per time window, wellknown greedy activity-selector algorithm (Cormen, Leiserson, & Rivest, 1990) used
schedule requests since yields solution maximal number scheduled tasks.
schedule low altitude requests one multiple antennas present particular
ground station, extended greedy activity-selector algorithm multiple resource
problems. proved extension greedy activity-selector optimally schedules low altitude requests general problem AFSCN Scheduling (Barbulescu,
Watson, Whitley, & Howe, 2004b).

4. Algorithms
implemented variety algorithms AFSCN scheduling: iterative repair, heuristic
constructive search, local search, genetic algorithm (GA), Squeaky Wheel Optimization (SWO). shown Section 5, found randomized next descent local
search, GA SWO work best AFSCN scheduling.
considered constructive search algorithms based texture (Beck, Davenport,
Davis, & Fox, 1998) slack (Smith & Cheng, 1993) constraint-based scheduling heuristics.
implemented straightforward extensions algorithms application.
results poor; number request tasks combined presence multiple
alternative resources task make application methods impractical.
report performance values constructive search methods
methods depend critically heuristics; uncomfortable concluding
methods poor may found good enough heuristics them.
tried using commercial off-the-shelf satellite scheduling package similarly
poor results. report performance values commercial system
designed specifically application access
source determine reason poor performance.
4.1 Solution Representation
Permutation based representations frequently used solving scheduling problems
(e.g., Whitley, Starkweather, Fuquay, 1989; Syswerda, 1991; Wolfe, Sorensen, 2000; Aickelin, Dowsland, 2003; Globus et al., 2003). algorithms, except iterative-repair,
encode solutions using permutation n task request IDs (i.e., [1..n]). schedule
builder used generate solutions permutation request IDs. schedule builder
considers task requests order appear . task request assigned
first resource available sequence resource window pairs provided
task description (this first feasible resource sequence); earliest possible
starting time chosen resource. minimizing number conflicts,
request cannot scheduled alternative resources, dropped
schedule (i.e., bumped). minimizing sum overlaps, request cannot
scheduled without conflict alternative resources, assign resource
584

fiUnderstanding Algorithm Performance

overlap requests scheduled far minimized. 6 Note schedule
builder favor order alternative resources specified request,
even though preference specified alternatives.
4.2 Iterative Repair
Iterative repair methods successfully used solve various oversubscribed scheduling problems, e.g., Hubble Space Telescope observations (Johnston & Miller, 1994) space
shuttle payloads (Zweben et al., 1994; Rabideau, Chien, Willis, & Mann, 1999). NASAs
ASPEN (A Scheduling Planning Environment) framework (Chien et al., 2000), employs constructive repair-based methods used model solve
real-world space applications scheduling EOS. recently, Kramer Smith
(2003) used repair-based methods solve airlift scheduling problem USAF Air
Mobility Command.
case, key component implementation domain appropriate ordering heuristic guide repairs. AFSCN scheduling, Gooleys algorithm (1993)
uses domain-specific knowledge implement repair-based approach. implement
improvement Gooleys algorithm guaranteed yield results least good
produced original version.
Gooleys algorithm two phases. first phase, low altitude requests
scheduled, mainly using Mixed Integer Programming (MIP). large number
low altitude requests, requests divided two blocks. MIP procedures
first used schedule requests first block. MIP used schedule
requests second block, inserted schedule around requests
first block. Finally, interchange procedure attempts optimize total number
low altitude requests scheduled. needed low altitude requests
scheduled disjoint blocks. low altitude requests scheduled, start time
assigned resources remain fixed. implementation, replaced first phase
greedy algorithm (Barbulescu et al., 2004b) proven schedule optimal number
low altitude requests7 . greedy algorithm modifies well-known activity-selector
algorithm (Cormen et al., 1990) multiple resource problems: algorithm still schedules
requests increasing order due date, however specifies request
scheduled resource idle time start time minimum.
version accomplishes function Gooleys first phase,
guarantee optimal number low-altitude requests scheduled. Thus, result
guaranteed equal better Gooleys original algorithm.
second phase, high altitude requests inserted schedule (without
rescheduling low altitude requests). order insertion high altitude
requests computed. requests sorted decreasing order ratio duration
request average length time windows (this similar flexibility
measure defined Kramer Smith, 2003 AMC); ties broken based number
alternative resources specified (fewer alternatives scheduled first). high
6. two non-scheduled tasks overlap other, mutual overlap part sum
overlaps. overlap scheduled requests considered.
7. algorithm optimally solves problem scheduling low altitude requests, polynomial
time.

585

fiBarbulescu, Howe, Whitley, & Roberts

altitude requests considered insertion, interchange procedure attempts
accommodate unscheduled requests, rescheduling high altitude requests.
unscheduled high altitude request, list candidate requests rescheduling
computed (such successful rescheduling operation, unscheduled request
placed spot initially occupied candidate). heuristic measure
used determine requests candidate list rescheduled.
chosen candidates, scheduling alternatives available, procedure applied
identify requests rescheduled. interchange procedure defined
two levels recursion called three satellite interchange.
4.3 Randomized Local Search (RLS)
implemented hill-climber call randomized local search, starts randomly generated solution iteratively moves toward better equally good neighboring solution. successfully applied number well-known
scheduling problems, selected domain-independent move operator, shift operator. current solution , neighborhood defined considering (N 1) 2
pairs (x, y) positions , subject restriction 6= x 1. neighbor
0
corresponding position pair (x, y) produced shifting job position
x position y, leaving relative job orders unchanged. x < y,
0 = ((1), ..., (x 1), (x + 1), ..., (y), (x), (y + 1), ..., (n)). x > y,
0 = ((1), ..., (y 1), (x), (y), ..., (x 1), (x + 1), ..., (n)).
Given large neighborhood size, use shift operator conjunction nextdescent hill-climbing. implementation completely randomizes neighbor examine next, replacement: step, x chosen randomly.
general approach termed stochastic hill-climbing Ackley (1987).
value randomly chosen neighbor equal better value current
solution, becomes new current solution.
emphasized Randomized Local Search, stochastic hill-climbing,
sometimes much effective steepest-descent local search next-descent local
search neighbors checked predefined order (as opposed random order).
Forrest Mitchell (1993) showed random mutation hill climber (much RLS
Ackleys stochastic hill climber) found solutions much faster steepest-descent local
search problem called Royal Road function. random mutation hill
climber found solutions much faster hill climber generated examined
neighbors systematically (in predefined order). Random mutation hill climber
much effective genetic algorithm problem despite existence
would appear natural building blocks function. notable
Royal Road function staircase function, step staircase
plateau.
4.4 Genetic Algorithm
Genetic algorithms found perform well AFSCN scheduling problem
early studies (Parish, 1994). Genetic algorithms found effective
oversubscribed scheduling applications, scheduling F-14 flight simulators (Syswerda,
586

fiUnderstanding Algorithm Performance

1991) abstraction NASAs EOS problem (Wolfe & Sorensen, 2000). studies,
used version Genitor originally developed warehouse scheduling application
(Starkweather et al., 1991); version used Parish AFSCN scheduling.
genetic algorithms, Genitor maintains population solutions; implementation, fixed population size 200. step algorithm, pair parent
solutions selected, crossover operator used generate single child solution,
replaces worst solution population. Selection parent solutions
based rank fitness, relative solutions population. Following
Parish (1994) Starkweather et al. (1991), used Syswerdas (1991) position-based
crossover operator.
Syswerdas position-based crossover operator starts selecting number random
positions second parent. corresponding selected elements appear exactly
positions offspring. remaining positions offspring filled
elements first parent order appear parent:
Parent 1: B C E F G H J
Parent 2: C F J H G B E
Selected Elements:
* *
*
*
Offspring: C F E G H B J
implementation, randomly choose number positions selected,
larger one third total number positions smaller two
thirds total number positions.
4.5 Squeaky Wheel Optimization
Squeaky Wheel Optimization (SWO) (Joslin & Clements, 1999) repeatedly iterates
cycle composed three phases. First, greedy solution built, based priorities associated elements problem. Then, solution analyzed, elements
causing trouble identified based contribution objective function. Third,
priorities trouble makers modified, considered earlier next iteration. cycle repeated, termination condition
met.
constructed initial greedy permutation SWO sorting requests increasing order flexibility. flexibility measure similar defined
AMC application (Kramer & Smith, 2003): duration request divided
average time window possible alternative resources. break ties based
number alternative resources available. requests equal flexibilities numbers
alternative resources, earlier request scheduled first. multiple runs SWO,
restarted modified permutation created performing 20 random swaps
initial greedy permutation.
minimizing sum overlaps, identified overlapping requests
trouble spots schedule. Note overlap, considered one request
scheduled; request (or requests, two requests involved)
overlapping request. sorted overlapping requests increasing order
contribution sum overlaps. associated request distance
587

fiBarbulescu, Howe, Whitley, & Roberts

move forward, based rank sorted order. fixed minimum distance
moving forward one maximum distance five (this seems work better
possible values tried). distance values equally distributed among ranks.
moved requests forward permutation increasing order contribution
sum overlaps: requests smaller overlaps moved first. tried versions
SWO distance move forward proportional contribution
sum overlaps fixed. However, versions performed worse rank based
distance implementation described above. minimizing conflicts schedule
conflicts equal contribution objective function; therefore decided move
forward fixed distance five (we tried values two seven five
best).
4.6 Heuristic Biased Stochastic Sampling (HBSS)
HBSS (Bresina, 1996) incremental construction algorithm multiple rootto-leaf paths stochastically generated. step, HBSS algorithm needs
heuristically choose next request schedule unscheduled requests. used
flexibility measure described SWO rank unscheduled requests. compute
flexibility request order decreasing order flexibility;
request given rank according ordering (first request rank 1, second
request rank 2, etc.). bias function applied ranks; noted Bresina (1996,
p.271), choice bias function reflects confidence one heuristics accuracy
- higher confidence, stronger bias. flexibility heuristic effective
greedy heuristic constructing solutions AFSCN scheduling. Therefore used
relatively strong bias function, exponential bias. rank r, bias computed:
bias(r) = er . probability select unscheduled request rank r
computed as:
bias(r)
P (r) = P
iUnscheduled bias(rank(i))
Unscheduled represents set unscheduled requests.
implementation HBSS re-compute flexibility unscheduled tasks
every time choose next request scheduled. words, HBSS building
permutation requests schedule builder produces corresponding schedule.
terms CPU time, means time required HBSS build solution
similar algorithms (dominated number evaluations). version
re-computing flexibility unscheduled tasks tasks scheduled would lot
expensive. fact, EOS similar oversubscribed scheduling problem,
Globus et al. (2004) found updating heuristic values HBSS scheduling
hundreds times slower permutation-based techniques, required far
memory, produced poor schedules.

588

fiUnderstanding Algorithm Performance

5. Works Well?
first step understanding best solve problem assess methods perform
best. results running algorithms summarized Tables 2 3
respectively. Genitor, randomized local search (RLS) Squeaky Wheel Optimization
(SWO), report best mean value standard deviation observed 30
runs, 8000 evaluations per run. HBSS, statistics taken 240,000 samples.
Genitor RLS initialized random permutations.
best known values sum overlaps (see Table 2) obtained running
Genitor population size increased 400 50,000 evaluations; hundreds experiments using numerous algorithms, found better solutions
these. report algorithm better Genitor means better
Genitor algorithms limited 8000 evaluations.
exception Gooleys algorithm, CPU times dominated number
evaluations therefore similar. Dell Precision 650 3.06 GHz Xeon
running Linux, 30 runs 8000 evaluations per run take 80 190 seconds (for
precise values, see Barbulescu et al., 2004).
increase number requests received day recent R problems
causes increase number percentage unscheduled requests. problems, eight task requests (or 2.5% tasks) scheduled; 97.5%
99% task requests scheduled. R problems, 42 (or 8.7%
tasks) scheduled; 91.3% 97.2% tasks requests scheduled.
compare algorithm performance, statistical analyses include Genitor, SWO,
RLS. include analyses algorithms SWO1Move (a variant SWO
explore Section 6.5.2), ALLS (a variant Local Search present Section 7).
judge significant differences final evaluations using ANOVA five algorithms
recent days data. ANOVAs came back significant, justified
performing pair-wise tests. examined single-tailed, two sample t-test well
non-parametric Wilcoxon Rank Sum test. Wilcoxon test significance results
t-test except two pairs, present p-values t-test
close rejection threshold p .005 per pair-wise test 8 .
minimizing conflicts, many algorithms find solutions best known
values. Pair-wise t-tests show Genitor RLS significantly different R1,
R3, R4. Genitor significantly outperforms RLS R2 (p = .0023) R5 (p = .0017).
SWO perform significantly different RLS five days significantly
outperforms Genitor R5. Genitor significantly outperforms SWO R2 R4; however,
adjusting parameters used run SWO may fix problem. fact
surprising well SWO performs minimizing conflicts, given chose
simple implementation, tasks conflict moved forward fixed
distance. HBSS performs well problems; however, fails find best known
values R1, R2 R3. original solution problem, Gooleys, computes
single solution; results improved sampling variant (see Section 6.2.1).
8. Five algorithms imply, worst, 10 pair-wise comparisons per day data. control experimentwise error, use (very conservative, simple) Bonferroni adjustment; adjustment known
increase probability Type II error (favoring false acceptance distributions similar).
= .05, judge two algorithms significantly different p .005.

589

fiBarbulescu, Howe, Whitley, & Roberts

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Min
8
4
3
2
4
6
6
42
29
17
28
12

Genitor
Mean
8.6
4
3.03
2.06
4.1
6.03
6
43.7
29.3
17.63
28.03
12.03

SD
0.49
0
0.18
0.25
0.3
0.18
0
0.98
0.46
0.49
0.18
0.18

Min
8
4
3
2
4
6
6
42
29
17
28
12

RLS
Mean
8.7
4.0
3.1
2.2
4.7
6.16
6.06
44.0
29.8
18.0
28.36
12.4

SD
0.46
0
0.3
0.48
0.46
0.37
0.25
1.25
0.71
0.69
0.66
0.56

Min
8
4
3
2
4
6
6
43
29
18
28
12

SWO
Mean
8
4
3
2.06
4
6
6
43.3
29.96
18
28.3
12

SD
0.0
0.0
0.0
0.25
0.0
0.0
0.0
0.46
0.18
0.0
0.46
0

Min
8
4
3
2
4
6
6
45
32
19
28
12

HBSS
Mean
9.76
4.64
3.37
3.09
4.27
6.39
7.35
48.44
35.16
21.08
31.22
12.36

Gooley
SD
0.46
0.66
0.54
0.43
0.45
0.49
0.54
1.15
1.27
0.89
1.10
0.55

11
7
5
4
5
7
6
45
36
20
29
13

Table 2: Performance Genitor, RLS, SWO, HBSS Gooleys algorithm terms
best mean number conflicts. Statistics Genitor, local search
SWO collected 30 independent runs, 8000 evaluations per run.
HBSS, 240,000 samples considered. Min numbers boldface indicate best
known values.

minimizing overlaps, RLS finds best known solutions two
problems. significantly outperforms Genitor R1 R2, significantly under-performs
R3, significantly differ performance R4 R5. RLS SWO
perform significantly different except R3 RLS under-performs. SWO significantly
outperforms Genitor five days. However, run beyond 8000 evaluations, Genitor
continues improve solution quality SWO fails find better solutions. HBSS
finds best known solutions problems. comparison, computed
overlaps corresponding schedules built using Gooleys algorithm present
last column Table 3; however, Gooleys algorithm designed minimize
overlaps.
5.1 Progress Toward Solution
SWO Genitor apply different criteria determine solution modifications. RLS randomly chooses first shift resulting equally good improving solution. assess
effect differences, tracked best value obtained far running
algorithms. problem, collected best value found SWO, Genitor RLS
increments 100 evaluations, 8000 evaluations. averaged values 30
runs SWO, RLS, Genitor, respectively.
typical example objective function presented Figures 2 3.
objective functions, curves similar, relative performance. SWO quickly
finds good solution, performance levels off. RLS progresses quickly
first half search, Genitor exacts smaller improvements. second half
search though, RLS takes longer find better solutions, Genitor continues
steadily progress toward best solution. best far Genitor improve
590

fiUnderstanding Algorithm Performance

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Min
104
13
28
9
30
45
46
913
519
275
738
146

Genitor
Mean
106.9
13
28.4
9.2
30.4
45.1
46.1
987.8
540.7
292.3
755.4
146.5

SD
0.6
0.0
1.2
0.7
0.5
0.4
0.6
40.8
13.3
10.9
10.3
1.9

Min
104
13
28
9
30
45
46
798
494
250
725
146

RLS
Mean
106.76
13.66
30.7
10.16
30.83
45.13
49.96
848.66
521.9
327.53
755.46
147.1

SD
1.81
2.59
4.31
2.39
1.36
0.5
5.95
38.42
20.28
55.34
25.42
2.85

Min
104
13
28
9
30
45
46
798
491
265
731
146

SWO
Mean
104
13.4
28.1
13.3
30
45.1
46
841.4
503.8
270.1
736.2
146.0

SD
0.0
2.0
0.6
7.8
0.0
0.3
0.0
14.0
6.5
2.8
3.0
0.0

Min
128
43
28
9
50
45
83
1105
598
416
827
146

HBSS
Mean
158.7
70.1
52.5
45.7
82.6
65.5
126.4
1242.6
681.8
571.0
978.4
164.4

Gooley
SD
28.7
31.1
16.9
13.0
13.2
16.8
12.5
42.1
27.0
46.0
28.7
10.8

687
535
217
216
231
152
260
1713
1047
899
1288
198

Table 3: Performance Genitor, local search, SWO, HBSS Gooleys algorithm
terms best mean sum overlaps. statistics collected 30
independent runs, 8000 evaluations per run. HBSS, 240,000 samples
considered. Min numbers boldface indicate best known values.

quickly best far RLS. unexpected: best solution
Genitor population isnt likely improve frequently beginning run.
sense, tracking evolution median population running Genitor would
indicative progress; use best far allow uniform comparison
three algorithms.
observe two differences objective functions. First, minimizing number conflicts, Genitor RLS eventually equal outperform SWO. minimizing
overlaps, Genitor RLS take longer find good solutions; 8000 evaluations, SWO
found best solutions. Second, minimizing number conflicts, toward
end run, Genitor outperforms RLS. minimizing overlaps, RLS performs better Genitor. Best known solutions R problems minimizing overlaps
obtained running RLS 50,000 evaluations 30 runs. Running SWO 50,000
evaluations 30 runs results small improvements, two problems.

6. Hypotheses Explaining Algorithm Performance
Genitor, SWO RLS successful algorithms tested AFSCN
problem. Although operate search space (permutations), traverse
space rather differently. puzzle three apparently well suited
problem. solve puzzle, first, describe plateaus dominant feature
search space. show greedy schedule builder main reason presence
plateaus. Then, test hypotheses appear follow dominance
plateaus characteristics algorithm.
study, greedy schedule builder well objective function part
problem specification. Therefore, formulating testing hypotheses, consider
search space features (such plateaus number identical solutions) fixed.
591

fi36

Genitor
RLS
SWO

70

Average Best Far Number Bumps

Average Best Far Number Bumps

Barbulescu, Howe, Whitley, & Roberts

60

50

40

30
0

500

1000

1500
2000
2500
Evaluations

3000

3500

34
33
32
31
30
29
4000

4000

Genitor
RLS
SWO

35

4500

5000

5500
6000
6500
Evaluations

7000

7500

8000

Figure 2: Evolutions average best value conflicts obtained SWO, RLS
Genitor 8000 evaluations, 30 runs. left figure depicts improvement average best value first 4000 evaluations. last
4000 evaluations depicted right figure; note scale different
y-axis. curves obtained R2.

850

Genitor
RLS
SWO

1600

Average Best Far Sum Overlaps

Average Best Far Sum Overlaps

1800

1400
1200
1000
800
600
400

0

500

1000

1500
Evaluations

2000

2500

3000

Genitor
RLS
SWO

800
750
700
650
600
550
500
3000

4000

5000
6000
Evaluations

7000

8000

Figure 3: Evolutions average best value sum overlaps obtained SWO, RLS
Genitor 8000 evaluations, 30 runs. left figure depicts
improvement average best value first 3000 evaluations. last
5000 evaluations depicted right figure; note scale different
y-axis. curves obtained R2.

6.1 Redundancy Search Space
third neighbors RLS result exactly schedule
overlaps minimal conflicts evaluation functions (Barbulescu et al., 2004a; Barbulescu,
Whitley, & Howe, 2004c); 62% neighbors RLS result evaluation
(see Section 6.4). AFSCN search space dominated plateaus three reasons.
592

fiUnderstanding Algorithm Performance

main reason presence plateaus greedy schedule builder: request
scheduled first available resource list possible alternatives. example,
consider permutation n1 total n requests. last request X inserted
first position permutation schedule builder applied, schedule
obtained. scan permutation n 1 requests left right, successively
inserting X second position, third on, building corresponding
schedule. long none requests appearing X permutation require
particular spot occupied X first feasible alternative scheduled,
schedule obtained. happens two reasons: 1) requests inserted
schedule order appear permutation 2) greedy
schedule builder considers possible alternatives order specified
accepts first alternative request scheduled. Let k + 1
first position insert X alter S; means first feasible alternative
schedule request position k overlaps spot occupied X S. X
inserted position k + 1, new schedule S1 obtained; schedule S1
built inserting X subsequent positions, encountering request first
feasible alternative overlaps spot occupied X S1, etc. example
shows shifting permutation might change corresponding schedule.
address presence plateaus search space result greedy
schedule builder, could used randomization scheme diversify scheduler.
However, randomization implementing schedule builder result problems unpredictability value assigned permutation. example, Shaw
Fleming (1997) argue use randomization schedule builder detrimental performance genetic algorithm indirect representation used (for
chromosomes schedules, case Genitor AFSCN scheduling).
support idea noting general, genetic algorithms rely preservation
good fitness values. Also, SWO, randomization schedule builder changes
significance reprioritization one iteration next one. scheduler
randomized, new order requests likely result schedule
repaired version previous one. permutation requests
transformed multiple different schedules nondeterministic nature
scheduler, SWO mechanism operate intended.
second reason plateaus search space presence time windows.
request X needs scheduled sometime end day, even appears
beginning permutation, still occupy spot schedule towards
end (assuming scheduled) therefore, requests (which
appeared X permutation).
third reason discretization objective function. Clearly, range
conflicts small number discrete values (with weak upper bound number
tasks). range overlaps still discrete larger conflicts. Using
overlaps evaluation function, approximately 20 times unique objective function
values observed search compared searches objective minimize
conflicts. effect discretization seen differing results using two
objective functions. Thus, one reason including studies show
effects discretization.
593

fiBarbulescu, Howe, Whitley, & Roberts

6.2 Genitor Learn Patterns Request Ordering?
hypothesize Genitor performs well discovers interactions
requests matter. examine sets permutations correspond schedules
best known values identify chains common request orderings permutations,
similar spirit notion backbone SAT (e.g., Singer et al., 2000). presence
chains would support hypothesis Genitor discovering patterns request
orderings. classic building block hypothesis: pattern present
parent solutions contributes evaluation critical way; patterns
recombined inherited genetic recombination (Goldberg, 1989).
6.2.1 Common Request Orderings
One particular characteristics AFSCN scheduling problem presence
two categories requests. low altitude requests fixed start times specify
one three alternative resources. high altitude requests implicitly specify multiple
possible start times (because corresponding time windows usually longer
duration needs scheduled) 14 possible alternative resources. Clearly
low altitude requests constrained. suggests possible solution pattern,
low altitude requests would scheduled first.
explore viability pattern, implemented heuristic schedules
low altitude requests high altitude ones; call heuristic split
heuristic. incorporated split heuristic schedule builder: given permutation
requests, new schedule builder first schedules low altitude requests,
order appear permutation. Without modifying position low
altitude requests schedule, high altitude requests inserted schedule,
order appear permutation. idea scheduling low
altitude requests high altitude requests basis Gooleys heuristic (1993).
Also, split heuristic similar contention measures defined Frank et al. (2001).
results obtained using split heuristic surprising: minimizing
conflicts, best known valued schedules obtained quickly problems simply
sampling small number random permutations. results obtained sampling 100
random permutations shown Table 4.
performance split heuristic transfer R problems
minimizing number overlaps, results Table 4 offer indication possible
request ordering pattern good solutions. Genitor fact performing well
discovers scheduling low high altitude requests produces good solutions?
general explanation Genitors performance, hypothesize Genitor
discovering patterns request ordering: certain requests must come
requests. test this, identify common request orderings present solutions obtained
multiple runs Genitor. ran 1000 trials Genitor selected solutions
corresponding best known values. First, checked request orderings form
requestA requestB appear permutations corresponding best
known solutions problems corresponding good solutions R problems.
results summarized Table 5. Sol. Value columns show value
solutions chosen analysis (out 1000 solutions). number solutions (out
594

fiUnderstanding Algorithm Performance

Day
A1
A2
A3
A4
A5
A6
A7

Best
Known
8
4
3
2
4
6
6

Random Sampling-S
Min Mean Stdev
8
8.2
0.41
4
4
0
3
3.3
0.46
2
2.43
0.51
4
4.66
0.48
6
6.5
0.51
6
6
0

Table 4: Results running random sampling split heuristic (Random SamplingS) 30 experiments, generating 100 random permutations per experiment
minimizing conflicts.

1000) corresponding chosen value shown # Solutions columns.
analyzing common pairs request orderings minimizing number conflicts,
observed pairs specified low altitude request appearing high altitude
one. Therefore, separate pairs two categories: pairs specifying low altitude
request high altitude requests (column: (Low,High) Pair Count) rest
(column: Pairs). problems, results clearly show common
pairs ordering requests specify low altitude request high altitude request.
R problems, pairs observed. part, might due
small number solutions corresponding value (only 25 1000 R1
minimizing conflicts). small number solutions corresponding value
reason big pair counts reported minimizing overlaps R problems.
know problems split heuristic results best-known solutions
minimizing conflicts; therefore, results Table 5 somewhat surprising. expected
see low-before-high common pairs requests problems minimizing
number conflicts; instead, pair counts similar two objective functions.
Genitor seems discover patterns request interaction, specify low
altitude request high altitude request.
results Table 5 heavily biased number solutions considered 9 . Indeed,
let denote number solutions identical value (the number column # Solutions).
Also, let n denote total number requests. Suppose preferences orderings
tasks good solutions. request ordering B probability
1/2 present one solutions, therefore, probability 1/2
present solutions. Given exist n (n 1) possible precedences,
expected number common orderings preferences orderings tasks
exist n(n 1)/2s . problems R5, >= 420. expected number
common orderings assuming preferences orderings tasks exist smaller
n(n 1)/2420 , negligible. Therefore, number actually detected common
9. wish thank anonymous reviewer earlier version work insightful observation;
rest paragraph based his/her comments.

595

fiBarbulescu, Howe, Whitley, & Roberts

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Sol.
Value
8
4
3
2
4
6
6
43
29
17
28
12

Minimizing Conflicts
#
(Low,High)
Solutions Pair Count
420
77
1000
29
936
86
937
132
862
45
967
101
1000
43
25
2166
573
64
470
78
974
54
892
57


Pairs
1
1
1
3
9
10
3
149
5
21
16
10

Sol.
Value
107
13
28
9
30
45
46
947
530
285
744
146

Minimizing Overlaps
#
(Low,High)
Solutions Pair Count
922
78
959
50
833
72
912
117
646
48
817
124
891
57
15
2815
30
1597
37
1185
31
1240
722
109


Pairs
7
3
10
5
17
10
11
1222
308
400
347
11

Table 5: Common pairs request orderings found permutations corresponding best
known/good Genitor solutions objective functions.

precedences (approximately 30 125 low high pairs anywhere 1
17 others) seem actual request patterns. case
R problems. Indeed, example, R1, = 15, expected number common
orderings preferences orderings tasks exist 7.1, number
actually detected precedences 2815 low high 1222 pairs.
experiment found evidence support hypothesis Genitor solutions
exhibit patterns low high altitude requests. Given result, next investigate
split heuristic (always scheduling low high altitude requests) enhance
performance Genitor. answer question, run second experiment using Genitor,
split heuristic schedule builder used evaluate every schedule generated
search.
Table 6 shows results using split heuristic Genitor R problems.
Genitor split heuristic fails find best-known solution R2 R3.
surprising: fact, show scheduling low altitude requests
high altitude requests may prevent finding optimal solutions.
results minimizing sum overlaps shown Table 7. exception
A3, A4 A6, Genitor using split heuristic fails find best known solutions
problems. R problems, using split heuristic actually improves results
obtained Genitor R1 R2; noted R1 R2 solutions
good found RLS using 8000 evaluation however. Thus search
hybridizes genetic algorithm schedule builder using split heuristic sometimes
helps sometimes hurts terms finding good solutions.
attempted identify longer chains common request ordering. successful: Genitor seem discover patterns request ordering, multiple different
patterns request orderings result conflicts (or even schedule).
596

fiUnderstanding Algorithm Performance

Day
R1
R2
R3
R4
R5

Best
Known
42
29
17
28
12

Genitor New
Schedule Builder
Min Mean Stdev
42
42
0
30
30
0
18
18
0
28
28
0
12
12
0

Table 6: Minimizing conflicts: results running Genitor split heuristic 30 trials,
8000 evaluations per trial.

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Best
Known
104
13
28
9
30
45
46
774
486
250
725
146

Genitor New
Schedule Builder
Min Mean Stdev
119
119
0.0
43
43
0.0
28
28
0.0
9
9
0.0
50
50
0.0
45
45
0.0
69
69
0.0
907 924.33 6.01
513 516.63 5.03
276 276.03 0.18
752 752.03 0.0
146
146
0.0

Table 7: Minimizing sum overlaps: results running Genitor split heuristic
using split heuristic schedule builder evaluate schedule. results
based 30 experiments, 8000 evaluations per experiment.

could think patterns building blocks. Genitor identifies good building blocks
(orderings requests resulting good partial solutions) propagates final
population (and final solution). patterns essential building good solution.
However, patterns ubiquitous (not necessary) and, therefore,
attempts identify across different solutions produced Genitor failed.
597

fiBarbulescu, Howe, Whitley, & Roberts

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Minimizing Conflicts
Best Known Min Mean Stdev
8
8
8.0
0.0
4
4
4.0
0.0
3
3
3.16
0.46
2
2
2.13
0.34
4
4
4.03
0.18
6
6
6.23
0.63
6
6
6.0
0.0
42
42* 43.43
0.56
29
30
30.1
0.3
17
17* 17.73
0.44
28
28
28.53
0.57
12
12
13.1
0.4

Minimizing Overlaps
Best Known Min Mean Stdev
104
104 104.46
0.68
13
13
13.83
1.89
28
28
30.13
1.96
9
9
11.66
1.39
30
30
30.33
0.54
45
45
48.3
6.63
46
46
46.26
0.45
774
851 889.96 31.34
486
503
522.2
9.8
250
268
276.4
4.19
725
738 758.26 12.27
146
147 151.03
2.19

Table 8: Statistics results obtained 30 runs SWO initialized random
permutations (i.e., RandomStartSWO), 8000 evaluations per run. mean
best value 30 runs well standard deviations shown.
entries indicate values better corresponding SWO values.
problem, best known solution objective function
included.

6.3 SWOs Performance Due Initialization?
graphs search progress SWO (Figures 2 3) show starts much
better solutions algorithms. initial greedy solution SWO translated best known values five problems (A2, A3, A5, A6 R5) minimizing
number conflicts two problems (A6 R5) minimizing overlaps.
important initial greedy permutation SWO? answer question,
replaced initial greedy permutation (and variations subsequent iterations SWO)
random permutations used SWO mechanism iteratively move forward
requests conflict. call version SWO RandomStartSWO. compared
results produced RandomStartSWO results SWO assess effects
initial greedy solution. results produced RandomStartSWO presented Table 8.
entries indicate RandomStartSWO produced better result SWO.
exception R2, minimizing number conflicts, best known values
obtained RandomStartSWO problems. fact, R1 R3, best results
obtained slightly better best found SWO. minimizing sum
overlaps, best known values obtained problems; R problems,
performance SWO worsens initialized random permutation. However,
RandomStartSWO still performs better well Genitor (with exception R2
minimizing number conflicts R5 overlaps) objective functions.
results suggest initial greedy permutation main performance factor
SWO: performance RandomStartSWO competitive Genitor.
598

fiUnderstanding Algorithm Performance

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Total
Neighbors
103041
90601
96100
100489
92416
88804
87616
232324
207936
180625
184900
174724

Minimizing
Random Perms
Mean
Avg %
87581.1
84.9
79189.3
87.4
82937
86.8
84759
84.3
77952
84.3
74671.5
84.0
76489.6
87.3
189566
81.5
173434
83.4
153207
84.8
157459
85.1
154347
88.3

Conflicts
Optimal Perms
Mean
Avg %
91609.1
88.9
83717.9
92.4
84915.4
88.9
87568.2
87.1
82057.4
88.7
78730.3
88.6
79756.5
91.0
190736
82.0
177264
85.2
156413
86.5
162996
88.1
159581
91.3

Minimizing
Random Perms
Mean
Avg %
75877.4
73.6
70440.9
77.7
73073.3
76.5
72767.7
72.4
67649.3
73.2
63667.4
71.6
67839
77.4
145514
62.6
137568
66.1
126511
70.0
130684
70.6
133672
76.5

Overlaps
Optimal Perms
Mean
Avg %
88621.2
86.0
81141.9
89.5
82407.7
86.3
85290
84.8
79735.9
86.2
75737.9
85.2
77584.3
88.5
160489
69.0
160350
77.1
139012
76.9
145953
78.9
152629
87.3

Table 9: Statistics number neighbors resulting schedules value
original, 30 random optimal permutations, objective
functions

6.4 RLS Performing Random Walk?
RLS spends time traversing plateaus search space (by accepting nonimproving moves). section, study average length random walks
plateaus encountered local search. show search progresses random walks
become longer finding improvement, mirroring progress RLS. note
similar phenomenon observed SAT (Frank, Cheeseman, & Stutz, 1997).
third shifting pairs requests result schedules identical
current solution (Barbulescu et al., 2004a, 2004c). However, even larger number
neighbors result different schedules value current solution.
means accepted moves search non-improving moves; search ends
randomly walking plateau exit found. collected results
number schedules value original schedule, perturbing solutions possible pairwise changes. Note schedules include ones identical
current solution. results summarized Table 9. report average
percentage neighbors identical value original permutation. results show
that: 1) 84% shifts result schedules value original one, minimizing conflicts. minimizing overlaps, 62% (usually
around 70%) shifts result value schedules. 2) Best known solutions
slightly same-value neighbors random permutations; difference statistically significant minimizing overlaps. suggests plateaus corresponding
good values search space might larger size plateaus corresponding
random permutations.
assess size plateaus impact RLS, performed random walks
fixed intervals RLS. every 500 evaluations RLS, identified current
599

fiBarbulescu, Howe, Whitley, & Roberts

solution Crt. Crt, performed 100 iterations local search starting
Crt stopping soon better solution maximum number equally good
solutions encountered. problems, best known solutions often found early
search; 100 iterations local search started Crt would reach
maximum number equally good solutions. Therefore, chose limit 1000 steps
plateau problems 8000 steps R problems. averaged
number equally good solutions encountered 100 trials search performed
Crt; represents average number steps needed find exit plateau.
Figure 4 displays results obtained R4; similar behavior observed rest
problems. Note used log scale axis graph corresponding
minimizing overlaps: 100 walks performed current solution value 729
end taking maximum number steps allowed (8000) without finding exit
plateau. Also, random walk steps counts equal moves; number evaluations
needed RLS (x-axis) considerably higher due needing check detrimental moves
accepting equal ones. results show large plateaus present search
space; improving moves lead longer walks lower plateaus, detrimental
moves factored in, appears mirror performance RLS.
1800

10000

LS

729

729

LS
729 729

1600
29

29

1200
30

29

1000
800

30

30

600
32

31

29

1000
Average number steps plateau

Average number steps plateau

1400

29

30

30

30

782

814
100

794

786

786

777

751

740

864
1068

944

10

400

1450
200
0

33
63
0

45
1000

2000

3000

4000
Evals

5000

6000

7000

8000

1

0

1000

2000

3000

4000
Evals

5000

6000

7000

8000

Figure 4: Average length random walk plateaus minimizing conflicts (left)
overlaps (right) single local search run R4. labels graphs
represent value current solution. Note log scale axis
graph corresponding minimizing overlaps. best known value
problem 28 minimizing conflicts 725 minimizing overlaps.

AFSCN scheduling problems, states plateau least one
neighbor better value (this neighbor represents exit). However, number
exits small percentage total number neighbors, therefore, local
search small probability finding exit. Using terminology introduced
Frank et al. (1997), plateaus encountered search AFSCN domain
would classified benches, meaning exits states lower levels present.
exits plateau, plateau local minimum. Determining
plateaus local minima (by enumerating states plateau neighbors)
600

fiUnderstanding Algorithm Performance

prohibitive large size neighborhoods large number equally
good neighbors present state search space. Instead, focus average
length random walk plateau factor local search performance. length
random walk plateau depends two features: size plateau
number exits plateau. Preliminary investigations show number
improving neighbors solution decreases solution becomes better - therefore
conjecture exits higher level plateaus lower level
ones. would account trend needing steps find exit moving
lower plateaus (corresponding better solutions). possible plateaus
corresponding better solutions larger size; however, enumerating states
plateau AFSCN domain impractical (following technique developed Frank
et al., 1997, first iteration breadth first search would result approximately
0.8 (n 1)2 states plateau).
6.5 Long Leaps Instrumental?
problems large plateaus (e.g., research published Gent Walsh,
1995 SAT), hypothesize long leaps search space instrumental
algorithm perform well AFSCN scheduling. SWO moving forward multiple requests
known problematic. position crossover mechanism Genitor
viewed applying multiple consecutive shifts first parent, requests
selected positions second parent moved selected positions
first. sense, time crossover operator applied, multiple move proposed
first parent. hypothesize multiple move mechanism present SWO
Genitor allows make long leaps space thus reach solutions fast.
Note knew exactly requests move, moving forward small
number requests (or even one) might needed reach solutions
quickly. Finding requests move difficult; fact studied performance
informed move operator moves requests positions guarantee
schedule changes (Roberts et al., 2005). found surprising results: informed
move operator performs worse random unrestricted shift employed RLS.
argue multiple moves desired algorithm feature make likely
one moves right one.
investigate hypothesis role multiple moves traversing
search space, perform experiments variable number moves step
Genitor SWO. Genitor, vary number crossover positions allowed.
SWO, vary number requests conflict moved forward.
6.5.1 Effect Multiple Moves Genitor
test effect multiple moves Genitor, change Syswerdas position crossover
imposing fixed number selected positions second parent (see Section 4.4
description Syswerdas position crossover). call implementation Genitor-k
k number selected positions. Recall implementation Syswerdas position
crossover randomly selects number positions larger one third smaller
two thirds total number positions. multiple moves indeed factor
601

fiBarbulescu, Howe, Whitley, & Roberts

Average Best Far Sum Overlaps

2000

Genitor
Genitor-10
Genitor-50
Genitor-100
Genitor-150
Genitor-300
Genitor-350

1900
1800
1700
1600
1500
1400
1300
1200

0

500

1000

1500 2000 2500
Evaluations

Average Best Far Sum Overlaps

1600

3000

3500

4000

Genitor
Genitor-10
Genitor-50
Genitor-100
Genitor-150
Genitor-300
Genitor-350

1500
1400
1300
1200
1100
1000
900
4000

4500

5000

5500 6000 6500
Evaluations

7000

7500

8000

Figure 5: Evolutions average best value obtained Genitor versions
fixed number selected positions crossover. 8000 evaluations, 30
runs. graphs obtained R1; best solution value 773.

performance increasing number selected positions point result
finding improvements faster. positions selected, offspring
similar first parent. number selected positions large, close number
total requests, offspring similar second parent. offspring
similar one two parents, expect slower rate finding improvements
current best solution. Therefore, small large k values, expect Genitor-k
602

fiUnderstanding Algorithm Performance

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Min
11
5
6
5
5
9
8
57
42
27
36
13

Genitor-10
Mean Stdev
14.93
1.94
7.13
1.77
10.4
2.12
10.66
2.7
9.6
2.29
12.63
1.8
10.6
1.75
66.5
4.38
47.16
3.59
31.1
2.41
41.9
2.74
20.73
2.53

Min
8
4
3
2
4
6
6
47
32
19
28
12

Genitor-50
Mean Stdev
9.26
0.63
4.03
0.18
3.36
0.55
3.13
0.81
4.73
0.69
6.83
0.94
6.1
0.30
52.0
2.82
34.53
1.47
21.6
1.67
30.96
2.04
13.23
0.81

Min
8
4
3
2
4
6
6
42
29
17
28
12

Genitor-100
Mean Stdev
8.66
0.47
4.0
0.0
3.0
0.0
2.23
0.50
4.26
0.44
6.03
0.18
6.0
0.0
45.83
1.68
30.0
0.78
18.03
0.61
28.33
0.47
12.46
0.62

Genitor-150
Min Mean Stdev
8
8.53
0.5
4
4.0
0.0
3
3.0
0.0
2
2.06
0.25
4
4.2
0.4
6
6.06
0.25
6
6.0
0.0
42
44.36
1.24
29
29.6
0.56
17
17.63
0.61
28
28.1
0.4
12
12.2
0.4

Table 10: Performance Genitor-k, k represents fixed number selected positions Syswerdas position crossover, terms best mean number
conflicts. Statistics taken 30 independent runs, 8000 evaluations
per run. Min numbers boldface indicate best known values.

find improvements much slower rate Genitor Genitor-k average k values
(values closer half number requests).
study, run Genitor-k k=10, 50, 100, 150, 200, 250, 300 350.
allowed 8000 evaluations per run performed 30 runs problem. results
summarized Tables 10 11 minimizing number conflicts Tables 12
13 minimizing sum overlaps. Note A6 A7 299 297
requests schedule respectively. Therefore Genitor-k k = 300 k = 350 cannot
run two problems. note example, k = 200 mean
200 differences selected positions two parents. offspring likely
similar parents, regardless value k, parents similar.
minimizing number conflicts, worst results produced k = 10.
k = 50, results improve, best knowns found problems; however, R1,
R2, R3, best knowns found. Starting k = 100 k = 250 Genitor-k
finds best known solutions problems. means standard deviations
similar k values; smallest means standard deviations correspond
k = 200 problems k = 250 R problems (with exception R3
k = 200 produces better results). k = 300, best knowns found
anymore problems; 300 close size five problems
feasible run Genitor-300. decay performance significant R
problems: increase means standard deviations k = 300 k = 350;
however, best knowns still found four five problems. Note k = 400
would lot closer total number requests R problems; believe
performance would degraded R problems larger k values.
minimizing overlaps, observe trends similar ones minimizing
number conflicts. k = 10 produces poor results, followed k = 50. Similar results
603

fiBarbulescu, Howe, Whitley, & Roberts

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Min
8
4
3
2
4
6
6
42
29
17
28
12

Genitor-200
Mean Stdev
8.56
0.56
4.0
0.0
3.0
0.0
2.0
0.0
4.3
0.46
6.06
0.25
6.0
0.0
44.03
1.15
29.36
0.49
17.33
0.4
28.03
0.18
12.1
0.3

Min
8
4
3
2
4
6
6
42
29
17
28
12

Genitor-250
Mean Stdev
8.9
0.3
4.03
0.18
3.06
0.25
3.13
0.81
4.73
0.58
6.5
0.57
6.06
0.25
44.03
0.85
29.4
0.49
17.7
0.65
28
0.0
12.06
0.25

Min
9
9
4
4
10
43
29
17
28
12

Genitor-300
Mean Stdev
11.8
1.66
13.66
1.76
9.2
2.1
8.56
1.94
13.86
2.14
44.26
1.01
29.7
0.59
17.73
0.58
28.03
0.18
12.16
0.37

Genitor-350
Min Mean Stdev
43
45.46
1.22
29
30.13
0.86
17
18.63
0.8
28
28.63
0.71
12
12.6
0.81

Table 11: Performance Genitor-k, k represents fixed number selected positions Syswerdas position crossover, terms best mean number
conflicts. Statistics collected 30 independent runs, 8000 evaluations per run. Min numbers boldface indicate best known values.
dashes indicate permutation solutions A6 A7 shorter
300 (299 297, respectively), therefore cannot select 300 positions
permutations.

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Min
149
30
51
59
43
94
67
1321
743
480
866
208

Genitor-10
Mean Stdev
221.53
38.85
69.66
29.22
122.86
36.12
124.5
42.25
90.7
32.01
145.06
33.12
115.66
27.96
1531.13 107.35
961.13
81.62
652.5
90.37
1069.23
74.65
309.03
46.3

Min
107
13
28
9
30
45
46
987
557
319
768
146

Genitor-50
Mean Stdev
115.76 11.53
15.73
3.86
36.26
8.19
19.36
9.3
33.06
3.62
49.6
5.54
51.7
7.89
1139.5 76.57
643.86
50.0
391.56 47.31
840.23 38.79
172.13 18.18

Min
107
13
28
9
30
45
46
914
515
268
735
146

Genitor-100
Mean Stdev
107.2
0.76
13.43
1.54
28.9
1.72
9.23
0.72
30.36
0.96
45.36
0.8
46.5
2.23
991.13 38.19
549.1
18.8
305.3 20.63
757.43 15.95
151.53
7.63

Min
107
13
28
9
30
45
46
915
516
269
731
146

Genitor-150
Mean Stdev
107.1
0.54
13.03
0.18
28.16
0.64
9.06
0.36
30.43
0.5
45.16
0.46
47.63
3.9
963.96 26.89
540.86 15.82
291.3 13.36
752.7 14.07
148.23
5.26

Table 12: Performance Genitor-k, k represents fixed number selected positions Syswerdas position crossover, terms best mean sum
overlaps. Statistics collected 30 independent runs, 8000 evaluations
per run. Min numbers boldface indicate best known values.

produced k = 100, 150, 200, 250. k = 150 results smallest means standard
deviations problems, k = 200 k = 250 produce best results R
problems. k = 300 k = 350, similarly minimizing number conflicts,
604

fiUnderstanding Algorithm Performance

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Min
107
13
28
9
30
45
46
878
512
268
730
146

Genitor-200
Mean Stdev
107.1
0.74
13.2
0.92
28.9
1.6
9.1
0.4
30.6
1.3
46.33
2.7
47.63
4.2
970.1 38.38
538.43 13.94
287.96 11.05
752.1 12.25
147.633
2.95

Min
107
13
28
9
30
45
46
914
511
270
734
146

Genitor-250
Mean Stdev
108.03
2.22
17.0
5.8
31.63
4.47
10.36
3.41
31.56
2.22
50.96
8.82
49.93
5.39
968.63 31.59
538.93 12.88
292.23 12.85
754.53 11.89
147.96
3.7

Min
113
116
63
37
76
935
526
272
745
146

Genitor-300
Mean Stdev
157.66 26.21
185.56 33.27
106.23 26.21
78.06 25.78
160.0 36.59
986.7
37.9
551.63 12.27
299.43
16.3
764 13.36
148.6
3.84

Min
927
532
299
743
146

Genitor-350
Mean Stdev
1008.8 42.17
559.46
19.7
332.46 20.14
785.36 26.63
157
10.6

Table 13: Performance Genitor-k, k represents fixed number selected positions Syswerdas position crossover, terms best mean sum
overlaps. Statistics taken 30 independent runs, 8000 evaluations
per run. Min numbers boldface indicate best known values.

means standard deviations increase best solutions found; best knowns
found R5.
terms evolution solution, observe similar trends two
objective functions. typical examples presented Figure 5 (minimizing overlaps
R1). Genitor-k k = 10 slower finding improvements k = 50 slower
k = 100. k = 150 k = 250 performing similarly similar
original Genitor implementation. k = 300 still moving space rate thats
similar Genitors. k = 350 performance start decay.
original implementation crossover operator (with variable number selected position) shown work well domain scheduling
applications (Syswerda, 1991; Watson, Rana, Whitley, & Howe, 1999; Syswerda & Palmucci, 1991). test problems, results subsection show number
crossover positions influences performance Genitor, terms best solutions
found terms rate finding improvements. small number crossover
positions (10 50), solutions found competitive, improvements
found slower rate original Genitor implementation. Similarity Genitors
original performance obtained k values 100 250. Higher k values result
decay performance. results offer empirical motivation choice
number crossover positions original Genitor implementation. Indeed,
original implementation, crossover uses number positions randomly selected
one third two thirds total number requests. translates
sizes problems sets number positions approximately 100
300.
605

fiBarbulescu, Howe, Whitley, & Roberts

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Minimizing Conflicts
Min Mean Stdev
8
8
0
4
4
0
3
3
0
2
2
0
4
4
0
6
6
0
6
6
0
42* 43.4
0.7
29 29.9
0.3
18 18
0
28 28.1
0.3
12 12
0

Minimizing Overlaps
Min Mean Stdev
104 104
0
13 13
0
28 28
0
9
9
0
30 30
0
45 45
0
46 46
0
872 926.7 22.1
506 522.9 8.9
271 283.0 6.1
745 765.2 10.7
146 146
0

Table 14: Performance modified version SWO one request moved
forward constant distance 5. minimizing conflicts minimizing
sum overlaps, request randomly chosen. statistics collected
30 independent runs, 8000 evaluations per run. indicates
best value better corresponding SWO result. Min numbers boldface
indicate best known values.

6.5.2 Effect Multiple Moves SWO
hypothesize multiple moves present SWO necessary performance.
test hypothesis, start investigating effect moving forward one
request. somewhat similar shifting operator present RLS: request shifted
forward permutation. However, implement SWO reprioritization mechanism,
restrict chosen request moved position gets moved.
minimizing conflicts, one bumped requests randomly chosen; minimizing
overlaps, one requests contributing sum overlaps randomly chosen.
minimizing conflicts minimizing sum overlaps chosen request
moved forward constant distance five 10 . call new algorithm SWO1Move.
results obtained running SWO1Move 30 runs 8000 evaluations per run
presented Table 14. entries indicate value produced SWO1Move
better corresponding SWO result. initial solutions identical
solutions produced using flexibility heuristic initializing SWO.
minimizing conflicts, SWO1Move performs well SWO (in fact, finds
best known solution R1 well). minimizing sum overlaps, performance
SWO R problems worsens significantly one task moved forward. Previously, implemented SWO1Move minimizing overlaps moving forward request
contributes total overlap (Barbulescu et al., 2004c). Randomly choosing
10. tried values; average, value five seems work best.

606

fiUnderstanding Algorithm Performance

Day
R1
R2
R3
R4

Min
840
512
284
764

k=10
Mean
862.5
530.2
291.36
778.57

Stdev
11.28
9.18
4.65
8.45

Min
815
498
266
749

k=20
Mean
829.77
506.53
268.9
757.3

Stdev
8.45
5.25
2.21
6.16

Min
798
493
266
740

k=30
Mean
820.63
508.97
271.07
744.47

Stdev
8.12
5.26
3.52
2.6

Min
825
508
266
737

k=40
Mean
841.13
526.26
273.2
747.2

Stdev
8.02
6.25
3.54
5.06

Table 15: Performance modified version SWO k requests contributing
sum overlaps moved forward constant distance 5. statistics
collected 30 independent runs, 8000 evaluations per run.

request moved forward improved performance SWO1Move. Randomization
useful SWO become trapped cycles (Joslin & Clements, 1999); however,
improvement enough equal performance SWO minimizing overlaps
new days data. fact, longer runs SWO1Move random choice
request moved (30 runs 50,000 evaluations) produce solutions still worse
obtained SWO. results support conjecture performance
SWO due simultaneous moves requests.
attribute discrepancy SWO1Move performance two objective
functions difference discretization two search spaces. minimizing
conflicts, SWO1Move needs identify requests cannot scheduled.
fine tuning needed minimizing sum overlaps; besides identifying requests
cannot scheduled, SWO1Move needs find positions requests
permutation sum overlaps minimized. conjecture fine
tuning achieved simultaneously moving forward multiple requests.
Next, investigate changes performance increasing number requests
(from requests contributing objective function) moved forward. design
experiment constant number requests involved conflicts moved
forward. this, need decide many requests move ones. Moving
two three requests forward results small improvements results Table 14.
Therefore, run multiple versions SWO moving k requests forward, k = 10, 20,
30, 40. determined empirically moving multiple requests (more five)
forward, choosing random opposed based contribution sum
overlaps hurts algorithm performance. determine requests moved forward,
step sort requests contributing sum overlaps decreasing order
contribution move forward first k (or them, k greater
number requests contributing sum overlaps).
results obtained R1, R2, R3 R4 summarized Table 15.
problems, new SWO versions find best known solutions. include R5
study SWO greedy initial permutation computed R5 corresponds
best known value schedule. results show general performance improvement k
grows 10 20. k = 20 k = 30 produce similar performance R1, R2 R3.
R4, k = 30 results better performance k = 20. k = 40 results worsening
performance R1 R2. Note algorithm performance R3 change
607

fiBarbulescu, Howe, Whitley, & Roberts

k >= 20. surprising; since good solutions (in terms overlaps)
problem correspond schedules small number overlapping tasks, moving forward
20 requests means moving requests conflict good solutions
found. results indicate problems set, minimizing overlaps,
SWO allowed move forward constant number k requests, k = 30 seems
good choice.
results section support hypothesis moving multiple requests forward
necessary obtain good SWO performance. First, showed moving one
request forward (or small number requests, smaller 30 R problems) results
inferior SWO performance. Second, number requests moved forward increased
(from 10 up), performance SWO improves.

7. New Algorithm: Attenuated Leap Local Search
empirical data analyses suggest key competitive performance
application moving quickly possible across plateaus. Two competitive
algorithms, Genitor SWO, perform multiple moves. simpler algorithm, RLS, actually
finds best known solutions 8000 evaluations, even though perform multiple moves. RLS however, perform significant number neutral moves
solutions evaluation. Given this, conjecture version local search
performs multiple moves evaluating result may even better suited
application. intuition behind conjecture search sample greater
distances (i.e., longer single move) quickly find exits plateaus.
modified RLS move operator follows: choose number pairs positions
apply shifting pairs, one another, without building schedule
shift; build schedule shifting applied designated number
pairs. first version, tried static number shifts (10 turned
best value); however, performed better sometimes worse original move
operator. next conjectured search progresses better solutions, number
shifts decrease probability finding detrimental moves (rather
improving) increases significantly well. better solution, fewer exits
expected harder find.
implemented multiple move hill-climber variable move count operator: given
decay rate, start shifting ten requests, nine, eight etc. chose decrement
number shifts every 800 evaluations; call version hill-climbing Attenuated
Leap Local Search (ALLS). similar idea behind temperature dependent
hill-climbing move operator implemented Globus et al. (2004), number
requests move chosen random biased large number requests
moved early search later requests moved 11 . Hill-climbing
temperature dependent operator produced better results EOS simply choosing
random number requests move.
ALLS performs remarkably well. shown Table 16, finds best known values
problems using conflicts two problems using overlaps (as
11. operator similar temperature dependent behavior simulated annealing; explains
name operator.

608

fiUnderstanding Algorithm Performance

Average Best Far Number Bumps

70

Genitor
RLS
SWO
ALLS

65
60
55
50
45
40
35
30
25

0

500

1000

1500
2000
2500
Evaluations

Average Best Far Number Bumps

32

3000

3500

4000

Genitor
RLS
SWO
ALLS

31.5
31
30.5
30
29.5
29
28.5
28
4000

4500

5000

5500 6000 6500
Evaluations

7000

7500

8000

Figure 6: Evolutions average best value obtained Genitor, RLS, SWO ALLS
8000 evaluations, 30 runs. improvement first 4000
evaluations shown top figure. last 4000 evaluations depicted
bottom figure; note scale different y-axis. graphs
obtained R4; best solution value 28.
RLS). Additionally, finds better best values algorithms set
two problems non-best solutions. fact, single tailed, two sample t-test comparing
ALLS RLS shows ALLS finds statistically significantly better solutions (p < 0.023)
conflicts overlaps five recent days.
609

fiBarbulescu, Howe, Whitley, & Roberts

Average Best Far Number Overlaps

1700

Genitor
RLS
SWO
ALLS

1600
1500
1400
1300
1200
1100
1000
900
800
700

0

500

1000

1500 2000 2500
Evaluations

Average Best Far Number Overlaps

900

3000

3500

4000

Genitor
RLS
SWO
ALLS

880
860
840
820
800
780
760
740
720
4000

4500

5000

5500 6000 6500
Evaluations

7000

7500

8000

Figure 7: Evolutions average best value obtained Genitor, RLS, SWO ALLS
8000 evaluations, 30 runs. improvement first 4000
evaluations shown top figure. last 4000 evaluations depicted
bottom figure; note scale different y-axis.The graphs
obtained R4; best solution value 725.
Section 5, discussed comparison across algorithms (again p < 0.005).
much restrictive performance comparison, ALLS still outperforms RLS,
SWO Genitor pair-wise tests. minimizing conflicts
minimizing overlaps, ALLS significantly outperforms algorithms R1.
610

fiUnderstanding Algorithm Performance

Day
A1
A2
A3
A4
A5
A6
A7
R1
R2
R3
R4
R5

Minimizing Conflicts
Min Mean Stdev
8
8.2
0.4
4
4.0
0.0
3
3.0
0.0
2
2.03
0.18
4
4.1
0.3
6
6.0
0.0
6
6.0
0.0
42 42.63
0.72
29
29.1
0.3
17
17.5
0.57
28 28.07
0.25
12
12.0
0.0

Minimizing Overlaps
Min Mean Stdev
104 107.1
1.24
13
13.0
0.0
28
28.33
1.3
9
9.13
0.73
30
30.23
0.43
45
45.0
0.0
46
46.0
0.0
785 817.83 27.07
490 510.37 19.14
250 273.33 43.68
725 740.07 19.56
146 146.03 0.19

Table 16: Statistics results obtained 30 runs ALLS, 8,000 evaluations per
run. best mean values well standard deviations shown.
Bold indicates best known values.

minimizing conflicts, ALLS outperforms five twelve pair-wise tests
four days (for difference significant). exceptions are: R2, R3,
R4, R5 Genitor R4 RLS. minimizing overlaps, ALLS significantly
outperforms Genitor R2, RLS R3, Genitor R4 SWO R5; rest
pair-wise comparisons statistically significant p < 0.005. clear ALLS
least good best algorithms outperforms days data.
ALLS finds improving solutions faster Genitor RLS (see Figures 6
7 R4 conflicts overlaps). ALLS achieves good performance
combining power finding good solutions fast using multiple moves beginning
search accuracy locating best solutions using one-move shifting
end search.
6.4 showed solutions improve random walks plateaus become
longer. Two hypotheses support observation: 1) plateaus bigger 2) plateaus
harder escape fewer exits. two hypotheses consistent
missing exits replaced moves equal value. consistent exits
replaced worse moves. ALLS design implicitly assumes latter. exits
replaced equal moves search progresses moves would needed
per large step12 . fact, ran tests increased number moves
search progresses found significantly worsen performance.
example, R1 minimizing overlaps, shifting initially ten requests increasing
number shifted requests 1 every 800 iterations (instead decreasing ALLS)
12. wish thank anonymous reviewer insightful observation.

611

fiBarbulescu, Howe, Whitley, & Roberts

results minimum overlap 885, mean 957.97 standard deviation
51.36, significantly worse corresponding ALLS result.

8. Conclusion
key algorithm characteristic AFSCN appears multiple moves. fact,
observation might hold oversubscribed scheduling problems well. Globus et
al. (Globus et al., 2004) found solving oversubscribed problem scheduling
fleets EOS using hill-climbing, moving one request time inefficient.
temperature dependent hill-climbing operator proved work better simply choosing
random number requests move. domain, permutation representation
greedy deterministic schedule builder used. conjecture schedule builder
results multiple permutations mapped schedule, therefore
plateaus present EOS search space well. fact moving
one request improved results suggests conjecture could hold EOS
scheduling: multiple moves might speed plateau traversal domain well.
developed tested four hypotheses explaining performance three competitive algorithms real scheduling application. found hypotheses held
varying degrees. Based evidence, designed new algorithm combined
appeared critical elements best performing algorithms produced
algorithm performed better original ones. results suggest multiple moves useful algorithm feature obtain good performance results AFSCN
scheduling. Alternatively, possible fact one move iteration
would enough obtain good performance, difficult identify request
move. Future research direction examine heuristics combining HBSS
SWO decide request move forward, well heuristics find move
request guarantee change schedule. future research, testing
oversubscribed scheduling applications determine extent analyses
results generalize: exhibit characteristics amenable
kind solution?

Acknowledgments

research supported part grant Air Force Office Scientific Research, Air Force Materiel Command, USAF grant number F49620-03-1-0233. Adele
Howe supported National Science Foundation Grant No. IIS-0138690.
opinions, findings, conclusions recommendations expressed material
author(s) necessarily reflect views National Science
Foundation. U.S. Government authorized reproduce distribute reprints
Governmental purposes notwithstanding copyright notation thereon.
612

fiUnderstanding Algorithm Performance

References
Ackley, D. (1987). Connectionist Machine Genetic Hillclimbing. Kluwer Academic
Publishers.
Aickelin, U., & Dowsland, K. (2003). indirect genetic algorithm nurse scheduling
problem. Computers & Operations Research, 31 (5), 761778.
Barbulescu, L., Howe, A., Whitley, L., & Roberts, M. (2004a). Trading places:
schedule multi-resource oversubscribed scheduling problem. Proceedings
International Conference Planning Scheduling, Whistler, CA.
Barbulescu, L., Watson, J., Whitley, D., & Howe, A. (2004b). Scheduling Space-Ground
Communications Air Force Satellite Control Network. Journal Scheduling,
7, 734.
Barbulescu, L., Whitley, L., & Howe, A. (2004c). Leap look: effective strategy
oversubscribed problem. Proceedings Nineteenth National Artificial
Intelligence Conference, San Jose, CA.
Beck, J., Davenport, A., Davis, E., & Fox, M. (1998). ODO Project: Toward Unified
Basis Constraint-directed Scheduling. Journal Scheduling, 1, 89125.
Bresina, J. (1996). Heuristic-Biased Stochastic Sampling. Proceedings Thirteenth
National Conference Artificial Intelligence, pp. 271278, Portland, OR.
Burrowbridge, S. E. (1999). Optimal Allocation Satellite Network Resources. Masters
Thesis. Virginia Polytechnic Institute State University.
Chien, S., Rabideau, G., Knight, R., Sherwood, R., Engelhardt, B., Mutz, D., Estlin, T.,
Smith, B., Fisher, F., Barrett, T., Stebbins, G., & Tran, D. (2000). ASPEN - Automating space mission operations using automated planning scheduling. 6th
International SpaceOps Symposium (Space Operations), Toulouse (France).
Cormen, T., Leiserson, C., & Rivest, R. (1990). Introduction Algorithms. MIT press,
Cambridge, MA.
Deale, M., Yvanovich, M., Schnitzuius, D., Kautz, D., Carpenter, M., Zweben, M., Davis,
G., & Daun, B. (1994). Space Shuttle ground processing scheduling system.
Zweben, M., & Fox, M. (Eds.), Intelligent Scheduling, pp. 423449. Morgan Kaufmann.
Forrest, S., & Mitchell, M. (1993). Relative Building-Block Fitness Building Block
Hypothesis. Whitley, L. D. (Ed.), Foundations Genetic Algorithms 2, pp. 109
126. Morgan Kaufmann.
Frank, J., Cheeseman, P., & Stutz, J. (1997). gravity fails: Local search topology.
Journal Artificial Intelligence Research, 7, 249281.
Frank, J., Jonsson, A., Morris, R., & Smith, D. (2001). Planning scheduling fleets
earth observing satellites. Proceedings Sixth International Symposium
Artificial Intelligence, Robotics, Automation Space.
Gent, I., & Walsh, T. (1995). Unsatisfied variables local search. Hybrid Problems,
Hybrid Solutions, pp. 7385. IOS Press Amsterdam.
613

fiBarbulescu, Howe, Whitley, & Roberts

Globus, A., Crawford, J., Lohn, J., & Pryor, A. (2003). Scheduling earth observing satellites
evolutionary agorithms. International Conference Space Mission Challenges Information Technology, Pasadena, CA.
Globus, A., Crawford, J., Lohn, J., & Pryor, A. (2004). comparison techniques
scheduling earth observing satellites. Proceedings Sixteenth Innovative Applications Artificial Intelligence Conference, San Jose, CA.
Goldberg, D. (1989). Genetic Algorithms Search, Optimization Machine Learning.
Addison-Wesley, Reading, MA.
Gooley, T. (1993). Automating Satellite Range Scheduling Process. Masters Thesis.
Air Force Institute Technology.
Jang, K. (1996). Capacity Air Force Satellite Control Network. Masters
Thesis. Air Force Institute Technology.
Johnston, M., & Miller, G. (1994). Spike: Intelligent scheduling Hubble space telescope
observations. Morgan, M. B. (Ed.), Intelligent Scheduling, pp. 391422. Morgan
Kaufmann Publishers.
Joslin, D. E., & Clements, D. P. (1999). Squeaky Wheel Optimization. Journal
Artificial Intelligence Research, Vol. 10, pp. 353373.
Kramer, L., & Smith, S. (2003). Maximizing flexibility: retraction heuristic oversubscribed scheduling problems. Proceedings 18th International Joint Conference
Artificial Intelligence, Acapulco, Mexico.
Lematre, M., Verfaillie, G., & Jouhaud, F. (2000). manage new generation
Agile Earth Observation Satellites. 6th International SpaceOps Symposium (Space
Operations), Toulouse, France.
Parish, D. (1994). Genetic Algorithm Approach Automating Satellite Range Scheduling. Masters Thesis. Air Force Institute Technology.
Pemberton, J. (2000). Toward Scheduling Over-Constrained Remote-Sensing Satellites.
Proceedings Second NASA International Workshop Planning Scheduling
Space, San Francisco, CA.
Rabideau, G., Chien, S., Willis, J., & Mann, T. (1999). Using iterative repair automate
planning scheduling shuttle payload operations. Innovative Applications
Artificial Intelligence (IAAI 99), Orlando,FL.
ROADEF Challenge (2003).
French Society Operations Research Decision Analisys ROADEF Challenge 2003.
http://www.prism.uvsq.fr/
vdc/ROADEF/CHALLENGES/2003/.
Roberts, M., Whitley, L., Howe, A., & Barbulescu, L. (2005). Random walks neighborhood bias oversubscribed scheduling. Multidisciplinary International Conference
Scheduling (MISTA-05), New York, NY.
Schalck, S. (1993). Automating Satellite Range Scheduling. Masters Thesis. Air Force
Institute Technology.
614

fiUnderstanding Algorithm Performance

Shaw, K., & Fleming, P. (1997). Use rules preferences schedule builders
genetic algorithms production scheduling. Proceedings AISB97 Workshop
Evolutionary Computation. Lecture Notes Computer Science, 1305, 237250.
Singer, J., Gent, I., & Smaill, A. (2000). Backbone Fragility Local Search Cost
Peak. Journal Artificial Intelligence Research, Vol. 12, pp. 235270.
Smith, S., & Cheng, C. (1993). Slack-based Heuristics Constraint Satisfaction Problems.
Proceedings Eleventh National Conference Artificial Intelligence (AAAI93), pp. 139144, Washington, DC. AAAI Press.
Starkweather, T., McDaniel, S., Mathias, K., Whitley, D., & Whitley, C. (1991). Comparison Genetic Sequencing Operators. Booker, L., & Belew, R. (Eds.), Proc.
4th Intl. Conf. GAs, pp. 6976. Morgan Kaufmann.
Syswerda, G. (1991). Schedule Optimization Using Genetic Algorithms. Davis, L. (Ed.),
Handbook Genetic Algorithms, chap. 21. Van Nostrand Reinhold, NY.
Syswerda, G., & Palmucci, J. (1991). Application Genetic Algorithms Resource
Scheduling. Booker, L., & Belew, R. (Eds.), Proc. 4th Intl. Conf. GAs.
Morgan Kaufmann.
Watson, J. P., Rana, S., Whitley, D., & Howe, A. (1999). Impact Approximate Evaluation Performance Search Algorithms Warehouse Scheduling. Journal
Scheduling, 2(2), 7998.
Whitley, D., Starkweather, T., & Fuquay, D. (1989). Scheduling Problems Traveling
Salesmen: Genetic Edge Recombination Operator. Schaffer, J. D. (Ed.), Proc.
3rd Intl. Conf. GAs. Morgan Kaufmann.
Whitley, L. D. (1989). GENITOR Algorithm Selective Pressure: Rank Based
Allocation Reproductive Trials Best. Schaffer, J. D. (Ed.), Proc. 3rd
Intl. Conf. GAs, pp. 116121. Morgan Kaufmann.
Wolfe, W. J., & Sorensen, S. E. (2000). Three Scheduling Algorithms Applied Earth
Observing Systems Domain. Management Science, Vol. 46(1), pp. 148168.
Zweben, M., Daun, B., & Deale, M. (1994). Scheduling rescheduling iterative
repair. Zweben, M., & Fox, M. (Eds.), Intelligent Scheduling. Morgan Kaufmann.

615


