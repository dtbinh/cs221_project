journal artificial intelligence

submitted published

understanding performance
oversubscribed scheduling application
laura barbulescu

laurabar cs cmu edu

robotics institute
carnegie mellon university
pittsburgh pa usa

adele e howe
l darrell whitley
mark roberts

howe cs colostate edu
whitley cs colostate edu
mroberts cs colostate edu

computer science department
colorado state university
fort collins co usa

abstract
best performing particular oversubscribed scheduling application
air force satellite control network afscn scheduling appear little common yet careful experimentation modeling performance real
instances relate characteristics best characteristics
application particular plateaus dominate search spaces thus favoring make larger changes solutions randomization
exploration critical good performance due lack gradient information
plateaus explanations performance develop
combines characteristics best performers performance better previous best hypothesis driven experimentation
search modeling explain performance motivate design


introduction
effective solution air force satellite control network afscn oversubscribed
scheduling runs counter works well similar scheduling
similar oversubscribed e g united states air force usaf air mobility command amc airlift kramer smith scheduling telescope observations bresina
well solved heuristically guided constructive repair search best
performing solutions afscn genetic genitor squeaky wheel optimization swo randomized next descent local search yet found
constructive repair solution competitive
three best performing solutions afscn appear little common making
difficult explain superior performance genitor combines two candidate solutions
preserving elements swo creates initial greedy solution attempts
improve scheduling tasks known contribute detrimentally current evaluation randomized local search makes incremental changes observed immediate
gradients schedule evaluation examine performance differc

ai access foundation rights reserved

fibarbulescu howe whitley roberts

ent identify factors help explain performance leverage
explanations design search well suited characteristics
application
target application oversubscribed scheduling application alternative resources afscn air force satellite control network access scheduling requires assigning
access requests communication relays u government satellites specific time slots
antenna ground station oversubscribed tasks accommodated given available resources considered oversubscribed least
instances need overtax available resources application though
appears instances specify tasks feasibly scheduled
application challenging shares characteristics applications
earth observing satellites eos important team human schedulers
laboriously performed task every day least years minimal automated
assistance
designed traverse essentially search space solutions
represented permutations tasks greedy schedule builder converts
schedule assigning start time resources tasks order
appear permutation search space dominated large flat
regions plateaus additionally size plateaus increases dramatically best
solution approached presence plateaus indicates needs
effectively manage order improving solutions
explored number different hypotheses explain performance
hypotheses include following
genitor genetic identifies patterns relative task orderings similar backbones sat singer gent smaill preserved members
population effect type classic building block hypothesis goldberg

swo starts extremely close best solution need enact much change
hypothesis implies relatively easy modify good greedy solutions
best known solutions
randomized local search performs essentially random walk plateaus
exits leading better solutions given distribution solutions lack gradient
information may good strategy
tested hypotheses limited evidence existence building
blocks backbone structure squeaky wheel optimization quickly
good solutions cannot reliably best known solutions therefore first
two hypotheses somewhat supported data hypotheses enough
explain observed performance
third hypothesis appears best explanation particular local
search strategy used works well light formulated another hypothesis
swo genitor make long leaps search space allow relatively
quickly traverse plateaus


fiunderstanding performance

last hypothesis appears well explain performance two methods
genetic leaps naturally longer early phases search
parent solutions less similar
studies constructed search exploits
learned search space behavior successful attenuated
leap local search makes multiple changes solution evaluating candidate
solution addition number changes decreases proportionately expected proximity solution number multiple changes length leap larger
early search reduces shortens better solutions found
performs quite well quickly finds best known solutions afscn


afscn scheduling
u air force satellite control network currently responsible coordinating
communications civilian military organizations usaf managed satellites space ground communications performed antennas located
nine tracking stations around globe figure shows map current configuration
afscn map shows one fewer tracking station antennae data
due resources apparently taken line recently customer organizations submit task requests reserve antenna tracking station specified time
period visibility windows target satellites tracking stations two
types task requests distinguished low altitude high altitude orbits low
altitude tasks specify requests access low altitude satellites requests tend
short e g minutes tight visibility window high altitude tasks specify
requests high altitude satellites durations requests varied
usually longer large visibility windows
approximately requests typically received single day separate schedules
produced staff human schedulers schriever air force base day
requests often conflicts remain first pass scheduling conflicts
defined requests cannot scheduled since conflict scheduled
requests means requests remain unscheduled initial schedule
produced
real data extract description specification terms
task requests scheduled corresponding type low high altitude duration
time windows alternative resources afscn data include information
satellite revolution numbers optional site equipment tracking station maintenance times
downtimes possible loss data due antenna comments etc
incorporate information specification information
type task low high altitude well identifier satellite involved
included task specification however know satellite identifier
u government make afscn core integrated satellite control
network managing satellite assets u government agencies well e g nasa noaa
dod affiliates system first becomes operational remote tracking stations
increased enhanced accommodate additional load



fibarbulescu howe whitley roberts

figure map current afscn network including tracking stations control relay
figure produced u space missile systems center smc

corresponds actual satellite rely precomputed visibility information
present requests
instance consists n task requests task request n specifies
required processing duration tidur task request specifies number j
pairs form rj tijwin identifying particular alternative resource antenna
rj time window tijwin task duration task
possible alternative resources start end visibility time window specific
alternative resource therefore duration time windows
different alternative resources resource assigned request
duration needs allocated within corresponding time window denote
lower upper bounds time window j corresponding request ijwin lb
tijwin ub respectively task one alternative antennas needs
chosen tasks cannot preempted processing initiated
requests made specific antenna often different antenna
tracking station may serve alternate capabilities assume
antennas tracking station serve alternate resources
case practice assumption made previous air


fiunderstanding performance

force institute technology afit low altitude request specifies possible resources
antennas present single tracking station visibility reasons one tracking
station accommodate request usually two three antennas present
tracking station therefore two three possible resources associated
requests high altitude requests specify antennas present
tracking stations satisfy visibility constraints many possible alternatives
specified data
previous development afscn scheduling focused minimizing
number request conflicts afscn scheduling alternatively maximizing number
requests scheduled without conflict requests cannot scheduled
without conflict bumped schedule happens humans
carry afscn scheduling satellites valuable resources afscn operators
work fit every request means practice negotiation
customers requests given less time requested shifted less desirable
still usable time slots effect requests altered requests least
partially satisfied deferred another day evaluation function minimizes
number request conflicts assumption made fit many
requests possible requiring human schedulers figure place
requests bumped
however given requests need eventually scheduled designed
evaluation criterion schedules requests allowing overlap minimizing sum overlaps conflicting tasks appears yield schedules
much closer human schedulers construct conflicting tasks bumped
schedule large difficult schedule tasks likely bumped
placing requests back negotiated schedule means deconstructing minimal
conflict schedule rebuilding schedule thus schedule minimizes conflicts
may help much constructing negotiated schedule whereas schedule
minimizes overlaps suggest ways fitting tasks schedule example
reducing tasks duration two three minutes shifting start outside
requested window short amount time
obtained days data afscn application first seven days
week given us colonel james moore air force institute
technology data used first projects afscn obtained
additional five days data schedulers schriever air force base table summarizes
characteristics data best known solutions obtained performing long
runs hundreds experiments allowing hundreds

fact large antennas needed high altitude requests smaller antennas handle low
altitude requests depending type antennas present tracking station antennas
serve alternate resources request
met several schedulers schriever discuss procedure crosscheck solution appreciate assistance brian bayless william szary setting
meeting giving us data
approval make public data
see http www cs colostate edu sched data html details obtaining



fibarbulescu howe whitley roberts

id







r
r
r
r
r

date













requests













high













low













best conflicts













best overlaps













table characteristics days afscn data used experiments
id used tables best conflicts best overlaps best known
values two objective functions

thousands evaluations found better solutions refer
recent r


related scheduling
afscn application multiple resource oversubscribed examples
applications usaf air mobility command amc airlift scheduling kramer
smith nasas shuttle ground processing deale et al scheduling telescope
observations bresina satellite observation scheduling frank jonsson morris
smith globus crawford lohn pryor
amc scheduling assigns delivery missions air wings kramer smith
system adopts iterative repair greedily creating initial schedule ordering
tasks priority attempting insert unscheduled tasks retracting
arranging conflicting tasks
gerry scheduler designed manage large set tasks needed prepare
space shuttle next mission zweben daun deale tasks described
terms resource requirements temporal constraints required time windows
original version used constructive search dependency directed backtracking
adequate task subsequent version employed constraint directed iterative repair
satellite scheduling customer requests data collection need matched
satellite tracking station resources requests specify instruments required
window time request needs executed location sensing communication event task constraints need coordinated resource
best known values obtained running genitor population size increased
allowing evaluations per run



fiunderstanding performance

constraints include windows visibility satellites maintenance periods
downtimes tracking stations etc typically requests need scheduled
accommodated available resources general description satellite
scheduling domain provided jeremy frank et al
pemberton solves simple one resource satellite scheduling
requests priorities fixed start times fixed durations objective function
maximizes sum priorities scheduled requests priority segmentation proposed hybrid combining greedy branchand bound wolfe sorensen define complex one resource
window constrained packing wcp specifies request earliest
start time latest final time minimum maximum duration objective function complex combining request priority position scheduled request
required window number requests scheduled two greedy heuristic approaches
genetic implemented genetic found perform best
globus et al compare genetic simulated annealing squeaky wheel
optimization joslin clements hill climbing simplified synthetic form
satellite scheduling two satellites single instrument
simulated annealing excels genetic performs relatively poorly
general version satellite scheduling eos observation scheduling frank et al
propose constraint planner stochastic greedy search
bresinas heuristic biased stochastic sampling hbss bresina hbss
originally applied scheduling astronomy observations telescopes
lematre et al scheduling set photographs agile
eos roadef challenge task constraints include minimal time two
successive acquisitions pairings requests images acquired twice different
time windows hard requirements certain images must acquired
local search performs better hybrid combining branchand bound domain specific heuristics
afscn application previously studied researchers air force institute technology afit gooley schalck described
mixed integer programming mip insertion heuristics achieved good overall performance requests scheduled parish used genitor
whitley genetic scheduled roughly task requests outperforming mip approaches three researchers used afit benchmark
suite consisting seven instances representing actual afscn task request data
visibilities seven consecutive days october later jang
introduced generator employing bootstrap mechanism produce additional
test qualitatively similar afit benchmark jang
used generator analyze maximum capacity afscn measured
aggregate number task requests satisfied single day
general decision afscn scheduling minimal conflicts n pcomplete special subclasses afscn scheduling polynomial burrowbridge
considers simplified version afscn scheduling task specifies one resource antenna low altitude satellites present objective maximize
number scheduled tasks due orbital dynamics low altitude satellites


fibarbulescu howe whitley roberts

task requests negligible slack e window size equal
request duration assuming one task scheduled per time window greedy activity selector cormen leiserson rivest used
schedule requests since yields solution maximal number scheduled tasks
schedule low altitude requests one multiple antennas present particular
ground station extended greedy activity selector multiple resource
proved extension greedy activity selector optimally schedules low altitude requests general afscn scheduling barbulescu
watson whitley howe b


implemented variety afscn scheduling iterative repair heuristic
constructive search local search genetic ga squeaky wheel optimization swo shown section found randomized next descent local
search ga swo work best afscn scheduling
considered constructive search texture beck davenport
davis fox slack smith cheng constraint scheduling heuristics
implemented straightforward extensions application
poor number request tasks combined presence multiple
alternative resources task make application methods impractical
report performance values constructive search methods
methods depend critically heuristics uncomfortable concluding
methods poor may found good enough heuristics
tried commercial shelf satellite scheduling package similarly
poor report performance values commercial system
designed specifically application access
source determine reason poor performance
solution representation
permutation representations frequently used solving scheduling
e g whitley starkweather fuquay syswerda wolfe sorensen aickelin dowsland globus et al except iterative repair
encode solutions permutation n task request ids e n schedule
builder used generate solutions permutation request ids schedule builder
considers task requests order appear task request assigned
first resource available sequence resource window pairs provided
task description first feasible resource sequence earliest possible
starting time chosen resource minimizing number conflicts
request cannot scheduled alternative resources dropped
schedule e bumped minimizing sum overlaps request cannot
scheduled without conflict alternative resources assign resource


fiunderstanding performance

overlap requests scheduled far minimized note schedule
builder favor order alternative resources specified request
even though preference specified alternatives
iterative repair
iterative repair methods successfully used solve oversubscribed scheduling e g hubble space telescope observations johnston miller space
shuttle payloads zweben et al rabideau chien willis mann nasas
aspen scheduling environment framework chien et al employs constructive repair methods used model solve
real world space applications scheduling eos recently kramer smith
used repair methods solve airlift scheduling usaf air
mobility command
case key component implementation domain appropriate ordering heuristic guide repairs afscn scheduling gooleys
uses domain specific knowledge implement repair implement
improvement gooleys guaranteed yield least good
produced original version
gooleys two phases first phase low altitude requests
scheduled mainly mixed integer programming mip large number
low altitude requests requests divided two blocks mip procedures
first used schedule requests first block mip used schedule
requests second block inserted schedule around requests
first block finally interchange procedure attempts optimize total number
low altitude requests scheduled needed low altitude requests
scheduled disjoint blocks low altitude requests scheduled start time
assigned resources remain fixed implementation replaced first phase
greedy barbulescu et al b proven schedule optimal number
low altitude requests greedy modifies well known activity selector
cormen et al multiple resource still schedules
requests increasing order due date however specifies request
scheduled resource idle time start time minimum
version accomplishes function gooleys first phase
guarantee optimal number low altitude requests scheduled thus
guaranteed equal better gooleys original
second phase high altitude requests inserted schedule without
rescheduling low altitude requests order insertion high altitude
requests computed requests sorted decreasing order ratio duration
request average length time windows similar flexibility
measure defined kramer smith amc ties broken number
alternative resources specified fewer alternatives scheduled first high
two non scheduled tasks overlap mutual overlap part sum
overlaps overlap scheduled requests considered
optimally solves scheduling low altitude requests polynomial
time



fibarbulescu howe whitley roberts

altitude requests considered insertion interchange procedure attempts
accommodate unscheduled requests rescheduling high altitude requests
unscheduled high altitude request list candidate requests rescheduling
computed successful rescheduling operation unscheduled request
placed spot initially occupied candidate heuristic measure
used determine requests candidate list rescheduled
chosen candidates scheduling alternatives available procedure applied
identify requests rescheduled interchange procedure defined
two levels recursion called three satellite interchange
randomized local search rls
implemented hill climber call randomized local search starts randomly generated solution iteratively moves toward better equally good neighboring solution successfully applied number well known
scheduling selected domain independent move operator shift operator current solution neighborhood defined considering n
pairs x positions subject restriction x neighbor

corresponding position pair x produced shifting job position
x position leaving relative job orders unchanged x
x x x n x
x x x n
given large neighborhood size use shift operator conjunction nextdescent hill climbing implementation completely randomizes neighbor examine next replacement step x chosen randomly
general termed stochastic hill climbing ackley
value randomly chosen neighbor equal better value current
solution becomes current solution
emphasized randomized local search stochastic hill climbing
sometimes much effective steepest descent local search next descent local
search neighbors checked predefined order opposed random order
forrest mitchell showed random mutation hill climber much rls
ackleys stochastic hill climber found solutions much faster steepest descent local
search called royal road function random mutation hill
climber found solutions much faster hill climber generated examined
neighbors systematically predefined order random mutation hill climber
much effective genetic despite existence
would appear natural building blocks function notable
royal road function staircase function step staircase
plateau
genetic
genetic found perform well afscn scheduling
early studies parish genetic found effective
oversubscribed scheduling applications scheduling f flight simulators syswerda


fiunderstanding performance

abstraction nasas eos wolfe sorensen studies
used version genitor originally developed warehouse scheduling application
starkweather et al version used parish afscn scheduling
genetic genitor maintains population solutions implementation fixed population size step pair parent
solutions selected crossover operator used generate single child solution
replaces worst solution population selection parent solutions
rank fitness relative solutions population following
parish starkweather et al used syswerdas position
crossover operator
syswerdas position crossover operator starts selecting number random
positions second parent corresponding selected elements appear exactly
positions offspring remaining positions offspring filled
elements first parent order appear parent
parent b c e f g h j
parent c f j h g b e
selected elements



offspring c f e g h b j
implementation randomly choose number positions selected
larger one third total number positions smaller two
thirds total number positions
squeaky wheel optimization
squeaky wheel optimization swo joslin clements repeatedly iterates
cycle composed three phases first greedy solution built priorities associated elements solution analyzed elements
causing trouble identified contribution objective function third
priorities trouble makers modified considered earlier next iteration cycle repeated termination condition
met
constructed initial greedy permutation swo sorting requests increasing order flexibility flexibility measure similar defined
amc application kramer smith duration request divided
average time window possible alternative resources break ties
number alternative resources available requests equal flexibilities numbers
alternative resources earlier request scheduled first multiple runs swo
restarted modified permutation created performing random swaps
initial greedy permutation
minimizing sum overlaps identified overlapping requests
trouble spots schedule note overlap considered one request
scheduled request requests two requests involved
overlapping request sorted overlapping requests increasing order
contribution sum overlaps associated request distance


fibarbulescu howe whitley roberts

move forward rank sorted order fixed minimum distance
moving forward one maximum distance five seems work better
possible values tried distance values equally distributed among ranks
moved requests forward permutation increasing order contribution
sum overlaps requests smaller overlaps moved first tried versions
swo distance move forward proportional contribution
sum overlaps fixed however versions performed worse rank
distance implementation described minimizing conflicts schedule
conflicts equal contribution objective function therefore decided move
forward fixed distance five tried values two seven five
best
heuristic biased stochastic sampling hbss
hbss bresina incremental construction multiple rootto leaf paths stochastically generated step hbss needs
heuristically choose next request schedule unscheduled requests used
flexibility measure described swo rank unscheduled requests compute
flexibility request order decreasing order flexibility
request given rank according ordering first request rank second
request rank etc bias function applied ranks noted bresina
p choice bias function reflects confidence one heuristics accuracy
higher confidence stronger bias flexibility heuristic effective
greedy heuristic constructing solutions afscn scheduling therefore used
relatively strong bias function exponential bias rank r bias computed
bias r er probability select unscheduled request rank r
computed
bias r
p r p
iunscheduled bias rank
unscheduled represents set unscheduled requests
implementation hbss compute flexibility unscheduled tasks
every time choose next request scheduled words hbss building
permutation requests schedule builder produces corresponding schedule
terms cpu time means time required hbss build solution
similar dominated number evaluations version
computing flexibility unscheduled tasks tasks scheduled would lot
expensive fact eos similar oversubscribed scheduling
globus et al found updating heuristic values hbss scheduling
hundreds times slower permutation techniques required far
memory produced poor schedules



fiunderstanding performance

works well
first step understanding best solve assess methods perform
best running summarized tables
respectively genitor randomized local search rls squeaky wheel optimization
swo report best mean value standard deviation observed
runs evaluations per run hbss statistics taken samples
genitor rls initialized random permutations
best known values sum overlaps see table obtained running
genitor population size increased evaluations hundreds experiments numerous found better solutions
report better genitor means better
genitor limited evaluations
exception gooleys cpu times dominated number
evaluations therefore similar dell precision ghz xeon
running linux runs evaluations per run take seconds
precise values see barbulescu et al
increase number requests received day recent r
causes increase number percentage unscheduled requests eight task requests tasks scheduled
task requests scheduled r
tasks scheduled tasks requests scheduled
compare performance statistical analyses include genitor swo
rls include analyses swo move variant swo
explore section alls variant local search present section
judge significant differences final evaluations anova five
recent days data anovas came back significant justified
performing pair wise tests examined single tailed two sample test well
non parametric wilcoxon rank sum test wilcoxon test significance
test except two pairs present p values test
close rejection threshold p per pair wise test
minimizing conflicts many solutions best known
values pair wise tests genitor rls significantly different r
r r genitor significantly outperforms rls r p r p
swo perform significantly different rls five days significantly
outperforms genitor r genitor significantly outperforms swo r r however
adjusting parameters used run swo may fix fact
surprising well swo performs minimizing conflicts given chose
simple implementation tasks conflict moved forward fixed
distance hbss performs well however fails best known
values r r r original solution gooleys computes
single solution improved sampling variant see section
five imply worst pair wise comparisons per day data control experimentwise error use conservative simple bonferroni adjustment adjustment known
increase probability type ii error favoring false acceptance distributions similar
judge two significantly different p



fibarbulescu howe whitley roberts

day







r
r
r
r
r

min













genitor
mean













sd













min













rls
mean













sd













min













swo
mean













sd













min













hbss
mean













gooley
sd


























table performance genitor rls swo hbss gooleys terms
best mean number conflicts statistics genitor local search
swo collected independent runs evaluations per run
hbss samples considered min numbers boldface indicate best
known values

minimizing overlaps rls finds best known solutions two
significantly outperforms genitor r r significantly performs
r significantly differ performance r r rls swo
perform significantly different except r rls performs swo significantly
outperforms genitor five days however run beyond evaluations genitor
continues improve solution quality swo fails better solutions hbss
finds best known solutions comparison computed
overlaps corresponding schedules built gooleys present
last column table however gooleys designed minimize
overlaps
progress toward solution
swo genitor apply different criteria determine solution modifications rls randomly chooses first shift resulting equally good improving solution assess
effect differences tracked best value obtained far running
collected best value found swo genitor rls
increments evaluations evaluations averaged values
runs swo rls genitor respectively
typical example objective function presented figures
objective functions curves similar relative performance swo quickly
finds good solution performance levels rls progresses quickly
first half search genitor exacts smaller improvements second half
search though rls takes longer better solutions genitor continues
steadily progress toward best solution best far genitor improve


fiunderstanding performance

day







r
r
r
r
r

min













genitor
mean













sd













min













rls
mean













sd













min













swo
mean













sd













min













hbss
mean













gooley
sd


























table performance genitor local search swo hbss gooleys
terms best mean sum overlaps statistics collected
independent runs evaluations per run hbss samples
considered min numbers boldface indicate best known values

quickly best far rls unexpected best solution
genitor population isnt likely improve frequently beginning run
sense tracking evolution median population running genitor would
indicative progress use best far allow uniform comparison
three
observe two differences objective functions first minimizing number conflicts genitor rls eventually equal outperform swo minimizing
overlaps genitor rls take longer good solutions evaluations swo
found best solutions second minimizing number conflicts toward
end run genitor outperforms rls minimizing overlaps rls performs better genitor best known solutions r minimizing overlaps
obtained running rls evaluations runs running swo
evaluations runs small improvements two

hypotheses explaining performance
genitor swo rls successful tested afscn
although operate search space permutations traverse
space rather differently puzzle three apparently well suited
solve puzzle first describe plateaus dominant feature
search space greedy schedule builder main reason presence
plateaus test hypotheses appear follow dominance
plateaus characteristics
study greedy schedule builder well objective function part
specification therefore formulating testing hypotheses consider
search space features plateaus number identical solutions fixed




genitor
rls
swo



average best far number bumps

average best far number bumps

barbulescu howe whitley roberts

















evaluations















genitor
rls
swo










evaluations







figure evolutions average best value conflicts obtained swo rls
genitor evaluations runs left figure depicts improvement average best value first evaluations last
evaluations depicted right figure note scale different
axis curves obtained r



genitor
rls
swo



average best far sum overlaps

average best far sum overlaps

















evaluations







genitor
rls
swo














evaluations





figure evolutions average best value sum overlaps obtained swo rls
genitor evaluations runs left figure depicts
improvement average best value first evaluations last
evaluations depicted right figure note scale different
axis curves obtained r

redundancy search space
third neighbors rls exactly schedule
overlaps minimal conflicts evaluation functions barbulescu et al barbulescu
whitley howe c neighbors rls evaluation
see section afscn search space dominated plateaus three reasons


fiunderstanding performance

main reason presence plateaus greedy schedule builder request
scheduled first available resource list possible alternatives example
consider permutation n total n requests last request x inserted
first position permutation schedule builder applied schedule
obtained scan permutation n requests left right successively
inserting x second position third building corresponding
schedule long none requests appearing x permutation require
particular spot occupied x first feasible alternative scheduled
schedule obtained happens two reasons requests inserted
schedule order appear permutation greedy
schedule builder considers possible alternatives order specified
accepts first alternative request scheduled let k
first position insert x alter means first feasible alternative
schedule request position k overlaps spot occupied x x
inserted position k schedule obtained schedule
built inserting x subsequent positions encountering request first
feasible alternative overlaps spot occupied x etc example
shows shifting permutation might change corresponding schedule
address presence plateaus search space greedy
schedule builder could used randomization scheme diversify scheduler
however randomization implementing schedule builder unpredictability value assigned permutation example shaw
fleming argue use randomization schedule builder detrimental performance genetic indirect representation used
chromosomes schedules case genitor afscn scheduling
support idea noting general genetic rely preservation
good fitness values swo randomization schedule builder changes
significance reprioritization one iteration next one scheduler
randomized order requests likely schedule
repaired version previous one permutation requests
transformed multiple different schedules nondeterministic nature
scheduler swo mechanism operate intended
second reason plateaus search space presence time windows
request x needs scheduled sometime end day even appears
beginning permutation still occupy spot schedule towards
end assuming scheduled therefore requests
appeared x permutation
third reason discretization objective function clearly range
conflicts small number discrete values weak upper bound number
tasks range overlaps still discrete larger conflicts
overlaps evaluation function approximately times unique objective function
values observed search compared searches objective minimize
conflicts effect discretization seen differing two
objective functions thus one reason including studies
effects discretization


fibarbulescu howe whitley roberts

genitor learn patterns request ordering
hypothesize genitor performs well discovers interactions
requests matter examine sets permutations correspond schedules
best known values identify chains common request orderings permutations
similar spirit notion backbone sat e g singer et al presence
chains would support hypothesis genitor discovering patterns request
orderings classic building block hypothesis pattern present
parent solutions contributes evaluation critical way patterns
recombined inherited genetic recombination goldberg
common request orderings
one particular characteristics afscn scheduling presence
two categories requests low altitude requests fixed start times specify
one three alternative resources high altitude requests implicitly specify multiple
possible start times corresponding time windows usually longer
duration needs scheduled possible alternative resources clearly
low altitude requests constrained suggests possible solution pattern
low altitude requests would scheduled first
explore viability pattern implemented heuristic schedules
low altitude requests high altitude ones call heuristic split
heuristic incorporated split heuristic schedule builder given permutation
requests schedule builder first schedules low altitude requests
order appear permutation without modifying position low
altitude requests schedule high altitude requests inserted schedule
order appear permutation idea scheduling low
altitude requests high altitude requests basis gooleys heuristic
split heuristic similar contention measures defined frank et al
obtained split heuristic surprising minimizing
conflicts best known valued schedules obtained quickly simply
sampling small number random permutations obtained sampling
random permutations shown table
performance split heuristic transfer r
minimizing number overlaps table offer indication possible
request ordering pattern good solutions genitor fact performing well
discovers scheduling low high altitude requests produces good solutions
general explanation genitors performance hypothesize genitor
discovering patterns request ordering certain requests must come
requests test identify common request orderings present solutions obtained
multiple runs genitor ran trials genitor selected solutions
corresponding best known values first checked request orderings form
requesta requestb appear permutations corresponding best
known solutions corresponding good solutions r
summarized table sol value columns value
solutions chosen analysis solutions number solutions


fiunderstanding performance

day








best
known








random sampling
min mean stdev






















table running random sampling split heuristic random samplings experiments generating random permutations per experiment
minimizing conflicts

corresponding chosen value shown solutions columns
analyzing common pairs request orderings minimizing number conflicts
observed pairs specified low altitude request appearing high altitude
one therefore separate pairs two categories pairs specifying low altitude
request high altitude requests column low high pair count rest
column pairs clearly common
pairs ordering requests specify low altitude request high altitude request
r pairs observed part might due
small number solutions corresponding value r
minimizing conflicts small number solutions corresponding value
reason big pair counts reported minimizing overlaps r
know split heuristic best known solutions
minimizing conflicts therefore table somewhat surprising expected
see low high common pairs requests minimizing
number conflicts instead pair counts similar two objective functions
genitor seems discover patterns request interaction specify low
altitude request high altitude request
table heavily biased number solutions considered indeed
let denote number solutions identical value number column solutions
let n denote total number requests suppose preferences orderings
tasks good solutions request ordering b probability
present one solutions therefore probability
present solutions given exist n n possible precedences
expected number common orderings preferences orderings tasks
exist n n r expected number
common orderings assuming preferences orderings tasks exist smaller
n n negligible therefore number actually detected common
wish thank anonymous reviewer earlier version work insightful observation
rest paragraph comments



fibarbulescu howe whitley roberts

day







r
r
r
r
r

sol
value













minimizing conflicts

low high
solutions pair count


























pairs













sol
value













minimizing overlaps

low high
solutions pair count


























pairs













table common pairs request orderings found permutations corresponding best
known good genitor solutions objective functions

precedences approximately low high pairs anywhere
others seem actual request patterns case
r indeed example r expected number common
orderings preferences orderings tasks exist number
actually detected precedences low high pairs
experiment found evidence support hypothesis genitor solutions
exhibit patterns low high altitude requests given next investigate
split heuristic scheduling low high altitude requests enhance
performance genitor answer question run second experiment genitor
split heuristic schedule builder used evaluate every schedule generated
search
table shows split heuristic genitor r
genitor split heuristic fails best known solution r r
surprising fact scheduling low altitude requests
high altitude requests may prevent finding optimal solutions
minimizing sum overlaps shown table exception
genitor split heuristic fails best known solutions
r split heuristic actually improves
obtained genitor r r noted r r solutions
good found rls evaluation however thus search
hybridizes genetic schedule builder split heuristic sometimes
helps sometimes hurts terms finding good solutions
attempted identify longer chains common request ordering successful genitor seem discover patterns request ordering multiple different
patterns request orderings conflicts even schedule


fiunderstanding performance

day
r
r
r
r
r

best
known






genitor
schedule builder
min mean stdev
















table minimizing conflicts running genitor split heuristic trials
evaluations per trial

day







r
r
r
r
r

best
known













genitor
schedule builder
min mean stdev





























table minimizing sum overlaps running genitor split heuristic
split heuristic schedule builder evaluate schedule
experiments evaluations per experiment

could think patterns building blocks genitor identifies good building blocks
orderings requests resulting good partial solutions propagates final
population final solution patterns essential building good solution
however patterns ubiquitous necessary therefore
attempts identify across different solutions produced genitor failed


fibarbulescu howe whitley roberts

day







r
r
r
r
r

minimizing conflicts
best known min mean stdev















































minimizing overlaps
best known min mean stdev











































table statistics obtained runs swo initialized random
permutations e randomstartswo evaluations per run mean
best value runs well standard deviations shown
entries indicate values better corresponding swo values
best known solution objective function
included

swos performance due initialization
graphs search progress swo figures starts much
better solutions initial greedy solution swo translated best known values five r minimizing
number conflicts two r minimizing overlaps
important initial greedy permutation swo answer question
replaced initial greedy permutation variations subsequent iterations swo
random permutations used swo mechanism iteratively move forward
requests conflict call version swo randomstartswo compared
produced randomstartswo swo assess effects
initial greedy solution produced randomstartswo presented table
entries indicate randomstartswo produced better swo
exception r minimizing number conflicts best known values
obtained randomstartswo fact r r best
obtained slightly better best found swo minimizing sum
overlaps best known values obtained r
performance swo worsens initialized random permutation however
randomstartswo still performs better well genitor exception r
minimizing number conflicts r overlaps objective functions
suggest initial greedy permutation main performance factor
swo performance randomstartswo competitive genitor


fiunderstanding performance

day







r
r
r
r
r

total
neighbors













minimizing
random perms
mean
avg

























conflicts
optimal perms
mean
avg

























minimizing
random perms
mean
avg

























overlaps
optimal perms
mean
avg

























table statistics number neighbors resulting schedules value
original random optimal permutations objective
functions

rls performing random walk
rls spends time traversing plateaus search space accepting nonimproving moves section study average length random walks
plateaus encountered local search search progresses random walks
become longer finding improvement mirroring progress rls note
similar phenomenon observed sat frank cheeseman stutz
third shifting pairs requests schedules identical
current solution barbulescu et al c however even larger number
neighbors different schedules value current solution
means accepted moves search non improving moves search ends
randomly walking plateau exit found collected
number schedules value original schedule perturbing solutions possible pairwise changes note schedules include ones identical
current solution summarized table report average
percentage neighbors identical value original permutation
shifts schedules value original one minimizing conflicts minimizing overlaps usually
around shifts value schedules best known solutions
slightly value neighbors random permutations difference statistically significant minimizing overlaps suggests plateaus corresponding
good values search space might larger size plateaus corresponding
random permutations
assess size plateaus impact rls performed random walks
fixed intervals rls every evaluations rls identified current


fibarbulescu howe whitley roberts

solution crt crt performed iterations local search starting
crt stopping soon better solution maximum number equally good
solutions encountered best known solutions often found early
search iterations local search started crt would reach
maximum number equally good solutions therefore chose limit steps
plateau steps r averaged
number equally good solutions encountered trials search performed
crt represents average number steps needed exit plateau
figure displays obtained r similar behavior observed rest
note used log scale axis graph corresponding
minimizing overlaps walks performed current solution value
end taking maximum number steps allowed without finding exit
plateau random walk steps counts equal moves number evaluations
needed rls x axis considerably higher due needing check detrimental moves
accepting equal ones large plateaus present search
space improving moves lead longer walks lower plateaus detrimental
moves factored appears mirror performance rls




ls





ls



























average number steps plateau

average number steps plateau





















































evals




















evals









figure average length random walk plateaus minimizing conflicts left
overlaps right single local search run r labels graphs
represent value current solution note log scale axis
graph corresponding minimizing overlaps best known value
minimizing conflicts minimizing overlaps

afscn scheduling states plateau least one
neighbor better value neighbor represents exit however number
exits small percentage total number neighbors therefore local
search small probability finding exit terminology introduced
frank et al plateaus encountered search afscn domain
would classified benches meaning exits states lower levels present
exits plateau plateau local minimum determining
plateaus local minima enumerating states plateau neighbors


fiunderstanding performance

prohibitive large size neighborhoods large number equally
good neighbors present state search space instead focus average
length random walk plateau factor local search performance length
random walk plateau depends two features size plateau
number exits plateau preliminary investigations number
improving neighbors solution decreases solution becomes better therefore
conjecture exits higher level plateaus lower level
ones would account trend needing steps exit moving
lower plateaus corresponding better solutions possible plateaus
corresponding better solutions larger size however enumerating states
plateau afscn domain impractical following technique developed frank
et al first iteration breadth first search would approximately
n states plateau
long leaps instrumental
large plateaus e g published gent walsh
sat hypothesize long leaps search space instrumental
perform well afscn scheduling swo moving forward multiple requests
known problematic position crossover mechanism genitor
viewed applying multiple consecutive shifts first parent requests
selected positions second parent moved selected positions
first sense time crossover operator applied multiple move proposed
first parent hypothesize multiple move mechanism present swo
genitor allows make long leaps space thus reach solutions fast
note knew exactly requests move moving forward small
number requests even one might needed reach solutions
quickly finding requests move difficult fact studied performance
informed move operator moves requests positions guarantee
schedule changes roberts et al found surprising informed
move operator performs worse random unrestricted shift employed rls
argue multiple moves desired feature make likely
one moves right one
investigate hypothesis role multiple moves traversing
search space perform experiments variable number moves step
genitor swo genitor vary number crossover positions allowed
swo vary number requests conflict moved forward
effect multiple moves genitor
test effect multiple moves genitor change syswerdas position crossover
imposing fixed number selected positions second parent see section
description syswerdas position crossover call implementation genitor k
k number selected positions recall implementation syswerdas position
crossover randomly selects number positions larger one third smaller
two thirds total number positions multiple moves indeed factor


fibarbulescu howe whitley roberts

average best far sum overlaps



genitor
genitor
genitor
genitor
genitor
genitor
genitor

















evaluations

average best far sum overlaps









genitor
genitor
genitor
genitor
genitor
genitor
genitor















evaluations







figure evolutions average best value obtained genitor versions
fixed number selected positions crossover evaluations
runs graphs obtained r best solution value

performance increasing number selected positions point
finding improvements faster positions selected offspring
similar first parent number selected positions large close number
total requests offspring similar second parent offspring
similar one two parents expect slower rate finding improvements
current best solution therefore small large k values expect genitor k


fiunderstanding performance

day







r
r
r
r
r

min













genitor
mean stdev

























min













genitor
mean stdev

























min













genitor
mean stdev

























genitor
min mean stdev





































table performance genitor k k represents fixed number selected positions syswerdas position crossover terms best mean number
conflicts statistics taken independent runs evaluations
per run min numbers boldface indicate best known values

improvements much slower rate genitor genitor k average k values
values closer half number requests
study run genitor k k
allowed evaluations per run performed runs
summarized tables minimizing number conflicts tables
minimizing sum overlaps note
requests schedule respectively therefore genitor k k k cannot
run two note example k mean
differences selected positions two parents offspring likely
similar parents regardless value k parents similar
minimizing number conflicts worst produced k
k improve best knowns found however r
r r best knowns found starting k k genitor k
finds best known solutions means standard deviations
similar k values smallest means standard deviations correspond
k k r exception r
k produces better k best knowns found
anymore close size five
feasible run genitor decay performance significant r
increase means standard deviations k k
however best knowns still found four five note k
would lot closer total number requests r believe
performance would degraded r larger k values
minimizing overlaps observe trends similar ones minimizing
number conflicts k produces poor followed k similar


fibarbulescu howe whitley roberts

day







r
r
r
r
r

min













genitor
mean stdev

























min













genitor
mean stdev

























min











genitor
mean stdev





















genitor
min mean stdev
















table performance genitor k k represents fixed number selected positions syswerdas position crossover terms best mean number
conflicts statistics collected independent runs evaluations per run min numbers boldface indicate best known values
dashes indicate permutation solutions shorter
respectively therefore cannot select positions
permutations

day







r
r
r
r
r

min













genitor
mean stdev
























min













genitor
mean stdev




















min













genitor
mean stdev






















min













genitor
mean stdev





















table performance genitor k k represents fixed number selected positions syswerdas position crossover terms best mean sum
overlaps statistics collected independent runs evaluations
per run min numbers boldface indicate best known values

produced k k smallest means standard
deviations k k produce best r
k k similarly minimizing number conflicts


fiunderstanding performance

day







r
r
r
r
r

min













genitor
mean stdev





















min













genitor
mean stdev





















min











genitor
mean stdev














min






genitor
mean stdev








table performance genitor k k represents fixed number selected positions syswerdas position crossover terms best mean sum
overlaps statistics taken independent runs evaluations
per run min numbers boldface indicate best known values

means standard deviations increase best solutions found best knowns
found r
terms evolution solution observe similar trends two
objective functions typical examples presented figure minimizing overlaps
r genitor k k slower finding improvements k slower
k k k performing similarly similar
original genitor implementation k still moving space rate thats
similar genitors k performance start decay
original implementation crossover operator variable number selected position shown work well domain scheduling
applications syswerda watson rana whitley howe syswerda palmucci test subsection number
crossover positions influences performance genitor terms best solutions
found terms rate finding improvements small number crossover
positions solutions found competitive improvements
found slower rate original genitor implementation similarity genitors
original performance obtained k values higher k values
decay performance offer empirical motivation choice
number crossover positions original genitor implementation indeed
original implementation crossover uses number positions randomly selected
one third two thirds total number requests translates
sizes sets number positions approximately



fibarbulescu howe whitley roberts

day







r
r
r
r
r

minimizing conflicts
min mean stdev
































minimizing overlaps
min mean stdev






















table performance modified version swo one request moved
forward constant distance minimizing conflicts minimizing
sum overlaps request randomly chosen statistics collected
independent runs evaluations per run indicates
best value better corresponding swo min numbers boldface
indicate best known values

effect multiple moves swo
hypothesize multiple moves present swo necessary performance
test hypothesis start investigating effect moving forward one
request somewhat similar shifting operator present rls request shifted
forward permutation however implement swo reprioritization mechanism
restrict chosen request moved position gets moved
minimizing conflicts one bumped requests randomly chosen minimizing
overlaps one requests contributing sum overlaps randomly chosen
minimizing conflicts minimizing sum overlaps chosen request
moved forward constant distance five call swo move
obtained running swo move runs evaluations per run
presented table entries indicate value produced swo move
better corresponding swo initial solutions identical
solutions produced flexibility heuristic initializing swo
minimizing conflicts swo move performs well swo fact finds
best known solution r well minimizing sum overlaps performance
swo r worsens significantly one task moved forward previously implemented swo move minimizing overlaps moving forward request
contributes total overlap barbulescu et al c randomly choosing
tried values average value five seems work best



fiunderstanding performance

day
r
r
r
r

min





k
mean





stdev





min





k
mean





stdev





min





k
mean





stdev





min





k
mean





stdev





table performance modified version swo k requests contributing
sum overlaps moved forward constant distance statistics
collected independent runs evaluations per run

request moved forward improved performance swo move randomization
useful swo become trapped cycles joslin clements however
improvement enough equal performance swo minimizing overlaps
days data fact longer runs swo move random choice
request moved runs evaluations produce solutions still worse
obtained swo support conjecture performance
swo due simultaneous moves requests
attribute discrepancy swo move performance two objective
functions difference discretization two search spaces minimizing
conflicts swo move needs identify requests cannot scheduled
fine tuning needed minimizing sum overlaps besides identifying requests
cannot scheduled swo move needs positions requests
permutation sum overlaps minimized conjecture fine
tuning achieved simultaneously moving forward multiple requests
next investigate changes performance increasing number requests
requests contributing objective function moved forward design
experiment constant number requests involved conflicts moved
forward need decide many requests move ones moving
two three requests forward small improvements table
therefore run multiple versions swo moving k requests forward k
determined empirically moving multiple requests five
forward choosing random opposed contribution sum
overlaps hurts performance determine requests moved forward
step sort requests contributing sum overlaps decreasing order
contribution move forward first k k greater
number requests contributing sum overlaps
obtained r r r r summarized table
swo versions best known solutions include r
study swo greedy initial permutation computed r corresponds
best known value schedule general performance improvement k
grows k k produce similar performance r r r
r k better performance k k worsening
performance r r note performance r change


fibarbulescu howe whitley roberts

k surprising since good solutions terms overlaps
correspond schedules small number overlapping tasks moving forward
requests means moving requests conflict good solutions
found indicate set minimizing overlaps
swo allowed move forward constant number k requests k seems
good choice
section support hypothesis moving multiple requests forward
necessary obtain good swo performance first showed moving one
request forward small number requests smaller r
inferior swo performance second number requests moved forward increased
performance swo improves

attenuated leap local search
empirical data analyses suggest key competitive performance
application moving quickly possible across plateaus two competitive
genitor swo perform multiple moves simpler rls actually
finds best known solutions evaluations even though perform multiple moves rls however perform significant number neutral moves
solutions evaluation given conjecture version local search
performs multiple moves evaluating may even better suited
application intuition behind conjecture search sample greater
distances e longer single move quickly exits plateaus
modified rls move operator follows choose number pairs positions
apply shifting pairs one another without building schedule
shift build schedule shifting applied designated number
pairs first version tried static number shifts turned
best value however performed better sometimes worse original move
operator next conjectured search progresses better solutions number
shifts decrease probability finding detrimental moves rather
improving increases significantly well better solution fewer exits
expected harder
implemented multiple move hill climber variable move count operator given
decay rate start shifting ten requests nine eight etc chose decrement
number shifts every evaluations call version hill climbing attenuated
leap local search alls similar idea behind temperature dependent
hill climbing move operator implemented globus et al number
requests move chosen random biased large number requests
moved early search later requests moved hill climbing
temperature dependent operator produced better eos simply choosing
random number requests move
alls performs remarkably well shown table finds best known values
conflicts two overlaps
operator similar temperature dependent behavior simulated annealing explains
name operator



fiunderstanding performance

average best far number bumps



genitor
rls
swo
alls




















evaluations

average best far number bumps









genitor
rls
swo
alls
















evaluations







figure evolutions average best value obtained genitor rls swo alls
evaluations runs improvement first
evaluations shown top figure last evaluations depicted
bottom figure note scale different axis graphs
obtained r best solution value
rls additionally finds better best values set
two non best solutions fact single tailed two sample test comparing
alls rls shows alls finds statistically significantly better solutions p
conflicts overlaps five recent days


fibarbulescu howe whitley roberts

average best far number overlaps



genitor
rls
swo
alls



















evaluations

average best far number overlaps









genitor
rls
swo
alls

















evaluations







figure evolutions average best value obtained genitor rls swo alls
evaluations runs improvement first
evaluations shown top figure last evaluations depicted
bottom figure note scale different axis graphs
obtained r best solution value
section discussed comparison across p
much restrictive performance comparison alls still outperforms rls
swo genitor pair wise tests minimizing conflicts
minimizing overlaps alls significantly outperforms r


fiunderstanding performance

day







r
r
r
r
r

minimizing conflicts
min mean stdev



































minimizing overlaps
min mean stdev


























table statistics obtained runs alls evaluations per
run best mean values well standard deviations shown
bold indicates best known values

minimizing conflicts alls outperforms five twelve pair wise tests
four days difference significant exceptions r r
r r genitor r rls minimizing overlaps alls significantly
outperforms genitor r rls r genitor r swo r rest
pair wise comparisons statistically significant p clear alls
least good best outperforms days data
alls finds improving solutions faster genitor rls see figures
r conflicts overlaps alls achieves good performance
combining power finding good solutions fast multiple moves beginning
search accuracy locating best solutions one move shifting
end search
showed solutions improve random walks plateaus become
longer two hypotheses support observation plateaus bigger plateaus
harder escape fewer exits two hypotheses consistent
missing exits replaced moves equal value consistent exits
replaced worse moves alls design implicitly assumes latter exits
replaced equal moves search progresses moves would needed
per large step fact ran tests increased number moves
search progresses found significantly worsen performance
example r minimizing overlaps shifting initially ten requests increasing
number shifted requests every iterations instead decreasing alls
wish thank anonymous reviewer insightful observation



fibarbulescu howe whitley roberts

minimum overlap mean standard deviation
significantly worse corresponding alls

conclusion
key characteristic afscn appears multiple moves fact
observation might hold oversubscribed scheduling well globus et
al globus et al found solving oversubscribed scheduling
fleets eos hill climbing moving one request time inefficient
temperature dependent hill climbing operator proved work better simply choosing
random number requests move domain permutation representation
greedy deterministic schedule builder used conjecture schedule builder
multiple permutations mapped schedule therefore
plateaus present eos search space well fact moving
one request improved suggests conjecture could hold eos
scheduling multiple moves might speed plateau traversal domain well
developed tested four hypotheses explaining performance three competitive real scheduling application found hypotheses held
varying degrees evidence designed combined
appeared critical elements best performing produced
performed better original ones suggest multiple moves useful feature obtain good performance afscn
scheduling alternatively possible fact one move iteration
would enough obtain good performance difficult identify request
move future direction examine heuristics combining hbss
swo decide request move forward well heuristics move
request guarantee change schedule future testing
oversubscribed scheduling applications determine extent analyses
generalize exhibit characteristics amenable
kind solution

acknowledgments

supported part grant air force office scientific air force materiel command usaf grant number f adele
howe supported national science foundation grant iis
opinions findings conclusions recommendations expressed material
author necessarily reflect views national science
foundation u government authorized reproduce distribute reprints
governmental purposes notwithstanding copyright notation thereon


fiunderstanding performance

references
ackley connectionist machine genetic hillclimbing kluwer academic
publishers
aickelin u dowsland k indirect genetic nurse scheduling
computers operations
barbulescu l howe whitley l roberts trading places
schedule multi resource oversubscribed scheduling proceedings
international conference scheduling whistler ca
barbulescu l watson j whitley howe b scheduling space ground
communications air force satellite control network journal scheduling

barbulescu l whitley l howe c leap look effective strategy
oversubscribed proceedings nineteenth national artificial
intelligence conference san jose ca
beck j davenport davis e fox odo project toward unified
basis constraint directed scheduling journal scheduling
bresina j heuristic biased stochastic sampling proceedings thirteenth
national conference artificial intelligence pp portland
burrowbridge e optimal allocation satellite network resources masters
thesis virginia polytechnic institute state university
chien rabideau g knight r sherwood r engelhardt b mutz estlin
smith b fisher f barrett stebbins g tran aspen automating space mission operations automated scheduling th
international spaceops symposium space operations toulouse france
cormen leiserson c rivest r introduction mit press
cambridge
deale yvanovich schnitzuius kautz carpenter zweben davis
g daun b space shuttle ground processing scheduling system
zweben fox eds intelligent scheduling pp morgan kaufmann
forrest mitchell relative building block fitness building block
hypothesis whitley l ed foundations genetic pp
morgan kaufmann
frank j cheeseman p stutz j gravity fails local search topology
journal artificial intelligence
frank j jonsson morris r smith scheduling fleets
earth observing satellites proceedings sixth international symposium
artificial intelligence robotics automation space
gent walsh unsatisfied variables local search hybrid
hybrid solutions pp ios press amsterdam


fibarbulescu howe whitley roberts

globus crawford j lohn j pryor scheduling earth observing satellites
evolutionary agorithms international conference space mission challenges information technology pasadena ca
globus crawford j lohn j pryor comparison techniques
scheduling earth observing satellites proceedings sixteenth innovative applications artificial intelligence conference san jose ca
goldberg genetic search optimization machine learning
addison wesley reading
gooley automating satellite range scheduling process masters thesis
air force institute technology
jang k capacity air force satellite control network masters
thesis air force institute technology
johnston miller g spike intelligent scheduling hubble space telescope
observations morgan b ed intelligent scheduling pp morgan
kaufmann publishers
joslin e clements p squeaky wheel optimization journal
artificial intelligence vol pp
kramer l smith maximizing flexibility retraction heuristic oversubscribed scheduling proceedings th international joint conference
artificial intelligence acapulco mexico
lematre verfaillie g jouhaud f manage generation
agile earth observation satellites th international spaceops symposium space
operations toulouse france
parish genetic automating satellite range scheduling masters thesis air force institute technology
pemberton j toward scheduling constrained remote sensing satellites
proceedings second nasa international workshop scheduling
space san francisco ca
rabideau g chien willis j mann iterative repair automate
scheduling shuttle payload operations innovative applications
artificial intelligence iaai orlando fl
roadef challenge
french society operations decision analisys roadef challenge
http www prism uvsq fr
vdc roadef challenges
roberts whitley l howe barbulescu l random walks neighborhood bias oversubscribed scheduling multidisciplinary international conference
scheduling mista york ny
schalck automating satellite range scheduling masters thesis air force
institute technology


fiunderstanding performance

shaw k fleming p use rules preferences schedule builders
genetic production scheduling proceedings aisb workshop
evolutionary computation lecture notes computer science
singer j gent smaill backbone fragility local search cost
peak journal artificial intelligence vol pp
smith cheng c slack heuristics constraint satisfaction
proceedings eleventh national conference artificial intelligence aaai pp washington dc aaai press
starkweather mcdaniel mathias k whitley whitley c comparison genetic sequencing operators booker l belew r eds proc
th intl conf gas pp morgan kaufmann
syswerda g schedule optimization genetic davis l ed
handbook genetic chap van nostrand reinhold ny
syswerda g palmucci j application genetic resource
scheduling booker l belew r eds proc th intl conf gas
morgan kaufmann
watson j p rana whitley howe impact approximate evaluation performance search warehouse scheduling journal
scheduling
whitley starkweather fuquay scheduling traveling
salesmen genetic edge recombination operator schaffer j ed proc
rd intl conf gas morgan kaufmann
whitley l genitor selective pressure rank
allocation reproductive trials best schaffer j ed proc rd
intl conf gas pp morgan kaufmann
wolfe w j sorensen e three scheduling applied earth
observing systems domain management science vol pp
zweben daun b deale scheduling rescheduling iterative
repair zweben fox eds intelligent scheduling morgan kaufmann




