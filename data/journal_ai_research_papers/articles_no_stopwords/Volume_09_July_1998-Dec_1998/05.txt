Journal Artificial Intelligence Research 9 (1998) 219-245

Submitted 3/98; published 11/98

Gn;m Phase Transition Hard Hamiltonian
Cycle Problem
Basil Vandegriend
Joseph Culberson

Department Computing Science, University Alberta,
Edmonton, Alberta, Canada, T6G 2H1

basil@cs.ualberta.ca
joe@cs.ualberta.ca

Abstract

Using improved backtrack algorithm sophisticated pruning techniques, revise previous observations correlating high frequency hard solve Hamiltonian cycle
instances Gn;m phase transition Hamiltonicity non-Hamiltonicity.
Instead tested graphs 100 1500 vertices easily solved.
artificially restrict degree sequence bounded maximum degree,
although increase diculty, frequency hard graphs still low.
consider regular graphs based generalization knight's tours, observe
frequent instances really hard graphs, average degree bounded
constant. design set graphs feature algorithm unable detect
hard algorithm, vary average degree O(1)
O(n). far found class graphs correlated Gn;m phase transition
asymptotically produces high frequency hard instances.

1. Introduction

Given graph G = (V; E ); jV j = n; jE j = m, Hamiltonian cycle problem find
cycle C = (v1 ; v2 ; : : : ; vn ) vi 6= vj 6= j , (vi ; vi+1 ) 2 E (vn ; v1 ) 2 E .
NP-C problem, expect solving require exponential time worst case
arbitrary graphs (assuming P 6= NP). However, recent years researchers examining
various NP-C problems SAT graph coloring discovered majority
graphs easy algorithms solve. graphs specific characteristics
graphs lie within narrow band (according parameter) seem hard
solve problems.
known (Posa, 1976; Komlos & Szemeredi, 1983) random graph model
(Gn;m ) edge density increases sharp threshold (the phase transition)
edge density probability Hamiltonian cycle 0,
probability 1. Previous research (Section 2.1) suggested high correlation
dicult problems instances generated edge density near phase transition.
Using improved Hamiltonian cycle backtrack algorithm (Section 3) employs various
pruning operators iterated restart technique, observe hard instances
transition large n. Section 4 describes results Gn;m related random graphs.
attempt find higher frequency hard graphs, Section 5 examine low
degree random graph class call Degreebound graphs. However, graphs
usually easy backtrack algorithm, although find hard graphs. Analysis
graphs indicates test non-Hamiltonian instances discussed Section 5.3.
c 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiVandegriend & Culberson

Section 6 examine graph class based generalization knight's tour problem.
graphs significantly harder algorithm general. Section 7 present
constructed graph class produces exponential behavior backtrack algorithm.
experimental results provide evidence average degree graph
sucient indicator hard graphs Hamiltonian cycle problem. backtrack
algorithm, phase transition regions Gn;m Degreebound graph models
generally asymptotically easy.

2. Discussion Hardness Previous Work
concept hardness instances hard regions within graph classes, considered
empirical basis, easy define. order clarify mean, section
present notions hardness, relating previous work.

2.1 Hardness?

problem size n set n instances. Hamiltonian cycle problem, n
set undirected graphs n vertices. discussion hardness particular
instance problem always respect algorithm (or set algorithms).
general, different algorithms perform differently instance. Furthermore,
particular instance Hamiltonian cycle associated algorithm either correctly answers outputs cycle O(n) time. meaningfully talk hardness
instance, must assume fixed algorithm (or finite class algorithms)
appropriate large (infinite) class instances, consider algorithm
performs instance. Hardness instance always measure performance
relative algorithm.
left question much work algorithm must consider
instance hard it. Note single instance distinction polynomial
exponential time moot. Ideally, would require algorithm take
exponential (i.e. > 1) number steps size n increases. Note empirical
corroboration practically impossible sets large instances. practice,
must content evidence failure complete within reasonable time
larger instances.
would instance exhibit robustness consider hard
given algorithm. Ideally, graph problems would minimum require instance
remain hard high probability random relabeling vertices. Relabeling
vertices produces isomorphic copy graph, preserving structural properties
degree, connectivity, Hamiltonicity, cut sets, etc. design algorithms typically
based identifying using properties, far possible eciency
independent arbitrary assignment labels.
Let us refer (probabilistic) problem class pair (n ; Pn ), Pn (x)
probability instance x given selecting n . Problem classes
sometimes called ensembles Artificial Intelligence literature (Hogg, 1998). usual
classes graph problems Gn;p, generate n vertex graph, pair
vertices included edge probability p, Gn;m distinct edges
220

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

selected random placed graph. two models related (Palmer 1985).
paper use Gn;m model.
consider mean average run times definitions. primary reason
exponentially small sets exponentially hard instances, impractical
determine average reasonable assurance. example, 1=2n instances
require (n2 2n ) time remainder solved O(n2 ) time average time
quadratic, frequency increases 1=20:9n average time exponential. Even
n = 100 would utterly impractical distinguish two frequencies
empirical studies.
Furthermore, similar reasons, want promote class benchmark class
testing comparing algorithms, low frequencies hard instances generally
sucient. say problem class maximally hard (with respect algorithm
set algorithms) instances generated according distribution hard
probability going one n goes infinity.
example maximally hard classes, empirical evidence suggests variety
hidden coloring graph generators based Gn;p model maximally hard large
variety graph coloring algorithms (Culberson Luo, 1993). hard classes
closely related coloring phase transition random graphs. general, phase
transition defined parameterized probability distribution set instances.
parameter varied past certain threshold value, asymptotic probability
existence solution switches sharply zero one.
Phase transitions commonly considered identified hard subsets particular problem (Cheeseman, Kanefsky, & Taylor, 1991). Many NP-C problems
characterized `constraint' parameter measures constrained instance is.
Evaluation problem using constraint parameter typically divides instances
two classes: solvable, unsolvable, sharp transition
occurring them. problem highly constrained, easily determined
solution exists. constraints removed, solution easily found.
Different researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, &
Walsh, 1998) examined phase transitions random graphs Hamiltonian cycle
problem. obvious constraint parameter average degree (or average connectivity)
graph. degree increases, graph becomes less constrained: becomes easier
Hamiltonian cycle exist algorithm find one. researchers
examined Hamiltonicity changes respect average degree. Frank et
al. (1998) Frank Martel (1995) experimentally verified using Gn;m
model phase transition Hamiltonicity close phase transition biconnectivity, occurs average degree approximately ln n (or = n ln n=2) 1 .
Cheeseman et al. (1991) experimentally confirmed theoretical predictions Komlos
Szemeredi (1983) phase transition (for Hamiltonian cycle problem) occurs
average degree ln n + ln ln n. papers provided empirical evidence
time required backtrack algorithms increased region phase transition
noted existence hard instances appeared associated
transition.
1. Note average degree equals 2m=n.

221

fiVandegriend & Culberson

mentioned above, k-colorable Gn;p class appears maximally hard known
algorithms respect phase transition defined n; p k, k n= logb n
b = 1=(1 , p). Hamiltonian cycle Gn;m class hand appear
maximally hard value m. fact, large n algorithm almost never takes
O(n) backtrack nodes O(nm) running time.
use much weaker requirement say instance quadratically hard
requires least n2 search nodes backtrack algorithm described section 3. Note

(n2 ) search nodes would take algorithm
(n3 ) time. practical reasons,
use weaker definition robustness, say instance robustly quadratically
hard algorithm uses least n2 search nodes iterated restart feature used
multiplying factor 2. (See section 3 program details). say class
minimally hard constant > 0 probability hard instance
least n ! 1.
Section 4 examine Gn;m random graphs using backtrack algorithm graphs
1500 vertices. empirical evidence collect suggests contrast
graph coloring situation, Hamiltonian cycle Gn;m class minimally quadratically
hard, even near phase transition, even drop minimal robustness
requirement.
Note dispute claim hard instances likely phase
transition values m, rather claim even transition
probability generating hard instance rapidly goes zero increasing n.

2.2 Random Graph Theory Phase Transition

results unexpected one reviews theoretical work graph class.
Since asymptotically graph becomes Hamiltonian edge added last
degree 1 vertex (Bollobas, 1984), algorithm checks minimum degree 2
detect almost non-Hamiltonian graphs. graph Hamiltonian, various
researchers (Angluin & Valiant, 1979; Bollobas, Fenner, & Frieze, 1987) proven
existence randomized heuristic algorithms almost always find Hamiltonian
cycle low-order polynomial time. particular, shown (Bollobas et al., 1987)
polynomial time algorithm HAM
8
>
<

0
cn ! ,1
,e,2c cn ! c
lim
Pr
(HAM
finds

Hamilton
cycle)
=
e
n!1
>
:
1
cn ! 1
= n=2(ln n + ln ln n + cn ).
Furthermore, authors point out, best possible result sense
asymptotic probability Gn;m graph Hamiltonian,
probability minimum degree 2. words, probability finding
cycle probability one existing. Given trivial check
minimum vertex degree graph, leave much room existence hard
instances (for HAM similar algorithms).
Another relevant theoretical result polynomial time algorithm
probability going one, finds Hamiltonian cycle graph hidden
222

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

Hamiltonian cycle together extra randomly added edges(Broder, Frieze, & Shamir,
1994). algorithm work, average degree vertex needs constant.
claim result easily extended case average degree growing
function n. another indication Hamiltonian graphs near phase transition
easy solve algorithm.
non-Hamiltonian graph hard algorithm must contain feature
preventing formation Hamiltonian cycle algorithm cannot easily detect.
Suppose backtrack algorithm check vertices degree one. algorithm may
require exponential backtrack determining non-Hamiltonicity graph,
since way detect trying possible paths failing. However,
degree one vertices easily detectable, good indicators hard instances.
disappear phase transition.
Similarly, algorithm might check articulation points, result waste
exponential time easy instances. n ! 1, probability
articulation point existing (in Gn;m ) goes zero fast probability existence
vertex degree less two. features lead non-Hamiltonicity course,
k-cuts leave k +1 components (Bondy & Murty, 1976), could
require time proportional nk detect. assumption NP6=CO-NP
must exist set non-Hamiltonian instances polynomial proof
status.
However, seems phase transition larger feature less likely
occur. fact, theoretical results summarized indicate must happen.
Although know hard graphs exist, may expect localized types hard
graphs frequent near phase transition elsewhere using Gn;m
generate instances, expect probability instances go zero n
increases.

3. Overview Backtrack Algorithm
backtrack algorithm comes Vandegriend (1998), based upon prior work
backtrack Hamiltonian cycle algorithms (Kocay, 1992; Martello, 1983; Shufelt & Berliner,
1994). three significant features discuss. First, employs variety
pruning techniques search delete edges cannot Hamiltonian
cycle. pruning usually based upon local degree information. Second,
start search algorithm performs initial pruning identifies easily detectable
non-Hamiltonian graphs. third feature use iterated restart technique.
Additionally, program provides opportunity order selection next vertex
path extension using either low degree first ordering, high degree first ordering,
random ordering. normally use low degree first ordering.
level search, adding new vertex current path, search pruning
used. pruning identifies edges cannot Hamiltonian cycle removes
graph. (Note algorithm backtracks, adds edges deleted
current level search back graph.) first graph configuration
pruning looks vertex x 2 neighbours a; b degree 2. Since edges
incident b must used Hamiltonian cycle, edges incident
223

fiVandegriend & Culberson

x deleted. second graph configuration pruning looks path
P = (v1 ; : : : ; vk ) forced edges (so v2 : : : vk,1 degree 2). k < n edge v1 ; vk

cannot Hamiltonian cycle deleted. result pruning, degree
vertex drops 2, Hamiltonian cycle possible algorithm must
backtrack. use operators may yield new vertices degree 2 therefore
pruning iterated changes occur.
pruning iteration takes O(n) time scan vertices check vertices two
degree 2 neighbors, O(n) time extend forced degree two paths. Since iterations
terminate unless new vertex degree two created, n iterations occur.
O(m) edges deleted. backing descendant, edges replaced
(O(m)) next branch taken. Thus, easy upper bound pruning time
node searching vertex degree O(d(n2 + m)), overly pessimistic.
Note along branch root search tree leaf, n vertices
converted degree 2. note along branch edge deleted
once. degree high seldom take branches success.
implementation several vertices two neighbors degree two
beginning iteration, redundant edges removed single pass taking time
proportional n plus number edges removed checked. practice, Gn;m
graphs typically takes O(n + m) time per search node easy Hamiltonian instances
evidenced CPU measurements, harder instances taking twice long
per search node.
start recursive search, algorithm prunes graph described
above. algorithm checks see graph minimum degree 2, connected,
cut-points. conditions true, graph nonHamiltonian algorithm finished.
non-Hamiltonian instances may easy hard detect, depending
vertex algorithm chooses starting point. cases local features
exist could detected algorithm starts near them, otherwise algorithm
may backtrack many times feature without recognizing feature
matters. seemingly hard instance Gn n = 100 discussed Section 4.2
case. one type \thrashing," common problem backtracking algorithms.
example, Hogg Williams (1994) noticed sparse set hard 3-coloring problems
phase transition. Baker (1995) showed instances
often hard result thrashing, could made easy backjumping
dependency-directed backtracking.
improve algorithm's average performance use iterated restart technique.
idea maximum limit number nodes searched.
maximum reached, search terminated new one started maximum
increased multiple k (so Mi+1 = kMi ). Initially, = kn. experiments,
used k = 2. incrementing search interval way, algorithm eventually
obtain search size large enough exhaustive search thus guarantee eventual
completion. total search never double largest size allocated.
Although random restarts sometimes effective non-Hamiltonian graphs,
frequently effective Hamiltonian instances. search, edges added
set Hamiltonian edges, net effect prune edges graph.
224

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

Hamiltonian graph hard, algorithm must select set edges causes
reduced graph become non-Hamiltonian, non-Hamiltonian subgraph must
hard solve. iterated restart, instance remain hard algorithm must
make mistakes high probability. result, expect fewer hard Hamiltonian
instances.
Random restarts integral part randomized algorithms (Motwani & Raghavan,
1995) used frequently local search techniques escape local
optima (Johnson, Aragon, McGeoch, & Schevon, 1991; Langley, 1992; Selman, Levesque,
& Mitchell, 1992; Gomes, Selman, & Kautz, 1998). discussion impact
restarts found analysis experiments Gn;m graphs Section 4.
algorithm provides possibility checking components cut
vertices recursive search pruning completed search node.
overhead extra work O(n + m) per search node rarely seems pay off. Except
noted checks used study.
experimental results reported remaining sections run variety
machines, fastest 300 MHZ Pentium II. CPU times reported
either machine, adjusted using observed speed ratios similar tests.
algorithm terminated execution 30 minutes2. Experimental results frequently
reported ratio number search nodes number vertices. node
ratio used feel provides better basis comparing results across different
graph sizes, since many results O(n). Note number search nodes
calculated number recursive calls performed.
used several different methods verifying correctness algorithm
experimental results. algorithm independently implemented twice, performs
automatic verification Hamiltonian cycles found. performed multiple sets experiments generalized knight's circuit graphs compared results (graph Hamiltonian
not) theoretical predictions. Initial sets experiments Gn;m graphs Degreebound graphs executed using two different pseudo-random number generators,
repeated multiple times. source code available appendix.

4. Gn;m Random Graphs

consider random graphs 16 1500 vertices = dn=2. previous work
(Cheeseman et al., 1991; Komlos & Szemeredi, 1983) expect phase transition occur
ln n + ln ln n. Thus specify constraint parameter (or degree parameter)
k = =(ln n + ln ln n).

4.1 Gn;m Using Restart

premiere experiment, generate Gn;m graphs number vertices n = 16 : : : 96
steps 4, n = 100 : : : 500 steps 100, n = 1000 n = 1500. size n,
degree parameter k ranges 0:5 : : : 2:0 (step size 0.01 k = 1:00 : : : 1:20, step size
2. Since time limit 30 minutes least two orders magnitude greater typical running
time, limit rarely used. slower machines limit increased. Knight's tour graphs
reported Section 6 run slower machine 30 minute time limit, although instances
run much longer.

225

fiVandegriend & Culberson

100
100
200
300
400
500
1000
1500

% Hamiltonian

80

60

40

20

0
0.6

0.8

1

1.2
1.4
Degree Parameter k

1.6

1.8

2

Figure 1: % Hamiltonian graphs function graph size degree parameter
Gn;m graphs.
0.10 ranges k). generate 5000 graphs data point execute
backtrack algorithm graph. grand total 4.76 million graphs,
1.19 million 100 vertices.
use pruning described section 3, check components articulation points
initial pruning, use iterated restart multiplicative factor 2.
check components articulation points recursive search.
expect phase transition biconnectivity similar phase transition Hamiltonicity (Cheeseman et al., 1991) expect phase transition
minimum degree greater 1 almost identical phase transition Hamiltonicity (Bollobas, 1984; Komlos & Szemeredi, 1983). experimental results matched
expectations closely. larger graphs 100 1500 vertices, percentage
Hamiltonian graphs plotted degree parameter Figure 1. found
50% point half graphs Hamiltonian occurs degree parameter
k 1:08 , 1:10. interestingly, curves pass close fixed point near k = 1,
seems approaching vertical line point. is, appear
converging k 1 phase transition, precisely theory predicts.
226

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

n
100 200 300 400 500 1000 1500
Nodes 7:5n 7:0n 3:3n 7:0n 3:4n 3:3n 7:0n
Table 1: Maximum Search Nodes Gn;m Large n
graphs solved, either determined non-Hamiltonian,
Hamiltonian cycle found. primarily interested asymptotic behavior, since
theories concerning relation phase transition hard regions necessarily
asymptotic nature. graphs 100 vertices more, longest running time
11 seconds, graph 1500 vertices using 10,500 (or 7:0n) search nodes find
Hamiltonian cycle.
549,873 non-Hamiltonian graphs range detected initial
pruning graph, thus search nodes expanded. 640,127 Hamiltonian
Gn;m graphs, vast majority ( 629,806 98:3%) used n search nodes, means
algorithm need backtrack all3. quadratically hard graphs
found range. Table 4.1 lists maximum number search nodes expressed
factor n illustrate linearity search tree.
results appear differ Frank et al. (1998), found graphs
took orders magnitude search nodes solve. (Their hardest graph took
1 million nodes.) believe due two factors. Firstly, algorithm used
generate results paper initial check biconnectivity
use pruning techniques used algorithm. Secondly importantly,
small random graphs used ( 30 vertices) probability obtaining certain hard
configurations (such biconnected non-Hamiltonian non-biconnected minimum
degree 2) much higher n larger, discussed section 2.2.
experiments small Gn;m graphs (between 16 96 vertices) confirm conjecture. case find small number quadratically hard graphs,
hard graphs. consider purposes paper, hard graph less
100 vertices takes least 100,000 search nodes solve. hard
graphs set runs given Table 4.1.
Note hardest took less two minutes solve, making designation
\very hard" questionable. Also, note smallest graph set 36 vertices,
somewhat larger 30 vertex examples found Frank et al. (1998). likely
articulation point checking initially better pruning. Finally,
hard graphs non-Hamiltonian, occur classes produce less 50%
Hamiltonian graphs. hardest Hamiltonian graph contrast required 19,318 search
nodes, graph 68 vertices degree parameter 0.9.
Figure 2 plot number graphs quadratically hard small
graphs. n 68 92, non-Hamiltonian graphs detected initial
pruning. One non-Hamiltonian graph n = 96 required search (254:1n nodes). Notice
number quadratically hard Hamiltonian graphs far less number
quadratically hard non-Hamiltonian graphs, peaks larger n. accordance
discussion random restarts Section 3.
3. 5% error measurement, means algorithm might backtracked
maximum 0:05n search nodes.

227

fiVandegriend & Culberson

Vertices Degree Parameter Seconds Search Nodes Ratio
36
1.11
94.7
1179579 32766.1
40
1.00
36.5
638946 15973.6
40
1.07
18.7
327603 8190.1
44
1.00
12.3
156694 3561.2
44
1.04
20.0
293664 6674.2
48
1.02
91.2
1280135 26669.5
48
1.09
107.0
1243647 25909.3
Table 2: Hardest Small Graphs

60
non-Ham
Ham

Number Hard Instances

50

40

30

20

10

0
20

30

40

50
60
70
Number Vertices

80

90

Figure 2: Number Quadratically Hard Graphs Small n.

228

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

ran additional tests n 32 54 steps 2, degree parameter
ranging 0.96 1.16 step size 0.01, generating 5000 graphs point.
case, invoked articulation point checking search node. graphs
solved without timing out, hard graphs found, nonHamiltonian. One 50 vertex graph required 9,844,402 search nodes, required close
20 minutes solve. unclear whether extra checking helped; smallest graph
requiring least 100,000 nodes 32 vertices, smallest requiring million
40 vertices. Overall, results similar first set experiments
small graphs.

4.2 Gn Using Restart
Clearly, edges add graph, likely Hamiltonian.
seems graph Hamiltonian, adding edges makes less likely
hard. attempt find hard graphs larger n, modified Gn;m generator
instead adding fixed number edges, instead added edges every vertex
degree least two, stops. sense produces graphs exactly
Gn;m phase transition, since minimum degree two condition asymptotically
distinguishes Hamiltonian non-Hamiltonian graphs high probability. refer
distribution Gn model.
Initially ran 1000 graphs generator n 100 500, hard
instances found. increased search 10,000 graphs n, included
search n = 1000. graphs, found one hard graph 100 vertices.
Even second attempt using 26 million search nodes, still unsolved.
post-mortem analysis, checked cut sets size 2 3 would leave 3
4 (or more) components found none. checked pruned graph using
odd degree test mentioned Section 5.3, failed show non-Hamiltonian.
Finally, set fast machine unlimited time restarts. Three search nodes
less 0.1 seconds later proven non-Hamiltonian.
Detailed analysis (see appendix) shows graph small feature
easily detected one starting points selected. use exponentially
growing sequence searches, use restarts. test 100 random starts
3 second time limit 7 trials succeeded, using 2 5 search nodes prove
graph non-Hamiltonian.
ran 10,000 Gn graphs even value n 16 98. smallest
instances requiring least 100,000 search nodes n = 50. 5 graphs requiring
million nodes found n < 100, two n = 62, one n = 70 two
n = 98. Two (one 62, one 98) initially timed out, solved second
attempts 1/2 hour. Neither susceptible attack 100 restarts
100 vertex graph.
Table 4.2 shows number non-Hamiltonian graphs n 100.
except one mentioned detected initial pruning. remaining graphs
easily shown Hamiltonian, maximum search ratio 7.0.
Clearly probability non-Hamiltonian graphs drawn Gn decreasing
n. seems likely probability hard instances going zero.
229

fiVandegriend & Culberson

n
100 200 300 400 500 1000
Non-Ham 154 56 29 20 15
3
Table 3: Number Non-Hamiltonian Graphs Gn

n k = 1:00 k = 1:50 k = 2:00

500
1000
1500

0.20
0.43
0.68

0.20
0.50
0.80

0.21
0.60
0.87

Table 4: CPU Seconds per 1000 Search Nodes Gn;m Graphs

4.3 Gn;m Without Using Restart

wanted know important restart feature asymptotically. ran 1000 Gn;m
graphs n 100 1500, parameter settings premiere experiment,
time using backtrack algorithm without iterated restart feature. before,
non-Hamiltonian instances detected initial pruning. One quadratically hard
Hamiltonian graph found n = 300, degree parameter 1.20, required
163,888, 1:82n2 search nodes took 28.5 seconds. graphs nearly
quadratic, example n = 1500 4 graphs required 0:15n2 , 0:19n2 ,
0:36n2 0:47n2 search nodes. seems asymptotically, even absence
iterated restarts, Gn;m class provide hard instances high probability.

4.4 Gn;m Summary

Based set timing runs, present Table 4.4 indication running time per
search node increases number vertices n degree parameter k.
times usually short, cannot get reliable numbers n < 500. times shown
evaluation 1000 search nodes, averaged (total CPU divided total
nodes searched) graphs solved less 1:1n search nodes. instances
require significantly search nodes, time per 1000 nodes seems increase
somewhat, examples large n unable provide exact
estimates. n = 15004 , average time per 1000 nodes instances requiring
2n search nodes 0.89 seconds k = 1:00, 1.04 k = 1:50 1.31 k = 2:00.
Note includes least one instance took 7n search nodes. table indicates
growth approximately linear n + m.
experimental evidence clearly indicates Gn;m random graphs asymptotically
extremely easy everywhere, despite existence phase transition. results temper
findings various researchers (Cheeseman et al., 1991; Frank et al., 1998; Frank
& Martel, 1995) studying phase transitions Hamiltonian cycle problem. Cheeseman et al.'s explanation observed increase diculty near phase transition
\on border [between regions low high connectivity] many
4. n = 1500 value n least one instance requiring 2n search nodes
three values k. times 1000 1500 come separate runs 1000 graphs per
sample point.

230

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

almost Hamiltonian cycles quite different . . . numerous
local minima make hard find Hamiltonian cycle (if one). search procedure based local information diculty." (Cheeseman et al., 1991).
Unfortunately, observations accurate, observed hardness due
algorithms limited size graphs tested, intrinsic properties
Hamiltonian cycle problem respect phase transition Gn;m graphs.
shown ecient backtrack algorithm finds phase transition region Gn;m graphs
easy general.

5. Degreebound Graphs
Intuitively, reason hard generate hard instance Gn;m
time add enough edges make minimum degree two, rest graph
dense finding Hamiltonian cycle easy. Alternatively, see create
non-Hamiltonian property feature, must regions low degree,
time meeting minimal requirements make instance hard solve. problem
characterized one high variance vertex degrees. region
get even hard graphs Gn;m n small enough average degree
low.
avoid consequences degree variation, section use different
random graph model Gn(d2 = p2 ; d3 = p3 ; : : :) n number vertices
di = pi percentage vertices degree i. example G100 (d2 = 50%; d3 = 50%)
represents set graphs 100 vertices 50 degree 2 50 degree
3. refer graph generated model Degreebound graph. paper
consider graphs whose vertices degree 2 3.
quite dicult generate graphs given degree sequence equal probability (Wormald, 1984). Instead, adopt two variations generate graphs selecting
available edges. case vertex assigned free valence equal desired final
degree. version 1 pairs vertices selected random order, added edges
two vertices least one free valence each. continues either free
valences filled (a successful generation) vertex pairs exhausted (a failure).
failure occurs, process repeated scratch. Initial tests indicate 1/3
attempts fail general. eciency reasons, implementation array vertices
holds vertex once. Pairs vertices, v; w selected random array
v 6= w, (v; w) already edge, (v; w) added edge, free
valence v w reduced one. free valence vertex zero,
vertex deleted array. step repeated small number (twice
maximum degree) vertices remains, possible pairs remaining vertices
generated tested random order.
version 2 array initially holds vertex v deg[v] times. Pairs vertices
randomly selected, equal edge exist, edge added,
copies two vertices deleted array. repeated array
empty, 100 successive attempts failed add edge. latter case taken
failure, process repeated scratch. method seldom fails.
231

fiVandegriend & Culberson

Neither two methods guarantees uniform distribution graphs
given degree sequence. example, given degree sequence five vertices f1; 1; 2; 2; 2g,
seven possible (labeled) graphs. One consists two components, edge
triangle. six four paths; thus six isomorphic one another.
10! permutations pairs vertices, 564,480 generate graph two components,
four path 322,560 distinct permutations. remaining permutations (31.2 %) yield legal graph. Thus, first graph 1.75 times likely
six. course, four path (counting isomorphic graphs) 3.428 times
likely two-component graph.
hand, version 2 test program (not generator prohibits degree
one vertices) consistently generated first graph 8%{10% often
others, based several million random trials.

5.1 Experimental Results Degreebound Graphs

test graphs 100 : : : 500 vertices (step size 100) 1000 1500 vertices mean
degree varying 2:6 : : : 3:0 (step size 0.01 2.75 2.95, step size 0.05 elsewhere).
generate 1000 graphs data point, execute algorithm graph,
collect results. test repeated two versions.
Figure 3 shows percentage graphs Hamiltonian mean degree
graph size varies5 . clear transition mean degree 2.6 (near 0% chance
Hamiltonian cycle) mean degree 3 (for Robinson Wormald, 1994 predict
almost 100% chance Hamiltonian cycle uniformly distributed graphs).
phase transition, would expect slope grow steeper graph size increases.
Figure 3 shows increase steepness.
Note double points curve n = 100 due unavoidable discretization. Since total degree graph must even, generators detect
total degree specified odd, one minimum degree vertices selected degree
incremented. Thus, example, whether fraction degree 3 vertices specified 0.81
0.82, number degree three vertices 82. Discretization effects occur n = 300,
500 1500, lessened impact.
Table 5.1 summarize observed hard instances graphs. note
several instances exceeded time bounds, although certainly least
quadratically hard, included quadratically hard instances. frequency
hard instances appears decreasing n graphs. particular
quadratically hard non-Hamiltonian instances 1000 vertices, except
hard solve program.
Interestingly, turns O(n + m) time test shows
unresolved instances non-Hamiltonian. test described brie Section 5.3.
implemented test separate program tested unresolved graphs,
results indicated last column Table 5.1. remaining five graphs
remain unresolved. test included initial pruning program,
instances enumerated last column Table 5.1 would solved (proven nonHamiltonian) without search.
5. graphs, mean degree 2.0 plus fraction degree 3 vertices.

232

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

100
Version 1
n = 100
200
300
400
500
1000
1500

% Hamiltonian

80

60

40

20

0
60

65

70

75
80
85
% Vertices Degree 3

90

95

100

100
Version 2
n = 100
200
300
400
500
1000
1500

% Hamiltonian

80

60

40

20

0
60

65

70

75
80
85
% Vertices Degree 3

90

95

Figure 3: % Hamiltonian graphs Degreebound Graphs.
233

100

fiVandegriend & Culberson

Version 1
Number Quadratically Hard Timed
Vertices HC
HC
Total HC
100
5
0
0
0
200
18
0
3
3
300
8
0
11
10
400
1
0
14
14
500
0
0
14
14
1000
0
0
7
7
1500
0
1
6
6
Version 2
Number Quadratically Hard Timed
Vertices HC
HC
Total HC
100
5
0
0
0
200
9
0
6
5
300
10
0
13
13
400
3
0
11
11
500
1
1
10
9
1000
0
1
6
4
1500
0
0
6
6
Table 5: Number Hard Graphs Degreebound Graphs
Thus, although classes may provide small rate hard instances current
program, clear even minimally hard. Furthermore, appears exist
simple improvements program would eliminate hard instances.
Figure 4 illustrate distribution graphs timed out.
quadratically hard graphs similar distributions. concluded
hard instances seem distributed mean degree range 2.78 2.94.
backtrack program little faster Degreebound graphs Gn;m graphs,
would expect given fewer total edges. 1500 vertices, times per 1000 search
nodes ranged 0.27 seconds easiest (no backtrack) instances 0.56 seconds
harder ones.

5.2 Analysis Degreebound Graphs

analysis Degreebound graph class led us conjecture prime factor
determining Hamiltonicity graph whether graph degree 3
vertex 3 neighbours degree 2. label 3D2 configuration (or 3D2 event).
graph 3D2 configuration non-Hamiltonian. following informal analysis
provides evidence conjecture.
Let E (n; ) represent expected number 3D2 configurations graph n
vertices. Let D2 = n number degree 2 vertices D3 = (1 , )n number
D3 = 2n+3n(1,) = 3 , . Assuming
degree 3 vertices. Note mean degree = 2D2 +3
n
n
equal probability combinations,
234

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

Number Failed
Version 1

5
4
3
2

95

1
90
200

85 % Degree 3

500
1000
Number Vertices

80
1500

Number Failed
Version 2

5
4
3
2

95

1
90
200

85 % Degree 3

500
1000
Number Vertices

80
1500

Figure 4: Distribution Timed Instances Degreebound graphs
235

fiVandegriend & Culberson

# Mean Degree 50% HC Point
Vertices Experimental
Theoretical
100
2.78
2.78
200
2.81
2.82
300
2.83
2.85
400
2.84
2.86
500
2.85
2.87
1000
2.88
2.90
1500
2.90
2.91
Table 6: Experimental approximate theoretical values location 50%
Hamiltonian point Degreebound graphs various sizes.

E (n; ) = D3

,D2

,n,13
3

,

n(1 , ) n
)(n)(n , 1)(n , 2)
= ,n,1 3 = n(1(,n ,
1)(n , 2)(n , 3)
3

restrict asymptotic case (n ! 1) gives us

E (n; ) n(1 ,n3)(n) n(1 , )3
3

E (n; ) ! 0, probability configuration 3D2 approaches 0.
want find n(1 , )3 ! 0 n ! 1. occurs = o(n,1=3 ).
Since Hamiltonian cycle cannot exist E (3D2) > 0, tells us phase transition
asymptotically occurs mean degree equals 3. Asymptotically, Degreebound graphs
< 3 expected non-Hamiltonian Degreebound graphs > 3
expected Hamiltonian (ignoring conditions). agrees results
Robinson Wormald (1994) proved almost 3-regular graphs Hamiltonian.
let = n,1=3 gives us E (n; ) 1. Substituting equation expression
mean degree gives us = 3 , n,1=3 . Table 5.2 lists mean degrees different values n
using formula along experimentally determined values point 50%
graphs Hamiltonian. remarkably similar. suggests 3D2
configuration major determinator whether Degreebound graph Hamiltonian not. Minor effects (which ignored) come propagation deleted edges
pruning less probable cases mentioned Section 5.3. Since
3D2 configuration detected algorithm search started,
implies phase transition easy algorithm, since non-Hamiltonian
graphs instantly detected. matches experimental observations.

5.3 Non-Hamiltonicity Test Sparse Graphs

preparing final version paper, observed 3D2 configuration
could replace vertex degree three component several vertices. general,
236

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

three vertices degree two form minimal cut graph nonHamiltonian. fact, replace three vertices minimal cut odd number
c degree 2 vertices, claim non-Hamiltonicity remains true.
Checking possible subsets size c would expensive, fortunately
even general condition includes special cases tested
linear (i.e O(n + m)) time. Let F set edges forced Hamiltonian
cycle one exists. example, edges incident vertex degree two forced. Let
G0 = G , F graph formed deleting forced edges G. Let C1 : : : Ch
components G0, define forced degree component Ci number end
points forced edges (from F ) Ci . component odd forced degree, G
non-Hamiltonian.
proof correctness test simple. Observe Hamiltonian
cycle G traversing cycle time enter component, must
corresponding exit. Since forced edges act cut set (that separates components),
edges available act entries exits component. forced edges
must used. Therefore, Hamiltonian cycle must even number
forced edges connecting component components, contributing one
forced degree component. forced edge internal (with end points in)
component contributes two forced degree, Hamiltonian cycle total
forced degree component must even.
obtain results last column Table 5.1, first initial pruning,
applied test pruned graphs, using forced edges incident degree
two vertices.

6. Generalized Knight's Circuit Graphs
section examine graph class based upon generalized knight's circuit problem
size knight's move allowed vary along size (rectangular) board. instance generalized knight's circuit problem graph defined
4-tuple (A; B ) , n A; B size knight's move n; size
board. vertices graph correspond cells, thus jV j = nm. Two
vertices connected edge possible move one vertex
moving steps along one axis B along other. (See Vandegriend, 1998
information problem.)
graph class easy way define phase transitions since
clear parameter separates Hamiltonian graphs non-Hamiltonian
graphs (although Vandegriend, 1998 shows ways identifying groups
non-Hamiltonian graphs). Thus find hard graphs, look graphs take significant amount time solve relative size. perform 1 trial per graph (problem
instance) report ratio search nodes number vertices.
examined total 300 generalized knight's circuit graphs ranges A; B; n;
(Specific A; B; n triplets allowed vary, + B 9, n 13, 60.)
ranged size 80 390 vertices. 300 instances examined, 121 graphs (40 %)
found Hamiltonian 141 graphs (47 %) found non-Hamiltonian.
237

fiVandegriend & Culberson

search nodes # trials % trials

2n
1
0.8
5n
43
35.5
10n
37
30.6
20n
11
9.1
50n
8
6.6
100n
8
6.6
200n
2
1.7
500n
5
4.1
1000n
2
1.7
2000n
1
0.8
5000n
1
0.8
10000n
1
0.8
20000n
0
0.0
50000n
1
0.8
Table 7: Histogram search node ratio backtrack algorithm 121 Hamiltonian
generalized knight's circuit instances.
remaining 38 graphs (13 %) backtrack algorithm failed (reached 30 minute
time limit), implies graphs hard backtrack algorithm.
majority (91%) non-Hamiltonian graphs solved without search. However, significant number remaining graphs took many search nodes solve. 9
graphs (6.4%) took 10n nodes 7 graphs (5.0%) took 100n nodes.
hardest graph took 11276n search nodes (n = 324). majority
non-Hamiltonian graphs easy, significant percentage generalized knight's
circuit graphs quite hard algorithm.
larger variance hardness observed Hamiltonian graphs. Table 6 shows
distribution respect number search nodes required. Unlike Gn;m
Degreebound graphs, graphs could solved n search nodes. Almost
graphs required least 2n search nodes. 33% graphs required least 10n
nodes, 11% required least 100n nodes hardest graph required 34208n nodes
(n = 198).

7. Hard Constructed Graph Class
worthwhile designing algorithm determine conditions
frequently might fail perform badly might do. measure
terms bad approximation is, long exact algorithm may take
worst case. long tradition designing instance sets foil specific combinatorial algorithms (Johnson, 1974; Mitchem, 1976; Olariu & Randall, 1989; Spinrad & Vijayan,
1985). special classes intended general, frequently based
certain features constructs together randomization hide features (Culberson & Luo, 1996; Brockington & Culberson, 1996; Kask & Dechter, 1995; Bayardo Jr. &
238

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

Schrag, 1996). Gn;m class frequently used study graph algorithms possible
graphs.
section consider special construction Hamiltonian graph
extremely hard (exponential increase diculty size) backtrack algorithm.
consists mostly special constructs tied together randomly chosen edges.
bears resemblance graphs Meredith graph (Bondy & Murty, 1976) used
disprove certain theoretical conjectures. graph remains dicult vary
neighbour selection heuristic pruning techniques used backtrack algorithm.
graph construct refer Interconnected-Cutset (ICCS ) graph.
class intended merely show exponentially hard classes clearly exist
algorithm, many backtrack algorithms using similar approaches.
claim graphs intrinsically hard, polynomial time algorithm
solve particular class.
basic concept use constructing graphs non-Hamiltonian edge,
define edge cannot possible Hamiltonian cycle. Note
since graphs Hamiltonian, vertex must incident least two edges
non-Hamiltonian. goal force algorithm choose non-Hamiltonian
edge point. key observation edge chosen, algorithm
must backtrack fix choice. multiples bad choices, backtracking
fix recent bad choice, algorithm must eventually backtrack earlier
point fix less recent bad choice, means recent choice must redone,
algorithm making bad choice again. amount work performed
algorithm least exponential number bad choices. See Vandegriend (1998)
details.
ICCS graph composed k identical subgraphs ICCSS arranged circle.
force desired cycle degree 2 vertex subgraph. Since
subgraph Hamiltonian path connecting vertices, ICCS graph
Hamiltonian. Due construction ICCS subgraph, extra non-Hamiltonian edges
added different subgraphs. edges help prevent components
forming search, greatly reduces effectiveness component checking
search pruning. See Figure 5. Heavy lines forced edges must Hamiltonian
cycle.
Figure 6 contains sample ICCS subgraph. Non-Hamiltonian edges denoted
dashed lines, forced edges denoted heavy lines.
see dashed lines cannot part Hamiltonian cycle observe
path ICCSS must enter exit SC vertex, two
SC vertices sequence path visit one SI vertex. Thus, path
uses least one vertex SC SI . Since initially jSC j = jSI j + 1,
Hamiltonian cycle enter exit ICCSS once, must alternate
SC SI vertices. Since ST vertices one edge leading SI vertex,
edges forced. allows us interconnect subgraphs without adding new
Hamiltonian cycles connecting vertices SC two different subgraphs (since
additional edges non-Hamiltonian edges). interconnecting subgraphs
fashion, strongly reduce effectiveness checking components cut-points
search. current implementation, vertex SC randomly choose
239

fiVandegriend & Culberson

ICCSS

ICCSS

ICCSS

ICCSS

Figure 5: sample ICCS graph.

SI

SD
SC
ST

ST



SC vertices

subgraphs

connecting edges adjacent subgraphs

Figure 6: sample ICCS subgraph ICCSS .
240

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

vertex another SC add edge. Thus, average number edges per vertex
little less two, since edges may repeated.
One additional design element added handle various degree selection heuristics
algorithm could use. stage search, neighbours current
endpoint partial path arranged list determine order
chosen backtrack algorithm. 3 main heuristics: sorting list visit
lower degree neighbours first, sorting visit higher degree neighbours first, visiting
random order. (Our backtrack algorithm normally uses lower degree first heuristic.)
SD vertex ICCS subgraph used fool low degree first heuristic.
SD vertex incident two ST vertices two vertices SI , makes
degree 4. algorithm enters subgraph degree 2 connecting vertex,
reaches one ST vertices. ST vertex, choices SD vertex (degree
4) one SI vertex (degree jSC j , 2, connected SD vertex
ST vertex). jSC j > 6 SD vertex lower degree thus
chosen first.
high degree first heuristic avoids following edge ST vertex SD
vertex, instead goes SI vertex. chooses one SC vertices (not
including SD ST vertex, adjacent). point, choice
one SI vertices (maximum degree = jSC j , 2) one SC vertices different
subgraph (degree jSC j subgraph yet visited). Since SC vertex
normally higher degree, algorithm follow non-Hamiltonian edge
vertex.
next neighbour chosen random, ST vertex, algorithm
50% chance making wrong choice. Similarly, SC vertex algorithm
small chance following non-Hamiltonian edge. number subgraphs increased,
probability algorithm making right choices rapidly approaches 0.
Another reason ICCS subgraph expected hard backtrack algorithm
many possible paths two ST vertices. non-Hamiltonian
edge previously chosen, backtrack algorithm try different
combinations paths (and fail form Hamiltonian cycle) backtracks
bad choice.
performed experiments various ICCS graphs. varied number subgraphs
1 4, varied independent set size (jSI j) 6 8. used backtrack
algorithm specified Section 3 addition checking components cutpoints search. executed algorithm 5 times per graph. results
listed Table 7 low degree first heuristic. experiments using degree
selection heuristics exhibited similar results.
performed similar experiments using randomized heuristic algorithm
(Frieze, 1988; Posa, 1976). Due significant difference operation
algorithm backtrack algorithms, easily solved small ICCS graphs. However
performance rapidly decreased graphs increased size.
average degree ICCS graphs one subgraph lies within following range:
jSI j , 2:5 + jS 9j:5+ 1 jSI j , 2 + jS j8+ 1




241

fiVandegriend & Culberson

n #S jSI j

14
28
42
56
16
32
48
18
36
54

1
2
3
4
1
2
3
1
2
3

6
6
6
6
7
7
7
8
8
8

Min
Median
Max
14
14
210
606
616
3,777
10,467
47,328
112,795
6,538,842 32,578,160 36,300,827
16
48
112
13,056
21,797
70,949
1,350,084 5,247,287 8,027,520
18
54
270
283,164
430,620
750,211
> 1:2 108

Table 8: Search nodes required backtrack algorithm ICCS graphs.
formula see size independent set increased, mean
degree increases linearly. However, number subgraphs increased, mean
degree remains constant. ICCS graphs remain hard wide range mean
degrees (from O(1) O(n)). Therefore average degree case relevant
parameter determining hardness.

8. Conclusions Future Work
backtrack Hamiltonian cycle algorithm found Gn;m graphs easy solve, along
majority Degreebound graphs. performed similar experiments (Vandegriend, 1998) using randomized heuristic algorithm (Frieze, 1988; Posa, 1976)
high success rate Gn;m graphs, less Degreebound graphs. interestingly,
existence phase transition problems clearly correspond high frequency dicult instances. suspect properties play important role
average degree. supported results generalized knight's circuit
graphs, highly regular (with many symmetries), majority
average degrees 4 8, compared mean degree 3 Degreebound
graphs.
results surprising, since shown asymptotically
randomly generated graphs, edge added makes last vertex degree 2,
high probability graph Hamiltonian (Bollobas, 1984). addition, ecient
algorithms shown solve instances polynomial time high probability (Bollobas et al., 1987). Since vertices degree less 2 trivially detectable
counter-indicator, hardly surprising asymptotically determining Hamiltonicity
graphs Gn;m easy.
observe performance backtrack algorithm widely vary
single graph due selection initial vertex. Multiple restarts backtrack
algorithm time limit reached often resulted superior performance. suggest
little randomization algorithm used empirically identifying intrinsically
hard random instances problem.
242

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

Acknowledgements
research supported Natural Sciences Engineering Research Council Grant
No. OGP8053.

References

Angluin, D., & Valiant, L. G. (1979). Fast probabilistic algorithms Hamiltonian circuits
matchings. J. Comput. System Sci., 18 (2), 155{193.
Baker, A. (1995). Intelligent Backtracking Constraint Satisfaction Problems. Ph.D.
thesis, University Oregon.
Bayardo Jr., R. J., & Schrag, R. (1996). Using csp look-back techniques solve exceptionally hard sat instances. Proc. Second Int'l Conf. Principles Practice
Constraint Programming, Vol. 1118 Lecture Notes Computer Science, pp. 46{60.
Bollobas, B., Fenner, T. I., & Frieze, A. M. (1987). algorithm finding Hamilton
paths cycles random graphs. Combinatorica, 7 (4), 327{341.
Bollobas, B. (1984). evolution sparse graphs. Bollobas, B. (Ed.), Graph Theory
Combinatorics, pp. 35{57. Academic Press, Toronto.
Bondy, J. A., & Murty, U. S. R. (1976). Graph Theory Applications. Elsevier, Amsterdam.
Brockington, M., & Culberson, J. C. (1996). Camou aging independent sets quasirandom graphs.. Johnson, & Trick (Johnson & Trick, 1996), pp. 75{88.
Broder, A. Z., Frieze, A. M., & Shamir, E. (1994). Finding hidden Hamiltonian cycles.
Random Structures Algorithms, 5 (3), 395{410.
Cheeseman, P., Kanefsky, B., & Taylor, W. M. (1991). really hard problems are.
Mylopoulos, J., & Reiter, R. (Eds.), IJCAI-91: Proceedings Twelfth International Conference Artificial Intelligence, pp. 331{337 San Mateo, CA. Morgan
Kaufmann.
Culberson, J. C., & Luo, F. (1996). Exploring k{colorable landscape iterated
greedy.. Johnson, & Trick (Johnson & Trick, 1996), pp. 245{284.
Frank, J., Gent, I. P., & Walsh, T. (1998). Asymptotic finite size parameters phase
transitions: Hamiltonian circuit case study. Information Processing Letters,
press.
Frank, J., & Martel, C. (1995). Phase transitions properties random graphs.
CP'95 Workshop: Studying Solving Really Hard Problems, pp. 62{69.
Frieze, A. M. (1988). Finding Hamilton cycles sparse random graphs. Journal Combinational Theory, Series B, 44, 230{250.
243

fiVandegriend & Culberson

Gomes, C. P., Selman, B., & Kautz, H. (1998). Boosting combinatorial search
randomization. Proceedings Fifteenth National Conference Artificial Intelligence (AAAI-98), pp. 431{437. AAAI Press/ MIT Press.
Hogg, T. (1998). search problems random?. Proceedings Fifteenth
National Conference Artificial Intelligence (AAAI-98), pp. 438{443. AAAI Press/
MIT Press.
Hogg, T., & Williams, C. P. (1994). hardest constraint problems: double phase
transition. Artificial Intelligence, 69, 359{377.
Johnson, D. S. (1974). Approximation algorithms combinatorial problems. Journal
Computer System Sciences, 9, 256{278.
Johnson, D. S., Aragon, C. R., McGeoch, L. A., & Schevon, C. (1991). Optimization
simulated annealing: experimental evaluation; part II, graph coloring number
partitioning. Operations Research, 39 (3), 378{406.
Johnson, D. S., & Trick, M. A. (Eds.). (1996). Cliques, Coloring, Satisfiability: Second
DIMACS Implementation Challenge (1993), Vol. 26. American Mathematical Society.
Kask, K., & Dechter, R. (1995). GSAT local consistency. Mellish, C. S. (Ed.),
IJCAI-95 : Proceedings Fourteenth International Joint Conference Artificial
Intelligence, pp. 616{622 San Mateo, CA. Morgan Kaufmann.
Kocay, W. (1992). extension multi-path algorithm finding Hamilton cycles.
Discrete Mathematics, 101, 171{188.
Komlos, M., & Szemeredi, E. (1983). Limit distribution existence Hamilton
cycle random graph. Discrete Mathematics, 43, 55{63.
Langley, P. (1992). Systematic nonsystematic search strategies. Artificial Intelligent
Planning Systems: Proceedings First International Conference, pp. 145{152.
Martello, S. (1983). Algorithm 595: enumerative algorithm finding Hamiltonian
circuits directed graph. ACM Transactions Mathematical Software, 9 (1),
131{138.
Mitchem, J. (1976). various algorithms estimating chromatic number graph.
Computer Journal, 19, 182{183.
Motwani, R., & Raghavan, P. (1995). Randomized Algorithms. Cambridge University Press,
New York.
Olariu, S., & Randall, J. (1989). Welsh-Powell opposition graphs. Information Processing
Letters, 31 (1), 43{46.
Palmer, E. M. (1985). Graphical Evolution: introduction theory random graphs.
John Wiley & Sons, Toronto.
Posa, L. (1976). Hamiltonian circuits random graphs. Discrete Mathematics, 14, 359{364.
244

fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem

Robinson, R. W., & Wormald, N. C. (1994). Almost regular graphs Hamiltonian.
Random Structures Algorithms, 5 (2), 363{374.
Selman, B., Levesque, H., & Mitchell, D. (1992). new method solving hard satisfiability
problems. Proceedings Tenth National Conference Artificial Intelligence
(AAAI-92), San Jose, CA, pp. 440{446.
Shufelt, J. A., & Berliner, H. J. (1994). Generating Hamiltonian circuits without backtracking errors. Theoretical Computer Science, 132, 347{375.
Spinrad, J. P., & Vijayan, G. (1985). Worst case analysis graph coloring algorithm.
Discrete Applied Mathematics, 12 (1), 89{92.
Vandegriend, B. (1998). Finding Hamiltonian cycles: Algorithms, graphs performance.
Master's thesis, Department Computing Science, University Alberta. Online
\http://www.cs.ualberta.ca/~basil/".
Wormald, N. C. (1984). Generating random regular graphs. Journal Algorithms, 5,
247{280.

245


