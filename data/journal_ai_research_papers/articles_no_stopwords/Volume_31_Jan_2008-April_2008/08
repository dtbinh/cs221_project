journal artificial intelligence

submitted published

modular reuse ontologies theory practice
bernardo cuenca grau
ian horrocks
yevgeny kazakov

berg comlab ox ac uk
ian horrocks comlab ox ac uk
yevgeny kazakov comlab ox ac uk

oxford university computing laboratory
oxford ox qd uk

ulrike sattler

sattler cs man ac uk

school computer science
university manchester
manchester pl uk

abstract
propose set tasks relevant modular reuse ontologies order formalize tasks reasoning introduce notions
conservative extension safety module general class logic ontology
languages investigate general properties relationships notions
study relationships relevant reasoning previously
identified study computability consider particular description logics dls provide formal underpinning w c web ontology
language owl consider undecidable algorithmically unsolvable description logic underlying owl dl order achieve
practical solution identify conditions sufficient ontology reuse set symbols safelythat without changing meaning provide notion safety
class characterizes sufficient condition safety identify family safety
classescalled localitywhich enjoys collection desirable properties use notion
safety class extract modules ontologies provide modularization appropriate properties particular safety class use
finally practical benefits safety checking module extraction

motivation
ontologiesconceptualizations domain shared community usersplay major role semantic web increasingly used knowledge management
systems e science bio informatics grid applications staab studer
design maintenance reuse integration ontologies complex tasks
software engineers ontology engineers need supported tools methodologies
help minimize introduction errors e ensure ontologies
consistent unexpected consequences order develop support important notions software engineering module black box behavior controlled
interaction need adapted
recently growing interest topic modularity ontology engineering seidenberg rector noy lutz walther wolter cuenca
grau parsia sirin kalyanpur b cuenca grau horrocks kazakov sattler
c

ai access foundation rights reserved

ficuenca grau horrocks kazakov sattler

motivated mentioned application needs
focus use modularity support partial reuse ontologies particular
consider scenario developing ontology p want reuse set
symbols foreign ontology q without changing meaning
example suppose ontology engineer building ontology
projects specifies different types projects according topic
focus ontology engineer charge projects ontology p may use terms
cystic fibrosis genetic disorder descriptions medical projects
ontology engineer expert projects may unfamiliar however
topics projects cover particular terms cystic fibrosis
genetic disorder order complete projects ontology suitable definitions
medical terms decides reuse knowledge subjects wellestablished medical ontology q
straightforward way reuse concepts construct logical union
p q axioms p q reasonable assume additional knowledge
medical terms used p q implications meaning
projects defined p indeed additional knowledge reused terms provides
information medical projects defined medical terms
less intuitive fact importing q may entailments concerning
reused symbols namely cystic fibrosis genetic disorder since ontology engineer
projects ontology expert medicine relies designers q
expected meaning reused symbols completely specified q
fact symbols used projects ontology p imply
original meaning q changes p change meaning symbols
q say p q conservative extension q
realistic application scenarios often unreasonable assume foreign ontology
q fixed q may evolve beyond control modelers p ontology
engineers charge p may authorized access information q
importantly may decide later time reuse symbols cystic fibrosis
genetic disorder medical ontology q application scenarios
external ontology q may change reasonable abstract particular q
consideration particular given set external symbols fact
axioms p change meaning symbol independent
particular meaning ascribed symbols q case say p safe

moreover even p safely reuses set symbols ontology q may still
case q large ontology particular example foreign medical
ontology may huge importing whole ontology would make consequences
additional information costly compute difficult ontology engineers
charge projects ontology medical experts understand practice
therefore one may need extract module q q includes relevant information ideally module small possible still guarantee capture
meaning terms used answering queries projects
ontology importing module q would give exactly answers whole
medical ontology q imported case importing module


fimodular reuse ontologies theory practice

observable effect projects ontology importing entire ontology furthermore fact q module q independent particular p
consideration
contributions follows
propose set tasks relevant ontology reuse formalize
reasoning end introduce notions conservative extension
safety module general class logic ontology languages
investigate general properties relationships notions
conservative extension safety module use properties study relationships relevant reasoning previously identified
consider description logics dls provide formal underpinning
w c web ontology language owl study computability tasks
tasks consider undecidable algorithmically unsolvable
description logic underlying owl dlthe expressive dialect owl
direct correspondence description logics
consider deciding safety ontology signature given
undecidable owl dl identify sufficient conditions safety
decidable owl dlthat ontology satisfies conditions
safe converse however necessarily hold propose
notion safety class characterizes sufficiency condition safety
identify family safety classescalled localitywhich enjoys collection desirable
properties
next apply notion safety class task extracting modules
ontologies provide modularization appropriate
properties particular safety class use
present empirical evidence practical benefits techniques safety
checking module extraction
extends previous work cuenca grau horrocks kutz
sattler cuenca grau et al cuenca grau horrocks kazakov sattler

preliminaries
section introduce description logics dls baader calvanese mcguinness
nardi patel schneider family knowledge representation formalisms
underlie modern ontology languages owl dl patel schneider hayes horrocks hierarchy commonly used description logics summarized table
syntax description logic l given signature set constructors
signature vocabulary sg dl disjoint union countably infinite sets ac
atomic concepts b representing sets elements ar atomic roles r
representing binary relations elements ind individuals b c representing constants assume signature fixed every dl


ficuenca grau horrocks kazakov sattler

dls

constructors
con
c u c r c
pp c
pp

axioms ax
tbox
abox
c c v c c r b
pp
pp
pp
pp

rol
rbox
el
r
alc pp
pp
trans r

r
h
r v r
f
funct r
n
n
q
n c


r ar ac b ind r rol c con n rol simple
role see horrocks sattler
table hierarchy standard description logics

every dl provides constructors defining set rol general roles r
set con general concepts c set ax axioms
union role axioms rbox terminological axioms tbox assertions abox
el baader brandt lutz simple description logic allows one
construct complex concepts conjunction c u c existential restriction r c
starting atomic concepts roles r top concept el provides role
constructors role axioms thus every role r el atomic tbox axioms
el concept definitions c general concept inclusion axioms gcis
c v c el assertions concept assertions c role assertions r b
assume concept definition c abbreviation two gcis v c
c v
basic description logic alc schmidt schau smolka obtained el
adding concept negation constructor c introduce additional constructors
abbreviations bottom concept shortcut concept disjunction c c
stands c u c value restriction r c stands r c contrast
el alc express contradiction axioms v logic extension
alc additionally atomic roles declared transitive role
axiom trans r
extensions description logics add features inverse roles r indicated
appending letter name logic role inclusion axioms ris r v r h
functional roles funct r f number restrictions n n n qualified
number restrictions n c n q nominals nominals make
possible construct concept representing singleton set nominal concept
individual extensions used different combinations example alco
extension alc nominals shiq extension role hierarchies
dual constructors n n c abbreviations n n c
respectively



fimodular reuse ontologies theory practice

inverse roles qualified number restrictions shoiq dl uses
constructors axiom types presented
modern ontology languages owl description logics certain extent syntactic variants thereof particular owl dl corresponds shoin
horrocks patel schneider van harmelen assume ontology
description logic l finite set axioms l signature
ontology axiom set sig sig atomic concepts atomic roles
individuals occur respectively
main reasoning task ontologies entailment given ontology axiom
check implies logical entailment defined usual tarski style
set theoretic semantics description logics follows interpretation pair
non empty set called domain interpretation
interpretation function assigns every ac subset ai every r ar
binary relation ri every ind element ai note
sets ac ar ind defined interpretation assumed fixed
ontology language dl
interpretation function extended complex roles concepts via dlconstructors follows

c u
r c
c
r








c di
x hx yi ri c
c
hx yi hy xi ri

n r x hx yi ri n
n r c x hx yi ri c n
ai
satisfaction relation interpretation dl axiom read
satisfies model defined follows
c v c iff c c
r v r iff r r

c iff ai c
r b iff hai bi ri

trans r iff x z hx yi ri hy zi ri hx zi ri
funct r iff x z hx yi ri hx zi ri z
interpretation model ontology satisfies axioms
ontology implies axiom written every model given
set interpretations say axiom ontology valid every
interpretation model respectively axiom tautology valid
set interpretations equivalently implied empty ontology
say two interpretations j j j coincide subset
signature notation j j x x j every x
say two sets interpretations j equal modulo notation j
every exits j j j every j j exists
j


ficuenca grau horrocks kazakov sattler

ontology medical projects p
p

genetic disorder project project u focus genetic disorder

p

cystic fibrosis euproject euproject u focus cystic fibrosis

p

euproject v project

p

focus v project

e

project u genetic disorder
u cystic fibrosis v

e

focus cystic fibrosis v focus genetic disorder



ontology medical terms q
cystic fibrosis fibrosis u located pancreas u origin genetic origin
genetic fibrosis fibrosis u origin genetic origin
fibrosis u located pancreas v genetic fibrosis
genetic fibrosis v genetic disorder
defbi gene v immuno protein gene u associated cystic fibrosis
figure reusing medical terminology ontology projects

ontology integration knowledge reuse
section elaborate ontology reuse scenario sketched section
application scenario motivate define reasoning tasks investigated
remainder particular tasks notions conservative
extension section safety sections module section notions
defined relative language l within section assume l ontology
language description logic section define formally class
ontology languages given definitions conservative extensions safety
modules apply convenience reader tasks consider
summarized table
motivating example
suppose ontology engineer charge shoiq ontology projects
specifies different types projects according topic concerned
assume ontology engineer defines two conceptsgenetic disorder project
cystic fibrosis euprojectin ontology p first one describes projects genetic
disorders second one describes european projects cystic fibrosis given
axioms p p figure ontology engineer expert projects
knows example every instance euproject must instance project
concept inclusion axiom p role focus applied instances
project domain axiom p may unfamiliar however topics
projects cover particular terms cystic fibrosis genetic disorder
mentioned p p order complete projects ontology suitable definitions


fimodular reuse ontologies theory practice

medical terms decides reuse knowledge subjects wellestablished widely used medical ontology
suppose cystic fibrosis genetic disorder described ontology q containing axioms figure straightforward way reuse concepts
import p ontology qthat add axioms q axioms p
work extended ontology p q importing additional axioms ontology
may logical consequences example easy see axioms
q imply every instance cystic fibrosis instance genetic disorder
q cystic fibrosis v genetic disorder



indeed concept inclusion cystic fibrosis v genetic fibrosis follows axioms
well axioms follows axioms
inclusion axioms p p ontology p prove
every instance cystic fibrosis euproject instance genetic disorder project
p q cystic fibrosis euproject v genetic disorder project



inclusion however follow p alonethat p ontology
engineer might aware entailment even though concerns terms primary
scope projects ontology p
natural expect entailments imported ontology q
logical consequences terms defined main ontology p
one would expect however meaning terms defined q changes
consequence import since terms supposed completely specified within
q side effect would highly undesirable modeling ontology p since
ontology engineer p might expert subject q supposed
alter meaning terms defined q even implicitly
meaning reused terms however might change import perhaps due
modeling errors order illustrate situation suppose ontology engineer
learned concepts genetic disorder cystic fibrosis ontology q
including inclusion decided introduce additional axioms formalizing
following statements
every instance project different every instance genetic disorder

every instance cystic fibrosis





every
project focus cystic fibrosis focus genetic disorder



note statements thought adding information
projects intuitively change constrain meaning medical
terms
suppose ontology engineer formalized statements ontology
p axioms e e respectively point ontology engineer introduced modeling errors consequence axioms e e correspond
e actually formalizes following statement every instance project different every common instance genetic disorder cystic fibrosis e expresses


ficuenca grau horrocks kazakov sattler

every object focus nothing focus cystic fibrosis
focus genetic disorder kinds modeling errors difficult detect
especially cause inconsistencies ontology
note although axiom e correspond fact still consequence
means constrain meaning medical terms
hand e consequence fact constrains meaning medical
terms indeed axioms e e together axioms p p p imply axioms
concepts cystic fibrosis genetic disorder namely disjointness
p genetic disorder u cystic fibrosis v



entailment proved axiom e equivalent
v focus genetic disorder cystic fibrosis



inclusion p imply every element domain must projectthat
p v project together axiom e implies
axioms e e imply statements medical terms
cause inconsistencies used together imported axioms q indeed
obtain p q cystic fibrosis v expresses inconsistency
concept cystic fibrosis
summarize seen importing external ontology lead undesirable
side effects knowledge reuse scenario entailment axioms even inconsistencies involving reused vocabulary next section discuss formalize
effects consider undesirable
conservative extensions safety ontology
argued previous section important requirement reuse ontology q
within ontology p p q produces exactly logical consequences
vocabulary q q alone requirement naturally formulated
well known notion conservative extension recently investigated context ontologies ghilardi lutz wolter lutz et al
definition deductive conservative extension let two lontologies signature l say deductive conservative extension
w r l every axiom l sig iff
say deductive conservative extension w r l deductive
conservative extension w r l sig

words ontology deductive conservative extension
signature language l every logical consequence constructed
language l symbols already logical consequence
additional axioms logical consequences
vocabulary note deductive conservative extension w r l
deductive conservative extension w r l every
notion deductive conservative extension directly applied ontology
reuse scenario


fimodular reuse ontologies theory practice

definition safety ontology given l ontologies say
safe imports safe way w r l deductive conservative
extension w r l

hence first reasoning task relevant ontology reuse scenario formulated
follows


given l ontologies determine safe w r l

shown section given p consisting axioms p p e e q
consisting axioms figure exists axiom cystic fibrosis v
uses symbols sig q q p q according definition
means p q deductive conservative extension q w r language
l expressed e g l alc possible however
axiom e removed p resulting ontology p p e p q
deductive conservative extension q following notion useful proving deductive
conservative extensions
definition model conservative extension lutz et al
let two l ontologies signature l say model
conservative extension every model exists model j
j say model conservative extension model
conservative extension sig

notion model conservative extension definition seen semantic
counterpart notion deductive conservative extension definition latter
defined terms logical entailment whereas former defined terms
intuitively ontology model conservative extension every model
one model domain interprets symbols
way notion model conservative extension however provide
complete characterization deductive conservative extensions given definition
notion used proving ontology deductive conservative
extension another vice versa
proposition model vs deductive conservative extensions lutz et al
every two l ontologies signature l model
conservative extension deductive conservative extension
w r l
exist two alc ontologies deductive conservative
extension w r alc model conservative extension
example consider ontology p consisting axioms p p e ontology
q consisting axioms figure demonstrate p q deductive
conservative extension q according proposition sufficient p q
model conservative extension q every model q exists model
j p q j sig q


ficuenca grau horrocks kazakov sattler

required model j constructed follows take j identical except interpretations atomic concepts genetic disorder project
cystic fibrosis euproject project euproject atomic role focus
interpret j empty set easy check axioms p p e
satisfied j hence j p moreover since interpretation symbols q
remains unchanged sig q j sig q j q hence p q model
conservative extension q
example statement proposition refer interested reader
literature lutz et al p

safety ontology signature
far ontology reuse scenario assumed reused ontology q fixed
axioms q copied p import practice however
often convenient keep q separate p make axioms available demand
via reference makes possible continue developing p q independently
example ontology engineers project ontology p may willing depend
particular version q may even decide later time reuse medical terms
cystic fibrosis genetic disorder another medical ontology instead therefore
many application scenarios important develop stronger safety condition p
depends little possible particular ontology q reused order
formulate condition abstract particular ontology q imported
focus instead symbols q reused
definition safety signature let l ontology signature l
say safe w r l every l ontology sig sig
safe w r l deductive conservative extension
w r l

intuitively knowledge reuse scenario ontology safe signature w r
language l imports safe way ontology written l shares
symbols associated reasoning formulated
following way


given l ontology signature l
determine safe w r l

seen section ontology p consisting axioms p p e e figure
import q consisting axioms figure safe way l alc
according definition since sig p sig q cystic fibrosis genetic disorder
ontology p safe w r l
fact possible stronger namely ontology containing
axiom e safe cystic fibrosis genetic disorder w r l alc consider
ontology v cystic fibrosis genetic disorder v
since e equivalent axiom easy see inconsistent indeed e
imply contradiction v entailed hence
deductive conservative extension definition since sig sig
means safe


fimodular reuse ontologies theory practice

clear one could prove ontology safe signature simply
ontology sig sig deductive conservative
extension clear however one could prove safe
turns notion model conservative extensions used purpose
following lemma introduces property relates notion model conservative
extension notion safety signature intuitively says notion
model conservative extension stable expansion axioms provided
share symbols original ontologies
lemma let l ontologies signature l
model conservative extension sig sig
model conservative extension sig
proof order oo model conservative extension according
definition let model construct model j
j

since model conservative extension model definition
exists model j j let j interpretation
j sig j sig j since sig sig sig
sig sig j interpretation j exists since
j sig j sig j j since j sig
j hence j j proves
lemma allows us identify condition sufficient ensure safety ontology
signature
proposition safety signature vs model conservative extensions
let l ontology signature l model conservative
extension empty ontology every interpretation exists
model j j safe w r l
proof order prove safe w r l according definition take
shoiq ontology sig sig need demonstrate
deductive conservative extension w r l

indeed lemma since model conservative extension
sig sig oo model conservative extension
sig particular since sig deductive
conservative extension required prove
example let p ontology consisting axioms p p e figure
p safe cystic fibrosis genetic disorder w r l shoiq
proposition order prove safety p sufficient demonstrate p
model conservative extension empty ontology every interpretation
exists model j p j
consider model j obtained example shown example j
model p sig q j sig q q consists axioms figure
particular since sig q j



ficuenca grau horrocks kazakov sattler

extraction modules ontologies
example figure medical ontology q small well established medical
ontologies however large may describe subject matters designer p interested example medical ontology q could contain information
genes anatomy surgical techniques etc
even p imports q without changing meaning reused symbols processing
browsing reasoning etcthe resulting ontology p q may considerably
harder processing p alone ideally one would extract hopefully small fragment q external medical ontologya modulethat describes concepts
reused p
intuitively answering arbitrary query signature p importing
module q give exactly answers whole ontology q
imported
definition module ontology let l ontologies
say module w r l deductive conservative
extension sig w r l

task extracting modules imported ontologies ontology reuse scenario
thus formulated follows


given l ontologies
compute module w r l

example consider ontology p consisting axioms p p e ontology q
consisting axioms figure recall axiom consequence axioms well axioms ontology q
fact sets axioms actually minimal subsets q imply particular
subset q q consisting axioms q
demonstrated p q deductive conservative extension q particular
p q according definition q module p q w r
l alc extensions since p q deductive conservative extension
p q w r l alc sig p indeed p q sig p q
similarly one subset q imply module q
w r p
hand possible subsets q
q q modules p q w r l shoiq definition need demonstrate p q deductive conservative extension
p q p q sig p w r l usual demonstrate stronger
fact p q model conservative extension p q p q
sufficient claim proposition
order p q model conservative extension p q
sig p consider model p q need construct model j p q
j let j defined exactly except interpretations
atomic concepts fibrosis pancreas genetic fibrosis genetic origin defined
interpretation cystic fibrosis interpretations atomic roles located


fimodular reuse ontologies theory practice

origin defined identity relation easy see axioms
satisfied j since modify interpretation symbols p j
satisfies axioms p moreover j model genetic fibrosis
genetic disorder interpreted j cystic fibrosis genetic disorder
model q implies concept inclusion cystic fibrosis v genetic disorder
hence constructed model j p q j thus p q
model conservative extension p q
fact construction works replace q subset q implies
particular p q model conservative extension p q way
demonstrated modules p q exactly subsets q imply


implementing task used extracting module
ontology q imported p prior performing reasoning terms p however
ontology p modified module extracted since module q
p q might necessarily module modified ontology since extraction
modules potentially expensive operation would convenient extract
module reuse version ontology p reuses specified
symbols q idea motivates following definition
definition module signature let l ontologies
signature l say module module w r
l every l ontology sig sig module
w r l

intuitively notion module signature uniform analog notion
module ontology similar way notion safety signature uniform
analog safety ontology reasoning task corresponding definition
formulated follows


given l ontology signature l
compute module

continuing example possible demonstrate subset q implies
axiom fact module cystic fibrosis genetic disorder q
imported instead q every ontology shares q symbols
order prove use following sufficient condition notion model
conservative extension
proposition modules signature vs model conservative extensions
let l ontologies signature l model
conservative extension module w r l
proof order prove module w r l according definition
take shoiq ontology sig sig need demonstrate
module w r l according definition
deductive conservative extension w r l sig



ficuenca grau horrocks kazakov sattler

indeed lemma since model conservative extension sig
sig model conservative extension
sig particular since sig deductive
conservative extension w r l required prove
example let q example demonstrate subset q q
implies module cystic fibrosis genetic disorder q according
proposition sufficient demonstrate q model conservative extension
q every model q exists model j q j
easy see model j constructed example required
property holds

note module signature q necessarily contain axioms
contain symbols example module q consisting axiom
q contain axiom mentions atomic concept cystic fibrosis
note even minimal module q might still axioms
mention symbols
minimal modules essential axioms
one usually interested extracting arbitrary modules reused ontology
extracting modules easy process afterwards ideally extracted modules
small possible hence reasonable consider extracting
minimal modules modules contain module subset
examples demonstrate minimal module ontology signature
necessarily unique ontology q consisting axioms two minimal modules q q ontology p p p p e
well signature cystic fibrosis genetic disorder since minimal sets axioms imply axiom cystic fibrosis v genetic disorder depending
application scenario one consider several variations tasks computing minimal modules applications might necessary extract minimal
modules whereas others minimal module suffices
axioms occur minimal module q essential p
removed every module q thus never need imported
p true axioms occur minimal modules q might
necessary import axioms p order lose essential information q
arguments motivate following notion
definition essential axiom let l ontologies signature
axiom l say essential w r l contained
minimal module w r l say essential axiom w r
l essential contained minimal module w r l
example axioms q essential ontology p
signature cystic fibrosis genetic disorder axiom essential
certain situations one might interested computing set essential axioms
ontology done computing union minimal modules note


fimodular reuse ontologies theory practice

notation

input

task

checking safety


l

check safe w r l



l

check safe w r l

extracting union minimal module
u

l

extract modules w r l

u

l

extract modules w r l

ontologies signature l
table summary reasoning tasks relevant ontology integration reuse
computing union minimal modules might easier computing minimal
modules since one need identify axiom belongs minimal module
table summarized reasoning tasks found potentially relevant
ontology reuse scenarios included variants sm um
task sm um task computation minimal modules
discussed section
variants tasks could considered relevant ontology reuse
example instead computing minimal modules one might interested computing
modules smallest number axioms modules smallest size measured
number symbols complexity measure ontology theoretical
present easily extended many reasoning
tasks
safety modules general ontology languages
notions introduced section defined respect ontology language
far however implicitly assumed ontology languages description
logics defined section fragments dl shoiq notions considered section applied however much broader class ontology languages
definitions apply ontology language notion entailment axioms
ontologies mechanism identifying signatures
definition ontology language tuple l sg ax sig sg set
signature elements vocabulary l ax set axioms l sig function
assigns every axiom ax finite set sig sg called signature
entailment relation sets axioms ax axioms ax written
ontology l finitesset axioms ax extend function sig
ontologies follows sig sig

definition provides general notion ontology language language l
given set symbols signature set formulae axioms constructed
symbols function assigns formula signature entailment
relation sets axioms ontology language owl dl well description


ficuenca grau horrocks kazakov sattler

logics defined section examples ontology languages accordance definition
examples ontology languages first order logic second order logic logic
programs
easy see notions deductive conservative extension definition safety
definitions modules definitions well reasoning tasks
table well defined every ontology language l given definition
definition model conservative extension definition propositions involving
model conservative extensions propositions extended
languages standard tarski model theoretic semantics higher order logic
simplify presentation however formulate general requirements
semantics ontology languages assume deal sublanguages shoiq
whenever semantics taken account
remainder section establish relationships different
notions safety modules arbitrary ontology languages
proposition safety vs modules ontology let l ontology language
let ontologies l
safe w r l iff empty ontology module w r l
safe module w r l
proof definition safe w r l iff deductive conservative
extension w r l definition empty ontology module
w r l iff b deductive conservative extension w r l
sig easy see b
definition safe w r l iff c
deductive conservative extension w r l particular deductive
conservative extension w r l sig implies definition
module w r l
provide analog proposition notions safety modules
signature
proposition safety vs modules signature let l ontology language
ontologies l subset signature l
safe w r l iff empty ontology module w r l
safe sig w r l module w r l
proof definition safe w r l iff every sig sig
case safe w r l definition module
w r l iff b every sig sig case
module w r l claim proposition easy see
equivalent b
definition safe sig w r l iff c every
sig sig sig safe w r l


fimodular reuse ontologies theory practice

definition module w r l iff every sig sig
module w r l
order prove c implies let sig sig need
demonstrate module w r l







let note sig sig sig sig sig
sig sig sig sig hence c safe
w r l implies claim proposition module
w r l

undecidability complexity
section study computational properties tasks table ontology
languages correspond fragments description logic shoiq demonstrate
reasoning tasks algorithmically unsolvable even relatively inexpressive dls computationally hard simple dls
since notions modules safety defined section notion
deductive conservative extension reasonable identify un decidability
complexity conservative extensions applicable reasoning tasks table computational properties conservative extensions recently studied
context description logics given language l
deciding whether deductive conservative extension w r l exptimecomplete l alc ghilardi et al extended lutz et al
showed exptime complete l alciq undecidable l alciqo recently studied simple dls
shown deciding deductive conservative extensions exptime complete
l el lutz wolter immediately applied notions
safety modules ontology
proposition given ontologies l determining whether
safe w r l exptime complete l el exptime complete
l alc l alciq undecidable l alciqo given ontologies
l determining whether module
exptime complete l el exptime complete l alc l alciq
undecidable l alciqo
proof definition ontology safe w r l iff deductive
conservative extension w r l definition ontology module
w r l deductive conservative extension sig w r
l hence checking deductive conservative extensions reused
checking safety modules
conversely demonstrate checking safety modules
used checking deductive conservative extensions indeed deductive conservative
extension w r l iff safe w r l iff claim proposition
module w r l



ficuenca grau horrocks kazakov sattler

corollary exist performing tasks u table
l el l alciq run exptime exptime respectively
performing tasks u table l alciqo
proof task corresponds directly checking safety ontology
given definition
suppose exptime given ontologies

determines whether module w r l alciq demonstrate
used solve reasoning tasks sm um
l alciq exptime indeed given ontologies one enumerate
subsets check exptime subsets modules
w r l determine modules minimal return
one union depending reasoning task
finally prove solving reasoning tasks sm um
easier checking safety ontology indeed claim proposition
ontology safe w r l iff module w r l note
empty ontology module w r l iff minimal
module w r l
demonstrated reasoning tasks u computationally
unsolvable dls expressive alcqio exptime hard alc
remainder section focus computational properties reasoning
tasks u related notions safety modules signature
demonstrate reasoning tasks undecidable dls expressive
alco
theorem undecidability safety signature checking
whether ontology consisting single alc axiom safe signature undecidable w r l alco
proof proof variation construction undecidability deductive conservative extensions alcqio lutz et al reduction domino tiling

domino system triple h v k finite set tiles
h v horizontal vertical matching relations solution domino
system mapping ti j assigns every pair integers j element
hti j ti j h hti j ti j v periodic solution domino system
solution ti j exist integers n called periods
ti j ti j ti j n ti j every j
let set domino systems ds subset admit solution
dps subset ds admit periodic solution well known borger gradel
gurevich theorem sets ds dps recursively inseparable
recursive e decidable subset domino systems
dps ds
use property reduction domino system construct
signature ontology consists single alc axiom



fimodular reuse ontologies theory practice

q

v ak

k

q

u v
f
v rh ht ih
f
v rv ht iv

k

q
q

tk
tk

figure ontology otile otile expressing tiling conditions domino system
solution safe w r l alco

b periodic solution safe w r l alco
words set consisting domino systems
safe w r l alco dps ds since ds dps
recursively inseparable implies undecidability hence
checking safe w r l alco otherwise one use
deciding membership
signature ontology constructed follows given
domino system h v let consist fresh atomic concepts every
two atomic roles rh rv consider ontology otile figure constructed note
sig otile axioms otile express tiling conditions domino system
namely q q express every domain element assigned unique tile
q q express every domain element horizontal vertical matching
successors
let atomic role b atomic concept b
let


hf
v
ci vdi otile ci u di rh rv b u rv rh b
say rh rv commute interpretation domain
elements b c ha bi rh hb rv ha ci rv
hc rh following claims easily proved
claim

otile model rh rv commute solution

indeed model otile used guide construction solution
ti j follows every j construct ti j inductively together elements
ai j hai j ai j rv hai j ai j rh set element

suppose ai j j constructed since model axioms q
q figure unique k ai j set
ti j since model axioms q q ai j exist b c
hai j bi rh hai j ci rv ht h ht v b
c case assign ai j b ai j c ti j ti j
note values ai j ti j assigned two times ai j ti j
constructed ai j ai j however since rv rh commute value


ficuenca grau horrocks kazakov sattler

ai j unique q value ti j unique easy see
ti j solution
claim

model otile rh rv commute

indeed easy see otile v rh rv b u rv rh b hence
model otile exist b c hx ai si
every x ha bi rh hb rv b ha ci rv hc rh
b implies rh rv commute
finally demonstrate satisfies properties b
order prove property use sufficient condition safety given proposition demonstrate solution every interpretation
exists model j j proposition imply safe
w r l
let arbitrary interpretation since solution contra positive
claim model otile rh rv commute
demonstrate cases construct required model j
j
case model otile exists axiom ci v di
otile ci v di exists domain element
cii dii let us define j identical except interpretation
atomic role define j sj hx ai x since interpretations
symbols remained unchanged cij dij j v
ci u dj implies j constructed model j
j
case suppose rh rv commute means
exist domain elements b c ha bi rh hb rv
ha ci rv hc rh let us define j identical except
interpretation atomic role atomic concept b interpret j
sj hx ai x interpret b j b j note rh rv b j
rv rh b j since j v rh rv b u rv rh b
implies j thus constructed model j
j
order prove property b assume periodic solution ti j
periods n demonstrate safe w r l purpose
construct alco ontology sig sig v
v imply safe w r l alco hence
safe w r l alco
define every model finite encoding periodic solution ti j
periods n every pair j j n introduce
fresh individual ai j define extension otile following axioms
p ai j v rv ai j

p ai j v rv ai j



mod

p ai j v rh ai j

p ai j v rh ai j
j j
f
p v im jn ai j

mod n



fimodular reuse ontologies theory practice

purpose axioms p p ensure rh rv commute every model
easy see model corresponding every periodic solution
periods n hence v hand claim since contains
otile every model rh rv commute possible
v
direct consequence theorem proposition undecidability
checking whether subset ontology module signature
corollary given signature alc ontologies
determining whether module w r l alco undecidable
proof claim proposition safe w r l module
w r l hence recognizing modules signature l used
checking ontology safe signature l
corollary perform tasks u l
alco
proof theorem directly implies task since task
corresponds checking safety signature
solving reasoning tasks sm um l least hard
checking safety ontology since claim proposition ontology
safe w r l iff minimal module w r l

sufficient conditions safety
theorem establishes undecidability checking whether ontology expressed
owl dl safe w r signature undecidability discouraging leaves
us two alternatives first could focus simple dls
decidable alternatively could look sufficient conditions notion safety
ontology satisfies conditions guarantee safe
converse however necessarily hold
remainder focuses latter go
however worth noting theorem still leaves room investigating former
indeed safety may still decidable weaker description logics el
even expressive logics shiq case shiq however existing
lutz et al strongly indicate checking safety likely exponentially
harder reasoning practical may hard design said
follows focus defining sufficient conditions safety use practice
restrict owl dlthat shoiqontologies
safety classes
general sufficient condition safety defined giving signature
set ontologies language satisfy condition signature
ontologies guaranteed safe signature consideration
intuitions lead notion safety class


ficuenca grau horrocks kazakov sattler

definition class ontologies safety class class ontologies language
l function assigns every subset signature l subset
ontologies l class anti monotonic implies
compact sig subset closed
implies union closed implies

safety class called sufficient condition safety ontology language l
class ontologies l case
ii ontology safe l

intuitively class ontologies collection sets ontologies parameterized
signature safety class represents sufficient condition safety ontology
safe w l g assume empty ontology belongs
every safety class every signature follows whenever ontology belongs
safety class given signature safety class clear context
sometimes say passes safety test
safety classes may admit many natural properties given definition antimonotonicity intuitively means ontology proved safe w r
sufficient condition proved safe w r every subset
compactness means sufficient consider common elements sig
checking safety subset closure union closure means satisfy
sufficient condition safety every subset union satisfies
condition
locality
section introduce family safety classes l shoiq
semantic properties underlying notion model conservative extensions section
seen according proposition one way prove safe
model conservative extension empty ontology
following definition formalizes classes ontologies called local ontologies
safety proved proposition
definition class interpretations locality given shoiq signature
say set interpretations local w r every shoiq interpretation
exists interpretation j j
class interpretations function given shoiq signature returns set
interpretations local local w r every monotonic
implies compact every
symmetric difference sets
defined
given class interpretations say class ontologies
every set ontologies valid local
say class local ontologies every every
say local




fimodular reuse ontologies theory practice

r
example let ia
class shoiq interpretations defined follows given
r
signature set ia consists interpretations j rj every atomic
r
role r
aj every atomic concept
easy ia



local every since every interpretation interpretation
j j j defined j rj r
aj
x j x
r
r
r
remaining symbols x j ia j since ia
ia

r
r
every case ia monotonic ia compact since
r
r
defined differently
ia
every sets interpretations ia
elements
r
r
given signature set axa
axioms local w r ia

r
consists axioms every j ia case j
r
r
r

iff axa
defined oa
class local ontologies ia


proposition locality implies safety let class ontologies shoiq
local class interpretations subset closed union closed
safety class l shoiq additionally monotonic anti monotonic
compact compact
proof assume class ontologies definition
every shoiq signature iff valid iff j every
interpretation j since local class interpretations
every shoiq interpretation exists j j hence
every every shoiq interpretation model j
j implies proposition safe w r l shoiq thus
safety class
fact subset closed union closed follows directly definition
since iff valid iff valid iff
monotonic every
implies valid implies valid
implies hence anti monotonic
compact every
hence every sig valid
iff valid iff particular iff
sig since sig sig sig sig hence
compact
r
corollary class ontologies oa
defined example anti monotonic
compact subset closed union closed safety class

example recall example section demonstrated ontology
p q given figure p p p e deductive conservative extension
q cystic fibrosis genetic disorder done showing every
interpretation expanded model j axioms p p e interpreting
symbols sig p empty set terms example means


ficuenca grau horrocks kazakov sattler

r
r
p oa
since oa
class local ontologies proposition ontology
p safe w r l shoiq


proposition example suggest particular way proving safety ontologies given shoiq ontology signature sufficient check whether
r
whether every axiom satisfied every interpretation
oa
r
ia property holds must safe according proposition
turns notion provides powerful sufficiency test safety works
surprisingly well many real world ontologies shown section next
section discuss perform test practice
testing locality
r
section focus detail safety class oa
introduced example ambiguity arise refer safety class simply locality
r
definition axa
given example easy see axiom
r
local w r ia satisfied every interpretation fixes interpretation atomic roles concepts outside empty set note defining
locality fix interpretation individuals outside principle
could done reason elegant way describe interpretations
namely every individual needs interpreted element domain
canonical element every domain choose
order test locality w r sufficient interpret every atomic concept
atomic role empty set check satisfied interpretations
remaining symbols observation suggests following test locality

proposition testing locality given shoiq signature concept c axiom
ontology let c defined recursively follows
c




c u c
c
r c
n r c



otherwise

c u c
c
sig r otherwise r c
sig r otherwise n r c

c v c c v c
r v r v sig r otherwise
r v sig r otherwise r v r
c
c
r b
v r
otherwise r b
trans r v r
otherwise trans r
funct r v sig r otherwise funct r





notion locality exactly one used previous work cuenca grau et al




b
c

e
f
g
h

j
k
l

n

fimodular reuse ontologies theory practice

r
oa
iff every axiom tautology

proof easy check every atomic concept atomic role r c
r words atomic concepts roles
eliminated transformation easy induction every
r
interpretation ia
c c iff hence
r
axiom local w r iff every interpretation ia
iff
r
every sig interpretation ia iff tautology
example let ontology consisting axiom figure
demonstrate proposition local w r fibrosis genetic origin
local w r genetic fibrosis origin
indeed according proposition order check whether local w r
sufficient perform following replacements symbols underlined



f
b


z


z
genetic fibrosis fibrosis u origin genetic origin



similarly order check whether local w r sufficient perform
following replacements symbols underlined
b
b


z
z
genetic fibrosis fibrosis u origin genetic origin



first case obtain fibrosis u shoiq tautology
hence local w r hence proposition safe w r shoiq
second case genetic fibrosis u origin shoiq
tautology hence local w r

tractable approximation locality
one important conclusions proposition one use standard capabilities available dl reasoners fact tsarkov horrocks racer
moller haarslev pellet sirin parsia kaon motik testing
locality since reasoners among things allow testing dl tautologies checking tautologies description logics theoretically difficult e g
dl shoiq known nexptime complete tobies however
several reasons believe locality test would perform well practice primary
reason sizes axioms need tested tautologies usually
relatively small compared sizes ontologies secondly modern dl reasoners
highly optimized standard reasoning tasks behave well realistic ontologies
case reasoning costly possible formulate tractable approximation
locality conditions shoiq
recall constructors c c r c n r c assumed expressed
c u c r c n r c hence particular every role r sig r occurs
r c n r c r v r r v r trans r funct r hence eliminated atomic
concepts
eliminated likewise note necessarily case sig
since may still contain individuals occur



ficuenca grau horrocks kazakov sattler

definition syntactic locality shoiq let signature following
grammar recursively defines two sets concepts con con signature
con c c u c c u c r c r c n r c n r c
con c c u c

atomic concept r possibly inverse atomic role r
c
con
concept r role c con c
axiom syntactically local w r one following forms r v r
trans r funct r c v c c v c c denote
r
axa
set shoiq axioms syntactically local w r
r
shoiq ontology syntactically local w r axa
denote
r
oa set shoiq ontologies syntactically local w r

intuitively syntactic locality provides simple syntactic test ensure axiom
r
satisfied every interpretation ia
easy see inductive definitions


con con definition every interpretation
r
ia
case c c every c con

c con hence every syntactically local axiom satisfied every interpretation
r
ia
obtain following conclusion
r
r
proposition axa
axa


shown safety class shoiq syntactic locality
enjoys properties definition
r
proposition class syntactically local ontologies oa
given definition
anti monotonic compact subset closed union closed safety class
r
r
safety class proposition anti monotonicity oa

proof oa



shown induction proving con con con con
r
r
axa
axa
one induction
r
r
r
r


axa iff axa sig oa
compact since oa

r
r

iff axa oa subset closed union closed

example example continued easy see axiom figure
syntactically local w r fibrosis genetic origin indicate sub concepts
con



con matches
con matches r c
z


z


genetic fibrosis fibrosis u origin genetic origin


z

con matches c u c

easy similar way axioms p p e figure syntactically local w r cystic fibrosis genetic disorder hence ontology p
p p e considered example syntactically local w r



fimodular reuse ontologies theory practice

r
ia

r

r
ia

r
ia

rid
ia

rj

aj

r
ia





r
ia




r
ia




rid
ia

j j
hx xi x j

r

rj

aj



j

j j
hx xi x j

j
j

table examples different local classes interpretations
converse proposition hold general since semantically
local axioms syntactically local example axiom v b
local w r every since tautology hence true every interpretation
hand easy see syntactically local w r b according
definition since involves symbols another example tautology
gci r v r b axiom semantically local w r r since
r v r tautology syntactically local examples
limitation syntactic notion locality inability compare different
occurrences concepts given signature syntactic locality
detect tautological axioms reasonable assume however tautological axioms
occur often realistic ontologies furthermore syntactic locality checking
performed polynomial time matching axiom according definition
proposition exists given shoiq ontology sigr
nature determines whether oa
whose running time polynomial
number symbols occurring respectively
locality classes
r
locality condition given example class local interpretations ia

particular example locality used testing safety classes
local interpretations constructed similar way fixing interpretations
elements outside different values table listed several classes
local interpretations fix interpretation atomic roles outside
empty set universal relation identity relation id
interpretation atomic concepts outside empty set set
elements
local class interpretations table defines corresponding class local
ontologies analogously example table listed classes together
examples typical types axioms used ontologies axioms assumed
extension project ontology figure indicate axioms
local w r locality conditions assuming usual symbols
underlined
seen table different types locality conditions appropriate
r
different types axioms locality condition ia
captures domain
axiom p definition p disjointness axiom p functionality axiom p

assume numbers number restrictions written binary coding



ficuenca grau horrocks kazakov sattler

r


r


rid


r


r


rid


























p project u bio medicine v













p funct focus













p human genome project













p focus human genome gene



























ax

axiom

p focus v project
p

e

biomedical project project u
u focus bio medicine

focus cystic fibrosis v
v focus cystic fibrosis

table comparison different types locality conditions

neither assertions p p since individuals human genome gene prevent
us interpreting atomic role focus atomic concept project empty
r
atomic roles concepts outside
set locality condition ia
interpreted largest possible sets capture assertions generally
poor types axioms example functionality axiom p captured
locality condition since atomic role focus interpreted universal
relation necessarily functional order capture functionality
rid rid every atomic role outside
axioms one use locality ia

interpreted identity relation id interpretation domain note
modeling error e local given locality conditions note
possible come locality condition captures axioms p p since
p p together imply axiom human genome u bio medicine v
uses symbols hence every subset p containing p p safe
w r cannot local w r
might possible come testing locality conditions
classes interpretation table similar ones presented proposition
r
example locality class ia
tested proposition
case definition c replaced following



otherwise



r
rid checking
remaining classes interpretations ia
ia
locality however straightforward since clear eliminate
universal roles identity roles axioms preserve validity respective
classes interpretations
still easy come tractable syntactic approximations locality
conditions considered section similar manner done section idea used definition namely define two sets
con con concepts signature interpreted empty



fimodular reuse ontologies theory practice

con c c u c c u c

con c c u c

r c n r c

r
ia



r
ia



r
ia


r c n r c

r
ia


r c n r c

rid
ia

rid c rid c

rid
ia

rid c

r c v c c v c c
axa
r
ia


r v r trans r funct r

r
ia


r v r trans r r b

rid
ia

trans rid funct rid


r r rid
sig r sig r sig rid
con
c con c
c concept r role

figure syntactic locality conditions classes interpretations table
set respectively every interpretation class see situations dl constructors produce elements sets figure gave recursive
r correspond classes r
definitions syntactically local axioms axa

interpretations table cases recursive definitions present
indicated classes interpretations
combining extending safety classes
previous section gave examples several safety classes different local
classes interpretations demonstrated different classes suitable different
types axioms order check safety ontologies practice one may try apply
different sufficient tests check succeeds obviously gives
powerful sufficient condition safety seen union safety classes
used tests
formally given two classes ontologies union
class ontologies defined easy see definition
safety classes union safety
class moreover safety classes anti monotonic subset closed
union anti monotonic respectively subset closed well unfortunately unionclosure property safety classes preserved unions demonstrated
following example
r
r
example consider union oa
oa
two classes local ontologies
r
r
oa oa defined section safety class union closed since
example ontology consisting axioms p p table satisfies first
locality condition ontology consisting axioms p p satisfies second locality
condition union satisfies neither first second locality condition
fact even safe shown section


shown proposition every locality condition gives union closed safety class
however seen example union safety classes might longer unionclosed one may wonder locality classes already provide powerful sufficient


ficuenca grau horrocks kazakov sattler

conditions safety satisfy desirable properties definition surprisingly
case certain extent locality classes considered section
definition maximal union closed safety class safety class extends
safety class every safety class maximal unionclosed language l union closed every union closed safety class
extends every l implies

r
r
proposition classes local ontologies oa
oa
defined section
maximal union closed safety classes l shiq

proof according definition safety class maximal union closed
language l exists signature ontology l

ii safe w r l iii every p case p
safe w r l every ontology q l sig q sig p
case p q deductive conservative extension q demonstrate
r
r
possible oa
oa

r
first consider case oa modify proof
r
case oa

let ontology l satisfies conditions iii define ontologies
p q follows take p consist axioms v r v every atomic
r
concept atomic role r sig easy see p oa
take q
consist tautologies form v v r every r note
sig p sig q claim p q deductive sig q conservative
extension q

r
intuitively ontology p chosen way p oa
p q
r
ia
q ontology implies nothing tautologies
uses atomic concepts roles
r
r
since
oa
exists axiom
axa
let
defined proposition shown proof
r
proposition iff every ia
since p q
r
ia case p q proposition since
r
contain individuals sig sig q since
axa

tautology thus q hence definition p q deductive
sig q conservative extension q
r
oa
proof repeated taking p consist axioms v
r v r sig modifying discussed
section
difficulties extending proof proposition locality
classes considered section first clear force interpretations roles
universal identity relation shoiq axioms second clear
define function cases see related discussion section note
proof proposition work presence nominals since
guarantee contains symbols see footnote
r
r
p hence probably room extend locality classes oa
oa

l shoiq preserving union closure


fimodular reuse ontologies theory practice

extracting modules safety classes
section revisit extracting modules ontologies shown
corollary section exists general procedure recognize extract
minimal modules signature ontology finite time
techniques described section however reused extracting particular
families modules satisfy certain sufficient conditions proposition establishes
relationship notions safety module precisely subset
module provided safe sig therefore safety class
provide sufficient condition testing modulesthat order prove
module sufficient sig notion
modules property defined follows
definition modules safety class
let l ontology language safety class l given ontology
signature l say om module om
sig om

remark note every safety class ontology signature exists
least one module namely indeed definition empty
ontology belongs every
note follows definition om module iff
om module every sig om

clear according definition procedure checking membership
safety class used directly checking whether om module
order extract module sufficient enumerate possible subsets
ontology check subsets module
practice however possible avoid checking possible subsets
input ontology figure presents optimized version module extraction
procedure manipulates configurations form om ou os represent
partitioning ontology three disjoint subsets om ou os set om
accumulates axioms extracted module set os intended safe w r
sig om set ou initialized contains unprocessed axioms
axioms distributed among om os according rules r r given axiom
ou rule r moves os provided os remains safe w r sig om according
safety class otherwise rule r moves om moves axioms
os back ou since sig om might expand axioms os might become longer
safe w r sig om end process axioms left ou
set om module
rewrite rules r r preserve invariants given figure invariant
states three sets om ou os form partitioning states set os
satisfies safety test sig om w r finally establishes rewrite
rules add elements om add elements os without changing om
words pair om os consisting sizes sets increases lexicographical
order


ficuenca grau horrocks kazakov sattler

input

ontology signature safety class

output

module om
unprocessed


configuration om ou os




module

safe

initial configuration



termination condition ou

rewrite rules
r om ou os om ou os

os sig om

r om ou os om ou os

os sig om

invariants om ou os
om ou os


invariant om ou os om
u


om os lex om


os sig om
figure procedure computing modules safety class
proposition correctness procedure figure let safety
class ontology language l ontology l signature l
procedure figure input terminates returns module om
additionally anti monotonic subset closed union closed
unique minimal module procedure returns precisely
minimal module
proof procedure rewrite rules figure terminates
following reasons every configuration derived rewrite rules sets om
ou os form partitioning see invariant figure therefore size
every set bounded ii rewrite step om os increases lexicographical
order see invariant figure additionally ou possible
apply one rewrite rules r r hence procedure terminates
ou upon termination invariant figure partitioned om os
invariant os sig om implies definition om
module
suppose addition anti monotonic subset closed union module demonstrate
closed safety class suppose om
induction every configuration om ou os derivable rewrite
prove module computed
rules r r case om om
procedure subset every module hence smallest
module
rewrite rule r change
indeed base case om om
set om rewrite rule r om ou os om ou os
os sig om



fimodular reuse ontologies theory practice

input ontology signature safety class
output module om
initial configuration



termination condition ou

rewrite rules
r

om ou os om ou os

sig om

r om ou os os om ou os os sig om
sig os sig sig om
figure optimized procedure computing modules compact subsetclosed union closed safety class

suppose contrary om om




module sig since
since om


since

subset closed sig om
om anti monotonic
sig om since invariant figure os sig om
union closed os sig om contradicts contradiction

implies rule r preserves property om om

claim proposition establishes procedure figure terminates
every input produces module given safety class moreover possible
procedure runs polynomial time assuming safety test
performed polynomial time
safety class satisfies additional desirable properties classes
local interpretations described section procedure fact produces smallest
possible module safety class stated claim proposition
case possible optimize procedure shown figure union closed
instead checking whether os sig om conditions rules
r r sufficient check sig om since already known
os sig om compact subset closed instead moving
axioms os ou rule r sufficient move axioms os contain
least one symbol occur om since set remaining
axioms stay sig om figure present optimized version
figure locality classes
example table present trace figure ontology
consisting axioms figure signature cystic fibrosis genetic disorder
r
safety class oa
defined example first column table lists
configurations obtained initial configuration applying rewrite
rules r r figure row underlined axiom one
tested safety second column table shows elements sig om
appeared current configuration present preceding
configurations last column indicate whether first conditions rules r
r
r fulfilled selected axiom ou whether local ia

rewrite rule corresponding test applied configuration


ficuenca grau horrocks kazakov sattler

om ou os

elements sig om

cystic fibrosis genetic disorder

sig om
yes



r







yes



r











r





fibrosis located pancreas
origin genetic origin





r





genetic fibrosis





r







yes



r











r







table trace procedure figure input q figure
cystic fibrosis genetic disorder

note axioms tested safety several times different configurations
set ou may increase applications rule r example axiom
tested safety configurations configurations
note different locality tests obtained cases
local w r sig om om became non local
axioms added om easy see case syntactic locality
produces tests
example rewrite procedure produces module om consisting axioms
note possible apply rewrite rules different choices axiom
ou different computation words procedure
figure implicit non determinism according claim proposition
r
computations produce module om smallest oa

module implicit non determinism procedure figure
impact procedure however alternative choices
may shorter computations example could selected axiom
first configuration instead would led shorter trace consisting
configurations

worth examining connection modules ontology
particular safety class actual minimal modules turns
module om guaranteed cover set minimal modules provided
anti monotonic subset closed words given om contains
essential axioms following lemma provides main technical argument
underlying
lemma let anti monotonic subset closed safety class ontology language l ontology signature l let module w r l
om module om module w r l


fimodular reuse ontologies theory practice

proof definition since om module om
sig om since om om subset closed case
sig om since anti monotonic om
sig hence module particular
module w r l since module w r l module
w r l
corollary let anti monotonic subset closed safety class l om
module om contains essential axioms w r l
proof let minimal module w r l demonstrate om indeed
otherwise lemma om module w r l strictly contained
hence om superset every minimal module hence contains
essential axioms w r l
shown section axioms essential ontology
signature considered example seen example locality
module extracted contains axioms accordance corollary
case extracted module contains essential axioms general however localitybased modules might contain non essential axioms
interesting application modules pruning irrelevant axioms checking
axiom implied ontology indeed order check whether
suffices retrieve module sig verify implication holds w r
module cases sufficient extract module subset signature
general leads smaller modules particular order test subsumption
pair atomic concepts safety class used enjoys nice properties
suffices extract module one given following proposition
proposition let compact union closed safety class ontology language
l ontology b atomic concepts let oa module

v b b v oa
b v v b oa
proof consider two cases b sig oa b b
sig oa
remark case oa module b
since sig definition definition case implies
oa
b consider b v since sig b v b b
sig oa b v
compact definition case b v sig oa
since oa module definition oa sig oa
since union closed case oa b v sig oa note
b v oa since b sig oa hence oa b v oa
definition oa module since v b
case v hence since oa module
oa v implies oa v b


ficuenca grau horrocks kazakov sattler

proof case analogous case case applicable without
changes case b oa module
v b hence since v case ob v
implies b v
r
corollary let shoiq ontology b atomic concepts let oa
r locality classes local classes interpretations form r
oa

r
r
ia respectively table let oa module oa
r v b iff v b iff
ob module b oa

ob v b
r v r
proof easy see b v oa


proposition implies module safety class single atomic concept
used capturing super concepts case sub concepts case
b provided safety class captures applied empty signature
axioms form b v case v b case b super concept
sub concept ontology module property
used example optimize classification ontologies order check
subsumption v b holds ontology sufficient extract module
modularization safety class
ontology b v local w r empty signature check whether subsumption
holds w r module purpose convenient use syntactically tractable
approximation safety class use example one could use syntactic locality
conditions given figure instead semantic counterparts
possible combine modularization procedures obtain modules smaller
ones obtained procedures individually example order check
r module
subsumption v b one could first extract oa

corollary module complete super concepts
including bthat atomic concept super concept
r module b
super concept one could extract oa

corollary complete sub concepts b including
indeed module b module original
ontology proposition therefore case module

related work
seen section notion conservative extension valuable formalization ontology reuse tasks deciding conservative extensions
recently investigated context ontologies ghilardi et al lutz et al
lutz wolter deciding whether p q deductive conservative
extension q exptime complete el lutz wolter exptime complete
w r alciq lutz et al roughly owl lite undecidable w r alciqo
roughly owl dl furthermore checking model conservative extensions already undecidable el lutz wolter alc even semi decidable lutz
et al


fimodular reuse ontologies theory practice

last years rapidly growing body work developed
headings ontology mapping alignment ontology merging ontology integration
ontology segmentation kalfoglou schorlemmer noy b field
rather diverse roots several communities
particular numerous techniques extracting fragments ontologies purposes knowledge reuse proposed techniques rely syntactically
traversing axioms ontology employing heuristics determine
axioms relevant
example procedure implemented prompt factor
tool noy musen given signature ontology q retrieves fragment q q follows first axioms q mention
symbols added q second expanded symbols sig q
steps repeated fixpoint reached example section
cystic fibrosis genetic disorder q consists axioms figure first retrieves axioms containing terms expands
symbols mentioned axioms contains symbols q
step remaining axioms q retrieved hence fragment extracted
prompt factor consists axioms case promptfactor extracts module though minimal one general however
extracted fragment guaranteed module example consider ontology
q b v c c v b ontology q inconsistent due
axiom axiom particular thus logical consequence q given
b c prompt factor extracts q b v c however q
q module q general prompt factor may fail even q
consistent example consider ontology q v v b v r
easy see q consistent admits single element
satisfied every model q case prompt factor
extracts q v b imply
another example seidenbergs segmentation seidenberg rector
used segmentation medical ontology galen rector rogers
currently full version galen cannot processed reasoners authors
investigate possibility splitting galen small segments processed
reasoners separately authors describe segmentation procedure given set
atomic concepts computes segment ontology description
procedure high level authors discuss concepts roles
included segment particular segment contain
super sub concepts input concepts concepts linked
input concepts via existential restrictions super concepts subconcepts included concepts restrictions intersection union
equivalent concepts considered including roles concepts contain
together super concepts super roles sub concepts
sub roles description procedure entirely clear whether works
classified ontology unlikely case galen since full version
galen classified existing reasoner otherwise super
sub concepts computed clear axioms included


ficuenca grau horrocks kazakov sattler

segment end since procedure talks inclusion concepts
roles
different module extraction proposed literature stuckenschmidt
klein consists partitioning concepts ontology facilitate visualization
navigation ontology uses set heuristics measuring
degree dependency concepts ontology outputs graphical
representation dependencies intended visualization technique
establish correspondence nodes graph sets axioms
ontology
common modularization procedures mentioned lack
formal treatment notion module papers describing modularization
procedures attempt formally specify intended outputs procedures
rather argue modules intuitive notions
particular take semantics ontology languages account might
possible formalize identify ontologies intuitionbased modularization procedures work correctly studies beyond scope

module extraction ontologies investigated formal point view
cuenca grau et al b cuenca grau et al define notion module qa
ontology q atomic concept one requirements module q
conservative extension qa qa called logical module q
imposes additional requirement modules namely module qa
entail subsumptions original ontology atomic concepts involving
atomic concepts qa authors present partitioning ontology
disjoint modules proved correct provided certain safety
requirements input ontology hold ontology consistent
contain unsatisfiable atomic concepts safe axioms
terms means local empty signature contrast
present works ontology including containing non safe axioms
growing interest notion modularity ontologies recently
reflected workshop modular ontologies held conjunction international
semantic web conference iswc concerning ontology reuse
proposals safely combining modules proposals
e connections cuenca grau parsia sirin distributed description logics
borgida serafini package description logics bao caragea honavar
propose specialized semantics controlling interaction importing
imported modules avoid side effects contrast works assume
reuse performed simply building logical union axioms modules
standard semantics establish collection reasoning services
safety testing check side effects interested reader literature
detailed comparison different approaches combining ontologies cuenca
grau kutz
information see homepage workshop http www cild iastate edu events womo html



fimodular reuse ontologies theory practice

implementation proof concept
section provide empirical evidence appropriateness locality safety
testing module extraction purpose implemented syntactic locar
r
lity checker locality classes oa
oa
well
extracting modules given figure section
r
first locality class oa
provides powerful sufficiency test
r
safety works many real world ontologies second oa

modules typically small compared size ontology modules
extracted techniques third report implementation ontology
editor swoop kalyanpur parsia sirin cuenca grau hendler illustrate
r
r
combination modularization procedures classes oa
oa

locality testing safety
r
run syntactic locality checker class oa
ontologies
library ontologies sizes complexity import
gardiner tsarkov horrocks ontologies p import ontology q
check p belongs locality class sig p sig q
turned ontologies library import ontologies
syntactically local hence semantically local
non local ontologies written owl full species owl patel schneider et al
framework yet apply remaining non localities due
presence called mapping axioms form b
b
note axioms simply indicate atomic concepts b two ontologies
consideration synonyms indeed able easily repair non localities
follows replace every occurrence p b remove axiom
ontology transformation non local ontologies turned local

extraction modules
section compare three modularization implemented
manchesters owl api
prompt factor noy musen
segmentation proposed cuenca grau et al
r
modularisation locality class oa


aim experiments described section provide throughout comparison quality existing modularization since extracts
modules according requirements rather give idea typical size
modules extracted real ontologies
library available http www cs man ac uk horrocks testing
section module understand considered modularization procedures
may necessarily module according definition
http sourceforge net projects owlapi



ficuenca grau horrocks kazakov sattler

modularization
nci

modularization
nci

b modularization
modularization
galen small
b
galen small

c modularization
modularization snomed
c
snomed

modularization
modularization galen full

galen full

e small
small modules

galen full
e
modules
galen full

f large
large modules

galen full
f
modules
galen full

figure distribution sizes syntactic locality modules x axis gives
number concepts modules axis number modules extracted
size range



fimodular reuse ontologies theory practice

segmentation

loc mod

atomic

prompt factor

concepts

max

avg

max

avg

max

avg

nci















snomed















go

ontology















sumo















galen small















galen full















sweet















dolce lite















table comparison different modularization

test suite collected set well known ontologies available web
divided two groups
simple group included national cancer institute nci ontology
sumo upper ontology gene ontology go snomed ontology
ontologies expressed simple ontology language simple structure
particular contain gcis definitions
complex group contains well known galen ontology galen full
dolce upper ontology dolce lite nasas semantic web earth environmental terminology sweet ontologies complex since use many
constructors owl dl include significant number gcis case
galen considered version galen small commonly used
benchmark owl reasoners ontology almost times smaller original
galen full ontology yet similar structure
since benchmark ontology modularization use cases
available systematic way evaluating modularization procedures therefore
designed simple experiment setup even may necessarily reflect
actual ontology reuse scenario give idea typical module sizes
ontology took set atomic concepts extracted modules every atomic
concept compare maximal average sizes extracted modules
worth emphasizing extract module
input atomic concept extracted fragment module whole signature
typically includes fair amount concepts roles








http www mindswap org cancerontology ncioncology owl
http ontology teknowledge com
http www geneontology org
http www snomed org
http www openclinical org prj galen html
http www loa cnr dolce html
http sweet jpl nasa gov ontology


ficuenca grau horrocks kazakov sattler

r
r
concepts dna sequence b oa
module c oa
module
microanatomy nci
dna sequence nci
micro anatomy fragment b

figure module extraction functionality swoop
obtained summarized table table provides size
largest module average size modules obtained
table clearly see locality modules significantly
smaller ones obtained methods particular case sumo
dolce galen snomed retrieve whole ontology
module input signature contrast modules obtain
significantly smaller size input ontology
nci snomed go sumo obtained small locality modules explained fact ontologies even large simple
structure logical expressivity example snomed largest locality
module obtained approximately size ontology average size
modules size largest module fact modules
obtained ontologies contain less atomic concepts
galen sweet dolce locality modules larger indeed
largest module galen small size ontology opposed
case snomed dolce modules even bigger size
ontologywhich indicates dependencies different concepts
ontology strong complicated sweet ontology exception even
though ontology uses constructors available owl ontology heavily
underspecified yields small modules
figure detailed analysis modules nci snomed
galen small galen full x axis represents size ranges ob

fimodular reuse ontologies theory practice

tained modules axis number modules whose size within given range
plots thus give idea distribution sizes different modules
snomed nci galen small observe size modules
follows smooth distribution contrast galen full obtained large number
small modules significant number big ones medium sized modules
abrupt distribution indicates presence big cycle dependencies
ontology presence cycle spotted clearly figure f figure
shows large number modules size concepts
cycle occur simplified version galen thus obtain smooth
distribution case contrast figure e see distribution
small modules galen full smooth much similar one
simplified version galen
considerable differences size modules extracted
due fact extract modules according different requirements produces fragment ontology contains input atomic
concept syntactically separated rest axiomsthat fragment
rest ontology disjoint signatures extracts fragment
ontology module input atomic concept additionally semantically
separated rest ontology entailment atomic concept
module atomic concept module hold original ontology since
weaker requirements expected extracts smaller
modules surprising difference size modules significant
order explore use ontology design analysis
integrated extracting modules ontology editor swoop kalyanpur
et al user interface swoop allows selection input signature
retrieval corresponding module
figure shows classification concepts dna sequence microanatomy
r
nci ontology figure b shows minimal oa
module dna sequence
r
obtained swoop recall according corollary oa
module
atomic concept contains necessary axioms least entailed super concepts
thus module seen upper ontology fact figure
shows module contains concepts path dna sequence
top level concept anatomy kind suggests knowledge nci
particular concept dna sequence shallow sense nci knows
dna sequence macromolecular structure end anatomy kind one
wants refine module including information ontology necessary
r
entail path dna sequence micro anatomy one could extract oa
module micro anatomy fragment b corollary module contains
sub concepts micro anatomy previously extracted module resulting
module shown figure b

tool downloaded http code google com p swoop



ficuenca grau horrocks kazakov sattler

conclusion
proposed set reasoning relevant ontology
reuse established relationships studied computability existing lutz et al obtained section
shown undecidable algorithmically unsolvable logic
underlying owl dl dealt defining sufficient conditions
solution exist computed practice introduced studied
notion safety class characterizes sufficiency condition safety
ontology w r signature addition used safety classes extract modules
ontologies
future work would study approximations produce small
modules complex ontologies galen exploit modules optimize ontology
reasoning

references
baader f brandt lutz c pushing el envelope ijcai proceedings nineteenth international joint conference artificial intelligence
edinburgh scotland uk july august pp professional book
center
baader f calvanese mcguinness l nardi patel schneider p f eds
description logic handbook theory implementation applications
cambridge university press
bao j caragea honavar v semantics linking importing
modular ontologies proceedings th international semantic web conference
iswc athens ga usa november vol lecture notes
computer science pp
borger e gradel e gurevich classical decision perspectives
mathematical logic springer verlag second printing universitext
borgida serafini l distributed description logics assimilating information
peer sources j data semantics
cuenca grau b horrocks kazakov sattler u logical framework
modularity ontologies ijcai proceedings twentieth international
joint conference artificial intelligence hyderabad india january pp
aaai
cuenca grau b kutz modular ontology languages revisited proceedings
workshop semantic web collaborative knowledge acquisition hyderabad india january
cuenca grau b parsia b sirin e combining owl ontologies econnections j web sem
cuenca grau b parsia b sirin e kalyanpur b modularity web ontologies proceedings tenth international conference principles knowledge


fimodular reuse ontologies theory practice

representation reasoning kr lake district united kingdom june
pp aaai press
cuenca grau b horrocks kazakov sattler u right amount
extracting modules ontologies proceedings th international conference world wide web www banff alberta canada may
pp acm
cuenca grau b horrocks kutz sattler u ontologies fit
together proceedings international workshop description logics
dl windermere lake district uk may june vol ceur
workshop proceedings ceur ws org
gardiner tsarkov horrocks framework automated comparison description logic reasoners proceedings th international semantic
web conference iswc athens ga usa november vol
lecture notes computer science pp springer
ghilardi lutz c wolter f damage ontology case conservative extensions description logics proceedings tenth international
conference principles knowledge representation reasoning kr
lake district united kingdom june pp aaai press
horrocks patel schneider p f van harmelen f shiq rdf
owl making web ontology language j web sem
horrocks sattler u tableaux decision procedure shoiq proceedings
nineteenth international joint conference artificial intelligence ijcai
edinburgh scotland uk july august pp professional book
center
kalfoglou schorlemmer ontology mapping state art
knowledge engineering review
kalyanpur parsia b sirin e cuenca grau b hendler j swoop
web ontology editing browser j web sem
lutz c walther wolter f conservative extensions expressive description
logics proceedings twentieth international joint conference artificial
intelligence ijcai hyderabad india january pp aaai
lutz c wolter f conservative extensions lightweight description logic
el proceedings st international conference automated deduction
cade bremen germany july vol lecture notes computer science pp springer
moller r haarslev v description logic systems description logic
handbook chap pp cambridge university press
motik b reasoning description logics resolution deductive
databases ph thesis univesitat karlsruhe th karlsruhe germany
noy n f semantic integration survey ontology approaches sigmod
record


ficuenca grau horrocks kazakov sattler

noy n f b tools mapping merging ontologies staab studer staab
studer pp
noy n musen prompt suite interactive tools ontology mapping
merging int journal human computer studies elsevier
patel schneider p hayes p horrocks web ontology language owl abstract
syntax semantics w c recommendation
rector rogers j ontological issues description logic represent
medical concepts experience galen imia wg workshop proceedings
schmidt schau smolka g attributive concept descriptions complements artificial intelligence elsevier
seidenberg j rector l web ontology segmentation analysis classification
use proceedings th international conference world wide web
www edinburgh scotland uk may pp acm
sirin e parsia b pellet system description proceedings international workshop description logics dl whistler british columbia
canada june vol ceur workshop proceedings ceur ws org
staab studer r eds handbook ontologies international handbooks
information systems springer
stuckenschmidt h klein structure partitioning large class hierarchies proceedings third international semantic web conference iswc hiroshima japan november vol lecture notes computer science pp springer
tobies complexity reasoning cardinality restrictions nominals
expressive description logics j artif intell res jair
tsarkov horrocks fact description logic reasoner system description
proceedings third international joint conference automated reasoning
ijcar seattle wa usa august vol lecture notes
computer science pp springer




