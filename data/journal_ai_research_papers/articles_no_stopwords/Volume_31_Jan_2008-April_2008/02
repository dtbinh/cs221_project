journal artificial intelligence

submitted published

cui networks graphical representation conditional
utility independence
yagil engel
michael p wellman

yagil umich edu
wellman umich edu

university michigan computer science engineering
hayward st ann arbor mi usa

abstract
introduce cui networks compact graphical representation utility functions
multiple attributes cui networks model multiattribute utility functions
well studied widely applicable utility independence concept conditional
utility independence leads effective functional decomposition exhibited
graphically local compact data graph nodes used calculate
joint utility discuss aspects elicitation network construction optimization
contrast representation previous graphical preference modeling

introduction
modern ai decision making notion expected utility probability distributions used weigh utility values possible outcomes
representation probability distribution functions markov bayesian networks
pearl exploiting conditional independence achieve compactness computational efficiencyhas led plethora techniques applications despite
equal importance decision making preferences utilities generally received
level attention ai researchers devoted beliefs probabilities
increasing efforts develop representations inference methods utility achieved
degree success comparable impact graphical probabilistic reasoning
recognizing utility functions multidimensional domains may amenable
factoring independence keeney raiffa several aimed develop
analogous benefits bacchus grove boutilier bacchus brafman
la mura shoham wellman doyle goal well
compare methods related work section
development compact representations multiattribute utility begins
notion preferential independence pi separability subdomains outcome space
subdomain outcomes separable pi sense preference order subdomain depend rest domain subsets attributes induce
separable subdomains ordinal utility value function decomposes additively
variables debreu fishburn gorman cardinal utility function represents preferences outcomes notion strength preferences
notably represent preferences actions uncertain outcomes lotteries direct
adaptation pi concept cardinal utility requires generalization notion
set attributes utility independent ui preference order lotteries

c

ai access foundation rights reserved

fiengel wellman

induced subdomain depend values rest attributes stronger
judgement assert preference order joint domain depends
margins attribute subsets latter leads powerful additive decompositions
fully additive subsets attributes disjoint generalized
additive decomposition overlapping subsets fishburn bacchus grove
utility independence leads less convenient decompositions multilinear keeney
raiffa hierarchical von stengel wellman doyle previous
efforts ai community adapt modern graphical modeling utility functions employ generalized additive decomposition bacchus grove boutilier et al
gonzales perny contrast work continues thread
weaker utility independence assumption elaborate difference types
independence following presentation formal definitions

background
utility theoretic terminology follows definitive text keeney raiffa
multiattribute utility framework outcome represented vector values
n variables called attributes decision makers preferences represented
total pre order set outcomes common applications decision makers
ability choose certain outcome rather action
probability distribution outcomes called lottery decision maker hence
set possible lotteries given standard set
assumed preference order

axioms represented real valued utility function outcomes u
numeric ranking probabilistic outcomes expected utility respects ordering
utility function unique positive affine transformations positive linear

transform u represents preferences thus strategically equivalent
ability represent utility probability distributions function outcomes
provides structure multiattribute settings outcome space n dimensional
unless n quite small therefore explicit e g tabular representation u
generally practical much multiattribute utility theory aims
identify structural patterns enable compact representations particular
subsets attributes respect independence relationships utility function may
decomposed combinations modular subutility functions smaller dimension
let x xn set attributes following definitions rest
work capital letters denote subsets attributes small letters without numeric
subscripts denote specific attributes x denotes complement x respect
denote joint domain x x indicate specific attribute assignments
prime signs superscripts represent instantiation subsets x
time use sequence instantiation symbols x
order meaningfully discuss preferences subsets attributes need notion
preferences subset given fixed values rest attributes




definition outcome conditionally preferred outcome given


denote conditional preference order given



ficui networks


similarly define conditional preference order lotteries preference order


lotteries represented conditional utility function u
definition preferential independent pi depend value

chosen
preferential independence useful qualitative preference assessment firstorder preferential independence e independence single attribute rest
natural assumption many domains example typical purchase decisions greater
quantity higher quality desirable regardless values attributes preferential independence higher order however requires invariance tradeoffs among
attributes respect variation others stringentthough still often
satisfiableindependence condition standard pi condition applies subset respect full complement remaining attributes conditional version pi specifies
independence respect subset complement holding remaining attributes
fixed
definition conditionally preferential independent cpi x given z z xy
z x z depend value chosen x denote relationship
cpi x z
counterpart preferential independence considers probability distributions
outcomes called utility independence
definition utility independent ui conditional preference order
depend value chosen
lotteries

notations apply ui conditions defined sets attributes
specific attributes
given ui x taking x conditional utility function given x
invariant positive affine transformations fixed value x fact
expressed decomposition
u x f x g x u x

g

note functions f g may different particular choice x since
u x function sometimes use notation ux
utility independence conditional version well
definition conditionally utility independent cui x given z z xy
x z depend value chosen x denote relationship
z
cui x z
cui supports functional decomposition z conditional utility function
given x z strategically equivalent function given different instantiation
x however transformation depends x z hence
write
u x z f x z g x z u x z g



fiengel wellman

fix x arbitrary level x use two transformation functions f
g get value u levels x stronger symmetric form independence
leads additive decomposition utility function called additive independence
provide definition conditional version
definition x conditionally additive independent given z cai x z
z depends marginal conditional probability disif instantiation z

tributions xz z
means value z two probability distributions p q
p x z q x z p z q z decision maker indifferent
p q necessary sufficient condition hold
utility differences u x z u x z x x depend
value
cai leads following decomposition keeney raiffa
u x z f x z g z
variations utility independence considered theoretical literature
leading decomposition fishburn krantz luce suppes tversky
fuhrken richter
motivation
obvious benefit model conditional utility independence
generality admitted weaker independence condition comparison additive independence whereas additivity practically excludes interaction utility one
attribute subset x definition value another utility independence
allows substitutivity complementarity relationships long risk attitude towards one variable affected value another one could argue ui
particularly intuitive invariance condition preference order
contrast conditional additive independence requires judgment effects joint
versus marginal probability distributions moreover additive independence symmetric
whereas condition u x allow preference order depend x
bacchus grove exemplify difference additive utility independence
simple state space two boolean attributes health wealth example
shown table attributes additive independent immediately seen
preference differences h w complements worth
sum one without would considered
two attributes substitutes example u w h u w h cases
h w nonetheless preferential independent since prefer richer
else equal healthier else equal boolean variables preferential
utility independence equivalent prefer lotteries give higher probability
preferred level therefore health wealth ui
conditional additive independence resulting additive decomposition
generalized multiple subsets necessarily disjoint condition called



ficui networks

w
w

h



h



table utility values health wealth example bacchus grove
generalized additive independence gai gai holds u decomposes sum independent functions gai subsets xi shown bacchus grove cai
conditions accumulated global gai decomposition see section latter
may exist without cai conditions leading gai condition hard
identify whereas cai condition corresponds independence two attributes
two subsets global gai condition intuitive interpretation
next example cardinal independence condition exists except non symmetric cui example shows difference pi ui hence requires
domains h w include least three values add third attribute outcome space location l indicating whether live city
countryside table order u h w l hold enough
violated one pair lotteries given partial outcome wr lci
prefer equal chance lottery hf hs whose expected utility
sure
outcome hg value whereas given wp lci indifferent expected utility
lotteries intuitively may case additional value get fitness
good health higher rich making significant value
hg adds hs similarly u w h l hold comparing even chance
gamble wr wp sure outcome wm first given hf lci given
hs lci
w h therefore utility independent preferential independent
l however rich would rather live city way
round poor except case poor sick prefer
city

wr
wm
wp

hf




lci
hg




hs




hf




lco
hg




hs




table utility values health wealth location example wr means rich wm
medium income wp means poor hf healthy top fitness hg means good health
hs means sick lci stands city location lco means countryside location
therefore symmetric independence condition exists rules additive multiplicative independence conditional subsets attributes
since single variable unconditionally ui subset unconditionally
ui fact preferences l depend combination h w rules
gai decomposition form w l w h h l


fiengel wellman

however achieve decomposition cui case cui w l h
since column left matrix lci affine transformation counterpart
right side lco example transform first column hf multiply
add
example illustrates subtlety utility independence particular whereas
preferences l depend w w may still conditionally ui l cai assumption attributes must inevitably ignore reversal preferences l
different values w hence decision maker queried preferences
assumption may able provide meaningful answers
interaction system requires preference representation normally requires
identification structure population utility values required
compact representation therefore important two aspects
simplified possible whereas functional form handled system may
sophisticated exactly tradeoff made cui nets compared gai
representation gai condition cai cui nets achieve lower dimensionality
section therefore easier elicitation gai condition collection
cai conditions hard identify cui nets simplify bottleneck aspects
driving complexity functional form handled
behind scenes
related work
perhaps earliest effort exploit separable preferences graphical model extension influence diagrams tatman shachter decompose value functions
sums products multiple value nodes structure provided computational
advantages enabling use dynamic programming techniques exploiting value separability
bacchus grove first develop graphical model conditional
independence structure particular establish cai condition perfect
map pearl paz graph attribute nodes node separation
reflects exactly set cai conditions specifically two sets nodes
x cai x xy holds direct edge node x
node use term cai map referring graph reflects
perfect map cai conditions context preference order bacchus
grove go utility function gai decomposition set
maximal cliques cai map section cui network representation
developed achieves weakly better dimensionality cai maps due greater
generality independence assumption
initiating another important line work boutilier et al introduced cp networks efficient representation ordinal preferences multiple attributes
cp network variable conditionally pi rest given parents ordinal multiattribute preference representation schemes decision making certainty
especially cp networks dramatically simplify preference elicitation process
intuitive relative preference statements avoid magnitude considerations
however limited expressive power cp networks may suffice complex decision



ficui networks

tradeoff resolution may hinge complicated way attribute settings
rich domains particularly acute continuous almost continuous
attributes involved money time
boutilier et al subsequently extended numeric cardinal utility
ucp networks graphical model utilizes gai decomposition combined
cp net topology requires dominance relations parents children
somewhat limiting applicability representation gai structure
applied graphical gonzales perny employ clique graph
cai map gai network elicitation purposes
earlier work la mura shoham redefine utility independence symmetric multiplicative condition taking closer probability analog supporting
bayes net representation although multiplicative independence different additive independence necessarily weaker recent work abbas defines
subclass utility functions multiplicative notion ui obeys analog
bayess rule
graphical decomposition suggested past utility functions
original non symmetric notion utility independence utility tree von stengel
see wellman doyle discussion ai context utility tree
decomposes utility function multilinear multiplicative decomposition keeney
raiffa tries decompose subset similarly
hierarchical steps utility function becomes nested expression functions
smallest separable subsets complements
graphical cui
concluding remarks bacchus grove suggest investigating graphical
independence concepts particular utility independence founding
graphical model ui difficult however utility independence decompose
effectively additive independence particular condition u x ensures
subutility function since x one harder carry
decomposition x hence case x large dimensionality
representation may remain high therefore employs cui conditions
large subsets case decomposition driven decomposing
conditional utility function cui conditions
sequel serial application cui leads functional decomposition
corresponding graphical model cui network provides lower dimension representation utility function function vertex depends node
parents demonstrate use cui networks constructing example
relatively complex domain next elaborate technical semantic properties model knowledge required construct subsequent technical sections
present optimization techniques reducing complexity
representation



fiengel wellman

cui networks
begin constructing dag representing set cui conditions followed derivation functional decomposition nodes dag
cui dag
suppose obtain set cui conditions variable set x xn
x contains condition form
cui x p x x p x
words exists set p x separates rest variables x
p x exists p x x condition trivially holds set
represented graphically following procedure name procedure c
define order set convenience assume ordering x xn
define set parents x p x p x
n
set nodes
define set intermediate descendants xi dn x
x xi turned descendants xi xi
smallest
parent another descendant xi parent formally dn x
set satisfies following condition
p xj
j xi p xj k xk dn x

xj dn x
define parents xi nodes p xi already descendants xi

p xi p xi dn x
procedure defines dag denote dn x final set descendants x
set defined equation replacing n

definitions dn x dn x
hence

p x dn x p x dn x
p x



proposition consider dag defined procedure c set attributes
x
cui x p x dn x x p x dn x


proof definitions p x p x holds replacing dn x dn x
definition cui straightforward
cui w w cui w z w z
invariance preference order w implies invariance preference
order subset w z difference set z fixed given


taking w p x dn x
z dn x dn x
get


ficui networks

example construction structure small set variables
x x x x x x given following set cui conditions
cui x x x x x x cui x x x x x x
cui x x x x x x cui x x x x x x
cui x x x x x x cui x x x x x x
construction network order implied indices cui
dag illustrated figure minimal separating set x x x x get
x non descendant variable required separate
dn x
rest x therefore parent rest graph constructed
similar way x placed p x x x therefore x becomes
x x x
descendant x x placed words dn x dn x
ix

ix
z

z
x

ix
z






x






z

z


z
x



figure cui dag given order x x

definition let u utility function representing cardinal preferences
cui dag u dag x holds
procedure c yields cui dag proposition direction given cui
dag g parents descendants denoted p ag dng respectively
constructed c follows define p x p ag x dng x variable
ordering according reverse topological order g complete execution c
straightforward set parents selected xi exactly p ag xi
hence dag identical g
cui decomposition
cui conditions guaranteed proposition applied iteratively decompose u lower dimensional functions first pick variable ordering
agrees reverse topological order cui dag simplify presentation
rename variables ordering x xn cui condition x
implies following decomposition according
u f x p x dn x g x p x dn x ux x



note dn x
assume specified reference point arbitrary value chosen
attribute x denoted x ux right hand side conditional


fiengel wellman

utility function given x fixed reference point x convenience omit
attributes whose values fixed list arguments
applying decomposition cui condition x conditional
utility function ux get
ux x f x p x dn x g x p x dn x ux x x x
note dn x x x fixed x hence f g effectively depend
x p x point exploited
substituting ux according yields
u f g f g ux x x x f g f g g ux x x x
list arguments functions fj gj xj p xj dn xj omit
readability
continue fashion get
u


x

k


fk

j

k

gj




gj ux x xi xn


j

apply cui condition xi
ux x xi xi xn


xi p xi dn xi gi xi p xi dn xi ux x xi xn


convenience define constant function fn ux x n ultimately obtain
u

n
x






j

xi p xi dn xi

gj xj p xj dn xj



variable ordering restricted agree reverse topological order graph
hence dn xi x xi therefore variables dn xi righthand side fixed reference points gi depend xi
p xi formally let yk variables dn xi abuse notation
define
xi p xi xi p xi yk
gi xi p xi gi xi p xi yk



becomes
u

n
x






j

xi p xi

gj xj p xj



term decomposition multiattribute utility function lower dimensional
functions whose dimensions depend number variables p x


ficui networks

dimensionality representation reduced bayesian networks maximal
number parents node plus one
illustrate utility function decomposed example figure
pick ordering x x x x x x agrees reverse topological order
graph note renaming variables simplify notation
denote conditional utility function xi fixed reference point adding
subscript u
u f x x x g x x x u x
u x f x x x g x x x u x x
u x x f x g x u x x x
u x x x f x x g x x u x x
u x x f x x g x x u x
u x f x g x u
note gi depends xi parents merging equations
definition f u produces
u f g f g g f g g g f g g g g f g g g g g f g g g g g g f
established u represented set functions f includes
x functions fx gx resulting decomposition cui
condition means fully specify u sufficient obtain data
functions f aspect discussed section
definition let u utility function representing cardinal preferences
cui network u triplet g f g e cui dag u
reference point f set functions xi p xi gi xi p xi n
defined
utility value assignment calculated cui network
according variable ordering agrees reverse topological order
dag example choose different variable ordering one used
x x x x x x leading following expression
u f g f g g f g g g f g g g g f g g g g g f g g g g g g f
sum product different one however cui
decompositions therefore functions gi
properties cui networks
procedure c decomposition following conclude following
proposition let set attributes set cui conditions
includes condition form cui x zx x zx x
represented cui network whose dimensionality exceed maxx zx


fiengel wellman

note zx denotes minimal set attributes variables renders rest
cui x bound dimensionality obtained regardless variable
ordering expect maximal dimension lower network constructed
good variable ordering good heuristic determining ordering would
use attributes smaller dependent sets first attributes dependents
would descendants ordering would expect
less important attributes lower topology crucial attributes
would present higher larger number parents
point usually omit third argument referring cui condition
cui x taken equivalent cui x x
order achieve low dimensional cui networks required detect cui
conditions large sets may difficult task address
example section task made somewhat easier fact set
cui single variable note condition cu x weaker condition
cu x x x furthermore section shows dimensionality
reduced initial cui decomposition sufficiently effective
properties cui read additional independence conditions
graph first observe cui composition property second argument
lemma let cui x x cui b b
cui x b
property leads following claim allows us derive additional cui
conditions graph constructed
proposition
consider
cui network set attributes define p x

p
x

dn x

xx dn x x
xx
cui x p x dn x x
proof recursion x lemma proposition
consider direction defining set nodes renders set cui
rest dual perspective becomes particularly useful optimization section
optimization preference order attribute meaningful
holding enough attributes fixed make cpi cui rest let ch x
denote union children nodes x let x denote ancestors
nodes x cases excluding nodes x
proposition consider cui network set attributes cui x x x
ch x x
proof let
x ch x x clearly x x x
p dn hence
proposition cui x apply lemma iteratively
x ch x x
note first argument x cui condition x well
get desired
conclude section relating cui networks cai maps


ficui networks

proposition let g x e cai map x xn ordering nodes
x let g x e dag directed arc xi xj e iff j
xi xj e g cui network
note however cai maps decompose utility function maximal
cliques whereas cui networks decompose nodes parents section bridges
gap addition used section

cui modeling example
demonstrate potential representational advantage cui networks require domain difficult simplify otherwise example use choice software
package enterprise wishes automate sourcing strategic procurement process focus softwares facilities running auction rfq request quotes
events tools select winning suppliers manually automatically
identified nine key features kinds software packages choice scenario
buyer evaluates package nine features graded discrete scale e g
one five features brief
interactive negotiations allows separate bargaining procedure supplier
multi stage ms allows procurement event comprised separate stages different types
cost formula cf buyers formulate total cost business
supplier
supplier tracking st allows long term tracking supplier performance
multiattribute bidding multiattribute items potentially scoring function
event monitoring em provides interface running events real time graphical
views
bundle bidding bb bidding bundles goods
grid bidding gb adds bidding dimension corresponding aspect time
region
decision support ds tools optimization aiding choice best
supplier
observe first additive independence widely apply domain
example multi stage makes several features useful important interactive
negotiations often useful last stage decision support choose suppliers
hope fact software may include facilities multiattribute decision making
cause undue confusion naturally consider important feature



fiengel wellman

proceed next stage event monitoring helps keep track useful
stage reducing costs conversely circumstances multi stage substitute
functionality features multiattribute bidding different attributes different stages bundle bidding bidding separate items different stages grid bidding
bidding different time regions different stages supplier tracking extracting
supplier information request information stage potential dependencies
attribute shown table
attr
em

cf
st

ms
ds
gb
bb

complements
cf st ms
st ms
em ms ds gb bb
em ms ds
ds cf
ds em st
cf gb st bb ms
cf ds
cf ds

substitutes

ds

ms bb st gb
gb bb cf
ms bb
ms gb

cui set
ds gb bb
em cf st ds gb bb
gb bb
cf gb bb
gb bb
gb bb
em
bb
gb

table dependent independent sets attribute
presence complement substitute relation precludes additive independence
fact identify set six attributes must mutually additive dependent bb gb ds ms cf consequence best case dimensionality achieved
cai map cai representations see section domain would
six size largest maximal clique
order construct cui network first identify attribute x set
cui first guess set according complement substitute information
table typically set attributes neither complements substitutes would
cui taken attributes em ds however attributes
complements substitutes may still cui therefore attempt
detect verify potentially larger cui sets keeney raiffa provide several
useful help detection ui generalized cui
particular first detect conditional preferential independence
cpi condition one element cui order verify
example
cui bb gb cf bb gb cf



following two conditions sufficient
cpi bb gb cf bb gb cf



cui bb gb cf bb gb cf



detection verification conditions discussed keeney raiffa
example observe features bb gb add qualitative


ficui networks

element bidding bidding element best exploited cost formulation
available complements cf complementarity similar feature thus
implying moreover bb crucial feature therefore risk attitude towards
expected vary level cf gb implies together
leading
similar fashion observe nature substitutivity three
mechanisms bb gb ms similar simulated multiple stages
means tradeoffs among three depend ms meaning
cpi bb gb ms holds next dependency among triplet bb gb
option substitute one another pair cpi
third finally complementarity st marginal
affect tradeoffs attributes therefore verify following conditions
cui bb gb ms cui bb gb cui st em cf ds gb bb
cui gb bb cf st resulting maximal cui sets attribute
shown table
construct network start variable largest cui set
needs ms parents em gets cf ms st
parents next consider st needs four attributes conditional set em
descendant therefore ds ms needed parents next variable
choose ms needs cf ds parents since dependant variables
descendants chosen cf ms would needed four parents ms
st ds note although cui cf set bb gb
case union bb gb choose cf ms
ms st descendants therefore ds parent complete variable
ordering em st ms cf ds gb bb resulting cui network
depicted figure maximal dimension four
structure obtained utility function example largely
objective domain knowledge may common sourcing departments
demonstrates important aspect graphical modeling captured cui networks
encoding qualitative information domain thus making process extracting
numeric information easier structure cases differs among decision makers
cases makes sense extract data domain experts
reuse structure across decision makers

representation elicitation
section derive expression local node data terms conditional utility functions discuss elicit utility information judgments relative
preference differences
node data representation
representing u cui network requires determine f g functions
cui condition node functions f g represent affine transformation
conditional utility function u x z z p x strategically equivalent utility
functions values x transformation functions ui keeney raiffa


fiengel wellman

figure cui network example maximal number parents leading
dimension

transformation functions cui represented terms conditional
utility functions u x z u x z suitable values see
determine f g solving system two equations
applying specific values
u x z f x z g x z u x z
u x z f x z g x z u x z
yielding
u x z u x z

u x z u x z
f x z u x z g x z u x z
g x z




restriction choice decision maker must
indifferent given x current assignment z example
may differ single attribute strictly essential
elicitation measurable value functions
utility function used choosing action leads known probability
distribution outcomes obtained elicitation preferences
lotteries example even chance gambles certainty equivalents keeney
raiffa preceding discussion fully specify u via cui network
need obtain numeric values conditional utility functions u x p x
u x p x node x significantly easier obtaining full
n dimensional function general done methods described preference


ficui networks

elicitation literature keeney raiffa section elicitation
conducted cases choice assumed done certain outcomes
cardinal representation nevertheless useful
particular applications point specific attributes used
measurement others common example preferences quasi linear
special attribute money time kind preferences represented
measurable value function mvf krantz et al dyer sarin mvf
cardinal utility function defined certainty represents preference differences
shown dyer sarin ui analogous interpretation mvf
similar resulting decomposition extension cui straightforward
case monetary scaling preference difference pair outcomes
represents difference willingness pay wtp potential way elicit
mvf asking decision maker provide wtp improve one outcome
another particularly outcomes differ single attribute
interpretation first observe g x z elicited terms
preference differences outcomes possibly differ single attribute
convey qualitative preference information assume x x x
g x z ratio preference difference given x
difference given x z fixed outcomes hence x complements
g x z increasing x x substitutes g x z decreasing
x holds regardless choice since cui x z attributes
maintain complementarity substitutivity relationship x note
g x z iff cai x z another important observation though x
may depend z practice expect level dependency x
depend particular value z case g becomes single dimensional function
independent z
f x z intuitively speaking measurement wtp improve x x
value u x z multiplied g x z compensate interaction
x allowing f independent perform elicitation obeying
topological order graph function u x z readily calculated
node data stored predecessors choose let z z zk
ordered children precede parents since x fixed reference point
k

x

u x z
fzi
gzj fn






j

obtain f x z follows first elicit preference difference function
e x z u x z u x z assuming g x z already obtained calculate
f x z e x z g x z u x z

optimization
one primary uses utility functions support optimal choices selecting
outcome action complexity choice depends specific properties


fiengel wellman

environment choice among limited set definite outcomes recover
utility outcome compact representation choose one
highest value instance software example section would normally choose
among enumerated set vendors packages procurement scenario assume
utility mvf usually choose outcome yields highest utility
net price case decision uncertainty choice among actions
lead probability distributions outcomes optimal choice selected computing
expected utility action action involves reasonably bounded number
outcomes non zero probability done exhaustive computation
nevertheless often useful directly identify maximal utility outcome given
quantitative representation utility case direct choice constrained outcome
space optimization serves subroutine systematic optimization procedures adapted probabilistic reasoning literature nilsson
may useful heuristic aid optimization expected utility
net utility mentioned set possible outcomes large explicit
exhaustive choice
section develop optimization discrete domains
many cases cui networks provide leverage optimization cai maps
typical graphical optimization particularly efficient
graph restricted tree
optimization cui trees
definition cui tree cui network node one child
note type graph corresponds upside version standard directed tree forest
let cui tree assume wlog connected forest turned
tree adding arcs upside sort tree number roots
single leaf denote root nodes ai ak child ai bi
root node ai define function
hai bi arg max u bi
ai ai

denoting selection optimal value ai corresponding given value child
proposition hai depend reference values chosen ai bi
function hai call optimal value function ovf ai stored node ai
since used descendants described
next bi children single child ci number parents simplicity exposition present case bi two parents ai aj maximization
function bi defined
hbi ci arg max u ci b hai b haj b
bi bi

words pick optimal value bi assignment child parents
since already know optimum parents value bi need
consider optimum evaluation domain bi


ficui networks



b

figure cui networks optimization examples tree b non tree
external child set ai aj bi ci external ancestors
hence ai aj bi cui rest given ci therefore maximization
depend reference values rest attributes similarly computing
hci di child ci bi value ci fixes bi parents ci
fixes ai aj ancestors ci last computation leaf x evaluates
value x value x causes cascade fixed values ancestors
meaning finally get optimal choice comparing x complete assignments
illustrate execution cui tree figure compute
ha c optimal value value c similarly hb c next
compute hc e value e e compare outcomes e c ha c hb c c c
node compute hd f independent nodes node e compute
f arg maxe u f e hc e hb hc e ha hc e node ignored
node f
hf arg max u f f hd f hc f hb hc f ha hc f
f f

note candidate value f causes cascade optimal values
ancestors solution hf resulting values ancestors
optimization iterates nodes topological order xi
calculates ovf hxi xj xj child xi calculation uses values
ovf stored parents therefore involves comparison xi xj
outcomes case numeric data nodes available factoring time takes
recover utility value outcome n runs time
n maxi xi
optimization general dags
common way graphical apply tree non trees
junction graph however common notion junction graph dag polytree



fiengel wellman

whereas specialized unit tree instead optimize cui
network directly generalizing tree
tree case fixing value child node x sufficient order separate
x rest graph excluding ancestors consider value child
time determines values ancestors general dag longer
sufficient ovf depend children provide sufficient
information determine values x hence generalize notion
scope x sc x defined set nodes ovf x must
depend order iterative computation ovf sound
generalization dag similar tree let g
cui network x xn variable ordering agrees topological order
g parents precede children xi according ordering compute hxi sc xi
instantiation sc xi optimal instantiation selected backwards
hxn since node xi reached values sc xi already selected
sc xi computed follows scan variables xi xn order scanning
xj add xj sc xi following conditions hold
undirected path xj xi
path blocked node already sc xi
conditions sc xi includes children xi non xi ancestor since
precede xi ordering addition sc xi includes nodes needed
block paths reach xi ancestors example xk xj children
ancestor xa xi k j xj must sc xi path
xa children xj blocked xj unless another path xi
sc xi children xk ordered later xi sc xi
children
figure b example cui network tree consider scopes
variable ordering b j scope roots equals set children
path reaching meaning sc e sc b e f
sc c e f h sc j scope must include child g siblings e
f paths h j blocked g e f therefore sc g e f e
must include child g younger sibling f h blocked path e
f sc e non blocked one c
sc e therefore sc e g f h
similarly g h scope f due paths b c respectively hence
sc f g h j g addition child h add j whose path g f b e
blocked sc g h j finally sc h sc j sc j
next step computing ovf requires compare set outcomes
differ xi co xi co xi set nodes whose ovf determined
xi sc xi hence covered xi maximization valid condition
cui xi co xi xi co xi sc xi must hold formally define co xi
establish proved appendix
definition co xi smallest set nodes satisfied following condition
j sc xj xi sc xi co xi xj co xi




ficui networks

intuitively xj covered xi node xk xi scope scope xi
determined according scope covered xi figure b f co g
sc f g sc g e co g sc e g sc g f moreover
sc g e f hence co g well similarly b co g
example nodes preceding g ordering covered necessarily
case
lemma assignment xi sc xi sufficient determine hxj xj
co xi
lemma node xi cui xi co xi xi co xi sc xi meaning
xi nodes covers cui rest given sc xi
reaches node xi every choice assignment sc xi xi determines optimal values co xi lemma compare xi assignments
differ values xi co xi select optimal one value hxi sc xi
optimum depend nodes xi co xi sc xi due lemma
illustrate examine happens reaches node g figure b
point hx sc x known x precedes g showed nodes
co g indeed assignment sc g g h j directly determines value
hf together hf determines value cascades
rest nodes cui network shows cui b c e f g given
h j therefore maximization operation choice value g valid
regardless value
performance optimization exponential size largest
scope plus one note would seriously affected choice variable ordering note case tree specializes tree optimization
since node path ancestor xi except ancestors xi must precede xi ordering therefore case
sc xi ch xi meaning hxi function single child
expect perform better similar cui network tree
cui tree optimization cai maps
optimization procedure cui trees particularly attractive due relatively
low amount preference information requires cases comparison
done directly without even data comprises utility function aside
direct benefit cui networks interested applying structure
optimization cai maps domains cai map simple effective way
decompose utility function however optimization cai maps exponential
size tree width requires full data terms utility functions
maximal cliques cai map happens simple structure tree
cp condition faster optimization used however could case
cai map tree subtle cui conditions might exist cannot
captured cai conditions enough conditions could detected turn cai
map cui tree close enough tree could take advantage simple
optimization procedure


fiengel wellman



b

c

figure cai map containing cycle b enhanced cai map expressing cui
f b c equivalent cui tree
definition let g v e cai map enhanced cai map directed graph
g v pair arcs u v v u implies dependency
edge u v e addition node x cui x x x x denoting
set nodes x call pair arcs u v v u hard
link arc u v v u
weak link
cai map enhanced cai map generated replacing edge u v
arcs u v v u require additional cui conditions
entailed cai map however additional cui conditions
detected might able remove one directions figure shows
cai map contains cycle could detect cui f b could remove
direction b get enhanced cai map figure b set cui conditions
implied enhanced cai map expressed cui tree figure c
proposition consider enhanced cai map g let ordering nodes
g g dag removing arcs u v whose direction
agree removed arc v ancestor u g g cui
network
hard links removal u v leaves v parent u condition trivially
holds obtain cui tree key therefore variable ordering
enough weak links removed turn graph tree maintaining condition
proposition large number variables exhaustive search variable orderings
may feasible however many cases effectively constrained restricting
number orderings need consider example order break cycle
figure b clear weak link b must implied ordering
could ancestor b way happen given existing hard links
c parent b parent c parent
proposition let c yk cycle enhanced cai map g assume
c contains exactly one weak link yi yi k yk let variable


ficui networks

ordering agree order path p yi yi yk yi
cui network constructed g proposition tree
therefore cycle contains one weak link leads constraint variable
ordering cycles one weak link lead constraints c
another weak link yj yj one two links must removed ordering must
agree path p path p yj yj yk yj assuming
wlog j paths yi yj yj yi required p
p therefore used constraints similarly intersection
paths implied number weak links cycle
sometimes constraint set lead immediate contradiction case
search redundant significantly reduce search space however
major bottleneck preference handling usually elicitation rather computation
therefore given good variable ordering may lead reduction optimization
simpler qualitative task eliminating need full utility elicitation
would worthwhile invest required computation time

nested representation
section conclude node data represented conditional utility functions depending node parents may best dimensionality
achieved network perhaps set z p x internal structure
sense subgraph induced z maximal dimension lower z
case could recursively apply cui decomposition conditional utility functions
subgraph somewhat resembles hierarchical decomposition done
utility trees keeney raiffa von stengel example represent f
network figure require conditional utility function u x x x x x x
however network see cui x x x x x x hence decompose conditional utility
u x x x x x x f x x g x x u x x x x x x
use notation f g since f g functions
top level decomposition
nested representation generated systematically decomposing
local function node x xs utility factors whose argument set z p x
form clique performing complete cui decomposition subgraph
induced z keeping mind resulting factors depend x
proposition let g cui network utility function u u
represented set conditional utility functions depending set attributes
corresponding undirected cliques g
discussion
reduces maximal dimensionality representation size
largest maximal clique cui network instance applying example


fiengel wellman

data cui utility factors u x p x u x p x node x
note
determine order x xn
j n initialization
kj xj p xj scope utility factors
yj kj rest variables
q j p xj
j dj
end
j n
dj loop factors node j
qij kji clique
let gij subgraph induced qij
decompose uji kji according cui network gij
foreach xr qij
let dr dr current num factors xr denote dr
adr aij xj qdr p xr qij
krd adr xr qdr yrd krd
store cui factors xr u krd yrd u krd yrd
yrd yrd fixed assignments yrd
end
remove factors u kji yji kji yji
end
end
end
recursive cui decomposition process node reverse topological
order outermost loop decompose factor stored current node whose parents
form clique parent xr innermost loop store resulting
factors defined xr xr parents p xi
qdr clique adr original factor depends time factor
decomposed set q shrinks empty k clique



ficui networks

section reduces dimensionality four three important implication
somewhat relax requirement large cui sets variables end
many parents reduce dimensionality technique example
illustrates technique aggregates lower order cui conditions effective
decomposition
procedure may generate complex functional form decomposing function multiple
times factors become restricted clique ultimate number factors
required represent u exponential number nesting levels however
decomposition cui network subgraph therefore typically
reduces number entries maintained
expect typical application technique composition rather
decomposition execute without actual data resulting list factors
per node conditional utility functions cliques graph means
elicitation purposes restrict attention conditional utility functions
maximal cliques obtained sufficient data factors
recover original convenient cui network representation function
store example therefore effective dimensionality
elicitation maximal cliques storage efficient usage requires
potentially higher dimension original cui network typically less
concern
proposition cui networks shown achieve weakly
better dimensionality cai maps since representations reduce dimensionality
size maximal clique
example
illustrate simple example consider domain four attributes
b c following cui conditions
cui b c cui c b cui
cui network corresponding variable ordering b c depicted figure
since cui sets small single variable variable ordering must
node two parents meaning dimensionality three nesting operation
combines lower order conditions reduce dimensionality two
initially utility function represented conditional utility functions listed
according corresponding nodes column level table remove
three dimensional factors need decompose functions node according
cui network b c contains arcs proceeds follows
u b c
fb c gb c u b c fb c gb c fc b gc b u b c
u b c
fb c gb c u abc fb c gb c fc b gc b u b c


fiengel wellman

figure nesting example

resulting functions fbi c gbi c fci b gci b functions
gbi c represented conditional utility functions u b c di
u b c di similarly two functions delete factors
u b c di add lower dimensional factors second column parents
b c though multiply number factors store four
factors conditional utility functions subdomains deleted higher dimensional
factors continues node b loops six factors factors
defined set parents b clique decomposes store
factors next table column case factor column level could
decomposed would add level column store simple example
decomposition possible
fbi c

attr

b
c


level cui net
u b c u b c
u b c
u b c
u b c
u b c
u b c

level
u b c
u b c
u b c
u b c

u b c
u b c
u b c
u b c

table nested cui decomposition
reverse direction mentioned done follows run without
data resulting table table without actual utility values
elicit data non deleted factors limited maximal cliques next
recover convenient level cui representation table computing
deleted factor going rightmost columns left function factors
stored parents

conclusions
present graphical representation multiattribute utility functions conditional utility independence cui networks provide potentially compact representation
multiattribute utility function via functional decomposition lower dimensional functions depend node parents cui weaker independence condition


ficui networks

previously employed basis graphical utility representations allowing common
patterns complementarity substitutivity relations disallowed additive
proposed techniques obtain verify structural information use construct network elicit numeric data addition developed optimization
performs particularly well special case cui trees cases
leveraged efficient optimization cai maps finally functions
decomposed set maximal cliques cui network
technique cui networks achieve dimensionality graphical
cai gai decompositions yet broadly applicable independence conditions

acknowledgments
preliminary version published proceedings aaai
work supported part nsf grant iis stiet program nsf
igert grant grateful thorough work anonymous reviewers
whose suggestions provided valued help finalizing

appendix proofs
lemma
proof let z x c b simply apply two independence
conditions consequentially define f g
u u xy z f z g z uy f z g z f bc
g bc uy b b f zby c g zby c u b
since z b c ax last decomposition equivalent decomposition
condition cui x b
proposition
proof cai condition stronger cui condition cai x cui x
cui x cui network node xi must case nodes
cui given parents descendants obvious since xi cai
nodes given parents children
lemma
proof determine hxj sc xj needs determined xi sc xi
done scope covered therefore recursively determined
assignment xi sc xi
lemma
first introduce two additional lemmas
lemma ch xi co xi xi sc xi co xi


fiengel wellman

proof let xj xi co xi ch xj xj xi proof immediate
ch xi sc xi assume xj co xi know definition ch xj
sc xj xi sc xi co xi proves lemma
lemma xi co xi co xi
proof let xj xi clearly j therefore xj
sc xi let xj sc xj
j j undirected path xj xj blocked sc xj j
xj sc xi xi unblocked path xj xi otherwise
let xj sc xj apply argument xj continue xjk
xy sc xjk point xy sc xi xi path xy xjk xj xj xi
recursion halts note includes empty scopes proving xj co xi
left prove co xi co xi let xj co xi xj applying
first part proof xj get co xj definition co xj get
j w sc w xj w sc xj w co xj co xi
need prove cases w xi sc xi co xi
w xj immediately w co xi
w sc xj xj co xi get w xi w sc xi w co xi
w co xj repeat argument recursively z sc w note z precedes
w therefore recursion halt point

lemma let x xi co xi lemma x external ancestors
lemma external children x sc xi therefore x x ch x
x sc xi immediate proposition
proposition
proof let x node g let x x g x p x dn x
g definition g know cai x cui x let
x

x g
p x x g arc x removed
meaning dn x therefore must case
therefore hence
cui x
proposition
proof g become cui tree cycle least one weak link must removed
since yi yi weak link c must removed proposition
variable ordering must ensure yi ancestor yi done
path according order p might another path yi yi let p
path combination p p another cycle c therefore must
broken since p comprises strong links must least one weak link u v
p u v removed v must ancestor u done
path cycle c path includes p another path exists
repeat argument stage get larger cycle ci larger path


ficui networks

pi pi therefore point one path pi must guaranteed
variable ordering path includes p
proposition
proof leads functional decomposition cliques
outer loop maintains following iteration properties
aij qij p
uij defined kji
aij xj clique
properties hold trivially initialization assume valid factors
stored network outer iteration j inner iteration next
remain valid factor urd created iteration j
definition adr aij xj previous iteration definition qdr
aij qdr qij p definitions qij qdr get p xj qij qdr
together yields
urd factor cui decomposition uji kji gij scope contains
nodes affected last cui decomposition e kji qij
aij xj adr ii node xr iii parents p xr fixed
uji e p xr kji know kji aij xj qij xj
p xr

xr p xj p xr aj similar argument property
therefore p xr kji qij ii iii get krd adr xr qdr
adr clique definition property previous iteration xr qij
therefore property previous iteration xr p aij xr
qij p xj last containment immediate definition qij therefore xr
parent members adr adr xr clique
iteration properties krd clique qdr non empty decomposition
applied reach node r outer loop end process factors
defined cliques removed factors remained defined
cliques u still represented set factors since applied
valid decompositions factors

references
abbas attribute dominance utility decision analysis
bacchus f grove graphical preference utility eleventh
conference uncertainty artificial intelligence pp montreal
boutilier c bacchus f brafman r ucp networks directed graphical
representation conditional utilities seventeenth conference uncertainty
artificial intelligence pp seattle


fiengel wellman

boutilier c brafman r hoos h h poole reasoning conditional ceteris paribus preference statements fifteenth conference uncertainty
artificial intelligence pp stockholm
debreu g topological methods cardinal utility theory arrow k karlin
suppes p eds mathematical methods social sciences stanford university
press
dyer j sarin r k measurable multiattribute value functions operations

fishburn p c independence utility theory whole product sets operations

fishburn p c interdependence additivity multivariate unidimensional
expected utility theory international economic review
fishburn p c nondecomposable conjoint measurement bisymmetric structures
journal mathematical psychology
fuhrken g richter k polynomial utility economic theory
gonzales c perny p gai networks utility elicitation ninth international
conference principles knowledge representation reasoning pp
whistler bc canada
gorman w structure utility functions review economic studies

keeney r l raiffa h decisions multiple objectives preferences
value tradeoffs wiley
krantz h luce r suppes p tversky foundations measurement
vol academic press york
la mura p shoham expected utility networks fifteenth conference
uncertainty artificial intelligence pp stockholm
nilsson efficient finding probable configurations
probabilistic expert systems statistics computing
pearl j probabilistic reasoning intelligent systems morgan kaufmann
pearl j paz graphoids graph logic reasoning relevance
relations du boulay b ed advances artificial intelligence ii north holland
york
tatman j shachter r dynamic programming influence diagrams

von stengel b decomposition multiattribute expected utility functions annals
operations
wellman p doyle j modular utility representation decision theoretic
first international conference artificial intelligence systems pp college park md




