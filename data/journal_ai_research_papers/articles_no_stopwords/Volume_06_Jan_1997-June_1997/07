Journal Artificial Intelligence Research 6 (1997) 223-262

Submitted 2/97; published 6/97

Flaw Selection Strategies Partial-Order Planning

Martha E. Pollack

Department Computer Science Intelligent Systems Program,
University Pittsburgh, Pittsburgh, PA 15260 USA

David Joslin

Computational Intelligence Research Laboratory,
University Oregon, Eugene, 97403 USA

pollack@cs.pitt.edu
joslin@cirl.uoregon.edu

Massimo Paolucci

Intelligent Systems Program,
University Pittsburgh, Pittsburgh, PA 15260 USA

paolucci@pitt.edu

Abstract

Several recent studies compared relative eciency alternative aw selection
strategies partial-order causal link (POCL) planning. review literature,
present new experimental results generalize earlier work explain
discrepancies it. particular, describe Least-Cost Flaw Repair (LCFR) strategy
developed analyzed Joslin Pollack (1994), compare strategies,
including Gerevini Schubert's (1996) ZLIFO strategy. LCFR ZLIFO make
different, apparently con icting claims effective way reduce searchspace size POCL planning. resolve con ict, arguing much benefit
Gerevini Schubert ascribe LIFO component ZLIFO strategy better
attributed causes. show many problems, strategy combines
least-cost aw selection delay separable threats effective reducing
search-space size, without excessive computational overhead. Although
strategy thus provides good default, show certain domain characteristics
may reduce effectiveness.

1. Introduction
Much current research plan generation centers partial-order causal link (POCL)
algorithms, descend McAllester Rosenblitt's (1991) SNLP algorithm. POCL
planning involves searching space partial plans, successors node
representing partial plan P refinements P . search problem, POCL
planning requires effective search control strategies.
POCL planning, search control two components. first, node selection, involves choosing partial plan refine next. partial plan selected
refinement, planner must perform aw selection, involves choosing either
threat resolve open condition establish.
past years, several studies compared relative eciency alternative aw selection strategies POCL planning extensions (Peot & Smith, 1993;
Joslin & Pollack, 1994; Srinivasan & Howe, 1995; Gerevini & Schubert, 1996; Williamson &
Hanks, 1996). studies motivated least part tension
attractive formal properties POCL algorithms, limitations putting

c 1997 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiPollack, Joslin, & Paolucci
practical use result relatively poor performance. date, POCL
algorithms cannot match eciency so-called industrial-strength planners
SIPE (Wilkins, 1988; Wilkins & Desimone, 1994) O-Plan (Currie & Tate, 1991; Tate,
Drabble, & Dalton, 1994). Flaw selection strategy shown significant
effect eciency POCL planning algorithms, thus researchers viewed
design improved aw selection strategies one means making POCL planning
algorithms practical.
paper, review literature aw selection strategies, present new
experimental results generalize earlier work explain discrepancies
it. particular, describe Least-Cost Flaw Repair (LCFR) strategy developed
analyzed Joslin Pollack (1994), compare strategies, including
Gerevini Schubert's ZLIFO strategy (1996). LCFR ZLIFO make different,
apparently con icting claims effective way reduce search-space size
POCL planning. resolve con ict, arguing much benefit Gerevini
Schubert ascribe LIFO component ZLIFO strategy better attributed
causes. show many problems, strategy combines least-cost aw
selection delay separable threats effective reducing search-space size,
without excessive computational overhead. Although strategy thus
provides good default, show certain domain characteristics may reduce
effectiveness.

2. Background
2.1 Node Flaw Selection

Although main ideas POCL planning literature
two decades, serious efforts comparing alternative plan generation algorithms
relatively recent. made comparisons possible development set
clear algorithms provable formal properties, notably TWEAK (Chapman, 1987),
SNLP (McAllester & Rosenblitt, 1991). algorithms intended add
functionality known planning methods, rather capture essential elements
known methods readily analyzable fashion.
analyzing POCL algorithms, researchers found useful decouple search
control strategy underlying plan refinement process. Figure 1 generic POCL
algorithm, highlight two search decisions.1 Following convention, use
CHOOSE indicate node selection backtracking point, SELECT indicate
aw selection not. given node may lead solution, may necessary
backtrack consider alternative nodes. hand, node lead
solution, solution found regardless order aws selected.
See Weld's (1994) tutorial paper discussion difference.
generic algorithm sketched figure must supplemented search strategies
implement CHOOSE SELECT operators. POCL algorithms perform
node selection using best-first ranking computes function number
1. Various versions well-known algorithm appeared literature (Weld, 1994; Russell &
Norvig, 1995; Kambhampati, Knoblock, & Yang, 1995). version give corresponds directly
given Williamson Hanks (1996).

224

fiFlaw Selection Strategies

POCL (init,goal)

dummy-plan make-skeletal-plan(init,goal).
nodes f dummy-plan g.
nodes empty do:

CHOOSE (and remove) partial plan P nodes. (Node Selection)
P aws
return P
else do:

SELECT aw P. (Flaw Selection)

Add refinements P nodes.
Return failure (because nodes become empty without aw-free plan found.)
Figure 1: Basic POCL Planning Algorithm
steps (denoted ), open conditions (OC ), unsafe conditions (UC , i.e., threats)
partial plan. Gerevini Schubert (1996) argued that, general, steps
open conditions included ranking function, adopt strategy
experiments, except otherwise indicated.
chosen node, POCL planning algorithm must select aw|open condition threat|within node repair. Open conditions repaired establishment,
consists either adding new step unifying condition effect (along
causal link new step condition), else simply adding new
causal link existing step unifying effect. use term repair cost
denote number possible ways repair aw.
open condition o, repair cost R(o) + + N ,

= number conditions initial state unify given
current binding constraints,
= number conditions effects existing plan steps unify
given current binding constraints, counting existing plan
steps constrained occur step associated o,
N = number conditions effects operators library
unify given current binding constraints.
Note time, repair cost open condition resolved may either
increase, new steps might achieve condition added plan, decrease,
steps already plan constrained temporal ordering variable binding
longer achieve condition.
considering cost threat repair, useful distinguish nonseparable
separable threats. Nonseparable threats consist step S1 effect E ,
causal link S2; F; S3 , E F complementary literals necessarily unify:
either complementary ground literals (E :F ), else complementary
literals E 's variables identical with, forced binding constraint
225

fiPollack, Joslin, & Paolucci
equivalent variable position F (e.g., E = p(x; ) F = :p(x; z ),
currently binding constraint = z ).2
Nonseparable threats repaired two ways: promoting S1, requiring
occur S3 , demoting it, requiring occur S2 . course, already
existing temporal ordering constraints may block one repair options,
two possible repairs.3 time, repair cost unresolved
nonseparable threat decrease.
separable threat consists step S1 effect E , causal link S2 ; F; S3 ,
E F complementary literals unified, unification
forced (e.g., E = p(x) F = p(y ) exist binding
constraint x = ). circumstances, threat may disappear subsequent variable
binding blocks unification. (A nonseparable threat may disappear subsequent
ordering constraint effect imposing promotion demotion.) repair cost
separable threat may higher nonseparable threat:
promotion demotion used, separation, involves forcing variable
binding blocks unification. Separation introduce one repair unbound
variable threat. example, effect P (x; y; z ) threatens S2 ; :P (t; u; v ); S3 ,
three possible repairs: x 6= t, 6= u, z 6= v . nonseparable threats,
repair cost separable threat remains unresolved decrease time.

2.2 Notation

aw selection strategies discussed literature typically
given idiosyncratic names (e.g., DUnf, LCFR, ZLIFO). useful, comparing them,
precise unifying notation. therefore specify aw strategy sequence
preferences. strategy begins attempting find aw satisfies first preference;
unable so, looks aw satisfies second preference;
on. ensure POCL algorithm using strategy complete, sequence
preferences must exhaustive: every aw must satisfy preference. aw satisfies
one preference strategy, assume first match counts.
principle, preference could identify feature aw. practice, however, aw
selection strategies made use small number features: type aw
(open condition, nonseparable threat, separable threat), number ways
repaired, time introduced plan. Often, one aw
given feature, case tie-breaking strategy may specified choosing
among relevant aws.
therefore describe preference using following notation

f aw typesgrepair cost rangetie-breaking strategy
2. alternative approach treats cases E F threats; required make planner
systematic, i.e., guaranteed never generate node (McAllester & Rosenblitt,
1991).
3. Conditional planners make use additional method threat resolution|confrontation|but
ignore within paper (Peot & Smith, 1992; Etzioni, Hanks, Weld, Draper, Lesh, & Williamson,
1992). Joslin (1996) provides detailed account generalizing treatment aws types
planning decisions.

226

fiFlaw Selection Strategies
indicates preference aw f specified type types, provided
repair cost f falls within range values specified. (If restrictions
repair cost, omit repair cost range.) one aw meets criteria,
tie-breaking strategy applied select among them.
abbreviate aw type \o" (for open condition), \n" (for nonseparable threat),
\s" (for separable threat). use abbreviations common tie-breaking strategies,
e.g., \LC" (least (repair) cost), \LIFO" \R" (Random). case LC, choice
must made aws repair cost, LIFO selection used.
Thus, example
fng0-1R
specifies preference nonseparable threats repair cost zero one;
one aw meets conditions, random selection made among them. use
term forced describe aws repair cost one less.
example complete aw selection strategy then:
fng0-1R / fogLIFO / fn,sgR
strategy would begin looking forced nonseparable threat; one aw
meets criterion, strategy would select randomly among them. forced
nonseparable threats, would look open condition, repair cost, using
LIFO scheme select among them. Finally, neither forced nonseparable threats
open conditions, would randomly select either unforced nonseparable threat
separable threat.
distinguished aw type maximum repair cost, one
hand, tie-breaking strategy, other, easy describe strategies use
something aw type main criterion selection. example, pure
LIFO selection strategy would encoded follows. (Henceforth, give name
strategy boldface preceding specification.)
LIFO fo,n,sgLIFO

3. Flaw Selection Strategies

begin reviewing aw selection strategies proposed studied
literature date.

3.1 Threat Preference Delay

original SNLP algorithm (McAllester & Rosenblitt, 1991) adopted aw selection
strategy threats resolved open conditions, early versions
widely used UCPOP planning system (Penberthy & Weld, 1992) same.4 SNLP
specify principle selecting among multiple threats multiple opens; UCPOP
used LIFO purpose. Employing notation above, describe basic
UCPOP strategy as:
4. current version UCPOP (v.4), aw selection strategy run default DSep
strategy, discussed below. historical reasons, maintain name DSep strategy,
use UCPOP older default strategy.

227

fiPollack, Joslin, & Paolucci

UCPOP fn,sgLIFO / fogLIFO
first study alternative aw selection strategies done Peot Smith (1993),
relaxed requirement threats always resolved open conditions,
examined several strategies delaying resolution threats. analyzed five
different strategies delaying repair threats; these, two provably superior:
DSep DUnf.
DSep (Delay Separable Threats) motivated observation sometimes separable threats simply disappear planning process blocking variable bindings
introduced. pointed earlier, nonseparable threats may \disappear",
typically less frequent. Moreover, resolution threats|separable
nonseparable|were delayed, nonseparable threats would disappear early side
effect step reuse, making disappearance even less frequent.
DSep strategy therefore defers repair separable threats end
planning process. However, UCPOP, continues give preference nonseparable
threats:
DSep fngLIFO / fogLIFO / fsgLIFO
Actually, Peot Smith specify tie-breaking strategy choosing among multiple
threats; indicated LIFO. explored three different tie-breaking
strategies selecting open conditions (FIFO, LIFO, least-cost); list LIFO,
one specify alternatives:
DSep-LC fngLIFO / fogLC / fsgLIFO
DSep-FIFO fngLIFO / fogFIFO / fsgLIFO
Peot Smith prove search space generated POCL planner using DSep
never larger search space generated using UCPOP strategy. result
holds tie-breaking strategy open conditions LIFO FIFO, LC,
point return later paper.
Peot Smith's second successful strategy DUnf (Delay Unforced Threats). makes
use notion forced aws. stated earlier, aw forced
one possible way repair it. DUnf strategy delays repair unforced threats:
DUnf fn,sg0LIFO / fn,sg1LIFO / fogLIFO / fn,sg2-1LIFO
define DUnf-LC DUnf-FIFO manner analogous used DSep-LC
DSep-FIFO:
DUnf-LC fn,sg0LIFO / fn,sg1LIFO / fogLC / fn,sg2-1LIFO
DUnf-FIFO fn,sg0LIFO / fn,sg1LIFO / fogFIFO / fn,sg2-1LIFO
Peot Smith proved DUnf strategy would never generate larger search
space either remaining two strategies examined. proved
DSep DUnf incomparable: exist planning problems DSep
generates smaller search space DUnf, problems reverse
true.
228

fiFlaw Selection Strategies
Peot Smith support theoretical results DSep DUnf experiments
showing that, least domains examined, strategies result significant decrease search-space size. decrease search correlated diculty
problem, consequently, problems get dicult, strategies reduce
search time well space. is, large enough problems, \pay for"
overhead.
follow-on work, Peot Smith (1994) describe strategy called DMin, generates smaller search spaces DSep DUnf. DMin combines process pruning
dead-end nodes process aw selection. gives preference forced threats.
forced threats, checks see whether remaining nonseparable threats
could repaired simultaneously. so, leaves threats, selects open condition repair; open conditions, presumably selects remaining
unforced threat repair. hand, impossible repair unforced,
nonseparable threats, node dead end, pruned search
space. Note dead-end nodes recognized immediately, even without
complete consistency checking DMin. unrepairable aw cannot
subsequently become repairable, hence, node containing aw repair cost zero
dead end. Consequently, aw selection strategies give highest priority
aws (Joslin & Pollack, 1996; Joslin, 1996).

3.2 Least-Cost Flaw Repair

Peot Smith's work provided foundation subsequent exploration leastcost aw repair (LCFR) strategy (Joslin & Pollack, 1994). hypothesized power
DUnf strategy might come relative ordering threats open conditions, instead fact DUnf effect imposing partial preference
least-cost aw selection. DUnf always prefer forced threat, which, definition
repair cost one; thus, cases forced threat, DUnf
make low-cost selection. cases forced threats?
DUnf select among open conditions, assuming any. hypothesis correct, version DUnf makes selection using least-cost strategy (i.e.,
DUnf-LC) ought perform better version uses one strategies (i.e.,
bare DUnf DUnf-FIFO). fact, selection low-cost repairs causing
search-space reduction, idea treating threat resolution differently open
condition establishment ought abandoned. Instead, strategy always selects
aw minimal repair cost, regardless whether threat open condition,
ought show best performance. Least-Cost Flaw Repair (LCFR) strategy:5

LCFR fo,n,sgLC
strong similarities LCFR certain heuristics proposed studied literature constraint satisfaction problems (CSPs).
perhaps surprising, given aw selection POCL planning corresponds
5. LCFR strategy similar branch-1/branch-n search heuristics included O-Plan system
(Currie & Tate, 1991). contribution original work topic isolate strategy
examine detail.

229

fiPollack, Joslin, & Paolucci
fairly strong ways variable selection constraint programming. Flaws POCL planner represent decisions yet made, must made plan
complete; unbound variables play similar role constraint satisfaction problems
(CSPs).6 Although exist number heuristics selecting variable branch
solving CSP (Kumar, 1992), one well-known heuristic often quite effective
fail first principle, picks variable \most constrained" selecting
variable branch on. simple common implementation fail first principle
selects variable smallest domain (Tsang, 1993).
intuition behind fail first principle one prune dead-end regions
search early possible. unbound variables tightly constrained
likely points current partial solution \brittle" sense,
branching variables hope find contradiction (if one exists) quickly.
Similarly, LCFR thought selecting \most constrained" aws, resulting
better pruning.
similar heuristic adopted recent work controlling search hierarchical task network (HTN) planning, Dynamic Variable Commitment Strategy (DVCS). DVCS, LCFR, based minimal-branching heuristic. Experimental
analyses demonstrate DVCS generally produces well-focused search (Tsuneto, Erol,
Hendler, & Nau, 1996).
initial experimental results, presented Joslin Pollack (1994), similarly
supported hypothesis uniform least-cost aw repair strategy could highly
effective reducing size search space POCL planning. experiments,
compared LCFR four strategies: UCPOP, DUnf, DUnf-LC, defined
above, new strategy, UCPOP-LC previously called LCOS (Joslin & Pollack,
1994):
UCPOP-LC fn,sgLIFO / fogLC
included UCPOP-LC help verify search-space reduction results preference
aws minimal repair costs. true, UCPOP-LC ought generate
smaller search space DUnf, even though delay threats. results
expected. UCPOP DUnf, least-cost selection open conditions,
generated largest search spaces; UCPOP-LC generated significantly smaller spaces;
DUnf-LC LCFR generated smallest spaces.
time, observed LCFR incurred unwieldy overhead, often taking
longer solve problem UCPOP, despite fact searching far fewer
nodes. part due particularly inecient implementation LCFR
using, part resulted fact computing repair costs bound take
time simply popping stack (as LIFO strategy), finding aw particular
type (as strategy prefers threats). therefore explored approximation strategies,
reduce overhead aw selection accepting inaccuracy repair cost
calculation. example, developed \Quick LCFR" (or QLCFR) strategy,
calculates repair cost aw once, aw first encountered.
successor node aw remains unresolved, QLCFR assumes repair
6. planning problems cast CSPs planner Descartes (Joslin & Pollack, 1996; Joslin,
1996), correspondence even direct.

230

fiFlaw Selection Strategies
cost changed. experiments QLCFR showed promising means
making least-cost approach suciently fast pay overhead. Additional
approximation strategies studied Srinivasan Howe (1995), experimented
three variations LCFR, along fourth, novel strategy moves
control burden user.

3.3 Threat Delays Revisited

Recently, Gerevini Schubert (1996) revived idea aw selection strategy
treat open conditions threats differently, suggested LIFO
used tie-breaking strategy deciding among open conditions. combine
ideas ZLIFO strategy:
ZLIFO fngLIFO / fog0LIFO / fog1New / fog2-1LIFO / fsgLIFO
ZLIFO strategy gives highest priority nonseparable threats, forced open
conditions. neither nonseparable threats forced open conditions, ZLIFO
select open condition using LIFO. defers separable threats end
planning process. name ZLIFO intended summarize overall strategy. \Z"
stands \zero-commitment", indicating preference given forced open conditions:
repairing these, planner making commitment beyond must made
node ultimately refined complete plan. \LIFO" indicates
strategy used selecting among unforced open conditions.
open conditions repair cost exactly one, ZLIFO strategy uses tiebreaking strategy called \New". prefers repair open condition
established introducing new action repair open condition
established using element start state. Gerevini Schubert state
preference \gave improvements context Russell's tire changing domain . . .without
significant deterioration performance domains" (1996, p. 104). However
difference apparently dramatic, Gerevini believes implementation
detail, though open possibility study might show preference
significant (Gerevini, 1997).
Gerevini Schubert make three primary claims ZLIFO:
1. POCL planner using ZLIFO tend generate smaller search space one
using pure LIFO strategy.
2. reduction search space using ZLIFO, relative LIFO, correlated
complexity planning problem (where complexity measured number
nodes generated pure LIFO strategy).
3. ZLIFO performs comparably LCFR relatively easy problems, generates
smaller search space harder problems.
first two claims consistent found earlier LCFR studies.
LIFO strategy pays attention repair costs, ZLIFO does, least indirectly,
initial preference nonseparable threats, repair cost
two, secondary preference forced opens.
231

fiPollack, Joslin, & Paolucci
third claim harder square earlier LCFR study, LIFObased strategies, UCPOP DUnf, generated much larger search spaces
least-cost based strategies. explains ZLIFO's performance? Gerevini Schubert
answer question follows:
Based experience search processes AI general, [a LIFO] strategy
much recommend it, simple default. first place, overhead
cost low compared strategies use heuristic evaluation lookahead
prioritize goals. well, tend maintain focus achievement
particular higher level goal regression . . .rather attempting achieve
multiple goals breadth-first fashion. [p. 103]
point overhead important one. ZLIFO relatively inexpensive control
strategy, competing strategy better job pruning search space may
end paying excessive overhead. second point addresses question
asking here, namely, ZLIFO could produce smaller search spaces. Gerevini
Schubert go say that:
[m]aintaining focus single goal advantageous least
goals achieved independent. instance, suppose two
goals G1 G2 achieved various ways, choosing particular
method achieving G1 rule methods achieving G2.
maintain focus G1 solved, attempting G2,
total cost solving goals sum costs solving
independently. switch back forth, solutions
goals involve searches encounter many dead ends, combined cost
much larger. tend search unsolvable subtree
G1 search tree repeatedly, combination various alternatives
G2 search tree . . .. [p. 103]
certainly plausible explanation. key remaining question, course, extent explanation carries many planning problems involve
interacting goals.

4. Experimental Comparison Flaw Selection Strategies

discussed previous section, several different proposals made
literature best reduce size search space POCL planning.
include:
giving preference threats open conditions;
giving preference certain kinds threats (either separable forced threats),
delaying threats open conditions resolved;
giving preference aws minimal repair cost;
giving preference recently introduced aws.
232

fiFlaw Selection Strategies
Moreover, different strategies combined preference schemes different ways,
apparently con icting claims made effects preferences
search-space size.
resolve con icts, performed experimental comparisons POCL planners
using variety aw selection strategies. gave particular attention comparison
LCFR ZLIFO, apparently con icting claims. LCFR generates
search space treating aws uniformly, using least-cost approach choose among
them. ZLIFO distinguishes aw types (non-separable threats, open conditions,
separable threats), uses modified LIFO approach select among aws
class. original LCFR studies would led us predict ZLIFO would generate
larger search spaces LCFR, Gerevini Schubert found opposite
true. aimed, then, explain discrepancy.
principal focus search-space size, two reasons. First, puzzle raised
LCFR ZLIFO one space, time. mentioned earlier, easy see
ZLIFO would faster LCFR, even per node basis. least-cost strategy
must compute repair costs, ZLIFO need pop stack containing right type
aws. puzzle us ZLIFO faster, generated smaller
search spaces. Second, believe understanding effect search control strategies
search-space size lead development approximation techniques produce
speed-up well; QLCFR strategy (Joslin & Pollack, 1994) Srinivasan Howe's
strategies (1995) examples this.
However, secondary goal analyze time requirements strategies
compared, therefore collected timing data experiments. discuss
Section 4.6, strategy tends generate smallest search space achieves enough
reduction pay overhead, large.

4.1 Experimental Design

conduct comparison, implemented set aw selection strategies UCPOP
v.4.7 Table 1 lists strategies implemented. Except LCFR-DSep DUnfGen, discussed later, implemented strategies described Section
3.
tested strategies three problem sets, used earlier work (Joslin
& Pollack, 1994) Gerevini Schubert's (1996):
1. Basic Problems, 33 problems taken test suite distributed
UCPOP system. include problems variety domains, including
7. Note experiments earlier LCFR paper (Joslin & Pollack, 1994) Gerevini
Schubert's (1996) ZLIFO paper run using earlier version (v.2) UCPOP. result,
number nodes produced experiments sometimes differs reported
two papers. appears largely due fact UCPOP v.4 puts elements new set
open conditions onto aw list reverse order way UCPOP v.2 (Gerevini,
1997). discussed Sections 4.3{4.5, studied uence ordering change
collecting data using modified version UCPOP v.4 reversed order conditions
entered open list. resulting numbers similar previously published,
identical, leading us conclude additional subtle differences v.2
v.4. However, experiments report run using version
UCPOP, believe fair comparison strategies.

233

fiPollack, Joslin, & Paolucci
UCPOP
UCPOP-LC
DSep
DSep-LC
DUnf
DUnf-LC
DUnf-Gen
LCFR
LCFR-DSep
ZLIFO

fn,sgLIFO / fogLIFO
fn,sgLIFO / fogLC
fngLIFO / fogLIFO / fsgLIFO
fngLIFO / fogLC / fsgLIFO
fn,sg0LIFO / fn,sg1LIFO / fogLIFO / fn,sg2-1LIFO
fn,sg0LIFO / fn,sg1LIFO / fogLC / fn,sg2-1LIFO
fn,s,og0LIFO / fn,s,og1LIFO / fn,s,og2-1LIFO
fo,n,sgLC
fn,ogLC / fsgLC
fngLIFO / fog0LIFO / fog1New / fog2-1LIFO / fsgLIFO
Table 1: Implemented Flaw Selection Strategies

blocks world, Monkeys Bananas problem, Pednault's (1988) briefcase-andoce problem, Russell's (1992) tire changing world, etc.
2. Trains Problems, three problems taken TRAINS transportation domain
(Allen, Schubert, & et al., 1995).
3. Tileworld Problems, seven problems taken Tileworld domain (Pollack &
Ringuette, 1990).
ran strategy problem twice. first time, imposed node limit,
10,000 nodes basic problems, 100,000 nodes Trains Tileworld
problems. second time, imposed time limit, 100 seconds basic problems,
1000 seconds Trains Tileworld problems.
Gerevini Schubert experimented several different node selection strategies
Trains Tileworld domains, facilitate comparison used node
selection strategies did. basic problems, used + OC .
reporting results, make use raw counts nodes generated
computation time seconds taken, compute measure badly strategy
performed given problem set problems. call measure %-overrun,
compute follows. Let minimum node count given problem
strategies tested, let c node count particular strategy .
%-overrun(S ) = [(c , m)=m] 100
Thus, example, best strategy given problem generated 100 nodes,
strategy generated 200 nodes would 100 %-overrun problem.
strategy best given problem %-overrun 0 problem.
Section 4.6, make use similarly computed %-overruns computation time.
strategy hit node limit, set c relevant node limit (10,000 100,000)
compute node-count %-overrun.8 Similarly, strategy hit time limit, used
relevant time limit (100 1000) compute computation-time %-overrun.
8. way UCPOP completes basic iteration, sometimes go somewhat beyond
specified node limit terminating run. cases, used node limit value, rather
actual number nodes generated, computation %-overrun.

234

fiFlaw Selection Strategies
Online Appendix provides raw data|node counts computation-time taken|
experiments conducted; includes computed %-overruns.
conducting experiments these, one set either node- time limit
cutoff strategy/problem pair. However, always danger cutoffs
unfairly bias data, limits set way certain strategies fail
would instead succeeded limits increased slightly. carefully analyzed
data help eliminate possibility bias; details given Appendix A.

4.2 Value Least-Cost Selection

described overall experimental design, turn analysis results. begin, sought re-establish claims originally made earlier
work. Specifically, wanted first reconfirm, using larger data set, least-cost
aw selection effective technique reducing size search space generated
POCL planner. therefore ran experiment compared node
counts five strategies earlier studied|LCFR, DUnf, DUnf-LC, UCPOP,
UCPOP-LC|plus one new one, DUnf-Gen, explained below.
results experiment shown Figures 2 3. former log-log
scatter plot, showing performance six strategies 33 problems
basic set. problems sorted minimal number nodes generated
six strategies. Thus, left-hand side graph includes problems
least one six strategies found relatively easy, right-hand side
problems hard six strategies. omitted problems none
six strategies able solve. actual number nodes generated
strategy plotted Y-axis, minimal number nodes problem,
X-axis. LCFR's performance highlighted line connecting data points.
graph shows that, general, LCFR generates small search spaces problem set,
relative strategies class. six problems LCFR
within 10% minimum. Three Get-Paid/Uget-Paid class
problems|including two \hardest" problems (UGet-Paid3 UGet-Paid4).
discuss class problems Section 4.5.
alternative view data given Figure 3, shows aggregate performance six strategies, i.e., average node-count %-overrun basic
problems. seen, LCFR smallest average %-overrun.
Figures 4 5 present similar views data Tileworld domain, Figure
6 gives data Trains problems. Trains domain, six strategies
able solve easiest problem (Trains1), simply show actual node counts
Figure 6. omitted two data points, extreme
inclusion graph made impossible see differences among strategies:
LCFR DUnf-Gen + OC + UC node selection took 28,218, 35,483 nodes,
respectively, solve problem.
Tileworld Trains problems, observed sorts interactions node aw selection strategies seen Gerevini Schubert. Specifically,
LCFR performs relatively poorly + OC Tileworld problems, performs
poorly + OC + UC Trains problems. However, paired
235

fiPollack, Joslin, & Paolucci
10000

Nodes Generated (Log)

1000
UCPOP
DUnf
UCPOP-LC
DUnf-LC
DUnf-Gen
LCFR
100

10
10

100

1000

10000

Minimum Number Nodes Generated (Log)

Figure 2: Basic Problems: Node Counts Strategies without Forced-Flaw Delay
node-selection strategies, LCFR produces smallest search spaces strategies
class.
sum, LCFR tend produce smaller search spaces strategies
class. question remains. LCFR uses least-cost strategy, side effect
prefer forced aws, since forced aws low-cost aws. therefore
conceivable LCFR's performance mostly even fully due preference forced
aws, (or greatly) uenced use least-cost strategy unforced
aws. hypothesis could explain DUnf-LC consistently outperforms DUnf,
UCPOP-LC consistently outperforms UCPOP.
address issue included DUnf-Gen experiment. DUnf-Gen
simple strategy prefers forced aws kind, otherwise uses LIFO regime.
would expect DUnf-Gen LCFR perform similarly, since frequently make
decision. Specifically, select aw node
forced aw; differ unforced aws, DUnf-Gen
selecting recently introduced aw LCFR selecting least-cost aw.
practice, DUnf-Gen's performance closely mimicked LCFR's. basic
problem set marginally worse LCFR. fact, marginally better
reverse order planner adds preconditions new step
open list (see Section 4.4). LCFR somewhat better DUnf-Gen
Trains Tileworld problems, true regardless order
preconditions added open list, extent better varies.
Thus, data inconclusive value using least-cost strategy unforced
aws. LCFR clearly benefits selecting forced aws early (as side effect preferring
236

fiFlaw Selection Strategies
3500

3000

Node-Count %-Overrun

2500

2000

1500

1000

500

0
LCFR

DUnf-Gen

UCPOP-LC

UCPOP

DUnf-LC

DUnf

Figure 3: Basic Problems: Aggregate Performance Strategies without Forced-Flaw Delay
100000

10000

Nodes Generated (Log)

UCPOP S+OC
UCPOP-LC S+OC
DUnf S+OC
DUnf-LC S+OC
DUnf-Gen S+OC

1000

DUnf-Gen S+OC+UC
DUnf-Gen S+OC+.1UC+F
LCFR S+OC
LCFR S+OC+UC
LCFR S+OC+.1UC+F
100

10
10

100

1000

Minimum Number Nodes Generated (Log)

Figure 4: Tileworld Problems: Node Counts Strategies without Forced-Flaw Delay
237

fiPollack, Joslin, & Paolucci

35000

30000

25000

20000

15000

10000

5000

UCPOP
S+OC

UCPOP-LC
S+OC

DUnf
S+OC

DUnf-LC
S+OC

LCFR
S+OC

DUnf-Gen
S+OC

DUnf-Gen
S+OC+.1UC+F

DUnf-Gen
S+OC+UC

LCFR
S+OC+.1UC+F

LCFR
S+OC+UC

0

Figure 5: Tileworld Problems: Aggregate Performance Strategies without Forced-Flaw
Delay
800

700

Nodes Generated

600

500

400

300

200

100

UCPOP
S+OC

DUnf
S+OC

DUnf-Gen
S+OC+.1UC+F

DUnf-Gen
S+OC

UCPOP-LC
S+OC

DUnf-LC
S+OC

LCFR
S+OC

LCFR
S+OC+.1UC+F

0

Figure 6: Trains 1: Node Counts Strategies without Forced-Flaw Delay
238

fiFlaw Selection Strategies
least-cost aws), may matter whether continues use least-cost strategy
unforced aws. indeed generally sucient use least-cost strategy
forced aws, ZLIFO's performance somewhat less puzzling, since ZLIFO prefers
forced aws. However puzzle completely resolved. all, DUnf-Gen,
ZLIFO, prefers forced aws makes LIFO-based decisions unforced aws,
performance clearly inferior LCFR's, neither clearly superior.
Even use LIFO unforced aws obviously increase search-space,
neither appear decrease it.

4.3 Comparing LCFR ZLIFO

next turn direct comparison LCFR ZLIFO. Gerevini Schubert compared
strategies problems. get complete picture performance
LCFR ZLIFO, ran problems three problem
sets.
data basic problem set shown Figure 7. sorted problems
difference node counts produced LCFR ZLIFO. Thus, problems
near left-hand side graph LCFR generated smaller search
space, problems near right-hand side ones ZLIFO space
advantage. omit problems neither strategy could solve.
seen, problems (notably R-Test2, Move-Boxes, Monkey-Test2),
LCFR generates much smaller search space ZLIFO, problems (notably
Get-Paid4, Hanoi, Uget-Paid4, Uget-Paid3), ZLIFO generates much smaller search
space. problems LCFR worse strategies mentioned
Section 4.2.
noted earlier, one major changes UCPOP v.2 v.4
v.4 puts elements new set open conditions onto aw list reverse
order v.2. ordering may make difference, particularly LIFO-based
strategies. Indeed, researchers suggested one reason LIFO-based strategy
may perform well exploit decisions made system designers
writing domain operators, since sense natural list constraining
preconditions operator first (Williamson & Hanks, 1996). therefore collected
data modified version UCPOP, preconditions step entered
onto open condition reverse order would normally entered.
discuss results modification detail next two sections,
now, simply present node counts LCFR ZLIFO reversed precondition
insertion, Figure 8. seen, problems reversing
precondition ordering significant effect (notably FIXB MonkeyTest2),
large LCFR ZLIFO showed relative performance.
problems basic set, dicult discern obvious pattern performance. contrast Gerevini Schubert suggest, seem clear
correlation diculty problem, measured terms nodes generated,
relative performance LCFR ZLIFO. (In fact, little dicult determine strategy's node-count serve measure diculty.)
hand, true aggregate, ZLIFO generates smaller search spaces LCFR
239

fiR-TEST2

240

UGET-PAID3

UGET-PAID4

MONKEY-TEST2

HANOI

GET-PAID4

GET-PAID3

GET-PAID2

UGET-PAID2

UGET-PAID

ROAD-TEST

FIX5

FIX4

GET-PAID

FIXA

R-TEST1

FIX2

TEST-FERRY

MONKEY-TEST1

FIX1

SUSS-ANOM

TWO-INV3

FIX3

RAT-INSULIN

PRODIGY-SUSS

TWO-INV4

FIXB

MOVE-BOXES

Nodes Generated (Log)

R-TEST2

UGET-PAID3

UGET-PAID4

HANOI

GET-PAID4

GET-PAID3

TEST-FERRY

GET-PAID2

UGET-PAID2

HO-DEMO

TOW-INV3

UGET-PAID

TOW-INV4

ROAD-TEST

FIX5

FIX4

GET-PAID

R-TEST1

SUSS-ANOM

FIX2

FIX1

FIX3

MONKEY-TEST1

PRODIGY-SUSS

RAT-INSULIN

FIXA

MONKEY-TEST2

MOVE-BOXES

Nodes Generated (Log)

Pollack, Joslin, & Paolucci

10000

1000

100
LCFR -Default

ZLIFO -Default

10

1

Figure 7: Basic Problems: Node Counts LCFR ZLIFO

10000

1000

100
ZLIFO-Reversed

LCFR-Reversed

10

1

Figure 8: Basic Problems: Node Counts LCFR ZLIFO Reversed Precondition
Insertion

fiFlaw Selection Strategies
basic problems. default precondition ordering, ZLIFO obtains average
%-overrun 212.62, LCFR obtains 647.57. reverse ordering, ZLIFO's average
%-overrun 244.24, LCFR's 914.87. fact LCFR's relative performance
worse preconditions entered reverse direction results primarily
failure MonkeyTest2 reverse direction.
Trains data scant. Neither LCFR ZLIFO solve hardest problem,
Trains3, regardless whether preconditions entered default reverse
order. (In fact, none strategies studied able solve Trains3.) But, least
preconditions entered default order, ZLIFO solve Trains2,
LCFR cannot. reverse precondition insertion, neither strategy solve Trains2.
data shown Figure 9. Note LCFR's performance essentially
node-selection strategies shown.
Finally, Tileworld data, default order precondition insertion, shown
Figure 10. place LCFR clearly generates smaller search spaces
ZLIFO. plotted data reverse precondition insertion,
strategies affected change. however, one notable
exception: reversed insertion, ZLIFO (with + OC + :1UC + F ) much better|
indeed, well LCFR. return uence precondition ordering
Tileworld problems Section 4.5.
now, however, enough observe experiments show ZLIFO
tend generate smaller search spaces LCFR. basic problem set,
regardless order precondition insertion, Trains one ordering (and
worse LCFR ordering), well LCFR
Tileworld problems preconditions inserted reverse order.
exception Tileworld problem set preconditions inserted default order:
LCFR better.

4.4 Value Separable-Threat Delay

first two analyses essentially aimed replicating earlier results literature,
namely LCFR results ZLIFO results. next address question
square results one another.
Recall LCFR ZLIFO differ two key respects. First, LCFR treats aws
uniformly, ZLIFO distinguishes among aw types, giving highest preference nonseparable threats, medium preference open conditions, lowest preference separable
threats. Second, LCFR uniformly makes least-cost selections, ZLIFO uses LIFO
strategy secondary aw-type preferences (but giving preference forced open
conditions). comparisons made Section 4.2 suggest use LIFO strategy
unforced aws best make little difference search-space size, may possibly lead generation larger search spaces. hand, first difference
presents obvious place look relative advantage ZLIFO. all, ZLIFO
delaying separable threats, Peot Smith demonstrated effectiveness
approach DSep strategy.
Peot Smith's proof DSep never generate larger search space UCPOP
transfer LCFR. planning problems LCFR generate
241

fiPollack, Joslin, & Paolucci

100000

Nodes Generated (Log)

10000

1000
ZLIFO S+OC
ZLIFO S+OC+.1UC+F
LCFR S+OC
LCFR S+OC+.1UC+F
100

10

1
TRAINS1 (Default)

TRAINS1 (Reverse)

TRAINS2 (Default)

Figure 9: Trains Problems: Node Counts LCFR ZLIFO
100000

Nodes Generated (Log)

10000

ZLIFO S+OC

1000

ZLIFO S+OC+.1UC+F
LCFR S+OC
LCFR S+OC+UC
LCFR S+OC+.1UC+F
100

10

1
TW-EZ

TW-1

TW-2

TW-3

TW-4

TW-5

TW-6

Figure 10: Tileworld Problems: Node Counts LCFR ZLIFO
242

fiFlaw Selection Strategies
smaller search space DSep. proof relies fact that, DSep, open conditions
selected order, regardless threats selected. selection
threat LCFR uence repair cost open condition (e.g., promoting
action longer available potential establisher condition),
turn affect order remaining open conditions selected.
Nonetheless, despite fact one can't guarantee delaying separable threats
lead reduction search-space size, motivation behind DSep still appealing:
separable threats may often simply disappear subsequent planning, naturally lead reduction search-space size. reason, implemented slightly
modified version LCFR, called LCFR-DSep, separable threats
delayed. Note relatively easy UCPOP system, provides
switch, dsep switch, turned automatically delay repair
separable threats. defined earlier Table 1, definition LCFR-DSep is:
LCFR-DSep fn,ogLC / fsgLC
hypothesis ZLIFO's reduction search-space size largely due
incorporating DSep approach, LCFR-DSep ought \the best worlds",
combining advantages LCFR's least-cost approach advantages DSep
approach.
basic problems, LCFR-DSep proved smallest average node-count %overrun basic problems strategies tested. Moreover, true even
reversed order preconditions operator added open
list. Figure 11 gives average node-count %-overruns unmodified UCPOP v.4
(labeled \default") modified version reversed precondition ordering
(labeled \reverse"). Reversing ordering effect conclusion LCFR-DSep
generates smallest search spaces problems; fact, general little
affect relative performance strategies all. notable exception,
mentioned earlier, relative performance LCFR DUnf-Gen ips.
detailed comparison, plot node counts basic problems LCFR,
ZLIFO, Separable-Threat Delay strategies Figure 12. ease comparison,
show data sorted difference LCFR ZLIFO's node counts.
problems near left-hand side graph are, again, LCFR generated
smaller search space ZLIFO; problems near right
generated larger search space. seen, LCFR-DSep nearly always well
as, better LCFR. much better ZLIFO problems LCFR
good at. much better LCFR problems ZLIFO good at.
However, ZLIFO still outperforms LCFR-DSep latter class problems.
Another view data given Figure 13, log-log scatter plot basic
problems, strategies studied. time highlighted LCFR-DSep's
performance. Although problems produce minimal
search space, performance individual problems actually quite good, consistent
good aggregate performance.
least basic problems, augmenting simple LCFR strategy delay
separable threats reduces search space expected. turn suggests
LCFR generates larger search space ZLIFO, due large part fact
243

fiPollack, Joslin, & Paolucci

4000

3500

Node-Count %-Overrun

3000

2500

Default

2000

Reverse

1500

1000

500

0
LCFRDSep

DSepLc

ZLIFO

DSep

LCFR

DUnfGen

UC
POP-LC

UCPOP

DUnfLC

DUnf

Figure 11: Basic Problems: Aggregate Performance Strategies

10000

Nodes Generated (Log)

1000

ZLIFO
100

LCFR
LCFR-DSep

10

UGET-PAID3

HANOI

UGET-PAID4

GET-PAID4

GET-PAID3

GET-PAID2

TEST-FERRY

HO-DEMO

UGET-PAID2

TOW-INV3

TOW-INV4

UGET-PAID

ROAD-TEST

FIX4

PRODIGY-P22

R-TEST1

FIX5

GET-PAID

FIX2

SUSS-ANOM

FIX1

FIX3

PRODIGY-SUSS

MONKEY-TEST1

FIXA

RAT-INSULIN

MOVE-BOXES

MONKEY-TEST2

R-TEST2

1

Figure 12: Basic Problems: Node Counts LCFR, ZLIFO, DSep Strategies
244

fiFlaw Selection Strategies
10000

1000
Nodes Generated (Log)

UCPOP
DSep
DUnf
UCPOP-LC
DUnf-LC
ZLIFO
DUnf-Gen
LCFR
DSep-Lc

100

LCFR-DSep

10
10

100

1000

10000

Minimum Number Nodes Generated (Log)

Figure 13: Basic Problems: Node Counts Strategies
delay separable threats. ZLIFO's primary advantage relative LCFR seems
use LIFO strategy unforced threats, rather separable-threat
delay component. Combining separable-threat delay least-cost approach yields
strategy tends generate smaller search spaces either strategy
basic problem set. However, analysis Trains Tileworld problem sets reveals
situation little complicated comparison basic problems would
suggest, discuss next section.

4.5 Need Domain Information

Tileworld Trains domains problems challenge overly simple conclusions might
draw basic problem sets. consider set problems turn.
4.5.1 Tileworld Problems

Tileworld domain involves grid tiles holes, goal fill hole
tile. goal achieved fill operator, two preconditions:
agent must hole, must holding tile. encoding, agent
hold four tiles time. go operator used achieve (sub)goal
hole, pickup operator used achieve (sub)goal holding tile.
normal way, go precondition location, namely whatever location
agent move from. Pickup precondition location tile.
problems Tileworld problem set differ one another number holes
agent must fill: problem adds another hole.
245

fiPollack, Joslin, & Paolucci
100000

LCFR S+OC+UC
10000

LCFR S+OC+.1UC+F
DUnf-Gen S+OC+UC

Nodes Generated (Log)

DUnf-Gen S+OC+.1UC+F
DUnf-Gen S+OC
LCFR S+OC
LCFR-DSep S+OC+UC
ZLIFO S+OC+.1UC+F

1000

ZLIFO S+OC
LCFR-DSep S+OC+.1UC+F
DSep-LC S+OC
LCFR-DSep S+OC
DUnf S+OC
DSep S+OC
100

UCPOP-LC S+OC
DUnf-LC S+OC
UCPOP S+OC

10
10

100

1000

Minimum Number Nodes Generated (Log)

Figure 14: Tileworld Problems: Node Counts Strategies
Figures 14 gives log-log plot various strategies Tileworld problems,
preconditions entered default order. Note LCFR (S + OC + UC )
strategy highlighted. Three strategies almost indistinguishable LCFR
(S + OC + UC ), namely, LCFR (S + OC + :1UC + F ), DUnf-Gen (S + OC + UC )
DUnf-Gen(S + OC + :1UC + F ). strategies performed worse.
easily seen Figure 15, gives aggregate performance leading strategies:
able solve seven Tileworld problems. fact, leading strategies
able solve seven Tileworld problems without generating 1800 nodes
problem. contrast, remaining strategies failed least one, four,
seven problems, given limit 100,000 nodes generated.
originally surprising us Tileworld problems, delaying separable threats actually seems hurt performance. strategies best
LCFR DUnf-Gen delay separable threats. LCFR-DSep, ZLIFO, DSep-LC,
DSep generated larger search spaces, contrast would predicted
given experiments basic problem set.
understand result, looked detail planning trace problems.
revealed Tileworld domain, early resolution separable threats
important advantage: imposes turns correct temporal ordering
steps going tile (to pick up), carrying hole. Virtually
strategies create subplans one shown Figure 16. goals involve filling
holes, planners insert steps go pick tile, go hole.
point, two separable threats: (1) effect going hole, :at(X ), threatens
link going tile picking (at(Z )), (2) effect going
246

fiFlaw Selection Strategies
100

90

80

Node-Count %-Overrun

70

60

50

40

30

20

10

0
LCFR
S+OC+UC

LCFR
S+OC+.1UC+F

DUnf-Gen
S+OC+UC

DUnf-Gen
S+OC+.1UC+F

DUnf-Gen
S+OC

Figure 15: Tileworld Problems: Aggregate Performance Leading Strategies

at(X)

GO(X,Y)

at(Y)
loc(H,Y)
holding(T)

~at(W)
at(W)

GO(W,Z)

at(Z)
tile(T)
loc(T,Z)

~at(X)

FILL(H)

filled(H)

PICKUP(T)

Figure 16: Typical Partial Plan Tileworld Domain
tile, :at(W ), threatens link going hole filling (at(Y )).
threats separable, X W unbound; planner yet know
traveling from. one valid temporal ordering
resolve threats: going tile must precede picking tile, turn must
precede going hole. temporal ordering determined, planning goes
smoothly.
contrast, ordering decision made, planner often \get lost",
attempting find plans goes location hole
hole tile. many ways attempt this, many different
247

fiPollack, Joslin, & Paolucci
100000

LCFR-DSep S+OC+.1UC+F
10000

ZLIFO S+OC+.1UC+F
LCFR S+OC+UC

Nodes Generated (Log)

LCFR S+OC+.1UC+F
DUnf-Gen S+OC+.1UC+F
LCFR-DSep S+OC+UC
DUnf-Gen S+OC
DUnf-Gen S+OC+UC

1000

DUnf-LC S+OC
LCFR-DSep S+OC
DSep-LC S+OC
LCFR S+OC
ZLIFO S+OC
UCPOP-LC S+OC
100

DUnf S+OC
DSep S+OC
UCPOP S+OC

10
10

100

1000

Minimum Number Nodes Generated (Log)

Figure 17: Tileworld Problems: Node Counts Reversed Precondition Insertion
tiles select, many different locations move among. planner may try many
alternatives determining fundamental inconsistency
plans, destined fail. larger number holes filled,
worse situation becomes.
Sometimes planner may make right decision temporal ordering even
deferred separable threats. faced partial plan Figure 16, planner
select threat, select among several open conditions. attempt
establish precondition going hole (at(X )) reusing effect going
tile (at(Z )), reverse, attempt establish precondition going
tile (at(W )) reusing effect going hole (at(X )). course, first
solution right one, includes critical temporal ordering constraint,
second eventually fail.
order open conditions selected determine two
choices planner makes. preconditions entered default order, planners
delay separable threats end making latter, problematic choice. contrast,
preconditions entered reverse order, planners make turns
correct choice. Thus, experiments reversed precondition
insertion, see different pattern performance, shown Figures 17{18.9
preconditions entered reverse order, larger number strategies
perform well, solving problems. particular, + OC + :1UC + F node9. preserve readability, Figure 18, used \(1)" denote + OC , \(2)" + OC + U C ,
\(3)" + OC + U C + :1F .

248

fi249
UCPOP (1)

DUnf (1)

DSep (1)

UCPOP-LC (1)

LCFR (1)

ZLIFO (1)

DSep-LC (1)

LCFR-DSep (1)

DUnf-LC(1)

DUnf-Gen (2)

DUnf-Gen (1)

LCFR-DSep (2)

DUnf-Gen (3)

LCFR (3)

LCFR (2)

ZLIFO (3)

LCFR-DSep (3)

Node-Count %-Overrun

Flaw Selection Strategies

50000

45000

40000

35000

30000

25000

20000

15000

10000

5000

0

Figure 18: Tileworld Problems: Aggregate Performance Strategies Reversed
Precondition Insertion

fiPollack, Joslin, & Paolucci
25000

20000

15000
TRAINS1
TRAINS2
10000

5000

DSep-LC
S+OC

LCFR-DSep
S+OC

LCFR-DSep
S+OC+.1UC+F

ZLIFO
S+OC+.1UC+F

DUnf
S+OC

LCFR-DSep
S+OC+UC

ZLIFO
S+OC

DSep
S+OC

0

Figure 19: Trains Problems: Node Counts
selection, performance LCFR, DUnf-Gen, ZLIFO, LCFR-DSep virtually indistinguishable. important note leading strategies delay separable
threats|LCFR DUnf-Gen|are affected much reversal precondition insertion Tileworld problems; fact, LCFR's performance identical cases.
contrast, strategies use separable-threat delay|LCFR-DSep, ZLIFO, DSepLC|all perform much better reverse precondition insertion. explained
analysis above.
sum, important Tileworld domain planner recognize,
early possible, certain required temporal orderings
steps successful plan. Every successful plan involve going tile going
hole, although exibility order multiple holes visited,
interleaving picking tiles dropping holes. strategies
studied, two different methods led temporal constraint added
plan. added planner selected separable threat resolve,
added selected one particular precondition resolve another.
4.5.2 Trains Get-Paid Problems

Trains domain present somewhat different variation original conclusions.
Trains domain involves set locations objects, goal transport various
objects specific starting locations specified destinations. Gerevini Schubert
studied three Trains problems. strategies failed successfully complete
hardest (Trains3) within either 100,000 node 1000 second limit. Moreover,
many failed second hardest (Trains2). Caution must therefore taken
interpreting results, limited number data points.
250

fiFlaw Selection Strategies
Figure 19 gives node counts Trains domain, preconditions inserted
default order. show strategies able solve Trains1 Trains2.
results closer would predicted basic problem set
results Tileworld. particular, LCFR-DSep well, generating
much smaller search spaces LCFR. However, slightly worse ZLIFO.
Recall saw pattern performance subset basic problems,
specifically Get-Paid/Uget-Paid problems. There, LCFR-DSep improved
LCFR, generate small search spaces ZLIFO. turns
similar factors uencing sets problems, instructive consider
detail planning done ZLIFO LCFR-DSep Get-Paid/Uget-Paid problems
understand occurring.
Trains domain problems, Get-Paid/Uget-Paid problems involve moving
particular objects specified locations. Get-Paid/Uget-Paid domain three
objects: paycheck, dictionary, briefcase. generally formulated, initial
state three home, paycheck briefcase. goal deposit
paycheck bank, bring dictionary work, briefcase home.
dictionary paycheck moved briefcase. human,
solution problem obvious. dictionary must put briefcase,
must carried work, dictionary taken out. briefcase must
carried home. addition, stop must made bank, either way work
way home, point paycheck must taken briefcase
deposited.
ZLIFO LCFR-DSep take different paths solving problem. ZLIFO begins
forming plans get paycheck bank dictionary work. goals
selected first forced: one way get paycheck
bank (carry there), similarly one way get dictionary oce (carry
there). contrast, two possible ways get briefcase home: either
leaving (i.e., reusing initial state) carrying somewhere else
(i.e., adding new step). LIFO mechanism proceeds complete plans
achieving goals getting paycheck bank dictionary work,
beginning work remaining goal, getting briefcase home. point,
goal easy solve. needed plan route home wherever briefcase
end two errands.
LCFR-DSep, ZLIFO, begins selecting forced goals getting dictionary
oce getting paycheck bank. However, instead next completing
plans goals, LCFR-DSep continues greedily select least-cost aws, thus
begins work achieving goal getting briefcase home. Unfortunately,
point clear briefcase needs moved home from, hence LCFRDSep begins engage lengthy process \guessing" briefcase
end tasks, planned tasks.10
10. diculty LCFR-DSep encounters greedily picking low-cost aws might reduced
lookahead several planning steps, determine accurate repair cost. approach
taken branch-n mechanism O-Plan (Currie & Tate, 1991). Significant overhead involved
strategy, however.

251

fiPollack, Joslin, & Paolucci
key decision Get-Paid/Uget-Paid domain|and, turns out, Trains
domain|is related to, subtly different key decision Tileworld domain.
Get-Paid/Uget-Paid Trains, key insight planner
important temporal ordering goals. goal getting briefcase home
going achieved goal taking dictionary work. However,
recognition constraint affected separable-threat delay,
Tileworld. Instead, happens domains higher-cost aw interacts
lower-cost one, causing latter become fully constrained.
tempting think finally case LIFO-based strategy
advantageous. all, example, completely determining
achieve one goal, make much easier know solve another goal. use
ZLIFO (or alternative LIFO-based strategy) guarantee interactions
high- lower-cost aws exploited. particular interactions
among two unforced aws, order goals agenda lead ZLIFO
make inecient choice. Thus, modified problem briefcase
work initial state, ZLIFO LCFR-DSep solved problem quickly
(178 nodes ZLIFO 157 LCFR-DSep). Note modification removes
problematic interaction low-cost high-cost aw.
Finally, note effectiveness LIFO strategies heavily dependent
order preconditions entered onto open list. Figure 20 gives
node counts Trains domain reverse precondition insertion.
plot strategies solve Trains 1 Trains2. case,
two strategies: LCFR-DSep DSep-LC. strategies rely LIFO
open-condition selection, ZLIFO, DSep, DUnf-Gen, UCPOP, significantly worse
preconditions correct order. extent LIFO
helps domains, appears ability exploit decisions made
system designers writing domain operators, suggested Williamson
Hanks (1996).

4.6 Computation Time
covered key questions set address: relative effects
alternative search-control strategies search-space size, and, particular,
reconcile apparently con icting approaches LCFR ZLIFO? concluded
LCFR-DSep combines main advantages reducing search-space size two
strategies, namely LCFR's use least-cost selection mechanism, least forced aws,
ZLIFO's use separable-threat delay. final question concerns price one
pay use LCFR-DSep|or matter, alternative strategies. achieve
reduction search-space size, necessary spend vastly time processing?
strategies pay themselves?
answer questions, collected timing data experiments. Figures 21
22 gives data basic problems, experiments run node
limit run time limit. (As detailed Appendix A, results
experiments node limit time limit similar.) saw
little uence precondition ordering basic problems, analyze data
252

fiFlaw Selection Strategies
30000

25000

20000

TRAINS1

15000

TRAINS2

10000

5000

0
LCFR-DSep
S+OC+UC

LCFR-DSep
S+OC+.1UC+F

LCFR-DSep
S+OC

DSep-LC
S+OC

Figure 20: Trains Problems: Node Counts Reversed Precondition Insertion
350

300

Computation-Time %-Overrun

250

200
Time Limit
Node Limit
150

100

50

0
DSep-Lc

ZLIFO

LCFR-DSep

DSep

Figure 21: Basic Problems: Aggregate Computation Time Performance Leading Strategies
default precondition ordering. show one graph strategies, another
includes \leading strategies", make possible see distinctions among
them.
253

fiPollack, Joslin, & Paolucci
30000

Computation-Time %-Overrun

25000

20000

Time Limit

15000

Node Limit

10000

5000

0
DSepLc

ZLIFO

LCFRDSep

DSep

UCPOP

UC
POP-LC

DUnfGen

LCFR

DUnfLC

DUnf

Figure 22: Basic Problems: Aggregate Computation Time Performance
timing data show LCFR-DSep does, large, pay overhead
basic problems generating smaller search spaces (and therefore process
fewer nodes). run time limit, LCFR-DSep's time performance almost
identical ZLIFO's, despite fact repair cost computations expensive
stack-popping LIFO strategy. run node limit, LCFR-DSep
show worse time performance ZLIFO aggregate, still performs markedly better
strategies. change relative performance results cases
strategies fail node limit: LCFR-DSep takes longer generate 10,000
nodes.
Another interesting observation DSep-LC best time performance
basic problem set. perhaps surprise, DSep-LC closely
approximates LCFR-DSep. differs primarily preference nonseparable threats,
case tend low repair costs. Whenever node includes nonseparable threat, DSep-LC quickly select threat, without compute repair
costs. speed advantage outweighs cost processing extra nodes sometimes
generates.
Figures 23{26 provide timing data Trains Tileworld domains.11
real surprises. computation times taken parallel quite closely size
search spaces generated. strategies generate smallest search spaces
fastest. Trains problems, see DSep-LC serve
11. omitted strategies poorly, performing worse node- time-limit
experiments strategies graphed. Note ran reverse-order experiments
node limit.

254

fiFlaw Selection Strategies
7000

6000

Computation-Time %-Overrun

5000

4000
Default-Node Limit
Default-Time Limit
3000

2000

1000

0
LCFR
(2)

DUnfGen
(2)

LCFR
(3)

DUnfGen
(3)

DUnfGen
(1)

ZLIFO
(1)

LCFR
(1)

ZLIFO
(3)

LCFRDSep
(2)

LCFRDSep
(3)

DSep
(1)

Figure 23: Tileworld Problems: Aggregate Computation Time Performance Leading
Strategies
good approximation technique LCFR-DSep. Although generates nodes
LCFR-DSep, somewhat faster.12

5. Conclusion
paper, synthesized much previous work aw selection partialorder causal link planning, showing earlier studies relate one another,
developed concise notation describing alternative aw selection strategies.
presented results series experiments aimed clarifying effects
alternative search-control preferences search-space size. particular, aimed
explaining comparative performance LCFR ZLIFO strategies. showed
neither aw selection strategies consistently generates smaller search spaces,
combining LCFR's least-cost approach delay separable threats
included ZLIFO strategy, obtain strategy|LCFR-DSep|whose space
performance nearly always good better LCFR ZLIFO given problem.
therefore concluded much ZLIFO's advantage relative LCFR due delay
separable threats rather use LIFO strategy. Although unable
resolve question whether least-cost selection required unforced, well
forced aws, found evidence LIFO strategy unforced aws better.
hand, separable-threat delay clearly advantageous. open question exactly
advantageous. conducted preliminary experiments suggest
12. interpreting Trains timing data, important note strategies shown|notably
UCPOP, UCPOP-LC, Dunf, failed solve Trains2 within either node time limit.

255

fiPollack, Joslin, & Paolucci
900

800

Computation-Time %-Overrun

700

600

500

400

300

200

100

S+OC+UC
DUnf-Gen

S+OC
DUnf-Gen

S+OC
LCFR-DSep

S+OC
DUnf-LC

S+OC
DSep-LC

S+OC+.1UC+F
DUnf-Gen

S+OC+.1UC+F
LCFR

S+OC+UC
LCFR

S+OC+.1UC+F
LCFR-DSep

S+OC+.1UC+F
ZLIFO

S+OC+UC
LCFR-DSep

0

Figure 24: Tileworld Problems: Aggregate Computation Time Performance Leading
Strategies Reversed Precondition Insertion
2500

Computation-Time %-Overrun

2000

1500
Default - Node Limit
Default-Time Limit
1000

500

S+OC
UCPOP

S+OC
LCFR-DSep

S+OC+UC
LCFR-DSep

S+OC+.1UC+F
LCFR-DSep

S+OC
DSep-LC

S+OC+.1UC+F
ZLIFO

S+OC
ZLIFO

S+OC
DUnf

S+OC
DSep

0

Figure 25: Trains Problems: Aggregate Computation Time Performance Leading Strategies
256

fiFlaw Selection Strategies

2000
1800

Computation-Time %-Overrun

1600
1400
1200
1000
800
600
400
200

S+OC
DSep

S+OC+.1UC+F
ZLIFO

S+OC
ZLIFO

S+OC+UC
LCFR-DSep

S+OC+.1UC+F
LCFR

S+OC
DUnf-LC

S+OC
LCFR

S+OC
UCPOP-LC

S+OC
LCFR-DSep

S+OC+.1UC+F
LCFR-DSep

S+OC
DSep-LC

0

Figure 26: Trains Problems: Aggregate Computation Time Performance Leading Strategies Reversed Precondition Insertion

257

fiPollack, Joslin, & Paolucci
much search-space reduction results delaying separable threats
achieved making separation systematic, something UCPOP v.4 do.
considered question computation time, showed often LCFR-DSep
requires computation time comparable ZLIFO. LCFR-DSep therefore
seen paying computational overhead search-space reduction. Moreover,
Peot Smith's DSep-LC provides good approximation LCFR-DSep: although
produces somewhat larger search spaces, quickly.
conclusions, however, tempered fact certain clusters problems, combined strategy, LCFR-DSep, generate minimal search spaces.
saw, Tileworld problems, important recognize need
particular temporal ordering among plan steps, recognition obtained
resolving separable threats early. Trains Get-Paid/Uget-Paid domains,
matters recognizing particular effect fact achieved one
way, recognized particular aw selected|a aw happens
generally least cost aw available. lesson learned sets
problems although understand reasons LCFR ZLIFO perform
way do, combine best features create good default strategies POCL planning, clear domain-dependent characteristics
identified Trains Tileworld domains must still taken account settling
aw selection strategy domain.

Acknowledgments
Martha Pollack's work project supported Air Force Oce Scientific
Research (F49620-96-1-0403) NSF Young Investigator's Award (IRI-9258392). David
Joslin supported Rome Labs (RL)ARPA (F30602-95-1-0023) NSF CISE
Postdoctoral Research award (CDA-9625755). Massimo Paolucci supported
Oce Naval Research, Cognitive Neural Sciences Division (N00014-91-J-1694).
grateful Alfonso Gerevini providing us code used
earlier study, allowing us use experiments. would thank
Arthur Nunes Yazmine DeLeon, assisted us carrying experiments done
preliminary stages work. Finally, thank Alfonso Gerevini, Len Schubert,
Michael Wellman, anonymous reviewers helpful comments work.

Appendix A: Ruling Ceiling Effects
data collected using node limit, examined problems least
one strategies hit node limit. Table 27 gives second worst node count
problems. shows that, basic problems least one strategy
failed, least one succeeded, second-worst strategy generally created fewer
7000 nodes.
Similarly, Trains Tileworld problems, cases except TW3,
second-worst strategy took fewer 50,000 nodes (and TW3 took 89,790). Recall
node limit basic problems 10,000 nodes, Trains
Tileworld problems 100,000 nodes. thus clear strategies hit
258

fiFlaw Selection Strategies
PROBLEM
HANOI
R-TEST2
MONKEY-TEST2
MONKEY-TEST3
GET-PAID2
GET-PAID3
GET-PAID4
FIXIT
HO-DEMO
FIXB
UGET-PAID2
UGET-PAID3
UGET-PAID4
PRODIGY-P22
MOVE-BOXES
MOVE-BOXES-1

Default

Reverse
2919
7567
3744
10000
129
6431
1625
10000

TRAINS2
TRAINS3
TW-2
TW-3
TW-4
TW-5
TW-6

10000
175
4725
2894
8265
4402
10000

2952
5227
5200
10000
129
6431
1625
10000
10000
3184
175
4725
2894
9264
2687
10000

22351
100000

29585
100000

89790
3844
49024
1722

11620
401
1266
20345
3040

Figure 27: Second-Worst Node Counts Problems Failing Strategies
node limit substantially worse strategies succeed. Even
succeed increasing node limit slightly, comparative performance would still
poor.
Thus, using node limits imposed, making strategies look worse
actually are. hand, computing %-overrun, may making
strategies look better actually are, use value 10,000 (or
100,000) nodes generated strategy hits limit, actual number nodes
might take, run completion, could significantly higher. why, analyses,
considered absolute performance strategies individual problems,
aggregate performance, measured average %-overrun.
compared experiments run time limit
run node limit. basic problem set, time limit 100 seconds high
enough that, cases, strategies could compute significantly nodes
259

fiPollack, Joslin, & Paolucci
could node cutoff. Nonetheless, results almost identical. nearly
cases, strategy failed node cutoff, failed time limit cutoff.
four exceptions this:
1. Hanoi: 10,000 nodes limit, DSep fails, 100 second time limit,
succeeds, taking 46,946 nodes.
2. Uget-Paid3: 10,000 node limit, UCPOP-LC fails, 100 second
time limit, succeeds, taking 37,951 nodes.
3. Uget-Paid4: 10,000 node limit, UCPOP-LC fails, 100 second
time limit, succeeds, taking 23,885 nodes.
4. Fixit: 10,000 nodes limit, DSep-LC, UCPOP-LC, ZLIFO fail,
100 second time limit, succeed 12,732, 13,510, 20,301 nodes
respectively. strategies fail solve problem either limit.
similarly strong correspondence results obtained
Trains Tileworld problems using node limit time limit. cases,
strategy able succeed within 100,000 node limit able succeed
within 1,000 second time limit. nature problems computation
time per node great. Specifically,
1. TW3, DUnf succeeded 56,296 nodes run node limit, failed
1,000 second time limit.
2. TW4, LCFR-DSep (with S+OC node-selection strategy) succeeded 69,843
nodes, failed time limit.
3. TW5, LCFR-DSep (with S+OC+UC node-selection strategy) succeeded
49,024, failed limit.
4. TW6, LCFR (with S+OC node-selection strategy) succeeded 4,506 nodes,
failed time limit.
one case strategy fail node limit succeed within time limit:
1. TW3, DSep (with S+OC node-selection strategy) failed 100,000 node
limit, succeeded 134,951 nodes using 100 second time limit. Note
significantly worse second worst strategy, solved problem
generating 89,790 nodes.
Given close correspondence experiments node time limits,
collected node-limit data experiments reversed precondition
insertion.

260

fiFlaw Selection Strategies

References

Allen, J. F., Schubert, L. K., Ferguson, G. M., Heeman, P. A., Hwant, C. H., Kato, T., Light,
M., Margin, N. G., Miller, B. W., Poesio, M., & Traum, B. R. (1995). TRAINS
project: case study building conversational planning agent. Experimental
Theoretical Artificial Intelligence, 7, 7{48.
Chapman, D. (1987). Planning conjunctive goals. Artificial Intelligence, 32 (3), 333{378.
Currie, K., & Tate, A. (1991). O-plan: open planning architecture. Artificial Intelligence, 52, 49{86.
Etzioni, O., Hanks, S., Weld, D., Draper, D., Lesh, N., & Williamson, M. (1992).
approach planning incomplete information. Proceedings Third International Conference Principles Knowledge Representation Reasoning, pp.
115{125.
Gerevini, A. (1997). Personal communication.
Gerevini, A., & Schubert, L. (1996). Accelerating partial-order planners: techniques
effective search control pruning. Journal Artificial Intelligence Research, 5,
95{137.
Joslin, D. (1996). Passive Active Decision Postponement Plan Generation. Ph.D.
thesis, Intelligent Systems Program, University Pittsburgh.
Joslin, D., & Pollack, M. E. (1994). Least-cost aw repair: plan refinement strategy
partial-order planning. Proceedings Twelfth National Conference Artificial
Intelligence (AAAI), pp. 1004{1009 Seattle, WA.
Joslin, D., & Pollack, M. E. (1996). \early commitment" plan generation ever good
idea?. Proceedings Thirteenth National Conference Artificial Intelligence
(AAAI), pp. 1188{1193 Portland, OR.
Kambhampati, S., Knoblock, C. A., & Yang, Q. (1995). Planning refinement search:
unified framework evaluating design tradeoffs partial-order planning. Artificial
Intelligence, 76 (1-2), 167{238.
Kumar, V. (1992). Algorithms constraint-satisfaction problems: survey. AI Magazine,
13 (1), 32{44.
McAllester, D., & Rosenblitt, D. (1991). Systematic nonlinear planning. Proceedings
Ninth National Conference Artificial Intelligence, pp. 634{639 Anaheim, CA.
Pednault, E. P. D. (1988). Synthesizing plans contain actions context-dependent
effects. Computational Intelligence, 4 (4), 356{372.
Penberthy, J. S., & Weld, D. (1992). UCPOP: sound, complete, partial order planner
ADL. Proceedings Third International Conference Knowledge Representation Reasoning, pp. 103{114 Cambridge, MA.
261

fiPollack, Joslin, & Paolucci
Peot, M., & Smith, D. E. (1992). Conditional nonlinear planning. Proceedings First
International Conference AI Planning Systems (AIPS-92), pp. 189{197 College
Park, MD.
Peot, M., & Smith, D. E. (1993). Threat-removal strategies partial-order planning.
Proceedings Eleventh National Conference Artificial Intelligence, pp. 492{499
Washington, D.C.
Pollack, M. E., & Ringuette, M. (1990). Introducing Tileworld: Experimentally evaluating agent architectures. Proceedings Eighth National Conference Artificial
Intelligence, pp. 183{189 Boston, MA.
Russell, S., & Norvig, P. (1995). Artificial Intelligence: Modern Approach. Prentice Hall,
Englewood Cliffs, NJ.
Russell, S. J. (1992). Ecient memory-bounded search algorithms. Proceedings
Tenth European Conference Artificial Intelligence, pp. 1{5.
Smith, D. E., & Peot, M. A. (1994). note DMIN strategy. Unpublished manuscript.
Srinivasan, R., & Howe, A. E. (1995). Comparison methods improving search eciency
partial-order planner. Proceedings 14th International Joint Conference
Artificial Intelligence, pp. 1620{1626.
Tate, A., Drabble, B., & Dalton, J. (1994). Reasoning constraints within O-plan2.
Tech. rep. ARPA-RL/O-Plan2/TP/6 V. 1, AIAI, Edinburgh.
Tsang, E. (1993). Foundations Constraint Satisfaction. Academic Press.
Tsuneto, R., Erol, K., Hendler, J., & Nau, D. (1996). Commitment strategies hierarchical task network planning. Proceedings Thirteenth National Conference
Artificial Intelligence (AAAI), pp. 526{542 Portland, OR.
Weld, D. S. (1994). introduction least commitment planning. AI Magazine, 15 (4),
27{61.
Wilkins, D. E. (1988). Practical Planning: Extending Classical AI Paradigm. Morgan
Kaufmann, San Mateo, CA.
Wilkins, D. E., & Desimone, R. V. (1994). Applying AI planner military operations
planning. Fox, M., & Zweben, M. (Eds.), Intelligent Scheduling, pp. 685{708.
Morgan Kaufmann Publishers, San Mateo, CA.
Williamson, M., & Hanks, S. (1996). Flaw selection strategies value-directed planning.
Proceedings Third International Conference Artificial Intelligence Planning
Systems, pp. 237{244.

262


