journal artificial intelligence

submitted published

flaw selection strategies partial order

martha e pollack

department computer science intelligent systems program
university pittsburgh pittsburgh pa usa

david joslin

computational intelligence laboratory
university oregon eugene usa

pollack cs pitt edu
joslin cirl uoregon edu

massimo paolucci

intelligent systems program
university pittsburgh pittsburgh pa usa

paolucci pitt edu

abstract

several recent studies compared relative eciency alternative aw selection
strategies partial order causal link pocl review literature
present experimental generalize earlier work explain
discrepancies particular describe least cost flaw repair lcfr strategy
developed analyzed joslin pollack compare strategies
including gerevini schubert zlifo strategy lcfr zlifo make
different apparently con icting claims effective way reduce searchspace size pocl resolve con ict arguing much benefit
gerevini schubert ascribe lifo component zlifo strategy better
attributed causes many strategy combines
least cost aw selection delay separable threats effective reducing
search space size without excessive computational overhead although
strategy thus provides good default certain domain characteristics
may reduce effectiveness

introduction
much current plan generation centers partial order causal link pocl
descend mcallester rosenblitt snlp pocl
involves searching space partial plans successors node
representing partial plan p refinements p search pocl
requires effective search control strategies
pocl search control two components first node selection involves choosing partial plan refine next partial plan selected
refinement planner must perform aw selection involves choosing
threat resolve open condition establish
past years several studies compared relative eciency alternative aw selection strategies pocl extensions peot smith
joslin pollack srinivasan howe gerevini schubert williamson
hanks studies motivated least part tension
attractive formal properties pocl limitations putting

c ai access foundation morgan kaufmann publishers rights reserved

fipollack joslin paolucci
practical use relatively poor performance date pocl
cannot match eciency called industrial strength planners
sipe wilkins wilkins desimone plan currie tate tate
drabble dalton flaw selection strategy shown significant
effect eciency pocl thus researchers viewed
design improved aw selection strategies one means making pocl
practical
review literature aw selection strategies present
experimental generalize earlier work explain discrepancies
particular describe least cost flaw repair lcfr strategy developed
analyzed joslin pollack compare strategies including
gerevini schubert zlifo strategy lcfr zlifo make different
apparently con icting claims effective way reduce search space size
pocl resolve con ict arguing much benefit gerevini
schubert ascribe lifo component zlifo strategy better attributed
causes many strategy combines least cost aw
selection delay separable threats effective reducing search space size
without excessive computational overhead although strategy thus
provides good default certain domain characteristics may reduce
effectiveness

background
node flaw selection

although main ideas pocl literature
two decades serious efforts comparing alternative plan generation
relatively recent made comparisons possible development set
clear provable formal properties notably tweak chapman
snlp mcallester rosenblitt intended add
functionality known methods rather capture essential elements
known methods readily analyzable fashion
analyzing pocl researchers found useful decouple search
control strategy underlying plan refinement process figure generic pocl
highlight two search decisions following convention use
choose indicate node selection backtracking point select indicate
aw selection given node may lead solution may necessary
backtrack consider alternative nodes hand node lead
solution solution found regardless order aws selected
see weld tutorial discussion difference
generic sketched figure must supplemented search strategies
implement choose select operators pocl perform
node selection best first ranking computes function number
versions well known appeared literature weld russell
norvig kambhampati knoblock yang version give corresponds directly
given williamson hanks



fiflaw selection strategies

pocl init goal

dummy plan make skeletal plan init goal
nodes f dummy plan g
nodes empty

choose remove partial plan p nodes node selection
p aws
return p
else

select aw p flaw selection

add refinements p nodes
return failure nodes become empty without aw free plan found
figure basic pocl
steps denoted open conditions oc unsafe conditions uc e threats
partial plan gerevini schubert argued general steps
open conditions included ranking function adopt strategy
experiments except otherwise indicated
chosen node pocl must select aw open condition threat within node repair open conditions repaired establishment
consists adding step unifying condition effect along
causal link step condition else simply adding
causal link existing step unifying effect use term repair cost
denote number possible ways repair aw
open condition repair cost r n

number conditions initial state unify given
current binding constraints
number conditions effects existing plan steps unify
given current binding constraints counting existing plan
steps constrained occur step associated
n number conditions effects operators library
unify given current binding constraints
note time repair cost open condition resolved may
increase steps might achieve condition added plan decrease
steps already plan constrained temporal ordering variable binding
longer achieve condition
considering cost threat repair useful distinguish nonseparable
separable threats nonseparable threats consist step effect e
causal link f e f complementary literals necessarily unify
complementary ground literals e f else complementary
literals e variables identical forced binding constraint


fipollack joslin paolucci
equivalent variable position f e g e p x f p x z
currently binding constraint z
nonseparable threats repaired two ways promoting requiring
occur demoting requiring occur course already
existing temporal ordering constraints may block one repair options
two possible repairs time repair cost unresolved
nonseparable threat decrease
separable threat consists step effect e causal link f
e f complementary literals unified unification
forced e g e p x f p exist binding
constraint x circumstances threat may disappear subsequent variable
binding blocks unification nonseparable threat may disappear subsequent
ordering constraint effect imposing promotion demotion repair cost
separable threat may higher nonseparable threat
promotion demotion used separation involves forcing variable
binding blocks unification separation introduce one repair unbound
variable threat example effect p x z threatens p u v
three possible repairs x u z v nonseparable threats
repair cost separable threat remains unresolved decrease time

notation

aw selection strategies discussed literature typically
given idiosyncratic names e g dunf lcfr zlifo useful comparing
precise unifying notation therefore specify aw strategy sequence
preferences strategy begins attempting aw satisfies first preference
unable looks aw satisfies second preference
ensure pocl strategy complete sequence
preferences must exhaustive every aw must satisfy preference aw satisfies
one preference strategy assume first match counts
principle preference could identify feature aw practice however aw
selection strategies made use small number features type aw
open condition nonseparable threat separable threat number ways
repaired time introduced plan often one aw
given feature case tie breaking strategy may specified choosing
among relevant aws
therefore describe preference following notation

f aw typesgrepair cost rangetie breaking strategy
alternative treats cases e f threats required make planner
systematic e guaranteed never generate node mcallester rosenblitt

conditional planners make use additional method threat resolution confrontation
ignore within peot smith etzioni hanks weld draper lesh williamson
joslin provides detailed account generalizing treatment aws types
decisions



fiflaw selection strategies
indicates preference aw f specified type types provided
repair cost f falls within range values specified restrictions
repair cost omit repair cost range one aw meets criteria
tie breaking strategy applied select among
abbreviate aw type open condition n nonseparable threat
separable threat use abbreviations common tie breaking strategies
e g lc least repair cost lifo r random case lc choice
must made aws repair cost lifo selection used
thus example
fng r
specifies preference nonseparable threats repair cost zero one
one aw meets conditions random selection made among use
term forced describe aws repair cost one less
example complete aw selection strategy
fng r foglifo fn sgr
strategy would begin looking forced nonseparable threat one aw
meets criterion strategy would select randomly among forced
nonseparable threats would look open condition repair cost
lifo scheme select among finally neither forced nonseparable threats
open conditions would randomly select unforced nonseparable threat
separable threat
distinguished aw type maximum repair cost one
hand tie breaking strategy easy describe strategies use
something aw type main criterion selection example pure
lifo selection strategy would encoded follows henceforth give name
strategy boldface preceding specification
lifo fo n sglifo

flaw selection strategies

begin reviewing aw selection strategies proposed studied
literature date

threat preference delay

original snlp mcallester rosenblitt adopted aw selection
strategy threats resolved open conditions early versions
widely used ucpop system penberthy weld snlp
specify principle selecting among multiple threats multiple opens ucpop
used lifo purpose employing notation describe basic
ucpop strategy
current version ucpop v aw selection strategy run default dsep
strategy discussed historical reasons maintain name dsep strategy
use ucpop older default strategy



fipollack joslin paolucci

ucpop fn sglifo foglifo
first study alternative aw selection strategies done peot smith
relaxed requirement threats resolved open conditions
examined several strategies delaying resolution threats analyzed five
different strategies delaying repair threats two provably superior
dsep dunf
dsep delay separable threats motivated observation sometimes separable threats simply disappear process blocking variable bindings
introduced pointed earlier nonseparable threats may disappear
typically less frequent moreover resolution threats separable
nonseparable delayed nonseparable threats would disappear early side
effect step reuse making disappearance even less frequent
dsep strategy therefore defers repair separable threats end
process however ucpop continues give preference nonseparable
threats
dsep fnglifo foglifo fsglifo
actually peot smith specify tie breaking strategy choosing among multiple
threats indicated lifo explored three different tie breaking
strategies selecting open conditions fifo lifo least cost list lifo
one specify alternatives
dsep lc fnglifo foglc fsglifo
dsep fifo fnglifo fogfifo fsglifo
peot smith prove search space generated pocl planner dsep
never larger search space generated ucpop strategy
holds tie breaking strategy open conditions lifo fifo lc
point return later
peot smith second successful strategy dunf delay unforced threats makes
use notion forced aws stated earlier aw forced
one possible way repair dunf strategy delays repair unforced threats
dunf fn sg lifo fn sg lifo foglifo fn sg lifo
define dunf lc dunf fifo manner analogous used dsep lc
dsep fifo
dunf lc fn sg lifo fn sg lifo foglc fn sg lifo
dunf fifo fn sg lifo fn sg lifo fogfifo fn sg lifo
peot smith proved dunf strategy would never generate larger search
space remaining two strategies examined proved
dsep dunf incomparable exist dsep
generates smaller search space dunf reverse
true


fiflaw selection strategies
peot smith support theoretical dsep dunf experiments
showing least domains examined strategies significant decrease search space size decrease search correlated diculty
consequently get dicult strategies reduce
search time well space large enough pay
overhead
follow work peot smith describe strategy called dmin generates smaller search spaces dsep dunf dmin combines process pruning
dead end nodes process aw selection gives preference forced threats
forced threats checks see whether remaining nonseparable threats
could repaired simultaneously leaves threats selects open condition repair open conditions presumably selects remaining
unforced threat repair hand impossible repair unforced
nonseparable threats node dead end pruned search
space note dead end nodes recognized immediately even without
complete consistency checking dmin unrepairable aw cannot
subsequently become repairable hence node containing aw repair cost zero
dead end consequently aw selection strategies give highest priority
aws joslin pollack joslin

least cost flaw repair

peot smith work provided foundation subsequent exploration leastcost aw repair lcfr strategy joslin pollack hypothesized power
dunf strategy might come relative ordering threats open conditions instead fact dunf effect imposing partial preference
least cost aw selection dunf prefer forced threat definition
repair cost one thus cases forced threat dunf
make low cost selection cases forced threats
dunf select among open conditions assuming hypothesis correct version dunf makes selection least cost strategy e
dunf lc ought perform better version uses one strategies e
bare dunf dunf fifo fact selection low cost repairs causing
search space reduction idea treating threat resolution differently open
condition establishment ought abandoned instead strategy selects
aw minimal repair cost regardless whether threat open condition
ought best performance least cost flaw repair lcfr strategy

lcfr fo n sglc
strong similarities lcfr certain heuristics proposed studied literature constraint satisfaction csps
perhaps surprising given aw selection pocl corresponds
lcfr strategy similar branch branch n search heuristics included plan system
currie tate contribution original work topic isolate strategy
examine detail



fipollack joslin paolucci
fairly strong ways variable selection constraint programming flaws pocl planner represent decisions yet made must made plan
complete unbound variables play similar role constraint satisfaction
csps although exist number heuristics selecting variable branch
solving csp kumar one well known heuristic often quite effective
fail first principle picks variable constrained selecting
variable branch simple common implementation fail first principle
selects variable smallest domain tsang
intuition behind fail first principle one prune dead end regions
search early possible unbound variables tightly constrained
likely points current partial solution brittle sense
branching variables hope contradiction one exists quickly
similarly lcfr thought selecting constrained aws resulting
better pruning
similar heuristic adopted recent work controlling search hierarchical task network htn dynamic variable commitment strategy dvcs dvcs lcfr minimal branching heuristic experimental
analyses demonstrate dvcs generally produces well focused search tsuneto erol
hendler nau
initial experimental presented joslin pollack similarly
supported hypothesis uniform least cost aw repair strategy could highly
effective reducing size search space pocl experiments
compared lcfr four strategies ucpop dunf dunf lc defined
strategy ucpop lc previously called lcos joslin pollack

ucpop lc fn sglifo foglc
included ucpop lc help verify search space reduction preference
aws minimal repair costs true ucpop lc ought generate
smaller search space dunf even though delay threats
expected ucpop dunf least cost selection open conditions
generated largest search spaces ucpop lc generated significantly smaller spaces
dunf lc lcfr generated smallest spaces
time observed lcfr incurred unwieldy overhead often taking
longer solve ucpop despite fact searching far fewer
nodes part due particularly inecient implementation lcfr
part resulted fact computing repair costs bound take
time simply popping stack lifo strategy finding aw particular
type strategy prefers threats therefore explored approximation strategies
reduce overhead aw selection accepting inaccuracy repair cost
calculation example developed quick lcfr qlcfr strategy
calculates repair cost aw aw first encountered
successor node aw remains unresolved qlcfr assumes repair
cast csps planner descartes joslin pollack joslin
correspondence even direct



fiflaw selection strategies
cost changed experiments qlcfr showed promising means
making least cost suciently fast pay overhead additional
approximation strategies studied srinivasan howe experimented
three variations lcfr along fourth novel strategy moves
control burden user

threat delays revisited

recently gerevini schubert revived idea aw selection strategy
treat open conditions threats differently suggested lifo
used tie breaking strategy deciding among open conditions combine
ideas zlifo strategy
zlifo fnglifo fog lifo fog fog lifo fsglifo
zlifo strategy gives highest priority nonseparable threats forced open
conditions neither nonseparable threats forced open conditions zlifo
select open condition lifo defers separable threats end
process name zlifo intended summarize overall strategy z
stands zero commitment indicating preference given forced open conditions
repairing planner making commitment beyond must made
node ultimately refined complete plan lifo indicates
strategy used selecting among unforced open conditions
open conditions repair cost exactly one zlifo strategy uses tiebreaking strategy called prefers repair open condition
established introducing action repair open condition
established element start state gerevini schubert state
preference gave improvements context russell tire changing domain without
significant deterioration performance domains p however
difference apparently dramatic gerevini believes implementation
detail though open possibility study might preference
significant gerevini
gerevini schubert make three primary claims zlifo
pocl planner zlifo tend generate smaller search space one
pure lifo strategy
reduction search space zlifo relative lifo correlated
complexity complexity measured number
nodes generated pure lifo strategy
zlifo performs comparably lcfr relatively easy generates
smaller search space harder
first two claims consistent found earlier lcfr studies
lifo strategy pays attention repair costs zlifo least indirectly
initial preference nonseparable threats repair cost
two secondary preference forced opens


fipollack joslin paolucci
third claim harder square earlier lcfr study lifobased strategies ucpop dunf generated much larger search spaces
least cost strategies explains zlifo performance gerevini schubert
answer question follows
experience search processes ai general lifo strategy
much recommend simple default first place overhead
cost low compared strategies use heuristic evaluation lookahead
prioritize goals well tend maintain focus achievement
particular higher level goal regression rather attempting achieve
multiple goals breadth first fashion p
point overhead important one zlifo relatively inexpensive control
strategy competing strategy better job pruning search space may
end paying excessive overhead second point addresses question
asking namely zlifo could produce smaller search spaces gerevini
schubert go say
aintaining focus single goal advantageous least
goals achieved independent instance suppose two
goals g g achieved ways choosing particular
method achieving g rule methods achieving g
maintain focus g solved attempting g
total cost solving goals sum costs solving
independently switch back forth solutions
goals involve searches encounter many dead ends combined cost
much larger tend search unsolvable subtree
g search tree repeatedly combination alternatives
g search tree p
certainly plausible explanation key remaining question course extent explanation carries many involve
interacting goals

experimental comparison flaw selection strategies

discussed previous section several different proposals made
literature best reduce size search space pocl
include
giving preference threats open conditions
giving preference certain kinds threats separable forced threats
delaying threats open conditions resolved
giving preference aws minimal repair cost
giving preference recently introduced aws


fiflaw selection strategies
moreover different strategies combined preference schemes different ways
apparently con icting claims made effects preferences
search space size
resolve con icts performed experimental comparisons pocl planners
variety aw selection strategies gave particular attention comparison
lcfr zlifo apparently con icting claims lcfr generates
search space treating aws uniformly least cost choose among
zlifo distinguishes aw types non separable threats open conditions
separable threats uses modified lifo select among aws
class original lcfr studies would led us predict zlifo would generate
larger search spaces lcfr gerevini schubert found opposite
true aimed explain discrepancy
principal focus search space size two reasons first puzzle raised
lcfr zlifo one space time mentioned earlier easy see
zlifo would faster lcfr even per node basis least cost strategy
must compute repair costs zlifo need pop stack containing right type
aws puzzle us zlifo faster generated smaller
search spaces second believe understanding effect search control strategies
search space size lead development approximation techniques produce
speed well qlcfr strategy joslin pollack srinivasan howe
strategies examples
however secondary goal analyze time requirements strategies
compared therefore collected timing data experiments discuss
section strategy tends generate smallest search space achieves enough
reduction pay overhead large

experimental design

conduct comparison implemented set aw selection strategies ucpop
v table lists strategies implemented except lcfr dsep dunfgen discussed later implemented strategies described section

tested strategies three sets used earlier work joslin
pollack gerevini schubert
basic taken test suite distributed
ucpop system include variety domains including
note experiments earlier lcfr joslin pollack gerevini
schubert zlifo run earlier version v ucpop
number nodes produced experiments sometimes differs reported
two papers appears largely due fact ucpop v puts elements set
open conditions onto aw list reverse order way ucpop v gerevini
discussed sections studied uence ordering change
collecting data modified version ucpop v reversed order conditions
entered open list resulting numbers similar previously published
identical leading us conclude additional subtle differences v
v however experiments report run version
ucpop believe fair comparison strategies



fipollack joslin paolucci
ucpop
ucpop lc
dsep
dsep lc
dunf
dunf lc
dunf gen
lcfr
lcfr dsep
zlifo

fn sglifo foglifo
fn sglifo foglc
fnglifo foglifo fsglifo
fnglifo foglc fsglifo
fn sg lifo fn sg lifo foglifo fn sg lifo
fn sg lifo fn sg lifo foglc fn sg lifo
fn og lifo fn og lifo fn og lifo
fo n sglc
fn oglc fsglc
fnglifo fog lifo fog fog lifo fsglifo
table implemented flaw selection strategies

blocks world monkeys bananas pednault briefcase andoce russell tire changing world etc
trains three taken trains transportation domain
allen schubert et al
tileworld seven taken tileworld domain pollack
ringuette
ran strategy twice first time imposed node limit
nodes basic nodes trains tileworld
second time imposed time limit seconds basic
seconds trains tileworld
gerevini schubert experimented several different node selection strategies
trains tileworld domains facilitate comparison used node
selection strategies basic used oc
reporting make use raw counts nodes generated
computation time seconds taken compute measure badly strategy
performed given set call measure overrun
compute follows let minimum node count given
strategies tested let c node count particular strategy
overrun c
thus example best strategy given generated nodes
strategy generated nodes would overrun
strategy best given overrun
section make use similarly computed overruns computation time
strategy hit node limit set c relevant node limit
compute node count overrun similarly strategy hit time limit used
relevant time limit compute computation time overrun
way ucpop completes basic iteration sometimes go somewhat beyond
specified node limit terminating run cases used node limit value rather
actual number nodes generated computation overrun



fiflaw selection strategies
online appendix provides raw data node counts computation time taken
experiments conducted includes computed overruns
conducting experiments one set node time limit
cutoff strategy pair however danger cutoffs
unfairly bias data limits set way certain strategies fail
would instead succeeded limits increased slightly carefully analyzed
data help eliminate possibility bias details given appendix

value least cost selection

described overall experimental design turn analysis begin sought establish claims originally made earlier
work specifically wanted first reconfirm larger data set least cost
aw selection effective technique reducing size search space generated
pocl planner therefore ran experiment compared node
counts five strategies earlier studied lcfr dunf dunf lc ucpop
ucpop lc plus one one dunf gen explained
experiment shown figures former log log
scatter plot showing performance six strategies
basic set sorted minimal number nodes generated
six strategies thus left hand side graph includes
least one six strategies found relatively easy right hand side
hard six strategies omitted none
six strategies able solve actual number nodes generated
strategy plotted axis minimal number nodes
x axis lcfr performance highlighted line connecting data points
graph shows general lcfr generates small search spaces set
relative strategies class six lcfr
within minimum three get paid uget paid class
including two hardest uget paid uget paid
discuss class section
alternative view data given figure shows aggregate performance six strategies e average node count overrun basic
seen lcfr smallest average overrun
figures present similar views data tileworld domain figure
gives data trains trains domain six strategies
able solve easiest trains simply actual node counts
figure omitted two data points extreme
inclusion graph made impossible see differences among strategies
lcfr dunf gen oc uc node selection took nodes
respectively solve
tileworld trains observed sorts interactions node aw selection strategies seen gerevini schubert specifically
lcfr performs relatively poorly oc tileworld performs
poorly oc uc trains however paired


fipollack joslin paolucci


nodes generated log


ucpop
dunf
ucpop lc
dunf lc
dunf gen
lcfr











minimum number nodes generated log

figure basic node counts strategies without forced flaw delay
node selection strategies lcfr produces smallest search spaces strategies
class
sum lcfr tend produce smaller search spaces strategies
class question remains lcfr uses least cost strategy side effect
prefer forced aws since forced aws low cost aws therefore
conceivable lcfr performance mostly even fully due preference forced
aws greatly uenced use least cost strategy unforced
aws hypothesis could explain dunf lc consistently outperforms dunf
ucpop lc consistently outperforms ucpop
address issue included dunf gen experiment dunf gen
simple strategy prefers forced aws kind otherwise uses lifo regime
would expect dunf gen lcfr perform similarly since frequently make
decision specifically select aw node
forced aw differ unforced aws dunf gen
selecting recently introduced aw lcfr selecting least cost aw
practice dunf gen performance closely mimicked lcfr basic
set marginally worse lcfr fact marginally better
reverse order planner adds preconditions step
open list see section lcfr somewhat better dunf gen
trains tileworld true regardless order
preconditions added open list extent better varies
thus data inconclusive value least cost strategy unforced
aws lcfr clearly benefits selecting forced aws early side effect preferring


fiflaw selection strategies




node count overrun












lcfr

dunf gen

ucpop lc

ucpop

dunf lc

dunf

figure basic aggregate performance strategies without forced flaw delay




nodes generated log

ucpop oc
ucpop lc oc
dunf oc
dunf lc oc
dunf gen oc



dunf gen oc uc
dunf gen oc uc f
lcfr oc
lcfr oc uc
lcfr oc uc f









minimum number nodes generated log

figure tileworld node counts strategies without forced flaw delay


fipollack joslin paolucci















ucpop
oc

ucpop lc
oc

dunf
oc

dunf lc
oc

lcfr
oc

dunf gen
oc

dunf gen
oc uc f

dunf gen
oc uc

lcfr
oc uc f

lcfr
oc uc



figure tileworld aggregate performance strategies without forced flaw
delay




nodes generated













ucpop
oc

dunf
oc

dunf gen
oc uc f

dunf gen
oc

ucpop lc
oc

dunf lc
oc

lcfr
oc

lcfr
oc uc f



figure trains node counts strategies without forced flaw delay


fiflaw selection strategies
least cost aws may matter whether continues use least cost strategy
unforced aws indeed generally sucient use least cost strategy
forced aws zlifo performance somewhat less puzzling since zlifo prefers
forced aws however puzzle completely resolved dunf gen
zlifo prefers forced aws makes lifo decisions unforced aws
performance clearly inferior lcfr neither clearly superior
even use lifo unforced aws obviously increase search space
neither appear decrease

comparing lcfr zlifo

next turn direct comparison lcfr zlifo gerevini schubert compared
strategies get complete picture performance
lcfr zlifo ran three
sets
data basic set shown figure sorted
difference node counts produced lcfr zlifo thus
near left hand side graph lcfr generated smaller search
space near right hand side ones zlifo space
advantage omit neither strategy could solve
seen notably r test move boxes monkey test
lcfr generates much smaller search space zlifo notably
get paid hanoi uget paid uget paid zlifo generates much smaller search
space lcfr worse strategies mentioned
section
noted earlier one major changes ucpop v v
v puts elements set open conditions onto aw list reverse
order v ordering may make difference particularly lifo
strategies indeed researchers suggested one reason lifo strategy
may perform well exploit decisions made system designers
writing domain operators since sense natural list constraining
preconditions operator first williamson hanks therefore collected
data modified version ucpop preconditions step entered
onto open condition reverse order would normally entered
discuss modification detail next two sections
simply present node counts lcfr zlifo reversed precondition
insertion figure seen reversing
precondition ordering significant effect notably fixb monkeytest
large lcfr zlifo showed relative performance
basic set dicult discern obvious pattern performance contrast gerevini schubert suggest seem clear
correlation diculty measured terms nodes generated
relative performance lcfr zlifo fact little dicult determine strategy node count serve measure diculty
hand true aggregate zlifo generates smaller search spaces lcfr


fir test



uget paid

uget paid

monkey test

hanoi

get paid

get paid

get paid

uget paid

uget paid

road test

fix

fix

get paid

fixa

r test

fix

test ferry

monkey test

fix

suss anom

two inv

fix

rat insulin

prodigy suss

two inv

fixb

move boxes

nodes generated log

r test

uget paid

uget paid

hanoi

get paid

get paid

test ferry

get paid

uget paid

ho demo

tow inv

uget paid

tow inv

road test

fix

fix

get paid

r test

suss anom

fix

fix

fix

monkey test

prodigy suss

rat insulin

fixa

monkey test

move boxes

nodes generated log

pollack joslin paolucci






lcfr default

zlifo default





figure basic node counts lcfr zlifo






zlifo reversed

lcfr reversed





figure basic node counts lcfr zlifo reversed precondition
insertion

fiflaw selection strategies
basic default precondition ordering zlifo obtains average
overrun lcfr obtains reverse ordering zlifo average
overrun lcfr fact lcfr relative performance
worse preconditions entered reverse direction primarily
failure monkeytest reverse direction
trains data scant neither lcfr zlifo solve hardest
trains regardless whether preconditions entered default reverse
order fact none strategies studied able solve trains least
preconditions entered default order zlifo solve trains
lcfr cannot reverse precondition insertion neither strategy solve trains
data shown figure note lcfr performance essentially
node selection strategies shown
finally tileworld data default order precondition insertion shown
figure place lcfr clearly generates smaller search spaces
zlifo plotted data reverse precondition insertion
strategies affected change however one notable
exception reversed insertion zlifo oc uc f much better
indeed well lcfr return uence precondition ordering
tileworld section
however enough observe experiments zlifo
tend generate smaller search spaces lcfr basic set
regardless order precondition insertion trains one ordering
worse lcfr ordering well lcfr
tileworld preconditions inserted reverse order
exception tileworld set preconditions inserted default order
lcfr better

value separable threat delay

first two analyses essentially aimed replicating earlier literature
namely lcfr zlifo next address question
square one another
recall lcfr zlifo differ two key respects first lcfr treats aws
uniformly zlifo distinguishes among aw types giving highest preference nonseparable threats medium preference open conditions lowest preference separable
threats second lcfr uniformly makes least cost selections zlifo uses lifo
strategy secondary aw type preferences giving preference forced open
conditions comparisons made section suggest use lifo strategy
unforced aws best make little difference search space size may possibly lead generation larger search spaces hand first difference
presents obvious place look relative advantage zlifo zlifo
delaying separable threats peot smith demonstrated effectiveness
dsep strategy
peot smith proof dsep never generate larger search space ucpop
transfer lcfr lcfr generate


fipollack joslin paolucci



nodes generated log




zlifo oc
zlifo oc uc f
lcfr oc
lcfr oc uc f





trains default

trains reverse

trains default

figure trains node counts lcfr zlifo


nodes generated log



zlifo oc



zlifo oc uc f
lcfr oc
lcfr oc uc
lcfr oc uc f





tw ez

tw

tw

tw

tw

tw

tw

figure tileworld node counts lcfr zlifo


fiflaw selection strategies
smaller search space dsep proof relies fact dsep open conditions
selected order regardless threats selected selection
threat lcfr uence repair cost open condition e g promoting
action longer available potential establisher condition
turn affect order remaining open conditions selected
nonetheless despite fact one guarantee delaying separable threats
lead reduction search space size motivation behind dsep still appealing
separable threats may often simply disappear subsequent naturally lead reduction search space size reason implemented slightly
modified version lcfr called lcfr dsep separable threats
delayed note relatively easy ucpop system provides
switch dsep switch turned automatically delay repair
separable threats defined earlier table definition lcfr dsep
lcfr dsep fn oglc fsglc
hypothesis zlifo reduction search space size largely due
incorporating dsep lcfr dsep ought best worlds
combining advantages lcfr least cost advantages dsep

basic lcfr dsep proved smallest average node count overrun basic strategies tested moreover true even
reversed order preconditions operator added open
list figure gives average node count overruns unmodified ucpop v
labeled default modified version reversed precondition ordering
labeled reverse reversing ordering effect conclusion lcfr dsep
generates smallest search spaces fact general little
affect relative performance strategies notable exception
mentioned earlier relative performance lcfr dunf gen ips
detailed comparison plot node counts basic lcfr
zlifo separable threat delay strategies figure ease comparison
data sorted difference lcfr zlifo node counts
near left hand side graph lcfr generated
smaller search space zlifo near right
generated larger search space seen lcfr dsep nearly well
better lcfr much better zlifo lcfr
good much better lcfr zlifo good
however zlifo still outperforms lcfr dsep latter class
another view data given figure log log scatter plot basic
strategies studied time highlighted lcfr dsep
performance although produce minimal
search space performance individual actually quite good consistent
good aggregate performance
least basic augmenting simple lcfr strategy delay
separable threats reduces search space expected turn suggests
lcfr generates larger search space zlifo due large part fact


fipollack joslin paolucci





node count overrun





default



reverse








lcfrdsep

dseplc

zlifo

dsep

lcfr

dunfgen

uc
pop lc

ucpop

dunflc

dunf

figure basic aggregate performance strategies



nodes generated log



zlifo


lcfr
lcfr dsep



uget paid

hanoi

uget paid

get paid

get paid

get paid

test ferry

ho demo

uget paid

tow inv

tow inv

uget paid

road test

fix

prodigy p

r test

fix

get paid

fix

suss anom

fix

fix

prodigy suss

monkey test

fixa

rat insulin

move boxes

monkey test

r test



figure basic node counts lcfr zlifo dsep strategies


fiflaw selection strategies



nodes generated log

ucpop
dsep
dunf
ucpop lc
dunf lc
zlifo
dunf gen
lcfr
dsep lc



lcfr dsep










minimum number nodes generated log

figure basic node counts strategies
delay separable threats zlifo primary advantage relative lcfr seems
use lifo strategy unforced threats rather separable threat
delay component combining separable threat delay least cost yields
strategy tends generate smaller search spaces strategy
basic set however analysis trains tileworld sets reveals
situation little complicated comparison basic would
suggest discuss next section

need domain information

tileworld trains domains challenge overly simple conclusions might
draw basic sets consider set turn
tileworld

tileworld domain involves grid tiles holes goal fill hole
tile goal achieved fill operator two preconditions
agent must hole must holding tile encoding agent
hold four tiles time go operator used achieve sub goal
hole pickup operator used achieve sub goal holding tile
normal way go precondition location namely whatever location
agent move pickup precondition location tile
tileworld set differ one another number holes
agent must fill adds another hole


fipollack joslin paolucci


lcfr oc uc


lcfr oc uc f
dunf gen oc uc

nodes generated log

dunf gen oc uc f
dunf gen oc
lcfr oc
lcfr dsep oc uc
zlifo oc uc f



zlifo oc
lcfr dsep oc uc f
dsep lc oc
lcfr dsep oc
dunf oc
dsep oc


ucpop lc oc
dunf lc oc
ucpop oc








minimum number nodes generated log

figure tileworld node counts strategies
figures gives log log plot strategies tileworld
preconditions entered default order note lcfr oc uc
strategy highlighted three strategies almost indistinguishable lcfr
oc uc namely lcfr oc uc f dunf gen oc uc
dunf gen oc uc f strategies performed worse
easily seen figure gives aggregate performance leading strategies
able solve seven tileworld fact leading strategies
able solve seven tileworld without generating nodes
contrast remaining strategies failed least one four
seven given limit nodes generated
originally surprising us tileworld delaying separable threats actually seems hurt performance strategies best
lcfr dunf gen delay separable threats lcfr dsep zlifo dsep lc
dsep generated larger search spaces contrast would predicted
given experiments basic set
understand looked detail trace
revealed tileworld domain early resolution separable threats
important advantage imposes turns correct temporal ordering
steps going tile pick carrying hole virtually
strategies create subplans one shown figure goals involve filling
holes planners insert steps go pick tile go hole
point two separable threats effect going hole x threatens
link going tile picking z effect going


fiflaw selection strategies






node count overrun
















lcfr
oc uc

lcfr
oc uc f

dunf gen
oc uc

dunf gen
oc uc f

dunf gen
oc

figure tileworld aggregate performance leading strategies

x

go x


loc h
holding

w
w

go w z

z
tile
loc z

x

fill h

filled h

pickup

figure typical partial plan tileworld domain
tile w threatens link going hole filling
threats separable x w unbound planner yet know
traveling one valid temporal ordering
resolve threats going tile must precede picking tile turn must
precede going hole temporal ordering determined goes
smoothly
contrast ordering decision made planner often get lost
attempting plans goes location hole
hole tile many ways attempt many different


fipollack joslin paolucci


lcfr dsep oc uc f


zlifo oc uc f
lcfr oc uc

nodes generated log

lcfr oc uc f
dunf gen oc uc f
lcfr dsep oc uc
dunf gen oc
dunf gen oc uc



dunf lc oc
lcfr dsep oc
dsep lc oc
lcfr oc
zlifo oc
ucpop lc oc


dunf oc
dsep oc
ucpop oc








minimum number nodes generated log

figure tileworld node counts reversed precondition insertion
tiles select many different locations move among planner may try many
alternatives determining fundamental inconsistency
plans destined fail larger number holes filled
worse situation becomes
sometimes planner may make right decision temporal ordering even
deferred separable threats faced partial plan figure planner
select threat select among several open conditions attempt
establish precondition going hole x reusing effect going
tile z reverse attempt establish precondition going
tile w reusing effect going hole x course first
solution right one includes critical temporal ordering constraint
second eventually fail
order open conditions selected determine two
choices planner makes preconditions entered default order planners
delay separable threats end making latter problematic choice contrast
preconditions entered reverse order planners make turns
correct choice thus experiments reversed precondition
insertion see different pattern performance shown figures
preconditions entered reverse order larger number strategies
perform well solving particular oc uc f node preserve readability figure used denote oc oc u c
oc u c f




ucpop

dunf

dsep

ucpop lc

lcfr

zlifo

dsep lc

lcfr dsep

dunf lc

dunf gen

dunf gen

lcfr dsep

dunf gen

lcfr

lcfr

zlifo

lcfr dsep

node count overrun

flaw selection strategies























figure tileworld aggregate performance strategies reversed
precondition insertion

fipollack joslin paolucci





trains
trains




dsep lc
oc

lcfr dsep
oc

lcfr dsep
oc uc f

zlifo
oc uc f

dunf
oc

lcfr dsep
oc uc

zlifo
oc

dsep
oc



figure trains node counts
selection performance lcfr dunf gen zlifo lcfr dsep virtually indistinguishable important note leading strategies delay separable
threats lcfr dunf gen affected much reversal precondition insertion tileworld fact lcfr performance identical cases
contrast strategies use separable threat delay lcfr dsep zlifo dseplc perform much better reverse precondition insertion explained
analysis
sum important tileworld domain planner recognize
early possible certain required temporal orderings
steps successful plan every successful plan involve going tile going
hole although exibility order multiple holes visited
interleaving picking tiles dropping holes strategies
studied two different methods led temporal constraint added
plan added planner selected separable threat resolve
added selected one particular precondition resolve another
trains get paid

trains domain present somewhat different variation original conclusions
trains domain involves set locations objects goal transport
objects specific starting locations specified destinations gerevini schubert
studied three trains strategies failed successfully complete
hardest trains within node second limit moreover
many failed second hardest trains caution must therefore taken
interpreting limited number data points


fiflaw selection strategies
figure gives node counts trains domain preconditions inserted
default order strategies able solve trains trains
closer would predicted basic set
tileworld particular lcfr dsep well generating
much smaller search spaces lcfr however slightly worse zlifo
recall saw pattern performance subset basic
specifically get paid uget paid lcfr dsep improved
lcfr generate small search spaces zlifo turns
similar factors uencing sets instructive consider
detail done zlifo lcfr dsep get paid uget paid
understand occurring
trains domain get paid uget paid involve moving
particular objects specified locations get paid uget paid domain three
objects paycheck dictionary briefcase generally formulated initial
state three home paycheck briefcase goal deposit
paycheck bank bring dictionary work briefcase home
dictionary paycheck moved briefcase human
solution obvious dictionary must put briefcase
must carried work dictionary taken briefcase must
carried home addition stop must made bank way work
way home point paycheck must taken briefcase
deposited
zlifo lcfr dsep take different paths solving zlifo begins
forming plans get paycheck bank dictionary work goals
selected first forced one way get paycheck
bank carry similarly one way get dictionary oce carry
contrast two possible ways get briefcase home
leaving e reusing initial state carrying somewhere else
e adding step lifo mechanism proceeds complete plans
achieving goals getting paycheck bank dictionary work
beginning work remaining goal getting briefcase home point
goal easy solve needed plan route home wherever briefcase
end two errands
lcfr dsep zlifo begins selecting forced goals getting dictionary
oce getting paycheck bank however instead next completing
plans goals lcfr dsep continues greedily select least cost aws thus
begins work achieving goal getting briefcase home unfortunately
point clear briefcase needs moved home hence lcfrdsep begins engage lengthy process guessing briefcase
end tasks planned tasks
diculty lcfr dsep encounters greedily picking low cost aws might reduced
lookahead several steps determine accurate repair cost
taken branch n mechanism plan currie tate significant overhead involved
strategy however



fipollack joslin paolucci
key decision get paid uget paid domain turns trains
domain related subtly different key decision tileworld domain
get paid uget paid trains key insight planner
important temporal ordering goals goal getting briefcase home
going achieved goal taking dictionary work however
recognition constraint affected separable threat delay
tileworld instead happens domains higher cost aw interacts
lower cost one causing latter become fully constrained
tempting think finally case lifo strategy
advantageous example completely determining
achieve one goal make much easier know solve another goal use
zlifo alternative lifo strategy guarantee interactions
high lower cost aws exploited particular interactions
among two unforced aws order goals agenda lead zlifo
make inecient choice thus modified briefcase
work initial state zlifo lcfr dsep solved quickly
nodes zlifo lcfr dsep note modification removes
problematic interaction low cost high cost aw
finally note effectiveness lifo strategies heavily dependent
order preconditions entered onto open list figure gives
node counts trains domain reverse precondition insertion
plot strategies solve trains trains case
two strategies lcfr dsep dsep lc strategies rely lifo
open condition selection zlifo dsep dunf gen ucpop significantly worse
preconditions correct order extent lifo
helps domains appears ability exploit decisions made
system designers writing domain operators suggested williamson
hanks

computation time
covered key questions set address relative effects
alternative search control strategies search space size particular
reconcile apparently con icting approaches lcfr zlifo concluded
lcfr dsep combines main advantages reducing search space size two
strategies namely lcfr use least cost selection mechanism least forced aws
zlifo use separable threat delay final question concerns price one
pay use lcfr dsep matter alternative strategies achieve
reduction search space size necessary spend vastly time processing
strategies pay
answer questions collected timing data experiments figures
gives data basic experiments run node
limit run time limit detailed appendix
experiments node limit time limit similar saw
little uence precondition ordering basic analyze data


fiflaw selection strategies






trains



trains






lcfr dsep
oc uc

lcfr dsep
oc uc f

lcfr dsep
oc

dsep lc
oc

figure trains node counts reversed precondition insertion




computation time overrun




time limit
node limit







dsep lc

zlifo

lcfr dsep

dsep

figure basic aggregate computation time performance leading strategies
default precondition ordering one graph strategies another
includes leading strategies make possible see distinctions among



fipollack joslin paolucci


computation time overrun





time limit



node limit






dseplc

zlifo

lcfrdsep

dsep

ucpop

uc
pop lc

dunfgen

lcfr

dunflc

dunf

figure basic aggregate computation time performance
timing data lcfr dsep large pay overhead
basic generating smaller search spaces therefore process
fewer nodes run time limit lcfr dsep time performance almost
identical zlifo despite fact repair cost computations expensive
stack popping lifo strategy run node limit lcfr dsep
worse time performance zlifo aggregate still performs markedly better
strategies change relative performance cases
strategies fail node limit lcfr dsep takes longer generate
nodes
another interesting observation dsep lc best time performance
basic set perhaps surprise dsep lc closely
approximates lcfr dsep differs primarily preference nonseparable threats
case tend low repair costs whenever node includes nonseparable threat dsep lc quickly select threat without compute repair
costs speed advantage outweighs cost processing extra nodes sometimes
generates
figures provide timing data trains tileworld domains
real surprises computation times taken parallel quite closely size
search spaces generated strategies generate smallest search spaces
fastest trains see dsep lc serve
omitted strategies poorly performing worse node time limit
experiments strategies graphed note ran reverse order experiments
node limit



fiflaw selection strategies




computation time overrun




default node limit
default time limit







lcfr


dunfgen


lcfr


dunfgen


dunfgen


zlifo


lcfr


zlifo


lcfrdsep


lcfrdsep


dsep


figure tileworld aggregate computation time performance leading
strategies
good approximation technique lcfr dsep although generates nodes
lcfr dsep somewhat faster

conclusion
synthesized much previous work aw selection partialorder causal link showing earlier studies relate one another
developed concise notation describing alternative aw selection strategies
presented series experiments aimed clarifying effects
alternative search control preferences search space size particular aimed
explaining comparative performance lcfr zlifo strategies showed
neither aw selection strategies consistently generates smaller search spaces
combining lcfr least cost delay separable threats
included zlifo strategy obtain strategy lcfr dsep whose space
performance nearly good better lcfr zlifo given
therefore concluded much zlifo advantage relative lcfr due delay
separable threats rather use lifo strategy although unable
resolve question whether least cost selection required unforced well
forced aws found evidence lifo strategy unforced aws better
hand separable threat delay clearly advantageous open question exactly
advantageous conducted preliminary experiments suggest
interpreting trains timing data important note strategies shown notably
ucpop ucpop lc dunf failed solve trains within node time limit



fipollack joslin paolucci




computation time overrun















oc uc
dunf gen

oc
dunf gen

oc
lcfr dsep

oc
dunf lc

oc
dsep lc

oc uc f
dunf gen

oc uc f
lcfr

oc uc
lcfr

oc uc f
lcfr dsep

oc uc f
zlifo

oc uc
lcfr dsep



figure tileworld aggregate computation time performance leading
strategies reversed precondition insertion


computation time overrun




default node limit
default time limit




oc
ucpop

oc
lcfr dsep

oc uc
lcfr dsep

oc uc f
lcfr dsep

oc
dsep lc

oc uc f
zlifo

oc
zlifo

oc
dunf

oc
dsep



figure trains aggregate computation time performance leading strategies


fiflaw selection strategies




computation time overrun










oc
dsep

oc uc f
zlifo

oc
zlifo

oc uc
lcfr dsep

oc uc f
lcfr

oc
dunf lc

oc
lcfr

oc
ucpop lc

oc
lcfr dsep

oc uc f
lcfr dsep

oc
dsep lc



figure trains aggregate computation time performance leading strategies reversed precondition insertion



fipollack joslin paolucci
much search space reduction delaying separable threats
achieved making separation systematic something ucpop v
considered question computation time showed often lcfr dsep
requires computation time comparable zlifo lcfr dsep therefore
seen paying computational overhead search space reduction moreover
peot smith dsep lc provides good approximation lcfr dsep although
produces somewhat larger search spaces quickly
conclusions however tempered fact certain clusters combined strategy lcfr dsep generate minimal search spaces
saw tileworld important recognize need
particular temporal ordering among plan steps recognition obtained
resolving separable threats early trains get paid uget paid domains
matters recognizing particular effect fact achieved one
way recognized particular aw selected aw happens
generally least cost aw available lesson learned sets
although understand reasons lcfr zlifo perform
way combine best features create good default strategies pocl clear domain dependent characteristics
identified trains tileworld domains must still taken account settling
aw selection strategy domain

acknowledgments
martha pollack work project supported air force oce scientific
f nsf young investigator award iri david
joslin supported rome labs rl arpa f nsf cise
postdoctoral award cda massimo paolucci supported
oce naval cognitive neural sciences division n j
grateful alfonso gerevini providing us code used
earlier study allowing us use experiments would thank
arthur nunes yazmine deleon assisted us carrying experiments done
preliminary stages work finally thank alfonso gerevini len schubert
michael wellman anonymous reviewers helpful comments work

appendix ruling ceiling effects
data collected node limit examined least
one strategies hit node limit table gives second worst node count
shows basic least one strategy
failed least one succeeded second worst strategy generally created fewer
nodes
similarly trains tileworld cases except tw
second worst strategy took fewer nodes tw took recall
node limit basic nodes trains
tileworld nodes thus clear strategies hit


fiflaw selection strategies

hanoi
r test
monkey test
monkey test
get paid
get paid
get paid
fixit
ho demo
fixb
uget paid
uget paid
uget paid
prodigy p
move boxes
move boxes

default

reverse









trains
trains
tw
tw
tw
tw
tw











































figure second worst node counts failing strategies
node limit substantially worse strategies succeed even
succeed increasing node limit slightly comparative performance would still
poor
thus node limits imposed making strategies look worse
actually hand computing overrun may making
strategies look better actually use value
nodes generated strategy hits limit actual number nodes
might take run completion could significantly higher analyses
considered absolute performance strategies individual
aggregate performance measured average overrun
compared experiments run time limit
run node limit basic set time limit seconds high
enough cases strategies could compute significantly nodes


fipollack joslin paolucci
could node cutoff nonetheless almost identical nearly
cases strategy failed node cutoff failed time limit cutoff
four exceptions
hanoi nodes limit dsep fails second time limit
succeeds taking nodes
uget paid node limit ucpop lc fails second
time limit succeeds taking nodes
uget paid node limit ucpop lc fails second
time limit succeeds taking nodes
fixit nodes limit dsep lc ucpop lc zlifo fail
second time limit succeed nodes
respectively strategies fail solve limit
similarly strong correspondence obtained
trains tileworld node limit time limit cases
strategy able succeed within node limit able succeed
within second time limit nature computation
time per node great specifically
tw dunf succeeded nodes run node limit failed
second time limit
tw lcfr dsep oc node selection strategy succeeded
nodes failed time limit
tw lcfr dsep oc uc node selection strategy succeeded
failed limit
tw lcfr oc node selection strategy succeeded nodes
failed time limit
one case strategy fail node limit succeed within time limit
tw dsep oc node selection strategy failed node
limit succeeded nodes second time limit note
significantly worse second worst strategy solved
generating nodes
given close correspondence experiments node time limits
collected node limit data experiments reversed precondition
insertion



fiflaw selection strategies

references

allen j f schubert l k ferguson g heeman p hwant c h kato light
margin n g miller b w poesio traum b r trains
project case study building conversational agent experimental
theoretical artificial intelligence
chapman conjunctive goals artificial intelligence
currie k tate plan open architecture artificial intelligence
etzioni hanks weld draper lesh n williamson
incomplete information proceedings third international conference principles knowledge representation reasoning pp

gerevini personal communication
gerevini schubert l accelerating partial order planners techniques
effective search control pruning journal artificial intelligence

joslin passive active decision postponement plan generation ph
thesis intelligent systems program university pittsburgh
joslin pollack e least cost aw repair plan refinement strategy
partial order proceedings twelfth national conference artificial
intelligence aaai pp seattle wa
joslin pollack e early commitment plan generation ever good
idea proceedings thirteenth national conference artificial intelligence
aaai pp portland
kambhampati knoblock c yang q refinement search
unified framework evaluating design tradeoffs partial order artificial
intelligence
kumar v constraint satisfaction survey ai magazine

mcallester rosenblitt systematic nonlinear proceedings
ninth national conference artificial intelligence pp anaheim ca
pednault e p synthesizing plans contain actions context dependent
effects computational intelligence
penberthy j weld ucpop sound complete partial order planner
adl proceedings third international conference knowledge representation reasoning pp cambridge


fipollack joslin paolucci
peot smith e conditional nonlinear proceedings first
international conference ai systems aips pp college
park md
peot smith e threat removal strategies partial order
proceedings eleventh national conference artificial intelligence pp
washington c
pollack e ringuette introducing tileworld experimentally evaluating agent architectures proceedings eighth national conference artificial
intelligence pp boston
russell norvig p artificial intelligence modern prentice hall
englewood cliffs nj
russell j ecient memory bounded search proceedings
tenth european conference artificial intelligence pp
smith e peot note dmin strategy unpublished manuscript
srinivasan r howe e comparison methods improving search eciency
partial order planner proceedings th international joint conference
artificial intelligence pp
tate drabble b dalton j reasoning constraints within plan
tech rep arpa rl plan tp v aiai edinburgh
tsang e foundations constraint satisfaction academic press
tsuneto r erol k hendler j nau commitment strategies hierarchical task network proceedings thirteenth national conference
artificial intelligence aaai pp portland
weld introduction least commitment ai magazine

wilkins e practical extending classical ai paradigm morgan
kaufmann san mateo ca
wilkins e desimone r v applying ai planner military operations
fox zweben eds intelligent scheduling pp
morgan kaufmann publishers san mateo ca
williamson hanks flaw selection strategies value directed
proceedings third international conference artificial intelligence
systems pp




