Journal Artificial Intelligence Research 6 (1997) 111{145

Submitted 8/96; published 4/97

Lifeworld Analysis
Philip Agre

pagre@ucsd.edu

Ian Horswill

ian@ils.nwu.edu

Department Communication 0503
University California, San Diego
La Jolla, CA 92093, USA
Northwestern University Computer Science Department
1890 Maple Avenue
Evanston, IL 60201, USA

Abstract

argue analysis agent/environment interactions extended
include conventions invariants maintained agents throughout activity.
refer thicker notion environment lifeworld present partial set formal
tools describing structures lifeworlds ways computationally
simplify activity. one specific example, apply tools analysis Toast
system show versions system different control structures fact
implement common control structure together different conventions encoding
task state positions states objects environment.

1. Introduction
Biologists long sought concepts describe ways organisms adapted
environments. Social scientists likewise sought concepts describe ways
people become acculturated participants social worlds around them. Yet
dicult approach phenomena methods computational modeling.
see least two reasons diculty. first tradition modeling
artificial intelligence developed around concern cognition, is, mental processes
understood intervene stimuli responses human beings. Although minority
traditions ecological psychology reacted approach studying human
life, able translate concepts computational mechanisms
match expressive power symbolic programming. second reason subtle:
one conceives organisms environments spatially extended mechanisms
explained according principles boundary
(the surface body) particularly different from, interesting than,
rest total organism-environment system. challenge computational modeling,
then, conceptualize agents' adaptations environments ways neither
treat agents isolated black boxes dissolve one big machine.
purposes, find useful distinguish two aspects agent's
involvement familiar environment: embodiment embedding. \Embodiment"
pertains agent's life body: finiteness resources, limited perspective
world, indexicality perceptions, physical locality, motility,
on. \Embedding" pertains agent's structural relationship world: habitual
c 1997 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiAgre & Horswill
paths, customary practices fit shapes workings things,
connections agents, position set roles hierarchy, forth.
concept embedding, then, extends concrete kinds locatedness
world (places, things, actions) abstract kinds location (within social systems,
ecosystems, cultures, on). Embodiment embedding obviously interrelated,
powerful consequences agents' direct dealings agents
solitary activities physical world. principal focus article
embedding, particularly ways agents maintain relationships objects
functionally significant tasks.
paper develop thoughts embodiment embedding follows:

Section 2 reviews concept environment developed early work
Newell Simon.

Section 3 introduces adaptation traditional idea, call life








worlds, sketch involved lifeworld analysis.
Section 4 introduces informally concept factorization lifeworlds; refers
roughly structures lifeworld permit agents' decisions made
independently one another.
Section 5 defines basics formal theory lifeworld analysis, namely
concepts environments, actions, policies, factorization, reduction one
environment another. purpose formalism characterize kinds
interactions arise agents familiar lifeworlds.
Section 6 brie introduces computer program wrote illustrate
phenomena lifeworlds.
Section 7 applies formalism modeling world program
operates; proceeds modeling successively complicated versions world.
Section 8 explains program keeps track objects world
figure activities, discusses issues arise trying model
keeping-track formal terms.
Section 9 sums formal work explaining precise relationship
program formal model world.
Section 10 expands theory lifeworlds informally introducing
concept cognitive autopoiesis, collection means agents manipulate surroundings provide conditions cognitive processes;
provide taxonomy phenomena.
Section 11 concludes suggesting directions future work.

2. Concept Environment

Intuitively, notion \the environment" AI robotics refers relatively enduring stable set circumstances surround given individual. environment
probably yours, though may similar. hand, although
environment starts leave (at skin, perhaps), clear ending-point.
necessarily defined terms metric space; physically distant circumstances
consequences life (via telephone, say) properly regarded
112

fiLifeworld Analysis
part environment well. environment agents live, determines
effects actions. environment thus matter importance computational
modeling; know agent's environment determine given
pattern behavior adaptive. particular need positive theory environment,
is, kind principled characterization structures dynamics
attributes environment virtue adaptive behavior adaptive.
Herbert Simon discussed issue pre-AI work. book Administrative Behavior (1947), example, presents uential theory later became known limited
rationality. contrast assumption rational choice classical economics, Simon
describes range cognitive limitations make fully rational decision-making organizations impracticable. Yet organizations thrive anyway, argues, provide
individual structured environment ensures decisions good
enough. division labor, example, compensates individual's limited ability
master range tasks. Structured ows information, likewise, compensate
individual's limited ability seek information judge relevance. Hierarchy
compensates individual's limited capacity choose goals. fixed procedures
compensate individuals' limited capacity construct procedures themselves.
comparison Simon's early theory Administrative Behavior, AI downplayed
distinction agent environment. Newell Simon's early work
problem solving (1963), environment reduced discrete series choices
presents course solving given problem. phrase \task environment" came
refer formal structure search space choices outcomes. clearly
good way modeling tasks logical theorem-proving chess, objects
manipulated purely formal. tasks involve activities physical world,
however, picture complex. cases, problem solving model analyzes
world distinctive way. theory treat world agent separate
constructs. Instead, world shows up, speak, phenomenologically: terms
differences make difference agent, given particular representations, actions,
goals. Agents different perceptual capabilities action repertoires, example,
inhabit different task environments, even though physical surroundings goals
might identical.
Newell Simon's theory task environment, then, tends blur difference
agent environment. framework analysis, find phenomenological
approach valuable, wish adapt purposes. Unfortunately, Newell
Simon carry blurring theory cognitive architecture. often unclear
whether problem solving activity takes place wholly within mind, whether
unfolds agent's potentially complicated interactions physical world.
distinction arise cases theorem-proving chess,
domain whose workings easily simulated mental reasoning. crucial
domain whose actions uncertain outcomes. Even though wish retain
Newell Simon's phenomenological approach task analysis, therefore, wish
presuppose agents reason conducting searches problem spaces. Instead,
wish develop analytical framework guide design wide range
agent architectures. particular, want analytical framework help us design
simplest possible architecture given task.
113

fiAgre & Horswill

3. Lifeworlds
use term lifeworld mean environment described terms customary
ways structuring activities take place within | conventional uses
tools materials, \loop invariants" maintained within conventional
activities, on. term originally comes phenomenological sociology (Schutz
& Luckmann, 1973), refers familiar world everyday life, specifically
world described terms make difference given way life. Cats
people, example, understood inhabiting physical environment
different lifeworlds. Kitchen cupboards, window sills, spaces underneath chairs
different significances cats people, balls yarn, upholstery, television
sets, cats. Similarly, kitchen affords different kind lifeworld chef
mechanic, though clearly two lifeworlds may overlap ways well.
lifeworld, then, physical environment, patterned ways
physical environment functionally meaningful within activity.
idea similar Gibson's theory perception (1986), two theories
differ important ways. Whereas Gibson believes perception worldly affordances
direct, believe perceptual process explained causal terms. Also,
whereas Gibson treated categories perception essentially biological innate,
regard cultural emergent.
analyzing lifeworld, one attempts draw individual structures within
facilitate customary activities. example, lifeworlds typically contain artifacts
tools specifically evolved support activities. tools
arranged world ways simplify life reduce cognitive burden
individuals: cups typically found cupboards, food refrigerators grocery
stores. one needs remember butter found specific grocery store
butter grocery stores found well-defined dairy section, usually along wall,
recognized distance; dairy section view, butter
visible definite area. Artifacts designed make functional properties
perceptually obvious. Handles perceptibly suited picking up, knobs perceptibly
suited turning, forks perceptibly suited impaling things, (Brady,
Agre, Braunegg, & Connell, 1984; Winston, Binford, Katz, & Lowry, 1983). Contrarily,
generally assumed artifacts provide readily perceptible grounds
drawing functional distinctions fact interchangeable. Usually, functionally
significant property object obvious, lifeworld provides alternate way
marking it. see record player house, example, assume
mine unless specific reason to. aspects lifeworlds
tend make easy perform particular kinds activities within without
remember many facts reinvent screwdriver first principles.
Lifeworlds contain networks interacting conventions practices simplify specific aspects specific activities. practices relieve agents burden solving certain
problems spot diffuse solutions throughout activity agent
many agents. example, hospital might try get along without maintaining sterile
conditions. People always germs, technically always infected. problem
making sure infections never get control. direct solution would
114

fiLifeworld Analysis
constantly monitor patients, assess degree infection treat
becomes severe. Since undesirable number reasons, hospital instead tries
prevent infections patients maintaining sterile conditions. might this,
example, looking contaminated objects surfaces disinfecting them. Unfortunately, sterility visible surface characteristic. Instead, hospitals solve problem
structuring space activity. Different locations kept less sterile depending
conventional uses: operating rooms sterile hallway oors. Objects
generate germs (people) washed, masked, gloved. Critical instruments
come contact specially sterilized use. Tongue depressors
assumed dirty trash (or biohazard bag) clean
wrapped paper. objects surfaces periodically disinfected regardless
level contamination. practices maintained regardless immediate
need them. hospital (for reason) temporarily find without
patients, workers would stop washing hands disinfecting bathrooms.

4. Factorization Lifeworlds

Simon, Sciences Artificial (1970), argued complex systems \nearly
decomposable." model rooms building, whose walls tend minimize
effects activity one room upon activity another. Sussman (1975),
analysis block-stacking tasks, classified several types \subgoal interactions"
result attempts break tasks subtasks; one hopes tasks
decomposable, bugs arise decomposable enough. One assumes
task decomposable unless one reason believe otherwise. Sussman's research,
rich tradition planning research helped inaugurate, concerned dicult problem
constructing plans presence subgoal interactions. goal, complementary
theirs, analyze many ways tasks really decomposable, derive
broadest range conditions moment-to-moment activity proceed without
extensive analysis potential interactions.
non-pathological lifeworld structured ways limit prevent interactions
among subtasks. structures might taxonomized follows:

Activity partition. lifeworlds separate activities discrete headings: sewing

distinct activity bathing, gathering food separate activity giving
birth, on. distinctions provide basis reckoning \different activities" purposes rest partitions. boundaries among
various activities often marked type ritual.

Spatial partition. Different things often done different places. Tasks may

confined places associated tools materials stored,
suitable conditions lighting safety obtain. places may even close together, different recipes prepared different sections countertop space
different kinds food kept different parts one's plate, boundary
regions perhaps employed assemble forkfuls neighboring foods. general, activities arranged space, decisions made one place tend minimal
interaction decisions made places. course spatial distance brings
115

fiAgre & Horswill
absolute guarantees functional independence (using resources one
location prevent carted another location another use later
on), general tendencies.

Material partition. Different activities often involve different materials, decisions affect materials one activity interact decisions affect
materials activity.

Temporal partition. Different activities often take place different times, thus lim-

iting channels might constrain one another. times
might standardized points cycle day week, ordering
might constrained kind precondition first activity produces
successive ones depend upon.

Role partition. Simon pointed division labor eases cognitive burdens.
part supplying individuals separate spheres conduct
respective activities.

Background maintenance. Many activities background conditions main-

tained without reference specific goals. example, one maintains stocks supplies pantry, puts things back belong, forth. Hammond,
Converse, Grass (1995) call \stabilization." (See Section 5.)
practices stabilize relationships agent materials used
customary activities. tend ensure, example, one encounter
one's hammer currently opened box corn akes definite sorts recurring
situations. thus reduce complexity life, variety different hassles
arise, encouraging rise routine patterns cycles activity rather
constant stream unique puzzles.

Attributes tools. Numerous properties tools limit interactions among separate

decisions. Virtually tools resettable, meaning regardless one
them, restored normal state within
full range functionalities accessible. (This course assumes one
using tools customary ways breaking them.) Thus
properties tool place ordering constraints activities
use it. Likewise, tools committed tasks long periods.
turned screw screwdriver, example, screwdriver stay
\stuck" screw long period. Thus necessary schedule
use screwdriver unless several people wish use once. Exceptions
general rule include bowls (whose ingredients must often sit waiting future actions
conditions, cannot contain anything else meantime), stove burners
(which sometimes must remain committed heating particular dishes
reached certain states before), clamps (which must remain fastened
glue dried sawing operations completed).

Supplies tools. latter tools raise spectre generalized scheduling problems potential deadlock among multiple activities, problems
116

fiLifeworld Analysis
fact sometimes arise cooking people number
given kitchen adapted. time, though, one solves problems
scheduling simply enough tools must remain
committed particular purposes period time. Lansky Fogelsong (1987)
modeled effects search spaces limited interactions different cooks
using overlapping sets tools.

Warning signs. things go wrong, unpleasant subgoal interactions ensue.

avoid diculties, individual, community, species keeps track warning
signs cultivates capacity notice them; warning signs include supplies
running low funny smells. often done primitive associative level,
rats stay away smells associated stuff made sick
people develop phobias things present suffered traumas.
Communities often arrange certain warning signs become obtrusive,
kettles whistle natural gas mixed another gas distinctive smell.

Simple impossibility. Sometimes things impossible, obviously so,
necessary invest great effort deciding them.

Monotonicity. Many actions changes state irreversible. Irreversible changes
cause decisions interact certain things must done change takes
place. provides structure decision process: lifeworld needs
make evident must done given irreversible change occurs.

Flow paths. Often lifeworld arranged particular materials (parts

assembly line, paperwork organization, food way refrigerator stove
table) follow definite paths. paths provide great deal structure
decision-making. inspecting various points along path, example, one see
needs done next. determining object is, one determine
must done must taken afterward. paths
consciously mapped others emergent properties set customs.

Cycles. Likewise, many lifeworlds involve stable cycles activities, perhaps

cycles nested inside others. resulting rhythms often expressed
recurring combinations materials, decisions, spatial arrangements, warning signs,
on.

Externalized state. computer people, \state" (used mass noun) means dis-

cernible differences things modified voluntarily, interpreted functionally significant way. Early AI treat internal state
(memory) external state (functionally significant mutable states world)
importantly different, often analytically convenient treat uniform
fashion. often advantageous record state world, whether relative
locations things persistent states (in count noun sense)
left (Beach, 1988). example, one need remember whether eggs
broken fact readily perceptible, one's attention drawn
suitable occasion, one understands significance task. Likewise, one
117

fiAgre & Horswill
save great deal memory retrieving ingredients evening's
recipes cupboards placing customary place shelf.
Lifeworlds, then, great deal structure permits decisions made independently one another. point real lifeworlds permit anyone live
100% \reactive" mode, without performing significant computation, even
would desirable. point, rather, nontrivial cognition people perform takes place considerable background familiar generally reliable
dynamic structure.
factorability lifeworlds helps particularly understanding activities
agent body. great deal focusing inherent embodiment. look
one place time, handle one tool time, activities necessarily
serial. attention certain degree hysteresis: gotten work
one countertop using one particular tool, example, natural step
carry task. crucial, therefore, different tasks relatively
separate consequences, lifeworld provide clues change task
necessary, functionally significant conditions generally detected using
general-purpose forms vigilance occasionally looking around. course, certain
kinds activities complex this, require special-purpose strategies
go beyond simple heuristic policies \find something needs
it." point complex activities many interacting components
rare, generally conducted specially designed adapted lifeworlds,
lifeworlds structured minimize diculty tasks rather increase it.
various phenomena together formed motivation concept indexicalfunctional deictic representation (Agre & Chapman, 1987; Agre, 1997). Embodied agents
focused one activity one set objects time; many objects specifically adapted activity; relevant states generally readily perceptible; objects
perceptibly different generally interchangeable; stabilization practices
help ensure objects encountered standardized ways. thus makes sense,
purposes, represent objects generic ways one's relationships them.
ashlight keep car the- ashlight-I-keep-in-the-car FLASHLIGHT-13.
maintain stable relationship ashlight keeping standard place, putting
back done it, using intended purposes, keeping
batteries fresh, on. presence environment ensures ready access
light car breaks night, therefore need separately plan
contingency time drive. conventional structures activity
maintain ashlight's presence \loop invariant." presence ashlight
activities ensure structures lifeworld.

5. Environments, Policies, Reducibility

section, introduce formalism. purpose formalism directly
specify workings agent's cognitive machinery. Instead, purpose construct \principled characterizations interactions agents environments
guide explanation design" (Agre, 1995). formalism, words, describes
agent's embodied activities particular environment. characterized dy118

fiLifeworld Analysis
namics activities, becomes possible design suitable machinery. matter
principle, want design simplest possible machinery consistent
given pattern interaction (Horswill, 1995). therefore make priori commitments
machinery. favor particular architecture particular activity
analyzed. make priori commitments matters analog
versus digital, \planning" versus \reaction," on. experience real
lifeworlds real activities incorporate great deal useful dynamic structure,
effort invest studying structure repaid parsimonious theories
machinery. intend methods equally useful investigating types
activity designing types machinery might able participate them.
concept lifeworld appear specific mathematical entity
formalism. intuition, however, this: objective material environment,
agent directly deal environment's complexity. Instead deals
functional environment projected material environment.
projection possible various conventions invariants stably present
environment actively maintained agent. lifeworld understood
functional world together projection conventions create it.
section summarizes formal model environmental specialization given Horswill
(1995); proofs theorems, see original paper. Subsequent sections apply
extend model.
model environments state machines behavior agents policies
mapping states actions.
environment E pair (S; A) state-space set possible
actions.
action a: ! mapping states states.
policy p: ! mapping states actions taken. paper,
states include facts physical environment, straightforward matter include agent's internal states well (Horswill, 1995).
combination policy environment creates dynamic system: environment's state mapped policy action maps environment new state
whole process repeated.
discrete control problem (DCP) pair (E; G) environment E goal G,
subset E 's state space.
policy solves problem dynamic system generates environment
eventually reaches goal state.
solves problem halts remains within G entering it.
example, consider robot moving along corridor n equally spaced oces
labeled 1, 2, 3, on. formalize environment Zn = (f0; 1; :::; n ,
1g; fincn ; dec; ig), identity function, incn dec map integer
+ 1 , 1, respectively, proviso dec(0) = 0 incn(n , 1) = n , 1
119

fiAgre & Horswill

(dec,i)
(i,inc)

dec

dec

inc5
3

dec

inc5

4

(i,dec)

inc5
2

(1,1)
(i,inc)

1

(dec,i)

(i,dec)

inc5

inc5
0

(i,inc)

(0,1)

dec

(inc,i)
(i,inc)

(inc,i)

(0,0) (dec,i) (1,0)

dec

(dec,i)
(i,dec)

(inc,i)

(inc,i)
(i,dec)

Figure 1: environment Z5 (left) serial product Z2 itself, expressed
graphs. Function products written pairs, i.e. inci written
(inc; i). Identity actions (i ii) left undrawn reduce clutter.
(see Figure 1). Note effect performing identity action stay
state.
emphasize policy model agent's behavior, causal/computational processes behavior exhibited. specifies agent
state, it. thus theoretical construct, data structure algorithm
agent's head. examine implementation issues surround policies
section 8.

5.1 Product Environments

majority formal sections paper explore phenomenon factoring.
particular, explore policies factorable environments composed
policies factors. state-machine models environments, factorization
factorization state-space; environment's state-space Cartesian product
state-spaces. environment, whole, \factorable" component
sub-environments. example, position king chess board row
column components. thought \product" components,
isomorphic Z8 (since eight rows eight columns). consider
environment car drives 88 grid city blocks, see
kind product Z8 itself. environments 88 grids state spaces,
car environment allows one component change time, whereas king
environment allows change.
must therefore distinguish different kinds factorization. call chessboard
case parallel product Z8 itself, car case serial product.
focus another kind factorization later. Let Cartesian product two functions f
g fg: (a; b) 7! (f (a); g(b)), let identity function. two environments
E1 = (S1; A1 ) E2 = (S2 ; A2 ), define parallel product

E1 k E2 = (S1S2; fa1a2 : a1 2 A1; a2 2 A2 g)
120

fiLifeworld Analysis
serial product
E1 *
) E2 = (S1S2; fa1i : a1 2 A1 g [ fia2 : a2 2 A2 g)
products DCPs defined obvious way:
(E1 ; G1 ) k (E2 ; G2 ) = (E1 k E2 ; G1G2)
(E1 ; G1 ) *
) (E2 ; G2) = (E1 *
) E2 ; G1G2)
state diagram Z2 *
) Z2 shown Figure 1.
say environment DCP parallel (or serial) separable isomorphic
product environments DCPs.
5.1.1 Solvability Separable DCPs

important property separable DCPs solutions constructed
solutions components:
Lemma 1 Let p1 policy solves D1 halts states set initial
states I1 , let p2 policy solves D2 halts states I2 .
policy
p(x; y) = p1(x)p2(y)
solves D1 k D2 halts states I1I2 . (Note using convention
treating p, function pairs, function two scalars.)
Lemma 2 Let p1 policy solves D1 states set initial states
I1, let p2 policy solves D2 states I2 . policy
p(x; y) = p1 (x)i ip2(y)

2 G2; x 62 G1 ) p(x; y) = p1(x)i
x 2 G1; 62 G2 ) p(x; y) = ip2(y)
solve D1 *
) D2 halt states I1I2.
Note parallel serial cases different. One would expect parallel case
easier solve policy perform actions state components
simultaneously. fact dicult one required perform actions
simultaneously leaves agent way preserving one solved subproblem
solving another. Consider \ ip- op" environment F = (f0; 1g; fflipg) flip(x) =
1 , x. F property every state accessible every state. F *
)F
property. F k F , however, not. F k F one action, ips
state components once. Thus two states accessible given state
F k F : state ip. king, problem fixed add
identity action F . possible leave one component product intact,
changing other. identity action, sucient, necessary. weaker,
still unnecessary, condition F action always maps goal states goal
states.
121

fiAgre & Horswill

s'



= (s' )

a'
a' (s' )
unreduced environment




a(s) = (a' (s' ))
reduced environment

Figure 2: simple reduction environment E 0 E . s0 corresponding
states reduced unreduced environments respectively a0
corresponding actions. projection simple reduction \commutes"
actions, (a0 (s0 )) = a((s0 )), alternatively, a0 = . Thus
regardless whether take projection action,
achieve result.

5.2 Reduction

Another important kind structure one environment considered abstraction another (Newell, Shaw, & Simon, 1960; Sacerdoti, 1974; Knoblock, 1989).
abstract environment retains fundamental structure concrete environment
removes unimportant distinctions among states. abstract state corresponds set
concrete states abstract actions correspond complicated sequences concrete
actions.
say projection environment E 0 another environment E
mapping state space E 0 E . say simple reduction
E 0 E every action E , corresponding action a0 E 0
state s0
(a0 (s0)) = a((s0 ))
equivalently,
a0 =
function composition operator. say a0 -implementation
use denote function mapping E -actions implementations
E 0 .
possible define much powerful notion reduction implementations allowed arbitrary policies. requires fair amount additional machinery,
however, including addition state agent. Since simple reduction suce
purposes, simply assert following lemma, direct consequence
general reduction lemma (Horswill, 1995):
Lemma 3 Let simple reduction E 0 environment E let (E 0 ; G0)
DCP. policy p solves (E; (G0 )),
p = p
122

fiLifeworld Analysis
solves (E 0 ; G0 ).

5.3 Related Work

formal models environments use state-space descriptions environment, usually finite-state machines. Rosenschein Kaelbling used finite state machines represent
agent environment (1987, 1989, 1986). formalization allowed specialized
mechanisms directly synthesized descriptions desired behavior formalization behavior environment. formalization powerful enough form
basis programming language used program real robot. Later, Rosenschein developed method synthesizing automata whose internal states provable correlations
state environment given set temporal logic assertions dynamics
environment. Donald Jennings (1992) use geometric, similar, approach
constructing virtual sensors. Lyons Arbib (1989) model organisms robots
using process algebras, Beer (1995) employs formalisms dynamic systems theory.
Wilson (1991) specifically proposed classification simulated environments
based types mechanisms operate successfully within them. Wilson
used finite state formalization environment. divided environments
three classes based properties determinacy. Todd Wilson (1993) Todd
et al. (1994) taxonomized grid worlds terms behaviors successful
them. Littman (1993) used FSM models classify environments reinforcement learning
algorithms. Littman parameterized complexity RL agents terms amount
local storage use far future RL algorithm looks.
empirically classified environments minimal parameters still allowed
optimal control policy learned.
extensive literature discrete-event dynamic systems (Kosecka, 1992),
model environment finite state machine, assume transition
information (rather state information) visible agents.
alternative state-machine formalism found work Dixon (1991).
Dixon derives semantics first order logic, world comes individuated
objects relations, rather state-space methods used here. Dixon's \open"
approach avoids need define environment single mathematical structure.
work, Dixon's work attempts formally model assumptions system makes
environment. Dixon's interest, however, individual program means
rather comparing competing programs.

6. Toast

Toast (Agre & Horswill, 1992) program simulates short-order cook reasonably detailed simulation kitchen (see Figure 3). Toast, world consists

set objects ovens, pans, cutting boards, globs pancake batter, individual eggs,
customers restaurant. object type (e.g., EGG) objects
given type common set possible states common set possible operations
performed them. action involves set objects given types.
action require objects specified states may change states
objects, others. example, MIX operation would involve objects type
123

fiAgre & Horswill
Time
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
30
31
36
46
56
57
58
59
60
69
79
89
90
91
92
93
94
95
96
97
98
99
100
101
102

Event
(BREAK-EGG EGG-11 BOWL-4) [Making omelette]
(ADD-EGG EGG-10 OMELETTE-BATTER-0)
(ADD-EGG EGG-9 OMELETTE-BATTER-0)
(BEAT OMELETTE-BATTER-0 WHISK)
(MOVE PAN-4 BURNER-4)
(MOVE BUTTER-PAT-15 PAN-4)
(MELT BURNER-4 PAN-4 BUTTER-PAT-15)
(MOVE SLICE-23 TOASTER) [Waiting butter making toast]
(START TOASTER SLICE-23)
(MOVE KNIFE-4 PLATE-1) [Waiting toast setting table]
*** Done goal (KNIFE CLEAN PLATE-1) ***
(MOVE PLATE-1 KITCHEN-TABLE)
(MOVE FORK-4 PLATE-1)
*** Done goal (FORK CLEAN PLATE-1) ***
(MOVE SPOON-4 PLATE-1)
Toaster pops!
(MOVE BUTTER-PAT-14 KNIFE-3) [Back toast]
(BUTTER SLICE-23 KNIFE-3 BUTTER-PAT-14)
(POUR-OMELETTE-BATTER OMELETTE-BATTER-0 ...) [Butter melted back omelette]
(MOVE SLICE-23 PLATE-1) [Setting table]
*** Done goal (SLICE BUTTERED PLATE-1) ***
*** Done goal (SPOON CLEAN PLATE-1) ***
(POUR-FLOUR FLOUR BOWL-3) [Making pancake]
(ADD-SUGAR SUGAR PANCAKE-BATTER-0)
(ADD-BAKING-POWDER BAKING-POWDER PANCAKE-BATTER-0)
(FOLD OMELETTE-0 SPATULA-2) [Tending omelette]
(ADD-MILK MILK-DISPENSER PANCAKE-BATTER-0) [Back pancakes]
(ADD-EGG EGG-8 PANCAKE-BATTER-0)
(MIX PANCAKE-BATTER-0 SPOON-3)
(MOVE PAN-3 BURNER-3)
(FLIP OMELETTE-0 SPATULA-2) [Tending omelette]
(MOVE BUTTER-PAT-13 PAN-3) [Pancake]
(MELT BURNER-3 PAN-3 BUTTER-PAT-13)
(MOVE OMELETTE-0 PLATE-1) [Finishing omelette]
*** Done goal (OMELETTE COOKED PLATE-1) ***
(SPOON-BATTER PANCAKE-BATTER-0 PAN-3 BUTTER-PAT-13) [Pancake]
(FLIP PANCAKE-0 SPATULA-2)
(MOVE PANCAKE-0 PLATE-3)
*** Done goal (PANCAKE COOKED PLATE-3) ***
(MOVE PLATE-3 KITCHEN-TABLE)
(MOVE PAN-2 BURNER-2) [Pancake 2]
(MOVE BUTTER-PAT-12 PAN-2)
(MELT BURNER-2 PAN-2 BUTTER-PAT-12)
(SPOON-BATTER PANCAKE-BATTER-0 PAN-2 BUTTER-PAT-12)
(FLIP PANCAKE-1 SPATULA-2)
(MOVE PANCAKE-1 PLATE-2)
*** Done goal (PANCAKE COOKED PLATE-2) ***
(MOVE PLATE-2 KITCHEN-TABLE)
(CLEAN PAN-2) [Cleanup]
(CLEAN PAN-3)
(CLEAN SPOON-3)
(CLEAN SPATULA-2)
(CLEAN BOWL-3)
(CLEAN KNIFE-3)
(CLEAN PAN-4)
(CLEAN WHISK)
(CLEAN BOWL-4)
(TURN-OFF BURNER-2)
(TURN-OFF BURNER-3)
(TURN-OFF BURNER-4)

Figure 3: Sample run breakfast program. agent given goals making
omelette, two pancakes, slice toast, setting table, cleaning
up. comments appear square brackets.
MIXING-BOWL, BATTER,

SPOON. would require spoon CLEAN state
effects would put batter MIXED state spoon DIRTY
state. Objects perform actions, Toast agent, oven, customers
modeled objects perform actions cooking, transferring heat, making
orders, respectively.
Toast divides objects world two important classes (see Figure
4). Informally, tools objects (1) end products cooking (2) easily
124

fiLifeworld Analysis
Material. Eggs. Fresh ! broken ! beaten ! cooked.
Material. Butter pat. Fresh ! melted.
Material. Milk supply. Non-empty ! empty.
Material. Pancake batter. Has- ! has-sugar ! has-dry ! has-milk ! has-all ! mixed.
Material. Pancake. Cooking ! cooked-1-side ! ipped ! cooked ! burnt.
Material. Bread slice. Fresh ! toasted ! buttered.
Tools. Forks, spoons, knives, spatulas, whisks. Clean ! dirty, dirty ! clean.
Containers. Bowls, plates, pans, stove burners, countertop, toaster, bread bag.
Active objects. Agent, stove burners, toaster.

Figure 4: object types current system.
reset initial states. example, knives spoons used dirtied
process cooking, end products cooking easily reset
clean state washing. Materials objects end products cooking
state graphs form linear chains. words, state material,
exactly one state brought exactly one action
bring there. example, egg scrambled always goes series
states UNBROKEN, BROKEN, BEATEN, COOKED. UNBROKEN state, action available
egg BREAK, action available BEAT.
Toast given stock type object. runs, customers give goals
(orders) prepare specific dishes. goal specifies type material (e.g., \EGG").
satisfied putting object type finished state. egg object
cooked matter. Toast manages dynamic set goals opportunistically
overlaps preparation processes finish scarce resources, stove burners,
become free. Toast uses surprisingly simple algorithm:
clock cycle simulator:
Choose material already cooked
Look action needed advance next state
action requires additional tools,
choose objects proper types
objects reset states
perform action
else choose one unreset tool objects
look perform reset action

algorithm intentionally sketchy implemented many versions
find intuitively similar, different control structures
require different correctness proofs. task next section draw
similarities produce coherent theory them.
Toast algorithm two interesting features:

algorithm proceeds table-lookup.
algorithm stateless: internal plans models stored agent;
information used choose actions stored world.
125

fiAgre & Horswill
Table lookup implies algorithm fast simple. Statelessness makes algorithm simple well, relatively robust face unexpected perturbations.

7. Modeling Toast World

Toast work? specifically, properties environment rely
upon work? general, strategy identify series structures environment
permit Toast's tasks factored, define series reductions
permit complex versions Toast's problem defined terms simpler ones.
claim vast generality Toast architecture; simply observe
environmental regularities Toast relies upon common many environments,
suggest method arguing Toast's architecture seems likely extend
types structure environment. Although different versions Toast rely
different structures, show versions rely on:
1. factorability environment individual objects. Factoring allows us
construct solutions problems solutions subproblems individual
factors.
2. special properties tool material object classes.
3. maintenance invariants agent's activity introduce new structure
environment.
formalization properties tools materials simple. precise formalization factorability objects, however, surprisingly dicult environment directly factorable using methods developed far. solve
problem defining new factoring technique called uniform reduction,
environment viewed collection overlapping instances schematic environments,
containing minimal set objects necessary perform task. agent solves
task choosing one instances reducing goal true environment
solution schematic instance. this, agent must keep track
instance operating goes along. could accomplished internal memory, course, agent would need memory performs
tasks concurrently. show structuring activity, agent
make information manifest environment, thus \storing" information
world.

7.1 Single-Material Worlds

start defining schematic environment Toast. environment
exactly one material cooked one tool needed cook it. simplify
further, start ignoring even tools.
1. Solve no-tools case.
2. Reduce self-resetting tools case no-tools case.
3. Reduce general case self-resetting tools case.
126

fiLifeworld Analysis
7.1.1 Single-Material Worlds Tools

Since materials linear chains state spaces, action restricted, say
least. case egg, might chain:
fresh break
! broken beat
! beaten heat
! cooked heat
! burnt
(We assume identity, \nop," action always available every state.
trivial assumption.) given state, one non-trivial action executed,
action selection agent trivial. solving DCP involving single-material
world one following must always hold:
current state goal state, need execute identity action.
current state pregoal state: goal state later chain
current state, reach executing unique action brings us
next state chain.
current state postgoal state: goal states earlier chain,
problem unsolvable.
really matters single-material worlds, therefore, many states
direction goal lies relative current state. sense,
really one single-material world, rather one class them, namely chains Cn given
length:
Cn = (f1; :::; ng; fincn ; ig)
(Note environment Zn , without actions move
backward along chain.)
Proposition 1 single-material worlds n states reducible Cn
Proof: Let E = (S; A) single-material environment. Define : ! f1; :::; ng
letting (s) s's position E 's state chain, i.e. first state maps 1, second
2, etc. Let action(s) denote unique action performed state s.
pincn (s) = (action(s))(s)
-implementation incn E reduced. 2
one real class single-material worlds, one real class
policies single-material DCPs:
(
s2G
pCn ;G(s) = i;inc ; ifotherwise
n
clearly solves DCP (Cn ; G) n valid G.
Corollary 1 goal G solvable single-material environment E tools,
solved policy
(
s2G
pE;G(s) = i;(action(s))(s); ifotherwise
127

fiAgre & Horswill
7.1.2 Single-Material Worlds Single-State Tools

suppose world contains material set tools, tools always clean
otherwise reset use. Self-resetting tools one state,
trivial kind environment. define \singleton" environment environment
exactly one state:
= (freadyg; fig)
single-state environments isomorphic , model environment consisting
material = (S; A) self-resetting tool k . state space simply
freadyg actions set

fa0 : (sM ; ready) 7! (a(sM ); ready)ja 2 Ag
action performs action -component product's state
leaves component unchanged. induction, that:

Proposition 2 environment isomorphic kS n .
single-state-tool worlds trivially reducible tool-free worlds.
7.1.3 Single-Material Worlds General Tools

general tool environment identical single-state tool environment, except
actions change states tools addition states materials. solve
general tool case using solution single-state tool case resetting tools whenever
dirtied.
proof simple, requires formalize notion tool. Let E
environment state space form S1 S2 ::: Sn. Let action E
Si component state space. say

independent Si never changes Si result regardless
value Si .

focused component Si independent components.
Si tool privileged value readyi 2 Si that:
{ state (s1; :::; si ; :::; sn ) E , reach state (s1; :::; readyi ; :::; sn )

using actions focused Si .
{ action a, either independent Si, focused Si, else
defined states whose Si component readyi .

prove general tool case reducible single-state tool case:

Lemma 4 environment tool components reduced one tools
replaced singletons. Specifically, let = ((S; A); G) DCP let readyT 2
, A0 = fa0 : (s; readyT ) 7! (a(s); t)ja 2 A; 2 S; 2 g. D0 = ((S T; A0 [
); G freadyT g) reducible tool D0.
128

fiLifeworld Analysis
Proof: Let pD solution (policy) D. definition tool, must
policy pT bring D0 state (s; t) (s; readyt ) without changing
component. Let projection D0 given

(

= readyT
(s; t) = s;?; ifotherwise
2 A, define -implementation a, pa
( 0
= readyT
pa (s; t) = ap ; ; ifotherwise

D0 reducible D. general case multiple tools follows induction. 2

7.2 Multiple-Material Worlds Single-Material Goals

reprise: want factor environment individual objects describe
Toast composite techniques operating individual factors. cannot
properly define environments Cartesian products individual objects defined isolation
way expressing actions involving multiple objects. can, however,
define set objects context minimal, schematic environment containing one
copy object. done so, want recapture notion environment
kind product objects different types. showing
environment two eggs thought two overlapping copies environment
one egg; copies differ choice egg.
treat environments state spaces formed products state spaces
objects. state environment tuple states objects. binding
schematic environment real environment particular kind projection
complex environment schematic, one reduction. reasonable
projections valid bindings, say environment uniformly reducible
schematic environment.
7.2.1 Bindings Uniform Reducibility
Let E 0 E environments state spaces built Cartesian products family

disjoint sets fSi g. Si might represent state spaces object types egg fork.
E 0 E would state spaces make number copies egg
fork.
say projection E 0 E simple every component result
component argument.

(s1; s2 ; s3; :::; sn ) = (si1 ; si2 ; :::; sim )
i1 ; :::; im [1; n]. Thus takes E 0 -state, s0 , probably throws away
components, possibly rearranges rest form new tuple. example, might

single particular egg's state and/or particular fork's state throw state
components away. projection simple, define kind inverse it,
129

fiAgre & Horswill

schematic world

multiple-object world

the-egg

egg0

the-fork

egg1

the-spatula

egg2

the-pan

egg3
egg4
fork0
fork1
fork2
spatula0
spatula1
pan0
pan1

Figure 5: binding (solid vectors) alternate binding (dashed).
call back-projection. define back-projection, , (s; s0 ),
function whose result s0 components keeps replaced
corresponding components s. example, defined
(s01 ; s02; s03 ) = (s03 ; s02)
back-projection would given by:
, ((sa; sb ); (s01 ; s02; s03 )) = (s01; sb ; sa)
say simple projection binding E E 0 simple reduction
E 0 E (see Figure 5).
Lemma 5 Let binding E E 0 . given
(a) = ; (s0) = ,(a((s0 )); s0 )
is, implementation E -action simply 's back-projection composed
action .
proof follows definitions simple projection back-projection.
say E 0 uniformly reducible E every simple projection E 0 E binding.
7.2.2 Existential Goals
Toast given goal putting instance given material finished state.

call existential goal satisfied exactly environment
states exists object specified type specified state. Let (E; G)
DCP let E 0 uniformly reducible E . define existential goal 9E;E G G
E 0 set states E 0 project binding goal state (E; G):
[
,1(G)
9E;E G =
0

0

binding E E

130

0

fiLifeworld Analysis
,1 (G) = fs0 : (s0 ) 2 Gg set states map goal states . Given
solution schematic goal schematic environment, easily construct
number solutions existential goal:

Lemma 6 policy p solution problem (E; G) initial states ,
binding E 0 E ,
p = p
solution (E 0 ; 9E;E G) initial states ,1 (I ), function mapping
actions E corresponding actions E 0 .
0

Toast algorithm implements policy composition schematic solution
binding maps onto real world. Consider problem cooking egg.
schematic solution might be:

break the-egg the-pan
beat the-egg the-pan using the-whisk
heat the-egg the-pan
boldface verbs break, beat, heat name actions. italicized expressions the-

egg the-pan name objects (state components) affect simplified world.
binding determines objects real world state components
correspond. Given binding, main control structure need remember sequence
break, beat, heat. may preconditions states tools (i.e.
whisk needs clean), handled reduction given policies resetting
tools.
7.2.3 Binding Maps

Given basic policy cooking single egg single pan whisk, construct
policy achieve goal composing basic policy binding. policy
solve goal state bound material non-postgoal state.
policy solve goal solvable state, must able change bindings run
time. call function states bindings binding map.
One simple policy choosing bindings impose priori ordering
objects always use first acceptable object ordering. ordering might
random, might correspond order imposed visual search mechanism.
formal standpoint, ordering matter, can, without loss generality, use
left-to-right order state components environment's state tuple. Let M0
binding map always chooses leftmost pregoal material uses fixed
mapping tools (we care what). mapping allows us construct true
solution, one requires internal state agent:

Proposition 3 policy
pM0 (s) = (AM0(s) p (M0 (s)))(s)
solution state M0 defined.
131

fiAgre & Horswill
Proof: assumption, M0 defined initial state. environment must map
solvable state M0 initial state. Since p is, assumption, solution
problem E , pM0 must solve problem E 0 unless M0 changes value
pM0 solve problem. Suppose does. environment must go state
s00, state component E 0 leftmost pregoal material, state s01,
component leftmost pregoal material. happen (a)
leftmost pregoal material s00 changed goal state s01 (b)
component pregoal s00 becomes pregoal s00 . Case (b) impossible
case (a) implies s01 goal state. Thus pM0 must solution. 2

7.3 Multiple Goals: Metabolism

Thus far, considered happens policy achieves goal. Since agents
rarely set achieve goal die, want consider account extended
activity involving many goals.
One important class extended activities agent transforms whole class
identical objects. call metabolizing class. Metabolism useful
make extra work: cooking 100 eggs useful, least feeding lot people;
dirtying 100 forks, however, probably means wash all.
Whether policy metabolizes object class depends large part binding map
uses. policy pM0 metabolizes materials material worked
ceases leftmost pregoal material soon arrives goal state.
happens, M0 changes bindings agent starts work different object. Policy p
never actually sees material goal state. course, property \leftmost"
artifact formalism. matters property metabolism simply
binding map implement ordering instances material always
choose minimum ordering objects pre-goal states.
ordering might implemented agent visually scanning work surface
uncooked egg, always scanning left-to-right top-to-bottom. return
issues section 8.
binding maps lead kinds behavior, pathological.
binding map always chooses binding, metabolism ceases. binding
map always chooses uncooked eggs doesn't impose ordering them, might start
cooking infinite number eggs without ever actually finishing one them.
Metabolism issue tool use. metabolize materials, pM0 must repeatedly
reset tools. alternate policy metabolize tools too. Let us define M1
binding map uses leftmost pregoal material leftmost reset
tools. clearly,
pM1 (s) = (AM1(s) p (M1 (s)))(s)
solution state M1 defined. policy treats tools disposable.
long infinite supply fresh tools, p see succession states
tools reset states. never need execute resetting action
environment effectively single-state-tool environment. Thus reduction section
7.1.3 unnecessary.
132

fiLifeworld Analysis

7.4 Multiple Goals: Interleaved Execution

Metabolism involves performing transformation uniformly instances
type object: cooking eggs, cleaning/dirtying forks. Often times,
however, agent work toward different kinds goals once. often
done interleaving actions solutions individual goals. say
interleaving function returns one first two arguments,
depending third state argument:

(s; p1 ; p2 ) 2 fp1 ; p2g;
last two arguments policies, result policy, define
notation:
Ip1;p2 (s) = (I (s; p1 ; p2 ))(s)
wanted simultaneously make toast cook egg, good interleaving
toast-making policy egg-cooking policy would one chose egg-making
policy whenever egg finished current cooking step (and ready
ipped removed pan) chose toast-making policy egg busy
cooking. bad interleaving would one always chose toast-making policy.
interleaving fair p1 p2 starting state, Ip1 ;p2
finite number steps executed p1 p2 least once. Finally, say
two bindings independent map disjoint sets components images.
Binding independence special case subgoal independence: two policies can't possibly
interfere alter distinct state components. Fairness binding independence
sucient conditions interleaving solve conjunctive goal:

Lemma 7 Let p1 = A1 p01 1 p2 = A2 p02 2 policies solve goals G1

G2, respectively, halt. 1 2 independent fair interleaving
p1 p2 Ip1;p2 solves G1 \ G2 halts.
Proof: Since fair interleaving, two policies executed finite time,
regardless starting state. induction, n, number steps
guaranteed executed least n steps policy.
policy p1 composition policy p01 state space S1 binding.
p1 solves G1 halts, must p01 solve (G1 ) halt finite
number steps n. execution, environment goes series states

s0; s1; :::; sn
project 1 series states

s00; s01; :::; s0n
claim execution interleaving Ip1 ;p2 must bring environment
sequence states project 1
(s00 )+ ; (s01 )+ ; :::; (s0n )+ ; :::
133

fiAgre & Horswill
is, string states s00 appears least once, s01 , appears least once,
on. state transitions appear s0i s0i+1 .
Suppose otherwise. must point series broken:
(s00 )+ ; (s01 )+ ; :::; (s0i )+ ;
neither s0i s0i+1 . two cases. Case 1: p1 executed transition.
p01 (s0i ) = 6= s0i+1 , contradiction. Case 2: p2 executed transition.
p2 changed one state components mapped 1 2 1
independent, contradiction. Thus interleaving solves G1 . reasoning,
must halt G1 , since p1 halts G1 . reasoning, must solve G2
halt, hence, must solve intersection halt. 2
useful corollary policy applied two independent
bindings, bindings safely interleaved, is, interleaving commutes binding:

Corollary 2 p1 = A1 p 1 p2 = A2 p 2 policies solve goals G1
G2, respectively, halt, fair interleaving p1 p2, AI1;2 p I1;2
solves G1 \ G2 halts.

8. Implementing Policies Bindings

modeled Toast's behavior composition various bindings interleavings
basic policy schematic environment. case Toast, basic policy
simple enough implemented table-lookup. hard part implementing
bindings interleavings given realistic limitations short-term memory perceptual
bandwidth.
One approach would assume relatively complete representation world.
egg would represented logical constant state would represented
set propositions involving constant. binding would implemented
frame structure set variables point logical constants. problem
approach presupposes underlying perceptual motor systems maintain
correspondence logical constants eggs world. one eggs
changes, visual system know looking update assertions
egg model.
assumption taken lightly. capacity human perceptual
system keep track objects world extremely limited. Ballard et al. (1995)found
experimental subjects adopt strategies minimized amount world state
needed track internally, preferring rescan environment information
needed rather memorize advance. environment could even modified
saccadic eye movements without subjects noticing.
alternative treat limitations body, locality space, limited
attentional motor resources resource implementing bindings directly. person
visually focus one object, stand one place, grasp objects
one time. orientation body's parts relative environment used
encode selection objects operated moment. words,
134

fiLifeworld Analysis
implement binding. Actions body, gaze shifts, movements new places
used shift binding.
Another alternative use states relationships objects world keep
track bindings. egg cooked frying pan. fork available
use drawer, sink waiting washed.
section, model use body conventions implement bindings interleavings. simplify presentation concrete, focus
materials, particularly eggs.

8.1 Binding, Deixis, Gaze

first approximation, people visually recognize objects
directly looking. People achieve illusion direct access arbitrary objects rapidly
changing gaze direction. Thus addition normal state environment,
lived world contains additional state component, gaze direction. Since
normally change gaze direction without changing world, vice versa, lived
world E 0 separated parallel product objective environment gaze
direction:
E0 = E k
access world gaze, allows us focus one particular
object time. gaze implements binding, precisely, binding map, since
depends direction gaze. model gaze direction number indicating
object presently foveated, that:
gaze(s1 ; s2; :::; sn ; d) = sd
person could implement single-object binding fixating object wish
bind. First would set component egg, use binding.
Since really binding map, however, rather true binding, agent must
pervasively structure activity ensure gaze need never redirected.

8.2 Binding Convention

general, agents must maintain bindings sort convention, whether
structuring internal memory, case problem solver, structuring
activity. case gaze above, agent maintains binding
convention spatial relation eye object binding.
versions Toast date maintained bindings using conventions (simulated)
spatial arrangement states objects.
One reason Toast cannot rely solely gaze binding technique breaks
binding multiple objects. agent must continually move gaze among objects
interest additional convention must introduced ensure
gaze leaves egg later returns, always returns egg. (This assumes,
course, Toast must return egg. tasks may suce Toast
return functionally equivalent egg. preparing three fried eggs
attention distracted preparing break second one, alright attention
returns third egg, long gets back second egg eventually.)
135

fiAgre & Horswill
State conventions

original version Toast used convention eggs bound cooking task
iff starting (unbroken) state. Eggs therefore bound using
binding map

Toast (s) = state unique egg unbroken state
agent implement first visually searching unbroken egg,
using gaze . corollary 2, interleaving cooking multiple eggs accomplished interleaving bindings eggs. example, might assume
visual system searched non-deterministically round-robin fashion eggs. fair
interleaving suce.
Spatial conventions

Later development Toast, found useful adopt convention
eggs bound cooking task iff located designated workspace. Cooking
eggs counter frying pan, idle eggs refrigerator.
convention lets agent use space external memory binding information. bind
egg, agent faces workspace performs visual search egg. egg
finds egg cooked, since idle eggs view.
still leaves open issue fairness. extreme elegant solution fairness
problem use multiple workspaces employ convention workspace
defines unique binding. cook two eggs, agent works cooking whatever egg
front it, spins place alternates workspaces.
Formally, environment consists two copies workspace objects
therein plus extra state component determines workspace agent faces.
agent's perceptual system implements binding map one
two workspaces bound depending agent's orientation. Given policy
cooking one egg one workspace, construct policy cooking two eggs two
interleaving policy \ ipping" operation switches workspaces:

Proposition 4 Let E = (S; A) environment, p policy solves goal G

E halts, let environment two states, 0 1, two actions,
(the identity) flip moves environment opposite state present
state. Consider product environment:

E0 = E *
)E *
)D
binding map E 0 E :

MD (s0 ; s1; d) = sd
fair interleaving policies:

pMD = AMD p MD
136

fiLifeworld Analysis

real world
idealization

functionally equivalent objects
least reset
binding map

binding maps
interleavings

general tools
resetting policies

self-cleaning tools
isomorphism

single object
isomorphism

canonical chain

Figure 6: Various alternative reductions used Toast.


pflip(s0; s1 ; d) = flip

solution problem (E 0 ; (G G f0; 1g)).
Proof: Consider bindings 0 : (s0 ; s1 ; d) ! s0 1 : (s0 ; s1 ; d) ! s1 , let p0 =
A0 p 0 p1 = A1 p 1. Since binding map MD alternates
bindings 0 1 , fair interleaving pMD pflip equivalent interleaving
p0 , p1 pflip . would show interleaving fair, is,
p0 p1 get run finite time. see fact
execution pflip switches MD one binding another. objection
leaves open possibility pflip always get run twice row, thus returning
environment original state preventing MD switching bindings.
cannot occur, however, since would introduce loop, causing interleaving run pflip
forever, never running pMD , violating assumption fairness interleaving
pMD pflip. Thus interleaving p0 , p1 pflip must fair. note
p0 solves goal G f0; 1g halts, p1 solves goal G f0; 1g halts,
pflip solves goal G G f0; 1g halts. Thus lemma 7, interleaving solves
intersection goals, G G f0; 1g. 2
137

fiAgre & Horswill

9. Reductions Structure Toast
shown cooking problem solved series reductions
conventions. Binding allows reduction problem schematic world
action greatly restricted action selection greatly simplified. world
reduced, given algorithms resetting tools, world tools always
reset. world, turn, equivalent world one object,
material cooked, one action taken given time. actions
found table lookup.
Multiple materials cooked interleaving execution processes cooking
individual materials. Interleaving processes equivalent, however, interleaving
bindings, schematic-world algorithm need even aware pursuing
multiple goals. tool bindings continuously changed tools dirtied tools
effectively disposable, tools effectively single state, separate reduction
general tools single-state tools unnecessary. Material bindings maintained
number conventions involving states and/or positions objects.
short, describe Toast algorithm path network possible
simplifications problem (see Figure 6) every path actual world
idealized single-object world defines possible (and correct) version Toast
algorithm.

10. Cognitive Autopoiesis
formalizing ideas binding gaze, moving toward theory
intentionality depends agent's embedding world, rather solely upon
internal models world. agent keep track particular objects terms
functional significance { roles play ongoing activity.
keep track tools materials associated different tasks keeping
different locations, example different regions countertop. far, however,
ideas subject limited simple cases, example agent switching
visual focus back forth two objects. model complex patterns
found everyday life, need much better theory world
embedded. theory partially matter biology physics, course,
matter cultural practices organizing activities space. section,
would sketch general theory matters using concept \cognitive
autopoiesis."
Maturana Varela (1988), autopoiesis refers processes organisms
act environments order provide conditions continued functioning. Cognitive autopoiesis refers active means agents structure
environments order provide conditions cognitive activities.
include basically means agents provide factorability environments: engaging customary activities, using customary tools materials them,
partitioning activities customary ways, on. includes range
subtle phenomena. Kirsh (1995), example, drawn useful distinction
actions aim achieving functional goals (beating eggs, sweeping oors)
138

fiLifeworld Analysis
actions aim facilitating cognition (setting right number eggs beginning, opening curtains dust visible). Actions can, course,
serve purposes, example one chooses boil water kettle rather
saucepan: strategy achieves result, latter provide sign
possible take next action, example preparing tea. Stabilization actions (Hammond et al., 1995) provide cognitive conditions actions. One might,
example, develop habit leaving items door moment one realizes
need taken work.
phenomena help understanding inadequate concept \the
environment." one conceptualizes \the environment" monolithic whole, perhaps
way looks viewed airplane, else way looks understood
peephole momentary vector sense-perceptions, begins seem arbitrary, chaotic,
hostile. certain sense seems static, anatomy physiology.
fact phenomena cognitive autopoiesis reveal lifeworld great
deal living structure, structure actively maintained agents
providing crucial preconditions cognition. Indeed hard draw clear line
around agent's cognition; trace sequence causal events led given agent
pour pitcher milk particular moment, sequence lead back forth
agent customary surroundings. almost surroundings
extension one's mind.
Cognitive autopoiesis complex multifaceted phenomenon single theory
suce explain it. One useful way think cognitive autopoiesis spatially,
terms series buffer zones embodied agent putative dangers
complexities \the environment." people whose lives similar own,
buffer zones conveniently sorted six headings:

body itself: posture, markings, things might attached hung

it, prostheses, artificial markings, things one holding one's hands,
on. things serve forms memory, example way
remember activity one middle momentary distraction.
body's motility makes possible wide range voluntary reconfigurations
one's physical relationship things, example get better view better
leverage.

Clothing, including pockets, purses, money belts, hats, on. Everyone carries
around various objects ways draw customary practices artifacts (cash
wallets, keys pockets, watch wrist, etc) configuring things
evolving personal way (keys left pocket money right, tissues hip pocket
one's coat, spare change outer ap backpack, on).

Temporary workspaces one occupies perform particular activity bound-

ed period. repairing bicycle, example, one might spread tools bicycle
parts oor patterns cognitive significance relationship
one's body cognitive states (Chapman & Agre, 1986). One
claiming space permanent colony (it might located patio
139

fiAgre & Horswill
public park, example), one lay claim space long enough perform
customarily bounded task.

One's private spaces: home, desk, oce, car, trunks stuff kept someone else's

attic, forth. spaces serve numerous functions, course, among
cognitive functions providing stable locations long periods time
tools materials, storage places stuff needs kept adequate supply,
practices regulating people's access stuff, on. stable
conditions actively maintained provide background wide variety
transient activities.

Spaces shared people within stable, time-extended relationships.
spaces include living rooms, kitchens, shared oce spaces, forth.
line private shared spaces clearly depends particular culture
set relationships, distinction might clear. point
cognitive functions spaces maintained shared practices
letting someone know borrow stuff.

Public spaces whole range customary artifacts practices regu-

late activities them. Public spaces offer fewer guarantees private shared
spaces, include wide variety supports cognition, including signs
architectural conventions. possible use one's body clothing
carry artifacts provide cognitive support dealing public spaces.

buffer zones always offer perfect protection harm complete support
pursuit goals. Shared public spaces sites con ict, example,
con icts include involuntary disruption destruction one's body
buffer zones customarily one's private control. serious theory
activity must include account phenomena well, usually
orderly way anything else.
event, nested buffer zones ordinary life participate large metabolism
continually interweaves cognitive functional purposes. Among purposes
learning. adaptation body parts tools customary activities helps channel action customary directions, existing background objects, spaces,
practices help channel actions children newcomers customary directions
larger scale. Caretakers regularly construct customized types buffer zones around
young, example, dicult impossible get anything
could cause harm. lifeworld child, example, differs adult
reach cookie jar locked cupboard roach spray
kept. growing literature investigated processes cognitive apprenticeship (Rogoff, 1990), situated learning (Lave & Wenger, 1991), distributed cognition (Hutchins, 1995;
Salomon, 1993), shared construction activities (Grin & Cole, 1989) go
systematically restrictive supportive lifeworlds.
140

fiLifeworld Analysis

11. Conclusion

paper explored ways structure lifeworld
supports agents' cognition, suggested analysis might expanded
cover wider range phenomena. Much work obviously remains done. Perhaps
significant part work concerns fundamental assumption lifeworld analysis:
people use objects customary ways. plausible enough first approximation,
always true. Faced diculty goes beyond capacities
usual practices artifacts readily available, people frequently improvise.
handle spoon might used pry open lid, pen might used fish acorns
exhaust duct, book might used provide backing sheet paper one
writing on, protruding section car's bumper might bent straight deliberately
driving car concrete wall. cases underlying physical affordances
object \show through" beyond ready-to-hand appropriation routine patterns
interaction. underlying affordances show situations breakdown, example tool breaks proves inadequate job. cases, people
confer improvised meanings upon artifacts. phenomena particularly important
conversation, utterance interpreted context created previous
utterances, simultaneously helping create context interpretation successive utterances well (Edwards & Mercer, 1987; Atkinson & Heritage, 1984). point
lifeworld exist, rather something actively created
well something adapted socialization. One challenge future research
learn computational methods might help modeling phenomena|and
phenomena might help us rethink basic ideas computation.

Acknowledgements

appreciate detailed comments referees. work funded part
National Science Foundation grant number IRI{9625041. Institute
Learning Sciences established 1989 support Anderson Consulting, part
Arthur Anderson Worldwide Organization.

Glossary Terms

Binding. simple projection (mapping state-space components two environ-

ments) acts reduction one environment another (see section 7.2.1).
Binding map. mapping environment states bindings (see section 7.2.3).
Cartesian product. sets: B set pairs (a; b) 2 A, b 2 B .
environments: environment Cartesian product two environments iff
state space Cartesian product state spaces. Since set actions
left open definition, many possible ways forming products, e.g. serial
product, parallel product, uniform extension, etc.(see section 5.1).
Discrete control problem (DCP). environment set goal states within
(see section 5).
Environment. state machine, i.e. , set possible states set possible actions
mapping states states. sets states actions need finite (see section 5).
141

fiAgre & Horswill

Focus. action focused state component alters component (see

section 7.1.3).
Material. object (environment) whose state space chain (see section 7.1).
Policy. mapping states actions; formalization agent's control structure
(see section 5).
Projection. mapping state space one environment state space
another (see section 5.2).
Simple projection. mapping state spaces maps state space components
one environment state space components another (see section 5.2).
State component. (For environments whose state spaces Cartesian products)
element environment's state-tuple (see section 5.1).
Solution. policy solves DCP initial state if, run state,
eventually reaches goal state (see section 5).
Tool. (Roughly) state component brought ready state without altering
state components (see section 7.1.3).
Uniform reducibility. (Roughly) E 0 uniformly reducible E consists multiple
copies E 's objects (see section 7.2.1).

Glossary Notation

. Function composition operator: f g(x) = f (g(x)).

. projection (p. 122).
,1. inverse , i.e. set states map given state (p. 131).
,. (For simple projection : 0 ! ). generalized inverse. Since maps certain
components 0 , , (s; s0 ) s0 components replaced corresponding
components (p. 130).
. simple reduction environment E 0 E , function mapping action
E action implements E 0 (p. 122).
Cn. chain-environment n states (p. 127).
E . environment.
9E;E G. G goal E E 0 uniformly reducible E . existential goal G E 0 :
set E 0 -states map goal state binding (p. 130).
E1 *
) E2. serial product. Cartesian product E1 E2 actions
0

two environments must taken separately (p. 120).
E1 k E2 . parallel product. Cartesian product E1 E2 actions
two environments must taken simultaneously (p. 120).
LE;E . (E 0 environment uniformly reducible E ) leftmost-ready binding map
E 0 E (p. 131).
p. policy.
pE;G. standard policy single-material environment E goal G (p. 127).
. singleton environment (the environment exactly one state). Used represent
self-resetting tool (p. 128).
0

142

fiLifeworld Analysis

References

Agre, P., & Horswill, I. (1992). Cultural support improvisation. Tenth National Conference Artificial Intelligence Cambridge, MA. American Association Artificial
Intelligence, MIT Press.
Agre, P. E. (1995). Computational research interaction agency. Artificial Intelligence,
72 (1{2), 1{52.
Agre, P. E. (1997). Computation Human Experience. Cambridge University Press,
Cambridge, UK.
Agre, P. E., & Chapman, D. (1987). Pengi: implementation theory activity.
Proceedings Sixth National Conference Artificial Intelligence, pp. 268{272.
Atkinson, J. M., & Heritage, J. (1984). Structures Social Action. Cambridge University
Press, Cambridge, UK.
Ballard, D. H., Hayhoe, M. M., Pook, P. K., & Rao, R. P. N. (1995). Deictic codes
embodiment cognition. Technical report 95.1, University Rochester National
Resource Laboratory study Brain Behavior, Rochester, NY. Revised
July 1996.
Beach, K. D. (1988). role external mnemonic symbols acquiring occupation.
Gruneberg, M. M., Morris, P. E., & Sykes, R. N. (Eds.), Practical Aspects Memory:
Current Research Issues, volume 1: Memory Everyday Life. Wiley, Chichester,
UK.
Beer, R. D. (1995). dynamical systems perspective agent-environment interaction.
Artificial Intelligence, 72 (1{2), 173{215.
Brady, J. M., Agre, P. E., Braunegg, D. J., & Connell, J. H. (1984). mechanic's mate.
Proceedings 1984 European Conference Artificial Intelligence Pisa, Italy.
Chapman, D., & Agre, P. E. (1986). Abstract reasoning emergent concrete activity.
Georgeff, M. P., & Lansky, A. L. (Eds.), Reasoning Actions Plans, Proceedings 1986 Workshop, Timberline, Oregon. Morgan-Kaufmann Publishers,
Los Altos, CA.
Dixon, M. (1991). Embedded computation semantics programs. TR SSL-91-1,
Xerox Palo Alto Research Center, Palo Alto, CA.
Donald, B. R., & Jennings, J. (1992). Constructive recognizability task-directed robot
programming. Robotics Autonomous Systems, 9, 41{74.
Edwards, D., & Mercer, N. (1987). Common Knowledge: Development Understanding Classroom. Methuen, London.
Gibson, J. J. (1986). Ecological Approach Visual Perception. Erlbaum, Hilldale, NJ.
Originally published 1979.
143

fiAgre & Horswill
Grin, D. N. P., & Cole, M. (1989). Construction Zone: Working Cognitive Change
School. Cambridge University Press, Cambridge.
Hammond, K. J., Converse, T. M., & Grass, J. W. (1995). stabilization environments.
Artificial Intelligence, 72 (1{2), 305{327.
Horswill, I. (1995). Analysis adaptation environment. Artificial Intelligence, 73 (1{2),
1{30.
Hutchins, E. (1995). Cognition Wild. MIT Press, Cambridge, MA.
Kirsh, D. (1995). intelligent use space. Artificial Intelligence, 72 (1{2), 31{68.
Knoblock, C. A. (1989). theory abstraction hierarchical planning. Benjamin,
D. P. (Ed.), Change Representation Inductive Bias. Kluwer, Boston.
Kosecka, J. (1992). Control discrete event systems. GRASP LAB report 313, University
Pennsylvania Computer Information Science Department, Philadelphia, PA.
Lansky, A. L., & Fogelsong, D. S. (1987). Localized representations planning methods
parallel domains. Proceedings Sixth National Conference Artificial
Intelligence, pp. 240{245 Menlo Park, CA. AAAI Press.
Lave, J., & Wenger, E. (1991). Situated Learning: Legitimate Peripheral Participation.
Cambridge University Press, Cambridge, UK.
Littman, M. L. (1993). optimization-based categorization reinforcement learning
environments. Meyer, & Wilson (Meyer & Wilson, 1993), pp. 262{270.
Lyons, D. M., & Arbib, M. A. (1989). formal model computation sensory-based
robotics. IEEE Transactions Robotics Automation, 5 (3), 280{293.
Maturana, H. R., & Varela, F. J. (1988). Tree Knowledge: Biological Roots
Human Understanding. Shambhala, Boston.
Meyer, J.-A., & Wilson, S. W. (Eds.). (1993). Animals Animats: Second
International Conference Simulation Adaptive Behavior. MIT Press, Cambridge,
MA.
Newell, A., Shaw, J. C., & Simon, H. A. (1960). Report general problem-solving
program. Proceedings International Conference Information Processing,
pp. 256{264 Paris.
Newell, A., & Simon, H. A. (1963). GPS: program simulates human thought.
Feigenbaum, E. A., & Feldman, J. (Eds.), Computers Thought, pp. 279{296.
McGraw-Hill.
Rogoff, B. (1990). Apprenticeship Thinking: Cognitive Development Social Context.
Oxford University Press, New York.
144

fiLifeworld Analysis
Rosenschein, S. J. (1987). Formal theories knowledge AI robotics. report CSLI87-84, Center Study Language Information, Stanford, CA.
Rosenschein, S. J. (1989). Synthesizing information-tracking automata environment
descriptions. Brachman, R. J., Levesque, H. J., & Reiter, R. (Eds.), Proceedings
First International Conference Principles Knowledge Representation
Reasoning, pp. 386{393.
Rosenschein, S. J., & Kaelbling, L. P. (1986). synthesis machines provable
epistemic properties. Halpern, J. (Ed.), Proc. Conf. Theoretical Aspects
Reasoning Knowledge, pp. 83{98. Morgan Kaufmann.
Sacerdoti, E. D. (1974). Planning hierarchy abstraction spaces. Artificial Intelligence,
5 (2).
Salomon, G. (Ed.). (1993). Distributed Cognitions: Psychological Educational Considerations. Cambridge University Press.
Schutz, A., & Luckmann, T. (1973). Structures Life-World. Northwestern
University Press, Evanston, IL.
Simon, H. A. (1947). Administrative Behavior: Study Decision-Making Processes
Administrative Organization. Macmillan, New York.
Simon, H. A. (1970). Sciences Artificial. MIT Press, Cambridge, MA.
Sussman, G. J. (1975). Computer Model Skill Acquisition. Elsevier, New York.
Todd, P. M., Wilson, S. W., Somayaji, A. B., & Yanco, H. A. (1994). blind breeding
blind: Adaptive behavior without looking. Cliff, D., Husbands, P., Meyer,
J.-A., & Wilson, S. W. (Eds.), Animals Animats: Third International
Conference Simulation Adaptive Behavior, pp. 228{237. MIT Press.
Todd, P. M., & Wilson, S. W. (1993). Environment structure adaptive behavior
ground up. Meyer, & Wilson (Meyer & Wilson, 1993), pp. 11{20.
Wilson, S. W. (1991). animat path AI. Meyer, J.-A., & Wilson, S. W. (Eds.),
Animals Animats: Proceedings First International Conference Simulation
Adaptive Behavior, pp. 15{21. MIT Press, Cambridge, MA.
Winston, P. H., Binford, T. O., Katz, B., & Lowry, M. (1983). Learning physical descriptions
functional definitions, examples, precedents. Proceedings National
Conference Artificial Intelligence, pp. 433{439 Austin, TX.

145


