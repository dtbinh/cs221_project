Journal Artificial Intelligence Research 19 (2003) 513-567

Submitted 1/03; published 11/03

Decentralized Supply Chain Formation: Market Protocol
Competitive Equilibrium Analysis
William E. Walsh

WWALSH 1@ US . IBM . COM

IBM T. J. Watson Research Center
19 Skyline Drive
Hawthorne, NY 10532 USA

Michael P. Wellman

WELLMAN @ UMICH . EDU

University Michigan AI Laboratory
1101 Beal Avenue
Ann Arbor, MI 48109-2110 USA

Abstract
Supply chain formation process determining structure terms exchange relationships enable multilevel, multiagent production activity. present simple model
supply chains, highlighting two characteristic features: hierarchical subtask decomposition,
resource contention. decentralize formation process, introduce market price system
resources produced along chain. competitive equilibrium system, agents
choose locally optimal allocations respect prices, outcomes optimal overall. determine prices, define market protocol based distributed, progressive auctions, myopic,
non-strategic agent bidding policies. presence resource contention, protocol produces
better solutions greedy protocols common artificial intelligence multiagent systems literature. protocol often converges high-value supply chains, competitive
equilibria exist, typically approximate competitive equilibria. However, complementarities
agent production technologies cause protocol wastefully allocate inputs agents
produce outputs. subsequent decommitment phase recovers significant fraction
lost surplus.

1. Introduction
Electronic commerce technology provide significant improvements existing modes commercial interaction, increased speed, convenience, quality, reduced costs. Yet
proposed radical visions business may transformed. Exponential increases
communications bandwidth computational ability potential qualitatively decrease
friction business interactions. premise, Malone Laubauchers treatise
emerging E-Lance Economy (1998) puts forth view that, not-too-distant future, business
relationships lose much current persistent character. Indeed, Malone Laubaucher
propose large companies know cease exist, rather dynamically formed
electronically connected freelancers (e-lancers) purpose producing particular goods
services, dissolved projects completed. Others employ evocative term
virtual corporation (Davidow, 1992) describe groups agile organizations forming temporary
confederations ad hoc purposes.
c
2003
AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiWALSH & W ELLMAN

Whether one accepts full extent vision virtual corporations, several business
trends provide evidence moving direction. Software companies time-shifting
development U.S. India, Sun Microsystems allows freelance programmers bid fix customers software problems (Borenstein & Saloner, 2001). Large, traditional
manufacturing companies, exemplified major automotive manufacturers, increasingly outsource
production various components. Ford General Motors (GM) spun parts manufacturing separate companies (Lucking-Reily & Spulber, 2001). Start-ups small
companies form partnerships compete larger, established companies. Application
service providers supplant in-house provision standard operations, information, technology
services.
study phenomenon guise supply chains, common form coordinated commercial interaction. purposes, supply chain network production exchange
relationships spans multiple levels production task decomposition. Whenever
producer buys inputs sells outputs, supply chain. Although typically used refer
multi-business structures manufacturing industries, service contracting relationship
spans multiple levels viewed supply chain.
Supply chain formation process determining participants supply chain,
exchange whom, terms exchanges. Traditionally, supply chains
formed maintained long periods time means extensive human interactions.
acceleration commercial decision making creating need advanced support.
Companies ranging auto makers computer manufacturers basing business models
rapid development, build-to-order, customized products satisfy ever-changing consumer
demand. fluctuations resource costs availability mean companies must respond
rapidly maintain production capabilities profits. changes increasingly occur
speeds, scales, complexity unmanageable humans, need automated supply chain
formation becomes acute.
agents autonomous electronic commerce setting, must generally assume specialized knowledge capabilities limited knowledge
individuals large-scale structure problem. agents self-interested,
participate goal maximizing benefit. Additionally, may
cause control allocation resource individually if, instance, global optimization
infeasible one entity global allocative authority. environments information, decision making, control inherently decentralized, seek engineer process
bottom-up supply chain formation. problem complicated structure resource
contention precludes use simple greedy allocation strategies.
present decentralized, asynchronous market protocol supply chain formation
conditions resource scarcity. protocol allows agents negotiate formation supply
chains bottom-up fashion, requiring local knowledge communication. market
protocol, agents decisions coordinated price system, price resource
determined ascending auction.
remainder paper describes market protocol, characterizes behavior theoretically empirically.1 begin Section 2 formal definition supply chain
formation problem, illustrating application automotive industry. Section 3,
1. details may found first authors dissertation (Walsh, 2001).

514

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

show typical greedy top-down approaches supply chain formation fail presence
resource contention. define price system analyze static properties price equilibria
Section 4. Section 5, introduce price-based market protocol supply chain formation
analyze convergence properties. present results empirical study protocol
Section 6. Section 7, discuss relevant results issues price-based analysis auction
theory, well related work supply chain formation. conclude Section 8
suggest extensions future work. Throughout, defer proofs Appendix A.

2. Supply Chain Formation Problem
Agents supply chain characterized terms capabilities perform tasks,
interests tasks accomplished. central feature model problem hierarchical
task decomposition: order perform particular task, agent may need achieve
subtasks, may delegated agents. may turn subtasks may
delegated, forming supply chain decomposition task achievement. Constraints
task assignment arise resource contention, agents require common resource (e.g.,
task achievement, something tangible piece equipment) accomplish tasks.
Tasks performed behalf particular agents; two agents need task would
performed twice satisfy both. way, tasks discrete, rival
resource. Hence, make distinction model, use term good refer task
resource provided needed agents. assumption goods cannot shared reused
(i.e., limited available quantities) necessary much analysis. Goods
replicated little marginal cost, software information, provide many interesting
challenges economic analysis (Shapiro & Varian, 1999), addressed work.
2.1 Example: Automotive Supply Chain Formation
illustrate model supply chain formation application stylized, hypothetical
example automotive industry. Traditionally, automotive supply chains span many tiers,
formed maintained long periods time extensive human negotiations.
automation emerging, example Covisint2 , company formed GM, Ford,
DaimlerChrysler mediate negotiation exchange parts, well supply chain
interactions. Currently focus efforts particular exchange relationship within
single level production. consider broader problem assembling combinations relationships across multiple levels form complete, feasible supply chains.
example presented Figure 1, Ford GM need acquire contracts transmissions
order produce particular models cars. Ford produce transmissions factories acquire independent transmission producer. GM currently
capacity produce desired transmissions, must outsource. independent transmission
producer capacity provide transmissions either Ford GM, both. Ford
independent factory require services job shop metal-working tasks, job shop
capacity serve simultaneously. Contracts job shop two
transmission factories scarce goods allocated.
2. http://www.covisint.com

515

fiWALSH & W ELLMAN

Ford Auto
Assembly

Ford
Distribution

Job Shop

Independent
Transmission
Factory

Ford
Transmission
Factory

GM Auto
Assembly

GM
Distribution

Figure 1: automotive supply chain formation problem.
limited capacity job shop entails certain constraints feasible supply chains. Ford
cannot acquire transmissions independent factory, job shop cannot serve
independent factory Ford simultaneously. Additionally, Ford GM cannot simultaneously
satisfied.
2.2 Problem Specification
provide formal description supply chain formation problem terms bipartite graphs.
two types nodes represent goods agents, respectively. task dependency network
directed, acyclic graph, (V, E), vertices V = G A, where:
G = set goods,
= C , set agents,
C = set consumers,
= set producers,
set edges E connecting agents goods use produce. exists edge
hg, ai g G agent make use one unit g, edge ha, gi
provide one unit g. agent requires multiple units good input, treat
unit separate edge, distinguishing subscripts. (Edges without explicit subscripts
interpreted implicitly subscripted 1.) instance, agent requires two units g
input, input edges hg, ai1 hg, ai2 .
various agent types characterized position task dependency network.
consumer, c C, wishes acquire one unit one good set consumable goods,
Gc G, hg, ci E iff g Gc .
producer produce single unit output good conditional acquiring input
goods. producer associate:
1. input set, G, g iff edges hg, ik E one k,
516

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Worked
Metal

Ford Transmission
Subcontractor

Ford
Cars

Ford
Distribution
$25,000

Ford
Transmissions

$20
Job Shop
$20

Ford Auto
Assembler
$20,000

Ford
Transmission
Factory
$100

Independent
Transmission
Factory
$50
GM Transmission
Subcontractor
$60

GM
Trasmissions

GM Auto
Assembler
$25,000

GM
Cars

GM
Distribution
$30,000

Figure 2: Network auto: task dependency network automotive supply chain depicted
Figure 1.

2. single output, g G \ , h, g E.
producers input goods complementary agent must acquire order
produce output; cannot accomplish anything partial set. Alternate producers
output indicate different ways good produced.
Task dependency networks constrained acyclic, is, agent produces goods
could used assemble inputs chain production. Although might broadly
view global commerce one large cycle production consumption, practice, negotiations tend clustered within limited scopes concern, often referred industries.
resulting supply chains typically acyclic.
Figure 2 shows example task dependency network automotive supply chain problem
Figure 1. goods indicated circles, agents boxes. Producers inputs
represented curved boxes. numbers agent boxes represent production costs
consumption values, explained below. arrow agent good indicates agent
provide good, arrow good agent indicates agent make use
good. instance, producer labeled Ford Auto Assembly requires Worked Metal Ford
Transmissions order produce cars. Since transmissions produced Ford Transmission
Factory used Ford, need distinguish Ford GM transmissions separate
goods. turn requires introduce Ford GM Transmission Subcontractor producers
model fact Independent Transmission Factory used produce either type.
allocation subgraph (V 0 , E 0 ) (V, E). g G, edge ha, gi E 0 means
agent provides g, hg, ai E 0 means acquires g. allocations vertices agents
goods incident edges:
1. agent allocation graph iff acquires provides good:
A, V 0 iff hg, ai E 0 ha, gi E 0 .
517

fiWALSH & W ELLMAN

Worked
Metal

Ford Transmission
Subcontractor

Ford
Cars

Ford
Distribution
$25,000

Ford
Transmissions

$20
Job Shop
$20

Ford Auto
Assembler
$20,000

Ford
Transmission
Factory
$100

Independent
Transmission
Factory
$50
GM Transmission
Subcontractor
$60

GM
Trasmissions

GM Auto
Assembler
$25,000

GM
Cars

GM
Distribution
$30,000

Figure 3: solution Network auto.
2. good allocation graph iff acquired provided:
g G, g V 0 iff hg, ai E 0 ha, gi E 0 .
producer active iff provides output. producer feasible iff inactive
acquires inputs. Consumers always feasible.
Good g material balance (V 0 , E 0 ) iff number edges equals number out:



fi{(a, k) | ha, gik E 0 }fi = fi{(a, k) | hg, aik E 0 }fi .

allocation feasible iff agents feasible goods material balance.
solution feasible allocation forms partial ordering feasible production, culminating
consumption. is, consumer acquires good desires:
exists hg, ci E 0 c C V 0 .

solution may involve multiple consumers. consumer c solution (V 0 , E 0 ) say
(V 0 , E 0 ) solution c.
Figure 3 shows solution allocation task dependency network Figure 2. Shaded
agents solid arrows part solution, unshaded agents dashed arrows indicating
elements problem part solution. Note Ford Auto Assembler wins input,
inactive. However, recall inactive producers feasible, hence solution properties
met. refer configuration inactive producer acquiring input allocation
dead end.
producer production cost providing unit output. cost might
represent value could obtain engaging activity (i.e., opportunity cost),
direct cost incurred producing output (but including input costs). Since producer
provides one unit one good, total production cost , output g, allocation
E 0 , h, gi E 0 0 otherwise.
assume consumer preferences different possible goods, wishes obtain
single unit one good. Thus, consumer c obtains value vc (g) obtaining single unit
518

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

good g, and, allocation E 0 , obtains value vc ((V 0 , E 0 )) maxhg,ciE 0 vc (g). depicting task
dependency networks, display costs values corresponding agent boxes.
Definition 1 (value allocation) value allocation (V 0 , E 0 ) is:
value((V 0 , E 0 ))

vc ((V 0, E 0)) ((V 0, E 0)).


cC

Definition 2 (efficient allocations) set efficient allocations contains feasible allocations
(V , E ) that:
value((V , E )) =

max

(value((V 0 , E 0 )) | (V 0 , E 0 ) feasible).

(V 0 ,E 0 )(V,E)

Task dependency networks describe supply chain formation problem global perspective. decentralized approach formation, would generally assume agent,
entity, perfect complete knowledge entire network. generally assume
agents perfect knowledge costs, values, goods interest. mediators
facilitate negotiations goods (as protocols described below), agent knows relevant
mediators goods interest. knowledge includes rules enforced mediators.
Likewise, mediators know existence agents interested respective goods. Beyond
that, mediator knows agents reveal communication negotiation.
mediator know agents true costs valuations, aware agents preferences
goods outside direct scope facilitation. address detail agents
mediators achieve mutual awareness (i.e., connections originate), assume
accomplished via unspecified search, notification, broadcast protocol.

3. Resource Contention
One natural candidate approach supply chain formation CONTRACT NET protocol (Davis
& Smith, 1983), widely studied algorithm forming task performance relations among
distributed agents. C ONTRACT NET indeed apply framework, employs local negotiation achieve hierarchical task decomposition. Although definitive characterization difficult
due many variants CONTRACT NET literature (Baker, 1996; Davis & Smith, 1983;
Dellarocas et al., 2000; Sandholm, 1993), fair say that, generally, request quotes proceed top root task (right-to-left consumers, network terminology),
contracting proceeds bottom-up (left-to-right towards consumers), selecting level among
candidate bids received. (Variants protocol primarily distinguished form bids
selection criteria employed.) consequence, choices made greedily, without reflecting
ramifications upstream evolving chain.
approach form satisficing supply chains sufficient resources support greedy selection. However, basic CONTRACT NET protocol explicitly address
resource scarcity contention among multiple agents. Producers accept bids inputs
established whether might cause infeasibility upstream. Without lookahead
backtracking, CONTRACT NET might construct infeasible supply chains limited resources.
instance, greedy protocol would produce solution network shown Figure 4.
Here, producers bid according common function monotone cost, output bid
519

fiWALSH & W ELLMAN

a1
5

1

a2

2

a5
0
5

1
a3

3

1
a4

a7
0

6

cons
15

a6
0

4

1

Figure 4: Network greedy-bad: network greedy protocols produce infeasible
allocations.

producer a6 would preferred a5, a6 acquire inputs cheaper. since
a7 must acquire one available unit good 4 feasibly participate solution, a6 cannot
part solution.
issue resource contention motivates adoption market-based approach. key
idea prices signal resource value scarcity chain, enabling local
decision making avoiding pitfalls greedy one-pass selection communication global
structure information.

4. Price Systems
price system p assigns good g, nonnegative number p(g) price. Prices anonymous (i.e., agent dependent) linear quantity goods. Intuitively, prices indicate
relative value goods, agents use prices guide local decision making.
assume agents quasilinear utility functions, defined money holdings plus
value (or minus cost) associated allocation goods. Agents wish maximize surplus
respect prevailing prices.
Definition 3 (surplus) surplus, (a, (V 0 , E 0 ), p), agent allocation (V 0 , E 0 ) prices
p, given by:
va ((V 0 , E 0 )) hg,aiE 0 p(g), C
ha,giE 0 p(g) hg,aiE 0 p(g) ((V 0 , E 0 )), .
4.1 Price Equilibrium
Generally, allocation (V 0 , E 0 ) competitive equilibrium prices p (V 0 , E 0 ) feasible
assigns agent allocation optimizes agents surplus p. model, means
specifically:
520

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

producers optimal choice either active feasible, acquire goods. Hence,
producer allocation obtains nonnegative surplus active, producer
allocation would obtain nonpositive surplus active.
V 0 ,



p(g)

\V 0 ,



p(g)



p(g) 0



p(g) 0

hg,iE

h,giE

h,giE

hg,iE

consumer receives value obtaining one good, consumers optimal
choice obtain good gives maximum nonnegative surplus, obtain
goods positive price. Furthermore, consumer allocation (i.e., obtaining
goods) would obtain nonpositive surplus good.
c C V 0 , hg, ci E 0 , g = arg max
vc (g0 ) p(g0 )
0
g G

vc (g) p(g) 0
hg0 , Ei, g0 6= g, p(g0 ) = 0
c C \V 0 , g G,
vc (g) p(g) 0
Figure 5 shows example competitive equilibrium Network greedy-bad. prices
shown respective goods.
a1
5

1

a2

2

1

1

a3

3

1

0

a4

4

1

6

5

a5
0
5
7

a7
0

6

cons

14

15

a6
0

Figure 5: competitive equilibrium Network greedy-bad.

competitive equilibrium allocation stable sense agent would want different
allocation equilibrium prices. Moreover, equilibrium way reallocate resources (including money transfers) agent greater surplus, without degrading
agents surplus. absence gains trade referred Pareto optimality.
Given quasilinear utility, price equilibria shown efficient fairly general conditions (Bikhchandani & Mamer, 1997; Gul & Stacchetti, 1999; Ygge, 1998). holds
particular case task dependency networks, stated Corollary 4.
521

fiWALSH & W ELLMAN

p(1) >
_5
a1
5
a2
1
a3
1
a4
1

1
p(2) >
_1
2
p(3) <
_1
3
p(4) >
_4

a5
0

9_
> p(6) >
_ 10

p(5) >
_6
5

a7
0

6

cons
9

a6
0

4

Figure 6: Network greedy-bad costs values support competitive equilibrium.

4.2 Existence Competitive Equilibrium
task dependency networks competitive equilibria. Consider Network greedybad vcons = 9, shown Figure 6. allocation shown efficient allocation,
hence equilibrium must support it. Recall equilibrium, active agents must obtain nonnegative surplus, inactive producers must able obtain positive surplus. price inequalities goods follow constraints surplus associated agent activity. lower
bounds prices goods 1, 2, 5 ensure producers a1, a2, a5, respectively receiv5e
nonnegative surplus. upper bound 3 ensures a3 could obtain positive surplus.
lower bound 4 ensures a6 would receive nonpositive surplus. Propagating bounds
6, see p(6) 10 give a7 positive surplus, p(6) 9 give cons nonnegative
surplus. Since impossible, competitive equilibrium cannot exist.
Technically, non-existence equilibrium due complementarity inputs producers
discrete-quantity goods. fact, complementarities necessary preclude competitive equilibrium task dependency networks. network input complementarities producers
one input.
Theorem 1 Competitive equilibria exist network input complementarities.
defer proof subsequent theorems Appendix A.
Consider Figure 6. multiple undirected paths 1 4 give rise lower
bound price good 6. turns undirected cycles necessary preclude
competitive equilibrium.
polytree graph one undirected path vertex another.
Recall task dependency networks, producer uses multiple units good, unit
represented separate edge. follows allocation polytree iff one unit
good used produce another given good, used multiple ways produce good.
Theorem 2 Competitive equilibria exist polytree.
522

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

4.3 Approximate Price Equilibrium
generally expect market protocols based discrete price adjustments (such
SAMP-SB protocol describe Section 5) would overshoot exact equilibria least small
amount. Therefore, analysis emphasizes approximate equilibrium concepts (Demange et al.,
1986; Wellman et al., 2001a). introduce particular type approximation, --competitive
equilibrium, defined terms parameters bound degree agents acquire suboptimal surplus. Intuitively, b bounds suboptimality consumers surplus, bounds
suboptimality producers surplus attributable output, g bounds suboptimality
producer surplus attributable input g. described Section 5, parameters
special interpretation market protocol applied task dependency networks.
Denote Ha (p) maximum surplus agent obtain (V, E), prices p, subject
feasibility. is,
Ha (p)
max (a, (V 0 , E 0 ), p)
(V 0 ,E 0 )(V,E)

feasible (V 0 , E 0 ).
Definition 4 (--competitive equilibrium) Given parameters:
b , 0,
g G,
g

allocation (V 0 , E 0 ) --competitive equilibrium prices p iff:
1. A, (a, (V 0 , E 0 ), p) 0.
2. c C, (c, (V 0 , E 0 ), p) Hc (p) b .
3. , (, (V 0 , E 0 ), p) H (p) (hg,iE g + ), feasible (V 0 , E 0 ).
4. goods material balance.
Consider Network greedy-bad prices shown Figure 5 except p(5) = 8.
constitute exact competitive equilibrium a6, though inactive, could make
positive profit. However, 2a6 + 3a6 + 4a6 + 1, since Ha6 (p) = 1, a6 obeys Condition 3
allocation --competitive equilibrium specified prices.
Theorem 3 (V 0 , E 0 ) --competitive equilibrium (V, E) prices p, (V 0 , E 0 )
feasible allocation nonnegative value differs value efficient allocation
[hg,iE g + ] + |C|b .
--competitive equilibrium corresponds standard notion competitive equilibrium
g
b = = 0, = 0 g.
Corollary 4 (to Theorem 3) competitive equilibrium allocation efficient.
noted Section 4.1, consistent previously established results.

523

fiWALSH & W ELLMAN

4.4 Valid Solutions
following sections show --competitive equilibria useful concept analyzing decentralized market protocols. However, protocols always reach --competitive
equilibria networks. Hence consider weaker constraints prices, consistent
lesser degree agent optimization solution allocation.
say solution (V 0 , E 0 ) valid respect prices p if:
1. consumer solution pays value single good. is,
c C V 0 , exists single hg, ci E 0
p(g) vc (g),
p(g0 ) = 0 g0 6= g hg0 , ci E 0 .
2. None active producers unprofitable. V 0 h, g E 0
(, (V 0 , E 0 ), p) 0. Note solution validity preclude inactive producer
unprofitable (i.e., admits dead ends).
Note (1) effectively states consumers obtain negative utility, weaker
competitive equilibrium conditions require consumers receive optimal
allocation. Similarly, (2) require producers optimize, competitive equilibrium,
requires nonnegative utility active producers.
a1
5

1

a2

2

1

2

a3

3

1

1

a4

4

1

5

5

a5
0
5
8

a7
0

6

cons

13

15

a6
0

Figure 7: valid solution Network greedy-bad.
Figure 7 shows example valid solution, underlying costs values
Figure 5. allows dead ends, validity directly provide useful bounds
inefficiency allocation.

5. SAMP-SB Protocol
preceding section introduces static properties price configurations allocations.
address problem prices might obtained. compute prices allocations,
must elicit information bearing relative value goods, systematic communication process. Mechanisms determine market-based exchanges based messages
agents called auctions (McAfee & McMillan, 1987).
524

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

agents bidding policies represent strategies interacting auctions. Whereas
auction mechanism may designed central authority, bidding policies generally determined individual agents. understand implications auction design requires
analysis market protocol arises combination auction mechanism
agent bidding policies.
space potential auctions expansive (Wurman et al., 2001), definitive theoretical
results currently known fairly limited classes problems (Bikhchandani & Mamer,
1997; Demange & Gale, 1985; Gul & Stacchetti, 2000; Klemperer, 1999; McAfee & McMillan,
1987). Complementarities discrete goods, cause nonexistence price equilibria,
greatly complicate auction design analysis auctions (Milgrom, 2000).
supply-chain domain, investigated particular protocol, called SAMP-SB (Simultaneous Ascending (M+1)st Price Simple Bidding). demonstrated below, SAMP-SB
produce good allocations which, cases, consistent competitive price equilibrium theory.
5.1 Auction Mechanism
SAMP-SB mechanism comprises set auctions, one good. Auctions run simultaneously, asynchronously, independently, without direct coordination. Agents interact
auctions submitting bids goods wish buy sell. bid form: ((q1 p1 ) . . . (qn
pn )). pair (qi pi ) indicates offer buy sell good, qi indicating quantity
offer pi indicating price. qi > 0, offer buy qi units good
pi per unit, refer buy offer. qi < 0, offer sell qi units less
pi per unit, refer sell offer. agent buys sells good
task dependency network, bid contains either positive negative quantity offers. Bids
possess sometimes called additive-OR semanticsthe offers treated exactly
came separate bids, hence auction match individual offers independently.
Without loss generality, henceforth impose restriction |qi | = 1 offers bids,
continuing allow agents may submit multiple offers bid.
auction receives new bid, sends bidders price quote specifying
price would result auction ended current bid state. Price quotes issued
initial bids received, subsequently issued immediately receipt new bids.
offers may tied current price, information alone sufficient
agent tell whether winning offer placed price. clarify ambiguity, price
quote reports bidder quantity would buy sell current state.
prices sent bidders, reported winning state specific recipient. Agents may
choose revise bids response notifications (if agent wish change
bid, inaction leaves previous bid standing auction).
assume communication reliable asynchronous.3 is, messages sent eventually reach recipients, although impose bound delays. Agents auctions use
message IDs ensure handle messages appropriate order. Note even auctions agents deterministic behaviors, overall run SAMP-SB may nondeterministic
due asynchrony.
3. Technically, adopt model asynchronous reliable message passing systems (Fagin et al., 1995).

525

fiWALSH & W ELLMAN

asynchrony, helpful auction send ID recent bid received
agent price quote. agent responds price quote reflects
recent bid sent. Without device, agent difficulty establishing feasibility,
understanding input output bid states may based nonuniformly delayed reports.
Bidding continues quiescence, state messages received, agent
chooses revise bids, auction changes prices, ask prices, allocation. point,
auctions clear; bidder notified final prices many units transacts
good. Note quiescent system necessarily solution state (approximate) equilibrium
state.
Although detecting quiescence straightforward centralized system, decentralized,
asynchronous system need perform operation using local message passing. previous work (Wellman & Walsh, 2000), described protocol detecting quiescence general
distributed negotiations, based well-known termination-detection algorithm.
auction runs according (M+1)st-price rules (Satterthwaite & Williams, 1989, 1993;
Wurman et al., 1998). (M+1)st price auction variant (second-price) Vickrey auction (Vickrey, 1961), generalized allow exchange multiple units good. Given set
offers including units offered sale, (M+1)st-price auction sets price equal price
(M+1)st highest offer offers. price said separate winners
losers, winners include sell offers strictly price buy offers
strictly price. agents offer (M+1)st price win; case ties, offers
submitted earlier precedence. Winning buy sell offers matched one-to-one, pay
(or get paid) (M+1)st price.
issuing price quotes, auction reports price (i.e., current going price,
(M+1)st price), p(g) ask price, (g) good g. ask price specifies amount
buyer would offer order buy good, given current set offers. ask
price determined price Mth highest offers auction, hence (g) p(g).
instance, buy bids 12, 10, 6 sell bids 15, 11, 8, p(g) = 10, (g) = 11,
auction quiescence, buy bids 12 10 would match sell bids 15 11
trade p(g) = 10.
producer complementary inputs, ensuring feasibility challenging problem,
requiring careful design. auctions run simultaneously, auction requires prices
agents successive buy offers increase less (generally small) positive number
b prices successive sell offers increase less .4 auction enforce
ascending rule simply rejecting agents offer price increase b .
constraining direction price changes, design gives producers accurate indication
relative prices inputs outputs prices allowed fluctuate directions.
ascending bid restriction ensures ascending auction prices, one technicality. Due
asynchrony immediate issuance price quotes, initial bid agent arrives
higher bid, price quote could decrease. handled simply auction issuing
price quotes specified period time auction opens. first price quote
issued, auction accepts new bids agents previously placed bids.
common auction literature practice place ascending restriction buy-offer
prices. may seem counterintuitiveand fact atypicalto place restriction
4. rules differ typical simultaneous ascending auction (Demange et al., 1986; Milgrom,
2000), specify agents must submit offer prices least increment current price.

526

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

sell-offer prices. However, ascending offer price restriction ensures price quotes rise
monotonically auctions progress. Section 5.4 shows ascendingoffer-price restriction buy sell offers serves key role establishing relationships system
quiescence solution convergence system.
5.2 Bidding Policies
Although designers negotiation mechanisms generally control agents behaviors, conclusions outcome mechanism must based assumptions
behaviors. typical assumption economics agents rational sense,
example play policies form Bayes-Nash equilibrium. However, discussed
Section 7.1, complexity supply chain formation markets beyond current state-of-the-art
analyzing Bayes-Nash equilibria simultaneous ascending auctions. Instead, analysis assumes agents follow simple, non-strategic bidding policy, described section.
variations may reasonable, perhaps better respects policies describe.
Rather explore range possibilities, chose work investigate particular set
policies depth. chosen policies obey ascending offer restriction enforced auction,
respect locality information require knowledge agents system,
myopic use information provided current price quotes, without
forecasting future prices.
Recall consumer wishes acquire single good maximizes surplus given
prices. assume consumer initially offers zero good interest. long
winning good, change offer. Whenever winning good, offers p(g ) + b
good g = arg maxgG (vc (g) p(g) b ) vc (g ) p(g ) b 0, otherwise stops bidding.
producers objective much complex, namely maximize difference
price receives output total price pays inputs, remaining feasible.
assume producer initially offers zero input goods, gradually increases
offers ensure feasibility. raises offer price input good b price
quotes indicate losing good winning output.
assume producer bids output good g effort recover production cost
perceived costs inputs. producer places first output offer receiving
first price quotes inputs, subsequently updates output offer whenever receives
new price quote input. simplicity, consider case one offer (each
quantity one) input. currently winning input g, perceived cost, p (g) g
simply p(g). currently winning g particular offer, p (g) = max((g), p(g) +
b ). price previous offer made g , perceived costs increase,
offers max( + , hg,iE p (g)) output g . multiple offers good g,
assumes separate perceived cost respect offer, bids output accordingly.
Figure 8 shows producer would bid next function current prices current
offers, b = 1 2.
Note throughout negotiation, producer places bids output goods
received commitments input goods. Producers counteract potential risk continually updating bids based price changes feasibility status. producer reduces exposure dead
ends incrementing offer prices inputs minimal amounts necessary.
527

fiWALSH & W ELLMAN

Current offer price = 2

p(A) = 1
(A) = 2

C
3

B
p(B) = 2
(B) = 4

Good

Next Offer
Price


B
C

hold 2
2
5

Current offer price C = 3

Current offer price B = 1

Figure 8: producers next offers, according SAMP-SB, b = 1 2. dashed
arrow good B indicates producer currently losing B. solid arrows
indicate producer currently winning goods C.

5.3 Bidding General Preferences
task dependency network model represents fairly simple production capabilities consumer
utility. discuss natural potential extensions bidding policies broader class
capabilities preferences.
producer capable variable-unit production could bid exactly multiple identical
producers. producer would maintain separate offers bids unit, update
separate offers independently. Similarly, consumer additive value multiple goods,
multiple units good, could bid unit good separate consumer.
producer alternatives input, independent inputs, switch bidding
currently cheapest option. Subtle issues arise producer alternative input sets,
particularly tentatively winning parts sets. One option would focus bidding
set lowest perceived cost, may include premium goods tentatively
winning set. Alternatively, producer could assume definitely win tentatively
goods effectively treat sunk costs. Fractional accounting sunk costs may
reasonable. Similar considerations arise extensions presenting complex consumption choices.
5.4 Properties SAMP-SB
section describe number theoretical properties SAMP-SB. Section 5.4.1
describe properties relating convergence quiesence, Section 5.4.2 present properties relating efficiency convergence price equilibrium, Section 5.4.3 present properties
relating solution convergence.
5.4.1 C ONVERGENCE



Q UIESCENCE

SAMP-SB auctions bidding policies guarantee system always reach quiescence.
Theorem 5 SAMP-SB reaches quiescence finite number bids placed.
However, convergence take long time.
Observation 6 asynchronous environment, possible run protocol may require
number bids exponential network size, function consumer value.
528

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

1-1

2-1

1-A

0
0

1-3

start
2
0

1-B

3-A

0

1

2-3

0
1-2

3-1

2-A

0
2

3-3

0
2-2

2-B

0

0
3-2

3
consumer
1

3-B

0

Figure 9: Network exponential: network may require exponential number bids
reach quiescence.

Figure 9 shows Network exponential, illustrates observation. agent named
start places one-time bid sell one unit good 0 $2. Since (0) = 2, producers 1-1
1-2 initially losing input bids, agents offer price 2 output goods.
Producer 1-3 receive new price quotes goods 1-A 1-B asynchronously, hence may
update bid good 1 twice, offering price 2 first time price 4 second
time. Continuing process, see producer 3-3 updates bid good 3 eight
times. extend network maintain labeling consistent Figure 9, producer n-3
would place O(2n ) bids good n. Note however, bids price quotes propagated
synchronously, exponential growth would occur.
example above, bids actually superfluous meaningfully
affect outcome protocol. appears often true situations exhibiting worst-case
behavior described. capture distinction relevant irrelevant bidding, introduce
notion quasi-quiescence, persistent state subsequent bids effectively
matter solution convergence. SAMP-SB convergence quasi-quiescence requires number
meaningful bids bounded size network value maximum
consumer value.
Definition 5 (quasi-quiescent) run SAMP-SB quasi-quiescent state when, consumer active producer , bids received would change bids
response price quotes already received transmitted auctions.
Clearly, requirements quasi-quiescence subset requirements quiescence.
Observation 7 quiescent state quasi-quiescent state.
Theorem 8 run SAMP-SB reaches quasi-quiescent state, remains quasiquiescent state. Furthermore, neither allocation prices p subsequently change.
theorem means that, quasi-quiescence reached, subsequent bids effectively
matter terms equilibrium solution convergence.
Corollary 9 (to Theorem 8) quiescent state SAMP-SB --equilibrium valid solution
iff first quasi-quiescent state reached --equilibrium valid solution, respectively.
following theorem establishes bound number relevant bids necessary reach
quasi-quiescence.
529

fiWALSH & W ELLMAN

Theorem 10 SAMP-SB reaches quasi-quiescent state number bids bounded polynomial size network value maximum consumer value placed
consumers active producers.
previously mentioned quiescence-detection protocol (Wellman & Walsh, 2000) detect
quasi-quiescence, thus terminate negotiations reached.
5.4.2 E FFICIENCY



C ONVERGENCE



P RICE E QUILIBRIUM

intentionally use b , parametrize SAMP-SB concept --competitive
equilibrium. interpretation g terms prices ask prices, specify necessary sufficient conditions result SAMP-SB corresponds --competitive
equilibrium.
Theorem 11 prices allocation determined quiescence SAMP-SB protocol
--competitive equilibrium, g = max((g) p(g), b ), iff inactive producer buys
positive-price input.
Theorems 3 11, establish bounds inefficiency --competitive equilibrium, parametrized g = max((g) p(g), b ) good. cases, difference
(g) p(g) may quite high. However, actually establish tighter bound.
Theorem 12 (V 0 , E 0 ) --competitive equilibrium computed SAMP-SB, (V 0 , E 0 )
nonnegative value differs value efficient allocation (|{hg,
E}| b + ) + |C|b .
Note theorem replaces Theorem 3 b bound.
network tree polytree one consumer.
g

Theorem 13 quiescent state SAMP-SB --competitive equilibrium tree.
unaware general network structures SAMP-SB guaranteed converge --competitive equilibrium. However, Theorem 11 implies improve allocations modify SAMP-SB avoid dead ends. say bidding policy safe producer
producer cannot obtain negative surplus quiescence. clear protocol safe
producers, converge --competitive equilibrium.
SAMP-SB assumed producer updates buy sell offers simultaneously
response price quotes. policy safe, even single-input producers,
producer bids input based state standing offer output, rather offer
place. producer would get negative surplus win new output offer
gets stuck winning new input offer. However, slight variant bidding policy,
call safe SAMP-SB, safe single-input producer. protocol, producer updates
input bids would update, currently winning, recent output offer.
Clearly, safe SAMP-SB static properties SAMP-SB, hence Theorem 12 applies
safe SAMP-SB.
Theorem 14 quiescent state safe SAMP-SB --competitive equilibrium network
input complementarities.
530

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Safe SAMP-SB guaranteed safe producers multiple inputs arbitrary
networks, know safe producer bidding policy ensures safety producers
arbitrary network (other degenerate policies bidding).
Safe SAMP-SB may take longer reach quiescence regular SAMP-SB. safe SAMP-SB,
producer must always wait notification results pending output offers increasing input offers. producer win output offer may require propagations many messages
various paths network buyers output good would increase buy offer
prices good. resulting delay would greater local delay communicating
output good auction.
non---competitive equilibrium runs SAMP-SB result dead ends suggests potential
source significant efficiency loss. example, Figure 7 shows result run SAMP-SB
Network greedy-bad. valid solution dead end producer a6. Since producer a3
incurs cost $1 provide good 3 a6, contribute value system,
dead end pure waste global efficiency perspective. allocation undesirable directly
producer a6 committed pay $1 input cannot use. large networks
costs, dead ends result significant efficiency losses negative profits individual agents.
propose contract decommitment protocol remove dead ends SAMP-SB reaches
quiescence. According decommitment protocol, inactive producer decommit
contracts inputs would pay positive price. protocol applied recursively
producers lose outputs due decommitment. decommitment process
terminates, agents exchange goods specified remaining contracts. refer SAMP-SB
decommitment SAMP-SB-D.
Figure 7, producer a6 would decommit contract a3. Clearly, Theorem 11 implies
agent decommits iff SAMP-SB produced --competitive equilibrium. Moreover,
remove consideration producers decommit, remaining agents --competitive
equilibrium.
Decommitment benefit that, whereas producers lose money SAMP-SB
protocol, agent receives negative surplus participating SAMP-SB-D. However,
achieved making auction allocations non-binding, undesirable producers
lose output sales decommitments. begs question enforce
requirement inactive producers agents decommit.
addition dead ends, efficiency lost SAMP-SB fails find solution
positive value solution exists, SAMP-SB forms solution value inferior efficient solution (dead ends necessarily mutually exclusive two cases). Section 6
describe experimental analysis efficiency, source inefficiency, equilibrium
attainment SAMP-SB set networks.
5.4.3 OLUTION C ONVERGENCE
Recall SAMP-SB always converges valid solution (specifically --competitive equilibrium) networks tree structures, safe variant converges networks input
complementarities. following theorem shows that, sufficiently high consumer value, regular SAMP-SB always converge (possibly non-equilibrium) valid solution polytrees.

531

fiWALSH & W ELLMAN

Theorem 15 (V, E) polytree solution assigns good g consumer c, given
costs values, exists value vc (g) SAMP-SB guaranteed converge
valid solution (V 0 , E 0 ) c.
dead ends may result, cannot usefully bound inefficiency solution reached
SAMP-SB polytree.
general network structures, prices sell offers consumers goods could rise
values, case system necessarily reach quasi-quiescence nonsolution state. If, however, quasi-quiescence reached price consumers good
reaches value good, valid solution.
Theorem 16 SAMP-SB reaches quasi-quiescence p(g) < vc (g) hg, ci E, c C,
systems state represents valid solution.
next theorem establishes conditions valid solution state immediately
lead quasi-quiescence.
Theorem 17 run SAMP-SB (V, E) valid solution state that:
consumer c either winning offer p(g) + b > vc (g) hg, ci E,
agents correct beliefs goods currently winning,
bids consumers active producers received response current
price quotes,
sell offers lost due tie breaking,
subsequent price quote auction, system quasi-quiescent
state valid solution.
Although SAMP-SB guaranteed converge solution, fact problem finding solution NP-Complete (Walsh et al., 2003) lead us expect problems
SAMP-SB would converge solution exponential number meaningful
bids. Since number meaningful bids bounded polynomial maximum consumer
value, expect exist networks SAMP-SB converge
solution exponential consumer values. practice find construct problems consumer value must exponential order SAMP-SB converge
solution (Walsh et al., 2003). However, run many simulations required value
much reasonable (Walsh et al., 2003).
networks, costs, values, SAMP-SB cannot converge valid solution
values b , matter high consumer value. One example (the simplest
able construct) Network no-converge, shown Figure 10. Observe solution
must include agent a8, cannot include a7. Agent a6 always offers price least p(2) + 20
good 4, hence a8 cannot win two units good 4 less p(2) + 20 each. Thus agent a8
always offer price least 2p(2) + 40 good 5. Since agent a7 never offer price
2p(2) + 22a7 good 5, agent a8 could win good 5 2a7 20. But, occur,
must b 20. thorough analysis, taking account dynamics SAMP-SB,
shows must b 40 = 0 obtain valid solution quiescence,
certain patterns asynchrony.
532

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

a2
a1

1

0

2

a7

20

0

a3

5

0
a6
3

cons

a8

4

0

0

a4

a5

20

20

Figure 10: Network no-converge: network SAMP-SB cannot converge solution
certain values b .

6. Empirical Performance SAMP-SB
Whereas analytic results provide insight SAMP-SB variants, support comprehensive characterization performance, except certain special-case network structures. order gain understanding effectiveness SAMP-SB SAMP-SB-D,
performed empirical study based protocol simulations sample task dependency networks.
6.1 Setup
investigation focuses small set networks exhibiting variety structural properties:
simple (Figure 11), unbalanced (Figure 12), two-cons (Figure 13), bigger (Figure 14),
many-cons (Figure 15). studied Network greedy-bad (Figure 4).
a1

1

a3

3

c1
1.216

a2

2

a4

Figure 11: Network simple.
ran experiments multiple instances network. instance randomly
chose producer costs uniformly [0, 1], consumer network, calculated
fixed value that, excluding consumers, exists positive-surplus solution
consumer 0.9 probability. determined consumer values via simulation, assuming
specified distributions producer costs. discarded instances whose efficient solutions
value zero. set b = = .01.
test effect competitive equilibrium existence performance protocols,
generated instances unbalanced, two-cons, greedy-bad costs admit
competitive equilibrium costs not. simple many-cons polytrees,
533

fiWALSH & W ELLMAN

1

a1

a8
8

a2

a9

2

a13
a3

3
9

a10
a4

4

a5

5

a6

6

a7

7

15

c1
3.73

a14

a11

a15
a12

10

Figure 12: Network unbalanced.

a3
a1

3

1

c1
1.23

a4
4

c2
2.17

a2

2
a5

Figure 13: Network two-cons.

a1

1

a17

a9

a2

2

a3

3

a10

a18

a11
10
a12

a4

4

a5

5

a13

a6

6

a14

a7

7

a15

a25
13

9

a19

a26
a27
14
a28

a20

17
11

a21

a29
15

a22

a30

a23

a31
16

12
a8

8

a16

a24

a32

Figure 14: Network bigger.

534

c1
3.51

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

a1

1

a2

2

a3

3

a4

4

a5

5

a6

6

a13

13
a19

19

c1
4.42

a14

14

a20

a15

15
20

a7

7

3.89
a16

a8

8

a9

9

a10

10

a11

11

a12

12

c2

16

a21
a17

17
a22

21

c3
4.44

a18

18

Figure 15: Network many-cons.
know Theorem 2 instances thereof competitive equilibria. able
generate no-equilibrium instances bigger given cost distributions.
generate instance desired type cost structure (equilibrium no-equilibrium)
repeatedly chose sets producer costs randomly uniform distribution desired
property met. experiments, determined whether competitive equilibrium existed
given complete information network structure, values, costsusing following
procedure. Recall competitive equilibrium always efficient (Corollary 4). Hence, given
optimal allocation (V , E ), attempt solve system linear equations characterize
competitive equilibrium, described Section 4.1. solution equations exists,
resulting prices constitute competitive equilibrium, otherwise equilibrium exists. used
CPLEX, commercial mixed-integer-linear programming package, find efficient allocation
solve corresponding equilibrium equations.
type cost structure network, tested 100 random instances, exception simple, tested 3220 instances.5 instance protocol, measured efficiencythe fraction efficient valueattained SAMP-SB SAMP-SB-D.
measured percentage available surplus (i.e., percentage value optimal
solutions) obtained producers.
6.2 Results
classify efficiency run protocols one four ways: Negative, Zero, Suboptimal
(but positive), Optimal efficiency. Table 1 shows distribution efficiency classes
experiments. Note SAMP-SB-D cannot produce negative efficiency, construction.
5. tested instances simple part broader study (Walsh et al., 2000).

535

fiWALSH & W ELLMAN

Network
simple
unbalanced, case:
equilibrium exists
equilibrium exists
two-cons, case:
equilibrium exists
equilibrium exists
bigger
many-cons
greedy-bad, case:
equilibrium exists
equilibrium exists

SAMP-SB
% instances
Neg Zero Sub Opt
0.0
0.3
0.0 99.7

SAMP-SB-D
% instances
Zero Sub
Opt
0.3
0.0
99.7

5.0
100.0

1.0
0.0

7.0
0.0

87.0
0.0

1.0
100.0

1.0
0.0

98.0
0.0

11.0
18.0
0.0
27.0

0.0
0.0
0.0
0.0

6.0
78.0
4.0
56.0

83.0
4.0
96.0
17.0

0.0
1.0
0.0
0.0

3.0
95.0
0.0
2.0

97.0
4.0
100.0
98.0

4.0
100.0

0.0
0.0

21.0
0.0

75.0
0.0

1.0
100.0

0.0
0.0

99.0
0.0

Table 1: Distribution efficiency classes SAMP-SB SAMP-SB-D. Efficiency classes:
Negative (Neg), Zero, Suboptimal (Sub), Optimal (Opt).

Recall (from Section 5.4.2) efficiency loss SAMP-SB attributable three,
necessarily exclusive, causes: dead ends, failure form solution positive-valued
solution exists, finding suboptimal solution. infer percentage instances exhibiting dead-end suboptimality SAMP-SB examining differences SAMP-SB-D
SAMP-SB totaled Negative, Zero, Suboptimal columns Table 1. Decommitment
affect contribution no-solution suboptimal-solution losses, helps reveal
eliminating dead-end suboptimality. Hence, infer percentage instances exhibiting no-solution suboptimal-solution suboptimality SAMP-SB examining Zero
Suboptimal columns SAMP-SB-D, respectively.
Table 2 shows average efficiency attained protocols, factored network equilibrium existence (where relevant). see, difference SAMP-SB-D
SAMP-SB columns, dead ends significant source inefficiency. Additionally, existence
competitive equilibrium significant effect performance protocols. networks, SAMP-SB-D produces nearly perfect efficiency competitive equilibrium exists (recall
studied instances simple, bigger, many-cons equilibria), much less
effective equilibrium exist, fact failing find solutions no-equilibrium
cases unbalanced greedy-bad.
check whether differences performance significant, performed Students tTests protocol, comparing mean efficiencies instances admit competitive equilibrium means instances admit competitive equilibrium. Table 3 shows
results, indicating p-values means equilibrium no-equilibrium instances came
underlying population. typical analyses, null hypothesis means
equal rejected p-value 0.05. threshold, seems safely reject
hypothesis mean efficiencies equilibrium non-equilibrium instances
536

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Network
simple
unbalanced
equilibrium exists
equilibrium exists
two-cons, case:
equilibrium exists
equilibrium exists
bigger
many-cons
greedy-bad, case:
equilibrium exists:
equilibrium exists:

SAMP-SB
0.997

SAMP-SB-D
0.997

0.867
20.080

0.990
0.000

0.733
0.268
1.000
0.120

0.986
0.686
1.000
0.996

5.320
18.230

0.990
0.000

Table 2: Average efficiency network protocols.

Network
unbalanced
two-cons
greedy-bad

SAMP-SB

SAMP-SB-D

6.27 1030
5.15 107
1.41 101

8.23 10101
1.43 1022
8.04 10101

Table 3: P-values computed Students t-Test. t-Test compared means efficiencies
instances admit competitive equilibrium admit competitive
equilibrium.

537

fiWALSH & W ELLMAN

Networks unbalanced greedy-bad. Inspection data supports conclusion, SAMP-SB-D essentially always produces zero efficiency, produces perfect efficiency
many instances admit competitive equilibrium.
face it, high SAMP-SB/greedy-bad p-value suggests cannot safely
reject hypothesis mean efficiencies differ equilibrium no-equilibrium
instances network. However, inspection data indicates high probability results one outlying equilibrium instance large negative efficiency. Indeed, fact
SAMP-SB-D always produces essentially optimal results instances admit competitive equilibrium, predominantly produces suboptimal results instances without equilibria,
suggests unlikely equilibrium no-equilibrium means SAMP-SB
Network greedy-bad.
Network
simple
unbalanced
equilibrium exists
equilibrium exists
two-cons, case:
equilibrium exists
equilibrium exists
bigger
many-cons
greedy-bad, case:
equilibrium exists
equilibrium exists

% --Competitive
Equilibrium
100
88
0
83
2
96
17
75
0

Table 4: Percentage instances SAMP-SB attained --competitive equilibrium.
Table 4 shows percentage instances SAMP-SB attained --competitive equilibrium network. straightforward determine whether --competitive equilibrium
attained observing whether dead ends (Theorem 11). Again, see strong
connection existence competitive equilibrium. One notable exception many-cons
(which always admits competitive equilibrium), SAMP-SB frequently produced dead
ends. see --competitive equilibria form small percentage no-equilibrium
two-cons instances, although prevalent phenomenon b parameters
chose.
Table 5 shows average efficiency, factored --competitive equilibrium attainment
(SAMP-SB SAMP-SB-D produce results --competitive equilibrium attained). must careful drawing conclusions statistics because, given
network case, relatively many --competitive equilibrium instances (Table 4).
Still, note certain salient trends. --competitive equilibrium runs produce near perfect efficiency, smaller degrees inefficiency specified bounds Theorem 12.
allocation produced SAMP-SB --competitive equilibrium iff dead ends,
expect significant portion efficiency loss non---competitive equilibrium pro538

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Network
simple
unbalanced
equilibrium exists
equilibrium exists
two-cons, case:
equilibrium exists
equilibrium exists
bigger
many-cons
greedy-bad, case:
equilibrium exists
equilibrium exists

--Equilibrium
Found
SAMP-SB SAMP-SB-D
N/A
N/A

--Equilibrium
Found
SAMP-SB/ SAMP-SB-D
0.997

0.248
20.08

0.989
0.000

0.998
N/A

0.570
0.130
0.997
0.060

0.920
0.707
1.000
0.995

1.000
1.000
1.000
1.000

24.28
18.22

0.960
0.000

1.000
N/A

Table 5: Average efficiency network protocols, factored --competitive equilibrium attainment.

ducing runs SAMP-SB would attributable negative surplus incurred dead ends.
significant differences efficiency SAMP-SB-D SAMP-SB shown non--competitive equilibrium column provides evidence hypothesis. Indeed, appears
surplus lost dead ends (as opposed suboptimal solution attainment) dominant cause
inefficiency --competitive equilibrium attained. instances, improvement
decommitment greater difference efficiency SAMP-SB-D optimal
efficiency.
Table 6 shows average fraction available surplus obtained producers, respectively,
network. Perhaps surprisingly, networks producers gain significant surplus
SAMP-SB-D protocol, even though bidding obtain zero surplus. reason
producers output offer indicates minimum amount willing accept
exchange output. rising buy offers cause price rise producers output
offer. could happen cases necessary block certain agents feasible
allocation quiescence. Note however, decommitment step needed producers
obtain high average surplus. Without decommitment, average producer surplus highly
negative, shown SAMP-SB column.

7. Related Literature
section discuss literature related present work. Section 7.1 discuss related
literature price-based analysis auction theory, Section 7.2 discuss related literature
supply chain formation.
539

fiWALSH & W ELLMAN

Network
simple
unbalanced, case:
equilibrium exists
equilibrium exists
two-cons, case:
equilibrium exists
equilibrium exists
bigger
many-cons
greedy-bad, case:
equilibrium exists
equilibrium exists

SAMP-SB
0.000

SAMP-SB-D
0.000

0.041
20.09

0.082
0.000

0.210
0.137
0.001
0.517

0.464
0.555
0.001
0.359

6.08
18.11

0.137
0.000

Table 6: Average fraction available surplus obtained producers network protocols.

7.1 Price-Based Analysis Auction Theory
shown special cases competitive equilibria exist task dependency networks (polytree single-input-producer networks), SAMP-SB always finds --competitive
equilibrium trees, minor variant always finds --competitive equilibria single-inputproducer networks. review results price equilibrium auction theory reveals
limited positive results typical.
well-known given arbitrarily divisible goods convex utility, cost, production functions, competitive equilibrium prices exist. additionally, gross substitutes condition
(which generalization no-complementarities) met, classic tatonnement procedure finds
competitive equilibrium distributed manner.6
goods discrete, competitive equilibria exist exchange (non-production) economies
gross substitutes conditions met (Bikhchandani & Mamer, 1997; Gul & Stacchetti, 1999;
Kelso & Crawford, 1982). Milgrom (2000) showed existence single complementarity
sufficient preclude equilibrium exchange economies. Bickhchandani Mamer (1997)
show existence variety conditions, appear natural interpretations task dependency networks. exchange economies, gross substitutes condition
ensures convergence (approximately) competitive equilibria simultaneous ascending
auctions (Demange et al., 1986; Gul & Stacchetti, 2000).
distributed price-based auction protocols leave agents undesired goods
preferences complementary (e.g., dead ends task dependency network), widely recognized problem. alternative approach use combinatorial auction, mediates negotiation single location, performing global matching combinations goods based indivisible
bids. general approach received much attention AI community late, motivated
6. reader may consult standard microeconomic textbook (Mas-Colell et al., 1995) details results.

540

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

part techniques quickly performing necessary global optimization (Andersson et al.,
2000; Leyton-Brown et al., 2000; Sandholm & Suri, 2000).
Currently, results combinatorial equilibria auctions established onesided (i.e., buyer only) bidding. Bikhchandani Ostroy (2002) Wurman Wellman (2000),
using different combinatorial frameworks, provide positive results equilibrium existence,
properties thereof. Wurman Wellman describe combinatorial auction framework.
Parkes Ungar (2000) describe combinatorial auction guaranteed converge
efficient allocation agents follow myopic best-response strategies. adding extend-andadjust phase, authors able obtain allocation ex post Nash equilibrium (Parkes
& Ungar, 2002). Ausubel Milgrom (2002) present proxy-auction mechanism obtains
efficient allocations straightforward bidding equilibrium goods substitutes.
present work consider simple, local, myopic bidding policies. policies
non-strategic, agents reason effect negotiations attempt
extract greater surplus. assumption non-strategic behavior plausible
large number agents. networks many agents bidding individual goods, many parallel
branches, many agents sequence, potential contribution one agent value
solution relatively small little gain strategic behavior.
experiments shown that, even producers bid obtain zero surplus specified policy, obtain positive surplus networks. Nevertheless, smaller networks,
potential strategic improvement pronounced, non-strategic assumption becomes less plausible. widely studied concept used analyzing strategic behavior Bayes-Nash
equilibrium.7 Informally, set strategies constitutes Bayes-Nash equilibrium single agent
incentive deviate strategy, given agents play Bayes-Nash equilibrium strategies. McAfee McMillan (1987) Klemperer (1999) survey state knowledge strategic analysis auctions exchange economies. Milgrom (2000) provides insights
fundamental challenges understanding agent behavior complementary
preferences. However, definitive results known quite restrictive market structures,
encompass two-sided markets complementarities, never mind multi-level characteristic negotiation task dependency networks. problem even specifying information
structure extensive form game simultaneous ascending (M+1)st price auctions task dependency networks, prerequisite computing Bayes-Nash equilibria, well beyond current
state art game-theoretic analysis.
auction theory currently fails provide satisfactory guidance understanding strategic
behavior even moderately complicated domains, used tournaments framework
developing evaluating candidate agent strategies. Santa Fe Double Auction Tournament (Rust et al., 1994) provided unexpected insights effective strategies continuous
double auctions, recent TAC series trading agent competitions (Wellman et al., 2001b,
2003) encouraged development sophisticated agent strategies (Greenwald, 2003; Stone &
Greenwald, 2000) complex market game.
Vickrey-Clarke-Groves mechanism (Clarke, 1971; Groves, 1973; Vickrey, 1961),
called Generalized Vickrey Auction (GVA) (MacKie-Mason & Varian, 1994), direct revelation approach, agents report valuations allocations, auction computes
lump-sum payment. GVA, solution optimal allocation based reports,
7. foundational reference, Chapter 7 Fudenberg Tiroles game theory text (1998) provides formal treatment strategic issues auction mechanism design analysis.

541

fiWALSH & W ELLMAN

payment function dominant strategy agents report true utility.
incentive compatibility perfect efficiency, GVA may seem ideal
economic perspective (although computation intractable). However, GVA budget balancedwhen buyers sellers bid, GVA pay money takes
in. Unfortunately unavoidable, impossible simultaneously ensure efficiency, budget
balance, individual rationality (no agent achieves negative surplus) (Myerson & Satterthwaite,
1983). Recently, Babaioff et al. (Babaioff & Nisan, 2001; Babaioff & Walsh, 2003) described
distributed auction mechanisms, based McAfees trade reduction auction (1992), obtain incentive compatibility budget balance linear supply chains, expense perfect efficiency.
Recent work Parkes, Kalagnanam, Eso (2001) explores methods minimize deviation
efficiency maintaining budget balance two-sided GVA-like mechanisms.
7.2 Supply Chain Formation
Supply chain managementthe problem accurately forecasting planning production deliveries meet demand minimize inventoryis active field study operations research.
problem management differs supply chain formation exchange partners
supply chain pre-established, assumed information gathered
agents effectively optimize global production across supply chain. contrast, work
approached problem automating process determining supply chain participants dynamically, assumption information decision making decentralized. Readers
interested supply chain management may refer Kjenstad (1998) extensive review.
Relatively less effort explicitly devoted problem cast supply chain formation, despite rhetorical appeals decentralized dynamic relation-building commonplace
popular literature. Nevertheless, point Section 3, venerable AI methodsin
particular widely-known CONTRACT NET protocolcan principle applied supply chain
formation. discussed Section 3, standard CONTRACT NET mechanisms
resolve nontrivial resource contention, precluding systematic comparison SAMP-SB general network structures. can, however, compare protocols network structures
resource contention mechanism necessary CONTRACT NET. clear agents
bid true costs, CONTRACT NET greedy allocation converge optimal allocations trees. holds tree structures relaxed allow multiple-unit input bids.
shown, SAMP-SB guaranteed converge approximately efficient allocations trees.
However, shown may converge good solutions multiple unit input bids
allowed. latter case, competitive equilibrium may exist, observed
equilibrium non-existence substantially hurt efficiency SAMP-SB allocations. contrast,
producers may receive different prices good CONTRACT NET. discriminatory pricing mechanism makes CONTRACT NET robust presence complementarities,
class network structures.
Sandholm (1993) examines specialization CONTRACT NET generalization Task Oriented Domains (TODs) (Rosenschein & Zlotkin, 1994). Agents begin initial allocation
tasks negotiate task exchanges mutually beneficial trades. Sandholms model
allows local constraints task achievement agent perform certain combinations tasks. However, dependency structurean agent rely agents
task achievement order accomplish tasks. Thus, every locally feasible trade results
542

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

globally feasible allocation, executed immediately independently trades.
cannot generally apply incremental trading protocol task allocation model subtask
dependencies. local exchange may require reallocation throughout entire network maintain
production feasibility.
Andersson Sandholm (1998) find decommitment protocols increase quality
resulting allocations variants TODs. incremental trading, decommitment gives agents
opportunity engage cost-effective contracts. Andersson Sandholm consider decommitment penalties provide friction reallocation compensate agents whose
contracts broken. expect penalties would appropriate extension
SAMP-SB-D protocol.
Veeramani et al. (Veeramani et al., 1999; Joshi et al., 1999) consider issues arising simultaneous negotiation multiple subtasking issues various levels supply chain.
asynchronous model, agents may opportunity finalize contract negotiations
still pending. uncertainty induces complex decision problem agents wish
overextend commitments.
Hunsberger Grosz (2000) study problem assigning task performance roles agents
SharedPlans collaborative planning framework. model based recipes, describe precedence constraints execution time across various sub-tasks constitute
complex task. Contention shared resources modeled explicitly recipe, individual agents may additional cost, timing, constraints, potentially arising
individual resource limitations. Hunsberger Grosz use combinatorial auction assign tasks
agents, given constraints, produce high-valued shared plan. find limiting task assignment certain combinations roles effect tradeoff computational allocative
efficiency.
work (Walsh et al., 2000; Walsh, 2001), studied strategic behavior agents
bidding particular one-shot combinatorial auction within task dependency network model.
empirically compared performance SAMP-SB, SAMP-SB-D, combinatorial auction (with strategic bidding). combinatorial auction eliminates problem dead ends allocating inputs outputs producers all-or-nothing basis. advantage notwithstanding,
combinatorial auctions may always appropriate mechanism. Since finding feasible
supply chain solution NP-hard (Walsh et al., 2003), sufficiently large problems intractable,
even advanced optimization procedures. Even computation tractable, social factors
may limit authority one entity compute allocations entire supply chain.

8. Extensions Future Work
task dependency network model propose provides basis beginning understand
automation supply chain formation. discussed ways extend bidding policies market protocol accommodate general production capabilities consumer
preferences. extensions model capabilities preferences multi-attribute
goods (e.g., goods multiple features quality delivery time, addition price
quantity) simply representing configuration distinct good network. However,
clear explode number goods attributes. effectively handle
greater numbers attributes would require multiattribute auctions (Bichler, 2001), multiple
inseparable features exchange negotiated simultaneously.
543

fiWALSH & W ELLMAN

realistic scenarios, producers may solve complex internal scheduling, planning, forecasting, complex problems order evaluate costs feasible options.
types extensions would increase fidelity model, would implications
agent bidding policies computation convergence speed market protocols. Despite
best efforts agents forecast plan, agents cannot predict certainty operation
within formed supply chain. Sophisticated agents would employ probabilistic reasoning techniques evaluating options negotiation. unexpected events occur impair
operation formed supply chain, agents would need protocols repairing reforming
supply chain.

assumed simple set non-strategic, myopic bidding policies simultaneous ascending auction. agents must coordinate input output bids dynamic auction mechanism,
understanding strategic bidding behavior challenging unsolved, albeit important problem
future work. seems likely significant developments game-theoretic methodology would
necessary analytically solve, even realistically specify, extensive form games incomplete
information corresponding asynchronous iterative auctions. meantime, make progress
understanding performance auctions, consider alternate approaches developing
good bidding policies. Tournaments proven effective ways encourage smart
people design smart trading policies evaluate relative qualities (Rust et al., 1994;
Wellman et al., 2001b). Axelrod (1987) used evolutionary approach evaluate populations
strategies, fixed types, iterated prisoners dilemma. major challenge applying
evolutionary approach supply chain formation problem develop sufficiently rich, yet
reasonably searchable set agent bidding policies.

suggested decommitment solution problem dead ends SAMP-SB,
strategic analysis protocol would take phase account. producers
could lose money decommitment allowed, expect producers would
willing participate, would aggressive bidding. Allowing decommitment begs question enforce producers decommit dead
ends, address fact unilateral decisions decommitment potentially
break (possibly desirable) contracts many downstream producers. reduce aggressive
bidding mitigate potential problems, could charge penalties producers initiate
decommitment (Andersson & Sandholm, 1998), perhaps paid producers whose output contracts get decommitted. would reduce spurious decommitments still allowing
producers stuck costly dead ends.

Finally, note market configuration studied hereseparate auctions good
represents one possible partition scope negotiations supply chain.
extreme, production activity could mediated one combinatorial auction mechanism covering
entire supply chain (Walsh et al., 2000). avoids coordination pitfalls separate
auction approach, imposes disadvantages associated imposing mechanism
global scope. Intermediate configurations, involving multiple auctions clusters highly related
goods, represent promising alternative investigation.
544

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

ACKNOWLEDGMENTS
paper includes material previously presented Sixteenth International Joint Conference
Artificial Intelligence (IJCAI-99) (Walsh & Wellman, 1999). work supported part
NSF grant IIS-0205435.

Appendix A. Proofs
appendix provides proofs theorems. convenience, restate theorems
proofs.
proofs, sometimes useful index position producer network. Clevel producer output g maximum distance consumer, formally stated
follows: one producer, consumer, g input, k + 1 maximum level
producer input g k. S-level producer defined similarly, respect
distance producer input, basis zero producers
inputs themselves. C-level S-level well defined, acyclicity.
A.1 Proof Theorem 1
Let (V, E) network input complementarities, producers one
input, let (V , E ) optimal allocation (V, E). convenience, partition producers
sets 1 , producers single input, 0 , producers inputs.
Procedure Input Complementarities Equilibrium constructs prices support
competitive equilibrium (V , E ).
Input Complementarities Equilibrium:
1. Initialize prices zero.
2. Perform following price changes made:
(a) c C \V , vc (g) > p(g), hg, ci E \ E ,
p(g) vc (g).
(b) c C V , vc (g0 ) p(g0 ) > vc (g) p(g) 0,
hg, ci E hg0 , ci E \ E ,
p(g0 ) vc (g0 ) (vc (g) p(g)).
(c) 0 V , p(g ) < , h, g E ,
p(g ) .
(d) 1 V , p(g ) < p(g) +
h, g E hg, E ,
p(g ) p(g) + .
(e) 1 \V , p(g ) > p(g) + ,
h, g E \ E hg, E \ E ,
p(g) p(g ) .
network (V, E) (with input complementarities) prices p, closed, reverse-surplus sequence directly connected sequence agents goods every agent would better
reversing allocation. Formally, sequence (n1 , . . . , nk ) vertices ni V , that:
545

fiWALSH & W ELLMAN

1. hni , ni+1 E hni+1 , ni E 1 k 1.
2. nk G.
3. n1 (C \V ) (0 V ).
(a) n1 C \ V , hn2 , n1 E \ E n1 would obtain nonnegative surplus p
obtaining n2 . 1 = k 1, n1 would obtain strictly positive surplus p
obtaining n2 .
(b) n1 0 V , hn1 , n2 E n1 would obtain nonpositive surplus p
active. k = 2, n1 would obtain strictly negative surplus p
active.
4. 2, ni ni 1 (C V ).
(a) ni 1 V , hni1 , ni E , hni , ni+1 E , ni would obtain nonpositive
surplus p active. = k 1, ni would obtain strictly negative surplus
p active.
(b) ni 1 \ V , hni+1 , ni E , hni , ni1 E , ni would obtain nonnegative
surplus p active. = k 1, ni would obtain strictly positive surplus
p active.
(c) ni C V , hni1 , ni E , hni+1 , ni E \E , ni would obtain less surplus
ni+1 ni1 p. = k 1, ni would obtain strictly better surplus
ni+1 ni1 .
open reverse-surplus sequence closed, reverse-surplus sequence except
that, instead Condition 3, n1 G n2 1 (C V ) Condition 4. Clearly
closed, reverse-surplus sequence length greater two contains open, reverse-surplus
sequence.
Lemma 18 Procedure Input Complementarities Equilibrium reach state
open, reverse-surplus sequence K = (n1 , . . . , nk ) constituting cycle n1 = nk
k 3.
Proof. Assume, contrary wish prove, cycle K prices p.
Moreover, let cycle smallest, contains cycle.
show create alternate, feasible solution (V 0 , E 0 ) higher value (V , E ),
giving us contradiction. Initialize (V 0 , E 0 ) = (V , E ). n j , 1 j < k, hn j , n j+1
E , remove edge E 0 , edge E \ E , add edge E 0 . Also, add remove
vertices necessary consistent added removed edges.
producer (V 0 , E 0 ) feasible feasible (V , E ) input,
either input output added, removed, neither changed. Consider good
n j G, 1 < j < k. Since j 1 > 1, must agents n j1 n j+1 1 (C V ).
inspecting Conditions 4(a)4(b) definition closed, reverse-surplus sequence (which
apply open reverse-surplus sequence), see edges incident n j added
removed way n j material balance. Similarly, considering agents nk1 , n2 ,
546

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

good n1 = nk , material balance good n1 = nk . Since goods material balance
producers feasible, (V 0 , E 0 ) feasible.
surpluses agents K unaffected transformation. definition open,
reverse-surplus sequence, every agent K obtains lower surplus p transformation,
agent nk1 obtains strictly higher surplus p. value feasible allocation
sum agent surpluses particular prices (Lemma 22), must value((V 0 , E 0 )) >
value((V , E )). contradicts optimality (V , E ), assumption K exists
must false. 2
Lemma 19 price good nk increases Procedure Input Complementarities
Equilibrium, exists finite closed, reverse-surplus sequence (n1 , . . . , nk ) prices
p price increase.
Proof.
show construct desired closed, reverse-surplus sequence, referring
conditions definition, steps Procedure Input Complementarities
Equilibrium. price increase nk occurred one Steps 2(a)2(e), triggered agent
nk1 . Since step triggered, nk1 would obtain strictly better surplus reversing allocation p, specified conditions 3(a), 3(b), 4(a)4(c). price nk increased Step 2(a) 2(c), desired closed, reverse-surplus sequence,
nk1 (C \V ) (0 V ) k 1 = 1. Otherwise, price nk increased Step 2(b),
2(d), 2(e), nk1 1 (C V ) k 1 > 2. case, let nk2 good
matched condition step.
price nk2 increased, Procedure Input Complementarities Equilibrium
ensures find agent nk3 matching one Conditions 3(a), 3(b), 4(a)4(c). If,
hand, p(nk2 ) = 0, producers positive costs consumers positive
values, find agent nk3 . find agent corresponds condition 3(a)
3(b), k 3 = 1 done. Otherwise, find good nk4 , nk2 ,
continue manner.
Clearly, process constructs open, reverse-surplus sequence. Now, must show
process selecting vertices eventually selects element n1 (C \V ) (0 V ). Since (V, E)
finite, since Lemma 18 cycles open, reverse-surplus sequence,
must eventually find n1 (C \V ) (0 V ) give us closed, reverse-surplus sequence. 2
Lemma 20 Procedure Input Complementarities Equilibrium terminates.
Proof. Assume, contrary wish prove, procedure terminate
price good g increases infinite number times. Consider cycle K = (n1 = g, . . . , nk = g)
vertices ni V , k 3 that:
1. hni , ni+1 E hni+1 , ni E {1, . . . , k 1}.
2. {2, . . . , k 1}, ni 6= g.
3. {3, . . . , k}, ni G, price increase good ni occurred one Steps 2(b),
2(d), 2(e) procedure, agent ni1 good ni2 matched condition
step. Furthermore, price increase ni2 , triggered agent ni3 good ni4 , caused
need price increase good ni .
547

fiWALSH & W ELLMAN

price g increases infinite number times, cycle must exist.
Let p prices p(n1 ) n1 agent n2 triggered price increase
n3 , ni G 1 < < k, p(ni ) increased, triggered
agent ni1 good ni2 . price goods arbitrary nonnegative number.
way constructed p, way prices increased procedure, K must
open, reverse-surplus sequence. Lemma 18, K cannot exist. Therefore,
procedure terminates. 2
Theorem 1 Competitive equilibria exist network input complementarities.
Proof. show Procedure Input Complementarities Equilibrium terminates
prices p every agent obtaining maximum surplus according (V , E ) . Since (V , E )
efficient, feasible, giving us competitive equilibrium prices p.
Lemma 20, procedure terminates. Clearly, procedure terminates, agents
1 (0 V ) (C \ V ) optimize according (V , E ). remains show (C
V ) (0 \V ). Assume, contrary wish prove, (C V ) (0 \V )
optimize according (V , E ).
Consider case (C V ) hg, ai E . Since algorithm guarantees
prefer good g0 g prices p, must p(g) > vc (g). Let p0
prices immediately price g rose vc (g) p00 prices immediately after.
Lemma 19, closed, reverse-surplus sequence (n1 , . . . , nk = g) prices p0 . p00 ,
conditions closed, reverse-surplus sequence hold, except surplus condition 4(a),
4(b), 4(c) applies nk1 becomes non-strict. However, obtains strictly negative surplus
p00 . Denote nk+1 .
create alternate, feasible solution (V 0 , E 0 ) proof Lemma 18 adding
edges hni , ni+1 E \ E , removing edges E , {1, . . . , k}.
surpluses agents K unaffected transformation. Every agent (a1 , . . . , nk1 )
obtains lower surplus p00 transformation. Agent = nk obtains zero surplus
transformation, higher negative surplus before. value
feasible allocation sum agent surpluses particular prices (Lemma 22), must
value((V 0 , E 0 )) > value((V , E )). contradicts optimality (V , E ), must
p(g) vc (g) obtaining maximum surplus p (V , E ).
If, hand, (0 \V ), ha, gi E. must < p(g). use
line proof case C V show (V , E ) suboptimal value, providing
contradiction. Thus must optimize according (V , E ) p.
Thus shown algorithm terminates agents optimizing according
(V , E ) p. Thus p supports competitive equilibrium allocation (V , E ). 2
A.2 Proof Theorem 2
Given polytree (V, E) efficient allocation (V , E ), present Procedure Polytree
Equilibrium constructs lower bounds p (g) upper bounds p (g) prices
goods g, turn uses bounds construct prices p goods. prove
resulting prices fact competitive equilibrium prices support (V , E ).
548

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Observe that, purposes competitive equilibrium pricing, treat consumer c
wishes obtain one good set Gc consumer desires single good gc
value vc (gc ) = vc = maxgGc vc (g), along additional producers. g Gc create
producer output gc , input g, = vc vc (g). Thus, without loss generality,
consider consumers preferences single goods. denote gc good consumer
c desires denote vc value c gc .
refer n0 V either hn, n0 E hn0 , ni E neighbors vertex
n V . use refer null vertex neighbor vertex.
Polytree Equilibrium:
1. g G, p (g) 0 p (g) .
2. connected subgraph (V , E) (V, E), select g G V arbitrarily:
Perform Set Bounds(g, ).
p(g) p (g).
Set Bounds recursively visits vertices, updating price bounds postorder (i.e.,
recursion unwinds) setting prices either lower upper bounds. (V, E)
polytree, procedure sets price good exactly once.
Set Bounds(n, r), n A, r G procedure either updates p (r) p (r)
bounds neighbors n, r, fixed. updates p (r),
way n
/ V n, active, would get nonpositive surplus p(r) p (r),
given bounds neighbors n, n V n, active, would get nonnegative surplus p(r) p (r), given bounds neighbors n. Since p (r)
increases (Steps 2, 4(b), 5(c)), property maintained. Similarly, Set Bounds(n, r)
updates p (r), way n
/ V n, active, would get nonpositive
surplus p(r) p (r), given bounds neighbors n, n V
n, active, would get nonnegative surplus p(r) p (r), given bounds
neighbors n. Since p (r) decreases (Steps 3, 4(c), 5(b)), property maintained.
Set Bounds(n, r):
1. neighbor z n z 6= r, perform Set Bounds(z, n).
2. n C \V ,
p (r) max(vn , p (r)).
3. Else n C V ,
p (r) min(vn , p (r)).
4. Else n \V then,
(a) neighbor g n g 6= r
g input n
p(g) p (g).
Else g output n,
p(g) p (g).
549

fiWALSH & W ELLMAN

(b) r input n,
output, gn , n
p (r) max(p (r), p (gn ) hg,niE, g6=r p (g) n ).
(c) Else r output n,
p (r) min(p (r), hg,niE p (g) + n ).
5. Else n V then,
(a) neighbor g n g 6= r,
g input n,
p(g) p (g).
g output n,
p(g) p (g).
(b) r input n,
output, gn , n),
p (r) min(p (r), p (gn ) hg,niE, g6=r p (g) n ).
(c) Else r output n,
p (r) max(p (r), hg,niE p (g) + n )

Lemma 21 Procedure Polytree Equilibrium computes price bounds p (g) p (g)
goods g G.
Proof. Assume, contrary wish prove, state g G
p (g) > p (g). Assume g first good visited.
say agent constrained p (g) Set Bounds(a, g) last change p (g).
Similarly, say agent constrained p (g) Set Bounds(a, g) last change
p (g).
Recall Lemma 22 value feasible allocation equal sum agent
surpluses particular prices. show transform (V , E ) alternate feasible
allocation (V 0 , E 0 ) compute alternate prices p show sum surpluses (V 0 , E 0 )
greater (V , E ).
First, initialize (V 0 , E 0 ) = (V , E ) good g G initialize p(g) = 0. Next, set p(g) =
p (g). recursively change prices allocation portion subtree rooted
g. Perform Lower Bound(a, g) agent constrained p (g) perform Upper
Bound(a, g) agent constrained p (g).
Throughout transformation, perform Lower Bound(a, g) iff visit g agent
constrained p (g). Similarly, perform Upper Bound(a, g) iff visit g agent constrained p (g). following describes portions transformation.
Lower Bound(a, g):
1. \V , must g input (because constrained p (g)).
neighbor g0 6= g a:
550

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

(a) g0 input a,
p(g0 ) p (g0 ),
perform Upper Bound(a0 , g0 ) agent a0 constrained p (g0 ).
(b) Else (g0 output a),
p(g0 ) p (g0 ),
perform Lower Bound(a0 , g0 ) agent a0 constrained p (g0 ).
2. Else V , must g output (because constrained p (g)).
input g0 a:
p(g0 ) p (g0 ),
perform Lower Bound(a0 , g0 ) agent a0 constrained p (g0 ).
3. V ,
remove incident edges (V 0 , E 0 ).
4. Else V \V ,
add incident edges (V 0 , E 0 ).
Upper Bound(a, g):
1. \V , must g output (because constrained p (g)).
input g0 a:
p(g0 ) p (g0 ),
perform Upper Bound(a0 , g0 ) agent a0 constrained p (g0 ).
2. V , must g input (because constrained p (g)).
neighbor g0 6= g a:
(a) g0 input a,
p(g0 ) p (g0 ),
perform Lower Bound(a0 , g0 ) agent a0 constrained p (g0 ).
(b) Else (g0 output a),
p(g0 ) p (g0 ),
perform Upper Bound(a0 , g0 ) agent a0 constrained p (g0 ).
3. V ,
remove incident edges (V 0 , E 0 ).
4. Else V \V ,
add incident edges (V 0 , E 0 ).
Observe that, (V, E) polytree, vertex visited either Upper
Bound Lower Bound.
show (V 0 , E 0 ) feasible. Consumers always feasible. Producers feasible
add remove incident edges add remove producer, respectively.
prove every g G material balance (V 0 , E 0 ).
551

fiWALSH & W ELLMAN

Consider good g p (g) > p (g). Lower Bound(a, g) performed agent
constrained p (g), occurred 2, 4(b), 5(c) Set Bounds(a, g). Therefore Lower
Bound(a, g) either adds hg, ai E \ E else removes ha, gi E . Upper Bound(a, g)
performed constrained p (g), occurred 3, 4(c), 5(b) Set Bounds(a, g).
Therefore Upper Bound(a, g) either adds ha, gi E \ E else removes hg, ai E .
possible combination, material balance maintained g.
consider good g 6= g. g visited Lower Bound(a, g), p(g) set
p (g) one following ways, immediately prior:
1. p(g) set p (g) 1(b) Lower Bound(a, g), agent \V
good g. case, g output ha, gi E \ E added (V 0 , E 0 ) 4
Lower Bound(a, g).
2. p(g) set p (g) 2 Lower Bound(a, g), agent V
good g. case g input hg, ai E removed (V 0 , E 0 ) 3
Lower Bound(a, g).
3. p(g) set p (g) 2(a) Upper Bound(a, g), agent V
good g. case case g input hg, ai E removed (V 0 , E 0 )
3 Upper Bound(a, g).
One following operations occurred Lower Bound(a, g):
1. constrained p (g) 2 4(b) Set Bounds(a, g), hg, ai E \ E added
(V 0 , E 0 ) 4 Lower Bound(a, g).
2. agent constrained p (g) 5(c) Set Bounds(a, g), ha, gi E removed
(V 0 , E 0 ) 3 Lower Bound(a, g).
possible combination additions removals edges incident g prior to, Lower
Bound(a, g), material balance maintained g. show similar result g visited
Upper Bound(a, g). Hence established feasibility (V 0 , E 0 ).
show agent A, (a, (V 0 , E 0 ), p) (a, (V , E ), p),
agent a0 (a0 , (V 0 , E 0 ), p) > (a0 , (V , E ), p).
agent visited construction (V 0 , E 0 ), (a, (V 0 , E 0 ), p) = (a, (V , E ), p),
allocation (V , E ).
Consider a0 visited Upper Bound(a0 , g). a0 thus visited, a0 constrained

p (g). Upper Bound(a0 , g) sets prices neighbor goods g 6= g prices used
compute p (g) Set Bounds(a0 , g). prices neighboring goods computed
a0 V , a0 would get negative surplus price g p (g) a0 V \V
would get positive surplus price g p (g). But, alternate prices
computed, p(g) = p (g), assume p (g) > p (g). Since a0 V 0
V , (a0 , (V 0 , E 0 ), p) > (a0 , (V , E ), p).
consider A, 6= a0 , visited construction (V 0 , E 0 ). visited
Upper Bound(a, g), p(g) = p (g) must constrained p (g). C,
Set Bounds(a, g) set p (g) va p (g) = 0. , Upper Bound(a, g) sets
prices goods neighboring prices used compute p (g) Set Bounds(a, g).
neighboring prices active feasible, would get zero surplus
552

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

p(g) = p (p). Thus (a, (V 0 , E 0 ), p) = (a, (V , E ), p). If, hand, visited Lower
Bound, p(g) = p (g) must constrained p (g). similar argument used
Upper Bound, gets zero surplus p(g) = p (g). Again, gives (a, (V 0 , E 0 ), p) =
(a, (V , E ), p).
shown agent A, (a, (V 0 , E 0 ), p) (a, (V , E ), p),
agent a0 (a0 , (V 0 , E 0 ), p) > (a0 , (V , E ), p). value((V 0 , E 0 )) >
value((V , E )), contradiction. Hence, initial assumption p (g) > p (g) must
false. p (g) p (g) goods g.
2

Theorem 2 Competitive equilibria exist polytree.
Proof. show agents optimize according (V , E ) prices p computed procedure Polytree Equilibrium. Since (V , E ) feasible definition, resulting prices
allocation constitute competitive equilibrium (V, E).
construction p (g) ensures never decreases, Step 2 Set Bounds ensures every consumer c C \V optimizes p(gc ) p (gc ). p (gc ) p(c) p (gc )
(by construction p Lemma 21), c optimizes according (V , E ). similar argument, every c C V optimizes according (V , E ).
Consider producer \ V , visited Set Bounds(, g). good g input ,
4(a) Set Bounds(, g) sets price every neighbor good g0 6= g price
bounds used compute p (g) Step 4(b) Set Bounds(, g). Moreover, p (g) set
smallest price could get maximum surplus zero, given specified bounds
neighbor goods. Since p (g) could increase subsequently, since p (g) p(g) p(g)
(by construction p Lemma 21), since price good set
(because (V, E) polytree) cannot get positive surplus prices set Set Bounds(,
g). similar argument, g output , Step 4(c) p (g) set largest price
would get maximum surplus zero, given prices set neighbor goods.
Since again, p (g) p(g) p (g), p (g) increases subsequently, price good
set once, must get zero surplus. Thus optimizes according
(V , E ). Symmetrically, see every V optimizes according (V , E ).
shown agents optimize according (V , E ) p, hence shown
competitive equilibrium exists polytree (V, E). 2

A.3 Proof Theorem 3
Lemma 22 value feasible allocation (V 0 , E 0 ), prices p, expressed as:

value((V 0 , E 0 )) =

(a, (V 0, E 0), p).

aA

553

(1)

fiWALSH & W ELLMAN

Proof. Equation (1) expands to:
value((V 0 , E 0 )) =



vc ((V 0 , E 0 ))

+







p(g)



p(g) ((V , E )) .

hg,ciE 0

cC



p(g)

h,giE 0

!
0

hg,iE 0

0

!

Since goods material balance feasible allocation, price terms cancel out.
left

vc ((V 0, E 0)) ((V 0 , E 0)),


cC

original formula value solution (Definition 1). 2
Theorem 3 (V 0 , E 0 ) --competitive equilibrium (V, E) prices p, (V 0 , E 0 )
feasible allocation nonnegative value differs value efficient allocation
[hg,iE g + ] + |C|b .
Proof. refer four conditions --competitive equilibrium (Definition 4). Let (V , E )
efficient allocation (V, E).
Conditions (3) (4) imply (V 0 , E 0 ) feasible. Recall formula value
feasible allocation Equation (1). Since (V 0 , E 0 ) (V , E ) feasible, express
values
value((V 0 , E 0 )) =

(a, (V 0 , E 0), p),

(2)

(a, (V , E ), p).

(3)

aA

value((V , E )) =

aA

c C, Condition (2), (c, (V 0 , E 0 ), p) Hc (p) b . allocation
better agent optimal allocation, (c, (V , E ), p) Hc (p). Thus,
(c, (V , E ), p) (c, (V 0 , E 0 ), p) b .

(4)

, Condition (3), (, (V 0 , E 0 ), p) H (p) (hg,iE g + ).
allocation better agent optimal allocation, (, (V , E ), p) H (p). Thus,
(, (V , E ), p) (, (V 0 , E 0 ), p)



g + .

(5)

hg,iE

Equations (2)(5) together imply value((V , E )) value((V 0 , E 0 )) [hg,iE +
] + |C|b . Condition (1) implies sum term Equation (2) nonnegative, hence
value((V 0 , E 0 )) 0. noted, (V 0 , E 0 ) feasible.
2
g

554

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

A.4 Proof Theorem 5
proving theorem, refer C-level S-level producers network, defined
beginning Section A.
task dependency network (V, E) characterized following parameters:
: maximum C-level producer network,
: maximum number input goods producer,
R: maximum consumer value, maxhg,ciE|cC vc (g).
Lemma 23 run SAMP-SB network (V, E), agent places buy offer R + 2b .
Proof. Consumers never offer valuation, bounded R. prove induction
producer C-level producer C-level k places buy offer R + 2kb .
Suppose producer C-level one places offer buy input g price > R + 2b .
Since always increments buy offers b , means previous time submitted buy
offer g price R + b < 0 R + 2b . time, must losing g, else would
bidding. ask quote g must greater R, offered greater
R output. Since consumer offer buy output producer C-level
one, must lose output. offers nondecreasing, situation permanent, hence
never raises input offer, contrary supposition. Thus C-level one producer
never place buy offer R + 2b .
inductive step, assume producer C-level i, < k, places buy
offer R + 2ib . Thus, producer C-level k win output offer R +
2(k 1)b . Applying reasoning analogous base case (C-level one), see producer
C-level k places buy offer R + 2kb . k producers, lemma follows
immediately. 2
Lemma 24 agent places (R + 2b )/b + buy offers.
Proof. Since consumers offer R increase offers least b , place offers
R/b times. producer initially places buy offers inputs. According
Lemma 23 producer bidding policy, producer subsequently offers higher R + 2b
increments b maximum inputs. 2
Theorem 5 SAMP-SB reaches quiescence finite number bids placed.
Proof. Lemma 24, finite number buy offers placed. need show producers place finite number sell (output) offers establish finite number total bids
placed.
producer change output offer if: 1) price input changes, 2) ask
price input changes, 2) loses offer good previously winning.
unchanged input offer switch winning losing without price
changing. Similarly, unchanged input offer switch winning state without ask
price changing. Hence, sufficient show price ask price producers
555

fiWALSH & W ELLMAN

input goods change finite number times. prove induction producer S-level
price ask quotes input good producer S-level k changes finite number
times.
producer input places output offer input good g producer S-level
one, producers input place one offer each. Hence, price ask price g
change response change buy offer g. Lemma 24, number buy offer
changes g finite.
assume producers S-levels less k place finite number output offers.
good g input producer S-level k, number output offer changes
finite. number input offers g must finite. Since number input output
offers g finite, places finite number output offers. 2
A.5 Proof Theorem 8
proving theorem, refer C-level producers network, defined beginning
Section A. reference, quasi-quiescence described Definition 5.
Lemma 25 run SAMP-SB quasi-quiescent state time interval [t, 0 ]
inactive producer changes offer input good time interval [t, 0 + ],
smallest period time agent requires update bid response price quote.
Proof. definition quasi-quiescence, interval [t, 0 ], consumer active producer
changes offer. Thus, simple induction C-level inactive producers shows
producer inactive time would win output [t,t 0 ], hence inactive producers
remain inactive interval. producer inactive [t, 0 ] would change
input offer [t, 0 + ]. 2
Lemma 26 run SAMP-SB quasi-quiescent time interval [t, 0 ],
quasi-quiescent time interval [t, 0 + ], smallest period time agent
requires update bid response price quote.
Proof. Assume, contrary wish prove, run SAMP-SB quasi-quiescent
[t, 0 ] time [t 0 ,t 0 + ]. Let consumer active producer change offer
[t 0 , 0 + ].
consumer, would change offer lost offer previously
winning quasi-quiescence. producer, must feasible, otherwise would change
input offer (because active) violating quasi-quiescence. Since feasible, would change
offer loses input previously winning, price one inputs increases.
cases, either loses buy offer previously winning, price one
buy offers increased. one occur, must time 00 [t,t 0 ], agent
either 1) changed winning output offer 2) changed input offer. definition
quasi-quiescence precludes #1, Lemma 25 definition quasi-quiescence preclude #2.
gives us contradiction, proving lemma. 2
Lemma 27 run SAMP-SB quasi-quiescent state time t, quasi-quiescent
times 0 > t.
556

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Proof. Lemma 26 conclude quasi-quiescence interval [t, + ],
extend interval , indefinitely. 2
Lemma 28 run SAMP-SB quasi-quiescent time t, producer inactive
time inactive time + , producer active time inactive time + ,
smallest period time agent requires update bid response price quote.
Furthermore, p(g) change good g time +
Proof. Since agent cannot lower offers, way inactive producer become
active agent raise buy offer. Lemma 27 definition quasiquiescence, inactive producers change offers t, Lemma 25 inactive
producer change input offers. remains inactive.
Since offers decrease, active producer become inactive increasing
offer output. prices inputs increase. Since
quasi-quiescent state, happen inactive producer 0 changes offer output
g. since 0 inactive, change offer g cause (g) change. Since active
producers feasible (otherwise would want change bids, violating quasi-quiescence),
losing buy offer g time t. Therefore, respond changes (g), hence
change output offer remain active. 2
Theorem 8 run SAMP-SB reaches quasi-quiescent state, remains quasiquiescent state. Furthermore, neither allocation prices p subsequently change.
Proof. theorem follows directly Lemmas 27 28. 2
A.6 Proof Theorem 10
proving theorem, refer C-level producers network, defined beginning
Section A.
given run SAMP-SB network (V, E) characterized following parameters:
: maximum C-level producer network,
: maximum number input goods producer,
R: maximum consumer value, maxhg,ciE|cC vc (g).
Theorem 10 SAMP-SB reaches quasi-quiescent state number bids bounded polynomial size network value maximum consumer value placed
consumers active producers.
Proof. SAMP-SB guaranteed reach quasi-quiescent state (Theorem 5 Observation 7).
Lemma 24, number buy offers bounded polynomial value R, hence
need concerned number sell offers placed. Since prices buy offers increase
least b , producers perceived cost good must rise least b , increase
557

fiWALSH & W ELLMAN

sell offer less b . Also, producer increase sell offer less , required auction. Hence, Lemma 23 implies active producer become permanently
inactive places (R + 2b )/[max(b , )] output offers. 2
A.7 Proof Theorem 11
proving theorem, refer conditions --competitive equilibrium (Definition 4).
Lemma 29 SAMP-SB reaches quiescence network (V, E) consumer obeys
--competitive equilibrium conditions (Conditions (1) (2)).
Proof. Since consumer maintains single winning offer good gives nonnegative surplus, obeys Condition (1).
Let final prices allocation p (V 0 , E 0 ), respectively. Assume, contrary Condition (2), (c, (V 0 , E 0 ), p) < Hc (p) b consumer c. Let g surplus-maximizing
good c p.
c buy good, p(g ) + b < vc (g ) (otherwise would placed
offer g ) (c, (V 0 , E 0 ), p) = 0. Noting Hc (p) = vc (g ) p(g ), algebraic manipulation gives us (c, (V 0 , E 0 ), p) > Hc (p) b , contradiction.
Thus, c buys one good g0
vc (g0 ) p(g0 ) < vc (g ) p(g ) b .

(6)

Let p(g ) p(g0 ) prices g g0 c placed final offer g0 . Since c offers
p(g0 ) + b g0 , since c offer p(g0 ),
p(g0 ) + b p(g0 ).

(7)

p(g ) p(g ).

(8)

Since prices decrease,

Substituting Equations (7) (8) left right sides, respectively, Equation (6) gives us
vc (g0 ) ( p(g0 ) + b ) < vc (g ) ( p(g ) + b ).
consumer bidding policy specifies c would bid g , rather g0 prices p,
contradiction. Thus consumer obeys Condition (2). 2
Lemma 30 SAMP-SB reaches quiescence network (V, E) inactive producer buys
positive-price input, producer obeys --competitive equilibrium conditions (Cong
ditions (1) (3)), = max((g) p(g), b ).
Proof. bidding policy ensures producer sells output g nonnegative
surplus, lemma conditions directly imply zero surplus sell . Thus
obeys Condition (1).
producer bidding policy guarantees feasible quiescence.
558

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Let final prices p allocation (V 0 , E 0 ). H (p) > hg,iE + quiescence,
H (p) = p(g ) hg,iE p(g) > hg,iE g + . Thus p(g ) > hg,iE p(g) + hg,iE g +
. producer bidding policy ensures offers hg,iE p(g) + hg,iE g +
g , must winning g profit. Thus (, (V 0 , E 0 ), p) = H (p) Condition (3) holds.
instead H (p) hg,iE g + , since (, (V 0 , E 0 ), p) 0, Condition (3) holds. 2
g

Theorem 11 prices allocation determined quiescence SAMP-SB protocol
--competitive equilibrium, g = max((g) p(g), b ), iff inactive producer buys
positive-price input.
Proof. Case if: Condition (1) --competitive equilibrium (Definition 4) fails inactive producer buys positive-price input.
Case if: Lemmas 29 30 show consumers producers, respectively, obey -competitive equilibrium conditions (Conditions (1)(3)). (M+1)st-price auction rules ensure
Condition (4). conditions --competitive equilibrium met. 2
A.8 Proof Theorem 12
proving theorem, refer conditions --competitive equilibrium (Definition 4).
Lemma 31 (g) p(g) > b good g quiescent state SAMP-SB network (V, E),
agent wins offer g.
Proof. Assume, contrary wish prove, (g) p(g) > b agent
winning offer g, quiescence SAMP-SB. Either buy offer sell offer sets (g).
Case 1: agent sets (g) buy offer. According SAMP-SB bidding policies,
agent increase buy offer losing offer. agent win offer g
price p(g). producer increases buy offer increments b consumer offers
p(g) + b . either case, agent place buy offer higher p(g) + b g.
(g) p(g) + b , contradiction.
Case 2: agent sets (g) sell offer. Case 1, buy offers higher
p(g) + b , hence every buy offer strictly (g). Recall that, sell offers,
Mth highest offer determines (g). since buy offers (g), must
sell offers (g). sell offers strictly buy offers
agent wins offer g, contradiction.
Since case gives us contradiction, must case agent wins offer g
(g) p(g) > b . 2
Lemma 32 (V 0 , E 0 ) --competitive equilibrium prices p, quiescence SAMP-SB
network (V, E), exist prices p0 (V 0 , E 0 ) --competitive equilibrium
p0 , g = b producers goods g.
Proof. specify p0 follows: (g) > p(g) + b , p0 (g) = (g), otherwise p0 (g) = p(g).
show conditions --competitive equilibrium hold g = b .
considering allocation, goods still material balance Condition 4 still holds
p0 .
559

fiWALSH & W ELLMAN

Consider agent p0 (g) = p(g) adjacent goods g. Clearly, Ha (p0 ) = Ha (p)
(a, (V 0 , E 0 ), p0 ) = (a, (V 0 , E 0 ), p). (a, (V 0 , E 0 ), p0 ) 0 (Condition 1),
surplus bound met consumers (Condition 2) since hold p. producer,
input g, (g) p(g) b since p0 (g) = p(g). Hence, following bound
perceived cost g: pa (g) p(g) + b . result, producer bidding policies imply
(a, (V 0 , E 0 ), p) H (p) (hg,iE b + ). Therefore (a, (V 0 , E 0 ), p0 ) H (p0 ) (hg,aiE ga +
0

) producer surplus bound (Condition 3) holds ga inputs g0 .
consider agent adjacent good g p0 (g) = (g). Lemma 31, win
offer g, (a, (V 0 , E 0 ), p0 ) = (a, (V 0 , E 0 ), p), implying (a, (V 0 , E 0 ), p0 ) 0 (Condition 1).
consumer, since p0 (g) p(g), since win g, Ha (p0 ) = Ha (p),
surplus bound met consumers (Condition 2).
producer, since win g, must good (according
--competitive equilibrium conditions Theorem 11), implying (a, (V 0 , E 0 ), p0 ) = 0.
producer bidding policy specifies offered price = + hg0 ,aiE max((g0 ), p(g0 )+
b ) + output ga . Since win ga , must (ga ) . way
p0 constructed, p0 (ga ) (ga ) p0 (g0 ) + b max((g0 ), p(g0 ) + b ), giving us p0 (ga )
(ga ) + hg0 ,aiE (p0 (g0 ) + b ) + . would optimize p0 active,
Ha (p0 ) = p0 (ga ) hg0 ,aiE p0 (g0 ) hg0 ,aiE b + . since (a, (V 0 , E 0 ), p0 ) = 0 follows
(a, (V 0 , E 0 ), p0 ) Ha (p0 ) (hg0 ,aiE b + ). If, hand, would optimize p0
inactive at, (a, (V 0 , E 0 ), p0 ) = Ha (p0 ). either case, surplus bound met producers
0
(Condition 3) ga = b inputs g0 . 2
Theorem 12 (V 0 , E 0 ) --competitive equilibrium computed SAMP-SB (V 0 , E 0 )
nonnegative value differs value efficient allocation (|{hg,
E}| b + ) + |C|b .
Proof. Lemma 32, --competitive equilibrium (V 0 , E 0 ) = b prog
ducers goods g. b substituted equation Theorem 3, proved
present theorem. 2
g

A.9 Proof Theorem 13
proving theorem, refer S-level producers network, defined beginning
Section A.
Theorem 13 quiescent state SAMP-SB --competitive equilibrium tree.
Proof. prove, induction S-level producers, producer changes initial
output offer. Since buy offers never decrease, follows that, producer winning output,
lose output successive state run protocol. Since producer bids
inputs winning output, inactive producer buy positive-price output
present theorem follows Theorem 11.
Basis case: bidding policy specifies producer S-level zero never changes initial
output offer.
560

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Inductive case: Assume producer S-level less k changes initial output offer
show producer S-level k never changes initial output offer. Consider input good g
sell offers lowest sell offer . Since network tree, agent places
buy offers g. Producer initially offers zero g, long offers less loses
offer, p (g) = (g). holds, (g), defined Mth highest price, lowest
sell offer, hence p (g) = . soon offers greater g win offer,
p (g) = p(g). holds, p(g), defined + 1st highest price, lowest sell offer,
hence p (g) = . conclude p (g) never changes input g, hence never changes
initial output offer.
proven producer changes initial output offer, argument above,
theorem proven. 2
A.10 Proof Theorem 14
Theorem 14 quiescent state safe SAMP-SB --competitive equilibrium network
input complementarities.
Proof. show inactive producer buys input positive price quiescence
safe SAMP-SB. Since properties safe SAMP-SB quiescence SAMP-SB,
present theorem follows Theorem 11. Assume, contrary, that, quiescence,
producer wins input g positive price loses offer output g .
Let price final offer g, p(g) > 0 final price g, p (g)
final perceived cost g . Since wins g quiescence, p (g) = p(g). Let 0 price
second last offer . Immediately places offer , let p0 (g) perceived price
g p0 (g) price component price quote g. According bidding
policy, = 0 + b . Since offers loses g offer 0 , must 0 p0 (g), hence
p0 (g) + b . Furthermore, since loses offer 0 , p0 (g) p0 (g) + b .
assume wins g quiescence, must p(g) , hence p(g) p0 (g) + b . follows
that, since p (g) = p(g) p0 (g) p0 (g) + b , p (g) p0 (g).
According safe SAMP-SB bidding policies, offers g first winning g
offer price p0 (g). Since p (g) p0 (g), offer g quiescence
placed g. since offers agent decrease, must continue win final offer
g , contradicting assumption loses g quiescence. Thus, win input
positive price inactive, quiescent state safe SAMP-SB --competitive
equilibrium. 2
A.11 Proof Theorem 15
proving theorem, refer C-level S-level producers network, defined
beginning Section A.
Theorem 15 (V, E) polytree solution assigns good g consumer c, given
costs values, exists value vc (g) SAMP-SB guaranteed converge
valid solution (V 0 , E 0 ) c.

561

fiWALSH & W ELLMAN


Proof. convenience, denote max V 0 , maxc0 C, hg0 ,c0 i6=hg,ci vc0 (g0 ) . show
theorem holds for:
vc (g) = [ + (2b + )||] || + b .
need show SAMP-SB cannot reach state p(g) > vc (g)b c winning
g, c would stop bidding g desired solution would form.
First, observe consumer c0 good g0 hg0 , ai =
6 hg, ci, c0 offer
0
g , construction.
Now, consider producer directed path g output
. show, induction C-level producers, producer offers higher
+ b , C-level , one inputs. basis case, producer
C-level one cannot win output offer (by definition ). increases input offers
increments b , offer 0 > + b , input g0 , must first offer , < + b
input. offer 0 losing winning output offer. losing
, must p(g0 ) , must offering output. cannot
winning output, hence would offer 0 g. Thus C-level one offer
+ b input, establishing base case. Now, assume property holds every
producer C-level less k show holds producer C-level k. Given inductive
assumption, must cannot win output + b (k 1). argument
similar basis case, offer + b k input, proving inductive case.
Since ||, producer offers higher + b || input.
producer V 0 , denote maximum number producers, ,
subgraph (V, E), rooted . show induction S-level, producer
directed path g offers [ + b (|| + ) + (d 1)]I + output,
S-level . basis case, consider producer S-level one, offering buy
g0 . consumer offers g0 . (V, E) polytree, producer 0
offers buy g0 directed path g, hence offers + b || buy g0 .
producer offers sell g0 must inputs, hence offers g0 . Hence 0
successfully buy g0 offer higher + b (|| + 1), thus offer higher
amount g0 . Since number inputs equal , offer
( + b (|| + 1))I + output, basis case proven. Now, assume property
holds every producer S-level less k prove holds producer offering
buy g0 S-level k. inductive assumption, producer offers sell g0
( + b (|| + k 1) + (k 2))I + . basis case, consumer offers
g0 producer offer + b || buy g0 . Hence, offer
( + b (|| + k 1) + (k 2))I + + b buy g0 , output offer
"



h,g0 ipE | hg0 ,iE

#

( + b (|| + k 1) + (k 2))I + + b +
[ + b (|| + k) + s(k 1)]I + ,

proving inductive case. Since || ||, producer offers higher
[ + 2b || + (|| 1)]|| + [ + (2b + )||] || = vc (g) b .
shown agent 6= c places buy offer high vc (g) b g producer
directed path g places sell offer high vc (g) b g. Hence c agent
562

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

could possibly offer high vc (g) b g. c offer high, necessary, win g,
win g offers vc (g) b higher. follows c win g price vc (g)
quiescence. Observation 7 Theorem 16, state must valid solution. 2
A.12 Proof Theorem 16
Theorem 16 SAMP-SB reaches quasi-quiescence p(g) < vc (g) hg, ci E, c C,
systems state represents valid solution.
Proof. definition quasi-quiescence requires active producers change
bids, must feasible. agents feasible definition. price active
producers output good must less total price input goods, otherwise would
increase output offer, violating quasi-quiescence.
p(g) < vc (g), consumer c must offer g. consumer bids way
wins one unit one good, consumers change bids quasi-quiescence.
Finally, auction guarantees one-to-one mapping successful buy offers
successful sell offers good, ensuring material balance.
Thus, constraints valid solution satisfied. 2
A.13 Proof Theorem 17
Theorem 17 run SAMP-SB (V, E) valid solution state that:
consumer c either winning offer p(g) + b > vc (g) hg, ci E,
agents correct beliefs goods currently winning,
bids consumers active producers received response current
price quotes,
sell offers lost due tie breaking,
subsequent price quote auction, system quasi-quiescent
state valid solution.
Proof. Let current prices p. consumer bidding policy dictates consumers
change offers specified conditions. valid solution, producer feasible thus raise buy offers inputs. Therefore, agent changes
buy offers.
active producer feasible valid solution. Since winning inputs,
raises offer output g p(g) changes inputs g, place offer
output price higher sum input good prices. definition valid solution,
active, current price output good less sum current prices
inputs. since offer g , must offered higher p(g ) g .
previous offer price g higher p(g ), sum current
prices inputs higher p(g), offer higher p(g ) g .
563

fiWALSH & W ELLMAN

established agent changes buy offers, currently active producer
places sell offer p(g) good g. show implies that, next price quotes
prices p0 , p0 (g) = p(g). Assume contrary. Since offers decrease, p0 (g) > p(g).
Since buy offer winning sell offer changed, price increase due updated losing
sell offer price , = p0 (g). agent losing previous offer price
0 , must 0 least high (M + 1)st highest offer. Thus , higher,
must strictly higher (M + 1)st highest offer, hence cannot raise price g. Hence
p0 (g) = p(g).
Since prices change, temporal-precedence tie breaking ensures set winning
buy offers change. Additionally, since winning seller offers p(g) sell
offers currently lost tie breaking, set winning sell offers change. Since prices
allocations change, consumer active producer change bids. Furthermore,
system valid solution state based current price quotes, must valid
solution state based next price quotes. 2
note temporal-precedence tie-breaking (without requirement tied sell
offers lost) sufficient ensure allocation sellers change. tied
sell offers lost, possible active producer could increase next sell offer price
price output good. occurs, producer would lose tie breaking
output next quote, system would quasi-quiescence.

References
Andersson, A., Tenhunen, M., & Ygge, F. (2000). Integer programming combinatorial auction
winner determination. Fourth International Conference Multi-Agent Systems, pp. 39
46.
Andersson, M. R., & Sandholm, T. W. (1998). Leveled commitment contracting among myopic
individually rational agents. Third International Conference Multi-Agent Systems, pp.
2633.
Ausubel, L. M., & Milgrom, P. R. (2002). Ascending auctions package bidding. Frontiers
Theoretical Economics, 1(1).
Axelrod, R. (1987). evolution strategies iterated prisoners dilemma. Davis, L.
(Ed.), Genetic Algorithms Simulated Annealing, chap. 3, pp. 3241. Morgan Kaufmann.
Babaioff, M., & Nisan, N. (2001). Concurrent auctions across supply chain. Third ACM
Conference Electronic Commerce, pp. 110.
Babaioff, M., & Walsh, W. E. (2003). Incentive-compatible, budget-balanced, yet highly efficient
auctions supply chain formation. Fourth ACM Conference Electronic Commerce,
pp. 6475.
Baker, A. D. (1996). Metaphor reality: case study agents bid actual costs
schedule factory. Clearwater (Clearwater, 1996).
Bichler, M. (2001). Future e-Markets: Multidimensional Market Mechanisms. Cambridge
University Press.
Bikhchandani, S., & Mamer, J. W. (1997). Competitive equilibrium exchange economy
indivisibilities. Journal Economic Theory, 74, 385413.
564

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Bikhchandani, S., & Ostroy, J. M. (2002). package assignment model. Journal Economic
Theory, 107, 377406.
Borenstein, S., & Saloner, G. (2001). Economics electronic commerce. Journal Economic
Perspectives, 15(1), 312.
Clarke, E. H. (1971). Multipart pricing public goods. Public Choice, 11, 1733.
Clearwater, S. (Ed.). (1996). Market-Based Control: Paradigm Distributed Resource Allocation. World Scientific.
Davidow, W. H. (1992). Virtual Corporation: Structuring Revitalizing Corporation
21st Century. HarperCollins Publishers.
Davis, R., & Smith, R. G. (1983). Negotiation metaphor distributed problem solving.
Artificial Intelligence, 20, 63109.
Dellarocas, C., Klein, M., & Rodriguez-Aguilar, J. A. (2000). exception-handling architecture
open electronic marketplaces Contract Net software agents. Second ACM Conference
Electronic Commerce, pp. 225232.
Demange, G., & Gale, D. (1985). strategy structure two-sided matching markets. Econometrica, 53(4), 873888.
Demange, G., Gale, D., & Sotomayor, M. (1986). Multi-item auctions. Journal Political Economy, 94(4), 863872.
Fagin, R., Halpern, J. Y., Moses, Y., & Vardi, M. Y. (1995). Reasoning Knowledge. MIT
Press.
Friedman, D., & Rust, J. (Eds.). (1993). Double Auction Market: Institutions, Theories,
Evidence. Addison-Wesley.
Fudenberg, D., & Tirole, J. (1998). Game Theory. MIT Press.
Greenwald, A. (2003). 2002 trading agent competition: overview agent strategies. AI
Magazine, 24(1), 7782.
Groves, T. (1973). Incentives teams. Econometrica, 41(4), 617631.
Gul, F., & Stacchetti, E. (2000). English double auctions differentiated commodities.
Journal Economic Theory, 92, 6695.
Gul, F., & Stacchetti, E. (1999). Walrasian equilibrium gross substitutes. Journal Economic
Theory, 87, 95124.
Hunsberger, L., & Grosz, B. J. (2000). combinatorial auction collaborative planning.
Fourth International Conference MultiAgent Systems, pp. 151158.
Joshi, P., Oke, M., Sharma, V., & Veeramani, D. (1999). Issues dynamic highly-distributed
configuration supply webs. First IAC Workshop Internet-Based Negotiation Technologies.
Kelso, A. S., & Crawford, V. P. (1982). Job matching, coalition formation, gross substitutes.
Econometrica, 50(6), 14831504.
Kjenstad, D. (1998). Coordinated Supply Chain Scheduling. Ph.D. thesis, Norwegian University
Science Technology.
565

fiWALSH & W ELLMAN

Klemperer, P. (1999). Auction theory: guide literature. Journal Economic Surveys, 13(3),
227286.
Leyton-Brown, K., Pearson, M., & Shoham, Y. (2000). Towards universal test suite combinatorial auction algorithrms. Second ACM Conference Electronic Commerce, pp. 6676.
Lucking-Reily, D., & Spulber, D. F. (2001). Business-to-business electronic commerce. Journal
Economic Perspectives, 15(1), 5568.
MacKie-Mason, J. K., & Varian, H. R. (1994). Generalized Vickrey auctions. Tech. rep., Dept.
Economics, Univ. Michigan.
Malone, T. W., & Laubacher, R. J. (1998). dawn e-lance economy. Harvard Business
Review, 145152.
Mas-Colell, A., Whinston, M. D., & Green, J. R. (1995). Microeconomic Theory. Oxford University
Press, New York.
McAfee, R. P. (1992). dominant strategy double auction. Journal Economic Theory, 56,
434450.
McAfee, R. P., & McMillan, J. (1987). Auctions bidding. Journal Economic Literature, 25,
699738.
Milgrom, P. (2000). Putting auction theory work: simultaneous ascending auction.
Journal Political Economy, 108(2), 245272.
Myerson, R. B., & Satterthwaite, M. A. (1983). Efficient mechanisms bilateral trading. Journal
Economic Theory, 29, 265281.
Parkes, D. C., Kalagnanam, J., & Eso, M. (2001). Achieving budget-balance Vickrey-based
payment schemes exchanges. Seventeenth International Joint Conference Artificial
Intelligence, pp. 11611168.
Parkes, D. C., & Ungar, L. H. (2000). Iterative combinatorial auctions: Theory practice.
Seventeenth National Conference Artificial Intelligence, pp. 7481.
Parkes, D. C., & Ungar, L. H. (2002). ascending-price generalized Vickrey auction. Stanford
Institute Theoretical Economics Summer Workshop Economics Internet.
Rosenschein, J. S., & Zlotkin, G. (1994). Rules Encounter. MIT Press.
Rust, J., Miller, J. H., & Palmer, R. (1994). Characterizing effective trading strategies: Insights
computerized double auction tournament. Journal Economic Dynamics Control, 18,
6196.
Sandholm, T., & Suri, S. (2000). Improved algorithms optimal winner determination combinatorial auctions generalizations. Seventeenth National Conference Artificial
Intelligence, pp. 9097.
Sandholm, T. W. (1993). implementation CONTRACT NET protocol based marginal
cost calculations. Eleventh National Conference Artificial Intelligence, pp. 256262.
Satterthwaite, M. A., & Williams, S. R. (1989). Bilateral trade sealed bid k-double auction:
Existence efficiency. Journal Economic Theory, 48, 107133.
Satterthwaite, M. A., & Williams, S. R. (1993). Bayesian theory k-double auction.
Friedman, & Rust (Friedman & Rust, 1993), chap. 4, pp. 99123.
566

fiD ECENTRALIZED UPPLY C HAIN F ORMATION

Shapiro, C., & Varian, H. R. (1999). Information Rules. Harvard Business School Press.
Stone, P., & Greenwald, A. (2000). first international trading agent competition: Autonomous
bidding agents. Journal Electronic Commerce Research, appear.
Veeramani, D., Joshi, P., & Sharma, V. (1999). Critical research issues agent-based manufacturing
supply webs. Agents-99 Workshop Agents Electronic Commerce Managing
Internet-Enabled Supply Chain.
Vickrey, W. (1961). Counterspeculation, auctions, competitive sealed tenders. Journal Finance, 16, 837.
Walsh, W. E. (2001). Market Protocols Decentralized Supply Chain Formation. Ph.D. thesis,
University Michigan.
Walsh, W. E., & Wellman, M. P. (1999). Efficiency equilibrium task allocation economies
hierarchical dependencies. Sixteenth International Joint Conference Artificial Intelligence, pp. 520526.
Walsh, W. E., Wellman, M. P., & Ygge, F. (2000). Combinatorial auctions supply chain formation. Second ACM Conference Electronic Commerce, pp. 260269.
Walsh, W. E., Yokoo, M., Hirayama, K., & Wellman, M. P. (2003). market-inspired approaches
propositional satisfiability. Artificial Intelligence, 144, 125156.
Wellman, M. P., Greenwald, A., Stone, P., & Wurman, P. R. (2003). 2001 trading agent competition. Electronic Markets, 13(1), 412.
Wellman, M. P., & Walsh, W. E. (2000). Distributed quiescence detection multiagent negotiation.
Fourth International Conference Multi-Agent Systems, pp. 317324.
Wellman, M. P., Walsh, W. E., Wurman, P. R., & MacKie-Mason, J. K. (2001a). Auction protocols
decentralized scheduling. Games Economic Behavior, 35(1/2), 271303.
Wellman, M. P., Wurman, P. R., OMalley, K., Bangera, R., Lin, S.-d., Reeves, D., & Walsh, W. E.
(2001b). Designing market game trading agent competition. IEEE Internet Computing, 5(2), 4351.
Wurman, P. R., Walsh, W. E., & Wellman, M. P. (1998). Flexible double auctions electronic
commerce: Theory implementation. Decision Support Systems, 24, 1727.
Wurman, P. R., & Wellman, M. P. (2000). AkBA: progressive, anonymous-price combinatorial
auction. Second ACM Conference Electronic Commerce, pp. 2129.
Wurman, P. R., Wellman, M. P., & Walsh, W. E. (2001). parametrization auction design
space. Games Economic Behavior, 35(1/2), 304338.
Ygge, F. (1998). Market-Oriented Programming Application Power Load Management.
Ph.D. thesis, Lund University.

567


