journal artificial intelligence

submitted published

specific general learning temporal events
application learning event definitions video
alan fern
robert givan
jeffrey mark siskind

afern purdue edu
givan purdue edu
qobi purdue edu

school electrical computer engineering
purdue university west lafayette usa

abstract
develop analyze evaluate novel supervised specific general learner simple temporal logic use resulting learn visual event definitions video
sequences first introduce simple propositional temporal event description language called
ama sufficiently expressive represent many events yet sufficiently restrictive support
learning give along lower upper complexity bounds subsumption generalization ama formulas present positive examplesonly
specific general learning method present polynomialtimecomputable syntactic subsumption test implies semantic subsumption without
equivalent generalization syntactic subsumption used place
semantic generalization improve asymptotic complexity resulting learning
finally apply task learning relational event definitions video
yields definitions competitive hand coded ones

introduction
humans conceptualize world terms objects events reflected fact
talk world nouns verbs perceive events taking place objects
interact world performing events objects reason effects
actual hypothetical events performed us others objects learn
object event types novel experience present evaluate novel implemented techniques allow computer learn event types examples
application techniques learning event types automatically constructed
relational force dynamic descriptions video sequences
wish acquired knowledge event types support multiple modalities humans
observe someone faxing letter first time quickly able recognize future occurrences
faxing perform faxing reason faxing thus appears likely humans use
learn event representations sufficiently general support fast efficient use multiple
modalities long term goal allow similar cross modal learning use
event representations intend learned representations used vision described
something beginning investigate robotics something
left future
crucial requirement event representations capture invariants event
type humans classify picking cup table picking dumbbell floor
picking suggests human event representations relational abstract

c ai access foundation morgan kaufmann publishers rights reserved

fif ern g ivan iskind

relational notion picking parameterized participant objects rather distinct
propositional notions instantiated specific objects humans classify event picking
matter whether hand moving slowly quickly horizontally vertically leftward
rightward along straight path circuitous one appears characteristics
participant object motion distinguish picking event types rather fact
object picked changes supported resting initial location
supported grasped agent suggests primitive relations used
build event representations force dynamic talmy
another desirable property event representations perspicuous humans
introspect describe defining characteristics event types introspection allows us create dictionaries support introspection prefer representation language
allows characteristics explicitly manifest event definitions emergent consequences distributed parameters neural networks hidden markov
develop supervised learner event representation possessing desired characteristics follows first present simple propositional temporal logic called ama
sublanguage variety familiar temporal languages e g linear temporal logic ltl bacchus kabanza event logic siskind logic expressive enough describe
variety interesting temporal events restrictive enough support effective learner
demonstrate proceed develop specific general learner ama logic giving complexity bounds subsumption generalization involving
ama formulas semantic subsumption intractable provide weaker syntactic notion subsumption implies semantic subsumption checked polynomial
time implemented learner upon syntactic subsumption
next means adapt propositional ama learner learn relational concepts
evaluate resulting relational learner complete system learning force dynamic event
definitions positive training examples given real video sequences first
system perform visual event recognition video review prior work compare
current work later fact two prior systems built one
authors h oward siskind morris learns classify events video temporal
relational representations representations force dynamic l eonard siskind
classifies events video temporal relational force dynamic representations
learn representations uses library hand code representations work adds
learning component l eonard essentially duplicating performance hand coded
definitions automatically
demonstrated utility learner visual eventlearning domain
note many domains interesting concepts take form structured temporal sequences events machine macro actions represent useful temporal patterns
action computer security typical application behavior represented perhaps temporal patterns system calls must differentiated compromised application behavior likewise
authorized user behavior intrusive behavior
follows section introduces application domain recognizing visual events
provides informal description system learning event definitions video section
introduces ama language syntax semantics several concepts needed analysis
language section develops analyzes subsumption generalization
language introduces practical notion syntactic subsumption sec

fil earning emporal e vents

tion extends basic propositional learner handle relational data negation control
exponential run time growth section presents visual event learning sections
compare related work conclude

system overview
section provides overview system learning recognize visual events video
aim provide intuitive picture system providing technical details formal
presentation event description language theoretical empirical appears sections first introduce application domain visual event recognition
l eonard system event recognizer upon learner built second describe
positive learner fits overall system third informally introduce ama
event description language used learner finally give informal presentation
learning
recognizing visual events
l eonard siskind system recognizing visual events video camera input
example simple visual event hand picking block originally
motivated adding learning component l eonardallowing l eonard
learn recognize event viewing example events type give high level
description l eonard system
l eonard three stage pipeline depicted figure raw input consists video frame
image sequence depicting events first segmentation tracking component transforms
input polygon movie sequence frames frame set convex polygons placed
around tracked objects video figure shows partial video sequence pick event
overlaid corresponding polygon movie next model reconstruction component
transforms polygon movie force dynamic model model describes changing
support contact attachment relations tracked objects time constructing
model somewhat involved process described siskind figure b shows
visual depiction force dynamic model corresponding pick event finally eventrecognition component armed library event definitions determines events occurred
model accordingly video figure c shows text output input
event recognizer pick event first line corresponds output indicates
interval pick occurred remaining lines text encoding
event recognizer input model reconstruction output indicating time intervals
force dynamic relations true video
event recognition component l eonard represents event types event logic formulas following simplified example representing x picking z



p ick u p x z upports z c ontacts z upports x attached x

formula asserts event x picking z defined sequence two states
z supports way contact first state x supports way attachment
second state upports c ontacts attached primitive force dynamic relations
formula specific example general class ama formulas use
learning


fif ern g ivan iskind

image
sequence

segmentation
tracking

polygonscene
sequence

model
reconstruction

training

event
labels

model
sequence

event
learner

event
classification

event
labels

learned event
definitions

figure upper boxes represent three primary components l eonards pipeline
lower box depicts event learning component described input
learning component consists training target events e g movies pick
events along event labels e g p ick u p hand red green output
event definition e g temporal logic formula defining p ick u p x z
adding learning component
prior work reported definitions l eonard event recognition library
hand coded add learning component l eonard learn recognize
events figure shows event learner fits overall system input event
learner consists force dynamic model reconstruction stage along event
labels output consists event definitions used event recognizer take
supervised learning force dynamic model reconstruction process applied
training videos target event type resulting force dynamic along labels
indicating target event type given learner induces candidate definition
event type
example input learner might consist two corresponding two videos
one hand picking red block green block label p ick u p hand red green
one hand picking green block red block label p ick u p hand green red
output would candidate definition p ick u p x z applicable previously unseen
pick events note learning component positive sense learning
target event type uses positive training examples target event occurs
use negative examples target event occur positive setting
interest appears humans able learn many event definitions given primarily
positive examples practical standpoint positive learner removes often difficult
task collecting negative examples representative event learned
e g typical non pickup event
construction learner involves two primary design choices first must choose
event representation language serve learners hypothesis space e space event definitions may output second must design selecting good event definition
hypothesis space given set training examples event type
ama hypothesis space
full event logic supported l eonard quite expressive allowing specification
wide variety temporal patterns formulas help support successful learning use


fil earning emporal e vents



frame

frame

frame

frame

frame

frame

frame

frame

frame

frame

frame

frame

b

pick hand red green

c

supported red
supported hand
supports red hand
supports hand red
supports green red
supports green hand
contacts red green
attached red hand
attached red green

figure l eonard recognizes pick event frames raw video input automatically generated polygon movie overlaid b frames visual depiction
automatically generated force dynamic properties c text input output
event classifier corresponding depicted movie top line output
remaining lines make input encodes changing force dynamic properties
green represents block table red represents block picked



fif ern g ivan iskind

restrictive subset event logic called ama learners hypothesis space subset excludes
many practically useless formulas may confuse learner still retaining substantial
expressiveness thus allowing us represent learn many useful event types restriction
ama formulas form syntactic learning bias
basic ama formulas called states express constant properties time intervals arbitrary duration example upports z c ontacts z state tells us
z must support contact general state conjunction number
primitive propositions case force dynamic relations ama describe
sequences states example upports z c ontacts z upports x
attached x sequence two states first state given second
state indicating x must support attached formula true whenever first
state true time interval followed immediately second state true
time interval meeting first time interval sequences called timelines since
meets ands general timelines contain number states finally
conjoin timelines get ama formulas ands mas example ama formula

upports z c ontacts z upports x attached x
upports u v attached u v upports w v c ontacts w v
defines event two timelines must true simultaneously time interval
ama formulas represent events listing property sequences timelines
must occur parallel event unfolds important note however
transitions states different timelines ama formula occur relation one
another example ama formula transition two states first
timeline occur exactly transition states second timeline
important assumption leveraged learner primitive propositions used construct states describe liquid properties shoham purposes say property
liquid holds time interval holds subintervals force dynamic
properties produced l eonard liquide g hand upports block interval
clearly hand supports block subintervals primitive propositions
liquid properties described states conjunctions primitives liquid however properties described ama formulas general liquid
specific general learning positive data
recall examples wish classify learn force dynamic
thought derived movies depicting temporal events recall
learner outputs definitions ama hypothesis space given ama formula say
covers example model true model particular target event type
p ick u p ultimate goal learner output ama formula covers example
model model depicts instance target event type understand
learner useful define generality relationship ama formulas say ama
formula general less specific ama formula covers every
example covers possibly
formal analysis use two different notions generality semantic syntactic section
ignore distinctions note however informally describe later section
syntactic notion generality



fil earning emporal e vents

learning goal ama formula consistent set positiveonly training data one trivial solution returning formula covers
examples rather fix adding negative training examples rule
trivial solution instead change learning goal finding least general
formula covers positive examples learning pursued
variety different languages within machine learning literature including clausal first order
logic plotkin definite clauses muggleton feng description logic cohen
hirsh important choose appropriate hypothesis space bias learning
hypothesis returned may simply resemble one two extremes
disjunction training examples universal hypothesis covers examples
experiments found enough training data least general ama formula often
converges usefully
take standard specific general machine learning finding least general
ama formula covers set positive examples relies computation two
functions least general covering formula lgcf example model least general
generalization lgg set ama formulas lgcf example model least general
ama formula covers example intuitively lgcf ama formula captures
information model lgg set ama formulas least general ama
formula general formula set intuitively lgg formula set
ama formula captures largest amount common information among formulas
viewed differently lgg formula set covers examples covered formulas
covers examples possible remaining ama
resulting specific general learning proceeds follows first use lgcf
function transform positive training model ama formula second return lgg
resulting formulas represents least general ama formula covers
positive training examples thus specify learner remains provide computing lgcf lgg ama language informally describe
computing functions formally derived analyzed sections
computing ama lgcf
increase readability presentation follows dispense presenting examples primitive properties meaningfully named force dynamic relations rather
examples utilize abstract propositions b current application propositions correspond exclusively force dynamic properties may applications
demonstrate system computes lgcf example model
consider following example model fa b c g
take number represent time interval arbitrary possibly varying
number duration nothing changes fact p j indicates proposition p continuously true throughout time intervals numbered j model
depicted graphically shown figure top four lines figure indicate time
avoids need negative examples corresponds finding specific boundary version space
mitchell
existence uniqueness lgcf lgg defined formal property hypothesis space
proven ama sections respectively



fif ern g ivan iskind















b

b





b

b
c










b b b b c

figure lgcf computation top four horizontal lines figure indicate intervals propositions b c true model given
fa b c g bottom line shows model
divided intervals transitions occur lgcf timeline
shown bottom figure state transition intervals
state simply contains true propositions within corresponding interval
intervals propositions b c true model bottom line
figure shows model divided five time intervals propositions
change truth value division possible assumption propositions
liquid allows us example break time interval true three consecutive subintervals true dividing model intervals transitions
compute lgcf simply treating intervals state timeline
states contain propositions true corresponding time interval
resulting five state timeline shown bottom figure later simple
computation returns lgcf model thus see lgcf model
timeline
computing ama lgg
describe computing lgg two ama formulasthe lgg
formulas computed via sequence pairwise lgg applications discussed later
consider two timelines b c b c e b e e
useful consider ways timelines true simultaneously along
arbitrary time interval look ways two timelines
aligned along time interval figure shows one many possible alignments
timelines call alignments interdigitationsin general exponentially many
interdigitations one ordering state transitions differently note interdigitation
allowed constrain two transitions different timelines occur simultaneously though
depicted figure
thus interdigitation provides ordering relation transitions need anti symmetric reflexive
transitive total



fil earning emporal e vents



b e
b

b c

b c



e

e

b c b c b c b c
b e
b



e

e



true



e
e


e

figure generalizing timelines b c b c e b e e
one exponentially many interdigitations two timelines b computing
interdigitation generalization corresponding interdigitation part states
formed intersecting aligned states two timelines state true represents
state propositions

given interdigitation two timelines easy construct timeline must
true whenever timelines true e construct generalization two timelines
figure b give construction interdigitation given figure top two
horizontal lines figure correspond interdigitation divided every state
timeline two identical states whenever transition occurs state
timeline resulting pair timelines simultaneous transitions viewed
sequence state pairs one timeline bottom horizontal line labeled
timeline one state state pair state intersection
proposition sets state pair true represents empty set propositions state
true anywhere
call resulting timeline interdigitation generalization ig
clear ig true whenever true particular holds along
time interval model sequence consecutive meeting subintervals
sequence states true construction ig aligned relative along
interval view states sets states ig subsets corresponding
aligned state thus ig states true model alignment showing
ig true model
general exponentially many igs two input timelines one possible
interdigitation two clearly since ig generalization input timelines
conjunction igs conjunction ama formula generalizes
input timelines fact later ama formula lgg
two timelines conjunction igs serves
lgg


fif ern g ivan iskind

b b e true e
b b true e
b b true true e
b b true e
b b true e
b true true e
b true e
b true e
b true true e
b true e
b true e
b e
b true e
formula lgg contains redundant timelines pruned first
clear different igs timelines remove one copy
timeline lgg second note timeline general timeline
equivalent thus prune away timelines generalizations
others later efficiently test whether one timeline general
another performing pruning steps left first next last
timelines formulathus b e b b e true e lgg

demonstrated compute lgg pairs timelines use
procedure compute lgg pairs ama formulas given two ama formulas compute
lgg simply conjoining lggs pairs timelines one ama formula
e formula

n

lgg j
j

lgg two ama formulas n j
timelines
informally described lgcf lgg operations needed carry
specific general learning described follows formally develop
operations analyze theoretical properties corresponding discuss
needed extensions bring exponential propositional negation free operations
practice

representing events ama
present formal account ama hypothesis space analytical development
needed specific general learning ama readers primarily interested
high level view empirical evaluation may wish skip sections
instead proceed directly sections discuss several practical extensions
basic learner present empirical evaluation
study subset interval logic called event logic siskind utilized
l eonard event recognition video sequences logic interval explicitly rep

fil earning emporal e vents

resenting possible interval relationships given originally allen calculus
interval relations e g overlaps meets event logic formulas allow definition
event types specify static properties intervals directly dynamic properties
hierarchically relating sub intervals allen relations formal syntax
semantics full event logic needed proposition given appendix
restrict attention much simpler subset event logic call ama defined
believe choice event logic rather first order logic well restriction
ama fragment event logic provide useful learning bias ruling large number
practically useless concepts maintaining substantial expressive power practical utility
bias demonstrated via empirical visual eventrecognition application
ama seen restriction ltl bacchus kabanza conjunction
similar motivations present syntax semantics ama along
key technical properties ama used throughout
ama syntax semantics
natural describe temporal events specifying sequence properties must hold
consecutive time intervals example hand picking block might become block
supported hand block supported hand represent
sequences timelines sequences conjunctive state restrictions intuitively
timeline given sequence propositional conjunctions separated semicolons
taken represent set events temporally match sequence consecutive conjunctions
ama formula conjunction number timelines representing events
simultaneously viewed satisfying conjoined timelines formally syntax
ama formulas given
state

ama

true j prop j prop state
state j state
may omit parens
j ama

prop primitive proposition sometimes called primitive event type take
grammar formally define terms timeline formula ama formula state k formula formula k states k ama formula ama formula
whose timelines k timelines often treat states proposition sets
true empty set ama formulas timeline sets may treat formulas
sets statesit important note however formulas may contain duplicate states
duplication significant reason treating timelines sets
formally intend sets state index pairs index gives states position formula
indicate explicitly avoid encumbering notation implicit index must
remembered whenever handling duplicate states
semantics ama formulas defined terms temporal temporal model
hm set prop propositions pair mapping natural numbers
representing time truth assignments prop closed natural number interval
note siskind gives continuous time semantics event logic
stands meets timeline meet sequence conjunctively restricted intervals



fif ern g ivan iskind

defined terms real valued time intervals temporal defined use discrete
natural number time indices however still apply continuous time semantics semantics bounds number state changes continuous timeline countable number important note natural numbers domain representing
time discretely prescribed unit continuous time represented natural
number instead number represents arbitrarily long period continuous time
nothing changed similarly states timelines represent arbitrarily long periods time
conjunctive restriction given state holds satisfiability relation ama
formulas given follows




state satisfied model hm iff x assigns p true every x p



ama formula n satisfied iff satisfied



timeline sn satisfied model hm iff exists
hm satisfies hm hm satisfies
sn

condition defining satisfaction timelines may appear unintuitive first due
fact two ways sn satisfied reason becomes clear recalling natural numbers represent continuous time intervals intuitively
continuous time perspective timeline satisfied consecutive continuous time
intervals satisfying sequence consecutive states timeline transition
consecutive states si si occur within interval constant truth assignment
happens satisfy states exactly boundary two time intervals constant truth
value definition cases correspond sn satisfied time
intervals respectively
satisfies say model covers say ama
subsumes ama iff every model model written say
properly subsumes written alternatively may state
saying general less specific covers siskind
provides method determine whether given model satisfies given ama formula
finally useful associate distinguished timeline model projection
model hm j written map timeline sj state sk
gives true propositions k k j intuitively projection gives
sequence propositional truth assignments beginning end model later
projection model viewed representing model precise
sense
following two examples illustrate basic behaviors ama formulas
example stretchability
equivalent timelines general timelines property duplicating state
formula equivalent original formula recall given model hm
view truth assignment x representing continuous time interval interval
conceptually divided arbitrary number subintervals thus state satisfied
hm x x state sequence


fil earning emporal e vents

example infinite descending chains given propositions b timeline
subsumed formulas b b b b b b
intuitively clear semantics viewed continuous time perspective interval
b true broken arbitrary number subintervals
b hold example illustrates infinite descending chains ama
formulas entire chain subsumes given formula member equivalent given
formula general ama formula involving propositions b subsume

b

motivation ama
timelines natural way capture stretchable sequences state constraints
consider conjunction sequences e ama several reasons language enrichment first ama least general generalization lgg
uniquethis true second informally argue parallel conjunctive constraints important learning efficiency particular space formulas
length k grows size exponentially k making difficult induce long formulas
however finding several shorter timelines characterize part long sequence
changes exponentially easier least space search exponentially smaller ama
conjunction timelines places shorter constraints simultaneously often captures
great deal concept structure reason analyze ama well
empirical work consider k ama
ama language propositional intended applications relational first order
including visual event recognition later propositional ama learning develop effectively applied relational domains
first order learning distinctive automatically constructing object correspondence across examples cf lavrac dzeroski grobelnik roth yih similarly though ama
allow negative state constraints section discuss extend
incorporate negation learning crucial visual event recognition
conversion first order clauses
note ama formulas translated ways first order clauses
straightforward however use existing clausal generalization techniques learning
particular capture ama semantics clauses appears necessary define subsumption
generalization relative background theory restricts us continuous time first order
model space
example consider ama formulas b b b
propositionsfrom example know consider straightforward clausal
translation formulas giving c b c b eets
pan ij variables represent time intervals eets indicates
two time intervals meet pan function returns time interval equal
union two time interval arguments meaning intend capture satisfying
assignments c c indicate intervals satisfied respectively
clear contrary want c c e j c c since easy
unintended first order satisfy c c thus translation
similar translations capture continuous time nature ama semantics


fif ern g ivan iskind

order capture ama semantics clausal setting one might define first order theory
restricts us continuous time modelsfor example allowing derivation property b
holds interval property holds sub intervals given theory
j c c desired however well known least general generalizations relative background theories need exist plotkin prior work clausal
generalization simply subsume ama language
note particular training set may possible compile continuous time background theory finite adequate set ground facts relative ground theories
clausal lggs known exist thus could used application however
compiling approaches look promising us require exploiting analysis similar one given paperi e understanding ama generalization subsumption
separately clausal generalization exploiting understanding compiling
background theory pursued compilations
even given compilation procedure existing clausal generalization techniques learning ama formulas clausal translations
ama found resulting generalizations typically fall outside clausal translations
formulas ama language language bias ama lost preliminary empirical work video event recognition domain clausal inductive logic programming ilp
systems found learner appeared lack necessary language bias effective
event definitions believe would possible ways build language bias
ilp systems chose instead define learn within desired language bias directly
defining class ama formulas studying generalization operation class
basic concepts properties ama
use following convention naming propositions theorems key
work theorems technical difficulty lemmas
technical needed later proofs propositions theorems number
one sequence regardless type proofs theorems propositions provided
main textomitted proofs lemmas provided appendix
give pseudo code methods non deterministic style non deterministic language functions return one value non deterministically contain
non deterministic choice points call non deterministic functions since nondeterministic function return one possible value depending choices made
choice points encountered specifying function natural way specify richly structured set function arguments relation function arguments actually
enumerate values set relation arguments provided one simply use
standard backtracking search different possible computations corresponding different
choices choice points
ubsumption



g eneralization



tates

basic formulas deal states conjunctions propositions propositional
setting computing subsumption generalization state level straightforward state
subsumes iff subset viewing states sets propositions
derive intersection states least general subsumer states union
states likewise general subsumee


fil earning emporal e vents

nterdigitations
given set timelines need consider different ways model could simultaneously satisfy timelines set start model e first time point
initial state timeline must satisfied time point model one
timelines transition second state timelines must satisfied place
initial state initial state timelines remains satisfied sequence
transitions subsets timelines final state timeline holds way
choosing transition sequence constitutes different interdigitation timelines
viewed differently model simultaneously satisfying timelines induces co occurrence
relation tuples timeline states one timeline identifying tuples co occur
point model represent concept formally set tuples co occurring states
e co occurrence relation sometimes think set tuples ordered sequence
transitions intuitively tuples interdigitation represent maximal time intervals
timeline transition tuples giving co occurring states
time interval
relation r x xn simultaneously consistent orderings n
whenever r x xn r x x n xi x x xi say
r piecewise total projection r onto component totali e every state xi
appears r
definition interdigitation interdigitation set f n g timelines cooccurrence relation n viewing timelines sets states piecewise total
simultaneously consistent state orderings say two states
j j co occur iff tuple contains sometimes refer
sequence tuples meaning sequence lexicographically ordered state orderings
note exponentially many interdigitations even two timelines relative
total number states timelines example page shows interdigitation two
timelines pseudo code non deterministically generating arbitrary interdigitation set
timelines found figure given interdigitation timelines sm
tn possibly others following basic properties interdigitations easily
verifiable
j si tk co occur k


k sj co occur tk





sm tn

first use interdigitations syntactically characterize subsumption timelines
definition witnessing interdigitation interdigitation two timelines
witness iff every pair co occurring states
subset e
following lemma proposition establish equivalence witnessing interdigitations
subsumption
recall formally timelines viewed sets state index pairs rather sets states ignore
distinction notation readability purposes treating timelines though state duplicated



fif ern g ivan iskind



interdigitation f n g

input timelines n
output interdigitation f n g




hhead head n
n ji j
return hs

ji j g
non empty subset







n

rest
else






return extend tuple interdigitation f n g



figure pseudo code interdigitation non deterministically computes interdigitation set f n g timelines function head returns first
state timeline rest returns first state removed extend tuple x
extends tuple adding first element x form longer tuple non emptysubset non deterministically returns arbitrary non empty subset
lemma timeline model satisfies witnessing
interdigitation map
proposition timelines



iff interdigitation witnesses

proof backward direction induction number states n timeline
n existence witnessing interdigitation implies every state
subset single state thus model model
suppose induction backward direction theorem holds whenever n
fewer states given arbitrary model n state interdigitation w
witnesses must model conclude desired
write sn tm witnessing interdigitation w must identify
maximal prefix tm made states co occur thus
subsets since hm satisfies definition must exist
hm satisfies thus tm hm satisfies sn equal
case straightforward construct w witnessing
interdigitation sn tm tm use induction hypothesis
hm must satisfy tm tm follows satisfies desired
forward direction assume let model
map clear exists satisfies follows satisfies
lemma implies witnessing interdigitation map thus











fil earning emporal e vents

l east g eneral c overing f ormula
logic discriminate two contains formula satisfies one
turns ama formulas discriminate two exactly much richer internal positive event logic ipel formulas internal formulas define event occurrence
terms properties within defining interval satisfaction hm depends
proposition truth values given inside interval positive formulas
contain negation appendix gives full syntax semantics ipel used
state prove lemma fact ama discriminate well ipel
indicates restriction ama formulas retains substantial expressive power leads
following serves least general covering formula lgcf component
specific general learning procedure formally lgcf model within formula language
l e g ama ipel formula l covers covering formula
l strictly less general intuitively lgcf model unique representative
formula model analysis uses concept model embedding say model
embeds model iff map map
lemma

e

ip el model embeds model satisfies e satisfies e

proposition projection model lgcf internal positive event logic
hence ama semantic equivalence
proof consider model know map covers remains
map least general formula semantic equivalence
let e ipel formula covers let model covered map
want e covers know lemma witnessing
interdigitation map map thus proposition map map
showing embeds combining facts lemma follows e covers
hence map e
proposition tells us ipel lgcf model exists unique
timeline given property ama formula covers timelines covered
another ama formula thus remainder considering
subsumption formulas abstract away temporal deal instead
timelines proposition tells us compute lgcf model constructing
projection model definition projection straightforward
derive lgcf runs time polynomial size model note
projection may contain repeated states practice remove repeated states since
change meaning resulting formula described example
c ombining nterdigitation



g eneralization



pecialization

interdigitations useful analyzing conjunctions disjunctions timelines
conjoining set timelines model conjunction induces interdigitation timelines
co occurring states simultaneously hold model point viewing states
sets states resulting unioning co occurring states must hold constructing
take size model hm sum x number true propositions x



fif ern g ivan iskind

interdigitation taking union tuple co occurring states get sequence states
get timeline forces conjunction timelines hold call sequence
interdigitation specialization timelines dually interdigitation generalization involving
intersections states gives timeline holds whenever disjunction set timelines
holds
definition interdigitation generalization specialization set timelines
timeline sm interdigitation tuples sj intersection
respectively union components jth tuple sequence set interdigitation
generalizations respectively specializations called ig respectively
example suppose sets propositions e states consider timelines relation

f hs hs hs hs g
interdigitation states co occur co occurs
corresponding ig members




ig fs g
fs g

interdigitation witnesses



timeline ig dually subsumes subsumed timeline
easily verified proposition complexity analyses note number states
member ig bounded number states
timelines bounded total number states timelines
number interdigitations thus members ig exponential total number states present later computing lggs
require computation ig give pseudo code compute
quantities figure gives pseudo code function ig member non deterministically
computes arbitrary member ig member except replace intersection union given set timelines compute ig executing possible
deterministic computation paths function call ig member e computing set
obtainable non deterministic function possible decisions non deterministic
choice points
give useful lemma proposition concerning relationships conjunctions disjunctions concepts former ama concepts convenience
use disjunction concepts producing formulas outside ama obvious interpretation
lemma given formula subsumes member set formulas
subsumes member ig dually subsumed member
subsumed member case length bounded
size



fil earning emporal e vents

ig member f n g

input timelines n
output member ig f n g

return map intersect tuple interdigitation f n g
figure pseudo code ig member non deterministically computes member
ig set timelines function intersect tuple takes tuple
sets argument returns intersection higher order function map f
takes function f tuple arguments returns tuple length
obtained applying f element making tuple
proposition

following hold

conjunction set timelines equals disjunction timelines

disjunction set timelines subsumed conjunction
timelines ig
proof prove recall ig
w
v
immediate ig dual argument
w
v
v
w
remains vto isw equivalent showing
timeline subsumed subsumed proposition consider
v
timeline implies member subsumes lemma
w
implies get
desired
reduce ama subsumption subsumption exponential increase size
proposition


ama









proof forward direction contrapositive assume
w thus timeline

w
tells us thus get

backward direction assume
w
tells us thus

subsumption generalization
section study subsumption generalization ama formulas first give
polynomial time deciding subsumption formulas
deciding subsumption ama formulas conp complete second give complexity bounds construction least general generalization lgg formulas


fif ern g ivan iskind

subsumes
input sm
output

tn

path v vm n sg return true example

b

c

create array reachable j boolean values false
j n
reachable true
j n reachable j true

j n
reachable j ti sj reachable
reachable j
reachable

reachable n return true



j

j

otherwise return false
figure pseudo code subsumption
defined main text

sg subsumption graph

analysis subsumption including existence uniqueness lower upper bounds
lgg ama formulas third introduce polynomial timecomputable syntactic notion
subsumption computes corresponding syntactic lgg exponentially faster semantic lgg fourth section give detailed example
showing steps performed lgg compute semantic syntactic lggs
two ama formulas
subsumption
methods rely critically novel deciding subsumption question
formulas polynomial time note merely searching possible
interdigitations witnessing interdigitation provides obvious decision procedure
subsumption questionhowever general exponentially many interdigitations reduce subsumption finding path graph pairs states
polynomial time operation pseudo code resulting subsumption shown figure main data structure used subsumption
subsumption graph
definition subsumption graph two timelines sm tn
written sg directed
graph g hv e v fvi j j j ng

directed edge set e equals hvi j vi j j si tj si tj j j j








achieve polynomial time bound one simply use polynomial time pathfinding case special structure subsumption graph exploited determine


fil earning emporal e vents

desired path exists mn time example method shown pseudo code illustrates
following theorem asserts correctness assuming correct polynomial time
path finding method used
lemma given timelines sm tn witnessing
interdigitation iff path subsumption graph sg v
vm n
theorem
mial time

given timelines subsumes decides

polyno

proof clearly runs polynomial time lemma tells us line
return true iff witnessing interdigitation combining proposition shows
returns true iff
given polynomial time subsumption proposition immediately suggests
exponential time deciding ama subsumptionby computing subsumption
exponentially many timelines one formula timelines formula
next theorem suggests cannot better worst casewe argue
ama subsumption conp complete reduction boolean satisfiability readers uninterested
technical details argument may skip directly section
develop correspondence boolean satisfiability include negation
ama formulas lack negation imagine boolean variable two ama
propositions one true one false particular given boolean satisfiability
n variables p pn take set propn set containing n ama propositions
truek falsek k n represent truth assignment pi
variables ama state sa given follows

sa ftruei j n pi trueg ffalsei j n pi falseg
proposition suggests checking ama subsumption critically involves exponentially
many interdigitation specializations timelines one ama formulas proof
design ama formula whose interdigitation specializations seen correspond truth
assignments boolean variables shown following lemma
lemma

given n let conjunction timelines
n



f propn truei falsei propn propn falsei truei propn g

following facts truth assignments boolean variables p pn
truth assignment propn sa propn semantically equivalent member

truth assignment propn sa propn
truth assignment function mapping boolean variables true false



fif ern g ivan iskind

lemma hand tackle complexity ama subsumption
theorem

deciding ama subsumption conp complete

proof first deciding ama subsumption conp providing
polynomial length certificate answer certificate non subsumption
interdigitation timelines yields member subsumed
certificate checked polynomial time given interdigitation corresponding
member computed time polynomial size test
whether resulting timeline subsumed timeline polynomial time masubsumption proposition guarantees iff timeline
subsumed every timeline certificate exist exactly
answer subsumption query
conp hardness reduce deciding satisfiability sat formula
c cm recognizing non subsumption ama formulas
ci li li li li j proposition p chosen p fp pn g
negation p idea reduction construct ama formula view
exponentially many members representing truth assignments construct
timeline view representing satisfiable iff
let defined lemma let formula sm

si

ffalsej j li k pj kg
ftruej j li k pj kg

si thought asserting ci start showing satisfiable
assume satisfied via truth assignment awe know lemma
semantically equivalent propn sa propn
propn sa propn subsumed conclude proposition desired
suppose contradiction propn sa propn subsumed state sa must
subsumed state si consider corresponding clause ci since satisfies
ci satisfied least one literals li k must true assume li k pj
dual argument holds li k pj si contains falsej sa contains truej
falsej thus sa si since si sa contradicting choice
complete proof assume unsatisfiable
proposition consider arbitrary lemma
know truth assignment propn sa propn since unsatisfiable
know ci satisfied hence ci satisfied implies
primitive proposition si sa let w following interdigitation
propn sa propn sm

fhpropn hpropn hpropn sii hsa sii hpropn sii hpropn si hpropn smig

see tuple co occurring states given state subsumed
state thus w witnessing interdigitation propn sa propn
holds proposition combining propn sa propn get
given hardness later define weaker polynomial timecomputable subsumption
notion use learning


fil earning emporal e vents

least general generalization
ama lgg set ama formulas ama formula general
formula set strictly general formula existence
ama lgg nontrivial infinite chains increasingly specific formulas
generalize given formulas example demonstrated chains subsumee
extended ama subsumees example member chain p q p q p q
p q p q p q covers p q q p p q despite complications
ama lgg exist
theorem lgg finite set ama formulas subsumed
generalizations
proof let set let conjunction timelines
generalize size larger since finite number primitive
propositions finite number timelines well defined
least general generalization first note timeline generalizes thus
proposition must generalize consider arbitrary generalization
proposition implies must generalize formula lemma implies
timeline must subsume timeline longer size subsumes
timelines must timeline choice every timeline
subsumes timeline follows subsumes lgg subsumed
lggs desired




given ama lgg exists unique compute first step
strengthen proposition get lgg sublanguage
theorem set formulas conjunction timelines ig ama
lgg
proof let specified conjunction since timeline ig subsumes timelines
subsumes member least general formula consider
ama formula subsumes members since timeline must subsume
members lemma implies timeline subsumes member ig thus
timeline subsumes implies
characterize ama lgg ig
theorem



ig ama lgg set ama formulas

proof let f n g e n know ama lgg
must subsume e would fail subsume one represent
w
w
e disjunction timelines given e n ama
lgg must least general formula subsumes e e ama lgg set

timelines fis j g theorem tells us lgg timelines given

ig fis j g
must least one timeline timeline state true



fif ern g ivan iskind



















semantic lgg f g

input ama formulas
output lgg f g

fg

values member

f j g
fg
g fg
values ig member
g
g f g j g
g g g fg
v

return

g

figure pseudo code computing semantic ama lgg set ama formulas
theorem leads directly computing ama lggfigure gives
pseudo code computation lines pseudo code correspond computation

fis j g timelines included set subsumed timelines
already set checked polynomial time subsumption
pruning accomplished test line often drastically reduces size timeline set perform subsequent ig computationthe final affected
pruning since subsequent ig computation generalization step remainder

pseudo code corresponds computation ig fis j g include
timelines final subsume timeline set pruning step test
line sound since one timeline subsumes another conjunction timelines
equivalent specific one section traces computations
example lgg calculation
since sizes ig exponential sizes inputs code
figure doubly exponential input size conjecture cannot better
yet proven doubly exponential lower bound ama case input
formulas timelines takes singly exponential time since fg
prove exponential lower bound input formulas
readers uninterested technical details proof safely skip forward section
argument take available primitive propositions set fpi j j
n j ng consider timelines


sn
n




fil earning emporal e vents



si pi pi n
j p j pn j

ama lgg must contain exponential number timelines
particular ama lgg equivalent conjunction subset
ig f g certain timelines may omitted subset
lemma ama lgg set
timelines ig j j j j

timelines equivalent conjunction

proof lemma implies timeline must subsume timeline ig
conjunction must equivalent since clearly covers covered
lgg since formed taking one timeline ig timeline
j j j j complete argument showing exponentially many
timelines ig f g cannot omitted conjunction remains lgg
notice j si j pi j implies state ig f g
contains exactly one proposition since state formed intersecting state
furthermore definition interdigitation applied implies following two facts
timeline q q qm ig f g
q

p qm pn n

consecutive states qk
j

pi j qk pi j j j j
j




together facts imply timeline ig f g sequence propositions starting
p ending pn n consecutive propositions pi j pi j different
equal j equal j j call timeline ig f g square
pair consecutive propositions pi j pi j j j
following lemma implies square timeline omitted conjunction timelines
ig remain lgg








lemma let given let ig f g
timelines subset omits square timeline
v

whose

n hence exponenthe number square timelines ig f g equal n
n
tial size completed proof following

theorem

smallest lgg two formulas exponentially large

proof lemma ama lgg equivalent conjunction
number timelines chosen ig f g however lemma conjunction
n timelines must must exponentially
must least n
n
large
conjecture

smallest lgg two ama formulas doubly exponentially large


fif ern g ivan iskind

lower bound ama lgg complexity merely consequence
existence large ama lggs even small lgg expensive compute
due difficulty testing ama subsumption
theorem determining whether formula ama lgg two given ama formulas
co np hard co nexp size three formulas together
proof co np hardness use straightforward reduction ama subsumption given
two ama formulas decide asking whether ama lgg
clearly iff lgg two formulas
co nexp upper bound note check exponential time whether
proposition polynomial time subsumption remains
check whether least subsumer since theorem shows
lgg ig lgg ig
thus proposition least subsumer must timelines
ig use exponentially long certificates
answers certificate pair interdigitation interdigitation
corresponding members ig
given pair certificates computed polynomial time
computed exponential time subsumption checked
polynomial time relative size exponential lgg
ig certificates exist
syntactic subsumption syntactic least general generalization
given intractability semantic ama subsumption introduce tractable generality notion syntactic subsumption discuss corresponding lgg use
syntactic forms generality efficiency familiar ilp muggleton de raedt
example subsumption often used place entailment generality relation
unlike ama semantic subsumption syntactic subsumption requires checking polynomially
many subsumptions polynomial time via theorem
definition ama syntactically subsumed ama written
timeline timeline

syn iff

proposition ama syntactic subsumption decided polynomial time
syntactic subsumption trivially implies semantic subsumptionhowever converse
hold general consider ama formulas b b b b
primitive propositions b b b however neither b
b b b b syntactically subsume b b
syntactic subsumption fails recognize constraints derived interaction
timelines within formula
syntactic least general generalization syntactic ama lgg syntactically least general
ama formula syntactically subsumes input ama formulas least means


fil earning emporal e vents

formula properly syntactically subsumed syntactic lgg syntactically subsume input
formulas hardness gap syntactic semantic ama subsumption one might
conjecture similar gap exists syntactic semantic lgg proving
gap exists requires closing gap lower upper bounds ama lgg shown
theorem favor upper bound suggested conjecture cannot yet
hardness gap semantic syntactic lgg give syntactic lgg
exponentially efficient best semantic lgg found
theorem first syntactic lggs exist unique mutual syntactic
subsumption hence semantic equivalence
theorem exists syntactic lgg ama formula set syntactically subsumed syntactic generalizations
proof let conjunction timelines syntactically generalize
size larger proof theorem well defined
syntactic lgg first note syntactically generalizes timeline
generalizes timeline every member choice consider arbitrary
syntactic generalization definition syntactic subsumption timeline
must subsume timeline member lemma implies
timeline size larger subsumes subsumed
choice timeline must timeline follows syntactically subsumes
syntactic lgg subsumed syntactic generalizations
general know semantic syntactic lggs different though clearly syntactic
lgg semantic generalization must subsume semantic lgg example b
b b semantic lgg b discussed syntactic lgg
b true true b subsumes b subsumed b even
formulas
proposition

ama syn

equivalent

proof forward direction immediate since already know syntactic subsumption implies
semantic subsumption reverse direction note implies timeline
subsumes thus since single timeline timeline subsumes timeline
definition syntactic subsumption
proposition

syntactic ama lgg formula set semantic lgg

proof consider syntactic lgg proposition implies semantic
generalization consider semantic lgg conclude
semantic lgg proposition implies syntactically subsumes follows
syntactically subsumes syntactically subsumed syntactic
lgg follows syntactically subsumes would least syntactic
generalization implies desired
note stronger stating formula syntactic lgg set formulas semantic lgg immediate consequence


fif ern g ivan iskind

first examination strengthening appears trivial given equivalence syn
however semantically least necessarily stronger condition syntactically leastwe ruled possibility semantically least generalization may
syntactically subsume another generalization semantically syntactically equivalent
question open found example phenomenon
proposition together theorem nice consequence learning
syntactic lgg two ama formulas semantic lgg formulas long
original formulas syntactic lggs sets timelines learning starts training examples converted timelines lgcf operation
syntactic lggs computed whether combining training examples incrementally computing syntactic lggs parts training data syntactic lggs sets
timelines hence semantic lggs spite fact syntactic subsumption
weaker semantic subsumption note however resulting semantic lggs may
considerably larger smallest semantic lgg may syntactic lgg
proposition cannot hope polynomial time syntactic lgg

theorem

smallest syntactic lgg two formulas exponentially large

proof suppose syntactic lgg two formulas exponentially large
since proposition formula semantic lgg semantic lgg
two formulas exponentially large contradicts theorem
discouraging syntactic lgg whose time complexity
matches lower bound unlike semantic lgg case best
doubly exponential worst case theorem yields exponential time method computing
semantic lgg set timelines since timeline simply
conjoin timelines ig given set ama formulas syntactic lgg uses
method compute polynomially many semantic lggs sets timelines one chosen
input formula conjoins
theorem
n

formula

ig f n g syntactic lgg ama formulas

v





proof let ig f n g timeline must subsume
output ig set containing timeline thus syntactically subsumes
syntactically least formula consider syntactically subsumes every
syn conclude timeline subsumes timeline ti
assumption syn lemma must subsume member
ig ft tn g member timeline timeline subsumes
timeline conclude syn desired
v

theorem yields computes syntactic ama lgg exponential time
pseudo code method given figure exponential time bound follows fact
exponentially many ways choose line
exponentially many semantic lgg members line since timelines
product two exponentials still exponential


fil earning emporal e vents








syntactic lgg f g

input ama formulas f g
output syntactic lgg f g

g fg

h

semantic lgg f g






v

return

g
g f g j g
g g g fg

g

figure pseudo code computes syntactic ama lgg set ama formulas
formula returned shown actually subset syntactic lgg given
theorem subset syntactically hence semantically equivalent formula
specified theorem possibly smaller due pruning achieved statement
lines timeline pruned set semantically subsumed timeline
set one timeline kept semantically equivalent group timelines random
pruning timelines sound since timeline pruned output subsumes
formula outputthis fact allows easy argument pruned formula syntactically equivalent e mutually syntactically subsumed unpruned formula section
traces computations example lgg calculation note empirical evaluation discussed section cost terms accuracy
efficient syntactic vs semantic lgg know learned definitions made errors
direction overly specificthus since semantic lgg least specific
syntactic lgg would advantage semantic
method exponential amount work even small typically
many timelines pruned output subsume remains still
open question whether output efficient computing syntactic ama
lggthis conp conjecture conp complete one route settling
question determine output complexity semantic lgg input formulas
believe conp complete proven p
output efficient method computing syntactic ama lgg theorem
summary algorithmic complexity section found table
conclusions section
examples least general generalization calculations
work details semantic syntactic lgg calculation consider
ama formulas b b b semantic lgg b
syntactic lgg b true true b



fif ern g ivan iskind

emantic lgg e xample
first step calculating semantic lgg according given figure
compute interdigitation specializations input formulas e trivially
b calculate must consider possible interdigitations three

f ha b hb b hb ai g
f ha b hb ai g
f ha b ha ai hb ai g
interdigitation leads corresponding member unioning conjoining states
tuple

f b b b
b
b b g
lines semantic lgg compute set equal union
timelines subsumed timelines removed formulas see
timeline subsumed thus b
computing returns conjunction timelines ig redundant
timelines removed e subsuming timelines removed case ig b
trivially one timeline thus correctly computes semantic lgg
b
yntactic lgg e xample
syntactic lgg shown figure computes series semantic lggs
timeline sets returning conjunction pruning line cycles
timeline tuples cross product input ama formulas case tuples
ha b b ha b b aifor tuple
computes semantic lgg tuples timelines
semantic lgg computation tuple uses given figure
argument set timelines rather ama formulas reason lines
superfluous timeline case tuple lines
compute fa b b g remains compute interdigitationgeneralizations e ig returning conjunction timelines pruning lines
figure set interdigitations

f ha ai hb ai hb b hb ai g
f ha ai hb b hb ai g
f ha ai ha b hb b hb ai g
f ha ai ha b hb ai g
f ha ai ha b ha ai hb ai g
intersecting states interdigitation tuples get ig

f true b true b true true b true true true true true g


fil earning emporal e vents

since timeline b true subsumed timelines ig timelines
pruned thus semantic lgg returns b true semantic lgg timelines

next syntactic lgg computes semantic lgg timelines following
steps semantic lgg timelines true b since
b true true b subsume one another set g computed lines
syntactic lgg equal f b true true b g thus computes
syntactic lgg b true true b note case syntactic
lgg general semantic lgg

practical extensions
implemented specific general ama learning lgcf syntactic lgg presented earlier implementation includes four practical extensions
first extension aims controlling exponential complexity limiting length
timelines consider second describe often efficient lgg
modified computing pairwise lggs third extension deals applying
propositional relational data necessary application domain visual event
recognition fourth add negation ama language compute corresponding lgcfs lggs ama without negation adding negation
ama turns crucial achieving good performance experiments end
section review overall complexity implemented system
k ama least general generalization
already indicated syntactic ama lgg takes exponential time relative
lengths timelines ama input formulas motivates restricting ama
language k ama practice formulas contain timelines k states
k increased able output increasingly specific formulas cost
exponential increase computational time visual eventrecognition experiments shown
later increased k resulting formulas became overly specific computational bottleneck reachedi e application best values k practically computable
ability limit k provided useful language bias
use k cover operator order limit syntactic lgg k ama k cover
ama formula syntactically least general k ama formula syntactically subsumes
inputit easy k cover formula formed conjoining k
timelines syntactically subsume formula e subsume timeline formula
figure gives pseudo code computing k cover ama formula shown
correctly computes k cover input ama formula calculates
set least general k timelines subsume timeline inputthe resulting k
formulas conjoined redundant timelines pruned subsumption test note
k cover ama formula may exponentially larger formula however
practice found k covers exhibit undue size growth
given k cover restrict learner k ama follows compute
k cover ama input formula compute syntactic ama lgg resulting kama formulas return k cover resulting ama formula primary bottleneck


fif ern g ivan iskind






















v

k cover k im
v
input positive natural number k ama formula im
v
output k cover im
g fg


hp pn values k partition k


p pn
g
g f g j g
g g g fg
v
return g
p

k partition k sj

input positive natural number k timeline sj
output tuple k sets consecutive states partitions sj

k return hfs g fsj gi
k return hfs sj gi
l member f j k g
p fs sl g
j

return extend tuple p k partition k

pick next block size
construct next block

sl sj

figure pseudo code non deterministically computing k cover ama formula along
non deterministic helper function selecting k block partition states
timeline

original syntactic lgg computing exponentially large set interdigitationgeneralizationsthe k limited limits complexity computes interdigitationgeneralizations involving k timelines
incremental pairwise lgg computation
implemented learner computes syntactic k ama lgg ama formula setshowever
directly use describe rather compute lgg formula
sets via single call typically efficient break computation
sequence pairwise lgg calculations describe potential
efficiency gains
straightforward syntactic semantic subsumption
lgg lgg lgg ama formulas thus
recursively applying transformation incrementally compute lgg ama formulas via sequence pairwise lgg calculations note since lgg operator


fil earning emporal e vents

commutative associative final depend order process
formulas refer incremental pairwise lgg strategy incremental
strategy makes single call k ama lgg passing entire formula
set direct
simplify discussion consider computing lgg formula set
argument extended easily ama formulas hence k ama recall syntactic
lgg figure computes lgg conjoining timelines ig subsume others eliminating subsuming timelines form pruning incremental
applies pruning step pair input formulas processedin contrast
direct must compute interdigitation generalization input formulas
pruning happen resulting savings substantial typically compensates
extra effort spent checking pruning e testing subsumption timelines
incremental lgg computed formal describing savings constructed


observation ig f g ig fg lgg ig fg
seen compute lgg f g latter possibly much cheaper
compute due pruning lgg typically contains much smaller number
timelines ig f g
observations implemented system uses incremental
compute lgg formula set describe optimization used system speedup
computation pairwise lggs compared directly running figure given
pair ama formulas n let syntactic
lgg obtained running figure constructs computing
lggs timeline pairs e lgg j j conjoining
removing subsuming timelines turns often avoid computing many
lggs see consider case exists j j know
lgg j j tells us j considered inclusion may
pruned furthermore know lgg involving j subsume j thus
pruned shows need compute lggs involving j rather
need consider adding j constructing
observation leads modified used system computing
syntactic lgg pair ama formulas computes lggs
non subsuming timelines given ama formulas modified proceeds
follows compute subsumer set f j g f j
g let ama removing timelines
let syntactic lgg computed running figure
empty empty let conjunction timelines
subsume timeline return method avoids computing lggs
involving subsuming timelines exponential operation cost performing polynomially
many subsumption tests polynomial operation noticed significant advantage
procedure experiments particular advantage tends grow process
training examples due fact incrementally process training examples
resulting formulas become generalthus general formulas likely
subsuming timelines best case syn e timelines subsuming see step produces empty formula thus step expensive step performs
workin case return set desired


fif ern g ivan iskind

relational data
l eonard produces relational involve objects force dynamic relations
objects thus event definitions include variables allow generalization objects
example definition p ick u p x z recognizes p ick u p hand block table well
p ick u p man box floor despite fact k ama learning propositional
still able use learn relational definitions
take straightforward object correspondence relational learning view
output l eonard containing relations applied constants since currently
support supervised learning set distinct training examples event type
implicit correspondence objects filling role across different training given type example showing p ick u p hand block table
p ick u p man box floor implicit correspondences given hhand mani hblock boxi
htable floori outline two relational learning methods differ much objectcorrespondence information require part training data
c omplete bject c orrespondence
first assumes complete object correspondence given input along
training examples given information propositionalize training
replacing corresponding objects unique constants propositionalized given
propositional k ama learning returns propositional k ama formula
lift propositional formula replacing constant distinct variable lavrac et al
taken similar
partial bject c orrespondence
assumes complete object correspondence information sometimes
possible provide correspondences example color coding objects fill identical
roles recording training movies information available
partial object correspondence even none available automatically complete
correspondence apply technique
moment assume evaluation function takes two relational
candidate object correspondence input yields evaluation correspondence quality given set training examples missing object correspondences perform greedy
search best set object correspondence completions method works
storing set p propositionalized training examples initially empty set u unpropositionalized training examples initially entire training set first step p empty
evaluate pairs examples u possible correspondences select pair yields
highest score remove examples involved pair u propositionalize according best correspondence add p subsequent step use previously
computed values pairs examples one u one p possible correspondences select example u correspondence yields highest average
score relative p example removed u propositionalized according
winning correspondence added p fixed number objects effort expended
polynomial size training set however number objects b appear
training example allowed grow number correspondences must considered grows


fil earning emporal e vents

bb reason important events involved manipulate modest number
objects
evaluation function intuition object roles visual events well
events domains often inferred considering changes initial
final moments event specifically given two object correspondence
first propositionalize according correspondence next compute add
delete lists model add list set propositions true final
moment initial moment delete list set propositions true
initial moment final moment add delete lists motivated strips action
representations fikes nilsson given addi deletei lists
evaluation function returns sum cardinalities add add delete
delete heuristic measures similarity add delete lists two
intuition behind heuristic similar intuition behind strips actiondescription languagei e differences initial final moments
event occurrence related target event event effects described add
delete lists found evaluation function works well visual event domain
note full object correspondences given learner rather automatically
extracted learner training examples interpreted specifying target event
took place well objects filled event roles e g p ick u p b c rather
object correspondences provided training examples interpreted specifying
existence target event occurrence specify objects fill roles e training
example labeled p ick u p rather p ick u p b c accordingly rules learned
correspondences provided allow us infer target event occurred
objects filled event roles example object correspondences manually provided
learner might produce rule


upports z c ontacts z
p ick u p x z
upports x attached x



whereas learner automatically extracts correspondences would instead produce rule


upports z c ontacts z
p ick u p
upports x attached x



worth noting however upon producing second rule availability single training
example correspondence information allows learner determine roles variables
upon output first rule thus assumption learner reliably
extract object correspondences need label training examples correspondence information order obtain definitions explicitly recognize object roles
negative information
ama language allow negated propositions negation however sometimes necessary adequately define event type section consider language ama
superset ama addition negated propositions first give syntax semantics
ama extend ama syntactic subsumption ama next describe


fif ern g ivan iskind

learning ama formulas presented ama correctly computes ama lgcf syntactic ama lgg finally discuss
alternative related adding negation designed reduce overfitting appears
full consideration negated propositions
ama syntax ama grammar building states negated
propositions
literal
state

true j prop j prop
literal j literal state

prop primitive proposition semantics ama
state satisfaction

ama except



positive literal p negative literal
true false every x

p satisfied model hm iff x assigns p



state l lm satisfied model hm iff literal li satisfied hm

subsumption important difference ama ama proposition establishing existence witnessing interdigitations subsumption longer true
words two timelines ama need
interdigitation witnesses see consider ama timelines

b c b b b c
b c b c b
argue
interdigitation witnesses see first
witness second fourth states b must interdigitate align
first fifth fifth ninth states b
cases third state interdigitate states subsume
even still see consider model hm satisfies
must interval within hm satisfies third state
state two cases
proposition c true point hm one verify hm
satisfies following alignment







b c b
b


c

b
b

b c
c b

note important use notation p rather p event logic formula p
satisfied model whenever p false instant model rather event logic interprets p
indicating p never true model defined notice first form negation yield
liquid propertyi e p true along interval necessarily subintervals second form
negation however yield liquid property provided p liquid important learning
since assume states built liquid properties



fil earning emporal e vents

b proposition c false everywhere hm one verify hm
satisfies following alignment


b c

b c
follows

b
b


c

b b c
b

light examples conjecture computationally hard compute ama
subsumption even timelines reason extend definition syntactic subsumption ama way provides clearly tractable subsumption test analogous
discussed ama
definition ama syntactically subsumed ama written syn iff
timeline timeline witnessing interdigitation

difference definition previous one ama need
test witnessing interdigitations timelines rather subsumption timelines
ama formulas note old definition equivalent due proposition
however ama definition weaker general lgg formulas
one might expect ama syntactic subsumption implies semantic subsumption tested
polynomial time subsumption graph described lemma test witnesses
learning rather design lgcf lgg directly handle ama
instead compute functions indirectly applying ama transformed
intuitively adding propositions e training examples represent proposition negations assume training example
set propositions p fp pn g introduce set p fp pn g propositions
use construct training p p assigning true pi time
model iff pi false model time forming set training
twice many propositions original compute least general ama formula
covers computing ama lgcfs applying syntactic ama lgg
resulting ama formula propositions p p finally replace pi
pi resulting ama formula propositions p turns
syntactic subsumption least general ama formula covers original training

correctness transformational computing ama
lgcf syntactic lgg first introduce notation let set
p let set p p time exactly one pi
pi true let following mapping hm hm
unique hm j j assigns pi true iff j assigns pi
true notice inverse functional mapping handling
negation purely ama begins applying original training
follows consider ama formulas propositions p ama formulas
propositions p p
let f mapping ama ama ama f ama formula
identical except pi replaced pi notice inverse f func

fif ern g ivan iskind

tion ama ama corresponds final step described
following lemma shows one one correspondence satisfaction ama
formulas satisfaction ama formulas
lemma model hm ama
hm

covers hm

iff

f covers

lemma straightforward transformational computes
ama lgcf semantic subsumption hence syntactic subsumption
proposition



hm let ama lgcf model hm
lgcf hm equivalence

f unique ama



proof know covers hm therefore lemma know f covers
hm f least general formula ama covers hm
sake contradiction assume ama covers hm f
follows model hm covered f lemma
f covers hm since unique ama lgcf hm
equivalence f however hm covered
f gives contradiction thus exist follows
ama lgcf uniqueness ama lgcf equivalence follows ama
closed conjunction two non equivalent lgcf formulas could
conjoined get lgcf formula strictly less one
use fact f operator preserves syntactic subsumption particular given
two timelines clear witnessing interdigitation trivially
converted witness f f vice versa since syntactic subsumption defined
terms witnessing interdigitations follows ama syn iff
f syn f property straightforward compute syntactic
ama lgg syntactic ama lgg
proposition

ama

formulas



let



f g f unique syntactic ama

syntactic ama lgg
lgg f g

proof know f syn thus since f preserves syntactic subsumption
syn f shows f generalization inputs
f least formula sake contradiction assume
f least follows must ama syn f
syn combining fact f preserves syntactic subsumption get
f syn f f contradicts fact lgg
must f syntactic ama lgg argued elsewhere uniqueness
lgg follows fact ama closed conjunction
propositions ensure correctness transformational computing
syntactic lgg within ama case semantic subsumption transformational
correctly compute ama lgg see recall given two timelines ama witnessing interdigitation clearly


fil earning emporal e vents

semantic subsumption ama lgg however semantic ama lgg
f f f reason since witness f f
f timelines know proposition f f thus f
cannot returned ama lgg since subsume input formulasthis shows
transformational return f f transformational
produce ama formula general
computational side note since transformational doubles number propositions training data specifically designed ama may
efficient might leverage special structure transformed examples
ama ignorein particular exactly one pi pi true time
boundary negation experiments actually compare two methods assigning truth
values pi propositions training data first method called full negation
assigns truth values described yielding syntactically least general ama formula
covers examples found however full negation often learning overly
specific formulas help alleviate second method places bias use
negation choice bias inspired idea often much useful information
characterizing event type pre post conditions second method called boundary
negation differs full negation allows pi true initial final moments
model pi false pi must false times allow
informative negative information beginnings ends training examples
found boundary negation provides good trade negation e ama
often produces overly general full negation e ama often produces overly
specific much complicated
overall complexity scalability
review overall complexity visual event learning component discuss
scalability issues given training set temporal e set movies system
following propositionalize training translating negation descried section
compute lgcf propositional model compute k ama lgg lgcfs
return lifted variablized version lgg steps two four require little computational
overhead linear sizes input output respectively steps one three
computational bottlenecks systemthey encompass inherent exponential complexity
arising relational temporal structure
step one recall section system allows user annotate training examples object correspondence information technique propositionalizing
shown exponential number unannotated objects training example thus
system requires number objects relatively small correspondence information
given small number objects often event class definitions interested
involve large number objects true controlled learning setting
manage relational complexity generating training examples small number
zero irrelevant objects case domains studied empirically
less controlled setting number unannotated objects may prohibit use
correspondence techniquethere least three ways one might proceed first try


fif ern g ivan iskind

develop efficient domain specific techniques filtering objects finding correspondences
particular may possible construct simple filter removes irrelevant
objects consideration correspondences remaining objects second
provide learning set hand coded first order formulas defining set
domain specific features e g spirit roth yih features used
propositionalize training instances third draw upon ideas relational learning
design truly first order version k ama learning example one could use
existing first order generalization generalize relational state descriptions effectively
pushes object correspondence k ama learning rather
treating preprocessing step since well known computing first order lggs
intractable plotkin practical generalization retain tractability constraining
lggs ways e g muggleton feng morales
step three system uses ideas section speedup k ama lgg computation
set training data nevertheless computational complexity still exponential k thus
practice restricted relatively small values k restriction limit
performance visual event experiments expect limit direct applicability
system complex particular many event types interest may
adequately represented via k ama k small event types however often contain
significant hierarchical structurei e decomposed set short sub event types
interesting direction consider k ama learner component
hierarchical learning systemthere could used learn k ama sub event types note
learner alone cannot applied hierarchically requires liquid primitive events
learns non liquid composite event types work required intended construct
hierarchical learner perhaps non liquid ama learning
finally recall compute lgg examples system uses sequence
pairwise lgg calculations fixed k pairwise calculation takes polynomial time however since size pairwise lgg grow least constant factor respect
inputs worst case time complexity computing sequence pairwise lggs exponential expect worst case primarily occur target event type
compact k ama representationin case hierarchical described
appropriate compact representation empirical experience indicates
growth occurin particular pairwise lgg tends yield significant pruning reasonable assumptions amount pruning imply time
complexity computing sequence pairwise lggs polynomial

experiments
data set
data set contains examples different event types pick put stack unstack move
assemble disassemble involve hand two three blocks detailed
description sample video sequences event types see siskind key frames
sample video sequences event types shown figure segmentation
particular assume size pairwise k ama lgg usually bounded sizes k covers
inputs



fil earning emporal e vents

tracking model reconstruction overlaid video frames recorded movies
event classes resulting total movies comprising frames
replaced one assemble movie assemble left qobi duplicate copy another assembleleft qobi segmentation tracking errors
event classes hierarchical occurrences events one class contain occurrences events one simpler classes example movie depicting
ove b c event e moves b c contains subintervals p ick u p b c
p ut b events occur experiments learning definition event
class movies event class used training train movies
event classes may depict occurrence event class learned subevent
however evaluating learned definitions wish detect events correspond
entire movie well subevents correspond portions movie example given
movie depicting ove b c event wish detect ove b c event
p ick u p b c p ut b subevents well movie type data
set set intended events subevents detected definition
detect intended event deem error false negative definition detects unintended
event deem error false positive example movie depicts ove b c event
intended events ove b c p ick u p b c p ut b c definition
pick detects occurrence p ick u p c b p ick u p b c p ick u p b c
charged two false positives well one false negative evaluate definitions
terms false positive negative rates describe
experimental procedure
event type evaluate k ama learning leave one movie crossvalidation technique training set sampling parameters learning k
degree negative information used value p positive propositions
bn boundary negation n full negation parameters evaluation procedure
include target event type e training set size n given information evaluation
proceeds follows movie held movie movies apply k ama learning randomly drawn training sample n movies movies
event type e movies one use l eonard detect occurrences
learned event definition e event type record number false
positives false negatives detected l eonard let fp fn total number
false positives false negatives observed held movies respectively repeat
entire process calculating fp fn times record averages fp fn
since event types occur frequently data others simpler events
occur subevents complex events vice versa report fp fn directly
instead normalize fp dividing total number times l eonard detected target
event correctly incorrectly within movies normalize fn dividing total
source code data used experiments available online appendix
ftp ftp ecn purdue edu qobi ama tar z
record times experiments system fast enough give live demos n
k boundary negation giving best though dont typically record training
videos live demo reasons less favorable parameter settings particularly k full
negation take real time hour



fif ern g ivan iskind

pick

put

stack

unstack

move

assemble

disassemble

figure key frames sample videos event types



fil earning emporal e vents

number correct occurrences target event within movies e human assessment
number occurrences target event normalized value fp estimates probability target event occur given predicted occur normalized
value fn estimates probability event predicted occur given
occur

evaluate k ama learning ran leave one movie experiments described
varying k n example movies recorded color coded objects
provide complete object correspondence information compared learned event definitions
performance two sets hand coded definitions first set hd hand coded definitions
appeared siskind response subsequent deeper understanding behavior
l eonard model reconstruction methods manually revised definitions yield another
set hd hand coded definitions gives significantly better fn performance cost
fp performance appendix c gives event definitions hd hd along set
machine generated definitions produced k ama learning given training data
k bn
bject c orrespondence
evaluate finding object correspondences ignored correspondence information provided color coding applied training event
type selected correct correspondence training thus
data set learning correspondence information given identical
correspondences manually provided except first case rules
specify particular object roles discussed section since evaluation procedure uses
role information rest experiments use manual correspondence information provided
color coding rather computing
correspondence technique perfect experiments may suited
event types furthermore likely produce errors noise levels increase since
correspondence errors represent form noise learner makes special provisions
handling noise likely poor errors common example
worst case possible single extremely noisy example cause lgg trivial e
formula true cases forced improve noise tolerance learner
varying k

first three rows table fp fn values event types k f g
n maximum bn similar trends found p n
general trend k increases fp decreases remains fn increases remains
trend consequence k cover k increases
k ama language contains strictly formulas thus k k k cover formula
never general k cover strongly suggests prove fp
non increasing k fn non decreasing k
ama overly general put assemble e gives high
fp contrast ama achieves fp event type pays penalty fn compared


fif ern g ivan iskind

k
bn

pick

put

stack

unstack

move

assemble

disassemble

fp
fn
























bn

fp
fn
























bn

fp
fn
























p

fp
fn
























bn

fp
fn
























n

fp
fn






















hd

fp
fn






















hd

fp
fn






















table fp fn learned definitions varying k hand coded definitions
ama since ama achieves fp likely advantage moving k ama
k expected fn become larger effect demonstrated
ama table
varying

rows four six table fp fn event types fp bn ng n
k similar trends observed values k general trend
degree negative information increases learned event definitions become specific
words fp decreases fn increases makes sense since negative information
added training specific structure found data exploited
k ama formulas see p definitions pick put
overly general produce high fp alternatively n learned definitions
overly specific giving fp cost high fn experiments well others
found bn yields best worlds fp event types lower fn
achieved n
experiments shown demonstrated without negation pick put
increase k arbitrarily attempt specialize learned definitions never significantly reduce fp indicates negative information plays particularly important role
constructing definitions event types



fil earning emporal e vents

c omparison



h c oded efinitions

bottom two rows table hd hd yet attempted
automatically select parameters learning e k rather focus comparing
hand coded definitions parameter set judged best performing across event
types believe however parameters could selected reliably cross validation
techniques applied larger data set case parameters would selected perevent type basis would likely even favorable comparison hand coded
definitions
learned definitions significantly outperform hd current data
set hd definitions found produce large number false negatives current
data set notice although hd produces significantly fewer false negatives event types
produces false positives pick put hand definitions
utilize pick put macros defining events
performance learned definitions competitive performance hd
main differences performance pick put learned hd definitions
achieve nearly fn learned definitions achieve fp whereas hd significant
fp b unstack disassemble learned definitions perform moderately worse hd
respect fn c learned definitions perform significantly better hd assemble
events
conjecture manual revision could improve hd perform well perhaps better learned definitions every event class nonetheless view experiment
promising demonstrates learning technique able compete sometimes
outperform significant hand coding efforts one authors
varying n
practical interest know training set size affects performance
application important method work well fairly small data sets tedious
collect event data table shows fn learning event type n
reduced experiments used k bn note fp
event types n hence shown expect fn increase n decreased
since specific general learning data yields general definitions generally fn
flat n increases slowly n increases abruptly n
see several event types fn decreases slowly n increased
indicates larger data set might yield improved event types
p erspicuity



l earned efinitions

one motivation logic event representation support perspicuityin respect
mixed note perspicuity fuzzy subjective concept realizing
say event definition perspicuous humans knowledge language
would definition natural assume human detailed knowledge model reconstruction process learner trying fit adding assumption
would presumably make definitions qualify perspicuous many complex features learned definitions appear fact due idiosyncrasies model reconstruction
process sense evaluating perspicuity output entire system


fif ern g ivan iskind

learner key route improving perspicuity sense would improve
intuitive properties model reconstruction output without change learner
learned hand coded definitions similar respect accuracy typically
learned definitions much less perspicuous simplest event types however learned
definitions arguably perspicuous look issue detail appendix c gives
hand coded definitions hd hd along set machine generated definitions
learned definitions correspond output k ama learner run training
movies event type k bn e best performing configuration
respect accuracy
perspicuous definitions p ick u p x z p ut x z definitions particular interest since short state sequences appear adequate representing event types
thus hope perspicuous ama definitions fact hand coded definitions involve short sequences consider hand coded definitions p ick u p x z definitions
roughly viewed timelines form begin trans end state begin asserts facts
indicate z held x end asserts facts indicate held
x z state trans intended model fact l eonards model reconstruction
process handle transition begin end smoothly definition
begin end work well make similar observations p ut x z
figure gives learned ama definitions p ick u p x z p ut x z
definitions contain six two timelines respectively since definitions consists
multiple parallel timelines may first seem perspicuous however closer examination
reveals definition single timeline arguably perspicuouswe
placed perspicuous timelines beginning definition perspicuous timelines
natural begin trans end interpretation fact practically equivalent definitions
p ick u p x z p ut x z hd
mind notice hd definitions overly general indicated significant
false positive rates learned definitions however yield false positives without significant
increase false negatives learned definitions improve upon hd essentially specializing
hd definitions e perspicuous timelines conjoining non perspicuous
timelines non perspicuous timelines often intuitive capture patterns
events help rule non events example learned definition p ick u p x z
non perspicuous timelines indicate attached z true transition period
event attachment relationship make intuitive sense rather represents
systematic error made model reconstruction process pick events
summary see learned definitions p ick u p x z p ut x z
contain perspicuous timeline one non perspicuous timelines perspicuous timelines give intuitive definition events whereas non perspicuous timelines capture nonintuitive aspects events model reconstruction process important practice
note experienced users primary difficulty hand coding definitions l eonard
note event logic definition p ick u p x z hd written compact form
definition converted hence ama rather hd cannot translated exactly
since uses disjunctionit disjunction two timelines
primary difference hd definitions contain negated propositions learner considers
proposition negation proposition true point training movies many negated
propositions hd never appear positively thus included learned definitions



fil earning emporal e vents

determining non perspicuous properties must included typically requires many
iterations trial error automated technique relieve user task alternatively
could view system providing guidance task
large definitions tack w x z u nstack w x z events nearly identical
put pick respectively difference picking
putting onto two block rather single block tower e composed blocks z
thus might expect perspicuous ama definitions however see
learned definitions tack w x z u nstack w x z figures involve
many timelines p ick u p w x p ut w x accordingly
definitions quite overwhelming much less perspicuous
despite large number timelines definitions general structure
pick put particular contain distinguished perspicuous timeline
placed beginning definition conjoined many non perspicuous timelines
clear perspicuous timelines natural begin trans end interpretation
similar definitions hd case however definitions
hd overly general committing false positives thus inclusion
non perspicuous timelines detrimental effect since unnecessarily specialize definition
resulting false negatives
suspect primary reason large number non perspicuous timelines relative
definitions pick put stems increased difficulty constructing
force dynamic inclusion two block tower examples causes modelreconstruction process produce unintended particularly transition periods
tack u nstack often many unintuitive physically incorrect patterns
involving three blocks hand produced transition period learner
captures patterns roughly via non perspicuous timelines likely generalizing
definitions including training examples would filter timelines making
overall definition perspicuous alternatively interest consider pruning learned
definitions straightforward way generate negative examples
could remove timelines generalizing definition contribute toward rejecting
negative examples unclear prune definitions without negative examples
hierarchical events ove w x z ssemble w x z isassemble w x z
inherently hierarchical composed four simpler event types hand coded definitions leverage structure utilizing simpler definitions macros light
clear viewed non hierarchically learner events involve relatively
long state sequences thus ama adequate writing perspicuous definitions
spite representational shortcoming learned ama definitions perform quite well
performance supports one arguments ama section namely given
easier short rather long sequences practical finding definitions long
events conjoin short sequences within events examining timelines learned
ama definitions reveals might expect timeline captures often understandable
property long event sequence conjunction timelines cannot considered
perspicuous definition future direction utilize hierarchical learning techniques
improve perspicuity definitions maintaining accuracy


fif ern g ivan iskind

n

pick

put

stack

unstack

move

assemble

disassemble

























































table fn k

bn values n

note however level learned definition ove w x z given figure perspicuous particular first timeline naturally interpreted giving
pre post conditions move action initially x supported hand w
empty finally x supported z hand w empty thus care preand post conditions might consider timeline perspicuous remaining timelines
definition capture pieces internal event structure facts indicating x moved
hand weaker case made assemble disassemble first timeline
learned definitions figures interpreted giving pre post conditions
however cases pre post conditions assemble disassemble quite incomplete
incompleteness due inclusion examples model reconstruction process
properly handle initial final moments

related work
discuss two bodies related work first present previous work visual event recognition relates experiments second discuss previous approaches learning
temporal patterns positive data
visual event recognition
system unique combines positive learning temporal relational
force dynamic representation recognize events real video prior work investigated subsets features systembut date system combined pieces
together incorporating one pieces system significant endeavor respect competing approaches directly compare system given
following representative list systems common features meant
comprehensive focuses pointing primary differences systems primary differences actually render systems loosely related

borchardt presents representation temporal relational force dynamic event definitions definitions neither learned applied video regier presents techniques learning temporal event definitions learned definitions neither relational force
dynamic applied video addition learning technique truly positive onlyrather
extracts implicit negative examples event type positive examples event types


fil earning emporal e vents

yamoto ohya ishii brand essa siskind morris brand oliver
pentland bobick ivanov present techniques learning temporal event
definitions video learned definitions neither relational force dynamic pinhanez
bobick brand present temporal relational event definitions recognize
events video definitions neither learned force dynamic brand b mann
jepson present techniques analyzing force dynamics video neither formulate
event definitions apply techniques recognizing events learning event definitions
learning temporal patterns
divide body work three main categories temporal data mining inductive logic
programming finite statemachine induction
temporal data mining sequence mining literature contains many general specific levelwise finding frequent sequences agrawal srikant mannila toivonen
verkamo kam fu cohen hoppner explore specific togeneral previous work researchers studied mining temporal
patterns languages interpreted placing constraints partially totally ordered
sets time points e g sequential patterns agrawal srikant episodes mannila et al
languages place constraints time points rather time intervals work
recently work mining temporal patterns interval pattern
languages kam fu cohen hoppner
though languages learning frameworks vary among approaches share two
central features distinguish first typically goal
finding frequent patterns formulas within temporal data setour focused
finding patterns frequency one covering positive examples first learning
application visual event recognition yet required us patterns frequency less
one however number ways extend method direction
becomes necessary e g deal noisy training data second approaches
use standard general specific level wise search techniques whereas chose take specificto general one direction future work develop general specific level wise
finding frequent formulas compare specific general
another direction design level wise version specific general algorithmwhere
example obtained k ama lgg used efficiently calculate
k ama lgg whereas level wise conceptually straightforward general tospecific framework clear specific general case familiar
temporal data mining systems take specific general
first order learning section pointed difficulties existing first order
clausal generalization techniques learning ama formulas spite difficulties still
possible represent temporal events first order logic without capturing ama
semantics precisely apply general purpose relational learning techniques e g inductive
logic programming ilp muggleton de raedt ilp systems require positive
negative training examples hence suitable current positive framework
exceptions include g olem muggleton feng p rogol muggleton c lau dien de raedt dehaspe among others performed full evaluation


fif ern g ivan iskind

inputs

ama

subsumption
semantic
syntactic
p
p
conp complete p

semantic ama lgg
lower upper size
p
conp exp
conp nexp exp

syntactic ama lgg
lower upper size
p
conp exp
p
conp exp

table complexity summary lgg complexities relative input plus output size
size column reports worst case smallest correct output size indicates
conjecture
systems early experiments visual event recognition domain confirmed belief
horn clauses lacking special handling time give poor inductive bias particular many
learned clauses patterns simply make sense temporal perspective
turn generalize poorly believe reasonable alternative may incorporate
syntactic biases ilp systems done example cohen dehaspe de raedt
klingspor morik rieger work however chose work directly
temporal logic representation
finite state machines finally note much theoretical empirical
learning finite state machines fsms angluin lang pearlmutter price
view fsms describing properties strings symbol sequences case however
interested describing sequences propositional rather sequences symbols
suggests learning type factored fsm arcs labeled sets propositions
rather single symbols factored fsms may natural direction extend
expressiveness current language example allowing repetition aware
work concerned learning factored fsms however likely inspiration drawn
symbol fsm learning

conclusion
presented simple logic representing temporal events called ama shown
theoretical empirical learning ama formulas empirically weve given first
system learning temporal relational force dynamic event definitions positive input
applied system learn definitions real video input resulting
performance matches event definitions hand coded substantial effort human
domain experts theoretical side table summarizes upper lower bounds
shown subsumption generalization associated logic
case provided provably correct matching upper bound shown
table shows worst case size smallest lgg could possibly take relative input
size ama inputs key table polynomial time
subsumption ama syntactic subsumption conp lower bound ama subsumption
exponential size lggs worst case apparently lower complexity syntactic ama
lgg versus semantic lgg described build learner applied
visual event learning domain date however definitions learn neither crossmodal perspicuous performance learned definitions matches hand

fil earning emporal e vents

coded ones wish surpass hand coding future intend address cross modality
applying learning technique domain believe addressing perspicuity
lead improved performance

acknowledgments
authors wish thank anonymous reviewers helping improve work
supported part nsf grants iis iis nsf graduate fellowship
fern center education information assurance security
purdue university part work performed siskind nec institute
inc

appendix internal positive event logic
give syntax semantics event logic called internal positive event logic
ipel logic used main text motivate choice small subset
logic ama showing proposition ama define set ipel
define
event type e set said internal whenever contains model
hm contains model agrees truth assignments
full event logic allows definition non internal events example formula p
satisfied hm interval entirely preceding p satisfied
hm thus internal applications considering appear require
non internal events thus currently consider events internal
call event type positive contains model hm truth
assignment assigning propositions value true positive event type cannot require proposition false point time
ipel fragment full propositional event logic describe positive internal
events conjecture yet proven positive internal events representable
full event logic siskind represented ipel formula formally syntax
ipel formulas given

e true j prop j e e j r e j e r e


ei ipel formulas prop primitive proposition sometimes called primitive event
type r subset thirteen allen interval relations fs f b si di bi ai oi g allen
r subset restricted set allen relations fs f g semantics
allen relation given table difference ipel syntax full propositional
event logic event logic allows negation operator full event logic r
subset thirteen allen relations operators used define ama formulas
merely abbreviations ipel operators f g fmg respectively ama subset
ipel though distinguished subset indicated proposition
thirteen allen interval relations binary relations set closed naturalnumber intervals table gives definitions relations defining r n n
allen relation r satisfiability ipel formulas defined follows


fif ern g ivan iskind










relation

f

b





n n
n n
n n
n n
n n
n n
n n

english
starts
finishes


meets
overlaps
equals

definition
n
n
n

n
n
n

n
n n
n n
n n

inverse
si

di
bi
mi
oi


table thirteen allen relations adapted semantics

true satisfied every model
prop satisfied model hm iff x assigns prop true every x
e e satisfied model iff satisfies e satisfies e
satisfied model hm iff r r interval r
hm satisfies e
e r e satisfied model hm iff r r exist intervals
r pan hm satisfies e hm satisfies e
prop primitive proposition e ei ipel formulas r set allen relations
pan minimal interval contains definition easy
induction number operators connectives formula ipel formulas
define internal events one verify definition satisfiability given earlier ama
formulas corresponds one give

appendix b omitted proofs
lemma timeline model satisfies witnessing
interdigitation map
proof assume hm satisfies timeline sn let
map straightforward argue induction length exists mapping
v states sub intervals

v satisfies
v includes initial time point
v sn includes final time point
n v si meets v si see table


fil earning emporal e vents

let v relation states members true v note
conditions v ensure every every appear tuple v
necessarily together use v construct witnessing interdigitation w
let r total one one onto function time points corresponding states
noting one state time point map hm note r preserves
ordering j r later r j let w composition v r
relations v r
w interdigitation first state appears
tuple w w piecewise total states must appear trivially appears
tuple v r total states appear appears tuple v r
onto states
suffices states w w implies
later w simultaneously consistent conditions defining v
imply every number v less equal every j v order preservation
property r noted implies every state v r later state
v r desired w interdigitation
argue w witnesses consider w
construction w must v ith state since map
follows set true propositions since v know satisfies
follows

ipel model embeds model satisfies e satisfies e
proof consider hm hm embeds let
map map assume e ipel satisfied
e satisfied
know definition embedding thus witnessing interdigitation w proposition know one one correspondence
numbers states denote state corresponding
lemma e

si ti correspondence allows us naturally interpret w mapping v subsets
subsets follows v equals set
si co occurs ti w use following properties v




sub interval v sub interval

sub interval hm v embeds hm

sub intervals r allen relation ri iff v rv
sub intervals v pan pan v v



v

sketch proofs properties use induction length
definition interdigitation since v interval map hm v well defined
map hm v map hm follows assumption embeds
appendix see allen relations defined terms relation natural


fif ern g ivan iskind

number endpoints intervals v preserves singleton sets
e every member v g every member v fj g j v commutes set union follows v preserves allen interval relations use fact
v preserves sense argued along fact pan depends
minimum maximum numbers follows definition interdigitation
construction v
use induction number operators connectives e prove
satisfies e must base case e prop prop primitive proposition
true since satisfies e know prop true x x since w witnesses
know prop true x prop true x x v x
therefore since v prop true x x hence satisfies e
inductive case assume claim holds ipel formulas fewer n operators connectiveslet e e two formulas e e e claim trivially
holds e r e r must subset set relations fs f g notice e
written disjunction r e formulas r single allen relation r thus
suffices handle case r single allen relation suppose e fsg e since
satisfies e must sub interval hm satisfies e let
v know properties v v hence furthermore know hm embeds hm thus inductive hypothesis hm
satisfies e combining facts get e satisfied similar arguments hold
remaining three allen relations finally consider case e e r e r
set allen relations suffices handle case r single allen relation
r since satisfies e e r e know sub intervals
pan r hm satisfies e hm satisfies e facts
properties v easy verify satisfies e
lemma given formula subsumes member set formulas
subsumes member ig dually subsumed member
subsumed member case length
bounded size
proof prove ig proof follows similar lines let



f ng sm assume n proposition witnessing interdigitation wi combine wi

interdigitation corresponding member ig subsumed
construct interdigitation first notice sj wi specifies set
states possibly single state least one co occur sj furthermore since
wi interdigitation easy set states corresponds consecutive subsequence states let j timeline corresponding subsequence
let j fj j ng ffj interdigitation j take union
ffj j interdigitation since state appearing
must co occur least one state sj least one wi least one tuple ffj
hence tuple piecewise total
define restriction j components j j relation given
taking set pairs formed shortening tuples omitting components except


fil earning emporal e vents

ith j th likewise define ffi j
k k interdigitation suffices
j simultaneously consistent consider states si sj timelines
j respectively j si sj suppose ti occurs si tj j
j ti tj holds suffices sj later tj j since j si sj j ti tj
j


must ffi j
k si sj ffk ti tj respectively k k know k k

si ti wi simultaneously consistent k k sj later tj j
ffk must simultaneously consistent interdigitation otherwise k k sj
later tj j desired wj simultaneously consistent simultaneously
consistent interdigitation
let member ig corresponding know
state intersection states tuple ffj say derives
ffj consider interdigitation sj sj
derives ffj piecewise total every tuple derives ffj ffj
empty simultaneously consistent tuples deriving later ffk must later
lexicographic ordering given simultaneous consistency wk interdigitations used
construct ffj finally know sj subsumes e subset state tuple
ffj wk witnessing interdigitation k hence subsumes subset
intersection states therefore sj co occurs
sj thus witnessing interdigitation proposition
size bound follows since pointed main text size member
ig upper bounded number states


lemma given timelines sm tn witnessing
interdigitation iff path subsumption graph sg v
vm n
proof subsumption
graph sg equal hv e v fvi j j j ng

e hvi j vi j j si tj si tj j j j note
correspondence vertices state tupleswith vertex vi j corresponding hsi tj
forward direction assume w witnessing interdigitation
know states si tj co occur w si tj since w witnesses
vertices corresponding tuples w called co occurrence vertices satisfy
first condition belonging edge e si tj follows definition
interdigitation v vm n co occurrence vertices consider co occurrence
vertex vi j equal vm n lexicographically least co occurrence vertex vi j vi j
ordering vertices
ordering
pair subscripts j j satisfy

requirements vi j vi j e j j
co occurrence vertex vi j contradicting w piecewise total j j
since w piecewise total must co occurrence vertex vi j
contradicts simultaneous consistency w contradicts
lexicographically least choice vi j follows every co occurrence vertex vm n
edge another co occurrence vertex closer manhattan distance vm n thus
path v vm n
reverse direction assume path vertices sg v vm n
given vi j vi j vir js j ir js n let w set state


























fif ern g ivan iskind

tuples corresponding vertices along path w must simultaneously consistent
orderings directed edges non decreasing orderings w must
piecewise total edge cross one state transition
edge set definition w interdigitation finally definition edge set e ensures
tuple hsi tj w property si tj w witnessing interdigitation
showing desired
lemma given n let conjunction timelines
n



f propn truei falsei propn propn falsei truei propn g

following facts truth assignments boolean variables p pn
truth assignment propn sa propn semantically equivalent member

truth assignment propn sa propn
proof prove first part lemma construct interdigitation
corresponding member equivalent propn sa propn intuitively construct
ensuring tuple consists states form truek falsek agree
truth assignmentthe union states tuple taken equal sa let
ft g interdigitation exactly five state tuples ti assign
states timeline tuples follows
k k




n pk true

timeline q ruek f alsek q assign state si tuple ti
assign state well
timeline q f alsek ruek q assign state tuple ti
state tuple well

k k n pk false assign states tuples item
interchanging roles ruek f alsek

clear piecewise total simultaneously consistent state orderings
interdigitation union states equal
propn since propn included state tuples furthermore see
union states equal sa thus member corresponding equal
propn propn sa propn propn semantically equivalent propn sa propn
desired
prove second part lemma let member first argue
every state must contain truek falsek k n k since contains propn truek falsek propn every member must subsumed propn truek
falsek propn subsumed propn truek falsek propn every state propn
truek falsek propn contains truek falsek implying desired


fil earning emporal e vents

next claim k n truek falsek e states
include truek states include falsek possibly prove claim assume
sake contradiction k truek falsek combining assumption first claim see must states contains ruek
f alsek contains f alsek ruek respectively consider interdigitation
corresponds member know equal union
states tuples respectively must include one state timeline
propn truek falsek propn propn falsek truek propn
clearly since include falsek includes states likewise includes
states follows simultaneously consistent state orderings
contradicting choice interdigitation shows
truek falsek
define truth assignment k n pk truek
since k truek falsek follows state subsumed
sa furthermore since begins ends propn easy give interdigitation
propn sa propn witnesses propn sa propn thus
propn sa propn
lemma let given page proof theorem let
v
ig f g whose timelines subset omits square
timeline
proof since timelines subset timelines know remains
constructing timeline covered
let n square timeline included recall
si single proposition proposition set p fpi j j n j ng
consecutive states si si si pi j si pi j pi j define
timeline n si p si
fg
sake contradiction assume must interdigitation w
witnessing induction w si sj implies j
base case know since w false since
w witnesses subsumption inductive case assume claim holds
w si sj know si si thus j w piecewise total must
w si sj j induction hypothesis must j since w
simultaneously consistent sk sk state orderings j j
follows j desired given claim see n cannot co occur w
state contradicting fact w piecewise total thus
let timeline fg construct interdigitation
witnesses note assumed square need let j smallest
index sj j since p know j must exist
range j use index j guide construction interdigitation let w
interdigitation exactly following co occurring states e state tuples




j

si co occurs


fif ern g ivan iskind

sj co occurs
j n si co occurs

j


easy check w piecewise total simultaneously consistent state
orderings interdigitation w witnesses
showing states subsumed states co occur w co occurring
states si corresponding first item si implies
contained si giving si consider co occurring states sj
second item since square choose k l sj pk l sj
pk l pk l addition since sj j j pk l pk l pk l
sj j cases state j equal sj follows
noting proposition indices never decrease across timeline therefore
j sj finally co occurring states si item three
si since pn n states thus shown co occurring
states w state subsumed co occurring state therefore w witnesses
implies
lemma model hm ama
hm

covers hm

iff

f covers

proof recall set propositions set p fp pn g
assume ama uses primitive propositions p possibly negated
set propositions p fp pn g assume formulas ama use propositions
p p set p p exactly one pi pi
true time note f ama hm prove lemma via
straightforward induction structure proving literals states
timelines finally ama formulas
prove literals consider two cases third case true trivial first
single proposition pi f pi pi consider model hm let
hm hm following relationships yield desired

covers hm

iff
iff
iff

assigns pi true
assigns pi true
pi covers hm

definition satisfiability
definition
definition satisfiability

second case negated proposition pi get pi let
hm hm hm following relationships yield desired

covers hm

iff
iff
iff

assigns pi false
assigns pi true
pi covers hm

definition satisfiability
definition
definition satisfiability

proves lemma literals
note
pk l

required square possible equal


sj



sj

e could equal

fil earning emporal e vents

prove states use induction number k literals state base
case k state single literal proven assume lemma
holds states k fewer literals let l lk hm
inductive assumption know l lk covers hm iff f covers hm
base case know lk covers hm iff f lk covers hm facts
definition satisfiability states get covers hm iff f f lk covers
hm clearly f property f f lk f showing lemma holds
states
prove timelines use induction number k states timeline
base case k timeline single state proven assume
lemma holds timelines k fewer states let sk hm
hm hm following relationships

covers hm

iff
iff
iff
iff

exists covers hm
sk covers hm hm
exists f covers hm
f covers hm hm
f f covers hm
f covers hm

first iff follows definition satisfiability second follows inductive
hypothesis base case fact hm hm third
follows definition satisfiability fourth follows fact f f
f
finally prove ama formulas induction number k timelines
formula base case k formula single timeline proven
assume lemma holds ama formulas k fewer timelines
let k hm inductive assumption know
k covers hm iff f covers hm base case
know k covers hm iff f k covers hm facts definition
satisfiability get covers hm iff f f k covers hm clearly f
property f f k f showing lemma holds ama formulas
completes proof

appendix c hand coded learned definitions used experiments
give two sets hand coded definitions hd hd used experimental
evaluation give set learned ama event definitions seven event types
learned definitions correspond output k ama learning given available
training examples examples per event type k bn event definitions
written event logic p denotes negation proposition p



fif ern g ivan iskind







p ick u p x z



p ut x z



tack w x z



u nstack w x z



ove w x z
ssemble w x z
isassemble w x z














x z x z
c
b upported attached x z
b
c
c
b
attached x upports x


c
b



c
b


upports z



c
b





c
b




upported x attached z

c
b




c
b



upports x upports z


c
b



b

upports x z upports z x
c
c
b
c
b
b attached x attached z
c

c
b
attached x upports x


c
b





c
b

upports z




c
b





c
b




upported

x





ttached


z






c
b











upports


x





upports


z








upports x z upports z x


x z x z
c
b upported attached x z
b
c
c
b

ttached

x upports x


c
b


c

b





upports

z





c

b




c
b






upported

x





ttached


z





c
b





c
b






upports


x





upports


z




c
b



b




upports

x
z





upports

z
x

c
c
b
c
b
b attached x attached z
c

c
b

ttached

x upports x




c
b


c
b

upports z


c
b


c
b

upported x attached z


c
b





upports x upports z






upports x z upports z x


z w z x z
p ut w x upports z
attached z


z w z x z
p ick u p w x upports z attached z
z p ick u p w x p ut w x z
p ut w z f g tack w x z
u nstack w x z f g p ick u p x z




figure hd event logic definitions seven event types



fil earning emporal e vents




x z x z
b
c
attached x z
b upported
c

c
b
b
c

ttached x upports x




b
c




b
c
upports z c ontacts z



b
c





b
c
upported x attached z f mg

b
c





b
c

upports x upports z


b
c



p ick u p x z b
c

b
c

upports x z upports z x



b

c
b
c


ttached

x




upports

x




b
c




b
c





upports

z






b
c




b
c






upported

x





ttached


z




b
c




b
c










upports


x





upports


z








upports x z upports z x


x z x z
c
b
attached x z
c
b upported

c
b
c
b

ttached x upports x


c
b




c
b



upports

z








c
b




c
b





upported

x





ttached


z






f


g
c
b



c

b







upports


x





upports


z


b
c



p ut x z b
c

c
b



upports x z upports z x

c
b

c
b


attached x upports x

c
b





c
b

upports z c ontacts z


c
b





b
c

upported x attached z

b
c





b
c


upports x upports z








upports x z upports z x

figure part hd event logic definitions



fif ern g ivan iskind





w x w x
b z w z x z
c
b
c
b upported x attached w
c
b
c

b
c
attached w x upports w x

b

c


b


c


upports x

b




c


b


c
upports z c ontacts z

b




c


b

c



attached z

f
mg
b


c





b
c



upported w attached x

b

c




b
c


upports x w upports x

b


c
b
c
b
c
upports w upports w

b
c
attached w x upports w x

b
c


b
c




upports x c ontacts x

b
c





b
c





b
c
upports z c ontacts z





b
c




b
c

attached z



b
c




b
c
upported w attached x








upports x w upports x






upports w upports w


w x w x
c
b z w z x z
c
b
c
b upported x attached w
c
b

c
b
attached w x upports w x

c

b

c


b



c

upports x c ontacts x
b




c


b


c

b

upports z c ontacts z


c


b

c

attached z
b
f mg



c


b


c

b
upported w attached x


c

b


upports x w upports x

c

b



c
b
c
b
upports w upports w
c
b
attached w x upports w x

c

b



c


b

c


b
upports x



c


b

upports z c ontacts z
c


b




c


b

c


b
attached z



c


b

c

b
upported w attached x







upports x w upports x






upports w upports w
z p ick u p w x p ut w x z
p ut w z f g tack w x z
u nstack w x z f g p ick u p x z


tack w x z







u nstack w x z

ove w x z
ssemble w x z
isassemble w x z
















figure part ii hd event logic definitions



fil earning emporal e vents



upported upports z





b
c ontacts z upports x



b



b

attached x attached z

b
b
upported
b


b
upported upports x



b


b



attached x upports z



b


b
c ontacts z attached z
b
b upported

b



b
upported attached x
b


b
attached z

b



b
b upported attached x
b upported c ontacts z
b
b
b upported attached z
b
b upported attached x

b
upported upports z


b

c ontacts z upports x
b


b
b


ttached

x attached z

b


b


upported





upports

z






b

b upported attached x

b
b upported upports z


b


upported attached x
b
b

b

upported

upports x
b




attached x upports z













p ick u p x z

















c ontacts z attached z

p ut x z






c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c




upported upports x attached x




upports z c ontacts z

b


b



b
attached z
b

b upported


b





b
upported upports z c ontacts z

b



b


upports

x

ttached

x
b


b
b
upported attached x


upported attached x attached z












upported

figure learned ama definitions p ick u p x z p ut x z




c
c
c
c
c
c
c
c
c
c
c
c


fif ern g ivan iskind




b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b




h









upported attached w x upports z c ontacts z
upports x
upports x
c ontacts x
attached x




















c
c
c
upported upported x upports x c ontacts x c ontacts z

c
c
upports x attached w x attached x attached z
c
c
upported attached w x
c
upported attached x

c
c
upported upported x upports x c ontacts x

c
c
upported attached w x
upported upports x attached w x attached x attached z c
c
c
upported upported x upports x

c
c
upported attached w x
c
upported upported x upports x upports x attached w x
c
c
upported upported x upports x

c
c
upported attached w x upports z c ontacts z
c
upported attached z

c
c
upported upported x upports x c ontacts z
c
c
upported attached w x upports z c ontacts z
c
upported attached w x attached z

c
c
hs upported upported x upports x

c
upported attached w x upports z c ontacts z
c


c
upports x upports x c ontacts x attached x
c

c
upported attached w x

c
upported upported x upports x
c

c
upported attached w x
c
upported attached w x upports z c ontacts z
c
c
upported upported x
c

c
upported attached w x
c
upported attached w x upports z upported x
c
c
upported upported x
c

c
hs upported attached w x

c
upported c ontacts z upports z upported x
c


c
upports x attached x

c
c
upported upported x

c
upported
c
h

c
upported c ontacts z upports z upported x


c
upports x attached x attached z
c

c
upported upported x upports x
c
c
upported attached w x
c
upported c ontacts z upported x
c
c
upported upported x upported x
c
upported attached w x
c
c
hs upported upported x upports x

c
upported upported x upports x c ontacts x c ontacts z
c
c
upports x attached w x attached x attached z
c

upported
c
h


c
upported upported x upports x upports z
c

c
c
ontacts x c ontacts z
h

upported upported x upports x c ontacts x c ontacts z



upported
h

upports x attached w x attached x attached z

figure learned ama definition tack w x z



fil earning emporal e vents




b

b

b

b
b
b
b

b
b


b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b

b

b
b
b
b
b

b

b
b
b
b

b

b
b
b
b
b

b

b
b
b
b
b
b
b
b
b
b

b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b










upported x upported upports x




c ontacts x c ontacts z upports w x




upports x attached w x attached x


upported x upported


upported x upported attached w x upports z



c ontacts z attached w x upports x





upports x c ontacts x


attached x attached z

upported x upported upports x
upported x upported attached w x attached z
upported x upported attached w x c ontacts z
upported x upported upports x c ontacts z
upported x upported attached z

upported x upported attached w x c ontacts z
upported x upported upports x c ontacts x
upported x upported upports x attached x
upported x upported attached w x
upported x upported upports x
upported x upported c ontacts z
upported x upported attached w x

upported x upported upports x




upported x upported attached w x


upported x upported attached w x upports z


c ontacts z attached w x upports x




upports x c ontacts x


attached x attached z




upported x upported upports x



c ontacts x c ontacts z




upports w x upports x

attached w x attached x




upported x upported upports x


upported x upported attached w x
upported x upported upports x c ontacts z
upported x upported upports x attached z
upported x upported attached w x

upported x upported upports x



upported x upported upports x attached z


upports x attached w x attached x


upported x upported attached w x

upported x upported
upported x upported upports x attached w x
upported x upported upports w x attached w x
upported x upported upports x
upported x upported upports w x attached w x
upported x upported attached w x

upported x upported upports x



upported x upported c ontacts z

upports x attached x attached z


upported x upported

figure learned ama definition u nstack w x z




c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c


fif ern g ivan iskind





b

b

b

b
b
b
b
b

b

b

b

b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b








upported x upports x c ontacts x
upports w x upports z x c ontacts x z
attached w x attached x attached x z





upported x
upported x upports z x c ontacts x z


upports w x upports x c ontacts x
attached w x attached x attached x z
upported x upports x

upported x attached w x

upported x


upported x

upported x attached w x attached x z

upported x


upported x

upported x attached x z
upported x c ontacts x z


upported x

upported x attached w x upports w x

upported x


upported x

upported x attached w x attached x

upported x

upported x c ontacts x

upported x attached x

upported x


figure learned ama definition ove w x z





































c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c


fil earning emporal e vents





b


b
b


b
b
b
b
b

b

b

b

b

b
b
b
b
b

b

b
b
b
b

b

b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b










upported x upports z upports x





c ontacts x c ontacts z






attached w x attached z


true










upported x upported upports z

upports x c ontacts x

c ontacts z attached w
upported x upports z upports x
c ontacts x c ontacts z
attached w x attached z

attached w
upported





true
































upported attached w x attached z

upported


true

upported attached z
upported c ontacts z
true
upported upports z c ontacts z attached w x
upported


true

upported attached w attached z

upported
figure learned ama definition ssemble w x z

















c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c


fif ern g ivan iskind




b

b

b

b

b
b
b
b
b

b

b

b

b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b









upported x upported upports x upports z




c ontacts x c ontacts z upports w x





upports w upports x attached x w



attached w attached x attached z

upported






upported upported x upports w x




upports z upports x c ontacts x



c ontacts z attached x w attached z
upported x upported




upported x upported upports w x


upports z c ontacts z attached x w



upported



upported x upported upports z




upports x c ontacts x c ontacts z

upported x upported upports x attached x


upported

upported x upported upports x c ontacts z




upported x upported upports x


upports z attached x attached z



upported

upported x upported upports x




upported x upported upports x


upports z attached x attached z attached x w



upported

upported

upported attached w attached z


upported

upported

upported upports w attached w

upported

























figure learned ama definition isassemble w x z




c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c


fil earning emporal e vents

references
agrawal r srikant r mining sequential patterns proceedings eleventh
international conference data engineering pp
allen j f maintaining knowledge temporal intervals communications acm

angluin learning regular sets queries counterexamples information
computation
bacchus f kabanza f temporal logics express search control knowledge
artificial intelligence
bobick f ivanov action recognition probabilistic parsing proceedings ieee computer society conference computer vision pattern recognition
pp santa barbara ca
borchardt g c event calculus proceedings ninth international joint conference
artificial intelligence pp los angeles ca
brand inverse hollywood video scripts storyboards via
causal analysis proceedings fourteenth national conference artificial intelligence pp providence ri
brand b physics visual understanding computer vision image understanding
brand essa causal analysis visual gesture understanding proceedings
aaai fall symposium computational integrating language vision
brand oliver n pentland coupled hidden markov complex action
recognition proceedings ieee computer society conference computer vision
pattern recognition
cohen p fluent learning elucidating structure episodes proceedings
fourth symposium intelligent data analysis
cohen w grammatically biased learning learning logic programs explicit antecedent description lanugage artificial intelligence
cohen w hirsh h learning classic description logic theoretical experimental proceedings fourth international conference principles knowledge
representation reasoning pp
de raedt l dehaspe l clausal discovery machine learning
dehaspe l de raedt l dlab declarative language bias formalism proceedings
ninth international syposium methodologies intelligent systems pp
fikes r nilsson n strips application theorem proving
solving artificial intelligence
hoppner f discovery temporal patternslearning rules qualitative behaviour
time series proceedings fifth european conference principles practice
knowledge discovery databases


fif ern g ivan iskind

kam p fu discovering temporal patterns interval events proceedings
second international conference data warehousing knowledge discovery
klingspor v morik k rieger learning concepts sensor data mobile
robot artificial intelligence
lang k pearlmutter b price r abbadingo one dfa learning competition evidence driven state merging proceedings fourth
international colloquium grammatical inference
lavrac n dzeroski grobelnik learning nonrecursive definitions relations
linus proceedings fifth european working session learning pp

mann r jepson toward computational perception action proceedings
ieee computer society conference computer vision pattern recognition pp
santa barbara ca
mannila h toivonen h verkamo discovery frequent episodes sequences
proceedings first international conference knowledge discovery data mining
mitchell generalization search artificial intelligence
morales e pal pattern first order inductive system machine learning

muggleton inverting entailment progol machine intelligence
muggleton feng c efficient induction logic programs muggleton ed
inductive logic programming pp academic press
muggleton de raedt l inductive logic programming theory methods journal
logic programming
pinhanez c bobick scripts machine understanding image sequences
proceedings aaai fall symposium series computational integrating
language vision
plotkin g automatic methods inductive inference ph thesis edinburgh university
regier p acquisition lexical semantics spatial terms connectionist model
perceptual categorization ph thesis university california berkeley
roth yih w relational learning via propositional information extraction case study proeedings seventeenth international joint conference artificial
intelligence
shoham temporal logics ai semantical ontological considerations artificial
intelligence
siskind j visual event classification via force dynamics proceedings seventeenth national conference artificial intelligence pp austin tx
siskind j grounding lexical semantics verbs visual perception force
dynamics event logic journal artificial intelligence


fil earning emporal e vents

siskind j morris q maximum likelihood visual event classification proceedings fourth european conference computer vision pp
cambridge uk springer verlag
talmy l force dynamics language cognition cognitive science
yamoto j ohya j ishii k recognizing human action time sequential images
hidden markov model proceedings ieee conference computer vision
pattern recognition pp




