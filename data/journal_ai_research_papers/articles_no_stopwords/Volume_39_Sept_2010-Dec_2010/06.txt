Journal Artificial Intelligence Research 39 (2010) 663-687

Submitted 6/10; published 11/10

Effective Algorithm Phase Transitions
Directed Hamiltonian Cycle Problem
Gerold Jager

gej@informatik.uni-kiel.de

Computer Science Institute,
Christian-Albrechts-University Kiel,
D-24118 Kiel, Germany

Weixiong Zhang

weixiong.zhang@wustl.edu

Department Computer Science Engineering,
Washington University,
St. Louis, Missouri 63130, United States

Abstract
Hamiltonian cycle problem (HCP) important combinatorial problem
applications many areas. among first problems used studying intrinsic properties, including phase transitions, combinatorial problems. thorough theoretical
experimental analyses made HCP undirected graphs, limited
amount work done HCP directed graphs (DHCP). main contribution work effective algorithm DHCP. algorithm explores
exploits close relationship DHCP Assignment Problem (AP)
utilizes technique based Boolean satisfiability (SAT). combining effective algorithms AP SAT, algorithm significantly outperforms previous exact DHCP
algorithms, including algorithm based award-winning Concorde TSP algorithm.
second result current study experimental analysis phase transitions
DHCP, verifying refining known phase transition DHCP.

1. Introduction
undirected graph G = (V, E) Hamiltonian contains Hamiltonian cycle (HC),
cycle visits vertex exactly once. Given graph, Hamiltonian cycle problem
(HCP) find HC prove HC exists graph. decision version
HCP among first problems proven N P-complete (Karp, 1972). HCP
well-known problem many applications different areas, e.g., Hamiltonian cycle
game game theory (Stojakovic & Szabo, 2005), problem finding knights tour
chessboard artificial intelligence (Henderson & Apodaca, 2008), DNA Physical
Mapping biology (Grebinski & Kucherov, 1996). Much research done
HCP undirected graphs. reviews, see work Bondy (1995), Christofides (1975),
Chvatal (1985), Gould (1991), Vandegriend (1998), Gutin Moscato (2000).
particular, many algorithms developed HCP (Angluin & Valiant, 1979;
Bollobas, Fenner & Frieze, 1987; Frieze, 1988a; Posa, 1976; Vandegriend, 1998), reviewed
Stony Brook Algorithm Repository (Skiena, 2008). One effective algorithm
HCP based related Traveling Salesman Problem (TSP) undirected weighted
graph, problem finding HC minimum total weight.
c
2010
AI Access Foundation. rights reserved.

fiJager & Zhang

HCP canonical problem understanding intrinsic properties combinatorial problems. One problem property called phase transition. Consider
undirected graph Gn,m edges randomly chosen possible n(n 1)/2 edges
n vertices. expected keeping size n, i.e., number vertices,
constant increasing number edges m, probability random graph Gn,m
Hamiltonian increases 0 1. Surprisingly, probability Hamiltonian
Gn,m exhibits sharp, dramatic transition 0 1, transition occurs approximately = dc n (log n + log log n)/2c (Bollobas, 1985; Cheeseman, Kanefsky &
Taylor, 1991; Komlos & Szemeredi, 1983). Furthermore, experimentally shown
constant c 1.08 1.10, probability Gn,m Hamiltonian
1/2 (Vandegriend & Culberson, 1998). Phase transitions HCP studied
different control parameters, example, called general constrainedness
parameter (Frank, Gent & Walsh, 1998). phase transition result HCP motivated substantial amount research phase transitions combinatorial problems,
particularly TSP (Zhang & Korf, 1996) Boolean satisfiability (Monasson, Zecchina,
Kirkpatrick & Selman, 1999).
study consider HCP directed graphs, call directed HCP,
DHCP short. addition known applications HCP mentioned above,
interesting application DHCP DHCP heuristics used solve
Bottleneck TSP (Kabadi & Punnen, 2002). contrast extensive amount work
HCP undirected graphs, research DHCP rather limited (Angluin
& Valiant, 1979; Bang-Jensen & Gutin, 2008; Kelly, 2007). first exact algorithm
DHCP developed Martello (1983). algorithm outputs fixed number h
HCs reports cannot find h HCs given directed graph. setting h = 1,
gives rise algorithm DHCP. recent years, algorithms based SAT
encoding introduced problem, e.g., absolute encoding (Hoos, 1999)
relative encoding (Prestwich, 2003; see Velev & Gao, 2009). Furthermore,
probabilistic heuristic DHCP complexity O(n1.5 ) proposed (Frieze, 1988b).
shown random class Gn,m probability, given instance
HC found algorithm therefore exists, changes 0 1, n grows
infinity = n log n+cn, c constant. DHCP, phase transition result
similar HCP obtained well, namely phase transition occurs
= dc n (log n + log log n)c (McDiarmid, 1980), constant c expected
close 1.
Note research TSP alluded DHCP algorithm. Using
technique 2-point reduction, asymmetric TSP (ATSP) distance city
city j may necessarily equal j converted symmetric
TSP, number vertices doubled (Jonker & Volgenant, 1983). Using
transformation, determine whether directed graph Hamiltonian solving
symmetric TSP using renowned Concorde algorithm (Applegate, Bixby, Chavatal &
Cook, 2005, 2006). Concorde solved many large benchmark instances (Cook, 2010),
including TSP instance 85, 900 cities (Applegate et al., 2009), date
largest solved practical TSP instance.
main contribution paper effective exact algorithm DHCP.
algorithm, utilize methods two well-known combinatorial problems, i.e., Assign664

fiAlgorithm Directed Hamiltonian Cyce Problem

ment Problem (AP) Boolean satisfiability (SAT); therefore denote algorithm
AP-SAT. Using random graphs many real world instances, experimentally compare
AP-SAT algorithm DHCP algorithm Martello (1983), TSP based approach takes advantage TSP solver Concorde (Applegate et al., 2005, 2006)
above-mentioned SAT encodings DHCP (Hoos, 1999; Prestwich, 2003).
results show AP-SAT algorithm significantly outperforms algorithms.
second contribution experimental study refinement known phase
transition result existence HC random directed graph (McDiarmid, 1980),
similarly done HCP (Vandegriend & Culberson, 1998).

2. Algorithm
Consider directed unweighted graph G = (V, E) nodes V edges E.
purpose solving DHCP, consider problem determining whether
exists collection cycles, may necessarily complete cycles, visiting
vertex exactly once. call problem directed Assignment Problem DAP
short. algorithm explores exploits intrinsic relationship DHCP
DAP. precisely, AP-SAT algorithm searches HC space DAP
solutions. first solves DAP. DAP solution forms HC, DAP solution
exists, algorithm terminates. DAP solver returns solution HC,
algorithm tries patch subcycles solution HC using well-known
Karp-Steele patching method (Karp & Steele, 1985). HC found either, DAP
patching steps iterated, difference another DAP solution might
found. cases considered study, algorithm find HC
determine solution exists two steps. algorithm fails solve
problem iterative steps, attempts enumerate DAP solutions
formulating DAP Boolean satisfiability problem repeatedly solving problem
using SAT solver adding constraints eliminate DAP solutions
encountered. discuss details steps rest section.
2.1 Solving Assignment Problem
Given n vertices matrix C = (cij )1i,jn Rn,n costs pairs
vertices, nAssignment Problemo(AP) find vertex permutation
Pn
= arg min
i=1 ci,(i) : n , n set permutations {1, . . . , n}.
Note AP solution viewed collection cycles visiting vertex exactly
once.
Many algorithms developed AP (Bertsekas, 1981; Goldberg & Kennedy,
1995; Jonker & Volgenant, 1987). (For experimental comparison AP algorithms see
DellAmico & Toth, 2000.) efficient one Hungarian algorithm, based
Konig-Egervarys theorem complexity O(n3 ). AP-SAT algorithm
use implementation Hungarian algorithm Jonker Volgenant (1987, 2004).
665

fiJager & Zhang

unweighted directed graph G = (V, E), DAP solved applying AP
algorithm AP instance defined matrix C = (cij )1i,jn

cij


0,
1,
=

1,

(i, j) E, 6= j
(i, j)
/ E, =
6 j
= j

map costs arcs G 0 costs remaining arcs 1.
AP algorithm returns solution cost 0, DAP solution G, since every arc
taken AP solution arc G. hand, returns solution cost
greater 0, DAP solution G least one arc solution
belong G.
first step AP-SAT algorithm DAP algorithm. HC G, one
exists, solution DAP. distinguish three cases end first
step:
cost AP solution greater 0, G HC, DHCP
instance solved solution.
AP solution cost 0 solution consists one cycle, found
HC DHCP instance solved.
AP solution cost 0 AP solution one cycle, cannot
determine, based AP solution, whether G Hamiltonian.
continue next steps AP-SAT algorithm.
2.2 Karp-Steele Patching
DAP solution provide definitive answer problem, i.e., case
AP solution cost 0 AP solution contains one cycle, continue
search HC G. first patch subcycles attempt form HC, use
Karp-Steele patching (KSP) purpose, effective ATSP heuristic (Glover,
Gutin, Yeo & Zverovich, 2001; Goldengorin, Jager & Molitor, 2006; Karp & Steele, 1985).
operation patching two cycles C1 C2 AP solution defined follows:
two fixed arcs (v1 , w1 ) C1 (v2 , w2 ) C2 first deleted two arcs (v1 , w2 )
(v2 , w1 ) joining two cycles added. cost patching C1 C2 using (v1 , w2 )
(v2 , w1 ) equal
(C1 , C2 ) = c(v1 , w2 ) + c(v2 , w1 ) (c(v1 , w1 ) + c(v2 , w2 ))
i.e., (C1 , C2 ) difference total cost inserted arcs total cost
deleted arcs. step choose patch two cycles largest
number vertices. two cycles, two arcs chosen way
patching cost minimum among possible arc pairs. k 2 cycles,
repeat patching step k 1 times form one cycle end. apply KSP
AP instance defined Section 2.1. patching procedure provides HC, AP-SAT
algorithm terminated. Otherwise, continue next step.
666

fiAlgorithm Directed Hamiltonian Cyce Problem

2.3 Solving Variant APs
DAP may multiple solutions, DAP solutions may HCs.
increase chance finding HC apply AP step multiple times, since
computational cost AP KSP algorithms low. key avoid finding
DAP solution again. accomplish this, slightly alter arc costs
corresponding AP instance find DAP solutions, enhanced KSP
needed, increase possibility finding HC. words, add perturbation
component create multiple variant AP instances boost overall chance finding
HC. Note worst case DHCP instance contains HC, procedure
productive.
main idea create variant AP instance reduce chance subcycles
current AP solution chosen subsequent rounds solving APs.
done perturbing costs arcs G follows. arc
current DAP solution increase cost one. create AP instance different
Section 2.1, generalize AP instance follows. Let ci,j cost arc
(i, j) E, let


:= n max {ci,j | (i, j) E} + 1

i.e., greater n times largest cost arc G. set costs
edges E . AP instance Section 2.1 special case AP instance,
costs ci,j arcs (i, j) E 0. critical notice DAP solutions,
including HC, must costs less . before, solution contains HC,
algorithm terminates; otherwise, subcycles patched using KSP possibly
find HC. repeat step multiple times arc, appeared many
previous DAP solutions, unlikely appear next DAP solution,
arc, never occurred previous DAP solution, likely appear
next DAP solution.
Let r maximal number AP/KSP calls, i.e., number variant AP instances
solved. observed experiments r = n (see step 3 pseudo code
appendix) good choice. discussed detail Section 3.1.
2.4 Implicitly Enumerating DAP Solutions Using SAT
AP patching based steps discussed may still miss solution DHCP
instance. consider implicitly enumerate DAP solutions finding
solution DHCP, exists. idea systematically rule DAP
solutions discovered far search. end, first formulate
DAP Boolean satisfiability (SAT) problem (Dechter, 2003) forbid DAP solution
adding new constraints SAT model. elementary technique adding new
constraints purpose enumerating SAT solutions applied
general SAT problem (e.g., see Jin, Han & Somenzi, 2005). Notice cannot
easily done AP framework constraints cannot properly added
AP. Moreover, take advantage research effort devoted
SAT, particular, use effective SAT solver called MiniSat (Een & Sorensson,
2003, 2010).
667

fiJager & Zhang

conjunctive normal form (CNF), SAT instance set Boolean variables
conjunction clauses, disjunction literals Boolean
variables negations. clause satisfied one literals True,
instance satisfied clauses satisfied. SAT problem find truth
assignment variables satisfy clauses satisfiable, determine
assignment exists. SAT first problem shown N P-complete (Cook, 1971;
Garey & Johnson, 1979; Karp, 1972).
formulate DAP SAT. solution DAP must obey following
restrictions:
vertex i, = 1, . . . , n, exactly one arc (i, j), 6= j, exists DAP solution.
vertex i, = 1, . . . , n, exactly one arc (j, i), j 6= i, exists DAP solution.
first introduce integer decision variable xi,j arc (i, j) E xi,j = 1 holds
arc (i, j) appears DAP solution. represent constraints
following integer linear program (ILP).
( Pn
xi,j = 1 = 1, . . . , n
Pj=1,(i,j)E
(1)
n
i=1,(i,j)E xi,j = 1 j = 1, . . . , n
xi,j {0, 1} (i, j) E. thus total 2n constraints. Note
use variables, one variable arc graph, substantially
smaller n2 variables sparse graphs. represent integer linear program (1)
SAT model similar work Lynce Marques-Silva (2006), replace
integer variables xi,j Boolean variables yi,j . enforce 2n restrictions SAT
formulation, need introduce constraints clauses. One restriction (1) means
exactly one n involved Boolean variables vertex set True
rest must False. represent this, introduce 2n2 auxiliary variables
z1 , z2 , . . . , z2n2 , n zs one restriction. Without loss generality, consider
first restriction, z1 , z2 , . . . , zn associated. use zk represent least one
y1,1 , y1,2 , . . . , y1,k True. Precisely, z variables defined follows.
z1 = y1,1 equivalently (y1,1 z1 ) (y1,1 z1 ).
zk = y1,k zk1 equivalently (zk y1,k ) (zk zk1 ) (zk y1,k zk1 )
k = 2, 3, . . . , n.
addition, need enforce one y1,i = 1, 2, . . . , n True.
means y1,k True, none y1,i < k True. formulated

zk1 y1,k k = 2, 3, . . . , n.
Finally, zn must True. restrictions (1) represented similarly.
SAT based representation allows us exclude non-Hamiltonian DAP solution
previously found search. done introducing new clauses explicitly
668

fiAlgorithm Directed Hamiltonian Cyce Problem

forbidding subcycles solution. Let subcycle (v1 , v2 , . . . , vk , v1 ).
add clause
yv1 ,v2 . . . yvk1 ,vk yvk ,v1
current SAT instance. result, updated SAT instance satisfiable,
meaning corresponding DHCP instance contain HC, gives rise
new DAP solution, allow previous DAP solution.
summary, AP- patching-related steps failed find solution, APSAT algorithm transforms problem instance SAT instance. collects
previous DAP solutions, includes least two subcycles, excludes
subcycles DAP solutions adding new clauses described above.
resulting SAT model solved. SAT model satisfiable, DHCP
algorithm terminates result problem instance Hamiltonian.
SAT model satisfiable solution one cycle, algorithm stops HC.
SAT model satisfiable, solution one subcycle, new clauses
introduced SAT model rule solution, algorithm repeats
solve revised formula. Since finite number DAP solutions, algorithm
terminates. worst case DAP solutions contain HC, SAT part
algorithm enumerate DAP solutions. overview, outline main
steps AP-SAT algorithm pseudo code appendix.
2.5 General Remarks
present experimental results, comment method proposed
help appreciate features.
1. AP-SAT algorithm consists three main components, namely AP step,
KSP step SAT step. might interesting know components important one. this, distinguish completeness
efficacy algorithm. necessary step completeness SAT
step Section 2.4. step without previous steps leads correct DHCP
algorithm. hand, AP-SAT algorithm effective AP
KSP steps called often SAT step called called
times. example, instance DAP solution exists existing HC
found previous steps, SAT part invoked all. Indeed,
experiments showed SAT step invoked test instances.
Regarding relative time needed AP KSP steps, consider density problem instances. instance small number arcs,
cases HC solution, DAP solution.
case algorithm terminates first AP step need make
KSP call. hand, instance large number arcs require
many AP steps, many DAP solutions may exist HCs, thus HC
solution may found KSP. expected behavior could validated
experiments: time KSP steps smaller instances small number
arcs, larger instances large number arcs (see Figure 4).
669

fiJager & Zhang

2. AP-SAT algorithm able solve HCP special case DHCP,
less effective case. reason symmetric case, arc
reverse arc often present DAP solution, resulting many small cycles two
vertices solution. Thus general enumerate large number DAP
solutions. worst case HC exists, DAP solutions
enumerated, giving rise long running time.
3. easily revise AP-SAT algorithm identify HCs directed graph.
Finding solutions desirable many applications, e.g., problem finding knights tour chessboard (Henderson & Apodaca, 2008; Kyek, Parberry &
Wegener, 1997). algorithms problem, see already mentioned algorithm
Martello (1983) algorithm Frieze Suen (1992). revision works
follows. HC exists, algorithm remains same. Consider case
least one HC exists. first HC found, original AP-SAT algorithm
terminates case. revised algorithm stage saves first HC,
continues search next HC. pseudo code appendix,
need replace STOP SAVE rows 8, 11, 23. Note
revised algorithm, SAT part always invoked least one HC exists.
Furthermore original AP-SAT algorithm revised algorithm works
symmetric case, less effective.
4. AP-SAT algorithm used restart scheme, i.e., repeatedly solved series AP
instances, derived modifying costs arcs appeared previous
AP solution. Although restart scheme random restart scheme,
developed constraint problems artificial intelligence (Gomes, Selman & Kautz,
1998), follow design principle trying avoid encounter
solutions subsequent runs, two schemes fundamentally different.
name indicated, random restart scheme depends random choices made
variable value selections process search variable assignment
constraint problem. contrast, restart scheme random; arcs
current AP solution receive higher costs subcycles current AP
solution less likely chosen again. words, restart scheme used
somewhat deterministic depends solution structures problem.
5. method used exclude subcycles solution current DAP instance subsequent SAT solving process follows principle popular idea
adding no-good constraints constraint satisfaction problem (Frost & Dechter,
1994; Richards & Richards, 2000; Zhang, Madigan, Moskewicz & Malik, 2001). Specifically, subcycles forbidden introducing additional constraints.

3. Experimental Results
implemented AP-SAT algorithm, DHCP algorithm Martello (1983),
DHCP algorithms based absolute SAT encoding (Hoos, 1999) relative
SAT encoding (Prestwich, 2003) C++ compared algorithm based
award-winning Concorde TSP program (Applegate et al., 2005, 2006). al670

fiAlgorithm Directed Hamiltonian Cyce Problem

gorithm Martello implemented version terminates whenever HC,
one exists, found. SAT based algorithms used AP solver Jonker
Volgenant (1987, 2004) MiniSat SAT solver Een Sorensson (2003, 2010).
apply Concorde, DHCP instance first transformed asymmetric TSP instance transformation Section 2.1 symmetric TSP instance
2-point reduction method (Jonker & Volgenant, 1983). implementation, 2-point
reduction works follows graph G = (V, E) V = {v1 , v2 , . . . , vn }.
1. Make copy vertices v1 , v2 , . . . , vn , create vertex set V 0 := {v10 , v20 ,
. . . , vn0 }.
2. Define new complete graph G0 vertex set V V 0 (symmetric) cost
function c0 : V V 0 {0; 1; 2}

0 1 = j n
1 1 6= j n, (vi , vj ) E
c0 (vi , vj0 ) :=

2 1 6= j n, (vi , vj )
/E
c0 (vi , vj ) := 2 1 6= j n
c0 (vi0 , vj0 ) := 2 1 6= j n
directed HC exists G TSP tour cost n exists G0 . Note
contrast general version 2-point reduction value required
here. tried 3-point reduction method, principle similar 2-point
reduction, uses two (instead one) copies vertex set uses cost values
{0; 1}. details 3-point reduction, see work Karp (1972).
experimental results, included here, showed 3-point reduction runs
slower average 2-point reduction. Therefore, rest comparison,
consider 2-point reduction.
2-point reduction, Concorde started worst possible solution value
initial upper bound terminated soon lower bound indicates HC
impossible.
addition comparison, experimentally analyzed AP-SAT algorithm
including asymptotic behavior, applied study phase transitions DHCP.
experiments carried PC Athlon 1900MP CPU 2 GB
memory.
3.1 Comparison DHCP Algorithms
experiments first tested random asymmetric instances Gn,m parameters
n = 100, 200, 400, 800, 1600 = dcn(log n+log log n)c c = 0.5, 0.6, . . . , 1.90, 2.00.
n c generated 50 random instances measured CPU time
instances. Furthermore, tested real-world random instances Dimacs
challenge (Johnson et al., 2002, 2008) non-random instances (Reinelt, 1991, 2008).
Whereas Tsplib contains 26 single asymmetric TSP instances sizes 17 443,
Dimacs challenge contains 10 asymmetric problem generators called amat, coin, crane,
disk, rect, rtilt, shop, stilt, super, tmat. Using generators generated 24
671

fiJager & Zhang

instances, 10 100 vertices, 10 316 vertices, 3 1000 vertices, 1 3162
vertices, leading 240 instances (for 10 problem generators 24 instances) overall.
transform asymmetric TSP instances back DHCP instances, seems reasonable
keep arcs small weights ignoring ones large weights.
words, generate DHCP instance chose smallest arcs corresponding
asymmetric TSP instance. interesting note difficult problem instances
problems Tsplib Dimacs appear degree parameter c around
2, value used experiments. contrast, difficult instances
random graphs occur degree parameter c 0.9 (see Section 3.3).
investigate variation running time, present one subfigure problem
class, i.e., 5 random classes sizes 100, 200, 400, 800, 1600, 10
Dimacs classes amat, coin, crane, disk, rect, rtilt, shop, stilt, super, tmat. y-axis
gives average times plus 95% confidence intervals, values seconds.
random classes x-axis describes degree parameter c, Dimacs
classes describes size n. results random instances summarized
Figure 1 Dimacs instances Figures 2, 3. Tsplib class consists
26 single instances completely different sizes, structures difficulties, present
results Table 1. experiment single algorithm single instance required
least 1 hour terminate due high memory requirement, set CPU
times 3600 seconds.

Figures 1 3 Table 1 show two SAT encodings competitive
AP-SAT, Concorde Martello algorithm. Furthermore, AP-SAT Concorde
stable Martello algorithm. Concorde failed solve 16 Dimacs instances
(3 coin, 3 crane, 4 rect, 5 stilt, 1 super types) within maximal allowed time 1 hour,
whereas AP-SAT algorithm failed 7 instances. Among 7 instances
AP-SAT failed, 6 stilt types, remaining instance (super3162) could
solved increased maximal allowed time 1 hour 4 hours (see Table 2).
Martello algorithm unable solve instances 800 larger size
high memory requirement. instances, failed 1 random instance size
400 degree parameter 0.9, 51 Dimacs instances (10 coin, 12 crane, 11 disk, 11 rect,
7 stilt types), 9 Tsplib instances (see Table 1). Nevertheless, Martello algorithm
outperformed Concorde smaller easier instances, indicating former
worse asymptotic running time. Overall, observed AP-SAT algorithm
clearly superior four algorithms. Among 4266 instances (4000 random
instances, 240 Dimacs instances 26 Tsplib instances) tested, 13 instances,
one four algorithms faster AP-SAT. problem instances include 4
random instances, namely 1 size 400 degree parameter 0.9, 3 size 800 degree
parameters 0.8, 0.9, 0.9, respectively, 8 Dimacs instances, namely coin1000-2, rect316-9,
stilt100-1, stilt100-5, stilt100-6, stilt100-7, stilt100-8, stilt316-2, Tsplib instance
br17 (see Table 1).
672

fiAlgorithm Directed Hamiltonian Cyce Problem

Figure 1: Comparison algorithms random instances.
Size 200
APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

APSAT
Concorde
Martello

10,000

Average running time

Average running time

Size 100

1,000
100
10
1
0.1
0.01

0.01
0.001

0.001
0.0001

0.0001

0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2

0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2

Degree parameter c

Degree parameter c

Size 400

Size 800
APSAT
Concorde
Martello

100
10
1
0.1
0.01

APSAT
Concorde

10,000

Average running time

1,000

1,000
100
10
1
0.1
0.01

0.001

0.001

0.0001

0.0001

0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2

0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2

Degree parameter c

Degree parameter c
Size 1600
APSAT
Concorde

10,000

Average running time

Average running time

10,000

1,000
100
10
1
0.1
0.01
0.001
0.0001

0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2

Degree parameter c

673

fiJager & Zhang

Figure 2: Comparison algorithms Dimacs instances, part 1.
coin instances
APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

Average running time

Average running time

amat instances

APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

0.01

0.01

0.001

0.001

0.0001

100

316

1000

0.0001

3162

100

316

Size

10,000
1,000
100
10
1
0.1

APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

0.01

0.01

0.001

0.001
100

316

1000

0.0001

3162

100

316

Size

1,000
100
10
1
0.1

Average running time

Average running time

10,000

APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

0.01

0.01

0.001

0.001
316

3162

rtilt instances
APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding

100

1000

Size

rect instances

0.0001

3162

disk instances
APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding

Average running time

Average running time

crane instances

0.0001

1000

Size

1000

0.0001

3162

Size

100

316

1000

Size

674

3162

fiAlgorithm Directed Hamiltonian Cyce Problem

Figure 3: Comparison algorithms Dimacs instances, part 2.
stilt instances
APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

Average running time

Average running time

shop instances

APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

0.01

0.01

0.001

0.001

0.0001

100

316

1000

0.0001

3162

100

316

Size

10,000
1,000
100
10
1
0.1

APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding
10,000
1,000
100
10
1
0.1

0.01

0.01

0.001

0.001
100

316

3162

tmat instances
APSAT
Concorde
Martello
Abs. Encoding
Rel. Encoding

Average running time

Average running time

super instances

0.0001

1000

Size

1000

0.0001

3162

Size

100

316

1000

Size

675

3162

fiJager & Zhang

Table 1: Comparison algorithms Tsplib instances.
Instance (Size)

AP-SAT

Concorde

br17 (17)
ftv33 (34)
ftv35 (36)
ftv38 (39)
p43 (43)
ftv44 (45)
ftv47 (48)
ry48p (48)
ft53 (53)
ftv55 (56)
ftv64 (65)
ft70 (70)
ftv70 (71)
kro124p (100)
ftv100 (101)
ftv110 (111)
ftv120 (121)
ftv130 (131)
ftv140 (141)
ftv150 (151)
ftv160 (161)
ftv170 (171)
rbg323 (323)
rbg358 (358)
rbg403 (403)
rbg443 (443)

4.05
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0.01
0.02
0.02
0.02

0.07
0.13
0.15
0.23
0.42
0.19
0.16
0.07
1.56
0.09
0.23
0.87
0.29
3.74
0.56
2.42
0.8
3.04
0.84
1.13
1.14
2.13
4.81
13.55
4.52
6.73

Running time algorithm
Martello Absolute Encoding
66.39
0
0
0
0
0
0
3600
0
0.01
0
0
0
0.04
3600
3600
3600
3600
3600
3600
3600
3600
0.09
0.14
0.18
0.21

676

0.85
3.29
5.59
2.96
65.58
1.97
5.23
53.96
20.31
11.13
119.96
34.18
1904.56
1993.33
1024.22
3600
3600
3600
593.65
2676.16
3600
3600
3600
3600
3600
3600

Relative Encoding
0.08
0
0
0.01
0.01
0.01
0.01
47.91
0.02
230.04
0.04
0.05
0.06
3600
3600
3600
3600
3600
3600
3600
3600
3600
5.12
6.98
10
13.24

fiAlgorithm Directed Hamiltonian Cyce Problem

3.2 Analysis AP-SAT
efficacy AP-SAT algorithm may due following reasons. Instances
HC likely DAP solution either, therefore algorithm
terminates first AP call. hand, instances HC likely
multiple HCs, one found quickly AP KSP steps.
difficult case many DAP solutions, none
HCs. case AP KSP steps may fail, SAT part invoked find
HC disprove existence HC.
following analyze instances AP-SAT fails requires much
time, analyze number r computing variant AP instances (which set
size instance n; see end Section 2.3). Therefore investigated three
procedures AP-SAT, namely AP, KSP SAT. observed SAT part
invoked 14 4266 instances tested. considered 14 two
instances (stilt3162 super3162), AP-SAT terminate 1 hour,
hard. analyze 16 hard instances increased maximal allowed time
1 hour 4 hours. Table 2 present running times AP, KSP SAT,
number calls three procedures, numbers AP KSP calls
given column, two numbers equal different one (see
pseudo code appendix). Furthermore, add two additional pieces information:
whether instance HC whether unknown, whether AP-SAT terminated
instance 4 hours. Table 2, Memory means part terminated due
high memory requirement. Note solution status instance stilt316-2 (no
HC) known, since Concorde contrast AP-SAT able solve it.
Table 2 shows running time AP/KSP contributed majority
total running time AP-SAT 4 16 hard instances, i.e., coin1000-2
rect316-9, two instances stilt3162 super3162 SAT invoked
all. 6 instances, AP-SAT terminate. 5 6 instances, i.e., stilt3162, stilt316-4, stilt316-5, stilt1000-1, stilt1000-2, SAT part terminate
reasonable amount time algorithm stopped due high memory requirement
SAT.
order determine r, re-ran instances Table 2 three different values
r, i.e., r = 0, r = n/2, r = 2n. results (not presented) showed AP-SAT
unable terminate r = n (i.e., 6 instances stilt316-2, stilt316-4, stilt316-5,
stilt1000-1, stilt1000-2, stilt3162), failed stop values r.
remaining 10 instances, increasing r = n r = 2n reduce running times.
reasonable two instances coin1000-2 rect316-9 large AP/KSP time,
HC. hand, two instances ones
AP-SAT ran faster using smaller values r, namely coin1000-2 using r = n/2
rect316-9 using r = 0.
thus conclude r increased, rather decreased. hard
estimate memory requirements time SAT part, one alternative
difficult instances would start AP-SAT smaller parameter r stop
SAT part time one unsuccessful call. complete APSAT algorithm restarted larger r. instances, however, choice
677

fiJager & Zhang

Table 2: Comparison performance AP, KSP, SAT procedures AP-SAT
algorithm 16 hard instances.
Instance
br17
coin1000-2
rect100-2
rect316-9
stilt100-1
stilt100-5
stilt100-6
stilt100-7
stilt100-8
stilt316-2
stilt316-4
stilt316-5
stilt1000-1
stilt1000-2
stilt3162
super3162

Running time
AP
KSP
SAT
0
0
4.1
352.73
47.54
1.82
0.07
0.01
0.27
3.69
0.61
0.35
0.17
0
0.07
0.2
0.01
28.84
0.17
0.02
0.07
0.17
0.05
0.06
0.15
0.03
0.07
20.21
1.37 14378.42
13.15
0.71
Memory
21.14
1.63
Memory
1446.63 107.06 12846.31
1457.76 102.21 12840.03
13832.40
567.60
0
13244.88
441.46
0

Number calls
AK/KSP SAT
17
138
1000
1
100
1
316
1
100
1
100
41
100
1
100
1
100
1
316
1
316
1
316
1
1000
1
1000
1
650
0
1032
0

HC

Termin.






Yes




Unknown
Unknown
Unknown
Unknown
Unknown
Yes

Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes






Yes

Figure 4: Comparison performance AP KSP procedures AP-SAT random
instances size 1600.
AP
KSP

6

Average running time

5.5
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2

Degree parameter c

r relevant. difficult problem instances required perform comprehensive
analysis r.
Finally, Figure 4 compare times used AP KSP random instances
size 1600 degree parameter c = 0.5, 0.6, . . . , 1.90, 2.00.
observe AP time consuming KSP. smaller c effect
obvious instances solved result HC first
AP call, thus KSP need invoked all.
678

fiAlgorithm Directed Hamiltonian Cyce Problem

3.3 Phase Transitions DHCP
random undirected graphs Gn,m , arcs randomly chosen possible
n(n 1)/2 arcs n vertices graph, Komlos Szemeredi (1983) proved phase
transition c dn (log n + log log n)/2c c = 1 HCP. Vandegriend Culberson (1998) experimentally verified theoretical result, constant c 1.08
1.10. DHCP, arcs randomly chosen possible n(n 1) arcs,
McDiarmid proved phase transition = cdn(log n+log log n)c c = 1 (1980).
experiments aimed verify result determine multiplicative constant c.
directed graph may contain twice many arcs undirected counterpart, would
expect number arcs doubled well phase transition point. Therefore
tested = dc n (log n + log log n)c c = 0.5, 0.6, 0.7, 0.8, 0.81, 0.82, . . . , 1.19, 1.20,
1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00, expected phase transition occur
c = 1. considered problem instances n = 128, 256, 512, 1024, 2048, 4096, 8192
vertices chose 1000 independently generated random graphs n c.
phase transition result shown Table 3 Figure 5, first parameter
c second parameter percentage Hamiltonian graphs among graphs
considered. observe phase transition DHCP similar HCP.
particular, evident Figure 5 phase transition becomes sharper, i.e.,
crossover among phase transition curves, problem size increases,
characteristic phase transitions complex systems. crossover occurs around
degree parameter c = 0.9, substantially different expected value
1. short, observations verified existence phase transition DHCP,
phase transition occurs dc n (log n + log log n)c approximately c = 0.9.
Furthermore, constant c = 0.9, probability Gn,m Hamiltonian
1/2. comparison, undirected graphs, constant 1.08 1.10
found (Vandegriend & Culberson, 1998).

3.4 Asymptotic Behavior AP-SAT
interesting characteristic algorithm asymptotic behavior. quantify
behavior AP-SAT algorithm, revisited experiments Section 3.3, i.e.,
experiments verified phase transitions DHCP. described earlier, considered random problem instances n = 128, 256, 512, 1024, 2048, 4096, 8192 vertices
chose 1000 independently generated random graphs n c.
measure worst-case asymptotic behavior AP-SAT, measured CPU times
algorithm difficult instances, i.e., instances degree parameter
c = 0.9 (see Section 3.3). results found Figure 6, x-axis
problem size y-axis average time required. Since both, x- y-axis
logarithmic scale log-log curve Figure 6 nearly linear, average running
time AP-SAT considered polynomial number n vertices
graph. reasonable, random instances SAT part called (see
Section 3.2), AP KSP combined complexity worse O(n3 ).
679

fiJager & Zhang

Table 3: Phase transition random instances.
c
0.5
0.6
0.7
0.8
0.81
0.82
0.83
0.84
0.85
0.86
0.87
0.88
0.89
0.9
0.91
0.92
0.93
0.94
0.95
0.96
0.97
0.98
0.99
1
1.01
1.02
1.03
1.04
1.05
1.06
1.07
1.08
1.09
1.1
1.11
1.12
1.13
1.14
1.15
1.16
1.17
1.18
1.19
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
2

128
0
0
5.1
23.3
25.5
27.8
30.6
32.4
33.6
37.6
39.8
44
46.8
49
52.8
55.5
59.2
60.1
62.7
63.6
67.2
68.8
69.4
71
72.8
74.2
75.8
76.9
77.4
78.4
81.7
81.6
83.3
85.1
85.4
86.3
86.6
86.7
87.3
88.5
88.7
87.8
88.5
89.1
95.7
96.4
99.1
99.7
99.7
99.8
100
100

256
0
0
3
21.9
24.2
28.4
28.9
31.8
34.1
36.5
39.1
43.5
47.3
52
53.2
54.4
58.4
60.1
61.7
65.3
65
67.9
71.8
74
74.3
75.4
75.4
76.6
78.6
79.3
79.2
82.4
83.2
84.4
87
87.4
88.6
88.9
89.2
89.2
91.2
92.6
92.9
93.8
97.2
98.8
99.1
99.6
99.8
99.8
100
100

512
0
0
2.6
21.5
23.9
27.4
33
34.9
35.6
36.9
38.3
42.4
47.3
49.8
52.3
56.9
59.5
61.5
60.8
64
66.2
68.3
72.1
72.1
74.5
76.3
79
82.1
84.4
86
87.3
88.4
88.6
88.8
89.3
89.7
90.1
90.7
90.9
92.6
93.1
93.6
93
93.3
97.5
99
99.9
99.8
100
99.9
99.9
100

Size
1024
0
0
1.3
18.7
20.6
23.1
25.8
32.9
30
35.4
40.8
43.8
45.8
52.5
54.7
54.1
60.8
63.6
64.9
66.2
67.9
71.2
73.8
73.6
78.3
81.1
81.9
83.2
85.2
85.9
88.1
87.1
87.2
86.8
90.9
90.3
89.5
92.2
93.2
93.9
94.1
95 0
95.5
96.2
98.8
99.5
99.9
99.9
100
99.9
99.9
100
680

2048
0
0
0.5
16.3
20.8
25
27
28.5
34.3
37.4
41
44.7
47.9
50.1
50.3
54.7
58.4
61.4
68.4
66.8
71.6
72.5
75
77.2
80.8
81.4
81
84.2
86.3
85.6
89.9
89.4
89.4
89.5
92
92.9
93
93.9
93.8
95.1
95.3
96.1
94.8
96.2
98.9
99.7
99.8
99.9
99.9
100
100
100

4096
0
0
0.1
14.1
17.9
20
23.3
29
33.4
34.7
35.9
40.2
47.7
48.6
52.7
59.4
60.7
65.6
68.3
72.7
71
75.7
77
79.8
78.7
82.4
83.4
85.3
88.3
85.9
90
90.3
92.6
92
93.8
93.3
93.9
94.1
94.2
95.5
94.7
95.8
97.3
97.6
98.7
99.5
99.9
100
99.9
100
100
100

8192
0
0
0.2
12.7
15.7
18.7
23.9
28.9
30
34.1
38.7
40.6
44.8
50.5
54.6
59.8
61.5
65.8
70.5
73.1
71.4
73.4
76.3
80
81.7
81.9
85.4
86.5
88.3
90.7
92.3
92
92.4
93.8
93.9
94
94.7
97.3
96.4
97.2
97.2
96.4
97.2
97.9
99.2
99.8
100
100
99.9
100
100
100

fiAlgorithm Directed Hamiltonian Cyce Problem

Figure 5: Phase transition random instances.
100
Size 128
Size 256
Size 512
Size 1024
Size 2048
Size 4096
Size 8192

Existence HCs %

80

60

40

20

0
0.4

0.6

0.8

1

1.2

1.4

Degree parameter c

681

1.6

1.8

2

fiJager & Zhang

Figure 6: Asymptotic behavior AP-SAT algorithm.
10,000
APSAT

Average running time

1,000
100
10
1
0.1
0.01
0.001
0.0001

128

256

512

1024

2048

4096

8192

Size

4. Summary
Hamiltonian cycle problem (HCP) important, canonical combinatorial problem.
Surprisingly, HCP directed graphs, called directed HCP DHCP,
effective exact algorithm developed. main result work novel
effective exact algorithm DHCP. algorithm utilizes existing algorithm
assignment problem existing method Boolean satisfiability (SAT). work
includes new SAT formulation HCP AP, potentially extended
problems TSP. experimental results random real problem
instances showed new algorithm superior four known algorithms including
one algorithm takes advantage award-winning Concorde TSP algorithm. Furthermore, first phase transition result combinatorial problems done HCP
later extended DHCP. paper experimentally verified existence
phase transition DHCP refined location phase transition
appears using new exact DHCP algorithm.

Acknowledgments
thank David S. Johnson AT&T Labs - Research Gregory Gutin Royal Holloway
University London many discussions related work insightful comments
manuscript. research supported part NSF grants IIS-0535257
DBI-0743797 Weixiong Zhang.

682

fiAlgorithm Directed Hamiltonian Cyce Problem

Appendix A. Pseudo Code AP-SAT Algorithm
INPUT Directed non-complete graph G = (V, E) |V | = n.
1 Define matrix C Section 2.1, := 1.
2 Define subcycle collection set W := .
3 = 1, . . . , n
4
Solve AP instance matrix C solution value g, AP solution
(v1 , vi1 ), (v2 , vi2 ) . . . , (vn1 , vin1 ), (vn , vin ), number cycles k.
5
g
6
STOP HC.
7
ELSE k = 1
8
STOP HC AP solution.
9
Apply KSP cycles, receive solution value h complete
cycle (w1 , w2 , . . . , wn , w1 ).
10
h = 0
11
STOP HC (w1 , w2 , . . . , wn , w1 ).
12
= 1, . . . , n
13
cvt ,vit = cvt ,vit + 1
14
= n max {ci,j | (i, j) E} + 1.
15
ci,j = (i, j)
/ E.
16
Add subcycle AP solution W .
17 Start SAT model explained Section 2.4.
18 subcycle (v1 , v2 , . . . , vk1 , vk , v1 ) W add clause
yv1 ,v2 . . . yvk1 ,vk yvk ,v1 SAT model.
19 Solve SAT model.
20 Variable setting exists model.
21
Add k subcycles solution SAT model W .
22
k = 1
23
STOP HC
subcycle.
24
GOTO 19.
25
ELSE STOP HC.
OUTPUT HC G, proof HC exists G.

References
Angluin, D. & Valiant, L.G. (1979). Fast Probabilistic Algorithms Hamiltonian Circuits
Matchings. J. Comput. System. Sci. 18(2), 155-193.
683

fiJager & Zhang

Applegate, D.L., Bixby, R.E., Chvatal, V. & Cook, W.J. (2005). Concorde Code:
http://www.tsp.gatech.edu/concorde.html
Applegate, D.L., Bixby, R.E., Chvatal, V. & Cook, W.J. (2006). Traveling Salesman
Problem. Computational Study. Princeton University Press.
Applegate, D.L., Bixby, R.E., Chvatal, V., Cook, W.J., Espinoza, D., Goycoolea, M.
& Helsgaun, K. (2009): Certification Optimal Tour 85,900 Cities.
Oper. Res. Lett. 37(1), 11-15.
Bang-Jensen, J. & Gutin, G. (2008). Chapter 5 in: Digraphs: Theory, Algorithms Applications. Springer, London. Free available:
http://www.cs.rhul.ac.uk/books/dbook/
Bertsekas, D.P. (1981). New Algorithm Assignment Problem. Math. Program. 21,
152-171.
Bollobas, B. (1985). Random Graphs. Academic Press, London.
Bollobas, B., Fenner, T.I. & Frieze, A.M. (1987). Algorithm Finding Hamiltonian
Paths Cycles Random Graphs. Combinatorica 7(4), 327-341.
Bondy, J.A. (1995). Basic Graph Theory: Paths Circuits. Graham, R.L., Grotschel,
M., Lovasz, L. (Eds.): Handbook Combinatorics (3-110). North-Holland, Amsterdam.
Cheeseman, P., Kanefsky, B. & Taylor, W.M. (1991). Really Hard Problems
Are. Mylopoulos, J., Reiter, R. (Eds.): Proc. 12th International Conference
Joint Artificial Intelligence (IJCAI), 331-337. Morgan Kaufmann.
Christofides, N. (1975). Graph Theory Algorithmic Approach. Academic Press, New
York.
Chvatal, V. (1985). Hamiltonian Cycles. Chapter 11 Lawler, E.L., Lenstra, J.K., Rinnooy
Kan, A.H.G., Shmoys, D.B. (Eds.): Traveling Salesman Problem. Guided Tour
Combinatorial Optimization. John Wiley & Sons, Chichester.
Cook, S.A. (1971). Complexity Theorem-Proving Procedures. Proc. 3rd Ann. ACM
Symp. Theory Computing (STOC), 151-158.
Cook, W.J. (2010). TSP Homepage:
http://www.tsp.gatech.edu/
Dechter, R. (2003). Constraint Processing. Morgan Kaufmann.
DellAmico, M. & Toth, P. (2000). Algorithms Codes Dense Assignment Problems:
State Art. Discrete Appl. Math. 100(1-2), 17-48.
Een, N. & Sorensson, N. (2003). Extensible SAT-Solver. Giunchiglia, E., Tacchella, A.
(Eds.): Proc. 6th International Conference Theory Applications Satisfiability
Testing (SAT). Lecture Notes Comput. Sci. 2919, 502-518.
Een, N. & Sorensson, N. (2010). MiniSat Code:
http://minisat.se
684

fiAlgorithm Directed Hamiltonian Cyce Problem

Frank, J., Gent, I. & Walsh, T. (1998). Asymptotic Finite Size Parameters Phase
Transitions: Hamiltonian Circuit Case Study. Inform. Process. Lett. 65(5), 241245.
Frieze, A.M. (1988a). Finding Hamiltonian Cycles Sparse Random Graphs. J. Combin. Theory Ser. B 44, 230-250.
Frieze, A.M. (1988b). Algorithm Finding Hamilton Cycles Random Directed
Graphs. J. Algorithms 9, 181-204.
Frieze, A.M. & Suen, S. (1992). Counting Hamilton Cycles Random Directed Graphs.
Random Structures Algorithms 9, 235-242.
Frost, D. & Dechter, R. (1994). Dead-End Driven Learning. Proc. 12th National Conference
Artificial Intelligence (AAAI), 294-300. AAAI Press.
Johnson, D.S. (2008). 8th Dimacs Implementation Challenge: Traveling Salesman Problem:
http://www.research.att.com/~dsj/chtsp/
Garey, M.R. & Johnson, D.S. (1979). Computers Intractability. Guide Theory
N P-Completeness. Freeman, New York.
Glover, F., Gutin, G., Yeo, A. & Zverovich, A. (2001). Construction Heuristics
Asymmetric TSP. European J. Oper. Res. 129, 555-568.
Goldberg, A.V. & Kennedy, R. (1995). Efficient Cost Scaling Algorithm Assignment Problem. Math. Program. 71, 153-177.
Goldengorin, B., Jager, G. & Molitor, P. (2006). Tolerance Based Contract-or-Patch Heuristic Asymmetric TSP. Erlebach, T. (Ed.): Proc. 3rd Workshop Combinatorial Algorithmic Aspects Networking (CAAN). Lecture Notes Comput. Sci. 4235, 86-97.
Gomes, C.P., Selman, B. & Kautz, H. (1998). Boosting Combinatorial Search
Randomization. Proc. 15th National Conference Artificial Intelligence (AAAI),
431-437. AAAI Press.
Gould, R.J. (1991). Updating Hamiltonian Problem Survey. J. Graph Theory 15(2),
121-157.
Grebinski, V. & Kucherov, G. (1996). Reconstructing Hamiltonian Circuit Querying
Graph: Application DNA Physical Mapping. IR 96-R-123, Centre de Recherche
en Informatique de Nancy.
Gutin, G. & Moscato, P. (2000). Hamiltonian Page:
http://alife.ccp14.ac.uk/memetic/~moscato/Hamilton.html
Henderson, R. & Apodaca, E. (2008). Knight Egodeth: Zen Raptured Quietude. BookSurge Publishing.
Hoos, H.H. (1999). SAT-Encodings, Search Space Structure, Local Search Performance.
Proc. 16th International Joint Conference Artificial Intelligence (IJCAI), 296-303.
Morgan Kaufmann.
685

fiJager & Zhang

Jin, H., Han, H. & Somenzi, F. (2005). Efficient Conflict Analysis Finding Satisfying
Assignments Boolean Circuit. Halbwachs, N., Zuck, L.D. (Eds.): Proc. 11th
International Conference Tools Algorithms Construction Analysis
Systems (TACAS). Lecture Notes Comput. Sci. 3440, 287-300.
Johnson, D.S., Gutin, G, McGeoch, L.A., Yeo, A., Zhang, W. & Zverovich, A. (2002).
Experimental Analysis Heuristics ATSP. Chapter 10 in: Gutin, G., Punnen,
A.P. (Eds.): Traveling Salesman Problem Variations. Kluwer.
Jonker, R. & Volgenant, A. (1983). Transforming Asymmetric Symmetric Traveling
Salesman Problems. Oper. Res. Lett. 2(4), 161-163.
Jonker, R. & Volgenant, A. (1987). Shortest Augmenting Path Algorithm Dense
Sparse Linear Assignment Problems. Computing 38, 325-340.
Jonker, R. & Volgenant, A. (2004). AP Code:
http://www.magiclogic.com/assignment.html
Kabadi, S.N. & Punnen, A.P. (2002). Bottleneck TSP. Chapter 15 in: Gutin, G., Punnen, A.P. (Eds.): Traveling Salesman Problem Variations. Kluwer.
Karp, R.M. (1972). Reducibility Among Combinatorial Problems. Miller, R.E., Thatcher,
J.W. (Eds.): Complexity Computer Computations, 85-103. New York: Plenum.
Karp, R.M. & Steele, J.M. (1985). Probabilistic Analysis Heuristics. Chapter 6 in: Lawler,
E.L., Lenstra, J.K., Rinnooy Kan, A.H.G., Shmoys, D.B. (Eds.): Traveling Salesman Problem. Guided Tour Combinatorial Optimization. John Wiley & Sons,
Chicester.
Kelly, L. (2007). Hamilton Cycles Directed Graphs. PhD Thesis, University Birmingham, United Kingdom.
Komlos, M. & Szemeredi, E. (1983). Limit Distribution Existence Hamiltonian
Cycle Random Graph. Discrete Math. 43, 55-63.
Kyek, O., Parberry, I. & Wegener, I. (1997). Bounds Number Knights Tours.
Discrete Appl. Math. 74(2), 171-181.
Lynce, I. & Marques-Silva, J. (2006). Efficient Haplotype Inference Boolean Satisfiability. Proc. 21st National Conference Artificial Intelligence (AAAI). AAAI Press.
Martello, S. (1983). Enumerative Algorithm Finding Hamiltonian Circuits Directed Graph. ACM Trans. Math. Software 9(1), 131-138.
McDiarmid, C.J.H. (1980). Cluster Percolation Random Graphs. Math. Program. Stud. 13, 17-25.
Monasson, R., Zecchina, R., Kirkpatrick, S., Selman, B. & Troyansky, L. (1999). Determining Computational Complexity Characteristic Phase Transitions. Nature 400,
133.
Prestwich, S. (2003). SAT Problems Chains Dependent Variables. Discrete
Appl. Math. 130(2), 329-350.
Posa, L. (1976). Hamiltonian Circuits Random Graphs. Discrete Math. 14, 359-364.
686

fiAlgorithm Directed Hamiltonian Cyce Problem

Reinelt, G. (1991). TSPLIB Traveling Salesman Problem Library. ORSA J. Comput. 3,
376-384.
Reinelt, G. (2008). Tsplib Library:
http://www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/
Richards, E.T. & Richards, B. (2000). Non-Systematic Search No-Good Learning.
J. Automat. Reason. 24(4), 483-533.
Skiena, S. (2008). Stony Brook Algorithm Repository:
http://www.cs.sunysb.edu/~algorith/files/hamiltonian-cycle.shtml
Stojakovic, M. & Szabo, T. (2005). Positional Games Random Graphs. Random Structures Algorithms 26(1-2), 204-223.
Vandegriend, B. (1998). Finding Hamiltonian Cycles: Algorithms, Graphs Performance.
Master Thesis, University Alberta, Canada.
Vandegriend, B. & Culberson, J. (1998). Gn,m Phase Transition Hard
Hamiltonian Cycle Problem. J. Artificial Intelligence Res. 9, 219-245.
Velev, M.N. & Gao, P. (2009). Efficient SAT Techniques Absolute Encoding Permutation Problems: Application Hamiltonian Cycles. Proc. 8th Symposium Abstraction, Reformulation Approximation (SARA), 159-166.
Zhang, W. & Korf, R.E. (1996). Study Complexity Transitions Asymmetric
Traveling Salesman Problem. Artificial Intelligence 81, 223-39.
Zhang, L., Madigan, C.F., Moskewicz, M.H. & Malik, S. (2009). Efficient Conflict Driven
Learning Boolean Satisfiability Solver. Proc. IEEE/ACM International Conference Computer Aided Design (ICCAD), 279-285.

687


