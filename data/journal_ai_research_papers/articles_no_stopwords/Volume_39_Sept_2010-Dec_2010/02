journal artificial intelligence

submitted published

lama planner
guiding cost anytime landmarks
silvia richter

silvia richter nicta com au

iiis griffith university australia
nicta qrl australia

matthias westphal

westpham informatik uni freiburg de

albert ludwigs universitat freiburg
institut fur informatik
freiburg germany

abstract
lama classical system heuristic forward search core feature
use pseudo heuristic derived landmarks propositional formulas must true
every solution task lama builds fast downward system
finite domain rather binary state variables multi heuristic search latter employed
combine landmark heuristic variant well known heuristic heuristics
cost sensitive focusing high quality solutions case actions non uniform cost
weighted search used iteratively decreasing weights planner continues
search plans better quality search terminated
lama showed best performance among planners sequential satisficing track
international competition present system detail investigate features lama crucial performance present individual
domains used competition demonstrating good bad cases techniques
implemented lama overall landmarks improves performance whereas
incorporation action costs heuristic estimators proves beneficial
domains search ignores cost solves far raising question
deal action costs effectively future iterated weighted search greatly
improves shows synergy effects use landmarks

introduction
last decade heuristic search become dominant domain independent satisficing starting additive heuristic bonet geffner implemented
hsp system much conducted search heuristic estimators
efficient calculate yet powerful guiding search towards goal state system hoffmann nebel heuristic estimator relaxed
graphs broke ground showing best performance among fully automated systems international competition continues state art today ever since
heuristic search approaches played prominent role classical sequential satisficing
tracks biennial competition fast downward helmert winning sgplan chen wah hsu placing first
lama system youngest member line winning sequential satisficing track international competition ipc lama classical
c

ai access foundation rights reserved

firichter westphal

system heuristic search follows footsteps hsp fast downward
uses earlier work many respects particular builds fast downward extending
three major ways
landmarks lama fast downwards causal graph heuristic replaced variant
heuristic hoffmann nebel heuristic estimates derived landmarks
landmarks propositional formulas become true point every plan
task hand porteous sebastia hoffmann lama uses landmarks
direct search towards states many landmarks already achieved via
preferred operators landmarks used additional source search control
complements heuristic estimates recent work shown use landmarks
addition heuristic improve performance leading
solved shorter solution paths richter helmert westphal
action costs landmark heuristic proposed earlier richter et al
heuristic adapted use action costs however lama focus purely
cost go e estimated cost reaching goal given search node
danger cost sensitive planner may concentrate much finding cheap plan
expense finding plan within given time limit lama weighs estimated
cost go measure plan quality estimated goal distance measure
remaining search effort combining values two estimates
anytime search lama continues search better solutions exhausted
search space interrupted finding initial solution greedy best first search
conducts series weighted searches decreasing weights restarting search
time initial state improved solution found recent work
shown efficient benchmarks compared anytime
methods richter thayer ruml
international competition lama outperformed competitors
substantial margin expected authors previous work concerning
lamas putative core feature landmark heuristic richter et al showed
tremendous improvement base configuration without landmarks aims
provide reference description lama well extensive evaluation performance
competition
detailed description lama present distinguishing components planner
detail describing landmarks generated used lama action costs
incorporated heuristic estimators anytime search proceeds aspects lama presented previous publications richter et al
helmert however aspects adequately covered publications particular procedure finding landmarks described detail
relevant aspects described previous work landmark heuristic summarised
convenience reader aim together previous ones form
comprehensive picture lama system
experimental evaluation lama building conduct experimental evaluation focusing aspects differentiate lama predecessor systems


fithe lama planner guiding cost anytime landmarks

fast downward repeat comparisons published earlier work comparison
lamas anytime method anytime richter et al
comparison lamas methods handling landmarks alternative landmark approaches
richter et al instead aim elicit much performance lama
system whole enhanced three distinguishing features described
landmarks action costs anytime search answer question contrast several
variations planner subsets features
cost sensitive heuristics pay ipc benchmark tasks
cost sensitive variant heuristic used lama performs significantly worse traditional unit cost version heuristic similarly
cost sensitive planners competition fared worse baseline planner ignored action costs demonstrating cost presents considerable challenge
conduct full analysis reasons showcase cost sensitive
heuristic example domains provide informed hypotheses encountered effects
landmarks prove particularly helpful context unit cost case landmarks
lead moderate increase performance case action costs
substantially improve coverage number solved thus effectively mitigating
cost sensitive heuristic lama anytime search significantly improves
quality solutions throughout even acts synergy landmarks one domain

preliminaries
use formalism state variables finite rather binary range similar
one employed helmert sas model backstrom nebel
extends conditional effects lama handles axioms way
fast downward helmert formalise axioms since important
purposes
definition tasks finite domain representation fdr tasks
task finite domain representation fdr task given tuple hv ci
following components
v finite set state variables associated finite domain dv
fact pair hv di written v v v dv partial variable
assignment set facts different variable use set notation
hv di function notation v interchangeably state variable
assignment defined variables v
state called initial state
partial variable assignment called goal
finite set operators operator hpre effi consists partial variable assignment
pre called precondition finite set effects eff effects triplets hcond v di
cond possibly empty partial variable assignment called effect condition v
affected variable dv called value v


firichter westphal

c n integer valued non negative action cost function
operator hpre effi applicable state pre effects consistent
e state v hcond v di eff cond v v
otherwise case say operator applied resulting state
write
operator sequences ho write defined operator applicable respective state operator sequence called plan
p
cost sum action costs operators ni c oi
state variable v task finite domain representation associated directed
graph called domain transition graph captures ways value v may
change jonsson backstrom helmert vertex set graph dv
contains arc two nodes exists operator change value
v formally
definition domain transition graph
domain transition graph dtg state variable v v fdr task hv ci
digraph hdv ai includes arc hd iff operator hpre effi
hcond v eff union conditions pre cond holds contains v
contain v dv

system architecture
lama builds fast downward system helmert inheriting overall structure
large parts functionality planner fast downward lama accepts input
pddl level format fox long edelkamp hoffmann including adl
conditions effects derived predicates axioms furthermore lama extended
handle action costs introduced ipc helmert refanidis fast
downward lama consists three separate components
translation module
knowledge compilation module
search module
components implemented separate programs invoked sequence
following provide brief description translation knowledge compilation modules
main changes lama compared fast downward implemented search module
discuss detail
translation
translation module short translator transforms pddl input task finitedomain representation specified definition main components translator
efficient grounding instantiating schematic operators axioms invariant


fithe lama planner guiding cost anytime landmarks

synthesis determining groups mutually exclusive facts fact groups consequently replaced single state variable encoding fact group satisfied
given world state details component found recent article helmert
groups mutually exclusive facts mutexes found translation later used
determine orderings landmarks reason lama use finite domain
representations offered ipc object fluents instead performs translation
binary finite domain variables mutexes computed translation module
needed encoding task module extended lama retain
found mutexes later use landmarks
changes made compared translation module described helmert
add capability handling action costs implement extension concerning parsing
complex operator effect formulas limit runtime invariant synthesis
invariant synthesis may time critical particular large grounded pddl input limit
maximum number considered mutex candidates abort necessary
five minutes note finding mutexes change way translation module
works mutexes found resulting encoding task contains simply
binary domain state variables pddl input analysing competition
found synthesis aborted tasks one domain cyber
security
knowledge compilation
finite domain representation generated translator knowledge compilation module responsible building number data structures play central role subsequent
landmark generation search firstly domain transition graphs see definition produced
encode ways state variable may change value operator applications axioms furthermore data structures constructed efficiently determining set
applicable operators state evaluating values derived state variables refer
helmert detail knowledge compilation component lama inherits
unchanged fast downward
search
search module responsible actual two heuristic search
implemented lama greedy best first search aimed finding solution quickly
possible b weighted search allows balancing speed solution quality
variations standard textbook methods open closed lists greedy
best first search expands state minimal heuristic value h among open states
never expands state order encourage cost efficient plans without incurring
much overhead breaks ties equally promising states preferring states
reached cheaper operators e taking account last operator path considered
state search space cost entire path could used expense increased
time space requirements consider weighted search pohl
associates costs states expands state minimal f value f w h g
weight w integer g best known cost reaching considered state


firichter westphal

initial state contrast greedy search weighted search expands states whenever finds
cheaper paths
addition search use three types search enhancements inherited fast
downward helmert richter helmert firstly multiple heuristics employed
within multi queue guide search secondly preferred operators similar
helpful actions allow giving precedence operators deemed helpful
others state thirdly deferred heuristic evaluation mitigates impact large branching
factors assuming heuristic estimates fairly accurate following discuss
techniques resulting detail give pseudo code greedy best first
search weighted search similar point differences two
along way
multi queue heuristic search lama uses two heuristic functions guide search namegiving landmark heuristic see section variant well known heuristic see section two heuristics used separate queues thus exploiting strengths utilised
heuristics orthogonal way helmert roger helmert end separate
open lists maintained two heuristics states evaluated respect
heuristics successors added open lists case value corresponding heuristic open list choosing state evaluate expand next
search alternates different queues numerical priorities assigned
queue priorities discussed later
deferred heuristic evaluation use deferred heuristic evaluation means states
heuristically evaluated upon generation upon expansion e states generated
greedy best first search put open list heuristic value
parent removed open list evaluated heuristically
heuristic estimate turn used successors use deferred evaluation
weighted search analogous f instead h sorting criterion open lists
many states generated expanded deferred evaluation leads substantial reduction number heuristic estimates computed however deferred evaluation incurs loss
heuristic accuracy search longer use h values f values differentiate
successors state successors associated parents value open list preferred
operators helpful context provide alternative way determine promising
successors
preferred operators operators deemed particularly useful given state marked
preferred computed heuristic estimators along heuristic value
state see sections use preferred operators greedy best first search well
weighted search planner maintains additional preferred operator queue
heuristic state evaluated expanded successor states reached via
preferred operator preferred states put preferred operator queues addition
put regular queues non preferred states analogously regular states
state preferred least one heuristic added preferred operator queues allows
cross fertilisation information exchange different heuristics states
preferred operator queues evaluated earlier average form part queues
higher chance selected point time non preferred states addition


fithe lama planner guiding cost anytime landmarks

lama ipc version fast downward gives even higher precedence preferred
successors via following mechanism planner keeps priority counter queue
initialised iteration next state removed queue highest
priority whenever state removed queue priority queue decreased
priorities changed outside routine method alternate queues
thus expanding states preferred queues regular queues equally often increase use
preferred operators lama increases priorities preferred operator queues large
number boost value whenever progress made e whenever state discovered
better heuristic estimate previously expanded states subsequently next states
removed preferred operator queues another improving state found within
states boosts accumulate accordingly takes longer states regular queues
expanded
alternative methods preferred operators include one employed yahsp
system vidal preferred operators used non preferred ones contrast scheme necessarily empty preferred queues switching back regular
queues planner hoffmann nebel emphasis preferred operators even
stronger yahps search restricted preferred operators goal
found restricted search space exhausted case search started without preferred operators compared approaches method preferred operators
lama conjunction deferred heuristic evaluation shown substantial
performance improvement deliver best classical setting operators unit costs
richter helmert choice boost value critical found
values give similarly good outside range
performance drop noticeably
note action costs use preferred operators may even helpful
classical setting example operators cost heuristic pure
cost estimates might assign heuristic value states state space giving
guidance search preferred operators however still provide heuristic guidance
case case unit action costs extreme example similar cases
appear practice e g ipc domain openstacks operators except one
opening stack associated cost
pseudo code shows pseudo code greedy best first search main loop
lines runs goal found lines search space
exhausted lines closed list contains seen states keeps track links
states parents plan efficiently extracted goal state
found line iteration loop search adds current state initially
start state closed list processes lines unless state processed
case ignored line contrast weighted search processes states
whenever reached via path lower cost updates parent links
closed list accordingly search selects next open list used one
highest priority line decreases priority extracts next state processed lines
processing state includes calculating heuristic values preferred operators
heuristics lines expanding inserting successors appropriate open


firichter westphal

global variables
hv ci
regff pref reglm pref lm
best seen value
priority





































task solve
regular preferred open lists heuristic
best heuristic value seen far heuristic
numerical priority queue

function expand state
progress false
h lm
h preferred ops h heuristic value preferred operators given h
h best seen value h
progress true
best seen value h h
progress
boost preferred operator queues
priority pref priority pref
priority pref lm priority pref lm
succesor states applicable
succesor states
h lm
add queue regh value h
deferred evaluation

reached operator preferred ops h
add queue pref value queue pref lm value lm
function greedy bfs lama
closed list
h lm
initialize landmark heuristics
best seen value h
l reg pref
regular preferred open lists heuristic
lh
priority lh
current state
loop
current state closed list

extract plan tracing current state back initial state closed list
return
closed list closed list current state
expand state current state
queues empty
return failure
plan exists
q non empty queue highest priority
priority q priority q
get lowest valued state queue q
current state pop state q
greedy best first search search enhancements used lama


fithe lama planner guiding cost anytime landmarks

lists lines determined best state found lines preferredoperator queues boosted lines
restarting anytime search
lama developed international competition tailored conditions competition several ways detail conditions follows
previous competitions coverage plan quality runtime used varying degrees order
determine effectiveness classical system ipc introduced integrated
performance criterion operator pddl input associated non negative integer
action cost aim plan lowest possible total cost within given time limit
minutes per task given planner solves task within time limit
performance measure depends plan quality runtime thus suggests guiding
search towards cheapest goal rather closest goal well available time
best plan possible
guiding search towards cheap goals may achieved two ways lama
implements firstly heuristics estimate cost go e cost reaching goal
given state rather distance go e number operators required reach
goal landmark heuristic heuristic employed lama therefore capable
action costs secondly search take cost go given
state account cost necessary reaching state case weighted
search used lama make available time lama employs anytime
first runs greedy best first search aimed finding solution quickly possible
plan found searches progressively better solutions running series weighted
searches decreasing weight cost best known solution used pruning
search decreasing weight time makes search progressively less greedy trading
speed solution quality
several anytime weighted proposed hansen zhou
likhachev ferguson gordon stentz thrun underlying idea continue
weighted search past first solution possibly adjusting search parameters weight
pruning bound thus progressively better solutions anytime used lama
differs existing continue weighted search
finds solution instead start weighted search e discard open lists
previous search start initial state resulting duplicate effort
restarts help overcome bad decisions made early comparatively greedy search iterations
high weight richter et al explained follows finding goal state
sg open lists usually contain many states close sg search space
ancestors sg expanded furthermore states likely low heuristic values
proximity sg hence search continued even updating open
lists lower weights likely expand states around sg considering states
close initial state critical means search concentrating
improving end current plan opposed beginning bad beginning plan
however may severe negative influence quality may impossible improve
quality plan substantially without changing early operators


firichter westphal

























g


















g

initial search w

































x






x
x
x
x

g















g

b continued search w






























g










g
c restarted search w

figure effect low h bias grid states generated search h values shown
f values initial weighted search finds solution cost b continued search
expands many states around previous open list grey cells finding another sub optimal solution
cost c restarted search quickly finds optimal solution cost



fithe lama planner guiding cost anytime landmarks

consider example search shown figure task reach goal state
g g start state gridworld agent move cost
neighbours cell blocked heuristic values inaccurate estimates
straight line goal distances cells particular heuristic values underestimate distances
left half grid conduct weighted search weight figure assuming
simplicity standard textbook search e preferred operators deferred evaluation
heuristic values left happen lower right search
expands states left finds goal g cost grey cells generated
expanded search phase e open list figure b search continues
reduced weight solution cost consists turning right going g
however search first expand states open list f value smaller
expanding substantial number states second solution finds path starts
left takes long way around obstacle g cost instead restart
empty open list first solution figure c fewer states expanded critical
state right expanded quickly optimal path found
note example particular systematic errors heuristic values
leads greedy search astray makes restarts useful especially
deferred evaluation heuristic values may fairly inaccurate restarts useful
experimental comparison tasks ipc ipc richter et al
restarting performed notably better tested methods dominating similar weighted hansen zilberstein danilchenko hansen zhou
likhachev gordon thrun likhachev et al well anytime approaches
zhou hansen aine chakrabarti kumar
cost distance estimates
heuristic estimators used lama cost sensitive aiming guide search towards
high quality solutions focusing planner purely action costs however may dangerous
cheap plans may longer difficult worst case could mean
planner fails plan within given time limit zero cost operators present particular
challenge since zero cost operators added search path free even costsensitive search weighted may explore long search paths without getting
closer goal methods suggested allow trade putative cost go
estimated goal distance gerevini serina ruml however require user specify relative importance cost versus distance front choice
obvious context ipc lama gives equal weight cost distance estimates adding two values computation heuristic functions details
see sections measure simple one effect changes depending
magnitude variation action costs smaller action costs
method favours short plans cheap plans example zero cost operators estimated cost whereas operators cost estimated cost lama would thus
prefer operators cost zero cost operators contrast action costs
task larger length typical plans cost estimates dominate distance estimates lama completely guided costs nevertheless simple measure proves
useful ipc benchmarks outperforming pure cost search experiments

firichter westphal


c

b

e

plane

box

truck

figure simple logistics task transport box location b location e

phisticated methods automatically balancing cost distance example normalising
action costs given task respect mean median topic future work

landmarks
landmarks subgoals must achieved every plan first introduced porteous
sebastia hoffmann later studied depth authors hoffmann
porteous sebastia landmarks guide search solution
intuitive humans might use consider well known benchmark domain logistics
goal deliver objects e g boxes locations fleet vehicles
cities consist sets locations trucks may transport boxes within city whereas planes
used cities example logistics task shown figure arguably first
mental step human would perform trying solve task figure realise
box must transported two cities left city locations ad right city
location e therefore box transported plane turn means
box airport location c loaded plane partitions
task two subproblems one transporting box airport location c one
delivering city subproblems smaller easier solve
original task
landmarks capture precisely intermediate conditions used direct search
facts l box c l box plane landmarks task shown figure
knowledge well knowledge l must become true l automatically
extracted task preprocessing step hoffmann et al
lama uses landmarks derive goal distance estimates heuristic search measures
goal distance state number landmarks still need achieved path
state goal orderings landmarks used infer landmarks
achieved next whether certain landmarks achieved addition
preferred operators helmert used suggest operators achieve landmarks
need become true next recently shown method landmarks leads
substantially better performance previous use landmarks hoffmann et al
terms coverage terms plan quality richter et al discuss differences
detail section following section define


fithe lama planner guiding cost anytime landmarks


plane
e

c

b
box

plane
f

truck


truck

figure extended logistics task transport box location b location f
landmarks orderings formally including useful special cases detected
efficiently
definitions
hoffmann et al define landmarks facts true point every plan
given task introduce disjunctive landmarks defined sets facts
least one needs true point subsume landmark definitions
general definition propositional formulas believe useful future work
topic landmarks noted however lama currently supports fact
landmarks disjunctions facts details see section hoffmann et al
pspace hard determine whether given fact landmark whether ordering holds
two landmarks complexity carry straight forward way
general case propositional formulas repeat proofs
definition landmark
let hv ci task finite domain representation let ho
operator sequence applicable let j n
propositional formula facts called fact formula
fact f true time iff f ho oi
fact formula true time iff holds given truth value facts time
time considered true
fact formula landmark iff plan true time
propositional formula facts added time iff true time
time considered added time true
fact formula first added time iff true time time j
note facts initial state facts goal landmarks definition
landmarks discussed earlier example task figure facts however
complex landmarks may required larger tasks consider extended version


firichter westphal

example city right two airports multiple planes trucks
depicted figure previous landmark l box c still landmark
extended example however l box plane corresponding fact landmark
task since neither box plane box plane landmark disjunction box
plane box plane however landmark following refer landmarks
facts fact landmarks disjunctions facts disjunctive landmarks
use disjunctive landmarks shown improve performance compared fact
landmarks richter et al complex landmarks introduce additional difficulty
regard detection handling mentioned lama currently
uses fact landmarks disjunctive landmarks rather general propositional formulas
extension complex types landmarks interesting topic future work see keyder
richter helmert discussion conjunctive landmarks
kinds orderings landmarks defined exploited
phase define three types orderings landmarks equivalent formulations
definitions hoffmann et al adapted fdr setting
definition orderings landmarks
let landmarks fdr task
say natural ordering written plan
true time true time j
say necessary ordering written n plan
added time true time
say greedy necessary ordering written gn
plan first added time true time
natural orderings general every necessary greedy necessary ordering natural
vice versa similarly every necessary ordering greedy necessary vice versa
knowing natural ordering necessary greedy necessary allows deducing additional
information plausible temporal relationships landmarks described later
section landmark heuristic lama uses knowledge deduce whether landmark
needs achieved theoretical concept necessary orderings true
step straightforward appealing greedy necessary orderings
true step becomes true first time however methods landmarks
conjunction orderings often many landmarks general
concept greedy necessary orderings hoffmann et al lama follows paradigm
finds greedy necessary well natural orderings necessary orderings example
figure box truck must true box c box f first
orderings greedy necessary necessary second neither greedy necessary
necessary natural
hoffmann et al propose kinds orderings landmarks usefully exploited example reasonable orderings first introduced context
top level goals koehler hoffmann orderings necessarily hold given
task however adhering orderings may save effort solving task
example task reasonable load box onto truck driving truck airport


fithe lama planner guiding cost anytime landmarks

c however order guaranteed hold every plan possible though reasonable drive truck c first drive b collect box return c idea
landmark must become false order achieve landmark needed
reasonable achieve otherwise would achieve twice
idea may applied iteratively sometimes able induced reasonable orderings
restrict focus plans obey first set reasonable orderings hoffmann et al call
reasonable orderings found second pass obedient reasonable orderings authors
note conducting two iterations process worthwhile typically
notable additional benefit following definition characterises two types
orderings formally
definition reasonable orderings landmarks
let landmarks fdr task
say reasonable ordering written r every plan
added time first added time j j holds true
time j true time k j k
say plan obeys set orderings orderings x regardless
type holds first added time true time j
say obedient reasonable ordering regard set
orderings written
r every plan obeying added time
first added time j j holds true time j
true time k j k
definitions equivalent hoffmann et al except care
plans rather arbitrary operator sequences allowing us theoretically identify
reasonable orderings practice use approximation techniques hoffmann et al
thus generating orderings
reasonable obedient reasonable orderings may cyclic e
chains orderings r x r landmarks may exist hoffmann et al
case natural orderings definition implies cannot cyclic
solvable tasks
addition definitions given problematic special cases note definition reasonable ordering r includes case exist j
added time first added time j e case holds plans first
added b time implies reasonable orderings
generalisation natural orderings might regarded desirable property b may lead
undesirable orderings example holds r r pairs
first added time plans instance true initial state
similarly holds r use definitions despite weaknesses
simply note planner create contentious orderings lama
create reflexive orderings r r true initial state created
assumed proven must true strictly point plan see section
according personal communication authors case overlooked hoffmann et al



firichter westphal

truck
truck b

box b

box truck
truck c
plane c plane c

box c

box plane box plane
box f
figure partial landmark graph example task shown figure bold arcs represent natural
orderings dashed arcs represent reasonable orderings

definition reasonable orderings addressing definition hoffmann et al identifying precisely wanted unwanted cases topic future work closely
connected question whether reasonable orderings interpreted strict orderings
achieved definition obedience whether allow
achieving simultaneously use strict sense obedience reasons consistency
previous work hoffmann et al aligns better intended meaning
reasonable orderings even though strict interpretation obedience fit contentious
cases discussed
landmarks orderings may represented directed graph called landmark graph
partial landmark graph extended example depicted figure following section
contains extensive description landmarks orderings discovered lama
readers interested exact details process may skip description central
rest section discusses finding landmarks
relates previous work section describes landmarks used heuristic estimator
lama
extracting landmarks orderings
mentioned deciding whether given formula landmark deciding orderings landmarks pspace hard thus practical methods finding landmarks
incomplete may fail given landmark ordering unsound may falsely declare formula landmark determine false ordering several polynomial methods
proposed finding fact landmarks disjunctive landmarks back chaining
goals task criteria relaxed graph porteous et al hoffmann et al porteous cresswell forward propagation graph
zhu givan


fithe lama planner guiding cost anytime landmarks

used lama finding landmarks orderings partly
previous back chaining methods mentioned adapting finite domain representation including conditional effects addition exploits finite domain representation domain transition graphs landmarks discuss differences
method previous ones detail section idea back chaining
start set known landmarks fact landmarks disjunctive landmarks
must true plan already known landmark may become true procedure starts
set goal facts stops landmarks found method
identifies landmarks orderings considering given fact landmark disjunctive
landmark true initial state
shared preconditions possible first achievers operator preconditions
effect conditions shared effects potentially first achieve method
adapted previous work see section
fact landmarks v domain transition graph dtg v identify nodes
dtg e values v must necessarily traversed order reach
restricted relaxed graph lacking operators could possibly achieve
subtleties involving conditional effects explained later every landmark
occur last level graph achieved
previous work porteous et al hoffmann et al subsequently use discovered landmarks orderings derive reasonable obedient reasonable orderings postprocessing step following give detailed description step procedure
finding landmarks orderings lama high level pseudo code containing
steps described following sections shown
back chaining landmarks via shared preconditions possible first achievers
first achievers fact landmark disjunctive landmark operators potentially
make true applied end partial plan never made true
call fact precondition first achievers shared precondition least
one first achievers must applied make true must true achieved
thus landmark ordering gn effect condition operator
treated precondition context interested finding conditions
must hold become true following use term extended preconditions
operator denote union preconditions effect conditions
extended preconditions shared achievers fact calculated line
addition create disjunctive landmarks selecting precondition facts first
achievers sets facts set contains one extended precondition fact first
achiever line one first achievers must applied make true one facts
must true disjunction thus landmark ordering gn since
number disjunctive landmarks exponential number achievers restrict
disjunctions facts stem predicate symbol deemed
helpful hoffmann et al furthermore discard fact sets size greater
four though found restriction little impact compared predicate restriction


firichter westphal

global variables
hv ci
lg hl oi
queue
































task solve
landmark graph
landmarks back chained

function add landmark ordering x
fact l
prefer fact landmarks
l l
remove disjunctive landmark
x x l
remove obsolete orderings
l var var abort overlap existing landmark
return
l
add landmark graph
l l
queue queue
x
add ordering graph
function identify landmarks
lg hs
landmark graph starts goals orderings
queue
orderings
additional orderings see section
queue
pop queue

rrpg restricted relaxed plan graph
preshared shared extended preconditions extracted rrpg
preshared
add landmark ordering gn
predisj sets facts covering shared extended preconditions given rrpg
predisj

add landmark ordering gn
fact
prelookahead extract landmarks dtg variable rrpg
prelookahead
add landmark ordering
potential orderings potential orderings f f never true rrpg
add orderings landmarks potential orderings

identifying landmarks orderings via back chaining domain transition graphs
restricted relaxed graphs



fithe lama planner guiding cost anytime landmarks

p



b



e



c

p



f

figure domain transition graph location box extended example figure

since pspace hard determine set first achievers landmark hoffmann et al
use approximation containing every operator possibly first achiever
porteous cresswell intersecting extended preconditions possibly
operators lose correctness though may miss landmarks approximation first achievers done help restricted relaxed graph
construction graph leave operators would add unconditionally
ignore conditional effects could potentially add relaxed graph
levels last set facts approximation facts achieved
task operator applicable given approximating set achieves
possible first achiever
landmarks via domain transition graphs
given fact landmark l v l use domain transition graph v fact
landmarks v l line follows dtg contains node occurs every path
initial state value v variable landmark value l node corresponds
landmark value l v know every plan achieving l requires v takes value l
hence fact l v l introduced landmark ordered naturally l
kinds landmarks iteratively remove one node dtg test simple
graph whether v l still connected removed node corresponds
landmark improve procedure removing preprocessing step nodes
know cannot true achieving l nodes correspond
facts l appear restricted rpg never adds l removing nodes
may decrease number paths reaching l may thus allow us landmarks
consider landmark graph extended example shown figure
landmarks orderings found via back chaining procedure described previous
section landmarks direct preconditions achieving successors graph
two exceptions box truck box c two landmarks however found
dtg method dtg figure immediately shows box location must take
value value c path initial value b goal value f


firichter westphal

additional orderings restricted relaxed graphs
restricted relaxed graph rrpg described section given landmark leaves operators could possibly achieve used extract additional
orderings landmarks landmark appear graph cannot reached
thus introduce natural ordering efficiency reasons construct
rrpg line e needed possible first achievers
back chaining procedure extract orderings facts
reached line facts f later recognised landmarks
introduce ordering f line
overlapping landmarks
due iterative nature possible disjunctive landmarks
least one facts already known fact landmark cases let fact
landmarks take precedence disjunctive ones e disjunctive landmark discovered
includes already known fact landmark add disjunctive landmark conversely
soon fact landmark found part already known disjunctive landmark discard
disjunctive landmark including orderings add fact landmark instead keep
procedure resulting landmark graph simple furthermore allow landmarks
overlap whenever fact newly discovered disjunctive landmark part
already known landmark add newly discovered landmark cases handled
function add landmark ordering lines
generating reasonable obedient reasonable orderings
want introduce reasonable ordering l r l two distinct fact landmarks l
l holds l must true time first achieving l b achieving
l l would require making l false achieve l approximate b
proposed hoffmann et al sufficient conditions case test l
chain natural greedy necessary orderings landmarks l l ln
n ln l greedy necessary ordering l gn ln b check whether l
l inconsistent e mutually exclusive ii operators achieving l effect
inconsistent l iii landmark l inconsistent l ordering
l gn l
inconsistencies facts easily identified finite domain representation
facts form v v e map variable different values
addition lama uses groups inconsistent facts computed translator component
second pass obedient reasonable orderings added done method
except reasonable orderings used addition natural greedy necessary
orderings derive fact landmark l must true landmark l finally use
simple greedy break possible cycles due reasonable obedient reasonable orderings landmark graph every time cycle identified one involved reasonable
note ordering f g neither implies f g general conversely f g neither
implies f g



fithe lama planner guiding cost anytime landmarks

obedient reasonable orderings removed removes obedient reasonable orderings
rather reasonable orderings whenever possible
related work
orderings landmarks generalisation goal orderings frequently
exploited search past particular irani cheng irani
cheng cheng irani preprocessing procedure analyses
task extract necessary orderings goals imposed search
goal ordered goal b plan necessarily true b
koehler hoffmann introduce reasonable orderings goals
hoffmann et al article detailing earlier work porteous et al introduce
idea landmarks generalise necessary reasonable orderings goals landmarks
propose methods finding landmarks proposed method finding
landmarks subsequently extended porteous cresswell closely
related hoffmann et al propose method finding fact landmarks proceeds three
stages first potential landmarks orderings suggested fast candidate generation procedure second filtering procedure evaluates sufficient condition landmarks candidate
fact removing fail test third reasonable obedient reasonable orderings landmarks approximated step largely identical
except use different methods recognise inconsistencies facts
generation landmark candidates done via back chaining goal much
intersecting preconditions operators first achieve fact f
appear f relaxed graph note even operators share
common precondition l might first achievers f appearing f relaxed
graph l precondition hence l landmark test whether
landmark candidate l found via back chaining indeed landmark hoffmann et al
build restricted relaxed task leaving operators could add l task
unsolvable l landmark sufficient necessary condition l necessary
solving relaxed task necessary solving original task converse
true verification procedure guarantees method hoffmann et al generates true
landmarks however unsound orderings may established due unsound landmark candidates
unsound landmarks pruned failing verification test unsound orderings may
remain
porteous cresswell propose alternative approximation first achievers
fact f use consider first achievers possibly applicable f
thus guarantee correctness found landmarks orderings disjunctive
landmarks method landmark detection differs adding detection landmarks
via domain transition graphs detection additional orderings via restricted relaxed
graphs porteous cresswell additionally reason multiple occurrences landmarks
landmark achieved made false achieved several times plans

hoffmann et al exploits landmarks decomposing task
smaller subtasks making landmarks intermediary goals instead searching goal
task iteratively aims achieve landmark minimal respect orderings


firichter westphal

detail first builds landmark graph landmarks vertices orderings arcs possible
cycles broken removing arcs sources resulting directed acyclic graph
handed base planner disjunctive goal plan generated achieve one
landmarks landmark along incident arcs removed landmark
graph process repeats end state generated plan landmark graph
becomes empty base planner asked generate plan original goal note even
though goal facts landmarks thus achieved previously may violated

base planner solving subtasks planner used hoffmann et al
experimented found decomposition subtasks lead directed search solving larger instances plain many domains however found
method leads worse average performance ipc benchmarks
fast downward base planner richter et al furthermore method hoffmann et al often produces solutions longer produced base planner
disjunctive search control frequently switches different parts task may
destructive interactions sometimes even leads dead ends fails
solvable tasks contrast incorporates landmark information searching
original goal task via heuristic function derived landmarks see next
section recently shown avoids possibility dead ends usually generates
better quality solutions richter et al
sebastia et al extend work hoffmann et al employing refined preprocessing technique groups landmarks consistent sets minimising destructive interactions
sets taking sets intermediary goals avoid increased plan length
experienced hoffmann et al however according authors preprocessing
computationally expensive may take longer solving original
zhu givan propose technique finding landmarks propagating necessary
predecessor information graph definition landmarks encompasses operators
necessary plan called action landmarks furthermore introduce notion
causal landmark fact landmarks required precondition operators
every plan argue fact landmarks causal accidental effects
warrant sought explicitly computes action landmarks causal
fact landmarks time propagating information construction relaxed
graph extended variant able infer multiple occurrences
landmarks gregory et al build work disjunctive landmarks
symmetry breaking
similar work zhu givan use causal fact landmarks action landmarks
estimate goal distance given state end treat fact landmark virtual
action sets operators achieve fact landmark obtain distance estimate bin
packing items packed bins real landmark actions singletons virtual
actions bin may contain elements pairwise intersection elements
non empty zhu givan employ greedy estimate minimum number bins
use value distance estimate experimental preliminary however
demonstrate significant advantage method planner


fithe lama planner guiding cost anytime landmarks

landmark heuristic
lama system uses landmarks calculate heuristic estimates since know
landmarks must achieved order reach goal approximate goal distance
state reached path e sequence states estimated number landmarks
still need achieved onwards landmarks given

l b l accepted reqagain
l set discovered landmarks accepted set accepted landmarks
reqagain set accepted landmarks required following
definitions given landmarks graph l




l x
hi







accepted b
hoi
accepted l





x accepted

reqagain b accepted

gn accepted
landmark first accepted state true state landmarks ordered
accepted predecessor state generated landmark
accepted remains accepted successor states initial state accepted landmarks
true initial state predecessors landmark graph
accepted landmark required true forms part goal
b must true directly landmark e gn accepted
latter case since know must still achieved must true time step
holds must achieved number l heuristic value
assigned state pseudo code heuristic given
landmark heuristic assign non zero value state goal state since
goals landmarks counted required per condition however
heuristic may assign non zero value goal state happens plans found
obey reasonable orderings landmark graph case goal state may
reached without landmarks accepted hence need explicitly test states goal
condition order identify goal states search
note heuristic path dependent e depends sequence states
reached initial state raises question happens state reached
via several paths lama heuristic state calculated first reached
alternative option would evaluate time path discovered taking
account information paths known time karpas domshlak note
calculate landmarks accepted given set paths p accepted p b

p accepted since holds landmark achieved along paths p must
special case r become true simultaneously could avoid accepting
buffet hoffmann could modify definition reasonable orderings
r hold unless must become true strictly general goal states may
assigned non zero value however still persists even modifications



firichter westphal

global variables
hv ci
lg hl oi
accepted

task solve
landmark graph
landmarks accepted states evaluated far

function lm count heuristic
hi
initial state


accepted l x
else
ho ho
parent
accepted parent calculated
reached l x accepted parent
accepted accepted parent reached
notaccepted l accepted
reqgoal n accepted

reqprecon accepted gn accepted
return notaccepted reqgoal reqprecon
landmark count heuristic

achieved onwards heuristic value derived analogous
way
landmark heuristic outlined estimates goal distance states e number
operator applications needed reach goal state given state participate ipc
made function cost sensitive weighting landmarks estimate minimum
cost apart estimating goal distance counting number landmarks still need
achieved state estimate cost go state sum minimum costs
landmarks cost counted landmark minimum action cost
first achievers alternative sophisticated methods computing costs landmarks
conceivable potential topic future work heuristic value lama assigns
state however pure cost go estimate rather sum cost estimate
distance estimate thus accounting costs go goal distances states
measure aims balance speed search quality plans particular counter act
may arise zero cost operators see section
generate preferred operators along landmark heuristic operator preferred
state applying achieves acceptable landmark next step e landmark whose predecessors already accepted acceptable landmark achieved within one step
preferred operators occur relaxed plan nearest acceptable landmark
nearest landmark cost unaware setting one relaxed reachable minimal number
operators cost sensitive setting landmark reachable cheapest hadd cost
see section cost distance estimates taken account nearest
landmark computed building relaxed graph equivalently performing relaxed exploration lama see section determining earliest least
costly occurrence acceptable landmark structure relaxed plan landmark


fithe lama planner guiding cost anytime landmarks

extracted operators plan form preferred operators applicable
current state

cost sensitive add heuristic
first introduced landmark heuristic richter et al proved competitive compared established heuristics heuristic hoffmann nebel
however joint use heuristic landmark heuristic multi heuristic
search improved performance system compared heuristic
thus path lama follows heuristic relaxation task
ignores delete effects fdr tasks translates allowing state variables hold several
values simultaneously
heuristic state computed two phases first phase forward phase
calculates estimate fact task costly achieve fact
relaxed task concurrently selects operator called best support fact f
greedy approximation cheapest achiever achiever f costs making
applicable applying minimal among achievers f starting second
phase plan relaxed task constructed best supports fact done
chaining backwards goals selecting best supports goals recursively
selecting best supports preconditions already selected operators union
best supports constitutes relaxed plan e fact best support added
relaxed plan even fact needed several times precondition length
resulting relaxed plan heuristic estimate reported
forward phase viewed propagating cost information operators facts
relaxed graph hoffmann nebel however graph need
explicitly constructed compute heuristic instead form generalised dijkstra cheapestpath described liu koenig furcy used lama propagates
costs preconditions applicable operators operators effects method
operator fact represented reducing time space requirements nk
n size relaxed task k depth relaxed graph
n order deal conditional effects operators n effects split n operators
one effect corresponding effect conditions moved preconditions
operators n operators selected inclusion relaxed plan original
operator included instead operator included relaxed plan
cost estimate operator original heuristic depth relaxed
graph case unit cost operators equivalent fuentetaja borrajo
linares lopez propagating costs via hmax criterion bonet geffner hmax
criterion estimates cost operator maximum costs preconditions plus
action cost operator without action costs cost fact
estimated cost cheapest achiever zero fact true current state
originally proposed unit cost heuristic adapted cost
straightforward way action costs cost propagation phase reporting total cost
resulting relaxed plan rather length heuristic estimate
criteria cost propagation variations heuristic bryce kambhampati fuentetaja et al one variant previously proposed litera

firichter westphal

ture kambhampati use hadd criterion bonet geffner similar
hmax criterion except estimating cost operators via sum rather maximum
costs preconditions following use term add variant
heuristic independently us keyder geffner implemented add heuristic
call ha planner ha ipc formal specification add heuristic
found heuristic function lama similar cost sensitive add
heuristic however landmark heuristic lama purely guided action costs
rather uses cost distance estimates equally means cost propagation
operator contributes action cost plus distance rather action cost
propagated cost estimates

experiments
evaluate much central features lama contributes performance
conducted number experiments comparing different configurations features
focus detailed evaluation benchmark tasks international competition
ipc interested setting action costs effect landmarks
classical tasks without actions costs studied previous work richter et al
provide summarising case domains ipcs
section benchmark set ipc comprises domains tasks resulting
total tasks one domains openstacks two different formulations available
strips adl competition report better two formulations
planner
described section lama builds platform provided fast downward three
major ways use landmarks cost sensitive heuristics guide search
cheap plans employing anytime search continue search better solutions
time remains examine usefulness landmarks conduct experiments without
keeping planner features fixed use action costs lama
number design decisions landmark heuristic add heuristic made
cost sensitive however rather focusing purely action costs lama uses distance
estimates cost estimates combination see section balance speed quality
search measure benefit combining test three different approaches
dealing costs traditional cost unaware heuristics distance estimates b
purely cost sensitive heuristics though distance estimates tie breaking c
combination distance cost estimates lama different choices regarding
landmarks approaches action costs thus following six planner configurations
f use cost unaware add heuristic estimating goal distance
fc use purely cost sensitive add heuristic estimating cost go
f c use add heuristic combines action costs distances
fl use cost unaware variants add heuristic landmark heuristic
flc use purely cost sensitive variants heuristics
fl c use variants combine action costs distances heuristics


fithe lama planner guiding cost anytime landmarks

note contrast setting optimal karpas domshlak landmark
heuristic competitive case landmarks lama used provide
additional information already guided search include configurations landmarks heuristic estimators detailed however provide
summarising supporting claim competitive
configuration run iterated anytime search highlighting contribution
iterated search report first solutions vs final solutions final solution
configuration last best solution finds within minute timeout note
quality solution determined cost irrespective whether heuristic used
calculate cost sensitive discussing three possible approaches costs costunaware search purely cost sensitive search lamas combination distances costs
write x xc x c denote three cost approaches independently heuristics used
measure performance criterion employed ipc helmert
et al planner configuration run minutes per task timeout planner
aggregates ratio c c total score c cost plan found c cost
best known solution e g reference solution calculated competition organisers
best solution found participating planners
experiments run hardware used competition cluster machines intel
xeon cpus ghz clock speed time memory limits set values
competition timeout minutes memory limit gb following
first provide general overview discuss special cases e domains
certain configurations deviate overall trend try give plausible
explanations may happen
overview
section purely cost add configuration fc solves significantly
fewer tasks cost unaware counterpart f fc finds higher quality solutions
make low coverage number solved tasks measuring performance
ipc criterion landmarks improves quality slightly cost unaware search landmarks fl achieves highest ipc performance score amongst configurations
cost sensitive add heuristic adding landmarks resulting configurations flc fl c
increases coverage substantially incurring small loss quality iterated search improves scores configurations significantly lastly combination cost
distance estimates heuristics x c superior pure cost search iterated search together landmarks combination cost distance estimates fl c
achieves nearly performance fl configuration
following support findings experimental data section performance terms ipc score cost sensitive add heuristic scores
lowly terms ipc criterion landmarks combination cost distance estimates together make bad performance furthermore demonstrate magnitude impact iterated search performance scores section coverage
bad performance cost sensitive add heuristic due solving fewer
tasks use landmarks mitigates section quality present
data showing purely cost sensitive add heuristic finds higher quality plans cost

firichter westphal

domain

base

c

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total
total ipc

























domain

f

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total












ipc planners
ha
























first solutions
fl flc
fc
f c

fl c
























































lama












slowed lama



fl c





































final solutions iterated search
f
fc
f c
fl flc fl c


































































table performance scores rounded whole numbers planners scoring points
ipc top experimental configurations bottom scores ipc planners recalculated see text lama refer achieved lama slowed
factors respectively fl c essentially ipc planner lama

unaware add heuristic first search iterated search difference
disappears furthermore iterated search intermediate cost distance
estimates scores higher purely cost search lamas landmarks
combination cost distance estimates fl c thus effectively mitigates bad performance cost sensitive add heuristic
performance terms ipc score
scores planners scoring points ipc shown top part
table apart lama includes base planner run competition organisers
preprocessing step compiles away action costs ha planners keyder


fithe lama planner guiding cost anytime landmarks

geffner c planner lipovetzky geffner plans found
planners obtained competition website helmert et al however
scores plans depend best known solutions tasks scores
thus differ ones published ipc calculated reflect
best solutions found experiments illustrate magnitude change original total
scores ipc planners shown parentheses last table row
configuration fl c essentially planner ipc version
lama report minor corrections implemented lama
since competition addition planner makes arbitrary decisions points
execution due underlying programming library methods leading varying however
table shows differences fl c lama small furthermore
added columns table showing hypothetical lama would obtained
search slowed constant factors respectively e obtained
cutting search minutes seconds respectively numbers
lama still outperforms ipc planners even severe handicap demonstrating
good performance lama mainly due efficient implementation
bottom part table contains six experimental configurations
first search iteration left minute timeout right seen use
landmarks iterated search lead significant improvements performance even one
two features planner performs notably better competitors ipc
note however baseline planner performed badly cyber security due
reading large task descriptions combination benefits landmarks iterated
search grow cost unaware search use landmarks additional score points
first solutions additional points final solutions similar hold
cost sensitive configurations mainly due openstacks domain landmarks
highly detrimental solution quality first solutions iterated search mitigates
improving quality similar levels without landmarks overall thus slight
synergy effect landmarks iterated search making joint benefit two features
larger sum individual contributions effect landmarks openstacks
domain discussed detail later
use cost sensitive search pay experiments cost unaware search
least roughly equal often substantially better cost sensitive configurations
cost sensitive seems lama participating planners ipc notably cost sensitive competitors lama fare worse
cost ignoring baseline lama best performance achieved cost unaware search
landmarks iterated search however combination cost distance estimates instead fl c leads performance almost equally good particular fl c substantially
better pure cost search flc iterated search used
detailed view data provided figure performance
time six experimental configurations data point seconds example shows
score corresponding planner would achieved timeout seconds
top panel shows cost sensitive search consistently worse cost unaware search
add heuristic landmarks see centre panel two settings fl fl c achieve
better performance f though fl c needs minutes surpass f fl within
seconds pure cost search even landmarks flc performs worse f times


firichter westphal




score




f
fc
f c








time seconds






score




f
fl
flc
fl c








time seconds






score




f
fl
flc
fl c








time seconds



figure score time iterated search top centre panel without iterated search
e showing first solutions bottom panel



fithe lama planner guiding cost anytime landmarks

domain

base

c

ha



lama

fl c

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total



































































domain

f

fc

f c

fl

flc

fl c

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total



































































table coverage planners scoring points ipc top experimental
configurations bottom ipc planners taken competition fl c
essentially ipc planner lama

bottom panel figure shows iterated search performance best
configurations fl f fl c flc fairly similar eventually cost sensitive approaches
need time cost unaware configurations reach performance levels
coverage
bad performance cost sensitive search surprising given performance criterion
awards higher scores cheaper plans one explanation could mainly due different coverage finding plans high quality substantially harder finding plans low
quality focusing nearest goals rather cheapest goals may solve tasks within
given time limit table coverage considered planners configurations
numbers confirm landmarks coverage cost unaware search indeed
substantially higher coverage cost sensitive search however landmarks differences coverage cost approaches small particular landmarks
improve coverage cost unaware search bring cost sensitive configurations


firichter westphal

domain
cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total

domain
cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total

fc f
tasks c ratio






















fc f
tasks c ratio






















f c f
tasks c ratio






















f c f
tasks c ratio






















flc fc
tasks c ratio






















flc fc
tasks c ratio






















fl c f c
tasks c ratio






















fl c f c
tasks c ratio






















table average ratio first solution costs top best solution costs iterative search
bottom pairs configurations commonly solved tasks
coverage level cost unaware search landmarks thus seem helpful
overcoming coverage cost sensitive search
mentioned landmark heuristic however competitive
landmark heuristic add heuristic ipc performance scores
iterated search coverage points three possible
cost settings substantially worse performance scores greater coverage
points greater achieved lama configurations
quality
next step look purely solution quality firstly want answer question whether
improvement coverage achieved landmarks cost sensitive search comes price
solution quality e whether landmarks directs search close goals rather cheap
goals secondly would know solution quality differs cost sensitive
cost unaware configurations particular much quality lose combining


fithe lama planner guiding cost anytime landmarks

distance cost estimates x c opposed pure cost search xc score used ipc
table incorporates coverage quality information counting unsolved tasks
method allows ranking several planners solving different subsets total benchmark
set interested examining quality independent coverage must restrict focus tasks solved compared planners table contains quality information comparing
solution costs several configurations compare configurations pair wise order
maximise number commonly solved tasks top part table contains comparisons
involving first solutions found configuration bottom part table concerns
best solutions found iterative search pair configurations number
tasks solved geometric mean cost ratio plans
expected cost sensitive configurations fc f c cheaper plans costunaware configuration f average particular pure cost search fc finds high quality
first plans see first column top part table fc f c however difference f large domains notably elevators plans found
cost sensitive heuristics actually worse plans found cost unaware search
landmarks deteriorate quality first plans fc f c starts worse
quality fc noticeably deteriorated landmarks configurations however main negative impact landmarks openstacks domain plans become
nearly twice expensive fc expensive f c contrast remaining
domains average plan quality configurations landmarks even slightly better
average without landmarks
note iterative search remarkable impact relative performance different configurations looking solutions found iterative search fc actually performs
worse f c whereas way round first solutions compare first two
columns top row versus bottom row table explained extent
fact reasons cause fc low coverage prevent improving much time selected domains later cost sensitive heuristic often
expands many nodes cost unaware search leading observed behaviour
likely due fact finding plans high quality hard thus unsuccessful many
benchmark tasks example domains cost sensitive search leads large local
minima exist cost unaware search generally good plans often longer
bad plans may lead increased complexity particular domains heuristic
values inaccurate showcase cost sensitive search detail
elevators parc printer domains later
iterative search landmarks deteriorate quality fc f c average
negative impact openstacks domain longer present effect openstacks
domain discussed detail later
summarising findings say landmarks effectively support cost sensitive
add heuristic finding solutions without steering search away good solutions similarly combining distance cost estimates x c leads search finding solutions quickly
without overly sacrificing quality demonstrated superior anytime performance compared
pure cost search
way example present detailed four nine competition domains
choose domains deem particular interest exaggerate contradict general trends discussed far domains elevators parc printer


firichter westphal










figure example elevators task

highlight cost sensitive search cyber security cost sensitive search performs
uncharacteristically well openstacks domain landmarks lead usual
improvement rather deterioration performance
elevators
elevators domain transportation passengers building via fast slow elevators elevator certain passenger capacity access certain floors passengers
may change elevators get final destination furthermore two different types
elevators different associated cost functions contrast miconic domain used
earlier international competition bacchus transporting passengers via elevators one elevator access floors
one unit cost operator elevators floors building grouped blocks overlapping one floor slow elevators operate within block access floors within
block fast elevators access blocks certain floors within block
first ipc tasks every second floor tasks every fourth floor fast elevators
usually expensive slow elevators except distance two floors elevator
types cost however fast elevators may sometimes advantageous transporting
passengers blocks avoid need passengers switch elevators shared
floor blocks usually higher capacity
example task eight floors grouped two blocks shown figure
total four elevators two slow ones two fast ones cost function used ipc tasks
moving elevator current location target floor n slow elevators n
fast elevators n distance travelled number floors current location
elevator target operators concerning passengers boarding leaving elevators
free cost assuming cost function cheaper example transport passenger
located floor two slow elevators changing floor direct fast elevator
elevators one domains configurations cost sensitive add heuristic
solve far fewer cost unaware counterparts landmarks increases coverage
solve completely furthermore notable
cost sensitive configurations solve solutions often worse quality solutions
cost unaware configurations table illustrates fact first solutions found


fithe lama planner guiding cost anytime landmarks

task















avg

quality ipc score
f
fc
f c

































f

















length
fc

















f c

















table comparison plan qualities measured via ipc scores plan lengths first
solutions f fc f c elevators shown tasks solved three configurations
bold print indicating best solution

add heuristic iterative search shown solution quality f c improves
similar level f whereas fc remains substantially worse
full explanation configurations involving cost sensitive
add heuristic perform badly domain several factors seem play role firstly
attempt optimise costs cost sensitive add heuristic focuses relatively complex solutions
involving mainly slow elevators many transfers passengers elevators
relaxed plans less accurate e translate less well actual plans case
cost unaware heuristic secondly costs associated movements elevators dominate
heuristic values causing local minima cost sensitive heuristic thirdly capacity
constraints associated elevators may lead plateaus bad quality plans particular
cost sensitive heuristic following sections describe factors detail
lastly found deferred heuristic evaluation technique used lama see section perform well domain deferred evaluation fc configuration solves additional tasks though quality solutions remains worse f
configuration partly explains ha planner keyder geffner
substantially higher coverage fc configuration domain two planners use
heuristic differ several aspects apart deferred evaluation aspects include search used greedy best first search vs enhanced hill climbing method
preferred operators maintaining additional queues preferred states vs pruning nonpreferred successor states


firichter westphal

f
fc
f c

slow moves




fast moves




ratio fast slow




table total elevator moves ratio fast slow moves first solutions found f fc
f c configurations elevators instances solved three configurations
slow vs fast elevators
examining found fc f c configurations tend produce plans
slow elevators used passengers f configuration uses
fast elevators often cf table surprising individual passenger
travelling starting point destination tends cheaper slow elevator unless
distance short whereas fewer operators typically required travelling fast
elevator independence assumptions inherent add heuristic see section lead
constructing relaxed plans aim optimise transportation passenger individually
rather taking synergy effects account
plans produced fc f c longer average plans produced f see
table one reason predominant use slow elevators requires passengers
change elevators often plans become longer involve passengers
travelling slow elevators heuristic estimates may become worse example
relaxed plans extracted computation heuristic likely abstract away details
passengers travel elevator e g since passenger picked
delivered certain location elevator may teleport back location extra
cost relaxed plan pick deliver subsequent passengers generally found
relaxed plans initial state produced fc f c tend similar length cost
produced f final solutions produced fc f c worse f one reason
probably increased complexity passenger change overs
elevators combination worse relaxed plans poses cost sensitive
add heuristic
local minima due elevator movement costs
since action costs model distances total cost relaxed plan depends target floors
relative current position elevator fc f c action costs moving
elevator usually dominate estimates add heuristic consider two example tasks
figure differ initial state elevators elevators need travel
three floors solution plan due abstracted delete effects relaxed plan initial state
include operators travel two floors starting floor elevator
e elevator teleported back starting floor without cost left task
relaxed cost visiting three floors lower right task cost left task
sum going floor floor going floor floor resulting total cost
right task relaxed cost visiting floors cost going
floor floor floor floor resulting total cost left
task passenger boarded elevator floor immediate successor states


fithe lama planner guiding cost anytime landmarks

action cost

action cost





















figure action cost effects elevators relaxed setting travelling floors costs
travelling floors costs tasks solution cost left task lower
relaxed cost right task

worse heuristic estimate due movement costs elevator particular correct action
moving elevator floor deliver passenger state worse heuristic
value increased number waiting passengers floor system would
therefore try boarding possible subsets passengers moving elevator even
elevator moved floor heuristic estimate improve passenger
dropped elevator moved back floor b second passenger
boarded elevator moved floor
consequently movement costs may dominate progress obtained transporting passengers
number successive states words planner often blindly achieve
progress move elevators towards middle position given remaining target floors
order cost sensitive heuristic report progress cost unaware heuristic situation
less severe number elevator movements relaxed plan increase
hence planner encounters plateau search space rather local minimum use
preferred operators may help escape plateau relatively quickly whereas local minimum
much harder escape two approaches exist may circumvent firstly
use enforced hill climbing hoffmann nebel rather greedy best first search
likely avoid exploration entire local minima breadth first search
conducted first state minima plateau improving state found secondly
improved heuristic could used approximates optimal relaxed cost h exactly
cost minima shown figure brought independence assumptions inherent
add heuristic estimate relaxed cost goal fact individually cheapest
possible way optimal relaxed plan however costs left task right task
accurate approximation optimal relaxed cost h could therefore mitigate described
cost minima keyder geffner recently proposed improvement add
heuristic shown particularly useful elevators parc printer domains
keyder geffners relaxed plan extracted add heuristic improved iteratively
selecting fact f fixing operators related f contribute achieving f
rely achievement computing cheaper way achieving f given operators fixed
previous step



firichter westphal

plateaus due capacity constraints
general relaxed plans elevators domain often bad quality one reasons
way capacity elevators encoded operators passengers boarding leaving
elevators passenger p transported elevator e one preconditions p leaving e
n passengers boarded e n number greater constructing relaxed
plan add heuristic recursively selects operators achieve necessary precondition
cheapest way boarding passenger closest e initial state even
passenger p different p achieve condition passenger boarded
relaxed plan contain operators boarding p p e may furthermore
contain operators boarding p whatever elevator e deemed best transporting p
hence relaxed plans often contain many unnecessary boarding operators
mentioned section greedy best first search lama breaks ties equally
promising operators trying cheaper operator first consequently zero cost operators
passengers boarding leaving elevators tried first state found soon one
passenger boarded certain elevator relaxed plans next state often substantially
different passengers assigned elevator explained
fact soon one passenger elevator precondition leaving elevator
least one person boarded fulfilled rather incurring additional cost
example tasks examined found effect committing bad boarding
operators lama may initially try bad boarding operator e g boarding nearest passenger
elevator satisfy capacity precondition another passenger described
relaxed plan successor state assigns passengers elevator lower cost due
improved heuristic value successor state lama retains plan prefix even though
first operator bad one plausible though explore experimentally
effect stronger configurations involving cost sensitive heuristic costs
relaxed plans vary strongly one state next
importantly capacity constraints lead plateaus search space correct boarding leaving operators often recognised good operators example capacity
elevator c boarding first c passengers need transported elevator
usually leads improved heuristic values however boarding c th passenger
state better heuristic value passengers need transported via
elevator c th passenger boarding destroys precondition must
room elevator passengers board similarly correct leaving passenger may
lead improved heuristic value makes elevator empty passengers need
transported elevator later last passenger leaving destroys precondition
leaving must least one passenger boarded
effects exist cost sensitive cost unaware heuristic however
typically occur within plateaus f local minima fc f c created elevator positions
described previous section means affect cost sensitive configurations
severely plateaus become particularly large several passengers waiting
floor e g passengers accumulating floor shared two blocks order switch
elevators planner tries board possible subsets people available elevators
zero cost boarding leaving operators tried first moving elevators even
dropping passengers floors may still fail state better heuristic value


fithe lama planner guiding cost anytime landmarks

first plans
final plans

fc
f c
fc
f c

solved





original tasks
qual f qual f









capacity constraints
solved qual f qual f













table relative qualities solutions original elevators domain modified variant
domain elevators unlimited capacity shown total number tasks solved
cost sensitive configurations fc f c well number tasks configurations better worse plan cost unaware configuration f
examining number states local minima configurations found
fc f c indeed encounter many states f example percentage cases
state worse best known state typically around rare cases f
fc f c hand numbers usually often
large even
verify capacity constraints indeed contribute bad performance costsensitive heuristic domain removed constraints ipc tasks ran
resulting f fc f c configurations surprisingly tasks become much
easier solve elevators transport passengers interestingly though
bad plan qualities produced cost sensitive configurations relative cost unaware
configuration indeed become much less frequent table shows
summary findings suggest bad performance cost sensitive add heuristic
elevators domain due bad quality relaxed plans brought focus slow
elevators capacity constraints plateaus local minima search space resulting
movement costs elevators capacity constraints
parc printer
parc printer domain ruml zhou operation multi engine printer
capable processing several printing jobs time sheet must printed needs pass
several printer components starting feeder travelling transporters
printing engines possibly inverters ending finishing tray sheets
belonging print job must arrive correct order finisher tray may travel
along different paths printing engines colour printing engines ones
print black white colour printing expensive action costs operators
comparatively large ranging colour printing
expensive operator operators printing black white cost roughly half much
operators transporting sheets relatively cheap
elevators domain cost sensitive add heuristic perform well
fc f c failing solve many tasks cost unaware configuration f able
solve note fc f c perform similarly domain large action costs outweigh distance estimates f c however contrast elevators domain fc f c
configurations notably improved plan quality compared f overview number


firichter westphal

tasks solved
avg quality first solution
avg quality final solution

f




f c




fl




fl c




table coverage vs quality parc printer domain average qualities average ipc scores
calculated tasks solved configurations

solved average quality first solutions shown table landmarks differences cost sensitive cost unaware configurations strongly reduced
three landmark configurations achieving better performance f configuration
elevators found quality relaxed plans poor cost unaware case
relaxed plan transports sheets feeder finishing tray via shortest path irrespective
whether suitable printing engine lies path path feeder finishing tray
passes printing engine frequently involves printing wrong image
additional operators relaxed plan handle transportation feeder suitable
printing engine print correct image sheet well cost sensitive heuristic
used relaxed plans furthermore become substantially longer many transportation operators
reach cheap printing engine analogously elevators domain increased complexity
associated longer plans combination bad quality relaxed plans thus
likely reason bad performance cost sensitive heuristic however landmarks
mitigate numbers solved tasks table clearly landmarks found
domain encompass printing correct image sheet disjunctive
landmark denotes possible printers sheet helps counteract tendencies
cost sensitive add heuristic transport sheets wrong printers
summary parc printer elevators domain cost sensitive add heuristic
performs badly though contrast elevators purely one coverage solution quality even elevators landmarks overcome cost sensitive
configurations improving similar performance levels cost unaware configurations
cyber security
cyber security domain stands domain cost sensitive configurations perform
significantly better cost unaware counterparts especially looking first solutions
iterative search reduces gap close completely domain vulnerabilities computer networks insider attacks boddy gohde haigh harp task
consists gaining access sensitive information malware programs physically
accessing computers offices action costs model likelihood attack fail e risk
exposed example many actions office attacker computer
involve cost whereas entering offices moderately costly directly instructing
people install specific software high associated cost particular action costs used
model desire finding different methods attack setting example several
tasks domain differ costs associate certain operators
cyber security domain taking action costs account pays notably fc
f c configurations solve less respectively f configuration see table


fithe lama planner guiding cost anytime landmarks

ipc score first solutions
ipc score final solutions

f



fl



f c



fl c



table ipc scores cyber security domain

nevertheless better total score landmarks cost sensitive configurations
improved solve maintaining high quality solutions
resulting even larger performance gap flc points fl c points
one side fl points side
plans found cost unaware search often involve physically accessing computers
offices sending viruses email large cost lower costs
achieved complex plans making sophisticated use software opposed elevators
parc printer domains relaxed plans cyber security good quality
explains performance cost sensitive heuristic negatively impacted longer
plans iterative search improves performance fl f nearly levels
cost sensitive counterparts see table
openstacks
openstacks domain combinatorial optimisation minimum maximum simultaneous open stacks fink vo gerevini haslum long saetti dimopoulos
task minimise storage space needed manufacturing facility manufacturer receives number orders comprising number products one product
made time manufacturer produce total required quantity product
orders beginning production different product time first product order produced time products order produced
order said open requires stack temporary storage space consists
ordering products maximum number stacks open time minimised
easy solution product order solution requiring n
stacks worst case n number orders finding optimal solution np hard
minimisation aspect modelled tasks via action costs operator
opening stacks cost operators zero cost domain
previously used ipc gerevini et al earlier formulation domain
unit costs equivalent cost formulation described since number operators open stacks every plan given task minimising plan length
equivalent minimising action costs
noticed domain landmarks resulted plans substantially worse quality
compared landmarks particular true first plans found whereas
use anytime search improves configurations similar levels across cost
settings landmark heuristic combination add heuristic typically produces
plans majority orders started early resulting large number simultaneously open stacks whereas add heuristic leads plans products
corresponding open orders manufactured earlier starting orders delayed
earlier orders shipped mainly due fact landmarks found


firichter westphal




f c
fl c

expanded nodes















tasks







figure number expanded search nodes without landmarks first search iteration
best first search openstacks domain

lama regarding opening stacks means due choice action costs
domain landmarks cost zero landmark heuristic able distinguish
plans different cost landmarks found lama relate starting shipping orders
well making products however even landmarks regarding opening stacks
found would helpful landmarks state certain things must achieved
certain things need achieved landmarks thus used limit number
open stacks landmark orderings furthermore helpful deciding order
products product orders possiblewhich means natural orderings exist
corresponding landmarksand product order form wasted effort captured
reasonable landmark orderings
mentioned landmarks found lama minimal cost zero therefore
landmark heuristic fails estimate cost goal distinguishes states via
number missing started shipped orders products goal distance estimates used
directly fl combined zero landmark heuristic cost estimates fl c tiebreakers amongst zero cost estimates flc resulting relative ranking states
landmark heuristic three cases soon one stack open order operator
starts achieves landmark minimal respect landmark orderings namely
landmark stating must started planner thus tends start orders soon possible
landmark heuristic able take account future costs arise bad product
orderings add heuristic albeit less severe one add
heuristic accounts cost opening exactly one stack whenever least one stack
needed heuristic thus prefer states require stacks
landmark heuristic however provide good estimate goal distance since
landmark heuristic prefers states closer goal state regard costs use
size disjunctions limited lama would landmark stacks avail
stacks avail stacks avail n stating least one n stacks must open point however landmark stating two stacks need open would require complex form landmarks
involving conjunction lama cannot handle



fithe lama planner guiding cost anytime landmarks



plan quality











f c
fl c





tasks







figure plan quality measured via ipc scores without landmarks first search
iteration best first search openstacks domain






cost







plan quality







f c
fl c


time seconds





tasks












tasks




figure effect iterative search openstacks domain left plan quality ipc score
best plan found within minutes without landmarks right evolution plan costs
landmarks fl c time
plans stacks opened needed reflected empirical
additional use landmark heuristic drastically reduces number expanded search nodes
see figure leads higher cost plans see figure without iterative search lama
configuration fl c achieves points domain compared points
landmarks configuration f c
iterative search negative effect landmarks quality mitigated
seen figure fl c generates distinct time improved plans per
end difference points merely fl c vs f c score reached
less minutes iterated search per task
thus openstacks example domain landmarks detrimental solution
quality however landmarks provides benefit speeding reducing


firichter westphal

number expanded nodes allows iterative search effectively improve solution quality
given time limit final landmarks similar
landmarks
domains previous competitions
tables ipc domains previous years domains contain action costs cost sensitive configurations lama applicable
lama runs fl configuration configurations examined lama thus fl
f iterated search without fl iterated search shown lama
given two ipc winning systems previous years fast downward
fast downward ran current versions particular fast downward evolved
substantially since competition version original causal graph heuristic
replaced better context enhanced additive heuristic helmert geffner correspondence authors version fast downward used one featuring recent
work richter helmert
table shows lama performs better fast downward terms
ipc criterion true even turn landmarks iterated search lama
turn options simultaneously viewing large difference
scores iterated versus non iterated search lama note domains best known
reference used score calculation contrast tasks
reference generated manually domain specific solvers competition
organisers means planner producing best solution task awarded
highest possible score even though better solutions might exist may skew favour
planner delivers cheaper solutions e exaggerate differences planners
table shows lamas edge fast downward due higher quality solutions rather
coverage fast downward solves compared lama better coverage gap lama substantially larger gap lama
fast downward note f lama configurations roughly correspond
published base heur earlier work richter et al however subsequent changes
code support action costs negatively affect particular philosophers domain
observe significant decrease coverage one reasons difference
coverage lama closely related fast downward system
comparing experimental configurations lama note use landmarks leads moderate improvements coverage solution quality mentioned
iterative search significantly improves performance terms ipc score

conclusion outlook
article given detailed account lama system system uses
two heuristic functions multi heuristic state space search cost sensitive version
heuristic landmark heuristic guiding search towards states many subgoals
already achieved action costs employed heuristic functions guide search
cheap goals rather close goals iterative search improves solution quality time
remains


fithe lama planner guiding cost anytime landmarks

domain



f downw

lama

f

flfirst

ffirst

airport
assembly
blocks
depot
driverlog
freecell
grid
gripper
logistics
logistics
miconic
miconic full adl
miconic simple adl
movie
mprime
mystery
openstacks
optical telegraphs
pathways
philosophers
pipesworld notank
pipesworld tank
psr small
rovers
satellite
schedule
storage
tpp
trucks
zenotravel
total
psr large
psr middle













































































































































































































table performance scores rounded whole numbers fast downward lama
well experimental alternative configurations lama f without landmarks flfirst without
iterated search ffirst without landmarks without iterated search



firichter westphal

domain



f downw

lama

f

airport
assembly
blocks
depot
driverlog
freecell
grid
gripper
logistics
logistics
miconic
miconic full adl
miconic simple adl
movie
mprime
mystery
openstacks
optical telegraphs
pathways
philosophers
pipesworld notank
pipesworld tank
psr small
rovers
satellite
schedule
storage
tpp
trucks
zenotravel
total
psr large
psr middle









































































































































table coverage solved fast downward lama well experimental f configuration lama without landmarks



fithe lama planner guiding cost anytime landmarks

conducted extensive experimental study set benchmark tasks
last international competition order identify much features
planner contributes performance setting action costs discussed
overall provided plausible explanations deviating behaviour special cases
noticeable outcome experiments cost sensitive heuristics
produce desired outcome particular cost sensitive add heuristic performs significantly
worse add heuristic ignores costs due cost sensitive heuristic solving
far fewer tasks leading little improvement solution quality tasks solve
especially iterated search investigating reasons effect found
cost sensitive add heuristic reacts strongly bad relaxed plans e particular
domains relaxed plans computed heuristic low quality costsensitive heuristic likely perform worse cost unaware heuristic showed
elevators domain action costs may introduce local minima search space without
action costs search space add heuristic would plateaus moreover increased
complexity cheaper goal potentially away initial state may
lead worse performance
landmarks prove helpful context mitigate costsensitive add heuristic landmarks coverage cost sensitive search improved
nearly level cost unaware search deteriorating solution quality despite
mitigating effect landmarks however lama would still achieved slightly higher
score ipc simply ignored costs rather cost sensitive heuristics
cost unaware search found landmarks improve coverage solution quality domains
ipcs domains ipc landmarks improved solution quality
cost unaware search increase already high coverage
iterative search improves notably experimental configurations raising
score lama quarter ipc domains openstacks domain could
furthermore observe synergy effect iterative search landmarks landmarks
usually improve quality domain lead bad plans accounting action costs
however speed planner evaluates substantially fewer states iterative
search effectively improves initial bad plans benefiting speed provided
landmarks general use landmarks means quickly good solutions
iterative search way improve plan quality time overall found domains
used ipc constitute varied benchmark set reveals strengths weaknesses
system
building presented article identify several directions future work
firstly suggest cost sensitive heuristics needed would
conduct thorough analysis short comings cost sensitive add heuristic answer question whether might overcome keyder geffner
propose method extracting better relaxed plans best supports computed costsensitive add heuristic resulting improved coverage however large ledge costunaware heuristic experiments suggests cost unaware add heuristic still better improved cost sensitive heuristic keyder geffner would interesting
examine degree experienced add heuristic extend
delete relaxation heuristics whether heuristics delete relaxation could
effectively adapted action costs addition future work could explore benefit combin

firichter westphal

ing traditional distance estimators cost sensitive heuristics sophisticated ways
mechanism currently used lama see discussion section
secondly believe useful future improve definition reasonable
orderings eliminating definition hoffmann et al mentioned section
thirdly would extend use landmarks system several ways one
current take account whether landmark must achieved several
times supporting multiple occurrences landmarks would beneficial openstacks
domain example could help minimise creation stacks accounting
costs methods exist detecting multiplicity landmarks porteous cresswell
zhu givan crucial develop techniques deriving orderings
individual occurrences landmarks furthermore would extend lama support
complex landmarks conjunctions simple formulas addition representing
landmarks landmark heuristic involves development methods
detecting along corresponding orderings

acknowledgments
authors thank malte helmert charles gretton sylvie thiebaux patrik haslum well
anonymous reviewers helpful feedback earlier drafts
computing resources experiments graciously provided pompeu fabra university thank hector palacios support conducting experiments
nicta funded australian government represented department broadband communications digital economy australian council
ict centre excellence program
work partially supported deutsche forschungsgemeinschaft part transregional collaborative center sfb tr spatial cognition project r logospace

references
aine chakrabarti p p kumar r awa window constrained anytime heuristic search veloso ed proceedings th international joint
conference artificial intelligence ijcai pp
bacchus f aips competition ai magazine
backstrom c nebel b complexity sas computational intelligence
boddy gohde j haigh harp course action generation cyber security
classical biundo myers k rajan k eds proceedings
fifteenth international conference automated scheduling icaps
pp aaai press
bonet b geffner h heuristic search artificial intelligence
bryce kambhampati tutorial graph reachability heuristics
ai magazine


fithe lama planner guiding cost anytime landmarks

buffet hoffmann j glitters gold landmarks reward shaping
fpg proceedings icaps workshop scheduling
uncertainty
chen wah b w hsu c w temporal subgoal partitioning
resolution sgplan journal artificial intelligence
cheng j irani k b ordering subgoals sridharan n ed proceedings
th international joint conference artificial intelligence ijcai pp
morgan kaufmann
b kambhampati sapa scalable multi objective heuristic metric temporal
planner journal artificial intelligence
b ruml w zhou r line scheduling application controlling modular printers proceedings twenty third aaai conference artificial
intelligence aaai pp aaai press
edelkamp hoffmann j pddl language classical part th
international competition tech rep albert ludwigs universitat freiburg
institut fur informatik
fink vo applications modern heuristic search methods pattern sequencing
computers operations
fox long pddl extension pddl expressing temporal
domains journal artificial intelligence
fuentetaja r borrajo linares lopez c unified view cost heuristics
icaps workshop heuristics domain independent pp
gerevini haslum p long saetti dimopoulos deterministic
fifth international competition pddl experimental evaluation
planners artificial intelligence
gerevini serina lpg planner local search graphs
action costs ghallab hertzberg j traverso p eds proceedings sixth
international conference artificial intelligence scheduling aips pp
aaai press
gregory p cresswell long porteous j extraction disjunctive landmarks via symmetry reduction proceedings fourth international workshop symmetry constraint satisfaction pp
hansen e zhou r anytime heuristic search journal artificial intelligence

hansen e zilberstein danilchenko v anytime heuristic search first
technical report cmpsci university massachusetts amherst
helmert fast downward system journal artificial intelligence
helmert concise finite domain representations pddl tasks artificial
intelligence


firichter westphal

helmert refanidis ipc deterministic part web site http ipc
informatik uni freiburg de
helmert geffner h unifying causal graph additive heuristics rintanen
j nebel b beck j c hansen e eds proceedings eighteenth international
conference automated scheduling icaps pp aaai press
hoffmann j nebel b system fast plan generation heuristic
search journal artificial intelligence
hoffmann j porteous j sebastia l ordered landmarks journal
artificial intelligence
irani k b cheng j subgoal ordering goal augmentation heuristic
solving mcdermott j p ed proceedings th international joint conference
artificial intelligence ijcai pp morgan kaufmann
jonsson p backstrom c state variable structural restrictions complexity artificial intelligence
karpas e domshlak c cost optimal landmarks proceedings
st international joint conference artificial intelligence ijcai pp
keyder e geffner h heuristics action costs revisited proceedings
th european conference artificial intelligence ecai pp
keyder e geffner h trees shortest paths vs steiner trees understanding improving delete relaxation heuristics proceedings st international joint conference
artificial intelligence ijcai pp
keyder e richter helmert sound complete landmarks graphs
coelho h studer r wooldridge eds proceedings th european conference artificial intelligence ecai pp
koehler j hoffmann j reasonable forced goal orderings use
agenda driven journal artificial intelligence
likhachev ferguson gordon g j stentz thrun anytime search
dynamic graphs artificial intelligence
likhachev gordon g j thrun ara anytime provable bounds
sub optimality thrun saul l k scholkopf b eds advances neural
information processing systems nips
lipovetzky n geffner h inference decomposition causal consistent chains gerevini howe cesta refanidis eds proceedings
nineteenth international conference automated scheduling icaps
aaai press
liu koenig furcy speeding calculation heuristics heuristic
search proceedings eighteenth national conference artificial
intelligence aaai pp aaai press
pohl heuristic search viewed path finding graph artificial intelligence



fithe lama planner guiding cost anytime landmarks

porteous j cresswell extending landmarks analysis reason resources
repetition proceedings st workshop uk scheduling special
interest group plansig pp
porteous j sebastia l hoffmann j extraction ordering usage landmarks cesta borrajo eds pre proceedings sixth european
conference ecp pp toledo spain
richter helmert preferred operators deferred evaluation satisficing gerevini howe cesta refanidis eds proceedings nineteenth international conference automated scheduling icaps pp
aaai press
richter helmert westphal landmarks revisited proceedings
twenty third aaai conference artificial intelligence aaai pp aaai
press
richter thayer j ruml w joy forgetting faster anytime search via
restarting brafman r geffner h hoffmann j kautz h eds proceedings
twentieth international conference automated scheduling icaps
aaai press appear
roger g helmert merrier combining heuristic estimators satisficing brafman r geffner h hoffmann j kautz h eds proceedings
twentieth international conference automated scheduling icaps
pp aaai press
ruml w b best first utility guided search veloso ed proceedings
th international joint conference artificial intelligence ijcai pp

sebastia l onaindia e marzal e decomposition ai communications
vidal v lookahead strategy heuristic search zilberstein koehler j
koenig eds proceedings fourteenth international conference automated
scheduling icaps pp aaai press
zhou r hansen e beam stack search integrating backtracking beam search
biundo myers k rajan k eds proceedings fifteenth international
conference automated scheduling icaps pp aaai press
zhu l givan r landmark extraction via graph propagation icaps
doctoral consortium pp




