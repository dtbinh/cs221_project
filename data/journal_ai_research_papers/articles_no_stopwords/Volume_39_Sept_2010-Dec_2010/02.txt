Journal Artificial Intelligence Research 39 (2010) 127177

Submitted 11/09; published 09/10

LAMA Planner:
Guiding Cost-Based Anytime Planning Landmarks
Silvia Richter

silvia.richter@nicta.com.au

IIIS, Griffith University, Australia
NICTA QRL, Australia

Matthias Westphal

westpham@informatik.uni-freiburg.de

Albert-Ludwigs-Universitat Freiburg
Institut fur Informatik
Freiburg, Germany

Abstract
LAMA classical planning system based heuristic forward search. core feature
use pseudo-heuristic derived landmarks, propositional formulas must true
every solution planning task. LAMA builds Fast Downward planning system, using
finite-domain rather binary state variables multi-heuristic search. latter employed
combine landmark heuristic variant well-known heuristic. heuristics
cost-sensitive, focusing high-quality solutions case actions non-uniform cost.
weighted search used iteratively decreasing weights, planner continues
search plans better quality search terminated.
LAMA showed best performance among planners sequential satisficing track
International Planning Competition 2008. paper present system detail investigate features LAMA crucial performance. present individual results
domains used competition, demonstrating good bad cases techniques
implemented LAMA. Overall, find using landmarks improves performance, whereas
incorporation action costs heuristic estimators proves beneficial. show
domains search ignores cost solves far problems, raising question
deal action costs effectively future. iterated weighted search greatly
improves results, shows synergy effects use landmarks.

1. Introduction
last decade, heuristic search become dominant approach domain-independent satisficing planning. Starting additive heuristic Bonet Geffner (2001), implemented
HSP planning system, much research conducted search heuristic estimators
efficient calculate yet powerful guiding search towards goal state. planning system Hoffmann Nebel (2001), using heuristic estimator based relaxed planning
graphs, broke ground showing best performance among fully automated systems International Planning Competition 2000, continues state art today. Ever since,
heuristic-search approaches played prominent role classical sequential satisficing
tracks biennial competition, Fast Downward (Helmert, 2006) winning 2004 SGPlan (Chen, Wah, & Hsu, 2006) placing first 2006.
LAMA planning system youngest member line, winning sequential satisficing track International Planning Competition (IPC) 2008. LAMA classical planning
c
2010
AI Access Foundation. rights reserved.

fiRichter & Westphal

system based heuristic search. follows footsteps HSP, FF, Fast Downward
uses earlier work many respects. particular, builds Fast Downward extending
three major ways:
1. Landmarks. LAMA, Fast Downwards causal graph heuristic replaced variant
heuristic (Hoffmann & Nebel, 2001) heuristic estimates derived landmarks.
Landmarks propositional formulas become true point every plan
task hand (Porteous, Sebastia, & Hoffmann, 2001). LAMA uses landmarks
direct search towards states many landmarks already achieved. Via
preferred operators, landmarks used additional source search control
complements heuristic estimates. recent work, shown use landmarks
addition heuristic improve performance, leading problems
solved shorter solution paths (Richter, Helmert, & Westphal, 2008).
2. Action costs. landmark heuristic proposed earlier (Richter et al., 2008)
heuristic adapted use action costs. However, LAMA focus purely
cost-to-go, i. e., estimated cost reaching goal given search node.
danger cost-sensitive planner may concentrate much finding cheap plan,
expense finding plan within given time limit. LAMA weighs estimated
cost-to-go (as measure plan quality) estimated goal distance (as measure
remaining search effort) combining values two estimates.
3. Anytime search. LAMA continues search better solutions exhausted
search space interrupted. finding initial solution greedy best-first search,
conducts series weighted searches decreasing weights, restarting search
time initial state improved solution found. recent work,
shown approach efficient planning benchmarks compared anytime
methods (Richter, Thayer, & Ruml, 2010).
International Planning Competition 2008, LAMA outperformed competitors
substantial margin. result expected authors, previous work concerning
LAMAs putative core feature, landmark heuristic (Richter et al., 2008), showed some,
tremendous improvement base configuration without landmarks. paper aims
provide reference description LAMA well extensive evaluation performance
competition.
Detailed description LAMA. present distinguishing components planner
detail, describing landmarks generated used LAMA, action costs
incorporated heuristic estimators anytime search proceeds. aspects LAMA presented previous publications (Richter et al., 2008, 2010;
Helmert, 2006). However, aspects adequately covered publications, particular procedure finding landmarks, described detail.
relevant aspects described previous work, landmark heuristic, summarised
convenience reader. aim paper, together previous ones, form
comprehensive picture LAMA system.
Experimental evaluation LAMA. Building this, conduct experimental evaluation focusing aspects differentiate LAMA predecessor systems
128

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Fast Downward. repeat comparisons published earlier work, comparison
LAMAs anytime method anytime algorithms (Richter et al., 2010),
comparison LAMAs methods handling landmarks alternative landmark approaches
(Richter et al., 2008). Instead, aim elicit much performance LAMA
system whole enhanced three distinguishing features described
(landmarks, action costs anytime search). answer question, contrast several
variations planner using various subsets features.
find using cost-sensitive heuristics pay IPC 2008 benchmark tasks.
results show cost-sensitive variant heuristic used LAMA performs significantly worse traditional unit-cost version heuristic. Similarly,
cost-sensitive planners competition fared worse baseline planner ignored action costs, demonstrating cost-based planning presents considerable challenge.
conduct full analysis reasons this, showcase problems cost-sensitive
heuristic example domains provide informed hypotheses encountered effects.
Landmarks prove particularly helpful context. unit-cost case landmarks
lead moderate increase performance, case planning action costs
substantially improve coverage (the number problems solved), thus effectively mitigating
problems cost-sensitive heuristic LAMA. anytime search significantly improves
quality solutions throughout even acts synergy landmarks one domain.

2. Preliminaries
use planning formalism state variables finite (rather binary) range, similar
one employed Helmert (2009). based SAS+ planning model (Backstrom & Nebel,
1995), extends conditional effects. LAMA handles axioms way
Fast Downward (Helmert, 2006), formalise axioms here, since important
purposes.
Definition 1. Planning tasks finite-domain representation (FDR tasks)
planning task finite-domain representation (FDR task) given 5-tuple hV, s0 , s? , O, Ci
following components:
V finite set state variables, associated finite domain Dv .
fact pair hv, di (also written v 7 d), v V Dv . partial variable
assignment set facts, different variable. (We use set notation
hv, di function notation s(v) = interchangeably.) state variable
assignment defined variables V.
s0 state called initial state.
s? partial variable assignment called goal.
finite set operators. operator hpre, effi consists partial variable assignment
pre called precondition, finite set effects eff. Effects triplets hcond, v, di,
cond (possibly empty) partial variable assignment called effect condition, v
affected variable Dv called new value v.
129

fiRichter & Westphal

C : N+0 integer-valued non-negative action cost function.
operator = hpre, effi applicable state pre s, effects consistent,
i. e., state s0 s0 (v) = hcond, v, di eff cond s, s0 (v) = s(v)
otherwise. case, say operator applied resulting state s0
write s[o] s0 .
operator sequences = ho1 , . . . , i, write s[] s[o1 ] . . . [on ] (only defined operator applicable respective state). operator sequence called plan s? s0 [].
P
cost sum action costs operators, ni=1 C(oi ).
state variable v planning task finite-domain representation associated directed
graph called domain transition graph, captures ways value v may
change (Jonsson & Backstrom, 1998; Helmert, 2006). vertex set graph Dv ,
contains arc two nodes d0 exists operator change value
v d0 . Formally:
Definition 2. Domain transition graph
domain transition graph (DTG) state variable v V FDR task hV, s0 , s? , O, Ci
digraph hDv , Ai includes arc hd, d0 iff , d0 , operator hpre, effi
hcond, v, d0 eff, union conditions pre cond holds either contains v =
contain v = Dv .

3. System Architecture
LAMA builds Fast Downward system (Helmert, 2006), inheriting overall structure
large parts functionality planner. Fast Downward, LAMA accepts input
PDDL2.2 Level 1 format (Fox & Long, 2003; Edelkamp & Hoffmann, 2004), including ADL
conditions effects derived predicates (axioms). Furthermore, LAMA extended
handle action costs introduced IPC 2008 (Helmert, Do, & Refanidis, 2008). Fast
Downward, LAMA consists three separate components:
translation module
knowledge compilation module
search module
components implemented separate programs invoked sequence.
following, provide brief description translation knowledge compilation modules.
main changes LAMA, compared Fast Downward, implemented search module,
discuss detail.
3.1 Translation
translation module, short translator, transforms PDDL input planning task finitedomain representation specified Definition 1. main components translator
efficient grounding algorithm instantiating schematic operators axioms, invariant
130

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

synthesis algorithm determining groups mutually exclusive facts. fact groups consequently replaced single state variable, encoding fact (if any) group satisfied
given world state. Details component found recent article Helmert (2009).
groups mutually exclusive facts (mutexes) found translation later used
determine orderings landmarks. reason, LAMA use finite-domain
representations offered IPC 2008 (object fluents), instead performs translation
binary finite-domain variables. mutexes computed translation module
needed new encoding planning task, module extended LAMA retain
found mutexes later use landmarks.
changes made, compared translation module described Helmert,
add capability handling action costs, implement extension concerning parsing
complex operator effect formulas, limit runtime invariant synthesis algorithm.
invariant synthesis may time critical, particular large (grounded) PDDL input, limit
maximum number considered mutex candidates algorithm, abort it, necessary,
five minutes. Note finding mutexes change way translation module
works; mutexes found, resulting encoding planning task contains simply
(binary-domain) state variables PDDL input. analysing competition results,
found synthesis algorithm aborted tasks one domain (Cyber
Security).
3.2 Knowledge Compilation
Using finite-domain representation generated translator, knowledge compilation module responsible building number data structures play central role subsequent
landmark generation search. Firstly, domain transition graphs (see Definition 2) produced
encode ways state variable may change value operator applications axioms. Furthermore, data structures constructed efficiently determining set
applicable operators state evaluating values derived state variables. refer
Helmert (2006) detail knowledge compilation component, LAMA inherits
unchanged Fast Downward.
3.3 Search
search module responsible actual planning. Two algorithms heuristic search
implemented LAMA: (a) greedy best-first search, aimed finding solution quickly
possible, (b) weighted search allows balancing speed solution quality.
algorithms variations standard textbook methods, using open closed lists. greedy
best-first search always expands state minimal heuristic value h among open states
never expands state once. order encourage cost-efficient plans without incurring
much overhead, breaks ties equally promising states preferring states
reached cheaper operators, i. e., taking account last operator path considered
state search space. (The cost entire path could used expense increased
time space requirements, consider this.) Weighted search (Pohl, 1970)
associates costs states expands state minimal f 0 -value, f 0 = w h + g,
weight w integer 1, g best known cost reaching considered state
131

fiRichter & Westphal

initial state. contrast greedy search, weighted search re-expands states whenever finds
cheaper paths them.
addition, search algorithms use three types search enhancements inherited Fast
Downward (Helmert, 2006; Richter & Helmert, 2009). Firstly, multiple heuristics employed
within multi-queue approach guide search. Secondly, preferred operators similar
helpful actions allow giving precedence operators deemed helpful
others state. Thirdly, deferred heuristic evaluation mitigates impact large branching
factors assuming heuristic estimates fairly accurate. following, discuss
techniques resulting algorithms detail give pseudo code greedy best-first
search. weighted search similar, point differences two
algorithms along way.
Multi-queue heuristic search. LAMA uses two heuristic functions guide search: namegiving landmark heuristic (see Section 5), variant well-known heuristic (see Section 6). two heuristics used separate queues, thus exploiting strengths utilised
heuristics orthogonal way (Helmert, 2006; Roger & Helmert, 2010). end, separate
open lists maintained two heuristics. States always evaluated respect
heuristics, successors added open lists (in case value corresponding heuristic open list). choosing state evaluate expand next,
search algorithm alternates different queues based numerical priorities assigned
queue. priorities discussed later.
Deferred heuristic evaluation. use deferred heuristic evaluation means states
heuristically evaluated upon generation, upon expansion, i. e., states generated
greedy best-first search, put open list heuristic value,
parent. removed open list evaluated heuristically,
heuristic estimate turn used successors. use deferred evaluation
weighted search analogous, using f 0 instead h sorting criterion open lists.
many states generated expanded, deferred evaluation leads substantial reduction number heuristic estimates computed. However, deferred evaluation incurs loss
heuristic accuracy, search longer use h-values f 0 -values differentiate
successors state (all successors associated parents value open list). Preferred
operators helpful context provide alternative way determine promising
successors.
Preferred operators. Operators deemed particularly useful given state marked
preferred. computed heuristic estimators along heuristic value
state (see Sections 6 5). use preferred operators, greedy best-first search well
weighted search, planner maintains additional preferred-operator queue
heuristic. state evaluated expanded, successor states reached via
preferred operator (the preferred states) put preferred-operator queues, addition
put regular queues non-preferred states. (Analogously regular states,
state preferred least one heuristic added preferred-operator queues. allows
cross-fertilisation information exchange different heuristics.) States
preferred-operator queues evaluated earlier average, form part queues
higher chance selected point time non-preferred states. addition,
132

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

LAMA (like IPC 2004 version Fast Downward) gives even higher precedence preferred
successors via following mechanism. planner keeps priority counter queue,
initialised 0. iteration, next state removed queue highest
priority. Whenever state removed queue, priority queue decreased 1.
priorities changed outside routine, method alternate queues,
thus expanding states preferred queues regular queues equally often. increase use
preferred operators, LAMA increases priorities preferred-operator queues large
number boost value 1000 whenever progress made, i. e., whenever state discovered
better heuristic estimate previously expanded states. Subsequently, next 1000 states
removed preferred-operator queues. another improving state found within 1000
states, boosts accumulate and, accordingly, takes longer states regular queues
expanded again.
Alternative methods using preferred operators include one employed YAHSP
system (Vidal, 2004), preferred operators always used non-preferred ones. contrast, scheme necessarily empty preferred queues switching back regular
queues. planner (Hoffmann & Nebel, 2001), emphasis preferred operators even
stronger YAHPS: search restricted preferred operators either goal
found restricted search space exhausted (in case new search started without preferred operators). Compared approaches, method using preferred operators
LAMA, conjunction deferred heuristic evaluation, shown result substantial
performance improvement deliver best results classical setting operators unit costs
(Richter & Helmert, 2009). choice 1000 boost value critical here, found
various values 100 50000 give similarly good results. outside range
performance drop noticeably.
Note using action costs, use preferred operators may even helpful
classical setting. example, operators cost 0, heuristic using pure
cost estimates might assign heuristic value 0 states state space, giving
guidance search all. Preferred operators, however, still provide heuristic guidance
case case unit action costs. extreme example, similar cases
appear practice, e. g. IPC 2008 domain Openstacks, operators except one
opening new stack associated cost 0.
Pseudo code. Algorithm 1 shows pseudo code greedy best-first search. main loop
(lines 2536) runs either goal found (lines 2729) search space
exhausted (lines 3233). closed list contains seen states keeps track links
states parents, plan efficiently extracted goal state
found (line 28). iteration loop, search adds current state (initially
start state) closed list processes (lines 3031), unless state processed
before, case ignored (line 26). contrast, weighted search processes states
whenever reached via path lower cost before, updates parent links
closed list accordingly. search selects next open list used (the one
highest priority, line 34), decreases priority extracts next state processed (lines
3536). processing state includes calculating heuristic values preferred operators
heuristics (lines 34), expanding it, inserting successors appropriate open
133

fiRichter & Westphal

Global variables:
= hV, s0 , s? , O, Ci
regFF , pref , regLM , pref LM
best seen value
priority
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:

. Planning task solve
. Regular preferred open lists heuristic
. Best heuristic value seen far heuristic
. Numerical priority queue

function expand state(s)
progress False
h {FF, LM}
h(s), preferred ops(h, s) heuristic value preferred operators given h
h(s) < best seen value[h]
progress True
best seen value[h] h(s)
progress
. Boost preferred-operator queues
priority[pref ] priority[pref ] + 1000
priority[pref LM ] priority[pref LM ] + 1000
succesor states { s[o] | applicable }
s0 succesor states
h {FF, LM}
add s0 queue regh value h(s)
. Deferred evaluation
0
reached operator preferred ops(h, s)
add s0 queue pref value FF(s), queue pref LM value LM(s)
function greedy bfs lama
closed list
h {FF, LM}
. Initialize landmark heuristics
best seen value[h]
l {reg, pref }
. Regular preferred open lists heuristic
lh
priority[lh ] 0
current state s0
loop
current state < closed list
= s?
extract plan tracing current state back initial state closed list
return
closed list closed list {current state}
expand state(current state)
queues empty
return failure
. plan exists
q non-empty queue highest priority
priority[q] priority[q] 1
. Get lowest-valued state queue q
current state pop state(q)
Algorithm 1: greedy best-first-search search enhancements used LAMA.
134

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

lists (lines 1116). determined new best state found (lines 5-7), preferredoperator queues boosted 1000 (lines 8-10).
3.3.1 Restarting Anytime Search
LAMA developed International Planning Competition 2008 tailored conditions competition several ways. detail, conditions follows.
previous competitions coverage, plan quality runtime used varying degrees order
determine effectiveness classical planning system, IPC 2008 introduced new integrated
performance criterion. operator PDDL input associated non-negative integer
action cost, aim find plan lowest-possible total cost within given time limit
30 minutes per task. Given planner solves task within time limit, new
performance measure depends plan quality, runtime, thus suggests guiding
search towards cheapest goal rather closest goal well using available time
find best plan possible.
Guiding search towards cheap goals may achieved two ways, LAMA
implements: firstly, heuristics estimate cost-to-go, i. e., cost reaching goal
given state, rather distance-to-go, i. e., number operators required reach
goal. landmark heuristic heuristic employed LAMA therefore capable
using action costs. Secondly, search algorithm take cost-to-go given
state account, cost necessary reaching state. case weighted
search used LAMA. make available time, LAMA employs anytime
approach: first runs greedy best-first search, aimed finding solution quickly possible.
plan found, searches progressively better solutions running series weighted
searches decreasing weight. cost best known solution used pruning
search, decreasing weight time makes search progressively less greedy, trading
speed solution quality.
Several anytime algorithms based weighted proposed (Hansen & Zhou, 2007;
Likhachev, Ferguson, Gordon, Stentz, & Thrun, 2008). underlying idea continue
weighted search past first solution, possibly adjusting search parameters weight
pruning bound, thus progressively find better solutions. anytime approach used LAMA
differs existing algorithms continue weighted search
finds solution. Instead, start new weighted search, i. e., discard open lists
previous search re-start initial state. resulting duplicate effort,
restarts help overcome bad decisions made early (comparatively greedy) search iterations
high weight (Richter et al., 2010). explained follows: finding goal state
sg , open lists usually contain many states close sg search space,
ancestors sg expanded; furthermore, states likely low heuristic values
proximity sg . Hence, search continued (even updating open
lists lower weights), likely expand states around sg considering states
close initial state. critical, means search concentrating
improving end current plan, opposed beginning. bad beginning plan,
however, may severe negative influence quality, may impossible improve
quality plan substantially without changing early operators.
135

fiRichter & Westphal

3.8
10.6
3.4
9.8
2.6
8.2
1.8
7.6
1.0
7.0
1.0
8.0

3.8
9.6
3.4
8.8
2.6
8.2
1.8
7.6
1.0
7.0

g1

3.8
8.6



4.0
9.0

2.6
8.2
1.8
7.6
1.0
7.0
1.0
8.0

g2

(a) initial search, w = 2

2.6
8.9
2.6
8.9
2.6
8.9

2.6
7.9
1.8
6.7
1.8
7.7
1.8
8.7

3.8
8.7
3.4
8.1
2.6
6.9
1.8
6.7
1.0
6.5
1.0
7.5

3.8
7.7

X



4.0
7.0

X
X
X
X

g1

2.6 1.9 2.0
6.9 6.85 8.0
1.8 1.9 1.0
6.7 6.85 6.5
1.0 1.9 1.0
6.5 7.85 6.5
1.0 1.9
7.5 8.85

2.0
9.0
1.0
7.5

g2

(b) continued search, w = 1.5

3.8
7.7
3.4
7.1

3.8
6.7



4.0
7.0

2.0
6.0
1.0
5.5
1.0
6.5

4.0
8.0
3.0
6.5
2.0
6.0
1.0
5.5

g2

3.0
7.5
2.0
6.0
1.0
5.5
1.0
6.5

g1
(c) restarted search, w = 1.5

Figure 1: effect low-h bias. grid states generated search, h-values shown
f 0 -values. (a) Initial weighted search finds solution cost 6. (b) Continued search
expands many states around previous Open list (grey cells), finding another sub-optimal solution
cost 6. (c) Restarted search quickly finds optimal solution cost 5.

136

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Consider example search problem shown Figure 1. task reach goal state
(g1 g2) start state gridworld, agent move cost 1
8 neighbours cell blocked. heuristic values inaccurate estimates
straight-line goal distances cells. particular, heuristic values underestimate distances
left half grid. conduct weighted search weight 2 Figure 1a (assuming
simplicity standard textbook search, i. e., preferred operators deferred evaluation).
heuristic values left happen lower right s, search
expands states left finds goal g1 cost 6. grey cells generated,
expanded search phase, i. e., open list. Figure 1b, search continues
reduced weight 1.5. solution cost 5 consists turning right going g2.
However, search first expand states open list f 0 -value smaller 7.
expanding substantial number states, second solution finds path starts
left takes long way around obstacle g2, cost 6. instead restart
empty open list first solution (Figure 1c), fewer states expanded. critical
state right expanded quickly optimal path found.
Note example, particular systematic errors heuristic values
leads greedy search astray makes restarts useful. planning, especially using
deferred evaluation, heuristic values may fairly inaccurate, restarts useful.
experimental comparison tasks IPC 1998 IPC 2006 (Richter et al., 2010)
restarting approach performed notably better tested methods, dominating similar algorithms based weighted (Hansen, Zilberstein, & Danilchenko, 1997; Hansen & Zhou, 2007;
Likhachev, Gordon, & Thrun, 2004; Likhachev et al., 2008), well anytime approaches
(Zhou & Hansen, 2005; Aine, Chakrabarti, & Kumar, 2007).
3.3.2 Using cost distance estimates
heuristic estimators used LAMA cost-sensitive, aiming guide search towards
high-quality solutions. Focusing planner purely action costs, however, may dangerous,
cheap plans may longer difficult find, worst case could mean
planner fails find plan within given time limit. Zero-cost operators present particular
challenge: since zero-cost operators always added search path free, even costsensitive search algorithm weighted may explore long search paths without getting
closer goal. Methods suggested allow trade-off putative cost-to-go
estimated goal distance (Gerevini & Serina, 2002; Ruml & Do, 2007). However, require user specify relative importance cost versus distance up-front, choice
obvious context IPC 2008. LAMA gives equal weight cost distance estimates adding two values computation heuristic functions (for details,
see Sections 5 6). measure simple one, effect changes depending
magnitude variation action costs problem: smaller action costs are,
method favours short plans cheap plans. example, 5 zero-cost operators result estimated cost 5, whereas 2 operators cost 1 result estimated cost 4. LAMA would thus
prefer 2 operators cost 1 5 zero-cost operators. contrast, action costs
planning task larger length typical plans, cost estimates dominate distance estimates LAMA completely guided costs. Nevertheless simple measure proves
useful IPC 2008 benchmarks, outperforming pure cost search experiments. so137

fiRichter & Westphal


C

B

E

plane

box

truck

Figure 2: simple Logistics task: transport box location B location E.

phisticated methods automatically balancing cost distance (for example normalising
action costs given task respect mean median) topic future work.

4. Landmarks
Landmarks subgoals must achieved every plan. first introduced Porteous,
Sebastia Hoffmann (2001) later studied depth authors (Hoffmann,
Porteous, & Sebastia, 2004). Using landmarks guide search solution planning
intuitive approach humans might use. Consider well-known benchmark domain Logistics,
goal deliver objects (e. g. boxes) various locations using fleet vehicles.
Cities consist sets locations, trucks may transport boxes within city, whereas planes
used cities. example Logistics task shown Figure 2. Arguably first
mental step human would perform, trying solve task Figure 2, realise
box must transported two cities, left city (locations AD) right city
(location E), therefore, box transported plane. turn means
box airport location C, loaded plane. partitions
task two subproblems, one transporting box airport location C, one
delivering city. subproblems smaller easier solve
original task.
Landmarks capture precisely intermediate conditions used direct search:
facts L1 = box C L2 = box plane landmarks task shown Figure 2.
knowledge, well knowledge L1 must become true L2 , automatically
extracted task preprocessing step (Hoffmann et al., 2004).
LAMA uses landmarks derive goal-distance estimates heuristic search. measures
goal distance state number landmarks still need achieved path
state goal. Orderings landmarks used infer landmarks
achieved next, whether certain landmarks achieved once. addition,
preferred operators (Helmert, 2006) used suggest operators achieve landmarks
need become true next. recently shown, method using landmarks leads
substantially better performance previous use landmarks Hoffmann et al.,
terms coverage terms plan quality (Richter et al., 2008). discuss differences
approach detail Section 4.3. following section define
138

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks


plane1
E

C

B
box

plane2
F

truck2


truck1

Figure 3: Extended logistics task: transport box location B location F.
landmarks orderings formally, including useful special cases detected
efficiently.
4.1 Definitions
Hoffmann et al. (2004) define landmarks facts true point every plan
given planning task. introduce disjunctive landmarks, defined sets facts
least one needs true point. subsume landmark definitions
general definition based propositional formulas, believe useful future work
topic landmarks. noted, however, LAMA currently supports fact
landmarks disjunctions facts (for details, see Section 4.2). Hoffmann et al. show
PSPACE-hard determine whether given fact landmark, whether ordering holds
two landmarks. complexity results carry straight-forward way
general case propositional formulas, repeat proofs.
Definition 3. Landmark
Let = hV, s0 , s? , O, Ci planning task finite-domain representation, let = ho1 , . . . ,
operator sequence applicable s0 , let i, j {0, . . . , n}.
propositional formula facts called fact formula.
fact F true time iff F s0 [ho1 , . . . , oi i].
fact formula true time iff holds given truth value facts time
i. time < 0, considered true.
fact formula landmark iff plan , true time.
propositional formula facts added time iff true time
, time 1 (it considered added time 0 true s0 ).
fact formula first added time iff true time , time j < i.
Note facts initial state facts goal always landmarks definition.
landmarks discussed earlier example task Figure 2 facts. However,
complex landmarks may required larger tasks. Consider extended version
139

fiRichter & Westphal

example, city right two airports, multiple planes trucks,
depicted Figure 3. previous landmark L1 = box C still landmark
extended example. However, L2 = box plane corresponding fact landmark
task, since neither box plane1 box plane2 landmark. disjunction box
plane1 box plane2 , however, landmark. following refer landmarks
facts fact landmarks, disjunctions facts disjunctive landmarks.
use disjunctive landmarks shown improve performance, compared using fact
landmarks (Richter et al., 2008), complex landmarks introduce additional difficulty
regard detection handling planning. mentioned before, LAMA currently
uses fact landmarks disjunctive landmarks, rather general propositional formulas.
extension complex types landmarks interesting topic future work. (See Keyder,
Richter Helmert, 2010, discussion conjunctive landmarks).
Various kinds orderings landmarks defined exploited planning
phase. define three types orderings landmarks, equivalent formulations
definitions Hoffmann et al. (2004) adapted FDR setting:
Definition 4. Orderings landmarks
Let landmarks FDR planning task .
say natural ordering , written , plan
true time i, true time j < i.
say necessary ordering , written n , plan
added time i, true time 1.
say greedy-necessary ordering , written gn ,
plan first added time i, true time 1.
Natural orderings general; every necessary greedy-necessary ordering natural,
vice versa. Similarly, every necessary ordering greedy-necessary, vice versa.
Knowing natural ordering necessary greedy-necessary allows deducing additional
information plausible temporal relationships landmarks, described later
section. Also, landmark heuristic LAMA uses knowledge deduce whether landmark
needs achieved once. theoretical concept, necessary orderings ( always true
step ) straightforward appealing greedy-necessary orderings (
true step becomes true first time). However, methods find landmarks
conjunction orderings often find many landmarks using general
concept greedy-necessary orderings (Hoffmann et al., 2004). LAMA follows paradigm
finds greedy-necessary (as well natural) orderings, necessary orderings. example
Figure 3, box truck1 must true box C box F. first
orderings greedy-necessary, necessary, second neither greedy-necessary
necessary, natural.
Hoffmann et al. (2004) propose kinds orderings landmarks usefully exploited. example, reasonable orderings, first introduced context
top-level goals (Koehler & Hoffmann, 2000), orderings necessarily hold given
planning task. However, adhering orderings may save effort solving task.
example task, reasonable load box onto truck1 driving truck airport
140

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

C. However, order guaranteed hold every plan, possible, though reasonable, drive truck C first, drive B collect box, return C. idea
landmark must become false order achieve landmark , needed ,
reasonable achieve (as otherwise, would achieve twice).
idea may applied iteratively, sometimes able find new, induced reasonable orderings
restrict focus plans obey first set reasonable orderings. Hoffmann et al. call
reasonable orderings found second pass obedient-reasonable orderings. authors
note conducting two iterations process worthwhile, typically
result notable additional benefit. following definition characterises two types
orderings formally.
Definition 5. Reasonable orderings landmarks
Let landmarks FDR planning task .
say reasonable ordering , written r , every plan
added time first added time j < j, holds true
time {i + 1, . . . , j} true time k j k.
say plan obeys set orderings O, orderings x O, regardless
type, holds first added time true time j i.
say obedient-reasonable ordering regard set
orderings O, written
r , every plan obeying added time
first added time j < j, holds true time {i + 1, . . . , j}
true time k j k.
definitions equivalent Hoffmann et al. (2004), except care
plans rather arbitrary operator sequences, allowing us (theoretically) identify
reasonable orderings. practice, use approximation techniques Hoffmann et al.,
thus generating orderings.
problem reasonable obedient-reasonable orderings may cyclic, i. e.,
chains orderings r x . . . r landmarks may exist (Hoffmann et al., 2004).
case natural orderings, definition implies cannot cyclic
solvable tasks.
addition, definitions given problematic special cases. Note definition reasonable ordering r includes case exist < j
added time first added time j, i. e., case holds plans first
added (a) (b) time .1 (a) implies reasonable orderings
generalisation natural orderings, might regarded desirable property, (b) may lead
undesirable orderings. example, holds r r pairs ,
first added time plans, instance true initial state.
Similarly, holds r . use definitions despite weaknesses here,
simply note planner create contentious orderings. LAMA
create reflexive orderings r ; r , true initial state created
assumed proven must true strictly point plan (see Section
1. According personal communication authors, case overlooked Hoffmann et al.

141

fiRichter & Westphal

truck1
truck1 B

box B

box truck1
truck1 C
plane1 C plane2 C

box C

box plane1 box plane2
box F
Figure 4: Partial landmark graph example task shown Figure 3. Bold arcs represent natural
orderings, dashed arcs represent reasonable orderings.

4.2.5). re-definition reasonable orderings, addressing problems definition Hoffmann et al. identifying precisely wanted/unwanted cases, topic future work. Closely
connected question whether reasonable orderings interpreted strict orderings,
achieved (as definition obedience above), whether allow
achieving simultaneously. use strict sense obedience reasons consistency
previous work Hoffmann et al., aligns better intended meaning
reasonable orderings, even though strict interpretation obedience fit contentious
cases discussed above.
Landmarks orderings may represented using directed graph called landmark graph.
partial landmark graph extended example depicted Figure 4. following section
4.2 contains extensive description landmarks orderings discovered LAMA.
Readers interested exact details process may skip description, central
rest paper. Section 4.3 discusses approach finding using landmarks
relates previous work. Section 5 describes landmarks used heuristic estimator
LAMA.
4.2 Extracting Landmarks Orderings
mentioned before, deciding whether given formula landmark deciding orderings landmarks PSPACE-hard problems. Thus, practical methods finding landmarks
incomplete (they may fail find given landmark ordering) unsound (they may falsely declare formula landmark, determine false ordering). Several polynomial methods
proposed finding fact landmarks disjunctive landmarks, back-chaining
goals task, using criteria based relaxed planning graph (Porteous et al., 2001; Hoffmann et al., 2004; Porteous & Cresswell, 2002), forward propagation planning graph
(Zhu & Givan, 2003).
142

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

algorithm used LAMA finding landmarks orderings partly based
previous back-chaining methods mentioned above, adapting finite-domain representation including conditional effects. addition, algorithm exploits finite-domain representation using domain transition graphs find landmarks. discuss differences
method previous ones detail Section 4.3. idea back-chaining
start set known landmarks find new fact landmarks disjunctive landmarks
must true plan already known landmark may become true. procedure starts
set goal facts, stops new landmarks found. method
identifies new landmarks orderings considering, given fact landmark disjunctive
landmark true initial state:
shared preconditions possible first achievers. operator preconditions
effect conditions shared effects potentially first achieve . method
adapted previous work (see Section 4.3).
fact landmarks v 7 d, domain transition graph (DTG) v. Here, identify nodes
DTG (i. e., values d0 v) must necessarily traversed order reach d.
restricted relaxed planning graph lacking operators could possibly achieve . (There
subtleties involving conditional effects explained later.) Every landmark
occur last level graph achieved .
previous work (Porteous et al., 2001; Hoffmann et al., 2004), subsequently use discovered landmarks orderings derive reasonable obedient-reasonable orderings postprocessing step. following, give detailed description step procedure
finding landmarks orderings LAMA. High-level pseudo code algorithm, containing
steps described following sections 4.2.14.2.4, shown Algorithm 2.
4.2.1 Back-Chaining: Landmarks via Shared Preconditions Possible First Achievers
First achievers fact landmark disjunctive landmark operators potentially
make true applied end partial plan never made true before.
call fact precondition first achievers shared precondition. least
one first achievers must applied make true, must true achieved,
thus landmark, ordering gn . effect condition operator
treated precondition context, interested finding conditions
must hold become true. following use term extended preconditions
operator denote union preconditions effect conditions .
extended preconditions shared achievers fact calculated line 19 Algorithm 2.
addition, create disjunctive landmarks selecting, precondition facts first
achievers, sets facts set contains one extended precondition fact first
achiever (line 22). one first achievers must applied make true, one facts
must true , disjunction thus landmark, ordering gn . Since
number disjunctive landmarks exponential number achievers , restrict
disjunctions facts stem predicate symbol, deemed
helpful (Hoffmann et al., 2004). Furthermore, discard fact sets size greater
four, though found restriction little impact compared predicate restriction.
143

fiRichter & Westphal

Global variables:
= hV, s0 , s? , O, Ci
LG = hL, Oi
queue
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:

. Planning task solve
. Landmark graph
. Landmarks back-chained

function add landmark ordering(, x )
fact L : . |=
. Prefer fact landmarks
L L \ {}
. Remove disjunctive landmark
\ { ( x ), ( x ) | L }
. Remove obsolete orderings
L : . var() var() , . Abort overlap existing landmark
return
< L
. Add new landmark graph
L L {}
queue queue {}
{ x }
. Add new ordering graph
function identify landmarks
LG hs? ,
. Landmark graph starts goals, orderings
queue s?
orderings
. Additional orderings (see Section 4.2.3)
queue ,
pop(queue)
s0 6|=
RRPG restricted relaxed plan graph
preshared shared extended preconditions extracted RRPG
preshared
add landmark ordering(, gn )
predisj sets facts covering shared extended preconditions given RRPG
predisj
s0 6|=
add landmark ordering(, gn )
fact
prelookahead extract landmarks DTG variable using RRPG
prelookahead
add landmark ordering(, )
potential orderings potential orderings { F | F never true RRPG }
add orderings landmarks potential orderings

Algorithm 2: Identifying landmarks orderings via back-chaining, domain transition graphs
restricted relaxed planning graphs.

144

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

p1



B

t1

E

t2

C

p2



F

Figure 5: Domain transition graph location box extended example (Figure 3).

Since PSPACE-hard determine set first achievers landmark (Hoffmann et al.,
2004), use over-approximation containing every operator possibly first achiever
(Porteous & Cresswell, 2002). intersecting extended preconditions (possibly)
operators lose correctness, though may miss landmarks. approximation first achievers done help restricted relaxed planning graph.
construction graph leave operators would add unconditionally,
ignore conditional effects could potentially add . relaxed planning graph
levels out, last set facts over-approximation facts achieved
planning task. operator applicable given over-approximating set achieves
possible first achiever .
4.2.2 Landmarks via Domain Transition Graphs
Given fact landmark L = {v 7 l}, use domain transition graph v find fact
landmarks v 7 l0 (line 27) follows. DTG contains node occurs every path
initial state value s0 (v) variable landmark value l, node corresponds
landmark value l0 v: know every plan achieving L requires v takes value l0 ,
hence fact L0 = {v 7 l0 } introduced new landmark ordered naturally L.
find kinds landmarks, iteratively remove one node DTG test simple
graph algorithm whether s0 (v) l still connected not, removed node corresponds
landmark. improve procedure removing, preprocessing step, nodes
know cannot true achieving L. nodes correspond
facts L appear restricted RPG never adds L. Removing nodes
may decrease number paths reaching L may thus allow us find landmarks.
Consider landmark graph extended example, shown Figure 4.
landmarks orderings found via back-chaining procedure described previous
section, landmarks direct preconditions achieving successors graph.
two exceptions: box truck1 box C. two landmarks however found
DTG method. DTG Figure 5 immediately shows box location must take
value t1 value C path initial value B goal value F.
145

fiRichter & Westphal

4.2.3 Additional Orderings Restricted Relaxed Planning Graphs
restricted relaxed planning graph (RRPG) described Section 4.2.1, given landmark leaves operators could possibly achieve , used extract additional
orderings landmarks. landmark appear graph cannot reached
, thus introduce natural ordering . efficiency reasons, construct
RRPG (line 18), i. e., needed find possible first achievers
back-chaining procedure. extract orderings facts
reached (line 30). facts F later recognised landmarks,
introduce ordering F (line 31).
4.2.4 Overlapping Landmarks
Due iterative nature algorithm possible find disjunctive landmarks
least one facts already known fact landmark. cases, let fact
landmarks take precedence disjunctive ones, i. e., disjunctive landmark discovered
includes already known fact landmark, add disjunctive landmark. Conversely,
soon fact landmark found part already known disjunctive landmark, discard
disjunctive landmark including orderings2 , add fact landmark instead. keep
procedure resulting landmark graph simple, furthermore allow landmarks
overlap. Whenever fact newly discovered disjunctive landmark part
already known landmark, add newly discovered landmark. cases handled
function add landmark ordering (lines 1 10).
4.2.5 Generating Reasonable Obedient-Reasonable Orderings
want introduce reasonable ordering L r L0 two (distinct) fact landmarks L
L0 holds (a) L0 must true time first achieving L, (b) achieving
L0 L would require making L0 false achieve L. approximate (a) (b)
proposed Hoffmann et al. (2004) sufficient conditions. case (a), test L0 s?
chain natural greedy-necessary orderings landmarks L = L1 . . . Ln ,
n > 1, Ln1 , L0 greedy-necessary ordering L0 gn Ln . (b) check whether (i) L
L0 inconsistent, i. e., mutually exclusive, (ii) operators achieving L effect
inconsistent L0 , (iii) landmark L00 inconsistent L0 ordering
L00 gn L.
Inconsistencies facts easily identified finite-domain representation
facts form v 7 v 7 d0 , i. e., map variable different values.
addition, LAMA uses groups inconsistent facts computed translator component.
second pass, obedient-reasonable orderings added. done method
above, except reasonable orderings used addition natural greedy-necessary
orderings derive fact landmark L0 must true landmark L. Finally, use
simple greedy algorithm break possible cycles due reasonable obedient-reasonable orderings landmark graph, every time cycle identified, one involved reasonable
2. Note ordering {F, G} neither implies F G general. Conversely, {F, G} neither
implies F G.

146

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

obedient-reasonable orderings removed. algorithm removes obedient-reasonable orderings
rather reasonable orderings whenever possible.
4.3 Related Work
Orderings landmarks generalisation goal orderings, frequently
exploited planning search past. particular, approach Irani Cheng (Irani &
Cheng, 1987; Cheng & Irani, 1989) preprocessing procedure analyses planning
task extract necessary orderings goals, imposed search algorithm.
goal ordered goal B approach plan necessarily true B.
Koehler Hoffmann (2000) introduce reasonable orderings goals.
Hoffmann et al. (2004), article detailing earlier work Porteous et al. (2001), introduce
idea landmarks, generalise necessary reasonable orderings goals landmarks,
propose methods finding using landmarks planning. proposed method finding
landmarks, subsequently extended Porteous Cresswell (2002), closely
related ours. Hoffmann et al. propose method finding fact landmarks proceeds three
stages. First, potential landmarks orderings suggested fast candidate generation procedure. Second, filtering procedure evaluates sufficient condition landmarks candidate
fact, removing fail test. Third, reasonable obedient-reasonable orderings landmarks approximated. step largely identical approach ours,
except use different methods recognise inconsistencies facts.
generation landmark candidates done via back-chaining goal much
approach, intersecting preconditions operators first achieve fact F
appear F relaxed planning graph. Note even operators share
common precondition L, might first achievers F (appearing F relaxed
planning graph) L precondition, hence L landmark. test whether
landmark candidate L found via back-chaining indeed landmark, Hoffmann et al. (2004)
build restricted relaxed planning task leaving operators could add L. task
unsolvable, L landmark. sufficient, necessary condition: L necessary
solving relaxed task necessary solving original task, converse
true. verification procedure guarantees method Hoffmann et al. generates true
landmarks; however, unsound orderings may established due unsound landmark candidates.
unsound landmarks pruned failing verification test, unsound orderings may
remain.
Porteous Cresswell (2002) propose alternative approximation first achievers
fact F use. consider first achievers possibly applicable F
thus guarantee correctness found landmarks orderings. find disjunctive
landmarks. method landmark detection differs adding detection landmarks
via domain transition graphs, detection additional orderings via restricted relaxed planning
graphs. Porteous Cresswell additionally reason multiple occurrences landmarks (if
landmark achieved, made false re-achieved several times plans),
not.
approach Hoffmann et al. (2004) exploits landmarks decomposing planning task
smaller subtasks, making landmarks intermediary goals. Instead searching goal
task, iteratively aims achieve landmark minimal respect orderings.
147

fiRichter & Westphal

detail, first builds landmark graph (with landmarks vertices orderings arcs). Possible
cycles broken removing arcs. sources resulting directed acyclic graph
handed base planner disjunctive goal, plan generated achieve one
landmarks . landmark, along incident arcs, removed landmark
graph, process repeats end state generated plan. landmark graph
becomes empty, base planner asked generate plan original goal. (Note even
though goal facts landmarks thus achieved previously, may violated
again.)
base planner solving subtasks planner used; Hoffmann et al. (2004)
experimented FF. found decomposition subtasks lead directed search, solving larger instances plain many domains. However, found
method leads worse average performance IPC benchmarks 1998 2006
using Fast Downward base planner (Richter et al., 2008). Furthermore, method Hoffmann et al. often produces solutions longer produced base planner,
disjunctive search control frequently switches different parts task may
destructive interactions. Sometimes even leads dead ends, approach fails
solvable tasks. contrast, approach incorporates landmark information searching
original goal planning task via heuristic function derived landmarks (see next
section). recently shown, avoids possibility dead-ends usually generates
better-quality solutions (Richter et al., 2008).
Sebastia et al. (2006) extend work Hoffmann et al. employing refined preprocessing technique groups landmarks consistent sets, minimising destructive interactions
sets. Taking sets intermediary goals, avoid increased plan length
experienced Hoffmann et al. (2004). However, according authors preprocessing
computationally expensive may take longer solving original problem.
Zhu Givan (2003) propose technique finding landmarks propagating necessary
predecessor information planning graph. definition landmarks encompasses operators
necessary plan (called action landmarks), furthermore introduce notion
causal landmark fact landmarks required precondition operators
every plan. argue fact landmarks causal accidental effects
warrant sought explicitly. algorithm computes action landmarks causal
fact landmarks time propagating information construction relaxed
planning graph. extended variant algorithm able infer multiple occurrences
landmarks. Gregory et al. (2004) build work find disjunctive landmarks
symmetry breaking.
Similar work, Zhu Givan (2003) use causal fact landmarks action landmarks
estimate goal distance given state. end, treat fact landmark virtual
action (sets operators achieve fact landmark) obtain distance estimate bin
packing. items packed bins real landmark actions (singletons) virtual
actions, bin may contain elements pairwise intersection elements
non-empty. Zhu Givan employ greedy algorithm estimate minimum number bins
use value distance estimate. experimental results preliminary, however,
demonstrate significant advantage method planner.
148

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

5. Landmark Heuristic
LAMA planning system uses landmarks calculate heuristic estimates. Since know
landmarks must achieved order reach goal, approximate goal distance
state reached path (i. e., sequence states) estimated number landmarks
still need achieved onwards. landmarks given

L(s, ) B L \ Accepted(s, ) ReqAgain(s, )
L set discovered landmarks, Accepted(s, ) set accepted landmarks,
ReqAgain(s, ) set accepted landmarks required again, following
definitions based given landmarks graph (L, O) :




L | |= @( x )
= hi





0
0
Accepted(s, ) B
= 0 ; hoi
Accepted(s0 [ ], ) L | |=





( x ) : Accepted(s0 [0 ], 0 )

ReqAgain(s, ) B Accepted(s, ) | 6|=

s? |= ( gn ) : < Accepted(s, )
landmark first accepted state true state, landmarks ordered
accepted predecessor state generated. landmark
accepted, remains accepted successor states. initial state, accepted landmarks
true initial state predecessors landmark graph.
accepted landmark required true (a) forms part goal
(b) must true directly landmark (i. e., gn ) accepted s.
latter case, since know must still achieved must true time step
, holds must achieved again. number |L(s, )| heuristic value
assigned state s. Pseudo code heuristic given Algorithm 3.
landmark heuristic assign non-zero value state goal state, since
goals landmarks always counted required per condition (a) above. However,
heuristic may assign non-zero value goal state. happens plans found
obey reasonable orderings landmark graph, case goal state may
reached without landmarks accepted.3 Hence, need explicitly test states goal
condition order identify goal states search.
Note heuristic path-dependent, i. e., depends sequence states
reached initial state. raises question happens state reached
via several paths. LAMA, heuristic state calculated once, first reached.
alternative option would re-evaluate time new path discovered, taking
account information paths known time. Karpas Domshlak (2009) note,
calculate landmarks accepted given set paths P Accepted(s, P) B

P Accepted(s, ), since holds landmark achieved along paths P must
3. special case r become true simultaneously, could avoid accepting
(Buffet & Hoffmann, 2010), could modify definition reasonable orderings
r hold unless must become true strictly . general problem goal states may
assigned non-zero value, however, still persists even modifications.

149

fiRichter & Westphal

Global variables:
= hV, s0 , s? , O, Ci
LG = hL, Oi
Accepted

. Planning task solve
. Landmark graph
. Landmarks accepted states evaluated far

function lm count heuristic(s, )
= hi
. Initial state


Accepted(s, ) L | s0 |= @( x )
else
0 ho1 , . . . , on1 = ho1 , . . . ,
parent s0 [0 ]
. Accepted(parent, 0 ) calculated
Reached { L | |= ( x ) : Accepted(parent, 0 ) }
Accepted(s, ) Accepted(parent, 0 ) Reached
NotAccepted L \ Accepted(s, )
ReqGoal { n Accepted(s, ) | 6|= s? |= }

ReqPrecon Accepted(s, ) | 6|= : ( gn ) < Accepted(s, )
return |NotAccepted ReqGoal ReqPrecon|
Algorithm 3: landmark count heuristic.

achieved onwards. heuristic value derived analogous
way before.
landmark heuristic outlined estimates goal distance states, i. e., number
operator applications needed reach goal state given state. participate IPC 2008,
made function cost-sensitive weighting landmarks estimate minimum
cost. Apart estimating goal distance counting number landmarks still need
achieved state, estimate cost-to-go state sum minimum costs
landmarks. cost counted landmark minimum action cost
first achievers. (Alternative, sophisticated methods computing costs landmarks
conceivable potential topic future work.) heuristic value LAMA assigns
state however pure cost-to-go estimate, rather sum cost estimate
distance estimate. thus accounting costs-to-go goal distances states,
measure aims balance speed search quality plans, particular counter-act
problems may arise zero-cost operators (see Section 3.3).
generate preferred operators along landmark heuristic. operator preferred
state applying achieves acceptable landmark next step, i. e., landmark whose predecessors already accepted. acceptable landmark achieved within one step,
preferred operators occur relaxed plan nearest acceptable landmark.
nearest landmark cost-unaware setting one relaxed reachable minimal number
operators, cost-sensitive setting landmark reachable cheapest hadd cost
(see Section 6), cost distance estimates taken account. nearest
landmark computed building relaxed planning graph or, equivalently, performing relaxed exploration (which LAMA does, see Section 6), determining earliest least
costly occurrence acceptable landmark structure. relaxed plan landmark
150

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

extracted, operators plan form preferred operators applicable
current state.

6. Cost-Sensitive FF/add Heuristic
first introduced landmark heuristic (Richter et al., 2008), proved competitive own, compared established heuristics heuristic (Hoffmann & Nebel,
2001). However, joint use heuristic landmark heuristic multi-heuristic
search improved performance planning system, compared using heuristic.
thus path LAMA follows. heuristic based relaxation planning task
ignores delete effects, FDR tasks translates allowing state variables hold several
values simultaneously.
heuristic state computed two phases: first phase, forward phase,
calculates estimate fact planning task costly achieve fact
relaxed task. Concurrently, selects operator called best support fact F,
greedy approximation cheapest achiever (an achiever F costs making
applicable applying minimal among achievers F, starting s). second
phase, plan relaxed task constructed based best supports fact. done
chaining backwards goals, selecting best supports goals, recursively
selecting best supports preconditions already selected operators. union
best supports constitutes relaxed plan (i. e., fact best support added
relaxed plan once, even fact needed several times precondition). length
resulting relaxed plan heuristic estimate reported s.
forward phase viewed propagating cost information operators facts
relaxed planning graph (Hoffmann & Nebel, 2001). However, graph need
explicitly constructed compute heuristic. Instead, form generalised Dijkstra cheapestpath algorithm described Liu, Koenig Furcy (2002) used LAMA, propagates
costs preconditions applicable operators operators effects. method,
operator fact represented once, reducing time space requirements O(NK),
N size relaxed planning task K depth relaxed planning graph,
O(N). order deal conditional effects, operators n effects split n operators
one effect each, corresponding effect conditions moved preconditions
operators. n operators selected inclusion relaxed plan, original
operator included instead (again, operator included relaxed plan once).
cost estimate operator original heuristic depth relaxed planning
graph, case planning unit-cost operators equivalent (Fuentetaja, Borrajo, &
Linares Lopez, 2009) propagating costs via hmax criterion (Bonet & Geffner, 2001). hmax
criterion estimates cost operator maximum costs preconditions, plus
action cost operator (1 planning without action costs). cost fact
estimated cost cheapest achiever, zero fact true current state s.
originally proposed unit-cost planning, heuristic adapted cost-based planning
straightforward way using action costs cost propagation phase, reporting total cost
resulting relaxed plan, rather length, heuristic estimate.
Using criteria cost propagation results variations heuristic (Bryce & Kambhampati, 2007; Fuentetaja et al., 2009). One variant previously proposed litera151

fiRichter & Westphal

ture (Do & Kambhampati, 2003) use hadd criterion (Bonet & Geffner, 2001). similar
hmax criterion except estimating cost operators via sum, rather maximum,
costs preconditions. following use term FF/add variant
heuristic. Independently us, Keyder Geffner (2008) implemented FF/add heuristic
call ha planner FF(ha ) IPC 2008. formal specification FF/add heuristic
found paper. heuristic function LAMA similar cost-sensitive FF/add
heuristic. However, landmark heuristic, LAMA purely guided action costs,
rather uses cost distance estimates equally. means cost propagation,
operator contributes action cost plus 1 distance, rather action cost,
propagated cost estimates.

7. Experiments
evaluate much central features LAMA contributes performance,
conducted number experiments comparing different configurations features.
focus detailed evaluation benchmark tasks International Planning Competition
(IPC) 2008, interested setting planning action costs. effect landmarks
classical planning tasks without actions costs studied previous work (Richter et al.,
2008), provide summarising results case, using domains IPCs 19982006,
Section 7.6. benchmark set IPC 2008 comprises 9 domains 30 tasks each, resulting
total 270 tasks. one domains (Openstacks), two different formulations available
(STRIPS ADL). competition, report better result two formulations
planner.
described Section 1, LAMA builds platform provided Fast Downward three
major ways: (1) use landmarks, (2) using cost-sensitive heuristics guide search
cheap plans, (3) employing anytime search continue search better solutions
time remains. examine usefulness landmarks, conduct experiments without
them, keeping planner features fixed. use action costs LAMA result
number design decisions. landmark heuristic FF/add heuristic made
cost-sensitive. However, rather focusing purely action costs, LAMA uses distance
estimates cost estimates combination (see Section 3.3) balance speed quality
search. measure benefit combining approach, test three different approaches
dealing costs: (a) using traditional cost-unaware heuristics (distance estimates), (b) using
purely cost-sensitive heuristics (though using distance estimates tie-breaking), (c) using
combination distance cost estimates, LAMA. different choices regarding
landmarks approaches action costs thus result following six planner configurations:
F: Use cost-unaware FF/add heuristic (estimating goal distance).
Fc : Use purely cost-sensitive FF/add heuristic (estimating cost-to-go).
F+c : Use FF/add heuristic combines action costs distances.
FL: Use cost-unaware variants FF/add heuristic landmark heuristic.
FLc : Use purely cost-sensitive variants heuristics.
FL+c : Use variants combine action costs distances heuristics.
152

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Note contrast setting optimal planning (Karpas & Domshlak, 2009), landmark
heuristic competitive case, landmarks LAMA used provide
additional information already guided search. such, include configurations using landmarks heuristic estimators detailed results. However, provide
summarising results supporting claim competitive.
configuration run iterated (anytime) search. highlighting contribution
iterated search, report first solutions vs. final solutions, final solution
configuration last, best, solution finds within 30-minute timeout. (Note
quality solution always determined cost, irrespective whether heuristic used
calculate cost-sensitive not.) discussing three possible approaches costs (costunaware search, purely cost-sensitive search, LAMAs combination distances costs)
write X, Xc , X+c denote three cost approaches independently heuristics used.
measure performance using criterion employed IPC 2008 (Helmert
et al., 2008). planner configuration run 30 minutes per task. timeout, planner
aggregates ratio c /c total score c cost plan found, c cost
best known solution (e. g., reference solution calculated competition organisers,
best solution found participating planners).
Experiments run hardware used competition, cluster machines Intel
Xeon CPUs 2.66GHz clock speed. time memory limits set values
competition, using timeout 30 minutes memory limit 2 GB. following,
first provide general overview results. discuss special cases, i. e., domains
results certain configurations deviate overall trend, try give plausible
explanations may happen.
7.1 Overview Results
section, show purely cost-based FF/add configuration Fc solves significantly
fewer tasks cost-unaware counterpart F. Fc finds higher-quality solutions,
make low coverage (number solved tasks) measuring performance
IPC criterion. Using landmarks improves quality slightly, cost-unaware search using landmarks (FL) achieves highest IPC performance score amongst configurations. using
cost-sensitive FF/add heuristic, adding landmarks (resulting configurations FLc FL+c )
increases coverage substantially, incurring small loss quality. Iterated search improves scores configurations significantly. Lastly, using combination cost
distance estimates heuristics (X+c ) superior pure cost-based search using iterated search. Together, using landmarks combination cost distance estimates (FL+c )
achieves nearly performance FL configuration.
following, support findings experimental data. Section 7.1.1 (Performance Terms IPC Score), show cost-sensitive FF/add heuristic scores
lowly terms IPC criterion, landmarks combination cost distance estimates together make bad performance. Furthermore, results demonstrate magnitude impact iterated search performance scores. Section 7.1.2 (Coverage),
show bad performance cost-sensitive FF/add heuristic due solving fewer
tasks, use landmarks mitigates problem. Section 7.1.3 (Quality), present
data showing purely cost-sensitive FF/add heuristic finds higher-quality plans cost153

fiRichter & Westphal

Domain

Base

C3

Cyber Security
Elevators
Openstacks
PARC Printer
Peg Solitaire
Scanalyzer
Sokoban
Transport
Woodworking
Total
(Total IPC 2008)

4
21
21
27
20
24
21
18
14
169
(176)

9
16
10
18
20
23
18
6
24
143
(151)

Domain

F

Cyber Security
Elevators
Openstacks
PARC Printer
Peg Solitaire
Scanalyzer
Sokoban
Transport
Woodworking
Total

20
22
20
20
20
19
18
18
22
180

IPC Planners
FF(ha ) FF(has )
20
9
8
16
21
24
15
15
22
150
(157)

20
10
8
23
23
24
18
14
22
162
(169)

First solutions
FL FLc
Fc
F+c

FL+c

24
9
23
16
23
21
20
15
20
171

27
16
14
21
21
21
19
23
20
182

24
9
20
16
20
20
19
15
20
162

20
23
13
23
20
22
18
24
20
182

28
14
13
21
22
21
19
24
20
183

LAMA
28
20
27
21
29
26
24
27
25
227
(236)

Slowed LAMA
10
100

FL+c

27
20
27
19
29
25
22
25
24
218
()

28
22
27
22
29
26
23
26
24
227
()

26
17
26
12
26
22
15
21
17
183
()

Final solutions (iterated search)
F
Fc
F+c
FL FLc FL+c
23
29
27
23
29
24
24
19
23
220

24
10
29
16
29
24
24
17
21
194

25
15
28
16
29
25
24
17
22
201

26
27
27
24
29
29
22
24
20
229

28
16
28
22
29
24
23
26
23
217

28
22
27
22
29
26
23
26
24
227

Table 1: Performance scores (rounded whole numbers) planners scoring 100 points
IPC 2008 (top) 6 experimental configurations (bottom). Scores IPC planners recalculated (see text). LAMA 10 100 refer results achieved LAMA slowed
factors 10 100, respectively. FL+c essentially IPC planner LAMA.

unaware FF/add heuristic first search, iterated search, difference
disappears. Furthermore, iterated search intermediate approach using cost distance
estimates scores higher purely cost-based search. LAMAs approach using landmarks
combination cost distance estimates (FL+c ) thus effectively mitigates bad performance cost-sensitive FF/add heuristic.
7.1.1 Performance Terms IPC Score
scores planners scoring 100 points IPC 2008 shown top part
Table 1. Apart LAMA, includes base planner run competition organisers (FF
preprocessing step compiles away action costs), FF(ha ) FF(has ) planners Keyder
154

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Geffner (2008) C3 planner Lipovetzky Geffner (2009). plans found
planners obtained competition website (Helmert et al., 2008). However,
scores plans depend best known solutions tasks. scores show
thus differ ones published IPC 2008, re-calculated reflect new
best solutions found experiments. illustrate magnitude change, original total
scores IPC planners shown parentheses last table row.
configuration FL+c results essentially planner (the IPC version of)
LAMA, report results again, minor corrections implemented LAMA
since competition. addition, planner makes arbitrary decisions points
execution due underlying programming library methods, leading varying results. However,
Table 1 shows differences FL+c LAMA small. furthermore
added columns table showing hypothetical results LAMA would obtained
search slowed constant factors 10 100, respectively (i. e., results obtained
cutting search 3 minutes, 18 seconds, respectively). numbers show
LAMA still outperforms IPC planners even severe handicap, demonstrating
good performance LAMA mainly due efficient implementation.
bottom part Table 1 contains results six experimental configurations
first search iteration (left) 30-minute timeout (right). seen, use
landmarks iterated search lead significant improvements performance. Even one
two features planner performs notably better competitors IPC 2008.
(Note however baseline planner performed badly Cyber Security due problems
reading large task descriptions.) combination, benefits landmarks iterated
search grow further: cost-unaware search use landmarks results 2 additional score points
first solutions, 9 additional points final solutions. Similar results hold
cost-sensitive configurations. mainly due Openstacks domain, using landmarks
highly detrimental solution quality first solutions. Iterated search mitigates problem
improving quality similar levels without landmarks. Overall, thus slight
synergy effect landmarks iterated search, making joint benefit two features
larger sum individual contributions. effect landmarks Openstacks
domain discussed detail later.
use cost-sensitive search pay experiments. Cost-unaware search
always least roughly equal, often substantially better cost-sensitive configurations.
Cost-sensitive planning seems problem LAMA, participating planners IPC 2008: notably, cost-sensitive competitors LAMA fare worse
cost-ignoring baseline. LAMA, best performance achieved using cost-unaware search
landmarks iterated search. However, using combination cost distance estimates instead (FL+c ) leads performance almost equally good. particular, FL+c substantially
better pure cost search FLc iterated search used.
detailed view data provided Figure 6, show performance
time six experimental configurations. data point 100 seconds, example, shows
score corresponding planner would achieved timeout 100 seconds.
top panel shows, cost-sensitive search consistently worse cost-unaware search using
FF/add heuristic. Using landmarks (see centre panel), two settings FL FL+c achieve
better performance F, though FL+c needs 2 minutes surpass F, FL within 5
seconds. Pure cost search, even landmarks (FLc ), performs worse F times.
155

fiRichter & Westphal

240
220

Score

200
180
160
F
Fc
F+c

140
120
1

10

100
Time (seconds)

1000

240
220

Score

200
180
160
F
FL
FLc
FL+c

140
120
1

10

100
Time (seconds)

1000

240
220

Score

200
180
160
F
FL
FLc
FL+c

140
120
1

10

100
Time (seconds)

1000

Figure 6: Score time using iterated search (top centre panel) without iterated search,
i. e., showing first solutions (bottom panel).

156

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Domain

Base

C3

FF(ha )

FF(has )

LAMA

FL+c

Cyber Security
Elevators
Openstacks
PARC Printer
Peg Solitaire
Scanalyzer
Sokoban
Transport
Woodworking
Total

4
30
30
30
30
30
27
29
17
227

15
30
30
18
30
27
22
12
28
212

23
23
25
16
29
28
17
23
29
213

22
26
26
23
29
28
20
22
29
225

30
24
30
22
30
30
25
30
30
251

30
25
30
23
30
30
24
30
30
252

Domain

F

Fc

F+c

FL

FLc

FL+c

Cyber Security
Elevators
Openstacks
PARC Printer
Peg Solitaire
Scanalyzer
Sokoban
Transport
Woodworking
Total

30
30
30
25
30
28
25
26
30
254

28
15
30
16
30
30
25
22
28
224

29
16
30
16
30
29
24
21
28
223

30
30
30
24
30
30
23
29
28
254

30
22
30
23
30
30
24
30
30
249

30
25
30
23
30
30
24
30
30
252

Table 2: Coverage planners scoring 100 points IPC 2008 (top) 6 experimental
configurations (bottom). Results IPC planners taken competition. FL+c
essentially IPC planner LAMA.

bottom panel Figure 6 shows using iterated search, performance 4 best
configurations FL, F, FL+c , FLc fairly similar eventually, cost-sensitive approaches
need time cost-unaware configurations reach performance levels.
7.1.2 Coverage
bad performance cost-sensitive search surprising, given performance criterion
awards higher scores cheaper plans. One explanation could mainly due different coverage. finding plans high quality substantially harder finding plans low
quality, focusing nearest goals rather cheapest goals may solve tasks within
given time limit. Table 2 show coverage considered planners configurations.
numbers confirm using landmarks, coverage cost-unaware search indeed
substantially higher coverage cost-sensitive search. However, landmarks, differences coverage various cost approaches small. particular, landmarks
improve coverage cost-unaware search, bring cost-sensitive configurations
157

fiRichter & Westphal

Domain
Cyber Security
Elevators
Openstacks
PARC Printer
Peg Solitaire
Scanalyzer
Sokoban
Transport
Woodworking
Total

Domain
Cyber Security
Elevators
Openstacks
PARC Printer
Peg Solitaire
Scanalyzer
Sokoban
Transport
Woodworking
Total

Fc / F
Tasks C. Ratio
28
15
30
16
30
28
23
21
28
219

0.64
1.16
0.83
0.79
0.87
0.94
0.94
1.01
1.02
0.88

Fc / F
Tasks C. Ratio
28
15
30
16
30
28
23
21
28
219

0.81
1.51
0.95
0.97
0.99
1.01
1.01
0.98
0.99
0.99

F+c / F
Tasks C. Ratio
29
16
30
16
30
28
22
21
28
220

0.69
1.15
1.00
0.79
1.02
0.93
0.98
1.00
1.02
0.94

F+c / F
Tasks C. Ratio
29
16
30
16
30
28
22
21
28
220

0.82
1.05
0.96
0.97
1.00
0.93
1.00
0.89
0.94
0.94

FLc / Fc
Tasks C. Ratio
28
14
30
15
30
30
24
22
28
221

0.81
0.89
1.98
1.05
1.04
0.98
0.98
0.89
1.07
1.06

FLc / Fc
Tasks C. Ratio
28
14
30
15
30
30
24
22
28
221

0.81
0.89
1.04
1.01
1.02
1.02
1.02
0.89
1.00
0.97

FL+c / F+c
Tasks C. Ratio
29
16
30
15
30
29
23
21
28
221

0.83
0.92
1.46
1.05
0.95
1.00
1.00
0.89
1.06
1.01

FL+c / F+c
Tasks C. Ratio
29
16
30
15
30
29
23
21
28
221

0.82
0.99
1.04
1.01
1.01
1.01
1.00
0.89
1.01
0.97

Table 3: Average ratio first solution costs (top) best solution costs iterative search
(bottom) various pairs configurations commonly solved tasks.
coverage level cost-unaware search. Landmarks thus seem helpful
overcoming coverage problems cost-sensitive search.
mentioned before, landmark heuristic however competitive. Using
landmark heuristic FF/add heuristic results IPC 2008 performance scores
164 167 iterated search, coverage points 185 189 three possible
cost settings. substantially worse performance scores greater 194 coverage
points greater 223 achieved LAMA configurations.
7.1.3 Quality
next step, look purely solution quality. Firstly, want answer question whether
improvement coverage achieved landmarks cost-sensitive search comes price
solution quality, i. e., whether using landmarks directs search close goals rather cheap
goals. Secondly, would know solution quality differs cost-sensitive
cost-unaware configurations. particular, much quality lose combining
158

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

distance cost estimates (X+c ) opposed using pure cost search (Xc )? score used IPC
2008 Table 1 incorporates coverage quality information counting unsolved tasks
0 method allows ranking several planners solving different subsets total benchmark
set. interested examining quality independent coverage, must restrict focus tasks solved compared planners. Table 3 contains quality information comparing
solution costs several configurations, compare configurations pair-wise order
maximise number commonly solved tasks. top part Table 3 contains comparisons
involving first solutions found configuration, bottom part table concerns
best solutions found iterative search. pair configurations show number
tasks solved both, geometric mean cost ratio plans find.
expected, cost-sensitive configurations Fc F+c find cheaper plans costunaware configuration F average, particular pure cost search Fc finds high-quality
first plans (see first column top part table). Fc F+c , however, difference F large. domains, notably Elevators, plans found
cost-sensitive heuristics actually worse plans found cost-unaware search.
Landmarks deteriorate quality first plans Fc ; F+c , starts worse
quality Fc , noticeably deteriorated landmarks. configurations, however, main negative impact landmarks Openstacks domain, plans become
nearly twice expensive Fc , 50% expensive F+c . contrast, remaining
8 domains average plan quality configurations landmarks even slightly better
average without landmarks.
note iterative search remarkable impact relative performance different configurations. looking solutions found iterative search, Fc actually performs
worse F+c , whereas way round first solutions (compare first two
columns top row versus bottom row table). explained extent
fact reasons cause Fc low coverage prevent improving much time. show selected domains later, cost-sensitive heuristic often
expands many nodes cost-unaware search, leading observed behaviour.
likely due fact finding plans high quality hard thus unsuccessful many
benchmark tasks. example, domains cost-sensitive search leads large local
minima exist cost-unaware search. generally, good plans often longer
bad plans, may lead increased complexity particular domains heuristic
values inaccurate. showcase problems cost-sensitive search detail
Elevators PARC Printer domains later on.
iterative search, landmarks deteriorate quality either Fc F+c average,
negative impact Openstacks domain longer present. (This effect Openstacks
domain discussed detail later.)
Summarising findings, say landmarks effectively support cost-sensitive
FF/add heuristic finding solutions, without steering search away good solutions. Similarly, combining distance cost estimates X+c leads search finding solutions quickly
without overly sacrificing quality, demonstrated superior anytime performance compared
pure cost search.
way example, present detailed results four nine competition domains.
choose domains deem particular interest results either exaggerate contradict general trends discussed far. domains Elevators PARC Printer
159

fiRichter & Westphal

8
7
6
5
4
3
2
1
0
Figure 7: example elevators task.

highlight problems cost-sensitive search; Cyber Security cost-sensitive search performs
uncharacteristically well; Openstacks domain landmarks lead usual
improvement, rather deterioration performance.
7.2 Elevators
Elevators domain models transportation passengers building via fast slow elevators, elevator certain passenger capacity access certain floors. Passengers
may change elevators get final destination, furthermore two different types
elevators different associated cost functions. contrast Miconic domain, used
earlier international planning competition (Bacchus, 2001), models transporting passengers via elevators, one elevator access floors
one (unit-cost) operator. Elevators, floors building grouped blocks, overlapping one floor. Slow elevators operate within block access floors within
block. Fast elevators access blocks, certain floors within block (in
first 10 IPC tasks every second floor, 20 tasks every fourth floor). Fast elevators
usually expensive slow elevators except distance two floors, elevator
types cost same. However, fast elevators may sometimes advantageous transporting
passengers blocks (as avoid need passengers switch elevators shared
floor blocks), usually higher capacity.
example task eight floors, grouped two blocks, shown Figure 7.
total four elevators, two slow ones two fast ones. cost function used 30 IPC tasks
moving elevator current location target floor 6 + n slow elevators 2 + 3n
fast elevators, n distance travelled (the number floors current location
elevator target). Operators concerning passengers boarding leaving elevators
free cost. Assuming cost function, cheaper example transport passenger
located floor 0 using two slow elevators (changing floor 4) using direct fast elevator.
Elevators one domains configurations using cost-sensitive FF/add heuristic
solve far fewer problems cost-unaware counterparts. Using landmarks increases coverage,
solve problem completely. Furthermore, notable problems
cost-sensitive configurations solve, solutions often worse quality solutions
cost-unaware configurations. Table 4 illustrates fact first solutions found using
160

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Task
01
02
03
04
05
06
07
08
09
11
12
13
14
20
21
Avg.

Quality (IPC Score)
F
Fc
F+c
0.57 0.59
0.53
0.69 0.72
0.72
0.88 0.58
0.51
0.71 0.70
0.72
0.68 0.54
0.54
0.60 0.60
0.61
0.38 0.46
0.40
0.84 0.54
0.51
0.71 0.54
0.57
0.66 0.52
0.52
0.70 0.54
0.58
0.58 0.51
0.54
0.70 0.70
0.70
0.67 0.47
0.58
0.70 0.63
0.71
0.67 0.58
0.58

F
26
27
21
34
33
56
71
47
54
39
55
60
81
132
84
55

Length
Fc
24
25
41
45
50
64
81
62
81
51
79
84
101
173
83
67

F+c
27
25
42
47
50
53
83
65
59
47
79
72
95
154
82
65

Table 4: Comparison plan qualities (measured via IPC scores) plan lengths first
solutions F, Fc , F+c Elevators. Shown tasks solved three configurations,
bold print indicating best solution.

FF/add heuristic. iterative search (not shown), solution quality F+c improves
similar level F, whereas Fc remains substantially worse.
full explanation configurations involving cost-sensitive
FF/add heuristic perform badly domain, several factors seem play role. Firstly,
attempt optimise costs, cost-sensitive FF/add heuristic focuses relatively complex solutions
involving mainly slow elevators many transfers passengers elevators,
relaxed plans less accurate (i. e., translate less well actual plans), case
cost-unaware heuristic. Secondly, costs associated movements elevators dominate
heuristic values, causing local minima cost-sensitive heuristic. Thirdly, capacity
constraints associated elevators may lead plateaus bad-quality plans particular
cost-sensitive heuristic. following sections, describe factors detail.
Lastly, found deferred heuristic evaluation technique used LAMA (see Section 3.3) perform well domain. using deferred evaluation, Fc configuration solves 3 additional tasks (though quality solutions remains worse F
configuration). partly explains FF(ha ) planner Keyder Geffner (2008)
substantially higher coverage Fc configuration domain. two planners use
heuristic, differ several aspects. Apart deferred evaluation aspects include search algorithm used (greedy best-first search vs. enhanced hill-climbing) method
using preferred operators (maintaining additional queues preferred states vs. pruning nonpreferred successor states).
161

fiRichter & Westphal

F
Fc
F+c

Slow moves
275
405
404

Fast moves
45
21
12

Ratio fast/slow
6.11
19.29
33.67

Table 5: Total elevator moves ratio fast/slow moves first solutions found F, Fc ,
F+c configurations, 15 Elevators instances solved three configurations.
7.2.1 Slow vs. Fast Elevators
examining results, found Fc F+c configurations tend produce plans
slow elevators used passengers, F configuration uses
fast elevators often (cf. Table 5). surprising, individual passenger,
travelling starting point destination tends cheaper slow elevator (unless
distance short), whereas fewer operators typically required travelling fast
elevator. independence assumptions inherent FF/add heuristic (see Section 6) lead
constructing relaxed plans aim optimise transportation passenger individually,
rather taking synergy effects account.
plans produced Fc F+c longer, average, plans produced F (see
Table 4), one reason predominant use slow elevators requires passengers
change elevators often. plans become longer involve passengers
travelling slow elevators, heuristic estimates may become worse. example,
relaxed plans extracted computation heuristic likely abstract away details
passengers travel elevator (e. g., since passenger picked
delivered certain location, elevator may teleport back location extra
cost relaxed plan pick deliver subsequent passengers). Generally, found
relaxed plans initial state produced Fc F+c tend similar length cost
produced F, final solutions produced Fc F+c worse F. One reason
probably increased complexity planning passenger change-overs
elevators combination worse relaxed plans poses problem cost-sensitive
FF/add heuristic.
7.2.2 Local Minima Due Elevator-Movement Costs
Since action costs model distances, total cost relaxed plan depends target floors
relative current position elevator. Fc F+c , action costs moving
elevator usually dominate estimates FF/add heuristic. Consider two example tasks
Figure 8, differ initial state elevators. elevators need travel
three floors solution plan, due abstracted delete effects relaxed plan initial state
include operators travel two floors starting floor elevator
(i. e., elevator teleported back starting floor without cost). left task,
relaxed cost visiting three floors lower right task, cost left task
sum going floor 4 floor 8, going floor 4 floor 0, resulting total cost
10 + 10 = 20. right task, relaxed cost visiting floors cost going
floor 0 floor 4, floor 0 floor 8, resulting total cost 10 + 14 = 24. left
task, passenger boarded elevator floor 4, immediate successor states
162

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

action cost

action cost

8
7
6
5
4
3
2
1
0

8
7
6
5
4
3
2
1
0

Figure 8: Action cost effects Elevators relaxed setting. Travelling 4 floors costs 10,
travelling 8 floors costs 14. tasks solution cost (34), left task lower
relaxed cost (20) right task (24).

worse heuristic estimate due movement costs elevator. particular, correct action
moving elevator floor 8 (to deliver passenger) results state worse heuristic
value. increased number waiting passengers floor 4, planning system would
therefore try boarding possible subsets passengers moving elevator. even
elevator moved floor 8, heuristic estimate improve passenger
dropped either (a) elevator moved back floor 4, (b) second passenger
boarded elevator moved floor 0.
Consequently, movement costs may dominate progress obtained transporting passengers
number successive states. words, planner often blindly achieve
progress move elevators towards middle position given remaining target floors,
order cost-sensitive heuristic report progress. cost-unaware heuristic, situation
less severe, number elevator movements relaxed plan increase,
hence planner encounters plateau search space rather local minimum. use
preferred operators may help escape plateau relatively quickly, whereas local minimum
much harder escape from. Two approaches exist may circumvent problem. Firstly,
use enforced hill-climbing (Hoffmann & Nebel, 2001) rather greedy best-first search
likely avoid exploration entire local minima: approach, breadth-first search
conducted first state minima/plateau improving state found. Secondly,
improved heuristic could used approximates optimal relaxed cost h+ exactly.
cost minima shown Figure 8 brought independence assumptions inherent
FF/add heuristic, estimate relaxed cost goal fact individually cheapest
possible way. optimal relaxed plan, however, costs left task right task.
accurate approximation optimal relaxed cost h+ could therefore mitigate described
cost minima. Keyder Geffner (2009) recently proposed improvement FF/add
heuristic4 shown particularly useful Elevators PARC Printer domains.
4. Keyder & Geffners approach, relaxed plan extracted FF/add heuristic improved iteratively (1)
selecting fact F, (2) fixing operators related F (because contribute achieving F
rely achievement), (3) computing cheaper way achieving F given operators fixed
previous step.

163

fiRichter & Westphal

7.2.3 Plateaus Due Capacity Constraints
general, relaxed plans Elevators domain often bad quality. One reasons
way capacity elevators encoded operators passengers boarding leaving
elevators. passenger p transported elevator e, one preconditions p leaving e
n passengers boarded e, n number greater 0. constructing relaxed
plan, FF/add heuristic recursively selects operators achieve necessary precondition
cheapest way. results boarding passenger closest e initial state, even
passenger p0 different p, achieve condition passenger boarded.
relaxed plan contain operators boarding p p0 e, may furthermore
contain operators boarding p0 whatever elevator e0 deemed best transporting p0 .
Hence, relaxed plans often contain many unnecessary boarding operators.
mentioned Section 3.3, greedy best-first search LAMA breaks ties equally
promising operators trying cheaper operator first. Consequently, zero-cost operators
passengers boarding leaving elevators tried first state. found soon one
passenger boarded certain elevator, relaxed plans next state often substantially
different, passengers assigned elevator. explained
fact soon one passenger elevator, precondition leaving elevator
least one person boarded, fulfilled (rather incurring additional cost).
example tasks examined, found effect results committing bad boarding
operators: LAMA may initially try bad boarding operator, e. g. boarding nearest passenger
elevator satisfy capacity precondition another passenger, described above.
relaxed plan successor state assigns passengers elevator, lower cost. Due
improved heuristic value successor state, LAMA retains plan prefix, even though
first operator bad one. plausible (though explore experimentally)
effect stronger configurations involving cost-sensitive heuristic, costs
relaxed plans vary strongly one state next.
importantly, capacity constraints lead plateaus search space, correct boarding leaving operators often recognised good operators. example, capacity
elevator c, boarding first c 1 passengers need transported elevator
usually leads improved heuristic values. However, boarding c-th passenger result
state better heuristic value passengers need transported via
elevator, c-th passenger boarding destroys precondition must
room elevator passengers board. Similarly, correct leaving passenger may
lead improved heuristic value makes elevator empty passengers need
transported elevator later (because last passenger leaving destroys precondition
leaving must least one passenger boarded).
effects exist cost-sensitive cost-unaware heuristic. However,
typically occur within plateaus (F) local minima (Fc , F+c ) created elevator positions,
described previous section, means affect cost-sensitive configurations
severely. plateaus become particularly large several passengers waiting
floor, e. g. passengers accumulating floor shared two blocks order switch
elevators. planner tries board possible subsets people available elevators (as
zero-cost boarding leaving operators always tried first), moving elevators even
dropping passengers floors, may still fail find state better heuristic value.
164

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

First plans
Final plans

Fc
F+c
Fc
F+c

Solved
15
16
15
16

Original tasks
qual. > F qual. < F
3
10
5
10
0
15
5
6

capacity constraints
Solved qual. > F qual. < F
29
17
6
30
22
3
29
9
20
30
15
11

Table 6: Relative qualities solutions original Elevators domain modified variant
domain elevators unlimited capacity. Shown total number tasks solved
cost-sensitive configurations Fc F+c , well number tasks configurations find better/worse plan cost-unaware configuration F.
examining number states local minima configurations, found
Fc F+c indeed encounter many states F. example, percentage cases
state worse best known state typically around 10% (in rare cases 25%) F.
Fc F+c , hand, numbers usually 35%, often 50%,
large problems even 80%.
verify capacity constraints indeed contribute bad performance costsensitive heuristic domain, removed constraints IPC tasks ran
resulting problems F, Fc F+c configurations. surprisingly, tasks become much
easier solve, elevators transport passengers once. interestingly though,
bad plan qualities produced cost-sensitive configurations (relative cost-unaware
configuration) indeed become much less frequent, Table 6 shows.
summary, findings suggest bad performance cost-sensitive FF/add heuristic
Elevators domain due bad-quality relaxed plans (brought focus slow
elevators capacity constraints) plateaus local minima search space (resulting
movement costs elevators capacity constraints).
7.3 PARC Printer
PARC Printer domain (Do, Ruml, & Zhou, 2008) models operation multi-engine printer
capable processing several printing jobs time. sheet must printed needs pass
several printer components starting feeder travelling transporters,
printing engines possibly inverters ending finishing tray. various sheets
belonging print job must arrive correct order finisher tray, may travel
along different paths using various printing engines. colour printing engines ones
print black white, colour printing expensive. action costs operators
comparatively large, ranging 2000 200,000. Colour-printing
expensive operator, operators printing black white cost roughly half much,
operators transporting sheets relatively cheap.
Elevators domain, cost-sensitive FF/add heuristic perform well here,
Fc F+c failing solve many tasks cost-unaware configuration F able
solve. (Note Fc F+c perform similarly domain, large action costs outweigh distance estimates F+c .) However, contrast Elevators domain, Fc F+c
configurations result notably improved plan quality compared F. overview number
165

fiRichter & Westphal

Tasks solved 30
Avg. quality first solution
Avg. quality final solution

F
25
0.79
0.96

F+c
16
1.00
1.00

FL
24
0.93
1.00

FL+c
23
0.95
0.99

Table 7: Coverage vs. quality PARC Printer domain. Average qualities average IPC scores
calculated tasks solved configurations.

problems solved average quality first solutions shown Table 7. using landmarks, differences cost-sensitive cost-unaware configurations strongly reduced,
three landmark configurations achieving better performance F configuration.
Elevators, found quality relaxed plans poor. cost-unaware case,
relaxed plan transports sheets feeder finishing tray via shortest path, irrespective
whether suitable printing engine lies path. path feeder finishing tray
passes printing engine, frequently involves printing wrong image paper,
additional operators relaxed plan handle transportation feeder suitable
printing engine print correct image sheet well. cost-sensitive heuristic
used, relaxed plans furthermore become substantially longer, using many transportation operators
reach cheap printing engine. Analogously Elevators domain, increased complexity
associated longer plans (in combination bad quality relaxed plans) thus
likely reason bad performance cost-sensitive heuristic. However, landmarks
mitigate problem, numbers solved tasks Table 7 clearly show. Landmarks found
domain encompass printing correct image sheet, disjunctive
landmark denotes possible printers sheet. helps counteract tendencies
cost-sensitive FF/add heuristic transport sheets wrong printers.
summary, PARC Printer Elevators domain cost-sensitive FF/add heuristic
performs badly, though contrast Elevators problem purely one coverage, solution quality. Even Elevators, landmarks overcome problems cost-sensitive
configurations, improving similar performance levels cost-unaware configurations.
7.4 Cyber Security
Cyber Security domain stands domain cost-sensitive configurations perform
significantly better cost-unaware counterparts, especially looking first solutions.
(Iterative search reduces gap, close completely.) domain models vulnerabilities computer networks insider attacks (Boddy, Gohde, Haigh, & Harp, 2005). task
consists gaining access sensitive information using various malware programs physically
accessing computers offices. Action costs model likelihood attack fail, i. e., risk
exposed. example, many actions office attacker, using computer,
involve cost, whereas entering offices moderately costly, directly instructing
people install specific software high associated cost. particular, action costs used
model desire finding different methods attack setting. example, several
tasks domain differ costs associate certain operators.
Cyber Security domain, taking action costs account pays notably: Fc
F+c configurations solve 2 1 problems less, respectively, F configuration (see Table 2),
166

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

IPC score first solutions
IPC score final solutions

F
20.44
23.12

FL
20.43
25.93

F+c
23.67
24.69

FL+c
26.60
27.53

Table 8: IPC scores Cyber security domain.

nevertheless result better total score. Using landmarks, cost-sensitive configurations
improved solve problems maintaining high quality solutions,
resulting even larger performance gap FLc (27.59 points) FL+c (26.60 points)
one side, FL (20.43 points) side.
plans found cost-unaware search often involve physically accessing computers
offices sending viruses email, result large cost. Lower costs
achieved complex plans making sophisticated use software. opposed Elevators
PARC Printer domains, relaxed plans Cyber Security good quality.
explains performance cost-sensitive heuristic negatively impacted longer
plans. Using iterative search improves performance FL F nearly levels
cost-sensitive counterparts (see Table 8).
7.5 Openstacks
Openstacks domain models combinatorial optimisation problem minimum maximum simultaneous open stacks (Fink & Vo, 1999; Gerevini, Haslum, Long, Saetti, & Dimopoulos, 2009),
task minimise storage space needed manufacturing facility. manufacturer receives number orders, comprising number products. one product
made time, manufacturer always produce total required quantity product
(over orders) beginning production different product. time first product order produced time products order produced,
order said open requires stack (a temporary storage space). problem consists
ordering products maximum number stacks open time minimised.
easy find solution problem (any product order solution, requiring n
stacks worst case n number orders), finding optimal solution NP-hard.
minimisation aspect modelled planning tasks via action costs, operator
opening new stacks cost 1, operators zero cost. domain
previously used IPC 2006 (Gerevini et al., 2009). earlier formulation domain
unit costs, equivalent cost formulation described above. Since number operators open stacks every plan given task, minimising plan length
equivalent minimising action costs.
noticed domain using landmarks resulted plans substantially worse quality,
compared using landmarks. particular, true first plans found, whereas
use anytime search improves results configurations similar levels. Across cost
settings, using landmark heuristic combination FF/add heuristic typically produces
plans majority orders started early, resulting large number simultaneously open stacks, whereas using FF/add heuristic leads plans products
corresponding open orders manufactured earlier, starting new orders delayed
earlier orders shipped. mainly due fact landmarks found
167

fiRichter & Westphal

5000
4500

F+c
FL+c

Expanded Nodes

4000
3500
3000
2500
2000
1500
1000
500
0
5

10

15
Tasks

20

25

30

Figure 9: Number expanded search nodes without landmarks first search iteration
(best-first search) Openstacks domain.

LAMA regarding opening stacks, means due choice action costs
domain, landmarks cost zero landmark heuristic able distinguish
plans different cost. landmarks found LAMA relate starting shipping orders
well making products.5 However, even landmarks regarding opening stacks
found, would helpful: landmarks state certain things must achieved,
certain things need achieved. Landmarks thus used limit number
open stacks. landmark orderings furthermore helpful deciding order
products, product orders possiblewhich means natural orderings exist
corresponding landmarksand product order results form wasted effort captured
reasonable landmark orderings.
mentioned above, landmarks found LAMA minimal cost zero. Therefore,
landmark heuristic fails estimate cost goal, distinguishes states via
number missing started shipped orders products. (These goal distance estimates used
directly FL, combined all-zero landmark heuristic cost estimates FL+c , tiebreakers amongst zero-cost estimates FLc , resulting relative ranking states
landmark heuristic three cases.) soon one stack open, order operator
starts achieves landmark minimal respect landmark orderings (namely
landmark stating must started), planner thus tends start orders soon possible.
landmark heuristic able take account future costs arise bad product
orderings. problem FF/add heuristic, albeit less severe one: FF/add
heuristic accounts cost opening (exactly) one new stack whenever least one stack
needed, heuristic thus prefer states require stacks.
landmark heuristic does, however, provide good estimate goal distance. Since
landmark heuristic prefers states closer goal state regard costs, use results
5. size disjunctions limited LAMA, would always find landmark stacks avail(1)
stacks avail(2) stacks avail(n) stating least one n stacks must open point. However, landmark stating two stacks need open would require complex form landmarks
involving conjunction, LAMA cannot handle.

168

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

1

Plan Quality

0.8

0.6

0.4

0.2

0

F+c
FL+c
5

10

15
Tasks

20

25

30

Figure 10: Plan quality (measured via IPC scores) without landmarks first search
iteration (best-first search) Openstacks domain.

1
50
45
40
35
Cost 30
25
20
15
10
5
0 10

Plan Quality

0.8
0.6
0.4
0.2
0

F+c
FL+c

100
Time (seconds)
5

10

15
Tasks

20

25

1000

5

30
25
20
15 Tasks
10

30

Figure 11: Effect iterative search Openstacks domain. Left: plan quality (IPC score)
best plan found within 30 minutes without landmarks. Right: evolution plan costs
landmarks (FL+c ) time.
plans stacks opened needed. reflected empirical results,
additional use landmark heuristic drastically reduces number expanded search nodes
(see Figure 9), leads higher-cost plans (see Figure 10). Without iterative search, LAMA
configuration FL+c achieves 13.85 points domain, compared 19.77 points
using landmarks (configuration F+c ).
Using iterative search, negative effect landmarks quality mitigated,
seen Figure 11. FL+c generates 21 distinct, time improved, plans per problem.
end, difference points merely 27.40 FL+c vs. 28.30 F+c . score reached
less 5 minutes iterated search per task.
Thus, Openstacks example domain landmarks detrimental solution
quality. However, using landmarks provides benefit speeding planning reducing
169

fiRichter & Westphal

number expanded nodes. allows iterative search effectively improve solution quality
given time limit final results using landmarks similar using
landmarks.
7.6 Domains Previous Competitions
Tables 9 10 show results IPC domains previous years (19982006). domains contain action costs, cost-sensitive configurations LAMA applicable
LAMA runs FL configuration. configurations examined LAMA thus FL
F, iterated search without, FL iterated search shown LAMA.
given results two IPC-winning systems previous years, Fast Downward.
Fast Downward, ran current versions. particular Fast Downward evolved
substantially since 2004 competition version, original causal graph heuristic
replaced better context-enhanced additive heuristic (Helmert & Geffner, 2008). correspondence authors, version Fast Downward used one featuring recent
work Richter Helmert (2009).
Table 9 shows, LAMA performs better Fast Downward terms
IPC 2008 criterion. true even turn landmarks iterated search LAMA,
turn options simultaneously. viewing large difference
scores iterated versus non-iterated search LAMA, note domains best known
reference results used score calculation (in contrast 2008 tasks,
reference results generated manually domain-specific solvers competition
organisers). means planner producing best solution task awarded
highest-possible score 1, even though better solutions might exist. may skew results favour
planner delivers cheaper solutions, i. e., exaggerate differences planners.
Table 10 shows LAMAs edge Fast Downward due higher-quality solutions rather
coverage, Fast Downward solves problems. Compared FF, LAMA better coverage, gap LAMA substantially larger gap LAMA
Fast Downward. Note F LAMA configurations roughly correspond results
published base heur earlier work (Richter et al., 2008). However, subsequent changes
code support action costs negatively affect particular Philosophers domain,
observe significant decrease coverage. one reasons difference
coverage LAMA closely related Fast Downward system.
Comparing various experimental configurations LAMA, note use landmarks leads moderate improvements coverage solution quality. mentioned above,
iterative search significantly improves performance terms IPC 2008 score.

8. Conclusion Outlook
article, given detailed account LAMA planning system. system uses
two heuristic functions multi-heuristic state-space search: cost-sensitive version
heuristic, landmark heuristic guiding search towards states many subgoals
already achieved. Action costs employed heuristic functions guide search
cheap goals rather close goals, iterative search improves solution quality time
remains.
170

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Domain



F. Downw.

LAMA

F

FLfirst

Ffirst

Airport (50)
Assembly (30)
Blocks (35)
Depot (22)
Driverlog (20)
Freecell (80)
Grid (5)
Gripper (20)
Logistics 1998 (35)
Logistics 2000 (28)
Miconic (150)
Miconic Full ADL (150)
Miconic Simple ADL (150)
Movie (30)
MPrime (35)
Mystery (30)
Openstacks (30)
Optical Telegraphs (48)
Pathways (30)
Philosophers (48)
Pipesworld Notank. (50)
Pipesworld Tank. (50)
PSR Small (50)
Rovers (40)
Satellite (36)
Schedule (150)
Storage (30)
TPP (30)
Trucks (30)
Zenotravel (20)
Total (1512)
PSR Large (50)
PSR Middle (50)

35
29
30
20
13
69
4
20
35
28
150
124
140
30
28
14
29
12
19
11
25
16
41
38
35
99
16
23
10
19
1162



39
28
17
13
14
66
4
15
33
25
118
95
105
30
34
18
29
4
28
48
31
28
49
35
30
132
16
26
13
17
1143
26
40

35
30
33
16
19
73
5
20
34
28
150
136
148
30
35
19
29
2
28
29
43
36
50
39
33
147
19
30
13
19
1330
28
50

33
30
34
15
20
75
5
20
33
28
143
136
150
30
33
16
30
2
27
34
42
38
50
39
31
139
20
29
16
20
1318
16
41

35
29
22
13
16
62
4
20
33
28
150
107
117
30
31
18
29
2
28
29
26
27
49
37
32
137
16
28
12
18
1185
22
37

33
29
17
12
15
65
4
18
32
28
117
107
113
30
29
14
30
2
27
34
27
28
49
37
27
129
18
27
15
18
1129
14
35

Table 9: Performance scores (rounded whole numbers) FF, Fast Downward LAMA
well experimental alternative configurations LAMA (F: without landmarks, FLfirst : without
iterated search, Ffirst : without landmarks without iterated search).

171

fiRichter & Westphal

Domain



F. Downw.

LAMA

F

Airport (50)
Assembly (30)
Blocks (35)
Depot (22)
Driverlog (20)
Freecell (80)
Grid (5)
Gripper (20)
Logistics 1998 (35)
Logistics 2000 (28)
Miconic (150)
Miconic Full ADL (150)
Miconic Simple ADL (150)
Movie (30)
MPrime (35)
Mystery (30)
Openstacks (30)
Optical Telegraphs (48)
Pathways (30)
Philosophers (48)
Pipesworld Notank. (50)
Pipesworld Tank. (50)
PSR Small (50)
Rovers (40)
Satellite (36)
Schedule (150)
Storage (30)
TPP (30)
Trucks (30)
Zenotravel (20)
Total (1512)
PSR Large (50)
PSR Middle (50)

37
30
31
22
15
80
5
20
35
28
150
136
150
30
34
16
30
13
20
13
36
21
41
40
36
133
18
28
11
20
1279



40
30
35
19
20
79
5
20
35
28
150
139
150
30
35
19
30
5
29
48
43
38
50
39
35
150
18
30
15
20
1384
31
50

36
30
35
17
20
79
5
20
35
28
150
137
150
30
35
19
30
2
29
29
44
38
50
40
34
150
19
30
13
20
1354
29
50

34
30
35
16
20
78
5
20
35
28
150
138
150
30
35
16
30
2
28
34
43
40
50
40
31
144
20
30
16
20
1348
16
41

Table 10: Coverage (problems solved) FF, Fast Downward LAMA well experimental F configuration LAMA without landmarks.

172

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

conducted extensive experimental study set benchmark tasks
last international planning competition, order identify much features
planner contributes performance setting planning action costs. discussed
overall results provided plausible explanations deviating behaviour special cases.
noticeable outcome experiments using cost-sensitive heuristics
produce desired outcome. particular, cost-sensitive FF/add heuristic performs significantly
worse FF/add heuristic ignores costs. due cost-sensitive heuristic solving
far fewer tasks leading little improvement solution quality tasks solve,
especially using iterated search. investigating reasons effect, found
cost-sensitive FF/add heuristic reacts strongly bad relaxed plans, i. e., particular
domains relaxed plans computed heuristic low quality costsensitive heuristic likely perform worse cost-unaware heuristic. showed
Elevators domain, action costs may introduce local minima search space without
action costs search space FF/add heuristic would plateaus. Moreover, increased
complexity planning cheaper goal potentially away initial state may
lead worse performance.
Landmarks prove helpful context, mitigate problems costsensitive FF/add heuristic. Using landmarks, coverage cost-sensitive search improved
nearly level cost-unaware search, deteriorating solution quality. Despite
mitigating effect landmarks, however, LAMA would still achieved slightly higher
score IPC 2008 simply ignored costs, rather using cost-sensitive heuristics.
cost-unaware search, found landmarks improve coverage solution quality domains
IPCs 19982006. domains IPC 2008, landmarks improved solution quality
cost-unaware search, increase (already high) coverage.
Iterative search improves results notably experimental configurations, raising
score LAMA quarter IPC 2008 domains. Openstacks domain, could
furthermore observe synergy effect iterative search landmarks. landmarks
usually improve quality, domain lead bad plans accounting action costs.
However, speed planning planner evaluates substantially fewer states. Iterative
search effectively improves initial bad plans benefiting speed-up provided
landmarks. general, use landmarks means quickly find good solutions,
using iterative search way improve plan quality time. Overall, found domains
used IPC 2008 constitute varied benchmark set reveals various strengths weaknesses
planning system.
Building results presented article, identify several directions future work.
Firstly, results suggest research cost-sensitive heuristics needed. would
conduct thorough analysis short-comings cost-sensitive FF/add heuristic, answer question whether might overcome. Keyder Geffner (2009)
propose method extracting better relaxed plans best supports computed costsensitive FF/add heuristic, resulting improved coverage. However, large ledge costunaware heuristic experiments suggests cost-unaware FF/add heuristic still better improved cost-sensitive heuristic Keyder Geffner. would interesting
examine degree problems experienced FF/add heuristic extend
delete-relaxation heuristics, whether heuristics based delete relaxation could
effectively adapted action costs. addition, future work could explore benefit combin173

fiRichter & Westphal

ing traditional distance estimators cost-sensitive heuristics sophisticated ways
mechanism currently used LAMA (see discussion Section 3.3.2).
Secondly, believe useful future research improve definition reasonable
orderings, eliminating problems definition Hoffmann et al. mentioned Section 4.1.
Thirdly, would extend use landmarks system several ways. one,
current approach take account whether landmark must achieved several
times. Supporting multiple occurrences landmarks would beneficial Openstacks
domain, example, could help minimise creation stacks accounting
costs. methods exist detecting multiplicity landmarks (Porteous & Cresswell, 2002;
Zhu & Givan, 2003), crucial develop techniques deriving orderings
individual occurrences landmarks. Furthermore, would extend LAMA support
complex landmarks conjunctions simple formulas. addition representing
using landmarks landmark heuristic involves development new methods
detecting along corresponding orderings.

Acknowledgments
authors thank Malte Helmert, Charles Gretton, Sylvie Thiebaux Patrik Haslum well
anonymous reviewers helpful feedback earlier drafts paper.
computing resources experiments graciously provided Pompeu Fabra University. thank Hector Palacios support conducting experiments.
NICTA funded Australian Government, represented Department Broadband, Communications Digital Economy, Australian Research Council,
ICT Centre Excellence program.
work partially supported Deutsche Forschungsgemeinschaft part Transregional Collaborative Research Center SFB/TR 8 Spatial Cognition, project R4-[LogoSpace].

References
Aine, S., Chakrabarti, P. P., & Kumar, R. (2007). AWA* window constrained anytime heuristic search algorithm. Veloso, M. M. (Ed.), Proceedings 20th International Joint
Conference Artificial Intelligence (IJCAI 2007), pp. 22502255.
Bacchus, F. (2001). AIPS00 planning competition. AI Magazine, 22(3), 4756.
Backstrom, C., & Nebel, B. (1995). Complexity results SAS+ planning. Computational Intelligence, 11(4), 625655.
Boddy, M., Gohde, J., Haigh, T., & Harp, S. (2005). Course action generation cyber security
using classical planning. Biundo, S., Myers, K., & Rajan, K. (Eds.), Proceedings
Fifteenth International Conference Automated Planning Scheduling (ICAPS 2005),
pp. 1221. AAAI Press.
Bonet, B., & Geffner, H. (2001). Planning heuristic search. Artificial Intelligence, 129(1), 533.
Bryce, D., & Kambhampati, S. (2007). tutorial planning graph based reachability heuristics.
AI Magazine, 28(1), 4783.
174

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Buffet, O., & Hoffmann, J. (2010). glitters gold: Using landmarks reward shaping
FPG. Proceedings ICAPS 2010 Workshop Planning Scheduling
Uncertainty.
Chen, Y., Wah, B. W., & Hsu, C.-W. (2006). Temporal planning using subgoal partitioning
resolution SGPlan. Journal Artificial Intelligence Research, 26, 323369.
Cheng, J., & Irani, K. B. (1989). Ordering problem subgoals. Sridharan, N. S. (Ed.), Proceedings
11th International Joint Conference Artificial Intelligence (IJCAI 1989), pp. 931
936. Morgan Kaufmann.
Do, M. B., & Kambhampati, S. (2003). Sapa: scalable multi-objective heuristic metric temporal
planner. Journal Artificial Intelligence Research, 20, 155194.
Do, M. B., Ruml, W., & Zhou, R. (2008). On-line planning scheduling: application controlling modular printers. Proceedings Twenty-Third AAAI Conference Artificial
Intelligence (AAAI 2008), pp. 15191523. AAAI Press.
Edelkamp, S., & Hoffmann, J. (2004). PDDL2.2: language classical part 4th
International Planning Competition. Tech. rep. 195, Albert-Ludwigs-Universitat Freiburg,
Institut fur Informatik.
Fink, A., & Vo, S. (1999). Applications modern heuristic search methods pattern sequencing
problems. Computers Operations Research, 26(1), 1734.
Fox, M., & Long, D. (2003). PDDL2.1: extension PDDL expressing temporal planning
domains. Journal Artificial Intelligence Research, 20, 61124.
Fuentetaja, R., Borrajo, D., & Linares Lopez, C. (2009). unified view cost-based heuristics.
ICAPS 2009 Workshop Heuristics Domain-Independent Planning, pp. 7077.
Gerevini, A., Haslum, P., Long, D., Saetti, A., & Dimopoulos, Y. (2009). Deterministic planning
fifth international planning competition: PDDL3 experimental evaluation
planners. Artificial Intelligence, 173(56), 619668.
Gerevini, A., & Serina, I. (2002). LPG: planner based local search planning graphs
action costs. Ghallab, M., Hertzberg, J., & Traverso, P. (Eds.), Proceedings Sixth
International Conference Artificial Intelligence Planning Scheduling (AIPS 2002), pp.
1322. AAAI Press.
Gregory, P., Cresswell, S., Long, D., & Porteous, J. (2004). extraction disjunctive landmarks planning problems via symmetry reduction. Proceedings Fourth International Workshop Symmetry Constraint Satisfaction Problems, pp. 3441.
Hansen, E. A., & Zhou, R. (2007). Anytime heuristic search. Journal Artificial Intelligence
Research, 28, 267297.
Hansen, E. A., Zilberstein, S., & Danilchenko, V. A. (1997). Anytime heuristic search: First results.
Technical report cmpsci 97-50, University Massachusetts, Amherst.
Helmert, M. (2006). Fast Downward planning system. Journal Artificial Intelligence Research, 26, 191246.
Helmert, M. (2009). Concise finite-domain representations PDDL planning tasks. Artificial
Intelligence, 173, 503535.
175

fiRichter & Westphal

Helmert, M., Do, M., & Refanidis, I. (2008). IPC 2008, deterministic part. Web site, http://ipc.
informatik.uni-freiburg.de.
Helmert, M., & Geffner, H. (2008). Unifying causal graph additive heuristics. Rintanen,
J., Nebel, B., Beck, J. C., & Hansen, E. (Eds.), Proceedings Eighteenth International
Conference Automated Planning Scheduling (ICAPS 2008), pp. 140147. AAAI Press.
Hoffmann, J., & Nebel, B. (2001). planning system: Fast plan generation heuristic
search. Journal Artificial Intelligence Research, 14, 253302.
Hoffmann, J., Porteous, J., & Sebastia, L. (2004). Ordered landmarks planning. Journal
Artificial Intelligence Research, 22, 215278.
Irani, K. B., & Cheng, J. (1987). Subgoal ordering goal augmentation heuristic problem
solving. McDermott, J. P. (Ed.), Proceedings 10th International Joint Conference
Artificial Intelligence (IJCAI 1987), pp. 10181024. Morgan Kaufmann.
Jonsson, P., & Backstrom, C. (1998). State-variable planning structural restrictions: Algorithms complexity. Artificial Intelligence, 100(12), 125176.
Karpas, E., & Domshlak, C. (2009). Cost-optimal planning landmarks. Proceedings
21st International Joint Conference Artificial Intelligence (IJCAI 2009), pp. 17281733.
Keyder, E., & Geffner, H. (2008). Heuristics planning action costs revisited. Proceedings
18th European Conference Artificial Intelligence (ECAI 2008), pp. 588592.
Keyder, E., & Geffner, H. (2009). Trees shortest paths vs. Steiner trees: Understanding improving delete relaxation heuristics. Proceedings 21st International Joint Conference
Artificial Intelligence (IJCAI 2009), pp. 17341749.
Keyder, E., Richter, S., & Helmert, M. (2010). Sound complete landmarks and/or graphs.
Coelho, H., Studer, R., & Wooldridge, M. (Eds.), Proceedings 19th European Conference Artificial Intelligence (ECAI 2010), pp. 335340.
Koehler, J., & Hoffmann, J. (2000). reasonable forced goal orderings use
agenda-driven planning algorithm. Journal Artificial Intelligence Research, 12, 338386.
Likhachev, M., Ferguson, D., Gordon, G. J., Stentz, A., & Thrun, S. (2008). Anytime search
dynamic graphs. Artificial Intelligence, 172(14), 16131643.
Likhachev, M., Gordon, G. J., & Thrun, S. (2004). ARA*: Anytime A* provable bounds
sub-optimality. Thrun, S., Saul, L. K., & Scholkopf, B. (Eds.), Advances Neural
Information Processing Systems 16 (NIPS 2003).
Lipovetzky, N., & Geffner, H. (2009). Inference decomposition planning using causal consistent chains. Gerevini, A., Howe, A., Cesta, A., & Refanidis, I. (Eds.), Proceedings
Nineteenth International Conference Automated Planning Scheduling (ICAPS 2009).
AAAI Press.
Liu, Y., Koenig, S., & Furcy, D. (2002). Speeding calculation heuristics heuristic
search-based planning. Proceedings Eighteenth National Conference Artificial
Intelligence (AAAI 2002), pp. 484491. AAAI Press.
Pohl, I. (1970). Heuristic search viewed path finding graph. Artificial Intelligence, 1, 193
204.
176

fiThe LAMA Planner: Guiding Cost-Based Anytime Planning Landmarks

Porteous, J., & Cresswell, S. (2002). Extending landmarks analysis reason resources
repetition. Proceedings 21st Workshop UK Planning Scheduling Special
Interest Group (PLANSIG 02), pp. 4554.
Porteous, J., Sebastia, L., & Hoffmann, J. (2001). extraction, ordering, usage landmarks planning. Cesta, A., & Borrajo, D. (Eds.), Pre-proceedings Sixth European
Conference Planning (ECP 2001), pp. 3748, Toledo, Spain.
Richter, S., & Helmert, M. (2009). Preferred operators deferred evaluation satisficing planning. Gerevini, A., Howe, A., Cesta, A., & Refanidis, I. (Eds.), Proceedings Nineteenth International Conference Automated Planning Scheduling (ICAPS 2009), pp.
273280. AAAI Press.
Richter, S., Helmert, M., & Westphal, M. (2008). Landmarks revisited. Proceedings
Twenty-Third AAAI Conference Artificial Intelligence (AAAI 2008), pp. 975982. AAAI
Press.
Richter, S., Thayer, J. T., & Ruml, W. (2010). joy forgetting: Faster anytime search via
restarting. Brafman, R., Geffner, H., Hoffmann, J., & Kautz, H. (Eds.), Proceedings
Twentieth International Conference Automated Planning Scheduling (ICAPS 2010).
AAAI Press. appear.
Roger, G., & Helmert, M. (2010). more, merrier: Combining heuristic estimators satisficing planning. Brafman, R., Geffner, H., Hoffmann, J., & Kautz, H. (Eds.), Proceedings
Twentieth International Conference Automated Planning Scheduling (ICAPS
2010), pp. 246249. AAAI Press.
Ruml, W., & Do, M. B. (2007). Best-first utility-guided search. Veloso, M. M. (Ed.), Proceedings
20th International Joint Conference Artificial Intelligence (IJCAI 2007), pp. 2378
2384.
Sebastia, L., Onaindia, E., & Marzal, E. (2006). Decomposition planning problems. AI Communications, 19(1), 4981.
Vidal, V. (2004). lookahead strategy heuristic search planning. Zilberstein, S., Koehler, J.,
& Koenig, S. (Eds.), Proceedings Fourteenth International Conference Automated
Planning Scheduling (ICAPS 2004), pp. 150159. AAAI Press.
Zhou, R., & Hansen, E. A. (2005). Beam-stack search: Integrating backtracking beam search.
Biundo, S., Myers, K., & Rajan, K. (Eds.), Proceedings Fifteenth International
Conference Automated Planning Scheduling (ICAPS 2005), pp. 9098. AAAI Press.
Zhu, L., & Givan, R. (2003). Landmark extraction via planning graph propagation. ICAPS 2003
Doctoral Consortium, pp. 156160.

177


