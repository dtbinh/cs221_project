journal artificial intelligence

submitted published

effective phase transitions
directed hamiltonian cycle
gerold jager

gej informatik uni kiel de

computer science institute
christian albrechts university kiel
kiel germany

weixiong zhang

weixiong zhang wustl edu

department computer science engineering
washington university
st louis missouri united states

abstract
hamiltonian cycle hcp important combinatorial
applications many areas among first used studying intrinsic properties including phase transitions combinatorial thorough theoretical
experimental analyses made hcp undirected graphs limited
amount work done hcp directed graphs dhcp main contribution work effective dhcp explores
exploits close relationship dhcp assignment ap
utilizes technique boolean satisfiability sat combining effective ap sat significantly outperforms previous exact dhcp
including award winning concorde tsp
second current study experimental analysis phase transitions
dhcp verifying refining known phase transition dhcp

introduction
undirected graph g v e hamiltonian contains hamiltonian cycle hc
cycle visits vertex exactly given graph hamiltonian cycle
hcp hc prove hc exists graph decision version
hcp among first proven n p complete karp hcp
well known many applications different areas e g hamiltonian cycle
game game theory stojakovic szabo finding knights tour
chessboard artificial intelligence henderson apodaca dna physical
mapping biology grebinski kucherov much done
hcp undirected graphs reviews see work bondy christofides
chvatal gould vandegriend gutin moscato
particular many developed hcp angluin valiant
bollobas fenner frieze frieze posa vandegriend reviewed
stony brook repository skiena one effective
hcp related traveling salesman tsp undirected weighted
graph finding hc minimum total weight
c

ai access foundation rights reserved

fijager zhang

hcp canonical understanding intrinsic properties combinatorial one property called phase transition consider
undirected graph gn edges randomly chosen possible n n edges
n vertices expected keeping size n e number vertices
constant increasing number edges probability random graph gn
hamiltonian increases surprisingly probability hamiltonian
gn exhibits sharp dramatic transition transition occurs approximately dc n log n log log n c bollobas cheeseman kanefsky
taylor komlos szemeredi furthermore experimentally shown
constant c probability gn hamiltonian
vandegriend culberson phase transitions hcp studied
different control parameters example called general constrainedness
parameter frank gent walsh phase transition hcp motivated substantial amount phase transitions combinatorial
particularly tsp zhang korf boolean satisfiability monasson zecchina
kirkpatrick selman
study consider hcp directed graphs call directed hcp
dhcp short addition known applications hcp mentioned
interesting application dhcp dhcp heuristics used solve
bottleneck tsp kabadi punnen contrast extensive amount work
hcp undirected graphs dhcp rather limited angluin
valiant bang jensen gutin kelly first exact
dhcp developed martello outputs fixed number h
hcs reports cannot h hcs given directed graph setting h
gives rise dhcp recent years sat
encoding introduced e g absolute encoding hoos
relative encoding prestwich see velev gao furthermore
probabilistic heuristic dhcp complexity n proposed frieze b
shown random class gn probability given instance
hc found therefore exists changes n grows
infinity n log n cn c constant dhcp phase transition
similar hcp obtained well namely phase transition occurs
dc n log n log log n c mcdiarmid constant c expected
close
note tsp alluded dhcp
technique point reduction asymmetric tsp atsp distance city
city j may necessarily equal j converted symmetric
tsp number vertices doubled jonker volgenant
transformation determine whether directed graph hamiltonian solving
symmetric tsp renowned concorde applegate bixby chavatal
cook concorde solved many large benchmark instances cook
including tsp instance cities applegate et al date
largest solved practical tsp instance
main contribution effective exact dhcp
utilize methods two well known combinatorial e assign

fialgorithm directed hamiltonian cyce

ment ap boolean satisfiability sat therefore denote
ap sat random graphs many real world instances experimentally compare
ap sat dhcp martello tsp takes advantage tsp solver concorde applegate et al
mentioned sat encodings dhcp hoos prestwich
ap sat significantly outperforms
second contribution experimental study refinement known phase
transition existence hc random directed graph mcdiarmid
similarly done hcp vandegriend culberson


consider directed unweighted graph g v e nodes v edges e
purpose solving dhcp consider determining whether
exists collection cycles may necessarily complete cycles visiting
vertex exactly call directed assignment dap
short explores exploits intrinsic relationship dhcp
dap precisely ap sat searches hc space dap
solutions first solves dap dap solution forms hc dap solution
exists terminates dap solver returns solution hc
tries patch subcycles solution hc well known
karp steele patching method karp steele hc found dap
patching steps iterated difference another dap solution might
found cases considered study hc
determine solution exists two steps fails solve
iterative steps attempts enumerate dap solutions
formulating dap boolean satisfiability repeatedly solving
sat solver adding constraints eliminate dap solutions
encountered discuss details steps rest section
solving assignment
given n vertices matrix c cij jn rn n costs pairs
vertices nassignment problemo ap vertex permutation
pn
arg min
ci n n set permutations n
note ap solution viewed collection cycles visiting vertex exactly

many developed ap bertsekas goldberg kennedy
jonker volgenant experimental comparison ap see
dellamico toth efficient one hungarian
konig egervarys theorem complexity n ap sat
use implementation hungarian jonker volgenant


fijager zhang

unweighted directed graph g v e dap solved applying ap
ap instance defined matrix c cij jn

cij








j e j
j
e
j
j

map costs arcs g costs remaining arcs
ap returns solution cost dap solution g since every arc
taken ap solution arc g hand returns solution cost
greater dap solution g least one arc solution
belong g
first step ap sat dap hc g one
exists solution dap distinguish three cases end first
step
cost ap solution greater g hc dhcp
instance solved solution
ap solution cost solution consists one cycle found
hc dhcp instance solved
ap solution cost ap solution one cycle cannot
determine ap solution whether g hamiltonian
continue next steps ap sat
karp steele patching
dap solution provide definitive answer e case
ap solution cost ap solution contains one cycle continue
search hc g first patch subcycles attempt form hc use
karp steele patching ksp purpose effective atsp heuristic glover
gutin yeo zverovich goldengorin jager molitor karp steele
operation patching two cycles c c ap solution defined follows
two fixed arcs v w c v w c first deleted two arcs v w
v w joining two cycles added cost patching c c v w
v w equal
c c c v w c v w c v w c v w
e c c difference total cost inserted arcs total cost
deleted arcs step choose patch two cycles largest
number vertices two cycles two arcs chosen way
patching cost minimum among possible arc pairs k cycles
repeat patching step k times form one cycle end apply ksp
ap instance defined section patching procedure provides hc ap sat
terminated otherwise continue next step


fialgorithm directed hamiltonian cyce

solving variant aps
dap may multiple solutions dap solutions may hcs
increase chance finding hc apply ap step multiple times since
computational cost ap ksp low key avoid finding
dap solution accomplish slightly alter arc costs
corresponding ap instance dap solutions enhanced ksp
needed increase possibility finding hc words add perturbation
component create multiple variant ap instances boost overall chance finding
hc note worst case dhcp instance contains hc procedure
productive
main idea create variant ap instance reduce chance subcycles
current ap solution chosen subsequent rounds solving aps
done perturbing costs arcs g follows arc
current dap solution increase cost one create ap instance different
section generalize ap instance follows let ci j cost arc
j e let


n max ci j j e

e greater n times largest cost arc g set costs
edges e ap instance section special case ap instance
costs ci j arcs j e critical notice dap solutions
including hc must costs less solution contains hc
terminates otherwise subcycles patched ksp possibly
hc repeat step multiple times arc appeared many
previous dap solutions unlikely appear next dap solution
arc never occurred previous dap solution likely appear
next dap solution
let r maximal number ap ksp calls e number variant ap instances
solved observed experiments r n see step pseudo code
appendix good choice discussed detail section
implicitly enumerating dap solutions sat
ap patching steps discussed may still miss solution dhcp
instance consider implicitly enumerate dap solutions finding
solution dhcp exists idea systematically rule dap
solutions discovered far search end first formulate
dap boolean satisfiability sat dechter forbid dap solution
adding constraints sat model elementary technique adding
constraints purpose enumerating sat solutions applied
general sat e g see jin han somenzi notice cannot
easily done ap framework constraints cannot properly added
ap moreover take advantage effort devoted
sat particular use effective sat solver called minisat een sorensson



fijager zhang

conjunctive normal form cnf sat instance set boolean variables
conjunction clauses disjunction literals boolean
variables negations clause satisfied one literals true
instance satisfied clauses satisfied sat truth
assignment variables satisfy clauses satisfiable determine
assignment exists sat first shown n p complete cook
garey johnson karp
formulate dap sat solution dap must obey following
restrictions
vertex n exactly one arc j j exists dap solution
vertex n exactly one arc j j exists dap solution
first introduce integer decision variable xi j arc j e xi j holds
arc j appears dap solution represent constraints
following integer linear program ilp
pn
xi j n
pj j e

n
j e xi j j n
xi j j e thus total n constraints note
use variables one variable arc graph substantially
smaller n variables sparse graphs represent integer linear program
sat model similar work lynce marques silva replace
integer variables xi j boolean variables yi j enforce n restrictions sat
formulation need introduce constraints clauses one restriction means
exactly one n involved boolean variables vertex set true
rest must false represent introduce n auxiliary variables
z z z n n zs one restriction without loss generality consider
first restriction z z zn associated use zk represent least one
k true precisely z variables defined follows
z equivalently z z
zk k zk equivalently zk k zk zk zk k zk
k n
addition need enforce one n true
means k true none k true formulated

zk k k n
finally zn must true restrictions represented similarly
sat representation allows us exclude non hamiltonian dap solution
previously found search done introducing clauses explicitly


fialgorithm directed hamiltonian cyce

forbidding subcycles solution let subcycle v v vk v
add clause
yv v yvk vk yvk v
current sat instance updated sat instance satisfiable
meaning corresponding dhcp instance contain hc gives rise
dap solution allow previous dap solution
summary ap patching related steps failed solution apsat transforms instance sat instance collects
previous dap solutions includes least two subcycles excludes
subcycles dap solutions adding clauses described
resulting sat model solved sat model satisfiable dhcp
terminates instance hamiltonian
sat model satisfiable solution one cycle stops hc
sat model satisfiable solution one subcycle clauses
introduced sat model rule solution repeats
solve revised formula since finite number dap solutions
terminates worst case dap solutions contain hc sat part
enumerate dap solutions overview outline main
steps ap sat pseudo code appendix
general remarks
present experimental comment method proposed
help appreciate features
ap sat consists three main components namely ap step
ksp step sat step might interesting know components important one distinguish completeness
efficacy necessary step completeness sat
step section step without previous steps leads correct dhcp
hand ap sat effective ap
ksp steps called often sat step called called
times example instance dap solution exists existing hc
found previous steps sat part invoked indeed
experiments showed sat step invoked test instances
regarding relative time needed ap ksp steps consider density instances instance small number arcs
cases hc solution dap solution
case terminates first ap step need make
ksp call hand instance large number arcs require
many ap steps many dap solutions may exist hcs thus hc
solution may found ksp expected behavior could validated
experiments time ksp steps smaller instances small number
arcs larger instances large number arcs see figure


fijager zhang

ap sat able solve hcp special case dhcp
less effective case reason symmetric case arc
reverse arc often present dap solution resulting many small cycles two
vertices solution thus general enumerate large number dap
solutions worst case hc exists dap solutions
enumerated giving rise long running time
easily revise ap sat identify hcs directed graph
finding solutions desirable many applications e g finding knights tour chessboard henderson apodaca kyek parberry
wegener see already mentioned
martello frieze suen revision works
follows hc exists remains consider case
least one hc exists first hc found original ap sat
terminates case revised stage saves first hc
continues search next hc pseudo code appendix
need replace stop save rows note
revised sat part invoked least one hc exists
furthermore original ap sat revised works
symmetric case less effective
ap sat used restart scheme e repeatedly solved series ap
instances derived modifying costs arcs appeared previous
ap solution although restart scheme random restart scheme
developed constraint artificial intelligence gomes selman kautz
follow design principle trying avoid encounter
solutions subsequent runs two schemes fundamentally different
name indicated random restart scheme depends random choices made
variable value selections process search variable assignment
constraint contrast restart scheme random arcs
current ap solution receive higher costs subcycles current ap
solution less likely chosen words restart scheme used
somewhat deterministic depends solution structures
method used exclude subcycles solution current dap instance subsequent sat solving process follows principle popular idea
adding good constraints constraint satisfaction frost dechter
richards richards zhang madigan moskewicz malik specifically subcycles forbidden introducing additional constraints

experimental
implemented ap sat dhcp martello
dhcp absolute sat encoding hoos relative
sat encoding prestwich c compared
award winning concorde tsp program applegate et al al

fialgorithm directed hamiltonian cyce

gorithm martello implemented version terminates whenever hc
one exists found sat used ap solver jonker
volgenant minisat sat solver een sorensson
apply concorde dhcp instance first transformed asymmetric tsp instance transformation section symmetric tsp instance
point reduction method jonker volgenant implementation point
reduction works follows graph g v e v v v vn
make copy vertices v v vn create vertex set v v v
vn
define complete graph g vertex set v v symmetric cost
function c v v

j n
j n vi vj e
c vi vj

j n vi vj
e
c vi vj j n
c vi vj j n
directed hc exists g tsp tour cost n exists g note
contrast general version point reduction value required
tried point reduction method principle similar point
reduction uses two instead one copies vertex set uses cost values
details point reduction see work karp
experimental included showed point reduction runs
slower average point reduction therefore rest comparison
consider point reduction
point reduction concorde started worst possible solution value
initial upper bound terminated soon lower bound indicates hc
impossible
addition comparison experimentally analyzed ap sat
including asymptotic behavior applied study phase transitions dhcp
experiments carried pc athlon mp cpu gb
memory
comparison dhcp
experiments first tested random asymmetric instances gn parameters
n dcn log n log log n c c
n c generated random instances measured cpu time
instances furthermore tested real world random instances dimacs
challenge johnson et al non random instances reinelt
whereas tsplib contains single asymmetric tsp instances sizes
dimacs challenge contains asymmetric generators called amat coin crane
disk rect rtilt shop stilt super tmat generators generated


fijager zhang

instances vertices vertices vertices
vertices leading instances generators instances overall
transform asymmetric tsp instances back dhcp instances seems reasonable
keep arcs small weights ignoring ones large weights
words generate dhcp instance chose smallest arcs corresponding
asymmetric tsp instance interesting note difficult instances
tsplib dimacs appear degree parameter c around
value used experiments contrast difficult instances
random graphs occur degree parameter c see section
investigate variation running time present one subfigure
class e random classes sizes
dimacs classes amat coin crane disk rect rtilt shop stilt super tmat axis
gives average times plus confidence intervals values seconds
random classes x axis describes degree parameter c dimacs
classes describes size n random instances summarized
figure dimacs instances figures tsplib class consists
single instances completely different sizes structures difficulties present
table experiment single single instance required
least hour terminate due high memory requirement set cpu
times seconds

figures table two sat encodings competitive
ap sat concorde martello furthermore ap sat concorde
stable martello concorde failed solve dimacs instances
coin crane rect stilt super types within maximal allowed time hour
whereas ap sat failed instances among instances
ap sat failed stilt types remaining instance super could
solved increased maximal allowed time hour hours see table
martello unable solve instances larger size
high memory requirement instances failed random instance size
degree parameter dimacs instances coin crane disk rect
stilt types tsplib instances see table nevertheless martello
outperformed concorde smaller easier instances indicating former
worse asymptotic running time overall observed ap sat
clearly superior four among instances random
instances dimacs instances tsplib instances tested instances
one four faster ap sat instances include
random instances namely size degree parameter size degree
parameters respectively dimacs instances namely coin rect
stilt stilt stilt stilt stilt stilt tsplib instance
br see table


fialgorithm directed hamiltonian cyce

figure comparison random instances
size
apsat
concorde
martello
abs encoding
rel encoding







apsat
concorde
martello



average running time

average running time

size




















degree parameter c

degree parameter c

size

size
apsat
concorde
martello







apsat
concorde



average running time






















degree parameter c

degree parameter c
size
apsat
concorde



average running time

average running time














degree parameter c



fijager zhang

figure comparison dimacs instances part
coin instances
apsat
concorde
martello
abs encoding
rel encoding







average running time

average running time

amat instances

apsat
concorde
martello
abs encoding
rel encoding































size








apsat
concorde
martello
abs encoding
rel encoding




























size







average running time

average running time



apsat
concorde
martello
abs encoding
rel encoding


















rtilt instances
apsat
concorde
martello
abs encoding
rel encoding





size

rect instances





disk instances
apsat
concorde
martello
abs encoding
rel encoding

average running time

average running time

crane instances





size







size







size





fialgorithm directed hamiltonian cyce

figure comparison dimacs instances part
stilt instances
apsat
concorde
martello
abs encoding
rel encoding







average running time

average running time

shop instances

apsat
concorde
martello
abs encoding
rel encoding































size








apsat
concorde
martello
abs encoding
rel encoding




















tmat instances
apsat
concorde
martello
abs encoding
rel encoding

average running time

average running time

super instances





size







size







size





fijager zhang

table comparison tsplib instances
instance size

ap sat

concorde

br
ftv
ftv
ftv
p
ftv
ftv
ry p
ft
ftv
ftv
ft
ftv
kro p
ftv
ftv
ftv
ftv
ftv
ftv
ftv
ftv
rbg
rbg
rbg
rbg























































running time
martello absolute encoding
























































relative encoding



























fialgorithm directed hamiltonian cyce

analysis ap sat
efficacy ap sat may due following reasons instances
hc likely dap solution therefore
terminates first ap call hand instances hc likely
multiple hcs one found quickly ap ksp steps
difficult case many dap solutions none
hcs case ap ksp steps may fail sat part invoked
hc disprove existence hc
following analyze instances ap sat fails requires much
time analyze number r computing variant ap instances set
size instance n see end section therefore investigated three
procedures ap sat namely ap ksp sat observed sat part
invoked instances tested considered two
instances stilt super ap sat terminate hour
hard analyze hard instances increased maximal allowed time
hour hours table present running times ap ksp sat
number calls three procedures numbers ap ksp calls
given column two numbers equal different one see
pseudo code appendix furthermore add two additional pieces information
whether instance hc whether unknown whether ap sat terminated
instance hours table memory means part terminated due
high memory requirement note solution status instance stilt
hc known since concorde contrast ap sat able solve
table shows running time ap ksp contributed majority
total running time ap sat hard instances e coin
rect two instances stilt super sat invoked
instances ap sat terminate instances e stilt stilt stilt stilt stilt sat part terminate
reasonable amount time stopped due high memory requirement
sat
order determine r ran instances table three different values
r e r r n r n presented showed ap sat
unable terminate r n e instances stilt stilt stilt
stilt stilt stilt failed stop values r
remaining instances increasing r n r n reduce running times
reasonable two instances coin rect large ap ksp time
hc hand two instances ones
ap sat ran faster smaller values r namely coin r n
rect r
thus conclude r increased rather decreased hard
estimate memory requirements time sat part one alternative
difficult instances would start ap sat smaller parameter r stop
sat part time one unsuccessful call complete apsat restarted larger r instances however choice


fijager zhang

table comparison performance ap ksp sat procedures ap sat
hard instances
instance
br
coin
rect
rect
stilt
stilt
stilt
stilt
stilt
stilt
stilt
stilt
stilt
stilt
stilt
super

running time
ap
ksp
sat































memory


memory









number calls
ak ksp sat

































hc

termin






yes




unknown
unknown
unknown
unknown
unknown
yes

yes
yes
yes
yes
yes
yes
yes
yes
yes






yes

figure comparison performance ap ksp procedures ap sat random
instances size
ap
ksp



average running time















degree parameter c

r relevant difficult instances required perform comprehensive
analysis r
finally figure compare times used ap ksp random instances
size degree parameter c
observe ap time consuming ksp smaller c effect
obvious instances solved hc first
ap call thus ksp need invoked


fialgorithm directed hamiltonian cyce

phase transitions dhcp
random undirected graphs gn arcs randomly chosen possible
n n arcs n vertices graph komlos szemeredi proved phase
transition c dn log n log log n c c hcp vandegriend culberson experimentally verified theoretical constant c
dhcp arcs randomly chosen possible n n arcs
mcdiarmid proved phase transition cdn log n log log n c c
experiments aimed verify determine multiplicative constant c
directed graph may contain twice many arcs undirected counterpart would
expect number arcs doubled well phase transition point therefore
tested dc n log n log log n c c
expected phase transition occur
c considered instances n
vertices chose independently generated random graphs n c
phase transition shown table figure first parameter
c second parameter percentage hamiltonian graphs among graphs
considered observe phase transition dhcp similar hcp
particular evident figure phase transition becomes sharper e
crossover among phase transition curves size increases
characteristic phase transitions complex systems crossover occurs around
degree parameter c substantially different expected value
short observations verified existence phase transition dhcp
phase transition occurs dc n log n log log n c approximately c
furthermore constant c probability gn hamiltonian
comparison undirected graphs constant
found vandegriend culberson

asymptotic behavior ap sat
interesting characteristic asymptotic behavior quantify
behavior ap sat revisited experiments section e
experiments verified phase transitions dhcp described earlier considered random instances n vertices
chose independently generated random graphs n c
measure worst case asymptotic behavior ap sat measured cpu times
difficult instances e instances degree parameter
c see section found figure x axis
size axis average time required since x axis
logarithmic scale log log curve figure nearly linear average running
time ap sat considered polynomial number n vertices
graph reasonable random instances sat part called see
section ap ksp combined complexity worse n


fijager zhang

table phase transition random instances
c























































































































































































































size

























































































































































































































fialgorithm directed hamiltonian cyce

figure phase transition random instances

size
size
size
size
size
size
size

existence hcs






















degree parameter c









fijager zhang

figure asymptotic behavior ap sat

apsat

average running time
























size

summary
hamiltonian cycle hcp important canonical combinatorial
surprisingly hcp directed graphs called directed hcp dhcp
effective exact developed main work novel
effective exact dhcp utilizes existing
assignment existing method boolean satisfiability sat work
includes sat formulation hcp ap potentially extended
tsp experimental random real
instances showed superior four known including
one takes advantage award winning concorde tsp furthermore first phase transition combinatorial done hcp
later extended dhcp experimentally verified existence
phase transition dhcp refined location phase transition
appears exact dhcp

acknowledgments
thank david johnson labs gregory gutin royal holloway
university london many discussions related work insightful comments
manuscript supported part nsf grants iis
dbi weixiong zhang



fialgorithm directed hamiltonian cyce

appendix pseudo code ap sat
input directed non complete graph g v e v n
define matrix c section
define subcycle collection set w
n

solve ap instance matrix c solution value g ap solution
v vi v vi vn vin vn vin number cycles k

g

stop hc

else k

stop hc ap solution

apply ksp cycles receive solution value h complete
cycle w w wn w

h

stop hc w w wn w

n

cvt vit cvt vit

n max ci j j e

ci j j
e

add subcycle ap solution w
start sat model explained section
subcycle v v vk vk v w add clause
yv v yvk vk yvk v sat model
solve sat model
variable setting exists model

add k subcycles solution sat model w

k

stop hc
subcycle

goto

else stop hc
output hc g proof hc exists g

references
angluin valiant l g fast probabilistic hamiltonian circuits
matchings j comput system sci


fijager zhang

applegate l bixby r e chvatal v cook w j concorde code
http www tsp gatech edu concorde html
applegate l bixby r e chvatal v cook w j traveling salesman
computational study princeton university press
applegate l bixby r e chvatal v cook w j espinoza goycoolea
helsgaun k certification optimal tour cities
oper res lett
bang jensen j gutin g chapter digraphs theory applications springer london free available
http www cs rhul ac uk books dbook
bertsekas p assignment math program

bollobas b random graphs academic press london
bollobas b fenner frieze finding hamiltonian
paths cycles random graphs combinatorica
bondy j basic graph theory paths circuits graham r l grotschel
lovasz l eds handbook combinatorics north holland amsterdam
cheeseman p kanefsky b taylor w really hard
mylopoulos j reiter r eds proc th international conference
joint artificial intelligence ijcai morgan kaufmann
christofides n graph theory algorithmic academic press
york
chvatal v hamiltonian cycles chapter lawler e l lenstra j k rinnooy
kan h g shmoys b eds traveling salesman guided tour
combinatorial optimization john wiley sons chichester
cook complexity theorem proving procedures proc rd ann acm
symp theory computing stoc
cook w j tsp homepage
http www tsp gatech edu
dechter r constraint processing morgan kaufmann
dellamico toth p codes dense assignment
state art discrete appl math
een n sorensson n extensible sat solver giunchiglia e tacchella
eds proc th international conference theory applications satisfiability
testing sat lecture notes comput sci
een n sorensson n minisat code
http minisat se


fialgorithm directed hamiltonian cyce

frank j gent walsh asymptotic finite size parameters phase
transitions hamiltonian circuit case study inform process lett
frieze finding hamiltonian cycles sparse random graphs j combin theory ser b
frieze b finding hamilton cycles random directed
graphs j
frieze suen counting hamilton cycles random directed graphs
random structures
frost dechter r dead end driven learning proc th national conference
artificial intelligence aaai aaai press
johnson th dimacs implementation challenge traveling salesman
http www att com dsj chtsp
garey r johnson computers intractability guide theory
n p completeness freeman york
glover f gutin g yeo zverovich construction heuristics
asymmetric tsp european j oper res
goldberg v kennedy r efficient cost scaling assignment math program
goldengorin b jager g molitor p tolerance contract patch heuristic asymmetric tsp erlebach ed proc rd workshop combinatorial algorithmic aspects networking caan lecture notes comput sci
gomes c p selman b kautz h boosting combinatorial search
randomization proc th national conference artificial intelligence aaai
aaai press
gould r j updating hamiltonian survey j graph theory

grebinski v kucherov g reconstructing hamiltonian circuit querying
graph application dna physical mapping ir r centre de recherche
en informatique de nancy
gutin g moscato p hamiltonian page
http alife ccp ac uk memetic moscato hamilton html
henderson r apodaca e knight egodeth zen raptured quietude booksurge publishing
hoos h h sat encodings search space structure local search performance
proc th international joint conference artificial intelligence ijcai
morgan kaufmann


fijager zhang

jin h han h somenzi f efficient conflict analysis finding satisfying
assignments boolean circuit halbwachs n zuck l eds proc th
international conference tools construction analysis
systems tacas lecture notes comput sci
johnson gutin g mcgeoch l yeo zhang w zverovich
experimental analysis heuristics atsp chapter gutin g punnen
p eds traveling salesman variations kluwer
jonker r volgenant transforming asymmetric symmetric traveling
salesman oper res lett
jonker r volgenant shortest augmenting path dense
sparse linear assignment computing
jonker r volgenant ap code
http www magiclogic com assignment html
kabadi n punnen p bottleneck tsp chapter gutin g punnen p eds traveling salesman variations kluwer
karp r reducibility among combinatorial miller r e thatcher
j w eds complexity computer computations york plenum
karp r steele j probabilistic analysis heuristics chapter lawler
e l lenstra j k rinnooy kan h g shmoys b eds traveling salesman guided tour combinatorial optimization john wiley sons
chicester
kelly l hamilton cycles directed graphs phd thesis university birmingham united kingdom
komlos szemeredi e limit distribution existence hamiltonian
cycle random graph discrete math
kyek parberry wegener bounds number knights tours
discrete appl math
lynce marques silva j efficient haplotype inference boolean satisfiability proc st national conference artificial intelligence aaai aaai press
martello enumerative finding hamiltonian circuits directed graph acm trans math software
mcdiarmid c j h cluster percolation random graphs math program stud
monasson r zecchina r kirkpatrick selman b troyansky l determining computational complexity characteristic phase transitions nature

prestwich sat chains dependent variables discrete
appl math
posa l hamiltonian circuits random graphs discrete math


fialgorithm directed hamiltonian cyce

reinelt g tsplib traveling salesman library orsa j comput

reinelt g tsplib library
http www iwr uni heidelberg de groups comopt software tsplib
richards e richards b non systematic search good learning
j automat reason
skiena stony brook repository
http www cs sunysb edu algorith files hamiltonian cycle shtml
stojakovic szabo positional games random graphs random structures
vandegriend b finding hamiltonian cycles graphs performance
master thesis university alberta canada
vandegriend b culberson j gn phase transition hard
hamiltonian cycle j artificial intelligence res
velev n gao p efficient sat techniques absolute encoding permutation application hamiltonian cycles proc th symposium abstraction reformulation approximation sara
zhang w korf r e study complexity transitions asymmetric
traveling salesman artificial intelligence
zhang l madigan c f moskewicz h malik efficient conflict driven
learning boolean satisfiability solver proc ieee acm international conference computer aided design iccad




