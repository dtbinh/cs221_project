Journal Artificial Intelligence Research 39 (2010) 373-427

Submitted 4/10; published 10/10

Constraint Satisfaction Framework Executing
Perceptions Actions Diagrammatic Reasoning
Bonny Banerjee
B. Chandrasekaran

banerjee.28@osu.edu
chandra@cse.ohio-state.edu

Laboratory Artificial Intelligence Research
Department Computer Science & Engineering
Ohio State University, Columbus, OH 43210, USA

Abstract
Diagrammatic reasoning (DR) pervasive human problem solving powerful adjunct symbolic reasoning based language-like representations. research reported
paper contribution building general purpose DR system extension
soar-like problem solving architecture. work framework DR
modeled process subtasks solved, appropriate, either inference
symbolic representations interaction diagram, i.e., perceiving specied information diagram modifying/creating objects diagram specied ways
according problem solving needs. perceptions actions DR systems built
far hand-coded specic application, even rest system built
using general architecture. absence general framework executing perceptions/actions poses major hindrance using opportunistically essence
open-ended search problem solving.
goal develop framework executing wide variety specied perceptions actions across tasks/domains without human intervention. observe
domain/task-specic visual perceptions/actions transformed domain/taskindependent spatial problems. specify spatial problem quantied constraint
satisfaction problem real domain using open-ended vocabulary properties, relations actions involving three kinds diagrammatic objects points, curves, regions.
Solving spatial problem specication requires computing equivalent simplied quantier-free expression, complexity inherently doubly exponential.
represent objects conguration simple elements facilitate decomposition
complex problems simpler similar subproblems. show that, symbolic
solution subproblem expressed concisely, quantiers eliminated
spatial problems low-order polynomial time using similar previously solved subproblems. requires determining similarity two problems, existence mapping
computable polynomial time, designing memory storing previously solved problems facilitate search. ecacy idea shown time
complexity analysis. demonstrate proposed approach executing perceptions
actions involved DR tasks two army applications.

1. Introduction
research reported paper contribution building problem solving agents
articial intelligence (AI) use diagrams, much people do, AI
not, given almost exclusive emphasis AI language-like predicate-symbolic representations. Diagrammatic reasoning (DR) emerging area research number
c
2010
AI Access Foundation. rights reserved.

fiBanerjee & Chandrasekaran

elds, including AI (Glasgow, Narayanan, & Chandrasekaran, 1995; Chandrasekaran,
Kurup, & Banerjee, 2005), logic (Barwise & Etchemendy, 1998; Allwein & Barwise, 1999),
psychology (Tversky, 2000; Tricket & Trafton, 2006). research DR
one way dealing diagrams, dierent research issues addressed dierent
researchers. research reported paper considers DR problem solving activity
agent (human articial) makes use two forms representation spatial
representation form 2D diagrams symbolic representation contains information predicate-symbolic form similar logic natural language. schematic
DR architecture, proposed Chandrasekaran et al. (2002, 2004, 2005), illustrated
Figure 1.
Problem
Spatial problem
specification language

Spatial
Problem
Solver

Problem
Solver
Solution
spatial problem

Diagram

Solution

Inference
Rules
Symbolic
Information
Traditional AI
problem solver

Figure 1: diagrammatic reasoning architecture.

1.1 Diagrammatic Reasoning Problem Solving Activity
DR architecture shares idea problem solving search problem state space
(Laird, Rosenbloom, & Newell, 1986; Newell, 1990). approach, starting
initial state, agent applies operators bring state transitions reach goal
state. goal either reached decomposed subgoals use general
domain knowledge. Reaching goal subgoal requires information generated
traditional problem solving architectures (e.g., soar Laird, Newell, & Rosenbloom,
1987, act-r Anderson, 1993) inference using predicate-symbolic representation.
DR architecture, agent extract information diagrams applying perceptionlike operations addition inference using predicate-symbolic representation reach
goal/subgoal. agent create modify objects diagram propose new
states goal might reached subsequent perceptions inferences.
illustrate conceptualization DR, let us consider real-world problem.
army commander, planning strategic operations, uses terrain map chalk path
troops safely travel one base camp location L1 another L2 within given
time. information regarding nature terrain (e.g., slow-go no-go
regions, altitude dierent parts terrain, speed troops travel
dierent kinds terrain) estimate maximum repower range enemy.
commander, veteran eld, well aware possibility troops
might ambushed along path enemy might hiding neighboring
regions. problem solving might proceed follows. diagram consisting part
374

fiExecuting Perceptions Actions Diagrammatic Reasoning

terrain map interest particular problem given, along peripheries
no-go regions two points, L1 L2 (see Figure 2(a)). commander
draws one shorter paths L1 L2 maintaining maximum distance
neighboring no-go regions (see Figure 2(b)). knows kinds spatial relations
points route points enemy could hiding correspond
ambush potential. uses knowledge perceive (and mark) portions
path prone ambush due enemies hiding behind neighboring no-go regions
(see Figure 2(c)). portion found, path inferred safe. length
safe path traversed given time, considered suitable path
operation. path drawn safe satisfy time constraint, another path
drawn (see Figure 2(d)) analyzed. procedure continues paths
exhausted. suitable path still found, least risky path might considered
operation. worst case, commander might infer operation
possible. problem similar vein, described above, considered Forbus,
Usher, Chapman (2003).
example, noteworthy problem solver (the commander) opportunistically brings together symbolic knowledge (such as, repower range enemies)
perception action diagram solve real-world problem. phenomenon
characteristic DR whenever used solve problems dierent domains, as,
economics, geometry, engineering, computer-aided design, military, on. observe
executing perceptions actions require solving purely spatial problems
involvement domain knowledge. spatial problems described terms
diagrammatic objects, as, points, curves, regions, spatial properties (e.g.,
length curve) relations (e.g., point curve) involving them. example, perceiving portions path prone ambush due enemies hiding behind mountain
range requires computing set points q curve (the path) c1 q within
specied distance (the repower range) point p curve (the mountain
range) c2 (see Figure 22(b)). Formally, written
RiskyP ortionsof P ath(q, c1 , c2 , d) On(q, c1 )p, On(p, c2 )DistanceLessT han(p, q, d)
DistanceLessT han(p, q, d) Distance(p, q)
p point. paper, propose general ecient framework spatial
problem solving autonomously execute perceptions actions DR.
1.2 Mean Diagram?
Definition 1. Diagram. diagram set labeled 2D objects {O1 , O2 , ...On }
located clearly inside (i.e., intersection touching) common region (or bounding box)
B. objects three types points, curves, regions.
Definition 2. Diagrammatic Object. diagrammatic object 3-tuple < L, , E >
L label, type (point, curve region), E spatial extent.
spatial extent diagrammatic object set points constituent object.
375

fiBanerjee & Chandrasekaran

(a) given diagram consisting two points, L1
L2 , three region obstacles.

(b) One shorter paths L1 L2
avoiding obstacles drawn.

(c) Portions path prone ambush perceived marked.

(d) Another path drawn analyzed
risk.

Figure 2: Diagrammatic reasoning army commander nding safe path transporting troops L1 L2 within given time.

Definition 3. Diagrammatic Image. diagrammatic image, I, diagram
set points constituent objects diagram. Thus, D= {O1 , O2 , ...On }
diagram Oi =<L(Oi ),T (Oi ),E(Oi ) >, diagrammatic image I(D) given
n

I(D) =
E(Oi )
i1

denition diagram, due Chandrasekaran et al. (2002, 2004, 2005), supports
functional representation diagram articial agent. diagram external
medium (e.g., piece paper, computer screen) is, one level, image consisting pixels
dierent intensities. another level, interpreted representation consisting
spatial objects domain interest. abstract diagram ideal, i.e., points
dimensionless, curves thickness, etc. external diagram, points curves
consist least one pixel nite dimensions. need interchange
two forms diagrams reasoning interaction purposes. rest paper,
376

fiExecuting Perceptions Actions Diagrammatic Reasoning

term diagram refer abstract diagram only, unless otherwise stated.
interested diagrams line drawings color intensity variation.
diagrams form substantial class diagrams everyday use.
1.3 Perceptions Actions Diagrammatic Reasoning
Definition 4. Perception. perception act extracting new piece information diagram. new piece information satisfies constraints specified terms
properties relations among existing objects diagram boolean real
number diagrammatic object(s). Thus, perception P mapping diagram
set booleans {T rue, F alse} real numbers set diagrammatic objects
satisfying constraints C.
C

P : {T rue, F alse} ,

I(D ) I(D)

Definition 5. Action. action act introducing new object(s), modifying
deleting existing object(s) diagram satisfying constraints specified terms
properties relations among existing objects. Thus, action mapping
diagram new set diagrammatic objects satisfying constraints C.
C

: DD ,

I(D) = I(D )

last couple decades, numerous DR systems built dierent applications dierent domains. following review well-known DR systems
problem solving agent reasons using diagrams. review help realize
role perception action DR, spatial problems implicit perceptions
actions.
Sketchy (Pisan, 1995) computer implementation model graph understanding. recognizes diagrammatic objects - points, lines, regions, vocabulary
properties relations includes coordinate point, right of, above, inside, steeper,
bigger, vertical, change slope, touches, intersects, line, border, forms border, etc.
representing conceptual relationships domains, as, thermodynamics economics.
domain translator responsible converting domain-specic conceptual questions
domain-independent graphical relations. Examples perception supply-demand
graph economics include price eects supply, demand, market price
product, requires solving visual problems, as, point supply equal
demand? (corresponding spatial problem: compute intersection two curves),
price supply line quantity 350? (corresponding spatial problem:
compute point curve whose one coordinate given), quantity price
directly proportional? (corresponding spatial problem: check whether slope curve
two points positive constant not), quantity price inversely
proportional? (corresponding spatial problem: check whether slope curve
two points negative constant not), etc. Actions model required due
nature task. Examples graphs understood sketchy shown Figure
3.
377

fiBanerjee & Chandrasekaran

(a) Graph economics

(b) Graph thermodynamics

Figure 3: Examples graphs understood sketchy. Reproduced permission
Pisan (1994).

Figure 4: example deected frame analysis (from civil engineering) redraw.
Reproduced permission Tessler et al. (1995).

378

fiExecuting Perceptions Actions Diagrammatic Reasoning

redraw system (Tessler et al., 1995) combines diagrammatic symbolic reasoning qualitatively determine deected shape frame structure load,
structural analysis problem civil engineering. uses vocabulary properties relations including get-angular-displacement, get-displacement, symmetrical-p, connected-to,
near, left, above, rotate, bend, translate, smooth, etc. three kinds diagrammatic objects lines, splines, circles. Though properties relations domain-independent,
some, as, bend reect assumptions implicit domain task
dened accordingly. Perceptions actions called inspection manipulation operators system. underlying representation combination grid-based
Cartesian coordinates shapes represented using grid element
grid corresponds point diagram lines represented set coordinate
points. Examples perception action include deecting beam direction
load, checking whether beam column perpendicular particular rigid
joint, etc. require solving visual problems, as, Bend Beam3 negative
direction y-axis (corresponding spatial problem: compute curve given slope
given point), Make angle Beam3 Column3 Joint3 90 degrees without modifying Beam3 (corresponding spatial problem: compute curve makes
particular angle given point given curve), Get angle Beam3
Column3 ends connected Joint3 (corresponding spatial problem: compute
angle two curves given point), etc. example deected frame analysis
redraw shown Figure 4.
archimedes system (Lindsay, 1998) assists human demonstrating theorems
Euclidean geometry modifying/creating diagrams according instructions
thereafter perceiving/inferencing diagram. operates two diagrammatic objects - points line segments, recognizes shapes, as, square, triangle, path,
etc. underlying representation array- grid-based. perceptions, called retrieval
processes, dierent classes, as, verify relationship, test condition, etc.
actions, called construction processes, dierent classes, as, create object
certain properties, transform object, etc. Executing perceptions actions require solving spatial problems, as, create segment parallel given segment
given point, rotate object check whether coincides another object, etc.
example geometry theorem demonstrated archimedes shown Figure 5.
diamond (Jamnik, 2001), system proving mathematical theorems, uses
sequence actions diagrams assisted human prove specic ground instances
generalizes induction. uses mixture Cartesian topological representations
represent dot (equivalent point Cartesian representation) diagrammatic
object discrete space, line area (or region) diagrammatic objects
continuous space. Elementary shapes, as, row, column, ell, frame, constructed
dots, derived shapes, as, square, triangle, rectangle, etc. constructed
elementary derived shapes. vocabulary consists atomic onestep operations (e.g., rotate, translate, cut, join, project 3D 2D, remove, insert
segment, etc.). Spatial problems system composite operations composed
atomic ones, as, draw right-angled triangle, translate rotate triangle, etc.
system need execute perceptions information diagram perceived
379

fiBanerjee & Chandrasekaran

Figure 5: example geometry theorem demonstrated archimedes.

Figure 6: example mathematical theorem proven diamond. theorem
Nelson (1993).

380

fiExecuting Perceptions Actions Diagrammatic Reasoning

human decides actions applied proof search. example
mathematical theorem proven diamond shown Figure 6.
Georep (Ferguson & Forbus, 2000) takes input line drawing vector graphics
representation creates predicate calculus representation drawings spatial relations. Five primitive shape types recognized, namely line segments, circular arcs, circles
ellipses, splines (open closed), positioned text. Properties relations,
as, proximity detection, orientation detection (e.g., horizontal, vertical, above, beside), parallelism, connectivity (e.g., detecting corner, intersection, mid-connection, touch), etc.
deployed accomplish task. underlying representation vector graphics line
drawings. Systems, as, magi (Ferguson, 1994), juxta (Ferguson & Forbus, 1998),
coadd built using georep symmetry detection, critiquing diagrams based
captions, producing description units, areas, tasks course
action diagram, respectively. georep, due limitation task, need
execute action. Examples visual problems georep include guring cup
contains liquid (corresponding spatial problem: compare areas polygons representing cups), determine whether gure symmetric (corresponding spatial
problem: check whether one polygon congruent reection polygon),
etc. example ambush analysis georep shown Figure 7.

Figure 7: example ambush analysis georep. Reproduced permission
Forbus et al. (2003).

preceding discussion leads observation DR systems require perceiving and/or acting diagrams, every perception/action requires solving
domain-independent spatial problem. Thus, general-purpose DR system solving
problems applications across multiple domains would require solving large variety
non-trivial domain-independent spatial problems. spatial problems described
381

fiBanerjee & Chandrasekaran

terms three diagrammatic objects points, curves, regions, spatial properties
relations involving them.
1.4 Problem
perceptions actions solved DR system? Typically, human developing DR system identies priori problem solving steps including set perceptions
actions, hand-codes ecient algorithms solving them. problem
solving steps need altered future result, new perception arises,
developer write another algorithm obtaining solution. Thus, algorithms need
hand-coded perception/action. Clearly, inconvenient time consuming developing DR system, allow fast easy experimentation
dierent problem solving strategies problem. drawbacks
magnied goal build general-purpose DR system large variety perceptions actions possible feasible ascertain priori,
develop store algorithms for. Hence, goal investigate spatial problem solver
(SPS) eciently solving spatial problems implicit perceptions/actions without human
intervention.1
1.5 Contributions
paper, make following contributions:
1. observe wide variety visual perceptions/actions DR applications
transformed domain/task-independent spatial problems. developed language
specifying spatial problems (i.e., spatial relations actions) quantied constraint
satisfaction problems (QCSPs) rst-order logic using xed set mathematical/logical
operators real domain open-ended vocabulary properties, relations
actions. spatial relation action involving points expressed using
operators real variables rst-order logic included vocabulary.
Further, spatial relation action involving curves and/or regions expressed
using relations On(p, c) and/or Inside(p, r) p point, c curve, r region,
relation/action involving points rst-order logic included
vocabulary. vocabulary grows richer spatial relations actions specied.
2. spatial relation action included vocabulary solvable
SPS. Real QCSPs known computationally intractable, substantial part
spatial problem solving literature concentrates constraint satisfaction problems (CSPs).
developed general framework solving spatial problems specied QCSPs.
framework bypasses process quantier elimination (QE) computational bottleneck doubly exponential problem taking help previously solved similar
spatial problems. show that, symbolic solution problem expressed
1. reader keep DR architecture mind. shown Figure 1, two problem
solvers main problem solver always referred problem solver (this might
human) spatial problem solver referred SPS (this strictly
human intervention). problem solver responsible entire problem solving strategy including
converting domain-specific perceptions actions domain-independent spatial problems. SPS
responsible solving domain-independent spatial problems receives problem
solver. important get confused roles played two.

382

fiExecuting Perceptions Actions Diagrammatic Reasoning

concisely, quantiers eliminated spatial problems low-order polynomial time
using similar previously solved problems. framework leaves room ecient
convenient incorporating future results least two possible directions learning
constraints examples (automatic constraint acquisition) carefully exploiting rich
portfolio QE algorithms.
rest paper organized follows. next section, discuss language
specifying spatial problem SPS. Section 3 describes SPS. Section 4 analyzes
computational complexity SPS. Section 5 shows proposed SPS
augmented traditional AI problem solver (soar) reasoning diagrams two
real-world applications. Finally, end discussion conclusion.

2. Specification Language
section, discuss high-level language nite, extensible, human-usable,
expressive enough describe wide variety 2D spatial problems relevant DR.
problems specied language accepted input SPS solved
without human intervention. specication language independent SPS, i.e.,
problem specication remains unchanged even underlying representation
reasoning strategy SPS change.
2.1 Diagrammatic Objects
specication language recognizes three kinds diagrammatic objects points, curves,
regions.
Point. point basic diagrammatic object. objects dened terms
set points.
Curve. curve set points it. approximate curve piecewise-linearly.
Thus, curve c approximated sequence n points {p1 , p2 , ...pn }, c set
points lies constituent line segments, i.e.
c {p : On(p, {p1 , p2 }) On(p, {p2 , p3 }) ...On(p, {pn1 , pn })}
p (x, y), x, , {pi , pi+1 } line segment pi pi+1 . call
points {p1 , p2 , ...pn } vertex points. sake simplicity specication, problem
solver write sequence vertex points {p1 , p2 , ...pn } specify curve c.
Region. region set points inside boundary. boundary region
closed curve approximated piecewise-linearly. Thus, region simple (convex
concave) polygon. simple polygon triangulated point inside
region inside one triangles. Thus, boundary region r approximated
sequence n points {p1 , p2 , ...pn },
r {p : Inside(p, (r)[1]) Inside(p, (r)[2]) ...Inside(p, (r)[m])}
number triangles region r triangulation, (r)[i] ith triangle
r, p (x, y), x, . sake simplicity specication, problem solver
write sequence vertex points {p1 , p2 , ...pn } boundary curve specify
383

fiBanerjee & Chandrasekaran

region r. Whether sequence vertex points corresponds curve region
determined automatically system context property/relation predicate.
dene Inside section 3.1.
Further, SPS asked recognize kind diagrammatic object(s) obtained
solution spatial problem. achieved function Recognize(Dext )
Dext external diagram (i.e., constituted pixels unlike abstract diagram).
example, set points behind curve c respect given point p
region object curve object depending nature c location respect
p. order recognize output, SPS colors corresponding set pixels
external diagram pixel predetermined resolution corresponds point.
set colored pixels grouped two adjacent pixels always belong
group. group pixels constitutes diagrammatic object. boundary pixels
group determined. group consists less three pixels, consider
point object. group consists two pixels width (both horizontal
vertical) always less three pixels, consider curve object. Otherwise,
group constitutes region object.
2.2 Vocabulary
Unlike certain well-known qualitative spatial reasoning calculi (e.g., intersection calculus
Egenhofer, 1991, cardinal direction calculus Frank, 1991, region connection calculus
Randell, Cui, & Cohn, 1992), interested nding minimal set spatial
relations vocabulary based closed set predicates. Rather, vocabulary
based closed set operators (to discussed shortly section 2.3). spatial
relations actions included vocabulary follows:
1. spatial relation action involving points expressed using
xed set operators real variables rst-order logic.
2. spatial relation action involving points, curves regions expressed
rst-order logic using xed set operators, real variables, relation/action
#1, relations On(p, c) and/or Inside(p, r) p point, c curve, r
region.
3. spatial relation action involving points, curves regions expressed
rst-order logic using xed set operators, real variables, relation/action
#1 #2.
Thus, vocabulary open-ended addition new properties relations
encouraged problem cannot easily expressed using existing ones. observation that, human often encounters new perceptions/actions
specied using already known ones. However, large vocabulary helps specify
new ones conveniently. DR literature (Pisan, 1995; Tessler et al., 1995; Lindsay, 1998; Jamnik, 2001; Ferguson & Forbus, 2000; Chandrasekaran et al., 2004; Banerjee &
Chandrasekaran, 2004), identied vocabulary properties, relations actions
based wide usage expressing variety real-world spatial problems dierent
domains. vocabulary used paper starting point specifying
spatial problems. follows examples properties, relations actions
vocabulary.
384

fiExecuting Perceptions Actions Diagrammatic Reasoning

Properties. Associated kind object properties location
point; location, closedness length curve; location, area periphery
region, periphery region refers boundary curve. user
dene particular shapes (e.g., circle, triangle, annulus, etc.) curves regions
appropriate reasoning domain. Dierent shapes might specic
properties, as, radius circle, height triangle, etc. easily associated
objects vocabulary user. DR requires solving spatial problems
concerning discrete set points. problems, properties, as, Centroid(S)
V ariance(S), set points, included vocabulary.
Relations. vocabulary contains widely used relations (or relational
predicates) involving points, as, Lef tof (p1 , p2 ), opof (p1 , p2 ), Collinear(p1 , p2 , p3 ),
Between(p1 , p2 , p3 ) p1 , p2 , p3 points. relation involving points
included vocabulary needed. On(p, c), p point c curve,
fundamental relation involving curve Inside(p, r), p point r region, fundamental relation involving region vocabulary relation
involving curves regions uses and/or Inside. relational predicates involving curves regions vocabulary Intersect(c1 , c2 ), IntersectionP oints(q, c1 , c2 ),
ouches(c1 , c2 ), Subcurveof (c1 , c2 ) c1 , c2 curves, Subregionof (r1 , r2 )
r1 , r2 regions.
Actions. Further, set predicates identifying emergent objects modications existing objects. example, ranslate(q, O, tx , ty ) returns translation object
tx units along x-axis ty units along y-axis, Rotate(q, O, c, ) returns rotation
object respect point c center degrees anti-clockwise direction,
Ref lect(q, O, {a, b}) returns reection object respect line segment {a, b}
(i.e., point point b), Scale(q, O, c, sx , sy ) returns scaling object
respect point c sx units along x-axis sy units along y-axis. curve
region, predicates dened using corresponding action involving point
predicates and/or Inside.

2.3 Language
language problem solver (human articial) species spatial
problem SPS. internal representations objects, properties, relations,
problem-solving strategies hidden problem solver. specication language
remains unchanged even underlying representation problem-solving strategy
changed. use rst-order predicate logic specication language, previously reported
Banerjee Chandrasekaran (2007).
Operators. language recognizes set boolean operators {, , }, set arithmetic operators {+, , , }, set relational operators {<, >, =, =}, quantiers
{, }. brackets () used express precedence brackets {} used
express set. paper, often use certain combination operators, as, ,
, , etc. sake brevity.
385

fiBanerjee & Chandrasekaran

Domain. language allows problem solver specify domain set
variables assume values. Unless otherwise stated, domain real plane
2 point variable real line non-diagrammatic variable.
Functions. Further, language recognizes two functions aximize(f, {x, y, ...}, C)
inimize(f, {x, y, ...}, C), maximizes minimizes function f respect
variables {x, y, ...} satisfying boolean combination constraints C (which might
involve quantiers) returns maximum minimum value f respectively along
conditions variables.
Quantified Constraint Satisfaction Problem. instance constraint satisfaction problem (CSP) consists tuple < V, D, C > V nite set variables,
domain, C= {C 1 , ...C k } set constraints. constraint C consists pair
< , Ri > list mi variables Ri mi -ary relation domain D.
question decide whether assignment mapping variable
domain element constraints satised. variables CSP
thought implicitly existentially quantied.
useful generalization CSP quantied constraint satisfaction problem,
variables may existentially universally quantied. instance
QCSP consists quantied formula rst-order logic, consists ordered list
variables associated quantiers along set constraints. QCSP
expressed follows:
(v1 , ...vm ) Q(xn , ...x1 ) (v1 , ...vm , x1 , ...xn )
Q(xn , ...x1 ) Qn xn , ...Q1 x1
Qi {, }, {x1 , ...xn } set quantied variables, {v1 , ...vm } set free
variables, V= {v1 , ...vm , x1 , ...xn }, quantier-free expression called matrix.
representation quantied expression , written sequence quantiers followed matrix, referred prenex form. Example QCSP follows:
Subcurveof (c1 , c) p, On(p, c1 ) On(p, c)
c1 , c curves 2 . example, two constraints:
< {p, c1 }, >
< {p, c}, >
Further, V= {p} = 2 . variables c, c1 given. question
decide whether assignment mapping p element 2 logical
combination constraints satised. assignment exists, c1
subcurve c; otherwise is.
Decision, Function Optimization problems. proposed specication
language, spatial problem expressed QCSP V consists variables type
point, curve region = 2 . Solving spatial problem involves:
1. free variables V (i.e., variables V quantied), deciding
whether exists mapping V satisfying C.
386

fiExecuting Perceptions Actions Diagrammatic Reasoning

2. free variables V, computing conditions free variables
mapping V satisfying C exists.
Thus, spatial problem classied decision function optimization
problem real domain. rst case constitutes decision problem yields True
False solution. second case constitutes function problem involves computing
diagrammatic object(s) described conditions free variables. spatial
problem requires computing best mapping V satisfying C, called
optimization problem.
Let us consider example. Given curve c two points p, q, spatial problem
BehindCurve(q, c, p) dened deciding whether q behind c respect
p. might specied deciding whether curve c line segment {p, q}
intersect. Thus,
BehindCurve(q, c, p) Intersect(c, {p, q})
particular instances q, p, c, solution problem rue F alse, hence
decision problem (see Figure 8). particular instances p, c, generalized
coordinates q i.e., q (x, y), solution problem logical combination
conditions involving x y, plotted constitutes region object (see Figure
9). Hence, function problem. decision problem merely requires checking
whether given instance object satises constraints not, function
problem requires computing conditions general object satisfy constraints.

Figure 8: BehindCurve decision problem. One points q behind c
respect p one not.

Again, given curve c two points p, q, spatial problem F urthestBehindCurve(q,
c, p) dened deciding whether q furthest point behind c respect
p. might specied deciding whether q lies behind c respect p
387

fiBanerjee & Chandrasekaran

Figure 9: BehindCurve function problem. shaded region r behind c
respect p.

distance p q maximum. Thus,
F urthestBehindCurve(q, c, p) BehindCurve(q, c, p) b, BehindCurve(b, c, p)
CompareDistance(b, p, q, p)
CompareDistance(a, b, c, d) Distance(a, b) Distance(c, d)
particular instances q, p, c, solution problem rue F alse, hence
decision problem. particular instances p, c, generalized coordinates q i.e.,
q (x, y), solution problem logical combination conditions involving
x y, plotted constitutes single point object, assuming one
furthest point behind c respect p, dependent nature c
Distance function dened (see Figure 10).
alternative way specifying problem F urthestBehindCurve(q, c, p)
explicitly asking maximize distance p q q satises constraint
BehindCurve(q, c, p), written as:
F urthestBehindCurve(q, c, p) aximize(Distance(q, p), {q}, BehindCurve(q, c, p))
outputs conditions involving x y, constitutes single point object.
aximize (or inimize) function assumes pool candidates choose
best satisfy set constraints. fact stated explicitly
using aximize (or inimize) function makes specication dicult
come cumbersome. ip side, specication problem
using aximize (or inimize) function cannot used decision problem.
is, whether particular instance object best candidate satises
388

fiExecuting Perceptions Actions Diagrammatic Reasoning

q

Figure 10: F urthestBehindCurve optimization problem. point q
furthest point behind c respect p.

constraints cannot computed specication, unlike former specication.
problem type, computes best candidate pool candidates,
called optimization problem.
Definition 6. Spatial Problem. spatial problem (or problem) QCSP
variable (quantified free) type point, domain 2 .
Thus, spatial problem mapping diagram satisfying logical combination constraints C set booleans {T rue, F alse} real numbers diagrammatic
objects , i.e.,
C

: D{T rue, F alse}
Solving spatial problem requires eliminating quantiers solving algebraic equations/inequalities arrive simplied expression. computational bottleneck
solving spatial problem quantier elimination (QE) inherently doubly exponential (Davenport & Heintz, 1988). recently, Brown Davenport (2007)
shown real QE doubly-exponential even one free variable
polynomials quantied input linear. paper, concentrate primarily QE part spatial problem solving hence, solution equivalent
quantifier-free expression necessarily simplified one. Theoretically,
best complexity QE achieved far O(s(l+1)(ki +1) d(l+1)ki ) number
polynomials, maximum degree coecients real, l number
free
variables, ki number variables ith quantier block k =
ki
number quantied variables (Basu, Pollack, & Roy, 2003). However, algorithm
complicated yet practical implementation. general elaborately
implemented method real QE cylindrical algebraic decomposition CAD (Collins
389

fiBanerjee & Chandrasekaran

k1

& Hong, 1991), complexity (sd)O(1) . Another implemented method, QE
virtual substitution (Weispfenning, 1988), restricted formulas quantied
variables occur quadratically. complexity method doubly exponential
number blocks variables delimited alternations existential universal quantiers. Thus, exist general algorithms QE, large real-world
problems, soon becomes time consuming.

3. Spatial Problem Solver
paper, concentrate developing ecient SPS without sacricing generality.
goal design SPS bypass general QE algorithms much possible,
either taking help previously solved similar problems memory obtain
solution using set practical algorithms developed
limited class problems. describe overall control mechanism SPS (see
Figure 11).
many domains, as, military, spatial problems involve diagrammatic objects
arbitrary shaped (e.g., mountainous regions) often cannot approximated enough
well-dened shapes solution reliably depend specics shape.
example, solution problem nding places behind mountain one
hide enemy depends critically particular shape mountain. Due
nature domains, choose represent curves piecewise-linearly regions
polygons. Piecewise-linear curves polygonal regions unions line segments
triangular regions respectively, facilitate decomposition complex problems
simpler similar subproblems. observe similar subproblems involving
existential universal quantiers occur regularly spatial problem solving
process solved one QE algorithms (e.g., CAD), thereby incurring doubly
exponential time. minimize enormous computational cost reusing solutions
subproblems previously solved.
Given spatial problem specication language, SPS replaces numerical values problem symbolic variables, transforms symbolic problem
specication modeling language (to described shortly) progressively replacing
objects/predicates base objects/predicates internal denitions. denition
cannot found, ags error halts till provided. rst step, SPS decomposes disjunctions and/or conjunctions subproblems prenex form.
see later, subproblems similar one
solved, solution others computed it. Next, searches memory
problems similar . memory contains symbolic problems corresponding quantier-free symbolic solutions. mapped one problems,
solution readily obtained reverse-mapping corresponding symbolic solution
memory. Obtaining solution way completely bypasses QE process,
computational bottleneck SPS, thereby reducing computational costs considerably. SPS cannot map problem memory, sends problem
classier classies sends appropriate QE algorithm. problem classier combination QE algorithms borrowed Mathematica (Wolfram,
2003). SPS solves new subproblem, subproblem solution stored
390

fiExecuting Perceptions Actions Diagrammatic Reasoning

Problem
specification language

Convert problem modeling language: Search
vocabulary replace terms specification
definitions, exists; otherwise request definition

Problem
modeling language
Decompose problem conjunctions and/or
disjunctions subproblems prenex form

first subproblem I1 ,
search memory
similar subproblem

Match found

Memory

Match found

Compute solution
subproblem I1
help solution
matched problem

Problem classifier
combination constraint
solvers quantifier
elimination algorithms

Subproblem I1

solution

Compute solutions subproblems
solution I1 combine

Solution

Figure 11: Flow diagram spatial problem solver.
memory solution used similar problem encountered future.
Thus, SPS grows ecient solves problems. Finally, SPS computes
solution given problem combining solutions subproblems.
Unfortunately, problems, quantiers cannot eliminated symbolically reasonable time. SPS tries prescribed time, resorts practical
391

fiBanerjee & Chandrasekaran

methods, as, techniques especially suited low degree polynomials (e.g., Dolzmann,
Sturm, & Weispfenning, 1998) approximate methods obtaining subset solution sucient immediate purposes (e.g., Ratschan, 2006; Lasaruk & Sturm, 2006).
shown, integer linear programming (e.g., Leyton-Brown, Nudelman, & Shoham,
2002) satisability testing (e.g., Xu, Hutter, Hoos, & Leyton-Brown, 2008),
best on-average solver out-performed carefully exploiting portfolio possibly
poorer on-average solvers, accordingly, researchers experimented dierent
ways selecting portfolio solvers (see example, Xu et al., 2008; Pulina & Tacchella,
2007; Sayag, Fine, & Mansour, 2006; Streeter, Golovin, & Smith, 2007; Gebruers, Hnich,
Bridge, & Freuder, 2005; OMahony, Hebrard, Holland, Nugent, & OSullivan, 2008).
none work involve solving QCSPs real domain, directly usable
purposes discussed paper. However, expect
result extend QCSP solvers real domain, building smartly
selecting portfolio QCSP solvers promising line future research.
approach, subproblem deemed symbolically unsolvable prescribed time,
specication stored memory future, similar problem directly
subjected practical methods, thereby saving prescribed time.
3.1 Modeling Language
language problem described terms underlying representations objects/properties/relations form readily subjected algebraic
manipulation. location point p represented pair (x, y), x, ,
coordinates.
Notation. x- y-coordinates point p denoted p.x p.y respectively.
distance two points, p q, given
Distance(p, q)



(p.x q.x)2 + (p.y q.y)2

location curve c represented sequence vertex points {p1 , p2 , ...pn }.
Notation. number vertex points curve c denoted #(c), ith vertex
point denoted c[i], ith line segment denoted {c[i], c[i + 1]}.
line segment ls specied pair vertex (or terminal) points. x-
y-coordinates ls represented parametrically
fx (ls, t) ls[1].x + (ls[2].x ls[1].x)
fy (ls, t) ls[1].y + (ls[2].y ls[1].y)
parameter, 0 1. relation On(p, ls), p point, given
On(p, ls) t, 0 1 fx (ls, t) = p.x fy (ls, t) = p.y
Length line segment ls given

392

fiExecuting Perceptions Actions Diagrammatic Reasoning

Length(ls) Distance(ls[1], ls[2])
Length curve c given


#(c)1

Length(c)

Length({c[i], c[i + 1]})

i1

location region r represented location periphery
piecewise linear closed curve. discussed section 2.1, internally region triangulated
(computable linear time shown Chazelle, 1991; Seidel, 19912 ) aim
reducing simplifying computations (more section 3.2).
Notation. triangulation, number triangles region r denoted # (r)
ith triangle r denoted (r)[i].
area triangle given
Area()

1
2

3


[i].x [i\3 + 1].y [i\3 + 1].x [i].y

i1

Note area triangle positive sequence vertex points periphery
given counter-clockwise direction, otherwise negative. Area region r given
# (r)

Area(r)



Area((r)[i])

i1

relation Inside(p, ), p point triangle, given
Inside(p, ) 3i1 Lef tof (p, {[i], [i\3 + 1]})
Lef tof (p, ls) Area({ls[1], ls[2], p}) > 0
ls line segment.
action ranslate(q, c, tx , ty ) q (x, y), c curve, tx , ty real numbers, given
ranslate(q, p, tx , ty ) q.x = p.x + tx q.y = p.y + ty
ranslate(q, c, tx , ty ) a, On(a, c) ranslate(q, a, tx , ty )
Definition 7. Base Object. base object simplest form diagrammatic object.
point simplest form. line segment simplest form curve.
triangular region simplest form region. Thus, internally, three base
objects point, line segment, triangle.
Definition 8. Base Predicate. base predicate predicate accepts base
objects arguments.
2. Vik (2001) discusses implementation Mathematica.

393

fiBanerjee & Chandrasekaran

Examples base predicates include Lef tof (p1 , p2 ), Between(p1 , p2 , p3 ), On(p, ls),
Inside(p, ), p, p1 , p2 , p3 points, ls line segment, triangular region.
#(c)1

Lemma 1. On(p, c) i1

On(p, {c[i], c[i + 1]})

Proof. proof follows representation curve, described section 2.1.
# (r)


Lemma 2. Inside(p, r) i1
Inside(p, (r)[i])

Proof. proof follows representation region, described section 2.1.
relations included vocabulary internally dened terms base predicates. example, predicate, Intersect(c1 , c2 ) c1 , c2 curves, dened
terms base predicates
Intersect(c1 , c2 )
a, On(a, c1 ) On(a, c2 )
#(c )1

a, i11

#(c )1

On(a, {c1 [i], c1 [i + 1]}) j12

On(a, {c2 [j], c2 [j + 1]})

3.2 Decomposing Problem
Definition 9. Decomposition. Decomposition process replacing relational
predicates, involving free variables types curve region, spatial problem (quantified expression) conjunctions/disjunctions base predicates taking conjunctions/disjunctions front expression. expression following conjunctions/disjunctions subproblem.
Example. Decomposition problem Intersect(c1 , c2 ) a, On(a, c1 ) On(a, c2 )
occurs follows:
Intersect(c1 , c2 ) a, On(a, c1 ) On(a, c2 )
#(c )1

a, i11

#(c )1

On(a, {c1 [i], c1 [i+1]})j12

On(a, {c2 [j], c2 [j+1]}) (bef ore decomposition)

#(c )1 #(c2 )1
j1 a, On(a, {c1 [i], c1 [i+1]})On(a, {c2 [j], c2 [j+1]})

i11

#(c )1

i11

#(c )1

j12

(af ter decomposition)

Intersect ({c1 [i], c1 [i + 1]}, {c2 [j], c2 [j + 1]})

Intersect ({c1 [i], c1 [i + 1]}, {c2 [j], c2 [j + 1]}) subproblem. However, question
#(c )1 #(c )1
arises Intersect(c1 , c2 ) i11 j12 Intersect ({c1 [i], c1 [i+1]}, {c2 [j], c2 [j +1]})?
is, replace ?
Theorem 1. problem equivalent decomposition
contain following forms:
394

fiExecuting Perceptions Actions Diagrammatic Reasoning

F1:

p, On(p, c) Inside(p, r)

F2:

p, On(p, c) Inside(p, r)

F3:

p, Inside(p, r) Inside(p, r1 )

F4:

p, Inside(p, r) Inside(p, r1 )

(complement F1)

(complement F3)

c curve, r, r1 regions, c, r, r1 free variables.
Proof. discussed section 2.2, framework, On(p, c) Inside(p, r) two
fundamental relations using relation involving curve region specied.
Also, framework, point quantiable variable, {, } quantiers, {, , } boolean operators sucient express boolean expression.
Thus, spatial problem involving curves (and points regions) logical
combination smaller problems following form:
Qp, Rel(p, c) Q {, }, Rel {On, On}
spatial problem involving regions (and points curves) logical combination smaller problems following form:
Qp, Rel(p, c) Q {, }, Rel {Inside, Inside}
spatial problem involving curves regions (and points) logical combination
smaller problems following form:
Qp, Rel1 (p, c) Rel2 (p, r)
Q {, }, Rel1 {On, On}, Rel2 {Inside, Inside}, {, }
spatial problem involving two curves, c c1 , (and points) logical combination
smaller problems following form:
Qp, Rel1 (p, c) Rel2 (p, c1 )
Q {, }, Rel1 {On, On}, Rel2 {On, On}, {, }
Again, spatial problem involving two regions, r r1 , (and points) logical combination smaller problems following form:
Qp, Rel1 (p, r) Rel2 (p, r1 )
Q {, }, Rel1 {Inside, Inside}, Rel2 {Inside, Inside}, {, }
symbolically solved problems (56 total) two ways directly
decomposing p (x, y), c {p1 , p2 , ...pn } (n 2), pi (xpi , ypi ), c1 {a1 , a2 , ...au }
395

fiBanerjee & Chandrasekaran

(u 2), ai (xai , yai ), r {q1 , q2 , ...qm } (m 3), qi (xqi , yqi ), r1 {b1 , b2 , ...bv }
(v 3), bi (xbi , ybi ). turned solutions two ways equivalent
problems, except four cases stated theorem statement. Note F 2
specication computing whether curve c entirely inside region r not. Let
lsi ith line segment c (1 n 1) j j th triangular region r
(1 j 2). found
p, On(p, c) Inside(p, r)
m2
p, (n1
i1 On(p, lsi )) (j1 Inside(p, j ))
m2
p, n1
i1 j1 (On(p, lsi ) Inside(p, j ))
m2
n1
i1 j1 (p, On(p, lsi ) Inside(p, j ))

because, c entirely inside r, necessary line segments c
inside triangle r; line segment c span across multiple triangles r c
still inside r. Figure 12(a) shows example c inside r line segment
c spans across two triangles r. case, solution problem
rue computed directly F alse computed via decomposition.
rst case F 1 theorem statement explained similarly. forms F 1 F 2
rewritten follows:
F1 :

p, On(p, c) Inside(p, r)
p, On(p, c) Inside(p, r) r B r

F2 :

p, On(p, c) Inside(p, r)
p, On(p, c) Inside(p, r) r B r

B rectangular region (boundary) containing diagram discussed section
1.2. Note rewritten forms equivalent decomposition.
Again, F 4 specication computing whether region r entirely inside region
r1 not. Let 1,i ith triangle r1 (1 v 2) j j th triangular
region r (1 j 2). found
p, Inside(p, r) Inside(p, r1 )
v2
p, (m2
j1 Inside(p, j )) (i1 Inside(p, 1,i ))
v2
p, m2
j1 i1 (Inside(p, j ) Inside(p, 1,i ))
v2
m2
j1 i1 (p, Inside(p, j ) Inside(p, 1,i ))

396

fiExecuting Perceptions Actions Diagrammatic Reasoning

r

r
c

(a) Curve c inside region r line
segment c inside one triangle r.

r1

(b) Region r inside region r1 triangle r inside one triangle r1 .

Figure 12: Examples show decomposition curves regions problems containing forms F 1, F 2, F 3, F 4.

because, r entirely inside r1 , necessary triangles r
inside triangle r1 ; triangle r span across multiple triangles r1 r
still inside r1 . Figure 12(b) shows example r inside r1 triangle r
spans across two triangles r1 . case, solution problem rue
computed directly F alse computed via decomposition. third case
F 3 theorem statement explained similarly. forms F 3 F 4
rewritten follows:
F3 :

p, Inside(p, r) Inside(p, r1 )
p, Inside(p, r) Inside(p, r1 ) r1 B r1

F4 :

p, Inside(p, r) Inside(p, r1 )
p, Inside(p, r) Inside(p, r1 ) r1 B r1

Again, rewritten forms equivalent decomposition.

Theorem 2. subproblem resulting decomposing problem contains base predicates
only.
Proof. problem decomposable due presence relational predicates, involving
free variables types curve region, specication. stated section 2.2,
problem involving curve region specied framework using relation(s)
involving points relation Inside. Thus, relation Rel(q, c) involving
point q curve c rewritten as:
Rel(q, c) a, On(a, c) Rel (q, a)

397

fiBanerjee & Chandrasekaran

Rel(q, c) a, On(a, c) Rel (q, a)
Rel base predicate involving points q a. cases, expression
right-hand side contains base predicates only. Let problem involving
points curves regions. Let us replace occurrence non-base predicates
involving curve, as, Rel(q, c), equivalent expression consisting
base predicates involving points line segments only. resulting expression
consists base predicates involving points On. lemma 1, non-base
rewritten disjunctions base On. Therefore, resulting expression consists
base predicates involving points only.
Similarly, relation Rel(q, r) involving point q region r rewritten as:
Rel(q, r) a, Inside(a, r) Rel (q, a)

Rel(q, r) a, Inside(a, r) Rel (q, a)
Rel base predicate involving points q a. problem involving
points regions curves, replacing occurrence non-base predicates involving
region, as, Rel(q, r), equivalent expression consisting Inside base
predicates involving points only, using lemma 2, results expression
consisting base predicates involving points triangular regions only.
processes employed involves curves regions. Thus, subproblem
resulting decomposing problem contain base predicates only.
3.3 Mapping Similar Problem
Definition 10. Similarity. define two spatial problems (quantified expressions)
similar exists one-to-one correspondence variables (free quantified).
Given two similar problems, 1 2 , solution 1 1 , goal construct
one-to-one mapping variables 1 2 solution 2
obtained replacing variables 1 corresponding variables, thereby
completely bypassing QE process computational bottleneck SPS. one-toone mapping exists 1 2 logically equivalent. However, equivalence checking
logical expressions NP-hard (Dershowitz & Jouannaud, 1990; Goldberg & Novikov,
2003). Thus, equivalence checking cannot used determine similarity eciently.
Problem features. Let quantier free expression expressed
prenex form, i.e.,
(v1 , ...vm ) Q(xn , ...x1 ) (v1 , ...vm , x1 , ...xn )
variable xi appears Q Q contains redundant variables.
quantier block qb Q maximal contiguous subsequence Q every variable
qb quantier type. quantier blocks ordered sequence
appearance Q; qb1 qb2 qb1 equal appears qb2 Q. quantied
398

fiExecuting Perceptions Actions Diagrammatic Reasoning



...
P1

V

P2

P3

V

P4



P6

P5
Figure 13: Parse tree matrix problem conjunctive normal form.

variable xi appears quantier block qb(xi ), ordering quantier blocks imposes partial order quantied variables. variables
quantier block unordered.
Let 1 Q1 1 2 Q2 2 1 2 parse trees 1 2 respectively. example, matrix problem conjunctive normal form might look like:
P1 (P2 P3 ) (P4 P5 P6 ) ...
Pi predicate. subproblem, Pi base predicate. parse
tree sentence shown Figure 13.
Two trees, 1 2 , isomorphic exists bijection : 1 2 preserves adjacency root vertex, i.e., (u) adjacent (w) u adjacent w,
(root(1 )) = root(2 ). follows two isomorphic trees maximum height
number vertices height. Let l maximum height
number vertices height i. function , dened

(< 1 , ... >) =






i1

integer, <> denotes sequence, ith smallest prime number,
maps sequence integers unique integer. problem , tuple ()
constructed follows:

399

fiBanerjee & Chandrasekaran

() =

< l,
(# vertices dierent heights parse tree),
# quantier blocks,
order quantier blocks,
(# variables dierent quantier blocks) >

Definition 11. Structural Equivalence. Two spatial problems (quantified expressions),
1 2 , structurally equivalent satisfy following conditions:
1. (1 ) = (2 )
2. 1 2 isomorphic other, 1 2 parse trees matrices
1 2 respectively.
3. contents (predicate boolean operator {, , }) pair corresponding nodes
1 2 identical.
4. exists one-to-one correspondence variables arguments
predicates contained pair corresponding nodes 1 2 . Moreover, two
mappings obtained two pairs corresponding nodes 1 2 contradict
other.
see section 4, structural equivalence two problems computed
time linear size parse trees. Note two problems structurally
equivalent, logically equivalent vice versa. example, expressions (P P ) Q Q, P Q base predicates, logically equivalent,
structurally equivalent since parse trees isomorphic. general, logical
equivalence imply structural equivalence redundancies (redundant
variables and/or predicates) one problems. sake computational eciency, use structural equivalence determine similarity two problems.
Theorem 3. subproblems obtained decomposing problem always similar.
Proof. Let us assume, contradiction, exists problem decomposes
subproblems two them, j k , dissimilar. Without loss generality,
assume subproblems except k similar j . Then,

n

(ni11=1 ni22=1 ... ipp=1 Qi1 i2 ...ip i1 i2 ...ip ) Qk k , {, },
j {i1 i2 ...ip |0 i1 n1 , 0 i2 n2 , ...0 ip np },
Qj {Qi1 i2 ...ip |0 i1 n1 , 0 i2 n2 , ...0 ip np }
n

ni11=1 ni22=1 ... ipp=1 (Qi1 i2 ...ip Qk )(i1 i2 ...ip k )
ni11=1 ni22=1 ... ipp=1 Qi1 i2 ...ip i1 i2 ...ip
n

Thus, subproblems similar contradicts assumption. Hence proof
follows.
Intuitively, proposed framework, curve represented arbitrary number vertices, line segment always represented two end points. Similarly,
400

fiExecuting Perceptions Actions Diagrammatic Reasoning

periphery region represented arbitrary number vertices, periphery
triangular region always represented three vertices. Hence, two line segments
triangular regions always represented similarly dier coordinates
constituent vertices, unlike two curves regions. base predicates dened terms
base objects points, line segments, triangular regions. Thus, predicate
dened conjunctions disjunctions base predicates, base predicates always
similar. Decomposition problem subproblems merely replaces one
predicates similar base predicates. Hence, subproblems similar.
3.4 Memory Organization
Memory SPS hierarchically organized stores problems disjoint classes based
progressively problems features (see Figure 14). decomposing problem
subproblems computing , subproblems value ,
SPS checks whether parse trees isomorphic mapping exists
variables. Since memory hierarchy constant height, insertion problem
searching potential class similar problems executed constant time. Also,
features classify problems discriminative enough create large number
classes (leaf nodes), class containing problems, thereby reducing search
problems belonging class.

4. Computational Complexity
analyze time complexity algorithms used framework.
implementation, problem data structure consisting two elds P arseT ree
Solution. P arseT ree stores lexicographically sorted parse tree matrix
Solution stores symbolic solution concise form. parse tree
constructed time O(t) number base predicates boolean
operators {, , } . boolean operators occupy non-leaf nodes parse tree
base predicates occupy leaf nodes. Lexicographically sorting tree requires
lexicographically sorting contents children non-leaf node tree. Let
number boolean operators ti number children ith boolean


operator. Thus,
ti = 1. Note since base predicate always followed
i1

boolean operator, = constant. Lexicographically sorting list
contents children node requires O(ti logti ) time. Thus, total time required


repeating process non-leaf nodes
O(ti logti ). Since average number
i1



children per node

i1



tree



i1

1





O(

ti =

t1
, total time required lexicographically sort


t1
t1
log ) = O(t).



401

fiBanerjee & Chandrasekaran

l
l1

...

lk

[ (# vertices different

[ (# vertices different

levels parse tree)

levels parse tree)



1

...

Dm

#(qb)

q1

...

#(qb)

qr

...

order qbs

o1

...

...

order qbs

os

...

[ (# variables

[ (# variables

different qb's)

different qb's)

E

1

...

Et

...

Problems

Problems

Figure 14: Hierarchical problem classication memory. height hierarchy,
branches correspond dierent values features captured .
example, l1 lk correspond k dierent maximum heights
parse trees matrices spatial problems.

Given two problems 1 , 2 , algorithm Similar(1 , 2 ) computes whether 1
2 similar (see Figure 15). Since computing requires O(t) time,
line 1 requires O(t) time. Since checking whether two trees isomorphic requires
O(t) time (as shown Aho, Hopcroft, & Ullman, 1974), line 6 requires O(t) time. Lines 9
11 requires O(t) time. Thus, algorithm runs O(t) time.
Given unsolved problem similar solved problem similar , algorithm
ComputeSolutionF romSimilarP roblem(, similar ) computes solution variable mapping similar (see Figure 16). V ariableM ap list entry
pair < v, vsimilar >, v free variable vsimilar corresponding free
variable similar . Let size V ariableM ap k . lines 5 11 requires
O(tk ) time since number nodes similar number arguments
predicate small. Lines 12 13 requires O(k ) time size
solution similar . Thus, algorithm runs O(tk + k ) time.
Finally, given unsolved problem memory emory stores problems hierarchically (as described section 3.4), algorithm EliminateQuantif iers(, emory)
computes solution variable mapping similar problem emory,
problem exists; otherwise solves using problem classier combination constraint
402

fiExecuting Perceptions Actions Diagrammatic Reasoning

Similar(1 , 2 )
1. (1 ) = (2 ),
2.
return F alse
3. else
4.
1 1 .P arseT ree
5.
2 2 .P arseT ree
6.
Isomorphic(1 , 2 ) = F alse,
7.
return F alse
8.
else
9.
node 1
10.
predicate boolean operator corresponding node 2
match,
11.
return F alse
12. return rue

Figure 15: Algorithm deciding whether two problems 1 , 2 similar
computing structural equivalence. problem quantied expression.

ComputeSolutionF romSimilarP roblem(, similar )
1. .P arseT ree
2. similar similar .P arseT ree
3. similar similar .Solution
4. similar
5. node similar
6.
node contains predicate (say P ),
7.
j 1 # arguments P
8.
v variable occupying j th argument P
9.
vsimilar variable occupying j th argument P similar
10.
V ariableM ap.Contains(v) = F alse,
11.
V ariableM ap.Add(< v, vsimilar >)
12. 1 |V ariableM ap|
13.
Replace occurrences V ariableM ap[i, 2] V ariableM ap[i, 1]
14. return

Figure 16: Algorithm computing solution problem mapping variables
similar problem similar . problem quantied expression
solution equivalent quantier-free expression.

solvers QE algorithms (as described section 3). algorithm shown Figure
17.
403

fiBanerjee & Chandrasekaran

Let n subproblems problem. problem, predicates already base predicates rest written conjunctions/disjunctions
base predicates thereby leading decomposition problem subproblems.
example, section 1.1, problem RiskyP ortionsof P ath(q, c1 , c2 , d) dened terms
base predicate DistanceLessT han(p, q, d) (i.e., Distance(p, q) d) nonbase predicates On(q, c1 ) On(p, c2 ). non-base predicates written
disjunctions base predicates, as, On(q, {c1 [i], c1 [i + 1]}) On(q, {c2 [j], c2 [j +
1]}), respectively, thereby leading decomposition RiskyP ortionsof P ath subproblems. subproblems inherits base predicates problem (e.g.,
DistanceLessT han(p, q, d)) includes new base predicates (e.g., On(q, {c1 [i], c1 [i+
1]}), On(q, {c2 [j], c2 [j + 1]})) obtained non-base predicates. Let number
polynomials base predicates problem number polynomials due
newly obtained base predicates subproblem. Since subproblems similar,
+ polynomials. total number polynomials problem
O( + n).
Let maximum degree polynomial subproblem. Since subproblems
similar, maximum degree d. maximum degree polynomials
problem objects represented piecewise-linearly, case 2.
objects represented piecewise-linearly, degree much larger
two might lead situation problem might solvable reasonable
time.
Let k number quantied variables problem. subproblem
k quantied variables. Let computational complexity using general QE
algorithm solving problem (n) solving subproblem (1),
k1
doubly exponential function, as, using CAD, (n) = (sd)O(1) . Note
(n) nT (1), i.e., ecient solve subproblem using general QE
algorithm solve whole problem using algorithm.
algorithm EliminateQuantif iers(, emory), lines 4 7 require O(n) time.
Lines 8 9 require O(t) time each. Since line 13 requires O(t) time, lines 11
16 require O(mt) time. Line 18 requires time (1) lines 20 23 require
O((n1)(tk +k )) time. Thus, entire algorithm runs O(T (1)+mt+(n1)(tk +k ))
time. Note size symbolic solution, symbolic solution
expressed concisely, small. Since number boolean operators
order number base predicates base predicate dened terms
least one polynomial, = O(s) = O( + n). Thus, complexity algorithm
O(T (1) + (m + (n 1)k )s + (n 1)k ). seen
nT (1) > (1) + (m + (n 1)k )s + (n 1)k
or,

(( + )d)O(1)

k1


> ( n1
+ k )( + n) + k

true provided large. is, ecient solve problem variable
mapping solve subproblem using general QE algorithm provided size
stored symbolic solution large. every decomposable problem, complexity
QE reduced above.
404

fiExecuting Perceptions Actions Diagrammatic Reasoning

EliminateQuantif iers(, emory)
1. .Solution
2. Decompose subproblems Qi , 1 n
p

np
n1
n2

nk
i1 =1 i2 =1 ... ip =1 Qi , n =
k1

3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21.
22.
23.

i1
k p 1
j 1 nk
ith operator ( ) decomposed right left
ii+1
Construct parse tree matrix 1
Compute ()
f lag 0
j 1
emory,j j th problem emory
Similar(M emory,j , 1 ) = rue,
similar emory,j
f lag 1
break loop
f lag = 0,
1 .Solution ComputeSolutionF romQEAlgorithms(1 )
similar 1
(2 f lag + 2)\3 n
.Solution ComputeSolutionF romSimilarP roblem(i , similar )
.Solution .Solution .Solution
return .Solution

Figure 17: Algorithm computing solution spatial problem taking help
previously solved similar problems emory, thereby bypassing quantier
elimination whenever possible. problem quantied expression
solution equivalent quantier-free expression.

problem encountered SPS rst time, solved decomposing subproblems, solving rst subproblem using general QE algorithm
obtaining solution rest subproblems mapping variables
rst subproblem. Since subproblem solution stored memory, similar
subproblem encountered future, SPS bypasses QE algorithm completely
solves variable mapping. case, line 18 algorithm never executed,
time complexity solving problem
(m + nk )s + nk

405

fiBanerjee & Chandrasekaran

considerable savings compared complexity solving entire problem
k1
using general QE algorithm (e.g., complexity CAD (sd)O(1) ), provided
large. SPS solves problems, probability encounter similar problem
memory increases thereby leading scenario incurs complexity low
order polynomial compared doubly exponential.3
Example. illustrate problem solving process, let us consider spatial problem BehindCurve(q, c, p) (described section 2.3). point p (px , py ) curve
c {p1 , p2 , ...pn } pi (xi , yi ) point, decomposition problem occurs
follows:

BehindCurve(q, c, p)
Intersect(c, {p, q})
a, On(a, c) On(a, {p, q})
a, (n1
i=1 On(a, {pi , pi+1 })) On(a, {p, q})
n1
i=1 (a, On(a, {pi , pi+1 }) On(a, {p, q}))

n1
i=1 (Qi )

n1
i=1
Thus (n 1) subproblems ,
On(a, {pi , pi+1 }) On(a, {p, q})
Qi
a, On(a, {pi , pi+1 }) On(a, {p, q})
Figure 18, (i ) =< 2, 21 33 , 1, < >, 21 > = 1, 2, ...n 1. theorem 3,
similar since subproblems problem. SPS
3. noted approximating continuous curve sequence line segments drawbacks. example, point p continuous curve c might piecewise-linear
approximation c. SPS accept parameter specifies maximum length line
segment used approximation. current implementation, leave onus determining maximum length problem solver. context, deserves mention loss
information inevitable almost kind approximation. example, space
diagram approximated finite number pixels, shown Banerjee Chandrasekaran (2010),
diagrammatic objects lose certain spatial information might detrimental spatial problem
solving avoided knowing minimum allowable resolution (or maximum length one
side square pixel).

406

fiExecuting Perceptions Actions Diagrammatic Reasoning



On(a,{p1,p2})

On(a,{p,q})

Figure 18: Parse tree matrix rst subproblem BehindCurve problem.

nd problem memory similar rst subproblem 1 , sent problem
classier sends appropriate QE algorithm. problem denition, tuple
, parse tree, solution stored memory follows:
1 (q, {p1 , p2 }, p) a, On(a, {p1 , p2 }) On(a, {p, q})
1 ((x, y), {(x1 , y1 ), (x2 , y2 )}, (px , py ))
(px x < 0 px x1 0 x1 x 0 py x1 py x + px x1 px y1 + xy1 = 0) (x px <
0 x1 px 0 x x1 0 py x1 py x + px x1 px y1 + xy1 = 0) ...
arguments 1 free variables. subproblems solved
replacing variables 1 mapped variables. problem similar 1 found
memory, 1 solved replacing mapped variables,
subproblems.
Note that, example, BehindCurve problem, absence appropriate
vocabulary properties/relations, would specied (see redlog Weispfenning, 2001):
BehindCurve((x, y), {(p1,x , p1,y ), (p2,x , p2,y ), ...(pn,x , pn,y )}, (px , py ))
ax , ay , t, 0 1 px + t(x px ) = ax py + t(y py ) = ay n1
i1 (ti , 0 ti
1 pi,x + ti (pi+1,x pi,x ) = ax py + ti (pi+1,y pi,y ) = ay )
total number quantiers n + 3, dependent number line segments
forming curve huge complicated curves many real-world applications. SPS, due appropriate decomposition problems subproblems,
number quantiers subproblem always xed (4 case) irrespective
spatial complexity object(s) (curve case). symbolic solutions
simple subproblems stored future use possible systems redlog. Needless say, though solving problem using systems produce
solution, much faster.
407

fiBanerjee & Chandrasekaran

5. Applications
section, illustrate SPS deployed conjunction problem
solver, human articial (such as, soar), solving spatial problems without human intervention needed DR. Two applications considered entity re-identication
ambush analysis deemed important military domain. subproblems SPS autonomously decomposes spatial problem shown.
Problems military domain involve wide variety objects arbitrary properties
relations, hence, help illustrate expressiveness specication language
eciency generality SPS.
implementation, used bisoar, due Kurup Chandrasekaran (2007),
bimodal version soar (Laird et al., 1987), problem solver uses two kinds operators predicate-symbolic operators applied information predicate-symbolic
form perception-like operators applied diagram bring state
transitions reach goal state initial state. human responsible providing
broad problem solving strategy class problems; given specic problem
class, bisoar uses predicate-symbolic perception-like operators accordingly.
Since used bisoar number dierent domains (e.g., military, Euclidean geometry, physics, civil engineering; Banerjee & Chandrasekaran, 2007 provide examples)
still continue so, knows several dierent problem solving strategies operators, predicate-symbolic perception-like. emphasis section
eciently bisoar solves problems eciently perception-like operators
executed without incorporating knowledge jeopardizes generality
general-purpose problem solver. spatial problem, compare performance
proposed SPS CAD algorithm terms actual computation time
determined taking average least 10 runs. see, SPS excels
signicant margin cases.
5.1 Entity Re-identification
entity re-identication problem core task US Armys All-Source Analysis
System (ASAS). ASAS receives new report sighting entity T3 type (e.g.
tanks). task decide new sighting entities
database earlier sightings, entirely new entity. Reasoning dynamically
integrate information dierent sources database sightings, mobility vehicles,
sensor reports, terrain map information make decision. follow novel
capability using failure expectation: H true, observed,
since not, H likely case, H hypotheses observations
respectively (Josephson & Josephson, 1996; Chandrasekaran et al., 2004). following,
consider simple version problem illustrate task solved using DR
spatial problems involved therein.
Figure 19(a) shows terrain interest mountainous closed regions marking
impassable areas entities type (e.g., tanks). Let T3 entity newly sighted
time t3 located point p3 T1 , T2 two entities located points p1 ,
p2 last sighted times t1 , t2 respectively. T1 T2 retrieved database
potential T3 based partial identity information. Also,
408

fiExecuting Perceptions Actions Diagrammatic Reasoning

T2

T1

T3

(a) Terrain, impassable regions, sighted tanks.

(c) short path T1 T3 .

(b) short path T2 T3 .

(d) path plausible homotopy
class.

Figure 19: Reasoning steps entity re-identication
area interest, three enemy regions obstacles {r1 , r2 , r3 } (as shown Figure
19(a)) given repower/sight range enemy. Reasoning proceeds follows.
T1 reach p3 within time t3 t1 , T3 might T1 . Similarly T2 . Since
mountainous region (or obstacle) hiding place enemies repower range d,
existence entity shows probably traverse territory
within repower range. Further, might sensor elds report database
sense entities. entity sensed sensor eld times t1
t3 , T1 could followed path passed sensor eld.
constraints taken account reasoning. information might
available database once. follows simple scenario discussion
spatial problems occur.
problem solver (e.g., commander) wants know whether exists contiguous
safe region containing points p1 p3 . species problem Saf eRegion follows:
Saf eRegion(q, {r1 , r2 , ...rn }, d)

409

fiBanerjee & Chandrasekaran

a, (ni1 Inside(a, ri )) Distance(q, a)
# (ri )


a, (ni1 j1

# (ri )


a, (ni1 j1

Inside(a, (ri )[j])) Distance(q, a)

Inside(a, (ri )[j])) Distance(q, a)

# (ri )

a, Inside(a, (ri )[j]) Distance(q, a)

# (ri )

a, Inside(a, (ri )[j]) Distance(q, a)

# (ri )

Saf eRegion (q, {(ri )[j]}, d)


ni1 j1

ni1 j1

ni1 j1

q (x, y). Decomposition problem SPS shown above. subproblem symbolically solved solution stored memory along subproblem
specication. order compare actual times required solve problem, constructed simple diagram consisting four polygonal regions depicting obstacles (see
Figure 20(a)). four regions
r1 {(10, 10), (30, 10), (30, 30), (10, 30)},
r2 {(20, 0), (0, 0), (10, 20)},
r3 {(0, 20), (10, 40), (10, 40)},
r4 {(50, 20), (70, 20), (80, 40), (60, 50), (40, 40)},
2. Triangulation regions produced seven triangles. subproblem
symbolically solved stored, solving problem required 0.25 seconds solving
using CAD algorithm required 5.5 seconds.
diagram shaded safe region input Recognize function computes vertices boundaries shaded region, shown Figure 20(b). Next
problem solver wants know whether exists path points p1 p3 safely
avoiding obstacles enemy repower range, whether path traversed
time t3 t1 . Let v velocity sighted entity piece symbolic knowledge
available database. Then, maximum length path traversable given
time L = v (t3 t1 ). Let l L rational number. Then, problem path
existence two points path lies inside region r less
given length l specied as:
P athExists(s, t, r, l)
q, Inside(q, r) Distance(s, q) + Distance(q, t) l
# (r)


q, (i1
Inside(q, (r)[i])) Distance(s, q) + Distance(q, t) l

410

fiExecuting Perceptions Actions Diagrammatic Reasoning

r3

r3

r4

r4

r1

r1

r2

r2



(a) unshaded polygons obstacles.
shaded region safe region, computed
SPS.

(b) points shown vertices boundaries safe region computed
Recognize function.





r3

r3

r4

r1

r2

r4

r1

r2







(c) Paths lying safe region less
given length two points, computed
SPS.

(d) Paths lying safe region less
given length two points, computed
CAD algorithm.

Figure 20: simplied scenario illustrate performance proposed SPS compared CAD algorithm entity re-identication.

# (r)


i1
q, Inside(q, (r)[i]) Distance(s, q) + Distance(q, t) l

# (r)


i1
P athExists (s, t, (r)[i], l)

411

fiBanerjee & Chandrasekaran

Decomposition problem SPS shown above. subproblem symbolically
solved stored. Again, resort simple diagram Figure 20 compare actual
computation times P athExists(s, t, r, l) problem, (0, 45), (20, 5),
r Recognize(Saf eRegion((x, y), {r1 , r2 , ...rn }, 2)), dierent sets regions ri
dierent values l. Triangulation r produced 8, 7, 7, 9 24 triangles {r1 }, {r2 },
{r3 }, {r4 } {r1 , r2 , r3 , r4 } respectively. subproblem symbolically solved
stored, computation times required solving problem using proposed SPS
signicantly less using CAD algorithm (see Table 1).

Table 1: Comparison computation times (in seconds) CAD algorithm
proposed SPS P athExists(s, t, r, l) problem, (0, 45),
(20, 5), r Recognize(Saf eRegion((x, y), {r1 , r2 , ...rn }, 2)). 2.8 GHz PC
4 GB RAM, 5356 MB virtual memory 32-bit operating system used.
implementation done athematica. Below, res refers result,
refers rue, F refers F alse, OOM refers memory.

l
100
500
1000
1009
1010
2000
4000
8000
16000

{r1 }
CAD,SPS,res
2.78, 0.41, F
2.77, 0.42, F
2.66, 0.39, F
2.28, 0.42,
2.28, 0.41,
1.88, 0.39,
1.88, 0.34,
1.88, 0.33,
1.88, 0.33,

{r2 }
CAD,SPS,res
498.22, 0.53, F
482.77, 0.44, F
118.97, 0.55,
119.28, 0.52,
120.06, 0.53,
120.38, 0.42,
120.73, 0.39,
121.58, 0.34,
121.45, 0.34,

{r3 }
CAD,SPS,res
470.74, 0.5, F
476.97, 0.5, F
135.03, 0.49,
134.75, 0.5,
135.02, 0.52,
135.3, 0.38,
135.08, 0.34,
135.03, 0.33,
135.13, 0.36,

{r4 }
CAD,SPS,res
OOM, 0.47, F
OOM, 0.48, F
OOM, 0.49,
OOM, 0.52,
OOM, 0.47,
OOM, 0.44,
OOM, 0.31,
OOM, 0.39,
OOM, 0.36,

{r1 , r2 , r3 , r4 }
CAD,SPS,res
OOM, 1.42, F
OOM, 1.42, F
OOM, 1.42, F
OOM, 1.42, F
OOM, 1.41,
OOM, 1.19,
OOM, 1.0,
OOM, 0.98,
OOM, 0.92,

general, P athExists(s, t, r, l) problem specied as:
P athExists(s, t, r, l)
q1 , q2 , ...qn , (a, On(a, {s, q1 , q2 , ...qn , t}) Inside(a, r)) Length({s, q1 , q2 , ...qn , t}) l
q1 , q2 , ...qn , (a, On(a, c) Inside(a, r)) Length(c) l
q1 , q2 , ...qn , (a, On(a, c) Inside(a, r)) Length(c) l
# (r)


q1 , q2 , ...qn , (a, On(a, c) (k1
Inside(a, (r)[k]))) Length(c) l

# (r)


q1 , q2 , ...qn , (a, On(a, c) (k1
Inside(a, (r)[k]))) Length(c) l

412

fiExecuting Perceptions Actions Diagrammatic Reasoning

# (r)


k1
q1 , q2 , ...qn , (a, On(a, c) Inside(a, (r)[k])) Length(c) l

# (r)


k1
P athExists (s, t, (r)[k], l)

c {s, q1 , q2 , ...qn , t} r Br. Note even though c curve, On(a, c)
cannot decomposed since c free variable (see denition Decomposition
section 3.2). Also, note problem contains form F 2 discussed heorem
1, r used.
exists path points p1 p3 safely avoiding obstacles enemy
repower range traversed time t3 t1 , problem solver wants
compute path(s). problem specied as:
F indP ath(q, s, t, r, l)
Inside(q, r) Distance(s, q) + Distance(q, t) l
# (r)


(i1
Inside(q, (r)[i])) Distance(s, q) + Distance(q, t) l

# (r)


i1
Inside(q, (r)[i]) Distance(s, q) + Distance(q, t) l

# (r)


i1
F indP ath (q, s, t, (r)[i], l)

q (x, y). Since quantiers, solving problem decomposition
variable mapping achieve reduction computation time anysignicant amount.
region consisting paths satisfy constraints (l 1010) shown
Figure 20(c). quality solution depends Recognize function. example,
solution shown Figure 20(d) accurate Figure 20(c) Recognize
function failed determine vertices safe region accurately. alternate denition
semi-linear motion planning problem found Weispfenning (2001),
semi-linear path consists n translations along straight lines parallel
one given k vectors.
results, problem solver infers T3 might T1 . Next repeats
entities T3 T2 , nds exists path points p2 p3
safely avoiding obstacles enemy repower range traversed
time t3 t2 . T3 might T2 well. sensor database informs two
sensor elds SENSOR1, SENSOR2 area interest report
passing vehicle. Problem solver wants verify whether paths passes
sensor elds. species problem Intersect(r1 , r2 ) compute
intersection two regions r1 r2 .
IntersectRegions(r1 , r2 )
q, Inside(q, r1 ) Inside(q, r2 )
# (r1 )


q, (i1

# (r2 )


Inside(q, (r1 )[i])) (i1

Inside(q, (r2 )[j]))

413

fiBanerjee & Chandrasekaran

# (r1 )


i1

# (r2 )


j1

IntersectRegions ((r1 )[i], (r2 )[j])


computes

problem
IntersectRegions(paths13 , s1 ) paths13 Recognize(F indP ath(q, p1 , p3 , r, l))
s1 region covered SENSOR1. scenario Figure 19(c), solution rue.
Next problem solver wants know whether exists path points p1
p3 safely avoiding obstacles enemy repower range traversed
time t3 t1 . computes P athExists(p1 , p3 , r13 , l), r13 Recognize(paths13 s1 ),
returns rue. inference follows T3 might T2 . reasoning
repeated T3 T2 ; Intersect(paths23 , s2 ) returns rue P athExists(p2 , p3 , r23 , l)
returns F alse (see Figure 19(b)). inference follows T3 cannot T1 . Hence,
problem solver identies T3 T2 .
entity reidentication problem could solved computing shortest paths pairs p1 , p3 p2 , p3 avoiding sensors checking whether
lengths satisfy time constraints. requires computing shortest path two points p1 p3 safely avoiding obstacles enemy repower range (i.e.,
lying entirely within safe region r). Since path loop
share intermediate vertices, any, vertices r, path
#(r) intermediate vertices. Let r {p1 , p3 }, #(S), c {q1 , q2 , ...qm }
shortest path, q1 p1 , qm p3 , qi r (2 1). Then, problem
computing shortest path specied
F indShortestP ath(r, c)
inimize(Length(c), {c[2], c[3], ...c[m 1]}, CurveInsideRegion(c, r))
CurveInsideRegion(c, r) constraint specied decomposed
follows.
CurveInsideRegion(c, r)
a, On(a, c) Inside(a, r)
a, On(a, c) Inside(a, r)
a, On(a, c) Inside(a, r)
#(c)1

a, (i1

# (r)

a, On(a, {c[i], c[i + 1]}) Inside(a, (r)[j])

# (r)

CurveInsideRegion ({c[i], c[i + 1]}, (r)[j])

#(c)1


j1

#(c)1


j1

i1
i1

# (r)


On(a, {c[i], c[i + 1]})) (j1
Inside(a, (r)[j])))

414

fiExecuting Perceptions Actions Diagrammatic Reasoning

r Br. Since problem form F 2, r used. subproblem symbolically solved stored, solving problem CurveInsideRegion(c, r),

c {(0, 45), (14, 42), (35, 42), (15, 35), (34, 32), (36, 19), (47, 15), (87, 15), (30, 7), (20, 5)},
r Recognize(Saf eRegion((x, y), {r1 , r2 , r3 , r4 }, 2)),
SPS required 3.11 seconds solving using CAD algorithm required 175.01 seconds (see Figure 21(a)). shortest path obtained solving
F indShortestP ath(r, c) problem shown Figure 21(b).

(a) path c two points lying inside
shaded region r.

(b) Shortest path two points computed
F indShortestP ath(r, c) problem.

Figure 21: Paths two points lying inside safe (shaded) region.

5.2 Ambush Analysis
two main factors range repower sight determine area covered
military unit. Presence terrain features, as, mountains, limit factors
allow units hide opponents. hidden units enjoy advantage
concealing resources intentions opponents attack
opponents catching unawares traveling along path within
sight repower range hidden units, thereby ambushing them. Thus,
utmost importance military unit priori determine areas portions
path prone ambush traversing them. already described section 1.1
problem solver (e.g., army commander) reasons using diagrams gure safest
path transport troops one base camp another given time. section,
given curve region hiding place repower sight ranges, show
415

fiBanerjee & Chandrasekaran

regions portions path prone ambush eciently computed proposed
SPS.
Given curve c repower sight range d, spatial problem
RiskyRegion(q, c, d) dened set points covered range c. Thus,
problem specication is:
RiskyRegion(q, c, d)
a, On(a, c) Distance(a, q)
#(c)1

a, (i1

On(a, {c[i], c[i + 1]})) Distance(a, q)

#(c)1

a, On(a, {c[i], c[i + 1]}) Distance(a, q)

#(c)1

RiskyRegion (q, {c[i], c[i + 1]}, d)

i1
i1

q (x, y). order compare actual computation times required solve
problem, constructed simple diagram consisting two curves, path mntn,

path {(25, 10), (5, 10), (3, 15), (7, 17), (2, 18), (2, 18), (7, 15),
(3, 12), (5, 10), (40, 10)}
mntn {(5, 5), (7, 2), (9, 9), (6, 12), (0, 4), (2, 3), (15, 5), (25, 12), (30, 20)}
solution problem RiskyRegion(q, mntn, d) shaded region shown Figure
22(a) mntn obstacle hiding (e.g., mountain range) 15. problem
RiskyRegion(q, r, d) region r specied replacing predicate On(p, c)
Inside(p, r).
Again, given curve c1 path, curve c2 hiding, repower range d,
problem RiskyP ortionsof P ath(q, c1 , c2 , d) dened parts c1 covered range
c2 . Thus,
RiskyP ortionsof P ath(q, c1 , c2 , d)
On(q, c1 ) p, On(p, c2 ) Distance(p, q)
#(c )1

p, (i11

#(c )1

j12

#(c )1

j12

i11
i11

#(c )1

On(q, {c1 [i], c1 [i+1]}))(j12

#(c )1

#(c )1

On(p, {c2 [j], c2 [j +1]}))Distance(p, q)

p, On(q, {c1 [i], c1 [i+1]}))On(p, {c2 [j], c2 [j +1]})Distance(p, q)
RiskyP ortionsof P ath (q, {c1 [i], c1 [i + 1]}, {c2 [j], c2 [j + 1]}, d)

416

fiExecuting Perceptions Actions Diagrammatic Reasoning

(a) shaded region, computed
problem RiskyRegion(q, mntn, 15), risky
region prone ambush due enemies hiding
mntn. portions path inside risky region risky portions path.

(b) bold parts path, computed
problem RiskyP ortionsof P ath(q, path,
mntn, 15), risky portions path.
shaded region, computed problem BehindCurvewrtRiskyP ath(q, mntn, path),
enemies could hiding troops traveling path.

(c) Troops traveling rskyprtn1 , risky portion (in bold) path, careful
ambushed enemies hiding shaded region rskyprtn1 within firepower range
region, computed problem
BehindCurvewrtRiskyP athDistance(q, mntn,
rskyprtn1 , 20).

(d) Troops traveling rskyprtn2 , risky portion (in bold) path, careful
ambushed enemies hiding shaded region rskyprtn2 within firepower range
region, computed problem
BehindCurvewrtRiskyP athDistance(q, mntn,
rskyprtn2 , 20).

Figure 22: simplied scenario illustrate performance proposed SPS ambush analysis.

417

fiBanerjee & Chandrasekaran

q (x, y). Alternatively, problem specied
RiskyP ortionsof P ath(q, c1 , r2 , d)
On(q, c1 ) Inside(q, r2 )
#(c )1

(i11

# (r2 )


On(q, {c1 [i], c1 [i + 1]})) (j1

# (r2 )

On(q, {c1 [i], c1 [i + 1]}) Inside(q, (r2 )[j])

# (r2 )

RiskyP ortionsof P ath (q, {c1 [i], c1 [i + 1]}, (r2 )[j], d)

#(c )1


j1

#(c )1


j1

i11

i11

Inside(q, (r2 )[j]))

r2 Recognize(RiskyRegion((x, y), c2 , d)) q (x, y).
solution
problem RiskyP ortionsof P ath(q, path, mntn, d), 15, parts
path inside shaded region shown Figure 22(a). Figure 22(b) shows
risky portions path rskyprtn1 , rskyprtn2 bold obtained
Recognize(RiskyP ortionsof P ath(q, c1 , c2 , d)).
rskyprtn1 {(16, 10), (5, 10), (3.7, 12.6)}
rskyprtn2 {(3, 12), (5, 10), (16.1, 10)}
Note latter specication free quantiers former not. However,
solution computed latter specication might less accuracy
former due use Recognize function. hiding place region r
instead curve c2 , problem RiskyP ortionsof P ath(q, c1 , r, d) specied
replacing predicate On(p, c2 ) Inside(p, r). portions path marked Figure
2(c) computed specication.
region behind c2 enemies might hiding set points
behind c2 respect point risky portions curve c1 . Thus, c risky
portion path,
BehindCurvewrtRiskyP ath(q, c2 , c)
a, On(a, c) BehindCurve(q, c2 , a)
a, On(a, c) Intersect(c2 , {a, q})
a, On(a, c) (b, On(b, c2 ) On(b, {a, q}))
#(c)1

a, b, (i1
#(c)1

i1

#(c )1

j12

#(c )1

On(a, {c[i], c[i + 1]})) (j12

On(b, {c2 [j], c2 [j + 1]})) On(b, {a, q})

(a, b, On(a, {c[i], c[i + 1]}) On(b, {c2 [j], c2 [j + 1]}) On(b, {a, q}))

418

fiExecuting Perceptions Actions Diagrammatic Reasoning

#(c)1

i1

#(c )1

j12

BehindCurvewrtRiskyP ath (q, {c2 [j], c2 [j + 1]}, {c[i], c[i + 1]})


q (x, y). solution problem BehindCurvewrtRiskyP ath(q, mntn, rskyprtn1 )
BehindCurvewrtRiskyP ath(q, mntn, rskyprtn2 ) shaded region shown Figure 22(b). hiding place region r instead curve c2 , problem
BehindCurvewrtRiskyP ath(q, r, c) specied replacing predicate On(p, c2 )
Inside(p, r).
However, enemies might hiding anywhere behind mountain within
distance ambush friendly units. Hence, reasonable problem commander friendly side compute would
BehindCurvewrtRiskyP athDistance(q, c2 , c, d) distance
enemies ambush them. problem specied as:
BehindCurvewrtRiskyP athDistance(q, c2 , c, d)
a, On(a, c) BehindCurve(q, c2 , a) Distance(a, q)
a, On(a, c) Intersect(c2 , {a, q}) Distance(a, q)
a, On(a, c) (b, On(b, c2 ) On(b, {a, q})) Distance(a, q)
#(c)1

#(c )1

a, b, (i1 On(a, {c[i], c[i + 1]})) (j12
Distance(a, q)
#(c)1

On(b, {c2 [j], c2 [j + 1]})) On(b, {a, q})

#(c )1

i1 j12
(a, b, On(a, {c[i], c[i + 1]}) On(b, {c2 [j], c2 [j + 1]}) On(b, {a, q}))
Distance(a, q)
#(c)1

i1
1]}, d)

#(c )1

j12

BehindCurvewrtRiskyP athDistance (q, {c2 [j], c2 [j + 1]}, {c[i], c[i +


q

(x, y).
solutions problems BehindCurvewrtRiskyP athDistance(q, mntn, rskyprtn1 , d)
BehindCurvewrtRiskyP athDistance(q, mntn, rskyprtn2 , d), 20,
shaded regions shown Figure 22(c), 22(d) respectively. hiding place region r
instead curve c2 , problem BehindCurvewrtRiskyP athDistance(q, r, c, d)
specied replacing predicate On(p, c2 ) Inside(p, r). comparison
CAD algorithm proposed SPS actual times required compute problems
relevant ambush analysis discussed shown Table 2.

419

fiBanerjee & Chandrasekaran

Table 2: Comparison computation times (in seconds) CAD algorithm
SPS dierent problems relevant ambush analysis. 2.8 GHz PC
4 GB RAM, 5356 MB virtual memory 32-bit operating system used.
implementation done athematica. following function
problems q (x, y).
P roblem
RiskyRegion(q, mntn, 15)
RiskyP ortionsof P ath(q, path, mntn, 15)
BehindCurve(q, mntn, (5, 10))
BehindCurvewrtRiskyP ath(q, mntn, path)
BehindCurvewrtRiskyP ath(q, mntn, rskyprtn1 )
BehindCurvewrtRiskyP ath(q, mntn, rskyprtn2 )
BehindCurvewrtRiskyP athDistance(q, mntn, rskyprtn1 , 20)
BehindCurvewrtRiskyP athDistance(q, mntn, rskyprtn2 , 20)

SPS
0.11
0.3
0.27
50.2
8.04
10.92
6.16
6.3

CAD
0.11
0.48
0.71
102.88
11.89
17.48
16.08
15.33

6. Discussion
Spatial problem solving area active research since Sutherlands sketchpad
(1963). need access, communicate manipulate spatial information precisely
(much engineers scientists do) using high-level language (much common people
use) one frontiers AI. well-known capabilities
oered rst-order predicate logic that, rst-order logic generally intractable
except limited domains. umbrella Qualitative Spatial Reasoning (QSR),
researchers investigated plethora spatial calculi, prominent
mereotopological calculi (Clarke, 1981; Bennett, 1997), cardinal direction calculus (Frank,
1991, 1992; Skiadopoulos & Koubarakis, 2004), double cross calculus (Freksa, 1992), 4and 9-intersection calculi (Egenhofer, 1991; Egenhofer & Franzosa, 1991), ip-op calculus
(Ligozat, 1993), dipole calculus (Moratz, Renz, & Wolter, 2000; Schlieder, 1995; Dylla &
Moratz, 2005), various region connection calculi (Randell et al., 1992; Bennett, Isli,
& Cohn, 1997; Gerevini & Nebel, 2002; Cohn, Bennett, Gooday, & Gotts, 1997; Duntsch,
Wang, & McCloskey, 1999; Gerevini & Renz, 1998). two main points distinction
QSR approach spatial problem solving reported paper.
1. dierent QSR calculi emphasize dierent aspects space, as, ontological issues, topology, distance, orientation, shape, etc. Depending spatial aspect interest, calculus based minimal set spatial relations.
example, 9-intersection calculus (Egenhofer & Franzosa, 1991)
based nine spatial relations {r0 , r1 , r3 , r6 , r7 , r10 , r11 , r14 , r15 } two spatial regions, double cross calculus (Freksa, 1992) based fteen spatial relations
{lf, lp, lc, ll, lb, sf, sp, sc, sl, sb, rf, rp, rc, rl, rb} among three points, etc. framework
based minimal set spatial relations; based xed set mathematical/logical operators (see section 2.3). spatial relation among points
expressed using real variables xed set operators rst-order logic included
vocabulary. spatial relation involving curves and/or regions expressed
420

fiExecuting Perceptions Actions Diagrammatic Reasoning

rst-order logic using spatial relations among points relations Inside
included vocabulary.
2. spatial problems interest QSR community CSPs involving either
points (e.g., double cross calculus) regions (e.g., 4- 9-intersection calculi, region
connection calculi) closed set properties/relations often limited binary
domain. general-purpose SPS helping human perceive act diagrams
dierent real-world applications need solve QCSPs involving points, curves
regions open-ended vocabulary properties/relations/actions entire
real domain, framework oers. Since QE computational bottleneck
SPS, concentrate eorts real QE algorithms, discussed towards
end section 2.3.
Naturally, question arises convenient human specify spatial
problem QCSP? acknowledge process specifying spatial problem
QCSP eortless explaining another human natural language,
taken rst step making process less strenuous oering vocabulary
predicates open-ended. QCSP-solving systems, as, redlog (Dolzmann
& Sturm, 1999) qepcad (Brown, 2003), oer vocabulary spatial problem
solving makes dicult user specify problem dig deep
ocean equations inequalities cannot communicate naturally terms high-level
predicates.4 still far building systems understand communication
natural language. However, research automatic constraint acquisition examples
already underway. Vu OSullivan (2008) discuss recent advances direction.
use ideas results work, dicult see
ideas conjunction work reported paper able build
convenient ecient spatial problem solving framework.

7. Conclusion
DR requires perceiving specied information diagram modifying/creating objects
diagram specied ways according problem solving needs. number DR systems
built last couple decades, developers ascertained
priori hand-coded required perceptions actions. approach building
DR systems defeats purpose open-ended exploration essence human-like
problem solving. goal, paper, develop general ecient framework
executing perceptions actions relevant reasoning 2D diagrams across
wide variety domains tasks. make two important contributions:
1. observe wide variety visual perceptions/actions DR applications
transformed domain/task-independent spatial problems. observation makes
possible use well-established constraint satisfaction framework spatial problem
solving. developed language specify spatial problems QCSPs
real domain using open-ended vocabulary properties, relations actions involving
three kinds diagrammatic objects points, curves, regions. Solution spatial problem
equivalent simplied quantier-free expression. reduces goal developing
general ecient SPS solving 2D spatial problems without human intervention.
4. fair, redlog qepcad developed solving spatial problems QCSP.

421

fiBanerjee & Chandrasekaran

2. spatial problems specied QCSPs rst-order logic. QE, inherently
doubly exponential problem, computational bottleneck SPS. represented
objects (points, curves, regions) conguration simple elements facilitate decomposition complex problems simpler similar subproblems. showed that,
symbolic solution subproblem expressed concisely, QE achieved
low-order polynomial time storing problems solutions memory
similar problem encountered future, solved mapping solution
similar previously solved problem. SPS grows ecient solves problems.
Even though used CAD algorithm QE compared complexity results
CADs, approach means limited particular algorithm. complexity QE algorithm signicantly improved spatial problem solving
using idea problem decomposition variable mapping, discussed paper.
framework leaves room ecient convenient incorporating future
results least two possible directions learning constraints examples (automatic
constraint acquisition) carefully exploiting rich portfolio QE algorithms solving
new problems.

Acknowledgments
research partially supported participation Advanced Decision Architectures Collaborative Technology Alliance sponsored U.S. Army Research Laboratory
Cooperative Agreement DAAD19-01-2-0009. thank anonymous reviewers
constructive comments.

References
Aho, A. V., Hopcroft, J. E., & Ullman, J. D. (1974). Design Analysis Computer
Algorithms. Addison-Wesley.
Allwein, G., & Barwise, J. (1999). Logical reasoning diagrams. Journal Logic,
Language Information, 8 (3), 387390.
Anderson, J. R. (1993). Rules Mind. Lawrence Erlbaum Associates, Hillsdale, NJ.
Banerjee, B., & Chandrasekaran, B. (2004). Perceptual action routines diagrammatic
reasoning entity re-identication. Proc. 24th Army Science Conf., Orlando, FL.
Banerjee, B., & Chandrasekaran, B. (2007). constraint satisfaction framework visual
problem solving. Benhamou, F., Jussien, N., & OSullivan, B. (Eds.), Trends
Constraint Programming, chap. 26, pp. 383393. ISTE, London.
Banerjee, B., & Chandrasekaran, B. (2010). spatial search framework executing
perceptions actions diagrammatic reasoning. Goel, A. K., Jamnik, M., &
Narayanan, N. H. (Eds.), Diagrammatic Representation Inference, Lecture Notes
AI, Vol. 6170, pp. 144159. Springer, Heidelberg.
Barwise, J., & Etchemendy, J. (1998). computational architecture heterogeneous
reasoning. Gilboa, I. (Ed.), Proc. 7th Conf. Theoretical Aspects Rationality
Knowledge, pp. 127. Morgan Kaufmann.
422

fiExecuting Perceptions Actions Diagrammatic Reasoning

Basu, S., Pollack, R., & Roy, M.-F. (2003). Algorithms real algebraic geometry. SpringerVerlag.
Bennett, B. (1997). Logical Representations Automated Reasoning Spatial Relationships. Ph.D. thesis, School Computer Studies, University Leeds.
Bennett, B., Isli, A., & Cohn, A. G. (1997). composition table provide
complete tractable proof procedure relational constraint language?. Proc.
IJCAI Workshop Spatial Temporal Reasoning, Nagoya, Japan.
Brown, C. W. (2003). QEPCAD B: program computing semi-algebraic sets using
cylindrical algebraic decomposition. ACM SIGSAM Bulletin, 37 (4), 97108.
Brown, C. W., & Davenport, J. H. (2007). complexity quantier elimination
cylindrical algebraic decomposition. Proc. Intl. Symp. Symbolic Algebraic Computation, pp. 5460. ACM, NY.
Chandrasekaran, B., Josephson, J. R., Banerjee, B., Kurup, U., & Winkler, R. (2002).
Diagrammatic reasoning support situation understanding planning. Proc.
23rd Army Science Conf., Orlando, FL.
Chandrasekaran, B., Kurup, U., & Banerjee, B. (2005). diagrammatic reasoning architecture: Design, implementation experiments. Proc. AAAI Spring Symp.,
Reasoning Mental External Diagrams: Computational Modeling Spatial
Assistance, pp. 108113, Stanford University, CA.
Chandrasekaran, B., Kurup, U., Banerjee, B., Josephson, J. R., & Winkler, R. (2004).
architecture problem solving diagrams. Blackwell, A., Marriott, K., &
Shimojima, A. (Eds.), Lecture Notes AI, Vol. 2980, pp. 151165. Springer-Verlag.
Chazelle, B. (1991). Triangulating simple polygon linear time. Discrete Computational Geometry, 6, 485524.
Clarke, B. L. (1981). calculus individuals based connection. Notre Dame Journal
Formal Logic, 22, 204218.
Cohn, A. G., Bennett, B., Gooday, J. M., & Gotts, N. (1997). RCC: calculus region
based qualitative spatial reasoning. GeoInformatica, 1, 275316.
Collins, G. E., & Hong, H. (1991). Partial cylindrical algebraic decomposition quantier
elimination. Journal Symbolic Computation, 12 (3), 299328.
Davenport, J. H., & Heintz, J. (1988). Real quantier elimination doubly exponential.
Journal Symbolic Computation, 5 (1-2), 2935.
Dershowitz, N., & Jouannaud, J. P. (1990). Rewrite systems. Handbook Theoretical
Computer Science, Vol. B, chap. 6, pp. 243320. Elsevier, North Holland: Amsterdam.
Dolzmann, A., & Sturm, T. (1999). REDLOG user manual, edition 2.0 version 2.0.
Tech. rep. MIP-9905, FMI, Universitt Passau, Passau, Germany.
Dolzmann, A., Sturm, T., & Weispfenning, V. (1998). Real quantier elimination practice.
Matzat, B. H., Greuel, G.-M., & Hiss, G. (Eds.), Algorithmic Algebra Number
Theory, pp. 221247. Springer, Berlin.
423

fiBanerjee & Chandrasekaran

Duntsch, I., Wang, H., & McCloskey, S. (1999). Relation algebras qualitative spatial
reasoning. Fundamenta Informaticae, 39 (3), 229249.
Dylla, F., & Moratz, R. (2005). Exploiting qualitative spatial neighborhoods situation
calculus. Freksa, C., Knau, M., Krieg-Brckner, B., Nebel, B., & Barkowsky, T.
(Eds.), Spatial Cognition IV. Reasoning, Action, Interaction, Vol. 3343 Lecture
Notes Computer Science, pp. 304322. Springer.
Egenhofer, M. J. (1991). Reasoning binary topological relations. Gunther, O.,
& Schek, H.-J. (Eds.), Proc. 2nd Symp. Large Spatial Databases, Vol. 525 Lecture
Notes Computer Science, pp. 143160. Springer.
Egenhofer, M. J., & Franzosa, R. D. (1991). Point set topological relations. Intl. Journal
Geographical Information Systems, 5, 161174.
Ferguson, R. W. (1994). MAGI: Analogy-based encoding using symmetry regularity.
Proc. 16th Annual Conf. Cognitive Science Society, pp. 283288, Atlanta, GA.
Ferguson, R. W., & Forbus, K. D. (1998). Telling juxtapositions: Using repetition
alignable dierence diagram understanding. Holyoak, K., Gentner, D., & Kokinov, B. (Eds.), Advances Analogy Research, pp. 109117. Soa, New Bulgarian
University.
Ferguson, R. W., & Forbus, K. D. (2000). GEOREP: exible tool spatial representation
line drawings. Proc. 18th Natl. Conf. AI, pp. 510516, Austin, TX.
Forbus, K. D., Usher, J., & Chapman, V. (2003). Qualitative spatial reasoning sketch
maps. Riedl, J., & Hill, R. (Eds.), Proc. 15th Annual Conf. Innovative Applications
AI, pp. 8592, Acapulco, Mexico. AAAI Press, Menlo Park, CA. ISBN 978-1-57735188-7.
Frank, A. U. (1991). Qualitative spatial reasoning cardinal directions. Kaindl, H.
(Ed.), Proc. 7th Austrian Conf. AI, Vol. 287 Informatik-Fachberichte, pp. 157167.
Springer.
Frank, A. U. (1992). Qualitative spatial reasoning distances directions geographic space. Journal Visual Languages Computing, 3, 343371.
Freksa, C. (1992). Using orientation information qualitative spatial reasoning. Frank,
A. U., Campari, I., & Formentini, U. (Eds.), Spatio-Temporal Reasoning, Vol. 639
Lecture Notes Computer Science, pp. 162178. Springer.
Gebruers, C., Hnich, B., Bridge, D., & Freuder, E. (2005). Using CBR select solution
strategies constraint programming. Proc. 6th Intl. Conf. Case-based Reasoning,
pp. 222236. Springer.
Gerevini, A., & Nebel, B. (2002). Qualitative spatio-temporal reasoning rcc-8
allens interval calculus: Computational complexity. Proc. 15th European Conf. AI,
pp. 312316. IOS Press.
Gerevini, A., & Renz, J. (1998). Combining topological qualitative size constraints
spatial reasoning. Proc. 4th Intl. Conf. Principles Practice Constraint
Programming, pp. 220234. Springer.
424

fiExecuting Perceptions Actions Diagrammatic Reasoning

Glasgow, J., Narayanan, N. H., & Chandrasekaran, B. (1995). Diagrammatic Reasoning:
Cognitive Computational Perspectives. AAAI Press.
Goldberg, E., & Novikov, Y. (2003). complexity equivalence checking. Tech. rep.
CDNL-TR-2003-0826, Cadence Berkeley Labs, CA.
Jamnik, M. (2001). Mathematical Reasoning Diagrams: Intuition Automation.
CSLI Press, Stanford University, CA.
Josephson, J. R., & Josephson, S. G. (1996). Abductive Inference: Computation, Philosophy,
Technology. Cambridge University Press, Cambridge, MA.
Kurup, U., & Chandrasekaran, B. (2007). bimodal cognitive architecture: Explorations
architectural explanation spatial reasoning. AAAI Spring Symp. Control Mechanisms Spatial Knowledge Processing Cognitive/Intelligent Systems, Stanford
University, CA.
Laird, J. E., Newell, A., & Rosenbloom, P. S. (1987). SOAR: architecture general
intelligence. Artificial Intelligence, 33, 164.
Laird, J. E., Rosenbloom, P. S., & Newell, A. (1986). Universal Subgoaling Chunking.
Kluwer Academic Publishers.
Lasaruk, A., & Sturm, T. (2006). Weak quantier elimination full linear theory
integers. uniform generalization Presburger arithmetic. Technical report
MIP-0604, FMI, Universitt Passau, Germany.
Leyton-Brown, K., Nudelman, E., & Shoham, Y. (2002). Learning empirical hardness
optimization problems: case combinatorial auctions. Proc. 8th Intl. Conf.
Principles Practice Constraint Programming, pp. 556572.
Ligozat, G. (1993). Qualitative triangulation spatial reasoning. Frank, A. U., &
Campari, I. (Eds.), Spatial Information Theory: Theoretical Basis GIS, Vol. 716
Lecture Notes Computer Science, pp. 5468. Springer.
Lindsay, R. K. (1998). Using diagrams understand geometry. Computational Intelligence,
14 (2), 238272.
Moratz, R., Renz, J., & Wolter, D. (2000). Qualitative spatial reasoning line segments.
Proc. 14th European Conf. AI, pp. 234238. IOS Press.
Nelson, R. B. (1993). Proofs without Words: Exercises Visual Thinking. Mathematical Association America, Washington, DC.
Newell, A. (1990). Unified Theories Cognition. Harvard University Press, Cambridge,
MA.
OMahony, E., Hebrard, E., Holland, A., Nugent, C., & OSullivan, B. (2008). Using casebased reasoning algorithm portfolio constraint solving. van Dongen, M.
R. C., Lecoutre, C., & Roussel, O. (Eds.), Proc. 3rd Intl. CSP Solver Competition,
pp. 5362.
Pisan, Y. (1994). Visual reasoning graphs. 8th Intl. Workshop Qualitative Reasoning
Physical Systems, Nara, Japan.
425

fiBanerjee & Chandrasekaran

Pisan, Y. (1995). visual routines based model graph understanding. Proc. 17th
Annual Conf. Cognitive Science Society, pp. 692697, Pittsburgh. Lawrence Erlbaum
Associates. ISBN: 0-8058-2159-7.
Pulina, L., & Tacchella, A. (2007). multi-engine solver quantied boolean formulas.
Proc. 13th Intl. Conf. Principles Practice Constraint Programming, pp.
574589.
Randell, D. A., Cui, Z., & Cohn, A. G. (1992). spatial logic based regions connection. Nebel, B., Swartout, W., & Rich, C. (Eds.), Proc. 3rd Intl. Conf. Principles
Knowledge Representation Reasoning, pp. 165176. Morgan Kaufmann.
Ratschan, S. (2006). Ecient solving quantied inequality constraints real
numbers. ACM Trans. Computational Logic, 7 (4), 723748.
Sayag, T., Fine, S., & Mansour, Y. (2006). Combining multiple heuristics. Proc. 23rd
Intl. Symp. Theoretical Aspects Computer Science, Vol. 2884 Lecture Notes
Computer Science, pp. 242253. Springer.
Schlieder, C. (1995). Reasoning ordering. Frank, A. U., & Kuhn, W. (Eds.),
Spatial Information Theory: Theoretical Basis GIS, Vol. 988 Lecture Notes
Computer Science, pp. 341349. Springer.
Seidel, R. (1991). simple fast incremental randomized algorithm computing
trapezoidal decompositions triangulating polygons. Computational Geometry:
Theory Applications, 1 (1), 5164.
Skiadopoulos, S., & Koubarakis, M. (2004). Composing cardinal direction relations. Artificial Intelligence, 152 (2), 143171.
Streeter, M. J., Golovin, D., & Smith, S. F. (2007). Combining multiple heuristics online.
Proc. 22nd Conf. AI, pp. 11971203. AAAI Press.
Sutherland, I. E. (1963). Sketchpad: man-machine graphical communication system.
Proc. Spring Joint Computer Conf., pp. 329346.
Tessler, S., Iwasaki, Y., & Law, K. (1995). Qualitative structural analysis using diagrammatic reasoning. Glasgow, J., Narayanan, N. H., & Chandrasekaran, B. (Eds.),
Diagrammatic Reasoning: Cognitive Computational Perspectives, chap. 21, pp.
711730. AAAI Press, Menlo Park, CA. ISBN 0-262-57112-9.
Tricket, S. B., & Trafton, J. G. (2006). Toward comprehensive model graph comprehension: Making case spatial cognition. Barker-Plummer, D., Cox, R., &
Swoboda, N. (Eds.), Lecture Notes AI, Vol. 4045, pp. 286300. Berlin: SpringerVerlag.
Tversky, B. (2000). ways maps diagrams communicate. Freksa, C.,
Brauer, W., Habel, C., & Wender, K. F. (Eds.), Spatial Cognition II: Integrating
Abstract Theories, Empirical Studies, Formal Methods, Practical Applications,
Vol. 1849 Lecture Notes Computer Science, pp. 7279. Berlin: Springer-Verlag.
Vik, S. (2001). implementation near-linear polygon triangulation algorithm
general polygons. Senior thesis Macalester College, St. Paul, Minnesota. Available
online http://sigbjorn.vik.name/projects/Triangulation.pdf.
426

fiExecuting Perceptions Actions Diagrammatic Reasoning

Vu, X. H., & OSullivan, B. (2008). unifying framework generalized constraint acquisition. Intl. Journal AI Tools, 17 (5), 803833.
Weispfenning, V. (1988). complexity linear problems elds. Journal Symbolic
Computation, 5 (12), 327.
Weispfenning, V. (2001). Semilinear motion planning REDLOG. Applicable Algebra
Engineering, Communication Computing, 12, 455475.
Wolfram, S. (2003).
Mathematica Book (5th edition).
http://documents.wolfram.com/.

Available online

Xu, L., Hutter, F., Hoos, H. H., & Leyton-Brown, K. (2008). SATzilla: Portfolio-based
algorithm selection SAT. Journal Artificial Intelligence Research, 32, 565606.

427


