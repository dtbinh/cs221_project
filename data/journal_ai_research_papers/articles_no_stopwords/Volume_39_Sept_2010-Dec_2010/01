Journal Artificial Intelligence Research 39 (2010) 51-126

Submitted 4/10; published 9/10

Implicit Abstraction Heuristics
Michael Katz
Carmel Domshlak

dugi@tx.technion.ac.il
dcarmel@ie.technion.ac.il

Faculty Industrial Engineering & Management,
Technion, Israel

Abstract
State-space search explicit abstraction heuristics state art costoptimal planning. heuristics inherently limited, nonetheless, size
abstract space must bounded some, even large, constant. Targeting
shortcoming, introduce notion (additive) implicit abstractions,
planning task abstracted instances tractable fragments optimal planning.
introduce concrete setting framework, called fork-decomposition,
based two novel fragments tractable cost-optimal planning. induced admissible
heuristics studied formally empirically. study testifies accuracy
fork decomposition heuristics, yet empirical evaluation stresses tradeoff
accuracy runtime complexity computing them. Indeed,
power explicit abstraction heuristics comes precomputing heuristic
function offline determining h(s) evaluated state fast lookup
database. contrast, fork-decomposition heuristics calculated
polynomial time, computing far fast. address problem,
show time-per-node complexity bottleneck fork-decomposition heuristics
successfully overcome. demonstrate equivalent explicit abstraction
notion database exists fork-decomposition abstractions well, despite
exponential-size abstract spaces. verify empirically heuristic search
databased fork-decomposition heuristics favorably competes state art
cost-optimal planning.

1. Introduction
Heuristic search, either progression space world states regression space subgoals, common successful approach classical planning.
probably popular approach cost-optimal planning, is, finding plan
minimal total cost actions. difference various heuristic-search
algorithms optimal planning mainly admissible heuristic functions employ.
state-space search, heuristic estimates cost achieving goal given
state guarantees overestimate cost.
useful heuristic function must accurate well efficiently computable. Improving
accuracy heuristic function without substantially worsening time complexity
computing usually translates faster search optimal solutions. last
decade, numerous computational ideas evolved new admissible heuristics classical
planning; include delete-relaxing max heuristic hmax (Bonet & Geffner, 2001), critical path heuristics hm (Haslum & Geffner, 2000), landmark heuristics hL , hLA (Karpas &
Domshlak, 2009) hLM-cut (Helmert & Domshlak, 2009), abstraction heuristics
c
2010
AI Access Foundation. rights reserved.

fiKatz & Domshlak

pattern database heuristics (Edelkamp, 2001) merge-and-shrink heuristics (Helmert,
Haslum, & Hoffmann, 2007). focus work abstraction heuristics.
Generally speaking, abstraction planning task given mapping :
states planning tasks transition system states abstract
transition system that, states s, s0 S, cost (s) (s0 ) upperbounded cost s0 . abstraction heuristic value h (s) cost
(s) closest goal state abstract transition system. Perhaps well-known
abstraction heuristics pattern database (PDB) heuristics, based projecting
planning task onto subset state variables explicitly searching optimal
plans abstract space. years, PDB heuristics shown
effective several hard search problems, including cost-optimal planning (Culberson &
Schaeffer, 1998; Edelkamp, 2001; Felner, Korf, & Hanan, 2004; Haslum, Botea, Helmert,
Bonet, & Koenig, 2007). conceptual limitation heuristics, however,
size abstract space dimensionality must fixed.1 recent merge-andshrink abstractions generalize PDB heuristics overcome latter limitation (Helmert
et al., 2007). Instead perfectly reflecting state variables, merge-and-shrink
abstractions allow imperfectly reflecting variables. demonstrated formal
empirical analysis Helmert et al., flexibility often makes merge-and-shrink
abstractions much effective PDBs. However, merge-and-shrink abstract
spaces still searched explicitly, thus still fixed size. quality
heuristics estimates still obtained many problems, limitation critical
obstacle many others.
goal paper push envelope abstraction heuristics beyond explicit
abstractions. introduce principled way obtain abstraction heuristics limit neither dimensionality size abstract spaces. basic idea behind
call implicit abstractions simple intuitive: instead relying abstract problems
easy solve small, rely abstract problems belonging
provably tractable fragments optimal planning. key point that, least theoretically, moving implicit abstractions removes requirement abstractions size
small. contribution, however, showing implicit abstractions far
theoretical interest only. Specifically,
1. specify acyclic causal-graph decompositions, general framework additive implicit abstractions based decomposing problem hand along causal
graph. introduce concrete family abstractions, called fork decompositions, based two novel fragments tractable cost-optimal planning.
Following type analysis suggested Helmert Mattmuller (2008), formally analyze asymptotic performance ratio fork-decomposition heuristics
prove worst-case accuracy selected domains comparable
(even parametric) state-of-the-art admissible heuristics. empirically evaluate accuracy fork-decomposition heuristics large set domains
recent planning competitions show accuracy competitive
state art.
1. necessarily apply symbolic PDBs which, tasks, may exponentially reduce
PDBs representation (Edelkamp, 2002).

52

fiImplicit Abstraction Heuristics

2. key attraction explicit abstractions state-to-goal costs abstract
space precomputed stored memory preprocessing phase
heuristic evaluation search done simple lookup. necessary condition would seem small size abstract space. However,
show equivalent PDB merge-and-shrinks notion database
exists fork-decomposition abstractions well, despite exponential-size abstract spaces latter. databased implicit abstractions based proper
partitioning heuristic computation parts shared search
states parts must computed online per state. empirical evaluation
shows equipped databased fork-decomposition heuristics favorably
competes state art cost-optimal planning.
work revision extension formulation results presented Katz
Domshlak (2008, 2009), turn based ideas first sketched Katz
Domshlak (2007a).

2. Preliminaries
consider classical planning tasks corresponding state models single initial state
deterministic actions. Specifically, consider state models captured sas+
formalism (Backstrom & Nebel, 1995) nonnegative action costs. planning task
given quintuple = hV, A, I, G, costi, where:
V set state variables, v V associated finite domain
D(v). subset variables V 0 V , denote set assignments V 0
D(V 0 ) = vV 0 D(v). complete assignment V called state, = D(V )
state space . initial state. goal G partial assignment V ;
state goal state iff G s.
finite set actions. action pair hpre(a), eff(a)i partial assignments
V called preconditions effects, respectively. Av denote actions
affecting value v. cost : R0+ real-valued, nonnegative action cost
function.
variable v value D(v), instantiation v denoted v : .
partial assignment p, V(p) V denotes subset state variables instantiated p.
turn, V 0 V(p), p[V 0 ] denote value V 0 p; V 0 = {v} singleton,
use p[v] p[V 0 ]. sequence actions variable v V , v denote
restriction actions changing value v; is, v maximal subsequence
consisting actions Av .
action applicable state iff s[v] = pre(a)[v] v V(pre(a)). Applying
changes value v V(eff(a)) eff(a)[v]. resulting state denoted sJaK;
sJha1 , . . . , ak iK denote state obtained sequential application (respectively
applicable) actions a1 , . . . , ak starting state s. action sequence s-plan
G sJha1 , . . . , ak iK, cost-optimal (or, follows, optimal) s-plan
sum action costs minimal among s-plans. purpose (optimal) planning
finding (optimal) I-plan. pair states s1 , s2 S, cost(s1 , s2 ) refer
53

fiKatz & Domshlak

p2

B

c2

F
c


c1





c

c



E
p

c3

C

p

G
p1

(a)

(b)


c

B




F


E

C

E



B

C



E

F

G

G
c

(c)

c

(d)

Figure 1: Logistics-style example adapted Helmert (2006) illustrated (a).
goal deliver p1 C G p2 F E using cars c1 , c2 , c3
truck t, making sure c3 ends F . cars may use city roads (thin
edges); truck may use highway (thick edge). Figures (b), (c),
(d) depict, respectively, causal graph problem, domain transition
graphs (labels omitted) c1 c2 (left), (center), c3 (right),
identical domain transition graphs p1 p2 .

cost cost-optimal plan s1 s2 ; h (s) = mins0 G cost(s, s0 ) custom notation
cost optimal s-plan . Finally, important roles follows played
pair standard graphical structures induced planning tasks.
causal graph CG() digraph nodes V . arc (v, v 0 ) CG()
iff v 6= v 0 exists action (v, v 0 ) V(eff(a)) V(pre(a))
V(eff(a)). case, say (v, v 0 ) induced a. succ(v) pred(v)
respectively denote sets immediate successors predecessors v CG().
domain transition graph DTG(v, ) variable v V arc-labeled digraph
nodes D(v) arc (, 0 ) labeled pre(a)[V \ {v}] cost(a)
exists graph iff eff(a)[v] = 0 , either pre(a)[v] = v 6 V(pre(a)).
illustrate various constructs, use slight variation Logistics-style example
Helmert (2006). example depicted Figure 1a, sas+
54

fiImplicit Abstraction Heuristics

V

= {p1 , p2 , c1 , c2 , c3 , t}

D(p1 ) = D(p2 ) = {A, B, C, D, E, F, G, c1 , c2 , c3 , t}
D(c1 ) = D(c2 ) = {A, B, C, D}

D(c3 ) = {E, F, G}
D(t) = {D, E}

= {p1 : C, p2 : F, : E, c1 : A, c2 : B, c3 : G}

G = {p1 : G, p2 : E, c3 : F },

actions corresponding possible loads unloads, well single-segment movements vehicles. instance, action captures loading p1 c1 C,
pre(a) = {p1 : C, c1 : C}, eff(a) = {p1 : c1 }. actions example unit cost.
causal graph example, well domain transition graphs state
variables, depicted Figures 1b-1d.
Heuristic functions used informed-search procedures estimate cost (of
cheapest path) search node nearest goal node. focus statedependent, admissible abstraction heuristics. heuristic function h state-dependent
estimate search node depends problem state associated node,
is, h : R0+ {}. heuristics use days state-dependent (though
see, e.g., Richter, Helmert, & Westphal, 2008 Karpas & Domshlak, 2009 different
case). heuristic h admissible h(s) h (s) states s. h1 h2 two
admissible heuristics, h2 (s) h1 (s) states s, say h1 dominates h2 .
set admissible heuristics h1 , . . . , hm , pointwise maximum always
admissible heuristic, dominating individual heuristic set. sets admissible heuristics, pointwise sum admissible dominates pointwise
maximum. Many recent works cost-optimal planning based additive ensembles admissible heuristics, includes critical-path heuristics (Haslum, Bonet, &
Geffner, 2005; Coles, Fox, Long, & Smith, 2008), pattern database heuristics (Edelkamp,
2001; Haslum et al., 2007), landmark heuristics (Karpas & Domshlak, 2009; Helmert &
Domshlak, 2009). particular, Katz Domshlak (2007a, 2008) Yang et al. (2007,
2008) independently introduced general criterion admissible additive ensembles
heuristics, called former work action cost partitioning. criterion formalized follows. Let = hV, A, I, G,
planning task {costi : R0+ }m
i=1
Pcosti

family cost functions i=1 costi (a) cost(a) actions A. {hi }m
i=1
set

arbitrary
admissible
heuristic
functions


=
hV,
A,
I,
G,
cost
i,
respectively,


P


i=1 hi admissible heuristic . set cost functions {costi }i=1
seen partition action costs cost.

3. Abstractions Abstraction Heuristics
semantics planning task given induced state-transition model, often
called transition graph .

55

fiKatz & Domshlak

Definition 1 transition graph tuple = (S, L, Tr, s0 , ? , $) finite
set states, L finite set transition labels, Tr L set (labeled)
transitions, s0 initial state, ? set goal states, $ : L R0+
transition cost function.
state subset states 0 T, cost(s, 0 ) cost (of
cheapest respect $ path) state 0 along transitions T;
state 0 reachable s, cost(s, 0 ) = .
path s0 ? plan T, cheapest plans called optimal.
states transition graph T() induced planning task = hV, A, I, G, costi
states . transition labels T() actions A; transition
(s, a, sJaK) Tr iff applicable s; initial state s0 = I; set goal states
? = {s | G}; transition cost function $ = cost.
proceed
formally specifying notion abstraction. definition abstraction resembles
Prieditis (1993), right beginning specify general notion
additive abstraction. Informally, additive abstraction refer set abstractions
interconstrained requirement jointly overestimate transition-path costs
abstracted transition graph.
Definition 2 additive abstraction transition graph = (S, L, Tr, s0 , ? , $)
set pairs {hTi , i}m
i=1 where, 1 m,
Ti = (Si , Li , Tri , s0i , Si? , $i ) transition graph,
: Si function, called abstraction mapping,
(s0 ) = s0i , (s) Si? ? , and,
pairs states s, s0 holds

X
i=1

cost(i (s), (s0 )) cost(s, s0 ).

(1)

words use particular notion abstraction. term abstraction
usually associated simplifying original system, reducing factoring details
less crucial given context. details reduced better
preserved depends, course, context. instance, context formal
verification, abstract transition graphs required decrease reachability
states; is, path s0 original transition graph,
path (s) (s0 ) abstract transition graph (Clarke,
Grumberg, & Peled, 1999). addition, reachability increased little
possible. Beyond that, precise relationship path costs original
abstract transition graphs secondary importance. contrast, abstractions
designed induce admissible heuristic functions heuristic search, relationship
path costs captured Eq. 1 must obeyed. However, requirements
beyond general requirement Eq. 1 overestimate distances
56

fiImplicit Abstraction Heuristics

states unnecessary. Hence, particular, Definition 2 generalizes notion
abstraction Helmert et al. (2007) replacing condition preserving individual
transitions labels, is, ((s), l, (s0 )) (s, l, s0 ), weaker condition stated
Eq. 1. reader, course, may well ask whether generality condition
Eq. 1 beyond condition Helmert et al. (2007) really delivers practical gain,
later show answer question affirmative. now, proceed
adding requirements essential making abstraction usable basis heuristic
functions.
Definition 3 Let planning task states S, let {hTi , i}m
i=1 additive
abstraction transition graph T(). = O(poly(||||)) and, states
1P
m, cost cost(i (s), Si? ) Ti computable time O(poly(||||)),
?
hA (s) =
i=1 cost(i (s), Si ) abstraction heuristic function .
Note admissibility hA implied cost conservation condition Eq. 1. illustrate connection abstractions admissible heuristics, consider three
well-known mechanisms devising admissible planning heuristics: delete relaxation (Bonet
& Geffner, 2001), critical-path relaxation (Haslum & Geffner, 2000),2 pattern database
heuristics (Edelkamp, 2001).
First, typically considered way, delete relaxation planning task
? , $ ),
= hV, A, I, G, costi correspond abstraction hT+ = (S+ , L+ , Tr+ , s0+ , S+
+
+
transition
graph
T().
Assuming
unique
naming


variable
values



deS
noting D+ = vV D(v), abstract states S+ power-set D+ ,
labels L+ = {a, a+ | A}. transitions come two sources: abstract state
s+ S+ original action applicable s+ , (s+ , a, s+ JaK) Tr+
(s+ , a+ , s+ eff(a)) Tr+ . minor abuse notation, initial state
? = {s | G}, abstraction
goal states abstraction s0+ = S+
+
+
+
mapping + simply identity function. easy show that, state
? ) = h+ (s), h+ (s) delete-relaxation
planning task , cost(+ (s), S+
estimate cost goal. aside, note delete-relaxation
abstraction hT+ , + particular exemplifies nothing Definition 2 requires
size abstract state space limited size original state space.
event, however, abstraction hT+ , + induce heuristic terms Definition 3
computing h+ (s) known NP-hard (Bylander, 1994).
situation critical-path relaxation exactly opposite. computing
corresponding family admissible estimates hm polynomial-time fixed m,
computation based computing shortest paths abstraction
planning task. state graph hm computed AND/OR-graph (and
OR-graph transition graphs), actual computation hm corresponds
computing critical tree (and shortest path) goal. best
knowledge, precise relation critical path abstraction heuristics currently
open question (Helmert & Domshlak, 2009).
Overall, abstraction heuristics toolbox planning days appear
explicit homomorphism abstractions, whose best-known representative probably
2. assume reader familiar two relaxations. not, discussion safely
skipped.

57

fiKatz & Domshlak

pattern database (PDB) heuristics. Given planning task state variables V ,
PDB heuristic based projecting onto subset variables V V .
homomorphism abstraction maps two states s1 , s2 abstract state iff
s1 [V ] = s2 [V ]. Inspired (similarly named) domain-specific heuristics search
problems (n2 1)-puzzles Rubiks Cube (Culberson & Schaeffer, 1998; Hernadvolgyi & Holte, 1999; Felner et al., 2004), PDB heuristics successfully exploited domain-independent planning well (Edelkamp, 2001, 2002; Haslum et al.,
2007). key decision constructing PDBs sets variables problem
projected (Edelkamp, 2006; Haslum et al., 2007). However, apart need
automatically select good projections, two limitations PDB heuristics size
abstract space dimensionality. First, number abstract states
small enough allow reachability analysis exhaustive search. Moreover,
O(1) bound |S | typically set explicitly fit time memory limitations
system. Second, since PDB abstractions projections, explicit constraint |S |
implies fixed-dimensionality constraint |V | = O(1). planning tasks with, informally,
many alternative resources, limitation pitfall. instance, suppose {i }
i=1
sequence Logistics problems growing size |Vi | = i. package
transported (i) vehicles, starting i, h account
movements vehicles essential solving (Helmert & Mattmuller, 2008).
Aiming preserving attractiveness PDB heuristic eliminating bottleneck fixed dimensionality, Helmert et al. (2007) generalized methodology
Drager, Finkbeiner, Podelski (2006) introduced called merge-and-shrink
(MS) abstractions planning. MS abstractions homomorphisms generalize PDB
abstractions allowing flexibility selection pairs states contracted.
problems state space viewed synchronized product projections onto
single state variables. Starting atomic abstractions, product
computed iteratively composing two abstract spaces, replacing product.
PDB size abstract space controlled limiting number
product compositions, MS abstractions controlled interleaving iterative composition projections abstraction partial composites. Helmert et al. (2007)
proposed concrete strategy interleaved abstraction/refinement scheme empirically demonstrated power merge-and-shrink abstraction heuristics. PDBs,
however, MS abstractions explicit abstractions, thus computing heuristic values based explicitly searching optimal plans abstract spaces. Hence,
merge-and-shrink abstractions escape fixed-dimensionality constraint PDBs,
constraint abstract space fixed size still holds.

4. Implicit Abstractions
Focusing O(1) bound posted explicit abstractions size abstract
space, first observation explicit abstractions necessarily way
proceed abstraction heuristics. Given planning task states S, suppose
transform different planning task
1. transformation induces abstraction mapping : state
space ,
58

fiImplicit Abstraction Heuristics

2. transformation , well computing state S,
done time polynomial ||||.
planning-task-to-planning-task transformations mind, define
call (additive) implicit abstractions.
Definition 4 additive implicit abstraction planning task set pairs


= {hi , i}m
i=1 {i }i=1 planning tasks {hT(i ), i}i=1
additive abstraction T().
Let us examine notion implicit abstractions closely. First, implicit
abstractions allow natural additive combination admissible heuristics abstract
tasks. composition formulated Theorem 1, extending original criterion
admissibility additive heuristics described Section 2. Second, formulated
Theorem 2, implicit abstractions composed via functional composition
abstraction mappings. two easy-to-prove properties implicit abstractions allow us
take desired step implicit abstractions implicit abstraction heuristics.
Theorem 1 (Admissibility) Let planning task = {hi , i}m
i=1 additive implicit abstraction
.
If,


1



m,
h


admissible
heuristic
,

Pm
function h(s) = i=1 hi (i (s)) admissible heuristic .
Proof: proof straightforward. Let = (S, L, Tr, s0 , ? , $) transition graph
, let state S. 1 m, let Ti = (Si , Li , Tri , s0i , Si? , $i )
transition graph .
First, hi admissible heuristic , si Si? ,
hi (i (s)) cost(i (s), si ).
Now, state s0 ? , Definition 2 (s0 ) Si? , Eq. 1

X
i=1

thus
h(s) =


X
i=1

cost(i (s), (s0 )) cost(s, s0 ),

hi (i (s))

giving us admissible estimate


X

i=1

h (s).

cost(i (s), (s0 )) cost(s, s0 ),


Theorem 2 (Composition) Let planning task = {hi , i}m
i=1 addimi
tive implicit abstraction . If,
i,j , i,j i}j=1 additive
1 m, Ai = m{h

implicit abstraction , A0 =
{h
,



i}

additive implicit abi,j
i,j
j=1
i=1
straction .
Proof: Let = (S, L, Tr, s0 , ? , $) transition graph . 1 m,
let Ti = (Si , Li , Tri , s0i , Si? , $i ) transition graph , 1 j mi , let
? , $ ) transition graph . need show
Ti,j = (Si,j , Li,j , Tri,j , s0i,j , Si,j
i,j
i,j
i,j abstraction mapping Definition 2. i,j abstraction
mappings,
59

fiKatz & Domshlak

s0i,j = i,j (s0i ) = i,j (i (s0 )) = i,j (s0 ),
? ,
? (s) Si? thus i,j (i (s)) = i,j (s) Si,j
P
0
0
si , s0i Si , cost(si , s0i )
j=1 cost(i,j (si ), i,j (si )), thus s, S,

cost(s, s0 )


X
i=1

cost(i (s), (s0 ))
=

mi
X
X
i=1 j=1
mi
X
X
i=1 j=1

cost(i,j (i (s)), i,j (i (s0 )))
cost(i,j (s), i,j (s0 )).


Together, Theorems 1 2 suggest following scheme deriving abstraction heuristics. Given additive implicit abstraction = {hi , i}m
i=1 , individual abstract
tasks belong tractable fragments optimal planning, use practice
(sum the) true costs admissible estimates costs . Otherwise, optimal planning abstract tasks cannot proven polynomial-time
solvable, abstract tasks, obtaining admissible estimates
true costs .
Definition 5 Let planning task states S, let = {hi , i}m
i=1
additive implicit abstraction . = O(poly(||||)), and, allP
states

1 m, h (i (s)) polynomial-time computable, hA (s) =
i=1 h (i (s))
implicit abstraction heuristic function .
Compared explicit abstraction heuristics PDB heuristics merge-andshrink heuristics, direction implicit abstraction heuristics is, least principle,
appealing neither dimensionality even size state spaces induced
implicit abstractions required bounded something restrictive, all.
pitfall, however, implicit abstraction heuristics correspond tractable fragments
optimal planning, palette known fragments extremely limited (Backstrom
& Nebel, 1995; Bylander, 1994; Jonsson & Backstrom, 1998; Jonsson, 2007; Katz & Domshlak, 2007b). fact, none far appeared us convenient automatically devising useful problem transformations above. Fortunately, show next boundaries
tractability expanded right way, allowing us successfully materialize
idea implicit abstraction heuristics.
following, key role played causal graphs induced planning
tasks. Informally, basic idea behind call causal-graph decompositions
abstract given planning task along subgraph causal graph, goal
obtaining abstract problems specific structure. Naturally, numerous possibilities
obtaining structure-oriented abstractions. present one decomposition
tailored abstractions around acyclic subgraphs. Informally, decomposition
seen sequential application two kinds task transformations: dropping
preconditions (Pearl, 1984) (certain form of) breaking actions conjunctive effects
single-effect actions.
60

fiImplicit Abstraction Heuristics

Definition 6 Let = hV, A, I, G, costi planning task, let G = (VG , EG )
acyclic subgraph causal graph CG(). planning task G = hVG , AG , IG , GG , costG
acyclic causal-graph decomposition respect G
1. IG = I[VG ], GG = G[VG ],

2. AG = aA AG (a) AG (a) = {a1 , . . . , al(a) } set actions VG
that, topological respect G ordering variables {v1 , . . . , vl(a) } =
V(eff(a)) VG , 1 l(a),
(
eff(a)[v],
v = vi

eff(a )[v] =
unspecified, otherwise

(2)

(v, vi ) EG v 6 V(eff(a)) v = vi
pre(a)[v],
pre(ai )[v] = eff(a)[v],
(v, vi ) EG v V(eff(a))


unspecified, otherwise
3. action A,

X
a0 AG (a)

costG (a0 ) cost(a).

(3)

hard verify Definition 6 planning task acyclic
causal-graph decomposition G , causal graph CG(G ) exactly subgraph G underlying decomposition. illustrate notion acyclic causal-graph decomposition,
consider planning task = hV, A, I, G, costi five state variables V = {u, v, x, y, z},
two unit-cost actions = {a1 , a2 } Figure 2a, initial state = {u : 0, v : 0, x : 0, : 0, z : 0},
goal G = {u : 1, v : 1, x : 0, : 1, z : 1}. causal graph CG() depicted Figure 2a.
Figures 2b-c show two subgraphs G1 G2 CG(), respectively, well action sets AG1 (a1 ) = {a11 , a21 , a31 } AG1 (a2 ) = {a12 , a22 , a32 } Figure 2(b), action
sets AG2 (a1 ) = {a11 , a21 , a31 } AG2 (a2 ) = {a12 , a22 , a32 } Figure 2(c). {1, 2}, let
= hV, Ai , I, G, costi planning task Ai = AGi (a1 )AGi (a2 ) costi (a) = 1/3
Ai . two planning tasks (individually) satisfy conditions Definition 6 respect Gi , thus acyclic causal-graph decompositions
respect Gi .
proceed specifying implicit abstractions defined via acyclic causal-graph
decompositions.
Definition 7 Let = hV, A, I, G, costi planning task states S, let G = {Gi =

(VGi , EGi )}m
i=1 set acyclic subgraphs causal graph CG(). = {hGi , i}i=1
acyclic causal-graph abstraction G if, set cost functions
{costi : R0+ }m
i=1 satisfying
:


X
i=1

costi (a) cost(a),

have, 1 m,
61

(4)

fiKatz & Domshlak

a1 = h{x : 0, : 0, z : 0}, {x : 1, : 1, z : 1}i

a11 = h{x : 0}, {x : 1}i
a21 = h{x : 1, : 0}, {y : 1}i
a31 = h{x : 1, z : 0}, {z : 1}i

a11 = h{y : 0}, {y : 1}i
a21 = h{z : 0}, {z : 1}i
a31 = h{y : 1, z : 1, x : 0}, {x : 1}i

a2 = h{u : 0, v : 0, x : 1}, {u : 1, v : 1, x : 0}i

a12 = h{x : 1}, {x : 0}i
a22 = h{x : 0, u : 0}, {u : 1}i
a32 = h{x : 0, v : 0}, {v : 1}i

a12 = h{u : 0}, {u : 1}i
a22 = h{v : 0}, {v : 1}i
a32 = h{u : 1, v : 1, x : 1}, {x : 0}i

u

a1

a2

x

a2
a2



x
a1

a22

a1

v

z

u

a31

a32 a21



v

(a)

u

(b)

a32

z



v
a32

a31

z
a31

x
(c)

Figure 2: (a) actions causal graph CG() planning graph example
illustrating Definition 2. (b) Subgraph G1 CG() induced action sets
AG1 (a1 ) AG1 (a2 ). (c) Subgraph G2 CG() induced action sets
AG2 (a1 ) AG2 (a2 ). arcs CG() subgraphs G1 G2
labeled actions inducing arcs.

Gi = hVGi , AGi , IGi , GGi , costGi acyclic causal-graph decomposition =
hV, A, I, G, costi respect Gi ,
abstraction mapping : Si projection mapping (s) = s[VGi ].
Theorem 3 Acyclic causal-graph abstractions planning tasks additive implicit
abstractions tasks.
Proof: Let = hV, A, I, G, costi planning task, let = {hGi , i}m
i=1
acyclic causal-graph abstraction set subgraphs G = {Gi = (VGi , EGi )}m
i=1 .
Let = (S, L, Tr, s0 , ? , $) transition graph , and, 1 m, Ti =
(Si , Li , Tri , s0i , Si? , $i ) transition graph Gi . need show abstraction mapping Definition 2.
First, Definitions 6 7,
s0i = IGi = I[VGi ] = s0 [VGi ] = (s0 ),
? G thus (s) = s[VGi ] G[VGi ] = GGi , providing us
(s) Si? .
Now, state action pre(a) s, (s) state Gi
pre(a)[VGi ] (s). Let action sequence = ha1 , a2 , . . . , al(a) constructed
Eq. 2. inductively prove applicable (s). First, v VGi ,
either pre(a1 )[v] = pre(a)[v], pre(a1 )[v] unspecified, thus 1 = ha1 applicable
(s). inductive hypothesis j = ha1 , a2 , . . . , aj applicable (s),
0
let s0 = (s)Jj K. Eq. 2, 1 j 0 j, aj changes value vj 0 eff(a)[vj 0 ],
62

fiImplicit Abstraction Heuristics

change vj 0 along j . Likewise, since actions constructed
Eq. 2 unary-effect, {v1 , . . . , vj } variables VGi affected along j . Hence,
v VGi , v = vj 0 , 1 j 0 j, s0 [v] = eff(a)[v] = pre(aj+1 )[v], otherwise,
s0 [v] = (s)[v], pre(aj+1 )[v] specified, pre(aj+1 )[v] = pre(a)[v] = (s)[v].
implies aj+1 applicable s0 and, result, j+1 = ha1 , a2 , . . . , aj+1 applicable
(s), finalizing inductive proof. Likewise, exactly arguments affect
l(a)
{aj }j=1 (s) immediately imply that, = ha1 , a2 , . . . , al(a) i, (sJaK) = (s)JK.
Next, A, Eqs. 3 4

X

X

i=1 a0 AGi (a)

costGi (a0 )


X
i=1

costi (a) cost(a).

(5)

Now, let s, s0 pair original states cost(s, s0 ) < , let % =
0
ha1 , . . . , ak sequence
Pk labels along cheapest path T. that,
0
cost(s, ) = cost(%) = j=1 cost(aj ). decomposition path sequences
actions Eq. 2 aP(not P
neccesarily cheapest) path (s) (s0 ) Ti ,
k
0
thus cost(i (s), (s )) j=1 a0 AG (aj ) costGi (a0 ), providing us



X
i=1

0

cost(i (s), (s ))
(5)



X
k
X

X

0

costGi (a ) =

i=1 j=1 a0 AGi (aj )
k
X

k X

X

X

costGi (a0 )

j=1 i=1 a0 AGi (aj )

cost(aj ) = cost(s, s0 ).

j=1


Thus, decompose given task set tractable acyclic causalgraph decompositions = {G1 , . . . , Gm }, solve tasks polynomial
time, derive additive admissible heuristic . proceed considering
concrete acyclic causal-graph decomposition, note Definition 2 leaves decision
actual partition action costs rather open. follows adopt
straightforward, uniform action cost partition theScost action equally
split among non-redundant representatives
i=1 AGi (a). However, better
choice action cost partition sometimes made. fact, sometimes even
optimized (Katz & Domshlak, 2010)

5. Fork Decompositions
proceed introducing two concrete acyclic causal-graph decompositions that,
combined certain variable domain abstractions, provide us implicit abstraction heuristics. called fork-decomposition heuristics based two novel
fragments tractable cost-optimal planning tasks fork inverted-fork structured
causal graphs.
Definition 8 planning task variables V , variable v V ,
63

fiKatz & Domshlak

(1) v-fork subgraph Gvf CG() nodes VGvf = {v} succ(v) edges
EGvf = {(v, u) | u succ(v)},
(2) v-ifork (short inverted fork) subgraph Gvi CG() nodes VGvi =
{v} pred(v) edges EGvi = {(u, v) | u pred(v)}.
sets v-forks v-iforks denoted GF = {Gvf }vV GI =
{Gvi }vV , respectively.
planning task state variables v, v-fork v-ifork
acyclic digraphs, allowing us define three implicit abstractions follows.
Definition 9 planning task = hV, A, I, G, costi,

(1) acyclic causal-graph abstraction AF = {hfv , vf i}vV GF called
F-abstraction, set abstract planning tasks F = {fv }vV called
F-decomposition ;
(2) acyclic causal-graph abstraction AI = {hiv , vi i}vV GI called
I-abstraction, set abstract planning tasks = {iv }vV called
I-decomposition ;
(3) acyclic causal-graph abstraction AFI = {hfv , vf i, hiv , vi i}vV
GFI = GF GI called FI-abstraction, set abstract planning tasks
= {fv , iv }vV called FI-decomposition .

Definition 9 better understood considering FI-abstraction problem
Logistics example; Figure 3 schematically illustrates process. simplify
example, eliminate GFI single-node subgraphs, obtaining
AFI = {hfc1 , cf 1 i, {hfc2 , cf 2 i, {hfc3 , cf 3 i, {hft , tf i, {hip1 , pi 1 i, {hip2 , pi 2 i}.
Considering action sets problems = {fc1 , fc2 , fc3 , ft , ip1 , ip2 }, see
original driving action one nonredundant (that is, changing variable)
representative three abstract planning tasks, load/unload action
one nonredundant representative five tasks. instance, action drive-c1 from-A-to-D one nonredundant representative tasks {fc1 , ip1 , ip2 },
action load-p1 -into-c1 -at-A one nonredundant representative tasks
{fc1 , fc2 , fc3 , ft , ip1 }. Since assume uniform partition action costs, cost
driving load/unload action relevant abstract planning task thus set
1/3 1/5, respectively. Theorem 3 AFI additive implicit
abstraction , Theorem 1

X
hFI =
hf + hi ,
(6)
v

v

vV

admissible estimate h . question good estimate is.
optimal cost solving running example 19. Taking reference well-known
admissible heuristics hmax (Bonet & Geffner, 2001) h2 (Haslum & Geffner, 2000),
hmax (I) = 8 h2 (I) = 13. Considering FI-abstraction, optimal plans
tasks follows.
64

fiImplicit Abstraction Heuristics

fc1 : load-p1 -into-c2 -at-C, unload-p1 -from-c2 -at-D, load-p1 -into-t-at-D,
unload-p1 -from-t-at-E, load-p1 -into-c3 -at-E, unload-p1 -from-c3 -at-G,
load-p2 -into-c3 -at-F, unload-p2 -from-c3 -at-E.
fc2 : load-p1 -into-c1 -at-C, unload-p1 -from-c1 -at-D, load-p1 -into-t-at-D,
unload-p1 -from-t-at-E, load-p1 -into-c3 -at-E, unload-p1 -from-c3 -at-G,
load-p2 -into-c3 -at-F, unload-p2 -from-c3 -at-E.
fc3 : load-p1 -into-c1 -at-C, unload-p1 -from-c1 -at-D, load-p1 -into-t-at-D,
unload-p1 -from-t-at-E, drive-c3 -from-G-to-E, load-p1 -into-c3 -at-E,
drive-c3 -from-E-to-G, unload-p1 -from-c3 -at-G, drive-c3 -from-G-to-E,
drive-c3 -from-E-to-F, load-p2 -into-c3 -at-F, drive-c3 -from-F-to-E,
unload-p2 -from-c3 -at-E, drive-c3 -from-E-to-F.
ft : load-p1 -into-c1 -at-C, unload-p1 -from-c1 -at-D, drive-t-from-E-to-D,
load-p1 -into-t-at-D, drive-t-from-D-to-E, unload-p1 -from-t-at-E,
load-p1 -into-c3 -at-E, unload-p1 -from-c3 -at-G, load-p2 -into-c3 -at-F,
unload-p2 -from-c3 -at-E.
ip1 : drive-c1 -from-A-to-D, drive-c1 -from-D-to-C, load-p1 -into-c1 -at-C,
drive-c1 -from-C-to-D, unload-p1 -from-c1 -at-D, drive-t-from-E-to-D,
load-p1 -into-t-at-D, drive-t-from-D-to-E, unload-p1 -from-t-at-E,
drive-c3 -from-G-to-E, load-p1 -into-c3 -at-E, drive-c3 -from-E-to-G,
unload-p1 -from-c3 -at-G, drive-c3 -from-G-to-E, drive-c3 -from-E-to-F.
ip2 : drive-c3 -from-G-to-E, drive-c3 -from-E-to-F, load-p2 -into-c3 -at-F,
drive-c3 -from-F-to-E, unload-p2 -from-c3 -at-E, drive-c3 -from-E-to-F.
Hence,
hFI = hf

c1

=

8
5

+ hf

+

8
5

+

c2

+

hf
8
5

c3

+

6
3

hf

+
+

8
5



+

2
3

+

hi

+

6
5

p1

+

9
3

+

hf

+

2
5

p2

+

4
3

= 15,

(7)

hFI appears least promising.
Unfortunately, despite seeming simplicity planning tasks , turns
implicit fork-decomposition abstractions Definitions 9 fit requirements
implicit abstraction heuristics Definition 5. causal graphs planning
tasks F form directed forks directed inverted forks, respectively, and,
general, number variables planning task large (|V |).
problem even satisficing planning sas+ fragments fork inverted
fork causal graphs NP-complete (Domshlak & Dinitz, 2001). fact, recent results
Chen Gimenez (2008) show planning sas+ fragment characterized
nontrivial form causal graph NP-hard. Moreover, even domain transition graphs
state variables strongly connected (as example), optimal planning
fork inverted fork structured problems remain NP-hard (see Helmert 2003, 2004
respective results). Next, however, show end story
fork decompositions.
65

fiKatz & Domshlak



B

c1

p2

c2

CG()

F
c!





p!

G

p1

c#



E
c3

C

c"

p"

{fv , iv }vV
fc1

c!

p!

c!

p"

c"

c#



ip1

p!

CG(
CG(p1ip1))

CG(fcfc11))
CG(

Figure 3: Schematic illustration FI-decomposition running Logistics example
hardness optimal planning problems fork inverted fork causal
graphs casts shadow relevance fork decompositions, closer look proofs
corresponding hardness results Domshlak Dinitz (2001) Helmert (2003, 2004)
reveals particular rely root variables large domains. Exploiting
observation, show reliance incidental characterize two substantial
islands tractability within structural fragments sas+ .
Theorem 4 (Tractable Forks) Given planning task = hV, A, I, G, costi fork
causal graph rooted r V , |D(r)| = 2, time complexity cost-optimal planning
polynomial ||||.
Proof: Observe that, planning task theorem, fork structure
causal graph CG() implies actions unary-effect, leaf variable
v succ(r) preconditions actions affecting v itself. algorithm based
following three properties satisfied optimal plans .
(i) leaf variable v succ(r), path v I[v] G[v] induced
DTG(v, ) either cycle-free contains zero-cost cycles. case
otherwise nonzero-cost cycles eliminated v preserving
validity, violating assumed optimality . Without loss generality,
follows assume path v DTG(v, ) cycle-free; case fork
causal graphs, always select optimal satisfies requirement
v succ(r). Thus, |v | |D(v)| 1.
(ii) fixed sequence value changes r, forks leaves become mutually
independent; is, ability change value one affect
ability change value others.
66

fiImplicit Abstraction Heuristics

(iii) r binary-valued, v V \ {r} demanding leaf variable
terms number value changes required r action preconditions
along v , value changes r along , except for, possibly,
final value change G[r]. Thus, particular, |r | maxvsucc(r) |D(v)|.
begin introducing auxiliary notations. |D(r)| = 2, let D(r) = {0, 1}
I[r] = 0. Let (r) alternating 0/1 sequence starting 0, 0
odd 1 even positions. sequence (r) |(r)| = 1 action
change rs value 1, |(r)| = 2 action change rs value 1
action restore value 0, otherwise, |(r)| = 1 + maxvsucc(r) |D(v)|. Let
[(r)] set nonempty prefixes (r) G[r] unspecified; otherwise, let
set nonempty prefixes (r) ending G[r]. Note that, [(r)] = ,
problem trivially unsolvable; follows assume case.
v succ(r), let DT G0v DT G1v subgraphs domain transition graphs
DTG(v, ), obtained removing DTG(v, ) arcs labeled r : 1 r : 0,
respectively.
algorithm incrementally constructs set R valid plans , starting
R = .
(1) v succ(r), pair vs values x, D(v), compute cheapest
(that is, cost-minimal) paths v0 (x, y) v1 (x, y) x DT G0v DT G1v ,
respectively. pairs values x, y, one even paths may, course,
exist.
(2) sequence [(r)], v succ(r), construct layered digraph Lv ()
|| + 1 node layers L0 , . . . , L|| , L0 consists I[v], 1 ||,
[i]

Li consists nodes D(v) path v (x, y) node x Li1
constructed step (1). x Li1 , Li , Lv () contains arc
[i]
(x, y) weighted cost(v (x, y)).

(3) [(r)], let k = ||. candidate plan constructed follows.

(a) v succ(r), find cost-minimal path I[v] G[v] Lv ().
path exists, proceed next prefix [(r)]. Otherwise, note
i-th edge path (taking us x Li1 Li ) corresponds
[i]
cost-minimal path v (x, y) x y. Let us denote path x
Svi .

(b) Set R = R{ }, = 1 a[2] 2 . . .a[k] k , sequence obtained
arbitrary merge sequences {Svi }vsucc(r) , cheapest action
changing value r value .
(4) R = , fail, otherwise return = argmin R cost( ).
straightforward verify complexity procedure polynomial
description size . prove correctness, show procedure returns
plan solvable task , returned plan 0 satisfies cost(0 ) cost()
optimal plan .
67

fiKatz & Domshlak

Given solvable task , let optimal plan v leaf variables
v cycle-free. Let r = ha2 . . . , ak i; numbering actions along r starts
a2 simplify indexing later on. v succ(r), actions r divide v
subsequences v-changing actions v = 1v . . . kv , separated value changes
required r. is, 1 k, actions iv preconditioned
value r, any, two actions iv a0 i+1
preconditioned r,
v
pre(a)[r] 6= pre(a0 )[r]. Let [(r)] value sequence || = k = |r | + 1.
v succ(r), v path I[v] G[v] Lv (), therefore added
R algorithm, meaning algorithm finds solution. Now, R,
then, v succ(r), let Sv1 Sv2 . . . Svk cost-minimal path I[v] G[v]
Lv () Svi sequence actions changing value v preconditioned
either r : 0 nothing odd i, r : 1 nothing even i. Thus,
cost(Sv1 Sv2 . . . Svk ) =

k
X
i=1

cost(Svi ) cost(v ).

sequence obtained arbitrary merge sequences {Svi }vsucc(r) ,
cheapest action changing value r , = 1 a[2] 2 . . . a[k] k
applicable sequence actions achieves goal values v succ(r)
well r,
cost( ) = cost(S 1 a[2] 2 . . . a[k] k ) =

k
X

cost(a[i] ) +

i=2

cost(r ) +

k
X
i=1

X

cost(S )

cost(v ) = cost().

vsucc(r)

Hence, solvable, algorithm returns plan , plan must
optimal. Finally, solvable, R necessarily remains empty, thus
algorithm fails.

Theorem 4 concerns tractability tasks fork-structured causal graphs
roots binary domains, earlier work reported additional tractability
result fork-structured causal graphs domains variables fixed
size, though necessarily binary-valued (Katz & Domshlak, 2008). discuss
result detail because, least far, found helpful
context devising effective abstraction heuristics.
Theorem 5 (Tractable Inverted Forks) Given planning task = hV, A, I, G, costi
inverted fork causal graph sink r V , |D(r)| = O(1), time complexity
cost-optimal planning polynomial ||||.
Proof: Let |D(r)| = d. Observe inverted-fork structure causal graph CG()
implies actions unary-effect, sink r preconditions
actions affecting r itself. Hence, follows assume G[r] specified; otherwise
68

fiImplicit Abstraction Heuristics

Given path ha1 , . . . , I[r] G[r] DTG(r, ):
:= hi
am+1 := hG[pred(r)],
foreach v pred(r) xv := I[v]
:= 1 + 1
foreach v pred(r)
pre(ai )[v] specified pre(ai )[v] 6= xv
pre(ai )[v] reachable xv DTG(v, ) fail
append actions induced cost-minimal path
pre(ai )[v] xv DTG(v, )
xv := pre(ai )[v]
< + 1 append action ai
return
Figure 4: Detailed outline step (3) planning algorithm inverted-fork structured
task.

breaks set trivial planning problems single variable each. Likewise,
properties follows that, optimal plan , path
r I[r] G[r] induced DTG(r, ) either cycle-free contains zerocost cycles. latter safely eliminated , thus assume r
cycle-free. Given that, simple algorithm finds cost-optimal plan time
(||||d + ||||3 ) follows.
(1) Create (|Ar |d1 ) cycle-free paths I[r] G[r] DTG(r, ).
(2) variable v pred(r), pair vs values x, D(v), compute
cost-minimal path x DTG(v, ). whole set cost-minimal paths
computed using (d|V |) applications Floyd-Warshall algorithm
domain transition graphs sinks parents pred(r).
(3) I[r]-to-G[r] path DTG(r, ) generated step (1), construct plan
based path r, cheapest paths computed (2). simple
construction, depicted Figure 4, possible values parent variable
changed independently values variables inverted fork.
(4) Take cheapest plan among constructed (3). plan constructed
step (3), unsolvable.
already observed that, cost-optimal plan , r one I[r]-to-G[r]
paths generated step (1). v pred(r), let Sv denote sequence values
D(v) required preconditions actions along r . v pred(r),
v corresponding (possibly cyclic) path I[v] G[v] DTG(v, ), traversing
values (= nodes) Sv order required Sv . turn, plan generated
(3) consists cost-minimal paths v pred(r). Therefore, least one
69

fiKatz & Domshlak

plans generated (3) must cost-optimal , minimization step (4) select
one them.

Theorems 4 5 clarify gap fork decompositions implicit abstraction
heuristics, bridge gap abstracting task given fork
decomposition . abstracting domains fork roots inverted-fork
sinks meet requirements tractable fragments. note that, itself, idea
domain decomposition new general (Hernadvolgyi & Holte, 1999)
domain-independent planning particular (Domshlak, Hoffmann, & Sabharwal, 2009).
fact, shrinking step algorithm building merge-and-shrink abstractions
precisely variable domain abstraction meta-variables constructed merging
steps (Helmert et al., 2007).
Definition 10 Let = hV, A, I, G, costi planning task states S, v V state
variable, = {1 , . . . , } set mappings D(v) sets 1 , . . . , ,
respectively. = {hi , i}m
i=1 domain abstraction if, set
cost functions {costi : R0+ }m
i=1 satisfying
:


X
i=1

costi (a) cost(a),

(8)

have, 1 m,
abstraction mapping states
u V :

(
(s[u]),
(s)[u] =
s[u],

u=v
,
u 6= v

and, extending partial assignments V 0 V (s[V 0 ]) = (s)[V 0 ],
= hV, Ai , Ii , Gi , costi planning task
1. Ii = (I), Gi = (G),
2. Ai = {ai = hi (pre(a)), (eff(a))i | A},

3. action A,

costi (ai ) = costi (a).

(9)

say domain decomposition = hV, A, I, G, costi respect .
Theorem 6 Domain abstractions planning tasks additive implicit abstractions
tasks.
Proof: Let = hV, A, I, G, costi planning task = {hi , i}m
i=1 domain
abstraction = {1 , . . . , }. Let = (S, L, Tr, s0 , ? , $) transition
graph . 1 m, let Ti = (Si , Li , Tri , s0i , Si? , $i ) transition graph
. need show abstraction mapping Definition 2.
First, Definition 10
70

fiImplicit Abstraction Heuristics

s0i = Ii = (I) = (s0 ),
? G thus (s) (G) = Gi , providing us
(s) Si? .
Now, state action pre(a) s, (s) state
pre(ai ) = (pre(a)) (s). Thus, ai applicable (s), show
applying ai (s) results (s)Jai K = (sJaK).
1. effect variables v V(eff(a)) = V(eff(ai )), eff(ai ) (s)Jai K
eff(ai ) = (eff(a)) (sJaK).
2. variables v 6 V(eff(a)), sJaK[v] = s[v] (s)Jai K[v] =
(s)[v], thus
(s)Jai K[v] = (s)[v] = (s[v]) = (sJaK[v]) = (sJaK)[v].
Next, A, Eqs. 8 9

X

costi (ai ) =

i=1


X
i=1

costi (a) cost(a).

(10)

Now, let s, s0 pair states cost(s, s0 ) , let % = ha1 , . . . , al
sequence
labels along cheapest path s0 T. that, cost(s, s0 ) = cost(%) =
Pl
j
j=1 cost(a ). decomposition path actions Definition 10
(not
cheapest) path (s) (s0 ) Ti , thus cost(i (s), (s0 ))
Pl neccesarily
j
j=1 costi (a ), providing us

X
i=1

cost(i (s), (s0 ))

X
l
X
i=1 j=1

costi (aji ) =

l X

X
j=1 i=1

(10)

costi (aji )

l
X

cost(aj ) = cost(s, s0 ).

j=1


put notion domain abstraction framework implicit abstractions,
ready connect fork decompositions implicit abstraction heuristics. Given
FI-abstraction AFI = {hfv , vf i, hiv , vi i}vV planning task = hV, A, I, G, costi,
fv , associate root v CG(fv ) mappings fv = {fv,1 , . . . , fv,kv }
kv = O(poly(||||)) fv,i : D(v) {0, 1}, abstract fv
f i}kv ,
Afv = {hfv,i , v,i
i=1
iv , associate sink v CG(iv ) mappings iv = {iv,1 , . . . , iv,kv0 }
kv0 = O(poly(||||)) iv,i : D(v) {0, 1, . . . , bv,i }, bv,i = O(1),
k0

i} v .
abstract iv Aiv = {hiv,i , v,i
i=1

71

fiKatz & Domshlak

Theorem 3, Theorem 6, composition Theorem 2, immediately


kv0
kv
[ [
[
f

{hfv,i , v,i
AFI =
vf i} {hiv,i , v,i
vi i}
(11)
vV

i=1

i=1

additive implicit abstraction . Hence, Theorem 1,


kv0
kv
X X
X

hFI =
hi
hf +
vV

v,i

i=1

i=1

v,i

(12)

admissible estimate h , and, Theorems 4 5, hFI computable
time O(poly(||||)).
finalizes construction concrete family implicit abstraction heuristics.
illustrate mixture acyclic causal-graph domain abstractions above,
use running Logistics example. One bothersome question extent
abstracting fork decompositions using domain abstractions affects informativeness
heuristic estimate. Though generally degradation unavoidable, show
answer question sometimes somewhat surprising.
begin extreme setting, let domain abstractions roots forks
sinks inverted forks binary-valued domains. Among multiple options choosing mapping sets {fv } {iv }, use simple choice distinguishing different values variable v basis cost I[v] DTG(v, ).
Specifically, v V , set fv = iv , and, value D(v)
1 max0 D(v) d(I[v], 0 ),
(
0, d(I[v], ) <
fv,i () = iv,i () =
(13)
1, otherwise
example, problem fc1 decomposed (see domain transition graph c1
left Figure 1c) two problems, fc1 ,1 fc1 ,2 , binary abstract
domains c1 corresponding partitions {{A}, {B, C, D}} {{A, D}, {B, C}}
D(c1 ), respectively. yet another example, problem ip1 decomposed (see
domain transition graph p1 Figure 1d) six problems ip1 ,1 , . . . , ip1 ,6 along
abstractions D(p1 ) depicted Figure 5a. Now, given FI-decomposition
mappings {fv , iv }vV above, consider problem ip1 ,1 , obtained abstracting
along inverted fork p1 abstracting D(p1 ) using
(
0, {C}
ip1 ,1 () =
.
1, {A, B, D, E, F, G, c1 , c2 , c3 , t}
hard verify that, original actions affecting p1 , left ip1 ,1
actions conditioned c1 c2 . so, information lost3 remove
ip1 ,1 variables c3 t, well actions changing (only) variables,
3. information lost still keep either fork inverted fork variable .

72

fiImplicit Abstraction Heuristics



c



B

C



E

c

F

G

c

(a)


c



B

C





c

E

c

F

G



c

B

C



E

c

D(p1 ) fp1 ,1



c

F



G

B

C



E

c

c

D(p1 ) fp1 ,2

F

G

c

D(p1 ) fp1 ,3

(b)
Figure 5: Domain abstractions D(p1 ). (a) Binary-valued domain abstractions: values inside outside dashed contour mapped 0 1, respectively.
(b) Ternary-valued domain abstractions: values mapped
abstract value shown nodes color borderline.

redistribute cost removed actions representatives
originals . latter revision action cost partition obtained directly
replacing cost-partitioning steps corresponding Eqs. 3-4 8-9 single, joint
action cost partitioning applied final additive implicit abstraction AFI Eq. 11
satisfying

kv
X X
cost(a)

vV



0

X

costfv,i (fv,i (a0 )) +

i=1 a0 f (a)
G

kv
X

X


costiv,i (iv,i (a0 )) .

(14)

i=1 a0 (a)
G
v

v

follows, uniform action cost partition refer partition cost
action equally split among nonredundant representatives final additive
implicit abstraction.
Overall, computing hFI Eq. 12 binary-valued domain abstractions
7
uniform action cost partition provides us hFI (I) = 12 15
, knowing

original costs integers safely adjust h (I) = 13. Hence, even
severe domain abstractions above, estimate hFI example task
lower h2 .
Let us slightly refine domain abstractions sinks inverted forks
ternary range {0, 1, 2}. mappings {fv } remain unchanged, {iv } set
73

fiKatz & Domshlak



0, d(I[v], ) < 2i 1

D(v) : v,i () = 1, d(I[v], ) = 2i 1


2, d(I[v], ) > 2i 1

.

(15)

example, problem ip1 decomposed ip1 ,1 , . . . , ip1 ,3 along abstractions
D(p1 ) depicted Figure 5b. Applying computation hFI Eq. 12
new set domain abstractions gives hFI (I) = 15 12 , which, again, safely
adjusted hFI (I) = 16. Note value higher hFI = 15 obtained using
(generally intractable) pure fork-decomposition abstractions Eq. 6. first view,
outcome may seem counterintuitive domain abstractions applied fork
decomposition, one would expect coarser abstraction provide less precise estimates.
This, however, necessarily case employed action cost partition ad hoc.
instance, domain abstraction sink inverted fork may create independence
sink parent variables, exploiting domain-abstraction specific
independence relations leads targeted action cost partition via Eq. 14.
see surprising estimate improvement obtained, note
domain abstraction Eq. 15 applied example, truck-moving actions
drive-t-from-D-to-E drive-t-from-E-to-D appear three abstractions ft , ip1 ip2 ,
domain abstraction appear five abstractions ft,1 , ip1 ,1 , ip1 ,2 , ip1 ,3
ip2 ,1 . However, closer look action sets five abstractions reveals
dependencies p1 CG(ip1 ,1 ) CG(ip1 ,3 ), p2 CG(ip2 ,1 ) redundant,
thus keeping representatives move-D-E move-E-D corresponding abstract
tasks entirely unnecessary. Hence, all, two truck-moving actions appear
two post-domain-abstraction tasks. Moreover, abstractions truck-moving
actions fully counted, contrast predomain-abstraction tasks portion
cost actions allocated ip2 simply gets lost.

6. Experimental Evaluation: Take
evaluate practical attractiveness fork-decomposition heuristics, conducted empirical study wide sample planning domains International
Planning Competitions (IPC) 1998-2006, plus non-IPC Schedule-STRIPS domain.4
domains selected allow comparative evaluation other, baseline
state-of-the-art, approaches/planners, supported PDDL features
time evaluation.
Later formally prove that, ad hoc action cost partitions uniform
partition, none three fork decompositions Definition 9 dominated
two. Hence, implemented three additive fork-decomposition heuristics, hF ,
hI , hFI , within standard heuristic forward search framework Fast Downward
planner (Helmert, 2006) using algorithm full duplicate elimination. hF
heuristic corresponds ensemble (not clearly redundant) fork subgraphs
4. Schedule-STRIPS appears domains distribution IPC-2000. Later became aware
fact domain excluded competition encoding generated problems
various planners.

74

fiImplicit Abstraction Heuristics

domain



airport-ipc4
blocks-ipc2
depots-ipc3
driverlog-ipc3
freecell-ipc3
grid-ipc1
gripper-ipc1
logistics-ipc1
logistics-ipc2
miconic-strips-ipc2
mprime-ipc1
mystery-ipc1
openstacks-ipc5
pathways-ipc5
pipes-notank-ipc4
pipes-tank-ipc4
psr-small-ipc4
rovers-ipc5
satellite-ipc4
schedule-strips
tpp-ipc5
trucks-ipc5
zenotravel-ipc3

21
30
7
12
5
2
20
6
22
85
24
21
7
4
21
14
50
7
6
43
6
9
11

total

433

hF

11
17
2
9
3
1
5
3
21
45
17
16
7
4
9
6
47
5
6
42
5
5
8

%S
52
57
29
75
60
50
25
50
95
53
71
76
100
100
43
43
94
71
100
98
83
56
73
294

hI

14
15
2
10
2
1
5
2
15
42
17
15
7
4
11
6
48
6
6
35
5
5
9

%S
67
50
29
83
40
50
25
33
68
49
71
71
100
100
52
43
96
86
100
81
83
56
82
282

hFI

11
15
2
9
2
1
5
2
14
40
17
16
7
4
8
6
47
6
5
39
5
5
8

%S
52
50
29
75
40
50
25
33
64
47
71
76
100
100
38
43
94
86
83
91
83
56
73

MS -104

MS -105


19
18
7
12
5
2
7
4
16
54
21
17
7
3
20
13
50
6
6
22
6
6
11


17
20
4
12
1
2
7
5
21
55
12
13
7
4
12
7
50
7
6
1
6
5
11

274

%S
90
60
100
100
100
100
35
67
73
64
88
81
100
75
95
93
100
86
100
51
100
67
100
332

%S
81
67
57
100
20
100
35
83
95
65
50
62
100
100
57
50
100
100
100
2
100
56
100
285

HSPF


15
30
4
9
5
0
6
3
16
45
8
11
7
4
13
7
50
6
5
11
5
9
8

%S
71
100
57
75
100
0
30
50
73
53
33
52
100
100
62
50
100
86
83
26
83
100
73

277

Gamer

11
30
4
11
2
2
20
6
20
85
9
8
7
4
11
6
47
5
6
3
5
3
10

%S
52
100
57
92
40
100
100
100
91
100
38
38
100
100
52
43
94
71
100
7
83
33
91
315

blind

18
18
4
7
4
1
7
2
10
50
19
18
7
4
14
10
48
5
4
29
5
5
7

%S
86
60
57
58
80
50
35
33
45
59
79
86
100
100
67
71
96
71
67
67
83
56
64
296

hmax

20
18
4
8
5
2
7
2
10
50
24
18
7
4
17
10
49
6
5
31
6
7
8

%S
95
60
57
67
100
100
35
33
45
59
100
86
100
100
81
71
98
86
83
72
100
78
73
318

Table 1: summary experimental results. Per domain, denotes number
tasks solved planner. Per planner/domain, number tasks solved
planner given absolute number (s) percentage
solved planners (%S). last row summarize number solved
instances.

causal graph, domains roots abstracted using leave-one-value-out
binary-valued domain decompositions follows:
(
0, =
D(v) : fv,i () =
.
(16)
1, otherwise
hI heuristic inverted fork subgraphs, domains
sinks abstracted using distance-to-goal-value ternary-valued domain decompositions5 Eq. 17.


0, d(, G[v]) < 2i 1

D(v) : v,i () = 1, d(, G[v]) = 2i 1 .
(17)


2, d(, G[v]) > 2i 1
ensemble hFI heuristic union hF hI . action cost
partition three heuristics call uniform.
make comparison two baseline approaches, namely blind heuristic
value 0 goal states 1 otherwise, hmax heuristic (Bonet & Geffner,
2001), well state-of-the-art abstraction heuristics, represented mergeand-shrink abstractions Helmert et al. (2007). latter constructed
5. distance-from-initial-value reasonable evaluation initial state, leave-onevalue-out fork roots distance-to-goal-value inverted-fork sinks typically much
attractive evaluation states examined .

75

fiKatz & Domshlak

linear, f -preserving abstraction strategy proposed authors, two
fixed bounds size abstract state spaces, notably |S | < 104 |S | < 105 .
four (baseline merge-and-shrink) heuristics implemented Helmert et al.
(2007) within planning system fork-decomposition heuristics, allowing
fairly unbiased comparison. compare Gamer (Edelkamp & Kissmann,
2009) HSPF (Haslum, 2008) planners, winner runner-up sequential
optimization track IPC-2008. algorithmic side, Gamer based bidirectional
blind search using sophisticated symbolic-search techniques, HSPF uses
additive critical-path heuristic. experiments conducted 3GHz Intel E8400
CPU 2 GB memory, using 1.5 GB memory limit 30 minute timeout.
exception Gamer, used similar machines 4 GB memory 2
GB memory limit; done provide Gamer environment
configured.
Table 1 summarizes experimental results terms number tasks solved
planner. impression fork-decomposition heuristics Table 1 somewhat
mixed. one hand, performance three fork-decomposition based planners
comparable one settings merge-and-shrink heuristic, clearly
testifies framework implicit abstractions theoretical interest only.
hand, planners, except merge-and-shrink heuristic
|S | < 104 , failed outperform baseline hmax heuristic. important
us that, unfortunately, three fork-decomposition based planners failed outperform
even basic blind search.
This, however, end story fork-decomposition heuristics.
hope found detailed results Tables 9-14 appendix. appears
Table 10, on, e.g., Logistics-ipc2 domain, hF almost consistently leads expanding
fewer search nodes (better two merge-and-shrink heuristics
domain) MS -105 , difference hitting four orders magnitude. However, time
complexity hF per search node substantially higher MS -105 ,
two expanding rate approximately 40 100000 nodes per second, respectively.
outcome simple: time limits (and memory limit 1.5 GB) hF
solves tasks Logistics-ipc2 MS -105 (task 12-1 solved hF 2519.01
seconds), standard time limit half hour used Table 10.
follows examine possibility exploiting informativeness fork-decomposition
heuristics falling trap costly per-node heuristic evaluation.

7. Back Theory: h-Partitions Databased Implicit Abstraction
Accuracy low time complexity desired yet competing properties heuristic
functions. many powerful heuristics, abstraction heuristics particular, computing
h(s) state isolation impractical: computing h(s) polynomial
description size , often efficient enough performed search node.
However, costly heuristics obstacle largely overcome sharing
computation evaluations h different states. possible,
shared parts computing h problem states precomputed memorized
search, reused search evaluations h different
76

fiImplicit Abstraction Heuristics

states. mixed offline/online heuristic computation henceforth called h-partition,
define time complexity h-partition complexity computing h
set states. Given subset k problem states 0 S, h-partitions time
complexity computing {h(s) | 0 } expressed O(X + kY ), O(X) O(Y )
are, respectively, complexity (offline) pre-search (online) per-node parts
computing h(s).
days h-partitions adopted various optimal planners using criticalpath heuristics hm > 1 (Haslum et al., 2005), landmark heuristics hL hLA (Karpas
& Domshlak, 2009), PDB merge-and-shrink abstraction heuristics (Edelkamp,
2001; Helmert et al., 2007). Without effective h-partitions, optimal search
heuristics would scale well, h-partitions constitutes state
art cost-optimal planning. instance, attractive property PDB abstractions
complexity natural h -partition. Instead computing h (s) = h ((s))
scratch evaluated state (impractical tiny projections), practice
precompute store h (s0 ) abstract states s0 , per-node
computation h (s) boils hash-table lookup h ((s)) perfect hash
function. terms, time space complexity PDB h -partition set
k states O(|S |(log(|S |) + |A|) + k) O(|S |), respectively. precisely
makes PDB heuristics attractive practice. respect, picture mergeand-shrink abstractions much similar. order composites
formed choice abstract states contract crucial complexity
natural h -partitions, time space complexity concrete linear abstraction
strategy Helmert et al. respectively O(|V ||S |(log(|S |) + |A|) + k |V |) O(|S |).
Similarly PDB abstractions, per-node computation h (s) merge-and-shrink
abstraction lookup data structure storing h ((s)) abstract states
(s) . Hence, pre-search computation MS abstractions
costly PDBs, online part computing heuristic values still extremely
efficient. per-node efficiency provides merge-and-shrink heuristics impressive
practical effectiveness numerous IPC domains (Helmert et al., 2007).
sum up, say fixed size abstract spaces induced explicit abstractions PDBs merge-and-shrink limitation key obtaining
effective h-partitions. contrast, escaping limitation implicit abstractions might
trap us pay high price search-node evaluation. show, however, time-per-node complexity bottleneck fork-decomposition heuristics
successfully overcome. Specifically, show equivalent PDBs mergeand-shrink notion database exists fork-decomposition abstractions well, despite
exponential-size abstract spaces. course, unlike PDB merge-and-shrink
abstractions, databased fork-decomposition heuristics (and cannot) provide us
purely lookup online computation h (s). online part h -partition
nontrivial sense complexity cannot O(1). comes next
prove existence effective h-partitions fork inverted fork abstractions.
Section 8 empirically show h-partitions lead fast pre-search
per-node computations, allowing informativeness fork-decomposition heuristics
successfully exploited practice.

77

fiKatz & Domshlak

Theorem 7 Let = hV, A, I, G, costi planning task fork causal graph rooted
binary-valued variable r. exists h -partition that, set k states,
time space complexity h -partition is, respectively, O(d3 |V | + |Ar | + kd|V |)
O(d2 |V |), = maxv D(v).
Proof: proof modification polynomial-time algorithm computing
h (s) state task used proof Theorem 4 (Tractable Forks). Given
state s, let D(r) = {0, 1}, s[r] = 0. follows, two roots
values D(r), denotes opposite value 1 ; (r), [(r)], DTG 0v DTG 1v
defined exactly proof Theorem 4.
(1) two values r D(r) root variable, leaf variable v V \ {r},
pair values , 0 D(v), let p,0 ;r cost cheapest sequence
actions changing v 0 provided r : r . whole set {p,0 ;r } leaves
v V \{r} computed straightforward variant all-pairs-shortest-paths,
Floyd-Warshall algorithm DTG v r time O(d3 |V |).
(2) leaf variable v V \ {r}, 1 + 1, D(v), let g;i cost
cheapest sequence actions changing s[v] provided sequence [(r)],
|| = i, value changes r. values {p,0 ;r } step (1), set {g;i }
given solution recursive equation


ps[v],;s[r] ,
i=1






min g0 ;i1 + p0 ,;s[r] ,
1 < , odd
0

g;i =
,

0 ;i1 + p0 ,;s[r] ,
min
g
1
<



,


even



0


g
< + 1
;i1 ,
= |D(v)| + 1. Given that,

h (s) =

min

cost() +

[(r)]


X

gG[v];|| ,

vV \{r}

P||
cost() = i=2 cost(a[i] ), a[i] cheapest action changing
value r [i 1] [i].
Note step (1) already state-independent, heavy step (2) not. However,
state dependence step (2) mostly overcome follows. v V \ {r},
D(v), 1 + 1, r D(r), let g;i (r ) cost cheapest sequence
actions changing G[v] provided value changes r induce 0/1 sequence length
starting r . set {g;i (r )} given solution recursive equation


,
i=1

p,G[v];
r

g0 ;i1 (r ) + p,0 ;r , 1 <
,
g;i (r ) = min
0


g
< + 1
;i1 (r ),
78

(18)

fiImplicit Abstraction Heuristics

24

0

1

r ||

24

0
1

1
1

1

0
100

1
0

1 1
1
50

1

2

3
0
100

3
0

0

1

0
100

0

0

2

1

1 1
1
50

1

5
0

1

1

4

1
2
3
4
5
6
7
1
2
3
4
5
6
7

cost()

v :0

v :1 v :2 v :3

u:0

u:1 u:2 u:3 u:4 u:5

0
24
48
72
96
120
144
0
24
48
72
96
120
144

100
100
100
100
3
3
3

100
3
3
3
3
3


2
2
2
2
2
2


2
2
2
2
2

201
201
53
53
5
5
5

101
101
53
53
5
5

200 101 100
200 101 100
102 3
2
102 3
2
4
3
2
4
3
2
4
3
2

52 51
2
52 51
2
4
3
2
4
3
2
4
3
2
4
3
2


1
1
1
1
1
1
1
1
1
1
1
1
1

0
0
0
0
0
0
0
0
0
0
0
0
0
0

(a)

1
1
1
1
1
1
1

1
1
1
1
1
1

0
0
0
0
0
0
0
0
0
0
0
0
0
0

(b)

Figure 6: database fork-structured problem binary-valued root variable r
two children v u, G[r] = 0, G[v] = 3, G[u] = 5. (a) depicts
domain transition graphs r (top), v (middle), u (bottom); numbers
edge precondition r cost respective
action. (b) depicts database created algorithm. instance, entry
row r : 0 || = 5 column v : 0 captures value gv:0;5 (r : 0) computed
Eq. 18. shaded entries examined online computation
h (r : 0, v : 0, u : 0).
solved time O(d3 |V |). Note equation independent
evaluated state s, yet {g;i (r )} allow computing h (s) given state via

h (s) =

min



cost() +

[(r|s[r])]

X

gs[v];|| (s[r])

(19)

vV \{r}

(r|r ) defined similarly (r) respect initial value r r.
new formulation, computation performed online, per
search node, final minimization [(r|s[r])] Eq. 19, lightest
part whole algorithm anyway. major computations, notably {p,0 ;r }
{g;i (r )}, performed offline shared evaluated states.
space required store information O(d2 |V |) contains fixed amount
information per pair values variable. time complexity offline computation O(d3 |V | + |Ar |); |Ar | component stems precomputing costs cost().
time complexity online computation per state O(d|V |); |V | comes
internal summation comes size [(r|s[r])].

Figure 6b shows database created fork-structured problem binary-valued
root r, two children v u, G[r] = 0, G[v] = 3, G[u] = 5; domain transition
79

fiKatz & Domshlak

graphs v u depicted Figure 6(a). Online computation h (s) Eq. 19
= (r : 0, v : 0, u : 0) sums shaded entries four rows
entries, minimizes resulting four sums, minimum obtained
row r : 0 || = 5.
Theorem 8 Let = hV, A, I, G, costi planning task inverted fork causal graph
sink r |D(r)| = b = O(1). exists h -partition that, set
k states, time space complexity h -partition O(b|V ||Ar |b1 + d3 |V | +
k|V ||Ar |b1 ) O(|V ||Ar |b1 + d2 |V |), respectively, = maxv D(v).
Proof: proof Theorem 7, proof Theorem 8 based modification
polynomial-time algorithm computing h (s) used proof Theorem 5
(Tractable Inverted Forks).
(1) parent variable v V \ {r}, pair values , 0 D(v), let p,0
cost cheapest sequence actions changing 0 . whole set {p,0 }
computed using Floyd-Warshall algorithm domain transition graph
v time O(d3 |V |).
(2) Given state s, cycle-free path = ha1 , . . . , s[r] G[r] DTG(v, ),
let g cost cheapest plan based , cheapest paths
{p,0 } computed step (1). g computed
g =


X
i=1

cost(ai ) +


X
X

pprei [v],prei+1 [v] ,

i=0 vV \{r}

pre0 , . . . , prem+1 values required parents r along path .
is, v V \ {r}, 0 + 1,


s[v],
i=0



G[v],
= + 1, G[v] specified
prei [v] =
.

pre(a
)[v],
1



m,

pre(a
)[v]

specified





pre [v]
otherwise
i1
that, h (s) = min g .
Note step (1) state-independent, step (2) not. However, dependence
step (2) evaluated state substantially relaxed. O(1)
different values r, possible consider cycle-free paths G[r] values r.
path , parent variable v V \ {r}, know first value
v required would be. Given that, precompute cost-optimal plans induced
assuming parents start first required values. remainder
computation h (s) delegated online, modified step (2) follows.
r D(r) cycle-free path = ha1 , . . . , r G[r]
DTG(r, ), let proxy state


v=r
r ,
[v] = G[v],
1 : pre(ai )[v] unspecified ,


pre(ai )[v], = argminj {pre(aj )[v] specified}
80

fiImplicit Abstraction Heuristics

is, nontrivial part captures first values V \ {r} required along .6 Given
that, let g cost cheapest plan based , cheapest
paths {p,0 } computed (1). g computed
g =


X





cost(ai ) +

i=1

X

pprei [v],prei+1 [v] ,

vV \{r}

where, v V \ {r}, 1 + 1,


[v],
i=1



G[v],
= + 1, G[v] specified
prei [v] =
.

pre(ai )[v], 2 m, pre(ai )[v] specified



pre [v], otherwise
i1
Storing pairs (g , ) accomplishes offline part computation. Now, given
search state s, compute

h (s) =

min

s.t.
[r]=s[r]



g +

X

ps[v],s [v] .

(20)

vV \{r}

number cycle-free paths G[r] DTG(r, ) (|Ar |b1 ), g
path computed time O(b|V |). Hence, overall offline time complexity
O(b|V ||Ar |b1 + d3 |V |), space complexity (including storage proxy states
) O(|V ||Ar |b1 + d2 |V |). time complexity online computation per state via
Eq. 20 O(|V ||Ar |b1 ); |V | comes internal summation |Ar |b1 upper
bound number cycle-free paths s[r] G[r].

Figure 7(b) shows database created inverted fork structured problem
ternary-valued sink variable r, two parents u v, G[r] = 2, G[u] = 0, G[v] = 2.
domain transition graphs u v depicted top Figure 7(a); actual
identities actions affecting two parents important here. actions affecting
sink r
a1 = h{u : 1, r : 0}, {r : 1}i
a2 = h{v : 1, r : 0}, {r : 1}i

a3 = h{u : 2, r : 1}, {r : 2}i

a4 = h{v : 1, r : 1}, {r : 2}i.
domain transition graph r depicted bottom Figure 7(a). Online computation h (s) Eq. 20 = (r : 0, v : 0, u : 0) sums shaded entries
four rows entries, minimizes resulting four sums,
minimum obtained lowest row.
81

fiKatz & Domshlak

0

2

50

0

50

50

2

1
1

1

100

1

u:2

u:1

1

1

0

1

2

v:1

v:1

50

100

r



ha1 , a3
0 ha1 , a4
ha2 , a3
ha2 a4
ha3
1
ha4

(a)



g

u:0

u:1 u:2

v :0

u : 1, v : 2
u : 1, v : 1
u : 2, v : 1
u : 0, v : 1
u : 2, v : 2
u : 0, v : 1

202
153
153
152
101
102

100
100
50
0
50
0

0
50
0
50
100 0
50 100
100 0
50 100

1
101
101
101
1
101

v :1 v :2
2
0
0
0
2
0

0
100
100
100
0
100

(b)

Figure 7: database inverted fork-structured problem O(1) bounded sink
variable r two parents u v, G[r] = 2, G[u] = 0, G[v] = 2.
(a) depicts domain transition graphs u (top left), v (top right), r
(bottom); numbers edge preconditions
cost respective action, respectively. (b) depicts database created
algorithm. shaded entries examined online computation
h (r : 0, u : 0, v : 0).

8. Experimental Evaluation: Take II
evaluate practical attractiveness databased fork-decomposition heuristics,
repeated empirical evaluation Section 6, databased versions
heuristics. detailed results evaluation relegated Tables 15-20
appendix, summarized Table 2. domain, column
captures number tasks domain solved least one planner
suite. Per planner/domain, number tasks solved planner given
absolute number (s) percentage solved planners
(%S). Boldfaced results indicate best performance within corresponding domain.
last three rows summarize performance planners via three measures.
first number tasks solved 23 domains; basically performance
evaluation measure used optimization track IPC-2008. domains equally
challenging equally discriminate planners performance, second
domain-normalized performance measure
s(p) =

X
domain

#tasks solved planner p
.
#tasks solved planners

Finally, third measure corresponds number domains w planner
question solved least many tasks planner.
Overall, Table 2 clearly suggests heuristic search databased fork-decomposition
heuristics favorably competes state art optimal planning. particular,
6. ease presentation, omit case v required neither along , goal;
variables simply ignored accounting cost .

82

fiImplicit Abstraction Heuristics

domain



airport-ipc4
blocks-ipc2
depots-ipc3
driverlog-ipc3
freecell-ipc3
grid-ipc1
gripper-ipc1
logistics-ipc2
logistics-ipc1
miconic-strips-ipc2
mprime-ipc1
mystery-ipc1
openstacks-ipc5
pathways-ipc5
pipes-notank-ipc4
pipes-tank-ipc4
psr-small-ipc4
rovers-ipc5
satellite-ipc4
schedule-strips
tpp-ipc5
trucks-ipc5
zenotravel-ipc3

22
30
7
12
5
2
20
22
7
85
24
21
7
4
21
14
50
7
6
46
6
9
11

total

w

438

hF

22
21
7
12
5
2
7
22
6
51
23
21
7
4
17
11
49
6
6
46
6
6
11

%S
100
70
100
100
100
100
35
100
86
60
96
100
100
100
81
79
98
86
100
100
100
67
100

368
20.56
14

hI

20
18
4
12
4
1
7
16
4
50
22
18
7
4
15
9
49
7
6
40
6
7
11

%S
91
60
57
100
80
50
35
73
57
59
92
86
100
100
71
64
98
100
100
87
100
78
100

337
18.38
7

hFI

21
18
7
12
4
1
7
16
5
50
21
21
7
4
16
9
49
6
6
46
6
7
11

%S
95
60
100
100
80
50
35
73
71
59
88
100
100
100
76
64
98
86
100
100
100
78
100

350
19.13
9

MS -104

MS -105


19
18
7
12
5
2
7
16
4
54
21
17
7
3
20
13
50
6
6
22
6
6
11


17
20
4
12
1
2
7
21
5
55
12
13
7
4
12
7
50
7
6
1
6
5
11

%S
86
60
100
100
100
100
35
73
57
64
88
81
100
75
95
93
100
86
100
48
100
67
100

332
19.07
11

%S
77
67
57
100
20
100
35
95
71
65
50
62
100
100
57
50
100
100
100
2
100
56
100

285
16.64
9

HSPF


15
30
4
9
5
0
6
16
3
45
8
11
7
4
13
7
50
6
5
11
5
9
8

%S
68
100
57
75
100
0
30
73
43
53
33
52
100
100
62
50
100
86
83
24
83
100
73

277
15.45
6

Gamer

11
30
4
11
2
2
20
20
6
85
9
8
7
4
11
6
47
5
6
3
5
3
10

%S
50
100
57
92
40
100
100
91
86
100
38
38
100
100
52
43
94
71
100
7
83
33
91

315
16.66
8

blind

18
18
4
7
4
1
7
10
2
50
19
18
7
4
14
10
48
5
4
29
5
5
7

%S
82
60
57
58
80
50
35
45
29
59
79
86
100
100
67
71
96
71
67
63
83
56
64

296
15.58
2

hmax

20
18
4
8
5
2
7
10
2
50
24
18
7
4
17
10
49
6
5
31
6
7
8

%S
91
60
57
67
100
100
35
45
29
59
100
86
100
100
81
71
98
86
83
67
100
78
73

318
17.66
6

Table 2: summary experimental results databased versions forkdecomposition heuristics. Per domain, denotes number tasks solved
planner. Per planner/domain, number tasks solved planner
given absolute number (s) percentage solved
planners (%S). Boldfaced results indicate best performance within
corresponding domain. last three rows summarize number solved instances, domain-normalized measure solved instances (s), number
domains planners achieved superior performance (w).

forks heuristic hF exhibited best overall performance according
three measures. terms absolute number solved instances, three
fork-decomposition heuristics outperformed planners suite. contribution
databasing success fork-decomposition heuristics dramatic. Looking
back results fully online heuristic computation depicted Table 1, note
total number solved instances fork-decomposition heuristics hF , hI , hFI
increased 74, 55, 76, respectively, made whole difference.
performed comparative evaluation planning domains
recent IPC-2008. IPC-2008 domains differ previous domains actions
various costs, and, importantly, many actions zero cost. latter
issue heuristic-search planners heuristic functions cannot differentiate
subplans cost zero, differ length. case, comparative
side evaluation IPC-2008 domains differ several points previous
one. First, neither merge-and-shrink hmax heuristics, implementation
supporting arbitrary action costs. Hence, comparison Gamer, HSPF ,
blind search. Second, ensure admissibility blind search, latter
modified return non-goal states cost cheapest applicable action. Finally,
planners run 3GHz Intel E8400 CPU 4 GB memory, using 2 GB memory
83

fiKatz & Domshlak

domain



elevators-strips-ipc6
openstacks-strips-ipc6
parcprinter-strips-ipc6
pegsol-strips-ipc6
scanalyzer-strips-ipc6
sokoban-strips-ipc6
transport-strips-ipc6
woodworking-strips-ipc6

22
21
16
27
12
28
11
14

total

w

152

hF

18
19
14
27
12
25
11
8

%S
82
90
88
100
100
89
100
57

134
7.06
3

hI

14
19
13
27
6
26
11
8

%S
64
90
81
100
50
93
100
57

124
6.35
2

hFI

15
19
13
27
6
27
11
8

%S
68
90
81
100
50
96
100
57

126
6.43
3

HSPF


7
21
16
27
6
13
9
9

%S
32
100
100
100
50
46
82
64

108
5.74
3

Gamer

22
19
9
24
11
20
11
14

%S
100
90
56
89
92
71
100
100

130
6.99
3

blind

11
19
10
27
12
20
11
7

%S
50
90
63
100
100
71
100
50

117
6.24
3

Table 3: summary experimental results. Per domain, denotes number
tasks solved planner. Per planner/domain, number tasks solved
planner given absolute number (s) percentage
solved planners (%S). Boldfaced results indicate best performance
within corresponding domain. last three rows summarize number
solved instances, domain-normalized measure solved instances (s),
number domains planners achieved superior performance (w).

limit 30 minute timeout. results evaluation summarized Table 3;
detailed results refer reader Tables 21-22 appendix. Overall,
results show fork-decomposition heuristics much competitive
IPC-2008 domains well.

9. Formal Analysis: Asymptotic Performance Ratios
Empirical evaluation concrete set benchmark tasks standard important
methodology assessing effectiveness heuristic estimates: allows us study
tradeoff accuracy heuristics complexity computing them.
However, rightfully noted Helmert Mattmuller (2008), evaluations almost
never lead absolute statements type Heuristic h well-suited solving problems benchmark suite X, relative statements type Heuristic h
expands fewer nodes heuristic h0 benchmark suite X. Moreover, one would probably obtain formal evidence effectiveness heuristic proceeding
implementation, especially complicated heuristic procedures underlying proofs Theorems 7 8. formal analysis effectiveness
fork-decomposition heuristics using methodology suggested exploited Helmert
Mattmuller motivated primarily desire formal evidence.
Given planning domain heuristic h, Helmert Mattmuller (2008) consider
asymptotic performance ratio h D. goal find value (h, D) [0, 1]

(1) states problems D, h(s) (h, D) h (s) + o(h (s)),
(2) family problems {n }nN solvable, non-goal states {sn }nN
sn n , limn h (sn ) = , h(sn ) (h, D) h (sn ) + o(h (sn )).
84

fiImplicit Abstraction Heuristics

Domain

h+

hk

hPDB

hPDB
add

hF

hI

hFI

Gripper
Logistics
Blocksworld
Miconic-Strips
Satellite

2/3
3/4
1/4
6/7
1/2

0
0
0
0
0

0
0
0
0
0

2/3
1/2
0
1/2
1/6

2/3
1/2
0
5/6
1/6

0
1/2
0
1/2
1/6

4/9
1/2
0
1/2
1/6

Table 4: Performance ratios multiple heuristics selected planning domains; ratios
h+ , hk , hPDB , hPDB
add Helmert Mattmuller (2008).

words, h never worse (, domain, )h (plus sublinear term),
become bad (h, D) h (plus sublinear term) arbitrarily large inputs; note
existence uniqueness (h, D) guaranteed h D.
Helmert Mattmuller (2008) study asymptotic performance ratio standard admissible heuristics set well-known benchmark domains first four
IPCs. results Gripper, Logistics, Blocksworld, Miconic, Satellite
shown first four columns Table 4.
h+ estimate corresponds optimal cost solving well-known delete
relaxation original planning task, generally NP-hard compute (Bylander, 1994).
hk , k N+ , family heuristics based relaxation cost
achieving partial assignment approximated highest cost achieving
sub-assignment size k (Haslum & Geffner, 2000); computing hk exponential
k.
hPDB hPDB
add heuristics regular (maximized over) additive pattern
database heuristics size pattern assumed O(log(n))
n = |V |, and, importantly, choice patterns assumed optimal.
results provide us baseline evaluating fork-decomposition heuristics
hI , hFI . First, however, Theorem 9 shows three heuristics worth
analyzing alone strictly informative two, depending
planning task and/or state evaluated.7
hF ,

Theorem 9 (Undominance) uniform action cost partition, none heuristic
functions hF , hI , hFI dominates another.
Proof: proof example two tasks, 1 2 , illustrate following
two cases: hF (I) > hFI (I) > hI (I) hF (I) < hFI (I) < hI (I). two tasks
defined set binary-valued variables V = {v1 , v2 , v3 , u1 , u2 , u3 },
initial state = {v1 : 0, v2 : 0, v3 : 0, u1 : 0, u2 : 0, u3 : 0}, goal
7. Theorem 9 formulated proven uniform action cost partition use throughout
paper, including experiments. per-step optimal action cost partitions (Katz & Domshlak, 2010),
trivial show hFI dominates hF hI planning tasks.

85

fiKatz & Domshlak

A1

u1

u2

u3

v1

v2

v3

a1
a2
a3
a4
a5
a6
a7
a8
a9

h{v1 : 0, u1 : 0, u2 : 0, u3 : 0}, {v1 : 1}i
h{v2 : 0, u1 : 1, u2 : 0, u3 : 1}, {v2 : 1}i
h{v3 : 0, u1 : 1, u2 : 1, u3 : 0}, {v3 1}i
h{u1 : 0}, {u1 : 1}i
h{u1 : 1}, {u1 : 0}i
h{u2 : 0}, {u2 : 1}i
h{u2 : 1}, {u2 : 0}i
h{u3 : 0}, {u3 : 1}i
h{u3 : 1}, {u3 : 0}i

(a)

1
F

1


1


1/3
1/3
1/3
1
1
1
1
1
1

1
1
1
1/3
1/3
1/3
1/3
1/3
1/3

1/4
1/4
1/4
1/4
1/4
1/4
1/4
1/4
1/4

(c)

u1

u2

u3

v1 v2 v3

v1 v2 v3

v1 v2 v3

Guf 1

Guf 2

Guf 3

u1 u2 u3

u1 u2 u3

u1 u2 u3

v1

v2

v3

Gvi 1

Gvi 2

Gvi 3

A2
a1
a2
a3
a4
a5
a6
a7
a8
a9
a10
a11
a12

(b)

h{v1 : 0, u1 : 1}, {v1 : 1}i
h{v1 : 0, u2 : 1}, {v1 : 1}i
h{v1 : 0, u3 : 1}, {v1 : 1}i
h{v2 : 0, u1 : 1}, {v2 : 1}i
h{v2 : 0, u2 : 1}, {v2 : 1}i
h{v2 : 0, u3 : 1}, {v2 : 1}i
h{v3 : 0, u1 : 1}, {v3 : 1}i
h{v3 : 0, u2 : 1}, {v3 : 1}i
h{v3 : 0, u3 : 1}, {v3 : 1}i
h{u1 : 0}, {u1 : 1}i
h{u2 : 0}, {u2 : 1}i
h{u3 : 0}, {u3 : 1}i

2
F

2


2


1/3
1/3
1/3
1/3
1/3
1/3
1/3
1/3
1/3
1
1
1

1
1
1
1
1
1
1
1
1
1/3
1/3
1/3

1/4
1/4
1/4
1/4
1/4
1/4
1/4
1/4
1/4
1/4
1/4
1/4

(d)

Figure 8: Illustrations proof Theorem 9: (a) causal graphs 1 2 , (b) fork
inverted fork subgraphs (same) causal graph 1 2 ,
action sets (c) 1 (d) 2 , well costs action representatives
abstract problem along subgraphs. Considering example
first row table (c), action a1 1 single representative
three fork abstractions, well representative inverted-fork abstraction
1G . Hence, cost representatives F-decomposition 1/3,
v1

cost sole representative I-decomposition 1.

G = {v1 : 1, v2 : 1, v3 : 1}. difference 1 2 action sets, listed
Figure 8c-d, actions unit-cost actions. two tasks induce identical
causal graphs, depicted Figure 8a. Hence, collections v-forks v-iforks
tasks identical; depicted Figure 8b. fractional costs tasks
action representatives corresponding abstract problems given Figure 8c-d.
Figure 9 shows optimal plans abstract problems F-decompositions 1F =
{1G f , 1G f , 1G f } 2F = {2G f , 2G f , 2G f }, I-decompositions 1I = {1G , 1G , 1G }
u1

u2

u3

u1

u2

u3

v1

v2

v3

2I = {2G , 2G , 2G }, FI-decompositions 1FI = 1F 1I 2FI = 2F 2I .
v1

v2

v3

last column tables captures estimates three heuristics initial
states 1 2 , respectively. Together, two cases show none forkdecomposition heuristic functions hF , hI , hFI dominates other, and, since
86

fiImplicit Abstraction Heuristics

h
hF

hI

h



task
1G f
u1
1G f
u2
1G f
u3
1G
v1
1G
v2
1G
v3
1G f
u1
1G f
u2
1G f
u3
1G
v1
1G
v2
1G
v

optimal plan

cost

ha1 , a4 , a2 , a3

2

ha1 , a2 , a6 , a3

2

ha1 , a3 , a8 , a2

2

ha1

1

ha4 , a8 , a2

5/3

ha4 , a6 , a3

5/3

ha1 , a4 , a2 , a3

1

ha1 , a2 , a6 , a3

1

ha1 , a3 , a8 , a2

1

ha1

1/4

ha4 , a8 , a2

3/4

ha4 , a6 , a3

3/4

h(I)

h
hF

6

hI

4 31

4 43

h

3



task

optimal plan

2G f
u1
2G f
u2
2G f
u3
2G
v1
2G
v2
2G
v3
2G f
u1
2G f
u2
2G f
u3
2G
v1
2G
v2
2G
v

ha2 , a5 , a8

1

ha1 , a4 , a7

1

ha1 , a4 , a7

cost

h(I)
3

1

ha10 , a1

4/3

ha10 , a4

4/3

ha10 , a7

4/3

ha2 , a5 , a8

3/4

ha1 , a4 , a7

3/4

ha1 , a4 , a7

3/4

ha10 , a1

1/2

ha10 , a4

1/2

ha10 , a7

1/2

4

15/4

3

(a)

(b)

Figure 9: Illustrations proof Theorem 9: Optimal plans abstract problems (a) 1 , hF (I) > hFI (I) > hI (I), (b) 2 ,
hF (I) < hFI (I) < hI (I).

variables binary-valued, claim holds conjunction arbitrary variable
domain abstractions.

One conclusion Theorem 9 worth studying asymptotic performance
ratios three heuristics. last three columns Table 4 present results
hF , hI , hFI Gripper, Logistics, Blocksworld, Miconic, Satellite
domains. studied performance ratios max{hF , hI , hFI }, five
domains appear identical hF . (Note ratio max
necessarily identical max ratios, thus analysis worthwhile.) Taking
conservative position, performance ratios fork-decomposition heuristics
Table 4 worst-case sense
(i) neither optimize action cost partition (setting uniform rest
paper) eliminate clearly redundant abstractions,
(ii) use domain abstractions (up to) ternary-valued abstract domains only.
domains fork roots abstracted using leave-one-out binary-valued
domain decompositions Eq. 16 domains inverted-fork sinks
abstracted using distance-from-initial-value ternary-valued domain decompositions
Eq. 15.
Overall, results fork-decomposition heuristics Table 4 gratifying. First,
note performance ratios hk hPDB 0. every subgoal
set size k (for hk ) size log(n) (for hPDB ) reached number steps
depends k (respectively, log(n)), n, h (sn ) grows linearly n
five domains. leaves us hPDB
add state-of-the-art (tractable
87

fiKatz & Domshlak

and) admissible heuristic compare with. Table 4 shows asymptotic performance
F
ratio hF heuristic least good hPDB
add five domains, h
+
PDB
superior hPDB
add Miconic, getting quite close h . comparing hadd
fork-decomposition heuristics, crucial recall ratios devised Helmert
Mattmuller hPDB
add respect optimal, manually-selected set patterns.
contrast, selection variable subsets fork-decomposition heuristics completely
nonparametric, thus requires tuning abstraction-selection process.
rest section prove asymptotic performance ratios hF , hI ,

h Table 4 five domains. begin brief outline results
obtained. familiarity domains assumed. Next, domain addressed
detail: provide informal domain description well sas+ representation,
prove lower upper bounds ratios three heuristics.
Gripper Assuming n > 0 balls moved one room another, three
heuristics hF , hI , hFI account required pickup drop actions,
O(1)-portion move actions. However, former actions responsible 2/3
optimal-plan length (= cost). Now, basic uniform action-cost partition,
hF , hI , hFI account whole, O(1/n), 2/3 total pickup/drop
actions cost, respectively, providing ratios Table 4.8
Logistics optimal plan contains least many load/unload actions move actions,
three heuristics hF , hI , hFI fully account former, providing lower bound
1/2. instance three heuristics achieve exactly 1/2 consists two
trucks t1 , t2 , airplanes, one city, n packages initial goal
locations packages trucks pair-wise different.
Blocksworld Arguments similar Helmert Mattmuller (2008) hPDB
add .
Miconic three heuristics fully account loads/unload actions. addition, hF
accounts full cost move actions passengers initial locations,
half cost move actions. provides us lower
bounds 1/2 5/6, respectively. Tightness 1/2 hI hFI shown
task consisting n passengers, 2n + 1 floors, initial goal locations
pair-wise different. Tightness 5/6 hF shown task consisting n
passengers, n + 1 floors, elevator passengers initially floor n + 1,
passenger wishes get floor i.
Satellite length optimal plan problem n images taken k
satellites moved end-positions 6n + k. three heuristics fully
account image-taking actions one satellite-moving action per satellite
above, providing lower bound 61 . Tightness 1/6 three heuristics
shown task follows: Two satellites instruments {i}li=1 {i}2l
i=l+1 ,

respectively, l = n n. pair instruments {i, l + i} take images
modes {m0 , mi }. set directions {dj }nj=0 set image objectives
8. note slight modification uniform action-cost partition results ratio 2/3
three heuristics. optimizations, however, outside scope here.

88

fiImplicit Abstraction Heuristics

right

lef

robot

right
b1

b1



bn

...
f
Gright

lef
bn

...

b1

right

robot
bn

b1

f
Glef


(a)

...

robot

bn

f
Grobot

lef

b
Gbi , b Balls

(b)

Figure 10: Grippers (a) causal graph (b) corresponding collection v-forks
v-iforks

{oi }ni=1 that, 1 l, oi = (d0 , mi ) and, l < n, oi = (di , m0 ).
Finally, calibration direction pair instruments {i, l + i} di .
9.1 Gripper
domain consists one robot robot two arms Arms = {right, lef t}, two rooms
Rooms = {r1, r2}, set Balls n balls. robot pick ball arm
arm Arms arm empty, release ball b Balls arm arm arm currently
holds b, move one room another. balls robot initially room
r1, arms empty, goal move balls room r2. natural
description planning task sas+ follows.


Variables V = {robot} Arms Balls domains
D(robot) = Rooms

D(lef t) = D(right) = Balls {empty}

b Balls : D(b) = Rooms {robot}.

Initial state = {b : r1 | b Balls} {robot : r1, right : empty, lef : empty}.
Goal G = {b : r2 | b Balls}.
Actions
={M ove(r, r0 ) | {r, r0 } Rooms}

[

{P ickup(b, arm, r), Drop(b, arm, r) | b Balls, arm Arms, r Rooms},

move robot: ove(r, r0 ) = h{robot : r}, {robot : r0 }i,

pickup ball:
P ickup(b, arm, r) = h{b : r, arm : empty, robot : r}, {b : robot, arm : b}i,

drop ball: Drop(b, arm, r) = h{b : robot, arm : b, robot : r}, {b : r, arm : empty}i.

(parametric n) causal graph task depicted Figure 10a.
89

fiKatz & Domshlak

frobot

Action
0

ove(r, r )
P ickup(b, arm, r)
Drop(b, arm, r)

farm,empty

1
1
1

0
2
2

farm,b

farm,b0

0
2
2

0
1
1

farm0 ,
0
1
1

ib
1
2
2

ib0
1
1
1

F





1

1
n
1
n+1
1
n+1

1
n+1
1
3n+6
1
3n+6

1
2n+5
1
2n+5

Table 5: Number representatives original Gripper action abstract task,
well partition action costs representatives
frobot

fright,empty
fright,b
fright,b0
flef t,
ib
ib0

P ickup(b, right, r1) = h{robot : r1, b : r1}, {b : robot}i
P ickup(b, right, r1)1 = h{right : empty}, {right : b}i,
P ickup(b, right, r1)2 = h{right : b, b : r1}, {b : robot}i
P ickup(b, right, r1)1 = h{right : empty}, {right : b}i,
P ickup(b, right, r1)2 = h{right : b, b : r1}, {b : robot}i
P ickup(b, right, r1) = h{right : b, b : r1}, {b : robot}i
P ickup(b, right, r1) = h{right : b, b : r1}, {b : robot}i
P ickup(b, right, r1)1 = h{right : empty}, {right : b}i,
P ickup(b, right, r1)2 = h{right : b, robot : r1, b : r1}, {b : robot}i
P ickup(b, right, r1) = h{right : empty}, {right : b}i

Table 6: sets representatives original action P ickup(b, right, r1) abstract
tasks

9.1.1 Fork Decomposition
Since variables robot, right, lef goal value, collection v-forks
v-iforks Figure 10b. domains inverted fork sinks ternary valued.
domains fork roots abstracted Eq. 16 (leave one out), thus
F = {frobot } {fright, , flef t, | {empty} Balls},
= {ib | b Balls},

= {frobot } {fright, , flef t, | {empty} Balls} {ib | b Balls}.
original action, number representatives abstract task, well
cost assigned representative, listed Table 5. Table 6 illustrates derivation numbers via decomposition example action P ickup(b, right, r1)
fork decomposition abstractions. action one nonredundant representative
frobot , two representatives fright,empty fright,b , one representative
fright,b0 b0 Balls \ {b}, one representative flef t, Balls {empty},
two representatives ib , one representative ib0 b0 Balls \ {b}.
1
1
results cost 2n+5
representative F , n+1
representative ,
1
3n+6 representative .
Given that, optimal plans abstract tasks follows.
90

fiImplicit Abstraction Heuristics

h

task
frobot

hF

fright,
flef t,

hI

ib
frobot

hFI

fright,
flef t,
ib

optimal plan
hP ickup(b1 , right, r1), . . . , P ickup(bn , right, r1),
, ove(r1, r2), Drop(b1 , right, r2), . . . , Drop(bn , right, r2)i
hP ickup(b1 , lef t, r1), . . . , P ickup(bn , lef t, r1),
, Drop(b1 , lef t, r2), . . . , Drop(bn , lef t, r2)i
hP ickup(b1 , right, r1), . . . , P ickup(bn , right, r1),
, Drop(b1 , right, r2), . . . , Drop(bn , right, r2)i
hP ickup(b, right, r1)1 , P ickup(b, right, r1)2 , ove(r1, r2), Drop(b, lef t, r2)2
hP ickup(b1 , right, r1), . . . , P ickup(bn , right, r1), ove(r1, r2),
, Drop(b1 , right, r2), . . . , Drop(bn , right, r2)i
hP ickup(b1 , lef t, r1), . . . , P ickup(bn , lef t, r1),
, Drop(b1 , lef t, r2), . . . , Drop(bn , lef t, r2)i
hP ickup(b1 , right, r1), . . . , P ickup(bn , right, r1),
, Drop(b1 , right, r2), . . . , Drop(bn , right, r2)i
hP ickup(b, right, r1)1 , P ickup(b, right, r1)2 , ove(r1, r2), Drop(b, lef t, r2)2

cost

#

4n+5
2n+5

1

2n
2n+5

n+1

2n
2n+5

n+1

3
1
+ n
n+1
1
2n +
3n+6
n+1

n

2n
3n+6

n+1

2n
3n+6

n+1

3
3n+6

1
+ n+1

h(I)

2n 2n5
2n+5

4n+1
n+1

1
4n
3

+ 4n+6
3n+6

n

Assuming n > 0 balls moved one room another, cost optimal
plan original task 3n 1 n even, 3n n odd. Therefore,
asymptotic performance ratios heuristics hF , hI , hFI Gripper 2/3, 0, 4/9,
respectively.
9.2 Logistics
Logistics task consists k cities, x airplanes, trucks n packages.
city associated set Li = {li1 . . . , lii } locations within city; union

locations cities denoted L = ki=1 Li . addition, precisely one location
city airport, set airports LA = {l11 . . . , lk1 } L. truck
move within city located, airplanes fly airports.
airplanes denoted U = {u1 , . . . , ux }, trucks = {t1 , . . . , ty },
packages P = {p1 , . . . , pn }. Let Ti = {t | I[t] Li } denote trucks city i,
P = P1 P2 P3 P4 P5 denote partition packages follows:
package P1 = {p P | I[p], G[p] LA } initially airport
needs moved another airport,
package P2 = {p P | I[p] LA Li , G[p] Lj \ LA , 6= j} initially
airport needs moved non-airport location another city,
package P3 = {p P | I[p] Li , G[p] Li } needs moved within one
city,
package P4 = {p P | I[p] Li \ LA , G[p] LA \ Li } needs moved
non-airport location one city airport city,
package P5 = {p P | I[p] Li \ LA , G[p] Lj \ LA , 6= j} needs moved
non-airport location one city non-airport location another city.
natural Logistics task description sas+ follows.
Variables V = U P domains
u U : D(u) = LA ,

1 k, Ti : D(t) = Li ,

p P : D(p) = L U T.
91

fiKatz & Domshlak

u1 ux

t1

ty

u
p1 . . .

p1

pi pn
(a)

u1 . . . ux


pn

Guf , u U

p1 . . .

pn

Gtf ,
(b)

t1 . . . ty
p

Gpi , p P

Figure 11: Logisticss (a) causal graph (b) corresponding collection v-forks
v-iforks

Initial state (LA )x L1 Lk (L)n .
Goal G = {p1 : l1 , . . . , pn : ln } (L)n .
Actions
A=

k [ [
[

i=1 lLi tTi



[ [
lLA uU


{Lt(p, t, l), U t(p, t, l) | p P } {M t(t, l, l0 ) |, l0 Li \ {l}}


{La(p, u, l), U a(p, u, l) | p P } {M a(u, l, l0 ) | l0 LA \ {l}} ,


load package p onto truck location l: Lt(p, t, l) = h{p : l, : l}, {p : t}i,
unload package p truck location l: U t(p, t, l) = h{p : t, : l}, {p : l}i,
move truck location l location l0 : t(t, l, l0 ) = h{t : l}, {t : l0 }i,
load package p onto airplane u l: La(p, u, l) = h{p : l, u : l}, {p : u}i,
unload package p airplane u l: U a(p, u, l) = h{p : u, u : l}, {p : l}i,
move airplane u location l l0 : a(u, l, l0 ) = h{u : l}, {u : l0 }i.
(parametrized n, x, y) causal graph Logistics tasks depicted Figure 11a.
9.2.1 Fork Decomposition
Since variables u U goal value, collection v-forks viforks Figure 11b. domains inverted-fork sinks abstracted
Eq. 15 (distance-from-initial-value), domains fork roots abstracted
92

fiImplicit Abstraction Heuristics

fu,l fu,l0 fu,l00 fu0 ,l ft,l ft,l0 ft,l00 ft0 ,l ip,m F

Action
0

t(t, l, l )
a(u, l, l0 )

0
1

0
1

0
0

0
0

1
0

1
0

0
0

0
0

1
2
1
2

1
1

1
1
ni 2+ni
1
1
ni 2+ni

(a)
I[p] LA Li
I[p] Li \ LA
p P1 p P2 p P3 p P3 p P4
p P5
fu,l ft,l ip0 ,m ip,1 ip,1 ip,2 ip,1 ip,1 ip,1 ip,2 ip,1 ip,2 ip,3 F

Action
l Li
l Lj
La(p, u, l), U a(p, u, l)

Lt(p, t, l), U t(p, t, l)

1
1
1

1
1
1

0
0
0

1
0
1

1
0
1

0
1
0

1
0
1

1
0
0

1
0
0

0
0
1

1
0
0

0
0
1

0
1
0

1
nf
1
nf
1
nf

1
1
1

1
nf +1
1
nf +1
1
nf +1

(b)
Figure 12: Number representatives original Logistics action abstract
task, well partition action costs representatives;
tables (a) (b) capture move load/unload actions, respectively

Eq. 16 (leave-one-out). Thus,
F =

[ [
uU lLA

=

=

{fu,l }

[

[

k [ [
[
i=1 tTi lLi

{ip,1 }
{ip,2 }
pP
pP2 P4 P5
[ [
uU lLA

{fu,l }



{ft,l },

[
pP5

k [ [
[
i=1 tTi lLi

{ip,3 },

{ft,l }

[
pP

{ip,1 }

[

{ip,2 }

pP2 P4 P5

[
pP5

{ip,3 }.

P
total number forks nf = |F | = |U | |LA | + ki=1 |Ti | |Li |, total number
inverted forks ni = |I | = |P1 | + 2 |P2 | + |P3 | + 2 |P4 | + 3 |P5 |. action
A, number representatives abstract task, well cost assigned
representative, given Figure 12. row tables Figure 12
corresponds certain Logistics action, column (except last three) represents
abstract task, entry captures number representatives action
corresponding task. last three columns show portion total cost
given action representative task, three heuristics question.
9.2.2 Lower Bound
Note optimal plan Logistics task contains least many load/unload
actions move actions. Thus, following lemma provides us lower bound
1/2 three heuristics question.

93

fiKatz & Domshlak

Lemma 1 Logistics task, hF , hI , hFI account full cost load/unload
actions required optimal plan task.
Proof: Logistics task, optimal plans task contain amount
load/unload actions package p P follows.

p P1 :

2 actions one load onto airplane, one unload airplane,

p P2 : 4 actions one load onto airplane, one unload airplane, one load
onto truck, one unload truck,
p P3 :

2 actions one load onto truck, one unload truck,

p P4 : 4 actions one load onto truck, one unload truck, one load onto
airplane, one unload airplane,
p P5 : 6 actions two loads onto trucks, two unloads trucks, one load
onto airplane, one unload airplane.
Consider fork-decomposition F . optimal plan abstract tasks
contain number load/unload actions exactly (the effects actions
remain unchanged tasks). cost representative load/unload
action n1f , nf abstract tasks. Therefore, heuristic hF fully accounts
cost required load/unload actions.
consider fork-decomposition . domain-decomposition
index abstraction, optimal plan abstract task ip,m include one load
one unload actions follows.
p P1 :

one load onto airplane one unload airplane,

p P2 , = 1:

one load onto airplane one unload airplane,

p P2 , = 2:

one load onto truck one unload truck,

p P3 :

one load onto truck one unload truck,

p P4 , = 1:

one load onto truck one unload truck,

p P4 , = 2:

one load onto airplane, one unload airplane,

p P5 , = 1:

one load onto truck one unload truck,

p P5 , = 2:

one load onto airplane one unload airplane,

p P5 , = 3:

one load onto truck one unload truck.

cost representative load/unload actions 1, thus heuristic hI fully
accounts cost required load/unload actions.
Finally, consider fork-decomposition . optimal plan forkstructured abstract tasks contain number load/unload actions F .
cost representative load/unload actions nf1+1 nf abstract
tasks. addition, load/unload actions appear exactly one inverted
fork-structured abstract task. Therefore heuristic hFI fully accounts cost
required load/unload actions.

94

fiImplicit Abstraction Heuristics

t1
p1

t2

...

pn

p1

Gtf1

t1

...

t2

pn

p
Gpi , p P

Gtf2

Figure 13: Collection v-forks v-iforks Logistics task used proof
upper bound 1/2

9.2.3 Upper Bound
instance three heuristics achieve exactly 1/2 consists two trucks t1 , t2 ,
airplanes, one city, n packages initial goal locations packages
pairwise different, trucks initially located yet another location.
+
formally, L = {li }2n
i=0 , = {t1 , t2 }, sas encoding Logistics task
follows.
Variables V = {t1 , t2 , p1 , . . . , pn } domains
: D(t) = L,

p P : D(p) = L T.
Initial state = {t1 : l0 , t2 : l0 , p1 : l1 , . . . , pn : ln }.
Goal G = {p1 : ln+1 , . . . , pn : l2n }.
Actions = {Lt(p, t, l), U t(p, t, l) | l L, T, p P } {M t(t, l, l0 ) | T, {l, l0 }
L}.
collection v-forks v-iforks task depicted Figure 13. domains
inverted-fork sinks abstracted Eq. 15 (distance-from-initial-value),
domains fork roots abstracted Eq. 16 (leave-one-out), therefore

F = {ft1 ,l ft2 ,l | l L},
= {ip,1 | p P },

= {ft1 ,l ft2 ,l | l L} {ip,1 | p P }.
total number forks thus nf = 4n + 2 total number inverted forks
ni = n. partition action costs Logistics tasks described Figure 12.
P = P3 thus action cost partition follows.
ft,l

Action
0

t(t, l, l )
Lt(p, t, l)
U t(p, t, l)

1
1
1

ft,l0
1
1
1

ft,l00
0
1
1

ft0 ,l
0
1
1

95

ip,1
1
1
1

ip0 ,1

F





0
0
0

1
2
1
4n+2
1
4n+2

1
n

1
n+2
1
4n+3
1
4n+3

1
1

fiKatz & Domshlak

Given that, optimal plans abstract task
h

task

hF

ft1 ,l
ft2 ,l
ipi ,1
ft1 ,l
ft2 ,l
ipi ,1

hI
hFI

optimal plan
hLt(p1 , t2 , l1 ), . . . , Lt(pn , t2 , ln ), U t(p1 , t2 , ln+1 ), . . . , U t(pn , t2 , l2n )i
hLt(p1 , t1 , l1 ), . . . , Lt(pn , t1 , ln ), U t(p1 , t1 , ln+1 ), . . . , U t(pn , t1 , l2n )i
hM t(t1 , l0 , li ), Lt(pi , t1 , li ), t(t1 , li , ln+i ), U t(pi , t1 , ln+i )i
hLt(p1 , t2 , l1 ), . . . , Lt(pn , t2 , ln ), U t(p1 , t2 , ln+1 ), . . . , U t(pn , t2 , l2n )i
hLt(p1 , t1 , l1 ), . . . , Lt(pn , t1 , ln ), U t(p1 , t1 , ln+1 ), . . . , U t(pn , t1 , l2n )i
hM t(t1 , l0 , li ), Lt(pi , t1 , li ), t(t1 , li , ln+i ), U t(pi , t1 , ln+i )i

cost

#

2n
4n+2
2n
4n+2
2
+2
n
2n
4n+3
2n
4n+3

2n + 1
2n + 1
n
2n + 1
2n + 1
n

2
n+2

+

2
4n+3

h(I)
2n
2n + 2
2n +

2n
n+2

optimal plan original task, e.g., hM t(t1 , l0 , l1 ), Lt(p1 , t1 , l1 ), t(t1 , l1 , l2 ), Lt(p2 , t1 , l2 ),
t(t1 , l2 , l3 ), . . . , Lt(pn , t1 , ln ), t(t1 , ln , ln+1 ), U t(p1 , t1 , ln+1 ), t(t1 , ln+1 , ln+2 ), U t(p2 , t1 , ln+2 ),
t(t1 , ln+2 , ln+3 ), . . . , U t(pn , t1 , l2n )i,

cost 4n, providing us upper bound
1/2 three heuristics. Putting lower upper bounds together, asymptotic
ratio three heuristics question 1/2.
9.3 Blocksworld
Blocksworld task consists table table, crane c, n + 1 blocks B =
{b1 , . . . , bn+1 }. block either table, top block,
held crane. crane pick block currently holds nothing,
block block top it. crane drop held block table
top block.
Consider Blocksworld task follows. blocks initially form tower
b1 , . . . , bn , bn+1 bn+1 table, goal move form
tower b1 , . . . , bn1 , bn+1 , bn bn table. is, goal swap
lowest two blocks tower. natural description task sas+ follows.
Variables V = {b, clearb | b B} {c} domains
D(c) = {empty} B,

b B : D(b) = {table, c} B \ {b},
D(clearb ) = {yes, no}.

Initial state
= {c : empty, bn+1 : table, clearb1 : yes}
[
{bi : bi+1 | 1 n}

[

{clearb : | b B \ {b1 }} .
Goal G = {bn : table, bn+1 : bn , bn1 : bn+1 } {bi : bi+1 | 1 n 2}.
Actions = {PT (b), DT (b) | b B} {P (b, b0 ), D(b, b0 ) | {b, b0 } B}
pick block b table: PT (b) = h{c : empty, b : table, clearb : yes}, {cb, b : c}i,
pick block b block b0 :
P (b, b0 ) = h{c : empty, b : b0 , clearb : yes, clearb0 : no}, {c : b, b : c, clearb0 : yes}i,
96

fiImplicit Abstraction Heuristics

c

clearb1 . . . clearbn+1

c
b
Gbi , b {bn1 , bn , bn+1 }

clearb0

clearb

c
b0

b

bn1

bn

clearb
bn+1

bn1

Gcf
(a)

bn

bn+1

f
Gclear
,b B
b

(b)

Figure 14: (a) Causal graph (b) corresponding collection v-forks v-iforks
Blocksworld task used proof

drop block b table: DT (b) = h{c : b, b : c}, {c : empty, b : table}i,
drop block b block b0 :
D(b, b0 ) = h{c : b, b : c, clearb0 : yes}, {c : empty, b : b0 , clearb0 : no}i.

schematic version causal graph task depicted Figure 14a. Since
variables bn1 , bn , bn+1 goal values different values initial
state, collection v-forks v-iforks Figure 14b. (leave-one-out,
Eq. 16) domain abstraction variable c, c-fork Gcf breaks n + 2 abstract
tasks. sinks v-iforks Gbi n1 , Gbi n , Gbi n+1 go process domain
decomposition (distance-from-initial-value, Eq. 15). However, due structure
domain transition graphs block variables, domain decomposition results
single abstract task v-iforks. Thus
F ={fc,empty } {fc,b | b B} {fclearb | b B},
={ibn1 ,1 , ibn ,1 , ibn+1 ,1 },

={fc,empty } {fc,b | b B} {fclearb | b B} ibn1 ,1 , ibn ,1 , ibn+1 ,1 }.
technically straightforward verify that, abstract task F , , ,
exists plan (i) involves representatives actions
{P (bn1 , bn ), DT (bn1 ), P (bn , bn+1 ), DT (bn ), PT (bn+1 ), D(bn+1 , bn ), PT (bn1 ), D(bn1 , bn+1 )} ,
(21)
(ii) involves representative original action once. Even together
plans account total cost eight actions Eq. 21, total cost
plans (and thus estimates three heuristics) upper-bounded 8,
optimal plan original task, e.g., hP (b1 , b2 ), DT (b1 ), P (b2 , b3 ), DT (b2 ), . . . , P (bn , bn+1 ), DT (bn ),
PT (bn+1 ), D(bn+1 , bn ), PT (bn1 ), D(bn1 , bn+1 ), PT (bn2 ), D(bn2 , bn1 ), . . . , PT (b1 ), D(b1 , b2 )i, cost
97

fiKatz & Domshlak

e

p1



e
p1

pn

Gef

(a)

e
pn

(b)

p
Gpi , p P

Figure 15: Miconics (a) causal graph (b) corresponding collection v-forks
v-iforks

4n. Hence, asymptotic performance ratio three heuristics Blocksworld
domain 0.
9.4 Miconic
Miconic task consists one elevator e, set floors F , passengers P .
elevator move |F | floors floor load and/or unload passengers.
natural sas+ description Miconic task follows.
Variables V = {e} P domains
D(e) = F,

p P : D(p) = F {e}.
Initial state = {e : fe } {p : fp | p P } (F )|P |+1 .
Goal G = {p : fp0 | p P } (F )|P | .
Actions = {In(p, f ), Out(p, f ) | f F, p P } {M ove(f, f 0 ) | {f, f 0 } F },
load passenger p e floor f : In(p, f ) = h{e : f, p : f }, {p : e}i,
unload passenger p e floor f : Out(p, f ) = h{e : f, p : e}, {p : f }i,
move elevator floor f floor f 0 : ove(f, f 0 ) = h{e : f }, {e : f 0 }i.
(parametrized n) causal graph Miconic tasks depicted Figure 15a,
Figure 15b depicts corresponding collection v-forks v-iforks. domains
inverted-fork sinks abstracted Eq. 15 (distance-from-initial-value),
domains fork roots abstracted Eq. 16 (leave-one-out). Thus,
F = {fe,f | f F },
= {ip,1 | p P },

= {fe,f | f F } {ip,1 | p P }.
total number fork-structured abstract tasks thus nf = |F | = |F |
total number inverted fork structured abstract tasks ni = |I | = |P |.
action A, number representatives abstract task, well cost
assigned representative, given Table 7.
98

fiImplicit Abstraction Heuristics

Action
ove(f, f 0 )
In(p, f )
In(p0 , f )
Out(p, f )
Out(p0 , f )

fe,f fe,f 0 fe,f 00 ip,1 ip0 ,1 F
1
1
1
1
1

1
1
1
1
1

0
1
1
1
1

1
1
0
1
0

1
0
1
0
1

1
2
1
nf
1
nf
1
nf
1
nf

1
1
ni 2+ni
1 nf1+1
1 nf1+1
1 nf1+1
1 nf1+1

Table 7: Number representatives original Miconic action abstract task,
well partition action costs among representatives

9.4.1 Lower Bounds
First, Miconic special case Logistics domain, Lemma 1 applies analogously, package P3 corresponding passenger. Thus, p P ,
three heuristics account full cost load/unload actions required optimal
plan task.
Let us focus abstract tasks F = {fe,f | f F }. Recall task fe,f
induced e-fork and, terms domain decomposition, distinguishes
floor f somewhere else. Without loss generality, set floors F
restricted initial goal values variables, optimal
plan move elevator floor f neither initial goal location
passenger elevator. Let = {I[p] | p P } FG = {G[p] | p P }. costs
optimal plans abstract task fe,f follows.
f FG : Let p, p0 P pair passengers initial goal locations f ,
respectively; is, I[p] = G[p0 ] = f . f = I[e], plan fe,f move
elevator f order load passenger p0 , move elevator back
f order unload passenger p0 . Therefore cost plan fe,f
|
least 2|P
|F | + 1, (see last three columns Table 7) first component
summation comes summing costs representatives load/unload
actions passengers, second component sum costs
representatives two respective move actions. Similarly, f 6= I[e],
plan fe,f move elevator f order load passenger p,
move elevator f order unload p. Therefore, well, cost
|
plan fe,f least 2|P
|F | + 1.

f \ FG : Let p P passenger initially f , is, I[p] = f . f = I[e],
plan fe,f move elevator f order unload p, thus
cost plan fe,f least

2|P |
|F |

+ 12 . Otherwise, f 6= I[e], plan

fe,f move elevator f order load p, move elevator
f order unload p. Hence, case, cost plan fe,f
least

2|P |
|F |

+ 1.
99

fiKatz & Domshlak

f FG \ : Let p P passenger must arrive floor f , is, G[p] = f .
f = I[e], plan fe,f move elevator f order load p,
move elevator back f order unload p. Hence, well,
|
cost plan fe,f least 2|P
|F | + 1. Otherwise, f 6= I[e], plan

fe,f move elevator f order unload p, thus cost plan

fe,f least

2|P |
|F |

+ 12 .

f 6 FG : f = I[e], plan fe,f include move f order

|
1
load/unload passengers, thus cost plan fe,f least 2|P
|F | + 2 .
Otherwise, f 6= I[e], elevator initially set locations,
|
thus cost plan fe,f least 2|P
|F | .

Putting case-by-case analysis together,

|FG \FI |

,
I[e] FG
2|P | + |FI FG | + |FI \ FG | +
2


2|P | + |F F | + |F \ F | 1 + 1 + |FG \FI | , I[e] F \ F

G

G

G
2
2
.
hF (I)
|FG \FI |1

2|P
|
+
|F

F
|
+
|F
\
F
|
+
1
+
,
I[e]

F
\
F

G

G
G


2


2|P | + |F F | + |F \ F | + |FG \FI |1 + 1 ,
I[e] 6 FG

G

G
2
2

Note value second case lowest. gives us lower bound hF
estimate Eq. 22.
|FG \ |
1
+ |FI FG | .
(22)
2
2
Now, let us provide upper bound length (= cost) optimal plan
Miconic task. First, let P 0 P denote set passengers initial goal
locations FG . Let m(P 0 , FG ) denote length optimal traversal
floors FG that, passenger p P 0 , visit I[p] comes visit
G[p]. Given that, case-by-case basis, (not necessarily optimal) plan Miconic
task hand follows.
hF (I) 2|P | + |FI \ FG | +

I[e] FG : Collect passengers I[e] any, traverse floors
\ FG collect passengers floors, move elevator first
floor f optimal path traversing floors FG , drop passengers
whose destination f , collect new passengers any, keep moving along
collecting dropping passengers initial target floors,
traverse FG \ , dropping remaining passengers destinations.
cost plan (and thus optimal plan) upper-bounded Eq. 23
below.
h (I) 2|P | + |FI \ FG | + m(P 0 , FG ) + |FG \ |.
(23)
I[e] \ FG : Collect passengers I[e] any, traverse floors
\ FG collect passengers floors making sure traversal
ends first floor f optimal path traversing floors FG ,
follow collecting dropping passengers initial target floors,
traverse FG \ , dropping remaining passengers destinations.
first case, cost plan upper-bounded Eq. 23.
100

fiImplicit Abstraction Heuristics

I[e] 6 : Traverse floors \ FG collect passengers floors,
move along optimal path traversing floors FG collecting
dropping passengers initial target floors, traverse floors
FG \ , dropping remaining passengers destinations. well,
cost plan upper-bounded expression Eq. 23.
Lemma 2 Miconic task passengers P ,

hF (I)
h (I)



5|P |1
6|P | .

Proof: Recall P 0 P set passengers initial goal locations
FG . First give two upper bounds length optimal traversal
floors FG that, passenger p P 0 , visit I[p] comes visit
G[p]. Theorem 5.3.3 Helmert (2008)
m(P 0 , FG ) = |FI FG | + (G 0 ),

(24)

(G 0 ) size minimum feedback vertex set directed graph G 0 =
(V 0 , E 0 ), V 0 = FG E 0 containing arc f f 0 passenger
p P 0 initially floor f arrive floor f 0 .
Note (G 0 ) trivially bounded number graph nodes V 0 . addition,
observe that, order nodes V 0 , arcs E 0 partitioned forward
0
backward arcs, one subsets must contain |E2 | arcs. Removing
G 0 nodes origins arcs smaller subset E 0 results
directed acyclic graph. Hence, set removed nodes (not necessarily minimum)
0
feedback vertex set G 0 , size set larger |E2 | . Putting two
bounds (G 0 ) together Eq. 24 obtain


|P 0 |
0
m(P , FG ) min 2|FI FG |, |FI FG | +
.
(25)
2
disjointness FG \ FG , fact goal
passengers P 0 , |FG \ | |P | |P 0 |. Eqs. 22 23
2|P | + |FI \ FG | + |FG2\FI | + |FI FG | 12
hF

.
h
2|P | + |FI \ FG | + |FG \ | + m(P 0 , FG )

(26)

F

interested lower bound ratio hh , right-hand side
inequality minimized, thus safely set |FI \ FG | = 0 |FG \ | =
|P | |P 0 |, obtaining
0

|
2|P | + |P ||P
+ |FI FG | 12
hF
5|P | |P 0 | + 2|FI FG | 1
2

=
.
h
2|P | + |P | |P 0 | + m(P 0 , FG )
6|P | 2|P 0 | + 2m(P 0 , FG )

(27)

Let us examine right-most expression Eq. 27 respect two upper bounds
m(P 0 , FG ) Eq. 25.

minimum obtained 2|FI FG |, m(P 0 , FG ) 2|FI FG |
0
|FI FG | + |P2 | , last inequality reformulated
2|FI FG | |P 0 | 0.
101

fiKatz & Domshlak

allows us provide lower bound right-most expression Eq. 27,
F
thus hh
hF
5|P | |P 0 | + 2|FI FG | 1
5|P | + (2|FI FG | |P 0 |) 1
5|P | 1



.
h
6|P | 2|P 0 | + 2m(P 0 , FG )
6|P | + 2(2|FI FG | |P 0 |)
6|P |
(28)
0

0

minimum obtained |FI FG |+ |P2 | , m(P 0 , FG ) |FI FG |+ |P2 | <
2|FI FG |, last inequality reformulated
2|FI FG | |P 0 | > 0.
allows us provide lower bound

hF
h

via Eq. 27

5|P | |P 0 | + 2|FI FG | 1
5|P | + (2|FI FG | |P 0 |) 1
5|P | 1
hF



.

0
0
0
h
6|P | 2|P | + 2m(P , FG )
6|P | + (2|FI FG | |P |)
6|P |
(29)
Note lower bounds
lemma.

hF
h

Eq. 28 Eq. 29 required claim


9.4.2 Upper Bounds
Miconic task heuristic hF achieves performance ratio exactly 5/6
consists elevator e, floors F = {fi }ni=0 , passengers P = {pi }ni=1 , passengers
elevator initially f0 , target floors passengers pairwise
disjoint. sas+ encoding Miconic task follows.
Variables V = {e} P domains D(e) = F p P : D(p) = F {e}.
Initial state = {e : f0 , p1 : f0 , . . . , pn : f0 }.
Goal G = {p1 : f1 , . . . , pn : fn }.
Actions = {In(p, f ), Out(p, f ) | f F, p P } {M ove(f, f 0 ) | {f, f 0 } F }.
causal graph task corresponding collection v-forks (consisting
one e-fork) depicted Figure 15. domain e abstracted Eq. 16
(leave-one-out), providing us
F = {fe,f0 , fe,f1 , . . . , fe,fn }.
costs action representatives abstract tasks given Table 7
nf = n + 1. optimal plans abstract tasks F
task optimal plan
fe,f0
fe,f1
fe,fn

cost

hIn(p1 , f0 ), . . . , In(pn , f0 ), ove(f0 , f1 ), Out(p1 , f1 ), . . . , Out(pn , fn )i
hIn(p1 , f0 ), . . . , In(pn , f0 ), Out(p2 , f2 ), . . . , Out(pn , fn ), ove(f0 , f1 ), Out(p1 , f1 )i
hIn(p1 , f0 ), . . . , In(pn , f0 ), Out(p1 , f1 ), . . . , Out(pn1 , fn1 ), ove(f0 , fn ), Out(pn , fn )i

102

1
2
1
2
1
2

+
+
+

2n
n+1
2n
n+1
2n
n+1

#

hF (I)

n+1

5n+1
2

fiImplicit Abstraction Heuristics

optimal plan original task, hIn(p1 , f0 ), . . . , In(pn , f0 ), ove(f0 , f1 ), Out(p1 , f1 ),
cost 3n, providing us
F
upper bound 5/6 h heuristic Miconic. Putting upper bound together
previously obtained lower bound 5/6, conclude asymptotic performance
ratio hF Miconic 5/6.
Miconic task heuristics hI hFI achieve exactly 1/2 consists
n
elevator e, floors F = {fi }2n
i=0 , passengers P = {pi }i=1 , initial target floors
passengers elevator pairwise disjoint. task description sas+
follows.
ove(f1 , f2 ), Out(p2 , f2 ), ove(f2 , f3 ), . . . , Out(pn , fn )i,

Variables V = {e} P domains D(e) = F p P : D(p) = F {e}.
Initial state = {e : f0 , p1 : f1 , . . . , pn : fn }.
Goal G = {p1 : fn+1 , . . . , pn : f2n }.
Actions = {In(p, f ), Out(p, f ) | f F, p P } {M ove(f, f 0 ) | {f, f 0 } F }.
causal graph task corresponding collection v-forks v-iforks
depicted Figure 15. domains inverted-fork sinks abstracted Eq. 15
(distance-from-initial-value), domains fork roots abstracted
Eq. 16 (leave-one-out). provides us
= {ip1 ,1 , . . . , ipn ,1 },

= {fe,f0 , fe,f1 , . . . , fe,fn , fe,fn+1 , . . . , fe,f2n , ip1 ,1 , . . . , ipn ,1 }.
costs action representatives abstract tasks given Table 7
nf = 2n + 1 ni = n. optimal plans abstract tasks
h

task

optimal plan

hI

ipi ,1
fe,f0

hM ove(f0 , ), In(pi , ), ove(fi , fn+i ), Out(pi , fn+i )i
hM ove(f0 , f1 ), In(p1 , f1 ), . . . , In(pn , fn ),
Out(p1 , fn+1 ), . . . , Out(pn , f2n )i
hM ove(f0 , f1 ), In(p1 , f1 ), ove(f1 , f2 ), In(p2 , f2 ), . . . , In(pn , fn ),
Out(p1 , fn+1 ), . . . , Out(pn , f2n )i
hM ove(f0 , fn ), In(pn , fn ), ove(fn , f1 ),
In(p1 , f1 ), . . . , In(pn1 , fn1 ), Out(p1 , fn+1 ), . . . , Out(pn , f2n )i
hIn(p1 , f1 ), . . . , In(pn , fn ), Out(p2 , fn+2 ), . . . , Out(pn , f2n ),
ove(f0 , fn+1 ), Out(p1 , fn+1 )i
hIn(p1 , f1 ), . . . , In(pn , fn ), Out(p1 , fn+1 ), . . . , Out(pn1 , f2n1 ),
ove(f0 , f2n ), Out(pn , f2n )i
hM ove(f0 , ), In(pi , ), ove(fi , fn+i ), Out(pi , fn+i )i

hFI

fe,f1
fe,fn
fe,f

n+1

fe,f2n
ipi ,1

cost

#

h(I)

n
1

2n + 2

1
n+2

+2
2n
+ 2n+2

2
n+2

+

2n
2n+2

n

2
n+2

+

2n
2n+2

1
n+2

+

2n
2n+2

1
n+2

+

2n
2n+2

2
n+2

+

2
2n+2

2
n

2n +

5n+1
n+2

n

n

optimal plan original task, hM ove(f0 , f1 ), In(p1 , f1 ), ove(f1 , f2 ), In(p2 , f2 ),
ove(f2 , f3 ), . . . , In(pn , fn ), ove(fn , fn+1 ), Out(p1 , fn+1 ), ove(fn+1 , fn+2 ), Out(p2 , fn+2 ),
ove(fn+2 , fn+3 ), . . . , Out(pn , f2n )i, cost 4n, providing us upper bound
1/2 hI hFI heuristics Miconic. Putting upper bound together
previously obtained lower bound 1/2, conclude asymptotic performance ratio
hI hFI Miconic 1/2.

103

fiKatz & Domshlak

9.5 Satellite
Satellite domain quite complex. Satellite tasks
consists satellites S,
finite set instruments onboard, = sS . set image
modes M, mode M, set Im instruments supporting
mode m. Likewise, set directions L, image objectives LM, functions
cal : 7 L, p0 : 7 L, p : S0 7 L S0 S, cal calibration target
direction function, p0 initial direction function, p goal pointing direction
function.
Let us denote Oi = {o = (d,Sm) | Im } subset images
taken instrument i, Os = iIs Oi subset images taken
instruments satellite s, Sm = {s | Im 6= } subset satellites
take images mode m. problem description sas+ follows.
Variables V = {Oni , Ci | I} domains
: D(s) = L,

: D(Oni ) = D(Ci ) = {0, 1},
: D(o) = {0, 1}.

Initial state = {s : p0 (s) | S} {Oni : 0, Ci : 0 | I} {o : 0 | O}.
Goal G = {s : p (s) | S0 } {o : 1 | O}.
Actions
[

A=
{T urn(s, d, d0 ) | {d, d0 } L} {SwOn(i, s), Cal(i, s), SwOf f (i) | }
sS

{T akeIm(o, d, s, i) | = (d, m) O, Sm , Im },

turn satellite: urn(s, d, d0 ) = h{s : d}, {s : d0 }i,

power instrument: SwOn(i, s) = h{Oni0 : 0 | i0 }, {Oni : 1}i,
power instrument: SwOf f (i) = h{Oni : 1}, {Oni : 0, Ci : 0}i,

calibrate instrument: Cal(i, s) = h{Ci : 0, Oni : 1, : cal(i)}, {Ci : 1}i,
take image: akeIm(o, d, s, i) = h{o : 0, Ci : 1, : d}, {o : 1}i.

9.5.1 Fork Decomposition
causal graph example Satellite task representative subset collection
v-forks v-iforks depicted Figure 16. Since variables {Oni , Ci | I}S \S0
goal value, collection v-forks v-iforks follows general
case.
satellite S, s-fork leaves Os .
104

fiImplicit Abstraction Heuristics

o1

o2

o3

o4

s1

C3

s2

s2

C1

C2

C4

On1

On2

On3

On4

C5

C7

o1

C6

o3

C5
o4

Gsf 2
s1

o3

C6
o1

f
GC
5
s2

C2

C7
o3

f
GC
6
C4

o4
f
GC
7

C7

On7
o4
On5

On6

(a)

Goi 4
(b)

Figure 16: Satellite example task (a) causal graph (b) representative subset
collection v-forks v-iforks

instrument I, Ci -fork leaves Oi .
image objective = (d, m) O, o-ifork parents {Ci | Im }Sm .
root domains forks rooted instruments inverted-fork sinks
binary first place, root domains forks rooted satellites
abstracted Eq. 16 (leave-one-out). provides us
F = {fs,d | S, L} {fCi | I},
= {io | O},

= {fs,d | S, L} {fCi | I} {io | O}.
total number forks thus nf = |S| |L| + |I| total number inverted
forks ni = |O|. action A, number representatives abstract
task, well cost assigned representative, given Figure 17.
9.5.2 Lower Bounds
First, note optimal plan Satellite task contains 6 actions per image
objective one action per satellite S0 I[s] 6= G[s]. show
three heuristics fully account cost least one action per image
objective one action per satellite. provide us lower
bound 1/6 asymptotic performance ratios three heuristics.
Lemma 3 Satellite task, hF , hI , hFI fully account cost least
one Take Image action akeIm(o, d, s, i) image objective O.
Proof: image objective = (d, m) O, actions akeIm(o, d, s, i) = h{o :
0, Ci : 1, : d}, {o : 1}i appear optimal plans |Sm | |L| fork abstract tasks rooted
105

fiKatz & Domshlak

fs,d

Action
0

urn(s, d, )
SwOn(i, s)
Cal(i, s)
SwOf f (i)

1
0
0
0

fs,d0
1
0
0
0

fs,d00

fs0 ,d

0
0
0
0

0
0
0
0

fCi
0
0
1
1

fCi0
0
0
0
0

Oi Os \ Oi 6 Os
io
io
io
F
1
0
1
1

1
0
0
0

1
2

0
0
0
0

0
1
1

1
|O |


1
|O |+2

0

0

1
|Oi |
1
|Oi |

1
|Oi |+1
1
|Oi |+1

(a)

Action
akeIm(o, d, s, i),
= (d, m)

s0 Sm s0 6 Sm i0 Im i0 6 Im
fs0 ,d0
fs0 ,d0
fCi0
fCi0
io io0
1

0

1

0

1

0

F





1
|Sm ||L|+|Im |

1

1
|Sm ||L|+|Im |+1

(b)
Figure 17: Number representatives original Satellite action abstract
task, well partition action costs representatives;
table (a) shows Turn, Switch On, Switch Off, Calibrate actions,
table (b) shows Take Image actions

satellites, |Im | fork abstract tasks rooted instrument calibration status variables Ci ,
one inverted-fork abstract task sink o. Together costs action
representatives abstract problems (see Figure 17),
hF : cost representative
tasks,

1
|Sm ||L|+|Im |

|Sm | |L| + |Im | fork abstract

hI : cost representative 1 one inverted fork abstract task,
hFI : cost representative
tasks.

1
|Sm ||L|+|Im |+1

|Sm | |L| + |Im | + 1 abstract

Therefore, O, cost one akeIm(o, d, s, i) action fully accounted
three heuristics.

Lemma 4 Satellite task, hF , hI , hFI fully account cost least
one Turn action urn(s, d, d0 ) S0 I[s] 6= G[s].
Proof: S0 satellite I[s] 6= G[s], action urn(s, I[s], d0 ) appear
optimal plan fs,I[s] , action urn(s, d, G[s]) appear optimal plan
fs,G[s] , Os , action urn(s, d, G[s]) appear optimal plan
io . Together costs action representatives abstract problems (see
Figure 17)
hF : cost representative

1
2

2 fork abstract tasks,
106

fiImplicit Abstraction Heuristics

hI : cost representative
hFI : cost representative

1
|Os |

|Os | inverted fork abstract tasks,

1
|Os |+2

|Os | + 2 abstract tasks.

Therefore, S0 I[s] 6= G[s], cost one urn(s, d, d0 ) action
fully accounted three heuristics.

h
h

Together, Lemmas 3 4 imply that, h {hF , hI , hFI }, Satellite
1/6.

9.5.3 Upper Bound
Satellite task three heuristics achieve ratio exactly 1/6 consists
two identical satellites = {s, s0 } l instruments each, = Is0 = {1, . . . , l} {l +
1, . . . , 2l}, instruments {i, l+i} two modes each: m0 mi . set
n + 1 directions L = {dI , d1 , . . . , dn } set n image objectives = {o1 , . . . , }, oi =
(dI , mi ) 1 l oi = (di , m0 ) l < n. calibration direction
instruments {i, l + i} di . sas+ encoding planning task follows.
Variables V = {Oni , Ci | I}.
Initial state = {s : dI | S} {Oni : 0, Ci : 0 | I} {o : 0 | O}.
Goal G = {o : 1 | O}.
Actions
[

A=
{T urn(s, d, d0 ) | {d, d0 } L} {SwOn(i, s), Cal(i, s), SwOf f (i) | }
sS


[
sS

{T akeIm((dI , mi ), dI , s, i) | }

n
[


{T akeIm((dj , m0 ), dj , s, i) | } .

j=l+1

causal graph task depicted Figure 18a. state variables {Oni , Ci |
I} goal value, thus collection v-forks v-iforks task
Figure 18b. domains inverted-fork sinks binary, domains
fork roots abstracted Eq. 16 (leave-one-out). provides us
F = {fs,d , fs0 ,d | L} {fCi | I},
= {io | O},

= {fs,d , fs0 ,d | L} {fCi | I} {io | O}.
total number forks task nf = 2n + 2l + 2 total number inverted
forks ni = n. costs action representatives abstract task given
0
Figure 17, |Os | = |Os | = |O| = n, |Oi | = n l + 1, |Sm | = 2, |Im0 | = 2l, |Imi | = 2,
|L| = n + 1.
optimal plans per abstract task depicted Table 8, optimal plan
original problem, hSwOn(1, s), urn(s, dI , d1 ), Cal(1, s), urn(s, d1 , dI ), akeIm(o1 , dI , s, 1),
107

fiKatz & Domshlak

s0


o1

C1

ok

oi

Cl+1

Cl

Ci

ol+1



s0

o1 . . .

o1 . . .

Gsf

Gsf 0

Cl+i

C2l


Oni

On1

Ci



s0

Ci

oi

ol+1 . . .
f
GC
,i




Cl+i

s0

C1 . . . C2l

Onl+i

Onl

Onl+1

On2l

oi

oi

Goi , 1 l

Goi , l < n

(a)

(b)

Figure 18: (a) Causal graph (b) corresponding collection v-forks v-iforks
Satellite task used proof upper bound 1/6

h

hF

hI

hFI

task

optimal plan

cost

hT akeIm(o1 , dI , s0 , l+1), . . . , akeIm(ol , dI , s0 , 2l),
fs,d
akeIm(ol+1 , dl+1 , s0 , 2l), . . . , akeIm(on , dn , s0 , 2l)i
hT akeIm(o1 , dI , s, 1), . . . , akeIm(ol , dI , s, l),
f
s0 ,d
akeIm(ol+1 , dl+1 , s, l), . . . , akeIm(on , dn , s, l)i
hT akeIm(oi , dI , s0 , l + i),
f
Ci ,
akeIm(ol+1 , dl+1 , s0 , 2l), . . . , akeIm(on , dn , s0 , 2l)i
hT akeIm(oi , dI , s, i),
fCi , Is0
akeIm(ol+1 , dl+1 , s, l), . . . , akeIm(on , dn , s, l)i
ioj , 1 j l hT urn(s, dI , dj ), Cal(j, s), urn(s, dj , dI ), akeIm(oj , dI , s, j)i
ioj , l < j n hT urn(s, dI , d1 ), Cal(1, s), urn(s, d1 , dj ), akeIm(oj , dI , s, 1)i
hT akeIm(o1 , dI , s0 , l + 1), . . . , akeIm(ol , dI , s0 , 2l),
fs,d
akeIm(ol+1 , dl+1 , s0 , 2l), . . . , akeIm(on , dn , s0 , 2l)i
hT akeIm(o1 , dI , s, 1), . . . , akeIm(ol , dI , s, l),
f
s0 ,d
akeIm(ol+1 , dl+1 , s, l), . . . , akeIm(on , dn , s, l)i
hT akeIm(oi , dI , s0 , l + i),
f
Ci ,
akeIm(ol+1 , dl+1 , s0 , 2l), . . . , akeIm(on , dn , s0 , 2l)i
hT akeIm(oi , dI , s, i),
fCi , Is0
akeIm(ol+1 , dl+1 , s, l), . . . , akeIm(on , dn , s, l)i
ioj , 1 j l hT urn(s, dI , dj ), Cal(j, s), urn(s, dj , dI ), akeIm(oj , dI , s, j)i
ioj , l < j n hT urn(s, dI , d1 ), Cal(1, s), urn(s, d1 , dj ), akeIm(oj , dI , s, 1)i

#

l
2n+4

+

nl
2n+2l+2

n+1

l
2n+4

+

nl
2n+2l+2

n+1

1
2n+4

+

nl
2n+2l+2

l

nl
1
+ 2n+2l+2
2n+4
2
1
+ nl+1
+1
n
2
1
+
+1
n
nl+1

l
l
nl

h(I)

n

l
2n+5

+

nl
2n+2l+3

n+1

l
2n+5

+

nl
2n+2l+3

n+1

1
2n+5

+

nl
2n+2l+3

l

nl
1
+ 2n+2l+3
2n+5
2
1
+ nl+2 +
n+2
1
2n+5
2
1
+ nl+2
+
n+2
1
2n+2l+3

l

n + 2+
n
nl+1

n+

l

2n
n+2

+

n
nl+2

nl

Table 8: Optimal plans abstract tasks overall heuristic estimates
Satellite task used proof upper bound 1/6

SwOf f (1), . . . SwOn(l 1, s), urn(s, dI , dl1 ), Cal(l 1, s), urn(s, dl1 , dI ), akeIm(ol1 , dI , s, l 1),
SwOf f (l 1), SwOn(l, s), urn(s, dI , dl ), Cal(l, s), urn(s, dl , dI ), akeIm(ol , dI , s, l), urn(s, dI , dl+1 ),
akeIm(ol+1 , dl+1 , s, l), . . . , urn(s, dn1 , dn ), akeIm(on , dn , s, l)i,

108

cost 4l + 2n 1.

fiImplicit Abstraction Heuristics


l = n n, provides us asymptotic performance ratio 1/6 three
heuristics.

10. Summary
considered heuristic search cost-optimal planning introduced domain-independent
framework devising admissible heuristics using additive implicit abstractions.
implicit abstraction corresponds abstracting planning task hand instance
tractable fragment optimal planning. key motivation investigation escape restriction explicit abstractions, pattern-database merge-and-shrink
abstractions, abstract spaces fixed size. presented concrete scheme additive
implicit abstractions decomposing planning task along causal graph suggested
concrete realization idea, called fork-decomposition, based two novel fragments tractable cost-optimal planning. studied induced admissible heuristics
formally empirically, showed favorably compete informativeness
state-of-the-art admissible heuristics theory practice. empirical
evaluation stressed tradeoff accuracy heuristics runtime complexity computing them. alleviate problem expensive per-search-node runtime
complexity fork-decomposition heuristics, showed equivalent explicit
abstractions notion database exists fork-decomposition abstractions,
despite exponential-size abstract spaces. subsequent empirical evaluation
heuristic search databases fork-decomposition heuristics showed
favorably competes state art cost-optimal planning.
basic principles implicit abstraction framework motivate research
numerous directions, importantly (i) discovering new islands tractability
optimal planning, (ii) abstracting general planning tasks islands. Likewise, promise combining implicit abstractions techniques deriving admissible heuristic estimates. first step towards combining implicit abstractions
polynomial-time discoverable landmarks planning tasks recently taken
Domshlak, Katz, Lefler (2010). believe various combinations techniques might well improve informativeness heuristics, without substantially increasing runtime complexity.

Acknowledgments
work authors partly supported Israel Science Foundation grants 670/07
1101/07.

109

fiKatz & Domshlak

Appendix A. Detailed Results Empirical Evaluation
hF
task

hI

h nodes time nodes

hFI
time nodes

time

MS-104

MS-105

nodes

nodes

time

HSPF

time

nodes

9
0.00
10
0.00
18
0.03
21
0.01
22
0.01
42
0.17
42
0.17
96231549.13
89525 466.14
19
0.01
22
0.01
40
0.21
38
0.21
8968 238.16
8931 267.81
3053401077.90

9
10
29
21
22
42
42
203
12956
19
22
40
38
62
59

time

blind
nodes time

hmax
nodes time

airport-ipc4
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
19
21
22
36

8
9
17
20
21
41
41
62
71
18
21
39
37
60
58
79
88
90
101
148
109

10 0.01
12 0.03
86 0.25
22 0.02
23 1.29
51336.72
51437.00

9 0.00
15 0.01
133 0.07
21 0.02
30 0.06
639 1.54
632 1.53
21544166.51

9 0.00
15 0.03
93 0.31
21 0.02
27 1.43
567 45.25
550 44.15

19 0.02
23 1.90
47554.18
43447.48

19 0.02
30 0.08
728 2.76
663 2.60
25110334.72
23317307.60

19 0.03
27 2.13
568 71.23
479 59.82

9 0.00
10 0.00
18 0.04
21 0.02
22 0.01
42 0.16
42 0.17
24372 25.42
152408 64.92
19 0.02
22 0.02
40 0.21
38 0.20
30637 51.23
28798 46.20
1031524200.95

7326372.92
1119943762.02
34365853.70

102

10.28

0.72
11 0.00
9 0.00
1.23
13 0.00
10 0.00
5.10
164 0.00
57 0.00
1.32
23 0.00
21 0.00
46.54
27 0.00
22 0.00
123.13
738 0.01
418 0.02
117.56
742 0.01
405 0.02
602.09 27032 0.28
9687 0.90
993.07 175717 2.47 56484 7.62
2.45
21 0.00
19 0.00
65.36
27 0.00
22 0.01
169.02
873 0.01
392 0.03
134.87
822 0.01
342 0.03
714.76 35384 0.39
9196 1.11
647.05 33798 0.38
8200 1.01
124746719.72 221993 49.03
1043661310.89
831632253.21
18809 0.42
3184 1.12
159967105.29
63061 1.44

blocks-ipc2
04-0
04-1
04-2
05-0
05-1
05-2
06-0
06-1
06-2
07-0
07-1
07-2
08-0
08-1
08-2
09-0
09-1
09-2
10-0
10-1
10-2
11-0
11-1
11-2
12-0
12-1
13-0
13-1
14-0
14-1

6
15 0.01
46 0.01
17 0.01
7 0.03
7
0.03
7
0.36
93 0.00
25 0.00
10
14 0.01
31 0.00
15 0.00
11 0.04
11
0.03
11
0.39
66 0.00
23 0.00
6
7 0.01
26 0.00
10 0.00
7 0.04
7
0.03
7
0.38
63 0.00
18 0.00
12
32 0.03
302 0.06
113 0.08
13 0.30
13
0.96
13
1.32
467 0.00
145 0.00
10
37 0.03
280 0.06
98 0.07
11 0.29
11
0.96
11
1.36
567 0.00
135 0.00
16
152 0.09
596 0.10
348 0.18
17 0.29
17
0.95
17
1.49
792 0.00
297 0.00
12
33 0.04
766 0.27
207 0.25
13 0.95
13
8.56
13
4.10
1826 0.00
276 0.00
10
41 0.07 2395 0.74
578 0.78
11 0.90
11
8.34
11
4.17
4887 0.01
755 0.01
20
855 0.80 5444 1.23 3352 2.88
733 0.87
85
8.84
31
4.29
6385 0.02
2556 0.03
20
278 0.56 20183 8.26 4022 8.18
577 1.93
144 23.32
22 11.47 37157 0.14
5943 0.11
22 691011.22 59207 17.37 38539 49.71
10071 1.70
1835 21.05
174 11.25 63376 0.21 33194 0.46
20 1458 2.85 46009 15.05 18854 29.61
1855 1.59
782 20.37
90 10.99 55218 0.19 18293 0.29
18 1533 4.79344157179.42 69830208.07
5557 3.67
678 36.80
25 26.00 519107 2.28 94671 2.07
20 1004027.97517514236.64191352475.33
45711 3.88
11827 33.49
151 26.57 636498 2.60 199901 3.85
16
479 1.79237140136.18 32567110.76
277 3.63
54 32.53
17 25.85 433144 1.93 52717 1.30
30
1233374 16.00 971409 77.74
464 56.76798464936.763840589 85.00
28 343518.17
95068 7.35
58873 63.15
82 56.98591457229.731200345 32.06
26 637935.22
161719 13.54
20050 82.45
81 57.02596316030.021211463 32.15
34
1800 114.26
32
12063665 228.76
1835 115.19
34
3685 116.75
32
7046739 141.44
2678 213.32
30
1510 203.79
34
3984 213.97
34
1184 370.06
34
614 382.34
42
83996 860.45
44
1634381104.27
38
27791063.02
36
71541087.40

depots-ipc3
01
02
03
04
07
10
13

10
15
27
30
21
24
25

114 0.24
113410.82

279 0.11
9344 12.40

161 0.32
2638 22.68

11 0.00
11
0.00
45
0.77
329 0.00
136 0.00
738 3.24
16
1.14
898 11.56 15404 0.11
3771 0.17
348288 20.69 239313 222.35 103089 247.13293039827.201204646 97.62
1284048 52.05 1273762 529.34
211820 37.54
41328 324.19650110071.581331701166.76
3241083157.52
1427824116.06

grid-ipc1
01
02

14
26

57160.28

1117

9.49

472 55.87

660 8.63
467 121.10
3392724 50.35 3244132 241.94

6446 0.08

190 0.10
664016231.26

Table 9: Runtimes cost-optimal heuristic-search planners Airport,
Blocksworld, Depots, Grid domains. description planners given Section 6; fork-decomposition heuristics computed
fully online. Column task denotes problem instance, column h denotes optimal
solution length. columns capture run time number expanded
nodes.

110

fiImplicit Abstraction Heuristics

hF
task

h

nodes

hI

hFI

time

nodes

time nodes

time

0.05
18.27
0.25
19.15
45.02
5.21
9.56

37
18452
190
10778
11400
795
1730

0.01
37
10.29 15794
0.13
163
17.14 7665
18.91 10984
3.60
492
7.71 1006

0.04
23.80
0.31
29.88
46.16
6.05
13.80

HSPF

MS-104

MS-105

nodes

time

nodes

time

nodes

8 0.04
20 0.13
13 0.16
17 0.49
2614 0.60
291 1.35
14 1.42
287823 7.34
15504 1.70
18 1.64
34137 1.99
1298884 19.52

8
20
13
17
19
12
14
2952
23
18
10790
870875

0.03
0.26
0.25
2.41
4.58
9.72
15.35
20.31
10.43
18.54
17.01
35.33

44
15998
863
22933
24877
3804
25801

blind
time

nodes

time

hmax
nodes
time

driverlog-ipc3
01
02
03
04
05
06
07
08
09
10
11
13

7
19
12
16
18
11
13
22
22
17
19
26

49
15713
164
6161
13640
608
864

4304 199.81
433951421.90

198651 849.04
16099 85.74 4037 200.52
41445 186.53 390691395.51

0.47
182 0.00
20
4.55
68927 0.36
54283
1.25
16031 0.09
2498
12.20 999991 8.12 393673
18.77 6290803 61.57 1724611
10.08 681757 7.64
54451
41.34 6349767 81.53 493480

18234 68.22
5596231193.00

0.00
0.52
0.03
6.56
34.73
1.71
17.31

6141130 330.22

freecell-ipc3
01
02
03
04
05

8
234
1.54
14 30960 107.07
18 197647 877.16
26
30

974
4.88
274
3.25
75150 230.54 37131 224.62

87 3.12
31487 40.40
95805140.96
943074 86.78
5950977243.74

9 38.74

9 13.01
3437 0.03
1043
0.15
466 70.29 130883 1.46
41864 10.77
1589 169.39 944843 11.45 210503 75.62
15848 341.02 3021326 38.80 600525 247.70
40642 916.44
14080351062.25

gripper-ipc1
01
02
03
04
05
06
07

11
214
0.04
240
0.02
214
0.05
12 0.00
12 0.00
33
0.11
236 0.00
208
0.00
17
1768
0.54
1832
0.36 1803
0.75
18 0.11
18 0.08
680
0.37
1826 0.01
1760
0.01
23 11626
5.38 11736
4.05 11689
8.11
11514 0.47
2094 1.75
7370
1.52
11736 0.04
11616
0.08
29 68380 43.58 68558 35.24 68479 70.72
68380 1.24
68190 8.05
55568 10.29
68558 0.27
68368
0.56
35 376510 328.10 376784 296.59376653 560.93
376510 3.52 376510 19.46 344386 79.96 376772 1.59 376496
3.51
41
1982032 13.42 1982032 42.16 1911592 577.49 1982394 9.59 1982016 21.57
47
10091986 61.6610091986106.84
10092464 51.1010091968 119.64

logistics-ipc1
01
05
31
32
33

26
22
13
20
27

3293 945.35
436
9.67
392
2.57

1981
2704

2.53
2.24

1284
962

21.84
5.53

21
0.02
193
0.06
65
20
0.03
570
0.13
293
16
0.02
117
0.03
79
28
0.05
2550
0.98 1171
18
0.03
675
0.19
427
9
0.02
24
0.01
13
26
0.06
4249
1.85 2461
15
0.03
181
0.09
99
26
0.05
2752
1.22 1394
25
0.04
2395
0.94 1428
37
0.42 251287 203.64 98053
1689 10.08
32
0.42 82476 78.73 35805
45
0.6611836081306.92
37
0.54 351538 407.06167038
31
0.50 59336 80.88 25359
46
2.26
43
2.10
697 26.78
21959 696.23
43
2.78

0.06
0.16
0.05
1.09
0.31
0.02
2.54
0.13
1.51
1.34
386.80

1918881 41.03
768161 18.69
494 0.42
21 0.16

949586 34.82
609393 35.27
14 2.11
21 0.72
529338 32.55

2119551700.26
6.58
7.08

155645
245325

1.66
2.07

32282
81156

0.57
1.00

21 0.05
20 0.04
16 0.05
28 0.38
18 0.38
9 0.38
26 1.23
15 1.26
26 1.26
25 1.22
37 4.87
49 4.94
32 6.90
45 7.21
37 9.46
31 9.43
668834 29.73
1457130 43.00
701106 37.42

21
0.34
20
0.37
16
0.36
28
0.58
18
0.72
9
0.78
26
1.03
15
1.16
26
1.03
25
1.02
24317 35.46
362179 453.06
14890 33.50
114155 198.84
32017 83.16
6720 26.48

11246
9249
4955
109525
22307
1031
490207
24881
476661
422557

0.05
0.04
0.02
0.64
0.13
0.00
3.40
0.16
3.32
2.95

4884
4185
1205
74694
6199
280
202229
3604
200012
133521

0.03
0.03
0.01
0.59
0.05
0.00
1.92
0.03
1.98
1.29

3636

0.07

481
9598

logistics-ipc2
04-0
04-1
04-2
05-0
05-1
05-2
06-0
06-1
06-2
06-9
07-0
07-1
08-0
08-1
09-0
09-1
10-0
10-1
11-0
11-1
12-0
12-1

20
19
15
27
17
8
25
14
25
24
36
44
31
44
36
30
45
42
48
60
42
68

161.33
883.68
168.73

21
20
16
28
18
9
26
15
26
25
525
666324
1042
16708
20950
31

0.03
0.03
0.04
0.10
0.10
0.09
0.18
0.18
0.19
0.18
0.65
8.83
0.96
1.15
1.56
1.27

775996 43.56
2222340 87.47

mprime-ipc1
01
02
03
04
05
07
08
09
11
12
15
16
17
19
21
25
26
27
28
29
31
32
34
35

5
7
4
8
11
5
6
8
7
6
6
6
4
6
6
4
6
5
7
4
4
7
4
5

196
0.19
11604 422.83
427 35.09
3836
6.62
3314

14.91

10
0.03
440451620.68
7
0.50
1775
1.17
47

0.15

19838 454.91 1001881798.69
9
0.16
219
0.54
16320 192.10
8118 46.69
252 171.97

24
0.07
2565 242.83
11
3.15
1093
3.44
346

3.07

5227 284.13
8
0.16
5243 95.01
448 447.49

6 2.00
3317 88.58
36 33.64
9 6.09
1705009127.53
1667 46.72
1469752403.45
21993 36.25
8 4.69
34763 11.45

6 20.45
5463.85
9 82.71

108

49.59

19076 781.74

9868 0.67
599590 23.58
18744

8 62.68
42055143.27

22 394.26
25665 724.12

473 81.42

0.56

2197646 71.69
73260 2.21
108652 3.50
425144 32.17
172736 42.48

453 671.03
123039313.25
75

0.10

30

54
2.28
8
0.03
182
4.53
248 52.86
31759 133.33
234 11.65
392
3.09

1772
403
56
46
12436
46
290

0.04

29

0.08

33.82
9
0.23
37
1.11
32
7.83
19
34.94 11839
2.13
23
2.54
84

1.31
0.08
1.79
11.79
95.52
3.08
1.89

5 0.48
172432 46.33
6 11.59
8 1.88
5 14.92
419 99.87
19429 21.61
450151.69
359 3.63

5 2.75
189154454.69
6154.43
8 22.55
5201.40
7269292.37
6 43.43

1503293103.23
383 0.00
819590 61.01
84079 3.50
128 146.80
17333 0.25
3187 0.17
3584 0.19
110731701.00 115479 2.75
3618 0.19
706 96.55
2476 0.05
85

8.71

68
0.04
12606 36.65
5
0.07
200
0.24
14881571638.78
11
0.04
7650 84.33
19023 30.26
915
0.54
1520
1.78
1039 178.55
7962 35.65
5
1.06
36013 533.75
15250 101.75
6
0.00
440
2.69
831
2.08
211
0.06
7
0.10
11
0.17
3096
1.74
11
0.18
44
0.03

Table 10: Similar Table 9 Driverlog, Freecell, Gripper, Logistics-ipc1,
Logistics-ipc2, Mprime domains.
111

fiKatz & Domshlak

hF
task

h

nodes

hI
time

nodes

hFI
time nodes

time

MS-104

MS-105

nodes

nodes

time

time

HSPF

nodes

blind
time

nodes

time

hmax
nodes time

miconic-strips-ipc2
01-0
01-1
01-2
01-3
01-4
02-0
02-1
02-2
02-3
02-4
03-0
03-1
03-2
03-3
03-4
04-0
04-1
04-2
04-3
04-4
05-0
05-1
05-2
05-3
05-4
06-0
06-1
06-2
06-3
06-4
07-0
07-1
07-2
07-3
07-4
08-0
08-1
08-2
08-3
08-4
09-0
09-1
09-2
09-3
09-4
10-0
10-1
10-2
10-3
10-4
11-0
11-1
11-2
11-3
11-4

4
3
4
4
4
7
7
7
7
7
10
11
10
10
10
14
13
15
15
15
17
17
15
17
18
19
19
20
20
21
23
24
22
22
25
27
27
26
28
27
31
30
30
32
28
33
32
32
34
33
37
34
38
38
35

5 0.00
5
0.00
5 0.00
5 0.00
5
0.00
5 0.00
5 0.00
5
0.00
5 0.00
5 0.00
5
0.00
5 0.00
5 0.00
5
0.00
5 0.00
19 0.00
22
0.00
19 0.00
21 0.00
23
0.00
21 0.00
21 0.00
23
0.00
21 0.00
24 0.01
24
0.00
24 0.00
19 0.00
22
0.00
19 0.00
86 0.01
129
0.01
98 0.01
120 0.01
168
0.01
147 0.01
137 0.01
143
0.01
137 0.01
96 0.01
153
0.01
117 0.01
103 0.01
149
0.01
115 0.01
524 0.06
843
0.08
686 0.12
505 0.06
817
0.08
663 0.12
685 0.08
942
0.09
802 0.13
681 0.07
942
0.09
798 0.13
685 0.07
942
0.09
802 0.13
2468 0.37
4009
0.66 3307 0.93
2807 0.42
4345
0.71 3677 1.01
1596 0.29
2981
0.55 2275 0.73
2256 0.36
3799
0.62 3104 0.87
3210 0.46
4732
0.78 4267 1.11
9379 1.98 17665
4.74 13531 5.90
9106 1.93 18134
4.75 14052 5.94
10900 2.19 19084
4.90 15111 6.28
12127 2.43 21708
5.69 17807 7.19
13784 2.62 23255
5.93 19536 7.66
53662 13.29 96092 37.56 79449 46.76
56328 13.86 99109 38.56 83677 47.49
48141 12.52 96139 38.02 78471 46.17
46867 12.11 93117 36.63 75424 44.43
84250 18.24 126595 46.11111984 61.34
272580 81.51 485051 267.27408114317.78
284415 86.93 527216 288.07446837347.43
207931 66.37 414294 235.89330993271.03
369479104.29 598031 320.33527216392.87
297516 87.65 507910 278.64431432333.91
1461729497.72
1207894438.6923351661787.13
1294691460.1123404111791.16
1840936589.09
1252484467.94

5 0.00
5 0.00
4 0.00
4 0.00
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
8 0.00
8 0.00
8 0.00
8 0.00
8 0.00
8 0.00
8 0.00
8 0.00
8 0.00
8 0.00
11 0.00
11 0.00
12 0.00
12 0.00
11 0.00
11 0.00
11 0.00
11 0.00
11 0.00
11 0.00
15 0.01
15 0.01
14 0.01
14 0.01
16 0.01
16 0.01
16 0.01
16 0.01
16 0.01
16 0.01
18 0.06
18 0.05
18 0.06
18 0.05
16 0.06
16 0.05
18 0.06
18 0.05
19 0.06
19 0.05
20 0.18
20 0.32
20 0.18
20 0.32
21 0.18
21 0.32
21 0.17
21 0.32
22 0.17
22 0.32
24 0.32
24 1.75
7001 0.38
25 1.75
1646 0.33
23 1.71
1861 0.33
23 1.74
23159 0.52
26 1.71
41629 0.91
28 4.18
42679 0.90
28 4.25
37744 0.86
27 4.25
140453 1.94
29 4.21
62933 1.16
28 4.12
684737 9.07 126918 8.89
406041 5.61 100937 8.73
442547 6.06 82946 8.63
765455 10.00 277302 11.14
317692 4.65
29 7.03
2436164 35.24 863244 23.76
2340169 34.09 335745 15.68
1735477 25.29 486286 17.72
3952148 55.86 940556 24.24
2715866 39.44 625559 19.91
11473359183.604724980 93.56
7535468124.801934943 47.91
14645785233.686330198120.71
5809711110.10
5853546 95.561082086 32.22

5
0.01
4
0.00
5
0.01
5
0.00
5
0.01
26
0.01
26
0.01
27
0.00
20
0.01
23
0.01
100
0.03
140
0.02
122
0.02
131
0.02
114
0.02
669
0.10
634
0.11
822
0.12
820
0.12
821
0.12
2829
0.44
3260
0.49
1594
0.32
2568
0.42
3953
0.55
9312
1.76
10252
1.96
11247
2.11
14216
2.56
16880
3.04
56686 14.31
63035 16.33
55751 13.98
53121 13.27
96327 24.76
290649 104.18
339177 123.10
204614 73.39
435617 160.49
315339 111.84
1555286 794.93
1344815 683.05
1357681 692.11
20831681051.95
1231554 605.01

5 0.00
5 0.00
5 0.00
4 0.00
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
30 0.00
20 0.00
30 0.00
22 0.00
30 0.00
22 0.00
26 0.00
17 0.00
31 0.00
20 0.00
193 0.00
105 0.00
218 0.00
150 0.00
164 0.00
92 0.00
197 0.00
130 0.00
190 0.00
114 0.00
1182 0.00
866 0.00
1176 0.00
860 0.00
1277 0.00
969 0.00
1319 0.00
970 0.00
1334 0.00
969 0.00
6350 0.03
4387 0.03
6602 0.03
4664 0.03
5565 0.03
3524 0.03
5944 0.03
4140 0.03
6949 0.04
5268 0.04
30786 0.20
21194 0.20
30093 0.20
21255 0.20
32390 0.21
21694 0.21
32574 0.21
24552 0.23
33793 0.22
26167 0.24
155466 1.22 116685 1.32
164470 1.29 118494 1.33
161342 1.27 119688 1.36
155176 1.23 114649 1.30
168219 1.33 140128 1.58
755255 7.16 594032 7.95
794365 7.56 636587 8.66
731622 6.92 534711 7.37
833421 7.97 690267 9.29
771608 7.33 613253 8.43
3685552 41.04 3006991 49.12
3649801 40.32 2893803 47.54
3576134 39.61 2895182 47.26
3796035 42.13 3304570 53.29
3589382 39.29 2956995 48.84
15804498200.9013267920250.58
16472633208.3913720664256.89
15867374201.0112497087236.89
16309701208.4213801989262.53
16472551209.1313925654262.57

mystery-ipc1
01
02
03
04
07
09
11
12
15
16
17
18
19
20
24
25
26
27
28
29
30

5
7
4


8
7

6

4

6
7

4
6
5
7
4
9

7 0.01
2404 64.94
73 1.92
0 0.01
0 0.00
3049 47.68
9 0.02

0 0.14
354200.98
0 0.00

0 0.13
9 0.02
1807 50.40
14 0.27
8 0.01
31 0.26

6
0.00
8012 234.10
7
0.12
0
0.00
10764 137.61
33
0.03
2093419 938.05

85 26.31
0
0.00
4968 183.24

10
1835
159
47
14

0.01
25.34
1.61
0.02
0.10

6 0.01
722 47.50
11 0.59
0 0.00
0 0.00
1215 40.75
8 0.02

0 0.19
83 90.17
0 0.00

0 0.30
9 0.02
1344 60.20
6 0.22
15 0.02
10 0.17

6 0.20
1672 82.70
5 16.46

6

1.79

10

5.38

5193.75

65 811.87

0 0.00
0 0.00
3165 29.34
8 1.51
8 16.59
2102777 14.612102729 27.84

0
0.00
3868 670.08
34 41.20

198445.85
0 0.00
0 0.00
12478 96.38
285069 59.22 547246578.39
5 0.10
2526 5.94
6 4.80
8 0.63
5 8.94
42112 28.07

5 0.10
346 70.78
6 80.48
8 6.77
5107.10
44893357.07

0

0.00

14
1.22
3107 291.36
7 243.78
31 16.67
27 536.30

30 0.00
770852 21.85
507 0.02

0.00
4.47
0.03

0 0.00
0 0.00
138289 2.18
1458 1.44
426 0.00
19 0.00
2102777 15.09 1177842 21.87
279973 13.21
135 2.62
5400 0.41
0 0.00
133871 3.65
686125 23.28
31 0.00
8455 0.10
2174 0.03
843 0.00
153 0.01
1977063 38.26

Table 11: Similar Table 9 Miconic Mystery domains.
112

8
2368
5

5
0
1516
718

0.35
0.00
5.44
3.76

6 0.00
37 0.05
73 0.04
32 0.00
7 0.02
26686 28.27

fiImplicit Abstraction Heuristics

hF
task

h

hI

hFI

MS-104

MS-105

time

nodes

nodes

2264
0.49
3895
1.19
3070
1.36
2617
0.56
4485
1.32
3561
1.57
2264
0.49
3895
1.15
3070
1.36
2264
0.49
3895
1.15
3070
1.36
2264
0.48
3895
1.15
3070
1.35
366768 255.00 7797101599.86 5874821498.20
410728 277.99 7606681546.44 6067821515.46

24
24
24
24
24
621008
594758

nodes

time

nodes

time

nodes

time

time

HSPF

nodes

blind

hmax
nodes
time

time

nodes

time

0.06
2000
1.02
0.06
2378
1.07
0.06
2000
1.02
0.06
2000
1.02
0.05
2000
1.02
7.86 379735 217.37
7.34 405564 226.32

4822
5501
4822
4822
4822
882874
836647

0.01
0.02
0.01
0.02
0.01
4.91
4.62

4016
4594
4016
4016
4016
822514
787163

0.03
0.04
0.03
0.03
0.03
18.71
17.81

1624
2984
87189
456143

0.00
0.02
1.06
8.22

36
348
4346
104068

0.00
0.01
0.16
2.61

openstacks-ipc5
01
02
03
04
05
06
07

23
23
23
23
23
45
46

0.05
24
0.06
24
0.06
24
0.06
24
0.06
24
4.85 279614
4.69 264535

pathways-ipc5
01
02
03
04

6
12
18
17

1624
2755
44928
126950

0.03
0.08
2.59
11.45

1299
2307
20416
33788

0.02
0.06
1.06
2.97

1299
2437
29106
58738

0.03
0.09
2.14
7.07

7
1946
21671

1.14
2.56
6.43

7 0.79
13 42.11
14901129.23
98484288.39

1405
990
14772
34206

0.28
0.29
6.99
27.00

pipesworld-notankage-ipc4
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
17
19
21
23
24
41

5
12
8
11
8
10
8
10
13
18
20
24
16
30
26
22
24
14
18
24
12

121
0.15
1413
2.05
1742
5.26
7007 24.71
4093 27.45
12401 105.37
4370 71.75
18851 406.67

109
0.05
1542
0.86
3001
3.31
8911 12.43
6805 19.74
27377 103.75
9168 68.10
56189 483.28

121
0.18
1413
2.42
1742
6.43
7007 30.79
4093 35.40
12401 140.53
4370 105.53
20584 600.94

4729501577.22
117475 899.72

238331663.46

49035 495.53

6 0.04
6 0.04
6
2.79
121 0.00
13
0.00
169 0.30
13 0.17
435
3.07
1808 0.01
792
0.02
9 1.15
9 0.69
128
3.84
3293 0.02
262
0.02
651 1.95
12 7.05
812
8.84
16088 0.11
2925
0.13
77 5.63
9 21.15
155 16.53
11128 0.12
1121
0.15
1299 5.26
61 39.31
1151 23.41
49905 0.48
7102
0.72
233 19.78
9 59.70
185 29.88
46502 0.57
2631
0.48
561 12.42
497 94.69
1673 48.84 273585 3.39
22874
3.58
104875 25.48
10478 74.26 5513309 80.62 321861 68.99
2982520 66.89
6898321439.64
111212451579.77
90598 9.20 52159 43.24 108503 625.52 710123 3.86 107061 14.51
594661 12.41 416184109.43 4332961117.57 2467804 13.83 464982 56.82
12835 34.28
242241019.65 481045 3.14
33417
6.38
13255718119.54
648132 65.43
4921698 34.90 555619 105.49
3200672 90.07
8767431150.88
3992 18.13
948159.63
157782 1.31
8966
2.42
296506 49.11 104750256.13
481859 229.00
7315150142.82
114257 250.18

pipesworld-tankage-ipc4
01
02
03
04
05
06
07
08
11
13
15
17
21
31

5
12
8
11
8
10
8
11
22
16
30
44
14
39

77
0.13
126
0.07
105
0.20
960
1.20
1005
0.60
960
1.55
20803 155.53 52139 158.91 20803 207.57
1102841004.10 157722 668.67 1102841408.50
6531 73.63 13148 79.04
6531 112.61
20171 329.40 43583 310.24 20171 460.45

6 3.54
110 3.04
244 22.64
3892 16.68
376 15.46
1794328.18

6 0.13
13 0.20
9 36.89
12155.03
9120.06
11201.44

6
3.88
128 0.00
179
6.04
1012 0.01
818 24.47
52983 0.77
8116 64.68 221429 3.06
313 59.99
12764 0.21
3102 97.31
58487 0.87
2695 339.76 5404036198.08

13
0.01
659
0.02
1802
1.33
41540 14.49
2834
1.61
15746
6.61
104531 420.47

4116344 30.67

752867 334.42

4423951 65.44
1726598 13.56

126845 222.23
919764 381.66

96043191.77
660104 28.60 660102162.93
188517122.11
2546587141.12
12850247352.46
13241 69.80
1357801124.64

tpp-ipc5
01
02
03
04
05
06

5
8
11
14
19
25

6
9
12
15
623

0.00
0.00
0.00
0.01
0.52

6
11
27
78
5110

0.00
0.00
0.00
0.01
1.36

6
9
16
47
1455

0.00
0.00
0.00
0.01
1.21

6 0.00
9 0.00
12 0.00
15 0.01
20 0.36
947059 14.22

6 0.00
9 0.00
12 0.00
15 0.00
20 0.77
74798 23.97

6
9
12
15
624

0.01
0.01
0.03
0.07
0.48

7
26
116
494
24698

0.00
0.00
0.00
0.00
0.12

6
0.00
16
0.00
83
0.00
430
0.00
17398
0.15
9267024 216.69

trucks-ipc5
01
02
03
04
05
06
07
08
09

13
1691
0.41
1027
0.22
1039
0.40
14 0.03
14 0.02
285
0.56
5774 0.02
402
0.01
17
9624
2.68
2898
0.57
2957
1.35
4192 0.22
18 0.17
1413
1.04
28348 0.14
939
0.03
20
80693 71.37 20752 19.93 22236 31.25
199405 2.89 173790 6.88
4049
4.43 379582 2.97
9465
0.40
23 17538661237.601205793 850.3413156721394.88 2591561 29.172568634 56.96
8817
7.75 2990366 26.65 209140
9.43
25
23444940392.99
14744 23.12
1248571 90.78
30
308920 343.47
23 21347281313.60 719751 408.75 755608 820.55 7575415 88.918080496117.13 43270 27.6212410588117.92 223011 19.34
25
49663 47.61
3106944 403.36
28
233577 248.21

Table 12: Similar Table 9 Openstacks, Pathways, Pipesworld-NoTankage,
Pipesworld-Tankage, TPP, Trucks domains.

113

fiKatz & Domshlak

hF
task

h

nodes

hI
time

nodes

hFI
time

nodes

time

MS-104

MS-105

nodes time

nodes

time

HSPF

nodes

blind
time

hmax
nodes time

nodes

time

0.00
9
0.01
11
0.00
20
0.08
71
0.00
20
0.04
33
0.00
12
0.34
332
0.00
23
0.11
154
0.00
9
0.01
11
0.00
26
0.09
122
0.00
9
0.12
128
0.00
9
0.06
49
0.04
18
1.04
1358
0.00
96
0.19
153
0.00
40
0.17
153
0.00
59
0.16
95
0.00
13
0.06
27
2.58
356 18.99
3562
0.12
2287
1.34
2742
0.00
13
0.03
16
0.00
29
0.21
158
0.77
6338
4.46
9009
0.00
52
0.18
84
0.00
21
0.12
42
0.87
22315
8.16 189516
0.01
30
0.43
200
0.00
21
0.12
42
37.93
28 780.38
8913
0.00
52
0.28
182
0.01
179
0.85
773
0.00
49
0.29
95
1.43
3337
7.12 244499
0.02
393
1.35
2295
6.55
7530 32.97 53911
0.00
352
0.74
435
0.63
947
2.29
2291
0.00
158
0.50
227
6.36
7448
8.27 165170
14.07 188564 111.991669788
0.01
277
2.10
1532
0.01
33
0.74
562
0.07
146
1.78
4103
12.86
23371 87.911036992
0.00
21
0.16
54
0.18
1773
1.29
1908
0.00
256
0.50
333
0.05
407
2.18
4142
0.00
121
0.74
434
4.05
19865
6.91 80785
0.04
515
2.32
5075
11.08 200559 101.21
23.32 27728751408.64
0.02
390
1.40
690

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.02
0.01
0.00
0.00
0.04
0.00
0.00
0.67
0.00
0.00
0.12
0.00
0.00
0.00
1.27
0.01
0.25
0.00
0.01
0.00
0.63
9.44
0.00
0.00
0.01
6.74
0.00
0.01
0.00
0.01
0.00
0.25
0.01

9 0.00
47 0.00
28 0.00
102 0.00
69 0.00
9 0.00
62 0.00
52 0.00
20 0.00
376 0.01
142 0.00
113 0.00
86 0.00
18 0.00
324 0.02
1876 0.01
14 0.00
91 0.00
6925 0.08
75 0.00
31 0.00
177138 1.43
116 0.00
31 0.00
854 0.18
142 0.00
616 0.00
79 0.00
192459 2.32
1834 0.01
16766 0.36
424 0.00
1073 0.01
216 0.00
61548 1.06
717884 18.27
1342 0.01
357 0.00
2597 0.02
229210 9.51
35 0.00
1636 0.01
315 0.00
3235 0.02
358 0.00
65984 0.63
4406 0.02
19020089286.02

0.00

642

psr-small-ipc4
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50

8
11
11
10
11
8
11
8
8
7
19
16
15
9
10
25
9
12
25
17
10
33
12
10
9
17
21
14
21
22
19
24
21
21
22
22
23
13
23
20
10
30
20
19
20
34
27
37
47
23

10
52
31
66
75
10
61
24
18
131
149
120
90
19
1200
2328
15
85
8025
80
28
163299
77
28
485
144
616
79
142772
1791
11278
431
1480
223
65965
571766
1307
301
2486
31
1855
328
2990
347
60888
4104

637

0.00
10
0.00
10
0.00
0.01
55
0.00
52
0.01
0.01
31
0.00
31
0.00
0.04
91
0.03
73
0.06
0.01
79
0.01
75
0.02
0.00
10
0.00
10
0.00
0.01
61
0.00
61
0.01
0.01
29
0.00
25
0.01
0.01
19
0.00
18
0.00
0.20
183
0.18
155
0.32
0.03
149
0.02
149
0.04
0.03
123
0.02
120
0.04
0.02
90
0.01
90
0.02
0.00
19
0.00
19
0.00
6.55
708
6.25
769
9.91
0.65
2158
0.34
2176
0.85
0.00
15
0.00
15
0.00
0.03
90
0.01
85
0.03
4.31
7856
2.19
7876
5.80
0.02
80
0.01
80
0.02
0.01
28
0.00
28
0.01
405.65 176058 245.42 168685 617.45
0.04
93
0.03
77
0.06
0.01
28
0.00
28
0.01
84.24
463 145.38
482 213.42
0.05
150
0.03
146
0.06
0.33
675
0.21
650
0.49
0.02
79
0.01
79
0.02
436.34 187319 307.77 159325 709.89
1.25
1982
0.80
1883
1.90
25.93
6810 38.66
8297 53.43
0.17
431
0.10
431
0.25
0.84
1436
0.30
1391
1.00
0.07
223
0.04
223
0.09
160.36 63186 39.55 68281 199.30
392.49 371834 786.06 4584021094.61
1.29
1417
0.95
1363
2.10
0.20
372
0.15
326
0.32
2.49
2942
1.64
2682
3.91
1826081384.90
0.01
34
0.00
31
0.01
0.50
1747
0.17
1739
0.59
0.09
328
0.05
328
0.12
3.25
3430
2.30
3121
5.24
0.16
376
0.11
359
0.25
51.77 61842 21.14 61563 68.33
5.27
4522
3.93
4284
8.70

0.39

659

0.26

645

9 0.00
9
12 0.00
12
12 0.00
12
11 0.00
11
12 0.00
12
9 0.00
9
12 0.00
12
9 0.00
9
9 0.00
9
8 0.04
8
20 0.00
20
17 0.00
17
16 0.00
16
10 0.00
10
11 0.46
11
975 0.11
26
10 0.00
10
13 0.00
13
2910 0.27
26
18 0.00
18
11 0.00
11
34 0.28
34
13 0.00
13
11 0.00
11
10 5.42
10
18 0.00
18
22 0.01
22
15 0.00
15
22 0.39
22
23 0.01
23
2647 0.89
723
25 0.00
25
446 0.26
22
22 0.00
22
24021 0.83 11113
48350 2.98
2783
24 0.02
24
14 0.01
14
24 0.08
24
38837 1.88
7767
11 0.00
11
1117 0.18
31
21 0.00
21
20 0.05
20
21 0.01
21
36941 0.67 32582
28 0.04
28
129627 2.37
2500
204836815.84 594399
0.60
24 0.02
24

0.00

rovers-ipc5
01
02
03
04
05
07
12

10
8
11
8
22
18
19

147
0.01
147
0.01
147
0.02
11 0.03
11 0.03
48
0.07
1104 0.00
283 0.00
44
0.01
44
0.01
44
0.01
9 0.00
9 0.00
16
0.03
254 0.00
129 0.00
672
0.11
419
0.05
448
0.10
12 0.11
12 0.12
804
0.16
3543 0.02
757 0.00
47
0.02
20
0.00
24
0.01
9 0.04
9 0.04
58
0.08
897 0.00
223 0.00
808084 237.13 410712 123.64 522937 231.28 61726711.48 375808 18.46 298400 101.658559690126.19 4318309 81.53
741649 517.1816822451780.27 328088451.022212903 59.20 1459792 866.93
9618062199.91
5187273166.77

satellite-ipc4
01
02
03
04
05
06

9
24
0.00
32
0.00
13
86
0.02
337
0.10
11
2249
1.24
656
0.53
17
9817 10.65 14860 24.90
15 2795691251.83 46453 515.80
20 1496577 968.2415723271721.87

29
0.00
241
0.13
728
0.82
11250 26.18
61692 877.26

10 0.00
10 0.00
14 0.01
14 0.01
12 0.56
12 0.64
4152 0.99
18 4.43
81972 7.26 148667 69.28
276922974.73 307962 32.52

46
0.06
89
646
0.21
1728
1945
0.93 15185
15890
9.50 345663
267513 565.18

2 0.00
2 0.00
7 0.00
7 0.00
7 0.21
7 0.90
9 0.20
9 0.89
12 0.25
12 1.90
12 0.38
12 3.54
16 0.38
16 3.48
14354 2.00
12 14.48
251703551.18 611457 30.47
132287134.84 137872 25.44
31003011.28 110726 26.65

2
0.45
2
9
0.46
58
40
3.42
5160
215
3.44
5256
422
7.70 82289
1957 11.81 596531
34890 30.36 405626
83533 292.05

0.00
0.01
0.17
4.70

59
940
6822
180815

0.00
0.00
0.11
3.37

10751017371.43

zenotravel-ipc3
01
02
03
04
05
06
07
08
09
10
11

1
6
6
8
11
11
15
11
21
22
14

2
17
28
99
177
2287
5088
3268

0.01
0.02
0.08
0.15
0.32
5.51
9.63
43.96

2
18
18
88
220
1144
4234
1026

0.00
0.02
0.12
0.26
0.22
2.00
5.56
8.92

769041090.67

2
17
12
81
136
504
4199
1655

0.01
0.02
0.11
0.30
0.36
2.40
10.58
30.06

0.00
0.00
0.04
0.03
0.63
5.90
3.56

2 0.00
22 0.00
492 0.02
665 0.01
12466 0.33
85931 2.47
115348 2.60
687846 50.76

Table 13: Similar Table 9 PSR, Rovers, Satellite, Zenotravel domains.

114

fiImplicit Abstraction Heuristics

hF
task

h nodes

hI
timenodes

hFI
timenodes

MS-104
time nodes

MS-105

timenodes

HSPF

time nodes

blind
hmax
time nodes time nodes
time

schedule-strips
02-0
02-1
02-2
02-3
02-4
02-5
02-6
02-7
02-8
02-9
03-0
03-1
03-2
03-3
03-4
03-5
03-6
03-7
03-8
03-9
04-0
04-1
04-2
04-3
04-4
04-5
04-6
04-7
04-8
04-9
05-0
05-1
05-3
05-4
05-5
05-6
05-7
05-8
05-9
06-2
06-4
07-0
07-9

3
5
0.15
5
0.14
5
0.22
2
3
0.16
4
0.11
3
0.18
2
3
0.32
3
0.17
3
0.40
3
26
0.50
37
0.76
26
0.61
3
68
1.34 188
2.24 220
7.20
2
3
0.33
3
0.14
3
0.38
2
3
0.14
5
0.12
3
0.17
2
3
0.30
3
0.13
3
0.34
2
3
0.32
3
0.14
3
0.38
3
5
0.15
5
0.14
5
0.22
4
40
2.72 407 12.16 140 14.55
2
3
0.51
3
0.35
3
0.72
4
27
1.16
50
1.83
33
2.33
4
15
0.79
91
2.39
15
0.96
3
4
1.11
16
2.08
4
1.52
4
73
6.13 471 16.71
74
8.32
4
72
1.27
75
1.80
69
1.33
4
28
1.05
50
1.83
28
1.43
4
273 11.53 266 11.46 273 17.48
4
8
0.96
31
1.77
14
2.13
5
373 13.91 1498 74.46 167 24.60
6 175591373.8010707 626.54
5
209
9.88 406 20.85
66
5.30
5
142 10.47 674 33.29 251 29.28
5
921 64.48 450 46.95 574 116.65
6
483 47.25 4544 268.77 850 187.46
6
779 27.0911610 361.74 1834 102.68
5
99 18.48 424 38.04 163 40.04
5
102 16.01 573 31.87 111 23.35
4 1043 80.06 996 76.64 1050 143.48
5
163 41.61 483 63.23 167 62.53
6 2701 213.92
1257 286.28
7
136221693.68
6
989 100.02 3433 229.05 582 100.05
6
198 21.67 9550 767.94 347 68.64
7 6033 743.61
103251508.56
6
944 131.19175621446.20 2107 379.70
7 1190 172.59
2709 730.54
6 1537 140.49158291248.19 2717 547.56
6
888 243.14
1709 730.36
8 115351776.87
7 2489 786.76
8 68291559.86

4 511.10
3 104.98
3 231.99
4 56.51
3
3
3
3
4

363.11
121.84
323.77
316.53
251.46

5 191.03
5 259.13
5 682.30
5 121.58
5 195.72
5 235.48
71115.76
6 267.29
7
7
6
6
5

837.68
459.19
936.68
711.65
316.22

41743.32

5
3
3
4
4
3
3
3
3
5

577.39
754.26
495.56
658.90
484.62
667.32
697.42
604.06
668.79
577.16

76 0.02
5
0.09
6 0.02
3
0.07
5 0.02
3
0.07
529 0.03
95
0.45
543 0.03
108
0.44
3 0.03
3
0.07
6 0.02
3
0.06
13 0.02
3
0.07
8 0.02
3
0.07
76 0.03
5
0.09
11915 0.60 1127
8.98
31 0.04
25
0.37
3617 0.23 1228
9.56
3379 0.23
170
1.85
41223.90
301 0.06
22
0.27
12217 0.64 1175 12.43
2663 0.19 1542 11.73
12859 0.68 1323 13.47
12616 0.65 1590 11.13
4339 0.27
913
7.69
31219326.88 22993 273.38
55206949.79
47696 4.97 9703 131.69
89272 8.74 12941 163.84
62013 6.03 13614 168.07
1079781399.99
1071151001.40
61327 5.97 8683 103.50
34046729.56 15122 181.98
41673 4.27 5480 83.69
14335022.71 43336 751.35

120602 989.42

Table 14: Similar Table 9 (non-IPC) Schedule-STRIPS domain.

115

fiKatz & Domshlak
hF
task

h

nodes

hI
time

nodes

hFI
time

nodes

time

MS-104

MS-105

nodes

nodes

time

HSPF

time

nodes

9
0.00
10
0.00
18
0.03
21
0.01
22
0.01
42
0.17
42
0.17
96231549.13
89525 466.14
19
0.01
22
0.01
40
0.21
38
0.21
8968 238.16
8931 267.81
3053401077.90

9
10
29
21
22
42
42
203
12956
19
22
40
38
62
59

time

blind
nodes time

hmax
nodes time

airport-ipc4
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
19
21
22
36
37

8
10
0.01
9 0.00
9
0.00
9 0.00
9
12
0.01
15 0.00
15
0.01
10 0.00
17
86
0.02
133 0.01
93
0.02
18 0.04
20
22
0.01
21 0.00
21
0.01
21 0.02
21
23
0.08
30 0.02
27
0.09
22 0.01
41
513
0.16
639 0.06
567
0.19
42 0.16
41
514
0.15
632 0.05
550
0.19
42 0.17
62
12733
1.89 21544 1.36 14398
4.02
24372 25.42
71
88670 16.58 136717 9.60 90412 38.78 152408 64.92
18
19
0.01
19 0.01
19
0.01
19 0.02
21
23
0.10
30 0.03
27
0.12
22 0.02
39
475
0.20
728 0.07
568
0.25
40 0.21
37
434
0.20
663 0.07
479
0.24
38 0.20
60
12040
2.90 25110 1.86 15948
4.64
30637 51.23
58
11477
2.74 23317 1.71 14557
4.25
28798 46.20
79 267277 77.39 824491 97.12 353592 114.58 1031524200.95
88 2460667 708.82
26786891235.79
90 1354353 592.533400142492.061462739 660.17
101
5156 48.29 11259 3.72
4773 51.13
7326372.92
148 6066481110.091063668318.90 4778361082.91 1119943762.02
109
9504 129.73 34986 14.41
9436 140.75
34365853.70
142
37873 820.33

102

10.28

0.72
11 0.00
9 0.00
1.23
13 0.00
10 0.00
5.10
164 0.00
57 0.00
1.32
23 0.00
21 0.00
46.54
27 0.00
22 0.00
123.13
738 0.01
418 0.02
117.56
742 0.01
405 0.02
602.09 27032 0.28
9687 0.90
993.07 175717 2.47 56484 7.62
2.45
21 0.00
19 0.00
65.36
27 0.00
22 0.01
169.02
873 0.01
392 0.03
134.87
822 0.01
342 0.03
714.76 35384 0.39
9196 1.11
647.05 33798 0.38
8200 1.01
124746719.72 221993 49.03
1043661310.89
831632253.21
18809 0.42
3184 1.12
159967105.29
63061 1.44

blocks-ipc2
04-0
04-1
04-2
05-0
05-1
05-2
06-0
06-1
06-2
07-0
07-1
07-2
08-0
08-1
08-2
09-0
09-1
09-2
10-0
10-1
10-2
11-0
11-1
11-2
12-0
12-1
13-0
13-1
14-0
14-1

6
15
10
14
6
7
12
32
10
37
16
152
12
33
10
41
20
855
20
278
22
6910
20
1458
18
1533
20
10040
16
479
30 134185
28
3435
26
6379
34 1524599
32 610206
34 1516087
32
30
34
34
34
42
44
38
36

0.00
46 0.00
17
0.00
7 0.03
7
0.03
0.00
31 0.00
15
0.00
11 0.04
11
0.03
0.00
26 0.00
10
0.00
7 0.04
7
0.03
0.00
302 0.01
113
0.00
13 0.30
13
0.96
0.00
280 0.00
98
0.00
11 0.29
11
0.96
0.00
596 0.00
348
0.01
17 0.29
17
0.95
0.00
766 0.01
207
0.01
13 0.95
13
8.56
0.00
2395 0.03
578
0.02
11 0.90
11
8.34
0.01
5444 0.05
3352
0.06
733 0.87
85
8.84
0.01 20183 0.28
4022
0.12
577 1.93
144 23.32
0.10 59207 0.60 38539
0.67
10071 1.70
1835 21.05
0.02 46009 0.52 18854
0.39
1855 1.59
782 20.37
0.03 344157 5.46 69830
2.09
5557 3.67
678 36.80
0.17 517514 7.22 191352
4.91
45711 3.88
11827 33.49
0.02 237140 4.08 32567
1.09
277 3.63
54 32.53
3.107405904117.144346535 118.23 1233374 16.00 971409 77.74
0.094145371 77.54 917197 33.32
95068 7.35
58873 63.15
0.174145278 78.21 923365 33.79 161719 13.54
20050 82.45
36.52
15.79
12063665 228.76
37.71
7046739 141.44

7
0.36
93 0.00
25 0.00
11
0.39
66 0.00
23 0.00
7
0.38
63 0.00
18 0.00
13
1.32
467 0.00
145 0.00
11
1.36
567 0.00
135 0.00
17
1.49
792 0.00
297 0.00
13
4.10
1826 0.00
276 0.00
11
4.17
4887 0.01
755 0.01
31
4.29
6385 0.02
2556 0.03
22 11.47 37157 0.14
5943 0.11
174 11.25 63376 0.21 33194 0.46
90 10.99 55218 0.19 18293 0.29
25 26.00 519107 2.28 94671 2.07
151 26.57 636498 2.60 199901 3.85
17 25.85 433144 1.93 52717 1.30
464 56.76798464936.763840589 85.00
82 56.98591457229.731200345 32.06
81 57.02596316030.021211463 32.15
1800 114.26
1835 115.19
3685 116.75
2678 213.32
1510 203.79
3984 213.97
1184 370.06
614 382.34
83996 860.45
1634381104.27
27791063.02
71541087.40

depots-ipc3
01
02
03
04
07
10
13

10
114
0.01
279 0.01
161
0.02
11 0.00
11
0.00
45
0.77
329 0.00
136 0.00
15
1134
0.08
9344 0.31
2638
0.22
738 3.24
16
1.14
898 11.56 15404 0.11
3771 0.17
27 134428
8.592520703159.84 581726 66.43 348288 20.69 239313 222.35 103089 247.13293039827.201204646 97.62
30 1254545 101.18
5835295 923.87 1284048 52.05 1273762 529.34
21 109765
9.174271196336.59 487961 76.02 211820 37.54
41328 324.19650110071.581331701166.76
24 2964635 283.55
60814781187.66 3241083157.52
25 1003709 152.30
81618721559.21 1427824116.06

driverlog-ipc3
01
02
03
04
05
06
07
08
09
10
11
13

7
49
0.00
37 0.00
37
0.00
8 0.04
19
15713
0.42 18452 0.27 15794
0.55
20 0.13
12
164
0.00
190 0.00
163
0.01
13 0.16
16
6161
0.42 10778 0.30
7665
0.62
17 0.49
18
13640
1.01 11400 0.36 10984
1.07
2614 0.60
11
608
0.09
795 0.06
492
0.11
291 1.35
13
864
0.14
1730 0.11
1006
0.21
14 1.42
22 669994 75.741181268 61.32 694996 104.59 287823 7.34
22 150255 14.72 198651 11.44 164109 23.06
15504 1.70
17
4304
0.44 16099 1.21
4037
0.69
18 1.64
19
43395
4.99 41445 2.22 39069
5.90
34137 1.99
26 1303099 325.711014865144.641098694 422.20 1298884 19.52

8
20
13
17
19
12
14
2952
23
18
10790
870875

0.03
44
0.47
182 0.00
20 0.00
0.26 15998
4.55 68927 0.36 54283 0.52
0.25
863
1.25 16031 0.09
2498 0.03
2.41 22933 12.20 999991 8.12 393673 6.56
4.58 24877 18.77629080361.571724611 34.73
9.72
3804 10.08 681757 7.64 54451 1.71
15.35 25801 41.34634976781.53 493480 17.31
20.31
10.43
18.54 18234 68.22
17.01 5596231193.00
6141130330.22
35.33

Table 15: Runtimes cost-optimal heuristic-search planners Airport,
Blocksworld, Depots, Driverlog domains.
description
planners given Section 6; fork-decomposition heuristics via
structural-pattern databases. Column task denotes problem instance, column
h denotes optimal solution length. columns capture run time
number expanded nodes.
116

fiImplicit Abstraction Heuristics

hF
taskh

nodes

hI
time

nodes

hFI
time

nodes

time

MS-104

MS-105

nodes

nodes

time

time

HSPF

nodes

blind
time

nodes

time

hmax
nodes
time

freecell-ipc3
01
02
03
04
05

8
14
18
26
30

234
0.10
974
0.15
274 0.17
30960
1.95
75150
5.53
37131 4.79
197647 14.41 533995 78.27 240161 51.24
997836 60.67 1921470 232.95 1218329213.02
6510089 448.22

87 3.12
31487 40.40
95805140.96
943074 86.78
5950977243.74

9 38.74

9 13.01
3437 0.03
1043
0.15
466 70.29 130883 1.46
41864 10.77
1589 169.39 944843 11.45 210503 75.62
15848 341.02 3021326 38.80 600525 247.70
40642 916.44
14080351062.25

grid-ipc1
01
02

14
26

571
0.60
33302741078.55

1117

0.34

472

0.78

660 8.63
467121.10
3392724 50.35 3244132241.94

6446

0.08

190
0.10
664016 231.26

gripper-ipc1
01
02
03
04
05
06
07

11
214
0.00
240
0.00
214 0.00
12 0.00
12 0.00
33
0.11
236 0.00
208
0.00
17
1768
0.02
1832
0.01
1803 0.03
18 0.11
18 0.08
680
0.37
1826 0.01
1760
0.01
23
11626
0.19
11736
0.08
11689 0.22
11514 0.47
2094 1.75
7370
1.52
11736 0.04
11616
0.08
29
68380
1.46
68558
0.51
68479 1.63
68380 1.24
68190 8.05
55568 10.29
68558 0.27
68368
0.56
35
376510 10.07 376784
3.20 376653 11.11
376510 3.52 376510 19.46 344386 79.96 376772 1.59 376496
3.51
41 1982032 70.91 1982408 19.08 1982227 77.81 1982032 13.42 1982032 42.16 1911592 577.49 1982394 9.59 1982016 21.57
47 10091986 438.4110092464 105.6710092241478.67 10091986 61.6610091986106.84
10092464 51.1010091968 119.64

logistics-ipc1
01
05
31
32
33
35

26
22
13
20
27
30

77763
7.14 1469610
3293
0.46 850312
436
0.03
1981
392
0.01
2704
312180 27.19
477883 183.08

95.49
42.43
0.07
0.07

830292 98.59
173477 18.19
1284 0.09
962 0.05
3617185427.52

1918881 41.03
768161 18.69
494 0.42
21 0.16

949586 34.82
609393 35.27
14 2.11
21 0.72
529338 32.55

2119551700.26
6.58
7.08

155645
245325

1.66
2.07

32282
81156

0.57
1.00

21 0.05
20 0.04
16 0.05
28 0.38
18 0.38
9 0.38
26 1.23
15 1.26
26 1.26
25 1.22
37 4.87
49 4.94
32 6.90
45 7.21
37 9.46
31 9.43
668834 29.73
1457130 43.00
701106 37.42

21
0.34
20
0.37
16
0.36
28
0.58
18
0.72
9
0.78
26
1.03
15
1.16
26
1.03
25
1.02
24317 35.46
362179 453.06
14890 33.50
114155 198.84
32017 83.16
6720 26.48

11246
9249
4955
109525
22307
1031
490207
24881
476661
422557

0.05
0.04
0.02
0.64
0.13
0.00
3.40
0.16
3.32
2.95

4884
4185
1205
74694
6199
280
202229
3604
200012
133521

0.03
0.03
0.01
0.59
0.05
0.00
1.92
0.03
1.98
1.29

3636

0.07

481
9598

logistics-ipc2
04-0 20
04-1 19
04-2 15
05-0 27
05-1 17
05-2 8
06-0 25
06-1 14
06-2 25
06-9 24
07-0 36
07-1 44
08-0 31
08-1 44
09-0 36
09-1 30
10-0 45
10-1 42
11-0 48
11-1 60
12-0 42
12-1 68

21
20
16
28
18
9
26
15
26
25
37
1689
32
45
37
31
46
43
697
21959
43
106534

0.00
193
0.00
570
0.00
117
0.00
2550
0.00
675
0.00
24
0.00
4249
0.00
181
0.00
2752
0.00
2395
0.00 251287
0.07 3532213
0.00
82476
0.01 1183608
0.00 351538
0.00
59336
0.01
0.01
0.09
2.22
0.02
11.64

0.00
65 0.00
0.01
293 0.00
0.00
79 0.00
0.05
1171 0.03
0.01
427 0.01
0.00
13 0.00
0.09
2461 0.07
0.00
99 0.00
0.06
1394 0.04
0.04
1428 0.04
7.52
98053 4.59
99.33 1705009 72.35
2.69
35805 1.78
45.72 462244 25.36
13.75 167038 9.76
2.48
25359 1.73

21
20
16
28
18
9
26
15
26
25
525
666324
1042
16708
20950
31

0.03
0.03
0.04
0.10
0.10
0.09
0.18
0.18
0.19
0.18
0.65
8.83
0.96
1.15
1.56
1.27

775996 43.56
2222340 87.47

mprime-ipc1
01
02
03
04
05
07
08
09
11
12
15
16
17
19
21
25
26
27
28
29
31
32
34
35

5
7
4
8
11
5
6
8
7
6
6
6
4
6
6
4
6
5
7
4
4
7
4
5

196
0.02
10
0.01
11604
2.72
44045 80.68
427
0.27
7
0.08
3836
0.22
1775
0.10
1745027 195.08
3314
0.25
47
0.03
485381 491.53 13767801426.21
19838
2.92 100188 74.85
9
0.02
219
0.03
16320
1.89
8118
0.73
252
0.76
2746 10.47
727401 521.78
174221 55.09
75
0.01
77622 24.69
54
0.16
8
0.01
182
0.12
248
0.51
31759
1.73
234
0.26
392
0.07

51590 135.00
453 18.78
95361 485.79
34022 47.43
30
0.01
147854 48.25
1772
1.50
403
0.02
56
0.08
46
0.68
12436
1.46
46
0.16
290
0.06

24 0.01
2565 4.20
11 0.16
1093 0.09
604756592.60
346 0.08
5227
8
5243

6.31
0.03
1.13

448 2.76
451 21.40

6 2.00
3317 88.58
36 33.64
9 6.09
1705009127.53
1667 46.72
1469752403.45
21993 36.25
8 4.69
34763 11.45

6 20.45
5463.85
9 82.71

108

49.59

19076 781.74

9868 0.67
599590 23.58
18744

8 62.68
42055143.27

0.56

2197646 71.69
22 394.26
73260 2.21
25665 724.12 108652 3.50

473 81.42

425144 32.17
172736 42.48

123039313.25
169400392.30
29 0.01
68239106.35
9 0.18
37 0.02
32 0.11
19 1.00
11839 1.93
23 0.28
84 0.08

5 0.48
172432 46.33
6 11.59
8 1.88
5 14.92
419 99.87
19429 21.61
450151.69
359 3.63

5 2.75
189154454.69
6154.43
8 22.55
5201.40
7269292.37
6 43.43

1503293103.23
383 0.00
819590 61.01
84079 3.50
128 146.80
17333 0.25
3187 0.17
3584 0.19
110731701.00 115479 2.75
3618 0.19
706 96.55
2476 0.05
85

8.71

68
0.04
12606 36.65
5
0.07
200
0.24
14881571638.78
11
0.04
7650 84.33
19023 30.26
915
0.54
1520
1.78
1039 178.55
7962 35.65
5
1.06
36013 533.75
15250 101.75
6
0.00
440
2.69
831
2.08
211
0.06
7
0.10
11
0.17
3096
1.74
11
0.18
44
0.03

Table 16: Similar Table 15 Freecell, Grid, Gripper, Logistics-ipc1,
Logistics-ipc2, Mprime domains.

117

fiKatz & Domshlak

hF
task

h

nodes

hI
time

nodes

hFI
time

nodes

time

MS-104

MS-105

nodes

nodes

time

time

HSPF

nodes

blind
time

nodes

time

hmax
nodes time

miconic-strips-ipc2
01-0
01-1
01-2
01-3
01-4
02-0
02-1
02-2
02-3
02-4
03-0
03-1
03-2
03-3
03-4
04-0
04-1
04-2
04-3
04-4
05-0
05-1
05-2
05-3
05-4
06-0
06-1
06-2
06-3
06-4
07-0
07-1
07-2
07-3
07-4
08-0
08-1
08-2
08-3
08-4
09-0
09-1
09-2
09-3
09-4
10-0
10-1
10-2
10-3
10-4
11-0
11-1
11-2
11-3
11-4

4
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
3
5 0.00
5 0.00
5 0.00
4 0.00
4 0.00
4
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
4
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
4
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
7
19 0.00
22 0.00
19 0.00
8 0.00
8 0.00
7
21 0.00
23 0.00
21 0.00
8 0.00
8 0.00
7
21 0.00
23 0.00
21 0.00
8 0.00
8 0.00
7
24 0.00
24 0.00
24 0.00
8 0.00
8 0.00
7
19 0.00
22 0.00
19 0.00
8 0.00
8 0.00
10
86 0.00
129 0.00
98 0.00
11 0.00
11 0.00
11
120 0.00
168 0.00
147 0.00
12 0.00
12 0.00
10
137 0.00
143 0.00
137 0.00
11 0.00
11 0.00
10
96 0.00
153 0.00
117 0.00
11 0.00
11 0.00
10
103 0.00
149 0.00
115 0.00
11 0.00
11 0.00
14
524 0.00
843 0.00
686 0.01
15 0.01
15 0.01
13
505 0.00
817 0.00
663 0.01
14 0.01
14 0.01
15
685 0.00
942 0.00
802 0.01
16 0.01
16 0.01
15
681 0.00
942 0.00
798 0.01
16 0.01
16 0.01
15
685 0.00
942 0.00
802 0.01
16 0.01
16 0.01
17
2468 0.03
4009 0.03
3307 0.05
18 0.06
18 0.05
17
2807 0.04
4345 0.03
3677 0.06
18 0.06
18 0.05
15
1596 0.02
2981 0.02
2275 0.04
16 0.06
16 0.05
17
2256 0.03
3799 0.03
3104 0.05
18 0.06
18 0.05
18
3210 0.04
4732 0.03
4267 0.06
19 0.06
19 0.05
19
9379 0.18
17665 0.15 13531 0.26
20 0.18
20 0.32
19
9106 0.17
18134 0.15 14052 0.27
20 0.18
20 0.32
20
10900 0.20
19084 0.16 15111 0.28
21 0.18
21 0.32
20
12127 0.23
21708 0.18 17807 0.33
21 0.17
21 0.32
21
13784 0.24
23255 0.19 19536 0.35
22 0.17
22 0.32
23
53662 1.19
96092 0.97 79449 1.76
24 0.32
24 1.75
24
56328 1.24
99109 0.96 83677 1.83
7001 0.38
25 1.75
22
48141 1.10
96139 0.94 78471 1.77
1646 0.33
23 1.71
22
46867 1.08
93117 0.92 75424 1.69
1861 0.33
23 1.74
25
84250 1.70 126595 1.22 111984 2.36
23159 0.52
26 1.71
27
272580 7.05 485051 5.51 408114 10.53
41629 0.91
28 4.18
27
284415 7.56 527216 6.01 446837 11.58
42679 0.90
28 4.25
26
207931 5.60 414294 4.79 330993 8.90
37744 0.86
27 4.25
28
369479 9.25 598031 6.74 527216 13.30
140453 1.94
29 4.21
27
297516 7.74 507910 5.79 431432 11.04
62933 1.16
28 4.12
31 1461729 43.82 2491975 32.672138656 63.58
684737 9.07 126918 8.89
30 1207894 37.47 2335166 30.761952916 59.39
406041 5.61 100937 8.73
30 1294691 40.03 2340411 30.971972234 59.25
442547 6.06 82946 8.63
32 1840936 52.68 2889342 38.122571844 74.47
765455 10.00 277302 11.14
28 1252484 40.34 2352633 31.351944297 59.37
317692 4.65
29 7.03
33 5716041202.3710316603153.808774563300.08 2436164 35.24 863244 23.76
32 5601282201.4310789013162.699144153315.23 2340169 34.09 335745 15.68
32 4153191155.86 9148616138.697466572265.86 1735477 25.29 486286 17.72
34 6108094214.6810960203167.109400386320.13 3952148 55.86 940556 24.24
33 5920127211.4011075136170.829448049322.74 2715866 39.44 625559 19.91
37
11473359183.604724980 93.56
34 15349953668.77
7535468124.801934943 47.91
38
14645785233.686330198120.71
38
5809711110.10
35
5853546 95.561082086 32.22

5
0.01
4
0.00
5
0.01
5
0.00
5
0.01
26
0.01
26
0.01
27
0.00
20
0.01
23
0.01
100
0.03
140
0.02
122
0.02
131
0.02
114
0.02
669
0.10
634
0.11
822
0.12
820
0.12
821
0.12
2829
0.44
3260
0.49
1594
0.32
2568
0.42
3953
0.55
9312
1.76
10252
1.96
11247
2.11
14216
2.56
16880
3.04
56686 14.31
63035 16.33
55751 13.98
53121 13.27
96327 24.76
290649 104.18
339177 123.10
204614 73.39
435617 160.49
315339 111.84
1555286 794.93
1344815 683.05
1357681 692.11
20831681051.95
1231554 605.01

5 0.00
5 0.00
5 0.00
4 0.00
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
5 0.00
30 0.00
20 0.00
30 0.00
22 0.00
30 0.00
22 0.00
26 0.00
17 0.00
31 0.00
20 0.00
193 0.00
105 0.00
218 0.00
150 0.00
164 0.00
92 0.00
197 0.00
130 0.00
190 0.00
114 0.00
1182 0.00
866 0.00
1176 0.00
860 0.00
1277 0.00
969 0.00
1319 0.00
970 0.00
1334 0.00
969 0.00
6350 0.03
4387 0.03
6602 0.03
4664 0.03
5565 0.03
3524 0.03
5944 0.03
4140 0.03
6949 0.04
5268 0.04
30786 0.20
21194 0.20
30093 0.20
21255 0.20
32390 0.21
21694 0.21
32574 0.21
24552 0.23
33793 0.22
26167 0.24
155466 1.22 116685 1.32
164470 1.29 118494 1.33
161342 1.27 119688 1.36
155176 1.23 114649 1.30
168219 1.33 140128 1.58
755255 7.16 594032 7.95
794365 7.56 636587 8.66
731622 6.92 534711 7.37
833421 7.97 690267 9.29
771608 7.33 613253 8.43
3685552 41.04 3006991 49.12
3649801 40.32 2893803 47.54
3576134 39.61 2895182 47.26
3796035 42.13 3304570 53.29
3589382 39.29 2956995 48.84
15804498200.9013267920250.58
16472633208.3913720664256.89
15867374201.0112497087236.89
16309701208.4213801989262.53
16472551209.1313925654262.57

mystery-ipc1
01
02
03
04
07
09
11
12
15
16
17
18
19
20
24
25
26
27
28
29
30

5
7
4


8
7

6

4

6
7

4
6
5
7
4
9

7 0.00
6 0.00
6 0.00
2404 0.50
8012 11.19
722 1.01
73 0.08
7 0.04
11 0.10
0 0.00
0 0.00
0 0.00
0 0.00
0 0.00
3049 0.37
10764 5.66
1215 1.01
9 0.01
33 0.01
8 0.01
2102777 33.84 2093419 55.582093419 76.80
28271 20.21
21572 41.22
5079 44.42
0 0.15
0 0.27
354 1.32
85 2.74
83 3.59
0 0.00
0 0.00
0 0.00
21717 4.87
4968 5.26 16276 29.28
89887 46.32
84572153.53 53114173.34
0 0.13
0 0.30
9 0.00
10 0.00
9 0.01
1807 0.27
1835 0.30
1344 0.69
14 0.05
159 0.09
6 0.07
8 0.00
47 0.00
15 0.00
31 0.04
14 0.03
10 0.06
23175 5.16
76480169.86
7232 13.30

6 0.20
1672 82.70
5 16.46

6

1.79

10

5.38

5193.75

65 811.87

0 0.00
0 0.00
3165 29.34
8 1.51
8 16.59
2102777 14.612102729 27.84

0
0.00
3868 670.08
34 41.20

198445.85
0 0.00
0 0.00
12478 96.38
285069 59.22 547246578.39
5 0.10
2526 5.94
6 4.80
8 0.63
5 8.94
42112 28.07

5 0.10
346 70.78
6 80.48
8 6.77
5107.10
44893357.07

0

0.00

14
1.22
3107 291.36
7 243.78
31 16.67
27 536.30

30 0.00
770852 21.85
507 0.02

0.00
4.47
0.03

0 0.00
0 0.00
138289 2.18
1458 1.44
426 0.00
19 0.00
2102777 15.09 1177842 21.87
279973 13.21
135 2.62
5400 0.41
0 0.00
133871 3.65
686125 23.28
31 0.00
8455 0.10
2174 0.03
843 0.00
153 0.01
1977063 38.26

Table 17: Similar Table 15 Miconic Mystery domains.
118

8
2368
5

5
0
1516
718

0.35
0.00
5.44
3.76

6 0.00
37 0.05
73 0.04
32 0.00
7 0.02
26686 28.27

fiImplicit Abstraction Heuristics

hF
task h

nodes

hI
time

nodes

hFI

MS-104

MS-105

nodes

time

nodes

nodes

time

0.03
3070
0.04
3561
0.03
3070
0.03
3070
0.03
3070
18.93 587482
18.33 606782

0.05
0.05
0.05
0.05
0.05
22.20
22.53

24
24
24
24
24
621008
594758

0.05
24
0.06
24
0.06
24
0.06
24
0.06
24
4.85 279614
4.69 264535

0.06
0.06
0.06
0.06
0.05
7.86
7.34

0.00
0.02
0.43
1.31

7
1946
21671

time

time

HSPF

nodes

blind
time

hmax
nodes
time

nodes

time

2000
1.02
4822
2378
1.07
5501
2000
1.02
4822
2000
1.02
4822
2000
1.02
4822
379735 217.37 882874
405564 226.32 836647

0.01
0.02
0.01
0.02
0.01
4.91
4.62

4016
4594
4016
4016
4016
822514
787163

0.03
0.04
0.03
0.03
0.03
18.71
17.81

0.00
0.02
1.06
8.22

36
348
4346
104068

0.00
0.01
0.16
2.61

openstacks-ipc5
01
02
03
04
05
06
07

23
23
23
23
23
45
46

2264
2617
2264
2264
2264
366768
410728

0.02
3895
0.03
4485
0.02
3895
0.02
3895
0.02
3895
7.52 779710
8.23 760668

pathways-ipc5
01
02
03
04

6
12
18
17

1624
2755
44928
126950

0.00
0.02
0.62
2.66

1299
2307
20416
33788

0.00
0.01
0.25
0.59

1299
2437
29106
58738

1.14
2.56
6.43

7 0.79
13 42.11
14901129.23
98484288.39

1405
990
14772
34206

0.28
1624
0.29
2984
6.99 87189
27.00 456143

pipesworld-notankage-ipc4
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
17
19
21
23
24
41

5
12
8
11
8
10
8
10
13
18
20
24
16
30
26
22
24
14
18
24
12

121
0.02
109
0.01
121
0.02
1413
0.06
1542
0.02
1413
0.08
1742
0.14
3001
0.07
1742
0.18
7007
0.45
8911
0.22
7007
0.59
4093
0.49
6805
0.26
4093
0.65
12401
1.44 27377
1.34 12401
2.03
4370
0.97
9168
0.77
4370
1.34
18851
3.84 56189
6.21 20584
6.42
1092472 160.712419903 151.991092472 219.75
313952
684234
39998

27.68 472950 29.55 313952 43.90
75.721319980 133.58 686186 145.41
6.02 117475 18.08 40226 12.69

1594863 254.432588849 192.901594863 353.40
54373931588.68
23833
4.02 49035
7.76 23833
7.87
2285790 568.937047138 871.032282678 843.28
502308 370.68

6 0.04
6 0.04
169 0.30
13 0.17
9 1.15
9 0.69
651 1.95
12 7.05
77 5.63
9 21.15
1299 5.26
61 39.31
233 19.78
9 59.70
561 12.42
497 94.69
104875 25.48
2982520 66.89
90598 9.20 52159 43.24
594661 12.41 416184109.43
12835 34.28
13255718119.54
648132 65.43
3200672 90.07
8767431150.88
3992 18.13
948159.63
296506 49.11 104750256.13
7315150142.82

6
2.79
121 0.00
13
0.00
435
3.07
1808 0.01
792
0.02
128
3.84
3293 0.02
262
0.02
812
8.84 16088 0.11
2925
0.13
155 16.53 11128 0.12
1121
0.15
1151 23.41 49905 0.48
7102
0.72
185 29.88 46502 0.57
2631
0.48
1673 48.84 273585 3.39
22874
3.58
10478 74.265513309 80.62 321861 68.99
6898321439.64
111212451579.77
108503 625.52 710123 3.86 107061 14.51
4332961117.572467804 13.83 464982 56.82
242241019.65 481045 3.14
33417
6.38
4921698 34.90

157782

1.31

5023081092.50

555619 105.49

8966
2.42
481859 229.00
114257 250.18

pipesworld-tankage-ipc4
01
02
03
04
05
06
07
08
11
13
15
17
21
31

5
77
0.02
126
0.01
105
0.02
6 3.54
6 0.13
12
960
0.05
1005
0.02
960
0.06
110 3.04
13 0.20
8
20803
1.89 52139
2.46 20803
2.82
244 22.64
9 36.89
11 110284
8.06 157722
9.60 110284 14.05
3892 16.68
12155.03
8
6531
0.86 13148
1.03
6531
1.32
376 15.46
9120.06
10
20171
2.41 43583
4.32 20171
4.41
1794328.18
11201.44
8 202706 73.8326437521379.11 202706 208.81
11
96043191.77
22 2345399 296.872629204 662.942365735 838.85
660104 28.60 660102162.93
16
188517122.11
30 96520911721.67
2546587141.12
44
12850247352.46
14 839847 250.39
13241 69.80
39 1501847 240.381568963 661.881504072 850.16 1357801124.64

6
3.88
128 0.00
179
6.04
1012 0.01
818 24.47 52983 0.77
8116 64.68 221429 3.06
313 59.99 12764 0.21
3102 97.31 58487 0.87
2695 339.765404036198.08

13
0.01
659
0.02
1802
1.33
41540 14.49
2834
1.61
15746
6.61
104531 420.47

4116344 30.67

752867 334.42

4423951 65.44
1726598 13.56

126845 222.23
919764 381.66

rovers-ipc5
01
02
03
04
05
07
12

10
147
0.00
147
8
44
0.00
44
11
672
0.01
419
8
47
0.00
20
22 808084 22.61 410712
18 4546797 191.34 741649
19
1529551

0.00
147
0.00
0.00
44
0.00
0.00
448
0.01
0.00
24
0.00
9.23 522937 18.29
21.011682245 102.77
76.46

11 0.03
11 0.03
48
0.07
1104 0.00
283
0.00
9 0.00
9 0.00
16
0.03
254 0.00
129
0.00
12 0.11
12 0.12
804
0.16
3543 0.02
757
0.00
9 0.04
9 0.04
58
0.08
897 0.00
223
0.00
617267 11.48 375808 18.46 298400 101.658559690126.19 4318309 81.53
3280884 51.022212903 59.20 1459792 866.93
9618062 199.91
5187273166.77

0.00
29
0.00
0.00
241
0.01
0.01
728
0.04
0.38 11250
0.76
4.92 61692 18.85
51.681518261 105.65

10 0.00
10 0.00
14 0.01
14 0.01
12 0.56
12 0.64
4152 0.99
18 4.43
81972 7.26 148667 69.28
2769229 74.73 307962 32.52

satellite-ipc4
01
02
03
04
05
06

9
24
13
86
11
2249
17
9817
15 279569
20 1496577

0.00
32
0.00
337
0.08
656
0.57 14860
49.47 46453
92.221572327

46
0.06
89
646
0.21
1728
1945
0.93 15185
15890
9.50 345663
267513 565.18

0.00
0.01
0.17
4.70

59
940
6822
180815

0.00
0.00
0.11
3.37

10751017 371.43

Table 18: Similar Table 15 Openstacks, Pathways, PipesworldNoTankage, Pipesworld-Tankage, Rovers, Satellite domains.

119

fiKatz & Domshlak

hF
task h

nodes

hI
time

nodes

hFI
time

nodes

time

MS-104

MS-105

nodes

nodes

time

time

HSPF

nodes

blind
time

hmax
nodes time

nodes

time

0.00
9
0.01
11
0.00
20
0.08
71
0.00
20
0.04
33
0.00
12
0.34
332
0.00
23
0.11
154
0.00
9
0.01
11
0.00
26
0.09
122
0.00
9
0.12
128
0.00
9
0.06
49
0.04
18
1.04
1358
0.00
96
0.19
153
0.00
40
0.17
153
0.00
59
0.16
95
0.00
13
0.06
27
2.58
356 18.99
3562
0.12
2287
1.34
2742
0.00
13
0.03
16
0.00
29
0.21
158
0.77
6338
4.46
9009
0.00
52
0.18
84
0.00
21
0.12
42
0.87
22315
8.16 189516
0.01
30
0.43
200
0.00
21
0.12
42
37.93
28 780.38
8913
0.00
52
0.28
182
0.01
179
0.85
773
0.00
49
0.29
95
1.43
3337
7.12 244499
0.02
393
1.35
2295
6.55
7530 32.97
53911
0.00
352
0.74
435
0.63
947
2.29
2291
0.00
158
0.50
227
6.36
7448
8.27 165170
14.07 188564 111.99 1669788
0.01
277
2.10
1532
0.01
33
0.74
562
0.07
146
1.78
4103
12.86
23371 87.91 1036992
0.00
21
0.16
54
0.18
1773
1.29
1908
0.00
256
0.50
333
0.05
407
2.18
4142
0.00
121
0.74
434
4.05
19865
6.91
80785
0.04
515
2.32
5075
11.08 200559 101.21
23.32 27728751408.64
0.02
390
1.40
690

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.02
0.01
0.00
0.00
0.04
0.00
0.00
0.67
0.00
0.00
0.12
0.00
0.00
0.00
1.27
0.01
0.25
0.00
0.01
0.00
0.63
9.44
0.00
0.00
0.01
6.74
0.00
0.01
0.00
0.01
0.00
0.25
0.01

9 0.00
47 0.00
28 0.00
102 0.00
69 0.00
9 0.00
62 0.00
52 0.00
20 0.00
376 0.01
142 0.00
113 0.00
86 0.00
18 0.00
324 0.02
1876 0.01
14 0.00
91 0.00
6925 0.08
75 0.00
31 0.00
177138 1.43
116 0.00
31 0.00
854 0.18
142 0.00
616 0.00
79 0.00
192459 2.32
1834 0.01
16766 0.36
424 0.00
1073 0.01
216 0.00
61548 1.06
717884 18.27
1342 0.01
357 0.00
2597 0.02
229210 9.51
35 0.00
1636 0.01
315 0.00
3235 0.02
358 0.00
65984 0.63
4406 0.02
19020089286.02

0.00

642

psr-small-ipc4
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50

8
10 0.00
10 0.00
10 0.00
11
52 0.00
55 0.00
52 0.00
11
31 0.00
31 0.00
31 0.00
10
66 0.00
91 0.00
73 0.00
11
75 0.00
79 0.00
75 0.00
8
10 0.00
10 0.00
10 0.00
11
61 0.00
61 0.00
61 0.00
8
24 0.00
29 0.00
25 0.00
8
18 0.00
19 0.00
18 0.00
7
131 0.01
183 0.00
155 0.01
19
149 0.00
149 0.00
149 0.00
16
120 0.00
123 0.00
120 0.00
15
90 0.00
90 0.00
90 0.00
9
19 0.00
19 0.00
19 0.00
10
1200 0.08
708 0.03
769 0.09
25
2328 0.02
2158 0.01
2176 0.03
9
15 0.00
15 0.00
15 0.00
12
85 0.00
90 0.00
85 0.00
25
8025 0.11
7856 0.05
7876 0.12
17
80 0.00
80 0.00
80 0.00
10
28 0.00
28 0.00
28 0.00
33
163299 4.17 176058 1.56 168685 5.01
12
77 0.00
93 0.00
77 0.00
10
28 0.00
28 0.00
28 0.00
9
485 3.06
463 0.58
482 3.28
17
144 0.00
150 0.00
146 0.00
21
616 0.01
675 0.00
650 0.01
14
79 0.00
79 0.00
79 0.00
21
142772 4.55 187319 2.12 159325 5.80
22
1791 0.03
1982 0.01
1883 0.04
19
11278 0.25
6810 0.08
8297 0.24
24
431 0.01
431 0.00
431 0.01
21
1480 0.02
1436 0.01
1391 0.03
21
223 0.00
223 0.00
223 0.00
22
65965 1.43
63186 0.46
68281 1.70
22
571766 12.62 371834 3.41 458402 11.77
23
1307 0.03
1417 0.01
1363 0.03
13
301 0.01
372 0.00
326 0.01
23
2486 0.05
2942 0.02
2682 0.07
20
259683 8.59 182608 2.70 270195 11.73
10
31 0.00
34 0.00
31 0.00
30
1855 0.02
1747 0.01
1739 0.02
20
328 0.00
328 0.00
328 0.00
19
2990 0.07
3430 0.03
3121 0.08
20
347 0.00
376 0.00
359 0.01
34
60888 0.86
61842 0.31
61563 0.99
27
4104 0.09
4522 0.03
4284 0.11
37 12080249604.4317435137247.2013514084784.80
47
23
637 0.01
659 0.01
645 0.02

9 0.00
9
12 0.00
12
12 0.00
12
11 0.00
11
12 0.00
12
9 0.00
9
12 0.00
12
9 0.00
9
9 0.00
9
8 0.04
8
20 0.00
20
17 0.00
17
16 0.00
16
10 0.00
10
11 0.46
11
975 0.11
26
10 0.00
10
13 0.00
13
2910 0.27
26
18 0.00
18
11 0.00
11
34 0.28
34
13 0.00
13
11 0.00
11
10 5.42
10
18 0.00
18
22 0.01
22
15 0.00
15
22 0.39
22
23 0.01
23
2647 0.89
723
25 0.00
25
446 0.26
22
22 0.00
22
24021 0.83 11113
48350 2.98
2783
24 0.02
24
14 0.01
14
24 0.08
24
38837 1.88
7767
11 0.00
11
1117 0.18
31
21 0.00
21
20 0.05
20
21 0.01
21
36941 0.67 32582
28 0.04
28
129627 2.37
2500
2048368 15.84 594399
24 0.02
24

0.00

tpp-ipc5
01
02
03
04
05
06

5
8
11
14
19
25

6 0.00
6 0.00
6 0.00
9 0.00
11 0.00
9 0.00
12 0.00
27 0.00
16 0.00
15 0.00
78 0.00
47 0.00
623 0.02
5110 0.08
1455 0.05
5843306179.03 6916518 95.86 6153923222.35

6 0.00
9 0.00
12 0.00
15 0.01
20 0.36
947059 14.22

6 0.00
9 0.00
12 0.00
15 0.00
20 0.77
74798 23.97

6
9
12
15
624

0.01
0.01
0.03
0.07
0.48

7
26
116
494
24698

0.00
0.00
0.00
0.00
0.12

6 0.00
16 0.00
83 0.00
430 0.00
17398 0.15
9267024216.69

trucks-ipc5
01
02
03
04
05
06
07
08
09

13
1691 0.03
1027 0.01
1039 0.03
14 0.03
14 0.02
17
9624 0.23
2898 0.04
2957 0.11
4192 0.22
18 0.17
20
80693 2.99
20752 0.44
22236 1.14
199405 2.89 173790 6.88
23 1753866 48.55 1205793 23.48 1315672 50.35 2591561 29.172568634 56.96
25 12472562515.50 8007189242.98 9483222512.55 23444940392.99
30
23 2134728 96.15 719751 16.91 755608 50.72 7575415 88.918080496117.13
25
5199440221.76 6630689687.95
28

285
0.56
5774 0.02
402 0.01
1413
1.04
28348 0.14
939 0.03
4049
4.43 379582 2.97
9465 0.40
8817
7.75 2990366 26.65 209140 9.43
14744 23.12
1248571 90.78
308920 343.47
43270 27.6212410588117.92 223011 19.34
49663 47.61
3106944403.36
233577 248.21

zenotravel-ipc3
01
02
03
04
05
06
07
08
09
10
11

1
6
6
8
11
11
15
11
21
22
14

2 0.00
2 0.00
2 0.00
17 0.00
18 0.00
17 0.00
28 0.01
18 0.01
12 0.01
99 0.01
88 0.01
81 0.01
177 0.01
220 0.01
136 0.02
2287 0.10
1144 0.05
504 0.05
5088 0.16
4234 0.09
4199 0.19
3268 0.35
1026 0.12
1655 0.32
2844771177.70 2842546176.05 2433822262.84
2283679295.65 1921903196.38 1832871383.99
139687 18.63
76904 8.20
93782 19.51

2 0.00
2 0.00
7 0.00
7 0.00
7 0.21
7 0.90
9 0.20
9 0.89
12 0.25
12 1.90
12 0.38
12 3.54
16 0.38
16 3.48
14354 2.00
12 14.48
2517035 51.18 611457 30.47
1322871 34.84 137872 25.44
310030 11.28 110726 26.65

2
0.45
9
0.46
40
3.42
215
3.44
422
7.70
1957 11.81
34890 30.36
83533 292.05

2
58
5160
5256
82289
596531
405626

0.00
0.00
0.04
0.03
0.63
5.90
3.56

2 0.00
22 0.00
492 0.02
665 0.01
12466 0.33
85931 2.47
115348 2.60
687846 50.76

Table 19: Similar Table 15 PSR, TPP, Trucks, Zenotravel domains.
120

fiImplicit Abstraction Heuristics

hF
task

h

hI

hFI

nodes timenodes time nodes

MS-104
time nodes

MS-105

timenodes

HSPF

time nodes

blind
hmax
time nodes time nodes
time

schedule-strips
02-0
02-1
02-2
02-3
02-4
02-5
02-6
02-7
02-8
02-9
03-0
03-1
03-2
03-3
03-4
03-5
03-6
03-7
03-8
03-9
04-0
04-1
04-2
04-3
04-4
04-5
04-6
04-7
04-8
04-9
05-0
05-1
05-2
05-3
05-4
05-5
05-6
05-7
05-8
05-9
06-2
06-4
06-6
07-0
07-7
07-9

3
5 0.07
5 0.04
5 0.08
2
3 0.08
4 0.05
3 0.10
2
3 0.17
3 0.06
3 0.19
3
26 0.17
37 0.06
26 0.18
3
68 0.17 188 0.07
220 0.26
2
3 0.17
3 0.05
3 0.19
2
3 0.07
5 0.04
3 0.09
2
3 0.15
3 0.05
3 0.17
2
3 0.17
3 0.05
3 0.19
3
5 0.07
5 0.04
5 0.08
4
40 0.31 407 0.16
140 0.45
2
3 0.22
3 0.08
3 0.25
4
27 0.21
50 0.09
33 0.25
4
15 0.13
91 0.09
15 0.15
3
4 0.39
16 0.10
4 0.44
4
73 0.38 471 0.14
74 0.43
4
72 0.12
75 0.08
69 0.13
4
28 0.23
50 0.09
28 0.25
4
273 0.43 266 0.14
273 0.48
4
8 0.23
31 0.09
14 0.27
5
373 0.45 1498 0.50
167 0.54
6 1755915.4510707 3.48 17686 17.58
5
209 0.40 406 0.19
66 0.34
5
142 0.40 674 0.25
251 0.58
5
921 1.14 450 0.31
574 1.39
6
483 0.95 4544 1.11
850 2.11
6
779 0.5611610 2.44 1834 1.43
5
99 0.58 424 0.31
163 0.78
5
102 0.52 573 0.24
111 0.60
4
1043 1.27 996 0.67 1050 1.66
5
163 0.86 483 0.51
167 1.05
6
2701 2.951887811.36 1257 3.10
7 11885586.65
158640178.66
7 2715924.884144713.08 13622 16.72
6
989 1.63 3433 1.29
582 1.36
6
198 0.61 9550 4.61
347 1.05
7
603311.164987316.17 10325 16.63
6
944 1.9217562 9.03 2107 4.10
7
1190 2.436153920.22 2709 7.24
6
1537 2.2415829 6.85 2717 5.45
6
888 3.292698622.47 1709 6.91
8 1153520.81
56273131.69
8 1558946.68
41764133.76
7
2489 9.10
6995 25.49
8 1072641.01
38251154.49
8
682919.20
30148109.49

4 511.10
3 104.98
3 231.99
4 56.51
3
3
3
3
4

363.11
121.84
323.77
316.53
251.46

5 191.03
5 259.13
5 682.30
5 121.58
5 195.72
5 235.48
71115.76
6 267.29
7
7
6
6
5

837.68
459.19
936.68
711.65
316.22

41743.32

5
3
3
4
4
3
3
3
3
5

577.39
754.26
495.56
658.90
484.62
667.32
697.42
604.06
668.79
577.16

76 0.02
5
0.09
6 0.02
3
0.07
5 0.02
3
0.07
529 0.03
95
0.45
543 0.03
108
0.44
3 0.03
3
0.07
6 0.02
3
0.06
13 0.02
3
0.07
8 0.02
3
0.07
76 0.03
5
0.09
11915 0.60 1127
8.98
31 0.04
25
0.37
3617 0.23 1228
9.56
3379 0.23
170
1.85
41223.90
301 0.06
22
0.27
12217 0.64 1175 12.43
2663 0.19 1542 11.73
12859 0.68 1323 13.47
12616 0.65 1590 11.13
4339 0.27
913
7.69
31219326.88 22993 273.38
55206949.79
47696 4.97 9703 131.69
89272 8.74 12941 163.84
62013 6.03 13614 168.07
1079781399.99
1071151001.40
61327 5.97 8683 103.50
34046729.56 15122 181.98
41673 4.27 5480 83.69
14335022.71 43336 751.35

120602 989.42

Table 20: Similar Table 15 (non-IPC) Schedule-STRIPS domain.

121

fiKatz & Domshlak

hF
task

h

nodes

hI

hFI

HSPF

blind

time

nodes

time

nodes

time

nodes

time

nodes

time

0.39
0.45
4.00
10.59
68.19
125.83
1.34
3.39
18.43
43.80
31.37
327.82
5.99
112.11
335.39
291.88
203.57
249.28

10507
5184
219439
294029
3269854
3869775
50734
78362
432280
1325517
2823019

0.84
1.12
13.43
74.29
290.07
1167.78
4.64
23.84
66.00
337.57
570.43

8333
4044
139760
146396
2113017
1965371
31545
46386
297147
687420
1255479

1.03
1.46
15.62
62.26
317.53
965.39
5.00
21.36
68.80
290.86
425.27

12935
4810
276441
278087

30.55
42.63
469.96
885.94

26670
16162
650316
1025329
9567169

0.40
0.49
11.32
29.51
174.38

72109
74663

190.25
325.43

145170
152021
1426461
6238743

2.53
4.47
32.06
199.63

79574
859710
10935187

9.93
349.90
1208.05

66582
757718
7542146

13.62
395.63
1319.93

123510

443.99

194669
1633295

4.28
57.19

4430537

1578.04

49
144
317
2208
4220
998
61253
70808
4920
5261
98783
10580
398023
157304
711526
411732
421646
34754
812451
473553
173929

0.37
0.73
1.32
2.63
4.87
5.66
40.74
57.12
18.26
23.40
105.44
43.05
443.57
222.14
1034.92
671.53
745.34
186.40
1731.49
1018.62
651.93

193
769
1665
8113
17151
3288
201137
234328
114281
72673
563261
341169
2547985
1233115
11926297
4928793
8065113
953049

0.00
0.00
0.01
0.06
0.16
0.02
2.31
2.92
1.32
0.76
7.17
4.11
35.07
17.19
184.57
75.73
128.80
14.32

1536764

27.62

12
19
334
993
6922
19613
10
153
8348
422571
9
22
260
2281
68293
121897

0.20
1.44
0.72
11.21
35.00
115.36
0.55
3.39
18.14
792.78
0.09
0.51
2.03
6.38
145.47
404.98

20
1375
4903
12302518

0.00
0.01
0.03
126.46

23
5138
1130810

0.00
0.05
12.72

16
2485
285823

0.00
0.02
3.32

44047
45529
45882
10175657
10310817
10321465
54
54
54
10170980
10254740
10294023

0.68
0.54
0.49
314.87
242.27
222.66
0.01
0.01
0.01
113.29
95.91
88.03

elevators-strips-ipc6
01
02
03
04
05
06
11
12
13
14
15
18
21
22
23
24
25
26

42
26
55
40
55
53
56
54
59
63
66
61
48
54
69
56
63
48

7483
2898
61649
60039
909822
716238
18313
21812
186526
248709
201777
1057327
71003
890048
4089071
1430559
1384406
699757

openstacks-strips-ipc6
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
21
22

2
2
2
3
4
2
5
5
3
3
4
3
4
4
4
4
4
3
4
3
4

209
769
1729
8209
16705
3658
195109
228847
116425
77681
575677
354913
2596593
1260363
11995225
5064737
8193065
1020905

0.00
0.02
0.04
0.17
0.41
0.11
5.85
7.77
5.03
3.57
28.75
19.85
150.86
81.43
867.27
379.45
673.91
88.15

209
769
1729
8209
16705
3658
195109
228847
116425
77681
575677
354913
2596593
1260363
11995225
5064737
8193065
1020905

0.00
0.00
0.01
0.07
0.18
0.04
2.45
3.23
1.61
1.10
9.11
5.63
46.30
23.36
245.32
104.37
179.00
22.24

209
769
1729
8209
16705
3658
195109
228847
116425
77681
575677
354913
2596593
1260363
11995225
5064737
8193065
1020905

0.00
0.02
0.04
0.20
0.48
0.13
6.85
9.06
5.77
4.14
32.97
22.85
172.13
93.01
987.24
432.44
765.15
99.67

1805050

204.83

1805050

48.73

1805050

233.98

0.01
0.02
0.04
13.85
219.49
613.02
0.01
0.07
5.83
463.93
0.00
0.01
0.28
8.49

15
183
821
77520
892002
3529327
24
1243
144084

0.00
0.01
0.01
2.28
31.78
148.95
0.00
0.04
4.27

15
179
668
68116
822442
3443221
24
1135
97683

0.00
0.02
0.03
7.56
115.96
557.75
0.01
0.08
9.25

13
303
15825
694503

0.00
0.01
0.47
24.62

13
282
8778
316839

0.00
0.02
0.63
31.37

1.68
1.88
1.90
687.38
870.50
869.52
0.14
0.15
0.14
834.36
720.23
643.41

22012
37569
43298

5.20
4.36
4.02

19809
37524
43298

6.39
6.07
5.71

21259
29253
37754

13.69
13.92
14.05

51
51
51

0.08
0.08
0.08

46
46
46

0.20
0.19
0.19

6
6
6

0.05
0.05
0.05

parcprinter-strips-ipc6
01
02
03
04
05
06
11
12
13
14
21
22
23
24
25
26

169009
438047
807114
876094
1145132
1514200
182808
510256
693064
1020512
143411
375821
519232
751642
1215840
1216460

19
240
880
142314
1780073
4113487
25
1183
74201
4491265
13
225
4376
96748

scanalyzer-strips-ipc6
01
02
03
04
05
06
22
23
24
25
26
27

18
22
26
24
30
36
13
13
13
26
30
34

19788
37182
43115
3947796
9193480
10140909
46
46
46
8974317
9936832
10202674

Table 21: Runtimes cost-optimal heuristic-search planners Elevators,
Openstacks-strips-08, Parcprinter, Scanalyzer domains. description planners given Section 6; fork-decomposition heuristics via structural-pattern databases. Column task denotes problem instance,
column h denotes optimal solution length. columns capture run time
number expanded nodes.

122

fiImplicit Abstraction Heuristics

hF
task

h

hI

nodes

hFI

HSPF

blind

time

nodes

time

nodes

time

nodes

time

nodes

time

0.02
0.07
0.07
0.07
0.03
0.16
0.08
2.56
0.36
2.45
1.08
2.98
2.51
4.82
5.84
0.83
22.38
4.93
20.71
27.36
41.78
5.66
97.46
106.00
68.95
553.11
523.12

10
83
209
181
251
901
110
25253
3951
28241
12881
37358
33374
55127
73733
10598
300972
50222
257988
293860
494477
48190
954593
1219589
899323
6943124
2121936

0.02
0.12
0.12
0.12
0.02
0.14
0.12
0.71
0.20
0.77
0.38
0.86
0.76
1.29
1.67
0.33
6.38
1.37
5.62
8.56
11.49
1.43
25.16
31.83
25.33
177.06
82.61

10
83
209
181
251
901
110
25253
3951
28241
12881
37358
33374
55127
73733
10598
300972
50222
257988
293860
494477
48190
954593
1219589
899323
6943124
2121936

0.03
0.18
0.19
0.19
0.04
0.27
0.18
2.89
0.53
3.21
1.36
3.63
3.09
5.63
7.09
1.10
27.00
5.55
24.49
36.43
50.51
5.95
108.53
136.27
107.61
719.81
339.83

6
20
50
15
43
247
26
7898
757
7522
5979
21133
25897
17144
37810
7939
282810
10358
90950
83693
141906
13123
181830
271157
201932
2031156
132701

0.16
5.17
6.91
1.82
5.62
25.68
11.67
28.50
23.02
28.25
20.60
32.73
33.29
32.20
38.72
27.70
124.39
29.81
61.77
63.99
87.89
30.94
114.89
157.50
122.27
1024.04
118.20

11
66
174
192
242
1265
215
30776
3538
29658
13430
38561
32370
62047
76150
10090
294396
62726
275969
328583
545896
69465
1258767
1324907
830182
7178802
6091864

0.00
0.01
0.00
0.01
0.01
0.01
0.01
0.15
0.03
0.14
0.06
0.18
0.15
0.29
0.35
0.05
1.44
0.29
1.29
1.63
2.64
0.33
6.17
6.69
4.33
37.78
34.53

372
551
394
130524
50
526
47522
2114443
23083
69797
271598
155166
169436
20737
7943562
335238
80459
2109516
5238957
648
337852
5866700
3565151
14504610

0.03
0.02
0.01
5.57
0.32
0.04
2.81
135.12
1.47
3.17
15.63
10.98
8.93
1.05
602.99
20.20
4.17
156.88
354.84
0.14
74.21
473.77
222.48
1151.55

287
497
177
45048
203202
534
42195
1204212
26189
21291
282061
60655
294710
6984
7742698
242778
40425
119938
3558809
648
450027
4053413
3613835
2244156
23044275
12138101

0.01
0.01
0.00
0.28
7.28
0.01
0.38
11.27
0.26
0.18
2.09
0.70
3.63
0.07
84.75
1.66
0.29
0.97
33.60
0.69
14.64
45.18
50.31
30.10
275.91
152.95

269
509
173
44198
3073
526
28163
1080337
16013
20741
271598
46865
169436
6952
7456505
240912
36889
119784
3459314
648
76647
3868663
2563159
1759660
17832156
10473204
8738457

0.02
0.02
0.01
2.07
0.96
0.04
1.84
74.55
1.12
1.07
16.87
3.69
10.26
0.41
622.89
15.14
2.05
9.18
251.38
0.79
16.85
335.31
181.66
154.33
1612.04
996.25
1131.26

1079
700
621
282895

6.17
4.57
2.63
177.07

6815
75669

6.83
174.92

459188
620685
440869

400.45
315.43
586.91

1631677
178574

994.61
121.96

852948
239522

859.44
220.86

1762
1348
1165
320446
9607487
10526
315405
13329538
818693
852150
531305
4705742
2363177
255203
21598353
935561
317984
7219504
23255133
649

0.01
0.00
0.00
1.43
81.84
0.04
1.49
77.70
4.09
4.07
2.71
25.21
12.60
1.17
120.25
4.74
1.43
39.20
130.46
0.01

2074534

679.61
12
874
225310
1462063
111
9976
224986
67
4455
56897
292004

0.00
0.10
48.69
714.49
0.01
1.41
74.09
0.00
0.37
13.82
120.98

16
998
257608
1660874
103
11130
246069
62
5408
70579
382588

0.01
0.15
59.28
856.87
0.02
1.70
89.04
0.01
0.54
19.32
196.82

60
1567
380982

0.48
6.36
274.86

135
14874
373133
62
7544
100347

0.94
19.85
454.55
0.50
7.71
92.93

64
2093
408643
4204372
164
14796
408449
112
7610
106548
1663856

0.00
0.01
3.69
50.69
0.00
0.12
4.36
0.00
0.06
1.07
19.29

119
409
80794
50
11665
113386
16
1931
4673

0.85
3.03
136.95
0.93
18.49
273.76
0.91
5.96
9.05

9086
21076

0.09
0.30

3487
1862476

0.05
37.91

227
177942
962698

0.00
3.97
23.76

pegsol-strips-ipc6
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27

2
5
4
4
4
4
3
6
5
6
7
8
9
7
8
8
10
7
8
7
8
6
8
8
8
9
7

12
84
208
193
266
1343
217
31681
3743
29756
13832
39340
33379
63096
77932
10491
299676
63247
279822
329570
548254
69922
1262645
1326517
830637
7196836
6092258

sokoban-strips-ipc6
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
30

11
9
10
29
8
9
15
31
19
30
35
32
20
29
76
50
37
49
47
2
10
44
31
50
39
33
23
14

transport-strips-ipc6
01
02
03
04
11
12
13
21
22
23
24

54
131
250
318
456
594
550
478
632
630
614

60
1558
380375
3526204
135
14873
372845
62
7544
100269
1587821

0.01
0.06
10.47
164.35
0.02
0.37
15.07
0.01
0.18
3.65
77.96

woodworking-strips-ipc6
01
02
03
11
12
13
21
22
23

170
185
275
130
225
215
95
185
195

4313
5550

0.23
0.34

3716
5054

0.10
0.14

4157
5408

0.28
0.41

860
328229
4413726
54
31189
44641

0.10
41.44
954.34
0.02
4.66
8.39

987
328728
4125788
54
67528
155426

0.05
16.57
455.35
0.02
3.26
9.71

897
328930
4404104
53
38912
64840

0.13
52.03
1297.06
0.03
6.83
14.42

Table 22: Similar Table 21 Pegsol, Sokoban, Transport, Woodworking domains.
123

fiKatz & Domshlak

References
Backstrom, C., & Nebel, B. (1995). Complexity results SAS+ planning. Computational
Intelligence, 11 (4), 625655.
Bonet, B., & Geffner, H. (2001). Planning heuristic search. Artificial Intelligence, 129 (1
2), 533.
Bylander, T. (1994). computational complexity propositional STRIPS planning.
Artificial Intelligence, 69 (1-2), 165204.
Chen, H., & Gimenez, O. (2008). Causal graphs structurally restricted planning. Proceedings 18th International Conference Automated Planning Scheduling
(ICAPS), pp. 3643, Sydney, Australia.
Clarke, E., Grumberg, O., & Peled, D. (1999). Model Checking. MIT Press.
Coles, A. I., Fox, M., Long, D., & Smith, A. J. (2008). Additive-disjunctive heuristics
optimal planning. Proceedings 18th International Conference Automated
Planning Scheduling (ICAPS), pp. 4451.
Culberson, J., & Schaeffer, J. (1998). Pattern databases. Computational Intelligence, 14 (4),
318334.
Domshlak, C., & Dinitz, Y. (2001). Multi-agent off-line coordination: Structure complexity. Proceedings Sixth European Conference Planning (ECP), pp. 277288.
Domshlak, C., Hoffmann, J., & Sabharwal, A. (2009). Friends foes? planning
satisfiability abstract CNF encodings. Journal Artificial Intelligence Research,
36, 415469.
Domshlak, C., Katz, M., & Lefler, S. (2010). abstractions met landmarks. Proceedings 20th International Conference Automated Planning Scheduling
(ICAPS), pp. 5056, Toronto, Canada.
Drager, K., Finkbeiner, B., & Podelski, A. (2006). Directed model checking distancepreserving abstractions. Valmari, A. (Ed.), Proceedings 13th International
SPIN Workshop Model Checking Software, Vol. 3925 Lecture Notes Computer
Science, pp. 1936, Berlin Heidelberg. Springer-Verlag.
Edelkamp, S. (2001). Planning pattern databases. Proceedings European
Conference Planning (ECP), pp. 1334.
Edelkamp, S. (2002). Symbolic pattern databases heuristic search planning. Proceedings International Conference AI Planning Scheduling (AIPS), pp.
274293.
Edelkamp, S. (2006). Automated creation pattern database search heuristics. Proceedings 4th Workshop Model Checking Artificial Intelligence (MoChArt).
Edelkamp, S., & Kissmann, P. (2009). Optimal symbolic planning action costs
preferences. Proceedings 21st International Joint Conference Artificial
Intelligence (IJCAI), pp. 16901695, Pasadena, CA, US.
Felner, A., Korf, R. E., & Hanan, S. (2004). Additive pattern database heuristics. Journal
Artificial Intelligence Research, 22, 279318.
124

fiImplicit Abstraction Heuristics

Haslum, P. (2008). Additive reversed relaxed reachability heuristics revisited. Proceedings 6th International Planning Competition.
Haslum, P., Bonet, B., & Geffner, H. (2005). New admissible heuristics domainindependent planning. Proceedings Twentieth National Conference Artificial Intelligence (AAAI), pp. 11631168.
Haslum, P., Botea, A., Helmert, M., Bonet, B., & Koenig, S. (2007). Domain-independent
construction pattern database heuristics cost-optimal planning. Proceedings
19th National Conference Artificial Intelligence (AAAI), pp. 10071012.
Haslum, P., & Geffner, H. (2000). Admissible heuristics optimal planning. Proceedings Fifth International Conference Artificial Intelligence Planning Systems
(ICAPS), pp. 140149.
Helmert, M. (2003). Complexity results standard benchmark domains planning.
Artificial Intelligence, 146 (2), 219262.
Helmert, M. (2004). planning heuristic based causal graph analysis. Proceedings
14th International Conference Automated Planning Scheduling (ICAPS),
pp. 161170, Whistler, Canada.
Helmert, M. (2006). Fast Downward planning system. Journal Artificial Intelligence
Research, 26, 191246.
Helmert, M., & Domshlak, C. (2009). Landmarks, critical paths abstractions: Whats
difference anyway?. Proceedings 19th International Conference Automated Planning Scheduling (ICAPS), pp. 162169, Thessaloniki, Greece.
Helmert, M., Haslum, P., & Hoffmann, J. (2007). Flexible abstraction heuristics optimal
sequential planning. Proceedings 17th International Conference Automated
Planning Scheduling (ICAPS), pp. 176183, Providence, RI, USA.
Helmert, M., & Mattmuller, R. (2008). Accuracy admissible heuristic functions selected planning domains. Proceedings 23rd AAAI Conference Artificial
Intelligence, pp. 938943, Chicago, USA.
Helmert, M. (2008). Understanding Planning Tasks: Domain Complexity Heuristic
Decomposition, Vol. 4929 Lecture Notes Computer Science. Springer.
Hernadvolgyi, I., & Holte, R. (1999). PSVN: vector representation production systems.
Tech. rep. 1999-07, University Ottawa.
Jonsson, A. (2007). role macros tractable planning causal graphs. Proceedings International Joint Conference Artificial Intelligence (IJCAI-07),
pp. 19361941.
Jonsson, P., & Backstrom, C. (1998). State-variable planning structural restrictions:
Algorithms complexity. Artificial Intelligence, 100 (12), 125176.
Karpas, E., & Domshlak, C. (2009). Cost-optimal planning landmarks. Proceedings
International Joint Conference Artificial Intelligence (IJCAI-09), pp. 1728
1733, Pasadena, CA, USA.
125

fiKatz & Domshlak

Katz, M., & Domshlak, C. (2007a). Structural patterns heuristics. ICAPS-07 Workshop Heuristics Domain-independent Planning: Progress, Ideas, Limitations,
Challenges, Providence, RI, USA.
Katz, M., & Domshlak, C. (2007b). Structural patterns tractable sequentially-optimal
planning. Proceedings 17th International Conference Automated Planning
Scheduling (ICAPS), pp. 200207, Providence, RI, USA.
Katz, M., & Domshlak, C. (2008). Structural patterns heuristics via fork decomposition.
Proceedings 18th International Conference Automated Planning Scheduling (ICAPS), pp. 182189, Sydney, Australia.
Katz, M., & Domshlak, C. (2009). Structural-pattern databases. Proceedings
19th International Conference Automated Planning Scheduling (ICAPS), pp.
186193, Thessaloniki, Greece.
Katz, M., & Domshlak, C. (2010). Optimal admissible composition abstraction heuristics.
Artificial Intelligence, 174, 767798.
Pearl, J. (1984). Heuristics - Intelligent Search Strategies Computer Problem Solving.
Addison-Wesley.
Prieditis, A. (1993). Machine discovery effective admissible heuristics. Machine Learning,
12, 117141.
Richter, S., Helmert, M., & Westphal, M. (2008). Landmarks revisited. Proceedings
Twenty-Third National Conference Artificial Intelligence (AAAI), pp. 975982,
Chicago, IL, USA.
Yang, F., Culberson, J., & Holte, R. (2007). general additive search abstraction. Tech.
rep. TR07-06, University Alberta.
Yang, F., Culberson, J., Holte, R., Zahavi, U., & Felner, A. (2008). general theory
additive state space abstractions. Journal Artificial Intelligence Research, 32,
631662.

126


