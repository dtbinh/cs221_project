Journal Artificial Intelligence Research 5 (1996) 1-26

Submitted 12/95; published 8/96

Spatial Aggregation: Theory Applications
Kenneth Yip

MIT Artificial Intelligence Laboratory, 545 Technology Square
Cambridge, 02139 USA

yip@martigny.ai.mit.edu

Feng Zhao

fz@cis.ohio-state.edu

Department Computer Information Science, Ohio State University
Columbus, OH 43210 USA

Abstract

Visual thinking plays important role scientific reasoning. Based research
automating diverse reasoning tasks dynamical systems, nonlinear controllers, kinematic mechanisms, uid motion, identified style visual thinking, imagistic
reasoning. Imagistic reasoning organizes computations around image-like, analogue representations perceptual symbolic operations brought bear infer
structure behavior. Programs incorporating imagistic reasoning shown
perform expert level domains defy current analytic numerical methods.
developed computational paradigm, spatial aggregation, unify description class imagistic problem solvers. program written paradigm
following properties. takes continuous field optional objective functions input,
produces high-level descriptions structure, behavior, control actions. computes
multi-layer intermediate representations, called spatial aggregates, forming equivalence classes adjacency relations. employs small set generic operators
aggregation, classification, localization perform bidirectional mapping
information-rich field successively abstract spatial aggregates. uses data
structure, neighborhood graph, common interface modularize computations.
illustrate theory, describe computational structure three implemented
problem solvers { kam, maps, hipair | terms spatial aggregation generic
operators mixing matching library commonly used routines.

1. Introduction

commonly believed two styles scientific thinking: analytical, logical
chain symbolic reasoning premises conclusions, visual, holding imagistic, analogue representations problem one's mind perceptual symbolic
operations brought bear make inferences. Neither style preferred
priori other. However, problems whose complexity precludes direct analytical
approach, certain amount qualitative visual imagination needed provide
necessary \feel" \understanding" physical phenomena. picture clear,
analytical mathematics take lead eciently logical conclusions.
\feel physical understanding" often considered informal, imprecise,
apparently unteachable, necessary scientists engineers.
believe part ability visualize imagine must consist skills generate
images, discover structures relations images, transform structures, predict
structures respond internal dynamics external forcing.

c 1996 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiYip & Zhao

AI work visual reasoning focused diagrams role
controlling search, recent years seen development class problem
solvers imagistic, i.e., problem solvers derive power primarily
use visual apparatus secondarily search analytical methods.
problem solvers designed perform tasks many different domains: control
interpretation numerical experiments (Yip, 1991; Nishida & et al., 1991; Zhao,
1994), kinematics analysis mechanisms (Joskowicz & Sacks, 1991), design controllers
(Zhao, 1995; Bradley, 1992), analysis seismic data (Junker & Braunschweug, 1995),
reasoning uid motion (Yip, 1995). However, important commonalities
underlying them. paper, present framework provide unified description
class problem solvers. framework consists three ideas:

field ontology: input field, mapping one continuum another.

image-like analogue representation. field assumed metric
meaningful talk closeness continuity.1
Structure discovery: central problem solved transformation
information-rich input abstractions well-suited concise structural behavioral
descriptions. transformation thought successive mappings
input space abstract spaces hide details group similar objects
equivalence classes.
Multi-layer spatial aggregates: propose (1) representation neighborhood
graph encode explicitly adjacency relations among objects one level abstraction,
(2) building blocks computational processes small set generic operators
construct, transform, classify, search neighborhood graph. operators
recursively used implement task-specific applications. multi-layer theory
two advantages: (1) nonlocal property lower layer redescribed
local property higher layer, (2) layer neighborhood graph
provides common interface support identical modular computations.
field mapping one continuum (say Rm ) another (say Rn ). concretely,
one visualize m-dimensional space n-vector attached point space.
Fields commonplace science engineering applications. used describe
physical quantities vary space time. Temperature room threedimensional scalar field. Weather data described 4D-spacetime field 6vector attached point: velocity (three components) air ow, temperature (scalar),
pressure (scalar), density (scalar). examples fields include brightness
intensity array vision, configuration space mechanism analysis, phase
space (vector field) dynamical systems.
actual computer representations, often approximate field grid. grid
may uniform non-uniform. field reconstructed numerical simulation
1. Forbus et al. (1991) proposed general methodology qualitative spatial reasoning: Metric Diagram/Place Vocabulary (MD/PV). generally agree methodology. paper inspired
us look refined framework unify class problem solvers integrate visual
symbolic reasoning.

2

fiSpatial Aggregation: Theory Applications

measurements. field contain symbolic abstractions; completely
numerical. Fields composable. One extend dimension underlying space
and/or number components vector attached point space.
representation physical systems, field two distinguishing characteristics.
First, information-rich sense Shannon-Weaver measurement information.
instantaneous field 1283 -grid ow simulation may contain order 108 bits
information. Second, pictorial sense structures relations
implicitly represented field.
consequence information-richness pictorial quality, argue
reasoning fields central computational problem ecient transformation pointwise field description physical system economical symbolic abstractions well suited explaining structure behavior system.2 Figure 1 illustrates
field ontology relates commonly used ontologies Qualitative Physics:
device (DeKleer & Brown, 1984), process (Forbus, 1984), constraint (Kuipers, 1986).
useful, symbolic descriptions must impose conceptual structure system
complexity system understood terms well-defined parts
subparts interactions among them. relevant parts interactions often abstract global properties field. abstract property property whose support
large nonlocal, whereas support property defined subset field
property depends. hand, computational complexity reasons
prefer build recognition procedures basic routines local independent task-level information much possible. considerations lead us
adopt architecture pointwise description final symbolic descriptions
mediated layers equivalence classes objects explicit adjacency relations.
call layer objects spatial aggregate.
spatial aggregates come from? real field, tend continuities
properties (such intensity temperature pressure) field divided
equivalence classes, i.e., open regions particular property varies approximately
uniform way. continuities achieve economy description focusing
open regions boundaries instead pointwise field. Higher-order continuities,
i.e., continuities properties defined open regions, similarly used build
abstract spatial aggregates.
formation equivalence classes presupposes existence continuity. brings
us methodological point. important clearly identify source continuities
field equivalently physical system field represents. discovery valid
general continuities physical system much scientific contribution
subsequent computational use form articulated conceptual model explain
structure behavior.
motivation paper comes desire understand computational
structures shared class automatic problem solvers integrate visual, symbolic,
numerical methods. would make computational structure explicit
comparisons generalizations made. goal develop way organizing
2. Inferring structural descriptions field ill-posed problem (e.g., recovering 3D shapes
2D images). avoid diculties, assume structure-recovery problem well-posed
main concerns computational eciency appropriate abstractions.

3

fiYip & Zhao

modeling

HARD!
analytical methods

differential
equations
numerical
simulation

physical
system

measurement

modeling

field

interpret

equivalence
class clustering

structural
description

device

modeling

process

modeling

constraint

analytical
functions

qualitative
behavioral
description

envisionment
incremental analysis
process inference
qualitative simulation

Figure 1: Field ontological abstraction reasoning physical systems.
diagram depicts relationships among different ontologies used Qualitative
Physics. central computational problem field reasoning recovery
economical structural descriptions qualitative behavior description explanation. key step structural recovery formation equivalence
classes. Identifying general valid continuities useful equivalence
class relations based important scientific contribution.
programs around image-like analogue representations, appropriate language make
programs written style clear.
next section develops theory spatial aggregation detail. Section 3 describes
language support programs organized around neighborhood graphs. Section 4
illustrates usefulness language describing succinctly computation structure
three implemented programs { kam, maps, hipair. choose programs
illustrations largely familiarity them. Section 5 shows program
spatial aggregation language, using example image analysis. plan
investigate applicability framework several programs,
constructed Kuipers Levitt (1988), Forbus et al. (1991), Gelsey (1995), Junker
Braunschweug (1995).

4

fiSpatial Aggregation: Theory Applications

2. Spatial Aggregation Theory

Given field, spectrum reasoning tasks defined. following list roughly
order increasing complexity:
Infer structural descriptions. Find objects, any, exist field.
shapes, sizes, locations? distributed?
created? evolve parameter (say time) varied?
Classify. Assign semantic labels objects configurations.
Infer correlations. Determine geometry distribution one type
objects correlate another type?
Check consistency. Given two objects configurations, test equivalent
pairwise consistent.
Infer incremental behavior. Given instantaneous configuration, predict
possible short-term behaviors.
Infer behavioral descriptions. Explain summarize evolution objects
set domain-specific interaction rules.

2.1 Requirements imagistic reasoning

Partly motivated Ullman's theory visual analysis (Ullman, 1984), find desirable
following general requirements imagistic reasoning:

Abstractness. problem solver able find objects defined abstract
global properties.

Open-endedness. problem solver architecture applicable variety

domains ( uid motion, seismic data, weather data, phase space, configuration
space). requirement implies basic recognition routines must modular
composable. Task-specific knowledge affects choice ordering
routines.
Eciency. \building blocks" recognition machinery must local
non-goal-specific. \Non-goal-specific" means operations building blocks
depend interpretation objects manipulate. requirement
implies basic routines local supports principle run
parallel.
Soundness. structural behavioral descriptions must consistent
known physical mathematical principles.
Succinctness. structural behavioral descriptions contain qualitatively important distinctions relevant high-level tasks hand.
5

fiYip & Zhao

2.2 Theory

theory imagistic reasoning postulates existence multi-layers spatial aggregates. Figure 2 shows layers spatial aggregates computations organized around
them. primitive aggregate defined equivalence class subsets pointwise
field representation. aggregate composed equivalence classes primitive aggregates. field assumed task-dependent metric. metric induces topology
space hence meaningful talk adjacency. data structure
spatial aggregate neighborhood graph whose nodes represent objects edges represent adjacency relations among objects. input field sampled form lowest
layer abstraction; field affected control actions higher-level
abstraction layers.
stream construct scheme programming language provides common
interface organizing signal processing computations, neighborhood graph conceptual glue piecing together operations manipulate fields. visualize
nodes neighborhood graph open sets (in topology) appropriate space. Two
nodes adjacent respective open sets contiguous.3
topological notion adjacency amazingly useful reasoning physical systems. grouping objects equivalence classes, cluster tends give rise connected
component neighborhood graph. reasoning kinematics, neighborhood
graph provides essential connectivity information among free space regions. finding
\interesting" structures, pairwise consistency adjacent nodes localizes search regions. isolating bifurcation patterns, mismatch adjacent objects provides hint
analysis. constraint propagation path search, adjacency structure
imposes locality increase computational eciency. Prevalence simplicity { two
aspects neighborhood graph make powerful data structure unifying many
spatial computations.
theory revolves around computation neighborhood graph nature
processes construct, filter, transform, compare neighborhood graphs.
isolate set generic operators aggregate, classify, re-describe, search correspond
important conceptual pieces common class imagistic problem solvers
kam (Yip, 1991), maps (Zhao, 1994), hipair (Joskowicz & Sacks, 1991).
next section discusses operators detail. Section 4 illustrates use
operators rational reconstruction three implemented computer programs.

3. Language Spatial Aggregation

present language describing computational processes organized around spatial
aggregates. language provides small set operators construct manipulate
neighborhood graphs. operators make conceptual structure several implemented
programs clear.
3. Let B two open sets. B contiguous either \ B 6= ; B \ 6= ;
closure set A. particular, B overlap, contiguous.

6

fiSpatial Aggregation: Theory Applications

Model

classify
search

aggregate

Structural
description

N-graph
consistent?

primitive
objects
filter

map

incremental
analyze

re-describe

Behavioral
description

localize

classify
search

aggregate

Structural
description

N-graph
consistent?

primitive
objects
filter

map

incremental
analyze

Behavioral
description

control

sample

FIELD

Figure 2: schematic representation computational structure analysis field
ontology. multi-layers spatial abstraction. abstraction level defined neighborhood graph, data structure representing spatial aggregates
adjacency relations. input field fed lowest abstraction layer.
Note identical computational structure layer. aggregate operator
computes adjacency relations based task-specific metric. neighborhood
graph common interface map filter routines. remaining operations correspond generic analysis tasks. repertoire task-independent
geometric manipulation routines (which shown) accessible
generic operators.
7

fiYip & Zhao

3.1 Task-level operators

task-level generic operators consist aggregate, classify, re-describe, localize,
search, incremental-analyze, together predicates pairwise-consistent?
consistent?. neighborhood graph \conceptual glue": allows computation
hierarchical structural descriptions organized uniform manner. following
box summarizes language provides user needs supply order
write programs spatial aggregation.

Language Features
User interface functions:
aggregate, classify, re-describe, localize, search,
incremental-analyze, pairwise-consistent?, consistent?

user must specify neighborhood relation, field metric, equivalence
relation operators.

Data types:
{ N-graph constructors, accessors, modifiers.

Examples N-graph include 4-adjacency arrays, minimal spanning tree,
Voronoi diagram.
{ Fields:
bitmap, vector field, etc.
Libraries:
{ Geometric utilities:
intrinsic-geometry, contain?, intersect, @ , .
{ Numerical image processing routines:
FFT, convolution, integrator, linear system solver, vector/matrix algebra.
1.

2.

aggregate(objects combiner)

aggregate operator assembles collection objects spatial structure
using combiner procedure explicates spatial relations among objects
terms neighborhood graph.4 operator returns neighborhood graph
(N-graph). N-graph lazily built.
example, recognize trajectory phase space, aggregate operator might
given set discrete points combiner procedure (such minimal spanning
tree) establish adjacency relations. combiner procedure might use metric
topological properties underlying space.
classify(N-graph cluster-proc class-rules)

4. Recall nodes neighborhood graph objects edges adjacency relations.

8

fiSpatial Aggregation: Theory Applications

classify operator forms equivalence classes according equivalence relation
(using cluster-proc), assigns semantic label equivalence class |
subgraph input N-graph | according classification rules. example,
orbit clustering procedure groups orbits ow pipes.5 classification rules
set production rules. operator returns labeled N-graph.
catalog classification labels domain-specific. classification labels
serve indices storage retrieval shared class properties methods
instantiating them.
3.

re-describe(N-graph desc-type)

4.

localize(N-graph select-proc enumerate-proc)

5.

6.

re-describe operator changes representation primitive object.
lambda abstraction scheme, operator allows compound object (say subset
N-graph) treated primitive.
Given classified object, description-type procedure instantiates additional properties specific class objects. example, point set classified
space curve, becomes sensible compute additional geometric properties
length, curvature, torsion.
localize operator systematically enumerates members equivalence class
(nodes N-graph) selects according select procedure. operator
\opens up" abstraction allow individual members equivalence class
singled out.
search(N-graph initial-states goal-p combiner)

search operator returns paths starting initial-states satisfying
goal-p predicate. combiner procedure controls order graph
traversed.
incremental-analyze(N-graph state-desc delta)

Given N-graph description states constituent laws, incrementalanalyze operator computes infinitesimal change qualitative state due
small perturbation. perturbation delta might temporal, state,
parameter space.
predicates pairwise-consistent? consistent?:



pairwise-consistent?(obj1 obj2 consistency-rules)



consistent?(obj consistency-rules)

pairwise-consistent? predicate decides two objects consistent according
consistency-rules. objects primitive objects nodes
N-graph N-graphs themselves.
Consistent?

tests object well-formed according consistency-rules.

5. ow pipe class orbits continuously deformed other. example
homotopy equivalence class.

9

fiYip & Zhao

3.2 Generic data structure routines
neighborhood graph constructed



N-graph-constructor(objects neighbor-p)



map(N-graph proc)



filter(N-graph mask)

N-graph-constructor takes set primitive objects neighborhood predicate
arguments, returns neighborhood graph. example neighborhood graph Voronoi diagram. predicate neighbor-p tests two nodes
neighbors.
set task-independent routines operate objects neighborhood graphs
support task-level operations.
map routine transforms neighborhood graph using prespecified procedure.
filter selects subset neighborhood graph processing.

addition generic operators, language provides routines perform common
geometric manipulation. following routines especially useful:
1.
2.
3.
4.
5.
6.

computes intrinsic geometric properties
objects (e.g., area, curvature, surface normal).
contain?(obj1 obj2) checks obj2 inside obj1.
intersect(obj1 obj2) computes intersection two objects.
@(object) boundary operator returns boundary object.
dimension boundary co-dimension 1.
(object) co-boundary operator returns new object whose boundary
object. dimension new object one higher object.
convolve(object mask) performs pointwise convolution given mask.

intrinsic-geometry(obj properties)

4. Examples Spatial Aggregation

section, describe architecture three implemented systems kam (Yip, 1991),
maps (Zhao, 1994), hipair (Joskowicz & Sacks, 1991) terms spatial aggregation
framework. Although programs designed different tasks, computations
share strikingly similar pattern: programs construct spatial objects, interpret
via multi-layers abstraction object aggregation, classification, re-description.
Composite objects lower level labeled manipulated primitive units
next higher level.
Despite fact authors two programs, structural similarities among programs apparent us carefully reconstructed
10

fiSpatial Aggregation: Theory Applications

programs defining appropriate neighborhood graphs generic operators. Analyzing programs common framework help us understand
programs do, greatly enhance ability construct future programs
spatial aggregation operators.

4.1 KAM

task kam explore dynamics Hamiltonian systems produce high-level
summaries qualitative behaviors.
Given state equations Hamiltonian system, kam derives symbolic description
qualitative behavior | terms orbit types,6 orbit bundles, phase portraits,
bifurcation patterns | collection point sets representing orbits (or trajectories)
phase space (see Figure 3). point sets obtained numerical simulation
measurements. provide useful interpretation point set, kam decide (1)
look interesting orbits, (2) group orbits larger structures.
Kam proceeds via sequence intermediate representations allow gradual recovery
orbit structures eventually global dynamical properties system. Kam
able view object multiple levels abstraction. example, orbit
viewed points phase space curve part orbit bundle.
computations kam organized four layers (as shown Figure 4): (1) orbit,
(2) orbit bundle, (3) phase portrait, (4) bifurcation pattern. walk
first level sucient detail illustrate computation synthesized
spatial aggregation operators neighborhood graph. Details remaining levels
described Yip (1991).
input point set. aggregate operator imposes adjacency relation
point set constructing minimal spanning tree (MST). Two points adjacent
neighbors connected edge MST. Although MST appropriate
orbit interpretation, applications might require different adjacency relations (such
Voronoi diagrams k-nearest neighbors). output aggregate operator
neighborhood graph encodes edges MST.
consistent? predicate checks inconsistent edges, i.e., edges
significantly longer nearby edges, neighborhood graph. Deleting
inconsistent edge partition graph subgraphs represents cluster
original point set.
Next, classify operator assigns label, orbit type, neighborhood graph
according shape MST number clusters. assignment unsuccessful, kam assumes input point set contain enough points reveal
structure orbit. Kam request points repeat aggregation step.
assignment successful, re-describe operator takes labeled neighborhood
graph fills information relevant particular orbit type. example,
orbit periodic orbit, period orbit determined. filling
details, re-describe operator packages orbit primitive object passes
6. introduce useful terminology here. dynamical system smooth vector field. orbit
integral curve vector field. orbit bundle collection adjacent orbits
qualitative behavior. phase portrait collection orbits fill phase space. bifurcation
pattern characteristic change structure phase portrait system parameters vary.

11

fiYip & Zhao

(a)

(b-1)

(b-2)

Figure 3: Top: (a) phase portrait Hamiltonian system. geometric structures
phase portrait vary drastically system parameter changes.
expert dynamicist, kam explores dynamics nonlinear Hamiltonian
system finding interesting structures phase space. decides initial
conditions parameter values try. interprets finds uses
structures draws guide exploration.
Bottom: (b-1) minimal spanning tree representation point set. (b-2)
Magnifying boxed region | crosses () inconsistent edges. Kam imposes
adjacency relations point set representing trajectory phase space.
structure minimal spanning tree reveals type trajectory.

12

fiSpatial Aggregation: Theory Applications

bifurcation
consistency
rules
phase
portraits

consistent?

aggregate

N-graph

portrait
consistency
rules

bifurcation properties

bifurcation classification rules

consistent?

aggregate

redescribe

N-graph

phase
portrait

portrait properties
classify

wavefront
propagation
orbit bundle
consistency
rules
orbits

bifurcation
pattern

classify
nearest
neighbors

orbit
bundles

redescribe

portrait classification rules

consistent?

aggregate

redescribe

N-graph

orbit
bundle
orbit bundle properties
classify

wavefront
propagation
tree
consistency
rules
point
set

orbit bundle classification rules

consistent?

aggregate

redescribe

N-graph

MST
algorithm

orbit

orbit properties
classify
orbit classification rules

Figure 4: computational structure kam viewed spatial aggregation operators acting neighborhood graphs. four layers abstraction: orbit, orbit bundle,
phase portrait, bifurcation pattern. computation organized around
neighborhood graphs. structural similarities among layers apparent.

13

fiYip & Zhao

force control
switched

control u 1


flow pipe
Region R projected
onto initial phase plane.

control u 2

G
R

Figure 5: Left: Buckling beam due axial load.
Right: Phase spaces buckling beam (upper) locally controlled beam
(lower). stabilize buckling beam far unbuckled state |
unstable equilibrium G, maps (1) finds ow pipe, group qualitatively similar
trajectories, reaches G, (2) deforms trajectory emanating initial
state via force control trajectory close G, (3) switches
conventional linear controller achieve desired stabilization. Let region R
lower phase plane linearly controllable region control u2 . Starting
initial state initial control u1 , system evolves along trajectory
within ow pipe close projection region R. force
control u1 turned deform trajectory system moves
region R linear controller drives system desired unbuckled
state G.
next level abstraction, orbit bundle level, process aggregation,
consistency checks, classification, re-description repeated.

4.2 MAPS

Maps' task analyze qualitative phase-space structures dissipative systems

use analysis results guide synthesis control laws.
kam, maps extracts high-level dynamical information phase space structures. maps goes beyond kam two important aspects: (1) maps deals threedimensional structures explicitly (whereas kam reasons cross-sections three-dimensional
structures), (2) maps uses phase space structures synthesize nonlinear control
actions.
Maps synthesizes global control path geometrically (see Figure 5). Given initial
state desired state system control, maps searches path phase
space connects initial desired state. goal directly reachable
initial state, maps pieces together multiple path segments varying control
actions. brute-force search individual control paths continuum clearly infeasible.
Maps partitions continuous phase space manageable discrete set objects |
14

fiSpatial Aggregation: Theory Applications

ow pipes | defining appropriate equivalence relations, searches ow pipes
good control paths.
computations maps organized four layers (as shown Figure 6): (1) stability region, (2) ow pipe, (3) phase portrait, (4) ow pipe graph. input
fixed points dynamical system7 . Two fixed points adjacent connected
saddle trajectories. adjacency relation represented neighborhood
graph. trajectories passing saddles classified equivalence classes
assigned stability region boundary labels. re-describe operator computes regions delimited stability region boundaries represents polyhedra.
stability regions fed next layer.
second layer, stability region triangulated Delaunay method.
aggregate operator constructs neighborhood graph triangulation using adjacency relation defined Voronoi diagram, dual Delaunay triangulation.
triangulated sub-regions classified equivalence classes according topological criterion states two adjacent sub-regions equivalent trajectories
passing connected consistent manner. Equivalence classes
sub-regions classified ow pipes. Recall ow pipe coarse representation
set trajectories qualitative properties. use ow pipes simplifies
considerably control path planning problem.
third layer aggregates ow pipes form phase portrait.
fourth layer control decisions made. Flow pipes different phase
portraits aggregated form larger structure, ow pipe graph, fundamental data structure supporting path planning phase space. Two ow pipes
adjacent phase space regions covered ow pipes overlap. Intuitively, one
switch one ow pipe adjacent one setting appropriate control parameters
generate phase portraits question. Given initial desired state, search
operator searches ow pipe graph solution paths.
Information passed abstraction layer. connected sequence
ow paths found satisfy control objective, individual trajectory segments within
ow pipe found localize operator using shooting method.

4.3 HIPAIR

Hipair performs kinematic analysis fixed-axes mechanisms built rigid parts. Given
description shapes motion types (such translation rotation) parts,
hipair derives realizable configurations mechanism.
Hipair derives realizable configurations mechanism constructing manipulating configuration space mechanism (see Figure 7). configuration space
space positions orientations parts make mechanism. hipair
partitions configuration space free space regions parts overlap,
blocked space regions overlap. configurations correspond free
space regions realizable. boundaries free space regions determined
7. Fixed points, equilibrium points, critical points phase space velocity vector
vanishes. Fixed points classified three types according behavior nearby trajectories.
fixed point attractor nearby trajectories move towards it. repellor
move away it. saddle move towards move away it.

15

fiYip & Zhao

flow pipe graph
consistency
rules
phase
portraits

aggregate

N-graph

portrait
consistency
rules

search

consistent?

aggregate

N-graph

classify
localize

shooting
method

redescribe

phase
portrait

portrait properties
classify

wavefront
propagation
sub-region
consistency
rules
stability
regions

flow
pipe
graph

reachability rules

flow pipe region overlap

flow
pipes

redescribe

consistent?

portrait classification rules

consistent?

aggregate

redescribe

N-graph

flow
pipes

flow pipe properties
classify

Voronoi diagram
flow pipe classification rules
stability region
consistency
rules
fixed
points

consistent?

aggregate

redescribe

N-graph

stability
regions

stability region properties
classify

saddle trajectories
stability region classification rules

Figure 6: computational structure maps viewed spatial aggregation operators
acting neighborhood graphs. four layers abstraction: stability regions,
ow pipes, phase portrait, ow pipe graph. Note structural similarities
kam maps. Control synthesis implemented search
localize operators acting neighborhood graph representing ow pipe
graph.

16

fiSpatial Aggregation: Theory Applications

x
5

cam


x
follower

5






Figure 7: Left: 3-finger cam-follower. Right: configuration space camfollower. cam rotation. x follower displacement. shaded
regions blocked space, indicating parts overlap. free space
regions realizable configurations cam-follower. boundaries
free space regions determined contact relations cam
fingers follower.
contact relations among parts touch other. region diagram graph whose
nodes free space regions edges specify region adjacencies. region diagram
mechanism composed regions diagrams pairwise interacting parts.
example, region diagram mechanism 10 parts constructed region
diagrams 45 possibly interacting pairs.
computations hipair organized three layers (as shown Figure 8): (1)
free space region, (2) subassembly region diagram, (3) mechanism region diagram.
input shapes parts motion types. Hipair first considers pair interacting parts. looks equations contact curves, i.e., curves configuration
space pair corresponding configurations two parts touch,
pre-compiled table common contact curves. contact curve partitioned segments
intersection points curve either another contact curve boundaries
configuration space. Two segments adjacent share endpoint. aggregate
operator assembles segments adjacency relations neighborhood graph.
search operator traverses neighborhood graph find closed chains segments,
closed chain segments sequence segments intersect itself. closed
chain segment encloses free space region. consistent? predicate discards closed
chains lie inside closed chains. classify operator assigns label
closed chain, re-describe operator computes free space regions delimited
closed chains. free space region subdivided convex regions.
input second layer free space regions. aggregated neighborhood graph. Two free space regions adjacent (or neighbors) touch. Given
initial configuration S0 interacting pair, search operator finds free space
regions reachable S0 depth first search. neighborhood graph re-described
subassembly region diagram.
17

fiYip & Zhao

sub-region
consistency
rules

consistent?

subassembly
aggregate
region
daigrams

region adjacency

sub-region
consistency
rules
free
space
regions

aggregate

mechanism
region
diagram

N-graph region diagram properties
classify
search

consistent?

mechanism classification rules

redescribe

N-graph

subassembly
region
diagram

region diagram properties

classify
region adjacency

closed chain
consistency
rules
contact
curve
segments

redescribe

search

consistent?

aggregate

region diagram classification rules

free
space
regions
free space properties

redescribe

N-graph

classify
shared endpoint

search
free space classification rules

Figure 8: computational structure hipair viewed spatial aggregation operators
acting neighborhood graphs. three layers abstraction: free space
regions, subassembly region diagram, mechanism region diagram. Note
structural similarities hipair, kam, maps. search operator
determines reachability conditions three layers.
third layer, hipair combines subassembly region diagrams mechanism region diagram. mechanism region diagram neighborhood graph whose nodes
realizable sets free space regions edges specify adjacency free space regions.
set free space regions realizable intersections non-empty. example,
let M0 = fR0 ; S0 ; T0 g set free space regions containing initial configuration
mechanism three parts P1 ; P2 ; P3 , R0 , S0 , T0 free space
regions subassembly region diagrams pairs fP1 ; P2 g; fP1 ; P3 g, fP2 ; P3 g
respectively. Suppose R0 one neighbor R1 , S0 one neighbor S1 , T0 none.
three candidate neighbors M0 given by:
M1 = fR1 ; S0 ; T0 g
18

fiSpatial Aggregation: Theory Applications

= fR0 ; S1 ; T0 g
= fR1 ; S1 ; T0 g

M2
M3

consistent? predicate checks candidate neighbors discards unrealizable ones.

5. Illustration

section, show program spatial aggregation language.
example boundary tracer line drawings.8 pick example image
analysis routines quite naturally written spatial aggregation style.
Boundary tracing basic operation image analysis.9 operation might used
identify group boundary segments object. example, consider
line drawing overlapping 2D objects (see Figure 9). group boundary segments,
one might first decompose figure segments, junctions. tracing process
joins colinear segments.
input boundary tracing program bitmap:
0
0
0
0
0
0
0
0
0
0
0
0
0

0
1
1
1
1
1
1
1
0
0
0
0
0

0
1
0
0
0
0
0
1
0
0
0
0
0

0
1
0
0
1
1
1
1
1
1
1
1
0

0
1
0
0
1
0
0
1
0
0
0
1
0

0
1
0
0
1
0
0
1
0
0
0
1
0

0
1
1
1
1
1
1
1
0
0
0
1
0

0
0
0
0
1
0
0
0
0
0
0
1
0

0
0
0
0
1
0
0
0
0
0
0
1
0

0
0
0
0
1
0
0
0
0
0
0
1
0

0
0
0
0
1
0
0
0
0
0
0
1
0

0
0
0
0
1
0
0
0
0
0
0
1
0

0
0
0
0
1
1
1
1
1
1
1
1
0

0
0
0
0
0
0
0
0
0
0
0
0
0

bitmap rendered Figure 10(a). Figure 11 illustrates output Figure 10(b) (c) computed input bitmap, using spatial aggregation operators.
first define neighborhood relation pixels 4-adjacency (namely,
neighbors pixel pixels immediate north, east, south, west).
often ecient way construct N-graphs directly neighborhood relations,
define explicit N-graph neighborhood constructor finds 4-adjacency neighbors
given pixel.
Next aggregate operator assembles pixels N-graph N-graph
constructor. Pixels N-graph considered similar neighbors neither
junction, junction defined pixel whose value one
two one-value neighbors. classify operator groups pixels equivalence
8. details interpretor language, implemented scheme, discussed elsewhere (BaileyKellogg, Zhao, & Yip, 1996).
9. Jim Mahoney introduced us unified description high-level operations images.

19

fiYip & Zhao

Figure 9: line drawing two overlapping objects.

(a)

(b)

(c)

Figure 10: Boundary tracing operation image analysis: (a) Pixels boundaries two
overlapping objects; (b) Pixels grouped boundary segments; (b) Boundary segments grouped distinct object contours.
classes using similarity threshold returns foreground equivalence classes, shown
Figure 10(b).
foreground equivalence classes re-described higher-level objects, boundary segments, turn aggregated new N-graph using different neighborhood relation. Specifically two boundary segments neighbors minimum separation distance less specified separation. Next, adjacent boundary segments
colinear grouped equivalence classes, called contours. contour represents
complete boundary object. Figure 10(c) shows result grouping.
might want check impossible contours. contour legal closed
self-intersecting. conditions expressed standard pattern language. Pairwise
consistency rules likewise defined.
program written spatial aggregation language shown Figure 12
Figure 13.10
10. actual implementation language described Kellogg, Zhao, Yip (1996), syntax
operators differs slightly Section 3.

20

fiSpatial Aggregation: Theory Applications

contour
consistency
rules
boundary
segments

consistent?
aggregate

redescribe
segment
N-graph

nearness
neighborhood

object
contours

boundary segment classes
classify
colinearity,
threshold

redescribe
pixels

aggregate

pixel
N-graph

4-adjacency
neighborhood

boundary
segments

pixel classes
classify
pixel similarity,
threshold

Figure 11: Boundary tracing operation: data ow spatial aggregation implementation.

6. Related Work

literature visual spatial reasoning enormous (e.g., Kosslyn, 1994; Glasgow,
1993). section, discuss computationally oriented approaches.
first line work investigates diagram-like representations aid heuristic search.
Gelernter (1963) used diagrams geometry theorem prover prune goals
obviously false. Nevins' geometry theorem prover constrained forward deduction conclude facts objects explicitly depicted diagrams (Nevins, 1975). Stallman
Sussman (1977) exploited connectivity locality lumped-parameter model
guide forward reasoning implement symbolic constraint propagation. similar
spirit, Larkin Simon (1987) showed elementary mechanics problem diagrammatic representation reduce search diagram provides convenient indices
clustering objects relations.
second line work concerns analogue simulations naive physics. Funt's whisper
program first AI program uses primarily perceptual primitives predict dynamical events simple blocks world (Funt, 1980). Arguing commonsense predictions
solid uid behavior cannot possibly depend solution complicated equations,
Gardin Meltzer (1989) proposed \molecular" simulation strings uids.
body uid, example, decomposed macro-molecules interacting
according small set local rules. Chandrasekaran Narayanan (1990) proposed
direct analogue simulation motion sliding block inclined plane.
21

fiYip & Zhao

;; 4-adjacency pixel neighborhood:
;; neighbors pixels one unit away using nearness ngraph
(define image-ngraph-fac
(ngraph-near/instantiate image-field-fac 1))
;; Form neighborhood graph pixels
(define image-ngraph
(aggregate pixels image-ngraph-fac))
;; Pixel classifier: two adjacent nodes equivalent
;; value neither junction.
(define pixel/classify
(classify-standard/instantiate
image-ngraph-fac
(lambda (n1 n2)
(if (and (not (is-junction? n1))
(not (is-junction? n2))
(= (pixel/value n1) (pixel/value n2)))
0 1))))
;; Form equivalence classes foreground pixels
(define pixel-classes
(filter
(lambda (cl) (= (pixel/value (car cl)) 1))
(pixel/classify image-ngraph pixels *threshold1*)))
;;; Form boundary segments
(define segments
(redescribe pixel-classes segment/create))

Figure 12: Boundary tracing operation program (part 1): group pixels boundary segments.
objective develop cognitive architecture visual perception mental imagery.
direct representation scene propose consists hierarchical, multi-resolution
symbol structure encoding spatial relations among objects, linked analogical
representation scene (image). major challenge analogue simulation
provide reliable simulation without incorporating extensive physics geometrical
modeling.
third line work consists spatial reasoning research qualitative physics.
Kuipers Levitt (1988) described approach spatial reasoning robot navigation
mapping large-scale spaces. proposed four-level hierarchical representation
incorporating topological metric descriptions terms entities places, paths,
distances, angles. Forbus et al. (1991) developed Metric Diagram/Place Vocabulary
theory. metric diagram contains numerical symbolic descriptions scene,
22

fiSpatial Aggregation: Theory Applications

;; Boundary segment neighborhood defined separation distance
(define segment-ngraph-fac
(ngraph-near/instantiate segment-field-fac separation))
;; Form neighborhood graph boundary segments
(define segment-ngraph
(aggregate segments segment-ngraph-fac))
;; Boundary segments classifier: two adjacent segments
;; equivalent colinear. Two thresholds used
;; determining colinearity: delta threshold separation
;; distance two end-points epsilon angle
;; tangent vectors end-points.
(define segment/classify
(classify-standard/instantiate
segment-ngraph-fac
(lambda (s1 s2)
(if (and (> (length (segment/points s1)) 1)
(> (length (segment/points s2)) 1)
(segment/colinear s1 s2 delta epsilon))
0 1))))
;; Form contours, i.e., equivalence classes boundary segments
(define segment-classes
(segment/classify segment-ngraph segments *threshold2*))
;; Contour consistency check: closed self-intersecting
(define contour-consistency-rules
'(if (and (closed? ?c)
(not (self-intersecting? ?c)))
#t #f))

Figure 13: Boundary tracing operation program (part 2): group boundary segments
distinct object contours.
place vocabulary quantization space according task-specific criteria (see footnote 1). Comparing spatial aggregation framework MD/PV
framework, note two major differences. First, whereas metric diagram mixed
symbolic/quantitative representation, field purely numerical encode
structures explicitly. Second, theory postulates multi-layer spatial aggregates identical computational structure layer. focusing field ontology,
thought special class metric diagrams, able emphasize importance
structure-recovery problem, commonalities underlying several implemented
programs.

23

fiYip & Zhao

7. Conclusion

developed spatial aggregation paradigm realization imagistic reasoning.
paradigm systematizes important task interpreting time-varying information-rich
fields. paradigm consists three ideas: (1) field ontology, image-like analogue
representation, input, (2) structural discovery { ecient transformation pointwise field representation economical symbolic descriptions { central computational
problem, (3) multi-layer neighborhood graph common interface small
set generic operators { aggregate, classify, redescribe, search { building blocks
computational processes derive symbolic abstractions analogue representation. paradigm relies important observations physical constraints
real field (such continuity conservation) provide useful equivalence relations
economical descriptions, nonlocal property lower layer often redescribed
local property higher layer.
spatial aggregation paradigm supports recovery abstract properties via
multi-layer neighborhood graphs. produces concise descriptions manipulating equivalence classes objects primitives. constructs modular programs generic operators mixing matching library commonly used routines. expresses task-specific
knowledge terms field metric, adjacency relations, consistency predicates, classification
rules, redescription properties.
illustrate theory, examine computational structure three implemented
programs { kam, maps, hipair { integrate symbolic, numerical, visual reasoning. show small set generic operators construct, transform, filter, classify,
search neighborhood graphs capture commonalities programs. develop
language, way organizing programs around neighborhood graphs, make programs
written style clear.
currently developing toolkit support problem solving using generic
operators spatial aggregation paradigm. Many research questions still open.
operators interfaced computational geometry numerical analysis
build robust, ecient programs? scientific problems solved spatial
aggregation?
Imagistic reasoning powerful strategy mapping analog signals generated
physical systems discrete, symbolic representations systems. Spatial aggregation one many realizations. believe reasoning methods derive
power primarily perceptual operations analog representations secondarily search analytical methods might prove effective automating commonsense
reasoning well.

Acknowledgements
thank Chris Bailey-Kellogg help implementing spatial aggregation language, following people helpful discussions comments earlier drafts
paper: Harold Abelson, Andy Berlin, B. Chandrasekaran, Gregor Kiczales, John
Lamping, Shiou Loh, Jim Mahoney, Jeff May, Neal McDonald, Pandurang Nayak, Toyoaki
Nishida, Elisha Sacks, Brian Smith, Jack Smith, Gerry Sussman, Brian Williams.
24

fiSpatial Aggregation: Theory Applications

KY supported NSF National Young Investigator Award ECS-935777. FZ
supported NSF National Young Investigator Award CCR-9457802, Alfred P. Sloan
Foundation Research Fellowship, grant Xerox Palo Alto Research Center, grant
AT&T Foundation, NSF grant CCR-9308639.

References

Bailey-Kellogg, C., Zhao, F., & Yip, K. (1996). Spatial aggregation: language applications. Proceedings AAAI. appear.
Bradley, E. (1992). Taming chaotic circuits. Tech. rep. AI-TR-1388, MIT Artificial Intelligence Lab.
Chandrasekaran, B., & Narayanan, N. (1990). Towards theory commonsense visual
reasoning. Nori, K., & Madhavan, C. (Eds.), Foundations Software Technology
Theoretical Computer Science. Springer.
DeKleer, J., & Brown, J. (1984). qualitative physics based con uences. Artificial
Intelligence, 24.
Forbus, K. (1984). Qualitative process theory. Artificial Intelligence, 24.
Forbus, K., Nielsen, P., & Faltings, B. (1991). Qualitative spatial reasoning: CLOCK
project. Artificial Intelligence, 51.
Funt, B. (1980). Problem solving diagrammatic representations. Artificial Intelligence,
13.
Gardin, F., & Meltzer, B. (1989). Analogical representations naive physics. Artificial
Intelligence, 38.
Gelernter, H. (1963). Realization geometry-theorem proving machine. Computers
Thought. McGraw-Hill.
Gelsey, A. (1995). Automated reasoning machines. Artificial Intelligence, 74.
Glasgow, J. (1993). imagery debate revisited: computational perspective. Computational Intelligence.
Joskowicz, L., & Sacks, E. (1991). Computational kinematics. Artificial Intelligence, 51,
381{416.
Junker, U., & Braunschweug, B. (1995). History-based interpretation finite element
simulations seismic wave fields. Proceedings IJCAI.
Kosslyn, S. M. (1994). Image Brain: resolution imagery debate. MIT Press.
Kuipers, B. (1986). Qualitative simulation. Artificial Intelligence, 29.
Kuipers, B., & Levitt, T. (1988). Navigation mapping large-scale space. AI Magazine,
9(2).
25

fiYip & Zhao

Larkin, J., & Simon, H. (1987). diagram (sometimes) worth ten thousand words.
Cognitive Science, 11.
Nevins, A. (1975). Plane geometry theorem proving using forward chaining. Artificial
Intelligence, 6.
Nishida, T., & et al. (1991). Automated phase portrait analysis integrating qualitative
quantitative analysis. Proceedings AAAI.
Stallman, R., & Sussman, G. J. (1977). Forward reasoning dependency-directed backtracking system computer-aided circuit analysis. Artificial Intelligence, 9.
Ullman, S. (1984). Visual routines. Cognition, 18.
Yip, K. M. (1991). KAM: system intelligently guiding numerical experimentation
computer. MIT Press.
Yip, K. M. (1995). Reasoning uid motion: finding structures. Proceedings
IJCAI.
Zhao, F. (1994). Extracting representing qualitative behaviors complex systems
phase spaces. Artificial Intelligence, 69(1-2), 51{92.
Zhao, F. (1995). Intelligent simulation designing complex dynamical control systems.
Tzafestas, & Verbruggen (Eds.), Artificial intelligence industrial decision making,
control, automation. Kluwer Academic Publishers.

26


