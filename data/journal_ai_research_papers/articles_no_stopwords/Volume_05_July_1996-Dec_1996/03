journal artificial intelligence

submitted published

accelerating partial order planners techniques
effective search control pruning
alfonso gerevini

gerevini ing unibs

lenhart schubert

schubert cs rochester edu

dipartimento di elettronica per l automazione universita di brescia
via branze brescia italy
department computer science university rochester
rochester ny usa

abstract

propose domain independent techniques bringing well founded partialorder planners closer practicality first two techniques aimed improving
search control keeping overhead costs low one simple adjustment
default heuristic used ucpop select plans refinement
preferring zero commitment forced plan refinements whenever possible
lifo prioritization otherwise radical technique use operator parameter
domains prune search domains initially computed definitions
operators initial goal conditions polynomial time
propagates sets constants operator graph starting initial conditions
parameter domains used prune nonviable operator instances
remove spurious clobbering threats experiments modifications ucpop
improved plan goal selection strategies gave speedups factors ranging
variety nontrivial unmodified version
crucially hardest gave greatest improvements pruning technique
parameter domains often gave speedups order magnitude
dicult default ucpop search strategy improved
strategy lisp code techniques test provided line
appendices

introduction

concerned improving performance well founded domain independent planners planners permit proofs soundness completeness desirable
theoretical properties state art example planner ucpop barrett
et al penberthy weld whose intellectual ancestry includes strips fikes
nilsson tweak chapman snlp mcallester rosenblitt
planners unfortunately perform well present comparison practically
oriented planners sipe wilkins prs georgeff lansky plan
currie tate
however appear ample opportunities bringing well founded planners
closer practicality following begin suggesting improvements
search control carefully formulated strategies selecting partial
plans refinement choosing open conditions selected partial plan plan c ai access foundation morgan kaufmann publishers rights reserved

figerevini schubert
selection strategy uses oc number steps plan plus number open
conditions still established heuristic measure ucpop search
plan space addition attenuated term ecting number threats unsafe
conditions uc uc sometimes advantageous aw selection strategy
term zlifo prefers zero commitment plan refinements others otherwise
uses lifo stack discipline zero commitment refinements logically necessary ones
eliminate plan altogether contains irremediable aw add
unique step unique causal link initial state establish open condition
cannot established way strategy closely related ones proposed
peot smith joslin pollack generally appears perform better

describe two classes techniques section section
report experimental slightly modified versions ucpop
dicult taken available ucpop test suite elsewhere obtain
improvements factors ranging hardest
giving greatest improvements
turn proposal computed operator parameter domains
particular section motivate describe method precomputing parameter domains propagating sets constants forward initial
conditions process iterative runs within time bound
polynomial size specification provide details
along theorems correctness tractability sections online
appendix
section use parameter domain information ucpop style planner parameter domains used prune operator instances whose
parameter domains inconsistent binding constraints eliminate spurious
threats cannot fact realized without violating domain constraints illustrate
effectiveness technique examples drawn ucpop test suite well
trains transportation world developed rochester allen schubert
allen et al tests apply parameter domain information
context default ucpop search strategy demonstrate significant gains
particularly challenging ones e g speedups order
magnitude several strips world fold speedup
trains
another set tests trains world use improved search strategies
baseline e ask whether additional speedups obtainable use parameter
search strategy described ida search penberthy weld code
ucpop described generally best first since arbitrary ranking functions necessarily
corresponding heuristics may plugged choices oc oc uc
plan ranking heuristic discussed section natural view strategy strategy
techniques describe applicable planners focus ucpop
well known lisp code readily available system obtained via anonymous ftp
cs washington edu
hope notion parameter domain set admissible bindings constants cause
confusion notion domain specified set operators along constraints
admissible initial conditions goal conditions



fiaccelerating partial order planners
domains obtainable oc zlifo search strategies experimental speedups factor use parameter
domains top obtained improved search strategies combined speedup

evidence effectiveness parameter domains combination
search strategy dependent peculiarity latter include
ucpop default strategy joslin pollack least cost aw repair lcfr
strategy joslin pollack peot smith least commitment lc open
condition selection strategy peot smith section
section state conclusions comment related work mention
possible extensions techniques

plan selection goal selection

basing discussion experiments ucpop exemplifying
state art well founded partial order thus begin sketch
referring reader barrett et al penberthy weld details
next two subsections motivate describe improved plan selection
goal selection strategies

ucpop

ucpop uses strips operators positive negative preconditions positive

negative effects initial state consists positive predications constant arguments
ground predications false default unlike strips ucpop
allows conditional effects expressed part clauses specifying possibly complex
extra condition needed effect possibly complex effect instance
action puton x z put x z might conditional effects stating
table clear end action z
table clear end action u ucpop indicates
universally quantified conditions effects permitted well instance
permissible precondition pickup x action says
x holds universal statements handled explicit substitution domain
constants need concern us point
essence ucpop explores space partially specified plans paired
agenda goals still satisfied threats still averted initial plan contains
dummy start action whose effects given initial conditions dummy
end action whose preconditions given goals thus goals uniformly viewed
action preconditions uniformly achieved effects actions including
start action
plans consist collection steps e actions obtained instantiating available operators along set causal links set binding constraints
set ordering constraints open goal precondition selected
agenda established possible adding step effect unifies
goal existing step effect unifies goal
latter case must consistent current ordering constraints place existing


figerevini schubert
step goal e step whose preconditions generated goal
existing step used establish goal way several side effects
causal link q added indicates step producing
goal condition q indicates step consuming q causal link serves
protect intended effect added reused step interference
steps
binding constraints added corresponding unifier action effect
question goal precondition achieves
ordering constraint added placing step question step whose
precondition achieves
action question preconditions added agenda
goals except eq neq conditions integrated binding constraints see

threats unsafe conditions determined step causal link
steps threaten causal link effects unifiable condition
protected causal link effects occur temporally causal
link effects step may similarly threaten causal links
case threats placed agenda useful distinguish definite
threats potential threats former unification
confirmed threat involved binding variables
binding constraints assert identity eq nonidentity neq two variables variable
constant eq constraints arise unifying open goals action effects neqconstraints arise neq preconditions newly instantiated actions ii matching
negative goals containing variables initial state iii averting threats
separation e forcing non equality two variables variable constant
unified threat detection neq constraints may disjunctive handled simply
generating separate plans disjunct
overall control loop ucpop consists selecting plan current list
plans initially single plan start end selecting goal threat
agenda replacing plan corresponding refined plans agenda item
goal refined plans corresponding ways establishing goal
existing step agenda item definite threat causal link q
three refined plans two constrain threatening step
step demotion step promotion thus averting threat
third possibility arises effect threatening q conditional effect
threatening action conditional threat averted creating goal denying
precondition needed conditional effect
ucpop delay separation switch sep turned
definite threats dealt note potential threats may become definite
added binding constraints may expire added binding
ordering constraints e threatening effect may longer unify threatened
condition may forced occur threatened causal link expired
p

c

p

c

p

p

c

p



c

c

fiaccelerating partial order planners
threats removed agenda selected sep potential threats
well definite ones averted separation additional method
besides three methods
inconsistencies binding constraints ordering constraints detected
first occur adding constraint corresponding plans eliminated fails plans remain success condition creation plan
consistent binding ordering constraints empty agenda
allowance conditional effects universal conditions effects causes
minor perturbations operation ucpop instance conditional effects lead
multiple matches operators given goal match generating different
preconditions course multiple matches even without conditional effects
predicates occur effects
key issues us right strategic ones plans selected
current set plans discussed section goals selected given plan
discussed section

trouble counting unsafe conditions

choice next plan refine ucpop system best first
search recall uses heuristic estimate f p overall solution cost consisting
part g p cost current partial solution plan p part h p estimate
additional cost best complete solution extends p current context
helpful think f p measure plan complexity e good plans simple
low complexity plans
two points reader reminded first order
guarantee discovery optimal plan e admissibility condition h p
overestimate remaining solution cost nilsson second aim
necessarily optimal solution satisfactory solution quickly f p
augmented include term estimates remaining cost finding solution
one common way use term proportional h p well e
emphasize h component f relative g component reasonable
extent plans nearly complete indicated low h value likely
take least effort complete thus prefer pursue plan p seems closer
complete plan p completion even though overall complexity
estimate p may greater p nilsson alternatively
could add heuristic estimate remaining cost finding solution f p
less independent estimate h p
considerations mind evaluate advisability including
terms ucpop function guiding search namely
oc cl uc
number steps partial plan oc number open conditions
unsatisfied goals preconditions cl number causal links uc
number unsafe conditions number pairs steps causal links step


figerevini schubert
threatens causal link default combination used ucpop oc uc
becomes oc uc f special open conditions called facts present
conditions state dependent e g numerical relation add one x
geometrical one loc room x room established lisp functions
barrett et al since test involved facts discuss
f term except say followed ucpop default strategy including
term relevant see tileworld section remarks
section connection parameter domain experiments
number steps currently plan

naturally viewed comprising g p plan complexity far intuitively
plan complex extent contains many steps domains might
want make distinctions among costs different kinds steps simple step count
seems reasonable generic complexity measure
oc number open conditions

viewed playing role h p since remaining open condition must
established step catch may possible use existing steps
plan including start e initial conditions establish remaining open conditions
thus oc overestimate number steps still added forfeiting admissibility
despite criticism several considerations favor retention oc term first
better estimator residual plan complexity seems hard come perhaps one could
modify oc discounting open conditions matched existing actions
presumes open conditions actually achieved action use
improbable remaining threats remaining goals requiring steps second
possibility oc overestimate residual plan complexity rarely actualized since typically steps still need added achieve goals
steps typically introduce open conditions requiring steps finally extent oc times overestimate residual plan complexity
viewed emphasizing h p term f p thus promoting faster solving
explained
cl number causal links

one might motivate inclusion term arguing numerous causal links
indicative complex plan cl appears alternative step counting
way recommended strategy ucpop implementation makes available
options controlling search used discretion experimenters present work
prompted incorporation particular strategies option ucpop
note threats remaining goals impose constraints may consistent seemingly
possible instances action use clear enough threats often imply temporal ordering
constraints inconsistent use action fairly clear remaining goals instance
towers hanoi small disk initially medium disk turn big disk
peg p goal move tower third peg p seems ucpop initially
could achieved use start however third goal
p implies actions must added plan inconsistent two
seemingly possible instances action use



fiaccelerating partial order planners
however note cl general larger since every step plan establishes
least one open condition thus introduces least one causal link larger cl
relative subgoals achieved action use hence use cl instead
addition g p term would effect saying achieving multiple
subgoals single step undesirable would tend search ways achieving
multiple goals multiple steps even achieved single step
clearly good idea justifies exclusion cl f p
uc number unsafe conditions

note first clearly g measure number threats
tend increase establish subgoals without curtailing threats threats
elements plan constructed contribute
complexity fact plan done threats gone
uc viewed h measure one argument sorts armative
following partial plans expandable complete plans high value
uc makes likely partial plan contains irresolvable con icts regard
impossible plans infinite cost inclusion term increasing uc part
h measure reasonable carries serious risk though since case
partial plan consistent completion despite high uc count inclusion
term greatly overestimate residual plan complexity
another possible armative argument conditional threats sometimes resolved
confrontation introduces goal denying condition required threatening conditional effect goal may turn require steps achievement
adding plan complexity however link complexity tenuous first
place many ucpop test domains involve conditional effects threat removal
promotion demotion separation adds steps even conditional effects
present many unconditional well conditional threats averted methods
furthermore uc could swamp terms since threats may appear expire
groups size n n number steps plan instance consider
partial plan involves moves robot r locations l ln
n causal links labeled r l r ln move location l
added initially indefinite point departure x produces effects
r l r x latter threaten n causal links
least move first temporally unordered relative n existing moves
action subsequently happens demoted precede first move
promoted follow last x becomes bound constant distinct
l ln n threats expire keeping mind different steps plan may
similar effects see half steps could threaten causal links
others case could n unsafe conditions destined expire
n promotions demotions fact even single binding constraint may cause
n threats expire instance n effects p x threatening
n causal links labeled p binding constraint neq x added n
threats expire recall expired threats selected agenda ucpop
recognized discarded without action


figerevini schubert
conclusion would mistake include uc full general h measure
though increasing function uc remains small enough mask oc may
worth including h
finally uc regarded measure remaining cost finding solution
similar arguments apply armative side argue
high value uc indicates may facing combinatorially explosive timeconsuming search set promotions demotions produce con ict free step
ordering words high value uc may indicate high residual solving
cost end search may still lack solution viable step
ordering exists hand already noted unsafe conditions include
many possible con icts may expire subsequent partial ordering choices
variable binding choices specifically aimed removing con icts counting
unsafe conditions arbitrarily overestimate number genuine refinement steps
hence solving effort still needed complete plan
uc scarcely trustworthy measure residual cost
measure residual plan cost
thus conclude promising general heuristic measure plan selection
oc possibly augmented attenuated form uc term dominate
oc component instance one might add small fraction term
uc subtly avoid swamping quadratic component term proportional
uc


goal selection strategy

important opportunity improving performance independently domain
lies identifying forced refinements e refinements made deterministically
specifically considering possible refinements given partial plan makes sense
give top priority open conditions cannot achieved preferring open
conditions achieved one way addition action
yet plan unique match initial conditions
argument giving top priority unachievable goals plan containing
goals eliminated thus prevent allocation effort refinement
doomed plans generation refinement doomed successor plans
argument preferring open conditions achieved one way
equally apparent since every open condition must eventually established
action follows action unique must part every possible completion
partial plan consideration adding action zero commitment
refinement involving choices guesswork time adding refinement
general narrows search space adding binding constraints ordering constraints
threats constrain existing steps subsequently added steps unique
refinements narrowing monotonic never needing revocation example
suppose refinement happens add constraints eliminate certain action instance
possible way achieving certain open condition c refinement unique
assured completion plan contains way establishing c
unique assurance since alternative refinement may


fiaccelerating partial order planners
compatible use achieve c short zero commitment strategy cuts
search space without loss access viable solutions
peot smith studied strategy preferring forced threats unforced
threats used least commitment lc strategy handling open conditions
least commitment selects open condition generates fewest refined
plans thus entails priorities unachievable uniquely achievable goals
entailing certain prioritization nonuniquely achievable goals joslin
pollack studied uniform application strategy threats open
conditions ucpop terming strategy least cost aw repair lcfr combining
ucpop default plan selection strategy obtained significant search reductions
though less significant running time reductions mainly implementation reasons
intrinsic overhead computing repair costs majority
ucpop test suite
joslin pollack subsequently srinivasan howe proposed
variants lcfr designed reduce overhead incurred lcfr aw selection
strategies employ assumptions aw repair costs allowing
arduous forms cost estimation requiring look ahead generation plans confined
subset aws plan rest approximation used
significantly increase overhead teams obtained quite significant reductions
overhead costs many cases e g factors ranging
dicult however overall performance sometimes adversely affected
joslin pollack found variant qlcfr solved fewer lcfr
increase number plans generated cases srinivasan
howe four strategies slightly better lcfr domains
significantly worse others terms plans examined search best
overall strategy uses similar action instances similar aws slightly better
domains slightly worse significantly worse cases
number plans examined factor default ucpop
unmodified form ucpop goals selected agenda according
lifo last first e stack discipline experience search processes
ai general strategy much recommend simple default
first place overhead cost low compared strategies use heuristic evaluation
lookahead prioritize goals well tend maintain focus achievement
particular higher level goal regression much prolog goal chaining rather
attempting achieve multiple goals breadth first fashion
maintaining focus single goal advantageous least
goals achieved independent instance suppose two goals g g
achieved ways choosing particular method achieving g
rule methods achieving g maintain focus g
solved attempting g total cost solving goals sum
costs solving individually switch back forth solutions
goals involve searches encounter many dead ends combined cost
much larger tend search unsolvable subtree g search
tree repeatedly combination alternatives g search tree vice
versa argument still validity even g g entirely


figerevini schubert
independent e long g gives rise subproblems tend fail
way regardless choices made attempt solve g vice versa shifting
attention g g tend generate set partial plans unnecessarily
cross multiplies alternatives
therefore chosen stay ucpop lifo strategy whenever
zero commitment choices led substantial improvements lcfr
experiments
thus strategy term zlifo zero commitment last first chooses
next aw according following preferences
definite threat sep turned lifo pick among
open condition cannot established way
open condition resolved one way preferring open conditions
established introducing action established
start
open condition lifo pick among
hence overhead incurred zlifo aw selection limited open conditions lower overhead incurred lcfr furthermore
significantly lower practice overhead incurred lc testing
whether oc zero commitment choice e whether established
one way less expensive computing total number ways achieve
online appendix give pseudocode zlifo selection open
condition preferences recently implementation packaged
ucpop version ucpop available anonymous ftp cs washington edu

experiments ucpop

order test ideas modified version ucpop barrett et al replacing default plan selection strategy oc uc goal selection strategy lifo
incorporate strategies discussed previous sections
tested modified planner several ucpop suite emphasizing
proved challenging previous strategies artificial
due kambhampati et al trains transportation domain developed
rochester allen schubert allen et al joslin pollack tileworld
domain joslin pollack brie describe test platforms
parameter settings used present experimental improved
search strategies
zero commitment choices experiments described next section
sub preference gave improvements context russell tire changing domain particular
fix without significant deterioration performance domains



fiaccelerating partial order planners

test experimental settings

ucpop include towers hanoi h fixa fix fixit tower invert
test ferry sussman anomaly case h added operator version
ucpop single operator version since h particularly hard ucpop
diculty long known sensitive formalization e g green
fixa dan weld fridge domain compressor
fridge exchanged requiring unscrewing several screws stopping fridge
removing backplane making exchange fix stuart russell tire
domain wheel mounted lowered ground old wheel
jacked already nuts loosened requires unscrewing nuts holding
old wheel removing wheel putting wheel screwing nuts jacking
hub tightening nuts fixit complicated wheel yet
jacked initially nuts yet loosened spare tire needs ated
jack wrench pump need taken trunk stowed
end tower invert blocks world requiring topmost block stack
four blocks made bottom test ferry simple requiring two cars
moved b one car ferry boarding sailing unboarding
car
artificial correspond two parameter settings art one
two artificial domains served testbed kambhampati et al extensive
study behavior strategies function parameters
kambhampati et al art provides two layers operators
layer achieve preconditions layer operator
layer achieves one goals however operators layer establish
clobber preconditions neighbors force operators used
certain order
version trains domain encoded involves four cities avon bath
corning dansville connected four tracks diamond pattern fifth city elmira
connected corning fifth track available resources located
cities consist banana warehouse orange warehouse orange juice factory three
train engines coupled cars boxcars suitable transporting oranges
bananas tanker car suitable transporting orange juice goals typically
deliver oranges bananas orange juice city requiring engine car coupling car
loading unloading engine driving possibly oj manufacture
tileworld domain consists grid holes tiles scattered given
tile may may fit particular hole goals fill one holes
three possible actions picking tile going x location grid
dropping tile hole agent carry four tiles time
formalizations domains terms ucpop language provided online
appendix experiments except fixit trains
tileworld conducted sun lucid common lisp
rest tables x xi next subsection conducted sun allegro
common lisp judging repeated experiments think
est

est

clob



clob

figerevini schubert

goal selection plan selection cpu sec
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc






plans






table performance plan goal selection strategies h
differences platforms significantly impact performance improvements among
search control functions provided ucpop used default bestf search
solvable within search limit plans generated used
function id bf search implementation linear space best first search
given korf limit exceeded experiments delayseparation switch sep except lcfr strategy

experimental zlifo oc

tables xi cpu time seconds number plans created explored
ucpop twelve domains described towers hanoi three
disks one operator h three operators h fridge domain
fixa tire changing domain fix fixit blocks world tower invert
sussman anomaly ferry domain test ferry artificial domain art
specifically art art trains domain trains trains trains
tileworld domain tw tw number plans created explored
cpu time important performance measures number plans indicates
search space size stable measure sense depends search
implementation time still interest since improvement
search may purchased price time consuming evaluation
alternatives turns pay price overhead substitute
strategies defaults factors ranging rarely higher per plan
created may due slightly greater inherent complexity zlifo versus lifo
think differences could reduced substituting modified data structures
ucpop committed altering
tables ii h plan selection strategy oc gives dramatic
improvements default oc uc strategy tests default lifo goal
selection strategy used fact ucpop solved h seconds oc
versus seconds oc uc h proved harder solve h reest

clob

differences available different times locales course
nearly two years experimentation
choice motivated observation relatively easy solve
bestf search appears ecient id bf search hard
inecient considerable amount space used run time cpu time spent
garbage collection cases made lisp crash reporting internal error
worth noting number plans created implicitly takes account plan size since
addition step plan counted creation plan ucpop



fiaccelerating partial order planners

goal selection plan selection cpu sec plans
lifo
oc uc

lifo
zlifo
zlifo

oc
oc uc
oc










table ii performance plan goal selection strategies h

goal selection plan selection cpu sec
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc






plans






table iii performance plan goal selection strategies fixa
quiring seconds oc unknown time excess cpu seconds
oc uc
zlifo goal selection strategy significantly accelerate compared
simple lifo strategy particular zlifo combined oc planselection strategy solving h reduced number plans generated
factor h factor h overall performance improvement
h thus factor terms plans created factor terms
cpu time seconds
tables iii viii provide data easier h still challenging ucpop operating default strategy namely fixa table iii fix table iv
tower invert table v test ferry table vi artificial domain art
table vii table vii
combination oc zlifo substantially improves
performance ucpop comparison performance oc uc lifo
number plans generated dropped factor fixa factor
est

est

clob

est

goal selection plan selection cpu sec
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc






clob

plans






table iv performance plan goal selection strategies fix



clob

figerevini schubert

goal selection plan selection cpu sec plans
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc











table v performance plan goal selection strategies tower invert

goal selection plan selection cpu sec plans
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc











table vi performance plan goal selection strategies test ferry

goal selection plan selection cpu sec
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc






plans






table vii performance plan goal selection strategies art
averaged
est

clob


est

clob

goal selection plan selection cpu sec
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc






plans






table viii performance plan goal selection strategies art
averaged
est

clob



clob

goal selection plan selection cpu sec plans
lifo
lifo
zlifo
zlifo

oc uc
oc
oc uc
oc











table ix performance plan goal selection strategies sussman anomaly


est

fiaccelerating partial order planners



fixit
trains


h

performance
improvement






art fixa
search space reduction
art
fix
speedup
tower invert
test ferry
sussman anomaly

e


e
size





figure performance improvement due zlifo oc relative number
plans generated lifo oc uc log log scale improvements
ucpop unable solve even high search limit
trains trains h included
fix factor tower invert factor test ferry factor
art factor art
concerning art note performance obtained unenhanced
ucpop plans generated art art much
marginally better reported kambhampati et al best planners
considered plans generated art art
expected since ucpop generalization earlier partial order planners
relative standard ucpop predecessors accelerated planner thus order
magnitude faster interestingly entire improvement ascribed zlifo
rather oc plan selection actually little worse oc uc
probably due unusual arrangement operators art clobbering chain clobbers preconditions clobbers preconditions
similarly makes immediate attention unsafe conditions unusually
good strategy
experimenting combinatorially trivial unmodified ucpop
handles ease found oc zlifo strategy neither beneficial
harmful general may slight improvement slight degradation performance sussman anomaly table ix provide illustrative example
summarize tables x figure showing performance improvements obtained combined zlifo goal selection strategy oc plan selection
est

clob

est

n



n









clob


figerevini schubert

zlifo
oc
lc
oc
lcfr
oc
lifo
oc uc

trains

trains

trains

fixit

plans



time




plans



time




plans




time




plans

time





table x performance plan selection strategy oc combination goal
selection strategies zlifo lcfr lc solving
hard default strategies ucpop oc uc lifo cpu seconds
include lisp garbage collection number plans generated lcfr
include created order estimate repair cost aws


zlifo
lcfr
name cpu time plans cpu time plans
tw
tw
tw
tw
tw
tw





























table xi performance ucpop tileworld domain zlifo lcfr
goal selection oc f uc plan selection
strategy function diculty indicated number plans generated
default lifo plus oc uc strategy trend toward greater speedups
complex though somewhat dependent type quite apparent
log log plot
direct comparison joslin pollack lcfr strategy peot smith
lc strategy implemented strategies applied several
well sometimes better zlifo lower end diculty
spectrum poorly harder ran lc
sep switch performed better lcfr terms plans explored cpu
time required h lcfr combination default oc uc plan
selection strategy oc plan strategy solution within search
limit plans generated cf zlifo oc zlifo
oc uc requiring unknown cpu time excess seconds oc uc


fiaccelerating partial order planners
excess seconds oc cf seconds zlifo oc
lc performed much better lcfr still considerably worse zlifo solving
h generating exploring plans oc plans
oc uc requiring cpu secs cpu secs respectively ofh lc found solution generating exploring plans oc uc
plans oc requiring cpu secs cpu secs
respectively
table x shows plan strategy oc goal strategies zlifo
lcfr lc applied three trains trains fixit shown data
table hard default strategies ucpop lifo oc uc
become relatively easy oc used combination zlifo lcfr
lc lcfr lc slightly better zlifo trains easiest
performed quite poorly fixit trains trains hardest
compared zlifo
joslin pollack tested lcfr strategy six tileworld
tw tw five hard default ucpop easy ucpop
lcfr tested zlifo strategy tileworld six
zlifo well tw tw tw performance dropped well
lcfr raised question whether particular crucial
minimize repair cost aw selection uniformly rather certain special cases
zlifo minimize repair cost threat aw list least one zerocommitment open condition present however experiments aimed answering
question suggested poor choices made zlifo tileworld
due selection high cost low cost aws instead two factors appear
crucial improving zlifo emphasizing zero commitment open conditions giving
higher priority threats b zero commitment open conditions
resolving threats soon enter agenda realized relevance b
observing performance modified versions lcfr sep switch
implicitly forced dramatically degraded tw slightly different formulation
tileworld
extended zlifo strategy include b brie tested
resulting variant zlifo zlifo table xi shows zlifo together
plan selection strategy oc uc f discussed section included
attenuated form uc term uc f term equal number facts
since tileworld uses facts track number tiles carried agent zlifo
sep turned implicit setting lcfr joslin experiments
tested variant lcfr switch forced resulting goal strategy
combination plan strategy oc performed significantly better h solving
generating exploring plans cpu seconds note comparison
implementation lcfr joslin pollack implementation used experiments discussed
joslin pollack showed implementation considerably faster joslin
experiments tw easiest among tw solved ucpop even allowed run
eight hours hand ucpop lcfr solves tw hardest without
ever reaching dead end node search tree
zlifo experiments refined plans generated resolving threat added aw list
following order first plan generated promotion plan generated demotion
finally plan generated confrontation separation



figerevini schubert
performed eciently six tileworld fact little better lcfr
note zlifo ecient lcfr terms cpu time
even though number plans generated explored two strategies approximately
overhead selecting next aw handled higher
lcfr zlifo zlifo fact lcfr needs compute repair
cost aw including threats current plan zlifo zlifo needs
check presence zero commitment open conditions without processing threats
additional experiments indicated average performance zlifo comparable
zlifo used experiments terms
plans created explored however cpu time tends increase since overhead
computing goal selection function higher zlifo zlifo
extra agenda management costs overhead regard zlifo
generally preferable zlifo however tileworld experiments underscored us
worlds refinements zlifo advantageous
finally another possible variant zlifo suggested us david smith
following preferences next aw handled threat cannot
resolved ii open condition cannot established iii threat
one possible resolution iv open condition established one way v
threats vi open conditions lifo pick among observe
strategy could give savings terms plans created explored
imposes additional overhead respect zlifo zlifo could
degrade performance terms cpu time

precomputing parameter domains

even speedups obtained improved search ucpop remains
severely limited complexity solve believe significant
progress requires fuller use global properties search space determined
structure operators initial conditions goals one way would
depth analysis alternatives search lead high
overhead costs another precompute constraints search space use
prune search parameter domain method motivate
describe latter type

parameter domains help

previous experimentation ucpop strategies found ucpop goal regression often hypothesized steps doomed abandoned eventually
stipulated impossible parameter bindings clear example occurred molgen
domain encoded ucpop test suite goal rat insulin test
bacterium b molecule
contains ig contains b pure b



b existentially quantified variables means wish
create purified bacterial culture b b contains molecule necessarily


fiaccelerating partial order planners
exosome turns molecule turn contains insulin gene ig
abbreviations ig ee je l insulin gene e coli exosome junk exosome
linker e j e coli junk antibiotic roughly speaking solution
involves processing initially given mrna form insulin gene produce
form insulin dna spliced e coli exosome ligate operator
turn exosome inserted e coli bacterium transform operator
bacterial culture purified screen operator antibiotic junk
bacterium exosome merely serve complicate task nearly quite
substitutable e coli bacterium exosome junk exosome unlike e coli exosome
resistant antibiotic violating precondition screen
initial regression goals bacterium b molecule
established start operator e initial conditions thus
instantiated bizarre values initial conditions supply e j
instances bacterium ig ee je l instances molecule
hand remaining goals turn match effects instances
ligate transform screen operators molgen follows
contains ig ligate ig transform ig
contains b ligate b transform b
pure b
screen b z



ucpop happily regress actions yet two

transform ig
doomed fail perhaps great deal effort expended
trying satisfy preconditions particular examination constants
ow transform operator initial conditions molgen operators
shows first argument restricted domain fee jeg e must one
given exosomes second restricted fe jg e must one
given bacteria consequently instance transform ig unrealizable first
argument ig fee jeg note distinct constants denote distinct entities
according unique names assumption made ucpop ligate b action
doomed slightly subtle reasons match contains
b clause conditional effect ligate operator whose preconditions
reached second parameter b lies set molecules fig je eeg
yet b restricted set bacteria fe jg goal condition
bacterium b fact sets disjoint allow us eliminate
transform ig action
note elimination action candidates increases number zero commitment plan refinements made example left exactly one
action three goals zlifo lcfr strategies prefer
regress goals rather regressing bacterium b molecule
would prematurely make arbitrary choices b initial state
ligate b

description

completed plan precondition action must instantiated effect
earlier action values parameters action values


figerevini schubert
produced earlier actions starting initial action start moreover
suppose parameter x certain action occurs preconditions p pk
constant c possible value x earlier actions instantiate x c
p pk
parameter domains observations beginning
initial state propagates positive atomic predications possible operator preconditions propagated ground atom atom matches operator precondition
adds constants ground atom individual domains
parameters unified individual domains particular specific preconditions instance individual domain x operator preconditions
x clear x general distinct two preconditions
soon nonempty individual domains parameters preconditions
operator form intersection individual domains parameter
operator example x far matched b
b c clear x far matched clear clear table
individual domain x fa bg first precondition fa tableg
second thus assuming preconditions intersected domain
x fag point later clear b matched clear x
intersected domain x grow fa bg x nonempty
intersected domains effects postconditions operator turn propagated
x bound intersected domains
propagated effects matched possible operator preconditions
variable bound intersected domain successfully unified variable precondition passes intersected domain individual domain
precondition variable via union operation lead growth intersected domains operator whose precondition matched effects operator
may propagated individual domains intersected domains grow
monotonically propagation process end represent desired parameter domains operators
illustrate process example consider simple
depicted figure operator graph smith peot used describe
logical dependencies among operators iterative computation parameter
domains graphically illustrated domain propagation graph operator
graph
initial conditions p p b unify precondition p x op
individual domain x relative precondition p op fa bg
hand precondition q x op cannot satisfied initial state
individual domain x relative q initially empty set hence intersected domain
x op empty set
op different situation since one precondition
established initial state therefore individual domain relative
precondition r op set constants fb cg intersected domain
op set r precondition op involving since
intersected domain enlarged initially empty propagated
individual domains operators effect q op particular


fiaccelerating partial order planners

p x

indicates bundle edges
op

q x
b

start
r

end

op
init state p p b r b r c c
z

op

preconds p x q x

goal b

op
op

preconds r

op

preconds z
effects z

effects q

effects x

p
p x
q x

id x b

id x
op

p b

q x

op
id p x b
id q x b c

id p x b
id q x
q
id b c

r b
r
r c

x

op
id r b c

id z


z

id z b

op

z

id z

op
id z b

figure operator domain propagation graphs simple
id x p indicates individual domain parameter x relative precondition p id x indicates intersected domain parameter x final
intersected domains indicated bold fonts
matches precondition q x op individual domain x relative
precondition q op updated adding constants intersected domain
thus intersected domain x enlarged fbg propagated
effect x op
similarly propagation x enlarge individual domain z op
intersected domain set fa bg therefore final intersected domains
fbg x op fb cg op fa bg z op
presenting little formally note parameter domains sometimes large including values would found impossible
q



figerevini schubert
detailed state space exploration conducted however required
soundness use domains small e
contain parameter values actually occur consideration
course practical use parameter domains operator exclude
constants occurring specification particularly
intuitively obvious wrong sort fill particular argument slots
operator turned case domains far
experimented
preceding sketch method oversimplification since preconditions
effects ucpop operators may particular clause case compute
individual domains intersected domains separately clause example
consider following schematic representation operator
define operator op
parameters x
precondition p p
effect e e



pe
p e

conditions starting p e denote atomic formulas may involve x
think operator consisting primary clause whose preconditions
p p must satisfied whose effects e e asserted
two secondary clauses whose respective preconditions p p may may
satisfied corresponding effects e e asserted
would maintain individual domains x preconditions
p p p p would maintain intersected domains x
primary clause two secondary clauses intersected domains
secondary clauses would individual domains x
relative p p relative p p since noted primary
preconditions must hold operator effects including conditional
effects
complications arise ucpop operators contain universally quantified preconditions effects disjunctive preconditions facts mentioned section
rather dealing complications directly assume operators occur input later describe semi automated way
handling operators containing additional constructs
outlined detailed description given online appendix w list names clauses whose effects propagated
individual parameter domains initially nil intersected parameter domains initially nil universal domain intersected domain
parameter relative given clause case parameter occurs neither
preconditions clause primary preconditions case
successful instantiation clause clearly independent choice value
parameter question unification step usual except
effect variable v unified constant c precondition unification succeeds


fiaccelerating partial order planners
unifier v c case c element intersected domain v relevant clause given inits initial conditions goals may omitted
e nil treated operator start preconditions operator end
effects variables goals treated operator parameters use terms
parameters variables interchangeably
parameter domains operators inits goals
initialize w initial conditions contains primary clause
start
repeat steps c w nil
unify positive effects clauses w possible operator
preconditions mark preconditions successfully matched way
matched marking permanent augment individual domain
matched precondition variable certain set c constants defined
follows precondition variable unified constant c c fcg
unified effect variable c intersected domain
effect variable relative clause effect belongs
b mark clauses propagation candidates preconditions including corresponding primary preconditions marked matched
involve least one variable relevant individual domain
augmented step
c reset w nil clauses propagation candidates compute
intersected domains variables intersected domain whenclause thereby enlarged intersected domains clause
nonempty add clause w
restrict intersected domains equative preconditions form eq u v
e form common intersected domain u v variables u
constant v variable reduce intersected domain v intersecting
fug similarly u variable v constant equation belongs
primary clause use reduce intersected domains u v whichever
variables secondary clauses well
return intersected domains parameter domains producing sequence
lists list form
op x b c x b c
operator op appears least op k conditional effects
k successive lists headed op first provides parameter
domains primary effects op rest provide parameter domains
conditional effects order appearance ucpop definition op
note match propagate negative conditions negative
conditions large number may implicit initial conditions given


figerevini schubert
use closed world assumption ucpop instance world n blocks
n relations assuming block one block
necessarily n implicit relations fact individual variable
domains negative preconditions goals really infinitely large instance given
empty initial state paint red x operation precondition red x
effect red x achieve red c infinitely many constants c perhaps
negative conditions could effectively dealt maintaining anti domains
explored since practice ignoring negative conditions seems cause
minimal domain bloating proved actual domain elements
lost neglect preconditions
use eq conditions could refined making use propagation
process neq conditions could used however would probably
marginal impact
final comment note output format specified step
actually generalized implementation report inaccessible preconditions
goals inaccessible conditions simply appended list parameter
domains appropriate clause appropriate operator instance
preconditions oj oj oj city ld oj load orange juice operator
trains world see online appendix unreachable say oranges
producing orange juice provided parameter domain list unique
clause ld oj appearance
ld oj oj car city oj oj oj city
feature turns useful debugging operator specifications detecting
unreachable goals

correctness tractability

keeping remarks previous section call computing
parameter domains correct domains computes subsume possible parameter values
actually occur given primary secondary clause consider
possible sequences operator applications starting given initial state
point property maintain soundness
uses precomputed parameter domains prune impossible actions well spurious
threats partially constructed plan assert following

theorem parameter domains correct computing parameter

domains ucpop style sets operators without quantification disjunction facts
initial conditions possibly goal conditions
proof given appendix preliminary step establish termination
monotonic growth domains finiteness set constants involved correctness
established showing exists valid sequence actions
operator instances starting start instance operator
op bindings parameters op received instance eventually added
relevant intersected domains op relevant refers clauses op
whose preconditions satisfied beginning proved induction n
n

n

n

n



fiaccelerating partial order planners
indicate deal universally quantified preconditions effects
disjunctive preconditions facts make simple changes operator definitions
hand preparation parameter domain precomputation use domains
computed parameter domains together original operators running
planner steps preparing operator parameter domain precomputation
follows
delete disjunctive preconditions fact preconditions universally quantified preconditions includes universally quantified goals would include universally
quantified sentences embedded within antecedents clauses e g
manner forall x though occur
domains seen
drop universal quantifiers occurring positively operator effects e occurring
top level embedded one example effect
robot
robot
forall x
grasping x object x
x x

would become

robot
robot
grasping x object x
x x

note universally quantified variable renamed necessary
distinct variables operator parameters
example universally quantified variable unrestricted
quantified variable includes type restriction forall object x
type restriction needs become antecedent matrix sentence
example hand rewritten equivalent object x
since often clause done adding object x
conjunct antecedent clause cases conjunction
clauses case quantifier restriction added
clause antecedent
drop existential quantifiers preconditions goals adding restrictions
quantified variables conjuncts matrix sentence example goal
exists bacterium
exists molecule x
contains ig x
contains x
pure

e g strips world would drop fact
given coordinates lie given room

loc room x room



checks whether

figerevini schubert
becomes
bacterium molecule x contains ig x
contains x pure

actually dropped well supplying goals parameterdomains
reductions parameter domains compute correct parameter
domains operators goals see note first dropping preconditions initial step forfeit correctness since
weaken constraints admissible parameter values thus add constants
domains effect dropping universal quantifier perspective
parameter domains introduce parameter place universal variable operator normalization subroutine detects variables operator preconditions
effects listed parameters treats additional parameters
course drastic change meaning operator preserves correctness parameter domain calculation domain parameter
certainly contain constants hence closed world assumption objects quantified variable ranges example x treated parameter
rather universally quantified variable conditional effect
forall x object x x box
domain x clause consist everything object
state operator applied thus effect x box propagated objects required finally elimination existential quantifiers
preconditions goals seen preserve meaning preconditions
goals hence preserves correctness parameter domain calculation
next formally state tractability claim follows
tacit assumptions mentioned proof
theorem parameter domains implemented run mn n n
n time mn space worst case number constants
specification n combined number preconditions operators
goals included n combined number operator effects including
start
proof appendix time complexity parameter domains
determined sum cost unifications performed costs
individual domain updates attempted cost intersected domain
updates attempted space complexity bound easily derived assuming
fixed upper bound number arguments predicate precondition
effect fact clause constants
stored
adding additional data structures parameter domains obtain
version whose worst case time complexity slightly improved fact
step c instead propagating effects clause enlarged
p

e

p

p

e



e

p

fiaccelerating partial order planners
intersected domain e adding clause list w sucient propagate
effects clause involve enlarged intersected domain could
done setting clause table maps parameter list
effects clause involving parameter
improved use w store list effects instead list whenclauses propagated next cycle steps
parameter domains modified following way
initialize w list effects start
repeat steps c w nil
unify positive effects w possible operator preconditions mark
preconditions successfully matched way matched

b b
c reset w nil clauses propagation candidates compute intersected domains variables intersected domain
clause thereby enlarged intersected domains clause
nonempty add w subset effects clause
involving least one parameter whose intersected domain enlarged
note worst case time complexity revised improved
effect clause propagated times decreases upper
bound number unifications performed reducing complexity estimated step
proof theorem mn n hence proved following corollary
e

p

corollary exists improved version parameter domains
implemented run mn n time worst case
p

e

parameter domains accelerating planner

already used example molgen motivate use precomputed parameter
domains showing domains may allow us prune non viable actions
partial plan
fundamentally used time planner needs unify two predications involving parameter goal regression threat detection
case one predication sub goal effect action
initial condition unifier inconsistent parameter domain count
failure even consistent binding constraints current partial
plan inconsistency use unifier intersect thus refine
domains parameters equated unifier
example suppose g x precondition step current
plan e w z effect another possibly step x
w z parameters case w z existentially quantified variables
binding constraints associated current plan assume
domains parameters


figerevini schubert
x agent agent agent
w agent agent

city city
z city city

unification g e gives binding constraints f x w zg
viable parameter domains z empty intersection
hand domain z fcity city city g unification g e would judged viable domains parameters would
refined
x agent agent
w agent agent

city
z city

thus parameter domains incrementally refined search progresses
narrower become often lead pruning

incorporating parameter domains ucpop

preceding consistency checks domain refinements used partial order
causal link planner ucpop follows given goal open condition g selected
ucpop next aw repaired
restrict set operator instances ucpop would use establishing g
instance operator effect e matching g disallowed precomputed
parameter domains relevant e incompatible current parameter domains binding constraints relevant g note current parameter domains
associated g may refinements initial domains
restrict set existing steps ucpop would reuse establishing g reusing
step effect e matching g disallowed current parameter domains relevant
e incompatible current parameter domains binding constraints
relevant g
moreover given potential threat effect q protected condition p inspection
relevant parameter domains may reveal threat actually spurious
happens unifier p q violates possibly refined domain constraints
parameter p q thus often
reduce number threats generated planner causal
link introduced plan happens open condition established
reusing step introducing one
recognize threat list aws processed redundant allowing
elimination note since parameter domains incrementally refined
even use generation threats still possible
threat becomes spurious added aw list
four uses parameter domains cut search space without loss viable
solutions since options eliminated cannot lead correct complete plan


fiaccelerating partial order planners
note useful even planner deals definite
threats e sep switch turned least three reasons first determining
threat definite threat sep incurs overhead cost
earlier elimination spurious threat could lead considerable savings threat
delayed many times search second reason relates plan selection
strategies adopted one uses function includes attenuated term corresponding
number threats currently aw list eliminating spurious threats
advance give accurate measure badness plan finally parameter
domains could used threat processing prune search even dsep
particular suppose modify notion definite threat
parameter domains e g p x p comprise definite threat
parameter domains associated x c case even
sep may discover early threat become definite case might
forced threat e choice promotion demotion may dictated
ordering constraints prune search space however current
implementation exploit third point
incorporated techniques ucpop version along earlier
improvements plan goal selection strategies parameter domains handled
extension varset data structure weld include domains
variables parameters extending unification process implement
filtering discussed describe experiments enhanced system

experimental parameter domains

main goal overhead determined computing parameter domains significant preprocessing time time exploitation parameter domains significantly prune search
experiments used version parameter domains described section
online appendix note domains complex ones
considered might worthwhile use improved version discussed
section however remains seen whether significantly complex
consider solved ucpop style planner
cpu times needed implementation parameter domains negligible looked msec less many
ucpop test suite running compiled allegro cl sun msec
two fixa fridge repair domain fixit tire domain
msec trains world described
first set tests relied search strategy used default ucpop
function used plan selection thus oc uc f allowing
involve facts goals selected agenda according pure lifo
discipline
current implementation threats filtered protected condition established
step already plan
experiments sep switch default delay separation strategy selecting unsafe
conditions slightly modified version ucpop parameter domains particular



figerevini schubert
began experimenting variety ucpop test suite comparing performance without use parameter domains relatively easy
sussman anomaly fixa test ferry tower invert showed improvement use parameter domains particularly harder
ones solved easily parameter domains example rat insulin
molgen domain solved nearly twice fast strips world
move boxes variants towers hanoi h solved
times fast note strips world involve facts universally
quantified conditional effects two oce world oce oce
knew readily solvable improved search strategy remained dicult case oce unsolvable default ucpop strategy despite use
parameter domains experiments revealed source ineciency
default plan selection strategy ucpop fact oc f strategy
instead oc uc f without parameter domains oce oce solved generating exploring plans respectively parameter
domains plans numbered respectively
initial experiments suggested us promising application computed parameter domains would nontrivial involved variety types
entities relationships significant amounts goal chaining e successive
action establishing preconditions next perspective trains world
struck us natural choice experimentation additional advantage
design independently motivated rochester mixed initiative
solving natural language interaction refer formalization
online appendix recall table x trains extremely hard
unmodified ucpop requiring minutes generating million plans
running parameter domains produced solution seconds
plans generated e times faster
intuitively use parameter domains constrain analogous
type constraints parameters although parameter domains take account initial
conditions interest see whether adding type constraints provide similar
eciency gains use parameter domains first set experiments therefore
included trains typed version trains operators slightly changed
adding preconditions stating types parameters involved example
operator uncouple augmented preconditions engine eng
car car extremely hard unmodified ucpop exceeding
search limit plans generated requiring seconds
parameter domains solution obtained one second
threats resolved separation recognized redundant use
parameter domains selected eliminated
move boxes differs slightly move boxes ucpop suite goal room
box rclk move boxes differs slightly move boxes initial state contains two
boxes
oce directly ucpop test suite oce minor variant oce oce persons
furnished checks made check printer oce briefcase
picking checks bringing home sam sue given persons oce
added person alan person smith initial conditions



fiaccelerating partial order planners



without domains
domains
domain
plans
cpu sec
plans
cpu sec ratio
trains




trains





move boxes




move boxes





move boxes





move boxes





h



rat insulin





monkey test





monkey test





fix





oce


oce




tower invert





sussman anomaly





fixa





test ferry






table xii plans generated visited cpu time secs standard ucpop
without parameter domains obtained sun
lucid common lisp others sun allegro common lisp
indicate adding type constraints operator specifications
nearly effective use parameter domains boosting eciency
discuss point context second set tests
table xii summarizes experimental experiments used
default ucpop search strategy table gives number plans generated visited
planner cpu time seconds required solve note
use parameter domains gave dramatic improvements trains domain strips world domain rightmost column supplies domain ratio
data metric hoped would predict likely effectiveness parameter
domains idea parameter domains effective extent
filter many parameter bindings reached chaining back individual
preconditions operator initial state bindings found
variant propagating intersected domains instead propagates unions
individual domains comparing union domains intersected domains
systems compiled allegro cl settings space speed safety debug
run sun cpu time includes lisp garbage collection time given
output ucpop
actually need explicitly propagate union domains propagate partial bindings
one predication time starting initial conditions match predication possible
preconditions adding constant arguments contains union domains matched operator



figerevini schubert

trains
without domains
domains
domain

plans
cpu sec
plans
cpu sec ratio
trains





trains

trains

table xiii plans generated visited cpu time secs ucpop without
parameter domains trains domain zlifo strategy

trains without domains
domains
domain
plans cpu sec plans cpu sec ratio
trains




trains

trains

table xiv plans generated visited cpu time secs ucpop without
parameter domains trains domain lcfr strategy
domain ratio provides comparison dividing average union domain size
average intersected domain size averages taken parameters clauses
operators
largest speedups e g trains tend correlate
smallest domain ratios smallest speedups largest domain ratio unity
see last rows however seen table diculty
measured plans cpu time much useful domain ratio predictor
speedups expected parameter domains generate
order million plans standard ucpop tend produce speedups orders
magnitude whereas domain ratio e g move boxes
better even worse much smaller speedups e g move boxesa rat insulin monkey test monkey test much lower diculty
predicts reduced speedup complicate matters dicult give
high speedups see h especially oce know subtleties
structure account unusual cases
second round experiments tested effectiveness parameter domain
technique combination improved search strategy e oc zlifo addition combined oc lcfr least cost aw selection joslin pollack
clause corresponding partially bound effects add effects
list predications still propagated partially bound effect p x
identical similar predication p u v among previously propagated predications
among still propagated



fiaccelerating partial order planners

trains

without domains
domains
domain

plans
cpu sec
plans
cpu sec ratio
trains




trains




trains


table xv plans generated visited cpu time secs ucpop without parameter domains typed trains domain zlifo strategy

trains

without domains
domains
domain

plans
cpu sec
plans
cpu sec ratio
trains

trains

trains





table xvi plans generated visited cpu time secs ucpop without
parameter domains typed trains domain lcfr strategy
test possible sensitivity parameter domains technique precise strategy
used present set tests used search limit plans generated
began sampling ucpop test suite
initial trials yielded quite analogous default ucpop strategy
obtained improvements several easier significant improvements
harder ones e g close factor rat insulin noteworthy members
latter category oce oce recall oce shown little speedup
standard ucpop oce unsolvable however view computational
expense testing zlifo lcfr decided narrow focus
trains world mentioned advantages world inherent interest
relative complexity
tables xiii xvi provide experimental trains domain oc
zlifo strategy oc lcfr strategy case without parameter
domains
tables xiii xiv parameter domains still give
significant improvements performance obtained use
better search strategies example use parameter domains provided fold
speedup trains oc zlifo strategy particular speedup
metrics pruning plans half generated
search recognizing unsafe conditions redundant evidently
effect pruning amplified order magnitude overall performance
futile searches cut short note speedups trains


figerevini schubert
roughly comparable within factor obtained previous set
comparable initial diculty e g see move boxes move boxes table xii
points rather consistent correlation diculty speedups
obtainable parameter domains constant domain ratios compatible
less invariant speedups though little import given earlier
oc lcfr gains appear less though single showing
fold speedup provides anecdotal evidence conclusion trains
trains remained dicult solution lcfr similar gains observed
oc lc strategies best observed gain trains domain fold
speedup trains case confirm effectiveness parameterdomains technique
tables xv xvi typed version trains case parameter
typing gave modest improvements absence parameter domains contrast
trains default search strategy significant deterioration
presence know account detail seems
clear contrary effects involved one hand typing tend help
tends limit choices parameter values sensible ones example precondition
engine eng satisfiable use start initial state thus
constrain eng assume sensible values hand adding type preconditions
tend broaden search space adding open conditions aw list
lesson typed experiments appears best supply
explicit type constraints operator parameters instead automated method
calculating updating domains constrain parameter bindings

conclusions work

began exploring simple domain independent improvements search strategies
partial order described method precomputed parameter domains prune search space summarize conclusions techniques
point promising directions work

improving search

proposed improvements search strategies one hand carefully
considered choice terms heuristic plan selection
preference choosing open conditions cannot achieved achieved
one way default lifo prioritization open conditions since
plan refinements corresponding uniquely achievable goals logically necessary
termed latter strategy zero commitment strategy one advantage technique
similar strategies incurs lower computational overhead
experiments modifications ucpop indicate strategies give
large improvements performance especially hard
ucpop relatives begin best performance achieved
strategies plan selection goal selection used combination practical terms
able solve nearly every tried ucpop test suite fraction
second except fixit required seconds


fiaccelerating partial order planners
previously required minutes unsolvable machine included
sucient variety indicate techniques broad potential utility
suggest zero commitment best supplemented lifo
strategy open conditions achievable multiple ways rather generalization
zero commitment favoring goals fewest children somewhat surprising
might thought due way designer domain orders
preconditions operators e natural ordering preconditions may correlate
best order giving fortuitous advantage lifo strategy relative
strategy lc
however preliminary experiments performed randomized preconditions
h trains indicate otherwise randomizations preconditions
h lc zlifo slowed somewhat average factors
terms plans expanded cpu time used respectively cases
oc used plan search still left zlifo performance advantage
factor terms plans created terms cpu time trains
performance lc greatly deteriorated cases factor close terms
plans time zlifo actually improved marginally left
zlifo average performance advantage lc whereas slightly slower
unrandomized case factor terms plans terms cpu time
though values unreliable view fact standard deviations
order means
despite believe satisfactory understanding dependence
aw selection strategies order operator preconditions require extensive
experimental investigation currently undertaking work

parameter domains

described implemented tractable precomputing parameter domains
operators relative given initial conditions showed use precomputed domains process prune non viable actions bogus threats
update dynamically maximum effect
idea precomputed parameter domains constrain apparently
first proposed technical report goldszmidt et al contains essential
idea accumulating domains forward propagation initial conditions though
report sketches single sweep propagation process initial conditions
goals implemented rockwell planner rnlp handles cyclic operator graphs
repeatedly propagating bindings quiescence much
deals additional complexities conditional effects equalities semiautomated fashion quantification appears ecient smith
distinctive features work method incrementally refining domains
suggested us david smith well mike williamson williamson tried zlifo
randomized versions h reported large performance degradation williamson hanks
recently ran versions implementation obtaining far favorable
three five versions easier solve original version h two
versions slowed zlifo factor terms plans explored



figerevini schubert
theoretical analysis systematic experimental
tests
another closely related study yang chan used hand supplied
parameter domains much use precomputed domains interesting
aspect work direct use sets constants variable bindings instance
establishing precondition p x initial state containing p p b
p c would bind x fa b cg rather specific constant refine
noncommittal bindings much refine variable domains
periodically use constraint satisfaction methods check consistency current
eq neq constraints conclude delaying variable bindings works best
low solution densities degrading performance high
solution densities optimal frequency making consistency checks depends
whether dead ends tend occur high low search tree work distinguished
method precomputing parameter domains use specific bindings
matching initial conditions ocs use parameter domains threat detection
resolution handling enriched syntax ucpop operators compared
snlp operators
judging examples experimented techniques well suited
nontrivial involve diverse types objects relations actions significant logical interdependencies among steps needed solve used
conjunction default search strategy ucpop method gave significant speedups
nontrivial reaching speedup factor trains transportation domain hardest strips world tried
combined oc zlifo search strategies parameter domain technique
still gave speedups factor around trains though implementation aimed ucpop style planner essentially techniques would
applicable many planners
found parameter domain precomputations useful debugging
aid fact domain precomputation initial formulation trains world
immediately revealed several errors instance domain eng parameter
mv engine turned contain oranges bananas oj factory indicating need
type constraint eng without transportation would
solvable without benefit engines trains another immediately apparent
revealed parameter domains city city mv engine domain
city excluded elmira city excluded avon obvious diagnosis
neglected assert connected c c connected c c
track connecting two cities furthermore parameter domains quickly identify
unreachable operators goals cases instance without make oj operator
computed domains ld oj operator unreachable goal
oj oj oj bath getting orange juice bath unattainable
parameter domain oj empty
course running planner used debugging formalization
general far time consuming form preprocessing especially
goal pose happens unachievable formalization trace


fiaccelerating partial order planners
anomalous attempt quite hard interpret compared listing
parameter domains obtained fraction second

work

first additional experimentation would interest assess
perhaps refine search strategies experimentation might focus threathandling strategies including best general form attenuated uc term plan
selection best way combine threat selection open condition selection
preference definite threats open conditions used zlifo appear
good default according experience tileworld experiments indicated
ordering priorities threats open conditions sometimes desirable concerning choice uc related term inclusion heuristic plan selection
mention brie tried oc uc uc number
definite threats obtain significant uniform improvements
one promising direction development search strategy make
zero commitment strategy apply often finding ways identifying false options
early possible possible action instance obtained matching open
condition available operators well existing actions easily recognizable inconsistent current plan elimination may leave us single
remaining match hence opportunity apply zero commitment strategy
one way implementing strategy would check accepting
matched action possible way attain open condition whether temporal
constraints action force violate causal link alternatively force causal
link violated case action could immediately eliminated perhaps
leaving one even alternative could perhaps made even effective
broadening definition threats preconditions well effects actions
threaten causal links hence bring light inconsistencies sooner note
precondition action inconsistent causal link established
another action whose effects violate causal link precondition really poses
threat outset
two possible extensions parameter domain techniques fully automated
handling universally quantified preconditions effects disjunctions facts
preprocessing ii intelligent calculation domains applying
constraint propagation process sets ground predications matched
preconditions operator shown yield tighter domains though
computational expense blum furst recently explored similar idea rather
computing parameter domains directly stored sets ground atoms could
generated one operator application starting initial state two successive operator
applications used sets atoms exclusivity relations among
atoms actions connecting guide regressive search plan
describe allow conditional effects though generalization
appears entirely possible examples used tests obtained dramatic
speedups






figerevini schubert
finally working another preprocessing technique namely inference
state constraints operator specifications one useful form constraint implicational e g implies x clear another single valuedness
conditions e g x may single valued x conjecture
constraints tractably inferred used large speedups domainindependent well founded
view presented possibilities speedups
mentioned think plausible well founded domain independent planners may
yet become competitive pragmatically designed planners

acknowledgements

work amalgamates extends two conference papers improving search schubert
gerevini computed parameter domains gerevini schubert
accelerate partial order planners supported part rome lab contract f c nato collaborative grant crg
work ag carried irst povo tn italy cs department
university rochester rochester ny usa helpful comments perceptive
questions marc friedman david joslin rao kambhampati colm riain martha pollack david smith dan weld mike williamson associate editor michael wellman
anonymous reviewers gratefully acknowledged

appendix proofs theorems
theorem parameter domains correct computing parameter

domains ucpop style sets operators without quantification disjunction facts
initial conditions possibly goal conditions
proof preliminary observation intersected parameter domains computed iteratively eventually stabilize since grow monotonically
finitely many constants occur initial conditions operator effects
thus terminates
order prove correctness need exists valid sequence
actions operator instances starting start
instance operator op bindings parameters op received instance
eventually added relevant intersected domains op relevant refers
clauses op whose preconditions satisfied beginning
prove induction n
n start parameters claim trivially
true
assume claim holds n k consider operator instance
validly follow e instance operator
op whose primary preconditions possibly along secondary ones satisfied
end let p precondition write instance
p c c p c c must effect k
n

n

n

n

n

k

k

k

k

k





fiaccelerating partial order planners
p c c holds initial state hence predication propagated
successfully matched p initial propagation phase parameter domains
instance operator op p c c corresponding
instance effect p op parameter op
equal cj diagrammatically


j


j








j

k

k

op

op

effect p precond p
p c c

p c c

induction assumption bindings parameters eventually added
relevant intersected domains op implies intersected domains
op become nonempty effect p eventually propagated
variables among corresponding constant cj relevant intersected
domain consequently much case effect p successfully matched
precondition p op stage propagation given observations
clear p marked matched op eventually
furthermore parameters op occur p bindings resulting
unification p c c added appropriate individual domains associated
p
argument applies preconditions op satisfied instance particular primary preconditions since marked matched
compute intersected domains op parameters occur view
individual domain updates confirmed since individual domains grow monotonically intersected domains eventually contain parameter bindings
instance parameter x op occurs primary precondition bound
c shown c eventually added intersected domain
x associated primary clause op parameter occur
primary preconditions op intersected domain set outset
implicitly contains whatever binding parameter
similar argument made secondary clause op whose preconditions satisfied preconditions secondary clause
well primary preconditions marked matched parameter
occurring combined preconditions intersected domain relative secondary
clause updated include binding parameters op occurring
preconditions intersected domains set initially
implicitly contains possible binding finally note since intersected
domains relative primary secondary clauses grow monotonically augmentations intersected domains confirmed permanent case
domains remain
leave additional details concerned ultimate use eq preconditions
parameter domains reader


j

k

k

k

k

k

k



figerevini schubert

theorem parameter domains implemented run mn n n
n time mn space worst case number constants
specification n combined number preconditions operators
goals included n combined number operator effects including
p

e

e

p

p

p

e

start

proof time complexity parameter domains determined sum
cost unifications performed costs individual domain
updates attempted cost intersected domain updates attempted
estimate upper bound terms following assumptions

unification operator effect operator precondition requires constant
time
b fixed upper bound number arguments predicate
precondition effect follows n upper bound total
number intersected domains
c individual domains intersected domains stored hash tables indexed
constants domain check whether element belongs particular
individual intersected domain possibly add domain essentially
constant time furthermore individual intersected domain appropriate
data structures used keep track possibly empty set elements
added domain last update attempt
particular intersected domain particular operator
updates domain update causes effects whenclause intersected domain belongs propagated upper bound
number n propagated effect may unified n preconditions thus
updates intersected domain may cause mn n unifications hence
b overall number unifications caused propagation intersected domains
individual domains mn n unifications add
initially performed effects start preconditions operators
mn unifications increase previous upper bound
number unifications thus cost unifications performed
mn n
unification potentially followed attempt update individual
domain relevant parameter however assumption c number
attempts limited set elements intersected domain
unifying effect empty furthermore attempt update
individual domain performing union relevant intersected domain
subset elements need added already
thus since intersected domain grows monotonically b c
overall cost update attempts one particular individual domain caused
e

e

p

e

e

p

p

p

e

p











note parameter appears precondition clause none effects
intersected domain parameter propagated hence implementing
ignore parameters



fiaccelerating partial order planners
one particular effect worst case one effect unify
n preconditions operators yielding overall bound attempts
update individual domains mn n
attempt update particular intersected domain relevant
individual domain update relevant individual domain updated times
domains grow monotonically therefore b mn
attempts update one intersected domain c total cost attempts
mn checking whether element individual domain belongs
n relevant individual domains takes n time since b
n intersected domains total cost incurred
updating intersected domains mn n
follows time complexity parameter domains
mn n mn n mn n mn n n n
space complexity bound easily derived b fact
clause constants stored
p

e

p

p

p

p

p

e

e

p

e

p

references

e

p

e

p

p

e

p

e

allen j schubert l trains project tech rep dept computer
science univ rochester rochester ny slightly revised language
discourse trains project ortony j slack stock eds communication artificial intelligence perspective theoretical springer verlag
heidelberg pp
allen j schubert l ferguson g heeman p hwang c kato light martin
n miller b poesio traum b trains project case study
building conversational agent experimental theoretical artificial
intelligence
barrett golden k penberthy weld ucpop user manual tech
rep dept computer science engineering university washington
seattle wa
blum furst fast graph analysis proceedings
fourteenth international joint conference artificial intelligence ijcai
pp montreal ca morgan kaufmann
chapman conjunctive goals artificial intelligence
currie k tate plan open architecture artificial intelligence
fikes r nilsson n strips application theorem
proving solving artificial intelligence
georgeff lansky reactive reasoning proceedings
sixth national conference american association artificial intelligence pp
seattle wa morgan kaufmann


figerevini schubert
gerevini schubert l k computing parameter domains aid
proc rd int conf artificial intelligence systems aips
pp menlo park ca aaai press
goldszmidt darwiche chavez smith white j decision theory
crisis management tech rep rl tr rome laboratory
green c application theorem proving solving proceedings
first international joint conference artificial intelligence ijcai pp

joslin personal communication
joslin pollack least cost aw repair plan refinement strategy
partial order proceedings twelfth national conference
american association artificial intelligence aaai pp seattle
wa morgan kaufmann
kambhampati knoblock c yang q refinement search
unified framework evaluating design tradeoff partial order artificial
intelligence special issue scheduling
korf r linear space best first search summary proceedings
tenth national conference american association artificial intelligence
aaai pp
mcallester rosenblitt systematic nonlinear proceedings
ninth national conference artificial intelligence aaai pp
anheim los angeles ca morgan kaufmann
nilsson n principles artificial intelligence tioga pub co palo alto ca
penberthy j weld ucpop sound complete partial order planner
adl nebel b rich c swartout w eds proceedings third
international conference principles knowledge representation reasoning
kr pp boston morgan kaufmann
peot smith e threat removal strategies partial order
proceedings eleventh national conference american association
artificial intelligence aaai pp washington c morgan kaufmann
schubert l gerevini accelerating partial order planners improving
plan goal choices proc th ieee int conf tools artificial
intelligence pp herndon virginia ieee computer society press
smith e peot postponing threats partial order
proceedings eleventh national conference american association artificial intelligence aaai pp washington c morgan kaufmann
smith e personal communication


fiaccelerating partial order planners
srinivasan r howe comparison methods improving search eciency
partial order planner proceedings fourteenth international joint conference artificial intelligence ijcai pp
weld introduction least commitment ai magazine

wilkins practical extending classical ai paradigm
morgan kaufmann san mateo ca
williamson hanks flaw selection strategies value directed
proceedings third international conference artificial intelligence
systems pp
yang q chan delaying variable binding commitments
proceedings second international conference artificial intelligence
systems pp




