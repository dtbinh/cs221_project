journal artificial intelligence

submitted published

pdt logic probabilistic doxastic temporal logic
reasoning beliefs multi agent systems
karsten martiny
ralf moller

karsten martiny uni luebeck de
moeller uni luebeck de

institute information systems
universitat zu lubeck
lubeck germany

abstract
present probabilistic doxastic temporal pdt logic formalism represent
reason probabilistic beliefs temporal evolution multi agent systems
formalism enables quantification agents beliefs probability intervals
incorporates explicit notion time discuss time agents dynamically
change beliefs facts temporal rules agents beliefs respect
information receive introduce appropriate formal semantics pdt logic
decidable alternative options specifying pdt logic
possible specifications develop different satisfiability checking
provide complexity respective decision use
probability intervals enables formal representation probabilistic knowledge without
enforcing possibly incorrect exact probability values incorporating explicit notion
time pdt logic provides enriched possibilities represent reason temporal
relations

introduction
logical analysis knowledge belief active topic diverse fields
philosophy hintikka economics aumann game theory harsanyi
b computer science fagin halpern moses vardi numerous extensions modal epistemic logic made reason knowledge
multi agent settings fagin et al baltag moss add probabilistic knowledge fagin halpern cripps ely mailath samuelson analyze
dynamic evolution knowledge van ditmarsch van der hoek kooi
realistic scenarios agent incomplete inaccurate information
actual state world thus considers several different worlds actually
possible receives information e g observes facts currently
hold update beliefs possible worlds consistent
information updates example regarding previously
considered possible worlds impossible judging worlds likely
thus addition analyzing set worlds agent believes possible
useful quantify beliefs terms probabilities provides means
specify fine grained distinctions range worlds agent considers possible
highly unlikely worlds seem almost certainly actual world
c

ai access foundation rights reserved

fimartiny moller

multiple agents involved setting agent may varying
beliefs regarding facts actual world regarding beliefs agents
many scenarios actions one agent depend belief ontic facts
e facts actual world beliefs agents beliefs
illustrate reasoning agents beliefs yield significant advantages
practical scenarios start following informal description application
cyber security domain formal analysis example pdt logic
presented martiny motzek moller suppose adversary trying
break computer system usually done attack graph detect
exploit potential vulnerabilities system attack graph specifies set
paths e sequences actions carry attack several paths attack graph
might used parallel potentially different agents instance number infected
computers controlled botnet usually attack patterns specified one attack graph
used multiple times two important ramifications adversary learn
experience paths yield high probability successfully breaking
system defenders turn able gain knowledge attack graph
repeated observation certain patterns thus system attack defender
beliefs chosen attack paths adversarys belief regarding
success respective path thus defender choose countermeasures effectively
reacting paths nested beliefs high indeed pose threat
according systems mission impact model
formalize reasoning beliefs multi agent settings present probabilistic doxastic temporal pdt logic pdt logic builds upon recent work annotated
probabilistic temporal apt logic shakarian parker simari subrahmanian
shakarian simari subrahmanian provides formalism enables representing reasoning dynamically changing quantified temporal multi agent beliefs
probability intervals incorporates subset epistemic actions baltag moss
concepts apt logic semantic foundation pdt logic merges work
epistemic logic recent work temporal logic shakarian et al apart
reasoning imprecise probabilities introduces temporal concept frequency
functions epistemic temporal logic
quantifying probabilistic knowledge probability intervals instead single probability values yields two main advantages one hand probability intervals
significantly eases task formally representing existing knowledge human domain
expert cases domain expert give reasonable probability estimates
knowledge inevitably fail giving correct precise numerical values probabilities consider instance weather forecast people easy give coarse
probabilistic quantifications chance rain high virtually nobody
could quantify exact numerical value employing exact numerical values
formal representation would inevitably introduce errors probability model
thus use probability intervals provides means express probabilistic knowledge
precisely possible without enforcing unrealistic precision hand
many scenarios probabilities even rough estimates simply unavailable bounds values may known illustrate consider scenario
described ellsberg


fipdt logic

example ellsberg paradox ellsberg imagine urn known contain
red balls black yellow balls latter unknown proportion one ball
drawn random urn following actions considered action
bet red ii bet black
easy see rational agent would believe action successful
probability action ii quantification possible
respective probability unknown yet omitting probabilistic information action
ii altogether would ignore available information unknown probability value
namely somewhere example exhibits two different types
uncertainty former action subject risk e outcome unknown
occurs known probability later action subject ambiguity known
knightian uncertainty probability unknown bradley
probability intervals pdt logic able work imprecise probabilities
width probability interval give additional information certainty
probability quantification naturally narrow interval associated high certainty
respective probability vice versa wide interval associated low certainty
pdt logic employs explicit notion time thereby facilitates expression
richer temporal relations allows analysis temporal doxastic
beyond scope previous work resulting framework provides means reason
temporal evolution beliefs multi agent systems two different applications
framework possible first agent respective multi agent system
employ framework online run system reason beliefs
analyzing nested beliefs introduced gives agent means reason
probable evolutions agents belief states second framework used
offline external observer analyze whether desired evolutions given system
possible
remainder work structured follows next section presents related
work knowledge multi agent systems apt logic section
syntax pdt logic introduced followed definition formal semantics decision
complexity pdt logic discussed section
formally defined semantics precise probability values section shows
satisfiability pdt logic decided even imprecise probabilities given
finally concludes section

related work
approaches formalize reasoning knowledge belief date back hintikkas work
epistemic logic hintikka hintikka proposed represent knowledge sets
states worlds together binary relation every agent determine worlds
indistinguishable agent sparked multiple branches
epistemic logic still active topics today branches
broadly classified four mutually exclusive areas relevant
work multi agent epistemic logic probabilistic epistemic logic epistemic temporal logic


fimartiny moller

dynamic epistemic logic following give overview key contributions
area discuss existing approaches merge fields
early epistemic logic culminated influential work reasoning
knowledge fagin et al provides unified presentation preceding
contributions epistemic logic work uses called interpreted systems
represent knowledge multi agent systems time represented runs
run sequence systems global states thus identifies state system
every time point among contributions work provides notions multiagent epistemic modalities nested knowledge distributed knowledge common
knowledge
several works extended epistemic logic represent dynamic evolutions knowledge direction known dynamic epistemic logic del first formal
analysis dynamics knowledge presented plaza reprinted plaza
contribution plaza introduces public communication events commonly
known public announcements analyze dynamic evolution knowledge groups
upon truthful public announcements facts group agents independently
plaza related public announcement logic proposed gerbrandy
groeneveld baltag moss solecki baltag moss generalize dynamic epistemic logic incorporate variety complex epistemic
actions epistemic updates represented kripke
extends dynamic epistemic logic represent variety additional epistemic actions
private group announcements e announcements agents outside receiving
group unaware announcement lies e untruthful announcements combinations thereof pdt logic use public private group announcements
assume announcements truthful thorough treatment dynamic epistemic
logic given van ditmarsch et al van eijck provides recent overview
field
alternative modeling evolution knowledge combine epistemic
logic temporal system one example aforementioned interpreted
systems fagin et al another modeling temporal aspects epistemic logic proposed parikh ramanujam known
epistemic temporal logic etl possible situations represented sets
histories local histories every agent represent respective agents previous
observations histories knowledge semantics messages defined
shown messages vary meaning depending respective context
messages receiver temporal model employ pdt logic closely related
epistemic temporal logic instead specifying local histories every agent define
semantics pdt logic respect global history however local contexts
simplify following discussion explicitly distinguish epistemic doxastic
logics section use epistemic general term strictly speaking epistemic formalisms
deal knowledge doxastic formalisms deal beliefs usual axiomatic definition
knowledge literature uses truth axiom stipulates agent know true
facts omitting axiom leads notion belief even though unanimously accepted
cf e g halpern samet segev axiom usually considered key distinction
knowledge belief



fipdt logic

sense etl easily extracted global history filtering history
respective agents observations
traditional work epistemic logic discussed far allow quantify
agents degree belief certain facts specified whether agent
know resp believe fact remove limitation several approaches
proposed combine logics knowledge belief probabilistic quantifications
fagin halpern laid foundation combination seminal
define belief operator quantify lower bounds probabilities agent
assigns formula modeled associating probability space state
agent framework generally guaranteed formulae define
measurable sets present properties guarantee measurability
sets contrast semantics defined pdt logic produces events
measurable probabilities special case framework introduced fagin halpern
presented milch koller pdt logic formalism
assumed exists common prior probability distribution set worlds
ii agents local probability distribution world derived
global distribution conditioned respective set worlds agent considers possible
additional feature milch koller represented bayesian
networks probabilities defined formulae van der hoek introduces
logic pf later extended de carvalho ferreira fisher van der hoek
fagin halpern framework introduces operator quantify
lower bounds probabilistic beliefs probabilistic values work semantically
restricted finite base set probability values yielding logically compact framework
enables efficient implementations
variety approaches proposed extend probabilistic epistemic logics
dynamic frameworks kooi restricts probabilistic epistemic logic fagin
halpern finite settings combines dynamic epistemic logic
gerbrandy groeneveld create probabilistic dynamic epistemic logic
pdel work analyzes effects probabilistic beliefs upon public announcements
framework dynamic epistemic logic capabilities
represent temporal relationships features regarding past cannot expressed
features regarding future expressed limited extent
certain actions van benthem extends framework analyze
epistemic actions described baltag et al another extension
framework proposed van benthem gerbrandy kooi b different
sources probabilities distinguished simplification presented
van eijck schwarzentruber distinguishes work
probabilistic epistemic logic certainty equated knowledge works
make explicit distinction belief probability knowledge difference
two concepts often illustrated repeatedly throwing fair coin
event coin shows head least infinite number repetitions
yet agent know example coin eventually head pdt
logic works countable finite time frames adopt view
van eijck schwarzentruber consider certainty knowledge equivalent
deviating approaches extend epistemic logic probabilities pdt


fimartiny moller

logic provides belief operator probability interval quantifications lower
upper bounds probability values specified explicitly provides
natural means represent imprecise probabilities discussed introduction
another direction probabilistic extensions discussed halpern pucella
doder markovic ognjanovic perovic raskovic example approaches consider estimating unknown prior probabilities given
evidence essentially unknown priors represented set hypotheses
likelihood hypothesis given specific observations estimated approaches
hypotheses represent possible configurations world thus satisfiable
contrast aim pdt logic verify whether possible assignment priors exists
given set formulae satisfiable
dynamic epistemic logic possible reason step wise changes
future order reason temporal relations sack extends update
mechanism dynamic epistemic logic temporal operators namely previous time
next time operators sack extends probabilistic frameworks augmenting work probabilistic dynamic epistemic logic kooi
previous time operator ability reason continuous probabilities
approaches enrich dynamic epistemic logic ability reason events
past van benthem gerbrandy hoshi pacuit give systematic precise
comparison etl called tel van benthem gerbrandy hoshi pacuit
del shown approaches merged single framework
shakarian et al shakarian et al introduce apt logic framework
represent probabilistic temporal evolutions worlds threads apt logic assigns
prior probabilities every thread uses probabilities determine probabilities
events occurring specific threads represent temporal relationships events
apt logic introduces concept frequency functions utilize apt
logic create doxastic multi agent framework supports explicit reasoning
temporal relationships adoption frequency functions explicit
notion time formalism increases complexity decision significantly
enhances expressibility temporal relations instance contrast approaches
implicit representations time pdt logic able specify events occur
within certain time interval cf introduction frequency functions

pdt logic syntax semantics
section discuss beliefs multi agent systems formalized start
defining syntax pdt logic discuss employed model time provide
formal semantics proposed formalism enables expression different types
beliefs quantify beliefs imprecise probabilities introducing suitable
update rule agents beliefs evolve time agents update
beliefs information correctly integrated belief state


fipdt logic

syntax
assume existence function free quantifier free fragment first order logic
language l finite sets constant symbols lcons predicate symbols lpred
infinite set variable symbols lvar every predicate symbol p lpred arity term
member set lcons lvar term called ground term member
lcons tn ground terms p predicate symbol lpred arity n
p tn ground atom ground atom ground
literals former called positive literal latter called negative literal set
ground literals denoted llit usual b denotes herbrand base l e
set ground atoms formed lpred lcons
time modeled discrete steps assume agents reason arbitrarily large fixed size window time set time points given tmax
set agents denoted assume set may arbitrarily large
finite size describe agents observe define observation atoms follows
definition observation atoms non empty group agents g
ground literal l llit obsg l observation atom set observation atoms
denoted lobs
intuitively meaning statement form obsg l agents group
g observe fact l holds note l may negative literal therefore
explicitly specify observations certain facts false raining
assume agents g observe l holds agent g
aware agents g make observation line baltag moss
observations viewed effects private group announcements fact
l group g e l becomes common knowledge within g agents outside g
remain entirely oblivious observation represents epistemic action e alters
belief states agents g formally defined influence
ontic facts respective world
definition formulae atoms observation atoms formulae f g
formulae f g f g f formulae formula ground atoms
formula ground
example coin toss consider two agents coin tossed event
coin lands heads denoted primitive proposition head accordingly
coin lands tails denoted head let us assume coin actually lands heads
sets possible observations scenario obs head obs head
obs head obs head obs head
note difference third fourth set former
scenario agents observe outcome coin throw unaware
agent actually made observation latter scenario agents observe
outcome aware agent observes since allow
use first order structure language definition syntactically convenient way
representing observations apart propositional logic could used base language



fimartiny moller

nesting observations e expressions obsg obsg l pdt logic
subset epistemic actions discussed baltag moss represented
formalism limits expressivity epistemic actions extent
ensure resulting set possible observations lobs finite therefore
pdt logic decidable shown section note
formal concept observations limited express passive acts observing facts
instead used model wide range actions instance example
one could use obs head model act one agent telling
outcome coin throwthe ramifications communication act exactly
would shared observation assuming agents lie
express temporal relationships define temporal rules following
apt rules shakarian et al definition temporal rules already relies
concept frequency functions even though defined next section
still introduce temporal rules enable clearly separated presentation syntax
semantics pdt logic
definition temporal rules let f g two ground formulae time interval
fr f g
fr name frequency function defined section rt
called temporal rule
frequency functions provide information temporal connections events
fr f g understood f followed g
meaning expression rt
time units w r frequency function fr frequency functions enable specification
types temporal relations example used determine often
f followed g within time units often f followed g exactly
time units usage fr syntax temporal rules used specify set possible
names employed types frequency function
u
u
define belief operator bi
express agents beliefs intuitively bi
means time agent believes fact true probability p u
particularly intuitive meaning belief temporal rule agent believes
fr f g given f holds time point call
g hold according rt
probability interval u quantification agent belief use ft denote
formula f holds time accordingly obsg l denote observation
obsg l occurs time call expressions time stamped formulae timestamped observation atoms respectively
definition belief formulae let agent time point u
belief formulae inductively defined follows
u
f ground formula time point bi
ft belief formula
fr f g temporal rule b u r fr f g belief formula
rt

u
f g belief formulae bi
f f g f g f
u
belief bi
something call belief object belief operators
u
atomic elements pdt logic e expression bi
including possibly nested belief



fipdt logic

formulae called atom use script fonts e g f distinguish belief formulae
standard formulae note ontic facts observation atoms
standard formulae cf definition therefore agents beliefs
possible observations
use probability intervals u provides option represent imprecise probabilities bradley imprecise probabilities usually assumed
degree belief proposition represented single probability function p instead set p functions belief state p
proposition represented set
p p p p
set probabilities p called lower upper envelopes defined p
inf p p sup p respectively belief quantifications belief operator
represent imprecise probabilities u values probabilistic belief
considered lower upper envelopes p p respective imprecise probability
u
remark decided index belief operators bi
facts ft appearing
belief objects time stamps allow concise representation temporal
relations alternatively one could use traditional cf sack
example introduce previous time next time operators language express
u
temporal relationships bi
ft could omit temporal

index belief operator instead evaluate whether belief holds time
model however merely syntactic considerations impact
underlying formalism thus decided encode time explicitly belief operators
avoid introduction additional temporal operators moreover belief operators
used express general temporal relationships modeled domain
illustrate point detail section

semantics
section provide formal semantics pdt logic captures intuitions
explained ease understanding presentation start introduction
example return repeatedly introducing concepts
semantics illustration formalisms features use simplified exemplary
domain practical use example somewhat limited serves illustrate
pdt logic applied especially analysis multi agent beliefs
yield valuable information deciding meaningful actions resulting insights
easily applied sophisticated domains
example trains let alice bob two agents living two different cities ca
cb respectively suppose alice wants take train visit bob unfortunately
direct connection cities ca cb alice change trains
third city cc assume train connects ca cc train connects cc
cb trains usually require time units trip might running late
arrive one time unit later scheduled alice requires one time unit change trains
city cc runs time direct connection otherwise wait


fimartiny moller

two time units next train leaves city cc train running late
call bob let know calls modeled shared observations
alice bob instance alice wants tell bob train running late e
arrive cc expected time modeled obs ab cc
expected arrival time
possible worlds
ontic facts corresponding observations e g described example form
worlds states terminology fagin et al world consists set
ground atoms set observation atoms e blobs use
obsg l denote atom resp observation atom obsg l holds world
since agents observe facts actually hold respective world define
admissibility conditions worlds w r set observations
definition admissible worlds world admissible iff every observation atom
obsg l
observed fact holds e x l positive literal x x l negative
literal x
every subgroup g g obsg l
use adm denote world admissible
set possible worlds denoted set admissible worlds
following discussion section assume specification given
possible employ usual definition set combinations
ground atoms observation atoms blobs maximum subset
complying definition usually contains vast number worlds
blatantly impossible according respective modeled therefore assume
succinct specification set admissible worlds depending respective domain
given main reason assumption simplify following presentationwe
describe method obtain set algorithmically section
remark already discussed section group observations obsg l every
agent g aware agents g observed fact together
definition semantics observations equivalent usual semantics
common knowledge fagin et al give definition common knowledge
fixed point axiom fact l common knowledge among group g members
g know l true common knowledge thus could equivalently use
established common knowledge operator cg l instead previously defined observation
formalisms epistemic logic encode facts directly worlds instead use set
named states valuation function si determine facts hold world si cf
fagin et al mainly done obtain option multiple worlds si sj
facts hold e si sj knowledge states agents differ described
pdt logic worlds appear within threads thus possible worlds valuation
appear time point multiple threads thus formalism encode facts directly
possible worlds save valuation function without limiting epistemic expressivity



fipdt logic

atoms obsg l however concept common knowledge usually used describe
emergent states agents knowledge hand context
observations extrinsic feature emergence belief states
keep clear distinction intended use operator therefore continue
use obsg l instead cg l
example trains continued example ground terms b ca cb
cc representing alice bob three cities two trains furthermore
atoms x indicating person train x x z indicating train x
city z finally observation atoms kind obsg x z indicating
agents g observe train x station z possible world example
ca obs ca indicating train city ca
boarded train
define satisfaction ground formula f world usual way lloyd

definition satisfaction ground formulae let f f f ground formulae
world f satisfied denoted f
case f ground atom

case f f ground formula f

case f f f formulae f f

case f f f formulae f f

f

f f

f f

say formula f tautology f admissible worlds
say formula f contradiction world f use
usual symbols denote tautologies contradictions respectively
threads
model temporal evolutions domain use definition threads
shakarian et al
definition thread thread h mapping set time points
set admissible worlds h
thus thread sequence worlds h identifies actual world time
according thread h set possible threads e possible sequences constructible denoted refrain directly working
instead assume meaningful specification gives information
possible temporal evolutions system use represent set relevant possible threads notational convenience assume additional prior world
h every thread
following definition use h ft denote thread h satisfies formulae f
time e h ft h f accordingly use ft denote every
thread h satisfies formula f time


fiobs
cc
cc


obs b
cc
cc


obs
cc
cc


h

h

h

h





hi

h

h

cc



ca




cc

ca









cc

ca

ca

ca

ca

ca
















cc

cc





cb



obs
cb
cb


cc



cb

cc


cb






obs
cb
cb



obs
cb
cb



obs b
cb
cb



obs b
cb
cb



cc



cc



cc



cc



cc

obs b
cb
cb


obs b
cc
cc


h

obs
cc
cc


h

ca

obs b
cc
cc


ca

h

martiny moller

figure visualization possible threads hi example easier distinction shared observations b marked blue single observations
marked red situations alice train train
marked green orange respectively note train running late
respective threads marked according circles two
possible threads one observes one share
observation


fipdt logic

assume system synchronous e agents global clock thus
even agent observe anything world h still aware time passing
therefore distinguish worlds h h
example trains continued description example p yields
set possible threads depicted figure note manually specified set
threads containing threads comply description example
set possible threads would contain vast number additional threads
irrelevant described scenario
kripke structures
definition threads use slightly modified version kripke structures
kripke usual define kripke structure tuple h k kn
set admissible worlds binary relations ki every agent thus
kripke relation called possibility relation agent world defined
ki ki



intuitively ki specifies world agent considers possible
world words current information agent unable distinguish worlds

initialize kripke structure threads considered possible time


h ki h
h

h

evolution time agent eliminate worlds comply
respective observations elimination worlds agent reduce
set threads considers possible ifdue observationa world considered
impossible time point threads h h considered impossible
assume agents perfect recall therefore consider thread
possible considered impossible one point thus ki updated w r
agents respective observations considers threads possible comply
current observations considered possible previous time point

ki h h h ki h

obsg l h g obsg l h g

following two corollaries describe key properties ki follow immediately
definitions
corollary equivalence relation ki defines equivalence relation possible
worlds ki h time points
corollary reduction considered threads set threads h considered possible
w r ki narrowing smaller smaller subset time e h h
ki h h h ki h h


fimartiny moller

note updates ki defined information incorporated instantaneously e time agent observes fact updates possibility relations
already time considers every world impossible comply
observation time
example trains continued figure obtain time
possible world ca contained possible threads thus
ki hj contains exactly world agents threads j consequently
agents consider threads possible time
assume time evolves two steps actual thread h e train
running late inform b agents update
possibility relations accordingly yielding
ka h obs cc

kb h cc obs cc
e knows time b unaware late since still
considers situation possible train city cc time
subjective posterior temporal probabilistic interpretations
agent probabilistic beliefs expected evolution time expressed subjective temporal probabilistic interpretations
definition subjective posterior probabilistic temporal interpretation given set
possible threads thread th time point agent function
th specifies subjective posterior probabilistic temporal interpretation
ii

agent point view time thread th e probability distribution possible
p
th h since probabilistic interpretations possible threads
threads ht ii

depend respective perspective agent th marks point view subjective

interpretation thus call th point view pov thread interpretation h


concept point view threads seen conditional probabilities subjecth specifies agent probabilistic interpretation
tive posterior probabilistic interpretation ii

time given th actual thread different threads yield different evolutions
world andsince every possible thread taken pov thread may induce
different probabilistic interpretations agent thus notion pov threads allows
reason hypothetical beliefs agent instance possible future beliefs
analyzed nested beliefs evaluated
th vector occasionally represent probabilistic
simplify notation see ii



h vector possible threads vector well jth
interpretation ii



h refers probability assigned thread h
element ii

j



h h since
prior probabilities agent threads given ii
threads indistinguishable priori single prior distribution needed



fipdt logic







h h h h furthermore order
agent e h th th ii

able reason nested beliefs discussed assume prior
probability assessments agents commonly known e agents know
agents assess prior probabilities thread turn requires
agents exactly prior probability assessment possible threads two
agents different commonly known prior probability assessments essentially
instance aumanns well known agreeing disagree aumann
intuitively differing priors commonly known common knowledge
least one agents fault revise probability assessments
one prior probability distribution viewpoints
denoted note directly corresponds concept temporal probabilistic
interpretations shakarian et al

remark could use prior probability distribution alternative method
distinguish set possible threads set threads relevant
specific domain simply assign unwanted threads h
probability zero
example trains continued meaningful prior interpretation


assigns highest probability h train running late lower probabilities
threads one train running late informs b h h even lower
probabilities events trains running late informs b h
h h one train running late inform b h h
lowest probability thread trains running late
inform b h note represents prior interpretation train example
thus every agent every possible pov thread th
even though single prior probability distribution set possible
threads still necessary distinguish viewpoints different agents different
threads following definition interpretation updates shows
whenever agent updates kripke relations according equation p
necessary update probabilistic interpretations agent match
knowledge intuitive way update probabilities conditioning remaining
worlds agents kripke structure want point conditioning suitable
choice pdt logic although known produce undesired incorrect
many cases notably monty hall vos savant grunwald
halpern discuss naive conditioning tends produce errors updates
carried simplified space several events collapsed since seemingly
one event one uses called sophisticated conditioning instead e conditioning
sophisticated space means possible events represented probabilities
updated correctly semantics pdt logic exhaustive specification
relevant threads conditioning proper specification relevant threads inherently
sophisticated sense grunwald halpern therefore produce correct
one easily verify following update rule well known probability


fimartiny moller

puzzles monty hall correctly represented pdt logic thus
use following conditioning update rule
definition interpretation update let agent time point th pov
thread system actually thread th time agent probabilistic
interpretation set possible threads given update rule

th h h k th
ii


h
th



ii h


h ki th



h



normalization factor ensure


x

th



ht

p



ht

h h
ii




th
ii
h



h ki th

invocation ki update rule yields obvious ramifications evolution
interpretations stated following corollary
corollary nonzero probabilities subjective temporal probabilistic interpretation
th agent assigns nonzero probabilities exactly set threads still
ii


considers possible time e h h iff h th ki


essentially update rule assigns impossible threads probability zero
scales probabilities remaining threads proportional
probabilities previous time point given prior probability distribution
th specific pov thread
set possible threads subjective posterior probabilities ii



h agents time points induced respective observations contained


th use h denote set subjective posterior interpretations h induced


pov thread th

example trains continued applying update rule situation
described example p given example yields updated
interpretation


h
ia






e considers exactly threads possible train running late
inform b threads h h h due lack information b
eliminate situations indeed inform late time
point thus bs interpretation updated

th
ib





fipdt logic

h

h

h

h

h

h

h

h

f

g

f

g

g

f

g

f

figure example thread h adopted shakarian et al
figure shows world satisfies formula f formula g

frequency functions
represent temporal relationships within threads adapt concept frequency functions introduced shakarian et al frequency functions provide flexible way
representing temporal relations occurrences specific events illustrate
motivation behind frequency functions consider exemplary thread h depicted
figure thread one events f g occurs every time point
discussed shakarian et al multiple ways characterizing temporal
relationships events f g instance one might specify often event
f followed event g say exactly time points according figure happens
one four occurrences f h might prove meaningful exclude final
occurrence f h determining frequency naturally occurrence
f tmax cannot followed subsequent occurrence g excluding final
occurrence f would yield one three desired frequency alternatively one
could specify often f followed g within next two time points
exemplary thread figure would produce frequencies respectively
depending whether final occurrence f included
example illustrates already four different possible definitions temporal relations
events maintain flexibility expressing temporal relations commit specific definitions pdt logic instead adapt axiomatic definition
frequency functions
definition frequency functions adapted shakarian et al let h
thread f f g g ground formulae integer frequency
function fr maps quadruples form h f g following
axioms hold
f g tautology fr h f g
f g contradiction fr h f g
f g neither tautology contradiction exist threads h
h fr h f g fr h f g
f f g g fr h f g fr h f g
axioms ensure special casesi e g f
f g frequency functions behave temporal implications premise
f conclusion g axiom enforces non trivial frequency functions requiring
cases covered first two axioms must least two threads


fimartiny moller

differing frequency values axiom ensures fr congruent logical
equivalence examples frequency functions satisfying axioms introduced
remark definition mostly corresponds definition frequency functions
shakarian et al except require work
shakarian et al frequency functions intended express temporal relationships
therefore limited nonzero values additionally allowing obtain
concise framework express temporal relationships static constraints
within one time point exploited next section decision procedures
pdt logic discussed
illustrate concept frequency functions present formal definitions
point existential frequency functions adapted shakarian et al represent
informal descriptions frequencies
point frequency function pfr expresses frequently event f followed
another event g exactly time units
pfr h f g

h f h g
tmax h f



denominator zero define pfr denominator counts total number
occurrences f given thread h numerator counts number occurrences
f followed g exactly time units thus ratio pfr expresses frequently
f followed g exactly time units note denominator considers
occurrences f time tmax done reflect previously discussed
intuition occurrences f last time points excluded
frequency possibility followed subsequent g
time units
existential frequency function efr expresses frequently event f followed
another event g within next time units
efr h f g
efn h f g tmax

tmax h f efn h f g tmax tmax




efn h f g h f

min h g

function ef n counts number occurrences f followed subsequent occurrence
g within next time units first summand denominator counts
total number occurrences f time point tmax second summand
denominator additional occurrences f followed g within time units
intuition definition exclude occurrences f final time units
followed g since g may occur within range range cannot
fully considered final time points occurrences f according
subsequent occurrence g considered final time points consequently


fipdt logic

ratio efr expresses frequently event f followed g within next time
units without letting single occurrences f final time points decrease ratio
returning exemplary thread h figure evaluate frequency
functions given thread suppose want determine often f followed
g exactly two time steps expressed point frequency function

pfr h f g

instead want know often f followed g within next two time steps
use existential frequency function
efr h f g





noted frequency functions used model temporal relationships
usually expressed temporal operators instance pfr reflects
next operator efr tmax reflects future operator meaning
additional temporal operators captured definition
additional frequency functions required
semantics belief operator
definitions subjective posterior probabilistic temporal interpretations
introduction frequency functions provide formal semantics belief operators defined section semantics extends definitions shakarian
et al satisfiability static interpretations obtain formal definition
probabilistic multi agent beliefs start providing definition semantics
atomic belief operators three different types beliefs semantics compound belief
formulae e involving connectives defined definition
definition belief semantics atomic belief operator let agent
th agent interpretation time pov thread th follows
ii

interpretation agent believes time probability range u
belief ground formulae
th b u f iff
formula f holds time denoted ii





x
ht h f



th
ii
h u



belief rules
fr f g holds denoted th b u r fr f g iff
temporal rule rt




x
ht



th
ii
h fr h f g u





fimartiny moller

nested beliefs
u
belief bj tj j agent j holds time denoted


u

h b u b j j iff
ii

j






x
ht
u
h b j j
ij
j

th
ii
h u



intuition behind semantics follows beliefs ground formulae ft
th h agent time pov thread th
subjective posterior probabilities ii

added threads h satisfy f time thus sum represents
th assigns f sum within specified boundaries u
exact probability ii


u
respective belief b ft holds agent time pov thread th




h h every thread
beliefs rules subjective posterior probabilities ii

fr f g thus
weighted corresponding frequency fr h f g rule rt

h h represents exact probability th assigns
weighted sum ii


temporal relation f g according frequency function fr beliefs
fr f g contains information type frequency
rules belief object rt
function fr constraints respective frequency values given belief
quantification u e agent probabilistic beliefs specific frequency
values

remark noted semantics beliefs rules together
axiomatic definition frequency functions definition p yields certain
fr f g g tautology f contradiction
constraints satisfiable beliefs rules rt
e definition satisfied holds respective frequency function
u fr
fr h f g every possible thread h thus belief bi
rt f g
satisfiable belief quantified u regardless set threads
th analogously f tautology g
corresponding interpretation ii

u fr
contradiction e satisfied belief bi
rt f g satisfiable
u

u
j j
nested beliefs bi
expression unnested first determining
bj
u

u

possible pov threads h agent j bj tj j satisfied bj tj j corresponds
belief fact rule respectively used identify threads h
h b j uj otherwise represents another belief formula belief
ij
j
unnested recursively innermost belief expression obtained
h b j uj agent subjective posterior probabilities th h
threads h ij
j

added determine whether outer belief holds note agent
know actual beliefs agent j however due assumption common equal
priors discussed section agent able reason agent js hypothetical
interpretation updates given system specific thread thus agent able
compute without knowing js exact beliefs
example trains continued use point frequency function express beliefs
punctuality trains assume b judge probability


fipdt logic

train running late e arriving instead time units expressed
temporal rule r pfr ca cc yields following
belief formulae
pfr
bi
r ca cc


pfr
bi
r cc cb

b



temporal rules expressed belief formulae obtain following frequencies
figure p
pfr h ca cc
pfr h ca cc
pfr h cc cb
pfr h cc cb

h h h

h h h

h h h h

h h h h h

combining frequency values prior interpretation


given example p yields sum
x
h pfr h f g
ht

f ca g cc f cc g cb sum
within belief quantification u belief formulae valid note
prior probabilities example specified trains
late probability thus respective sums frequencies

definitions use belief fact f quantify
belief negation fact f

u
corollary belief negated facts let bi
ft agents quantified temporal belief
fact f according definition agents belief negation
u


fact f given bi
f u u

evolution time
order completely specify pdt logic introduce concept doxastic
systems following assume syntactical objects finite


definition doxastic system let set agents set threads
matrix prior probability distributions across every agent f


set frequency functions call quadruple ha f
system


doxastic

fimartiny moller

note several parameters discussed explicitly specified
doxastic system neither set possible worlds set ground atoms b set
observation atoms lobs set time points explicitly specified however
relevant information regarding parameters already contained specification


remark since agents share common prior rows thus
one could obtain parsimonious specification providing single
unique row vector prior probabilities choice matrix nonetheless
notational purposes simplify presentation interpretation update
operations later


definition admissibility doxastic systems let ha f

doxastic system called admissible iff every world implicitly defined admissible


according definition p rows

sum one

identify specific situations doxastic system time passed
observations occurred furthermore define pointed doxastic systems


definition pointed doxastic system pds let ha f
doxastic
system h set time stamped observation atoms observation atoms
h occur least one worlds implicitly defined call pair
hd hi pointed doxastic system
definition admissibility pointed doxastic systems let hd hi pointed
doxastic system set threads hd hi called admissible iff
admissible exists thread h obsg l h obsg l h
e must contain least one thread complies timed observations h
intuitively set timed observations specified pds points certain situation
doxastic system one could view h max obsg l h present time
pds recent observation occurred h observations actually occurred
past h specified h thus deterministic retrospective
information future observations h given sense h specifies
certain history h doxastic system points last event history
example trains continued doxastic system train example specified

h b h h pfr efr









identify situation described example p running late specify
following pointed doxastic system
hd obs cc


fipdt logic

evolution probabilistic interpretations
accordance prior probability matrix definition define

interpretation matrix att h store interpretations agents n denoting
number agents across threads h hm given doxastic system
pov thread th time


th h th h












att h









h h h h



n

definition ki equation p update rule equation
p prior probability matrix definition provide

update matrix utt h calculate interpretation matrix pov thread th
time point denotes element wise multiplication matrices






h
att h att
utt h



utt h ij







th



hj ki th
hj ki th







h normalization factor defined equation p


time stamped observations specified history h pds hd hi induce
updated set reachability relations ki h every thread h complies
given observations threads h comply given observations
ki h updated reachability relations turn yield updated interpre
tations att h complete state interpretations time point every possible
pov thread th thm specified block matrix call belief
state bs pds time



bs hd hi att h att hm


use bs hd hi denote sequence belief states bs hd hi
tmax
definition belief states seen specification conditional probabilities
kth entry bs hd hi specifies interpretations agents across threads
time given system pov thread thk thusas every thread considered
potential pov threada full specification agents belief state threads requires
conditional probabilities every time point general representation
belief states allow easy evaluation subjective posterior interpretations
arbitrary time points pov threads intuitive definition belief state updates
however general definition contains redundant information leveraging certain properties semantics pdt logic identify means obtain compressed
representations belief state following


fimartiny moller





corollary null vectors att hk due definition ith row att hk
iff agent actual observations specified h match observations specified
thread hk
proposition belief state compression let hd hi pointed doxastic system
let time point h without loss information belief
state bs hd hi time represented


bs hd hi v vn
one probability distribution vector vi per agent


proof follows directly corollaries p matrices att hk
bs hd hi nonzero rows exactly correspond threads considered
possible agent time
properties ki given corollary p follows worlds h
ki h indistinguishable agent therefore associated
interpretation thus nonzero ith rows matrices bs identical defining vi
unique nonzero rows bs obtain representation information
impossible pov threads described corollary still maintained
assigned probability vi
important note compressed representation applicable time
points h retrospective agent able classify threads two
categories comply observations far e considered
possible time points h classification possible
ki h depends future observations therefore lead branching
several distinct interpretations depending respective observations
evolution beliefs
order analyze temporal evolution beliefs use update rule
update belief states since different possible observations yield different branches
evolution beliefs update every thread belief state individually

respective update matrices utt h defined




bs hd hi bs hd hi utt h utt hm



furthermore analyze satisfiability validity arbitrary finite belief expressions
u

bi
w r given pds hd hi define auxiliary belief vector b different beliefs
u
b vector b contains one entry b j every possible thread hj


defined follows


u
bi
ft

b

u fr
bi
rt f g

c

u
k uk
bi

bk




hj f
b ft j
hj f

fr
b rt
f g j fr hj f g

th
k uk
ik j bk


u
k k

b bk j
hj
k uk
ik bk





fipdt logic

note case nested beliefs respective entries b j set one
inner belief holds thread hj e assumed hj point view thread
k uk
satisfied thread
agent k checked whether ks belief bk


determine matrix pt probabilities pti th k
agent assigns time event possible pov threads
th thm




h

p

pt bs hd hi b b



ptn th



pt th






ptn th



n agents threads n matrix rows matrix
seen conditional probabilities agent believes time fact true

probability pti th k given system pov thread thk
remark computation pt straightforward cases b compute
probabilities nested beliefs c start computing innermost belief
instance case case b since assume finite expressions
compute nested beliefs iteratively
definition p equation provide definition
satisfiability validity beliefs
definition validity satisfiability beliefs let b belief formula defined
definition p hd hi pointed doxastic system pt corresponding
matrix probabilities time defined b satisfiable valid w r hd hi iff
u
b bi


least one thread thk entries row pt satisfy




hk
hk
pi
u pi

u
b bi


least one thread thk entries row pt satisfy




hk
hk
pi
u pi

b b b
least one thread thk entries corresponding rows
pt satisfy b b
b b b
b satisfiable valid b satisfiable valid


since consider every possible pov thread thk multiply every matrix att h


bs hd hi b thus need use vector b b
rows



fimartiny moller

remark distinction valid satisfiable belief formulae interest
beliefs time h time points h agents belief uniquely determined given observations cf proposition resulting single probability
associated belief therefore invalid belief formulae h unsatisfiable
definition p follows belief object atomic belief formula b
definition arbitrary belief formula inner belief formula
b one cases defined definition validity satisfiability entire
u

expression b bi
b follows inductively definition least one
thread thk inner belief formula b satisfied limits
u

outer belief respective thread satisfied entire belief formula b bi
b
satisfiable valid
definition gives rise important property belief operator following
lemma shows
u
lemma distributivity belief operator let b bi
belief
formula belief object connective express
u
u
b equivalently b bi
bi

proof follows immediately validity satisfiability beliefs definition
u
formula b bi
satisfiable valid iff least one thread


hk holds hk thk respective entries pt satisfy

u
definition former case bi
satisfiable valid well
u
latter case bi
satisfiable valid reflects exactly definition disjunctive
u
u
belief formulae definition thus b bi
bi satisfiable valid

u
iff b bi
satisfiable valid

u
similarly formula b bi
satisfiable valid iff least one

thread hk holds thk thk hold respective
u
u
entries pt satisfy definition bi
bi satisfiable
u
u
valid thus formula b bi
bi satisfiable valid according
u
u
definition definition thus b bi
bi satisfiable valid iff
u
b bi
satisfiable valid

illustrate evolution beliefs finish train example analysis
expected arrival times
example trains continued specified example p
infer bob course alice safely assume time alice arrive
time latest probability range expressed belief
formula
ef r
bb bb
r cb





fipdt logic

rule obtain frequencies
efr h ca cb

efr h ca cb

h h h

h h h

e threads h h figure p event cb occurs
within time points following event time thus time
latest threads h h event cb occurs
time outside scope r efr thus yields frequency zero
time point bob still considers threads possible thus bobs subjective
posterior probabilistic interpretation

th
ib

equal prior interpretation given example p possible pov threads
th combining interpretation frequencies given yields sum
x
th
ib
h efr h ca cb
ht

thus formula bb valid
consider previously described situation running late
inform b leads updated interpretations given
page e


h
ia


th
ib

















updates lead significant divergence belief expected arrival time
corresponding sum respect alices updated interpretation
x
h
ia
h efr h ca cb

ht


obtained alices subjective posterior probability assignment thread h
nonzero summand sum threads h impossible
h
alices point view e ia
h threads h h h h h h h
corresponding frequency zero threads h h thus alices belief
arriving time point latest drastically reduced lower bound alices
belief may exceed instance

ef r
ba
r cb

valid belief formula corresponding sum bobs belief time point
x
h
ib
h efr h ca cb

ht



fimartiny moller

obtained summing bobs subjective posterior interpretations threads h h
remaining threads contribute zero summands bobs probability assignment corresponding frequency zero threads thus bobs
previous belief expressed remains valid time point denoted bb
even though alices beliefs changed significantly aware bob maintains
beliefs conflicting shown following valid expression nested
beliefs

ba
bb
verify nested belief holds need consider threads alice considers
possible h h h determine bobs hypothetical beliefs would
threads h already analyzed since threads h h
h indistinguishable bob time point analysis hold
three threads consequently bb holds every thread alice considers possible
therefore sum nested belief
x
th
ii
h
ht

h b
ib
b

e alice knows bobs belief outdated
finally consider pointed doxastic system hd obs ab cc e
situation difference alice shares observation
delayed train bob immediately follows bob updates beliefs
way alice turn yields update alices beliefs bobs beliefs
following expression valid valid lower bound longer

bb
ba

example shows alice reason influence actions
bobs belief state therefore decide actions improve bobs utility
wait vain

satisfiability checking pdt logic
section describe procedures check whether exists model
given set belief formulae b discussions chapter assume
sets formulae finite start formally defining satisfiability checking
pdt logic semantics previous section derive model
checking fully specified doxastic systems afterwards set
belief formulae used specify pdt logic andtogether given
set threadshow transformed mixed integer linear program order
employ existing solvers decide satisfiability pdt logic formulae finally
suitable threads derived given set belief formulae automatically
transformations linear programs established deciding satisfiability
probabilistic logics discussed example fagin halpern megiddo
however priors given established decision procedures probabilistic logics


fipdt logic

applicable pdt logic due formalisms update mechanism cf update rule
definition p update mechanism
fully specified doxastic system hd hi given define checking
whether set belief formulae b satisfiable respect doxastic system

follows recall section use h denote set subjective
th induced prior interpretation pov thread th
posterior interpretations ii

definition satisfiability checking pdt logic let hd hi pointed doxastic
system set threads according prior interpretation specified hd hi
b set belief formulae say b satisfiable w r hd hi exists
thread th corresponding interpretations satisfy belief formulae b
b



sat b hd hi th b b h b

specification given checking satisfiability b respect hd hi corresponds checking whether hd hi model b continue introducing model
checking procedure fully specified input afterwards discuss satisfiability
set belief formulae b decided prior probabilities neither threads
prior probabilities given
model checking
first developing check whether given set belief formulae
b satisfied given pointed doxastic system hd hi e checking whether hd hi
model b obtained direct application semantics belief
operator given definition p shows resulting model checking
procedure starts computing belief states possible evolutions world
tmax afterwards iterates belief formulae b b potential
pov threads thk determine whether interpretation respective pov thread
able satisfy current belief formula thread unable satisfy belief formula
excluded set potential pov threads subsequent checks least one
potential pov thread remains belief formulae checked e
least one thread thk belief formulae b b satisfied hd hi model
b
theorem soundness completeness decision procedure sound complete therefore model checking procedure pdt logic
proof since presented essentially inductive application definition
p easy see yields sound complete decision procedure pdt
u
u fr
logic basic belief formulae bi
ft bi rt f g return satisfiability
directly respective semantic definitions calculation rules
u
u


every possible compound belief formula pdt logic bi
bi b b b


b b procedure provides appropriate rule according definition break
formulae iteratively base formulae obtained decided



fimartiny moller

model checking
procedure modelchecking hd hi b
h
hm
bs hd hi




tmax
bs hd hi bs hd hi utt h utt hm
b b
thk
check bs hd hi thk b
thk

return false
return true

compute belief states

check b satisfied thk
otherwise remove thk threads check
exit th satisfy b
success nonempty checking b b

function check bs hd hi thk b
switch b
check formulae according def
u
case bi

b
check nested belief formulae recursively b belief formula


check bs hd hi hk b
return false
th
pt bs hd hi b
use b compute pt elements pi k
th

th

th

true pi k u

return pi k u pi k
u
case bi


pt bs hd hi b
th

th

th

true pi k u

return pi k u pi k
case b b
return check bs hd hi thk b
check bs hd hi thk b
case b b
return check bs hd hi thk b
check bs hd hi thk b



fipdt logic

asymptotic complexity depends number belief operators
u
bi
contained b
theorem time complexity let b set belief formulae let
k number belief operators contained within b check
whether given pointed doxastic system hd hi threads model b time
complexity k
proof given pds threads k belief formulae b main procedure calls
check function k times b base formula single belief
u
operator bi
single call check function return otherwise
u
belief formula b contains one belief operator bi
check function
called recursively base formulae obtained thus k belief operators b
satisfaction checks performed k times yielding time complexity
k

theorem immediately obtain complexity model checking
pdt logic
corollary complexity model checking pdt logic model checking
pdt logic ptime
shows model checking set belief formulae w r given pointed
doxastic system done polynomial time fully specified pds thereby
exhaustive specification set possible threads given shows
presents tractable procedure perform model checking task however
significant drawback assumes exhaustive specification
together precise prior probability assignments although
domains actually come specification e g cf cyber security scenario
described introduction assumption renders infeasible
domains overcome proceed discussing different
enables satisfiability checking without requiring specification exact
probabilities moreover representative threads respect set belief
formulae b constructed automatically positive satisfiability
potentially obtained without requiring full materialization possible threads
compact specification
used pointed doxastic system specify domain model
checking set belief formulae b pdt logic following sections
reformulate extended set belief formulae together
value tmax used main idea background knowledge regarding target domain given explicit specification possible threads
according probabilities instead sets rules b describe target
domain may evolve time several advantages scenarios
compared requiring exhaustive set possible threads specifying set rules
expressed prior beliefs gives natural means specifying background


fimartiny moller

knowledge domain e g cf example page actually starts
verbal description rules later introduces corresponding set possible
threads furthermore set rules describe domain fairly established therefore provide options simplify transformation
existing specifications pdt logic finally since set possible threads
grows exponentially every additional time point set time points every
additional ground atom language l exhaustive specification
set possible threads quickly becomes infeasible situation could
described succinctly small set rules even though succinct specification shifts exponential nature required input specification
computational efforts exponential effect curtailed heuristics
constructing possible threads automatically
identification key parameters set belief formulae
simplify following discussion restrict temporal rules use point
frequency function pfr recall point frequency functions used specify
event f followed another event g exactly time points existential
frequency functions efr used specify event f followed another event g
within time interval existential frequency functions required specify
domain rewrite disjunctions point frequency functions following
proposition shows frequency functions defined presented techniques
easily adapted
proposition efr rewriting existential frequency function efr equivalently
represented disjunction point frequency functions pfr
efr
f g
rt



pfr
rt
f g

tt



recall according definitions page specification pds
consists set agents set threads set frequency functions f matrix


prior probability distributions
set time stamped observations h
since use point frequency functions following set frequency
functions f fixed pfr thus need specify set separately
instead explicitly specifying set agents determine
u
belief expressions bi
contained set belief formulae b slight abuse
u
u
notation use bi
b denote belief operator bi appears somewhere
set belief formulae b define set agents ab specified set
belief formulae b
u
ab bi

b

generally possible explicit specification set agents larger
set ab however obvious beliefs expressed agent e
ab agent influence satisfiability checking whatsoever
thus agent simply disregarded consequently suffices use set ab


fipdt logic

similarly instead specifying set ground atoms language l
sets predicates lpred constants lcons define set event formulae fb
representing belief objects occurring set belief formulae b
n

u
u fr
u fr
fb f bi


ft b bi rt f g b bi rt g f b
definition gives rise potential definition set possible worlds
herbrand base b fb fb resp set admissible worlds complying
definition p however later options constrain
sets possible worlds allow concise representation
note according definition p formulae may include atoms
observation atoms consequently fb specify ontic facts possible worlds
possible observations ontic facts occurrences
observations limited ones specified fb seen specification
sensor model groups agents g ab
remark strict application would prohibit simple specifications group observations obsg l g b ensure set admissible worlds
actually
v
contains worlds obsg l full specification observation g g obsg l
b would required otherwise might world b fb obsg l
satisfies second property definition possible worlds cf definition
however required full specification observation admissible worlds determined solely simple observation specification obsg l order keep
specification b compact possible
allow simple specifications obsg l
v
assume expanded g g obsg l creating fb
alternative would construct fb ontic facts appearing
b create set admissible worlds combining ontic facts possible
admissible observations w r definition approaches differ requirements
observation specifications former requires specify every possible observation explicitly latter requires exclude every impossible observation explicitly since
scenarios set observations actually possible w r domain
significantly smaller set admissible observations presented
usually yield compact specification desired one could employ
latter instead without impacting functionality following methods
background knowledge regarding target domainthat given explicit
representation possible threads beforecan specified prior beliefs e
u
beliefs bi
b recall section assume commonly known prior


h equal agents belief semantics defined
distribution ii
b


h cf definition p follows
respect probabilistic interpretations ii


u
every prior belief bi
common knowledge well consequently express
background knowledge prior beliefs arbitrary agent ab
u fr
pointed section satisfiability beliefs temporal rules bi
rt f g

certain properties independent respective set threads associated
interpretation cf remark p respective frequency function corresponds


fimartiny moller

definition e f contradiction g tautology f tautology g contradiction beliefs trivially satisfied quantifications
u resp generally unsatisfiable former case trivially satisfiable beliefs
disregarded without influencing satisfiability latter case satisfiability checking terminate immediately negative thus following
assume b contains beliefs rules correspond frequency function
axioms
example trains revisited informal verbal description train
given example p corresponding formal specification set
possible threads example p probability assignments example p
considerations expression background knowledge beliefs rules
reformulate verbal rules given example together probabilistic
information example set formal beliefs b according explanations








b ba


c


b


















pfr


b
r ca punct
ba


b





pfr

ba
r cc punct
b












r pfr punct ca cc b
ba


b



pfr

ba
r punct ca cc b








b
r pfr punct cc cb b
ba

b






ba
r pfr punct cc cb b











b ba
r pfr punct train train city obs punct train









pfr

b ba
r obs punct train obs ab punct train









train




city c c


b













































































note beliefs expressed time e prior beliefs
definition commonly known among agents beliefs expressed example
assigned could equivalently assigned b
b states train city ca time alice train b
states agents believe trains punctual denoted punct train
probability probability values example obtained summing
probabilities given example threads given example respective
belief object satisfied equivalent representation previous example


fipdt logic

use exact probability values e u instead intervals note punct train
additional predicate variable train helps formulate background knowledge
concise way formula b yet specify consequences non punctual
train train expected punctual certain probability b states
alice able board train three time steps train punctual
alice wait two additional time points otherwise b states train
arrive city cb two time points city cc otherwise arrive one
time point later b states alice notice train leaves city
punctually example sensor model specification discussed finally
b states alice call bob probability train punctual
example trains continued definition set belief formulae b
example specify set event formulae fb required model
possible scenarios described b








c



c



c



c






b
b
c






punct punct





fb


obs punct obs ab punct








obs punct obs

punct



ab
simplify following discussion assume conjunctive formulae b b
b replaced individual formulae respective conjuncts b b
b b b impact satisfiability checking properties b
formulae b satisfied simultaneously order return positive
thus b b satisfied regardless representation two
individual formulae one conjunction
remains determined set threads corresponding prior
b



probability distribution resp matrix prior probability distributions

every row formed possibly set time stamped observation atoms
h tasks determining h treated jointly since set relevant
threads needs determined anyway simply create h
next section transform set pdt logic belief formulae
b together given set threads linear program order determine
satisfiability b respect afterwards discuss suitable set
threads represent information contained b constructed automatically
possible model domain pdt logic solely
set belief formulae b together specification maximum time point tmax
key parameters domainsuch set agents set ground
atomscan extracted b automatically
representing satisfiability linear program

considerations previous section parameters
specification extracted given set belief formulae b section
assume set belief formulae b together set possible threads given


fimartiny moller

b satisfiable respect denoted sat b prior interpretation
found belief formulae b satisfied extracting linear constraints
b satisfiability transformed linear
program checking satisfiability b respect equivalent checking
whether corresponding linear program feasible solution
given set threads unknown prior interpretation satisfiability
checking task significantly increases complexity compared model checking task
formulation satisfiability checking definition p might somewhat delusive existence single thread context interpretation
suffices verify satisfiability set belief formulae b appears intuitive develop
method construct threadif possibleand neglect threads vice
versa start entire set threads iteratively prune threads fail satisfy formula b fact pruning used p
check whether given set threads model set belief formulae unfortunately
approaches inapplicable prior interpretation unknown semantics
belief operators cf definition p relies subjective posterior probabilistic interpretations e probability assignments multiple threads generally possible
single thread th satisfying satisfiability checking definition
without determining probabilities threads vice versa generally possible
discard thread determining whether satisfies belief formula
done respective probability assignment known instead belief
formulae equivalently expressed sets linear constraints unknown prior
interpretation checking satisfiability b equivalent checking whether
possible assignment constraints satisfied
use xk denote unknown prior probability thread hk e contains
threads unknown prior probability assignment represented
x xm







goal following methods provide constraints xk belief
formulae b b satisfied since variables represent probability distribution
set threads two obvious constraints begin
xk k



x

xk





k

representation subjective posterior probabilities
since semantics beliefs defined terms respective agents subjective probability assignments respective pov thread need means express subjective
th agent terms prior probability
posterior probabilistic interpretations ii

values xk interpretations change time point whenever observation obs l
possible agent observation possible agent partition set
threads two sets one partition containing set threads agent observe


fipdt logic

respective fact l one partition agent observe respective fact
subjective probability assignments need updated within partition reflect
information observation occurrences taking every thread within partition
possible pov thread probability assignments threads within partition
need scaled according update rule definition pov thread specific
probability assignments threads outside respective partition need set
zero
generally leads one vector subjective probabilities threads every
possible pov thread cf definition belief states equation p however
leverage semantic properties pdt logic obtain parsimonious representation
updated subjective probabilities without representing every pov thread explicitly
note threads within one partition described indistinguishable agent
respective time point e threads within one partition exhibit exactly
set observations agent time point therefore receive probability
assignment every possible pov thread within partition cf proposition p
consequently updated probability assignments every thread receive
one two different types value assignments scaled version threads previous
probability assignment according definition p zero depending whether
agent actually observes fact l following proposition shows
need consider cases zero probabilities order perform satisfiability checking
tasks


h subjective posterior
proposition irrelevance zero interpretations let ii


probability interpretation time agent pov thread th e interpreta

tion determined prior interpretation interpretation updates corresponding
pov thread th interpretation assigns probability zero thread h e
th h satisfiability subsequent nontrivial belief b
ii




h h
independent ii


u
proof every belief bi
fact another belief e ft
u

bj tj j requires needs least one thread h nonzero


h h clearly
probability h therefore thread h ii

u


prove satisfiability belief bi
negative satisfiability e b

unsatisfiable w r cannot obtained zero assignment
consistent interpretation e probability assignments threads sum one
needs assign nonzero probability least one thread could possibly
u
satisfy belief considerations hold beliefs bi
u


h h satisfies lower bound upper bound u
although thread ii



h h
requires existence another thread h nonzero probability ii



h h prove satisfiability beliefs b u
h consequently ii


u trivial beliefs satisfied every thread
every possible probability assignment thus satisfiability proven without
th h
ii




fimartiny moller

u fr
analogous considerations hold beliefs rules belief bi
rt f g
requires existence thread nonzero probability fr h f g
th h cannot prove satisfiability belief satisfiaand thus thread h ii

u fr
bility belief bi
rt f g u depends respective frequencies

fr h f g additional threads h nonzero probabilities

proposition merge nonzero entries cases agent
observes fact l agent observe fact l single probability
distribution vector agent time point yields modified version
update rule definition use modified update rule determine linear
constraints unknown prior probabilities xk
definition modified update rule let agent time point observation obs l occur h thread compressed subjective posterior
probability assignment ii h agent time thread h given
ii h


ii h
th





h normalization factor ensure probabilities threads


agent considers possible sum one
x
th
ii h


h ki h

example modified update rule illustrate modified update rule return
situation described example p example assumed train
running late inform b resulted following updated
interpretation

th
th
th

ia
ia
ia
given example two additional hypothetical partitions set threads
possible alice time point train running late inform
b threads h h h indistinguishable yielding updated
subjective interpretation

th
th
th
ia
ia
ia

time alice considers threads h h h possible corresponding
subjective interpretation

th
th
th
ia
ia
ia

three different subjective interpretations nonzero entries exactly threads
partitions respective pov thread since partitions overlapping merge nonzero entries single probability vector

ia


fipdt logic

note modified update rule update pov thread specify interpretations threads anymore instead reflexive interpretations
thread h given h pov thread used discussed
satisfiability still sufficient representation posterior probabilities
potential pov threads th respective partition indistinguishable
agent therefore yield exactly interpretations noted however ii h probabilistic vector anymore e elements sum
one compared representation belief states section p information
distinguishable worlds lost thus reconstruction agents belief state
representation possible additional specification respective relations
ki
returning representation p use modified update rule obtain inductive definition subjective posterior probabilities

respective unknown prior probabilities xk x xm prior interpretation set threads agent compressed subjective posterior interpretations
ii time point first possible interpretation represented
ii






x





xm











k determined
update factors

















x





x


















j k














hk ki hj

hk ki hj


symmetric matrix indicators
j k denoting whether agent considers thread

hk possible thread hj time base case define
interpretation updates next possible observation time inductively
ii











x













xm





simplify notation following use single factor aki represent agk k observations occur
gregated sequence scaling factors


time points agent e agent subjective posterior
interpretations ii time given
ii x
xm







note potential interpretation updates agent occur time point
observation obs l possible time point hence time
interval two possible observations subjective interpretations constant


fimartiny moller

proposition piecewise constant interpretations let two
time points observations agent possible time
point compressed subjective interpretation ii
constant time points
ii ii
proposition states constraints identified following section
restrict subjective interpretations single time points instead restrict
interpretations respective time interval two possible observations
extracting linear constraints belief formulae
established representation subjective posterior interpretations
terms unknown prior probabilities xk use representation extract linear
constraints xk set belief formulae b
assume distributive property belief operator lemma p
u
applied whenever possible e belief formulae bi
b b
u
u
separated bi
b bi b furthermore without loss generality assume
conjunctive formulae b b b replaced b b b b
trivial beliefs u removed b
moreover assume belief formulae b b represented negation normal
form nnf e negation operator applied atoms since arbitrary logic
formula equivalently expressed formula nnf cf e g baaz egly leitsch
goubault larrecq plaisted assumption restrict b
assumptions following types belief formulae b occur b
u
atomic belief formulae b bi

u
negated atomic belief formulae b bi


disjunctive belief formulae b b b
types respective formula expressed
set linear constraints prior probabilities xk
atomic belief formulae parsimonious representation subjective posterior
interpretations ii h given modified update rule definition requires
adaption deciding satisfiability belief formulae satisfaction belief
formula given pov thread could determined summing respective subjective interpretations threads belief object satisfied threads
agent consider possible anymore w r given pov thread automatically
excluded probability assignment zero compressed representation
respective probability assignments threads considered impossible overloaded
different probability assignments given agent another pov thread illustrated
example obtain adapted version satisfiability testing explicitly ensuring
interpretations threads summed still considered possible
w r respective pov thread additional constraint excludes summands


fipdt logic

zero values original semantics still maintained thus use equivalence classes
c represent set distinguishable situations agent time
ci ci


naturally two threads h h indistinguishable therefore equivalence
class agent time exhibit exactly observations agent
time points threads outside particular equivalence class receive
probability zero every pov thread th within respective equivalence class andas
discussed previous sectiontherefore contribute satisfiability properties belief semantics definition p instead summing
k th c k
threads h certain properties restrict range h ci

maintaining original semantics naturally belief formula satisfiable
exists least one equivalence class satisfies respective beliefs instance
u
belief fact bi
ft satisfiable respect agent compressed subjective
posterior interpretation ii time iff
k
ci
ci

x
n

k h f
hn ci
n


ani xn u



constraint equivalently expressed set linear inequalities
conjunctive disjunctive connectives leading alternative representation
satisfiability
corollary alternative satisfiability representation atomic beliefs let ii


x
ij j x
compressed
j xm
xm
representation agent js respective subjective posterior probabilities time
respectively given let ci cj sets worlds agent
agent j distinguish respective time point atomic belief expression b
satisfiable w r ii
u
belief fact b bi
ft iff




k c
ci



x
k
hn ci


n
hn f

ani



xn



x
k
hn ci


n
hn f

ani


xn u




u pfr
belief rule b bi
rt f g iff





k c
ci



x
k
n hn ci





x
n

k
hn ci



ani xn pfr hn f g
ani xn pfr hn f g




u




fimartiny moller

u

u
j j
nested belief b bi
iff
bj





k c
ci



x
k
n hn cj
k
k
hn cj ci





x
k
n hn cj
k c k
hn cj





x

x
n

anj xn

ani xn

k c k
hn cj





uj

ani xn

k c k
n hn cj

hn




anj xn j

u










hn

discussed representations satisfiability beliefs facts beliefs
rules obtained directly replacing range threads sum
k considered possible agent time inequalities
respective set threads cj

nested beliefs obtained ensuring first two lines every situation
agent conceives possible situation agent j expressed constraint
k c k c k agent js belief respective fact expressed
n hn cj
j

constraint hn within j uj latter two lines ensure
respective situations outer belief agent satisfied well note
belief object might contain additional belief operators e beliefs multiple
levels nesting expressed case evaluation h first two lines
yields additional constraints type formula evaluated
recursively
negated atomic belief formulae satisfy negated atomic belief formula b
u
bi
accumulated probabilities threads satisfy belief object
k must lower higher u e individual
equivalence class ci

disjuncts
negated pushing negations inward
x
representative respective sums defined express


satisfiability atomic beliefs represent negations according beliefs expressed


x
x




u

k c
ci







nested beliefs defined contain negated belief operators expressed
accordingly replacing conjunctive constraints u resp j uj
corresponding disjunctive constraints negated atomic belief formulae


fipdt logic

disjunctive belief formulae inequalities required constraints
disjunctive formula b b b easily expressed additional disjunction
inequalities let c c sets inequalities express satisfiability b b
according respectively constraints b expressed
c c



example trains continued example p set belief formulae b
given train example illustrate extraction linear constraints
set continue use set threads depicted figure p minor
modification reflect model specified b example assume
predicate punct train explicitly encoded respective threads moreover
sake example assume prior probabilistic interpretations yet unknown
use x x denote unknown probabilities note example
dealing prior beliefs e one equivalence class c
scaling factors ani equal one significantly eases presentation
example course general deal multiple equivalence classes
multiple varying scaling factors highly increases complexity presentation
refrain giving explicit examples cases constraints b extracted
follows

pfr
r ca punct
belief b ba
pfr h ca punct h h h

pfr h ca punct h h h

thus application rule yields constraints
x x x
x x x



special case u simplify constraint
x x x



since rules exhibit property slightly deviate
give equivalent equality constraints subsequent rules order simplify
presentation

pfr
accordingly belief b ba
r cc punct obtain
pfr h cc punct h h h h

pfr h cc punct h h h h h

corresponding constraints
x x x




fimartiny moller


pfr
belief b ba
r obs punct train obs ab punct train
h h h h h

pfr h punct train obs ab punct train

h h h h

pfr h punct train obs ab punct train

h h h

pfr h punct train obs ab punct train

thus application rule yields constraint
x x x x x x
remaining beliefs respective belief objects satisfied every thread
thus obtain redundant constraints

x

xk

k

one easily verify prior probabilistic interpretation given example e

x
indeed solution respect constraints course given
example solution expected b defined exactly reflects
situation described examples previous section
transformation disjunctive program
every belief formula b b extractions linear constraints yield set
inequalities form
ai x ai x ai xm bi



xj representing unknown prior probabilities threads h hm coefficients
ai j set respective values ani contribute constraint set zero
otherwise value b set respective limit obtained u
corollary shows every belief formula b b yields disjunctive set inequality
constraints e every belief formula b introduces branches set linear constraints
collecting inequalities form constrain single branch express
constraints matrix form
ax b



















x
b
x b

xm
bm



fipdt logic

form representation close connection linear programming lp linear
programming e g murty solution method optimization
linear function set continuous variables xk optimized respect given
set linear constraints task satisfiability checking require
optimization thus actually solving linear program required work
exploit similarities sets linear constraints lp order
satisfiability solved
standard form lp murty gives set constraints exactly
form every solution x satisfies constraints called feasible
entire solution space called feasible region thus checking whether set belief
formulae b satisfiable equivalent checking whether corresponding lp
non empty feasible region standard lp constraints form
feasible region convex polytope allows performing check little
computational effort garey johnson
unfortunately extracting linear constraints set belief formulae b described
section yield single set constraints form instead
disjunction different sets constraints gives rise representation
satisfiability checking disjunctive program dp balas
corollary satisfiability checking disjunctive program let b set belief
formulae let set threads let set disjunctive branches linear
constraints extracted b according extraction rules
satisfiability checking formulated disjunctive program balas

ad x bd

dd

b satisfiable respect denoted sat b solution
disjunctive program called bounded range every variable xk restricted
lower upper bounds since rely bounded property subsequently
state following
lemma satisfiability checking bounded dp let b set belief formulae
set threads checking satisfiability b respect represented
bounded disjunctive program
proof straightforward corollary shows satisfiability checking
pdt logic represented disjunctive program form since
every variable xk represents probability value xk naturally bounded
xk
disjunctive program feasible region cannot guaranteed convex anymore
guaranteed solution space even represents connected region
significantly increases complexity determining whether nonempty solution space
exists analyze detail connections established
solution approaches discuss next section disjunctive program
form transformed


fimartiny moller

transformation mixed integer linear program
concept linear programs continuous variables xk subject linear constraints
form extended called mixed integer linear programs milps schrijver
opposed standard linear programming milps required
variables xk continuous domain instead milps use mix continuous
integer variables several equivalent ways representing milp adopt
representation fischetti glover lodi specifies constraints
milp
ax b

xj integer

j

index set indicating variables xj integer variables special
case milps mixed integer linear programs williams integer
variables xj restricted binary values
ax b

xj


j

augmenting set variables x binary switching variables xj every possible
disjunction possible represent disjunctive programs form milps
form balas leads central satisfiability checking
pdt logic
theorem satisfiability checking milp let b set belief formulae
set threads checking satisfiability b respect
transformed corresponding mixed integer linear program b
satisfiable respect iff feasible solution
proof lemma shows satisfiability checking pdt logic represented
bounded disjunctive program set belief formulae b satisfiable iff
corresponding bounded disjunctive program feasible solution proof theorem
balas shows every bounded disjunctive program equivalently
represented mixed integer program consequently satisfiability checking
pdt logic equivalent checking whether feasible solution
leverage theorem obtain complexity satisfiability
pdt logic
theorem complexity pdt sat w r given set threads checking satisfiability set pdt logic belief formulae b respect given set threads
np complete
proof generally known checking whether bounded mixed integer linear
program feasible solution np complete cf bienstock theorem
shows satisfiability checking pdt logic respect given set threads
reformulated milp bounded variables xk cf lemma follows


fipdt logic

satisfiability checking set belief formulae b respect given set threads
np
arbitrary propositional formulae f cf definition p expressed pdt

logic belief object strict prior belief bi
f since well known
boolean satisfiability sat np complete cook follows
np transformed satisfiability checking pdt logic
hence satisfiability checking pdt logic np hard consequently npcomplete
np completeness shows np therefore immediately obtain another important property satisfiability pdt logic
corollary decidability pdt sat checking satisfiability set pdt logic
belief formulae b decidable
milps subject extensive decades thus ample variety
solving methods proposed e g balas ceria cornuejols balas ceria
cornuejols balas perregaard name notable work
milp solving especially fischetti et al bertacco fischetti lodi
feasible solutions milps gave rise efficient implementations
milp solvers commercial e g ilog gurobi optimization inc
non profit products e g gnu project computational infrastructure operations
coin project given set threads pdt logic satisfiability
checking reformulated milp thus state art
milp solvers exploited relatively fast satisfiability checks instances
pdt logic belief formulae b respect given set threads
section satisfiability set pdt logic belief formulae b decided respect given set threads even specific prior
probability assignment specified overall goal section design
decision procedure requires set belief formulae b input continue
discussion satisfiability testing development method automatically
construct set threads representing background knowledge specified b
prior constraints possible threads
determine whether set belief formulae b satisfiable need obtain set
possible threads reflects background knowledge specified b section
describe identify certain constraints set possible threads prior
actually starting generate threads represent information specified b
identify prior constraints discuss different properties belief formulae contained b properties create taxonomy belief formulae depending
respective impact set possible threads beliefs certain properties
used constrain search space sets possible threads prior actually search sets discussing prior constraints section use
section develop decision procedure pdt logic requires neither
specification probabilities specification possible threads


fimartiny moller

taxonomy belief formulae
set belief formulae b may contain beliefs features different
impacts sets admissible worlds specific time points discuss
features yield taxonomy belief formulae taxonomy
allows classification beliefs three different types respect impact
sets admissible worlds particular identify beliefs independent
specific probability assignment kripke relations ki classification
technical purposes beliefs depend neither specific probability assignments
specific kripke relations used derive initial constraints sets possible
worlds time points tmax use b denote set worlds
admissible respect set belief formulae b use b denote set
admissible worlds respect set belief formulae b time
recall three different kinds beliefs beliefs facts beliefs rules
beliefs beliefs differentiate prior beliefs hold time point
therefore commonly known among agents posterior beliefs hold
time points
u pfr
distinguish beliefs rules bi
rt f g respect call
pfr
pfr
f g dynamic rule accordingly
f g static rule call rt
rt
separate beliefs rules beliefs static rules beliefs dynamic rules
respectively beliefs differ respect temporal impact static rule
constrain possible worlds instantaneously e r pfr f g states
world f g hold dynamic rule hand requires
whenever world f occurs must another world g
time steps
finally classify beliefs respect probabilistic quantifications call
u
belief bi
strict u u sake simplicity
following assume without loss generality strict beliefs represented


u strict belief bi
easily rewritten bi
call belief
trivial u obviously beliefs trivially satisfied arbitrary
interpretation thus impact satisfiability checking therefore
removed b
remark definition belief semantics definition p follows

special case strict beliefs bi
agent considers occurrence belief
objects complement impossible ii occurrence indeed impossible
thus strict beliefs comply common definitions knowledge justified true belief
belief stable respect truth cf e g shoham leyton brown
page consequently could refer strict belief knowledge equivalently
use established knowledge operator ki instead bi

remark note concept strict beliefs applies positive beliefs bi


negation belief bi follows definition p
fr
fr
belief object temporal rule rt
f g represent rt
f g possible
need consider frequency functions correspond axioms
definition p use point frequency functions pfr frequency functions used
negations need defined accordingly



fipdt logic

least one thread satisfy belief object turn implies

consequently beliefs bi
considered non strict following discussion

features create taxonomy beliefs depicted figure
identify prior constraints set possible threads taxonomy obtained
successively distinguishing strict non strict prior posterior beliefs
beliefs facts rules nested beliefs finally beliefs static dynamic
rules nested beliefs considered strict prior beliefs involved beliefs
strict prior otherwise considered non strict posterior nested belief
actually strict prior unnest belief consider innermost belief
expression since prior beliefs commonly known therefore identical agents
ab evident strict belief agent agents know agent
strict belief consequently strict prior beliefs nested arbitrary depth
without introducing constraints satisfied exactly innermost
belief satisfied thus need consider nested strict prior beliefs explicitly
taxonomy gives rise three different types belief formulae respect
impact sets admissible worlds
definition belief formula typification set belief formulae b categorized
three different types beliefs
type beliefs restrict set admissible worlds b every
time point thus type beliefs highest impact
exploited prune set admissible worlds b globally evaluation
beliefs relies neither specific probability assignment given kripke
structures ki
type beliefs restrict sequences possible worlds moreover
potentially restrict sets admissible worlds b specific time points
thus type beliefs less impact type beliefs
exploited prune sets admissible worlds b locally evaluation
beliefs relies neither specific probability assignment given
kripke structures ki
type type encompasses remaining beliefs b neither type
type beliefs beliefs situation specific cannot used prune
sets admissible worlds priori satisfiability beliefs depends suitable
probability assignment evaluation kripke structures respective
threads
use tk b denote set type k beliefs b
main goal belief formula taxonomy identify constraints possible
worlds possible threads h evaluated prior searching suitable
probability assignment namely belief formulae b b prune
search space possible sets threads may satisfiability b
noted existence thread h violating belief b b
technically preclude satisfiability b respect special


fimartiny moller

beliefs

non strict beliefs


strict beliefs



innermost beprior beliefs
lief interest

posterior beliefs





belief beliefs

u
bi
bj


belief beliefs
u

b
bj
tf
b

belief rules
fr
bi
rt f g

belief facts

bi
ft

disjunctive belief
formulae


bi
bi


belief dynamic rules


belief facts

bi
ft
belief rules
fr
bi
rt f g

disjunctive belief
formulae


bi
bi


belief dynamic rules


b

belief static rules

b

type beliefs
highest impact
restrict every
world every time point

belief static rules


type beliefs restrict threads independently probabiliy assignment
moreover potentially restrict possible worlds individual time points

figure taxonomy belief formulae



b

type remaining beliefs
treated way

fipdt logic

case suitable probability assignment thread h
belief b b b b satisfied could still suitable probability
assignments sat b holds iff h effect excluding
thread h assigning prior probability h zero cf remark
p e respective thread marked impossible since aim reducing
search space possible threads input satisfiability check sat b
exploit belief formulae b b exclude impossible threads prior searching
suitable probability assignments
type belief formulae depicted figure set type belief formulae
pfr
formed formulae strict prior beliefs static rules bi
r f g b since
prior beliefs represent background knowledge since follows definition
strict beliefs cannot violated world clear rule r pfr f g
satisfied static rule satisfied every world
b define set type beliefs
pfr
b b b b bi
r f g



arbitrary formulae f g
type belief formulae set type beliefs contains strict prior beliefs
set b contributions set b twofold b
comprises strict prior beliefs every thread potential set threads satisfy
beliefs b b moreover constraints b may constrain sets worlds
b individual time points regardless specific thread according
figure define set type beliefs


b b b
b bi
ft
pfr
b bi
rt f g



b bi
bi






potential set possible threads beliefs specified set b
satisfied every thread h note satisfiability beliefs dynamic rules
disjunctive belief formulae generally depends worlds multiple time points thus
satisfiability b cannot ensured constraining sets worlds single time
points however analyzing strict prior beliefs facts potential interplay
dynamic rules derive constraints sets worlds b specific time points
follows

strict prior beliefs facts b bi
ft restrict set admissible worlds b
time enforcing f holds every world b following use tf b
denote strict prior beliefs facts f certain time points moreover use

b ft shorthand bi
ft b denote b enforces f time
interplay existing constraints sets possible worlds b individual
time points strict beliefs dynamic rules yield additional constraints belief
pfr
formula b bi
rt f g additional constraints might derived depending
type belief respective rules premise f b tf b ft given


fimartiny moller


extract strict prior belief fact b bi
gt restricts
set possible worlds time point therefore added tf b
since dynamic rules considered temporal implications cf definition
section rules applied backwards obtain additional constraints
pfr
belief formula b bi
rt f g given rules negated conclusion g
already enforced time point e b tf b gt rules premise

f cannot satisfied time thus add belief b bi
ftt
f
additional constraint b
extending set type beliefs dynamic rules may lead chained ex pfr
tension belief dynamic rule bi
rt f g corresponding belief


f
bi ft b lead additional belief bi
gt tf b
pfr
turn might trigger another dynamic rule bi
rt g g analogously additional
belief tf b could trigger backward rule applications
capture constraints emerge forward backward chaining strict
dynamic rules define set tf b following fix point set

tf b


bi
ft b

bi
gt

pfr
bi
rt f g b

b b ft


bi
ftt

pfr
bi
rt f g b

b b gt



determined constraints individual time points reduce

set tf b contains one belief bi
ft every time point


f
b contains multiple beliefs bi ft bi gt regarding time point

replace joint belief bi
ft f f g note substitution
uses lemma p merge different belief expressions one expression
conjunctive belief object still assume belief formulae conjunctions belief
operators separated atomic belief formulae
type belief formulae set type belief formulae consists beliefs b
neither type type beliefs thus define set
b b b b



representation considered influence temporal rules set tf
b


principle information disjunctive formulae b bi
bi
n b could yield
additional constraints sets b tf
b enforces n disjuncts b false remaining
disjunct must satisfied belief objects respective disjuncts might dynamic rules
formal representation consideration would rather intricate specification since
ensure potential thread satisfies beliefs b anyways omitting disjunctive formulae
construction tf
b impact satisfiability yet actual implementation
described procedures could exploit consideration obtain additional pruning conditions special
cases



fipdt logic

example trains continued continuing set belief formulae b example p assuming conjunctive formulae b b b treated
individual formulae b b obtain following sets typed belief formulae
pfr

b ba
r punct train train city obs punct train
b


b ba
ca


ba


b
b



ba
r pfr punct ca cc

pfr
ba
r punct ca cc


ba
r pfr punct cc cb


ba
r pfr punct cc cb


tf b ba
ca


ba


b
b
b
b
b
b

b b b b

pfr
ba
r ca punct

pfr
ba
r cc punct

pfr
ba
r obs punct train obs ab punct train

b
b
b

taxonomy belief formulae provides means construct sets admissible worlds
b every time point type beliefs e beliefs highest impact
constrain global set possible worlds b certain beliefs type materialized
set tf b give additional constraints specific time points
subsets b b need considered possible worlds time sets
b b together provide satisfiability conditions independent
specific probability assignments beliefs type need considered
probabilistic constraints check whether b satisfied respect e
satisfiability sat b previous section reduced sat b
unsatisfiability b yet shown constraints b b
since prior constraints define necessary conditions potential thread give
rise definition thread soundness respect given set belief formulae b
definition thread soundness let b set belief formulae let b
b set type type belief formulae set respectively
thread h sound respect b denoted snd h b satisfies belief formulae
b b
snd h b b b b h b




fimartiny moller

accordingly use snd b denote threads h sound
note definition relies strict prior beliefs soundness property
therefore verified every thread individually without consider threads
probability assignments thus simplified version model checking procedure
section used verify soundness intuition behind property
verify easily prior checking sat b therefore obtain reduced version
satisfiability
theorem reduced satisfiability checking let b set belief formulae let
b set type beliefs b according let set sound
threads b satisfiable respect iff b satisfiable respect
sat b snd b sat b



proof follows directly definition snd b defined satisfies
belief formulae sets b b consequently sets resemble tautologies
respect therefore impact satisfiability checking
properties thus instead checking b satisfiability suffices check set b
b b exactly definition b
constraining possible worlds individual time points
classification beliefs b three different types continue
constructing sets possible worlds b every time point main goal
section identification obvious pruning conditions possible worlds specific
time points since process searching set possible threads
satisfies set belief formulae b constraints sets b potential
significantly reduce later used search space thus section highlight
possible optimizations implementation pdt logic sat solver even following constraints notor partiallyapplied search possible threads
described subsequent section carried yet potentially larger search
space
since set type beliefs satisfied every admissible world define
global set admissible worlds b follows
definition global set admissible worlds let b set belief formulae
corresponding sets belief objects fb type beliefs b set
admissible worlds b w r b given
n


pfr
b b fb adm bi
r f g b f g

remark definition uses adm ensure worlds b admissible
defined external definition p alternatively could use existing
formalism encode admissibility conditions directly strict prior beliefs b
pfr
pfr
bi
r obsg l l g g bi
r obsg l obsg l represent conditions
definition respectively however since conditions independent
respective modeled include specific belief
set b use external constraints


fipdt logic

example trains continued global set worlds b admissible respect
b example p automatically constructed combinations
events fb shown example p given combinations admissible
respect definition satisfy type beliefs b example
p refrain enumerating worlds explicitly instead describe
worlds excluded herbrand base b fb fb fb follows
possible shared observation b fact train punctual
obs ab punct train every possible world observation occurs admissibility conditions require agents b observe respective train
punctual train indeed punctual furthermore beliefs b
require corresponding observation every possible world
train punctual incidentally enforces admissibility conditions
observations
next build upon set globally admissible worlds b use set
type beliefs prune set admissible worlds b individual time points

definition local sets admissible worlds let b set belief formulae
corresponding sets admissible worlds b tf b set materialized strict
prior beliefs induced b b set time points set
admissible worlds b w r b time given
n



f
b b bi ft b f


example trains continued obtain scenario original example
assume tmax set tf b identified example restrict set
worlds time
n

b b ca
time points options restrictions thus respective
local sets b possible worlds time points remain b
definition formulate constraints set sound threads
h h b



note constraint provides necessary sufficient condition thread
soundness illustrate consider example set tf b requires
ca holds every possible world time thus constrain b shown example thread violating constraint
inherently unsound hand thread according may contain
fact say punct h whichaccording b yields sound thread
cc h holds well thus provides general constraints
set threads respect beliefs b tf b additional beliefs
b discard individual threads catching potential unsatisfiable interplay
possible worlds different time points


fimartiny moller

course general possible methods discussed far special
cases one thing possible b induces set b tf b inconsistent
beliefs e contain beliefs contradict b b
empty precludes creation set threads b
case satisfiability checking terminate immediately negative
another possible simplification process empty set
b case probabilistic constraints could impact satisfiability
b thus unnecessary search suitable probability assignment case
needs checked whether threads compliance sound according
definition thread found satisfiability checking terminate
immediately positive otherwise b unsatisfiable verifying soundness
single thread done simplified version model checking procedure
section therefore ptime cf corollary however number threads
satisfying condition grow exponentially number ground atoms
number time points finding sound thread complex
theorem complexity finding sound thread let b set belief formulae
included formulae grounded deciding whether exists sound thread
respect b defined definition np complete
proof according definition set sound satisfies formulae set
b b treating belief objects atoms f time points individual
variables ft transform beliefs facts belief rules b b
boolean sat follows

bi
ft

ft

pfr
bi
rt f g

tmax



ft gt

accordingly disjunctive belief formulae expressed transforming every
disjunct individually transformation requires tmax conjuncts every belief
operator therefore performed linear time since boolean sat
known np complete cook follows searching sound thread
respect b np
np hardness already shown proof theorem
p consequently follows searching sound thread respect b
np complete
noted analyzes worst case complexity
practice finding sound thread usually dominated worst case
cases sound thread found easily employing principle least effort
pfr
belief temporal rules bi
rt f g choosing worlds f ensures
consequences rule evaluated time points accordingly
transformation defined temporal rules point frequency functions pfr
frequency functions used transformation adapted accordingly



fipdt logic

disjunctive rules disjunct selected temporal rule triggered
fact course heuristic may give sound thread immediately
every input b represents feasible illustrate
example subsequently
work consider ground formulae pdt logic general formalism
introduced section allows treatment non ground formulae well however
non ground formulae complexity theorem hold
transformation boolean sat exponential number possible
groundings finding sound thread requires use sophisticated grounding procedures e g dal palu dovier pontelli rossi faber leone perri
beyond scope work
sets possible worlds identified every time point proceed
creating sets representative threads respect constraints aim
following discussion successive generation set representative threads
sat b decided
representative threads
definition constraint gives rise potential definition set
possible threads constructing possible combinations sound world sequences
b however would still unnecessarily large set possible
threads instead constructing threads explicitly heuristically create
representative threads represent excerpts situations modeled b
uses heuristics successively expand set representative threads soon
suitable set threads e model b found decision procedure terminate
positive set representative threads satisfiability
b additional threads created positive satisfiability obtained
possible threads created consequently heuristic search
constitutes complete decision procedure pdt logic
following discussion assume set b nonempty e
additional constraints need satisfied generated set threads otherwise
set b empty satisfiability could already determined checking whether
sound thread respect b exists discussed previous section
would need generate specific set threads
u
u
beliefs facts bi
ft b dual belief negated fact bi ft
u u cf corollary p satisfied well
u fr
beliefs rules bi
rt f g satisfiability depends accumulated subjective posterior interpretations threads weighted respective frequencies goal
u
following procedure successively create threads every belief fact bi
ft
b obtain representatives set threads satisfy
respective fact ft set threads satisfy ft ii exhibit varying fre u fr
quencies beliefs temporal rules bi
rt f g b consequently belief
formulae considered splitting rules application generate representative threads procedure similar tableau methods however beliefs
temporal rules induce splits forward backward time thusunlike con

fimartiny moller

ventional tableau methodsthe following procedure create tree structure
instead set sequences represent possible threads key difference
generation representative threads logical sat solvers pdt logic
virtually impossible discard generated potential thread probabilistic nature semantics requires threads considered given formula
holds threads thus even threads violating objects given
belief formulae usually required satisfiability corresponding set belief
formulae b following discussion provides general outline decision procedure
pdt logic set belief formulae b given actual implementation
methods possible obtain feasible run times practical
optimization techniques logic reasoning implementations would need
implemented beyond scope work
generating representative threads
u
since existence non strict belief fact bi
ft requires existence
least two threadsone respective belief object satisfied one
start creating two threads hb b tmax obtain
set ht h h h h belief objects ft contained
set b obtain minimal set set threads belief formulae
b b potentially satisfied set subsequently expanded
additional threads suitable set threads satisfiability b
found additional threads created
allow concise notation following adapt frequency notation
belief objects use denote true denote false
generally x denote holds frequency x course values x
occur belief objects represent temporal rules notation try
create initial sound threads

h j

j

h


j

j



holds respective belief objects j belief formulae bj b
initial set h h meant represent two extreme choices possible
threads respect b provide suitable starting point subsequently
employed search heuristic general necessarily possible create extreme
threads compliance every possible set belief formulae b
u
u
instance b might contain conflicting beliefs facts bi
ft bi ft obviously
single thread satisfy belief objects simultaneously might still possible
u
technically non strict belief bi
could satisfied single thread h h
beliefs quantification upper bound u might give rise optimizations
actual implementation sake simplicity consider case explicitly
u
u


notation slightly simplified disjunctive belief formulae bj bi
j bi j use j


abbreviation j j



fipdt logic

create set threads thattogether suitable probability assignmentboth
beliefs satisfied thus characterize intended goal creating
initial threads h h represent hard constraints threads
suitable threads match constraints employ principle least
u
effort adding facts possible thread every belief fact bi
ft
add explicit constraints f h f h h represents
thread belief objects true h represents set belief objects
u fr
false beliefs rules bi
rt f g add g h resp f h
whenever another constraint enforces f h resp g h occurrence
fr f g trivially satisfied frequency
f respectively g enforced h rule rt
e occurrences f followed g steps
constraints need added analogously h need ensure f holds
least whenever f h holds g h holds well
u
u
disjunctive belief formulae bi
bi need ensure belief object
holds thread h described holds thread h
possible respective belief object thread h chosen
additional beliefs triggered say belief triggered fact f existence
f enforces another constraint belief temporal rule disjunctive belief
formula nested belief formulae treated respect innermost belief
object constraint cannot applied conflict previously added
constraints b simply skipped stage creation h h
initialization step heuristic search possible set threads skipped constraints
still considered later subsequent expansions
whenever constraint regarding fact f added h h necessary
check whether triggers additional rules set type beliefs b necessary
resulting facts added respective threads application works analogously
construction set tf b described section finally belief
formulae processed search sound thread respect created
constraints usually sound thread found easily choosing facts
yet unconstrained h h trigger additional beliefs
especially possible worlds h unconstrained choose h b
contain belief rules purely negative preconditions disjunctive belief
formulae satisfiable generally principle least effort
employed worlds selected belief formulae need
considered selection impossible addition f f
world triggers additional beliefs consequences adding respective fact
need evaluated well resulting set h h provides minimal
set representative threads used check sat b
following principle least effort used obtain representative threads efficiently possible constraints used following example
provide minimal number constraints need enforced obtain representative threads desired threads h h worlds without specific
constraints simply use one easily verify indeed yields threads
compliance



fimartiny moller

example trains continued continue train example sets typed
belief formulae specified example p example p shown
set worlds time b restricted ca
every world b set b contains three non strict belief formulae namely

pfr
b ba
r ca punct
b

pfr
ba
r cc punct
b

pfr
ba
r obs punct train obs ab punct train
b
evaluating belief formulae obtain constraints possible worlds
threads h h visualization following steps given figure
analysis belief formula b constraints punct h
punct h facts turn trigger rules b b respectively


ba
r pfr punct ca cc

pfr
ba
r punct ca cc

b
b

resulting additional constraints cc h cc
h
application belief formula b yields additional facts punct h
punct h triggers rules b


b
r pfr punct cc cb
ba

pfr
b
r punct cc cb
ba
resulting additional constraints h cb h
cb
note belief formula


ba
r pfr punct train train city obs punct train
b
b provides global constraint set possible worlds b
obs punct train holds every world punct train holds thus obtain
thread h additional facts obs punct h obs punct
h
finally rule

pfr
ba
r obs punct train obs ab punct train
b



fipdt logic


h b
b

h b

ca
punct
obs punct
ca
punct

b

b
b

b

b

cc
punct





b




cc
punct
obs punct
cb



b



cb







figure visualization representative thread set generation train example
threads start given facts ca applications
formulae b h contains positive belief objects h
contains negative belief objectsare marked blue additional constraints
b b marked red

change created threads h h h rules precondition never
enforced satisfied thus resulting frequency one lack
observation h even though nonpunctual trainsensures resulting
frequency zero
trying solve resulting sat b h h non strict belief
formulae yield following constraints h
b
b



b

h

h

h

clearly constraints cannot satisfied simultaneously therefore set
h h insufficient satisfiability b therefore b
created set threads fails satisfiability b additional threads
created continue searching expanded set b satisfied
respect existing thread h additional thread h created
ensuring one conjunct h h satisfied anymore
e given thread h existing constraints xk k thread h
obtained substitution


h xj j h
xj j x k k x k xk

j

j k

every substitution one conjunct constraint provides choice point
direct continuation search suitable set threads constraint notation
used provide formal characterization choice points practice thread
h satisfying constraint usually created easily addition
modification existing facts h follows simplify following discussion
assume expansion keeps history expansion steps resulting consequences
effects adding additional f undone respective fact f
changed newly created thread


fimartiny moller

definition principle least effort ple expansion let set threads let
b set type belief formulae principle least effort expansion creates
expanded set h according single application one following rules
u
possibly negated belief fact bi
ft b exists thread

h f h resp f h yet enforced h created
duplication h additional constraint f h resp f
h

u fr
belief temporal rule bi
rt f g b exists thread

h f h g h resp g
h

yet enforced h created duplication h additional constraint
g h resp g h

u
u
disjunctive belief formula b bi
bi b possible
u
expansion carried respect one belief bi
described two
previous steps

nested beliefs treated respect innermost belief object
thread h created h addition f h
fact f time point f h enforced original thread h
consequences adding f h undone thread h

created thread h additional belief formulae b
triggered modification need evaluated obtain sound thread
described creation initial threads h h

intuition behind ple expansion create additional threads satisfy
alternative set belief objects contained set b little effort possible
general possible add constraints arbitrary facts arbitrary time points
continue successive expansion thread however would
rather aimless exploration exponential search space following ple expansion
instead helps direct search suitable model guided rules specified
b illustrate consider figure previous example possible pleexpansions could example additional thread altering punctuality
train clearly resulting situations intended model already
considered original thread specification cf figure p hand
deviating ple expansion one could add additional factssay ca
arbitrary time points could give rise multiple subsequent expansions
resulting thread may actually serve generate model b
situation intended specification b example train punctuality
illustrates requirement undo operation fact punct h produced
additional constraint cb time clearly constraint
enforced longer ifbased h thread h created
punct h
information violated constrains linear program corresponding
sat b h h perform dependency directed selection choice points


fipdt logic

u
lower bound belief bi
k cannot satisfied current set threads

additional thread h created existing constraints h h
substituting respective constraint k shown
dependency choice points violated lower bounds best illustrated
previous example clearly upper bounds induced b b
lower bound induced b hinder satisfiability b respect created
threads belief object formula b b create additional thread h
yields updated constraint

b

h x h

factor x depending frequency respective belief object h
constraint induced b remains unchanged constraint allows
lower values h thus lower bound induced b remains unsatisfiable
belief object formula b create additional thread instead yields
constraint
b

h x h

whichthrough nonzero values x h potentially allows lower values
h note example uses atomic belief formulae disjunctive belief
u
u
formulae b bi
bi respective belief objects violated
lower bound used direct selection subsequent choice points given
disjunct b satisfiable course
combining information violated lower bounds principle least effort
provides multi stage heuristic proceed dependency directed selection choice
points
definition dependency directed search heuristic let b set type belief
formulae let set threads sat b holds enable
dependency directed search expanded set sat b holds
expanded additional thread h according following rules
existing set threads fails satisfy lower bounds constraints induced
belief formula b belief object additional thread h obtained
one ple expansion respect expanded h
otherwise dependency directed ple expansion possible another ple expansion
applied possible
finally ple expansion possible additional thread h created
adding constraint f h resp f h arbitrary facts f
yet constrained h
intuition behind heuristic information violated probabilistic constraints used select suitable next expansion step possible otherwise
possible ple expansion steps performed use rules b guide


fimartiny moller

search ple expansions possible additional constraints employed continue search restricting possible expansions respect criterion
one step follows principle least effort illustrate consider example
shown created set threads h h fails satisfy lower bound
belief formula b thread h world h obs punct train
precondition rule b satisfied consequently single step
ple expansion h could change constraints induced b hand
h provides two choice points therefore preferred expansion note
soundness requirement determine choices unconstrained facts thus
general proposed expansion may produce threads already contained
constraining facts determined consider scenario
explicitly instead assume cases expansion steps performed
additional thread created
thread generation example
illustrate expansion set threads respect dependency directed
search heuristic definition following resume train example
example trains continued previous example set threads h h
created fails satisfiability b consequently heuristic
definition used iteratively expand set expanded set threads
created model b obtained expansions possible
belief formula

pfr
r obs punct train obs ab punct train
b ba
already identified belief formula yields constrains unsatisfiable
lower bound therefore used guide subsequent expansion
already discussed single step ple expansion h possible influence
constraints induced b therefore continue expansion thread h
visualization following steps given figure
two worlds h obs punct train satisfied namely
obs punct h obs punct h occurrences allow ple expansion choose h perform expansion yields
thread h additional constraint obs b punct h
constraints h remain intact since constraints need undone
adding obs b h
expanded set h used check sat b thread
h rule contained b satisfied one two occurrences obs punct train
therefore yields frequency consequently transformation linear
program obtain constraints
b
b



b



h





h h





h





fipdt logic

h

h


h b
b

h b

ca
punct
obs punct
ca
punct
obs punct
ca
punct
obs punct
ca
punct


obs b punct

obs b punct
b
b

b
b

b



cc
punct

b


b




obs b punct

cc
punct
obs punct
cc
punct
obs punct
cc
punct
obs punct
cb





b

cb

b









figure visualization ple expansions train example applications formulae
b marked blue additional constraints b b
marked red expansion steps marked green

apparently b allows lower values h set constraints
induced b resp b still obtain h constraint induced
b requires h since still suitable
probability assignment since sum priors exceeds one consequently thread
set expansion continues constraints thataccording condition
search heuristicthread h suitable candidate expansion respect
belief object b
thus h create additional thread h ple expansion
case possible expansion step obs b h frequency
one rule contained b thus testing sat tk b expanded
set yields following constraints
b
b



b



h





h h h





h



constraints satisfiable instance


thus sat b returns positive satisfiability checking b terminate

concludes satisfiability testing set belief formulae b originally
specified example p nevertheless illustration purposes
applications ple expansion steps figure changes additionally
created threads obtained respectively different application belief
formula b marked blue respective threads worlds h remain
unconstrained saturated application ple expansions marked
worlds give rise expansions according step search heuristic





h b


h b
b

h

h

h

h

h

h

h



ca
punct
obs punct
ca
punct
obs punct
ca
punct
obs punct
ca
punct
obs punct
ca
punct

ca
punct

ca
punct
obs punct
ca
punct
obs punct
ca
punct

b















b
b

b







b

b

obs b punct

obs b punct









obs b punct
b





b


b
b







cc
b
punct










cc
punct

obs punct
cc
punct

obs punct









cc
punct
obs punct
cc
punct
obs punct
cc
punct
obs punct
cc
punct
obs punct
cb

b

b

obs b punct

cc
punct

cc
punct















b









obs b punct
b






cb

cb

cb

cb

obs b punct
b











cb



cb

cb

cb

b



martiny moller

figure visualization continued ple expansions train example applications
formulae b marked blue additional constraints b
b marked red expansion steps originating h h
marked green orange respectively unconstrained worlds marked


fipdt logic

comments resulting set threads example necessary comparing final threads depicted figure original set threads introduced
figure shows expansion largely corresponds original specification
except differing thread labels notable differences however
first additional predicate punct train introduced
example p allow concise specification background knowledge
concept nonpunctual trains especially respective ramifications
implicitly encoded figure well change properties
modeled example
explicit representation train punctuality observations nonpunctual
trains expressed explicitly example previous example uses
ramifications nonpunctual trains model observations since rules b
b assert ramifications punctual respectively nonpunctual trains common
knowledge among alice bob modeling alternatives preserve intended
meaning example
another difference timing alices observations original example
assumed observation occurs time point train supposed
arrive destination city current example assume alice already
observes train punctual leaving departure city reason
change solely illustration purposes specifying rule b alice
immediately observes nonpunctual train yields type belief thus serves
illustrate additional facts obtained global constraints since rule
b ensures potential calls bob e shared observations occur two time points
alices original observation intended model original example still
maintained
points concerned specific details modeled domain
comparing set threads figure threads figure shows
general modeling instance analyzing worlds time point
figure shows alice necessarily train train
previous time point later time points naturally one expect
alice train intermediate time points boarding exiting
train instance frame e g reiter occurs
specifying dynamic systems logic formulae generally frame
concerned finding suitable set axioms describe adequate evolutions
world modeling perspective evolutions alice vanishes reappears
train ride obviously adequate evolutions world application
final step search heuristic could yield tremendous blow
considered set threads modeled would clearly
unintended resulting could still serve satisfiability
respective set belief formulae b even though might desired
could fixed adding successor state axioms style reiter
e g specifying alice train remains next time point
unless explicitly exits train


fimartiny moller

properties representative thread generation
section provide connect set representative threads satisfiability pdt logic discuss complexity generating representative
threads
theorem pdt logic decision procedure let b set pdt logic belief
formulae let h h initial set threads length tmax obtained
b according equations iteratively expanding set according
search heuristic definition testing sat b expanded sets
sat b returns positive ii fully expanded respect
search heuristic yields sound complete decision procedure sat b tmax
proof initial set threads h h expanded sets obtained ple expansion steps defined sound threads according
definition considered theorem p states decision
sat b equivalent sat b set contains threads sound
respect b positive sat b threads length tmax shows
model b thus sat b tmax follows consequently positive
sat b proofs b satisfiable tmax time points
hand model b found possible create
additional threads according search heuristic definition p search
space fully explored follows model b tmax time points
exists therefore b unsatisfiable tmax time points consequently follows
pdt logic decision procedure sound
properties completeness straightforward arbitrary
input b tmax model found non existence model
proven full exploration search space thus completeness procedure
follows
following analyze complexity generating representative threads
set belief formulae b
theorem complexity representative thread generation let b set belief
formulae creating set expanded representative threads b expspace
proof maximum number possible threads given set belief formulae b
determined size fb maximum time point tmax recall equation p use fb identify event formulae b use set
ground atoms construct possible worlds since every pdt logic formula contains
two event formulae obtain constraint fb b largest set possible
threads obtained sequences combinations possible worlds
time points yielding tmax b possible threads worst case fb b representative threads created obtaining satisfiability consequently creating
possible representative threads complexity class dspace p n
class expspace
theorem immediately obtain complexity satisfiability sat b tmax


fipdt logic

corollary complexity pdt sat without given set threads checking satisfiability set pdt logic belief formulae b without specification possible threads
expspace
proof generation representative threads expspace shown theorem given set threads theorem shows satisfiability checking
pdt logic np thus increase complexity pdt sat without given set threads follows expspace
comments necessary since decision procedure outlined
theorem yields exponential expansion possible threads need
fed decision sat b exponential space requirement
evident however illustrated example positive satisfiability
possibly already obtained small sets possible threads diminutive
size compared entire search space moreover discussion train example
shown major part search space stems insufficient rule specifications
specific formalism presented decision procedure general
rule modeling approaches namely aforementioned frame
incomplete model specification leads generation unintended
serve satisfiability modeled intended
respective modeler could lead worst caseboth complexity
model perspectivethat exponential execution decision procedure
shows input specification specify intended model
addressed modeling side providing additional axioms ensure
unintended model generated however leads significant increase
specification size difficult ensure rule specifications indeed every
unintended model prevented
ple expansion steps could used heuristic discriminate intended
unintended shown train example applying ple expansion steps
relatively small set threads indeed corresponds intention
model expansions inherently leads exponential growth
set threads introduces additional unintended thus omitting final
step search heuristic would give significantly faster termination decision
procedure even though resulting procedure cannot prove unsatisfiable sets formulae
longer however one could use expansion procedure create set intended
threads first andpossibly inspection modelercontinue use set
perform satisfiability checks respect intended model
runtime expansion procedure resulting satisfiability checks clearly
tilted towards positive side set belief formulae satisfiable good
chance satisfiability shown small number steps negative
hand obtained exhaustive exploration search space
however many applications negative satisfiability required instance
checking entailment b b checked reformulation sat b b
applications relying reformulation presented procedure unfavorable
positive entailment never obtained efficiently one could overcome
sketched generating set intended threads first use


fimartiny moller

set perform subsequent satisfiability testsonce set threads given decision
complexity significantly decreases shown section

conclusion
work extending apt logic dynamic scenarios multiple agents
developed general framework represent reason belief change multiagent systems next lifting single agent case apt logic multiple agents
provided suitable semantics temporal evolution beliefs resulting
framework extends previous work dynamic multi agent epistemic logics enabling
quantification agents beliefs probability intervals explicit notion temporal relationships provided temporal rules building concept frequency
functions
quantification beliefs probability intervals instead precise values
advantage domain experts model provide
background knowledge domain specify certainty
respective specifications narrow interval quantifications reflect high certainty
vice versa significant advantage compared probabilistic approaches
approaches sharp probability values required human
usually express precise values thus rely guesses specifying precise
values actually precisely known yield misleading pdt logic
exposed required guess sharp values specify

shown two alternative ways specifying pdt logic
explicit enumerations possible threads set appropriate
rules approaches exhibit specific advantages drawbacks many
domains requiring exhaustive enumeration possible threads poses severe obstacle
modeling respective scenarios combinatorial blow renders specification
practically unmanageable hand domains e g attack
graphs cyber security scenarios come explicit specification anyways
types shown possible check satisfiability
efficiently
overcome modeling disadvantages thread shown
domain solely specified set pdt logic belief formulae
domains natural way specifying
provides means easily adapt many existing problemsthat specified formal
languages sets rulesto pdt logic hand waiving requirement
exhaustive thread specification according probabilities extremely increases
complexity checking satisfiability set pdt logic formulae nevertheless
even imprecise probabilities given resulting remains decidable
increased complexity might curtailed search heuristics
combinations approaches possible well exhaustive specification
possible threads given probability intervals specified beliefs
imprecise probabilities satisfiability transformed mixed
integer linear program variety efficient solvers available class


fipdt logic

transformation provides means exploit existing optimizations check
satisfiability pdt logic formulae

references
aumann r j agreeing disagree annals statistics
baaz egly u leitsch goubault larrecq j plaisted normal form
transformations robinson voronkov eds handbook automated
reasoning chap pp mit press
balas e disjunctive programming hierarchy relaxations discrete
optimization siam journal algebraic discrete methods

balas e disjunctive programming properties convex hull feasible
points discrete applied mathematics
balas e ceria cornuejols g lift project cutting plane
mixed programs mathematical programming
balas e ceria cornuejols g mixed programming lift project
branch cut framework management science
balas e perregaard lift project mixed programming recent
progress discrete applied mathematics
baltag moss l logics epistemic programs synthese
baltag moss l solecki logic public announcements common
knowledge private suspicions proceedings seventh conference
theoretical aspects rationality knowledge tark pp
bertacco l fischetti lodi feasibility pump heuristic general
mixed integer discrete optimization
bienstock computational study family mixed integer quadratic programming mathematical programming
bradley imprecise probabilities zalta e n ed stanford encyclopedia
philosophy summer edition
computational infrastructure operations coin project
cbc coin branch cut user guide http www coin org cbc index html
accessed
cook complexity theorem proving procedures proceedings
third annual acm symposium theory computing stoc
cripps w ely j c mailath g j samuelson l common learning
econometrica
dal palu dovier pontelli e rossi g gasp answer set programming
lazy grounding fundamenta informaticae advances computational logic



fimartiny moller

de carvalho ferreira n fisher van der hoek w specifying reasoning
uncertain agents international journal approximate reasoning

doder markovic z ognjanovic z perovic raskovic probabilistic temporal logic model reasoning evidence foundations
information knowledge systems th international symposium foiks
ellsberg risk ambiguity savage axioms quarterly journal
economics
faber w leone n perri intelligent grounder dlv correct
reasoning essays logic ai honour vladimir lifschitz springer
fagin r halpern j reasoning knowledge probability journal
acm
fagin r halpern j megiddo n logic reasoning probabilities
information computation
fagin r halpern j moses vardi reasoning knowledge
mit press
fischetti glover f lodi feasibility pump mathematical programming
garey r johnson computers intractability guide theory
np completeness w h freeman co
gerbrandy j groeneveld w reasoning information change journal
logic language information
gnu

project
glpk gnu linear programming
http www gnu org software glpk glpk html accessed

kit

grunwald p halpern j updating probabilities journal artificial
intelligence
gurobi optimization inc
gurobi optimizer reference
http www gurobi com documentation accessed

manual

halpern j pucella r logic reasoning evidence journal
artificial intelligence
halpern j samet segev e defining knowledge terms belief
modal logic perspective review symbolic logic
harsanyi j c games incomplete information played bayesian players
part basic model management science
harsanyi j c games incomplete information played bayesian players
part ii bayesian equilibrium points management science
harsanyi j c b games incomplete information played bayesian players
part iii basic probability distribution game management science



fipdt logic

hintikka j knowledge belief introduction logic two notions
cornell university press
ilog


cplex
optimizer
ibm com software commerce optimization cplex optimizer


http wwwaccessed

kooi b p probabilistic dynamic epistemic logic journal logic language
information
kripke semantical considerations modal logic acta philosophica fennica

lloyd j w foundations logic programming nd edition springer
martiny k motzek moller r formalizing agents beliefs cyber security
defense strategy cisis proceedings th international conference computational intelligence security information systems burgos
spain june
milch b koller probabilistic agents beliefs decisions
proceedings sixteenth annual conference uncertainty artificial intelligence uai morgan kaufmann publishers inc
murty k g linear programming john wiley sons
parikh r ramanujam r knowledge semantics messages journal
logic language information
plaza j logics public communications proceedings fourth international
symposium methodologies intelligent systems poster session program ismis
oak ridge national laboratory
plaza j logics public communications synthese
reiter r knowledge action logical foundations specifying implementing dynamical systems mit press
sack j temporal languages epistemic programs journal logic language
information
sack j extending probabilistic dynamic epistemic logic synthese

schrijver theory linear integer programming john wiley sons
shakarian p parker simari g subrahmanian v annotated probabilistic temporal logic acm transactions computational logic
shakarian p simari g subrahmanian v annotated probabilistic temporal logic approximate fixpoint implementation acm transactions computational logic
shoham leyton brown k multiagent systems algorithmic gametheoretic logical foundations cambridge university press
van benthem j conditional probability meets update logic journal logic
language information


fimartiny moller

van benthem j gerbrandy j hoshi pacuit e merging frameworks
interaction journal philosophical logic
van benthem j gerbrandy j kooi b b dynamic update probabilities
studia logica
van der hoek w considerations logic pfd logic combining
modality probability journal applied non classical logics
van ditmarsch h van der hoek w kooi b dynamic epistemic logic
springer
van eijck j dynamic epistemic logics johan van benthem logical
informational dynamics chap pp springer
van eijck j schwarzentruber f epistemic probability logic simplified
gore r kooi b p kurucz eds advances modal logic invited
contributed papers tenth conference advances modal logic aiml
college publications
vos savant ask marilyn parade magazine
williams h p logic integer programming springer




