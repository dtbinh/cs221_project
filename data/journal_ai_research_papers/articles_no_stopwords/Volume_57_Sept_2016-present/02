journal artificial intelligence

submitted published

optimal partial order plan relaxation via maxsat
christian muise

cjmuise cs toronto edu

department computer science
toronto ontario canada g

j christopher beck

jcb mie utoronto ca

department mechanical industrial engineering
toronto ontario canada g

sheila mcilraith

sheila cs toronto edu

department computer science
toronto ontario canada g

abstract
partial order plans pops attractive least commitment nature
provides enhanced plan flexibility execution time relative sequential plans current automated plan generation focuses producing sequential plans despite
appeal pops examine pop generation relaxing modifying
action orderings sequential plan optimize plan criteria promote flexibility relies novel partial weighted maxsat encoding sequential
plan supports minimization deordering reordering actions similar
technique demonstrate remove redundant actions plan
combine criterion objective maximizing pops flexibility
partial weighted maxsat encoding allows us compute pop sequential plan
effectively compare efficiency previous methods pop generation via sequential plan relaxation existing heuristic
consistently produces optimal deordering sequential plan
greater flexibility consider reordering actions plan providing guarantee optimality investigate confirm accuracy
standard flex metric typically used predict true flexibility pop measured
number linearizations represents

introduction
agent operate effectively dynamic world behaviour must flexible
face unexpected changes context ai several approaches
increase flexibility agent including giving option select different
plans graham decker mersic expanding applicability existing plans
plan generalization anderson farley one example former
delay committing ordering certain actions plan absolutely necessary
allowing agent dynamically choose plan proceeds execution time veloso
pollack cox flexibility precisely partial order plans provide
partial order reflects least commitment strategy weld unlike
sequential plan specifies set actions total order actions
ideal partial order plan pop specifies action orderings necessary achieve
goal pop embodies family sequential plans set linearizations
c

ai access foundation rights reserved

fimuise beck mcilraith

sharing actions differing respect order actions
execution agent free choose next action execute plan long
chosen action preceding actions left execute increasing number
linearizations plan translates directly giving agent freedom execution
time thus typically use number linearizations pop measure
flexibility measure pops linearizations perfect quite useful
proxy plans flexibility
flexibility afforded pops makes attractive real time execution multiagent task assignment range applications veloso et al weld
nevertheless recent years plan generation shifted away partial order
towards sequential primarily due effectiveness heuristic
forward search planners regain least commitment nature pops leveraging
fast sequential plan generation compelling examine computation pops via
sequential technology done example forward chaining partial order
planner popf coles coles fox long
present alternative first generates sequential plan
state art planner subsequently relaxes plan minimally constrained pop deordering process removing ordering constraints plan
reordering process allowing arbitrary change ordering constraints
requiring pop remains valid pop deordering reordering theoretically investigated backstrom unfortunately optimal deordering reordering np hard compute difficult approximate within constant factor unless
n p dt im e npoly log n backstrom despite theoretical impediment
practice often compute optimal solution
minimum deordering minimum reordering sequential plan cover natural
aspect least commitment minimizing ordering constraints placed plan
intuitively deordering involves removing existing ordering constraints reordering
allows ordering constraints removed well ordering constraints
included techniques naturally provide greater flexibility execution time
inverse correlation number ordering constraints number
linearizations pop reordering may achieve greater flexibility deordering
addition constraint may allow number existing ordering constraints
removed still guaranteeing pop validity
computing optimally relaxed pop use family novel encodings partial weighted maxsat optimal solution maxsat corresponds
optimally relaxed pop unlike typical sat techniques represent
action instance giving us succinct representation empirically compare
existing polynomial time heuristic relaxing sequential plan due
kambhampati kedar latter extremely proficient computing minimum deordering matching optimal solution every tested
however minimum reordering substantially flexible minimum
deordering fewer ordering constraints far linearizations
compare efficiency technique related uses
mixed integer linear programming encoding compute minimum reordering
kambhampati consistently performs better


fioptimal partial order plan relaxation via maxsat

non trivial size represents practical technique computing guaranteed
optimal deordering reordering pop
modern maxsat solver compute maximally flexible solutions provides two
key benefits solver used time procedure computes optimally flexible reordering pop given enough time technique previously
existed computing optimal deordering pop allows us evaluate
efficiency existing heuristic
removing redundant actions
generality encoding allows us easily define alternative objectives optimization
criteria demonstrate key aspect generality extend characterization
orthogonal metric minimizing total cost actions plan via removal
unnecessary actions metric commonly used measure plan quality
interestingly directly odds task improving plans flexibility
consider one option combining two metrics puts higher priority action
cost subsequent plan flexibility
majority encodings theoretical foundations theorems presented
apply general class incorporates metrics refer
pop minimum action cost actions pop subsequently
minimum number ordering constraints minimum cost least commitment pop
mclcp mclcp compelling free redundant actions well
redundant ordering constraints mclcp contains relevant achieve
goal
present theoretical aspects general mclcp criterion
main focus maximizing flexibility pops focus experimental evaluation
deorderings reorderings exclusively leave evaluation method
solving mclcp compared plan repair techniques e g nebel koehler
gerevini serina matter future work
contributions
following main contributions
introduce practical method computing optimal deordering reordering plan accomplish set novel partial weighted maxsat
encodings differing set clause schema define type relaxation desire model encodings standard partial order concepts causal
support threat resolution draw upon prove correctness
encodings
propose extension least commitment mclcp includes
total cost solution optimization focuses first minimizing total action
cost minimizing number ordering constraints included plan
note minimizing total action cost uniform cost domain equivalent minimizing
number actions



fimuise beck mcilraith

prove correctness uses partial weighted maxsat
encoding computing mclcp
demonstrate somewhat surprisingly existing heuristic extremely proficient computing optimal deorderings existing produces deorderings theoretically guaranteed minimal let alone optimal
deordering nonetheless empirically heuristic computes optimal
deordering every instance suite benchmarks
demonstrate efficiency compared previous method
uses similar encoding different optimization framework
relatively difficult relax e take second compute
improves previous work solving within given
time bound
establish empirical connection number linearizations pop
standard flex measure captures normalized measure number
ordering constraints
demonstrate impact starting solution form final
relaxed plan particular consider two types layered plans
produced mp popf planners rintanen coles et al
achieve greater flexibility compared optimal deordering
optimal reordering justifies need
compute flexible plan
work extends conference publications muise mcilraith
beck provide full generality mclcp base
encoding focus evaluation minimum deordering reordering
aspects expanded theoretical framework including proofs
correctness significantly expanded empirical evaluation
organization
start providing section necessary background notation automated
partial weighted maxsat next detail section including
mclcp criterion section family encodings
optimization criteria section finally present evaluation section
conclude discussion related work summary section

preliminaries
section present necessary background notation concepts work
classical
task synthesizing solution dictates actions agent must
take order achieve prescribed goal classical assume world


fioptimal partial order plan relaxation via maxsat

fully known deterministic russell norvig classical many
applications range robotics modelling biological processes ghallab nau
traverso standard synthesizing classical plan perform
search state space heuristics guide planner towards
high quality solution describe common formalism used specifying
strips fikes hart nilsson
strips tuple hf g ai f finite set
fluents f initial state g f goal state finite set
actions characterize action following three sets
p fluents must true order executable
add fluents action adds state
del fluents action deletes state
work actions instantaneous adopt standard model interleaved concurrency two actions occur simultaneously make
simplifying assumption every action add del done
without loss generality simplifies theoretical
say action executable state iff p resulting state
executing action state defined

del add
executable
def
p
undefined
otherwise
hf g ai associate cost function c maps
every action non negative real number c r

make use two items notation respect set actions
adders f set actions add fluent f
f add
deleters f set actions delete fluent f
f del
common representation solution sequential
plan sequence actions executable preconditions action
sequence true corresponding state executable sequence actions
sequential plan hf g ai executing actions sequence
starting state causes goal hold final state
g p p p


fimuise beck mcilraith

readability abbreviate progression sequential plan state
p cost action sequence sum individual
actions costs
n
x
c
c ai


rather impose total order actions plan partial order plan pop
specifies set ordering constraints actions define pop respect
tuple ha oi set actions plan
set ordering constraints actions russell norvig
action may appear assume every element
uniquely identifiable actions denote ordering constraint
interpret constraint action appears action
plan total ordering actions respects linearization
pop provides compact representation multiple linearizations assume ordering
constraints transitively closed

assuming transitively closed change fundamental structure
pop set linearizations remains allows us effectively compare
flexibility two pops share action set
similar cost action sequence cost pop p ha oi sum
action costs actions p
x
c p
c
aa

simplify exposition follows designate two actions pop
represent initial state goal state ai ag respectively ai ordered
every action ag analogously ordered every action
hf g ai actions following definition
p ai

p ag g

add ai

add ag

del ai

del ag

inclusion ai ag actions allow us simplify presentation many
avoiding special checks procedure e g assume
first last action pop
depending pop constructed may include set causal links c
causal link contains pair ordered actions may ai may ag
p
fluent p achieves p denoted causal links often
serve justifications ordering constraints pop
definition pop validity notion pop p valid
every linearization p sequential plan
note notion rely set causal links c



fioptimal partial order plan relaxation via maxsat

simple intuitive notion rarely used verify validity pop
may prohibitively large number linearizations represented pop
however tractable equivalent notion pop validity uses concepts causal
links open preconditions threats
pop ha oi set causal links c open precondition precondition p
action associated causal link
p

c
precondition open say supported refer associated
action causal link achiever precondition typical valid pop
one supporter every precondition action included pop
make restriction work keep encoding general
threat pop refers action invalidate causal link two
p
actions due ordering constraints lack thereof formally c
p
say action distinct threatens causal link
following two conditions hold
order

action deletes p
p del
existence threat means linearization exists violates causal
link thus may executable actions ai ag included
following definition characterizes second notion pop validity
definition pop validity notion given pop p ha oi
set causal links c p valid pop action
open precondition causal link set c threatening action
causal link structure implicitly assessed verify pop validity polynomial
time nebel backstrom set c strictly necessary however implicitly
explicitly notion requires actions causally supported threat free manner
subsequently following connection two notions pop validity
theorem pop validity due mcallester rosenblitt notion pop
validity holds notion holds additionally notion holds
set causal links c must exist notion holds ha oi c
final concept use pop well established metric measuring
constrained pop nguyen kambhampati siddiqui haslum flex
measure many ordering constraints pop normalized total
number potential ordering constraints flex tends number ordering
constraints tends vice versa per usual assume set ordering
constraints transitively closed


fimuise beck mcilraith

definition flex given pop ha oi define flex

flex ha oi p




p
use denominator instead traditional latter
counts number possible ordering constraints definition flex fully
unordered pop flex value sequential plan flex
strive minimize number ordering constraints transitive closure
omitting transitive closure would amount optimizing transitive reduction
noted backstrom less appeal leads long chains
plan
deorderings reorderings
aim least commitment flexible plans allow us defer decisions
regarding execution plan considering ordering constraints pop
two important notions least commitment deordering reordering
pop following backstrom define formally follows




definition deordering reordering let p ha oi q ha two
pops strips
q deordering p wrt iff p q valid pops
q reordering p wrt iff p q valid pops
recall assume ordering constraints pop transitively closed
every action pop uniquely named e every repetition action given
unique name proper deordering one ordering constraints form proper
subset e define minimum deordering reordering follows




definition minimum deorderings reorderings let p ha oi q ha
two pops strips
q minimum deordering p wrt iff
q deordering p wrt




b deordering ha p wrt
q minimum reordering p wrt iff
q reordering p wrt




b reordering ha p wrt
q minimal deordering p wrt iff
q deordering p wrt
b proper deordering q


fioptimal partial order plan relaxation via maxsat

note use cardinality rather set containment b b
orderings need overlap equivalently refer minimum deordering
resp reordering optimal deordering resp reordering cases prefer
pop smallest set ordering constraints words pop exists
actions fewer ordering constraints remaining valid respect
finding minimum deordering reordering pop np hard
cannot approximated within constant factor unless n p dtime npoly log n
backstrom may many optimal deorderings reorderings
work distinguish compute minimal deordering
polynomial time iteratively removing unnecessary ordering constraints e
cause plan become invalid
previous approaches
many approaches computing partial order plan cover
representative examples
partial order causal link
traditional methods producing partial order plan follow called partialorder causal link pocl weld pocl modifications
iteratively made incomplete partial order plan consists set actions causal
links ordering constraints partial order plan considered complete
conditions definition met
key difference pocl standard state search
pocl search plan space pocl search every node
search space constitutes partial plan whereas state search every node state
world successor nodes generated applying actions state represented
current search node contrast possible modifications partial plan represent
choices available pocl search procedure typical partial plan
modifications include
add action partial plan
order two actions partial plan
create causal link two actions plan
pocl planners popular late starting tates
nonlin planner tate forward search techniques one employed
planner hoffmann nebel led direction
recent pocl planner vhpop younes simmons unfortunately
competitive state art forward search planners
popf
take advantage flexibility afforded pop search efficiency forward
state planners coles et al introduced forward chaining partial order planner


fimuise beck mcilraith

popf coles et al idea behind popf restrict modifications permitted
partially completed plan complete state easily computed
represents truth fluents partial plan executed unlike pocl approaches
add actions achieve open preconditions actions popf chosen
preconditions satisfied heuristically lead goal e forward search
manner action added plan placed end plan
action already incumbent plan ordered newly added action
time insertion action may left unordered respect actions
already plan adding action requires preconditions
causal links created immediately
used popf leverages partial order nature domains
avoiding unnecessary reasoning permutations unordered actions ordering constraints included required sequential planners may try
complete partial order plan multiple times change different
permutation unordered actions popf avoid situation time
maintaining partial order structure recently introduced techniques
detect repeated states coles coles planner avoids even unnecessary
permutations action sequences
finally popf leverages powerful techniques forward search planners maintaining complete state world reached plan state
information allows powerful heuristics computed efficiently
petri net unfolding
predating work coles et al alternative generating partially
ordered plans via petri net unfolding hickmott general idea encode
evolution forward system repeated unfolding carefully
crafted petri net mathematical structure used model analyze dynamics
discrete distributed systems murata unfolding process naturally represents
parallel partially ordered plan hickmott rintanen thiebaux white
hickmott sardina detailed theoretical property petri net unfolding
partial order plans noting plan resulting petri net unfolding minimal
deordering reordering respects strong independence hickmott sardina
strong independence restriction unordered actions partial order plan
ambiguity respect action produces particular fluent
two different actions produce fluent f unordered
neither required produce f service achieving goal service
successful execution action plan restriction makes deorderings
reorderings produced unfolding restrictive optimal deorderings
reorderings produced require strong independence
similar pocl popf approaches petri net unfolding exploited produce
partial order plan directly rather finding deordering reordering existing
plan


fioptimal partial order plan relaxation via maxsat

relaxer
due kambhampati kedar relaxer operates removing
ordering constraints sequential plan systematic manner heuristic guides
procedure detailed backstrom process provide guarantee
resulting pop minimally deordered error counterexample
used backstrom demonstrate kambhampati kedars
necessarily produce minimally deordered pop however conclusion correct
provide counterexample appendix
intuition behind remove ordering ai ak sequential plan ai achiever precondition ak removing ordering
lead threat heuristically attempts choose earliest possible action sequential plan achiever precondition example consider
case sequential plan ai ak p p ak
keep ordering ai ak leaving would create threat
precondition one actions ai earliest action sequence
following holds
p add ai ai achiever p
aj j k p
del aj p threatened
presents formally use index refer index
action sequence assume every action plan uniquely named
valid plan line evaluate true line evaluates true
loop line runs actions know unthreatened achiever exists
earliest one found achiever ordered action requiring
fluent precondition line loop line adds necessary
ordering constraints achiever remains unthreatened note deleter found
loop line must evaluate true going outer
loop line every action newly formed pop unthreatened supporting action
preconditions resulting pop therefore valid cf kambhampati
kedar section
sapa post processing
part post processing phase sapa planner kambhampati
introduce similar relaxing ordering plan setting
begin temporal plan actions assigned specific time points
objective optimize number ordering constraints temporal aspect
resulting plan
strategy kambhampati take abbreviated dk model task
computing partial order relaxation terms constraint satisfaction optimization
csop variables introduced represent ordering actions timing
duration actions resource usage etc abstract csop formalism
concrete mixed integer linear program milp proposed realize set constraints
referred order generalization originally



fimuise beck mcilraith

relaxer

























input sequential plan including ai ag
output relaxed partial order plan ha oi
set

foreach
foreach f p
ach null
index
see earlier achiever
f add
ach
stop deleter f
f del
break
add appropriate supporting link
ach
add orderings avoid threats
foreach deleters f
index index ach
ach
index index

return ha oi

model valid temporal plan similar work dk contains option enforcing adherence original ordering constraints allows deordering
reordering produced
dk considers number optimization criteria including minimizing makespan
maximizing sum slack temporal variables maximizing flexibility
temporal variables minimizing number ordering constraints first three
related temporal domains final one coincides optimization
criteria work experimental evaluation provided temporal optimization
criterion kambhampati empirically investigate minimization
ordering constraints
differences dk include formalism focus
temporal aspects model used unique encoding variables represent
action appearing plan unique encoding variables representing
time points resources underlying solving technology rely partial weighted
maxsat instead milp finally mclcp criterion section compare
efficiency computing minimum reordering implementation
dk uses variables constraints relevant computing
minimum reordering


fioptimal partial order plan relaxation via maxsat

partial weighted maxsat
compute relaxed plan encode task partial weighted maxsat
solution encoding corresponds minimally relaxed plan optimizes
desired criteria review notation partial weighted maxsat use
throughout
boolean logic satisfiability sat true false setting
boolean variables logical formula referring variables evaluates true
biere heule van maaren walsh typically write conjunctive
normal form cnf made conjunction clauses clause
disjunction literals literal boolean variable negation setting
variables satisfies cnf formula iff every clause least one literal evaluates
true example setting variables x z true satisfy following theory
x x z



maxsat optimization variant sat
goal maximize number satisfied clauses biere et al ch although
cannot satisfy every clause following theory setting x true z false
satisfies five clauses
x z x z z x z x z



adding non uniform weights clause allows richer version optimization
refer maximizing weight satisfied clauses weighted maxsat
k

use syntax indicate clause weight k generally
weight must positive real number consider setting x false z true
following theory










x x x z z



setting satisfies four clauses total weight aim
maximizing total weight satisfied clauses achieve sum assigning
variables true










x x x z z



wish force solver solution satisfies particular subset
clauses refer clauses subset hard clauses


soft syntax use indicate hard clause mix hard
soft clauses partial weighted maxsat biere et al ch
partial weighted maxsat soft clauses given weight
feasible solution corresponds setting variables satisfies hard clauses


fimuise beck mcilraith

cnf optimal solution partial weighted maxsat feasible
solution maximizes sum weights satisfied soft clauses following
example setting variables x false z true satisfies every hard clause one
soft clauses












x z x z z x



although required partial weighted maxsat general encodings create
never contain soft clause one literal special form partial
weighted maxsat referred binate covering coudert allows
us flip optimization criterion minimizing sum satisfied soft unit clauses
equivalent maximizing sum unit clauses literal flipped e g x
goes x vice versa technique solve minimization
partial weighted maxsat solver works soft clauses contain single literal
property key encoding objective minimize


view sequential plan referred total order plan special case
partial order plan exists ordering constraint every pair actions
quite often many ordering constraints required ordering certain
actions may switched goal still achieved sequence actions
aim maximizing flexibility pop strive minimize number ordering
constraints included solution objective motivates need identify precisely
ordering constraints pop relevant pops validity
definition ordering relevance given hf g ai valid
pop p ha oi ordering constraint relevant respect p
iff ha valid pop
ordering relevance plays central role definitions minimal minimum pop
deorderings relevant ordering constraints precisely cannot removed
without invalidating pop backstrom additionally relaxer
kambhampati kedar operates identifying set ordering constraints
suspected relevant e selected achievers action preconditions
maximize flexibility pop focus encoding retaining relevant
orderings difficult measure efficiently strive maximize flexibility inherent
pop loosely defined number linearizations pop represents number
unordered pairs actions pop typically referred flex siddiqui haslum
provides approximation pops flexibility evaluation quantify
accuracy flex approximation pops flexibility
discussed earlier verifying pops validity way linearizations
practical similarly attempt compute pops maximize
note transitive closure p necessarily different transitive closure ha
relevant respect p



fioptimal partial order plan relaxation via maxsat

number linearizations rather compute pops adhere one
previously mentioned criteria removing redundant orderings minimum deordering
minimum reordering
minimum cost least commitment criterion
notion minimum deordering reordering pop addresses commitment ordering constraints orthogonal objective commit resources
possible typically measured time plan executed parallel
sum action costs actions plan historically latter objective takes precedence metrics end provide extended criterion computing
minimum cost least commitment pop mclcp




definition minimum cost least commitment pop let p ha oi q ha
two pops valid q minimum cost least commitment pop mclcp p iff


q minimum reordering exist valid pop r ha
following condition holds
c r c q c r c q
work assume every action positive cost may turn
preferring fewer actions causes us commit ordering constraints simply due
interaction actions choose practice however usually place much
greater emphasis minimizing total cost plan worth noting
plan exists proper subset actions input plan computing mclcp
equivalent computing minimum reordering
following mclcp criterion evaluate quality pop total
action cost number ordering constraints contains metrics give us direct
measure least commitment nature pop primary emphasis placed
removing unnecessary commitments actions
encoding
encode task finding minimum deordering reordering mclcp partial
weighted maxsat given input corresponding initial plan
optimal solution default encoding correspond mclcp
pop exists cheaper overall cost cost fewer ordering constraints
transitive closure present core encoding section prove
soundness completeness encoding section add clauses
produce encodings correspond optimal deorderings reorderings present
modifications section
basic encoding
contrast typical sat encoding e g kautz selman
require actions replicated successive plan steps instead
represent action occurrence reason ordering
actions actions encoding come provided sequential partial order plan


fimuise beck mcilraith

p ha oi use p denote partial weighted maxsat encoding corresponding
pop p ha oi refer pop corresponding encodings solution
target pop target pop reconstructed encodings solution looking
variables set true use three types propositional variables
xa every action xa indicates action appears target pop
every pair actions indicates ordering
constraint appears target pop
ai p aj every action aj p pre aj ai adders p ai p aj
indicates ai supports aj fluent p target pop
partial weighted maxsat encoding distinction hard soft
clauses first present hard clauses encoding boolean formulae
subsequently convert cnf later describe soft clauses associated
weights define formulae ensure target pop acyclic
ordering constraints include transitive closure actions universally quantified
formula assume ai ai ag must ensure
self loops




include initial goal actions
xai xag



use ordering variable include actions
ai aj xai xaj



action cannot appear initial action goal
xai ai ai ai ag



solution satisfies transitive closure ordering constraints
ai aj aj ak ai ak



together ensure target pop acyclic note implies
antisymmetry well remaining formulae tie two types variables together
deal initial goal actions finally include formulae needed ensure
every action preconditions met threats solution


readability omit hard clause symbol constraints



fioptimal partial order plan relaxation via maxsat

ai p aj



xak ak ai aj ak



ak deleters p



xaj



ai aj ai p aj



pp aj ai adders p

intuitively ai p aj holds ai achiever precondition p action aj
deleter p allowed occur actions ai aj e corresponds
directly unthreatened causal link formula ensures every causal link remains
unthreatened satisfying variable setting view two ordering variables
formula form common partial order concepts promotion
demotion weld formula ensures include action aj target pop
every precondition p aj must satisfied least one achiever ai ai aj orders
achiever correctly ai p aj removes possibility threatening action
far constraints described capture required pop valid
go address notion ordering relevance presented definition well
metric minimizing total action cost mclcp make use soft clauses
generate mclcp prefer solutions first minimize total action cost
minimize number ordering constraints add soft unit clause containing
negation variable every action ordering variable encoding
violation one unit clauses means solution includes action
ordering constraint corresponding violated clauses variable weight assigned
follows


ai aj ai aj
c



xa

ai ag

note weight single action clause greater weight ordering constraint clauses combined total ordering
constraints increased weight guarantees generate solutions minimum
action cost enforce transitive closure ordering constraints second type soft clause lead solver pop among cheapest
total action cost minimizes size transitive closure
richer notions weighted trade ordering constraints action
costs easily modelled appropriate assignment weights soft clauses
encoding focus primarily deordering reordering aspects
work leave alternative encodings future work
theoretical
section present theoretical properties core encoding
wish minimize number actions solution need replace c



fimuise beck mcilraith

lemma variable setting implies pop given valid pop
p ha oi variable setting satisfies formulae p correspond valid pop ordering constraints transitively closed
proof already seen pop induced solution hard clauses
acyclic transitively closed due formulae see
open preconditions include ag conjunction ensures
every precondition satisfied pop includes action additionally
threats final solution formula enforced
every time precondition met formula pop corresponding
solution hard clauses open preconditions threats theorem
allows us conclude target pop valid
lemma pop implies variable setting given valid pop


p ha oi valid pop q ha transitively closed
corresponding feasible variable assignment satisfies p
proof lemma follows direct encoding pop q xa true iff
ai aj true iff ai aj q valid pop acyclic
include ai ag actions ordered ai ag transitively
closed satisfying see must satisfied
hold would action pop precondition p
every potential achiever p threat could ordered achiever
situation possible pop invalid contradiction
theorem completeness given valid pop p ha oi
complete partial weighted maxsat solver solution soft clauses formulae
p minimizes total cost actions corresponding pop
subsequently minimizes number ordering constraints
proof given actions ordering constraints every soft
clause corresponding ordering constraint weight total sum satisfying every ordering constraint clause weight satisfying
action clause greater soft clauses corresponding actions dominate
optimization criteria valid pop subset
actions p lower total action cost solution satisfies formulae
maximizing weight satisfied soft clauses
theorem encoding correctness given valid pop p
solution partial weighted maxsat encoding p mclcp p
proof theorem follows directly lemmas theorem
variations
observe p make use set ordering constraints p optimal
solution encoding correspond mclcp enforce solutions
minimum deorderings reorderings introduce two additional sets hard clauses


fioptimal partial order plan relaxation via maxsat

actions optimal deorderings reorderings require every action part
target pop consider formula ensures use every action
optimization works ordering constraints achieve simply need
add action hard clause


xa



soft unit clauses trivially unsatisfiable removed preprocessing phase maxsat solving process optimal solution soft constraints
formulae referred r p corresponds minimum reordering p
deordering deordering must forbid explicit ordering contradicts
input plan assuming input plan p ha oi ensure computed solution
deordering adding following family hard unit clauses


ai aj ai aj




similar introduction hard unit clauses action inclusion clauses
eliminate number ordering constraint soft clauses encoding
preprocessing phase maxsat solver optimal solution soft constraints formulae referred p corresponds minimal deordering
p additionally could use forgo use variation one
typically studied provide benefit computing mclcp

evaluation
evaluate ability effectiveness state art partial weighted maxsat
solver sat j le berre parrain optimally relax plan proposed
encodings use md mr encodings ensure actions
included solution e actions constraint investigate
effectiveness relaxer rx produce minimally constrained deordering measure quality pop use flex value cf section
number linearizations whenever feasible compute
analysis considered every strips domain previous international
competitions ipc hoffmann discarded two domains childsnack
tidybot due difficulty planners generating initial solution
discarded due constrained nature form offers little
flexibility domain average flex value less removed
evaluation would uninformative since already relaxed
additionally evaluated winner partial weighted maxsat contest crafted instances
maxhs davies bacchus however found sat j outperformed maxhs slightly
coverage time
overly constrained domains visitall blocksworld sokoban pegsol ged parking barman gripper cybersec psr small storage nomystery mystery mprime freecell hiking floortile thoughtful



fimuise beck mcilraith

possible solver determined trivially evaluate recent
version domain multiple sets exist table shows set
domains considered throughout evaluation
conducted experiments linux desktop ghz processor
run sat j limited minutes gb memory generate initial sequential
plan used mercury planner domshlak hoffmann katz best performing non portfolio planner recent satisficing ipc competition additionally
evaluation computed initial solutions state art sat
planner mp rintanen state art partial order planner popf coles
et al offer alternative methods generate initial partially ordered plan
investigate impact plans structure relaxation process
assess aspects four separate experiments first
evaluate difficulty computing feasible solution addition optimal one
obtain solutions increasing quality sat j time fashion next look
quality pop produced encodings well pop produced
relaxer measure quality flex plan transitive
closure number linearizations plan wherever feasible compute
demonstrate empirically accuracy flex measure indicator
number linearizations next consider impact initial plan form
relaxation taking account starting solution three planners finally
compare computing minimum reordering similar
kambhampati
solving completion
begin brief discussion configurations
coverage well weaknesses methods report
planner able plan within resource limits table shows
following information every domain
number domain shown brackets next domain name
number solved planner plans column
solved column indicates number plans successfully encoded solved
every could encoded mr could encoded md
maxsat solver produced least one solution every encoded
every encoded md solved completion within resource limits
mr column indicates number encoded mr solved completion
must emphasize purpose evaluation compare efficiency
three planners strengths weaknesses rather consider
type plan produces related relaxing ordering constraints
plan consequently purpose table provide insight
included analysis bring light challenges encoding
solving completion
providing twice amount time memory planners lead solved



fioptimal partial order plan relaxation via maxsat

domain

mercury
plans solved

mr

popf
plans solved

mr

plans

mp
solved

mr

airport



















depot



















driverlog



















elevators



















logistics



















parcprinter



















pipesworld



















rovers



















satellite



















scanalyzer



















tetris



















tpp



















transport



















woodwork



















zenotravel







































table per domain solver relaxation coverage values brackets indicate benchmark size plans column indicates many respective planner solved
solved column indicates many solved successfully encoded
solved every encoded solvable md mr every md encoding solvable completion mr column indicates number
successfully encoded mr solved completion

could encoded due large number actions
plan typically plans actions caused issue domains
problematic e g elevators logistics transport see initial
coverage non sequential planners suffers well encoding plans
contain many actions due number transitivity clauses included formula
cubic number actions
tetris domain proved extremely difficult popf mp solve although
number actions plans mercury small enough encode finally found
proving optimality mr encoding tpp rovers difficult
clear indication rovers high flex high
domains opposite true tpp domains however good initial plans
produced quickly sat j solver devoted remaining time making small
improvements proving optimality


fimuise beck mcilraith

figure number solved completion sat j given limited amount
time per well number solved rx every
md encoding solved completely sat j rx polynomial sub optimal technique
shown comparison solve time

mercury solved strict superset solved popf mp
use sequential plans produced mercury input majority evaluation
section one exception figure provides view long took sat j
optimally solve md mr encodings initial plans mercury produced
number solved optimally function time including encoding
phase comparison include aggregate time rx well strong run time
performance rx expected given polynomial time without
optimality guarantees
plan quality
begin discuss surprising relaxer benchmarks every one sat j solved md encoding optimally
pop produced relaxer contained number ordering
constraints even though theoretically relaxer guaranteed
minimal pop nonetheless computes minimum deordering every tested rx
produce deorderings best rx could hope achieve note
may many candidates minimum deordering rx necessarily
one md encoding finds
next consider difference quality minimum deordering minimum reordering quality measured flex transitive closure generated
pop include md mr encodings


fioptimal partial order plan relaxation via maxsat

solved completion sat j total plans generated mercury table
shows average flex md mr domains figure shows flex
comparison per basis domains
domain

md

mr

airport
depot
driverlog
elevators
logistics
parcprinter
pipesworld
rovers
satellite
scanalyzer
tetris
tpp
transport
woodwork
zenotravel

































table average flex

figure md versus mr flex comparison


fimuise beck mcilraith

domains see substantial improvement include airport depot domains
saw zero gain terms flexibility include parcprinter transport woodwork
total almost one third showed improvement flex mr
md varying degrees
flex value fails convey extreme amount execution flexibility introduced
relaxations investigate computed number linearizations
plans wherever feasible determining number total orders partially ordered
graph p complete brightwell winkler practice difficult compute
precisely many graphs able compute number linearizations
md mr solutions total solution encodings
computed found approximately one quarter showed difference
number linearizations plot ratio linears mr linears md
figure

figure ratio linearizations axis represents number linearizations induced
pop optimal reordering divided number linearizations induced
pop optimal deordering x axis ranges number
linearizations differed sorted axis
extreme improvement number linearizations massive
orders magnitude one airport conversely see interesting
artefact resulting optimizing metric acts proxy number linearizations flex value mr never lower md pops
produced flex optimization criterion opposite
effect number linearizations
many smaller improvements scatter plot



fioptimal partial order plan relaxation via maxsat

three one tetris two depot found number
linearizations pop produced mr encoding fewer number
linearizations pop produced md encoding number ordering
constraints pop given number actions usually indicative number
linearizations pop three indicate universal rule
concrete example consider two pops four actions ignoring
causal links figure shows structure pops p p pops
number actions ordering constraints number linearizations differ
p linearizations p pops serve basic example
flex criterion capture fully notion pop flexibility use
work may similar notions take differences account
left future investigation see say cire beck recent work
direction












p




b p

figure two pops number actions ordering constraints
different number linearizations

demonstrate correlation pops flex number linearizations
focused random partial orders pop actions including special
actionis ai ag constructed random partial orders unique
spread flex value subsequently computed corresponding
number linearizations every pop pops constructed target flex value
taken increments method construction iteratively add edges
present transitive closure pop reached target flex value
qualitatively pops resembled found techniques reason
use randomly generated plans due number examples required trend
present comparing plans varying number actions uninformative figure
shows flex function number linearizations normalized total number
linearizations possible pops equals roughly
pearson correlation coefficient log normalized linearization count
flex value clear trend ties together flex pop
number linearizations red line figure line best fit log scole
linf lex values plot x axis interestingly use line
similar hold random pops different number actions



fimuise beck mcilraith

figure comparison normalized number linearizations flex value
approximately random pops actions every point represents unique
pop actions linf lex value computed normalizing total number
linearizations possible note x axis uses log scale red
line line best fit log linf lex
predictor number linearizations flex overestimates number linearizations
highly constrained plans underestimates number linearizations unconstrained
plans though minimizing number ordering constraints transitive closure
pop want optimize directly serve highly informative proxy
maximizing number linearizations pop
initial plan impact
different techniques generate solutions varying forms sequential planners
far widely used planners create inherently partially
ordered solutions example popf planner uses forward chaining
partial order plan represented layered sets unordered actions
similarly sat planners mp produce solutions contain layers unordered
actions two approaches fundamentally differ search solution
fundamentally different sequential planner searches one question
arises differences whether lead fundamentally different solutions
amenable relaxing different ways investigate impact starting solution
relaxed solution quality ability compute optimal solution
encoding minimum reordering take account original sequence
actions therefore encoding used without modification plans produced


fioptimal partial order plan relaxation via maxsat

popf mp similar sense plans produced popf mp encoded
minimum deordering carefully applying equation include link
every pair actions share layer obtained layered plan
representation popf mp directly appropriate planner settings
across domains mutually solved completion sat j
solutions produced three planners md mr encoding
contained number actions figure shows time sat j required
solve completion mercurys plans measured plans
two planners first plot shows mutually solved see
performance improvement solutions coming mercury solver however
limit contain number actions
solutions sat j solve time much comparable
solvers thus appears little effect solving efficiency input
solution format primary factor sat j solve time number actions represented
encoding

mutually solved sat j b subset mutually solved consource plan planner
tain number actions

figure comparison time relax mercury plan versus time relax popf
mp plan md mr encodings included data
addition investigated resulting flex produced pops
mutually solved number actions two scanalyzer domain
contained different set actions resulted slightly higher flex values
minimum deordering reordering mercurys solution compared planners
hand six airport domain lower flex value
minimum deordering mp solutions despite number actions
indicates conditions initial layered plan produced mp may
allow much relaxation compared forward search planner mercury
popf note however vast majority flex
minimum deordering reordering coincided across initial plan types
note time include initial planner computation time encode solve
maxsat encoding



fimuise beck mcilraith

finally investigated improvement flex planner compared initial
solution mercury initial flex value sequential planner
reordering allowed ignore original ordering constraints consider
improvement flex minimum deordering plans coming popf mp
figure shows relative flex comparison original plan minimum
deordering computed plots include every solved successfully
completion sat j plans produced popf mp

flex improvement popf

b flex improvement mp

figure comparison original plan flex versus flex minimum deordering
found majority initial flex values mp popf solutions fell
within range difference flex solutions solver
minimal moderate correlation original final flex value
mp popf solutions pearson correlation coefficient respectively
however observed distinction relaxing mp solutions versus popf
time compute relaxation flex final pop
comparison milp encoding
model relaxing ordering plan presented kambhampati
involves temporal constraints resources aspects beyond
consider nevertheless fragment model capable computing
minimum deordering reordering plan worthwhile see effective
finding optimal reordering forgo testing previous work computing
optimal deordering relaxer effective note
kambhampati considered model heuristically guide solver
reasonable solution instead optimal one
optimization framework kambhampati use model relaxing
ordering plan mixed integer linear programming milp milp consists
set linear constraints defined variables take integer real
values optimization criterion specified weighted linear combination subset
variables maximized minimized


fioptimal partial order plan relaxation via maxsat

need go detail milp model presented section quite basic
uses integer variables encoding
present version milp model introduced kambhampati
comparison partial weighted maxsat model modifications fall three
categories fixes bugs original formulation removal variables constraints relevant setting e temporal resource related portions
model adding constraints enforce solution transitive closure
variables use model include following

xafj ai






ai supports aj fluent f
otherwise

yafi aj






ai ordered aj due interference fluent f
otherwise

oai aj






ai ordered aj
otherwise

note xafj ai oai aj analogous ai f aj ai aj respectively
interference variables yafi aj defined cases aj conflict
execution ai fluent f f p ai add ai del aj f
p aj add aj del ai holds constraints milp model follows
unbound variables assumed universally quantified
interfering actions must ordered defined pairs actions interfere
yafi aj yafj ai
every precondition supported exactly one way
x
f p aj
xafj ai
ai adders f

every support threat free
ad deleters f xafj ai yafd ai yafj ad
support implies ordering
oai aj xafj ai
original constraint erroneously listed



p

ai adders f

xafi aj

fimuise beck mcilraith

interference implies ordering
oai aj yafi aj
enforce transitive closure ordering constraints
oai aj oaj ak oai ak
forbid self loops ordering
oa
order everything initial state action goal action
oai
oa ag
final three constraints appear original model last one replaces
constraints referenced temporal variables achieve effect first two
ensure solution transitively closed mentioned earlier optimizing transitive closure preferred optimizing transitive reduction finally optimization
criterion milp model follows
inimize

x

oa



model produce reorderings input plan feasible solutions
minimum reordering solved completion implemented milp model
state art milp solver gurobi version gurobi optimization inc
measured coverage domains function time figure contains

found milp model effective easier solved
seconds anything difficult solving partial weighted maxsat
encoding sat j proved efficient overall solved sat j
partial weighted maxsat encoding solved gurobi
milp model
additionally tested milp model mirrors partial weighted maxsat encoding presented however similar shown figure
milp encoding consistently outperformed take
second solve

discussion
proposed practical method computing optimal deordering
reordering sequential partial order plan despite theoretical complexity computing optimal deordering reordering np hard able compute


fioptimal partial order plan relaxation via maxsat

figure given timeout x axis number solved completion within
timeout bound axis sat j mr encoding gurobi
milp encoding described text

optimal solution leveraging power modern maxsat solvers proposed
extension classical least commitment criteria minimal deordering reordering minimum cost least commitment pop mclcp mclcp considers total
cost actions solution minimizing number ordering constraints central
encodings propose notion ordering relevance designed optimization
criteria minimize ordering constraints resulting plan leaving
relevant plan validity
uses family novel encodings partial weighted maxsat
solution corresponds optimal pop satisfying one three least commitment criteria
investigate minimum deordering minimum reordering proposed minimum cost
least commitment pop solve former two encodings state art partial
weighted maxsat solver sat j majority readily handled
maxsat solver reasonable amount time
considered input plan formats well similar encoding optimizing
plan flexibility found sequential plan input encodings
effective solution computing reordering perhaps surprisingly benefit
observed planner naturally generates partial orders mp
investigated existing polynomial deordering sequential plans
discovered successfully computes optimal deordering every
tested despite lack theoretical guarantee fast practice
well suited relaxing pop require deordering finally established
strong empirical correspondence commonly used flex metric number
linearizations represented pop


fimuise beck mcilraith

discuss related work conclude discussion potential future work
related work
section detailed variety approaches naturally produce partial order
plans review work related aspects
standard sat encodings produce pop kautz mcallester
selman significant difference standard encodings work
avoid encoding action every layer graph appealing
fact already know superset actions solution intuitively
view encoding maxsat implicit layers actions plan
way computing relevant ordering constraints additional difference
choosing layer every action unnecessarily restricts timing action
potentially appear multiple adjacent layers
notion mclcp related plan repair nebel koehler gerevini
serina key difference however consider addition
actions cost plan improved removing actions mclcp focus
improving flexibility pops forgo full theoretical empirical
comparison mclcp criterion existing plan repair techniques preliminary
effect mclcp action removal technique found previous
work subject muise et al muise
core encoding similar causal encodings kautz et al variant ii
robinson gretton pham sattar similarly encode ordering
pair actions variable ai aj case rather encoding every
potential action occurrence modelling relaxed graph encode formulae
must hold valid pop specific set actions provided part input
mentioned section similarities work
kambhampati particular optimization criterion minimizing number
ordering constraints coincide optional use constraints force deordering
kambhampati focus temporal relaxation context action ordering
take orthogonal view minimizing total action cost
conclusion
use method computing optimally relaxed plans provides two key advantages
maximizing flexibility paramount solving mr encoding lead far
flexible solutions md encoding relaxer achieve
optimal deordering provides useful baseline demonstrating effectiveness
relaxer work leaves open possibility heuristic similar
relaxer capable producing reorderings partial order plan
one extension work consider alternative forms optimization criteria
example one may change soft clauses minimize number fluents
initial state required plan validity potential improve
formalisms attempt minimize reliance information initial
state assumption davis mendelow baier mcilraith
alternatively initial set actions need correspond directly plan long


fioptimal partial order plan relaxation via maxsat

subset actions achieve goal compute plan opens door
techniques optimizing plans adding actions select techniques
introduced davies pearce stuckey sndergaard

acknowledgments
authors gratefully acknowledge funding ontario ministry innovation
natural sciences engineering council canada nserc thanks
go anonymous reviewers thoughtful feedback review process

appendix relaxer counterexample
relaxer presented section deorders input plan pointed
backstrom resulting pop may minimal deordering counterexample provided backstrom however incorrectly states resulting pop
minimally deordered backstrom figure fact figure b
deordering thus minimal deordering although minimum reordering present counterexample supports claim relaxer
may produce minimum deordering
domain theory specification shown figure input plan
sequence actions relaxer seeks earliest
achiever every precondition deordering plan
two ordering constraints deordering
chosen achiever fluent p fact used achiever
p q note already required fluent q
weakness relaxer uses earliest achiever weakness surfaces action later plan used achiever already ordered
appropriately insight may modification relaxer
finds achievers already ordered appropriately opposed finding earliest achiever



fimuise beck mcilraith

define domain counterexample
requirements strips
predicates p q g g g
action
parameters
precondition
effect g p
action
parameters
precondition
effect g p q
action
parameters
precondition p q
effect g
define counterexample
domain counterexample
init
goal g g g
figure counterexample domain description

references
anderson j farley plan abstraction operator generalization
th international conference artificial intelligence pp
backstrom c computational aspects reordering plans journal artificial
intelligence
biere heule van maaren h walsh handbook satisfiability
frontiers artificial intelligence applications ios press
brightwell g winkler p counting linear extensions p complete rd
annual acm symposium theory computing
coles coles state memoization temporal
th international conference automated scheduling
pp
coles coles fox long forward chaining partial order
th international conference automated scheduling pp
coudert solving covering rd annual design automation
conference pp


fioptimal partial order plan relaxation via maxsat

davies j bacchus f postponing optimization speed maxsat solving
th international conference principles practice constraint programming
pp
davies pearce r stuckey p j sndergaard h fragment
column generation proceedings th international conference
automated scheduling pp
davis mendelow baier j mcilraith assumption
generating plans explanations incomplete knowledge proceedings
th aaai conference artificial intelligence pp
b kambhampati improving temporal flexibility position
constrained metric temporal plans aips workshop temporal
domains
domshlak c hoffmann j katz red black systematic
partial delete relaxation artificial intelligence
fikes r e hart p e nilsson n j learning executing generalized robot
plans artificial intelligence
gerevini serina fast plan adaptation graphs local
systematic search techniques proceedings th international conference
artificial intelligence systems pp
ghallab nau traverso p automated theory practice
morgan kaufmann publishers
graham j r decker k mersic decaf flexible multi agent
system architecture autonomous agents multi agent systems
gurobi optimization inc gurobi optimizer reference manual
hickmott rintanen j thiebaux white l b via petri net
unfolding th international joint conference artificial intelligence pp

hickmott sardina optimality properties via petri net unfolding formal analysis th international conference automated
scheduling pp
hickmott l directed unfolding reachability analysis concurrent systems
applications automated ph thesis university adelaide
hoffmann j nebel b system fast plan generation
heuristic search journal artificial intelligence
hoffmann j icaps competition page http ipc icaps conference org
accessed
kambhampati kedar unified framework explanation generalization partially ordered partially instantiated plans artificial intelligence



fimuise beck mcilraith

kautz h mcallester selman b encoding plans propositional
logic th international conference principles knowledge representation
reasoning pp
kautz h selman b unifying sat graph th
international joint conference artificial intelligence pp
le berre parrain sat j library release system description journal
satisfiability boolean modeling computation
mcallester rosenblitt systematic nonlinear proceedings
th national conference artificial intelligence pp
muise c exploiting relevance improve robustness flexibility plan generation execution ph thesis university toronto
muise c mcilraith beck j c optimization partial order plans via
maxsat icaps workshop constraint satisfaction techniques
scheduling coplas
muise c mcilraith beck j c optimally relaxing partial order plans
maxsat nd international conference automated scheduling
pp
murata petri nets properties analysis applications proceedings
ieee
nebel b backstrom c computational complexity temporal projection plan validation artificial intelligence
nebel b koehler j plan reuse versus plan generation theoretical
empirical analysis artificial intelligence
nguyen x kambhampati reviving partial order proceedings
th international joint conference artificial intelligence pp
rintanen j satisfiability heuristics artificial intelligence
robinson n gretton c pham n sattar partial weighted maxsat
optimal th pacific rim international conference artificial
intelligence pp
russell j norvig p artificial intelligence modern prentice hall
say b cire beck j c mathematical programming optimizing
partial order plan flexibility nd european conference artificial intelligence
press
siddiqui f h haslum p block structured plan deordering australasian
conference artificial intelligence pp
tate project hierarchic non linear planner
report department artificial intelligence university edinburgh
veloso pollack e cox rationale monitoring
dynamic environments th international conference artificial intelligence
systems pp


fioptimal partial order plan relaxation via maxsat

weld introduction least commitment ai magazine

younes h l simmons r g vhpop versatile heuristic partial order
planner journal artificial intelligence




