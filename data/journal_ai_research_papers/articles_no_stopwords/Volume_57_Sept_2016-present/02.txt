Journal Artificial Intelligence Research 57 (2016) 113-149

Submitted 03/16; published 09/16

Optimal Partial-Order Plan Relaxation via MaxSAT
Christian Muise

cjmuise@cs.toronto.edu

Department Computer Science,
Toronto, Ontario, Canada. M5S 3G4

J. Christopher Beck

jcb@mie.utoronto.ca

Department Mechanical & Industrial Engineering
Toronto, Ontario, Canada. M5S 3G8

Sheila A. McIlraith

sheila@cs.toronto.edu

Department Computer Science,
Toronto, Ontario, Canada. M5S 3G4

Abstract
Partial-order plans (POPs) attractive least-commitment nature,
provides enhanced plan flexibility execution time relative sequential plans. Current research automated plan generation focuses producing sequential plans, despite
appeal POPs. paper examine POP generation relaxing modifying
action orderings sequential plan optimize plan criteria promote flexibility. approach relies novel partial weighted MaxSAT encoding sequential
plan supports minimization deordering reordering actions. Using similar
technique, demonstrate remove redundant actions plan,
combine criterion objective maximizing POPs flexibility.
partial weighted MaxSAT encoding allows us compute POP sequential plan
effectively. compare efficiency approach previous methods POP generation via sequential-plan relaxation. results show existing heuristic
approach consistently produces optimal deordering sequential plan, approach
greater flexibility consider reordering actions plan providing guarantee optimality. investigate confirm accuracy
standard flex metric typically used predict true flexibility POP measured
number linearizations represents.

1. Introduction
agent operate effectively dynamic world, behaviour must flexible
face unexpected changes. context AI planning, several approaches
increase flexibility agent, including giving option select different
plans (Graham, Decker, & Mersic, 2001) expanding applicability existing plans
plan generalization (Anderson & Farley, 1988). One example former
delay committing ordering certain actions plan absolutely necessary,
allowing agent dynamically choose plan proceeds execution time (Veloso,
Pollack, & Cox, 1998). flexibility precisely partial-order plans provide.
Partial-order planning reflects least commitment strategy (Weld, 1994). Unlike
sequential plan, specifies set actions total order actions,
ideal partial-order plan (POP) specifies action orderings necessary achieve
goal. so, POP embodies family sequential plans set linearizations
c
2016
AI Access Foundation. rights reserved.

fiMuise, Beck, & McIlraith

sharing actions, differing respect order actions.
execution, agent free choose next action execute plan long
chosen action preceding actions left execute. Increasing number
linearizations plan translates directly giving agent freedom execution
time. Thus, typically use number linearizations POP measure
flexibility. measure POPs linearizations perfect, quite useful
proxy plans flexibility.
flexibility afforded POPs makes attractive real-time execution, multiagent task assignment, range applications (Veloso et al., 1998; Weld, 1994).
Nevertheless, recent years research plan generation shifted away partial-order
planning towards sequential planning, primarily due effectiveness heuristic-based
forward-search planners. regain least commitment nature POPs, leveraging
fast sequential plan generation, compelling examine computation POPs via
sequential planning technology done, example, forward-chaining partial-order
planner POPF (Coles, Coles, Fox, & Long, 2010).
paper, present alternative approach first generates sequential plan
state-of-the-art planner, subsequently relaxes plan minimally constrained POP. Deordering process removing ordering constraints plan
reordering process allowing arbitrary change ordering constraints;
requiring POP remains valid. POP deordering reordering theoretically investigated (Backstrom, 1998), unfortunately optimal deordering reordering NP-hard compute difficult approximate within constant factor (unless
N P DT IM E(npoly log n ), Backstrom, 1998). Despite theoretical impediment,
find practice often compute optimal solution.
minimum deordering minimum reordering sequential plan cover natural
aspect least commitment planning minimizing ordering constraints placed plan.
Intuitively, deordering involves removing existing ordering constraints reordering
allows ordering constraints removed well new ordering constraints
included. techniques naturally provide greater flexibility execution time,
inverse correlation number ordering constraints number
linearizations POP. Reordering may achieve greater flexibility deordering
addition new constraint may allow number existing ordering constraints
removed still guaranteeing POP validity.
approach computing optimally relaxed POP use family novel encodings partial weighted MaxSAT: optimal solution MaxSAT problem corresponds
optimally relaxed POP. Unlike typical SAT-based planning techniques, represent
action instance once, giving us succinct representation. empirically compare
approach existing polynomial-time heuristic relaxing sequential plan due
Kambhampati Kedar (1994) find latter extremely proficient computing minimum deordering, matching optimal solution every problem tested. find,
however, minimum reordering substantially flexible minimum
deordering, fewer ordering constraints far linearizations.
compare efficiency technique related approach uses
Mixed Integer Linear Programming encoding compute minimum reordering (Do &
Kambhampati, 2003) find approach consistently performs better problems
114

fiOptimal Partial-Order Plan Relaxation via MaxSAT

non-trivial size. approach represents practical technique computing guaranteed
optimal deordering reordering POP.
Using modern MaxSAT solver compute maximally flexible solutions provides two
key benefits: (1) solver used any-time procedure computes optimally flexible reordering POP given enough time (where technique previously
existed), (2) computing optimal deordering POP allows us evaluate
efficiency existing heuristic algorithm.
1.1 Removing Redundant Actions
generality encoding allows us easily define alternative objectives optimization
criteria. demonstrate key aspect generality, extend characterization
orthogonal metric: minimizing total cost actions plan via removal
unnecessary actions. metric commonly used measure plan quality,
interestingly directly odds task improving plans flexibility. Here,
consider one option combining two metrics puts higher priority action
cost subsequent plan flexibility.
majority encodings, theoretical foundations, theorems presented
paper apply general class problems incorporates metrics. refer
POP minimum action cost (over actions POP), subsequently
minimum number ordering constraints, minimum cost least commitment POP
(MCLCP).1 MCLCP compelling free redundant actions well
redundant ordering constraints: MCLCP contains relevant achieve
goal.
present theoretical aspects general MCLCP criterion,
main focus maximizing flexibility POPs, focus experimental evaluation
deorderings reorderings exclusively. leave evaluation method
solving MCLCP compared plan repair techniques (e.g., Nebel & Koehler, 1995;
Gerevini & Serina, 2000) matter future work.
1.2 Contributions
following main contributions paper:
introduce practical method computing optimal deordering reordering plan. accomplish set novel partial-weighted MaxSAT
encodings, differing set clause schema define type relaxation desire. model encodings standard partial-order planning concepts, causal
support threat resolution, draw upon prove correctness
encodings.
propose extension least commitment planning, MCLCP, includes
total cost solution. optimization focuses first minimizing total action
cost minimizing number ordering constraints included plan.
1. Note minimizing total action cost uniform cost domain equivalent minimizing
number actions.

115

fiMuise, Beck, & McIlraith

prove correctness approach uses partial weighted MaxSAT
encoding computing MCLCP.
demonstrate, somewhat surprisingly, existing heuristic extremely proficient computing optimal deorderings. existing algorithm produces deorderings, theoretically guaranteed find minimal, let alone optimal,
deordering. Nonetheless, find empirically heuristic computes optimal
deordering every instance suite benchmarks.
demonstrate efficiency approach compared previous method
uses similar encoding different optimization framework. problems
relatively difficult relax (i.e., take second compute), approach
improves previous work solving 22% problems within given
time bound.
establish empirical connection number linearizations POP
standard flex measure, captures normalized measure number
ordering constraints.
demonstrate impact starting solution form final
relaxed plan. particular, consider using two types layered plans
produced Mp POPF planners (Rintanen, 2012; Coles et al., 2010).
show achieve greater flexibility, compared optimal deordering,
using optimal reordering. result justifies need approach
compute flexible plan.
work paper extends conference publications Muise, McIlraith,
Beck (2011, 2012). provide full generality using MCLCP base
encoding, paper focus evaluation minimum deordering reordering
aspects. expanded theoretical framework approach, including proofs
correctness, significantly expanded empirical evaluation.
1.3 Organization
start providing, Section 2, necessary background notation automated
planning partial weighted MaxSAT. Next, detail approach Section 3, including
new MCLCP criterion Section 3.1 family encodings various
optimization criteria Section 3.2. Finally, present evaluation Section 4
conclude discussion related work summary Section 5.

2. Preliminaries
section, present necessary background notation concepts work.
2.1 Classical Planning
Planning task synthesizing solution dictates actions agent must
take order achieve prescribed goal. classical planning, assume world
116

fiOptimal Partial-Order Plan Relaxation via MaxSAT

fully known deterministic (Russell & Norvig, 2009). Classical planning many
applications range robotics modelling biological processes (Ghallab, Nau, &
Traverso, 2004). standard approach synthesizing classical plan perform
search state space problem, using heuristics guide planner towards
high quality solution. Here, describe common formalism used specifying
planning problem: STRIPS (Fikes, Hart, & Nilsson, 1972).
STRIPS, planning problem tuple = hF, I, G, Ai F finite set
fluents, F initial state, G F goal state, finite set
actions. characterize action following three sets:
P RE(a): fluents must true order executable.
ADD(a): fluents action adds state.
DEL(a): fluents action deletes state.
work, actions instantaneous adopt standard model interleaved concurrency: two actions occur simultaneously. such, make
simplifying assumption every action a, ADD(a) DEL(a) = . done
without loss generality, simplifies theoretical results below.
say action executable state iff P RE(a) s. resulting state
executing action state defined as:
(
(s \ DEL(a)) ADD(a)
executable
def
P(s, a) =
undefined
otherwise
planning problem = hF, I, G, Ai, associate cost function c maps
every action non-negative real number: c : R+
0.
make use two items notation respect set actions A:
adders(f ): set actions add fluent f :
{a | f ADD(a)}
deleters(f ): set actions delete fluent f :
{a | f DEL(a)}
common representation solution planning problem sequential
plan. sequence actions ~a = [a1 , , ] executable preconditions action
sequence true corresponding state, executable sequence actions
sequential plan problem = hF, I, G, Ai executing actions ~a sequence,
starting state I, causes goal hold final state:
G P(P( P(I, a1 ) , an1 ), )
117

fiMuise, Beck, & McIlraith

readability, abbreviate progression sequential plan ~a state
P (s, ~a ). cost action sequence ~a = [a1 , . . . , ] sum individual
actions costs:
n
X
c (~a ) =
c (ai )
i=1

Rather impose total order actions plan, partial-order plan (POP)
specifies set ordering constraints actions. define POP respect
planning problem tuple hA, Oi set actions plan
set ordering constraints actions (Russell & Norvig, 2009).
action may appear A, assume every element
uniquely identifiable. actions a1 , a2 A, denote ordering constraint
a1 a2 (a1 a2 ) interpret constraint action a1 appears action
a2 plan. total ordering actions respects linearization.
POP provides compact representation multiple linearizations. assume ordering
constraints transitively closed:
a1 , a2 , a3 A, (a1 a2 ) (a2 a3 ) (a1 a3 )
Assuming transitively closed change fundamental structure
POP set linearizations remains allows us effectively compare
flexibility two POPs share action set.
Similar cost action sequence, cost POP P = hA, Oi sum
action costs actions P :
X
c (P ) =
c (a)
aA

simplify exposition follows, designate two actions POP
represent initial state goal state: aI aG respectively. aI ordered
every action, aG analogously ordered every action. planning
problem = hF, I, G, Ai, actions following definition:
P RE(aI ) =

P RE(aG ) = G

ADD(aI ) =

ADD(aG ) =

DEL(aI ) =

DEL(aG ) =

inclusion aI aG actions allow us simplify presentation many algorithms,
avoiding special checks procedure (e.g., assume always
first last action POP).
Depending POP constructed, may include set causal links, C.
causal link contains pair ordered actions, a1 , a2 (a1 may aI a2 may aG ),
p
fluent, p, a1 achieves p a2 : denoted (a1 a2 ). Causal links often
serve justifications ordering constraints POP.
Definition 1 (POP Validity: Notion 1). POP P valid planning problem
every linearization P sequential plan .2
2. Note notion 1 rely set causal links C.

118

fiOptimal Partial-Order Plan Relaxation via MaxSAT

simple intuitive, notion 1 rarely used verify validity POP
may prohibitively large number linearizations represented POP.
is, however, tractable equivalent notion POP validity uses concepts causal
links, open preconditions threats.
POP hA, Oi set causal links C, open precondition precondition p
action associated causal link:
p

@a0 s.t. (a0 a) C
precondition open, say supported, refer associated
action causal link achiever precondition. typical valid POP
one supporter every precondition action included POP,
make restriction work keep encoding general.
threat POP refers action invalidate causal link two
p
actions due ordering constraints (or lack thereof). Formally, (a1 a2 ) C,
p
say action a3 (distinct a1 a2 ) threatens causal link (a1 a2 )
following two conditions hold:
order a3 a1 a2 :
{(a3 a1 ), (a2 a3 )} =
action a3 deletes p:
p DEL(a3 )
existence threat means linearization exists violates causal
link, thus may executable. actions aI aG included,
following definition characterizes second notion POP validity.
Definition 2 (POP Validity: Notion 2). Given planning problem , POP P = hA, Oi
set causal links C, P valid POP planning problem action
open precondition causal link set C threatening action A.
causal link structure implicitly assessed verify POP validity polynomial
time (Nebel & Backstrom, 1994), set C strictly necessary. However, implicitly
explicitly, notion 2 requires actions causally supported threat-free manner.
subsequently following connection two notions POP validity:
Theorem 1 (POP Validity, due McAllester & Rosenblitt, 1991). notion 2 POP
validity holds, notion 1 holds. Additionally, notion 1 holds O,
set causal links C must exist notion 2 holds hA, Oi C.
final concept use POP based well-established metric measuring
constrained POP (Nguyen & Kambhampati, 2001; Siddiqui & Haslum, 2012): flex
measure many ordering constraints POP, normalized total
number potential ordering constraints. flex tends 1 number ordering
constraints tends 0, vice versa. per usual, assume set ordering
constraints transitively closed.
119

fiMuise, Beck, & McIlraith

Definition 3 (flex ). Given POP hA, Oi, define flex as,
|O|
flex (hA, Oi) = 1 P|A|1
i=1



P|A|1
use i=1 denominator instead traditional |A|2 latter
counts number possible ordering constraints. definition flex , fully
unordered POP flex value 1 sequential plan flex 0.
strive minimize number ordering constraints transitive closure.
Omitting transitive closure would amount optimizing transitive reduction
which, noted Backstrom (1998), less appeal leads long chains
plan.
2.2 Deorderings Reorderings
aim least commitment planning find flexible plans allow us defer decisions
regarding execution plan. Considering ordering constraints POP,
two important notions least commitment planning deordering reordering
POP. Following Backstrom (1998), define formally follows:
0

0

Definition 4 (Deordering Reordering). Let P = hA, Oi Q = hA , two
POPs, STRIPS planning problem:
1. Q deordering P wrt. iff P Q valid POPs , = A0 , O0 O.
2. Q reordering P wrt. iff P Q valid POPs , = A0 .
Recall assume ordering constraints POP transitively closed,
every action POP uniquely named (i.e., every repetition action given
unique name). proper deordering one ordering constraints form proper
subset (i.e., O0 ( O). define minimum deordering / reordering follows:
0

0

Definition 5 (Minimum Deorderings Reorderings). Let P = hA, Oi Q = hA ,
two POPs, STRIPS planning problem:
1. Q minimum deordering P wrt. iff
(a) Q deordering P wrt. ,
00

00

(b) deordering hA , P wrt. s.t. |O00 | < |O0 |.
2. Q minimum reordering P wrt. iff
(a) Q reordering P wrt. ,
00

00

(b) reordering hA , P wrt. s.t. |O00 | < |O0 |.
3. Q minimal deordering P wrt. iff
(a) Q deordering P wrt. ,
(b) proper deordering Q.
120

fiOptimal Partial-Order Plan Relaxation via MaxSAT

Note use cardinality rather set containment 1(b) 2(b)
orderings O0 O00 need overlap. equivalently refer minimum deordering
(resp. reordering) optimal deordering (resp. reordering). cases, prefer
POP smallest set ordering constraints. words, POP exists
actions fewer ordering constraints remaining valid respect
. problem finding minimum deordering reordering POP NP-hard,
cannot approximated within constant factor unless N P DTIME(npoly log n )
(Backstrom, 1998). may many optimal deorderings reorderings,
work distinguish further. compute minimal deordering
polynomial time iteratively removing unnecessary ordering constraints (i.e.,
cause plan become invalid).
2.3 Previous Approaches
many approaches computing partial-order plan, cover
representative examples here.
2.3.1 Partial-Order Causal Link Algorithms
Traditional methods producing partial-order plan follow approach called partialorder causal link (POCL) planning (Weld, 1994). POCL planning, modifications
iteratively made incomplete partial-order plan consists set actions, causal
links, ordering constraints. partial-order plan considered complete
conditions Definition 2 met.
key difference POCL planning standard state-based search
POCL planning search plan space. POCL planning search, every node
search space constitutes partial plan, whereas state-based search every node state
world; successor nodes generated applying actions state represented
current search node. contrast, possible modifications partial plan represent
choices available POCL planning search procedure. typical partial plan
modifications include:
1. Add new action partial plan.
2. Order two actions partial plan.
3. Create causal link two actions plan.
POCL planners popular late 1970s, 1980s, 1990s, starting Tates
NONLIN planner (Tate, 1976), forward search techniques one employed
planner (Hoffmann & Nebel, 2001) led planning research new direction.
recent POCL planner VHPOP (Younes & Simmons, 2003), unfortunately
competitive state-of-the-art forward search planners.
2.3.2 POPF
take advantage flexibility afforded POP search efficiency forward
state-based planners, Coles et al. introduced forward-chaining partial-order planner
121

fiMuise, Beck, & McIlraith

POPF (Coles et al., 2010). idea behind POPF restrict modifications permitted
partially completed plan complete state easily computed
represents truth fluents partial plan executed. Unlike POCL approaches
add actions achieve open preconditions, actions POPF chosen
preconditions satisfied heuristically lead goal (i.e., forward-search
manner). new action added plan, placed end plan
action already incumbent plan ordered newly added action
time insertion, new action may left unordered respect actions
already plan. Further, adding new action requires preconditions
causal links created immediately.
approach used POPF leverages partial-order nature planning domains
avoiding unnecessary reasoning permutations unordered actions; ordering constraints included required. Sequential planners may try
complete partial-order plan multiple times change different
permutation unordered actions, POPF avoid situation time
maintaining partial-order structure. Further, using recently introduced techniques
detect repeated states (Coles & Coles, 2016), planner avoids even unnecessary
permutations action sequences.
Finally, POPF leverages powerful techniques forward-search planners maintaining complete state world reached plan. state
information allows powerful heuristics computed efficiently.
2.3.3 Petri Net Unfolding
Predating work Coles et al. (2010), alternative approach generating partially
ordered plans via Petri net unfolding (Hickmott, 2008). general idea encode
evolution forward planning system repeated unfolding carefully
crafted Petri net: mathematical structure used model analyze dynamics
discrete distributed systems (Murata, 1989). unfolding process naturally represents
parallel partially ordered plan (Hickmott, Rintanen, Thiebaux, & White, 2007).
2009, Hickmott Sardina detailed theoretical property Petri net unfolding
partial-order plans, noting plan resulting Petri net unfolding minimal
deordering reordering respects strong independence (Hickmott & Sardina, 2009).
Strong independence restriction unordered actions partial-order plan:
ambiguity respect action produces particular fluent.
result, two different actions produce fluent f , unordered
neither required produce f either service achieving goal service
successful execution action plan. restriction makes deorderings
reorderings produced unfolding restrictive optimal deorderings
reorderings produced approach, require strong independence.
Similar POCL POPF approaches, Petri net unfolding exploited produce
partial-order plan directly, rather finding deordering reordering existing
plan, paper.
122

fiOptimal Partial-Order Plan Relaxation via MaxSAT

2.3.4 Relaxer Algorithm
Due Kambhampati Kedar (1994), Relaxer Algorithm3 operates removing
ordering constraints sequential plan systematic manner. heuristic guides
procedure and, detailed Backstrom (1998), process provide guarantee
resulting POP minimally deordered. error counterexample
used Backstrom demonstrate Kambhampati Kedars algorithm
necessarily produce minimally deordered POP. However, conclusion correct
provide new counterexample Appendix A.
intuition behind algorithm remove ordering (ai ak ) sequential plan ai achiever precondition ak removing ordering
lead threat. algorithm heuristically attempts choose earliest possible action sequential plan achiever precondition. example, consider
case sequential plan [a1 , ai , , ak , , ] p P RE(ak ).
algorithm keep ordering (ai ak ) leaving would create threat
precondition one actions, ai earliest action sequence
following holds:
1. p ADD(ai ): ai achiever p
2. aj , < j < k, p
/ DEL(aj ): p threatened.
Algorithm 1 presents approach formally. use index(a,~a) refer index
action sequence ~a, assume every action plan uniquely named.
~a valid plan, line 8 evaluate true either line 11 evaluates true
for-loop line 6 runs actions. is, know unthreatened achiever exists
earliest one found. achiever ordered action requiring
fluent precondition (line 14), for-loop line 16 adds necessary
ordering constraints achiever remains unthreatened. Note deleter found
for-loop, either line 17 19 must evaluate true. going outer
loop line 3, every action newly formed POP unthreatened supporting action
preconditions. resulting POP therefore valid (cf., Kambhampati
& Kedar, 1994, section 5.2).
2.3.5 SAPA Post-Processing
part post-processing phase SAPA planner, Kambhampati (2003)
introduce approach similar relaxing ordering plan. setting,
begin temporal plan actions assigned specific time points,
objective optimize either number ordering constraints temporal aspect
resulting plan.
strategy Kambhampati take (abbreviated DK here), model task
computing partial-order relaxation terms constraint satisfaction optimization
problem (CSOP). Variables introduced represent ordering actions, timing
duration actions, resource usage, etc. abstract CSOP formalism,
concrete mixed integer linear program (MILP) proposed realize set constraints
3. Referred order generalization originally.

123

fiMuise, Beck, & McIlraith

Algorithm 1: Relaxer Algorithm

1
2
3
4
5
6
7
8
9
10
11
12

13
14
15
16
17
18
19
20

21

Input: Sequential plan, ~a, including aI aG
Output: Relaxed Partial-order plan, hA, Oi
= set(~a);
= ;
foreach
foreach f P RE(a)
ach = null;
= (index(a, ~a) 1) 0
// See earlier achiever
f ADD(~a[i])
ach = ~a[i];
// Stop find deleter f
f DEL(~a[i])
break;
// Add appropriate supporting link
= {(ach a)};
// Add orderings avoid threats
foreach a0 deleters(f ) \ {a}
index(a0 , ~a) < index(ach, ~a)
= {(a0 ach)};
index(a0 , ~a) > index(a, ~a)
= {(a a0 )};
return hA, Oi;

model valid temporal plan. Similar work, DK contains option enforcing adherence original ordering constraints allows either deordering
reordering produced.
DK considers number optimization criteria including minimizing makespan,
maximizing sum slack temporal variables, maximizing flexibility
temporal variables, minimizing number ordering constraints. first three
related temporal planning domains, final one coincides optimization
criteria work. Experimental evaluation provided temporal optimization
criterion, Kambhampati empirically investigate minimization
ordering constraints.
Differences DK approach include formalism (we focus
temporal aspects), model used (unique encoding variables represent
action appearing plan unique encoding variables representing
time points resources), underlying solving technology (we rely partial weighted
MaxSAT instead MILP), finally MCLCP criterion. Section 4.4 compare
efficiency approach computing minimum reordering implementation
DK approach uses variables constraints relevant computing
minimum reordering.
124

fiOptimal Partial-Order Plan Relaxation via MaxSAT

2.4 Partial Weighted MaxSAT
compute relaxed plan, encode task partial weighted MaxSAT problem
solution encoding corresponds minimally relaxed plan optimizes
desired criteria. Here, review notation partial weighted MaxSAT use
throughout paper.
Boolean logic, problem Satisfiability (SAT) find true/false setting
Boolean variables logical formula referring variables evaluates true
(Biere, Heule, van Maaren, & Walsh, 2009). Typically, write problems Conjunctive
Normal Form (CNF), made conjunction clauses, clause
disjunction literals. literal either Boolean variable negation. setting
variables satisfies CNF formula iff every clause least one literal evaluates
true. example, setting variables x z true satisfy following theory:
(x y) (x z)

(1)

MaxSAT problem optimization variant SAT problem
goal maximize number satisfied clauses (Biere et al., 2009, ch. 19). Although
cannot satisfy every clause following theory, setting x, true z false
satisfies five clauses:
(x z) (x z) (y z) (x y) (z x) (z y)

(2)

Adding non-uniform weights clause allows richer version optimization
problem, refer maximizing weight satisfied clauses weighted MaxSAT
k

problem. use syntax ( ) indicate clause weight k. Generally,
weight must positive real number. Consider setting x false y, z true
following theory:
3

1

1

1

1

(x) (x y) (x z) (y) (z)

(3)

setting satisfies four clauses, total weight 4. aim
maximizing total weight satisfied clauses, achieve sum 5 assigning
variables true:
3

1

1

1

1

(x) (x y) (x z) (y) (z)

(4)

wish force solver find solution satisfies particular subset
clauses, refer clauses subset hard, clauses problem


soft. syntax use indicate hard clause ( ). mix hard
soft clauses, partial weighted MaxSAT problem (Biere et al., 2009, ch. 19.6).
partial weighted MaxSAT problem, soft clauses given weight,
feasible solution corresponds setting variables satisfies hard clauses
125

fiMuise, Beck, & McIlraith

CNF. optimal solution partial weighted MaxSAT problem feasible
solution maximizes sum weights satisfied soft clauses. following
example, setting variables x, false z true satisfies every hard clause one
soft clauses:
1

2

3







(x) (y) (z) (x z) (y z) (x y)

(5)

Although required partial weighted MaxSAT general, encodings create
never contain soft clause one literal. special form partial
weighted MaxSAT problem, referred binate covering problem (Coudert, 1996), allows
us flip optimization criterion: minimizing sum satisfied soft (unit) clauses
equivalent maximizing sum unit clauses literal flipped (e.g., x
goes x vice versa). Using technique solve minimization problem
partial weighted MaxSAT solver works soft clauses contain single literal.
property key encoding, objective always minimize.

3. Approach
view sequential plan (also referred total-order plan) special case
partial-order plan exists ordering constraint every pair actions.
Quite often, many ordering constraints required: ordering certain
actions may switched goal still achieved new sequence actions.
aim maximizing flexibility POP, strive minimize number ordering
constraints included solution. objective motivates need identify precisely
ordering constraints POP relevant POPs validity.
Definition 6 (Ordering Relevance). Given planning problem = hF, I, G, Ai valid
POP P = hA, Oi , ordering constraint relevant respect P
iff hA, {o}i valid POP .4
Ordering relevance plays central role definitions minimal minimum POP
deorderings: relevant ordering constraints precisely cannot removed
without invalidating POP (Backstrom, 1998). Additionally, Relaxer Algorithm
Kambhampati Kedar (1994) operates identifying set ordering constraints
suspected relevant (i.e., selected achievers action preconditions).
maximize flexibility POP, focus encoding retaining relevant
orderings. difficult measure efficiently, strive maximize flexibility inherent
POP, loosely defined number linearizations POP represents. number
unordered pairs actions POP, typically referred flex (Siddiqui & Haslum,
2012), provides approximation POPs flexibility. evaluation, quantify
accuracy flex approximation POPs flexibility.
discussed earlier, verifying POPs validity way linearizations
always practical. Similarly, attempt compute POPs maximize
4. Note transitive closure P necessarily different transitive closure hA, {o}i
relevant respect P .

126

fiOptimal Partial-Order Plan Relaxation via MaxSAT

number linearizations, rather compute POPs adhere one
previously mentioned criteria removing redundant orderings: minimum deordering
minimum reordering.
3.1 Minimum Cost Least Commitment Criterion
notion minimum deordering reordering POP addresses commitment ordering constraints, orthogonal objective commit resources
possible typically measured either time plan executed parallel
sum action costs actions plan. Historically, latter objective takes precedence metrics. end, provide extended criterion computing
minimum cost least commitment POP (MCLCP).
0

0

Definition 7 (Minimum Cost Least Commitment POP). Let P = hA, Oi Q = hA ,
two POPs valid . Q minimum cost least commitment POP (MCLCP) P iff
00
00
Q minimum reordering, A0 A, exist valid POP R = hA ,
A00 following condition holds:
c (R) < c (Q) (c (R) = c (Q) |O00 | < |O0 |)
work, assume every action positive cost. may turn
preferring fewer actions causes us commit ordering constraints, simply due
interaction actions choose. practice, however, usually place much
greater emphasis minimizing total cost plan. worth noting
plan exists proper subset actions input plan, computing MCLCP
equivalent computing minimum reordering.
Following MCLCP criterion, evaluate quality POP total
action cost number ordering constraints contains; metrics give us direct
measure least commitment nature POP primary emphasis placed
removing unnecessary commitments actions.
3.2 Encoding
encode task finding minimum deordering, reordering, MCLCP partial
weighted MaxSAT problem given input planning problem corresponding initial plan.
optimal solution default encoding correspond MCLCP. is,
POP exists cheaper overall cost cost fewer ordering constraints
transitive closure. present core encoding Section 3.2.1 prove
soundness completeness encoding Section 3.2.2. add clauses
produce encodings correspond optimal deorderings reorderings, present
modifications Section 3.2.3.
3.2.1 Basic Encoding
contrast typical SAT encoding planning problem (e.g., Kautz & Selman,
1999), require actions replicated successive plan steps. Instead,
represent action occurrence reason ordering
actions. actions encoding come provided sequential partial-order plan,
127

fiMuise, Beck, & McIlraith

P = hA, Oi. use (P ) denote partial weighted MaxSAT encoding corresponding
POP P = hA, Oi, refer POP corresponding encodings solution
target POP. target POP reconstructed encodings solution looking
variables set true. use three types propositional variables:
xa : every action A, xa indicates action appears target POP.
(a1 , a2 ): every pair actions a1 , a2 A, (a1 , a2 ) indicates ordering
constraint (a1 a2 ) appears target POP.
(ai , p, aj ): every action aj A, p PRE(aj ), ai adders(p), (ai , p, aj )
indicates ai supports aj fluent p target POP.
partial weighted MaxSAT encoding distinction hard soft
clauses. first present hard clauses encoding Boolean formulae
subsequently convert CNF, later describe soft clauses associated
weights.5 define formulae ensure target POP acyclic,
ordering constraints include transitive closure. Here, actions universally quantified,
formula (9) assume aI 6= ai 6= aG . must ensure that:
self-loops:
((a, a))

(6)

include initial goal actions:
(xaI ) (xaG )

(7)

use ordering variable, include actions:
(ai , aj ) xai xaj

(8)

action cannot appear initial action (or goal):
xai (aI , ai ) (ai , aG )

(9)

solution satisfies transitive closure ordering constraints:
(ai , aj ) (aj , ak ) (ai , ak )

(10)

Together, (6) (10) ensure target POP acyclic (note implies
antisymmetry well), remaining formulae tie two types variables together
deal initial goal actions. Finally, include formulae needed ensure
every action preconditions met, threats solution:


5. readability, omit hard clause symbol, ( ), constraints (6)-(12).

128

fiOptimal Partial-Order Plan Relaxation via MaxSAT

(ai , p, aj )

^

xak (ak , ai ) (aj , ak )

(11)

ak deleters(p)

^

xaj

_

(ai , aj ) (ai , p, aj )

(12)

pP RE(aj ) ai adders(p)

Intuitively, (ai , p, aj ) holds ai achiever precondition p action aj
deleter p allowed occur actions ai aj ; i.e., corresponds
directly unthreatened causal link. Formula (11) ensures every causal link remains
unthreatened satisfying variable setting, view two ordering variables
formula form common partial-order planning concepts promotion
demotion (Weld, 1994). Formula (12) ensures include action aj target POP,
every precondition p aj must satisfied least one achiever ai . (ai , aj ) orders
achiever correctly, (ai , p, aj ) removes possibility threatening action.
far, constraints described capture required POP valid.
go address notion ordering relevance presented Definition 6, well
metric minimizing total action cost MCLCP, make use soft clauses.
generate MCLCP, prefer solutions first minimize total action cost,
minimize number ordering constraints. add soft unit clause, containing
negation variable, every action ordering variable encoding.
violation one unit clauses means solution includes action
ordering constraint corresponding violated clauses variable. weight assigned
follows:
1

((ai , aj )), ai , aj
c (a)+|A|2 +1



(xa )

, \ {aI , aG }

Note weight single action clause greater weight ordering constraint clauses combined, |A|2 total ordering
constraints. increased weight guarantees generate solutions minimum
action cost.6 enforce transitive closure ordering constraints, second type soft clause lead solver find POP (among cheapest
total action cost) minimizes size transitive closure.
Richer notions, weighted trade-off ordering constraints action
costs, easily modelled using appropriate assignment weights soft clauses
encoding. focus primarily deordering reordering aspects
work, leave alternative encodings future work.
3.2.2 Theoretical Results
section present theoretical properties core encoding.
6. wish minimize number actions solution, need replace c (a) 0.

129

fiMuise, Beck, & McIlraith

Lemma 1 (Variable Setting Implies POP). Given planning problem valid POP
P = hA, Oi, variable setting satisfies formulae (6)-(12) (P ) correspond valid POP ordering constraints transitively closed.
Proof. already seen POP induced solution hard clauses
acyclic transitively closed (due formulae (6)-(10)). see
open preconditions include aG , conjunction (12) ensures
every precondition satisfied POP includes action. Additionally,
threats final solution formula (11), enforced
every time precondition met formula (12). POP corresponding
solution hard clauses open preconditions threats, Theorem 1
allows us conclude target POP valid .
Lemma 2 (POP Implies Variable Setting). Given planning problem valid POP
0
0
P = hA, Oi, valid POP Q = hA , i, A0 O0 transitively closed,
corresponding feasible variable assignment satisfies (P ).
Proof. lemma follows direct encoding POP Q xa = true iff
A0 (ai , aj ) = true iff (ai aj ) O0 . Q valid POP, acyclic,
include aI aG , actions ordered aI aG , transitively
closed (satisfying (6)-(10)). see (11) (12) must satisfied: (12)
hold, would action POP precondition p
every potential achiever p threat could ordered achiever
a. situation possible POP invalid, contradiction.
Theorem 2 (Completeness). Given planning problem valid POP P = hA, Oi,
complete partial weighted MaxSAT solver find solution soft clauses formulae
(6)-(12) (P ) minimizes total cost actions corresponding POP,
subsequently minimizes number ordering constraints.
Proof. Given |A| actions, |A|2 ordering constraints. every soft
clause corresponding ordering constraint weight 1, total sum satisfying every ordering constraint clause |A|2 . weight satisfying
action clause greater |A|2 , soft clauses corresponding actions dominate
optimization criteria. such, valid POP subset
actions P lower total action cost solution satisfies formulae (6)-(12)
maximizing weight satisfied soft clauses.
Theorem 3 (Encoding Correctness). Given planning problem , valid POP P
, solution partial weighted MaxSAT encoding (P ) MCLCP P .
Proof. Theorem follows directly Lemmas 1, 2, Theorem 2.
3.2.3 Variations
Observe (P ) make use set ordering constraints P . optimal
solution encoding correspond MCLCP, enforce solutions
minimum deorderings reorderings, introduce two additional sets hard clauses.
130

fiOptimal Partial-Order Plan Relaxation via MaxSAT

Actions: optimal deorderings reorderings, require every action part
target POP. consider formula ensures use every action (and
optimization works ordering constraints). achieve this, simply need
add action hard clause:


(xa ),

(13)

soft unit clauses trivially unsatisfiable, removed preprocessing phase MaxSAT solving process. optimal solution soft constraints
formulae (6)-(13), referred R (P ), corresponds minimum reordering P .
Deordering: deordering must forbid explicit ordering contradicts
input plan. Assuming input plan P = hA, Oi, ensure computed solution
deordering adding following family hard unit clauses:


((ai , aj )), (ai aj )
/O

(14)

Similar introduction hard unit clauses action inclusion, using clauses
(14) eliminate number ordering constraint soft clauses encoding
preprocessing phase MaxSAT solver. optimal solution soft constraints formulae (6)-(14), referred (P ), corresponds minimal deordering
P . additionally could use (14) forgo use (13), variation one
typically studied, provide benefit computing MCLCP.

4. Evaluation
evaluate ability effectiveness state-of-the-art partial weighted MaxSAT
solver, Sat4j (Le Berre & Parrain, 2010), optimally relax plan using proposed
encodings.7 use MD MR encodings, ensure actions always
included solution (i.e., using Actions constraint (13)). investigate
effectiveness Relaxer Algorithm (RX) produce minimally constrained deordering. measure quality POP, use either flex value (cf. Section 2),
number linearizations (whenever feasible compute).
analysis, considered every STRIPS domain previous International
Planning Competitions (IPC, Hoffmann, 2016). discarded two domains (childsnack
tidybot) due difficulty planners generating initial solution.
18 discarded due constrained nature; form offers little
flexibility (any domain average flex value less 10% removed).8
Using evaluation would uninformative since already relaxed
7. Additionally, evaluated 2013 winner partial weighted MaxSAT contest crafted instances,
MaxHS (Davies & Bacchus, 2013), however, found Sat4j outperformed MaxHS slightly
coverage time.
8. 18 overly constrained domains visitall, blocksworld, sokoban, pegsol, ged, parking, barman, gripper, cybersec, psr-small, storage, nomystery, mystery, mprime, freecell, hiking, floortile, thoughtful.

131

fiMuise, Beck, & McIlraith

possible, solver determined trivially. evaluate using recent
version domain multiple problem sets exist, Table 1 shows set 15
domains considered throughout evaluation.
conducted experiments Linux desktop 3.4GHz processor,
run Sat4j limited 30 minutes 4GB memory. generate initial sequential
plan, used Mercury planner (Domshlak, Hoffmann, & Katz, 2015); best performing non-portfolio planner recent satisficing IPC competition. Additionally,
evaluation, computed initial solutions using state-of-the-art SAT-based
planner, Mp (Rintanen, 2012), state-of-the-art partial-order planner, POPF (Coles
et al., 2010). offer alternative methods generate initial partially ordered plan,
investigate impact plans structure relaxation process.
assess various aspects approach four separate experiments. First,
evaluate difficulty computing feasible solution addition optimal one (we
obtain solutions increasing quality using Sat4j any-time fashion). Next, look
quality POP produced encodings well POP produced
Relaxer Algorithm. Here, measure quality flex plan transitive
closure, number linearizations plan wherever feasible compute.
demonstrate empirically accuracy flex measure indicator
number linearizations. Next, consider impact initial plan form
relaxation, taking account starting solution three planners. Finally,
compare approach computing minimum reordering similar approach
Kambhampati (2003).
4.1 Solving Completion
begin brief discussion various configurations approach
coverage, well weaknesses methods. report problems
planner able find plan within resource limits.9 Table 1 shows
following information every domain:
number problems domain shown brackets next domain name.
number problems solved planner Plans column.
Solved column indicates number plans successfully encoded solved.
Every problem could encoded MR could encoded MD,
MaxSAT solver produced least one solution every encoded problem. Further,
every encoded MD problem solved completion within resource limits.
MR column indicates number encoded MR problems solved completion.
must emphasize purpose evaluation compare efficiency
three planners (as strengths weaknesses). Rather, consider
type plan produces related relaxing ordering constraints
plan. Consequently, purpose Table 1 provide insight problems
included analysis, bring light challenges encoding
solving problems completion.
9. Providing twice amount time memory planners lead problems solved.

132

fiOptimal Partial-Order Plan Relaxation via MaxSAT

Domain

Mercury
Plans Solved

MR

POPF
Plans Solved

MR

Plans

Mp
Solved

MR

airport (50)

32

29

29

24

21

21

32

29

29

depot (22)

21

21

19

10

10

10

20

20

14

driverlog (20)

20

20

16

15

15

15

17

15

10

elevators (20)

20

10

6

1

1

0

0

-

-

logistics (42)

35

9

5

5

5

5

12

7

2

parcprinter (20)

20

20

20

15

15

15

20

20

20

pipesworld (50)

42

42

42

23

23

22

14

14

14

rovers (40)

40

33

22

24

24

21

39

33

27

satellite (36)

35

29

29

13

13

13

26

25

17

scanalyzer (20)

20

17

12

10

7

7

15

15

14

tetris (20)

19

19

19

0

-

-

1

1

1

tpp (30)

30

28

11

13

13

8

20

20

11

transport (20)

20

6

5

0

-

-

0

-

-

woodwork (20)

20

20

20

5

4

4

20

20

20

zenotravel (20)

20

20

20

16

16

16

20

20

16

(460)

394

323

275

174

167

157

256

239

195

Table 1: Per domain solver relaxation coverage. Values brackets indicate benchmark size. Plans column indicates many problems respective planner solved.
Solved column indicates many solved problems successfully encoded
solved: every encoded problem solvable MD MR, every MD encoding solvable completion. MR column indicates number problems
successfully encoded, MR solved completion.

problem could encoded, due large number actions
plan; typically plans 200 actions caused issue. domains
problematic (e.g., elevators, logistics, transport), see initial
coverage non-sequential planners suffers well. problem encoding plans
contain many actions due number transitivity clauses included formula
(10), cubic number actions.
tetris domain proved extremely difficult POPF Mp solve, although
number actions plans Mercury small enough encode. Finally, found
proving optimality MR encoding tpp rovers difficult,
clear indication why: rovers high flex , high
domains, opposite true tpp. domains, however, good initial plans
produced quickly Sat4j, solver devoted remaining time making small
improvements proving optimality.
133

fiMuise, Beck, & McIlraith

Figure 1: number problems solved completion Sat4j given limited amount
time per problem, well number problems solved RX algorithm. Every
MD encoding solved completely Sat4j, RX polynomial sub-optimal technique
shown comparison solve time.

Mercury solved strict superset problems solved POPF Mp. such,
use sequential plans produced Mercury input majority evaluation
(Section 4.3 one exception). Figure 1 provides view long took Sat4j
optimally solve MD MR encodings initial plans Mercury produced:
show number problems solved optimally function time (including encoding
phase). comparison, include aggregate time RX well. strong run-time
performance RX expected given polynomial time algorithm without
optimality guarantees.
4.2 Plan Quality
begin, discuss surprising result Relaxer algorithm planning benchmarks. every one 323 problems Sat4j solved MD encoding optimally,
POP produced Relaxer algorithm contained number ordering
constraints. Even though theoretically Relaxer algorithm guaranteed find
minimal POP, nonetheless computes minimum deordering every tested problem. RX
produce deorderings, best RX could hope achieve. Note
may many candidates minimum deordering, RX necessarily find
one MD encoding finds.
Next, consider difference quality minimum deordering minimum reordering. Quality measured flex transitive closure generated
POP, include problems MD MR encodings
134

fiOptimal Partial-Order Plan Relaxation via MaxSAT

solved completion Sat4j (275 total plans generated Mercury). Table
2 shows average flex MD MR domains, Figure 2 shows flex
comparison per-problem basis domains.
Domain

MD

MR

airport
depot
driverlog
elevators
logistics
parcprinter
pipesworld
rovers
satellite
scanalyzer
tetris
tpp
transport
woodwork
zenotravel

0.28
0.31
0.33
0.31
0.56
0.76
0.16
0.68
0.39
0.31
0.49
0.37
0.51
0.96
0.32

0.37
0.36
0.34
0.32
0.58
0.76
0.16
0.69
0.39
0.31
0.50
0.38
0.51
0.96
0.32

Table 2: Average flex

Figure 2: MD versus MR flex Comparison
135

fiMuise, Beck, & McIlraith

Domains see substantial improvement include airport depot. Domains
saw zero gain terms flexibility include parcprinter, transport, woodwork.
total, almost one third (76/275) problems showed improvement flex MR
MD varying degrees.10
flex value fails convey extreme amount execution flexibility introduced
relaxations. investigate further, computed number linearizations
plans wherever feasible. Determining number total orders partially ordered
graph #P-Complete (Brightwell & Winkler, 1991), practice difficult compute
precisely many graphs. able compute number linearizations
MD MR solutions total 203 problems solution encodings
computed. found approximately one quarter (51/203) showed difference
number linearizations, plot ratio #Linears(MR) / #Linears(MD)
51 problems Figure 3.

Figure 3: Ratio Linearizations. y-axis represents number linearizations induced
POP optimal reordering divided number linearizations induced
POP optimal deordering. x-axis ranges problems number
linearizations differed (25%), sorted based y-axis.
extreme, improvement number linearizations massive;
13 orders magnitude one airport problem. Conversely, see interesting
artefact resulting optimizing metric acts proxy number linearizations: flex value MR never lower MD, POPs
produced approach using flex optimization criterion opposite
effect number linearizations.
10. Many smaller improvements show scatter plot.

136

fiOptimal Partial-Order Plan Relaxation via MaxSAT

three problems (one tetris two depot), found number
linearizations POP produced MR encoding fewer number
linearizations POP produced MD encoding. number ordering
constraints POP given number actions usually indicative number
linearizations POP, three problems indicate universal rule.
concrete example, consider two POPs four actions = {a1 , a2 , a3 , a4 }. Ignoring
causal links, Figure 4 shows structure POPs P1 P2 . POPs
number actions ordering constraints, number linearizations differ:
P1 6 linearizations P2 5. POPs serve basic example
flex criterion capture fully notion POP flexibility use
work. may similar notions take differences account,
left future investigation (see Say, Cire, Beck (2016) recent work
direction).

a2
a1

a3

a1

a4

a3

(a) P1

a2

a4
(b) P2

Figure 4: Two POPs number actions ordering constraints,
different number linearizations.

demonstrate correlation POPs flex number linearizations,
focused random partial orders POP 20 actions (not including special
actionis aI aG ).11 constructed 10,000 random partial orders (8,959 unique)
spread flex value 0.0 1.0, subsequently computed corresponding
number linearizations every POP. 100 POPs constructed target flex value
(taken 0.01 increments), method construction iteratively add new edges
present transitive closure POP reached target flex value.
Qualitatively, POPs resembled found using planning techniques. reason
use randomly generated plans due number examples required trend
present (comparing plans varying number actions uninformative). Figure
5 shows flex function number linearizations normalized total number
linearizations possible (in POPs, equals 20! roughly 2.4 1018 ).
Pearson correlation coefficient log normalized linearization count
flex value 0.991, clear trend ties together flex POP
number linearizations. red line Figure 5 line-of-best-fit using log scole
linf lex values (as plot x-axis does). Interestingly, use line
11. Similar results hold random POPs different number actions.

137

fiMuise, Beck, & McIlraith

Figure 5: Comparison normalized number linearizations flex value
approximately 10,000 random POPs 20 actions. Every point represents unique
POP 20 actions. linf lex value computed normalizing total number
linearizations possible (20!), note x-axis uses log scale. red
line line-of-best-fit using log linf lex.
predictor number linearizations, flex overestimates number linearizations
highly constrained plans underestimates number linearizations unconstrained
plans. Though minimizing number ordering constraints transitive closure
POP want optimize directly, serve highly informative proxy
maximizing number linearizations POP.
4.3 Initial Plan Impact
Different planning techniques generate solutions varying forms. sequential planners
far widely used, planners create inherently partially
ordered solutions. example, POPF planner uses forward-chaining approach
results partial-order plan represented layered sets unordered actions.
Similarly, SAT-based planners Mp produce solutions contain layers unordered
actions. two approaches fundamentally differ search solution,
fundamentally different sequential planner searches. One question
arises differences whether lead fundamentally different solutions;
amenable relaxing different ways. investigate impact starting solution
relaxed solution quality ability compute optimal solution.
encoding minimum reordering take account original sequence
actions. Therefore, encoding used without modification plans produced
138

fiOptimal Partial-Order Plan Relaxation via MaxSAT

POPF Mp. similar sense, plans produced POPF Mp encoded
minimum deordering carefully applying equation 14: include link
every pair actions share layer. obtained layered plan
representation POPF Mp directly using appropriate planner settings.
Across domains, 287 problems mutually solved completion Sat4j using
solutions produced three planners either MD MR encoding. 78
contained number actions. Figure 6 shows time Sat4j required
solve problem completion Mercurys plans measured plans
two planners. first plot shows 287 problems mutually solved, see
performance improvement solutions coming Mercury solver.12 However,
limit 78 problems contain number actions
solutions, find Sat4j solve-time much comparable
solvers. Thus, appears little effect solving efficiency based input
solution format. primary factor Sat4j solve time number actions represented
encoding.

(a) problems mutually solved Sat4j using (b) subset mutually solved problems consource plan planner.
tain number actions.

Figure 6: Comparison time relax Mercury plan versus time relax POPF
Mp plan. MD MR encodings included data.
addition, investigated resulting flex produced POPs. 78 problems
mutually solved number actions, two (from scanalyzer domain)
contained different set actions resulted slightly higher flex values
minimum deordering reordering Mercurys solution compared planners.
hand, six problems airport domain lower flex value
minimum deordering Mp solutions despite number actions.
indicates conditions, initial layered plan produced Mp may
allow much relaxation compared forward search planner Mercury
POPF. note, however, vast majority problems flex
minimum deordering reordering coincided across initial plan types.
12. Note time include initial planner computation; time encode solve
MaxSAT encoding.

139

fiMuise, Beck, & McIlraith

Finally, investigated improvement flex planner compared initial
solution. Mercury, initial flex value always 0, sequential planner.
reordering allowed ignore original ordering constraints, consider
improvement flex minimum deordering plans coming POPF Mp.
Figure 7 shows relative flex comparison original plan minimum
deordering computed. plots, include every problem solved successfully
completion Sat4j plans produced POPF (167) Mp (219).

(a) flex improvement POPF

(b) flex improvement Mp

Figure 7: Comparison original plan flex versus flex minimum deordering.
found majority initial flex values Mp POPF solutions fell
within range 0 0.2, difference flex solutions solver
minimal. moderate correlation original final flex value:
Mp POPF solutions Pearson correlation coefficient 0.57 0.42 respectively.
However, observed distinction relaxing Mp solutions versus POPF
either time compute relaxation, flex final POP.
4.4 Comparison MILP Encoding
model relaxing ordering plan presented Kambhampati
(2003) involves temporal constraints resources aspects beyond
consider here. Nevertheless, fragment model capable computing either
minimum deordering reordering plan, worthwhile see effective
finding optimal reordering. forgo testing previous work computing
optimal deordering, Relaxer Algorithm effective so. note
Kambhampati considered using model heuristically guide solver
reasonable solution instead optimal one.
optimization framework Kambhampati use model problem relaxing
ordering plan Mixed Integer Linear Programming (MILP). MILP consists
set linear constraints defined variables take integer real
values. optimization criterion specified weighted linear combination subset
variables problem either maximized minimized.
140

fiOptimal Partial-Order Plan Relaxation via MaxSAT

need go detail, MILP model presented section quite basic
uses integer variables encoding.
Here, present version MILP model introduced Kambhampati
comparison partial weighted MaxSAT model. modifications fall three
categories: (1) fixes bugs original formulation, (2) removal variables constraints relevant setting (i.e., temporal resource related portions
model), (3) adding constraints enforce solution transitive closure.
variables use model include following:

Xafj ,ai

(
1
=
0

ai supports aj fluent f
otherwise

Yafi ,aj

(
1
=
0

ai ordered aj due interference fluent f
otherwise

Oai ,aj

(
1
=
0

ai ordered aj
otherwise

Note Xafj ,ai Oai ,aj analogous (ai , f, aj ) (ai , aj ) respectively.
interference variables Yafi ,aj defined cases aj conflict
execution ai fluent f : either f (P RE(ai ) ADD(ai )) DEL(aj ) f
(P RE(aj ) ADD(aj )) DEL(ai ) holds. constraints MILP model follows
(unbound variables assumed universally quantified).
Interfering actions must ordered (defined pairs actions interfere):
Yafi ,aj + Yafj ,ai = 1
Every precondition supported exactly one way:13
X
f P RE(aj ),
Xafj ,ai = 1
ai adders(f )

Every support threat free:
ad deleters(f ), (1 Xafj ,ai ) + (Yafd ,ai + Yafj ,ad ) 1
Support implies ordering:
Oai ,aj Xafj ,ai 0
13. original paper constraint erroneously listed

141

P

ai adders(f )

Xafi ,aj = 1.

fiMuise, Beck, & McIlraith

Interference implies ordering:
Oai ,aj Yafi ,aj 0
Enforce transitive closure ordering constraints:
(1 Oai ,aj ) + (1 Oaj ,ak ) + Oai ,ak 1
Forbid self loops ordering:
Oa,a = 0
Order everything initial state action goal action:
OaI ,a = 1
Oa,aG = 1
final three constraints appear original model. last one replaces
constraints referenced temporal variables achieve effect, first two
ensure solution transitively closed. mentioned earlier, optimizing transitive closure preferred optimizing transitive reduction. Finally, optimization
criterion MILP model follows.
inimize

X

Oa1 ,a2

a1 ,a2

model produce reorderings input plan feasible solutions,
find minimum reordering solved completion. implemented MILP model
using state-of-the-art MILP solver Gurobi (version 5.6.2) (Gurobi Optimization, Inc.,
2015), measured coverage domains function time. Figure 8 contains
results.
found using MILP model effective easier problems (those solved
2 seconds), anything difficult, solving partial weighted MaxSAT
encoding Sat4j proved efficient. Overall, 275 problems solved using Sat4j
partial weighted MaxSAT encoding 226 problems solved using Gurobi
MILP model.
additionally tested MILP model mirrors partial weighted MaxSAT encoding presented above. However, results similar shown Figure
8, MILP encoding consistently outperformed problems take
second solve.

5. Discussion
paper, proposed practical method computing optimal deordering
reordering sequential partial-order plan. Despite theoretical complexity computing optimal deordering reordering NP-hard, able compute
142

fiOptimal Partial-Order Plan Relaxation via MaxSAT

Figure 8: given timeout (x-axis), number problems solved completion within
timeout bound (y-axis) (1) Sat4j using MR encoding (2) Gurobi using
MILP encoding described text.

optimal solution leveraging power modern MaxSAT solvers. proposed
extension classical least commitment criteria minimal deordering reordering: minimum cost least commitment POP (MCLCP). MCLCP considers total
cost actions solution minimizing number ordering constraints. Central
encodings propose notion ordering relevance: designed optimization
criteria minimize ordering constraints resulting plan, leaving
relevant plan validity.
approach uses family novel encodings partial weighted MaxSAT,
solution corresponds optimal POP satisfying one three least commitment criteria
investigate: minimum deordering, minimum reordering, proposed minimum cost
least commitment POP. solve former two encodings state-of-the-art partial
weighted MaxSAT solver, Sat4j, find majority problems readily handled
MaxSAT solver reasonable amount time.
considered various input plan formats, well similar encoding optimizing
plan flexibility, found using sequential plan input encodings
effective solution computing reordering; perhaps surprisingly, benefit
observed using planner naturally generates partial orders (Mp).
investigated existing polynomial algorithm deordering sequential plans
discovered successfully computes optimal deordering every problem
tested, despite lack theoretical guarantee. algorithm fast practice,
well suited relaxing POP require deordering. Finally, established
strong empirical correspondence commonly used flex metric number
linearizations represented POP.
143

fiMuise, Beck, & McIlraith

Here, discuss related work conclude discussion potential future work.
5.1 Related Work
Section 2.3, detailed variety approaches naturally produce partial-order
plans. Here, review work related aspects approach.
standard SAT-based planning encodings produce POP (Kautz, McAllester,
& Selman, 1996), significant difference standard encodings work
avoid encoding action every layer planning graph appealing
fact already know (superset of) actions solution. Intuitively,
view encoding using MaxSAT find implicit layers actions plan
way computing relevant ordering constraints. additional difference
choosing layer every action unnecessarily restricts timing action
potentially appear multiple adjacent layers.
notion MCLCP related plan repair (Nebel & Koehler, 1995; Gerevini
& Serina, 2000). key difference, however, consider addition new
actions cost plan improved removing actions MCLCP. focus
paper improving flexibility POPs, forgo full theoretical empirical
comparison MCLCP criterion existing plan repair techniques. Preliminary
results effect MCLCP action removal technique found previous
work subject (Muise et al., 2012; Muise, 2014).
core encoding similar causal encodings Kautz et al. (1996) Variant-II
Robinson, Gretton, Pham, Sattar (2010). similarly encode ordering
pair actions variable ((ai , aj ) case), rather encoding every
potential action occurrence modelling relaxed planning graph, encode formulae
must hold valid POP specific set actions provided part input.
mentioned Section 2.3, similarities work
Kambhampati (2003). particular, optimization criterion minimizing number
ordering constraints coincide, optional use constraints force deordering.
Kambhampati focus temporal relaxation context action ordering,
take orthogonal view minimizing total action cost.
5.2 Conclusion
use method computing optimally relaxed plans provides two key advantages:
(1) maximizing flexibility paramount, solving MR encoding lead far
flexible solutions MD encoding Relaxer Algorithm achieve, (2)
optimal deordering provides useful baseline demonstrating effectiveness
Relaxer Algorithm. work leaves open possibility heuristic approach similar
Relaxer Algorithm capable producing reorderings partial-order plan.
One extension work consider alternative forms optimization criteria.
example, one may change soft clauses minimize number fluents
initial state required plan validity. potential improve
planning formalisms attempt minimize reliance information initial
state, assumption-based planning (Davis-Mendelow, Baier, & McIlraith, 2013).
Alternatively, initial set actions need correspond directly plan. long
144

fiOptimal Partial-Order Plan Relaxation via MaxSAT

subset actions achieve goal, compute plan. opens door
techniques optimizing plans adding actions select from, using techniques
introduced Davies, Pearce, Stuckey, Sndergaard (2014).

Acknowledgments
authors gratefully acknowledge funding Ontario Ministry Innovation
Natural Sciences Engineering Research Council Canada (NSERC). Thanks
go anonymous reviewers thoughtful feedback review process.

Appendix A. Relaxer Counterexample
Relaxer Algorithm presented Section 2.3.4 deorders input plan, pointed
Backstrom (1998), resulting POP may minimal deordering. counterexample provided Backstrom, however, incorrectly states resulting POP
minimally deordered (Backstrom, 1998, Figure 14), fact Figure 14(b)
deordering 14(a), thus 14(a) minimal deordering (although minimum reordering). Here, present new counterexample supports claim Relaxer
Algorithm may produce minimum deordering.
domain theory problem specification shown Figure 9. input plan
sequence actions [a1 , a2 , a3 ]. Relaxer Algorithm seeks earliest
achiever every precondition, algorithm results deordering plan
two ordering constraints: (a1 a3 ) (a2 a3 ). problem deordering
a1 chosen achiever fluent p, fact a2 used achiever
p q (note a2 already required fluent q).
weakness Relaxer Algorithm uses earliest achiever. weakness surfaces action later plan used achiever already ordered
appropriately. Using insight, may modification Relaxer Algorithm
finds achievers already ordered appropriately, opposed finding earliest achiever.

145

fiMuise, Beck, & McIlraith

(define (domain counterexample)
(:requirements :strips)
(:predicates (p) (q) (g1) (g2) (g3) )
(:action a1
:parameters()
:precondition ()
:effect (and (g1) (p)))
(:action a2
:parameters()
:precondition ()
:effect (and (g2) (p) (q)))
(:action a3
:parameters()
:precondition (and (p) (q))
:effect (and (g3))))
(define (problem counterexample-problem)
(:domain counterexample)
(:init ())
(:goal (and (g1) (g2) (g3) )))
Figure 9: Counterexample Domain Problem Description

References
Anderson, J. S., & Farley, A. M. (1988). Plan abstraction based operator generalization.
7th International Conference Artificial Intelligence, pp. 100104.
Backstrom, C. (1998). Computational aspects reordering plans. Journal Artificial
Intelligence Research, 9 (1), 99137.
Biere, A., Heule, M., van Maaren, H., & Walsh, T. (2009). Handbook satisfiability,
frontiers artificial intelligence applications. IOS Press.
Brightwell, G., & Winkler, P. (1991). Counting Linear Extensions #P-Complete. 23rd
Annual ACM Symposium Theory Computing, 8 (3), 175181.
Coles, A., & Coles, A. (2016). Before? State Memoization Temporal
Planning. 26th International Conference Automated Planning Scheduling,
pp. 97105.
Coles, A., Coles, A., Fox, M., & Long, D. (2010). Forward-chaining partial-order planning.
20th International Conference Automated Planning Scheduling, pp. 4249.
Coudert, O. (1996). solving covering problems. 33rd Annual Design Automation
Conference, pp. 197202.
146

fiOptimal Partial-Order Plan Relaxation via MaxSAT

Davies, J., & Bacchus, F. (2013). Postponing optimization speed MAXSAT solving.
19th International Conference Principles Practice Constraint Programming,
pp. 247262.
Davies, T. O., Pearce, A. R., Stuckey, P. J., & Sndergaard, H. (2014). Fragment-based
planning using column generation. Proceedings 24th International Conference
Automated Planning Scheduling, pp. 8391.
Davis-Mendelow, S., Baier, J. A., & McIlraith, S. A. (2013). Assumption-based planning:
Generating plans explanations incomplete knowledge. Proceedings
27th AAAI Conference Artificial Intelligence, pp. 209216.
Do, M. B., & Kambhampati, S. (2003). Improving temporal flexibility position
constrained metric temporal plans. AIPS Workshop Planning Temporal
Domains.
Domshlak, C., Hoffmann, J., & Katz, M. (2015). Red-black planning: new systematic
approach partial delete relaxation. Artificial Intelligence, 221, 73114.
Fikes, R. E., Hart, P. E., & Nilsson, N. J. (1972). Learning executing generalized robot
plans. Artificial intelligence, 3 (1), 251288.
Gerevini, A., & Serina, I. (2000). Fast plan adaptation planning graphs: Local
systematic search techniques. Proceedings 5th International Conference
Artificial Intelligence Planning Systems, pp. 112121.
Ghallab, M., Nau, D., & Traverso, P. (2004). Automated Planning: Theory & Practice.
Morgan Kaufmann Publishers.
Graham, J. R., Decker, K. S., & Mersic, M. (2001). DECAF - Flexible Multi Agent
System Architecture. Autonomous Agents Multi-Agent Systems, 7 (1), 727.
Gurobi Optimization, Inc. (2015). Gurobi optimizer reference manual..
Hickmott, S., Rintanen, J., Thiebaux, S., & White, L. B. (2007). Planning via petri net
unfolding. 20th International Joint Conference Artificial Intelligence, pp. 1904
1911.
Hickmott, S., & Sardina, S. (2009). Optimality properties planning via Petri net unfolding: formal analysis. 19th International Conference Automated Planning
Scheduling, pp. 170177.
Hickmott, S. L. (2008). Directed unfolding: reachability analysis concurrent systems &
applications automated planning. Ph.D. thesis, University Adelaide.
Hoffmann, J., & Nebel, B. (2001). planning system: fast plan generation
heuristic search. Journal Artificial Intelligence Research, 14 (1), 253302.
Hoffmann, J. (2016). ICAPS competition page. http://ipc.icaps-conference.org/.
Accessed: 2016-09-06.
Kambhampati, S., & Kedar, S. (1994). unified framework explanation-based generalization partially ordered partially instantiated plans. Artificial Intelligence,
67 (1), 2970.
147

fiMuise, Beck, & McIlraith

Kautz, H. A., McAllester, D. A., & Selman, B. (1996). Encoding plans propositional
logic. 5th International Conference Principles Knowledge Representation
Reasoning, pp. 374384.
Kautz, H. A., & Selman, B. (1999). Unifying SAT-based graph-based planning. 16th
International Joint Conference Artificial Intelligence, pp. 318325.
Le Berre, D., & Parrain, A. (2010). Sat4j library, release 2.2 system description. Journal
Satisfiability, Boolean Modeling Computation, 7, 5964.
McAllester, D. A., & Rosenblitt, D. (1991). Systematic nonlinear planning. Proceedings
9th National Conference Artificial Intelligence, pp. 634639.
Muise, C. (2014). Exploiting Relevance Improve Robustness Flexibility Plan Generation Execution. Ph.D. thesis, University Toronto.
Muise, C., Mcilraith, S. A., & Beck, J. C. (2011). Optimization partial-order plans via
MaxSAT. ICAPS Workshop Constraint Satisfaction Techniques Planning
Scheduling Problems, COPLAS.
Muise, C., McIlraith, S. A., & Beck, J. C. (2012). Optimally relaxing partial-order plans
MaxSAT. 22nd International Conference Automated Planning Scheduling,
pp. 358362.
Murata, T. (1989). Petri nets: Properties, analysis applications. Proceedings
IEEE, 77 (4), 541580.
Nebel, B., & Backstrom, C. (1994). computational complexity temporal projection, planning, plan validation. Artificial Intelligence, 66 (1), 125160.
Nebel, B., & Koehler, J. (1995). Plan reuse versus plan generation: theoretical
empirical analysis. Artificial Intelligence, 76 (1-2), 427454.
Nguyen, X., & Kambhampati, S. (2001). Reviving partial order planning. Proceedings
17th International Joint Conference Artificial Intelligence, pp. 459466.
Rintanen, J. (2012). Planning satisfiability: Heuristics. Artificial Intelligence, 193, 4586.
Robinson, N., Gretton, C., Pham, D. N., & Sattar, A. (2010). Partial weighted MaxSAT
optimal planning. 11th Pacific Rim International Conference Artificial
Intelligence, pp. 231243.
Russell, S. J., & Norvig, P. (2009). Artificial intelligence: modern approach. Prentice hall.
Say, B., Cire, A. A., & Beck, J. C. (2016). Mathematical programming models optimizing
partial-order plan flexibility. 22nd European Conference Artificial Intelligence
(In Press).
Siddiqui, F. H., & Haslum, P. (2012). Block-structured plan deordering. Australasian
Conference Artificial Intelligence, pp. 803814.
Tate, A. (1976). Project planning using hierarchic non-linear planner. D.A.I. Research
Report No. 25. Department Artificial Intelligence, University Edinburgh.
Veloso, M. M., Pollack, M. E., & Cox, M. T. (1998). Rationale-based monitoring planning
dynamic environments. 4th International Conference Artificial Intelligence
Planning Systems, pp. 171180.
148

fiOptimal Partial-Order Plan Relaxation via MaxSAT

Weld, D. S. (1994). introduction least commitment planning. AI Magazine, 15 (4),
2761.
Younes, H. L. S., & Simmons, R. G. (2003). VHPOP: versatile heuristic partial order
planner. Journal Artificial Intelligence Research, 20, 405430.

149


