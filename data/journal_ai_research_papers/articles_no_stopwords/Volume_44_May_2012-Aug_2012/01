journal artificial intelligence

submitted published

solving limited memory influence diagrams
denis deratani maua
cassio polpo de campos
marco zaffalon

denis idsia ch
cassio idsia ch
zaffalon idsia ch

istituto dalle molle di studi sullintelligenza artificiale idsia
galleria manno switzerland

abstract
present exactly solving decision making represented
influence diagrams require usual assumptions forgetting regularity
allows us solve simultaneous decisions limited information
empirically shown outperform state art randomly
generated variables solutions
np hard even underlying graph structure low treewidth
variables take bounded number states admit provably good
approximation variables take arbitrary number states

introduction
influence diagrams howard matheson graphical aimed representation decision making uncertainty traditionally designed
handle situations involving single non forgetful decision maker limited memory influence diagrams hereafter limids generalizations influence diagrams allow
decision making limited information case simultaneous decisions bounded
memory controllers non communicating cooperative agents zhang qi poole
lauritzen nilsson poupart boutilier detwarasiti shachter
precisely limids relax regularity forgetting assumptions influence diagrams
namely complete temporal ordering decision variables
disclosed information e decisions observations made remembered considered
future decisions assumptions might hard meet applications might lead exponential growth size policies consequently
intractability
solving limited memory influence diagram refers finding optimal plan action
combination decision rules policies associate possible observation
action optimality understood maximizing expected utility task
empirically theoretically shown hard de campos ji fact
solving limid np hard even admit singly connected diagrams
bounded number states per variable devising produces
provably good approximate solutions within fixed factor unlike exist even
diagrams low treewidth
diagram singly connected underlying undirected graph contains cycles
ai access foundation rights reserved

fimaua de campos zaffalon

lauritzen nilsson shown limids satisfy certain graphstructural conditions forgetting regularity imply solved exactly
dynamic programming procedure complexity exponential treewidth hence
solving limids computationally similar performing probabilistic inference
bayesian networks koller friedman fact single policy updating spu
lauritzen nilsson performs local search space policies
step performs probabilistic inference evaluate candidate solution
however many fail meet conditions necessary spu achieving optimality cases spu might converge local optimum much inferior
actual global optimum circumvent de campos ji formulated
credal reformulation cr maps limid mixed integer linear
programming showed cr able solve small exactly obtain good approximations medium sized relaxing
integrality constraints
limids solved exactly variable elimination
scheme simultaneously propagates sets partial solutions although
runs exponential time worst case expected
np hard many instances possible obtain optimal
solution efficiently pruning solutions pareto dominated others heart
efficiency property moment variable elimination
local pareto dominance implies global pareto dominance partial solution
pareto dominated another partial solution cannot part optimal solution
hence safely discarded experimentally pruning paretodominated local solutions enormously save computational resources enable us
compute exact solutions much bigger previous fact
orders magnitude faster cr randomly generated
diagrams containing variables strategies
organized follows section describes limid formalism presents
complexity solving limid variable elimination
computing exact solutions presented section evaluated section last
sections contain related work final discussion improve readability
proofs supporting given appendix

limited memory influence diagrams
section describe limid formalism state complexity solving limid
instance limid transformed equivalent terms
maximum expected utility diagram whose utilities nonnegative decision variables
parents limids input next section start
example decision limited information use throughout
rest illustrate motivate concepts although example
essentially team coordination rather simple easily extended
account realistic scenarios


fisolving limids

fire dispatching
particular fire station contains group firefighters divided three units fire
dispatcher decides units dispatch reported accident dispatched
unit costs utile units dispatched cost utiles case fire higher
number dispatched teams higher chances minimum damage implies
saving lives preventing third party financial losses make things simple consider
accident handled appropriately case say success
inappropriately case say failure ideally dispatcher wants
maximize chance success minimizing number dispatched teams
hence cost operation successful operation rewarded utiles
failure gets zero utiles
variables domains
formalism limited memory influence diagrams quantities events
interest represented three distinct types variables nodes chance variables
represent events decision maker control outcomes tests
consequences actions decision variables represent options available decision
maker finally value variables represent additive parcels utility associated state
world set variables considered relevant denoted u
variable x u associated domain x finite non empty set
values x assume elements x called states assume existence
empty domain contains single element
domain decision chance variables assumed domains different
empty domain whereas value variables associated empty domain
fire dispatching represent act dispatching
unit decision variable ti hence three decision variables
domains w stands act means unit
dispatched w stands wait means unit dispatched outcome
incident assignment units represented binary chance variable
domain f representing success failure respectively evaluated
value variable v associated individual costs per unit
dispatched modeled three value variables v v v set relevant
variables u v v v v
domain x set variables x x xn u given cartesian
product x xn variable domains thus element u u defines
state world realization actions events interest x
sets variables x u x element domain x write
xy denote projection x onto smaller domain xy contains
components x compatible variables convention
x cylindrical extension x set x x x xy
often write x xn denote set x xn clear context
x denote singleton x instance x x
make distinction node graphical representation decision
corresponding variable



fimaua de campos zaffalon

w f w f x w x xy w xo
cylindrical extension x given sx w
operations real valued functions
operations real valued functions need defined let f g functions
domains x respectively product f g defined function
domain xy f g w f wx g wy w domain sum functions
defined analogously f g w f wx g wy notice product sum
functions associative commutative product distributes sum
f g gf f g gp f f g h f g f h f function x u
sum marginalp f returns
w
p function x element
p
domain f w xwx f x notice x f f
sum marginal operation
inherits
commutativity
p
p p
p pand associativity addition real
numbers hence xy f x f x x f
fxy yy set containing functions fxy domain x one element

write fxy denote function w xy satisfies fxy w fxw wx
instance x two binary valued variables domains x x x



fx fx two functions x fx x




fx x fx x fx x function fx





fx
x fx x




fx
x fx x


fx
x fx x




fx
x fx x

clear context write denote function returns one
values domain denote function returns zero x x
indicator function ix returns one x x zero otherwise
f g functions domain x k real number expressions f g
f k denote f x g x f x k respectively x x e g

previous example fx finally function domain containing
single element e g empty domain identified real number returns
definition
limid l consists direct acyclic graph dag set variables u annotated
variable types decision chance value together collection conditional
probability mass functions one per chance variable utility functions one per value
variable value nodes graph assumed children precise
meaning arcs varies according type node point arcs entering
chance value nodes denote stochastic functional dependency respectively arcs
entering decision nodes describe information awareness time decision made
variable x u denote pax set parents x set
nodes arc pointing x similarly let chx denote set
children x e nodes arc x fax pax x denote
family let c v partition u sets chance decision value
variables respectively chance variable c c associated set p
c pac


fisolving limids

v

v

v







uv uv uv
uv w uv w uv w



pto
uv
uv f

v
figure limid representing fire dispatching
conditional probability mass functions p
c quantifying decision makers beliefs
states x c conditional state parents c parents single
probability mass function assigned notation introduced previous section
equivalently represent set probability mass functions associated variable c
pa
function pc c assume chance variable x c stochastically independent
non descendant non parents given parents value variable v v associated
real valued utility function uv pav quantifies additive contribution
states parents overall utility thus thepoverall utility state x cd
given sum utility functions u x v v uv xpav
limid fire dispatching
figure depicts limid fire dispatching graph chance decision
value variables represented ovals rectangles diamonds respectively
value variables v v v associated utility functions uv uv uv respectively
representing cost per unit dispatched utility outcome quantified
function uv associated value variable v chance variable associated
function pto quantifies conditional probabilities p tt
tt tt success failure f given joint decision
according model figure dispatching three units certain success
whereas dispatching less three units leads failure
policies strategies
decision variable least one parent policy specifies action
possible state configuration parents pad
parents state set policies variable denoted
instance policy first unit running example state
space policies given w
let dd denote space possible combination policies element
dd said strategy l given policy state pad let

p
denote probability mass function conditional pad pd id
parents pd id unconditional probability mass function


fimaua de campos zaffalon

pa

simplify notation sometimes write pd irrespective whether parent
pa
one one correspondence functions pd policies
pad
specifying policy equivalent specifying pd vice versa denote
pa
set functions pd obtained way pd instance pt ia iw
strategy induces joint probability mass function variables c
pa pa
ps
pc c
pd

cc

dd

associated expected utility
es l

x

ps

cd

x

uv



v v

notice two sums eq different semantics outer leftmost sum
denotes sum marginal
set variables c whereas inner rightmost denotes
overall utility function v v pav sum functions uv
fire dispatching eight possible strategies consisting decision
act wait units example w possible
strategy policy dispatches unit induces probability mass function
pt ia likewise policy w induces function pt iw policy
induces pt ia strategy w induces joint probability
mass function x

ps x po
x pt xt pt xt pt xt

expected utility
x
es l
ps uv uv uv uv




x

h

ps x uv xt uv xt uv xt uv xo

xo

optimal strategy dispatches units hand
expected utility es l
theoretical complexity
treewidth graph measures resemblance tree given number
vertices largest clique corresponding triangulated moral graph minus one
bodlaender bayesian networks complexity solving limid strongly
affected treewidth given limid l treewidth evaluate expected
utility given strategy time space exponential koller friedman
hence bounded constant computing es l takes polynomial
time input size
primary task limid strategy maximal expected utility

es l es l






fisolving limids

value es l called maximum expected utility l denoted meu l
real enumerating strategies prohibitively costly fact
computing meu bounded treewidth diagrams np hard de campos ji
following implies remains np hard even simpler limids
theorem given singly connected limid treewidth equal two variables three states deciding whether strategy expected utility
greater given k np complete
proof reduction partition garey johnson
given appendix
usual assumptions complexity theory np hard solve
best available options trying devise runs efficiently
many instances exponential worst case complexity ii trying develop
approximation instances provides polynomial time solution
provably within certain range optimal solution section take option
present efficiently computes optimal solutions many limids
runs exponential time many others following state suggests
alternative ii likely unfeasible even consider diagrams bounded
treewidth
given approximation solving limid obtains strategy

meu l
es l


set approximation finds solution
whose induced relative error
meu l es l

meu l



following indicates provably good approximation exist
unless p np
theorem given singly connected limid l bounded treewidth unless p np
polynomial time approximation
number numerical parameters e probabilities utilities required specify l
defer proof appendix asserts finds
solutions limids polynomial time cannot guarantee relative error smaller
even set inputs restricted limids bounded treewidth hence
polynomial time limids must eventually produce poor solutions
relative error close one large exception treewidth
number states per variable bounded cases shown constructively
early work maua de campos zaffalon approximation
runs polynomial time


fimaua de campos zaffalon

constraining limids nonnegative utilities
principle utilities associated value variables limid take real
value complicates ordering functions use
devise fortunately easily efficiently transform limid l
equivalent limid l utilities nonnegative whose optimal strategies
optimal strategies l moreover obtaining es l es l strategy
straightforward
let l limid let k denote smallest utility value associated
value variables v v follows k uv v
uv x k x pav following transformation generates limid l
whose value variables associated nonnegative values
transformation value variable v v substitute associated utility function
uv utility function u v uv k
transformation shifts utility functions uv makes uv x
least one v x pav since affects value variables strategy l
limid transformation valid strategy l transformed limid
expected utilities strategy l l related according following

proposition strategy es l es l k v
proof expected utility respect l given
es l

x



x
x

v



x

x

ps x

x

x

u v xpav

v

x
ps x
uv xpav k
ps x

x

uv xpav k v

x

ps x

x

v

es l k v
last step follows

p

x ps x



optimal strategy l satisfies es l es l hence proposition
ensures es l es l k v es l k v es l implies
optimal strategy l similarly optimal strategy l
proposition es l es l k v es l k v es l therefore
optimal l following corollary summarizes
corollary strategy l optimal strategy optimal
strategy l


fisolving limids

consider running example smallest utility value k
utilities associated value variables transformed limid l given
u v

u v f

u v

u v w

u v

u v w

u v

u v w

strategy w expected utility es l es l k v
optimal strategy obtains es l
rest consider limids nonnegative utilities due
proposition incur loss generality
decision nodes many parents versus parentless decision nodes
policy decision variable parents corresponds choice one states
hence space policies nodes contains number policies polynomial
input hand cardinality space policies decision nodes
many parents exponential number states parents see consider
ten state decision variable parents space policies contains

policies however four ternary parent nodes space contains
policies
one might wonder whether limids whose decision nodes many parents
difficult solve limids parentless decision nodes
least theoretical perspective case limid
efficiently mapped meu equivalent limid decision nodes parents
optimal strategy original diagram produced
optimal strategy transformed diagram particularly relevant
search space policies case devise allow
us without loss generality focus limids whose decision nodes parents
formally describing transformation showing produces diagram
equal meu let us first give idea works end consider
limid l decision node least one parent e g diagram figure
let denote configurations pad policy maps configuration
pa
decision function pd associated policy seen

set probability mass functions pt ptm pti p
id
function pti represents choice state fixed configuration parents
recall policy associated parentless variable simply choice state
transformation replaces decision variable decision variables tm
chance variables x xm policy ti corresponds decision
original variables policy see diagram figure b chain x xm chance
variables responsible making policy ti active parents assume
configuration occurs blocking allowing information
flow according value parents thus parents act selector


fimaua de campos zaffalon

pad

pad


x

x

chd









xm

chd

tm
b

figure piece diagram b transformation

decides probability mass functions pti associated decision nodes tm
going used transformed diagram acts original one probability
x
ti pad
mass functions pxi
set ensure xi ti pad xi xi

otherwise
transformation consider limid l decision node least one parent
let denote configurations pad remove add pad
chance nodes x xm decision nodes tm domains xi ti
add arc every parent x xm arc
every xi xi arc every ti xi add arc
xm child associate x function


xpad xx xt

pa
px x
xpad xx xt


xpad
node xi associate function


xpad



xpad
x
ti pad

pxi
x


pa


x




xpad







xxi
xxi
xxi
xxi

xxi
xxi
xti
xti

pa

finally functions px x child x substituted xm domain
without altering numerical values
figure depicts decision node many parents left sub diagram
generated transformation right difficult see treewidth
transformed diagram increased three subgraph containing
nodes parents children triangulated contains cliques
pad xi xi di variables transformation two different
decision variables affect different parts hence transforming diagram diagram
parentless decisions increase treewidth three following
states optimality strategies preserved transformation
since treewidth given size largest clique triangulated moral graph minus one pad
lower bound treewidth original graph



fisolving limids

proposition let l applying transformation decision variable
limid l denote strategy l tm denote corresponding
policies tm let policy ti
pad finally let strategy l obtained substituting tm
keeping remaining policies optimal strategy l
optimal strategy l
proof appendix decision variable original limid
transformed model contains chance variables specifying values decision
nodes states treewidth original diagram bounded
bounded transformation takes polynomial time example ten state
decision variable four ternary parents transformation replaces decision variable
decision variables whose space policies contain elements besides
chance variables combined space policies contains
elements total search space still doubly exponential input
however take advantage smaller local policy spaces reach better
solutions particularly true devise later
rest assume without loss generality decision nodes
parents utilities nonnegative

solving limids
section describe solving limids exactly propagating
multiple non dominated solutions start defining basic algebraic structure
given framework valuation algebra
framework alone similar one used spu might lead poor accuracy thus
extend framework sets valuations attempt improve accuracy increasing
complexity efficiency obtained pruning sets cardinality kept small
possible without affecting accuracy
valuation algebra
basic ingredients algorithmic framework representing handling information limids called valuations encode information probabilities utilities
policies elements domain valuation associated subset
variables u called scope concretely valuation scope x pair p u
nonnegative real valued functions p u domain x refer p u
probability utility part respectively often write x make explicit
scope x valuation x u denoted set possible
valuations
scope x x set possible valuations thus given xu x set
closed two basic operations combination marginalization combination
represents aggregation information defined follows
definition p u q v valuations scopes x respectively
combination valuation pq pv qu scope x
treewidth bounded output optimal strategy might
take space exponential input



fimaua de campos zaffalon

marginalization hand acts coarsening information
definition p u valuationp
scope
p x set variables
x marginal valuation x p x u scope case say
z x eliminated denote z
notice definitions combination marginalization slightly differ previous works influence diagrams e g lauritzen nilsson usually require
division utility part probability part removal division operation
turns important feature discuss maximality valuations later
otherwise definition equivalent valuations division sense one
could easily reformulate message passing spu definition
terms computational complexity combining two valuations scopes
x respectively requires xy multiplications xy additions numbers
computing x costs xy operations addition words cost
combining marginalizing valuation exponential cardinality scope
linear cardinality domain hence wish work valuations whose
scope small possible following shows framework respects
necessary conditions computing efficiently valuations sense keeping
scope valuations obtained combinations marginalizations valuations
minimal
proposition system u satisfies following three axioms weak
labeled valuation algebra shenoy shafer kohlas
combination commutative associative



marginalization transitive z z x z

x

z
z

marginalization distributes combination x x
x z x
x z x yyz
proof follows directly commutativity associativity distributivity product
sum real valued functions follows directly commutativity summarginal operation consider two valuations p u q v scopes
x respectively set z x z x definition



x
x
p u q v z
pq
pv qu
xy z



xy z

fisolving limids

since x z z p u functions x follows



x
x
x
x
x

q
v u
q p
pv qu p
pq
xy z

z

xy z

z

z



x x
v
p u
q
z

z

equals p q v yz
following kohlas section direct consequence
shall use prove correctness
lemma x x z z x x z x z

primary goal valuation algebra computation marginal valuations
form let x xn set variables appearing
scopes marginal computed efficiently variable elimination
procedure receives set permutation variables

k
x xn n replaces valuations whose scope contains



k xi
variable xi marginal
describes
procedure returns valuation j k j k n
equals axioms kohlas section
variableelimination x
input permutation variables x x xn set valuations
subsets x
output marginal valuation
let
n

k

let denote valuations whose scope contains xi



k xi

compute


k

let
end
return combination valuations n



complexity variable elimination procedure given size largest
valuation generated loop valuation might size exponential
size valuations given input discuss later certain
conditions size bounded procedure takes time polynomial
input
variable elimination known literature fusion shenoy shafer
bucket elimination dechter



fimaua de campos zaffalon

computing expected utilities
use valuation algebra framework introduced compute expected utility
given strategy variable elimination let dd strategy limid
l whose expected utility want compute permutation variables
c assume decision nodes l parents otherwise need first
apply transformation strategy simply configuration
procedure computes expected utility induced strategy
pa
procedure calls variable elimination set contains valuation c pc c
chance variable valuation v uv value variable valuation
id decision variable following
expectedutility l
input limid l whose decision nodes parents permutation variables
c strategy dd
output expected utility
let
c c
pa

add c pc c
end
v v

add v uv
end


add id
end
let variableelimination c
return utility part

proposition procedure described returns expected utility
strategy
proof let output variable elimination according axioms





pa




pc c
id
uv
cc

dd

v v

let p u denote probability
definition
p utility part respectively
q
pa
combination ps ps v v uv ps pxcd px x since
ps isp
probability
p distribution c follows p xcd ps x finally
u cd ps v v uv equals es l
consider limid fire dispatching figure strategy
w whose expected utility want compute procedure assume


fisolving limids

utilities nonnegative e already applied transformation according procedure first generate set pto v
u v v u v v u v v u v ia iw
ia x x x x let permutation variables
xi xi variable elimination
input produces valuations
v

v

v

v

loop outputs valuation similarly compute
expected utility optimal strategy run variable elimination
pto v u v v u v v u v v u v
ia ia ia outputs
general described procedure take time exponential input however
l bounded treewidth shown exists permutation
procedure takes time polynomial input e g koller friedman
section hence space strategies sufficiently small optimal
strategy simply ranking strategies according expected utilities however
expect feasible realistic diagram space strategies increases
exponentially number decision nodes assuming parents even
diagrams bounded treewidth bounded number states per variable
local search
first attempt design fast solve limids one might suggest local
search scheme starts random solution repeatedly explores neighborhood
order solution higher expected utility treewidth diagram
bounded expected utility neighbor solution efficiently computed
complexity given size neighborhood possible
define neighborhood solution strategies obtained changing
single policy gives local search space polynomial input
describes greedy procedure step looks policy improves
current best solution guaranteed strategy locally
optimal neighborhood cannot improved changing one
policies lauritzen nilsson stated sufficient conditions diagram
satisfy order guarantee solution produced local search procedure
globally optimal unfortunately following example shows conditions
violated even structurally simple chain diagrams cases local search
procedure might output local optima poor accuracy
consider limid running example suppose start strategy
w expected utility first step might try improve policy
producing strategy w w whose expected utility since higher
expected utility initial solution set sbest update highest
expected utility found next try search better policy generate
strategy w strategy expected utility less


fimaua de campos zaffalon

greedypolicysearch l
input limid l permutation variables c initial strategy
dd
output locally optimum strategy sbest
let sbest esbest l expectedutility l
repeat

generate candidate strategy replacing single policy sbest

compute es l expectedutility l

es l esbest l

set sbest esbest l es l

end
current solution cannot improved way
return sbest

x





x

x

dn



xn

r

figure chain structure diagram n decision variables
expected utility best solution found far finally look better policy
leads us strategy w w w whose expected utility since better
current best solution set sbest update associated expected utility
since change single policy improve strategy halts
solution whose expected utility maximum expected utility achieved
strategy relative error terms original diagram
means proposition expected utility zero maximum expected utility

procedure described similar spu
illustrates pitfalls local search fact spu output local optimum
would start uniform policy every decision variable note solution
obtained greedy local search example degrades ratio utility
success achieved strategy utility failure increases instance
utility success increased u v utility failure remained
u v f would reach solution whose expected utility
error relative maximum expected utility moreover cases
spu performs poorly rare instance plots figure spus relative
performance chain diagrams one figure diagram generated
independently sampling conditional distribution associated chance node
symmetric dirichlet distribution parameter number variable
states maximum expected utility diagram computed
devise took less seconds diagram experiment
blue point plots figure depict relative error spu given
diagram red line indicates third quartile fixed configuration di

fisolving limids












relative error












number decision nodes






number states per variable

figure relative performance spu randomly generated chain diagrams blue
circle depicts experiment red line depicts third quartile
agrams left hand side plot obtained number states fixed
diagrams right number decision variables fixed ten
example see third quartile line right hand side plot
chain diagrams states ten decision variables spu returned strategy
meu l es l meu l cases spu obtains
relative error hand see majority cases solution
returned spu achieved relative error less experiments
local search effective many cases may produce poor
ordered valuations
exploit redundancy computation expected utility neighboring
strategies decide whether candidate solution improves current solution without
run variable elimination completely instance evaluating quality
candidate strategy differs current best strategy policy
associated insight inspecting two valuations produced
variable elimination example section two different strategies fortunately
answer yes need concept ordered valuations
let us define partial order e reflexive antisymmetric transitive relation
set possible valuations follows
definition two valuations p u q v say
dominates conversely say dominated write
equal scope p q u v
scope x deciding whether dominates costs x operations
comparison numbers following shows algebra valuations
monotonic respect dominance
proposition system u satisfies following two additional axioms
ordered valuation algebra haenni


fimaua de campos zaffalon

combination monotonic respect dominance
x x x x
marginalization monotonic respect dominance

x x
x x

proof consider two valuations px ux qx vx scope x px ux
qx vx two valuations py uy qy vy scope satisfying py uy qy vy
definition px qx ux vx py qy uy vy since
functions nonnegative follows px py qx qy px uy qx vy py ux qy vx
hence px ux py uy px py px uy py ux qx qy qx vy qy vx qx vx qy vy
let subset x follows monotonicity respect addition
real numbers



x
x
x
x
px ux
px
ux
qx
vx qx vx
x

x

x

x

hence follows
axioms assert combination marginalization preserve partial
ordering valuations allow us detect suboptimal strategies early
variable elimination procedure consider comparing strategies w w w
w w limid running example third iteration loop e
variable elimination procedure produces valuations ps us



ps us strategies respectively
ps

ps w

us

us w



ps w





us w

ps



us






thus since st v st v know

axioms hence es l es l therefore
need continue execution variable elimination expected value cannot
higher
unfortunately suboptimal solutions produce valuations dominated optimal one variable elimination example consider strategies
w third step variable elimination generates valuations



ps us ps us
ps

ps w

us

us w




ps w



us w

ps



us


fisolving limids



thus even though optimal strategy
devise later exploits fact suboptimal solutions
early detected eliminated search space suboptimal solutions
might eliminated variable elimination runs exponential time
worst case expected np hard fortunately
experiments random suggest situations frequent
sets valuations
multiple runs variable elimination different inputs elimination ordering e permutation variables represented sets framework
devise later instance might consider set valuations
produced variable elimination third iteration loop every possible
strategy due monotonicity combination marginalization respect
immediately halt computation valuations dominated
remove dominated valuations formalized
concept maximal valuations operator max
definition given finite set valuations say maximal
holds operator max returns set max
maximal valuations
x set valuations scope x set maximal valuations max x
obtained comparisons x x
valuations set x scope x say x scope
x extend combination marginalization sets valuations follows
definition x two sets valuations
x x x x
denotes set obtained combinations valuation x valuation
definition x x set valuations scope x x


x x x x

denote set valuations obtained element wise marginalization valuations
checked sets valuations combination marginalization defined
element wise satisfy axioms therefore form valuation algebra hence
lemma applies sets valuations marginalization combination defined

lemma x x two sets valuations scope x
respectively z set variables z z x x z
x yz
proof follows element wise application lemma x z
x z


fimaua de campos zaffalon

solving limids exactly
ready describe multiplepolicyupdating mpu
solves arbitrary limids exactly assumes decision nodes
variables utilities nonnegative hence transformations
applied running case assumptions fail
consider limid l permutation variables c let n c
pa
initialized generating set contains singleton pc c
chance variable c singleton uv value variable v set
valuations pd contains one element pd per policy decision
variable set valued variable elimination performed sets valuations
dominated valuations discarded set marginalization finally
optimal solution obtained utility part single maximal valuation
set combination sets valuations sn obtained variable elimination
procedure detailed
multiplepolicyupdating l
input limid l permutation variables c
output maximum expected utility
let
c c
pa

add singleton pc c
end
v v

add singleton uv
end


add set id
end
n

k

let denote
whose
h sets si
scope contains xi


k xi

compute max


k

let si si
end
let denote set combination sets sn
return utility part u p u max



since variables eliminated end loop valuations sets
empty scope probability utility parts identified
numbers hence outputs expected utility e real number line
let us illustrate example consider limid l
fire dispatching applying transformation assume elimination
ordering variables used example section start empty set


fisolving limids

chance variable add set
pto
add sets
v u v

v u v

v u v

v u v

due value variables v v v v respectively decision variable
causes set
ia iw
scope included similarly variables add
sets
ia iw

ia iw

scopes respectively obtaining v v v v
first iteration variable elimination loop lines


max v p u
p u functions p u
u x x note singleton since singletons
involved computation second iteration


w
max v pa ua pw
u
w

w

pa ua pw
u functions p p u

w
u x x u note labeled functions
according policies generated allows us easily extract
optimal strategy end
third iteration need compute


max v


max p


p




w



u



w

p

w w

w

u

w w

u

p

u

w

w w

w w

w w

p

w w

u






p u p
u
p
u
functions p

w
w w


w
w w
p
p
u u w u
u
note
valuation associated policies w appear
w w
generate valuation equal p
u
implies strategies w w
w w expected utility strategies w w


fimaua de campos zaffalon

last iteration generate set


max v




max p

u





p

u





w w

p

w w

u

w

p

w

u

w w w

p

w w w

u




w w

w w

w

w

w w w

w w w

p
u
p
u
p
u
p
u
functions

w w
w
w w w

empty set p
p
p
p
u

w w
w
w w w
u
u
u


finally returns u

expected utility optimal strategy one see optimal strategy
easily recovered labeling valuations corresponding policies
differently message passing obtain approximate solutions
limids repeatedly propagating single valuation e g spu
mpu computes exact solutions propagating several maximal valuations
correspond partial combinations local decision rules efficiency
handling propagation many valuations derives early removal valuations
performed max operation propagation step
consider set l given







pa

pc c






cc




dd

id






uv

v v

functions id consistent policies difficult see





l


pa
pc c

cc






id






uv

v v

dd










x



x

hence proposition l valuation probability part
one utility part equal expected utility strategy since relation
induces strict linear order l meu diagram equals utility part
single valuation max l
n variable elimination procedure propagation
step responsible
nfor obtaining max sn max l efficiently distributing
max x x allows significant reduction cardinalities
sets scopes valuations produced
formally prove correctness start showing max
distributes marginalization combination
lemma distributivity maximality x x two finite sets
ordered valuations z x following holds


fisolving limids

max x max max x
ii max max x z max z
x
proof part shown fargier rollon wilson lemma iv
use similar proof part ii holds first max z
x
z
z
max max x assume contradiction element x max z
x
x x element max max x z definition max x
z
z
z
x max x x x hence implies z
x x x x
z
z
z
z
follows z
max max x z
x x therefore x max x since x
z max max x z z
x z contradicts initial assumpz
tion since z x
let us max xz max max x z assume contradiction
z
z
z max max x z max z
x since z x z max x
z
z z shown max x max max x z hence z z
z max z
x contradiction
iteration propagation step combination sets current pool
sets si produces set maximal valuations initial factorization marginalized
xi xn
lemma n follows

x xi






max


max


si

si collection sets valuations generated th iteration
propagation step mpu
proof induction basis follows trivially
assume holds



x xi




max


max
si



eliminating xi sides applying max operation get

x xi xi

xi







max max



max max







si



fimaua de campos zaffalon

applying lemma ii sides left hand side yields


x xi
xi




max


max



si



max

xi











bi

si bi



max



xi


max






bi

si bi


max








si bi


max






si

passage first second identity follows element wise application
lemma third follows second lemma last two
follow definitions si respectively
able correctness solving limids exactly
theorem given limid l mpu outputs meu l

n
proof returns utility part valuation p u max


n
n

lemma n equals max

definition valuation


n

satisfies





cc


pa
pc c







dd

id






uv

v v

combination decisions
n corresponds strategy
exactly one valuation
strategy hence propo
n
sition set
contains pair es l every strategy inducing

distinct expected utility moreover since functions empty scope correspond

n
numbers relation specifies total ordering valuations


strategy associated p u since
implies single maximal
element
let

n

p u max

follows maximality es l es l

hence u meu l


fisolving limids

complexity analysis
variable elimination complexity depends permutation given input time complexity given cost creating
sets valuations initialization step plus overall cost combination
marginalization operations performed propagation step regarding initialization step loops chance value variables generate singletons thus take time
linear input since decision nodes parents set added due decision variable contains valuations let maxdd cardinality
largest domain decision variable initialization loop decision variables
takes time polynomial input let us analyze propagation
step running time propagating sets valuations exponential maximum
number variables scope valuations generated loop step
number depends permutation chosen best case equal treewidth
diagram plus one although finding optimal permutation e one leads
minimum maximum number variables per scope np hard task generate
permutations standard heuristics variable elimination bayesian networks
minimizing number fill ins cardinality domain neighbor
set empirically shown produce good elimination orderings jensen
nielsen koller friedman
consider permutation induces maximum number variables per scope
diagram bounded number states per variable cost
combination marginalization bounded constant complexity depends
number operations performed moreover case
let denote cardinality largest set n thus computing
requires u operations combination
maximum number
n
sets might need combine compute bi propagation step
operations marginalization worst case equal
sets associated decision variables combined without discarding valuation
hence worst case complexity propagation step exponential number
decision variables even width elimination ordering number states per
variable bounded note however pessimistic scenario average
removal non maximal elements greatly reduces complexity experiments
section
reverse topological ordering
valuations used mpu specify twice many numbers cardinality domain
associated scope possible decrease number numerical parameters per
valuation needs handle factor two constraining elimination
variables follow reverse topological ordering according diagram
requiring variable processed descendants processed
following shows reverse topological ordering produces valuations whose
probability part equals one coordinates



fimaua de campos zaffalon



b

v



c

e

v

f

figure limid reverse topological ordering increases treewidth

proposition defines reverse topological ordering variables c
n valuations probability part p function
returns unity
proof induction regarding basis reverse
topological ordering x variable containing value nodes children hence
pax
b x uv v chx definition x equals px
pax

pax

x chance node px px px decision node follows
p
pax p
pax p
max x px x px v chx uv since pax p
x


p
pax

probability mass function x p
assume
x px
n
inductive hypothesis



holds










let


x
bi
n
max bi x inductive hypothesis valuations set bi
probability part p hence definition combination valuations x
contain probability part equal one reverse topological ordering implies
time variable xi processed propagation step children
pax
processed hence element bi set xi equals pxi xi
pax

pax

chance node pxi pxi pxi xi decision node uxi
value node thus max xi x case xi value node
immediate since valuation combination two valuations
probability part equal one xi value node


x


pax x pax
pax
max
pxi
pxi ux pxi faxi ux x
xi

xi



x


pax
pax
max
pxi ux pxi xi ux x
xi

since p
xi probability mass function pax


states assume reverse topological elimination ordering mpu
needs care utility part valuations unfortunately constraining
elimination order might increase complexity following example
shows
consider limid figure variables assumed binary omit
specification probabilities utilities relevant matter


fisolving limids

initialization b c e f v v reverse
topological elimination ordering implies first eliminate e generates
set


max e v v e u

whose single element u scope c f size eliminating variables
ordering f c b e hand generates following sets


max f v c f p u


max c e c p u

n


max b b p u

n


max v p u
n



max p u
n





u






max e



scopes valuations respectively e c e
e e one see largest valuation generated ordering
f c b e contains two variables scope therefore size
four fold decrease size compared size set generated reverse
topological ordering
notice however even though reverse topological ordering might increase
size valuations generated variable elimination necessarily
higher complexity mpu overall complexity
depends size largest valuation generated cardinality
generated sets possible reverse topological ordering induces significantly
smaller sets produces valuations whose probability parts equal one
might increase number dominated elements

experiments
evaluate performance random limids generated following
way limid parameterized number decision nodes number
chance nodes c c maximum cardinality domain family chance
variable c maxc fac maximum cardinality domain family
decision variable maxd fad set number value nodes v
variable xi c v sample xi contain states
repeatedly add arc decision node children value node
parents decision node least one value node children
step guarantees decisions relevant computation meu finally
repeatedly add arc neither makes domain variable greater given
bounds makes treewidth arcs added without exceeding


fimaua de campos zaffalon

bounds note generates diagrams decision chance variables
log log c parents respectively dag obtained
randomly sample probability mass functions utility functions associated chance
value variables respectively
compare mpu cr de campos ji limids
randomly generated described procedure parameters c
c mpu implemented c tested
computer cr table contrasts running times averages
standard deviation different configurations randomly generated limids row
contains percentage solved diagrams scr smpu time performance tcr
tmpu n diagrams randomly generated parameters
c v c fixed parameter configuration mpu outperforms cr
orders magnitude line contains case average running time
cr lower mpus note case cr solve one instance whereas
mpu solved instances cr unable solve diagrams
variables whereas mpu could solve diagrams containing variables
failed solve diagrams diagram
consider unsolved able reach exact solution
within limit hours mpu appears scale well number nodes
e c v poorly domain cardinality family decision variables
e
good succinct measure hardness solving limid total number
strategies represents size search space brute force
loosely interpreted total number alternatives decision variables
instance figure depicts running time number strategies
log log scale two test set random diagrams
solved instances shown covers approximately cases
mpu cr note mpu solved cases cr solved
opposite see mpu orders magnitude faster cr within limit
hours mpu able compute diagrams containing strategies whereas
cr solved diagrams strategies
reduction complexity obtained removal non maximal valuations
propagation step checked figure shows maximum cardinality
set generated propagation step contrast number strategies
diagram point figure solved mpu cardinality sets remains bounded
vary number strategies equals largest cardinality
propagated set worst case valuation discarded shows
worst case analysis section pessimistic
since current checking whether treewidth graph exceeds fixed k slow
k bodlaender resort greedy heuristic resulted diagrams whose actual
treewidth ranged
used cr implementation available http www idsia ch cassio id mip cplex
http www ilog com mixed integer programming solver implementation mpu
downloaded http www idsia ch cassio mpu



fisolving limids

n



c

v



c

scr

tcr

smpu

tmpu





















































































































































































































































































































































table performance mpu cr randomly generated limids numbers
rounded



fimaua de campos zaffalon



mpu
cr

running time













number strategies

maximum set cardinality maxi

figure running time mpu cr randomly generated limids












number strategies

figure maximum number valuations set propagation step mpu

related work
influence diagrams introduced howard matheson concise language
specification utility decision substantial literature
formalizes influence diagrams develop premises forgetting
regularity cooper qi poole shachter peot point
interested reader works jensen nielsen koller friedman
zhang et al studied families limids could solved dynamic programming limids respecting forgetting regularity spu
lauritzen nilsson solves cases polynomial time diagram


fisolving limids

bounded treewidth best knowledge attempt globally solve arbitrary limids exactly without recurring exhaustive search space strategies
cr de campos ji compare
shenoy shafer introduced framework valuation algebras states
basic algebraic requirements efficient computation valuations recently
haenni incorporated partially ordered preferences algebra enable approximate computation fargier et al extended framework preference
degree structure order capture common algebraic structure optimization partial order algebra develop section partly casted
framework
pfu framework pralet verfaillie schiex subsumes many formalisms
probabilistic reasoning constraint satisfaction decision making comes
decision framework geared towards sequential decision making
equivalent assumptions non forgetting although authors mention possibility
extending limited information decision scenarios
variable elimination develop conceptually close message
passing dubus gonzales perny however
handle uncertainty target primarily obtention pareto efficient solutions
specific class multi objective optimization
close relation maximum posteriori map inference bayesian
networks limids whose decision variables parents sense de campos solves map propagating pareto efficient probability
potentials join tree relates

conclusion
solving limited memory influence diagrams hard task complexity
presented np hard even diagrams bounded treewidth
number states per variable obtaining provably good approximations
polynomial time unlikely number states small
despite theoretical hardness developed
spite exponential worst case complexity performed empirically well large set
randomly generated efficiency early removal
suboptimal solutions helps drastically reduce search space
designing good heuristics elimination orderings seems
complex task standard variable elimination e g belief
updating bayesian networks second component cardinality
set together domain cardinalities wish minimize fact preliminary
experimentation shown favoring set cardinality expense domain cardinality
might good unlike standard variable elimination given elimination
ordering limid seem possible determine true complexity
mpu advance e prior running open question whether
mpus complexity estimated beforehand heuristics finding elimination
orderings perform better


fimaua de campos zaffalon

acknowledgments
work partially supported swiss national science foundation snsf
grants hasler foundation grant
canton ticino computational life sciences project thank
reviewers pointing us related work making number comments helped
us improve readability short version appeared nips
maua de campos

appendix missing proofs
section contains long proofs supporting left main part
text improve readability
following two lemmas used proof theorem later
lemma real number nonnegative integer


proof since

sufficient binomial theorem











x

k

k

k

k


k

k
k
k
hence













x
x
x
k k
k




k
k



therefore

k

k




lemma x x x x
proof obtain approximating functions left right hand side
inequalities truncated taylor expansions f x g x respectively

showing x x f x g x x n th order taylor expansion
left hand side around zero given
tn x

n
x
ln k
k

k

x k

clearly series converges hence x x limn tn x moreover
n residual rn x x x tn x positive terms sum


fisolving limids

non negative thus
f x x

ln
x x x


similar fashion apply variable change x right hand side
obtain taylor expansion around zero given
tn


n
x
ln k
k
n
x
k

k

yk

ln k k
x
k

converges positive residual hence


x lim tn x
n

x ln x ln


x
ln k
k

x ln x ln


x
k

x ln

ln




k



x k

k

x g x

inequality obtained noticing ln k k x ln
geometric series

x
k


k




x k

ln
x k











k

k

finally since x ln


ln

g x x ln x




ln

x ln
ln



ln

x f x





hence x g x f x x x holds
following shows solving limids np hard even assume bounded
treewidth number states per variable


fimaua de campos zaffalon

x





x

x

dn



xn

r

figure limid used solve partition proof theorem

proof theorem given strategy deciding whether es l k done polynomial time koller friedman np hardness shown
reduction partition np complete garey johnson
stated follows pgiven set
p n positive integers set
n ii ai ia ai assume n
p
p
let ia ai even partition subset achieves ii ai
solve partition consider rescaled dividing every element

p
vp
ai elements look partition
ii vi
v


ia
consider following limid topology figure n binary decision
nodes labeled dn decision di take states chain
chance nodes n ternary variables x x xn states x z
arc xn single value node r notational purposes specify function
f domain x z triple f x f f z value node associated
utility function ur n chance node xi associated set
conditional probability mass functions given
x
ti ti
px


x

px


pdx

pdx ti ti

pdx z

pdx z
dx

ti specify variables later note pxii w every
w faxi wxi wxi wxi z finally define px
given strategy dn let di index set policies
di
es l

x

px

cd

n



dx
pxii pdi






x

x

px


xn

ur

n



xi

pxii



cd xn

let
ps px

n


xi

pxii





pdi

pdi ur

fisolving limids


x

pxn

n


px

xi

pxii



cd xn

x

pdi

ps

cd xn
xn

w cd wxn x e w xcd follows pxnn
wxn x wxn

wfaxn


xn
x pxn
wfaxn
n
dx
n pxii wfaxi

wxn x recursively
equals ti otherwise hence
q

ti wxi x n
ps w ii

otherwise


n


ti
ps w

cd

x

pxn x

ii

wx

likewise holds w cd
q
ps w




ia ti



wxi n
otherwise

therefore
pxn x

n

ti

ia

since pxn probability mass function xn pxn z pxn x pxn
x
pxn ur
es l
xn

pxn x pxn



ti
ti


ii

ia

let us assume initially ti vi reduction original
way polynomial use upper bound outcome
reduction obtain later difficult
see
p
p es l concave function
v vn achieves maximum ii vi ia vi since strategy
defines partition vice versa even partition meu l

reduction encodes numbers ti time space polynomial
b number bits used encode original part close analogy
last part proof hardness map bayesian networks de campos
theorem
setting ti represent vi b bits precision rounding necessary
choosing ti vi ti vi b


fimaua de campos zaffalon

vi ti vi b implies lemma vi
b
b vi ti vi
assume even partition exists
p

b
b
b
ti n ii vi n
ii



b n



p

ia

vi

b n



b





ia



b



b
b




meu l





b

let r equal
encoded b bits precision rounded
b
b


b

r

implies lemma b b

b
b
b
b
b

r



reduction done verifying whether meu l r already know
even partition associated strategy obtains expected utility greater
r equality fact r rounded let us consider
case even partition exist want case meu l
b
inequality implies meu l r since even
partition strategy induces
partition
p
p integer c different
zero ii ai ac ia ai c original numbers
ai positive integers add follows


ti
ti c c
ii

ia

right hand side equality function c symmetric
respect axis e f c f c monotonically increasing c
therefore obtains minimum c hence


ti
ti
ii

ia

since n implies numbers ai positive integers
lemma


number ai encoded least log ai bits therefore b log
log log latter greater equal log
hence greater log thus b implies b

b
therefore b hence
b





since number bits used encode partition must greater equal n
n b n b hence j b n jb j



fisolving limids

thus even partition exist


b



ti
meu l
ti
r


ii

ia

summarize built limid l polynomial time since ti specified
dx
b bits n functions pxii encoding numbers
ti n variables bounded number states shown
one one correspondence partitions original
strategies l given rational r f b encoded b bits existence
even partition equivalent meu l r
following lemma used proof theorem similar shown
park darwiche lemma
lemma x follows x ln x
proof let f x ln x x
f x

x





x x x

strictly negative x since x x x x hence f x monotonically
decreasing function x limx f x f x strictly positive
thus follows ln x x since x
approximately solving limids bounded treewidth given
minimum performance np hard
proof theorem fixed existence polynomial

time approximation solving limid would imply existence
polynomial time cnf sat known impossible
unless p np garey johnson similar reduction used park
darwiche theorem analogous inapproximability maximum
posteriori inference bayesian networks notice

hence existence approximation implies existence

approximation suffices desired latter cannot
true unless p np
clause disjunction literals literal boolean variable
negation say clause satisfied given assignment truth values
variables least one literals evaluates thus decide truth value
assignment satisfies clause time linear number variables cnf sat
defined follows given set clauses c cm subsets boolean
variables x xn assignment truth values variables satisfies
clauses
positive integer q specify later consider limid obtained follows
topology depicted figure boolean variable xi add q binary


fimaua de campos zaffalon

b
dn

sn

dn

bq
dnq

sn








b









snq




q





u

q
q



figure graph structure limid used proof theorem

decision variables di diq q chance variables si siq domain
additionally q clause selector variables q taking values
q binary variables b b q value node u b q parent illustrated
figure limid consists q replicas polytree shaped diagram variables
j dnj j snj b j probability mass functions variables b b q
chosen make expected utility equal product expected utilities
replica replicas e j q variable dij n
represents assignment truth value xi parents selector variables
j represent choice clause process j k denotes clause ck
processed summing j process clauses variable sij
j
n j q dij si
parents variables b j snj
j b j parents j assign uniform probabilities j ps j


j q set probabilities associated variables j snj ck
clause selected j sij set zero ck satisfied di
j
di sij si
otherwise formally x j dj j









j j


p ji x
si











j

j

xsi xsi
j

j

xsi xsi k xi xdi satisfies ck
j

j

xsi xsi k xi xdi satisfy ck
otherwise

notice j first case never occurs since j takes values
j
joint state configuration x j snj j dnj xs k e
j
clause ck processed xsn follows

n
j

dij si
ps j
p j
pdj x




si



equals n clause ck satisfied xi xdi
j
x xd xi xdi variables j si
assume value k e


fisolving limids

j

j

j

j

xs xsi k xsi xsn otherwise equals hence
partial strategy sj dj dnj x





j
pss j x
n

x



j j

ps j



n



n



j
dij si

p

sij



sat sj
pd j
x






j
j dn

sat sj denotes number clauses satisfied truth value assignment
j

sn b
x xn according sj variable b j associated function pb
j
x fabj

j
b j xb j xsn


x
j j
j
j
psbnj b x xb xsn


otherwise

j





b assume xb hence joint state configuration x
b b q sn snq

q

b xb q xsn

xsn
x
j j

q


psbnj b x xb xb xsn


j
otherwise




q


finally set utility functionu associated u return b q
j j
q

q

otherwise way u qj psbnj b
x equals xb xb xsn
q

xsn zero otherwise thus strategy sq sj
dj dnj follows


es l

x

u

cd



q


u

b b q
q
sn
n





j

ps j



j

x

x

j

psbnj b
q


j

psbnj b

u

b b q j
q
sn
n
q

j
pss j
n
j



j

j

q


n


p

j
dij si

sij

x



ps j

j
j sn
j
j
dn
j

sn b
pb
j

j

pd j



n



p

j
dij si

sij

pd j


j

pss j

n

q

sat sj
mq
j

instance cnf sat satisfiable optimum strategy
sat sj j meu l hand instance


fimaua de campos zaffalon

satisfiable j strategy sat sj hence
meu l q mq given let q positive integer chosen

mq q later q obtained polynomial

input cnf sat instance satisfiable approximation
meu l returns value es l
q


q
meu l



es l




rightmost strict inequality follows
hand cnf sat instance satisfiable approximation returns


q
es l meu l




hence use approximation solve cnf sat checking whether
output e l q mq since q positive integers test bound q mq
obtained polynomnial time
remains reduction polynomial input limid contains
q n variables requiring specification numbers
number numerical parameters l polynomially bounded
q n therefore suffices q polynomial n
definition q obeys


q



q n

equivalent



q ln




q n ln

n

ln

ln


n

ln

ln

q

q

since lemma ln ln suffices choose q


q n




words q polynomially bounded n therefore meu l

approximated polynomial time ratio greater solve
cnf sat polynomial time
next transformation preserves expected utility strategies
strategies easily mapped back forward original transformed
diagrams


fisolving limids

pad j

x

x







xj

xj

xj

tj

tj

tj



xm

chd

tm

figure reasoning proof transformation

pa

x

pa

proof proposition looking definition functions px pxii
see pad selects j conditional pad j
variable xj independent xj j variable xi
independent ti words


pr xj xj tj pad j pr xj tj pad j pxjj
j
x

pr xi xi ti pad j pr xi xi pad j pxii
visualize situation removing arc xj xj arcs
ti xi j diagram figure b arcs leaving pad removed
conditioning value pad diagram figure note
principle case j deserves special attention x depend
xi variable function associated x slightly differ others
nevertheless similar reasoning applied omit case j
sake simplicity
follows previous reasoning


pxjm pr xm pad j

x
x


x

px pt pxjj ptj
pxii pti
tm x xm



x

ptj

tj

x

j


pxjj




x

j

xj xm

x

pxi


x xj




x
tj

ptj

x
xj xm



pxjj




x

pxii

j



px

j


x

pxi




x




pti

tm tj j

z





fimaua de campos zaffalon

x

pad j function pxi
j equals indicator function ixi xi



design pxjj ixj tj thus

pxjm



x

x

ptj

tj




ixj tj

ixi xi

j

xj xm

term outer sum tj inner sum xj xm differs zero
tj xj xj xm case equals one hence
x

pxjm
ptj ixm tj
tj

ptj
pa

consider strategy tm l let pxmd function

equals pxjm every value j pad let policy original decision
variable l j tj j strategy l obtained
substituting policies tm finally let pt ptm distributions
pa
induced policies tm pd distribution induced
pad
since value j pad pxm j ptj since design xm
pa
pa
follows pxmd pd hence combination policies tm l
derive corresponding policy l converse true policy
pa
pa
generate tm pxmd pd simply choose ti j thus
one one correspondence policies tm policies
pa
pa
one one correspondence induced functions pxmd pd
remains combination policies tm corresponding policy
induce expected utility let c denote respectively set chance
decision variables l c set chance decision variables l
given strategy l let

pa
p
px x
cd
pa

note function independent choice policy ps p pd
given strategy l
x
x
es l
ps
uv
c



x

v v

p

pa
px

c




x
pa
pxii







pti



p

x

uv

v v

cd

x x
c c

x

x

cd xm

pa

pxmd p

x




x

pxii



z




pad

px

uv

v v




x

x

p
pad
xm pxm

uv

v v



ti pad




pti





fisolving limids



x

x

pa

pd p

x

ps

cd

x

uv

v v

cd



x

uv

v v

es l
strategy l obtained substituting tm corresponding policy

references
bodlaender h l linear time finding tree decompositions small
treewidth siam journal computing
cooper g f method belief networks influence diagrams fourth
workshop uncertainty artificial intelligence
de campos c p map bayesian networks
proceedings nd international joint conference artificial intelligence pp

de campos c p ji q strategy selection influence diagrams imprecise probabilities proceedings th conference uncertainty artificial
intelligence pp
dechter r bucket elimination unifying framework reasoning artificial
intelligence
detwarasiti shachter r influence diagrams team decision analysis
decision analysis
dubus j p gonzales c perny p multiobjective optimization gai
proceedings st international joint conference artificial intelligence pp
fargier h rollon e wilson n enabling local computation partially
ordered preferences constraints
garey r johnson computers intractability guide theory
np completeness w h freeman
haenni r ordered valuation algebras generic framework approximating
inference international journal approximate reasoning
howard r matheson j e influence diagrams readings principles
applications decision analysis pp strategic decisions group
jensen f v nielsen bayesian networks decision graphs nd
edition information science statistics springer
kohlas j information algebras generic structures inference springer verlag
york usa


fimaua de campos zaffalon

koller friedman n probabilistic graphical principles techniques mit press
lauritzen l nilsson representing solving decision
limited information management science
maua de campos c p solving decision limited information advances neural information processing systems pp
maua de campos c p zaffalon solving limited memory influence
diagrams arxiv v cs ai
park j darwiche complexity approximation strategies
map explanations journal artificial intelligence
poupart p boutilier c bounded finite state controllers advances neural
information processing systems nips
pralet c verfaillie g schiex algebraic graphical model decision
uncertainties feasibilities utilities journal artificial intelligence

qi r poole method influence diagram evaluation computational
intelligence
shachter r peot decision making probabilistic inference methods proceedings th conference uncertainty artificial intelligence
pp
shenoy p shafer g axioms probability belief function propagation
proceedings th conference uncertainty artificial intelligence pp

zhang n l qi r poole computational theory decision networks
international journal approximate reasoning




