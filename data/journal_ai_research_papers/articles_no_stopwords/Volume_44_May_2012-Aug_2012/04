journal artificial intelligence

submitted published

online speedup learning optimal
carmel domshlak
erez karpas

dcarmel ie technion ac il
karpase technion ac il

faculty industrial engineering management
technion israel institute technology
haifa israel

shaul markovitch

shaulm cs technion ac il

faculty computer science
technion israel institute technology
haifa israel

abstract
domain independent one foundational areas field artificial intelligence description task consists initial world state goal set actions
modifying world state objective sequence actions plan
transforms initial world state goal state optimal interested finding plan one cheapest plans prominent optimal
days heuristic state space search guided admissible heuristic functions numerous admissible
heuristics developed strengths weaknesses well known
single best heuristic optimal general thus heuristic
choose given task difficult question difficulty avoided combining
several heuristics requires computing numerous heuristic estimates state
tradeoff time spent time saved combined advantages
different heuristics might high present novel method reduces cost combining admissible heuristics optimal maintaining benefits idealized
search space model formulate decision rule choosing best heuristic compute
state present active online learning learning classifier decision
rule target concept employ learned classifier decide heuristic compute
state evaluate technique empirically substantially outperforms
standard method combining several heuristics via pointwise maximum

introduction
center intelligent autonomous behavior task selecting actions
take next ai best conceived model automated action
selection geffner represent current situation goals possible actions
specific languages used describe concisely main challenge
computational languages lead intractable worst
case however rigorous search guidance tools often allows efficient solving interesting
instances
classical concerned synthesis plans constituting goal achieving
sequences deterministic actions significant algorithmic progress achieved last
two decades turn progress classical translated advances involved
languages allowing uncertainty feedback yoon fern givan palacios
c

ai access foundation rights reserved

fid omshlak k arpas arkovitch

geffner keyder geffner brafman shani optimal
objective plan one cheapest plans
prominent domain independent optimal particular
state space heuristic search natural view task search
use heuristic search solve recent advances automatic construction heuristics
domain independent established many heuristics choose
strengths weaknesses however wealth heuristics leads question given
specific task heuristic choose
propose selective max online learning combines
strengths several heuristic functions leading speedup optimal heuristic search
high level selective max seen hyper heuristic burke kendall newall hart ross
schulenburg heuristic choosing among heuristics seemingly trivial observation state one heuristic best state
principle possible compute several heuristics state choose one according values provide however heuristic computation domain independent
typically expensive thus computing several heuristic estimates state takes long time
selective max works predicting state heuristic yield best heuristic
estimate computes heuristic
clear decide best heuristic state first
analyze idealized model search space describe choose best heuristic
state order minimize overall search time describe online active learning
procedure uses decision rule formulated idealized model procedure constitutes
essence selective max
experimental evaluation conducted three state art heuristics
domain independent shows selective max effective combining several
heuristics optimal search furthermore selective max
speedup baseline heuristic combination method selective max robust different parameter settings claims supported selective max runnerup ex aequo last international competition ipc garca olaya jimenez
linares lopez
expands conference version domshlak karpas markovitch
several ways first improve expand presentation selective max decision rule
second explain handle non uniform action costs principled way third empirical
evaluation greatly extended includes ipc well controlled
experiments three different heuristics exploration parameters selective
max affect performance

previous work
selective max speedup learning system general speedup learning concerned improving performance solving system experience computational difficulty
domain independent led many researchers use speedup learning techniques order
improve performance systems survey many see work
minton zimmerman kambhampati fern khardon tadepalli


fio nline peedup l earning ptimal p lanning

speedup learning systems divided along several dimensions zimmerman kambhampati fern arguably important dimension phase learning takes
place offline inter speedup learner analyzes solvers performance
different instances attempt formulate rule would improve
performance would generalize well future instances offline learning
applied extensively domain independent varying degrees success fern et al
however one major drawback offline learning need training examples
case tasks domains interest
learning take place online solving online intra
speedup learner invoked solver concrete instance solver
working attempts learn online objective improving solvers performance
specific instance solved general online learners assumed pretrained previously seen instances information rely
collected process solving concrete instance called online
learning shown extremely helpful propositional satisfiability sat general
constraint satisfaction csp solving nogood learning clause learning among
essential components state art solver schiex verfaillie marques silva
sakallah bayardo jr schrag thus indirectly sat csp domainindependent planners already benefit online learning techniques kautz selman
rintanen heljanko niemela however best knowledge work first
application online learning optimal heuristic search

background
domain independent task task short consists description
initial state goal set available operators several formalisms describing tasks
use including strips fikes nilsson adl pednault sas backstrom
klein backstrom nebel describe sas formalism one used
fast downward planner helmert top implemented evaluated
selective max nothing however precludes selective max context formalisms
sas task given tuple hv gi v v vn set state
variables associated finite domain dom vi complete assignment v called
state specified state called initial state goal g partial assignment v
finite set actions action given pair hpre eff partial assignments v
called preconditions effects respectively action associated cost c r
action applicable state iff pre applying changes value state
variable v eff v eff v specified resulting state denoted sjak denote
state obtained sequential application respectively applicable actions ak
starting state sjha ak ik action sequence plan jha ak ik g
optimal interested finding one
pthe cheapest plans cost plan
ha ak sum constituent action costs ki c ai
sas task hv gi easily seen state space search
whose states simply complete assignments variables v transitions uniquely determined actions initial goal states defined initial state goal
optimal solution state space search found search


fid omshlak k arpas arkovitch

admissible heuristic h heuristic evaluation function h assigns estimate distance
closest goal state state evaluates length cheapest path state
goal denoted h h called admissible never overestimates true goal distance
h h state works expanding states order increasing
f g h g cost cheapest path initial state known
far

selective max decision rule
many admissible heuristics proposed domain independent vary
cheap compute yet accurate accurate yet expensive compute general
accurate heuristic fewer states would expanded
accuracy heuristic functions varies different tasks even different states
task may able produce robust optimal planner combining several admissible heuristics presumably heuristic accurate provides higher estimates
different regions search space simplest best known way point wise maximum heuristics use state given n admissible heuristics
h hn heuristic maxh defined maxh max hi easy see
maxh hi state heuristic hi thus search maxh expected
expand fewer states individual heuristic phowever denote time needed
compute hi ti time needed compute maxh ni ti
mentioned previously selective max form hyper heuristic burke et al
chooses heuristic compute state view selective max decision rule dr
given set heuristics h hn state chooses heuristic compute
state one natural candidate decision rule heuristic yields highest
accurate estimate
drmax h hn hargmax hi
decision rule yields heuristic accurate maxh still computing
one heuristic per state time targmax hi
analysis however take account different computation times different heuristics instance let h h pair admissible heuristics h h
priori seems h preferred h former
cause expand fewer states however suppose given task expands
states guided h states guided h computing h state
takes ms computing h state takes ms switching h h increases
overall search time maxh h h makes things worse h h
thus computing maximum simply wastes time spent computing h possible
however computing h carefully chosen states computing h states
would expanding states reducing overall search time compared
running h
example shows even given knowledge heuristics estimates advance
clear heuristic computed state objective minimize overall
search time therefore begin formulating decision rule choosing one two
heuristics respect idealized state space model selective max operates online


fio nline peedup l earning ptimal p lanning




f c

f c
sg

figure illustration idealized search space model f contours two admissible
heuristics

active learning procedure attempting predict outcome decision rule choose
heuristic compute state
decision rule perfect knowledge
formulate decision rule choosing two given admissible heuristics h h
compute state idealized search space model order formulate decision
rule make following assumptions
search space tree single goal constant branching factor b uniform cost
actions idealized search space model used past analyze behavior
pearl
time ti required computing heuristic hi independent state evaluated
w l g assume
heuristics consistent heuristic h said consistent obeys triangle
inequality two states h h k k optimal cost
reaching
perfect knowledge structure search tree particular
cost optimal solution c ii perfect knowledge heuristic estimates
state iii perfect tie breaking mechanism
obviously none assumptions holds typical search later examine
individual influence framework
adopting standard notation let g cost cheapest path defining
maxh max h h use notation f g h f g
h maxf g maxh consistent heuristic h expands
states increasing order f g h pearl particular every state f
h c surely expanded every state f c surely


fid omshlak k arpas arkovitch

expanded states f c might might expanded depending
tie breaking rule used perfect tie breaking assumption states
f c expanded lie along optimal plan
let us consider states satisfying f c dotted line fig satisfying
f c solid line fig states f c f c contours
surely expanded h h respectively states contours
grid marked region fig states se maxf c
surely expanded maxh pearl thm p
objective minimizing search time note optimal decision state
se compute heuristic since states surely expanded anyway
assuming still must choose one heuristics would choose compute cheaper
heuristic h another easy case f c states computing h suffices
ensure surely expanded perfect tie breaking rule expanded
unless must h cheaper compute h h preferred regardless
heuristic estimate h state
let us consider optimal decision states f c
f c fact enough consider shallowest states figure
states part f c contour separates grid marked line marked
areas since f f g h h h
accurate state h interested solely reducing state expansions h
would obviously right heuristic compute however objective reducing
actual search time h may actually wrong choice might much expensive
compute h
let us consider effects two alternatives compute h
surely expanded f c thus whether expands depends tiebreaking assuming perfect tie breaking thus expanded unless
must computing h would cost us time
contrast compute h surely expanded f c note
computing h computing h one descendants clearly sub optimal
strategy pay cost computing h yet pruning limited search
sub tree rooted therefore choices really computing h computing h
states sub tree rooted lie f c contour suppose need
expand l complete levels state space reach f c contour thus need
generate order bl states invest bl time calculating h states lie
f c contour
considering two options optimal decision state thus compute h iff bl
express differently l logb tt special case heuristics take time
compute decision rule reduces l optimal choice simply accurate
heuristic state
putting cases together yields decision rule dropt ls
depth go f c


fio nline peedup l earning ptimal p lanning



h f c f c



h f c



dropt h h

h f c f c ls logb tt



h f c f c l log




b
decision rule without perfect knowledge
idealized model makes several assumptions appear problematic
meet practice examine assumptions closely needed suggest
pragmatic compromises
first model assumes search space forms tree single goal state
heuristics question consistent perfect tie breaking rule although
first assumption hold tasks second assumption satisfied
many state art heuristics karpas domshlak helmert domshlak bonet
helmert third assumption realistic prevent us
decision rule suggested model
idealized model assumes branching factor heuristic computation
times constant across search states application decision rule
practice deal assumption adopting average branching factor heuristic
computation times estimated random sample search states
finally decision rule dropt requires unrealistic knowledge heuristic estimates
well optimal plan cost c depth ls go state f c
obviously knowledge practice must use approximation decision
rule
first approximation make ignore trivial cases require knowledge c
cases surely expanded h enough prune instead apply
reasoning complicated case states resulting following decision rule

h ls logb tt
drapp h h

h ls logb tt
next step somehow estimate depth go ls number layers need
expand tree f reaches c order derive useful decision rule assume ls
positive correlation h h h h h close ls low
h yields much lower estimate h implying h accurate
depth go f c large approximation uses simplest correlation
linear one h ls hyper parameter controlling slope
recall idealized model actions unit cost thus cost go depthto go however tasks notably tasks
international competition feature non uniform action costs therefore decision rule
converts heuristic estimates cost go heuristic estimates depth go dividing
cost go estimate average action cost modifying estimate depthto go ls average action cost denote c plugging


fid omshlak k arpas arkovitch

decision rule yields

h
drapp h h
h

h c logb tt

h c logb tt

given b c quantity c logb becomes fixed follows denote
simply threshold
note linear correlation h ls occurs simple cases first
case h value remains constant subtree rooted additive error
h increases level case f increases expanded level
sub tree h remains g increases take expanding exactly
h h h levels reach f c contour second case
absolute error h remains constant h increases level expanded f
increases case need expand h levels generalized
case estimate h increases constant additive factor c h c
levels expanded
furthermore empirical evidence support conclusion exponential
growth search effort function heuristic error even assumptions made
model hold particular experiments helmert roger ipc benchmarks
heuristics small constant additive errors number expanded nodes
typically grows exponentially still small additive error increases
finally remark decision rule chooses admissible heuristic
resulting heuristic estimate admissible thus even chosen heuristic
correct one according dropt loss optimality solution
possible increase search time

online learning decision rule
decision rule drapp still requires knowledge h h use binary
label state compute value decision rule paying computation
time heuristics importantly use binary classifier predict
value decision rule unknown state note use classifier online
solving process time spent learning classification counted time spent
solving furthermore active learning choose pay label
state payment computation time therefore refer setting active
online learning
follows provide general overview selective max procedure describe
several alternatives components decision rule states expensive
heuristic h computed search state h h decision rule
serves binary target concept corresponds set states expensive
heuristic h significantly accurate cheaper heuristic h states according model reduction expanded states computing h outweighs extra time
needed compute selective max uses binary classifier predict value decision
rule several steps building classifier


fio nline peedup l earning ptimal p lanning

evaluate
hh conf idencei classify model
conf idence
return h
else
label h
h h c logb label h
update model hs labeli
return max h h
figure selective max state evaluation procedure
training example collection first need collect training examples
representative entire search space several state space sampling methods discussed
section
labeling training examples training examples collected first used
estimate average branching factor b average heuristic computation times
average action cost c b c estimated use estimate
threshold c logb decision rule
generate label training example calculating h h h
comparing decision threshold h label h otherwise
h simply switch heuristics decision whether
compute expensive heuristic default compute cheaper heuristic
unless classifier says otherwise
feature extraction obtained set training examples must decide
features characterize example since target concept heuristic values
features represent information heuristics derived typically
description current state
several feature construction techniques characterizing states tasks
proposed previous literature yoon fern givan de la rosa jimenez
borrajo designed inter learning learning
different tasks already solved offline however
concerned one online setting thus techniques
applicable implementation use simplest features possible taking
state variable feature empirical evaluation demonstrates even elementary
features suffice selective max perform well
learning set labeled training examples represented vector
features train binary classifier several different choices classifier discussed
section
completing steps described binary classifier used
predict value decision rule however classifier likely perfect accuracy


fid omshlak k arpas arkovitch

consult confidence classifier associates classification resulting state
evaluation procedure selective max depicted figure every state evaluated
search use classifier decide heuristic compute classification
confidence exceeds confidence threshold parameter selective max indicated
heuristic computed otherwise conclude enough information make
selective decision compute regular maximum h h however
use opportunity improve quality prediction states similar update
classifier generating label h h learning newly labeled example
decisions dedicate computation time obtain label example constitute
active part learning procedure possible update estimates b c
change threshold accordingly however would concept trying
learn constantly changing phenomenon known concept drift usually affects
learning adversely therefore update threshold
state space sampling
initial state space sample serves two purposes first used estimate branching factor
b heuristic computation times average action cost c compute
threshold c logb used specify concept concept specified
state space sample provides us set examples classifier initially
trained therefore important initial state space sample representative
states evaluated search number states initial sample controlled
parameter n
one option use first n states search however method biased towards
states closer initial state therefore likely represent search space well thus
discuss three sophisticated state space sampling procedures
performing random walks probes initial state details sampling
procedures vary probe terminates pre set depth limit
first sampling procedure refer biased probes uses inverse heuristic
selection bias choosing next state go probe specifically probability
choosing state successor random walk continue proportional
maxh biases sample towards states lower heuristic estimates
likely expanded search
second sampling procedure similar first one except chooses successor
uniformly thus refer unbiased probes sampling procedures add
generated states states along probe well siblings statespace sample terminate collecting n training examples depth limit
random walks sampling schemes set estimate goal depth
discuss goal depth estimate later
third state space sampling procedure referred pdb sampling proposed
haslum botea helmert bonet koenig procedure uses unbiased probes
adds last state reached probe state space sample depth
probe determined individually drawing random depth binomial distribution around
estimated goal depth


fio nline peedup l earning ptimal p lanning

note three sampling procedures rely estimate minimum goal depth
actions unit cost minimum goal depth h thus use
heuristic estimate evaluation used twice heuristic estimate initial state
maxh goal depth estimate however non uniform action costs goal depth
cost longer measured units seems could divide heuristicbased estimate average action cost c recall use state space sample order
obtain estimate estimate c thus creating circular dependency although possible
estimate c taking average cost actions description reason
assume actions equally likely used another option modify
state space sampling procedures place cost limit rather depth limit probe
however would pose presence cost actions case probe
reaches cost limit yet possible cost action apply clear whether probe
terminate therefore keep depth limited probes attempt estimate depth
cheapest goal compute heuristic estimate initial state use number
actions heuristic estimate goal depth estimate
possible every heuristic use empirical evaluation monotonically relaxed plan
heuristic heuristic known heuristic hoffmann nebel provide
information first use heuristic relaxed plan initial state use
number actions relaxed plan goal depth estimate
classifier
last decision made choice classifier although many classifiers used
several requirements must met due particular setup first training classification must fast performed time constrained solving second
classifier must incremental support active learning achieved allowing online
updates learned model finally classifier provide us meaningful measure
confidence predictions
several classifiers meet requirements found naive bayes classifier provide
good balance speed accuracy one note naive bayes classifier
assumes strong conditional independence features although fully
realistic assumption tasks sas task formulation contrast classical
strips formulations helps lot instead many highly dependent binary variables
much smaller set less dependent ones
although empirical evaluation demonstrate naive bayes appears
suitable classifier use selective max classifiers used obvious
choice replacement classifier would different bayesian classifier one classifier
aode webb boughton wang extension naive bayes somewhat relaxes
assumption independence features typically accurate naive
bayes however added accuracy comes cost increased training classification time
decision trees another popular type classifier allows even faster classification
decision tree induction incremental incremental tree inducer
iti utgoff berkman clouse supports incremental updating decision trees
tree restructuring freely available implementation c evaluation used
iti incremental mode incorporated every example tree immediately


fid omshlak k arpas arkovitch

tree likely used many classifications pairs consecutive updates training
examples active learning classification confidence iti classifier obtained
frequency examples leaf node classification came
different family possible classifiers k nearest neighbors knn cover hart
order use knn need distance metric examples features
simply states choice features opt simplicity use euclidean distance
metric knn enjoys fast learning time suffers slow classification time
classification confidence obtained simple unweighted vote k nearest neighbors
another question related choice classifier feature selection tasks
number variables accordingly features example task
airport domain variables performance naive bayes knn likely
improved feature selection poses initial sample considered
since feature selection done right initial sample obtained
initial sample could cause since features might appear
irrelevant according initial sample yet turn relevant active learning
used low confidence states encountered therefore use feature selection
empirical evaluation selective max
extension multiple heuristics
point discussed choose heuristic compute state
two heuristics choose given two heuristics decision
rule presented section inapplicable extending handle two heuristics
straightforward however extending selective max use two heuristics straightforward simply compare heuristics pair wise manner use voting rule choose
heuristic compute
many possible voting rules go simplest one compares
every pair heuristics chooses winner vote weighted confidence pairwise decision overall winner simply heuristic highest total confidence
pairwise comparisons ties broken favor cheaper compute heuristic although
requires quadratic number classifiers training classification time least naive
bayes appear much lower overall time spent heuristic computations thus
overhead induced learning classification likely remain relatively low reasonable
heuristic ensembles

experimental evaluation
evaluate selective max empirically implemented top open source fast downward
planner helmert empirical evaluation divided three parts first examine performance selective max last international competition ipc
benchmark selective max runner ex aequo ipc tying nd place
version fast downward abstraction merge shrink heuristic nissim hoffmann helmert losing sequential portfolio combining heuristics used
runners helmert roger karpas second present series controlled parametric
experiments examine behavior selective max different settings finally


fio nline peedup l earning ptimal p lanning

parameter


n
sampling method
classifier

default value



biased probes
naive bayes

meaning
heuristic difference bias
confidence threshold
initial sample size
state space sampling method
classifier type

table parameters selmax entry ipc
compare selective max simulated sequential portfolio heuristics selective
max
performance evaluation ipc
ipc experiments garca olaya et al run ipc organizers
machines time limit minutes memory limit gb per task
competition included domains none participants seen thus
precluding participants offline learning approaches
although many planners participated sequential optimal track ipc report
relevant selective max selective max entry ipc called selmax
consisted selective max uniform action cost partitioning version hla karpas
domshlak hlm cut helmert domshlak heuristics parameters used
selective max ipc reported table additionally heuristics selmax used
entered individually bjolp hla lmcut hlm cut report three
planners comparison selective max regular maximum hla hlm cut
would interesting entry ipc thus report
controlled experiments compare selective max regular maximum well
baseline combination methods
figure shows anytime profile three planners ipc tasks plotting number tasks solved different timeouts time limit minutes additionally table
shows number tasks solved domain ipc minutes includes
number solved winner fast downward stone soup fdss reference
selective max solves individual heuristics
uses furthermore anytime profile selective max dominates heuristics
range seconds full minute timeout behavior anytime plot
shorter timeouts due overhead selective max consists obtaining initial statespace sample well learning classification however appears selective max quickly
compensates relatively slow start
controlled experiments
series controlled experiments attempted evaluate impact different parameters
selective max controlled following independent variables
heuristics used three state art admissible heuristics hla karpas domshlak
hlm cut helmert domshlak hlm cut bonet helmert none


fid omshlak k arpas arkovitch



solved instances









bjolp
lmcut
selmax












timeout seconds









figure ipc anytime performance line shows number ipc
solved bjolp lmcut selmax planners respectively different timeouts
domain
barman
elevators
floortile
nomystery
openstacks
parcprinter
parking
pegsol
scanalyzer
sokoban
tidybot
transport
visitall
woodworking
total

bjolp
















lmcut
















selmax
















fdss
















table number tasks solved ipc domain bjolp lmcut
selmax planners best planners bold number
solved fast downward stone soup fdss domain included
reference



fio nline peedup l earning ptimal p lanning

base heuristics yields better search performance others across
domains heuristics hla typically fastest compute least accurate
hlm cut expensive compute accurate hlm cut expensive compute accurate data gathered experiments
hlm cut takes average time per state hla hlm cut takes time
per state hla evaluate selective max possible subsets two
three heuristics
admissible heuristics sas competitive
three example helmert haslum hoffmann nissim et al katz
domshlak expensive offline preprocessing followed fast
online per state computation contrast hla hlm cut hlm cut perform
computation online thus better exploited selective max
additionally empirically examine effectiveness selective max deciding whether
compute heuristic value done combining accurate heuristic
hlm cut blind heuristic
heuristic difference bias hyper parameter controls tradeoff computation time heuristic accuracy setting sets threshold forcing decision
rule choose accurate heuristic increasing increases threshold forcing decision rule choose accurate heuristic h value much higher
h evaluate selective max values
confidence threshold confidence threshold controls active learning part selective max setting turns active learning completely chosen heuristic
comes confidence least setting would mean active learning almost essentially reducing selective max regular point wise maximization
evaluate selective max values
initial sample size n initial sample size n important parameter
used train initial classifier active learning done
source estimates branching factor average action cost heuristic computation
times thus affects threshold increasing n increases accuracy initial
classifier aforementioned estimates increases preprocessing
time evaluate selective max values n
sampling method sampling method used obtain initial state space sample important affects initial sample thus accuracy threshold
initial classifier evaluate selective max three different sampling methods
p
described section biased probes selph unbiased probes selu
h sampling
method haslum et al selpdb
h
classifier choice classifier important naive bayes classifier comb
bines fast learning classification seln
h sophisticated variant naive
bayes called aode webb et al considered selaode
aode
h
course three heuristics computable polynomial time sas description task



fid omshlak k arpas arkovitch

parameter
heuristics


n
sampling method
classifier

default value
hla hlm cut



pdb haslum et al
naive bayes

meaning
heuristics used
heuristic difference bias
confidence threshold
initial sample size
state space sampling method
classifier type

table default parameters selh
accurate naive bayes higher classification learning times well increased memory overhead another possible choice incremental decision trees utgoff et al offer even faster classification expensive learning

tree structure needs changed selit
h consider knn classifiers cover hart
offer faster learning naive bayes usually expensive classifican
tion especially k grows larger selkn
k
h
table describes default values independent variables
subsequent experiments vary one independent variables keeping rest default
values experiments search task instance limited
minutes gb memory search times include time needed translating
task pddl sas building fast downward data structures
common planners tangential issues considered study search
times include learning classification time selective max
heuristics
begin varying set heuristics use every possible choice two
heuristics uniform action cost partitioning version hla simply refer
hla hlm cut hlm cut compare selective max methods heuristic
combination well individual heuristics compare selective max selh
regular maximum maxh well planner chooses heuristic compute
state randomly rndh clear whether random choice favor
expensive accurate heuristic cheaper less accurate one simply use
uniform random choice
experiment conducted domains conditional effects axioms
none heuristics used support international competitions
domains vary difficulty number tasks normalize
score planner domain normalizing number
domain good idea possible generate number
effectively unsolvable domain fraction solved
zero therefore normalize number solved domain
number domain solved least one planners
measure normalized coverage undesirable property introducing
search given single core ghz intel e cpu machine



fio nline peedup l earning ptimal p lanning

heuristic

hla

hlm cut

hlm cut

high variance unit cost
low variance unit cost
non uniform cost













total







individual heuristics
domains
high variance unit cost
low variance unit cost
non uniform cost
total

maxh





rndh





selh





hla hlm cut

high variance unit cost
low variance unit cost
non uniform cost
total
















hlm cut hlm cut

high variance unit cost
low variance unit cost
non uniform cost
total
















hla hlm cut hlm cut

high variance unit cost
low variance unit cost
non uniform cost
total
















heuristics
hla hlm cut

b combinations two heuristics

table average normalized coverage total coverage parentheses broken groups
domains unit cost actions high variance coverage domains unit cost
actions low variance coverage domains non uniform action costs table
shows individual heuristics table b shows
maximum maxh random choice rndh selective max selh combinations
set heuristics listed major row

planner could change normalized coverage planners believe
best reflects performance nonetheless overall performance measure list
average normalized coverage score across domains normalized coverage means
domains equal weight aggregate score additionally list domain
number solved planner parentheses next domain
name planner list number solved parentheses
tables summarize experiment divided domains
experiment sets domains non uniform action costs domains unit action
costs exhibited high variance number solved different


fid omshlak k arpas arkovitch

heuristics

domains

hla

hlm cut

hla hlm cut

high variance unit cost
low variance unit cost
non uniform cost
total











hla hlm cut

high variance unit cost
low variance unit cost
non uniform cost
total






hlm cut hlm cut

high variance unit cost
low variance unit cost
non uniform cost
total

hla hlm cut hlm cut

hlm cut

maxh

rndh

selh





























































high variance unit cost
low variance unit cost
non uniform cost

























total













table geometric mean ratio expansions relative maxh broken groups domains unit cost actions high variance coverage domains unit cost actions
low variance coverage domains non uniform action costs

planners domains unit action costs exhibited low variance number
solved different planners make distinction conducted
following experiments examine effects parameters selective
max unit cost action domains exhibited high variance tables
summarize three sets domains well domains combined
detailed per domain relegated appendix
table lists normalized coverage score averaged across domains total number
solved parentheses table lists individual heuristic
table b every combination method every set two heuristics table shows
accurate heuristic combination methods since given set base
heuristics maxh accurate heuristic possible accuracy evaluated relative
maxh evaluate heuristics accuracy task number states expanded
heuristic divided number states expanded maxh
compute geometric mean domain tasks solved planners
accuracy ratio list geometric mean numbers row lists
combination two three heuristics combinations two heuristics
leave cell representing heuristic combination empty
looking individual heuristics first see accurate heuristic
hlm cut well overall least accurate heuristic hla solved
tasks total hlm cut wins terms normalized coverage however looking
individual domains see best heuristic use varies indicating
combining different heuristics could indeed practical value
turn attention empirical combinations possible subsets
two heuristics clearly demonstrate one heuristic
used selective max better regular maximum random choice terms
normalized coverage absolute number solved furthermore poor
performance rndh coverage accuracy demonstrates decision rule


fio nline peedup l earning ptimal p lanning





solved instances










maxh



rndh
selh










timeout seconds









figure hla hlm cut hlm cut anytime profile line shows number
ipc solved maximum maxh random choice rndh selective
max selh combination methods hla hlm cut hlm cut heuristics
different timeouts

classifier used selective max important success computing one
heuristic state randomly insufficient say least
compared individual heuristics selective max least well
individual heuristics uses combinations except hlm cut hlm cut
likely hlm cut hlm cut similar procedure
thus heuristic estimates highly correlated see hinders selective max
consider extreme case two heuristics correlation yield
heuristic values selective max offer benefit finally remark
best planner experiment selective max combination hla hlm cut
minute time limit commonly used
ipc arbitrary number tasks solved minutes tell complete
tale examine anytime profile different heuristic combination methods
plotting number tasks solved different timeouts timeout minutes
figure shows plot three combination methods three heuristics used
figure shows advantage selh baseline combination methods even
greater shorter timeouts indicates advantage selh maxh even


fid omshlak k arpas arkovitch

heuristics
hla hlm cut

overhead


hla hlm cut



hlm cut hlm cut



hla hlm cut hlm cut



table selective max overhead row lists average percentage time spent learning
classification total time taken selective max set heuristics

greater evident minutes selh indeed effective
minimizing search time since anytime plots combinations pairs heuristics
similar omit sake brevity
finally present overhead statistics selective max proportion time spent
learning classification including time spent obtaining initial state space sample total solution time table presents average overhead selective max
combinations two heuristics detailed per domain
presented table appendix selective max incur noticeable overhead still relatively low worth mentioning overhead
varies significantly different domains
performed empirical evaluation selective max accurate heuristic
alongside blind heuristic blind heuristic returns goal states cost
cheapest action non goal states experiment chose accurate
heuristic hlm cut compare performance hlm cut alone
selective max hlm cut blind heuristic blind heuristic returns
constant value non goal states decision rule selective max uses combine
heuristic h blind heuristic hb simply h hb compute h
predicted value h greater constant threshold recall
h g c computing h simply waste time pruned
therefore makes sense compute h h c g note
threshold computing h depends g thus constant shows
constant threshold computing h best possible decision rule unfortunately
selective max decision rule approximation fails capture subtleties
case
table shows normalized coverage hlm cut selective max
hlm cut blind heuristic selective max little effect
domains though harm performance one domain openstacks
actually performs better single heuristic table shows average expansions ratio
number states expanded hlm cut baseline note blind
heuristic never increases heuristic accuracy selective max chooses
use blind heuristic quite often expanding average twice many states
hlm cut alone


fio nline peedup l earning ptimal p lanning

coverage

hlm cut

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel



















blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips



















total





table normalized coverage hlm cut selective max combining hlm cut blind
heuristic domains grouped domains unit cost actions high variance
coverage domains unit cost actions low variance coverage domains
non uniform action costs respectively



fid omshlak k arpas arkovitch

expansions

hlm cut

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel



















blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips



















geometric mean





table average ratio expanded states baseline hlm cut selective max
combining hlm cut blind heuristic domains grouped domains
unit cost actions high variance coverage domains unit cost actions low
variance coverage domains non uniform action costs respectively



fio nline peedup l earning ptimal p lanning

experiments varied heuristics selective max uses following
experiments fix set heuristics examine impact parameters selective max performance still need evaluate different configurations selective
max focus eight selected domains airport freecell logistics mprime mys tery pipesworld tankage satellite zenotravel eight domains
highest observed variance number tasks solved across different planners unit
action cost domains used domains chosen order reduce computation time
required experiments manageable quantity excluded domains non uniform
action costs use different method estimating goal depth state space
sampling method one parameters examine focus one parameter
selective max time present total number tasks solved eight chosen domains
different values parameter detailed per domain parameter appear
appendix
hyper parameter
figure plots total number solved different values
selective max fairly robust respect value unless large
value chosen making difficult selective max choose accurate
heuristic
detailed per domain appear table appendix well figure
complex picture seems cutoff value
domain increasing past value impairs performance one exception
pipesworld tankage domain setting helps
confidence threshold
figure b plots total number solved different values detailed
per domain appear table appendix indicate selective
max robust values unless set low value causing selective max
behave regular point wise maximum
initial sample size n
figure c plots total number solved different values n
x axis logscale detailed per domain appear table appendix
default value n best three values tried although
selective max still fairly robust respect choice parameter
sampling method
figure shows total number solved different methods initial
state space sampling detailed per domain appear table appendix
demonstrate choice sampling method notably affect performance
selective max however detailed effect evident free cell domain remark default sampling method pdb performs worse
others indeed probe sampling methods selective max outperforms
hla alone however difference due freecell domain
state certainty would generalize across domains


fisolved instances

omshlak k arpas arkovitch







































solved instances

hyper parameter



















solved instances

b confidence threshold













c initial sample size n
figure number solved selective max different values hyperparameter b confidence threshold c initial sample size n



fisolved instances

nline peedup l earning ptimal p lanning












airport
freecell
logistics
mprime
mystery
pw tankage
satellite
zenotravel














figure number solved selective domain different values




solved instances










pdb


probe

sampling method

unbiasedprobe


figure number solved selective max different sampling methods



fid omshlak k arpas arkovitch




solved instances









nb


aode


iti

classifier

nn


nn


figure number solved selective max different classifiers
classifier
figure shows total number solved different classifiers detailed
per domain appear table appendix naive bayes appears best
classifier use selective max although aode performs quite well even though
knn enjoys fast learning classifier used mostly classification expected
knn well however increased accuracy k seems pay
faster classification k
comparison sequential portfolios
sequential portfolio solvers optimal another exploiting merits
different heuristic functions successful practice fast downward
stone soup sequential portfolio helmert et al winning sequential optimal track ipc sequential portfolio utilizes different solvers running sequentially prespecified time limit one solver fails solution allotted time limit sequential
portfolio terminates moves next solver however sequential portfolio solver
needs know time allowance trying solve beforehand setting known
contract anytime russell zilberstein contrast selective max used
interruptible anytime manner time limit need known advance
compare selective max sequential portfolios heuristics
exact time took search heuristic alone solve
determine whether sequential portfolio assigns heuristic time limit able
solve data simulate two types sequential portfolio
planners first setting assume time limit known advance simulate
contract portfolio giving equal share time heuristics second setting
simulate interruptible anytime portfolio binary exponential backoff time limits starting









solved instances

solved instances

nline peedup l earning ptimal p lanning





selh
portctr







selh
portctr



portint

portint









timeout seconds















selh
portctr




timeout seconds

hla hlm cut
b

solved instances

solved instances

hla hlm cut








selh
portctr



portint

portint









timeout seconds



hlm cut hlm cut
c




timeout seconds

hla hlm cut hlm cut


figure anytime profiles sequential portfolios selective max plot shows number solved selective max selh simulated contract anytime portfolio
portctr simulated interruptible portfolio portint hla hlm cut b
hla hlm cut c hlm cut hlm cut hla hlm cut hlm cut

time limit second heuristic increase time limit factor none
heuristics able guide solve several possible
orderings heuristics use de facto best ordering denote
contract anytime portfolio portctr interruptible anytime portfolio portint
figure shows number solved different time limits selective max
contract anytime sequential portfolio interruptible anytime sequential portfolio
contract anytime sequential portfolio almost outperforms selective
max hand sequential portfolio know time limit advance
performance deteriorates significantly best heuristic combination selective max hla
hlm cut outperforms interruptible anytime portfolio heuristics


fid omshlak k arpas arkovitch

selective max combination hlm cut hlm cut combinations heuristics
interruptible anytime portfolio performs better selective max

discussion
learning active field since early days fikes hart
nilsson recently receiving growing attention community however despite
early work rendell relatively little work dealt learning state space search
guided distance estimating heuristics one prominent approaches
days works direction devoted learning macro actions see example
finkelstein markovitch botea enzenberger muller schaeffer coles smith
recently learning heuristic search received attention yoon et al
suggested learning inadmissible heuristic functions upon features extracted
relaxed plans arfaee zilles holte attempted learn almost admissible heuristic
estimate neural network perhaps closely related work thayer
dionne ruml learn correct errors heuristic estimates online thayer et al attempt improve accuracy single given heuristic selective max attempts choose one
several given heuristics state two works differ technically point importantly however none aforementioned approaches guarantee resulting heuristic
admissible thus optimal solution found contrast focus optimal aware previous work deals learning optimal
heuristic search
experimental evaluation demonstrates selective max effective method
combining arbitrary admissible heuristics baseline point wise maximization advantageous selective maxs ability exploit pairs heuristics one guaranteed
least accurate example hla heuristic used two action
cost partitioning schemes uniform optimal karpas domshlak heuristic induced
optimal action cost partitioning least accurate one induced uniform action
cost partitioning takes much longer compute selective max might used learn
worth spending extra time compute optimal cost partitioning
contrast max combination two heuristics would simply waste time spent
computing uniform action cost partitioning
controlled parametric experiments demonstrate right choice classifier
sampling method initial state space sample important parameters
selective max appear affect performance much long set reasonable
values implies selective max could improved faster accurate classifiers
developing sampling methods represent state space well
finally remark fast downward autotune entry sequential optimal track
edition international competition used paramils hutter hoos
leyton brown stutzle choose best configuration fast downward planner
chose use selective max combine hlm cut hmax bonet loerincs geffner
provides evidence selective max practically valuable method combining
heuristics optimal


fio nline peedup l earning ptimal p lanning

coverage

hla

hlm cut

hlm cut

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel




























blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips




























total







table detailed per domain individual heuristic normalized coverage
shown number solved shown parentheses domains grouped
domains unit cost actions high variance coverage domains unit
cost actions low variance coverage domains non uniform action costs
respectively

acknowledgments
work partly supported israel science foundation isf grant

appendix detailed empirical evaluation
appendix present detailed per domain experiments described section
table shows normalized coverage number solved domain
individual heuristics normalized coverage score planner x domain number
domain solved planner x divided number domain
solved least one planner tables give combinations two
heuristics tables list normalized coverage individual heuristics used
combination selective max selh regular maximum maxh random choice
heuristic state rndh minutes tables give geometric
mean ratio expanded states relative maxh domain solved
configurations number tasks solved planners listed parentheses next
domain final row gives geometric mean geometric means domain


fid omshlak k arpas arkovitch

coverage

hla

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel














































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips














































total











table detailed per domain normalized coverage hla hlm cut line shows
normalized coverage domain number solved shown
parentheses domains grouped domains unit cost actions high variance
coverage domains unit cost actions low variance coverage domains
non uniform action costs respectively



fio nline peedup l earning ptimal p lanning

expansions

hla

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel














































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips














































geometric mean











table detailed per domain expansions relative maxh hla hlm cut row
shows geometric mean ratio expanded nodes relative maxh domains
grouped domains unit cost actions high variance coverage domains
unit cost actions low variance coverage domains non uniform action
costs respectively



fid omshlak k arpas arkovitch

coverage

hla

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel














































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips














































total











table detailed per domain normalized coverage hla hlm cut line shows
normalized coverage domain number solved shown
parentheses domains grouped domains unit cost actions high variance
coverage domains unit cost actions low variance coverage domains
non uniform action costs respectively



fio nline peedup l earning ptimal p lanning

expansions

hla

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel














































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips














































geometric mean











table detailed per domain expansions relative maxh hla hlm cut row
shows geometric mean ratio expanded nodes relative maxh domains
grouped domains unit cost actions high variance coverage domains
unit cost actions low variance coverage domains non uniform action
costs respectively



fid omshlak k arpas arkovitch

coverage

hlm cut

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel














































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips














































total











table detailed per domain normalized coverage hlm cut hlm cut line shows
normalized coverage domain number solved shown
parentheses domains grouped domains unit cost actions high variance
coverage domains unit cost actions low variance coverage domains
non uniform action costs respectively



fio nline peedup l earning ptimal p lanning

expansions

hlm cut

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel














































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips














































geometric mean











table detailed per domain expansions relative maxh hlm cut hlm cut
row shows geometric mean ratio expanded nodes relative maxh domains
grouped domains unit cost actions high variance coverage domains
unit cost actions low variance coverage domains non uniform action
costs respectively



fid omshlak k arpas arkovitch

coverage

hla

hlm cut

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel























































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

































































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips























































total













table detailed per domain normalized coverage hla hlm cut hlm cut line
shows normalized coverage domain number solved
shown parentheses domains grouped domains unit cost actions high
variance coverage domains unit cost actions low variance coverage
domains non uniform action costs respectively



fio nline peedup l earning ptimal p lanning

expansions

hla

hlm cut

hlm cut

maxh

rndh

selh

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel























































blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

































































































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips























































geometric mean













table detailed per domain expansions relative maxh hla hlm cut hlm cut
row shows geometric mean ratio expanded nodes relative maxh
domains grouped domains unit cost actions high variance coverage
domains unit cost actions low variance coverage domains nonuniform action costs respectively



fid omshlak k arpas arkovitch

overhead

hla hlm cut

hla hlm cut

hlm cut hlm cut

three

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel
blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips
elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips

































































































































average









table selective max overhead row lists average percentage time spent learning
classification total time taken selective max domain
set heuristics domains grouped domains unit cost actions high
variance coverage domains unit cost actions low variance coverage
domains non uniform action costs respectively



fio nline peedup l earning ptimal p lanning

coverage
airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel
sum

sel
h










sel
h










sel
h










sel
h










sel
h










sel
h










sel
h










sel
h










table number solved selective max domain varying values
hyper parameter

coverage
airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel
sum

sel
h










sel
h










sel
h










sel
h










sel
h










sel
h










table number solved selective max domain varying values
confidence threshold

table lists average overhead selective max domain combination
two heuristics
tables list number solved domain
values n sampling method classifier respectively

coverage
airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel
sum


seln
h











seln
h











seln
h










table number solved selective max domain varying values
initial sample size n



fid omshlak k arpas arkovitch

coverage
airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel
sum

selpdb
h










selp
h










p
selu
h










table number solved selective max domain different sampling
methods pdb sampling method haslum et al p biased probes
sampling method u p unbiased probes sampling method

coverage
airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel
sum

b
seln
h










selaode
h











selit
h










n
sel n
h










n
sel n
h










table number solved selective max domain different classifiers



fio nline peedup l earning ptimal p lanning

coverage

selh

portint

portctr

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel




























blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips




























total







table detailed coverage portfolio hla hlm cut number solved selective max selh simulated interruptible portfolio portint simulated contract
anytime portfolio portctr domain heuristics hla hlm cut domains
grouped domains unit cost actions high variance coverage domains
unit cost actions low variance coverage domains non uniform action
costs respectively



fid omshlak k arpas arkovitch

coverage

selh

portint

portctr

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel




























blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips




























total







table detailed coverage portfolio hla hlm cut number solved selective max selh simulated interruptible portfolio portint simulated contract
anytime portfolio portctr domain heuristics hla hlm cut domains
grouped domains unit cost actions high variance coverage domains
unit cost actions low variance coverage domains non uniform action
costs respectively



fio nline peedup l earning ptimal p lanning

coverage

selh

portint

portctr

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel




























blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips




























total







table detailed coverage portfolio hlm cut hlm cut number solved
selective max selh simulated interruptible portfolio portint simulated
contract anytime portfolio portctr domain heuristics hlm cut hlm cut
domains grouped domains unit cost actions high variance coverage
domains unit cost actions low variance coverage domains nonuniform action costs respectively



fid omshlak k arpas arkovitch

coverage

selh

portint

portctr

airport
freecell
logistics
mprime
mystery
pipesworld tankage
satellite
zenotravel




























blocks
depot
driverlog
grid
gripper
logistics
miconic
pathways
pipesworld notankage
psr small
rovers
schedule
storage
tpp
trucks strips

















































elevators opt strips
openstacks opt strips
parcprinter strips
pegsol strips
scanalyzer strips
sokoban opt strips
transport opt strips
woodworking opt strips




























total







table detailed coverage portfolio hla hlm cut hlm cut number
solved selective max selh simulated interruptible portfolio portint simulated contract anytime portfolio portctr domain heuristics hla hlm cut
hlm cut domains grouped domains unit cost actions high variance
coverage domains unit cost actions low variance coverage domains
non uniform action costs respectively

tables list normalized coverage domain selective max
simulated contract interruptible sequential portfolios

references
arfaee j zilles holte r c bootstrap learning heuristic functions felner
sturtevant n eds proceedings third annual symposium combinatorial
search socs pp aaai press
backstrom c klein polynomial time sas pubs class computational intelligence
backstrom c nebel b complexity sas computational intelligence
bayardo jr r j schrag r csp look back techniques solve real world sat
instances kuipers b webber b l eds proceedings fourteenth national
conference artificial intelligence aaai pp aaai press


fio nline peedup l earning ptimal p lanning

bonet b helmert strengthening landmark heuristics via hitting sets coelho
h studer r wooldridge eds proceedings th european conference
artificial intelligence ecai pp ios press
bonet b loerincs g geffner h robust fast action selection mechanism
kuipers b webber b l eds proceedings fourteenth national
conference artificial intelligence aaai pp aaai press
botea enzenberger muller schaeffer j macro improving ai
automatically learned macro operators journal artificial intelligence

brafman r shani g multi path compilation contingent
hoffmann j selman b eds proceedings twenty sixth aaai conference
artificial intelligence aaai pp aaai press
burke e kendall g newall j hart e ross p schulenburg hyper heuristics
emerging direction modern search technology handbook metaheuristics international series operations management science chap pp
coles smith marvin heuristic search planner online macro action learning journal artificial intelligence
cover hart p e nearest neighbor pattern classification ieee transactions
information theory
de la rosa jimenez borrajo learning relational decision trees guiding
heuristic rintanen j nebel b beck j c hansen e eds proceedings
eighteenth international conference automated scheduling icaps
pp aaai press
domshlak c karpas e markovitch max max online learning
speeding optimal fox poole eds proceedings twentyfourth aaai conference artificial intelligence aaai pp aaai press
fern speedup learning sammut c webb g eds encyclopedia machine
learning pp springer
fern khardon r tadepalli p first learning track international
competition machine learning
fikes r e hart p e nilsson n j learning executing generalized robot plans
artificial intelligence
fikes r e nilsson n j strips application theorem
proving solving artificial intelligence
finkelstein l markovitch selective macro learning application
nxn sliding tile puzzle journal artificial intelligence
garca olaya jimenez linares lopez c international competition tech rep universidad carlos iii de madrid http hdl handle net
geffner h model autonomous behavior personal view fox
poole eds proceedings twenty fourth aaai conference artificial
intelligence aaai pp aaai press


fid omshlak k arpas arkovitch

haslum p botea helmert bonet b koenig domain independent construction pattern database heuristics cost optimal holte r c howe e
eds proceedings twenty second aaai conference artificial intelligence aaai
pp aaai press
helmert fast downward system journal artificial intelligence
helmert domshlak c landmarks critical paths abstractions whats difference anyway gerevini howe cesta refanidis eds proceedings
nineteenth international conference automated scheduling icaps
pp aaai press
helmert haslum p hoffmann j flexible abstraction heuristics optimal sequential boddy fox thiebaux eds proceedings seventeenth
international conference automated scheduling icaps pp
aaai press
helmert roger g good almost perfect fox gomes c p eds
proceedings twenty third aaai conference artificial intelligence aaai pp
aaai press
helmert roger g karpas e fast downward stone soup baseline building
planner portfolios icaps workshop learning pp
hoffmann j nebel b system fast plan generation heuristic
search journal artificial intelligence
hutter f hoos h h leyton brown k stutzle paramils automatic
configuration framework journal artificial intelligence
karpas e domshlak c cost optimal landmarks boutilier c
ed proceedings st international joint conference artificial intelligence ijcai pp
katz domshlak c implicit abstraction heuristics journal artificial intelligence

kautz h selman b satisfiability neumann b ed proceedings
th european conference artificial intelligence ecai pp john wiley
sons
keyder e geffner h soft goals compiled away journal artificial intelligence

marques silva j p sakallah k grasp search satisfiability
proceedings ieee acm international conference computer aided design
iccad pp
minton machine learning methods morgan kaufmann publishers inc
nissim r hoffmann j helmert computing perfect heuristics polynomial time
bisimulation merge shrink abstraction optimal walsh ed
proceedings nd international joint conference artificial intelligence ijcai
pp aaai press ijcai


fio nline peedup l earning ptimal p lanning

palacios h geffner h compiling uncertainty away conformant
bounded width journal artificial intelligence
pearl j heuristics intelligent search strategies computer solving addisonwesley
pednault e p adl exploring middle ground strips situation
calculus brachman r j levesque h j reiter r eds proceedings first
international conference principles knowledge representation reasoning kr
pp morgan kaufmann
rendell l basis state space learning systems successful implementation artificial intelligence
rintanen j heljanko k niemela satisfiability parallel plans plan search artificial intelligence
russell j zilberstein composing real time systems mylopoulos j reiter
r eds proceedings th international joint conference artificial intelligence
ijcai pp morgan kaufmann
schiex verfaillie g nogood recording static dynamic constraint satisfaction
journal artificial intelligence
thayer j dionne j ruml w learning inadmissible heuristics search
bacchus f domshlak c edelkamp helmert eds proceedings twentyfirst international conference automated scheduling icaps pp
aaai press
utgoff p e berkman n c clouse j decision tree induction efficient
tree restructuring machine learning
webb g boughton j r wang z naive bayes aggregating one dependence
estimators machine learning
yoon fern givan r replan baseline probabilistic boddy
fox thiebaux eds proceedings seventeenth international conference
automated scheduling icaps pp aaai press
yoon fern givan r learning control knowledge forward search
journal machine learning
zimmerman kambhampati learning assisted automated looking back
taking stock going forward ai magazine




