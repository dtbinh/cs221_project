Journal Artificial Intelligence Research 2 (1994) 89-110

Submitted 3/94; published 8/94

Pattern Matching Discourse Processing Information
Extraction Japanese Text
Tsuyoshi Kitani

tkitani@cs.cmu.edu

Yoshio Eriguchi
Masami Hara

eriguchi@rd.nttdata.jp
masami@rd.nttdata.jp

Center Machine Translation
Carnegie Mellon University
Pittsburgh, PA 15213 USA
Development Headquarters
NTT Data Communications Systems Corp.
66-2 Horikawa-cho, Saiwai-ku, Kawasaki-shi, Kanagawa 210 JAPAN

Abstract
Information extraction task automatically picking information interest
unconstrained text. Information interest usually extracted two steps.
First, sentence level processing locates relevant pieces information scattered throughout
text; second, discourse processing merges coreferential information generate
output. first step, pieces information locally identified without recognizing
relationships among them. key word search simple pattern search achieve
purpose. second step requires deeper knowledge order understand relationships
among separately identified pieces information. Previous information extraction systems
focused first step, partly required link piece
information pieces. link extracted pieces information map
onto structured output format, complex discourse processing essential.
paper reports Japanese information extraction system merges information using
pattern matcher discourse processor. Evaluation results show high level system
performance approaches human performance.

1. Introduction
recent information extraction systems, individual pieces information extracted directly text usually identified key word search simple pattern
search preprocessing stage (Lehnert et al., 1993; Weischedel et al., 1993; Cowie et al.,
1993; Jacobs et al., 1993). Among systems presented Fifth Message Understanding Conference (muc-5), however, main architectures ranged pattern matching
full fragment parsing (Onyshkevych, 1993). Full fragment parsing systems,
several knowledge sources syntax, semantics, domain knowledge combined
run-time, generally complicated changing part system tends affect
components. past information extraction research, interference slowed
development (Jacobs, 1993; Hobbs et al., 1992). pattern matcher, identifies
patterns interest, appropriate information extraction texts narrow
domains, since task require full understanding text.

c 1994 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiKitani, Eriguchi, & Hara

textract, information extraction system described here, uses pattern matcher
similar sri's fastus pattern matcher (Hobbs et al., 1992). matcher implemented
finite-state automaton. Unlike pattern matchers, textract's matcher deals
word matching problems caused word segmentation ambiguities often found
Japanese compound words.
goal pattern matcher identify concepts represented words
phrases text. pattern matcher first performs simple key-word-based concept
search, locating individual words associated concepts. second step template
pattern search locates phrasal patterns involving critical pieces information identified preprocessor. template pattern search identifies relationships
matched objects defined pattern well recognizing concept behind relationship. One typical concept relationship \economic activity" companies
participate other.
usually dicult determine relationships among pieces information
identified separate sentences. relationships often stated implicitly,
even text explicitly mentions descriptions often located far enough
apart make detection dicult. Although importance discourse processing information extraction emphasized Message Understanding Conferences (Lehnert
& Sundheim, 1991; Hirschman, 1992), system presented satisfactorily addressed
issue.
discourse processor textract able correlate individual pieces information
throughout text. textract merges concepts pattern matcher identified
separately (and usually different sentences) concepts involve companies. textract unify multiple references company even company
name missing, abbreviated, pronominalized. Furthermore, processor segments
discourse isolate portions text relevant particular conceptual relationship.
discourse segmentation lessens chance merging unrelated information (Kitani, 1994).
paper analyzes evaluation results textract's discourse module describes tipster/muc-5 evaluation results order assess overall system performance.

2. tipster information extraction task
goal tipster project sponsored arpa capture information interest
English Japanese newspaper articles corporate joint ventures microelectronics. system must fill generic template information extracted text
fully automated process. template composed several objects, containing several slots. Slots may contain pointers related objects (Tipster, 1992). Extracted
information stored object-oriented database.
joint ventures domain, task extract information concerning joint venture
relationships organizations form dissolve. template structure represents
relationships tie-up-relationship objects, contain pointers organization
entity objects representing organizations involved. Entity objects contain pointers
objects person facility objects, shown Figure 1.
microelectronics domain, extraction focuses layering, lithography, etching,
packaging processes semiconductor manufacturing microchip fabrication. entities
90

fiPattern Matching Discourse Processing

TEMPLATE
doc. no.
doc. date
doc. source
content (*)

ENTITY
name
aliases
location
nationality
type
entity rel. (+)
person(*)
facility (*)

TIE-UP-REL.
tie-up status
entity (+)
created
entity (*)
activity (*)

ACTIVITY
industry (*)

ENTITY-REL.
entity1 (+)
entity2 (*)
rel. ent2
ent1
PERSON
name
persons entity
position
FACILITY
name
location
type
INDUSTRY
industry type
product /
service

denotes instantiations multiple objects
(*) points zero objects, (+) points one objects

Figure 1: Object-oriented template structure joint ventures domain
extracted include manufacturer, distributor, user, addition detailed manufacturing
information materials used microchip specifications wafer size device
speed. microelectronics template structure similar joint ventures
fewer objects slots.
extraction tasks must identify individual entities certain
relationships among them. Often, however, particular piece extracted information
describes part relationship. partial information must merged
pieces information referring entities. merging produce correct results,
therefore, correct identification entity references crucial.

3. Problem definition
section first describes word matching problems caused word segmentation ambiguities. Diculties reference resolution company names explained. Issues
discourse segmentation concept merging discussed using example text.

3.1 Word segmentation
Japanese word segmentation preprocessor gives rise subsequent under-matching
problem. key word text found word segmentor's lexicon,
segmentor tends divide separate words. current lexicon, example,
91

fiKitani, Eriguchi, & Hara

compound noun \ F " (teikei-kaisyo), consisting two words, \ " (teikei: joint
venture) \ F " (kaisyo: dissolve), segmented two individual nouns. Thus
key word search \ F " (teikei-kaisyo) succeed segmented sentence.
hand, pattern matching process allows, default, partial matching
key word word text. \ " (teikei) \ [Z " (gyoum-teikei),
meaning \a joint venture", matched single key word \ "
(teikei). exibility creates over-matching problem. example, key word
\ JS " (silicon) matches \ f) JS" (nisanka-silicon: silicon dioxide), although
different materials reported microelectronics domain. segmentation diculties compound nouns cause major problems word-based Japanese
information retrieval systems (Fujii & Croft, 1993).

3.2 Company name references

corporate joint ventures domain, output templates mostly describe relationships
among companies (as described Section 2). Information interest therefore found
sentences mention companies activities. essential extractor
identify topic companies|the main concern sentences appear in|in order
correlate information identified sentence. three problems make
dicult identify topic companies.
1. Missing subject
Topic companies usually subject sentence. Japanese sentences frequently
omit subjects, however|even formal newspaper articles. veniex system
nec presented muc-5 identify company implied missing subject
explicit reference immediately preceding sentence (Doi et al.,
1993; Muraki et al., 1993). clear whether veniex resolve missing
reference explicit reference appears sentence separated
subjectless sentence.
2. Company name abbreviations
seen English, company names often abbreviated Japanese text first appearance. variety ways abbreviate company names Japanese
given (Karasawa, 1993). following examples show typical abbreviations
Japanese company names:
(a) partial word
\ AK' 9S$" ! \ 9S$ "
(Mercedes-Benz)
(Benz)
(b) English abbreviation
\ o%*NTT+ " ! \ NTT "
(Nippon Telegraph Telephone)
(c) first Katakana character + \ "
\ AJffS 7L " ! \ "
(American Express Corp.)
92

fiPattern Matching Discourse Processing
(d) first character primitive segment
\o % " ! \ "1
(Japan Airlines)
(e) randomly selected characters
\o % " ! \ "
(Shin-nihon Steel)
Locating company name abbreviations dicult, since many identified
companies either morphological analyzer name recognizer preprocessor. Another problem variety ways abbreviating names makes
dicult unify multiple references one company.
Almost muc-5 systems include string matching mechanism identify company name abbreviations. abbreviations specified aliases slot
company entity object. authors' knowledge, none systems
textract detect company name abbreviations type (d) (e) without
using pre-defined abbreviation table.
3. Company name pronouns
Company name pronouns often used formal texts. Frequently used expressions
include \ ! " (ryosya: companies), \ $ " (dosya: company), \ r
" (jisya: company itself). shown following examples, resolving
references particularly important full understanding text. Direct English
translation follows Japanese sentences.
(a) \ X/Y( $ .WR r 6IS)'K "

*Y+

*X+

\X Corp. tied Corp. sells products company
brand name."
(Y Corp.) (X Corp.)
(b) \ X/.'/ $ .p/NJ "

*X+

\X Corp. biggest company field. president company
Mr. Suzuki."
(X Corp.)
Reference resolution \ $ " (dosya: company) implemented veniex (Doi
et al., 1993). veniex resolves pronominal reference way identifies
missing company references. crl/brandeis diderot system presented muc5 simply chooses nearest company name referent \dosya". algorithm
later improved Wakao using corpus-based heuristic knowledge (Wakao, 1994).
systems handle pronominalized company names \dosya".
three problems described section often cause individual information
correlated wrong company tie-up-relationship object. avoid error,
topic companies must tracked context, since used determine
company objects information fragment assigned to. Abbreviated
pronominalized company names must unified references company.
1. \ o% " (nihon: Japan) \ " (koukuu: airlines) primitive segments example.
93

fiKitani, Eriguchi, & Hara

3.3 Discourse segmentation concept merging

joint ventures domain, tie-up-relationship object contains pointers objects
economic activities (as shown Figure 1). company involved multiple tie-ups, merging information tie-up relationship according topic companies
sometimes yields incorrect results. Consider following example:
"X Corp. tied Corp. X start selling products
Japan next month. Last year X started similar joint venture
Z Inc."

Obviously, sale second sentence related tie-up relationship X
Y. However, since topic company, subject sentence, X three
sentences, sale could related X Z tie-up relationship. incorrect
merging avoided separating text two blocks: first two sentences
describe X tie-up, last sentence describes X Z tie-up. Thus,
discourse segmentation necessary identify portions text containing related pieces
information. crl/brandeis diderot system segments joint ventures text
two types text structures (Cowie et al., 1993). known well discourse
segmentation performed, however.
text segmented, concepts identified pieces information merged
within discourse segment. example, expected income joint venture
often stated sentence explicitly mention participating companies;
appear previous sentence. case, joint venture concept identifying
companies income concept identifying expected income must merged
latter linked correct entity objects.
4. solution

section describes details textract's pattern matcher discourse processor
well system architecture.

4.1

textract architecture
textract information extraction system developed tipster Japanese do-

mains corporate joint ventures microelectronics (Jacobs, 1993; Jacobs et al., 1993).
shown Figure 2, textract joint ventures system comprises four major components: preprocessor, pattern matcher, discourse processor, template generator.
shorter development time, textract microelectronics system simpler configuration joint ventures system. include template pattern search
pattern matcher, discourse segmentation concept merging discourse
processor, shown Figure 2.
preprocessor, Japanese segmentor called majesty segments Japanese text
primitive words tagged parts speech (Kitani, 1991). Next, name recognizer
identifies proper names monetary, numeric, temporal expressions. majesty tags
proper names appear lexicon; name recognizer identifies additional proper
names locating name designators \ " (sya, corresponding \Inc." \Corp.")
94

fiPattern Matching Discourse Processing

Pattern matcher
Preprocessor

concept
search

template
pattern
search

- concept
- concept
identification
identification
- information
merging within
sentence

- morphological
analysis
- name
recognition

Discourse processor
company
discourse
concept
name
segmentamerging
unification
tion
- company
name
reference
resolution

- information
- text
segmentation merging
within text

joint ventures
system

Template
generator
- output
generation

Figure 2: textract system architecture
company names. recognizer extends name string forward backward
designator meets search stop conditions (Kitani & Mitamura, 1993). name
segments grouped units meaningful pattern matching process
(Kitani & Mitamura, 1994). strings extracted directly text identified
majesty name recognizer.
Details pattern matcher discourse processor given following sections. template generator assembles extracted information creates output
described Section 2.

4.2 Pattern matcher

following subsections describe concept search template pattern search
pattern matcher identify concepts sentence. Whereas former simply
searches key words, latter searches phrasal patterns within sentence.
template pattern search identifies relationships matched objects defined
pattern. course textract development, key words template patterns
obtained manually system developer using kwic (Key Word Context) tool
referring word frequency list obtained corpus.
4.2.1 Concept search

Key words representing concept grouped list used recognize
concept sentence. list written simple format: (concept-name word1 word2
...). example, key words recognizing dissolved joint venture concept written
following way:
95

fiKitani, Eriguchi, & Hara
(DISSOLVED

F Fn)


(DISSOLVED dissolve terminate cancel).

concept search module recognizes concept locates one associated
words sentence. simple procedure sometimes yields incorrect concepts. example, concept \dissolved" erroneously identified expression \cancel
hotel reservation". Key-word-based concept search successful processing text
narrow domain words used restricted meanings.
under-matching problem occurs compound noun key word list
concept fails match text instance compound text
segmented separate primitive words. avoid problem, adjacent nouns text
automatically concatenated concept search process, generating compound
nouns run-time. over-matching problem, hand, arises key word
successfully matches part compound noun whole associated
concept. Over-matching prevented anchoring beginning and/or end
key word pattern word boundaries (with symbol \>" beginning \<"
end). example, \> JS <" (silicon) must matched single complete
word text. Since problem rare, solution automatic: system developers
attach anchors key words likely over-match.
4.2.2 Template pattern search
textract's pattern matcher implemented finite-state recognizer. choice

implementation based assumption finite-state grammar eciently handle
many inputs context-free grammar covers (Pereira, 1990). pattern matcher
similar pattern recognizer used muc-4 fastus system developed sri
(Hobbs et al., 1992).
Patterns textract template pattern matcher defined rules similar
regular expressions. pattern definition specifies concept associated
pattern. (For joint ventures domain, textract uses eighteen concepts.)
matcher, state transitions driven segmented words grouped units
preprocessor. matcher identifies possible patterns interest text
match defined patterns, recognizing concepts associated patterns.
inputs, matcher must skip words explicitly defined pattern.
Figure 3 shows definitions equivalent Japanese English patterns recognizing
concept *joint-venture*. English pattern used capture expressions
\XYZ Corp. created joint venture PQR Inc." notation \@string" represents
variable matching arbitrary string. Variables whose names begin \@cname"
called company-name variables used company name expected
appear. definitions shown, string matched \@cname partner subj" likely
contain least one company name referring joint venture partner functioning
subject sentence.
pattern \ /#fi:strict:P" matches grammatical particles \ / " (wa ) \ "
(ga ), serve subject case markers. symbol \strict" specifies full string match
(the default case template pattern search), whereas \loose" allows partial string
96

fiPattern Matching Discourse Processing
(a)

(JointVenture1 6
@CNAME_PARTNER_SUBJ
/#fi:strict:P
@CNAME_PARTNER_WITH
(:strict:P
@SKIP
:loose:VN)

(b)

(JointVenture1 3
@CNAME_PARTNER_SUBJ
create::V
joint venture::NP
with::P
@CNAME_PARTNER_WITH)

Figure 3: matching pattern (a) Japanese (b) English

match. Partial string matching useful matching defined pattern compound words.
verbal nominal pattern \ : loose:VN" matches compound words \ [ "
(kigyo-teikei: corporate joint venture) well \ " (teikei: joint venture).
first field pattern pattern name, refers concept associated
pattern. second field number indexing field pattern. field's
contents used decide quickly whether search within given string.
matcher applies entire pattern string string contains text
indexed field. eciency, therefore, field contain least frequent word
entire pattern (in case, \ " (teikei) Japanese \a joint venture"
English).
order noun phrases relatively unconstrained Japanese sentence. Case
markers, usually attached ends noun phrases, provide strong clue identifying
case role phrase (subject, object, etc.). Thus pattern matching driven mainly
case markers recognizes case roles well without parsing sentence.
Approximately 150 patterns used extract various concepts Japanese joint
ventures domain. Several patterns usually match single sentence. Moreover, since patterns
often defined case markers \ / " (wa), \ " (ga), \ ( " (to), single
pattern match sentence one way several case markers
appear sentence. template generator accepts best matched pattern,
chosen applying following three heuristic rules order shown:
1. select patterns include largest number matched company-name variables
containing least one company name;
2. select patterns consume fewest input segments (the shortest string match);

3. select patterns include largest number variables defined words.
heuristic rules obtained examination matched patterns reported
system. obtain reliable heuristics, large-scale statistical evaluation must
performed. Heuristics similar problem pattern selection English discussed
(Rau & Jacobs, 1991). system chooses pattern consumes input
segments (the longest string match), opposed textract's choice shortest string
match second heuristic rule.2
2. Rau Jacobs' system, third heuristic rule seems applied second rule.
case, little difference performance heuristic rules two systems.
97

fiKitani, Eriguchi, & Hara
Another important feature pattern matcher rules grouped according
concept. rule name \JointVenture1" Figure 3, example, represents
concept *joint-venture*. Using grouping, best matched pattern
selected matched patterns particular concept group instead matched
patterns. feature enables discourse template generation processes narrow
search best information fill particular slot.
4.3 Discourse processor

following subsections describe algorithm company name reference resolution
throughout discourse. Discourse segmentation concept merging processes
discussed.
4.3.1 Identifying topic companies

Since syntactic analysis performed textract, topic companies simply identified wherever subject case marker \ " (ga), \ / " (wa), \ B " (mo) follows
company names. topic companies found sentence, previous sentence's
topic companies inherited (even current sentence contains non-company subject). based supposition sentence introduces new companies
usually mentions explicitly subject.
4.3.2 Abbreviation detection unification

Company name abbreviations following observed characteristics:


majesty tags abbreviations \unknown", \company", \person", \place";



company name precedes abbreviations;
abbreviation composed two characters company name,
original order;





characters need consecutive within company name;
English word abbreviations must identical English word appearing
company name.

Thus following regarded abbreviations: \unknown", \company", \person",
\place" segments composed two characters appear company
names previously identified text. comparing possible abbreviations
known company names, length longest common subsequence LCS (Wagner &
Fischer, 1974) computed determine maximum number characters appearing
order strings.3
unify multiple references company, unique number assigned
source abbreviated companies. Repeated company names contain strings
appearing earlier text treated abbreviations (and thus given unique numbers)
3. example, LCS \abacbba" \bcda" \bca".
98

fiPattern Matching Discourse Processing
1. Step 1: Initialization assign entity C unique number.
C (1 cmax)
C [i; \id"]
done
2. Step 2: Search abbreviations give unique numbers
C (1 cmax)
C [i; \id"] 6=
# already recognized abbreviation
continue loop
LENSRC length C [i; \string"]
j C (i + 1 j cmax)
C [j; \id"] 6= j
# already recognized abbreviation
continue j loop
LEN length C [j; \string"]
LCS length LCS C [i; \string"] C [j; \string"]
LCS 2
C [i; \eg"] = \YES" LENSRC = LCS = LEN
C[j; \id"] C [i; \id"] # English word abbreviation
else C [i; \eg"] = \NO" LCS = LEN
# abbreviation
C[j; \id"] C [i; \id"]
done
done
done
Figure 4: Algorithm unify multiple references company
algorithm described Figure 4. pseudocode shown, identified company
names stored associative array named C . \Unknown", \company", \person",
\place" segments stored array possible abbreviations. Company names
sorted ascending order starting position text numbered 1 cmax
(Step 1). company name string indexed addressed C [i; \string"].
ag C [i; \eg"] records whether company name English word abbreviation not.
Step 2 compares company name array C names higher array
(and thus later text). LCS pair earlier later company names
equal length later company name, later company name recognized
abbreviation earlier company name. Then, \id" later company name
replaced earlier company name. LCS must two characters,
abbreviation English word, LCS must equal length
earlier company name.
end execution, number given C [i; \id"]. C [i; \id"] changed
execution, C [i; \string"] recognized company name abbreviation.
99

fiKitani, Eriguchi, & Hara
4.3.3 Anaphora resolution company name pronouns

approach reference resolution described section based heuristics obtained
corpus analysis rather linguistic theories. Three company name pronouns
target reference resolution: \ ! " (ryosya), \ $ " (dosya), \ r " (jisya), meaning
\both companies", \the company", \the company itself". three
frequent company name pronouns appearing corpus provided arpa tipster
information extraction project. \Ryosya", \dosya", \jisya" appeared 456, 277, 129
times, respectively, 1100 newspaper articles containing average 481 characters per
article.
following heuristics, derived analysis pronoun reference corpus,
used reference resolution:






\ryosya" almost always referred \current" tie-up company, one exception
hundred occurrences;
ninety percent \dosya" occurrences referred topic company
one possible referent sentence, but:
two companies, including topic company, preceded \dosya"
sentence, seventy-five percent pronoun occurrences referred
nearest company, necessarily topic company;
eighty percent \jisya" occurrences referred topic company.

Two additional heuristic rules discovered implemented textract:
four percent \jisya" occurrences referred one company;
eight percent \jisya" occurrences referred entities general expressions company \ " (kaisya: company).
result discourse processing described above, every company name, including
abbreviations pronominal references, given unique number.
4.3.4 Discourse segmentation concept merging
150 articles tipster/muc-5 joint ventures test set, multiple tie-up relationships

appeared thirty-one articles included ninety individual tie-up relationships.
two typical discourse models representing discourse structures tie-up relationships
shown Figure 5.




Type-I: tie-ups described sequentially
Descriptions tie-ups appear sequentially model. One tie-up mentioned
new tie-up described.
Type-II: main tie-up reappears tie-ups mentioned
major difference Type-I model description main tie-up
reappears text tie-up relationships introduced. Non-main
tie-ups usually mentioned brie y.
100

fiPattern Matching Discourse Processing

tie-up-1

tie-up-1

tie-up-2

tie-up-2
.
.non-main tie-ups
.

tie-up-3
.
.
.

tie-up-n

tie-up-n

tie-up-1

Type-I

Type-II

Figure 5: Discourse structure tie-up relationships
Eleven Type-I structures thirteen Type-II structures appeared thirty-one articles. Seven articles contained complicated discourse structures regarding tie-up
relationships.
two types text structure described similar ones implemented
crl/brandeis diderot joint ventures system. difference Type-II
structure: diderot processes tie-up relationships reappear text,
reappearing main tie-up focused textract.
textract's discourse processor divides text different tie-up relationship
identified template pattern search. different tie-up relationship recognized
numbers assigned joint venture companies identical appearing
previous tie-up relationships. diderot segments discourse related pieces
information date entity location different tie-up relationships.
strict merging preferable pieces information comparison correctly
identified. merging conditions discourse segments chosen according
accuracy identification information compared.
discourse segmented, identified concepts extracted words phrases
merged. Figure 6 shows merging process following text passage actually
appeared tipster/muc-5 test set (a direct English translation follows):
\ /8o;.DAffAK..o%U'.$

RKRS .fi' KH+*K56'+/!
fiZ&fiRfiK(B4 "

\On eighth (of month), Tanabe Pharmaceuticals made joint
venture contract German pharmaceutical maker, Merck Co.
Inc., develop sell new medicine Japan. agreed
companies would invest equally establish joint venture company
five six years start selling new medicine."
101

fiKitani, Eriguchi, & Hara

First sentence:
"On eighth (of month),
Tanabe Pharmaceuticals made
joint venture contract
German pharmaceutical maker,
Merck Co. Inc., develop
sell new medicine
Japan."

Second sentence:
"They agreed
companies would invest equally
establish joint venture
company five six years
start selling new medicine."

"Tanabe Pharmaceuticals"
Template
pattern
search

*ESTABLISH*
"a joint venture
"both
company"
companies"

*ECONOMICACTIVITY*
"Merck Co. Inc."

"Tanabe Pharmaceuticals"
Discourse
processor

"both
companies"

*ECONOMICACTIVITY*

*ESTABLISH*

"a joint venture
company"

"Merck Co. Inc."

Figure 6: Example concept merging
two company names first sentence, \ " (tanabe seiyaku: Tanabe
Pharmaceuticals) \ AK " (ei meruku sya: Merck Co. Inc.), identified
either majesty name recognizer preprocessing. Next, template pattern
search locates first sentence \economic activity" pattern shown Figure 7 (a).
*economic-activity* concept relating two companies recognized.
template pattern search recognizes *establish* concept second sentence
template pattern shown Figure 7 (b).
sentence-level processing, discourse processing recognizes \ ! " (ryosya:
companies) second sentence refers Tanabe Pharmaceuticals Merck
first sentence current tie-up companies. Since second sentence
introduce new tie-up relationship, sentences discourse
segment. Concepts separately identified two sentences merged
subjects two sentences same. *establish* concept therefore joined
*economic-activity* concept.
(a)

(EconomicActivityE 6
@CNAME_PARTNER_SUBJ
:strict:P
@CNAME_PARTNER_SUBJ
:strict:P
@SKIP
:loose:VN)

(b)

(Establish3 6
@CNAME_PARTNER_SUBJ
:strict:P
@CNAME_CREATED_OBJ
:strict:P
@SKIP
:loose:VN)

/#fi
R


/#fi
.
$

Figure 7: Economic activity pattern (a) establish pattern (b)
102

fiPattern Matching Discourse Processing

5. Performance evaluation
section shows evaluation results textract's discourse module. muc-5 evaluation metrics overall textract performance discussed.

5.1 Unique identification company name abbreviations
hundred joint ventures newspaper articles used tipster 18-month evaluation
chosen blind test set evaluation. evaluation measures recall,
percentage correct answers extracted compared possible answers, precision,
percentage correct answers extracted compared actual answers. majesty
name recognizer identified company names evaluation set recall seventyfive percent precision ninety-five percent partial matches expected
recognized strings allowed, recall sixty-nine percent precision
eighty-seven percent exact matching condition.
Company names appeared form different first appearance
article considered company name abbreviations. Among 318 abbreviations,
recall precision abbreviation detection sixty-seven eighty-nine percent, respectively. importantly, detected abbreviations unified correctly source
companies long source companies identified correctly majesty
name recognizer.
evaluation results clearly show company name abbreviations accurately
detected unified source companies long company names correctly
identified preceding processes. possible, however, simple string matching
algorithm currently used could erroneously unify similar company names, often
seen among family companies.

5.2 Anaphora resolution company name pronouns
accuracy reference resolution \ryosya", \dosya", \jisya" shown Table
1. numbers parentheses obtained restricting attention pronouns
referred companies identified correctly preceding processes. Since companies
referred \ryosya" (both companies) usually \current" tie-up companies
joint ventures domain, reference resolution accuracy depended accuracy
tie-up relationships identified.
company name pronouns

number
references
\ ! " (ryosya: companies) 101 (93)
\ $ " (dosya: company)
100 (90)
\ r " (jisya: company itself) 60 (53)

resolution
accuracy
64% (70%)
78% (87%)
78% (89%)

Table 1: Accuracy reference resolutions
103

fiKitani, Eriguchi, & Hara
major cause incorrect references \dosya" failure locate topic companies. simple mechanism searching topic companies using case markers
work well. typical problem seen following example: \ '/X " (A
joint venture partner X Corp.). X Corp topic company, subject \ X "
(X Corp.) followed subject case marker. errors attributed
fact \dosya" always refer topic company discussed heuristic rules
\dosya" reference resolution.
Regarding \jisya" resolutions, five instances referred multiple
companies bound single company. Since multiple companies usually listed
using conjunctions \ ( " (to: and) \ " (comma), identified easily
simple phrase analysis performed.
became clear evaluation resolving \dosya" references non-topic
company required intensive text understanding. Forty-seven percent occurrences
\dosya" \jisya" bound topic companies inherited previous sentence.
result strongly supported importance keeping track topic companies throughout
discourse.

5.3 Discourse segmentation
Thirty-one 150 tipster/muc-5 evaluation test articles included ninety multiple tieup relationships. textract's discourse processor segmented thirty-one articles
seventy-one individual tie-up relationship blocks. thirty-eight blocks correctly segmented. Main tie-up relationships reappeared Type-II discourse structures detected well, caused structures incorrectly recognized
Type-I. error caused fact joint venture relationships usually mentioned implicitly reappeared text. example, noun phrase,
\ ./ " (the joint venture time), detected template patterns used, brought focus back main tie-up. result, textract identified eight
percent fewer tie-up relationships possible number expected tipster/muc-5
evaluation. merging error must affected system performance since information reappearing main tie-up segment would correctly linked
earlier main tie-up segment.
preliminary study suggested recognizing segmentation points text
regarded crucial performance. template pattern matching alone good
enough recognize segmentation points. discourse processor simply segmented
text found new tie-up relationship. discourse models, currently unused
run-time textract, could used help infer discourse structure system
sure whether merge separate discourse segments. Reference resolution definite
indefinite noun phrases must solved accurate discourse segmentation future
research.
accuracy discourse segmentation might improved checking difference
identity date entity location, well entity name, deciding whether
merge tie-up relationship. textract take date location objects account
making segmentation decisions, textract's identification objects
considered reliable enough. example, date object identified recall
104

fiPattern Matching Discourse Processing
twenty-seven percent precision fifty-nine percent. hand, entities
identified eighty percent accuracy recall precision. avoid
incorrect discourse segmentation, therefore, textract's merging conditions included
entity names reliable information.

5.4 Overall textract performance

250 newspaper articles, 150 Japanese corporate joint ventures 100 Japanese
microelectronics, provided arpa use tipster/muc-5 system evaluation.
Six joint ventures systems five microelectronics systems, including textract developed cmu optional system ge-cmu shogun, presented Japanese
system evaluation muc-5. scoring program automatically compared system output
answer templates created human analysts. human decision necessary,
analysts instructed scoring program whether two strings comparison completely matched, partially matched, unmatched. Finally, scoring program calculated
overall score combined newspaper article scores. Although various evaluation metrics measured evaluation (Chinchor & Sundheim, 1993),
following error-based recall-precision-based metrics discussed paper.
basic scoring categories used are: correct (COR), partially correct (PAR), incorrect (INC),
missing (MIS), spurious (SPU), counted number pieces information
system output compared possible information.
(1) Error-based metrics
Error per response fill (ERR):
wrong = INC + P AR=2 + MIS + SPU
total COR + PAR + INC + MIS + SP U


Undergeneration (UND):

MIS
MIS =
possible COR + PAR + INC + MIS


Overgeneration (OVG):

SPU =
SPU
actual COR + P AR + INC + SP U


Substitution (SUB):

INC + P AR=2
COR + P AR + INC

105

fiKitani, Eriguchi, & Hara

domain
ERR UND OVG SUB REC PRE P&R
textract (JJV)
50
32
23
12
60
68 63.8
System (JJV)
54
36
27
12
57
64 60.1
System B (JJV)
63
51
23
12
42
67 52.1
textract (JME) 59
43
28
12
51
63 56.4
System (JME)
58
30
38
14
60
53 56.3
System B (JME)
65
54
24
12
40
66 50.4
Table 2: Scores textract two top-ranking ocial systems tipster/muc-5
(2) Recall-precision-based metrics


Recall (REC):



Precision (PRE):



P&R F-measure (P&R):

COR + PAR=2
possible
COR + PAR=2
actual

2 REC P
REC + PRE
error per response fill (ERR) ocial measure muc-5 system performance.
Secondary evaluation metrics undergeneration (UND), overgeneration (OVG),
substitution (SUB). recall, precision, F-measure metrics used unocial
metrics muc-5.
Table 2 shows scores textract two top-ranking ocial systems taken
tipster/muc-5 system evaluation results.4 textract processed Japanese
domains corporate joint ventures (JJV) microelectronics (JME), whereas two
systems processed English Japanese text. textract performed well
top-ranking systems two Japanese domains.
human performance four well-trained analysts reported eighty
percent recall precision English microelectronics domain (Will, 1993).
thirty percent better best tipster/muc-5 systems' performance
P&R F-measure language domain. Japanese joint ventures domain,
textract scored recall seventy-five percent precision eighty-one percent
core template comprising essential objects. result suggests current
technology could used support human extraction work task well-constrained.
4. textract scores submitted muc-5 unocial. scored ocially conference.
Table 2 shows textract's ocial scores.
106

fiPattern Matching Discourse Processing
Running SUN SPARCstation IPX, textract processed joint ventures article
sixty seconds microelectronics article twenty-four seconds average.
human analysts took fifteen minutes complete English microelectronics
template sixty minutes Japanese joint ventures template (Will, 1993).
Thus human-machine integrated system would best solution fast, high quality,
information extraction.
tipster/muc-5 systems processed Japanese English domains.
systems generally performed better Japanese domains corresponding English domains. One likely reason structure Japanese articles fairly standard,
particularly Japanese joint ventures domain, readily analyzed
two discourse structure types described paper. Another possible reason characteristic writing style: expressions need identified tend appear first
sentences form suitable pattern matching.
textract Japanese microelectronics system copied preprocessor, concept
search pattern matcher, company name unification discourse processor
used textract Japanese joint ventures system. microelectronics system
developed three weeks one person replaced joint ventures concepts key
words representative microelectronics concepts key words. lower performance
textract microelectronics system compared joint ventures system largely
due short development time. probably due less homogeneous discourse
structure writing style microelectronics articles.
6. Conclusions future research

paper described importance discourse processing three aspects information extraction: identifying key information throughout text, i.e. topic companies
company name references tipster/muc-5 domains; segmenting text select relevant portions interest; merging concepts identified sentence level processing.
basic performance system depends preprocessor, however, since many
pieces identified information put directly slots otherwise used fill slots
later processing. textract's pattern matcher solves matching problem caused
segmentation ambiguities often found Japanese compound words. pattern
matching system based finite-state automaton simple runs fast. factors
essential rapid system development performance improvement.
improve system performance pattern matching architecture, increase
number patterns unavoidable. Since matching large number patterns
lengthy process, ecient pattern matcher required shorten running time.
Tomita's new generalized LR parser, known one fastest parsers practical
purposes, skips unnecessary words parsing (Bates & Lavie, 1991). parser
evaluation investigate appropriate information extraction Japanese
text (Eriguchi & Kitani, 1993). Pattern matching alone, however, able improve
system performance human levels complicated information extraction task
tipster/muc-5, even task well-defined suitable pattern matching.
efforts made discourse processing discourse segmentation reference
resolution definite indefinite noun phrases.
107

fiKitani, Eriguchi, & Hara
research discussed paper based application-oriented, domain-specific,
language-specific approach relying patterns heuristic rules collected
particular corpus. obvious patterns heuristic rules described paper
cover wide range applications, domains, languages. empirical approach
described worth investigating even entirely new task, however, since
achieve high level system performance relatively short development time.
linguistic theory-based systems tend become complex dicult maintain, especially
incorporate full text parsing, simplicity empirically-based, pattern-oriented
system textract keeps development time short evaluation cycle quick.
Corpus analysis key element corpus-based paradigm. estimated
corpus analysis took half development time textract. Statistically-based
corpus analysis tools necessary obtain better performance shorter development
time. tools could help developers extract important patterns heuristic
rules corpus, monitor system performance evaluationimprovement cycle.

Acknowledgements

authors wish express appreciation Jaime Carbonell, provided opportunity pursue research Center Machine Translation, Carnegie Mellon
University. Thanks due Teruko Mitamura Michael Mauldin many
helpful suggestions.
References

Bates, J., & Lavie, A. (1991). Recognizing Substrings LR(k) Languages Linear Time.
Tech. rep. CMU-CS-91-188, Carnegie Mellon University, School Computer Science.
Chinchor, N., & Sundheim, B. (1993). MUC-5 Evaluation Metrics. Proceedings
Fifth Message Understanding Conference (MUC-5), pp. 69{78.
Cowie, J., Guthrie, L., et al. (1993). CRL/BRANDEIS: Description Diderot System
Used MUC-5. Proceedings Fifth Message Understanding Conference
(MUC-5), pp. 161{179.
Doi, S., Ando, S., & Muraki, K. (1993). Context Analysis Information Extraction System
Based Keywords Text Structure. Proceedings Forty-seventh Annual
Conference IPSJ (in Japanese).
Eriguchi, Y., & Kitani, T. (1993). Preliminary Study Using Tomita's Generalized LR
Parser Information Extraction. Unpublished paper, Center Machine Translation, Carnegie Mellon University.
Fujii, H., & Croft, B. (1993). Comparison Indexing Techniques Japanese Text Retrieval. Proceedings Sixteenth Annual International ACM SIGIR Conference
Research Development Information Retrieval, pp. 237{246.
Hirschman, L. (1992). Adjunct Test Discourse Processing MUC-4. Proceedings
Fourth Message Understanding Conference (MUC-4), pp. 67{77.
108

fiPattern Matching Discourse Processing
Hobbs, J., Appelt, D., et al. (1992). FASTUS: System Extracting Information
Natural-Language Text. Tech. rep. 519, SRI International.
Jacobs, P. (1993). TIPSTER/SHOGUN 18-Month Progress Report. Notebook TIPSTER 18-Month Meeting.
Jacobs, P., Krupka, G., et al. (1993). GE-CMU: Description Shogun System Used
MUC-5. Proceedings Fifth Message Understanding Conference (MUC-5),
pp. 109{120.
Karasawa, I. (1993). Detection Company Name Abbreviations Japanese Texts. Unpublished paper, Center Machine Translation, Carnegie Mellon University.
Kitani, T. (1991). OCR Post-processing Method Handwritten Japanese Documents.
Proceedings Natural Language Processing Pacific Rim Symposium, pp. 38{45.
Kitani, T. (1994). Merging Information Discourse Processing Information Extraction.
Proceedings Tenth IEEE Conference Artificial Intelligence Applications, pp. 412{418.
Kitani, T., & Mitamura, T. (1993). Japanese Preprocessor Syntactic Semantic
Parsing. Proceedings Ninth IEEE Conference Artificial Intelligence
Applications, pp. 86{92.
Kitani, T., & Mitamura, T. (1994). Accurate Morphological Analysis Proper Name
Identification Japanese Text Processing. Journal Information Processing Society
Japan, 35 (3), 404{413.
Lehnert, W., McCarthy, J., et al. (1993). UMASS/HUGHES: Description CIRCUS
System Used MUC-5. Proceedings Fifth Message Understanding Conference (MUC-5), pp. 277{291.
Lehnert, W., & Sundheim, B. (1991). Performance Evaluation Text-Analysis Technologies. AI Magazine, Fall, 81{94.
Muraki, K., Doi, S., & Ando, S. (1993). NEC: Description VENIEX System Used
MUC-5. Proceedings Fifth Message Understanding Conference (MUC-5),
pp. 147{159.
Onyshkevych, B. (1993). Technology Perspective. Notebook Fifth Message Understanding Conference (MUC-5).
Pereira, F. (1990). Finite-State Approximations Grammars. Proceedings DARPA
Speech Natural Language Workshop, pp. 20{25.
Rau, L., & Jacobs, P. (1991). Creating Segmented Databases Free Text Text
Retrieval. Proceedings Fourteenth Annual International ACM/SIGIR Conference
Research Development Information Retrieval, pp. 337{346.
Tipster (1992). Joint Venture Template Fill Rules. Plenary Session Notebook
TIPSTER 12-Month Meeting.
109

fiKitani, Eriguchi, & Hara
Wagner, R., & Fischer, M. (1974). String-to-String Correction Problem. Journal
ACM, 21 (1), 168{173.
Wakao, T. (1994). Reference Resolution Using Semantic Patterns Japanese Newspaper
Articles. Proceedings COLING 94, pp. 1133{1137.
Weischedel, R., Ayuso, D., et al. (1993). BBN: Description PLUM System Used
MUC-5. Proceedings Fifth Message Understanding Conference (MUC-5),
pp. 93{107.
Will, C. (1993). Comparing Human Machine Performance Natural Language Information Extraction: Results English Microelectronics MUC-5 Evaluation.
Proceedings Fifth Message Understanding Conference (MUC-5), pp. 53{67.

110


