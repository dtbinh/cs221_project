Journal Artificial Intelligence Research 41 (2011) pages 2567

Submitted 09/10; published 05/11

Determining Possible Necessary Winners
Common Voting Rules Given Partial Orders
Lirong Xia
Vincent Conitzer

lxia@cs.duke.edu
conitzer@cs.duke.edu

Department Computer Science, Duke University,
Durham, NC 27708, USA

Abstract
Usually voting rule requires agents give preferences linear orders. However,
cases impractical agent give linear order alternatives.
suggested let agents submit partial orders instead. Then, given voting rule,
profile partial orders, alternative (candidate) c, two important questions arise:
first, still possible c win, second, c guaranteed win?
possible winner necessary winner problems, respectively. two problems
divided two sub-problems: determining whether c unique winner (that
is, c winner), determining whether c co-winner (that is, c set
winners).
consider setting number alternatives unbounded votes
unweighted. completely characterize complexity possible/necessary winner
problems following common voting rules: class positional scoring rules (including
Borda), Copeland, maximin, Bucklin, ranked pairs, voting trees, plurality runoff.

1. Introduction
multiagent systems, often, agents must make joint decision spite fact
different preferences alternatives. example, agents may
decide joint plan allocation tasks/resources. general solution
problem agents vote alternatives. is, agent gives
ranking (linear order) alternatives; voting rule takes submitted
rankings input, based produces chosen alternative (the winner), set
chosen alternatives. design good voting rules studied centuries
social choice community. recently, computer scientists become interested
social choicemotivated part applications multiagent systems,
applications. Hence, community interested computational social choice emerged.
traditional social choice, agents usually required give linear order
alternatives. However, especially multiagent systems applications, always
practical. one, sometimes, set alternatives large. example,
generally many possible joint plans allocations tasks/resources agent
give linear order them. settings, agents must use different voting language
represent preferences; example, use CP-nets (Boutilier, Brafman,
Domshlak, Hoos, & Poole, 2004; Lang, 2007; Xia, Lang, & Ying, 2007a, 2007b; Lang &
Xia, 2009). However, agent uses CP-net (or similar language) represent
preferences, generally gives us partial order alternatives. Another
c
2011
AI Access Foundation. rights reserved.

fiXia & Conitzer

issue always possible agent compare two alternatives (Pini, Rossi,
Venable, & Walsh, 2007). incomparabilities result partial order.
paper, study setting agent, partial order corresponding agents preferences. study following two questions. (1)
case that, extension partial orders linear orders, alternative c wins?
(2) case that, extension partial orders linear orders, alternative c
wins? problems known possible winner necessary winner problems, respectively, introduced Konczak Lang (2005). Depending interpretation c
wins, possible/necessary winner problems divided two sub-problems:
one called possible/neccessary unique winner problem (here unique often omitted
causing confusion), c wins means c winner election; called possible/necessary co-winner problem, c wins means
c one winners. noted answer depends voting
rule used. Previous research investigated setting uncertainty
voting rule; here, necessary (possible) winner alternative wins
(some) realization rule (Lang, Pini, Rossi, Venable, & Walsh, 2007). paper,
study setting; is, rule always fixed.
problems motivated observations impracticality
submitting linear orders, relate preference elicitation manipulation.
preference elicitation, idea that, instead agent report preferences
once, ask simple queries preferences (e.g. prefer
b?), enough information determine winner. Preference elicitation found many applications multiagent systems, especially combinatorial auctions (for overviews, see Parkes, 2006; Sandholm & Boutilier, 2006) voting settings
well (Conitzer & Sandholm, 2002, 2005b; Conitzer, 2009). problem deciding
whether terminate preference elicitation declare winner exactly necessary winner problem. Manipulation said occur agent casts vote
correspond true preferences, order obtain result prefers.
GibbardSatterthwaite Theorem (Gibbard, 1973; Satterthwaite, 1975), reasonable voting rule, situations agent successfully manipulate rule.
prevent manipulation, one approach taken computational social
choice community study whether manipulation (or made) computationally
hard (Bartholdi, Tovey, & Trick, 1989a; Bartholdi & Orlin, 1991; Hemaspaandra & Hemaspaandra, 2007; Elkind & Lipmaa, 2005; Conitzer, Sandholm, & Lang, 2007; Faliszewski,
Hemaspaandra, & Schnoor, 2008; Zuckerman, Procaccia, & Rosenschein, 2009; Xia, Zuckerman, Procaccia, Conitzer, & Rosenschein, 2009; Faliszewski, Hemaspaandra, & Schnoor,
2010). fundamental questions studied Given votes,
coalition agents cast votes alternative c wins? (so-called constructive manipulation) Given votes, coalition agents cast votes
alternative c win? (so-called destructive manipulation). problems
correspond possible winner problem (the complement of) necessary winner
problem, respectively. precise, correspond restricted versions possible winner problem (the complement of) necessary winner problem
partial orders linear orders (the nonmanipulators votes) partial
orders empty (the manipulators votes). However, uncertainty parts
26

fiDetermining Possible Necessary Winners Given Partial Orders

nonmanipulators votes, parts manipulators votes already fixed (for
example due preference elicitation), correspond general versions
possible winner problem (the complement of) necessary winner problem.
Another related problem evaluation problem (Conitzer et al., 2007).
given probability distribution voters vote, asked probability
given alternative wins. shown anonymous voting rule,
number alternatives constant, polynomial-time algorithm
solves evaluation problem; number alternatives bounded
constant, problem becomes #P hard plurality, Borda, Copeland
rules (Hazon, Aumann, Kraus, & Wooldridge, 2008). complexity influencing
distribution voters votes multiple binary issues make given alternative
(a valuation issues) win studied (Erdelyi, Fernau, Goldsmith,
Mattei, Raible, & Rothe, 2009). possible/necessary winner problems related
evaluation problem following way. every voter assigns positive probability
every one linear orders extend partial order, then, alternative c, c
possible winner probability c wins election positive; c
necessary winner probability c wins election 1. must
note reduction possible/necessary winner problem evaluation
problem general polynomial, partial order, possible
exponentially many linear orders extend it. example, partial
order empty, linear order extension it. However, paper,
prove results show possible/necessary winner problem hard even
number undetermined pairs partial order constant, fact
polynomially many linear orders extend it. Hence, hardness results imply
(only NP-)hardness results evaluation problem.
variety different interpretations possible necessary winner
problems, surprising already significant studies problems. Two main settings studied (see Walsh, 2007 good survey). first
setting, number alternatives bounded, votes weighted. Here,
Borda, veto, Copeland, maximin, STV, plurality runoff rules, possible winner
problem NP-complete; STV plurality runoff rules, necessary winner
problem coNP-complete (Conitzer et al., 2007; Pini et al., 2007; Walsh, 2007). However,
many elections, votes unweighted (that is, agents vote counts same).
votes unweighted, number alternatives bounded, possible
necessary winner problems always solved polynomial time, assuming voting
rule executed polynomial time (Conitzer et al., 2007; Walsh, 2007). Hence,
setting studied votes unweighted number
alternatives bounded; setting study paper. setting, possible necessary winner problems known hard STV (Bartholdi
& Orlin, 1991; Pini et al., 2007; Walsh, 2007). Computing whether alternative
possible necessary Condorcet winner done polynomial time (Konczak & Lang,
2005). However, time conference version work (Xia & Conitzer, 2008),
common rules, prior results (except fact
27

fiXia & Conitzer

problems easy many rules partial order either linear order
empty, is, standard manipulation problem).1
1.1 Contributions
paper, characterize complexity possible necessary winner problems
important rulesspecifically, class positional scoring rules,
Copeland, maximin, Bucklin, ranked pairs, voting trees, plurality runoff.
show possible winner problems NP-complete rules except
possible unique winner problem respect plurality runoff. show
necessary winner problems coNP-complete Copeland, ranked pairs, voting
trees; necessary co-winner problem coNP-complete plurality runoff.
remaining cases, present polynomial-time algorithms. results summarized
Table 1.

STV
Plurality
Veto
Pos. scoring
(incl. Borda, k-approval)

Copeland
Maximin
Bucklin
Ranked pairs
Voting trees
(incl. balanced trees)

Plu. w/ runoff

Possible Winner
NP-complete
(Bartholdi & Orlin, 1991)
P2
P3
NP-complete

4

NP-complete
NP-complete
NP-complete
NP-complete

4

NP-complete

4

4
4
4

NP-complete (unique winner)
P (co-winner)

Necessary Winner
coNP-complete
(Bartholdi & Orlin, 1991)
P2
P3
P
coNP-complete
P
P
coNP-complete

4

coNP-complete

4

4

P (unique winner)
coNP-complete (co-winner)

4

Table 1: Summary complexity possible/necessary winner problems respect
common voting rules. Unless otherwise mentioned, results depend
whether consider unique-winner co-winner version problem.

1. earlier paper (Konczak & Lang, 2005) studied problems positional scoring rules, claimed
problems polynomial-time solvable positional scoring rules; however, subtle
mistake proofs. show possible winner problem fact NP-complete
positional scoring rules. give correct proof necessary winner problem indeed
polynomial-time solvable positional scoring rules.
2. Easy prove; proved work Betzler Dorn (2010), follows bribery algorithm
Faliszewski (2008).
3. Easy prove, proved work Betzler Dorn (2010).
4. Hardness results hold even number unknown pairs partial order
constant.

28

fiDetermining Possible Necessary Winners Given Partial Orders

paper significant extension conference version work (Xia &
Conitzer, 2008): extended version includes proofs, results voting trees,
plurality runoff, k-approval new. conference version mention
plurality veto; results easy follow known results, explained
footnotes table.
1.2 Subsequent Work since Conference Version
Since conference version work, complexity possible winner problem
respect positional scoring rule fully characterized (Betzler & Dorn,
2010; Baumeister & Rothe, 2010). theorems Betzler Dorn (2010), possible
winner problem NP-complete respect Borda k-approval. Still, hardness
results directly imply hardness results obtained positional scoring rules
paperwe prove hardness results Borda k-approval hold even
number undetermined pairs vote 4.
Also, special case possible necessary winner problems new alternatives
join election voters preferences initial alternatives fully
revealed proposed studied work Chevaleyre, Lang, Maudet,
Monnot (2010). shown possible-winner-with-new-alternatives problem
NP-complete maximin, Copeland (Xia, Lang, & Monnot, 2011), k-approval
k 3 least 3 new alternatives (Chevaleyre, Lang, Maudet, Monnot, & Xia,
2010); problem P Bucklin (when k 3) (Xia, Lang, & Monnot, 2011), Borda,
k-approval (when k 2 two new alternatives) (Chevaleyre,
Lang, Maudet, Monnot, & Xia, 2010).
Meanwhile, number new results complexity unweighted coalitional
manipulation problem obtained. Specifically, unweighted coalitional
manipulation problem shown NP-hard Copeland 0 1
(except = 12 ; results even hold two manipulators) (Faliszewski et al., 2008,
2010),5 maximin (two manipulators) ranked pairs (one manipulator) (Xia et al., 2009),
specific positional scoring rule (two manipulators) (Xia, Conitzer, & Procaccia, 2010).
mentioned before, unweighted coalitional manipulation problem special case
possible winner problem studied paper (where partial orders linear
orders others empty); result, NP-hardness results unweighted
coalitional manipulation problem imply NP-hardness possible winner problem
rules. note NP-hardness results proved paper (except
possible unique winner problem plurality runoff) hold even partial
order, number pairs alternatives order unknown constant.
Therefore, subsequent research unweighted coalitional manipulation
completely imply NP-hardness results prove paper possible
winner problem Copeland, maximin, ranked pairs, positional scoring rules.
Elkind et al. (2009) showed possible winner problem reduces swap
bribery problem, interested party pay voters swap adjacent alternatives
5. Faliszewksi et al. (2008) study case weighted coalitional manipulation three alternatives
Copeland, show hard problem depends whether consider
unique-winner co-winner variant problem. study weighted votes paper.

29

fiXia & Conitzer

rankings, price swap two alternatives depends identity
alternatives identity voter. is, (with respect fixed voting rule)
computational complexity swap bribery problem least high
possible winner problem, terms polynomial-time reductions.
complexity possible winner problem studied fixedparameter tractability perspective, parameters number alternatives,
number voters, number unknown pairs vote (Betzler, Hemmann, &
Niedermeier, 2009). Finally, counting version possible winner problem
studied (Bachrach, Betzler, & Faliszewski, 2010).

2. Preliminaries
Let C = {c1 , . . . , cm } set alternatives (or candidates). linear order C
transitive, antisymmetric, total relation C. set linear orders C
denoted L(C). n-voter profile P C consists n linear orders C. is,
P = (V1 , . . . , Vn ), every n, Vi L(C). set profiles C denoted
P (C). remainder paper, denotes number alternatives n denotes
number voters.
voting rule r function set profiles C set (nonempty)
subsets C, is, r : P (C) 2C \ . following common voting rules.
1. (Positional) scoring rules: positional scoring rule defined scoring vector
~sm = (~sm (1), . . . , ~sm (m)) non-negative integers, ~sm (1) ~sm (m).
vote V L(C) c C, let s(V, c) = ~smP
(j), j rank
c V . profile P = (V1 , . . . , Vn ), let s(P, c) = ni=1 s(Vi , c). rule
select c C s(P, c) maximized. examples positional scoring rules
Borda, scoring vector (m 1, 2, . . . , 0), plurality,
scoring vector (1, 0, . . . , 0), veto, scoring vector (1, . . . , 1, 0),
k-approval (1 k 1), scoring vector (1, . . . , 1, 0, . . . , 0).
| {z }
k

paper, assume scoring vector computed polynomial time.
2. Copeland: two alternatives ci cj , simulate pairwise election
them, seeing many votes rank ci ahead cj , many rank cj
ahead ci . ci wins majority votes rank ci ahead cj . Then,
alternative receives one point win pairwise election. (Typically,
alternative receives half point pairwise tie, matter
results.) winner alternative highest score.
3. Maximin (a.k.a. Simpson): Let NP (ci , cj ) denote number votes rank ci
ahead cj profile P . winner alternative c maximizes min{NP (c, c ) :
c C, c 6= c}.
4. Bucklin: alternative cs Bucklin score smallest number k
half votes rank c among top k alternatives. winner alternative
smallest Bucklin score. (Sometimes, ties broken number
30

fiDetermining Possible Necessary Winners Given Partial Orders

votes rank alternative among top k position, simplicity
consider tiebreaking rule here.)
5. Ranked pairs: rule first creates entire ranking alternatives. NP (ci , cj )
defined maximin rule. step, consider pair alternatives
ci , cj previously considered; specifically, choose remaining
pair highest NP (ci , cj ). fix order ci > cj , unless contradicts
previous orders fixed (that is, violates transitivity). continue
considered pairs alternatives (hence full ranking). alternative
top ranking wins.
6. Voting trees: voting tree binary tree leaves, leaf associated
alternative. round, pairwise election alternative
ci sibling cj : majority voters prefer ci cj , cj eliminated,
ci associated parent two nodes; similarly, majority
voters prefer cj ci , ci eliminated, cj associated parent
two nodes. alternative associated root tree (wins
rounds) wins. Balanced voting trees known cup, knockout tournaments
single-elimination tournaments.
7. Plurality runoff: rule two steps. first step, alternatives except
two ranked top position times eliminated,
votes transfer second round, plurality rule (a.k.a. majority rule
case two alternatives) used select winner.
8. Single transferable vote (STV): election rounds. round, alternative gets minimal plurality score drops out, removed
votes (so votes alternative transfer another alternative next
round). last-remaining alternative winner.
Given profile P , pairwise score difference DP (c, c ) alternatives c c defined
follows.
DP (c, c ) = NP (c, c ) NP (c , c)
subscript P omitted risk confusion. linear order V
C, let DV denote pairwise score difference function profile consists
single vote V . is, DV = D{V } . follows definition D(c, c ) = D(c , c).
note although maximin, ranked pairs, voting trees based pairwise scores,
computed pairwise score differences way,
profile P n votes, pair alternatives (c, c ), DP (c, c ) = 2NP (c, c ) n.
adopt parallel-universes tiebreaking (Conitzer, Rognlie, & Xia, 2009) define
winning alternatives rules multiple rounds (i.e., ranked pairs, voting
trees, plurality runoff, STV). is, alternative c winner
exists way break ties steps c winner. example,
alternative c winner voting tree, exists way break ties
pairwise elections voting process, c wins. partial order C reflexive,
transitive, antisymmetric relation C. say linear order V extends partial order
V .
31

fiXia & Conitzer

Definition 1 linear order V C extends partial order C every pair
alternatives c, c C, c c c V c .
Throughout paper use following notation. Let V denote linear order C;
let denote partial order C; let P denote profile linear orders; let Pposet denote
profile partial orders.

3. Possible/Necessary Winners
ready define possible (necessary) winners, first introduced
Konczak Lang (2005).
Definition 2 Given profile partial orders Pposet = (O1 , . . . , ) C, say
alternative c C is: (1) possible winner exists P = (V1 , . . . , Vn ) Vi
extends Oi , r(P ) = {c}; (2) necessary winner every P = (V1 , . . . , Vn )
Vi extends Oi , r(P ) = {c}; (3) possible co-winner exists P = (V1 , . . . , Vn )
Vi extends Oi , c r(P ); (4) necessary co-winner P = (V1 , . . . , Vn )
Vi extends Oi , c r(P ).
Example 1 Let three alternatives {c1 , c2 , c3 }. Three partial orders illustrated
Figure 1. Let Pposet = (O1 , O2 , O3 ). c1 possible (co-)winner Pposet respect
plurality, complete O1 adding c2 c3 , complete O2 adding c1 c2 ,
complete O3 adding c1 c2 c1 c3 ; then, c1 winner. However, c1
necessary (co-)winner, complete O1 adding c2 c3 , complete O2
adding c2 c1 , complete O3 adding c2 c1 c1 c3 ; then, c2 winner.
O1

c2

c1

O2

O3
c1

c3

c1
c3

c2

c2

c3

Figure 1: Partial orders.

However, let Pposet
= (O1 , O1 , O2 ), c1 (only) necessary winner,
c1 ranked first least two votes.

Now, define computational problems studied paper:
Definition 3 Define problem Possible Winner (PW) respect voting rule r be:
given profile Pposet partial orders alternative c, asked whether c
possible winner Pposet respect r.
Necessary Winner (NW), Possible co-Winner (PcW), Necessary co-Winner (NcW)
defined similarly.
natural first question problems related other. turns
(holding voting rule fixed) exists polynomial-time Turing reduction
NW PcW. is, PcW P, NW P.
Proposition 1 voting rule r, computing PcW respect r P,
computing NW respect r P .
32

fiDetermining Possible Necessary Winners Given Partial Orders

Proof. r never outputs , alternative c necessary unique winner respect
r every alternative (d 6= c), possible co-winner. Therefore,
polynomial-time algorithm solves PcW problem respect r,
solve NW problem, simply run algorithm every alternative (d 6= c).
6= c possible co-winner, output c necessary unique winner;
otherwise, output c necessary unique winner.
2
similar relationship PW NcW problems. true
alternative (d 6= c) possible unique winner, c necessary co-winner.
However, possible even alternative (d 6= c) possible unique winner, c
still necessary co-winner. example, let Pposet = (c2 c3 c1 , c3 c2 c1 ).
Pposet already composed linear orders, one extension (itself).
follows possible unique winner Pposet respect plurality, clearly
c1 necessary co-winner. generally, following proposition,
says pair different problems X, {PW, PcW, NW, NcW}, answer
cannot computed answers X alternatives, unless X =NW
=PcW. (This holds even rule plurality).
Proposition 2 Suppose 3. Let X, {P W, P cW, N W, N cW } (1) X6=Y
(2) X6=PcW Y6=NW. exist two profiles Pposet Pposet partial orders (with
|Pposet | = |Pposet |), (1) every alternative c, answers X respect
plurality Pposet Pposet , (2) exists alternative
answers respect plurality Pposet Pposet different.
Proof. proof construction. partial order C, let op(O) denote
set alternatives c exists least one extension c
top position. set C C, define OC arbitrary partial order
op(OC ) = C . simplicity, write Oc O{c } . example, = 3, let
Oc1 = O{c1 } = c1 c2 c3 , is, Oc1 linear order. another example, O{c1 ,c2 }
partial order obtained [c1 c2 c3 ] removing c1 c2 .
Let = c1 . next specify profiles Pposet Pposet following (exhaustive)
list cases (X, ).
(PW, NW) (PW, NcW). (1) Let Pposet composed 5 copies Oc1 . c1
necessary unique/co-winner. (2) Let Pposet = (Oc1 , Oc2 , Oc2 , O{c1 ,c3 } , O{c1 ,c3 } ). c1
unique winner one extension, {c1 , c2 } winners two extensions,
{c2 , c3 } winners one extension. Therefore, c1 necessary unique/cowinner. note c1 possible unique winner profiles.
(PW, PcW). (1) Let Pposet = (Oc1 , Oc2 ). {c1 , c2 } winners extension, means c1 possible co-winner. (2) Let Pposet = (Oc2 , Oc3 ).
{c2 , c3 } winners extension, means c1 possible
co-winner. note possible unique winner either profile.
(NcW, NW). (1) Let Pposet = (Oc1 , Oc1 ). c1 winner extension,
means c1 necessary unique winner. (2) Let Pposet = (Oc1 , O{c1 ,c2 } ).
c1 winner one extension, {c1 , c2 } winners
33

fiXia & Conitzer

extension, means c1 necessary unique winner. note c1
necessary co-winner profiles.
(PcW, PW) (PcW, NcW). (1) Let Pposet = (O{c1 ,c2 } , O{c1 ,c2 } ). c1 unique
winner one extension, c2 unique winner one extension, {c1 , c2 }
winners two extensions. Therefore, c1 possible unique winner (meanwhile, c1
necessary co-winner). (2) Let Pposet = (Oc1 , Oc2 ). {c1 , c2 } winners
extension, means c1 possible unique winner (meanwhile,
c1 necessary co-winner). note c1 c2 possible co-winners
profiles.
(NW, PW), (NW, PcW), (NcW, PW), (NcW, PcW). (1) Let Pposet = (O{c1 ,c2 } , O{c1 ,c2 } ).
c1 unique winner one extension, c2 unique winner one extension,
{c1 , c2 } winners two extensions. Therefore, c1 possible unique/cowinner. (2) Let Pposet = (O{c2 ,c3 } , O{c2 ,c3 } ). c2 unique winner one extension,
c3 unique winner one extension, {c2 , c3 } winners two extensions. Therefore, c1 possible unique/co-winner. note
necessary unique/co-winner either profile.
(NW, NcW). (1) Let Pposet = (Oc1 , Oc2 ). {c1 , c2 } winners extension, means c1 necessary co-winner. (2) Let Pposet = (Oc2 , O{c1 ,c2 } ).
{c1 , c2 } winners one extension, c2 unique winner
extension, means c1 necessary co-winner. note
necessary unique winner either profile.
2

4. Hardness Results
section, prove PW (PcW) NP-complete respect class positional
scoring rules, Copeland, maximin, Bucklin, ranked pairs, voting trees; NW (NcW)
coNP-complete respect Copeland, ranked pairs, voting trees; PW NPcomplete NcW coNP-complete respect plurality runoff. positional
scoring rules, show PW hard positional scoring rulesin fact,
plurality veto, PW easy; rather, give sufficient condition positional
scoring rule PW hard. notably, Borda satisfies condition. kapproval satisfy condition, provide distinct proof PW (PcW)
respect k-approval (k 2).6 Similarly voting trees, provide necessary
condition hardness results hold, notably, balanced voting trees
satisfy condition. results (except one PW respect plurality
runoff) hold even partial orders almost linear orders. is,
number undetermined pairs partial order bounded constant.
6. conference version paper (Xia & Conitzer, 2008), Betzler Dorn proved dichotomy
theorem possible winner problems respect positional scoring rules (Betzler & Dorn, 2010).
According theorem, PW respect k-approval (k 2) NP-complete. paper,
prove problem NP-complete, even number undetermined pairs vote
4.

34

fiDetermining Possible Necessary Winners Given Partial Orders

hardness results proved reductions exact 3-cover (X3C)
problem, except result k-approval, proved reduction 3-SAT.
X3C 3-SAT known NP-complete (Garey & Johnson, 1979). two problems
defined follows.
Definition 4 (X3C) given set V = {v1 , . . . , vq } collection = {S1 , . . . , St },
t, Si = {vl(i,1) , vl(i,2) , vl(i,3) } V, 1 l(i, 1), l(i, 2), l(i, 3) q.
asked whether cover elements V non-overlapping sets S.
Definition 5 (3-SAT) given formula conjunctive normal form: F = C1
. . . Ct binary variables x1 , . . . , xq , j t, Cj called clause.
j t, Cj = lj1 lj2 lj3 , {1, 2, 3}, lj called literal, exists
q either lj = xi lj = xi . asked whether exists valuation
variables F true.
proof, election instance construct arbitrary X3C (or 3-SAT)
instance consists two parts. first part set partial orders encode X3C
(or 3-SAT) instance.7 example, PW reductions X3C, first part
structured follows: order c win, alternative c needs
placed high position extensions partial orders least number
times. However, partial orders, set three alternatives
put c high position extension partial order, three
alternatives must ranked even higher positions (that is, c pushes three
alternatives extension). sets three alternatives must sometimes
pushed correspond sets three elements X3C instance. PW instance
set way X3C-element alternative pushed c two
different votes first part, c cannot win. Thus, sets alternatives
push must disjoint, instance set way need put c
high position often enough pushed-up 3-sets actually must constitute exact
cover. second part set linear orders (that is, second part, everything
determined) whose purpose is, informally stated, adjust scores alternatives
get properties described.
First introduce notation represent set pairwise comparisons
linear order.
Definition 6 set {a1 , . . . , al }, let O(a1 , . . . , al ) = {(ai , aj ) : < j}.
is, O(a1 , . . . , al ) set ordered pairs consistent linear order a1
. . . al . example, O(a, b, c) = {(a, b), (b, c), (a, c)}. following notation
frequently used proofs.
Definition 7 set partition A1 , . . . , Ak A, let O(A1 , . . . , Ak ) denote
arbitrary linear order consistent A1 A2 . . . Ak .
7. Typically, define partial orders first defining linear orders removing
pairwise ordering constraints.

35

fiXia & Conitzer

proofs make use notation use fact O(A1 , . . . , Ak ) consistent
A1 . . . Ak , order within Ai (i k) matter. example,
let = {a, b, c, d}, A1 = {a}, A2 = {b, c}, A3 = {d}. two linear orders
consistent A1 A2 A3 . b c c b d. O(A1 , A2 , A3 )
denote either them, e.g., O(A1 , A2 , A3 ) = b c d. Sometimes use
notation Others denote set objects mentioned context.
example, O(A1 , A2 , A3 ) = O(Others, A2 , A3 ) = O(A1 , Others, A3 ) = O(A1 , A2 , Others).
Usually, positional scoring rule defined fixed number alternatives (that is,
fixed). hold fixed, exist polynomial-time algorithms PW
NW (Walsh, 2007; Conitzer et al., 2007). However, positional scoring rules
defined number alternativesfor example, Borda, plurality, veto.
positional scoring rules, number alternatives bounded, indeed,
prove PW always easy respect rules. study complexity
social choice problems involve growing number alternatives, necessary
associate scoring vector every natural number alternatives. remainder
paper, positional scoring rule r consists sequence scoring vectors {~s1 , ~s2 , . . .}
N, ~si scoring vector alternatives. next theorem provides
sufficient condition positional scoring rule PW NP-complete. paper,
PW/PcW problems NP, NW/NcW problems coNP.
follows fact that, given extension partial orders linear orders,
compute winner(s) polynomial-time rules studied paper.
mind, prove hardness direction NP-completeness/coNP-completeness
proofs. exist rules computing winner(s) NP-hard, example,
Dodgsons rule (Bartholdi, Tovey, & Trick, 1989b; Hemaspaandra, Hemaspaandra, & Rothe,
1997) Youngs rule (Rothe, Spakowski, & Vogel, 2003), study rules
computing winners hard here.
Theorem 1 Let r positional scoring rule scoring vectors {~s1 , ~s2 , . . .}. Suppose
exists polynomial function f (x) x N, exist l k
x l f (x) k l 4, satisfy following conditions:
(1) ~sl (k) ~sl (k + 1) = ~sl (k + 1) ~sl (k + 2) = ~sl (k + 2) ~sl (k + 3) > 0,
(2) ~sl (k + 3) ~sl (k + 4) > 0,
Then, PW PcW NP-complete respect r, even number
undetermined pairs vote 4.
Proof. Given X3C instance V = {v1 , . . . , vq }, = {S1 , . . . , St }, let q + 3 l f (q + 3)
(where q number elements X3C instance) satisfy two conditions
assumption, let k l 4 satisfy ~sl (k) ~sl (k + 1) = ~sl (k + 1) ~sl (k + 2) =
~sl (k + 2) ~sl (k + 3) > 0, ~sl (k + 3) ~sl (k + 4) > 0. Let K1 = ~sl (k) ~sl (k + 1)
K2 = ~sl (k + 3) ~sl (k + 4). construct PW instance follows.
Alternatives: C = {c, w, d} V A, = {a1 , . . . , alq3 } auxiliary
alternatives.
First part (P1 ) profile: j t, choose arbitrary set Bj C\(Si {w, d})
36

fiDetermining Possible Necessary Winners Given Partial Orders

|Bj | = k 1. define partial order Oj follows.
Oj = O(Bj , w, Si , d, Others) \ [{w} (Sj {d})]
is, Oj partial order agrees Bj w Sj Others, except
pairwise relations (w, Sj ) (w, d) determined (and 4
undetermined relations). Let P1 = {O1 , . . . , Ot }.
Second part (P2 ) profile: first give properties need P2 satisfy;
show construct P2 polynomial time later proof. votes P2
linear orders. Let P1 = {O(Bj , w, Sj , d, Others) : j t}. is, P1 (|P1 | = t)
extension P1 (in fact, P1 set linear orders started obtain P1 ,
removing pairwise relations). P2 set linear orders
following holds Q = P1 P2 :
(1) every q, ~sl (Q, c) ~sl (Q, vi ) = 2K1 , ~sl (Q, w) ~sl (Q, c) =

q
3

(3K1 + K2 ) K2 .

(2) every q, scores vi w, c higher alternatives
extension P1 P2 .
(3) P2 size polynomial + q.
Suppose exists extension P1 P1 c winner P1 P2 .
q, vi ranked higher w P1 , otherwise total
score vi higher equal total score c. recall score
difference w c P1 P2 3q (3K1 + K2 ) K2 . Therefore, exists j
extension Oj , w ranked c, ranked alternative
Sj , must exist alternative V ranked w least two times
P1 , contradicts assumption c winner. follows order
total score w lower total score c, w ranked lower least
q

3 times. Let denote set subscripts votes P1 w ranked lower
d; then, SI = {Si : I} solution X3C instance.
Conversely, given solution X3C instance, let set indices Si
included X3C. Then, solution possible winner instance obtained
ranking ahead w exactly votes subscripts I. Therefore, c possible
winner exists solution X3C problem, means PW
PcW NP-complete respect positional scoring rules satisfy conditions
stated theorem.
possible co-winner, replace (1) following condition.
(1) every q, s(Q, c) s(Q, vi ) = K1 , s(Q, w) s(Q, c) = 3q (3K1 + K2 ).
Next, show construct profile P2 satisfies three conditions.
P2 consists following three parts.
first part, P2 . Let MV denote cyclic permutation among V {c, w}.
is, MV = c w v1 v2 . . . vq c. j N, e
V {c, w}, let MV0 (e) = e, MVj (e) = MV (MVj1 (e)). first part P2
P2 = MV (P1 ) MV2 (P1 ) . . . MVq+1 (P1 ). follows e, e V {c, w},
~sl (P1 P2 , e) = ~sl (P1 P2 , e ).
37

fiXia & Conitzer

second part, P2 . Choose arbitrary set B C\{d, w, c} |B| = k1,
arbitrary set C \ (B {d, w}) |A | = 3. define following
partial orders.
V1
V2
V3
V4

= O(B, d, w, c, Others),
= O(B, d, c, w, Others),
= O(B, d, , w, Others),
= O(B, , d, w, Others),

V1
V2
V3
V4

= O(B, c, w, d, Others)
= O(B, w, c, d, Others)
= O(B, w, , d, Others)
= O(B, , w, d, Others)

P2 defined follows.
P2 ={V1 , V2 , MV (V1 ), MV (V2 ), . . . , MVq+1 (V1 ), MVq+1 (V2 )}
q
{V3 , MV (V3 ), . . . , MVq+1 (V3 )} {V4 , MV (V4 ), . . . , MVq+1 (V4 )}
3
q
q
{V3 , MV (V3 ), . . . , MVq+1 (V3 )} represents copies {V3 , MV (V3 ), . . . , MVq+1 (V3 )}.
3
3
Putting P2 P2 together, condition (1) description P2 satisfied.
third part, P2 . P2 defined way P2 , total scores
pair alternatives V {c, w} same, total score alternative
V {c, w} significantly higher total score alternative {d}.
Let MO cyclic permutation among {d}. is, let MO = a1
a2 . . . alq3 d. Let V5 = O(V, c, w, Others). define third part P2
follows.
P2 = (|P1 P2 P2 | + 1) {MVi (MOj (V5 )) : q + 2, j l q 2}
note |P1 P2 P2 | + 1 polynomial + q. Therefore, size P2
polynomial + q.
2
Theorem 1 provides sufficient condition positional scoring rules PW PcW
NP-complete. applied prove NP-completeness PW PcW Borda,
following corollary shows.
Corollary 1 PW PcW NP-complete respect Borda, even number
undetermined pairs vote 4.
Proof. l N, scoring vector ~sl Borda (l 1, l 2, . . . , 0). let
f (x) = x, l = x, k = l 4, conditions Theorem 1 satisfied,
claim follows.
2
Theorem 1 apply k-approval. noted Table 1, possible
necessary winner problems respect plurality (1-approval) P. next show
fixed k N k 2, PW PcW respect k-approval NPcomplete.
Theorem 2 fixed natural number k 2, PW PcW NP-complete
respect k-approval, even number undetermined pairs vote
4.
38

fiDetermining Possible Necessary Winners Given Partial Orders

Proof. first prove NP-hardness PW respect 2-approval. Then, show
extend proof k N, k 2.
prove NP-hardness reduction 3-SAT. Given instance 3-SAT,
q variables x1 , . . . , xq formula F = C1 . . . Ct , construct
instance PW respect 2-approval follows. Without loss generality, assume
q + 2 (generally, fixed k N, assume q + k),
clause F , variable appears once.
Alternatives: C = {c} C X X1 X1 . . . Xq Xq D1 D1 . . . Dq Dq ,
C = {c1 , . . . , ct }, X = {x1 , . . . , xq , x1 , . . . , xq }, q,
Xi = {x1i , . . . , xti , x1i , . . . , xti }, Xi = {x1i , . . . , xti , x1i , . . . , xti };
Di = {d1i , . . . , dti }, Di = {d1i , . . . , dti }.
words, C represents set clauses F ; xi xi represent values
Boolean variable xi take; Xi (respectively, Xi ) represents set duplicates
xi (respectively, xi ); Di (respectively, Di ) represents set auxiliary alternatives
associated xi (respectively, xi ).
First part P1 profile: q, let Vi = O(c, xi , xi , Others).
Then, obtain Oi removing (xi , xi ) Vi . is, extension Oi ,
c must top position, one xi xi must second position
(and other, third). see later proof two extensions
Oi correspond two valuations variable xi , i.e., xi ranked
second position (while xi ranked third position) corresponds xi = f alse.
q, define following linear orders.
Vi1 = O(xi , d1i , x1i , x1i , Others)
2 j t, Vij = O(xij1 , dji , xji , xji , Others)
Then, obtain Oi1 Vi1 removing {xi , d1i } {x1i , x1i }; 2 j t,
obtain Oij Vij removing {xij1 , dji } {xji , xji }. define Vij, Oij,
similarly adding alternative explicitly written definition Vij
Oij , respectively (that is, alternatives Others). example,
Vi1, = O(xi , d1i , x1i , x1i , Others).
j t, let fj : X X1 X1 . . . Xq Xq mapping
x X, fj (x) obtained x adding j superscript
x. example, fj (x1 ) = xji fj (x2 ) = xj2 . j t, let Wj =
O(c, fj (lj1 ), fj (lj2 ), fj (lj3 ), Others). Then, obtain Qj Wj removing
{fj (lj1 ), fj (lj2 ), fj (lj3 )} {fj (lj1 ), fj (lj2 ), fj (lj3 )}
is, extension Qj , c must top position, one {fj (lj1 ), fj (lj2 ),
fj (lj3 )} must second position. see extensions Qj correspond Cj (the jth clause) satisfied valuation x1 , . . . , xq .
let P1 = {O1 , . . . , Oq } {Oij , Oij, : q, j t} {Qj : j t}.
39

fiXia & Conitzer

Second part P2 profile: profile P alternative c , let
s2 (P, c ) denote score c P , 2-approval. is, s2 (P, c ) number
times c ranked top two positions P . let P2 arbitrary
profile linear orders satisfies following conditions.
s2 (P2 , c) = 0.
every q every j t, s2 (P2 , xi ) = s2 (P2 , xi ) = s2 (P2 , xji ) =
s2 (P2 , xji ) = s2 (P2 , xji ) = s2 (P2 , xji ) = q + 2.
c mentioned above, s2 (P2 , c ) 1.
+ q 2, P2 well-defined |P2 | bounded polynomial q
(we try fit q + 2 copies {xi , xi , xji , xji , xji , xji : q, j t} top two
positions (q + 2)(2q + 4qt)/2 = q(q + 2)(2t + 1) votes). note number
undetermined pairs vote P1 P2 4.
Suppose feasible solution 3-SAT instance. Let g denote valuation
x1 , . . . , xq F satisfied. define extension P1 P2 follows.
every q, g(xi ) = true, define following extensions partial
orders P1 .
Let Vi extension Oi xi ranked second position.
Let Vi1 extension Oi1 xi d1i ranked top two
positions; let Vi1, extension Oi1, x1i x1i ranked
top two positions.
every 2 j t, let Vij extension Oij xij1 dji
ranked top two positions.
every 2 j t, let Vij, extension Oij, xji xji
ranked top two positions.
every q, g(xi ) = f alse, define following extensions (which
similar extensions case g(xi ) = true).
Let Vi extension Oi xi ranked second position.
Let Vi1, extension Oi1, xi d1i ranked top two
positions; let Vi1 extension Oi1 x1i x1i ranked top
two positions.
every 2 j t, let Vij, extension Oij, xij1 dji
ranked top two positions.
every 2 j t, let Vij extension Oij xji xji ranked
top two positions.
every j t, Cj satisfied xi = true (respectively, xi = f alse)
q, then, let Wj extension Qj xji (respectively, xji ) ranked
second position.
Let P = {V1 , . . . , Vq } {Vij , Vij, : q, j t} {W1 , . . . , Wt } P2 .
40

fiDetermining Possible Necessary Winners Given Partial Orders

checked P \ P2 , every alternative c (c 6= c) ranked two top
positions once. recall s2 (P2 , c ) q + 2 s2 (P , c) = q + t. Therefore,
c unique winner.
Next, show convert feasible solution PW feasible solution
3-SAT instance. Let P extension c unique winner. Let g
valuation q, g(xi ) = true extension Oi P ,
xi ranked second position. prove following claim show g,
clauses satisfied.
Claim 1 q, g(xi ) = true (respectively, g(xi ) = f alse), every j t,
xji xji (respectively, xji xji ) ranked top two positions extension
Oij, (respectively, Oij ) P .
Proof. q, prove claim induction j. prove case
g(xi ) = true; case g(xi ) = f alse proved similarly.
Suppose g(xi ) = true. definition, xi ranked second position extension Oi P . recall s2 (P2 , xi ) = q + 2 = s2 (P , c) 2. c
unique winner, xi ranked top two positions extension P1 \ {Oi }.
Specifically, xi ranked top two positions extension Oi1, . recall
xi d1i Oi1, . Therefore, d1i ranked top two positions
extension Oi1, (otherwise, xi would ranked top two positions, immediately prevents c unique winner). note xi , d1i , x1i , x1i
four alternatives ranked top two positions extension
Oi1, . follows extension Oi1, , x1i , x1i ranked top two positions.
means claim holds j = 1.
Suppose claim holds j j j . Following similar reasoning
case j = 1, prove claim holds j = j + 1. precisely,


induction hypothesis, xji ranked top two positions extension Oij , .


Therefore, xji ranked top two positions extension Oij +1, (otherwise

score xji least large score c, means c unique




winner). recall xji dji +1 Oij +1, . Therefore, dji +1 ranked


top two positions extension Oij +1, (otherwise xji must ranked
top two positions, immediately prevents c unique winner).




note xji , dji +1 , xji +1 , xji +1 four alternatives ranked


top two positions extension Oij +1, . follows extension Oij +1, ,


xji +1 xji +1 ranked top two positions. means claim holds
j = j + 1.
Therefore, claim holds every j t.
2
ready show g, clauses satisfied. Let j number
t. xji ranked second position extension Qj , must
g(xi ) = true. not, then, Claim 1, xji ranked top two positions
extension Oij , means xji ranked top two positions P \P2 least
twice: Oij , Qj . follows s2 (P , xji ) q+t2+2 q+t = s2 (P , c),
contradicts assumption c unique winner. Similarly, extension
41

fiXia & Conitzer

Qj , xji ranked second position, must g(xi ) = f alse. means
g, every clause Cj satisfied valuation variable corresponds
alternative ranked second position extension Qj . Hence, F
satisfied.
PcW, simply replace s2 (P2 , xi ) = s2 (P2 , xi ) = s2 (P2 , xji ) = s2 (P2 , xji ) =
s2 (P2 , xji ) = s2 (P2 , xji ) = q + 2 definition P2 s2 (P2 , xi ) = s2 (P2 , xi ) =
s2 (P2 , xji ) = s2 (P2 , xji ) = s2 (P2 , xji ) = s2 (P2 , xji ) = q + 1.
reduction k > 2 similar case k = 2. 3-SAT instance, let
P1 P2 profile partial orders defined case k = 2. k > 2, add
|P1 P2 | (k 2) new alternatives instance, partial order P1 P2 ,
let top k 2 positions occupied new alternatives, put remaining
new alternatives bottom positions, none new alternatives ranked
top k positions once. Let P1 P2 denote profiles partial orders
obtained way. follows c possible (co-)winner P1 P2 respect
k-approval c possible (co-)winner P1 P2 respect 2-approval.
2
Theorem 3 PW PcW NP-complete NW NcW coNP-complete
respect Copeland, even number undetermined pairs vote
8.
Proof. first prove PW NcW parts, one reduction X3C. Without loss
generality, always assume X3C instance, odd = q,
not, make following changes X3C instance.

2(t q) sets
> q, add 3(t q) dummy elements v1 , . . . , v3(tq)








S1 , S1 , . . . , Stq , Stq , q, Si = {v3i2 , v3i1 , v3i }.

q > t, add q copies S1 .
q = even, add three dummy elements v1 , v2 , v3 , three copies
S1 = {v1 , v2 , v3 }.
new X3C instance, = q, odd, size instance polynomial size
old one, new X3C instance feasible solution old one
has.
Given X3C instance V = {v1 , . . . , vq }, = {S1 , . . . , St }, q = odd,
construct PW instance follows.
Alternatives: {c, w, d} V B, = {a1 , . . . , at2 }, B = {b1 , . . . , b7t }.
First part P1 profile: Let cyclic permutation among B. is, =
b1 b2 . . . b7t b1 . Let VB = b1 b2 . . . b7t . t, obtain partial
order starting O((V \ Si ), d, Si , w, c, (VB ), A), removing ordering
relationships ({d} Si ) {w, c}.
Second part P2 profile:
2q
2q
+ 1 votes: + 1 2t
+ 1, vote
3
3

consistent w c V (VB ) A.



42

fiDetermining Possible Necessary Winners Given Partial Orders





2q
q
q
2 votes: 2t
+ 2 2t 1, vote
3
3
3
consistent w c V (VB ) A.
q
q
2 votes: 2t 2t 3, vote consistent
3
3
w c V (VB ) A.

2 votes: 2t 2 2t 1, vote consistent
c w V (VB ) A.
2 votes: 2t 2t + 1, vote consistent
c V w (VB ) A.




1
1
(5t 1) votes: 2t + 2 (9t + 1), vote
2
2
consistent w c (VB ) V d.
1
1
(5t 1) votes: (9t + 3) 7t, vote
2
2
consistent (VB ) V w c.

note number undetermined pairs vote 8.
Let P1 denote profile extends P1 vote Si ranked
higher w c, is, P1 = {O((V \ Si ), d, Si , w, c, B, A) : t}. make
following observations pairwise election:
w always defeats c, d, B, A, q, DP1 P2 (vi , w) = 3.
c always defeats V, B, always loses A, DP1 P2 (d, c) =

2q
1.
3

B always defeats d, V, A, due cyclic order profile, bj always defeats
bj+1 , . . . , bj+ 1 (7t1) , N, bi = bi+7t , always loses
2
alternatives B.
Therefore, P1 P2 , total number pairwise elections alternative is:
w wins |B| + |A| + 2 = 8t,
c wins |V| + |B| = q + 7t = 8t,
d, v V, wins 8t + q + 1 7t = + q + 1,
lose B,
b B wins 12 (|B| 1) + |A| + |V| + 1 = 12 (9t + 2q 3) pairwise elections.
recall X3C instance = q, means P1 P2 , winners
{w, c}. order c unique winner, possibility c win
q
pairwise election putting c least votes P1 . However,
3
put c ahead vote corresponding Si , v Si pairwise score difference
w v increases 2. Moreover, w v v V least twice
43

fiXia & Conitzer

extension P P1 , DP P2 (v, w) 1, means w defeats v pairwise
election. case, w would win 8m + 1 pairwise elections, means c cannot
unique winner. Therefore, c possible unique winner exists
q
extension P P1 c exactly votes P , corresponding Si
3
overlap, is, constitute exact cover V. means PW
solution X3C problem solution. PW NP-complete.
reduction, w would always co-winner c unique
winner, NcW coNP-complete. PcW NW, need slightly modify
reduction PW NcW: let |A| = 1 keep rest unchanged. Then, w
initially win 8t + 1 pairwise elections, c possible co-winner (w necessary
unique winner) exists feasible solution X3C instance.
2
Theorem 4 PW PcW NP-complete respect Bucklin, even number
undetermined pairs vote 16.
Proof.
First, give reduction X3C PW. Given X3C instance V =
{v1 , . . . , vq }, = {S1 , . . . , St }, construct PW instance follows.
Alternatives: W V {c, w}, W = {w1 , . . . , wq+1 }, = {d1 , . . . , dq+1 }.
First part P1 profile: t, start O(w1 , . . . , wq+1 , Si , c, (V \
Si ), D), obtain partial order removing relations
{wq2 , wq1 , wq , wq+1 } (Si {c})
Second part P2 profile:
copies V c Others,
q
1 copies V w c Others,
3
q
+ 2 copies w1 Others.
3
note number undetermined pairs vote 16. Notice
2q
q
|P1 P2 | = 2t +
+ 1, w1 ranked within top q + 2 positions + + 2 votes
3
3
extension P1 P2 . Therefore, order c win, c wq2 must hold
q
least votes extension P1 . However, whenever put c ahead wq2 vote,
3
forcing alternatives Si corresponding vote ranked within top q
positions. v V ranked within top q positions least twice extension
q
P1 , overall ranked within top q positions least + + 1 votes,
3
means c unique winner.
exists feasible solution X3C problem, put c ahead wq2
votes corresponding solution, obtain extension P1 P1
q
c ranked within top q + 1 positions votes, v V, v ranked within
3
top q (and, fact, first q + 1) positions once. result, c unique winner
profile P1 P2 , alternative ranked within top q + 1 positions
44

fiDetermining Possible Necessary Winners Given Partial Orders

q
least + votes. Conversely, c unique winner profile P1 P2 ,
3
P1 corresponds feasible solution X3C problem. Therefore, PW respect
Bucklin NP-complete.
q
PcW, need modify reduction slightly, changing last + 1 votes
3
[D w1 Others] [d1 . . . dq w1 Others]. case, Bucklin score
w1 q + 1, means c best hope co-winner. result, PcW
NP-complete.
2
prove hardness results maximin, ranked pairs, voting trees, present
two helpful lemmas. first show given pair alternatives c, c , exist two
linear orders increase D(c, c ) two keeping pairwise score differences
unchanged. lemma used previously (McGarvey, 1953; Conitzer & Sandholm,
2005a). use technique second (score-adjusting) part reductions
maximin, ranked pairs, voting trees.
Lemma 1 Given profile P pair different alternatives c, c , let remaining
alternatives {c1 , . . . , cm2 }. Let P profile consisting P plus following two
votes:
1. [c c c1 . . . cm2 ],
2. [cm2 . . . c1 c c ].
Then, DP (c, c ) = DP (c, c ) + 2, alternatives d, {d, } =
6 {c, c },
DP (d, ) = DP (d, ).
lemma tells us pairwise score differences changed almost arbitrarily.
constraint parity pairwise score differences remains same.
following lemma direct corollary.
Lemma 2 (The main theorem McGarvey, 1953) Given profile P skewsymmetric function F : C C Z (that is, F (c1 , c2 ) = F (c2 , c1 ) c1 , c2 ),
pairs alternatives c, c C, F (c, c ) DP (c, c ) even (or odd),
exists profile P
1. |P |

1P


(|F (c, c ) DP (c, c )| + 1),
2 c,c

2. DP P = F .
is, skew-symmetric function F pairs alternatives (c, c )
(with c 6= c ), F (c, c ) DP (c, c ) parity, change pairwise score
1P


differences DP F adding
(|F (c, c )DP (c, c )|+1) votes P .
2 c,c
Here, factor 12 comes fact pair alternatives c c , absolute
value difference F DP counted twice, i.e., |F (c, c ) DP (c, c )| =
|F (c , c) DP (c , c)|. fact, possible obtain even tighter bounds needed size
P (Erdos & Moser, 1964), purpose NP-hardness proofs
matter.
45

fiXia & Conitzer

ready prove hardness results maximin ranked pairs.
mentioned beginning section, hardness proofs section, profile
consists P1 P2 , P1 set partial orders used encode X3C instance,
P2 set linear orders used adjust scores alternatives. maximin,
ranked pairs, voting trees, P2 used adjust pairwise score differences.
explicitly give P2 reductions rules. Instead, present properties P2 ,
appeal Lemma 2 assert P2 exist, constructed polynomial
time.
Theorem 5 PW PcW NP-complete respect maximin, even number undetermined pairs vote 4.
Proof. first prove PW NP-complete. Given X3C instance V = {v1 , . . . , vq },
= {S1 , . . . , St }, construct PW instance follows.
Alternatives: V {c, w, w }.
First part P1 profile: t, start O(w, Si , c, (V \Si ), w ),
subsequently obtain partial order Oi removing relations {w} (Si {c}).
Second part P2 profile: according Lemma 2, P2 defined set
votes pairwise score differences {O(w, Si , c, (V \ Si ), w ) : t} P2
satisfy:
2q
2; q, D(w, vi ) = t+2; D(w , w) = D(v1 , w ) = t+4;
3
D(w , c) = 2.

(1) D(w, c) = t+

(2) pairwise scores defined (1), D(l, r) 1.
note number undetermined pairs vote 4.
Lemma 2 implies size P2 polynomial q + t.
note minimum pairwise score difference w D(w, w ) = 4;
minimum pairwise score difference w 4 = D(w , v1 ).
Suppose exists profile P1 extending P1 c wins P1 P2 . c raised
q
higher w least one 1 votes P1 , then, D(c, w) t,
3
exists q D(vi , w) (the smallest pairwise score difference vi ),
means c unique winner vi performing least well. c ranked
q
higher w least + 1 votes P1 , still D(c, w ) = + 2,
3
exists q vi ranked higher w least two votes P1 , means
D(vi , w) + 2 (the smallest pairwise score difference vi ). follows
case, c unique winner vi performing least well. Therefore,
q
way c win decrease D(w, c) raising c higher w exactly votes
3
P1 . However, time decrease D(w, c) 2 due adding c w Oi P1 ,
v Si , D(w, v) decreased two. D(w , c) = 2, decreasing D(w, c)
less 2 would raise minimum pairwise score difference c.
q, D(w, vi ) decreased 4 more, minimum pairwise score vj
46

fiDetermining Possible Necessary Winners Given Partial Orders

least + 2, means case c cannot unique winner. Therefore,
sets Si votes P1 c w cannot overlap. must least
q/3 votes, corresponding subsets Si constitute feasible solution X3C
instance.
Conversely, suppose X3C instance solution. Without loss generality, let
solution {S1 , . . . , Sq/3 }. define extension P1 P1 adding c w Oi
q/3, adding w Si > q/3. follows c unique winner
profile P1 P2 respect maximin rule. Therefore PW NP-complete.
PcW, need slightly modify reduction: replace condition
D(w, vi ) = + 2 D(w, vi ) = constructing P2 . Therefore PcW NP-complete. 2
Theorem 6 PW PcW NP-complete NW NcW coNP-complete
respect ranked pairs, even number undetermined pairs vote
8.
Proof. first prove NP-hardness PW NcW one reduction. Given X3C
instance V = {v1 , . . . , vq }, = {S1 , . . . , St }, construct PW instance follows.
Alternatives: V {c, a, b, w}.
First part P1 profile: t, start O(a, c, Si , b, Others),
subsequently obtain partial order Oi removing relations ({a, c}(Si {b})).
Second part P2 profile: according Lemma 2, P2 defined set
votes pairwise score differences {O(a, c, Si , b, Others) : t} P2
satisfy:
1. q, D(c, b) = D(w, a) = D(w, vi ) = 3t +

2q
.
3

2q
2q
2q
, D(c, w) = +
2, D(vi , c) = +
6, D(b, a) = + 2.
3
3
3
3. D(l, r) = 0 cases.
2. D(a, c) = +

note number undetermined pairs vote 8.
Lemma 2 implies size P2 polynomial q + t.
note D(c, b), D(w, a), D(w, vi ) (for every q) much larger
remaining pairwise score differences extension P1 P2 . Therefore, c b, w a,
w vi (for every q) fixed first extension P1 P2 . follows
output (a linear order C) extension P1 P2 , must c b,
w a, w vi (for every q). note way c unique
2q
winner lock b c. is, D(b, a) must least + 2 + . However,
3
whenever let b extension Oi , forcing Si c. Let P1 extension
P1 c unique winner profile P1 P2 (or, equivalently,
w co-winner profile P1 P2 ). note exists q
2q
2q
6+4 = t+
2 = D(c, w),
vi c least two votes P1 , D(vi , c) +
3
3
means w co-winner (by locking vi c c w). Therefore, P1 ,
47

fiXia & Conitzer

q
must b exactly votes, q, vi c exactly one vote.
3
naturally corresponds solution X3C instance.
Conversely, suppose X3C instance solution. Without loss generality, let
solution {S1 , . . . , Sq/3 }. define extension P1 P1 adding b Oi
q/3, > q/3, letting extension Oi [a c Si b Others].
follows c unique winner profile (and hence, w co-winner).
Therefore, PW NP-complete NcW coNP-complete respect ranked pairs.
PcW NW, need slightly modify reduction letting
2q
D(b, a) = q, letting D(vi , c) = +
4.
2
3
Next, consider voting trees. voting tree defined fixed number
alternatives, study complexity possible/necessary winner problems
respect voting trees, need consider infinite sequence trees, one
natural number (representing number alternatives).8 Therefore, let voting tree
rule composed infinite sequence voting trees {T1 , T2 , . . .}, N,
Tm voting tree alternatives (that is, Tm binary tree leaf nodes,
leaf associated alternative).
N, voting tree Tm t-well-spread exist pairs leaves (c1 , a1 ), . . . ,
(ct , ), t, ci ai siblings. say leaf pair
rich leaf. voting tree balanced depths pair leaves differ
one, number leaves whose (unique) sibling leaf one.
Example 2 Two voting trees illustrated Figure 2. voting tree (a) 1-wellspread, c1 c2 rich leaves; voting tree (b) balanced 3-well-spread,
leaves except c5 rich leaves.

c4
c5

c3
c1

c2

c1

c2

c3

(a)

c4

c6

c7

(b)
Figure 2: Voting trees.

Theorem 7 voting tree rule = {T1 , T2 , . . .}, exists polynomial function
f (x) x N, exists l N x l f (x) Tl x-wellspread, PW PcW NP-complete, NW NcW coNP-complete
respect , even number undetermined pairs vote 16.
8. similar case positional scoring rules, technically defined specific
number alternatives.

48

fiDetermining Possible Necessary Winners Given Partial Orders

Proof. Let j2 , j3 , . . . index voting trees z N (z 2), Tjz
2(z + 1)-well-spread jz f (2(z + 1)). z, let c arbitrary rich leaf
Tj z .
first prove NP-hardness PW PcW single reduction. Given X3C
instance V = {v1 , . . . , vq }, = {S1 , . . . , St }, construct PW instance follows.
Alternatives: Let C leaves Tjq , C = {c, d, w} V E,
= {a1 , . . . , aq }, E = {e1 , . . . , emq 2q3 }, mq number leaves Tjq .
Let tree {c, d}V rich leaves subtree whose root child
root Tjq (because Tjq 2(q + 1)-well-spread, always possible);
sibling c; common ancestor c w root; 1 q,
vi ai siblings. positions {c, d, w}V illustrated Figure 3. E
set alternatives Tjq . t, Si = {vl(i,1) , vl(i,2) , vl(i,3) },
let Ai = {al(i,1) , al(i,2) , al(i,3) }that is, Ai consists siblings elements
Si .

w

c



v1

a1

vq

aq

Figure 3: Positions alternatives Tjq .
First part P1 profile: t, start O(d, Ai , Si , c, Others),
subsequently obtain partial order Oi removing relations ({d} Ai )(Si {c}).
Second part P2 profile: according Lemma 2, P2 defined
set votes (linear orders) pairwise score differences profile
{O(d, Ai , Si , c, Others) : t} P2 satisfy:
(1) D(c, d) = 2q/3 + 1, D(c, w) = 2q + 1.
(2) q, D(ai , vi ) = 3, D(vi , c) = D(c, ai ) = 2q + 1.
(3) c C (with c 6= c), D(w, c ) = 2q + 1.
(4) pair i, q (with 6= ), D(vi , ai ) = 2q + 1.
(5) x C \ E, e E, D(x, e) = 2q + 1.
note number undetermined pairs vote 16.
Lemma 2 implies size P2 polynomial q + t.
49

fiXia & Conitzer

way c win beat first round, meet {v1 , . . . , vq }
later rounds, happen every vi beaten corresponding ai
first round. item (4), 6= , D(vi , ai ) = 2q + 1,
means q, vi wins first round, beaten w vj
j q subsequent rounds.In case winner must w. follows
extension P1 makes c win, c must ranked higher least q/3 times.
However, rank c higher extension Oi , extension
must Si Ai . order every ai defeat vi , every q, vi ranked
higher ai extension P1 . Therefore, exists profile P1
extending P1 c unique winner (or co-winner) P1 P2 , votes
P1 c make feasible solution X3C problem instance. Conversely,
feasible solution X3C problem instance, find P1 extending P1
c unique winner profile P1 P2 respect Tij . Therefore, PW PcW
NP-complete.
c unique winner, w always unique winner. Therefore,
NW NcW coNP-complete.
2
Theorem 7, immediately obtain following hardness results voting tree
rules composed balanced trees, setting f (x) = 4x (because exist integer
2x 2y 4x, balanced tree 2y alternatives least
x pairs siblings).
Corollary 2 PW PcW NP-complete NW NcW coNP-complete
respect voting tree rule composed balanced binary trees, even
number undetermined pairs vote 16.
Finally, following theorems complexity PW NcW respect
plurality runoff.
Theorem 8 PW NP-complete respect plurality runoff.
Proof. prove NP-hardness reduction X3C. Given X3C instance V =
{v1 , . . . , vq }, = {S1 , . . . , St }, construct PW instance follows.
Alternatives: C = {c, d, e} SV E, SV = {s1 , . . . , st }
E = {e1 , . . . , e(q+4)2 (t+4)4 }.
First part P1 profile: P1 = P11 P12 , P11 P12 defined follows.
P11 : q, start linear order O(d, SV , c, Others), subsequently obtain partial order Oi removing ({d} SV ) {sj : vi Sj }.
is, remove minimum set constraints alternative
{sj : vi Sj } ranked top position least one extension Oi .
Let P11 = {Oi : q}.
P12 : j t, start linear order O(d, e, c, Others), subsequently obtain partial order Q1j removing ({d} {e}) (C {sj }). is,
extension Q1j , d, e, sj ranked top position.
let Q2j = Q1j , P12 = {Q1j : j t} {Q2j : j t}.
50

fiDetermining Possible Necessary Winners Given Partial Orders

Second part P2 profile: P2 = P21 P22 , P21 P22 defined
follows.
P21 : set q(t + 7/3) + 8 votes, c ranked top position q + 4
times, ranked top position q + 2 times, e ranked top position
q/3 + 2 times, j t, sj ranked top position q times.
matter remaining alternatives ranked P21 .
P22 : first obtain, according Lemma 2, profile P22 pairwise
score differences following profile:
{q copies O(d, SV , c, Others)} {2t copies O(d, e, c, Others)} P21 P22
satisfy following conditions.
1. D(d, c) = D(e, c) = 1;
2. j t, D(c, sj ) = 1.
Lemma 2, size P22 polynomial p + t. Next, obtain P22 P22
moving alternative E top position vote P22 ,
way vote P22 ranks different alternative top position. P22
well-defined, |E| |P22 |.
profile P , alternative c , let P luP (c ) denote plurality score c P ,
is, P luP (c ) number times c ranked top position P . subscript P omitted risk confusion. make following observations
profile {q copies O(d, SV , c, Others)} {2t copies O(d, e, c, Others)} P21 P22 :
D(d, c) = D(e, c) = 1, j t, D(c, sj ) = 1;
P lu(c) = q + 4, P lu(d) = 2t + 2q + 2, P lu(e) = q/3 + 2; j t, P lu(sj ) = q;
e E, P lu(e ) 1.
note extension P1 P2 , P lu(c) = q + 4.
X3C instance solution Sj1 , . . . , Sjq/3 , construct solution
PW instance follows.
q, let Vi = [sjl (SV \ {sjl }) c Others], jl
ci Sjl ; note Vi extends Oi ;
l q/3, let Vj1l = Vj2l = [e c Others]; note Vj1l Vj2l extend
Q1jl Q2jl , respectively;
j (with j 6= jl l q/3), let Vj1 = Vj2 = [sj e c Others];
note Vj1 Vj2 extend Q1j Q2j , respectively;
then, use votes extend partial orders P1 : let P1 = {Vi :
q} {Vj1 , Vj2 : j t}.
51

fiXia & Conitzer

P1 P2 , P lu(c) = q + 4, P lu(d) = P lu(e) = q + 2; l q/3, P lu(sjl ) =
q + 3; j 6= jl (l = 1, . . . , q/3), P lu(sj ) = q + 2; e E, P lu(e ) 1.
Also, l q/3, D(c, sjl ) = 1. follows pairs enter
runoff (in parallel universe) (c, sj1 ), . . . , (c, sjq/3 ), c wins pairwise
elections. Therefore, c unique winner P1 P2 .
Next, show convert solution PW instance solution X3C
instance. Let P1 = P11 P12 extension P1 c unique winner
P1 P2 , P11 = {Vi : q} extends P11 , P12 = {Vj1 : j t} {Vj2 : j t}
extends P12 . make following sequence claims.
Claim 2 Neither e enter runoff, means pairs could
potentially still enter runoff (c, sj ), j t.
Proof. e entered runoff parallel universe, would defeat c
runoff (unless c even runoff, case c win
parallel universe), contradicting c unique winner.
2
Claim 3 j t, P luP1 (sj ) 3.
Proof. hold, let j index maximizes P luP1 (sj ).
follows P luP12 (sj ) 1, P luP11 (sj ) 3. However, putting sj
top position partial order P12 , forcing D(c, sj ) reduced 2,
means sj defeats c pairwise election. Moreover, because, Claim 2, one
sj must enter runoff, sj maximum plurality score among
alternatives SV , sj must runoff one parallel universes. However, c
cannot win parallel universe, contradicts assumption c unique
winner.
2
Claim 4 P luP1 (d) = 0, P luP1 (e) 2q/3.
Proof. follows Claim 3 j t, P luP1 P2 (sj ) q + 3. Therefore,
Claim 2 must P luP1 P2 (d) q + 2 P luP1 P2 (e) q + 2. claim
follows.
2
Claim 5 j t, P luP12 (sj ) 1, P luP1 (sj ) 2.
Proof. P luP12 (sj ) 1 sj enters runoff parallel universe, c
cannot win parallel universe. sake contradiction, suppose P luP1 (sj ) 3.
Claim 3 Claim 2, sj enters runoff parallel universe, contradicts
assumption c unique winner.
2
Claim 6 Let X1 = {sj : P luP11 (sj ) > 0, P luP12 (sj ) = 0}, X2 = {sj : P luP11 (sj ) =
0, P luP12 (sj ) > 0}. X1 X2 = SV |X1 | = q/3.
52

fiDetermining Possible Necessary Winners Given Partial Orders

Proof. Let x1 = |X1 |, x2 = |X2 |, x3 = x1 x2 . Claim 5,
sj SV \ (X1 X2 ), P luP11 (sj ) = P luP12 (sj ) = 1. recall P11 ,
top-ranked alternative extension must either element SV ;
Q P12 , top-ranked alternative extension Q must d, e, element
SV . use observations obtain two inequalities.
First, order c unique winner, cannot top position vote
P11 . Therefore, q top positions P11 must taken alternatives SV .
Now, alternative X1 take three top positions; alternative
X2 takes none top positions definition; alternative SV \ (X1 X2 )
takes one top positions. follows 3x1 + x3 q.
Now, apply similar analysis P12 . order c unique winner, e
cannot top position 2q/3 votes P12 , leaving least 2t 2q/3
top positions filled. Now, alternative X1 takes none top positions;
alternative X2 take two top positions (Claim 5); alternative
SV \ (X1 X2 ) takes one top positions. follows 2x2 + x3 2t 2q/3.
substituting q second inequality q first inequality, obtain
2x1 + 2x2 + 53 x3 2t. recall x1 + x2 + x3 = t. Therefore, x3 = 0, x1 + x2 = t.
first inequality becomes x1 q/3 second inequality becomes x2 q/3.
follows x1 + x2 = x1 = q/3 x2 = q/3.
2
Based claims, construct solution X3C instance. Let
X1 = {sj1 , . . . , sjq/3 }. Claim 3, Claim 6, |P11 | = q, fact every top position
P11 must occupied one alternatives X1 , follows Sj1 , . . . , Sjq/3
solution X3C instance. Therefore, PW respect plurality runoff
NP-complete.
2
Theorem 9 NcW coNP-complete respect plurality runoff, even
number undetermined pairs vote 4.
Proof. prove coNP-hardness reduction X3C. Given X3C instance V =
{v1 , . . . , vq }, = {S1 , . . . , St }, construct NcW instance follows.
Alternatives: {c, d} V E, E = {e1 , . . . , et(q+2)3 }.
First part P1 profile: j t, start O(d, Sj , c, Others),
subsequently obtain partial order Oj removing orderings ({d} Sj ) {c}.
Second part P2 profile: P2 = P21 P22 , P21 P22 defined
follows.
P21 : set t(q + 1) + q/3 votes, c ranked top position + 1
times; ranked top position q/3 1 times; q, vi
ranked top position times.
P22 : first obtain, according Lemma 2, profile P22 pairwise
score differences {O(d, Sj , c, Others) : j t} P21 P22 satisfy following
conditions.
1. D(c, d) = 2t + 1;
53

fiXia & Conitzer

2. q, D(vi , c) = 3.
Lemma 2, size P22 polynomial + q. Next, obtain P22
P22 raising alternative E top position vote, way
vote P22 ranks different alternative top position.
recall profile P alternative c , P luP (c ) denotes number
times c ranked top position P . make following observations
{O(d, Sj , c, Others) : j t} P2 .
D(c, d) = 2t + 1, q, D(vi , c) = 3;
P lu(c) = + 1, P lu(d) = 1 + q/3; q, P lu(vi ) = t; e E,
P lu(e) 1.
follows observations extension P1 P2 , c must enter runoff;
also, extension, c defeats pairwise election. Let P1 P2 (where P1
extension P1 ) profile c co-winner. must
enter runoff, means P luP1 P2 (d) 1. follows c least q/3
votes P1 . However, ranking c partial order Oi , forcing c Si . Now,
pairs alternatives enter runoff (in parallel universes) (c, v1 ), . . . , (c, vq ).
Since c loses pairwise elections runoff (because, assumption, c
co-winner), must vj , c vj one vote P1 . Hence,
solution complement NcW instance naturally corresponds solution
X3C instance. Conversely, solution X3C instance corresponds solution
complement NcW instance. Therefore, NcW respect plurality runoff
coNP-complete.
2

5. Polynomial-time Algorithms Possible Necessary Winner
Problems
section present polynomial-time algorithms (1) NW NcW respect
positional scoring rules, maximin, Bucklin, (2) PcW NW respect
plurality runoff. recall PW NP-complete (Theorem 8) NcW coNPcomplete (Theorem 9), respect plurality runoff.
note positional scoring rules, maximin, Bucklin based type
scores, find extension partial orders linear orders
score c, denoted S(c), score another alternative w, c
(unique) winner profile, hence c necessary winner. Therefore,
following algorithms rules, check alternatives w 6= c, try make
S(c) S(w) low possible vote-by-vote basis (or equivalently, make S(w) S(c)
high possible). vote (partial order), two cases. first
case, c 6O w. case, need consider c w separately, raising w high
possible lowering c low possible. (This part algorithm already
considered Konczak & Lang, 2005.) following example, Example 3, illustrates
idea.

54

fiDetermining Possible Necessary Winners Given Partial Orders

Example 3 partial order illustrated Figure 4 (a). Let c = c2 w = c5 . Since
c2 6O c5 , raise c5 high possible lowering c2 low possible, shown
Figure 4 (b).
c5

c6

c2

c3

c1
c4

c1

c5

(a) partial order O.

c6

c2

c3

c4

(b) extension O.

Figure 4: partial order extension.
second case, c w. case complicated, follows
show minimize S(c) S(w) positional scoring rules, maximin, Bucklin.
plurality runoff, convert PcW maximum flow problem solve it;
gives algorithm NW, simply checking whether alternative possible
co-winner (see Proposition 1).
section, input consists C = {c, c1 , . . . , cm1 }, c (the alternative
wish decide whether necessary (co-)winner), profile Pposet n partial
orders C, voting rule r.
first define notation used algorithms.
Definition 8 Given partial order alternative c, let UpO (c) = {c C : c c}
DownO (c) = {c C : c c }. Given another alternative w c w, let Os
c w block defined follows: BlockO (c, w) = {c C : c c w}.
is, UpO (c) set alternatives weakly preferred c (including c
itself), DownO (c) set alternatives c weakly preferred (including
c itself). c w, BlockO (c, w) set alternatives, including c w,
ranked c w. easy check partial order O,
pair alternatives c, w (with c w), BlockO (c, w) = DownO (c) UpO (w).
Example 4 Let partial order illustrated Figure 4 (a). UpO (c2 ) =
{c1 , c2 }, UpO (c4 ) = {c1 , c2 , c3 , c4 , c5 }, DownO (c2 ) = {c2 , c3 , c4 }, DownO (c4 ) = {c4 },
BlockO (c2 , c4 ) = {c2 , c3 , c4 }.
notion block useful following reason. algorithm, want
think extension partial orders w well possible, c
poorly possible. c w partial order O, cannot rank c
w; least makes sense alternatives possible.
alternatives block exactly ones need them; rank
alternatives outside block. Then, question position
block, slide block ranking.
ready present algorithms. note given partial order O,
computing UpO DownO sets takes polynomial time. Let ~sm denote scoring
vector positional scoring rule.
Algorithm 1 (Computing NW respect positional scoring rule)
55

fiXia & Conitzer

1. partial order Pposet alternative c, compute UpO (c)
DownO (c).
2. Repeat Steps 3ac w 6= c:
3a. Let S(w) = S(c) = 0.
3b. partial order Pposet ,
c 6O w, (following Example 3) lowest possible position c
+ 1 |DownO (c)|th position, highest possible position w
|UpO (w)|th position, add scores ~sm (|UpO (w)|) ~sm (m + 1
|DownO (c)|) S(w) S(c), respectively;
c w, highest slide Os c w block (as measured cs
position, top block) position |UpO (w) \ DownO (c)| + 1 (if
alternative ranked w partial order, place
c, unless partial order ranks c a), lowest (as measured ws
position, bottom block) position m|DownO (c)\UpO (w)|
(if alternative ranked c partial order, place
w, unless partial order ranks w). position
extremes possible. find position minimizes score c
minus score w, add scores c w get positions
S(c) S(w), respectively.
3c. result S(w) S(c), output c necessary winner
(terminating algorithm).
4. Output c necessary winner (if reach point).
algorithm computing NcW obtained simply checking whether S(w) > S(c)
Step 4.
Proposition 3 Algorithm 1 checks whether c necessary winner Pposet
respect given positional scoring rule polynomial time.
Proof. equivalent check whether exists extension P Pposet
alternative w 6= c, s(P, w) s(P, c)that is, whether c necessary (unique)
winner. end, Pposet , maximize s(VO , w)s(VO , c) extensions
VO O.
recall m, ~sm (i) score alternative ranked
ith position. extension VO O, s(VO , w) ~sm (|UpO (w)|) (because w cannot
ranked higher |UpO (w)|th position) s(VO , c) ~sm (m + 1 |DownO (c)|)
(because c cannot ranked lower (m + 1 |DownO (c)|)th position).
two bounds achieved c 6O w: every C \ UpO (w), add w
O; every C \ DownO (c), add c O. obtain partial order
way, let VO (arbitrary) linear order extends . follows
s(VO , w) s(VO , c) = ~sm (|UpO (w)|) ~sm (m + 1 |DownO (c)|).
However, c w, may exist VO s(VO , w) = ~sm (|UpO (w)|)
s(VO , c) = ~sm (m + 1 |DownO (c)|) hold simultaneously. note VO
56

fiDetermining Possible Necessary Winners Given Partial Orders

maximizes s(VO , w) s(VO , c), alternatives c w must
BlockO (c, w). Therefore, C w c 6O d, must
VO c; C c 6O w, must w VO d.
follows s(VO , w) s(VO , c) maxl (~sm (l + |BlockO (c, w)| 1) ~sm (l)), l ranges
|UpO (w) \ DownO (c)| + 1 |DownO (c) \ UpO (w)|. Let VO extension
restricted C \ BlockO (c, w) UpO (w) \ DownO (c) ranked top
DownO (c) \ UpO (w) ranked bottom. C \ (UpO (w) DownO (c))
BlockO (c, w), must 6O 6O d. Therefore,
|UpO (w) \ DownO (c)| + 1 l |DownO (c) \ UpO (w)|, put BlockO (c, w)
(l 1)th position lth position VO , obtain linear order extends O.
proves correctness Step 3b, computes maxVO (s(VO , w) s(VO , c)).
follows algorithm correctly checks whether c necessary winner.
2
move maximin rule. note c necessary winner Pposet
respect maximin exists profile linear orders P extending
Pposet , two alternatives w w , alternatives d, NP (w, d) NP (c, w ).
recall NP (w, d) number votes P w d. Therefore, algorithm
considers pairs (w, w ), checks whether exists extension input
partial orders inequality holds alternatives d. perform check,
partial order, would rank w ahead c, rank w high
possible. However, two objectives may conflict: may case rank
c ahead w , rank w higher case rank w ahead c.
case, first place w ahead c, rank w high possible
additional constraint. works following reason. Let Pposet partial
order c 6O w w 6O c; let V arbitrary extension w V c
let V arbitrary extension c V w . C,
N{V } (w, d) N{V } (c, w ) 0 N{V } (w, d) N{V } (c, w ), means enforcing
w c always least good enforcing c w .
Algorithm 2 (Computing NW respect maximin)
1. partial order Pposet alternative c, compute UpO (c).
2. Repeat 3ac pairs w, w , c 6= w c 6= w .
3a. Let S(c, w ) = 0, alternative 6= w, let S(w, d) = 0.
3b. partial order Pposet ,
c 6O w , add w c raise w high possible;
6= w, if, resulting vote, w ahead (that is, 6 UpO (w)
c UpO (w), 6 UpO (w )), add 1 S(w, d).
c w , raise w high possible; add 1 S(c, w ); 6= w,
if, resulting vote, w ahead (that is, 6 UpO (w)), add 1
S(w, d).
3c. Check 6= w, S(w, d) S(c, w ); answer yes, output
c necessary winner (terminating algorithm).
4. Output c necessary winner.
57

fiXia & Conitzer

algorithm computing NcW respect maximin similar: modification
Step 3, check alternatives 6= w, S(w, d) > S(c, w ).
Proposition 4 Algorithm 2 checks whether c necessary winner Pposet
respect maximin polynomial time.
Proof. function S(x, y) computed algorithm number times x preferred
extension Pposet . partial order O, let VO extension computed
Step 3b. Let g(V, d) = NV (w, d) NV (c, w ). next prove 6= w
extension VO O, g(VO , d) g(VO , d). c 6O w c VO w , g(VO , d)
0 g(VO , d) (because NVO (c, w ) = 0 NVO (c, w ) = 1). c 6O w w VO c,
NVO (c, w ) = NVO (c, w ). note VO obtained raising w high possible
w c, means NVO (w, d) NVO (w, d). follows g(VO , d) g(VO , d).
Similarly, c w , 6= w, NVO (w, d) NVO (w, d).
Therefore,Pfor extension P Pposet 6= w, S(w, d) S(c, w ) = NP (w, d)
NP (c, w ) OPposet g(VO , d), P profile computed Step 3b, inequality becomes equality. follows algorithm correct.
2
move Bucklin rule. note c necessary winner
Pposet respect Bucklin, exists extension P Pposet
alternative w, either ws Bucklin score 1, exists 2 k m,
w among top k n2 votes (meaning ws Bucklin score
k), c among top k 1 n2 votes (meaning cs Bucklin score
less k). Therefore, Algorithm 1, algorithm Bucklin considers
alternative w, computes possible positions blocks BlockO (c, w), checks
k 1 whether condition made hold.
algorithm, c 6Oj w, High(j) highest position w reaches
extension Oj , Low(j) lowest position c reaches extension Oj .
c Oj w, High(j) highest position c given c w ranked close
possible, Low(j) lowest position c given c w ranked
close possible, Length(j) size BlockOj (c, w).
{c, w}, let S(i, d) denote minimum number times ranked
top positions, minimum taken optimal extensions Pposet (we
elaborate meaning optimality later). U (k) number partial orders
compute put block BlockOj (c, w) make c
necessary unique winner. is, U (k) number partial orders
exists extension c top k 1 positions w top k positions,
well another extension c top k 1 positions w
top k positions.
Algorithm 3 (Computing NW respect Bucklin)
1. partial order Pposet alternative c, compute UpO (c)
DownO (c).
2. Repeat Steps 3ad w 6= c:
3a. j n, let High(j) = Low(j) = Length(j) = 0. m, let
S(i, c) = S(i, w) = U (i) = 0.
58

fiDetermining Possible Necessary Winners Given Partial Orders

3b. partial order Oj Pposet ,
c 6Oj w, let Length(j) = 0, let High(j) = |UpOj (w)|, Low(j) =
+ 1 |DownOj (c)|;
c Oj w, let Length(j) = |BlockOj (c, w)|, High(j) = |UpOj (w) \
DownOj (c)| + 1, Low(j) = + 1 |DownOj (c)|.
3c. k m, j n,
Length(j) = 0, add 1 S(k, w) High(j) k, add 1 S(k 1, c)
Low(j) k 1;
Length(j) > 0, add 1 S(k, w) either Low(j) + Length(j) 1 k,
following two conditions hold: Low(j) k1 High(j)+Length(j)
1 k. Also, add 1 S(k1, c) Low(j) k1; add 1 U (k) Low(j) > k1
High(j) + Length(j) 1 k.
3d. S(1, w) + U (1) > n2 , exists 2 k S(k, w) > S(k 1, c),
S(k 1, c) n2 , S(k, w) + U (k) > n2 , output c necessary
winner (terminating algorithm).
4. Output c necessary winner.
algorithm computing NcW obtained making following changes Steps 3c
3d follows.
3c . k m, j n,
Length(j) = 0, add 1 S(k, w) High(j) k, add 1 S(k, c)
Low(j) k;
Length(j) > 0, add 1 S(k, w) either Low(j) + Length(j) 1 k,
following two conditions hold: Low(j) k High(j) + Length(j) 1
k. Also, add 1 S(k, c) Low(j) k; add 1 U (k) Low(j) k + 1
High(j) + Length(j) 1 k.
3d . exists 0 l U (1) S(1, w) + l > n2 S(1, c) + l, exists
2 k l U (k) S(k, w) + l > n2 S(k, c) + l, output c
necessary co-winner (terminating algorithm).
Proposition 5 Algorithm 3 checks whether c necessary winner Pposet
respect Bucklin polynomial time.
Proof. Similarly case positional scoring rules, Bucklin, c 6O w,
simply rank c low possible rank w high possible, independently.
hand, c w, without loss generality place alternatives
c w possible, question place c w block.
algorithm consider particular k, try make w among top k
half votes, c among top k 1 half votes.
particular vote c w, depending block placed, either (1) c among
top k 1 w among top k; or, (2) c among top k 1 w among
top k; or, (3) c among top k 1 w among top k. However,
59

fiXia & Conitzer

three possibilities may exist particular vote. algorithm never
choose (2) unless option, difficult case decision
must made (1) (3).
recall {c, w}, S(i, d) minimum number
times ranked within top positions, minimum taken extensions
Pposet consistent observations previous paragraph (specifically,
option (2) never chosen unless choice). U (k) number partial
orders exists extension c ranked within top k 1 positions
w ranked within top k positions, well extension c ranked
within top k 1 positions w ranked within top k positions (that is,
choice (1) (3)).
k m, j n, consider extend Oj .
c 6Oj w, positions c w already determined previous
observations (w ranked high possible c ranked low possible).
c Oj w High(j) k, c cannot ranked within top k 1 positions
w cannot ranked within top k positions; therefore, add 0 S(k 1, c)
S(k, w).
c Oj w, High(j) < k High(j) + Length(j) 1 > k, c ranked within
top k 1 positions, w cannot ranked within top k positions. two
sub-cases: (1) Low(j) k, rank c Low(j)th position, henceforth
add 0 S(k 1, c) S(k, w); (2) Low(j) < k, c inevitably ranked
within top k 1 positions, w cannot ranked within top k positions,
means add 1 S(k 1, c) 0 S(k, w).
final case c Oj w, High(j) < k High(j) + Length(j) 1 k. Again,
two subcases: (1) Low(j) < k, means c must ranked within
top k 1 positions. Therefore rank w top k positions, add 1
S(k 1, c) S(k, w); (2) Low(j) k, means three options
extension Oj , corresponding cases (1), (2), (3) discussed beginning
proof.
(1) cs position within top k 1 ws position within top k.
(2) cs position within top k 1 ws position within top k (which implies
Length(i) > 2).
(3) cs position within top k 1 ws position within top k.
already discussed, option (2) suboptimal. Therefore, add 0
S(k 1, c) S(k, w), add 1 U (k).
remaining decision many votes corresponding number
U (k) choose option (1) (as opposed option (3)). corresponds Step 3d
algorithm, checks whether exists way choosing number extensions
(but U (k)) choose (1) way c winner.
Therefore, algorithm correct.
2
60

fiDetermining Possible Necessary Winners Given Partial Orders

Finally, consider possible co-winner problem respect plurality runoff.
show problem solved polynomial time. this, follows
necessary (unique) winner problem solved polynomial time (Proposition 1). contrast, already shown plurality runoff, possible
unique winner problem NP-complete (Theorem 8) necessary co-winner problem
coNP-complete (Theorem 9).
algorithm determining whether c possible co-winner based following
key observation: c possible co-winner Pposet respect plurality runoff
exists extension Pposet , denoted P , alternative 6= c,
two natural numbers l1 , l2 , (1) c preferred least half votes (linear
orders) P , (2) P luP (c) = l1 , P luP (d) = l2 , alternative c (c 6= c
c 6= d), P luP (c ) min{l1 , l2 }. is, c enter runoff (there could
pairs alternatives enter runoff parallel universe) c defeat
runoff.
1, let denote number partial orders Pposet
ci c. recall op(O) denote set alternatives c exists
least one extension c top position. Based observations
previous paragraph, consider possibilities l1 , l2 , (we use
denote possibilities index d), solve maximum flow problem instance
possibility.9 Specifically, every l1 , l2 n every 1 (with n/2),
define maximum flow problem Fl1 ,l2 ,i follows (illustrated Figure 5, = 1).
c

1

O1
1

1

c1

n/2 1

l1

c1
l2

1

c2
..
.



lmin

1

..
.

1

cm1





1



n l1 l2

lmin

Figure 5: maximum flow problem Fl1 ,l2 ,1 .
Vertices: s, O1 , . . . , , ci , c, c1 , . . . , cm1 , , t.
Edges: following five types edges.
Edges {O1 , . . . , }: every n, edge (s, Oi )
capacity 1.
9. original proof used minimum cost flow problem, one anonymous reviewers pointed
modify approach simpler maximum flow approach presented here, well two
papers (Gusfield & Martel, 2002; Russell & Walsh, 2009) maximum flow problems used
solve election problems, thank reviewer.

61

fiXia & Conitzer

Edges {O1 , . . . , } {ci , c, c1 , . . . , cm1 }:
every j n every C 6= ci , op(Oj ),
edge (Oj , d) capacity 1;
every j n, ci op(O) ci Oj c, edge (Oj , ci )
capacity 1;
j n, edge (Oj , ci ) capacity 1 ci op(O)
ci 6Oj c.
Edge ci ci : edge (ci , ci ) capacity n/2 .
Edges C \ {c, ci } : every c C \ {c, ci }, edge (c , )
capacity lmin = min{l1 , l2 }.
Edges {c, ci , } t:
edge (c, t) capacity l1 ;
edge (ci , t) capacity l2 ;
edge (t , t) capacity n l1 l2 .
Next, prove c possible co-winner Pposet respect plurality runoff
exist l1 , l2 n 1 Fl1 ,l2 ,i solution
value flow n.
parameters Fl1 ,l2 ,i integers, exists solution Fl1 ,l2 ,i ,
must exists integer solution. First, show convert integer solution
Fl1 ,l2 ,i solution PcW problem respect plurality runoff. Let f
integer solution Fl1 ,l2 ,i , is, f : Vertices Vertices Z. construct
extension P = (V1 , . . . , Vn ) Pposet follows:
j n, f (Oj , ci ) = 1 let Vj extension Oj ci
ranked top position;
j n C \ {ci }, f (Oj , d) = 1 let Oj extension
Oj ranked top position, c ranked high possible.
value f n, plurality score c l1 plurality score ci
l2 , plurality score ci (i 6= ) lmin . Therefore, c ci enter
runoff together one parallel universe. Now, capacity constraint edge (ci , ci )
ensures c win runoff: reason rank ci first vote
could ranked c ahead ci , contribute 1 flow edge.
Moreover, capacity edge (ci , ci ) n/2 , means ci c
+ (n/2 ) n/2 votes P . Hence, c co-winner P .
Conversely, exists extension P P c co-winner P ,
exists ci parallel universe, {c, ci } enter runoff, c wins
runoff. Let l1 , l2 plurality scores c, ci , respectively. Then, extension
converted solution Fl1 ,l2 ,i (we omit details similar
details direction).
Therefore, following algorithm solves PcW respect plurality runoff.
Algorithm 4 (Computing PcW respect plurality runoff )
62

fiDetermining Possible Necessary Winners Given Partial Orders

1. Pposet , compute op(O) UpO (c). 1, let = |{O
Pposet : ci UpO (c)}|.
2. Repeat Steps 3ab 1 l1 , l2 n:
3a. Construct maximum flow problem Fl1 ,l2 ,i .
3b. Solve Fl1 ,l2 ,i FordFulkerson algorithm (Cormen, Leiserson, Rivest, &
Stein, 2001). maximum flow n, output c possible cowinner. Terminate algorithm.
4. Output c possible co-winner.
Proposition 6 Algorithm 4 checks whether c possible co-winner Pposet
respect plurality runoff polynomial time.
recall proof Proposition 1 c necessary unique winner
alternative possible co-winner. Therefore, naturally obtain algorithm
NW, simply using Algorithm 4 check alternative c possible
co-winner.
Proposition 7 Algorithm 4 used check whether c necessary unique
winner Pposet respect plurality runoff polynomial time.

6. Conclusion Future Work
considered following problem: given set alternatives, voting rule,
set partial orders, alternatives possible/necessary winners? is,
alternatives would win some/all extension partial orders? considered case
votes weighted number alternatives bounded. Table 1
introduction summarizes results. results hold whether alternative
must unique winner, merely co-winner, unless specifically mentioned.
paper, restriction partial orders. However, reason
partial orders preferences submitted CP-nets, introduces
additional structure partial orders; is, partial orders correspond
CP-net. Hence, positive results would still apply, immediately obvious
negative results would still apply.
Another approach approximate sets possible/necessary winners. precisely, asked output superset (respectively, subset) possible (respectively,
necessary) winners size output set within fixed ratio
number possible (respectively, necessary) winners. Pini et al. (2007) proved
inapproximability set possible/necessary winners single transferable vote
rule (STV) rule. conjecture similar inapproximability results hold
common voting rules studied paper (for possible/necessary winner
problems (co-)NP-complete).
63

fiXia & Conitzer

Acknowledgments
thank Nadja Betzler, Jerome Lang, Toby Walsh, anonymous reviewers AAAI-08
JAIR, participants Dagstuhl Seminar 07431: Computational Issues
Social Choice helpful discussions comments. Lirong Xia supported James
B. Duke Fellowship Vincent Conitzer supported Alfred P. Sloan Research Fellowship. work supported NSF award numbers IIS-0812113 CAREER
0953756.

References
Bachrach, Y., Betzler, N., & Faliszewski, P. (2010). Probabilistic possible winner determination. Proceedings National Conference Artificial Intelligence (AAAI),
pp. 697702, Atlanta, GA, USA.
Bartholdi, III, J., & Orlin, J. (1991). Single transferable vote resists strategic voting. Social
Choice Welfare, 8 (4), 341354.
Bartholdi, III, J., Tovey, C., & Trick, M. (1989a). computational difficulty manipulating election. Social Choice Welfare, 6 (3), 227241.
Bartholdi, III, J., Tovey, C., & Trick, M. (1989b). Voting schemes
difficult tell election. Social Choice Welfare, 6, 157165.
Baumeister, D., & Rothe, J. (2010). Taking final step full dichotomy possible
winner problem pure scoring rules. Proceedings 19th European Conference
Artificial Intelligence (ECAI), pp. 10191020, Lisbon, Portugal.
Betzler, N., & Dorn, B. (2010). Towards dichotomy possible winner problem
elections based scoring rules. Journal Computer System Sciences, 76 (8),
812836.
Betzler, N., Hemmann, S., & Niedermeier, R. (2009). multivariate complexity analysis
determining possible winners given incomplete votes. Proceedings TwentyFirst International Joint Conference Artificial Intelligence (IJCAI), pp. 5358,
Pasadena, CA, USA.
Boutilier, C., Brafman, R., Domshlak, C., Hoos, H., & Poole, D. (2004). CP-nets: tool
representing reasoning conditional ceteris paribus statements. Journal
Artificial Intelligence Research, 21, 135191.
Chevaleyre, Y., Lang, J., Maudet, N., & Monnot, J. (2010). Possible winners new candidates added: case scoring rules. Proceedings National Conference
Artificial Intelligence (AAAI), Atlanta, GA, USA.
Chevaleyre, Y., Lang, J., Maudet, N., Monnot, J., & Xia, L. (2010). New candidates
welcome! Possible winners respect addition new candidates. Technical
report, Cahiers du LAMSADE 302, Universite Paris-Dauphine.
Conitzer, V. (2009). Eliciting single-peaked preferences using comparison queries. Journal
Artificial Intelligence Research, 35, 161191.
64

fiDetermining Possible Necessary Winners Given Partial Orders

Conitzer, V., Rognlie, M., & Xia, L. (2009). Preference functions score rankings
maximum likelihood estimation. Proceedings Twenty-First International
Joint Conference Artificial Intelligence (IJCAI), pp. 109115, Pasadena, CA, USA.
Conitzer, V., & Sandholm, T. (2002). Vote elicitation: Complexity strategy-proofness.
Proceedings National Conference Artificial Intelligence (AAAI), pp. 392
397, Edmonton, AB, Canada.
Conitzer, V., & Sandholm, T. (2005a). Common voting rules maximum likelihood estimators. Proceedings 21st Annual Conference Uncertainty Artificial
Intelligence (UAI), pp. 145152, Edinburgh, UK.
Conitzer, V., & Sandholm, T. (2005b). Communication complexity common voting rules.
Proceedings ACM Conference Electronic Commerce (EC), pp. 7887,
Vancouver, BC, Canada.
Conitzer, V., Sandholm, T., & Lang, J. (2007). elections candidates
hard manipulate?. Journal ACM, 54 (3), 133.
Cormen, T., Leiserson, C., Rivest, R., & Stein, C. (2001). Introduction Algorithms
(Second edition). MIT Press.
Elkind, E., Faliszewski, P., & Slinko, A. (2009). Swap bribery. Proceedings 2nd
International Symposium Algorithmic Game Theory.
Elkind, E., & Lipmaa, H. (2005). Hybrid voting protocols hardness manipulation.
Annual International Symposium Algorithms Computation (ISAAC), 3827
Lecture Notes Computer Science, pp. 206215, Sanya, Hainan, China.
Erdelyi, G., Fernau, H., Goldsmith, J., Mattei, N., Raible, D., & Rothe, J. (2009). complexity probabilistic lobbying. 1st International Conference Algorithmic
Decision Theory, pp. 8697, Venice, Italy.
Erdos, P., & Moser, L. (1964). representation directed graphs unions
orderings. Math. Inst. Hung. Acad. Sci., 9, 125132.
Faliszewski, P. (2008). Nonuniform bribery. Proceedings Seventh International
Joint Conference Autonomous Agents Multi-Agent Systems (AAMAS), pp.
15691572, Estoril, Portugal.
Faliszewski, P., Hemaspaandra, E., & Schnoor, H. (2008). Copeland voting: ties matter.
Proceedings Seventh International Joint Conference Autonomous Agents
Multi-Agent Systems (AAMAS), pp. 983990, Estoril, Portugal.
Faliszewski, P., Hemaspaandra, E., & Schnoor, H. (2010). Manipulation copeland elections. Proceedings Nineth International Joint Conference Autonomous
Agents Multi-Agent Systems (AAMAS), pp. 367374, Toronto, Canada.
Garey, M., & Johnson, D. (1979). Computers Intractability. W. H. Freeman
Company.
Gibbard, A. (1973). Manipulation voting schemes: general result. Econometrica, 41,
587602.
Gusfield, D., & Martel, C. (2002). structure complexity sports elimination
numbers. Algorithmica, 32, 7386.
65

fiXia & Conitzer

Hazon, N., Aumann, Y., Kraus, S., & Wooldridge, M. (2008). Evaluation election outcomes uncertainty. Proceedings Seventh International Joint Conference
Autonomous Agents Multi-Agent Systems (AAMAS), pp. 959966, Estoril,
Portugal.
Hemaspaandra, E., & Hemaspaandra, L. A. (2007). Dichotomy voting systems. Journal
Computer System Sciences, 73 (1), 7383.
Hemaspaandra, E., Hemaspaandra, L. A., & Rothe, J. (1997). Exact analysis Dodgson
elections: Lewis Carrolls 1876 voting system complete parallel access NP.
Journal ACM, 44 (6), 806825.
Konczak, K., & Lang, J. (2005). Voting procedures incomplete preferences. Multidisciplinary Workshop Advances Preference Handling.
Lang, J. (2007). Vote aggregation combinatorial domains structured preferences. Proceedings Twentieth International Joint Conference Artificial
Intelligence (IJCAI), pp. 13661371, Hyderabad, India.
Lang, J., Pini, M. S., Rossi, F., Venable, K. B., & Walsh, T. (2007). Winner determination
sequential majority voting. Proceedings Twentieth International Joint
Conference Artificial Intelligence (IJCAI), pp. 13721377, Hyderabad, India.
Lang, J., & Xia, L. (2009). Sequential composition voting rules multi-issue domains.
Mathematical Social Sciences, 57 (3), 304324.
McGarvey, D. C. (1953). theorem construction voting paradoxes. Econometrica,
21 (4), 608610.
Parkes, D. (2006). Iterative combinatorial auctions. Cramton, P., Shoham, Y., & Steinberg, R. (Eds.), Combinatorial Auctions, chap. 2, pp. 4177. MIT Press.
Pini, M. S., Rossi, F., Venable, K. B., & Walsh, T. (2007). Incompleteness incomparability preference aggregation. Proceedings Twentieth International Joint
Conference Artificial Intelligence (IJCAI), pp. 14641469, Hyderabad, India.
Rothe, J., Spakowski, H., & Vogel, J. (2003). Exact complexity winner problem
Young elections. Theory Computing Systems, Vol. 36(4), pp. 375386. SpringerVerlag.
Russell, T., & Walsh, T. (2009). Manipulating tournaments cup round robin competitions. Proceedings First International Conference Algorithmic Decision
Theory (ADT), Lecture Notes Artificial Intelligence 5783, pp. 2637.
Sandholm, T., & Boutilier, C. (2006). Preference elicitation combinatorial auctions.
Cramton, P., Shoham, Y., & Steinberg, R. (Eds.), Combinatorial Auctions, chap. 10,
pp. 233263. MIT Press.
Satterthwaite, M. (1975). Strategy-proofness Arrows conditions: Existence correspondence theorems voting procedures social welfare functions. Journal
Economic Theory, 10, 187217.
Walsh, T. (2007). Uncertainty preference elicitation aggregation. Proceedings
National Conference Artificial Intelligence (AAAI), pp. 38, Vancouver, BC,
Canada.
66

fiDetermining Possible Necessary Winners Given Partial Orders

Xia, L., Lang, J., & Monnot, J. (2011). Possible winners new alternatives join:
New results coming up!. apprea Proceedings Tenth International Joint
Conference Autonomous Agents Multi-Agent Systems (AAMAS).
Xia, L., & Conitzer, V. (2008). Determining possible necessary winners common voting rules given partial orders. Proceedings National Conference
Artificial Intelligence (AAAI), pp. 196201, Chicago, IL, USA.
Xia, L., Conitzer, V., & Procaccia, A. D. (2010). scheduling approach coalitional
manipulation. Proceedings ACM Conference Electronic Commerce (EC),
pp. 275284, Boston, MA, USA.
Xia, L., Lang, J., & Ying, M. (2007a). Sequential voting rules multiple elections paradoxes. Proceedings Eleventh Conference Theoretical Aspects Rationality
Knowledge (TARK), pp. 279288, Brussels, Belgium.
Xia, L., Lang, J., & Ying, M. (2007b). Strongly decomposable voting rules multiattribute
domains. Proceedings National Conference Artificial Intelligence (AAAI),
pp. 776781, Vancouver, BC, Canada.
Xia, L., Zuckerman, M., Procaccia, A. D., Conitzer, V., & Rosenschein, J. (2009). Complexity unweighted coalitional manipulation common voting rules.
Proceedings Twenty-First International Joint Conference Artificial Intelligence (IJCAI), pp. 348353, Pasadena, CA, USA.
Zuckerman, M., Procaccia, A. D., & Rosenschein, J. S. (2009). Algorithms coalitional
manipulation problem. Artificial Intelligence, 173 (2), 392412.

67


