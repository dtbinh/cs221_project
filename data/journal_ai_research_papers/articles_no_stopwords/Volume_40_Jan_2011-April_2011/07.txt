Journal Artificial Intelligence Research 40 (2011) 415468

Submitted 9/10; published 2/11

On-line Planning Scheduling:
Application Controlling Modular Printers
Wheeler Ruml

ruml cs.unh.edu

Department Computer Science
University New Hampshire
33 Academic Way
Durham, NH 03824 USA

Minh Binh
Rong Zhou
Markus P. J. Fromherz

minhdo parc.com
rzhou parc.com
fromherz parc.com

Palo Alto Research Center
3333 Coyote Hill Road
Palo Alto, CA 94304 USA

Abstract
present case study artificial intelligence techniques applied control
production printing equipment. many real-world applications, complex domain requires high-speed autonomous decision-making robust continual operation.
knowledge, work represents first successful industrial application embedded
domain-independent temporal planning. system handles execution failures multiobjective preferences. heart on-line algorithm combines techniques
state-space planning partial-order scheduling. suggest general architecture may prove useful applications intelligent systems operate continual,
on-line settings. system used drive several commercial prototypes
enabled new product architecture industrial partner. compared
state-of-the-art off-line planners, system hundreds times faster often finds
better plans. experience demonstrates domain-independent AI planning based
heuristic search flexibly handle time, resources, replanning, multiple objectives
high-speed practical application without requiring hand-coded control knowledge.

1. Introduction
sustaining goal artificial intelligence develop techniques enabling autonomous
agents robustly achieve multiple interacting goals dynamic environment. goal
intellectually attractive. happens align perfectly needs
many commercial manufacturing plants. paper, focus one particular manufacturing setting: high-speed digital production printing systems. large machines use
xerography print requested images individual sheets paper. Unlike traditional
continuous-feed offset presses, digital printers treat sheet differently: feeding different types sizes media, printing different kinds images, performing different
preparatory finishing operations. Often, single integrated machine transform
blank sheets complete document, bound book folded bill sealed
envelope. sometimes even possible process different kinds jobs simultaneously
c
2011
AI Access Foundation. rights reserved.

fiRuml, Do, Zhou, & Fromherz

equipment. printer controller must plan quickly reliably; otherwise expensive human intervention required. Designing high-performance yet cost-effective
controller machines made difficult current trend towards increased
modularity, customers system unique includes components
appropriate needs. working closely Xerox
Corporation explore architectures printing systems composed literally hundreds modules, possibly including multiple specialized printing modules, working
together high speed.
paper, demonstrate techniques artificial intelligence used
control machines. Requests print jobs become goals system achieve,
various actuators mechanisms machine become actions resources used
achieving goals, sensors provide feedback action execution state
system. provide high productivity (and thus high return investment
equipment owner), planning control techniques must fast produce optimal
near-optimal plans. reduce need operator oversight allow use
complex mechanisms, system must autonomous autonomic possible.
operators make mistakes even highly-engineered system modules fail,
system must cope execution failure unexpected events.
system must work legacy modules order commercially viable, architecture
must tolerate components direct control.
meet requirements, present novel architecture on-line planning, execution, replanning synthesizes techniques state-space planning (Ghallab, Nau,
& Traverso, 2004) partial-order scheduling (Smith & Cheng, 1993). develop new
heuristic evaluation functions temporal planning incorporate effects
resource constraints. Although domain-independent AI planning often regarded
expensive use soft real-time setting, system achieves good performance without
hand-coded control rules, despite additional requirements reasoning temporal actions resources. avoiding domain-dependent search control knowledge,
becomes possible use planner run different printing systems full productivity. success system enabled new modular product architecture
span multiple markets. Much previous work brought constraint-based scheduling
daily use print shops offices world-wide (Fromherz, Saraswat, & Bobrow, 1999;
Fromherz, Bobrow, & de Kleer, 2003), work bring domain-independent temporal
planning continual widespread use everyday people. approach practical
efficient, showcases flexibility inherent viewing planning heuristic search.
discussing application context detail, present overview
system, followed detailed discussion major aspects: nominal planning, exception handling, multiple objectives. go, present empirical measurements
demonstrating large printing systems controlled system meeting
real-time requirements. particular, Section 4.4.1 describes comparison stateof-the-art generic off-line planners demonstrates planner finds plans hundreds
times faster often higher quality, on-line appendix provides videos
planner controlling hardware prototype. integrated approach on-line
planning scheduling allows us achieve high throughput even complex systems.
416

fiOn-line Planning Scheduling Modular Printers

Figure 1: prototype modular printer built PARC. system composed approximately 170 individually controlled modules, including four print engines.

conclude paper summary general lessons derived building
application.

2. Application Context
analogy parallel systems RAID storage, approach modular printing
systems called Rack Mounted Printing (RMP). RMP system seen network
transports linking multiple printing engines. transports known media
path. Figure 1 shows four-engine prototype printer built Palo Alto Research Center
(PARC) 170 independently controlled modules. Figure 2 provides schematic
side view, showing many possible paper paths linking paper feeders possible
output trays. (Video 1 on-line appendix, nominal simulation, presents animation
Figure 2.) Multiple feeders allow blank sheets enter printer high rate
multiple finishers allow several print jobs run simultaneously. redundant paths
machine enables graceful degradation performance modules fail.
building system relatively small modules, enable easy reconfiguration
417

fiRuml, Do, Zhou, & Fromherz

Figure 2: schematic side view modular printer indicating feeders, paper path,
output trays.

components add new modules functionality. Achieving benefits, however, poses
considerable control challenge.
modular printing domain reminiscent mass customization, massproduced products closely tailored personalized individual customers needs.
similar package routing logistics problems. control perspective,
involves planning scheduling series sheet requests arrive asynchronously
time front-end print-job submission rendering engine. system runs
high speed, several sheet requests arriving per second, possibly many hours.
sheet request completely describes attributes desired final product. may
several different sequences actions used print given sheet. example,
Figure 2, blank sheet may fed either two feeders, routed
one four print engines (or combination two four engines
case duplex printing) either finisher (unless sheet part on-going
print job).
on-line planning problem complicated fact many sheets in-flight
simultaneously plan new sheet must interfere sheets.
actions require use physical printer components, planning later sheets must take
account resource commitments plans already released production.
modern printers highly configurable, execute large variety jobs potentially
simultaneously, large variety constraints feasible plans, hard-coded
locally-reactive plans suffice (Fromherz et al., 1999). fact, printer engineers
Xerox delight uncovering situations products competing manufacturers,
use model-based planning, attempt execute infeasible plans.
418

fiprinter
model

Translator

On-line Planning Scheduling Modular Printers

domain
description

Planner

failures

Translator

problem
description
sheet
description

constraints

STN

plans
time info
itineraries

goals

Plan Manager

rejections,
failures,
updates

Machine
Controller

Figure 3: system architecture, planning system indicated dashed box.

planning system must decide print requested sheets quickly possible
thus must determine plan schedule sheet end time
plan finishes last minimized. words, planner attempts minimize
makespan combined global plan sheets, essence optimizing systems
overall throughput. Typically many feasible plans given sheet request;
problem quickly find one minimizes . optimal plan sheet depends
sheet request, resource commitments present previouslyplanned sheets. legal series actions always easily scheduled pushing
far future, entire printer become completely idle, course
desirable. on-line task set sheets grows time passes
plan execution (i.e., printing) interleaves plan creation. fact,
real-world wall clock end time want minimize production
sheet cannot start planned, speed planner affects value
plan! However, system often runs full capacity, thus planner usually need
plan rate sheets completed, may several per second.
challenging, domain forgiving: feasible schedules found quickly,
sub-optimal plans acceptable, plan execution relatively reliable.
printer controller works on-line real-time continual planning environment
three on-going processes: 1) on-line arrival new goals; 2) planning known goals;
3) execution previously synthesized plans. Figure 3 shows inputs outputs
planning system, domain model sheet requests entering left
communication low-level control system right. plan manager
responsible tracking status goal invoking planner necessary.
planning execution occur sequentially given sheet, processes
usually interleaved different sheets. Figure 4 sketches different steps
sheet-plan life cycle managed plan manager. Specifically, upon receiving, sheets
put unplanned first-in-first-out queue (sheets 6 7). sheet planner picks
one sheet time unplanned queue tries find route-plan
sheet (sheet 5). plan found put queue plans havent yet
sent printer controller (sheets 3 4). Another plan manager process regularly
checks planned queue decide earliest starting time plan queue
419

fiRuml, Do, Zhou, & Fromherz

sheet 1
sheet 2
sheet 5

sheet 3

sheet 6

start time

sheet 7

sheet 4

sheet
ddescriptions
ti

yet
planned


planned

planned,
unsent

sent
printer

Figure 4: Stages life sheet planning system.
close enough current wall-clock time send plans printer controller
execution (sheets 1 2). Note figure, time advances downward plans
starting earlier higher figure. Sheets 1, 2, 3 finish order; sheets 4 5
belongs different job scheduled run concurrently.
application, additional negotiation step plan issued
planning system plan committed. First, plan step proposed
machine controller modules involved. individual hardware modules
steps accept proposed actions, plan committed. discuss below,
commitment means modules become responsible notifying controller fail
complete action realize able perform planned action
future. plan confirmed, planner cannot modify it. thus
benefit releasing plans machine controller start times approach.
modules confirm, machine controller notifies planning system
proposed plan rejected, system must produce new plan. negotiation
process one reason must find complete plan starting execution.
module limited number discrete actions perform, transforming
sheet known deterministic way. many actions, planner allowed
control duration within range spanning three orders magnitude (milliseconds
seconds). example, planner may choose transport sheet faster slower
module order avoid collisions. Actions may split sheet two pieces
join multiple sheets different paths printer together. means single
printed sheet must created single blank sheet size, thereby conflating
sheets material allowing plans linear sequence actions. domain,
adjacent actions must meet time; sheets cannot left lingering inside printer
action completed must immediately begin transported next location.
Sheets grouped print jobs. job ordered set sheets, must
eventually arrive destination order submitted.
Multiple jobs may production simultaneously, although sheets different
420

fiOn-line Planning Scheduling Modular Printers

jobs allowed interleave single destination, number concurrent jobs
limited number destinations (i.e., finisher trays).
Currently, Xerox uses constraint-based scheduler control high-end midrange printers (Fromherz et al., 1999). scheduler enumerates possible plans
machine starts stores database. printing requests arrive on-line,
scheduler picks first feasible plan database uses temporal constraint
processing schedule actions. decoupling planning scheduling insufficient
complex machines two reasons. First, number possible plans large
generate ahead time, indeed becomes infinite loops present, printer
shown Figure 2. Second, precompiled plans poor choices given existing
sheets system. example, sheets fed different feeders depending
previous sheets fed, large are, long dwell
print engines (which function sheet thickness material). high
performance, must integrate planning scheduling on-line fashion.
Occasionally module break down, failing perform committed action. Modules
take off-line intentionally, example perform internal re-calibration
diagnosis. Modules may added subtracted system information
passed machine controller planning system right side Figure 3.
vision RMP system provide highest possible level productivity
safe, including running long periods degraded capabilities.1 Meeting
mandate context highly modular systems means precomputing limited set
canonical plans limiting on-line computation scheduling desirable.
large system 200 modules, infeasibly many possible degraded configurations
consider. Depending capabilities machines, number possible sheet
requests may make plan precomputation infeasible. Furthermore, even best precomputed plan given sheet may suboptimal given current resource commitments
printing machine.
summarize, domain finite-state, fully-observable, specifies classical goals
achievement. However, planning on-line additional goals arriving asynchronously.
Actions real-valued durations use resources. Plans new goals must respect
resource allocations previous plans. Execution failures domain model changes
occur on-line, rare.

3. System Overview
complete printing system encompasses many components, including print-job submission,
print-job management planning, sheet management planning, image rendering
distribution, low-level module control, media handling hardware, exception handling.
paper focuses planning issues sheet level, including exception handling.
discussing one issue great detail, section provides overview
topics involve sheet planning directly, including hardware control exception
handling.
1. example, safety operator, system continue use module whose access
cover opened, even hypothetically possible repair one portion module
another use.

421

fiRuml, Do, Zhou, & Fromherz

Time Step
1

2

3

4

5

6

Feed 1 2
Print

1

Loop
Finish

2

2

2

2

1
2

2
1

1

3

4

1

2

5

2
2

1

2

Figure 5: Two different schedules printing duplex sheet (2) simplex sheet (1):
launching sheets order improves throughput.

Figure 3 shows basic architecture planning system communicates
machine controller. overall objective minimize makespan
combined global plan sheets, essence optimizing systems throughput.
approximate planning one sheet time, objective sheet
finish quickly possible respecting ordering constraints may
sheets. Sheets optimally planned individual basis, order arrival, without
reconsidering plans selected previous sheets. figure, plan manager calls
planner sheet records resulting plan. mitigate restrictiveness
greedy scheme, represent action times using temporal constraints instead absolute
times. constraints stored simple temporal network (Dechter, Meiri, & Pearl,
1991), marked STN figure. maintaining temporal flexibility long possible,
shift plans older sheets later time make room starting new sheet earlier
improves overall machine throughput. may sound rare case,
quite common. Figure 5 illustrates how, simplex (single-sided) cover sheet followed
duplex (double-sided) sheet, faster overall launch second sheet first.
Although basic architecture specifically adapted on-line setting, planner uses domain-dependent search control knowledge. Furthermore, mix goaldecomposable planning cross-goal resource constraints quite common, believe
framework useful AI system needs interleave real-time decision
making, planning, execution, robot operations.
3.1 Planning
implemented temporal planner using architecture adapted
on-line domain. see below, large number potential plans given
sheet close interaction plans schedules means much
better process scheduling constraints planning process allow focus
planning actions executed soon. planner uses state-space regression,
temporal information stored STN. STN records feasible interval
time point plan. Time points restricted occur specific single times
posted constraints demand it. planner maintains partial orders
different actions plans different sheets STN conducting
422

fiOn-line Planning Scheduling Modular Printers

On-linePlanner
1. plan next sheet
2. unsent plan starts soon,
3.
foreach plan, oldest imminent one
4.
clamp time points earliest possible times
5.
release plan machine controller
PlanSheet
6. search queue {final state}
7. loop:
8.
dequeue promising node
9.
initial state, return
10. foreach applicable action
11.
apply action
12.
add temporal constraints
13.
foreach potential resource conflict
14.
generate orderings conflicting actions
15
enqueue feasible child nodes
Figure 6: Outline hybrid planner
backward state-space search, seen hybrid state-space search
partial-order planning. sketch planner given Figure 6. outer loop
corresponds plan manager Figure 3.
planning new sheet, outer loop checks queue planned sheets see
begin soon (step 2). imperative recheck queue periodic
basis, soon defined constant amount current time
assume time plan next sheet smaller constant.
value constant depends domain specifics communication delay
module preparation time currently selected manually. assumption violated,
interrupt planning next sheet start later. plans released
executed, resource contention decrease, time plan new sheet
decrease well. important new temporal constraints added outer loop
planning individual sheets, propagation affect feasible sheet end
times thus could invalidate previously computed search node evaluations planning
underway.
maintaining partial orderings actions seems necessary mitigate
one-sheet-at-a-time greedy strategy, planning individual sheets need necessarily
take form state-space regression. considered forward search strategy,
employed many modern planners (Hoffmann & Nebel, 2001) LAMA
(Richter, Helmert, & Westphal, 2008). Initial investigation preliminary empirical comparisons showed progression planner easier implement easier extend
handle additional domain complexities, performance regression planner (using
heuristic) significantly better many problems domain. seems
423

fiRuml, Do, Zhou, & Fromherz

due mainly temporal constraint enforcing given sheet end
end time previous sheets batch. constraint interacts well
searching backward goal, immediately constraining end time plan.
Together constraint actions must abut time, many possible orderings
resolving resource contention immediately ruled out. example, current sheet
cannot transported destination previous sheet batch.
addition, orderings may immediately push end time plan even later,
informing node evaluation function.
planner searches forward direction benefits slightly avoiding logical
states unreachable initial state. However, without similar temporal
constraint first action plan, resource allocation orderings pruned
branching due resource contention increases direct proportion number
plans previous sheets maintained plan manager. Furthermore, end time
plan rarely changes far planning processes, making heuristic less
useful. short, first sheet, performance forward backward planners
similar, number plans managed plan manager increases, backward
planner seems perform better.
Due details machine controller software, planner must release plans
machine controller order sheet requests submitted.
means sheets submitted imminent sheet must released along (step
3). stage allowable intervals sheets time points forcibly reduced
specific absolute times (step 4). Sensibly enough, ask point occur exactly
earliest possible time. temporal network uses complete algorithm
maintain allowable window time point (a variation Cervoni, Cesta, & Oddi,
1994), guaranteed propagation caused temporal clamping process
introduce inconsistencies. clamping happens plans issued; thus
face on-line dispatchability problem Muscettola, Morris, Tsamardinos
(1998).
current on-line setting, even though plan multiple sheets belonging
different jobs, build plans single sheet time. Even many submitted
sheets waiting planned, strategy reasonable given sheets arrived sequence
and, arrival last sheet, know many sheets job
planner receive individual sheet specifications. Waiting sheets
known impractical many production jobs, billing payroll, involve jobs
many thousands sheets run multiple days.
3.2 Control
shown Figure 2, system consists two feeders left, two finishing trays
right, four print engines one four quadrants printer.
three high-speed sheet highways connect feeders finisher trays.
Sheets traveling top bottom highways routed print engines
on-ramps off-ramps. increased modularity, highways
on- off-ramps made two types modules: straight-through modules
three-way modules. module processor: Texas Instruments F2811
424

fiOn-line Planning Scheduling Modular Printers

Figure 7: control system architecture.

DSP. modules run distributed algorithms state estimation control
communicate via five controller-area network (CAN) buses, plus
dedicated data-logging bus debugging purposes. Modules quadrant
printer reside bus, except four print engines,
separate bus. Sheets moved roller actuators, called nips, driven
independently-controlled stepper motors. sensory feedback, nip equipped
edge-detection sensor sides nip. three-way module, three
solenoids drive flipper actuators direct sheet along different paths.
Figure 7 shows control system architecture, implements hierarchical approach distributed plan execution sheet controller manages module
controllers currently, soon be, contact sheet. Thus sheet
controller group membership dynamic life cycle sheet, starting
feeder way finisher tray. soon new sheet sent machine controller, corresponding sheet controller created resides centralized processor,
even though module controllers manages reside locally modules themselves.
Note module controller may processing commands multiple sheet controllers,
case module controller middle Figure 7. still contact
first sheet, soon contact second sheet.
sheet span multiple modules printer, different nips acting
sheet must tightly synchronized order avoid damaging jamming sheet.
However, achieving exact synchronization network uncertain communication
delays stringent bandwidth challenging. Moreover, one must consider limited
computation power module design synchronization scheme. example,
controller sample time set 2 milliseconds. Thus, anything takes longer 2
milliseconds compute within sampling period work. eliminate effects
uncertain network delays, control system uses delay equalizer, buffers sensory
feedback messages apply time, make sure sensor information used
time members group module controllers sheet. save
bandwidth needed synchronization, controller uses internal models (or estimators)
keep track states controllers network order limit need
425

fiRuml, Do, Zhou, & Fromherz

communications (Crawford, Hindi, Zhou, & Larner, 2009; Hindi, Crawford, & Fromherz,
2005).
limited network bandwidth fundamental impact choice control algorithm. Initially, linear-quadratic-gaussian (LQG) (Franklin, Powell, & Workman, 1997)
controller used, nice property solution constitutes linear dynamic feedback control law easily computed. However, bandwidth requirements
LQG controller, necessitates dozen way points per sheet
sent network, prompted adoption different kind controller based
proximate time optimal servo (PTOS) (Hindi, Crawford, Zhou, & Eldershaw, 2008;
Franklin et al., 1997), consumes much less bandwidth. comparison, PTOS
controller reduces number intermediate way points dozen two
per sheet. Since PTOS based time optimal control uses either maximum acceleration deceleration reach target control state, maximizes temporal
flexibility planning actions planner use, thus improving overall
throughput printer.
3.3 Previous Work
much interest last 15 years integration planning scheduling techniques. HSTS (Muscettola, 1994) IxTeT (Ghallab & Laruelle, 1994) examples systems select order actions necessary reach goal,
specify precise execution times actions. Visopt ShopFloor system Bartak
(2002) uses constraint logic programming approach incorporate aspects planning
scheduling. Europa system Frank Jonsson (2003) uses novel representation based attributes intervals. system use domain representations
quite different mainstream PDDL language (Fox & Long, 2003) used planning
research designed off-line use, rather controlling system
continual execution.
currently great interest extending planning scheduling techniques handle complexities found real industrial applications. example, PDDL
extended handle continuous quantities durative actions. additional
dimensions planning complexity besides expressivity, however. work complements
trend current planning research extend expressiveness focusing middle ground planning scheduling. domain semantics printing
complex job shop scheduling simpler many ways PDDL2.1. Choice
actions perform important domain, managing resource conflicts equally
important. classical scheduling, resource constraints essential printer
modules often cannot perform multiple actions once. action selection sequencing required given sheet usually achieved using several different
sequences actions.
domain formalization lies partial-order scheduling temporal PDDL.
optimal actions needed fulfill given print-job request may vary depending sheets machine, sequence actions predetermined
classical scheduling formulations job-shop scheduling resource-constrained
project scheduling expressive enough. domain clearly subsumes job-shop
426

fiOn-line Planning Scheduling Modular Printers

flow-shop scheduling: precedence constraints encoded unique preconditions
effects. Open shop scheduling, one choose order predetermined set
actions job, capture notion alternative sequences actions
thus limited. positive planning theories Palacios Geffner (2002) allow actions real-valued durations allocate resources, cannot delete
atoms. means cannot capture even simple transformations movement
fundamental domain. fact, optimal plans domain may even involve executing action multiple times, something always unnecessary
purely positive domain. However, numeric effects full durative action generality
PDDL2.1 necessary.
on-line nature task unambiguous objective function,
additional trade-off domain planning time execution time
absent much prior work planning scheduling. setting set sheets
revealed incrementally time, unlike classical temporal planning entire
problem instance available once. contrast much work continual planning
(desJardins, Durfee, Ortiz, & Wolverton, 1999), tight constraints domain require
produce complete plan sheet execution begin. domain
emphasizes on-line decision making, received limited attention date.
objective complete known print jobs soon possible, taking long
synthesize slightly shorter plan worse quickly finding near-optimal solution.
especially true rerouting in-flight sheets exception handling.
Although present system temporal planner, fits easily tradition
constraint-based scheduling (Smith & Cheng, 1993; Policella, Cesta, Oddi, & Smith,
2007). main difference actions time points resource allocations added
incrementally rather present start search process. central
process identifying temporal conflicts, posting constraints resolve them, computing
bounds guide search remains same. approach, attempt maintain
conflict-free schedule rather allowing contention accumulate carefully
choosing conflicts resolve first. approach perhaps similar spirit
taken IxTeT system (Ghallab & Laruelle, 1994).
basic approach coordinating separate state-space searches via temporal constraints may well suitable on-line planning domains. planning individual
print jobs managing multiple plans time, strategy similar spirit
planners partition goals subgoals later merge plans individual goals (Wah
& Chen, 2003; Koehler & Hoffmann, 2000). framework, even though print job
planned locally, plan manager along global temporal database ensures
temporal resource inconsistencies step search. would
interesting see strategy could used solve partitionable STRIPS planning
problems effectively.

4. Nominal Sheet Planning
sheet planner builds plan sheet job using combination regression
state-space planning partial-order scheduling. plans adding one module action
time, starting finisher sequence actions reaches feeder. Adding
427

fiRuml, Do, Zhou, & Fromherz

action sheets itinerary (i.e., plan) causes resource allocations made
resources required execution action. Given media path redundancies
RMP, planner usually faces multiple choices action add planning
step. organize search, planner uses best-first A* search planning-graph
heuristic, adjusted resource conflicts, estimates promising plan suffix
is. Unlike traditional regression planners, maintain maximum flexibility, action times
start end action resource allocation represented
flexible time points instead absolute times. Temporal constraints used represent
durations actions resolve resource contention imposing orderings among actions.
planner attempts minimize makespan combined global plan sheets,
essence optimizing systems throughput. planner uses domain-dependent
search control knowledge, allowing us use planner run different printing
systems full productivity.
4.1 Domain Language
used two-tiered approach represent RMP domain. highest level,
use specialized language makes easier Xerox engineers model printers.
language specifies printer configurations components connected
other. Basic components different capabilities components grouped
hierarchical structure. model files format automatically translated
variation PDDL2.1, fed planner. automatic translation
process instantiates primitive modules converts modules capabilities
durative actions. movement sheet marking actions directly
translated printer model traditional logical preconditions effects test
modify attributes sheet. Following spirit compositionality earlier work
(Fromherz et al., 1999), model system automatically synthesized
models individual components.
PDDL, distinguish two types input planner. planning
begins, domain description containing predicate action templates provided.
problem descriptions arrive on-line, containing initial goal states, sets
literals describing starting desired configurations. action representation
similar durative actions PDDL2.1, notable difference use
explicit representation resources. Actions specify exclusive use different types
resources time intervals specified relative actions start end time. Executing
one action may involve allocating multiple resources various types as: unit-capacity,
multi-capacity, cyclic, state resources. actions specify real-valued duration
bounds. is, one specify upper lower bounds let planner choose
desired duration action. critical modeling controllable-speed paper
paths, useful practice. PDDL allows specification duration
ranges, aware IPC benchmark general-purpose planner
supports it.
summarize, core part domain file set actions, corresponds
capability component printer 4-tuple = hPre, Eff, dur, Alloci,
where:
428

fiOn-line Planning Scheduling Modular Printers

PrintSimplexAndInvert(?sheet, ?side, ?color, ?image)
preconditions: Location(?sheet, Printer1-Input)
Blank(?sheet)
SideUp(?sheet,?side)
Opposite(?side, ?other-side)
CanPrint(MarkingEngine, ?color)
effects: Location(?sheet, Printer1-Output)
Location(?sheet, Printer1-Input)
HasImage(?sheet,?side,?image)
Blank(?sheet)
SideUp(?sheet, ?side)
SideUp(?sheet,?other-side)
duration: [13.2 seconds, 15.0 seconds]
set-up time: 0.1 second
allocations: MarkingEngine ?start + 5.9 3.7 seconds
Figure 8: simple action specification.
Pre Eff sets literals representing actions preconditions effects.
dur pair hlower, upperi scalars representing upper lower bounds
action duration.
Alloc set triplets hres, offset, duri indicating action starting time sa
uses resource res interval [sa + offset, sa + offset + dur]. constraints
different types resources are:
Unit-capacity: type resource non-sharable thus allocations
given resource type overlap. provides good model
physical space common type resource used planner.
Cyclic: cyclic resource one special type unit-capacity resources
repeated durations resources unavailable
actions selected planner. example, unavailable durations may
represent routine automatic maintenance modules.
Multi-capacity: upper-bound maximum number allocations
given resource type overlap. Moreover, allocations follow
first-in-first-out order. Thus, two allocations A1 = [sA1 , eA1 ]
A2 = [sA2 , eA2 ] sA1 sA2 implies eA1 eA2 .
State resource: resource labeled using one set states. Allocations resource type overlap require
resource state.
simple example given Figure 8. Set-up time refers required time
action committed execution beginscertain actions require extensive
preparation part module sheet arrives action really
429

fiRuml, Do, Zhou, & Fromherz

background:
initial:

goal:

print job ID:

Sheet-23
Location(Sheet-23, Some-Feeder)
Blank(Sheet-23)
SideUp(Sheet-23,Side 1)
Location(Sheet-23, Upper-Finisher)
HasImage(Sheet-23, Side 1, Image 1)
HasImage(Sheet-23, Side 2, Image 2)
Color(Sheet-23, Side 1, Color)
Color(Sheet-23, Side 2, Black & White)
5

Figure 9: sample sheet specification.
performed. resource usage, PrintSimplexAndInvert action Figure 8 specifies
exclusive use MarkingEngine 5.9 seconds start action 3.7
seconds later. Printer modules multiple independent resources actions
short allocation durations relative overall action duration work multiple
sheets simultaneously. PDDL, arbitrary predicates made hold start,
end, duration action. expressivity needed domain
thus assume simple semantics similar using TGP planner Smith
Weld (1999) which: (1) delete effects happen start; (2) add effects happen
end; (3) preconditions deleted start; (4) preconditions
deleted all. addition sheet-dependent literals, sometimes convenient
specify actions using preconditions refer literals independent
particular goals sought. background knowledge domain supplied
separately machine specification, although could compiled action
specifications. example, possible colors engines put sheet paper
(e.g., Black&White, Color, Custom Color) default sides papers (e.g., Front, Back)
specified way. represented similarly constant concept PDDL.
addition static domain description, on-line sheet requests modeled
initial goal state pairs describing starting desired sheet configurations.
new initial/goal pair defines new object (the sheet) associated literals
planner track. Specifically, problem description particular sheet 4-tuple
hJob, Initial, Goal, Backgroundi, Job id print job sheet belongs
Initial, Goal, Background sets literals.
simple example sheet specification given Figure 9. example, Some-Feeder
virtual location sheet sources placed Upper-Finisher one particular
finisher sheets belong print job 5 need routed to. terms Figure 3,
feeder location literal added goal plan manager, maintains
table active jobs finisher assigned each. Finisher assignment handled
extracting finisher selected planner plan first sheet job.
finishing requires actions plan actions never reconsidered (only
rescheduled), planner never reconsider jobs finisher assignment, even hasnt
begun production yet.
430

fiOn-line Planning Scheduling Modular Printers

Given domain description (top left Figure 3) low-level delay constant tdelay
capturing latency machine controller software, planner accepts stream
sheets arriving asynchronously time. Note sheets may belong different print
jobs printed parallel; within print job, sheets need routed
finisher (among multiple finishers) finish order. stream corresponds
standard notion PDDL problem instance. sheet, planner must eventually
return plan: sequence actions labeled start times (in absolute wall clock time)
transform initial state goal state. allocations made
unit-capacity resource multiple actions must overlap time (state multi-capacity
resources different constraints described earlier). Happily, plans individual sheets
independent except interactions resources. Additional constraints
planner include:
plans sheets print job id must finish destination,
plans sheets print job id must finish order
jobs submitted,
first action plan must begin sooner tdelay seconds issued
planner (with tdelay represents delays communication negotiation
printer module controller),
subsequent actions must begin times obey duration constraints specified
previous action (thus assumed previous action ends
next action starts).
4.2 Temporal Reasoning
Printer control rich temporal domain real-time constraints: (i) wall-clock
time plans individual sheets, (2) plans different sheets, (3) planner machine controller. Thus, fast temporal constraint propagation,
consistency checking, querying extremely important planner. maintain
temporal constraints using Simple Temporal Network (STN) (Dechter et al., 1991),
represented box named STN Figure 3. Essentially, network contains set
temporal time points ti constraints form lb ti tj ub .
time points managed STN include action start end times resource allocation
start end times. Temporal constraints maintained STN are:
constraints wall-clock action start time;
action start end times within action duration range;
constraints action start time resource allocation action;
conflicts various types resources.
use A* search strategy maintains multiple open search nodes,
separate STN node. Temporal constraints added appropriate STN
search node expanded. Whenever new constraint added, propagation tightens
431

fiRuml, Do, Zhou, & Fromherz

Planning Time (in seconds)

IDPC
AC-3

4

2

0
20

40

60

80

100

Sheet Number

Figure 10: Simple arc consistency faster incremental directed path consistency
maintaining STNs.

upper lower bounds domain affected time point. lead
memory usage extra overhead, allows us deal temporal
constraint retraction, needed single STN used multiple search nodes.
Retracting temporal constraints STN complicated time consuming process.
planner must run indefinitely, perform garbage collection time points
STN sheet planning episodes, harvesting lie past.
time points flexible plans belong sent machine
controller. planning new sheet, plan manager checks queue planned
sheets see could begin soon. are, plans released
machine controller execute. New temporal constraints added freeze
start end times actions belonging plans sent controller. time points
frozen earliest possible wall-clock time indicated STN based
constraint set. constraints cause significant propagation turn (1) freeze
start end times resource allocations related actions frozen plans;
(2) tighten starting times actions remaining plans.
original representation STN complete matrix time relations updated
all-pairs shortest paths (Dechter et al., 1991) much inefficient purposes.
implemented two versions STN. One uses incremental directed path
consistency (IDPC) algorithm (Chleq, 1995), may change values edges
constraint graph well introduce new edges requires linear time find
minimum maximum interval two time points database.
uses arc consistency (Cervoni et al., 1994) maintains point minimum
432

fiOn-line Planning Scheduling Modular Printers

maximum times t0 , reference time point. latter method, one cannot
easily obtain exact relations arbitrary time points, relations t0 .
However, long inconsistency efficiently detected constraints added,
need query relations arbitrary pairs points, efficiency gains
welcome. New arcs never added network propagation existing
ones modified, means copying network new search node
entail copying arcs. Figure 10 attests, results dramatic time
savings technique used current implementation. improved
implementation (1) using change flags facilitate faster cycle detection temporal
consistency checking (2) converting times durations integer values (with user
defined precision) eliminate rounding effects increase speed.
4.3 Planning Sheet
planning individual sheets, regressed state representation contains state
sheet, may partially specified. A* search used find optimal plan
current sheet, context previous sheets. optimal plan
sheet found, resource allocations STN used plan passed back
plan manager become basis planning next sheet.
One unusual feature planning approach seamlessly integrate planning
scheduling. Starting times actions fixed merely constrained temporal
ordering constraints STN. insist potential overlaps allocations
resource resolved immediately, resulting potentially multiple children
single action choice. allows temporal propagation update action time bounds
guide plan search. plan single sheet totally-ordered sequence
actions, partial orders actions belong plans different sheets
represent resource conflict resolutions.
4.3.1 State Representation
plan must feasible context previous plans, state contains
information current sheet previous plans. specifically, state
3-tuple hLiterals, Tdb, Rsrcsi which:
Literals describes regressed logical state current sheet. distinguish
literals whose status true, false, unknown (Le, Baral, Zhang, & Tran, 2004).
distinction false unknown literals important domain may fine-grained restrictions acceptable values unspecified
attributes sheet. example, sheet first given print job,
finisher representing final location sheet unknown
finisher allocated another print job plan sheet
executed. discuss below, allow regression match unknown literals
true false effects actions; sense unknown function dont
care. implementation, represent explicitly literals currently
true whose value unknown, false literals represented implicitly.
433

fiRuml, Do, Zhou, & Fromherz

Tdb temporal database represented simple temporal network (STN) containing
known time points current constraints them. includes constraints different plans, actions plan, well
wall-clock time. Examples time points include start/end times actions
resource allocations. soon plan given sheet sent machine
(sheets 1 2 Figure 4), time points associated plan Tdb
longer allowed float clamped lower bounds. time points
flexible.
Rsrcs set current resource allocations, representing commitments made
plans previous sheets partial plan current sheet. resource
allocation form hres, tp , tp res particular resource tp1 , tp2
two time points Tdb representing duration res allocated action.
Note multiple resources domain resource
multiple (overlapping non-overlapping depending resource type) resource
allocations. implementation, maintain ordered list allocations
resource, recent oldest.
essence, state contains information reflecting strategy planner: hybrid state-space sequential temporal regression search partial order scheduling.
Literals action start end time-points represent temporal-planning regressed
state Rsrcs temporal orderings competing resource allocations represent partial-order scheduling constraints actions plans different sheets.
4.3.2 Branching Applicable Actions
regressed logical state planner 3-tuple L = hLt , Lf , Lu Lt , Lf ,
Lu disjoint sets literals true, false, unknown, respectively. Pre+ (a)
Pre (a) sets positive negative preconditions Add(a) Del(a)
sets positive negative effects action a, regression rules used
determine action applicability update state literals are:
Applicability Action applicable literal set L (1) none effects inconsistent L (2) preconditions modified effects


consistent L. formally, (1) (Add(a) Lf = ) (Del(a) Lt = ), (2)


(Pre+ (a) Lf Del(a)) (Pre (a) Lt Add(a)).

many planning settings, additional criterion applicability added withT
destroying completeness: least one effect must match L ((Add(a) Lt 6=

) (Del(a) Lf 6= )). necessarily valid setting adding
no-op action may give time existing resource allocation run out,
enabling actions used might lead shorter plan.

Update regression L = hLt , Lf , Lu applicable action derived undoing effects unioning result preconditions. given literal
l modified effect a, status unknown regressed state unless
specified corresponding precondition (e.g., l precondition a).
434

fiOn-line Planning Scheduling Modular Printers

formally, (1) Lt = (Lt \ Add(a)) Pre+ (a); (2) Lf = (Lf \ Del(a))



3) Lu = (Lu (Add(a) Del(a))) \ (Pre+ (a) Pre (a))




Pre (A);

Given |Lf | usually much larger |Lt | |Lu | domain, explicitly store
Lt Lu current implementation use closed-world assumption imply
literals belong Lf . modeling translator provide Xerox engineers
modeling printers encourages effects mentioned preconditions, reducing
growth number unknown literals. example, x Add(a) x P (a).
Although usually case domain, note goal
state always fully specified (with unknown literals) every actions effects
corresponding preconditions, regressed states would fully specified. One could
simplify logical state representation L = hLt , Lf simplify regression rules
Applicability Action applicable iff effects match L: Add(a) Lt
Del(a) Lf .
Update Regressing hLt , Lf gives h(Lt \Add(a))



Del(A), (Lf \Del(a))



Add(a)i

plan considered complete literals unify desired initial state (step 9
Figure 6). optimal plan sheet found, temporal database used
plan passed back outer loop Figure 6 becomes basis planning
next sheet. feasible windows maintained around time points plan
plan released machine controller, subsequent plans allowed make
earlier allocations resources push actions earlier plans later.
ordering leads earlier end time newer goal, selected. provides
way complex job j2 submitted simple job j1 start execution
printer earlier j1 . order starts allowed long sheets print
job finish correct order. often provide important productivity gains.
4.3.3 Branching Resource Allocation Orderings
first step creating regressed states branch actions applicable
L, applying candidate action fact result multiple child nodes due
resource contention. scheduling algorithms use complex reasoning disjunctive
constraints avoid premature branching ordering decisions might well resolved
propagation (Baptiste & Pape, 1995). take different approach, insisting
potential overlaps allocations resource resolved immediately. Temporal
constraints posted order potentially overlapping allocations changes
propagate action times. many action durations relatively rigid typical
printers, aggressive commitment propagate cause changes potential end
times plan, immediately helping guide search process. multiple orderings
may possible, may many resulting child search nodes.
example, Figure 4, assume current candidate action searching
plan sheet 5 uses resource r duration [s, e]. assume
n actions plans sheets 14 use r, implying n existing
non-overlapping resource allocations [s1 , e1 ]....[sn , en ] corresponding time points
temporal database. trying allocate r a, one obvious consistent choice
435

fiRuml, Do, Zhou, & Fromherz

end time
new plan

earliest
start time
next actio


planning
start time

estimated length
plan come
(PG + Res. Conflict)

predicted
planning
time

end time
prev. plan
job

end time
plans

length
plan far

t1

t2

t3

t4

STN: plan starting time constraint

t5

t6

t7

STN: sheet ordering constraint

Branching actions, resource conflicts +
STN: resource contention constraints

Figure 11: Important time points constructing evaluating plan.
putting previous allocations adding temporal constraint en s.
However, gaps existing allocations [si , ei ], allowing us post
constraints ei e si+1 . possible allocation r generates
distinct child node search space. action use several different resources
r, number branches potentially quite large. However, immediately resolving
potential overlaps allocations resource avoids introduction disjunctions
temporal network, maintaining tractability temporal constraint propagation.
summary, every branch planners search space, modify logical state
branching relevant actions potentially introduce different temporal constraints
order resolve resource contention. branch results different irrevocable
choice reflected final plan, state node planners search tree
unique. Therefore, need consider problem duplicating search effort
due reaching state two different search paths.
4.3.4 Heuristic Estimation
potential plan suffix, lower bound computed remaining makespan,
order guide planners A* search. Figure 11 illustrates heuristic estimate
used. figure, planning start time (t1 ) refers wall-clock time
planning process started earliest-start-time = current wall-clock time + predicted planning time (t2 ) estimated time find plan current sheet
thus earliest time action scheduled begin. Note practice,
machine controller communication negotiation time added predicted
planning time. hypothetical start time plan found (t3 ) constrained
happen earliest possible wall-clock plan execution time (t2 t3 ). plan constrained end previous sheets print job (t5 t6 ),
necessarily constrained start plans previous sheets. start time
next action added regressed partial plan (t4 ) constrained occur least
436

fiOn-line Planning Scheduling Modular Printers

hypothetical plan starting time (t3 + t4 ) heuristic value
makespan remaining plan complete current regressed partial-plan.
overall objective minimize earliest possible end time plans, including
sheet planning for. indicated lower-bound floating
time point t7 Figure 11. time point constrained end time points
sheets planned one currently planned. current
sheet, represented constraints t6 t7 shown Figure 11. t6
constrained end completion time planned sheets
print job, constraint essentially pushes t7 sheets current print
job end. support objective function, primary criterion evaluating promise
partial plan (step 8 Figure 6) estimate earliest possible happening time
t7 , indicated STN embedded search node, constraints shown
Figure 11 added current branch.
key duration affects t7 heuristic estimate lower bound
additional makespan required complete current regressed plan. heuristic value
indicated Figure 11 estimated remaining makespan t3 t4 . adding
constraint t2 t3 , insertion may thus change earliest time subsequent time
points t4 , t5 , t6 t7 . may introduce inconsistency temporal database,
case safely abandon plan. Given current plan end
end time previous sheets print job (t5 t6 ), objective function
minimize t7 without causing inconsistency temporal database. break ties
favor of:
smaller t6 (e.g., end time current print job)
smaller predicted makespan (t6 t3 )
larger currently realized makespan (t6 t4 ). analogous breaking ties
f (n) A* search larger g(n), thus encourages extension plans
nearer goal.
performance search-based planner heavily depends quality
heuristic estimating makespan-to-go. estimate building temporal planning
graph adjustment logical mutex resource contentions. rest
section, discuss details computed. Overall, want effective
planning heuristic is:
Admissible: maintaining high plan quality (high productivity printer)
important criterion customer.
Informed easy compute: cases, allowed fraction
second find feasible plan. delay finding plan delay plan start
execution time thus reduce overall productivity.
derive admissible estimate duration required achieve given set goals
G initial state, perform dynamic programming explicit representation
bi-level temporal planning graph, described TGP system (Smith
& Weld, 1999). TGP, planning graph represented fact level action
437

fiRuml, Do, Zhou, & Fromherz

level. Starting initial state time = 0, graph grown forward time
actions activated preconditions satisfied non-mutex.
three types mutual exclusion relations (fact-fact, fact-action, action-action)
propagated graph building process. graph expansion phase alternates
plan extraction phase starting time point goals appear nonmutex graph.
graph expansion algorithm, action fact f , store first times
ta tf optimistically occur f optimistically achieved.
correspond first times f appear temporal planning graph.
mutex propagation, store first time point pair facts hf1 , f2
achieved together pair actions ha1 , a2 execute together. planning
graph, first time points hf1 , f2 ha1 , a2 become non-mutex.
implementation, fact-action mutex fact f action converted action
mutex hnoopf , ai, discuss later.
1. begin: f, a, f1 , f2 , a1 , a2 : ta = tf = thf1 ,f2 = tha1 ,a2 = .
2. Let initial state: f, f1 , f2 : tf = 0, thf1 ,f2 = 0.
3. Dynamically update values ta , tf , thf1 ,f2 , tha1 ,a2 starting initial state
time = 0 follows:
ta = max (setup time(a),

max

f P rec(a)

tf ,

max

f1 ,f2 P rec(a)

thf1 ,f2 )

tf = min (ta + dur(a))

(2)

f Eff(a)

thf1 ,f2 = min (tha1 ,a2 +

max

(dur(a1 ), dur(a2 )))

f1 Eff(a1 ),f2 Eff(a2 )

tha1 ,a2 = max (ta1 , ta2 ,

max

f1 P rec(a1 ),f2 P rec(a2 )

(1)

thf1 ,f2 )

(3)

(4)

updates done increasing order time, usual planning-graph
building algorithms.
4. Stop g G : tg < g1 , g2 G : thg1 ,g2i < reach fixed point.
equations (1)-(4) shown above, actions include noop actions
normal planning graph. actions start time point fact first
achieved. mutex relation noop action equivalent fact-action
mutex described Smith Weld (1999). overall plan sheets
highly parallel, plan single sheet sequential. Therefore, currently use
serial version temporal planning graph, faster build consumes
less memory. version, two non-noop actions always mutex other.
Therefore, need store reason action mutexes thus value
tha1 ,a2 eq.(4) applicable mutexes noop real action.
438

fiOn-line Planning Scheduling Modular Printers

implementation, build graph starting = 0 putting events (1) activating
action (updating ta ); (2) activating fact (updating tf ); (3) removing fact mutex
(updating thf1 ,f2 ), ordered time occur. event trigger new events
happen later time. example, adding new fact f removing fact mutex hf1 , f2
activate actions supported f f1 f2 , activating action add
events activating facts Effect(a) and/or removing fact mutexes Effect(a)
noop (facts) mutex P recond(a). explicitly store factfact mutex timing values thf1 ,f2 none action mutexes tha1 ,a2 , instead reasoning
on-the-fly.
time goals achieved pair-wise non-mutex heuristic value
estimating remaining makespan achieve goal state (see Figure 11).
regression planners (Haslum & Geffner, 2001; Nguyen, Kambhampati, & Nigenda, 2002)
compute heuristic (until fixed point reached) planning process
begins, case, planning graph expansion process may revisited goals representing regressed state appear non-mutex graph fixed point
reached previous round expansion. pair-wise mutexes taken
account building graph, estimated value underestimate makespan
plan achieve goal. Therefore, returned value planning graph
lead underestimate (admissible heuristic) objective function (overall
end time t7 ) tie breakers (current sheet end time t6 current estimated makespan
t6 t3 ) described above. Therefore, using estimate, planner return plan p
optimal end time (minimum t7 ) p minimum makespan among
plans end time.
Incorporating resource mutexes planning graph discussed assumes
printer empty. Thus, create planning graph similar procedure
used off-line planner assume interference relations occur
actions related given sheet planning for. machine empty,
heuristic generally correct simple sheets simplex printing nearly correct
complicated sheets duplex printing.
However, time, printer empty plans sheets
either (1) executing; (2) found planner havent sent machine
controller yet. plans involve resource allocations, either fixed time points (for (1))
still flexible ones (for (2)). find effective heuristic scenarios
machine busy, take account resource mutexes, thus incorporating scheduling
resource contention constraints temporal planning graph. Figure 12 shows
pseudo-code algorithm. key observation that, find earliest time ta
action possibly execute, necessary condition
preconditions appear non-mutex planning graph resource
conflict resource r used current allocations r (given previous
plans external processes.)
shown example action description Figure 8, resource allocation
action represented triple hr, o, di. starts sa , means resource
r used sa + duration d, normally different duration
da a. example, lone resource usage action PrintSimplexAndInvert Fig439

fiRuml, Do, Zhou, & Fromherz

1. Resource types: r1 , r2 , ....rn
2. resource allocations: {R1 , R2 , ....Rn }
Ri = {[si1 , ei1 ], [si2 , ei2 ], ...[sim , eim ]} ordered list allocations ri
Function CheckEarliest(r, t, d)
3.
r: resource
4.
t: earliest time intend use r
5.
d: duration intend use r
6.
R = {[s1 , e1 ], [s2 , e2 ], ...[sm , em ]}: current allocations r.
7.
tmin : earliest time non-conflict allocation r; initialize to: tmin
8.
allocation l = [sk , ek ] R check
9.
reserve r duration l starts: Latest(sk ) > tmin +
10.
go line 14
11.
else move forward next possible opening end allocation
12.
tmin Earliest(ek )
13. end for;
14. return(tmin )
end function;
Building temporal planning graph
15. consider adding action planning graph
16. Initialize ta earliest time P rec(a) achieved non-mutex (eq.1)
17. Resource allocations a: Ra = {hr1 , o1 , d1 i, hr2 , o2 , d2 i, ..., hrn , , dn i}
18. allocation l = hrk , ok , dk check earliest non-conflict time l
19.
ta CheckEarliest(ri , ta + oi , di ) oi
20. end for;
21. add action temporal planning graph ta
goals appear non pairwise mutex;
Figure 12: Building temporal planning graph adjustments resource conflicts.
ure 8 (M arkingEngine, 5.9, 3.7). Lines 17-19 Figure 12 show building
graph, action preconditions satisfied ta , algorithm goes
resources used a. resource allocation hr, o, di, calls function
CheckEarliest(r, ta +o, d) update ta , earliest executable time start without
overlapping previous resource allocations r. pseudo-code function
CheckEarliest(r, t, d) self-explanatory try find earliest time point
slot allocation r duration without overlapping
previous allocations r.
Figure 13 shows one example demonstrate algorithm. example, try
find starting time action a, needs two unit-capacity resource allocations
hr1 , o1 , d1 hr2 , o2 , d2 shown top-left corner. Assume building
graph, preconditions first achieved non-mutex time t1 . Referring
Figure 13, fixed allocations r1 allocations (1), (2), and(3) r2 (1)
440

fiOn-line Planning Scheduling Modular Printers

sA

A:
r1

dA

o1

d1

r2

o2
(1)

r1

eA

d2
(2)

(3)

(1)

r2

t3

d2

o2

o1

t2

(4)

(3)

(2)

d1

t1

(4)

t4

t5

Figure 13: Example action starting time adjustment using resource contentions
(2). flexible allocations, shown upper/lower bound constraints (4) r1
(3) (4) r2 . Starting t1 , first time point allocate r1
duration d1 without overlapping previous allocations, fixed flexible, t3 .
Thus, adjust new earliest possible starting time t2 = t3 o1 t1 . Given
new earliest possible starting time ta = t2 , find earliest time point t2
allocate resource r2 t5 . Given t4 = t5 o2 t2 , take
t4 final earliest starting time activate action t4 graph (instead
original value t1 )2 .
resource mutexes, starting times actions adjusted higher time
points preconditions achieved, thus time point tG
goals appear non-mutex graph underestimation makespan
remaining plan (value t4 t3 Figure 11). Thus, tG higher summation
durations actions optimal (serial) plan. However, tG still underestimates
first time achieve goals thus still admissible heuristic
main objective function minimizing end time current printing sheets (minimizing
t7 Figure 11). However, use resource mutexes, heuristic
estimate end time (t7 ) tie-breaker plan makespan (t6 t3 ) admissible
resource mutexes, estimate t7 admissible tie-breaker t6 t3
2. Note go resource allocations given action one time (lines 18-20 Figure 12).
Therefore, even action Figure 13 added t4 , still potential conflict resource
r1 consumed (with existing allocation (3) r1 ). However, repeating procedure
(lines 18-20 Figure 12) multiple times fixed point reached (and potentially returning better
heuristic estimate), seek balance heuristic quality heuristic computation time.

441

fiRuml, Do, Zhou, & Fromherz

time (sec)

2
no-mutex
logical mutex
log + res mutex
productivity level

1.5

1

0.5

0
1

4

7 10 13 16 19 22 25 28 31 34 37 40 43 46 49

Figure 14: Performance prototype built industrial partner.

inadmissible. Thus, A* algorithm still guaranteed find optimal solution,
minimizing plan end-time, final solution guaranteed shortest
duration among plans finish earliest.
4.4 Evaluation Nominal Planning
collaboration Xerox, deployed planner control three physical prototype multi-engine printers. deployments successful planner
used simulation control hundreds hypothetical printer configurations.
planner written Objective Caml, dialect ML, communicates job
submitter machine controller using ASCII text sockets. planner
communicate plan visualizer graphically display plans. first two videos
on-line appendix show planner controlling prototype depicted Figures 1
2 full productivity, using visualizer (video 1, nominal simulation)
hardware (video 2, nominal hardware). full description videos found
textual appendix paper. shortest single plan machine 25 actions.
Given many sheets printer given time planner
plan ahead, plan manager consistently manages dozens plans hundreds actions. planning, planner needs temporal reasoning regarding conflict
actions current plans hundreds actions previous plans. Even so,
planner consistently average produces plans within 0.27 seconds required keep
printer running full productivity (220 pages/minute). one complex
current Xerox commercial products, planner regularly find optimal plan within
0.01 seconds plan ahead hundreds sheets. ability use domain-independent
planning techniques allows us use planner different configurations, without needing hand-tuned control rules. rest section, elaborate
results.
442

fiOn-line Planning Scheduling Modular Printers

time (sec)

10
nomutex
logical mutex
log + res mutex
productivity level

1
1

6

11

16

21

26

31

36

41

46

0.1

0.01

jobs
Figure 15: Performance current prototype built us shown Figure 1. Note
time plotted logarithmically.

Figure 14 15 show performance planner two complex
parallel printer prototypes built Xerox us. productivity levels higher
printer class currently market. figure, show
CPU time consumed per-sheet basic test using planner print job
50 sheets: (1) without mutexes; (2) serial temporal planning graph mutexes;
(3) combination logical resource mutexes; (4) baseline requirement
planners performance match printers full productivity. prototypes
investigated using planner either simpler complicated used theoretical investigations only. rest section, refer first printer
(results shown Figure 14) Configuration 1 (results shown Figure 15)
Configuration 2.
Configuration 1 printer Figure 14 simpler one, 25 main components
(including four print engines), 35 action schemata, nominal productivity 170 sheets
per minute, leading timing requirement planner around 60/170 = 0.353 sec
planning sheet. shortest possible plan simplest simplex sheet contains 8
actions. normally 10 sheets flight time thus planner
needs handle interaction around 100 actions. However, planner typically
intended plan many sheets ahead number interactions often much higher.
printer built run industrial partner. figure, show without
mutex, planner starts taking base time 0.353 second around sheet 20
consistently takes higher limit around sheet 40. However, logical
resource mutexes, planner consistently returns plans within much shorter time
required. average, planner logical mutex takes average 0.0732 second
find plan combination logical resource mutex helps reduce average
planning time 0.0458 second (1.6x improvement). Without mutexes, planner takes
average 0.4191 seconds keep full productivity printer.
443

fiRuml, Do, Zhou, & Fromherz

Configuration 2 printer tested Figure 15 complicated one.
212 action schemata shortest possible plan contains 16 actions. printer
generally handles 20 sheets time planner needs regularly reason
interactions 300-400 actions. productivity level
printer 220 pages-per-minute, leads base running time planner
60/220 = 0.27 second planning single sheet. wider gap performance
different versions planners, show timing results printer log scale.
Without using mutexes, planner quickly overruns time limit sheets
grows 10 seconds around sheet 35, stopped experiment.
mutexes (logical, resource) planner generally takes less 0.3 second find plan.
However, occasionally planner takes longer. usually plans ahead around
10 sheets releasing plans lower level controller, occasional jumps planning
time dont prevent planner achieving full productivity printer practice.
planner averages 0.1336 second logical mutexes 0.0928 second (1.44x
improvement) used conjunction resource mutexes.
results Figure 14 15 indicate average planning time individual
sheets increases number previous sheets. due fact planner
generally plans faster speed printer print. Thus, number
print requests received increases, number plans unsent queue (i.e., planned
for, sent machine yet) increases. increases resource contention
branching factor searching new plan, leads increment planning
time. Eventually, number lookahead sheets reaches point planning time
equals planners productivity dynamic equilibrium reached. planning time
strictly increase linearly accordance number sheets planned,
rather shows oscillating pattern. due complex interaction
on-line processes planning, freezing time points found plan, plan execution.
lead easier planning problems sheets, depending
sheets interact sheet currently planned.
noted Smith Weld (1999) work based building
planning graph mutex propagation costly, experience. fact,
printer rather empty, total planning time, subsumes graph
mutex building time less 0.01 second. believe due simpler mutex
propagation rule planner fact sequential plan sheet makes
actions mutex step. resource mutex reasoning time optimized
logical mutex implementation improved, seem significant
impediment intended application.
results presented indicate optimal-per-sheet strategy seems
efficient enough, work needed assess drop quality would experienced greedy strategy, always placing current sheets resource
allocations previous sheet. Similarly, lull sheet submissions,
might beneficial plan multiple sheets together, backtracking possible
plans first order find overall faster plan pair together. Sheets
planned whose plans released printer represent opportunities
reconsideration light newer sheets submitted recently.
444

fiOn-line Planning Scheduling Modular Printers

#
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

LPG
Span
Time
9.3
0.01
13.3
0.02
26.6
0.08
15.2
0.07
21.3
0.12
22.4
0.23
30.3
8.73
19.6
52.55
24.2
16.69
23.0
20.02
29.7
40.14
18.3 138.53
42.6
29.09
34.9 427.41
35.3
18.95

SGPlan
Span
Time
8.3
0.45
9.3 308.46
-

Hybrid
Span
Time
8.3 < 0.001
9.4 < 0.001
9.9
0.02
10.6
0.02
11.1
0.03
11.8
0.03
12.3
0.04
13.0
0.06
13.5
0.07
14.2
0.07
14.7
0.08
15.4
0.09
15.9
0.18
16.6
0.21
17.1
0.28

Table 1: Comparison LPG, SGPlan, hybrid planner, showing makespan
plans found (Span) planning times (Time) seconds problems
various numbers sheets (#).

4.4.1 Scaling Generic Planners
Although planner certain features, controllable action durations,
beyond capabilities existing planners, still interesting compare offline systems validate new approach. existing generic systems could solve basic
printing control problems well, might possible extend them, rather developing
specialized planner architecture described above. Therefore, built tool
automatically convert custom domain language PDDL2.1 temporal planning
language, allowing us test current state-of-the-art planners.
domain must simplified fit limitations PDDL, observe
even simplified problems easy solve state-of-the-art academic planners
SGPlan (Chen, Hsu, & Wah, 2006) LPG (Gerevini, Saetti, & Serina, 2003),
winners 2004 2006 International Planning Competitions. Since planners
cannot solve problem Configuration 2 machine Figure 2, tested
much simpler Configuration 1 machine. tested monochrome job
15 simplex sheets, already stretched limits LPG SGPlan. planner
plan ahead hundreds sheets machine. seen Table 1, SGPlan
took 5 minutes find two-sheet plan took planner less
0.001 second find. Compared SGPlan, LPG much faster, although quality
plan LPG finds much worse. average, LPG returns plans 86% longer makespan
400 times slower planner. objective function minimizing
wall-clock finishing time (which combines planning time plan makespan), planner
1000x better planners small printer configuration.
445

fiRuml, Do, Zhou, & Fromherz

addition faster, hybrid planner predictable. LPGs planning
time much higher variance sometimes takes longer plan smaller job
bigger one. example, took LPG 22 times longer plan 14-sheet job
Table 1 15-sheet job. makes unsuitable real-time on-line
planning, depends accurate estimation planning times efficient temporal
event management.
4.4.2 2008 International Planning Competition
version printing domain used 6th International Planning Competition
(IPC6), held 2008 results presented ICAPS-08 conference.
allowed us evaluate planner many state-of-the-art systems. deterministic
part competition three tracks:
1. sequential objective function minimizing total cost actions plan
2. temporal objective function minimizing plan makespan.
3. net benefit objective function minimizing trade-off total goal
utility action cost.
three tracks, emphasis finding good solution quality. Thus, planner
running time part overall scoring metric. Specifically, planner given
30 minutes run particular planning instance. cost plan returned within
time limit used calculate score particular planner particular
instance. score given instance cost best known solution / cost generated
plan, cost generating plan infinite. total 30 instances
domain thus maximum score competitor achieve 30 (if solutions
returned best quality among competitors, equal best known solution
generated specialized solver).
Real-world planners often demonstrated complex domains spacecraft
mobile robot control difficult simulate thus make awkward benchmarks.
popular temporal planning benchmark domains off-line sense
planners speed affect solution quality. remains need simple yet
realistic benchmark domain combines elements planning scheduling, especially
on-line setting. step toward bridging gap, organizers IPC6 elected
use PARC printer domain two tracks: sequential temporal. temporal track
natural fit due default objective function maximizing printers
productivity, equals minimizing makespan plan finishing print-job
requests. sequential track, minimizing total printing cost used. action
certain cost value using expensive color print engine print black&white
page costs using monochrome print engine. However, cost trade-off may
clear-cut feeder, blank sheets originally reside, closer color
print engine monochrome engine.
Even though internal representation planner, used starting
point competition domain description, far PDDL representation,
difficulties creating competition domain file problem set.
446

fiOn-line Planning Scheduling Modular Printers

C3
18.00

DAE1
14.45

DAE2
5.80

DTGPlan
16.44

F Fah
16.00

h
F Fsa
23.00

LAMA
20.93

PlanA
0.00

SGP 6
24.39

Upwards
26.91

baseline
26.53

Table 2: Scores IPC6 Sequential Satisficing Track
on-line continual nature domain fact constraints
multiple resource allocations action sequential finishing order sheets
job caused blowup problem size using pure PDDL, organizers
to: 1) remove approximate certain constraints original domain; 2) model
less complex machines. Overall, three different printers modeled. first one
simpler four-engine (two color two mono) Configuration 1 machine described
Section 4.4. second one stripped version using half (one color
one mono) first printer. third one another variation one mono
one color printer. first two printers rather symmetric design third one
asymmetric. three significantly simpler fixture built PARC. helped
IPC organizers model actions accurately possible, thus even though
printer configurations hypothetical, reflect characteristics real hardware.
problem files, reduce complexity, print requests single job
multiple sheets used. sheets randomly set either simplex (one-sided print)
duplex (two-sided print) image randomly selected either mono
color. number sheets varies 1 20. Given print-job request particular
printer configuration, competing planner needed find plan lowest total printing
cost sequential track (matching effectively image requirement print
engine capabilities) smallest makespan temporal track (synchronizing effectively
different print engines). actual competition, problems ranging
1-10 sheets used three modeled printers simplex sheets
used biggest printer (4-engine version) make problems difficult
majority participants.
problems used two tracks (more details below), used planner
described paper provide best known solutions score competing planners.
temporal planning track, ran planner default objective function
maximizing machines productivity. sequential track, ran planner
objective function minimizing printing cost, described later Section 6.1. Given
plan representation different planner standard format used
IPC, post-processing step needed convert one format another. Note
plans returned planner, temporal buffers related time
points, inter-sheet gaps. post-processing step remove small
temporal buffers, needed PDDL plans valid. Therefore, competing
temporal planners could theoretically return shorter makespans planner. However,
results described show planner still superior competing
planners terms plan quality. organizers officially reveal plan running
time unofficial results showed planner much faster competing
planners solving problems.
Tables 2, 3, 4 show IPC results three sub-tracks PARC printer
domain used: sequential satisficing, sequential optimal, temporal satisficing.
447

fiRuml, Do, Zhou, & Fromherz

CFDP
3

CO-Plan
5

CPT3
17

Gamer
0

HSP0
14

HSPF
16

MIPS-XXL
7

PlanA
0

Upwards
0

baseline
10

Table 3: Scores IPC6 Sequential Optimal Track
CPT3
17.38

DAE1
11.93

DAE2
6.81

SGPlan 6
11.04

TFD
5.67

TLP-GP
1.73

baseline
13.87

Table 4: Scores IPC6 Temporal Satisficing Track

planners score would 30 tracks given used provide best known
solutions tracks. baseline planner sequential optimizing track based
blind search optimal cost, sequential satisficing track planner,
temporal satisficing Metric-FF planner followed greedy scheduler.
sequential satisficing planners performed well, mostly due fact problems
sequential tracks easy solve, competitors perform well
tracks. reason sequential optimal planners perform well could
solve many problems among 30 selected. temporal satisficing tracks,
planners could solve large number instances, quality plans returned
plans high, thus leading low overall scores. short, results
2008 International Planning Competition reinforced early study indicating generic
off-line planners competitive on-line hybrid system application.
Together, provide evidence demands setting warrant specialized
approach.

5. Exception Handling
maintaining high productivity, thus high return investment,
common important objective, means thing equipment owners
care about. reduce need operator oversight expertise allow use
complex mechanisms, system must autonomic possible. operators
make mistakes even highly-engineered system modules fail, system must
cope execution failure. crucial part RMP value proposition.
example, imagine printer copier never seems jam, runs little slower
month goes on. month, someone opens covers, removes jammed
sheets, system back full productivity. RMP systems planner
used control designed fulfill vision partial productivity subset
modules down. make transition transparent user (and thus increase
perceived reliability system), concentrating developing exception
handling techniques minimize user interventions without stopping slowing
machine. Current products perform exception handling using rules hard-coded
machine module. technique works well simple straight-line systems, would
limited small predefined subset failures complex topologies. modular
RMP systems, astronomical number different printer configurations
failure possibilities, require general exception handling approach.
448

fiOn-line Planning Scheduling Modular Printers

addition, system must work legacy modules order commercially viable, architecture must tolerate components direct control
give rise unexpected events. handle several different exception types
plan rejection (by machine controller), model updates (i.e., modules capabilities go
off-line), sheet jams.
Since plans system tightly interact various scheduling temporal
constraints, whether belong print job, exception affecting
single plan affect executability plans final job integrity. Plans
different stages life cycle need analyzed treated differently (see Figure 16).
Simple exceptions plan rejection model updates handled discarding
recently made plans rolling back state planner sheets
planned. implementation uses non-destructive data structures make efficient.
Execution failures sheet jams require elaborate handling. unsent plans
canceled, need new plans sheets already in-flight time
exception occurs. replanning reuse much nominal planning system,
requires special modifications discuss detail below. section, first
provide overview various types exceptions handle plan
manager reacts them; concentrate hardest part exception handling
framework: finding new set consistent plans in-flight sheets.
5.1 Related Work
several previously-proposed frameworks handling exceptions uncertainty
plan execution. Markov decision processes (Boutilier, Dean, & Hanks, 1999) contingency planning (Pryor & Collins, 1996) build plans policies robust uncertain environment. Planners built techniques normally slow, especially real-time
dynamic environment complex temporal constraints ours. suitable
domain exceptions happen frequently, need responded
quickly. Fox, Gerevini, Long, Serina (2006) discuss trade-off replanning
plan-repair strategies handling execution failure. algorithms work off-line,
instead on-line real-time environment ours, target different
objective function (in case, plan stability). CASPER system JPL (Chien, Knight,
Stechert, Sherwood, & Rabideau, 1999) uses iterative repairs continuously modify
update plans adjust dynamic environment. Unlike system, CASPER uses
domain control-rules thus less flexible replanning decision needed
quickly domain (in case, sub-second).
5.2 Basic Exception Handling
planner handle several types exceptions. Figure 16 extends system architecture diagram Figure 3 shows solid lines possible steps replanning
process. general, exception occurs, machine controller sends planner
message real time detailing exception. planner cancels plans
created sent printer controller execute. corresponding
goals rolled back unplanned queue. planner time tries
find new plans sheets moving printer avoid exceptions.
449

fiRuml, Do, Zhou, & Fromherz

printer model (off!line
p
(
)

Planner
STN
plans
fl ibl
flexible
start time

sheet
descriptions
(on!line)

recreate goals

new plans
l
unplanned

planning

planned/unsent

Plan Manager

sent

fixed!time plans

exceptions
p

Figure 16: System architecture, showing steps involved nominal planning (dashed
lines) replanning (solid lines).

new plans found sent machine controller replace ones
executing.
Next, discuss detail different exception types.
Plan Rejection: plan sent machine controller execute, controller
may reject plan one relevant modules cannot commit executing requested
action time defined planner. rejections rare, caused
module constraints outside scope planners model. example,
printer engine may need time bring toner proper temperaturea state variable
constraint currently modeled system. plan rejected, planner
cancel plans unsent queue, addition recently sent rejected plan.
goals corresponding plans rolled back unplanned queue. Even
plans directly affected error message need canceled rolled
back plans made commitments made rejected
plan.
Module Update: Machine modules go -line due hardware failure,
sheet jam, benign event, running paper feed tray, unmodeled
process, print engine self-adjustment. Similarly, come on-line
repaired, adjusted, otherwise made ready. happens, module controller
send message planner indicating modules capabilities
on/off. given capability turned off, planner remove corresponding
action consideration future planning episodes. given capability turned on,
planner add action set future planning episodes.
Break-in-Future: module changes status capabilities
off, currently executing unsent plans using module may become invalid.
case, module controller send messages planner indicating plans
450

fiOn-line Planning Scheduling Modular Printers

affected. planner cancel affected unsent plans subsequent plans move
goals back unplanned queue. plans executing thus correspond
sheets already fed machine, planner needs find new plans
affected sheets get correct finisher tray without going
affected modules. next section describes detail reroute in-flight
sheets.
Broken: type exception happens one sheets jammed system.
broken messages sent planner include ids sheets jammed
thus cannot reused rerouted failure. sheets jam,
normally disable modules thus broken message normally accompanied
several module update messages, described above. handling broken
exception similar handling break-in-future exception many respects:
involves canceling unsent plans finding new plans in-flight sheets. However,
main differences are: (1) in-flight sheets jammed cannot rerouted; (2)
critically, jammed sheets break print job integrity. discuss detail next.
5.3 In-flight Sheet Replanning
section, discuss problem finding new set plans in-flight sheets
sheet jammed module used plans broken. constraints
make replanning challenging nominal planning are:
Sheets cannot stop slow planner searches new plans inflight sheets. Thus, planner takes much time find new plans, jams
and/or module failures cascade.
newly found plans flexible starting times nominal planning
case, start location sheets projected
plans found. new locations depend actual replanning time
planner.
in-flight sheets occurring later print job jammed sheet
rerouted purge tray. sheets jobs without jammed sheets still need
finish correct finisher tray order.
Replanning involves four main steps: (1) create new goals in-flight sheets; (2)
predict (an upper bound on) replanning time; (3) project sheets according
original trajectory predicted planning time find future locations,
form new initial state replanning problem; (4) find plans sheets
salvageable (those possible avoid broken modules jammed sheets
time), satisfying constraints listed above.
5.3.1 Example
provide concrete example illustrating replanning procedure. Figures 17 & 18
show scenario three in-flight sheets: S1.1 S1.2 belong
print job planned go finisher 2 (in middle); sheet S2.1 belongs
451

fiRuml, Do, Zhou, & Fromherz

1.2
1.1

Finisher 1
Finisher 2
P
Purge
tray

2.1

Figure 17: Replanning Example (before jam): sheet 1.1 1.2 planned enter finisher
2, sheet 2.1 finisher 1.

1.2
1.1

Finisher 1
Finisher 2
Purge Tray

2.1

Figure 18: Replanning Example (after jam): sheet 1.1 jammed, requires planner reroute sheet 1.2 purge tray reroute sheet 2.1 circumvent
jammed sheet going finisher 1.

different print job scheduled go finisher 1. third finisher purge tray.
original routes indicated dashed lines Figure 17. Assume S1.1
jammed. According original routes, have: (1) S1.2 arrive finisher tray
out-of-order (because S1.1 arrive it); (2) S2.1 crash module
S1.1 jammed. Therefore, need find new plans two sheets S1.2
instead go purge tray S2.1 goes around S1.1 . Finding plans takes time
given cannot stop slow S1.2 S1.2 finding new plans them,
two sheets continue original trajectories new locations,
452

fiOn-line Planning Scheduling Modular Printers

sheet 1
plan 2
plan 1

...
plan 3

sheet 2

plan 4

...
plan 1

plan 2

plan 3

Figure 19: Chaining many searches together gives search tree potentially infinite
branching factor.
circled Figure 18. there, machine controller apply new plans, indicated
figure solid lines, order guarantee print-job integrity avoiding
cascading failures. replanning done, planner generate fresh plans
re-create S1.1 S1.2 .
example shows one replanning strategy new goal out-of-order
sheet S1.2 set go purge tray. default strategy replanner tries
clear machine finish replanning process quickly possible return
normal operation. However, scenarios printing media expensive
content confidential purging sheets desirable. scenarios,
experimented different strategy purge S1.2 keeps
machine (for example, looping holding pattern) waiting S1.1
reprinted, S1.2 routed original finisher. modification necessary
implement strategy system change way replanning goals end-time
constraints generated. tested strategy successfully small number
sheets, although sheets could saved one allowed slow transports.
5.3.2 Chained BFS
normal operation, planner uses A* find plan given sheet end
soonest, given (temporally flexible) plans previous sheets. plan always exists
scheduled sufficiently far future. rerouting, problem different. must
find jointly feasible plans many in-flight sheets possible. cannot greedily plan
one sheet time, committing irrevocably plans previous sheets,
plan selected one sheet might render subsequent sheets infeasible. cannot happen
nominal planning, later sheets always feasible scheduled sufficiently far
future. replanning, however, forced confront true multi-body
planning problem.
considered two strategies solve problem. first simply plan
joint action space sheets. would result large branching factor
clear us design effective heuristic evaluation function. chose different
approach, retain view planning sheet individually using
heuristic search. However, overlay additional search top this, depicted
Figure 19. high-level search, branching node represents situation
selected certain specific plans previous sheets time select plan
453

fiRuml, Do, Zhou, & Fromherz

ChainedBFS (problems)
1. problems empty, return success
2. p remove first problem problems
3. initialize openlist p
4. repeat openlist empty node limit reached:
5.
n best node openlist
6.
n goal, call ChainedBFS remaining problems
7.
expand n, adding children openlist
Figure 20: Sketch Chained Best-First Search depth-first strategy.
additional sheet. children node represent commitments different possible
plans additional sheet. considering different paths high-level search
tree, consider different combinations plans different sheets. call
approach chained best-first search. current implementation, sheets replanned
original order, approximation increasing distance exit, correlates
increasing flexibility. alternative approach replan order urgency
defined time left reroute sheet becomes unsalvageable.
children node represent possible plans returned best-first
search, children available once. Instead, individual sheet-level planning
search encounter goal nodes one time. cannot terminate search
find first goal node single-sheet planning guarantee
sheet-plan reaching first goal make subsequent sheets feasible. Finding plan
single sheet merely results new branch high-level space, retain
completeness must retain ability continue search uncover additional
possible plans. fact, printers contain loops paper path,
may infinite number possible plans given sheet. Fundamentally, highlevel search must explore tree nodes expanded incrementally branching
factor potentially infinite.
identified three possible strategies searching tree infinite branching factor.
first best-first approach, one formulates traditional heuristic evaluation
function high-level nodes. nodes represent commitments complete plans
subset in-flight sheets, heuristic function needs estimate probability
plans allow feasible plans remaining sheets found. infinite
branching factor could handled using Partial-Expansion A* (Yoshizumi, Miura, & Ishida,
2000), although would require non-trivial lower bound heuristic value
plans yet found. clear us might done.
second possible strategy considered limited discrepancy search (Korf, 1996). Unlike
depth-first search, limited discrepancy search doesnt necessarily visit children
node, potentially infinite us. disadvantage method that,
revisit node many times different discrepancy bounds, suffer
considerable node regeneration overhead.
third strategy, one used implementation, perhaps simplest:
depth-first search. Figure 20 shows pseudo-code sketch. fixed number
sheets replan, high-level search tree bounded depth. cope potentially
454

fiOn-line Planning Scheduling Modular Printers

infinite branching factor, impose limit number nodes low-level sheet
planning search may expand. avoids danger searching forever one high-level
node without finding another goal, reminiscent iterative broadening (Ginsberg
& Harvey, 1992). guide sheet-level planning, use heuristic minimizes
plan duration. attempts minimize resource use machine maximize
probability sheets feasible plans.
5.4 Evaluation
now, exception handling strategies current production printers to:
(1) stop production ask operator remove sheets (2) use machine-specific
customized local rules purge sheets system. work first demonstrate
automatic exception handling rely machine-specific control rules.
planner handle two easiest types exception: Plan Reject Module
Update without difficulties. Break-In-Future Broken exceptions,
currently reroute fly five sheets machine shown Figure 1.
number may seem low, recall replanning harder nominal planning
factor exponential number in-flight sheets. simpler prototype systems
Xerox fewer (but larger) modules, four print engines, aggregate throughput
180 pages-per-minute, planner able successfully reroute reroutable sheets
different jams happen. demonstrated replanning technology real-time
allowing people come either turn on/off modules, jam sheets intentionally,
sometimes right sheets hit broken module. Upon receiving error messages
machine controller, planner fast enough reroute sheets around
failed modules jammed sheets correct locations. addition experimenting
physical hardware built PARC Xerox, tested replanning
simulation, connecting planner visualizer instead machine controller.
on-line appendix contains two videos planner performing in-flight rerouting
PARC prototype, simulation (Video 3, replanning simulation) hardware
(Video 4, replanning hardware).
addition testing replanning framework different hypothetical printer configurations different fault modes, investigated different exception handling
strategies. example, printing media expensive replanning objective
function switched default objective function finish replanning quickly
possible (which lead many purged sheets) saving many sheets possible (which
lead longer replanning time) planner able successfully route
2 out-of-order sheets long routes (that may contain loops) system waiting
jammed sheet printed routed correct finisher tray.
achievement replanning five sheets large RMP machine may seem
impressive, want point that: (1) planner reroute reroutable sheets
simpler machines (which still much complex biggest multi-engine printer
Xerox currently market); (2) large machine complex automated
planningthe last two IPC winners SGPLan LPG cannot even find plan single
sheet nominal planning using PDDL2.1 version printer domain.
455

fiRuml, Do, Zhou, & Fromherz

6. Handling Multiple Objectives
second major extension nominal planning aimed better meeting shop owners
needs nominal case. point, planners objective run
multi-engine reconfigurable printers full productivity, optimizing machine throughput.
Productivity, important, one many optimization criteria
naturally exist real-world planning scheduling applications printer control
domain. section, describe several additional objective functions
pointed important industrial partner, discuss extended
planning framework handle them.
modular system multiple print engines, one might want optimize cost
printing choosing print black-only pages monochrome engines avoid using
expensive color engines. Also, one might want optimize image quality choosing
print pages document print engines whose current marking gamuts
similar. printer controller needs give operators ability trade
conflicting objectives maintaining robust operation. meet challenges using
(1) optimization objective combines separate estimates productivity printing
cost, (2) multiple heuristic look-ups efficiently handle image quality consistency
constraints. contrast explicit multi-objective optimization, planner
would return selection non-dominated solutions Pareto frontier, presumably
human choose from, planner needs select single solution execution,
need combine multiple criteria single objective. planner built
atop generic state-space heuristic search, need design new comparison function
order search nodes. addition linear combinations objectives, relatively easy
us handle tiered criteria using tie-breaking strategies.
several academic domain-independent planners GRT (Refanidis &
Vlahavas, 2003) LPG (Gerevini, Saetti, & Serina, 2008) optimize multiple objectives trade-off planning time plan quality. Standard planning
languages, especially PDDL3 (Gerevini & Long, 2006), allow specifying complex objective
functions weighted-sum format (as framework). planner based
domain-independent planning technology uses extension PDDL, works
dynamic on-line continual environment interacts physical machine,
off-line abstracted environment previous planners.
6.1 Optimizing Printing Cost
systems heterogeneous print engines, cost printing given page depends
engines used. example, generally costlier print black-and-white
page color engine monochrome one. Thus, minimize overall printing cost,
one use engines lowest printing cost still satisfy image type
quality requirements given print job. so, subset available
engines used printing job thus overall productivity may reduced.
strike balance machine productivity printing cost, implemented objective trade productivity cost vice versa. show
combining different performance criteria single objective, optimization
framework works well single-objective planning efficiently applied
456

fiOn-line Planning Scheduling Modular Printers

multi-objective case. main steps required extend planner
supporting single objective multiple objectives.
Step 1: Extend planners representation machine capabilities model action cost.
Specifically, added cost field representing cost executing capability.
addition, overall objective field user-supplied weights two
objectives: obj = min w1 + w2 c, end time c accumulated total
cost printing sheets.
Step 2: Create one heuristic estimation function objectives. find
best route given sheet, estimate good potential route according
objective functions. Finishing time estimated using temporal planning graph
adjusted resource conflicts, described Section 4.3.4. estimate total plan
execution cost, use dynamic programming starting initial state (i.e., sheet
feeder) compute total cost reach different reachable states. computation similar cost propagation planning graph Sapa planner (Do &
Kambhampati, 2002).
Step 3: Extend search algorithm considering multiple objectives simultaneously.
estimations total time cost combined using user-supplied weights (as
described Step 1) compare nodes best-first A* search algorithm. Given
heuristics time cost admissible, single objective planner, planner
guaranteed find optimal solution given sheet. weights given,
planner chooses prioritize objectives. example, planner first find plan
lowest cost, break ties favoring plans higher productivity,
favoring one lower wear tear, on. mechanism implemented
fully integrated planner. default option weights specified
optimize productivity break ties total cost.
6.2 Planning Image Quality Consistency
Maintaining image consistency across set heterogeneous print engines especially
important multi-engine printing system. planner achieves enforcing additional image-consistency constraints searching optimal plan. color science,
(in)consistency two colors measured function, often denoted E, calculates distance two device-independent color space.
exist variety functions (the popular called E2000; see Green,
2002), planning purpose suffices assume given two engines, E
function returns non-negative real-valued scalar, called E distance, measures
discrepancy perceived color result printing image two engines.
facing pages (i.e., pages face bound book magazine)
sensitive image-consistency issues, thus consider following constraints
planner:
1. facing-page constraints require facing pages job printed
print engine
2. E constraints allow engines within maximum E distance print
facing pages
457

fiRuml, Do, Zhou, & Fromherz

Given reality two engines E distance zero, facing-page
constraints viewed special case E constraints maximum E
distance set zero. Thus, need focus latter, general.
enforce E constraints, planner keeps track set print capabilities
used print front side sheet, constrained print action
applied back side previous sheet. Since first sheet job
previous sheet, set print capabilities eligible printing front side unconstrained
(i.e., equal entire set print capabilities). subsequent sheets job,
however, subset print capabilities allowed. subset computed based
E constraints including capabilities engines whose E distance
print engine printed back side previous sheet less equal
maximum distance. cases, determined on-line,
E distance pair engines drift time. Thus, planner maintains
on-line version pairwise E-distance matrix engines printer.
adding extra image-consistency constraints reduce brute-force search
space (if constraints make set reachable states smaller), practice found
often makes search problem harder, heuristic computed unconstrained problem, still admissible, longer informative. improve accuracy
heuristic, planner computes temporal planning-graph heuristic legal
combinations print capabilities used print one side sheet,
stores multiple lookup tables, one combination. heuristic estimate
search node needed, planner calculates index lookup table based
state description (e.g., sheet location, monochrome color printing), much
way lookups done pattern databases (Culberson & Schaeffer, 1998).
implementation, hash table hash tables used store multiple lookup tables,
given sheet relevant hash table(s) loaded sheet planned,
set eligible print actions known fixed time.
Since limited number ways printing single face sheet,
approach improving heuristic accuracy little overhead yet significantly reduce
time takes find itinerary. Interestingly, approach used
improve accuracy heuristic handling exceptions jammed sheets
block paper paths engines, unblocked engines eligible
printing sheets, creating planning problems similar enforcing E constraints.
example, one set E distance blocked engine infinity, effectively
forces sheets go unblocked engines, computational savings comes
use accurate heuristic built specifically particular set
unblocked engines, instead nominal-case heuristic assumes engine blocked.
6.2.1 Planning Constrained Action Set
algorithmic perspective, approach planning image-quality consistency
corresponds solving constrained planning problem reduced set actions (compared unconstrained version). Given planning problem k actions, one create O(2k ) different versions constrained problem. Thus, pre-computing temporal
planning-graph heuristic possible subsets actions quickly become infeasible
458

fiOn-line Planning Scheduling Modular Printers

k increases. describe general solution strikes balance heuristic
accuracy space overhead storing multiple lookup tables, one subset
actions. idea limit m, maximum number actions removed
unconstrained problem, compute heuristic lookup tables constrained
problems. example, usually feasible enumerate constrained problems
one two actions removed action set. compute heuristic
value state constrained problem included pre-computed set,
algorithm consults lookup tables whose removed actions form subset actions removed constrained problem, returns maximum value heuristic
estimate state, since value returned lookup tables admissible.
formally, let h(s|P ) admissible heuristic estimate state constrained problem set actions P removed original action set A,
let maximum number actions removed constrained problems
heuristic pre-computed. heuristic estimate h(s|P ) calculated follows,
h(s|P ) =

(

h(s|P )
maxQP

|Q|=m

|P |
h(s|Q) otherwise

new heuristic resembles hm family admissible heuristics (Haslum & Geffner,
2000), limits maximum cardinality set atoms considered
construction heuristic. difference heuristic considers set removed
actions, whereas hm heuristic considers set satisfied atoms. heuristic
seen kind multiple pattern database (Holte, Felner, Newton, Meshulam, & Furcy,
2006) one take maximum set heuristic estimates without losing
admissibility, although based action-space abstraction (multiple) pattern
databases based state-space abstraction.
6.3 Evaluation
test ability planner trade machine productivity printing
cost, tested model four-engine prototype printer built Xerox.
better test bed trade-off investigation printer mixed set printer
engines (two color two black-and-white engines) instead four identical black engines
PARC prototype system. Moreover, engines aligned asymmetrically
thus paths leading different engines slightly different. modeled
costs different components consultation Xerox engineers. especially
interested modeling cost print black pages different engines: printing
expensive color engines costs cheaper monochrome engines.
varying weights two objective functions, able show that:
(1) increasing weight given productivity results printer utilization four
engines; (2) increasing weight saving printing cost leads reductions number
unnecessary costly printing, thus fewer black sheets printed color engines.
observe trade-off modules similar functionality well,
different feeders, finishers, paper paths. example, increasing weight saving
costs lowers number sheets fed expensive faster feeder.
tested search hypothetical printers mixed components similar
459

fiRuml, Do, Zhou, & Fromherz

results observed. observed moving single multiple objectives
slow planner thus affect overall productivity.
tested performance planner image-consistency planning.
model printer used four monochrome engines, two faster lowquality engines, remaining two slower high-quality engines. four engines
connected asymmetric paper paths. ran simulation 20-sheet
job requires using two high-quality engines double-sided printing.
done certain E constraints, prevent planner choosing two
low-quality engines. Since particularly interested effect heuristic
search performance, tested planner without using multiple lookup tables,
made significant difference number node expansions A* search
planning times. average, multiple lookup table heuristic used, planner
expands 1783 nodes per sheet; whereas using heuristic computed unconstrained problem, grossly underestimates remaining makespan constrained
problems, needs 6458 node expansions find plan. terms running time, one
uses multiple lookup tables 60% faster using naive heuristic.
One future direction investigate different objective entirely: wear tear.
objective, one would different machines plant used amount
long term. However, machines often cycled idle long
period cycling introduces wear, one would recently-used machines
selected soon short term. Although implementation currently supports
throughput cost, easily extensible support additional objectives.

7. Deployment
process building deploying planner, utilized many off-the-shelf techniques academic research planning, extending, integrating form fast
on-line planner/scheduler. section, list important lessons learned
describe ancillary tools necessary develop deploy planner.
hope useful application developers academic researchers
planning.
7.1 Lessons Learned
Modeling important. mean two respects. First, important
end-users printers modeled specialized representation machine
modules connections main themes language.
discussed Section 4.1, representation compiled planner input
language, taking capabilities different modules along inter-connections
producing action schemata. process, set machine capabilities compiled
higher number action schemata ground parameters.
discussion users industrial partners, feel machine-centric language
involving modules, machine instances, inter-connections easier understand
accept, compiled-down representation makes much easier us adopt
STRIPS planning techniques.
460

fiOn-line Planning Scheduling Modular Printers

Second, found that, understood search algorithm (regression
three-value state representation) heuristics (planning graph mutexes) used
planner, could manipulate modeling actions, goals, initial states
produce quite different computational results. Consider simple example action a12 =
move(l1 , l2 ) moves object location l1 l2 . common form STRIPS
representation action P re(a12 ) = { at(l1 )} Effect(a12 ) = {at(l1 ), at(l2 )}.
Recall use three-value representation literal values true,
false, unknown. Regressing (partial) state s1 = {at(l2 )} using a12 get us state
s2 = {at(l1 ), U nknown(at(l2 )) regressable actions move(l3 , l1 )
move(l3 , l2 ). normal regression rules may consider move(l3 , l2 )
lead optimal length plan, regressing s2 move(l3 , l2 ) cause
inconsistency. fact, domain ours, branch regressable actions
scenarios need buy time free resource allocations.
Note example, sophisticated techniques discover invariants TIM (Fox
& Long, 1998) DISCOPLAN (Gerevini & Schuert, 1998) discover object
single location time thus s2 regressable
action move(l3 , l2 ). However, eliminate branch simply adding precondition
at(l2 ) action description a12 make sure goal state, location
goal false. Generating extra child node propagating constraints
domain expensive because, addition logical part, state representation
includes temporal resource databases. cutting number generated
nodes important, partially accomplished careful modeling.
Similarly, adding removing predicates domain description great
effects heuristic estimation derived planning graph mutex propagation. experienced scenario adding two extra predicates representing subgoal
completion modeling domain slightly differently achieved speedup nearly 10x
printer configurations.
manipulations reminiscent work Rintanen (2000), showed
domain advice expressed linear temporal logic, dont move package
destination, could compiled planning operators domain using conditional
effects, leading great gains planning efficiency. However, want emphasize
highly configurable systems ours, dangerous encode explicit action choices
pruning domain. hard guarantee completeness optimality
maintained possible job mixes failure combinations. (For example, looping
sheet may free resource allow job complete earlier.) approach
encode domain physics, is, things universally true domain
help keep search within reachable states, control rules sense
heuristic action selections, condition, choose action. point
physics represented differently, even limited STRIPS, finding right
match chosen search strategy dramatically affect planners performance.
application developers, work fixed benchmark domain representation
allows us exploit another dimension modeling improve planners performance.
suitable planning algorithm depends application specifications.
Even formulating domain using extension STRIPS, went several
461

fiRuml, Do, Zhou, & Fromherz

implementations different planning algorithms settling current one. first
version lifted partial-order planner, still think elegant algorithm.
implemented grounded forward state space planner, approach
dominated planning competitions. However, discussed Section 3.1, realized
combination constraint sheets print job finished
order objective function minimizing finishing time suitable forward
state-space search. finally settled backward state-space framework, much
faster domain. lesson drew approach works
best wide range benchmark domains competition mean
best choice given application; doesnt work, mean less
popular approaches cannot significantly better. Therefore, understanding domain,
important constraints involved, objective function, different planning
algorithms work help selecting suitable strategy. Looking competition
results replacement understanding variety applicable planning algorithms.
fast robust temporal reasoner important. planner,
even though source code Simple Temporal Network (STN) totals less 200
lines code, critical handling temporal relations actions resource allocations within single plan different plans. real-world application
various temporal constraints delays take account, communication, setup time, machine controller coordination, time synchronization delays
planner components overall control architecture, ensuring temporal
consistency one important tasks necessary keeping planner running
without interruption long period time. explicit temporal reasoner
helped us uniformly represent manage start end times actions different
types resource allocations. allowed us smoothly extend handling fixed
duration actions action variable durations, extend regular resource allocations resource allocations caused external events cyclic resources allocation
uncontrollable processes. domain, variable action durations context-independent
different actions refuel Logistics domain used competition.
havent noticed many planners competition explicit general-purpose
temporal reasoner, except IxTeT(Ghallab & Laruelle, 1994). However, would
emphasize real-world setting planner needs coordinate
software expects face various time constraints delays, critical.
many uses planner. Besides main job controlling different
printers, planner used extensively system analysis purposes. Thus,
planner tested (1) different printer designs help decide better ones;
(2) printers various broken modules test reliability printer.
analyses help product group decide printer built given purpose.
example, customer ran extensive test consisting 11,760 different planner runs
variations single printer configuration. Among runs, used planner
test different combinations possible broken points, different print-job mixes, changed
speeds different modules. Another use test performance upstream
job submission sequencing methods. direct accurate way evaluate job
sequencer run long print-job mix (thousands sheets more) planner
462

fiOn-line Planning Scheduling Modular Printers

measure total makespan. Recently, completed print-job mix 50,000 sheets
without break, intensive regular real-life printer operation.
experiences, learned many potential applications
planner beyond direct machine control.
Exception handling. Given planner interacts parts either
higher lower control hierarchy, exceptions come many forms. believe
similar exceptions would occur applications planner interacts
physical world. robust exception handling (such replanning) important,
found much less research topic compared branches domainindependent planning.
hope observations help researchers develop planning techniques
closer needed real-world applications useful
considering deploying AI planning applications.
7.2 Ancillary Tools
course building system, developed number ancillary tools around
core planning scheduling software. Among tools, notable piece
visualizer, simulates movement sheet inside printer real time.
planner, visualizer adopts model-based principle make machineindependent possible. itinerary given discrete sequence actions,
single time stamp prescribes start time action, linear interpolation
used compute position sheet current simulation time somewhere
start times two consecutive actions. visualizer works one
following two modes: on-line mode accepts live itineraries sent planner
sockets, off-line mode reads previously recorded itineraries file stored
disk.
separate visualization engine specific designs printer, developed
simple module definition language describing dimensions module type,
locations input output ports within modules local coordinate system,
travel distance pair input output ports, optionally customized
drawing function used render type modules screen. Besides
definition module types, visualizer needs know location well orientation
module machine-wide coordinate system. possible specify
information manually, developed another ancillary tool called visualizer preprocessor used automate laborious yet error-prone task. tool,
user needs specify location orientation one module, called seed
module, locations orientations (directly indirectly
connected) modules deduced based connectivity graph modules.
machines one feasible configuration, tool find possible solutions
store multiple files used later visualizer. Besides nominal
case, visualizer simulate various exceptions paper jams break-infuture scenarios. long-term vision visualizer become design, debug,
verification tool manufacturer, well GUI console end user operates
printer.
463

fiRuml, Do, Zhou, & Fromherz

make easier run tests modular printers, developed wrapper
program glues together planner controller (or visualizer). takes
input set pre-defined test scenarios specified succinct syntax (e.g., 10sc means
print 10 single-sided color sheets). support simulation pre-fabricated exceptions,
sends special messages visualizer contains information
sheet jam occur. supports simultaneous printing jobs printers
multiple finishers, uses round robin algorithm draw sheets jobs
rate maintain fairness. facilitate remote testing debugging, wrapper program
uses sockets communicate machine controller (or visualizer).

8. Conclusion
described real-world domain requires novel on-line integration planning
scheduling formalized using temporal extension STRIPS falls
partial-order scheduling temporal PDDL. presented hybrid planner uses
state-space regression per-sheet basis, using temporal constraint network
maintain flexibility partial orderings representing resource conflicts plans
different sheets. system successfully controlled three hardware prototypes
outperforms state-of-the-art planners domain. domain-dependent search control
heuristics necessary control printer composed 170 modules real time.
described extensions handle two critical issues: (1) real-time execution failures;
(2) objective functions beyond productivity. successfully demonstrated fast
replanning multiple objective handling three physical prototype printers many
potential printer configurations simulation.
work provides example AI planning scheduling find real-world
application exotic domains spacecraft mobile robot control,
common down-to-earth problems manufacturing process control. modular
printer domain representative wider class AI applications require continual
on-line decision-making. novel combination fast continual temporal planning
techniques, shown artificial intelligence successfully enable robust, highperformance, autonomous operation without hand-coded control knowledge.

Acknowledgments
Much work done first author Palo Alto Research Center.
Preliminary results project published Ruml, Do, Fromherz (2005),
Ruml (2006), Do, Ruml, Zhou (2008) summarized Do, Ruml,
Zhou (2008). authors would thank members Embedded Reasoning
Area PARC, especially Lara Crawford, Haitham Hindi, Johan de Kleer, Lukas Kuhn,
well Danny Bobrow, David Biegelsen, Craig Eldershaw, Dave Duff help
contributions project. industrial collaborators provided domain
expertise invaluable helping us simplify frame application useful
way. Wed especially thank Bob Lofthus Ron Root enthusiasm
perseverance Steve Hoover supporting project.
464

fiOn-line Planning Scheduling Modular Printers

Appendix A: Video
on-line appendix JAIR website contains four movies system action:
1. nominal-simulation.mp4: shows one simplex job 200 sheets run simulation PARC prototype printer shown Figure 1. planner keeps four
print engines busy, achieving full productivity system.
2. nominal-hardware.wmv: shows two simplex jobs run simultaneously using
four engines PARC hardware prototype. two feeders left
two simple finishing trays right. Red lights machine modules show
position sheets. (Background time synchronization indicated periodic
blinking.) lower left corner, schematic visualization shows sheets
moving machine, one job colored blue red.
3. replanning-simulation.mp4: show simple exceptions handling scenario simulation. Blue sheets red sheets belong different jobs. second sheet blue
job jams. third sheet, already in-flight, rerouted middle purge tray
fresh plans initiated recreate sheets. red job continues uninterrupted.
4. replanning-hardware.wmv: demonstrates two exception handling scenarios.
first shows simple on-line replanning. sheet launched, button pushed
module sheet headed toward, mark module broken.
initiates replanning, sheet routed around failed module. second
modules button pushed, marking failed thereby blocking finishing tray
sheet headed toward. sheet rerouting emerges
remaining finishing tray.
second scenario, module broken already contains first sheet
two-sheet job. replanner fast enough reroute second sheet around
jammed first sheet purge tray. original two sheets planned
scratch arrive lower finishing tray.

References
Baptiste, P., & Pape, C. L. (1995). theoretical experimental comparison constraint
propagation techniques disjunctive scheduling. Proceedings IJCAI-95, pp.
600606.
Bartak, R. (2002). Visopt shopfloor: edge planning scheduling. Proceedings
Conference Principles Practice Constraint Programming (CP-02), pp.
587602.
Boutilier, C., Dean, T., & Hanks, S. (1999). Decision-theoretic planning: Structural assumptions computational leverage. Journal Artificial Intelligence Research,
11, 191.
Cervoni, R., Cesta, A., & Oddi, A. (1994). Managing dynamic temporal constraint networks.
Proceedings AIPS-94, pp. 1318.
465

fiRuml, Do, Zhou, & Fromherz

Chen, Y., Hsu, C.-W., & Wah, B. (2006). Temporal planning using subgoal partitioning
resolution sgplan. Journal Artificial Intelligence Research, 26, 323369.
Chien, S. A., Knight, R., Stechert, A., Sherwood, R., & Rabideau, G. (1999). Using iterative repair improve responsiveness planning scheduling autonomous
spacecraft. Proc. IJCAI.
Chleq, N. (1995). Efficient algorithms networks quantitative temporal constraints.
Proceedings Constraints-95, pp. 4045.
Crawford, L., Hindi, H., Zhou, R., & Larner, D. (2009). Synchronized control large-scale
networked distributed printing system. Proceedings 2009 IEEE International
Conference Robotics Automation (ICRA-06).
Culberson, J., & Schaeffer, J. (1998). Pattern databases. Computational Intelligence, 14 (3),
318334.
Dechter, R., Meiri, I., & Pearl, J. (1991). Temporal constraint networks. Artificial Intelligence, 49, 6195.
desJardins, M. E., Durfee, E. H., Ortiz, Jr., C. L., & Wolverton, M. J. (1999). survey
research distributed, continual planning. AI Magazine, 20 (4), 1322.
Do, M., Ruml, W., & Zhou, R. (2008). On-line planning scheduling: application
controlling modular printers. Proceedings AAAI-08.
Do, M. B., & Kambhampati, S. (2002). Sapa: multi-objective metric temporal planer.
Journal Artificial Intelligence Research, 20, 155194.
Do, M. B., & Ruml, W. (2006). Lessons learned applying domain-independent planning
high-speed manufacturing. Proceedings ICAPS-06, pp. 370373.
Do, M. B., Ruml, W., & Zhou, R. (2008). Planning modular printers: Beyond productivity. Proceedings Eighteenth International Conference Automated
Planning Scheduling (ICAPS).
Fox, M., Gerevini, A., Long, D., & Serina, I. (2006). Plan stability: Replanning versus plan
repair. Proc. ICAPS-06, pp. 212221.
Fox, M., & Long, D. (1998). automatic inference state invariants TIM. Journal
Artificial Intelligence Research, 9, 367421.
Fox, M., & Long, D. (2003). PDDL2.1: extension PDDL expressing temporal
planning domains. Journal Artificial Intelligence Research, 20, 61124.
Frank, J., & Jonsson, A. (2003). Constraint-based attribute interval planning. Constraints, 8, 339364.
Franklin, G., Powell, J., & Workman, M. (1997). Digital Control Dynamic Systems.
Prentice Hall.
Fromherz, M. P. J., Bobrow, D. G., & de Kleer, J. (2003). Model-based computing
design control reconfigurable systems. AI Magazine, 24 (4), 120130.
Fromherz, M. P. J., Saraswat, V. A., & Bobrow, D. G. (1999). Model-based computing:
Developing flexible machine control software. Artificial Intelligence, 114 (12), 157
202.
466

fiOn-line Planning Scheduling Modular Printers

Gerevini, A., & Long, D. (2006). Preferences soft constraints pddl3. Workshop
Preferences Soft Constraints Planning, ICAPS06.
Gerevini, A., Saetti, A., & Serina, I. (2003). Planning stochastic local search
temporal action graphs lpg. Journal Artificial Intelligence Research, 20, 239290.
Gerevini, A., Saetti, A., & Serina, I. (2008). approach efficient planning numerical
fluents multi-criteria plan quality. Artificial Intelligence, 172, 899944.
Gerevini, A., & Schuert, L. (1998). Inferring state constraints domain-independent
planning. Proceedings Fifteenth National Conference Artificial Intelligence
(AAAI).
Ghallab, M., & Laruelle, H. (1994). Representation control IxTeT, temporal
planner. Proceedings AIPS-94, pp. 6167.
Ghallab, M., Nau, D., & Traverso, P. (2004). Automated Planning Theory Practice.
Morgan Kaufmann, San Francisco.
Ginsberg, M. L., & Harvey, W. D. (1992). Iterative broadening. Artificial Intelligence, 55,
367383.
Green, P. (2002). Colorimetry colour difference. Green, P., & MacDonald, L. (Eds.),
Color Engineering, pp. 4977. Wiley.
Haslum, P., & Geffner, H. (2000). Admissible heuristics optimal planning. Proceedings
AIPS, pp. 140149.
Haslum, P., & Geffner, H. (2001). Heuristic planning time resources. Proceedings
ECP-01.
Hindi, H., Crawford, L., & Fromherz, M. (2005). Synchronization state based control
processes delayed asynchronous measurements. Proc. Decision
Control, 2005 2005 European Control Conference. CDC-ECC 05, pp. 63706375.
Hindi, H., Crawford, L., Zhou, R., & Eldershaw, C. (2008). Efficient waypoint tracking
hybrid controllers double integrators using classical time optimal control. Proc.
47th IEEE Conference Decision Control, 2008 (CDC 2008).
Hoffmann, J., & Nebel, B. (2001). planning system: Fast plan generation
heuristic search. Journal Artificial Intelligence Research, 14, 253302.
Holte, R., Felner, A., Newton, J., Meshulam, R., & Furcy, D. (2006). Maximizing
multiple pattern databases speeds heuristic search. Artificial Intelligence, 170 (16
- 17), 11231136.
Koehler, J., & Hoffmann, J. (2000). reasonable forced goal orderings use
agenda-driven planning algorithm. Journal Artificial Intelligence Research,
12, 338386.
Korf, R. E. (1996). Improved limited discrepancy search. Proceedings AAAI-96, pp.
286291. MIT Press.
Le, T. C., Baral, C., Zhang, X., & Tran, S. (2004). Regression respect sensing
actions partial states. Proceedings AAAI-04.
467

fiRuml, Do, Zhou, & Fromherz

Muscettola, N. (1994). HSTS: Integrating planning scheduling. Zweben, M., & Fox,
M. S. (Eds.), Intelligent Scheduling, chap. 6, pp. 169212. Morgan Kaufmann.
Muscettola, N., Morris, P., & Tsamardinos, I. (1998). Reformulating temporal plans
efficient execution. Proceedings Conference Principles Knowledge Representation Reasoning (KR-98).
Nguyen, X., Kambhampati, S., & Nigenda, R. S. (2002). Planning graph basis
derive heuristics plan synthesis state space csp search. Artificial Intelligence,
135 (1-2), 73124.
Palacios, H., & Geffner, H. (2002). Planning branch bound: constraint programming implementation. Proceedings CLEI-02.
Policella, N., Cesta, A., Oddi, A., & Smith, S. F. (2007). precedence constraint posting
partial order schedules. AI Communications, 20 (3), 163180.
Pryor, L., & Collins, G. (1996). Planning contingencies: decision-based approach.
Journal Artificial Intelligence Research, 4, 287339.
Refanidis, I., & Vlahavas, I. (2003). Multiobjective heuristic state-space planning. Artificial
Intelligence, 145, 132.
Richter, S., Helmert, M., & Westphal, M. (2008). Landmarks revisited. Proceedings
AAAI-08, pp. 975982.
Rintanen, J. (2000). Incorporation temporal logic control plan operators. Proceedings Fourteenth European Conference Artificial Intelligence (ECAI-2000),
pp. 526530.
Ruml, W., Do, M. B., & Fromherz, M. P. J. (2005). On-line planning scheduling
high-speed manufacturing. Proceedings ICAPS-05, pp. 3039.
Smith, D. E., & Weld, D. S. (1999). Temporal planning mutual exclusion reasoning.
Proceedings IJCAI-99, pp. 326333.
Smith, S. F., & Cheng, C.-C. (1993). Slack-based heuristics constraint satisfaction
scheduling. Proceedings AAAI-93, pp. 139144.
Wah, B. W., & Chen, Y. (2003). Partitioning temporal planning problems mixed
space using theory extended saddle points. IEEE International Conference
Tools Artificial Intelligence.
Yoshizumi, T., Miura, T., & Ishida, T. (2000). A* partial expansion large branching
factor problems. Proceedings AAAI-2000, pp. 923929.

468


