Journal Artificial Intelligence Research 26 (2006) 323-369

Submitted 10/05; published 08/06

Temporal Planning using Subgoal Partitioning
Resolution SGPlan
Yixin Chen

chen@cse.wustl.edu

Department Computer Science Engineering
Washington University St Louis
St Louis, MO 63130 USA

Benjamin W. Wah
Chih-Wei Hsu

wah@manip.crhc.uiuc.edu
chsu@manip.crhc.uiuc.edu

Department Electrical Computer Engineering
Coordinated Science Laboratory
University Illinois Urbana-Champaign
Urbana, IL 61801 USA

Abstract
paper, present partitioning mutual-exclusion (mutex) constraints
temporal planning problems implementation SGPlan4 planner. Based
strong locality mutex constraints observed many benchmarks Fourth International Planning Competition (IPC4), propose partition constraints
planning problem groups based subgoals. Constraint partitioning leads
significantly easier subproblems similar original problem
efficiently solved planner modifications objective function. present partition-and-resolve strategy looks locally optimal subplans
constraint-partitioned temporal planning subproblems resolves inconsistent
global constraints across subproblems. discuss implementation details
SGPlan4 , include resolution violated global constraints, techniques handling producible resources, landmark analysis, path finding optimization, search-space
reduction, modifications Metric-FF used basic planner SGPlan4 . Last,
show results sensitivity techniques quality-time trade-offs
experimentally demonstrate SGPlan4 effective solving IPC3 IPC4
benchmarks.

1. Introduction
paper, present innovative partition-and-resolve strategy implementation SGPlan4 solving temporal planning problems PDDL2.2. strategy partitions mutual-exclusion (mutex) constraints temporal planning problem
subgoals subproblems, solves subproblems individually using modified Metric-FF
planner, resolves violated global constraints iteratively across subproblems.
evaluate various heuristics resolving global constraints demonstrate performance SGPlan4 solving benchmarks Third (IPC3) Fourth (IPC4)
International Planning Competitions.
general popular methods solving large planning problems, systematic search, heuristic search, transformation methods, viewed recursive
c
2006
AI Access Foundation. rights reserved.

fiChen, Wah, & Hsu

P:
Variable
partitioning
ordered
heuristic
functions



B

C

SP = SA SB SC

Variables:

a) Search-space partitioning

a1

11111111111111111111111111
00000000000000000000000000
00000000000000000000000000
11111111111111111111111111
00000000000000000000000000
11111111111111111111111111
00000000000000000000000000
11111111111111111111111111
00000000000000000000000000
11111111111111111111111111
00000000000000000000000000
11111111111111111111111111
00000000000000000000000000
11111111111111111111111111
00000000000000000000000
11111111111111111111111
00000000000000000000000
11111111111111111111111
00000000000000000000000
11111111111111111111111
00000000000000000000000
11111111111111111111111
00000000000000000000000
11111111111111111111111
00000000000000000000000
11111111111111111111111
a2

a3

b) Complete heuristic searches

Figure 1: Search-space partitioning branches variable assignments order decompose P disjunction () subproblems disjoint search spaces.
complexity subproblem similar P .

partitioning search space independent subproblems iterative evaluation
subproblems feasible solution found. level application
approach, problem subproblem decomposed partitioning variable space
disjunction () subspaces (Figure 1a). reduce search complexity, approach
often combined intelligent backtracking employs variable/value ordering order
subproblems generated, pre-filters partial inconsistent assignments eliminate
infeasible subproblems, prunes subproblems using bounds computed relaxation
approximation.
Search-space partitioning directly applied planning problem transformed version problem. Direct methods include complete heuristic searches.
illustrated Figure 1b, methods partition search space recursively branching
assigned variables (selection actions). difference complete search
heuristic search former enumerates subspaces systematically, whereas
latter prioritizes subspaces heuristic function evaluates selectively. Examples complete planners include UCPOP (Penberethy & Weld, 1992), Graphplan (Blum
& Furst, 1997), STAN (Long & Fox, 1998), PropPLAN (Fourman, 2000), System R (Lin,
2001), SIPE-2 (Wilkins, 1990), O-Plan2 (Tate, Drabble, & Kirby, 1994), ZENO (Penberethy
& Weld, 1994), TALplanner (Doherty & Kvarnstrm, 1999), SHOP2 (Nau, Muoz-Avila,
Cao, Lotem, & Mitchell, 2001); examples heuristic planners include HSP (Bonet &
Geffner, 2001), (Hoffmann & Nebel, 2001), AltAlt (Nigenda, Nguyen, & Kambhampati, 2000), GRT (Refanidis & Vlahavas, 2001), MO-GRT (Refanidis & Vlahavas, 2002),
ASPEN (Chien, Rabideau, Knight, Sherwood, Engelhardt, Mutz, Estlin, Smith, Fisher,
Barrett, Stebbins, & Tran, 2000), Metric-FF (Hoffmann & Nebel, 2001), GRT-R (Refanidis
& Vlahavas, 2001), LPG (Gerevini & Serina, 2002), MIPS (Edelkamp, 2002), Sapa (Subbarao & Kambhampati, 2002), Europa (Jonsson, Morris, Muscettola, & Rajan, 2000).
contrast, transformation approach, problem first transformed satisfiability
optimization problem, transformed problem solved SAT integer
programming solver employs search-space partitioning. Notable planners using
324

fiTemporal Planning using Subgoal Partitioning Resolution

10000

P:
Run time

1000

G


B

C

100
10
1
0.1

AIRPORT-NT-20
PIPESWORLD-NT-NT-50

0.01

SP = SA SB SC SG

1

a) Constraint partitioning

2
3
4
5
Number Subgoals Subproblem

b) Exponential behavior solution time

Figure 2: Constraint partitioning decomposes P conjunction () subproblems
disjoint constraints possibly overlapping search spaces, set
global constraints (G) resolved. Since complexity subproblem
substantially smaller P , leads exponential decrease solution
time Metric-FF two IPC4 benchmarks (AIRPORT-NONTEMP-20
PIPESWORLD-NOTANKAGE-NONTEMP-50) number subgoals
subproblem decreased 5 1.

approach include SATPLAN (Kautz & Selman, 1996), Blackbox (Kautz & Selman, 1999),
ILP-PLAN (Kautz & Walser, 2000), LPSAT (Wolfman & Weld, 2000).
One limitations search-space partitioning complexity problem
dramatically reduced partitioning. Although pruning ordering strategies make search efficient requiring search every subspace,
aggregate complexity finding solution one subproblems
original problem.
paper, study constraint-partitioning approach decomposes constraints planning problem conjunction () subproblems disjoint constraints possibly overlapping search spaces (Figure 2a). concept constraints
planning problems studied paper precisely defined Section 2.1. Informally,
(mutex) constraint refers condition two actions overlap
execution. Since constraints must satisfied, subproblems
must solved order solve original problem.
decomposing constraints problem subproblems solving
independently, subproblem require significantly less time solve much
relaxed original problem. illustration, Figure 2b shows exponential
decrease solution time number subgoals subproblem reduced linearly.
Here, subgoal collection conjuncts conjunctive top-level goal problem.
IPC4 instances evaluated, run time 1500 seconds
five subgoals subproblem less one second one. Hence,
aggregate complexity solving decomposed subproblems exponentially smaller
original problem.
325

fiChen, Wah, & Hsu

S0

P1

11
00
00
11

11
00
00
11
11
00
00
11
11
00
00
11

111
000
000
111
000
111
000
111
11
00
S1
00 000
11
111
000
111
000
111
000
111
000
111
000
111
000
111
000
111

11
00
00
11

P2

111
000
000
111

11
00
00
11

11
00
00
11

111
000
000
111
000
111
000
111
000
111
000
111
000
111
000
111

S2
11
00
000
111
11 111
00
000
000
111
000
111

11
00
00
11

P3

11
00
00
11

S3

11
00
11
00

11
00
00
11
11
00
00
11

11
00
00
11

11
00
11
00

Figure 3: Partitioning constraints planning problem along temporal horizon
three stages requires finding suitable intermediate states S1 S2 order
connect subplans three stages together. S0 S3 are, respectively,
initial final states.

Constraint partitioning, however, leads global constraints across subproblems (SG
Figure 2a) need resolved. global constraints include span
across common variables multiple subproblems, relate two actions
different subproblems. Since constraints may satisfied solving
subproblems independently, subproblems may need solved multiple times order
resolve violated global constraints.
general, violated global constraints across subproblems cannot efficiently resolved
brute-force enumeration search space global constraints defined
Cartesian product search spaces across subproblems exponentially
large. Dynamic programming cannot applied global constraints may span across
multiple subproblems. means partial feasible plan dominates another
partial feasible plan one subproblem fail execute dominating plan violates
global constraint another subproblem.
address resolution violated global constraints, summarize Section 3
theory extended saddle points developed previous work (Wah & Chen, 2006).
choosing suitable neighborhood, theory allows mixed-integer nonlinear programming problem (MINLP) partitioned subproblems related necessary
condition global constraints. Further, necessary condition subproblem
significantly prunes Cartesian product search spaces across subproblems
inconsistent global constraints resolved.
addition efficient resolution violated global constraints, success
approach depends strong locality constraints respect actions
relate. observed informally previous work strong locality constraints. Based strong locality, studied two alternatives partitioning
constraints: partitioning time (Wah & Chen, 2006; Chen & Wah, 2003)
partitioning subgoals (Wah & Chen, 2004, 2003).
idea partitioning planning problem time partition constraints
temporal bindings stages. find overall feasible plan, planner need
find subplan initial final states stage satisfy local
well global constraints, final state one stage initial state
326

fiTemporal Planning using Subgoal Partitioning Resolution

next stage. example, partitioning horizon three stages (Figure 3),
planner assigns values intermediate states S1 S2 , solves subproblem
individually, perturbs S1 S2 look another solution feasible subplans cannot
found stages.
major drawback partitioning planning problem temporal horizon
constraint resolutions may sequentially propagate multiple stages.
found partitioning constraints PDDL2.1 benchmarks along temporal
horizon often leads many global constraints relate states adjacent stages.
result, violated subgoal caused incorrect assignment states
early stage horizon, resolution incorrect assignment propagate
sequentially stages. Oftentimes, propagation information may cause
search get stuck infeasible point extended period time (Wah & Chen,
2004). end, expensive enumeration final state stage (S1 S2
Figure 3) may needed order resolve inconsistencies.
second approach studied previous work partition constraints
planning problem subgoals (Wah & Chen, 2004, 2003). evaluating
subproblems, inconsistent global constraints among first identified,
subproblems re-evaluated global constraints satisfied. Partitioning
subgoals eliminates need selecting final state subproblem
initial final states subgoal known. Using approach, previous
work shown improvements time quality MIPS planner solving
IPC3 benchmarks.
respect second approach, made four main contributions
paper.
First, quantitatively evaluate Section 2.2 locality constraints IPC4
benchmarks well benchmarks Blocksworld domain Depots domain.
results show constraint partitioning subgoals consistently leads lower
fraction initial active global constraints constraint partitioning time. results
explain constraint partitioning work well domains,
Blocksworld Depots.
Second, incorporate Metric-FF (Hoffmann, 2003) basic planner SGPlan4
SGPlan4.1 , instead MIPS previous work (Wah & Chen, 2004). change
non-trivial requires significant extensions Metric-FF order handle
new features PDDL2.2 beyond PDDL2.1. extensions include support
temporal planning, handling derived predicates timed initial literals,
handling wrappers timed initial literals (Section 5.3).
Third, describe new techniques improving search efficiency global-
local-level architectures partition-and-resolve approach (Section 4.1). include
handling producible resources (Section 4.3), subgoal-level decomposition using landmark analysis, path finding path optimization (Section 5.1), subgoal-level planning
using search-space reduction (Section 5.2). explain integration planners
analyze effectiveness.
Last, study Section 4.2 trade-offs solution time quality heuristics updating penalties violated global constraints. trade-offs allow us
generate plans either better quality time (SGPlan4.1 ), lower quality
327

fiChen, Wah, & Hsu

less time (SGPlan4 ). optimization quality requires estimation makespan
multiple subplans enhanced PERT algorithm (Section 5.3). previous work
constraint partitioning subgoals (Wah & Chen, 2004), focused minimizing planning time. Without optimizing quality, violated global constraints often
easier resolve planner always delay one actions order avoid
constraints. Finally, compare Section 7 performance planners
respect planners.

2. Locality Mutex Constraints Temporal Planning
section, define mutex constraints planning problems. Based structure
constraints IPC4 benchmarks, show constraint partitioning subgoals
leads constraints localized better constraint partitioning time.
2.1 Representation Mutex Constraints
following standard notations definitions literature (Hoffmann & Nebel, 2001;
Garrido, Fox, & Long, 2002), summarize section basic definitions mutex
constraints used paper.
Definition 1. planning problem = (O, F, I, G) quadruple, set
possible actions , F set facts, set initial facts, G set
goal facts.


Definition 2. state = f1 , , fnS subset facts F true.
Definition 3. STRIPS action associated following attributes:
a) pre(a), set facts define preconditions action a;
b) add(a), set facts define add effects a;
c) del(a), set facts define delete effects a.
resulting state applying action state defined as:
(
(S add(a))\del(a) pre(a)
Result(S, a) =

pre(a) 6 S.

(1)

resulting state applying sequence actions a1 , , recursively defined
as:
Result(S, (a1 , , )) = Result(Result(S, (a1 , , an1 )), ).

(2)

Next, extend action model temporal planning. durative actions supported
PDDL2.2, precondition fact effective beginning, end,
entire duration action; whereas add effect delete effect effective
beginning end action.
Definition 4. temporal action associated following attributes:
a) s(a) e(a) define, respectively, start time end time a.
328

fiTemporal Planning using Subgoal Partitioning Resolution

action
active mutexes
pre(a1 )

add(a4 )

a1

pre(a5 )

a4

a5

a2
del(a2 )

add(a2 )

a7
a6

a3
del(a3 )

pre(a6 )

del(a7 )

time

Figure 4: example temporal plan, active mutexes actions shown
dashed lines, inactive mutexes dotted lines.

b) preconditions divided three types: prestart (a), set initial
preconditions held s(a); preend (a), set final preconditions held e(a);
preoverall (a), set invariant preconditions open interval (s(a), e(a)).
c) two types add effects: addstart (a), set initial add effects
asserted s(a); addend (a), set final add effects asserted e(a).
d) two type delete effects: delstart (a), set initial delete effects
asserted s(a); delend (a), set final delete effects asserted e(a).
Definition 5. temporal plan P = {a1 , a2 , , } list temporal actions,
ai assigned start time s(ai ) end time e(ai ).
Figure 4 illustrates temporal plan seven actions. action, indicate,
appropriate, preconditions, add effects, delete effects.
Concurrent actions plan must arranged way observes mutual
exclusions (mutexes). notion mutex first proposed GraphPlan (Blum & Furst,
1997). defined planning graph, level-by-level constraint graph
alternates fact level action level. Mutex relationships planning graph
classified transient (level-dependent) persistent (level-independent) (Blum
& Furst, 1997). mutex transient exists certain levels graph
vanishes levels graph built. contrast, mutex persistent holds
every level fix-point level (the last level graph) achieved. paper,
consider level-independent, persistent mutex relationships, transient mutexes
exclusively used searches GraphPlan.
Actions b marked persistently mutual exclusive one following
occurs.
329

fiChen, Wah, & Hsu

a) Actions b persistent competing needs,1 competing needs
represented persistent mutex preconditions b;
b) persistent inconsistent effects, one action deletes add effect
other.
c) persistent interference, one action deletes precondition other.
Two facts p q persistently mutual exclusive possible ways making p true
persistently exclusive possible ways making q true; is, action
p add effect (p add(a)) persistently mutual exclusive action
b q add effect (q add(b)). simplicity, rest paper, mutex
actions facts refer corresponding persistent mutex actions facts.
Given temporal plan, mutex relationship active inactive. example,
actions a1 a2 Figure 4 active mutex two actions overlap
execution persistent interference. However, a2 a3 inactive mutex
overlap execution.
Based discussion, conditions active mutex occur two
actions b summarized four cases (Garrido et al., 2002):
a) Actions b start together, nonempty intersection
initial preconditions (resp. add effects) initial delete effects (resp. delete effects).
b) Actions b end together, nonempty intersection
final preconditions (resp. add effects) final delete effects (resp. delete effects).
c) Action ends b starts, nonempty intersection final
delete effects (resp. delete effects, add effects, preconditions) initial add
effects (resp. preconditions, delete effects, delete effects) b.
d) Action starts (resp. ends) execution b, nonempty intersection initial (resp. final) delete effects invariant preconditions
b.
conditions introduced prevent two mutually exclusive actions
executing simultaneously, may actions block propagation facts
(no-op action) cause unsupported actions later. condition detected
looking actions delete existing facts current plan. respect
conditions mutex due competing needs, need represent explicitly
mutexes due competing needs must accompany two types mutex:
two preconditions mutually exclusive due competing needs, two action
sequences making true mutually exclusive. example, active mutex
a5 a6 Figure 4 due competing needs caused active mutex
a3 a4 .
mutex constraints studied paper closed form. Instead,
defined discrete procedural function checks pair actions meet one four
conditions above. inputs function start time end time
action, continuous temporal problems discrete propositional problems.
1. terms competing needs, inconsistent effects, interference originally proposed
GraphPlan (Blum & Furst, 1997).

330

fiTemporal Planning using Subgoal Partitioning Resolution

11
00
00
11

11
00
00
11
11
00
11
00

11
00
00
11

11
00
00
11

00
11
00
11
11111111111
00000000000
00
11
00000000000
11111111111
00
11
00000000000
11111111111
00000000000
11111111111
000
111
00000000000
11111111111
000
111

11
00
00
11

Subproblem 2

11
00
00
11

11
00
00
11

Subproblem 1

00
11
00
11
11111111111
00000000000
00
11
00000000000
11111111111
00
11
00000000000
11111111111
00000000000
11111111111
00
11
00000000000
11111111111
00
11

11
00
00
11

11
00
00
11

11
00
00
11

11
00
11
00

11
00
11
00

11
00
00
11

11
00
00
11

11
00
11
00

11
00
11
00
11
00
00
11

11
00
11
00

11
00
00
11
11
00
00
11

11
00
00
11

11
00
00
11

11
00
00
11

Subproblem 3

11
00
00
11

11
00
00
11

11
00
11
00

11
00
11
00
11
00
00
11

11
00
00
11
11
00
00
11

11
00
00
11

a) 63 mutex constraints among actions b) Partitioning mutex constraints subgoals
Figure 5: Mutex constraints IPC4 AIRPORT-TEMP-4 instance. rectangular
box represents action, line joining two actions represents mutex constraint (that may inactive). constraints (52 63 83%) local
constraints partitioning subgoals. Global mutex constraints
shown dashed lines (b).

2.2 Locality Mutex Constraints
section, evaluate partitioning mutex constraints planning benchmarks. analysis shows strong locality constraints partitioned
subgoals compared case partitioned time. study
criteria partitioning may lead subproblems whose initial final states specified. subproblems hard solve existing planners
may require systematic enumeration initial final states
finding feasible plans.
Figure 5a shows 63 mutex constraints solution plan fourth instance
IPC4 AIRPORT-TEMP domain. instance involves moving three planes airport
designated gates. rectangular box figure represents action, whereas line
joining two actions represents mutex constraint (that may inactive). Figure 5b shows
partitioning constraints three subproblems, involving movement
one plane. show local constraints (those relevant actions one subproblem) solid lines global constraints relating actions different subproblems
dashed lines. clear majority (83%) constraints local partitioning
subgoals.
demonstrate localization mutex constraints partitioned subgoals,
analyze IPC4 instances. first modify original Metric-FF planner (Hoffmann,
2003) order support new features PDDL2.2, temporal actions derived
predicates. instance, use modified planner find initial subplan
subproblems. find mutexes among actions, including active
inactive ones. Finally, compute number global constraints related actions
331

firga,G

0.6
0.4
0.2
0

1.0

0.6
0.4
0.2
0

rga,G

0.6
0.4
0.2
0

1.0

rga,G

0.6
0.4
0.2
0

0 5 10 15 20 25 30 35 40 45 50
Instance ID

0

rg,T
rg,G

0.8

rga,G

0.6
0.4
0.2
0
0 5 10 15 20 25 30 35 40 45 50
Instance ID

f) UMTS-TEMP

0.4
0.2
0

5

2

4

1.0

rg,T
rg,G

0.8

rga,G

0.6
0.4
0.2
0
0

5

10
15
Instance ID

g) DEPOTS-TIME

20

12

14

0.6
0.4
0.2
0

10 15 20 25 30 35 40
Instance ID

1.0

6
8 10
Instance ID

rg,T
rg,G
rga,G

0.8

0 2 4 6 8 10 12 14 16 18 20
Instance ID

d) SATELLITE-TIME
Global-constraint fraction

Global-constraint fraction

d) PSR-SMALL
1.0

0.6

c) PROMELA-OPTICALTELEGRAPH

rg,T
rg,G

0.8

rg,T
rg,G
rga,G

0.8

0

Global-constraint fraction

b) PIPESWORLD-NOTANKAGENONTEMP

rg,T
rg,G

0.8

rga,G

1.0

0 5 10 15 20 25 30 35 40 45 50
Instance ID

Global-constraint fraction

Global-constraint fraction

1.0

rg,T
rg,G

0.8

0 5 10 15 20 25 30 35 40 45 50
Instance ID

a) AIRPORT-TEMP

Global-constraint fraction

rg,T
rg,G

0.8

e) SETTLER
Global-constraint fraction

1.0

Global-constraint fraction

Global-constraint fraction

Chen, Wah, & Hsu

25

1.0

rg,T
rg,G

0.8

rga,G

0.6
0.4
0.2
0
0

5

10
15
Instance ID

20

25

h) BLOCKSWORLD

Figure 6: Variations rg,T , rg,G , rga,G across instances seven IPC4 domain
variants well instances DEPOTS-TIME domain variant
IPC3 Blocksworld domain IPC2. (The latter two domains
deemed difficult constraint partitioning.)

different subplans, well number initial active global constraints based
subplan evaluated subproblem. comparison, evaluate partitioning
constraints temporal horizon.
Figure 6 illustrates results seven IPC4 domain variants, well Blocksworld
domain IPC2 DEPOTS-TIME variant IPC3. Table 1 summarizes
average statistics across instances IPC4 domain variant
Blocksworld domain Depots domain variants. instance partitioning
time, use modified Metric-FF planner find initial plan, set number
temporal stages number subgoals, partition horizon
solution plan evenly multiple stages. count number local constraints
stage number global constraints relating actions different stages.
instance, let Nc total number mutex constraints, NgT number global
constraints constraint partitioning time, NgG number global constraints
332

fiTemporal Planning using Subgoal Partitioning Resolution

Table 1: Average rg,T , rg,G , rga,G across instances IPC4 domains well Depots
domain IPC3 Blocksworld domain IPC2. (The latter two
deemed difficult constraint partitioning.) Boxed numbers less 0.1.
Domain Variant

r g,T

r g,G

AIRPORT-NONTEMP
AIRPORT-TEMP
AIRPORT-TEMP-TIMEWINDOWS
AIRPORT-TEMP-TIMEWINDOWS-CO
PIPESWORLD-NOTANKAGE-NONTEMP
PIPESWORLD-NOTANKAGE-TEMP
PIPESWORLD-NOTANKAGE-TEMP-DEADLINE
PIPESWORLD-TANKAGE-NONTEMP
PIPESWORLD-TANKAGE-TEMP
PIPESWORLD-NOTANKAGE-TEMP-DEADLINE-CO
PROMELA-OPTICAL-TELEGRAPH
PROMELA-OPTICAL-TELEGRAPH-DP
PROMELA-OPTICAL-TELEGRAPH-FL
PROMELA-PHILOSOPHER
PROMELA-PHILOSOPHER-DP
PROMELA-PHILOSOPHER-FL
PSR-SMALL
PSR-MIDDLE
PSR-MIDDLE-CO
PSR-LARGE
SATELLITE-STRIPS
SATELLITE-TIME
SATELLITE-TIME-TIMEWINDOWS
SATELLITE-TIME-TIMEWINDOWS-CO
SATELLITE-NUMERIC
SATELLITE-COMPLEX
SATELLITE-COMPLEX-TIMEWINDOWS
SATELLITE-COMPLEX-TIMEWINDOWS-CO
SETTLERS
UMTS-TEMP
UMTS-TEMP-TIMEWINDOWS
UMTS-TEMP-TIMEWINDOWS-CO
UMTS-FLAW-TEMP
UMTS-FLAW-TEMP-TIMEWINDOWS
UMTS-FLAW-TEMP-TIMEWINDOWS-CO
DEPOTS-STRIPS
DEPOTS-SIMPLETIME
DEPOTS-NUMERIC
DEPOTS-TIME
BLOCKSWORLD

0.557
0.568
0.494
0.495
0.695
0.682
0.674
0.687
0.683
0.682
0.575
0.759
0.799
0.554
0.855
0.822
0.897
0.896
0.882
0.902
0.689
0.686
0.648
0.633
0.288
0.642
0.633
0.698
0.549
0.463
0.437
0.407
0.459
0.428
0.414
0.537
0.572
0.491
0.448
0.549

0.219
0.208
0.184
0.188
0.313
0.301
0.297
0.677
0.459
0.296
0.399
0.265
0.426
0.370
0.576
0.507
0.489
0.504
0.478
0.665
0.288
0.289
0.114
0.307
0.305
0.282
0.124
0.153
0.451
0.157
0.126
0.098
0.136
0.110
0.086
0.418
0.304
0.354
0.237
0.314

333

r
ga,G
0.017
0.014
0.013
0.014
0.044
0.042
0.033
0.070
0.126
0.039
0.052
0.020
0.037
0.066
0.019
0.087
0.114
0.092
0.049
0.096
0.096
0.093
0.027
0.075
0.078
0.069
0.041
0.042
0.100
0.006
0.008
0.008
0.006
0.008
0.007
0.231
0.167
0.188
0.197
0.254

fiChen, Wah, & Hsu

G number initial active global
constraint partitioning subgoals, Nga
constraints constraint partitioning subgoals. compute following ratios:

NgT
: fraction global constraints constraint partitioning time;
Nc
NgG
rg,G =
: fraction global constraints constraint partitioning subgoals;
Nc
G
Nga
rga,G =
: fraction initial active global constraints subgoal partitioning.
Nc

rg,T =

respect instances IPC4 domains, results show constraint partitioning subgoals leads lower rg,G rg,T , fractions vary significantly,
rga,G small instances. Except PSR-SMALL SETTLERS, rga,G
consistently less 0.1. behavior important active constraints
need resolved planning, number constraints decrease
planning progresses. describe Section 4.2 two strategies reducing number
active global constraints planning.
behavior worse instances Blocksworld domain Depots domain variants. two domains, rga,G consistently high (over 20%) constraints
partitioned subgoals. reason actions different subgoals
instance highly related, making difficult cluster constraints leading
larger fraction global constraints. evaluate performance approach
two domains Section 7.

3. Constraint Partitioning using Penalty Formulations
Given constrained formulation planning problem, summarize section
theory extended saddle points mixed space (Wah & Chen, 2006) design
planners based upon.
3.1 Extended Saddle-Point Condition
Consider following MINLP variable z = (x, y), x Rv Dw :
(Pm ) :

min
z

subject

f (z),

(3)

h(z) = 0 g(z) 0,

f continuous differentiable respect x, g = (g1 , . . . , gr )T h =
(h1 , . . . , hm )T general functions necessarily continuous differentiable.
assumptions important constraints planners procedural
functions closed form. assume f lower bounded, g h
unbounded.
goal solving Pm find constrained local minimum z = (x , )
respect Nm (z ), mixed neighborhood z . results published
earlier (Wah & Chen, 2006), summarize high-level concepts without
precise formalism.
334

fiTemporal Planning using Subgoal Partitioning Resolution

mixed neighborhood Nm (z), z = (x, y), mixed space Rv Dw is:









(4)
Nm (z) = (x , y) x Nc (x) (x, ) Nd (y) ,

Definition 6.

Nc (x) = {x : kx xk 0} continuous neighborhood x,
discrete neighborhood Nd (y) finite user-defined set points {y Dw }.
Definition 7. Point z CLMm , constrained local minimum Pm respect
points Nm (z ), z feasible f (z ) f (z) feasible z Nm (z ).
Definition 8.

penalty function Pm penalty vectors Rm Rr is:
Lm (z, , ) = f (z) + |h(z)| + max(0, g(z)).

(5)

Next, define informally constraint-qualification condition needed main theorem (Wah & Chen, 2006). Consider feasible point z = (x , ) neighboring point
z = (x + p~, ) infinitely small perturbation along direction p~ X x subspace. constraint-qualification condition satisfied z , means
~
p rates change equality active inequality constraints
z z zero. see necessary, assume f (z) z decreases along p~
equality active inequality constraints z zero rates change z
z . case, possible find finite penalty values constraints
z way leads local minimum penalty function z respect
z . Hence, scenario true p~ z , possible
local minimum penalty function z . short, constraint qualification
z requires least one equality active inequality constraint non-zero rate
change along direction ~
p z x subspace.
Theorem 1. Necessary sufficient ESPC CLMm Pm (Wah & Chen, 2006).
Assuming z Rv Dw Pm satisfies constraint-qualification condition, z
CLMm Pm iff exist finite 0 0 satisfies following extended
saddle-point condition (ESPC):
Lm (z , , ) Lm (z , , ) Lm (z, , )

(6)

> > z Nm (z ), Rm , Rr .
Note (6) satisfied rather loose conditions requires
larger critical . theorem important
establishes one-to-one correspondence CLMm z Pm ESP
(extended saddle point) corresponding unconstrained penalty function (5)
penalties sufficiently large. theorem leads easy way finding CLMm .
Since ESP local minimum (5) (but converse), z found gradually
increasing penalties violated constraints (5) repeatedly finding
local minima (5) feasible solution Pm obtained. possible
exist many algorithms locating local minima unconstrained functions.
335

fiChen, Wah, & Hsu

3.2 Partitioned Extended Saddle-Point Condition
important feature ESPC Theorem 1 condition partitioned
way subproblem implementing partitioned condition solved
looking larger .
Consider Pt , version Pm whose constraints partitioned N subproblems:
(Pt ) :

min
z

subject


J(z)
h(t) (z(t)) = 0,
H(z) = 0,

g(t) (z(t)) 0
G(z) 0

(local constraints)

(7)

(global constraints).

Subproblem t, = 1, . . . , N , Pt local state vector z(t) = (z1 (t), . . . , zut (t))T ut
mixed variables, N
t=1 z(t) = z. Here, z(t) includes variables appear
(t)
(t)
mt local equality constraint functions h(t) = (h1 , . . . , hmt )T rt local inequal(t)
(t)
ity constraint functions g(t) = (g1 , . . . , grt )T . Since partitioning constraints,
z(1), . . . , z(N ) may overlap other. H = (H1 , . . . , Hp )T G = (G1 , . . . , Gq )T
global-constraint functions z. assume J continuous differentiable
respect continuous variables, f lower bounded, g, h, G, H
general functions discontinuous, non-differentiable, unbounded.
first define Np (z), mixed neighborhood z Pt , decompose ESPC
(6) set necessary conditions collectively sufficient. partitioned
condition satisfied finding local ESP subproblem, violated global
constraints resolved using appropriate penalties.
Np (z), mixed neighborhood z partitioned problem, is:

N
N
[
[

(t)


Np (z) =
Np (z) =
/ z(t) ,
z z (t) Nm (z(t)) zi = zi zi

Definition 9.

t=1

(8)

t=1

Nm (z(t)) mixed neighborhood z(t).

Intuitively, Np (z) separated N neighborhoods, tth neighborhood perturbs variables z(t) leaving variables z\z(t) unchanged.
Without showing details, consider Pt MINLP apply Theorem 1
derive ESPC Pt . decompose ESPC N necessary conditions, one
subproblem, overall necessary condition global constraints across
subproblems. first define penalty function Subproblem t.
Definition 10. Let (z, , ) = |H(z)|+ max(0, G(z)) sum transformed
p
global constraint functions weighted penalties, = (1 , . . . , p )T R
q
= (1 , . . . , q )T R penalty vectors global constraints. penalty
function Pt (7) corresponding penalty function Subproblem defined
follows:

N
X
(t)

(t)
Lm (z, , , , ) = J(z) +
(t) |h (z(t))| + (t) max(0, g (z(t)) +(z, , ), (9)
t=1

(z, (t), (t), , ) = J(z) + (t)T |h(t) (z(t))| + (t)T max(0, g(t) (z(t))) + (z, , ), (10)
336

fiTemporal Planning using Subgoal Partitioning Resolution



(t) = (1 (t), . . . , mt (t))T R (t) = (1 (t), . . . , rt (t))T R
penalty vectors local constraints Subproblem t.

rt



Theorem 2. Partitioned necessary sufficient ESPC CLMm Pt (Wah & Chen,
2006). Given Np (z), ESPC (6) rewritten N + 1 necessary conditions that,
collectively, sufficient:
(z , (t), (t), , ) (z , (t) , (t) , , ) (z, (t) , (t) , , ), (11)
Lm (z , , , , ) Lm (z , , , , ),(12)

(t) > (t) 0, (t) > (t) 0, 0, 0,

r
p
q
(t)
z Np (z ), (t) R , (t) R , R , R , = 1, . . . , N .
Theorem 2 shows original ESPC Theorem 1 partitioned N necessary conditions (11) overall necessary condition (12) global constraints
across subproblems. partitioned condition Subproblem satisfied
finding ESPs subproblem. finding ESP equivalent solving
MINLP, reformulate search Subproblem solution following
optimization problem:


(t)
Pt
J(z) + |H(z)| + max(0, G(z))
(13)
:
min
z(t)

subject

h(t) (z(t)) = 0

g(t) (z(t)) 0.
(t)

weighted sum global constraint functions objective Pt important
leads points minimize violations global constraints.
(t)
large enough, solving Pt lead points, exist, satisfy global constraints.
short, finding solutions Pt satisfy (6) reduced solving multiple
subproblems, (13) solved existing solver modifications
objective function optimized, reweighting violated global constraints
defined (12).
3.3 Formulation Partitioned Planning Subproblems PDDL2.2
PDDL2.2 planning problem solved paper, solution plan specified
start time end time action O. Hence, variable vector z =
{s(a), e(a) O}; objective function J(z) optimized depends makespan
(or number actions propositional domains) plan z; constraints
mutex constraints defined Section 2.1:


h(ai , aj ) = mutex s(ai ), e(ai ), s(aj ), e(aj ) = 0,
ai , aj O.
(14)
Here, mutex binary procedure checking whether ai aj satisfy mutex conditions defined Section 2.1. returns one conditions satisfied zero otherwise.
constraints partitioned subgoals N subproblems G1 , , GN ,
variable z partitioned N subsets z(1), , z(N ), z(t) includes start time
337

fiChen, Wah, & Hsu



(1)

Pt

x
Lm(z, , , , ), find

minz(1) J(z) + |H(z)| + max(0, G(z))
:
subject h(1)(z(1)) = 0 g (1)(z(1)) 0



(N)
Pt



minz(N) J(z) + |H(z)| + max(0, G(z))
:
subject h(N) (z(N )) = 0 g (N) (z(N )) 0

a) Partitioned search look points satisfy (11) (12)
1. procedure partition resolve(Pt )
2.
0; 0;
3.
repeat
// increase penalties violated global constraints maximum bounds //
4.
= 1 p (Hi (z) 6= 0 < ) increase end end for;
5.
j = 1 q (Gj (z) 0 j < j ) increase j end end for;
// inner loop solving N subproblems //
6.
= 1 N apply existing solver solve (13) end for;
7.
((i > Hi (z) 6= 0 j > j Gj (z) 0) (a CLMm Pt found))
8. end procedure

b) Implementation finding CLMm Pt satisfies (11) (12)
Figure 7: partition-and-resolve procedure look CLMm Pt .

end time actions Gt . local constraints mutex constraints
relate actions within subproblem, global constraints relate
actions across subproblems.
(t)
Pt defined Gt , objective find feasible plan z(t) satisfies
constraints Gt , minimizing objective function biased violated global
constraints:


(t)
Pt
:

min
z(t)

subject

J(z) +

N
X
k=1
k6=t

t,k mt,k

h(t) (ai , aj ) = 0

(15)

ai , aj z(t),

J(z) defined later Section 5.3. Here, mt,k number global constraints
actions z(t) z(k):
mt,k =

X

h(at , ak ).

(16)

z(t)
ak z(k)
k6=t

limit number penalties characterizing priorities among subproblems,
assigned single penalty t,k pair subproblems Gt Gk , instead
penalty global constraint Gt Gk .
338

fiSubgoal-Level Planning

Global-Level Planning

Temporal Planning using Subgoal Partitioning Resolution

Plan
Evaluation

Techniques
Studied

Penalty-Value
Update Strategy

GlobalConstraint
Resolution

Global Constraints Subgoals

G1

P1,1

G2

Producible
Resources
GN

PN,1

P1,c1

PN,cN

Constraint
Partitioning
Subgoals

Landmark
Analysis

Temporal
Engine
Modified MetricFF

Derived
predicates
engine

Temporal
engine

DerivedPredicates
Engine
Searchspace
reduction

SearchSpace
Reduction

Figure 8: SGPlan4 : planner implementing partition-and-resolve procedure Figure 7.

3.4 Partition-and-Resolve Procedure
Figure 7 presents partition-and-resolve procedure finding points satisfy
conditions Theorem 2. Using fixed specified outer loop, inner loop
Subproblem Figure 7b solves (13) existing solver, results ESP
satisfies (11). possible (13) well-defined MINLP. solving
N subproblems, penalties violated global constraints increased outer
loop. process repeated CLMm Pt found exceed
maximum bounds.
procedure Figure 7 may generate fixed points (9) satisfy (11)
(12). happens ESP local minimum (9) (but converse). One
way escape fixed points allow periodic decreases . goal
decreases lower barrier penalty function order local descents
inner loop escape infeasible region. Note decreased
gradually order help search escape infeasible regions.
reach minimum thresholds, scaled up, search repeated.
339

fiChen, Wah, & Hsu

4. System Architecture SGPlan4
Figure 8 shows design SGPlan4 implements partition-and-resolve procedure.
procedure alternates global-level planning subgoal-level planning.
section, describe techniques implemented global level, leaving
discussion techniques subgoal level next section.
4.1 Partition-and-Resolve Process SGPlan4
global level, SGPlan4 partitions planning problem N subproblems, G1 , , GN ,
Gt corresponds tth subgoal. orders subproblems, evaluates
using techniques subgoal-level planning, identifies violated global constraints,
updates penalties order bias search next iteration towards resolving
them. SGPlan4 , adopted implementation LPG1.2 (Gerevini & Serina,
2002) detecting persistent mutexes.
partition-and-resolve process understood calculating subplans separately
merging consistent plan. goals optimize multiple subplans
ensure consistency merging. Prior work plan merging focuses
merging redundant actions finding optimal composed plan. particular, Foulser,
Li, Yang (1992) developed algorithms merging feasible classic plans
efficient ones. complete evaluation plan-merging algorithms classical domains
conducted Yang (1997). Tsamardinos, Pollack, Horty (2000) extended
concept domains temporal constraints. plan merging means
making infeasible plan feasible, different approach aims resolve
inconsistencies terms mutexes among subplans.
alternative view resolution approach reuse modification
subplans consistent plan. Plan-reuse systems adapt existing plans new initial states goals. approach demonstrated SPA (Hanks & Weld, 1995)
PRIAR (Kambhampati & Hendler, 1992) show improvements efficiency many
domains. major difference current plan-reuse approaches partitionand-resolve process generate candidate subproblems based partitioning
mutex constraints, whereas traditional methods reuse plans generated
means. Since assumption conservative plan modification existing methods
always achievable, may necessary replan feasible plan candidate cannot
found. cases, may expensive planning scratch.
reason complexity analysis empirical study cannot prove plan-reuse approaches
consistent improvements planing scratch (Nebel & Koehler, 1995).
contrast, approach augments search subproblem explicitly penalizing
global inconsistencies forcing solution towards resolving global constraints.
partition-and-resolve approach different incremental planning (Koehler &
Hoffmann, 2000) uses goal agenda. incremental planning, planner maintains
set target facts, adds goal states incrementally target set, extends
solution using new target set. goal state must always satisfied
achieved, ordering goal states important order avoid un-doing
previously achieved goal state planning current goal state. invalidations
occur, planning task point complex planning one
340

fiTemporal Planning using Subgoal Partitioning Resolution

goal state. contrast, SGPlan4 tries achieve one subgoal time allows
subgoals invalidated process. Moreover, subgoal, need
start ending state previous subgoal incremental learning,
need pre-order subgoals order avoid invalidations. show Section 6
performance SGPlan4 sensitive order evaluating subgoals.
4.2 Resolving Violated Global Constraints
section, present two penalty-update strategies resolving violated global constraints. constraints identified finding subplan subproblem independently.
SGPlan4 first initializes penalties global constraints starts. first
iteration, SGPlan4 solves subproblem individually, without considering global
constraints. combines subplans integrated plan order determine initial active global constraints across subproblems. subsequent iterations,
SGPlan4 finds local feasible plan subproblem, minimizing global objective weighted sum violated global constraints. end iteration,
SGPlan4 increases penalty violated global constraint proportion violation.
process ends constraints satisfied.
designed two strategies updating penalty global constraints.
SGPlan4 participated IPC4 sets large initial penalty values updates
rate , whereas SGPlan4.1 studied paper sets initial penalty values zero:
(
0 (for SGPlan4 )
(0)
()
(1)
t,k =
t,k = t,k + mt,k ,
= 1, 2, . . .
(17)
0
(for SGPlan4.1 ),
()

Here, t,k penalty global constraints Gt Gk th iteration,
mt,k defined (16), 0 large initial value, parameter controlling
rate penalty updates. experiments, set 0 = 100 = 0.1.
Figure 9 illustrates planning process SGPlan4 AIRPORT-TEMP-14 instance. Given three subproblems instance, SGPlan4 first evaluates subproblem first iteration order determine initial active global constraints.
figure shows, respectively, subplans active global constraints evaluating
three subproblems second iteration. strategy effective reducing
number active global constraints quickly 14 beginning zero one
iteration.
penalty-update strategy SGPlan4 may lead longer makespans uses
large initial penalty values order reduce number violated global constraints
quickly. Hence, subplans found may poor temporal concurrency. address
issue, implemented new strategy SGPlan4.1 (17) sets initial penalty
values zero.
Figure 10 illustrates time-quality trade-offs SGPlan4 SGPlan4.1 used
solve nine representative instances IPC4, Blocksworld, Depots domains.
number active global constraints changes evaluating subproblem,
plot progress remaining number active global constraints respect
total number subproblems evaluated. results show planners
341

fiChen, Wah, & Hsu

1
0
0
1 0
0
1 1
1
0
1
0
10
0
1
1
0
0
1
1
0
10
1
0
0
1
11
0
1
0
0
1
0
1
0
0
01
1
0 1
1
0
1
0
0
1
1
0
1
0
1
0

G1

1
0
1
0
1 0
0
1
1 0
1
0

G2

1
0
0
1

1
0
0
1

1
0
0
1

1
0
0
1

10
0
1
0
0
1
1
0
1
0
1
1
0
1
0

0
1
0
1
1
0
1
0
00
1
1

1
0
0
1

1
0
0
1

0
1
0
1
1
0
0
1

1
0
1
0
0 0
1
1

1
0
0
1

1
0
0
1

G3

1
0
0
1
1
0
1
0

1
0
0
1

a) start Iteration 2
1
0
0
1 0
0
1 1
1
0
1
0
1
1
0
1
0
0
1 0
0
1
0
1 1
0
0
1
1
0
1
0
1
0
1
0
1
0
0
10
0
0 1
1
1
0
1
1
0
0 1
1
0
0
1
1
0
1
0

1
0
1
0

1
0
0
1

1
0
1
0

0
1
0
1
1
0
1
0
00
1
1

1
0
1
0

1
0
1
1 0
0
0
1
1
0
0
1

1
0
1
0

1
0
1
0

1
0
0
01
1
0
1
1
0
1
0
0
1
0
1

1
0
0
1

1
0
1
0

1
0
0
1
1
0
1
0

1
0
0
1

1
0
0
1

1
0
0
1

1
0
1
0

1
0
1
0

0
1
0
1
1
0
0 0
1
1
0
1

1
0
0
1 0
0
1 1
0
1
0
1
0
1
1
0
0
1 0
0
11
0
1 1
0
0
1
11
0
1
0
0
1
0
1
0
0
01
1
0 1
1
0
1
0
0
1
1
0
1
0
1
0

1
0
0
1

1
0
1
0
0
1
1
0
1
0
0
1

1
0
1
0
1 0
0
1
1 0
1
0
10
0
1
0
0
1
1
0
1
0
1
1
0
1
0

0
1
0
1
1
0
0
01
1
0
1

1
0
0
1

1
0
1
0

0
1
0
1
1
0
0
1

1
0
1
0
0 0
1
1

G2

0
1
0
1
1
0
0 0
1
1
0
1
1
0
0
1

G3

1
0
0
1

1
0
0
1
1
0
1
0

1
0
1
0

1
0
1
0

G1

b) solving Subproblem G1
0
1
1
1 0
0
1 0
0
1
0
1
0
1
0
1
1
0
0
1
1
0
0
1
1
0
0
00
1
0
0
1
11
1 1
0
0
10
0
0 1
1
1
0
1
1
0
0 1
1
0
0
1

G1

G2

0
1
0
1
1
0
0 0
1
1
0
1

1
0
1
0

1
0
1
0

1
0
0
1

1
0
0
1

G3

1
0
1
0

c) solving Subproblem G2

0
1
0
1
1
0
1
0
00
1
1

1
0
1
0

1
0
1
1 0
0
0
1
1
0
0
1

1
0
1
0

1
0
1
0

1
0
0
01
1
0
1
1
0
1
0
0
1
0
1

1
0
0
1

1
0
0
1

1
0
1
0

1
0
0
1
0
1
1
0
1
0
0
1

1
0
1
0

G1

G2

0
1
0
1
1
0
0 0
1
1
0
1
1
0
0
1

G3

1
0
1
0

d) solving Subproblem G3

Figure 9: planning process IPC4 version SGPlan4 second iteration
solving AIRPORT-TEMP-14 instance. box corresponds action
subplan, whereas arrow corresponds active global constraint.
placing emphasis violated global constraints, number violated
constraints quickly reduced expense longer makespan.

resolve remaining number active global constraints almost linear fashion,
SGPlan4 generally faster resolving active global constraints generates
plans worse quality. detailed experimental results Section 7, show
SGPlan4.1 generally leads plans better quality.
planners, however, difficulty solving PIPESWORLD-NOTANKAGETEMP-DEADLINE-10 instance (Figure 10c). domain, SGPlan4 cannot solve
instances, whereas SGPlan4.1 solve eight instances (1, 2, 5, 6, 8, 14, 22, 30). Although fraction initial active global constraints constraints 3.3%
average (Table 1), planners may get stuck infeasible solutions cannot make progress afterward. reason basic planner SGPlan4
SGPlan4.1 enough backtracking generate new candidate subplans
subproblem. Hence, basic planner keeps generating subplan point,
regardless violated constraints penalized.
4.3 Handling Producible Resources
planning problems, may facts made true numerical
resources produced anytime needed. example, Settlers domain,
342

fi15
10
5
0

60

SGPlang (Q=61.73)
SGPlang2 (Q=52.00)

50
40
30
20
10
0

8 10 12 14 16 18 20 22 24 26 28

8

total # subproblems evaluated

100
50
0
30

40

50

60

70

100
90
80
70
60
50
40
30
20
10
0

80

10
8
6
4
2
0
15

20

25

30

total # subproblems evaluated

g) UMTS-TEMP-50

20

22

5

10

15

20

25

30

35

40

total # subproblems evaluated

35

45
40
35
30
25
20
15
10
5
0

SGPlang (Q=544.00)
SGPlang2 (Q=541.00)

15 20 25 30 35 40 45 50 55 60

total # subproblems evaluated

total # subproblems evaluated

e) SATELLITE-TIME-20
# active global constraints

# active global constraints

SGPlang (Q=2230.40)
SGPlang2 (Q=818.00)

10

18

40 60 80 100 120 140 160 180 200

d) PROMELA-OPTICALTELEGRAPH-10
12

16

SGPlang (Q=704.26)
SGPlang2 (Q=645.01)

total # subproblems evaluated

14

14

# active global constraints

# active global constraints

# active global constraints

150

20

12

SGPlang (Q=N/A)
SGPlang2 (Q=N/A)

total # subproblems evaluated

SGPlang (Q=198.98)
SGPlang2 (Q=197.34)

200

10

50
45
40
35
30
25
20
15
10
5
0

b) PIPESWORLD-NOTANKAGE- c) PIPESWORLD-NOTANKAGENONTEMP-30
TEMP-DEADLINE-10

a) AIRPORT-TEMP-30
250

# active global constraints

SGPlang (Q=708.10)
SGPlang2 (Q=705.03)

20

70

# active global constraints

25

# active global constraints

# active global constraints

Temporal Planning using Subgoal Partitioning Resolution

SGPlang (Q=56.00)
SGPlang2 (Q=42.00)

60
50
40
30
20
10
0
15

20

25

30

35

total # subproblems evaluated

h) BLOCKSWORLD-17-0

40

f) SETTLERS-20
200
180
160
140
120
100
80
60
40
20
0

SGPlang (Q=107.00)
SGPlang2 (Q=103.00)

10

15

20

25

30

35

40

total # subproblems evaluated

i) DEPOTS-TIME-20

Figure 10: Resolution active global constraints nine benchmark instances original penalty-update strategy SGPlan4 new penalty-update strategy
SGPlan4.1 . x axis includes number subproblems evaluated,
corresponding subgoal, first iteration order determine initial
active global constraints.

coal always produced mine. define producible logical numerical
resources follows.
a) fact producible add effect either action without preconditions
action whose preconditions always producible.
b) numerical resource producible increased either action without
preconditions action whose preconditions always producible.
planning tasks significantly easier producible facts resources
detected preprocessing phase made available planning. first
identifying facts resources, SGPlan4 derives relaxed initial state setting
producible facts true producible numerical resources large enough.
Every time producible fact turned false, made true again. finding feasible
plan relaxed initial state, SGPlan4 removes unused numerical resources
343

fiChen, Wah, & Hsu

initial state plans again. process repeated redundant initial
resources. point, SGPlan4 inserts necessary actions beginning plan
generate minimum initial producible resources needed.
example, suppose timber detected producible resource one always
fell trees get timber. SGPlan4 initially set large number, say 1000 units,
timber available. solving problem, suppose 900 units left unused,
reduces initial timber 100 units plans again. process repeated
either unused timber final state problem becomes unsolvable
reducing initial resource.
Note approach may incur redundant actions producing unused resources, optimal amount resources needed cannot predicted ahead time.

5. Subgoal-Level Planning
subgoal level, SGPlan4 applies landmark analysis partition subproblem,
performs path finding optimization, carries subspace-reduction analysis prune
irrelevant facts actions subproblem, calls modified Metric-FF planner
solve subproblem.
5.1 Subgoal-Level Decomposition Techniques
a) Landmark analysis. First proposed Porteous, Sebastia, Hoffmann (Porteous,
Sebastia, & Hoffmann, 2001), landmark analysis allows large planning problem
decomposed series simpler subproblems. Given initial state, aims find
intermediate facts must true feasible plan reaching goal state.
example, assume object delivered D, path
B C D. (O, B) (O, C) landmark facts,
since feasible plan must make true reaching goal state (O, D).
planning problem first partitioned subgoals subproblems,
apply landmark analysis subproblem order find intermediate facts
reaching corresponding subgoal. Landmark analysis important SGPlan4
allows subproblem decomposed simpler subproblems
solved easily.
subproblem, find landmarks relaxed planning approach. Given planning subproblem = (O, F, I, G), first construct relaxed planning graph
initial state ignoring delete effects actions. force f F level
graph false (even made true actions). result, actions
preconditioned f pruned. exists goal fact G cannot reached
f false, f landmark fact must reached plan relaxed
problem. finding partial order landmarks, SGPlan4 builds sequential
list subproblems joined landmarks found applies basic planner solve
subproblem order. Note landmark analysis expensive, SGPlan4
detects landmarks beginning every iteration.
landmarks found relaxed planning graph necessary solution
plan original problem solution plan relaxed problem. Hence,
feasible plan original problem must reach landmark found relaxed ap344

fiTemporal Planning using Subgoal Partitioning Resolution

Initial State
ON(B10 A2)

ON(B0 A1)

LAST(B10 S12)

ON(B4 A2)

ON(B6 A2)

ON(B12 A3)

LAST(B4 S12)
FIRST(B0 S12)

LAST(B12 S13)

ON(B9 A2)

ON(B8 A3)

LAST(B9 S12)

LAST(B8 S13)

LAST(B6 S12)

ON(B10 A1)

ON(B5 A2)

LAST(B5 S12)

ON(B12 A1)

ON(B9 A1)

ON(B8 A1)

FIRST(B9 S13)

FIRST(B10 S13)

ON(B10 A3)

FIRST(B12 S12)

ON(B0 A2)

ON(B4 A1)

ON(B6 A1)

ON(B12 A2)

FIRST(B8 S12)

ON(B9 A3)

ON(B8 A2)

ON(B5 A1)

Goal State

Figure 11: Landmarks partial orders PIPESWORLD-NOTANKAGENONTEMP-10 instance.
proach least once. However, landmarks found sufficient test goal
reachability relaxed approach, may exist undetected landmarks even
every fact tested.
Figure 11 shows landmarks found IPC4 PIPESWORLD-NOTANKAGENONTEMP-10 instance. considering first goal fact (B10, A3), LAST (B10, S12)
landmark landmarks (B10, A1) F IRST (B10, S13).
means LAST (B10, S12) must ordered (B10, A1) F IRST (B10, S13).
way, decompose subproblem (B10, A3) 4 smaller tasks
must carried sequence, namely, LAST (B10, S12), (B10, A1), F IRST (B10, S13),
(B10, A3).
b) Landmarks identified path finding. Landmark analysis may sometimes produce
landmark facts decomposing subproblem. example, gates
along path Airport instance identified landmark facts (that is,
must-visit points) usually multiple paths given source destination. Consider airport topology Figure 12a goal move A1
SG1 SG8. two alternative paths none facts
(A1, SG2), (A1, SG3), , (A1, SG7) true reaching SG8, cannot detect landmark facts.
identify landmark facts decomposing subproblem, developed
SGPlan4 new path-finding technique. technique based concept fact
groups used existing planners, MIPS (Edelkamp, 2002)
Downward (Helmert & Richter, 2004). fact group includes group mutually exclusive
facts one true time, typically involves multiple possible
states object. example Airport instance discussed above, fact group includes
different locations A1 at:


Fg =
(A1, SG1), (A1, SG2), , (A1, SG7), (A1, SG8) .
(18)
345

fiChen, Wah, & Hsu

(A1, SG4)

(A1, SG2)

(A1, SG3)

(A1, SG3)

(A1, SG8)

(A1, SG1)

(A1, SG4)

(A1, SG2)

(A1, SG8)

(A1, SG1)

(A1, SG5) (A1, SG6)

(A1, SG7)

(A1, SG5) (A1, SG6)

a) Transition graph Fg

(A1, SG7)

b) Path finding

Figure 12: Illustration transition graph Fact Group Fg path finding algorithm. Shaded nodes (b) new landmark facts detected path finding.

SGPlan4 , adopted approach MIPS based analysis static mutex
groups finding fact groups subgoal facts.
apply path finding Subproblem Gt none landmarks
detected landmark analysis. Assuming subgoal reached gt , first find
fact group belongs to. previous example, subgoal gt = (A1, G8),
fact group Fg (18).
fact group two facts, determine transition relations
constructing directed graph. Given two facts f1 f2 fact group, add edge
f1 f2 exists action f1 precondition f2
add effect (which implies f1 delete effect since f1 f2 mutually
exclusive). Figure 12a illustrates transition graph airport example discussed
above.
Last, find path, look facts immediate predecessors gt
graph. arbitrarily select one must-visit landmark disable others.
perform landmark analysis initial fact gt . analysis return
landmark facts.
example airport instance, (A1, SG4) (A1, SG7) two immediate
predecessor facts Subgoal gt = (A1, SG8). disable (A1, SG7) landmark
analysis, one path (A1, SG1) gt , (A1, SG2),
(A1, SG3), (A1, SG4) detected landmark facts. Figure 12b illustrates
process.
c) Path optimization used find better landmark facts problems timed
initial literals numerical effects. invoked deadline
dynamically changing numerical resource appears preconditions actions.
conditions satisfied IPC4 Satellite instances technique found
useful.
technique works choosing path optimizes time duration usage
numerical resource multiple paths different quality, setting
nodes along optimal path landmark facts. Given subproblem trying reach
Subgoal gt , construct transition graph fact group gt apply Dijkstras
algorithm find shortest path initial fact gt . weight edge
either time duration problems time windows, usage numerical resource
346

fiTemporal Planning using Subgoal Partitioning Resolution

0

G1

a3

a1
a2

G2

Time

a5
a4

a6
S6

G3
S4
S2
S0

S5

S3

S1

Figure 13: Generating multiple starting states Subproblem G3 , given initial state
S0 Si , = 1, . . . , 6, state action ai finished. SGPlan4 calls
basic planner generate local subplan starting state picks
first one improves objective (15).

problems numerical preconditions. set facts along optimal path
landmark facts force planner choose path others. landmarks along
optimal path allows us decompose problem subproblems.
two limitations current implementation path optimization. First,
since needs path initial fact goal fact transition graph,
cannot apply technique initial goals facts disconnected. Second,
studied case one dynamically changing numerical resource appears
preconditions actions studied optimization multiple numerical
resources.
5.2 Subgoal-Level Planning Techniques
a) Evaluating multiple subplans subproblem. finding local feasible subplan
subproblem improves objective (15), SGPlan4 generates number subplans
multiple starting states. Since active global constraints exist two identical
subplans, generate multiple starting states given subproblem applying possible prefix actions subproblems. example, given six actions
planned G1 G2 Figure 13, six possible starting states developing
subplan G3 . starting state, SGPlan4 calls basic planner generate local
feasible subplan accepts subplan improves objective (15). better
subplans found possible starting states, SGPlan4 leaves local subplan
unchanged moves next subproblem.
b) Search-space reduction. solving partitioned subproblem, often eliminate search space many irrelevant actions related facts subgoals
subproblems. reductions useful planning problems
partitioned actions generally relevant.
347

fiChen, Wah, & Hsu

example, consider transportation domain whose goal move packages,
drivers, trucks various locations initial configuration. Suppose problem instance, goal set {AT (D1, S1), (T 1, S1), (P 1, S0), (P 2, S0)} two
packages P 1 P 2, one driver D1, one truck 1, two locations S1 S2. Without partitioning, actions relevant resolving subgoals. contrast,
partitioning, actions moving P 2 around irrelevant subproblem resolving (P 1, S0) eliminated. Similarly, actions moving P 1 P 2
irrelevant subproblem resolving (D1, S1).
designed backward relevance analysis eliminate irrelevant actions
subproblem solving basic planner. analysis, maintain
open list unsupported facts, close list relevant facts, relevance list relevant
actions. beginning, open list contains subgoal facts subproblem,
relevance list empty. iteration, fact open list, find
actions support fact already relevance list. add
actions relevance list add action preconditions close list
open list. move fact open list close list processed.
analysis ends open list empty. point, relevance list contain
possible relevant actions. analysis takes polynomial time.
Note relevance analysis complete stops, since relevance list
may still contain irrelevant actions. example, reduce relevance
list forward analysis finding applicable actions initial states
backward analysis. However, analysis may cost effective reducing
overhead planning.
reduction method belongs family heuristics proposed Nebel, Dimopoulos
Koehler (1997). Since select possible supporting actions processing fact,
approach indeed one selects union elements possibility
set according classification. conservatively reduce irrelevant information, number tighter reductions approximately minimize use
initial facts (Nebel et al., 1997). However, aggressive heuristics may solution
preserving solution-length preserving.
5.3 Modified Metric-FF Basic Planner
decomposing subproblem associated subgoal smaller subproblems bounded
landmark facts, SGPlan4 solves subproblem identified (or original subproblem
case landmark facts identified) modified Metric-FF planner. modifications consist two components: adaptation original Metric-FF (Hoffmann,
2003) order entertain new features PDDL2.2, support planning
mutex constraints partitioned. fact, lot efforts embedding Metric-FF
SGPlan4 spent first component.
original Metric-FF solve problems PDDL2.1 propositional actions
support temporal features. extended parser Metric-FF
support full PDDL2.2 syntax definition actions atomic logical durational temporal. planning process extended sequential propositional
planning parallel temporal planning. Specifically, extended sequential actions
348

fiTemporal Planning using Subgoal Partitioning Resolution

Fixed
Subproblems

G1
.....

Components Objective Function
(15)
Estimated makespan Te

Gt1
Gt+1

PN

.....

k=1
k6=t

GN

t,k
e t,k

Weighted sum global mutex
constraint violations

Gt
Current Plan

Heuristic value (z(t)) original Metric-FF

Relaxed Plan

Figure 14: Temporal planning partitioned search context incorporates objective
function (15) makespan Te estimated enhanced PERT algorithm
heuristic value Metric-FF planner.
atomic length original Metric-FF actions predefined durations
scheduled parallel.
extended Metric-FF support new feature called derived predicates introduced PDDL2.2. Derived predicates define axioms whose facts derived set
precondition facts. example, domain boxes, B B
C, derived predicate C generated. Derived predicates
appear preconditions goals effects. modified Metric-FF,
implemented technique proposed MIPS 2.2 (Edelkamp, 2003) handling derived
predicates. encode derived predicate special action a, precondition
facts preconditions facts d, add effects derived facts d,
delete effect empty. planning, derived-predicate actions
included relaxed plan. However, heuristic function computed Metric-FF
counts number real actions relaxed plan number derivedpredicate actions, real actions considered candidates forward expansion
state. state, expand set true facts applying applicable derived
predicates iteratively reach fixed-point state true facts
added.
second component modifications Metric-FF involves support
partitioned search context solving subproblem, say Gt . case, Metric-FF needs
incorporate objective aggregate state schedulable actions G1 , , GN
planning actions Gt . Referring Figure 14, aggregate state represented
estimated makespan Te actions evaluated enhanced PERT
algorithm.
PERT originally developed generate parallel plan scheduling action
early possible blocked dependency mutex relation. Previous
PERT algorithms detect propositional conflict two actions checking one
action adds/deletes anothers precondition, detect numerical conflict two actions
modify numerical variable. latter case, two actions would allowed
349

fiChen, Wah, & Hsu

overlap execution consume resource, even total
amount required exceed amount available. Obviously, resulting schedule
suboptimal.
developed enhanced PERT algorithm considers resource constraints
schedule. algorithm assigns action early possible long
propositional conflicts violations numerical/resource constraints. Besides
maintaining operator dependency original PERT, keep track changes
numerical variables. algorithm greedy schedules applicable actions
early possible without backtracking.
general, PERT schedule valid sequential plan parallel plan without mutex
conflicts. However, enhanced PERT may generate parallel plan mutex conflicts.
reason subproblem solved initial state sequentially
state previous subproblem. Hence, actions multiple subplans
combined, one action may delete precondition another causes mutex conflict.
example, consider sequential plans two subproblems G1 G2 scheduled
initial state Blocksworld domain: a) MOVE (A, B) MOVE (B, C);
b) MOVE (D, E) MOVE (E, C), MOVE (x, y) places x top y,
precondition CLEAR (y) (y clear nothing it). example, PERT cannot
generate parallel plan mutex conflict MOVE (E, C) MOVE (B, C),
regardless two actions scheduled. conflict occurs action
deletes CLEAR (C) precondition other.
modified Metric-FF planner carries search heuristically looks plans
minimize (15) rewritten follows:



PN




N
e t,k
minz(t) (z(t)) + k=1 t,k
X
k6=t


min J(z) +
t,j
e t,j =
PN

z(t)
e

j=1
e t,k
minz(t) (z(t)) + + k=1 t,k
j6=t

k6=t

(for SGPlan4 )
(19)
(for SGPlan4.1 ),

(z(t)) heuristic value original Metric-FF solving Gt ;
e t,k
estimated number active mutexes plan Gk relaxed plan Gt
obtained ignoring delete effects unscheduled actions; Te makespan estimated
enhanced PERT algorithm composing relaxed plan Gt plans
subproblems; t,k penalty value dynamically updated global-level planning;
constant fixed 0.0001. Although search guarantee optimality,
always resolve global mutual-exclusion constraints between, say z(t) z(k),
move one subplan backward order avoid overlapping another conflicting
subplan penalty t,k large enough.
implementation (19) modified Metric-FF planner, set
SGPlan4.1 small penalty term due makespan dominate
terms. fact, since Te much smaller one test problems, main
purpose break ties among states close heuristic values.
hand, implementation (19) SGPlan4 IPC4 include Te objective
function. result, focuses eliminating mutual-exclusion conflicts tends
generate plans longer makespan.
350

fiTemporal Planning using Subgoal Partitioning Resolution

1. procedure SGPlan(problem file)
2.
parse problem file instantiate facts actions;
3.
detect encode timed initial literals (TIL);
4.
detect encode derived predicates;
5.
detect TIL wrappers translate regular TILs;
6.
detect producible resources;
7.
(there producible resources) set maximum possible end if;
8.
repeat
9.
subgoal fact goal list
10.
call search-space reduction eliminate irrelevant actions;
11.
call basic planner (modified Metric-FF) reach subgoal;
12.
(the basic planner times out)
13.
perform landmark analysis generate list subproblems;
14.
subproblem list
15.
call basic planner solve subproblem;
16.
(solution found time limit)
17.
(problem TIL numerical fluents) perform path optimization
18.
else perform path finding decompose subproblem end if;
19.
call basic planner solve decomposed subproblem;
20.
end
21.
end
22.
end
23.
end
24.
evaluate plan z update penalty values violated global constraints;
25.
feasible solution plan found time limit exceeded;
26.
((new solution found) && (there unused producible resources))
27.
reduce initial producible resources goto step 8;
28.
end
29. end procedure

Figure 15: high-level pseudo code common SGPlan4 SGPlan4.1 .

general, embedding basic planner partition-and-resolve framework requires
modifications objective function basic planner order implement
(15). Hence, cannot done without source code basic planner.
5.4 Putting Pieces Together
Figure 15 shows high-level code common SGPlan4 SGPlan4.1 .
preprocessing phase parses problem file instantiates facts actions (Line
2), detects encodes timed initial literals (TIL) derived predicates, (Lines 3
4), translates problem regular TIL problem problem compiled TIL
problem (Line 5), detects producible resources sets always available (Lines
6 7).
major loop Lines 8 28. subgoal, SGPlan4 uses search-space
reduction eliminate irrelevant actions (Line 10) solves using basic planner
(Line 11). basic planner fails find feasible plan within time limit (3000 node
351

fiChen, Wah, & Hsu

Table 2: Summary useful techniques domain variant. check mark indicates
technique found useful domain variant class domain
variants.

Domain Variant
AIRPORT-*
AIRPORT-TEMP-TIMEWINDOWS-CO
PIPESWORLD-*
PROMELA-*
PROMELA-*-DP
PSR-SMALL
PSR-MIDDLE
PSR-MIDDLE-CO
PSR-LARGE
SATELLITE-STRIPS
SATELLITE-TIME
SATELLITE-NUMERIC
SATELLITE-COMPLEX
SATELLITE-TIME-TIMEWINDOWS
SATELLITE-TIME-TIMEWINDOWS-CO
SETTLERS
UMTS-TEMP
UMTS-TEMP-TIMEWINDOWS
UMTS-TEMP-TIMEWINDOWS-CO
UMTS-FLAW-TEMP
UMTS-FLAW-TEMP-TIMEWINDOWS
UMTS-FLAW-TEMP-TIMEWINDOWS-CO

SG























LM




PF




PO

TIL

TIL-w

DP

PR

SR

































Keys SG: subgoal partitioning
LM: landmark analysis
PF:
path finding
PO: path optimization
TIL: timed initial literals handling TIL-w: TIL wrapper detection
DP: derived predicates handling PR: producible resources
SR:
search-space reduction

expansions Metric-FF), SGPlan4 aborts run Metric-FF tries decompose
problem further. first applies landmark analysis decompose solve subproblem
(Lines 13-15). unsuccessful solving subproblem, tries path optimization
numerical TIL problems (Line 17) path finding (Line 18) partition
subproblem. subgoals evaluated, composes solution, evaluates
global constraints, updates penalty values (Line 24). Finally, new solution
found unused producible resources, reduces initial producible
resources (Lines 26-28) repeats major loop again.

6. Sensitivity Analysis Techniques SGPlan4
section describe ablation study various techniques SGPlan4 order
test effectiveness. Table 2 lists techniques useful IPC4
domain variant. defer discussion performance improvement SGPlan4.1
SGPlan4 Section 7.
352

fiTemporal Planning using Subgoal Partitioning Resolution

Airport variants, useful techniques include subgoal partitioning, landmark analysis, path finding. addition, TIL wrapper detection needed
TIMEWINDOWS-CO variant. ablation study, applied SGPlan4 subgoal
partitioning alone. case, SGPlan4 solve 107 200 (53.5%) instances
cannot solve numbered higher 28 (namely, P29, P30, etc.). reason
subproblems without landmark analysis path finding large
Metric-FF difficulty solving them. contrast, SGPlan4 landmark analysis
path finding solve 159 (79.5%) instances.
Pipesworld variants, useful techniques include subgoal partitioning, landmark analysis, path finding, search-space reduction. Although search-space reduction
slightly reduce run time 5.3% average, landmark analysis path finding
significant effects performance. SGPlan4 without landmark analysis path
finding solve 102 200 (51%) instances, whereas SGPlan4 landmark
analysis path finding solve 186 instances (93%). Landmark analysis path finding leads 8% average improvement run time instances versions
solve.
Promela domain, subgoal partitioning found useful, besides applying
derived-predicate handling corresponding variants.
PSR variants except PSR-SMALL, search-space reduction particularly
useful addition subgoal partitioning. three variants, SGPlan4 searchspace reduction solve, respectively, 50, 14, 11 instances; whereas SGPlan4 without
search-space reduction solve, respectively, 47, 8, 6 instances. addition, average run-time improvements due search-space reduction are, respectively, 34.1%, 46.9%,
62.5%. PSR-SMALL variant, search-space reduction significant effects
run time solution quality. Last, derived-predicate handling important PSRMIDDLE, encoded using derived predicates.
Satellite domain, subgoal partitioning found useful solving
TIME, STRIPS, COMPLEX variants. NUMERIC, TIME-TIMEWINDOWS,
TIME-TIMEWINDOWS-CO variants, landmark analysis path optimization
useful. three variants, SGPlan4 solve, respectively, 25, 25, and, 21
instances, whereas SGPlan4 without landmark analysis path optimization solve,
respectively, 16, 16, 13 instances.
Settlers domain, subgoal partitioning well techniques handling producible resources important solving one instances. (The eighth instance
infeasible.) Without detecting producible resources, SGPlan4 solve nine
20 instances.
UMTS domain, subgoal partitioning found useful, besides applying
TIL handling TIL wrapper detection corresponding variants. Landmark analysis
help domain detect none landmark facts
300 instances. Also, search-space reduction prune facts little effects
performance.
studied effects subgoal ordering SGPlan4.1 eighteen representative variants IPC4 domains well Depots domain (Figure 16).
instance, test SGPlan4.1 using five random subgoal orders normalize run time
(resp. quality) respect corresponding measure SGPlan4.1 run using
353

fiChen, Wah, & Hsu

AIRPORT: NONTEMP, TEMP
PIPESWORLD: NOTANKAGE-NONTEMP, NOTANKAGE-TEMP
PROMELA: OPT-TELEGRAPH, OPT-TELGRAPH-DP, PHIL, PHIL-DP
PSR: SMALL, MIDDLE
SATELLITE: STRIPS, TIME
SETTLERS: SETTLERS
UMTS: TEMP, FLAW-TEMP
DEPOTS: STRIPS, SIMPLETIME, TIME

Normalized Quality

10

1

0.1
0.01

0.1

1

10

100

Normalized Run Time
Figure 16: Run time-quality distribution SGPlan4.1 run using different random subgoal
orders selected IPC4 Depots domain variants. results normalized respect run time quality SGPlan4.1 run using default
subgoal order. (Performance values larger one better SGPlan4.1 .)

original order problem definition. use makespan quality measure
temporal domains number actions propositional domains (even
objective specified problem definition).
results show performance SGPlan4.1 quite insensitive subgoal ordering Airport, Promela, Settlers, UMTS domains. However, significant
variations run time quality Pipesworld PSR domains, although
definitive trend random subgoal order better. Depots domain,
exist smaller variations run time quality. common feature among
Pipesworld, PSR, Depots domains intensive subgoal interactions,
make sensitive order subgoals evaluated. example,
354

fiTemporal Planning using Subgoal Partitioning Resolution

PSR-MIDDLE variant, number subgoals large, different subgoals
highly related derived predicates. Last, note using original subgoal order
leads better run time quality Satellite domain. reason original
order avoid unnecessary subgoal invalidations finding local feasible subplans, since
starting states generated applying prefix subplans subgoals.
clear advantage using random subgoal orders original
subgoal order, SGPlan4 SGPlan4.1 use original subgoal order implementations.

7. Experimental Results
section, experimentally compare performance SGPlan4 , SGPlan4.1 (their
differences (17) (19)) planners solving IPC3 IPC4 benchmark
suites well Blocksworld domain IPC2. suite contains multiple domains,
several variants each. variants IPC4 address different features
PDDL2.2, include versions STRIPS, STRIPS DP (derived predicates), temporal, temporal TIL (deadlines), numeric, complex (temporal numeric).
complete description variant problem files found Web site
competitions2
runs carried AMD Athlon MP2800 PC Redhat Linux AS3
2-Gbyte main memory unless otherwise noted. Following rules IPC4, random
planners set fixed random seed, all, throughout experiments. Moreover,
planners must fully automated, run parameter setting
instances attempted, execute CPU time limit 30 minutes main memory
limit 1 Gbytes.
Table 3 summarizes performance SGPlan4 , SGPlan4.1 , Downward (Helmert &
Richter, 2004), LPG-TD-SPEED-1.0 seed 2004, YAHSP-1.1.3 use makespan
quality metric temporal domains number actions propositional domains. Since code Downward unavailable, report IPC4 results adjusting
run times factor governed difference speeds computer used
IPC4 competition computer used SGPlan4.1 . Likewise, unable
evaluate Downward IPC2 IPC3 benchmarks.
Table 3 include results domain variants target planner cannot
handle. example, LPG-TD-SPEED cannot solve compiled domains
support grammatical features PSR-LARGE two FLUENTS variants
PROMELA domain; YAHSP cannot handle derived predicates. contrast,
SGPlan4 SGPlan4.1 designed solve variants except ROVERS-TIME
variant dynamic durations. Note since Satellite Settlers domains
exist IPC3 IPC4 benchmarks, table include results
2. URL competitions http://ls5-www.cs.uni-dortmund.de/~edelkamp/ipc-4/
IPC4, http://planning.cis.strath.ac.uk/competition/ IPC3, http://www.cs.toronto.
edu/aips2000/ IPC2.
3. object code LPG-TD downloaded http://zeus.ing.unibs.it/lpg/register-lpg-td.
html, object code YAHSP-1.1 downloaded http://www.cril.univ-artois.fr/
~vidal/Yahsp/yahsp.linux.x86.gz. object code Downward unavailable testing
time paper revised.

355

fiChen, Wah, & Hsu

IPC3 Settlers domain variants IPC3 Satellite domain
reported IPC4.
Table 3:
Performance comparison SGPlan4.1 planners.

table comparing SGPlan4.1 SGPlan4 , four missing variants (PIPESWORLDNOTANKAGE-TEMP-DEADLINES-CO, PROMELA-OPTICAL-TELEGRAPH-FLUENTS-DP,
PROMELA-PHILOSOPHERS-FLUENTS-DP, ROVERS-TIME) cannot solved
planners. table comparing SGPlan4.1 LPG-TD-SPEED, missing variants except ROVERS-TIME cannot solved LPG-TD-SPEED. ROVERS-TIME variant,
LPG-TD-SPEED solve instances planners cannot. tables
comparing SGPlan4.1 , Downward, YAHSP, missing variants cannot solved
target planners compared.
Domain Variant

Instances Solvable (Fb )

Fq
Ft
Fw Fwt Fwq

Fn

Instances
Fg
Fu
Fb

Comparison SGPlan4.1 SGPlan4
AIRPORT-NONTEMP
0.78 0.00
AIRPORT-TEMP
0.60 0.28
AIRPORT-TEMP-TIMEWINDOWS
0.48 0.14
AIRPORT-TEMP-TIMEWINDOWS-CO
0.28 0.00
PIPESWORLD-NOTANKAGE-NONTEMP
0.16 0.10
PIPESWORLD-NOTANKAGE-TEMP
0.72 0.28
PIPESWORLD-TANKAGE-NONTEMP
0.12 0.00
PIPESWORLD-TANKAGE-TEMP
0.52 0.14
PIPESWORLD-NOTANKAGE-TEMP-DEAD
0.00 0.00
PROMELA-OPTICAL-TELEGRAPH
0.19 0.00
PROMELA-OPTICAL-TELEGRAPH-DP
0.40 0.00
PROMELA-OPTICAL-TELEGRAPH-FLUENTS 0.06 0.00
PROMELA-PHILOSOPHERS
0.58 0.00
PROMELA-PHILOSOPHERS-DP
0.94 0.00
PROMELA-PHILOSOPHERS-FLUENTS
0.02 0.00
PSR-SMALL
0.24 0.00
PSR-MIDDLE
0.98 0.02
PSR-MIDDLE-CO
0.26 0.00
PSR-LARGE
0.16 0.00
SATELLITE-STRIPS
0.53 0.06
SATELLITE-TIME
0.39 0.44
SATELLITE-TIME-TIMEWINDOWS
0.58 0.00
SATELLITE-TIME-TIMEWINDOWS-CO
0.53 0.03
SATELLITE-NUMERIC
0.44 0.00
SATELLITE-COMPLEX
0.36 0.22
SATELLITE-COMPLEX-TIMEWINDOWS
0.50 0.14
SATELLITE-COMPLEX-TIMEWINDOWS-CO
0.56 0.03
SETTLERS
0.10 0.00
UMTS-TEMP
0.96 0.04
UMTS-TEMP-TIMEWINDOWS
0.88 0.12
UMTS-TEMP-TIMEWINDOWS-CO
0.76 0.00
UMTS-FLAW-TEMP
0.02 0.88
UMTS-FLAW-TEMP-TIMEWINDOWS
0.00 0.44
UMTS-FLAW-TEMP-TIMEWINDOWS-CO
0.54 0.00
DEPOTS-STRIPS
0.27 0.27
Continued . . .

356

0.00
0.00
0.16
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.05

0.00
0.00
0.06
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.08
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.10
0.00
0.00
0.16
0.74
0.00
0.54
0.00
0.00
0.10
0.00
0.13
0.02
0.06
0.19
0.70
0.00
0.02
0.06
0.25
0.00
0.08
0.11
0.11
0.08
0.03
0.08
0.85
0.00
0.00
0.24
0.10
0.10
0.00
0.41

0.00
0.00
0.02
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.03
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.00
0.00
0.00
0.02
0.00
0.00
0.00
0.00
0.27
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.46
0.46
0.00

0.00
0.00
0.02
0.04
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.79
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.03
0.06
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.12
0.12
0.12
0.50
0.00
0.00
0.34
0.34
0.73
0.71
0.60
0.81
0.40
0.00
0.00
0.06
0.00
0.72
0.78
0.17
0.17
0.33
0.33
0.42
0.17
0.33
0.33
0.05
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.88
0.88
0.86
0.44
1.00
1.00
0.66
0.66
0.00
0.29
0.40
0.19
0.60
1.00
0.21
0.94
1.00
0.28
0.22
0.83
0.83
0.67
0.67
0.55
0.77
0.67
0.67
0.95
1.00
1.00
1.00
1.00
0.54
0.54
1.00

fiTemporal Planning using Subgoal Partitioning Resolution

Table 3: (continued)
Domain Variant
DEPOTS-SIMPLETIME
DEPOTS-TIME
DEPOTS-NUMERIC
DRIVERLOG-STRIPS
DRIVERLOG-SIMPLETIME
DRIVERLOG-TIME
DRIVERLOG-NUMERIC
DRIVERLOG-HARDNUMERIC
FREECELL-STRIPS
ROVERS-STRIPS
ROVERS-SIMPLETIME
ROVERS-NUMERIC
SATELLITE-SIMPLETIME
SATELLITE-HARDNUMERIC
ZENOTRAVEL-STRIPS
ZENOTRAVEL-SIMPLETIME
ZENOTRAVEL-TIME
ZENOTRAVEL-NUMERIC
BLOCKSWORLD

Instances Solvable (Fb )

Fq
Ft
Fw Fwt Fwq
0.23
0.27
0.18
0.70
0.60
0.45
0.60
0.55
0.05
0.70
0.55
0.45
0.75
0.50
0.85
0.80
0.45
0.65
0.57

0.68
0.59
0.27
0.10
0.20
0.35
0.15
0.20
0.10
0.00
0.45
0.05
0.00
0.00
0.00
0.20
0.55
0.00
0.29

0.05
0.05
0.05
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.06

0.00
0.05
0.00
0.00
0.00
0.00
0.00
0.00
0.05
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.03

0.00
0.00
0.41
0.00
0.00
0.00
0.05
0.05
0.70
0.30
0.00
0.10
0.25
0.20
0.15
0.00
0.00
0.35
0.06

Fn

Instances
Fg
Fu
Fb

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.05
0.05
0.09
0.10
0.10
0.05
0.05
0.05
0.10
0.00
0.00
0.25
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.00
0.00
0.00
0.10
0.10
0.15
0.15
0.15
0.00
0.00
0.00
0.15
0.00
0.30
0.00
0.00
0.00
0.00
0.00

0.95
0.95
0.91
0.80
0.80
0.80
0.80
0.80
0.90
1.00
1.00
0.60
1.00
0.70
1.00
1.00
1.00
1.00
1.00

0.00
0.00
0.00
0.04
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.03
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.00
0.02
0.00
0.16
0.18
0.20
0.22
0.03
0.00
0.15
0.42
0.00
0.00
0.00
0.00
0.00
0.19
0.06
0.00
0.19
0.30
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.02
0.02
0.04
0.00
0.00
0.08
0.06
0.53
0.00
0.00
0.00
0.00
0.04
0.00
0.17
0.06
0.06
0.08
0.06
0.06
0.00
0.00
0.00
0.00
0.00
0.00
0.05
0.05
0.05
0.20

0.10
0.10
0.10
0.00
0.00
0.26
0.28
0.20
0.71
0.60
0.40
0.00
0.02
0.00
0.00
0.11
0.28
0.36
0.17
0.28
0.05
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.05
0.00

0.88
0.86
0.86
0.84
0.82
0.46
0.44
0.24
0.29
0.25
0.18
1.00
0.94
1.00
0.83
0.83
0.47
0.50
0.77
0.53
0.65
1.00
1.00
1.00
1.00
1.00
0.95
0.95
0.90
0.80

Comparison SGPlan4.1 LPG-TD-SPEED
AIRPORT-NONTEMP
AIRPORT-TEMP
AIRPORT-TEMP-TIMEWINDOWS
PIPESWORLD-NOTANKAGE-NONTEMP
PIPESWORLD-NOTANKAGE-TEMP
PIPESWORLD-TANKAGE-NONTEMP
PIPESWORLD-TANKAGE-TEMP
PIPESWORLD-NOTANKAGE-TEMP-DEAD
PROMELA-OPTICAL-TELEGRAPH
PROMELA-OPTICAL-TELEGRAPH-DP
PROMELA-PHILOSOPHERS
PROMELA-PHILOSOPHERS-DP
PSR-SMALL
PSR-MIDDLE
SATELLITE-STRIPS
SATELLITE-TIME
SATELLITE-TIME-TIMEWINDOWS
SATELLITE-NUMERIC
SATELLITE-COMPLEX
SATELLITE-COMPLEX-TIMEWINDOWS
SETTLERS
UMTS-TEMP
UMTS-TEMP-TIMEWINDOWS
UMTS-FLAW-TEMP
UMTS-FLAW-TEMP-TIMEWINDOWS
DEPOTS-STRIPS
DEPOTS-SIMPLETIME
DEPOTS-TIME
DEPOTS-NUMERIC
DRIVERLOG-STRIPS

0.16 0.14
0.14 0.20
0.08 0.22
0.30 0.06
0.44 0.00
0.22 0.12
0.24 0.06
0.07 0.03
0.29 0.00
0.25 0.00
0.19 0.00
1.00 0.00
0.40 0.54
0.14 0.64
0.42 0.36
0.19 0.33
0.47 0.00
0.11 0.00
0.36 0.17
0.44 0.00
0.10 0.00
0.82 0.00
1.00 0.00
0.00 0.48
0.00 0.00
0.32 0.36
0.09 0.09
0.09 0.09
0.32 0.27
0.65 0.15
Continued . . .

357

0.00
0.02
0.00
0.26
0.36
0.10
0.12
0.03
0.00
0.00
0.00
0.00
0.00
0.00
0.03
0.17
0.00
0.33
0.17
0.03
0.55
0.18
0.00
0.00
0.00
0.05
0.27
0.09
0.05
0.00

0.10
0.28
0.30
0.16
0.02
0.00
0.02
0.07
0.00
0.00
0.00
0.00
0.00
0.06
0.00
0.08
0.00
0.06
0.08
0.00
0.00
0.00
0.00
0.12
0.00
0.18
0.50
0.68
0.27
0.00

0.48
0.22
0.26
0.02
0.00
0.02
0.00
0.03
0.00
0.00
0.00
0.00
0.00
0.16
0.03
0.03
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.40
1.00
0.09
0.00
0.00
0.00
0.00

fiChen, Wah, & Hsu

Table 3: (continued)
Instances Solvable (Fb )

Fq
Ft
Fw Fwt Fwq

Domain Variant
DRIVERLOG-SIMPLETIME
DRIVERLOG-TIME
DRIVERLOG-NUMERIC
DRIVERLOG-HARDNUMERIC
FREECELL-STRIPS
ROVERS-STRIPS
ROVERS-SIMPLETIME
ROVERS-NUMERIC
SATELLITE-SIMPLETIME
SATELLITE-HARDNUMERIC
ZENOTRAVEL-STRIPS
ZENOTRAVEL-SIMPLETIME
ZENOTRAVEL-TIME
ZENOTRAVEL-NUMERIC
BLOCKSWORLD

0.65
0.65
0.60
0.45
0.50
0.70
0.75
0.50
0.00
0.15
0.80
0.60
0.65
1.00
0.46

0.10
0.10
0.20
0.25
0.00
0.25
0.20
0.00
0.00
0.00
0.20
0.15
0.00
0.00
0.46

0.05
0.05
0.00
0.10
0.35
0.05
0.05
0.00
0.70
0.55
0.00
0.15
0.30
0.00
0.03

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.10
0.25
0.00
0.00
0.05
0.05
0.00
0.03

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

Fn

Instances
Fg
Fu
Fb

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.05
0.00
0.00
0.05
0.00
0.00
0.03

0.00
0.00
0.00
0.00
0.05
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.20
0.20
0.15
0.20
0.10
0.00
0.00
0.40
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.00
0.00
0.05
0.00
0.00
0.00
0.00
0.00
0.00
0.30
0.00
0.00
0.00
0.00
0.00

0.80
0.80
0.80
0.80
0.85
1.00
1.00
0.60
1.00
0.70
1.00
1.00
1.00
1.00
1.00

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00

0.00
0.00
0.32
0.29
0.04
0.60
0.00
0.00
0.00
0.00
0.00

0.12
0.02
0.06
0.00
0.38
0.00
0.00
0.06
0.00
0.40
0.17

0.00
0.00
0.28
0.71
0.23
0.40
0.00
0.00
0.00
0.38
0.00

0.88
0.98
0.34
0.00
0.35
0.00
1.00
0.94
1.00
0.22
0.83

0.00
0.06
0.00
0.00
0.00
0.00
0.03
0.00
0.00
0.00
0.00
0.05
0.06

0.18
0.00
0.04
0.02
0.00
0.00
0.00
0.14
0.00
0.00
0.40
0.00
0.00

0.02
0.00
0.24
0.00
0.00
0.02
0.17
0.00
0.20
0.05
0.00
0.00
0.00

0.10
0.00
0.10
0.71
0.40
0.04
0.00
0.00
0.00
0.05
0.00
0.00
0.00

0.70
1.00
0.62
0.27
0.60
0.94
0.83
0.86
0.80
0.90
0.60
1.00
1.00

Comparison SGPlan4.1 Downward
AIRPORT-NONTEMP
PIPESWORLD-NOTANKAGE-NONTEMP
PIPESWORLD-TANKAGE-NONTEMP
PROMELA-OPTICAL-TELEGRAPH
PROMELA-OPTICAL-TELEGRAPH-DP
PROMELA-PHILOSOPHERS
PROMELA-PHILOSOPHERS-DP
PSR-SMALL
PSR-MIDDLE
PSR-LARGE
SATELLITE-STRIPS

0.52
0.14
0.16
0.00
0.35
0.00
1.00
0.42
0.32
0.12
0.69

0.00
0.02
0.00
0.00
0.00
0.00
0.00
0.04
0.38
0.04
0.08

0.02
0.20
0.16
0.00
0.00
0.00
0.00
0.00
0.02
0.00
0.03

0.16
0.02
0.00
0.00
0.00
0.00
0.00
0.00
0.06
0.04
0.03

0.18
0.00
0.02
0.00
0.00
0.00
0.00
0.48
0.22
0.02
0.00

Comparison SGPlan4.1 YAHSP
AIRPORT-NONTEMP
PIPESWORLD-NOTANKAGE-NONTEMP
PIPESWORLD-TANKAGE-NONTEMP
PROMELA-OPTICAL-TELEGRAPH
PROMELA-PHILOSOPHERS
PSR-SMALL
SATELLITE-STRIPS
DEPOTS-STRIPS
DRIVERLOG-STRIPS
FREECELL-STRIPS
ROVERS-STRIPS
ZENOTRAVEL-STRIPS
BLOCKSWORLD

0.24
0.14
0.22
0.27
0.13
0.36
0.25
0.50
0.50
0.10
0.35
0.30
0.46

358

0.22
0.52
0.32
0.00
0.00
0.02
0.53
0.32
0.30
0.80
0.25
0.65
0.31

0.02
0.00
0.02
0.00
0.00
0.00
0.00
0.05
0.00
0.00
0.00
0.00
0.09

0.10
0.28
0.02
0.00
0.00
0.02
0.00
0.00
0.00
0.00
0.00
0.00
0.06

0.12
0.00
0.04
0.00
0.48
0.54
0.03
0.00
0.00
0.00
0.00
0.00
0.03

fiTemporal Planning using Subgoal Partitioning Resolution

Keys: (tn , qn )
(tg , qg )
Fb

Fq
Ft
Fw
Fwt
Fwq
Fn
Fg
Fu

(run time, quality) SGPlan4.1
(run time, quality) target planner compared
Fraction solved SGPlan4.1 target planner
(Fb = + Fq + Ft + Fw + Fwt + Fwq = 1 Fn Fg Fu )
Fraction tn tg qn qg (SGPlan4.1 better run time quality)
Fraction tn > tg qn < qg (SGPlan4.1 worse run time better quality)
Fraction tn < tg qn > qg (SGPlan4.1 worse quality better run time)
Fraction tn > tg qn > qg (SGPlan4.1 worse run time worse quality)
Fraction tn > tg qn = qg (SGPlan4.1 worse run time quality)
Fraction tn = tg qn > qg (SGPlan4.1 worse quality run time)
Fraction solved SGPlan4.1 target planner
Fraction solved target planner SGPlan4.1
Fraction unsolved SGPlan4.1 target planner

Figures 17-20 plot time-quality trade-offs run time (resp. quality)
target planner normalized respect corresponding measure SGPlan4.1
instances solvable planners. graph, list six percentages computed
normalizing , Ft , Fq , Fw , Fwt , Fwq respect Fb (defined Table 3)
domains evaluated.
Airport domain, SGPlan4.1 improves performance SGPlan4
terms run time quality majority (69.9%) instances (Figure 17a).
NONTEMP variant, solution files (not shown) show SGPlan4.1 cannot solve
six (Fg + Fu = 0.12 Table 3) seven largest instances (number 44 50); whereas
Downward, leading planner variant, solve 50 instances. SGPlan4.1
difficulty instances partitioned subproblems large evaluated embedded Metric-FF planner. reason SGPlan4.1
worse Downward LPG terms run time larger instances. obvious
solution employ efficient basic planner becomes available. fact,
one strengths partition-and-resolve approach. Another solution
partition subproblems reduce complexity extent
handled modified Metric-FF planner. design partitioning methods
still open time.
Pipesworld domain, SGPlan4.1 significant improvements SGPlan4
terms makespan NOTANKAGE-TEMP TANKAGE-TEMP variants (Figure 17b). improvements due minimization estimated makespan
(Te) (19). However, improvements found NOTANKAGE-NONTEMP
TANKAGE-NONTEMP variants (19) term corresponds
number actions non-temporal variants. respect planners, SGPlan4.1
solve instances NOTANKAGE-NONTEMP, NOTANKAGE-TEMP,
TANKAGE-TEMP variants (Fn Fg 0 corresponding rows Table 3),
consistently shortest solution time NOTANKAGE-TEMP TANKAGETEMP variants. NOTANKAGE-NONTEMP TANKAGE-NONTEMP variants, YAHSP, however, solve number instances shortest solution time cases, although tends produce longer plans. Last, discussed
Section 4.2, SGPlan4.1 competitive PIPESWORLD-NOTANKAGE-TEMPDEADLINE variant solve eight 30 instances.
359

fiChen, Wah, & Hsu

4

69.9%

8.5%

2.0%

5.2%

0.7%

0.25
0.25

1

1

38.6%

0.0%

0.25
0.01

4

Normalized quality

Normalized quality

81.4%

0.0%
18.6%

0.0%

0.001

0.0%

0.01

0.0%

0.1

1

1

SMALL
MIDDLE
LARGE
MIDDLE-CO

0.8%

67.2%

0.0%

0.0%

32.0%

0.0%

0.25
0.25

10

1

Normalized run time

c) PROMELA

d) PSR

Normalized quality

Normalized quality

4

16.2%

68.6%

13.2%
1.5%

STRIPS
TIME-TIMEWINDOW-CO
COMPLEX
COMPLEX-TIMEWINDOWS
TIME-TIMEWINDOWS
NUMERIC
TIME
COMPLEX-TIMEWINDOWS-CO

0.1
0.01

0.0%

0.5%

0.1

1

1

SETTLERS

10.5%

0.0%

0.0%

0.0%

0.25
0.1

10

1

10

Normalized run time

e) SATELLITE

f) SETTLERS
10

29.1%

Normalized quality

4

Normalized quality

0.0%

89.5%

Normalized run time

1

4

Normalized run time

10

1

10

b) PIPESWORLD
4

OPTICAL-TELEGRAPH-DP
OPTICAL-TELEGRAPH
PHILOSOPHERS
OPTICAL-TELEGRAPH-FLUENTS
PHILOSOPHERS-FLUENTS
PHILOSOPHERS-DP

0.25
1e-04

0.0%

1

Normalized run time

a) AIRPORT

1

0.0%

0.1

Normalized run time

4

45.8%

15.7%

Normalized quality

Normalized quality

13.7%

1

4
NOTANKAGE-NONTEMP
NOTANKAGE-TEMP
TANKAGE-TEMP
TANKAGE-NONTEMP

TEMP
NONTEMP
TEMP-TIMEWINDOWS-CO
TEMP-TIMEWINDOWS

62.2%

8.7%
0.0%

0.0%

TEMP
FLAW-TEMP-TIMEWINDOWS-CO
TEMP-TIMEWINDOWS-CO
TEMP-TIMEWINDOWS
FLAW-TEMP-TIMEWINDOWS
FLAW-TEMP

0.0%

0.25
0.1

1

1

34.5%

1.7%

5.0%

16.8%

DEPOTS-STRIPS
DEPOTS-SIMPLETIME
DEPOTS-TIME
DEPOTS-NUMERIC
BLOCKSWORLD

0.1
0.001

10

Normalized run time

42.0%

0.01

0.1

0.0%

1

10

100

1000

10000

Normalized run time

g) UMTS

h) DEPOTS & BLOCKSWORLD

Figure 17: Run time-quality SGPlan4 instance normalized respect
corresponding run time-quality SGPlan4.1 instance instances solvable planners. (Performance values larger one
better SGPlan4.1 .)
360

fiTemporal Planning using Subgoal Partitioning Resolution

TEMP
NONTEMP
TEMP-TIMEWINDOWS

21.5%

1

10

14.6%

Normalized quality

Normalized quality

4

36.9%

26.2%

0.8%

NOTANKAGE-NONTEMP
NOTANKAGE-TEMP
TANKAGE-TEMP
TANKAGE-NONTEMP
NOTANKAGE-TEMP-DEADLINES

46.9%

9.4%

1

1.6%
7.8%

0.25
0.01

0.0%

0.1

1

10

100

0.01

1.6%

0.1

1

Normalized run time

100.0%

0.0%

0.0%

0.0%

0.0%

1

1000

SMALL
MIDDLE

10

Normalized quality

Normalized quality

OPTICAL-TELEGRAPH-DP
OPTICAL-TELEGRAPH
PHILOSOPHERS
PHILOSOPHERS-DP

0.25
0.1

100

b) PIPESWORLD

0.0%

1

10

Normalized run time

a) AIRPORT
4

32.8%

10

100

1000

1

60.8%

27.8%

3.1%

0.0%

8.2%

1e-04

0.001

0.01

Normalized run time

0.0%

0.1

1

10

100

Normalized run time

c) PROMELA

d) PSR

4

4

SETTLERS

51.4%

1

Normalized quality

Normalized quality

22.1%

1.4%
18.6%
STRIPS
COMPLEX
COMPLEX-TIMEWINDOWS
TIME-TIMEWINDOWS
NUMERIC
TIME

5.7%

0.25
0.1

0.7%

1

10

100

1000

1

15.4%

0.0%

84.6%

0.0%

0.25
0.01

10000

0.0%

45.5%

Normalized quality

Normalized quality

100

1000

f) SETTLERS
28.6%

12.0%

1

35.0%
4.5%

3.0%

0.0%

0.1

10

10

TEMP
TEMP-TIMEWINDOWS
FLAW-TEMP-TIMEWINDOWS
FLAW-TEMP

0.25
0.01

1

Normalized run time

e) SATELLITE
4

0.0%

0.1

Normalized run time

1

10

100

Normalized run time

1

28.6%

1.7%
31.1%

9.2%

DEPOTS-STRIPS
DEPOTS-SIMPLETIME
DEPOTS-TIME
DEPOTS-NUMERIC
BLOCKSWORLD

0.1
0.001

0.01

0.1

0.8%

1

10

100

Normalized run time

g) UMTS

h) DEPOTS & BLOCKSWORLD

Figure 18: Run time-quality LPG-TD-SPEED instance normalized respect
corresponding run time-quality SGPlan4.1 instance
instances solvable planners. (Performance values larger one
better SGPlan4.1 ).
361

fiChen, Wah, & Hsu

0.0%

1

4

NONTEMP

59.1%

Normalized quality

Normalized quality

4

20.5%

18.2%

NOTANKAGE-NONTEMP
TANKAGE-NONTEMP

1.8%

1

1.8%

2.3%
0.0%

0.25
0.1

26.3%

1.8%

68.4%
0.0%

0.25

1

10

100

1

Normalized run time

a) AIRPORT
OPTICAL-TELEGRAPH-DP
PHILOSOPHERS-DP

0.0%

1

100.0%

0.0%

0.25
0.1

0.0%

0.0%

0.0%

1

10

100

1

SMALL
MIDDLE
LARGE

21.3%

39.8%

4.6%

0.9%

33.3%

0.25
1e-04

0.001

Normalized run time

Normalized quality

1

0.01

0.1

0.0%

1

10

100

Normalized run time

c) PROMELA
4

100

b) PIPESWORLD
4

Normalized quality

Normalized quality

4

10

Normalized run time

d) PSR

STRIPS

10.0%

83.3%

3.3%

3.3%

0.0%

0.25
0.1

0.0%

1

10

100

Normalized run time

e) SATELLITE

Figure 19: Run time-quality Downward instance normalized respect
corresponding run time-quality SGPlan4.1 instance
instances solvable planners. (Performance values larger one
better SGPlan4.1 .)

Promela domain, SGPlan4.1 improvements SGPlan4 terms quality
improves terms run time instances solve four six variants
(worse OPTICAL-TELEGRAPH-FLUENTS PHILOSOPHERS-FLUENTS vari362

fiTemporal Planning using Subgoal Partitioning Resolution

4

NONTEMP

NOTANKAGE-NONTEMP
TANKAGE-NONTEMP

31.4%

1

34.3%

Normalized quality

Normalized quality

10

17.1%

14.3%

2.9%

0.0%

0.25
0.01

0.1

1

10

100

1

51.9%

22.2%

18.5%

1.2%

2.5%

0.001

0.01

0.1

Normalized run time

OPTICAL-TELEGRAPH
PHILOSOPHERS

45.2%

Normalized quality

Normalized quality

1

54.8%

0.0%

0.0%

0.0%

0.25
0.1

1

10

1

38.3%

2.1%

0.0%

57.4%

0.25
0.001

100

2.1%

0.01

10

d) PSR
10

63.3%

30.0%

Normalized quality

Normalized quality

1

Normalized run time

STRIPS

3.3%

0.25
0.01

0.0%

0.1

c) PROMELA

1

1000

SMALL

Normalized run time
4

100

b) PIPESWORLD
4

0.0%

10

Normalized run time

a) AIRPORT
4

3.7%

1

0.0%

0.1

0.0%

3.3%

1

10

100

Normalized run time

1

33.3%

50.0%

3.7%

7.4%

1.9%

DEPOTS-STRIPS
BLOCKSWORLD
0.1
0.001
0.01

0.1

3.7%

1

10

100

1000

Normalized run time

e) SATELLITE

f) DEPOTS & BLOCKSWORLD

Figure 20: Run time-quality YAHSP instance normalized respect corresponding run time-quality SGPlan4.1 instance instances
solvable planners. (Performance values larger one better
SGPlan4.1 .)

ants). SGPlan4.1 solve number instances OPTICAL-TELEGRAPHFLUENTS, PHILOSOPHERS, PHILOSOPHERS-DP, PHILOSOPHERS-FLUENTS
363

fiChen, Wah, & Hsu

variants compared LPG-TD-SPEED, Downward, YAHSP. Further,
fastest planner three variants slightly slower YAHSP PHILOSOPHERS variant (Figures 18c, 19c, 20c). OPTICAL-TELEGRAPH OPTICALTELEGRAPH-DP variants, organizer IPC4 provided two versions, one written
pure STRIPS another ADL. However, 14 (resp., 19) instances
STRIPS 48 (resp., 48) instances ADL OPTICAL-TELEGRAPH (resp.,
OPTICAL-TELEGRAPH-DP) variant. instances available ADL ADL space-efficient problem representation, whereas instances STRIPS
require large files. (For example, file size OPTICAL-TELEGRAPH-14 38 Kbytes
ADL 8.3 Mbytes STRIPS.) Since SGPlan4.1 SGPlan4 cannot handle ADL
time, solved instances pure STRIPS two variants.
able solve instances available STRIPS fastest instances.
However, Downward handle instances ADL able solve instances
two variants. plan extend SGPlan4.1 directly support ADL future.
Note SGPlan4.1 SGPlan4 always find plans better quality
instances solved OPTICAL-TELEGRAPH, OPTICAL-TELEGRAPH-DP,
PHILOSOPHERS, PHILOSOPHERS-DP variants compared three
planners (Edelkamp & Hoffmann, 2004).
SGPlan4.1 planner solve instances four variants
PSR domain. Since PSR pure propositional domain, SGPlan4.1 unable improve
solution quality SGPlan4 . Nevertheless, quality SGPlan4.1 consistently better
three planners (Fi +Fq +Fwt > Ft +Fw +Fwq corresponding rows
Table 3). SMALL variant, SGPlan4.1 LPG comparable run times
cannot solve largest instances. AIRPORT domain, SGPlan4.1 difficulty
largest instances basic planner cannot handle partitioned
subproblems. MIDDLE variant, SGPlan4.1 , LPG, Downward solve 50
instances. situation MIDDLE-CO LARGE variants similar
OPTICAL-TELEGRAPH OPTICAL-TELEGRAPH-DP variants Promela
domain. variants, Downward handle directly ADL format, SGPlan4.1
must expand ADL syntax pure STRIPS exhausted memory evaluating
larger instances. plan address issue future.
Satellite domain, SGPlan4.1 significant improvements quality SGPlan4 .
fact, SGPlan4.1 generates solutions better quality planners
instances solve number instances seven variants. eighth
variant (TIME), able solve largest instances memory
usage exceeded 1 Gbytes. variants except STRIPS, SGPlan4.1 faster
three planners. STRIPS variant, YAHSP fastest generate
multiple actions instead single action search step. However, finds slightly
longer plans compared SGPlan4.1 .
Settlers domain, SGPlan4.1 improve solution quality SGPlan4
because, discussed earlier, (19) term corresponds number
actions non-temporal variants. SGPlan4.1 solve instances except eighth
instance, learned IPC4 organizers infeasible instance.
fastest among planners, generates longer plans LPGTD-SPEED. due iterative scheme reducing producible resources.
364

fiTemporal Planning using Subgoal Partitioning Resolution

Table 4: Summary number instances solved five planners compared (? means
clear whether domain solved object code
available testing, means planner support
language features benchmark.)
Domain
SGPlan4.1 SGPlan4 LPG-TD-SPEED Downward YAHSP
Airport
154
156
134
50
36
Pipesworld
174
166
158
60
93
Promela
129
167
83
83
42
PSR
122
122
99
131
48
IPC4
Satellite
204
207
157
36
36
Settlers
19
19
13


UMTS
300
254
200


Total
1102
1091
844
360
219
Depots
84
88
87
?
19
DriverLog
80
87
99
?
20
FreeCell
18
20
19
?
19
Rovers
52
57
80
?
12
IPC3
Satellite
34
34
34


ZenoTravel
80
80
80
?
20
Total
348
366
399
?
90
IPC2 Blocksworld
35
35
35
?
35
Overall
1485
1492
1243
360
344
optimal amount resources cannot found ahead time, SGPlan4.1 may incur
redundant actions producing unused resources.
UMTS domain, SGPlan4.1 solve instances six variants
fastest four them. Moreover, makespans greatly improved
SGPlan4 incorporating Te modified heuristic function Metric-FF, although
improvements makespan LPG-TD-SPEED small variants. SGPlan4.1 ,
however, slower LPG-TD-SPEED FLAW FLAW-TIL variants. performance degradation variants attributed flawed actions lead
overly optimistic heuristic values relaxed-plan-based planners (Edelkamp & Hoffmann,
2004) Metric-FF.
IPC3 Depots domain, SGPlan4.1 better quality LPG-TD-SPEED
YAHSP STRIPS NUMERIC variants, whereas makespan SGPlan4.1
worse LPG-TD-SPEED majority instances TIME
SIMPLETIME variants. LPG-TD-SPEED faster SGPlan4.1 majority
instances (Fq + Fw + Fwt > + Ft + Fwq corresponding rows Table 3).
Due large fraction initial active global constraints, performance subgoal
partitioning SGPlan4.1 unsatisfactory domain.
remaining IPC3 domains, SGPlan4.1 generally improves SGPlan4 quality
besides Freecell domain STRIPS. Except Satellite domain
LPG-TD-SPEED performs better, SGPlan4.1 generates solutions better quality
365

fiChen, Wah, & Hsu

instances. Further, SGPlan4.1 faster LPG-TD-SPEED
half instances, although difference run times among planners
relatively easy instances usually insignificant.
Blocksworld domain, SGPlan4.1 generally finds solutions smaller number
actions SGPlan4 , LPG-TD-SPEED, YAHSP. However, SGPlan4.1 much
slower LPG-TD-SPEED many instances needs time resolving
large fraction initial active global constraints (Figure 18h).

8. Conclusions Future Work
presented paper partition-and-resolve approach application
SGPlan4 , planner first prize Suboptimal Temporal Metric Track
second prize Suboptimal Propositional Track IPC4. Table 4 summarizes
number instances solved top planners IPC4 well SGPlan4.1 . results
show constraint partitioning employed planners effective solving majority
problems two competitions.
approach based observation fraction active mutex constraints
across subgoals majority instances IPC3 IPC4 small. observation allows us partition search largely independent subproblems limit
amount backtracking resolving violated global constraints across subproblems. improvements attributed combination techniques introduced
reducing search space handling new features PDDL2.2.
future, plan study partitioning techniques better exploit
constraint structure planning domains. particular, study fine-grain partitioning
order address cases larger fraction global constraints, develop search
strategies solving problems difficult-to-satisfy global constraints deadlines.
plan extend method planning uncertainty support
expressive modeling language features.

Acknowledgments
research paper supported National Science Foundation Grant IIS 03-12084.

References
Blum, A. L., & Furst, M. L. (1997). Fast planning planning graph analysis. Artificial
Intelligence, 90, 281300.
Bonet, B., & Geffner, H. (2001). Planning heuristic search. Artificial Intelligence, Special
issue Heuristic Search, 129 (1).
Chen, Y., & Wah, B. W. (2003). Automated planning scheduling using calculus variations discrete space. Proc. Intl Conf. Automated Planning Scheduling,
pp. 211.
Chien, S., Rabideau, G., Knight, R., Sherwood, R., Engelhardt, B., Mutz, D., Estlin, T.,
Smith, B., Fisher, F., Barrett, T., Stebbins, G., & Tran, D. (2000). ASPEN - Au366

fiTemporal Planning using Subgoal Partitioning Resolution

tomating space mission operations using automated planning scheduling. Proc.
SpaceOps. Space Operations Organization.
Doherty, P., & Kvarnstrm, J. (1999). Talplanner: empirical investigation temporal
logic-based forward chaining planner.. Proc. Sixth Intl Workshop Temopral
Logic-based Forword Chaining Planner, pp. 4754. AIPS.
Edelkamp, S. (2002). Mixed propositional numerical planning model checking
integrated planning system. Proc. Workshop Planning Temporal Domains.
AIPS.
Edelkamp, S. (2003). Pddl2.2 planning model checking integrated environment.
UK Planning Scheduling Special Interest Group (PlanSig). Glasgow.
Edelkamp, S., & Hoffmann, J. (2004). Classical part, 4th international planning competition.
http://ls5-www.cs.uni-dortmund.de/~edelkamp/ipc-4/.
Foulser, D. E., Li, M., & Yang, Q. (1992). Theory algorithms plan merging.. Artificial
Intelligence, 57 (2-3), 143181.
Fourman, M. P. (2000). Propositional planning. Proc. Workshop Model Theoretic
Approaches Planning. AIPS.
Garrido, A., Fox, M., & Long, D. (2002). temporal planning system durative actions
pddl2.1. Proc. European Conf. Artificial Intelligence, pp. 586590.
Gerevini, A., & Serina, I. (2002). LPG: planner based local search planning graphs
action costs. Proc. Sixth Int. Conf. AI Planning Scheduling, pp.
1222. Morgan Kaufman.
Hanks, S., & Weld, D. S. (1995). domain-independent algorithm plan adaptation.. J.
Artificial Intelligence Research, 2, 319360.
Helmert, M., & Richter, S. (2004). Fast downward - making use causal dependencies
problem representation. Proc. IPC4, ICAPS, pp. 4143.
Hoffmann, J. (2003). metric-ff planning system: Translating ignoring delete lists
numeric state variables. Journal Artificial Intelligence Research, 20, 291341.
Hoffmann, J., & Nebel, B. (2001). planning system: Fast plan generation
heuristic search. J. Artificial Intelligence Research, 14, 253302.
Jonsson, A. K., Morris, P. H., Muscettola, N., & Rajan, K. (2000). Planning interplanetary space: Theory practice. Proc. 2nd Intl NASA Workshop Planning
Scheduling Space. NASA.
Kambhampati, S., & Hendler, J. A. (1992). validation-structure-based theory plan
modification reuse.. Artificial Intelligence, 55 (2), 193258.
Kautz, H., & Selman, B. (1996). Pushing envelope: planning, propositional logic,
stochastic search. Proc. 13th National Conference Artificial Intelligence, pp.
11941201. AAAI.
Kautz, H., & Selman, B. (1999). Unifying SAT-based graph-based planning. Proc.
Intl Joint Conf. Artificial Intelligence. IJCAI.
367

fiChen, Wah, & Hsu

Kautz, H., & Walser, J. P. (2000). Integer optimization models AI planning problems.
Knowledge Engineering Review, 15 (1), 101117.
Koehler, J., & Hoffmann, J. (2000). reasonable forced goal ordering use
agenda-driven planning algorithm. J. AI Research, 12, 339386.
Lin, F. (2001). planner called R. AI Magazine, 7376.
Long, D., & Fox, M. (1998). Efficient implementation plan graph STAN. J. AI
Research.
Nau, D., Muoz-Avila, H., Cao, Y., Lotem, A., & Mitchell, S. (2001). Total-order planning
partially ordered subtasks. Proc. Intl Joint Conf. Artificial Intelligence,
pp. 425430. IJCAI.
Nebel, B., Dimopoulos, Y., & Koehler, J. (1997). Ignoring irrelevant facts operators
plan generation. Proc. European Conf. Planning, pp. 338350.
Nebel, B., & Koehler, J. (1995). Plan reuse versus plan generation: theoretical
empirical analysis.. Artificial Intelligence, 76 (1-2), 427454.
Nigenda, R. S., Nguyen, X., & Kambhampati, S. (2000). AltAlt: Combining advantages
Graphplan heuristic state search. Tech. rep., Arizona State University.
Penberethy, J., & Weld, D. (1992). UCPOP: sound, complete, partial order planner
ADL. Proc. 3rd Intl Conf. Principles Knowledge Representation
Reasoning, pp. 103114. KR Inc.
Penberethy, J., & Weld, D. (1994). Temporal planning continuous change. Proc.
12th National Conf. AI, pp. 10101015. AAAI.
Porteous, J., Sebastia, L., & Hoffmann, J. (2001). extraction, ordering, usage
landmarks planning. Proc. European Conf. Planning, pp. 3748.
Refanidis, I., & Vlahavas, I. (2001). GRT planner. AI Magazine, 6366.
Refanidis, I., & Vlahavas, I. (2002). MO-GRT system: Heuristic planning multiple
criteria. Proc. Workshop Planning Scheduling Multiple Criteria. AIPS.
Subbarao, M. B. D., & Kambhampati, S. (2002). Sapa: domain-independent heuristic
metric temporal planner. Tech. rep., Arizona State University.
Tate, A., Drabble, B., & Kirby, R. (1994). O-Plan2: open architecture command,
planning control. Intelligent Scheduling, 213239.
Tsamardinos, I., Pollack, M. E., & Horty, J. F. (2000). Merging plans quantitative
temporal constraints, temporally extended actions, conditional branches.. Proc.
Intl Conf. AI Planning Scheduling (AIPS), pp. 264272.
Wah, B., & Chen, Y. (2006). Constraint partitioning penalty formulations solving
temporal planning problems. Artificial Intelligence, 170 (3), 187231.
Wah, B. W., & Chen, Y. (2003). Partitioning temporal planning problems mixed space
using theory extended saddle points. Proc. IEEE Intl Conf. Tools
Artificial Intelligence, pp. 266273.
368

fiTemporal Planning using Subgoal Partitioning Resolution

Wah, B. W., & Chen, Y. (2004). Subgoal partitioning global search solving temporal
planning problems mixed space. Intl J. Artificial Intelligence Tools, 13 (4), 767
790.
Wilkins, D. (1990). AI planners solve practical problems?. Computational Intelligence,
232246.
Wolfman, S., & Weld, D. (2000). Combining linear programming satisfiability solving
resource planning. Knowledge Engineering Review, 15 (1).
Yang, Q. (1997). Intelligent planning: decomposition abstraction based approach.
Springer-Verlag, London, UK.

369


