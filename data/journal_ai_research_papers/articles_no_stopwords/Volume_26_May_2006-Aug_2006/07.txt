Journal Artificial Intelligence Research 26 (2006) 453-541

Submitted 12/05; published 08/06

Engineering Benchmarks Planning: Domains Used
Deterministic Part IPC-4
Jorg Hoffmann

HOFFMANN @ MPI - SB . MPG . DE

Max Planck Institute Computer Science,
Saarbrucken, Germany

Stefan Edelkamp

STEFAN . EDELKAMP @ CS . UNI - DORTMUND . DE

Fachbereich Informatik,
Universitat Dortmund, Germany

Sylvie Thiebaux

YLVIE .T HIEBAUX @ ANU . EDU . AU

National ICT Australia & Computer Sciences Laboratory,
Australian National University, Canberra, Australia

Roman Englert

ROMAN .E NGLERT @ TELEKOM . DE

Deutsche Telekom Laboratories,
Berlin, Germany

Frederico dos Santos Liporace

LIPORACE @ INF. PUC - RIO . BR

Departamento de Informatica, PUC-Rio,
Rio de Janeiro, Brazil

Sebastian Trug

TRUEG @ INFORMATIK . UNI - FREIBURG . DE

Institut fur Informatik,
Universitat Freiburg, Germany

Abstract
field research general reasoning mechanisms, essential appropriate
benchmarks. Ideally, benchmarks reflect possible applications developed technology. AI Planning, researchers tend draw testing examples
benchmark collections used International Planning Competition (IPC). organization
(the deterministic part of) fourth IPC, IPC-4, authors therefore invested significant effort
create useful set benchmarks. come five different (potential) real-world applications planning: airport ground traffic control, oil derivative transportation pipeline networks,
model-checking safety properties, power supply restoration, UMTS call setup. Adapting
preparing application use benchmark IPC involves, time, inevitable
(often drastic) simplifications, well careful choice between, engineering of, domain encodings. first time IPC, used compilations formulate complex domain features
simple languages STRIPS, rather dropping interesting problem constraints simpler language subsets. article explains discusses five application
domains adaptation form PDDL test suites used IPC-4. summarize known
theoretical results structural properties domains, regarding computational complexity
provable properties topology h+ function (an idealized version relaxed
plan heuristic). present new (empirical) results illuminating properties quality
wide-spread heuristic functions (planning graph, serial planning graph, relaxed plan),
growth propositional representations instance size, number actions available
achieve fact; discuss data conjunction best results achieved
different kinds planners participating IPC-4.

c
2006
AI Access Foundation. rights reserved.

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

1. Introduction
Today, large extent research discipline AI planning concerned improving performance domain independent generative planning systems. domain independent generative
planning system (planner) must able fully automatically find plans: solution sequences
declaratively specified transition systems. simplest planning formalism deterministic planning. There, planner given input set state variables (often Booleans, called facts),
initial state (a value assignment variables), goal (a formula), set actions (with
precondition formula describing applicability, effect specifying action changes
state). plan time-stamped sequence actions maps initial state state
satisfies goal. sort formalism called deterministic since initial state fully specified effects actions non-ambiguous. restrictions may weakened obtain
non-deterministic probabilistic planning.
Performance planners measured testing benchmark example instances
planning problem. best algorithm point time is, generally, considered one
solves examples efficiently. particular, idea International Planning Competition (IPC), biennial event aimed showcasing capabilities current planning
systems.
first IPC took place 1998, time writing four events. Providing details IPC beyond scope paper, refer reader overview
articles written organizers respective IPC editions (McDermott, 2000; Bacchus, 2001;
Long & Fox, 2003; Hoffmann & Edelkamp, 2005). particular, Hoffmann Edelkamp (2005)
provide details 4th IPC, overall organization, different tracks, evaluation, participating planners, results. Basic information included paper, reader
able follow main discussion without detailed background. language used describe
planning problems IPC called PDDL: Planning Domain Definition Language. introduced McDermott (1998) first IPC, IPC-1, 1998. subset language
selected Bacchus (2000) IPC-2 2000. language extended temporal numerical constructs Fox Long (2003) form language PDDL2.1 IPC-3 2002.
extended two additional constructs, timed initial literals derived predicates,
Hoffmann Edelkamp (2005) form language PDDL2.2 IPC-4 2004.
Since, even simplest forms, AI planning computationally hard problem, system
work efficiently problem instances (Bylander, 1994; Helmert, 2003). Thus, crucial importance kinds examples used testing. Today, more, AI Planning
researchers draw testing examples collections used IPC. makes IPC
benchmarks important instrument field. organization deterministic part
4th IPC (there probabilistic part, see Younes, Littman, Weissman, & Asmuth,
2005), authors therefore invested considerable effort creating set useful benchmarks
planning.
first question answer precisely meant word useful.
easy question. widely accepted mathematical definition deciding whether
set benchmarks considered useful. are, however, widely accepted intuitions
case. Benchmarks be:
1. Oriented applications benchmark reflect application technology developed field.
454

fiE NGINEERING B ENCHMARKS



P LANNING

2. Diverse structure set benchmarks cover different kinds structure, rather
re-state similar tasks.
first usually considered particularly important indeed, AI planning frequently criticized obsession toy examples. recent years, performance
state-of-the-art systems improved dramatically, realistic examples come
within reach. made another step direction orienting IPC-4 benchmarks
application domains. traditionally planning benchmarks less fantasy products
created real scenario mind,1 took actual (possible) applications planning
technology, turned something suitable competition. considered five different application domains: airport ground traffic control (Airport), oil derivative transportation
pipeline networks (Pipesworld), model checking safety properties (Promela), power supply restoration (PSR), setup mobile communication UMTS (UMTS). course, adaptation
application use IPC, simplifications need made. get back below.
Diverse structure benchmarks traditionally given less attention realism,
believe less important. structure underlying testing example determines
performance applied solving mechanism. particularly true solving mechanisms
whose performance rises falls quality heuristic use. Hoffmanns (2001, 2002,
2005) results suggest much spectacular performance modern heuristic search planners
due structural similarities traditional planning benchmarks.
imply modern heuristic search planners arent useful, certainly shows
creation benchmarks risk introducing bias towards one specific way solving
them. selecting benchmark domains IPC-4, tried cover range intuitively
different kinds problem structure. get back below.
one hand, creator planning benchmarks noble goal realistic, structurally diverse, benchmark domains. hand, he/she pragmatic goal
come version/representation benchmarks attacked existing planning systems. Given still quite restricted capabilities systems, obviously two goals
conflict. make matters worse, isnt arbitrarily large supply planning applications
publicly available, and/or whose developers agree application used basis
benchmark. IPC organizer, top this, final benchmarks must accessible
large enough number competing systems, means must formulated language
understood systems. Further, benchmarks must show differences scalability planners, i.e., must easy hard, thus straddling boundary current
system capabilities.
solution difficulties, least solution organization IPC-4, involved slow tedious interleaved process contacting application developers, choosing domains,
exploring domain versions, engineering domain version representations. article presents,
motivates, discusses choice benchmark domains IPC-4; explains engineering
processes led finally used domain versions instances. Further, report about,
present new data determining certain structural properties resulting benchmarks
(more details below). main contribution work set benchmarks, provided
1. course, exceptions rule. One important one, context here, Satellite domain, used
IPC-3, refined use IPC-4. later.

455

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

IPC-4.2 contributions article are: first, providing necessary documentation
benchmarks; second, describing technical processes used creation; third, providing
extensive discussion structural properties benchmarks. Apart technical contributions, believe work value example large-scale attempt
engineering useful set benchmarks classical planning.
difficult make formal claim created set benchmarks,
way better previous benchmarks. working this, intent
overcome certain shortcomings many benchmarks, though one would hard pressed come
formal proof improvements indeed made. all, judging quality
set benchmarks rather complex matter guided mostly intuitions, and, worse, personal
opinions.3 was, best create realistic, structurally diverse, accessible
benchmarks possible IPC-4. belief succeeded so. benchmarks
definitely differ certain ways previous benchmarks. think
differences advantageous; discuss places point differences.
Regarding realism benchmarks, pointed above, main step took design
benchmarks top-down, i.e., start actual possible applications planning technology,
turn something suitable competition rather traditional bottomup approach artificially creating domain real scenario mind. course,
modelling application PDDL, particularly modelling way making suitable
use IPC, simplifications need made. cases, e.g., airport ground traffic
control, simplifications overly drastic, preserved overall properties intuitive
structure domain. cases, e.g., oil derivative transportation pipeline networks,
simplifications needed make drastic domains could well
created traditional bottom-up way. Still, even greatly simplified, domain generated
top-down better chance capture structure relevant real application. Moreover,
top-down domain advantage since derived real application, provides
clear guideline towards realism; future challenge make planners work
realistic encodings application. previous competitions, domains generated
top-down sense Elevator domain used IPC-2 (Koehler & Schuster, 2000;
Bacchus, 2001), Satellite Rovers domains used IPC-3 (Long & Fox, 2003).
Regarding diverse structure benchmarks, contrast previous competitions,
IPC-4 domains common theme underlying many benchmarks. IPC-1, 5
7 domains variants transportation; IPC-2, 4 7 domains variants transportation; IPC-3, 3 6 domains variants transportation, 2 gathering
data space. variants fact interesting use constructs
locked locations, fuel units, road map graphs, stackable objects, complex side constraints.
However, certainly intuitive similarity structure relationships domains.
extent similarity even automatically detectable (Long & Fox, 2000). IPC4: airport ground traffic control, oil derivative transportation pipeline networks, model checking
safety properties, power supply restoration, UMTS call setup rather different topics.
2. benchmarks downloaded IPC-4 web page http://ipc.icaps-conference.org/
3. Consider example Movie domain used IPC-1. instances domain, matter size is,
share space reachable states; thing increases connectivity states, i.e.
number actions effect. Still one argue Movie useful benchmark, sense
highlight systems/approaches have/have difficulties attacking problem characteristics.

456

fiE NGINEERING B ENCHMARKS



P LANNING

one could claim airport ground traffic control UMTS call setup scheduling nature. see, however, IPC-4 version airport ground traffic control allows
considerably freedom classical scheduling formulations, making PSPACE-complete
decision problem. particulars domains overviewed Section 3.
Approaching structure formal point view difficult. largely unclear
what, precisely, relevant structure planning domain/instance is, general sense.
Hoffmann (2001, 2002, 2005) provides one possible definition search space surface topology certain heuristic function many possible options. particular, Hoffmanns
results relevant heuristic search planners generate heuristic functions based
ignoring delete lists relaxation (McDermott, 1996, 1999; Bonet, Loerincs, & Geffner, 1997;
Bonet & Geffner, 2001; Hoffmann & Nebel, 2001). lack better formal handle, used
Hoffmanns definitions qualify structure domains. selected domains cover different regions Hoffmanns planning domain taxonomy, particular lie regions
less coverage traditional benchmarks. interesting context
paper hand, summarize Hoffmanns (2005) results 30 domains including domains
used previous competitions. summarize Helmerts (2006b) results computational complexity satisficing optimal planning IPC-4 domains. turns
complexity covers wide range widest possible range, propositional planning formalisms
PSPACE-hard polynomial. finally provide new data analyze structural
relationships differences domains. Amongst things, instance,
measure: number (parallel sequential) steps needed achieve goal, estimated
smallest plan found IPC-4 participant; number estimated planning graphs
relaxed plans; distribution number possible achieving actions fact.
results examined comparison different domains, taking account
runtime performance exhibited different kinds planners IPC-4.
Apart realism diverse structure, main quest creation IPC-4 benchmarks
promote accessibility. Applications are, typically, modelled
PDDL, naturally modelled using rather complex language constructs time, numeric
variables, logical formulas, conditional effects. existing systems handle subsets
this, fact half systems entered IPC-4 (precisely, 11 19) could handle
simple STRIPS language, slight extensions it.4 previous competitions, done
example Elevator, Satellite, Rovers domains, handled simply dropping
interesting domain constraints simpler languages, i.e., removing respective
language constructs domain/instance descriptions. contrast, first time IPC,
compiled much domain semantics possible simpler language formats.
compilation hard, sometimes impossible, do. done ADL constructs,
well two new constructs introduced IPC-4 language PDDL2.2, derived predicates
timed initial literals. implemented, applied, compilation methods cases.
4. STRIPS (Stanford Research Institute Problem Solver) name simplest time widespread planning language. form language used today, state variables Boolean, formulas
conjunctions positive atoms, action effects either atomic positive (make fact true/add it) atomic negative
(make fact false/delete it) (Fikes & Nilsson, 1971). languages selected IPC-2 (Bacchus, 2000),
PDDL2.1 PDDL2.2 derived, STRIPS ADL. ADL prominent, expressive, alternative
STRIPS, extending arbitrary first-order formulas preconditions goal, conditional effects,
i.e., effects occur individual effect condition (a first-order formula) met state execution
(Pednault, 1989).

457

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

compilations serve preserve original domain structure, simpler language
classes. example, STRIPS version Elevator domain IPC-2 simplified
original ADL version bears marginal similarity real elevator control particular,
planner explicitly tell passengers get lift.5 contrast, STRIPS
formulation airport ground traffic domain is, semantically, identical ADL formulation
expresses things, awkward fashion.
compiled domain versions offered competitors alternative domain version formulations, yielding 2-step hierarchy domain. is, domain IPC-4
could contain several different domain versions, differing terms number domain constraints/properties considered. Within domain version, could several domain version formulations, differing terms language used formulate (same) semantics.
competitors could choose, within version, whichever formulation planners could handle
best/handle all, results within domain version evaluated together.
way, intended make competition accessible possible time keeping
number separation lines data number distinctions need made
evaluating data acceptable level.
are, course, aware encoding details significant impact system performance.6 Particularly, compiling ADL STRIPS, cases revert fully
grounded encodings. certainly isnt desirable, believe acceptable price
pay benefit accessibility. current systems ground operators pre-process
anyway. cases considered compiled domain formulations different
original ones allow fair comparison typically plan length increased significantly
due compilation compiled formulation posed competitors separate domain version.
article organized follows. main body text contains general information.
Section 2, give detailed explanation compilation methods used. Section 3, give
summary domains, short application description, motivation including
domain, brief explanation main simplifications made, brief explanation
different domain versions formulations. Section 4, summarize Hoffmanns (2005)
Helmerts (2006b) theoretical results structure IPC-4 domains. Section 5, provide
empirical analysis structural properties. Section 6 discusses achieved,
provides summary main issues left open. IPC-4 domains, include
separate section Appendix A, providing detailed information application, adaptation
IPC-4, domain versions, example instances used, future directions. Although
details appendix, emphasize secondary importance.
contrary, describe main body work did. presentation appendix
seems suitable since expect reader to, typically, examine domains detail
selective non-chronological manner.
5. passengers wont get (out) floors origin (destination); however, explicit control,
planner choose let someone (out). accurate encoding via conditional effects action
stopping lift floor.
6. detailed account matters provided Howe Dahlman (2002).

458

fiE NGINEERING B ENCHMARKS



P LANNING

2. PDDL Compilations
used three kinds compilation methods:
ADL SIMPLE-ADL (STRIPS conditional effects) STRIPS;
PDDL derived predicates PDDL without them;
PDDL timed initial literals PDDL without them.
consider compilation methods order, explaining, each, compilation
works, main difficulties possible solutions are, giving outline
used compilation competition. Note ADL, SIMPLE-ADL, STRIPS subsets
PDDL. compilation methods published elsewhere already (see citations
text). section serves overview article, since coherent summary techniques,
behavior practice, appeared elsewhere literature.
2.1 Compilations ADL SIMPLE-ADL STRIPS
ADL constructs compiled away methods first proposed Gazen Knoblock (1997).
Suppose given planning instance constant (object) set C, initial state I, goal G,
operator set O. operator precondition pre(o), conditional effects e, taking form
con(e), add(e), del(e) add(e) del(e) lists atoms. Preconditions, effect conditions,
G first order logic formulas (effect conditions RU E unconditional effects). Since
domain discourse set constants finite, formulas equivalently transformed propositional logic.
(1) Quantifiers turned conjunctionsVand disjunctions, simply expanding
W
available objects: x : (x) turns cC (c) x : (x) turns cC (c). Iterate
quantifiers left.
Since STRIPS allows conjunctions positive atoms, transformations necessary.
(2) Formulas brought negation normal form: ( ) turns ( )
turns . Iterate negation front atoms only.
(3) x occurs formula: introduce new predicate not-x; set not-x iff
x 6 I; effects e: set not-x add(e) iff x del(e) not-x del(e) iff x add(e);
formulas, replace x not-x. Iterate negations left.
(4) Transform formulas DNF: (1 2 ) (1 2 ) turns (1 1 ) (1 2 )
(2 1 ) (2 2 ). Iterate conjunctions occur disjunctions.
operator precondition pre(o) n > 1 disjuncts, create n copies one
disjunct precondition. effect condition con(e) n > 1 disjuncts, create n
copies e one disjunct condition. G n > 1 disjuncts, introduce
new fact goal-reached, set G := goal-reached, create n new operators one
disjunct precondition single unconditional effect adding goal-reached.

459

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

(:action move
:parameters
(?a - airplane ?t - airplanetype ?d1 - direction ?s1 ?s2 - segment ?d2 - direction)
:precondition
(and (has-type ?a ?t) (is-moving ?a) (not (= ?s1 ?s2)) (facing ?a ?d1) (can-move ?s1 ?s2 ?d1)
(move-dir ?s1 ?s2 ?d2) (at-segment ?a ?s1)
(not (exists (?a1 - airplane) (and (not (= ?a1 ?a)) (blocked ?s2 ?a1))))
(forall (?s - segment) (imply (and (is-blocked ?s ?t ?s2 ?d2) (not (= ?s ?s1))) (not (occupied ?s)))))
:effect
(and (occupied ?s2) (blocked ?s2 ?a) (not (occupied ?s1)) (not (at-segment ?a ?s1)) (at-segment ?a ?s2)
(when (not (is-blocked ?s1 ?t ?s2 ?d2)) (not (blocked ?s1 ?a)))
(when (not (= ?d1 ?d2)) (and (not (facing ?a ?d1)) (facing ?a ?d2)))
(forall (?s - segment) (when (is-blocked ?s ?t ?s2 ?d2) (blocked ?s ?a)))
(forall (?s - segment) (when
(and (is-blocked ?s ?t ?s1 ?d1) (not (= ?s ?s2)) (not (is-blocked ?s ?t ?s2 ?d2)))
(not (blocked ?s ?a))))))

Figure 1: operator airport ground traffic control.
illustrative example, consider operator description Figure 1, taken domain
encoding airport ground traffic control. operator moves airplane one airport segment
another. Consider specifically precondition formula (not (exists (?a1 - airplane) (and (not (=
?a1 ?a)) (blocked ?s2 ?a1)))), saying airplane different ?a allowed block segment
?s2, segment moving into. Say set airplanes a1 , . . . , . step (1)
turn formula (not (or (and (not (= a1 ?a)) (blocked ?s2 a1 )) . . . (and (not (= ?a)) (blocked ?s2
)))). Step (2) yields (and (or (= a1 ?a) (not (blocked ?s2 a1 ))) . . . (or (= ?a) (not (blocked ?s2 )))).
Step (3) yields (and (or (= a1 ?a) (not-blocked ?s2 a1 )) . . . (or (= ?a) (not-blocked ?s2 ))). Step (4),
finally, (naively) transform (or (and (= a1 ?a) . . . (= ?a)) . . . (and (not-blocked ?s2 a1 )
. . . (not-blocked ?s2 ))), i.e., mathematically notated:
_
^
x.
x{(= a1

?a),(not-blocked ?s2 a1 )}...{(= ?a),(not-blocked ?s2 )}

words, transforming formula DNF requires enumerating n-vectors atoms
vector position selected one two possible atoms regarding airplane ai .
yields exponential blow-up DNF 2n disjuncts. DNF split single
disjuncts, one yielding new copy operator.
reader noticed exponential blow-up inherent compilation step
(1), quantifier may expanded |C| sub-formulas, k nested quantifiers
expanded |C|k sub-formulas. Obviously, general way around either
blow-ups, deal complex formulas allowed STRIPS. practice,
however, blow-ups typically dealt reasonably well, thanks relative simplicity
operator descriptions, frequent occurrence static predicates, explained shortly.
quantifiers arent deeply nested, Figure 1, blow-up inherent step (1)
matter. Transformation DNF often problem example here. key
successful application compilation practice, least far personal experience
goes, exploitation static predicates. idea described, example, Koehler
460

fiE NGINEERING B ENCHMARKS



P LANNING

Hoffmann (2000). Static predicates arent affected operator effect. predicates
easily found, truth value fully determined initial state soon fully
instantiated. transformation step (4), operator parameters still variables,
even knew = (of course) static predicate, would help us
wouldnt know ?a is. instantiate ?a, however, then, instantiation
operator, (= ?a1 ?a) atoms trivialize TRUE FALSE, large DNF collapses
V
single conjunction 6= ?a1 airplane (not-blocked ?s2 ?a1), instantiation
?a. Similarly, expansion quantifiers often made much easier first instantiating
operator parameters, inserting TRUE FALSE static predicate soon
parameters grounded. Inserting TRUE FALSE often simplifies formulas significantly
information propagated upwards (e.g., disjunction TRUE element becomes
TRUE itself).
Assuming compilation succeeded thus far, steps (1) (4) processed
STRIPS description conditional effects, i.e., actions still conditional effects con(e),
add(e), del(e) con(e) conjunction atoms. subset ADL termed
SIMPLE-ADL Fahiem Bacchus, used encoding one versions
Elevator domain used IPC-2 (i.e. 2000 competition). choose leave
language, necessitating planning algorithm deal conditional effects directly.
Several existing planning systems, example (Hoffmann & Nebel, 2001) IPP (Koehler,
Nebel, Hoffmann, & Dimopoulos, 1997), this. sensible approach since, Nebel (2000)
proved, conditional effects cannot compiled STRIPS without either exponential blowup task description, linear increase plan length. One might suspect that,
steps (1) (4) above, exponential blow-up mostly avoided practice.
airport move operator Figure 1 provides example this. effect conditions static
conditional effects disappear completely instantiate parameters another
good reason instantiation prior compilation. However, conditional effects
disappear many other, even simple, natural domains. Consider following effect, taken
classical Briefcaseworld domain:
(forall (?o) (when (in ?o) (and (at ?o ?to) (not (at ?o ?from)))))

effect says object ?o currently briefcase moves along briefcase.
Obviously, effect condition static, outcome operator truly depend
contents briefcase. Note forall means actually set (distinct)
conditional effects, one object.
basically two known methods compile conditional effects away, corresponding
two options left open Nebels (2000) result. first option enumerate possible
combinations effect outcomes, preserves plan length cost exponential blow-up
description size exponential number different conditional effects single action.
Consider Briefcaseworld operator, say object set o1 , . . . , . every
subset o01 , . . . o0k o1 , . . . , , o0k+1 , . . . , o0n complement subset, get distinct
operator precondition contains of:
(in o01 ) . . . (in o0k ) (not-in o0k+1 ) . . . (not-in o0n )

effect objects is:
(at o01 ?to) . . . (at o0k ?to) (not (at o01 ?from)) . . . (not (at o0k ?from))
461

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

words, operator applied (only) exactly o01 , . . . o0k briefcase,
moves exactly objects. Since (in deterministic planning considered here) never
uncertainty objects inside briefcase not, exactly one new
operators applied whenever original operator applied. compilation method
preserves size (nodes) form (edges) state space. However, wont able
transformation, planner wont able deal resulting task, n grows beyond, say,
maximally 10 . . . 20. Often, real-world operators contain distinct conditional effects that.
alternative method, first proposed Nebel (2000), introduce artificial actions
facts enforce, application normal action, effect-evaluation phase
conditional effects action must tried, whose condition satisfied
must applied. Briefcaseworld example, would look follows. First,
conditional effect gets removed, new fact evaluate-effects inserted add list,
new fact normal inserted precondition delete list. 2n new operators,
two object oi . One means move-along-oi , means leave-oi . former
in(oi ) precondition, latter not-in(oi ). former (at oi ?to) (not (at oi
?from) effect. evaluate-effects precondition, new fact tried-oi
add effect. final new operator stops evaluation, whose precondition
conjunction evaluate-effects tried-o1 , . . . , tried-on , whose add effect normal,
whose delete effect evaluate-effects. conditional effects several operators compiled
away method, evaluate-effects tried-oi facts made specific
operator; normal remain single fact used operators. effect k > 1 facts
condition, k leave-oi actions must created, negation one facts
precondition.
Nebels (2000) method increases plan length number distinct conditional effects
operators. Note benign are, say, 20 effects. search
procedure recognizes new constructs do, search space essentially remains
compilation. But, artificial constructs easily deciphered
human, necessarily true (is likely case) computer
searches general-purpose search procedure. example, naive forward
search space choice order application conditional effects (which
could avoided enforcing order yet artificial constructs). Probably
importantly, standard search heuristics unlikely recognize nature constructs.
example, without delete lists suffices achieve tried-o1 , . . . , tried-on once,
later apply conditional effects needed.
conclude necessary eliminate conditional effects, whenever feasible, one
compile conditional effects away first method, enumerating effect outcomes.
IPC-4. took FFs pre-processor, implements transformation steps (1) (4) above,
extended code compiles conditional effects away, optionally either two described methods. call resulting tool adl2strips.7 cases domain
version formulated ADL, used adl2strips generate STRIPS formulation domain
version. one case, version power supply restoration, generated SIMPLE-ADL
7. Executables adl2strips downloaded IPC-4 web page http://ipc.icaps-conference.org.
download tool named Ground, based code Mips system (Edelkamp, 2003b), takes
full syntax PDDL2.2 (Hoffmann & Edelkamp, 2005) puts grounded representation (we
use tool IPC-4 since temporal numeric planners pre-processing steps implemented).

462

fiE NGINEERING B ENCHMARKS



P LANNING

formulation. cases one, enumerating effect outcomes feasible. single exception another version power supply restoration forced use Nebels (2000)
method. Details process, exceptions use adl2strips
domain-specific method, described sections individual domains Appendix A.
2.2 Compilations Derived Predicates
several proposals literature compile derived predicates away, certain restrictions form use rest domain description (Gazen &
Knoblock, 1997; Garagnani, 2000). compilation scheme works general proposed
Thiebaux, Hoffmann, Nebel (2003, 2005). Thiebaux et al. proved compilation scheme works general not, worst case, involve exponential
blow-up either domain description size length plans. Note exponential refers increase plan length, description blow-up, unlike
compilation conditional effects discussed above. makes compilation derived predicates rather difficult task. IPC-4, compilation schemes oriented approaches taken
Gazen Knoblock (1997), Thiebaux et al. (2003, 2005), used. detail below.
First, let us explain derived predicates are, compilations work.
Derived predicates predicates affected operators, whose truth
value derived set derivation rules. rules take form (x) P (x).
basic intuition that, (x) satisfied instantiation c variable vector x, P (c)
concluded. formally, semantics derivation rules defined negation
failure: starting empty extension, instances P (c) derived fixpoint reached;
instances lie outside fixpoint assumed FALSE. Consider following example:
(:derived (trans ?x ?y) (or (edge ?x ?y ) (exists (?z) (and (edge ?x ?z) (trans ?z ?y)))))

derivation rule defines transitive closure edges graph. typical
application derived predicates. example, Blocksworld naturally formalized
predicate; power supply restoration domain, transitive closure models power
flow paths network electric lines. Obviously, pairs ?x ?y
transitively connected appear fixpoint negation failure.
Matters become interesting think derived predicates allowed refer
other, may used rest task description. important distinctions
are: derived predicate appear antecedent derivation rule? derived predicate
appear negated antecedent derivation rule? derived predicate appear negated
action precondition goal?
derived predicates appear antecedents derivation rules, merely
non-recursive macros, serving syntactic sugar. One simply replace derived predicates
definitions.8 derived predicate P appears negated (negation normal form the)
antecedent derivation rule predicate Q, fixpoints P Q computed
interleaved way: extension Q may differ depending order individual
instances derived. Say rule P A(x) P (x), basic predicate, rule
Q P (x) Q(x). Say objects b, current state satisfies (only) A(a).
8. derived predicates recursive cycle-free, replaced definitions may incure
exponential blow-up.

463

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

Computing derived predicates interleaved way, may derive A(a) P (a), A(b)
Q(b), stop; may derive P (a) Q(a), A(b) Q(b), A(a) P (a).
non-monotonic behavior, making non-trivial define extension B is. keep
things simple extensions derived predicates must computed every new
world state Thiebaux et al. (2003, 2005) propose simply order Q P . is, compute
P extension first compute Q based that. Generalized, one ends semantics
corresponding stratified logic programs (Apt, Blair, & Walker, 1988). context
IPC-4, i.e., PDDL2.2 (Hoffmann & Edelkamp, 2005), sake simplicity use negated
derived predicates antecedents derivation rules allowed.
Whether derived predicates appear negated action preconditions goal makes
difference Gazen Knoblocks (1997) compilation scheme. idea scheme
simply replace derivation rules actions. rule (x) P (x) replaced new
operator parameters x, precondition (x) (add) effect P (x). Actions influence
truth value affect atoms mentioned delete instances P . words,
new actions allow derivation P , normal action applied may influence
value P , extension P re-initialized.
derived predicates used negated, Gazen Knoblocks (1997) compilation
scheme works. However, say P (c) contained action precondition. compiled
version, planner achieve precondition simply applying derivation rule
action adds P (c). is, planner choice predicate instances derive,
course negation failure semantics. reader may point
wonder compile negations away first, thereafter use Gazen Knoblocks
(1997) compilation. problem would need inverse derivation rules work
negation failure semantics. clear done. Say, example,
want define negated version (trans ?x ?y) predicate above. One would tempted
take negation derivation rule antecedent:
(:derived (not-trans ?x ?y) (and (not-edge ?x ?y) (forall (?z) (or (not-edge ?x ?z) (not-trans ?z ?y)))))

work, however. Say every node graph least one adjacent edge. Starting
empty extension (not-trans ?x ?y), single instantiation derived: given
x edge, z edge x would
(not-trans z y) first place.
One possible solution difficulties extend Gazen Knoblocks (1997) compilation constructs force planner compute entire extension derived predicates
resuming normal planning. full description this, dealing arbitrary derivation rules,
described Thiebaux et al. (2003, 2005). nutshell, compilation works follows. One
introduces flags saying one normal fixpoint mode. Normal actions invoke fixpoint mode affect predicates relevant derivation rules. fixpoint mode, action
applied one conditional effect derivation rule: effect condition true,
respective derived predicate instance false, predicate instance added, plus
flag changes-made. Another action tests whether fixpoint: changes-made
true, action resets false; changes-made false, action switches back
normal mode. reduce domain STRIPS, compilation derived predicates,
negations conditional effects must compiled away techniques explained earlier.

464

fiE NGINEERING B ENCHMARKS



P LANNING

One would imagine Thiebaux et al.s (2003, 2005) compilation, making use rather complicated constructs, tends confuse domain independent search techniques. Indeed, Thiebaux
et al. (2003, 2005) report even completely naive explicit treatment derived predicates
performs lot better, benchmark domains, standard version applied
compiled benchmarks. Gazen Knoblocks (1997) compilation makes use less artificial
constructs, thus preferable whenever safely applied. Note, however, compilations imply potentially exponential blow-up plan length: exponential arity derived
predicates. worst case every action affects derivation rules, every re-computation
extension derived predicates go predicates instantiations.
situation, every pair normal actions planner apply order |C|a
actions, maximum arity derived predicate. typically small
power supply restoration domain aware features derived predicate
two (four, namely) arguments even plan length increase linear number
objects mean quite significant decrease planner performance.
IPC-4 benchmarks, derived predicates occur (only) power supply restoration (Appendix A.4) model checking safety properties (Appendix A.3). latter, derived
predicates occur negated, Stefan Edelkamp encoded domain version without derived predicates hand, using method along lines one described Gazen Knoblock (1997).
power supply restoration, derived predicates occur negated, used variation
method described Thiebaux et al. (2003, 2005). cases, due increase plan length
considered resulting domain formulation different original formulation directly compared it, terms planner performance. compiled formulations posed
competitors distinct domain versions, instead alternative domain version formulations.
Indeed, expected, planner results IPC-4 much worse compiled encodings.
2.3 Compilations Timed Initial Literals
Timed initial literals literals known become true time points pre-specified
initial state. literals compiled durational PDDL relatively easily, cost
plan length domain description size blowing linearly number timed initial
literals. compilation proposed brought attention Fox, Long, Halsey
(2004). idea use wrapper action must applied action,
whose duration occurrence time last timed initial literal. planner must apply
sequence literal actions achieve timed initial literals order occurrence,
durations time intervals occurrences. wrapper action
terminated, literal actions longer applied. planner forced apply
direct sequence. suffices encode desired semantics. Consider following example:
(:init
(at 9 (have-to-work))
(at 19 (not (have-to-work)))
(at 19 (bar-open))
(at 23 (not (bar-open))))

encode standard durational PDDL, wrapper be:
(:action wrapper
465

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

:parameters ()
:duration (= ?duration 23)
:condition
(at start (no-wrapper))
:effect
(and (at start (not (no-wrapper)))
(at start (wrapper-started))
(at start (wrapper-active))
(at start (literal-1-started))
(at end (not (wrapper-active)))))

Here, no-wrapper ensures one wrapper action executed; wrapper-started inserted
precondition every normal action thus ensures wrapper started
action executed; wrapper-active precondition literal actions. Precisely,
be:
(:action literal-1
:parameters ()
:duration (= ?duration 9)
:condition
(and (over (wrapper-active))
(over (literal-1-started)))
:effect
(and (at end (not (literal-1-started)))
(at end (literal-2-started))
(at end (have-to-work))))
(:action literal-2
:parameters ()
:duration (= ?duration 10)
:condition
(and (over (wrapper-active))
(over (literal-2-started)))
:effect
(and (at end (not (literal-2-started)))
(at end (literal-3-started))
(at end (not (have-to-work)))
(at end (bar-open))))
(:action literal-3
:parameters ()
:duration (= ?duration 4)
:condition
(and (over (wrapper-active))
(over (literal-3-started)))
:effect
(and (at end (not (literal-3-started)))
(at end (not (bar-open)))
(at end (literals-done))))

466

fiE NGINEERING B ENCHMARKS



P LANNING

fact literals-done made goal, planner must actually apply literal actions.
Note need three actions here, since two timed initial literals
longer work opening bar scheduled occur time. Note
that, Nebels (2000) compilation conditional effects Thiebaux et al.s (2003,
2005) compilation derived predicates, compiled encoding likely confusing domain
independent search methods.
Many IPC-4 domains made use timed initial literals (in versions) encode
various kinds time windows (see Appendix A). compiled domain versions pure
(durational) PDDL above, provided resulting encodings additional domain versions.
Due increase number actions needed plans, figured compilation
constructs much change direct comparison. Indeed, derived predicates,
planner results IPC-4 much worse domain versions compiled way.

3. Summary Domains
section provide brief summary IPC-4 domains. domain, provide:
short description application; motivation inclusion domain; brief explanation
main simplifications made IPC-4; brief explanation different domain versions
formulations used IPC-4. proceed alphabetical order.
3.1 Airport
contact person application domain, Wolfgang Hatzack, working
application area several years. domain adapted IPC-4 Jorg Hoffmann
Sebastian Trug
Application. task control ground traffic airport. Timed travel routes must
assigned airplanes reach targets. inbound outbound traffic;
former airplanes must take off, latter airplanes landed park.
main problem constraint is, course, ensure safety airplanes. means avoid
collisions, prevent airplanes entering unsafe zones behind large airplanes
engines running. optimization criterion minimize summed travel time (on
surface airport) airplanes.9 usually standard routes, i.e., routes
airplane must take outbound certain parking area, inbound certain runway.
reason introducing routes reduce complexity human ground controllers, since
significant computer support yet available real airports. Solving instances optimally (the
corresponding decision problem) PSPACE-hard without standard routes (Helmert, 2006b)
NP-complete routes standardized (Hatzack & Nebel, 2001). latter case,
pure scheduling problem. former case, complicated unrealistic airport traffic situations
lead exponentially long solutions, see Section 4.1.
Motivation. main motivation including domain able model
application quite accurately, and, particular, generate quite realistic instances. fact,
able generate instances based real airport. made possible contact
Wolfgang Hatzack, completed PhD application (Hatzack, 2002). Apart
9. alternative criterion would minimize summed squared delay airplanes. interest
airlines; minimizing summed travel time interest airport. Neither two easily
modelled PDDL2.2, discuss Simplifications, below.

467

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

developing domain-specific solutions (Hatzack & Nebel, 2001), developed realistic simulation
tool, kindly supplied us purpose generating IPC-4 domain versions test
instances. Sebastian Trug implemented options inside simulator allowed it, point
time simulation traffic flow, output current traffic situation PDDL format.
simulator included real airports Frankfurt, Zurich, Munich. Frankfurt Zurich proved
large purposes, able devise competition instances based Munich airport.
Simplifications. make two simplifications. first amounts discretization space
(location) airport, making domain amenable PDDL style discrete actions.
continuous space representation, one would need actions continuous choice far
move. discretization loses precision, believe distort nature
problem much. Due amount expected conflicting traffic different points
airport, high parking positions, relatively easy choose discretization
segments different length precise small enough time. second
simplification severe: drop original optimization criterion,
awkward express current PDDL. model travel times airplanes, one needs access
times plans wait, i.e., nothing.10 aware way express
current PDDL. IPC-4 committee voted introduction additional language
construct, look clock, since didnt seem relevant anywhere else. Another option
would introduce explicit waiting actions, causes lot trouble because, similar
continuous space, must continuous choice long wait. end, decided
drop criterion now, ask planners optimize standard makespan instead,11
corresponding arrival time last airplane (meaning, arrival destination
airport). ideal, reasonable optimization criterion. planning system participating
IPC-4, single exception LPG-td (Gerevini, Saetti, & Serina, 2006), able take
account general optimization criteria built-in ones (like makespan). use
full standard routes, thus allowing airplanes choice move. use standards
routes, particularly regions near runways large airports. one thing, served
keep large airports manageable PDDL encoding planners; another thing, seems
good compromise exploiting capabilities computers time remaining
close existing practice.
Versions Formulations. generated four versions airport domain: non-temporal
one; temporal one; temporal one time windows, fact planes land
future block certain runways modeled using timed initial literals; latter version,
timed initial literals compiled away. versions, constraints ensuring airplane safety
modelled ADL logical formulas. compilation partially grounded STRIPS
provides, version, alternative formulation: domain version one ADL formulation
one STRIPS formulation.
3.2 Pipesworld
Frederico Liporace working application area several years; submitted paper
early domain version workshop competition ICAPS03. domain
adapted IPC-4 Frederico Liporace Jorg Hoffmann.
10. difficulty arises modelling delay, one must compute travel times.
11. Makespan, Planning, means amount time start plan last action stops executing.

468

fiE NGINEERING B ENCHMARKS



P LANNING

Application. task control flow different oil derivatives pipeline
network, certain product amounts transported destinations. Pipeline networks
graphs consisting areas (nodes) pipes (edges), pipes differ length.
available actions pump liquid ends pipes, effect liquid end
pipe gets ejected. application rich additional constraints, like, constraints
types products may interface within pipe, restricted tankage space areas, deadlines
arrival products.
Motivation. main motivation including domain original structure. one inserts
something pipe one end, something possibly completely different comes pipe
end. way, changing position one object directly results changing
position several objects namely, objects inside affected pipeline.
case transportation domain aware of, fact reminiscent complicated
single-player games Rubiks Cube. Indeed, strong interaction objects lead
several subtle phenomena. example, instances solution must pump liquid
ring pipeline segments cyclic fashion.
Simplifications. severely simplify domain order able solve reasonably
complex instances current planners. importantly, encoding heavily based assuming smallest indivisible unit liquid, batch. Every amount liquid encoding modelled
terms number batches. capture continuous nature real application, means
one choose batch size trade-off encoding size accuracy. trade-off
less well-behaved one Airport (choosing segments sizes) since unit size cannot
made flexible: every batch may pass every pipeline, smallest batch governs
discretization pipelines. contrast Airport, segments may vary size.
another important simplification, used personalized goals, i.e. goals referred specific
batch objects rather product amounts. serves avoid large disjunctions enumerating
possible combinations individual batches. simplifications quite severe indeed
seems unlikely realistic representation Pipesworld, particular real-valued product amounts instead batches, could solved efficiently planners without introducing
specialized language constructs sort queue data structure PDDL, see Appendix A.2.5.
Versions Formulations. created six different versions Pipesworld: four versions /
without temporal actions, with/without tankage restrictions, respectively; one temporal version
without tankage restrictions arrival deadlines goal batches; one version identical
last one except timed initial literals compiled away.
3.3 Promela
domain created IPC-4 Stefan Edelkamp.
Application. task validate properties systems communicating processes (often
communication protocols), encoded Promela language. Promela (PROcess MEta LAnguage)
input language model checker SPIN (Holzmann, 2003). language loosely based
Dijkstras guarded command language, borrowing notation Hoares CSP language.
One important property check detect deadlock states, none processes apply
transition. example, process may blocked trying read data empty
communication channel. Edelkamp (2003a) developed automatic translation Promela
PDDL, extended generate competition examples.

469

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

Motivation. main motivation including domain promote make visible important connection Planning Model Checking. Model Checking (Clarke,
Grumberg, & Peled, 1999) automated formal method basically consists three
phases: modeling, specification checking. first two phases system correctness specification modeled using formalism. last step automatically checks
model satisfies specification. Roughly speaking, step analyzes state space model
check validity specification. Especially concurrent systems, several components
interact, state spaces grow exponentially size components system. two
main research branches model checking: explicit-state model checking, implemented SPIN,
exploits automata theory stores explored state individually, symbolic model checking
describes sets states properties using binary decision diagrams (BDDs) efficient
representations Boolean formulas.
Checking validity reachability property, property asks system state certain property reachable, similar question plan existence. use model checking approaches solve planning problems explored depth, e.g. Cimatti, Roveri,
Traverso (1998), Bertoli, Cimatti, Roveri, Traverso (2001), Lago, Pistore, Traverso
(2002), Kvarnstrom, Doherty, Haslum (2000), Bacchus Kabanza (2000), Holldobler
Stor (2000), Fourman (2000), Edelkamp (2003b), Dierks (2005), Kabanza Thiebaux (2005).
However, much done inverse direction, applying planners model checking
problems. Running IPC-4 planners planning encodings Promela specifications first step
that.
Promela domain contributes unusual structural properties domain set; computational complexity local search topology quite different discussed Section 4.
Simplifications. main simplification make use simple example classes
communicating processes. PDDL models refer fixed-length state vectors, could
include process construction calls. therefore considered active processes, i.e., processes
called initialization time. PDDL support temporally extended
goals, consider reachability properties only. Moreover, prototypical nature
language compiler, many features Promela rendezvous communication supported. Although limited support shared variables, competition chose
simple message passing protocols only; experimented reachability properties, PDDL goals competition event deadlock detection only. Concretely,
IPC-4 instances come two toy examples used area Model-Checking: well-known
Dining Philosophers problem, Optical Telegraph problem viewed
version Dining Philosophers philosophers complex inner life, exchanging data
two hands (each separate process). both, goal reach deadlock
state.
Versions Formulations. created eight different versions domain. differ
Promela example class encoded (two options), whether use numeric variables
encoding, whether use derived predicates encoding. four encodings
Promela example class semantically equivalent sense 1-to-1 correspondence plans. decided make different versions, rather formulations,
derived predicates make large difference plan length, numeric variables make
large difference applicability planning algorithms/systems. translation Promela

470

fiE NGINEERING B ENCHMARKS



P LANNING

PDDL makes use ADL constructs, domain version contains one ADL formulation
one (fully grounded) compiled STRIPS formulation.
3.4 PSR
Sylvie Thiebaux others worked application domain. domain adapted
IPC-4 Sylvie Thiebaux Jorg Hoffmann.
Application. task PSR (power supply restoration) reconfigure faulty power distribution network resupply customers affected faults. network consists electric
lines connected switches fed via number power sources equipped circuitbreakers. faults occur, circuit-breakers sources feeding faulty lines open
protect network, leaving lines many healthy ones un-supplied. network needs reconfigured opening closing switches circuit-breakers way
resupply healthy portions. Unreliable fault sensors switches lead uncertainty
state network. Furthermore, breakdown costs depend various parameters need
optimized constraints capacity sources lines. application topic ongoing interest field power distribution, investigated AI community
long time, including AI planning standpoint (Thiebaux, Cordier, Jehl, & Krivine, 1996;
Thiebaux & Cordier, 2001; Bertoli, Cimatti, Slaney, & Thiebaux, 2002; Bonet & Thiebaux, 2003).
Motivation. motivation including PSR twofold. First, well-researched interesting
application domain. Second, original structure rarely found previous benchmarks.
natural encoding models power propagation using recursive derived predicates compute transitive closure connectivity relation network. contrast
planning benchmarks, number actions needed optimal plan necessarily grow
instance size: available actions alter position switches, even large
network altering position switches may suffice reconfiguration. difficult
question answer is, switches.
Simplifications. Three major simplifications made. First, deterministic planning
assume network state fully observable, i.e., initial state description
complete, actions always succeed. Second, ignored numerical optimization
aspects PSR. Third, used personalized goals sense lines supplied named
explicitly goal. Note that, even simplified form, domain exhibits structure
explained above.
Versions Formulations. created four domain versions, differing primarily size
available formulations. natural domain formulation ADL derived predicates.
Though experimented many combinations PDDL encodings compilation strategies,
size instances could compile simpler languages quite restricted. Precisely,
versions are: large version ADL plus derived predicates; middle version
could devise SIMPLE-ADL plus derived predicates STRIPS plus derived predicates;
middle-compiled version ADL, identical middle version except derived
predicates compiled away; small version pure STRIPS. instances latter
domain version particularly small, since extremely difficult come
encoding pure STRIPS either yield prohibitively long plans, prohibitively large
PDDL descriptions. fact, obtain small version applied pre-computation step (Bertoli
et al., 2002) obviates need reasoning power propagation and, consequently,

471

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

need derived predicates. resulting tasks, opening closing switch directly without
detour power propagation affects parts network. Thus planner longer needs
compute flow power network, left issue configure
flow.
3.5 Satellite
domain introduced Long Fox (2003) IPC-3; adapted IPC-4 Jorg
Hoffmann. domain comes NASA space application, satellites take images
spatial phenomena. motivation inclusion IPC-4 domain applicationoriented similar sense new domains. Also, wanted immediate comparison performance achieved IPC-3, achieved IPC-4. top 5 domain
versions used IPC-3, added 4 new versions, introducing additional time windows (formulated
alternatively timed initial literals compilation) sending data earth.
3.6 Settlers
domain introduced Long Fox (2003) IPC-3. task build
infrastructure unsettled area, involving building housing, railway tracks, sawmills, etc.
distinguishing feature domain domain semantics encoded numeric variables. makes domain important benchmark numeric planning.
reason, IPC-3 participant could solve smallest instances, included
domain IPC-4. modification made except compiled away universally
quantified preconditions order improve accessibility.
3.7 UMTS
Roman Englert working application area several years. domain adapted
IPC-4 Stefan Edelkamp Roman Englert.
Application. third generation mobile communication, so-called UMTS (Holma &
Toskala, 2000), makes available broad variety applications mobile terminals.
comes challenge maintain several applications one terminal. First, due limited resources, radio bearers restrictions quality service (QoS) applications. Second,
cell setup execution several mobile applications may lead unacceptable waiting periods
user. Third, QoS may insufficient call setup case execution
mobile application shut down. Thus arises call setup problem several mobile applications. main requirement is, course, setup minimum possible amount
time. (pure) scheduling problem necessitates ordering optimizing execution
modules needed setup. many scheduling problems, finding some, necessarily
optimal, solution trivial; main challenge find good-quality solutions, optimal ones ideally.
Motivation. main motivation modelling pure scheduling problem planning domain
strong industrial need flexible solution procedures UMTS call setup,
due rapidly evolving nature domain, particularly sorts mobile applications
available. ideal solution would put automatic planner mobile device,
let compute optimized schedules on-the-fly. sense, UMTS call setup
natural promising field real-world application automatic planners. interesting

472

fiE NGINEERING B ENCHMARKS



P LANNING

sense scheduling problems far central competitive AI planning,
domain serves advertise usefulness PDDL addressing certain kinds scheduling
problems.
Simplifications. setup model chose considers coarse parts network environment
present UMTS applications invoked. Action duration fixed rather computed
based network traffic. inter-operational restrictions different concurrent devices
neglected. considered plausible timings instances rather real-application
data running certain applications UMTS device. designed domain
10 applications single device. challenge optimal planners computing minimum
makespan solutions, much challenge satisficing planners.
Versions Formulations. created six domain versions; arise two groups
three versions each. first group, standard UMTS domain, comes without timing
constraints. latter represented either using timed initial literals, compilation;
before, separated two options different domain versions (rather domain version
formulations) due increase plan size. second group domain versions similar
structure. difference three domain versions includes additional flaw
action. single step, action achieves one needed fact, where, normally, several steps
required. However, action useless reality deletes another fact needed,
cannot re-achieved. flaw action added see happens intentionally
stressed planners: beside increasing branching factor, flaw action look useful
perspective heuristic function ignores delete lists.

4. Known (Theoretical) Results Domain Structure
section, start structural analysis IPC-4 domains summarizing known
results literature. Helmert (2006b) analyzes domains perspective domainspecific computational complexity. Hoffmann (2005) analyzes domains used IPCs far,
plus standard benchmarks literature, identifying topological properties search
space surface relaxed plan heuristic introduced system (Hoffmann
& Nebel, 2001), variants used many modern planning systems. studies
exclusively concerned purely propositional non-temporal STRIPS ADL planning.
follows, domain names refer respective (non-temporal) domain versions.12
4.1 Computational Complexity
Helmert (2006b) studied complexity plan existence bounded plan existence
IPC-4 benchmark problems. Plan existence asks whether given planning task solvable. Bounded
plan existence asks whether given planning task solvable given number
actions. Helmert established following results.
Airport, plan existence bounded plan existence PSPACE-complete, even
aircraft inbound need taxi park goal location, map planar
symmetric, safety constraints simply prevent planes occupying adjacent segments.
12. UMTS domain, temporal versions, treated either studies. computational
complexity, easy see deciding plan existence P deciding bounded plan existence (optimizing
makespan) NP-complete UMTS. Topological properties relaxed plan heuristic havent yet defined
temporal setting.

473

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

proof reduction Sliding Tokens puzzle, set tokens must reach goal
assignment vertices graph, moving adjacent vertices ensuring two
tokens ever find adjacent vertices. length optimal sequential plans
exponential number tokens, likewise airport domain. Even parallel plans
shorter linear amount, since plane move per time step. proof
Sliding Tokens puzzle quite complicated involves construction instances
exponentially long optimal plans. one would expect, constructions used
unlikely occur real airport; particular true necessary density conflicting
traffic graph structure. consider interesting since makes Airport benchmark
extremely high worst-case complexity, much good-natured typical case
behavior. Typically, ample space airport (comparatively) airplanes moving
across it.
Pipesworld, whether without tankage, plan existence bounded plan existence NP-hard. unknown whether NP, however. NP-hardness proof
reduction SAT four literals per clause variable occurs
3 clauses. SAT instance reduced network way parts network (variable subnetworks) represent choice assignment variables, parts
(clause subnetworks) represent satisfaction clauses. content areas pipes
initialized batches way interface restrictions guarantee goal area
reached certain batch clause subnetwork iff clause satisfied assignment.
general Promela planning, defined Edelkamp (2003a), plan existence bounded
plan existence PSPACE-complete. PSPACE-hardness proof reduction halting problem space-restricted Turing Machines (TM). cells machines tape
mapped onto process queue unit capacity, states TM form set Promela
messages, TMs alphabet form set Promela states processes, Promela transitions encode TMs transitions. shown TM halts iff Promela task reaches
deadlock.
Dining Philosophers, hand, particular structure one process per
philosopher, transition graph. Optimal plans generated linear time
number philosophers making constant number transitions reach known state
graphs. Similar considerations apply Optical Telegraph.
PSR tasks solved optimally polynomial time, requires rather complex
algorithm. plans start wait action opens circuit-breakers affected fault.
simplest form, optimal plans follow prescribing series actions opening switches
connecting feedable line faulty one. necessary sufficient ensure
network safe state faulty line re-supplied. minimal set devices
(disjoint previous one) must closed resupply rest network.
achieved generating minimal spanning tree healthy part network,
done polynomial time.
Figure 2 gives overview results summarizes Helmerts (2003) results
standard benchmarks. domain set displayed set investigated Hoffmann (2005),
minor differences explained shortly. Blocksworld-no-arm, Briefcaseworld, Ferry, Fridge,
Simple-TSP, Tireworld traditional planning benchmarks never used IPC.13
13. Blocksworld-no-arm version Blocksworld blocks moved directly destination, without
referring robot arm. Simple-TSP used (Fox & Long, 1999) demonstrate potential symmetry

474

fiFOR

P LANNING

PSPACE

E NGINEERING B ENCHMARKS

Promela
Airport

P

Plan Existence

NP

Pipesworld
Mystery
Mprime
MiconicADL
Freecell

Tireworld
SimpleTSP
Schedule
PSR
OpticalTelegraph
Movie
Gripper
Fridge
Ferry
DiningPhil.

Zenotravel
Satellite
Rovers
MiconicSTRIPS
MiconicSIMPLE
Logistics
Grid
Driverlog
Depots
Briefcaseworld
Blocksworldnoarm
Blocksworldarm

P

NP

PSPACE

Bounded Plan Existence

Figure 2: overview Helmerts results computational complexity benchmarks.
IPC-1 benchmarks Assembly, Grid, Gripper, Logistics, Movie, Mprime, Mystery.
IPC-2 benchmarks Blocksworld-arm, Freecell, Logistics, Miconic-ADL, Miconic-SIMPLE,
Miconic-STRIPS (Miconic Schindler Lifts name elevator domain), Schedule.
IPC-3 benchmarks Depots, Driverlog, Freecell, Rovers, Satellite, Zenotravel. IPC-4
benchmarks displayed bold face, including (hypothetical) general Promela domain.
table Figure 2 organized along two axes, x axis shows complexity
deciding bounded plan existence, axis shows complexity deciding (unbounded) plan
existence. Membership table entry means, NP PSPACE rows columns,
respective problem complete respective complexity class. exception Pipesworld
domain, which, stated above, still unknown whether two decision problems
members NP. Assembly domain displayed since, there, Helmert (2003) proved
existence exponentially long optimal plans, showing plan generation quite hard
domain. table sectors diagonal crossed unbounded plan existence
polynomially reduced bounded plan existence set bound 2n , n
number distinct actions, or, ADL, number distinct conditional effects.
striking new feature IPC-4 introduction PSPACE-complete benchmark
domains, filling top right corner Figure 2. Thus, benchmarks cover four inhabited
sectors table. previous IPCs, IPC-1 IPC-2 cover three sectors inhabited
detection. One simply visit n nodes, using move action applied two nodes,
permutation nodes optimal tour. Hoffmann (2005) investigates Towers Hanoi domain.

475

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

sectors except top right corner IPC-3 benchmarks cover two sectors namely,
bounded plan existence NP-complete domains, domains except Freecell
polynomial time algorithm deciding unbounded plan existence.
IPC-4 benchmarks exceptional aspects visible Figure 2. particularly, explained above, polynomial decision algorithm PSR highly non-obvious.
benchmarks important since, one hand, principle allow planners provide efficient solutions, while, hand, necessitating employ interesting techniques
so.14 Schedule polynomial benchmark bounded plan generation
requires non-obvious algorithm. 20 domains left bottom middle bottom
sectors table, polynomial algorithms deciding bounded unbounded plan existence
completely trivial, mostly addressing one subgoal time.
pointed already, final exception lies extraordinarily large difference
worst-case typical-case behavior Airport. see Section 5, even fully automated
methods (the IPC-4 planners) are, least unbounded plan existence (generation), quite efficient
typical instances domain. large differences worst-case typical-case
behavior unusual, believe extent phenomenon Airport really unusual.
example, planners tend find PSR much harder Airport.
4.2 Topology h+
Hoffmann (2005) considers state spaces (the forward search spaces) STRIPS ADL tasks
taken standard benchmark domains. defines, given task world state s, h+ (s)
length shortest possible relaxed plan, relaxed plan. relaxed plan
plan achieves goal one assumes delete lists empty. Computing
h+ (the corresponding decision problem) NP-hard (Bylander, 1994). Many modern planners,
e.g., HSP (Bonet & Geffner, 2001), (Hoffmann & Nebel, 2001), SGPlan (Wah & Chen, 2004;
Chen, Hsu, & Wah, 2004), YAHSP (Vidal, 2004), Fast-Diagonally-Downward (Helmert, 2004,
2006a), interpreted sort heuristic search approximation h+ , plus
techniques problem decomposition (Wah & Chen, 2004), lookahead techniques (Vidal,
2004), additional different heuristic functions (Helmert, 2004). context, question
great practical interest quality underlying heuristic function addressed domains.
Heuristic quality measured terms topological properties search space surface:
many local minima there? large they? flat regions? Hoffmann (2005)
investigates questions h+ function, topological properties search space
surface proven.
Hoffmann defines topological phenomena following Frank, Cheeseman, Stutz (1997).
identifies several parameters show particularly interesting behavior planning benchmarks.
dead end world state reachable initial state goal state cannot
reached. unrecognized dead end dead end h+ (s) < . exit distance
state length shortest path state space leading state s0 ,
h+ (s) = h+ (s0 ), s0 direct neighbor state s00 h+ (s00 ) < h+ (s0 ). is,
exit distance number steps need go order find better state (s00 ),
14. Helmerts (2005) words: think domains solved polynomial time polynomial
algorithms obvious extraordinarily interesting. Deterministic PSR definitely domain kind
regard optimization. NP-hard problems cannot solved without strong reliance search, polynomial
problems can, planners capture important concepts.

476

fiE NGINEERING B ENCHMARKS



P LANNING

minus 1 since distance s0 measured. Here, s0 plays role exit state used
Frank et al. (1997). state lies local minimum paths exit temporary increase
heuristic value; otherwise state lies bench. maximal local minimum exit distance
(mlmed), state space, maximum exit distances states lying local minima
state space. Similarly, maximal bench exit distance (mbed) maximum exit
distances states lying benches. core results Hoffmanns (2005) investigation
displayed Figure 3.

Blocksworldarm
Depots
Driverlog

Pipesworld
PSR

Rovers
OpticalTelegraph

Mystery
Mprime
MiconicADL
Freecell
Assembly
Airport

mbed <= c

mlmed <= c

Hanoi [0]
Blocksworldnoarm [0]
Fridge [0]
Briefcaseworld [0]
Grid [0]

Logistics [0,1]
Ferry [0,1]
Gripper [0,1]
undirected

Tireworld [0,6]
Satellite [4,4]
Zenotravel [2,2]
MiconicSIMPLE [0,1]
MiconicSTRIPS [0,1]
Movie [0,1]
SimpleTSP [0,0]
harmless

DiningPhil. [31,31]
Schedule [5,5]

recognized

unrecognized

Figure 3: overview Hoffmanns results topology h+ benchmarks.
x-axis Figure 3 corresponds properties regarding dead ends. y-axis corresponds
properties regarding exit distance local minima benches. domains assigned
appropriate table sectors classes domains depending worst-case behavior possible
them. detail, meaning table following. state space undirected
every transition (action) directly inverted; state space harmless inversion
possible, dead ends anyway; recognized means dead ends,
h+ them; unrecognized means least one unrecognized dead end.
domain falls class worst-case instance: example, single instance whose
state space contains single unrecognized dead end, domain considered unrecognized.
results proved, i.e., domain is, example, considered harmless, means
provably instance domain contains dead ends.
y-axis Figure 3, distinction lines correspond existence non-existence
constant upper bounds maximal local minimum exit distance (upper line) maximal
bench exit distance (lower line). Note constant upper bounds maximal local minimum
exit distance exist domains upper line domains lower line,
bounds exist.15 constant, meant bound valid every instance
15. presentation assumes domains bounded bench exit distance subset bounded
local minimum exit distance. true general, hold considered benchmark domains.

477

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

domain, regardless size. actual bounds proved displayed brackets; local minimum
bound precedes bench bound cases both. right bottom part table
crossed since unrecognized dead ends infinite exit distance domain classes
empty.16
obvious intuition behind Figure 3 transition easy hard
planning systems based heuristic search approximating h+ one moves left bottom
side top right side table. Indeed, table does, sense, coincide well
empirical behavior of, least, system. Note extreme topological behavior
many domains. upper bound local minimum exit distance 0 means
local minima all. case 13 30 investigated domains. several
domains, widely used Logistics benchmark, top single step suffices reach
exit benches. Hoffmann (2005) shows would polynomial bottom classes
table, provided oracle computing h+ .
Considering table perspective benchmark development, one notices particularly older benchmarks tend lie left bottom side; consider example Ferry, Briefcaseworld, Fridge, Simple-TSP, Tireworld. distribution IPC-1 benchmarks Gripper,
Logistics, Movie, Grid, Assembly, Mystery, Mprime somewhat extreme: first four
list belong simple classes, last three belong hardest class (until today,
Mystery Mprime domains amongst causing planners trouble).
IPC-2 benchmarks Logistics, Blocksworld-arm, Miconic-STRIPS, Miconic-SIMPLE, Schedule,
Freecell, Miconic-ADL again, many simple challenging domains.
notable exceptions respect Blocksworld-arm, left top side table,
Schedule, contain dead ends local minima. IPC-3 benchmarks, distribution starts get varied. domains Zenotravel, Satellite, Depots, Driverlog, Rovers,
Freecell span three four top classes table, plus one bottom classes.
IPC-4 domains, shown bold face, obviously continue development. two
sharing class Pipesworld PSR.17 continue emphasis spanning top classes
table; new domain one bottom classes Dining Philosophers,
highly exceptional exceedingly large bound, making bound practically useless
exploitation planning.18 Satellite domain adopted IPC-3 benchmarks serves
represent (a interesting instance of) easier classes. Note Satellite simple
talking STRIPS version, drops challenging problem constraints formulated numeric variables. Airport domain exceptional top right class
that, again, worst-case place Figure 3 differs lot typical case. dead
end Airport situation two airplanes completely block others paths.19 course,
practical airports designed way doesnt usually happen. mentioned earlier,
usually non-overlapping, far possible standard routes, place
blocking occur densely populated areas near parking positions.
16. One could skip unrecognized dead ends definition maximum exit distances, Hoffmann (2005)
argues un-intuitive, plus making things unnecessarily complicated.
17. Actually, Pipesworld invertible sense every two-step sequence (starting ending pumping operation)
directly undone. considered harmless since single actions cannot inverted.
18. Indeed, h+ bad heuristic Dining Philosophers. basically comes counting number
unsatisfied goals.
19. relaxed plan use free space planes make move across other.

478

fiE NGINEERING B ENCHMARKS



P LANNING

5. New (Empirical) Results Domain Structure
provide empirical analysis various structural parameters IPC-4 domains.
sake readability conciseness, focus non-temporal domain versions only.
types data measure, results temporal domain versions quite similar.
extent, visible tables showing numbers actions facts, domain versions,
individual domain descriptions Appendix A.
empirical analysis aimed highlighting characteristics of, differences between, IPC-4 domains. Apart focussing practical parameters, analysis
compared theoretical results cited previous section big advantage tells us
something actual instances run competition. Note choice instances
make huge difference example, stated earlier, real-world airport likely
exponentially long plans, neither likely provoke many dead-end situations. possible all, instances used IPC-4 chosen relatively realistic (details Appendix A).
analysis structured three sub-sections. Section 5.1 shows how, individual
domains, size grounded encoding grows instance size. Section 5.2 assesses
correspondence quality standard heuristic functions, runtime achieved
IPC-4. Section 5.3, finally, assesses fact connectivity instance size, meaning number
choices one achieve fact, number actions fact required for.
5.1 Encoding Size
current STRIPS ADL planners, far authors aware, ground parameters
variables pre-process, ending task representation consisting ground facts
ground actions. obvious question ask large grounded encodings are. Figure 4
shows data, numbers facts actions plotted instance size (selected versions of)
different domains. numbers measured using FFs pre-processor. filters static facts
facts added deleted action unreachable actions, meaning actions
appear relaxed planning graph (a planning graph without mutex reasoning) initial
state (Hoffmann & Nebel, 2001); formulas compiled simple STRIPS-like conjunctions
facts, along lines Gazen Knoblock (1997) outlined Section 2.
100000

1e+06
Airport
Pipesworld
Dining Philosophers
Optical Telegraph
PSR small
PSR large
Satellite
UMTS

10000

Airport
Pipesworld
Dining Philosophers
Optical Telegraph
PSR small
PSR large
Satellite
UMTS

100000

Nr. Actions

Nr. Facts

10000
1000

1000

100
100

10

10
5

10

15

20

25
30
Nr. Instance

35

40

45

50

5

10

15

20

25
30
Nr. Instance

35

40

45

50

(a)
(b)
Figure 4: Numbers (a) ground facts (b) ground actions, plotted instance number,
selected versions IPC-4 domains.
479

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

cases except UMTS (that temporal versions), domain version selected
Figure 4 non-temporal. Let us consider domains one one. Airport, one
non-temporal version. plots Figure 4 (a) (b) show us quite nicely instances
scaled, sharp drops curves corresponding steps new underlying airport. Precisely,
instances 1 3, 4 9, 10 20, 21 35, 36 50 based growing airports, respectively,
within airport number travelling airplanes grows 1 2 15 (in
instance 50). example, instance 35 instance 36 step one half Munich airport,
12 airplanes, full Munich airport, 2 airplanes.
Pipesworld, two non-temporal versions, without tankage restrictions. Figure 4 shows data former, challenging one (the IPC-4 planners fared much
worse it); without tankage restrictions, slightly fewer facts, factor 510 fewer actions. Pipesworld instances scaled similar way Airport ones: five
growing pipeline networks feature growing number travelling liquid batches. networks underlie instances 1 10, 11 20, 21 30, 31 40, 41 50, respectively.
Corresponding drops observed stepping instance 30 31, and, less significantly,
stepping 20 21 40 41. major difference Airport visible
much crippled nature (featuring much variance) curve number actions.
because, Airport, objects move big spacious structure, while, Pipesworld,
many objects move within rather dense space.20 fundamental difference Airport
Pipesworld manifests order curves reversed numbers facts
actions: Airport, extraordinarily many facts required describe huge airport structure,
Pipesworld fewer facts smaller structure, many actions describing
things move along structure. stated earlier, Pipesworld, different objects affect
others position moving.
Promela domains, Dining Philosophers Optical Telegraph, data domain
versions without derived predicates identical, derivation rule deriving fact
counted action achieving fact. main difference seen lies
extremely smooth scaling. domains single size parameter, numbers
ground facts actions grow linear functions parameter functions Optical Telegraph order magnitude higher Dining Philosophers. curves
Optical Telegraph stop instance 17 able compute grounded
representation much time memory needed simplification precondition formulas. Note artifact data presentation, rather constitutes serious
limitation planner tries perform pre-processing.
PSR, interesting domain versions small, since could formulated
STRIPS, large, since goes instances realistic size (in largest instances,
is). name small suggests, numbers quite small able compile STRIPS,
indicated earlier make instances small.21 Essentially compilation
problem visible curves large, huge number ground facts actions
relatively early instances already. curves stop instance 20 beyond that, simplifying
20. much objects cannot move affects number ground actions due mentioned filtering
unreachable actions.
21. notable exception instance nr. 25, number actions peaks 9400. due exceedingly complex goal formula, 9216 disjuncts DNF, yields extra goal-achievement action,
c.f. Section 2.

480

fiE NGINEERING B ENCHMARKS



P LANNING

formulas becomes extremely costly. versions, note high degree variance
numbers facts actions, somewhat corresponds huge degree variance
observed planner performance domain (see Figure 8). Part variance, least
pace oscillations amplitude, explained way instances
scaled. given number sources (the instance size), generated instances increasing
minimal number switches originally fed given source, given number switches,
generated instances increasing percentage faulty lines ranging 10% 70%.
Intuitively, larger number switches per source, larger harder expect instance
be. Furthermore, percentage faulty lines tends induce easy-hard-easy pattern.
lines faulty, small part network resupplied devices need
switched. Similarly, faulty lines exist, network resupplied
switching operations. intermediate percentage, effects actions become
complex conditioned positions many switches instances
become critically constrained harder solve.
Satellite, main observation made extremely steep ascent curves
instance 20, particularly growth extremely high numbers actions. two reasons
this. First, one action Satellite (take-image) 4 parameters reachable almost
combination objects correct types (most time, actions 2 3 parameters).
Second, size instances grows sharply beyond instance 20 which, simply,
instances 21 36, used IPC-4, correspond 16 instances posed IPC-3
challenge hand-tailored planners.
consider Settlers ease readability graphs, since domain
quite obviously exceptional anyway, relies almost completely numeric variables.
UMTS, Figure 4 shows data plain domain version without time windows flaw action.
obvious characteristic numbers facts actions constants. true
domain versions, numbers vary slightly. reason that, way UMTS instances
scaled, every instance describes applications requirements; changes (only)
goal, specifying applications actually need set up. Independent effect
particular scaling method used, observe numbers facts actions relatively
low around 100 even largest instances, applications must set up,
plans contain actions.
5.2 Quality Heuristics, Runtime
section, measure length best (sequential parallel) plans found
planner, (sequential parallel) plan length estimates returned common heuristic
functions, runtime taken planners. Precisely, optimal planners, measure:
optimal makespan, found IPC-4 parallel optimal planners (planners optimizing
makespan).
length standard plan graph (Blum & Furst, 1997), i.e., index first plan
graph layer contains goals without mutexes.
best runtime taken parallel optimal planner IPC-4.
optimal sequential plan length, found IPC-4 sequential optimal planners.
481

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

length serialized plan graph, pair non-NOOP actions made mutex.
best runtime taken sequential optimal planner IPC-4.
satisficing planners, measure:
best (shortest) plan length, found planner IPC-4.
length relaxed plan initial state (an action sequence solves task one
assumes delete lists empty; computed (Hoffmann & Nebel, 2001)).
best runtime taken satisficing planner IPC-4.
main goal identify characteristic behavior domains, identify characteristic
effects heuristic quality performance. reader note that, selection measurements, make several simplifying assumptions. Optimal planners exclusively based
plan graph estimates. Satisficing planners exclusively based relaxed plan estimates. Further, satisficing planners minimize makespan, sequential plan length. chose
take account latter since potentially over-estimating (non-admissible) heuristic
specifically estimating parallel plan length; best knowledge, satisficing planners
minimizing makespan actually use heuristic estimating number remaining actions, employ method greedily arrange chosen actions parallel plan. said,
wish imply simplifying assumptions safe sense lose important
information. simplifying assumptions necessary make analysis presentation
feasible. data show definitely capture many crucial aspects IPC-4 heuristic quality
planner runtime. show data individual domains, proceeding alphabetical order.
(IPC-4) runtime results obtained Linux machine running two Pentium-4 CPUs 3GHz,
6 GB main memory; time memory cutoffs 30 minutes 1 GB, per instance.
Consider Figure 5, showing data Airport domain. Note axis two different
meanings, runtime left hand side, number (parallel sequential) plan steps
right hand side. applies figures sub-section. Airport, observe
clear correlation quality plan length estimation, runtime. optimal parallel
planners, Figure 5 (a), best observed instances nr. 15 20. There, difference
makespan estimate plan graph grows, grows achieved runtime,
exponential scale. may look counter example that, instance nr. 20, plan
graph estimate exact (coincides real makespan), runtime get lower again.
Note however, instance 20 based much larger airport previous instances.
instance 20 onwards, instances solved parallel planner exact plan graph
estimate. optimal sequential planners, Figure 5 (b), get similar behavior
instances nr. 14 18. behavior strong instances nr. 35 36: plan
length grows lot 35 36, serial plan graph becomes little shorter; correspondingly,
runtime goes two orders magnitude. true instances 20 21.
satisficing planners, Figure 5 (c), striking observation length
real plan coincides, instances, exactly length relaxed plan (for respective
initial state). actually quite easy explain: optimal plan moves airplanes way
never block paths; plan optimal even ignoring delete lists.
Moving airplanes without blocking always possible start. situation changes
482

fiE NGINEERING B ENCHMARKS

1000

70



P LANNING

10000

160

Optimal MakeSpan
PlanGraph
Best Parallel Runtime

Optimal NrActions
SerialPlanGraph
Best Sequential Runtime
140

60

1000

100
120
50

30

1

10

80

Nr. Steps

40

Runtime (sec.)

100

10

Nr. Steps

Runtime (sec.)

100

60
1
20
40

0.1
0.1

10

0.01

20

0
5

10

15

20

25

30

35

40

45

0.01

0

50

5

10

15

20

25

Nr. Instance

Nr. Instance

(a)

(b)
1000

30

35

40

45

50

700
Best NrActions
RelaxedPlan
Best Runtime
600

100

10

400

300

1

Nr. Steps

Runtime (sec.)

500

200
0.1
100

0.01

0
5

10

15

20

25

30

35

40

45

50

Nr. Instance

(c)
Figure 5: Airport domain. Plots (parallel) plan length, heuristic estimation, runtime,
(a) optimal parallel planners, (b) optimal sequential planners, (c) satisficing planners.
wrong decision made, additional moves become necessary reality,
without delete lists avoid blocking situation. Apart this, Figure 5 shows quite nicely
runtime taken corresponds closely length plan found. Note latter
huge, 694 largest instance.
Pipesworld domain, two non-temporal domain versions: with/without tankage
restrictions, i.e., restrictions amount liquid stored network areas.
Figure 6 shows data version without restrictions; observations made
domain version similar, except sorts planners scale much worse, thus providing
us less data. optimal planners, Figure 6 (a) (b), striking difference
Airport domain Figure 5 (a) (b) quality even parallel plan graph heuristic
bad: underestimates real makespan much larger extent Airport.
underestimation grows instance size, and, naturally, runtime grows well. Note
planners fail scale much earlier Figure 5 (a) (b). one slight exception
rule poorer heuristic estimate leads longer runtime: instance number 10 11,
optimal sequential plan length grows 19 20, length serial plan graph remains 9,
runtime drops 1400 150 secs.

483

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

1000

16

10000

20

Optimal MakeSpan
PlanGraph
Best Parallel Runtime

Optimal NrActions
SerialPlanGraph
Best Sequential Runtime
18

14

1000

100
16
12

8

1

10

12

Nr. Steps

10

Runtime (sec.)

14

10

Nr. Steps

Runtime (sec.)

100

10
1
6
8

0.1
0.1

4

0.01

6

2
5

10

15

20

25

30

35

40

45

0.01

4

50

5

10

15

20

25

Nr. Instance

Nr. Instance

(a)

(b)
10

30

35

40

45

50

160
Best NrActions
RelaxedPlan
Best Runtime
140

120
1

80

Nr. Steps

Runtime (sec.)

100

60
0.1
40

20

0.01

0
5

10

15

20

25

30

35

40

45

50

Nr. Instance

(c)
Figure 6: Pipesworld domain without tankage restrictions. Plots (parallel) plan length, heuristic estimation, runtime, (a) optimal parallel planners, (b) optimal sequential planners, (c) satisficing planners.
Similarly situation optimal planners, satisficing planners, Figure 6 (c),
main difference Figure 5 (c) much worse quality heuristic function:
relaxed plan length differs greatly length real plans found, particularly
larger instances. curiously, despite worse quality heuristic, runtimes much
lower. longest time taken instance 10 seconds. goes show, first,
shortcomings analysis here: give heuristic quality initial state, may
differ lot situation rest state space. example, Airport planner using
relaxed plans may get lost huge dead ends wrong decision made early on. Second,
course, techniques satisficing planners use relevant. runtime data
Figure 5 (b) exclusively due SGPlan (Wah & Chen, 2004) YAHSP (Vidal, 2004), whose
problem decomposition/greedy lookahead techniques appear work extremely well domain.
satisficing planners perform much worse, failing solve largest instances. note
Pipesworld, overall runtime curves (for planners) characteristically jagged
show considerable variance comparison to, e.g., Airport. information gets lost
best-of presentation chosen figures here. seems hardness domain comes

484

fiE NGINEERING B ENCHMARKS



P LANNING

interactions subtle seen rather high-level parameters measured here. reiterate domain version tankage restrictions much challenging planners,
planner getting anywhere close largest instances YAHSP.
10000

1000

1

350

Optimal MakeSpan
PlanGraph
Best Parallel Runtime
Optimal NrActions
SerialPlanGraph
Best Sequential Runtime

1000

Best NrActions
RelaxedPlan
Best Runtime
300

250

10

200
0.1
150

Nr. Steps

Runtime (sec.)

100
Nr. Steps

Runtime (sec.)

100

10
100
1
50

0.1

1
5

10

15

20

25

30

35

40

0.01

45

0
5

Nr. Instance

10

15

20

25

30

35

40

45

Nr. Instance

(a)
(b)
Figure 7: Dining Philosophers domain without derived predicates. Plots (parallel) plan length,
heuristic estimation, runtime, (a) optimal planners (b) satisficing planners.
Figure 7 shows data Promela/Dining Philosophers without derived predicates.
show two separate figures optimal planners since curves quite easy read. even
quick glance, one sees domain characteristic behavior different
domains. optimal makespan, plan graph length, serial plan graph length constant
across instance size. contrast, optimal sequential plan length grows linear function
size; note logarithmic scale right hand side axis Figure 7 (a), use
make figure (the values plan step measures) readable. best plans found
satisficing planners optimal, i.e., NrActions data identical sides
figure. Figure 7 (a), see effect heuristic quality search performance:
parallel planners scale linear function instance size, sequential planners,
heuristic function becomes worse worse, scale highly exponentially. latter might
true satisficing planners; bit hard tell since solved instances solved
extremely quickly. reason instance index higher 29 solved that,
instances, similarly discussed (Section 5.1), simplifying precondition formulas
became prohibitively costly, instances available ADL only. two satisficing
planners scaled well Dining Philosophers (without derived predicates) SGPlan
YAHSP neither could handle ADL formulation domain. Similarly,
optimal planners SATPLAN04 Optiplan scaled well, neither could handle
ADL formulation. Note inability planners handle formulas without pre-simplification
techniques thus constitutes serious limitation.
Optical Telegraph without derived predicates (no figure shown) observations similar
ones Figure 7, except planners scale much worse. particularly, optimal
sequential planners solve single smallest instance, best satisficing runtime clearly
exponential instance size, taking 1500 seconds solve instance number 25. Promela
domain versions derived predicates, results optimal planners since none
could handle derived predicates. observations satisficing planners similar
485

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

above: NrActions grows linear function instance size, relaxed plan length grows
linear function significantly lower gradient. planners fast Dining Philosophers
need lot time (> 1000 sec) solve largest Optical Telegraph instances (some
remain unsolved). omit results Promela domain versions using numeric variables,
since two planners participated domain versions.
1000

40

1000

35

Optimal MakeSpan
PlanGraph
Best Parallel Runtime

Optimal NrActions
SerialPlanGraph
Best Sequential Runtime
35

30

100

100
30

1

15

10

20

15

1

Nr. Steps

20

Runtime (sec.)

10

Nr. Steps

Runtime (sec.)

25
25

10
10
0.1

0.1
5

5

0.01

0
5

10

15

20

25

30

35

40

45

0.01

50

0
5

10

15

20

Nr. Instance

25

30

35

40

45

50

Nr. Instance

(a)

(b)

10

50
Best NrActions
RelaxedPlan
Best Runtime

1000

60
Best NrActions
RelaxedPlan
Best Runtime

45

50
40
100
35

Nr. Steps

Runtime (sec.)

25
20

10

30

0.1

Nr. Steps

40
30

Runtime (sec.)

1

20
15
1
10
10
5

0.01

0
5

10

15

20

25

30

35

40

45

0.1

50

0
5

Nr. Instance

10

15

20

25

30

35

40

45

50

Nr. Instance

(c)
(d)
Figure 8: PSR domain. Plots (parallel) plan length, heuristic estimation, runtime, (a)
parallel optimal planners PSR small (STRIPS version), (b) sequential optimal planners PSR small, (c) satisficing planners PSR small, (d) satisficing planners
PSR large (featuring ADL derived predicates).
Figure 8 shows results PSR domain. Figure 8 (a), (b) (c) show plots domain version PSR small, comes pure STRIPS addressed IPC-4 planners;
Figure 8 (d) shows plots PSR large, comes ADL derived predicates
addressed four satisficing planners only. show data PSR middle-compiled
PSR middle: former, two satisficing planners participated; latter, six satisficing
planners participated, scaled quite well less challenging instances results
less interesting PSR large.

486

fiE NGINEERING B ENCHMARKS



P LANNING

First, note curves PSR small show large amount zig-zagging, quite
unusual cannot simply accounted way instances scaled.22 Consider
Figure 8 (a). main observation made real optimal makespan much larger
estimation plan graph, particularly larger instances. Still, optimal parallel planners
quite efficient, least solve instances. runtime data entirely due
SATPLAN04, whose search techniques apparently quite efficient domain even
bad plan graph lower bound. optimal planners least one order magnitude
slower, cant solve largest instances; example, none solve instances 48
49. optimal sequential planners Figure 8 (b), results pretty similar except
runtime scaling somewhat worse. kinds optimal planners, runtime clearly
correlated length optimal plans, which, since plan graph bounds almost
constant, coincides difference real plan length estimate.
Figure 8 (c), observe relaxed plan bad estimator plan length PSR
small (at least respective initial states), planners solve instances quite efficiently anyway. runtime data entirely due YAHSP Fast Downward; particularly
Fast Downward extremely efficient, showing slight increase runtime instance
size, satisficing planner capable solving instances 48 49. Note YAHSP
(Vidal, 2004) uses powerful techniques besides relaxed plan heuristic, Fast Downward
(Helmert, 2004) uses involved (and apparently powerful, case) heuristic function. Note that, least terms solved instances, optimal satisficing planners are,
unusually, equally good (or bad) domain: exactly one group solves instances,
planners cannot solve instances 48 49. difficulty planners experiencing
domain remarkable since instances, least grounded encodings, actually
small compared instances domains, c.f. Figure 4. indicates
domain fundamental characteristic yet captured well search
heuristics/techniques (most of) planners nicely complements said
non-obvious polynomial algorithm PSR Section 4.1.
Figure 8 (d), see relaxed plan (computed version handling derived
predicates, see Thiebaux et al., 2003, 2005) rather useless estimator PSR domain
expressed natural way using ADL derived predicates. relaxed plan constantly
contains 0 steps, meaning over-approximation semantics derived predicates makes
initial state look goal state; happens PSR middle. situation may
different parts state space heuristic value constantly 0 this, apparently,
causes serious trouble satisficing planners except Fast Downward. planner except Fast
Downward solve instance higher number 16. Fast Downward seems profit, again,
involved heuristic function, reaching scaling limit instance number 31.
Satellite domain, many temporal numeric domain versions, select,
presentation here, single pure STRIPS version. Figure 9 (a) (b), observe that,
Pipesworld Promela, unlike Airport PSR, Satellite domain serial
plan graph provides much worse heuristic values (for sequential planning) parallel planning
graph (for parallel planning). instances solved optimal planners, parallel plan
length (serial parallel) plan graph length grow much, sequential plan length
does. Consequently, sequentially optimal planners scale much worse parallel ones.
22. true runtime curves individual planners. fact, planners even disagree widely
instances solved easily take lot time.

487

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

1000

12

10000

30

Optimal MakeSpan
PlanGraph
Best Parallel Runtime

Optimal NrActions
SerialPlanGraph
Best Sequential Runtime
11
1000

100

25
10

1

20
Nr. Steps

Runtime (sec.)

8

Nr. Steps

Runtime (sec.)

100
9

10

10
15

7
1
6

0.1

10
0.1
5

0.01

4
5

10

15

20

25

30

0.01

35

5
5

10

15

20

Nr. Instance

Nr. Instance

(a)

(b)
100

25

30

35

500
Best NrActions
RelaxedPlan
Best Runtime

450
400

10

300
1

250

Nr. Steps

Runtime (sec.)

350

200
150
0.1
100
50
0.01

0
5

10

15

20

25

30

35

Nr. Instance

(c)
Figure 9: Satellite domain. Plots (parallel) plan length, heuristic estimation, runtime,
(a) optimal parallel planners, (b) optimal sequential planners, (c) satisficing planners.
Figure 9 (a), nicely see how, instances 8, 9, 10, parallel plan length
down-up movement (8, 6, 8) constant parallel plan graph length (4), resulting
movement pretty much shape logarithmic scale! best parallel runtime.
Figure 9 (c), observe that, Airport unlike domains,
relaxed plans initial states almost length real plans (there actually
slight over-estimation time). seen earlier, c.f. Section 4.2, Hoffmann
(2005) shown that, Satellite, relaxed plan length is, fact, bound close real plan
length states (in contrast Airport, unrecognized dead ends possible principle).
Indeed, Satellite easy tackle almost satisficing planners IPC-4.
runtime shown Figure 9 (c) appears non-trivial, remember instances huge, see
particular number ground actions Figure 4 (b). instance 20, satisficing IPC-4
planners could solve instance within minute.
skip Settlers domain since relies almost exclusively numeric variables encode
domain semantics, makes rather incomparable domains. Figure 10 shows
data UMTS domain. temporal numeric versions, half feature
time windows. consider versions without time windows; Figure 10 (a) (b) concern

488

fiE NGINEERING B ENCHMARKS

10000

720
Optimal MakeSpan
PlanGraph
Best Parallel Runtime



0.1

80
Best NrActions
RelaxedPlan
Best Runtime

700

1000

P LANNING

70

680
60

620
10

600

50

40

Nr. Steps

640

Runtime (sec.)

100

Temporal MakeSpan

Runtime (sec.)

660

30

580
20
1

560
10

540
0.1

520
5

10

15

20

25

30

35

40

45

0.01

50

0
5

10

15

20

Nr. Instance

25

30

35

40

45

50

Nr. Instance

(a)

(b)

1000

720
Optimal MakeSpan
PlanGraph
Best Parallel Runtime

1

90
Best NrActions
RelaxedPlan
Best Runtime

700

80

680

70

100
660

600

50
0.1
40

Nr. Steps

620

Runtime (sec.)

10

Temporal MakeSpan

Runtime (sec.)

60
640

30
580
1

20

560

10

540
0.1

520
5

10

15

20

25
30
Nr. Instance

35

40

45

0.01

50

0
5

10

15

20

25
30
Nr. Instance

35

40

45

50

(c)
(d)
Figure 10: UMTS domain. Plots (durational) plan length, heuristic estimation, runtime,
(a) optimal (b) satisficing planners plain temporal version, (c) optimal (d) satisficing planners temporal version flaw action.
plain domain version, Figure 10 (c) (d) flaw action. Let us first consider optimal
planners, left hand side overall figure. optimal planners could tackle
domain i.e., domains syntax TP4 HSPa (Haslum & Geffner, 2001).
makespan-minimizing planners, data sequentially optimal planners (which
wouldnt make lot sense temporal setting anyway). PlanGraph curves Figure 10
(a) (c) correspond makespan estimation delivered initial state TP4s temporal
numeric extension heuristic. effect heuristic quality runtime, observe
strong correlation. Figure 10 (a), instance 21 makespan estimate
close real makespan time, two actually coincide runtimes
good. Starting instance 22, real makespan makes sudden leap upwards
followed estimation, runtimes shoot upwards. phenomenon clear
instances 18, 19, 20, makespan estimation exhibits good, bad, good pattern,
runtime same. Figure 10 (c), sort behavior observed,
meaning particular flaw action effect makespan estimation
TP4. fact, makespan estimation exactly instances solved
domain versions. contained implicitly latter sentence, flaw action affect runtime

489

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

set solved instances. runtime flaw action consistently
factor 2 larger without flaw action. challenging instances planners fail
flaw action present. decrease performance presumably due larger state
space incurred flaw action.
Consider satisficing planners, Figure 10 (b) (d). first observe that, more,
facing individual characteristic behavior, domain challenge
satisficing planners. latter shows domain useful benchmark satisficing
planners; shows heterogeneous benchmark set is: common
satisficing planners faster optimal ones except PSR domain
picture extreme UMTS. stated earlier, domain pure scheduling problem,
obviously satisficing planners provide runtime-efficient greedy solutions problem.23
Looking plots little detail, find Figure 10 (b) sequential plan length (the
plans found optimal) simple stepwise linear function instances, relaxed plan
length initial state coincides real plan length isnt surprise given
excellent runtimes satisficing planners, fact scheduling domain. (In
sequentialized schedule harmful delete effects occur.) picture changes lot Figure 10 (d).
real plan length stays basically (is increased constant 2), relaxed plan
length becomes lot shorter due flaw action. satisficing planners unaffected, largely
keeping excellent runtime behavior. Apparently, planners incorporate technique
recognizing uselessness flaw action (this done simple domain analysis
techniques), getting rid influence. suspicion confirmed fact one
satisficing planner get affected flaw action way one expect. CRIKEY,
heuristic search forward state space planner using relaxed plan heuristic, solves task within
70 seconds without flaw action, sometimes takes 1000 seconds flaw action.
Let us briefly summarize overall observations:
presented data, time performance planners correlates well
quality relevant heuristic function. notable exceptions rule far
observed data Fast Downward PSR large, relaxed plans
pretty much devoid information, SGPlan YAHSP (to extent Fast
Downward) Pipesworld, relaxed plans provide poor estimates planners
experience (much more) serious difficulties.
Usually, known benchmarks general, satisficing planners several orders
magnitude faster optimal ones. Exceptions PSR groups perform
almost equally UMTS satisficing planners hardly need time all.
Usually, known benchmarks general, parallel plan graph length much
better estimator parallel plan length serial plan graph length sequential plan
length. exceptions Airport often huge difference
lengths two kinds plan graphs and, extent, PSR small
difference parallel sequential plan length big. Note none
domains purely sequential, i.e. parallelism possible them.
23. terms quality solutions found, satisficing planners reasonably well. example, LPG-td,
minimizes makespan domain, finds, version optimized speed, plans take maximally
10% time optimal ones found TP4. version LPG-td optimized plan quality, goes
1%.

490

fiE NGINEERING B ENCHMARKS



P LANNING

Usually, known benchmarks general, considerable difference
length relaxed plan initial state, length real plan
initial state. Exceptions Airport, Satellite, UMTS, lengths
identical nearly so.
Usually, known benchmarks general, largest instances solved
within given particular time memory (30 minutes 1GB) plans around
hundred steps more. PSR exceptional Fast Downward planner able
find plan 35 (namely, 57) steps.
indicates diversity IPC-4 domains almost every one appears
least exceptions listed here. domains dont appear Promela
domains Pipesworld. sort exception itself, meaning domains contribute
typical benchmark behaviors overall set.
take existence mentioned distinguishing features evidence
IPC-4 domains indeed several novel aspects, besides oriented applications
structurally diverse. particular, behavior PSR domain stands one typically observes. Note that, typically easy construct artificial domains provoke
unusual behavior, domains oriented applications, exhibited behavior, particularly PSR domain, unusual, relevant
concrete sense.
5.3 Fact Connectivity
conclude empirical analysis data aimed assessing sort connectivity
facts. fact p, measure number adders: actions p add list (in
ADL case, effect p adds list). gives indication branching factor
action choices comes fact. measure number requirers: actions
p precondition (in ADL case, effect p condition).
gives indication central fact task. given planning task, measure
parameters distribution adders(p) requirers(p), set facts p: minimum
(min), mean (mean), maximum (max), standard deviation (dev). Within domain versions,
plot data instance size (number).
data abstract allow deep conclusions reasons planner performance,
able highlight characteristic features domains. particular, see
abstract measurements behave characteristically different IPC-4 domains
IPC-3 domains. Figure 11 shows plots IPC-4 domains Airport, Pipesworld, Dining
Philosophers, Satellite. picture PSR relatively complicated shown separately
Figure 12. Settlers left exceptional. picture UMTS extremely simple,
explained text below.
Consider Figure 11 (a), (non-temporal) Airport domain. min curves shown
since constantly 0: is-pushing-back(airplane) never added since pushback requests (of
outbound traffic) modelled; occupied(segment) required negation. max
curves step functions since follow size underlying airports: is-moving(airplane)
many adders segments, since start-up-engine done segment; ispushing-back(airplane) required every action, leading overall similar form

491

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

1000

10000
#Adders, max
#Adders, mean
#Adders, deviation
#Requirers, max
#Requirers, mean
#Requirers, deviation

100

1000

10

100

1

10

0.1

#Adders, max
#Adders, mean
#Adders, deviation
#Adders, min
#Requirers, max
#Requirers, mean
#Requirers, deviation
#Requirers, min

1
5

10

15

20

25

30

35

40

45

50

5

10

15

20

Nr. Instance

25

30

35

40

45

50

Nr. Instance

(a)

(b)

1000

1000
#Adders, max
#Adders, mean
#Adders, deviation
#Requirers, max
#Requirers, mean
#Requirers, deviation

#Adders, max
#Adders, mean
#Adders, deviation
#Requirers, max
#Requirers, mean
#Requirers, deviation

100

100

10

10

1

1
5

10

15

20

25
Nr. Instance

30

35

40

45

5

10

15

20
Nr. Instance

25

30

35

(c)
(d)
Figure 11: Distributions numbers actions adding fact, actions requiring fact,
selected versions IPC-4 domains: (a) Airport, (b) Pipesworld, (c) Dining
Philosophers, (d) Satellite.
max requirers curve. mean adders curve flattened facts ismoving(airplane) added certain places airport. mean requirers curve, interestingly, shows similar downwards step behavior numbers facts actions shown
Figure 4. reason lies not-occupied facts, exist every segment,
needed every action moving (any) airplane across segment. number facts
increases number airplanes. Since many facts, strong
influence mean. much correspondence runtime data,
trivial one tend grow instance size.
Data Pipesworld, tankage non-temporal, shown Figure 11 (b). Several observations
made: 1. max mean curves clearly follow scaling pattern, growing traffic
5 growing underlying networks. 2. min curves non-zero. 3. characteristic
difference curves instance 10, afterwards. 4. curves adders
requirers almost (but exactly) coincide. Apart 1, present Airport data,
observations clearly distinguish Pipesworld domains. observation
2, sometimes larger instances min number adders drop 0. due
interactions complex networks, certain configurations inside pipes true initially

492

fiE NGINEERING B ENCHMARKS



P LANNING

re-achieved later interactions recognized reachability
pre-process made actions, c.f. explanation Section 5.1. Observation 3 due
large contrast smallest network larger ones: smallest network
unitary pipelines (containing single batch), others pipelines least length 2.
Observation 4 particularly odds domains, large differences
adders requirers. fact, measuring distribution difference adders
requirers, found numbers (not distribution parameters) extremely
close together: instance 50, max adders 1524 max requirers 1520, max
difference 29, mean 1.63 dev 5.31. Pipesworld tankage restrictions,
phenomenon somewhat less extreme still there. Another characteristic enormously
large max number adders requirers, order magnitude larger
domains. max adders requirers come do-normal facts, control status
individual pipelines, affected action moving combination batches
respective pipeline; facts depend single batches (not combinations them),
flattens mean curves two orders magnitude. Regarding runtime, mentioned
earlier, Pipesworld scaling pattern clear correlation runtime; neither
fact connectivity measure here.
Consider Promela domain Figure 11 (c), data shown Dining Philosophers derived
predicates. again, extreme characteristics domain recognizable first glance.
data Dining Philosophers without derived predicates identical, data Optical Telegraph differ numbers higher. min curves 0, adders constant,
requirers linear. exist facts without adders due oddity encoding,
certain start-up transitions put forks table first place; facts without requirers
blocked-philosopher, needed goal. number adders depend
instance size due static sort domain structure, size increases number
parallel processes (philosophers), form processes stays fixed, every process
interacts exactly two processes. number requirers linear (non-constant, particular) due technicality encoding, activating (requesting) performing
(executing) transition requires communication channels neutral state; respective
flags required transitions, number course grows size. facts
required locally, resulting much lower (easily two orders magnitude) mean. one
would expect domain simple scaling pattern, planner performance pretty much
function size.
Data Satellite (STRIPS version) shown Figure 11 (d). characteristic feature,
comparison domains, extremely smooth parallel close-together growth
curves. curve stands little max requirers; max adders due pointing(satellite, direction) facts added turning direction; max
requirers due power-on(instrument) facts, needed every take-image
instrument, done every combination direction image mode supported
instrument. Note that, contrast domains max curves two
orders magnitude higher mean, max requirers one order magnitude
curves, curves roughly order. min curves
shown since constantly 1 adders power-on(instrument) added
switch-on(instrument) constantly 0 requirers have-image(direction) needed

493

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

goal. runtime performance IPC-4 planners scales relatively smoothly size
Satellite, parameters do.
UMTS, parameters constants. another consequence aforementioned
scaling pattern, number specified applications instances,
changes (only) goal, specifying applications shall actually scheduled. Precisely, plain domain version, number adders 1 facts, nicely showing
scheduling-domain characteristic choice accomplish tasks,
accomplish them. another illustration satisficing planners find
domain trivial, whereas optimal planner TP4 (Haslum & Geffner, 2001) spend long
time searching optimal schedule. number requirers minimum 0, maximum 2, mean
0.89, standard deviation 0.57. domain version flaw action, notable difference
max adders 2 due alternative provided flaw action (min 0,
mean 1.2, deviation 0.5). interesting note context that, mentioned above,
domain version satisficing planner, CRIKEY, experiences serious trouble.
10000

10000
max
mean
deviation

max
mean
deviation

1000
1000

#Adders

#Required

100
100

10

10
1

0.1

1
5

10

15

20

25

30

35

40

45

50

5

10

15

20

Nr. Instance

25

30

35

40

45

50

Nr. Instance

(a)

(b)

35

1000
max
mean
deviation

max
mean
deviation

30

25

#Required

#Adders

100
20

15

10
10

5

0

1
5

10

15

20

25
Nr. Instance

30

35

40

45

50

5

10

15

20

25
30
Nr. Instance

35

40

45

50

(c)
(d)
Figure 12: Distributions numbers actions adding fact, actions requiring fact,
PSR small large: (a) adders small, (b) requirers small, (c) adders large,
(d) requirers large.
Data PSR shown Figure 12. Here, show plots adders requirers separately
makes much readable. Since data contain particularly interesting
494

fiE NGINEERING B ENCHMARKS



P LANNING

phenomena, show two domain versions, small large. obvious feature
small, Figure 12 (a) (b), is, again, huge amount variance data. clearly
discernible peaks curves (instance nrs. 15, 25, 31, 40) coincide peaks size
measured numbers facts actions Figure 4. note large
range values, spanning four orders magnitude, even though instances (except number
25) small comparison domains shown Figure 4. minimum numbers
adders requirers constantly 1: updated(breaker) added wait(breaker) action,
not-closed(breaker) needed one wants close it.24 Regarding maximum adders
requirers, instance 25, far highest (9400) total number actions, max adders
(9216) due goal-reached fact, i.e., 9216 disjuncts DNF goal formula;
max requirers (9251) due do-normal, flag needed every goal-reached action,
plus actions opening closing breakers. remark facts responsible
peaks curves, i.e., happens instances 15, 31, 40.
highly characteristic PSR small max numbers adders requirers approach sometimes exceed two thirds total number actions. case
domain, even domain version PSR (see below). intuitive reason lies
one pre-compilation steps employed order able formulate reasonably
large PSR instances pure STRIPS: compilation step (Bertoli et al., 2002) removes network
reasoning (and it, need derived predicates) basically enumerating breaker configurations effects flow current network. result dense structure
end network directly affects every end, explaining high degree
fact connectivity, particular explaining extremely complex goal formulas four peak
cases mentioned above.
pre-compilation step key understanding huge difference behavior small, large. latter shown Figure 12 (c) (d). There, max
adders curve small linear function note non-logarithmic scale axis spite
(mostly) much larger numbers actions. example, instance highest number (7498)
actions derivation rules number 20, max number adders 31, less half
percent total number actions. natural high-level domain encoding here,
flow current network modelled transitive closure derivation rules
propagate current based local status network. particular breaker
configurations effects flow current implicit structure network.
again, PSR large, min curves constantly 0 adders requirers; notaffected(breaker) negation derived predicate (needed precondition open close
actions), isnt added inverse rule, given meaning negation failure
semantics derived predicates; fed(line) required goal. mean dev
adders completely flattened numerous (5029 5237, instance 20) upstream(x,y)
facts, true currently path open side node x side node y, added
local derivation rule relies predicate neighbors y. Similarly
Satellite, max number requirers generally lot larger max number adders.
example, 542 vs. 31 instance 20, max requirers due fact closed(device)
required derivation rules talking pairs devices; instance 20, 7360 7498 actions
rules; 46 devices.
24. Sometimes 0 minimum requirers due artificial goal-reached fact, introduced get rid complex
goal formulas, c.f. Section 2.

495

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

1000

1000
#Adders, max
#Adders, mean
#Adders, deviation
#Requirers, max
#Requirers, mean
#Requirers, deviation

#Adders, max
#Adders, mean
#Adders, deviation
#Requirers, max
#Requirers, mean
#Requirers, deviation

100

100

10

10

1

1
2

4

6

8

10

12

14

16

18

20

2

4

6

8

Nr. Instance

10

12

14

16

18

20

10
12
Nr. Instance

14

16

18

20

Nr. Instance

(a)

(b)

10000

1000
#Adders, max
#Adders, mean
#Adders, deviation
#Requirers, max
#Requirers, mean
#Requirers, deviation

#Adders, max
#Adders, mean
#Adders, deviation
#Requirers, max
#Requirers, mean
#Requirers, deviation

1000
100

100

10
10

1

1
2

4

6

8

10
12
Nr. Instance

14

16

18

20

2

4

6

8

(c)
(d)
Figure 13: Distributions numbers actions adding fact, actions requiring fact,
STRIPS versions IPC-3 domains except Freecell Satellite: (a) Depots, (b)
Driverlog, (c) Rovers, (d) Zenotravel.
sum sub-section, data are, generally, abstract really tightly interconnected
performance exhibited planners. hand, certain characteristics visible.
particularly: Pipesworld, numbers adders requirers almost identical.
Promela, adders constant requirers linear. Satellite, curves close
together. PSR small lot variance, max numbers adders requirers
approach sometimes exceed two thirds total number actions. contrast, PSR
large max adders decline less half percent total number actions. UMTS,
parameters constant. Except PSR UMTS, phenomena somewhat hard
interpret. nothing else, certainly show us domains rather different
characteristics. Interestingly, differences significant IPC-3 benchmarks shown
Figure 13. Clearly, behavior characteristically diverse seen
IPC-4 domains. four domains Figure 13, basically observe mostly parallel lines
pretty close together except max lines, order magnitude higher
others. striking feature zig-zag nature curves Depots. due
scaling pattern: smallest instances, number crates (blocks) grows continually
15 crates instance 6. Thereafter, come blocks 3 instances each, first 6

496

fiE NGINEERING B ENCHMARKS



P LANNING

crates, second 10 crates, third 15 crates (across blocks, instance size parameters
grow). means zig-zag shape curves corresponds exactly zig-zag shape
crate numbers.
Note behavior plots Figure 13 similar behavior plot Satellite
Figure 11 (d), particular first 20 instances. instances posed fully
automated planners IPC-3, shown Figure 13. IPC-3 domain truly stands
terms behavior curves Freecell.25 There, observe phenomenon similar
Pipesworld Figure 11 (b), curves adders requirers almost coincide.
phenomenon little weaker Pipesworld: largest Freecell instance, number 20,
max (both) adders requirers 1638, max difference 102, mean
14.30 dev 24.86. comparison, largest Pipesworld instance, max adders 1524,
max requirers 1520, max difference 29, mean 1.63 dev 5.31.
sum overall empirical analysis, data certainly dont solve mystery
behind performance every planner every domain (and instance). do, however, provide
interesting insights instances scaled domains, certain subtleties
peculiarities encodings, standard heuristic methods, groups planners,
react them. observe large characteristic differences domains. sense
results nicely complement technical descriptions Appendix A, well known theoretical
results Section 4.

6. Conclusion
field research general reasoning mechanisms, AI planning, essential
useful benchmarks: benchmarks reflect possible applications developed technology,
help drive research new fruitful directions. development benchmark
domains instances IPC-4, authors invested significant effort creating set
useful benchmarks AI planning.
explained introduction, three main goals tried achieve 1. realism, 2.
structural diversity, 3. accessibility benchmarks. debatable extent goals
achieved. extent, inherent conflicting nature goals. Accessibility
benchmark formulation simple possible PDDL dialects obviously conflict
realism. Structural diversity conflict realism since, time window available
create competition benchmark set, may (and been, case) large set
suitable applications choose from. One must make whats available. stressed
realism since lack realism traditionally considered one main weaknesses
AI Planning achieving structural diversity accessibility would, fact,
comparatively easy (see below). said, adapt applications IPC
make many significant simplifications. Still, derived domains applications, one
expect capture important features even simplification; top that,
clear path towards realism.
believe domains constitute best possible compromise IPC-4. name
distinguishing features domain set:
25. somehow makes sense precisely domain stands out, intuitively different
domains. notably, deciding plan existence Freecell NP-hard easy domains, c.f.
Section 4.1.

497

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

1. Airport, Pipesworld, PSR, UMTS derived directly applications (Promela
special case since model checking instances could encode simplistic).
previously case Elevator domain (IPC-2) Rovers Satellite
domains (IPC-3).
2. complexity satisficing optimal planning STRIPS domain versions covers
entire range P, NP, PSPACE deciding (bounded) plan existence P PSR
PSPACE-complete Airport general Promela. aware previous
PSPACE-complete STRIPS benchmark; polynomial algorithm finding plans PSR
is, contrast STRIPS benchmarks algorithms, quite nontrivial.
3. Hoffmanns (2005) taxonomy domain classes different h+ topology, IPC-4
domains lie classes sparse coverage previous benchmarks. particular, none
new domains nearly simple topology proved Hoffmann
traditional benchmarks. taking account Pipesworld actions inverted
(not one but) two steps, domains lies different class Hoffmanns taxonomy,
covering classes (6) previous IPC benchmark set (3, 5, 4 IPC-1, IPC-2,
IPC-3, respectively). Dining Philosophers exceptional lies simple class
doesnt simple topology; Airport exceptional lies hard class
typically (in real-world instances) easy.
4. behavior different kinds planners IPC-4 shows lot characteristic
patterns individual domains. Airport, sheer size main obstacle. Pipesworld,
particularly tankage restrictions, known heuristic functions badly.
Promela domains, main obstacle is, lot cases, impossibility compiling
PDDL description fully grounded simpler representation. PSR, extremely
large amount variance, optimal planners perform well (or poorly) satisficing
planners. UMTS, satisficing planners need time all.
5. abstract level looks numbers actions adding/needing fact,
behavior domains characteristically diverse IPC-3 domains.
6. Last least, STRIPS versions domains preserve much original
domain structure previously case. IPC-2 STRIPS version Elevator
hardly elevator problem anymore, IPC-3 STRIPS versions Satellite Rovers
devoid interesting problem constraints. contrast, STRIPS versions
Airport Promela semantically identical ADL versions, PSR STRIPS
version, pre-compiled lot, still preserves much original difficulty domain
(judging, e.g., behavior IPC-4 planners it).
Feature 1 is, obviously, point realism. Features 2 5 points diverse structure; particularly Feature 4 shows domains pose different challenges (current) planning
technology. Feature 6 point realism combined accessibility. would stress
accessibility respect really quite important. 19 planners entered IPC-4,
8 could handle (some) ADL features. compilation approach enabled us confront 11
planners reasonably realistic problems. said, certainly debatable role STRIPS
498

fiE NGINEERING B ENCHMARKS



P LANNING

plays play community. people may say many core algorithms,
e.g., planning graphs (Blum & Furst, 1997) relaxed plan heuristics (McDermott, 1999; Bonet
& Geffner, 2001; Hoffmann & Nebel, 2001), invented STRIPS. Others may say
focus STRIPS-like languages algorithms distracts us considering temporal numerical problems truly different nature. notwithstanding, STRIPS still widely
used language among research community. cannot ignored competition organizers.
pointed advantages benchmark set, point
disadvantages. explained detail individual sections Appendix A, make
many simplifications order make applications fit use IPC-4. extent, whether
simplifications preserve original domain structure debatable matter. feel
Airport encoding close real physical thing. able represent
real optimization criterion bad, ameliorated fact that, 19 planners,
single one (LPG-td) could actually deal user-defined optimization criteria.26 Pipesworld,
simplifications severe. IPC-4 domain still resembles core difficulties,
reminiscent (complicated) toy example software could used control
real pipelines. Promela examples go show toy examples model checking area
better traditional toy examples planning. PSR, removing uncertainty
numerical optimization renders IPC-4 domain unsuitable practical use.
course, domain set exhaustive, meaning presumably numerous applications whose essential structure similar IPC-4 domains. examples
spring mind action choice autonomous robots, detecting security holes computer networks (Boddy, Gohde, Haigh, & Harp, 2005), online manufacturing (Ruml, Do, & Fromherz,
2005). structural diversity, would easy construct set artificial domains
explore possible extreme cases. domains would probably completely infeasible current planners, thus posing strong challenges. think of, example, Rubiks
Cube, Sokoban, Rintanens (2004) purely randomly generated instance distributions. again,
domain set would devoid realism. point preparation IPC-4,
considered introducing separate class domains, called Diverse Structure, would
contained domains sort. decided since competition event already
large without it. Also, felt applications already quite diverse structural
side. pointed above, several theoretical empirical phenomena suggest latter
indeed case.
work, experienced various successes failures accurately formulating
application domains PDDL. People asked us if, this, obtained picture
suitable PDDL is, current form, formulate applications, sorts domains
works well. answer is, dont feel obtained many insights matters
particularly deep havent known before. lessons learned these. First
foremost, formulating application STRIPS takes huge amount engineering expertise unless
one drops problem constraints; simplifications unavoidable. Second, discrete
nature action instantiations previous IPC PDDL dialects seriously impedes formulation
domains continuous aspects. discretization must chosen, sometimes easy
(Airport) sometimes hard (Pipesworld) do. good way seems adopt
duration inequalities suggested Fox Long (2003). Third, community pay
26. good example case PDDL moving faster actual planning technology.

499

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

attention lifted encodings, deal modern planning algorithms: one lesson
compilation activities grounding parameters often simply possible
(Promela, PSR). Since compiling away ADL constructs often feasible without grounding (c.f.
Section 2), relevant ADL/STRIPS context. final lesson, (the AI
Planning community) still, mostly, far away as-is applicability planners real world.
right track.
conclude, spent significant time effort creating useful set planning benchmarks
IPC-4. hope become standard benchmarks coming years.

Acknowledgements. would thank competitors detailed comments
bugs found domains, would thank Malte Helmert various useful tools
helped remove bugs.
thank Malte Helmert providing us yet unpublished, time
writing results computational complexity (Helmert, 2005, 2006b). thank Patrik Haslum
providing us TP4 temporal numerical plan graph estimates makespan UMTS
domain. indebted anonymous reviewers, much David Smith Maria
Fox, whose detailed extensive comments contributed greatly development paper.
finally thank David Smith extensive advice language, including corrections even
acknowledgements.
Jorg Hoffmann thanks Wolfgang Hatzack support development Airport
domain benchmark instances.
Frederico dos Santos Liporace supported Conselho Nacional de Desenvolvimento Cientfico
e Tecnologico, Brazil. would acknowledge support PhD supervisor, Ruy Milidiu, development Pipesworld application.
Sylvie Thiebaux thanks Piergiorgio Bertoli, Blai Bonet, John Slaney contributions
development PSR domain instances. would acknowledge
support National ICT Australia. NICTA funded Australian Governments backing
Australias Ability initiative, part Australian Research Council.

Appendix A. Detailed Domain Descriptions
provide detailed descriptions domains, alphabetical order. section (except
Satellite Settlers domains, adapted IPC-3) organized
sub-sections follows. first give outline application domain. explain
main adaptations made model application PDDL domain IPC-4, explain IPC-4
domain structure, i.e., domain versions formulations used IPC-4, explain
generated example instances IPC-4 test suites. Finally, discuss possible future
extensions.
A.1 Airport
contact person application domain, Wolfgang Hatzack, working
application area several years. domain adapted IPC-4 Jorg Hoffmann
Sebastian Trug.

500

fiE NGINEERING B ENCHMARKS



P LANNING

A.1.1 PPLICATION OMAIN
task control ground traffic airport. Timed travel routes must assigned
airplanes reach targets. inbound outbound traffic; former
airplanes must take (reach certain runway), latter airplanes
landed get parked (reach certain parking position). main problem constraint is,
course, ensure safety airplanes. means avoid collisions, prevent
airplanes entering unsafe zones behind large airplanes engines running.
optimization criterion minimize summed travel time (on surface airport)
airplanes.27 usually standard routes, i.e., routes airplane outbound
certain park position area, inbound certain runway, must take. reason introducing
routes is, simply, sheer complexity managing situation otherwise, without significant
computer support (which yet available real airports). see whether
standard routes present makes big difference computationally.
airplanes move airport infrastructure, consists runways, taxiways,
parking positions. runways taxiways sub-divided smaller segments. position
airplane given segment currently located in, plus direction
precise position within segment several airplanes segment time.
Airplanes generally divided three categories, light, medium, heavy, classify
according engine exhaust (jet blast). airplane moved either inbound out-bound. In-bound airplanes recently landed way runway
parking position, usually gate. Out-bound airplanes ready departure, meaning
way departure runway. Since airplanes cannot move backwards, need
pushed back gate onto taxiway, start engines. airports
provide different park positions allow airplane start engines directly.
ensure safety, airplane must get close back another airplane whose engines
running. far safety distance depends category (jet blast) second
airplane.
ground controller planner communicate airplanes ways
shall take stop. guidance given purely reactively, pays base
decisions anticipating future. Otherwise may happen airplanes block
need time necessary reach destinations airport. objective is, said,
minimize overall summed traveling times airplanes.
instances domain, one considers traffic situation given point time,
time horizon of, say, one hour. new airplanes known land given time slots inside
time horizon, time slots respective runways considered blocked,
planner make sure runways free times. course, situation
changes continually (new planes moved plans cannot executed intended), continuous re-planning, i.e., consideration domain instance describing new traffic situation,
necessary. Solving instances optimally (the corresponding decision problem) PSPACE-complete
without standard routes (Helmert, 2006b) NP-complete routes standardized (Hatzack
& Nebel, 2001). latter case, pure scheduling problem. former case, compli27. criterion airport wants minimize, order maximize throughput. point view
airlines, would better minimize delay, e.g., minimizing summed squared delay airplanes.
two criteria may conflict. Neither two easily modelled PDDL2.2, see below.

501

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

cated (highly unrealistic, course) airport topologies lead exponentially long solutions, c.f.
Section 4.1.
A.1.2 IPC-4 PDDL DAPTATION
PDDL encoding (as well example instance generation process, see below) based
software Wolfgang Hatzack, namely system called Astras: Airport Surface ground TRAffic
Simulator. software package originally designed training platform
airport controllers. Astras provides two-dimensional view airport, allowing user
control airplanes means point click. Astras simulate traffic flow
airport course specified time window.
made three simplifications, one benign, airport model. benign
simplification: model park positions airplane start engines directly,
without pushed back taxiway first. difficult model park positions
PDDL, seldom occur reality relevant application. first
important simplification assume somewhat cruder notion airplane locatedness,
requiring single airplane located segment time. is, use
term segment meaning smallest indivisible unit space. minimize loss
precision, (some of) original segments sub-divided several new smaller segments.
safety distance behind back airplane whose engines running measured
terms number segments. discretization makes us lose precision, believe
distort nature problem much: due amount expected conflicting
traffic different points airport (high near parking positions), relatively easy
choose discretization segments different length precise small enough
time.28 last simplification severe. give real optimization
criterion. say rather strong simplification below. use full standard
routes, thus allowing airplanes choice move. use standards
routes, particularly regions near runways large airports. one thing, served keep
large airports manageable PDDL encoding planners; another thing, seems good
compromise exploiting capabilities computers time keeping close
traditions airports. get back matter Section A.1.5.
full PDDL description domain encoding downloaded IPC-4 web page
http://ipc.icaps-conference.org/. Briefly, encoding works follows. available actions
pushback (move plane away backwards parking position), startup engines,
move segments, park (turning engines), takeoff (which amounts
removing plane airport). semantics actions encoded based
predicates defining current state airplane. point time, airplane either
moving, pushed, parked, airborne. airplane always occupies one segment and, engines
running, may block several segments depending size occupied segment
category airplane. action preconditions ensure blocked segments never
occupied another airplane. initial state, plane either parked, moving. parked
plane pushed back, starting engines, moving. moving airplane
28. need smallest indivisible units (of space, case) fundamental consequence discrete nature
PDDL2.2; said Section A.1.5.

502

fiE NGINEERING B ENCHMARKS



P LANNING

either move current segment neighboring segment, park parking position
take runway.
example, look PDDL encoding (non-durational) move action (one
preconditions used example Section 2 already):
(:action move
:parameters
(?a - airplane ?t - airplanetype ?d1 - direction ?s1 ?s2 - segment ?d2 - direction)
:precondition
(and (has-type ?a ?t) (is-moving ?a) (not (= ?s1 ?s2)) (facing ?a ?d1) (can-move ?s1 ?s2 ?d1)
(move-dir ?s1 ?s2 ?d2) (at-segment ?a ?s1)
(not (exists (?a1 - airplane) (and (not (= ?a1 ?a)) (blocked ?s2 ?a1))))
(forall (?s - segment) (imply (and (is-blocked ?s ?t ?s2 ?d2) (not (= ?s ?s1))) (not (occupied ?s)))))
:effect
(and (occupied ?s2) (blocked ?s2 ?a) (not (occupied ?s1)) (not (at-segment ?a ?s1)) (at-segment ?a ?s2)
(when (not (is-blocked ?s1 ?t ?s2 ?d2)) (not (blocked ?s1 ?a)))
(when (not (= ?d1 ?d2)) (and (not (facing ?a ?d1)) (facing ?a ?d2)))
(forall (?s - segment) (when (is-blocked ?s ?t ?s2 ?d2) (blocked ?s ?a)))
(forall (?s - segment) (when
(and (is-blocked ?s ?t ?s1 ?d1) (not (= ?s ?s2)) (not (is-blocked ?s ?t ?s2 ?d2)))
(not (blocked ?s ?a))))))

six parameters lot compared usual benchmarks cause
prohibitive explosion instantiations since lot restriction static predicates.
Airplane ?a moves; type (category) ?t; segment ?s1 facing direction ?d1,
?s2 facing direction ?d2 move. Direction simple concept
says end segment airplane facing. course, moves ?s1 ?d1
?s2 ?d2 possible specified static topology airport (can-move,
move-dir). first two complex preconditions says ?s2 must currently
blocked airplane ?a itself. second complex precondition makes sure
that, move, ?a block segment currently occupied (by another airplane,
necessarily): (is-blocked ?s ?t ?s2 ?d2) static predicate true iff ?s endangered
blocked plane type ?t ?s2w facing direction ?d2. effects selfexplanatory; simply update at, occupied, blocked information. effect
looks little complicated last one says segments blocked
move, longer blocked move, become un-blocked. Note conditions
conditional effects static, conditions disappear parameter instantiation chosen.
durational PDDL, actions take time according simple computations. time
taken move across segment depends, naturally, segment length speed.
assumed airplanes move speed regardless category. time taken start
engines proportional number engines. actions fixed duration.
planes known land near future, blocking runways, model
blocking time windows using timed initial literals, respectively compilation
artificial (temporal) PDDL constructs. timed literals simply instances usual blocked
predicate, becoming true respective time window starts, becoming false
ends.
able model real optimization criterion airport ground traffic control.
standard criterion PDDL minimize execution time, i.e., makespan, plan.
503

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

encoding domain comes minimizing arrival time (meaning, arrival
destination airport) last airplane. real objective is, said above, minimize
overall summed travel time airplanes. appears good way modeling
criterion current PDDL. difficulty lies accessing waiting times planes, i.e.
times stay segment waiting plane pass.29
way (we could think of) get access waiting times, current PDDL,
introduce explicit waiting action. one must able tell planner, i.e., encode
action, long plane supposed wait. One option use duration inequalities
proposed Fox Long (2003). action imposes constraints duration,
planner can/has choose actual duration action, point used
plan, additional (rational-valued) parameter. potential disadvantage approach
choice waiting time introduces, principle, infinite branching factor
state space, may thus make problem much harder automated planners. Moreover, duration inequalities put use IPC-3, part PDDL2.1. using
duration inequalities, way encode requested waiting time action use
discretization time. One introduce new objects representing every considered time
interval, give waiting action parameter ranging objects. Apart loss
precision involved discretization, approach likely cause huge performance
problems automated planners. alternative way out, considered introducing special
current-time variable PDDL2.2, returning time evaluation plan execution.
Using look clock, one could make plane record arrival time, thus formulate true optimization criterion without major changes domain structure. IPC-4
organizing committee decided introduction current-time variable seemed
problematic algorithmic point view (it implies commitment precise time points
planning time), didnt seem relevant anywhere except Airport.
all, IPC-4 PDDL encoding Airport domain realistic except optimization criterion, demands minimize maximal arrival time makespan instead summed
travel time. remains remark one (LPG-td) IPC-4 planners ignored
optimization criterion anyway. Also, minimizing latest arrival time appear useful (if
ideal) objective.
A.1.3 IPC-4 OMAIN TRUCTURE
Airport domain versions used IPC-4 non-temporal, temporal, temporal-timewindows,
temporal-timewindows-compiled. first versions is, name suggests, nondurational PDDL. second version, actions take time explained above. third fourth
versions consider runways blocked future planes known land given time
windows. third version encodes time windows using timed initial literals, fourth
version uses literals compilation standard temporal PDDL constructs, c.f. Section 2.
domain versions, problem constraints modeled using ADL, i.e., complex preconditions conditional effects. compiled ADL encodings STRIPS domainspecific software implemented purpose. grounded operator
parameters, precisely, parameters except, action, one giving name
29. Modelling summed (squared) delay airplanes, optimization criterion airlines, would pose essentially
difficulty: involves computing arrival time (in order compute delay).

504

fiE NGINEERING B ENCHMARKS

version
non-temporal
non-temporal
temporal
temporal
temporal-tw
temporal-tw
temporal-twc
temporal-twc

formulation
ADL
STRIPS
ADL
STRIPS
ADL
STRIPS
ADL
STRIPS



max-#op
5
1408
5
1408
5
1408
14
1429

P LANNING

max-#act
(1048) 989
(21120) 13100
(1408) 989
(21120) 13100
(995) 854
(22038) 13100
(911) 861
(21141) 13121

Table 1: Overview different domain versions formulations Airport. Abbreviations used: temporal-tw temporal-timewindows, temporal-twc temporaltimewindows-compiled; max-#op maximum number (parameterized) PDDL
operators instance, max-#act maximum number ground actions
instance. ADL formulations, set ground actions could generated
largest instances; data shown largest instances could handled. Data
parentheses collected FFs reachability pre-process (see text).
affected individual airplane. parameters fixed, formulas conditional
effects simplified usual STRIPS constructs. Airport domain version contains
original ADL formulation, well compilation STRIPS. result grounding
process depends specific airport considered instance, set airplanes
travelling. So, STRIPS formulations, instance individual domain file
(the applies STRIPS compilations domains described later).
domain versions, well blow-up incurred compilation, overviewed
Table 1.30 numbers shown table indicate numbers PDDL operators, numbers
grounded actions. domain version/formulation, maximum number
instance shown. Note that, ADL formulations except temporal-timewindows-compiled,
single domain file number operators identical instances.
STRIPS formulations, number operators high because, explained, operator
parameters grounded. difference number ground actions STRIPS
ADL formulations because, automated software, able generate
ground actions larger ADL instances; data shown largest instances
could handle. numbers shown parentheses refer situation FFs reachability
pre-process; said before, builds relaxed planning graph initial state, removes
actions appear graph. difference numbers inside outside
parentheses indicates much simple pre-process helps. see helps quite lot
here, pruning almost half actions (which would never become applicable, forward search
least, blow representation regardless algorithm used).
30. instantiation process is, course, planner-dependent. Similarly Section 5, data based
FFs pre-processor. extended pre-processor (precisely, one Metric-FF (Hoffmann, 2003)) deal
temporal constructs.

505

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

A.1.4 IPC-4 E XAMPLE NSTANCES
Airport example instances generated Sebastian Trug, implementation based
aforementioned airport simulation tool Astras. Five scaling airport topologies designed,
used basis instance generation. airports named Minimal, Mintoy,
Toy, Half-MUC, MUC. smallest airports smallest possible airport
Astras handle. two largest airports correspond one half Munich Airport (MUC),
full MUC airport. Figure 14 shows sketches Minimal airport, MUC
airport.

(a)

(b)
Figure 14: smallest (a), largest (b) IPC-4 Airport topologies. Park position
segments marked black (e.g., top part (a)), segments airplanes
takeoff marked white (e.g., left bottom side part (a)). lines
show road network airport. Topology (b) corresponds MUC airport.
Sebastian Trug implemented PDDL instance generation software inside Astras. simulation traffic flow airport, desired user software exports current traffic
situation various PDDL encodings explained above. simulator run different
airports, 50 scaling traffic situations exported (3 Minimal, 6 Mintoy, 11
Toy, 15 Half-MUC, 15 MUC). airport, instances scale terms
number travelling airplanes. largest instance features 15 planes moved destinations Munich airport, 10 planes landing future considered (in respective
domain versions). considered realistically sized traffic situation, airport.

506

fiE NGINEERING B ENCHMARKS



P LANNING

A.1.5 F UTURE W ORK
remains explore relax simplifications make. importantly,
overcome discrete model space (locatedness), model real optimization
criterion. difficulties are, partly described already, mostly due discrete
nature PDDL2.2, allow continuous choice instantiation action.
continuous choice would natural way saying far plane moving
long waiting. best way go direction is, probably, assume
duration inequalities proposed Fox Long (2003), together numeric variables
already contained PDDL2.2. easy modelling side. main problem
probably technology side, i.e., develop planners deal efficiently
continuous choice points. time IPC-4, said, continuous choice appeared much
demand planners.
One interesting topic future work arises one restricts airplanes completely standard
routes, i.e., leaves choice route take destination. said, first,
usually done real airports, sheer complexity managing situation otherwise,
without significant computer support (which yet available real airports). Second, IPC4 made limited use feature, retain flexibility could offered
automatized methods. Third, restriction turns PSPACE-complete ground traffic control
problem pure, NP-complete (Hatzack & Nebel, 2001), scheduling problem,
question planes move across segment. One could exploit create much
concise PDDL encoding. restricted problem comes resolving conflicts
arise two planes need cross airport segment. One could thus try encode
PDDL physical airport, conflicts possible solutions, ideally connection
real optimization criterion. expected planners much efficient
simpler concisely encoded problem.
A.2 Pipesworld
Frederico Liporace working application area several years; submitted paper
early domain version workshop competition ICAPS03. domain
adapted IPC-4 Frederico Liporace Jorg Hoffmann.
A.2.1 PPLICATION OMAIN
Pipelines play important role transportation Petroleum derivatives, since
effective way transport large volumes large distances. application domain
consider deals complex problems arise transporting oil derivative products
multi-commodity pipeline system. Note that, many planning benchmarks
dealing variants transportation problems, transporting oil derivatives pipeline
system different characteristic kind structure, since uses stationary carriers
whose cargo moves rather usual moving carriers stationary cargo. particular,
changing position one object directly results changing position several objects.
less reminiscent transportation domains complicated single-player games
Rubics Cube. lead several subtle phenomena. example, may happen solution
must reverse flow liquid pipeline segment several times. may happen

507

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

liquid must pumped ring pipeline segments cyclic fashion, achieve goal
(we see example later).
detail, application domain following. pipeline network graph operational areas connected pipeline segments. Operational areas may harbors, distribution centers
refineries. may connected one pipeline segments. oil derivatives
moved areas pipelines.
different types petroleum derivative products. area set tanks
define storage capacity product type. pipeline segment fixed volume
speed. volume depends segments length cross section diameter, speed
depends power pumps move contents. segment may uni-directional, i.e.
usable transportation one direction.
Pipeline segments always pressurized, is, must always completely filled
petroleum derivative products. that, way move pipeline segments contents
pumping amount product adjacent area segment. operation
results, assuming incompressible fluids, amount possibly different product
received area end segment.
pumping operations executed violate interface tanking
constraints. former, distinct products direct contact inside pipeline segment,
unavoidable loss due mixture interface them.
interface losses major concern pipeline operation, mixed products
simply discarded. must pass special treatment may involve sending back
refinery, may require use special tanks. severity interface losses depends
products interface inside pipeline segment. two product types known generate
high interface losses, pipeline plan must place adjacently segment. pair
product types said interface restriction.
Tanking constraints limits product amounts stored area, arising
respective tank capacities. constraints may effectively block pipeline segment,
room receiving area store product would leave segment process
pumping operation.
task application bring certain amounts products areas
required, i.e. one find plan pumping operations shifts positions product
amounts way goal specifications met. Sometimes deadline specifying
when, latest, product amount arrive destination area. may case
area (typically, refinery) known produce given amount product given point
time, plan must make sure enough tank space available respective
area store new product amount. Similarly, area (typically, harbor distribution center)
may known consume given amount product given point time, thereby freeing
respective amount tank space.
A.2.2 IPC-4 PDDL DAPTATION
main adaptations made PDDL encoding unitary batches, split pumping operations,
personalized goals (see latter). term batch used oil pipeline
industry refer amount product must transported pipeline. Batches
thus associated single product predefined volume. Batches indivisible.

508

fiE NGINEERING B ENCHMARKS



P LANNING

batch Bi pumped area Aj segment Sj,k , possible another batch
pumped Aj Sj,k Bi volume pumped. course, reality product
amount batch rational number. Using numeric encoding IPC-4 seemed completely
infeasible due complications modeling, expected capabilities participating
planners (see Section A.2.5). Instead, based encoding concept called
unitary batches. smallest considered indivisible portions product. pumping
operations refer unitary batches. pipeline segments volumes volumes tanks
defined terms unitary batches. encoding real-world instance domain,
actual volume associated unitary batch choice variable. Smaller unitary batches decrease
rounding error PDDL encoding, cost larger encoding size. Note that,
smallest units space Airport domain, discretization need due
non-continuous nature actions PDDL2.2; get back Section A.2.5.
modeled pipe segments directional fashion, i.e. default direction assigning
one area role, area role. pumping operations accordingly
distinguish push actions, move liquid respective segments default direction,
pop actions, move liquid opposite direction. simply technical device
enable encoding pipe segment contents predicates defining first last
batches segments (as well successor relation). push pop actions receive
(amongst things) arguments pipeline segment whose contents moved,
batch inserted segment. batch leaves segment depends
segment content action executed. Figure 15 shows example.



A1




























B1



A2




















































B2




B4












































B5

















































































































B6

A1







































B1



































B2

A2


















B3

























B4























































































































B6





B5












B3



(b)

(a)
A1

!

!

!

!

!

!

!

!

!

!

"

"

"

"
#

"
#

B1
!

!

"
#

"
#

"
#

"
#

"
#

$

$
%

$
%

$

$
%

$
%

"
#

B2

"
#

A2
























B4




(

)


(

)


(

)

(
)

(
)

(
)

(
)

(
)

(
)

(
)

(
)

(
)

(
)

B6
(
)

(
)

(
)

(
)

(
)

'

(
)
&

(
)

'

(
)














































B5

&

&

'

'

'

&

&

&

&




$
%

&

B3

P1

'























































$
%

P2
P3

(c)

Figure 15: small example. A1 plays role. fill pattern batch represents
product. (a) shows initial state, (b) shows state (a) push operation
B3 inserted segment, (c) shows state (b) pop operation B6
inserted segment.
Apart pipe segment batch inserted, push pop actions
take several parameters regarding, e.g., product types tank slots. particular, order
able update segment contents correctly, actions need parameters giving
respective first, last, second last batch current contents segment. Thus
action four parameters ranging batches, yielding least n4 ground instances action
n (unitary) batches considered task. found made domain
509

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

completely infeasible planning system grounded actions. Since many unitary
batches needed encode even relatively small Pipesworld examples, planners typically
died pre-processing phase already.31 avoided phenomenon splitting actions
two parts, start action taking batch parameters inserted batch first batch
pipe, end action taking batch parameters last second last batches
pipe. make concrete, split push action:
(:action PUSH-START
:parameters
(?pipe - pipe ?batch-atom-in - batch-atom ?from-area - area ?to-area - area
?first-batch-atom - batch-atom ?product-batch-atom-in - product
?product-first-batch - product)
:precondition
(and (normal ?pipe) (first ?first-batch-atom ?pipe) (connect ?from-area ?to-area ?pipe)
(on ?batch-atom-in ?from-area) (not-unitary ?pipe)
(is-product ?batch-atom-in ?product-batch-atom-in)
(is-product ?first-batch-atom ?product-first-batch)
(may-interface ?product-batch-atom-in ?product-first-batch))
:effect
(and (push-updating ?pipe) (not (normal ?pipe)) (first ?batch-atom-in ?pipe)
(not (first ?first-batch-atom ?pipe)) (follow ?first-batch-atom ?batch-atom-in)
(not (on ?batch-atom-in ?from-area))))
(:action PUSH-END
:parameters
(?pipe - pipe ?from-area - area ?to-area - area ?last-batch-atom - batch-atom
?next-last-batch-atom - batch-atom)
:precondition
(and (push-updating ?pipe) (last ?last-batch-atom ?pipe) (connect ?from-area ?to-area ?pipe)
(not-unitary ?pipe) (follow ?last-batch-atom ?next-last-batch-atom))
:effect
(and (not (push-updating ?pipe)) (normal ?pipe)
(not (follow ?last-batch-atom ?next-last-batch-atom))
(last ?next-last-batch-atom ?pipe) (not (last ?last-batch-atom ?pipe))
(on ?last-batch-atom ?to-area)))

constructs largely self-explanatory. static predicates used are: connect,
encoding topology network; is-product, encoding types liquid; may-interface,
encoding interface restrictions;32 not-unitary, saying whether pipe segment contains
one batch case push pop actions much simpler need
split (the first last elements pipe identical). predicates normal pushupdating ensure, obvious way, two parts split action used
intended. Finally, on, first, follow, last encode relevant batches are.
role clear, encodes locatedness areas. pipe contents,
modelled queue-like fashion, head first, tail last, successor function follow.
two parts push action update representation accordingly.
31. Matters may easier planning systems ground actions pre-process. didnt affect
design decision since large majority systems around time IPC-4 employ pre-process.
32. Note model interface loss products may interface.

510

fiE NGINEERING B ENCHMARKS



P LANNING

encode uni-directional pipe segments, i.e. segments push pop
actions available IPC-4 encodings. modeled tankage restrictions simple constructs involving tank slots located areas, slot capacity store one unitary batch
given product type is, push pop actions specify tank slot
inserted/outgoing batch comes from/is inserted into. simple examples regarding interface
tankage restrictions, re-consider Figure 15. storage capacity P2 A2 equal zero,
transition state (a) state (b) becomes invalid. forbid interface P1
P3 , transition state (b) state (c) becomes invalid.
Pipe segment speed easily taken account (in durational PDDL). speed
segment s, simply assign push/pop actions regarding segment duration proportional 1s . (In IPC-4 encoding, start/end action takes exactly time,
non-split actions regarding length-1 segments take time 2s .)
reality, outlined goals refer amounts product requested certain
destination areas. encoding based batches, formulating goal would mean introduce potentially large disjunction conjunctive goals. one wants say, e.g., three unitary batches product P requested area A, needed goal condition disjunction
W
{b1 ,b2 ,b3 }B (atb1 A) (atb2 A) (atb3 A) respective conjunctive goal three-subsets
{b1 , b2 , b3 } batches B type P . avoid exponential blow-ups kind, encoding
used personalized goals instead, referring specific batches instead product amounts. Basically, comes pre-selecting one {b1 , b2 , b3 } subsets disjunction.33
One could avoid blow-up replacing disjunction existential quantification;
step would undone compilation STRIPS anyway.
Deadlines arrival batches are, durational PDDL, easily modeled compilation
timed initial literals. goal deadline literal saying respective batch
still ejected end pipe segment. literal initially true, becomes false
time deadline. described above, application pre-specified time
points area produces consumes given amount product. model
IPC-4 domain (see Section A.2.5).
mentioned above, structure Pipesworld domain lead several subtle phenomena possible plans. example plans perform cyclic sequence pumping
operations depicted Figure 16. goal place B8 A3. shortest plan following (for readability, action parameters batches going pipes
shown): 0: PUSH S1,4 B8 B2, 1: POP S2,4 B2 B3, 2: POP S1,2 B3 B1, 3: PUSH S1,4 B1 B8, 4:
PUSH S4,3 B8 B7, 5: POP S2,3 B7 B4, 6: PUSH S2,4 B4 B2, 7: PUSH S4,3 B2 B8. Observe
plan contains two cyclic patterns. Action 0 inserts B8 S14. Actions 1, 2, 3 form
cycle {S2,4 , S1,2 , S1,4 } brings B8 A4. Thereafter, action 4 inserts B8 S43, actions
5, 6, 7 form another cycle {S2,3 , S2,4 , S4,3 } bringing B8 goal position A3.34
33. Note bad choice {b1 , b2 , b3 } make task harder solve. are, however, currently investigating computational complexity different variants Pipesworld, preliminary results suggest
allowing/disallowing personalized goals affect complexity.
34. Note need cyclic patterns oddity introduced encoding. something may (but
probably likely to) happen reality: example, becomes necessary isnt enough liquid
origin area (here, A1 A4) push needed amount liquid (here, B8) destination.

511

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

A2
S1,2
B1
A1

B4
S2,4 B3

B8

S2,3
B5
B6

B2
S1,4
A4

B7

A3

S4,3

Figure 16: example cycling required achieve goal (place B8 A3). Pipe segment
Si, j directed Ai Aj.
version
notankage-nontemporal
notankage-temporal
notankage-temporal-d
notankage-temporal-dc
tankage-nontemporal
tankage-temporal

formulation
STRIPS
STRIPS
STRIPS
STRIPS
STRIPS
STRIPS

max-#op
6
6
6
9
6
6

max-#act
(14800) 13696
(14800) 13696
(8172) 7740
(8175) 7742
(107120) 101192
(107120) 101192

Table 2: Overview different domain versions Pipesworld. Abbreviations used:
temporal-d temporal-deadlines, temporal-dc deadlines-compiled; max-#op
maximum number (parameterized) PDDL operators instance, max-#act
maximum number ground actions instance. Data parentheses collected FFs reachability pre-process (see text).

A.2.3 IPC-4 OMAIN TRUCTURE
Pipesworld domain versions used IPC-4 notankage-nontemporal, tankage-nontemporal,
notankage-temporal, tankage-temporal, notankage-temporal-deadlines, notankage-temporaldeadlines-compiled. versions include interface restrictions. versions tankage
name include tankage restrictions. versions temporal name, actions take
different amounts time depending pipeline segment moved, explained
above. versions deadlines name include deadlines arrival goal
batches. One versions models deadlines using timed initial literals, version
(naturally, compiled name) literals compiled artificial (temporal) PDDL
constructs. None encodings uses ADL constructs, version one
(STRIPS) formulation.
domain versions numbers ground actions overviewed Table 2. before,
data measured using (a temporal extension of) FFs pre-processor. numbers shown

512

fiE NGINEERING B ENCHMARKS



P LANNING

parentheses refer situation pre-processors reachability pre-process,
builds relaxed planning graph initial state removes actions appear
graph. observe numbers ground actions low domain versions
deadlines, extremely high versions tankage restrictions. former simply
because, due complicated generation process (explained next sub-section), examples
deadlines generated smaller size. latter high numbers actions
presence tankage restriction due additional blow-up incurred choice tank
slots draw/in put batches. note effect reachability
pruning relatively moderate, particular much lower than, e.g., Airport, c.f. Section A.1.3.
A.2.4 IPC-4 E XAMPLE NSTANCES
Pipesworld example instances generated Frederico Liporace, process going
random generators XML files PDDL files.35 Five scaling network topologies designed
used basis instance generation. Figure 17 shows network topologies, well
real-world network topology comparison. one see, largest network topology
used IPC-4 quite yet ballpark real network; neither trivially
small comparison. volumes pipeline segments connect areas realworld example necessarily segments may different cross section
diameters.
domain versions without tankage restrictions deadlines, network
topologies 10 scaling random instances generated. Within network, instances scaled
terms total number batches number batches goal location.
instances featuring tankage restrictions deadlines, generation process complicated
wanted make sure obtain solvable instances. tankage restriction examples, ran Mips (Edelkamp, 2003b) respective notankage instances, incrementally
growing tankage.36 chose instance random point first instance solved
Mips, maximum needed tankage (enough tankage area accommodate instance
batches). instances could solved Mips even given several days runtime,
inserted maximum tankage. deadline examples, ran Mips
corresponding instances without deadlines, arranged deadline goal batch random point interval arrival time batch Mipss plan, end time
Mipss plan. instances solved Mips left out.
A.2.5 C URRENT



F UTURE W ORK

ongoing work developing Pipesworld specific solver, named Plumber (Milidiu & dos
Santos Liporace, 2004a; Milidiu & dos Santos Liporace, 2004b). Plumber incorporates pipeline
simulator, domain specific heuristics, procedures reducing branching factor symmetry
elimination. lets user choose different search strategies, enforced hill
climbing (Hoffmann & Nebel, 2001) learning real time A*(Korf, 1990). Currently
extended support temporal planning well.
35. XML file mapped different PDDL files depending kind encoding used; lot
trial error came final IPC-4 encoding.
36. Mips convenient choice since one planners, deal temporal constructs.

513

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

A1

A1

S1
,2

1

1

,3
S1

S1
,2

,3
S1

1

A3
A2

Network 1

2

A2

Network 2

A3

2

1

,3
S1

S1
,2

A1

S3,4
A3

A2

A4
Network 3

1

46

233

A1

1

425

2

S2,3

94

S3,4
A3

A2

53

138

BA1

,2

2

S1

UT13

RC5

12

2

1

35
13

,3

S1

TB12

4

S3,4
A4

10

Network 5
BA1

3

SZ11

57

A5

A3

A2

RD6

215

41

GU3

47

S1,5
A1

375

30

Network 4

1

RV8

43

A4

3

S2,3

83

GA2

,3
S1

S1
,2

RP7

1

10
17
6

(a)

31

20

3
3

SB9

3

RB4

2

(b)

Figure 17: IPC-4 Pipesworld network topologies (a), real network topology (b).
segment volumes latter annotated 100m3 units.

availability solver enable extension Pipesworld benchmark, since
easier overcome aforementioned difficulties generating large feasible instances.
hope able generate feasible instances real-world pipeline topologies, one shown
Figure 17.
addition generating larger instances, Pipesworld benchmark may extended many
ways make closer real application scenario. relevant possible extensions include:
Defining pipeline segments single flow direction, is, segments
push pop actions allowed. Note introduces dead ends/critical choices
problem.
Un-personalized goals. could accomplished, e.g., imposing desired tank volume goal products respective areas. planner decide
batches used bring tank volume desired level.
Modeling production consumption products pre-specified points time, described above.

514

fiE NGINEERING B ENCHMARKS



P LANNING

Using rational numbers model tank capacities current volumes, instead encoding
based unitary tank slots. Apart precise model real world (when
combined rational-valued batch sizes, see below), encoding would avoid unnecessary symmetries currently arise availability several non-distinguishable
tank slots (in area, product).
important shortcoming encoding use unitary batches. would much
appropriate base encoding product amounts given real numbers. One problematic
aspect encoding would, naturally, demand continuous choice
much liquid pump pipeline. Airport (c.f. Section A.1.5), choice could
naturally modelled using Fox Longs (2003) duration inequalities, unclear
develop planners deal reasonably well. Unlike Airport, implementing
choice end difficulties modelling side. model continuous
contents pipeline? number distinct regions liquid pipeline grow arbitrarily
high, principle. One solution might fix upper bound, simply disallow pumping
operation would result many distinct regions. may bearable loss precision,
given upper bound high enough. even then, bound awkward correctly update
contents pipeline amount x product pushed in: number different
products leaving pipe depends x. option may use complicated construct
conditional effects.
all, impression pipeline scheduling wont realistically modelled PDDL,
successfully solved planners, unless one introduces language data structure
suitable modelling contents pipes. Basically, would queues whose elements
annotated real numbers, whose basic operations usual push pop.
semantics pipes could explicitly computed inside planner, rather awkwardly
modelled using language constructs likely disturb general search mechanism.
A.3 Promela
domain created IPC-4 Stefan Edelkamp.
A.3.1 PPLICATION OMAIN
dropping Promela domain, briefly recall origin.
model checker SPIN (Holzmann, 2003) targets efficient software verification.
used trace logical design errors distributed systems design, operating systems, data
communications protocols, switching systems, concurrent algorithms, railway signaling protocols,
etc. tool checks logical consistency specification. SPIN reports deadlocks, unspecified receptions identifies race conditions, unwarranted assumptions relative speeds
processes. SPIN (starting Version 4) provides support use embedded C code
part model specifications. makes possible directly verify implementation level software
specifications, using SPIN driver logic engine verify high level temporal properties. SPIN works on-the-fly, means avoids need construct global state graph
prerequisite verification system properties. SPIN supports property checking linear temporal logic (LTL). LTL expresses state trajectory constraints, using temporal modalities

515

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

eventually, always, until37 . SPIN uses specific mechanisms specifying deadlock-freeness
safety properties, addition general LTL specifications. explore state space
ordinary nested search algorithm applied, depending whether state-based (a.k.a.
safety) property verified.
Promela SPINs input specification language. computational model asynchronous
communicating finite state machines. Promela allows define classes finite processes. special
process called init started first usually governs instantiation processes
system. possible process invoke another one, Promela allows modeling systems
dynamic creation state components. Communication Promela achieved via shared variables
message channels. Two kind message channels distinguished synchronous asynchronous communication. asynchronous channel basically FIFO queue, synchronous
channels imply rendezvous communication transition system involves two processes, one reading message channel another sending message it. Here,
consider asynchronous communication. body process class basically sequence
statements. statement interpreted transition process. Typical statements include assignments, numerical boolean expressions channel operations. Promela allows
define atomic regions, whose sequence transitions treated atomic
action. interpreted weighted transitions whose costs number steps within
regions.38
IPC-4, used two example communication protocols formulated Promela: Dijkstras
Dining Philosophers problem, so-called Optical Telegraph protocol. briefly describe
latter protocol Section A.3.4. illustrate Promela language, let us consider Dining
Philosophers problem, n philosophers sit around table lunch. n plates,
one philosopher, n forks located left right plate. Since two
forks required eat spaghetti plates, philosopher eat time. Moreover,
communication except taking releasing forks allowed. task devise local
strategy philosopher lets philosophers eventually eat. simplest solution
access left fork followed right one, obvious problem. philosophers wait
second fork released possible progress; deadlock occurred.
difficult probably insightful derive bottom-up PDDL encoding Dining
Philosophers domain, using actions eat, wait think. motivation, however, come
top-down encoding, starting Promela specification, automatically translating
PDDL.
deadlock model Dining Philosophers specified Promela shown Figure 18.
first lines define macros declare array N boolean variables represent
availability forks. following lines define behavior process type philosopher.
process iterates indefinitely endless loop (do) one unique entry marked symbol
::. Statements separated semicolon. first transition left!fork consists send
operation tag fork channel left, macro address forks current
process id pid. represents availability left fork philosopher. access transition left?fork executed reading tag fork channel left successful.
37. Note fragments LTL likely included PDDL language next international planning
competition (Gerevini & Long, 2005)
38. documentation Promela specification language found web site SPIN
http://netlib.bell-labs.com/netlib/spin/whatispin.html

516

fiE NGINEERING B ENCHMARKS



P LANNING

#define MAX PHILOSOPHERS N
mtype=fork
#define left forks[ pid]
#define right forks[( pid+1) % MAX PHILOSOPHERS]
chan forks[MAX PHILOSOPHERS] = [1] bit;
active [MAX PHILOSOPHERS] proctype philosopher()
{
left!fork;

::left?fork -> /* try get left fork */
right?fork; /* try get right fork */
/* eat... */
left!fork; right!fork /* release forks */
/* meditation... */
od
}
Figure 18: Promela specification model Dining Philosophers problem.
next transition right?fork similar first, last two ones sends tag fork back
channels left right.
A.3.2 IPC-4 PDDL DAPTATION
Model Checking Action Planning closely related, c.f. Section 3. model checker
searches counterexample form sequence transitions falsify given specification, planner searches sequence actions satisfies given goal. cases,
basic models (STRIPS Planning, Kripke structures), refer implicit graphs, nodes
annotated atomic propositions.
automatically generating PDDL model Promela syntax wrote compiler (Edelkamp, 2003a). restricted safety properties, especially deadlocks, assertions
global invariances difficult obtain. concentrated models fixed number processes, since models communication protocols adhere restriction.39
compiler parse Promela code itself, takes input intermediate
representation problem generated SPIN validation tool40 . Figure 19 shows
textual automata representation philosopher process. case, value N
initialized 10 philosophers. file contains almost necessary information
39. dynamic creation processes PDDL would require language extension dynamic object creation.
extension dismissed since would involve heavy changes existing planner technology, relevance
(beyond Promela) unclear.
40. precisely, Promela input file taken, corresponding c-file generated, verifier compiled
executable run option -d.

517

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

translation, number processes queues (i.e., message channels) well queue capacities read original Promela input file41 .
proctype philosopher
state 1 -(trans 3)-> state 6 line 11 => forks[ pid]!fork
state 6 -(trans 4)-> state 3 line 12 => forks[ pid]?fork
state 3 -(trans 5)-> state 4 line 14 => forks[(( pid+1)%10)]?fork
state 4 -(trans 3)-> state 5 line 16 => forks[ pid]!fork
state 5 -(tras 6)-> state 6 line 16 => forks[(( pid+1)%10)]!fork
Figure 19: Automata representation model 10 Dining Philosophers problem.
derive suitable PDDL encoding domain, process represented finite state
automata. Hence, propositional encoding simulates automaton. propositional atoms
true initial state one process running example problem shown Figure 20 (a)42 .

(is-a-process philosopher-0 philosopher)
(at-process philosopher-0 state-1)
(trans philosopher trans-3 state-1 state-6)
(trans philosopher trans-4 state-6 state-3)
(trans philosopher trans-5 state-3 state-4)
(trans philosopher trans-3 state-4 state-5)
(trans philosopher trans-6 state-5 state-6)

(is-a-queue forks-0 queue-1)
(queue-head forks-0 qs-0)
(queue-tail forks-0 qs-0)
(queue-next queue-1 qs-0 qs-0)
(queue-head-msg forks-0 empty)
(queue-size forks-0 zero)
(settled forks-0)

(a)

(b)

(writes philosopher-0 forks-0 trans-3) (trans-msg trans-3 fork)
(reads philosopher-0 forks-0 trans-4) (trans-msg trans-4 fork)
(reads philosopher-0 forks-1 trans-5) (trans-msg trans-5 fork)
(writes philosopher-0 forks-1 trans-6) (trans-msg trans-6 fork)
(c)
Figure 20: Propositional encoding one philosophers process (a), Propositional encoding
(single-cell) communication channel (b), Connecting communication local state transitions (c).
encoding communication structure represents channels graphs. PDDL encoding additionally exploits cyclic embedding queue array. formally, (FIFO)
channel Q represented structure GQ = (SQ , headQ , tailQ , Q , messQ ,contQ ), SQ
set queue cells, headQ , tailQ SQ head tail cells Q, messQ M|SQ |
41. avoid conflicts pre-compiler directives, first invoked c-compiler command line option -E,
executes pre-compiler.
42. use transition IDs, competition less accessible textual representation label chosen.

518

fiE NGINEERING B ENCHMARKS



P LANNING

vector messages Q (M set messages), contQ IR|SQ | vector
variable values Q Q : SQ SQ successor relation Q; SQ = s[1], . . . , s[k]
(s[i]) = s[(i + 1) mod k]. Explicitly modeling head tail positions queue trades
space time, since queue updates reduce constant time.
queue either empty (or full) pointers refer queue state. special case,
simple queues (as example) may consist one queue state, successor bucket
queue state 0 queue state 0 itself. case grounded propositional encoding includes
operators add delete lists share atom. make standard assumption
deletion done first. propositional atoms one queue adaption two queues
one process exemplified Figure 20 (b) (c).
Queue content, shared local variables modeled PDDL fluents. difference
local variables compared shared ones restricted visibility scope, local variables
prefixed process appear in. two benchmark protocols selected IPC-4 rely
pure message passing, numerical state variables involved. allowed us
supply propositional model problems.
(:action activate-trans
:parameters (?p - process ?pt - proctype ?t - transition ?s1 ?s2 - state)
:precondition (and (forall (?q - queue) (settled ?q)) (trans ?pt ?t ?s1 ?s2)
(is-a-process ?p ?pt) (at-process ?p ?s1) (pending ?p))
:effect (and (activate ?p ?t) (not (pending ?p)))))
Figure 21: Testing transition enabled activating it.
PDDL domain encoding uses seven operators, named activate-trans, queue-read,
queue-write, advance-queue-head, advance-empty-queue-tail, advance-non-empty-queue-tail,
process-trans. activation process shown Figure 21. see pending process
activated, queues settled transition matches current process state.
Briefly, operators encode protocol semantics follows. Operator activate-trans activates
transition process given type local state s1 s2 . operator sets predicate
activate. boolean flag precondition queue-read queue-write actions, set
propositions initialize reading/writing message. queue Q activated transition
querying message m, corresponds Promela expression Q?m, respectively Q!m.
read/write operation initialized, queue update operators must applied, i.e. advancequeue-head, advance-empty-queue-tail, advance-non-empty-queue-tail appropriate.
names indicate, operators respectively update head tail positions, needed
implement requested read/write operation. operators set settled flag,
precondition every queue access action. Action process-trans applied. executes
transition local state s1 s2 , i.e. sets new local process state re-sets flags.
stored message match query, queue capacity either small
large, active local state transition block. active transitions process block,
process block. processes blocked, deadlock system. Detection
deadlocks implemented, different domain versions, either collection specifically
engineered actions or, elegantly, set derived predicates. cases one infer,
along lines argumentation outlined above, process/the entire system blocked.
519

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

(:derived (blocked-trans ?p - process ?t - transition)
(exists (?q - queue)
(exists (?m - message)
(exists (?n - number)
(and (activate ?p ?t) (reads ?p ?q ?t) (settled ?q)
(trans-msg ?t ?m) (queue-size ?q ?n) (is-zero ?n))))))
(:derived (blocked ?p - process)
(exists (?s - state)
(exists (?pt - proctype)
(and (at-process ?p ?s) (is-a-process ?p ?pt)
(forall (?t - transition)
(or (blocked-trans ?p ?t) (forall (?s2 - state) (not (trans ?pt ?t ?s ?s2)))))))))

Figure 22: Derivation deadlock.
goal condition makes planners detect deadlocks protocols simply conjunction
atoms requiring processes blocked. example derivation rules derived
predicates, PDDL description derivation deadlock based blocked read accesses
shown Figure 22.
A.3.3 IPC-4 OMAIN TRUCTURE
two benchmark protocols IPC-4, created three different domain versions:
derivedpredicates, contains derived predicates infer deadlocks; plain, purely propositional specification specific actions applied establish deadlock (the later
actions basically Gazen Knoblock (1997) compilation derived predicates, c.f. Section 2); fluents alternative latter numerical state variables encodes size
queues messages used access contents. made version called fluentsderivedpredicates, obvious combination, none IPC-4 competitors participated there,
omit herein. Within domain version, one formulation includes ADL
constructs quantification, disjunctive preconditions, negated preconditions. domain
versions without fluents, another formulation pure STRIPS, obtained respective ADL
encodings using adl2strips compiler (which handle numeric variables). Unfortunately,
larger problem instances lead STRIPS files big stored disk
(remember adl2strips grounds operator parameters). too-large instances were,
course, left respective test suites.
kept fluent-domains separated domain versions, rather domain version formulations,
order able compare propositional numerical exploration efficiencies, emphasize
fluent variables essential real-world model checking treated separately.
domain versions numbers operators ground actions overviewed Table 3.
Consider rows table top bottom. before, times parentheses values
FFs reachability pre-process, builds relaxed planning graph initial state
removes actions appear graph. STRIPS formulation fully grounded
using adl2strips program, derived FFs pre-processor (c.f. Section 2).

520

fiE NGINEERING B ENCHMARKS

version
optical-telegraph
optical-telegraph
optical-telegraph-dp
optical-telegraph-dp
optical-telegraph-fluents
philosophers
philosophers
philosophers-dp
philosophers-dp
philosophers-fluents

formulation
STRIPS
ADL
STRIPS DP
ADL DP
ADL
STRIPS
ADL
STRIPS DP
ADL DP
ADL



P LANNING

max-#op
3345
11
4014
11
11
840
11
1372
11
11

max-#act
(3345) 3345
(5070) 3345
(4014) 4014
(6084) 4014
(1337) 1169
(840) 840
(930) 840
(1372) 1372
(1519) 1372
(930) 930

Table 3: Overview different domain versions Promela. Abbreviations used: dp derived predicates; max-#op maximum number (parameterized) PDDL operators
instance, max-#act maximum number ground actions instance.
Data parentheses collected FFs reachability pre-process (see text). Derivation rules (ground derivation rules) counted operators (ground actions).

reason number operators number ground actions, FFs preprocess identical one run adl2strips effect. ADL formulation, see
reachability pruning reduces number actions factor almost 2, similar Airport
domain (c.f. Section A.1.3). picture next two domain versions, derived predicates,
similar. fact, since, consistently data Section 5, count derivation rules
actions, data identical. reason identical Table 3 that, using derived
predicates instead operators, FFs pre-processor scales larger instances (presumably, due
unimportant implementation detail). next domain version, formulated numeric
variables, FFs pre-processor scales even worse. However, even instances number
telegraphs, less ground actions before, due different encoding.
observations made Dining Philosophers exactly same, different numbers.
notable difference effect FFs reachability pruning weaker, yielding
slight decrease number actions versions without fluents, decrease
version fluents. Apparently, complex process structure Optical Telegraph leads
useless action instances.
A.3.4 IPC-4 E XAMPLE NSTANCES
said, selected two simple communication protocols benchmarks IPC-4: encoding Dining Philosopher problem described above, so-called Optical Telegraph
protocol (Holzmann, 1990).
Optical Telegraph protocol involves n pairs communicating processes, pair featuring process. pair go fairly long, heavily interactive,
sequence operations, implementing possible data exchange two stations.
data exchanged, various initializing steps must taken ensure processes working
synchronously. importantly, process writes token control channel (queue)
521

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

beginning sequence, reads token end. causes deadlock
situation n control channels, accessed two processes.
every pair up/down processes occupied one control channel, overall system
blocked.
Dining Philosopher Optical Telegraph benchmark, instances scale via
single parameter, number philosophers number control stations, respectively.
scaled parameter 2 49 competition instances. Promela models benchmarks distributed together experimental model checking tool HSF-SPIN (Edelkamp,
Leue, & Lluch-Lafuente, 2004), extends SPIN heuristic search strategies improve error
detection.
A.3.5 F UTURE W ORK
general terms, see Promela planning benchmark another important step towards exploiting synergies research areas Planning Model Checking (Giunchiglia & Traverso,
1999). example, complement recent progress planning, explicit directed model checking
domain protocol validation (Edelkamp et al., 2004) symbolic directed model checking
domain hardware validation (Reffel & Edelkamp, 1999) led drastic improvements
state-of-the-art model checkers. work, e.g., (Yang & Dill, 1998; Bloem, Ravi,
& Somenzi, 2000), show model checking growing interest guided exploration,
mostly find errors faster blind state space enumeration algorithms. compilation
Promela domain model, alternative option applying heuristic search model checking
problems available. work needed understand planning heuristics work fail
model checking benchmarks.
strongly believe communities profit wide-spread availability techniques represent Model Checking problems PDDL. allows direct comparison exploration efficiencies. Based design Promela domain, suitable PDDL domain encodings
two expressive model checking input languages, Graph Transformation Systems (Edelkamp,
Jabbar, & Lluch-Lafuente, 2005) Petri Nets (Edelkamp & Jabbar, 2005), proposed.
encodings exploit expressive power PDDL well efficiency current planners.
result, state-of-the-art planners often faster compared model checkers benchmarks.
A.4 PSR
Sylvie Thiebaux others worked application domain. domain adapted
IPC-4 Sylvie Thiebaux Jorg Hoffmann.
A.4.1 PPLICATION OMAIN
Power Supply Restoration (PSR) domain consider derived application investigated Sylvie Thiebaux others (Thiebaux et al., 1996; Thiebaux & Cordier, 2001). PSR
deals reconfiguring faulty power distribution system resupply customers affected
faults. topic ongoing interest field power distribution.
detail, power distribution system (see Figure 23), viewed network electric lines connected switches fed via number power sources equipped
circuit-breakers. Switches circuit-breakers two possible positions, open closed,
522

fiE NGINEERING B ENCHMARKS



P LANNING

Figure 23: Sample power distribution system. Sources/circuit-breakers (e.g., CB4) represented
large squares, switches (e.g., SD3) small squares. Open switches (e.g., SD8)
white. area fed CB4 boxed. Gray dark used distinguish adjacent
areas fed different sources

connected two lines. restriction connectivity lines, extremities
connected earth. circuit-breaker power source closed,
power flows source lines downstream, flow stopped open switch.
switches used appropriately configure network position initially set
line fed exactly one source.
Due bad weather conditions, permanent faults affect one lines network.
power source feeds faulty line, circuit-breaker fitted source opens protect
rest network overloads. leaves lines fed source without power.
problem consists planning sequence switching operations (opening closing switches
circuit-breakers) bringing network configuration maximum non-faulty lines
resupplied. instance, suppose line l20 becomes faulty. leads circuit-breaker
CB4 open boxed area without power. possible restoration plan would
following: open switches SD16 SD17 isolate faulty line, close SD15 source
CB7 resupply l19, finally re-close CB4 resupply others.
original PSR problem (Thiebaux & Cordier, 2001), maximal capacity sources
lines, well load requested customers taken account. plan must optimize
various numerical parameters breakdown costs, power margins, distance initial
configuration, subject capacity constraints. Furthermore, due fault sensors switches
unreliable, location faults current network configuration partially
observable. optimizing, leads complex tradeoff acting resupply lines
acting (intrusively) reduce uncertainty.

523

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

A.4.2 IPC-4 PDDL DAPTATION
PDDL adaptation, benefited contributions Piergiorgio Bertoli, Blai Bonet, Alessandro Cimatti, John Slaney (Bertoli et al., 2002; Bonet & Thiebaux, 2003). Compared
original PSR domain described above, IPC-4 version underwent 3 major adaptations. Firstly,
IPC deals fully observable domains. Hence, partial observability PSR crucial
issue (Thiebaux et al., 1996; Bertoli et al., 2002; Bonet & Thiebaux, 2003), IPC version assumes
complete observability. Secondly, given difficulty encoding even basic problem, chose
ignore numerical optimization aspects PSR (capacities, power margins, . . . ). Thirdly,
IPC-4 version set pure goal-achievement problem, goal specifies set
lines must (re)-supplied. considered realistic goal asking planner supply
line be. However, unable compile goal STRIPS reasonable
space, opted simpler goal keep STRIPS formulation consistent possible
others.
highest level natural IPC-4 encoding PSR involves ADL constructs derived
predicates. Briefly, encoding works follows. PSR problem instances specify (1) network
topology, i.e., objects network connections (the lines, switching devices,
is, switches sources/circuit-breakers, two side constants side1 side2 denote
two connection points switching device, connection relations objects),
(2) initial configuration, i.e., initial positions (open/closed) switching devices, (3)
modes (faulty not) various lines. Among those, devices positions change.
number predicates derived basic ones. model propagation
current network view determining lines currently fed sources
affected fault, i.e. feed fault. closed-world assumption semantics PDDL2.2
derived predicates exactly needed elegantly encode relations. require
recursive traversal network paths naturally represented transitive closure
connection relation network. complex derived predicates, upstream,
requires four parameters, two which, however take two possible values, expresses
power flows one two sides device (side ?sx device ?x) one
sides another (side ?sy device ?y) happens side ?x opposite ?sx
directly connected ?sy (via line), exists closed device ?z one side
upstream ?sx side connected ?sy:
(:derived (upstream ?x - DEVICE ?sx - SIDE ?y - DEVICE ?sy - SIDE)
(and (closed ?x)
(or (and (= ?sx side1) (con ?x side2 ?y ?sy))
(and (= ?sx side2) (con ?x side1 ?y ?sy))
(exists (?z - DEVICE)
(and (closed ?z)
(or (and (con ?z side1 ?y ?sy) (upstream ?x ?sx ?z side2))
(and (con ?z side2 ?y ?sy) (upstream ?x ?sx ?z side1))))))))
upstream, relatively easy define predicates stating whether given line fed given
source affected.

524

fiE NGINEERING B ENCHMARKS



P LANNING

goal problem instance asks given lines fed sources unaffected.43
available actions closing opening switching device. effect simply set
device position requested. addition, action wait, models event circuitbreakers opening become affected. Wait applicable affected source exists,
applicable action case (the open close actions require precondition
source affected). This, together goal, ensures wait action applied
soon source affected. effect wait action open affected circuit-breakers.
Concretely, wait close actions follows (note open similar close earth
treated device whose position cannot changed actions):
(:action close
:parameters (?x - DEVICE)
:precondition (and (not (= ?x earth))
(not (closed ?x))
(forall (?b - DEVICE) (not (affected ?b))))
:effect (closed ?x))
(:action wait
:parameters ()
:precondition (exists (?b - DEVICE) (affected ?b))
:effect (forall (?b - DEVICE) (when (affected ?b) (not (closed ?b)))))
would possible encode opening affected breakers conditional effect
close action. However, would required complex derived predicates additional
device parameter conditional flavor, specifying, e.g., whether circuit-breaker would
affected close device.
A.4.3 IPC-4 OMAIN TRUCTURE
used four domain versions PSR IPC-4. Primarily, versions differ size
problem instances encoded. instance size determined languages able
formulate domain version. tried generate instances size appropriate evaluate
current planners, i.e, scaled instances push-over everybody impossibly hard
current automated planners, got intuitions running version enhanced
deal derived predicates. largest instances kind size one typically encounters
real world. instance generation process said Section A.4.4.
domain versions named 1. large, 2. middle, 3. middle-compiled, 4. small.
Version 1 single formulation adl-derivedpredicates. Version 2 formulations adlderivedpredicates, simpleadl-derivedpredicates, strips-derivedpredicates. Version 3
single formulation adl, version 4 single formulation strips. formulation names simply give language used. Version 1 contains largest instances, versions 2 3 contain (the
same) medium instances, version 4 contains smallest instances. adl-derivedpredicates
43. Note circuit-breaker affected source opens, source affected more, feed
line. Then, circuit-breaker closed again, source stay unaffected unless re-starts feeding faulty
line.

525

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

version
large
middle
middle
middle
middle-compiled
small

formulation
ADL DP
ADL DP
SIMPLE-ADL DP
STRIPS DP
ADL
STRIPS

max-#op
7
7
3485
3560
5
9400

max-#act
(14038) 7498
(7055) 3302
(3485) 3485
(3560) 3560
(99) 71
(9400) 9400

Table 4: Overview different domain versions formulations PSR. Abbreviations used:
dp derived predicates; max-#op maximum number (parameterized) PDDL
operators instance, max-#act maximum number ground actions
instance. Data parentheses collected FFs reachability pre-process (see
text). Derivation rules (ground derivation rules) counted operators (ground actions).

formulation inspired Bonet Thiebaux (2003); makes use derived predicates explained above, ADL constructs derived predicate, action, goal definitions.
simpleadl-derivedpredicates strips-derivedpredicates formulations, ADL constructs (except
conditional effects simpleadl case) compiled away. resulting fully grounded encodings significantly larger original, hand length plans remains
nearly unaffected44 . pure adl formulation obtained adl-derivedpredicates formulation compiling derived predicates away, using method described Thiebaux et al. (2003,
2005). significant increase domain size, compilation method lead
increase plan length exponential arity derived predicates (no compilation
method avoid blow-up worst case, see Thiebaux et al., 2003, 2005). Indeed,
particular PSR example instances, observed considerable blow plan length. felt
blow much allow useful direct comparison data generated adlderivedpredicates opposed adl, separated adl formulation domain version
3 listed above.
strips domain formulation proved quite challenge. 20 schemes considered compiling derived predicates ADL constructs away led either completely
unmanageable domain descriptions completely unmanageable plans. problem feasible compilations derived predicates create new actions highly conditional effects,
compiling away impractical. therefore adopted different fully-grounded encoding inspired Bertoli et al. (2002). encoding generated description problem instance
tool performing reasoning power propagation. resulting tasks, effects
close actions directly specify circuit-breakers open result closing switch given
network configuration. derived predicates needed, consequently STRIPS encoding
much simpler refers positions devices lines, faults, connections. Nevertheless, still able formulate comparatively small instances STRIPS,
without prohibitive blow-up encoding size.
44. variation due fact existential precondition wait action causes compilation split
action many wait actions circuit-breakers

526

fiE NGINEERING B ENCHMARKS



P LANNING

domain versions, formulations, respective numbers operators ground actions, shown Figure 4. Data parentheses collected FFs reachability preprocess, building relaxed planning graph initial state removing actions
appear graph. encodings using ADL derived predicates, reduces number ground actions factor around 2; ADL, factor much smaller;
encodings, reduction obtained, simply due fact encodings obtained adl2strips, uses pruning process. interesting observations
made middle versions formulations. data shown correspond largest
instance FFs pre-processor could handle versions/formulations, enable direct comparison. see that, formulation SIMPLE-ADL STRIPS, need introduce
ground actions. see that, curiously, compilation derived predicates (compilation
middle-compiled), number ground actions decreases dramatically. reason lies
data count ground derivation rules ground actions, subtleties compilation derived predicates. middle formulations, almost ground actions fact
ground derivation rules. compiled away middle-compiled following Thiebaux et al.
(2003, 2005), introducing single action one distinct conditional effect derivation rule, c.f. Section 2. means complexity thousands derivation rules
replaced complexity action thousands conditional effects.
A.4.4 IPC-4 E XAMPLE NSTANCES
Due contractual agreements, unable use real data competition. Instead, PSR
instances randomly generated using randomnet, special purpose tool implemented John
Slaney.
Power distribution networks often mesh-able structure exploited radially: path taken
power source forms tree whose nodes switches whose arcs electric
lines; terminal switches connect various trees together. Randomnet takes input number
sources, percentage faulty lines, range parameters controlling tree depth, branching,
tree adjacency, whose default values representative real networks. Randomnet randomly
generates network topology set faulty lines. turned various PDDL
encodings tool called net2pddl, implemented Piergiorgio Bertoli Sylvie Thiebaux.
net2pddl computes set lines supplied, makes goal.
instances generated make use randomnet default settings, two exceptions
create problems increasing difficulty. first maximal depth trees takes range
values twice default. larger value, harder problem. second
percentage faulty lines ranges 0.1 0.7. Problems middle range harder
average, bottom range realistic.
instance suite contains 50 instances. small instances feature 1 6 sources,
middle instances feature 10 sources, large instances feature 100 sources.
large instances size typical real-world instances, even larger. example
Figure 23 representative difficult instance middle set.
A.4.5 F UTURE W ORK
PSR around time benchmark planning uncertainty, expect
work done framework IPC-4 facilitate acceptance one standard

527

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

benchmarks planning. end, developed PSR resource web page giving access
relevant papers, data, tools (net2pddl, randomnet, . . . ).45 One aspect future work
complete maintain website, making available number already existing tools,
SyDRe (Thiebaux et al., 1996), domain-specific system full PSR problem, Matt Grays
net2jpeg graphically displays networks generated randomnet.
Considering future IPCs, potential extending PDDL encoding take numerical optimization aspects benchmark account. PDDL-like encodings partially
observable version benchmark exist (Bonet & Thiebaux, 2003) ready used
future edition probabilistic part IPC.46
A.5 Satellite
Satellite domain introduced IPC-3 Long Fox (2003). motivated NASA
space application: number satellites take images number spatial phenomena,
obeying constraints data storage space fuel usage. IPC-3, 5 versions
domain, corresponding different levels language PDDL2.1: Strips, Numeric, SimpleTime
(action durations constants), Time (action durations expressions static variables),
Complex (durations numerics, i.e. union Numeric Time).
adaptation Satellite domain IPC-4 done Jorg Hoffmann. IPC-3 domain
versions example instances re-used, except SimpleTime IPC-4 domains,
didnt want introduce extra version distinction difference constant
durations static durations. top IPC-3 versions, 4 new domain versions added.
idea make domain realistic additionally introducing time windows
sending image data earth, i.e. antennas visible satellites certain
periods time according Derek Long, lack time windows main shortcoming
IPC-3 domain.47
extended IPC-3 Time domain version two IPC-4 domain versions, Time-timewindows
Time-timewindows-compiled. extended IPC-3 Complex domain version two IPC-4
domain versions Complex-timewindows Complex-timewindows-compiled. cases, introduced new action sending data antenna. antenna receive data
single satellite time, antenna visible subsets satellites certain time
periods, sending image takes time proportional size image. time
windows modelled using timed initial literals, -compiled domain versions,
literals compiled artificial PDDL constructs. None domain versions uses ADL
constructs, versions single (STRIPS) formulation.
instances generated follows. objectives clearly demonstrate effect
additional time windows, produce solvable instances only. accomplish former,
re-used IPC-3 instances, difference between, e.g., Time Time-timewindows,
lies additional time window constructs. ensure solvability, implemented tool read
plans produced one IPC-3 participants, namely TLPlan, arranged time
windows input plan suitable solve enriched instance. important note
45. page available http://rsise.anu.edu.au/thiebaux/benchmarks/pds
46. probabilistic part IPC-4 feature partially observable domains.
47. learned meantime lack time windows gathering data also, even more,
essential: often, due occlusion objects due rotation earth, targets visible
restricted periods time. probably constitutes one important future directions domain.

528

fiE NGINEERING B ENCHMARKS



P LANNING

time windows arranged exactly meet times extracted IPC-3
plan. Rather, introduced one time window per 5 take-image actions, made antenna
visible time window respective 5 satellites, let image size
individual image random value within certain range time window 5 times
long sending time resulting maximum possible size.
course, generation process arranged rather arbitrarily, resulting instances
might long way away typical characteristics Satellite problem occurs
real world. isnt nice, best could without inside knowledge
application domain, advantage enriched instances solvable, directly
comparable IPC-3 ones.
new domain versions derived Complex, introduced utilities time
window inside image sent earth. image, utility either
windows, decreases monotonically start time window, random within
certain interval. image put randomly one classes, optimization
requirement minimize linear combination makespan, fuel usage, summed negated
image utility.
A.6 Settlers
Settlers domain introduced IPC-3 Long Fox (2003). makes extensive use
numeric variables. variables carry domain semantics, building
infrastructure unsettled area, involving building housing, railway tracks, sawmills,
etc. domain included IPC-4 order pose challenge numeric planners
domains mostly make much use numeric variables, computing
(static) durations actions.48 used exact domain file example instances
IPC-3, except removed universally quantified preconditions improve accessibility
planners. quantifiers ranged domain constants could easily replaced
conjunctions atoms.
A.7 UMTS
Roman Englert working application area several years. domain adapted
IPC-4 Stefan Edelkamp Roman Englert.
A.7.1 PPLICATION OMAIN
Probably best known feature UMTS (Universal Mobile Telecommunication Standard)
higher bit rate (Holma & Toskala, 2000): packet-switched connections reach 2 mega
bit per second (Mbps) optimal case. Compared existing mobile networks, UMTS provides
new important feature, namely negotiation Quality Service (QoS) transfer
properties. attributes define characteristics transfer throughput, transfer delay, data error rate. UMTS bearers generic order provide good support
existing applications evolution new applications. Applications services divided
48. Note that, extent, numeric values abstracted away PDDL encoding,
mostly (in Airport Pipesworld, c.f. Sections A.1.5 A.2.5) order obtain discrete encoding suitable
PDDL2.2-style actions.

529

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

Class

Constraints

Examples

Conversational
Preserve time
relation
information flow
stream.
Conversational
pattern (low delay)
Voice, video
telephony &
video games

Streaming
Preserve time
relation
information
entities
stream

Interactive
Request response pattern.
Preserve data
integrity

Background
Undefined
delay.
Preserve
data
integrity

Streaming
multimedia

Web browsing,
network games

Background
download
e-mails

Table 5: UMTS quality service classes characteristics.
four traffic classes QoS (TS23107, 2002; Holma & Toskala, 2000). traffic classes,
fundamental characteristics, examples applications summarized Table 5.
main distinguishing factor classes delay-sensitive traffic is:
conversational class delay sensitive (approximately 40 ms time preservation), background class defined maximum delay.
UMTS call set-up modularized using perspective Intelligent Software Agents
(Appleby & Steward, 1999; Busuioc, 1999), since agents logical units enable discrete
perspective continuous signaling process. call set-up partitioned following
modules executed sequential order (Englert, 2005):
TRM initial step initiation application mobile determination
required resources execution. resources mobile display memory
checked Terminal Resource Management (TRM) allocated, possible. Otherwise,
execution aborted.
CT wireless connection radio network initiated via dedicated control channel
GSM (Holma & Toskala, 2000). case success, transmission Ready service
transferred via node B mobile order ensure Connection Timing (CT)
bearer service availability.
information mobile location data handling capabilities sent application server Internet (cf. AEEI). transmission done comfortably
so-called service agent (Farjami, Gorg, & Bell, 2000) controlled Agent Management (AM) CND. advantage service agent is, case failure, e.g.,
network resources sufficiently available, agent negotiate terminals
agent another QoS class different quality parameters.
AEEM service agent required QoS class execution application
parameters mobile application sent mobiles Agent Execution Environment
Mobile (AEEM) application server Internet (cf. AEEI).
RRC Radio Resource Controller (RRC) provisions/allocates required QoS logical resources MAC level radio bearer (Holma & Toskala, 2000).
530

fiE NGINEERING B ENCHMARKS



P LANNING

RAB Then, bearer resources supplied physical level Radio Access Bearer
(RAB) CND call flow set-up mapping logical QoS parameters
physical QoS resources together.
AEEI Agent Execution Environment Internet (AEEI) establishes data transfer
core network PDN (e.g., Internet) sends service agent (controlled AM)
application PDN order ensure QoS application.
BS Finally, Bearer Service (BS) execution mobile application established
required radio bearer resources QoS. Messages sent modules TRM
AEEI start execution application.
modules executed sequential order set-up call execution mobile
applications. Two modules (AEEM AEEI) executed time windows order
ensure agents life network. However, two constraints added: First,
intra-application constraint, modules one application ordered. Second, interapplication constraint, modules names different applications cannot executed parallel order ensure required resources available.
A.7.2 IPC-4 PDDL DAPTATION
Besides action duration, domain encodes scheduling types resources49 , consuming
amount action initialization time releasing amount action ending time. Scheduling
types resources used planning benchmarks before, good news
temporal PDDL2.1 (Level 3) capable expressing them. fact used similar encoding
one found Job- Flow-Shop problems. one feature, actions defined
temporarily produce rather temporarily consume resources. current PDDL way
stating resource constraints explicitly, planners want exploit knowledge
look certain patterns increase/decrease effects recognize them. Additionally, resource
modeling UMTS adaptation constrained important parameters (in total 15).
real networks several hundred parameters applied.
UMTS, two subsequent actions check update value resources (e.g.,
has-mobile-cpu) starting (resp. ending) time points far start (resp. ending) events
separated time steps, minimum slack time required two dependent
events. modeling renewable resources construct invariant condition
action check, start event change. decided best choice
proper temporal action. Consequently, temporal actions require resources available
adding amount used.
Finally, time windows two agent-based modules defined using average execution times modules. average times estimated based signaling durations
UMTS network (Holma & Toskala, 2000).
Resources may renewable consumable: example renewable resource keyboard mobile. used input data several applications. Consumable resources
49. terminology resources planning scheduling varies. job-shop scheduling, machine resource,
planning machine would domain object. PDDL, renewable consumable resources
modeled using numerical fluents per se distinguished.

531

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

mobile-cpu
d-available
e-balance
mobile-channels
-available
num-mobiles
num-calls
mobile-storage
logical-channels
cell-update
handover
active-set-up
ggsn-bitrate
max-no-pdp
max-no-apn

used x per cent per application
partition display, e.g., ticker chess
energy balance mobile accumulator
used data transfer
number mobiles tractable
node B
mobile network load node B
memory S(IM)AT card
number logical channels available CN
report UE location RNC
handover required get higher bit rate
update connection
capacity (kbit/s) GGSN PDN
max. no. packet data protocols per mobile
max. access point names (APN) per mobile

Table 6: Scheduling types resources UMTS call set-up.
released action execution. resources realized experiments summarized
Table 6 (see 3GPP, 2004 complete list resources UMTS call set-up).
PDDL representation planning domain based eight modules UMTS
call set-up. eight operators corresponding eight modules. Let us consider,
example, BS action, is, final action used establish predicate bs-ok.
defined follows:
(:durative-action BS
:parameters
(?A-new - application ?M - mobile ?L - list ?MS1 ?MS2 - message ?a - agent)
:duration
(= ?duration (time-bs ?A-new))
:condition
(and (at start (initiated ?A-new ?M))
(at start (aeei-ok ?A-new ?M ?L ?a))
(at start (qos-params ?A-new ?L))
(at start (message-trm ?M ?MS1))
(at start (message-aeei ?A-new ?MS2)))
:effect
(and (at end (iu-bearer ?A-new ?M ?L)) (at end (bs-ok ?A-new ?M ?L ?a)))))

action preconditions successful execution module AEEI call
set-up, satisfaction required QoS class parameters (denoted list L), transfered
messages set-up status application mobile PDN. resources already
allocated preceding modules. effect bearer network connection mobile
application set up.
532

fiE NGINEERING B ENCHMARKS



P LANNING

initiation application starts mobile TRM. Afterwards, CT
asked ready-for-service signal. core call set-up radio access bearer
procedure CND. Let us consider latter detail. first step logical resources
must allocated (RRC), e.g., required number channels must provided logical
level radio bearer later logical resources mapped physical channels.
PDDL RRC action looks follows:
(:durative-action RRC
:parameters
(?A-new - application ?M - mobile ?L - list ?a - agent)
:duration
(= ?duration (time-rrc ?A-new))
:condition
(and (at start (ct-ok ?A-new ?M ?L))
(at start (aeem-ok ?A-new ?M ?L ?a))
(at start (<= (has-logical-channels)
(- (max-logical-channels) (app-channels ?A-new ?m))))
(at start (<= (has-cell-update) (- (max-cell-update) 2)))
(at start (< (has-handover) (max-handover)))
(at start (< (has-active-set-up) (max-active-set-up))))
:effect
(and (at start (increase (has-logical-channels) (app-channels ?A-new ?M)))
(at end (decrease (has-logical-channels) (app-channels ?A-new ?M)))
(at start (increase (has-cell-update) 2))
(at end (decrease (has-cell-update) 2))
(at start (increase (has-handover) 1))
(at end (decrease (has-handover) 1))
(at start (increase (has-active-set-up) 1))
(at end (decrease (has-active-set-up) 1))
(at end (rrc-ok ?A-new ?M ?L ?a))))

requested QoS class available, fact rab-ok true service
agent must sent mobile order negotiate application user weaker QoS
requirements. case success predicate rab-ok true connection PDN must
checked. Finally, goal predicate BS fulfilled resources available.
A.7.3 IPC-4 OMAIN TRUCTURE
used IPC-4, UMTS domain six versions. first three are: temporal, domain
version timing constraints, temporal-timewindows, domain version PDDL2.2 timed
initial facts, temporal-timewindows-compiled, domain version PDDL2.1 wrapper encoding timed initial literals. second domain version set flaw-temporal, flaw-temporaltimewindows, flaw-temporal-timewindows-compiled, includes following flaw action:
(:durative-action FLAW
parameters
(?A-new - application ?M - mobile ?L - list ?a - agent)
:duration (= ?duration 4)
:condition
533

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

version
temporal
temporal-tw
temporal-twc
flaw-temporal
flaw-temporal-tw
flaw-temporal-twc

formulation
STRIPS-TEMPORAL
STRIPS-TEMPORAL-TW
STRIPS-TEMPORAL
STRIPS-TEMPORAL
STRIPS-TEMPORAL-TW
STRIPS-TEMPORAL

max-#op
8
8
13
9
9
14

max-#act
(5120) 80
(5120) 80
(5125) 85
(5310) 90
(5310) 90
(5315) 95

Table 7: Overview different domain versions UMTS. Abbreviations used: temporaltw temporal-timewindows, temporal-twc temporal-timewindows-compiled;
max-#op maximum number (parameterized) PDDL operators instance,
max-#act maximum number ground actions instance. Data parentheses collected FFs reachability pre-process (see text).

(and (at start (initiated ?A-new ?M))
(at start (qos-params ?A-new ?L))
(at start (trm-ok ?A-new ?M ?L)))
:effect
(and (at end (rab-ok ?A-new ?M ?L ?a))
(at start (not (initiated ?A-new ?M)))))

action offers shortcut rab-ok predicate, used real solution
deletes initiated predicate. action used heuristic functions
based ignoring negative effects. sense, action encodes flaw may disturb
heuristic techniques used modern planners. determine action useful, negative interactions considered. idea flaw practically motivated order see
heuristic planners react it. standard form, domain big challenge
planners, seen Section 5. domain versions one formulation, namely stripsfluents-temporal, numerical fluents, - except typing - ADL constructs used.
instances, plan objective minimize makespan.
domain versions numbers operators ground actions overviewed Table 7.
many empirical data UMTS seen before, data quite exceptional,
time easy interpret. First, similar seen Section 5.3, data
actually constant across instances within domain version, due
fact instances scale specification applications need actually started.
Second, numbers operators actions differ versions without
time windows; increase somewhat, additional artificial actions, compile
timed initial literals away (c.f. Section 2); increase somewhat, course, introduce
flaw action. Third, striking observation huge effect FFs reachability preprocessor, building relaxed planning graph initial state removing actions
appear graph. due technical subtleties encoding, restrictions
feasible action instantiations are, partly, implicit possible action sequences, rather
explicit static predicates.

534

fiE NGINEERING B ENCHMARKS



P LANNING

A.7.4 IPC-4 E XAMPLE NSTANCES
UMTS call set-up domain following challenges planning task (Englert & Cremers, 2001):
Real-time: plans execution mobile applications generated appropriate time?
Planning done maximum duration exceed UMTS call set-up
time.
Completeness: possible generate plan, i.e. planning result (optimal) plan
required applications minimizes waiting period applications started?
PDDL structure basic problem discrete UMTS call set-up (DUCS) domain
following:
(define (problem DUCS DOMAIN BASIC VERSION)
(:domain DUCS DOMAIN BASIC VERSION
(:objects MS1 MS2 - message
A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 - application
M1 M2 M3 M4 M5 M6 M7 M8 M9 M10 - mobile
L1 L2 L3 L4 L5 L6 L7 L8 L9 L10 - list
ae - agent)
(:init (= (time-trm A1) 76) (= (time-ct A1) 48)
(= (time-am A1) 74) (= (time-aeem A1) 66)
(= (time-rrc A1) 202) (= (time-rab A1) 67)
(= (time-aeei A1) 36) (= (time-bs A1) 28)
[...]
(location M1) ;; types
(authentification M1)
[...]
(= (has-mobile-cpu) 0) ;; current status
[...] )
(:goal (and (bs-ok A1 M1 L1 ae) [...] )))

First PDDL description come objects applications mobiles.
come durations modules depending applications, e.g., module TRM requires
less time news ticker chess game, since latter requires terminal resources
ticker. current status resources initialized. Finally, goal defined:
bearer establishment execution start initiated mobile applications. total execution
time minimized.
IPC-4 time windows varied small perturbations order generate different
instances. perturbations motivated average execution times modules radio
network according load. Furthermore, number applications set varied 1
10. domains assume applications run one mobile terminal. However,
distributed several mobile terminals. 50 different instances per domain version.
A.7.5 F UTURE W ORK
UMTS domain big challenge modern heuristic, i.e. HSP/FF/LPG-style, planners
planners satisficing (potentially return sub-optimal plans). objective UMTS
535

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

minimize execution time, one ignores objective task trivializes.
optimal planners, UMTS realistic challenge. domain already relatively realistically
modelled, except left-out additional constraints (many) less important resources.
remains seen if, introducing resources, planner (in particular optimal planner)
performance gets degraded. option case may introduce explicit language constructs
different types (renewable consumable) resources.
future following two challenges shall investigated. First, negotiation UMTS
Quality Service (QoS) parameters could considered. Assume video application mobile
terminal initiated, bearer resources sufficiently available. QoS
negotiated terminal bearer. leads planning negotiation
plan execution already initiated applications.
Second, approach optimization UMTS call set-up applied Wireless
LAN registration. challenge transfer QoS parameters, since current Wireless LAN
standard (802.11b) contain QoS. demerit solved applying additional
service level addresses QoS.

References
3GPP (2004). 3G Partnership Project, www.3gpp.org.
Appleby, S., & Steward, T. (1999). Mobile Software Agents Control Telecommunication
Networks, chap. 11 Hayzelden, A./Bigham, J. (eds.), Software Agents Future Telecommunication Systems. Springer.
Apt, K., Blair, H., & Walker, A. (1988). Towards theory declarative knowledge. Foundations
Deductive Databases Logic Programming, pp. 89148. Morgan Kaufmann.
Bacchus, F., & Kabanza, F. (2000). Using temporal logics express search control knowledge
planning. Artificial Intelligence, 116, 123191.
Bacchus, F. (2000). Subset PDDL AIPS2000 Planning Competition. AIPS-00 Planning Competition Comitee. Available http://www.cs.toronto.edu/aips2000/pddl-subset.ps.
Bacchus, F. (2001). AIPS00 planning competition. AI Magazine, 22(3), 4756.
Bertoli, P., Cimatti, A., Roveri, M., & Traverso, P. (2001). Planning nondeterministic domains
partial observability via symbolic model checking.. Nebel (Nebel, 2001).
Bertoli, P., Cimatti, A., Slaney, J., & Thiebaux, S. (2002). Solving power supply restoration problems planning via symbolic model checking. Proceedings 15th European
Conference Artificial Intelligence (ECAI-02), pp. 57680, Lyon, France. Wiley.
Biundo, S., Myers, K., & Rajan, K. (Eds.)., ICAPS-05 (2005). Proceedings 15th International Conference Automated Planning Scheduling (ICAPS-05), Monterey, CA, USA.
Morgan Kaufmann.
Bloem, R., Ravi, K., & Somenzi, F. (2000). Symbolic guided search CTL model checking.
Conference Design Automation (DAC), pp. 2934.
Blum, A. L., & Furst, M. L. (1997). Fast planning planning graph analysis. Artificial
Intelligence, 90(1-2), 279298.

536

fiE NGINEERING B ENCHMARKS



P LANNING

Boddy, M., Gohde, J., Haigh, T., & Harp, S. (2005). Course action generation cyber security
using classical planning.. Biundo et al. (Biundo, Myers, & Rajan, 2005), pp. 1221.
Bonet, B., & Geffner, H. (2001). Planning heuristic search. Artificial Intelligence, 129(12),
533.
Bonet, B., Loerincs, G., & Geffner, H. (1997). robust fast action selection mechanism
planning. Proceedings 14th National Conference American Association
Artificial Intelligence (AAAI-97), pp. 714719. MIT Press.
Bonet, B., & Thiebaux, S. (2003). GPT meets PSR. Giunchiglia, E., Muscettola, N., & Nau,
D. (Eds.), Proceedings 13th International Conference Automated Planning
Scheduling (ICAPS-03), pp. 102111, Trento, Italy. Morgan Kaufmann.
Busuioc, M. (1999). Distributed Intelligent Agents - Solution Management Complex
Telecommunications Services, chap. 4 Hayzelden, A./Bigham, J. (eds.), Software Agents
Future Telecommunication Systems. Springer.
Bylander, T. (1994). computational complexity propositional STRIPS planning. Artificial
Intelligence, 69(12), 165204.
Cesta, A., & Borrajo, D. (Eds.). (2001). Recent Advances AI Planning. 6th European Conference
Planning (ECP01), Toledo, Spain. Springer-Verlag.
Chen, Y., Hsu, C., & Wah, B. (2004). SGPlan: Subgoal partitioning resolution planning.
Edelkamp, S., Hoffmann, J., Littman, M., & Younes, H. (Eds.), Proceedings 4th
International Planning Competition, Whistler, BC, Canada. JPL.
Chien, S., Kambhampati, R., & Knoblock, C. (Eds.)., AIPS-00 (2000). Proceedings 5th
International Conference Artificial Intelligence Planning Systems (AIPS-00). AAAI Press,
Menlo Park.
Cimatti, A., Roveri, M., & Traverso, P. (1998). Automatic OBDD-based generation universal
plans non-deterministic domains. Proceedings 15th National Conference
American Association Artificial Intelligence (AAAI-98), pp. 875881, Madison, WI. MIT
Press.
Clarke, E. M., Grumberg, O., & Peled, D. A. (1999). Model Checking. MIT Press.
Dierks, H. (2005). Finding optimal plans domains restricted continuous effects uppaal cora. ICAPS Workshop Verification Validation Model-Based Planning
Scheduling Systems.
Edelkamp, S. (2003a). Promela planning. Workshop Model Checking Software (SPIN), Lecture Notes Computer Science, pp. 197212. Springer.
Edelkamp, S. (2003b). Taming numbers durations model checking integrated planning
system. Journal Artificial Intelligence Research, 20, 195238.
Edelkamp, S., & Jabbar, S. (2005). Action planning directed model checking Petri nets.
Electronic Notes Theoretical Computer Science, 149(2), 318.
Edelkamp, S., Jabbar, S., & Lluch-Lafuente, A. (2005). Action planning graph transition systems. ICAPS Workshop Verification Validation Model-Based Planning
Scheduling Systems, pp. 4857.
537

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

Edelkamp, S., Leue, S., & Lluch-Lafuente, A. (2004). Directed explicit-state model checking
validation communication protocols. International Journal Software Tools Technology, 5, 247 267.
Englert, R. (2005). Planning optimize UMTS call set-up execution mobile applications. Int. Journal Applied Artificial Intelligence, 19(2), 99117.
Englert, R., & Cremers, A. B. (2001). Configuration Applications 3rd Generation Mobile
Communication. KI Workshop AI Planning, Scheduling, Configuration Design
(PUK). Vienna, Austria.
Farjami, P., Gorg, C., & Bell, F. (2000). Advanced service provisioning based mobile agents.
Computer Communications, 23, 754 760.
Fikes, R. E., & Nilsson, N. (1971). STRIPS: new approach application theorem proving
problem solving. Artificial Intelligence, 2, 189208.
Fourman, M. P. (2000). Propositional planning. AIPS Workshop Model-Theoretic Approaches
Planning.
Fox, M., Long, D., & Halsey, K. (2004). investigation expressive power PDDL2.1.
Saitta, L. (Ed.), Proceedings 16th European Conference Artificial Intelligence
(ECAI-04), Valencia, Spain. Wiley.
Fox, M., & Long, D. (1999). detection exploitation symmetry planning problems.
Pollack, M. (Ed.), Proceedings 16th International Joint Conference Artificial
Intelligence (IJCAI-99), pp. 956961, Stockholm, Sweden. Morgan Kaufmann.
Fox, M., & Long, D. (2003). PDDL2.1: extension PDDL expressing temporal planning
domains. Journal Artificial Intelligence Research, 20, 61124.
Frank, J., Cheeseman, P., & Stutz, J. (1997). gravity fails: Local search topology. Journal
Artificial Intelligence Research, 7, 249281.
Garagnani, M. (2000). correct algorithm efficient planning preprocessed domain axioms.
Research Development Intelligent Systems XVII. Springer-Verlag.
Gazen, B. C., & Knoblock, C. (1997). Combining expressiveness UCPOP efficiency
Graphplan.. Steel, & Alami (Steel & Alami, 1997), pp. 221233.
Gerevini, A., & Long, D. (2005). Plan Constraints Preferences. AIPS-06 Planning Competition Comitee. Available http://zeus.ing.unibs.it/ipc-5/pddl-ipc5.pdf.
Gerevini, A., Saetti, A., & Serina, I. (2006). approach temporal planning scheduling
domains predictable exogenous events. Journal Artificial Intelligence Research, 25,
187231.
Giunchiglia, F., & Traverso, P. (1999). Planning model checking. Biundo, S., & Fox, M.
(Eds.), Recent Advances AI Planning. 5th European Conference Planning (ECP99),
Lecture Notes Artificial Intelligence, pp. 119, Durham, UK. Springer-Verlag.
Haslum, P., & Geffner, H. (2001). Heuristic planning time resources.. Cesta, & Borrajo
(Cesta & Borrajo, 2001), pp. 121132.
Hatzack, W. (2002). Entwicklung und Auswertung von Algorithmen zur autonomen Verkehrskoordinierung und Konfliktauflsung Flughfen. Ph.D. thesis, University Freiburg, Freiburg,
Germany.
538

fiE NGINEERING B ENCHMARKS



P LANNING

Hatzack, W., & Nebel, B. (2001). operational traffic control problem: Computational complexity solutions.. Cesta, & Borrajo (Cesta & Borrajo, 2001), pp. 4960.
Helmert, M. (2003). Complexity results standard benchmark domains planning. Artificial
Intelligence, 143, 219262.
Helmert, M. (2004). planning heuristic based causal graph analysis.. Koenig et al. (Koenig,
Zilberstein, & Koehler, 2004), pp. 161170.
Helmert, M. (2005) Personal communication.
Helmert, M. (2006a). fast downward planning system. Journal Artificial Intelligence Research, 26. Accepted Publication.
Helmert, M. (2006b). New complexity results classical planning benchmarks. Long, D., &
Smith, S. (Eds.), Proceedings 16th International Conference Automated Planning
Scheduling (ICAPS-06), pp. 5261, English Lake District, UK. Morgan Kaufmann.
Hoffmann, J. (2001). Local search topology planning benchmarks: empirical analysis..
Nebel (Nebel, 2001), pp. 453458.
Hoffmann, J. (2002). Local search topology planning benchmarks: theoretical analysis.
Ghallab, M., Hertzberg, J., & Traverso, P. (Eds.), Proceedings 6th International Conference Artificial Intelligence Planning Scheduling (AIPS-02), pp. 92100, Toulouse,
France. Morgan Kaufmann.
Hoffmann, J. (2003). Metric-FF planning system: Translating ignoring delete lists numeric
state variables. Journal Artificial Intelligence Research, 20, 291341.
Hoffmann, J. (2005). ignoring delete lists works: Local search topology planning benchmarks. Journal Artificial Intelligence Research, 24, 685758.
Hoffmann, J., & Edelkamp, S. (2005). deterministic part IPC-4: overview. Journal
Artificial Intelligence Research, 24, 519579.
Hoffmann, J., & Nebel, B. (2001). planning system: Fast plan generation heuristic
search. Journal Artificial Intelligence Research, 14, 253302.
Holldobler, S., & Stor, H.-P. (2000). Solving entailment problem fluent calculus using
binary decision diagrams. ICAPS Workshop Model-Theoretic Approaches Planning.
Holma, H., & Toskala, A. (2000). WCDMA UMTS - Radio Access 3rd Generation Mobile
Communications. Wiley & Sons.
Holzmann, G. (2003). Spin Model Checker - Primer Reference Manual. Addison-Wesley.
Holzmann, G. J. (1990). Design Validation Computer Protocols. Prentice Hall.
Howe, A., & Dahlman, E. (2002). critical assessment benchmark comparison planning.
Journal Artificial Intelligence Research, 17, 133.
Kabanza, F., & Thiebaux, S. (2005). Search control planning temporally extended goals..
Biundo et al. (Biundo et al., 2005), pp. 130139.
Koehler, J., & Hoffmann, J. (2000). instantiation ADL operators involving arbitrary
first-order formulas. ECAI Workshop New Results Planning, Scheduling Design.

539

fiH OFFMANN , E DELKAMP, HI EBAUX , E NGLERT, L IPORACE & R UG

Koehler, J., Nebel, B., Hoffmann, J., & Dimopoulos, Y. (1997). Extending planning graphs
ADL subset.. Steel, & Alami (Steel & Alami, 1997), pp. 273285.
Koehler, J., & Schuster, K. (2000). Elevator control planning problem.. Chien et al. (Chien,
Kambhampati, & Knoblock, 2000), pp. 331338.
Koenig, S., Zilberstein, S., & Koehler, J. (Eds.)., ICAPS-04 (2004). Proceedings 14th International Conference Automated Planning Scheduling (ICAPS-04), Whistler, Canada.
Morgan Kaufmann.
Korf, R. E. (1990). Real-time heuristic search. Artificial Intelligence, 42, 189211.
Kvarnstrom, J., Doherty, P., & Haslum, P. (2000). Extending TALplanner concurrency
ressources. Horn, W. (Ed.), Proceedings 14th European Conference Artificial
Intelligence (ECAI-00), pp. 501505, Berlin, Germany. Wiley.
Lago, U. D., Pistore, M., & Traverso, P. (2002). Planning language extended goals.
Proceedings 18th National Conference American Association Artificial
Intelligence (AAAI-02), pp. 447454, Edmonton, AL. MIT Press.
Long, D., & Fox, M. (2000). Automatic synthesis use generic types planning.. Chien
et al. (Chien et al., 2000), pp. 196205.
Long, D., & Fox, M. (2003). 3rd international planning competition: Results analysis.
Journal Artificial Intelligence Research, 20, 159.
McDermott, D. (1996). heuristic estimator means-ends analysis planning. Proceedings
3rd International Conference Artificial Intelligence Planning Systems (AIPS-96),
pp. 142149. AAAI Press, Menlo Park.
McDermott, D. (1998). PDDL Planning Domain Definition Language. AIPS-98 Planning Competition Comitee. Available http://ls5-www.cs.uni-dortmund.de/ edelkamp/ipc4/DOCS/pddl.ps.gz.
McDermott, D. (2000). 1998 AI planning systems competition. AI Magazine, 21(2), 3555.
McDermott, D. V. (1999). Using regression-match graphs control search planning. Artificial
Intelligence, 109(1-2), 111159.
Milidiu, R. L., & dos Santos Liporace, F. (2004a). Plumber, pipeline transportation planner.
International Workshop Harbour Maritime Simulation (HMS), pp. 99106, Rio de
Janeiro, Brazil.
Milidiu, R. L., & dos Santos Liporace, F. (2004b). Pipesworld: Applying planning systems
pipeline transportation. Proceedings International Pipeline Conference (IPC), pp.
713719.
Nebel, B. (Ed.)., IJCAI-01 (2001). Proceedings 17th International Joint Conference Artificial Intelligence (IJCAI-01), Seattle, Washington, USA. Morgan Kaufmann.
Nebel, B. (2000). compilability expressive power propositional planning formalisms.
Journal Artificial Intelligence Research, 12, 271315.
Pednault, E. P. (1989). ADL: Exploring middle ground STRIPS situation
calculus. Brachman, R., Levesque, H. J., & Reiter, R. (Eds.), Principles Knowledge
Representation Reasoning: Proceedings 1st International Conference (KR-89), pp.
324331, Toronto, ON. Morgan Kaufmann.
540

fiE NGINEERING B ENCHMARKS



P LANNING

Reffel, F., & Edelkamp, S. (1999). Error detection directed symbolic model checking. World
Congress Formal Methods (FM), pp. 195211.
Rintanen, J. (2004). Phase transitions classical planning: experimental study.. Koenig et al.
(Koenig et al., 2004), pp. 101110.
Ruml, W., Do, M., & Fromherz, M. (2005). On-line planning scheduling high-speed manufacturing.. Biundo et al. (Biundo et al., 2005), pp. 3039.
Steel, S., & Alami, R. (Eds.). (1997). Recent Advances AI Planning. 4th European Conference
Planning (ECP97), Vol. 1348 Lecture Notes Artificial Intelligence, Toulouse, France.
Springer-Verlag.
Thiebaux, S., & Cordier, M.-O. (2001). Supply restoration power distribution systems
benchmark planning uncertainty.. Cesta, & Borrajo (Cesta & Borrajo, 2001), pp.
8595.
Thiebaux, S., Cordier, M.-O., Jehl, O., & Krivine, J.-P. (1996). Supply restoration power distribution systems case study integrating model-based diagnosis repair planning.
Horvitz, E., & Jensen, F. V. (Eds.), Proceedings 12th International Conference
Uncertainty AI (UAI-96), pp. 525532, Portland, Oregon, USA. Morgan Kaufmann.
Thiebaux, S., Hoffmann, J., & Nebel, B. (2003). defense PDDL axioms.. Gottlob, G. (Ed.),
Proceedings 18th International Joint Conference Artificial Intelligence (IJCAI-03),
pp. 961966, Acapulco, Mexico. Morgan Kaufmann.
Thiebaux, S., Hoffmann, J., & Nebel, B. (2005). defense PDDL axioms. Artificial Intelligence,
168(12), 3869.
TS23107 (2002). 3rd Generation Partnership Project: Technical Specification Group Service
System Aspects: QoS Concept Architecture (Release 5), TS 23.107, V5.3.0, 3GPP.
Vidal, V. (2004). lookahead strategy heuristic search planning.. Koenig et al. (Koenig et al.,
2004), pp. 150160.
Wah, B., & Chen, Y. (2004). Subgoal partitioning global search solving temporal planning
problems mixed space. International Journal Artificial Intelligence Tools, 13(4), 767
790.
Yang, C. H., & Dill, D. L. (1998). Validation guided search state space. Conference
Design Automation (DAC), pp. 599604.
Younes, H., Littman, M., Weissman, D., & Asmuth, J. (2005). first probabilistic track
international planning competition. Journal Artificial Intelligence Research, 24, 85188.

541


