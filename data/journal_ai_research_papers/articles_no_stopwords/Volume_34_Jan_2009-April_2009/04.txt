Journal Artificial Intelligence Research 34 (2009) 707-755

Submitted 08/08; published 04/09

Efficient Informative Sensing using Multiple Robots
Amarjeet Singh
Andreas Krause
Carlos Guestrin
William J. Kaiser

AMARJEET @ EE . UCLA . EDU
KRAUSEA @ CALTECH . EDU
GUESTRIN @ CS . CMU . EDU
KAISER @ EE . UCLA . EDU

Abstract
need efficient monitoring spatio-temporal dynamics large environmental applications, water quality monitoring rivers lakes, motivates use robotic sensors
order achieve sufficient spatial coverage. Typically, robots bounded resources,
limited battery limited amounts time obtain measurements. Thus, careful coordination
paths required order maximize amount information collected, respecting
resource constraints. paper, present efficient approach near-optimally solving NP-hard optimization problem planning informative paths. particular, first
develop eSIP (efficient Single-robot Informative Path planning), approximation algorithm
optimizing path single robot. Hereby, use Gaussian Process model underlying phenomenon, use mutual information visited locations remainder
space quantify amount information collected. prove mutual information
collected using paths obtained using eSIP close information obtained optimal
solution. provide general technique, sequential allocation, used extend
single robot planning algorithm, eSIP, multi-robot problem. procedure
approximately generalizes guarantees single-robot problem multi-robot case.
extensively evaluate effectiveness approach several experiments performed in-field
two important environmental sensing applications, lake river monitoring, simulation
experiments performed using several real world sensor network data sets.

1. Introduction
Global climate change corresponding impetus sustainable practices environment-related
activities brought forth challenging task observing natural phenomena exhibiting dynamics space time. Observing characterizing dynamics high fidelity
critical answering several questions related policy issues monitoring control
understanding biological effects activity microbes organisms living (or dependent
on) environments. Monitoring algal bloom growth lakes salt concentration rivers,
illustrated Fig. 1, specific examples related phenomena interest biologists
environment scientists (MacIntyre, 1993; Ishikawa & Tanaka, 1993; MacIntyre, Romero, & Kling,
2002).
Monitoring environmental phenomena, algal bloom growth lake, requires measuring physical processes, nutrient concentration, wind effects solar radiation, among
others, across entire spatial domain. One option acquire data processes would
statically deploy set sensing buoys (Reynolds-Fleming, Fleming, & Luettich, 2004). Due
large spatial extent observed phenomena, approach would require large number
sensors order obtain high fidelity data. spatio-temporal dynamics environments

c
2009
AI Access Foundation. rights reserved.

fiS INGH , K RAUSE , G UESTRIN & K AISER

(a) Confluence San Joaquin Merced River

(b) Lake Fulmor, San Jacinto mountain reserve

Figure 1: Deployment sites used performing path planning in-field.
motivate use actuated sensors robots carrying sensors together efficient approach
planning paths actuated sensors. actuated sensors used past
(Dhariwal et al., 2006) measuring phenomena various locations hence providing
biologists critical information state lake.
Typically however, robots strict resource constraints, storage battery energy,
limits distance travel number measurements acquire
observed phenomena varies significantly. constraints necessitate careful motion planning
robots coordinating paths order maximize amount collected information,
satisfying given resource constraints. paper, tackle important problem
seeking informative paths collection robots, subject constraints cost incurred
robot, e.g. due limited battery capacity.
order optimize paths robots, first need quantify informativeness
particular chosen path. work, adopt approach spatial statistics employ
probabilistic models spatial phenomena. Using models, informativeness viewed
terms uncertainty prediction phenomena unobserved locations, given
observations made mobile robots subset locations (the selected path). particular, use rich class probabilistic models called Gaussian Processes (GPs) (Rasmussen &
Williams, 2006) shown accurately model many spatial phenomena (Cressie, 1991),
apply mutual information (MI) criterion (Caselton & Zidek, 1984) quantify reduction
uncertainty achieved selected robot paths.
Unfortunately, problem finding optimal collection paths, maximizing mutual
information criterion, NP-hard search problem, typically intractable even small
spatial phenomena. paper, develop approximation algorithm efficiently
finds provably near-optimal solution optimization problem. key insight
allow us obtain algorithm mutual information (and several notions
informativeness (as discussed Krause Guestrin, 2007) satisfies submodularity, intuitive
diminishing returns property - making new observation helps made
observations far, less already made many observations (Krause et al., 2008).
problem optimizing path single robot maximize submodular function
visited locations studied Chekuri Pal (2005), developed algorithm, recursivegreedy, strong theoretical approximation guarantees. Unfortunately, running time
708

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

approach quasi-polynomial: scales log , possible sensing locations. property
makes algorithm impractical environmental sensing applications, typical numbers
(M ) observation locations reaching several hundreds more. paper, present two
techniques spatial decomposition branch bound search overcoming limitations recursive-greedy approach Chekuri et al., making practical real world sensing
problems. call efficient approach single robot path planning eSIP (efficient Single-robot
Informative Path planning).
provide general approach, sequential-allocation, used extend
single robot algorithm, eSIP, multi-robot setting. furthermore prove
generalization leads minimal reduction (independent number mobile robots)
approximation guarantee provided single robot algorithm. combine eSIP sequentialallocation develop first efficient path planning algorithm (eMIP) coordinates multiple
robots, resource constraint, order obtain highly informative paths, i.e. paths
maximize given submodular function, mutual information. exploiting submodularity, prove strong theoretical approximation guarantees algorithm.
extensively evaluate effectiveness approach several experiments performed
in-field two important environmental sensing applications, lake river monitoring. river
campaign executed confluence two rivers, Merced river San Joaquin river, California August 7-11, 2007. Fig. 1a displays aerial view San Joaquin deployment site.
lake campaign executed lake located University California, Merced campus
August 10-11, 2007. Fig. 1b displays aerial view lake Fulmor. campaigns,
Networked Info Mechanical System (NIMS) (Jordan et al., 2007), cable based robotic system,
used perform path planning observing two dimensional vertical plane (cross-section).
addition analyzing data deployments, provide extensive experimental analysis
algorithm several real world sensor network data sets, including data collected using
robotic boat lake Fulmor (Dhariwal et al., 2006).
manuscript organized follows. formally introduce Multi-robot Informative
Path Planning (MIPP) problem Section 2. Section 3, discuss sequential-allocation
approach extending single robot path planning algorithm multi-robot setting
preserving approximation guarantees. review recursive-greedy algorithm proposed
Chekuri et al. (Section 5), example single-robot algorithm. Subsequently, present
spatial decomposition (Section 6) branch bound techniques (Section 7) drastically improve running time recursive-greedy make practical real world sensing
applications. Section 8, evaluate approach in-field experiments well simulations real world sensing datasets. Section 9, review related work, present
conclusions Section 10. proofs results presented Appendix.

2. Multi-robot Informative Path Planning Problem
formally define Multi-robot Informative Path Planning (MIPP) problem. assume
spatial domain phenomenon discretized finitely many sensing locations V.
subset V, let I(A) denote sensing quality, i.e. informativeness, observing
phenomenon locations A. Details appropriate choices sensing quality given below.
associate location v V, sensing cost C(v) > 0, quantifying expenses
obtaining measurement location v. traveling two locations, u v, robot in-

709

fiS INGH , K RAUSE , G UESTRIN & K AISER

curs traveling cost C(u, v) > 0. robot traverses path space: st-path P sequence
l locations starting node s, finishing t. cost C(P) path P = (s = vP
1 , v 2 , . . . , vl =
l1
t) sum sensing costs traveling costs along path, i.e. C(P) =
i=2 C(vi ) +
Pl
C(v
,
v
).


case
l
=
2,
cost


path
P


involve
traveling
cost

i1
i=2
starting finishing locations C(s, t). use notation P refer sequence
nodes path, subset sensing locations P V (ignoring sequence). collection k paths P = {P1 , . . . , Pk }, one robot, I(P) = I(P1 Pk ) denotes sensing quality paths, quantifies amount information collected k paths.
goal MIPP problem find collection P k paths, specified starting finishing
location si ti (not necessarily different), path bounded cost C(Pi ) B
specified budget B, paths informative, i.e. I(P) large possible.
Formally, problem defined as:
max I(ki=1 Pi ); subject C(Pi ) B, {1, . . . , k}.

Pi V

(1)

lake monitoring example goal performing surface monitoring using boats,
first discretized two-dimensional surface lake finitely many sensing locations (as
depicted Fig. 1b). single robot scenario, seek find informative path
P1 (in terms predicting algal bloom content) starting location finishing location
t. experiment cost C(vi ) corresponds energy required making chlorophyll related
measurements (indicators amount algal bloom). traveling cost C(vi1 , vi ) corresponds
energy consumption traveling location vi1 vi . budget B quantifies total
energy stored boats battery.
2.1 Quantifying Informativeness:
quantify sensing quality I? model spatial phenomena, common approach
spatial statistics use rich class probabilistic models called Gaussian Processes (GPs, c.f.,
Rasmussen Williams, 2006). models associate random variable Xv location
v V. joint distribution P (XV ) used quantify uncertainty prediction
P (XV\A | XA = xA ) phenomena unobserved locations XV\A , making observations
XA = xA small subset locations. quantify uncertainty use, example,
mutual information (MI) criterion (as discussed Caselton Zidek, 1984). set
locations, P, MI criterion defined as:
MI(A) H(XV\A ) H(XV\A | XA )

(2)

H(XV\A ) entropy unobserved locations V \ A, H(XV\A | XA )
conditional entropy locations V \ sensing locations A. Hence mutual information
measures reduction uncertainty unobserved locations. Therefore, lake monitoring
example, would select locations reduce uncertainty algal bloom
content prediction lake environment. Conveniently, GP, mutual information criterion
computed efficiently analytically (Caselton & Zidek, 1984). effectiveness mutual
information select informative sensing locations studied Krause et al. (2008). Several
alternative information criteria entropy (Ko et al., 1995), information disk model (Bai et al.,
2006) alphabetical optimality criterion A-, D- E-optimal used
associate sensing quality observation locations related problem domain.
710

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

2.2 Submodularity:
Even consider constraints length paths robots, problem
selecting locations maximize mutual information NP-hard (Krause et al., 2008). Hence,
general, likely cannot expect able efficiently find optimal set locations.
Instead, goal efficiently find near-optimal solutions, sensing quality
(e.g. mutual information), provably close optimal sensing quality.
key observation, allow us obtain strong approximation guarantees,
mutual information satisfies following diminishing returns property (Krause et al., 2008):
locations already sensed, less information gain sensing new
location. intuition formalized concept submodularity: function f submodular
(Nemhauser et al., 1978) if:
B V V \ B; f (A s) f (A) f (B s) f (B).

(3)

Another intuitive property sensing quality monotonic1 , means I(A) I(B)
B V. Hence, select sensing locations, collect
information. Lastly, mutual information normalized, i.e. I() = 0.
thus define MIPP problem problem optimizing paths length B
k robots, selected sensing locations maximize normalized, monotonic submodular function I(). definition MIPP problem allows approach applied
monotonic submodular objective function, mutual information. generalization
useful, several notions informativeness shown satisfy submodularity (Krause
& Guestrin, 2007).
2.3 Online vs Offline Path Planning:
Many robotic path planning applications, search rescue, involve uncertain environments
complex dynamics partially observed. Informative path planning selecting
best locations observe subject given sensing constraints, uncertain environments
necessitates trade exploration (gathering information environment)
exploitation (using current belief state environment effectively). distinguish two different classes algorithms: nonadaptive (offline) algorithms, plan commit
paths observations made, adaptive (online) algorithms, update
replan new information collected. online offline settings NP-hard optimization problems. paper, discuss approximation algorithms offline setting
exploit known belief environment efficient path planning. plan work towards extending approach exploration-exploitation trade-off incorporate online model
adaptation future.

3. Approximation Algorithm MIPP
problem optimizing path single robot (i.e. k = 1) maximize submodular function visited locations, constrained upper bound (B) path cost, first studied
Chekuri Pal (2005). review recursive-greedy algorithm detail Section 5.
1. monotonicity holds approximately mutual information (Krause et al., 2008), however sufficient
purposes paper.

711

fiS INGH , K RAUSE , G UESTRIN & K AISER

1

Algorithm:sequential-allocation

Input: B, k, starting / finishing locations s1 , . . . , sk , t1 , . . . , tk , V
Output: set informative paths P1 , . . . , Pn
2 begin
3
A0 ;
4
1 k
// Performing path planning ith robot
5
Pi SP P (si , ti , B, Ai1 , V);
// Committing previously selected locations
6
Ai Ai1 Pi ;
7
return P1 , . . . , Pk ;
8 end
Algorithm 1: Sequential allocation algorithm multi robot path planning using single robot path planning algorithm SPP. Output set paths P1 , . . . , Pk provides approximation guarantee 1 +
approximation guarantee single robot path planning algorithm SP P .

lake monitoring problem, seek plan multiple paths, one robot. One possibility apply single-path algorithm product graph, i.e. plan path tuples
locations simultaneously representing locations robots. However, straightforward
application single-robot planning algorithm would lead increase running time
exponential number robots, therefore intractable practice. aware
sub-exponential approximation algorithm challenging multiple-robot path planning
problem. paper, present simple algorithm multi-robot scenario exploit
approximation algorithm single robot case, recursive-greedy algorithm,
discussed Chekuri Pal (2005), (almost) preserve approximation guarantee,
avoiding exponential increase running time.
algorithm, sequential-allocation, successively applies single robot path planning algorithm k times get paths k robots. Hereby, planning jth path, approach takes
account locations already selected previous j 1 paths. Committing (approximately) best possible path stage moving next stage makes approach
greedy terms paths.
pseudocode algorithm presented Algorithm 1 Fig. 2 illustrates approach
three robots. algorithm takes input budget constraint B, number available robots
k, starting finishing location available robot s1 , . . . , sk , t1 , . . . , tk complete set
discrete observation locations V select from. Let us assume single robot path
planning algorithm, SP P , takes input starting location si , finishing location ti , budget
constraint B, set locations already selected observation set possible observation
locations visited. Fig. 2, three robots starting finishing location.
planning path first robot (i = 1), input set already selected observation
locations empty. subsequent stage, commit locations selected previous
stages pass already observed locations input next call SP P . Let Ai1 locations already visited paths P1 , . . . , Pi1 , A0 = . residual information, IAi1
path P unvisited locations defined IAi1 (P) = I(Ai1 P)I(Ai1 ). verified
normalized, monotonic submodular function, residual information
712

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Figure 2: Illustration sequential allocation algorithm three robots, starting finishing
location.

IAi1 . Thus, stage use SP P find informative path respect modified
residual sensing quality function. Fig. 2, planning P2 , locations selected P1 considered sensing quality function used IP1 . Similarly, evaluating path P3 , locations
selected P1 P2 taken account sensing quality function used IP1 P2 .
Perhaps surprisingly, straight-forward greedy sequential allocation approach guaranteed perform almost well black box algorithm used path planning. formally,
assume -approximate algorithm single robot problem, i.e. algorithm which,
starting budget B monotonic submodular function f , guaranteed find path recovering least fraction 1/ optimal information achievable budget.
case, following theorem proves sequential allocation procedure approximation
guarantee close well:
Theorem 1. Let approximation guarantee single path instance informative
path planning problem. sequential-allocation algorithm achieves approximation guarantee (1 + ) MIPP problem. special case, robots starting
(si = sj , i, j) finishing locations (ti = tj , i, j), approximation guarantee improves
1/(1 exp (1/)) 1 + .
work Blum et al. (2003) proved Theorem 1 special case additive (modular)
sensing quality functions. paper, extend result general submodular functions.
example -approximate algorithm single robot problem, next section,
review recursive-greedy algorithm proposed Chekuri Pal (2005). algorithm
approximation guarantee O(log2 |P |), |P | number locations visited
optimal solution P . Hence, algorithm, performance guarantee obtained
MIPP problem sequential allocation O(log2 |P |) well2 .
2. order apply sequential allocation recursive-greedy algorithm, can, planning ith path, simply
pass set nodes visited previous 1 paths input parameter R, illustrated Algorithm 2.

713

fiS INGH , K RAUSE , G UESTRIN & K AISER

(a)

(b)

(c)

(d)

Figure 3: Illustration performance simple greedy approaches compared optimal approach.

4. Note Greedy Path Planning
work Krause et al. (2008) considered sensor placement problem, subset V
k locations selected order maximize mutual information, without considering path
costs. exploiting submodularity property MI, proved discretization V
fine enough GP satisfies mild regularity conditions, greedily selecting locations based
criterion near-optimal. specifically, greedy algorithm (which call GreedySubset
following), selecting first locations Ai , picks location maximum residual
information i.e. vi+1 = argmaxv IAi ({v}) sets Ai+1 = Ai {vi+1 }. GreedySubset hence
iteratively adds locations increase mutual information most. Using result proposed
Nemhauser et al. (1978) performance greedy algorithm submodular functions,
work Krause et al. (2008) showed GreedySubset selects sets achieve mutual
information least (1 1/e) OPT , OPT optimal mutual information among
sets size, small error incurred due discretization.
strong performance greedy algorithm unconstrained (no traveling costs locations) case motivates question whether simple greedy approach could perform
well complex path planning setting considered paper. difficult
give general impossibility statement question, several natural extensions greedy
algorithm shown perform arbitrarily badly.
example, consider setting define cost C(A) set nodes cost
cheapest path connecting nodes A. Assuming locations Ai already picked,
natural extension greedy algorithm add location v improves
benefit-cost ratio
IA (v)
v = argmax
,
vV\A CAi (v)
714

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

CAi (v) = C(Ai {v}) C(Ai ) increase cost adding v already selected
locations Ai .
Fig. 3 shows small example illustrating intuitive greedy procedure perform arbitrarily poorly compared optimal approach. example illustrated Fig. 3a,
starting finishing location 2B total available budget. reward associated observation location displayed parenthesis corresponding locations.
ease illustration, assume reward associated observation location
modular function (instead submodular function). Traveling cost associated
corresponding edges example. Starting location s, possible options first observation
location select either o1 , g1 t. Observation location o1 lead cluster n (=
B/) locations separated traveling cost associated reward 1 (except o1
associated reward ). o1 separated g1 traveling cost B/2
rest locations cluster assumed unreachable location outside
cluster. Observation location g1 lead series (= B/) locations, separated
previous one traveling cost associated reward 2.
illustrated Fig. 3b, optimal approach would select o1 first location, paying
traveling cost B/2 earning small reward . robot observes o1 ,
observe rest (B/ 1) locations cluster, providing reward 1 return back
spending total 2B traveling cost. Thus, total reward collected optimal
approach, example, 1(B/ 1) + .
illustrated Fig. 3c, greedy approach based reward-cost ratio select g1
first observation location (with highest reward cost ratio 2). Since o1 distance B/2
away g1 provides reward , approach continue along series, observing locations till gm returning back s. Total reward collected approach
2B. hand, simple greedy approach based reward (as illustrated Fig. 3d)
simply select first observation location return back s, collecting total reward
1. Since ratio B/ arbitrarily large 0, reward collected simple intuitive
greedy approaches (2B 1) arbitrarily poor compared reward collected
optimal approach (1(B/ 1) + ).
Although, reward function considered example assumed modular function, submodular optimal reward arbitrarily large, compared submodular reward
collected simple greedy approaches (the difference submodular modular reward
depend correlation selected observation locations). insight necessitates
development complex algorithms path planning considered paper.

5. Recursive-greedy Algorithm
review recursive-greedy algorithm proposed Chekuri Pal, since forms
basis efficient single robot path planning approach. basic strategy algorithm
divide-and-conquer approach. path starting location (s) finishing location (t)
middle location (vm ) number locations (or different 1)
either side vm path. Thus, problem finding path divided
two smaller subproblems finding smaller subpaths (s vm vm t) concatenating
small subpaths. number locations, subpaths either side
middle node different costs, i.e. budget total path split two smaller

715

fiS INGH , K RAUSE , G UESTRIN & K AISER

1

Algorithm:recursive-greedy (RG)

Input: s,t,B,R,iter
Output: informative path P
2 begin
3
c(s, t) > B
4
return Infeasible;
5
P s, t;
6
Base case: iter=0 return P;
7
fR (P);
// Trying location middle node
8
foreach vm V
// Trying possible budget splits
9
1 B1 B
// Planning subpath one side middle node
10
P1 RG(s, vm , B1 , R, iter 1);
// Planning subpath side middle node,
committing nodes selected first subpath
11
P2 RG(vm , t, B B1 , R P1 , iter 1);
12
fR (P1 P2 ) >
13
P P1 P2 ;
14
fR (P);
15
return P;
16 end
Algorithm 2: Recursive greedy algorithm single robot instance MIPP proposed Chekuri Pal
(2005). Output path P provides approximation guarantee IX (P) IX (P )/ d1 + log ke, represent
submodular reward function, P represent optimal path k represent number nodes optimal
path.

budgets (not necessarily equal), one subpath. Searching best middle location
trying possible budget splits either side middle location, optimizing complete
path, would result exhaustive search optimal solution therefore prohibitively expensive. Instead performing exhaustive search, recursive-greedy algorithm
follows simple greedy strategy, wherein possible budget splits possible
middle nodes considered, one first plan optimal subpath one side middle location,
commit planned subpath optimize subpath side. path,
consisting independently optimized subpath svm subpath vm optimized subject observation locations already selected vm , may result suboptimal path. Nonetheless,
Chekuri Pal proved path approximation guarantee O(log2 |P |),
|P | number locations visited optimal solution P .
order implement greedy approach, recursive calls planning second subpath similarly done sequential allocation optimize residual reward function
measures incremental gain taking account information already obtained locations selected first subpath. formally, let set P1 refer locations selected
first subpath, consider residual submodular function fP1 set locations
716

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

fP1 (A) = f (A P1 ) f (P1 ). P2 set locations second subpath, holds
f (P1 ) + fP1 (P2 ) = f (P1 P2 ). Hence, first recursive call (with submodular function f )
returns path P1 , second recursive call (with submodular function fP1 ) returns path P2 ,
sum scores subproblems exactly equals score concatenated path.
Let us formalize intuitive description recursive-greedy algorithm. pseudocode algorithm presented Algorithm 2. inputs algorithm starting
location s, finishing location t, upper bound path cost B, parameter R defines
residual submodular function function needs maximized defined
fR (P) = f (P R) f (R), parameter represents recursion depth. maximum
number locations selected stage calculated using recursion depth 2i .
base case (recursion depth = 0), algorithm simply returns path P = (s, t) (if
cost c(s, t) B).
recursive case, algorithm searches path maximum reward iterating
possible locations (that reached given budget constraint) middle locations
(Line 8), i.e. locations could possibly split required path two subpaths equal number locations either side. middle location, algorithm explores possible
splits available budget (Line 9) across two subpaths either side middle location.
Reducing recursion depth 1, subpath, ensures number locations
selected either side middle location. However, exploring second subpath,
algorithm commits locations selected first subpath passing input
residual parameter (Line 11). two subpaths found way concatenated
provide complete path. algorithm stores best possible path already
searched problem space, replacing better path whenever path found.
5.1 Structure Search Problem
instructive consider recursive structure generated recursive-greedy algorithm.
Fig. 4 illustrates example structure running recursive-greedy lake sensing
application given starting (s) finishing (t) location upper bound path cost
(B). search using recursive-greedy represented graphically sum-max tree.
root max node representing objective finding path maximum possible reward,
cost path bounded budget B. max node, children
search tree represent sum nodes corresponding sum rewards collected two subpaths
either side middle location. Therefore, end first iteration, graphical representation max node root several sum nodes children, feasible middle
location possible budget splits around middle location. partial tree end first
iteration shown Fig. 4a.
sum node, formed end first iteration, algorithm applied recursively left subpath. Thus first step second iteration seeks find vm path
maximum possible reward budget constraint corresponding respective budget split
sum node. Then, approach commits selected locations left side, recurses right subpath (to search vm path), given selected locations. result,
sum node two max nodes children, representing objective find subpath
maximum reward either side selected middle location. algorithm greedy
commits locations selected first subpath optimizing second subpath.

717

fiS INGH , K RAUSE , G UESTRIN & K AISER

(a) recursive-greedy first iteration

(b) recursive-greedy second iteration

Figure 4: Illustration recursive greedy algorithm, proposed Chekuri Pal, lake sensing application.
Sum-max tree presents graphical representation problem space.

partial tree end second iteration shown Fig. 4b. Despite greedy nature,
recursive-greedy approach provides following approximation guarantee:
Theorem 2. (Chekuri & Pal, 2005) Let P = (s = v0 , v1 , . . . , vk = t) optimal s-t-path
solution. Let P path returned RG(s, t, B, R, i). d1 + log ke, IX (P)
IX (P )/ d1 + log ke.
1
Hence, recursive-greedy solution P obtains least fraction d1+log
optimal
2 ke
information, k n, i.e. total number locations traversed optimal path
smaller total number locations discretized spatial domain. Referring back Theorem 1, MIPP problem using recursive-greedy single robot path planning approach,
= d1 + log ke.

5.2 Running Time
inspecting recursive structure, running time recursive-greedy algorithm seen
quasi-polynomial. specifically, running time algorithm O((M B)O(log2 ) ),
B budget constraint = |V| total number possible observation locations.
So, even small problem = 64 locations, exponent 6, resulting
large computation time, making algorithm impractical observing several real world physical
processes.
large computational effort required recursive-greedy attributed two issues: 1)
large branching factor max nodes recursion tree (sum nodes possible
middle node possible budget split across middle node) 2) (possibly) unnecessary
recursion exploring subtrees problem space provide us improved reward compared current best solution. following sections, propose two complementary
approaches (can used independently others) intended ameliorate concerns: spatial decomposition technique, branch bound approach. Spatial decomposition
718

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Starting node

Starting cell Cs

Ending node

Ending cell Ct

Cs

Middle cell Cm
Ct
P1, budget = B
P2, budget = BeB

Incoming
path P1



b

(a) Spatial decomposition phenomenon



c

Smoothed path

Exiting path
P2

Cell center

(b) Cell paths travel within cells

(c) Cell paths path smoothing

Figure 5: Illustration spatial decomposition recursive-eSIP using surface sensing lake environment
example. sensing domain ((a), top) decomposed grid cells ((a), bottom). recursive-eSIP jointly optimizes
cell-paths ((b), top) allocations experiments cells ((b), bottom). Within cells, locations connected
cell center. recursive-eSIP concatenates paths between-cell within cell paths ((c), top) finally heuristics
applied eMIP smooth path ((c), bottom).
(discussed Section 6) seeks reduce high branching factor (i.e. number sum nodes
search tree) clustering sensing locations running recursive-greedy
clusters instead actual sensing locations. Branch bound (discussed Section 7) seeks
avoid unnecessary recursion maintaining lower upper bound possible reward
subtree search tree pruning tree accordingly. two approaches, together
sequential-allocation (discussed Section 3) provide efficient algorithm multi robot
informative path planning.

6. Spatial Decomposition Approximating MIPP SD-MIPP
section, explain detail process spatial decomposition corresponding improvements running time achieved process. approach assumes traveling
cost arbitrary locations given euclidean distance.
intuitive approach improving running time spatially decompose sensing
region smaller sub-regions, containing cluster sensing locations. thus think
planning informative paths deciding sub-regions explore, deciding
locations sense within sub-regions. idea exploring sub-regions motivates
decomposition sensing domain smaller regions (cells). run recursivegreedy algorithm cells instead actual sensing locations. Since size cellular
region small, traveling cost within cell ignored3 . ignore traveling cost
within cells, sensing locations inside selected cells chosen using GreedySubset
approach (as proposed Krause et al., 2008), taking advantage strong approximation guar3. may robotic platforms non-holonomic motion constraints make small motions much challenging thus traveling cost smaller distances within cell may become non-negligible. systems,
large traveling cost smaller motions, system specific constraints may possible account
performing cellular decomposition greedy algorithm may constrained select locations
close).

719

fiS INGH , K RAUSE , G UESTRIN & K AISER

antee unconstrained setting discussed Section 4. Fig. 5 presents illustration
approach explained follows:
1. decompose sensing region, containing finitely many discrete sensing locations (c.f.,
e = {C1 , C2 , . . . , CN } (c.f., Fig. 5a,
Fig. 5a, top), collection non-overlapping cells V
bottom). distance two cells defined distance centroids
cells. cell Ci contains set locations vi V, representing sensing locations, coordinates locations, euclidean metric space, lie within
boundary containing cell.
2. approximate original MIPP problem spatially decomposed MIPP problem,
e SD-MIPP, jointly optimize cell-paths V
e (c.f., Fig. 5b,
SD-MIPP problem V.
top) using recursive-greedy algorithm, allocation observations within
cells visited paths using GreedySubset algorithm. Thus, allocating measurements cell, ignore traveling cost within cell (c.f., Fig. 5b, bottom). Since
cells large, simplification leads small additional cost
SD-MIPP solution transformed back original MIPP problem.
3. transfer (approximate) SD-MIPP solution, consisting cell-path allocation
observations cells (c.f., Fig. 5c, top), back original MIPP problem. smooth
path (c.f., Fig. 5c, bottom) using heuristics, e.g. tour-opt heuristics discussed
Lin (1965).
Dual optimization cell paths budget allocation observations within visited cell
motivated splitting available budget budget Bt traveling cells budget making experiments sensing locations within visited cells. split easily
incorporated recursive-greedy algorithm well required paths recursivegreedy optimized observation locations cells containing locations. Formally,
SD-MIPP problem following: want find path PC = (Cs = Ci1 , . . . , Cil = Ct ),
robot starting cell Cs containing starting node finishing cell Ct containing
finishing node t, travel cost Bt . travel budget measured terms
distances centers visited cells, cost traveling within cells defined 0.
addition, visited cell Cij PC , want select set sensing locations Aij ,
total experimental cost (for making observations within visited cells) upper bounded
, i.e. C(Ai1 Ail ) , information I(Ai1 Ail ) large possible.
optimal SD-MIPP solution uses optimal split budget Bt . simplify
presentation, rescale costs cells form uniform grid quadratic cells
width L, assume sensing cost Cexp constant locations. assumptions
easily relaxed, allow us relate path costs number cells traversed,
simplify discussion.
following lemma states exists SD-MIPP version (PC ) MIPP-optimal
path (P ), (almost) cost, information.
Lemma 3. Let P = (s = v0 , v1 , . . . , vl = t) optimal s-t-path solution MIPP, constrained
budget B. exists corresponding SD-MIPP path PC = (Cs = Ci1 , . . . , Cil = Ct ),

traversing locations Ai1 Ail , budget 2 2B + 4L collecting
information.

720

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Algorithm: eMIP
e k, starting / finishing locations s1 , . . . , sk , t1 , . . . , tk
Input: B,
Output: collection informative paths P1 , . . . , Pk
2 begin
3
Perform spatial decomposition cells;
4
Find starting ending cells Csi Cti ;
5
R ;
// Path planning robot
6
= 1 k
// Trying different combination traveling
experimental budget
e
iter = 0 blog2 Bc
7
iter
e
8
B 2 ;
0
9
Piter
recursive-eSIP (Csi , Cti ,Be ,R,iter);
0
10
Smooth Piter
using tour-opt heuristics;
0 );
11
Pi argmaxiter I(Piter
12
R R Pi ;
13
return P1 , . . . , Pk ;
14 end
Algorithm 3: eMIP algorithm informative multi robot path planning. Procedure Line 7 Line 11
1

effectively implements eSIP algorithm. eSIP repeated (Line 6) using sequential allocation described
Section 3 (Line 6) get paths robot i.

present algorithm finding approximately optimal solution SD-MIPP,
show solution
gives us approximate solution original MIPP problem,
slightly increased cost 2 2B + 4L, ensuring optimal solution MIPP exists
corresponding SD-MIPP setting.
6.1 Algorithm SD-MIPP
e smooths paths
eMIP algorithm solves SD-MIPP problem V
selected observation locations provide solution MIPP. Let us first clarify algorithmic
nomenclature specifically:
recursive-eSIP: implements approach similar recursive-greedy selecting path
e greedily selects observation locations within visited cell using GreedySubset;
V
eSIP: iterates different values traveling budget calling recursive-eSIP corresponding values input smoothing output path recursive-eSIP using
tour-opt heuristics;
eMIP: effectively implements sequential-allocation eSIP single robot path planning algorithm
complete algorithm works follows: outer loop (Line 6 Algorithm 3) implements
sequential allocation algorithm performing path planning multiple robots. procedure
721

fiS INGH , K RAUSE , G UESTRIN & K AISER

inside outer loop (Line 7 Line 11 Algorithm 3) implements eSIP algorithm. procedure iterates different combination traveling experimental budget, allocating Bt
(= 2iter ) total budget traveling cells, (= Bt ) making experiments within visited cells. Stepping Bt powers 2 results faster performance
(log2 instead iterations). increase input budget factor 2, exponential
increase traveling budget guaranteed try traveling budget, Bt (= 2iter BtApp ) BtApp
traveling budget best approximation path. Since overall budget increased
factor 2, remaining experimental budget guaranteed experimental
budget corresponding best approximation path. Therefore, exponential increase traveling
budget increase required budget factor 2. eSIP procedure
calls recursive-eSIP (explained Algorithm 4), selecting cells visit, greedily allocating
observations visited cells. Finally, eSIP procedure calls tour-opt heuristics smooth
output path recursive-eSIP.
recursive-eSIP procedure takes input starting cell Cs , finishing cell Ct , experimental budget , residual R indicating locations visited thus far (initially passed empty
eMIP), maximum recursion depth, iter (initially passed log2 Bt eMIP). then:
1. Iterate possible choices middle cells Cm (such are, almost, equal
fe (of available experimental
number cells either side Cm ) budget splits B
budget ) spend making experiments subpaths Cs Cm Cm Ct
fe either linearly (more accurate) exponentially
(c.f., Fig. 5b). budget splits B
(faster) spaced, described below.
2. Recursively find subpath P1 Cs Cm , constrained budget B 0 , leaving remaining
budget (Be B 0 ) subpath P2 . Reducing recursion depth (iter) 1,
subpaths P1 P2 , ensures equal number cells visited either side Cm .
lowest level recursion depth 0 signifies cell selected corresponding path.
lowest recursion level, use GreedySubset algorithm (c.f., Section 4)
select sensing locations based residual information function IR constrained
budget B 0 . illustration, black locations middle cell Cm Fig. 5b bottom,
selected GreedySubset algorithm budget B 0 = 4 provide
maximum improvement mutual information.
3. commit locations selected P1 , recursively find subpath P2
Cm Ct , experimental budget B 0 . Committing locations selected P1
requires greedily select sensing locations lowest recursion level based
residual information function IRP1 .
4. Finally, concatenate locations obtained P1 P2 output best path
algorithm (c.f., Fig. 5c, top).

6.2 Linear vs. Exponential Budget Splits
Step 1 recursive-eSIP procedure (as explained Section 6.1) considers different budget splits
fe left right subpaths. Similar recursive greedy algorithm, one choose
B0 B
fe = {0, 1, 2, 3, . . . , 1, } linearly spaced. Since branching factor proportional
B
number considered splits, linear budget splits leads large amount computation effort.
722

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

1

2
3
4
5
6
7

8
9

10
11
12
13
14
15

Algorithm: recursive-eSIP
Input: Cs , Ct , , R, iter
Output: informative path P Cs Ct
begin
(d(Cs , Ct ) > 2iter L) return Infeasible;
// Greedy node selection within starting finishing cell
P GreedySubsetBe ,R (vi : vi Cs Ct );
(iter = 0) return P;
reward IR (P);
// Trying cell middle cell
foreach Cm C
// Trying possible budget split
fe
B 0 B
// Planning subpath one side middle cell
P1 recursive-eSIP (Cs , Cm , B 0 , R, iter 1);
// Planning subpath side middle cell
committing nodes selected first subpath
P2 recursive-eSIP (Cm , Ct , B 0 , R P1 , iter 1);
(IR (P1 .P2 ) > reward)
P P1 .P2 ;
reward IR (P);
return P;
end
Algorithm 4: recursive-eSIP procedure path planning.

fe = {0, 20 , 21 , 22 , . . . , 2log2 } {Be ,
alternative consider exponential splits: B
0
1
2
2 , Be2 , Be2 , . . . , 0}. case, branching factor logarithmic experimental
budget. Even though guaranteed find solutions linear budget splits,
theoretically (as given Lemmas 4 7) empirically (as illustrated Fig. 14c
14d) show performance gets slightly worse case, compared significant
improvement running time. addition two ways splitting budget, confe = {0, 20 , 21 , 22 , . . . , 2log2 }),
sidered one-sided exponential budget splits (i.e. B
reduces branching factor factor 2 compared exponential splits defined above. Although provide theoretical guarantees third possibility, experimentally found
perform well (c.f., Section 8).
6.3 Algorithmic Guarantees
algorithm greedy two ways:
recursion depth 0, sensing locations selected greedily based mutual information criterion.
exploring subpath P2 , recursive-eSIP procedure commits locations selected
subpath P1 .
723

fiS INGH , K RAUSE , G UESTRIN & K AISER

Due greedy steps, recursive-eSIP approximation algorithm necessarily find optimal solution. following lemma, however, guarantees performance bound
path output eSIP procedure:
Lemma 4. Let PC = (Cs = C1 , . . . , Ck = Ct ) optimal solution single robot instance
e optimal set locations selected within
SD-MIPP, constrained budget B,
b solution returned eSIP. I(P)
b 11/e I(P ).
visited cell Cj . Let P
C
1+log k
2

6.4 Solving MIPP Problem
Now, need transfer approximately optimal solution obtained SD-MIPP back MIPP.
path cells, observation locations selected greedily within visited cell, transformed path observation locations connecting locations selected cell Cij
cells center, (as indicated Fig. 5b bottom), connecting selected centers path (Fig. 5c
top), finally expanding resulting tree tour traversing tree twice (by traversing
edge tree direction, set nodes connected tree converted
set nodes connected path). traversal results tour twice
long shortest tour connecting selected vertices. (Of course, even better solution
obtained applying improved approximation algorithm TSP, algorithm proposed
Christofides, 1976). following Theorem completes analysis algorithm:
Theorem 5. Let P optimal solution single robot instance MIPP problem
b achieving information
budget constraint B. Then, eSIP algorithm find solution P


11/e
), whose cost 2(2 2B + 4L)(1 + L 2 )
b
value least I(P)
I(P
1+log2 N
Cexp


fe 2(2 2B + 4L)(1 + L 2 )N log2 32
case linear budget split B
Cexp

fe .
case exponential budget split B
performance guarantee w.r.t. number cells N instead number sensing
locations, case work Chekuri Pal (2005). However, input budget
constraint violated amount based size cells spatial decomposition.
violation input budget constraint leads tradeoff computation effort additional
cost incurred tuned based specific application requirements. size cell
small (in limit reducing cell observation location), number cells large
result higher computation time reduced additional cost. hand,
size cell large, computation time small algorithm needs pay higher
additional traveling cost.
Running time analysis eSIP straightforward. algorithm calls routine recursive-eSIP
log2 B times. TI time evaluate mutual information I, time computing
greedy subset Tgs (Line 4, Algorithm 4) O(NC2 TI ), NC maximum number
locations per cell. recursion step try cells reached available traveling budget (Line 7, Algorithm 4). possible experimental budget split, try
fe among two subpaths P1 P2 (Line 8,
(linearly exponentially spaced) splits B
e following proposition states
Algorithm 4). recursion depth would log2 (min(N, B)).
running time eSIP:

724

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Proposition 6. worst case running
time eSIP linearly spaced splits experimental
budget Tgs log2 B(N B)log2 N , exponentially spaced splits experimental
budget Tgs log2 B(2N log2 B)log2 N
Comparing running time recursive-greedy algorithm (O((M B)O(log2 ) )), note
reduction B log2 B base, log number locations (log2 ) log
number cells (log2 N ) exponent. two improvements turn impractical recursivegreedy approach much viable algorithm.
Varying number cells (and correspondingly size cell) results trade-off
computation effort traveling cost within cell ignored eSIP
algorithm. Proposition 6 states computation effort directly proportional number
cells N. Therefore increase number cells, corresponding computation effort
eSIP algorithm increase. hand, reducing number cells result
increasing size cell. Since eSIP algorithm ignores traveling cost within
cell, larger cell size imply larger traveling cost ignored eSIP algorithm hence
larger overshoot cost resultant output path input budget B. Lemma 3 states
corresponding additional cost incurred output path calculated using eSIP algorithm terms
cell size L. Based specific application requirements, one decide appropriate number cells fine tune trade-off computation effort additional path cost
incurred. Fig. 14f shows corresponding collected reward vary significantly
varied number cells application observing temperature lake environment.

7. Branch Bound
spatial decomposition technique effectively enables trade-off running time complexity achieved approximation guarantee. However, eSIP algorithm still solve
super-polynomial, albeit sub-exponential, search problem. following, describe several
branch bound techniques allow reduction computation effort making
approach tractable real world sensing experiments.
7.1 Problem Representation
specific structure search space representation motivated many proposed branch
bound approaches. Similarly recursive structure recursive-greedy algorithm (discussed
Section 5), recursive-eSIP problem structure represented sum-max tree,
shown Fig. 6a. small difference exists selection observation locations along
solution path. case recursive-greedy, sum nodes traversed selected
path represents physical observation location. However, case recursive-eSIP, sum
node selected path represents cell corresponding traversed path. observation
locations sum node selected greedily, within corresponding cell, based available
experimental budget. Using sum-max tree problem structure, explain proposed
branch bound approaches prune parts tree provide improvement
currently known best solution path. proposed branch bound techniques
outlined recursive-eSIP procedure presented Algorithm 5.

725

fiS INGH , K RAUSE , G UESTRIN & K AISER

1

Algorithm: recursive-eSIP branch bound
Input: Cs , Ct , , R, iter, rewardLB,
Output: informative path P Cs Ct

2
3
4
5
6
7
8
9
10

begin
(d(Cs , Ct ) > 2iter L)
return Infeasible
P GreedySubsetBe ,R (vi : vi Cs Ct );
(iter = 0)
return P
f ilterCells Ci Ci s.t. d(Cs , Ci ) 2iter L/2 d(Ci , Ct ) 2iter L/2 ;
foreach Cm f ilterCells
fe
B 0 B

12

// Calculating upper bound using GreedySubset
U BP1 calculateU B(Cs , Cm , B 0 , iter 1, R);
U BP2 calculateU B(Cs , Cm , B 0 , iter 1, R);

13

((U BP1 + U BP2 ) > rewardLB)

11

15

// Calculating lower bound P1
heurP1 heuristicOP(Cs , Cm , B 0 , R, iter 1);
LBP1 max(IR (heurP1 ), rewardLB U BP2 );

16

// Recursive search P1
P1 recursive-eSIP (Cs , Cm , B 0 , R, iter 1, LBP1 , );

14

18

// Calculating lower bound P2
heurP2 heuristicOP(Cm , Ct , B 0 , R P1 , iter 1);
LBP2 max(IRP1 (heurP2 ), rewardLB IR (P1 ));

19

// Recursive search P2
P2 recursive-eSIP (Cm , Ct , B 0 , R P1 , iter 1, LBP2 , );

17

(Iresid (P1 .P2 ) > rewardLB)
P P1 .P2 ;
rewardLB Iresid (P1 .P2 );

20
21
22
23
24

return P;
end

Algorithm 5: recursive-eSIP procedure branch bound approaches efficient path planning.
procedure corresponds max node search space input rewardLB representing calculated lower
bound. sum node search space effectively combines recursive calls subpaths (implemented Line 16 Line 19). Since recursion reduces traveling budget (2iter L) half, initial pruning
Line 8 removes cells reached next recursion step. Line 15 Line 18 calculate lower
bound subpaths either side selected middle cell. Input represents scaling factor one
b 11/e I(P )
sub-approximation heuristics. Approximation guarantee output path P given I(P)
1+log2 N

submodular reward function P optimal path.

726

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

(a) sum-max tree

(b) Pruning sum nodes

(c) Tighter lower bounds

Figure 6: Illustration branch & bound approach. (a) shows sum-max tree representing search space.
max node selects middle cell budget allocation, sum node combines two subpaths either side
selected middle cell. (b) shows upper bound sum node (e.g. value 18 Sum2 ), smaller
lower bound parent max node (e.g. value 20 Max1 ) used prune branches search tree. (c)
shows lower bound max nodes tightened (e.g. value 7 Max6 improved 9 using upper bound 11
sibling axn7 lower bound 20 grandparent Max1 ) allow pruning otherwise may
possible (e.g. pruning Sum4 upper bound value 8).

7.2 Efficient Search Problem Space
naive implementation recursive-eSIP, entire recursion tree would eventually traversed.
However, many considered subpaths may highly suboptimal. Several heuristics
proposed past similar path planning problem empirical efficiency claims, without
approximation guarantee. use one heuristic (c.f., Chao et al., 1996, hereafter referred
heuristicOP) calculate solution path satisfying budget constraints, trying maximize collected reward. Since path efficiently calculated small computation
effort, use path initial known solution. total reward collected path used
input lower bound (input variable rewardLB Algorithm 5) root max node. Since
computation effort associated heuristicOP small, used rest max nodes
search tree calculate lower bound nodes (discussed detail Section 7.2.2).
child sum nodes, upper bound collected reward calculated exploiting submodularity reward function (procedure calculateU B called Line 11 12
727

fiS INGH , K RAUSE , G UESTRIN & K AISER

1

Algorithm:calculateUB

Input: Cs , Ct , , iter, R
Output: upper bound UB information gain
2 begin
// Selecting set reachable cells
3
possibleCells Ci Ci s.t. d(Cs , Ci ) + d(Ci , Ct ) 2iter L ;
// Greedy node selection within reachable cells
4
P GreedySubsetBe ,R (vi : vi possibleCells);
5
UB Iresid (P);
6
return U B;
7 end
Algorithm 6: Procedure calculating upper bound max nodes. Upper bound child max nodes added
obtain upper bound parent sum node.

Algorithm 5 explained detail Algorithm 6). need process sum node
children upper bounds greater current best solution (Line 13 Algorithm 5).
current best solution parent max node updated collected reward
child sum nodes greater previously known best solution reward (Line 20 Algorithm 5).
Fig. 6b presents graphical illustration concept. completely exploring branch
Sum1 , current best solution value 20 updated lower bound Max1 . smaller lower
bound (18) Sum2 results pruning sub-branch rooted Sum2 . However, nodes Sum3
upper bound (24) higher current best solution (20), need explored
potentially provide solution path better reward current best solution.
7.2.1 U PPER B OUND Sum N ODES
Algorithm 6 presents calculateUB procedure obtaining upper bound collected
reward max node used recursive-eSIP (Line 11, 12 Algorithm 5) pruning
search space. upper bound sum node calculated adding upper bound
child max nodes. calculate upper bounds relaxing path constraints, finding
optimal set reachable locations path (P1 P2 ). Since problem NPhard, exploit submodularity reward function approximate using GreedySubset
algorithm. Fig. 7 illustrates example calculating upper bound. first calculate set
reachable locations w.r.t. remaining traveling budget. locations contained within
cells Ci reachable cells Cs Ct (Line 3 Algorithm 6). boundary reachable
locations illustrated ellipse Fig. 7.
Then, run GreedySubset algorithm greedily select best possible locations
possible reachable locations (Line 4 Algorithm 6). example, Vi Vj selected
using GreedySubset Fig. 7. Since GreedySubset guarantees constant factor (11/e) approximation (Nemhauser et al., 1978), multiplying resulting information value (1 1/e)1 provides
upper bound information achievable path (and hence corresponding max child
node). Therefore, Fig. 7 reward collected locations Vi (MI(Vi )) Vj (MI(Vj ))
multiplied factor (1 1/e)1 provides upper bound collected reward. However, since
path cost constraint relaxed, total cost observing Vi Vj (dsi + dij + djt ) may

728

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Figure 7: Illustration calculating upper bound using GreedySubset.
available budget B. Fig. 6c, example, use calculateUB get upper bounds
13 Max6 11 Max7 , resulting upper bound 13 + 11 = 24 Sum3 4 .
7.2.2 L OWER B OUND Max N ODES :
Effective pruning subtree rooted sum nodes would require calculating lower bounds
parent max node efficiently. One way calculate lower bounds exploring one branch
completely (as explained Section 7.2). procedure computationally expensive. Instead, implement two ways acquiring lower bounds faster: Using heuristicOP 5
(as explained obtaining initial best solution), based current best solution
grandparent max node. use larger two different lower bounds.
Fig. 6c illustrates graphical presentation procedure calculating lower bounds
using current best solution grandparent max node. call procedure altLB. calculate upper bound (exploiting submodularity) 11 Max7 node. node Max6 , since
grandparent node Max1 lower bound 20, subtree rooted Max6 provide
reward least 9 (20 - 11) explored further. lower bound value 9 calculated using
altLB tighter lower bound provided heuristic (7), enabled pruning branch
Sum4 (with upper bound 8).
Lines 15 18 Algorithm 5 illustrate altLB procedure. using altLB, lower
bound subpath P1 (in Line 15), calculated using upper bound subpath P2 .
hand, calculating lower bound using altLB subpath P2 (in Line 18), exact reward
P1 (IR (P1 )) used instead upper bound. Since actual reward always tighter
calculated upper bound, lower bound calculated subpath P2 (using altLB) tighter
lower bound calculated subpath P1 . motivates exploring subpath higher
experimental budget first upper bound unexplored subpath (with lower experimental budget) tighter making lower bound first subpath tighter6 . heuristic
4. even compute tighter online bounds maximizing monotonic submodular functions, discussed
Nemhauser et al. (1978).
5. heuristicOP proposed modular functions found provide good solution paths even
submodular setting.
6. note higher experimental budget, GreedySubset (used calculate upper bound) potentially
select locations far apart (since path cost constraint ignored). path cost constraint
incorporated, locations become infeasible make upper bound loose.

729

fiS INGH , K RAUSE , G UESTRIN & K AISER

exploring subpath higher experimental budget first exploited improve
computation effort.
Maintaining lower bound node search tree makes approach anytime,
i.e. search terminated point even completed. current best solution
graph already searched available early termination. Early termination
particularly advantageous scenarios required obtain best possible path traversed
robot hard upper bound available time calculate path.
7.2.3 N ODE RDERING
illustration Fig. 6b demonstrates better currently known solution likely help
increased pruning search tree. order improve current best solution faster,
max node explore sum nodes decreasing order upper bounds. intuitive
idea higher upper bound likely indicator higher reward value. Thus upper bound
Line 11 12 Algorithm 5 calculated separately rest computation (in
loops implemented Line 9 10 Algorithm 5) executed decreasing order
upper bound. approach similar node ordering employed improve pruning
efficiency Depth First Branch Bound (DFBnB) (Zhang & Korf, 1995).
7.2.4 UB - APPROXIMATION
Upper lower bounds derived explained potentially loose. address
issue, trade collected information improved execution time, introducing
several sub-approximation heuristics. first heuristic, node ordering performed,
explore top K sum nodes. heuristic, termed sub-approximation (Ibaraki et al.,
1983), found effective practice.
second heuristic, instead comparing lower bound parent max node directly
upper bound child sum nodes (when deciding subproblems prune), scale
lower bound factor > 1 (Line 13 Algorithm 5). scaling often allows us
prune many branches would pruned otherwise. Unfortunately, optimistic
pruning potentially cause us prune branches pruned, decrease information collected algorithm. practice, sufficiently small values,
procedure speed algorithm significantly, without much effect quality solution. performance comparison computation effort collected reward using several
real world sensing datasets discussed Section 8.2.

8. Experimental Results
performed several experiments in-field well simulation (using real world sensing
datasets) demonstrate usefulness proposed algorithm several diverse environmental
sensing applications. In-field experiments performed using Networked InfoMechanical
System (NIMS) (Jordan et al., 2007), tethered robotic system. Real world sensing datasets used
performing scaling multi robot experiments simulation collected using either
network static sensors robotic boat.

730

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

(a) Schematic representation system

(b) Image captured performing path planning

Figure 8: Aquatic based NIMS (NIMS-AQ)is platform NIMS family used performing path planning
lake environment.

8.1 In-field Experiments
Several experiments performed in-field demonstrate applicability modeling phenomenon Gaussian Process using eMIP perform path planning diverse aquatic sensing applications. include river monitoring application objective studying salt
concentration, lake monitoring several applications interest limnologists.
applications, NIMS used monitor cross-section (two dimensional vertical plane
environment) aquatic environment. phenomenon interest modeled Gaussian Process use mutual information criterion submodular reward function, quantifying informativeness observation locations. learned Gaussian Process model mutual
information objective provided input eMIP subset locations output
algorithm subsequently observed, using NIMS robotic platform. order quantify
efficiency approach, predict phenomenon unobserved locations compute
root mean square (RMS) error predicted phenomenon ground truth (calculated
observing uniformly spaced locations path planning experiment).
8.1.1 ROBOTIC P LATFORM :
Aquatic Networked InfoMechanical Systems platform (NIMS-AQ) latest family
NIMS systems (Jordan et al., 2007; Pon et al., 2005; Borgstrom et al., 2006), developed specifically
aquatic applications used lake deployment. family NIMS systems
successfully deployed several terrestrial aquatic sensing applications. 2006 alone,
NIMS used several successful campaigns forests (La Selva, Costa Rica James Reserve,
California), rivers (San Joaquin, California Medea Creek, California), lake (Lake Fulmor, California), mountain ecosystems (White Mountains, California),
Fig. 8a displays schematic view system. basic infrastructure system includes rigid sensing tower supported two Hobie FloatCat pontoons7 catamaran configuration. actuation module resides top sensing tower drives horizontal cable
vertical payload cable (horizontal vertical motion respectively) across cross-section
aquatic environment. Power system provided two deep cycle marine batteries housed
top pontoons. horizontal drive cable kept center-aligned craft using guide
7. Developed Hobie Cat Company.

731

fiS INGH , K RAUSE , G UESTRIN & K AISER

(a) Observed distribution raster scan August 11

(b) Predicted distribution observing locations
output eMIP

Figure 9: Distribution electrical conductivity (microSiemens per centimeter) observed confluence San
Joaquin river, California. Points represent observation locations corresponding experiment.

pulleys repositioned based type aquatic environment NIMS-AQ
sampling (flowing still water conditions). Fig. 8b shows NIMS-AQ performing path planning
lake environment.
8.1.2 ENSING R IVER E NVIRONMENT
first in-field application approach executed confluence two distinct rivers,
Merced river San Joaquin river, California August 7-11, 2007 (hereafter referred
San Joaquin deployment). Fig. 1a displays aerial view San Joaquin deployment site.
scientific objective confluence zone characterize transport mixing phenomena
confluence two distinct rivers Merced river (relatively low salinity) agricultural
drainage-impacted San Joaquin River (relatively high salinity) observing several parameters
may indicate mixing behavior two streams. river observations useful answering important questions pertaining spatio-temporal variability velocity water quality
dynamics resulting pollutant inputs, hydrodynamic mixing regimes, biogeochemical cycling processes distributed time space. Understanding mixing patterns important policy issues related water distribution river ecosystems (Brekke
et al., 2004).
total width observed cross-section 40 meters maximum depth 1.4 meters (closer middle cross-section). Several experiments executed past
characterize mixing phenomena confluence site (Singh et al., 2007a; Harmon et al.,
2007). Primary experimental design campaigns comprised making observations
uniformly spaced locations two dimensional cross-section (hereafter referred raster scan)
repeating experiments several times understand spatial temporal dynamics
environment. experiments took several hours, thus restricting experiments
small number cross-sections (one two) within limited deployment time. However,
detailed understanding confluence environment would require observing multiple crosssections, within limited time frame. necessitates use adaptive sampling approach
model observed phenomenon, make observations small number locations based
model effectively predict phenomenon unobserved locations.

732

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Mixing patterns characterized confluence observing electrical conductivity
indicated amount salt concentration water. Fig. 9a displays typical distribution
cross-section confluence zone x-axis representing distance along cross-section
y-axis representing depth. Low concentration electrical conductivity towards lower
x values contributed clear water Merced river end displaying high
concentration salts carried San Joaquin river. first use data one raster
scan performed first day deployment (displaying similar characteristics) learn
non-stationary Gaussian Process model, using covariance function parameterization described
Krause Guestrin (2007). parameters chosen maximizing marginal likelihood (Rasmussen & Williams, 2006). non-stationary process learned dividing
complete region smaller sub-regions combining locally-stationary GPs
sub regions.
total 114 locations observed raster scan used learning GP
model. set 16 locations selected total 114 (14%) using eMIP algorithm
starting finishing location either end cross-section displayed Fig. 9a.
set 16 observation locations observed next days. required
dwelling time8 30 seconds observing electrical conductivity, large reduction number observation locations resulted significant reduction experimental time well (14% compared
raster scan).
Since environmental phenomena exhibit spatial temporal dynamics, performed raster
scans experiment get measure ground truth electrical conductivity.
predicted electrical conductivity, computed making observations subset 16
locations selected using eMIP, compared ground truth. Fig. 9b displays predicted distribution specific conductivity points representing observed locations output
eMIP. Fig. 9a displays distribution observed using raster scan performed
path planning experiment.
RMS error predicted distribution raster scan performed path
planning experiment 45.99 S/cm. hand, RMS error predicted
distribution raster scan performed path planning experiment 53.87 S/cm.
RMS error two raster scans performed path planning experiment, indicating temporal variation environment, 57.55 S/cm. Low RMS error
predicted distribution, compared RMS error raster scans performed
path planning experiment clearly indicates effectiveness approach
modeling path planning environments. Path planning experiments performed
days demonstrated similar prediction accuracy, maintaining significant reduction total experimental time.
8.1.3 ENSING L AKE E NVIRONMENT
second set in-field experiments executed lake campus University California, Merced August 10-11, 2007 (hereafter referred lake deployment). site
chosen based convenience accessibly located university campus similarity several lakes interest diverse limnology applications, including
study growth patterns algal bloom. Nuisance algal bloom impair beneficial use
8. Time sensor kept static get accurate measurement.

733

fiS INGH , K RAUSE , G UESTRIN & K AISER

(a) Observed distribution raster scan August 11

(b) Predicted distribution observing locations
output eMIP

Figure 10: Distribution temperature (o C) little UC Merced campus. Points represent observation locations
corresponding experiment.

aquatic systems, blocking sunlight underwater vegetation, consuming oxygen water,
producing surface scum odors. growth pattern algal bloom lake dependent
spatial temporal dynamics temperature, dissolved nutrients light occurring different layers environment. Thus, temperature one critical parameter observe
lake environment controls several physical processes occurring low flow aquatic
environments (in contrast San Joaquin river environment considerable water
flow).
total width observed cross-section 70 meters, maximum depth
1.81 meters. Similarly San Joaquin deployment, first learned non-stationary GP model
using temperature data one raster scans performed August 10. Fig. 10a displays
typical surface distribution temperature observed raster scan lake. total
89 locations observed raster scan. set 15 locations selected 89
locations (17%) using eMIP algorithm starting ending location either end
cross-section displayed Fig. 10a. set 15 observation locations observed
next day using NIMS robotic platform. Similar San Joaquin deployment, performed
raster scans experiment get measure ground truth temperature
distribution. predicted temperature, computed making observations subset
locations selected using eMIP, compared ground truth. smaller dwelling time
10 seconds (required measuring temperature) cover entire length lake
cross-section, reduction experimental time 50% (when compared raster scan).
Fig. 10b displays predicted distribution temperature points representing observed
locations output eMIP. Fig. 10a displays distribution observed using raster scan performed path planning experiment. RMS error predicted distribution
raster scan performed path planning experiment 0.73 C. hand,
RMS error predicted distribution raster scan performed path planning
experiment 0.82 C. RMS error two raster scans performed
path planning experiment, indicating temporal variation environment, 1.25 C.
low RMS error predicted distribution raster scans, comparison
temporal variation exhibited lake environment, indicates effectiveness approach
low-flow lake environment well.
734

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

8.2 Experiments Sensing Datasets
Several experiments performed simulation using real world sensing datasets analyze
scaling algorithm different approaches varying experimental cost, exponential
increase budget split, varying size cells spatial decomposition comparison
several heuristics, among others. Three different datasets, collected real world sensing applications, used experiments. first dataset consists measurements temperature
Lake Fulmor, James Reserve (hereafter referred lake temperature dataset). Fig. 1b displays
aerial view Lake Fulmor. robotic boat, part Networked Aquatic Microbial Observing
System (NAMOS) (Dhariwal et al., 2006), used collect surface temperature data around
lake, width around 50 meters length around 250 meters. discussed earlier, understanding temperature distribution prime importance limnology since governs several physical
phenomena occurring lake environment, including growth algal bloom.
average speed boat approximately 0.4 m/s. Half total measurements (218
different sensing locations) used learn nonstationary Gaussian Process model maximizing marginal likelihood (Rasmussen & Williams, 2006), remaining measurements
used experimentation. divided lake 22 cells (except experiments
studying effect changing size cell spatial decomposition), distance
adjacent cell approximately 21 meters. Based average speed, motivated typical
measurement duration roughly 25 seconds, set experiment cost 10.5 meters (except
experiment understanding effect scaling experimental cost).
second dataset, used data existing deployment 52 wireless sensor motes
learn amount temperature variability Intel Research Laboratory, Berkeley (hereafter
referred Berkeley temperature dataset). sensing locations lie within bounding region
length 45 meters width 40 meters. divided complete region uniform grid containing 20 equal sized cells, determined experimental cost 9 meters (approximate distance
travel adjacent cells). learned GP model discussed Krause et al. (2006).
Finally, explored performance algorithm precipitation dataset collected
167 regions equal area, approximately 50 km apart, years 1949-1994. followed
preprocessing model learning described work Krause et al. (2008). large physical
spread sensing regions makes dataset unconventional mobile robot path planning
application. avoid unrealistic scenario, normalized coordinates regions lie
within bounding region length 7 meters width 9 meters, keeping actual sensing
data observed location. divided complete region uniform grid 20 cells
experimental cost 1.4 meters (approximate traveling distance adjacent cells).
plots comparing performance algorithm, x-axis represent total
cost path including traveling cost selected locations sensing
cost selected location (translated distance discussed above). comparing
computation effort measure performance, seconds, y-axis drawn logarithmic scale.
computation effort running code implemented Matlab 3.2 GHz dual processor
core 4 GB RAM. comparing collected reward measure performance, y-axis
represent mutual information (submodular reward function) collected making observations
selected locations.

735

fi5

10

10

Recursive
greedy

4

10

Collected Reward

Execution Time (seconds)

INGH , K RAUSE , G UESTRIN & K AISER

3

10

2

10

eMIP

1

10

0

10
60

Recursive
greedy

8

6

eMIP

4
60

80
100 120 140 160
Cost output path (meters)

80

100

120

140

160

Cost output path (meters)

(a) Comparison computation effort

(b) Comparison collected reward

Figure 11: Comparison eMIP recursive-greedy subset Berkeley temperature dataset 23 sensing

5

15

10

subapproximation
Subapprox: 10%

subapproximation
Collected Reward

Execution Time (seconds)

locations.

Subapprox: 10%

Subapprox: 20%
Best Possible 20
subproblems

0

10
200

250

300

350

400

Subapprox: 20%

10

5

Best possible 20
subproblems
0
200

450

250

300

Uniform density

350

400

450

Cost output path(meters)

Cost output path(meters)

(a) Comparison computation effort

(b) Comparison collected reward

Figure 12: Comparison computation effort collected reward several sub-approximation heuristics used
improve running time eMIP lake temperature dataset. Significant improvement execution time observed,
particularly longer paths, without significant reduction collected reward.

8.2.1 C OMPARISON R ECURSIVE - GREEDY LGORITHM :
compare performance approach recursive-greedy algorithm, proposed
Chekuri et al., selected subset 23 locations total 52 locations Berkeley
temperature dataset. small subset locations selected since running time recursivegreedy quasi-polynomial large complete dataset. Fig. 11a Fig. 11b
display comparison computation effort collected reward smaller dataset
two algorithms. evident plots, approach provides significant improvement
running time (of several orders magnitude higher budget values) (almost) collected reward. Since recursive greedy algorithm essentially search procedure greedily
restricted search space, result indicates exhaustive search paths intractable
even small real world sensing problem. sudden jump execution time eMIP Fig. 11a
budget = 100 meters due additional iteration step (c.f., Line 7 Algorithm 3) added due
increase input budget constraint. Thereafter, additional increase budget results increase experimental budget. Since recursive-eSIP computes efficiently
small problem, additional increase experimental budget increase computation effort
significantly.

736

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

300

Distance (meters)

250

Lake Boundary
Starting
Location

200
Cells
150

eMIP Path

100
50
0
0

Possible observation
locations
50

100
150
200
Distance (meters)

250

300

Figure 13: Illustration path selected using eMIP lake temperature dataset.
8.2.2 C OMPARISON U NIFORM AMPLE PACING :
compared performance eMIP simple uniform sample spacing algorithm, referred
Uniform density. case Uniform density, starting finishing given locations,
greedily select two observation locations within nearest cells compute corresponding path cost path reward. Uniform density algorithm output best possible path
amongst possible simple uniform sample spacing algorithms due greedy observation selection
within cell. Fig. 12b, compares collected reward Uniform density eMIP
lake temperature dataset. Increased collected reward eMIP, compared Uniform density, empirically justifies complexity eMIP. Additionally, eMIP provides strong approximation
guarantee possible uniform sample spacing algorithm. Fig. 13 illustrates
path selected eMIP lake temperature dataset, demonstrating eMIP tend
cause uniform sample spacing. traversed cells, location selected
observation, others many three observation locations selected within
cell.
8.2.3 C OMPARISON UB - APPROXIMATION H EURISTICS :
Various sub-approximation heuristics discussed Section 7 compared empirically analyze
utility improving execution time corresponding reduction collected reward,
any. displayed Fig. 12a compares heuristics computation effort,
sub-approximation heuristic provides improvement execution time scenario
branch bound heuristics sub-approximation heuristics used.
improvement higher values input budget observed lower bound increased
factor (= 1.2 20%). Fig. 12b displays corresponding comparison heuristics
collected reward. interesting observe none sub-approximation approaches
resulted considerable reduction collected reward.

737

fi5

10

8

Cost = 1.12

4

Cost = 0.56
Collected Reward

Execution Time (seconds)

INGH , K RAUSE , G UESTRIN & K AISER

Cost = 0.84

10

Cost = 0.56

3

10

Cost = 1.4
2

10
15

20
25
Cost output path (meters)

Cost = 0.84
6
Cost = 1.12
5

5

14

Collected Reward

Linear variation
4

Exponential variation
ends

3

10

30

Exponential variation
ends

12

Linear variation
10

8

Exponential increase 0
2

10
200

Exponential variation 0
250

300

350

400

6
200

450

250

300

350

400

450

Cost output path(meters)

Cost output path(meters)

(c) Computation effort variation experimental
budget split using lake temperature dataset

(d) Collected reward variation experimental budget split using lake temperature dataset

5

10

20

Grid: 20 cells
4

Collected Reward

Execution Time (seconds)

20
25
Cost output path (meters)

(b) Collected reward variation sensing cost using
precipitation dataset

10

10

Cost = 1.4

4
3
15

30

(a) Computation effort variation sensing cost using precipitation dataset

Execution Time (seconds)

7

Grid: 14 cells

10

3

10

2

10

Grid: 22 cells

0

Grid: 22 cells

10

Grid: 20 cells

5

Grid: 33 cells

1

10

Grid: 14 cells
15

200

400

600

0
0

800

Grid: 33 cells
200

400

600

800

Cost output path(meters)

Cost output path(meters)

(e) Computation effort variation grid size
spatial decomposition using lake temperature dataset

(f) Collected reward variation grid size spatial decomposition using lake temperature dataset

Figure 14: Comparison collected reward computation effort variation several approaches used eMIP.

738

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

8.2.4 VARIATION ENSING C OST:
Fig. 14a Fig. 14b compare computation effort collected reward sensing cost
varied precipitation dataset. reduction experimental cost, locations
observed total input budget resulting increased collected reward. However,
experiments, computation effort approximately same. Due diversity
environmental applications, sensing cost depend sensors (settling time) scale
dynamics occurring observed phenomena. experiment indicates eMIP used
diverse range sensing costs, per demands diverse environmental applications.
8.2.5 VARIATION E XPERIMENTAL B UDGET PLIT:
discussed Section 6, strategy exponentially increasing experimental budget split
results increased additional path length required guarantee approximation factor
collected reward. performed several experiments available datasets analyze
empirical performance increasing budget splits exponentially. Fig. 14c Fig. 14d compares
computation effort collected reward linear increase, one sided exponential variation
0 two-sided exponential variation 0 budget B lake temperature
dataset. Since smaller number budget splits considered recursive-eSIP case
exponential increase, computation effort smaller compared linear increase
budget splits. Interestingly, small reduction collected reward,
budget values, exponential increase employed. Hence, even though theoretical
approximation guarantee exponential increase experimental budget weaker, empirically
collected reward linear exponential increase budget splits found
comparable wide range input budgets.
8.2.6 NALYSIS PATIAL ECOMPOSITION :
discussed Section 6, conversion SD-MIPP solution (a cell path) solution
MIPP (a path observation locations) result additional path length exceeding input
budget B. additional path length depend size cell (or size grid covering
complete spatial domain) SD-MIPP problem result trade-off computation
effort. Variation grid-size result corresponding variation traveling cost
neighboring cells. result opportunity travel cells denser grid
input budget constraint. However, keep experimental cost constant across varying
grid size (since experiment cost depends observed phenomena independent
spatial decomposition), scaled accordingly, proportion traveling cost
neighboring cells. Fig. 14f compares collected reward varying grid sizes lake
temperature dataset, changing grid size 14 33 cells. interesting observe
change grid size (almost) negligible effect collected reward. hand,
increase grid density resulted larger number cells path planning
performed thus leading increased computation effort input budget. comparison
computation effort varying grid size displayed Fig. 14e. Note drastic increase
computation time grid discretization made finer.

739

fi16

20

3 Robots

Total RMS Error

Total Collected Reward

INGH , K RAUSE , G UESTRIN & K AISER

15

2 Robots
10

14
2 Robots

12
3 Robots

10

1 Robot
5
200

250

300

350

400

8
200
250
300
350
400
450
Average cost output path per robot (meters)

450

Average cost output path per robot (meters)

(a) Collected reward starting location

(b) RMS error starting location
15

25

3 Robots

Total RMS Error

Total Collected Reward

1 Robot

20

2 Robots
15

Single Robot
10
5
200

250

300

350

5

2 Robots

3 Robots

0
250
300
350
400
450
Average cost output path per robot (meters)

400

Average cost output path per robot (meters)

(c) Collected reward different starting location

Start 3

10

1 Robot

(d) RMS error different starting location

Boundary

Cells

1

33

Start 2

73

Start 1

Robot-2
Robot-1

Robot-3

(e) Paths selected using MIPP

Figure 15: Analysis experiments performed multiple robots different (optimized) starting location using
lake temperature dataset.

8.2.7 ULTI - ROBOT E XPERIMENTS
evaluated performance eMIP multi-robot algorithm simulation using several sensing datasets. Fig. 15 displays empirical analysis several experiments using lake temperature dataset. first experiment performed robot starting starting
location. Fig. 15a Fig. 15b display collected reward root mean square (RMS) error
number robots varied one three. Due sequential-allocation ap-

740

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

proach (wherein remove locations already selected selecting locations
next robot) information never hurts principle, collected reward increases number
robots increased hence corresponding root mean square error prediction
unobserved locations gets reduced. However, incremental change performance one
two robots larger incremental change two three robots, expected
submodularity (diminishing returns) property mutual information.
Fig. 15c Fig. 15d display collected reward RMS error different starting location chosen robot. scenario, set four starting locations pre-determined
location one end lake (see reference Fig. 15e three four starting
locations marked). starting location three robots selected greedily based
collected information. different starting location selected opposite end
lake second robot, incremental change collected reward (and corresponding decrease
root mean square error) number robots increased one two much higher
corresponding change starting location chosen second robot
well. However, similar scenario starting location, incremental change
number robots increased one two higher compared number
robots increased two three (due submodularity mutual information). Fig. 15e
illustrates selected paths three robots selected using eMIP.

9. Related Work
large body related work theory path planning applications. Approximation algorithms proposed several related problems. Variants path planning
studied field Operations Research Traveling Salesman Problem (TSP)
Vehicle Routing Problem (VRP). robotics, several path planning approaches
studied applications Simultaneous Localization Mapping (SLAM) search
exploration. sensor networks geostatistics, closely related work studies optimal placement
static sensors modeling phenomenon Gaussian Processes. Several adaptive sampling approaches studied decide subset locations observe order understand
phenomenon dynamics effectively. addition, similar approaches explored planning paths
mobile robots acting data mules, collecting data sampled network static sensors.
9.1 Operations Research
interesting special case MIPP problem given case node fixed
reward, goal find path maximizes sum rewards (Traveling Salesman
Problem Profits, TSPP, Feillet et al., 2005). sum rewards modular (additive)
function, special case submodular functions. subcategory TSPP optimization problem defined maximize collected reward keeping associated cost less
given budget B. studied Orienteering Problem (OP) selective TSP (Laporte &
Martello, 1990), Maximum Collection Problem (Kataoka & Morito, 1988) literature.
additivity assumption made orienteering problem unrealistic informative path
planning setting, assumes information provided adjacent locations independent,
whereas would typically expect strong amount correlation. fact, observations
independent, would point selecting observations spatial prediction.

741

fiS INGH , K RAUSE , G UESTRIN & K AISER

paper, hence study general orienteering problem submodular reward functions,
proposed earlier Submodular Orienteering Problem (Chekuri & Pal, 2005).
9.1.1 ULTIPLE - PATH E XTENSIONS :
extension TSPP multiple paths studied Vehicle Routing Problem Profits
(VRPP) literature. TSPP, several variants VRPP previously considered.
Prize Collecting VRP (PCVRP) (Tang & Wang, 2006) class VRPP objective determine subset customers visit minimize total distance traveled,
minimize vehicles used maximize collected reward. multi-robot version OP
(in case additive reward functions) studied Team Orienteering Problem I-Ming
et al. (1996) Multiple Tour Maximum Collection Problem Butt Ryan (1999).
9.1.2 K NOWN PPROXIMATIONS RIENTEERING P ROBLEM :
OP known NP-hard (Golden et al., 1987). Several versions OP studied
literature classified starting (and finishing) location (root)
pre-specified not. case unrooted OP (when starting location specified), approximation guarantees known Prize Collecting TSP k-TSP easily extended (Johnson
et al., 2000). several constant factor approximations known PC-TSP k-TSP
problems best one 2 approximation (Garg, 2005). However extension
apply rooted version problem best path unrooted version may
contain root may far away root thus leading violation budget constraint.
rooted OP, Arkin et al. (1998) gave (2 + ) approximation OP geometric
settings. Blum et al. (2003) gave first constant factor approximation rooted OP general
undirected graphs. extended algorithm multi-path OP. running time
algorithm, though polynomial, large (more specifically, O(n5 log( 1 )) total
reward path). Recently Chekuri et al. (2008) gave polynomial time algorithm OP
undirected graphs improved approximation guarantee (2 + ). problem formulation
specified starting location (s) finishing location (t) falls category rooted OP
submodular (non-additive) reward function.
Another classification OP done based symmetry space possible
locations. approximation guarantees hold true symmetric spaces (undirected
graphs). Obtaining good approximation algorithm directed (asymmetric) orienteering problem stated open problem Blum et al. (2003). Chekuri Pal (2005) gave first
approximation algorithm O(log n) guarantee runs quasi-polynomial running time.
running time recently improved independently two different works (Chekuri et al., 2008;
Nagarajan & Ravi, 2007), proposing poly-time approximation algorithm providing approximation guarantee O(log2 n), though using different approaches. metric space conversion procedure used spatial decomposition approach limits eMIP symmetric spaces
only.
9.1.3 EQUENTIAL LLOCATION :
Blum et al. (2003) proposed sequential allocation approach extend algorithms single-robot
orienteering multiple robot setting, special case additive (modular) reward
functions. paper, generalize result submodular reward functions. initial
742

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

version paper published (Singh et al., 2007b), realized sequential-allocation
procedure instance maximizing submodular function subject matroid constraint (Calinescu et al., 2007). define partition matroid disjoint union = M1 Mk
k ground sets Mi , one robot. set Mi contains feasible paths robot i.
collection 2M subsets P |P Mi | 1 (i.e. P corresponds
collection paths, constraint pick one set Mi ) forms
independent sets partition matroid. Hence, problem finding collection maximally
informative paths problem finding independent set matroid maximizing submodular function. Current work progress Goundan Schulz (2008) provides general results
performance sequential allocation procedure setting, used prove
sequential allocation results originally presented Singh et al. (2007b).
9.2 Robotic Applications
considerable work path planning robotics community several applications,
including simultaneous localization mapping (SLAM) search exploration. Several
different approaches studied applications, including auction based algorithms, data-adaptive approaches information gain based algorithms.
9.2.1 IMULTANEOUS L OCALIZATION APPING :
goal Simultaneous Localization Mapping (SLAM) build maps environment
performing exploration environment objective estimate robot position
world features simultaneously. Several approaches optimizing different objective functions
proposed perform path planning SLAM. Bourgault et al. (2002) proposed exploration
framework using occupancy grid (OG) environment model (performing spatial decomposition
observed environment) objective maximize mutual information OG map.
Stachniss et al. (2005) developed greedy algorithm selecting next location visit
maximize information gain map.
contrast approaches, Sim Roy (2005) attempted optimize entire trajectory, next step, algorithm introduces approximations without theoretical bounds. Simmons et al. (2000) proposed distributed approach exploration mapping
multiple robots minimizing overlap information gain amongst multiple robots.
provided quantitative results simulation provide theoretical bounds
approach. little work SLAM setting upper bound total cost path.
addition, aware approaches SLAM carry approximation guarantees
either single multi-robot cases. interesting direction future work would analyze
applicability approach SLAM setting.
9.2.2 EARCH E XPLORATION :
search exploration application involves path planning robot goal searching
moving target(s) given environment, e.g. target surveillance security applications
patient tracking health care domain. Performing path planning using stochastic inference provides
advantage robustness sensing motion uncertainty though added complexity computational intractability. Roy Earnest (2006) proposed approach effectively compute
trajectories target tracking based maximizing mutual information (evaluated using change
743

fiS INGH , K RAUSE , G UESTRIN & K AISER

variance probability distribution). used particle filter approach, performing clustering particles followed path planning clusters. Lau et al. (2006) formulated
target tracking indoor environments generalization NP-complete optimal searcher path
(OSP) problem (Trummel & Weisinger, 1986). sought optimize probability detection
within given time horizon accounting undetected target probability function
previously visited locations search. used several branch bound approaches
speed search process. objective maximizing information gain subject budget
constraints path cost makes eMIP suitable candidate performing path planning
problems.
Ryan (2008) used approach partitioning search space subgraphs multi-robot
path planning. take conceptually similar approach, reducing search space decomposing space regions performing path planning regions. However,
address complex utility functions, quantifying informativeness visited locations
limited specific graph structures stacks, halls, cliques, rings case
work Ryan (2008). Recently, Thompson Wettergreen (2008) used eMIP algorithm
near-term path planning performing autonomous exploration surficial units Amboy
Crater Mojave desert, California.
9.2.3 P LANNING YSTEMS PPLICATIONS :
Certain applications robotic path planning used plan graphs (Blum & Furst, 1997) compute
estimate resources time required achieve goals states encountered
search process. case over-subscription planning problem wherein subset goals
accomplished within limited time resources available planning system,
work Smith (2004) used orienteering heuristic provide ordered set goals
considered planner. Briel et al. (2004) proposed several heuristics efficiently solving
over-subscription planning problem. However, earlier proposed heuristics,
reward function considered modular (additive). eMIP used efficiently solve oversubscription planning problem submodular setting strong approximation guarantees.
9.3 Sensor Networks
Phenomenon modeling decide optimal placement set static sensors well studied
sensor networks geostatistics communities. Gaussian Process models spatial phenomena studied extensively (Cressie, 1991). Guestrin et al. (2005) proved that, case
phenomena governed Gaussian Process models, selecting placement sensors greedily
based mutual information near-optimal. Krause et al. (2006) extended work include
communication cost sensors optimizing sensor placement. communication constrained setting, similar path planning problem considered paper, greedy
algorithm performs badly, involved algorithms developed. Batalin et al. (2004)
showed combining static mobile sensing devices, even simple scenario, result
significant improvement sensing performance. scenario, combination
static mobile sensing devices available, several approaches optimal placement static
sensors combined eMIP observe given phenomenon efficiently.

744

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

9.3.1 DATA C OLLECTION ENSOR N ETWORK :
different scenario mobile robot combined network static sensors
improve lifetime sensor network performing tours collecting data sampled
static network. Somasundara et al. (2007) showed problem collecting data
environment shows spatial temporal dynamics NP-complete provided
integer linear programming formulation same. compared performance several
heuristics simulation single multi-robot scenario. Meliou et al. (2007) proposed
nonmyopic approach application data gathering tours using algorithm submodular
orienteering (SOP) black box. provided strong approximation guarantees extensive
empirical evaluation indicates applicability approach applications.
setting, eMIP used orienteering algorithm provide better approximation guarantee
addition improved running time.
9.3.2 DAPTIVE AMPLING E NVIRONMENTAL PPLICATIONS :
Recent advances robotics opened opportunities high fidelity monitoring dynamic
environmental sensing applications. Rahimi et al. (2004) explored several policies adaptively
sampling environment. Singh et al. (2006) proposed multiscale adaptive sampling approach
uniformly sampling environment first stage followed sampling locations order
minimize mean square error most. extended approach multiple robots,
although without providing theoretical bounds. Using several in-field experiments well
simulations using real world sensing datasets, demonstrate several environmental
phenomenon effectively sampled adaptively using eMIP.

10. Conclusions Future Work
paper, presented eSIP, approximation algorithm efficient planning informative
paths. eSIP near-optimally solves NP-hard problem maximizing collected information
upper bound path-cost. eSIP algorithm builds recursive-greedy algorithm
Chekuri Pal (2005). eSIP preserves approximation guarantees recursive-greedy,
overcoming computational intractability spatial-decomposition several branch
bound approaches. presented general approach, sequential-allocation, extends
single-robot algorithm, eSIP, multiple-robot setting providing provably strong
approximation guarantee.
provide extensive empirical evaluation demonstrate effectiveness approach
real world sensing applications. performed several in-field experiments two important
environmental sensing applications lake monitoring (at small lake UC Merced campus)
river monitoring (at San Joaquin river, California). Networked Info Mechanical System (NIMS)
used robotic system performing path planning deployments
demonstrate practicality algorithm. performed extensive simulation experiments
using several real world sensor network data sets. global climate change corresponding
impetus sustainable practices, expect efficient path planning approaches help
address challenge monitoring environment-related activities effectively.
future, plan explore applicability algorithm application domains
SLAM search rescue. plan work towards understanding limitations

745

fiS INGH , K RAUSE , G UESTRIN & K AISER

learning static GP model real world scenarios, extend approach online model adaptation.

Acknowledgments
would thank Maxim Batalin helpful discussions, Bin Zhang providing lake
data set Michael Stealey, Henry Pai Victor Chen help river lake deployment. work partially supported NSF Grants No. CNS-0509383, CNS-0625518, CNS0331481, ANI-00331481, CCR-0120778, ECCS-0725441, ONR MURI W911NF0710287
gift Intel. Carlos Guestrin partly supported Alfred P. Sloan Fellowship IBM
Faculty Fellowship. Andreas Krause partially supported Microsoft Research Graduate
Fellowship.

APPENDIX
Theorem-1. Let approximation guarantee single path instance informative
path planning problem. sequential-allocation algorithm achieves approximation guarantee (1 + ) MIPP problem. special case, robots starting
(si = sj , i, j) finishing locations (ti = tj , i, j), approximation guarantee improves
1/(1 exp (1/)) 1 + .
Proof Theorem 1. case robots start finish location, let
total reward collected optimal solution. Additionally, define difference
reward collected optimal solution, approximation algorithm,
end stage i. Hence, 0 = .
Let Ai = P1 Pi nodes selected approximation algorithm stage
(A0 = ), let P = {P1 , . . . , Pk } denote collection paths chosen optimal solution.
) f (Ai ) =
Consider residual reward fAi . find fAi (P ) = f (Ai P ) f (Ai ) f (P P
due monotonicity f . path Pj fAi (Pj ) k1 , j fAi (Pj ) <
= fAi (P ), contradicting monotonic submodularity fAi . Hence path Pj
fAi (Pj ) k1 , thus approximation algorithm guaranteed find path Pi
1
fAi (Pi ) k
.
difference reward collected optimal solution reward collected
Algorithm 1 stage + 1 most:
i+1 (1 1/k)i ,
(1 1/k)i+1 .
Thus k stages, difference reward bounded k (11/k)k exp (1/).
Hence, reward collect Algorithm 1 least (1 exp (1/)) times optimal reward,
resulting approximation factor 1/(1 exp (1/)).
case robot different starting finishing location, let Pi set
nodes visited optimal path stage i. Let Oi set nodes visited optimal
path stage i, i.e., Oi = ij=1 Pj , O0 = O1 = P1 . reward collected
746

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

approximation algorithm stage bounded as:
fAi1 (Pi ) 1/(fAi1 (Pi )).
k stages, total collected reward given as:
k
X

k
X
fAi1 (Pi ) 1/(
fAi1 (Pi )).

i=1

(4)

i=1

Since left hand side telescopic sum, get:
k
X

fAi1 (Pi ) = f (ki=1 Pi ) = f (Ak ).

(5)

i=1

right hand side (RHS):
k
X
R.H.S. = 1/(
fAi1 (Pi )),
i=1
k
X
= 1/( (f (Pi Ai1 ) f (Ai1 ))).
i=1

Adding Oi1 terms using submodularity property, get
k
X
R.H.S. 1/( (f (Oi Ai1 ) f (Oi1 Ai1 ))),
i=1

= 1/ [f (O1 ) 0 + f (O2 A1 ) f (O1 A1 ) + + f (Ok Ak1 ) f (Ok1 Ak1 )] .
Rearranging terms, get:
"
R.H.S. 1/ f (Ok Ak1 )

k1
X

#
(f (Oi Ai ) f (Oi Ai1 )) .

i=1

Using monotonicity (f (Ok Ak1 ) f (Ok )) submodularity f ( f (Oi Ai ) f (Oi
Ai1 ) f (Ai ) f (Ai1 )), get
"
#
k1
X
R.H.S. 1/ f (Ok )
(f (Ai ) f (Ai1 )) ,
i=1

= 1/ [f (Ok ) f (Ak1 )] .
Using monotonicity (f (Ak ) f (Ak1 )), get
R.H.S. 1/ [f (Ok ) f (Ak )] .
Substituting Equation (5) (6) Equation (4), get:
f (Ak ) 1/ [f (Ok ) f (Ak )] ,
747

(6)

fiS INGH , K RAUSE , G UESTRIN & K AISER

thus:
f (Ak ) 1/( + 1)f (Ok ).
resulting approximation guarantee (1 + ).
theorem proof inspired proof multi-path orienteering provided
Blum et al. (2003).
Lemma 3. Let P = (s = v0 , v1 , . . . , vl = t) optimal s-t-path solution MIPP, constrained budget B. exists corresponding SD-MIPP path PC = (Cs = Ci1 , . . . , Cin =

Ct ), traversing locations Ai1 Ail , budget 2 2B + 4L collecting
information.
Proof Lemma 3. Let P optimal path MIPP, constrained budget B. need ensure MIPP transformed SD-MIPP, PC corresponding optimal solution,
enough budget PC feasible new problem domain. recall,
new problem domain, SD-MIPP, traveling new cell costs L (distance centroids
adjacent cells), irrespective sensing location within cell.

L

1

2

4

3

5
6

Figure 16: Illustration increased budget requirement SD-MIPP.
corresponding SD-MIPP, optimal path may make 4 experiments 4 different
cells (Cells 1,2,3 4 Fig. 16) sharing common vertex, sensing location different
cell close common vertex, requiring infinitesimally small traveling cost. Increasing budget 4L accounts case. Furthermore, paying additional cost
L traveling two corners edge cell, PC make experiments 2 new
cells (Cells 5,6 Fig. 16. Thus, total number cells visited PC upper bounded
2(B/L) + 4. Hence, budget 2B + 4L suffices render PC feasible SD-MIPP solution.
convert MIPP two-dimensional
Euclidean distance corresponding L1 distance,

budget needs increased 2B ensure P feasible L1 metric. Accounting
conversion Euclidean distance L1 , total budget B required
SD-MIPP,

ensure feasibility optimal solution MIPP, upper bounded 2 2B + 4L.
Lemma 4. Let PC = (Cs = C1 , . . . , Ck = Ct ) optimal solution single robot instance
e optimal set locations selected within
SD-MIPP, constrained budget B,
b
b 11/e I(P ).
visited cell Cj . Let P solution returned eSIP. I(P)
C
1+log k
2

Proof Lemma 4. prove induction length n optimal path. Let Fg (=
(1 1/e)) constant factor due greedy selection sensing locations within cell.
748

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

assume budget constraint SD-MIPP problem. case n = 1, iter = 0
Algorithm 4 select greedy subset nodes set Cs = Ct . give
approximation guarantee Fg (Krause et al., 2008) compared optimal set number
observations selected cell (and hence information obtained optimal SD-MIPP
path visiting cell).
Now, assuming induction hypothesis holds n = k/2, get:
Fg
IX (P ),
(1 + log(k/2))
Fg

IX (P ).
log k

IX (P)

hold true traveling budget Bek/2 experimental budget Bek/2 . Let us
analyze case n = k. Let P1 optimal path Cs Ck/2 constrained budget B 0 .
Since increase experimental budget split linearly, B 0 vary 0 Bek , Bek
traveling cost visiting k cells. Since cost less Bek/2 , using induction
hypothesis,
Fg
IX (P1 ).
(7)
IX (P1 )
log k
Similarly, X 0 = X P1 following approximation guarantee holds true P2 :
IX 0 (P2 )

Fg
IX 0 (P2 ).
log k

definition submodular function:
IX 0 (P2 ) = I(P2 P1 X) I(P1 X),
= IX (P1 P2 ) IX (P1 ).
Substituting (8), get
IX 0 (P2 )

Fg
(IX (P1 P2 ) IX (P1 )).
log k

Using monotonicity I,
IX 0 (P2 )

Fg
(IX (P2 ) IX (P)).
log k

Adding (7), finally get:
Fg
(IX (P1 ) + IX (P2 ) IX (P)),
log k
(Fg + log k) IX (P) Fg (IX (P1 ) + IX (P2 )),
IX (P)

(1 + log k) IX (P) Fg (IX (P1 ) + IX (P2 )).
Since IX submodular function,
(1 + log k) IX (P) Fg (IX (P )),
Fg
(IX (P )).
IX (P)
1 + log k

749

(8)

fiS INGH , K RAUSE , G UESTRIN & K AISER

proof inspired analysis recursive greedy algorithm submodular
orienteering proposed Chekuri Pal (2005).
case exponential budget splits, budget needs increased, albeit sub-linearly:
Lemma 7. Let PC = (Cs = Ci1 , . . . , CiN = Ct ) optimal SD-MIPP solution constrained
e Let P solution returned eMIP exponential splits experimental
budget B.
3
e I(P) 11/e I(P ).
budget, started increased budget N log2 2 B.
C
1+log N
Proof Lemma 7. set paths eMIP considers exponential splits let us call
exponential paths general strict subset linear paths considered linear
splits. proof Lemma 4 indeed shows path returned eMIP achieves factor
11/e
1+log N less information optimal exponential path. need show increasing
3
budget factor N log2 2 guarantees optimal linear path feasible exponential path.
Every exponential path represented complete binary tree, whereby every internal node
given level tree corresponds choice middle node experimental budget allocation
left right sub-path corresponding recursion level. Further, every leaf tree
corresponds set observations selected visited cell. Consider tree representing
e inner node, restriction exponential splits lead
optimal linear path budget B.
situation, either left right sub-path receives less experimental budget allocated
optimal path. proof strategy turn new tree 0 , selects
observations corresponds valid exponential path. order achieve this, annotate
inner node v, receives Bv experimental budget optimal linear allocation,
new feasible exponential budget Bv0 Bv . suffices show root R holds
0 (n)log2 3/2 B = (3/2)log2 n B . Label edges 0 1, sub-path
BR
R
R
corresponding edge labeled 1 receives smaller part linear budget split. Hence,
e
leaf v path k ones receives Bv (1/2)k total linear budget requirement B.

0
0
Let us derive bounds Bv bottom up. prove induction Bv (3/2) Bv
height v (distance leaves). suffice condition Br0 (3/2)log2 n Br ,
want prove. leaves v clearly Bv0 = Bv sufficient, since split done hence
reward collected linear exponential split same. Let v inner node
children l r, w.l.o.g., left child l annotated 0. construction, Br Bv /2.
induction hypothesis, Bl0 (3/2)m1 Bl , Br0 (3/2)m1 Br . choose Bv0 = Bl0 + 2Br0 ,
find feasible exponential budget split allocating least Bl0 l Br0 r.
split require increasing budget exponentially till suffice r allocating rest l.
ensure always budget split suffice r exponential budget irrespective
whether represents P1 P2 , need exponential splits sides, trying
exponential increase 0 (Bexp ) Bv Bexp cases r represents P1 P2
respectively. Bv0 (3/2)m1 Bl + 2(3/2)m1 Br = (3/2)m1 Bv + (3/2)m1 Br
(3/2)m Bv .
Theorem 5. Let P optimal solution single robot instance MIPP problem
b achieving information
budget constraint B. Then, eSIP algorithm find solution P


11/e
2

b
)
value least I(P) 1+log N I(P ), whose cost 2(2 2B + 4L)(1 + L Cexp
2


3
fe 2(2 2B + 4L)(1 + L 2 )N log2 2
case linear budget split B
Cexp

fe .
case exponential budget split B
750

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Proof Theorem 5. Let B budget requirement SD-MIPP according Lemma 4 (or
Lemma 7 case exponential splits) P corresponding solution returned eMIP.
Let Cexp cost making observation sensing location. Maximum number
sensing locations visited P CB
. Since account traveling sensing
exp
locations, additional cost equivalent traveling centroid visited cells
corresponding sensing location paid solution SD-MIPP transformed
back

get solution MIPP. sensing location, maximum additional cost L 2 incurred
traveling sensing location returning back centroid, L length
cell. Thus additional cost
solution path MIPP problem, transformed SD-MIPP

2
problem upper bounded BL
Cexp . Since eMIP considers exponential budget splits
traveling experimental budget, increase budget another factor 2 guarantees
split defined optimal MIPP solution feasible. Combining analysis Lemma 3
Lemma 4 completes proof.

References
Arkin, E. M., Mitchell, J. S. B., & Narasimhan, G. (1998). Resource-constrained geometric network
optimization. Symposium Computational Geometry, pp. 307316.
Bai, X., Kumar, S., Xua, D., Yun, Z., & Lai, T. H. (2006). Deploying wireless sensors achieve
coverage connectivity. Proceedings 7th ACM international symposium
Mobile ad hoc networking computing, pp. 131142.
Batalin, M. A., Rahimi, M., Yu, Y., Liu, D., Kansal, A., Sukhatme, G. S., Kaiser, W. J., Hansen, M.,
Pottie, G. J., Srivastava, M., & Estrin, D. (2004). Call response: experiments sampling
environment. Proceedings 2nd international conference Embedded networked
sensor systems, pp. 2538.
Blum, A., Chawla, S., Karger, D. R., Lane, T., Meyerson, A., & Minkoff, M. (2003). Approximation
algorithms orienteering discounted-reward tsp. Annual Symposium Foundation
Computer Science (FOCS), p. 46.
Blum, A. L., & Furst, M. L. (1997). Fast planning planning graph analysis. Artificial
Intelligence, 90, 16361642.
Borgstrom, P. H., Stealey, M. J., Batalin, M. A., & Kaiser, W. J. (2006). NIMS3D: novel rapidly
deployable robot 3-dimensional applications. IEEE/RSJ International Conference
Intelligent Robots Systems, Beijing, China.
Bourgault, F., Makarenko, A., Williams, S., Grocholsky, B., & Durrant-Whyte, H. (2002). Information based adaptive robotic exploration. IEEE/RSJ International Conference Intelligent
Robots Systems (IROS), pp. 540545.
Brekke, L. D., Miller, N. L., Bashford, K. E., Quinn, N. W., & Dracup, J. A. (2004). Climate change
impacts uncertainty water resources san joaquin river basin, california. Journal
American water resource association, 40, 149164.
Briel, M. V. D., Sanchez, R., Do, M. B., & Kambhampati, S. (2004). Effective approaches partial
satisfaction (over-subscription) planning. AAAI, pp. 562569. AAAI Press.

751

fiS INGH , K RAUSE , G UESTRIN & K AISER

Butt, S. E., & Ryan, D. M. (1999). optimal solution procedure multiple tour maximum
collection problem using column generation. Computers Operations Research, 26, 427
441.
Calinescu, G., Chekuri, C., Pl, M., & Vondrk, J. (2007). Maximizing submodular set function subject matroid constraint (extended abstract). Integer Programming Combinatorial
Optimization (IPCO), Vol. 4513 Lecture Notes Computer Science, pp. 182196.
Caselton, W., & Zidek, J. (1984). Optimal monitoring network design. Statistics Probability
Letters.
Chao, I.-M., Golden, B. L., & Wasil, E. A. (1996). fast effective heuristic orienteering
problem. European Journal Operations Research, 88, 475489.
Chekuri, C., Korula, N., & Pal, M. (2008). Improved algorithms orienteering related problems. Proc. 19th Annual ACM-SIAM Symposium Discrete Algorithms (SODA08).
SIAM. appear.
Chekuri, C., & Pal, M. (2005). recursive greedy algorithm walks directed graphs. Annual
Symposium Foundation Computer Science (FOCS), pp. 245253.
Christofides, N. (1976). Worst-case analysis new heuristic traveling salesman problem.
Tech report,CMU.
Cressie, N. A. C. (1991). Statistics Spatial Data. Wiley.
Dhariwal, A., Zhang, B., Stauffer, B., Oberg, C., Sukhatme, G. S., Caron, D. A., & Requicha, A. A.
(2006). Networked aquatic microbial observing system. IEEE International Conference
Robotics Automation (ICRA).
Feillet, D., Dejax, P., & Gendreau, M. (2005). Traveling salesman problem profits. Transportation Science, 39(2), 188205.
Garg, N. (2005). Saving epsilon: 2-approximation k-mst problem graphs. ACM
Symposium Theory Computing (STOC), pp. 396402.
Golden, B., Levy, L., & Vohra, R. (1987). orienteering problem. Naval Research Logistics, 34,
307318.
Goundan, P. R., & Schulz, A. S. (2008). Revisiting greedy approach submodular set function
maximization.. Working paper, MIT.
Guestrin, C., Krause, A., & Singh, A. P. (2005). Near-optimal sensor placements gaussian processes. International Conference Machine Learning (ICML).
Harmon, T. C., Ambrose, R. F., Gilbert, R. M., Fisher, J. C., Stealey, M., & Kaiser, W. J. (2007).
High-resolution river hydraulic water quality characterization using rapidly deployable
networked infomechanical systems (NIMS RD). Environmental Engineering Science, 24(2),
151159.
I-Ming, C., Golden, B., & Wasil, E. (1996). team orienteering problem. European Journal
Operation Research, 88, 464474.
Ibaraki, T., Muro, S., Murakami, T., & Hasegawa, T. (1983). Using branch-and-bound algorithms
obtain suboptimal solutions. Mathematical Methods Operations Research, 27(1), 177202.

752

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Ishikawa, T., & Tanaka, M. (1993). Diurnal stratification effects wind-induced currents
water qualities lake kasumigaura, japan. Journal Hydraulic Research, 31(3), 307
322.
Johnson, D. S., Minkoff, M., & Phillips, S. (2000). prize collecting steiner tree problem: theory
practice. Symposium Discrete Algorithms (SODA), pp. 760769.
Jordan, B. L., Batalin, M. A., & Kaiser, W. J. (2007). NIMS RD: rapidly deployable cable based
robot. IEEE International Conference Robotics Automation (ICRA), Rome, Italy.
Kataoka, S., & Morito, S. (1988). algorithm single constraint maximum collection
problem. Journal Operational Research Society Japan, 31, 515530.
Ko, C.-W., Lee, J., & Queyranne, M. (1995). exact algorithm maximum entropy sampling.
Operations Research, 43(4), 684691.
Krause, A., & Guestrin, C. (2007). Near-optimal observation selection using submodular functions.
AAAI Nectar track.
Krause, A., Singh, A., & Guestrin, C. (2008). Near-optimal sensor placements Gaussian processes: Theory, efficient algorithms empirical studies. Journal Machine Learning
Research (JMLR), Vol. 9, pp. 235284.
Krause, A., & Guestrin, C. (2007). Nonmyopic active learning gaussian processes:
exploration-exploitation approach. International Conference Machine Learning
(ICML), pp. 449456.
Krause, A., Guestrin, C., Gupta, A., & Kleinberg, J. (2006). Near-optimal sensor placements: Maximizing information minimizing communication cost. Proceedings fifth international conference Information processing sensor networks (IPSN), pp. 210.
Laporte, G., & Martello, S. (1990). selective travelling salesman problem. Discrete Applied
Mathematics, 26, 193207.
Lau, H., Huang, S., & Dissanayake, G. (2006). Probabilistic search moving target
indoor environment. IEEE/RSJ International Conference Intelligent Robots Systems
(IROS), pp. 33933398.
Lin, S. (1965). Computer solutions traveling salesman problem. Bell System Technical
Journal, 44, 22452269.
MacIntyre, S. (1993). Vertical mixing shallow, eutrophic lake: Possible consequences
light climate phytoplankton. Limnology Oceanography, 38(4), 798817.
MacIntyre, S., Romero, J. R., & Kling, G. W. (2002). Spatial-temporal variability surface layer
deepening lateral advection embayment lake victoria, east africa. Limnology
Oceanography, 47(3), 656671.
Meliou, A., Krause, A., Guestrin, C., & Hellerstein, J. M. (2007). Nonmyopic informative path
planning spatio-temporal models. Association Advancement Artificial Intelligence
(AAAI), pp. 602607.
Nagarajan, V., & Ravi, R. (2007). Poly-logarithmic approximation algorithms directed vehicle
routing problems. Proc. 10th Internat. Workshop Approximation Algorithms Combinatorial Optimization Problems (APPROX07), Vol. 4627 LNCS, pp. 257270. Springer.
753

fiS INGH , K RAUSE , G UESTRIN & K AISER

Nemhauser, G., Wolsey, L., & Fisher, M. (1978). analysis approximations maximizing
submodular set functions. Mathematical Programming, 14, 265294.
Pon, R., Batalin, M., Gordon, J., Rahimi, M., Kaiser, W., Sukhatme, G., Srivastava, M., & Estrin,
D. (2005). Networked infomechanical systems: mobile wireless sensor network platform.
Proceedings fifth international conference Information processing sensor networks (IPSN), pp. 376381.
Rahimi, M., Pon, R., Kaiser, W., Sukhatme, G., Estrin, D., & Srivastava, M. (2004). Adaptive
sampling environmental robotics. IEEE International Conference Robotics
Automation (ICRA).
Rasmussen, C. E., & Williams, C. K. (2006). Gaussian Process Machine Learning. Adaptive
Computation Machine Learning. MIT Press.
Reynolds-Fleming, J. V., Fleming, J. G., & Luettich, R. A. (2004). Portable autonomous vertical
profiler estuarine applications. Estuaries, 25, 142147.
Roy, N., & Earnest, C. (2006). Dynamic action spaces information gain maximization search
exploration. American Control Conference.
Ryan, M. R. K. (2008). Exploiting subgraph structure multi-robot path planning. Journal
Artificial Intelligence Research (JAIR), Vol. 31, pp. 497542.
Sim, R., & Roy, N. (2005). Global a-optimal robot exploration slam. IEEE International
Conference Robotics Automation (ICRA).
Simmons, R. G., Apfelbaum, D., Burgard, W., Fox, D., Moors, M., Thrun, S., & Younes, H. (2000).
Coordination multi-robot exploration mapping. Association Advancement
Artificial Intelligence (AAAI), pp. 852858.
Singh, A., Nowak, R., & Ramanathan, P. (2006). Active learning adaptive mobile sensing networks. Proceedings fifth international conference Information processing
sensor networks (IPSN), pp. 6068.
Singh, A., Batalin, M. A., Chen, V., Stealey, M. J., Jordan, B., Fisher, J., Harmon, T., Hansen, M., &
Kaiser, W. J. (2007a). Autonomous robotic sensing experiments san joaquin river. IEEE
International Conference Robotics Automation (ICRA), pp. 49874993, Rome, Italy.
Singh, A., Krause, A., Guestrin, C., Kaiser, W. J., & Batalin, M. A. (2007b). Efficient planning
informative paths multiple robots. International Joint Conference Artificial Intelligence (IJCAI), pp. 22042211, Hyderabad, India.
Smith, D. E. (2004). Choosing objectives over-subscription planning. International Conference
Automated Planning Scheduling (ICAPS).
Somasundara, A. A., Ramamoorthy, A., & Srivastava, M. B. (2007). Mobile element scheduling
dynamic deadlines. IEEE Transactions Mobile Computing, Vol. 6, pp. 395410.
Stachniss, C., Grisetti, G., & Burgard, W. (2005). Information gain-based exploration using raoblackwellized particle filters. Robotics Science Systems (RSS).
Tang, L., & Wang, X. (2006). Iterated local search algorithm based large-scale neighborhood prize-collecting vehicle routing problem. International Journal Advanced
Manufacturing Technology, 113.
754

fiE FFICIENT NFORMATIVE ENSING USING ULTIPLE ROBOTS

Thompson, D. R., & Wettergreen, D. (2008). Intelligent maps autonomous kilometer-scale science survey. International Symposium Artificial Intelligence, Robotics Automation
Space (iSAIRAS).
Trummel, K. E., & Weisinger, J. R. (1986). complexity optimal searcher path problem.
Operations Research, 34(2), 324327.
Zhang, W., & Korf, R. E. (1995). Performance linear-space search algorithms. Artificial Intelligence, 79(2), 241292.

755


