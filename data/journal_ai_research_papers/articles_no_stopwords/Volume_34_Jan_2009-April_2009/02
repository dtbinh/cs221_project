journal artificial intelligence

submitted published

asynchronous forward bounding distributed cops
amir gershman
amnon meisels
roie zivan

amirger cs bgu ac il
cs bgu ac il
zivanr cs bgu ac il

department computer science
ben gurion university negev
beer sheva israel

abstract
search solving distributed constraint optimization discops
presented agents assign variables sequentially compute bounds partial assignments
asynchronously asynchronous bounds computation propagation partial
assignments asynchronous forward bounding afb distributed optimization
search keeps one consistent partial assignment times described detail correctness proven experimental evaluation shows afb outperforms
synchronous branch bound many orders magnitude produces phase transition
tightness increases analogous effect phase transition
observed local consistency maintenance applied maxcsps afb
enhanced addition backjumping mechanism resulting afb bj
distributed backjumping accumulated information bounds values processing concurrently queue candidate goals next move back afb bj
compared experimentally discop adopt dpop optapo shown
efficient discops

introduction
distributed constraint optimization discop general framework distributed
solving wide range applications multi agent systems generated
significant interest researchers modi shen tambe yokoo zhang xing wang
wittenburg petcu faltings mailler lesser ali koenig tambe
silaghi yokoo discops composed agents holding one variables
variable domain possible value assignments constraints among variables possibly
held different agents assign costs combinations value assignments agents assign values
variables communicate attempting generate solution globally
optimal respect costs constraints modi et al petcu faltings
wide scope motivation discop since distributed cops
elegant model many every day combinatorial distributed nature take
example large hospital composed many wards ward constructs weekly timetable
assigning nurses shifts construction weekly timetable involves solving constraint
optimization ward nurses every ward qualified work
emergency room hospital regulations require certain number qualified nurses e g
emergency room shift imposes constraints among timetables different wards
generates complex distributed cop solotorevsky gudes meisels
c

ai access foundation rights reserved

fig ershman eisels z ivan

another example sensor networks tracking zhang xing wang wittenburg
zhang et al task assign sensors tracking targets
maximal number targets tracked sensor collection solved
discop model
discop modeling solve log reconciliation chong hamadi
copies data base exist several physical locations users perform actions
data base copies user local copy actions cause data base change
initially copies identical later actions change longer
identical logs user actions kept merge logs single log
keeps many actions possible possible keep local logs intact
since actions constrained actions example reconcile deletion
item database later print update
discops represent real life cannot solved centrally several
reasons among lack autonomy single point failure privacy agents
hospital wards example wards want maintain degree autonomy local
involving constraints every single nurse sensor example sensors small
memory computing power therefore cannot solve centralized fashion
database example centralization possible issues network bottleneck computing
power single point failure encourage looking distributed solution
present proposes distributed search discops asynchronous
forward bounding afb afb agents assign variables generate partial
solution sequentially innovation proposed lies propagating partial solutions asynchronously propagation partial solutions enables asynchronous updating bounds
cost early detection need backtrack hence name afb form
propagating bounds asynchronously turns generate efficient form concurrent
computation participating agents efficient use asynchronous
assignment processes especially hard instances discops
overall framework afb branch bound scheme agents
extend partial solution long lower bound cost exceed global bound
cost best solution found far proposed afb state
search process represented data structure called current partial assignment cpa cpa
starts empty initializing agent records assignments sends next agent
cost cpa sum costs constraints includes besides current assignment
cost agents maintain cpa lower bound updated according information
receive yet unassigned agents agent receives cpa adds assignments
local variables partial assignment received cpa assignment lower bound
smaller current global upper bound found otherwise backtracks sending
cpa former agent revise assignment
agent succeeds extend assignment cpa sends forward copies updated
cpa requesting unassigned agents compute lower bound estimations cost partial
assignment assigning agent receive estimations asynchronously time use
update lower bound cpa
gathering updated lower bounds future assigning agents may enable agent discover
lower bound cpa sent forward higher current upper bound e inconsistent discovery triggers creation cpa copy cpa sent
forward agent resumes search trying replace inconsistent assignment time


fia synchronous f orward b ounding istributed cop

stamp mechanism proposed nguyen sam hroud faltings used meisels
zivan used agents determine updated cpa discard obsolete cpas
concurrency afb achieved fact forward bounding performed concurrently asynchronously agents form asynchronicity similar
employed asynchronous forward checking afc distributed constraint
satisfaction discsps meisels zivan meseguer jimenez afb
enhanced backjumping zivan meisels resulting performs concurrently distributed forward bounding backjumping prunes search space discops
efficiently demonstrated extensive experimental evaluation section af b
demonstrates phase transition randomly generated discops larrosa schiex
extensive evaluation includes comparisons performance af b best discop
search include asynchronous branch bound adopt modi et al
well principles dpop petcu faltings uses
two passes pseudo tree opt ap divides discop sub mailler
lesser
plan follows distributed constraint optimization presented section section af b full details presented section version
af b enhanced conflict directed backjumping cbj presented correctness proof af b presented section section extensive empirical
evaluation af b presented af b compared state art discop
adop af b include centralization data
dp op opt ap petcu faltings mailler lesser
different principles conclusions presented section

distributed constraint optimization
formally discop tuple x r finite set agents x
finite set variables x x xm variable held single agent agent may hold
one variable set domains dm domain di contains finite set
values assigned variable xi r set relations constraints constraint
c r defines none negative cost every possible value combination set variables
form c di di dik r binary constraint refers exactly two
variables form cij di dj r binary discop discop
constraints binary assignment label pair including variable value
variables domain partial assignment pa set assignments variable
appears vars pa set variables appear pa vars p xi
di xi p constraint c r form c di di dik r
applicable pa xi xi xik vars p cost partial assignment pa
sum applicable constraints pa assignments pa full assignment partial
assignment includes variables vars p x goal full assignment
minimal cost
assume agent owns single variable use term agent
variable interchangeably assume agent ai holds variable xi modi et al petcu
faltings mailler lesser assume constraints binary
delay delivering message finite yokoo modi et al furthermore assume
static final order agents known agents participating search process yokoo


fig ershman eisels z ivan

figure example discop variable two values r b constraints
form shown table left

assumptions commonly used discsp discop yokoo
modi et al
example example discop presented figure variables variable
held different agent domains variables contain exactly two values r b
lines variables represent binary constraints cost constraints shown
table left partial assignment x r cost zero since constraint
applicable partial assignment x r x r cost zero since
constraint applicable partial assignment x r x r cost two due
constraint c partial assignment x r x r x b cost four due
constraints c c c one solution x r x b x r x r
cost five solution since full assignment lower cost

asynchronous forward bounding
afb single date current partial assignment passed among agents
agents assign variables hold date cpa
cpa unique message passed agents carries partial assignment
agents attempt extend complete optimal solution assigning variables
cpa carries accumulated cost constraints assignments contains
well unique time stamp
due asynchronous nature multiple cpas may present instant
however single cpa includes update date partial assignment cpa
highest timestamp
one agent performs assignment single cpa time copies cpa
sent forward concurrently processed multiple agents unassigned agent computes
lower bound cost assigning value variable sends bound back agent


fia synchronous f orward b ounding istributed cop

performed assignment assigning agent uses bounds prune sub spaces
search space contain full assignment cost lower best full assignment
found far total order among agents assumed assumed first agent order
assumed last
detail every agent adds assignment cpa sends forward copies cpa
messages term fb cpa agents whose assignments yet cpa agent
receiving fb cpa message computes lower bound cost increment caused adding
assignment variable estimated cost sent back agent sent fb cpa
message via fb estimate messages computation bound detailed section
notice possible assigning agent already sent cpa forward time
estimations received estimations indicate cpa exceeds bound agent
generate cpa different local assignment higher timestamp associated
continue search cpa timestamping mechanism insures
obsolete cpa eventually discarded regardless current location timestamp
mechanism described section
afb computing lower bound estimation cost increment
computation lower bound cost increment caused adding assignment
agents local variable done follows
denote cost v j u cost assigning ai v aj u agent ai
value domain v di denote minimal cost assignment v incurred
agent aj hj v minudj cost v j u define h v total cost assigning
value v sum hj v j intuitively h v lower bound cost
constraints involving assignment ai v agents aj j note
bound computed per agent since independent assignments higher priority
agents
agent ai receives f b cp message compute every v di
cost increment assigning v value e sum cost v assignments
included cp h v sum denoted f v lowest calculated f v
among values v di chosen lower bound estimation cost increment agent
ai
figure presents constraint network large ovals represent variables small circles represent values presented constraint network already assigned value v
unassigned let us assume cost every constraint one cost v increase
one due constraint current assignment thus f v since v constrained
v v assigning value trigger cost increment performs assignment
therefore h v admissible lower bound cost constraints value
lower priority agents since v conflict assignments cpa f v
well f v assignment conflicts assignment cpa addition
conflicts values two remaining agents
since h v takes account constraints ai lower priority agents aj j
unassigned lower priority agents need estimate cost constraints ai therefore
estimations accumulated summed agent initiated forward
bounding process compute lower bound cost complete assignment extended
cpa


fig ershman eisels z ivan

figure simple discop demonstration
formally define
definition cpa current partial assignment containing assignments made agents
ai
let us define notions past local future costs definitions
definition pc past cost added cost assignments made higher priority agents
cpa costs incurred agents ai
definition lc v local cost cost incurred cpa ai would assign value v
add cpa therefore
x
lc v
cost v j w
aj w cp

definition fc v future cost sum lower bounds cost increments caused
agents ai cpa additional assignment ai v
x
f c v
minwdj f w ai v added cp
j

definitions allow us compute lower bound cost full assignment
extended cpa use bound order prune parts search space agent
ai receives cpa question lower bound would extended
assignment ai v pc lc v known agent fc v computed
time requesting future agents lower priority agents compute lower bounds
send back ai sum pc lc v fc v composes lower bound used
prune search spaces happen agent knows full assignment already


fia synchronous f orward b ounding istributed cop

found cost lower sum therefore exploring search space would lead
better cost solutions
thus asynchronous forward bounding enables agents early detection partial assignments
cannot extended complete assignments cost smaller known upper bound
initiate backtracks early possible
afb description
afb run agents discop agent first calls procedure
init responds messages receives erm e message
presented figure computation bounds time stamping mechanism
shown explained text
initialization agent updates b cost best full assignment found far
since assignment found set infinity line first agent creates
empty cpa begins search process calling assign cpa lines order
value assignment variable
agent receiving cpa received cpa msg first makes sure relevant time
stamp mechanism used determine relevance cpa explained section
cpas time stamp reveals date cpa message discarded
case agent processing message already received message implying
assignment agent higher priority changed
message discarded agent saves received pa local cpa variable line
agent checks received pa without assignment variable exceed
allowed cost b lines exceed bound tries assign value
variable replace existing assignment case one already calling assign cpa line
bound exceeded backtrack initiated line cpa sent higher
priority agent since cost already high even without assignment variable
procedure assign cpa attempts value assignment current agent within
bounds current cpa first estimates related prior assignments cleared line next
agent attempts assign every value domain already try cpa arrived
without assignment variable tries every value domain otherwise search
value continued value following last assigned value assigned value must
sum cost cpa lower bound cost increment caused
assignment exceed upper bound b lines value found
assignment higher priority agent must altered backtrack called line
otherwise agent assigns selected value cpa
agent last agent complete assignment reached accumulated cost lower b broadcasted agents line broadcast inform
agents bound cost full assignment cause update upper
bound b
agent holding cpa continues search updating bound b calling
assign cpa line current value picked call since cpas cost
assignment equal b procedure requires cost lower b
agent continue search testing values backtracking case lead
improvement


fig ershman eisels z ivan

procedure init
b
ai

generate cp

assign cp
received fb cpa aj p
f estimation received p
send f b est im e f p ai aj
received cpa msg p
cp p
empcp p
empcp contains assignment ai remove
empcp cost b

backtrack
else
assign cp
received fb estimate estimate p aj
save estimate
cpa cost saved estimates b
assign cp
received solution p
b cp p
b p cost
procedure assign cpa
clear estimations
cp contains assignment ai w remove
iterate last assigned value di found
v di cp cost f v b
value exists

backtrack
else

assign ai v
cp full assignment

broadcast solution cpa

b cp cost

assign cp
else

send cpa msg cpa ai

forall j

send fb cpa ai cpa aj
procedure backtrack
clear estimates
ai

broadcast terminate
else

send cpa msg cpa ai

figure procedures afb



fia synchronous f orward b ounding istributed cop

agent holding cpa last agent line cpa sent forward
next unassigned agent additional value assignment line concurrently forward bounding
requests e fb cpa messages sent lower priority agents lines
agent receiving forward bounding request received fb cpa agent aj
uses time stamp mechanism ignore irrelevant messages message relevant
agent computes estimate lower bound cost incurred lowest cost assignment
variable line exact computation estimation described section
minimal f v v di estimation attached message sent back
sender fb estimate message
agent receiving bound estimation received fb estimate lower priority
agent aj response forward bounding message ignores estimate already
abandoned partial assignment identified time stamp mechanism otherwise saves
estimate line checks estimate causes current partial assignment exceed
bound b line case agent calls assign cp line order change
value assignment backtrack case valid assignment cannot found
call backtrack made whenever current agent cannot valid value e
bound b case agent clears saved estimates sends cpa backwards
agent ai line agent first agent nowhere backtrack terminate broadcast
ends search process agents line reports optimal solution
cost b full assignment cost b cp
time stamp mechanism
mentioned previously afb uses time stamp mechanism nguyen et al meisels
zivan determine relevance cpa requirements mechanism
given two messages two different partial assignments must determine one
obsolete obsolete partial assignment one abandoned search process
one assigned agents changed assignment requirement accomplished
time stamping mechanism following way agent keeps local running assignment
counter whenever performs assignment increments local counter whenever sends
message containing assignment agent copies current counter onto message
message holds vector containing counters agents passed th element
vector corresponds ai counter vector fact time stamp lexicographical
comparison two vectors reveal time stamp date
agent saves copy knows date time stamp receiving
message newer time stamp agent updates local saved latest time stamp
suppose agent ai receives message time stamp lexicographically smaller
locally saved latest comparing first elements vector means
message combination assignments already abandoned message
discarded messages time stamp first elemental equal greater
locally saved best time stamp message processed
vectors counters might appear require lot space number assignments
grow exponentially number agents however agent ai resets local counter
zero time assignments higher priority agents altered counters remain small
log size value domain mechanism remain correct


fig ershman eisels z ivan

afb example run
suppose run afb discop figure x create empty cpa assign first value
r pass cpa x cpa travel x x finally x agent
assigning first value r along way finally x full assignment
total accumulated cost cost broadcasted agents line figure
upper bound instead infinity next x call assign cp procedure line
call assignment x value b since resulting full assignment
cost cause another broadcast update upper bound another
call assign cp next call x empty domain forced backtrack
cpa x cpa contains assignments x x x r total accumulated cost
upper bound therefore x call assign cp line examining
remaining values x explores assignment b cpa cost
line current upper bound b cpa sent x line x calls
assign cp procedure line value r cpa cost better
upper bound b therefore broadcasted line next value b explored
x cpa cost broadcasted cpa sent backwards x
x values try backtracks cpa x x assigns next value b
sends cpa x addition x sends copies cpa fb cpa messages x
x line x receives fb cpa computes estimation x
r would increase cpas cost b would increase sends
information back x line suppose x receives f b cp replies
estimation cpa explores sub search x b passing x
x estimations arrive x x saves estimations adds leads
discovery backtrack needed since cpas cost x r x b
additional estimations sum equal upper bound b line therefore
x abandons assignment attempts assign next value calling assign cp line
since x values call backtrack line cpa sent backtrack
higher timestamp value cpa previously sent forward x former cpa
would eventually discarded
discussion concurrency robustness privacy asynchronicity
point time run afb single date cpa system
agent adds assignment holds assignments performed sequentially one
might think would necessarily poor performance search process try
take advantage existing multiple computational resources available concurrency
afb comes use forward bounding mechanism cpa held one
agent many copies sent forward collection agents compute concurrently lower
bounds cpa cpa advances next agent process repeats
unassigned agents constantly kept working receive cpa
need compute bounds partial assignment
degree asynchronicity similar employed asynchronous forward checking
afc discsps meseguer jimenez meisels zivan afc performs
similar process agents receive forward checking messages agents performed assignments unassigned agents perform forward checking checking least
one value consistent previous assignments afb agents compute lower


fia synchronous f orward b ounding istributed cop

bound local cost increment due assignments made previous agents due
similarity named asynchronous forward bounding
afbs quite different used asynchronous assignments
adopt abt modi et al bessiere maestre brito meseguer
search process attempts perform assignments concurrently collection
agents since many agents assigning variables simultaneously probability
must handled current agents view assignments made agents
incorrect due fact agents concurrently alter assignments
must able deal uncertainty
search process performs assignments asynchronously may expected save time
since agents need wait assignments past agents reach done sequentially assigning however asynchronously assigning must deal
inconsistencies caused message delay example several higher priority agents change
assignments messages received others delayed computation
performed inconsistent agent view type scenario computation inconsistent partial assignment completely avoided sequentially assigning

one variation afb agents sent fb cpa messages send
messages subset target agents direct constraint sending
agent may useful communication agents limited agents may communicate agents direct conflict would keep correct
change may two effects first less agents return bounds sending agents
bounds significant greater zero since take account constraints assignments previous agents may conflicted constraints
receiving agent agents lower priority constraint unassigned agents receiving less
lower bounds would invalidate correctness may cause search process needlessly explore sub spaces could discovered dead ends second
detection obsolete cpas may delayed since less agents receive higher timestamp
fb cpa may contain mechanism would remain correct since eventually another fb cpa
cpa would reach agent receive fb cpa however may take
time single cycle messages words time travel time
single message two agents afb intentionally presented sends fb messages unassigned agents since constraint communication
agents assumed case constraints exist one attempts reduce number
messages sent variation explored
privacy considered one main motivations solving distributively common model distributed search discsps discops enables assignments
nogoods passed among agents yokoo ishida durfee kuwabara yokoo b
bessiere et al modi et al zivan meisels meisels zivan af b follows model proposed yokoo sending assignments forward bounds partial assignments
n ogoods backwards additional privacy drawback af b fact agents learn
assignments non neighboring agents via cpas receive neighbors
easily solved af b simple use encryption every pair neighboring
agents share encryption key agent would able learn assignments
neighbors receives cpa use limited encryption discop
recently proposed dp op greenstadt grosz smith


fig ershman eisels z ivan

due privacy constraints partially known two constrained agents
part constraint known constrained agents bound computation
mechanism must adjusted afb type constraints discussed discsp brito meisels meseguer zivan best knowledge discop solver
far handled constraints remains interesting possible extension afb part
future work
robustness another important aspect distributed search assumed
messages delivered order sent messages lost however
message passing susceptible losses corruption data afb may terminate say
cpa message lost possible local data held agents corrupt due
mechanical failure example solution would build self stabilizing
self stabilization distributed systems dijkstra ability system respond
transient failures eventually reaching maintaining legal state self stabilizing version
shown simple dfs discsps collin dechter katz
self stabilizing dfs self stabilizing version dpop developed petcu
faltings b however self stabilizing discsp discop solvers best
authors knowledge clearly thorough study robustness self stabilization
required discop
conclude afb includes concurrent computation multiple agents without
deal uncertainty comes asynchronous assignments agent
receives message containing partial assignment knows certainty given partial assignment one supposed receive network delay inconsistency
therefore afb concurrent computation certainty working consistent partial assignments much better performance hard instances random discops
demonstrated empirical evaluation section

afb cbj
centralized distributed csps backjumping accomplished maintaining data
structures allow agent deduce latest agent order assignments
made whose changed assignment could possibly lead solution agent
found assignments following agents unmade search process backjumps
agent prosser
similar process designed branch bound solvers cops discops
consider sequence assignments agents determined
none possible value assignments lead full assignment cost lower cost
best full assignment found far clearly must backtrack
chronological backtracking search process would simply return previous agent
namely change assignment however sometimes determine value
change would suffice reach full assignment lower cost intuitively safely
backjump compute lower bound cost full assignment extended
assignments bound greater equal cost best
full assignment found far intuitive basis backjumping added afb
formally let us consider scenario ai decides backtrack cost
best full assignment found far b e g upper bound current state search
current partial assignment includes assignments agents ai


fia synchronous f orward b ounding istributed cop

definition cpa k set assignments made agents ak current partial
assignment define cp
definition fa k set full assignments include assignments appearing
cpa k words set contains full assignments extended
assignments appearing cpa k naturally fa set possible full assignments
backtrack instead simply backtracking previous agent ai performs following
actions computes lower bound cost full assignment fa bound
smaller b backtracks ai would chronological backtracking however
bound greater equal b backtracking ai would little good value
change ai alone could full assignment cost lower b ai knows
safely backjump ai may possible ai backjump even depending
lower bound cost full assignment
fa bound smaller b backjumps ai otherwise knows safely
backjump ai similar checks made necessity backjump
backjumping procedure relies computation lower bounds sets full assignments fa k next ai compute lower bounds let us define
notions past local future costs definitions
definition pc past costs vector size n k th element k n
equal cost cpa k
definition lc v local costs vector size n computed ai held
k th element k n
x
lc v k
cost ai v aj vj
aj vj cp jk

since cpa held ai includes assignments ai
j lc v lc v j
intuitively lc v accumulated cost value v ai respect assignments
cpa
definition fcj v future costs vector size n k th element k n
contains lower bound cost assigning value aj respect partial assignment cpa k assume structure held agent ai k cpa k contains
assignment ai v k value v ai irrelevant appear cpa k
vectors provide additive lower bounds full assignments start current
cpa k fa k pc k ispthe exact cost first k assignments lc v k exact cost
assignment ai v j f cj v k lower bound assignments ai
therefore sum
x
falb v k lc v k p c k
f cj v k
j



fig ershman eisels z ivan

figure example discop
full assignment lower bound cost full assignment extended cpa k
ai v
fa k contains full assignments extended cpa k limited assignments
ai v go falb v k possible values v di produce lower
bound assignment fa k
definition falb k minvdi f alb v k
falb k lower bound cost full assignment extended cpa k
distributed branch bound bound computed ai pc cost
previous agents sent along value assignment messages ai lc v cost
assigning v ai computed ai ai requests agents ordered aj j
compute fcj send back ai part already existing afb mechanism
forward bounding
afb gershman meisels zivan ai already requests unassigned
agents compute lower bounds cpa send back additional bounds
needed backjumping easily added existing afb framework
backjumping example
demonstrate backjumping possibility consider discop figure large ovals
represent variables small circles represent values let us assume search begins
assigning value sending cp forward assign
value get full assignment cost search continues fully
exploring sub space best assignment found
b b total cost b assume holding cp
receiving future agent exhausted value domain must
backtrack computes
f alb p c lc f c f c


fia synchronous f orward b ounding istributed cop


f alb b p c lc b f c b f c b

f alb min f alb f lab b
f alb b therefore knows full assignment extended would cost
least full assignment cost already discovered need explore
rest sub space safely backjump search process back change
value b backtracking leaves search process within sub space
knows cannot lead full assignment lower cost
afb bj
afb bj run agents discop agent first calls procedure init responds messages receives terminate message
presented figures pure afb timestamping mechanism used messages
timestamping mechanism used afb used afb bj determine messages relevant obsolete simplicity choose omit pseudo code detailing calculation lc pc fc falb described section
starts agent calling init awaiting messages termination
first agent updates b cost best full assignment found far since
assignment found set infinity line first agent creates empty
cpa begins search process calling assign cpa lines order value
assignment variable
agent receiving cpa received cpa msg checks time stamp associated
date cp discarded message discarded agent saves
received pa local cpa variable line case cpa received higher priority
agent estimations future agents f cj longer relevant discarded
domain values must reordered updated cost lines agent attempts
assign next value calling assign cpa line backtrack needed line
procedure assign cpa attempts value assignment current agent assigned
value must sum cost cpa lower bound cost increment
caused assignment exceed upper bound b lines value found
assignment higher priority agent must altered backtrack called line
full assignment found better best full assignment known far
broadcast agents line succeeding assign value cpa sent forward
next unassigned agent line concurrently forward bounding requests e fb cpa messages
sent lower priority agents lines
agent receiving bound estimation received fb estimate lower priority
agent aj response forward bounding message ignores estimate already
abandoned partial assignment identified time stamp mechanism otherwise saves
estimate line checks estimate causes current partial assignment exceed
bound b line case agent calls assign cp line order change
value assignment backtrack case valid assignment cannot found


fig ershman eisels z ivan

procedure init
b
ai

generate cp

assign cp
received fb cpa aj p
v estimation vector pa k k n
send f b est im e v p ai aj
received cpa msg p aj
cp p
empcp p
j
j initialize f cj v
reorder domain values v di lc v low high
empcp contains assignment ai remove
empcp cost b
backtrack
else
assign cp
received fb estimate v p aj
f cj v v
falb v b
assign cp
received solution p
b cp p
b p cost
figure initialization message handling procedures afb bj

call backtrack made whenever current agent cannot valid value e
bound b case agent calls backtrackto compute agent cpa
sent backtracks search process sending cpa back agent
agent first agent nowhere backtrack terminate broadcast ends search process
agents line reports optimal solution cost b
full assignment corresponding cost b cp
function backtrackto computes agent cpa sent kernel
backjumping bj mechanism goes candidates j looking
first agent finds chance reaching full assignment lower cost
b falb v j lower bound cost full assignment extended cpa j
pc j pc j cost added cpa aj assignment since aj picked lowest cost
value domain domain ordered line addition two components


fia synchronous f orward b ounding istributed cop

procedure assign cpa
cp contains assignment ai w remove
iterate last assigned value di first value satisfying
v di cp cost f v b
value exists

backtrack
else

assign ai v

cp full assignment

broadcast solution cpa

b cp cost

assign cp

else

send cpa msg cpa ai ai

forall j

send fb cpa ai cpa aj
procedure backtrack
ai

broadcast terminate
else

j backtrackto

remove assignments aj ai cp

send cpa msg cpa ai aj
function backtrackto
j downto

foreach v di

falb v j pc j pc j b

return j
broadcast terminate
figure assigning backtracking procedures afb bj
produces accurate lower bound cost full assignment extended cpa j
safely added falb since adds lower bound cost increment
agent falb include lower bound
example example presented section computed falb b added
past costs partial assignments cost incurred local cost lower
bound cost increment future agents sum safely add cost
added know picked lowest cost assignment
addition helps tighten falb reduce search combined bound smaller
b surely combination assignments made aj following agent could
raise cost already high case even backjumping back prove
helpful search process terminated line


fig ershman eisels z ivan

correctness afb
order prove correctness af b two claims must established first
terminates second terminates global upper bound b cost
optimal solution prove termination one af b never goes
endless loop prove last statement enough partial assignment
cannot generated
lemma af b never generates two identical cpas
assume negation ai highest priority agent first order assignments
generates cpa second time lets consider possible events immediately
preceded creation
case ai received cpa message lower priority agent let us denote agent aj
j ai received message executed lines see figure procedure
backtrack line executed since know ai generated cpa procedure would
therefore line executed procedure assign cpa invoked ai executed
lines line executed since invoking backtrack procedure could lead
creation cpa therefore line value described line found exist
line searches value ai remaining value domain exploring value previously
attempted current set assignments higher priority agents since assumed ai
highest priority agent generates cpa second time combination higher
priority assignments repeat therefore since ai received current set higher
priority assignments ai pick local value set high priority assignments
repeat therefore ai cannot pick value would generate cpa
second time
case ai received cpa message higher priority agent let us denote agent
aj j since assumed ai highest priority agent generates cpa
second time combination higher priority assignments repeat therefore
value ai would assign next would generate unique cpa one could generated

case ai received cpa message cannot since ai never sends
message
case ai received fb estimate message aj j since fb estimate
sent response fb cpa messages sent line agents lower priority
ai since message caused creation cpa condition line must
evaluated true procedure assign cpa line invoked similar case lines
executed line similar case value found line value
repeat value previously picked current set higher priority agent assignments
time agent received current set higher priority agent assignments due
assumption ai first generate cpa twice
case procedure init invoked cannot since cpas previously generated cpa generated must unique
events could immediately preceded creation second identical cpa
therefore impossible event occur completes proof lemma
termination follows immediately lemma



fia synchronous f orward b ounding istributed cop

next one needs prove upon termination complete assignment corresponding
optimal solution b cp see figure one point termination
af b procedure backtrack one needs prove search partial
assignment lead solution lower cost b discarded let us consider possible
cases agent discards cpa changes value skips value let us
cannot skipping changing value done inside procedure assign cpa
lines v value skipped condition line holds
cp cost f v b since b b cp cp cost f v b b cp
means v could possibly lead solution cost lower b cp termination let
us consider possible cases value changed occurs inside procedure
assign cpa let us consider possible cases procedure invoked
value change
case invoking assign cpa init procedure line solution could lost since
first assignment performed part search space skipped
assignment
case invoking assign cpa inside assign cpa procedure line happens
best far solution found obviously changing assignment would lose
solution since saved broadcasted current solution discarded
better solution later found
case invoking assign cpa following received fb estimate message line
current partial assignment safely discarded knowing solution lost since
condition line indicated current partial assignment lower bound exceeds
best solution found far
case invoking assign cpa following received cpa msg message line aj
j means cpa returned backtrack fully exploring current sub space
therefore changing current assignment would lead potential solution lost
case invoking assign cpa following received cpa msg message line aj
j means cpa received higher priority agent ai yet pick
assignment assignment make lose potential solutions
therefore value skipped change cpa lead loss
potential solution remaining event may lead solution skipped
cpa discarded done time stamping mechanism occurs
agent knows existence date cpa cpa created agent
changed assignment calling assign cpa showed case better solution
lost therefore safe discard cpa
conclusion event value skipped changed cpa discarded possible better solution lost therefore termination afb reports best solution
possible completes correctness proof af b
order prove correctness afb bj first prove correctness proposed backjumping method combination afb violate afbs
correctness proven
order prove correctness backjumping method one need none
agents assignments backjumps lead solution lower
cost current upper bound condition performing backjumping agent aj
line lower bound cost full assignment extended assignments


fig ershman eisels z ivan

figure total non concurrent computational steps afb adopt sbb low density
p max discsp

aj assignment cost aj exceeds global upper bound b since aj picked
lowest cost value remaining domain domain ordered extending assignments
aj must lead cost greater equal b therefore backjumping back aj
cannot discard potentially lower cost solutions completes correctness proof
afb bj backjumping function backtrackto method
assuming correctness afb order prove correctness composite
afb bj enough prove consistency lower bounds computed agents afbbj lower bounds computed afb bj include fc lc pc described section pc
contained cpa updated agent receives adds assignment
shown code lc v computed current agent ai whenever assigns v value
assignment fcj computed aj line figure sent back ai line ai
receives saves line lower bounds contained inside vectors correct
pc exactly calculated holding cpa lc exactly calculated current
agent ai bounds fcj bounds computed afb proven
correct lower bounds assignment aj fcj bounds accurate
current partial assignment since timestamp mechanism prevents processing bounds
obsolete cpa whenever cpa altered higher priority agent previous
bounds cleared line figure completes correctness proof af b bj

experimental evaluation
experiments performed simulator agents simulated threads
communicate message passing distributed optimization used
presented experiments random max discsps network constraints
experiments generated randomly selecting probability p constraint among pair
variables probability p occurrence violation non zero cost among two
assignments values constrained pair variables uniform random constraints networks
n variables values domain constraints density p tightness p commonly
used experimental evaluations csp cf prosser max csps commonly
used experimental evaluations constraint optimization cops larrosa schiex


fia synchronous f orward b ounding istributed cop

figure total number messages sent afb adopt sbb low density p maxdiscsp



b

figure number none concurrent steps performed adopt afb afb minc afbbj high density max discsp p b closer look p

experimental evaluations discops include graph coloring modi et al
zhang et al subclass max discsp
order evaluate performance distributed two independent measures
performance used run time form non concurrent steps computation zivan
meisels b communication load form total number messages sent lynch
yokoo
first set experiments performance af b compared two
synchronous b b sbb hirayama yokoo asynchronous distributed optimization adop modi et al figure presents average runtime number non concurrent computation steps randomly generated max discsps
n agents domain size constraint tightness p figure compares


fig ershman eisels z ivan



b

figure number messages sent adopt afb afb minc afb bj high density
max discsp p b closer look p

total number messages sent figures
clear adopt outperforms basic sbb accordance past experimental evaluation two modi et al clear afb outperforms
adopt large margin tight high p true measures
second set experiments includes adopt three versions afb afb afb minc variation afb includes dynamic ordering values
minimal cost current cpa afb bj composite backjumping forwardbounding afb bj uses value ordering heuristic afb minc selected order improved performance afb bj indeed arise backjumping feature value ordering heuristic
figure presents average run time number non concurrent computation steps
adopt afb afb minc afb bj max discsps n agents
domain size constraint density p asynchronous optimization adopt
much slower standard version afb clear figure value ordering
heuristic greatly improves afbs performance added backjumping improves performance
much rhs figure provides zoom section graph
p p tight adopt terminate reasonable
amount time terminated manually thus missing graph
tightness values higher p afb variants demonstrate phase
transition phase transition behavior afb similar lookahead centralized max csps larrosa meseguer larrosa schiex
explanation phase transition difficulty increase exponentially
tightness point becomes constrained many
combinations produce highest cost possible combinations fact equal quality
easily pruned intelligent search


fia synchronous f orward b ounding istributed cop

figure number non concurrent constraint checks ncccs performed several discop
solvers high density max discsp p linear scale top logarithmic scale bottom

figure presents total number messages sent
measurement closely match run time measured non concurrent steps


fig ershman eisels z ivan

figure number non concurrent constraint checks ncccs performed several discop
solvers low density maxdiscsp p logarithmic scale

see adopt exponentially rapid growth messages explanation
growth simple following message agent receives adopt several value messages
sent lower priority agents single cost message sent higher priority agent modi
et al average least two messages sent every message received therefore
total number messages system increases exponentially time
third batch experiments includes comparison two additional discop solvers dpop petcu faltings optapo mailler lesser dpop performs
linear number computational steps step performs exponential number computations number messages dpop linear n number agents similar adopt
dpop uses pseudo tree ordering agents use ordering
optapo performs partial centralization agents solve
part charge therefore evaluation measures
use number non concurrent computational steps inappropriate since steps
exponentially time consuming reason performance must evaluated different metric canonical choice number non concurrent constraint checks
n cccs implementation independent measure includes computations performed within
every single step zivan meisels b number messages sent
good measure case since dpop sends exponentially large messages linear
number send exponential amount messages
linear size thus present n cccs metric repeat experimental setup previous experiment randomly generated report total
number non concurrent constraint checks ncccs figure presented
logarithmic linear scales
experiment optapo sbb adopt terminate reasonable time
harder instances therefore partially absent graphs computation


fia synchronous f orward b ounding istributed cop

dpop composed agent sending message containing subtrees optimal cost
every possible combination higher priority constrained agents given constraint density
size message agent sends would effected changing constraint tightness therefore computation performed agent unaffected changing constraint
tightness p dpops run time expected remain roughly tightness values
experiment low constraint tightness dpops performance poor
compared rest however tightness increases gap
dpops run time rest narrows p dpop optapo
sbb roughly run time p dpop outperforms adopt optapo sbb
terminate afb variants outperform dpop whole range constraint
tightness orders magnitude optapo appears perform slightly better sbb
afb clearly outperforms orders magnitude afb variations produce phase
transition reported previous experiments af b bj comes best performing
solving random discops
similar experiment low density p max discsps presented
figure notice logarithmic scale high density dpop performance unaffected tightness producing roughly similar tightness values
low tightness values optapo afb vastly superior dpop optapo slightly outperforms afb tightness increases optapo increases exponentially run time become
worst performing afb outperforms dpop tightness values except p

conclusions
asynchronous forward bounding af b uses asynchronous concurrent constraint propagation top distributed branch bound scheme forward bounding
protocol af b maintains local consistency prevents exploration dead ends searchspace run time network load afb evaluated asynchronous simulator
randomly generated ax discsp evaluation revealed phase transition
af bs performance tightness increased beyond point
discop solver reported display behavior similar phase transition previously
reported centralized cop solvers part work larrosa et al larrosa meseguer
larrosa schiex phase transition observed reported occur
cop solvers enforce strong enough form local consistency larrosa meseguer
larrosa schiex therefore attribute behavior afb concurrent enforcement
local consistency
af b extended one extension include value ordering heuristic good ordering heuristic minimum cost heuristic values lower cost due assignments
higher priority agents selected first named version afb minc
experiments use heuristic substantially improved performance af b
extension af b enhanced backjumping mechanism adding small
amount information bounding messages agents detect lower bound
current partial assignment large e state inconsistent backtracking required
able check whether backtracking previous agent indeed help reduce
lower bound resulting partial assignment consistent otherwise search process
backtracks even resulting afb bj performs significantly better
versions afb comparing afb minc afb bj shown backjumping


fig ershman eisels z ivan

indeed affect performance improvement standard af b
addition ordering heuristic
af b compared two branch bound
mechanism distributed form adopt sbb yokoo b modi et al
experimental evaluation clearly demonstrates substantial difference performance
asynchronous distributed optimization adop outperforms sbb af b outperforms adop large margin measures performance best knowledge evaluation adop increasingly tighter experimental
evaluations measured adop scalability increasing number variables increasing difficulty tightness fixed size exponential growth number
messages adop apparent figures outperforming af b two
extended versions af b afb minc afb bj afb bj best performance
proposed value ordering heuristic improves performance adding backjumping
mechanism top performance even enhanced
although af b adop perform concurrent computation nature concurrency used
different concurrency adop achieved performing asynchronous assignments agent picks value assignment free change
time multiple agents may change assignments concurrently asynchronous assignments
introduce degree uncertainty regard consistency current partial assignment known agent fact scenarios agent may base computation
inconsistent partial assignment combination assignments performed higher
priority agents aware others date assignment
two used comparisons af b adop dp op use
pseudo tree ordering agents allows independent subproblems solved concurrently
good pseudo tree ordering problematic np hard optimal ordering
sometimes even best ordering good enough due structure specific overall orderings become less useful dealing high constraint
density
order evaluate performance afb compared tested two
additional discop dpop optapo use branch bound
optimal solution dpop delivers possible partial assignments pseudo tree
performs exponential number constraints checks two passes pseudo tree petcu
faltings optapo partitions discop sub solved mediator
sub mailler lesser performance expected
different use branch bound search fact performance dpop
randomly generated discops independent tightness
extensive empirical evaluations random discops described section
conclusive afb best performing discop randomly
generated discops measures performance performs less non concurrent constraints
checks sends smaller number messages
essence idea behind af b summed follows run sequential assignment
optimization process concurrently run parallel many additional processes check consistency partial assignment main search process slow point time one
agent holds current partial assignment order extend concurrency achieved via
forward bounding performed concurrently


fia synchronous f orward b ounding istributed cop

experimental evaluation adding concurrent maintenance bounds
sequential assignment process efficient optimization af b outperforms concurrent hard instances random discops

references
ali koenig tambe preprocessing techniques accelerating dcop
adopt aamas pp
bessiere c maestre brito meseguer p asynchronous backtracking without
adding links member abt family artificial intelligence
brito meisels meseguer p zivan r distributed constraint satisfaction
partially known constraints constraints press
chong hamadi distributed log reconciliation proc ecai pp

collin z dechter r katz self stabilizing distributed constraint satisfaction
chicago journal theoretical computer science
dijkstra e w self stabilizing systems spite distributed control commun acm

gershman meisels zivan r asynchronous forward bounding backjumping distributed constraints reasonning workshop ijcai hyderabad india
greenstadt r grosz b smith ssdpop improving privacy dcop
secret sharing aamas proceedings th international joint conference
autonomous agents multiagent systems pp york ny usa acm
hirayama k yokoo distributed partial constraint satisfaction cp
pp
larrosa j meseguer p phase transition max csp proc ecai budapest
larrosa j schiex solving weighted csp maintaining arc consistency artificial
intelligence
lynch n distributed morgan kaufmann series
mailler r lesser v solving distributed constraint optimization
cooperative mediation proceedings third international joint conference autonomous agents multiagent systems aamas pp acm
meisels zivan r asynchronous forward checking distributed csps constraints
meisels zivan r asynchronous forward checking distributed csps constraints
meseguer p jimenez distributed forward checking proc cp workshop
distributed constraint satisfaction singapore
modi p j shen w tambe yokoo adopt asynchronous distributed constraints optimization quality guarantees artificial intelligence


fig ershman eisels z ivan

nguyen sam hroud faltings b dynamic distributed backjumping proc
th workshop distributed constraints reasoning dcr toronto
petcu

faltings b
value ordering heuristic distributed resource allocation
proc csclp lausanne switzerland
http liawww epfl ch publications archive petcu pdf

petcu faltings b scalable method multiagent constraint optimization
proc ijcai pp
petcu faltings b b dpop superstabilizing fault containing multiagent combinatorial optimization proceedings national conference artificial intelligence
aaai pp
prosser p hybrid constraint satisfaction computational
intelligence
prosser p empirical study phase transitions binary constraint satisfaction artificial intelligence
silaghi c yokoo nogood asynchronous distributed optimization
adopt ng proc aamas pp
solotorevsky g gudes e meisels modeling solving distributed constraint
satisfaction dcsps constraint processing pp hamphshire
yokoo distributed constraint satisfaction review autonomous
agents multi agent sys
yokoo b distributed constraint satisfaction springer verlag
yokoo ishida durfee e kuwabara k distributed constraint satisfaction
formalizing distributed solving ieee intern conf distrb comp sys pp

zhang w xing z wang g wittenburg l analysis application distributed
constraint satisfaction optimization sensor networks proc nd intern
joint conf autonomous agents multi agent systems aamas pp melbourne australia
zhang w xing z wang g wittenburg l distributed stochastic search distributed breakout properties comparishon applications constraints optimization sensor networks artificial intelligence
zivan r meisels dynamic ordering asynchronous backtracking discsps
constraints
zivan r meisels conflict directed backjumping maxcsps ijcai
hyderabad india
zivan r meisels concurrent search distributed csps artif intell

zivan r meisels b message delay discsp search annals mathematics artificial intelligence




