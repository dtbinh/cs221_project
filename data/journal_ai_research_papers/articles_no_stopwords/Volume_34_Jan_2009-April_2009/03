journal artificial intelligence

submitted published

exploiting single cycle symmetries
continuous constraint
vicente ruiz de angulo
carme torras

ruiz iri upc edu
torras iri upc edu

institut de robotica informatica industrial csic upc
llorens artigas barcelona spain
www home page www iri upc edu

abstract
symmetries discrete constraint satisfaction explored exploited last years symmetries continuous constraint received attention focus permutations variables consisting
one single cycle propose procedure takes advantage symmetries
interacting continuous constraint solver without interfering key concept
procedure classes symmetric boxes formed bisecting n dimensional
cube point dimensions time analyze classes
quantify function cube dimensionality moreover propose simple
generate representatives classes number variables
high rates example chemical field cyclic n roots
used performance practice

introduction
symmetry exploitation discrete constraint satisfaction csps received
great deal attention lately since csps usually solved ai search
approaches dealing symmetries fall two groups entail reformulating
adding constraints search flener frisch hnich kiziltan miguel
puget break symmetries along search meseguer torras
gent permutations variables interchangeability values commonly
addressed symmetries repertoire techniques developed
relying computational group theory
contrary symmetries largely disregarded continuous constraint
solving despite important growth theory applications field
recently experienced sam haroud faltings benhamou goualard jermann
trombettoni porta ros thomas torras continuous numerical
constraint solving often tackled branch prune b p hentenryck
mcallester kapur vu silaghi sam haroud faltings iteratively
locate solutions inside initial domain box alternating box subdivision branching
box reduction pruning steps
motivated molecular conformation deal
simple type box symmetry namely domain variables e box dimensions undergo single cycle permutation leaving constraints invariant clear
cycle involves n variables handles n symmetries excluding
c

ai access foundation rights reserved

firuiz de angulo torras

identity generated cycle composition since computational gain
shown roughly proportional n longest cycle appearing formulation chosen input
single cycle permutation leaves constraints unchanged form constraint symmetry terminology introduced cohen jeavons jefferson petrie
smith note constraint symmetry solution symmetry
way around thus symmetries deal subset possible solution
symmetries advantage assessed although perhaps difficult
formulation therefore operative
exploit symmetries continuous constraint requires
initial domain symmetric variables n cube starts subdividing
cube point along dimensions since box symmetry transitive
relation subboxes resulting subdivision fall equivalence classes
b p similar continuous constraint solver called subboxes
representatives symmetry equivalence class finally solution found
symmetric ones generated note symmetry handling doesnt interfere
inside workings constraint solver

symmetry continuous constraint
interested solving following general continuous constraint satisfaction continuous csp points x x xn lying initial box rn satisfying
constraints f x c fm x cm function rn r ci
interval r
particular feature require continuous constraint solver ccs
work axis aligned box rn input assume
ccs returns solution boxes note ccs returning solution points limit case still
contained framework
say function rn rn point symmetry exists
associated permutation x f x ci c
consider symmetry property relates points equivalent regards
continuous csp concretely definition one conclude
x solution iff x solution
let two symmetries continuous csp associated permutations
easy see composition symmetries symmetry
associated permutation
interesting type symmetries permutations bijective functions set onto
components x let finite set cycle length k permutation
exist distinct elements ak ai mod k
z z element z cycle represented ak
every permutation expressed composition disjoint cycles e cycles without
common elements unique order factors composition cycles
represented concatenation example ak b bl focus
particular type permutations namely constituted single cycle


fiexploiting single cycle symmetries

simplest form x x xn x x x n x x xn x
mod n
example n x x x x
f x

x x x x x x

f x

x x x x

f x

x x x x

f x

x x x x

exists symmetry x x x x x x need reordering variables constraint permutation associated

generally unique symmetry given exists symmetry
example x x another symmetry general convention
denoting x identity mapping si x n set different symmetries
obtained composing x n si x
si mod n x thus single cycle symmetry generates composition n symmetries
excluding trivial identity mapping may different numbers cycles
imagine example continuous csp n permutation variables
symmetry permutation obtained composing twice
symmetry different number cycles longest
cycle length two instead four besides former permutation cannot generated
latter presented deals compositions
single cycle symmetry even single cycle symmetries
gain obtained proposed shown roughly proportional
number different compositions selected symmetry therefore several
single cycle symmetries exist continuous csp used
generating symmetries composition e longest
cycle note single cycle permutations dealing need encompass
variables since remaining ones considered fixed unitary cycles

box symmetry
since continuous constraint solvers work boxes turn attention set
points symmetric belonging box b rn
let single cycle symmetry corresponding circular variable shifting introduced preceding section b x x xn xn box rn box symme general variables must arranged suitable order one apply circular shifting thus general form single cycle symmetry x h g h x
h x xn x x n n general permutation orders variables
g x xn x x n circular shifting thus cycle defining symmetry expressed since reordering change substantially
presented concepts simplified notation assuming order
component variables appropriate one e
set x x b box x x sn x g x gn x n
si th component arbitrary permutation gi r r function
interval r gi x x interval r



firuiz de angulo torras

try function defined b x x b x x x n x n
x x xn xn x x box symmetry function associated constraint permutation associated denote composed
times say b b symmetric boxes exists b b
box symmetry equivalence relation defining symmetry equivalence classes let
r b set different boxes symmetry class b r b b n
instance box b r b composed
b b b b
note b b subsequent applications
box symmetry would repeat sequence boxes define period p b
box b p b r b easily shown r b b p b
example box b r b b b b p b
box symmetry implications continuous csp direct consequence
point symmetry case
solution inside box b solution inside symmetric
boxes
box b b solution iff b b solution box p b

sketch proof first statement assume solution inside b
solution xsol inside b definition box symmetry exists point x sol b
xsol si x sol property highlighted section deduce x sol
must solution contradicts hypothesis
sketch proof second statement solution box box least solution
point inside assume b b solution box containing solution point xsol inside
b point si xsol property highlighted section must
solution conversely assume b b solution box thus contains
least solution point xsol definition symmetric box point symmetric
point x sol b xsol si x sol property section conclude
x sol must solution thus b solution box
statements rephrased follows
set solution boxes contained box b solset set solution boxes
contained symmetric box b b b solset
means solutions inside b found solutions inside
symmetric boxes b p b available without hard calculations
following sections exploit property save much computing time
meta uses ccs tool without interfering
box symmetry classes obtained bisecting n cube
propose exploit box symmetry makes use symmetry classes
formed bisecting n dimensional cube n e period dimensions
time point resulting n boxes denote l h
two subintervals original range divided example n


fiexploiting single cycle symmetries

following set boxes l l l h h l h h whose periods
respectively symmetry classes l l l h h l
h h representing two intervals l h respectively dropping
symbol sub boxes coded binary numbers let srn set
representatives formed choosing smallest box binary order class
example sr note cube n partitioned thought
set binary numbers length n srn nothing subset
whose elements different circular shift
exploiting symmetries way uses srn explained
next section afterwards sections study many components srn
distributed importantly generated

exploit box symmetry
csym
input n cube xl xh xl xh
single cycle box symmetry
continuous constraint solver ccs
output set boxes covering solutions



solutionboxset emptyset
x selectbisectionpoint xl xh
foreach b srn
b generatesubbox b xl xh x
solutionboxset solutionboxset processrepresentative b



return solutionboxset






symmetry exploitation propose uses ccs external routine
internals ccs must modified known
idea first divide initial box number symmetry classes next one
needs process representative class ccs end applying
box symmetries solution boxes obtained way one would get solutions
lying space covered whole classes e initial box advantage
procedure ccs would process fraction initial box assuming
initial box n cube covering interval xl xh dimensions
directly apply classes associated srn procedure exploit single cycle symmetries
way presented
since srn set codes real boxes need translation codes
boxes given initial box operator generatesubbox b xl xh x returns
box v v vn corresponding code b b bn xl xh range
initial box dimensions x point interval bisected

xl x bi
vi

x xh bi


firuiz de angulo torras

point x calculated selectbisectionpoint xl xh xl
xh reasonable one xl xh iterations line generate set
representative boxes together symmetries cover initial n cube
processrepresentative b returns solution boxes associated b
solutions inside r b still words solutions inside b inside symmetric
boxes processrepresentative b property stated end section
allows obtain solutions class b processing b
ccs solset set solutions found inside representative box class b
applysymmetry solset calculates set solutions box b applying
boxes solset since number symmetries b p b benefits
exploiting symmetries class representative proportional period
x

processrepresentative function
input box b
single cycle box symmetry
continuous constraint solver ccs
output set solution boxes contained b symmetric boxes



solset ccs b
otalsolset solset
p b
otalsolset otalsolset applysymmetry solset



return otalsolset





correctness easy check set boxes searches explicitly implicitly means symmetry solutions u r b b representative
fact u set boxes formed bisecting initial box dimensions
time point u covers whole initial box thus finds
solutions moreover finds solution box
boxes u common share wall
discussion efficiency csym
csym launches ccs srn small boxes instead
original large one three factors affect efficiency compared standard

fraction domain processed fraction original domain directly
dealt ccs fraction function periods srn components one element period p represents class formed p boxes one
processed ccs since boxes classes equal size
fraction calculated dividing number representatives
n
p srn
total number boxes classes sr
n
p b expected time gain
p

bsrn

p b

n
inverse quantity bsr
denoted ifdp inverse fraction
srn
domain processed n grows see section majority elements



fiexploiting single cycle symmetries

srn period n thus ifdp tends n however low n ifdp
significantly smaller n main factor determining efficiency
csym
smaller processed boxes since ccs initial boxes csym n times
smaller original initial box average size boxes processed
ccs smaller standard case prune box reduction contraction
step carried quickly smaller boxes branch prune
fact best branch prune box contraction operators exhibiting
second order convergence contraction rate requires small enough boxes
hold practice
number representatives disadvantage fractioning excessively
initial domain see noting original large initial
box contraction operator lowers upper bound symmetric variable
information could used lower upper bound variable many
representative boxes srn commented contraction operator would
act strongly representatives loss parallelization
effect anyway present factor irrelevant small length cycle symmetries
say n srn small see section compared
number boxes ccs must process general however n approaches
number representatives begins become overwhelming

two illustrative examples
two solved branch prune ccs presented
porta ros thomas corcho canto perez polytope method
similar sherbrooke e c global consistency exhibits quadratic
convergence machine used carry experiments ghz
g apple computer
cycloheptane
molecules modeled mechanical chains making reasonable approximations
two atoms joined chemical bond one assume rigid link
thus first approximation bond lengths constant second one
angles two consecutive bonds constant words
distances atoms subchain three atoms assumed constant
configurations atoms molecule satisfy distance constraints sometimes
denoted rigid geometry hypothesis valid conformations molecule kinematic
sense constraints induced rigid geometry hypothesis particularly strong
molecule topology forms loops cycloalkanes finding
valid conformations molecule formulated distance geometry blumenthal
distances points atoms fixed known
one must set values unknown variable distances compatible
embedding points r unknown distances found solving set


firuiz de angulo torras

constraints consisting equalities inequalities determinants formed subsets
fixed variable distances blumenthal













figure cycloheptane disks represent carbon atoms constant variable distances
atoms represented continuous dashed lines respectively

figure three dimensional projection cycloheptane solutions lightest yellow
boxes solutions found inside representatives ccs line
colored boxes solutions obtained applying
symmetries yellow boxes line

figure displays known unknown distances cycloheptane molecule basically composed ring seven carbon atoms distance two consecutive atoms
ring constant equal everywhere distance two atoms connected


fiexploiting single cycle symmetries

atom known constant matter atoms underconstrained infinite number solutions dimensionality several
symmetries use one
length cycle symmetry n ifdp
number boxes processed raw ccs without symmetry handling
csym total number giving ratio ifdp
solved minutes csym compares favorably minutes
spent porta et al alone reduction factor
slightly greater ifdp means although number representatives begins
relevant sr factor section determining factor
section since small time overhead introduced handling box symmetries
included reported time figure shows projection
solutions obtained csym solutions found inside five representative boxes
period seven containing solution boxes respectively chosen level
resolution total number solutions boxes therefore
cyclic n roots
following polynomial equation system n instance called cyclic
n roots described bjorck froberg

x x x x x
x x x x x x x x x x
x x x x x x x x x x x x x x x
x x x x x x x x x x x x x x x x x x x x



x x x x x

ten real solutions system single cycle symmetry
x x x x x x x well multiple cycle symmetry considered
thus cycle length n sr ifdp running
ccs alone initial box number processed boxes
exploiting aforementioned symmetry csym number reduces
last case two solutions found representative box period
symmetry led ten solutions running times seconds ccs alone
seconds csym giving gain eight double ifdp
highlights benefits factor section bring efficacy
number representatives small compared number boxes
processed ccs alone making factor section irrelevant case
table contains n n cyclic n roots n
domain except n domain n n
continuum solutions chosen resolution produces solution
boxes respectively number processed boxes n smaller
n logically smaller n n two observations


firuiz de angulo torras

ifdp
number processed boxes ccs alone
number processed boxes csym
rate processed boxes
time ccs alone
time csym
time gain csym

n

n

n

n

































n
reduced domain








table n cyclic roots times given seconds

made first time gains higher corresponding ifdps implying
preponderance factor section factor second time gain follows rather
accurately rate number processed boxes ccs alone
csym
tests cyclic n roots classical ccsp solver realpaver granvilliers benhamou carried jermann preliminary difficult expose concisely since great variability depending issues
pruning method used realpaver offers several options
coded factorized every case however observed time gains greater
expected ifdp

analysis srn counting number classes
let us define quantities interest
nn number elements srn
fp n number elements srn correspond full period boxes e boxes period
n
nnm number elements srn
fp nm number elements srn correspond full period boxes
polyas theorem polya read could used determine quantities given n building possibly huge polynomial elucidating
coefficients present simpler way calculating time make
reader familiar concepts used generate srn
begin looking expression fp n number allowed
total number binary numbers n periods exist binary
numbers divisors n thus following equation holds
x

p fp p n

pdiv n

segregating p n




fiexploiting single cycle symmetries

x

n fp n

p fp p n



p
fp p
n



pdiv n p n

solving fp n
fp n

n

n

x
pdiv n p n

recurrence simple baseline condition fp
nn follows easily
nn

x

fp p



pdiv n

segregating p n efficient formula obtained
nn

n

n

x
pdiv n p n

np
fp p
n



formula valid n remaining case n

n
use similar techniques obtain fp nm nnm
binary numbers
n binary numbers circular shifts others
number shifted versions binary number period
box represented binary number example period
another shifted version binary number representing box period p
n
seen concatenation n p numbers length n p
p period p means

concatenated numbers full period n p
thus number
binary numbers period p shifted numbers counted e number
n
common divisors n denote
classes period p fp n p
n p
div n periods since p shifted versions binary number
period p write

x
n
n

p fp n p


n p

pdiv n

change variable f n p get
x
f div n

n
fp nf mf
f


n





note index summation goes values
segregate case f summand

x
n
n
n fp nm
fp nf mf


f

f div n f

finally obtain


firuiz de angulo torras

fp nm

n




n

fp nf mf

x



f

f div n f





recurrence relation fp nm computed following
baseline conditions





fp nn fp n

n
n



nnm obtained adding number classes period
nnm

x

fp nf mf



f div n

segregating f efficient formula obtained
nnm


n



x

n
fp nf mf
f



p fp p mp





f div n f

carrying change variable p n f
nnm


n



x

n

pdiv n p n

note change summation range equation valid whenever
n otherwise nnm
possible extend concept fp n fp nm reflect number members
p

srn period p denote nnp nnm
nnp

p
nnm




fp p

p
div n
otherwise




fp p mp
n

p
div n
otherwise





figure displays number classes nn function n curve indicates
exponential behavior confirmed figure b larger logarithmic
scale curve appears almost perfectly linear figure example
distribution classes period n figure shows percentage full period
classes srn nnn nn one see percentage classes period different
n significant low n approaches quickly n grows finally figures
b display distribution classes srn number n
n respectively majority classes concentrates interval middle
graphic around n interval becomes relatively smaller n grows


finumber classes symmetric boxes






















x
x
x
x
x
x
x
x
x
x
x






box dimensionality e number variables











b

figure number elements srn function n

















box dimensionality e number variables



number classes symmetric boxes

number classes symmetric boxes

exploiting single cycle symmetries

















box period

figure number elements sr distributed period





firuiz de angulo torras

generating srn classes symmetric boxes
naive procedure obtain srn would initially generate boxes originated bisecting
n dimensional cube point dimensions time one
check boxes set detect whether circular shift
others complete process generating srn way involves huge number
operations even rather small dimensions although srn ns could precomputed stored database suggest capable calculating
srn fly without significant computational overhead

percentage full period classes
































box dimensionality e number variables

figure percentage full period elements srn function n

number classes symmetric boxes

number classes symmetric boxes

made counting distinguish different subsets srn basis number
period
srnm subset elements srn
srpnm subset elements srn period p
srpn subset elements srn period p
global point view generation srn carried follows first
srn generated constituted unique member afterwards srnm
























x
x
x
x
x















number code

number code



b

figure number elements srn distributed number n b n



fiexploiting single cycle symmetries

n generated generation srnm divided srpnm
p div n compose classgen described generates
full period representatives given number variables n number ones
e generates srnnm representatives lower period p div n
obtained concatenating one block n p f times therefore order obtain
srpnm generate srpp concatenate elements
f

f times thus without loss generality follows describe workings
classgen computes codes full period namely n
use compact coding binary numbers representing boxes consisting
ordered lists chains numbers first number code number
appearing first binary number th number code
number th th binary number example
number codified length numerical codification
number codified binary number denoted
binary numbers cannot codified way last digit
except zeros case element class
codified correctly example element class objective
representative class rather advantage half
boxes already eliminated beginning zeros box srn common
every n generated separately already mentioned
codification allows determine box full period way
binary representation box period n iff number circular shifts lower
length numerical chain never equal original instance
example full period corresponding difference
representation shifts must compared
code box seen number base n full period box
circular shifts code different numbers arranged strictly increasing
numerical order take representative box class largest element
class expressed code smallest expressed binary number
example class two elements represented coding
latter chosen representative class
note box belonging srnm n equivalently sum
components code n
output codes length whose sum components
n representatives class full period codes length
whose components sum desired number rather easy generate systematically
representativeness full period conditions difficult guarantee efficiently
handle exploiting properties codes stated make
use definition compability
say code compatible compatible position sub chain
beginning position ending last position thus length
strictly smaller numerical terms sub chain length beginning
first position example compatible positions
compatible


firuiz de angulo torras

property code class representative full period iff compatible

thus instead comparing chains length e code shifted versions
determine code validity comparing shorter sub chains second property helps
us devise still faster simpler
property code compatible sub chain position l equal
sub chain position l code compatible positions
l

codevalidity
input code length expressed array
output boolean value indicating whether code valid e whether
full period class representative












ctrol
v alidcode true
v alidcode
ctrol v alidcode f alse
else ctrol ctrol
else ctrol ctrol
ii

ctrol

ctrol v alidcode f alse
return validcode

property interesting permits checking validity code
travelling along shown trick decision
compatibility delayed position following numbers
beginning string finally resolves positively compatibility
intermediate numbers guaranteed hence compatibility resolved
simple comparison requires l comparisons latter case compatibility
l positions resolved outcome positive compatibility intermediate
positions doesnt matter outcome negative thus code labelled
non valid without checks ctrol variable charge maintaining last index
head sub chain compared current compatibility check
examining compatibility current position value lower
ctrol position code sure compatible therefore must worry
compatibility back warding ctrol first position value ctrol
position equal current position compatibility position still
ascertained continue advancing current ctrol positions equality
disappears words condition must fulfilled non rejecting
invalid code position


fiexploiting single cycle symmetries

classgen
input sum numbers remain written right
position pos sum
index next position written pos
index current control element whose value cannot surpassed

next position ctrol
length code
array class codes generated
output set codes representing classes sr



















sr emptyset
pos
sum ctrol
sum
sr

otherwise sr remain emptyset

else
pos
lowerlimit dsum
u pperlimit sum
else
lowerlimit
u pperlimit minimum ctrol sum
u pperlimit lowerlimit
pos
ctrol sand pos
ctrol u pperlimit
sr sr classgen sum pos ctrol
else
ctrol pos

sr sr classgen sum pos




return sr

ctrol



condition transformed ctrol resolve last
pending compatibility checks aside note codes general
raw binary numbers representativeness full periodness defined
way therefore three properties codevalidity apply
raw binary numbers
rather direct way generate srnnm would generate codes length
whose sum components n number zeros expressed binary
number filter codevalidity instead taken


firuiz de angulo torras

efficient generating codes satisfy conditions need
checked explicitly codevalidity therefore presented clarity
purposes used
main procedure obtain full period representatives e srnnm
recursive program presented classgen n
array length must called obtain srnnm given n
call procedure writes single component code position indicated
parameter pos beginning pos subsequently incremented
recursive call recursion finishes rightmost end code pos
first parameter sum sum components code remain written
range values written position pos limited lowerlimit u pperlimit
except last position following correctness
verifying limits chosen satisfy two requirements code
sum numbers code completed must nm first
recall initial call done parameter sum n
position pos number written must greater
equal sum numbers still written quantity represented sum
subsequent positions possible write positive integers least
zeros condition imposed u pperlimit line pos line
juxtaposed code validity conditions pos number written
pos substracted sum parameter next recursive call finally
pos possibility satisfy sum condition assign value
sum last element code
code validity conditions codevalidity number
written position pos must smaller equal ctrol pos
strictly lower ctrol pos conditions reflected
u pperlimit assignments made lines respectively lowerlimit usually
pos line set smallest possible element codes
beginning code pos line tight value chosen since
value lower upper rounded value dsum way distribute
remains sum among positions code without putting value
greater initial one would make code non representative
maintenance ctrol variable similar within codevalidity
write pos something strictly minor ctrol ctrol back warded
first position otherwise ctrol incremented next recursive call write
pos
output list valid codes decreasing numerical order
instance output obtained requesting sr classgen
example case recursion
arrives pos without returning valid code frustrated code whose last
number written code full period
figure displays quantitative reflect efficiency classgen
dashed line accounts complete times required generate class representatives


fiexploiting single cycle symmetries

total time
millions representatives per second














total time seconds

number representatives millions second























dimensionality number variables

figure total time dashed line generate srn rates generation continuous
line class representatives function n

srn n n worth noting sr requires second
entirely generated continuous line encodes division srn time required
generate srn measured millions class representatives generated second
evident efficiency classgen high even grows slightly
n behavior shows dead ends recursion statistically insignificant
proves tightness bounds used enforce values code numbers

conclusions
approached exploiting symmetries continuous constraint satisfaction continuous constraint solvers general make
use box oriented ccs black box procedure particular symmetries
tackled single cycle permutations variables
suggested strategy bisect domain n cube initial box simultaneously
dimensions point forms set boxes grouped box
symmetry classes representative class selected processed ccs
symmetries representative applied resulting solutions
way solutions within whole initial domain found processed fraction set representatives ccs time savings
obtained processing representative applying symmetries solutions tend
proportional number symmetric boxes representative therefore symmetry exploitation complete full period representatives since maximum
number symmetric boxes another factor improves efficiency could


firuiz de angulo torras

expected considerations smaller average size boxes processed
ccs
studied automatic generation classes resulting bisecting
n cube analyzed numerical properties generating classes
powerful eliminating convenience pre calculated table numerical
analysis classes revealed average number symmetries class representatives tends quickly n number variables n grows good news
since n maximum number symmetries attainable single cycle symmetries
n variables leading time reductions factor close n nevertheless small n
still significant fraction representatives maximum number
symmetries another weakness proposed strategy exponential growth
number classes function n
small large n tackled refined subdivision
initial domain box symmetry classes left near future work
currently approaching extension work deal permutations
variables composed several cycles another complementary line
addition constraints search ccs constraints specific
symmetry class finally extension branch bound nonlinear
optimization could envisaged

acknowledgments
extended version work presented cp ruiz de angulo torras
authors acknowledge support generalitat de catalunya consolidated
robotics group spanish ministry science education project dpi comunitat de treball dels pirineus project itt

references
benhamou f goualard f universally quantified interval constraints
springer verlag ed cp proceedings th international conference
principles practice constraint programming pp
bjorck g froberg r faster way count solutions inhomogeneous
systems algebraic equations applications cyclic n roots j symb comput

blumenthal l theory aplications distance geometry oxford university
press
cohen jeavons p jefferson c petrie k e smith b symmetry
definitions constraint satisfaction constraints
flener p frisch hnich b kiziltan z miguel breaking row column
symmetries matrix cp proceedings th international conference principles practice constraint programming pp springer


fiexploiting single cycle symmetries

gent p groups constraints symmetry breaking search
proceedings cp lncs pp springer
granvilliers l benhamou f realpaver interval solver constraint
satisfaction techniques acm trans mathematical software
hentenryck p v mcallester kapur solving polynomial systems
branch prune siam journal numerical analysis
jermann c trombettoni g inter block backtracking exploiting structure continuous csps nd international workshop global constrained
optimization constraint satisfaction pp springer
jermann c personal communication
meseguer p torras c exploiting symmetries within constraint satisfaction
search artif intell
polya g read r combinatorial enumeration groups graphs chemical
compounds springer verlag
porta j ros l thomas f corcho f canto j perez j complete
maps molecular loop conformational spaces journal computational chemistry

porta j ros l thomas f torras c branch prune solver
distance constraints ieee trans robotics
puget j f symmetry breaking revisited constraints
ruiz de angulo v torras c exploiting single cycle symmetries branchand prune cp proceedings th international conference
principles practice constraint programming pp
sam haroud faltings b consistency techniques continuous constraints
constraints
sherbrooke e c p n computation solution nonlinear polynomial
systems computer aided geometric design
vu x h silaghi sam haroud faltings b branch prune search
strategies numerical constraint solving tech rep lia report swiss federal
institute technology epfl




