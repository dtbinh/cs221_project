Journal Artificial Intelligence Research 1 (1994) 309-314

Submitted 1/94; published 6/94

Research Note

Applying GSAT Non-Clausal Formulas

Roberto Sebastiani

Mechanized Reasoning Group, DIST, viale Causa 13, 16145 Genova, Italy.
Mechanized Reasoning Group, IRST, loc. Pante, 38050 Povo, Trento, Italy.

rseba@dist.unige.it

Abstract

paper describe modify GSAT applied non-clausal
formulas. idea use particular \score" function gives number clauses
CNF conversion formula false given truth assignment.
value computed linear time, without constructing CNF conversion itself.
proposed methodology applies variants GSAT proposed far.

1. Introduction

GSAT (Selman, Levesque, & Mitchell, 1992; Selman & Kautz, 1993) incomplete
model-finding algorithm clausal propositional formulas performs randomized
local search. GSAT shown solve many \hard" problems much eciently
traditional algorithms like, e.g., DP (Davis & Putnam, 1960). Since GSAT
applies clausal formulas, using find models ordinary propositional formulas
requires previous clausal-form conversion. requires extra computation (which
extremely heavy \standard" clausal conversion used). Much worse, clausal-form
conversion causes either large increase size input formula enlargement
search space.
paper describe modify GSAT applied non-clausal
formulas directly , i.e., previous clausal form conversion. extended version
paper (Sebastiani, 1994) provides proofs theorems detailed description
algorithm introduced.
achievement could enlarge GSAT's application domain. Selman et al. (1992) suggest traditional AI problems formulated model-finding tasks; e.g., visual
interpretation (Reiter & Mackworth, 1989), planning (Kautz & Selman, 1992), generation
\vivid" knowledge representation (Levesque, 1986). often case non-clausal
representations compact problems. instance, rule form
\Vi " gives rise several distinct clauses disjuncts conjunct. automated theorem proving (a.t.p.) applications model-finding
proposed (see, e.g., (Artosi & Governatori, 1994; Klingerbeck, 1994)). instance,
decision procedures decidable subclasses first-order logic iteratively perform nonclausal model-finding propositional instances input formulas (Jeroslow, 1988).
generally, model-guided techniques proof search, goal deletion (Ballantyne & Bledsoe, 1982), false preference , semantic resolution (Slaney, 1993), seem
applicable non-clausal a.t.p. well.
c 1994 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiSebastiani

procedure GSAT()
j := 1 Max-tries

:= initial()
k := 1 Max- ips

j=
return
else Poss- ips := hill-climb(; )
V := pick(Poss- ips)
:= ip(V,T)
UpdateScores(; V )

end
end
return \no satisfying assignment found".
Figure 1: general schema GSAT.

2. GSAT

clausal propositional formula truth assignment variables
, number clauses falsified called score
(score(T; )). satisfies iff score(T; ) = 0. notion score plays key role
GSAT, considered \distance" truth assignment satisfying one.
schema Figure 2 describes GSAT well many possible variants. use
notation (Gent & Walsh, 1993). GSAT performs iterative search satisfying
truth assignment , starting random assignment provided initial() .
step, successive assignment obtained ipping (inverting) truth value one
single variable V . V chosen minimize score. Let Ti assignment obtained
ipping i-th variable Vi . hill-climb() returns set Poss- ips variables
Vr minimize score(Tr ; ). current values si = score(Ti; ) , score(T; )
stored every variable Vi , hill-climb() simply returns set variables Vr
best sr . pick() chooses randomly one variables. ip() returns V 's
value ipped. ipping, UpdateScores() updates values si , i.
paper exploits observation functions initial() , hill-climb() , pick()
ip() depend structure input formula , computation
scores step input formula required clausal form.
idea thus find suitable notion score non-clausal formulas, ecient
algorithm computing it.

3. extended notion score

Let cnf(') result converting propositional formula ' clausal form
standard method (i.e., applying rules De Morgan). following definition
extends notion score propositional formulas.

Definition 3.1 score truth assignment propositional formula '
number clauses cnf(') falsified .
310

fiApplying GSAT Non-Clausal Formulas

mPP
PP
PP
PP [2,-]
[1,-]
P

[14,-]







" b
"

[7,-]

......
... ....

... ...
......
..

.....
.... ....

.......
.... ....

# @


b
................. "
#
b [2,-]


@
[2,-] #
... .. [4,-]"".....
b
#
@[1,-]


.
... -C
... .
-E B ,

... [1,-]
J [0,-] [1,-] [0,-]


[1,-]

E
... ..
,
J


SS [2,-] ...

E
[1,-]
[2,0]
[2,-]
,
... [2,-]


J
AA

...

[1,-]
[0,1]
...
..
.
-F
-B
... -D
B
B
[1,-] C ...

[1,-]
[1,-]
.
...

B
B






C .
B
C ...
...






B

.
... -A -B C -E -F ... -D -E C F -A -F -B E -C F
[0,-] [1,-] [0,-] [1,-] [0,-]
...[1,-]
. . . . . .[1,-]
. . . . .[0,-]
. . . . . .[1,-]
. . . . . .[1,-]
. . . . . ... [1 , 0][0,1][1 , 0] [0,1] [0,1] [0,-] [1,-] [1,-]





... ...
........





.
......
... ....









.... ...
.......



...
......
... ...

.......
... ...

.
......
... ....

.......
.... ...



... ..
......
..



........
... ...

.
......
... ....

Figure 2: computation tree s(T; ').
cnf() represents \natural" clausal form conversion. cnf(') number
propositional variables ' logically equivalent '. problem cnf()
exponential size growth cnf(') , is, jcnf (')j = O(2j'j). Definition 3.1 overcomes
problem, possible introduce linear-time computable function s(T; ')
gives score formula '. done directly, i.e., without converting '
clausal form. define s(T; ') recursively follows: 1
'
s((T; ')
s(,(T; ')
0 j= '
1 j= '
' literal
1 otherwise
0 otherwise
:V'1
sP, (T; '1)
sQ(T; '1)
, 'k )
'

(
T;
'
)
Wk 'k
Q k s(T; ' k)
Pk ss,((T;
T; 'k)
k
k k
k
k
'1 '2 s, (T; '1) s(T; '2)
s(T; '1) + s, (T; '2)
,
'2)+ (s(T; '1) + s, (T; '2))
'1 '2 ss((T;T;''1))ss,(T;
(T; ' )
(s, (T; ' ) + s(T; ' ))
1

2

1

2

s, (T; 'k) s(T; :'k ). distinction s(T; 'k ) s, (T; 'k) due polarity
current subformula 'k . computation s(T; '), call function
s(T; 'j ) [s, (T; 'j )] invoked iff 'j positive [negative] subformula '.
Example 3.1 Figure 2 represents computation tree score truth assignment
formula ' :
(D

(((

^:

^:

B C ) ( E F )) C (( E ) (C F )))
E B ) (((D A) ( F B ) F ) ((E C F ) B )):
^

:

^

_

_:

^:

_

:

_

^:

:

^

^:

^:

^

_:

:

^

^

^:

^



^:

^

^

_

_:

assigns \true" variables '. information square brackets associated
subformula 'j represents [s(T; 'j ); s, (T; 'j )]. instance, consider small
subtree left Figure 2, score computed following way:
1. Notice definition s(T; ') easily extended formulas involving connectives (e.g.,
nand , , xor , if-then-else , : : : ) complicate boolean functions.

311

fiSebastiani

s(T; ( B C ) ( E F ) ) =
s(T; B C ) s(T; D) s(T; E F ) =
(s(T; A) + s(T; B ) + s(T; C )) s(T; D) (s(T; E ) + s(T; F )) =
(1 + 1 + 0) 1 (1 + 1) = 4:
:

:

^:

^:

^

^

:



:



_:

_

:

:

^:



:



^:

:



:

:

W

Q

; s(T; Vk 'k ) = Pk s(T; 'k )
; s(T; k 'k ) = k s(T; 'k )
; literals



2

Notice cnf (') 360 clauses long.

Theorem 3.1 Let ' propositional formula truth assignment variables
'. function s(T; ') gives score '.

proof follows consideration that, truth assignment , set
false clauses cnf('1 _ '2) cross product two sets false clauses
cnf('1) cnf('2) .
Theorem 3.2 Let ' propositional formula truth assignment variables
'. number operations required calculating s(T; ') grows linearly
size '.
proof follows fact that, Time(s ('i; )) number operations required
computing s(T; 'i) s, (T; 'i), Time(s ('i; )) ai j'ij + bi ,
Time(s ('1 '2; )) maxi (ai) j'1 '2j + 2 maxi (bi) + 6, 2 f^; _; ; g.
number operations required computing score assignment
clausal formula O(jj). = cnf ('), jj = O(2j'j). Thus standard
computation score requires O(2j'j) operations, s(T; ') performs
result directly linear time.

4. GSAT non-clausal formulas

follows Sections 2, 3 extend GSAT non-clausal formulas ' simply
using extended notion score Definition 3.1. Let NC-GSAT (non-clausal GSAT)
new version GSAT scores computed implementation
function s() . follows Theorem 3.1 NC-GSAT(') function hillclimb() always returns sets variables GSAT(cnf(')), NC-GSAT(')
performs ips returns result GSAT(cnf(')). Theorem 3.2 ensures
every score computation performed linear time.
current implementation GSAT (Selman & Kautz, 1993) provides highlyoptimized implementation Updatescores(; V ) , analyzes clauses
last- ipped variable V occurs in. allows strong reduction computational cost.
(Sebastiani, 1994) describe detail analogous optimized version updating
procedure NC-GSAT, called NC-Updatescores('; V ) , prove following properties:
(i) ' clausal form, i.e., ' = cnf ('), NC-UpdateScores('; V )
complexity UpdateScores('; V ) ;
(ii) = cnf ('), NC-UpdateScores('; V ) O(j'j). UpdateScores(; V ) O(2j'j).
latter mirrors complexity issues presented Section 3.
312

fiApplying GSAT Non-Clausal Formulas

idea introduced paper applied variants GSAT. \CSAT"
(Cautious SAT) hill-climb() returns variables cause decrease score;
\DSAT" (Deterministic SAT) function pick() performs deterministic choice;
\RSAT" (Random walk SAT) variable picked randomly among variables;
\MSAT" (Memory SAT) pick() remembers last ipped variable avoids picking it.
variants, proposed (Gent & Walsh, 1992, 1993), transposed NCGSAT well, independent structure input formula. Selman
Kautz (1993) suggest variants improve performance overcome
problems, escaping local minima. strategy \Averaging " suggests
different implementation function initial() : instead random assignment, initial()
returns bitwise average best assignments two latest cycles. independent
form input formula. strategy \random walk " sequence hill-climb()
- pick() substituted probability p simpler choice function: \choose randomly
variable occurring unsatisfied clause". idea transposed NC-GSAT
well: \choose randomly branch passing nodes whose score different
zero, pick variable leaf".
One final observation worth making. order overcome exponential growth
CNF formulas, algorithms proposed (Plaisted & Greenbaum, 1986; de la
Tour, 1990) convert propositional formulas ' polynomial-size clausal formulas .
methods based introduction new variables, representing subformula
original input '. Unfortunately, issue size-polynomiality valid \"
occurs ', number clauses grows exponentially number \"
'. Even worse, introduction k new variables enlarges search space 2k factor
reduces strongly solution ratio. fact, model model ',
model ' know one 2k extensions model (Plaisted &
Greenbaum, 1986).

Acknowledgements
Fausto Giunchiglia Enrico Giunchiglia given substantial continuous feedback
whole development paper. Toby Walsh provided important feedback
previous version paper. Aaron Noble, Paolo Pecchiari, Luciano Serafini
helped final revision. Bart Selman Henry Kautz thanked assistance
GSAT code.

References

Artosi, A., & Governatori, G. (1994). Labelled Model Modal Logic. Proc. CADE12
Workshop Automated Model Building.

Ballantyne, M., & Bledsoe, W. (1982). Generating Using Examples Proof Discovery. Michie, D. (Ed.), Machines intelligence, Vol. 10, pp. 3{39. Halsted Press.
Davis, M., & Putnam, H. (1960). computing procedure quantification theory. Journal
ACM, 7, 201{215.
313

fiSebastiani

de la Tour, T. B. (1990). Minimizing Number Clauses Renaming. Proc.
10th Conference Automated Deduction, pp. 558{572. Springer-Verlag.
Gent, I. P., & Walsh, T. (1992). Enigma SAT Hill-climbing Procedures. Tech. rep.
605, University Edinburgh, Dept. Artificial Intelligence.
Gent, I. P., & Walsh, T. (1993). Towards Understanding Hill-climbing Procedures
SAT. Proc. 11th National Conference Artificial Intelligence, pp. 28{33.
Jeroslow, R. (1988). Computation-Oriented Reduction Predicate Propositional Logic.
Decision Support System, 4, 183{197.
Kautz, H., & Selman, B. (1992). Planning Satisfiability. Proc. 10th European Conference Artificial Intelligence, pp. 359{363.
Klingerbeck, S. (1994). Generating Finite Counter Examples Semantic Tableaux
Interpretation Revision. Proc. CADE12 Workshop Automated Model Building.

Levesque, H. (1986). Making believers computers. Artificial Intelligence., 30, 81{108.
Plaisted, D., & Greenbaum, S. (1986). Structure-preserving Clause Form Translation.
Journal Symbolic Computation, 2, 293{304.
Reiter, R., & Mackworth, A. (1989). logical framework depiction image interpretation. Artificial Intelligence., 41 (2), 125{155.
Sebastiani, R. (1994). Applying GSAT Non-Clausal Formulas. Tech. rep. 94-0018,
DIST, University Genova, Italy. Available via anonimous ftp mrg.dist.unige.it,
/pub/mrg-ftp/.
Selman, B., & Kautz, H. (1993). Domain-Independent Extension GSAT: Solving Large
Structured Satisfiability Problems. Proc. 13th International Joint Conference
Artificial Intelligence, pp. 290{295.
Selman, B., Levesque, H., & Mitchell, D. (1992). New Method Solving Hard Satisfiability Problems. Proc. 10th National Conference Artificial Intelligence,
pp. 440{446.
Slaney, J. (1993). SCOTT: Model-Guided Theorem Prover. Proc. 13th International Joint Conference Artificial Intelligence, pp. 109{114. Morgan Kaufmann.

314


