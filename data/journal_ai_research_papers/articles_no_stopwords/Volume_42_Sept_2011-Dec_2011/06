journal artificial intelligence

submitted published

interpolable formulas equilibrium logic
answer set programming
dov gabbay

dov gabbay kcl ac uk

bar ilan university israel kings college london
university luxembourg

david pearce

david pearce upm es

ai dept universidad politecnica de madrid spain

agustn valverde

valverde ctima uma es

dept applied mathematics universidad de malaga spain

abstract
interpolation important property classical many non classical logics
shown interesting applications computer science ai study
interpolation property non monotonic system equilibrium logic establishing weaker stronger forms interpolation depending precise interpretation
inference relation yield form interpolation ground logic
programs answer sets semantics disjunctive logic programs study
property uniform interpolation closely related concept variable forgetting first order version equilibrium logic analogous interpolation properties
whenever collection equilibrium first order definable since
case called safe programs theories applies usual situations arise
practical answer set programming

introduction
interpolation property important much discussed topic logical systems
classical non classical gabbay maksimova importance computer
science becoming recognised nowadays interpolation property applied
areas computer science example software specification diaconescu
goguen stefaneas bicarregui dimitrakos gabbay maibaum
construction formal ontologies kontchakov wolter zakharyaschev
model checking related subareas mcmillan first two areas interpolation
important metatheoretical property particular may provide basis modular composition decomposition theories instance kontchakov et al
plays key role study modular decomposition ontologies
cases interpolants play role special formulas applied automated deduction mcmillan
date interpolation received much less attention systems non monotonic
reasoning logic programming despite importance ai computer science
note study interpolation property system nonmonotonic reasoning
known equilibrium logic pearce since turn regarded logical
foundation stable model reasoning answer set programming asp
transfer immediately sphere asp shall focus mainly interpolation
c

ai access foundation rights reserved

figabbay pearce valverde

metatheoretical property primary interest establishing property certain
cases interest although section consider case interpolant actually
uniform interpolant explicitly constructed mainly concerned pure
existence theorems discussion complexity issues well possible applications
interpolation property asp left future work however seems likely
case studies involving formal ontologies konev walther wolter interpolation
may useful property applications asp knowledge representation previous
pearce valverde interpolation beth properties underlying
monotonic logic asp used characterise strong kinds intertheory relations
capture weaker kinds intertheory relations may important able rely
interpolation holding extended non monotonic logic plan explore avenue
future
introduce property interpolation let us start notation terminology let us assume syntax first order logic formulas denoted lower case
greek letters predicates lower case latin letters
let monotonic inference relation suppose interpolant
formula




contains predicate constant symbols belong logic l
inference relation l said interpolation property interpolant exists
every pair formulas l well known classical logic well
many non classical logics possess interpolation
suppose deal non monotonic logical system inference relation
express idea formula interpolant generally suffice simply
replace one since non monotonic general
transitive instead following idea gabbay maksimova modify
condition proceed two stage fashion make use fact nonmonotonic consequence defined terms minimal monotonic
logical system say consequence relation appropriately captured means
minimal logic l consequence relation l suppose
interpolant look formula
l



predicate constant symbols occur since
defined via subclass minimal l already assume l moreover
assume l well behaved sublogic sense l equivalent
formulas consequences l consequences consequences
consequences e g derive non monotonic
reasoning last two properties known left right absorption respectively
given conditions follows formula language
l equivalent interpolant likewise interpolant
l interpolant
interpolant satisfying prove one exists
proceed follows look l formula say precisely l defines


fiinterpolable formulas equilibrium logic answer set programming

minimal since follows l l interpolation
property defined earlier apply theorem obtain infer existence
l interpolant sense hence follows
notice two stage procedure relies three key features identify
suitable monotonic sublogic l ii formulas minimal l definable
iii l interpolation property conditions prima facie independent shall see may iii lack ii situation respect
equilibrium logic follows propositional case three conditions met
establish interpolation property general case situation quantified
equilibrium logic complicated general case lack condition ii
precisely appropriate monotonic sublogic l logic interpolation
property equilibrium formula need first order definable l
procedure outlined yield interpolants cases however recent generalised concept first order stable model imply interesting
classes interpolable formulas shall consider detail one class safe
formulas particular safe formula exists interpolant
holds classes interpolable formulas called tight formulas
formulas possessing finite complete set called loops
safety tightness loop formulas studied length answer set programming asp implications asp summarised follows
case finite ground programs interpolation property holds first order
non ground case interpolation holds finite safe programs without function symbols
hence practically finite programs currently admitted answer set solvers moreover
since safety defined arbitrary formulas function free language class
safe formulas sense goes beyond class expressions normally admitted asp
even auxiliary concepts weight constraints aggregates included

logical preliminaries
work standard propositional predicate languages latter may
general case contain constant function symbols propositional languages
set v propositional variables formulas built usual way
logical constants standing respectively conjunction disjunction implication
negation propositional formula denote v set propositional
variables appearing
first order language l hc f p consists set constants c function symbols
f predicate symbols p function symbol f f predicate symbol p p
assigned arity moreover assume fixed countably infinite set variables
symbols auxiliary parentheses atoms terms
formulas constructed usual closed formulas sentences
variable bound quantifier first order formula l denotes
language associated e set constants function predicate symbols occuring

make use following notation terminology boldface x stands tuple
variables x x xn x x xn formula whose free variables


figabbay pearce valverde

x xn x x xn ti terms tn denotes vector
terms theory set sentences variable free terms atoms formulas theories
called ground
usual symbols possibly subscripts used denote logical
inference consequence relations respectively logic l said monotonic
inference relation l satisfies monotonicity property
l l
distinguish non monotonic monotonic inference relations use symbolise
former cases non monotonic logic understood terms inference
relation extends suitable monotonic logic extension well behaved
say monotonic logic forms deductive base pearce
made precise follows
definition let nonmonotonic inference relation say logic l
monotonic inference relation l deductive base iff l ii l
iii l
l denotes ordinary logical equivalence l denotes non monotonic equivalence e means non monotonic consequences
furthermore say deductive base strong satisfies additional condition
l

exists

terms nonmonotonic consequence operations ii iii correspond conditions
known left absorption right absorption respectively makinson
interpolation
turn interpolation property
definition logic l inference relation l said interpolation property
whenever
l
exists sentence interpolant
l l
predicate function constant symbols contained
e l l l case propositional logic requirement v
v v
explained introduction non monotonic logics consider two forms
interpolation one weaker one stronger stronger form makes use underlying
monotonic logic
close concept fully absorbing inferential frame used dietrich



fiinterpolable formulas equilibrium logic answer set programming

definition suppose l interpolant formula
l



l deductive base contains predicate function constant
symbols belong non monotonic logic inference relation
said interpolation property suitable deductive base logic l
l interpolant exists every pair formulas
requirement l form deductive base ensures desirable properties
interpolation met
proposition let l interpolant
l l interpolant
b l l l
interpolant
property deductive base guarantees l relation transitive
sense holds last property necessarily
hold second weaker form interpolation call interpolation
definition suppose interpolant formula




contains predicate function constant symbols belong
case propositional logic requirement v v v
analogous previous case say non monotonic logic inference relation interpolation property interpolant exists every pair
formulas notice stronger form interpolation
logic interpolation must interpolation
consequence deductive base requirement first clause
evidently properties expressed proposition directly applicable
second form interpolation refer underlying base logic nevertheless
important feature interpolation properties shall establish
formulate prove analogous properties even interpolation
consider restricted variants interpolation property holds
certain types formulas words interpolant given
whenever belong specific syntactic classes cases refer
interpolable formulas later shall consider kinds restrictions belongs
specific class alternatively
review logic
equilibrium logic nonclassical logic denote
ht propositional case quantified first order case denote logic
qht subscripts superscripts denote specific variants


figabbay pearce valverde

propositional quantified cases logic axioms rules
intuitionistic logic captured usual kripke semantics intuitionistic logic van
dalen however additional axioms ht qht mean use
simple kinds kripke structures first order case regard structures
sets atoms built arbitrary non empty domains denote f p set
atomic sentences hd f p c obtain set atomic sentence
language l hc f p denote f set ground terms hd f p
l hc f p l hc f p write l l c c f f p p
l interpretation set mean subset f p classical lstructure regarded tuple h l interpretation
c f called assignment verifies
recursively defined c f id known herbrand structure
hand l structure static domains qhts l structure
tuple h h h h h classical l structures
h
thus think structure similar first order classical
model two parts components h correspond two different points
worlds sense kripke semantics intuitionistic logic
worlds ordered h world w h one verifies set atoms w
expanded language domain call model static since contrast
say intuitionistic logic domain serves worlds since h whatever
verified h remains true satisfaction relation defined reflect
two different components write w denote true respect
w component although need define satisfaction relation l hc p
recursive definition forces us consider formulas hc f p particular
p tn c f p w p tn iff p tn w
every tn c f extended recursively follows
w iff w w
w iff w w
iff
h iff h h
w iff
x x iff
h x x iff x x h
w x x iff w
think objects additional constants allow us use simplified
notation objects distinguished names
every c every f f arity n mapping f dn defined
recursive definition given f tn f tn
following corresponds usual kripke semantics intuitionistic logic given assumptions
two worlds h single domain



fiinterpolable formulas equilibrium logic answer set programming

truth sentence model defined follows iff w
w h sentence valid true denoted sentence
consequence set sentences denoted every model model
resulting logic called quantified logic static domains lifschitz pearce valverde denoted qhts terms satisfiability validity
logic equivalent logic introduced pearce valverde
complete axiomatisation qhts obtained follows lifschitz et al
take axioms rules first order intuitionistic logic add axiom hosoi




determines element propositional case together
axiom
x x x x

consider equality predicate p interpreted following condition
every w h

w iff
obtain complete axiomatisation need add axiom decidible equality


xy x x

denote resulting logic qhts lifschitz et al inference relation
compactness strong form completeness established

context logic programs following assumptions often play role case
classical qhts say parameter names assumption pna
applies case c f surjective e unnamed individuals unique
names assumption una applies case c f injective case pna
una apply standard names assumption sna applies e c f bijection
usual first order logic satisfiability validity independent signature
h h l structure l l denote l restriction
sublanguage l
l h l h l l
proposition suppose l l theory l l model
l l model
proposition suppose l l l valid resp satisfiable
qhts l valid resp satisfiable qhts l
proposition allows us omit reference signature logic
denoted simply qhts
simplify notation symbolise qhts structure h h
hu h u universe h respectively sets atoms
h case propositional ht logic kripke structures regarded pairs
hh set atoms obvious way strongly complete axiomatisation ht
obtained intuitionistic logic adding hosoi axiom


figabbay pearce valverde

interpolation logic
important useful property ht fact strongest propositional
intermediate logic e strengthening intuitionistic logic properly contained
classical logic moreover turn properly contains intermediate logics
addition ht one precisely seven superintuitionistic propositional logics possessing
interpolation property maksimova gabbay maksimova
languages without function symbols ono showed interpolation holds
logic qhts quantified constant domains ono addition
maksimova showed adding pure equality axioms e g decidible equality axiom superintuitionistic logic preserves interpolation property gabbay
maksimova conclude therefore
proposition logic qhts possesses interpolation property
note strong completeness theorem qhts work equivalently

make observation interpolation continues hold languages include function symbols established following property
proposition every formula possible build formula
atoms one following types

x c

f x xn f f every xi variables
p tm every xi variables
theorem let l language containing function symbols qhts l
interpolation property
proof sketch let us assume previous proposition assume
without loss generality function symbols atoms type

f x xn consider language l obtained l replacing every
function symbol f fresh predicate symbol pf arity pf arity f
let formulas l build respectivelly replacing every atom

f x xn pf x xn trivially interpolation property
qhts l exists interpolant replace

predicates pf tn tn atoms f tn tn obtain interpolant
initial pair formulas
onos axiomatisation qhts uses constant domains axiom x x x x well
alternative axioms propositional viz p p q q p q q p p
q however axioms given equivalent onos



fiinterpolable formulas equilibrium logic answer set programming

equilibrium logic
equilibrium logic non monotonic logic certain kinds minimal
qhts ht give definition qhts propositional version easily
obtained
definition among quantified structures define order e follows
h h e h j j h j



j j h j h

subset relation holds strictly write
definition equilibrium model let theory h h model

said total h
said equilibrium model short say equilibrium
minimal e among total
words equilibrium total smaller non total
model evidently total qhts model theory equivalently regarded
classical first order model follows make tacit use equivalence
propositional case equilibrium defined way
ordering propositional ht usual way formula theory said
consistent qhts model additionally say coherent
equilibrium model
following definition give preliminary notion equilibrium entailment
agrees standard versions equilibrium logic pearce
definition relation called equilibrium entailment defined follows let
set formulas
non empty coherent equilibrium every equilibrium model model qhts respectively ht
empty equilibrium
notice unless need distinguish propositional first order reasoning use
symbols version
words may help explain concept equilibrium entailment first
define basic notion entailment truth every intended equilibrium model
nonmonotonic reasoning common sometimes called skeptical
cautious notion entailment inference counterpart brave reasoning defined
via truth intended model since equilibrium logic intended provide logical
foundation answer set semantics logic programs cautious variant entailment
natural one choose standard consequence relation associated answer
sets given truth answer sets program note however asp
programming paradigm answer set may correspond particular solution
modelled therefore interest right


figabbay pearce valverde

secondly useful nonmonotonic consequence entailment relation
non trivially defined consistent theories shall see however
theories possess equilibrium cases natural use monotonic consequence entailment relation particular propositional case ht maximal
logic property logically equivalent theories equilibrium
evidently situation handles correctly cases empty inconsistent
despite qualifications remains ambiguity concept equilibrium
entailment need settle suppose l l theory l
sentence l e l l understand expression
evidently fix language advance say language l simply
consider equilibrium l represents knowledge base logic
program instance may take view l appropriate signature
work case query fully interpreted contains
terms theory language l
language l theory whose language contained l let eml
collection equilibrium qhts l consider following two
variants entailment
definition equilibrium entailment assume theory l non empty
equilibrium
let us write cw eml l
ii let us write ow eml l

general eml l denotes collection expansions elements eml
l l e vocabulary l l interpreted arbitrarily
iii empty equilibrium cw iff ow iff
simple example illustrate difference cw ow let
l sentence let q x predicate l let constant l let l
language l q first method cw q q fact
stronger entailment cw q reason form equilibrium
l q false effect taking minimal
hand expand equilibrium qhts l qhts l
predicate q receives arbitrary interpretation qhts l since logic valued
obtain ow q q
standard monotonic logics difference two forms entailment definition replace everywhere equilibrium model simply model
qhts variants ii give
context logic programming deductive databases orthodox view
reasoning closed world assumption cwa accordingly ground atomic
query q predicate q belong language program
database would simply assigned value false case first kind
equilibrium entailment use label cw since variant appears closer
closed world form reasoning hand may legitimate cases
want apply cwa unknown values assigned atom
expressed theory language second form entailment ow


fiinterpolable formulas equilibrium logic answer set programming

nearer open world reasoning may appropriate present purposes however
suffices cw ow thought merely mnemonic labels
thorough analysis closed world versus open world reasoning context would
lead us consider assumptions una sna outside scope
however observed logic programming use cwa lead
certain apparent anomalies notably occurs programs unsafe see section
following formulated traditional notation logic programs
q x p x
p x x
given restrictions sna herbrand query
q z
yields answer z cannot satisfied single domain
element query
q b
satisfiable given constant b logic programming restrictions
usually assumed different solutions proposed gelder ross
schlipf kunen maher would point
equilibrium logic generally speaking kind program theory create
special difficulties neither query
q z
understood zq z query
q b
true equilibrium particular equilibrium model whose domain
singleton element even q b need true evidently general case una
instance apply hand answer set programming una often
assumed typically assumed programs safe safety condition
program excluded variables appearing head rule appear
positive body makes answer sets sensitive set constants appearing
language used grounding program
application interpolation asp concerned restrict attention safe programs
theories complying generalised form safety section

interpolation propositional equilibrium logic
section deal interpolation propositional equilibrium logic clear
semantic construction propositional equilibrium logic ht deductive base
base actually maximal
proposition ht strong maximal deductive base propositional equilibrium
entailment
first property precisely strong equivalence theorem lifschitz pearce
valverde maximality follows fact logic strictly stronger
ht would contain classical logic easily seen deductive base
e g violating condition ii definition
grateful anonymous referee raising point example



figabbay pearce valverde

lemma let coherent ht formula em set equilibrium
formula ht v defines em sense em

proof suppose coherent let
ht ht mn htn tn
enumeration equilibrium define em suppose
ti ki elements denote ai aij aiki let ti complement
ti list members aik ail ai v set



j ki

aij



ail

l ki v







n

claim mi n e
precisely mn verify claim note mi mi
conversely suppose semantics ht clear iff
particular implies n however
defines complete theory whose total follows
mi establishes claim

although shall demonstrate interpolation form relation cw actually establish stronger one consequence
concerned ow entailment form interpolation actually holds
proposition interpolation let formulas set v v v
v v v suppose b bn enumeration v cw
formula v v v b bn hence
particular cw
proof let v v statement proposition suppose cw
holds equilibrium language v case suppose
coherent form set equilibrium emv
equilibrium construction easy see model emv
atom bi false n construct formulas formula exactly
proof lemma consider formula b bn clearly formula
defines set equilibrium ht v consequently b bn
b bn apply interpolation theorem ht
infer formula b bn
v v v hence v v v since ht deductive base
conclude
b bn
since v v v bi v n follows ht v bi
false every equilibrium model model satisfies b bn
since satisfies cw
notice case adding sentence b bn change set equilibrium




fiinterpolable formulas equilibrium logic answer set programming

case ii equilibrium hypothesis
case simply choose interpolant

corollary interpolation let formulas cw v
v formula v v v cw
proof immediate proposition fact v v



proposition interpolation let formulas set v v v
v v v ow formula v v v

proof let v v statement proposition suppose ow
holds expansions elements emv language v case suppose
coherent consider emv
construct formulas formula exactly proof lemma
consider defines set emv holds expansions
v hence therefore apply interpolation
theorem ht infer formula
v v v hence v v v since ow ht deductive
base conclude
ow
case ii equilibrium choose interpolant



interpolation quantified equilibrium logic
turn first order logic given inferences form key element
proofs propositions existence formula defines collection
emv equilibrium propositional case seen existence
established first order case hand need
exist words eml need first order definable arbitrary
fact hard ferraris et al pointed general form
answer set programming first order formulas allowed fortiori quantified
equilibrium logic property transitive closure expressible yet property
definable classical first order logic therefore cannot defined qhts
usual way say collection k qhts l qhts definable
l sentence k easy see whenever
class eml first order definable qhts obtain first order analogs
propositions method proof essentially
completeness outline main steps case interpolation
proposition interpolation let formulas collection equilibrium qhts definable set l l l l l l let
pi n finite possibly empty set predicates l suppose


figabbay pearce valverde

pi arity ki cw formula l l l



xpi x
n

hence particular cw
proof assume hypotheses holds equilibrium language
l treat case coherent non empty collection equilibrium
eml assumption collection definable qhts l sentence
say consider equilibrium expanded language l e
collection eml equilibrium construction claim eml xpi x
n since working first order semantics let us rehearse
briefly argument true would model hu eml
predicate symbol pi l tuple elements domain hu
hu pi ie pi however since refer relation
pi structure hu h h pi must valso model contradicting
hu equilibrium
eml n xpi x since defines
v
eml clearly n xpi x defines eml
v
proceed propositional case n xpi x

xpi x

n

interpolation
theorem qhts formula l l l
v
n xpi x consequently

xpi x

n

token propositional case infer cw

case interpolation ow analogous state main property
without proof
proposition interpolation let formulas collection
equilibrium qhts definable ow formula
l l l

illustration interpolation safe formulas
restrictive definability assumption often met practice actually
mainstream answer set programming whose language equilibrium logic captures extends see next section non definable classes answers sets play significant role
reason query answering existing solvers rely grounders instantiate
parts program computing intended solutions grounding
process essentially eliminates variables reduces original program propositional
form practical cases collection stable equilibrium
definable


fiinterpolable formulas equilibrium logic answer set programming

computational work general syntactic restrictions need
imposed admissible programs theories common form restriction called
safety standard types logic programs rules one regards rule safe
every variable appearing rules head appears body complex
formulas admitted equilibrium logic general answer sets ferraris
et al ferraris concepts safety need devised proposals suitable
safety concepts made lee lifschitz palla b general first order formulas
bria faber leone restricted syntactic class recently
cabalar pearce valverde generalised approaches suggested
safety concept arbitrary function free formulas equilibrium logic since
concept safety defines quite broad class interpolable formulas let us review
main features following section mention kinds interpolable
formulas may arise answer set programming
general concept safety
remainder section assume languages function free usual
sentence said prenex form following shape n
q x q n xn
qi quantifier free sentence said universal
prenex form quantifiers universal universal theory set universal
sentences safety concept defined prenex formulas provide normal form
qhts pearce valverde
first introduce concept called semi safety main property semi safety formulas equilibrium refer objects language note
remainder section use fact negation treated
defined operator consider additional semantic clauses
negation
definition semi safety quantifier free formula semi safe nonsemi safe variable nss nss operator recursively defined
follows
atom nss set variables
nss nss nss
nss nss nss
nss nss r rv
operator rv computes restricted variables follows
atomic equality two variables rv otherwise
rv set variables occurring
rv


figabbay pearce valverde

rv rv rv
rv rv rv
rv
definition semi safe formulas introduced cabalar pearce valverde
generalises former definition lee lifschitz palla b short variable x semi safe every occurrence inside subformula
x rv x semi safe
examples semi safe formulas instance
p x q x r x
p x q r x



note x restricted p x q consequent r x semi safe
thus formula contrary following formulas semi safe
p x q r x
p x r x q x
following set previously referred property semi safe formulas
equilibrium include objects language
proposition cabalar et al
function free semi safe h h c
theorem cabalar et al function free semi safe h
equilibrium model c
equilibrium semi safe formulas refer objects language
however model could equilibrium depending considered domain
guarantee independence domain need additional property semisafety specifically need analyse whether unnamed elements could modify
interpretation formula use assignments kleenes threevalued logic three valued interpretation extended evaluate
arbitrary formulas follows
min
max


max

every variable x going use kleenes interpretations x defined follows
x x occurs atom x otherwise intuitively x fixes
atoms containing variable x falsity leaving rest undefined
evaluates kleenes three valued operators nothing else exploiting
defined values true false much possible
occurrence variable x qx weakly restricted occurs subformula



fiinterpolable formulas equilibrium logic answer set programming

q positive x
q negative x
q positive x
q negative x
cases say makes ocurrence weakly restricted property
added semi safety condition complete definition safety
definition semi safe sentence said safe positive occurrences
universally quantified variables negative occurrences existentially quantified
variables weakly restricted
instance formula x q x r p x safe occurrence x
p x negative whereas occurrence q x inside positive subformula
x weakly restricted since x another example safe
formula x p x q x r
proposition cabalar et al function free safe prenex formula
h equilibrium model equilibrium model
grc grounding c
interpolation
basis proposition could already establish interpolation theorems safe
formulas prenex form essentially replacing formulas ground versions
working propositional logic however apply propositions directly
noting property shown cabalar et al safe prenex formulas definable
classes equilibrium
theorem interpolation safe formulas
safe formulas prenex form
qhts definable classes equilibrium therefore formulas interpolation cw inference holds proposition interpolation holds ow
inference proposition

interpolation answer set semantics
answer set programming asp become established form declarative logic
programming basic ideas well known textbook treatment reader
referred barals book well known origins asp lie
stable model answer set semantics logic programs introduced gelfond lifschitz semantics made use fixpoint condition involving certain
reduct operator subsequent extensions concept cover general kinds rules
recall subexpression formula said positive number implications
contain subexpression antecedent even negative odd consider
defined



figabbay pearce valverde

relied reduct operator similar sort original definitions reader
referred papers cited
correspondence answer set semantics equilibrium logic wellestablished discussed many publications beginning pearce
first showed answer sets disjunctive programs regarded equilibrium
lifschitz et al ferraris et al pearce valverde
purposes suffice recall two important syntactic classes
programs main features correspondence equilibrium logic
one extreme ground disjunctive logic programs treat without
strong negation answer sets simply collections atoms programs consist
sets ground rules form
k kk l lm notlm notln



li kj atoms translation syntax programs ht
propositional formulas trivial one viz corresponds ht sentence
l lm lm ln k kk



translation correspondence answer sets equilibrium
ground disjunctive programs direct one
proposition let disjunctive logic program ht equilibrium model
answer set
first shown pearce basic equivalence later shown hold
general classes programs pearce p de guzman valverde
common treat non ground rules form variables may appear
variables thought universally quantified corresponding translation logical formula would simply universal closure formula
extreme ferraris lee lifschitz provided definition
stable model arbitrary first order formulas case property stable
model defined syntactically via second order condition resembles parallel circumscription however showed notion stable model equivalent
equilibrium model defined first order languages sequel
lee lifschitz palla applied definition made following refinements stable formula defined ferraris et al
answer sets formula herbrand formula stable
sense ferraris et al terminology follows general stable
equilibrium coincide answer sets equivalent sna qht
equilibrium
two extremes many syntactically different kinds programs
considered several variations concept answer set proposed
however main varieties display similar correspondence equilibrium logic
merely necessary cases restrict attention specific kinds equilibrium e g herbrand una sna important notice
correspondence extends many additional constructs introduced


fiinterpolable formulas equilibrium logic answer set programming

asp cardinality weight constraints even general forms aggregates lee
meng accommodated equilibrium logic translation
logical formulas
asp main emphasis finding answer sets answer
set solvers compute less attention placed implementing non monotonic inference
relation query answering mechanism however standard skeptical concept
inference entailment associated answer set semantics notion entailment
consequence programs answer set semantics query q entailed
program q true answer sets balduccini gelfond nogueira
let us denote entailment consequence relation evidently atoms true
answer set belong conjunctions disjunctions handled
obvious way lifschitz tang turner balduccini et al sometimes
queries form logical notation explicitly dealt balduccini
et al however seems keeping semantics regard formula
form true answer set true another way
express would say answer set satisfies violate
constraint understanding constraint violation lifschitz tang turner
way would say answer set contains similarly
interpretation queries containing quantifiers answer set semantics conform
equilibrium logic taking account specific restrictions herbrand
might imposed
therefore transfer interpolation properties equilibrium logic answer set
semantics asp remains consider whether best identified closed
world version inference cw open world version ow since asp
solvers generally implement inference engines difference largely theoretical one traditional logic programming however query belong
language program usually answered false seems quite natural asp
context given program query q one consider stable
language l l q even proper extension language
general cw seems natural choice answer set inference hand
contexts answer set semantics used open world setting example
setting hybrid knowledge bases rosati non monotonic rules combined
ontologies formalised description logics systems semantics terms
equilibrium logic provided de bruijn pearce polleres valverde
entailment relation style ow might sometimes appropriate
general answer set semantics defined coherent programs theories
identifying cw apply proposition directly
corollary coherent formulas interpolation form proposition
holds entailment answer set semantics
logical terms constraint would written
notice proposition program consists safe formulas atomic query q automatically
false belong language program even q simply grounding
program constants sufficient generate answer sets



figabbay pearce valverde

application interpolation
interpolation property applied areas computer science notably
software specification bicarregui et al construction formal ontologies lutz wolter areas relevant modularity issues
discuss simple application related concept described lutz wolter
adapt case nonmonotonic logic programs
one way compare two theories via nonmonotonic consequence relations
two theories produce answers given query language call inseparable term used mathematical logic study formal ontologies lutz
wolter
let us say therefore l inseparable v l

proposition let l inseparable theories v v v
say l l v l l l inseparable
proof assume l inseparable l extension l
v l l suppose v l suppose l v b bn
proposition interpolant b bn since
v l l inseparability right absorption therefore
b bn however clear b bn false equilibrium
repeating argument interchanged shows
theories l inseparable

proof similar argument given lutz wolter theorem applied tboxes description logics property described
called robustness signature extensions notice however since
general transitive cannot immediately infer
highlights added strength explicitly set b bn property
ht forms deductive basis
study modularity logical relations programs asp
common compare sets answer sets rather consequence classes however
turns notion inseparability close concept already
studied asp two theories programs said projectively equivalent
projections answer sets onto common sublanguage agree eiter tompits
woltran formally let theories l signature l
v v said projectively equivalent relative l
e l e l class k kl ml k
proposition let theories l signature l v v
projectively equivalent relative l l inseparable
words two concepts agree whenever l common sublanguage
main advantage l inseparability seems natural one use
want consider signatures extend language program theory


fiinterpolable formulas equilibrium logic answer set programming

uniform interpolation forgetting
stronger form interpolation known uniform interpolation important certain
applications computer science konev et al usual given
interested interpolants




contains predicate constant symbols belong
difference said uniform interpolant holds
signature logic said uniform interpolation property
uniform interpolants exist
classical propositional logic uniform interpolation holds however fails first
order classical logic many non classical logics may hold certain restrictions
placed theory language formulated query language
containing example shown hold description logics kontchakov
et al syntactic restrictions apply even asp turns form
uniform interpolation holds restricted query language essentially one allows
instance retrieval known asp
concept forgetting eiter wang quite closely related interpolation
variable forgetting studied eiter wang concerned following
given disjunctive logic program certain atom occurring construct
program denoted forget contain whose answer
sets respects close possible precise notion
closeness reader referred eiter wang however consequences
evident shortly eiter wang define forget generic term
programs exist whenever coherent provide different compute
programs
given coherent forget forgetting may
different answer set equivalent moreover purposes satisfy
following key property coherent b distinct atoms usual
denotes nonmonotonic consequence
b



forget b



showing indeed answer sets forget closely related
establish version uniform interpolation case disjunctive programs
simple atomic queries need forget
examine first eiter wang computing
forget simplest three presented let coherent
program rules form write formulas form let atom
method constructing forget follows
compute equilibrium e
let e removing e
remove e model non minimal form e say


figabbay pearce valverde

construct program whose answer sets precisely follows
ai set ai ai ai v ai
set
verify desired property let l simple query language composed
conjunctions literals
proposition equilibrium logic answer set programming uniform interpolation
holds coherent disjunctive programs queries l v
proof prove claim shall following let coherent disjunctive
program let l l v v v program
v v l

begin let let x v v
choose forgetting x defined eiter wang
follows
forget x forget forget forget
shown order atoms x matter know
atom v n
forget ai



forget x



therefore
let forget x determined eiter wang described
easy see semantics continues hold
replaced negated atom b therefore conjunction literals since
conjunction entailed element holds every equilibrium model remains
suffice entailment one member
sequence forget ai since order irrelevant wlog choose first element
forget forget compute programs
need check n e
e ai ai
consider e ht distinguish two cases ai
ai follows ai ai
ai ai case ii ai ai incomparable
particular cannot ai minimality property ai obtained step
hence ai choose ai hence ai
consequently ai ai ai follows
construction establishes proposition
eiter wang point atom b true answer set forget
must true answer set showing holds literals



fiinterpolable formulas equilibrium logic answer set programming

extending query language
establish uniform interpolation asp method forgetting defined
eiter wang seems clear cannot extend non trivial way
expressive power query language l since method forgetting removes
non minimal sets e removed atom b might true
equilibrium model equilibrium model forget hence might
disjunction say b derivable forget likewise
consider programs variables first order setting cannot general extend l
include existential queries
hand property uniform interpolation certainly holds l v
even without condition v v suppose v v
say v v b bk b bk false equilibrium
trivially b v regard forgetting b
repeat proof proposition setting x v v v v
relevant properties continue hold
interesting open question whether extend theory language include
general kinds program rules allowing negation head accommodating kinds formulas would constitute important generalisation since
amount normal form equilibrium logic however answer sets programs
satisfy minimality property holds answer sets disjunctive programs
clear definition forgetting would need appropriately modified
task attempt

literature related work
interpolation theorem classical logic due craig extended intutionistic logic schutte maksimova characterised super intuitionistic
propositional logics possessing interpolation modern comprehensive treatment interpolation modal intuitionistic logics found monograph gabbay
maksimova
non monotonic logics interpolation received little attention notable exception
article amir establishing interpolation properties circumscription
default logic well known relation answer sets disjunctive programs
extensions corresponding default theories derives form interpolation
asp regard answer set semantics amir quite different
since founded analysis default logic uses classical logic underlying
base amirs version interpolation form l classical logic
requirement l form well behaved sublogic e g deductive base amir
remarks one cannot deduce general property however l classical
logic one cannot even deduce generally counterpart
proposition case another difference respect
amir discuss nature relation asp detail particular
understand case contains atoms present program fact
interpret section easy refute l interpolation l
classical logic let program b q query b c clearly


figabbay pearce valverde

q formula vocabulary b would classically entail c
interpretation answer set inference atoms program
regarded false l interpolation would refuted

conclusions
discussed two kinds interpolation properties non monotonic inference relations shown properties hold turn two different inference relations
associate propositional equilibrium logic case use fact
collection equilibrium definable logic ht
logic possesses usual form interpolation one forms inference studied
seems many cases appropriate concept associate answer set programming although general asp systems tailored query answering deduction
eiter wang variable forgetting asp could
property uniform interpolation holds disjunctive programs restricted
query language
discussed interpolation property first order equilibrium logic
quantified version qht logic obtaining analogous
propositional case whenever collection equilibrium definable
positive transfer answer set programming assumption usually made
asp systems programs safe therefore definable collections answer sets
saw notion safety quite generally defined theories limited
normal disjunctive programs

acknowledgments
david pearce partially supported mec projects tin c csd agustn valverde partially supported mec project tin c
junta de andalucia projects p fqm tic authors grateful
anonymous referees helpful comments

references
amir e interpolation theorems nonmonotonic reasoning systems proceedings nmr pp
balduccini gelfond nogueira prolog tool declarative
programming proc seke
baral c knowledge representation reasoning declarative solving
cambridge university press
bicarregui j dimitrakos gabbay maibaum e interpolation
practical formal development logic journal igpl
bria faber w leone n normal form nested programs holldobler
lutz c wansing h eds proc jelia vol lncs pp
springer


fiinterpolable formulas equilibrium logic answer set programming

cabalar p pearce valverde revised concept safety general answer
set programs erdem e lin f schaub eds proc lpnmr vol
lncs pp springer
craig w linear reasoning form herbrand gentzen theorem j symb
logic
de bruijn j pearce polleres valverde quantified equilibrium logic
hybrid rules marchiori pan j z de sainte marie c eds proc
rr vol lncs pp springer
diaconescu r goguen j stefaneas p logical support modularisation
logical environments pp cambridge university press
dietrich j deductive bases nonmonononic inference operations ntz report
university leipzig
eiter tompits h woltran solution correspondences answer set
programming kaelbling l p saffiotti eds proc ijcai pp
professional book center
eiter wang k semantic forgetting answer set programming artificial
intelligence
ferraris p logic programs propositional connectives aggregates corr
abs
ferraris p lee j lifschitz v perspective stable veloso
ed proc ijcai pp
gabbay maksimova l interpolation definability modal intuitionistic logic oxford university press usa
gelder v ross k schlipf j well founded semantics general
logic programs journal acm
gelfond lifschitz v stable model semantics logic programming
kowalski r bowen k eds proc iclp pp mit
press
gelfond lifschitz v logic programs classical negation warren
david h szerdei p ed proc iclp pp mit press
gelfond lifschitz v classical negation logic programs disjunctive
databases generation computing
konev b walther wolter f forgetting uniform interpolation largescale description logic terminologies boutilier c ed proc ijcai pp

kontchakov r wolter f zakharyaschev tell difference
dl lite ontologies brewka g lang j eds principles knowledge
representation reasoning proc kr pp aaai press
kunen k negation logic programming journal logic programming



figabbay pearce valverde

lee j lifschitz v palla r reductive semantics counting choice
answer set programming fox gomes c p eds proc aaai pp
aaai press
lee j lifschitz v palla r b safe formulas general theory stable
preliminary report de la banda g pontelli e eds proc
iclp vol lncs pp springer
lee j meng reductive semantics aggregates answer set programming erdem e lin f schaub eds proc lpnmr vol
lncs pp springer
lifschitz v pearce valverde strongly equivalent logic programs acm
transactions computational logic
lifschitz v pearce valverde characterization strong equivalence
logic programs variables baral c brewka g schlipf j eds
proc lpnmr vol lncs pp springer
lifschitz v tang l r turner h nested expressions logic programs annals
mathematics artificial intelligence
lutz c wolter f deciding inseparability conservative extensions
description logic el journal symbolic computation
maher j equivalences logic programs foundations deductive databases
logic programming pp morgan kaufmann
makinson general patterns nonmonotonic reasoning pp oxford
university press inc
maksimova l interpolation superintuitionistic predicate logics equality
algebra logic
maksimova l interpolation superintuitionistic modal predicate logics
equality kracht de rijke wansing h zakharyaschev eds advances modal logic vol pp csli publications
maksimova l craigs interpolation theorem amalgamable varieties doklady
akademii nauk sssr
mcmillan k l applications craig interpolants model checking halbwachs
n zuck l eds proc tacas vol lncs pp springer
ono h model extension theorem craigs interpolation theorem intermediate
predicate logics reports mathematical logic
pearce logical characterization stable answer sets dix
j pereira l przymusinski c eds proc nmelp vol
lncs pp springer
pearce equilibrium logic annals mathematics artificial intelligence

pearce de guzman p valverde computing equilibrium
signed formulas proc cl vol lncs pp springer


fiinterpolable formulas equilibrium logic answer set programming

pearce valverde first order nonmonotonic extension constructive
logic studia logica
pearce valverde quantified equilibrium logic technical report universidad rey juan carlos http www matap uma es investigacion tr
pdf
pearce valverde quantified equilibrium logic foundations answer
set programs de la banda g pontelli e eds proc iclp vol
lncs pp springer
pearce valverde synonymous theories knowledge representations
answer set programming journal computer system sciences
rosati r semantic computational advantages safe integration ontologies rules fages f soliman eds proc ppswr vol
lncs pp springer
schutte k der interpolationsatz der intuitionistischen pradikatenlogik math
ann
van dalen logic structure th edition springer




