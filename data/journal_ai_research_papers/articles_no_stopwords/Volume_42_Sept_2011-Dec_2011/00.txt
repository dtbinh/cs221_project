Journal Artificial Intelligence Research 42 (2011) 1-29

Submitted 11/10; published 09/11

Hard Manipulation Problems?
Toby Walsh

toby.walsh@nicta.com.au

NICTA UNSW
Sydney
Australia

Abstract
Voting simple mechanism combine together preferences multiple agents. Unfortunately, agents may try manipulate result mis-reporting preferences. One barrier
might exist manipulation computational complexity. particular,
shown NP-hard compute manipulate number different voting rules. However, NP-hardness bounds worst-case complexity. Recent theoretical results suggest
manipulation may often easy practice. paper, show empirical studies
useful improving understanding issue. consider two settings represent
two types complexity results identified area: manipulation unweighted votes single agent, manipulation weighted votes coalition agents.
first case, consider Single Transferable Voting (STV), second case, consider
veto voting. STV one voting rules used practice NP-hard compute
single agent manipulate result votes unweighted. appears one
harder voting rules manipulate since involves multiple rounds. hand, veto
voting one simplest representatives voting rules NP-hard compute
coalition weighted agents manipulate result. experiments, sample number
distributions votes including uniform, correlated real world elections. many
elections experiments, easy compute manipulate result prove
manipulation impossible. Even able identify situation manipulation hard compute (e.g. votes highly correlated election hung),
found computational difficulty computing manipulations somewhat precarious (e.g.
hung elections, even single uncorrelated voter enough make manipulation
easy compute).

1. Introduction
Gibbard-Satterthwaite theorem proves that, weak assumptions three
candidates absence dictator, voting rules manipulable (Gibbard, 1973; Satterthwaite, 1975). is, may pay agents report preferences truthfully. One appealing
escape result proposed Bartholdi, Tovey Trick (1989). Whilst manipulation
may exist, perhaps computationally difficult find. illustrate idea, demonstrated second order Copeland rule NP-hard manipulate. Shortly after, Bartholdi
Orlin (1991) proved well known Single Transferable Voting (STV) rule NP-hard
manipulate. whole subfield social choice since grown proposal, studying
computational complexity manipulation control voting rules. Two good surveys
recently appeared provide many references literature (Faliszewski, Hemaspaandra, &
Hemaspaandra, 2010; Faliszewski & Procaccia, 2010). Computational complexity results
manipulation voting rules typically vary along five different dimensions.
Weighted unweighted votes: votes weighted unweighted? Although many elections involve unweighted votes, weighted votes used number real-world settings
shareholder meetings, elected assemblies. Weights useful multi-agent systems
different types agents. Weights interesting computational perspective least two reasons. First, weights increase computational complexity.
c
2011
AI Access Foundation. rights reserved.

fiWalsh

example, computing manipulate veto rule polynomial unweighted votes
NP-hard weighted votes (Conitzer, Sandholm, & Lang, 2007). Second, weighted case
informs us unweighted case probabilistic information votes.
instance, NP-hard compute election manipulated weighted
votes, NP-hard compute probability candidate winning
uncertainty unweighted votes cast (Conitzer & Sandholm, 2002a).
Bounded unbounded number candidates: (small) fixed number candidates? number candidates allowed grow? example, unweighted votes,
computing manipulation STV rule polynomial bound number candidates NP-hard number candidates allowed grow problem size
(Bartholdi & Orlin, 1991). Indeed, unweighted votes bounded number candidates, polynomial compute manipulate voting rules (Conitzer et al., 2007).
hand, weighted votes, NP-hard compute manipulate many
voting rules bounded number candidates. example, NP-hard compute
manipulation veto rule 3 candidates (Conitzer et al., 2007).
One manipulator coalition manipulators: single agent trying manipulate
results coalition agents acting together? single agent unlikely able change
outcome many elections. coalition, hand, may able manipulate
result. rules, STV, NP-hard compute single agent needs
vote manipulate result prove manipulation single agent impossible
(Bartholdi & Orlin, 1991). rules Borda, may require coalition two
agents manipulation NP-hard compute (Davies, Katsirelos, Narodytska, & Walsh,
2011; Betzler, Niedermeier, & Woeginger, 2011). rules veto, may require
coalition manipulating agents whose size unbounded (and allowed grow
problem size) manipulation NP-hard compute (Conitzer et al., 2007).
Complete incomplete information: Many results assume manipulator(s) complete information agents votes. course, may know precisely
agents vote practice. However, several reasons case complete information interesting. First, show computationally intractable
compute manipulate election complete information intractable
incomplete information. Second, complete information case informs case
uncertainty. instance, computationally intractable coalition
compute manipulate election complete information intractable
individual compute manipulate election probabilistic
information votes (Conitzer et al., 2007).
Constructive destructive manipulation: manipulator trying make one particular
candidate win (constructive manipulation) prevent one particular candidate winning
(destructive manipulation)? Destructive manipulation easier compute constructive
manipulation. instance, constructive manipulation veto rule coalition agents
weighted votes NP-hard destructive manipulation polynomial (Conitzer et al.,
2007). However, rules destructive constructive manipulation
complexity class. example, constructive destructive manipulation
plurality polynomial compute, whilst constructive destructive manipulation
plurality runoff weighted votes NP-hard (Conitzer et al., 2007).
Figure 1, give representative selection results complexity manipulating
voting. References many results found work Conitzer et al. (2007).
paper, focus two cases cover main types computational complexity
results identified: manipulation STV unweighted votes single agent
2

fiWhere Hard Manipulation Problems?

number candidates
plurality
Borda
veto
STV
plurality runoff
Copeland

unweighted votes,
constructive
manipulation
P
NP-c
P
NP-c
P
NP-c

2
P
P
P
P
P
P

weighted votes,
constructive
destructive
3
4
2
3
P
P
P
P
NP-c NP-c P
P
NP-c NP-c P
P
NP-c NP-c P
NP-c
NP-c NP-c P
NP-c
P
NP-c P
P

Figure 1: Computational complexity deciding various voting rules manipulated
agent (unweighted votes) coalition agents (weighted votes). P means
problem polynomial, NP-c problem NP-complete. example, constructive manipulation veto rule polynomial unweighted votes weighted
votes 2 candidates, NP-hard 3 candidates. hand, destructive manipulation veto rule polynomial weighted votes coalition
manipulating agents 2 candidates.

unbounded number candidates election, manipulation veto voting
weighted votes coalition agents 3 candidates election. cases,
assume complete information votes agents. two cases thus cover cases
computational complexity associated: unweighted votes, small (bounded) number
manipulators large (unbounded) number candidates; weighted votes, large (unbounded)
number manipulators, small (bounded) number candidates.
STV obvious interesting case consider study computational complexity manipulation. STV one voting rules used practice manipulation
NP-hard compute votes unweighted. Bartholdi Orlin argued STV one
promising voting rules consider respect:
STV apparently unique among voting schemes actual use today computationally resistant manipulation., (Bartholdi & Orlin, 1991, p. 341).
STV appears difficult manipulate many rules. example, Chamberlain
(1985) studied four different measures manipulability voting rule: probability
manipulation possible, number candidates made win, coalition size
necessary manipulate, margin-of-error still results successful manipulation.
Compared commonly used rules plurality Borda, results showed STV
difficult manipulate substantial margin. concluded that:
[this] superior performance . . . combined rather complex implausible nature
strategies manipulate it, suggest [the STV rule] may quite resistant
manipulation, (Chamberlin, 1985, p. 203).
second case considered paper (manipulation veto rule coalition manipulators three candidates) interesting study several reasons. First, veto rule
simple representative voting rules manipulation coalition agents weighted
votes small number candidates NP-hard compute. Second, veto rule easy
reason about. Unlike STV, multiple rounds elimination candidates
worry about. fact, show, manipulation veto rule equivalent simple number
partitioning problem. therefore use efficient number partitioning algorithms compute manipulations. Third, veto rule borderline tractability since constructive manipulation
3

fiWalsh

rule coalition weighted agents NP-hard destructive manipulation polynomial
(since best way ensure candidate win simply veto candidate) (Conitzer
et al., 2007).
empirical study considers computational difficulty computing manipulations practice. NP-hardness results describe worst-case. increasing concern computational complexity results may reflect actual difficulty computing manipulations
practice. instance, number recent theoretical results suggest manipulation may
often computationally easy (Conitzer & Sandholm, 2006; Procaccia & Rosenschein, 2007b; Xia &
Conitzer, 2008a; Friedgut, Kalai, & Nisan, 2008; Xia & Conitzer, 2008b). results demonstrate
profitably study issue empirically. several reasons empirical analysis
undertaken useful. First, theoretical analysis often asymptotic show
size hidden constants. addition, elections typically bounded size. sure
asymptotic behaviour relevant finite sized electorates met practice? instance,
results suggest easily compute manipulations almost type STV election
100 candidates. Second, theoretical analysis often restricted particular distributions
(e.g. independent identically distributed votes). Manipulation may different practice
due correlations votes. instance, preferences single-peaked voting
rule selects median candidate manipulable. median voting rule,
best interests agents state true preferences. thus clear correlations
votes impact manipulability election. Indeed, number recent
results studied whether manipulation remains computationally hard votes limited
single-peaked (Walsh, 2007; Faliszewski, Hemaspaandra, Hemaspaandra, & Rothe, 2009; Brandt,
Brill, Hemaspaandra, & Hemaspaandra, 2010). experiments therefore look elections
correlations votes. Third, many theoretical results
computational complexity manipulation hard limited scope.
instance, long standing open result recently settled, proving computing manipulation
Borda rule coalition manipulators NP-hard (Davies et al., 2011; Betzler et al., 2011).
However, proofs require precisely 2 manipulators. remains open computing manipulation Borda rule larger coalition NP-hard. empirical study may quickly suggest
whether result extends larger coalitions. Finally, empirical studies may suggest new avenues
theoretical study. example, experiments reported suggest simple universal
form probability coalition agents veto election elect desired candidate.
would interesting try derive form theoretically.

2. Background
give notation background used throughout rest paper. Let
number candidates election. vote linear order (a transitive, antisymmetric,
total relation) set candidates. Let n number agents voting. profile
n-tuple votes. let N (i, j) number agents preferring j profile. voting
rule function maps profile unique winning alternative. paper, consider
number common voting rules:
Scoring rules: (w1 , . . . , wm ) vector weights, ith candidate total order scores wi ,
winner candidate highest total score. plurality rule weight vector
(1, 0, . . . , 0), veto rule vector (1, 1, . . . , 1, 0), whilst Borda rule vector
(m 1, 2, . . . , 0). veto rule, voter effectively vetoes one candidate
candidate fewest vetoes wins.
Single transferable vote (STV): STV proceeds number rounds. Unless one candidate
majority first place votes, eliminate candidate least number first

4

fiWhere Hard Manipulation Problems?

place votes. ballots placing eliminated candidate first place re-assigned
second place candidate. repeat one candidate majority.
Copeland (aka tournament):
P candidate highest Copeland score wins. Copeland
score candidate i6=j (N (i, j) > n2 ) (N (i, j) < n2 ). Copeland winner candidate wins pairwise elections. second order Copeland rule,
tie, winner candidate whose defeated competitors largest sum Copeland
scores.
Maximin (aka Simpson): candidate highest maximin score wins. maximin
score candidate mini6=j N (i, j). Simpson winner candidate whose worst
performance pairwise elections best.
rules easily modified work weighted votes. vote integer weight w
viewed w agents vote identically. voting rules anonymous order votes
profile unimportant. profile therefore thought multi-set n votes. ensure
winner unique, sometimes need break ties (e.g. two candidates
number vetoes, two candidates number first place votes). UK,
example, election tied, returning officer choose candidates using
random method lots coin toss. typical assumption made literature (and
paper) ties broken favour manipulator. precisely, given choice several
candidates, tie-break favour candidate preferred manipulator. Suppose
manipulator make preferred candidate win assuming ties broken favour
ties fact broken random. conclude manipulator increase
chance getting preferred result. would interesting consider tie-breaking rules.
Indeed, tie-breaking even introduce computational complexity manipulation. example,
computing manipulate Copeland rule weighted votes polynomial ties scored
1 NP-hard scored 0 (Faliszewski, Hemaspaandra, & Schnoor, 2008).
consider one agent coalition k agents trying manipulate result election.
Manipulation situation manipulators vote differently true preferences
order improve outcome perspective. common literature, assume
manipulators complete knowledge votes (and, appropriate, complete
knowledge weights associated votes). Whilst may unrealistic practice
assume complete knowledge votes, several reasons case
interesting consider. First, complete information likely special case uncertainty
model. Hence, computational hardness results complete information directly imply hardness
corresponding uncertainty model. Second, results hardness manipulation
coalition weighted votes complete information imply hardness manipulation
individual agent unweighted votes incomplete information (Conitzer et al., 2007). Third,
assuming complete information, factor complexity coming uncertainty model
focus instead computing manipulation.
addition standard uniform random models votes, consider
two restricted types votes: single-peaked single-troughed votes. single-peaked votes,
candidates placed line, agents preference candidate decreases distance
single preferred candidate. Single-peaked preferences interesting several
perspectives. First, single-peaked preferences likely occur number domains.
example, buying house, might optimal price mind preference
house decreases distance price increases. Second, single-peaked preferences
easy elicit. Conitzer (2007, 2009) gives strategy eliciting single-peaked preference
ordering linear number pairwise ranking questions. Third, single-peaked preferences prevent
certain problematic situations arising aggregating preferences. particular, prevent
existence Condorcet cycles. fact, median candidate single-peaked profile beats

5

fiWalsh

others pairwise comparisons (that is, median candidate Condorcet winner) (Black,
1948). single-troughed votes, hand, candidates placed line,
agents preference candidate increases distance single least preferred candidate.
example, candidates locations build new incinerator, might least
preferred location (your neighbourhood), preference increases away
incinerator this. Single-troughed votes similar nice properties single-peaked votes
(Barbera, Berga, & Moreno, 2009).

3. Single Transferable Voting
begin empirical study manipulation STV elections. STV used wide variety
real-world settings including election Irish presidency, Australian House Representatives, Academy awards, many organisations including American Political Science
Association, International Olympic Committee, British Labour Party. Interestingly
NP-hard compute single agent manipulate STV rule. Indeed, one
voting rules used practice manipulation NP-hard compute setting.
precisely, STV NP-hard manipulate single agent number candidates unbounded
votes unweighted (Bartholdi & Orlin, 1991), coalition agents 3
candidates votes weighted (Conitzer et al., 2007). Coleman Teague give enumerative method coalition k unweighted agents compute manipulation STV rule
runs O(m!(n + mk)) time n number agents voting number
candidates (Coleman & Teague, 2007). single manipulator, Conitzer, Sandholm Lang
give O(n1.62m ) time algorithm (called CSL on) compute set candidates
win STV election (Conitzer et al., 2007).
Figure 2, give modified version CSL algorithm computing manipulation
STV rule. uses similar recursion CSL changes original algorithm several
ways take advantage fact want compute one distinguished candidate
win need know candidates possibly win. two main
changes CSL. First, ignore elections chosen candidate eliminated. Second,
terminate search soon manipulation found chosen candidate wins.
particular, need explore left branch search tree right branch gives
successful manipulation.
tested modified algorithm simplest possible scenario: elections
vote equally likely. one agent trying manipulate election candidates
n agents vote. Votes drawn uniformly random m! possible votes.
Impartial Culture (IC) model. show benefits modifications CSL algorithm,
ran simple experiment = n. experiment run CLISP 2.42 3.2 GHz
Pentium 4 3GB memory running Ubuntu 8.04.3. Table 1 gives mean nodes explored
runtime needed compute manipulation prove none exists. Median percentiles
display similar behaviour. see modified method considerably faster
original CSL algorithm. addition, problems get larger, improvement increases. n = 32,
method nearly 10 times faster CSL. increases roughly 40 times faster n = 128.
improvements reduce time find manipulation largest problems several
hours couple minutes.
3.1 Varying Number Agents
next performed detailed experiments looking phase transition behaviour hard manipulation problems. many NP-hard problem domains, computationally hard instances
shown often associated region parameter space
rapid transition probability solution exists (Cheeseman, Kanefsky, & Taylor, 1991;

6

fiWhere Hard Manipulation Problems?

Manipulate(c, R, (s1 , . . . , sm ), f )
1 |R| = 1
; one candidate left?
2
return (R = {c})
; chosen candidate?
3 f = 0
; top manipulators vote currently free?
4

5
arg minjR (sj )
; currently eliminated?
6
sd sd + w
; Suppose manipulator votes
7
e arg minjR (sj )
8
= e
; change result?
9
return
10
(c 6= d) Manipulate(c, R {d}, Transfer ((s1 , . . . , sm ), d, R), 0)
11
else return
12
((c 6= d) Manipulate(c, R {d}, Transfer ((s1 , . . . , sm ), d, R), 0))
13
((c 6= e) Manipulate(c, R {e}, Transfer ((s1 , . . . , sm ), e, R), d))
14
else
; top manipulators vote fixed
15
arg minjR (sj )
; eliminated?
16
c =
; chosen candidate?
17
return f alse
18
= f
; manipulator free change result?
19
return Manipulate(c, R {d}, Transfer ((s1 , . . . , sm ), d, R), 0)
20
else return Manipulate(c, R {d}, Transfer ((s1 , . . . , sm ), d, R), f )

Figure 2: modified algorithm compute agent manipulate STV election.
use integers 1 candidates, integers 1 n agents (with n
manipulator), c candidate manipulator wants win, R set un-eliminated
candidates, sj weight agents ranking candidate j first amongst R, w weight
manipulator, f candidate highly ranked manipulator amongst R (or 0
currently constraint highly ranked). function Transfer computes
vector new weights agents ranking candidate j first amongst R given candidate
eliminated. algorithm initially called R set every candidate, f 0.
Mitchell, Selman, & Levesque, 1992). phase transition satisfiable unsatisfiable phase resembles seen statistical physics Ising magnets similar systems.
several good surveys area (Dubois, Monasson, Selman, & Zecchina, 2001; Hartmann &
Weigt, 2005; Gomes & Walsh, 2006).
first experiment varied number agents voting. Figures 3 4, plot
probability manipulator make random agent win, cost compute
possible fix number candidates vary number agents STV election.
subsequent experiments, tested 1000 problems point. number candidates
agents voting varied powers 2, typically 20 (= 1) 27 (= 128) unless otherwise
indicated.
ability agent manipulate election decreases number agents increases.
votes candidates significant chance manipulator
able change result. Phase transition behaviour observed many NP-complete
problem domains including propositional satisfiability (Mitchell et al., 1992; Gent & Walsh, 1994,
1996b), constraint satisfaction (Prosser, 1994; Smith, 1994; Gent, MacIntyre, Prosser, & Walsh, 1995;
Gent, MacIntyre, Prosser, Smith, & Walsh, 2001), graph colouring (Walsh, 1998, 1999, 2001), number
partitioning (Gent & Walsh, 1996a, 1998; Mertens, 2001) travelling salesperson problem
(Zhang & Korf, 1996; Gent & Walsh, 1996c). Unlike domains, probability curve observed
7

fiWalsh

CSL algorithm
nodes
time/s
1.46
0.00
3.28
0.00
11.80
0.00
59.05
0.03
570.11
0.63
14,676.17
33.22
8,429,800.00 6,538.13

n
2
4
8
16
32
64
128

Modified algorithm
nodes
time/s
1.24
0.00
1.59
0.00
3.70
0.00
12.62
0.01
55.20
0.09
963.39
3.00
159,221.10 176.68

Table 1: Comparison original CSL algorithm modified version computes
constructive manipulation STV election. table gives mean nodes explored
runtime needed compute manipulation prove none exists. Median
percentiles display similar behaviour. election n agents voting uniformly random n different candidates. Best results row bold.

1

m=4
m=8
m=16
m=32
m=64
m=128

0.9

prob(manipulable)

0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1

10
total number agents voting, n+1

100

Figure 3: Manipulability STV election containing random uniform votes. number
candidates fixed vary number agents voting. vertical axis measures
probability single manipulating agent make random candidate win.
horizontal axis measures total number agents voting. Note n number
agents voting besides manipulator log scale used horizontal
axis.

8

fiWhere Hard Manipulation Problems?

appear sharpen step function around fixed point. probability curve
resembles smooth phase transitions seen polynomial problems 2-colouring (Achlioptas,
1999) 1-in-2 satisfiability (Walsh, 2002). indicated before, assume ties broken
favour manipulator. reason, probability election manipulable greater
1
. Finding manipulation proving none possible easy unless large

1e+06
m=128
m=64
m=32
m=16
m=8
m=4

100000

mean nodes

10000

1000

100

10

1
1

10

100

agents, n

Figure 4: Search cost compute agent manipulate STV election containing random
uniform votes. number candidates, fixed vary number agents.
vertical axis measures mean nodes explored compute single manipulating
agent make random candidate win. horizontal axis measures number
agents voting besides manipulator. Median percentiles similar.
number agents large number candidates. However, situation, chance
manipulator change result small.
3.2 Varying Number Candidates
next experiment slices parameter space orthogonal direction, varying number
candidates election. Figure 5, plot cost compute manipulator make
random agent win STV election fix number agents vary number
candidates. probability curve manipulator make random agent win resembles
Figure 3. Whilst cost computing manipulation appears increase exponentially
number candidates m, observed scaling much better 1.62m worst case scaling
original CSL algorithm. easily compute manipulations 128 candidates. Note
1.62m 1026 = 128. Thus, appear far worst case. fitted
observed data function cdm found fit = 1.008 coefficient determination
R2 = 0.95 indicating good fit.
3.3 Correlated Votes
many real life situations, votes completely uniform uncorrelated other.
happens introduce correlation votes? consider random votes drawn
Polya-Eggenberger urn model (Berg, 1985). model, urn containing
m! possible votes. draw votes urn random, put back urn
9

fiWalsh

1.62**m
n=128
n=64
n=32
n=16
n=8
n=4

1e+14
1e+12

mean nodes

1e+10
1e+08
1e+06
10000
100
1
20

40

60

80

100

120

candidates,

Figure 5: Search cost compute agent manipulate STV election containing random
uniform votes. number agents, n fixed vary number candidates.
vertical axis measures mean number nodes explored compute manipulation
prove none exists. horizontal axis measures m, number candidates
election. Median percentiles similar.

additional votes type (where parameter). increases, increasing
correlation votes. generalises Impartial Culture model (a = 0)
votes equally likely Impartial Anonymous Culture (a = 1) model profiles
equally likely (McCabe-Dansted & Slinko, 2006). give parameter independent problem

size, consider b = m!
. instance, b = 1, 50% chance second vote
first.
Figures 6 7, plot probability manipulator make random agent win
STV election, cost compute possible vary number candidates
election votes drawn Polya-Eggenberger urn model. before, ability
agent manipulate election decreases number candidates, increases. search
cost compute manipulation appears increase exponentially number candidates
m. However, easily compute manipulations 128 candidates. fitted observed
data function cdm found fit = 1.001 coefficient determination R2 = 0.99
indicating good fit.
Figure 8, plot cost compute manipulation fix number candidates
vary number agents. before, ability agent manipulate election decreases
number agents increases. votes candidates chance
manipulator succeed. previous experiments, finding manipulation proving
none exists easy even many agents candidates. observed results
almost indistinguishable votes correlated single-peaked (or single-troughed)
drawn either uniformly random urn model.

10

fiWhere Hard Manipulation Problems?

1

n=64
n=32
n=16
n=8
n=4

0.9

prob(manipulable)

0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1

10

100

candidates,

Figure 6: Manipulability STV election containing correlated votes. number agents
fixed vary number candidates, m. n fixed votes drawn
Polya-Eggenberger urn model b = 1. vertical axis measures probability
manipulator make random candidate win. horizontal axis measures
number candidates, election.

1.62**m
n=64
n=32
n=16
n=8
n=4

1e+14
1e+12

mean nodes

1e+10
1e+08
1e+06
10000
100
1
20

40

60
80
candidates,

100

120

Figure 7: Search cost compute agent manipulate STV election containing correlated
votes. number agents, n fixed vary number candidates, m.
n fixed votes drawn using Polya-Eggenberger urn model b = 1. vertical
axis measures mean number search nodes explored compute manipulation
prove none exists. horizontal axis measures number candidates,
election. curves different n fit closely top other. Median
percentiles similar.

11

fiWalsh

1e+06

m=64
m=32
m=16
m=8
m=4

100000

mean nodes

10000

1000

100

10

1
20

40

60
80
agents, n

100

120

Figure 8: Search cost compute agent manipulate STV election correlated votes.
number candidates, fixed vary number agents, n. n fixed
votes drawn using Polya-Eggenberger urn model b = 1. vertical axis
measures mean number search nodes explored compute manipulation prove
none exists. horizontal axis measures number agents, n. Median
percentiles similar.

4. Coalition Manipulation
algorithm computing manipulation STV election single agent used
compute coalition manipulate STV election members coalition vote
unison. ignores complex manipulations members coalition need vote
different ways. Insisting members coalition vote unison might reasonable
wish manipulation low computational communication cost (Slinko & White,
2008). Figures 9 10, plot probability coalition voting unison make
random agent win STV election, cost compute possible vary size
coalition. Theoretical results due Procaccia Rosenschein (2007a) Xia Conitzer

(2008a) suggest critical size coalition
manipulate election grows n.

therefore normalize coalition size n.
ability coalition manipulate
election increases size coalition

increases. coalition n size, probability coalition manipulate
election candidate chosen random wins around 21 . cost compute
manipulation (or prove none exists) decreases increase size coalition.
easier larger coalition manipulate election smaller one.
experiments suggest different behaviour occurs combinatorial
problems propositional satisfiability graph colouring. instance, see rapid
transition sharpens around fixed point 3-satisfiability. vary coalition size,
see
transition probability able manipulate result around coalition size
k = n. However, transition appears smooth seem sharpen
towards step
function n increases. addition, hard instances occur around k = n. Indeed,
hardest instances coalition smaller small chance
able manipulate result.

12

fiWhere Hard Manipulation Problems?

1
n=4
n=8
n=16
n=32
n=64

prob(manipulable)

0.8

0.6

0.4

0.2

0
0

0.5

1

1.5

2

2.5

3

3.5

4

normalized coalition size, k/sqrt(n)

Figure 9: Manipulability STV election vary size manipulating coalition.
number candidates number non-manipulating agents. n fixed
votes uniformly drawn random n! possible votes. vertical axis measures
probability coalition make arandom candidate win. horizontal axis
measures coalition size, k normalized n.

1e+06

n=64
n=32
n=16
n=8
n=4

100000

mean nodes

10000

1000

100

10

1
0

0.5

1
1.5
2
2.5
3
normalized coalition size, k/sqrt(n)

3.5

4

Figure 10: Search cost compute coalition manipulate STV election vary coalition
size. vertical axis measures mean number search nodes explored compute
manipulation prove
none exists. horizontal axis measures coalition size,

k normalized n. Median percentiles similar.

13

fiWalsh

5. Sampling Real Elections
Elections met practice may differ sampled far. might, instance,
votes never cast. hand, models studied far every possible vote
non-zero probability seen. therefore sampled real voting records.
previously studied phase transition behaviour real world problems using similar sampling
techniques (Gent & Walsh, 1995; Gent, Hoos, Prosser, & Walsh, 1999).
first experiment uses votes cast 10 teams scientists select one 32 different
trajectories NASAs Mariner spacecraft (Dyer & Miles, 1976). team ranked different
trajectories based scientific value. sampled votes. elections 10 fewer
agents voting, simply took random subset 10 votes. elections 10
agents voting, simply sampled 10 votes uniform frequency. elections 32
fewer candidates, simply took random subset 32 candidates. Finally elections
32 candidates, duplicated candidate assigned ranking.
Since STV works total orders, forced agent break ties randomly.
agent broke ties independently agent. New candidates introduced way
clones existing candidates. would interesting consider other, perhaps random
methods introducing new candidates. Nevertheless, note clones feature
number real world elections. Indeed, one way manipulate election introduce clone
candidates opposition, thereby divide vote. example, motivation
studying clones, Tideman (1987) describes successfully vote class treasurer
somewhat precocious 12 year old nominating best friend main rival. therefore
believe may interest consider elections generated clones
present.
Figures 11 12, plot cost compute manipulator make random agent
win STV election vary number candidates agents. Votes sampled
NASA experiment explained earlier. probability manipulator manipulate
election resembles probability curve uniform random votes. search needed compute
manipulation appears increase exponentially number candidates m. However,
observed scaling much better 1.62m worst-case scaling original CSL algorithm.
easily compute manipulations 128 candidates.
second experiment, used votes faculty hiring committee University
California Irvine (Dobra, 1983). dataset 10 votes 3 different candidates. sampled
data set ways NASA dataset observed similar results.
Results reported Figures 13 14. previous experiments, easy find
manipulation prove none exists. observed scaling much better 1.62m
worst-case scaling original CSL algorithm.

6. Veto Rule
turn manipulation elections small, bounded number candidates,
votes weighted coalition agents trying manipulate result.
part empirical study, consider veto rule. recall veto scoring rule
agent gets cast veto one candidate. candidate fewest vetoes
wins. next theorem shows, simple number partitioning algorithms used compute
successful manipulation veto rule. precisely, following theorem demonstrates,
manipulation election 3 candidates weighted votes coalition (which NP-hard
compute) directly reduced 2-way number partitioning problem. therefore compute
manipulations experiments using efficient number partitioning algorithm proposed
Korf (1995).

14

fiWhere Hard Manipulation Problems?

1.62**m
n=128
n=64
n=32
n=16
n=8
n=4

1e+14
1e+12

mean nodes

1e+10
1e+08
1e+06
10000
100
1
20

40

60

80

100

120

candidates,

Figure 11: Search cost compute agent manipulate STV election votes sampled
NASA experiment. number agents, n fixed vary number
candidates, m. vertical axis measures mean number search nodes explored
compute manipulation prove none exists. horizontal axis measures
number candidates, m. Median percentiles similar.

1e+06

m=128
m=64
m=32
m=16
m=8
m=4

100000

mean nodes

10000

1000

100

10

1
20

40

60
80
agents, n

100

120

Figure 12: Search cost compute agent manipulate STV election votes sampled
NASA experiment. number candidates, fixed vary
number agents, n. vertical axis measures mean number search nodes
explored compute manipulation prove none exists. horizontal axis
measures number agents, n. Median percentiles similar.

15

fiWalsh

1.62**m
n=64
n=32
n=16
n=8
n=4

1e+14
1e+12

mean nodes

1e+10
1e+08
1e+06
10000
100
1
20

40

60

80

100

120

candidates,

Figure 13: Search cost compute agent manipulate STV election votes sampled
faculty hiring committee. number agents voting, n fixed vary
number candidates, m. vertical axis measures mean number search
nodes explored compute manipulation prove none exists. horizontal
axis measures number candidates, m. Median percentiles similar.

1e+06

m=48
m=24
m=12
m=6
m=3

100000

mean nodes

10000

1000

100

10

1
20

40

60
80
agents, n

100

120

Figure 14: Search cost compute agent manipulate STV election votes sampled
faculty hiring committee. number candidates, fixed vary
number agents voting, n. vertical axis measures mean number search
nodes explored compute manipulation prove none exists. horizontal axis
measures number agents, n. Median percentiles similar.

16

fiWhere Hard Manipulation Problems?

Theorem 1 exists successful manipulation election 3 candidates weighted
coalition using veto rule exists partitioning W {|a P
b|} two bags
difference two sums less equal + b 2c + iW i, W
multiset weights manipulating coalition, a, b c weights vetoes assigned
three candidates non-manipulators manipulators wish candidate weight
c win.
Proof: never helps coalition manipulating veto rule veto candidate
wish win. coalition does, however, need decide divide vetoes
candidates wish lose. P
Consider case b. Suppose partition weights
w /2 w + /2 2w = iW {|ab|} difference two sums.
partition vetoes successful manipulation winning candidate
vetoes nextPbest candidate. is,Pc b + (w /2). Hence
2w + 2b 2c = (a P
b) + 2b 2c + iW = (a + b P
2c) + 2 iW i. case, < b
(b + 2c) + iW i. Thus + b 2c + iW i. 2
STV rule, start analysis uniform votes. first consider case
n agents veto uniformly random one 3 possible candidates, vetoes carry weights
drawn uniformly (0, w]. coalition small size, little weight able
change result. hand, coalition large size, sure able
make favoured candidate win. thus transition manipulability problem
coalition size increases (see Figure 15).
1

prob(elect chosen candidate)

0.9

n=14^2
n=12^2
n=10^2
n=8^2
n=6^2

0.8
0.7
0.6
0.5
0.4
0.3
0

10

20
30
manipulators, k

40

50

Figure 15: Manipulability veto election. vertical axis measures probability
coalition k agents elect chosen candidate veto election n agents
already voted. horizontal axis measures number manipulators, k. Vetoes
weighted weights uniformly drawn (0, 28 ]. k = 0, 1/3rd chance
non-manipulators already elected candidate.
Based work Procaccia Rosenschien
(2007a) Xia Conitzer (2008a),

expect critical coalition size increase n. Figure16, see phase transition
displays simple universal form plotted k/ n. phase transition appears
smooth, probability varying slowly
approaching step function problem
size increases. obtained good fit 1 32 ek/ n . smooth phase transitions
seen 2-colouring (Achlioptas, 1999), 1-in-2 satisfiability Not-All-Equal 2-satisfiability
17

fiWalsh

1

prob(elect chosen candidate)

0.9

n=14^2
n=12^2
n=10^2
n=8^2
n=6^2

0.8
0.7
0.6
0.5
0.4
0.3
0

1

2

3

4

5

k/sqrt(n)

Figure 16: Manipulability veto election rescaled axes. vertical axis measures probability coalition k agents elected chosen candidate veto election
n agents already voted. horizontal axis measures number manipulators,
k divided square root number agents already voted. Vetoes
weighted andweights uniformly drawn (0, 28 ]. Note horizontal axis
scaled 1/ n compared previous figure.

(Achlioptas, Chtcherba, Istrate, & Moore, 2001; Walsh, 2002). interesting note
decision problems polynomial.
theoretical results mentioned earlier leave open hard compute whether manipulation possible coalition size critical. Figure 17 displays computational cost
find manipulation (or prove none exists) using Korfs efficient number partitioning algorithm.
Even critical region problems may may manipulable, easy compute
whether problem manipulable. problems solved branches. contrasts
phase transition behaviour NP-complete problems propositional satisfiability
complexity classes (Gent & Walsh, 1999; Bailey, Dalmau, & Kolaitis, 2001; Slaney & Walsh, 2002)
hardest problems tend occur around phase transition.

7. Hard Veto Problems Rare
Based reduction manipulation problems number partitioning, give aheuristic argument hard manipulation problems become vanishing rare n ; k = ( n). basic
idea simple: time coalition large enough able change result, variance
scores candidates likely large computing successful manipulation
proving none possible easy. argument approximate. example, replace discrete sums continuous integrals, call upon limiting results Central Limit Theorem.
Nevertheless, provides insight manipulations typically easy compute.
Suppose n vetoes voted non-manipulators carry weights drawn uniformly [0, w].
Suppose k manipulators weights drawn uniformly [0, w], want
candidates B lose C wins, cast vetoes weight a, b c
A, B C respectively. Without loss generality suppose b. three
cases consider. first case, c b c. easy manipulators make

18

fiWhere Hard Manipulation Problems?

1.05

average branches

1.04

n=14^2
n=12^2
n=10^2
n=8^2
n=6^2

1.03

1.02

1.01

1
0

1

2

3

4

5

k/sqrt(n)

Figure 17: Computational cost Korfs number partitioning algorithm decide coalition
k agents manipulate veto election n agents already voted. Vetoes
weighted weights uniformly drawn (0, 2k ]. vertical axis measures
mean number branches used algorithm find manipulation prove none
exists. previous figure, horizontal axis measures number manipulators, k divided square root number agents already voted.
note problems solved little search. took single branch solve.
took 2 branches.

C win since C wins whether veto B. second case, c > b. Again, easy
manipulators decide make C win. veto B. successful
manipulation C wins. third case, < c b < c. manipulators
must partition k vetoes B total vetoes received B exceeds
C. Let deficit weight C B C. is,
= (c a) + (c b) = 2c b. approximate sum n random variables drawn
uniformly probability 1/3 [0, 2w] probability 2/3 [w, 0]. variables
mean 0 variance 2w2 /3. Central Limit Theorem, tends normal distribution
mean 0, variance t2 = 2nw2 /3. manipulation possible, must less
s, sum weights vetoes manipulators. Central Limit Theorem,
tends normal distribution mean = kw/2, variance 2 = 2kw2 /3.
simple heuristic argument due (Karmarkar, Karp, Lueker, & Odlyzko, 1986) based
Central
Limit Theorem upper bounds optimal partition difference k numbers
[0, w] O(w k/2k ). addition, based phase transition number partitioning (Gent &
Walsh, 1998), expect partitioning problems easy unless log2 (w) = (k).
Combining
two observations, expect hard manipulation problems 0 k constant
. probability occurring is:
Z
Z x
(x)2
1 y22
1

e 22
e 2t dy dx

2
2t
x k
0
substituting t, , get:
Z
Z x
2
(xkw/2)2
1
1

y2
4nw /3 dy dx
p
p
e 4kw2 /3
e

4kw2 /3
4nw2 /3
0
x k
19

fiWalsh

n ; , tends to:
Z
0

1
p

4kw2 /3

e




k

(xkw/2)2
4kw2 /3

p

4nw2 /3

e



x2
4nw2 /3

dx

ez 1 z > 0, upper bounded by:

Z
(xkw/2)2
k
1

p
p
e 4kw2 /3 dx
4nw2 /3 0
4kw2 /3

Since integral bounded 1, k = ( n) log2 (w) = (k), upper bound varies as:
O(

1
)
k2k

Thus, expect hard instances manipulation problems exponentially rare. Since even
brute force manipulation algorithm takes O(2k ) time worst-case, expect hard
instances significant impact average-case n (and thus k) grows. stress
heuristic argument. makes many assumptions complexity manipulation

problems (in particular hard instances lie within narrow interval 0 k).
assumptions currently supported empirical observation informal argument.
However, experimental results reported Figure 17 support conclusions.

8. Distributions Vetoes
theoretical analyses manipulation due Procaccia Rosenschein (2007a) Xia
Conitzer (2008a) suggest probability election manipulable largely independent
w, size weights attached vetoes. Figure 18 demonstrates indeed appears
case practice. weights varied size 28 216 , probability
appear change. fact, probability curve fits simple universal form plotted
Figure 16. observed cost computing manipulation proving none
possible change weights varied size.
Similarly, theoretical results typically place assumptions distribution votes.
example, results Procaccia Rosenschein
(2007a) Xia Conitzer (2008a)
critical coalition size increases ( n) hold independent identically
distributed random votes. Similarly, heuristic argument hard manipulation problems
vanishingly rare depends application Central Limit Theorem. therefore works
types independent identically distributed random votes.
considered therefore another type independent identically distributed vote. particular, study election weights independently drawn normal distribution.
Figure 19 shows smooth phase transition manipulability. plotted
Figure 19 top Figures 16 18. curves appear fit simple universal form.
uniform weights, computational cost deciding election manipulable small
even coalition size critical. Finally, varied parameters normal distribution. probability electing chosen candidate well cost computing manipulation
appear depend mean variance distribution. reproduce
figures look identical previous figures.

9. Correlated Vetoes
conjecture one place find hard manipulation problems veto voting votes
highly correlated. example, consider hung election n agents veto candidate
20

fiWhere Hard Manipulation Problems?

1

prob(elect chosen candidate)

0.9

log2(w)=16
log2(w)=14
log2(w)=12
log2(w)=10
log2(w)=8

0.8
0.7
0.6
0.5
0.4
0.3
0

1

2

3

4

5

k/sqrt(n)

Figure 18: Independence size weights manipulability veto election.
vertical axis measures probability coalition k agents elect chosen
candidate n agents already voted. previous figure, horizontal
axis measures number manipulators, k divided square root number
agents already voted. Vetoes weighted weights uniformly drawn
(0, w].

1

prob(elect chosen candidate)

0.9

n=14^2
n=12^2
n=10^2
n=8^2
n=6^2

0.8
0.7
0.6
0.5
0.4
0.3

0

1

2

3

4

5

k/sqrt(n)

Figure 19: Manipulability veto election weighted votes taken normal distribution.
vertical axis measure probability coalition k agents elect chosen
candidate veto election n agents already voted. previous figure,
horizontal axis measures number manipulators, k divided square root
number agents already voted. Vetoes weighted drawn
normal distribution mean 28 standard deviation 27 .

21

fiWalsh

prob(elect chosen candidate)

1
m=24
m=18
m=12
m=6

0.8

0.6

0.4

0.2

0
0

0.5

1
log2(w)/k

1.5

2

Figure 20: Manipulability veto election votes highly correlated result
hung. Vetoes manipulators weighted weights uniformly drawn
(0, w], agents vetoed candidate manipulators wish win,
sum weights manipulators twice non-manipulators.
vertical axis measures probability coalition k agents elect chosen
candidate. horizontal axis measures log2 (w)/k.

100000
m=24
m=18
m=12
m=6

average branches

10000

1000

100

10

1

0

0.5

1

1.5

2

log2(w)/k

Figure 21: search cost decide hung veto election manipulated. Vetoes
manipulators weighted weights uniformly drawn (0, w],
agents vetoed candidate manipulators wish win, sum
weights manipulators twice non-manipulators. vertical
axis measures mean number branches explored Korfs algorithm decide
coalition k agents manipulate veto election. horizontal axis measures
log2 (w)/k.

22

fiWhere Hard Manipulation Problems?

manipulators wish win, k manipulators exactly twice weight vetoes
n agents. election finely balanced. preferred candidate manipulators wins
manipulators perfectly partition vetoes two candidates
wish lose. Note precisely trick used reducing number partitioning
manipulation problem Conitzer et al. (2007). Figure 20, plot probability k
manipulators make preferred candidate win hung election vary size
weights w. Similar number partitioning (Gent & Walsh, 1998), see rapid transition
manipulability around log2 (w)/k 1. Figure 21, observe rapid increase
computationally complexity compute manipulation around point.
happens votes less correlated? consider election perfectly
hung except one agent vetoes random one three candidates. Figure 22,
plot cost computing manipulation weight single random veto increases.
Even one uncorrelated vote enough make manipulation easy magnitude
weight vetoes manipulators. suggests find hard manipulation problems
veto elections votes highly correlated.
100000
m=24
m=18
m=12
m=6

average branches

10000

1000

100

10

1

0

0.2

0.4
0.6
log2(w)/log2(w)

0.8

1

Figure 22: impact one random agent manipulability hung veto election. Vetoes
manipulators weighted weights uniformly drawn (0, w], nonmanipulating agents vetoed candidate manipulators wish win,
sum weights manipulators twice non-manipulators
except one random non-manipulating agent whose weight uniformly drawn
(0, w0 ]. vertical axis measures mean number search branches explored
Korfs algorithm decide coalition k agents manipulate veto election.
horizontal axis measures log2 (w0 )/ log2 (w). veto one random agent
weight agents, computationally easy decide election
manipulated.

10. Related Work
indicated earlier, number theoretical results suggest elections easy manipulate
practice despite worst case NP-hardness results. example, Procaccia Rosenschein proved
scoring rules wide variety distributions votes, size

23

fiWalsh


coalition
o( n), probability change result tends 0,

( n), probability manipulate result tends 1 (Procaccia & Rosenschein,
2007a). gave simple greedy procedure find manipulation scoring rule
polynomial time probability failure inverse polynomial n (Procaccia &
Rosenschein, 2007b). However, treat result caution junta distributions
used work may limited usefulness (Erdelyi, Hemaspaandra, Rothe, & Spakowski, 2009).
second example, Xia Conitzer shown large class voting rules including
STV, number agents grows, either probability coalition manipulate result
small (as coalition small), probability easily manipulate
result make alternative win large (Xia & Conitzer, 2008a). left open
small interval size coalition coalition large enough manipulate
obviously large enough manipulate result easily.
Friedgut, Kalai Nisan proved voting rule neutral far dictatorial
3 candidates exists agent random manipulation succeeds
probability ( n1 ) (Friedgut et al., 2008). were, however, unable extend proof four
(or more) candidates. recently, Isaksson, Kindler Mossel proved similar result 4
candidates using geometric arguments (Isaksson, Kindler, & Mossel, 2010). Starting
different assumptions again, Xia Conitzer showed random manipulation would succeed
probability ( n1 ) 3 candidates STV, 4 candidates scoring
rule 5 candidates Copeland (Xia & Conitzer, 2008b).
discussed earlier, Coleman Teague proposed algorithms compute manipulations
STV rule (Coleman & Teague, 2007). conducted empirical study demonstrated relatively small coalitions needed change elimination order STV
rule. observed uniform random elections trivially manipulable using
simple greedy heuristic. hand, results suggest that, manipulation single
agent, often small amount backtracking needed find manipulation prove
none exists.

11. Conclusions
studied empirically whether computational complexity barrier manipulation
STV veto rules manipulating agents complete information
votes. looked number different distributions votes including uniform random
votes, correlated votes drawn urn model, votes sampled real world elections.
looked manipulation single unweighted agent case STV, coalition
weighted agents case veto voting. many elections experiments, easy
compute manipulation prove manipulation possible. situations identified
manipulations computationally difficult find depended either election
hundreds candidates election tightly hung. results increase concern
computational complexity may significant barrier manipulation practice.
lessons learnt study? First, whilst focused STV
veto rules, similar behavior likely voting rules. would, instance, interesting
study Borda rule one rules used practice computing manipulation
NP-hard unweighted votes (Davies et al., 2011; Betzler et al., 2011). would
interesting study voting rules Copeland, maximin ranked pairs. rules members
small set voting rules NP-hard manipulate without weights votes
(Xia, Zuckerman, Procaccia, Conitzer, & Rosenschein, 2009). Second, may connection
smoothness phase transition problem hardness. Sharp phase transitions
propositional satisfiability associated hard decision problems, whilst smooth
transitions associated easy instances NP-hard problems polynomial problems
2-colourability. phase transitions observed appear smooth. Third, given
24

fiWhere Hard Manipulation Problems?

insights provided empirical studies, would interesting consider similar studies related
problems. example, computational complexity issue preference elicitation (Conitzer &
Sandholm, 2002b; Walsh, 2008; Pini, Rossi, Venable, & Walsh, 2008)? Fourth, assumed
manipulators complete information votes agents. interesting
future direction determine uncertainty agents voted adds computational
complexity manipulation practice (Conitzer & Sandholm, 2002a; Walsh, 2007; Lang, Pini,
Rossi, Venable, & Walsh, 2007).

Acknowledgments
NICTA funded Australian Government Department Broadband, Communications Digital Economy Australian Research Council ICT Centre
Excellence program. results paper appeared two earlier conference papers
(Walsh, 2009, 2010).

References
Achlioptas, D. (1999). Threshold phenomena random graph colouring satisfiability. Ph.D.
thesis, Department Computer Science, University Toronto.
Achlioptas, D., Chtcherba, A., Istrate, G., & Moore, C. (2001). phase transition 1-in-k
SAT NAE SAT. Proceedings 12th Annual ACM-SIAM Symposium Discrete
Algorithms (SODA01), pp. 719720. Society Industrial Applied Mathematics.
Bailey, D., Dalmau, V., & Kolaitis, P. (2001). Phase transitions PP-complete satisfiability problems. Nebel, B. (Ed.), Proceedings 17th International Joint Conference Artificial
Intelligence (IJCAI 2001), pp. 183189. International Joint Conference Artificial Intelligence, Morgan Kaufmann.
Barbera, S., Berga, D., & Moreno, B. (2009). Single-dipped preferences. UFAE IAE working papers 801.09, Unitat de Fonaments de lAnlisi Econmica (UAB) Institut dAnlisi Econmica
(CSIC).
Bartholdi, J., & Orlin, J. (1991). Single transferable vote resists strategic voting. Social Choice
Welfare, 8 (4), 341354.
Bartholdi, J., Tovey, C., & Trick, M. (1989). computational difficulty manipulating
election. Social Choice Welfare, 6 (3), 227241.
Berg, S. (1985). Paradox voting urn model: effect homogeneity. Public Choice,
47, 377387.
Betzler, N., Niedermeier, R., & Woeginger, G. (2011). Unweighted coalitional manipulation
Borda rule NP-hard. Walsh, T. (Ed.), Proceedings 22nd International Joint
Conference Artificial Intelligence (IJCAI 2011). International Joint Conference Artificial
Intelligence.
Black, D. (1948). rationale group decision-making. Journal Political Economy, 56 (1),
2334.
Brandt, F., Brill, M., Hemaspaandra, E., & Hemaspaandra, L. (2010). Bypassing combinatorial
protections: Polynomial-time algorithms single-peaked electorates. Fox, M., & Poole,
D. (Eds.), Proceedings 24th AAAI Conference Artificial Intelligence (AAAI 2010).
AAAI Press.
Chamberlin, J. (1985). investigation relative manipulability four voting systems.
Behavioral Science, 30, 195203.
25

fiWalsh

Cheeseman, P., Kanefsky, B., & Taylor, W. (1991). really hard problems are. Mylopoulos, J., & Reiter, R. (Eds.), Proceedings 12th International Joint Conference
Artificial Intelligence (IJCAI 1991), pp. 331337. International Joint Conference Artificial
Intelligence.
Coleman, T., & Teague, V. (2007). complexity manipulating elections. Gudmundsson,
J., & Jay, B. (Eds.), Proceedings 13th Australasian Symposium Theory Computing
(CATS 07), pp. 2533. Australian Computer Society, Inc.
Conitzer, V. (2007). Eliciting single-peaked preferences using comparison queries. Durfee, E.,
Yokoo, M., Huhns, M., & Shehory, O. (Eds.), Proceedings 6th International Joint Conference Autonomous Agents Multiagent Systems (AAMAS 2007), pp. 408415. IFAAMAS.
Conitzer, V. (2009). Eliciting single-peaked preferences using comparison queries. Journal Artificial Intelligence Research, 35, 161191.
Conitzer, V., & Sandholm, T. (2002a). Complexity manipulating elections candidates.
Dechter, R., Kearns, M., & Sutton, R. (Eds.), Proceedings 18th National Conference
Artificial Intelligence (AAAI 2002), pp. 314319. Association Advancement Artificial
Intelligence.
Conitzer, V., & Sandholm, T. (2002b). Vote elicitation: Complexity strategy-proofness.
Dechter, R., Kearns, M., & Sutton, R. (Eds.), Proceedings 18th National Conference
Artificial Intelligence (AAAI 2002), pp. 392397. Association Advancement Artificial
Intelligence.
Conitzer, V., & Sandholm, T. (2006). Nonexistence voting rules usually hard manipulate. Gil, Y., & Mooney, R. (Eds.), Proceedings 21st National Conference Artifical
Intelligence (AAAI 2006), pp. 627634. Association Advancement Artificial Intelligence.
Conitzer, V., Sandholm, T., & Lang, J. (2007). elections candidates hard
manipulate?. Journal Association Computing Machinery, 54 (3). Article 14 (33
pages).
Davies, J., Katsirelos, G., Narodytska, N., & Walsh, T. (2011). Complexity algorithms
Borda manipulation. Burgard, W., & Roth, D. (Eds.), Proceedings Twenty-Fifth
AAAI Conference Artificial Intelligence (AAAI 2011). AAAI Press.
Dobra, J. (1983). approach empirical studies voting paradoxes: update extension..
Public Choice, 41, 241250.
Dubois, O., Monasson, R., Selman, B., & Zecchina, R. (2001). Special issue: Phase transitions
combinatorial problems. Theoretical Computer Science, 265 (12), 1306.
Dyer, J., & Miles, R. (1976). actual application collective choice theory selection
trajectories Mariner Jupiter/Saturn 1977 project. Operations Research, 24 (2), 220244.
Erdelyi, G., Hemaspaandra, L., Rothe, J., & Spakowski, H. (2009). Generalized Juntas NP-hard
sets. Theoretical Computer Science, 410 (38-40), 39954000.
Faliszewski, P., Hemaspaandra, E., & Hemaspaandra, L. (2010). Using complexity protect elections. Communications ACM, 53 (11), 7482.
Faliszewski, P., Hemaspaandra, E., Hemaspaandra, L., & Rothe, J. (2009). shield never
was: societies single-peaked preferences open manipulation control.
Heifetz, A. (Ed.), Proceedings 12th Conference Theoretical Aspects Rationality
Knowledge (TARK-2009), pp. 118127.
Faliszewski, P., Hemaspaandra, E., & Schnoor, H. (2008). Copeland voting: ties matter. Padgham,
L., Parkes, D., Muller, J., & Parsons, S. (Eds.), 7th International Joint Conference Autonomous Agents Multiagent Systems (AAMAS 2008), pp. 983990.

26

fiWhere Hard Manipulation Problems?

Faliszewski, P., & Procaccia, A. (2010). AIs war manipulation: winning?. AI Magazine,
31 (4), 5364.
Friedgut, E., Kalai, G., & Nisan, N. (2008). Elections manipulated often. Proceedings
49th Annual IEEE Symposium Foundations Computer Science (FOCS 2008), pp.
243249. IEEE Computer Society Press.
Gent, I., Hoos, H., Prosser, P., & Walsh, T. (1999). Morphing: Combining structure randomness.
Hendler, J., & Subramanian, D. (Eds.), Proceedings 16th National Conference
Artificial Intelligence (AAAI 1999), pp. 654660. Association Advancement Artificial
Intelligence.
Gent, I., MacIntyre, E., Prosser, P., Smith, B., & Walsh, T. (2001). Random constraint satisfaction:
Flaws structure. Constraints, 6 (4), 345372.
Gent, I., MacIntyre, E., Prosser, P., & Walsh, T. (1995). Scaling effects CSP phase transition. Montanari, U., & Rossi, F. (Eds.), Proceedings 1st International Conference
Principles Practices Constraint Programming (CP-95), Vol. 976 Lecture Notes
Computer Science, pp. 7087. Springer-Verlag.
Gent, I., & Walsh, T. (1994). SAT phase transition. Cohn, A. (Ed.), Proceedings 11th
European Conference Artificial Intelligence (ECAI-94), pp. 105109. John Wiley & Sons.
Gent, I., & Walsh, T. (1995). Phase transitions real computational problems. Proceedings
8th International Symposium Artificial Intelligence: Intelligent Systems Applications
Industry Business, pp. 356364.
Gent, I., & Walsh, T. (1996a). Phase transitions annealed theories: Number partitioning
case study. Wahlster, W. (Ed.), Proc. 12th European Conference Artificial
Intelligence (ECAI-96), pp. 170174. John Wiley Sons, Chichester.
Gent, I., & Walsh, T. (1996b). satisfiability constraint gap. Artificial Intelligence, 81 (12),
5980.
Gent, I., & Walsh, T. (1996c). TSP phase transition. Artificial Intelligence, 88, 349358.
Gent, I., & Walsh, T. (1998). Analysis heuristics number partitioning. Computational Intelligence, 14 (3), 430451.
Gent, I., & Walsh, T. (1999). Beyond NP: QSAT phase transition. Hendler, J., & Subramanian,
D. (Eds.), Proceedings 16th National Conference AI, pp. 648653. Association
Advancement Artificial Intelligence.
Gibbard, A. (1973). Manipulation voting schemes: general result. Econometrica, 41, 587601.
Gomes, G., & Walsh, T. (2006). Randomness structure. Rossi, F., van Beek, P., & Walsh,
T. (Eds.), Handbook Constraint Programming, Foundations Artificial Intelligence, pp.
639664. Elsevier.
Hartmann, A., & Weigt, M. (2005). Phase Transitions Combinatorial Optimization Problems:
Basics, Algorithms Statistical Mechanics. Wiley-VCH, Weinheim.
Isaksson, M., Kindler, G., & Mossel, E. (2010). geometry manipulation: quantitative proof
Gibbard-Satterthwaite theorem. 51th Annual IEEE Symposium Foundations
Computer Science (FOCS 2010), pp. 319328. IEEE Computer Society.
Karmarkar, N., Karp, R., Lueker, J., & Odlyzko, A. (1986). Probabilistic analysis optimum
partitioning. Journal Applied Probability, 23, 626645.
Korf, R. (1995). approximate optimal solutions: case study number partitioning.
Mellish, C. S. (Ed.), Proceedings 14th International Joint Conference Artificial Intelligence (IJCAI 1995), pp. 266272. International Joint Conference Artificial Intelligence.

27

fiWalsh

Lang, J., Pini, M., Rossi, F., Venable, B., & Walsh, T. (2007). Winner determination sequential
majority voting. Veloso, M. M. (Ed.), Proceedings 20th International Joint Conference Artificial Itelligence (IJCAI-2007), pp. 13721377. International Joint Conference
Artificial Intelligence.
McCabe-Dansted, J., & Slinko, A. (2006). Exploratory analysis similarities social choice
rules. Group Decision Negotiation, 15, 77107.
Mertens, S. (2001). physicists approach number partitioning. Theoretical Computer Science,
265 (1-2), 79108.
Mitchell, D., Selman, B., & Levesque, H. (1992). Hard Easy Distributions SAT Problems.
Proceedings 10th National Conference AI, pp. 459465. Association Advancement
Artificial Intelligence.
Pini, M., Rossi, F., Venable, K., & Walsh, T. (2008). Dealing incomplete agents preferences
uncertain agenda group decision making via sequential majority voting. Brewka,
G., & Lang, J. (Eds.), Principles Knowledge Representation Reasoning: Proceedings
Eleventh International Conference (KR 2008), pp. 571578. AAAI Press.
Procaccia, A. D., & Rosenschein, J. S. (2007a). Average-case tractability manipulation voting
via fraction manipulators. Durfee, E. H., Yokoo, M., Huhns, M. N., & Shehory, O.
(Eds.), Proceedings 6th International Joint Conference Autonomous Agents Multiagent Systems (AAMAS-07), pp. 718720. IFAAMAS.
Procaccia, A. D., & Rosenschein, J. S. (2007b). Junta distributions average-case complexity
manipulating elections. Journal Artificial Intelligence Research, 28, 157181.
Prosser, P. (1994). Binary constraint satisfaction problems: harder others. Cohn,
A. G. (Ed.), Proceedings 11th European Conference Artificial Intelligence, pp. 9599.
European Conference Artificial Intelligence, John Wiley Sons.
Satterthwaite, M. (1975). Strategy-proofness Arrows conditions: Existence correspondence
theorems voting procedures social welfare functions. Journal Economic Theory, 10,
187216.
Slaney, J., & Walsh, T. (2002). Phase transition behavior: decision optimization. Proceedings 5th International Symposium Theory Applications Satisfiability
Testing, SAT 2002.
Slinko, A., & White, S. (2008). Non- dictatorial social choice rules safely manipulable.
Goldberg, U. E. . P. W. (Ed.), Proceedings 2nd International Workshop Computational
Social Choice (COMSOC08), pp. 403413.
Smith, B. (1994). phase transition constraint satisfaction problems: closer look
mushy region. Cohn, A. G. (Ed.), Proceedings 11th European Conference Artificial
Intelligence, pp. 100104. European Conference Artificial Intelligence, John Wiley Sons.
Tideman, T. (1987). Independence clones criterion voting rules. Social Choice
Welfare, 4, 185206.
Walsh, T. (1998). constrainedness knife-edge. Mostow, J., & Rich, C. (Eds.), Proceedings
15th National Conference AI, pp. 406411. Association Advancement Artificial
Intelligence.
Walsh, T. (1999). Search small world. Dean, T. (Ed.), Proceedings 16th International
Joint Conference Artificial Itelligence (IJCAI-99), pp. 11721177. International Joint Conference Artificial Intelligence, Morgan Kaufmann.
Walsh, T. (2001). Search high degree graphs. Nebel, B. (Ed.), Proceedings 17th International Joint Conference Artificial Itelligence (IJCAI-2001), pp. 266274. International
Joint Conference Artificial Intelligence, Morgan Kaufmann.
28

fiWhere Hard Manipulation Problems?

Walsh, T. (2002). P NP: COL, XOR, NAE, 1-in-k, Horn SAT. Dechter, R., Kearns,
M., & Sutton, R. (Eds.), Proceedings 17th National Conference AI (AAAI 2002), pp.
695700. Association Advancement Artificial Intelligence.
Walsh, T. (2007). Uncertainty preference elicitation aggregation. Proceedings 22nd
National Conference AI, pp. 38. Association Advancement Artificial Intelligence.
Walsh, T. (2008). Complexity terminating preference elicitation. Padgham, L., Parkes, D. C.,
Muller, J. P., & Parsons, S. (Eds.), 7th International Joint Conference Autonomous Agents
Multiagent Systems (AAMAS 2008), pp. 967974. IFAAMAS.
Walsh, T. (2009). really hard manipulation problems? phase transition
manipulating veto rule. Boutilier, C. (Ed.), Proceedings 21st International Joint
Conference Artificial Itelligence (IJCAI-2009), pp. 324329. International Joint Conference
Artificial Intelligence.
Walsh, T. (2010). empirical study manipulability single transferable voting. Coelho,
H., Studer, R., & Wooldridge, M. (Eds.), Proc. 19th European Conference Artificial
Intelligence (ECAI-2010), Vol. 215 Frontiers Artificial Intelligence Applications, pp.
257262. IOS Press.
Xia, L., & Conitzer, V. (2008a). Generalized scoring rules frequency coalitional manipulability. Fortnow, L., Riedl, J., & Sandholm, T. (Eds.), EC 08: Proceedings 9th ACM
conference Electronic Commerce, pp. 109118. ACM.
Xia, L., & Conitzer, V. (2008b). sufficient condition voting rules frequently manipulable.
Fortnow, L., Riedl, J., & Sandholm, T. (Eds.), Proceedings 9th ACM conference
Electronic Commerce (EC 08), pp. 99108. ACM.
Xia, L., Zuckerman, M., Procaccia, A., Conitzer, V., & Rosenschein, J. (2009). Complexity
unweighted coalitional manipulation common voting rules. Boutilier, C. (Ed.),
Proceedings 21st International Joint Conference Artificial Intelligence (IJCAI 2009),
pp. 348353. International Joint Conference Artificial Intelligence.
Zhang, W., & Korf, R. (1996). study complexity transitions asymmetic traveling salesman
problem. Artificial Intelligence, 81 (1-2), 223239.

29


