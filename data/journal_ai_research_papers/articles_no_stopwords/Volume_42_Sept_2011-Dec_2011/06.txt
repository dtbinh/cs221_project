Journal Artificial Intelligence Research 42 (2011) 917-943

Submitted 03/11; published 12/11

Interpolable Formulas Equilibrium Logic
Answer Set Programming
Dov Gabbay

dov.gabbay@kcl.ac.uk

Bar Ilan University Israel, Kings College London
University Luxembourg.

David Pearce

david.pearce@upm.es

AI Dept, Universidad Politecnica de Madrid, Spain.

Agustn Valverde

valverde@ctima.uma.es

Dept Applied Mathematics, Universidad de Malaga, Spain.

Abstract
Interpolation important property classical many non-classical logics
shown interesting applications computer science AI. study
Interpolation Property non-monotonic system equilibrium logic, establishing weaker stronger forms interpolation depending precise interpretation
inference relation. results yield form interpolation ground logic
programs answer sets semantics. disjunctive logic programs study
property uniform interpolation closely related concept variable forgetting. first-order version equilibrium logic analogous Interpolation properties
whenever collection equilibrium models (first-order) definable. Since
case so-called safe programs theories, applies usual situations arise
practical answer set programming.

1. Introduction
interpolation property important much discussed topic logical systems,
classical non-classical (Gabbay & Maksimova, 2005). importance computer
science becoming recognised nowadays. interpolation property applied
various areas computer science, example software specification (Diaconescu,
Goguen, & Stefaneas, 1993; Bicarregui, Dimitrakos, Gabbay, & Maibaum, 2001),
construction formal ontologies (Kontchakov, Wolter, & Zakharyaschev, 2008)
model checking related subareas (McMillan, 2005). first two areas interpolation
important metatheoretical property, particular may provide basis modular composition decomposition theories; instance, Kontchakov et al. (2008)
plays key role study modular decomposition ontologies.
cases, interpolants play role special formulas applied automated deduction (McMillan, 2005).
date interpolation received much less attention systems non-monotonic
reasoning logic programming, despite importance AI computer science.
note study interpolation property system nonmonotonic reasoning
known equilibrium logic (Pearce, 2006). Since turn regarded logical
foundation stable model reasoning answer set programming (ASP), results
transfer immediately sphere ASP. shall focus mainly interpolation
c
2011
AI Access Foundation. rights reserved.

fiGabbay, Pearce, & Valverde

metatheoretical property primary interest establishing property certain
cases interest. Although Section 8 consider case interpolant (actually
uniform interpolant) explicitly constructed, mainly concerned pure
existence theorems. Discussion complexity issues well possible applications
interpolation property ASP left future work. However, seems likely that,
case studies involving formal ontologies (Konev, Walther, & Wolter, 2009), interpolation
may useful property applications ASP knowledge representation. previous
paper (Pearce & Valverde, 2012), interpolation Beth properties underlying,
monotonic logic ASP used characterise strong kinds intertheory relations.
capture weaker kinds intertheory relations may important able rely
interpolation holding extended, non-monotonic logic. plan explore avenue
future.
introduce property interpolation, let us start notation terminology. Let us assume syntax first-order logic formulas denoted lower case
Greek letters predicates lower case Latin letters.
Let monotonic inference relation suppose . interpolant
(, ) formula
&

(1)

contains predicate constant symbols belong . logic L
inference relation L said interpolation property interpolant exists
every pair formulas (, ) L . well-known, classical logic well
many non-classical logics possess interpolation.
Suppose deal non-monotonic logical system inference relation |.
express idea formula interpolant generally suffice simply
replace | (1). One problem that, since | non-monotonic, general
transitive. Instead, following idea Gabbay Maksimova (2005), modify
condition (1) proceed two-stage fashion. make use fact nonmonotonic consequence defined terms minimal models monotonic
logical system, say consequence relation | appropriately captured means
minimal models logic L consequence relation |=L . suppose | .
interpolant (, ) look formula
| & |=L

(2)

predicate constant symbols occur . Since |
defined via subclass minimal L-models, already assume |=L |. Moreover
assume L well-behaved sublogic sense L-equivalent
formulas |-consequences L-consequences |-consequences
|-consequences (so e.g. (2) derive | ). non-monotonic
reasoning last two properties known left right absorption, respectively.
Given conditions, follows (2) formula language
L-equivalent interpolant (, ). Likewise interpolant
(, ) |=L | interpolant (, ).
Now, find interpolant (, ) satisfying (2), prove one always exists,
proceed follows. look L-formula say, precisely L-defines
918

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

minimal models . Since | follows |=L . Now, L interpolation
property defined earlier, apply theorem obtain infer existence
L-interpolant sense (1) ( , ). Hence (2) follows.
Notice two-stage procedure relies three key features: (i) identify
suitable monotonic sublogic L |, (ii) formulas minimal models L-definable,
(iii) L interpolation property. conditions prima facie independent. shall see, may (i) (iii) lack (ii). situation respect
equilibrium logic follows. propositional case three conditions met,
establish interpolation property general case. situation quantified
equilibrium logic complicated. general case, lack condition (ii).
precisely, appropriate monotonic sublogic L logic interpolation
property, equilibrium models formula need first-order definable L.
procedure outlined yield interpolants cases. However recent results generalised concept (first-order) stable model imply interesting
classes interpolable formulas: shall consider detail one class, safe
formulas. particular, safe formula | , exists interpolant
(2) holds. classes interpolable formulas so-called tight formulas,
formulas possessing finite, complete set called loops.
Safety, tightness loop formulas studied length answer set programming (ASP). implications results ASP summarised follows.
case (finite) ground programs interpolation property holds. first-order
non-ground case, interpolation holds finite, safe programs without function symbols,
hence practically finite programs currently admitted answer set solvers. Moreover,
since safety defined arbitrary formulas function-free language, class
safe formulas sense goes beyond class expressions normally admitted ASP,
even auxiliary concepts weight constraints aggregates included.

2. Logical Preliminaries
work standard propositional predicate languages, latter may
general case contain constant function symbols. Propositional languages based
set V propositional variables, formulas built-up usual way using
logical constants , , , , standing respectively conjunction, disjunction, implication
negation. propositional formula, denote V () set propositional
variables appearing .
first-order language L = hC, F, P consists set constants C, function symbols
F predicate symbols P ; function symbol f F predicate symbol p P
assigned arity. Moreover, assume fixed countably infinite set variables,
symbols , , , , , , auxiliary parentheses (, ). Atoms, terms
formulas constructed usual; closed formulas, sentences,
variable bound quantifier. (first-order) formula, L() denotes
language associated , i.e. set constants, function predicate symbols occuring
it.
make use following notation terminology. Boldface x stands tuple
variables, x = (x1 , . . . , xn ), (x) = (x1 , . . . , xn ) formula whose free variables
919

fiGabbay, Pearce, & Valverde

x1 ,. . . , xn , x = x1 . . . xn . ti terms, = (t1 , . . . , tn ) denotes vector
terms. theory set sentences. Variable-free terms, atoms, formulas, theories
called ground.
usual symbols |=, possibly subscripts, used denote logical
inference consequence relations, respectively. logic L said monotonic
inference relation L satisfies monotonicity property:
L & L
distinguish non-monotonic monotonic inference relations, use | symbolise
former. cases non-monotonic logic understood terms inference
relation extends suitable monotonic logic. extension well-behaved
say monotonic logic forms deductive base 1 (Pearce, 2006) it.
made precise follows.
Definition 1 Let | nonmonotonic inference relation. say logic L
monotonic inference relation L deductive base | iff (i) L |; (ii) 1 L 2
1 2 ; (iii) | L , | .
L denotes ordinary logical equivalence L, denotes non-monotonic equivalence, i.e. 1 2 means 1 2 non-monotonic consequences.
Furthermore, say deductive base strong satisfies additional condition:
1 6L 2

exists 1 6 2 .

terms nonmonotonic consequence operations, (ii) (iii) correspond conditions
known left absorption right absorption respectively (Makinson, 1994).
2.1 Interpolation
turn interpolation property.
Definition 2 logic L inference relation L said interpolation property
whenever
L
exists sentence (the interpolant)
L & L
predicate, function constant symbols contained ,
i.e. L() L() L(). case propositional logic, requirement V ()
V () V ().
explained introduction, non-monotonic logics consider two forms
interpolation, one weaker one stronger. stronger form makes use underlying
monotonic logic.
1. close concept fully absorbing inferential frame used Dietrich (1994).

920

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

Definition 3 Suppose | . (|, L ) interpolant (, ) formula
| & L

(3)

L deductive base | contains predicate, function constant
symbols belong . non-monotonic logic inference relation |
said (|, ) interpolation property suitable deductive base logic L
(|, L ) interpolant exists every pair formulas (, ) | .
requirement L form deductive base ensures desirable properties
interpolation met.
Proposition 1 Let (|, L ) interpolant (, ).
(a) L , (|, L ) interpolant (, ).
(b) L , L , (|, L )
interpolant ( , ).
property deductive base guarantees (|, L ) relation transitive
sense (3) holds , , , | . last property necessarily
hold second, weaker form interpolation call (|, |) interpolation.
Definition 4 Suppose | . (|, |) interpolant (, ) formula
| & |

(4)

contains predicate, function constant symbols belong .
case propositional logic, requirement V () V () V ().
Analogous previous case, say non-monotonic logic inference relation | (|, |) interpolation property (|, |) interpolant exists every pair
formulas (, ) | . Notice (|, ) stronger form interpolation
logic (|, ) interpolation must (|, |) interpolation,
consequence deductive base requirement (first clause).
Evidently properties expressed Proposition 1 directly applicable
second form interpolation refer underlying base logic. Nevertheless
important feature interpolation properties shall establish
formulate prove analogous properties even (|, |) interpolation.
consider restricted variants interpolation property holds
certain types formulas, words, interpolant (, ) given
| whenever belong specific syntactic classes. cases refer
interpolable formulas. Later shall consider kinds restrictions, belongs
specific class alternatively does.
2.2 Review Logic Here-and-There
Equilibrium logic based nonclassical logic here-and-there, denote
HT propositional case. quantified first-order case denote logic
QHT, subscripts/superscripts denote specific variants.
921

fiGabbay, Pearce, & Valverde

propositional quantified cases logic based axioms rules
intuitionistic logic captured usual Kripke semantics intuitionistic logic (van
Dalen, 1997). However additional axioms HT QHT mean use
simple kinds Kripke structures. first-order case regard structures
sets atoms built arbitrary non-empty domains D; denote At(D, F, P ) set
atomic sentences hD, F, P (if = C, obtain set atomic sentence
language L = hC, F, P i);2 denote (D, F ) set ground terms hD, F, P i.
L = hC, F, P L = hC , F , P i, write L L C C , F F P P .
L-interpretation set mean subset At(D, F, P ). classical Lstructure regarded tuple = h(D, I), L-interpretation
: (C D, F ) D, called assignment, verifies I(d) =
recursively defined.3 = (C, F ) = id, known Herbrand structure.
hand, here-and-there L-structure static domains, QHTs (L)-structure,
tuple = h(D, I), h , h(D, I), h h(D, I), classical L-structures
h .
Thus think here-and-there structure similar first-order classical
model, two parts, components, h correspond two different points
worlds, there, sense Kripke semantics intuitionistic logic,
worlds ordered h t. world w {h, t} one verifies set atoms w
expanded language domain D. call model static, since, contrast
say intuitionistic logic, domain serves worlds. Since h < t, whatever
verified h remains true t. satisfaction relation defined reflect
two different components, write I, w |= denote true respect
w component. Although need define satisfaction relation L = hC, P i,
recursive definition forces us consider formulas hC D, F, P i. particular,
p(t1 , . . . , tn ) At(C D, F, P ) I, w |= p(t1 , . . . , tn ) iff p(I(t1 ), . . . , I(tn )) w
every t1 , . . . , tn (C D, F ). |= extended recursively follows4 :
I, w |= iff I, w |= I, w |= .
I, w |= iff I, w |= I, w |= .
I, |= iff I, 6|= I, |= .
I, h |= iff I, |= I, h 6|= I, h |= .
I, w |= iff I, 6|= .
I, |= x(x) iff I, |= (d) D.
I, h |= x(x) iff I, |= x(x) I, h |= (d) D.
I, w |= x(x) iff I, w |= (d) D.
2. think objects additional constants; approach allow us use simplified
notation objects distinguished names.
3. is, every C, I(a) every f F arity n, mapping f : Dn defined;
recursive definition given I(f (t1 , . . . , tn )) = f (I(t1 ), . . . , I(tn )).
4. following corresponds usual Kripke semantics intuitionistic logic given assumptions
two worlds h single domain D,

922

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

Truth sentence model defined follows: |= iff I, w |=
w {h, t}. sentence valid true models, denoted |= . sentence
consequence set sentences , denoted |= , every model model .
resulting logic called Quantified Here-and-There Logic static domains (Lifschitz, Pearce, & Valverde, 2007) denoted QHTs . terms satisfiability validity
logic equivalent logic introduced Pearce Valverde (2005).
complete axiomatisation QHTs obtained follows (Lifschitz et al., 2007).
take axioms rules first-order intuitionistic logic add axiom Hosoi
( ( ))

(5)

determines 2-element here-and-there models propositional case, together
axiom:
x((x) x(x)).
.
consider equality predicate, =6 P , interpreted following condition
every w {h, t}
.
I, w |= t1 = t2 iff I(t1 ) = I(t2 ).
obtain complete axiomatisation, need add axiom decidible equality
.
.
xy(x = x =
6 y).
denote resulting logic QHTs= (Lifschitz et al., 2007) inference relation
. compactness strong form completeness established |=
.
context logic programs, following assumptions often play role. case
classical QHTs= models, say parameter names assumption (PNA)
applies case I|T (C,F ) surjective, i.e. unnamed individuals D; unique
names assumption (UNA) applies case I|T (C,F ) injective; case PNA
UNA apply, standard names assumption (SNA) applies, i.e. I|T (C,F ) bijection.
usual first order logic, satisfiability validity independent signature.
= h(D, I), h , L -structure L L, denote I|L restriction
sublanguage L:
I|L = h(D, I|L ), h |L , |L
Proposition 2 Suppose L L, theory L L -model .
M|L L-model .
Proposition 3 Suppose L L L. valid (resp. satisfiable)
QHTs= (L) valid (resp. satisfiable) QHTs= (L ).
proposition allows us omit reference signature logic
denoted simply QHTs= .
simplify notation symbolise QHTs= structure = h(D, I), h ,
hU, H, i, U = (D, I) universe, H, respectively sets atoms
h , . case propositional HT logic, Kripke structures regarded pairs
hH, set atoms obvious way. (strongly) complete axiomatisation HT
obtained intuitionistic logic adding Hosoi axiom (5).
923

fiGabbay, Pearce, & Valverde

2.3 Interpolation Logic Here-and-There
important useful property HT fact strongest propositional
intermediate logic (i.e. strengthening intuitionistic logic) properly contained
classical logic. Moreover turn properly contains intermediate logics.
addition HT one precisely seven superintuitionistic propositional logics possessing
interpolation property (Maksimova, 1977; Gabbay & Maksimova, 2005).
languages without function symbols Ono showed interpolation holds
logic QHTs quantified here-and-there constant domains (Ono, 1983).5 addition,
Maksimova (1997, 1998) showed adding pure equality axioms, e.g. decidible equality axiom, superintuitionistic logic preserves interpolation property (Gabbay &
Maksimova, 2005). conclude therefore
Proposition 4 logic QHTs= possesses interpolation property.
Note strong completeness theorem QHTs= work equivalently
|=.
make observation interpolation continues hold languages include function symbols. established using following property.
Proposition 5 every formula , possible build formula , ,
atoms one following types:
.
x = C,
.
f (x1 , . . . xn ) = f F (where every xi variables),
p(t1 , . . . , tm ) (where every xi variables).
Theorem 1 Let L language containing function symbols. QHTs= (L)
interpolation property.
Proof sketch: Let us assume ; previous proposition, assume,
without loss generality, function symbols atoms type
.
f (x1 , . . . xn ) = y. Now, consider language L obtained L replacing every
function symbol f fresh predicate symbol, Pf , Arity(Pf ) = 1 + Arity(f ).
Let formulas L build respectivelly, replacing every atom
.
f (x1 , . . . xn ) = Pf (x1 , . . . xn , y). Trivially, and, interpolation property
QHTs= (L ), exists interpolant : , . replace
.
predicates Pf (t1 , . . . , tn , tn+1 ) atoms f (t1 , . . . tn ) = tn+1 obtain interpolant
initial pair formulas.
5. Onos axiomatisation QHTs uses constant domains axiom x((x) ) (x(x) ), well
alternative axioms propositional here-and-there, viz. p (p (q q)) (p q) (q p) (p
q). However, axioms given equivalent Onos.

924

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

2.4 Equilibrium Logic
Equilibrium logic non-monotonic logic based certain kinds minimal models
QHTs= HT. give definition QHTs= ; propositional version easily
obtained it.
Definition 5 Among quantified here-and-there structures define order E follows:
h(D, I), h , E h(D , J), J h , J



= , = J, = J , h J h .

subset relation holds strictly, write .
Definition 6 (Equilibrium model) Let theory = h(D, I), h , model
.
1. said total h = .
2. said equilibrium model (or short, say: equilibrium)
minimal E among models , total.
words, equilibrium models total models smaller non-total
model. Evidently total QHTs= model theory equivalently regarded
classical first order model ; follows make tacit use equivalence.
propositional case, equilibrium models defined way,
ordering propositional HT models. usual way formula theory said
consistent QHTs= model additionally say coherent
equilibrium model.
following definition give preliminary notion equilibrium entailment,
agrees standard versions equilibrium logic (Pearce, 2006).
Definition 7 relation |, called equilibrium entailment, defined follows. Let
set formulas.
1. non-empty coherent (has equilibrium models), | every equilibrium model model QHTs= (respectively HT).
2. either empty equilibrium models, | .
Notice unless need distinguish propositional first-order reasoning use
symbols |, |= either version.
words may help explain concept equilibrium entailment. First,
define basic notion entailment truth every intended (equilibrium) model.
nonmonotonic reasoning common approach sometimes called skeptical
cautious notion entailment inference; counterpart brave reasoning defined
via truth intended model. Since equilibrium logic intended provide logical
foundation answer set semantics logic programs, cautious variant entailment
natural one choose: standard consequence relation associated answer
sets given truth answer sets program. Note however ASP
programming paradigm answer set may correspond particular solution
problem modelled therefore interest right.
925

fiGabbay, Pearce, & Valverde

Secondly, useful nonmonotonic consequence entailment relation
non-trivially defined consistent theories. shall see below, however,
theories possess equilibrium models. cases natural use monotonic consequence entailment relation. particular propositional case HT maximal
logic property logically equivalent theories equilibrium models.
Evidently situation 2 handles correctly cases empty inconsistent.
Despite qualifications, remains ambiguity concept equilibrium
entailment need settle. Suppose L L, theory L
sentence L (i.e. L = L()). understand expression | ?
Evidently, fix language advance, say language L , simply
consider equilibrium models L . represents knowledge base logic
program, instance, may take view L() appropriate signature
work with. case, query fully interpreted contains
terms theory language L().
language L theory whose language contained L, let EML ()
collection equilibrium models QHTs= (L). consider following two
variants entailment.
Definition 8 (Equilibrium entailment) Assume theory L, non-empty
equilibrium models, then:
(i) Let us write |cw |= EML (), L = LL():
(ii) let us write |ow |= EML () L() ,

general EML () L denotes collection expansions elements EML ()
models L L , i.e. vocabulary L \ L interpreted arbitrarily.
(iii) either empty equilibrium models, |cw iff |ow iff .
simple example illustrate difference |cw |ow . Let
L-sentence let q(x) predicate L. Let constant L let L
language L {q}. first method |cw (q(a) q(a)). fact
stronger entailment |cw q(a). reason form equilibrium
models L , q(a) false effect taking minimal models.
hand, expand equilibrium models QHTs= (L) QHTs= (L ), new
predicate q receives arbitrary interpretation QHTs= (L ). Since logic 3-valued
obtain |ow q(a) q(a).
standard, monotonic logics, difference two forms entailment. Definition 8 replace everywhere equilibrium model simply model (in
QHTs= ), variants (i) (ii) give result.
context logic programming deductive databases orthodox view
reasoning based closed world assumption (CWA). Accordingly ground atomic
query q(a)?, predicate q belong language program
database, would simply assigned value false. case first kind
equilibrium entailment use label |cw since variant appears closer
closed world form reasoning. hand, may legitimate cases
want apply CWA unknown values assigned atom
expressed theory language. second form entailment, |ow ,
926

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

nearer open world reasoning, may appropriate. present purposes, however,
suffices cw ow thought merely mnemonic labels.
thorough analysis closed world versus open world reasoning context would
lead us consider assumptions UNA SNA outside scope paper.
However, observed logic programming use CWA lead
certain apparent anomalies. Notably occurs programs unsafe (see Section
5 below), following, formulated traditional notation logic programs:6
q(x, y) : p(x, y).
p(x, x).
Given restrictions SNA Herbrand models, query
? q(a, z).
yields answer z cannot satisfied models single domain
element a, query
? q(a, b).
satisfiable, given new constant b. logic programming, restrictions
usually assumed, different solutions problem proposed (Gelder, Ross,
& Schlipf, 1991; Kunen, 1987; Maher, 1988). would point
equilibrium logic generally speaking kind program theory create
special difficulties. Neither query
? q(a, z).
understood zq(a, z), query
? q(a, b).
true equilibrium models. particular, equilibrium model whose domain
singleton element, even q(a, b) need true; evidently general case UNA
instance apply. hand answer set programming, UNA often
assumed, typically assumed programs safe. safety condition
program excluded variables appearing head rule appear
positive body makes answer sets sensitive set constants appearing
language used grounding program. paper,
application interpolation ASP concerned, restrict attention safe programs
theories complying generalised form safety (Section 5 below).

3. Interpolation Propositional Equilibrium Logic
section deal interpolation propositional equilibrium logic. clear
semantic construction propositional equilibrium logic HT deductive base.
base actually maximal.
Proposition 6 HT strong maximal deductive base (propositional) equilibrium
entailment.
first property precisely strong equivalence theorem Lifschitz, Pearce
Valverde (2001). Maximality follows fact logic strictly stronger
HT would contain classical logic easily seen deductive base,
e.g. violating condition (ii) Definition 1. have:
6. grateful anonymous referee raising point example.

927

fiGabbay, Pearce, & Valverde

Lemma 1 Let coherent HT-formula EM () set equilibrium models.
formula HT v() defines EM () sense EM ()
|= .
Proof. Suppose coherent. let
M1 = hT1 , T1 i, M2 = hT2 , T2 i, . . . , Mn = hTn , Tn
enumeration equilibrium models. show define EM (). Suppose
Ti , ki elements denote Ai1 , . . . , Aij , . . . , Aiki . Let Ti complement
Ti ; list members Aik1 +1 , . . . Ail . . . , Ai|v()| . Set
=

^
j=1,...,ki

Aij (

_

Ail ),

l=ki+1 ,...,|v()|

=

_



i=1,...,n

claim |= = Mi = 1, . . . , n, i.e. models
precisely M1 , . . . , Mn . verify claim, note Mi |= Mi |= .
Conversely, suppose |= . semantics HT clear |= iff
|= |= , particular |= implies |= = 1, . . . , n. However,
defines complete theory whose models total. follows |= ,
= Mi . establishes claim.

Although shall demonstrate interpolation (|, |) form relation |cw , actually establish stronger result. One consequence
concerned |ow entailment (|, ) form interpolation actually holds.
Proposition 7 (|, |-Interpolation) Let , formulas set v = v() v()
v = v() \ v() suppose B1 , . . . Bn enumeration v . |cw ,
formula v() v() v(), | , B1 . . . Bn |= . Hence
particular |cw .
Proof. Let , v, v statement proposition, suppose |cw .
holds equilibrium models language v. Case (i): suppose
coherent form set equilibrium models, EMv ().
equilibrium construction easy see model EMv ()
atom Bi false, = 1, n. Construct formulas formula exactly
proof Lemma 1. consider formula (B1 . . . Bn ) . Clearly formula
defines set equilibrium models HT(v). Consequently, (B1 . . .Bn ) |=
(B1 . . . Bn ) . apply interpolation theorem HT
infer formula (B1 . . . Bn ) ,
v() v( ) v() hence v() v() v(). Since HT deductive base,
conclude
| & B1 . . . Bn .
Now, since v() v() v(), Bi 6 v() = 1, n. follows HT(v()), Bi
false every equilibrium model . model satisfies (B1 . . . Bn ).7
Since satisfies , |cw .
7. Notice case adding sentence (B1 . . . Bn ) change set equilibrium
models.

928

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

Case (ii). equilibrium models hypothesis .
case simply choose interpolant (, ).

Corollary 1 (|, -Interpolation) Let , formulas |cw v()
v(). formula v() v() v() |cw .
Proof. Immediate Proposition 7 fact v() \ v() = .



Proposition 8 (|, -Interpolation) Let , formulas set v = v() v()
v = v() \ v(). |ow , formula v() v() v(), | ,
.
Proof. Let , v, v statement proposition suppose |ow .
holds expansions elements EMv() () language v. Case (i): suppose
coherent consider EMv() ().
construct formulas formula exactly proof Lemma 1.
consider defines set EMv() (). holds expansions models
v. Hence |= therefore apply interpolation
theorem HT infer formula ,
v() v( ) v() hence v() v() v(). Since |ow HT deductive
base conclude
|ow & .
Case (ii). equilibrium models, choose interpolant (, ).



4. Interpolation Quantified Equilibrium Logic
turn first-order logic. Given inferences form | , key element
proofs Propositions 7 8 existence formula defines collection
EMv() () equilibrium models. propositional case seen existence
established. first-order case, hand, need
exist. words, EML() () need first-order definable arbitrary .
fact hard show. Ferraris et al. (2007) pointed out, general form
answer set programming first-order formulas allowed, fortiori quantified
equilibrium logic, property transitive closure expressible. Yet property
definable classical first-order logic therefore cannot defined QHTs= .
usual way say collection K QHTs= (L) models (QHTs= ) definable
L-sentence, , K |= . easy see whenever
class EML() () first-order definable QHTs= obtain first-order analogs
Propositions 7 8. method proof essentially before.
completeness outline main steps case (|, |)-interpolation.
Proposition 9 (|, |-Interpolation) Let , formulas collection equilibrium models QHTs= - definable. Set L = L() L() L = L() \ L(). Let
{pi : = 1, n} (finite, possibly empty) set predicates L suppose
929

fiGabbay, Pearce, & Valverde

pi arity ki . |cw , formula L() L() L(), | ,

^

xpi (x) |=
i=1,n

Hence particular |cw .
Proof. Assume hypotheses. holds equilibrium models language
L. treat case coherent non-empty collection equilibrium
models, EML() (). assumption collection definable QHTs= (L())-sentence,
, say. consider equilibrium models expanded language L, i.e.
collection EML (). equilibrium construction claim EML () |= xpi (x),
= 1, n. Since working first-order semantics, let us rehearse
briefly argument this. true would model hU, T, EML (),
predicate symbol pi L tuple elements domain hU, T, i,
hU, T, |= pi (a), ie pi (a) . However, since refer relation
pi , structure hU, H, H = \ pi (a) must Valso model , contradicting
hU, T, equilibrium.
EML () |= i=1,n xpi (x) since defines
V
EML() () clearly i=1,n xpi (x) defines EML ().
V
proceed propositional case. i=1,n xpi (x) ,
^
xpi (x) .

i=1,n

interpolation
theorem QHTs= formula L() L() L(),
V
i=1,n xpi (x) . Consequently
^
xpi (x)
| &
i=1,n

token propositional case, infer |cw .

case (|, )-interpolation |ow analogous state main property
without proof.
Proposition 10 (|, -Interpolation) Let , formulas collection
equilibrium models QHTs= - definable. |ow , formula
L() L() L(), | .

5. Illustration: Interpolation Safe Formulas
restrictive definability assumption? often met practice? Actually
mainstream answer set programming, whose language equilibrium logic captures extends (see next section), non-definable classes answers sets play significant role.
reason query answering existing solvers rely grounders instantiate
parts program computing intended models solutions. grounding
process essentially eliminates variables reduces original program propositional
form. practical cases, then, collection stable equilibrium models
definable.
930

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

computational approach work general, syntactic restrictions need
imposed admissible programs theories. common form restriction called
safety. standard types logic programs based rules one regards rule safe
every variable appearing rules head appears body. complex
formulas admitted equilibrium logic general approach answer sets (Ferraris
et al., 2007; Ferraris, 2008), new concepts safety need devised. Proposals suitable
safety concepts made Lee, Lifschitz Palla (2008b) general first-order formulas
Bria, Faber Leone (2008) restricted syntactic class. recently
Cabalar, Pearce Valverde (2009) generalised approaches suggested
safety concept arbitrary function-free formulas equilibrium logic. Since new
concept safety defines quite broad class interpolable formulas, let us review
main features. following section mention kinds interpolable
formulas may arise answer set programming.
5.1 General Concept Safety
remainder section assume languages function-free. usual
sentence said prenex form following shape, n 0:
Q 1 x1 . . . Q n xn
Qi quantifier-free. sentence said universal
prenex form quantifiers universal. universal theory set universal
sentences. safety concept defined prenex formulas provide normal form
QHTs= (Pearce & Valverde, 2005).
first introduce concept called semi-safety. main property semi-safety formulas equilibrium models refer objects language. Note
remainder section use fact negation treated
defined operator, , consider additional semantic clauses
negation.
Definition 9 (Semi-safety) quantifier free formula semi-safe nonsemi-safe variable; is, NSS() = , NSS operator recursively defined
follows:
atom, NSS() set variables ;
NSS(1 2 ) = NSS(1 ) NSS(2 );
NSS(1 2 ) = NSS(1 ) NSS(2 );
NSS(1 2 ) = NSS(2 ) r RV(1 ),
operator RV computes restricted variables follows:
atomic , equality two variables RV() = ; otherwise,
RV() set variables occurring ;
RV() = ;
931

fiGabbay, Pearce, & Valverde

RV(1 2 ) = RV(1 ) RV(2 );
RV(1 2 ) = RV(1 ) RV(2 );
RV(1 2 ) = .
definition semi-safe formulas introduced Cabalar, Pearce Valverde (2009)
generalises former definition Lee, Lifschitz Palla (2008b). short, variable x semi-safe every occurrence inside subformula that,
either x RV() x semi-safe .
examples semi-safe formulas are, instance:
p(x) (q(x) r(x))
p(x) q r(x)

(6)

Note (6), x restricted p(x) q consequent r(x) semi-safe
thus formula itself. contrary, following formulas semi-safe:
p(x) q r(x)
p(x) r(x) q(x)
following results set previously referred property semi-safe formulas:
equilibrium models include objects language.
Proposition 11 (Cabalar et al., 2009)
function free, semi-safe, h(D, I), T, |= , h(D, I), |C , |= .
Theorem 2 (Cabalar et al., 2009) function free, semi-safe, h(D, I), T,
equilibrium model , |C = .
equilibrium models semi-safe formulas refer objects language,
however model could equilibrium depending considered domain.
guarantee independence domain, need additional property semisafety. Specifically, need analyse whether unnamed elements could modify
interpretation formula. that, use assignments Kleenes threevalued logic; three-valued interpretation : {0, 1/2, 1}, extended evaluate
arbitrary formulas () follows:
( ) = min((), ())
( ) = max((), ())

() = 0
( ) = max(1 (), ())

every variable x, going use Kleenes interpretations x , defined follows:
x () = 0 x occurs atom x () = 1/2 otherwise. Intuitively, x () fixes
atoms containing variable x 0 (falsity) leaving rest undefined
evaluates using Kleenes three-valued operators, nothing else exploiting
defined values 1 (true) 0 (false) much possible.
occurrence variable x Qx weakly-restricted occurs subformula
that:
932

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

Q = , positive8 x () = 1
Q = , negative x () = 0
Q = , positive x () = 0
Q = , negative x () = 1
cases, say makes ocurrence weakly restricted . property
added semi-safety condition complete definition safety.
Definition 10 semi-safe sentence said safe positive occurrences
universally quantified variables, negative occurrences existentially quantified
variables weakly restricted.
instance, formula = x(q(x) (r p(x))) safe: occurrence x
p(x) negative, whereas occurrence q(x) inside positive subformula, itself,
x weakly-restricted, since x () = 0 ( 1/2 0) = 1. Another example safe
formula x((p(x) q(x)) r).
Proposition 12 (Cabalar et al., 2009) function free, safe, prenex formula,
then: h(D, I), T, equilibrium model equilibrium model
GrC () (the grounding C).
5.2 Interpolation
basis Proposition 12 could already establish interpolation theorems safe
formulas prenex form, essentially replacing formulas ground versions
working propositional logic. However, apply Propositions 9 10 directly
noting property shown Cabalar et al. (2009) safe prenex formulas definable
classes equilibrium models.
Theorem 3 (interpolation safe formulas)
Safe formulas prenex form
QHTs= -definable classes equilibrium models. Therefore formulas (|, |)-interpolation |cw inference holds Proposition 9 (|, )-interpolation holds |ow
inference Proposition 10.

6. Interpolation Answer Set Semantics
Answer set programming (ASP) become established form declarative, logic-based
programming basic ideas well-known. textbook treatment reader
referred Barals book (2003). well-known, origins ASP lie
stable model answer set semantics logic programs introduced Gelfond Lifschitz (1988, 1990, 1991). semantics made use fixpoint condition involving certain
reduct operator. Subsequent extensions concept cover general kinds rules
8. Recall subexpression formula said positive number implications
contain subexpression antecedent even, negative odd. consider
defined .

933

fiGabbay, Pearce, & Valverde

relied reduct operator similar sort. original definitions, reader
referred various papers cited.
correspondence answer set semantics equilibrium logic wellestablished discussed many publications, beginning Pearce (1997),
first showed answer sets disjunctive programs regarded equilibrium
models (Lifschitz et al., 2001, 2007; Ferraris et al., 2007; Pearce & Valverde, 2005, 2006,
2008). purposes suffice recall two important syntactic classes
programs main features correspondence equilibrium logic.
one extreme ground, disjunctive logic programs; treat without
strong negation, answer sets simply collections atoms. programs consist
sets ground rules form
K1 . . . Kk L1 , . . . Lm , notLm+1 , . . . , notLn

(7)

Li Kj atoms. translation syntax programs HT
propositional formulas trivial one, viz. (7) corresponds HT sentence
L1 . . . Lm Lm+1 . . . Ln K1 . . . Kk

(8)

translation correspondence answer sets equilibrium
models ground disjunctive programs direct one:
Proposition 13 Let disjunctive logic program. hT, equilibrium model
answer set .
first shown Pearce (1997) basic equivalence later shown hold
general classes programs Pearce, P. de Guzman Valverde (2000).
common treat non-ground rules form (7) variables may appear.
variables thought universally quantified, corresponding translation logical formula would simply universal closure formula (8).
extreme, Ferraris, Lee Lifschitz (2007) provided new definition
stable model arbitrary first-order formulas. case property stable
model defined syntactically via second-order condition resembles parallel circumscription. However showed new notion stable model equivalent
equilibrium model defined first-order languages. sequel paper,
Lee, Lifschitz Palla (2008a) applied new definition made following refinements. stable models formula defined Ferraris et al. (2007) were,
answer sets formula Herbrand models formula stable
sense Ferraris et al. Using new terminology, follows general stable
models equilibrium models coincide, answer sets equivalent SNA-QHT
models equilibrium models.
two extremes many syntactically different kinds programs
considered several variations concept answer set proposed.
However main varieties display similar correspondence equilibrium logic.
merely necessary cases restrict attention specific kinds equilibrium models, e.g. Herbrand models, UNA-models SNA-models. important notice
correspondence extends many additional constructs introduced
934

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

ASP, cardinality weight constraints even general forms aggregates (Lee
& Meng, 2009). accommodated equilibrium logic translation
logical formulas.
ASP main emphasis finding answer sets answer
set solvers compute. Less attention placed implementing non-monotonic inference
relation query answering mechanism. However standard, skeptical concept
inference entailment associated answer set semantics. notion entailment
consequence programs answer set semantics query Q entailed
program Q true answer sets (Balduccini, Gelfond, & Nogueira, 2000).
Let us denote entailment consequence relation |AS . Evidently atoms true
answer set belong it. Conjunctions disjunctions handled
obvious way (Lifschitz, Tang, & Turner, 1999; Balduccini et al., 2000). Sometimes,
queries form a, logical notation a, explicitly dealt (Balduccini
et al., 2000). However seems keeping semantics regard formula
form true answer set true. Another way
express would say answer set satisfies violate
constraint { }, understanding constraint violation Lifschitz, Tang Turner (1999).9
way would say |AS answer set contains A. Similarly,
interpretation queries containing quantifiers answer set semantics conform
equilibrium logic, taking account specific restrictions, Herbrand
models, might imposed.
therefore transfer interpolation properties equilibrium logic answer set
semantics ASP. remains consider whether |AS best identified closed
world version inference, |cw , open world version, |ow . Again, since ASP
solvers generally implement inference engines, difference largely theoretical one. traditional logic programming, however, query belong
language program usually answered false. seems quite natural ASP
context that, given program query Q, one consider stable models
language L() L(Q) even proper extension language .10
general |cw seems natural choice answer set inference. hand,
contexts answer set semantics used open world setting, example
setting hybrid knowledge bases (Rosati, 2005) non-monotonic rules combined
ontologies formalised description logics. systems semantics terms
equilibrium logic provided de Bruijn, Pearce, Polleres Valverde (2007).
entailment relation style |ow might sometimes appropriate.
general answer set semantics defined coherent programs theories.
these, identifying |AS |cw , apply Proposition 9 directly:
Corollary 2 coherent formulas , (|, |)-interpolation form Proposition 9
holds entailment |AS answer set semantics.
9. logical terms constraint would written .
10. Notice Proposition 12 program consists safe formulas, atomic query q(a) automatically
false belong language program (even q does), simply grounding
program constants sufficient generate answer sets.

935

fiGabbay, Pearce, & Valverde

7. Application Interpolation
Interpolation property applied various areas computer science, notably
software specification (Bicarregui et al., 2001) construction formal ontologies (Lutz & Wolter, 2010). areas relevant modularity issues.
discuss simple application related concept described Lutz Wolter
adapt case nonmonotonic logic programs.
One way compare two theories via nonmonotonic consequence relations.
two theories produce answers given query language, call inseparable; term used mathematical logic study formal ontologies (Lutz
& Wolter, 2010).
Let us say therefore 1 2 L-inseparable V () L,
1 | 2 | .
Proposition 14 Let 1 2 L-inseparable theories V (1 ) = V (2 ) = V ,
say. L L V L L, 1 2 L -inseparable.
Proof. Assume 1 2 L-inseparable L extension L
V L L. Suppose 1 | , V () = L . Suppose L \ V = {B1 , . . . Bn }.
Proposition 7 interpolant (1 , ) |= B1 . . .Bn . Since
1 | V () L, L-inseparability 2 | . right absorption therefore
2 | B1 . . . Bn . However clear B1 , . . . Bn false equilibrium
models 2 , 2 | . Repeating argument 1 2 interchanged shows
theories L -inseparable.

proof similar argument given Lutz Wolter (2010) Theorem 7 paper, applied TBoxes description logics. property described
called robustness signature extensions. Notice however that, since |
general transitive cannot immediately infer 2 | | 2 | .
highlights added strength using explicitly set {B1 , . . . Bn } property
HT forms deductive basis |.
study modularity logical relations programs ASP,
common compare sets answer sets rather consequence classes. However
turns notion inseparability close concept already
studied ASP. Two theories programs said projectively equivalent
projections answer sets onto common sublanguage agree (Eiter, Tompits,
& Woltran, 2005). Formally, let 1 , 2 theories L signature L
V (1 ) V (2 ). 1 2 said projectively equivalent relative L
E(1 )L = E(2 )L , class models K, KL = {ML : K}.
Proposition 15 Let 1 , 2 theories L signature L V (1 ) V (2 ).
1 2 projectively equivalent relative L L-inseparable.
words two concepts agree whenever L common sublanguage 1 , 2 .
main advantage L-inseparability seems natural one use
want consider signatures extend language either program theory.
936

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

8. Uniform Interpolation Forgetting
stronger form interpolation known uniform interpolation important certain
applications computer science (Konev et al., 2009). usual, given , ,
interested interpolants
&

(9)

contains predicate constant symbols belong .
difference said uniform interpolant (9) holds
signature . logic said uniform interpolation property
uniform interpolants exist , .
classical propositional logic, uniform interpolation holds, however fails first
order classical logic many non-classical logics. may hold certain restrictions
placed theory language formulated query language
containing . example shown hold description logics (Kontchakov
et al., 2008) syntactic restrictions apply. Even ASP turns form
uniform interpolation holds restricted query language, essentially one allows
instance retrieval. show using known results ASP
concept forgetting (Eiter & Wang, 2008) quite closely related interpolation.
Variable forgetting, studied Eiter Wang (2008), concerned following
problem. Given disjunctive logic program certain atom occurring , construct
new program, denoted forget(, a), contain whose answer
sets respects close possible . precise notion
closeness reader referred paper Eiter Wang, however consequences
evident shortly. Eiter Wang define forget(, a) (as generic term), show
programs exist whenever coherent, provide different algorithms compute
programs.
Given coherent , results forget(, a), forgetting may
different always answer set equivalent. Moreover purposes satisfy
following key property, coherent, a, b distinct atoms usual |
denotes nonmonotonic consequence,
| b



forget(, a) | b.

(10)

showing indeed answer sets forget(, a) closely related.
establish version uniform interpolation case disjunctive programs
simple, atomic queries, need show always find = forget(, a)
| . examine first algorithm Eiter Wang computing
forget(, a); simplest three algorithms presented. Let coherent
program rules form (7) write formulas form (8) let atom
. method constructing = forget(, a) follows.
1. Compute equilibrium models E().
2. Let E result removing E().
3. Remove E model non-minimal form E (= {A1 , . . . , }, say).
937

fiGabbay, Pearce, & Valverde

4. Construct program whose answer sets precisely {A1 , . . . , } follows:
Ai , set = {Ai : Ai }, Ai = V () \ Ai .
Set = 1 . . . .
verify desired property. Let L simple query language composed
conjunctions literals.
Proposition 16 equilibrium logic (or answer set programming) uniform interpolation
holds (coherent) disjunctive programs queries L(V ()).
Proof. prove claim shall show following. Let coherent disjunctive
program let L = L(V ) V V (). program
V ( ) = V L,
| ( | & | )
begin, let | . Let X = {a1 , . . . , } = V () \ V .
choose result forgetting X , defined Eiter Wang (2008)
follows:
forget(, X) := forget(forget(forget(, a1 ), a2 ), . . . , ),
shown order atoms X matter. know
(10) atom V = 1, n,
| forget(, ai ) | a,

(11)

| forget(, X) | a.

(12)

therefore
Let forget(, X) determined algorithm 1 Eiter Wang (2008) described
above. easy see (11) semantics | (12) continues hold
replaced negated atom b therefore conjunction literals since
conjunction entailed element holds every equilibrium model.11 remains
show | . Again, suffice show entailment one member
sequence forget(, ai ) since order irrelevant wlog choose first element
forget(, a1 ) show | forget(, a1 ). compute programs 1 , . . . ,
algorithm. need check | = 1, n, i.e.
E(), |= {Ai : Ai }.
Consider E() = hT, i. distinguish two cases. (i) Ai .
|= Ai . follows |= Ai Ai
|= {Ai : Ai }. Case (ii) Ai 6 . Ai incomparable.
particular cannot Ai minimality property Ai obtained step 3.
Hence Ai 6= . Choose Ai . |= , 6|= hence 6|= Ai .
Consequently, , |= Ai |= {Ai : Ai }. follows
i, | construction | , establishes proposition.
11. Eiter Wang (2008) point out, atom b true answer set forget(, a),
must true answer set , showing (12) holds literals.

938

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

8.1 Extending Query Language
establish uniform interpolation ASP using method forgetting, defined
Eiter Wang (2008), seems clear cannot extend non-trivial way
expressive power query language L. Since method forgetting removes
non-minimal sets E() (once removed), atom b might true
equilibrium model equilibrium model forget(, a). Hence might
disjunction, say b, derivable forget(, a). Likewise,
consider programs variables first-order setting, cannot general extend L
include existential queries.
hand, property uniform interpolation certainly holds L(V )
even without condition V V (). Suppose | V () \ V () 6= ,
say V () \ V () = {b1 , . . . , bk }. b1 , . . . , bk false equilibrium models .
Trivially, b V () regard result forgetting b .
repeat proof Proposition 16, setting X = {V () \ V } {V \ V ()}.
relevant properties continue hold.
interesting open question whether extend theory language include
general kinds program rules allowing negation head. Accommodating kinds formulas would constitute important generalisation since
amount normal form equilibrium logic. However, answer sets programs
satisfy minimality property holds answer sets disjunctive programs,
clear definition forgetting would need appropriately modified -
task attempt here.

9. Literature Related Work
interpolation theorem classical logic due Craig (1957); extended intutionistic logic Schutte (1962). Maksimova (1977) characterised super-intuitionistic
propositional logics possessing interpolation. modern, comprehensive treatment interpolation modal intuitionistic logics found monograph Gabbay
Maksimova (2005).
non-monotonic logics, interpolation received little attention. notable exception
article (Amir, 2002) establishing interpolation properties circumscription
default logic. well-known relation answer sets disjunctive programs
extensions corresponding default theories, derives form interpolation
ASP. regard answer set semantics, approach Amir quite different
ours. Since founded analysis default logic, uses classical logic underlying
base. Amirs version interpolation form (3) L classical logic;
requirement L form well-behaved sublogic |, e.g. deductive base. Amir
remarks, one cannot deduce general property (4) | . However L classical
logic one cannot even deduce | (3). generally, counterpart
Proposition 1 case. Another difference respect approach
Amir discuss nature | relation ASP detail, particular
understand | case contains atoms present program . fact,
interpret |AS Section 6 above, easy refute (|, L )-interpolation L
classical logic. Let program B q query B C. clearly
939

fiGabbay, Pearce, & Valverde

|AS q, formula vocabulary B would classically entail C.
interpretation answer set inference atoms program
regarded false, (|, L )-interpolation would refuted.

10. Conclusions
discussed two kinds interpolation properties non-monotonic inference relations shown properties hold turn two different inference relations
associate propositional equilibrium logic. case use fact
collection equilibrium models definable logic HT here-and-there
logic possesses usual form interpolation. One forms inference studied
seems many cases appropriate concept associate answer set programming, although general ASP systems tailored query answering deduction.
Using results Eiter Wang (2008) variable forgetting ASP, could show
property uniform interpolation holds disjunctive programs restricted
query language.
discussed interpolation property first-order equilibrium logic based
quantified version QHT logic here-and-there, obtaining analogous results
propositional case whenever collection equilibrium models definable.
positive results transfer answer set programming assumption usually made
ASP systems programs safe therefore definable collections answer sets.
saw, notion safety quite generally defined theories limited
normal disjunctive programs.

Acknowledgments
David Pearce partially supported MEC projects TIN2009-14562-C05-02 CSD200700022. Agustn Valverde partially supported MEC project TIN2009-14562-C05-01,
Junta de Andalucia projects P09-FQM-05233 TIC-115. authors grateful
anonymous referees helpful comments.

References
Amir, E. (2002). Interpolation theorems nonmonotonic reasoning systems.. Proceedings NMR02, pp. 4150.
Balduccini, M., Gelfond, M., & Nogueira, M. (2000). A-prolog tool declarative
programming. Proc. SEKE 2000).
Baral, C. (2003). Knowledge Representation, Reasoning Declarative Problem Solving.
Cambridge University Press.
Bicarregui, J., Dimitrakos, T., Gabbay, D. M., & Maibaum, T. S. E. (2001). Interpolation
practical formal development. Logic Journal IGPL, 9 (2).
Bria, A., Faber, W., & Leone, N. (2008). Normal form nested programs. Holldobler, S.,
Lutz, C., & Wansing, H. (Eds.), Proc. JELIA08, Vol. 5293 LNCS, pp. 7688.
Springer.
940

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

Cabalar, P., Pearce, D., & Valverde, A. (2009). revised concept safety general answer
set programs. Erdem, E., Lin, F., & Schaub, T. (Eds.), Proc. LPNMR09, Vol.
5753 LNCS, pp. 5870. Springer.
Craig, W. (1957). Linear reasoning. new form herbrand-gentzen theorem.. J. Symb.
Logic, 22, 250268.
de Bruijn, J., Pearce, D., Polleres, A., & Valverde, A. (2007). Quantified equilibrium logic
hybrid rules. Marchiori, M., Pan, J. Z., & de Sainte Marie, C. (Eds.), Proc.
RR07, Vol. 4524 LNCS, pp. 5872. Springer.
Diaconescu, R., Goguen, J., & Stefaneas, P. (1993). Logical support modularisation.
Logical Environments, pp. 83130. Cambridge University Press.
Dietrich, J. (1994). Deductive bases nonmonononic inference operations. Ntz report,
University Leipzig.
Eiter, T., Tompits, H., & Woltran, S. (2005). solution correspondences answer-set
programming.. Kaelbling, L. P., & Saffiotti, A. (Eds.), Proc. IJCAI05, pp.
97102. Professional Book Center.
Eiter, T., & Wang, K. (2008). Semantic forgetting answer set programming. Artificial
Intelligence, 172 (14), 16441672.
Ferraris, P. (2008). Logic programs propositional connectives aggregates. CoRR,
abs/0812.1462.
Ferraris, P., Lee, J., & Lifschitz, V. (2007). new perspective stable models. Veloso,
M. M. (Ed.), Proc. IJCAI07, pp. 372379.
Gabbay, D. M., & Maksimova, L. (2005). Interpolation Definability: Modal Intuitionistic Logic. Oxford University Press, USA.
Gelder, A. V., Ross, K. A., & Schlipf, J. S. (1991). well-founded semantics general
logic programs. Journal ACM, 38 (3), 620650.
Gelfond, M., & Lifschitz, V. (1988). stable model semantics logic programming.
Kowalski, R. A., & Bowen, K. (Eds.), Proc. ICLP88, pp. 10701080. MIT
Press.
Gelfond, M., & Lifschitz, V. (1990). Logic programs classical negation. Warren,
David H.D.; Szerdei, P. (Ed.), Proc. ICLP90, pp. 579597. MIT Press.
Gelfond, M., & Lifschitz, V. (1991). Classical negation logic programs disjunctive
databases. New Generation Computing, 9, 365385.
Konev, B., Walther, D., & Wolter, F. (2009). Forgetting uniform interpolation largescale description logic terminologies. Boutilier, C. (Ed.), Proc. IJCAI09, pp.
830835.
Kontchakov, R., Wolter, F., & Zakharyaschev, M. (2008). tell difference
dl-lite ontologies?. Brewka, G., & Lang, J. (Eds.), Principles Knowledge
Representation Reasoning: Proc. KR08, pp. 285295. AAAI Press.
Kunen, K. (1987). Negation logic programming. Journal Logic Programming, 4 (4),
289308.
941

fiGabbay, Pearce, & Valverde

Lee, J., Lifschitz, V., & Palla, R. (2008a). reductive semantics counting choice
answer set programming. Fox, D., & Gomes, C. P. (Eds.), Proc. AAAI08, pp.
472479. AAAI Press.
Lee, J., Lifschitz, V., & Palla, R. (2008b). Safe formulas general theory stable
models (preliminary report). de la Banda, M. G., & Pontelli, E. (Eds.), Proc.
ICLP08, Vol. 5366 LNCS, pp. 672676. Springer.
Lee, J., & Meng, Y. (2009). reductive semantics aggregates answer set programming. Erdem, E., Lin, F., & Schaub, T. (Eds.), Proc. LPNMR09, Vol. 5753
LNCS, pp. 182195. Springer.
Lifschitz, V., Pearce, D., & Valverde, A. (2001). Strongly equivalent logic programs. ACM
Transactions Computational Logic, 2 (4), 526541.
Lifschitz, V., Pearce, D., & Valverde, A. (2007). characterization strong equivalence
logic programs variables. Baral, C., Brewka, G., & Schlipf, J. S. (Eds.),
Proc. LPNMR07, Vol. 4483 LNCS, pp. 188200. Springer.
Lifschitz, V., Tang, L. R., & Turner, H. (1999). Nested expressions logic programs. Annals
Mathematics Artificial Intelligence, 25 (34), 369389.
Lutz, C., & Wolter, F. (2010). Deciding inseparability conservative extensions
description logic el. Journal Symbolic Computation, 45 (2), 194228.
Maher, M. J. (1988). Equivalences logic programs. Foundations Deductive Databases
Logic Programming., pp. 627658. Morgan Kaufmann.
Makinson, D. (1994). General patterns nonmonotonic reasoning, pp. 35110. Oxford
University Press, Inc.
Maksimova, L. (1997). Interpolation superintuitionistic predicate logics equality.
Algebra Logic, 36, 543561.
Maksimova, L. (1998). Interpolation superintuitionistic modal predicate logics
equality. M.Kracht, de Rijke, M., Wansing, H., & Zakharyaschev, M. (Eds.), Advances Modal Logic, Vol. I, pp. 133141. CSLI Publications.
Maksimova, L. (1977). Craigs interpolation theorem amalgamable varieties. Doklady
Akademii Nauk SSSR, 237 (6), 12811284.
McMillan, K. L. (2005). Applications craig interpolants model checking. Halbwachs,
N., & Zuck, L. D. (Eds.), Proc. TACAS05, Vol. 3440 LNCS, pp. 112. Springer.
Ono, H. (1983). Model extension theorem craigs interpolation theorem intermediate
predicate logics. Reports Mathematical Logic, 15, 4158.
Pearce, D. (1997). new logical characterization stable models answer sets. Dix,
J., Pereira, L. M., & Przymusinski, T. C. (Eds.), Proc. NMELP96, Vol. 1216
LNCS, pp. 5770. Springer.
Pearce, D. (2006). Equilibrium logic. Annals Mathematics Artificial Intelligence,
47 (1-2), 341.
Pearce, D., de Guzman, I. P., & Valverde, A. (2000). Computing equilibrium models using
signed formulas. Proc. CL2000, Vol. 1861 LNCS, pp. 688703. Springer.
942

fiInterpolable Formulas Equilibrium Logic Answer Set Programming

Pearce, D., & Valverde, A. (2005). first order nonmonotonic extension constructive
logic. Studia Logica, 80 (2-3), 321346.
Pearce, D., & Valverde, A. (2006). Quantified equilibrium logic. Technical report, Universidad Rey Juan Carlos. (http://www.matap.uma.es/investigacion/tr/ma06_02.
pdf).
Pearce, D., & Valverde, A. (2008). Quantified equilibrium logic foundations answer
set programs. de la Banda, M. G., & Pontelli, E. (Eds.), Proc. ICLP08, Vol.
5366 LNCS, pp. 546560. Springer.
Pearce, D., & Valverde, A. (2012). Synonymous theories knowledge representations
answer set programming. Journal Computer System Sciences, 78, 86104.
Rosati, R. (2005). Semantic computational advantages safe integration ontologies rules. Fages, F., & Soliman, S. (Eds.), Proc. PPSWR05, Vol. 3703
LNCS, pp. 5064. Springer.
Schutte, K. (1962). Der interpolationsatz der intuitionistischen pradikatenlogik.. Math.
Ann., 148, 192200.
van Dalen, D. (1997). Logic Structure (3th edition). Springer.

943


