Journal Artificial Intelligence Research 37 (2010) 479-525

Submitted 12/09; published 03/10

Multiattribute Auctions Based Generalized Additive
Independence
Yagil Engel

yagile@ie.technion.ac.il

Technion - Israel Institute Technology
Faculty Industrial Engineering & Management
Technion City, Haifa 32000, Israel

Michael P. Wellman

wellman@umich.edu

University Michigan
Division Computer Science & Engineering
2260 Hayward St, Ann Arbor, MI 48109-2121, USA

Abstract
develop multiattribute auctions accommodate generalized additive independent
(GAI) preferences. propose iterative auction mechanism maintains prices
potentially overlapping GAI clusters attributes, thus decreases elicitation computational burden, creates open competition among suppliers multidimensional
domain. significantly, auction guaranteed achieve surplus approximates optimal welfare small additive factor, reasonable equilibrium strategies
traders. main departure GAI auctions previous literature accommodate non-additive trader preferences, hence allowing traders condition evaluation
specific attributes value attributes. time, GAI structure
supports compact representation prices, enabling tractable auction process. perform simulation study, demonstrating quantifying significant efficiency advantage
expressive preference modeling. draw random GAI-structured utility functions
various internal structures, generate additive functions approximate GAI
utility, compare performance auctions using two representations.
find allowing traders express existing dependencies among attributes improves
economic efficiency multiattribute auctions.

1. Introduction
Multiattribute trading mechanisms extend traditional, price-only mechanisms facilitating negotiation set predefined attributes representing various non-price aspects
deal. Rather negotiate fully specified good service, multiattribute
mechanism delays commitment particular configurations extracts sufficient information traders preferences. example, companys procurement department may
run multiattribute auction select supplier hard drives. Supplier offers may
evaluated price offer, features volume, RPM,
access time, latency, transfer rate, on. addition, suppliers may offer contracts
differing terms warranty, delivery time, service.
order account traders preferences, auction mechanism must extract evaluative information complex domain multidimensional configurations. Constructing
communicating complete preference specification pose severe burden even

c
!2010
AI Access Foundation. rights reserved.

fiEngel & Wellman

moderate number attributes, hence practical multiattribute auctions must either accommodate partial specifications, support compact expression preferences assuming
simplified form. far popular multiattribute form adopt simplest:
additive representation overall value linear combination values associated
attribute. example, several recent proposals iterative multiattribute auctions
(Beil & Wein, 2003; Bichler, 2001; David, Azoulay-Schwartz, & Kraus, 2002; Parkes &
Kalagnanam, 2005) require additive preference representations.
additivity reduces complexity preference specification exponentially (compared general discrete case), precludes expression interdependencies among
attributes. practice, however, interdependencies among natural attributes quite
common. example, hard-drive buyer may exhibit complementary preferences
volume access time (since performance effect salient much data involved), may view strong warranty good substitute high reliability ratings.
Similarly, sellers production characteristics easily violate additivity, example
decreasing access time technically difficult higher-capacity drives. cases
additive value function may able provide adequate approximation real
preferences.
hand, fully general models intractable, multiattribute preferences
typically exhibit structure. goal, therefore, identify subtler yet
widely applicable structured representations, exploit properties preferences
trading mechanisms.
propose iterative auction mechanism based flexible preference
structure. approach inspired design iterative multiattribute procurement
auction additive preferences, due Parkes Kalagnanam (2005) (PK). PK present
two auction designs: first (NLD) makes assumptions traders preferences,
lets sellers bid full multidimensional attribute space. NLD maintains
exponential price structure, suitable small domains. auction (AD)
assumes additive buyer valuation seller cost functions. collects sell bids per attribute
level single discount term. price configuration sum prices
chosen attribute levels minus discount.
auction propose supports compact price spaces, albeit levels clusters attributes rather singletons. employ preference decomposition based
generalized additive independence (GAI), model flexible enough accommodate interdependencies exact degree accuracy desired, yet providing compact functional
form extent interdependence limited.
First, build direct, formally justified link preference statements priced
outcomes generalized additive decomposition willingness-to-pay (wtp) function.
laying infrastructure, employ representation tool development
multiattribute iterative auction mechanism allows traders express complex
preferences GAI format. study auctions allocational, computational,
practical properties. Next, present simulation study proposed auction mechanism, order practically evaluate economic computational properties GAI
auctions. simulate auctions using random GAI utility functions, including
based constrained preference structures often exhibited applications. simulations
let us quantify benefits modeling preferences accurately using GAI, comparison
480

fiGAI Auctions

using additive approximation. show circumstances, GAI auction
achieves significantly higher surplus auction uses additive approximation
preferences.
providing background multiattribute preferences multiattribute auctions
(Section 2), develop new multiattribute structures wtp functions, supporting generalized additive decompositions (Section 3). describe auction mechanism Section 4,
followed detailed example Section 5, study mechanisms allocational, computational, practical properties Section 6. present simulation framework
Section 7, discuss experimental results Section 8.

2. Background
section provide essential background multiattribute preferences (Sections 2.1
2.2) multiattribute auctions (Section 2.3).
2.1 Multiattribute Preferences Utility
Let denote space possible outcomes, ! preference relation (weak total order)
. Let = {a0 , . . . , }!be set attributes describing . attribute
domain D(a), ni=1 D(ai ). Capital letters denote subsets attributes, small
latin letters (with without numeric subscripts) denote specific attributes, X = A\X.
(and variations " ) indicate specific outcome . instantiation subset
attributes denoted using prime signs (as " ) numerical superscript (as 1 ).
particular, " projection instantiations . represent
instantiation subsets X, time use sequence instantiation symbols,
X 1 2 .
preference relation ! outcomes usually represented numerically value
function v() (Keeney & Raiffa, 1976).
Definition 1 (Value Function). v : % value function representing !
, " , v() v( " ) iff ! " .
Clearly, monotonic transformation v() value function !.
many cases useful represent, beyond simple preference order outcomes,
notion strength preferences. value function expresses strength preferences
called cardinal value function. measurable value function well-established cardinal
pairs outcomes.
value framework posits existence preference order !
"
"
"
"

! ! , statement (, ) ! (, ) means strength
preference " greater equal " . Krantz, Luce, Suppes,
Tversky (1971) establish set axioms ensuring existence utility function

representing !.
Definition 2 (Measurable Value Function). measurable value function (MVF)
value function u : %, , " , , " , ! " ! " ,
following holds:
(, " ).
u( " ) u() u( " ) u() (, " ) !
(1)

481

fiEngel & Wellman

Hence order differences values u() correspond exactly order
preference differences. Note MVF used value function representing
( "" , ) iff " ! "" , .
!, ( " , ) !
auction theory mechanism design, traders preferences usually represented
using quasi-linear value function, v(, p) = u()+p, p represents monetary
outcome.1 cardinal value function u() expresses strength preference,
difference u( " ) u( "" ) corresponds additional amount trader willing pay
" relative "" . example, " represents red Mercedes sunroof, ""
denotes blue Subaru sunroof, u( " ) u( "" ) strength preference
Mercedes configuration Subaru. Mercedes costs p" Subaru p"" ,
according v(, p) trader prefers Mercedes deal iff u( " ) u( "" ) p" p"" .
fact, u() easily shown MVF, preference differences correspond differences willingness-to-pay (Engel & Wellman, 2007). reason,
use MVF basis utility work, assume traders willingness-to-pay
(wtp) functions constitute MVF.
Reasoning full outcomes hard several ways. notably, difficult
humans compare outcomes many dimensions, complex machines store
analyze preferences number outcomes exponential number
attributes. therefore useful consider preferences joint product
A, considering rest attributes fixed predefined values.
order often referred ceteris paribus preference orderone partial outcome
preferred another else equal.
Definition 3 (Conditional Preference). Partial outcome 2 conditionally preferred
"
"
"
partial outcome 1 given , 1 ! 2 . conditional preference order
"
"
"
given denoted !Y ! , hence 1 ! 2 abbreviated 1 !Y ! 2 .
general, conditional preferences may depend particular assignment chosen
rest attributes. precisely, 1 ! 2 , could still find 2 !! 1
""
"
,= . case, one needs maintain conditional preference
orders !Y ! !Y !! , hence general scheme might yield computational
benefits. Fortunately, many cases one identify subsets preference
reversal occur, preference order invariant instantiation
.
Definition 4 (Preferential Independence). preferential independent (PI) ,
"
""
written PI(Y, ), 1 2 , , , 1 !Y ! 2 iff 1 !Y !!
2.
First-order preferential independence (FOPI), independence single attribute
rest, natural assumption many domains. example, typical purchase decisions greater quantity higher quality desirable regardless assignments
attributes. Preferential independence higher order, however, requires invariance
tradeoffs among attributes respect variation others, stringent independence condition. MPI condition, defined below, global set
attributes A, requires possible subsets PI.
1. use term trader referring either buyers sellers.

482

fiGAI Auctions

Definition 5 (Mutual Preferential Independence). Attributes mutually preferential independent (MPI) iff A, P I(Y, ).
Preferential independence greatly simplify form v.
Theorem 1 (Debreu, 1959). preference order set attributes represented
additive value function
v(a1 , . . . , ) =

n
"

vi (ai ),

i=1

iff mutually preferential independent.
Dyer Sarin (1979) extend additivity theory MVF, specify conditions
u() well additive structure above. Effectively, additive forms
used trading mechanisms assume MPI full set attributes, including money
attribute. Intuitively means willingness-to-pay levels attribute attributes
cannot affected instantiation attributes. sweeping condition rarely
holds practice (Von Winterfeldt & Edwards, 1986). Therefore, recent AI literature often
relaxes MPI assumption imposing additivity respect subsets attributes
may overlap.
Definition 6 (Generalized Additive
Independence). Let I1 , . . . , Ig (not necessarily
#
disjoint) subsets A, gi=1 Ii = A. elements I1 , . . . , Ig called generalized
additive independent (GAI) exist functions f1 , . . . , fg that,
u(a1 , . . . , ) =

g
"

fr (Ir ).

(2)

r=1

2.2 Related Work Generalized Independence
definition GAI somewhat nonstandard. literature defines GAI condition
expected utility function (von Neumann & Morgenstern, 1944). well-known
model, particular choice results lottery, probability distribution outcomes. expected utility function represents complete preference order lotteries.
Informally, GAI definition requires preferences lotteries depend
margins subsets I1 , . . . , Ig . form Eq. (2) result definition,
obtained Fishburn (1967). Fishburn introduces functional decomposition,
provides well-defined form functional constituents f1 , . . . , fg . Graphical
models elicitation procedures GAI decomposable utility developed within
expected utility framework (Bacchus & Grove, 1995; Boutilier, Bacchus, & Brafman, 2001;
Gonzales & Perny, 2004; Braziunas & Boutilier, 2005). addition, generalized additive
utility models employed Hyafil Boutilier (2006) aid direct revelation mechanisms, Robu, Somefun, La Poutre (2005) opponent modeling
bilateral multi-item negotiation.
Bacchus Grove (1995), fact coined term GAI, show decomposition obtained result collection local, easier detect, binary
483

fiEngel & Wellman

independence conditions. specifically, rely form called conditional additive
independence, which, informally, corresponds GAI decomposition limited two (overlapping) subsets X A. prove condition expressed
separation criterion graph whose nodes correspond A, means perfect
map (Pearl, 1988). Crucially, utility function decomposes GAI form lower dimensional functions, defined maximal clique graph. combined
Fishburns work, result provides well-defined functional form obtained
collection conditional additive independence conditions. result relies
form lotteries basis utility function independence conditions.
expression willingness-to-pay requires cardinal measure preferences, yet
without uncertainty, need expected utility representation. therefore
invoke MVF framework, Section 3, build additive decompositions MVF
developed Dyer Sarin (1979) develop multiattribute preference structures wtp.
development enables us follow footsteps Fishburn (1967) Bacchus
Grove (1995) show well-defined GAI form MVF obtained using
collection easy-to-detect binary independence conditions.
2.3 Multiattribute Auctions
distinguishing feature multiattribute auction goods defined
vectors attributes. above, use denote set attributes describing domain
. configuration particular attribute vector, . Multiattribute auctions used
primarily procurement, part strategic sourcing processes (Sandholm, 2007).
procurement model single buyer, utility function (representing
willingness-to-pay) ub () purchasing . sellers s1 , . . . , sm utility
functions ci : %, representing cost si supply configurations buyer.
Definition 7 (Multiattribute Allocation Problem). multiattribute allocation problem (Parkes & Kalagnanam, 2005) is:
MAP =

max

i{1,...,m},

ub () ci ().

(3)

allocation (si , ) solving MAP said maximize surplus procurement
problem.
MAP decomposed two subproblems: first find efficient configuration
trader, find trader whose efficient configuration yields highest
surplus. call first part multiattribute matching problem (Engel, Wellman, &
Lochner, 2006).
Definition 8 (Multiattribute Matching Problem). multiattribute matching problem (MMP) buyer b seller si is:
MMP(b, si ) = arg max ub () ci ().


call configuration selected MMP(b, si ) bilaterally efficient configuration
si .
484

fiGAI Auctions

theoretical work surplus-maximizing multiattribute auctions relates
way foundational work Che (1993). Ches model, good service
characterized single quality attribute, seller independent private
cost function quality. buyer announces scoring rule sellers,
price-quality offers evaluated. Che suggests several types auctions, including
second-score auction, seller bidding highest score wins, must provide
combination price quality achieves second-best score. second-score
mechanism, bidding truthfully equilibrium dominant strategies. particular, Che
shows sellers bid quality maximizes difference buyers
scoring rule cost function; words, respective MMP solution.
Branco (1997) generalizes Ches model results correlated costs.
basic model later generalized several authors account explicitly multiple quality attributes, usually restricting scoring rule additive
attributes (Bichler, 2001; David et al., 2002). Vulkan Jennings (2000) suggest modified version English auctions (iterative auctions require new bids increment
current bid price) bidders required improve current score, rather
price. Sandholm Suri (2006) consider incorporation non-price attributes
multi-item (combinatorial) auctions.
literature surveyed emphasizes auctions require buyer reveal
scoring function prior bidding. order achieve economic efficiency, scoring
function must convey buyers full utility function ub (). major obstacle
practical adaption mechanisms. Procurement auctions rarely isolated event,
buyer-supplier relationships usually evolve change time,
suppliers may retain market power, take advantage information revealed
buyer. Events sometimes conducted recurrent basis, several events may
conducted related goods correlated valuations. addition, buyer may wish
keep secret way utility may discriminating particular suppliers
(Koppius, 2002).
noted Section 1, Parkes Kalagnanam (2005) suggest alternative approach,
employs prices space configurations drive traders efficient configurations. Auction NLD maintains price , sellers bid full
configuration round. Auction AD maintains price level a"i D(ai ). Prices
initially set high. round, sellers bid particular value attribute,
auction selects set levels (again, per attribute) myopically buyer preferred round, is, approximately maximize buyers utility respect
current prices. addition, auction maintains discount factor applied ensure
single seller eventually selected. price configuration defined sum
prices chosen attribute levels minus discount. round, prices
particular levels particular attributes decremented constant ", according set
price change rules, ensuring auction ultimately converges efficient solution.
auctions shown obtain optimal surplus (up "-proportional error),
sellers bid myopically rather strategically (we define concept formally Section 6.1). myopic behavior shown ex-post Nash equilibrium. Auction NLD
fully expressive tractable number attributes large. Auction AD
computationally efficient, expressiveness limited additive preferences (see
485

fiEngel & Wellman

discussion following Theorem 1). traders preferences additive, welfare
achieved auction necessarily optimal; is, solve MAP optimally,
respect inaccurate utility functions. Moreover, clear lack
expressiveness may affect incentives traders act strategically.
Theoretically, one could use well-known Vickrey-Clake-Grove (VCG) mechanism. Parkes Kalagnanam define sell-side VCG mechanism: traders submit
full utility cost functions, MAP solved auction engine, winning
seller pays according VCG price (definition pricing provided Section 6.1).
auction, traders allowed use compact preference structure, including GAI. However, scheme suffers disadvantages proposals
require full revelation utility.
summarize, previously suggested surplus-maximizing multiattribute procurement
auction time expressive (accommodates interdependencies attributes),
tractable (its computations depend fully exponential domain), preserving
buyers private information, meaning (minimally) require buyer
reveal full utility function extracting bids sellers. proposed mechanism, show theoretically using simulations, possesses attractive properties
criteria.

3. Detection GAI Structure Measurable Value Functions
section provide basis application GAI decomposition procurement
problems. Section 3.1 show GAI obtained collection local, weaker
conditions based invariance willingness-to-pay. Section 3.2 use
example demonstrate process used procurement problems.
3.1 Difference Independence GAI
Dyer Sarin (1979) introduce measurable value analog additive independence,
called difference independence. first step introduce conditional generalization
definition.
Definition 9 (Conditional Difference Independence). Let X, X = ,
define Z = \ X . X conditionally difference independent , denoted
CDI(X, ), Z " D(Z), X 1 , X 2 D(X), 1 , 2 D(Y ),
(X 1 1 Z " , X 2 1 Z " )
(X 1 2 Z " , X 2 2 Z " ),

(4)

1 hold.
symbol
indicates !
definition MVFs (1), CDI condition (4) expressed equivalently
terms measurable value:
u(X 1 1 Z " ) u(X 2 1 Z " ) = u(X 1 2 Z " ) u(X 2 2 Z " )
condition states value, willingness-to-pay, change assignment
X depend current assignment , fixed value Z.
CDI condition leads convenient decomposition MVF.
486

fiGAI Auctions

Lemma 2. Let u(A) MVF representing preference differences, X, Y, Z specified Definition 9. CDI(X, ) iff
u(A) = u(X 0 , Y, Z) + u(X, 0 , Z) u(X 0 , 0 , Z),
arbitrary instantiations X 0 , 0 .
single CDI condition, therefore replace n-ary function u(X, Y, Z)
two lower-dimensional functions u(X 0 , Y, Z) u(X, 0 , Z). reasonable assume
one apply CDI conditions decompose resulting functions.
order take full advantage existing CDI conditions, introduce notion
dependency graph, simplification concept perfect map mentioned
Section 2.2.
Definition 10 (Dependency Graph). Let denote set, R binary relation
2S . graph G = (S, E) dependency graph R S1 , S2 S, holds
(S1 , S2 ) R iff a1 S1 a2 S2 , (a1 , a2 )
/ E.
Hence dependency graph expresses R separation criterion; two subsets
direct connection iff R. dependency graph CDI constructed
simply removing edge (a1 , a2 ) CDI({a1 }, {a2 }); CDI(S1 , S2 )
holds iff CDI({a1 }, {a2 }) holds a1 S1 a2 S2 . use term CDI map
dependency graph induced CDI relation.
next theorem links CDI condition, CDI map, GAI decomposition
A. fact, establishes functional constituents GAI decomposition
MVF functional constituents GAI decomposition expected
utility model, defined Fishburn (1967). adopt following conventional notation.
Let (a01 , . . . , a0n ) predefined vector called reference outcome. A,
function u([I]) stands projection u(A) rest attributes
fixed reference levels.
Theorem 3 (CDI-GAI Theorem). Let G = (A, E) CDI map A, {I1 , . . . , Ig }
set (overlapping) maximal cliques G.
u(A) =

g
"

fr (Ir ),

(5)

r=1


f1 = u([I1 ]),
r = 2, . . . , g,

fr = u([Ir ]) +

r1
"

(6)
(1)j

j=1

"
1i1 <<ij <r

u([

j
$

Iis Ir ]).

s=1

small example, Table 1 exhibits utility function u(x1 , x2 , x3 ). three
attributes boolean domain, D(xi ) = {0, 1}. Let x0i x1i denote assignments 0 1 (respectively) xi . first observe CDI({x1 }, {x3 }) holds because:2
2. Note x02 x12 correspond Z ! Definition 9.

487

fiEngel & Wellman

x1
0
1
0
1
0
1
0
1

x2
0
0
1
1
0
0
1
1

x3
0
0
0
0
1
1
1
1

u(x1 , x2 , x3 )
0
5
2
6
3
8
7
11

u(x1 , x2 , x03 )
0
5
2
6
0
5
2
6

u(x01 , x2 , x3 )
0
0
2
2
3
3
7
7

u(x01 , x2 , x03 )
0
0
2
2
0
0
2
2

u1 (I1 )
0
5
2
6
0
5
2
6

u2 (I2 )
0
0
0
0
3
3
5
5

Table 1: utility function three attributes, decomposable via GAI sum two
functions two attributes each. u1 () depends {x1 , x2 } u2 () depends
{x2 , x3 }.

1. utility difference values x1 given x02 5, x03 x13 . explicitly,
u(x11 , x02 , x03 ) u(x01 , x02 , x03 ) = 5 0 = 5, u(x11 , x02 , x13 ) u(x01 , x02 , x13 ) = 8 3 = 5.
2. Similarly, difference x1 given x12 4, x03 x13 .
Though x1 x3 CDI other, see depend x2 . example,
differences mentioned x1 5 4 given x02 x12 (respectively), hence
difference x1 given fixed x3 depends value x2 . CDI map example
therefore includes edge (x1 , x2 ) edge (x2 , x3 ). maximal cliques graph
I1 = {x1 , x2 } I2 = {x2 , x3 }.
obtain numeric decomposition, first define (x01 , x02 , x03 ) reference values.
Next, (6), get u1 (I1 ) = u([I1 ]) = u(x1 , x2 , x03 ) u2 (I2 ) = u([I2 ]) u([I1 I2 ]) =
u(x01 , x2 , x3 ) u(x01 , x2 , x03 ). functions involved given Table 1. Note
fifth sixth columns obtained appropriate values fourth column;
example, u(x01 , x2 , x3 ) line x1 = 1, x2 = 1, x3 = 0 value u(x1 , x2 , x3 ) line
x1 = 0, x2 = 1, x3 = 0. easy verify indeed u(x, y, z) = u1 (I1 ) + u2 (I2 ).
CDI-GAI Theorem provides operational form GAI, establishing GAI
decomposition obtained collection simple CDI conditions. assumption detection CDI conditions performed incrementally, MVF
decomposed reasonable dimension. CDI conditions, turn, based
invariance preference differences, relatively intuitive detect. particularly
true differences carry direct interpretation, case willingness-to-pay:
check invariance monetary amount buyer willing pay get one outcome
other.
GAI decomposition depicted graphically using clique graph CDI
map, is, graph whose nodes correspond maximal cliques CDI map.
purposes convenient use particular clique graph called tree decomposition (or
junction tree). introduce well-known concept, discuss implications GAI
representation.
Definition 11 (Tree Decomposition). tree decomposition graph G = (N, E)
pair (T, I), = (, E) acyclic graph, = {Ii | } collection
488

fiGAI Auctions

term
MAP
MMP
MVF
PI
FOPI
MPI
GAI
CDI
CDI map
GAI tree

Meaning
Multiattribute Allocation Problem
Multiattribute Matching Problem
Measurable Value Function
Preferential Independence
First-Order Preferential Independence
Mutual Preferential Independence
Generalized Additive Independence
Conditional Difference Independence
graph whose separation criterion CDI
tree decomposition CDI map

Reference
(Parkes & Kalagnanam, 2005)
(Engel et al., 2006)
(Dyer & Sarin, 1979)
(Keeney & Raiffa, 1976)
(Keeney & Raiffa, 1976)
(Bacchus & Grove, 1995)
cf. (Bacchus & Grove, 1995)
cf. (Gonzales & Perny, 2004)

Table 2: Acronym terms, references related literature. Empty references indicate
terms introduced work. terms arranged according topics: (i) multiattribute economic problems, (ii) independence relations, (iii) graphical concepts.
#
subsets N , corresponding node , (i) iI Ii = N , (ii) edge
(n1 , n2 ) E, exists Ii n1 , n2 Ii , (iii) (running intersection)
i, j, k , j path k Ii Ik Ij .
graph tree-decomposed, typically one way. example,
single node I. width tree decomposition maxiI |Ii | 1,
treewidth graph minimum width among possible tree decompositions.
easy show maximal clique G contained within I. Therefore, Theorem 3, utility function decomposes additively subsets = {Ii |
}, = (, E) tree decomposition CDI map. notion GAI tree
adapted work Gonzales Perny (2004), introduce GAI graphical models
expected utility framework.
Definition 12 (GAI Tree). GAI tree u() tree decomposition CDI map
u().
therefore refer elements I1 , . . . , Ig GAI decomposition set
tree decomposition. next subsection provides qualitative example CDI concept,
dependency graph, corresponding GAI tree.
results section lay foundations using GAI decomposition
multiattribute trading mechanisms. results generalize additive MVF theory, justify
application methods developed expected utility framework (Bacchus &
Grove, 1995; Boutilier et al., 2001; Gonzales & Perny, 2004; Braziunas & Boutilier, 2005)
representation monetary value certainty. Table 2 summarizes acronym
terminology introduced point.
3.2 Employing GAI Procurement
section demonstrate process obtaining GAI decomposition
collection CDI conditions. addition, example used motivate approach
489

fiEngel & Wellman

comparison work Parkes Kalagnanam (2005). Consider procurement
department wishes purchase new hard drives (HD) desktops large
number employees. buyer cares several characteristics (attributes) hard
drives particular terms procurement contract. attribute listed
designated attribute name (the first letter), domain. cases (e.g., attribute
I) use arbitrary symbols represent domain elements, abstracting meaningful
interpretation assumed context.
RPM (R) 3600, 4200, 5400 RPM
Transfer rate (T) 3.4, 4.3, 5.7 MBS
Volume (V) 60, 80, 120, 160 GB
Supplier ranking (S) 1, 2, 3, 4, 5
Quality rating (Q) (of HD brand) 1, 2, 3, 4, 5
Delivery time (D) 10, 15, 20, 25, 30, 35 days
Warranty (W) 1, 2, 3 years
Insurance (I) (for case deal signed implemented) 1 , 2 , 3
Payment timeline (P) 10, 30, 90 days
Compatibility (C) (with existing hardware software) 1 , 2 , 3
Consider, example, pair attributes Quality Warranty. value warranty different different values quality; higher quality known
low, lower quality known high. two attributes therefore depend other. Furthermore, might expect Volume complements Quality
Warranty. Larger hard drives prone failures, making quality warranty valuable. Similarly, interdependence Supplier ranking
contract insurance buy, Supplier ranking warranty supplier provides. reasonable dependencies among Delivery, Insurance, Payment timeline
(e.g., later delivery requires better insurance, later payment reduces need insurance),
Volume RPM Transfer rate. Preferences compatibility may
depend attribute. corresponding CDI map depicted Figure 1a.
described Section 2.1, utility function decomposes elements tree
decomposition CDI map. tree decomposition depicted Figure 1b.
example set elements tree decomposition correspond exactly maximal
cliques CDI map. general tree decomposition might include supersets
maximal cliques, decomposition obviously maintained supersets
well.
Non-additive traders, required deal additive price space auction
AD (Parkes & Kalagnanam, 2005), face exposure problem, somewhat analogous traders
combinatorial preferences participate simultaneous auctions (Wellman, Osepayshvili, MacKie-Mason, & Reeves, 2008). Essentially, problem manifest
490

fiGAI Auctions

(a)

(b)

Figure 1: HD procurement problem: (a) CDI map, (b) GAI tree.
two ways. One type exposure occurs one auction round another,
following two-attribute example. sellers conditional preference order attribute
may optimized assignment a1 given attribute b b1 ,
assignment b changes, a1 may become arbitrarily suboptimal. Therefore bidding a1
b1 may result poor allocation seller outbid b1 (and thus must resort
another assignment) left winning a1 . second exposure occurs single round
auction, trader bids multiple configurations. example, suppose configurations (a1 , b1 ) (a2 , b2 ) optimal current prices. bids collected
independently attribute, trader bidding may end configuration
(a1 , b2 ), again, may arbitrarily suboptimal.
prevent exposure sellers part taking simple measures auction
design. First, bids collected anew round, independently previous rounds, hence
first problem avoided. Sellers likewise avoid second problem limiting
bid one configuration per round.
buyers side, solution work require buyer bid
full set optimal configurations round, order ensure auctions convergence (this becomes clearer Section 6.1). prevent buyer exposure, auction design
structures prices according buyers preferences, traders bid clusters
interdependent attributes. terms example above, b interdependent
(meaning CDI({a}, {b}) hold), able bid cluster ab. b
turn depends c, need another cluster bc. still simpler general pricing
structure solicits bids cluster abc. generally, find reasonable CDI
conditions correct buyer, obtain corresponding GAI tree decomposition, solicit bids clusters attributes corresponding GAI elements.
Section 4, describe auction design detail, along example Section 5.
Section 6.1, prove auction terminates (approximately) optimal solution
MAP.

4. GAI Auctions
introducing auction design, reiterate model notation, provide
definition facilitates auction presentation.

491

fiEngel & Wellman

4.1 Notations Definitions
procurement setting, single buyer wishes procure single good, configuration one candidate sellers s1 , . . . , sm . buyer private
valuation function ub : %+ , similarly seller si private cost function, ci .
ub () ci () MVFs, utility differences express differences willingnessto-pay, explained Section 2.1. Assume buyers preferences reflected
GAI structure I1 , . . . , Ig . call assignment GAI element Ir sub-configuration.
use r denote sub-configuration formed projecting configuration element Ir .
Definition 13 (Consistent Cover). collection sub-configurations {1 , . . . , g },
r {1, . . . , g}, r instantiation Ir , consistent cover
r, r " {1, . . . , g}, attribute aj Ir Ir! , r r! agree assignment
aj .
words, consistent cover collection sub-configurations
compose valid configuration. collection {1 , . . . , g } consistent cover
equivalently considered configuration, denote (1 , . . . , g ). example,
consider good three attributes: a, b, c. attributes domain two possible
assignments (e.g., {a1 , a2 } domain a). Let GAI structure I1 = {a, b}, I2 =
{b, c}. Here, sub-configurations assignments form a1 b1 , a1 b2 , b1 c1 , on.
set sub-configurations {a1 b1 , b1 c1 } consistent cover, corresponding configuration
a1 b1 c1 . contrast, set {a1 b1 , b2 c1 } inconsistent.
4.2 GAI Auction
define iterative, descending-price multiattribute auction maintains GAI pricing structure: is, round t, price pt (), corresponding subconfiguration GAI element. price pt () configuration round
defined terms sub-configuration prices global discount term ,


p () =

g
"

pt (r ) .

(7)

r=1

Importantly, elements r may refer overlapping attributes. Bidders submit subbids sub-configurations global discount .3 Sub-bids submitted
round expire next round. sub-bid round configuration r
automatically assigned price pt (r ). set full bids seller contains consistent
covers generated sellers current set sub-bids. existence
full bid configuration represents sellers willingness accept price pt ()
supplying .
start auction, buyer reports (to auction, sellers) complete
valuation function ub (). GAI, expressed
decomposed form (6)
%
local functions (fb,1 , . . . , fb,g ), ub () =
r fb,r (r ). initial prices subconfigurations set level buyers valuations, is, p1 (r ) > fb,r (r )
r . discount initialized zero. auction dynamics descending
3. discount term could replaced uniform price reduction across sub-configurations.

492

fiGAI Auctions

clock auction: round t, bids collected current prices prices
reduced according price rules. seller considered active round set subbids submitted contains least one full bid. round > 1, sellers
active round 1 allowed participate, auction terminates
single seller active. denote set sub-bids submitted si Bit ,
corresponding set full bids
Bit = { = (1 , . . . , g ) | {1 , . . . , g } Bit }.
example Section 4.1, seller could submit sub-bids set sub-configurations
{a1 b1 , b1 c1 }, combines full bid a1 b1 c1 .
auction proceeds two phases. first phase (A), round auction
computes set buyer-preferred sub-configurations Mt : sub-configurations
part configuration within " profit-maximizing buyer
current prices. Formally, first define buyer profit configuration as4
bt () = ub () pt ().
buyer-preferred set sub-configurations defined by:
Mt = {r | bt () max
bt ( " ) ", r = 1, . . . , g}.
!


Section 6.2 show Mt computed efficiently. stress though Mt
set sub-configurations, criterion selecting based profit
full configurations. Profits individual sub-configurations meaningless outside
context configurations.
Phase A, auction adjusts prices round, reducing price every
sub-configuration received bid buyers preferred set. Let "
prespecified price
parameter. Specifically, Phase price change rule
#mdecrement


applied r i=1 Bi \ :
"
pt+1 (r ) pt (r ) .
g

[A]

Let denote set configurations consistent covers Mt :
= { = (1 , . . . , g ) | {1 , . . . , g } Mt }.
auction switches Phase B active sellers least one full bid
buyers preferred set:
i. Bit = Bit ,= .
[SWITCH]
Let round [SWITCH] becomes true. point, auction selects
buyer-optimal full bid seller si .
= arg max (bT ()).
BiT

(8)

4. drop superscript generic statements involving price profit functions, understanding
usage respect (currently) applicable prices.

493

fiEngel & Wellman

Phase B, si may bid . Sub-configuration prices fixed pT ()
phase. adjustment , increased every round ". (7),
increase decreases current price configurations . auction
terminates one seller (if exactly one, designate si ) active. allocation
determined according four distinct cases:
1. sellers drop Phase (i.e., rule [SWITCH] holds). auction
terminates allocation.
2. active sellers drop round Phase B. sellers
dropped last round, auction selects seller si ub (i ) pT (i )
maximal, designates seller winner si . single winner,
appropriate case 3 4 applied.
3. auction terminates Phase B final price buyers valuation,
pT (i ) > ub (i ). still possible exactly one seller (the winning
seller) whose cost buyers valuation, case trade positive
surplus possible. Therefore, auction offers winner si opportunity
supply price ub (i ).
4. auction terminates Phase B final price pT (i ) ub (i ).
ideal situation, auction allocates chosen configuration seller
resulting price.
Collect reported valuation, ub () buyer;
Set high initial prices, p1 (r ) sub-configuration r , set = 0;
[SWITCH], least one active seller
Collect sub-bids sellers;
Compute Mt ;
Apply price change [A];
end
Compute ;
one active seller
Increase ";
Collect bids (i , ) sellers;
end
Implement allocation payment winning seller;
Algorithm 1: GAI-based multiattribute auction.
overall auction described high-level pseudocode Algorithm 1. role
Phase guide traders efficient configurations (MMP solutions),
reducing prices configurations chosen least one seller preferred
buyer. price reduction makes configurations slightly less attractive seller
slightly attractive buyer. Phase B one-dimensional competition
profit remaining seller candidates provide buyer. next section
formalize notions, prove Phase indeed converges Phase B
494

fiGAI Auctions

I1
fb
f1
f2

a1 b1
65
35
35

a2 b1
50
20
20

I2
a1 b2
55
30
25

a2 b2
70
70
25

b1 c1
50
65
55

b2 c1
85
65
110

b1 c2
60
70
70

b2 c2
75
61
95

Table 3: GAI utility functions example domain. fb represents buyers valuation,
f1 f2 costs sellers s1 s2 .

selects seller whose efficient configuration yields (approximately) highest surplus.
Section 6.2 discuss computational tasks associated auction.

5. GAI Auction Example
illustrate auction simple three-attribute scenario, employing two-element
GAI structure I1 = {a, b}, I2 = {b, c}. Table 3 shows GAI utilities buyer
two sellers s1 , s2 . efficient allocation (s1 , a1 b2 c1 ): buyers valuation
55+ 85 = 140 cost s1 configuration (boldface table) 30+ 65 = 95,
hence surplus 45. maximal surplus second-best seller, s2 , 25, achieved
a1 b1 c1 , a2 b1 c1 , a2 b2 c2 . set initial prices I1 75, initial prices
I2 90, " = 8, meaning price reduction sub-configurations ("/g) 4.
sake example assume seller bids round configuration maximizes profit (price minus cost), respect prices current
round. next section provide formal definitions prove incentive properties
strategy.
Table 4 shows progress Phase A. Initially configuration price
(165), sellers bid lowest-cost configurationa2 b1 c1 (with profit 80 s1
90 s2 )realized sub-bids a2 b1 b1 c1 . M1 contains sub-configurations
a2 b2 b2 c1 highest value configuration a2 b2 c1 , yields buyer profit 10.
show next section (Lemma 7), maximum change throughout
Phase A. Price therefore decreased a2 b1 b1 c1 . price change, profit
s1 a2 b1 c1 72, higher profit (74) a1 b2 c2 bids a1 b2
b2 c2 . (round 2) prices go down, reducing profit a1 b2 c2 66 therefore
round 3 s1 prefers a2 b1 c2 (profit 67). Note point configuration a2 b2 c2
yields profit 16 buyer, within " maximal buyers profit (-10),
hence b2 c2 marked M3 .
next price change, configurations a1 b2 c1 a1 b2 c2 become optimal
s1 (profit 66), sub-bids a1 b2 , b2 c1 b2 c2 capture two. configurations
stay optimal another round (5), profit 62. round 5 profit configuration
a1 b2 c1 140 157 = 17, within " maximizing buyers profit, therefore
sub-configuration a1 b2 added M5 . point s1 full bid (in fact two full
bids: a1 b2 c2 a1 b2 c1 ) 5 , longer changes bids price
optimal configurations decrease. Seller s2 however sticks a2 b1 c1

495

fiEngel & Wellman


1

a1 b 1
75

2

75

3

75

4

75

5

75
s2
71

6
7
8
9

I1
a2 b 1
75
1 , s2
71
s2
67
1 , s2
63
s2
59

71
s2
67

67
, s2

59
s2
55
55
s2
51

a1 b 2
75
75
s1
71
71
s1
67
, s1
67
, s1
67
, s1
67
, s1
67
, s1

a2 b 2
75

75

75

75

75

75

75

75

75


b 1 c1
90
1 , s2
86
s2
82
s2
78
s2
74
s2
70
70
s2
66

66
, s2

I2
b 2 c1
90

90

90

90
, s1
90
, s1
90
, s1
90
, s1
90
, s1
90
, s1

b 1 c2
90

b 2 c2
90

90

90
s1
86

86
, s1
86
, s1
86
, s1
86
, s1
86
, s1
86
, s1

90
s1
86
86
86
s2
82
82
s2
78

Table 4: Auction progression Phase A. Sell bids designation Mt (using )
shown price sub-configuration.

first four rounds, switching a1 b1 c1 round 5. takes four rounds s2 Mt
converge (M9 B29 = {a1 b1 c1 }).
round 9, auction sets 1 = a1 b2 c1 (which yields buyer profit a1 b2 c2 )
2 = a1 b1 c1 . second phase, starts point, sellers compete
amount surplus transfer buyer, whose profit consequently becomes positive.
next round (10) = 8, increased 8 subsequent round. Note
p9 (a1 b1 c1 ) = 133, c2 (a1 b1 c1 ) = 90, therefore profit s2 point 43.
round 15, = 48 meaning p15 (a1 b1 c1 ) = 85 causes s2 drop
profit becomes negative. ends auction, sets final allocation (s1 , a1 b2 c1 )
pT (a1 b2 c1 ) = 157 48 = 109. leaves buyer profit 31 s1
profit 14.

6. Analysis
analyze economic properties auction Section 6.1, address practical
computational issues Section 6.2.
6.1 Economic Properties
adopt following assumptions discussion:
A1 optimal (seller, configuration) pair provides non-negative surplus.
A2 ub () real utility function buyer.
496

fiGAI Auctions

optimal solution MAP (3) provides negative surplus sellers bid
cost, auction terminates Phase A, trade occurs, auction
trivially efficient. Therefore Assumption A1 cause loss generality. A2
interpreted follows: given non-truthful buyer report, efficiency results apply
face value buyers report rather true utility.
6.1.1 Properties buyers profit function
{1, . . . , g}, define (partial) profit set sub-configurations
corresponding
"
b ( ) =
(fb,r (r ) p(r )).
r

functions f come GAI breakdown ub (6).
Lemma 4. complement ,
b () = b ( ) + b ( )
Proof. (6) definition b ( ) get
"
"
b () =
(fb,r (r ) p(r )) +
(fb,r (r ) p(r )) = b ( ) + b ( ).
r

r

round 5 example previous section, sub-configuration a1 b2 placed
configuration a1 b2 c1 within " maximal buyer profit 10. Actually,
point a1 b2 c1 added , a1 b2 c2 whose buyer profit (23)
within " maximum. a1 b2 c2 later selected si could lead
additional efficiency loss, beyond ". following lemma bounds potential loss.
Lemma 5. Let set configurations, within " maximizing profit trader
(buyer seller) given prices. Let = {r | , r {1, . . . , g}}. consistent
cover within g" maximizing profit prices.
particular, includes exactly optimal configurations, consistent cover
exactly optimal well. proof (in Appendix B.1) relies definition GAI
decomposition tree decomposition, uses partial profit function defined
along Lemma 4.
bound tight, GAI tree nontrivial domain
construct example set exists consistent cover whose utility
exactly g" maximal.
result get following corollary.
Corollary 6.
. bt () max
bt ( " ) g"
!


497

fiEngel & Wellman

Proof. Apply Lemma 5 bt : define set configurations within " max! bt ( " ).
Mt , definition, serves lemma. exactly set consistent
covers , hence must within g" optimum max! bt ( " ).
show that, noted example, maximal profit buyer
change Phase A.
Lemma 7. max bt () = max b1 () round Phase A.
Proof. Assume exists " bt+1 ( " ) > bt ( " ). necessarily pt+1 ( " ) =
pt ( " ) > 0. price change Rule [A], meaning w g

sub-configurations " Mt , = w"
g . case, definition ,
bt ( " ) < max bt () ".


Therefore,
bt+1 ( " ) = ( " ) + = ( " ) +

w"
g"
( " ) +
< max bt ().

g
g

true " whose profit improves, therefore max bt () change
Phase A, hence equals value round 1.
6.1.2 Straightforward bidding sellers
turn attention sellers behavior. first define profit function
seller si () = pt () ci ().
Definition 14 (Straightforward Bidder). seller called straightforward bidder (SB)
round bids Bit follows: max () < 0, Bit = . Otherwise
select bti arg max (), set
Bit = {r | bti , r {1, . . . , g}}.
Intuitively, SB sellers follow myopic best response strategy, optimizing profit
respect current prices. approach termed straightforward Milgrom (2000)
sense agents bid myopically, rather strategically anticipating subsequent
price responses.
SB sellers choose optimal configuration bid on; none results proved
affected choice. important note SB sellers find optimal
full configuration bti , rather optimize GAI element separately. configuration bti
translated set sub-configurations Bit . order calculate bti , seller si needs find
optimum current profit function. Section 6.2 show optimization
problem tractable assumption ui (), too, compact GAI structure.
following immediate corollary definition SB.
Corollary 8. SB seller si ,
t, Bit . () = max
( " ).
!


498

fiGAI Auctions

general, sellers preference structure may coincide auctions price structure. Nevertheless, Corollary 8 holds definition SB, Bit (defined Section 4.2)
contains single configuration submitted bid bti . Alternatively, definition
SB modified, sellers GAI preferences consistent auctions price
structure bid multiple optimal configurations (if exist). sellers bid multiple
configurations, speed convergence. case bti denotes set submitted
configurations, Bit denotes respective collection sub-configurations, Bit set
consistent covers Bit . Lemma 5 (with " = 0) entails Corollary 8 still holds.
However, simplicity analysis retain Definition 14.
6.1.3 Efficiency given SB
Lemma 9 states price system price change rules, Phase leads
buyer sellers mutually efficient configuration. Formally,
interested maximizing function : %, represents surplus ub () ci ().
prices pt ,
() = bt () + ().
Lemma 9. SB seller si , g"-efficient:
(i ) max () g".


Proof. Configuration chosen maximize buyers profit Bit end
Phase A. Bit ,= , configuration available Bit , hence one
must chosen maximize buyers utility. , Bit , get
Corollary 8,
(i ) (),
Corollary 6, get ,
bT (i ) bT () g".
Bit add two inequalities get (i ) () g",
desired result.
Based Phase Bs simple role single-dimensional bidding competition
discount, next assert overall result efficient SB, turn (Section 6.1.4) proves approximately ex-post equilibrium strategy two phases.
Theorem 10. Given truthful buyer SB sellers, surplus final allocation
within (g + 1)" maximal surplus.
Proof Sketch: first establish auction must reach Phase B. that,
show round Phase A, price least one sub-configuration reduced,
whereas Lemma 7, max bt () change. latter enforces lower bound
far prices reduced within Phase A, hence Phase must terminate.
initial prices buyers valuation, seller whose surplus (MMP solution)
positive cannot drop phase, using Assumption A1 show way
499

fiEngel & Wellman

Phase terminate reaching condition [SWITCH]. Next, show
two sellers, surplus first drop auction cannot significantly higher
one stayed longer. ensures winning seller efficient
one, one whose MMP surplus almost maximal, Lemma 9 auction must
obtain (almost) surplus. full proof given Appendix B.2.
bound guaranteed Theorem 10 worst-case bound, shown experimentally following sections auction typically achieves efficiency closer optimum.
example Section 5, difference efficiencies two sellers lower
potential efficiency loss (as (g + 1)" = 24). However, instance still guaranteed s1 wins, either efficient allocation, a1 b2 c2 provides
surplus 39. reason two configurations s1 surplus
within g" = 16 solution MMP(b, s1 ), hence Lemma 9 one must chosen 1 . configurations provide " surplus s2 efficient
configuration, sufficient order win Phase B.
bound Theorem 10 improved CDI map contains disconnected
components. example, fully additive decomposition (as assumed previous
literature) exist, CDI map contains disconnected component attribute.
take advantage disconnectedness create separate tree decomposition
disconnected components. definition adapted apportion "
proportionally across disconnected trees. Formally, redefine Mt follows.
Definition 15 (Buyers Preferred Set). Let G comprised trees G1 , . . . , Gh . Let
j denote projection configuration tree Gj , gj number GAI
elements Gj . Similarly, j denotes projection Gj . Define
"
"
, r Gj }.
Mtj = {r | bt (j ) max

(
)

g
j
j
b
g
j! j
buyers preferred set given Mt =

#h


j=1 Mj .

Let ej = gj 1 denote number edges Gj . define connectivity parameter,
e = maxj=1,...,h ej . turns e + 1 replace g approximation results.
first step replace Corollary 6 tighter bound optimality configurations
.
Corollary 11.
. bt () max
bt ( " ) (e + 1)"
!


Proof. apply Lemma 5 Gj , gj g" instead ", hence consistent cover
Mtj within gj g" gj maxj! j bt (j" ). Lemma 4, get consistent
%
cover Mt (meaning configuration ) within hr=1 gj g" gj max! bt ( " ).
%
e + 1 = maxj=1,...,h gj , bounded g" hr=1 gj (e + 1) = "(e + 1).
obtain tighter efficiency result.
Theorem 12. Given truthful buyer SB sellers, surplus final allocation
within (e + 2)" maximal surplus.
500

fiGAI Auctions

fully additive case loss efficiency reduces 2". extreme,
CDI map connected e + 1 = g, reducing Theorem 12 Theorem 10.
assume preference structure buyer, meaning CDI map fully
connected, e = 0 efficiency loss proportional ".
6.1.4 Sellers incentives use SB
Following Parkes Kalagnanam (2005), relate auction Vickrey-ClarkeGroves (VCG) mechanism establish incentive properties sellers. one-sided
multiattribute VCG auction, buyer reports valuation ub , sellers report cost functions
ci , buyer pays sell-side VCG payment winning seller.
Definition 16 (Sell-Side VCG Payment). Let ( , ) optimal solution MAP.
Let (, i) best solution MAP participate. sell-side VCG
payment
VCG(ub , ci ) = ub ( ) max(0, ub () ci ()).
well known truthful bidding dominant strategy sellers one-sided
VCG auction. Parkes Kalagnanam (2005) showed maximal regret buyers
bidding truthfully mechanism ub ( ) ci ( ) (ub () ci ()), is,
marginal product efficient seller.
typical iterative auctions, VCG outcome exactly achieved,
deviation bounded minimal price change.
Definition 17 (-VCG Payment). sell-side -VCG payment MAP payment p

VCG(ub , ci ) p VCG(ub , ci ) + .
payment guaranteed -VCG, sellers affect payment within
range, hence gain falsely reporting cost bounded 2.
Lemma 13. sellers SB, GAI auction payment sell-side (e + 2)"-VCG.
example Section 5, profit winner (14) less " VCG
profit 20. proof (in Appendix B.4) covers Case 3 allocation options
Section 4.2, force payment equal ub (i ).
ready final result section, showing approximately
efficient outcome guaranteed Theorem 12 achieved (approximate) ex-post Nash
equilibrium.
Theorem 14. SB (3e + 5)" ex-post Nash equilibrium sellers GAI auction.
is, sellers cannot gain (3e + 5)" deviating SB, given
sellers follow SB.
order exploit even bounded potential gain, sellers need know, given
configuration , whether explicitly selected approximately optimal
buyer, combination sub-configurations approximately optimal configurations. seems highly unlikely sellers information. likely
lose bid myopically optimal configurations.
501

fiEngel & Wellman

6.2 Computation Complexity
advantage GAI auctions additive auction AD (Parkes & Kalagnanam,
2005) economic efficiency: accommodating expressive bidding, efficiency results
respect accurate utility function. contrast, key advantage respect auction employ preference structures, auction NLD (Parkes
& Kalagnanam, 2005), computational efficiency. property show section
computations exponential size largest GAI element, rather
|A|. particular, size price space auction maintains equal
total number sub-configurations. number exponential treewidth (plus one)
original CDI map.5 ensure computational tractability, one define priori
constant C, force treewidth CDI map bounded C ignoring
interdependencies. still much better using additive representation
ignores interdependencies. constant represents tradeoff economic
computational efficiency; larger C supports accurate preference representation,
GAI elements may larger.
!
#
purpose computational analysis, let = gr=1 aj Ir D(aj ), collection sub-configurations. Since grows monotonically t, nave generation
best outcomes sequentially might end enumerating significant portions
domain. Fortunately, enumeration avoided, complexity computation (as well optimization performed seller) grows |I|, is,
computation depends size exponential domain.
Theorem 15. computation Mt performed time O(g|I|2 ). Moreover,
total time spent task throughout auction O(g|I|(|I| + )).
obtain bound , number rounds Phase A, comparing sum
prices sub-configurations rounds 1 .
Theorem 16. number rounds required auction bounded
"
g

p1 (r ) .
"
r

%

Proof. Let =
r p (r ) (the sum prices sub-configurations round i).

Assume < 0 1 . ub () 0, must exist
bi () > 0. chose initial prices , b1 () < 0,
contradicts Lemma
0, hence sum prices cannot reduced
% 7. Therefore,
1
1
= r p (r ) throughout auction. Also, round least one
price reduced g" . leads required result.
bound rather looseits purpose ensure number rounds
depend size non-factored domain. depends number subconfigurations, result dividing initial price minimum price decrement. Usually Phase converges much faster. Let initial negative profit chosen
auctioneer = max b1 (). worst case, Phase needs run
5. use term treewidth subject using optimal tree decomposition.

502

fiGAI Auctions

. b () = m. happens example r I. pt (r ) = fb,r (r ) +
g .
implies closer initial prices reflect buyers valuation, faster Phase
converges. One extreme choice set p1 (r ) = fb,r (r ) +
g . would make Phase
redundant, cost full initial revelation buyers valuation (Section 2.3). option extreme, , I. p1 () = p1 (), auctioneer
range choices determine right tradeoff convergence time information revelation. example Section 5, choice lower initial price
domain I1 provides speedup revealing harmless amount information.
simulations below, set constant initial prices within GAI element.
Furthermore, many domains natural dependencies mutual traders,
case price structure used auction may accommodate sellers preference
structures. so, sellers bid multiple equally profitable configurations round,
thus speeding convergence, discussed Section 6.1.
consider computational complexity SB strategy sellers.
Theorem 17. Let b denote treewidth CDI map ub (), let denote
treewidth CDI map ui (). optimization ui () p() takes time exponential
b + worst case.
Proof. Consider graph G includes union edges two CDI maps.
treewidth G b + worst case. definition, price function p()
decomposed according ub (), hence ui () p() decomposes according additive GAI
factors ui () ub (). Therefore, pair attributes x mutual
factor ui () p(), edge x, G. well known complexity
combinatorial optimization exponential treewidth graphfor example,
using cost networks (Dechter, 1997).
potential concern may communication cost associated descending
auction style. sellers need send bids round.
simple change made avoid much redundant communication: auction
retain sub-bids previous rounds sub-configurations whose price change.
combinations sub-bids different rounds yield suboptimal configurations,
sub-bid tagged number latest round submitted,
consistent combinations round considered full bids.
implementation sellers need resubmit bid price least one
sub-configurations changed.
summarize, GAI auctions shown perform well criteria mentioned Section 2.3: achieve approximate efficiency given reasonable incentive properties,
expressive enough accommodate preferences interdependencies among attributes,
tractable maximal size GAI clusters reasonably bounded,
require full revelation utility. Performance last criterion quantified
experimental part paper.

7. Experimental Design
main idea behind GAI auctions improve efficiency auctions assume
additivity, preferences additive. However, (given fixed ") theoretical
503

fiEngel & Wellman

efficiency guarantee GAI auctions depends e, connectivity parameter GAI
tree. suggests tradeoff: complex models accurately represent true utility,
increase approximation error due higher connectivity. obvious question whether
accurate preference modeling indeed efficient, particular, whether
GAI auctions efficient additive auctions, given preferences
additive. address question experimentally, assume buyers preferences
GAI structure, compare performance GAI auctions model
structure performance auctions restricted additive representation.
latter, use instance GAI auction pricing structure additive,
name additive approximating auction (AP). auction similar principle
auction AD (Parkes & Kalagnanam, 2005).6 best knowledge, AD
proposed instance surplus-maximizing multiattribute auction based additive
preferences, besides require full revelation buyers utility.
experiments, sellers employ SB strategies.
Section 7.1 describe random GAI utilities drawn, Section 7.2
extend scheme generate GAI utility functions exhibit additional structure.
Section 7.3 show obtain additive approximation random functions,
allowing us simulate auction AD. results simulations presented Section 8.
7.1 GAI Random Utility
performed simulations using randomly generated utility functions representing
buyers value function sellers cost functions. random utility generation procedure follows utility elicitation procedure suggested Braziunas Boutilier (2005),
uses two-step process: first create local utility functions GAI element,
normalized range [0, 1]. Next, draw scaling constants represent relative
weight local function overall utility.
formally, let ur (Ir ) = u([Ir ]) denote local utility function Ir , normalized
[0, 1]. Next, let fr (Ir ) defined according GAI functional form Eq. (6),
u([Ir ]) replaced ur (Ir ), hence
f1 = u1 (I1 ),
r = 2, . . . , g,

fr = ur (Ir ) +

r1
"
(1)j
j=1

"
1i1 <<ij <r

ur ([

j
$

Iis Ir ]).

(9)

s=1

Braziunas Boutilier (2005) show GAI-structured utility, exist scaling
constants r [0, 1]
g
"
r fr (Ir ).
(10)
u(A) =
r=1

6. auctions employ additive price space drives bidders efficient configurations. AD
efficient ! buyer sellers additive preferences. GAI auctions !-efficient
given additive buyers preferences, make assumption regarding sellers preference.
structural differences: (i) AD employs complicated price change rules, order allow
sellers ignore attributes, (ii) discounts used stage AD, auction
selects provisional winner iteration.

504

fiGAI Auctions

refer functions ur (Ir ) subutility functions. Note values form
ur ([Iir Iir! ]) drawn used ur (Ir ) ur (Iir! ). representation
lets us draw random GAI functions, given GAI tree structure, using following
steps:
1. Draw random subutility functions ur (Ir ), r = 1, . . . , g range [0,1].
2. Compute fr (), r = 1, . . . , g using (9).
3. Draw random scaling constants r ,
(10).

%g

r=1 r

= 1, compute u(A)

scaling constants represent importance decision maker accords corresponding
GAI elements overall decision. procedure results utilities normalized
[0, 1]. Finally, particular trader draw mean variance , scale u()
range [ , + ], resulting utility functions ub () ui () = 1, . . . , m.
7.2 Structured Subutility
subutility function model may represent valuation subspace.
practice may often find additional structure within GAI element. introduce
two structures consider typical generally applicable, use
simulations, along completely random local functions.
argue Section 2.1, typical purchase sale decisions exhibit FOPI (first
order preferential independence), meaning single attributes natural
ordering quality. example, hard-drive buyers always prefer memory, higher
RPM, longer warranty, on. implement FOPI, let integer values
attribute represent quality. example, belongs GAI element Ir = {a, b},
make sure ur (ai , b" ) ur (aj , b" ) ai > aj , ai , aj D(a), b" D(b).
must course hold attribute FOPI, GAI element Ir
includes a. enforce condition values GAI element
drawn, special-purpose sorting procedure, applied steps 1 2 above.
FOPI condition makes random utility function realistic, particular
appropriate target application. attributes exhibit FOPI, dependencies
among different attributes likely framed complements substitutes.
concepts known primarily context combinatorial preferences, is, preferences
combinations distinct items. multiattribute framework, two attributes
complements improvement value worth sum
improvement separately. Two attributes substitutes way
around. concepts meaningful respect attributes FOPI,
otherwise notion improvement conditional value attributes.
Definition 18 (Complements Substitutes). Let u() measurable value function " . Let a, b " , Z = " \ {a, b}, assume b FOPI
rest attributes. Attributes b called complements ai > ai
(ai , ai D(a)) bj > bj (bj , bj D(b)), Z " D(Z),
u(ai , bj , Z " ) u(ai , bj , Z " ) > u(ai , bj , Z " ) u(ai , bj , Z " ) + u(ai , bj , Z " ) u(ai , bj , Z " ).
505

fiEngel & Wellman

Attributes b substitutes inequality sign (always) reversed.
relationship attributes ruled additive utility function,
admitted weaker independence condition, called mutual utility independence (MUI)
(Keeney & Raiffa, 1976), implies utility function either multiplicative
additive. multiplicative, utility function represented n singledimensional functions, n scaling constants, single parameter k (the MUI-factor)
controls strength complementarity (k > 0) substitutivity (k < 0)
pairs attributes within GAI element (for k = 0 set attributes additive).7
experimental purposes, assume attribute cluster (GAI element) exhibits MUI,
value k all.
elicitation procedure, one would normally extract MUI scaling constants
user, compute k (Keeney & Raiffa, 1976). purposes, first determine
k according relationship wish impose attributes, draw MUI
scaling constants consistent value. explicitly, draw random
scaling constants, iteratively modify constants, set constants
found consistent k. next step compute ur (Ir ) according MUI
formula (Keeney & Raiffa, 1976). ur (Ir ) (for r) range [0, 1], hence
point proceed steps 2 3 above. Note procedure several
distinct sets scaling constants used: g constants used step 3 scale different
GAI elements, whereas MUI constants, per GAI element, scale attributes within
element.
7.3 Additive Approximation
Another issue experiment design additive auction (AP) behaves face
non-additive buyer preferences, specifically would select approximately buyerpreferred sets configurations. approach took come additive
function approximates buyers true utility function, use throughout
auction. aware better strategy, rule possibility one
exists.
%
natural approach generate linear approximation () arbitrary function
ub () use linear regression. define indicator variable xij every aij D(ai ),
consider value assignment data point. example, assignment
a1j(1) , . . . , amj(m) creates following data point:

"

"

cij xij = u(a1j(1) , . . . , amj(m) ),

i=1 aij D(ai )

value variable xij 1 j = j(i) 0 otherwise. coefficients cij
result regression represent values used (aij ).
problem includes many attributes, possible consider points
. assumption compact GAI representation exists, sensible
expect could use fewer data points regression. indeed found small
7. formalize notion Appendix D.

506

fiGAI Auctions

random sample joint utility yields approximation effective one based
points. precisely, largest domain tested (25 attributes, domain
size 4) found efficiency AP improve increasing number
sampled points beyond 200. show chart supporting claim Appendix E.
experiments use 300 points instances.
method comparison probably overestimates quality additive approximation. general, would true utility function explicitly generate
approximation. Extraction elicitation utility function usually
serious bottleneck multiattribute mechanism. Therefore, major reason use
additive approximation reduce burden elicitation. Hence practice would
try obtain additive function directly, rather obtain full utility approximate it. result process somewhat unpredictable, elicitation
queries may coherent: willingness pay a1 depends value b,
willingness pay a1 know b? therefore consider
experimental generation method biased favor additive approximation.

8. Simulation Results
provide detailed results simulation study. Section 8.1 provides analyses economic efficiency results. Section 8.2 covers computational study, results regarding
revelation private information provided Section 8.3.
8.1 Efficiency GAI Structure
measure efficiency terms percentage MAP solution, surplus
achieved optimal seller-configuration pair. evaluate effect preference modeling efficiency, vary structural parameters buyers GAI preferences: connectivity factor e, size largest GAI element. Performance depends
many additional factors, size attribute domains, number sellers, amount
price decrement ("), distribution utility functions drawn. isolate
primary structural parameters, first tested efficiency varies according
choices side factors, several fixed GAI structures fully random subutility
functions. result tests, picked following parameter values rest
simulations: valuations drawn uniform distribution, buyer mean
set 500. mean seller drawn uniformly [500, 700]. variance set
200 traders. use domain size 3 4 attributes, number
sellers = 5. explanation process leading choices provided
full report (Engel, 2008).
following experiment used roughly fixed GAI structure, g = 6 elements
e = 5, (that is, GAI structure tree, forest), " = 24 (meaning reduction
= 4 per sub-configuration). vary number attributes varying size
element. Figure 2a shows efficiency obtained respect , size largest
GAI element. expected, size GAI elements negligible, effect
efficiency GAI auctions. dramatic effect efficiency AP. = 1,
decomposition fact additive hence AP performs optimally. performance
deteriorates increases.
507

fiEngel & Wellman

(a)

(b)

Figure 2: Efficiency function of: (a) size largest GAI element (), given e = 5,
(b) number GAI elements (e + 1), given = 5.
performed test using utility attributes FOPI.
FOPI restriction, additive approximation much efficient relative unconstrained random utility. FOPI applies strict subset attributes, would
expect efficiency AP fall somewhere efficiency FOPI
unrestricted case. Somewhat surprisingly, imposing FOPI renders GAI auctions slightly
less efficient. Nevertheless, additive approximation achieves lower efficiency compared
accurate preference modeling, differences pass statistical significance
test (P < 0.01), 3. Further, note performance GAI auctions always
improved using smaller value " = g" , whereas hardly improves performance
AP. = 2, statistically significant difference (with confidence level)
already detected 2. used = 2 hereafter.
next experiment (Figure 2b) measures efficiency function e, given fixed
. assume connected GAI trees, e number GAI elements minus one.
tested structures e varying 1 10, elements size 3 5, = 5
structures.8 single element, GAI auction similar NLD (Parkes &
Kalagnanam, 2005), auction assigns price every point joint
domain. e = 0, hence efficiency GAI close perfect. structure
extreme compared additive representation, indeed performance AP
particularly inferior (only 70% efficient).
GAI elements, efficiency GAI auctions declines slow pace.
theoretical potential error (e + 2)", mostly result efficiency loss winning
seller, based Lemma 5. efficiency loss may occur sub-configuration
belongs configuration yields lowest profit allowed buyer-preferred
seta particularly rare case. practice, loss closer e, much smaller
error.
performance AP improves number elements grows maximal
average sizes fixed. Intuitively, changing structure way takes closer
8. find particular tree structure influential results; final structure used
reported results maximum three children per node.

508

fiGAI Auctions

(a)

(b)

Figure 3: (a) Efficiency function k 0 (complements). (b) Efficiency function
k 0 (substitutes).
additive representation. FOPI, see similar phenomenon before. However,
difference GAI FOPI AP FOPI, even ten elements, substantial
statistically significant.
Figures 3a 3b present efficiency function MUI-factor k, complements
substitutes, respectively. used fixed GAI structure four elements, largest
four attributes, imposed k elements. expected,
stronger complementarity among attributes, lower efficiency AP, whereas
relationship affect efficiency GAI auctions. case substitutes,
contrast, additive approximation performs well, efficiency starts deteriorate
extreme values k. roughly, say relationship among attributes
(within GAI element) limited (mild) substitutions, could good idea
use additive approximation. Unfortunately, interpretation parameter k lacks
quantitative scaling: clear intuition actual numbers mean, beyond
qualitative classification mentioned above.
summarize part, experimental results show GAI auctions yield significant efficiency improvement comparison additive auction, almost classes
evaluations. Though efficiency additive auction may come across relatively
high perhaps sufficient, observation misleading several respects. (i)
large procurement events, 510% efficiency differences translate large amounts money.
(ii) wider efficiency loss additive auction (with theoretical bound) may
impact incentives; SB may longer approximate ex-post Nash equilibrium.
(iii) Efficiency expected deteriorate larger problems larger GAI elements,
particular FOPI hold many attributes. (iv) argued Section 7.3, expect practical additive auctions perform worse AP tailored
approximation.
8.2 Computational Analysis
computational tasks required auction simulations performed using algorithms described Appendix C. algorithms suggested applied
509

fiEngel & Wellman

(a)

(b)

Figure 4: Number rounds function of: (a) size largest GAI element (), given
e = 5, (b) number GAI elements (e + 1), given = 5 = 2.
combinatorial optimization problems (Dechter, 1997; Nilsson, 1998), therefore
computational runtime process round particular interest work. Instead,
focus number rounds auction requires. tested number rounds
required auctions GAI AP, fully random FOPI preferences, varying three
parameters: (size largest GAI element), e (connectivity), .
complexity terms number rounds shown Figure 4a (with respect )
Figure 4b (with respect number elements). observe FOPI
GAI auction takes much longer converge, compared case random preferences.
reason FOPI, sellers buyers preferences general seen
opposites: price, specific attribute, buyer prefers higher quality,
whereas sellers prefer lower quality (given fixed values rest attributes),
everyone agrees relative quality attribute values. apparent difference
growth rate (the FOPI case seems steeper curve) somewhat misleading:
= 8 (not shown) GAI random preferences already caught curve
see FOPI case. number rounds, expected, grows exponentially
size largest element. However, observed Figure 4b, number
grow quickly function number elements, supporting theoretical arguments
Section 6.2. Note variance chosen traders preferences fixed, thus
small number elements variance wider, resulting large number
rounds required GAI FOPI case.
AP, implication increasing respective increase number
attributes. result, complexity AP (not shown) grows slowly
increase . FOPI case, = 2, AP takes average 481 rounds = 1
(6 attributes) 546 rounds = 6 (19 attributes). numbers slightly higher
random preferences (523 628).
high-dimensional multiattribute auctions, expect participation would typically automated software bidding agents (Wellman, Greenwald, & Stone, 2007).
circumstances, auction taking thousands rounds cause
concern. However, reason rounds expensive, might reconsider adopt-

510

fiGAI Auctions

Figure 5: Efficiency function number rounds.
ing additive auctions, sacrifice efficiency order decrease number rounds.
Alternatively, could keep using GAI auctions increase " (and ). final
experiment compares two alternatives. vary level ", order view efficiency function number rounds (Figure 5). GAI structure used
experiment e = 5 = 5.
evident chart, cases GAI achieves better efficiency even fixed
number rounds. exception budget rounds small (under
200), FOPI holds. case need pay rounds order get
higher efficiency.
total computation time, carried GAI auction 10 elements, = 5,
= 3, = 2, rest parameters fixed above, around 11 seconds
average, using Intel Dual Core (2.00 Ghz) CPU, 2048 MB RAM.
8.3 Information Revelation
key difference mechanism proposed previous literature
extent buyer required reveal preference information. GAI auctions,
buyer need reveal private preference information front.
course, price changes reveal buyers information. Another experimental
question therefore whether mechanism significantly reduces overall amount
information revealed buyer.
PK study information revelation buyer seller, additivity
assumption. utility function additive amount information revealed
measured terms constraints linear weights. Sellers infer bounds
buyers set weights, amount information hidden represented
fraction simplex satisfies constraints. simplex analysis
possible GAI utilities. suggest alternative geared towards kind information
revealed GAI auctions.
GAI auctions, buyers private information partially revealed selection buyers preferred set Mt . auction need announce directly;
general sellers infer sub-configuration Mt received bid
(usually sellers observe bids), yet price change

511

fiEngel & Wellman

next round. therefore measure exactly thatfor many sub-configurations r
least one round r Mt Bit i. specifically, define
sub-configuration revealed, within GAI element measure fraction
sub-configurations revealed end auction. measurement overestimates information actually revealed, sellers infer bounds relative
preferences precise values functions fb (). Moreover, assumes
seller observes bids (meaning sellers share bid information other),
unrealistic event practice.
Based criterion, GAI auctions reveal average 15%25% buyers preferences preferences exhibit FOPI, 10%15% subutilities completely
random. seem systematically depend parameter tested.
validates claim advantage GAI auctions promise second-score types
auctions.

9. Conclusions
propose novel exploitation preference structure multiattribute auctions. Rather
assuming full additivity, structure all, model preferences using generalized additive independence (GAI) decomposition. show GAI representation
constructed relatively simple statements willingness-to-pay, develop
iterative auction mechanism directly relying decomposition. auction mechanism
generalizes preference modeling employed Parkes Kalagnanam (2005),
essence retaining information revelation properties. allows range tradeoffs
accuracy preference representation computational complexity
auction, well tradeoff buyer information revelation number
rounds required convergence.
performed simulation study proposed multiattribute auctions, compared
mechanism assumes additive preferences. study validated usefulness
GAI auctions preferences non-additive GAI, allowed us quantify
advantages specific classes preferences. general, found design
yields significantly higher economic efficiency comparison additive auctions.
GAI subutilities exhibit internal structures, FOPI, efficiency loss additive
approximation less severe, cases benefit accurate GAI model still
significant. Using additive approximation may reasonable approach GAI
structure fairly similar additive one, auction must terminate within
small number rounds.
tradeoff expressive compactness preference representation ubiquitous applications involving preferences. one hand, would ask users
little possible information; other, users preference statements may accurate even meaningful cannot express important dependencies. problems
could useful experimentally compare accuracy GAI additive representations. experimental methodologies used study, particular generation
random structured utility functions, finding additive approximation GAI functions, may therefore prove applicable broader class preference research problems
tradeoff exists.
512

fiGAI Auctions

Acknowledgments
work supported part NSF grants IIS-0205435 IIS-0414710,
STIET program NSF IGERT grant 0114368. Yagil Engel supported part
Aly Kaufman fellowship Technion. thank anonymous reviewers many
useful comments suggestions.

Appendix A. Proofs Section 3.1
Lemma 2.
Let u(A) MVF representing preference differences, let X, Y, Z
define partition A. CDI(X, | Z) iff
u(A) = u(X 0 , Y, Z) + u(X, 0 , Z) u(X 0 , 0 , Z),
arbitrary instantiations X 0 , 0 .
Proof. Let X 0 , 0 arbitrary instantiations.
u(X, Y, Z) = u(X, Y, Z)u(X 0 , Y, Z)+u(X 0 , Y, Z) = u(X, 0 , Z)u(X 0 , 0 , Z)+u(X 0 , Y, Z)
second equality holds iff X 0 , 0 , CDI(X, | Z).
Theorem 3 (CDI-GAI Theorem).
Let G = (A, E) CDI map A,
{I1 , . . . , Ig } set overlapping maximal cliques.
u(A) =

g
"

fr (Ir ),

(A.1)

r=1


f1 = u([I1 ]),
r = 2, . . . , g,

fr = u([Ir ]) +

(A.2)

r1
"

"

(1)j

j=1

u([

1i1 <<ij <r

j
$

Iis Ir ]).

s=1

Proof. actually prove somewhat stronger result.
Claim. Let G CDI map utility function u(). Let Q = {C1 , . . . , Cw } denote set
maximal cliques G. Then,
u(A) =

w
"
(1)k+1
k=1

"
1i1 <<ik w

u([

k
$

Cis ]).

(A.3)

s=1

Let G0 = (A, E 0 ) complete graph nodes G. definition CDI
map, edge (x, y) E 0 \ E implies CDI(x, y). use induction series edge
removals. starting graph G0 , step remove edge E 0 \ E get
0
graph Gi . last step = |E 0 | |E| G|E ||E| = G. prove claim
513

fiEngel & Wellman

holds graph Gi . Since clique G0 , step 0, Q0 = {A}
claim trivially hold. Following process step 1 provides intuition final
decomposition obtained. pick pair nodes (x, y) CDI(x, y). use
notation = \ {a} A. Lemma 2 ,
u(A) = u(x, y, Ax,y )

(A.4)

= u(x0 , y, Ax,y ) + u(x, 0 , Ax,y ) u(x0 , 0 , Ax,y )
= u([Ax ]) + u([Ay ]) u([Ax Ay ]).
set maximal cliques G1 Q1 = {Ax , Ay }. Equation (A.4) shows (A.3)
holds Q1 .
proving induction step, assume (A.3) holds step i, show carry
step + 1. Let (x, y) denote edge removed step + 1. Let C1 , . . . , Cd (WLOG)
indicate sets Qi include x y. Similar (A.4), observe
u([C1 ]) = u([C1x ]) + u([C1y ]) u([C1x C1y ]).

(A.5)

Similarly k = 1, . . . , wi 1, 1 < i1 < < ik wi ,
u([

k
$

s=1

Cis C1 ]) = u([

k
$

s=1

Cis C1x ]) + u([

k
$

Cis C1y ]) u([

s=1

k
$

Cis C1x C1y ]). (A.6)

s=1

(A.3) (assumed hold step) term includes C1 substituted
according (A.5) (A.6). result (A.3) holding set (Qi \ {C1 })
{C1x , C1y }.
repeat operation C2 , . . . , Cd , define resulting collection
Qi+1 = (Qi \ {C1 , . . . , Cd }) {C1x , C1y , . . . , Cdx , Cdy }.
elements Qi+1 subsets elements Qi , maximal cliques Gi .
verify induction property:
element Qi+1 clique Gi+1 , difference Gi
Gi+1 removed edge (x, y), set Qi+1 includes x y.
clique C Qi+1 maximal, subset maximal clique
C Gi , either: (i) C C = C \ {x} (ii) x C C = C \ {y},
(iii)C = C. x longer connected C remains maximal cases.
maximal clique Gi+1 , C C Qi . either = C,
= C \ {x}, = C \ {y}, three cases element Qi+1 .
proves induction step.
result, last step decomposition (A.3) holds set Q = Q|E0 ||E| ,
set maximal cliques G, hence claim proved.
define f1 , . . . , fg according (A.2). claim, get (A.1) holds.

514

fiGAI Auctions

Appendix B. Proofs Section 6.1
B.1 Proving Lemma 5
Lemma 5. Let set configurations, within " maximizing profit
trader given price vector. Let = {r | , r {1, . . . , g}}.
consistent cover within g" maximizing profit prices.
show given suboptimal consistent cover , find suboptimal
member , contradicting premise lemma. traversing GAI
tree depth-first manner, step flip sub-configurations corresponding
elements subtree set sub-configurations source configuration
parent subtree (thus trimming subtree). This, show, results
another consistent cover sub-optimal. Eventually obtain configuration
still suboptimal.
purpose introduce following notions:
operator turns set sub-configurations, consistent cover,
configuration:
{1 , . . . , g } = (1 , . . . , g ).
Let consistent cover . -source element r configuration
originated (meaning, r = r ).
operation trim replaces sub-configurations given configuration
corresponding set sub-configurations different configuration , according
following rules. Let denote indices GAI elements, corresponding
subtree GAI-tree, whose root GAI element Ii . Let denote consistent
cover . operation -trim defined elements
corresponding -source. Formally, exists ,
r , r = . Now, Let parent Ii , arbitrary element
outside disconnected rest graph. Let source
.
-trim(i , ) = {r | r
/ } {r |r }
replace r r corresponding sub-configuration ,
resulting configuration elements corresponding
-source parent Ii .
Lemma B.1. " = -trim(, ) consistent cover.
Proof. need show pair sub-configurations set {r | r
/ } {r |r
} consistent, assign value attribute appear
corresponding GAI elements.
sub-configurations {r |r } internally consistent mutual
-source . sub-configurations {r | r
/ } internally consistent

sub-configurations . Let r1 r2
/ denote indices GAI elements,
Ir1 Ir2 ,= . Now, Ir1 subtree whose root Ii , whereas Ir2 outside
subtree, path must go Ii parent . Due
515

fiEngel & Wellman

running intersection property GAI tree, Ir1 Ir2 Ii . corresponding subconfigurations must consistent -source , hence r1
r2 must consistent.
Lemma B.2. Let defined Lemma 5, let denote consistent cover
. " = -trim(i , ) (for i), ( " ) () + ".
Proof. Let denote single -source {r | r }. Let = =
{1, . . . , g} \ . ( " ) > () + ", (using Lemma 4)
( " ) = (" ) + (" ) > ( ) + ( ) + ",
= " ,

(" ) > ( ) + ".

Define following cover:
= {r" | r } {r | r }
consistent coveragain (as Lemma B.1) possible intersection
element " element (the root = ) parent
. corresponding sub-configurations i" must consistent following
argument: consistent appear together . i" consistent
-source definition -trim. Hence i" assign
values attributes Ii . consistent , must
i" . get
() = (" ) + ( ) > ( ) + ( ) + " = () + ".
last equation follows fact sub-configurations .
contradicts "-optimality .
Proof Lemma 5. Let 1 consistent cover contradicting lemma, meaning
( 1 ) max () g". first reorder GAI elements 1, . . . , g, according
order corresponding backtracking Depth-First-Search: is, starting
leftmost leaf, next move siblings, next parent, general children
node Ii visited, next element visited Ii . perform series g 1
-trim operations, resulting series 1 , . . . , g . that, must show
step operation -trim(i , ) valid, sub-configurations corresponding
mutual -source. Ii leaf, |i | = 1 hence elements
single source. Otherwise, result trimming subtrees children Ii , hence
definition -trim -source ii .
Now, consider resulting g . assumed ( 1 ) < max () g", hence
applications Lemma B.2 g 1 -trim operations, get ( g ) <
max () ". last element g elements mutual -source,
meaning g . Therefore, got contradiction "-optimality .

516

fiGAI Auctions

B.2 Proving Theorem 10
order prove Theorem 10 need several additional claims.
Lemma B.3. price least one sub-configuration must reduced every round
phase A.
Proof. round < phase exists active seller Bit = .
However active round t, Bit ,= . Let Bit . r.r Mt ,
definition . Therefore must r , Mt .
Lemma B.4. auction must reach phase B.
Proof. Lemma B.3 prices must go every round phase A. Lemma 7
ensures lower bound much prices reduced phase A, therefore
auction either terminates phase must reach condition [SWITCH].
set initial prices high max b1 () < 0, max bt () < 0
phase Lemma 7. Assumption A2 efficient allocation ( , ) provides
positive welfare, ( ) = bt ( ) + ( ) > 0. si SB therefore leave
auction ( ) < 0. happen bt ( ) > 0, therefore si
drop phase A. Phase continues long least one seller active,
auction cannot terminate reaching condition [SWITCH].
Finally, following lemma states two sellers, potential surplus
first one drop auction cannot significantly higher potential surplus
one stayed longer.
Lemma B.5. sellers si sj SB, si active least long sj active
phase B,
(i ) max j () (g + 1)".


Proof. SB definition phase B, sj drops > jT (j ). si
drop point (i ) " > jT (j ) ". , get
Corollary 6 that,
bT (i ) + (i ) max bT () + jT (j ) (g + 1)".


Corollary 8, jT (j ) = max jT (). Therefore
(i ) = bT (i ) + (i ) max bT () + max jT () (g + 1)" max j () (g + 1)".






Theorem 10. Given truthful buyer SB sellers, surplus final allocation
within (g + 1)" maximal surplus.
Proof. Lemma B.4 auction terminates allocation (si , ). Lemma
9, theorem immediate case winning seller si efficient seller. Otherwise
efficient seller sj dropped si . result immediate
Lemma B.5.
517

fiEngel & Wellman

B.3 Proving Theorem 12
first adapt Lemma 7, Lemma 9, Lemma B.5 use e + 1 instead g.
Lemma B.6. max bt () change round phase A.
Proof. Let G comprised trees G1 , . . . , Gh , let j" denote projection configuration
" tree Gj , let gj denote number GAI elements Gj .
Assume exists j" bt+1 (j" ) > bt (j" ). necessarily pt+1 (j" ) =

p (j" ) . happen must case w gj sub-configurations

j" Mtj , = w"
g . case, definition Mj ,
"
bt (j" ) < max bt (j ) gj .
j j
g
Therefore,
bt+1 (j" ) = (j" ) + = (j" ) +

w"
gj "
(j" ) +
< max bt (j ).
j j
g
g

true j" whose profit improves, therefore maxj j bt (j ) change
phase A.
max bt () = max




h
"

bt (j ) =

j=1

h
"
j=1

max bt (j ).

j j

last equality holds optimal values disconnected components GAI
tree independent other. result, max bt () well change
phase A.
Lemma B.7. SB seller si , (e + 1)"-efficient:
(i ) max () (e + 1)".


proof identical proof Lemma 9, replacing g e+1 using Corollary 11
instead Corollary 6.
Lemma B.8. sellers si sj SB, si active least long sj active
phase B,
(i ) max j () (e + 2)".


proof identical proof Lemma B.5, using Corollary 11 instead
Corollary 6.
Theorem 12. Given truthful buyer SB sellers, surplus final allocation
within (e + 2)" maximal surplus.
Proof. proof identical proof Theorem 10, replacing Lemmas 9 B.5
lemmas B.7 B.8, respectively.

518

fiGAI Auctions

B.4 Lemma 13 Theorem 14
Lemma 13. sellers SB, GAI auction payment sell-side (e + 2)"-VCG.
Proof. Trivially, consider winning seller si . case final price
buyers valuation payment ub (i ) exactly VCG payment. therefore
assume final price buyers valuation, payment
winning seller pT (i ) . Let sj second best seller. sj drops si ,
discount ", hence,
+ " > jT (j ) = max jT ().
(B.1)


Corollary 6,
ub (i ) pT (i ) max bT () (e + 1)".


Therefore (using (B.1) second inequality)
pT (i ) ub (i ) max b () + (e + 1)" <


ub (i ) max bT () + (e + 2)" max jT () ub (i ) max j () + (e + 2)". (B.2)






Bow sj survived auction discount ",
jT (j ) + ".
Meaning:
pT (j ) cj (j ) ".

(B.3)

Corollary 6
ub (i ) pT (i ) ub (j ) pT (j ) + (e + 1)".
Therefore (using (B.3) second inequality)
pT (i ) ub (i ) ub (j ) + pT (j ) (e + 1)"
ub (i ) (ub (j ) cj (j )) " (e + 1)" ub (i ) max j () (e + 2)". (B.4)


Equations (B.2) (B.4) place payment pT (i ) within (e + 2)" si VCG
payment.
Theorem 14. SB (3e + 5)" ex-post Nash equilibrium sellers GAI auction.
is, sellers cannot gain (3e+5)" deviating SB, given sellers
follow SB.
Let s1 play arbitrary strategy 1 SB sellers s2 , . . . , sn . s1 win
would clearly done worse using SB, therefore assume s1 wins 1 final price
p gains least (3e + 5)" trade. Let 2, . . . n. calculation
(B.2) assumed nothing winning traders strategy, therefore applies well:
p = pT (1 ) ub (1 ) max () + (e + 2)".


(B.5)

Next, define following cost function: c1 (1 ) = p (2e + 3)" c1 ( " ) = , " ,= 1 .
Assume s1 plays SB c1 .
519

fiEngel & Wellman

Claim. playing SB assuming cost c1 , s1 still winner, profit (wrt c1 ())
within (2e + 3)" profit playing 1 .
Proof. Clearly, s1 bids 1 . Let p() denote prices end phase new
final discount.
instance auction, let b () denote buyers profit, let
= 1 (1 ) = p(1 ) c1 (1 ) =
assume moment prices reach s1 limit,
p(1 ) (p (2e + 3)").
(for inequality, use pT (1 ) = ub (1 ) bT (1 ) (B.5)),
= pT (1 ) p + (2e + 3)" > ub (1 ) (1 ) (ub (1 ) max () + (e + 2)") + (2e + 3)"

b


= max ()


bT (1 )

+ (e + 1)".
(B.6)

Let denote configuration chosen seller si end phase
new instance. Since instance, get bT (i ) bT (1 ) (e + 1)".
Therefore modify (B.6) state,
> (i ) (i ) = pT (i ) ci (i ),

b

(B.7)

meaning prices reached limit s1 , sellers dropped off. shows
s1 wins new instance well. Furthermore, lowest possible price paid s1
= p(1 ) (p (2e + 3)"), hence price least p (2e + 3)".
determined
Proof Theorem 14. Lemma 13:
p V CG(c1 , c2 , . . . , cn ) + (e + 2)".
Truthful reporting dominant strategy sellers one-sided VCG auctions. Therefore
V CG(c1 , c2 , . . . , cn ) V CG(c1 , c2 , . . . , cn ).
result claim get
p p + (2e + 3)" V CG(c1 , c2 , . . . , cn ) + (3e + 5)".
Therefore playing 1 , s1 could gained (3e + 5)" worstcase payoff playing SB respect true cost c1 .

Appendix C. Proofs Section 6.2
Theorem 15. computation Mt performed time O(g|I|2 ). Moreover,
total time spent task throughout auction O(g|I|(|I| + )).
Proof. simplicity notations assume single (connected) GAI-tree.
extension multiple connected components immediate Mjt computed
separately.
functions ub pt GAI form, hence function bt = ub pt
GAI form. noted (Boutilier et al., 2001), functions
520

fiGAI Auctions

GAI form optimized using variable elimination schemes cost networks (Dechter,
1997). fact, GAI structure already tree, case optimization linear
size domain |I|. However, Mt includes sub-configurations
configurations within " max b (). find it, must find maximum bt , add
sub-configurations Mt , find best configuration already (that
is, maximal \ ) on. done following procedure, adapted
work Nilsson (1998):
1. i=1,. . . , g:
Define = { | 1 , . . . , i1 Mt
/ Mt }.
Find = arg maxi bt ().
2. best configuration \ = arg maxi=1,...,g bt ( ) (which means, configuration least one sub-configuration Mt ).
bt ( ) max bt () ", sub-configuration already Mt
added Mt . Otherwise, Mt ready.
procedure performs g optimizations, takes linear size domain. amounts O(g|I|). time procedure done, either least one
sub-configuration added Mt , Mt ready. Therefore number times
procedure done per round bounded number sub-configurations |I| plus one,
giving O(g|I|2 ) bound. Moreover, Mt monotonically increasing auction.
round, start Mt computed previous round. Throughout auction,
application procedure either yields new sub-configuration Mt , terminates
round, total number times procedure performed throughout auction
bounded |I| + , leading overall bound O(g|I|(|I| + )).

Appendix D. Relating MUI condition Complements
Substitutes
definitions utility independence (UI) condition MUI found elsewhere
(Keeney & Raiffa, 1976).
Definition 19. MUI-factor set MUI attributes solution
1+k =

n
&
(1 + kki ).
i=1

Keeney Raiffa (1976) (KR) show one MUI-factor addition
zero (Appendix 6B text). ensures soundness following adaptation
MUI representation theorem:9
Theorem D.1. Let set MUI attributes.
1. MUI-factor zero, u(A) =

%n

i=1 ki ui (ai ).

9. theorem adapted book Keeney Raiffa (1976), Theorem 6.1, page 289.

521

fiEngel & Wellman

2. Otherwise, let k ,= 0 MUI-factor.
!n
[kki ui (ai ) + 1] 1
u(A) = i=1
.
k

(D.1)

KR go point k > 0 define u" (A) = 1 + ku(A), strategically
equivalent function u(), turn (D.1) multiplicative representation.
done similar fashion k < 0. Further, show MUI known exist,
one elicitation query sufficient order determine whether form function
additive multiplicative.
following relationship allow us interpret MUI factor respect complements substitutes. result generalizes formalizes intuition given KR
case MUI two attributes.
Theorem D.2. Let set MUI attributes, MUI-factor k ,= 0.
k > 0 iff pairs attributes complements, k < 0 iff pairs
attributes substitutes.
Proof. proof based work Keeney Raiffa (1976), Theorem 6.1, explained below.
Assume u() normalized u(A0 ) = 0. attribute A, let
= {a}, know U I(a, a). Utility independence form leads following
functional form: exist functions f g that,
u(A) = f (a) + g(a)u(a, a0 )
instantiate form assignment a0 get
u(a0 , a) = f (a) + g(a)u(a0 , a0 ) = f (a)
Hence f (a) = u(a0 , a), g(a) =
u(A0 ) = 0, get

u(A)u(a0 ,a)
u(a,a0 )

g(a) =

(this development done KR).

u(A) u(a0 , a)
.
u(a, a0 ) u(a0 , a0 )

(D.2)

proof Theorem 6.1, KR define MUI-factor follows:
k=

g(a) 1
u(a0 , a)

denominator always positive. Furthermore, shown (D.2), g(a) > 1,
u(A) u(a0 , a) > u(a, a0 ) u(a0 , a0 ). particular means b a, b
complements, inequality holds holding fixed attributes b.
Similarly, g(a) < 1, b substitutes. Putting pieces together,
get desired result.

522

fiGAI Auctions

Figure 6: Efficiency AP function number sampling points used devise
additive approximation.

Appendix E. Optimal Regression Using Small Sample
show experiment supporting claim Section 7.3: larger set sampling
points one used linear regression utility function cannot improve
efficiency AP. Figure 6 shows efficiency AP function number
sampling points used, largest domain used experiments: 25 attributes
= 4 (e = 9 = 5). Similar results shown distributions FOPI
preferences. chart result 150 experiments 10 points x-axis,
largest number tests used.

References
Bacchus, F., & Grove, A. (1995). Graphical models preference utility. 11th
Conference Uncertainty Artificial Intelligence, pp. 310, Montreal.
Beil, D. R., & Wein, L. M. (2003). inverse-optimization-based auction multiattribute
RFQs. Management Science, 49, 15291545.
Bichler, M. (2001). Future e-Markets: Multi-Dimensional Market Mechanisms. Cambridge University Press.
Boutilier, C., Bacchus, F., & Brafman, R. I. (2001). UCP-networks: directed graphical
representation conditional utilities. 17th Conference Uncertainty Artificial
Intelligence, pp. 5664, Seattle.
Branco, F. (1997). design multidimensional auctions. RAND Journal Economics,
28 (1), 6381.
Braziunas, D., & Boutilier, C. (2005). Local utility elicitation GAI models. 21st
Conference Uncertainty Artificial Intelligence, pp. 4249, Edinburgh.
Che, Y.-K. (1993). Design competition multidimensional auctions. RAND Journal
Economics, 24 (4), 668680.
David, E., Azoulay-Schwartz, R., & Kraus, S. (2002). English auction protocol multiattribute items. Agent Mediated Electronic Commerce IV: Designing Mechanisms
Systems, Vol. 2531 Lecture Notes Artificial Intelligence, pp. 5268. Springer.
523

fiEngel & Wellman

Debreu, G. (1959). Topological methods cardinal utility theory. Arrow, K. J., Karlin,
S., & Suppes, P. (Eds.), Mathematical Methods Social Sciences, pp. 1626.
Stanford University Press.
Dechter, R. (1997). Mini-buckets: general scheme generating approximations automated reasoning. 15th International Joint Conference Artificial Intelligence,
pp. 12971303, Nagoya.
Dyer, J. S., & Sarin, R. K. (1979). Measurable multiattribute value functions. Operations
Research, 27, 810822.
Engel, Y. (2008). Structured Preference Representation Multiattribute Auctions. Ph.D.
thesis, University Michigan, Ann Arbor, MI.
Engel, Y., & Wellman, M. P. (2007). Generalized value decomposition structured
multiattribute auctions. 8th ACM Conference Electronic Commerce, pp. 227
236, San Diego.
Engel, Y., Wellman, M. P., & Lochner, K. M. (2006). Bid expressiveness clearing
algorithms multiattribute double auctions. 7th ACM Conference Electronic
Commerce, pp. 110119, Ann Arbor.
Fishburn, P. C. (1967). Interdependence additivity multivariate, unidimensional
expected utility theory. International Economic Review, 8, 335342.
Gonzales, C., & Perny, P. (2004). GAI networks utility elicitation. 9th International
Conference Principles Knowledge Representation Reasoning, pp. 224234,
Whistler, BC.
Hyafil, N., & Boutilier, C. (2006). Regret-based incremental partial revelation mechanisms.
21st National Conference Artificial Intelligence, pp. 672678, Boston, MA.
Keeney, R. L., & Raiffa, H. (1976). Decisions Multiple Objectives: Preferences
Value Tradeoffs. Wiley.
Koppius, O. (2002). Information Architecture Electronic Market Performance. Ph.D.
thesis, Erasmus University, Rotterdam, Netherlands.
Krantz, D. H., Luce, R. D., Suppes, P., & Tversky, A. (1971). Foundations Measurement,
Vol. 1. Academic Press, New York.
Milgrom, P. (2000). Putting auction theory work: simultaneous ascending auction.
Journal Political Economy, 108, 245272.
Nilsson, D. (1998). efficient algorithm finding probable configurations
probabilistic expert systems. Statistics Computing, 8 (2), 159173.
Parkes, D. C., & Kalagnanam, J. (2005). Models iterative multiattribute procurement
auctions. Management Science, 51, 435451.
Pearl, J. (1988). Probabilistic Reasoning Intelligent Systems: Networks Plausible Inference. Morgan Kaufmann.
Robu, V., Somefun, D. J. A., & La Poutre, J. A. (2005). Modeling complex multi-issue negotiations using utility graphs. 4th International Joint Conference Autonomous
Agents Multi-Agent Systems, pp. 280287, Utrecht.
524

fiGAI Auctions

Sandholm, T. (2007). Expressive commerce application sourcing: conducted $35 billion generalized combinatorial auctions. AI Magazine, 28 (3), 4558.
Sandholm, T., & Suri, S. (2006). Side constraints non-price attributes markets.
Games Economic Behavior, 55, 321330.
von Neumann, J., & Morgenstern, O. (1944). Theory Games Economic Behavior.
Princeton University Press.
Von Winterfeldt, D., & Edwards, W. (1986). Decision Analysis Behavioral Research.
Cambridge University Press.
Vulkan, N., & Jennings, N. R. (2000). Efficient mechanisms supply services
multi-agent environments. Decision Support Systems, 28, 519.
Wellman, M. P., Greenwald, A., & Stone, P. (2007). Autonomous Bidding Agents: Strategies
Lessons Trading Agent Competition. MIT Press.
Wellman, M. P., Osepayshvili, A., MacKie-Mason, J. K., & Reeves, D. M. (2008). Bidding strategies simultaneous ascending auctions. B. E. Journal Theoretical
Economics (Topics), 8 (1).

525


