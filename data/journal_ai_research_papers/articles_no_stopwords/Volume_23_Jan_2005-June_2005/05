journal artificial intelligence

submitted published

graduality argumentation
claudette cayrol
marie christine lagasquie schiex

ccayrol irit fr
lagasq irit fr

irit ups route de narbonne
toulouse cedex france

abstract
argumentation exchange valuation interacting arguments followed
selection acceptable example order take decision
make choice starting framework proposed dung purpose
introduce graduality selection best arguments e able
partition set arguments two usual subsets selected
non selected arguments order represent different levels selection basic idea
argument acceptable preferred attackers first
discuss general principles underlying gradual valuation arguments
interactions following principles define several valuation abstract
argumentation system introduce graduality concept acceptability
arguments propose acceptability classes refinement existing classes
taking advantage available gradual valuation

introduction
shown dung argumentation frameworks provide unifying powerful
tool study several formal systems developed common sense reasoning well
giving semantics logic programs argumentation exchange
valuation interacting arguments support opinions assertions applied
among others legal domain collective decision support systems negotiation
support
fundamental characteristic argumentation system interaction arguments particular relation attack may exist arguments example
argument takes form logical proof arguments proposition arguments
proposition advanced case attack relation relies logical
inconsistency
argumentation process usually divided two steps valuation relative
strength arguments followed selection acceptable arguments
valuation step usual distinguish two different types valuations
intrinsic valuation value argument independent interactions
arguments enables simply express extent argument
increases confidence statement supports see pollock krause ambler elvang fox parsons prakken sartor amgoud cayrol
kohlas haenni berzati pollock
c

ai access foundation rights reserved

ficayrol lagasquie schiex

example work krause et al following knowledge base
composed formula probability pairs
two arguments produced



arguments weight formula
weight
interaction valuation value argument depends attackers
arguments attacking attackers attackers defenders etc
several approaches proposed along line see dung amgoud
cayrol jakobovits vermeir besnard hunter differ
sets values used usually two values considered however
proposals use two values three values jakobovits vermeir
infinity values besnard hunter
example work besnard hunter set values
interval real line case set arguments
considering attacks attacks value argument
resp resp
intrinsic valuation interaction valuation often used separately according considered applications recent works however consider combination
approaches see amgoud cayrol karacapilidis papadias pollock

considering selection acceptable arguments usual distinguish
two approaches
individual acceptability acceptability argument depends
properties example argument said acceptable
attacker case interaction arguments considered
see elvang goransson et al context intrinsic valuation argument said acceptable better attackers
see amgoud cayrol
collective acceptability case acceptability set arguments explicitly
defined example acceptable set arguments may contain two
arguments form explanation conclusion pair one possible way
compute arguments see lin shoham vreeswijk pollock prakken sartor
simari loui elvang goransson fox krause kohlas et al amgoud
cayrol
weights probabilities weight argument probability conjunction
formulae argument weight probability disjunction
consider interactions corresponding attacks arguments exist
types interactions example arguments reinforce arguments instead attacking see karacapilidis papadias verheij kind interaction graduality
considered
initial knowledge base useless



figraduality argumentation

arguments one attacks interactions arguments used
dungs framework well suited kind allows
binary classification argument belongs belong acceptable set
clear except intrinsic valuations proposals allow gradual
notion valuation acceptability e low number levels describe values
acceptability usually binary aim therefore introduce graduality
two steps
however processes valuation selection often linked together
case selection done basis value arguments selection
defines binary valuation arguments therefore
first consider discuss general principles concerning definition gradual
interaction valuation define valuation abstract
argumentation system
introduce notion graduality definition acceptability
previously defined gradual valuations classical mechanisms
graduality already introduced argumentation systems instance
work pollock degrees justification beliefs computed arguments
sequences conclusive prima facie inferences arguments collected graph
node represents conclusion argument support link ties node nodes
inferred attack link indicates attack nodes degree
justification belief computed strength arguments concluding
belief strength arguments concluding attacker belief
work takes place abstract framework since consider argument
structure valuation interactions arguments directly
apply arguments
use framework defined dung set arguments binary attack
relation arguments use graphical representation argumentation systems see section gradualisation interaction valuations presented
section section consider different mechanisms leading gradual
acceptability sometimes relying gradual valuations defined section
conclude section
proofs properties stated sections given appendix

dungs framework graphical representation
consider abstract framework introduced dung argumentation system
r set arguments binary relation r called attack relation
consider ai aj ai raj means ai attacks aj aj attacked ai
denoted ai aj r
example besnard hunters valuation decide arguments whose
value selected mean value set values another possibility
different valuations interaction intrinsic accept argument value better
value attackers



ficayrol lagasquie schiex

argumentation system well founded infinite sequence
ai ai rai
interested structure arguments consider arbitrary
attack relation
notation r defines directed graph g called attack graph consider
set r set arguments attacking set r set
arguments attacked
example
system r defines following graph g root






definition graphical representation argumentation system let g
attack graph associated argumentation system r define
leaf attack graph leaf g argument without attackers
path attack graph path b sequence arguments c


ra

ran
b
length path n number edges used path
denoted lc
special case path whose length
set paths b denoted c b
r ai ai ra
r ai arai
word root used informal sense means graph paths
leading node term terms leaf branch path used
document standard graph theory may different definition usual terms
argumentation domain please see definition order know precise meaning document
definitions simply take account fact directed edges graph link attackers
attacked argument
leaf iff r
assume exists infinity paths assumption greatly simplifies handling
leaves later



figraduality argumentation

dependence independence root dependence path
consider paths ca c cb c b bm
two paths said dependent iff ai ca bj cb ai bj
otherwise independent
two paths said root dependent iff bm ai ca
bj cb ai bj
cycles attack graph cycle path c j
n j ai aj
cycle c isolated iff c b bra b c
two cycles ca cb b bm b interconnected
iff n j ai bj
use notions direct indirect attackers defenders notions introduced
inspired related definitions first introduced dung strictly
equivalent
definition direct indirect attackers defenders argument consider

direct attackers elements r
direct defenders direct attackers elements r
indirect attackers elements ai defined
c c ai lc k k
indirect defenders elements ai defined
c c ai lc k k
argument attacker direct indirect argument b say
attacks b b attacked way argument defender
direct indirect argument b defends b b defended
note attacker defender example attacks attacks
attacks way direct attacker indirect attacker
example attacks attacks attacks attacks
thing may occur defenders
definition attack branch defence branch argument consider
attack branch resp defence branch path g leaf whose
length odd resp even say root attack branch resp defence
branch
definition cycle corresponds definition elementary cycle graph theory
elementary cycle contain edges initial extremity ending extremity
dungs work direct attackers resp defenders indirect attackers resp defenders
true definitions



ficayrol lagasquie schiex

note notion defence basis usual notion reinstatement b attacks
c attacks b c reinstated reinstatement taken
account indirectly value argument c possibility selecting
c increased thanks presence
notions illustrated following example
example

graph g see
path c whose length c b
cycles length
isolated note
cycle definition
two previous cycles interconnected
paths c b c b independent
paths c b c b root dependent
paths c b c b dependent
c e leaves g
c b attack branch whose length
c b defence branch whose length
c b b direct attackers
c c already direct attacker c
direct defenders
two indirect attackers
e indirect defender










b

b

c



c

c



e

graduality interaction valuations
consider two different valuation methods taking account quality attackers
defenders argument order define value argument
interaction arguments
first value argument depends values direct
attackers argument therefore defenders taken account
attackers called local
second value argument represents set attack
defence branches argument called global
main difference two approaches illustrated following example


c

c

b

b

c

pursue work initiated cayrol lagasquie schiex c propose improvements



figraduality argumentation

local b two direct attackers c c whereas b one
c thus b better b since b suffers one attack whereas b suffers two attacks
global two branches one attack one defence lead b whereas
one branch attack leads b thus b better b since least one
defence whereas b none case c loses negative status attacker since
fact carrying defence b
local generic valuation
existing proposals already considered examples local valuations
jakobovits vermeirs labelling set arguments assigns
status accepted rejected undecided argument labels set
resp represents accepted resp rejected undecided status intuitively
argument labelled supported weakened
definition jakobovits vermeirs labellings let r argumentation system complete labelling r function lab

lab b r lab b
lab b r r lab b
underlying intuition argument weakened label one
direct attackers supported condition argument get support
direct attackers weakened argument supported label weakens
arguments attacks condition





attacker lab
lab b r lab b
b r lab b lab
lab b r r lab b

every argumentation system completely labelled associated semantics
acceptable set arguments iff exists complete labelling lab r
lab
types labellings introduced jakobovits vermeir among
called rooted labelling induces corresponding rooted semantics idea
reject arguments attacked accepted arguments attack undecided
argument rooted since undecided attacker may become rejected
definition jakobovits vermeirs labellings continuation
complete labelling lab rooted iff lab b r
lab b
rooted semantics enables clarify links semantics introduced
jakobovits vermeir semantics introduced dung


ficayrol lagasquie schiex

example following example








n even obtain lab lab lab lab
lab lab
n odd obtain lab lab lab lab
lab lab
another type local valuation introduced recently besnard hunter
deductive arguments characterised follows argument
structured pair hsupport conclusioni support consistent set formulae
enables prove formula conclusion attack relation considered strict
cycles allowed notion tree arguments allows concise
exhaustive representation attackers defenders given argument root tree
function called categoriser assigns value tree arguments value
represents relative strength argument root tree given attackers
defenders another function called accumulator synthesises values assigned
argument trees whose root argument resp given conclusion
phase categorisation therefore corresponds interaction valuation besnard
hunter introduce following function cat
r cat
r r cat


cat cat

intuitively larger number direct attackers argument lower value
larger number defenders argument larger value
example continuation obtain
cat
n cat cat cat cat

n value inverse golden ratio

n even cat cat cat cat cat
n odd cat cat cat cat cat
local valuations generalisation two previous proposals
sense besnard hunters cat function jakobovits vermeirs
labellings instances
main idea value argument obtained composition two
functions
one aggregating values direct attackers argument
function computes value direct attack
computing effect direct attack value argument
value direct attack increases value argument decreases
value direct attack decreases value argument increases
golden ratio famous number since antiquity several interesting properties
several domains architecture example



figraduality argumentation

let w totally ordered set minimum element vmin subset v w
contains vmin maximum element vmax
definition generic gradual valuation let r argumentation system
valuation function v v
v vmin
r v vmax
r v g h v v
h v w v denotes set finite sequences elements v
h x x
h vmin
permutation xi xin x xn h xi xin h x xn
h x xn xn h x xn
xi x h x xi xn h x x xn
g w v
g vmin vmax
g vmax vmax
g non increasing x g x g
note h x xn max x xn logical consequence properties
function h
first property function g explains behaviour local valuation case
argument root one branch example
property function g satisfies n
g vmax g vmax g n vmax g n vmax g vmax vmax
moreover g strictly non increasing g vmax vmin previous inequalities
become strict
second property shows local valuation induces ordering relation arguments
property complete preordering let v valuation sense definition
v induces complete preordering set arguments defined b iff
v v b
third property handles cycles
complete preordering means two elements comparable



ficayrol lagasquie schiex

property value cycle let c isolated cycle attack graph whose
length n n odd arguments cycle value value
fixpoint function g n even value argument cycle
fixpoint function g n
following property shows underlying principles satisfied local valuations
defined according schema
property underlying principles gradual valuation given definition respects following principles
p valuation maximal argument without attackers non maximal
attacked undefended argument
p valuation argument function valuation direct attackers
direct attack
p valuation argument non increasing function valuation direct
attack
p attacker argument contributes increase valuation direct
attack argument
last properties explain jakobovits vermeir besnard hunter
propose instances local valuation described definition
property link jakobovits vermeir
every rooted labelling r sense jakobovits vermeir
defined instance generic valuation
v w
vmin
vmax
g defined g g g
h function max
property link besnard hunter gradual valuation besnard
hunter defined instance generic valuation
v
w
vmin
vmax

g w v defined g x x
h defined h x xn x xn


figraduality argumentation

note work besnard hunter valued graphs acyclic however easy valuation proposed besnard hunter
generalised graphs cycles case must solve second degree equations see
example

















































b b b









































c

c





c
c







































































































































e















































































example consider following graph

b

example generic valuation obtain
v e v v v c v b vmax
v v c v c v b g vmax
v c v b g vmax
v b g h g vmax g vmax
v g h g h g vmax g vmax g vmax g vmax vmax

e c b

c b

c c b
however constraints v v b insufficient compare b
arguments
exists reduce example hatched part graph
previous figure obtain e c c b cannot compared
arguments
use instance generic valuation proposed besnard hunter
v e v v v c v b
v v c v c v b
v c v b
v g h g vmax g vmax v b g h g vmax g vmax



ficayrol lagasquie schiex



v b

v


e c b

c b

c c b

b


however reduce example hatched part graph value

v better v b v v c becomes better
defender
example isolated cycle consider following graph reduced isolated cycle


b



generic valuation gives v v b fixpoint g
use instance proposed besnard hunter v v b solutions
following second degree equation
x x


obtain v v b
inverse golden ratio

global tuples
consider second valuation step called global
key idea value must describe subgraph whose root
want memorise length branch leading tuple attack branch
odd integer defence branch even integer
main constraint must able identify branches
leading argument compute lengths easy case
acyclic graph therefore introduce first global gradual valuation acyclic graphs
next sections extend proposition case graphs cycles
study properties global gradual valuation
gradual valuation tuples acyclic graphs
first order record lengths branches leading arguments use
notion tuples define operations tuples


figraduality argumentation

definition tuple tuple sequence integers tuple

z

denoted tuple denoted

z






notation denotes set tuples built positive integers
definition operations tuples two kinds operations tuples
concatenation two tuples defined function


x xn x x n sort x xn x x n
sort function orders tuple increasing values
addition tuple integer defined function




k k
k

x xn k x k xn k

x xn k x k xn k x xn
note allow infinite tuples among reasons needed later
order compute ordering relations described section particular
graph cyclic
operations tuples following properties
property properties
concatenation commutative associative
tuple integers k k k k k k
integer k tuples different k k k
order valuate arguments split set lengths branches leading
argument two subsets one lengths defence branches even integers
one lengths attack branches odd integers captured
notion tupled values
definition tupled value tupled value pair tuples vt vtp vti
vtp tuple even integers ordered increased values tuple called even
component vt
vti tuple odd integers ordered increased values tuple called odd
component vt
otherwise false p k p k whereas k p k k p k k p k



ficayrol lagasquie schiex

notation v denotes subset tupled values vt v vt pair
tuples satisfying definition
notion tupled values define computation process gradual
valuation tuples case acyclic graphs
definition valuation tuples acyclic graphs let r argumentation system without cycles valuation tuples function v v

leaf

v

direct attackers denoted b bn
v vp vi

vp vi b vi bn
vi vp b vp bn

notes choice value leaves justified fact value
argument memorises lengths branches leading argument
constraint vp vi may empty
note set direct attackers argument infinite property
used take account argumentation graph cycles
example graph valuation tuples gives following

b

b

c



graph g

c

c



v v c v e
v c v
v c
v b
v b
v

e

definition different definition given cayrol lagasquie schiex c ideas
formalisation different
proof following
leaf least one tuples empty exists least one branch
whose length leading see definitions
leaf exists least one defence branch path
allowed length fact infinity paths see definition attack
branch leading leaf see definition
value leaf impossible vp vi



figraduality argumentation

study cycles
handling cycles raises important issues notion branch useful
cycle example unattacked cycle examples notion
useful length branch defined different ways
let us consider different examples
example unattacked cycle graph reduced unattacked cycle b
attacks argument c


b

c

notion branch useless case leaf graph
two possibilities
first one consider cycle infinite branch resp b
root one branch whose length parity length branch
undefined impossible say branch attack branch defence
branch
second possibility consider cycle infinity branches
resp b root infinity attack branches defence branches whose
lengths known finite
second possibility means cycle may two representations acyclic
infinite graphs one root one root b
rewriting process cycle
b



b

b

b







b

b

b







b

b

b







b



ai bi must arguments created rewriting process cycle
example attacked cycle cycle b attacked least one argument
belong cycle attacker unattacked argument


ficayrol lagasquie schiex





b

c

e

case notion branch useful exists one leaf graph
difficulty compute length branch example consider
one infinite branch impossible know branch attack
defence branch infinity attack branches defence branches
whose lengths known finite
second case graph rewritten following structures












b







b







b

b

b

b









b

c

e

ai bi must arguments created rewriting process graph
previous examples chosen manage cycle infinity attack
branches defence branches whose lengths known finite would
able apply definition cases acyclic graphs graphs cycles however
need rewriting process graph cycles acyclic graph two
different cases one unattacked cycles one attacked cycles
definition rewriting unattacked cycle let c
unattacked cycle graph g contains c rewritten follows


figraduality argumentation

cycle c removed
replaced infinite acyclic graphs one ai n


ai


ai

ai

ai








ai n


ai n



ai n
n

ai n

ai n


ai nn

ai nn



ai n


ai n



ai n
n

ai n
n

ai n
n













edges ai argument belong c kept
example unattacked cycle continuation graph g containing unattacked
cycle b argument c attacked rewritten follows
c










b







b









b

b

b

b

b








alk bkl arguments
definition rewriting attacked cycle let c
attacked cycle direct attacker ai denoted bi exists graph g
contains c rewritten follows
cycle c removed
replaced infinite acyclic graphs one ai n


ficayrol lagasquie schiex


bi


ai


b n mod n

ai






ai n


ai n



ai n
n


ai n

ai n


ai nn

ai nn

bi

b mod n

ai n


ai n



ai n
n

ai n
n

ai n
n


b n mod n















branches leading bk exist iff bk exists
edges ai argument belong c kept
edges bi argument belong c kept
example attacked cycle continuation graph g containing cycle
b attacked argument argument c resp e attacked
resp b rewritten follows
e

b

c























b














alk bkl arguments
operator mod modulo function




b

b

b



b

b

b

b

b
















figraduality argumentation

note exist several cycles graph two cases
interconnected rewrite cycle valuation resulting
graph rewriting depend order cycles select rewrite
valuation process uses length branches
interconnected considered metacyle turn attacked unattacked previous methodology used leading
complex rewriting process formalized see details examples
appendix b
gradual valuation tuples general graphs
definitions given sections gradual valuation tuples
given definition applicable arbitrary graphs rewriting process
let us apply rewriting process definition different examples
example unattacked cycle continuation
consider following graph


b

c

rewriting graph given section
definition produces
vp vi vi
vi vp vp
applying definition different arguments rewritten graph produces following
equalities
v ann n
v ann n


v
n vp vi n n

equalities formulae giving vp vi define two sequences tuples sequence xk k infinite tuples even integers sequence
yk k infinite tuples odd integers
n
xk vi k
k vi k
n
yk vp k
k vp k



ficayrol lagasquie schiex

stated property easy prove vp x k
xk xk
similarly vi k yk yk
equations enable prove
even integer p p p belongs tuple xi
odd integer p p belongs tuple yi

proof done induction p
v v b
v c
note readily extended unattacked cycle length n
n
property properties unattacked cycles
unattacked cycle argument cycle v
example attacked cycle continuation

consider following graph





b

c

e

rewriting graph given section
definition produces
vp vi vi vi n

vi vp vp vp n


v
v ann n
done treatment example formulae giving vp vi rewritten
order bring light interesting sequences tuples


figraduality argumentation

k p

x k vi k
k vi k
k p

yk vp k
k vp k
easy prove vp x k x k x k


similarly vi k yk yk

first equation enables prove x empty tuple
second equation already solved produces
v b reason v b
v c v e
notation order simplify writing repeat values inside tuples
indicate value many times appears example

denoted
z
z
z
z
z
z













conclusion cycles cycles expensive since values obtained infinite
appendix b introduce computing tupled values uses
process value propagation parameterised maximum number runs
cycle number used order stop propagation mechanism
obtain finite thus incomplete tupled values
comparison tupled values
section define comparison relation arguments particular tupled values following idea argument better argument
b iff better defence lower attack
first idea use lexicographic ordering tuples lexicographic ordering
denoted lex defined
proof following
x contains even integers
k x k since x k addition tuple integer
x empty let e denote least even integer present x x x x empty
e denote least integer present x e e able build
sequence positive even integers e e strictly decreasing impossible
x



ficayrol lagasquie schiex

definition lexicographic ordering tuples
let x xn ym finite infinite tuples
x xn lex ym iff
j xj yj
yi exists
tuple x xn finite number elements equal
xi exist
xi exists xi yi
x xn lex ym iff tuples contain number p
elements p xi yi
define x xn lex ym iff
x xn lex ym x xn lex ym
ordering lex generalisation classical lexicographic ordering see xuong
case infinite tuples ordering complete well founded
exist infinite sequences strictly non increasing lex lex lex
lex lex
since even values odd values tupled value argument play
role cannot use classical lexicographic comparison compare tupled
values two steps
first step compares number attack branches number defence
branches argument two criteria one defence
attack criteria aggregated cautious method conclude
one arguments defence branches better according defence
criterion less attack branches argument better according
attack criterion note conclude positively criteria
agree one arguments defence branches better according
defence criterion attack branches argument worse
according attack criterion arguments considered incomparable
else arguments number defence branches number
attack branches second step compares quality attacks
quality defences length branch comparison made
lexicographic principle see definition gives two criteria
aggregated cautious method case disagreement arguments
considered incomparable
let us consider examples
better less attack branches first
tupled value second tupled value numbers defence branches
first step
incomparable less defence branches
less attack branches first tupled value second tupled value first
step


figraduality argumentation

better weaker attack branches first
tupled value second tupled value attack branch first tupled
value longer one second tupled value defence branches
second step lexicographic comparison applied even parts
odd parts tupled values
better stronger defence branches
first tupled value second tupled value defence branch shorter
first tupled value second tupled value attack branches
second step
incomparable worse attack branches
better defence branches first tupled value second tupled value
second step
comparison arguments done implements principle
double comparison first quantitative qualitative two criteria one defence
criterion one attack criterion cautious method
comparison two tupled values
description parameters
v w tupled values
notations

vp resp wp number elements even component v resp w

vp resp wp infinite vp resp wp taken equal

vi resp wi number elements odd component v resp w

vi resp wi infinite vi resp wi taken equal

usual denote strict relation associated defined

v w iff v w w v











begin
v w v w w v
case

else

vi wi vp wp
lexicographic comparisons vp wp vi wi

vp lex wp vi lex wi v w
case

else

vp lex wp vi lex wi v w
case

else v w v w
incomparable tupled values case








else
vi wi vp wp v w
case
else
vi wi vp wp v w
case
else v w v w
incomparable tupled values case

end

defines partial preordering set v
property partial preordering defines partial preordering
set v


ficayrol lagasquie schiex

tupled value maximal value partial preordering
tupled value minimal value partial preordering
notation partial preordering set v induces partial preordering
arguments partial preordering denoted partial preordering
v b v v b
order present underlying principles satisfied global valuation first
consider different ways modifying defence part attack part argument
definition adding removing branch argument
let argument whose tupled value v vp vi vp xp xpn
vi xi xim vp vi may empty simultaneously
adding resp removing defence branch defined
vp becomes sort xp xpn xpn xpn length added branch resp
j n vp becomes xp xpj xpj xpn
thing vi adding resp removing attack branch
definition increasing decreasing length branch argument
let argument whose tupled value v vp vi vp xp xpn
vi xi xim vp vi may empty simultaneously
increasing resp decreasing length defence branch defined
p
p
p
p
j n vp becomes xp xpj x p
j xj xn xj xj resp
p
p
p
x p
j xj parity xj parity xj
thing vi increasing resp decreasing attack branch
definition improvement degradation defences attacks
let argument whose tupled value v vp vi vp vi may
empty simultaneously define
improvement resp degradation defence consists
adding defence branch initially vp resp removing
defence branch
decreasing resp increasing length defence branch
removing defence branch leading resp adding defence branch leading initially vp
improvement resp degradation attack consists
adding resp removing attack branch
decreasing resp increasing length attack branch
property underlying principles let v valuation tuples definition
associated v respects following principles
p valuation maximal argument without attackers non maximal
argument attacked whether defended
use notation b defined b iff b



figraduality argumentation

p valuation argument takes account branches rooted
argument
p improvement defence degradation attack argument leads
increase value argument
p improvement attack degradation defence argument leads
decrease value argument
example continuation

valuation tuples obtain

v e v v v c v b
v v c v c v b
v c v b
v b
v

e c b

c b

b

c c b



e c b



incomparable almost arguments except leaves graph
similarly hatched part graph obtain following
e c b c
comparable arguments particular worse
defender c direct attacker b
main differences local global valuations
cayrol lagasquie schiex c give comparison approaches existing approaches dung jakobovits vermeir besnard hunter
comparison local approaches global improvement
global proposed modify main
comparison
let us recall example essential point differentiates example
already presented beginning section


c

c

b
c



b

ficayrol lagasquie schiex

local b better b since b suffers one attack whereas b suffers
two attacks
global b better b since least defence whereas b
none case c loses negative status attacker since fact carrying
defence b
following table synthesises different proposed valuations
global
arguments
ing
branches

havattack



arguments
attack
branches

defence
branches



arguments
defence
branches



arguments
never attacked

local
arguments
arguments
havonly one attacked
ing

one


direct
attacker
unattacked direct
possibly
defended
attacker
arguments several attacked direct attackers possibly defended

arguments
several unattacked
direct attackers



arguments
never attacked

difference local approaches global illustrated
following property
property independence branches global
let argument following direct attackers
whose value v p pm im



whose value v anp anpmn ani animn
let argument following direct attackers
p whose value v p p

pm whose value v pm pm






whose value v

im whose value v im im




anp whose value v anp anp



figraduality argumentation

anpmn whose value v anpmn anpmn
ani whose value v ani ani

animn whose value v animn animn
v v
property illustrates independence branches computation
values global even branches graphically independent
following example value though root
different subgraphs
c

c
b

b



c

c

b

property satisfied local since underlying principles
local see property value argument must least
good sometimes better value argument one direct
attacker two direct attackers
conclusion valuation step
proposed two different gradual valuation able make
distinction different arguments preordering associated valuation
model valuations used selection arguments see section

graduality acceptability
section shift selection step introduce graduality notion
acceptability
basic idea select argument depending non selection direct attackers
following idea propose two different methods
first method consists refining classical partition issued dungs collective acceptability refinement may achieved gradual valuations
defined section
second method takes place individual acceptability consists defining
acceptability gradual valuations defined section
dungs collective acceptability
framework collective acceptability consider acceptability set
arguments acceptability defined respect properties sets
satisfy properties called acceptable sets extensions argument
said acceptable belongs extension
valuation proposed besnard hunter obtain v v
work presented workshop cayrol lagasquie schiex b



ficayrol lagasquie schiex

definition basic properties extensions following dung
let r argumentation system
conflict free set set e conflict free b e arb
collective defence consider e e collectively defends
b bra c e crb e defends elements
e e collectively defends
dung defines several semantics collective acceptability mainly admissible
semantics preferred semantics stable semantics corresponding extensions
admissible sets preferred extensions stable extensions
definition semantics extensions following dung let r
argumentation system
admissible semantics admissible set set e admissible e
conflict free e defends elements
preferred semantics preferred extension set e preferred extension
e maximal set inclusion among admissible sets
stable semantics stable extension set e stable extension e
conflict free e attacks argument belong e e
b e bra
note definitions attacker given argument considered
separately direct attack whole considered dung proves
admissible set r included preferred extension r
exists least one preferred extension r
r well founded one preferred extension
stable extension
stable extension preferred extension converse false
stable extension
property set leaves e r included every preferred extension every stable extension
different levels collective acceptability
given semantics following dung acceptability argument depends
membership extension semantics consider three possible cases
terminology used section used domain nonmonotonic reasoning see pinkas
loui word uni comes word universal synonym word skeptical
word exi comes word existential synonym word credulous
chosen use words uni exi recall logical quantificators exists
least one



figraduality argumentation

argument uni accepted belongs extensions semantics
argument exi accepted belongs least one extension
semantics
argument accepted belong extension
semantics
however three levels seem insufficient example concluded
case two arguments b exi accepted arb bra
introduce definition takes account situation argument
w r attackers refines class exi accepted arguments given
semantics
definition cleanly accepted argument consider cleanly accepted
belongs least one extension b bra b
belong extension
thus capture idea argument better accepted attackers
accepted
property consider semantics extension conflictfree uni accepted cleanly accepted converse false
notion cleanly accepted argument refines class exi accepted arguments
semantics argument following states
uni accepted belongs extensions
cleanly accepted
cleanly accepted definition exi accepted note
possible argument uni accepted
exi accepted cleanly accepted exi accepted
accepted belong extension
example consider following argumentation system
two preferred extensions c g
j
c e g preferred semantics aci
ceptability
levels following
e

g
h



b

f

c

c

c g uni accepted
cleanly accepted uni accepted
e exi accepted
b c f h j accepted

note cases one extension first three levels acceptability coincide case
one extension fact belongs extensions equivalent
fact belongs least one extension moreover one extension containing
attackers belong extension cleanly accepted



ficayrol lagasquie schiex

preferred semantics even cycle see doutre
basic semantics another semantics proposed dung see dung
doutre presented one extension
looking closely prove following proof appendix
property stable semantics class uni accepted arguments coincides
class cleanly accepted arguments
issued work dunne bench capon
reused doutre shows odd cycle preferred
extensions stable apply property obtain following consequence
consequence preferred semantics odd cycle class
uni accepted arguments coincides class cleanly accepted arguments
finally exploitation gradual interaction valuations see section allows
us define levels collective acceptability
let v gradual valuation let associated preordering partial complete
preordering used inside acceptability level example level
exi accepted arguments order identify arguments better accepted
others
example continuation
graph

two different gradual valuations applied







j



e



h

g


b




c

f



c



besnard hunters valuation
instance generic valuation proposed besnard hunter see
section obtain following comparisons
c e g j c f h b
corresponds consistent argumentation system proposed dung



figraduality argumentation













j




e
h









g




























b

c



f

c



valuation tuples

global valuation tuples presented section obtain following comparisons
c g b f c
c e
c h e
c
c j
arguments belonging cycle incomparable g b f c even
comparison
apply preordering induced valuation without respecting acceptability
levels defined section counter intuitive situations may happen example
obtain
valuation besnard hunter preferred semantics
e g despite fact g uni accepted e exi accepted
valuation tuples preferred semantics h e despite
fact e exi accepted h accepted
counter intuitive situations illustrate difference acceptability definition valuation definitions even use interaction arguments
use way


ficayrol lagasquie schiex

towards gradual individual acceptability
individual acceptability comparison argument attackers
first proposal select argument attacker
see elvang goransson et al
later extended amgoud cayrol preference
relation arguments intrinsic valuation argument accepted
preferred attackers
following proposal propose mechanism interaction
valuation
given v gradual valuation preordering induced v directly used order
compare acceptability point view argument attackers
defines class acceptable arguments well defended arguments
definition well defended argument consider well defended v
b bra b
thus capture idea argument better accepted least good
direct attackers incomparable case partial ordering
set well defended arguments depend valuation used
notion set arguments partitioned three classes
first class contains arguments attacked
second class contains arguments attacked well defended
third class contains arguments attacked well defended
note set well defended arguments corresponds union two first
classes refinement uses gradual valuation inside classes
section
example presented section well defended arguments
c g h incomparable b better e valuation
tuples
though valuation besnard hunter well defended arguments
c g e e better
note semantics dung definition considers attackers
one one suitable valuation handles direct attack whole
valuation besnard hunter see counterexamples presented
section
idea used notion defeat proposed bench capon link
well defended argument argument attacked sense benchcapon direct attackers note work bench capon valuation
extra knowledge added argumentation framework contrast v preference extracted
attack graph



figraduality argumentation

compatibility acceptability gradual valuation
following previous sections set arguments partitioned two different
ways
first given semantics gradual valuation v possible use partition
issued dung refined
uni
accepted
cleanly
accepted

exi
accepted

onlyexi
accepted


accepted

refinement level gradual valuation v

second given gradual valuation v possible use partition induced
notion well defended arguments
attaked
welldefended
arguments

attaked
arguments


















welldefended





valuation
v
















unattacked
arguments

natural interesting question possible semantics gradual
valuation v associated partitions compatibilities
following examples class well defended arguments correspond class cleanly accepted arguments cases uni accepted
arguments even well defended


ficayrol lagasquie schiex

examples showing non compatibility general case
give examples usual valuation global valuation tuples instances
generic local valuation besnard hunter jakobovits vermeir
classical semantics acceptability preferred semantics stable semantics
dung
cleanly accepted argument well defended examples distinct valuation one global valuation two two well known instances
local valuation
argument cleanly accepted well defended






b

b

b


c

c




c




preferred stable extension c c c
b b b belong preferred extension
bi
forall

argument cleanly accepted well defended


c

preferred stable extensions c
b doesnt belong preferred extension
b





b




argument cleanly accepted well defended




b

c







h


e

f


g





preferred stable extension c f
g doesnt belong preferred extension
g


well defended argument cleanly accepted similarly three valuations

argument c well defended cleanly accepted







b
c


preferred stable extension b
c
b
c doesnt belong preferred stable extension

argument f well defended cleanly accepted


figraduality argumentation



preferred stable extensions h e b h f
f belongs preferred stable extension
f
e e belongs preferred stable extension
e attacks f


b



e

g




h


f


argument g well defended cleanly accepted




b

c








e

f


g





h


preferred stable extension c f
g
f
g doesnt belong preferred stable extension

particular cases leading compatibility
context argumentation system finite relation r without cycles
stable preferred semantics provide one extension levels uni accepted
exi accepted cleanly accepted coincide
context least two particular cases leading compatibility
first case deals global valuation tuples
theorem let g graph associated r r argumentation
system finite relation r without cycles satisfying following condition

xi leaf g one path xi xi xili xi xi
li length path li even path defence branch else
attack branch
paths xi root dependent
ai xj leaf g ai belongs path xj
let v valuation tuples let semantics preferred stable
b b b exi uni cleanly accepted iff b well defended v
exi uni cleanly accepted well defended v converse
false
well defended v branches leading defence branches
exi uni cleanly accepted
r well founded



ficayrol lagasquie schiex

note theorem general satisfied local valuation see following
counterexample valuation besnard hunter






b

c



b

c



b

c

graph satisfies condition stated theorem set well defended arguments
c c c well defended nevertheless c c c preferred
extension
second case second case concerns generic local valuation
theorem let r argumentation system finite relation r without
cycles let semantics preferred stable let v generic local valuation
satisfying following condition
n g xi xi g h x xn h x xn

exi uni cleanly accepted iff well defended v
theorem direct consequence following lemma
lemma let r argumentation system finite relation r without cycles
let semantics preferred stable let v generic local valuation satisfying
condition
exi accepted one direct attacker b b
ii b accepted b one direct attacker c c b
remark condition stated theorem
false local valuation proposed besnard hunter shown
following graph






know g x


x



b

c



b



b

c

c
h x xn ni xi

see property get

xi v bi
g xi g xi xi
nevertheless g h x x x v h x x x


figraduality argumentation

false local valuations defined h n h x xn
max x xn functions g strictly non increasing see previous graph
h x x x max x x x
true local valuations defined h max functions g h max
g h x xn g max x xn g xj xj maximum xi
assumption g xi xi xi particular xj get
g h x xn g xj xj max x xn h x xn

conclusion
introduced graduality two main related issues argumentation
systems
valuation arguments
acceptability arguments
regarding first issue defined two formalisms introducing interaction
gradual valuation arguments
first generic gradual valuation covers existing proposals example besnard
hunter jakobovits vermeir essentially local
since computes value argument value direct attackers
labelling takes form pair tuples
labelling memorises structure graph representing interactions
attack graph associating branch length number edges
leaf current node attack graph length branch even
integer branch defence branch current node otherwise branch
attack branch current node said global since
computes value argument whole attack graph influencing
argument
shown valuations induces preordering set arguments brought light main differences two approaches
regarding second issue two distinct approaches proposed
first context collective acceptability dung three levels
acceptability uni accepted exi accepted accepted already defined
graduality introduced collective acceptability notion cleanlyaccepted arguments whose direct attackers accepted
context individual acceptability previously defined gradual
valuations notion well defended arguments introduced
preferred direct attackers sense given gradual valuation
v
first concept induces refinement level exi accepted two sublevels cleanlyaccepted arguments exi accepted arguments gradual valuation allows graduality inside level collective acceptability


ficayrol lagasquie schiex

second concept induces two levels acceptability well defended arguments
well defended arguments gradual valuation allows graduality inside
level individual acceptability
regarding initial purpose introducing graduality definition acceptability
adopted basic principle
acceptability strongly related interactions arguments represented
graph interactions
argument acceptable preferred direct attackers
followed two different directions one refinement existing
partition remains framework dungs work one
original concept well defended deserves investigation particular
computational point view

acknowledgements
thanks reviewers interesting constructive comments
thanks thomas schiex help

appendix proofs
section give proofs properties presented sections
proof
property induction vmin g vmax vmax applying
function g twice


proof
property valuation function v associates argument
value v belonging set v subset completely ordered set
w


proof
property let c cycle
n even n k v g v g k v k
g k v v fixpoint g k g n ai
k
however ai may different values example n
valuation jakobovits vermeir v v
g g ai value
value fixpoint g v g v g v


figraduality argumentation

n odd n k v g v g k v k
g k v v fixpoint g k g n
ai k
since function g non increasing function g k nonincreasing apply following non increasing function fixpoints fixpoints identical v
v k v g v g v v fixpoint g
k v ai fixpoint g

proof
property
p satisfied direct attacker r empty
v vmax g vmax vmax
p satisfied r h v v evaluates
direct attack
p satisfied function g supposed non increasing
p satisfied due properties function h



proof
property valuation proposed jakobovits vermeir
following
let r argumentation system complete labelling r
function et
et b r et b

et b r r et b
moreover jakobovits vermeir define complete rooted labelling
et et b r et b

translation et local gradual valuation easy

g defined g g g h function max



proof
property besnard hunter introduce following function
cat context deductive arguments acyclic graph
r cat
proof let g non increasing function let two fixpoints g may suppose
g g since g non increasing since fixpoints g
contradiction assumption



ficayrol lagasquie schiex

r r cat


cat cat

translation cat gradual valuation v w

h
vmin vmax g w v defined g x x
defined h x xn x xn

proof
property let x xn yn z zn
tuples
commutativity two cases
property given definition

sort x xn yn
sort yn x xn

associativity two cases
simplify expression example




sort x xn yn z zn

property k k k k
k k x k xn k k

x k k xn k k

k k
distributivity k k k
k sort x xn x x n k

sort x k xn k x k x n k

k k




figraduality argumentation

proof
property first relation defined
partial ordering
let u v w three tupled values relation defined
reflexive u u u u u u u u case

transitive suppose u v v w consider
possible cases
u v
v w u w u w
vi wi vp wp vi ui wi
vp wp u w
vi wi vp wp vi ui wi
vp wp u w
vi wi vp wp vp lex wp
vi lex wi vi ui wi vp wp
vp lex wp vi ui lex wi u w
ui vi vp
v w ui vi wi vp wp
u w
vi wi vp wp ui vi wi
vp wp u w
vi wi vp wp ui vi wi
vp wp u w
vi wi vp wp ui vi wi
vp wp u w
ui vi vp
v w ui vi wi vp wp
u w
vi wi vp wp ui vi wi
vp wp u w
vi wi vp wp ui vi wi
vp wp u w
vi wi vp wp ui vi wi
vp wp u w
ui vi vp lex vp ui lex
vi
v w ui vi wi vp wp
lex vp wp ui lex vi wi u w
vi wi vp wp ui vi wi
vp wp u w


ficayrol lagasquie schiex

vi wi vp wp ui vi wi
vp wp u w
vi wi vp wp vp lex wp
vi lex wi ui vi wi vp wp
lex vp lex wp ui lex vi lex wi
u w
cases u w
consider maximal minimal values
tupled value unique maximal element preordering
let v tupled value v vp vi
compare v v case number
used vi vp two
cases
vp vi case applied
v
else vp vi case applied
v
tupled value unique minimal element preordering
let v tupled value v vi vp
compare v v case number
used vp vi two
cases
vi vp case applied
v
else vi vp case applied
v

proof
property principle p satisfied definition
fact unique maximal element v see property
principle p satisfied definition
principles p p satisfied possible cases improvement degradation defence attack given argument see definition
applied case case case leads argument comparison argument application
case shows principle p p depending applied case
work case case order avoid complex cases several simultaneous simple
modifications example modification length branch changes status
branch even integer replaced odd integer complex case corresponding two simple cases
removal branch given status addition branch different status



figraduality argumentation

satisfied



proof
property definition



proof
property first consider case preferred extensions let
e preferred extension assume e contain
unattacked arguments let unattacked argument
e
consider e
e conflict free unattacked argument e
preferred extension e collectively defends e
admissible e e contradicts fact e preferred
extension
e contains least one conflict

b e bra impossible since unattacked
b e arb since unattacked c e
cra e collectively defend b
contradiction fact e preferred extension

assumption e contain unattacked arguments
cannot hold
consider stable extensions let e stable extension assume
e contain unattacked arguments let
unattacked argument e
since e exists e another argument b attacks
impossible since unattacked
assumption e contain unattacked arguments
cannot hold


proof
property argument one direct attackers cannot belong
extension sense dung extension must
conflict free since uni accepted means belongs
extensions none direct attackers belongs extensions
converse use following counterexample case preferred
semantics


ficayrol lagasquie schiex

f



k

c

b
h

j

e

g

two preferred extensions
k h g e k h argument cleanly accepted b
c belong preferred extension belongs least one
two extensions
uni accepted belong
preferred extensions



proof
property first uni accepted cleanly accepted
property
conversely let cleanly accepted argument exists least one stable extension e e b bra b e e stable extension
reductio ad absurdum assume exists stable extension
e e e means b e bra
direct attacker b belongs stable extension contradiction assumption cleanly accepted e exist
uni accepted


proof
theorem
consider arguments b b let xi leaf
path c c xi xi xili xi xi li denoting
length path li even path defence branch else
attack branch
constraints xi xili following
xi xi xili xili xi xi li odd

xi xi xili xili xi xi li even
path xi xili set well defended arguments
xi xi xili li odd xi xi xili otherwise
set arguments value strictly better
direct attackers set denoted accepi
definition set conflict free defends elements
contains leaf path arguments defended
leaf attacks arguments path try


figraduality argumentation

include another argument path x xi xili accepi
obtain conflict arguments path attacked
elements accepi xi xili accepi
preferred stable extension
consider r restriction r
union accep accepi union accep preferred
stable extension r
b b b accepted iff b well defended

consider accepted union accep
preferred stable extension r xili belong
extension xili xili therefore branch leading
defence branch v xili li v
l l ln v v xili therefore well defended
following example converse false






b

c




b



c




b

c


well defended b b incomparable
accepted
well defended branches leading defence
branches union accep conflict free defended
direct attackers xili union accep
branch union accep preferred stable extension
r accepted


proof
lemma let r argumentation system finite relation
r without cycles one non empty preferred stable extension
denoted e know
exi accepted direct attacker denoted b b
accepted
r restriction r r b arb b



ficayrol lagasquie schiex

b accepted exists least one argument c
crb c exi accepted b belong e e
stable c must e fortiori b accepted
one direct attacker c c exi accepted
proof done induction depth proof tree c
basic case exi accepted one direct attacker b bra
c cn direct attackers b proof tree whose
depth one unattacked ci example c
v b g h v c v cn
g v c

h v c v cn h v c v c

g non increasing

g vmax

v c vmax



v g v b
g vmax
property says g vmax g vmax v v b
basic case ii crb c direct attacker b
proof tree whose depth c e c unattacked v c vmax
v b g vmax v c following definition
general case exi accepted one direct attacker b
bra c cn direct attackers b one ci exiaccepted example c consider subgraph leading c
add c rbra assume
g v c v c induction assumption issued ii


v b g h v c v cn
g v c
v c

reasons basic case
induction assumption

h v c v cn

property h

non increasing g

v g v b
g h v c v cn v b


figraduality argumentation

general case ii b accepted c exi accepted assume
c several direct attackers dp accepted
c exi accepted consider subgraph leading di
add di rcrb assume
p g v di v di induction assumption issued

v c g h v v dp
h v v dp

application condition
since induction assumption
corresponds premise


v b g v c
g h v v dp v c

proof
theorem assume true consider exiaccepted let bi n direct attackers
n subgraph leading bi completed bi ra apply
lemma obtain g v bi v bi n thus
v g h v b v bn
h v b v bn

v bi n

applying
property h

well defended
converse let well defended let b bn direct
attackers assume exi accepted exists
least one direct attacker bi bi exi accepted
one preferred stable extension apply ii lemma
subgraph leading bi completed bi ra obtain g v bi v bi
exists bi direct attacker

v g h v b v bn
g v bi

v bi

property h non increasing g
lemma


ficayrol lagasquie schiex

contradiction well defended exi accepted



appendix b computation tupled values
propose computing tupled values arbitrary graph cyclic
acyclic cycles may isolated uses principle propagation
values argument evaluated values direct attackers known
must consider cycles meta arguments evaluated direct
attackers cycle e direct attackers one elements cycle
belong cycle evaluated
beginning process follows consider arguments
initial value leaves graph marked final
values thus following partition graph g
gv part graph already evaluated beginning part contains
leaves graph
gv part graph evaluated beginning part contains
arguments graph g except leaves
relies special data structure denoted l giving list
cycles graph main characteristics
list arguments belong cycle
list arguments belong cycle direct attackers outside
cycle arguments called inputs cycle used
order propagate values across cycle case non isolated cycle
list empty case isolated cycle
remark sake efficiency interconnected cycles see definition
considered whole used meta cycle example
two cycles b b c b direct attacker outside
cycles described data structure l one meta cycle
following lists
b c
nothing isolated meta cycle
order avoid ambiguity meta cycles defined mcycles
definition mcycle let g attack graph let cc set cycles
g let cc cc cc c cn set cycles
let acc set aj ci cc aj ci
cc satisfies following properties
aj ak acc path aj ak element arguments edges
arguments path belongs cycles cc
ck cc cc ci cc ck interconnected ci


figraduality argumentation

union ci belonging cc mcycle
thus make partition cc notion interconnection cycles
element partition different mcycle see following example


j
c

b

e

f

g



k

l

graph cycles
j
j k
k l
b c
c e
f g
mcycles
j k l
b c e
f g
main used computing tupled values
function add node respectively remove node whose parameters subgraph
gx attack graph node adds resp removes resp gx
functions described cayrol lagasquie schiex
applied example step rewriting see figure note
order make understanding easier created
arguments definitions course would necessary rigorous
formalization



ficayrol lagasquie schiex

computing tupled values
description parameters

g attack graph partitioned gv gv

l data structure describing mcycles

n number propagation steps mcycles
used variables

current argument evaluated

c current mcycle evaluated containing

lad list direct attackers c

bi current direct attackers c

begin
least one argument gv

choose argument gv

belong mcycle c described l

bi r bi already evaluated

gv add node gv evaluate node r













gv remove node gv












value
value
direct attackers
add
see definition

else
c isolated
gv add mcycle gv evaluate mcycle isolated g c n
gv remove mcycle gv c

else
lad direct attackers mcycle c g
bi lad bi already evaluated
gv add mcycle gv
evaluate mcycle isolated g c lad n
gv remove mcycle gv c

return g
end











figraduality argumentation



c

b



e

g

f

previous argumentation graph rewritten follows









b

b

b

c



c



c



b

b



b

b

e

c

c

e

c

c

c











b

b



b

c



c

b



c



b

b

c

b

b

e



c

c

c

c

c

b

b

b




b

c





e

g
f

valuation obtained one propagation step
v
v b
v c
v
v e
v f
v g
figure example rewriting



ficayrol lagasquie schiex

references
amgoud l cayrol c acceptability arguments preference
argumentation cooper g f moral eds proc th uncertainty
artificial intelligence pp madison wisconsin morgan kaufmann
amgoud l cayrol c inferring inconsistency preference argumentation frameworks journal automated reasoning
bench capon j value argumentation frameworks benferhat
giunchiglia eds proc th international workshop nonmonotonic reasoning session argument dialogue decision pp toulouse france
besnard p hunter logic theory deductive arguments artificial
intelligence
cayrol c lagasquie schiex c critique et amelioration de levaluation
graduelle par tuples pour le traitement des circuits rapport de recherche r
institut de recherche en informatique de toulouse r france
cayrol c lagasquie schiex c b gradual acceptability argumentation
systems proc rd cmna international workshop computational
natural argument pp acapulco mexique
cayrol c lagasquie schiex c c gradual handling contradiction argumentation frameworks bouchon meunier b l foulloy yager r eds
intelligent systems information processing representation applications
chap reasoning pp elsevier
doutre autour de la semantique preferee des systemes dargumentation
universite paul sabatier irit
dung p acceptability arguments fundamental role nonmonotonic reasoning logic programming n person games artificial intelligence

dunne p e bench capon j coherence finite argument systems technical
report university liverpool department computer science u l c
dunne p e bench capon j coherence finite argument system artificial
intelligence
elvang goransson fox j krause p dialectic reasoning inconsistent
information heckerman mamdani eds proc th uai pp
washington dc morgan kaufmann
jakobovits h vermeir robust semantics argumentation frameworks
journal logic computation
karacapilidis n papadias computer supported argumentation collaborative decision making hermes system information systems
kohlas j haenni r berzati probabilistic argumentation systems
abduction proc th international workshop non monotonic reasoning
special session uncertainty frameworks non monotonic reasoning pp
breckenridge colorado


figraduality argumentation

krause p ambler elvang fox j logic argumentation reasoning
uncertainty computational intelligence
lin f shoham argument systems uniform basis non monotonic
reasoning proc first international conference principles knowledge
representation reasoning kr pp
parsons normative argumentation qualitative probability proc
first international joint conference qualitative quantitative practical reasoning ecsqaru fapr lnai pp germany
pinkas g loui r p reasoning inconsistency taxonomy principles
resolving conflict allen j fikes r sandewall e eds proc rd
kr pp cambridge morgan kaufmann
pollock j l reason defeasibly artificial intelligence
pollock j l defeasible reasoning variable degrees justification artificial
intelligence
prakken h sartor g argument extended logic programming defeasible priorities journal applied non classical logics
simari g loui r mathematical treatment defeasible reasoning
implementation artificial intelligence
verheij b existence multiplicity extension dialectical argumentation benferhat giunchiglia e eds proceedings th international
workshop non monotonic reasoning nmr pp
vreeswijk g abstract argumentation systems artificial intelligence
xuong n mathematiques discretes et informatique masson




