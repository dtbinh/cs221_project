journal artificial intelligence

submitted published

interactive execution monitoring agent teams
david e wilkins
thomas j lee
pauline berry

wilkins ai sri com
tomlee ai sri com
berry ai sri com

artificial intelligence center sri international
ravenswood ave menlo park ca usa

abstract
increasing need automated support humans monitoring activity
distributed teams cooperating agents human machine characterize domainindependent challenges posed describe properties domains influence
challenges solutions concentrate dynamic data rich domains humans ultimately responsible team behavior thus automated aid interactively
support effective timely decision making human present domain independent
categorization types alerts plan monitoring system might issue user
type generally requires different monitoring techniques describe monitoring framework
integrating many domain specific task specific monitoring techniques
concept value alert avoid operator overload
use framework describe execution monitoring used implement execution assistants eas two different dynamic data rich real world domains assist
human monitoring team behavior one domain army small unit operations hundreds
mobile geographically distributed agents combination humans robots vehicles
domain teams unmanned ground air vehicles handful cooperating robots
domains involve unpredictable adversaries vicinity customizes monitoring behavior specific task plan situation well user preferences
eas alert human controller reported events threaten plan execution physically threaten
team members alerts generated timely manner without inundating user
many alerts less alerts unwanted judged domain experts

introduction
automation reliable high bandwidth communication networks become common humans increasingly responsible monitoring controlling activity distributed teams
cooperating agents human machine control decisions many realistic domains
complex require human experience judgment vision human decision makers
able perform important tasks continuously monitoring incoming information
relying automated execution aid alert significant information warrants
attention primarily interested domains requiring human control describe
two domains however majority techniques analysis apply completely
automated execution monitoring fact one domains interact human
controller autonomously adjust robot behavior plans
rapidly make effective control decisions distributed agent teams human needs automated support several reasons first inexpensive sensors reliable high bandwidth communication networks provide large volumes pertinent data arriving sensors team members

c

ai access foundation morgan kaufmann publishers rights reserved

fiw ilkins l ee b erry

sources without automated support human cannot cope incoming
information second plans coordinate activity several team members many several
hundred first domain become complex monitor without automated help third
addressing domains dynamic sometimes requiring responses seconds less
fourth automated team members robots complex different failure modes recovery procedures automated support controlling often essential challenges
magnified tempo decision cycle increases user becomes stressed thus
domains properties require interactive automated assistant support humans
monitoring incoming information controlling agent teams
concentrate dynamic data rich domains humans ultimately responsible
team behavior realistic domains often adversaries overcome may range
fairly benign forces nature introduce uncertainty intelligent adversaries trying
actively thwart plans automated execution assistant interactively support effective
timely decision making human interact human take advantage knowledge
human possesses explicitly modeled machine ideally execution assistant
would allow human user among things
guide system minimal effort
focus external events assuming system alert user human attention
desirable
understand evaluate modify plans actions
understand action decision taken recommended rejected
system
constant multimodal feedback
recommend actions decisions violate constraints warranted
one key idea rich plan representations allow execution aid share context users
understand semantics plans requests understanding plan key helping
user deal possible information glut created advanced information systems
execution aid uses plan filter interpret react large incoming information
alert user appropriately events threaten plan users physical existence
user develops trust execution aid reduction need human
monitoring display information system simultaneously increasing amount
relevant information monitored aid analyzes every piece incoming data relying
alerts automated aid allows human pay attention important tasks
monitoring incoming data attending display alerted execution aid
next section characterize domain independent challenges posed
concentrating unique interactive execution aids dynamic domains distributed
teams cooperating agents describe properties domains influence
challenges solutions section present domain independent categorization
types alerts plan monitoring system might issue user next describe concept
value information alerts key reducing unwanted alerts alarms sections


fii nteractive e xecution onitoring agent eams

describe execution assistants implemented small unit operations robotics
domains respectively sections contain evaluations performed
domain finally discuss related work present conclusions

interactive monitoring challenges
great interest plan generation less work plans dynamically control execution much execution monitoring work describes monitors specific domains
first characterize domain independent challenges monitoring agent teams
several universal challenges execution monitoring particular dynamic data rich domains interactive monitoring issues part monitoring
ontology addressed eas stress discussion
discussed elsewhere kaminka pynadath tambe jonsson morris muscettola rajan
muscettola nayak pell williams myers wilkins myers lowrance
wesley coiera durfee huber kurnow lee issues include following
sensitivity monitor ability detect meet requirements system
must remain reactive incoming data performing monitoring tasks
temporal reasoning temporal sensitivity execution takes place time plans specify future actions thus making temporal reasoning central
concurrent temporal processes multiple tasks agents may executing concurrently
synchronization agents execution assistant must get right information
right team members right time support cooperative activity specified plan
domains may require plan recognition team members kaminka
et al
false redundant alarms unwanted alarms ubiquitous data rich domains
medicine koski makivirta sukuvaara kari tsien domains described
combining event driven goal driven behavior execution assistant must respond
unfolding events acceptable latency concurrently invoking actions continue execution perhaps modified plan satisfy user requests goal driven tasks
include responses events generating modified contingency plans
invoking standard operating procedures
adversarial reasoning including plan pattern recognition many real world domains
adversaries activity must closely monitored
concerned execution monitoring agent teams team members may
combination humans machines concentrate challenges unique
interactive execution aids dynamic domains categorize challenges following
four categories
adaptivity output execution assistant must meet human requirements preferences monitoring behavior providing high value alerts suggestions execution


fiw ilkins l ee b erry

monitoring sensitivity crucial interactive monitoring sensitivity monitor must
adaptable addition adapting user preferences analysis done execution
assistant level autonomy must adjustable operational tempo incoming data rate
system ideally adapt output users capabilities cognitive load
plan situation specific monitoring coordinating activities many teams members
requires plan shared team assume plans contain partial orders tasks
team member well necessary coordinating instructions commitments grosz
kraus plan representation encodes expected outcomes effects plan
execution execution aids detect deviations analysis done execution assistant
suggested responses must depend plan situation effective events
often cause plans others found monitoring
must often tailored specific tasks compose plans facilitate interaction plan
representations must understandable humans system although human might
aided multiple plan views internal representation user friendly interface
reactivity execution monitor must react events uncertainty introduced environment dynamic data rich domains particular care must taken ensure system
remains reactive high rates incoming information fast decision cycles resources
generally available perform desired analyses every input example projecting
future multiple simulation runs searching better plans may computationally
expensive often obvious boundaries types support execution aid might
provide real world domain therefore balance must struck capabilities provided resources used examples types issues arise practice
first domain coarse terrain reasoning used projections fine grained terrain data
computationally expensive robot domain adjust time quanta assigned
processes scheduler monitoring processes executed least every second finally domains dangerous intelligent adversaries reacting detected activity
becomes high priority considerable guaranteeing real time response
ash gold seiver hayes roth mouaddib zilberstein tradeoffs generally different every application usually critical aspect design execution
assistant
high value user appropriate alerts alerting every occurrence monitored condition
possibly relatively easy however user would quickly ignore assistant
gave many alerts challenge give false alarms inundate user
unwanted redundant alerts system must estimate utility information alerts
user give high value alerts present alerts manner appropriate value
users cognitive state found common challenge avoid cascading alerts events get
progressively away expectations along number dimensions time
space resource availability another challenge discuss depth aggregating
lower level data e g sensor fusion reduce number alerts consolidating inputs
estimates value alerts used adjust alerting behavior users cognitive load
interactive alerting execution naturally leads equally important challenging
topic human directing responses plan modifications monitoring technologies
used continuous frameworks wilkins et al myers limit
scope interactive alerting briefly mention ongoing
topic plan use conjunction execution aids


fii nteractive e xecution onitoring agent eams

agent systems interact humans active area issues discussed literature myers morley ferguson allen schreckenghost et al
myers morley example describe taskable reactive agent communities
trac framework supports human supervisors directing agent teams address topics
adjustable agent autonomy permission requirements consultation requirements
ability communicate strategy preferences guidance trac complementary execution
monitoring described
another active area fits naturally execution monitoring theories collaboration fact use sharedplans theory collaboration grosz kraus
second domain ortiz hsu direct agents conjunction execution monitor theory elements working together team well levels partial
information associated states evolving shared plan central theory sharedplans
notion agents committed providing helpful support team members within
theory notion helpful behavior formally defined ortiz work
collaboration complimentary monitoring discussed detail

monitoring determined domain features
domain features monitoring challenges concerned common many
domains addition robot teams small unit operations suo example occur
monitoring spacecraft bonasso kortenkamp whitney muscettola et al
monitoring medicine coiera icu patients anesthesia domains
data rich medical clinicians difficulty vast amount information
presented current monitoring systems weigner englund coiera
particular flooding human users false redundant alarms ubiquitous
medical monitoring koski et al tsien one study found alarms
pediatric icu false alarms tsien fackler false alarms distract humans
important tasks false alarm rate would likely make monitor useless fast paced
operations domains concentrated automated monitoring little
emphasis interactive monitoring
challenges described previous section apply interactive dynamic domains properties individual domains influence solutions one brief case study shows
features communication system use legacy agents indicate different
monitoring two similar kaminka et al address similar many geographically distributed team members coordinating plan dynamic
environment use applying plan recognition techniques observable actions team members rather communicating state information among team members
refer report monitoring
list four report monitoring kaminka et al intrusive modifications required legacy agents report state necessary state information changes
monitoring task monitored agents communication lines heavy computational bandwidth burdens assumes completely reliable secure communication
team members say main concern next
important



fiw ilkins l ee b erry

plan constraint violated
policy constraint violated
opportunity detected
adversarial activity detected
constraint violation opportunity adversarial activity projected
contingency plan suggested
system detected
reporting requirement triggered
figure top level categories alert ontology

domains use report monitoring agents already report state
easily modified example attaching global positioning gps devices
monitoring tasks performed reports already available although one imagine
adding functionality would change reporting requirements first domain
reports distributed situation awareness information management saim system
high bandwidth network saim uses novel peer peer p p dissemination
forward fusion sensor reports greatly reducing bandwidth requirements p p fault tolerant
allowing node server dissemination agents current task geographic
location relationship hierarchical organization team members
summary report monitoring works domains rely less unmodifiable legacy agents reliable communications enough bandwidth available
network dissemination kaminkas provides automated support
must address modeling value information user kaminkas
system extended interact humans believe alert ontology techniques
avoiding operator overload would applicable whether alerts come sources planrecognition reports rely humans ultimately responsible team
behavior require much state information complete reliability communication
unreliable communication degrade monitoring performance human decision maker
must take missing inputs account making decision execution assistant monitor
communications alert human possible communications

types alerts
alerts used focus users attention aspect situation execution aid
determined high value discuss determining value information
alerts later sections determines whether alert presented alert may
indicate response required may informative many different types alerts
given useful categorize alerts thus providing beginning reusable domainindependent ontology execution monitoring
figure shows top level categories alerts identified starting superset categories found useful two domains generalizing cover
broad range domains assumed execution directed plan shared
team categories generally require different monitoring techniques different responses


fii nteractive e xecution onitoring agent eams

detected example adversarial activity could subclass relevant
classes requires different monitoring techniques friendly location data precise within
error gps trustworthy adversarial data comes fusion engines running
data sensor networks adversarial data highly uncertain may come significantly different rates generally different determining value information
adversarial entities actively trying thwart plan perhaps trying kill
top level categories ontology generally differ along following dimensions
important monitoring
properties data sources reliability uncertainty
rates incoming data
method acquiring data receiving messages pulling data databases
plan recognition
monitoring including tradeoff complexity analysis reactivity
desired responses alerts
value information
different monitoring techniques category often domain specific even
task specific cases adapting monitoring tasks plan executed
monitoring framework integrates techniques uses concept value
alert control interaction user
briefly discuss top level categories provided next lower level
ontology space possibilities large domain specific concerns important
example adversarial alerts could include subclasses fixed mobile adversaries size
capabilities adversarial team alliance tightly coordinated adversarial team
adversarial intent plan forth later describe alerts given
implemented execution assistants eas fit categories
plan constraints plans provide expectations execution proceed
category richest set alerts fairly large hierarchical ontology could produced
describe different types alerts plan constraints gil blythe present domainindependent ontology representing plans plan evaluations concept evaluation
ontology could source alert evaluation becomes sufficiently important
user plans real world domains often hierarchical constraints different levels
layers may violated may desirable customize alerts hierarchical level
plan constraint question indicate range possible alerts category list
common examples
coordinating team member agent position late
effects agents team members actions achieved expected
team member retracted commitment perform certain task requiring reallocation
tasks resources


fiw ilkins l ee b erry

conditions required plan true expected
resources used plan available degraded
policy constraints real world domains persistent constraints policies
rules engagement must violated could considered part
plan representing maintenance conditions extend entire plan
significantly different practice often monitored different techniques may
require additional domain knowledge specialized monitoring must invoked
efficiently example domains never want human team members killed
robots destroyed therefore monitor physical safety agents times give
alerts user agent danger dangers adversarial agents covered
category however system alert user threats team members
fratricide local agents actions e g robots battery running low
opportunities even though current plan still executed without change may
possible generate better plan current situation opportunities arise determining
execution time update world state permits desirable plan difficult
general similar generating plan situation however real world domains
often methods detecting opportunities indicate plan revision might cost
effective example certain key features pop targets military domains
represent opportunities often encoded standard operating procedures sops
invoked triggered current situation improve plan react
events monitoring interactive avoid difficult decision whether
search better plan alerting user high value opportunities relying user
judge best response
adversarial activity category assumes team members operating environments adversaries trying actively thwart team plans adversaries dangerous
e g worthy human opponents reacting detected activity becomes top priority
experience merits customized monitoring recognizing immediate threats team
members physical existence accomplishment plan obviously important addition information allows human discern patterns recognize opponents plan
intent valuable eas recognize physical threats adversarial activity expected
plan currently perform automated plan intent recognition data adversaries
automated plan recognition kaminka et al inference adversarial intent franke
brown bell mendenhall bell jr brown active areas developed reliably recognize adversarial plans intent acceptable
computational resources could easily invoked within monitoring framework
projections even though current plan still executed without change time
may possible predict future failure plan global constraints occur
varying degrees certainty example suppose plan requires robot move location x
time robot getting progressively behind schedule course
point system predict acceptable certainty location constraint
violated alert user may revise plan addition opportunities probable
adversarial activity could projected projection simulation computationally
expensive execution monitor must adjust calculation projections match available
resources constraints


fii nteractive e xecution onitoring agent eams

contingency plans plan may specify contingency plans subplans
invoked certain specified conditions arise execution monitor monitor conditions alert user contingency plan triggered system notify
team members automatically user decides switch execution contingency plan another desirable alert domains might suggestion system contingency
plans generated certain situations events unfold unexpected manner eas
monitor triggering contingencies suggest generation
system depending domain user may want alerted
incoming data streams functioning execution assistant example data
arriving sensors network team members may crucial
helping user interpret situation system alerts
reporting requirements one basic assumptions human user experience
knowledge modeled within system therefore system cannot recognize piece information affect plan execution information
trigger alerts might still valuable user system given reporting requirements allow recognize information one generally useful reporting requirement would
execution status user quickly determine execution proceeding planned reporting requirements may take number forms appropriate domain comments
recognizing opportunities apply domains might specify requirements sops
key features declarative statements heuristic several things fall category
information reduces uncertainty indicates plan executing expected
another example robot might told immediately report murder fire witnesses
executing planned tasks

value information alerts
alert constraint violations threats straightforward manner inundate
user dynamic domains unwanted alerts domains many
domains well medical monitoring koski et al aid gives alerts every
second quickly discarded user stressful situations immediately useful
execution aid must produce high value user appropriate alerts alerts presentation may
adjusted situation including users cognitive state computational
state software agent example high stress situations tolerances could increased
certain types alerts might ignored postponed section provide conceptual
framework alerting monitoring framework domain specific eas
grounded concept determining value alert first system
must estimate value information user information theory derives communication theory work shannon theory value information refers
reduction uncertainty resulting receipt message meaning
message uncertainty reduction receiver weinberger use term
value information voi different sense namely pragmatic import information
relative receiver course reduction uncertainty often pragmatic import
weinberger assume practical value information derives usefulness
making informed decisions



fiw ilkins l ee b erry

however alerting user valuable information could negative impact certain
situations alert distracts user important tasks many
alerts overwhelm user therefore introduce concept value alert voa
pragmatic import making informed decisions taking action focus users
attention piece information voa takes voi account weighs costs
benefits interrupting user user busy something significantly important
issuing alert might valuable even voi high voa must generally estimate
users cognitive state current activities voa generally determine modality
qualities alert presentation e g whether one flash red text computer display
issue loud audible warning
voi voa highly correlated situations general comments voi
apply voa well however voa may low voi high user highly stressed
preoccupied important tasks possible high voa low voi
example mission specific monitors might alert user information known
time thus little value information information crucial
upcoming decision user may forgotten may behaving way indicates
lack awareness
weinberger gives quantitative definition pragmatic information assuming finite set
alternatives lead well defined outcomes value decision maker
realistic domains alternatives outcomes precisely defined furthermore
information decision theories including weinbergers assume decision maker aware
processed previous information devote sufficient resources analyzing
current information assumptions unlimited processing power voa voi
realistic domains assumptions hold humans resource bounded
fast paced operations alerts information may ignored user may realize
implications information complex plan coordinates many team members
estimating voi voa
interactive dynamic real world domains suo cannot model alternatives payoffs knowledge probabilities required enough precision compute
theoretical voi voa much knowledge voi resides human experts
even might different preferences opinions voi example suo domain user might concerned public relations effects plan execution
reported international media precisely humans knowledge modeled
system want execution assistants interactive realistic domains
generally obvious boundaries types support system provide
precisely defined evaluation functions payoff matrixes thus weinbergers theory formal
techniques computing value information athey levin cannot applied horty
pollack develop foundations theory rational choice involves
estimating cost decisions context plans comes closer addressing
concerns however determining costs utilities actions continue require human
judgment many domains especially human lives put risk
therefore developed heuristically estimate voi domain knowledge
although quantitative voi functions easily used framework inputs al



fii nteractive e xecution onitoring agent eams

gorithms described section domain specific must easily
customized tuned user preferences well situation invoked domainindependent ways variety purposes monitoring framework developed
feedback domain experts believe feasible use machine learning techniques
replace supplement hand coded heuristics voi voa estimation user preferences
affect explored
voi voa computed qualitatively domains several domain specific quantitative measures qualitative reasoning process issuing alert discrete event generally
small number options presenting alert therefore estimating voa primarily categorizing potential alert small number alert presentation types
modalities need determine voa crosses thresholds defined voi voa
specification indicating example valuable issue alert alert
issued high priority framework thresholds customizable user
mission specific change automatically different missions plan executed
voi determine information include alert
different alert presentations handled assigning qualitative priority alert example suo ea divides alerts voa four equivalence classes levels priority
already defined suo domain priority presented differently user
different modalities simply different colors sizes text graphics currently
use three priority levels robotics domain may add future collaborating team
members make use ea priority levels used adjust alerting behavior
users cognitive load example fast paced operations highest priority alerts
could presented
several reasons preferring qualitative reasoning draw forbuss work
describing advantages donlon forbus forbus qualitative fit perfectly
making decisions discrete events effectively divide continuous properties
important transitions thus changes qualitative value generally indicate important changes
underlying situation qualitative facilitate communication built
reasoning human experts thus similar peoples understanding example
priority levels used voa long named defined military
qualitative reasoning important framework integrating qualitative
computations way humans understand finally precision quantitative
serious weakness underlying accurately reflect real world situation
precise data lead precise incorrect low accuracy model precise
lead false sense security
advantages qualitative reasoning apparent common sense military reasoning common sense reasoning continuous quantities often done qualitatively
continuous value interest different action decision required example
ignore fuel gauge driving decided whether must refuel reaching destination addition priorities already mentioned military
quantizes many continuous properties used describe terrain ways relevant military
operations creating phase lines decision points named areas interest key terrain avenues
forth suo ea incorporates quantizations reason terrains influence voi voa effectively communicate information alerts military
used years facilitate communication collaboration decision making


fiw ilkins l ee b erry

properties voi voa
voi voa dynamic domain depends primarily whether information influence
decisions responses execution aid must ensure human awareness high value data
support decisions human user make thus system must estimate model
human needs know e g specifying reporting requirements even system cannot predict
information might influence decision example emerging adversarial friendly
pattern might crucial system human level ability recognize plans
patterns ensure human decision maker aware relevant data
one obvious important property voi zero user already aware
information another property information indicating plan execution proceeding
according plan valuable influences decision continue planned
value confirming information depends features domain information
valuable domains high uncertainty active adversaries
another feature may useful certain domains classifying responses suggested
piece information alert example report may require significant plan
modification minor plan modification invocation contingency plan application
standard operating procedure sop identification opportunity however type
response necessarily correlate voi minor plan modification might life saving
major modification might simply reduce resource usage ten percent distinction
important simpler responses likely handled automated fashion thus
reducing need involve user
determining information present alert requires addressing human factors initially
important present alert concisely human determine import glance
assess whether divert attention tasks eas user drill
detailed information alert order assess situation accurately
finally domains may concerns making informed decisions example
emotional state user recording data scientific value might beneficial particular
concern analyzing debugging system performance rather making good execution
decisions different voi estimator used provide alerts system behavior
voi voa criteria
described voi voa generally heuristic domain specific
user customizable identify inputs applicable interactive
dynamic domains started superset voi criteria found useful two domains
generalized domain independent properties user listed
estimates system user users mental state accessible
plan
policies
users awareness current situation
systems view current situation
users cognitive load


fii nteractive e xecution onitoring agent eams

resources especially time available analysis response
information adversarial agents
characterization uncertainty
age information age users awareness
source information
plan provides several voi criteria plan may provide explicit implicit decision
points high value places times team members forth value task constraint
adversarial action team member often determined plan structure plan annotations
tasks plan invoke task specific voi within monitoring framework
described section domain policies specialized reasoners implement
reporting requirements provide knowledge necessary determine value alerts
types constraint violations reports example domains monitor
physical safety agents alerts life threatening situations highest priority
noted voi tends zero extent user already aware information thus
determining voi must access current view situation determine arriving reports offer
information simply confirm existing view data rich domains assume
execution aid may detailed description situation user aspects
situation described incoming data user may performing tasks
monitoring situation alerted ea therefore value alerting
user depend much information differs users last situation update
even system recent data differs slightly information
ideally would model users cognitive load give lower values noncritical
alerts user consumed addressing critical aspects situation similarly
want overload systems computational resources ability remain reactive
value certain information may depend time resources available analyze
determining value information adversaries often useful compare
developing patterns information adversarys plans tendencies could
obtained human intelligence analysts generated plan recognition pattern matching
mentioned information reduces uncertainty valuable domains
high uncertainty active adversaries voi estimated characterization
uncertainty present current view situation
age information factor voi outdated reports may zero value newer
information already arrived modeling users awareness elapsed time factor
user aware alerts issued last minutes may longer aware something
brought attention yesterday last week thus value proposed alert
may increase elapsed time since similar alert issued
variety sources information exists source factor voi often different
information sources inherently different levels certainty authority importance example suo ea accepts reports human observers automated sensors ea
inputs might want weigh human observations differently depending human
situation later sections implemented eas describe domain specific voi voa
inputs corresponding inputs listed


fiw ilkins l ee b erry

implementing execution monitors small unit operations
developed execution monitoring framework easily adapted produce interactive monitors agent teams dynamic domains support claim describe two
dynamic data rich real world domains execution assistants eas implemented
framework first domain army small unit operations suo hundreds mobile
geographically distributed agents combination humans robots vehicles
domain uv robotics ortiz agno berry vincent described section
teams composed handful cooperating unmanned ground air vehicles ugvs
uavs human controller domains involve unpredictable adversaries vicinity
team members
originally developed monitoring framework suo domain several personmonths effort although majority effort knowledge acquisition modeling
suo monitoring framework described designed modular support
easy insertion domain specific user customized system components task
monitoring value information estimators design validated
implemented complex execution monitor uv robotics domain one person week
described section uv ea uses plan representation basic architecture
suo ea inputs different tasks monitoring
respond inputs generate alerts
majority framework applies completely automated execution monitoring
demonstrated uv ea uv ea runs robot team used autonomously
adjust robot control blending desired behaviors automatically revising plans execution uv ea provides alerts human controller monitoring robots
framework described section general follow domain specific
details clarify concepts tradeoffs details may interest readers
suo description
small unit operations military involve hundreds mobile geographically distributed soldiers
vehicles cooperatively executing fast paced actions unpredictable adversary computational support bandwidth restricted must use lightweight portable devices currently
decisions made humans plans machine understandable
implemented suo ea part larger system situation awareness information management saim system distributes timely consistent situation data friendly
agents saim uses technologies demonstrate concept automated support described
suo domain assume many small teams agents human vehicles eventually robots separated dispersed throughout large space operating concert achieve
goals assume agent equipment providing robust geolocation gps computing
communication capabilities saim assumes unpredictable adversary fast paced action
rich population sensors controlled cooperating team members
key innovations saim addition ea self organizing peer peer information architecture forward fusion tracking fusion information tracking distributed
done close source minimize latency bandwidth requirements ambiguity adjudication maintains consistency distributed databases information architecture supports ad hoc
information dissemination multicast groups centered mission geography command


fii nteractive e xecution onitoring agent eams

self elected servers provide robustness information dissemination peer peer
network brings transport layer
saim provides large volumes geolocation data much information human controller monitor particularly high stress situations ea alleviates
machine understandable plan filter information saim alert user events
threaten user execution plan plan aware situation aware action specific ea
alert appropriately situation thus improving decision making enabling hands free
operations reducing need human monitoring increasing amount relevant information
monitored prompting user action required
complexities plans number agents data pose challenge
existing execution monitoring techniques unlike lot ai work particularly robotics
actions domain performed external agents mostly humans monitor
access state executing agents status information must obtained external inputs
focus alerting human users situation requires attention
assume human modify plan needed done several reasons first
users unwilling cede decision making machine first develop trust giving useful
alerts capability well suited automation plan represented enough fidelity
something provides obvious value dealing information glut second mistakes
matter life death systems must verifiably robust given decisionmaking power human decision makers must take imperfect information account including
reports sensor networks humans execution assistants third demonstrating
utility automated plan monitoring large complex domain likely facilitate
future acceptance users plan related automation
name
battalion
company
platoon

abbrev
bn
co
plt

entities controlled




figure echelons command hierarchy eas

execution monitoring requires coordination multiple echelons levels hierarchy
users know subordinates figure shows echelons
demonstrated ea multiple agents echelon must coordinate fast paced activities
wide area real time task requires solution three difficult handling large
incoming information developing sufficiently rich plan representation capturing
tactical army plans determining alert user
mentioned ea must give high value alerts useful example
unit position late system must recognize import condition
situation changed sufficiently issue another alert without issuing many alerts
consider seemingly simple example plan specifying squad agents move
objective golf location squad obvious solution compute
centroid members location however one near centroid members
large semicircle centroid center situation arises squad follows


fiw ilkins l ee b erry

road around sweeping curve one member immobile gps still broadcasting
centroid may seriously inaccurate centroid need near golf one member near
golf sufficient must members near golf depends mission task situation
mission observe valley one member sufficient might want members
attack solution use mission specific specified mission model described
section reasoning location units
ea must avoid cascading alerts events get progressively away expectations
along number dimensions time space resource availability
example close time squad achieving
plans objectives similarly close distance golf time distance thresholds
indicate depend mission situation human uses background world
knowledge quickly determine delay affects plan execution aids must much
knowledge encoded become exacerbated plans missions
become complex detecting friendly fire fratricide risks poses even difficult issues
typically many friendly units close proximity
suo
machine understanding plan key helping humans deal information glut created advanced situation awareness systems saim plan specifies expectations
events unfold ea compare actual events situations anticipated
use rich knowledge plan representations wilkins desjardins allow computers
share context users understand semantics plans requests
two tasks involving significant knowledge acquisition domain modeling
model suo plans actions compose model value
information types alerts users interacted several domain experts
develop tasks aided centuries analysis modeling
already done domain task army already standard plan representation
called operations order required structure entries mostly free text
primitive actions domain referred missions army field manuals
describe missions detail modeled missions hierarchical mission model mission
model plans described section task extensive accumulated experience
analysis errors opportunities arise execution suo plans many
tradeoffs made tradeoffs described sections
mission specific execution monitoring achieved novel integration mission knowledge
represented methods ai reactive control system ea invokes methods appropriate
points plan execution methods employ mission specific turn invoke
ea capabilities mission specific manner much domain mission knowledge encoded mission model explicitly represented plan specifies partial
order missions team member ea uses plan invoke knowledge
mission model appropriate time appropriate arguments
another feature particularly terrain reasoning pervasive use specialized programs possibly external ea perform complex computations important
system performance alternative specialized programs ea easily adapt granularity reasoning improve performance better modules become available example



fii nteractive e xecution onitoring agent eams

api functions design used terrain reasoning compute enemy strength
current tracks
builds sris continuous technology wilkins desjardins
wilkins myers wilkins et al domain independent act formalism
wilkins myers act represents procedural knowledge plans acts provides
rich set goal modalities encoding activity see section used several
institutions wilkins myers durfee et al ea uses p rs georgeff ingrand
wilkins et al reactive control system reactive control systems similar capabilities e g um prs durfee et al p rs good framework constructing
ea supports parallel activities within agent smoothly interleave responses
external requests events internal goal driven activities uniform processing
goal event directed behavior p rs uses procedures encoded acts extensive graphical
tracing provides valuable insights ea operation
suo architecture
architecture ea interactions saim system shown figure
developed two major modules assistant pa execution assistant ea
assist user generating executing plans respectively implemented skeletal
pa produce machine understandable plans ipe hierarchical task network planner
wilkins et al pa ea use acts common knowledge base ontology
mission model object easily extended knowledge actions represented
mission model knowledge plans strategies procedures represented acts
inputs ea plans execute location reports sensor tracks messages
agents e g reporting mission success failure ordering execution plans
saim broadcasts date locations friendly agents broadcasts tracks represent
fusing sensor hits nonfriendly entities saim provides ea supports rates
dozen inputs per second
ea monitors current mission every immediate subordinate ea owner
alerts threats subordinates subordinate depth customizable events threaten successful
execution plan threaten user subordinate units trigger planned contingencies
ea issues alert user depending value alert determined applying
voa user must decide respond design technology
suggest responses plan modifications wilkins et al left future work
addition giving alerts suo ea dynamically change command hierarchy abort
execution one plan switch monitoring plan reduce unwanted alerts avoid
inundating user
eas every unit every echelon process reports give alerts locally saim provides
tactical picture eas modulo eas registration saim multicast groups therefore
necessary ea report threat superior superiors ea well
ea affected team members information would already issued
similar alert architecture fault tolerant eas rely reports subordinates
determine alerts thus ea maintains functionality even contact
eas long gets saim position reports one node



fiw ilkins l ee b erry

pa

ea
pda domain kb

pda domain kb
acts used


plan
initializer

cue
act
test ready unit
cue

act
answer query

executable
plan act

execution
manager
requests updates

executable
plan

cue

act
answer query

executable plan
monitors

advisable
planner agent
partial plan
task organization
assets
guidance

cue
act
test ready unit

common ontology
mission model

prs

common ontology
mission model

sipe

acts used
monitoring

requests
registrations
notifications
updates

simflex

watchman
prs

prs

saim persistent data store pds disseminator

situation
updates
requests
scripted events

figure internal architecture ea pa interaction saim pds archives
plans data continuously changing picture current situation

shown figure ea implemented multiple asynchronous p rs agents defined alleviate computational burden central ea manager agent asynchronous agents
provide faster response better alerts would synchronous architecture agents
latest information available without wait synchronize
agents implement ea extended p rs monitor temporal constraints batch
incoming facts could handle much higher data rates
internal ea agents opposed external team members use belief desire intention bdi
model agency rao georgeff agent beliefs state world desires
achieved intentions representing actions agent adopted achieve desires
ea agent controller process operates database beliefs
set intentions monitors set acts encode procedural knowledge
accomplish goals l isp functions implement primitive actions
agent ea agent continually applies acts accomplish current intentions tasks ea
appears single agent saim outside world following internal ea agents
plan initializer agent gets plan pa sends messages ea manager
agent performing initializations necessary begin monitoring plan execution primarily
involves creating loading plan monitors posting facts ea manager database
watchman agent monitors incoming message traffic saim network mainly
querying tracks information filters irrelevant insignificantly changed reports
sends message ea manager report message requires attention
simultaneously monitors files scripted events monitoring requested watchman
inserts events scripts appropriate times interleaving live messages



fii nteractive e xecution onitoring agent eams

ea manager agent begins plan execution immediately receiving plan
plan initializer agent implements core ea functionality compares reports
watchman agent plan plan monitors generates high value alerts
simflex agent provides powerful flexible way define execution semantics
action acts thus full power prs simflex simulated flexible execution
enables mission specific execution monitoring act mission makes
system easily extendible example certain missions automatically command robotic
vehicles send messages eas actions could easily implemented simflex
actions plans executed external human agents case agent
little except perhaps prompt user actions reorganizations automatically
executed simflex invoking execute mission method defined mission model
suo alert types
extensive accumulated experience regarding execution suo plans selecting
types alerts detect involved trading several factors whether alert
detected available data utility alert user cost implementation
ability maintain reactivity given computational expense detecting alert earlier gave
example balancing usefulness fine grained terrain reasoning movement projection
computational impact reactivity thus modeling value information types
alerts detected involved interaction domain experts system developers
describe types alerts decided detect details implement
model value information alerts given sections
figure describes types alerts detected suo ea
time location checking comparing alerts categories section proximity
alerts instances adversarial activity detected adversarial alerts fit category
last three adversarial alerts type plan constraint violated expectations requirements specified plan locations routes monitor violated
contingency alert triggered friendly hostile actions type
contingency plan suggested position coordination schedule alerts type plan
constraint violated would type constraint violation projected violation projected fratricide alert type policy constraint violated unknown position alert
type reporting requirement
suo plans mission model
hierarchical mission model specifies ontology primitive actions methods
encode domain knowledge constraints expected behaviors tailoring
monitoring mission crucial behaviors even something simple denoting
location unit mission specific plan representation novel combination
mission model extended version act formalism wilkins myers
ea plans represent plans expressed army operations orders parts current army fiveparagraph order represented machine understandable form primarily task organization specific maneuver tasks coordinating instructions execution paragraph represented aspects
encoded well



fiw ilkins l ee b erry

alert type
fratricide
position
unknown position
coordination
schedule
contingency
contingency
monitored
ave
hostile expected
contact
distance
strength
proximity

friendly alerts
friendly units pose threat
location constraints plan violated
unknown location subordinate coordinating unit
coordinating units cannot synchronize planned
time constraint plan violated
event triggered queued contingency
adversarial alerts
event triggered queued contingency
activity monitored map location
activity monitored route avenue
expected hostile activity absent
proximity alerts
friendly units first contact hostile entity
hostile entities closer since last alert
threat grown stronger since last alert
merged alert one

figure types alerts generated suo ea

act formalism domain independent ai language representing kinds knowledge activity used plan generation reactive execution systems provides rich
set goal modalities encoding activity including notions achievement maintenance testing conclusion waiting expressiveness necessary representing suo plans
must coordinate distributed units trigger preplanned contingencies enforce variety execution constraints basic unit representation act used encode plans
strategies standard operating procedures sops
ea monitor plan composed missions mission model mission
model derived army field manuals elaboration domain experts includes set
mission templates associated parameters units echelons could ordered
perform written verbal order since mission model grounded field manuals
first step toward formalizing plan representation meaningful end users yet amenable
execution monitoring ai related capabilities e g plan generation replanning course
action evaluation
mission model class hierarchy implemented l isp clos common lisp
object system inherited methods encode knowledge monitor particular
mission leaf class corresponds monitorable action may occur plan nonleaf
class encapsulates common parameters behaviors subclasses mission model allows
aspects system behavior tailored mission specific manner thus specialized
methods mission model example use mission specific monitoring
progress movement methods invoked ea manager turn invoke processing
ea manager posting mission specific facts invoke capabilities ea manager
api facts important facts described later



fii nteractive e xecution onitoring agent eams

mission model contains name parameters describe mission example mission model contains nonleaf movement mission class contains destination
parameter method checking executing unit arrived destination five
different movement missions inherit behavior root class model mission class
encapsulates parameters behaviors shared missions missions inherit
start time end time scheduling constraints methods superclass
coverage mission model formalizes substantial subset missions mentioned
army field manuals enumerated mission classes implemented
superset required scenarios mission model covers multiple echelons emphasis battalion company platoon model aspects missions
saim provide monitoring data related time location example
alert potential mission failure due casualties incurred
contingencies mission model contains nonleaf contingent mission class class
leaf children classes used implement mission sequence part plan
executed certain conditions fulfilled domain experts term portions
plan branches sequels missions contingent mission contain parameters describe
condition specified plan activates contingency
dynamic resubordination army operations orders allow command hierarchy termed
task organization changed operation although existing command control software support dynamic changes command hierarchy reorganization mission
class provides capability ea reorganization mission executed causes
ea update representation command hierarchy accordingly substantial effect
ea behavior many ea use command hierarchy
methods mission provides several methods invoked appropriate times
ea monitor execution mission set methods serves api mission specific
execution monitoring semantics following methods comprise bulk api
post execution constraints main api method invoked ea monitoring mission
invokes methods post enforce constraints
check initial location check final location confirm unit positioned correctly
start end mission respectively
start time constraints end time constraints check mission beginning ending
execution scheduled methods usually post facts ea manager invoke
timed monitor mechanisms
location constraints enforces location checking friendly units hostile tracks variety
missions
contingency satisfied determines whether contingent mission sequence executed
respond monitored red activity responding hostile activity places
plan calls monitoring activity
execute mission invokes processing required execute mission invoked posting
goal simflex agent internal agents continue p rs execution executemission running


fiw ilkins l ee b erry

compute priority computes priority alert
desired strength ratio heuristic expresses desired friendly hostile ratio combat
power
red alert priority computes priority proximity alert whether alert issued
recent changes reported strengths friendly unit nearby hostile
tracks
wait mission start wait mission end control interaction ea gui regard mission start end times
specialization methods useful expressing desired behavior ea example
location constraints method specialized movement mission coordination mission
several missions movement missions ea checks whether centroid moving
unit destination coordination missions ea checks whether elements two
coordinating units specified coordination point
suo execution monitoring
ea manager continuously responds goals facts posted database watchman agent asynchronously posting facts ea manager database receives messages
saim facts posted include confirmations mission starts completions subordinate
eas orders aborting current plan executing plan superior ea sensor
tracks calls fire location reports saim network
methods mission model post facts ea manager invoke mission specific
monitoring examples fact invoked capabilities provided ea manager include monitoring several types time constraints monitoring specified location activity options
friendly enemy expected unexpected
behavior ea manager determined posted goals facts relative timing set acts used respond ea manager switches focus highest priority
task execution cycle goals facts generate responses acceptable latency
georgeff ingrand execution cycles order milliseconds system behavior
nondeterministic depends exactly facts goals posted execution cycle may turn depend cpu scheduling ea manager watchman
saim processes number alerts rarely varies vary exact times
alerts vary seconds hostile strengths reported change
watchman agent gets fewer cpu cycles accumulate tracks ea manager
executes
ea manager must constantly monitor status behavior currently executing missions simultaneously monitoring dozen incoming facts per second determining
impact plan monitoring plan typically order intentions
trying accomplish one time acts procedures apply intentions
intentions cause alert generated unprocessed report track forms intention typically five subordinate missions executing simultaneously produces multiple
intentions least one detecting start end mission time



fii nteractive e xecution onitoring agent eams

location constraint every mission least start time end time constraint example time constraint ea manager intentions monitor specified time
elapsed required event occurred
plan monitoring ea viewed asynchronously simultaneously
interleaving following activities describe detail mention
important design tradeoffs
initiating aborting plan execution upon request
monitoring incoming location sensor reports
monitoring progress missions time constraints specified executing plans
responding types incoming requests
p lan monitoring
monitor plan request goal posted database invokes initialize plan act
computes conditions globally monitored plan posts facts ea
manager database declaring current plan monitors facts turn cause
acts execute ea manager load execute plan ea manager traverses
parallel branches plan missions complete
global monitors computed api function compute plan monitoring data
specify domain specific monitors domain independent capabilities available
system determine predicates plan preconditions must true initially
opposed predicates achieved plan actions precede suo domain
compute plan monitoring data finds decision points named areas interest specified
plan sets monitors monitoring accomplished posting facts ea
manager database cause ea notice adversarial activity locations
ea abort monitoring one plan switch monitoring plan process
involves removing facts old missions monitors ea manager database aborting
execution acts currently intended execution posting goal execute plan
l ocation reports
blue report act figure invoked every time location report posted ea manager
database happen several times second however watchman agent filters location reports interest ea manager e g entities irrelevant plan
ea owner change last report updates representation
current situation ea blue report act specific suo domain framework
requires similar act written type input actively monitored example similar uv robotics act responds state updates see section acts
written act editor wilkins myers tool graphically editing procedural
knowledge acts intuitive user interface
act begins invoking domain specific specialized reasoner check fratricide risk
may side effect giving alert api function issue alert specialized reasoner easily replaced better fratricide detection future next
blue report act checks whether current plan expectations unit calls


fiw ilkins l ee b erry

blue report fact check blue report
cue
conclude
blue report unit x time
preconditions
entry setting
entry resources
entry properties
authoring system act editor

n
achieve check fratricide risk unit x time

n
test
expected location unit id
dest map object time loc fuzz

n
test
expected location unit id
dest map object time loc fuzz

comment

n

act invoked every time
blue location report posted
database invokes api
function check fratricide
risk another check
units expected location
whenever database
expected location plan
unit report

achieve
check expected location unit id
dest map object time loc fuzz progress

n
retract blue report unit x time

figure graphical representation act responds every friendly location report
api function check expected location compare current location expected location
posting alert appropriate finally report fact removed database
responding fused sensor track indicating adversarial activity controlled similar red
report act compares adversarial activity plan expectations instead analyzing fratricide
risk red report act invokes reasoner evaluating adversarial threats described
section involves updating threat envelope friendly unit
ission monitoring
explain mission monitoring give example move mission plan monitored
move mission ready execution following parameters
move mission unit start time constraint start time end time constraint end time destination
route formation march technique contingency contingency satisfied

ea manager begins execution calling three methods defined mission model starttime constraints end time constraints location constraints posts facts
ea manager database invoke mission specific monitoring capabilities example locationconstraints specialized class movement mission posts facts locations
mission expects friendly units occupy time derived destination route
arguments might post facts locations mission expects adversarial activity
adversarial activity monitored alerted
ea receives confirmation mission start subordinate ea location reports
continuously posted watchman act figure analyzes respect
location facts posted location constraints sensor tracks similarly analyzed different
act let us suppose point mission execution track shows activity location monitored mission ea would detect invoke mission specific method


fii nteractive e xecution onitoring agent eams

respond monitored red activity describes mission respond
event example could issue alert abort move execute contingency plan ask
user choose set options
type
asap
order
start
start nlt
start net
end
end nlt
end net

meaning
start end specified
start end ordered
start exactly given time
start later given time
start earlier given time
end exactly given time
end later given time
end earlier given time

figure temporal constraint types

emporal monitoring
mission model includes starting ending time constraints every mission time
constraint consists temporal constraint type absolute time temporal constraint
types ea shown figure constraints require two types monitoring tasks
detecting time constraints plan passed without met detecting events
occur specified time
extended p rs domain independent timed monitor mechanism provides general
capability covering temporal monitoring requirements capability implemented
form acts supporting l isp code four special types timed monitors
provided invoked posting facts predicates check later check earlierthan check window check near time describe implementation one
others similar act check near time checks event occurs within specified
threshold time point invoked fact form
check near time event time mode fuzz
succeed event must occur within fuzz seconds time mode indicating whether
time absolute relative time fact posted timed monitor act sets
timer expires given time p rs reacts appropriately expiration
timer occurrence event posting facts database note success failure
temporal constraint acts fact invoked mechanisms enable
establishment separate intentions perform timing without blocking processing
modularization enables triggers set independently respond timing
esign tradeoffs
described section balance must struck capabilities provided resources
used tradeoffs different every application usually critical aspect design
execution assistant suo domain terrain reasoning key factor tradeoff



fiw ilkins l ee b erry

fine grained terrain data analyze progress project future failures overload computational
resources therefore ea uses coarse terrain reasoning design allows higher fidelity
terrain reasoners respond defined set terrain analysis requests feature allows
system adjust analysis tempo operations
key features consider making tradeoffs reactivity capabilities
amount processing done mission monitoring methods report monitoring acts
specialized reasoners terrain reasonsers invoked methods acts user
adjust frequency monitoring time customizing parameter settings currently
suo ea computationally overburdened analyzing every report full adding
computationally expensive projections alerts future could cause reconsideration
design decision finally amount filtering incoming reports done watchman
agent affects balance


features implementation

ea responds requests calls fire described section several
capabilities implemented make ea easier use understand two briefly
mentioned implemented gui meant military users rather facilitate evaluation understanding ea gui displays alerts different scrollable windows
priority level current time current mission subordinate ea owner
user confirm mission starts ends locally although might done voice
modality fielded system confirmation arrives subordinate ea
confirmation window mission destroyed thus confirmations prompts given
locally received messages seamless interleaving two types confirmation
ea pa mission model p rs ipe implemented c ommon l isp clim
clos ea contains procedural knowledge form acts saim implemented
c java ace object request broker corba c used interface
ea saim corba
alert detection voi voa
central task ea notify user important changes situation may demand
attention ea must avoid excessive alerting otherwise user would abandon ea
nuisance model users cognitive state respect awareness threats would
ideal unavailable described section developed heuristically
estimate voi voa domain knowledge inputs described
section avoid excessive alerts issuing high voa alerts techniques include
keeping event histories friendly unit map coordinates important map
locations named plan e g decision points
alerts expire sense longer used suppress future alerts
alert histories suppressing alerts time similar alert given recently strength
threat significantly stronger distance threat significantly closer
merging several related alerts apply subordinates one alert common parent



fii nteractive e xecution onitoring agent eams

providing parameters user customize alerting behavior voi voa estimates
event histories currently model users cognitive state except global
properties situation operational tempo voa calculations take account
frequency timing alerts already given histories include alerts
issued object history may include additional events described section
assume user aware information recently alerted
idea behind alerts expire user may forgotten information provided
far past thus ea use alerts older specified threshold reduce estimate
value giving alert
eas behavior must easily customizable users plan users
different preferences situations impose different requirements ea customized
many different ways voa recommend alerts classify priority level controlled thresholds repetition parameters allow alerting behavior
customized user situation examples customizable voa parameters alert
expiration periods described default minutes alert suppression intervals seconds
hostile alerts seconds alerts friendly team members alerts
type objects suppressed given interval terms voa another
fratricide alert value first seconds user alerted fratricide
risk team member
examples customizable voi parameters position distance threshold
thresholds strength adversarial threats time threshold schedule alerts
seconds time threshold example would smaller tightly coordinated operations
larger loosely coordinated plans terms voi detecting team member late
significant value tardiness reaches given second threshold certain missions
plan change threshold say seconds indicates information tardiness
seconds value context missions
avoiding unnecessary repetition similar alerts occurs every type alert
schedule deviations become progressively schedule position deviations become
progressively position threats move progressively closer become progressively
stronger fratricide threats persist time ea must avoid cascading alerts
cases framework customizable thresholds often paired customizable
ratios customizable sequence thresholds control often repeat alert
mission deviates progressively expectations repeated alerts generally lower
voa given lower priorities
evaluation showed two types alerts suo domain pose particular
avoiding inundation user proximity alerts adversarial activity alerts
fratricide risks among team members developed voi voa especially
two types alerts
p roximity

alerts

high sensor tracks near friendly units prior battle would
overwhelm user see alert every change every track keep threat envelope
friendly unit consisting tracks close enough pose threat tracks placed zero



fiw ilkins l ee b erry

threat envelopes appear move significant changes strength
aggregate force envelope closeness nearest track causes alert
f ratricide risks
fratricide one biggest dangers modern battlefield risk increases range
lethality accuracy weapons increase increased range increases risk bigger
area every team member must correctly identified increased accuracy increases risk
incorrectly targeted team member likely suffer harm hopefully tools
ea saim increase situational awareness greatly reduce frequency incorrect
targeting usually large number friendly entities close proximity many potential
fratricide situations exist
ea detects two types fratricide risks calls fire team members
appear messages saim friendly units near detected
geolocation data first case user issues call fire warned asked
confirmation team members within given threshold target request confirmed
saim message sent team members ea entity within target threshold
immediately alerts owner risk planned fire
second case produces far many alerts simple used
armys notion unit boundaries specified plan two units
within boundaries alert issued even within weapons range
fratricide alerts issued one unit another units boundaries within weapons range
unit handle numerous special cases two units outside
boundaries within weapons range detection fratricide situations left
future work e g misoriented units within boundary
suo evaluation
ea evaluated respect usefulness output frequency unwanted alerts
real time performance realistic data streams saim ea tested data
produced high fidelity military simulator two scenarios simulator detailed
type vehicle sensor one scenario lasted hours last minutes
simulated high fidelity first hours file scripted events dozen
tracks reports second scenario terrain simulated minutes
minute simulation events passed watchman saim
passed ea manager monitors squad level entities
simulator run scripted events simulate messages team members
running live messages confirming mission starts completions high fidelity
simulation provides realistic data rates inputs thus providing evidence indicating
ea perform desired real world
formal evaluation ran live saim simulator several team members running copy saim ea different physical machines shorter development
cycle implemented event generator reproduces saim behavior making saim network unnecessary event generator creates messages files scripted events include
confirmations mission starts completions normally would come subordinate
ea orders aborting current plan executing plan normally would come



fii nteractive e xecution onitoring agent eams

superior ea sensor tracks location reports normally would come saim
network event scripts contain messages captured run included simulator
saim
q uality

alerts

figure presents total number alerts type echelon typical run flash
highest four priorities immediate second highest flash alerts generally life
threatening first contact adversarial entities fratricide lower priority alerts
plan threatening
analyzed evaluated alerts generated first challenging scenario
analysis sri domain experts indicates important situations alerted less
alerts judged low value issued
flash alerts judged judging voa alert subjective different domain experts
may different alerting preferences alert information
firm data number unwanted alerts would lead performance degradation
typical user would cause user shut ea clear false alarm rate
found pediatric icu tsien fackler would acceptable battlefield
judgment domain experts rates low value alerts achieved acceptable
number alerts figure reasonable minute interval fast paced action
elimination alerts risks missing high value alert purposefully erred side
missing alerts
compared alerts generated eas operating different echelons running
different machines saim network simulation analysis shows
detect threat time tracks threat relevant
plans alerts plan specific mission specific behavior expected
nondeterminism inherent asynchronous agents alerts exact
strength bearing location threat figure shows one example bn co alerts near
time nd plt co moving outside unit boundary specified plan
hostile force appears north co moving south note eas issue flash fratricide
alerts however alerts different specific plan owner ea
would expect
plan called attack fire mission tracks observed location dp decision
point hostile activity calls human decision immediate alert appears
bn ea contingent fire mission bn plan notifies user hostile
entities entered dp triggering contingency aa diamond route defined bn
plan along adversaries likely second alert notifies bn user
activity route reports number entities detected
eas independently identify fratricide risk would eas two platoons
involved message details two platoons facilitate quick response next bn ea
issues distance alert detecting tracks se recon plt subordinated
bn earlier plan bn ea alerts tracks closer
earlier first contact alert issued finally position alert indicates plt
km south route specified move mission plt ea simultaneously alerts
one subordinate squads position



fiw ilkins l ee b erry

number





















type alert
battalion ea missions
total alerts hrs flash
proximity alerts
schedule alerts
position alerts
avenue alerts
triggers contingency alerts
monitored alerts
fratricide alerts
co ea missions
total alerts hrs flash
proximity alerts
schedule alerts
position alert
avenue alerts
triggers contingency alerts
monitored alerts
fratricide alerts
plt co ea missions
total alerts hrs flash
proximity alerts
schedule alert
alerts

figure number alerts type echelon number missions echelon
indicates size plan last minutes hour scenario
simulated high fidelity battalion alerts issued last
minutes

p erformance
ea manager must handle simultaneous intentions determining import
dozen facts second checking alert histories redundancy clear
system could still alert user within seconds fact arriving
required users tested ea scenarios determine met requirements
real time ea generated alerts less seconds receipt fact found
ea keep run x x real time may
anomalous schedule alerts granularity issues high time expansion rates thus current
data rates close stressing system x real time processing average
events per second minute simulation double design requirement dozen
events per second determine multiple degradation would occur
difficult detect degradation complex system establish ea



fii nteractive e xecution onitoring agent eams

bn ea
day immediate notification
red activity dp triggers contingency attack fire
day routine notification
enemy activity ave aa diamond vehicles
day flash notification
fratricide risk plt co moved position near plt b
day immediate notification
closest threat tracked closer se recon plt
co ea
day immediate notification
plt position move mission gl line n plt
day flash notification
fratricide risk plt position near b

figure bn co alerts around day one co alert
time several bn alerts

meter map granularity easily sufficient plan monitoring saim data rates running
sun ultra solaris pentium machines linux
prior implementation ea performance evaluation p rs determine
could handle input data rates required ea briefly describe many
reactive control systems p rs e g um prs durfee et al found
could handle facts per second without unacceptably long delays randomly
generated facts two predicates fact invoked trivial processing incrementing
counter determined effects combinatorial p rs could avoided
batching facts time control loop modified control loop
performance improved remarkably test case facts posted second reduced
time respond first fact reduced time respond facts
reduced memory usage experiments showed fact batch size near optimal
reducing response time value roughly near optimal
l imitations
ea limited modeled low fidelity heuristics
scenario specific population knowledge base many aspects plan execution
currently monitor although monitoring framework easily extended
aspects plans modeled selected capabilities mostly function available
input data available funding modeling ea monitor much broader range plans
used scenarios fact monitor plan composed partial order
defined missions team members
performance data sun ultra solaris product company names mentioned
document trademarks respective holders



fiw ilkins l ee b erry

monitoring robot teams
team robots cooperatively track pursue enemy entities detected unmanned air vehicles uavs unmanned combat air vehicles ucavs growing
interest musliner durfee shin led availability cheaper platforms
easier use sri uv robotics project focuses building system carry mission
objective team ugvs uavs ugv uav autonomous agent
view world onboard reasoning capabilities set resources power
computation unique set sensors mission may limited opportunity
communicate human controller therefore agents must rely one another complete mission concentrates providing reactive regulation low level sensor
systems vehicle controllers attain high level mission goals reacting unforeseen
circumstances taking advantage evolving situation
uv robotics domain resembles suo domain requires rapid assessment
operational situation determination viability existing plans control policies
modification goals objectives findings available resources
unlike suo domain decisions made automated agents
agents must negotiate solutions cooperative fashion one challenges uvs
physically mobile agent need reactive system perception knowledge
events actions physical world generally imprecise perform tasks reliably
repeatedly requires dynamic monitoring
suo ea filters alerts avoid overloading human decision maker must
filter alerts autonomous agent avoid overloading computational resources resources
limited particularly mobile platform balance must struck usefulness
resources used good example balance computational resources available
onboard robots infinite number cpu cycles would able generate large
numbers contingency plans evaluate simulation however
cpu available robot control monitoring therefore make design decisions
limit complexity control monitoring possibly leaving extension
hooks anticipation greater processing power future
uv robotics description
long term goal build test validate architecture agent support multiple
goals dynamic environment cooperative mobile agents initial tasks teams include
surveillance reconnaissance search destroy pursuit evasion team robots would
expected perform tasks minimal supervision key components architecture
identified negotiation strategic execution tasking control execution monitoring recovery failure challenge several robots working together
understand effects actions common team goals
one challenge agent may working toward multiple possibly conflicting goals
thus agent must constantly evaluating commitment actions tasks contribute
satisfaction goals imprecision action sensory input taken
account contribution toward satisfaction current goals plans assessed addition
user must kept informed progress team toward goals user
want actively involved robot control must able intervene necessary thus


fii nteractive e xecution onitoring agent eams

monitoring must ensure robust autonomous operation provide user window
operation team
uv robotics architecture
sri uv robot architecture several years sri intelligent reactive
control negotiation robot motion control wilkins myers myers
wilkins myers cheyer martin konolige myers similar systems
safer holness karuppiah ravela srta vincent horling lesser wagner
ability deal multiple goals evaluate discard goals figure
shows multi level agent adaptation mlaa architecture clearly monitoring pervasive
serves layer architecture well user shown
agents
uses
coordination

policy maker
update ask achievable

query

uses

uses

strategic planner

team
level
strategic
level

update
update

resource mgr

ea watchman
insert goal
update

query

ea plan initializer
ea plan manager

update

tactical
level
prs

process
query

task blender
primitive action
executor

update

control
level

low level actions

figure multi level agent adaptation architecture
coordination module receives goal requests human commander agents
agent participates negotiation process determine role achieving goal
negotiation agent consults strategic planner create plan plan segment referred
recipe assess recipes viability given current commitments negotiation process
goal recipe accepted ea manager see figure instantiates
recipe initiates execution plan initializer creates monitoring sentinels use
ea detect deviation recipe execution execution recipe involves
activation tasks must blended active tasks maximize satisfaction
multiple goals example robot needs reach waypoint set time take picture
location nearby remain concealed task blender modifies path planner runtime



fiw ilkins l ee b erry

achieve three tasks finally lowest layer architecture interface
tasking architecture physical simulated robot controller
monitoring figure done uv ea created architecture
representations suo ea modular design suo ea made adaptation
straightforward architecture internal ea agents depicted figure used little
modification plan representation techniques monitoring plans applying
voi voa calculations issuing alerts implementation initial uv ea code
suo ea done one person week impressive given complexity
task implementation included connecting data sources parsing messages
determining implementing valuable monitoring integrating plans
missions already defined writing domain specific voi voa achieving
missions requires recalculating waypoints least every second cpu
trade speed complexity waypoint calculation monitoring
initial version uv ea detected first five types alerts listed section
uv robotics execution monitoring issues
initial monitoring issues apparent within uv robotics domain divided following four categories
monitoring completion progress toward basic action e g go waypoint
monitoring satisfaction completion multiple tasks robot currently
committed e g pursue evader patrol area photograph target every hours
monitoring activity unknown adversarial entities
monitoring state communication network robot team members e g
communication network quality integrity robot mobility battery level
comparing ontology section first two categories involve general alert
types plan constraint violated constraint violation projected however exist different
levels abstraction often different temporal impact associated monitoring requirements third category cleanly fits adversarial activity detected alert type triggers alerts
autonomous control user reporting fourth category essential team
automated operation effective user interaction involves policy constraint violated alerts
reporting requirement alerts system detected alerts
uv robotics execution assistant
suo ea robot controller uses rich plan representation allow team members
share context communicate user primitive actions domain basic motion control communication requests physical robot goal request user decomposed
individual agent plans recipes intentions aid interact agents recipes
composed partially ordered sequences tasks turn evolve primitive actions
uv ea uses internal architecture similar suo ea shown figure
suo ea ea manager continually applies acts respond goals facts posted



fii nteractive e xecution onitoring agent eams

database acts correspond monitoring requirements layer
mlaa architecture implement user alerts others implement autonomous control
inputs uv ea plans execute policy declarations status reports including
location speed orientation sensor suite messages agents
messages include status reports agents reports mission success failure shared information requests help depending communication conditions policy restrictions
agent may may receive team members status reports date locations
friendly agents entities within visual range sentinels extracted plans policy
declarations evaluated status reports received may produce alerts alerts
produced designed serve autonomous control via plan manager component
user although needs vary considerably
initial experimentation monitoring alerts derived regular state messages
team member state message reports current location velocity attitude sensor
imprecision agent uv robotics act similar suo act figure invoked every
time location report posted ea manager database postings happen several times
second robot receives two messages every second sensors
two team member network conditions receives similar state messages
entities within field vision means team three robots agent
handling minimum least six state messages per second possibly many depending
environment messages agents sharing information
currently considering except update state knowledge adversarial entities
future uv ea extended serve higher layers architecture
common suo ea alert types triggers
initial implementation uv ea detects following types alerts plan
implement additional monitoring project
goal robot current waypoint
stuck robot stuck current waypoint
divergent robot diverging current waypoint
status robot longer reporting state
target visible robot target within sensor range
lost target robot lost track target pursue mission
target gone target moved assigned sector pursue mission
collision robot anticipates hit nearby object next seconds
handoff robot delegated accepted task another team member
uv ea uses techniques suo ea section estimating voa
greatly reducing number low value alerts particular uv ea keeps event histories
team member monitored histories used determine value information
alerts detect stuck divergent status alerts example history indicates


fiw ilkins l ee b erry

time robot location last progress check current waypoint changed
robot away waypoint value issuing divergent alert
calculated
value issuing alert takes consideration customizable latency thresholds repetition parameters associated automated agent user
agent parameters customized improve performance others function behavior robot example value divergent alert function expected
velocity agent agent traveling speed diverge quickly slow
agent similarly change orientation influence value alert turning agent
decreasing distance waypoint may indeed making progress toward goal
example monitoring used facilitate autonomous control illustrated
situation agent patrolling designated area evader becomes visible agent
receives target visible alert type adversarial activity detected reacting
high priority policy pursue evaders explicit plan step agent commits goal
pursue named evader goal achieved activation blending three tasks follow
named evader relocate named evader search named evader thus robot maintain
pursuit even evader slips field vision
users preferred strategy might report first sighting evader track
position noting whenever disappears view however autonomous control requires notification likelihood recovering visual contact deteriorating robot searching
aimlessly point target lost alert type plan constraint violated sent
agents ea manager possibly user example policy exists reacting
type alert cause pursuit goal dropped original patrol plan resumed
uv robotics evaluation
uv ea evaluated within sri experimental framework called sri augmented
reaility simulator sars ortiz et al framework allows autonomous agent architecture software tested within entirely simulated environment team physical
robots mixture two physical robots three pioneer robots equipped
gps shown figure initial experiments carried simulated environment
ran system entirely physical world team two cooperating robots searching
pursuing two independent evader robots run environments composed
combination physical robots simulated entities illustrate scalability operation
uavs monitoring technology effective ensuring robust execution environments
giving human operators insight state activity robot insight facilitated debugging process moving simulated world physical robots
quickly identified
sars specifically designed simulate robots uavs produces output terms
sensors actuators resources battery status communication range forth sars
computation simulation precise model environment sars precise
enough mix physical robots moving real world virtual evaders see
physical robots following virtual evader thus name augmented reality sars
able simulate team ugvs moving uavs flying larger space
available team uavs may larger available physical uavs well



fii nteractive e xecution onitoring agent eams

figure sri experimental pioneer ugv
initial uv ea implementation evaluated respect usefulness output
value alerts real time performance realistic data streams analysis shows
important situations alerted simulated executions tests actual robots
never exactly reproducible
status alerts proven useful human user indicate hardware software
robot network recognized immediately customizable interval noncommunication passed uv ea take considerably longer
detect without alerts ea customizable threshold currently defaults seconds
determines value alert robot reported state certain interval
goal stuck divergent essential alerts autonomous control agent navigation
system well useful human user wants monitor activity single
robot knowing robot reached goal point stopped making
progress toward goal point diverging planned route essential robust
autonomous operation customizable intervals control alerts subtleties domain
must considered avoid false alarms example robot may paused gps
uncertainty gps given time establish connection satellites robot
takes time turn thus regarded stuck divergent turns steering
adjustments time complete
target visible target lost handoff useful user autonomous controller particularly task monitor pursue target autonomous controller
requires immediate awareness loss sensor contact adjust lower level behavior
sensor parameters evader however immediate alerts would unproductive
human user plan level controller customizable interval gives agent time relocate



fiw ilkins l ee b erry

evader possibly avoiding alert human types alerts time critical
evaluation domain
good tracking evader requires recalculating waypoints orientation least every second uv ea able keep data inputs detect occurrences types alerts
mentioned within second recalculate waypoint orientation twice per second constraints difficult meet desktop machines success uv ea
slower processors physical robot involved tradeoffs speed complexity waypoint
calculation monitoring one useful technique latest state report agent
one state report accumulated one cycle monitoring loop
relative cpu access agents processes became important example
adjust time quantum given scheduler ea processes ensure
process receiving messages p rs agent processes ea executed frequently
enough waypoint recalculation alleviated recent upgrades
onboard computer could recur computationally expensive projections alerts
added ea

related work
plan generation received lot attention recently rarely plans used control
monitor execution even rarely plans monitored involve activity hundreds
agents requiring tight coordination previous work execution monitoring focused
executor performs planned actions e g robot controller usually
direct access internal state information suo domain actions performed
external agents usually humans monitor access state executing agents
indirect execution requires different monitoring techniques executor must use incoming
messages determine status agents activities whether actions initiated
completed continuous execution framework myers addressed
indirect execution system builds ideas however domain requires
monitoring many constraints greater time sensitivity much higher rates
incoming data must customize monitoring action generate appropriate high value
alerts
robot designers often avoided plan representations used ai plan generation
community restrictive assumptions pollack mccarthy arkin
domains required expressive plan representation combination act formalism
hierarchical object oriented mission model proved sufficiently expressive providing rich
set goal modalities encoding activity including notions achievement maintenance testing
conclusion waiting
sam system kaminka tambe isi addresses similar automated
pilot agents battlefield sam direct access local automated agent much lower
incoming data rates ea addresses difficult plan recognition plans
friendly agents humans involved sam need produce alerts
tailored human cognitive capabilities experiments sam showed distributed monitoring
outperformed centralized monitoring simpler eas saim use
distributed design building insights



fii nteractive e xecution onitoring agent eams

recent work isi produced monitoring agent named overseer kaminka et al
addresses similar many geographically distributed team members coordinating plan dynamic environment address modeling value
information user overseer use report monitoring adopted
eas must rely unmodifiable legacy agents sufficient bandwidth reliability communication detailed analysis given section
nasas remote agent deep space one jonsson et al muscettola et al
autonomous execution monitoring spacecraft domains many requirements nasas including core requirements concurrent temporal processes interacting
recoveries however nasas remote agent fully automated places heavier burden
module generates plans responses alleviates burden address human
interaction issues considered voa monitoring described detail procedural executive assume similar procedural reactive
control system nasas domain agents mechanical devices onboard spacecraft
behaviors formally modeled agents include humans whose behaviors
easily modeled eas estimate value alerts interact human decision
maker ultimately responsible control decisions
work rationale monitoring pollack mccarthy veloso pollack cox
addressed monitoring world plan generation process causal link
planners see events invalidate plan generated monitor subgoals preconditions
usability conditions user preferences monitored framework plans
executed eas additional capabilities monitoring policy constraints applying mission specific monitoring methods rationale work address time critical
monitoring execution time monitoring large volumes incoming data
alerting users without overwhelming
doyle describes technique focus users attention anomalous system behavior
particularly sensor behavior work would applicable within lowest layer robotics
control module uses causal modeling understand normal behavior sensor anomaly
detection measures causal distance distance normal behavior distance
measures related plan goals actions instead measure deviation typical behavior user still relate reported sensor anomaly higher level effects
threat plan action execution work provides monitoring technique specific sensor system types could easily incorporated monitoring framework resulting
anomaly detection might give low level alerts contributory factor reasoning process
higher level alert classes
phoenix system uses concept plan envelope hart anderson cohen
represent priori expectations actions progress envelopes used action
executes time interrupted altered execution envelope captures
range possible performance action successful execution execution
actual performance system recorded deviates predefined envelope
possible failure detected concept provides useful monitoring technique specific alerttypes particularly concerning actions consume variable amount resources time
envelopes identify action performing better required allowing opportunistic alerts envelopes could easily incorporated monitoring framework additional
monitoring technique could useful higher levels domains


fiw ilkins l ee b erry

suo ea provides capability currently exist machineunderstandable representation plan battlefield currently small unit warfighters must
monitor incoming information relevance manual notification team members
suo ea improves next generation army systems fbcb force xxi battle
command brigade garamone unlike fbcb ea alerts important
changes automatically update areas monitored plan executed dynamically change force structure alert user many issues monitored
systems fratricide risks triggering contingencies schedule coordination
positional deviations plan

conclusions
characterized domain independent challenges posed execution aid interactively
supports humans monitoring activity distributed teams cooperating agents human
machine important issues interactive monitoring adaptivity plan situationspecific monitoring reactivity high value user appropriate alerts showed properties
domains influence challenges solutions presented top level
domain independent categorization types alerts plan monitoring system might
issue user different monitoring techniques generally required category often
domain specific task specific
monitoring framework integrates techniques uses concept
value alert control interaction user conceptual framework facilitates integration monitoring techniques provides domain independent context future discussions monitoring systems discussed design tradeoffs must made
application monitoring framework domain sections
use framework describe monitoring developed used implement execution assistants eas two different dynamic data rich real world domains
rich plan representations allow execution aid filter interpret
react large incoming information alert user appropriately expressive plan representation necessary representing suo plans must coordinate distributed
units trigger contingencies enforce variety constraints equally important
representation monitorable machines meaningful humans plan representation
mission model able model representative suo scenario enough fidelity provide value judged domain experts sufficient plans uv robotics
domain
developed sufficiently rich plan representation extending existing plan representation
hierarchical object oriented mission model encodes knowledge primitive actions
mission specific monitoring methods suo ea implements novel integration
hierarchical monitoring methods reactive control system ea invokes specific
methods defined hierarchy appropriate points monitoring
one central challenge domains well medical monitoring avoid overwhelming
user unwanted alerts false alarms define concepts value information
value giving alert principles determining give alert describe
properties voi voa criteria computing advantages qualitative reasoning



fii nteractive e xecution onitoring agent eams

domains successful use concepts applications voi voa
must customizable user plan situation
asynchronous multiagent architecture extended version p rs reactive
control system monitored execution suo uv robotics plans acceptable
latency given dozen incoming events per second p rs extensions include temporal monitors efficiency improvements methods mission model used throughout suo
monitoring process action specific monitoring evaluation showed plan aware eas
generated appropriate alerts timely manner without overwhelming user many alerts
although small percentage alerts unwanted shown utility advanced ai execution technologies small unit operations
application uv robotics showed generality suo framework monitoring
concepts implemented complex execution assistant one person week code
suo ea uv ea uses plan representation basic architecture suo
ea inputs different tasks respond inputs
generate alerts
future work obvious area future work suo domain incorporation
assistant complete loop continuous execution integration
already accomplished uv robotics domain difficulty suo domain
interface allows soldier interact effectively tool wearable
computer battlefield situation several programs addressing
mentioned section
within scope execution monitoring future work eas could model detect
types plan deviations loss surprise additional types fratricide risks project
future failures provide higher fidelity specialized reasoners particularly terrain reasoning
additional theoretical work voi voa would support better quantitative estimates voi
voa suo mission model already method projecting failures low fidelity
projection capability could easily added uv robotics domain plan implement
additional types alerts near future extend uv ea serve higher layers
architecture common suo ea alert types triggers fragility
uv communication network hostile domains provides set interesting monitoring challenges may incorporation specific monitoring related tasks within cooperative
team missions monitoring strategies uncertain communication environments important
challenge uv robotics domain additional alerts considered future implementation include monitoring movement entities geographical sectors mentioned
plan monitoring deterioration improvement communication conditions monitoring actions intentions coordinating team members facilitate cooperative behavior



fiw ilkins l ee b erry

acknowledgments
suo supported contract f c defense advanced projects agency darpa decision aids program darpa
small unit operations program supervision air force laboratory rome
ucav supported office naval unmanned combat air vehicles program contract n c sri international artificial intelligence center
supported writing thank subject matter experts assisted us primary collaborators evaluators kenneth sharpe saic richard diehl institute
defense analyses used expertise andy fowles chris kearns david miller
u army dismounted battlespace battle laboratory dbbl fort benning cpt
dan ray mounted maneuver battlespace laboratory mmbl fort knox

references
arkin r behavior robotics mit press
ash gold g seiver hayes roth b guaranteeing real time response
limited resources artificial intelligence medicine
athey levin j value information monotone decision tech rep
stanford university stanford ca
bell b jr e brown making adversary decision modeling tractable intent
inference information fusion proc th conference computer generated
forces behavioral representation orlando fl
bonasso r p kortenkamp whitney robot control architecture automate space shuttle operations proc national conference artificial intelligence pp providence ri aaai press
cheyer martin open agent architecture journal autonomous agents
multi agent systems
coiera e intelligent monitoring control dynamic physiological systems artificial
intelligence medicine
donlon j forbus k geographic information system qualitative spatial
reasoning trafficability proc qualitative reasoning workshop loch awe
scotland
doyle r j determining loci anomalies minimal causal proc
international joint conference artificial intelligence pp montreal
quebec canada morgan kaufmann publishers inc san francisco ca
durfee e h huber j kurnow lee j taipe tactical assistants interaction
execution proc autonomous agents acm press york
ferguson g allen j trips integrated intelligent solving assistant
proc national conference artificial intelligence pp aaai press
forbus k towards qualitative modeling battlespace technical report unpublished manuscript northwestern university evanston il


fii nteractive e xecution onitoring agent eams

franke j brown bell b mendenhall h enhancing teamwork teamlevel intent inference proc international conference artificial intelligence
las vegas nv
garamone j digital world meets combat desert exercise tech rep american
forces information service www defenselink mil news apr
georgeff p ingrand f f decision making embedded reasoning system
proc international joint conference ai pp detroit mi morgan
kaufmann publishers inc san francisco ca
gil blythe j solving method plan evaluation critiquing proc
tenth banff knowledge acquisition knowledge systems workshop banff
alberta canada
grosz b kraus evolution sharedplans rao wooldridge eds
foundations theories rational agencies pp
hart anderson cohen p r envelopes vehicle improving
efficiency plan execution tech rep um cs university massachusetts
amherst
holness g karuppiah uppala ravela c service paradigm reconfigurable agents proc nd workshop infrastructure agents mas scalable
mas agents montreal canada
horty j pollack evaluating options context existing plans artificial
intelligence
jonsson morris p muscettola n rajan k interplanetary space
theory practice proc international conference ai
scheduling pp breckenridge co aaai press menlo park ca
kaminka g pynadath tambe monitoring deployed agent teams proc
autonomous agents pp montreal canada
kaminka g tambe experiments distributed centralized socially attentive
monitoring proc autonomous agents pp seattle wa
konolige k myers k artificial intelligence mobile robots case studies
successful robot systems chap saphira architecture design autonomy mit press
koski e makivirta sukuvaara kari frequency reliability alarms
monitoring cardiac postoperative patients international journal clinical monitoring
computing
mouaddib zilberstein knowledge anytime computation proc
international joint conference artificial intelligence pp morgan kaufmann publishers inc san francisco ca
muscettola n nayak p p pell b williams b c remote agent boldly go
ai system gone artificial intelligence
musliner j durfee e h shin k g circa cooperative intelligent real time
control architecture ieee transactions systems man cybernetics


fiw ilkins l ee b erry

myers k l procedural knowledge task level control proc
international conference ai systems aaai press menlo park ca
myers k l morley n human directability agents proc st international
conference knowledge capture victoria b c
myers k l cpef continuous execution framework ai magazine

ortiz c agno berry p vincent r multilevel adaptation teams unmanned
air ground vehicles first aiaa unmanned aerospace vehicles systems technologies
operations conference
ortiz c l introspective elaborative processes rational agents annals mathematics artificial intelligence
ortiz c l hsu e structured negotiation proc first international conference
autonomous agents multiagent systems
pollack e mccarthy c towards focused plan monitoring technique
application mobile robots proc ieee international symposium computational
intelligence robotics automation cira pp
rao georgeff p bdi agents theory practice proc first
intl conference multiagent systems san francisco
schreckenghost et al adjustable control autonomy anomaly response spacebased life support systems proc ijcai workshop autonomy delegation
control
shannon c mathematical theory communication bell system technical journal

tsien c reducing false alarms intensive care unit systematic comparison four
proc american medical informatics association annual fall symposium
tsien c fackler j poor prognosis existing monitors intensive care unit
critical care medicine
veloso pollack cox rationale monitoring dynamic
environments proc international conference ai systems pp
aaai press menlo park ca
vincent r horling b lesser v wagner implementing soft real time agent control
proceedings th international conference autonomous agents acm press
weigner b englund c e ergonomic human factors affecting anesthetic vigilance monitoring performance operating room environment anesthesiology

weinberger e theory pragmatic information application quasispecies
model biological evolution biosystems
wilkins e desjardins call knowledge ai magazine



fii nteractive e xecution onitoring agent eams

wilkins e myers k l common knowledge representation plan generation
reactive execution journal logic computation
wilkins e myers k l multiagent architecture proc
international conference ai systems pp pittsburgh pa
wilkins e myers k l lowrance j wesley l p reacting
uncertain dynamic environments journal experimental theoretical ai





