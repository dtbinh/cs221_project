Journal Artificial Intelligence Research 18 (2003) 351-389

Submitted 10/02; published 5/03

New General Method Generate Random Modal Formulae
Testing Decision Procedures
Peter F. Patel-Schneider

PFPS @ RESEARCH . BELL - LABS . COM

Bell Labs Research
600 Mountain Ave. Murray Hill, NJ 07974, USA

Roberto Sebastiani

RSEBA @ DIT. UNITN .

Dip. di Informatica e Telecomunicazioni
Universita di Trento
via Sommarive 14, I-38050, Trento, Italy

Abstract
recent emergence heavily-optimized modal decision procedures highlighted key
role empirical testing domain. Unfortunately, introduction extensive empirical tests
modal logics recent, far none proposed test generators satisfactory.
cope fact, present new random generation method provides benefits previous methods generating empirical tests. fixes much generalizes one best-known
methods, random CNF test, allowing generating much wider variety problems, covering principle whole input space. new method produces much suitable test sets
current generation modal decision procedures. analyze features new method
means extensive collection empirical tests.

1. Motivation Goals
Heavily-optimized systems determining satisfiability formulae propositional modal logics available. systems, including DLP (Patel-Schneider, 1998), FACT (Horrocks,
1998), *SAT (Giunchiglia, Giunchiglia, & Tacchella, 2002), MSPASS (Hustadt, Schmidt, & Weidenbach, 1999), RACER (Haarslev & Moller, 2001), optimizations much
faster previous generation modal decision procedures, LEAN K (Beckert & Gore,

1997), L OGICS W ORKBENCH (Heuerding, Jager, Schwendimann, & Seyfreid, 1995), KE (Pitt &
Cunningham, 1996) K SAT (Giunchiglia & Sebastiani, 2000). 1
theorem proving problems, neither computational complexity asymptotic algorithmic complexity useful determining effectiveness optimizations,
effectiveness determined empirical testing (Horrocks, Patel-Schneider, & Sebastiani,
2000). Empirical testing directly gives resource consumption terms compute time memory
use; factors pieces system, basic algorithm itself. Empirical testing
used compare different systems, tune system parameters
used modify performance; moreover, used show sort inputs
system handles well, sort inputs system handles poorly.
Unfortunately, introduction extensive empirical tests modal logics recent,
far none proposed test methodologies satisfactory. methods contain many



1. complete list see Renate Schmidts Web page listing theorem provers modal logics
http://www.cs.man.ac.uk/schmidt/tools/.
c 2003 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiPATEL -S CHNEIDER & EBASTIANI

formulae easy current heavily-optimized procedures. contain high rates
trivial insignificant tests. generate problems artificial and/or significant
sample input space. Finally, methods generate formulae big parsed
and/or handled.
reasons described above, presented (Horrocks et al., 2000) analytical survey
state-of-the art empirical testing modal decision procedures. instead present
new random generation method provides benefits previous methods generating empirical tests, built preliminary work (Horrocks et al., 2000). new method fixes much
generalizes 3CNF methodology randomly generating clausal formulae modal logics
(Giunchiglia & Sebastiani, 1996; Hustadt & Schmidt, 1999; Giunchiglia, Giunchiglia, Sebastiani,
& Tacchella, 2000) used many previous empirical tests modal decision procedures. eliminates drastically reduces influence major flaw previous method, 2 allows
generating much wider variety problems.
Section 2 recall list desirable features good test sets. Section 3 briefly
survey state-of-the-art test methods. Sections 4 5 present discuss basic
advanced versions new test method respectively, evaluate features presenting
large amount empirical results. Section 6 provide theoretical result showing
advanced version method, principle, cover whole input space. Section 7
discuss features new method, compare wrt. state-of-the-art methods.
Section 8 conclude indicate possible future research directions.
5-page system description random generator presented IJCAR2001 (PatelSchneider & Sebastiani, 2001).

2. Desirable Features Good Test Sets
benefits empirical testing depend characteristics inputs provided testing,
empirical testing provides data particular inputs. inputs typical
suitable, results empirical testing useful. means inputs
empirical testing must carefully chosen. Horrocks (Horrocks et al., 2000)
previously proposed motivated following key criteria creating good test sets.
Representativeness: ideal test set represent significant sample whole input
space. good empirical test set least cover large area inputs.
Difficulty: good empirical test set provide sufficient level difficulty system(s)
tested. (Some problems hard even state-of-the-art systems,
good benchmark forthcoming systems.)
Termination: practical use, tests terminate provide information within
reasonable amount time. inputs hard, system may able
provide answers within established time. inability system interest,
make system comparison impossible insignificant.
2. is, significant amount inadvertently trivial problems generated unless parameter p set 0 (Horrocks et al., 2000). See Section 4.1 full discussion point.

352

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Scalability: difficulty problems scale up, comparing absolute performances may
less significant comparing performances scale problems increasing
difficulty.
Valid vs. not-valid balance: good test set, valid not-valid problems
less equal number difficulty. Moreover, maximum uncertainty regarding
solution problems desirable.
Reproducibility: good test set allow easily reproducing results.
following criteria derive significant sub-cases main criteria above.
Parameterization: Parameterized inputs sufficient parameters degrees freedom allow
inputs range large portion input space.
Control: particular, useful parameters control monotonically key features input test set, average difficulty valid vs. non-valid rate.
Modal vs. propositional balance: Reasoning modal logics involves alternating two orthogonal search efforts: pure modal reasoning pure propositional reasoning. good test
set challenging viewpoints.
Data organization: data summarizable make comparison possible
limited effort plottable enable qualitative behavior system(s)
highlighted.
Finally, particular care must taken avoid following problems.
Redundancy: Empirical test sets must carefully chosen include inadvertent redundancy. chosen include small sub-inputs dictate result
entire input.
Triviality: good test set flawless, is, contain significant subsets
inadvertent trivial problems.
Artificiality: good empirical test set correspond closely inputs applications.
Over-size: single problems big w.r.t. difficulty, resources
required parsing data managing seriously influence total performance.
criteria, described motivated detail Horrocks et al. (2000),
proposed five-year debate empirical testing modal logics (Giunchiglia & Sebastiani,
1996; Heuerding & Schwendimann, 1996; Hustadt & Schmidt, 1999; Giunchiglia et al., 2000;
Horrocks & Patel-Schneider, 2002). (Notice criteria identical similar
suggested Heuerding & Schwendimann, 1996.)
criteria general, cases require interpretation. First,
implicitly interpreted unless user deliberately wants contrary
reason. instance, might case one wants deliberately generate easy problems,
e.g., sure tested procedure take much time solve them, redundant
353

fiPATEL -S CHNEIDER & EBASTIANI

problems, e.g., test effectiveness redundancy elimination technique, satisfiable
problems only, e.g., test incomplete procedures. extent, key issue
reasonable form control features, one address general-purpose
criteria, specific desiderata.
Second, cases, may tradeoff two distinct criteria, may
necessary choose one them, make compromise. One example given
redundancy artificiality: real-world problems large parts knowledge base
irrelevant query, whose result determined small subpart input; sense
eliminating redundancies may make problems artificial.
Particular attention must paid problem triviality, claimed victims many
areas AI. fact, flaws (i.e., inadvertent trivial problems) detected random generators
SAT (Mitchell, Selman, & Levesque, 1992), CSP (Achlioptas, Kirousis, Kranakis, Krizanc, Molloy, & Stamatiou, 1997; Gent, MacIntyre, Prosser, Smith, & Walsh, 2001), modal reasoning (Hustadt & Schmidt, 1999) QBF (Gent & Walsh, 1999). Thus, notion trivial (and thus
flawed) deserves comment.
work Achlioptas et al. (1997) flawed problems solvable linear time
standard CSP procedures, due undesired presence implicit unary constraints causing
variables value inadmissible. similar notion holds SAT (Mitchell et al., 1992) QBF
(Gent & Walsh, 1999). literature modal reasoning, instead, typical flawed problems
whose (un)satisfiability verified directly propositional level, is, without
investigating modal successors; kind problems typically solved negligible time
w.r.t. problems similar size depth (Hustadt & Schmidt, 1999; Giunchiglia et al., 2000;
Horrocks et al., 2000).3 Thus, little abuse notation otherwise specified,
paper call trivially (un)satisfiable problems kind. 4

3. Overview State-of-the-art
Previous empirical tests mostly generated three methods: hand-generated formulae
(Heuerding & Schwendimann, 1996), randomly-generated clausal modal formulae (Giunchiglia &
Sebastiani, 1996; Hustadt & Schmidt, 1999; Giunchiglia et al., 2000), randomly-generated
quantified boolean formulae translated modal formulae (Massacci, 1999).
already presented detailed analysis three methods (Horrocks et al., 2000).
present quick overview latter two methods, refer following sections.5
3.1 3CNF Random Tests
3CNF test methodology (Giunchiglia & Sebastiani, 1996; Hustadt & Schmidt, 1999;
Giunchiglia et al., 2000), performance system evaluated sets randomly generated 3CNF formulae. CNF formula conjunction CNF clauses, clause
3. course modal implicitly assume modal depth strictly greater zero, is,
consider purely propositional formulas.
4. Notice use suitable expression propositionally (un)satisfiable latter
used different meaning literature modal reasoning (see, e.g., Giunchiglia & Sebastiani, 1996, 2000).
5. first method (Heuerding & Schwendimann, 1996) obsolete, formulae generated easy current
state-of-the-art deciders (Horrocks et al., 2000).

354

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

disjunction either propositional modal literals. literal either atom negation.

Modal atoms formulae form , CNF clause. 3CNF formula
CNF formula clauses exactly 3 literals.
3.1.1 R ANDOM G ENERATOR
3CNF formula randomly generated according five parameters: (maximum) modal
depth ; number clauses top-level conjunction ; number propositional variables

; number distinct box symbols ; probability atom occurring clause
depth purely propositional.
random 3CNF generator, final version (Giunchiglia et al., 2000), works follows:
3CNF formula depth produced randomly generating
depth , forming conjunction;



3CNF clause depth produced randomly generating three distinct, commutativity disjunction, 3CNF atoms depth , negating probability
0.5, forming disjunction;











propositional atom produced picking randomly element
uniform probability;

3CNF clauses

fifi



3CNF atom depth produced generating probability random
"!
"!
,
picked
propositional atom, probability 3CNF atom

"#

randomly

randomly generated 3CNF clause depth $% .

Recently Horrocks Patel-Schneider (2002) proposed variant 3CNF random
#
generator Giunchiglia et al. (2000). added four extra parameters: &(' & , representing
#
#",respectively probability propositional modal atom negated, ) +* )
,
representing respectively minimum maximum number modal literals clause,
equal probability number range. experiments, always set &.'0/1243
#
#",6and ) +* /5)
/57 . extent, 3CNF formulas generated generator
#
# +*
#",6Giunchiglia et al. (2000) setting & ' /8&
/9243 )
/:)
/97 .
3.1.2 EST ETHOD & DATA NALYSIS
3CNF test method works follows. typical problem set characterized fixed

, , : varied way empirically cover 100% satisfiable100%
unsatisfiable transition. Then, tuple parameters values (data point on)
problem set, certain number 3CNF formulae randomly generated, resulting
formulae given input procedure test, maximum time bound. Satisfiability
rates, median/percentile values CPU times, median/percentile values parameters,
e.g., number steps, memory, etc., plotted number clauses ratio

clauses propositional variables <; .
3.2 Random QBF Tests
QBF-based benchmarks (such part TANCS99 benchmarks (Massacci, 1999)), system performances evaluated sets random quantified boolean formulae, gener355

fiPATEL -S CHNEIDER & EBASTIANI

ated according method described Cadoli, Giovanardi, Schaerf (1998) Gent
Walsh (1999) converted modal logic using variant conversion Halpern
Moses (1992).
3.2.1 R ANDOM G ENERATOR





Random QBF formulae generated alternation depth

variables
alternation. matrix random propositional CNF formula clauses length ,
constraints number universally existentially quantified variables within
clause. (This avoids problem generating flawed random QBF formulae highlighted Gent
& Walsh, 1999.) instance, random QBF formula /97 , /
looks like:










(1)
random CNF formula parameters , . denote
total number universally existentially quantified variables respectively. Clearly,
!#" . Moreover, $ modal formula resulting Halpern Moses %
conversion, depth number propositional variables $ &'()" .






















3.2.2 EST ETHOD & DATA NALYSIS
test method, used TANCS competition(s) (Massacci, 1999), works follows.
tests performed single data points. data point, certain number QBF
formulae randomly generated, converted modal logics resulting formulae given
input procedure tested, maximum time bound. number tests
solved within time-limit geometrical mean time successful solutions
reported. Data rescaled abstract away machine run-dependent characteristics.
results typically collection tables presenting data pair system test, one data
point per row.

4. New CNF Generation Method: Basic Version
previous analysis (Horrocks et al., 2000) none current methods
completely satisfactory. cope fact, propose believe much satisfactory method randomly generating modal formulae. new method seen improved much general version random 3CNF generation method Giunchiglia
et al. (2000).
present new method introducing incrementally new features two main steps.
section introduce basic version method, wherein






provide new interpretation parameter (Section 4.1) allows varying
without causing flaws described Horrocks et al. (2000);
extend interpretation parameter (Section 4.3), providing fine-grained
way tuning difficulty generated formulae.

Section 5, present full, advanced version method, wherein
356

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE




extend parameters , allowing shaping explicitly probability
distribution propositional/modal rate clause length respectively (Section 5.1);




allow vary nesting depth subformulae (Section 5.2), allowing
different distributions different depths.

investigate properties CNF generator present series experiments
appropriate settings either mimic previous generation methodologies produce improved
new kinds tests.
tests adopted testing criteria 3CNF method. test set,
fixed parameters except , varied span least satisfiability transition area.
(Because Valid vs. non-valid balance feature Section 2, consider transition area


interesting portion test set.) almost test sets varied ,



, , resulting integral values ;
ranging , 3 , .
3
value generated 100 formulae, sufficient number produce reasonably reliable data.
time limit 1000 seconds imposed attempt determine satisfiability status
formula. common practice, set number boxes throughout testing.
setting produces hardest formulae (Giunchiglia & Sebastiani, 1996; Hustadt & Schmidt,
1999; Giunchiglia et al., 2000). performed several test sets similar parameters, often,

always, varying .
tested formulae two systems, DLP version 4.1 (Patel-Schneider, 1998)
*SAT version 1.3 (Tacchella, 1999), two fastest modal decision procedures. available http://www.bell-labs.com/usr/pfps/dlp http://www.mrg.dist.unige.it/tac respectively.
code used generate tests available http://www.bell-labs.com/usr/pfps/dlp.
plotted results test groups (test sets similar parameters) six four plots.
Two plots devoted performance DLP, one showing median one showing

90th percentile time taken solve formulae value , plotted <; .
test groups ran *SAT plotted median 90th percentile *SAT.
plotted fraction formulae determined satisfiable unsatisfiable
DLP within time limit.6 save space, satisfiability unsatisfiability fractions plotted
together single plot. Satisfiability fractions higher left side plot unsatisfiability fractions higher right. multiple plotting obscure details,
information interested general behavior fractions,
obscured. fact, multiple plotting serves highlight crossover regions,
satisfiability unsatisfiability fractions roughly equal.
Finally, plotted fraction formulae DLP finds model determines
formula unsatisfiable without investigating modal successors. call fractions
trivial satisfiability trivial unsatisfiability fractions. last fractions estimate
number formulae satisfiable Kripke structure successors like, e.g.,
propositional valuations like, e.g., 6fi respecfi
tively. various reasons, discussed below, better indicators triviality








"







fi"

6. Notice two curves symmetric respect 0.5 test exceeds time limit. E.g.,
point 40% tests determined satisfiable DLP, 10% determined unsatisfiable
.
50% solved within time limit, two curves symmetric point,


357

fiPATEL -S CHNEIDER & EBASTIANI

formal measures used previous papers. Again, trivial satisfiability unsatisfiability fractions
plotted together single plot.
reduce clutter plots, used line show results value tested.
distinguish various lines plot, plotted every five 10 data points
symbol, identified legend plot.
Running tests presented paper required months CPU time. this,
ran tests variety machines. machines range speed 296MHz SPARC
Ultra 2 400MHz SPARC Ultra 4 256MB 512MB main memory.
machines completely dedicated tests, otherwise lightly loaded. test
set run machines speed memory. Direct comparison different
groups tests thus take account differences various test machines.
4.1 Reinterpreting Parameter
One problem previous methods generating CNF formulae generated formulae contain pieces make entire formula easy solve. mostly results
presence strictly-propositional top-level clauses. small number propositional variables tests (required produce reasonable difficulty levels current systems),
strictly-propositional top-level clauses needed cover combinations propositional literals make entire formula unsatisfiable. Previous attempts eliminate trivial
unsatisfiability concentrated eliminating top-level propositional literals setting /5
(Hustadt & Schmidt, 1999; Giunchiglia et al., 2000). (Unfortunately choice forces
,
9 formulae hard state-of-the-art systems.) atom
clause generated independently atoms clause approach modifies
probability propositional atoms necessary eliminate problematic clauses.



first new idea approach, suggested previously (Horrocks et al., 2000), works
follows. Instead forbidding strictly-propositional clauses except maximum modal depth, ,
setting / , instead require ratio propositional atoms clause
clause size close possible propositional probability clauses maximum
modal depth . 7





clauses size , ; integral , results clauses modal
depth propositional atoms
modal atoms. values , allow
4
propositional atoms clause modal depth , probability
either 4


4 , respectively.8 instance, / 2 / 7 , clause
4
0
contains 1 propositional 1 modal literal, third propositional probability 0.8,


, eliminates possibility strictly
7
2 $
7 2
/
$9 /
2 .
9 ;
propositional clauses, main cause trivial unsatisfiability, except modal depth .






fiff fiff





"

fiff

7. approaches eliminating propositional unsatisfiability possible. example, would possible
simply remove strictly-propositional clauses generation. However, technique would alter meaning
parameter , is, actual probability literal propositional would become strictly smaller
, control user.



.
8. Remember




!#"%$'&)( "+*-,+. /0 1 "2#"+$'&3( "+45,%.
358

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60
L/N

80

100

120

20

DLP median times

40

60
L/N

80

100

120

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

100

120

20

*SAT median times

40

60
L/N

80

100

120

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

Figure 1: Results

4.1.1 ODAL EPTH



100

/

7

120

,

/

,

/

20

40

,

/:243

60
L/N

80

100

120

(old method)



first experiments direct comparison previous tests. generated CNF formulae
/17 , / , / , / 243 , setting used past, one
exhibits problematic behavior. used new method old 3CNF generation
method Giunchiglia et al. (2000) briefly described Section 3.1 (the old method
on). generated CNF formulae /17 , / , / , / , standard
method eliminating trivially unsatisfiable formulae. (At / new method
old 3CNF generation method.) results tests given Figures 1, 2, 3.
359

fiPATEL -S CHNEIDER & EBASTIANI

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60
L/N

80

100

120

20

DLP median times
1000

60
L/N

80

100

120

DLP 90th percentile times
1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

40

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

100

120

20

*SAT median times
1000

60
L/N

80

100

120

*SAT 90th percentile times
1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

40

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

Figure 2: Results



100

/97

,

120

/

20

,

/

,

/:243

40

60
L/N

80

100

120

(our new method)

One aspect set tests three collections many trivially unsatisfiable formulae satisfiability transition area, even collection top-level propositional atoms.
trivial unsatisfiability occurs collection top-level propositional atoms

/
7 ) DLP *SAT detect
top-level modal atoms (e.g.,
clashes complementary modal literals without investigating modal successors.
presence large number trivially unsatisfiable formulae actually serious
problem tests. trivial unsatisfiability shows formulae almost

/
7 , trivial
unsatisfiable already easy solve. exception
solve anyway. However, new generation method considerably reduces number trivially
unsatisfiable formulae almost entirely removes satisfiable/unsatisfiable transition



360

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60
L/N

80

100

120

20

DLP median times

40

60
L/N

80

100

120

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

100

120

20

*SAT median times

40

60
L/N

80

100

120

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

Figure 3: Results



100

/97

120

,

/

20

,

/

,

40

/:

60
L/N

80

100

120

(either method).

area. trivially satisfiable formulae set tests, few,
smallest clause sizes. presence affect difficulty generated formulae.
two methods /:243 relatively close maximum difficulty, new method
generating somewhat harder formulae. However, method produces difficult formulae,

DLPand *SAT, much broader range <;
original method.
Changing / results formulae orders magnitude harder. good,
previous arguments contrary notwithstanding, would significant number
reasonable test sets work with, / allows consideration values

formulae totally impossible solve current systems, resulting
reasonable test sets.
361

fiPATEL -S CHNEIDER & EBASTIANI

So, maximum modal depth %/ method results formulae similar
difficulty previously-generated formulae still trivially unsatisfiable formulae,
ones seriously affect difficulty test sets.
4.1.2 ODAL EPTH



Restricting attention maximum modal depth / useful. Formulae maximum modal depth representative modal formulae general, particularly
nested modal operators. Sticking maximum modal depth seriously limits
significance generated tests.
would thus able perform interesting experiments larger maximum modal
depths. performed set experiments maximum modal depth /
. started
set tests corresponds previously-performed experiments.
depth /
, old method / 243 time curves dominated half-dome
shape, whose steep side shows number trivially unsatisfiable formulae becomes
large formulae become otherwise easy solve, shown Figure 4. fact, nearly
unsatisfiable formulae trivially unsatisfiable.
extremely serious flaw, difficulty test set drastically affected
trivially unsatisfiable formulae. Changing / viable solution
depth /
formulae much difficult solve, shown Figure 5, median
percentile exceeds timeout formulae determined unsatisfiable, even
3 propositional variables.
new method, shown Figure 6, formulae much difficult solve
old method, abrupt drop-off propositional unsatisfiability,
much easier solve generated / . Further, trivially unsatisfiable formulae
appear interesting portion test sets.
, /243 ) entirely suitable. formulae
Nevertheless choice parameters ( /
becoming hard much early. particular, unsatisfiable formulae

solved

7 , thus unsatisfiability plots cannot distinguished x axis
(recall Footnote 6). However, new method provide advantages already, providing
interesting new set tests, albeit one limited size.









4.2 Increasing



fiff

would able produce better test sets depth 9/
greater. One way
increase propositional probability 243 something 2 , increasing
number propositional atoms thus decreasing difficulty generated formulae.
would problematic previous generation methods would result trivially
unsatisfiable formulae determining results even smaller numbers clauses ,
method much problem.
investigate increasing propositional probability, ran collection tests
maximum modal depth /
propositional probability / 2 old method
new method. results tests given Figures 7 8. before, asymmetries

satisfiability unsatisfiability curves Figure 8 /93 due fact
many tests solved DLP within time limit (c.f., Footnote 6).

fiff



362



fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

Figure 4: Results



160

/

7

180

,

200

/

20

,

,
/

40



60

/:243

80

100
L/N

120

140

160

(old method)

expected, old method produces large numbers trivially unsatisfiable formulae.
trivially unsatisfiable formulae show much earlier /9243 , making tests considerably easier, especially *SAT.
new method produces hard formulae, ones quite bit easier / 243 .

/
particular, DLP solved instances within time limit
. Trivially unsatisfiable
formulae show up, well formulae already unsatisfiable,
significantly affect difficulty tests.
method allows creation more-interesting tests modal depths greater ,
simply adjusting value level difficulty appropriate. Trivial unsatisfiability
problem, whereas old method important feature test.
363

fiPATEL -S CHNEIDER & EBASTIANI

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5

0.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

N=3
N=4
N=5

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5

100

100

10

10

1

1

0.1

0.1

0.01

N=3
N=4
N=5

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5

100

100

10

10

1

1

0.1

0.1

0.01

N=3
N=4
N=5

0.01
20

40

60

80

100
L/N

120

140

Figure 5: Results



160

/

7

180

,

200

/

20

,

,
/



40

60

/8

80

100
L/N

120

140

160

(either method)

4.3 Changing Size Clauses
problem increasing propositional probability formulae become propositional
is, source difficulty becomes propositional component problem, modal component. interested modal decision procedures,
want main (or only) source difficulty propositional reasoning.
decided, therefore, investigate different method modifying difficulty generated formulae. instead allow number literals clause vary manner similar
number propositional atoms. integer clause many literals. Otherwise, allow either literals clause, probability ,





364



fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

1000

80

100
L/N

120

140

160

180

200

DLP 90th percentile times
1000

N=3
N=4
N=5
N=6

100

60

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

1000

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times
1000

N=3
N=4
N=5
N=6

100

60

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

Figure 6: Results

140



160

/97

180

,

200

,

/

20

,
/



40

60

/:243

80

100
L/N

120

140

160

(our new method)

respectively. determine number propositional atoms clause based
number literals clause.
generated CNF formulae /
43 , /
, /
, /243 . change


/17
/
43 produces fewer disjunctive choices result easier formulae.
results tests given Figure 9.
formulae much easier generated / 7 , although still quite
hard form reasonable source testing data. Trivially unsatisfiable formulae appear large
numbers well formulae unsatisfiable relatively easy.
illustrate reduction difficulty smaller values generated formulae
3 ,
/ , / , /:243 . shown Figure 10, formulae even easier
using /







365

fiPATEL -S CHNEIDER & EBASTIANI

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

Figure 7: Results



160

/

7

180

,

200

/

20

,

,
/

40



60

80

fiff

/:2

100
L/N

120

140

160

(old method)



/
43 . Trivially unsatisfiable formulae appear, formulae
become unsatisfiable, formulae become easy, particularly *SAT.
3 reasonable set formulae maximum modal depth %/
/
.
maximum modal depth , formulae much representative formulae
maximum modal depth . formulae neither easy hard current modal
decision procedures satisfiability transition investigated significant numbers
propositional variables.
Further, new method provide collection test sets vary difficulty

varying . previous comparative test sets varied , problematic

interesting parameter sets become hard small values , range .









366

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

1000

80

100
L/N

120

140

160

180

200

DLP 90th percentile times
1000

N=3
N=4
N=5
N=6

100

60

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

1000

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times
1000

N=3
N=4
N=5

100

100

10

10

1

1

0.1

0.1

0.01

N=3
N=4
N=5

0.01
20

40

60

80

100
L/N

120

140



Figure 8: Results

160

/97

180

,

200

/

,

20

,
/



40

60

fiff

/:2

80

100
L/N

120

140

160

(our new method)



/
illustrate effects varying generated formulae using
, / , /5 ,

. shown Figure 11, produces interesting set tests.
/:243 , varying
difficulty levels set appropriately. Trivially unsatisfiable formulae appear,
formulae become unsatisfiable anyway. Trivially unsatisfiable formulae influence
difficulty test.



367

fiPATEL -S CHNEIDER & EBASTIANI

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

40

DLP median times

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

Figure 9: Results

4.3.1 ODAL EPTH



140

/

160



43

180

,

200

/

20

,

,
/



40

60

/:243

80

100
L/N

120

140

160

(our new method)

7

method used generate interesting test sets modal depth / 7 . depth
interesting previous methodseither formulae immensely difficult,
/: , behavior dominated trivial unsatisfiability, /:243 .
interesting levels difficulty, reduce values 43 . much
larger, formulae hard. However,
43 produce interesting test sets,
shown Figure 12. (The relevant asymmetry satisfiable unsatisfiable rates curves


3 due high amount tests exceeding time limit.) problems hard

3 doable, problems trivially (un)satisfiable formulas.
even





368



fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6
N=7

0.8

N=3
N=4
N=5
N=6
N=7

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7

100

N=3
N=4
N=5
N=6
N=7

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7

100

N=3
N=4
N=5
N=6
N=7

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

Figure 10: Results



140

/

160




3

180

,

200

/

20

,

,
/



40

60

/:243

80

100
L/N

120

140

160

(our new method)

method allows us fine control difficulty tests. make test easier,
reduce size clauses reducing value(s) , increase propositional probability

. control missing previous method,
restricted integral value, and,
anyway, always set 7 making much different 2 resulted problems trivial
unsatisfiability maximum modal depths greater 1.

5. New CNF Generation Method: Advanced Version
Actually, generator much general described far. allow direct
specification probability distribution number propositional atoms clause,
369

fiPATEL -S CHNEIDER & EBASTIANI

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

C=2.2
C=2.4
C=2.6
C=2.8

0.8

C=2.2
C=2.4
C=2.6
C=2.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80
L/N

100

120

140

20

DLP median times

40

60

80
L/N

100

120

140

DLP 90th percentile times

1000

1000

C=2.2
C=2.4
C=2.6
C=2.8

100

C=2.2
C=2.4
C=2.6
C=2.8

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80
L/N

100

Figure 11: Results


/

120

140

,

/

20

,

,
/



40

/9243

60

80
L/N

100

120

140

(our new method)

allow distribution different modal depth top level . allow
direct specification probability distribution number literals clause modal
depth. Thus, probability distribution number propositional atoms depends
modal depth number literals clause.
5.1 Generalization: Shaping Probability Distributions.
generator two parameters control shape formulae. first parameter, ,
list lists (e.g., [[0,0,1]]) telling many disjuncts put disjunction
modal level. internal list represents finite discrete probability distribution. instance,
[0,0,1] says ; disjunctions disjunct, ; disjuncts, ; 7
disjunctions (fixed length 3). one element list, frequency used
modal depth, last. possibilities are, e.g., [[1,1,1,1]] (maximum length 4
uniform distribution), [[16,8,4,2,1]] (maximum length 5 exponential distribution),
on.
second parameter, , list lists lists (e.g., [[[],[],[0,3,3,0]]]) controls propositional/modal rate. top-level elements modal depth (here
same). second-level elements disjunctions 1,2,3,... disjunctions (here third
matters disjunctions three disjuncts). instance, [0,3,3,0] says ;
disjunctions propositional atoms, 7 ; propositional atom, 7 ; propositional
atoms, ; 7 propositional atoms (that is, new scheme discussed paper









370





fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

40

DLP median times
1000

100
L/N

120

140

160

180

200

DLP 90th percentile times
N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times
1000

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times
1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

Figure 12: Results



80

1000

N=3
N=4
N=5
N=6

100

60



180

200

20


/



3

,
/



,

40

/97

60

80

,

100
L/N

120

140

160

/:243

/
243 ; old scheme /
243 represented [[[],[],[1,3,3,1]]]). Notice
first element distributions represents value , whilst first element distributions represents value . Setting last element distribution zero [...,0]
eliminates strictly propositional clauses, main cause trivial unsatisfiability;


% ;
Section 4.1.
way implement constraint



"

371

fiPATEL -S CHNEIDER & EBASTIANI

1
2
3
4
5
6

function rnd CNF (d,m,L,N,p,C)
:= 1
repeat

:= rnd clause(d,m,N,p,C);
new(Cl );
return ;

/* generate distinct random clauses */

/* discards




already occurs */



7 function rnd clause(d,m,N,p,C)
8
:= rnd length(d,C);
/* select randomly clause length */
9
/* select randomly prop/modal rate */
:= rnd propnum(d,p,K);
10
repeat
11
j := 1
/* generate P distinct random prop. literals */


12
:= rnd sign() rnd atom(0,m,N,p,C);
/* generate K-P distinct random modal literals */
13
j := P+1

14
:= rnd sign() rnd atom(d,m,N,p,C);
fiff
15
/
;
/* discards Cl contains repeated atoms */
16
repeated atoms in(Cl);
17
return ;






"

18 function rnd atom(d,m,N,p,C)
19
d=0
20
return rnd propositional atom(N); /* select randomly prop. atom */
21
else
!
22
:= rand box(m);
/* select randomly indexed box */

23
:= rand clause(d-1,m,N,p,C);
"!
24
return ;
Figure 13: Schema new CNF random generator.
instance, plots Figures 1-12 obtained following choices C p:
Fig.
C
p
C (advanced version)
p (advanced version)
1, 4
3
0.5 (old) [[0,0,1]]
[[[],[],[1,3,3,1]]
2, 6
3
0.5 (new) [[0,0,1]]
[[[],[],[0,3,3,0]]
3, 5
3
0
[[0,0,1]]
[[[],[],[1,0,0,0]]
7
3
0.6 (old) [[0,0,1]]
[[[],[],[8,36,54,27]]
8
3
0.6 (new) [[0,0,1]]
[[[],[],[0,1,4,0]]
9
2.5
0.5 (new) [[0,1,1]]
[[[],[0,3,0],[0,3,3,0]]
10, 12 2.25
0.5 (new) [[0,2,1]]
[[[],[0,3,0],[0,3,3,0]]
11
2.2, 2.4, 0.5 (new) [[0,4,1]], [[0,3,2]] [[[],[0,3,0],[0,3,3,0]]
2.6, 2.8
[[0,2,3]], [[0,1,4]]
generator works described Figure 13. function new(Cl ) checks /
; rnd length(d,C) selects randomly clause length according -th dis

tribution (e.g, [[0,1,1][1,2][1]], returns probability ; 7



372

fiA N EW G ENERAL ETHOD







G ENERATE R ANDOM ODAL F ORMULAE









probability ; 7 ); rnd propnum(d,p,K) selects randomly number propositional

-th distribution (e.g, ,

atoms per clause according
[[[],[0,1,0],[0,1,0,0]] [[1,0][0,1,0]]], returns deterministically); rnd sign
selects randomly either positive negative sign equal probability; repeated atoms in(Cl)
checks clause contains repeated atom; Sort(Cl) returns clause sorted according

criterium; rnd propositional atom(N) selects uniform probability one propo !
sitional atoms ; rnd box(m) selects uniform probability one indexed boxes
.
eliminating duplicated atoms clause, take care disturb probabilities
first determining shape clause (rows 8-9 Figure 13), instantiating
propositional variables (rows 10-16 Figure 13). clause repeated atoms, either propositional modal, instantiation rejected another instantiation shape performed.
take care way would generate small atoms
fewer small atoms large atoms, resulting greater chance rejecting small atoms
repetition.
elimination duplicated atoms clause matter elimination redundancies, elimination source flaws. fact, one might generate top-level clauses






, would make whole formula inconsistent.









"


"ff"
$

Example 5.1 try guess parameter set new random generator potentially
generate following CNF formula :
















(2)






































"


" fi"
"






"


" "
"

"

"



, /
, /
. top level 0 unary, 2 binary
quick look set / , /
2 ternary clauses; depth 1 2 unary 4 binary clauses; depth 2 6 unary
clauses. Thus, set
C = [[0,2,2],[2,4],[6]].
(3)
top level unary clauses (we represent fact empty list []), 2 binary clauses 1 propositional literal, 2 ternary clauses 1 propositional literal;
depth 1, 2 unary clauses 0 propositional literals, 4 binary clauses 1 propositional literal. (There need provide information depth 2, clauses purely
propositional.) Thus, set
p = [[[],[0,2,0],[0,2,0,0]] [[2,0],[0,4,0]]].

(4)

two expressions normalized into:
C = [[0,1,1],[1,2],[1]]
p = [[[],[0,1,0],[0,1,0,0]] [[1,0],[0,1,0]]].

(5)

Notice setting , obtained changing non-zero values (5)
non-zero values, turning zeros non-zeros (but vice versa!), work,
different probability. instance, turning first list [1,1,1] allows generating
unary clauses top level; anyway, probability ; 7 generator may still produce

formulae binary ternary clauses top level.

"

373

fiPATEL -S CHNEIDER & EBASTIANI

Satisfiability Unsatisfiability Fractions
1

Trivial Satisfiability Unsatisfiability Fractions
1

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

0.8

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80
L/N

100

120

140

20

DLP median times
1000

60

80
L/N

100

120

140

DLP 90th percentile times
1000

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

100

40

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80
L/N

100

120

140

20

40

60

80
L/N

100

120

140



Figure 14: Results DLPwith /97 , /97 , / [[1,8,1]],
/ [[[1,0],[0,1,0],[0,1,1,0]]].

illustration general method, present set tests / , / 7 ,

,
/ [[1,8,1]], %/ [[[1,0],[0,1,0],[0,1,1,0]]]. set tests
introduces small fraction single-literal clauses contain modal literal (except greatest
modal depth, contain, course, single propositional literal). results tests
given Figure 14. Again, trivial instances occur interesting zone. generate
interesting test sets even modal depth .


/17

5.2 Varying Probability Distributions Depth
new method provides ability fine-tune distribution size propositional/modal rate clauses every depth. fine tuning results large number
parameters, far paper investigated distributions conform
scheme described ones correspond 3CNF generation method previously used.
give example vary probability distributions nesting depth


clauses, consider case /
63 ,
/
,
/7 63 ,
/ [[1,8,1],[1,2]],

/ [[[1,0],[0,1,0],[0,1,1,0]],[[1,0],[0,1,0]]]. results tests
given Figure 15.
parameter says probability distributions length clauses occurring
nesting depth [1,8,1] [1,2] respectively. (When explicitly specified,
374

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Satisfiability Unsatisfiability Fractions

Trivial Satisfiability Unsatisfiability Fractions

1

1

0.8

0.8

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

0.6

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

0.6

0.4

0.4

0.2

0.2

0

0
0

20

40

60

80

100

120

140

0

20

40

60

L/N

80

100

120

140

L/N

DLP median times
1000

DLP 90th percentile times
1000

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

100

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

100

10

10

1

1

0.1

0.1

0.01

0.01
0

20

40

60

80

100

120

140

0

20

L/N

40

60

80

100

120

140

L/N




Figure 15: Results DLPwith /
63 ,
/
,
/
7 63 ,
/ [[1,8,1],[1,2]],
/ [[[1,0],[0,1,0],[0,1,1,0]],[[1,0],[0,1,0]]].



considered last distribution default, case depth .) Thus, top-level clauses
average ; unary, ; binary ; ternary, clauses occurring depth
average ; 7 unary ; 7 binary.



parameter says lists probability distributions propositional/modal ratio
nesting depth [[1,0],[0,1,0],[0,1,1,0]] [[1,0],[0,1,0]] respectively. Thus, every depth, unary clauses propositional literal binary clauses
propositional modal literal. top-level ternary clauses either
propositional
literals, equal probability.



Notice top level distributions identical Figure 14, whilst depth
ternary clauses higher fraction unary clauses. slight modifica
tions allow reasonable test sets / 3
/
3 . Moreover, trivial instances nearly
disappeared.

6. Generality Method

%

already observed (Horrocks et al., 2000) normal modal logics,
upward,
loss restriction CNF formulae, equivalence arbitrary
375

fiPATEL -S CHNEIDER & EBASTIANI

normal modal formulae CNF formulae9 . may wonder well generation technique covers whole space CNF formulae, well approximate restricted
subclass space. Example 5.1 represents instance general property random
generation technique, present discuss below.
assume rnd CNF Figure 13 purely random generator, i.e., performs non-deterministic choices independently pure random way. (Of course pseudorandom generators approximate feature.) Moreover, loss generality, restrict
discussion CNF formulae repeated clauses top level repeated
atoms inside clause level, atoms sorted within clause, according generic function Sort() Figure 13. former allows considering formulae
already simplified out; latter allows considering one representative
class formulae equivalent modulo order permutations. discussed Giunchiglia



et al. (2000), latter allows simplifying subformulae like, e.g.,








.




"

$





"
fi"



"

Let sorted CNF formula depth top-level clauses built

"#
propositional atoms modal boxes
, repeated
clause top level repeated atoms inside clause level. construct

that, , , :





(a) -th element -th sublist non-zero clause length
occurring depth ,

(b) -the element -th sub-sublist -th sublist non-zero

clause length occurring depth contains propositional literals.

$

One possible operative technique build works follows. Initialize list
sublists. Then, every depth level 2 , set -th sublist follows:



$






(i) set size sublist maximum size clauses occurring depth ;


(ii) 8ff , count number clauses length occurring depth ,
append result sublist.



Initialize list sublists sub-sublists. Then, every depth level
-th sublist follows:
(i) look
;
(ii)





: set size











$

2 8

sublist maximum size clauses occurring



$

, set

depth

, generate -th sub-sublist follows:



look : number clauses length occurring depth non-zero, set

length sub-sublist 8 , else set 0;



9. holds modal normal logics
upward, conversion works recursively depth
formula, leaves root, time applying sub-formulae propositional CNF conversion
transformation










preserves validity logics.

376








fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE



$


occurring
2

, count number clauses length
propositional literals, append result sub-sublist.



depth

Example 5.1 represents instance application technique construction
above,
. Notice parameters verify points
probability distributions mimic actual number occurrences different kinds
clauses.

$

"

"

$

Theorem 6.1 Let rnd CNF purely random generator Figure 13. Let sorted
CNF formula depth top-level clauses built propositional atoms

#
modal boxes

, repeated clause top level
repeated atoms inside clause level. Let built verify
above. Let obtained respectively substituting
points
zero-values non-zero values. have:

"

$

"

$

(i) rnd CNF (d,m,L,N,p,C) returns non-zero probability ;
(ii) rnd CNF (d,m,L,N,p,C) returns non-zero probability

$



.

$

Proof fully-detailed proof reported Appendix. sketch main steps.
following facts come straightforwardly induction structure :

$

1. every propositional atom occurring depth returned non-zero
probability rnd atom(0,m,N,p,C) rnd atom(0,m,N,p,C);

2. every modal atom occurring depth returned non-zero probability rnd atom(d-i,m,N,p,C), returned non-zero probability
rnd atom(d-i,m,N,p,C);

$







$




3. every clause occurring depth returned non-zero probability
rnd clause(d-i,m,N,p,C), returned non-zero probability
rnd clause(d-i,m,N,p,C).







Thus, every top level clause
returned rnd clause(d,m,N,p,C) rnd clause(d,m,N,p,C)
non-zero probabilities respectively, . fact, comes
straightforwardly returned rnd CNF (d,m,L,N,p,C) rnd CNF (d,m,L,N,p,C)
non-zero probabilities respectively, .
Q.E.D.
Q.E.D.
theoretical viewpoint, Theorem 6.1 shows generation technique
general, because, every CNF formula , exists choice parameters s.t. purely
random generator returns non-zero probability .
unique as,
course, choice criterium suggested points
example, setting obtained turning zeros non-zeros would match
requirements. extreme case, might think general choices

$

"

$

$

C = [[1,1,1,...],...]

"

"

p = [[[[1,1],[1,1,1],[1,1,1,1]...]]].

(6)

guarantee every possible CNF formula within given bound clause size
non-zero probability. Anyway, Theorem 6.1 shows that, extending number non-zeros
values, probability generating decreases.

$

"

377

fiPATEL -S CHNEIDER & EBASTIANI

instance, consider Example 5.1. Turning first list (5) [1,1,1] would still
allow generating formula (2), would allow generating unary clauses top level
probability
; 7 , converges quickly .

"

Usually interested randomly generating one precise formula non-zero
probability would rather small anyway rather randomly generate class formulae similar possible given target class formulae. Adding redundant non-zeros
would extend range shapes formulae, extending variance lowering resemblance
target class formulae.

7. Discussion
7.1 Basic Advanced Method
new testing method used two different levels, depending attitude
skills experience user.
basic usage clause length represented lists either one non-zero
element (e.g., [[0,0,1]], meaning clause length ) two adjacent non-zero elements
(e.g., [[0,2,1]], meaning clause length 7 , probability ; 7 ; 7 respectively);
similarly, propositional/modal rate represented lists either one non-zero element
(e.g., [[[],[],[0,1,0,0]]], meaning propositional literal per clause) two nonzero adjacent elements (e.g., [[[],[],[0,3,2,0]]], meaning either propositional
literals per clause, probability 7 ; 3 ; 3 respectively); distributions vary
depth.
basic way random generator used flawless 10 extension 3CNF
method Giunchiglia Sebastiani (1996), allows setting clause length either
fixed integer values non-integer average values. number parameters kept relatively
small, allow coarse-grained coverage significant subspace affordable number
tests.











advanced usage, possible apply finite probability distributions ;
moreover, possible use different distributions different depths. opens huge amount
possibilities, requires skills experience user: representation sophisticated multi-level distributions may rather complicated, may thus require practice;
moreover, usage complex distributions requires care, presence non-constant distributions clause length propositional/modal rate may significantly enlarge variance
features generated formulae, making effects tests unpredictable
instance-dependent.
order guide user, provide general suggestions choosing parameter sets
testing session. come theoretical issues practical experience using
generator.



Avoid generating purely propositional top-level clauses, is, set p = [[...,0],...].
See Sections 4.1 5.1. possible, avoid generating unary top-level clause, is, set C
= [[0,...],...]). See Section 7.5.

10. sense free flaw highlighted work Hustadt Schmidt (1999) Giunchiglia
et al. (2000).

378

fiA N EW G ENERAL ETHOD






G ENERATE R ANDOM ODAL F ORMULAE

organizing testing session, fix parameter sets according following order
directives.
(i) Fix d. d=1 search mostly dominated propositional component,
d>2 tends dominated modal component. d=2 typically good start.
(ii) Fix m. substantially partitions problem independent problems. Increasing m,
samples tend likely-satisfiable. m=1 typically good start.
(iii) Set C. Increasing top level values C, samples tend likely-satisfiable
propositional component search increases, transition area moves
right hardness peaks grow. Average values 267 top level
distributions C typically good start.
(iv) Set p. Decreasing top level values p, modal component search increases.
top level distributions p, average half top-level atoms propositional (that is, /:243 Section 4) typically good start.
(v) choice parameters, increase N, starting (at least) maximum length C, desired level hardness reached.
(vi) Make L vary within satisfiability transition area.











dealing C p, focus top-level clause distributions first. Small variations
C p top level may cause big variations hardness satisfiability probability.
Variations lower levels typically cause much smaller effects.




Use convex distributions: e.g., [1,5,1] [5,1,5] mean value,
variance former much smaller latter.




keep L ranging satisfiability transition area: increasing L it, fraction
trivially unsatisfiable samples become relevant. determine satisfiability transition
area, make preliminary check samples per point (say, 10) using dichotomic search.
Unlike N (and m), parameters d, C, p make formulas vary shape. Thus,
suggest group together plots d, C p values increasing Ns.

whole, large number parameters makes impossible cover parameter space
reasonable amount testing. However, CNF formula shape generated
method described Section 6 used produce random formulae reasonably
similar formula(e) interest.
7.2 Comparison Old 3CNF Method
whole, new method inherits features old 3CNF method.


Scalability: Increasing , (and average clause length ) difficulty generated
problems scales will. Thus possible compare performance different
systems scale problems increasing difficulty, source difficulty (e.g.,
size, depth, etc.).
Valid vs. not-valid balance: parameter allows tuning satisfiability rate formula
will. Moreover, always possible choose generate testbeds 50%satisfiable rate, allows maximum uncertainty.
379

fiPATEL -S CHNEIDER & EBASTIANI

Termination: new method allows generating test sets depth 3-4 run
state-of-the-art systems reasonable amount time.
Reproducibility: results testbed easy reproduce generators code
parameters values made publicly available.
Parameterization: random generation CNF formulae fully parametric.
Data organization: natural way use new random generator generate tests
plot data increasing values one two parameters. allows easy, quantitative
qualitative evaluations performances different procedures test.
Moreover, new method improves 3CNF method following features.
Representativeness: stated Section 6, CNF formulae represent formulae normal
upward, equivalence-preserving way converting
modal logics
modal formulae CNF . Theorem 6.1, new method allows finegrained sampling class CNF formulae.

%







Difficulty: random CNF formulae

provide challenging test sets


well considered
state-of-the art procedures. CNF formulae
challenges next-generation systems. (Of course, problem generate easy
problems too.)


Control: parameters , allow controlling monotonically difficulty test

set. (E.g., increase , reasonably sure mean/median CPU time plots
increase.) parameter allows controlling satisfiability rate. Monotonicity
allows controlling one feature simply increasing decreasing one value, thus
eliminating uninteresting areas input space.
Modal vs. propositional balance: size Kripke models spanned decision procedures increased exponentially higher modal depths reached new test sets;
moreover, probability repeated top-level atoms dramatically reduced. 11 Consequently, unlike tests Hustadt Schmidt (1999) Giunchiglia et al. (2000)
search longer dominated pure propositional component reasoning,
empirical results show large number modal successors explored.
Finally, new method completely removes drastically reduces effects following
problems.
Redundancy: Propositional modal redundancy already eliminated last versions
3CNF method (Giunchiglia et al., 2000). Moreover, new method allows
eliminating strictly propositional clauses.
Triviality: main cause trivial unsatisfiability removed, trivially unsatisfiable
formulae relegated transition areas experiments.
11. number possible distinct modal atoms increases hyper-exponentially

380



(Horrocks et al., 2000).

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Artificiality: method allows user shape test formulae maximize resemblance expected typical inputs his/her system(s). course, done within
limits imposed randomness: irregular typical input formulas, higher
variance randomly generated formulas, lower average resemblance
typical input formulas.
Over-size: new method allows generating extremely hard problems reasonable size.
comes analysis resulting data hard problems require big amounts
search branches modal successors generated, search dominated
parsing data managing.
generator presented Horrocks Patel-Schneider (2002), extends 3CNF generator Giunchiglia et al. (2000) too. However, new generator allows shaping probability
distributions C p, using different distributions every depth level. principle,
generator Horrocks Patel-Schneider (2002) allows setting probabilities & '
#
&
propositional modal atoms negated. However, feature used
#
muchin experiments Horrocks Patel-Schneider (2002) & ' always 243 &
different 243 one experiment adds nothing generality generator,
new generator decided re-introduce it.
7.3 Comparison QBF-based Method
comparing new CNF generation method QBF-based generation method,
must notice that, far, used different ways, corresponding two different
test techniques briefly summarized Section 3.






TANCS competition(s) (Massacci, 1999), tests performed single
data points, results presented form big tables, entry consisting
number successful solutions rescaled geometrical mean CPU time
solutions. Two systems compared according number successful
solutions, considering geometrical mean CPU time value result even.
due fact comparison geometrical means possible
computed number successful values, or, accurate comparison,
successful values.12 method chosen guarantee fairness
comparison competitors, key requirement competition.
paper instead, focused highlighting qualitative quantitative
behavior system(s). Thus preferred plots tables, preferred
representing percentiles CPU times rather number successful solutions
geometrical mean times. fact, former require distinguish successful
non-successful solutions.13 Thus, much suitable plotting,
comparison geometrical means makes sense data points
number successful solutions, hard follow plot.

12. case tests exceeding timeout, geometrical means altered truncation introduced unsuccessful
solutions. Thus geometrical mean makes sense calculated successful results.
13. percentage successful solutions greater equal , value -th percentile influenced
truncation values introduced timeouts, otherwise equal timeout value.

381

fiPATEL -S CHNEIDER & EBASTIANI

course, generators used ways. (See Heguiabehere de Rijke (2001)
plots random QBF-based method.) Comparing two approaches
organizing presenting data one goals paper, restrict analysis
generation methods, independently used far.
QBF-based generation method Massacci (1999) shares new CNF generation
method several features particular Scalability, Valid vs. not-valid balance, Termination, Reproducibility, Parameterization, Data Organization, Difficulty, Modal vs. propositional balance, Redundancy Triviality considerations identical analogous

new method hold, consider parameters , instead parameters ,
. following features instead deserve discussion.





Control: parameters allow controlling monotonically difficulty test set.
parameter allows controlling satisfiability rate. However, unlike CNF
case, main parameters QBF generator (e.g., ) direct meaning
wrt. main characteristics resulting modal formulae like, e.g., modal depth
number propositional variables.



Representativeness: general QBF formulae good representatives whole class
quantified boolean formulae, way convert generic quantified boolean formula
QBF.14 (The randomly generated QBF formulae used Massacci (1999) restrict
fixed amount variables per alternation.) Nevertheless, class modalencoded QBF formulae restrict candidate Kripke structures
regular structure imposed QBF and/or binary search trees.



Artificiality: Unlike CNF case, main parameters QBF generator (e.g., )
direct meaning wrt. main characteristics resulting modal formulae.
Thus, hard choose parameters random QBF generator resemble
expected typical inputs system(s).
Over-size: One final problem random modal-encoded QBF formulae size. Initial versions
translation method produced test sets 1GB range, stressed much
data-storage retrieval portion provers. (For example, running DLP formulae resulted 1000s timeout without significant search.) Although encoding
significantly improved sense, current versions still produce large modal
formulae, mostly constrain Kripke structures.
Similar considerations recently presented Heguiabehere de Rijke (2001).
whole, believe QBF generation method still appealing, two
methods co-exist empirical test session.
14. Notice QBF denote class prenex CNF QBF formulae, given alternation quantification
variables ending existential one followed CNF propositional formula. conversion works lifting
quantifiers outside formula converting k-CNF [k-DNF] matrix innest quantifier [a ,
negating result pushing negation recursively]. conversion truth-preserving [truth-inverting].


382

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

7.4 Complexity Issues
purely theoretical viewpoint, remarked modal-encoded QBF formulae capture
problems , CNF formulae stuck NP (Massacci, 1999) 15 . statement
requires clarification.
First, test sets necessarily finite, therefore makes sense attribute complexity
class. Thus, speaking complexity classes test problems, refer test sets,
rather infinite sets formulae could generate could unbounded values (at
least one of) generation parameters. particular, statement means infinite set
QBF formulae unbounded number variables per alternation bounded alternation
depth complete (Garey & Johnson, 1979), infinite set CNF formulae
bounded depth unbounded number propositional variables NP (Halpern, 1995).
Secondly, alternation depth variable number per alternation QBFanalogous
modal depth variable number respectively, latter values
resulting modal formulae grow
. 16 fact, QBF formulae bounded alternation
depth unbounded number variables per alternation give rise modal formulae
unbounded depth unbounded number variables.
Finally, vs. NP issue Massacci (1999) matter generators, rather
matter generators used, results organized presented. fact,
far random CNF testbeds always organized fixing parameters except
(modal depth included!) making vary. choice, whose goal produce data plots
covering satisfiability transition area, causes testbed formulae stuck NP.
avoid fact, one may want make vary fix parameters,
satisfiability unbounded depth bounded number propositional variables PSPACEcomplete (Halpern, 1995).



%



& )"



%

7.5 Asymptotic Behavior
Achlioptas et al. (1997) presented study asymptotic behavior random CSP problems.
showed that, well-known random generation models (which reveal flaws

empirical tests) probability problems trivially unsatisfiable tends 1
,

number variables. Gent et al. (2001) lately explained discrepancy
theoretical empirical results showing phenomenon happens significant

probability values reach current CSP solvers.
problem due possible presence (implicit) unary constraints causing variables value inadmissible. occurs non-zero probability, non-zero
probability variable may values inadmissible. causes local inconsistency


whole problem, easily revealed solver.
fffi , probability
situation tends zero. Analogous problems revealed random
SAT problems generated constant probability generation model, unary clauses gen-



15. precisely, Massacci (1999) referred 3CNF formulae Giunchiglia et al. (2000). statement holds
CNF formulae.
16. already noticed (Horrocks et al., 2000), better QBF-analogous modal depth total number
universally quantified variables (
case). fact, modal
bounded depth,
class QBF formulae bounded complete NP, possible guess tree-like witness
nodes.






#


383



fiPATEL -S CHNEIDER & EBASTIANI

erated non-zero probability (Mitchell et al., 1992), random QBF problems, implicit
unit clauses, i.e., clauses containing one existential variable generated non-zero
probability (Gent & Walsh, 1999). random k-SAT model,
, problem
occur (Friedgut, 1998; Achlioptas et al., 1997).





generation model far complicated analyze models above. First, CNF
formulas much complicated structure random SAT, CSP QBF formulas, involving much wider number parameters. Second, unlike models discussed above,
(constraints described by) CNF clauses picked uniform way, probability
!
"
generating given CNF atom
varies strongly depth shape, typically
much smaller generating propositional atom .17 Thus, developing formal probabilistic analysis asymptotic behavior model reach (and scope)
paper. However, provide heuristic considerations.
simplest case allow generation unary clauses top level, is,
C = [[0,...],...], explicit unary constraints. may still
!
!

!

!
"
"
"



.
implicit unary constraints like, e.g.,
Anyway, simple heuristic consideration suggests that, given big numbers distinct CNF
modal atoms may potentially generated, situations unlikely
standard 2-SAT model,
implicit unit constraints
free asymptotic local inconsistency problem.
critical case allow generation unary clauses top level,
is, C = [[x,...],...], . case generate unary clauses, thus
local inconsistencies, non-zero probability. Thus, simple way avoid problem
restrict values allow unary top-level clauses, is, always set C =
[[0,...],...]. Notice, however, hardly becomes problem practice respect condition described Sections 4.1 5.1 avoiding purely propositional top-level
clauses (that is, always set p = [[...,0],...]). fact, given big numbers distinct
CNF modal atoms may potentially generated, probability two contradic !
!
tory modal unit clauses
,
within formula becomes quickly negligible even
small depths.
Notice intentionally considered modal implicit unary constraints like,
!


,
e.g.,
, mutually inconsistent modal literals (e.g., /
!

/


). fact, detecting inconsistencies requires investigating recursively
modal successors, therefore trivial.



"







"
"
$ $ "

"

"

"

"

"



$

8. Conclusions Future Work
shown test sets new method, basic form, allows us generate wider
variety problems covering input space. better-tune difficulty problems
various parameter values, including first reasonable test sets maximum modal depths
7 . produce interesting scaling dimensions, varying number

propositional variables . example, vary propositional probability
size clauses vary difficulty interesting problems. neither restricted
integral values, extremely fine control difficulty test sets. Thus create





17. Again, recall number possible distinct CNF
depth (Horrocks et al., 2000).



384

atoms increases hyper-exponentially modal

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

interesting test sets satisfiable/unsatisfiable transition explorable current
decision procedures.
drastically reduced influence trivial unsatisfiability, flawed previous
CNF methodologies 0% . retain desirable features previous CNF methodologies. test sets easy reproduce large.
full methodology introduced possibility shaping distribution
size propositional/modal rate clauses. done level modal
depth. allows generating much wider variety problems, covering principle whole

input space. instance, produced full test set / 3 /93 (Figure 15).
moved closer application data, significant direct applications
modal decision procedures thus guidance sorts inputs would close
application inputs. case, believe moved closer ever possibility
approximating given classes input formulae.
still much work done using generation methodology. produce
test sets try test sets various modal decision procedures. may want
uncover parameter settings full generality generation method needed produce
reasonable test sets.

Acknowledgments
would thank Thomas Eiter three anonymous reviewers valuable comments helpful suggestions greatly improved quality paper. second author
supported MIUR COFIN02 project, code 2002097822 003, C ALCULEMUS !
IHP-RTN EC project, contract code HPRN-CT-2000-00102, thus benefited financial contribution Commission IHP programme.

Appendix A: Fully-detailed Proof Theorem 6.1

$

Theorem 6.1 Let rnd CNF purely random generator Figure 13. Let sorted
CNF formula depth top-level clauses built propositional atoms

#
modal boxes

, repeated clause top level
repeated atoms inside clause level. Let built verify
Section 6. Let obtained respectively substituting
points
zero-values non-zero values. have:

"

$

"

$

(i) rnd CNF (d,m,L,N,p,C) returns non-zero probability ;
(ii) rnd CNF (d,m,L,N,p,C) returns non-zero probability

$

$



.

Proof proof works induction structure . First, prove that:

$

1. every propositional atom occurring depth returned non-zero
probability rnd atom(0,m,N,p,C) rnd atom(0,m,N,p,C);


2. every modal atom occurring depth returned non-zero probability rnd atom(d-i,m,N,p,C), returned non-zero probability
rnd atom(d-i,m,N,p,C);




$




385




fiPATEL -S CHNEIDER & EBASTIANI

$

3. every clause occurring depth returned non-zero probability
rnd clause(d-i,m,N,p,C), returned non-zero probability
rnd clause(d-i,m,N,p,C).







point 3. every top level clause returned rnd clause(d,m,N,p,C)
.
rnd clause(d,m,N,p,C) probabilities respectively,
repeated clause, recalling property probabilities have:

$








"


" "
"






"








"

:





/



8



8





8



/

/






















"




(7)



8

"
(8)










(9)


Notice (8) strictly monotonic components. Thus,
need prove points 1, 2 3.



.

+

$

1. Let propositional atom occurring depth ,
.
rnd atom(0,m,N,p,C) rnd atom(0,m,N,p,C) invoke rnd propositional atom(N),

returns probability / ; .

2. Let
boxed clause occurring depth , 9 : .


occurs depth : . (Notice <% instead :
cannot occur
clause
depth , maximum depth .)

$

$



$

$

(i) inductive hypothesis, follows point 3. returned non-zero
probability rnd clause(d-i-1,m,N,p,C). , rnd atom(d-i,m,N,p,C) invokes

non-zero probrand box(m) rand clause(d-i-1,m,N,p,C), returns
/ ;
.
ability
(ii) inductive hypothesis, follows point 3. returned nonzero probability
rnd clause(d-i-1,m,N,p,C). rnd atom(d-i,m,N,p,C)

vokes rand box(m) rand clause(d-i-1,m,N,p,C), returns
non . Thus, .
zero probability / ;















propositional literals, occurs $ depth
3. Let clause length 5
, . $ sorted, represented " ,
denote modal literals.

denote propositional literals
(i) inductive hypothesis, follows point 1. propositional literal
rnd sign() rnd atom(0,m,N,p,C),
returned non-zero probability
follows point 2. modal literals
returned non-zero

rnd sign() rnd atom(d-i,m,N,p,C).
probability


<



%
!



243

243

386



!





!





!

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE





construction , -th element -th sublist non-zero; thus,
returned non-zero probability rnd length(d-i,C).

construction , -the element -th sub-sublist -th sublist
!
non-zero; thus, returned non-zero probability rnd propnum(d,p,j).18
Similarly (9), repeated atoms inside clause, returned
rnd clause(d-i,m,N,p,C) non-zero probability

$





!
/





"
243

!


















!































(10)

(9), expression right (10) strictly monotonic terms ,
! , s, within domain definition.
(ii) inductive hypothesis, follows point 1. propositional literal
243
rnd sign()
returned non-zero probability 243

rnd atom(0,m,N,p,C), follows point 2. modal literals



turned non-zero probability 243
%243 rnd sign() rnd atom(di,m,N,p,C).

construction , -th element -th sublist non-zero; thus,
returned non-zero probability rnd length(d-i,C). construction
, .

construction , -the element -th sub-sublist -th
!
sublist non-zero; thus, returned non-zero probability

!

!
rnd propnum(d,p,j). construction , .
repeated atoms inside clause, follows returned rnd clause(di,m,N,p,C) non-zero probability




















$





/
243 "






strict monotonicity (10) (11), .


!





!














!

(11)

Q.E.D.

References
Achlioptas, D., Kirousis, L. M., Kranakis, E., Krizanc, D., Molloy, M. S. O., & Stamatiou, Y. C.
(1997). Random constraint satisfaction: accurate picture. Smolka, G. (Ed.), Principles Practice Constraint Programming, Vol. 1330 Lecture Notes Computer
Science, pp. 107120, Berlin. Springer.
Beckert, B., & Gore, R. (1997). Free variable tableaux propositional modal logics. Automated
Reasoning Analytic Tableaux Related Methods: International Conference Tableaux97, Vol. 1227 Lecture Notes Artificial Intelligence, pp. 91106, Berlin. Springer.





18. Notice conditioned probability, is, probability propositional literal provided
clause literals. matches fact input rnd propnum(d,p,j).

387

fiPATEL -S CHNEIDER & EBASTIANI

Cadoli, M., Giovanardi, A., & Schaerf, M. (1998). algorithm evaluate quantified Boolean
formulae. Proceedings 15th National Conference Artificial Intelligence (AAAI98), pp. 262267, Menlo Park, CA. AAAI Press.
Friedgut, E. (1998). Sharp thresholds graph properties, k-sat problem. Journal
American Mathematical Society, 12(4), 10171054.
Garey, M. R., & Johnson, D. S. (1979). Computers Intractability: Guide Theory
NP-Completeness. W. H. Freeman, New York.
Gent, I. P., MacIntyre, E., Prosser, P., Smith, B. M., & Walsh, T. (2001). Random constraint satisfaction: Flaws structure. Journal Constraints, 6(4), 345372.
Gent, I. P., & Walsh, T. (1999). Beyond NP: QSAT phase transition. Proceedings
Sixteenth National Conference Artificial Intelligence Eleventh Innovative Applications Artificial Intelligence Conference (AAAI-99), pp. 648653, Menlo Park, CA. AAAI
Press.
Giunchiglia, E., Giunchiglia, F., Sebastiani, R., & Tacchella, A. (2000). SAT vs. Translation based
decision procedures modal logics: comparative evaluation. Journal Applied NonClassical Logics, 10(2), 145172.
Giunchiglia, E., Giunchiglia, F., & Tacchella, A. (2002). SAT based decision procedures classical
modal logics. Journal Automated Reasoning, 28, 143171.
Giunchiglia, F., & Sebastiani, R. (1996). Building decision procedures modal logics propositional decision procedures - case study modal K. Proceedings Thirteenth
Conference Automated Deduction, Vol. 1104 Lecture Notes Artificial Intelligence,
pp. 583597, Berlin. Springer.
Giunchiglia, F., & Sebastiani, R. (2000). Building decision procedures modal logics propositional decision procedures - case study modal K(m). Information Computation,
162(1/2), 158178.
Haarslev, V., & Moller, R. (2001). RACER system description. Proceedings International Joint Conference Automated Reasoning, IJCAR2001, Vol. 2083 Lecture Notes
Computer Science, pp. 701705, Siena, Italy. Springer.
Halpern, J. Y. (1995). effect bounding number primitive propositions depth
nesting complexity modal logic. Artificial Intelligence, 75(3), 361372.
Halpern, J. Y., & Moses, Y. (1992). guide completeness complexity modal logics
knowledge belief. Artificial Intelligence, 54(3), 319379.
Heguiabehere, J., & de Rijke, M. (2001). random modal QBF test set. IJCAR2001 Workshop
Issues Design Experimental Evaluation System Modal Temporal
Logics, pp. 5867.
Heuerding, A., Jager, G., Schwendimann, S., & Seyfreid, M. (1995). Propositional logics
computer. Baumgartner, P., Hahnle, R., & Posegga, J. (Eds.), Automated Reasoning
Analytic Tableaux Related Methods: International Conference Tableaux95, Vol. 918
Lecture Notes Artificial Intelligence, pp. 310323, Berlin. Springer.
Heuerding, A., & Schwendimann, S. (1996). benchmark method propositional modal
logics K, KT, S4.. Tech. rep. IAM-96-015, University Bern, Switzerland.
388

fiA N EW G ENERAL ETHOD



G ENERATE R ANDOM ODAL F ORMULAE

Horrocks, I. (1998). Using expressive description logic: FaCT fiction?. Cohn, A. G., Schubert, L., & Shapiro, S. C. (Eds.), Principles Knowledge Representation Reasoning:
Proceedings Sixth International Conference (KR98), pp. 636647. Morgan Kaufmann
Publishers, San Francisco, California.

%

Horrocks, I., & Patel-Schneider, P. F. (2002). Evaluating optimised decision procedures propositional modal
satisfiability. Journal Automated Reasoning, 28(2), 173204.
Horrocks, I., Patel-Schneider, P. F., & Sebastiani, R. (2000). analysis empirical testing
modal decision procedures. Logic Journal IGPL, 8(3), 293323.
Hustadt, U., & Schmidt, R. A. (1999). empirical analysis modal theorem provers. Journal
Applied Non-Classical Logics, 9(4), 479522.
Hustadt, U., Schmidt, R. A., & Weidenbach, C. (1999). MSPASS: Subsumption testing SPASS.
Lambrix, P., Borgida, A., Lenzerini, M., Moller, R., & Patel-Schneider, P. (Eds.), Proceedings 1999 International Workshop Description Logics (DL99)., pp. 136137.
Massacci, F. (1999). Design results Tableaux-99 non-classical (modal) system competition.
Automated Reasoning Analytic Tableaux Related Methods: International Conference Tableaux99, Vol. 1617 Lecture Notes Artificial Intelligence, pp. 1418, Berlin.
Springer.
Mitchell, D., Selman, B., & Levesque, H. (1992). Hard easy distributions SAT problems.
Proceedings Tenth National Conference Artificial Intelligence, pp. 459465, San
Jose, California. American Association Artificial Intelligence.
Patel-Schneider, P. F. (1998). DLP system description. Franconi, E., Giacomo, G. D., MacGregor, R. M., Nutt, W., Welty, C. A., & Sebastiani, F. (Eds.), Collected Papers International Description Logics Workshop (DL98), pp. 8789. Available CEUR-WS/Vol-11
http://SunSITE.Informatik.RWTH-Aachen.DE/Publications/CEUR-WS.
Patel-Schneider, P. F., & Sebastiani, R. (2001). new system methodology generating random modal formulae. Proceedings International Joint Conference Automated
Reasoning, IJCAR2001, Vol. 2083 Lecture Notes Computer Science, pp. 464468,
Siena, Italy. Springer.
Pitt, J., & Cunningham, J. (1996). Distributed modal theorem proving KE. Minglioli, P.,
Moscato, U., Mindici, D., & Ornaghi, M. (Eds.), Automated Reasoning Analytic Tableaux Related Methods: International Conference Tableaux96, Vol. 1071 Lecture
Notes Artificial Intelligence, pp. 160176, Berlin. Springer.
Tacchella, A. (1999). *SAT system description. Lambrix, P., Borgida, A., Lenzerini, M., Moller,
R., & Patel-Schneider, P. (Eds.), Proceedings 1999 International Workshop Description Logics (DL99)., pp. 142144.

389


