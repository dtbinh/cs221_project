journal artificial intelligence

submitted published

time complexity approximate heuristics
multiple solution search spaces
hang dinh

htdinh iusb edu

department computer information sciences
indiana university south bend
mishawaka ave p box
south bend usa

hieu dinh

hieu dinh mathworks com

mathworks
apple hill drive
natick usa

laurent michel
alexander russell

ldm engr uconn edu
acr cse uconn edu

department computer science engineering
university connecticut
fairfield way unit
storrs ct usa

abstract


study behavior search coupled heuristic h satisfying
h h h small constants h denotes optimal
cost solution prove rigorous general upper bound time complexity search
trees depends accuracy heuristic distribution solutions
upper bound essentially tight worst case fact nearly matching lower bounds
attained even non adversarially chosen solution sets induced simple stochastic
model consequence rigorous effective branching factor search
reduced long number near optimal solutions search tree
large go provide upper bound search graphs context
establish bound running time determined spectrum graph
experimentally explore extent rigorous upper bounds predict behavior
natural combinatorially rich search spaces begin applying solve
knapsack near accurate admissible heuristics constructed efficient approximation additionally apply analysis search partial
latin square provide quite exact analytic bounds number nearoptimal solutions demonstrate dramatic reduction effective branching factor
coupled near accurate heuristics search spaces suitably sparse solution sets

introduction
classical search procedure hart nilson raphael method bringing heuristic
information bear natural class search one celebrated features
coupled admissible heuristic function one returns lower bound
distance solution guaranteed optimal solution worst case
behavior even admissible heuristic function better say breadthfirst search practice intuition suggest availability accurate heuristic
decrease running time indeed methods computing accurate admissible heuristic functions
search presented literature see e g felner korf hanan
article investigate effect accuracy running time search
ai access foundation rights reserved

fidinh dinh michel russell

specifically focus rigorous estimates running time coupled accurate
heuristics
initial notion accuracy adopt motivated standard framework approximation f hard combinatorial optimization e g permanent
matrix value euclidean traveling salesman etc efficient approximation f runs polynomial time f x x f x
inputs x f x optimal solution cost input x x solution cost
returned input x approximation community developed
efficient approximation wide swath np hard combinatorial optimization cases provided dramatic lower bounds asserting cannot
approximated beyond certain thresholds see vazirani hochbaum surveys
literature considering great multiplicity successfully addressed
way including believed far outside np matrix permanent natural
study behavior coupled heuristic function possessing properties indeed
interesting cases e g euclidean travelling salesman matrix permanent knapsack hard
combinatorial approximated polynomial time within fixed constant
cases polynomial depends constant remark many celebrated
approximation provable performance guarantees proceed iterative update methods coupled bounds local change objective value e g basis reduction lenstra
lenstra lovasz typical primal dual methods vazirani
encouraged possibility utilizing heuristics practice natural question
understanding structural properties heuristics search spaces indeed guarantee
palatable performance part study behavior provided heuristic
function approximation cost cheapest path solution certain natural
situations arise approximation quality asymmetric e case admissible heuristic
slightly refine notion accuracy distinguishing multiplicative factors two sides
approximation say heuristic h approximation actual cost
function h simply approximate h h h particular admissible
heuristics approximation approximate call heuristic accurate
approximate detailed description appears section
sketch
initially model search space infinite b ary tree distinguished root
instance determined set nodes treethe solutions cost
associated solution simply depth search procedure equipped
oracle given node n determines n ii heuristic function h assigns
node n tree estimate actual length h n shortest descending path
solution let solution set first hence optimal solution appears
depth establish family upper bounds number nodes expanded h
approximation h finds solution cost worse expands
b dn nodes n denotes number solutions depth less
see lemma stronger emphasize bound applies
solution space generalized search non uniform branching factors
non uniform edge costs see section
go upper bound essentially tight fact bound
nearly achieved even non adversarially determined solution spaces selected according simple
stochastic rule see theorems remark bounds running time fall
rapidly accuracy heuristics increases long number near optimal solutions
large although may grow exponentially instance effective branching factor
guided admissible accurate heuristic reduced b n bd however


fithe time complexity approximate heuristics

worst cases occur search space overwhelming number near optimal
solutions still expand almost many nodes brute force regardless heuristic
accuracy likewise strong guarantees general necessary effect appreciable
changes average branching factor discussed theorem
establishing bounds tree search model examine time complexity
graph unrolling graph equivalent tree bounding number
near optimal solutions tree lift solution original graph appears
section spectral graph theory number n lifted solutions
tree corresponding b regular graph g assuming optimal solution depth
logb g number solutions g constant second largest eigenvalue
absolute value adjacency matrix g particular almost b regular graphs
b grow size graphs b yields effective branching
factor search graphs roughly b heuristic accurate
experimentally evaluate heuristics
experimental relationship practice course upper
bounds interesting reflect behavior search practice bounds
guarantee general e number nodes expanded accurate heuristic
satisfies
e bd dn
plausible condition n bd simply e cbd node expansions
constant c depend c may depend k properties search
space suggests hypothesis hard combinatorial suitably sparse
near optimal solutions
e cbd

equivalently

log e log c log b



particular suggests linear dependence log e
explore hypothesis conducted battery experiments natural search tree
presentation well studied knapsack obtain admissible accurate heuristic applying fully polynomial time approximation scheme fptas due
work ibarra kim see vazirani p provides us
convenient method varying without changing parameters search remark
natural search space quite irregular edge weighted directed graph
avoid reopening node thus search space equivalent one spanning
subtrees terms behaviors order focus computationally nontrivial examples
generate knapsack instances distributions empirically hard best known exact
pisinger experiments yield remarkably linear behavior
log e function quite wide window values indeed tests yield r correlation
coefficients least square linear regression model excess range
knapsack instances see section details
experimental discussed knapsack support linear
scaling several actual parameters search unknown example cannot rule
possibility approximation asked produce approximation
fact produce significantly better approximation seems far fetched
behavior could provide spurious evidence linear scaling explore hypothesis
detail additionally explore artificial search space partial latin square completion
pls provide precise control fact n pls
featured number benchmarks local search complete search methods roughly
finding assignment values empty cells partially filled n n table
row column completed table permutation set n
formulation search space n regular graph thus brute force branching


fidinh dinh michel russell

factor n search space controlling n prove asymptotic upper bound

n effective branching factor coupled accurate heuristic
experimentally evaluate effective branching factor admissible accurate
heuristic h expands nodes admissible accurate heuristic
strictly larger h
remark pls well studied natural invent specific search
space structure allows us analytically control number near optimal
solutions unlike knapsack construct efficient admissible accurate
heuristic every fixed thanks given fptas known approximation pls
much weakerthey provide approximations specific constants e avoid
hurdle construct instances pls known solution extract heuristics
h despite planted solutions contrived heuristics infrastructure provides
example combinatorially rich search space known solution multiplicity heuristic
known quality provides means experimentally measuring relationship
heuristic accuracy running time empirical data remarkable agreement
theoretical upper bounds subtly empirically analyzing linear dependence log e
see effective branching factor heuristic h given pls
search space roughly n see section
far aware first experimental explore relationship
e understanding heuristic accuracy solution space structure general
ensuing bounds running time heuristics practical interest remains
intriguing open remark n puzzle
extensively used test cases seems difficult heuristics accuracy sufficient
significantly reduce average branching factor best rigorous give rather
large constant guarantees ratner warmuth parberry particular parberry
shows one quickly compute solutions hence approximate heuristics
factor worse optimal situation somewhat better random instances
establishes factor see demaines work general discussion
observe search privy heuristic information requires bd running
time general solution high probability statements kind made
solution space selected sufficiently rich family pessimistic lower bounds exist even
situations search space highly structured aaronson suggest
accurate heuristic information dramatic impact search even face substantial
solution multiplicity
article expands conference article dinh russell su complexity
approximate heuristic function studied trees article generalize
asymmetric approximation develop analogous bounds general search spaces establishing
connection algebraic graph theory report battery supporting experimental
motivation related work
subject enormous body literature often investigating
behavior relation specific heuristic search combination e g zahavi felner
schaeffer sturtevant sen bagchi zhang korf reid korf reid
edelkamp helmert roger space complexity korf time complexity
addressed levels abstraction abstract formulations involving accuracy
guarantees consider studied tree search
space possesses single solution single solution framework gaschnig given
exponential lower bounds bd time complexity admissible accurate heuristics
def
b b b see pearl p pohl studied restrictive
additive approximation guarantees h linear time complexity average case


fithe time complexity approximate heuristics

analysis probabilistic accuracy heuristics given single solution
search spaces huyn dechter pearl previous analysis suggested effect
heuristic functions would reduce effective branching factor search consistent
applied single solution model special case n
single solution model however appears inappropriate abstraction search
featuring multiple solutions recognized presence multiple
solutions may significantly deteriorate ability benefit improved precision pearl
p emphasis added
understanding time complexity terms structural properties h
multiple solution spaces studied korf reid korf et al korf
estimate distribution h values particular studied
abstract search space given b ary tree concluded effect heuristic function
reduce effective depth search rather effective branching factor korf reid
korf et al case accurate heuristics controlled solution multiplicity
conclusion directly contradicts findings indicate dramatic reduction effective branching
factor cases explain discrepancy observe analysis relies equilibrium assumption fails accurate heuristics fact fails even much weaker heuristic
guarantees h v h v small basic structure argument however
naturally adapted case accurate heuristics case yields reduction
effective branching factor give detailed discussion section
follow korf reid korf et al korfs work edelkamp
examined indeed ida undirected graphs relying equilibrium assumption
edelkamps technique use graph spectrum estimate number n nodes
certain depth brute force search tree cover tree however unlike spectral
analysis original search graph g edelkamp analyzed spectrum related
equivalence graph quite different structural properties specifically edelkamp found
asymptotic branching factor defined ratio n n large equals largest
eigenvalue adjacency matrix equivalence graph certain puzzle compare
spectral analysis depends second largest eigenvalue adjacency matrix ag
original search graph g largest eigenvalue ag equals branching factor
assuming g regular
additionally analyses korf reid korf et al korf
therefore edelkamp focus particular subclass admissible heuristics called consistent
heuristics remark heuristics used experiments knapsack
admissible likely inconsistent zhang sturtevant holte schaeffer felner zahavi
et al discuss usages inconsistent heuristics practice
work explores worst case average case time complexity search
trees graphs multiple solutions coupled heuristics possessing accuracy
guarantees make assumptions regarding consistency admissibility heuristics though
several naturally specialized case addition studying effect
heuristic accuracy shed light sensitivity distribution solutions
combinatorial structure underlying search spaces e g graph eigenvalues
measure among things extent connectedness graphs far aware
first rigorous combining search space structure heuristic accuracy single
framework predicting behavior

preliminaries
typical search defined search graph starting node set goal nodes
called solutions instance search graph however simulated search
cover tree without reducing running time discussed section since number


fidinh dinh michel russell

expansions cover tree graph larger equal original graph
sufficient upper bound running time search cover tree justification
begin considering search rooted tree
definition notations let tree representing infinite search space
let r denote root convenience use symbol denote set vertices
tree solutions specified nonempty subset nodes edge
assigned positive number called edge cost vertex v let
subtree v denote subtree rooted v
path v denote path root r v
g v denote total edge cost path v
h v denote cost least costly path v solution subtree v write
h v solution exists
objective value search h r cost cheapest path root r
solution cost solution value g solution cost equal h r
referred optimal
best first search employing additive evaluation function f v g v
h v h function heuristically estimates actual cost h given heuristic
function h h defined search tree
described follows
search tree
initialize open r
repeat open empty
remove open node v function f g h minimum
b v solution exit success return v
c otherwise expand node v adding children open
exit failure
known e g dechter pearl lemma time terminates
vertex v present open v lies solution path f v
min max value defined follows


def
min
max f u

ss

upath

fact leads following node expansion conditions
vertex v expanded heuristic h must f v cf dechter pearl
thm say vertex v satisfying f v potentially expanded
vertex v
max

f u

upath v

must expanded heuristic h cf dechter pearl thm particular
function f monotonically increases along path root r v node v
must expanded f v


fithe time complexity approximate heuristics

value obtained solution path search terminates dechter
pearl lemma implies upper bound cost solution found
search
remark h reasonable approximation h along path optimal solution
immediately provides control particular
proposition see davis bramanti gregor wang suppose
h v h v vertices v lying optimal solution path h r
proof let optimal solution v path
f v g v h v g v g g v g
hence

max

f v g h r

vpath

particular h r heuristic function satisfies h v h v v
case heuristic function called admissible observation recovers fact
finds optimal solution coupled admissible heuristic function cf pearl
thm admissible heuristics possess natural dominance property pearl
thm p admissible heuristic functions h h h informed
h e h v h v v h dominates h e every node
expanded h expanded h
approximate heuristics
recall introduction shall focus heuristics providing approximation
actual optimal cost reach solution
definition let heuristic function h called approximate
h v h v h v

v

approximate heuristic simply called approximate
heuristic function h approximate shall say h heuristic error h
accurate
see two approximation factors control performance search
rather different ways effects running time impact
running time quality solution found particularly special case
corresponds admissible heuristics finds optimal solution general
proposition
fact h approximate h r
hence solution found approximate heuristic must cost
h r thus exceeds optimal cost multiplicative factor equal

definition let solution cost less h r called optimal solution
assumptions simplify analysis assume search tree b ary
every edge unit cost unless otherwise specified case cost g v simply
depth node v h v shortest distance v solution descendant v
throughout parameters b branching factor search space
quality approximation provided heuristic function fixed rule case
simplicity


fidinh dinh michel russell

upper bounds running time trees
going establish upper bounds running time search tree model
first generic upper bound applies solution space apply
generic upper bound natural stochastic solution space model
generic upper bound
mentioned introduction begin upper bound time complexity
search depending weight distribution solution set addition heuristics
approximation factors shall fact upper bound number potentially expanded nodes
clearly upper bound number nodes actually expanded
lemma let solution set whose optimal solutions lie depth every
number nodes expanded search tree approximate heuristic

b dn
nodes n number optimal solutions
presence independent parameter offers flexible way apply upper bound
lemma particular applying lemma fact
arrive upper bound b dn mentioned introduction bound works
best n b general n b choose least
n b opposite case n b c
positive constant c obtain better bound choosing c since
n dominates terms b n given choice
proof lemma let h r let consider node v lie
path root optimal solution h v g v
f v g v g v g v
recall node potentially expanded f value less equal since
node v potentially expanded
g v



since inequality equivalent
g v
words node depths range


potentially expanded lies path root optimal solution
hand optimal
solution path nodes depths

pessimistically assuming nodes depth
potentially expanded addition paths optimal solutions
p
yields statement lemma note b bi b every potentially
expanded node v must depth g v f v
recall asymptotic notations f n g n means exist constants c c c g n
f n c g n sufficiently large n f n g n means exists constant c cg n f n
sufficiently large n



fithe time complexity approximate heuristics

upper bound natural search space model
actual time complexity depend course precise structure h
bound essentially tight rich family solution spaces consider sequence
search increasing difficulty expressed terms depth optimal solution
stochastic solution space model parameter p consider solution set
obtained independently placing node probability p
setting random variable written sp solutions distributed according sp
observe expected number solutions depth precisely pbd p bd
optimal solution lies depth constant probability reason focus specific
values pd bd consider solution set spd recall model
likely optimal solutions lie depth generally see
high probability optimal solutions particular subtree located near depth
respect root subtree make precise
lemma suppose solutions distributed according spk node v

td
btd pr h v eb
pt
proof tree subtree v n bi bt b nodes depths less
pr h v bd n

nbd bd n exp nbd
first inequality obtained applying bernoullis inequality last one implied
fact x ex x observing
bt

bt
bt
b

b completes proof
observe spd model conditioned likely event optimal solutions appear
depth expected number optimal solutions bd situation according
lemma expands b db vertices expectation
leading exponential term bound equal
max
minimal suggests best upper bound inferred
family bounds lemma poly b spd
discussing average case time complexity search record following chernoff bound used control tail bounds analysis later
lemma chernoff bound chernoff let z sum mutually independent indicator
random variables expected value e z


e
pr z


detailed proof found book motwani raghavan several cases
know exactly expected value variable wish apply
tail bound lemma compute sufficiently good upper bounds expected value
order p
apply chernoff
case actually require monotonicity argument
pbound
n
n


z
x

z

x

sums independent identically distributed
indicator random variables e xi e xi pr z pr z
argument applying lemma e obtain


fidinh dinh michel russell

corollary let z sum n indicator random variables e z n
pr z e e
adopting search space whose solutions distributed according spd ready
bound running time average guided approximate heuristic


theorem let sufficiently large probability least ed e search
tree approximate heuristic function expands b vertices
solutions distributed according random variable spd
proof let x random variable equal total number nodes expanded
approximate heuristic course exact value say e x depends h prove
upper bounds achieved high probability approximate h applying lemma
conclude

x b h r h r n
thus suffices control h r number n optimal solutions
utilize fact spd model optimal solutions unlikely located
far depth end let efar event h r set

later lemma immediately gives pr efar eb
observe conditioned efar h r n z z random
variable equal number solutions depth


b b
e z b b

applying chernoff bound corollary control z
h




pr z eb exp b e b
letting ethick event z b observe
h


pr ethick pr z eb e b
summarize neither efar ethick occurs
x b b
b
db
hence
h



pr x db pr efar ethick eb e b
infer bound stated theorem set b b b completing
proof
remark similar methods trade offs error probability resulting bound
number expanded nodes obtained


fithe time complexity approximate heuristics

lower bounds running time trees

establish upper bounds theorem tight within term
exponent begin recording following easy fact solution distances discrete
model
fact let h r nonnegative integer every solution node v
path h v
proof fix distance h r prove lemma induction depth solutions
lemma clearly holds optimal solutions consider solution may optimal
let v path node level far h v h v
must another solution subtree v closer v induction assumption
node v path h v node v must ancestor v since distance
v less distance v least completing
proof
proceed lower bound
theorem let sufficiently large solutions distributed according spd probability
least b exists approximate heuristic function
h number
vertices expanded search tree h least b
proof plan define pathological heuristic function forces expand many
nodes possible note heuristic function allowed overestimate h intuitively
wish construct heuristic function overestimates h nodes close solution
underestimates h nodes far solutions leading astray whenever possible recall
every vertex v likely solution lying depth subtree v thus use
quantity h v formalize intuitive notion node v close solution
quantity determined later heuristic function h formally defined follows

h v h v
h v
h v otherwise
observe chance node overestimated small since lemma
pr v overestimated pr h v b



node v note node v overestimated ancestor f
values monotonically increase along path root v
naturally wish ensure optimal solution close root let eclose
event h r lemma
pr eclose b
see conditioned event eclose means h r every
solution obscured overestimated node close solution concretely
issues integrality fact asserts every solution must node v
path root h v long h r
assume eclose whenever h v g v h r h v
thus f v since every solution obscured
overestimated node whose f value larger
min max value defined follows node v must expanded path v


fidinh dinh michel russell

contain overestimated node f v path v contain
overestimated node f v g v h v
f v h v g v
since therefore say node v required overestimated node path v
h v g v recap conditioned eclose set required nodes
subset set nodes expanded search defined heuristic function use
chernoff bound control size r denotes set non required nodes depth

let v node depth equation implies
pr overestimated node path v b
last inequality holds sufficiently large long poly hand






pr v r pr h v






exp b
lemma






exp b
set logb equation implies
logd


pr v r exp b e
case event h v never
given value

happens
set hence case pr v r e fir b applying
chernoff bound corollary yields


pr fir eb exp b

let ethin event fir b since b eb
pr ethin exp b
putting pieces together



pr expands less b nodes pr eclose ethin b eb


setting logb thus
h



pr expands less b nodes b
sufficiently large
contrast explore behavior adversarially selected solution set
achieves lower bound nearly tight comparison general upper bound
worst case running time obtained setting bound lemma


fithe time complexity approximate heuristics

theorem exists solution set whose optimal solutions lie depth
approximate heuristic function h tree h expands
least b nodes
proof consider solution set optimal solutions share ancestor u lying depth
furthermore contains every node depth descendant u
h r
define approximate heuristic h follows h u h u h v
h v v u heuristic every optimal solution hidden search
procedure ancestor u precisely since f u every
optimal solution descendant u
max
vpath

f v f u

thus min max value defined equation
let v node depth lie inside subtree u note
f values monotonically increase along path root r v implies node v must
expanded f v hand since every non descendant u depth
solution h v thus
f v
hence node v must expanded equivalent
follows number nodes expanded least


x




b

x

b b



according theorem set let arbitrarily small provided
obtain near accurate heuristic forces expand least many bd nodes
lower bound partially explains perform poorly even almost perfect
heuristic certain applications helmert roger adversarially chosen solution set
given proof theorem overwhelming number near optimal solutions indeed
n b b b


generalizations non uniform edge costs branching factors
section discuss generic upper bounds lemma generalized apply
natural search non uniform branching factors non uniform
edge costs section extended general graph search
consider general search tree without assumptions uniform branching factor
uniform edge costs argument given proof lemma derive assertion
heuristic approximate node cost c
potentially expanded lie optimal solution path
arbitrary nonnegative number c h r optimal solution cost
hence number nodes potentially expanded approximate heuristic
bounded


f c r c



fidinh dinh michel russell

f number nodes cost call free nodes r
number nodes cost range c lie optimal solution path
call restricted nodes
bound number free restricted nodes respectively assume branching
factors upper bounded edge costs lower bounded let b maximal branching
factor let minimal edge cost since node cost must lie
depth larger
f b
optimal solution path c nodes cost range
c thus
c
n
r

letting c applying bounds f r
bound obtain another upper bound number expanded nodes heuristic
approximate


b c



n c



equation generalized version bound lemma substituting
arrive following simpler upper bound number expanded nodes
b c





n c



bounding running time graphs
previous parts established bounds running time tree model
apply bounds graph model order first unroll
graph cover tree bound number solutions lifted cover tree
unrolling graphs trees
preceding generic upper bounds developed tree section discuss
natural extension general graph search principal connection obtained unrolling graph tree expands least many nodes original
graph including repetitions specifically given directed graph g starting node x g
define cover tree g whose nodes one one correspondence finite length paths
g x shall write path x x g node g root g
x parent node x x x g node x x x edge cost
two nodes x x x x x x g equals cost edge
x x g hence node p g cost value g p equal total edge
cost path p g node x x g designated solution whenever x
solution g
node g corresponds path ending node x g called copy x
observe solution g may lift multiple times solutions g node g may
multiple copies g figure illustrates example unrolling graph cover tree
example node solution graph first two copies cover tree correspond
paths starting node given graph
search graph g described h x heuristic
node x g x cost current path x x c x x denotes cost
edge x x g assume value h x depends x e h x depend
particular path x x unlike search tree node x open closed


fithe time complexity approximate heuristics







































figure unrolling graph cover tree
keeps track current path p x x pointers
current f value x equal g p h x current path cheapest path x x
passes nodes expanded
search graph pearl p
initialize open x g x
repeat open empty
remove open place closed node x function f g h
minimum
b x solution exit success return x
c otherwise expand x generating successors successor x x
x open closed estimate h x calculate f x g x h x
g x g x c x x put x open pointer back x
ii x open closed compare g x g x c x x g x c x x
g x direct pointer x back x reopen x closed
exit failure
consider search cover tree g graph g heuristic function h
node p g set heuristic value h p equal h x p copy node
x g e p path g x x observe cover tree g graph g share
threshold defined equation hence whenever node x g expanded
current path p must g p h x implies p potentially expanded
search cover tree g shows following fact
fact number node expansions g number nodes potentially
expanded g heuristic
node expansion mean execution expand step e step c note
general node g expanded many times along different paths
remark running time cover tree used upper bound running time
iterative deepening ida graph recall running time ida dominated
last iteration hand last iteration ida g merely depth first search


fidinh dinh michel russell

cover tree g cost threshold hence number expansions last
iteration ida number nodes potentially expanded cover
tree
upper bound time complexity ida graph suffices unroll graph
cover tree apply upper bounds number nodes potentially expanded
cover tree particular bound equation applied directly search
g
note bounds applied directly determining exactly
solutions g lift solutions cover tree depends delicate structural properties g
specifically depends growth number distinct paths x solution
function length paths particular order obtain general
complexity model must invoke measure connectedness graph g
bound complexity terms spectral properties g choose
offers single parameter notion connectedness second eigenvalue
analytically tractable actually analyzed bounded many graphs
interest including families cayley graphs combinatorial graphs methods
conductance
upper bound via graph spectra
shall consider undirected graph g n vertices search space let x starting
node let set solutions g simplicity assume g b regular b n
edge costs uniformly equal one cover tree g b ary uniform edge cost
assume additionally treated constant n
fact lemma number node expansions g approximate heuristic b dn optimal solution cost
equals optimal solution depth g n number optimal solutions g
goal upper bound n cover tree g terms spectral properties g
introduce principal definitions spectral graph theory primarily set
notation complete treatment spectral graph theory found work chung

graph spectra graph g let adjacency matrix g x x adjacent
otherwise real symmetric matrix thus real eigenvalues
b b
b n b spectral theorem horn johnson let
b
denote normalized adjacency matrix g eigenvalues n
referred spectrum g b eigenvalues along
associated eigenvectors determine many combinatorial aspects graph g applications
def
graph eigenvalues however critical value g max n invoked
moreover real parameter interest gap b largest eigenvalue
normalized adjacency matrix intuitively measures connectedness g
sparsely connected graphs n cycle example n hypercube
n n vertices log n similar bounds known many
families cayley graphs random graphs even constant degree b achieve
high probability fact recent friedman strengthens
theorem friedman fix real c integer b probability
n

gn b b c
one produce analogous cover tree directed case spectral machinery apply next
section somewhat complicated presence directed edges see work chung horn
johnson perron frobenius theorem details



fithe time complexity approximate heuristics

gn b random b regular graph n vertices
remark non bipartite connected graph diameter
b dn stronger conditions graph vertex transitive say
pair v v vertices g automorphism g sending v v one
b babai vertex transitivity strong condition satisfied
many natural algebraic search e g puzzle search spaces rubiks cube
principal spectral tool apply section described lemma begin
notation
notations function g viewed column vector indexed vertices g
vice versa vertex x g let x denote function g value x
everypvertex x real valued functions g define
pinner product
h xg x x shall use k k denote l norm e kk h
function g
b symmetric real spectral theorem horn johnson
recall since
exist associated eigenfunctions n form orthonormal basis space real valued
b particular
functions g eigenfunction associated eigenvalue
b

pn ai ki k hi j j basis write
h real valued function g
lemma let g undirected b regular graph n vertices g b
probability distributions p q vertices g integers

fid


e


b p
bt q kpk kqk


nfi
n
pn

pn
ai q j bj j ai hp bj hq j

n
n
n
n

e
x
x
x
x




b p
bq

ai bi
ai bj si tj hi j
bj j j

ai


proof write p





j

j



cauchy schwartz inequality
n
x

v

n
u n
x
u x



ai bi
bi kpk kqk
ai






n

without loss generality assume x
vertices x g since p probability
distribution
x

x
p x
hp
p x x
n
n
xg

similarly b


n

thus b

xg


n


n

fid

e fifi fix




b p
bt q



b






nfi




n
x

ai bi

max






kpk kqk
completing proof lemma



n




fidinh dinh michel russell

lemma hand establish following bound number paths prescribed
length connecting pair vertices apply control number optimal solutions
cover tree g let p u v denote number paths g length u v
lemma let g undirected b regular graph n vertices g vertices
u v g






fip u v b

nfi
n
proof since p u v number length paths u v p u v b p v
p v probability natural random walk g length
starting
u ends

e



p u v





b
b
v u applying lemma
v since p u p v v p

b

yields






e fifi
p u v
fifi fifid

b

k v k k u k







v
u
b
nfi
nfi
n
n
b multiplying sides last inequality b completes proof lemma
major consequence lemma application following bound number
optimal solutions g
theorem let g undirected b regular graph n vertices g sufficiently
large n number optimal solutions g


b
n

n
depth optimal solutions g set solution nodes g
proof solution number copies level g equals p x
less b n lemma hence number solutions level g


x
b
p x


n
ss

summing sides ranging





x x
x
x

n
p x
b

n
ss





n sufficiently large thus



n
b

n

note b
n logb n mentioned earlier theorem b regular
graphs b b assuming g spectral property logb n
theorem gives


n b
cases number node expansions g approximate heuristic
b implies effective branching factor roughly bounded
b b


fithe time complexity approximate heuristics

experimental
discussed introduction bounds established thus far guarantee e number
nodes expanded accurate heuristic satisfies
e bd dn cbd
assumption n bd b branching factor optimal
solution depth c constant suggests hypothesis hard combinatorial
suitably sparse near optimal solutions
log e log b



constant determined search space heuristic independent
particular suggests linear dependence log e experimentally investigated
hypothesized relationship family involving knapsack partial
latin square far aware first experimental specifically
investigating dependence
remark order experimental framework really cast light bounds
presented one must able furnish heuristic known approximation guarantees
search knapsack
begin describing family experimental search coupled approximate
heuristics solving knapsack extremely well studied
wide variety fields including finance operations cryptography kellerer pferschy
pisinger knapsack np hard karp efficient
solve exactly unless np p despite admits fptas vazirani p
return approximation optimal solution time polynomial
input size use fptas construct approximate admissible heuristics
search yields exact knapsack may expand far fewer nodes
straightforward exhaustive search indeed resulting general efficient
exhaustive search
search model knapsack
consider knapsack instance given n items let n n item n
weight wi profit pi knapsack capacity c task set items
maximal total profit total weight c knapsack instance
denoted tuple h n p w ci knapsack instance restricted subset x n denoted
hx p w ci subset x n let w x p
p x denote p
total weight
total profit respectively items x e w x ix wi p x ix pi
search space represent knapsack instance h n p w ci search space follows
state node search space nonempty subset x n move edge one state
x another state taken removing item x cost move profit
removed item state x n designated solution w x c initial state
set n see figure example search space n
search space irregular directed graph whose degrees span wide range
n moreover two states x x x x n x x paths
search graph x x moreover every path x x cost equal
p x p x feature search graph makes behave spanning subtree
graph state search graph reopened hence state x n cost


fidinh dinh michel russell































figure search space knapsack instance given set items solution
states edge costs indicated figure
path starting state x
g x p n x p n p x
cheapest cost reach solution state x n
h x p x opt x
opt x total profit optimal solution knapsack instance hx p w ci e
opt x max p x x x w x c
def

observe solution state x n search space h n p w ci optimal
g x minimal equivalently p x maximal means x optimal solution
knapsack instance h n p w ci
heuristic construction fix constant order prove linear dependence
log e wish efficient accurate heuristic h aforementioned knapsack
search space h n p w ci moreover order guarantee solution returned
search optimal insist h admissible h must satisfy
h x h x h x x n
main ingredient constructing heuristic fptas described book vazirani
p fptas denoted returns solution total
profit
least opt x knapsack instance hx p w ci runs time x
nonempty subset x n let x denote total profit solution
returned error parameter knapsack instance hx p w ci

opt x x opt x
implies
p x

x
h x p x x




x
thus may work heuristic h x p x
guarantees admissibility
however definition h guarantee approximation h definition
condition h x h x equivalent

h x p x


x





fithe time complexity approximate heuristics

hold since h x p x x condition satisfied
p x x p x

x





x
equation holds otherwise define
hence define h x p x
h x differently still ensuring approximate admissible note x
solution least one item x must removed order reach solution contained x thus
h x p x opt x smallest profit items gives another option
define h x guarantee admissibility summary define heuristic function
h follows non solution state x

x
holds
p x
def

h x

otherwise

determined later h approximate x solution simply set
h x h x case h admissible regardless
make sure h approximate remains consider case hold
x
e p x
p x x non solution state x case
p x x



x
p n





last inequality due assumption x solution want choose



p n



combining imply h x h x therefore
choose

p n


since running time
compute

x


x

running time compute h x



x p n polynomial n profits bounded
range poly n search heuristic h given knapsack space
h n p w ci described
experiments
order avoid easy instances focus two families knapsack instances identified studied
pisinger difficult existing exact including dynamic programming
branch bound
strongly correlated item n choose weight wi random integer
range r set profit pi wi r correlation weights profits
reflects real life situation profit item proportional weight plus
fixed charge
subset sum item n choose weight wi random integer range r
set profit pi wi knapsack instances type instances subset sum

tests
p set data range parameter r choose knapsack capacity
c n wi random integer range
pisinger fixed integer average runtime tests
corresponding values reported



fidinh dinh michel russell

search knapsack
input hn p w c n number items pi wi profit weight item
n c capacity knapsack error parameter heuristic
oracle fptas knapsack
p
p described vazirani
p
notation subset x n items let p x ix pi w x ix wi
output subset x n items w x c p x maximal
put start node n open let min pi set

p n
repeat open empty
remove open place closed node x g x h x minimum
b w x c exit success return x optimal solution
c otherwise expand x item x let x x
x open closed set g x g x p p n p x
compute heuristic h x follows
x solution set h x
b otherwise run knapsack input hx p w ci error parameter let x denote total profit solution returned
set







p x x
p x x


p x x
h x

otherwise
put x open pointer back x
ii otherwise x open closed g x calculated g x p
g x direct pointer x back x reopen x closed
remark since paths starting node x cost
condition g x p g x never holds fact step discarded
exit failure



fithe time complexity approximate heuristics

generating knapsack instance h n p w ci type described run series
search given heuristic h values well breath first search
bfs solve knapsack instance search finishes values e reported
e number nodes states expanded search depth optimal
solution found search knapsack search space k equals number items removed
original set n obtain optimal solution found search overall runtime
search including time computing heuristic reported addition report
optimal value h n minimal edge cost e minimal profit search space
knapsack instance tested
specify appropriate size n knapsack instance type ran exploratory experiments identified largest possible value n search instances would finish
within hours chose values n n strongly correlated type
n subset sum type final experiments observing optimal solution
depths resulted knapsack instances sizes fairly small ranging
selected sample points high interval distance two consecutive
points large enough sensitiveness e seen particular selected eight
sample points distance
two consecutive points final experiments generated knapsack instances type
selected parameters n
experimental final experiments shown tables
rows corresponding breath first search indicated bfs column
data expected search outperforms breath first search terms
number nodes expanded naturally smaller fewer nodes expands
effective branching factor decrease decreases long optimal
solutions given search space located depth recall expands e
nodes finds solution depth effective branching factor branching factor
uniform tree depth e nodes russell norvig p e number b satisfying
e b b b clearly b e b e b shall
focus solely values b simply use e proxy effective branching factor content
differs actually quantity factor course b grows
error decays even effective branching factors calculated e search
breath first search knapsack instances type strongly correlated shown tables
note knapsack instances subset sum type one cannot directly compare
effective branching factors optimal solutions found different search instances appear
different depths
primary goal experiments investigate proposed linear dependence
case non uniform branching factors non uniform edge costs may express
log e log bbfs



average optimal solution depth bbfs effective branching factor breath first
search constant depending examine extend data supports
hypothesis calculate least squares linear fit linear fit short log e
knapsack instance varying least squares linear regression model measure
coefficient determination r experiments knapsack instances type
strongly correlated knapsack instances type subset sum r value least
instances variation log e depends linearly remarkable fit
see figure detailed histograms r values knapsack instances median r
knapsack instances type strongly correlated type subset
sum graphs log e linear fit knapsack instances median r among
type shown figures note even number instances


fidinh dinh michel russell

type single instance median value instances shown graphs
actually r value median
knapsack instance type strongly correlated median r
instance
linear fit
bfs

log e













heuristic error



figure graph log e least squares linear fit knapsack instance type strongly
correlated median r see data table

knapsack instance type subset sum median r


instance
linear fit
bfs

log e













heuristic error



figure graph log e least squares linear fit knapsack instance type subset
sum median r see data table

remark course may instances poorly fit prediction linear dependence
instance strongly correlated type whose r value though instances


fithe time complexity approximate heuristics

rarely experiments instance search heuristic function h
may explore even fewer nodes search h small
phenomenon explained degree control accuracy heuristic
function h particular guarantee h admissible approximate
reality may provide approximation better nodes opened note h
proportional hence h may occasionally accurate h
small resulting fewer nodes expanded

frequency

histograms r values knapsack instance families
strongly correlated
subset sum











































r value bin limits
figure histograms r values knapsack instances
analyze deeply data fit model equation calculate slope
least squares linear fit log e knapsack instance type strongly correlated note
instance every search optimal solution depth denoted thus
data given figure one instance worst r value
slope linear fit log e fairly close log bbfs slope hypothesized
line given equation specifically knapsack instance type strongly correlated
except instance
log bbfs log bbfs

search partial latin square completion
experimental discussed knapsack support hypothesis linear
scaling cf equation however several structural features search space
heuristic unknown example cannot rule possibility approximation
asked produce approximation fact produce significantly
better approximation likewise explicit control number near optimal solutions
order explore hypothesis detail experimentally analytically investigate
search space partial latin square completion provide precise analytic
control heuristic error well number optimal solutions n
partial latin square completion pls
latin square order n n n table row column permutation
set n n cells n n table filled values n


fidinh dinh michel russell

knapsack instance type strongly correlated
instance





















optimal
solution
depth





















effective branching
factor breath first
search bbfs





















slope

linear fit

log bbfs

coefficient
determination r
































































figure slopes least squares linear fits log e varying knapsack instances
type strongly correlated details least squares linear fits given tables
r values knapsack instances included figure
way value appears twice single row column table called partial latin
square completion partial latin square l latin square obtained filling
empty cells l see figure example note every partial latin square
completion since determining whether partial latin square completion
np complete colbourn search version denoted pls e given partial latin square
l completion l one exists np hard













































figure partial latin square right unique completion left
pls known partial quasi group completion used recent
past source benchmarks evaluation search techniques constraint satisfaction
boolean satisfiability gomes shmoys indeed partially filled latin squares carry
embedded structures trademark real life applications scheduling time tabling
furthermore hard instances partially filled latin square trigger heavy tail behaviors
backtrack search common place real life applications require randomization restarting gomes selman kautz additionally pls exhibits
strong phase transition phenomena satisfiable unsatisfiable boundary
cells filled exploited produce hard instances remark underlying


fithe time complexity approximate heuristics

structure latin squares found real word applications including scheduling timetabling tay error correcting code design psychological experiments design wavelength
routing fiber optics networks laywine mullen kumar russell sundaram
search model pls
fix partial latin square l order n c completions divide cells n n table
two types black cells filled l white cells
left blank l let k number white cells white cells indexed k
fixed order e g left right top bottom table task search
completion l hard instances obtained white cells uniformly distributed within
every row every column density black cells n k n tap
phase transition insure number completions c c exactly
experiments
structure search space place white cells virtual circle
white cells index mod k adjacent move along circle step
forward white cell index cell index mod k backward
white cell index cell index mod k may set content current cell
formally define search graph denoted gl pls instance given l follows
state node gl pair p p k indicates index current
white cell k n function representing current assignment
values white cells adopt convention j means white cell index j
filled directed link edge state p state q search
graph gl q p mod k q j j j q words
link state p state q represents step consisting moving white
cell index p white cell index q setting value q white cell index q
figure illustrates links one state another gl cost every link gl unit
obviously search graph regular degree n
starting state j j goal state solution form
p assignment corresponding completion l p k
solution cover tree gl path search graph gl starting state
goal state length optimal solution equal k number
optimal solutions cover tree gl large
lemma let l n n partial latin square k white cells let assignment
corresponding completion l k number paths
length k gl

starting state goal state form k
nt

proof represent path gl length k starting state pair hp v
p k length path circle white cells starting white cell index
v v vk sequence values n vi value assigned white cell
visited ith step path p consider pair hp v represents path gl ending
goal state since j j every white cell must visited non zero step
p let sj last step white cell index j visited must
vsj j j k given path p nt ways assigning values
white cells order eventually obtain assignment thus number k length
paths gl starting state goal state equal pt nt pt set
k length paths circle white cells start white cell index visit every
white cell
remains upper bound pt consider path p pt strategy bound number
backward forward steps p k least k white cells visited exactly


fidinh dinh michel russell



k



k
















k



k









v
h



































k
k






p




p







p

v





h

v


















p

v



p










figure links connecting states pls search graph label h vi resp h vi
links means moving forward resp backward setting value v n next white cell

p let w index white cell visited exactly p let step
white cell w visited
assume step forward step e white cell visited step w mod k
let w farthest white cell w backward direction visited step
precisely w w mod k maximal number k white
cell w mod k visited step let wj w j mod k j k note
w w set white cells visited first steps w w w deleting
steps among first steps p obtain path w w w w w
forward direction white cells w wk must visited step step
forward direction white cell w visited forward
step thus deleting steps p obtain path visiting white cells w w wk
forward direction let sk steps p deleted wj visited
step sj p sk k steps sk forward steps
step forward backward moreover number backward steps number
forward steps sj sj must equal j k let number
deleted steps sk exactly backward steps
sk shows
backward steps

p note k
paths pt exactly j backward steps path p
j
backward steps thus sj sj j k every
step sk backward paths pt corresponding
choice
similarly step backward step forwardsteps p
paths pt exactly forward steps k
paths pt
j


fithe time complexity approximate heuristics

exactly j forward steps hence

pt



x
k
j

last inequality holds since coefficient

j






k



k
j



increases j increases j k

upper bound lemma achieved fact four ways visit
every white cell k steps starting white cell taking k forward steps k backward
steps one backward step followed k forward steps one forward steps followed k
backward steps number optimal solutions cover tree gl equal c since
c completions initial partial latin square
theorem let l n n partial latin square k white cells c completions
number nodes expanded search gl accurate heuristic
b
b


n k ck
n

k

k

ck bkc bkc

k bkc
bkc



n

bkc

k

proof lemma number nodes expanded search gl accurate heuristic
upper bounded n k kn n number optimal solutions cover tree
gl need bound n
k n equals number optimal solutions implies upper bound
n k ck number expanded nodes
general case let bkc since k k lemma




x
k

nt




x


x
k


c
n c
tn





k

c n c
n


n c



second inequality holds k
k
last inequality obtained


p
p


applying fact tn n nt n integers n
proved easily induction hence number nodes expanded




k
n k ck
n


corollary suppose number nodes expanded search gl
accurate heuristic


k
k
k nk

proof theorem need upper bound binomial coefficient k
large k

bkc since k large bound binomial coefficient stirlings


fidinh dinh michel russell



n
formula asserts n n ne precisely write n n
n


k
k


k
p
k
k k
k
e




k
k ke k e

k k k
k




k
k k
k


n n
e

n n

stirlings formula term k k since
k
k
k




bkc
k



k term k k k remaining term
k k

k k


k


k

k

k



k


x

since k function g x k x monotonically increases x hence



k
k


k



k
theorem number nodes expanded


k k
b n k k
n



k


k
k
k
n



follows corollary effective branching factor accurate

heuristic gl asymptotically n significantly smaller

brute force branching factor n since n converge
experiments
given search model pls described provide experimental
search pls instances determined large partial latin square
single completion pls instance experiments run search different
heuristics form h given values emphasize dominance property admissible heuristics number nodes expanded admissible
accurate heuristic strictly larger h less equal
heuristic h words heuristic h worse admissible accurate
heuristics
build oracle heuristic h search graph gl use information
completion partial latin square l compute h consider partial latin square
l k white cells arbitrary state p gl compute optimal


fithe time complexity approximate heuristics

cost h p reach goal state gl state p let x set white cells
disagrees completion l h p equal length shortest
paths cycle starting p visiting every point x case
x p easy handle shall assume x p particular
suppose x p p p pj j th point x p visited
moving forward clockwise p see figure two types paths cycle
starting p visiting every point x p type includes visit p type
ii includes visiting p let length shortest paths type type ii
respectively

min
p x

h p
min p x
need compute computing straightforward realized
moving forward p p moving backward p p
min p p p p
def

z z mod k integer z compute consider two options j option
moving forward p pj moving backward pj pj option b moving
backward p pj moving forward pj pj thus


min min pj p p pj pj pj
j

moving forward
p

p

p

p

pm

p

pm
pj

pj

figure layout points x
describe experiments detail generate six partial latin squares orders
following way initially generate several partial latin squares obtained
near phase transition white cells uniformly distributed within every row column
instance generated complete latin square suitably chosen random subsets
cells cleared candidate partial latin square solved exhaustive backtracking
search method completions subset candidates exactly one completion
retained experiments partial latin square l chosen value record
total number e nodes expanded search graph gl h heuristic
knapsack experiments effective branching factor calculated e k
since optimal solution depth gl equals number white cells l first purpose
compare effective branching factors obtained experiments upper bound obtained


fidinh dinh michel russell

theoretical analysis recall theorem e b case
b


n k k
n

k

k

k bkc bkc

k bkc
bkc



n

bkc

k

k

therefore calculate theoretical upper bound b
effective branching factor e k
k
deeper comparison calculate multiplicative gap b e k theoretical
bound actual values empirical given tables multiplicative
gaps close small k large notice given k upper bounds
b almost value bkc multiplicative
gaps sometimes increase decrease however multiplicative gaps decrease
bkc decreases fixed k upper bounds cases k much tighter
others k cases k compute number
optimal solutions exactly observe fixed multiplicative gaps decrease k
increases finally experiments dramatic gap effective branching factors
corresponding brute force branching factor equals n fact instance
k
effective branching factor e k theoretical upper bound b
approaches

experiments knapsack data partial latin square
support linear dependance log e particular one partial latin square
instances r larger worst one r value equal median r
value partial latin square instances graph instance median
r shown figure
partial latin square instance median r
instance
linear fit



log e












heuristic error






figure graph log e least squares least squares linear fit linear fit
partial latin square instance median r see data table
investigate slope least squares linear fit log e approximates slope
log b hypothesized linear dependence equation recall case
branching factor b n optimal solution depth k figure shows every
pls instance experiment slope least squares linear fit log e approximates


fithe time complexity approximate heuristics

k log n factor e k log n words experimental
pls indicate following relationship
log e k log n

equivalently e n k

thus empirically effective branching factor search heuristic h given
pls search space approximates n dominance property admissible heuristics
empirical upper bound effective branching factor admissible
accurate search space
instance

n

k






















slope linear
fit line







k log n







figure slopes least squares linear fits log e partial latin square instances

reduction depth vs branching factor comparison previous
work
section compare obtained korf et al korf reid korf
et al mentioned introduction concluded effect heuristic function
reduce effective depth search rather effective branching factor considering
striking qualitative difference findings seems interesting discuss
conclusions apply accurate heuristics
study b ary tree search model permit multiple solutions however
analysis depends critically following equilibrium assumption
equilibrium assumption number nodes depth heuristic value exceeding
bi p p probability h v v chosen uniformly random among
nodes given depth limit large depth
remark equilibrium assumption strong structural requirement holds
expectation rich class symmetric search spaces specific state transitive
search space rubiks cube quantity bi p precisely expected number vertices
depth h v goal state initial state chosen uniformly random korf
et al observe equilibrium assumption one directly control number
expanded
p nodes total weight quantity denote e indeed case
e bi p hand consider ratio
p
p

bi p
e
b p
p
b pi
b



p
e
b p
b
conclude e bd e thus effective branching factor
q
p

bd e b e
say search space state transitive structure search graph independent starting
node note cayley graph property natural search spaces formed algebraic
rubiks cube puzzle right choice generators property



fidinh dinh michel russell

optimal solution lies depth
difficulty even presence mildly accurate heuristic satisfying example
h v h v small constant
actual values quantities satisfy
e e e
even root tree h root observe

e
p

argument actually effective branching factor bdd e b b
yielding reduction branching factor indeed applying technique infer estimates
complexity even assuming equilibrium
p assumption appears require control
threshold quantity quantities
b p become non negligible course
equilibrium assumption may well apply heuristics weaker example nonuniform
accuracy
one perspective issue obtained considering case search b regular
non bipartite connected graph g v e observing selection node uniformly
random nodes given depth limit large depth case equivalent
selection random node graph consider mildly accurate heuristic h
say h v h v small constant bi p bi prv dist v v
chosen uniformly random graph set solution nodes dist v denotes
length shortest path v node
b
v dist v

pr dist v
v
v
v



b regular graph expect relation equation hold past threshold
value logb v

acknowledgments
wish thank anonymous reviewers constructive comments author hang dinh
supported iu south bend faculty grant author laurent michel supported
nsf grant author alexander russell supported nsf grant




fithe time complexity approximate heuristics

appendix tables experimental


n

heuristic
error





















bfs

total
node
expansions
e






























bfs















optimal
solution
depth

search
time
seconds













































































bfs

















































bfs









































bfs































bfs





















bfs

h n

effective
branching


factor
e










log e

linear
fit
log e









































































































































































































































































































































r















table knapsack instances type strongly correlated



fidinh dinh michel russell



n

heuristic
error





















bfs

total
node
expansions
e






























bfs















optimal
solution
depth

search
time
seconds













































































bfs

















































bfs









































bfs































bfs





















bfs

h n

effective
branching


factor
e










log e

linear
fit
log e









































































































































































































































































































































r















table knapsack instances type strongly correlated



fithe time complexity approximate heuristics



n

heuristic
error





















bfs

total
node
expansions
e






























bfs















optimal
solution
depth

search
time
seconds













































































bfs

















































bfs









































bfs































bfs











h n

effective
branching


factor
e










log e

linear
fit
log e



























































































































































































































































r













table knapsack instances type strongly correlated



fidinh dinh michel russell

linear fit
log e











n

total
node
expansions e










optimal
soln depth










search time
seconds










log e











heuristic
error








bfs

h n










































bfs















































































bfs















































































bfs















































































bfs















































































bfs















































































bfs



























































r















table knapsack instances type subset sum



fithe time complexity approximate heuristics

linear fit
log e











n

total
node
expansions e










optimal
soln depth










search time
seconds










log e











heuristic
error








bfs

h n










































bfs















































































bfs















































































bfs















































































bfs















































































bfs















































































bfs



























































r















table knapsack instances type subset sum



fidinh dinh michel russell

linear fit
log e











n

total
node
expansions e










optimal
soln depth










search time
seconds










log e











heuristic
error








bfs

h n










































bfs















































































bfs















































































bfs















































































bfs















































































bfs



























































r













table knapsack instances type subset sum



fithe time complexity approximate heuristics

effective
branching
factor
e k









































upper
bound
b k

b k










































total
node
expansions
e









































































































































e
e
e
e































































n

k

heuristic
error



















































































































































log e

linear
fit
log e






















































































































































































































e k

r





table partial latin square instances



fidinh dinh michel russell

effective
branching
factor
e k





















upper
bound
b k

b k






















total
node
expansions
e



















e






























































e

























































































n

k

heuristic
error

































































log e

linear
fit
log e


















































































































































































































e k

r









table partial latin square instances



fithe time complexity approximate heuristics

references
aaronson lower bounds local search quantum arguments proceedings
th annual acm symposium theory computing stoc acm press
babai l local expansion vertex transitive graphs random generation finite groups
proceedings rd annual acm symposium symposium theory computing
pp
chernoff h measure asymptotic efficiency tests hypothesis sum
observations annals mathematical statistics
chung f diameter laplacian eigenvalues directed graphs electronic journal
combinatorics
chung f r k spectral graph theory american mathematical society
colbourn c j complexity completing partial latin squares discrete applied
mathematics
davis h bramanti gregor wang j advantages depth breadth
components heuristic search ras z saitta l eds proceedings third
international symposium methodologies intelligent systems pp north holland
amsterdam elsevier
dechter r pearl j generalized best first search strategies optimality j
acm
demaine e playing games algorithmic combinatorial game theory
proc th symp math found comp sci lect notes comp sci pp
springer verlag
dinh h russell su value good advice complexity
accurate heuristics proceedings twenty second conference artificial intelligence
aaai pp
edelkamp prediction regular search tree growth spectral analysis proceedings
joint german austrian conference ai advances artificial intelligence ki
pp london uk uk springer verlag
felner korf r e hanan additive pattern database heuristics journal
artificial intelligence
friedman j proof alons second eigenvalue conjecture stoc proceedings
thirty fifth annual acm symposium theory computing pp york ny
usa acm
gaschnig j perfomance measurement analysis certain search ph
thesis carnegie mellon university pittsburgh pa
gomes c shmoys completing quasigroups latin squares structured graph
coloring johnson mehrotra trick eds proceedings
computational symposium graph coloring generalizations pp ithaca
york usa
gomes c p selman b kautz h boosting combinatorial search randomization aaai iaai proceedings fifteenth national tenth conference artificial intelligence innovative applications artificial intelligence pp menlo park
ca usa american association artificial intelligence
hart p nilson n raphael b formal basis heuristic determination minimum
cost paths ieee transactions systems science cybernetics scc


fidinh dinh michel russell

helmert roger g good almost perfect proceedings aaai
hochbaum approximation np hard brooks cole
horn r johnson c matrix analysis cambridge university press cambridge uk
huyn n dechter r pearl j probabilistic analysis complexity artificial
intelligence
ibarra h kim c e fast approximation knapsack sum
subset journal acm
karp r reducibility among combinatorial miller r e thatcher
j w eds complexity computer computations p york plenum
kellerer h pferschy u pisinger knapsack springer
korf r depth first iterative deepening optimal admissible tree search artificial
intelligence
korf r reid complexity analysis admissible heuristic search proceedings
national conference artificial intelligence aaai pp
korf r reid edelkamp time complexity iterative deepening artificial
intelligence
korf r e recent progress design analysis admissible heuristic functions
aaai iaai pp sara proceedings th international
symposium abstraction reformulation approximation
kumar r russell sundaram r approximating latin square extensions cocoon proceedings second annual international conference computing
combinatorics pp london uk springer verlag
laywine c mullen g discrete mathematics latin squares interscience series
discrete mathematics optimization wiley
lenstra k lenstra h w lovasz l factoring polynomials rational coefficients
tech rep universiteit amsterdam
motwani r raghavan p randomized cambridge university press
parberry real time n puzzle inf process lett
pearl j heuristics intelligent search strategies computer solving addisonwesley
pisinger hard knapsack computers operations

pohl practical theoretical considerations heuristic search elcock
w michie eds machine intelligence vol pp ellis horwood chichester
ratner warmuth n puzzle related relocation journal
symbolic computation
russell norvig p artificial intelligence modern prentice hall
jersey
sen k bagchi zhang w average case analysis best first search two
representative directed acyclic graphs artif intell
tay generalized latin squares graphs combinatorics

vazirani v approximation springer verlag


fithe time complexity approximate heuristics

vazirani v primal dual schema approximation theoretical aspects
computer science advanced lectures pp springer verlag york
zahavi u felner schaeffer j sturtevant n inconsistent heuristics proceedings
aaai pp
zhang z sturtevant n r holte r schaeffer j felner search inconsistent
heuristics proceedings st international jont conference artifical intelligence
ijcai pp san francisco ca usa morgan kaufmann publishers inc




