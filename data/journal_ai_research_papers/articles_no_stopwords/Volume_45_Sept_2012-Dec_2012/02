journal artificial intelligence

submitted published

approximative inference method solving
satisfiability
hanne vlaeminck
joost vennekens
marc denecker
maurice bruynooghe

hanne vlaeminck cs kuleuven
joost vennekens cs kuleuven
marc denecker cs kuleuven
maurice bruynooghe cs kuleuven

department computer science
celestijnenlaan
heverlee belgium

abstract
considers fragment second order logic many interesting conformant naturally expressed finite domain satisfiability logic satisfiability computationally hard p

many often solved approximately develop general
approximative method e sound incomplete method solving satisfiability
use syntactic representation constraint propagation method firstorder logic transform satisfiability id satisfiability
second order logic extended inductive definitions finite domain satisfiability latter language np handled several existing
solvers inductive definitions powerful knowledge representation tool motivates us approximate id order first
perform propagation inductive definitions next use approximate
id satisfiability provides general theoretical framework
number approximative methods literature moreover
use framework solving practical useful conformant
effective way

introduction
finite model generation logical paradigm solving constraint successful
instance field sat efficient solvers low level cnf language developed instances expressive languages answer set programming
asp baral model expansion mx extensions first order logic asp
e g finite herbrand answer set program computed baral model
expansion mx mitchell ternovska generalizes herbrand model generation
aims computing one theory expand finite interpretation
possibly empty subset symbols mx first order logic mx fo formally
equivalent finite domain satisfiability checking existential second order
logic sat known fagins celebrated theorem capture np fagin
np exactly precise sense equivalent
satisfiability hence mx fo range solvers exists
specifically search witness
c

ai access foundation rights reserved

fivlaeminck vennekens denecker bruynooghe

finite model generation e g overview state art asp mx fo solvers
fo refers family extensions fo found reports
asp competition e g denecker vennekens bond gebser truszczynski
example bounded modeled finite model generation
deliberately kept simple serve running example
glass may clean cleaned action wiping
represent dynamic domain following fo theory tact
clean clean w ipe
clean initiallyclean




bounded considering turn dirty glass clean
one n steps n n given constant indeed formulated
model expansion model satisfies tact initiallyclean false
clean n true formulate equivalently finite domain
satisfiability namely satisfiability range n time
points following formula
w ipe clean initiallyclean act initiallyclean clean n



act denote conjunction sentences tact n formula
indeed satisfiable suitable interpretation constants n binary function
moreover witness w satisfiability provides plan instance wiping
time point job verified witness w w ipew
cleanw n
large number search indeed seen finite model generation
number higher complexity np
consequently cannot formulated mx fo indeed
interested np next level p polynomial hierarchy perhaps
prototypical finite domain satisfiability satisfaction finite
interpretations p every sentence p hard sentences
immerman interesting p conformant
discuss detail section already introduce next example
example extending example suppose know whether object
initially clean dirty still want plan guaranteed make clean matter
initial situation longer standard called
conformant formulate following satisfiability

w ipe initiallyclean clean act clean n

words need assignment action w ipe goal clean n satisfied
every initial situation initiallyclean fluent clean satisfy action theory
solving would require us make choice existentially quantified predicates check implication satisfied every interpretation


fian approximative inference method

universally quantified predicates done principle practice
often expensive explore alternative propagation
method first order logic developed wittocx denecker bruynooghe
method computes polynomial time given theory partial interpretation
approximation certainly true true expand
certainly false false interesting property
propagation method syntactically represented monotone inductive
definition denecker ternovska defines approximative way underestimates predicates complements monotone inductive
definition essentially set propagation rules similar definite logic program
interpreted least fixpoint immediate consequence operator
given theory obtain approximating definition linear transformation
original fo formula
returning example need interpretation action predicates every interpretation predicates implication act
clean n satisfied e without knowing anything predicates already certain implication satisfied basic idea behind
method approximate form p q approximate definition wittocx et al check whether interpretation existentially
quantified predicates p property making true regardless predicates q
essentially reduces id id
refer extended inductive definitions
section extend method id argued denecker
ternovska inductive definitions useful tool knowledge representation
example many dynamic domains formulated naturally modular way
inductive definitions quite tedious fo already mentioned conformant typical satisfiability typically conformant
require modeling dynamic domain come back
syntax semantics inductive definitions next section dynamic domain
example alternative action theory tact formulated following
inductive definition act


clean clean

clean w ipe



clean
initiallyclean
conformant formulated alternatively satisfiability formula w ipe initiallyclean clean act clean n however
longer satisfiability id satisfiability
motivates us see extend approximation method id
satisfiability purpose first symbolically represent propagation inductive definitions next use together
representation propagation fo approximate finite domain id satisfiability

approximation method number benefits first general method
applied automatically approximately solve second


fivlaeminck vennekens denecker bruynooghe

required computation carried shelf mx fo id solver allowing
method benefit effortlessly improvements solver technology
idp system marien wittocx denecker finally section
method elegantly generalizes number approximate reasoning methods
literature e g baral gelfond kosheleva son tu gelfond morales
denecker cortes calabuig bruynooghe arieli doherty magnusson szalas
son et al
parts work already presented jelia conference vlaeminck wittocx vennekens denecker bruynooghe

preliminaries
assume familiarity classical first order logic fo second order logic
section introduce notations conventions used throughout
first order logic
vocabulary finite set predicate symbols p function symbols f
associated arity constants function symbols arity often denote symbol
arity n n interpretation consists domain assignment
relation p dn predicate symbol p n assignment function
f dn function symbol f n assume p contains equality
predicate interpreted identity relation pre interpretation consists
domain interpretation function symbols interpretation
denote restriction symbols two disjoint
vocabularies interpretation domain j interpretation
domain j denotes unique interpretation domain
j j j
terms formulas vocabulary defined usual expression form
p n ary predicate dn called domain atom domain literal
p
negation p
thereof usual denote formula
domain atom p
x indicate set free variables subset x formula without
free variables called sentence satisfaction relation defined usual

interpretation formula n free variables tuple n domain elements


use shorthand x x variable assignment
variable assignment except maps variables
x
define truth evaluation function
follows
x domain elements





iff f otherwise say formula negation
normal form contains implications equivalences negations occur directly
front atoms define inverse truth values follows f f
define following strict order truth values f truth order
point wise extends interpretations j two interpretations say
j every predicate symbol p tuple domain elements holds
p j

p
similar real number r approximated interval l u l r
u approximate interpretations k pair j interpretations


fian approximative inference method

k j denote j interval interpretations k
interval empty j follows easily well known monotonicity
evaluate positive occurrences e scope even number
negations atoms formula negative occurrences e scope
odd number negations j underestimating truth interval
j conversely evaluate positive occurrences j negative occurrences
overestimating truth j state property formally
introduce following notation
definition pos neg evaluation relation ij let formula let j
interpretations define pos neg evaluation j denoted ij
induction size
atom p ij
ij ji
ij iff ij
x ij iff x j x
indeed k j ij k ji
k kk
intimate connection approximation interpretation
pair interpretations belnaps four valued logic denote truth values
true false unknown inconsistent four valued logic respectively f u
truth values truth order precision order p defined shown figure

four valued relation arity n domain function dn f u
four valued interpretation vocabulary consists pre interpretation p
four valued relation arity n predicate symbol p n
precision order pointwise extends interpretations j two interpretations
say p j every predicate symbol p tuple domain elements
p p j
similarly truth order extended interpretations
holds p



p



u



p

f








p

p

u

f

figure truth precision order


fivlaeminck vennekens denecker bruynooghe

natural isomorphism belnaps four truth values pairs two
standard truth values

f u
f
f f f
intuitively mapping interprets first argument underestimate real
truth value second argument overestimate underestimate f
overestimate real truth value indeed unknown whereas underestimate
overestimate f cannot exist real truth value since f
end inconsistency isomorphism extends obvious way isomorphism
pairs j two valued interpretations four valued interpretations
share pre interpretations j isomorphic iff predicate
p
p j
denote isomorphism
p n tuple dn p
tight link pos neg evaluation function ij belnap
evaluation
ij ji j
three valued structure e never assigns corresponds standard
kleene evaluation rest often omit isomorphism
e g simply denote four valued truth value formula pair interpretations
j j important property already stated different notation
j p k k j
natural well known alternative way interval j
j assign truth value formula supervaluation van fraassen
definition supervaluation sv j supervaluation sv j sentence
pair interpretations j equivalently three valued interpretation j
defined
sv j glbp k k j
easy see sv j p j inequality may strict
instance take q q interpretations j q j u
sv j j u supervaluation following interesting property
let interpretation free vocabulary formula q let j j
u
least precise pair interpretations q domain e q j j
n

q n q sv j j
key simulate four valued truth evaluation pairs
interpretations encoding certainly true certainly false single
two valued structure tf vocabulary tf next section
gives us convenient vocabulary syntactically represent construction
approximation vocabulary tf contains function symbols f
predicate p p two symbols p ct p cf interpretations p ct p cf
certainly true
tf contain respectively tuples p
certainly false formally vocabulary four valued interpretation


fian approximative inference method

j tf interpretation tf pre interpretation defined

p ct

tf


p p
p

p cf

tf


p f dn p j
p
tf

tf

interpretation three valued iff p ct p cf disjoint p
tf
tf
two valued iff p ct p cf others complement dn p j
tf
tf
tf
tf
p p ct p ct j p cf p cf j
definition ct cf given formula x let ct x tf formula
obtained first reducing negation normal form replacing occurrences
positive literals p p ct negative literals p p cf let cf x
formula x ct
interesting property formulas ct cf contain negations
following proposition well known
proposition feferman every formula interpretation holds
p
ij ct
tf
p f

tf
ji
cf




f

fo id
subsection recall fo id denecker ternovska extension fo
construct respresent common forms inductive definitions
monotone induction induction well founded order iterated induction
illustrated denecker ternovska fo id used represent different sorts
common knowledge temporal dynamic domains closed world assumption defaults causality etc use definitions symbolically represent
propagation fo formulas already mentioned introduction
propagation inductive definitions
definitional rule vocabulary expression form x p
p atomic formula fo formula symbol connective called
definitional implication distinguished fo material implication symbol
converse definition finite set definitional rules predicate
symbol p head rule called defined predicate predicate
function symbols called open symbols parameters definition
set defined predicates denoted def remaining symbols open note
open therefore includes f
given interpretation open predicates definition unique model
constructed firing rules appropriate order defining
formally first consider example
example reachability graph expressible fo fo
formula vocabulary consisting two predicates edge reach
model reachm iff non empty path


fivlaeminck vennekens denecker bruynooghe

graph represented edgem represent reachability inductive definition
however following definition defines predicate reach terms open predicate
edge


xy reach x edge x
xy reach x z reach x z reach z
definition given open interpretation
definition operator
two valued def interpretations
define immediate consequence operator

j iff defined predicate p n tuple dn holds
iff exists rule x p x

p j

model positive definition e defined predicates occur negatively
body rules defined least fixpoint immediate consequence operator
use odi open denote model definition extending restriction
open predicates function symbols open predicates
omit subscript simply use od postpone going detail
construct model general non monotonic inductive definition section
next two sections use positive definitions
fo id formulas inductively defined rules standard fo formulas
augmented one extra case
definition fo id formula
note rule bodies contain definitions rules occur inside definitions
fo id formulas whereas definitions used fo id formulas
anywhere atoms used
define satisfaction relation fo id standard inductive
rules fo augmented one extra rule
odi open
assume without loss generality definition holds
every defined predicate p def defined exactly one rule denoted x p x
p x indeed definition brought form process similar
predicate completion transformation consists first transforming rules form
x p equivalent rules p x next one merges rules
form x p x x x p x x n x

propagation fo
section give general symbolic representation propagation first order logic
base work wittocx et al come back
precise relation material presented section work end
section
suppose fo theory vocabulary pre interpretation
finite three valued interpretation represents incomplete knowledge


fian approximative inference method

clean clean w ipe



act


clean clean w ipe


clean
f


act


clean w ipe


clean



act


clean
cleancf

w ipe


clean
cleancf

w ipe
w ipecf

figure propagation fo
predicates would know implications knowledge assuming
theory satisfied context look set
complete three valued interpretation e
p given partial information everything true
must certainly true according everything false must
certainly false according words information allows us
derive captured greatest lower bound g glbp
general computing greatest lower bound may expensive data complexity p practical use however may still achieve useful
computing approximation p p g compute
approximation propagating three valued interpretation parse tree
illustrate following example
example consider sentence clean clean w ipe rewriting
negation normal form becomes
clean clean w ipe
assume satisfied know clean false timepoint
knowledge satisfied immediately follows timepoints
disjunctive formula clean clean w ipe satisfied fact
clean false timepoint deduce conjunction clean
w ipe true timepoint therefore clean false
timepoint w ipe clean false timepoint reasoning process
illustrated left part figure
construct symbolic representation propagation process first
introduce additional vocabulary aux refer different nodes parse
tree process operates use additional vocabulary transform
fo formula equivalence normal form formula similar tseitin
transformation propositional logic
definition en f fo formula negation normal form introduce
predicate symbol arity n non literal subformula x n


fivlaeminck vennekens denecker bruynooghe

free variables denote set predicates aux
predicate symbols defined formula eq follows make notation simpler
assume n non literal subformula definitions analogous
whenever literal instead ai literal used body
definition
x subformula form x x n xn eq
x x x x xn
x subformula form x x n xn eq
x x x x xn
x subformula form x eq equals x x
x
x subformula form x eq equals x x
x
define equivalence normal form set eq denote
en f
example according definition en f theory example

clean
clean w ipe
illustrated right side figure
auxiliary vocabulary write propagations shown
figure following implications

clean










clean
w ipe

note rules top rules implications propagate information
subformula parse tree component subformula possibly
information components subformula implication
clean general bottom propagations course possible
instance clean could derive every predicate derive
eq set implications propagation corresponds
deriving consequent antecedent different implications
logically equivalent defined table last column table indicates
whether rule top td bottom bu
definition f given equivalence en f certain formula
denote imp set implications obtained table
define implication normal form denoted f follows f en f imp


fian approximative inference method

eq

imp

x l l ln

x
x
x
x

l ln l
li l
l li
l l li li ln li





bu
bu
td
td

x l l ln

x
x
x
x

l ln l
li l

l li

l l li li ln li n

bu
bu
td
td

x l x l x

x l x l x
x l x l x
xy l x l x
xy l x z z l x z l x

bu
bu
td
td

x l x l x

x l x l x
x l x l x
xy l x l x
xy l x z z l x z l x

bu
bu
td
td

table enf inf

work wittocx et al proven f
true correspond sense restriction model f
model vice versa every model extended model
f implications form core approximation method
approximation could made complete adding implications
f definition tries strike balance completeness ease
automatically deriving implications
example three formulas en f example following
table shows corresponding set implications imp complete theory f
consists union three sets







clean
clean
clean

clean

clean
clean

clean w ipe
clean w ipe
clean
w ipe
clean
w ipe
w ipe clean
clean w ipe

reader verify four implications representing propagation example
indeed belong f
propagation process example described least fixpointcomputation apply implications e infer head body
already inferred longer infer information represent
fixpoint computation inductive definition syntax fo id however
two complications


fivlaeminck vennekens denecker bruynooghe

first need implications f indeed
typically subset symbols already know
know conformant example instance case
existentially quantified predicate w ipe simply use model expansion
system guess complete interpretation predicate job propagation
process figure consequences particular guess implications predicate e w ipe head obviously needed
second fixpoint computation needs infer atoms true
false however syntax fo id allow negative literals
heads rules therefore definition contain rules predicates p
original vocabulary head instead use predicates p ct p cf
tf vocabulary since need rules fully known predicates head
introduce p ct p cf predicates p
ct
ct
given formula therefore define ct
formula see definition p
cf
replaced p p p every predicate p
definition approx formula define approx
inductive definition contains every sentence x l x f l
ct
literal predicate definitional rule x l x ct
define
td
approxbu
approx way approx containing
definitional rules coming bottom respectively top rules f
often assume without loss generality whenever case
drop use approx rather approx denote approximative
definition
example implications f example obtain definition
shown figure approx take w ipe get definition
approx figure apart last seven definitional rules replaced
following five definitional rules














ct
cf





clean


w
ipe





cf

ct

clean


w ipe
acf






cf
ct




clean











cf
ct
clean w ipe
contrast approx definition longer approximates predicate w ipe
definition approx used certainly holds holds given two
valued interpretation predicates
example larger example look example let us take
act w ipe definition approx found appendix

approximative definition useful properties formulate
next two theorems first property approximative definition


fian approximative inference method

ct




cf






ct







acf









acf




ct





ct






cleancf


cf

cleanct




act









act




cf






cf






cf


clean



cf


w
ipe





cleanct



w ipect


act






acf




ct





cf


ct









cf
cf
clean



ct

clean



ct





cf






cf

cf

act



ct


cleancf






cf
cf

clean w ipe




cleanct





w ipect




act






act




cf

cf

w ipe



cf
cf
clean








clean



clean

w ipe

figure example approximative definition
together encoding three valued interpretation original vocabulary
give exact characterization approximative definition computes indeed
setting approxbu actually encodes three valued kleene evaluation
moreover adding top rules change since compute
actually anything long information original vocabulary provided
input formally state property need define encode
four valued interpretation definition assume vocabulary
pre interpretation contains constant symbol cd every domain element
domain pre interpretation holds cd
allows us identify cd therefore abusing notation use denote cd
follows
definition given four valued interpretation definition associated
denoted defined




p
p
p ct
cf



p p p f

theorem given formula four valued interpretation following
holds
case three valued holds approx logically equivalent
approxbu od approx od approxbu


fivlaeminck vennekens denecker bruynooghe

b let od approx v truth value act
v truth

value acf
v v corresponds four valued truth value e
v v

proof see appendix b
summary theorem says first approximation
computes four valued belnap evaluation four valued structure moreover
computation done bottom rules approximation alone threevalued top rules actually effect four valued
may still serve purpose however bottom rules derived
subformula inconsistent propagate information derive smaller
formulas inconsistent see consider following formula p q take
four valued interpretation p q one verify
cf
bottom rules approx infer act
p q ap q true
however top rules infer qcf true
theorem information add approximative definition
form definition e assert truth resp falsity domain atoms
following definition allows us assert truth falsity grounded

subformula
definition given formula pre interpretation set
x subformula arity n dn
formulas
domain define follows
cf



act


assert way truth falsity set grounded subformulas
obtain approximation everything holds respectively hold
however opposed theorem next theorem
give exact characterization approximation get
theorem given formula set defined subformula x
cf


let od approx act
resp
resp
note interesting special case theorem take equal
thus add act
approx definition gives approximation everything
certainly true resp certainly false
returning exact relationship work wittocx et al
content section see wittocx et al interested special
case e approximating theory reason transformation
formula en f already includes formula cause rule
act
included approximating definition soundness
formulated proven setting however difficult see
proofs trivially adapted proof theorem general setting
used section


fian approximative inference method

approximating satisfiability
use approximate definition previous section approximate following take formula f p q ease presentation
assume second order formulas contain free predicate symbols
generalize setting free predicate symbols assume
q contains predicate symbols follows denote vocabulary
question want answer whether formula f satisfied given
finite domain pre interpretation constant function symbols formula
satisfiability boils deciding whether witness
satisfiability formula following sense
definition witness call j witness satisfiability formula p q
given finite pre interpretation j interpretation q extending e j
interpretation whole vocabulary without universally quantified predicates
q satisfied j equivalently j witness three valued holds
interpretation j expands j assigning u domain atom q
svj
goal section approximate satisfiability
satisfiability following sense
definition sound approximation consider satisfiability
formula p q fo formula alphabet id formula
form p r fo id formula alphabet q r sound
approximation satisfiability whenever j witness satisfiability
p r j q witness satisfiability p q
words sound approximation g satisfiability
formula f stronger id formula e one fewer witnesses p
naive method
use theorem construct sound approximation given
formula
definition app f given formula f p q take alphabet
function symbols predicates p define app f formula
tf
p r approx act
vocabulary r r q aux
intuition interpretation approx give
four valued evaluation interpretation expands assigning unknown universally quantified predicates q entire fo formula evaluates
true four valued interpretation know satisfied interpretation expands words every interpretation q predicates thus
witness satisfiability entire formula f auxiliary predicates
aux introduced transformation enf needed way
propagation works value completely determined p


fivlaeminck vennekens denecker bruynooghe

proposition formula f form p q holds app f
sound approximation f
proof follows immediately theorem take three valued inter u q q dn
pretation interpretation q
p
p p dn domain
p
example take f formula p q p q app f
becomes
ct

ct


p

q






acf p qcf

cf
ct
cf
ct

p q q
act

ct act p
q







cf

q acf

start interpretation open predicate p definition approx p
let us take interpretation makes p true unique model definition
ct
cf
extends interpretation assigns true act
false q q
ct
acf
therefore satisfies approx p hence witness
satisfiability app f indeed witness satisfiability original
formula p q p q
approximation method sound many applications still incomplete
indeed let us look following formula f q q q app f becomes



qct qcf
act






cf
cf qct




q






qct act qct

cf




qct qcf act
act


cf acf



q






cf


qcf act


q




qct acf



definition entail act
app f unsatisfiable even though original formula f clearly satisfied showed
previous section definition encodes three valued kleene evaluation
strong enough formula f satisfied need stronger
supervaluation
recall preliminaries saw supervaluation kleene evaluation
general equal however formulas equal literature several
classes formulas agree proposed e g context locally
closed databases denecker et al context reasoning incomplete
first order knowledge liu levesque latter introduces normal form n f
first order formulas supervaluation coincides kleene evaluation
proves certain classes formulas normal form n f one class
cnf formulas every two literals conflict free pair literals
conflict free polarity use different predicates
use different constants argument position immediately follows


fian approximative inference method

approximation complete formulas first order formula satisfies
condition
proposition formula f form p q n f
normal form according liu levesque satisfiable respect given finite
pre interpretation formula app f satisfiable w r
proof follows immediately liu levesque theorem
complete method
unfortunately many applications give rise formulas first order part falls
outside class n f means completeness method guaranteed
particularly troublesome practice formulas common form p q
formulas naive approximation method previous section tries
interpretations p implication holds q however
look details approximative definitions act
defined rule
cf
ct
body words approximation derive holds
q case false q true q however
rarely case practical applications witnesses interest
typically satisfy implication falsify
satisfy rather interpretation q satisfies satisfies
instance conformant example interpretations
fluents satisfy action theory act arbitrarily assign
fluent value wrong initial value actions performed even
set actions completely correct conformant plan therefore cannot make goal
certainly true still unsatisfied wrong interpretations
fluents course bother good method finding conformant plans
thing matter goal satisfied interpretations
fluents satisfy action theory
luckily approximation method used discover kind witnesses
thing required add approximative definition approx
rule act
seed approximation assumption
holds starting assumption top rules derive properties
predicates q shared interpretations q actually satisfy
bottom rules propagate information upwards discover whether
properties suffice ensure holds know indeed
must hold every interpretation q satisfies therefore found
witness formula
want witnesses kind degenerate witnesses make
false q true q could simply combine method old
ct
ct
one check whether act
holds according whether holds
according however turns necessary achieve
ct
effect checking whether act
implies first
ct
definition act
able derive whenever
ct
ct
derive obviously still able would


fivlaeminck vennekens denecker bruynooghe

ct
able derive acf
able simply
approximation flow information ct cf variants
formula additional assumption act
holds change original derivation
ct
ct
ct
acf
second derive derives simply
cf
ct
contains rule act
therefore kinds witnesses
ct
checking whether act
implied single definition

definition app f formula f p q
definition
form define app f p r act

ct
approx
note obtain definition special case taking trivial formula
approximation method still sound following proposition states
proposition given formula f form p q
id formula app f sound approximation f
proof see appendix c
since approximative definition app f contains rules approx f
hard see approximation method least complete one
app f definition moreover seen following example
strictly complete
example let us consider following formula f p q q p q
p clearly witness satisfiability denote q p q
q p app f following formula

act




cf






ct

p r

acf




ct

q


cf
q








ct
acf
q
ct
qcf
p qct
p qcf
act
p
acf












act











even p definition body formula entail act


therefore app f satisfiable hand app f formula
apart definition contains one rule rule act

easy verify app f satisfiable indeed p witness
obviously method still complete formulas
satisfies normal form n f however method works many formulas outside
class unfortunately difficult characterize precisely much complete
method instance one source loss completeness comes fact
current translation enf cannot recognize multiple occurrences subformula
introduce different tseitin predicate occurrence even though cannot


fian approximative inference method

guarantee completeness method general found solutions
conformant benchmarks considered section
final remark method approximative definition approx
contains number rules superfluous context indeed method
definition takes input interpretation p together assumption
certainly true uses bottom top rules derived
compute effect inputs predicates q finally rules derived
compute whether derived information q suffices make certainly true
however know theorem bottom rules needed
therefore top rules actually contribute nothing could

td
well removed adapting definition use
bu approx instead

leads following definition
definition app
bu f formula f p q
ct

form define app
bu f p r bu
td
ct

bu approx approx

follows directly theorem proposition sound approximation removed top rules approximation remaining
rules serve already know compute kleene evaluation
computing kleene evaluation subformula use
pt
tseitin predicates act
alternative avoid tseitin predicates
defining act
directly single rule
ct
act


variant summarized following definition
definition app
bu u nf f formula f p q
ct

define app
bu u nf f p r bu u nf
ct
ct
ct

bu u nf approx approx

approximation actually equivalent def follows
fact bottom rules positive non recursive allows us
eliminate tseitin predicates introduced parse tree applying unfolding
procedure tamaki sato iteratively applying equivalence preserving
procedure reduce rules generated approximate
ct
single rule act


approximating id satisfiability
inductive definitions important knowledge representation argued denecker
ternovska inductive definitions used represent mathematical
concepts sort common sense knowledge often represented logic
programs dynamic domains closed world assumption defaults causality etc


fivlaeminck vennekens denecker bruynooghe

therefore inductive definitions make task representing logic considerably easier example use inductively defined situation calculus
reasoning actions denecker ternovska recall introduction
showed represent tact example inductive definition act


clean clean

clean w ipe



clean
initiallyclean
associated conformant expressed id satisfiability
w ipe clean initiallyclean act clean n
detail section general conformant
seen satisfiability form
f act init prec goal
ai
predicates represent actions initial fluents f fluents
definition act defines fluents change terms action init first
order formula initial situation prec describes preconditions actions
goal goal motivates extension approximation method formulas
including definitions however analyze general case definitions may
appear arbitrary locations formula instead restrict attention formulas
form
p q
definition def q fo formulas even
though restrictions strictly necessary allow us keep technical
details relatively simple particular avoid need approximation rules infer
definition whole certainly true false still covering way
definitions typically used assumption predicates indeed
definition formula say states properties
satisfy
extend approximative method satisfiability
need syntactic representation e approximative definition describes sound
inferences made definition three valued context section
propose two ways obtain approximative definition accordingly two ways
approximate satisfiability continue first
need recall preliminaries
preliminaries well founded semantics inductive definitions
earlier defined model positive inductive definition given two valued interpretation open predicates inductive definitions longer
positive definitions model definition longer computed
least fixpoint immediate consequence operator introduced section moreover


fian approximative inference method

follows want use inductive definitions together four valued information
open predicates example information obtained propagation
first order theory therefore recall see e g denecker ternovska
define well founded model non monotone inductive definition negation
body rules allowed given four valued information open predicates denote w f mo order first need define
additional concepts recall p denotes body unique rule predicate p
head
definition operator definition given potentially valued
open interpretation define operator valued def interpretations
domain open j iff defined predicate p n
n tuple dn holds


p j
p
recall preliminaries defined isomorphism maps pair
interpretations j corresponding four valued interpretation
definition w f mo define well founded model valued

interpretation j j maximal oscillation pair operator st


st operator j lf p k k j e j least precise pair
valued interpretations


st
j j st


explanation order first look operator k k j operator takes def structure k turns valued one combining j
applies operator projects first argument see
k k j l iff defined predicate p n n tuple dn holds
iff p
l j
p l
words positive occurrences atoms evaluated l negative occurrences
j j operator k k j monotone therefore
maps j least fixpoint proven
least fixpoint operator st
operator antimonotone therefore maximal oscillation pair definition
nonof well founded model maximal oscillation pair operator st
constructive definition maximal oscillation pair constructed iterating
following operator starting least precise interpretation extends
reaches least fixpoint

definition stable operator st
define operator st pairs interpretations


st
j st j st

stable operator monotone w r precision order p pairs interpretations
fixpoints therefore form complete lattice fixpoints operator called


fivlaeminck vennekens denecker bruynooghe

four valued stable fixpoints least precise fixpoints precisely
well founded model given
define semantics inductive definitions general case
reader easily verify indeed generalizes definition odo positive
definitions gave section
definition satisfaction relation definitions iff def def
well founded model open
note definition three valued well founded model every possible
interpretation open predicates open definition model e
exists interpretation call definition total
two valued well founded model every possible two valued interpretation open
predicates
definitions generalize rather obvious way standard well founded
semantics propositional logic programs strongly linked stable semantics gelfond lifschitz case propositional logic program
open operator k k j nothing else immediate consequence operator tj gelfond lifschitz reduct j operator maps
j lf p k k j stable operator shown van gelder
maximal oscillation pair indeed well founded model
approximating id satisfiability
assume formula fo id formula instead fo
concepts witness definition sound approximation definition straightforwardly generalised fo id formula allows us develop two
approaches first one section replaces definition completion
applies method section however completion weaker
definition therefore section develop another constructs
approximation conjunction definition fo formula
completion definition
first use completion clark completion
definition conjunction equivalences x p x p x predicates
p def p x body unique rule p head useful
property definition implies completion compl moreover nonrecursive two actually equivalent replacing definition completion
obtain formula comp every model
model comp every model comp model
every witness compl satisfiability witness
satisfiability hence use section
formulate following proposition
proposition formula app
bu compl sound approximation
p q


fian approximative inference method

disadvantage completion matter complete approximation method defined definition never able infer something
follows compl instance inductive definition p p
entails p completion p p
denecker ternovska proven addition non recursive definitions class recursive definitions equivalent completion particular
case definitions strict well founded order therefore replace
definitions completion without losing precision theory tact example
actually completion definition act since act recursive definition
strict well founded order make use time argument predicates
construct well founded order act tact equivalent
gaspipe conformant son et al hand uses
dynamic domain completion suffice summarized objective
conformant start flame burner connected
gas tank pipe line pipe line consists sections connected
valves valve opened gas one side gas
spread far possible formalized inductive definition
reachability relation pipe line


x gas x gas v connected x v open v
x gas x ank x
reachability definitions equivalent completion therefore approximative method presented subsection work completion
case correctly minimize defined predicates presence
recursion would allow loop pipe line filled gas even
connected tank missing therefore unfounded set reasoning allows well founded semantics correctly minimize defined predicates
certainly true possibly true approximation
approximative definition approx used section nice property
defines subformula including whether certainly true certainly
false property allowed us witnesses simply asserting act

hold according definition want apply method formulas
contain definition construct approximative definition defines
whether subformulas including certainly true certainly
false section naive method managed simply replacing
completion want improve method constructing approximation
takes account unfounded set reasoning performed well founded
semantics
take aspect well founded semantics account however
becomes difficult define definition whole certainly true certainly
false luckily needed stick assumption definitions appear
antecedent implication indeed approximate implications
order well founded infinite descending chains xn xn x



fivlaeminck vennekens denecker bruynooghe

assuming antecedent certainly true definition really need
approximation consequences definition end transform
original definition approximative definition well founded
model given approximation open predicates approximates
well founded given interpretation open predicates
approximated words construct approximative definition whose
two valued well founded model encodes potentially four valued well founded model
original definition given potentially four valued interpretation predicates
therefore represent four valued interpretation orginal vocabulary
two valued interpretation larger vocabulary however instead introducing
predicate p predicate p ct p certainly true p cf p certainly false
introduce predicates p ct p pt p possibly true e p
certainly false let ct pt denote vocabulary f p ct p p pt p
four valued interpretation define corresponding ct pt interpretation ct pt
ct pt
interpretation pre interpretation p ct

ct pt

pt





p p p
p p
formula define formula ct pt formula obtain
replacing positive occurrences predicate p p ct negative occurrences
p pt finally reducing negational normal form easy see ct pt
obtained ct replacing every predicate p occurrences p cf p pt
unlike ct ct pt positive formula contain negations particular
p ct occurs positively p pt occurs negatively subvocabulary
ct pt

denotes ct pt p ct p pt replaced p every predicate
p follows use denote predicates need
approximated two valued information
ct pt

ct pt

definition app definition define app
rct rpt rct consists rules

definition

x p ct x ct pt


rpt consists rules
x p pt x ct pt


every definitional rule x p x
assume rest paragraph without loss generality empty
ct pt
drop notation app
example consider following inductive definition


b b

assume

appct pt

ct
b


ct


pt
b


pt








b ct apt
dpt
b pt act
dct











fian approximative inference method

see three valued interpretation u translates dct f dpt
approximative definition correctly infer b ct false b pt true
take f interpretation open predicate see approximative
definition correctly infers b ct b pt false example unfounded
set reasoning known true approximation detects b could
derived b therefore must false kind reasoning could done
previous completion approximation method since sound w r
semantics definition w r weaker completion
example demonstrates use vocabulary ct pt instead
ct cf since latter would yielded definition
ct

b
b ct acf



ct


dcf

b cf b cf act



cf


dct
f definition would fail infer b cf intuitively reason
unfounded set reasoning well founded semantics tries minimize extension
defined predicates making many atoms false possible ct cf
vocabulary well founded semantics approximating definition therefore attempts
possible actually corresponds maximizing
falsify many atoms p cf
possible extension original predicates p instead minimizing well founded
semantics original definition
two valued interpretation double vocabulary ct pt corresponds fourvalued interpretation original vocabulary want establish link
ct pt
well founded model original definition app complict pt
cating factor example shows definition app
longer
monotone therefore longer guaranteed two valued well founded model
three valued interpretation ct pt longer corresponds even four valued
interpretation original vocabulary prove correspondence
ct pt
well founded model app
two valued
theorem let four valued interpretation open predicates definition
appct pt two valued well founded model given oct pt
unique four valued stable fixpoint given moreover appct pt two valued wellfounded model unique four valued stable fixpoint unique interpretation
ct pt
proof see appendix
theorem requires unique four valued stable model four valued
input interpretation stronger requirement common condition
totality requires definition two valued well founded model given
two valued input interpretation following example shows stronger condition
indeed necessary


fivlaeminck vennekens denecker bruynooghe

example consider following definition




b

b c




c
definition total two valued interpretation open predicate
two valued well founded model however three valued
interpretation e unknown open predicate three valued
well founded model b c unique three valued stable fixpoint since
c fixpoint indeed
ct






b ct



c ct
ct pt
app


apt



b pt



pt
c

b pt






apt c ct


ct
pt


b ct



ct
pt
c


pt
ct


two valued well founded model given opt easiest way see
fill fact know opt oct f propagate information
ct

b pt






ct
pt
ct



b c






c ct f



apt b ct








pt
ct
pt


b



c





pt

c f

ct

b pt






ct
pt



b f









ct

b pt


















ct

b pt




















apt b ct








pt
ct


b








pt

c


apt f







pt
ct


b







pt

c



apt








pt
ct


b







pt

c

left loop negation means act b pt remain unknown
three valued well founded model apt c pt act apt c pt b pt definition
computing three valued well founded model given approximative definition appct pt produce precise approximation compl
particular detect atoms unfounded set must false illustrated
example use appct pt approximation
still need combined approximation approx
produce sound approximation need combine one definition
ct cf predicates another definition ct pt predicates achieve first merging
two definitions adding rules copy information one vocabulary



fian approximative inference method

definition given vocabulary subvocabulary inductive
definition first order formula define following inductive definition
ct pt

app

ocf



approx act


opt ocf every predicate open

p cf p pt every predicate p def

ct
f f every predicate open occur

definition indeed contains rules approximation rules
approximation appct pt approx act
respectively
number extra rules make connection two approximations
approximate defined predicate q approximation uses pair predicates
qct qpt approximation uses qct qcf hence number extra
rules needed transfer information predicates qpt qcf rules
opt ocf transfer information approximation derived
truth open predicate means ocf corresponding predicate opt
approximation definition rules p cf p pt turn propagate information
derived truth defined predicate approximation definition
corresponding predicate p cf approximation finally rules ocf f oct
f make sure ocf oct defined atoms instead open ones
default value u following proposition relates well founded model

proposition given vocabulary subvocabulary fo id formula
resp p cf
holds
every interpretation w f mi p ct
resp p

every model extending p
proof see appendix e
proposition analogue inductive definitions theorem
states fo formulas one difference two proposition assumes definition holds theorem makes
assumption fo formula approximated discussed beginning
section restriction way approximate
implications allow definitions appear antecedent second
difference theorem applies arbitrary subformulas
however easy corrolary proposition
proposition considers atoms p
fact holds formula contains predicates defined
cf
every model
e whenever w f mi ct
resp

extending holds
introduced approximation appct pt aim complete
completion approximation long single definition considered


fivlaeminck vennekens denecker bruynooghe

isolation succeeded goal however incorporated
additional formula longer case instance consider following fo id
theory


q p q
approximation cannot derive p certainly true simply
ct pt approximation appct pt contain rules head body propagation e
rules infer something body definitional rule given information
head contrast approximation completion contain rules
therefore reaching conclusion motivates us use
use compl instead definition implies completion
sound
obtain sound approximation id formula p q
need plug approximation compl
suitable id formula similar one defined definition
formula p q small complication however discussed previously
cf
approximation definition define predicates act
tell us
definition whole certainly true certainly false therefore longer
use normal approximation entire implication certainly true
present approximation id let us first introduce reformulation
original approximation avoids use act

proposition formula f p q form
approximation defined definition e formula
ct
p r approx act


equivalent
cf
ct
p r approx appox act


proof obvious fact difference approx
approx appox precisely set rules ensure act
equivalent
ct
acf


approximation id essentially consists replacing approx
compl
cf
act
acf
form
respectively
proposition given id formula f p q define
app wf f following id formula
ct
p r dcompl approx acf


app wf f sound approximation f
compl

cases approximating
instead gain us anything instance consider p q contains open
predicates case conformant consider next


fian approximative inference method

sections case never need head body propagation therefore
compl
complete
therefore better former
case approximation method well rules
definition app wf necessary indeed bottom rules approx
needed unfolded single rule therefore define two
variants definition
definition app wf
bu f given id formula f p q
wf
define app bu f following id formula
cf
ct
p r dcompl approxbu


define app wf
bu u nf f following id formula
ct
cf
ct
p r dcompl act


experimental evaluation
seen number methods approximate id
satisfiability subsection explore number experiments
use methods solve practically useful fast possible
performed experiments number conformant benchmarks
son et al section benchmarks
form f stratified definition therefore equivalent
completion therefore f equivalent formula compl
denote f cp experiments run dual core ghz cpu gb ram
linux machine idp model expansion system fo id marien et al
time twenty minutes used
first question want answer whether definitions completion
approximation faster ct pt approximation hard see even
though approx compl linear size parse tree compl definition
may contain rules appct pt moreover rules may contain lot
recursion pose challenge current solvers suggests likely
efficient use ct pt approximation definitions first column table
shows times completion definition app f cp
second column ct pt approximation used app wf f expected
ct pt approximation consistently faster
table compares solving times full completion approximative definition
cp
first column approximation app
bu f def topdown propagation rules removed third column see bt
btc benchmarks get order magnitude improvement fourth column
cp
table shows timings unfolded approximation app
bu u nf f
intermediate tseitin predicates removed def see unfolding
consistently provides speed
suggest combining techniques ct pt
approximation unfolding bottom approximation together


fivlaeminck vennekens denecker bruynooghe

app f cp

app wf f

cp
app
bu f

cp
app
bu u nf f

app wf
bu u nf f

bt
bt
bt
bt
bt





























btc
btc
btc
btc






































































domino
domino
domino
domino
domino
ring
ring
ring
ring
ring

table first column gives name benchmark ones different
execution times second column gives execution time approximation
completion third cp pt approximation fourth fifth column use
variants completion approximation fourth column top rules
removed addition fifth column remaining bottom rules
unfolded last column combines cp pt approximation changes
means execution interrupted minutes
give us fastest way approximating satisfiability indeed
formula app wf
bu u nf f definition method
shown last column table expected far fastest method

applications related work
literature many examples found approaches perform kind
approximate reasoning logical theory often approaches
specific hand seem boil instantiation general
methods presented section give examples
conformant
general conformant non deterministic
domain initial state may fully known goal come
plan e sequence actions nevertheless guaranteed work hard
decision deciding whether conformant plan fixed length
k exists p complete baral kreinovich trejo turner therefore one
domains executability actions given state cannot determined polynomially even p
turner



fian approximative inference method

typically attempts solve approximately section apply
approximative methods solve conformant
example let us consider clogged bombs toilet domain mcdermott
son et al number packages toilet packages may
contain bomb disarmed dunking package toilet dunking
package toilet clogs toilet cannot throw package clogged toilet
flushing toilet unclogs effects actions fluents modeled
following definition act preconditions conjunction prec sentences
tprec

act



clogged init clogged





clogged p dunk p clogged f lush




armed p init armed p






armed p armed p dunk p

tprec

p dunk p clogged
p dunk p f lush

p p dunk p dunk p p p
p dunk p dunk p

consider following regular given completely specified initial
situation specified formula init plan packages disarmed
formulate following formula
f act prec init p armed p
denote action predicates dunk f lush f denote
fluent predicates armed clogged denote predicates used
describe initial situation init clogged init armed imagine initial
situation specified want plan works possible initial
situations words conformant plan formulate finding
plan follows
f act prec p armed p
formalized general follows
definition conformant let vocabulary consisting set
predicates denoting actions denoting initial fluents f denoting fluents let
tact fo id theory tinit tprec tgoal fo theories tact
specifies values fluents given interpretation actions initial fluents
tinit theory specifying initial situation tprec contains preconditions actions
tgoal specifies goal act denote conjunction
sentences possibly definitions tact similarly theories
conformant decide satisfiability following formula
f act init prec goal




fivlaeminck vennekens denecker bruynooghe

ar


cloggedct



ct

clogged




armedct p




armedct p




cloggedpt




cloggedpt




armedpt p




armedpt p




init cloggedct




init
armedct p

init cloggedpt


init cloggedcf




init
armedpt p




armedcf
init



cf

clogged



cf p

armed




act



































init cloggedct
p dunk p cloggedct f lush
init armedct p
armed p dunk p
init cloggedpt
p dunk p cloggedpt f lush
init armedpt p
armed p dunk p
f
f
init cloggedcf
f
init armedcf p
f
cloggedpt
armedpt p
pt dunk p cloggedcf
pt dunk p f lush
p p dunk p dunk p p p
pt dunk p dunk p
tp armedcf p














































































act


figure complete approximation clogged bombs toilet example
words must plan matter nondeterministic
f long specification effects actions act
aspects turn
partial specification initial situation init obeyed plan
executable prec achieve goal goal
formula exactly form assumed thus use one
methods approximate conformant
example continued continuing clogged bombs toilet example
ct pt approximation definition unfolding constraint prec
p armed p ct get approximating formula app wf
bu u nf definition
shown figure r ct cf predicates introduced approximation
method
applying general approximation method conformant
specified tact tprec tgoal tinit similar approximation al action theory logic program work son et al
however small differences details make difficult formally
compare two nevertheless experiments discussed section method
finds correct solution unless times method son et al
moreover two approaches found solutions comparable execution times
detail table presents following implemented conformant
planner iteratively calling idp model generator fo id marien et al
approximation giving increasing number timesteps plan


fian approximative inference method



idp

smodels

cmodels

bt
bt
bt
bt
bt



















btc
btc
btc
btc
















cleaner
cleaner
cleaner
cleaner
cleaner
cleaner
cleaner
cleaner



















domino
domino
domino
domino
domino




































ring
ring
ring
ring
ring

table comparison idp vs cmodels vs smodels

found maximum number timesteps reached compared planner
cpasp conformant planner son et al experimental setup
section cpasp takes action theory action language al encodes
approximation transition diagram corresponding action theory means
answer set program answer set solver used conformant plans
son et al used asp solver behind cpasp cmodels e giunchiglia
maratea smodels niemela simons syrjanen table shows
combination approximation idp system comparable overall slightly
worse combination cmodels son et al approximation compared
approximation given smodels method tends bit better
line asp competition denecker et al concerning
performance smodels cmodels idp general suggesting conformant
approximation son et al comparable quality
another approximative method solving conformant found
work palacios geffner authors consider conformant
specified language strips extended conditional effects
negation define transformation k transforms conformant
classical sound incomplete way fluent
literal l conformant specification two literals kl kl created


fivlaeminck vennekens denecker bruynooghe

denoting l known true resp known true initial situation
action preconditions effects translated initial situation preconditions
effects reference knowledge literals hard verify
approximation method generalizes transformation take encoding
conformant p approximation obtained method
interpreted classical ct cf vocabulary
exactly specified k p e action preconditions
effects correspond apart initial situation k transformation
propagation knowledge initial situation given initial situation specified
set clauses k consists literals kl l unit clause
means e g initial situation p q p k include
literal kq method able infer qct holds means
approximation method complete k transformation
general method allow solving conformant allows approximating number related temporal domains
consider example following given certain action happens
timepoint certainly lead property true formalized
following satisfiability method applies
aif act init prec
formula true possible plans happens property holds
variant called projection given exactly know
actions happened thus assume preconditions satisfied
property hold order formulate satisfiability
need express actions happened done example
inductive definition projection expressed
aif act init satisfiability another variant following
property holds certain plan property hold
expressed aif act init prec satisfiability
querying reasoning open databases
approximate methods similar used context databases without
complete information particular databases without cwa open databases
baral et al liu levesque databases make forms local closed
world assumptions denecker et al doherty et al papers
goal compute certain possible answers queries task
high complexity conp locally closed database without integrity constraints
possibly p databases first order constraints assuming given finite domain
approximate methods presented translate fo query approximate fo
fo fp query solved directly database tables standard
polynomial query methods
method presented provide similar functionality let db
set ground literals representing incomplete database let background theory
fo fp extension fo least greatest fixpoint constructs



fian approximative inference method

may contain integrity constraints view definitions datalog view programs special
case fo id definitions local closed world statements expressed fo etc given
holds herbrand
fo query q x goal tuples q
db deciding whether given tuple answer corresponds
satisfiability formula

r db q



directly use approximation method allows us
answer yes queries well decide whether given tuple certain answer
query approximation method directly provide method compute
approximation tuples
however let us look following satisfiability
r ddb approxbu q x
looks much approximation satisfiability
formulated proposition definition ddb approximating
database db background knowledge note possibly contains definitions
bottom evaluation query constraint act
q dropped
definition ddb approxbu q x consists rules describing propagations allowed database theory rules defining predicate symbol act
q
aq tseitin predicate representing query q x unique herbrand model
definition interpretation act
q contains tuples propagation
derive certainly satisfy query sound approximation full set
answers
work denecker et al locally closed database lcdb assumed
locally closed database consists standard database db e set atoms together
set local closed world assumptions lcwa p x x lcwa
statements expresses databases knowledge p complete tuples x
therefore true db false
satisfy formula x atom p
holds domain
db lcwa p x x
discourse otherwise unknown authors present approximate reasoning
method query answering locally closed databases approximate
query answering formulated fixpoint query basically boils
following one constructs following definition











p ct x p x


lcwa
p cf x p ct x ct


p x







every relation p every local closed world assumption lcwa p x x although
authors phrase form method finding approximation
certain answers query q x actually boils solving following satisfiability

r db cw db lcwa approxbu q x


fivlaeminck vennekens denecker bruynooghe

r denotes predicates auxiliary predicates occurring body existential formula cw db denote formula expressing closed world assumption
database db presence closed world assumption might seem strange
first sight since whole idea behind locally closed world databases assume cwa
per default however order correctly apply local closed world assumptions
need exact specification database precisely
expressed db cw db indeed given db cw db lcwa
seen approximative definition certainly true false context
locally closed world assumptions predicate act
q contain approximate
answer query q x e lower bound tuples query q x
certainly true similarly predicate acf
q contain lower bound tuples
query false
limitation denecker et al extend method
one type integrity constraints namely functional dependencies way
functional dependencies handled extending lcwa extra propagation rules
taking functional dependencies account contrast general method
used easily extend arbitrary integrity constraints works follows
let tint set first order integrity constraints approximate
finding certain queries following satisfiability
bu
ct db cw db lcwa approx
q
r approx tint atint

predicate act
q contain approximate answer query q x
doherty et al propose yet another asking queries incomplete
database authors use term approximate database denote database consisting
two layers extentional intensional layer layers external
representation towards user internal representation
extentional database consists positive negative literals internally
stored classical database feferman transformation example extentional database edb entered user
color car black color car red color car red
internally stored
colorct car black colorcf car red colorct car red
intentional database consists rules infer additional information facts
edb user write rules form p x pn xn p x
internally stored p x ct pn xn ct p x ct
example idb rule following rule
color x color x
internally stored
colorct x colorcf x


fian approximative inference method

evaluate query naive exhaustively applying rules edb
used
rules idb resemble f formulas sense describe valid
inferences made incomplete information internal representation
idb indeed similar representation f formulas definitional rules
however key difference doherty et al user wants add
property database e g car one color write
inferences valid according property inference
rules automatically generated property manually writing valid
inferences sanctioned property easy task example take property
car inspected suspect black doherty
et al expressed fo formula c suspect c color c black
investigate c method approx constructs approximation valid
inferences made formula user write following
rules doherty et al
suspect c color c black investigate c
suspect c investigate c color c black
suspect c investigate c

method therefore generalizes work doherty et al deriving rules automatically general first order theory
liu levesque propose another type reasoning open databases
consider simple form first order knowledge bases called proper knowledge bases
interesting feature knowledge bases easy obtain complete
characterization certainly true resp certainly false terminology
p ct

means one construct definition kb p
cf

kb p p holds every two valued extension
three valued interpretation encoded model kb levesque et al use
evaluation procedure three valued kleene evaluation check whether
query holds knowledge base mentioned earlier define normal form
n f queries prove kleene evaluation complete work
extends work sense take general first order knowledge base
approximately solve queries shown course since general
longer guarantee complete characterization certainly true false
longer guarantee completeness even query normal form n f another
difference work liu levesque work assume
fixed countable infinite domain assume fixed finite domain indeed
theoretical difference practice make difference since evaluation
method considers finite set domain elements determined front

conclusions future work
even computationally hard general specific instances might still
solved efficiently approximate methods important cannot solve


fivlaeminck vennekens denecker bruynooghe

every instance instances solve solve quickly computational
logic hard arise quite readily therefore surprising literature
contains numerous examples perform approximate reasoning tasks
logical formalisms specific contexts since many share
common ideas natural question whether seen instances
general method general language
presents method start propagation method fo
developed wittocx marien denecker symbolic expression wittocx
generalize method approximating p complete id satisfiability solving np importantly syntactic method
transforms id formula id formula affords us freedom
use shelf solver language perform approximative reasoning
moreover makes significantly easier update method adding removing
specific propagations
since method approximation necessarily incomplete nevertheless
experiments shown practice often manage solution
interesting topic future work determine classes method
shown complete
summary contributions extended logical
representation describing propagation process general method approximating
sat shown approximate inductive definitions use
approximate class useful sat id examined
existing approximation methods fit general framework

acknowledgments
work supported foundation flanders fwo vlaanderen projects
g g fund kuleuven project goa hanne
vlaeminck supported iwt vlaanderen

appendix example approximation
figure shows full approximation act example

appendix b proof theorem
proof first remark feferman showed four valued evaluation
formula interpretation simulated computing standard two valued
evaluation ct cf tf easy verify bottom rules approx
inductively encode evaluation split proof two parts first assume
three valued case bottom rules used e leaving
top rules change model definition proves first
part theorem together remark proves second part
theorem case three valued left prove
second part theorem holds four valued


fian approximative inference method

























































































































































































act
act
acf
act
acf
act
act

act

acf

acf










act

acf

act

acf

acf

acf

act

act

acf

act

acf

act

act

acf

cleanct
cleancf
acf

act

act

act

acf

cleancf
cleanct
act

act

acf

acf

act

cleancf
cleanct
acf

acf

act

cleancf
cleanct





































acf

acf

act

act

acf

act

acf

act

act
act


acf
acf


act
cleanct

ct
cf
acf
clean
cf
acf

initiallyclean

cf

initiallycleanct
ct
ct

act

act

act


ct
acf
acf


ct

acf

ct
acf
act


cleancf
cleancf
act

cleanct

cf
ct
clean
act

cf

acf

cf
act
initiallycleancf

cf

initiallycleanct
ct
act
clean
cleanct
w ipe
cleancf w ipe
acf

act
w ipe
act

cleanct
cf
acf
clean
cf

cf
act
clean
cf

cf
act

ct
clean
w ipe
cleancf w ipe
act

acf
w ipe
ct
act

cf

acf

act
act
act
act
ct
acf
act
cf
aact act




























acf

acf

ct
act

ct

ct
acf

ct

ct
acf

cf
clean
initiallycleanct
cleanct initiallycleancf
acf

cf
act
initiallyclean
acf


ct
act
clean
ct

cleanct
cf
acf
clean
cf

cf
act
clean
acf


cf
act

initiallycleancf
initiallycleanct
act

acf


























































































































































































figure approx w ipe act act taken example
let us assume three valued prove od approxbu
od approx contradiction assume predicate act
proof goes
cf
ct
analogously od approx od approxbu
act
preliminaries recalled model positive inductive definition
model
least fixpoint immediate consequence operator


fivlaeminck vennekens denecker bruynooghe

definition thus limit sequence applications immediate consequence
operator one prove see e g denecker ternovska
apply immediate consequence operator complete definition every step e
applying immediate consequence operator subset definition
longer exists immediate consequence operator give something gives
model suppose take sequence first apply bottom
rules bottom rules applicable try apply top rules
suppose act
first atom infer top rules sequence obviously
act
cannot
top level atom act

since top rules
case study type sub formula occurs e g assume subformula
formula fact act
true follows body
cf
cf
ct
ct
top rule true thus act
true
ct
since act
first atom inferred top rule since
ct
ct
ct
true must true since became true last step
sequence act
must true already means applying
cf
bottom rules act
true contradiction fact
three valued bottom rules encode four valued evaluation
proof analogous types subformulas
case four valued three valued longer case
bottom rules contribute model e od approxbu
od approx see consider following formula p q take
four valued interpretation p q one verify
cf
bottom rules approx infer act
p q ap q true
however top rules infer qcf true happens
inconsistency inferred certain subformula propagates back
parse tree however similar case study structure
cf
prove top formula od approxbu act

cf
bu clearly direct
od approx act
since since approx
encoding four valued evaluation concludes proof

appendix c proof proposition
proof take witness satisfiability app f first let us remark
open approx act
fact witness
satisfiability app f know model definition extending concf
tains act
construction approx must contain
act

assume first acf
true application theorem take
gives extends assumption
contradiction hence case holds
every extending thus witness satisfiability f
next assume act
true applying theorem time
gives extends hence


fian approximative inference method

case hold every extending means witness
satisfiability f

appendix proof theorem
key ingredient proof theorem following property appct pt
oct pt
immediate consequence operator tapp
ct pt two valued interpretations simulates


immediate consequence operator four valued interpretations original
definition made precise following lemma
definition pair interpretations j use j denote ct pt interpretation j ct pt
lemma j






proof let j



j tapp ct pt j


j let f tapp ct pt j first

f ct since f ct depends rules appct pt predicate ct
discard rules head pt left single copy
positive occurrences atoms replaced ct variant negative
ones pt variant implies evaluation bodies remaining
rules according j identical evaluation bodies
original rules j construction thus proving equality
proof remaining equality f pt j analoguous
proof theorem first recall given partial knowledge threevalued well founded resp appct pt least fixpoints operators


st resp st app ct pt
note since two valued abuse notation

rest proof denote two valued pair

latter operator rather peculiar sense actually juggling four
different interpretations original alphabet detail element
domain looks


ict
jct
j
ipt
jpt
ict jct interpret alphabet ct ipt jpt interpret pt apply

operator st app ct pt
obtain pair




ict
jct
j


ipt
jpt




fivlaeminck vennekens denecker bruynooghe



general definition st
construction obvious ict ipt depends
jct jpt however particular case operator exhibits even structure

operator stapp ct pt
j uses argument j fixed interpretation negative

occurrences remains constant throughout least fixpoint computation
positive occurrences appct pt contains two copies interact
negative occurrences occurrences pt predicate body rule
ct predicate head negative ones vice versa means
long keep interpretation negative occurrence fixed constant value j
discard
two copies interact consequently construct ict
rules pt predicate head means left rules whose head
ct predicate whose body contains positive occurrences ct predicates
depends j moreover
negative occurrences pt predicates therefore ict
pt
map symbols back original alphabet let
value ict
st orig j similarly
orig ct orig pt orig ict
pt

obtain


orig jct



orig ipt



orig ict


orig ipt
st


orig jct
st


orig jpt
st

words




orig ict
orig jpt
st


orig ipt
orig jct
st

orig ict orig jpt


orig ipt orig jct


consider construction well founded model appct pt
sequence form












ict
jct
ict
jct
ict
jct
ict
jct









ipt
jpt
ipt
jpt
ipt
jpt
ipt
jpt
let j well founded model construction original definition e
f
predicates p n def domain tuples dn p
j n j n st n j n n easy see
p

j j provides base case equation provides
ict

pt
j words
inductive step prove j ict
pt
well founded model construction original definition tracked elements
well founded model construction appct pt








ict

ict

ict

ict







jpt

jpt

jpt

jpt
diagonal j ct ct
precise element p lattice pairs interpretations therefore


fian approximative inference method



diagonal actually tracks construction greatest fixpoint st
combining two see l l g g least greatest
fixpoint respectively well founded model appct pt looks


l
g

g
l
note unique four valued stable fixpoint least greatest stable fixpoint
hence well founded fixpoint immediately concludes proof

appendix e proof proposition
lemma e given definition fo formula let subset
renamed copy consider definition
appct pt p ct p ct p opt pt oopen
assume three valued interpretation approximates
holds w f mi ct pt approximates e
w f ct pt p

p ct

w f ct pt p

p pt

proof prove induction well founded model construction alternative
one described found work denecker
vennekens assume induction sequence ii four valued def interpretations interpretation everything completely unknown
w f mi ct pt prove every ii sound approximation
trivially case n assume ik sound approximation
prove case ik need prove two things
cannot true ik p
true
first atom p ct
pt
cannot false ik false
second atom p
prove cases contradiction
start first case assume k th well founded induction step
incorrectly deduced e
certain predicate p domain tuple p ct

inferred k th step
exists model p since p ct
ct
p ct
already made
means body rule defining p
true previous step induction hypothesis tells us every model
semantics inductive definitions says
holds p
p contradiction assumption
next consider second case time assume k th well founded
inferred false exists model
induction step p pt

p alternative version well founded semantics
two ways domain atom become false indeed domain atom become false


fivlaeminck vennekens denecker bruynooghe

body defining rule already false part unfounded
set
made false body defining rule p pt already false
p pt
argument completely analogous one induction hypothesis

gives contradiction assumption left prove p pt
pt

cannot incorrectly made false application unfounded set rule p
made false application unfounded set rule means
set u atoms unknown ik made false bodies
rules defining atoms kleene evaluation bodies returns false possible
verify u contains pt atoms
let us take model obviously model

consider corresponding set u consisting domain atoms p
pt
pt
pt


p u every atom q body p set u induction
qpt
ik similarly every atom qct
hypothesis actually tells us q
pt
ct

k q
since qpt atoms occur
body p says q
positively qct negatively p pt follows interprets literals
u false way ik thus u unfounded set indeed
turning atoms u false make bodies defining rules false
contradiction assumption concludes
thus p
proof lemma

proof proposition proof proposition easy proof induction
construction well founded model lemma
soundness approx

references
baral c knowledge representation reasoning declarative solving
cambridge university press york ny usa
baral c gelfond kosheleva expanding queries incomplete databases
interpolating general logic programs j log program
baral c kreinovich v trejo r computational complexity
approximate presence incompleteness artif intell

belnap n useful four valued logic dunn j epstein g eds
modern uses multiple valued logic pp reidel dordrecht invited papers
fifth international symposium multiple valued logic held indiana
university bloomington indiana may
clark k l negation failure logic data bases pp plenum
press
denecker cortes calabuig bruynooghe arieli towards logical
reconstruction theory locally closed databases acm transactions database
systems


fian approximative inference method

denecker ternovska e logic non monotone inductive definitions
modularity properties lifschitz v niemela eds lpnmr vol
lncs pp springer
denecker ternovska e inductive situation calculus artificial intelligence

denecker ternovska e logic nonmonotone inductive definitions acm
transactions computational logic tocl article
denecker vennekens j well founded semantics algebraic theory
non monotone inductive definitions baral c brewka g schlipf j eds
lpnmr vol lncs pp springer
denecker vennekens j bond gebser truszczynski second
answer set programming competition erdem e lin f schaub eds
lpnmr vol lncs pp springer
doherty p magnusson szalas approximate databases support tool
approximate reasoning journal applied non classical logics
e giunchiglia l maratea cmodels homepage http www cs utexas
edu users tag cmodels html
fagin r generalized first order spectra polynomial time recognizable sets
complexity computation
feferman toward useful type free theories journal symbolic logic

gelfond lifschitz v stable model semantics logic programming
kowalski r bowen k eds iclp slp pp mit press
immerman n descriptive complexity springer verlag
kleene c introduction metamathematics van nostrand
liu levesque h j completeness reasoning incomplete
first order knowledge bases kr pp
marien wittocx j denecker idp framework declarative
solving search logic answer set programming sat pp
mcdermott critique pure reason computational intelligence
mitchell g ternovska e framework representing solving np
search veloso kambhampati eds aaai pp
aaai press mit press
niemela simons p syrjanen smodels system answer set programming proceedings th international workshop non monotonic reasoning
breckenridge colorado usa corr cs ai
palacios h geffner h compiling uncertainty away conformant
bounded width journal artificial intelligence jair



fivlaeminck vennekens denecker bruynooghe

son c tu p h gelfond morales r approximation action
theories application conformant baral c greco g leone
n terracina g eds lpnmr vol lncs pp springer
tamaki h sato unfold fold transformations logic programs iclp
pp
tseitin g complexity derivation propositional calculus slisenko
ed studies constructive mathematics mathematical logic ii pp
consultants bureau n
turner h polynomial length spans polynomial hierarchy jelia
pp
van fraassen b singular terms truth value gaps free logic journal philosophy
van gelder alternating fixpoint logic programs negation journal
computer system sciences
vlaeminck h wittocx j vennekens j denecker bruynooghe
approximate method solving fisher van der hoek w
konev b lisitsa eds jelia lecture notes computer science pp
springer
wittocx j finite domain symbolic inference methods extensions firstorder logic ph thesis department computer science k u leuven leuven
belgium
wittocx j denecker bruynooghe constraint propagation extended
first order logic corr abs
wittocx j marien denecker approximate reasoning first order logic
theories brewka g lang j eds kr pp aaai press




