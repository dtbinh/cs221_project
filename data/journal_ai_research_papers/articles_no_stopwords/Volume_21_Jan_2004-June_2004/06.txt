Journal Artificial Intelligence Research 21 (2004) 499-550

Submitted 08/03; published 04/04

Compositional Model Repositories via Dynamic Constraint
Satisfaction Order-of-Magnitude Preferences
Jeroen Keppens
Qiang Shen

JEROEN @ INF. ED . AC . UK
QIANGS @ INF. ED . AC . UK

School Informatics, University Edinburgh
Appleton Tower, Crichton Street, Edinburgh EH8 9LE, UK

Abstract
predominant knowledge-based approach automated model construction, compositional
modelling, employs set models particular functional components. inference mechanism
takes scenario describing constituent interacting components system translates
useful mathematical model. paper presents novel compositional modelling approach aimed
building model repositories. furthers field two respects. Firstly, expands application domain compositional modelling systems easily described terms
interacting functional components, ecological systems. Secondly, enables incorporation user preferences model selection process. features achieved casting
compositional modelling problem activity-based dynamic preference constraint satisfaction
problem, dynamic constraints describe restrictions imposed composition
partial models preferences correspond user automated modeller.
addition, preference levels represented use symbolic values differ
orders magnitude.

1. Introduction
Mathematical models form important aid understanding complex systems. help
problem solvers capture reason essential features dynamics systems.
Constructing mathematical models easy task, however, many disciplines contributed approaches automate it. Compositional modelling (Falkenhainer & Forbus, 1991; Keppens & Shen, 2001b) important class approaches automated model construction. uses
predominantly knowledge-based techniques translate high level scenario mathematical
model. knowledge base usually consists generic fragments models provide one
possible mathematical representation process occurs one components.
inference mechanisms instantiate knowledge base, search appropriate selection
model fragments, compose mathematical model. Compositional modelling
successfully applied variety application domains ranging simple physics, various
engineering problems biological systems.
present work aims compositional modelling approach building model repositories
ecological systems. ecological modelling literature, range models devised
formally characterise various phenomena occur ecological systems. example,
logistic growth (Verhulst, 1838) Holling predation (Holling, 1959) models describe
changes size population. former expresses changes due births deaths
latter changes due one population feeding another. compositional model repository aims
c
2004
AI Access Foundation. rights reserved.

fiK EPPENS & HEN

make (partial) models generally usable providing mechanism instantiate
compose larger models complex systems involving many interacting phenomena.
Thus, input compositional model repository scenario describing configuration
system modelled. sample scenario may include number populations various
predation competition relations them. output mathematical model, called
scenario model, representing behaviour system specified given scenario. set
differential equations describing changes population sizes aforementioned scenario
due births, natural deaths, deaths predation, available food supply competition
would constitute scenario model.
application domain poses three important new challenges compositional modelling.
Firstly, processes components ecological system represented
resulting composed model depend one another ways described. population dynamics example, models describing predation competition phenomena
two populations rely existence population growth model populations
involved phenomenon. inhibits conventional approach searching consistent adequate combination partial models, one component scenario.
approach provides adequate solution physical systems comprised components implementing particular functionality described one multiple partial
models. Although seminal work compositional modelling (Falkenhainer & Forbus, 1991)
recognised existence complex interdependencies model construction general,
provided partial solution it: conditions certain modelling choices
relevant specified manually knowledge base.
Secondly, domain ecology lacks complete theory constitutes adequate model.
existing compositional modellers based predefined concept model adequacy.
employ inference mechanisms guaranteed find model meets adequacy criteria.
However, criteria determine adequate ecological model may vary ecological
domains even ecologists require model within domain. Therefore,
compositional modeller requires facility define properties generated ecological
models must satisfy.
Thirdly, possible express criteria imposed scenario model terms
hard requirements. Often, ecological models describe mechanisms behaviours partially understood. cases, choice one model another becomes matter expert
opinion rather pure theory. Therefore, ecological domain, modelling approaches presumptions are, extent, selected based preferences. Existing compositional modellers
equipped deal user preferences paper presents first compositional
modeller incorporates them.
Generally speaking, three issues tackled paper means method
translate compositional modelling problem activity-based dynamic preference constraint
satisfaction problem (aDPCSP) (Keppens & Shen, 2002). aDPCSP integrates concept
activity-based dynamic constraint satisfaction problem (aDCSP) (Miguel & Shen, 1999; Mittal &
Falkenhainer, 1990) order-of-magnitude preferences (Keppens & Shen, 2002).
attributes domains aDPCSP correspond model design decisions, constraints describing restrictions imposed consistency requirements properties order-of-magnitude
preferences describing users preferences modelling choices. translation method brings
additional advantage compositional modelling problems solved means
500

fiC OMPOSITIONAL ODEL R EPOSITORIES

efficient aDCSP techniques. such, compositional modellers benefit recent future
advances constraint satisfaction research.
remainder paper organised follows. Section 2 introduces concept
aDPCSP, preference calculus suitable express subjective user preferences model
design decisions integrated general framework aDPCSPs. gives
solution algorithm aDPCSPs. Next, section 3 presents compositional model repository
shows aDPCSP employed automated model construction. theoretical
ideas illustrated means large example section 4, applying compositional
model repository population dynamics problems. Section 5 concludes paper summary
outline research.

2. Dynamic Constraint Satisfaction Order-of-Magnitude Preferences
section, preference calculus based order-of-magnitude reasoning introduced integrated activity-based dynamic constraint satisfaction problem (aDCSP) form aDCSP
order-of-magnitude preferences (aDPCSP). Then, solution algorithm aDPCSPs
presented. theory illustrated examples compositional modelling domain.
2.1 Background: Activity-based dynamic preference constraint satisfaction
hard constraint satisfaction problem (CSP) tuple hX, D, Ci,
X = {x1 , . . . , xn } vector n attributes,
= {Dx1 , . . . , Dxn } vector containing exactly one domain attribute X.
domain Dx set values {di1 , . . . , dini } may assigned attribute
corresponding domain.
C set compatibility constraints. compatibility constraint c {xi ,...,xj } C defines
relation subset domains Dxi , ..., Dxj , hence c{xi ,...,xj } Dxi . . . Dxj .
solution hard constraint satisfaction problem tuple hx 1 : dx1 , . . . , xn : dxn

attribute assigned value domain: xi X, dxi Dxi ,
compatibility constraints satisfied: x{xi ,...,xj } C, hdxi , . . . , dxj c{xi ,...,xj } .
activity-based dynamic CSP (aDCSP), originally proposed Mittal Falkenhainer
(1990), extends conventional CSPs notion activity attributes. aDCSP,
attributes necessarily assigned solution, active ones. such, attribute
either active assigned value inactive:

xi X, dxi Dxi , xi : dxi active(xi )

activity attributes aDCSP governed activity constraints enforce
assignments attributes, assignment another attribute relevant possible. information
important dictates attributes value must searched,
set compatibility constraints must satisfied. Clearly, compatibility constraints
501

fiK EPPENS & HEN

c{xi ,...,xj } C attributes xi , . . . , xj active must satisfied, hard CSP
sub-type aDCSP attributes always active.
summary, activity-based dynamic constraint satisfaction problem (aDCSP) tuple
hX, D, C, Ai,
hX, D, Ci hard CSP,
set activity constraints. activity constraint restricts sets attribute-value
assignments attribute active inactive:
axi ,{xj ,...,xk } Dxj . . . Dxk {active(xi ), active(xi )}
xi 6 {xj , . . . , xk }.
solution activity-based dynamic constraint satisfaction problem tuple hx 1 :
dx1 , . . . , xl : dxl
attributes part solution assigned value domain: x
{x1 , . . . , xl }, dxi Dxi ,
activity constraints satisfied:





axi ,{xj ,...,xk } A, xj 6 {x1 , . . . , xl } . . . xk 6 {x1 , . . . , xl }

xi {x1 , . . . , xl } hdxj , . . . , dxk , active(xi )i axi ,{xj ,...,xk }

xi 6 {x1 , . . . , xl } hdxj , . . . , dxk , active(xi )i axi ,{xj ,...,xk }

compatibility constraints satisfied:
c{xi ,...,xj } C, active(xi ) . . . active(xj ) hdxi , . . . , dxj c{xi ,...,xj }
2.2 Order-of-magnitude preferences (OMPs)
Although aDCSP capture hard constraints decisions given problem well
dynamically changing solution space (as described activity constraints), representation scheme employs take account preferences users may possible
alternative value assignments. Therefore, work extended allow preference information
attached attribute-value assignments. way achieved depends
representation reasoning mechanisms underlying preference calculus. general, preference calculus defined tuple h , , 4i where:


set preferences,

commutative, associative operator closed ,
4 forms partial order, is, reflexive, anti-symmetric transitive relation defined
.
4 reflexive, antisymmetric transitive, comparing preferences 4 relation
yields one four possible results:
502

fiC OMPOSITIONAL ODEL R EPOSITORIES

Two preferences P1 , P2
P2 4 P 1 .

equal one another (denoted P1 = P2 ) iff P1 4 P2

preference P1
strictly greater preference P2
P1 64 P2 P2 4 P1 .

(denoted P1 P2 ) iff

preference P1
strictly smaller preference P2
P1 4 P2 P2 64 P1 .

(denoted P1 P2 ) iff

Two preferences P1 , P2
P2 64 P1 .

incomparable one another (denoted P1 ?P2 ) iff P1 64 P2

Thus, activity-based dynamic preference constraint satisfaction problem (aDPCSP) tuple
hX, D, C, A, h , , 4i, P
hX, D, C, Ai aDCSP,
h , , 4i preference calculus,
P mapping Dx1 . . . Dxn 7
preferences.

individual attribute-value assignments

preferences attached attribute-value assignments express relative desirability
assignments. aim aDPCSP find solution highest combined preference.
is, given aDPCSP hX, D, C, A, h , , 4i, P i, solution hxi : dxi , . . . , xj : dxj
aDCSP hX, D, C, Ai solution hxk : dxk , . . . , xl : dxl hX, D, C, Ai exists
P (xi : dxi ) . . . P (xj : dxj ) P (xk : dxk ) . . . P (xl : dxl ) solution aDPCSP.
section, preference calculus introduced extend aDCSP aDPCSP.
calculus illustrated examples compositional modelling domain.
2.2.1 R EPRESENTATION



OMP

Technically, OMPs combinations so-called basic preference quantities (BPQs),
primitive units preference utility valuation associated possible design decisions.
often difficult evaluate BPQs numerically, ordered relative one another employing similar ordering relations employed relative order-of-magnitude calculi (Dague,
1993a, 1993b).
Let set BPQs respect particular decision problem. BPQs
ordered respect one another two levels granularity, two relations <. First,
partitioned orders magnitude, ordered . Then, BPQs within order
magnitude ordered <. Formally, order-of-magnitude ordering BPQs tuple
hO, i, = {O1 , . . . , Oq } partition irreflexive transitive binary
relation O. subset BPQs said order magnitude . Similarly,
within-magnitude ordering set BPQs tuple hO, <i, order magnitude
< irreflexive transitive binary relation O.
illustrate ideas, consider problem constructing ecological model describing
scenario containing number populations. Let populations parasites others
hosts parasites. Also, assume certain populations compete others scarce
resources. order construct scenario model, compositional modeller must make number
503

fiK EPPENS & HEN

b15 : Lotka-Volterra
predation model

b13 : Holling
predation model

<

<
b11 : Rogers
host-parasitoid model

<
b14 : Thomsons
host-parasitoid model

b12 : Nicholson-Baileys
host-parasitoid model

<

O1 (host-parasitoid phenomenon)



b22 : exponential
growth model

<

<
b21 : logistic
growth model


b23 :
growth model

<

b31 : competition
phenomenon

O3: (competition phenomenon)

O2 (population growth phenomena)

Figure 1: Sample space BPQs
model design decisions: population growth, host-parasitoid competition phenomena
relevant, types model best describe phenomena.
Figure 1 shows sample space BPQs correspond selection types model.
sake illustration, presumption made quality scenario model depends
inclusion types model, rather inclusion exclusion phenomena. Apart
b23 b31 , BPQs correspond standard textbook ecological models 1 . BPQ b23 stands
use population growth model implicit another population growth model (the LotkaVolterra model, instance, implicitly includes concept growth). Finally, BPQ b 31
preference associated competition model (say, one included knowledge base).
9 BPQs sample space partitioned 3 orders magnitude. relation
orders orders magnitude: O2 O1 O2 O3 . binary < relation orders individual BPQs within order magnitude. BPQ ordering within 1 , instance, Rogers
host-parasitoid model (b11 ) preferred Nicholson Bailey (b12 ) Holling
predation model (b13 ). latter two models compared one another,
preferred Lotka-Volterra model. Furthermore, Thompsons host-parasitoid model
less preferred Nicholson Bailey, compared Lotka-Volterra
Holling models.
2.2.2 C OMBINATIONS



OMP

definition, OMPs combinations BPQs. implicit value OMP p equals combination b1 . . . bn constituent BPQs b1 , . . . , bn . property allows OMPs defined
functions OMP P = b1 . . . bn function fP : 7 : b fP (b)
1. precise, BPQs b11 , b12 , b13 , b14 , b15 , b21 b22 respectively correspond inclusion Rogers
host-parasitoid model (1972), host-parasitoid model Nicholson Bailey (1935), Hollings predation model
(1959), Thompsons host-parasitoid model (1929), predation model Lotka Volterra (1925, 1926), logistic
population growth model (Verhulst, 1838) exponential population growth model (Malthus, 1798).

504

fiC OMPOSITIONAL ODEL R EPOSITORIES

set BPQs, set natural numbers fP (b) equals number occurrences b
b1 , . . . , bn .
example, let Pmodel denote OMP associated scenario model contains three
logistic population growth models (b21 ), two Holling predation model (b13 ) one competition
model (b31 ). Therefore,
Pmodel = b21 b21 b21 b13 b13 b31
hence:



3



2
fPmodel (b) =

1



0

b = b21
b = b13
b = b31
otherwise

describing OMPs functions, concept combinations OMPs becomes clear.
two OMPs P1 P2 , combined preference P1 P2 defined as:
fP1 P2 :

7

: b fP1 P2 (b) = fP1 (b) + fP2 (b)

Note combination operator assumed commutative, associative strictly monotonic (P P P ). latter assumption made better reflect ideas underpinning conventional utility calculi (Binger & Hoffman, 1998).
2.2.3 PARTIAL ORDERING OMP
Based combinations OMPs, partial order 4 OMPs computed exploiting constituent BPQs OMPs considered. partial order implies comparison
pair OMPs either returns equal preference (=), smaller preference (), greater preference
() incomparable preference (?). calculus developed assuming following:
Prioritisation: combination BPQs never order magnitude greater constituent BPQs. is, given set BPQs belonging order magnitude
{b1 , b2 , . . . , bn } O1 BPQ b O2 belonging higher order magnitude, i.e.
O1 O2 ,
b1 b2 . . . bn b
respect ongoing example, means BPQ taken order magnitude O1 preferred combination BPQs taken O2 . words, choice
model describe host-parasitoid phenomenon considered important
choice population growth model (see Figure 1).
Prioritisation means distinctions higher orders magnitude considered
significant lower orders magnitude. Consider number BPQs
b1 , . . . , bm1 , bm , . . . , bn taken one order magnitude O1 pair BPQs {b, b0 }
taken order magnitude higher O1 . b < b0 , (irrespective
ordering BPQs taken O1 )
b1 . . . bm1 b bm . . . bn b0
505

fiK EPPENS & HEN

Strict monotonicity: Even though distinctions higher orders magnitude significant, distinctions lower orders magnitude negligible. is, given OMP
P two BPQs b1 b2 taken order magnitude b1 < b2 ,
(irrespective orders magnitude BPQs constitute P )
b1 P b2 P
instance, preference ordering depicted Figure 1 shows scenario model
Rogers host-parasitoid model two logistic predation models preferred one
Rogers host-parasitoid model two exponential predation models:
b11 b22 b22 b11 b21 b21
Note departure conventional order-of-magnitude reasoning. OMPs
associated two (partial) outcomes contain equal BPQs higher order magnitude,
usually desirable compare solutions terms (less important) constituent
BPQs lower orders magnitude, example illustrated. However, conventional orderof-magnitude reasoning techniques handle this.
Partial ordering maintenance: Conventional order-of-magnitude reasoning motivated
need abstract descriptions real-world behaviour, whereas OMP calculus motivated incomplete knowledge decision making. opposed conventional orderof-magnitude reasoning real numbers, OMPs necessarily totally ordered.
implies that, user states, example, b1 < b2 < b b3 < b4 < b,
explicit absence ordering information BPQs {b 1 , b2 } {b3 , b4 }
means user unable compare (e.g. entirely different things).
Consequently, b1 b2 would deemed incomparable b3 b4 (i.e. b1 b2 ?b3 b4 ), rather
roughly equivalent.
above, derived given two OMPs P1 P2 order magnitude O,
P1 less equally preferred P2 respect order magnitude (denoted P1 4O P2 )
provided
bi O, fP1 (bi ) +

X

bj O,bi <bj


fP1 (bj ) fP2 (bi ) +

X

bj O,bi <bj

fP2 (bj )



Thus, comparing two OMPs within order magnitude yield four possible results:
P1 less preferred P2 respect (P1 P2 ) iff (P1 4O P2 ) (P2 4 P1 ),
P1 preferred P2 respect (P1 P2 ) iff (P1 4O P2 ) (P2 4 P1 ),
P1 equally preferred P2 respect (P1 =O P2 ) iff (P1 4O P2 ) (P2 4 P1 ),

P1 incomparable P2 respect (P1 ?O P2 ) iff (P1 4O P2 ) (P2 4 P1 ).
506

fiC OMPOSITIONAL ODEL R EPOSITORIES

ongoing example Figure 1, instance, preference scenario model
Rogers host-parasitoid model Holling predation model P 1 = b11 b13 preference
scenario model Rogers host-parasitoid model Lotka-Volterra predation model
P2 = b11 b15 . latter model less equally preferred former within
host-parasitoid order magnitude (O1 ), i.e. P2 4O1 P1 ,
fP2 (b11 ) = 1 1 = fP1 (b11 ),
fP2 (b11 ) fP2 (b12 ) = 1 1 = fP1 (b11 ) fP1 (b12 ),
fP2 (b11 ) fP2 (b13 ) = 1 2 = fP1 (b11 ) fP1 (b13 ),
fP2 (b11 ) fP2 (b12 ) fP2 (b14 ) = 1 1 = fP1 (b11 ) fP1 (b12 ) fP1 (b14 ),
fP2 (b11 ) fP2 (b12 ) fP2 (b13 ) fP2 (b14 ) = 2 2 = fP1 (b11 ) fP1 (b12 ) fP1 (b13 ) fP1 (b14 ).
Similarly, established reverse, i.e. P1 4O1 P2 , true. Therefore, latter
scenario model less preferred former within O1 , i.e. P2 O1 P1 .
result generalised given two OMPs P 1 P2 , P1 less
equally preferred P2 (denoted P1 4 P2 )
Oi O, (P1 4Oi P2 ) (Oj O, Oi Oj P1 Oj P2 )
generally, relations , , = ? derived manner
relation 4 , , =O ?O 4O .
illustrate utility orderings, consider scenario one predator population
feeds two prey populations two prey populations compete scarce resources.
following two plausible scenario models scenario:
Model 1 contains two Holling predation models three logistic population growth models,
preference P1 = b13 b13 b21 b21 b21 .
Model 2 contains one competition model, two Holling predation models, two logistic population growth models exponential population growth model, preference
P2 = b13 b13 b21 b21 b22 b31 .
demonstrated earlier, shown P1 =O1 P2 , P1 O2 P2 , P1 O3 P2 .
relations follows P1 4 P2
O1 : P1 4O1 P2 since P1 =O1 P2 ,
O2 : exists order magnitude O3 O3 O2 P1 O3 P2 ,
O3 : P1 4O3 P2 since P1 O3 P2 .
reverse true, concluded scenario model 2 preferred scenario model
1.
2.3 Solving aDPCSPs
section presents basic algorithm solving aDPCSPs. Although OMPs used
work, algorithm take aDPCSP provided employs preference calculus
507

fiK EPPENS & HEN

commutative, associative monotonic combination operator. However, use OMPs provides
convenient way specifying incomplete preference information.
aDPCSP similar valued CSPs presented Schiex, Fargier Verfaillie (1995)
semiring based CSPs (Bistarelli, Montanari, & Rossi, 1997). However, extends
approaches activity constraints involves different underlying presumptions valuation
structure. preference valuations work allowed ordered partially, opposed
valued CSPs.
aDPCSP represents important type constraint satisfaction optimisation problem (Tsang,
1993). order tackle optimisation preferences A* type algorithm employed (Hart,
Nilsson, & Raphael, 1968; Raphael, 1990). A* algorithms known efficient terms
total number nodes explored effort find optimal solutions, given amount
information. downside, exponential space complexity. Naturally, number
alternative approaches could explored, including conventional constraint-based solving
methods depth first branch bound search. However, use A*-like algorithm
sufficient solving aDPCSPs domain present interest. particular, algorithm 1
implements A* search strategy capable handling activity constraints, involves
use basic CSP techniques constraint propagation backtracking.
A* algorithm maintains explored attribute-value assignments means priority
queue Q nodes. node n Q corresponds set attribute-value assignments: solution(n).
search proceeds number iterations. iteration, node n taken Q,
replaced nodes extend solution(n) additional attribute-value assignment.
specifically, node n Q, set Xu (n) remaining active unassigned attributes
maintained. iteration, possible assignments first attribute x X u (n),
n node taken Q current iteration, processed. every assignment x :
consistent solution(n) (i.e. solution(n) {x : d}, C 0 ), new child node n 0 ,
solution(n0 ) = solution(n) {x : d} Xu (n0 ) = Xu (n) {x}, created added Q.
activity constraints processed via propagation rather constraint satisfaction. Whenever node n taken Q Xu (n) empty, activity constraints fired order
obtain new set active unassigned attributes. is, X u (n) assigned
{xi | solution(n), ` active(xi )} Xa (n)
Xa (n) represents active, already assigned attributes node n.
priority queue Q, nodes maintained means two heuristics: committed preference
CP (n) potential preference P P (n). Here, given node n,
CP (n) = x:dsolution(n) P (x : d)
P P (n) = CP (n) (xXnd (n) max P (x : d))
dDx

Xnd (n) set unassigned attributes still activated given partial assignment solution(n) (as indicated previously, actual implementation employs assumption-based
truth maintenance system (de Kleer, 1986) efficiently determine attributes activity
longer supported). words, CP (n) preference associated partial attributevalue assignment node n P P (n) CP (n) combined highest possible preference
assignments taken values domains attributes X nd (n). Thus, P P (n)
508

fiC OMPOSITIONAL ODEL R EPOSITORIES

Algorithm 1:

SOLVE(X, D, C, A, P )

n new node;
solution(n) {};
Xu (n) {xi | {}, ` active(xi )};
Xa (n) {};
CP (n) 0;
P P (n) xX maxdD(x) P (x : d);
Q createOrderedQueue();
enqueue(Q, n, P P (n), CP (n)); Q 6=

n dequeue(Q);





Xu (n)

6=




x first(Xu (n));




PROCESS(x, n, C, A, P, Q);


Xu (n) {xi | solution(n), ` active(xi )} Xa (n);







Xu (n) =






nnext first(Q);












CP (n) P P (nfirst)





return (solution(n));
else













else P P (n) CP (n);







enqueue(Q, n, P P (n), CP (n));










x first(Xu (n));



else
PROCESS(x, n, C, A, P, Q);
procedure PROCESS(x, nparent , C, A, P, Q)

D(x)
solution(n


parent ) {x : d}, C 0


nchild new node;





solution(n ) solution(n



child
parent ) {x : d};




X deactivated(solution(n ), X(n




child
parent ));






Xnd (nchild ) Xnd (nparent ) {x} Xd ;

Xa (nchild ) Xa (nparent ) {x};






Xu (nchild ) Xu (nparent ) {x};









CP (nchild ) CP (nparent ) P (x : d);








P P (nchild ) CP (nchild ) xXnd (n) maxdD(x) P (x : d);




enqueue(Q, nchild , P P (nchild ), CP (nchild ));

computes upper boundary preference aDPCSP solution includes partial
attribute-value assignments corresponding n.
following theorem shows algorithm 1 guaranteed find set attribute-value
pairs highest combined preferences, within set solutions satisfy constraints.
Theorem 1 SOLVE(X, D, C, A, P ) admissible
Proof: SOLVE(X, D, C, A, P ) A* algorithm guided heuristic function P P (n) = CP (n)
h(n), CP (n) actual preference node n h(n) = xXnd (n) maxdDx P (x : d).
follows previous discussion h(n) greater equal combined preference
value-assignment unassigned attributes consistent partial solution n.
algorithm, nodes n maintained priority queue descending order P P (n). Let
distance function reverses preference ordering (P 1 ) (P2 ) P1 P2 .
SOLVE (X, D, C, A, P ) described A* algorithm, nodes n priority
509

fiK EPPENS & HEN

queue Q ordered ascending order (P P (n)), (P P (n)) = (CP (n)) (h(n))
(h(n)) lower bound distance n optimal solution. Therefore, following work Hart, Nilsson Raphael (1968), SOLVE(X, D, C, A, P ) admissible
algorithm, guaranteed find solution minimal (P (S)) maximal P (S).
illustrate algorithm 1, consider problem finding ecological model describes
behaviour two populations, one predates other. aDPCSP constructed
compositional modelling problem following attributes domains. Note section
3 demonstrates attributes, domains constraints problem constructed
automatically section 4 illustrates ideas context larger example.

X = {x1 , x2 , x3 , x4 , x5 , x6 }
Dx1 = {yes, no}
Dx2 = {yes, no}
Dx3 = {yes, no}
Dx4 = {other, logistic}
Dx5 = {other, logistic}
Dx6 = {Holling, Lotka-Volterra}
attributes x1 , x2 x3 respectvely describe relevance following phenomena:
change size predator population, change size prey population
predation prey predator. attributes x4 x5 represent choice type
population growth model. Two types models incorporated problem: logistic
one other. Finally, attribute x6 associated choice model type predation
phenomenon. Here, two types model, Holling model Lotka-Volterra model,
included.
Holling predation model presumes logistic models employed describe
population growth, Lotka-Volterra Model incorporates population growth
model, combinations assignments x4 , x5 , x6 restricted. Hence, aDPCSP
contains set C = {c{x4 ,x6 } , c{x5 ,x6 } } compatibility constraints, with:
c{x4 ,x6 } = {hx4 : other, x6 : Lotka-Volterrai, hx4 : logistic, x6 : Hollingi}
c{x5 ,x6 } = {hx5 : other, x6 : Lotka-Volterrai, hx5 : logistic, x6 : Hollingi}
Furthermore, model type predator/prey growth must selected corresponding population growth phenomenon deemed relevant. Also, model type predation must selected population growth phenomena predation phenomenon deemed relevant (because ecological models describing predation rely submodels
describing population growth predator prey). Hence, aDPCSP contains set
= {ax4 ,{x1 } , ax5 ,{x2 } , ax6 ,{x1 ,x2 ,x3 } } activity constraints, with:
510

fiC OMPOSITIONAL ODEL R EPOSITORIES

ax4 ,{x1 } = {hx1 : yes, active(x4 )i, hx1 : no, active(x4 )i}
ax5 ,{x2 } = {hx2 : yes, active(x5 )i, hx2 : no, active(x5 )i}
ax6 ,{x1 ,x2 ,x3 } = {hx1 : yes, x2 : yes, x3 : yes, active(x4 )i, hx1 : yes, x2 : yes, x3 : no, active(x4 )i,
hx1 : yes, x2 : no, x3 : yes, active(x4 )i, hx1 : yes, x2 : no, x3 : no, active(x4 )i,
hx1 : no, x2 : yes, x3 : yes, active(x4 )i, hx1 : no, x2 : yes, x3 : no, active(x4 )i,
hx1 : no, x2 : no, x3 : yes, active(x4 )i, hx1 : no, x2 : no, x3 : no, active(x4 )i}
Finally, let preference calculus consist two orders magnitude growth Opredation ,
Ogrowth Opredation ,
Ogrowth ={pother , plogistic } plogistic < pother
Opredation ={pHolling , pLotka-Volterra } pLotka-Volterra < pHolling
OMP assignments follows:
P (x4 : other) = P (x5 : other) =pother
P (x4 : logistic) = P (x5 : logistic) =plogistic
P (x6 : Holling) =pHolling
P (x6 : Lotka-Volterra) =pLotka-Volterra
applied problem, algorithm 1 initialises search creating node n 0 , where:
Xu (n0 ), set currently active attributes, initialised {x1 , x2 , x3 }, activity
attributes depend attribute-value assignments.
Xa (n0 ) CP (n0 ) initialised empty set 0 respectively, since attributes
assigned yet.
Finally, P P (n0 ) equals pother pother pHolling combination highest
OMPs associated domain.
initial node enqueued Q. Next, algorithm proceeds number iterations.
iteration, node potential (as measured P P CP ) dequeued,
children generated enqueued Q. nodes created way depicted
Figure 2. number subscript node ni indicates order node generation,
thick arrows show order search space explored.
Note three important features algorithm could clearly demonstrated within Figure 2. Firstly, node n5 , initial set unassigned attributes exhausted:
Xu (n5 ) = {}. Therefore, activity constraints fired n 5 explored. n5 corresponds assignment {x1 : yes, x2 : yes, x3 : yes}, remaining attributes activated
Xu (n5 ) reset {x4 , x5 , x6 }.
Secondly, node n12 corresponds assignment (active) attributes consistent
activity compatibility constraints:
{x1 : yes, x2 : yes, x3 : yes, x4 : other, x5 : other, x6 : Lotka-Volterra}
511

fix1
yes

n1

P P = pother pother pHolling
CP = 0



n2
P P = pother
CP = 0

x2
yes

n3

n4

P P = pother pother pHolling
CP = 0



P P = pother
CP = 0

x3
n5

yes

P P = pother pother
CP = 0

512

P P = pother pother pHolling
CP = 0

K EPPENS & HEN



n6

x4


n7

P P = pother pother pHolling
CP = pother

n8

logistic

P P = plogistic pother pHolling
CP = plogistic

x5
n9



x5

n10

P P = pother pother pHolling
CP = pother pother

logistic

P P = pother plogistic pHolling
CP = pother plogistic

x6
n11

n12

Holling
inconsistent

P P = plogistic pother pHolling
CP = plogistic pother

x6
Lotka-Volterra

P P = pother pother pLotka-Volterra
CP = pother pother pLotka-Volterra

n13

n16

logistic

P P = plogistic plogistic pHolling
CP = plogistic plogistic

x6

n14

Holling
inconsistent



n15

Lotka-Volterra
inconsistent

n17

x6

n18

Holling
inconsistent

Lotka-Volterra
inconsistent

Figure 2: Search space explored algorithm 1 solving sample aDPCSP

n19

Holling

P P = plogistic plogistic pHolling
CP = plogistic plogistic pHolling

n20

Lotka-Volterra
inconsistent

fiC OMPOSITIONAL ODEL R EPOSITORIES

assignment solution aDPCSP, corresponding preference guaranteed maximal (and, assignment is, fact, optimal). creation n 12 , priority queue Q looks follows (the ordering n2 n4 may vary since P P (n2 ) = P P (n4 )
CP (n2 ) = CP (n4 )):
{n10 , n8 , n12 , n6 , n2 , n4 }
Therefore, next node explored (after n9 subsequent creation n12 ) n10 .
Thirdly, node n19 correspond optimal solution. creation, Q equals:
{n19 , n12 , n6 , n2 , n4 }
consequence, n19 dequeued next iteration. children n 19 created
(Xu (n19 ) = activity constraints activate attributes), n 19 retained solution.
user interested finding multiple alternative solutions, search may proceed
Q contains nodes P P value smaller maximum preference
first solution. case, P P (n12 ) CP (n19 ) hence, one solution
aDPCSP.

3. Compositional Model Repositories
aDPCSPs discussed previous section provide foundation development
compositional model repositories. section specifies problem compositional model
repository built solve shows translated aDPCSP, hence resolved
using proposed aDPCSP solution algorithm.
3.1 Background: assumption based truth maintenance
ATMS mechanism keeps track piece inferred information depends
presumed information facts inconsistencies arise. ATMS, piece
information used derived problem solver stored node. Certain pieces information
known true cannot inferred pieces information, yet plausible
inference may drawn them. nodes categorised special type referred
assumptions.
Inferences pieces information maintained within ATMS dependencies corresponding nodes. extended form (see de Kleer, 1988; Keppens, 2002),
ATMS take inferences, called justifications form n . . . nj nk . . . nl nm ,
ni , . . . , nj , nk , . . . , nl , nm nodes problem solver interested in. ATMS
take specific type justification, called nogood, leads inconsistency,
form ni . . . nj nk . . . nl (meaning least one statements
{ni , . . . , nj , nk , . . . , nl } must false). ATMS, nogoods represented justifications special node, called nogood node.
Based given justifications nogoods, ATMS computes label (nonassumption) node. label set environments environment set assumptions.
particular, environment E depicts possible world assumptions E true.
Thus, label L(n) node n describes possible worlds n true. label
computation algorithm ATMS guarantees label is:
513

fiK EPPENS & HEN

Sound - assumptions environment within label node true sufficient
condition derive node:
E L(n), [(ni E ni ) (ni E ni )] ` n
Consistent - environment label node, nogood node, describes
impossible world:
E L(n), [(ni E ni ) (ni E ni )] 0
Minimal - label contain possible worlds less general one
possible worlds contains (i.e. environments supersets environments
label):
E L(n)@E 0 L(n), E 0 E
Complete - label node, nogood node, describes possible worlds
node inferred:
E,[(ni E ni ) (ni E ni ) ` n]
E 0 L(n), [(ni E 0 ni ) (ni E 0 ni ) ` n]
3.2 Knowledge Representation
knowledge-based approach, building compositional modeller requires formalism specification inputs, outputs knowledge base. work developed
loosely based compositional modelling language (Bobrow, Falkenhainer, Farquhar, Fikes,
Forbus, Gruber, Iwasaki, & Kuipers, 1996), proposed standard knowledge representation formalism compositional modellers, adapted meet challenges ecological compositional
modelling problems identified introduction.
3.2.1 P RELIMINARY

CONCEPTS

primitive constructs compositional modeller participants, relations assumptions. subsection summarises concepts explains represented herein.
Participants2 refer objects interest, involved scenario model.
participants may real-world objects conceptual objects, variables express
features real-world objects mathematical model. instance, population species
typical example real-world object, variable expresses number individuals
species forms example conceptual object. natural group objects share
something common classes. Participants herein grouped participant classes,
representing set participants share certain common features. class given
name easy reference.
Relations describe participants related one another. participants,
relations represent real-world relationship, as:
2. previous work compositional modelling refers individuals quantities, names
would suit present application. Ecological models typically describe behaviour populations rather
individuals often hard distinguish quantities.

514

fiC OMPOSITIONAL ODEL R EPOSITORIES

predation(frog, insect)

(1)

relations may conceptual nature, equation (2), describes important
textbook model logistic population growth (Ford, 1999):

size
change = parameter size (1
)
dt
capacity

(2)

consistent compositional modelling approaches, paper employs LISPstyle notation relations. such, two sample relations become:

(predation frog insect)

(1)

(d/dt change (* change-rate size (- 1 (/ size capacity))))

(2)

Assumptions form special type relation employed distinguish alternative
model design decisions. Internally, assumptions stored form assumption nodes
ATMS (see section 3.3.1), knowledge base, assumptions appear relations
specific syntax semantics.
Two types assumptions employed article. Relevance assumptions state phenomena included excluded scenario model. Typical examples phenomena
population growth predation phenomena. general format relevance assumption
shown (3). phenomenon incorporated scenario model describing relevance assumption identified hnamei specific subsequent participants relations.
example, relevance assumption (4) states growth participant ?population
included model.

(relevant

hnamei

[{hparticipanti} | hrelationi])

(relevant growth ?population)

(3)
(4)

Model assumptions specify type model utilised describe behaviour certain
participant relation. Typical examples model types include exponential (Malthus, 1798)
logistic (Verhulst, 1838) model types population growth. formal specification
model assumption given (5). Often hnamei (5) corresponds name known
(partial) model phenomenon process described. example (6) states
population ?population modelled using logistic approach.
(model

[hparticipanti | hrelationi]

hnamei)

(model ?population logistic)

515

(5)
(6)

fiK EPPENS & HEN

Predators
natality

mortality
mortalityrate

natalityrate
preyrequirement

capacity

Prey
mortality

natality

natalityrate

predation

mortalityrate
capacity
searchrate
preyhandlingtime

Figure 3: Stock flow diagram predator prey scenario model
3.2.2 CENARIOS SCENARIO MODELS
formalised Keppens Shen (2001b), compositional modeller takes two inputs produces one output. first input representation (which model) describes
system interest means accessible formalism. model, normally consists
(mainly) real-world participants interrelationships, called scenario. second input
task description. formal description criteria adequacy output
evaluated. output new model describes scenario detailed formalism,
usually set variables equations, model-based reasoner employ readily.
model, normally contains conceptual participants interrelationships, called scenario
model. aim compositional modeller translate scenario scenario model,
means task description.
work, model formally defined tuple hP, Ri, P set participants
R set relations participants P . definition applies scenario
scenario model. typical example scenario description predator population, prey
population predation relation predator prey. scenario model
hP, Ri with:
P = {predator, prey}
R = {(predation predator prey)}
aim compositional model repository translate scenario scenario model.
Within work, systems dynamics stock-flow formalism (Forrester, 1968) ordinary differential equations (ODEs) employed modelling formalisms. example, scenario
model corresponds scenario depicted Figure 3. Formally, scenario model
another model hP, Ri case
P = {Npredator , Bpredator , Dpredator , Nprey , Bprey , Dprey , Pprey ,
bpredator , bprey , dpredator , dprey , Cpredator , Cprey ,
s(prey,predator) , t(prey,predator) , r(predator,prey) }
516

fiC OMPOSITIONAL ODEL R EPOSITORIES

Symbol
Npredator , Nprey
Bpredator , Bprey
Dpredator , Dprey
Pprey
bpredator , bprey
dpredator , dprey
Cpredator , Cprey
s(prey,predator)
t(prey,predator)
r(predator,prey)

Variable name
number predators, prey
natality predators, prey
mortality predators, prey
predation prey
natality-rate predators, prey
mortality-rate predators, prey
capacity predators, prey
search-rate
prey-handling-time
prey-requirement

Table 1: Variables stock flow diagram mathematical model
R={


Npredator = Bpredator Dpredator ,
dt

Nprey = Bprey Dprey Pprey ,
dt
Bpredator = bpredator Npredator ,
Bprey = bprey Nprey ,
Dpredator = dpredator Npredator

Npredator
,
Cpredator

Nprey
,
Cprey
s(prey,predator) Nprey Npredator
=
,
1 + s(prey,predator) Nprey t(prey,predator)

Dprey = dprey Nprey
Pprey

Cpredator = r(predator,prey) Nprey ,
Cprey = Nprey }
relation variables mathematical model used stock-flow diagram given table 1. Generally speaking, stock-flow diagrams graphical representations
systems (ordinary qualitative) differential equations. automated modelling literature
general, engineering physical systems modelling particular, sophisticated representational formalisms developed enable identification mathematical models
behaviour dynamic systems observations. Examples include bond graphs (Karnopp, Margolis, & Rosenberg, 1990) generalised physical networks (Easley & Bradley, 1999). However,
potential benefits advanced formalisms exploited here, remain
interesting future work. Instead, stock-flow diagrams employed throughout paper
far commonly used ecological modelling (Ford, 1999).
often possible construct multiple scenario models single given scenario,
task specification employed guide search appropriate one(s). work,
scenario models selected basis hard constraints user preferences. hard constraints stem restrictions imposed compositionality representational framework (see
section 3.2.3) properties scenario model required satisfy (see section 3.2.3).
517

fiK EPPENS & HEN

Name
Addition
Multiplication
Selection

Syntax (infix notation)
?var = C + (formula)
?var = C (formula)
?var = C (formula)
?var = C (formula)
?var = C if,p (antecedent, formula)
?var = C else (formula)

Syntax (prefix notation)
(== ?var (C-add formula))
(== ?var (C-sub formula))
(== ?var (C-mul formula))
(== ?var (C-div formula))
(== ?var (C-if antecedent formula :priority p))
(== ?var (C-else formula)

Table 2: Composable functors composable relations
user preferences express users subjective view modelling approaches
appropriate context current scenario (see section 2.2).
3.2.3

KNOWLEDGE BASE

construct scenario models given scenario, compositional modeller relies use
knowledge base particular problem domain. illustrate ideas, section
presents constructs employed compositional modeller developed synthesise
scenario models ecological domain.
Composable relations knowledge base approach consists partial models
instantiated composed complex scenario models. composition partial models
scenario model may involve composition partial relations (coming different partial
models) compounded relations. sample scenario model section 3.2.2, following
relation describes changes population size prey population

Nprey = Bprey Dprey Pprey
dt

(7)

(7), Nprey population size, Bprey number births, Dprey number natural deaths
Pprey number prey died due predation. Thus, relation (7) actually describes two
phenomena affect population size Nprey : natural population growth (Bprey Dprey )
predation related deaths (Pprey ). constructing knowledge base, desirable represent
two phenomena isolation always occur combination. example,
species predators, therefore unnecessary always include predation
cause death. viewpoint, relation (7) seen composed different
composable relations knowledge base:

Nprey = C + (Bprey )
dt


Nprey = C (Dprey )
dt


Nprey = C (Pprey )
dt

use composable relations enables knowledge base cover many combinations
phenomena may affect relation possible, representing phenomenon individually rather precompiling everything together. component parts (i.e.
composable relations) relations need represented, instead possible, however complex, combinations them, knowledge base smaller effective. section
describes composable relations represented knowledge base, well whether
composed form compounded relations.
518

fiC OMPOSITIONAL ODEL R EPOSITORIES

Composable relations containing composable functors method
composition exists (that describes complete set composable relations composed).
composable functors employed proposed Bobrow et al. (1996) new addition:
composable selection. summary composable relations presented table 2.
composable relations introduced Bobrow et al. (1996) easy understand.
formulae f v = C + (f ) v = C (f ) represent terms (respectively f f ) sum,
formulae f v = C (f ) v = C (f ) represent factors (respectively f f1 ) product.
However, ecological models use typically contain selection statements declare
one certain equation must employed condition satisfied one otherwise.
Formally, selection relation form
c1 v = r1 else c2 . . . else v = rn

(8)

v participant, ci (with = 1, . . . , n1) relation describing condition statement
rj (with j = 1, . . . , n) relation. selection relation consists partial relations:
ci v = ri

= 1, . . . , n 1

else v = rn
Therefore, selection relation composed two types composable relation. first
composable relation, form v = C if,p (a, f ), v participant, p
element taken total order, set natural numbers , denotes priority
composable relation sequence, f two given relations. second type
composable relation composable else relation, form v = C else (felse ),
felse given relation assigned v none antecedents composable relations
true.
illustrate notation, selection relation (8) composed following composable relations:
v = C if,p1 (c1 , r1 )
..
.
v = C if,pn1 (cn1 , rn1 )
v = C else (rn )
p1 > . . . > pn1 .
combine composable relations, number rules defined implement semantics
representational formalism. theory, set rules generated enables aggregation set composable relations. practice, however, trade-off must made
flexibility (the ability combine many different types composable relation) comprehensibility (the use set rules easily understood knowledge engineer employs
composable relations). Thus, types composable relations combined
restricted.
Table 3 summarises composable relations joined form compounded relations.
principle guiding construction table allow composition relations
certain types resulting compound relation intuitively obvious. example, according
519

fiK EPPENS & HEN

C + (f1 )
C (f1 )
C (f1 )
C (f1 )
C if,p1 (a1 , f1 )
C if,p2 (a1 , f1 )
C else (f1 )

C + (f2 )
yes
yes






C (f2 )
yes
yes






C (f2 )


yes
yes




C (f2 )


yes
yes




C if,p2 (a2 , f2 )




yes

yes

C else (f2 )




yes
yes


Table 3: Composibility composable relations
Table 3, composable addition relation x = C + (y) combined composable subtraction relation x = C (z) combination clearly x = z. However, according
Table 3, composable addition relation x = C + (y) combined composable multiplication relation x = C (z), arbitrary non-intuitive rule would otherwise
defined decide whether compound relation would x = + z x = z.
order composable selections must considered defined priorities
(or implicit case C else ). Therefore, composable selections combined one
another provided two composable relations priority.
order derive actual rules composition, sets composable relations
functor given model hP, Ri defined first:

R(v, C + ) = {v = C + (fi ) | (v = C + (fi )) R}
R(v, C ) = {v = C (fi ) | (v = C (fi )) R}
R(v, C ) = {v = C (fi ) | (v = C (fi )) R}
R(v, C ) = {v = C (fi ) | (v = C (fi )) R}
R(v, C ) = {v = C if,pi (ai , ) | (v = C if,pi (ai , )) R}
R(v, C else ) = {v = C else (fi ) | (v = C else (fi )) R}
this, rules composition built given expressions (9), (10) (11).
jointly state given set composable relations rewritten single compound
relation. rules contains complete set composable relations antecedent.
particular, antecedent rule (9) contains set composable addition subtraction
relations participant v left-hand side.
Similarly, antecedent rule (10) contains complete set composable multiplication relations. Finally, antecedent rule (11) satisfied complete set composable else
relations left-hand participant v, provided priorities strictly ordered (i.e.
two priorities equal) single composable else relation. latter two
conditions added two composable relations priority two composable
else relations compounded. consequents rules composition explain
complete sets composable relations joined. simply matter applying
appropriate mathematical operation provided terms.
520

fiC OMPOSITIONAL ODEL R EPOSITORIES

R(v, C + ) = {v = C + (f1+ ), . . . , v = C + (fm+ )}
R(v, C ) = {v = C (f1 ), . . . , v = C (fn )}

(9)

v = f1+ + . . . + fm+ (f1 + . . . + fn )
R(v, C ) = {v = C (f1 ), . . . , v = C (fm )}
R(v, C ) = {v = C (f1 ), . . . , v = C (fn )}
1 f1 . . . fm
v=
f1 . . . fn

(10)

R(v, C ) ={v = C if,p1 (a1 , f1 ), . . . , v = C if,pm (am , fm )}
R(v, C else ) ={v = C else (felse )} p1 > . . . > pm

(11)

v =if a1 f1 , else . . . , fm , else felse
Property definitions Property definitions describe features interest application requiring
scenario model. property definition tuple hP , , P = {ps1 , . . . psm } set
source-participants, predicate calculus sentence whose free variables elements P ,
relation, whose free variables elements P ,
ps1 , . . . , psm

typical example feature interest requirement certain variable model
endogenous exogenous. specific, property definitions describe
variable ?v endogenous exogenous respectively.
(defproperty endogenous
:source-participants ((?v :type variable))
:structural-condition ((or (== ?v *) (d/dt ?v *)))
:property (endogenous ?v))
(defproperty exogenous
:source-participants ((?v :type variable))
:structural-condition ((not (endogenous ?v)))
:property (exogenous ?v))

?v = * true (where * matches
first definition states whenever either ?v = * dt
constant formula), ?v deemed endogenous. second property definition indicates
variable said exogenous object exists endogenous.
describing features formally knowledge base, property definitions enable
imposed criteria selection scenario models. way, variable describing
size particular population eco-system, instance, forced endogenous.
Note required properties specified two different ways: either globally goals
scenario model construction locally required purpose certain model fragment.
latter use model properties illustrated later.

521

fiK EPPENS & HEN

Model fragments Model fragments building blocks scenario models constructed. model fragment tuple hP , P , , , A, P = {ps1 , . . . psm }
set variables called source-participants, P = {pt1 , . . . , ptn } set variables called targetparticipants, = {s1 , . . . , sv } set relations, called structural conditions, whose free variables elements P , = {t1 , . . . , tx } set relations, called postconditions, whose free
variables elements P P , = {a1 , . . . , ay } set relations, called assumptions,
= set relations, called purpose-required properties, that:
ti , ps1 , . . . , psm , pt1 , . . . , ptn , s1 . . . sv (a1 . . . ay ti )


, ps1 , . . . , psm , pt1 , . . . , ptn ,

s1

...

sv

a1 . . . ax

(12)
(13)

Note that, work, property definition hP , , equivalent model fragment
hP , {}, , {}, {}, {}i.
example, model fragment states population ?p described two
variables ?p-size (describing size ?p) ?p-change (describing rate change
population size) differential equation

?p-size = ?p-change
dt
usage partial scenario model subject two conditions: (1) growth phenomenon
relevant regard ?p, (2) variable ?p-change endogenous eventual scenario
model. former requirement indicated relevance assumption latter
purpose-required property:
(defModelFragment population-growth
:source-participants ((?p :type population))
:assumptions ((relevant growth ?p))
:target-participants ((?p-size :type variable)
(?p-change :type variable))
:postconditions ((size-of ?p-size ?p)
(change-of ?p-change ?p)
(d/dt ?p-size ?p-change))
:purpose-required ((endogenous ?p-change)))

purpose-required property usually satisfied additional model fragments,
one below:
(defModelFragment logistic-population-growth
:source-participants ((?p :type population)
(?p-size :type variable)
(?p-change :type variable))
:structural-conditions ((size-of ?p-size ?p)
(change-of ?p-births ?p))
:assumptions ((model ?p-size logistic))
:target-participants ((?r :type parameter)
(?k :type variable)
(?d :type variable))
:postconditions ((capacity-of ?k ?p)
(density-of ?d ?p-size)
(== ?d (C-add (/ ?p-size ?k)))
(== ?p-change (- (* ?r ?p-size (- 1 ?d))))))

522

fiC OMPOSITIONAL ODEL R EPOSITORIES

Model fragments rules inference describe new knowledge derived
existing knowledge committing emerging model certain assumptions. used
generate space possible models. Model fragments instantiated matching sourceparticipants existing participants scenario emerging model, matching
structural conditions corresponding relations. possible instantiation, new instance
generated target-participants, necessary, new instances created
postconditions assumptions. instances, well inferential relationships
instances source-participants, structural conditions assumptions one hand,
target-participants postconditions other, stored ATMS, forming
model space. explained section 3.3.1.
model fragment said applied instantiated underlying assumptions
hold. model fragment applied, instances target-participants postconditions
corresponding instantiation model fragment must added resulting model.
respect example, model fragment implements logistic population growth
model instantiated whenever variables exist describe size change population,
applied logistic model population size selected.
Note compositional modellers, ones devised Heller Struss (1998,
2001); Levy, Iwasaki Fikes (1997); Nayak Joskowicz (1996); Rickel Porter (1997),
model fragments represent direct translations components physical systems influences variables. compositional modeller presented herein aims serve ecological
model repository, contents model fragments employed differs conventional
compositional modellers two important regards:
Firstly, model fragments contain partial models describing certain phenomena instead influences. partial models normally correspond developed ecological modelling
research. Typical examples include logistic population growth model (Verhulst, 1838)
Holling predation model (Holling, 1959) devised population dynamics literature.
Secondly, partial models contained model fragments often need composed incrementally. example, aforementioned sample model fragment logistic-populationgrowth requires emerging scenario model, may generated sample model
fragment population-growth. Thus, one model fragment, e.g. logistic-populationgrowth, expand partial model contained another, e.g. population-growth. feature, (correctly) presumed model fragment generates new relations
preconditions model fragments expands on. Violating presumption would
make little sense context present application would imply recursive extension
emerging scenario model set variables equations.
3.2.4 PARTICIPANT CLASS DECLARATION PARTICIPANT TYPE HIERARCHIES
general, participant classes need defined. However, certain types participant may
described terms interesting participants, irrespective modelling choices.
feature provides syntactic sugar describing important relations participants, making
easier declare required properties scenario model terms participants scenario.
example, behaviour population may described terms population size growth
rate variables:
(defEntity population
:participants (size growth-rate))

523

fiK EPPENS & HEN

Participant class declarations may employed within model fragments provide
specific definition meaning source-participants target-participants. way,
participant specifications constrained feature another participant means
:entity statement, following example illustrates:
(defModelFragment define-population-growth-phenomenon
:source-participants ((?p :type population))
:target-participants
((?ps :type stock :entity (size ?p))
(?pg :type variable :entity (growth-rate ?p))
(?pb :type flow)
(?pd :type flow))
:assumptions ((relevant growth ?p))
:postconditions ((== ?pg (- ?pb ?pd))
(flow ?pb source ?pl)
(flow ?pd ?pl sink)))

Furthermore, participant class declarations may define one class immediate subclass
another. example, population participant class holometabolous insects (e.g. butterflies)
may defined subclass population participant class:
(defEntity holometabolous-insect-population
:subclass-of (population)
:participants
(larva-number pupa-number adult-number))

way, participant type hierarchy defined. subclass inherits participants
superclasses (i.e. immediate superclass superclasses superclasses).
summary, participant class declaration tuple = h , P participant
class, called immediate superclass participant class P set participants classes
describe important features participant class.
3.3 Inference
compositional modelling method presented herein employs four step inference procedure:
1. Model space construction. model space ATMS efficiently stores participants, relations model design decisions (represented form relevance model
assumptions) may part final scenario model, well conditions
participants relations must must part scenario model.
2. aDCSP construction. model space contains number hard constraints participants relations may combined. inference step extracts restrictions
translates aDCSP.
3. Inclusion order-of-magnitude preferences. Preferences associated relevance
model assumptions scenario space reflect relative appropriateness
assumptions, resulting aDPCSP.
4. Scenario model selection. inference step solves aDPCSP. resulting solutions
correspond scenario models consistent according domain knowledge
optimise overall preference respect order-of-magnitude preference calculus.
524

fiC OMPOSITIONAL ODEL R EPOSITORIES

Problem Specification

Compositional Model Repository

population(prey)
population(predator)
predation(predator,prey)

Application

STEP 1
Model Space Construction

Scenario
Model Space

Requirements
Inconsistencies
Generation

Activitybased Dynamic Constraint
Satisfaction Problem Construction

Requirements
Inconsistencies

Knowledge Base
STEP 2

Scenario Model
Construction
Dynamic Constraint
Satisfaction Problem

Scenario Model
STEP 3
Inclusion OrderofMagnitude
Preferences

Preferences
Preference Ordering

Dynamic Preference Constraint
Satisfaction Problem

Application

Prey
death
rate

birth
rate

crowding
max crowd
sustainable
population

fooddemand

consumption

STEP 4

Predator
death
rate

birth
rate

Scenario Model Selection
(aDCSP solver)

crowding

Assumption Set

Knowledge elements

Inference elements

Figure 4: Inference procedures compositional modeller

525

fiK EPPENS & HEN

four steps correspond four squares compositional model repository Figure 4
section, inference steps discussed detail illustrated means
simple examples. next section contains detailed example shows procedure
applied non-trivial ecological modelling domain.
3.3.1 CENARIO + K NOWLEDGE BASE = ODEL PACE
previously stated, aim compositional modeller translate scenario scenario
model. representations system interest though model system different
level detail. knowledge base provides foundation translation. scenario models
constructed given scenario, regard knowledge base, stored
model space.
model space ATMS (de Kleer, 1986) containing participants, relations assumptions instantiated given scenario. work, generalised version
ATMS, introduced de Kleer (1988), employed allows use negations nodes
justifications. algorithm GENERATE ODEL PACE(hO, Ri) describes model
space created scenario hO, Ri. first initialises model space participant instances (O) relation instances (R) scenario. Then, model fragment whose source-participants structural conditions match participants relations already
, new instances target-participants, assumptions postconditions added . property definition hP , , equivalent model fragment hP , {}, , {}, {}, {}i,
procedure applies property definitions well model fragments. Matching sourceparticipants structural conditions model fragment emerging model space performed function match(, , ) specified below, model fragment
matched, substitution source-participants participant instances.


true = {ps1 /o1 , . . . , psm /om }





P () = {ps1 , . . . , psm }

match(, , ) =
o1 . . . om



(),




false otherwise
match, specified model fragment substitution , processed follows:

assumption A(), new node, denoting assumption instance a, created
added .
Then, new node n(,) , denoting instantiation via substitution , created, added
justified implication:
(aA() a) (pP () p) (s () ) n(,)
Finally, new instance target-participant p P () postcondition
(), provided already exist model space , created.
target-participants, involves creating new symbol new participant instance
function gensym() extending substitution {p/gensym()}. new node n
526

fiC OMPOSITIONAL ODEL R EPOSITORIES

Algorithm 1:

GENERATE ODEL PACE(hO, Ri)

new ATMS;
O, add-node(, o);
r R, add-node(, r);
, , match(, , )

justification ;






A()



newnode add-node(, (a));





justification
justification {newnode};


p P ()





justification justification {find-node(, (p))};



()




justification justification {find-node(, ())};




add-node(, n(,) );
add-justification(, n(,) , njustificationn);





p P ()



{p/gensym()};




add-node(, (p));





add-justification(, o, n(,) );







()



( )







get-node(, ());




else
add-node(, ());





add-justification(, o, n(,) );
n1 , . . . , nm , inconsistent({n1 , . . . , nm )
add-justification(, n , n1 . . . nm );

{
{
{

a1

Instances assumptions:
A() = {a1 , . . . , }

..
.
pt1x



Instances sourceparticipants:
P () = {ps1 , . . . , psm }

Instances structural
conditions:
() = {s1 , . . . , sv }

ps1

..
.

..
.







ptn


t1

psm

..
.

s1

ts

..
.

}
}

Instances target
participants:
P () = {pt1 , . . . , ptn }

Instances postconditions:
() = {t1 , . . . , ts }

sv

Figure 5: Model fragment application

created added new participant instance p new instantiated
relation . nodes justified implication n (,) n.
527

fiK EPPENS & HEN

global property must satisfied
consistent scenario models

purpose-required property model fragment ,
applied substitution .

r1 r2
non-composable relations

v = r1 (. . .)

















(a) Inconsistency caused
global property



v = r2 (. . .)




(b) Inconsistency caused
purpose-required property

(c) Inconsistency caused
non-composable relations

Figure 6: Sources inconsistency
illustrate procedure, Figure 5 shows graphical representation inferences
constructed applying model fragment = hP , P , , , A, {}i respect substitution
.
possible applications model fragments exhausted, inconsistencies
model space identified recorded ATMS. algorithm, nogoods generated
set {n1 , . . . , nm } inconsistent nodes, denoted inconsistent({n1 , . . . , nm }).
three sources inconsistencies reported ATMS different way:
Global properties: Let instance global property scenario model must
satisfy. Then, combination assumptions negations assumptions prevents
satisfied inconsistent. Therefore, inconsistent({}) must reported
required global property . type inconsistency depicted Figure 6(a).
Purpose-required properties: application model fragment without satisfying
purpose-required properties () yields inconsistency (see (13)). Hence, node
n(,) denoting instantiation via substitution , node n describing
appropriate instance purpose-required property (), inconsistent({n (,) , n })
reported. type inconsistency depicted Figure 6(b).
Non-composable relations: mathematical formalism designed describe simulation
models dynamic systems, certain combinations relations may over-constrain model,
hence, unsuitable generating behaviour system interest. Within
system dynamics ODE formalisms used paper, assignments relations
variable composable relations explicitly deemed composable.
words, two relations v = ri v = rj combined one another ri
rj composable. Examples pairs non-composable relations include
x = C + (y) x = C (z) C + C relations composable,
= C + (b) = c + c + composable relation.
Combinations non-composable relations must reported inconsistency well.
type inconsistency depicted Figure 6(c).
528

fiC OMPOSITIONAL ODEL R EPOSITORIES

assumption:
(relevant growth frog)
participant:
population frog
1 :
2 :
:

1

assumption:
(model nfrog logistic)

participant:
parameter rfrog

relation:

dt nfrog = cfrog

participant:
parameter kfrog

participant:
variable cfrog

relation:
(capacity-of kfrog frog)

participant:
variable nfrog

population-growth
model fragment
logistic-population-growth
model fragment
endogenous
property definition

cfrog = rfrog nfrog (1

nfrog
)
kfrog

relation:
(change-of cfrog frog)
relation:
(size-of nfrog frog)

relation:
endogenous(cfrog )

relation:

2





relation:
(endogenous cfrog )



Figure 7: Partial model space
illustrate model space construction algorithm, Figure 7 presents small sample model
space. results application population-growth logistic-population-growth model fragments endogenous property definition, described
earlier, single population frog. larger scenario involving multiple populations relations populations specified, similar partial model space would generated
individual population.
3.3.2 F ROM

MODEL SPACE DCSP

model space constructed, translated aDCSP. translation
procedure, summarised algorithm CREATEA DCSP(), consists three steps described below:
Algorithm 2:

CREATEA DCSP()

comment: set substitutions
{};
comment: Generate attributes domains

A, assumption-class(A)
x create-attribute();




D(x)
{};




{A/x};

aA



v create-value();



D(x) D(x) {v};



{a/x : v};
comment: Generate activity constraints

A, assumption-class(A)
subject(A);
{a1> , . . . , ap> , a1 , . . . , aq } L(s)

add(a1> . . . ap> a1 . . . aq active(A));
comment: Generate compatibility constraints
{a1> , . . . , ap> , a1 , . . . , aq } L(n )
add(a1> . . . ap> a1 . . . aq );

529

fiK EPPENS & HEN

1. Generate attributes domain values assumptions. aDCSP attributes correspond underlying assumption classes (i.e. groups assumptions indicating alternative
choices regards model construction decision). relevance assumption
negation jointly form assumption class. example, 1 ={(relevant growth
frog), (relevant growth frog)} specifies assumption class. set
model assumptions involving participants/relations, different model names
hence different descriptions, form assumption class. instance, 2 ={(model
nfrog exponential), (model nfrog logistic), (model nfrog other)},
nfrog variable denoting size population, specifies assumption class. Running step algorithm, attribute created assumption class,
domain attribute consisting assumption instances assumption class.
2. Create activity constraints. attributes domain values generated previous step
meaningful situations participant and/or relation instances contained
arguments corresponding assumptions exist. example, assumption (model
nfrog logistic) relevant participant instance nfrog exists. Clearly, assumptions within one assumption class participant and/or relation instances
arguments. assumption class corresponds one attribute, attribute
activated participant and/or relation instances associated related assumption class active. Therefore, step creates activity constraints activate
attribute based conjunction environments contained within labels
participants/relations assumption class. instance, deduced Figure
7, nfrog activated (relevant growth frog) committed. Thus, attribute
corresponding assumption class A2 , defined step 1, activated attribute value
assignment associated (relevant growth frog) assumption.
3. Create compatibility constraints. ATMS (or model space), sources inconsistencies contained label nogood node. Therefore, compatibility constraints
created directly translating environments label L() corresponding
conjunctions attribute-value assignments.
3.3.3

DCSP

+

PREFERENCES

= DPCSP

aDCSP produced formalises hard requirements imposed upon scenario models.
Among scenario models meet requirements, may better others,
underlying model design decisions may deemed appropriate user. Preferences
express (relative) level appropriateness attached assumptions describe
model design decisions, extension, attribute-value pairs aDCSP. discussed
section 2, extension aDCSP constitutes aDPCSP.
specifically, worth recalling section 2.2 order-of-magnitude preference
calculus presented enables representation reasoning subjective user preferences
different relevance modelling assumption. Next, section 2.3 introduces solution algorithm
aDPCSPs include aDCSP, ones constructed approach section 3.3.2,
extended subjective user preferences alternative design decisions.
530

fiC OMPOSITIONAL ODEL R EPOSITORIES

3.4 Outline analysis complexity
complexity work arises four major sources: 1) model space construction, 2) label
propagation ATMS, 3) model space aDCSP translation, 4) aDPCSP solution.
GENERATE ODEL PACE (hO, Ri) essentially performs fixed sequence instructions
produces small set nodes inferences match model fragment. Therefore,
time space complexity linear respect number possible matches model
fragments. CREATEA DCSP() extracts certain information model space rewrites
different formalism without manipulations. Therefore, time space complexity
linear respect size model space.
label propagation algorithm ATMS known exponential time complexity.
However, model space built incrementally (by GENERATE ODEL PACE(hO, Ri))
root nodes ATMS network (i.e. correspond facts antecedents) leaf nodes (i.e. consequents, nogood node)
inconsistencies added end, complexity increases exponentially
depth network number participants relations individual model fragments, rather size model space. fact significantly limits complexity
impact label propagation. Firstly, depth ATMS network restricted domain.
many conventional compositional modellers, model fragments direct translations
scenario components scenario model equations, depth would one. Empirically, constructing model space sophisticated eco-systems, depth model space never exceeded
8. Secondly, size individual model fragments change significantly size
knowledge base.
fourth final source complexity driven fact constraint satisfaction
algorithm must determine consistent combination assumptions model space. space
attribute value assignments increases exponentially size number assumptions
hence, model space. Thus, overall complexity present approach largely
dominated constraint satisfaction algorithm employed.
user specify preference, CSP aDCSP. Recently, number efficient
methods devised solving aDCSPs presented Minton et al. (1992); Mittal
Falkenhainer (1990); Verfaillie Schiex (1994). helps minimise overhead incurred
compositional modelling.
preferences, CSP becomes aDPCSP. argued section 2, presents new
problem yet studied detail. work, A* algorithm proposed
implement CSP solution method. approach known efficient terms
proportion search space algorithm needs explore finding optimal solution,
compared search methods based heuristic (Hart et al., 1968).
disadvantage incurs exponential space complexity. explained Miguel Shen
(2001a, 2001b); Tsang (1993), wide range alternative solution techniques exist ordinary
CSPs many could extended solve aDPCSPs. detailed examination
techniques topic future research.
3.5 Automated modelling scientific discovery
mentioned previously, compositional model repository designed order compose models
systems structure relevant domain knowledge. such, approach gives rise po531

fiK EPPENS & HEN

tentially beneficial means operationalise outcomes scientific discovery. specifically,
resultant compositional model repositories allow existing knowledge model construction
applied unexperienced scenarios support investigation situations may
physically difficult replicate create may synthesised computational representations.
present work applied vegetation component MODMED n-species
model (Legg, Muetzelfeldt, & Heathfield, 1995). n-species model offers system dynamics
representation populations Mediterranean vegetations affected populations farm animals, climate environmental management. purpose model
instantiated respect various Mediterranean communities, serve component
large scale simulation designed simulate effects various environmental
policies Mediterranean landscape. knowledge base containing approximately 60 model
fragments 4 property definitions constructed, basis complex parts
n-species model two man-weeks. knowledge base employed reconstruct variations n-species model accommodate variety possible scenarios, well
examine simplifications original n-species model exclude certain phenomena.
compositional model repository closely related seminal work compositional modelling (Falkenhainer & Forbus, 1991). approach similar functionality
devised specifically physical systems relies component-connection formalism
represent scenarios.
Another approach recently developed applied ecological domain
Heller Struss (1998, 2001). work derives systems structure observations
behaviour domain knowledge. Therefore, able perform diagnosis ecological systems
therapy suggestion. Another important distinction work present study
presumes process described one way instead allowing multiple
alternative models.
machine learning community, number approaches devised Bradley,
Easley Stolle (2001); Langley et al. (2002); Todorovski Dzeroski (1997, 2001)
induce sets differential equations a) observations behaviour, b) domain knowledge represented form hypothetical equations, c) description structure system.
approaches aim scientific discovery generalising observed behaviour mathematical
models. specifications scenario domain knowledge methods similar
used article. especially true work Langley et al. (2002); Todorovski Dzeroski (1997, 2001), work applied population dynamics.
However, internal mechanisms approaches different essentially rely
exhaustive search procedures instead constraint satisfaction techniques.

4. Population Dynamics Example
examples used throughout previous sections taken extensive application
study present work. application aimed construct repository basic population
dynamic models, describing phenomena growth, predation competition. section
presents overview proposed approach employed application show
ability work scale larger problems.
532

fiC OMPOSITIONAL ODEL R EPOSITORIES

4.1 Knowledge base
subsection illustrates set model fragments constructed. challenge
task lies fact model fragments must encompass sufficiently general reusable
component part ecological models. instances models found literature ecological
modelling, boundaries recurring component parts hidden, therefore
knowledge engineer identify them.
First, hierarchy entity types set up. system dynamics models shown earlier contain
three types participant: variables, stocks flows. Here, stocks flows special
type variable predetermined meaning. is, flow f stock corresponds


= C + (f ) flow f stock denotes dt
= C (f ). Hence, stocks
equation dt
flows defined subclasses participant class variable:
(defEntity variable)
(defEntity stock
:subclass-of (variable))
(defEntity flow
:subclass-of (variable))

sample properties defined section 3.2.3, describe condition
variable endogenous exogenous, employed knowledge base:
(defproperty endogenous-1
:source-participants ((?v :type variable))
:structural-conditions ((== ?v *))
:property (endogenous ?v))
(defproperty endogenous-2
:source-participants ((?v :type variable))
:structural-conditions ((d/dt ?v *))
:property (endogenous ?v))
(defproperty exogenous
:source-participants ((?v :type variable))
:structural-conditions ((not (endogenous ?v)))
:property (exogenous ?v))

next three model fragments contain rules stock-flow diagrams employed systems dynamics models. respectively describe that:
flow ?flow stock ?stock corresponds composable differential equation:

?stock = C + (?flow)
dt
flow ?flow stock ?stock corresponds composable differential equation:

?stock = C (?flow)
dt
flow ?flow one stock ?stock1 another stock ?stock2 corresponds
composable differential equations:


?stock1 = C (?flow) ?stock2 = C + (?flow)
dt
dt
533

fiK EPPENS & HEN

(defModelFragment inflow
:source-participants
((?stock :type stock)
(?flow :type flow))
:structural-conditions
((flow ?flow source ?stock))
:postconditions
((d/dt ?stock (C-add ?flow))))
(defModelFragment outflow
:source-participants
((?stock :type stock)
(?flow :type flow))
:structural-conditions
((flow ?flow ?stock sink))
:postconditions
((d/dt ?stock (C-sub ?flow))))
(defModelFragment inflow
:source-participants
((?stock1 :type stock)
(?stock2 :type stock)
(?flow :type flow))
:structural-conditions
((flow ?flow ?stock1 ?stock2))
:postconditions
((d/dt ?stock1 (C-sub ?flow))
(d/dt ?stock2 (C-add ?flow))))

declarations place, knowledge base model fragments defined. first model fragment describes population growth phenomenon. Note
aforementioned growth, predation competition models contain stock representing population
size two flows, one flow births stock another flow deaths stock.
common feature models population dynamics contained single model fragment.
(defModelFragment population-growth
:source-participants
((?population :type population))
:assumptions
((relevant growth ?population))
:target-participants
((?size :type stock :name size)
(?birth-flow :type flow :name births)
(?death-flow :type flow :name deaths))
:postconditions
((flow ?birth-flow source ?size)
(flow ?death-flow ?size sink)
(size-of ?size ?population)
(births-of ?birth-flow ?population)
(deaths-of ?death-flow ?population))
:purpose-required
((endogenous ?birth-flow)
(endogenous ?death-flow)))

variables ?birth-flow ?death-flow become endogenous model contains
equation describing birth flow death flow. equations differ population growth
models. Two types population growth model exponential growth model (Malthus, 1798),
shown Figure 8(a), logistic growth model (Verhulst, 1838), shown
Figure 8(b). following two model fragments formally describe component models:
534

fiC OMPOSITIONAL ODEL R EPOSITORIES




fffi








fffi!
"



(a) Exponential growth




(b) Logistic growth

Figure 8: Population growth models
(defModelFragment exponential-population-growth
:source-participants
((?population :type population)
(?size :type variable)
(?birth-flow :type variable)
(?death-flow :type variable))
:structural-conditions
((size-of ?size ?population)
(births-of ?birth-flow ?population)
(deaths-of ?death-flow ?population))
:assumptions
((model ?size exponential))
:target-participants
((?birth-rate :type variable :name birth-rate)
(?death-rate :type variable :name death-rate))
:postconditions
((== ?birth-flow (* ?birth-rate ?size))
(== ?death-flow (* ?death-rate ?size))))
(defModelFragment logistic-population-growth
:source-participants
((?population :type population)
(?size :type variable)
(?birth-flow :type variable)
(?death-flow :type variable))
:structural-conditions
((size-of ?size ?population)
(births-of ?birth-flow ?population)
(deaths-of ?death-flow ?population))
:assumptions
((model ?size logistic))
:target-participants
((?birth-rate :type variable :name birth-rate)
(?death-rate :type variable :name death-rate)
(?density :type variable :name total-population)
(?capacity :type variable :name capacity))
:postconditions
((== ?birth-flow (* ?birth-rate ?size))
(== ?death-flow (* ?death-rate ?size ?density))
(== ?density (C-add (/ ?size ?capacity)))
(density-of ?density ?population)
(capacity-of ?capacity ?population)))

one twist compositional modelling population growth. Sometimes, actual
growth model implicitly contained within another type model. cases, growth
phenomenon corresponding differential equations still relevant, none dedicated
growth models employed. example, shown later, Lotka-Volterra predation
model comes equations describing growth.
535

fiK EPPENS & HEN

model fragment other-growth allows empty growth model, named other,
selected. However, due purpose-required property instance ?p-change must
endogenous, empty model selected growth model implicitly included
elsewhere.
(defModelFragment other-growth
:source-participants
((?population :type population)
(?size :type variable)
(?birth-flow :type variable)
(?death-flow :type variable))
:structural-conditions
((size-of ?size ?population)
(births-of ?birth-flow ?population)
(deaths-of ?death-flow ?population))
:assumptions
((model ?population other)))

addition population growth, two phenomena included knowledge base:
predation competition. Predation competition relations species represented
predicates populations: e.g. (predation foxes rabbits) (competition
sheep cows). However existence phenomenon necessarily mean must
contained within model. would make little sense model predation competition without
modelling size populations, models phenomena relate population sizes
one another. Therefore, incorporation predation phenomenon made dependent upon
existence variables representing population size. Also, human expert modellers may prefer
leave phenomenon resulting model. keep choice open, following two
model fragments construct participant representing phenomena predation competition,
make dependent upon relevance assumption:
(defModelFragment predation-phenomenon
:source-participants
((?predator :type population)
(?prey :type population)
(?predator-size :type variable)
(?prey-size :type variable))
:structural-conditions
((predation ?predator ?prey)
(size-of ?predator-size ?predator)
(size-of ?prey-size ?prey))
:assumptions
((relevant predation ?predator ?prey))
:target-participant
((?predation-phenomenon :type phenomenon :name predation-phenomenon))
:postconditions
((predation-phenomenon ?predation-phenomenon ?predator ?prey))
:purpose-required ((has-model ?predation-phenomenon)))
(defModelFragment competition-phenomenon
:source-participants
((?population1 :type population)
(?population2 :type population)
(?size1 :type variable)
(?size2 :type variable))
:structural-conditions
((competition ?population1 ?population2)
(size-of ?size1 ?population1)
(size-of ?size2 ?population2))

536

fiC OMPOSITIONAL ODEL R EPOSITORIES

Bprey = bprey Nprey

Bprey = bprey Nprey

Dprey = dprey Nprey

Nprey
Kprey

Dprey = pprey Nprey Npred

dt Nprey


dt Nprey

= Bprey Dprey P

= Bprey Dprey P

bprey

P =

pprey

bprey

dprey

sNprey Npred
1+sNprey th

Kprey


th

Dpred = dpred Npred

Bpred = bpred Npred

Dpred = dpred Npred

Bpred = ppred Nprey Npred

dt Npred

Npred
Kpred


dt Npred

Npred
Kpred

= Bpred Dpred

= Bpred Dpred
dpred

bpred

dpred

ppred

Kpred = k Nprey

(b) Holling predation

(a) Lotka-Volterra predation

Figure 9: Predation models
:assumptions
((relevant competition ?population1 ?population2))
:target-participant
((?competition-phenomenon :type phenomenon :name competition-phenomenon))
:postconditions
((competition-phenomenon ?competition-phenomenon ?population1 ?population2))
:purpose-required
((has-model ?competition-phenomenon)))

model fragments purpose-required property form (has-model ?phen).
property expresses condition model must exist respect phenomenon:
(defproperty has-model
:source-participants ((?p :type phenomenon))
:structural-conditions ((is-model-of ?p *))
:property (has-model ?p))

next two model fragments implement models (thereby satisfying has-model
purpose-required property) predation phenomenon two populations. describe
two well-known predation models: Lotka-Volterra model (1925, 1926), shown Figure 9(a), Holling model (1959), shown graphically Figure 9(b).
(defModelFragment Lotka-Volterra
:source-participants
((?predation-phenomenon :type phenomenon)
(?predator :type population)
(?predator-size :type stock)
(?predator-birth-flow :type flow)
(?predator-death-flow :type flow)
(?prey :type population)
(?prey-size :type stock)
(?prey-birth-flow :type flow)
(?prey-death-flow :type flow))
:structural-conditions
((predation-phenomenon ?predation-phenomenon ?predator ?prey)

537

fiK EPPENS & HEN

(size-of ?predator-size ?predator)
(births-of ?predator-birth-flow ?predator)
(deaths-of ?predator-death-flow ?predator)
(size-of ?prey-size ?prey)
(births-of ?prey-birth-flow ?prey)
(deaths-of ?prey-death-flow ?prey))
:assumptions
((model ?predation-phenomenon lotka-volterra))
:target-participants
((?prey-birth-rate :type variable :name birth-rate)
(?predator-factor :type variable :name predator-factor)
(?prey-factor :type variable :name prey-factor)
(?predator-death-rate :type variable :name death-rate))
:postconditions
((== ?prey-birth-flow (* ?prey-birth-rate ?prey-size))
(== ?predator-birth-flow (* ?predator-factor ?prey-size ?predator-size))
(== ?prey-death-flow (* ?prey-factor ?prey-size ?predator-size))
(== ?predator-death-flow (* ?predator-death-rate ?predator-size))
(is-model-of lotka-volterra ?predation-phenomenon)))

mentioned earlier, Lotka-Volterra model introduces growth model prey
predator populations assigning specific equations variables, describe changes
sizes predator prey populations, ?pred-change ?prey-change respectively.
Thus, satisfies purpose-required property application population-growth
model fragment ?prey ?pred populations.
(defModelFragment Holling
:source-participants
((?predation-phenomenon :type phenomenon)
(?predator :type population)
(?predator-size :type stock)
(?capacity :type variable)
(?prey :type population)
(?prey-size :type stock))
:structural-conditions
((predation-phenomenon ?predation-phenomenon ?predator ?prey)
(size-of ?predator-size ?predator)
(size-of ?prey-size ?prey)
(capacity-of ?capacity ?predator))
:assumptions
((model ?predation-phenomenon holling))
:target-participants
((?search-rate :type variable :name search-rate)
(?handling-time :type variable :name handling-time)
(?prey-requirement :type variable :name prey-requirement)
(?predation :type flow :name predation))
:postconditions
((flow ?predation ?prey-size sink)
(== ?predation
(/ (* ?search-rate ?prey-size ?predator-size)
(+ 1 (* ?search-rate ?prey-size ?handling-time))))
(== ?capacity (C-add (* ?prey-requirement ?prey)))
(is-model-of holling ?predation-phenomenon)))

Holling model employs variable denoting capacity population. variable
may introduced logistic growth model. practice, logistic growth models Holling
predation models often used conjunction. compositional modeller need aware
combinations models, however. needs know prerequisites individual
component models contained within model fragment.
538

fiC OMPOSITIONAL ODEL R EPOSITORIES

D1 = 1 N 1

B1 = b 1 N 1

dt N1

N1 +w12 N2
K1

= B1 1

d1

b1

w12
K1

D2 = 2 N 2

B2 = b 2 N 2

dt N2

w21 N1 +N2
K2

= B2 2

d2

b2

w21
K2

Figure 10: species competition model

final model fragment knowledge base implements model competition
two species. formally describes competition model type depicted Figure 10. model
fragment contains population competition model knowledge base, contain
model assumption represent model.

(defModelFragment competition
:source-participants
((?competition-phenomenon :type phenomenon)
(?population-1 :type population)
(?size-1 :type stock)
(?density-1 :type variable)
(?capacity-1 :type variable)
(?population-2 :type population)
(?size-2 :type stock)
(?density-2 :type variable)
(?capacity-2 :type variable))
:structural-conditions
((competition-phenomenon ?competition-phenomenon ?population-1 ?population-2)
(density-of ?density-1 ?size-1)
(capacity-of ?capacity-1 ?size-1)
(density-of ?density-2 ?size-2)
(capacity-of ?capacity-2 ?size-2))
:assumptions
((relevant competition ?population-1 ?population-2))
:target-participants
((?weight-12 :type variable :name weight)
(?weight-21 :type variable :name weight))
:postconditions
((== ?density-1 (C-add (/ (* ?weight-12 ?size-2) ?capacity-1)))
(== ?density-2 (C-add (/ (* ?weight-21 ?size-1) ?capacity-2)))))

539

fiK EPPENS & HEN

relevant
growth predator

Growth

Predator

predation
predator,prey1
relevant
predation
predator,prey1

Exponential

model predator
exponential

Logistic
model

Logistic

model predator
logistic

"Other"
model

othergrowth

model predator


predationphen:
predator,prey1

Growth

Stock +
Flows

predation
predator,prey2
relevant
predation
predator,prey2

Exponential
model

othergrowth

model predator


Logistic
model

Logistic

model predator
logistic

"Other"
model

Exponential

model predator
exponential

Predation

predationphen:
predator,prey2

Growth

Stock +
Flows

Prey2
relevant
growth prey2

Exponential
model

Predation
Prey1
relevant
growth prey1

Stock +
Flows

Exponential
model

othergrowth

model predator


Logistic
model

Logistic

model predator
logistic

"Other"
model

Exponential

model predator
exponential

relevant
competition
prey1,prey2

LotkaVolterra
model

LotkaVolterra

model comp.
lotkavolterra

Holling
model

Holling

model comp.
holling

LotkaVolterra
model

LotkaVolterra

model comp.
lotkavolterra

Holling
model

Holling

model comp.
holling

Competition

competitionphen:
prey1,prey2

competition
prey1,prey2

Figure 11: Model space 1 predator 2 competing prey scenario
4.2 Model space
model space constructed knowledge base instantiated respect given scenario. Consider example following scenario, describes predator population
preys two populations, prey1 prey2, whilst two prey populations compete
one another:
(defScenario pred-prey-prey-scenario
:entities ((predator :type population)
(prey1 :type population)
(prey2 :type population))
:relations ((predation predator prey1)
(predation predator prey2)
(competition prey1 prey2)))

full specification model space unwieldy present abstract graphical
representation model space scenario shown Figure 11. model space contains
following knowledge:
three populations scenario, set three population growth models
(i.e. exponential, logistic other) derived. inference dependent upon
relevance assumption population growth phenomenon, model assumption
corresponds one three population growth models.
540

fiC OMPOSITIONAL ODEL R EPOSITORIES

predation relations (i.e. (predation predator prey1) (predation
predator prey2)), populations related them, set two predation models
(i.e. Lotka-Volterra Holling) derived. inference dependent upon relevance assumption predation phenomenon model assumption corresponds
one two predation models.
competition relation (competition prey1 prey2), populations related it, competition model derived. one competition model,
inference competition model dependent upon relevance assumption
corresponds competition phenomenon.
addition hypergraph Figure 11, model space contains number constraints
conjunctions assumptions consistent. explained earlier, stem two
sources: 1) non-composable relations 2) purpose-required properties. example given
type.
Let predation-phen-1 predation phenomenon predator prey1,
prey1-size variable representing size prey1 population. example, model fragments exponential-population-growth Lotka-Volterra
generate equation computing value variable representing change
prey1-size. equations composed, following inconsistency generated:
(relevant growth prey1) (model prey1-size exponential)
(relevant growth predator) (relevant predation predator prey1)
(model predation-phen-1 lotka-volterra)

Inconsistencies arise purpose-required properties. example, model fragment predation-phenomenon applicable predation relation deemed relevant,
purpose-required property (has-model ?pred-phen) become condition consistency. certain combinations assumptions, property may satisfied. Say,
Holling predation exponential growth models selected, Holling model generated ?capacity (capacity ?capacity ?pred) true.
predation model created case (because Holling model fragment instantiated), even though predation phenomenon deemed relevant set assumptions.
inconsistent has-model purpose-required property predation-phenomenon
model fragment, responsible combination assumptions therefore marked nogood.
(relevant growth predator) (model predator-size exponential)
(relevant growth prey1) (model prey1-size exponential)
(relevant predation predator prey1) (model predation-phen-1 holling)

4.3 aDPCSP solution
resultant model space translated aDCSP enable selection consistent set
assumptions, using advanced CSP solution techniques. aDCSP derived model
space depicted Figure 12.
541

fiK EPPENS & HEN

Attribute
x1
x2
x3
x4
x5
x6
x7
x8
x9
x10
x11

Meaning
(relevant growth prey1)
(relevant growth prey2)
(relevant growth predator)
(relevant predation predator prey1)
(relevant predation predator prey2)
(relevant competition prey1 prey2)
(model size-1 *)
(model size-2 *)
(model size-3 *)
(model predation-phen-1 *)
(model predation-phen-2 *)
Table 4: Attribute list

Domain
D1
D2
D3
D4
D5
D6
D7
D8
D9
D10
D11

Content
{d1,y , d1,n }
{d2,y , d2,n }
{d3,y , d3,n }
{d4,y , d4,n }
{d5,y , d5,n }
{d6,y , d6,n }
{d7,l , d7,e , d7,o }
{d8,l , d8,e , d8,o }
{d9,l , d9,e , d9,o }
{d10,h , d10,lv }
{d11,h , d11,lv }

Meaning
{population,none}
{population,none}
{population,none}
{(population,population),none}
{(population,population),none}
{(population,population),none}
{logistic,exponential,other}
{logistic,exponential,other}
{logistic,exponential,other}
{Holling,Lotka-Volterra}
{Holling,Lotka-Volterra}

Table 5: aDCSP 1 predator 2 competing prey scenario: domains contents
meaning

aDCSP contains 11 attributes. listed corresponding assumption classes
table 4. first 6 attributes correspond notion relevance phenomenon: 3 population
growth phenomena, 2 predation phenomena 1 competition phenomenon precise.
5 attributes correspond 5 sets model types: 3 sets population growth models 2 sets
predation models.
assumptions attributes generated form domains values. resulting domains aforementioned attributes summarised table 5.
activity constraints aDCSP describe conditions instantiate subject
assumptions correspond attribute. Since participant relation label
model space, minimal set assumptions becomes part emerging model
available. participant relation subject assumption, label explicitly
describes sets assumptions attribute corresponds subject
542

fiC OMPOSITIONAL ODEL R EPOSITORIES

x1
d1,y

x4
d1,n

d4,y

x7
d7,l

d7,e

x6
d4,n

d6,y

x2
d6,n

d2,y

x10
d7,o

d10,lv

x5
d2,n

d5,y

x8
d10,h

d8,l

d8,e

x3
d5,n

d3,y

x11
d8,o

d11,lv

d3,n

x9
d11,h

d9,l

d9,e

d9,o

attribute
value
compatibility constraint
activity constraint

Figure 12: aDCSP derived models space reflecting 1 predator 2 competing prey
scenario

activated. translating label subject sets attribute-value assignments, antecedents activity constraints constructed.
example, relevance assumptions (attributes x1 , . . . , x6 ) take subjects
scenario, hence, always active. attributes related model assumptions
population growth active corresponding assumptions denoting relevance population
growth true. is,
x1 : d1,y active(x7 )
x2 : d2,y active(x8 )
x3 : d3,y active(x9 )
attributes related assumptions predation models active corresponding
assumptions denoting relevance predation, assumptions describing relevance population growth, true populations involved predation relation. is,
x1 : d1,y x3 : d3,y x4 : d4,y active(x10 )
x2 : d2,y x3 : d3,y x5 : d5,y active(x11 )
Figure 12 shows graphical representation activity constraints.
compatibility constraints correspond directly inconsistencies nogood node.
inconsistencies discussed previous section depicted Figure 12.
aDCSP constructed, preferences may attached attribute-value assignments.
Suppose preferences assigned standard population modelling choices, i.e. expo543

fiK EPPENS & HEN

Attribute
x1 , . . . , x5
x6
x7
x8
x9
x10
x11

Preference assignments
preference assignments
P (x6 : d6,y ) = pcompetition
P (x7 : d7,l ) = plogistic , P (x7 : d7,e ) = pexponential
P (x8 : d8,l ) = plogistic , P (x8 : d8,e ) = pexponential
P (x9 : d9,l ) = plogistic , P (x9 : d9,e ) = pexponential
P (x10 : d10,h = pholling , P (x10 : d10,lv ) = plotka-volterra
P (x11 : d11,h = pholling , P (x11 : d11,lv ) = plotka-volterra

Table 6: Preference assignments 1 predator 2 competing prey problem
nential growth, logistic growth, lotka-volterra predation holling predation, relevance
competition (because one type model implemented phenomenon).
example, following BPQs could employed:
pexponential < plogistic
plotka-volterra < pholling
pcompetition
logistic Holling models preferred exponential Lotka-Volterra models former generally regarded accurate. Note preferences
ordered way corresponding different phenomena related one
another. justification ordering that, even though models structurally connected
(there restrictions models combined one another), models different phenomena inherently describe behaviours compared one another. preference
assignments attribute value assignments summarised table 6.
Solving aDPCSP simple. First, attributes x1 , . . . , x6 activated.
attributes assigned xi : di,y assignment maximises potential preference. Then,
attributes x7 , . . . , x11 activated. Here, attributes x7 , . . . , x9 assigned xi : di,l
logistic growth model highest preference. Finally, x 10 x11 assigned x10 : d10,h
x11 : d11,h Holling models highest preference inconsistent
logistic model committed earlier. resulting solution satisfies following set assumptions:
{(relevant growth prey1),
(relevant growth prey2),
(relevant growth predator),
(relevant competition prey1 prey2),
(relevant predation predator prey1),
(relevant predation predator prey2),
(model size-1 logistic),
(model size-2 logistic),
(model size-3 logistic),
(model predation-phen-1 holling),
(model predation-phen-2 holling)}

544

fiC OMPOSITIONAL ODEL R EPOSITORIES

SYMBOLS
relevant
growth predator

Growth

Nodes entailed
aDPCSP solution

Predator

predation
predator,prey1

Exponential

model predator
exponential

Logistic
model

Logistic

model predator
logistic

"Other"
model

othergrowth

model predator


Nodes entailed
aDPCSP solution
Applied model fragment

Predation

predationphen:
predator,prey1

LotkaVolterra
model

LotkaVolterra

model comp.
lotkavolterra

Growth

Stock +
Flows

Holling
model

Holling

model comp.
holling

Prey1

predation
predator,prey2
relevant
predation
predator,prey2

Exponential
model

othergrowth

model predator


Logistic
model

Logistic

model predator
logistic

"Other"
model

Exponential

model predator
exponential

Predation

predationphen:
predator,prey2

LotkaVolterra
model

LotkaVolterra

model comp.
lotkavolterra

Growth

Stock +
Flows

Holling
model

Holling

model comp.
holling

Prey2
relevant
growth prey2

Exponential
model

Model fragment
applied

relevant
predation
predator,prey1

relevant
growth prey1

Assumptions
aDPCSP solution

Stock +
Flows

Exponential
model

othergrowth

model predator


Logistic
model

Logistic

model predator
logistic

"Other"
model

Exponential

model predator
exponential

relevant
competition
prey1,prey2

Competition

competitionphen:
prey1,prey2

competition
prey1,prey2

Figure 13: Deducing scenario model model space, given set assumptions

4.4 Sample scenario model
Figure 13 shows scenario model deduced set assumptions exploiting model space. nodes corresponding aforementioned assumptions
logically follow assumption set indicated Figure.
combining participants relations resulting scenario model, model given
Figure 14 drawn. model corresponds one ecologist would draw
logistic growth Holling predation models regarded appropriate task hand.

5. Conclusion Future Work
article presented novel approach compositional modelling enables construction
models ecological systems. work differs existing approaches automatically
translates compositional modelling problem aDCSP (order-of-magnitude) preference valuations. several benefits method.
use translation algorithm converts compositional modelling problem
aDCSP allows criteria formalised. importantly, enables efficient, existing
future, aDCSP solution techniques effectively applied solving compositional modelling
problems.
545

fiGrowth

Growth

B1 = b1 N1

D1 = 1 N 1 1

dt N1

B2 = b2 N2

D2 = 2 N 2 2

dt N2

= B1 D1 P31

= B2 D2 P32

Holling

K EPPENS & HEN

s31

K1

d1

1 =

N1
K1

+

P32 =

b2
s32

w12 N2
K1

th,31

K3

Logistic

3 =

K2

w21 N1
K2

+

N2
K2

Logistic

Growth

B3 = b 3 N 3

b3

2 =

th,32

N3
K3

D3 = 3 N 3 3

dt N3

d2

s32 N2 N3
1+s32 N2 th,32

546

P31 =

b1

Holling

s31 N1 N3
1+s31 N1 th,31

= B3 3

d3
Logistic

Figure 14: Sample scenario model 1 predator 2 competing prey scenario

fiC OMPOSITIONAL ODEL R EPOSITORIES

extension aDCSPs (order-of-magnitude) preferences (to form aDPCSPs)
permits incorporation softer requirements compositional modelling problem.
paper, order-of-magnitude preferences employed express appropriateness alternative model types certain phenomena. considerations may described hard
constraints physical systems domain3 , subjective less understood problem
domains, ecological modelling domain. approach presented herein provides means
capture represent subtlety flexible model design decisions.
theoretical ideas presented article applied real-world ecological modelling problems. paper, demonstrated resultant compositional modeller
employed create repository population dynamics models. approach
applied automated model construction large complex ecosystems MODMED
model Mediterranean vegetation (Legg et al., 1995), reported Keppens (2002).
practical theoretical issues need addressed, however. practical side, types ecological model design decisions, represented assumptions
assumption classes, supported inference mechanisms, extended. Ecological
systems tend involve interrelated populations individuals, instead functional compositions
individual components physical systems. One particularly important type design decision
ecological modelling therefore granularity. requires introduction novel representation formalisms inference mechanisms aggregation disaggregation. Initial work
considering populations single entities dividing entities sub-populations
necessary carried (Keppens & Shen, 2001a). Integration work present
aDPCSP framework requires investigation.
theoretical side, analysis complexity present approach rather informal.
Much remains done regard, especially comparing complexity existing
compositional modellers. comparison, additional work required adapt current translation procedure suit existing compositional modelling problems. compositional
modellers exponential complexity, however. employ problem-specific solution algorithms, little known opportunities improving efficiency. work hopes
first step toward understanding important issue.

Acknowledgments
work partly supported UK-EPSRC grant GR/S63267. first author
supported College Science Engineering scholarship University Edinburgh.
grateful Robert Muetzelfeldt helpful discussions assistance research
reported, whilst taking full responsibility views expressed here. Thanks go
anonymous referees constructive comments useful revising earlier
version paper.

References
Binger, B., & Hoffman, E. (1998). Microeconomics Calculus. Longman.
3. so-called operating conditions, stating range values certain variables within use
certain assumptions permitted.

547

fiK EPPENS & HEN

Bistarelli, S., Montanari, U., & Rossi, F. (1997). Semiring-based constraint satisfaction optimization. Journal ACM, 44(2), 201236.
Bobrow, D., Falkenhainer, B., Farquhar, A., Fikes, R., Forbus, K., Gruber, T., Iwasaki, Y., & Kuipers,
B. (1996). compositional modeling language. Proceedings 10th International
Workshop Qualitative Reasoning Physical Systems, pp. 1221.
Bradley, E., Easley, M., & Stolle, R. (2001). Reasoning nonlinear system identification.
Artificial Intelligence, 133, 139188.
Dague, P. (1993a). Numeric reasoning relative orders magnitude. Proceedings
National Conference Artificial Intelligence, pp. 541547.
Dague, P. (1993b). Symbolic reasoning relative orders magnitude. Proceedings
13th International Joint Conference Artificial Intelligence, pp. 15091514.
de Kleer, J. (1986). assumption-based TMS. Artificial Intelligence, 28, 127162.
de Kleer, J. (1988). general labeling algorithm assumption-based truth maintenance.
Proceedings 7th National Conference Artificial Intelligence, pp. 188192.
Easley, M., & Bradley, E. (1999). Generalized physical networks automated model building.
Proceedings 16th International Joint Conference Artificial Intelligence, pp. 1047
1053.
Falkenhainer, B., & Forbus, K. (1991). Compositional modeling: finding right model
job. Artificial Intelligence, 51, 95143.
Ford, A. (1999). Modeling Environment - Introduction System Dynamics Modeling
Environmental Systems. Island Press.
Forrester, J. (1968). Principles Systems. Wright-Allen Press, Cambridge, MA, USA.
Hart, P., Nilsson, N., & Raphael, B. (1968). formal basis heuristic determination
minimal cost paths. IEEE Transactions Systems, Science Cybernetics, SSC-4(2), 100
107.
Heller, U., & Struss, P. (1998). Diagnosis therapy recognition ecosystems - usage modelbased diagnosis techniques. Proceedings 12th International Symposium Computer
Science Environment Protection.
Heller, U., & Struss, P. (2001). Transformation qualitative dynamic models - application hydroecology. Hotz, L., Struss, P., & Guckenbienl, T. (Eds.), Intelligent Diagnosis Industrial
Applications, pp. 95106. Shaker Verlag.
Holling, C. (1959). characteristics simple types predation parasitism. Canadian
Entomologist, 91, 385398.
Karnopp, D., Margolis, D., & Rosenberg, R. (1990). System Dynamics: United Approach (Second
Edition edition). John Wiley & Sons, Inc.
Keppens, J. (2002). Compositional Ecological Modelling via Dynamic Constraint Satisfaction
Order-of-Magnitude Preferences. Ph.D. thesis, University Edinburgh.
Keppens, J., & Shen, Q. (2001a). Disaggregation compositional modelling ecological systems
via dynamic constraint satisfaction. Proceedings 15th International Workshop
Qualitative Reasoning Physical Systems, pp. 2128.
548

fiC OMPOSITIONAL ODEL R EPOSITORIES

Keppens, J., & Shen, Q. (2001b). compositional modelling. Knowledge Engineering Review,
16(2), 157200.
Keppens, J., & Shen, Q. (2002). supporting dynamic constraint satisfaction order magnitude preferences. Proceedings 16th International Workshop Qualitative Reasoning Physical Systems, pp. 7582.
Langley, P., Sanchez, J., Todorovski, L., & Dzeroski, S. (2002). Inducing process models
continuous data. Proceedings 19th International Conference Machine Learning,
pp. 347354.
Legg, C., Muetzelfeldt, R., & Heathfield, D. (1995). Modelling vegetation dynamics mediterranean ecosystems: Issues scale. Proceedings 39th Symposium International
Association Vegetation Science.
Levy, A., Iwasaki, Y., & Fikes, R. (1997). Automated model selection simulation based
relevance reasoning. Artificial Intelligence, 96, 351394.
Lotka, A. (1925). Elements physical biology. Williams & Wilkins Co., Baltimore.
Malthus, T. (1798). essay principle population. Printed J. Johnson St. Pauls
Church Yard, London, England.
Miguel, I., & Shen, Q. (1999). Hard, flexible dynamic constraint satisfaction. Knowledge
Engineering Review, 14(3), 199220.
Miguel, I., & Shen, Q. (2001a). Solution techniques constraint satisfaction problems: Advanced
approaches. Artificial Intelligence Review, 15(4), 269293.
Miguel, I., & Shen, Q. (2001b). Solution techniques constraint satisfaction problems: Foundations. Artificial Intelligence Review, 15(4), 243267.
Minton, S., Johnston, M., Philips, A., & Laird, P. (1992). Minimizing conflicts: heuristic repair
method constraint satisfaction scheduling problems. Artificial Intelligence, 58, 161
205.
Mittal, S., & Falkenhainer, B. (1990). Dynamic constraint satisfaction problems. Proceedings
8th National Conference Artificial Intelligence, pp. 2532.
Nayak, P., & Joskowicz, L. (1996). Efficient compositional modeling generating causal explanations. Artificial Intelligence, 83, 193227.
Nicholson, A., & Bailey, V. (1935). balance animal populations. Proceedings Zoological Society London, 1, 551598.
Raphael, B. (1990). A* algorithm. Shapiro, S.C. (Ed.), Encyclopedia Artificial Intelligence,
Vol. 1, pp. 13. John Wiley & Sons.
Rickel, J., & Porter, B. (1997). Automated modeling complex systems answer prediction
questions. Artificial Intelligence, 93, 201260.
Rogers, D. (1972). Random search insect population models. Journal Animal Ecology, 41,
369383.
Schiex, T., Fargier, H., & Verfaillie, G. (1995). Valued constraint satisfaction problems: Hard
easy problems. Proceedings 14th International Joint Conference Artificial Intelligence, pp. 631637.
549

fiK EPPENS & HEN

Thompson, W. (1929). relative value parasites predators biological control
insect pests. Bull. Etnomol. Res., 19, 343350.
Todorovski, L., & Dzeroski, S. (1997). Declarative bias equation discovery. Proceedings
14th International Conference Machine Learning, pp. 432439.
Todorovski, L., & Dzeroski, S. (2001). Using domain knowledge population dynamics modeling equation discovery. Proceedings 12th European Conference Machine
Learning, pp. 478490.
Tsang, E. (1993). Foundations Constraint Satisfaction. Academic Press, London San Diego.
Verfaillie, G., & Schiex, T. (1994). Solution reuse dynamic constraint satisfaction problems.
Proceedings 12th National Conference Artificial Intelligence, pp. 307312.
Verhulst, P. (1838). Recherches mathematiques sur la loi daccroissement de la population. Nouveaux memoires de lacademie royale des sciences et belles-lettres de Bruxelles, 18, 138.
Volterra, V. (1926). Fluctuations abundance species considered mathematically. Nature,
118, 558560.

550


