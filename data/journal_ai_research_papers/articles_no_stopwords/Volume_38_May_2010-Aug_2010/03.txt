Journal Artificial Intelligence Research 38 (2010) 513-534

Submitted 04/10; published 08/10

Algorithms Closed
Rational Behavior (CURB) Sets
Michael Benisch
George B. Davis
Tuomas Sandholm

mbenisch@cs.cmu.edu
gbd@cs.cmu.edu
sandholm@cs.cmu.edu

School Computer Science
Carnegie Mellon University
5000 Forbes Ave
Pittsburgh, PA 15213 USA

Abstract
provide series algorithms demonstrating solutions according fundamental game-theoretic solution concept closed rational behavior (CURB) sets
two-player, normal-form games computed polynomial time (we discuss extensions n-player games). First, describe algorithm identifies players best
responses conditioned belief player play within given subset
strategy space. algorithm serves subroutine series polynomial-time
algorithms finding minimal CURB sets, one minimal CURB set, smallest
minimal CURB set game. show complexity finding Nash equilibrium exponential size games smallest CURB set. Related this,
show smallest CURB set arbitrarily small portion game,
arbitrarily larger supports enclosed Nash equilibrium.
test algorithms empirically find commonly studied academic games
tend either large small minimal CURB sets.

1. Introduction
noncooperative multi-agent settings, game-theoretic solution concepts help players choose
strategies, help modelers predict outcomes, help mechanism designers guarantee properties systems create. Significant attention given algorithms computing solutions according concepts subgame perfect Nash equilibrium (e.g., minimax
search --pruning), Nash equilibrium (Lemke & Howson, 1964; Porter, Nudelman,
& Shoham, 2004; Sandholm, Gilpin, & Conitzer, 2005), correlated equilibrium (Gilboa &
Zemel, 1989), iterative dominance (Knuth, Papadimitriou, & Tsitsiklis, 1988; Conitzer &
Sandholm, 2005a), related concepts (Conitzer & Sandholm, 2005b).
Nash equilibrium concept, player weakly prefers strategy
long players deviate theirs, remains important pointvalued game-theoretic solution concept. However, shown that, even twoplayer games binary utilities, computing single Nash equilibrium PPAD-complete
(Chen & Deng, 2006; Abbott, Kane, & Valiant, 2005), suggesting algorithms exist
computing equilibria worst-case polynomial time (Daskalakis, Goldberg, &
Papadimitriou, 2009).
c
2010
AI Access Foundation. rights reserved.

fiBenisch, Davis, & Sandholm

fundamental solution concepts known advantages
Nash equilibria, andas showsolutions according concepts
found polynomial time, even worst case. Specifically, study fundamental
concept closed rational behavior (CURB) strategy sets two-player, normal-form
games. game multiple Nash equilibria, point, single
(potentially mixed) strategy player. contrast, CURB set contain multiple
strategies player, stable long players choose (potentially mixed)
strategies within set.
CURB sets based notion rationalizability, introduced Pearce
(1984) Bernheim (1984). Rationalizability is, now, widely known, robust gametheoretic solution concept used study various applications, first-price
auctions (Battigalli & Siniscalchi, 2003). main insight rationality restricts players
ever playing strategies best responses given beliefs hold
opponents. Strategies best responses set consistent beliefs
opposing strategies said rationalizable. two-player games, process
iteratively eliminating strategies dominated, strategies best
responses opponent strategy, captures concept rationalizability. emulates
players assumptions opponent never play strategy best
response one players remaining strategies (Pearce, 1984).
set players rationalizable strategies property players best
response pure mixed strategy inside set lies outside set words,
set CURB. However, CURB set may CURB subsets, demonstrates
CURB sets extend notion rationalizability. Basu Weibull (1991) introduced
notion minimal CURB set, CURB set contain CURB subsets,
proved minimal CURB set guaranteed contain supports least
one Nash equilibrium.
minimal CURB set solution concept since motivated several perspectives academic literature, including following:
Mixed-strategy Nash equilibria (the type guaranteed exist every game)
highly unstable, player may indifferent strategies.
Strict Nash equilibria, players strictly prefer strategies equilibrium,
stable alternative, guaranteed exist. Minimal CURB sets
always exist referred nearest set-valued generalization
strict Nash equilibria, since smallest sets strategies include
ways choosing among indifferences equilibrium (Basu & Weibull, 1991).
CURB set viewed subspace strategies within best-response
dynamic (even best-response dynamic mixed strategies) stay. Thus, CURB
sets used solution concept describe strategy subspace
iteratively adapting agents eventually settle (Hurkens, 1995).
Voorneveld et.al. enumerated number properties minimal CURB sets
illustrate stability set-based solution concepts point-valued concepts,
Nash equilibria (Voorneveld, Kets, & Norde, 2005).
514

fiAlgorithms Closed Rational Behavior (CURB) Sets

order solution concept operational, must accompanied algorithms applying it. Finding minimal CURB sets previously considered
challenging (Pruzhansky, 2003), and, prior work CURB sets, little done
problem computational standpoint. knowledge, work
predate Pruzhansky, studied sequential games perfect information.
games relatively simple, contain exactly one minimal CURB set,
straightforward algorithm quickly find exploiting sequential representation
(Pruzhansky, 2003). paper, present first thorough computational treatment
CURB sets general two-player games. show that, settings, minimal CURB
sets actually easy find: time complexity polynomial size game,
even worst case.
primary source complexity algorithms linear programming-based
subroutine finding players best responses (i.e., utility-maximizing pure strategies)
conditioned belief player play within given subset
strategy space. problem solved fast two players, case involves
solving simple linear feasibility program, mathematical program use
degree p 1, p number players, p = 3 constraints already
quadratic. plus side, CURB set algorithms make polynomial number
calls subroutine. future research able identify polynomial-time algorithms
finding players best responses n-player games, CURB set algorithms
polynomial time settings. Additionally, algorithms useful
templates development algorithms compute related solution concepts
n-player games (Brandt, Brill, Fischer, & Harrenstein, 2009; Jordan & Wellman, 2010).
rest paper organized follows. begin preliminaries
notations definitions. Next, present analyze algorithm finding
conditional best responses, serves main subroutine CURB set finding
algorithms. present analyze family polynomial-time algorithms twoplayer, normal-form games compute games minimal CURB sets, single one
minimal CURB sets, smallest minimal CURB set. Finally, discuss additional
applications results, including potential CURB set algorithms bound
theoretical complexity finding Nash equilibria.

2. Preliminaries
describe analyze algorithms classic game-theoretic setting two-player,
normal-form game represented matrix rows corresponding pure strategies
(or actions) one player, player r, columns corresponding pure strategies
other, player c. (For shorthand, often omit term pure refer pure
strategy simply strategy.) typical game theory, players assumed
fully-rational, utility-maximizing agents.
row game matrix corresponds strategy, sr , set player rs
strategies, Sr . Likewise, column corresponds strategy, sc , set
player cs strategies, Sc . cell corresponding strategies sr sc contains two entries,
one indicating real-valued utility row player sr sc played, ur (sr , sc ),
indicating column player two strategies played,
515

fiBenisch, Davis, & Sandholm

uc (sr , sc ). Using entities, refer game, G, tuple, G = hSr , Sc , ur , uc i.
size game, refer n, total number strategies contains,
n = |Sr | + |Sc |.
mixed strategy, mixture, probability distribution pure strategies,
function,
Pi , maps player pure strategies probability, mi : Si
[0, 1] sSi mi (s) = 1. supports mixture pure strategies
mixture non-zero probability. set possible mixtures supports
set strategies, Si , denoted (Si ), thought simplex degree
|Si | 1. pure strategy represented point-mass mixture, mixture
probability mass one strategy.
strategy profile set pure mixed strategies, one player.
mixed-strategy profile played, players utility assumed expected utility, given summing players utility possible pure-strategy profile
weighted

Pprofiles joint probability according mixtures, e.g., ur (mr , mc ) =
P

(s
)
r
r
sc Sc mc (sc )ur (sr , sc ). occasionally use notation refer
sr Sr
player players player i. used subscript strategy-related
entity two players, intend refer one instance entity
per player (e.g., mi mixed-strategy profile containing one mixture per player
i).
Player best responses mixed strategy player(s), mi , given
function (mi ). pure strategies maximize player utility
player(s) play mi .
set players pure strategies, Si , define (Si ) function

returns player best responses every mixture supports Si , (Si ) =
mM (Si ) (m). Section 3, describe algorithm computing pure strategies
(Si ) serves subroutine CURB set algorithms, refer
strategies computes conditionally rational. define (S) (without subscript i)
union sets (Si ) players.
CURB set, S, formally defined set pure strategies (with least one strategy
player) contains best responses mixture itself: CURB
players believe strategy outside played positive probability
opponents, strategies indeed played rational players. Using
notation above, set, S, CURB (S) S. (The entire game trivially CURB
definition.) refer number strategies CURB set size.
intersection two CURB sets, S1 S2 , set strategies attained taking
intersection strategy sets, SI = S1 S2 . Two CURB sets overlap share
strategy (i.e., intersection non-empty).
Nash equilibrium pure- mixed-strategy profile, {mr , mc }, players
strategy least good best response others, ur (mr , mc ) = ur (sr , mc )
uc (mr , mc ) = uc (mr , sc ), sr r (mc ) sc c (mr ). strict Nash equilibrium
pure-strategy profile, {sr , sc }, players strategy best response
others, r (sc ) = {sr } c (sr ) = {sc }. CURB set contains one strategy per
player pure-strategy Nash equilibrium.
516

fiAlgorithms Closed Rational Behavior (CURB) Sets

3. Finding Conditional Best Responses
Finding players best responses conditioned belief player
play within subset total strategy space, problem interest
right, plays central role computation CURB sets. section describes
polynomial-time algorithm, conditionally rational, that. algorithm row player; column players variant symmetric. inputs
algorithm set row-player strategies consider, Sr , set column-player
strategies may played against, Sc , row players utility function, ur .
function conditionally rational(Sr , Sc , ur )
Sr
row strategy, sr Sr
exists feasible solution following linear feasibility program:
find psc
X

p sc

= 1

(1)

sc Sc

X

X



psc ur (sr , sc )

sc Sc

psc ur (s0r , sc )

s0r Sr \ sr

(2)

sc Sc

p sc



0 sc Sc

(3)

Sr Sr sr
return Sr
row strategy, sr Sr , linear feasibility program (LFP) (i.e., linear program
objective) constructed find mixture probabilities column-player
strategies, psc , sr row players best response. constraints LFP
ensure mixture valid (sums one), row players utility playing
sr psc greater equal strategy. LFP feasible
solution, sr added set best responses returned.
computational complexity algorithms described paper depend
total number strategies game, n, complexity solving LFP
number variables constraints bounded n, denote LFP(n).
LFPs solved low-order polynomial time, even worst case, fastest
known algorithms LFPs better worst-case guarantees fastest known linear
programming algorithms (Ye, 2006). experiments, solve LFP using simplex
algorithm, exponential worst-case time complexity, known outperform
polynomial-time linear programming algorithms practice.
Proposition 1. conditionally rational algorithm returns players best responses every mixture input strategy set, nothing else. worst-case time
complexity (n) LFP(n).
517

fiBenisch, Davis, & Sandholm

Proof. Since conditionally rational runs program strategies includes
return set LFP feasible, must correct. Since LFP
executed strategy, size bounded n, conditionally rational
complexity shown.

4. Finding CURB Sets
turn attention problem finding CURB sets. algorithm
finds smallest CURB set contains given seed strategy within given subgame.
(The returned set necessarily minimally CURB.) algorithm repeatedly alternates
players, time calling conditionally rational add strategies necessary maintaining CURB property. iteration passes without strategies
added, algorithm converged.
function min containing CURB(sr , G = hSr , Sc , ur , uc i)
Sr {sr }, Sc
converged false
converged
converged true
{r, c}
,u )
Si0 conditionally rational(Si , Si


0
Si \ Si 6=
converged false

Si Si Si0
return Sr Sc
worth noting second-to-last line algorithm (Si Si Si0 )
necessary merge old strategies, Si , newly identified strategies, Si0 ,
Si0 always superset Si . If, instead, Si replaced Si0 , would
possible seed strategy eliminated algorithms first iteration.
example, consider following game.

sr1
sr2

sc1
1,1
0,1

sc2
0,0
1,0

strategy sr2 used seed, first iteration Sr initialized {sr2 }, Sc
set {sc1 }, finally Sr set {sr1 }. Thus, without merge algorithm
would output subgame contain seed strategy.
Proposition 2. min containing CURB algorithm worst-case runtime (n2 )
LFP(n).
Proof. Every two calls made conditionally rational must add strategy
return set, min containing CURB terminate. Since n strategies added
way, complexity min containing CURB (n2 ) LFP(n).
518

fiAlgorithms Closed Rational Behavior (CURB) Sets

Theorem 1. min containing CURB algorithm correct, is, returned set, ,
smallest set strategies 1) contains given seed strategy, sr , 2)
CURB.
Proof. convergence algorithm implies strategies outside best
responses mixture supports . Therefore, (S ) , CURB.
prove smallest CURB set containing sr , use induction
strategies added.
Base Case: Initially, contains sr c (sr ). point, subset
smallest CURB set containing sr .
Inductive Step: time new strategy, , added , necessarily best
response mixture, (S ), strategies already contained . Since
strategies never removed execution, remain valid mixture.
Therefore, strategy added necessary maintain CURB property.
present three algorithms use min containing CURB determine
games minimal CURB sets. facilitate discussion algorithms, first present
three results regarding CURB set structure, which, best knowledge,
previously known.
Theorem 2. two intersecting strategy sets CURB, intersection
CURB.
Proof. Consider two CURB sets, SA SB , nonempty intersection, SI .
mixture strategies SI belonging (without loss generality) row player,
exists set pure strategies column players best responses, Sc . SA
CURB, contains strategies Sc (i.e., Sc SA ); likewise Sc SB .
Therefore, Sc within intersection, SI .
Since intersection two CURB sets must CURB contained sets,
following two corollaries.
Corollary 1. Distinct minimal CURB sets cannot overlap (i.e., share rows columns).
Corollary 2. strategy belongs one minimal CURB set.
4.1 Finding Minimal CURB Sets
broadest query one make regarding minimal CURB set structure game
asking minimal CURB sets. useful, example, adaptive
agent context identify regions strategy space learning agents likely
settle (Hurkens, 1995).
MC algorithm first checking pair strategies size-two
CURB sets (i.e., pure-strategy Nash equilibria) adding return set minimal
CURB sets. Since operation (n2 ), done preprocessing step
without affecting algorithms worst-case time complexity, strategies finds
eliminated future consideration. MC algorithm determines
minimal CURB sets remaining subgame calling min containing CURB
row strategy, turn, seed.
519

fiBenisch, Davis, & Sandholm

first, call min containing CURB using entire remaining subgame input.
However, accelerate subsequent calls min containing CURB maintaining map
strategy smallest CURB set discovered far.
(The entries added map stored candidate minimal CURB sets.)
new strategy used seed, use smallest known CURB set containing strategy
second input min containing CURB. Whenever smaller CURB set containing
new seed identified, eliminate candidate minimal CURB sets contain
newly found one. strategy used seed, MC terminates
returns remaining candidate minimal CURB sets.
Proposition 3. MC algorithm finds games minimal CURB sets,
nothing else. worst-case runtime (n3 ) LFP(n). best-case runtime (n2 ).
Proof. Corollary 1, minimal CURB set strategy must either equal,
contained by, CURB set strategy found. Therefore, restricting
min containing CURB search smallest CURB set strategy
found far valid, main loop MC discover minimal CURB sets
game. Since CURB set minimal must contained one minimal
CURB sets discovered, removed smaller CURB set discovered (or added
smaller set previously discovered).
worst case, MC must call min containing CURB n times, full game
parameter, giving time complexity (n3 ) LFP(n). best-case complexity follows
best-case game strategy part pure-strategy Nash equilibrium.
4.2 Finding One Minimal CURB Set
Rather finding minimal CURB sets game, may desirable find single
minimal CURB set. complete quickly, first choose random seed strategy
check part size-two CURB sets (i.e., part pure-strategy Nash equilibrium),
takes O(n) time. fails, use min containing CURB algorithm
randomly-chosen strategy seed full game second input. Since
resulting CURB set might minimal, recur within choosing, seed,
contained strategy yet used. repeat strategies
current set used seeds, point terminate return remaining
set. constitutes one MC algorithm.
game one CURB set, one MC faster MC
never leave CURB set starts. exact speed one MC practice
depend first seed chosen. happens small CURB set, one MC
run fast. worst case, entire game CURB set, one MC executes
steps MC.
Proposition 4. one MC algorithm returns one games minimal CURB sets.
worst-case time complexity (n3 ) LFP(n). best-case time complexity (n).
Proof. minimal CURB sets, entire game minimally CURB
returned. minimal CURB sets, one
discovered strategy inside used seed.
520

fiAlgorithms Closed Rational Behavior (CURB) Sets

worst case, whole game minimally CURB, one MC must call
min containing CURB algorithm n times, full game input, giving time complexity (n3 ) LFP(n). best-case complexity follows best-case game
strategy CURB set size two chosen seed.
4.3 Finding Smallest Minimal CURB Set
different type query, one may interested finding one games smallest
minimal CURB sets. important, example, CURB set used future
computations complexity future computations increases size
CURB set (e.g., Nash equilibrium finding discuss later paper).
find one games smallest minimal CURB sets using pseudo-parallelization MC.
First, use preprocessor MC checks pair strategies
size-two CURB set returns one, found. fails, construct candidate set
row strategy containing strategy. insert sets priority queue,
sets containing fewest strategies given highest priority. repeatedly pop
smallest candidate set queue, add necessary best responses keep
CURB calling conditionally rational player. new strategies
added either player, resulting set inserted back queue, prioritized
based new size. algorithm terminates candidate set removed
queue fails admit new best responses. set returned one
games smallest minimal CURB sets (we denote size set n ). call
algorithm small MC.
Proposition 5. small MC algorithm returns one games smallest minimal CURB
sets. worst-case runtime (n n2 ) LFP(n). best-case runtime (n2 ).
Proof. time small MC terminates, conditionally rational called
row column strategy set new best responses added.
Therefore, returned set CURB. Since candidate sets queue must
large, larger returned set (and future exploration add strategies
sets), set least small smallest CURB set game,
games smallest CURB sets minimal.
Whenever candidate set fathomed, least one new strategy must added
small MC terminate. Since n candidate sets, n strategies returned
set, worst case n n sets fathomed termination. Since examination candidate set involves call conditionally rational, complexity
small MC claimed. Priority queue operations logarithmic size
game, worst case n n operations. Thus, overall worst-case
complexity (n n2 + n n log n) LFP(n), (n n2 ) LFP(n). proof
best-case complexity Proposition 3.
4.4 Experimental Results
implemented algorithms conducted experiments performance using instance generators main benchmark collection solving normal-form
games, GAMUT (Nudelman, Wortman, Shoham, & Leyton-Brown, 2004). GAMUT
521

fiBenisch, Davis, & Sandholm

collection includes variety commonly studied game types academic game
theory literature. specifically designed test different aspects scalability
game-solving algorithms, example, generators allow one create multiple
game instances given size.1 section show complexity algorithms depends primarily size game size smallest CURB set.
proceed explore distribution CURB set sizes different game types.
first report runtime algorithms two representative GAMUT game
distributions: random games, covariant games. Figure 1 (left) shows
minimal CURB set finding algorithms scales game size data set 1000
random, square normal-form games 20 100 strategies. results show
small MC faster MC random games, consistent time
complexities, considering many random games small CURB sets.
worst-case time complexity one MC MC same, experimentally one MC
faster needs find one minimal CURB set. see that, large
random games, small MC performs slightly better one MC, since games tend
contain small large CURB sets one MC likely start larger
ones. hand, games large CURB sets, one MC tends faster,
show later.
observed performance random games, illustrated Figure 1 (left),
typical many GAMUT instance distributions. However, show potentially
differing performance, report experiments covariant game class,
utilities players drawn distribution specified covariance.
(In experiments set covariance parameter 0.5.) class (and setting)
shown particularly challenging Nash equilibrium finding algorithms,
Lemke-Howson Porter-Nudelman-Shoham algorithms (Lemke & Howson,
1964; Porter et al., 2004). Figure 1 (right) shows MC algorithm scales similarly
random covariant games, two algorithms lose speed advantages
applied class.
distribution CURB sets random games shown solid dots Figure 2.
random games small smallest CURB sets (in fact, often sets size two),
not, tend large smallest CURB sets. hand, distribution
smallest CURB set sizes covariant games (shown Figure 2, hollow squares) almost
small smallest CURB sets many large smallest CURB sets. consistent
observed hardness games support enumeration-based Nash equilibrium
finding algorithms, typically try find equilibria small supports first (Porter
et al., 2004). disparity explains lowered performance covariant games
two minimal CURB finding algorithms time complexities dependent
size smallest minimal CURB set, small MC one MC.
Figure 3 shows distribution smallest CURB set size 1000 instances
twenty-four distributions emitted GAMUT generators. Using variety
game generators, done here, become primary way testing game-solving
algorithms (Porter et al., 2004; Sandholm et al., 2005), used parameter
settings distributions prior papers. covariant games, suffixes Pos,
1. benchmark GAMUT games fixed size, Chicken, Prisoners
Dilemma, Battle Sexes, trivial solve computational perspective.

522

fiAlgorithms Closed Rational Behavior (CURB) Sets

Random games
500

all_MC
one_MC
small_MC

400
300

Runtime (sec)

Runtime (sec)

500

Covariant games

200
100
0

all_MC
one_MC
small_MC

400
300
200
100
0

20 30 40 50 60 70 80 90 100
Game size (n)

20 30 40 50 60 70 80 90 100
Game size (n)

Figure 1: Scalability algorithms game size random (left) covariant (right)
games.

Small games (n = 20)
100

Covariant
Random

80

% games

% games

100

Large games (n = 40)

60
40
20
0

80

Covariant
Random

60
40
20
0

0

5

10

15

20

0 5 10 15 20 25 30 35 40

Smallest CURB set size

Smallest CURB set size

Figure 2: Distribution smallest CURB set size random covariant (r = 0.5) games,
n = 20 n = 40 (3,000 games generated distribution
value n).

Rand, Zero refer positive, random, zero covariance parameters, respectively.
distributions take graph input, CG, RG, SG refer complete,
random, star graphs.
distributions, random covariant games, exhibited mediumsized smallest CURB sets. instances smallest CURB set extreme:
either pure strategy equilibrium entire game. generators,
instances lie extreme. Interestingly, generators (e.g., Polymatrix)
produced significant number games CURB sets one specific, nonextremal sizes. notable using different graph parameters Local Effect
Polymatrix games effect smallest CURB set size distributions, suggesting
523

fiBenisch, Davis, & Sandholm

BidirectionalLEG-CG

20

0

0

5

10

15

20

% games

% games

% games
0

0

10

15

0

0

0

5

10

15

20

PolymatrixGame-CG
100
80
60
40
20
0
0

5
10
15
20
Smallest CURB set size

TravelersDilemma
100
80
60
40
20
0

5
10
15
20
Smallest CURB set size

5
10
15
20
Smallest CURB set size

20

Smallest CURB set size

0

UniformLEG-SG

5
10
15
20
Smallest CURB set size

15

CovariantGame-Zero

5
10
15
20
Smallest CURB set size

100
80
60
40
20
0

10

100
80
60
40
20
0

PolymatrixGame-SW

5
10
15
20
Smallest CURB set size

5

Smallest CURB set size

20

100
80
60
40
20
0

UniformLEG-RG

0

5

100
80
60
40
20
0

5
10
15
20
Smallest CURB set size

100
80
60
40
20
0

0

MinimumEffortGame
% games

0

20

Smallest CURB set size

% games

% games

20

100
80
60
40
20
0

15

100
80
60
40
20
0

PolymatrixGame-Road

% games
5
10
15
20
Smallest CURB set size

15

10

CovariantGame-Rand

% games

% games

% games

0

UniformLEG-CG

0

10

5

100
80
60
40
20
0

Smallest CURB set size

LocationGame

5
10
15
20
Smallest CURB set size

100
80
60
40
20
0

5

100
80
60
40
20
0

PolymatrixGame-RG

0

0

Smallest CURB set size

5
10
15
20
Smallest CURB set size

100
80
60
40
20
0

20

% games
0

DispersionGame

0

15

100
80
60
40
20
0

Smallest CURB set size

100
80
60
40
20
0

10

CovariantGame-Pos
% games

% games

BinaryRandomGame
100
80
60
40
20
0

5

Smallest CURB set size

% games

15

% games

10

Smallest CURB set size

BidirectionalLEG-SG

% games

5

BidirectionalLEG-RG
100
80
60
40
20
0

5
10
15
20
Smallest CURB set size

WarOfAttrition
% games

0

100
80
60
40
20
0

% games

% games

% games

BertrandOligopoly
100
80
60
40
20
0

100
80
60
40
20
0
0

5
10
15
20
Smallest CURB set size

Figure 3: Distribution smallest CURB set size sets 1000 games n = 20
various GAMUT distributions.

type graph used may change fundamental structure types
games.
better understand minimal CURB set finding algorithms scale size
smallest CURB set, bucketed n = 20 random covariant games according
size smallest CURB sets. (For n = 40, buckets medium-sized smallest
CURB sets nearly empty, making impossible us estimate mean runtimes
meaningful accuracy.) Figure 4 plots average runtime 95% confidence intervals
bucket. games small CURB sets, small MC fastest,
outperformed one MC MC size smallest CURB set grows.
524

fiAlgorithms Closed Rational Behavior (CURB) Sets

somewhat surprising runtime performance latter two algorithms due
leveraging information across calls min containing CURB different seeds.
small MC performs searches parallel, information unavailable.
Random games
2

all_MC
one_MC
small_MC

1.5

Runtime (sec)

Runtime (sec)

2

Covariant games

1
0.5
0

all_MC
one_MC
small_MC

1.5
1
0.5
0

0

5
10
15
20
Smallest CURB set size

0

5
10
15
20
Smallest CURB set size

Figure 4: Average runtime games n = 20, varying smallest CURB set sizes.

5. CURB Sets Nash Equilibria
Minimal CURB sets Nash equilibria model strategy subspaces mutually
reinforced given rationality agents common knowledge. original
work minimal CURB sets, Basu Weibull showed every minimal CURB set
contains supports least one Nash equilibrium (Basu & Weibull, 1991). observe
result suggests secondary use finding minimal CURB sets: algorithms
used preprocess game Nash equilibrium finding algorithm restrict
attention one games minimal CURB sets, rather running entire
game. show, theoretically yield arbitrarily large reduction
search space.
common prior preprocessing technique Nash equilibrium finding, iterated
removal dominated strategies, attempts eliminate strategies cannot played
probability Nash equilibrium (Knuth et al., 1988; Gilboa, Kalai, & Zemel, 1993).
true another recent preprocessing technique, generalized eliminability
method (Conitzer & Sandholm, 2005b). One comparative advantage minimal CURB
set-based elimination eliminate strategies played equilibria,
guaranteeing resulting set still contains supports least one.
First, show CURB set-based preprocessor reduce search space size
arbitrary amount even games prior preprocessing techniques cannot eliminate
anything.
Theorem 3. r,c,r0 , c0 r 2, c 2, 1 < r0 r, 1 < c0 c,
exists normal form games size r c, following properties:
a) contains minimal CURB set shape r0 c0 ,
525

fiBenisch, Davis, & Sandholm

b) iterated elimination dominated strategies (even domination mixed strategies)
cannot eliminate strategies,
c) recursive preprocessing technique (that eliminate strategies belong
equilibrium long equilibrium remains) (Conitzer & Sandholm, 2006)
eliminate one strategy per player,
d) general eliminability method (Conitzer & Sandholm, 2005b) cannot eliminate
strategies.
Proof. first present family games, . Let r0 c0 denote game family
size r0 c0 . following generator produces game r0 , c0 2. Assign
utilities,
u(sr1 , sc1 ) = u(sr2 , sc2 ) = (0, 1) u(sr1 , sc2 ) = u(sr2 , sc1 ) = (1, 0).
0

Then, [2, b r2 c], set
0

, 1) u(sr2i1 , sc2 ) = ( 2i2
u(sr2i1 , sc1 ) = ( r 2i+2
r0
r 0 , 0),
0

u(sr2i , sc1 ) = ( r (2i1)
, 0) u(sr2i , sc2 ) = ( 2i1
r0
r 0 , 1).
r0 odd one remaining row. case, set following utilities,
0

1
r0 odd, u(sr0 , sc1 ) = ( r10 , 12 ) u(sr0 , sc2 ) = ( r r1
0 , 2 ).
0

Next, j [2, b c2 c], set
0

u(sr1 , sc2j1 ) = (0, c 2j+2
) u(sr2 , sc2j1 ) = (1, 2j2
c0
c0 ),
0

u(sr1 , sc2j ) = (1, c (2j1)
) u(sr2 , sc2j ) = (0, 2j1
c0
c0 ).
c0 odd one remaining column. case, set following utilities,
0

c0 odd, u(sr1 , sc0 ) = ( 12 , c10 ) u(sr2 , sc0 ) = ( 21 , c c1
0 ).
example, game 3,4 follows.
3,4
sr1
sr2
sr3

sc1
0,1
1,0
1 1
3, 2

sc2
1,0
0,1
2 1
3,2

sc3
0, 12
1, 12
-3,-3

sc4
1, 14
0, 34
-3,-4

game generated way Nash equilibrium row player mixes
evenly first two strategies, column player mixes evenly among
strategies. game equilibrium column player mixes evenly
first two strategies, row player mixes evenly among strategies. Thus,
every strategy r0 c0 part equilibrium. Additionally, column strategy
526

fiAlgorithms Closed Rational Behavior (CURB) Sets

best response mixture first two row strategies (and, column strategy,
one two best response), vice-versa. Thus, r0 c0 single minimal CURB
set includes entire game.
construct r c game, minimally CURB r0 c0 subset, putting
game r0 c0 top left game (rr0 )(cc0 ) bottom right. utilities
set arbitrary negative values, two exactly same. resulting
game shown Figure 5.

Figure 5: r c game arbitrary reduction r0 c0 CURB set, irreducible prior
techniques.
irreducible (iterated) dominance general eliminability every
strategy participates Nash equilibrium. game irreducible (other
single strategy per player) recursive preprocessor row players utilities
distinct within column, column players utilities distinct within
row (except last row column game, odd number rows
columns).
Three factors curb promise minimal CURB set algorithms powerful preprocessors Nash equilibrium finding. First, fastest Nash equilibrium finding algorithms,
requiring exponential time worst case, tend run faster CURB set
finding algorithms many types games (at least best known implementations
algorithms). Second, smallest CURB set arbitrarily large (up size
entire game, case preprocessor eliminate strategies
consideration). Third, show, even smallest minimal CURB set
identified, remaining search space (CURB set size) arbitrarily larger
size supports contained Nash equilibrium.
prove this, use following family games contain large minimal
CURB sets small-support equilibria. integer k > 0, define game k
follows. previous proof, assign utilities u(sr1 , sc1 ) = u(sr2 , sc2 ) = (0, 1)
u(sr1 , sc2 ) = u(sr2 , sc1 ) = (1, 0), let Z arbitrarily large value (essentially ).
Then, [3, 2 + k],
u(sri , sc1 ) = (Z, ), u(sr1 , sci ) = (, Z),
u(sri , sci ) = (0, 0),
u(sri , sci1 ) = (1 + , 0), u(sri1 , sci ) = (0, 1 + ),
527

fiBenisch, Davis, & Sandholm

j > + 1 j 2 + n,
u(sri , scj ) = (0, Z), u(srj , sci ) = (Z, 0)
example, game 2 follows.
2
sr1
sr2
sr3
sr4

sc1
0,1
1,0
Z,
Z,

sc2
1,0
0,1
1+,0
Z, 0

sc3
,Z
0,1+
0,0
1+,0

sc4
,Z
0,Z
0,1 +
0,0

respect strategic structure games class, following
results.
Lemma 1. > 2, row (column) players strategy sri (sci ) best response
column (row) players strategy sci1 (sri1 ). column (row) players strategy sc1 (sr1 )
best response row (column) players strategy srn+2 (scn+2 ).
Proposition 6. k single minimal CURB set includes entire game.
Proof. Strategies sr1 , sr2 , sc1 , sc2 must included minimal CURB set,
best responses subgame containing them, subgame
admits pure-strategy Nash equilibrium. Based Lemma 1, see = 3,
row (column) players strategy sr3 (sc3 ) best response column (row) players
second strategy. forces third strategy player minimal CURB set
containing first two strategies player, inductively additional strategy
added way.
Proposition 7. k , Nash equilibrium mixed-strategy profile
sr1 , sr2 , sc1 , sc2 played probability 21 .
Proof. Assume, contradiction, case, is, exists mixture,
mr , rows Mr , comprising row players profile Nash equilibrium,
sr1
/ Mr . Along assumption, definition Nash equilibrium implies
must exist mixture, mc , columns Mc r (mc ) = Mr c (mr ) = Mc .
Since sr1 Mr assumption, exists > 1 sri lowest numbered
support Mr , definition specifies outcome, u(sri , scj ) = (0, Z),
j > + 1.
column players Nash equilibrium supports cannot contain scj ,
placing positive probability strategy lead highly negative expected
payoff playing pure strategy sc1 provides guaranteed payout least 0.
exclude strategies, sci+1 (the highest-numbered remaining column strategy)
remaining strategy, sc1 , provides non-zero utility mixtures rows
i. words, dominates column strategies row players supports Mr ,
aside one: sc1 .
528

fiAlgorithms Closed Rational Behavior (CURB) Sets

Since dominated strategies cannot played equilibrium, Mc constrained
subset {sc1 , sci+1 }. Mc contains sc1 , Mr must include srj j > 2, due
highly negative expected payoff mixture including strategies (as discussed
above). case, remaining possible equilibrium row mixture pure
strategy sr2 , best response sc3 . Since, Corollary 2, n pure
Nash equilibrium, cannot constitute equilibrium, contradicting assumption.
Alternatively, Mc include sc1 , mc must pure strategy sci+1 ,
Lemma 1 provides pure-strategy best response pure strategy > 2.
would, again, form pure strategy Nash equilibrium, shown cannot exist.
reasoning inverted show contradiction caused
assumption Mc contain sc1 .
shown row players equilibrium mixture must contain r1 r2 ,
column players equilibrium mixture must contain c1 c2 strategies
either players supports, since would lead one highly negative
utility.
game demonstrates possible construct large CURB sets
loose around supports enclosed Nash equilibrium, giving us following general
result.
Theorem 4. Nash equilibrium supports consisting two strategies player
Nash equilibrium arbitrarily large minimal CURB set.
results imply minimal CURB set algorithms always effective
preprocessors Nash equilibrium finding. However, game instances small
CURB set relatively tight minimal CURB set,2 algorithms potential
yield significant speed improvement.
Furthermore, existence polynomial-time algorithm detecting games
smallest CURB set (small MC) allows us offer following theoretical result potential
general interest.
Theorem 5. complexity finding Nash equilibrium two-player normal-form
game super-polynomial size games smallest CURB set (not
size full game).
relationship complexity finding minimal CURB set
finding Nash equilibrium surprising several ways. one, obvious
finding minimal CURB set easier finding Nash equilibrium, since,
Nash equilibria, CURB sets exponential space possible supports chosen maximization processes players. Yet theoretical, worst-case
perspective, Nash equilibrium finding PPAD-complete (which widely believed
strictly harder complexity class P) and, showed earlier paper, minimal
CURB set finding polynomial time.
worth noting games small support equilibria, include games
small CURB sets, already known easily solvable Nash equilibria
2. game relatively tight CURB set, Nash equilibrium found quickly enumerating
strategies CURB left supports.

529

fiBenisch, Davis, & Sandholm

using techniques support enumeration. particular, games whose smallest
CURB set size logarithmic full game size, support enumeration CURB
set preprocessing permit guarantee polynomial runtime finding Nash equilibrium.
CURB set preprocessing additional advantage used simplify
games larger equilibrium supports, support enumeration exponential.
example, consider Gk game class described Sandholm, Gilpin Conitzer (2005),
generates games single equilibrium, equilibrium contains half
strategies support. determined games single CURB set,
CURB set includes exactly supports equilibrium. Games class
padded, using embedding technique Theorem 3, become arbitrarily
large games without introducing additional equilibria CURB sets. games,
CURB set detection offers polynomial-time method reducing game point
algorithms based support enumeration applied.
complexity two problems (Nash equilibrium finding CURB
set finding) practice? Figure 6 shows, average runtimes smallest CURB
set finding algorithm Lemke-Howson Nash equilibrium finding algorithm (using
implementation Gambit, McKelvey, McLennan, & Turocy, 2004) seem scale similarly
input game size (when one explicitly generate pathological cases
produce exponential behavior latter, Savani & von Stengel, 2004). fact, CURB
set algorithms slower (by two orders magnitude) average Lemke-Howson.
experimental performance agrees intuition, reverse theoretical
state knowledge regarding worst-case complexity.

1000

small_MC
Lemke Howson

100
10
1
0.1
0.01

Covariant games
Logscale runtime (sec)

Logscale runtime (sec)

Random games

20 30 40 50 60 70 80 90 100
Game size (n)

1000

small_MC
Lemke Howson

100
10
1
0.1
0.01
20 30 40 50 60 70 80 90 100
Game size (n)

Figure 6: Average runtime 95% confidence intervals small MC Lemke Howson
function game size.

worth pointing algorithm builds part work one
CURB set problems (finding minimal CURB sets) presented working
paper (Klimm, Sandholm, & Weibull, 2010), appears scale favorably
ours. However, algorithm directly compared Lemke-Howson
Nash equilibrium finding algorithms, relative value related preprocessing
remains seen.
530

fiAlgorithms Closed Rational Behavior (CURB) Sets

root cause complexity Nash equilibrium search proved elusive, two
candidates considered potential culprits shown affect worstcase complexity: games two players binary utilities difficult
general case, even restrictions apply simultaneously (Chen & Deng, 2006; Abbott
et al., 2005). fact bounding smallest CURB set size serve bound
difficulty Nash equilibrium search suggests isolate cause
equilibrium search complexity endemic minimal CURB sets, rather games
general. regard, observe special two-player game used Chen
Deng show PPAD-completeness (Chen & Deng, 2006) single minimal CURB
set, remains Abbott et al.s (Abbott et al., 2005) transformation binary
utilities.

6. Conclusions
presented thorough computational treatment CURB sets, important set-valued,
game-theoretic solution concept, including several algorithms finding CURB sets
two-player, normal-form games. algorithms find minimal CURB sets (all MC),
one minimal CURB set (one MC), smallest minimal CURB set (small MC),
polynomial time. algorithms based basic properties CURB sets prove,
fact minimal CURB sets cannot overlap. algorithms use dovetailing
priority queue, exploiting information across overlapping, non-minimal CURB
sets, improve speed.
Experiments random games showed that, unsurprisingly, small MC tends
fastest, one MC second, MC slowest. However, covariant games speed
advantage former two disappears. runtime algorithms primarily
determined size smallest CURB set, covariant games, tend
larger CURB sets, algorithms (especially one MC) suffer.
algorithms enable study CURB set size distributions different game
classes. showed instance distributions GAMUT mainly extremal,
sense given game generator yield mostly games pure-strategy equilibria
and/or games game sole minimal CURB set. However, curiously,
generators yield significant number games smallest CURB sets
specific non-extremal sizes.
examined potential using algorithms preprocessors Nash equilibrium finding algorithms. proved technique eliminate arbitrarily large
portion game consideration, guaranteeing remaining subgame
contains least one Nash equilibrium full game. case even games
prior preprocessing techniques, including iterated removal dominated strategies, powerless.
downside, showed smallest CURB set arbitrarily large and/or
arbitrarily loose. Furthermore, many distributions, showed current Nash equilibrium finding algorithms run faster, average, CURB set algorithms.
surprising theoretical worst-case complexity two problems reverse.
demonstrated worst-case complexity finding Nash equilibrium polynomial known aspects game except size smallest CURB set. Taken
531

fiBenisch, Davis, & Sandholm

together CURB set finding algorithms polynomial time even worst
case, fact Nash equilibrium finding super-polynomial worst case (unless PPAD=P), observe essence worst-case complexity finding Nash
equilibrium complexity finding Nash equilibrium within minimal CURB set.
CURB set definition number players, presented
algorithms two-player setting. larger number players, obstacle
finding minimal CURB sets finding conditional best responses quickly subroutine.
showed problem solved fast two playersin settings involves
solving simple linear feasibility program. However, mathematical program use
degree p 1, p number players, three players constraints
already quadratic. plus side, algorithms make polynomial number
calls subroutine. Therefore, future research able identify polynomial-time
algorithms finding players conditional best responses n-player games,
CURB set algorithms polynomial time settings.

Acknowledgments
material based upon work supported National Science Foundation ITR grant
0205435, IGERT grant 9972762, IIS grants 0121678, 0427858, 0905390, well
Office Naval Research grant N00014-02-1-0973, Sloan Fellowship. would
thank anonymous reviewers, Vincent Conitzer, Andrew Gilpin
helpful input advice.

References
Abbott, T., Kane, D., & Valiant, P. (2005). complexity two-player win-lose games.
Proceedings Symposium Foundations Computer Science (FOCS), pp.
113122.
Basu, K., & Weibull, J. W. (1991). Strategy subsets closed rational behavior. Economics Letters, 36 (2), 141146.
Battigalli, P., & Siniscalchi, M. (2003). Rationalizable bidding first-price auctions. Games
Economic Behavior, 45 (1), 3872.
Bernheim, B. D. (1984). Rationalizable strategic behavior. Econometrica, 52 (4), 100728.
Brandt, F., Brill, M., Fischer, F., & Harrenstein, P. (2009). Computational aspects
Shapleys saddles. Proceedings International Conference Autonomous
Agents Multi-Agent Systems (AAMAS), pp. 209216.
Chen, X., & Deng, X. (2006). Settling complexity two-player Nash-equilibrium.
Proceedings Symposium Foundations Computer Science (FOCS), pp.
261272.
Conitzer, V., & Sandholm, T. (2005a). Complexity (iterated) dominance. Proceedings
ACM Conference Electronic Commerce (ACM EC), pp. 8897.
532

fiAlgorithms Closed Rational Behavior (CURB) Sets

Conitzer, V., & Sandholm, T. (2005b). generalized strategy eliminability criterion
computational methods applying it.. Proceedings National Conference
Artificial Intelligence (AAAI), pp. 483488.
Conitzer, V., & Sandholm, T. (2006). technique reducing normal form games compute Nash equilibrium. Proceedings International Conference Automated
Agents Multi-Agent Systems (AAMAS), pp. 537544.
Daskalakis, C., Goldberg, P. W., & Papadimitriou, C. H. (2009). complexity computing nash equilibrium. Communications ACM, 52 (2), 8997.
Gilboa, I., Kalai, E., & Zemel, E. (1993). compleixty eliminating dominated strategies. Mathematics Operations Research, 18, 553565.
Gilboa, I., & Zemel, E. (1989). Nash correlated equilibria: complexity considerations. Games Economic Behavior, 1, 8093.
Hurkens, S. (1995). Learning forgetful players. Games Economic Behavior, 11 (1),
304329.
Jordan, P., & Wellman, M. (2010). Algorithms finding approximate formations games.
Proceedings National Conference Artificial Intelligence (AAAI), pp. 798
804.
Klimm, M., Sandholm, T., & Weibull, J. W. (2010). Finding minimal sCURB sets
finite games. Mimeo, 3/24/2010.
Knuth, D. E., Papadimitriou, C. H., & Tsitsiklis, J. N. (1988). note strategy elimination
bimatrix games. Letters, 7 (3), 103107.
Lemke, C., & Howson, J. (1964). Equilibrium points bimatrix games. Journal
Society Industrial Applied Mathematics, 12, 413423.
McKelvey, R. D., McLennan, A. M., & Turocy, T. L. (2004). Gambit: Software tools
game theory, version 0.97.1.5. http://econweb.tamu.edu/gambit.
Nudelman, E., Wortman, J., Shoham, Y., & Leyton-Brown, K. (2004). Run GAMUT:
comprehensive approach evaluating game-theoretic algorithms.. Proceedings
International Conference Automated Agents Multi-Agent Systems (AAMAS), pp. 880887.
Pearce, D. G. (1984). Rationalizable strategic behavior problem perfection.
Econometrica, 52 (4), 102950.
Porter, R., Nudelman, E., & Shoham, Y. (2004). Simple search methods finding
Nash equilibrium. Proceedings National Conference Artificial Intelligence
(AAAI), pp. 664669.
Pruzhansky, V. (2003). finding CURB sets extensive games. International Journal
Game Theory, 32 (2), 205210.
Sandholm, T., Gilpin, A., & Conitzer, V. (2005). Mixed-integer programming methods
finding Nash equilibria. Proceedings National Conference Artificial
Intelligence (AAAI), pp. 495501.
533

fiBenisch, Davis, & Sandholm

Savani, R., & von Stengel, B. (2004). Exponentially many steps finding Nash equilibrium bimatrix game. Proceedings Symposium Foundations
Computer Science (FOCS), pp. 258267.
Voorneveld, M., Kets, W., & Norde, H. (2005). axiomatization minimal CURB sets.
International Journal Game Theory, 33, 479490.
Ye, Y. (2006). Improved complexity results solving real-number linear feasibility problems. Mathematical Programming, 106 (2), 339363.

534


