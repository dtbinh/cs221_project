journal artificial intelligence

submitted published

flecs flexible commitment strategy
manuela veloso
peter stone

department computer science carnegie mellon university
pittsburgh pa usa

veloso cs cmu edu
pstone cs cmu edu

abstract
evidence least commitment planners eciently handle
involve dicult goal interactions evidence led common belief
delayed commitment best possible strategy however recently
found evidence eager commitment planners handle variety
eciently particular dicult operator choices resigned futility
trying universally successful strategy devised planner
used study domains best strategies
article introduce flecs uses flexible
commitment strategy respect plan step orderings able use strategy
delayed commitment eager commitment combination delayed eager
operator ordering commitments allows flecs take advantage benefits explicitly
simulated execution state reasoning constraints flecs vary
commitment strategy across different domains course
single flecs represents novel contribution
explicitly provides choice commitment strategy use flecs
provides framework investigate mapping domains
ecient strategies

introduction
general purpose long history artificial intelligence several
different developed ranging pioneering gps ernst
newell variety recent snlp mcallester rosenblitt
family basic level purpose sequence
actions change initial state state satisfies goal statement planners use
actions provided domain representations try achieve goal however
different planners use different means end
faced variety different researchers including authors increasingly curious compare different methodologies although general purpose known undecidable chapman
common belief least commitment best e efficient strategy belief evidence
least commitment planners eciently handle involve dicult
plan step interactions barrett weld kambhampati minton bresina
drummond delayed commitments particular step orderings allow plan

c ai access foundation morgan kaufmann publishers rights reserved

fiveloso stone

steps remain unordered interactions visible similar situations eagercommitment planners may encounter severe eciency early commitments
incorrect orderings
recently engaged investigation sorts would
handled eciently strategies since driven heuristics
identified different sets heuristics correspond different methods
designed sets domains test different strategies
studying impact different strategies different kinds
came across evidence eager commitment planners eciently handle variety
particular dicult operator choices stone veloso
blythe date state allows make informed choices
particularly terms operator alternatives available similar situations delayedcommitment planners may need backtrack incorrect operator choices veloso
blythe came believe planner consistently better others
across different domains
resigned futility trying universally successful strategy
felt need study domains best suited
methods order devised implemented planner use
operator ordering commitment strategy along continuum one extreme
delayed commitment eager commitment planner completely
exible along one dimension heuristics operator ordering commitments
main contribution completely describe
put forth tool studying mapping heuristics domains
rather risking possibility planner might get overlooked
relegated architecture section future present flecs underlying
philosophy contribution right
continuum heuristics explored lies
operator ordering commitment strategies delayed commitment eager commitment
backward chaining planners situate within broad range
solving methods one possible strategy search possible states
reached initial state one satisfies goal method
called progression forward chaining impractical often many
accessible states world eciently search complete state space alternative several planners constrain search regression backward chaining
rather considering possible actions could executed initial state
searching recursively forward state space search backwards goal
search driven set actions directly achieve goal
two main ways performing backward chaining several planners regression searching space possible plans planners noah tweak snlp
least commitment planners really delay commitments plan step orderings variable bindings
throughout article use term delayed commitment contrast eager commitment
context step orderings
similar concerns regarding different constraint satisfaction led recently design
multi tac architecture minton system investigates given
combination heuristics collection available ones solve ecient way



fiflecs flexible commitment strategy

descendants chapman mcallester rosenblitt mcdermott
sacerdoti tate wilkins plan space planners use delayedcommitment strategy particular delay decision ordering operators long
possible consequently planner reasons initial state set
constraints regressed goal hand planners gps
strips prodigy family carbonell knoblock minton fikes nilsson
rosenbloom newell laird use eager commitment strategy use
backward chaining select plan steps relevant goals eager commitment planners make explicit use internal representation state world internal
state order operators possible reason updated version
state trade risk eager commitment benefits explicit
updated state
article introduce flecs uses flexible commitment strategy respect operator orderings flecs designed provide us
researchers framework investigate mapping domains
ecient strategies represents novel contribution
introduces explicitly choice commitment strategy
ability change commitment strategy makes useful studying tradeoffs
delayed eager commitments flecs descendant prodigy current
implementation directly top prodigy extends prodigy reasoning
explicitly ordering alternatives ability change commitment
strategy across different domains course single

article gradually introduces flecs section gives top level view
describes different ways flecs makes use uniquely specified state
world section introduces concepts used flecs provide
annotated example illustrate details concepts defined section
presents flecs full detail explains step step
discuss different heuristics guide flecs choices particular exible choice
commitment strategy analyze advantages disadvantages delayed eager
plan step ordering commitments section shows specific examples domains
devised support need use flecs exible commitment
strategy performed empirical analysis performance domains
corresponding empirical demonstrate tradeoffs discussed evidence
exible commitment necessary finally section draws conclusions work
planners prodigy family include prodigy minton knoblock kuokka gil joseph carbonell nolimit veloso prodigy carbonell blythe etzioni gil joseph kahn
knoblock minton perez reilly veloso wang nolimit prodigy opposed
prodigy require linearity assumption goal independence search spaces
complete fink veloso control commitment choices opposed
earlier total order planners
found needed name flecs represents significant change
philosophy implementation prodigy



fiveloso stone

top level view flecs
prodigy flecs differ significantly state art systems

search solution combining backward chaining
regression simulation plan execution fink veloso back chaining
commit total ordering plan steps make use uniquely specified
world state planners maintain internal representation state update
simulating execution operators found relevant goal backward chaining note
simulating execution differs interleaving execution
since option un simulating rolling back must remain open interleaved
execution generally done separate modules monitoring executing
replanning ambros ingerson steel flecs delay eagerly carry
plan simulation way exibility
able delay operator ordering commitments able use effects previously
selected operators help determine goals plan next operators
use achieve goals short emulate delayed commitment planners
eager commitment planners
table shows top level view flecs
initialize
terminate goal statement satisfied
compute pending goals applicable operators
pending goals yet achieved preconditions operators
selected plan
applicable operators preconditions satisfied
current state
choose subgoal apply backtrack point
subgoal go step
apply go step
select pending goal backtrack point operator achieve backtrack point go step
change state specified applicable operator backtrack point go step
table top level view flecs step numbers made correspond
step numbers detailed version presented table
section refines steps adds additional necessary step
terms used table fully described along detailed version
section section focus two main characteristics
namely use internal state exibility respect commitment strategies


fiflecs flexible commitment strategy

use simulated state
flecs uses internal state least four purposes first terminates every goal

given satisfied current version state current state
point complete plan sequence operators transformed initial state
current state created process stop second every
cycle uses internal state determine goals need planned
already achieved following means ends analysis strategy unlike
planners analyze possible effects operators may
changed initial state flecs simply checks particular goal true current
state third planner uses state determine operators may applied
e whose preconditions true state fourth flecs use state
choose operator bindings likely achieve particular goal
minimum effort blythe veloso summary reference
table flecs uses state determine






goal statement satisfied step
goals still need achieved step
operators applicable step
operators try first step

planners keep internal state four steps require considerable
effort even attempted contrast flecs perform
steps sub quadratic time furthermore planners particular
methods choosing among possible operators achieve goal particular use
state shown provide significant eciency gains prodigy veloso blythe

since flecs use state makes big difference whether chooses
change state apply operator given time advantage applying operator
informed four steps however
choice apply operator involves commitment order operator operators yet applied commitment temporary since plan
found operator position operator un applied simply
changing internal state back previous status one may argue requirement operators applied explicit order opens possibility exponential
backtracking however argument vacuous undecidable chapman
due use state flecs reduce likelihood requiring backtracking
operator choice point may increase likelihood backtracking
operator ordering choice point however exibility able come
side tradeoff
note since goal state fully instantiated matching accomplished
constant time goal hash table literals



fiveloso stone

choice commitment strategies

order control tradeoff eager delayed state changes flecs
toggle determines whether prefers subgoaling applying operator
step option flecs considers first may affect path search space
consequently eciency ability accommodate different types
search novel part significance lies difference
subgoaling applying
difference subgoaling applying illustrated figure subgoaling
best understood regressing one goal backward chaining means ends
analysis includes choices goal plan operator achieve goal
seen section choices affected flecs internal state thus
subgoaling without ever updating internal state applying operator lead
uninformed decisions hand subgoaling extensively flecs
select large set operators appear plan deciding order
apply flecs takes account con icts threats among operators
orders appropriately applying
x




c

z

g



x



x




z

c




g



c



z

g

subgoaling

applying

operator achieves precondition
operator true state c

preconditions operator x true state c
applying x changes state c

figure diagram fink veloso illustrates difference subgoaling applying search node consisting head plan tailplan head plan contains operators already applied
changed initial state current state c tail plan consists
operators selected achieve goals goal statement g
operators selected achieve preconditions operators
etc figure shows planner could subgoal apply given
search node
applying operator flecs way changing current internal state
future subgoaling decisions informed however applying operator commitment temporary since backtracking possible operator executed


fiflecs flexible commitment strategy

essential tradeoff eagerly subgoaling eagerly
applying eagerly subgoaling delays ordering commitments delayed commitment
eagerly applying facilitates informed subgoaling eager commitment
flecs switch toggle change behavior eager subgoaling
eager applying vice versa time feature significant improvement flecs prodigy predecessors since saw evidence neither delayed commitment eager commitment search strategies consistently effective stone et al felt need provide flecs toggle thus flecs
combine advantages delayed commitments eager commitments

illustrative example

section present example illustrates detail situations
arise general although may well understood
general past descriptions directly addressed
situations full detail flecs designed handle situations
order describe flecs completely need define several variables
maintained proceeds since much easier understand
one familiar concepts variables denote present annotated
example figures formally presenting flecs recommend
following variables functions c g p c change throughout
annotated example according definitions
c represents current internal state planner uses summarized
section
g set goals subgoals planner aiming achieve
goals fringe subgoal tree goals g may goals
yet planned goals achieved perhaps trivially yet
used operator needs one preconditions e operator
applied yet
p set pending goals goals g may need planned current
state
stands set instantiated operators selected achieve goals
subgoals
set applicable operators operators whose preconditions satisfied
current state needed current state achieve goal
goal g g set ancestor goal sets sequences goals
caused g become member g trivially goal ancestor
preconditions operator selected achieve goal g set sets
g different sets ancestors concept become clearer
example
section discuss different heuristics guide choice discuss view toggle
perfect focus learning



fiveloso stone

operator c set goals selected achieve causes
applying establishes member c illustrated functions
c needed determine goals pending operators
applicable analogous causal links used determine threats
planners chapman mcallester rosenblitt

sequence decisions example figure figure designed illustrate uses flecs variables functions recommend
becoming familiar spending time carefully tracing values returning definitions throughout example note figures
tail plan mention applied operators state changes text goals
circles solid circles true dashed circles true current
state operators boxes arrows pointing goals produce
e goals operators selected achieve causes turn
preconditions operators goals arrows pointing operators
consume operators applicable current state appear bold boxes
changes functions c underlined captions
present example figure shows initial situation
consider three literals goal statement g g g e
g fg g g g one literal initial state g e c fg g none
goals true initial state p g operators selected e
therefore operators applicable e point since
top level goals none goals ancestors g g g
applicable operators next step must subgoal one pending goals

c fg g
g fg g g g

p fg g g g


g

g

g







figure example initial specification situation
figure shows situation flecs subgoals g g suppose
operator preconditions g g selected achieve g chosen
achieve g indicated note operators preconditions replace
causes set fringe goals g since g true current state included
set pending goals p g cause c fg g similarly


fiflecs flexible commitment strategy

c fg g goals nonempty ancestor sets g g ffg gg
g ffg gg still applicable operators cannot applied
g c cannot applied g c therefore flecs subgoals

c fg g
g fg g g g g
fo g
p fg g g g

g

g

g















g

g

g







figure resulting situation subgoaling g g
figure shows situation flecs subgoals g suppose
operator selected achieve g preconditions g g c fg g
g ffg gg causes operators change c fg g
c fg g previous step similarly g g remain unchanged
however g two sets ancestor goals g ffg g fg gg understand
need keep ancestor sets consider possibility g could achieved
unexpectedly side effect unrelated operator instead achieved
planned case g would remain pending goal since would needed
achieve g since applicable operators flecs must subgoal one
pending goals e g g g

c fg g
g fg g g g g
fo g
p fg g g g

g



g

g

g



















figure resulting situation subgoaling g


g

g

g







fiveloso stone

figure shows situation flecs subgoals g suppose
operator precondition g selected achieve g since g true
current state first applicable operator note necessarily ordered
since cause precondition operators usual cause
operator stored c fg g addition ancestors g must augmented
include two ancestor sets g ffg g fg g g fg g gg although
applicable operator let us assume flecs chooses delay commitment
order first step plan subgoals pending goal

c fg g
g fg g g g
fo g
p fg g g
fo g
g



g





g

g













g



g



g









figure resulting situation subgoaling g
figure shows situation flecs subgoals g suppose operator achieve g selected need update
causes operator ancestors precondition c fg g g
g ffg g fg g g fg g g fg g gg rather subgoaling last remaining pending goal g let us apply note decision corresponds early
commitment terms ordering operators operators later selected
achieve g unordered current constraints flecs changes
delayed commitment strategy eager commitment strategy
c fg g
g fg g g
g

g

fo g


p fg g
fo g
g







g

g













g

g

figure resulting situation subgoaling g






fiflecs flexible commitment strategy

figure shows situation flecs applied since operator
applied order achieve goals g g true current state
back fringe goal tree e c g notice stay g
eventually consumed however since true
current state pending goals since g precondition
one selected operator g ffg gg applicable
preconditions true current state thanks let us assume
flecs maintains eager commitment strategy continues applying applicable operators flecs orders since deletes precondition effects
shown
c fg g g g
g fg g g g g
g
fo g


g


p fg g
fo g
g



g

g













g

g





figure resulting situation applying figure
figure shows situation flecs applied suppose although
selected operator achieves g side effect perhaps
conditional effect visible planner perhaps simply looked
promising operator achieve g time selected

c fg g g g g g
g fg g g g g g
fo g
p
fo g
g



g

g

g







g





g





g







figure resulting situation applying figure


fiveloso stone

case g c done longer needed g longer
pending goal since sole ancestor already c fortuitous achievement goal
reason need use functions c adjust sets pending goals
p applicable operators would wasted effort flecs plan achieve g
note g precondition well would pending goal since
would still relevant achieving g point ancestors g must
reset g ffg gg since pending goals flecs must apply
last remaining applicable operator
figure shows final situation flecs applied point
top level goals true current state despite fact
tree remains flecs recognizes work done terminates
final plan sequence operators applied head plan
shown corresponding steps figures posteriori veloso
perez carbonell convert sequence partially ordered plan capturing
dependencies fo g

c fg g g g g g g
g fg g g g g
fo g
p

g

g







g

g



g







figure final situation applying figure

flecs detailed description
aside variables functions introduced preceding section need
define four things presenting complete first initial state
goal statement corresponding ground literals definition second given operator pre add del instantiated preconditions
add list delete list respectively flecs takes values straight domain representation may include disjunctions negations existentially universally quantified preconditions effects conditional effects carbonell et al
conditional effects add del determined dynamically state
time applied third relevant instantiated operators could achieve g
step instantiated operators operators fully specified bindings


fiflecs flexible commitment strategy

g add g positive goal g del g negative goal fourth toggle
variable determines avor search described later


present flecs full detail table examining notice fringe goals g selected operators ancestor function g
cause function c current state c maintained incrementally
hand pending goals p applicable operators toggle recomputed every
pass
step initializes variables beginning process
goals g goal statement current state c initial
state since operators yet selected empty ancestor function
cause function c initialized constant function maps everything
practice domain set goals domain c set operators
appear however since goals operators
determined first called must initialize functions
unrestricted domains
step termination condition called time operator
applied terminates successfully every goal g goal statement true
satisfied current state c e g c
step sets pending goals applicable operators computed
current state pending goals goals planner may need plan initially
pending goals fringe goals currently true true
initial state applicable operators selected operators whose preconditions
true state
step computes pending goals p applicable operators active
current state pending goal active long fringe subgoal tree
still needs planned goal longer active every one ancestor sets
least one goal already achieved purposes goal
selected longer exist case g figure applicable operator
active current state long would achieve goal still useful plan
applicable operator longer active causes true current
state longer active
step novel part allows exible search strategy
within single since step flecs yet terminated
must active pending goals active applicable operators e p must
non empty however one choice
made hand p non empty proceed
step step sake completeness must keep options open
option flecs considers first may affect amount search required changing
detail allows reader carefully study implement flecs
since planner cannot backtrack beyond initial state must keep goals initial state
pending goals sake completeness



fiveloso stone

initialize
c current state
g goal statement
g fringe goals
b c initial state
p pending goals
c

instantiated operators
g g

applicable operators
e c
ancestor goal sets
c causes
terminate goal statement c
compute applicable operators pending goals p
p fg g j g c g initial stateg
b fa j pre cg
adjust p contain active members
p p fp p j p g g cg
b fa j g c g c g g g c g
subgoal apply
set reset toggle sub app e set default delayed eager commitment
b go step
c p go step
choose apply subgoal backtrack point
toggle sub p c subgoal first go step
toggle app apply first go step
choose goal p p backtrack point
choose goal true current state means ends analysis
get set r relevant instantiated operators could achieve p
b r
p p fp g
ii p fail e backtrack
iii go step
c choose operator r backtrack point
choose operator minimum conspiracy number e operator
appears achievable least amount
fog
e g g fp g pre
f c c fp g
g g pre g g ffp g j p g
h go step
choose operator backtrack point interactions
use heuristic operators fewer interactions similar one used
saba heuristic
apply c c add del
b fag
c g pre g g fs g j c g
g g c fg pre j g g
e c
f go step


table full description flecs




fiflecs flexible commitment strategy

value toggle done pass loop flecs change
type search works
pass body visits step step
subgoaling step active pending goal p chosen p note unlike
corresponding choice step choice subgoals backtrack point however
operators could achieve goal another goal chosen step b
means ends analysis used heuristic prefer subgoaling goals currently
true next operator chosen could achieve chosen goal step c
operator existing one figure already
selected achieve g selected achieve g choice operator backtrack
point unless heuristic provided minimum conspiracy number heuristic
used determine operator tried first blythe veloso short
heuristic selects instantiated operator appears achievable least
amount
returning top loop affected variables updated first
added set union operator never appears twice step
second preconditions added g p removed step e p
operator selected achieve longer fringe subgoal tree third
cause augmented include p step f fourth ancestor sets preconditions
augmented include sets goals comprised p ancestors step g
explained figure ancestor sets must included finally since state
changed termination condition cannot met returns step
applying operator step applicable operator chosen
heuristic analyzes applicable operators used choose best possible operator one heuristic analyzes interactions operators identifying
negative threats similarly saba heuristic stone et al short
heuristic prefers operators delete preconditions whose effects
deleted operators choice applicable operator backtrack point
orderings interacting applicable operators considered different orderings
completely independent operators need considered completely independent operators interactions neither among ancestor
sets since application one operator make difference application
another need consider one ordering operators
chosen promptly applied step application involves changing
current state prescribed note conditional effects expanded
point next relevant variables updated first updating involves removing
set selected operators step b second ancestors preconditions
ancestor sets include step c need
figure shows example precondition g still
ancestor remaining third since applied preconditions goals
reason longer fringe causes step
unachieved must achieved fourth case ever selected operator
achieve goal c reset step e finally since current state
altered returns step termination condition checked


fiveloso stone

discussion backtracking heuristics properties
one pay close attention placement backtrack points
particular three subgoal apply choice step choice operator
achieve goal step choice applicable operator step however
choice goal subgoal step backtrack point prodigy
backtrack point flecs need backtrack point
choice apply apply operator given time left open step
significantly different orders applying applicable operators considered step
explained previous subsection different orderings completely independent operators considered nevertheless orderings could lead solution
considered therefore backtracking choice subgoal would cause redundant
search elimination backtrack point significant improvement flecs
previous implementations namely nolimit prodigy note backtrack
points added offset eliminated backtrack point
flecs explicit failure point step occurs chosen
subgoal none pending goals relevant operators failures
implicit backtrack point choices unsuccessfully tried
backtracks presented terminates unsuccessfully
entire search space exhausted causes failure goal loops
state loops depth bounds time limits incorporated manner
prodigy carbonell et al
choice point heuristic determine branch try first
step goal chosen means ends analysis operator minimum
conspiracy number chosen achieve goal step choice mechanism
saba heuristic used determine applicable operator try first step
toggle changed time determines whether default commitment
strategy eager subgoaling eager applying note pending goals
true current state pending goals planner may apply
applicable operator regardless value toggle similarly applicable
operators planner must subgoal even toggle indicates prefer applying toggle
variable guide heuristic search existing choice point branching factor
two represent addition backtrack point discussed throughout
provides flecs ability change commitment strategy suggested
name toggle one two values sub app indicating eager subgoaling eager
applying respectively
describe domain independent heuristic could used guide changes
value toggle heuristic allow eager commitments reason
believe need backtrack resulting operator linearization
case setting toggle app increase eciency converting
partially ordered set operators sequence leads single possible state
used guide subsequent process equivalent starting
smaller previous choices embedded state
situation described similar arises alpine system
constructs ecient abstraction hierarchies knoblock alpine guarantee


fiflecs flexible commitment strategy

hierarchically generated abstraction hierarchies lead backtracking across refinement spaces figure illustrates flecs use abstraction
information control value toggle toggle changes app particular abstract step completely refined abstraction hierarchies preserve
alpine ordered monotonicity property need backtrack
resulting operator ordering toggle change back sub flecs continue
updated state information
abstraction level
begin
toggle sub


continue
toggle sub

build partial
order plan
first step
abstract plan



continue
done


set toggle app
commit ordering
compute state




another
step abstract
plan commit
toggle app

figure abstraction information guide changes toggle
abstraction driven heuristic one method exploiting choice point similarly
minimum conspiracy number heuristic saba heuristic ways
guide choices instantiated operator applicable operator respectively
heuristics used changed claim ones provide
defaults best possible heuristic work time
present sound complete searches entire
search space technique iterative deepening korf flecs sound
terminates reached goal statement applying
operators application operator sequence returned final plan
entirely simulated time planner terminates thus preconditions
operator true time operator executed operators
executed goal statement satisfied consequently flecs sound
since step prunes search space flecs iteratively
increasing depth bound complete solution flecs
one insure property need flecs consider possible
operators may achieve goal well orderings interacting applicable operators
flecs maintaining backtracking points choice operator step c
points operator ordering could affected choice applicable
operator step choice whether subgoal apply step selecting


fiveloso stone

apply commits ordering operators currently applicable least
one currently applicable operators note completeness achieved even without
maintaining choice goals subgoal backtrack point step since regardless
order operators chosen applied according possible
interactions e similarly resolving negative threats thus flecs search space
significantly reduced prodigy still preserving completeness see
appendix formal proofs flecs soundness completeness

empirical analysis heuristics control commitment strategy

seen flecs introduces notion exible choice point delayed
eager operator ordering commitments appreciate need exibility consider
two extreme heuristics eagerly subgoaling delaying commitment
eagerly applying eager commitment former heuristic chooses subgoal long
least one active pending goal subgoal applying saba
latter chooses apply long active applicable operators subgoal
every try apply savta section empirical demonstrate
extremes lead highly sub optimal search particular domains
indeed believe single domain independent search heuristic perform well
domains stone et al reason equipped flecs
ability use extreme domain independent heuristic moderate
heuristic two every iteration
opportunity change eagerly subgoaling eagerly applying vice versa one could
define different heuristics guide choice one could leave choice user
interactively
exibility search method provides ability search sensibly wide variety domains exible susceptible
coming across domains cannot handle eciently barrett weld veloso
blythe kambhampati flecs exibility makes possible study
heuristics work best situations addition exible choice perfect learning
opportunity since single search method solve use
learning techniques help us determine experience search strategies try
illustrate need different search strategies provide one real world situation
eagerly subgoaling leads directly optimal solution one eagerly
applying one intermediate policy best examples
intended exhaustive demonstration flecs capabilities rather examples
intended illustrate need consider traditional goal ordering
motivate potential impact flecs

eagerly subgoaling better

first consider class tasks following true operators initially
executable must performed specific order operator deletes
preconditions operators supposed executed earlier instance
suppose single paint brush several objects need painted
different colors paint brush washed fairly well never comes completely


fiflecs flexible commitment strategy

clean reason ever use lighter paint darker paint darker
paint painted object whole project ruined perhaps
shade red darker shade green paint chair red seat
green legs better paint legs first
consider range colors ordered light dark white yellow green
black initially could paint object color however start painting
something black paint used order represent situation
planner created domain operators shown table
operator
preconds
adds
deletes

paint white obj

usable white
white obj

paint yellow obj

usable yellow
yellow obj
usable white









paint black obj

usable black
black obj
usable white
usable yellow


usable brown

table example domain delayed step ordering commitment ecient

assume colors usable initial state since painting object certain
color deletes precondition painting object lighter color since precondition cannot achieved operator adds predicate usable colors must
used specific order
painting domain real world interpretation artificial domain dm introduced barrett weld operators dm look
operator
preconds g
adds fg g
deletes jj ig
since operator deletes preconditions operators numerically
operators applied increasing numerical order thus corresponds
operator paint white corresponds paint yellow etc used domain
experiments run sparc station generated random
one fifteen goals ten number goals used
test extreme heuristics get data points averaged
ten number goals raw data
contained online appendix graph average time flecs took solve
versus number goals
shown stone et al eagerly applying leads exponential behavior
function number goals domain eagerly subgoaling






j

began study named flecs prodigy consider
version prodigy used stone et al preliminary implementation flecs



fiveloso stone

operator choice heuristic study leads approximately linear behavior
backtracking eagerly applying example goal g
solved g flecs immediately apply backtrack
unsuccessfully tries apply eagerly subgoaling allows flecs build set
operators need apply order appropriately selecting
application order avoids con icts threats figure shows graphic comparison
two different behaviors
eager subgoaling
eager applying

time msec
















number goals





figure flecs performance different heuristics domains dm eager subgoaling applying correspond delayed commitments eager commitments
respectively

eagerly applying better

next consider class tasks following true several operators could
used achieve goal operator used use similar
example suppose trying paint different parts single object different colors
however suppose multiple brushes never come clean
use brush one color never safely use instance painted
green parts brush would need use brush brush besides brush
paint red parts table represents operators domain
operator

paint brush

parts color
preconds unused brush
adds painted parts color
deletes unused brush

paint brush

parts color
unused brush
painted parts color
unused brush

table example domain eager step ordering commitment use state
ecient
note operator used color since deletes precondition
used capture essential features domain artificial
domain called use operators use look


fiflecs flexible commitment strategy


g
f g g
g

operator
preconds
adds
deletes







operator achieve goal since operator deletes precondition
used operator corresponds painting different brush
domain better eagerly apply eagerly subgoal eagerly
subgoaling causes flecs select operator achieve goals
deterministic method selecting operators minimum conspiracy number
order appearance domain specification tie breaker selects operator
achieve two different goals however since could apply would need
backtrack select different operator one goals shown figure eagerly
applying outperforms eagerly subgoaling case generated
way previous subsection
eager subgoaling
eager applying

time msec
















number goals





figure flecs performance different heuristics domains use

intermediate heuristic

possible good solutions eagerly subgoaling
first example eagerly applying second would need
include variable toggle flecs could simply eager subgoal mode
eager apply mode however cases neither alternatives suces
instead need eagerly subgoal portions search eagerly apply
others one heuristic changing commitment strategy abstraction driven
method described section present domain use form
heuristic
time consider class tasks following true top level goals take
least three operators achieve one irreversible executed limited
number times restricts bindings operators one representative
class one way rocket domain introduced veloso carbonell
sake consistency however present representative class domains
painting context suppose painting walls rollers paint wall


fiveloso stone

need first ready wall purpose example means decide
wall needs painted designate color roller paint wall next
must fill selected roller appropriately colored paint paint
wall unfortunately limited supply rollers never become clean
filled paint must clean selected paint wall
reason must ready walls want paint roller
fill roller paint reader familiar one way rocket domain
fill roller operator analogous move rocket operator domain
executed due limited supply fuel must executed
fully loaded table shows possible set operators painting domain
operator

designate roller

fill roller

paint wall

wall roller color roller color wall roller color
preconds clean roller
clean roller
ready
needs painting wall
chosen
wall roller color
roller color filled paint
roller color
adds ready
filled paint
painted wall color
wall roller color roller color
chosen roller color
deletes
clean roller
ready
wall roller color
needs painting wall

table example domain exibility commitments ecient
given domain representation flecs dicult time apparently simple uses search strategy throughout entire search
example consider five walls two rollers equivalent
one way rocket domain five objects two destinations
initial state
needs painting walla
needs painting wallb
needs painting wallc
needs painting walld
needs painting walle
clean roller
clean roller

goal statement
painted walla red
painted wallb red
painted wallc red
painted walld green
painted walle green



optimal solution
designate roller walla roller red
designate roller wallb roller red
designate roller wallc roller red
fill roller roller red
paint wall walla roller red
paint wall wallb roller red
paint wall wallc roller red
designate roller walld roller green
designate roller walle roller green
fill roller roller green
paint wall walld roller green
paint wall walle roller green

fiflecs flexible commitment strategy

flecs directly solution eagerly subgoaling
eagerly applying search eciently must subgoal considered walls
need painted color must apply applicable operators
continuing explicit information domain telling use one roller red
one roller green reason flecs eagerly subgoals initially selects
roller paint walls extensively backtracks finding correct
bindings flecs realize ready walls going
painted color filling roller thus flecs eagerly applies
operators tries filling roller soon one wall readied note
variables would solve since planner would still need make
binding selections subgoaling beyond paint wall hence facing
flecs tries solve strategy described
succeed reasonable amount time since flecs complete would certainly
succeed eventually eventually long time away dealing np hard
neither commitment strategies leads solution
seconds search time lost changing value toggle
appropriate times flecs easily solution fact
seconds toggle manually changed appropriate times
time sec solution
eager applying


eager subgoaling


variable strategy

yes
flecs eagerly subgoals decided paint walla wallb wallc
roller begin eagerly applying three walls painted red flecs
begin subgoaling without danger preparing walls wrong
roller roller still clean example change state allows
minimum conspiracy number heuristic select correct instantiated operator
general heuristic toggle set sub walls need
painted color considered toggle set app
applicable operators applied toggle set back sub
process continues way flecs need little backtracking
quickly reach solution heuristic corresponds abstraction hierarchy
deal separately interactions different colors different walls

conclusion

presented planner intended studying correspondence search heuristics suited flecs
ability eagerly subgoal thus delaying operator ordering commitments eagerly apply
thus maximizing advantages maintaining internal state exibly interleave
two strategies thus operate point continuum operator ordering
heuristics one important dimension
common often syntactically correct way restrict bindings
domain representation maintaining intended exibility generality domain



fiveloso stone

explained advantages disadvantages delayed eager
commitments presented flecs full detail carefully motivating
concepts illustrating clear examples discussed different heuristics
guide flecs choice points discussed properties showed examples
specific tasks corresponding empirical support position
general purpose planner must able use exible commitment strategy although
solvable complete planners flecs may solve
eciently planners ability change
commitment strategy may fall worst case unique commitment strategy
flecs provides framework study characteristics different strategies
mapping domains flecs represents view
domain independent strategy uniformly ecient across different domains flecs addresses particular operator ordering choice
exible decision allows combination delayed eager operator ordering
commitments take advantage benefits explicitly simulated execution
state reasoning constraints
currently continuing work understanding tradeoffs among different
strategies along different dimensions plan study effects eager versus
delayed commitments point operator instantiations investigating
effects combining real execution flecs finally plan use machine learning
techniques flecs choice points gain possibly automated understanding
mapping ecient methods domains

appendix proofs
prove flecs sound iterative deepening complete consider
flecs presented table determined
initial state goal statement set operators available domain plan
totally ordered sequence instantiated operators returned plan generated
flecs sequence applied operators upon termination
solution plan whose operators applied
initial state reach state satisfies goal statement justified solution
solution subsequence operators solution solution flecs
terminates successfully termination condition met step

theorem

flecs sound
flecs sound terminates suc

cessfully returned plan indeed solution given
assume flecs terminates successfully returned
plan flecs applies operator preconditions operator satisfied
current state c step hence construction operators ok
k n applied preconditions operator ok satisfied c
point termination current state c satisfies goal statement step c
reached initial state applying operators therefore solution
qed


fiflecs flexible commitment strategy

theorem

flecs iterative deepening complete

recall completeness informally means solution particular
flecs search space complete
flecs search complete long explores branches search
space example iterative deepening korf iterative deepening involves
searching bound number search steps may performed
particular search path suspended expansion solution found
particular depth bound search repeated larger depth bound
assume justified solution
flecs searches iterative deepening solution
flecs four choice points three choice points backtrack
points choice subgoaling applying step choice operator
use achieve goal step c choice applicable operator apply
step one choice point backtrack point choice goal subgoal
step
prove completeness must backtrack point possible
choice lead flecs towards finding plan matter choices flecs makes
non backtrack choice point flecs explores branches search space
searching iterative deepening must eventually unless finds
solution length n first
proof involves constructing oracles tell flecs choices make
backtrack points matter choices makes choice
point finds solution plan
consider point search operators ok k
others already applied let oracles backtrack points
operate follows
choice subgoaling applying step first oracle makes flecs choose
apply ok applicable e otherwise makes flecs subgoal
flecs chooses apply ok reaches another choice point namely choice
operator apply step another oracle makes flecs select precisely step ok
flecs chooses subgoal ok let flecs choose goal p
set pending goals p step since step backtrack point cannot
oracle determine choice point instead independently
choice made point flecs still solution solution
consequence construction next oracle controls final choice point
oracle guarantees p selected must member goal
statement precondition operator
final choice point selection operator achieve p step c third
oracle makes flecs choose operator achieve p since solution
since p member goal statement precondition
operator must operator achieves p
one operator one chosen since operators selected
opposed breadth first search iterative deepening harm eciency combines eciency
searching depth first completeness searching breadth first



fiveloso stone

condition pending goals goal statement preconditions
operators maintained
three oracles lead flecs justified solution since justified every
operator necessary achieve goal goal statement precondition another operator consequently since third oracle chooses operators
every operator eventually chosen applied prescribed
first two oracles every operator applied termination condition
met since solution flecs terminate successfully qed

acknowledgements
would recognize particular contributions jim blythe eugene fink
jim blythe highly responsible current implementation prodigy
upon flecs eugene fink helped formalization
proofs thank eugene fink karen haigh gary pelton alicia perez xuemei wang
anonymous reviewers comments article
sponsored wright laboratory aeronautical systems center air
force materiel command usaf advanced projects agency arpa
grant number f views conclusions contained document authors interpreted necessarily representing
ocial policies endorsements expressed implied wright laboratory
u government

references

ambros ingerson j steel integrating execution monitoring
proceedings seventh national conference artificial intelligence pp
st paul mn
barrett weld partial order evaluating possible eciency
gains artificial intelligence
blythe j veloso analysis search techniques totally ordered
nonlinear planner proceedings first international conference ai systems pp college park md
carbonell j g blythe j etzioni gil joseph r kahn knoblock c
minton perez reilly veloso wang x prodigy
manual tutorial tech rep cmu cs department computer science
carnegie mellon university
carbonell j g knoblock c minton prodigy integrated architecture learning vanlehn k ed architectures intelligence
erlbaum hillsdale nj technical report cmu cs
chapman conjunctive goals artificial intelligence


fiflecs flexible commitment strategy

ernst g w newell gps case study generality solving
acm monograph series academic press york ny
fikes r e nilsson n j strips application theorem
proving solving artificial intelligence
fink e veloso prodigy technical report cmu cs school computer science carnegie mellon university
kambhampati desing tradeoffs partial order plan space proceedings second international conference ai systems aips
pp chicago il
knoblock c automatically generating abstractions artificial
intelligence
korf r e depth first iterative deepening optimal admissible tree search
artificial intelligence
mcallester rosenblitt systematic nonlinear proceedings
ninth national conference artificial intelligence pp
mcdermott v acting cognitive science
minton integrating heuristics constraint satisfaction case study
proceedings eleventh national conference artificial intelligence pp

minton bresina j drummond commitment strategies
comparative analysis proceedings twelfth international joint conference
artificial intelligence pp
minton knoblock c kuokka r gil joseph r l carbonell j g
prodigy manual tutorial technical report cmu cs
school computer science carnegie mellon university
rosenbloom p newell laird j e towards knowledge level
soar role architecture use knowledge vanlehn k ed
architectures intelligence erlbaum hillsdale nj
sacerdoti e structure plans behavior american elsevier york
stone p veloso blythe j need different domain independent
heuristics proceedings second international conference ai
systems pp
tate generating project networks proceedings fifth international
joint conference artificial intelligence pp


fiveloso stone

veloso blythe j linkability examining causal link commitments partialorder proceedings second international conference ai
systems pp
veloso nonlinear solving intelligent casual commitment
technical report cmu cs school computer science carnegie mellon university
veloso carbonell j g derivational analogy prodigy automating
case acquisition storage utilization machine learning
veloso perez carbonell j g nonlinear parallel
resource allocation proceedings darpa workshop innovative approaches
scheduling control pp san diego ca morgan kaufmann
wilkins e domain independent representation plan generation
artificial intelligence




