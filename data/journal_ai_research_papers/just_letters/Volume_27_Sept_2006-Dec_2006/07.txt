journal of artificial intelligence research                  

submitted        published      

engineering note
flucap  a heuristic search planner for first order mdps
steffen holldobler
eldar karabaev
olga skvortsova

sh iccl tu dresden de
eldar iccl tu dresden de
skvortsova iccl tu dresden de

international center for computational logic
technische universitat dresden  dresden  germany

abstract
we present a heuristic search algorithm for solving first order markov decision processes  fomdps   our approach combines first order state abstraction that avoids evaluating states individually  and heuristic search that avoids evaluating all states  firstly 
in contrast to existing systems  which start with propositionalizing the fomdp and then
perform state abstraction on its propositionalized version we apply state abstraction directly on the fomdp avoiding propositionalization  this kind of abstraction is referred to
as first order state abstraction  secondly  guided by an admissible heuristic  the search is
restricted to those states that are reachable from the initial state  we demonstrate the usefulness of the above techniques for solving fomdps with a system  referred to as flucap
 formerly  fcplanner   that entered the probabilistic track of the      international planning competition  ipc      and demonstrated an advantage over other planners on the
problems represented in first order terms 

   introduction
markov decision processes  mdps  have been adopted as a representational and computational model for decision theoretic planning problems in much recent work  e g   by barto 
bradtke  and singh         the basic solution techniques for mdps rely on the dynamic
programming  dp  principle  boutilier  dean    hanks         unfortunately  classical dynamic programming algorithms require explicit enumeration of the state space that grows
exponentially with the number of variables relevant to the planning domain  therefore 
these algorithms do not scale up to complex ai planning problems 
however  several methods that avoid explicit state enumeration have been developed
recently  one technique  referred to as state abstraction  exploits the structure of the factored mdp representation to solve problems efficiently  circumventing explicit state space
enumeration  boutilier et al          another technique  referred to as heuristic search 
restricts the computation to states that are reachable from the initial state  e g   rtdp
by barto et al          envelope dp by dean  kaelbling  kirman  and nicholson        and
lao by feng and hansen         one existing approach that combines both these techniques is the symbolic lao algorithm by feng and hansen        which performs heuristic
search symbolically for factored mdps  it exploits state abstraction  i e   manipulates sets of
states instead of individual states  more precisely  following the spudd approach by hoey 
st aubin  hu  and boutilier         all mdp components  value functions  policies  and
admissible heuristic functions are compactly represented using algebraic decision diagrams
c
    
ai access foundation  all rights reserved 

fiholldobler  karabaev   skvortsova

 adds   this allows computations of the lao algorithm to be performed efficiently using
adds 
following ideas of symbolic lao   given an initial state  we use an admissible heuristic
to restrict search only to those states that are reachable from the initial state  moreover 
we exploit state abstraction in order to avoid evaluating states individually  thus  our
work is very much in the spirit of symbolic lao but extends it in an important way 
whereas the symbolic lao algorithm starts with propositionalization of the fomdp 
and only after that performs state abstraction on its propositionalized version by means of
propositional adds  we apply state abstraction directly on the structure of the fomdp 
avoiding propositionalization  this kind of abstraction is referred to as first order state
abstraction 
recently  following work by boutilier  reiter  and price         holldobler and skvortsova
       have developed an algorithm  referred to as first order value iteration  fovi  that
exploits first order state abstraction  the dynamics of an mdp is specified in the probabilistic fluent calculus established by holldobler and schneeberger         which is a
first order language for reasoning about states and actions  more precisely  fovi produces
a logical representation of value functions and policies by constructing first order formulae
that partition the state space into clusters  referred to as abstract states  in effect  the
algorithm performs value iteration on top of these clusters  obviating the need for explicit
state enumeration  this allows problems that are represented in first order terms to be
solved without requiring explicit state enumeration or propositionalization 
indeed  propositionalizing fomdps can be very impractical  the number of propositions grows considerably with the number of domain objects and relations  this has a
dramatic impact on the complexity of the algorithms that depends directly on the number of propositions  finally  systems for solving fomdps that rely on propositionalizing
states also propositionalize actions which is problematic in first order domains  because the
number of ground actions also grows dramatically with domain size 
in this paper  we address these limitations by proposing an approach for solving fomdps
that combines first order state abstraction and heuristic search in a novel way  exploiting
the power of logical representations  our algorithm can be viewed as a first order generalization of lao   in which our contribution is to show how to perform heuristic search
for first order mdps  circumventing their propositionalization  in fact  we show how to
improve the performance of symbolic lao by providing a compact first order mdp representation using probabilistic fluent calculus instead of propositional adds  alternatively 
our approach can be considered as a way to improve the efficiency of the fovi algorithm
by using heuristic search together with symbolic dynamic programming 

   first order representation of mdps
recently  several representations for propositionally factored mdps have been proposed 
including dynamic bayesian networks by boutilier et al         and adds by hoey et al 
        for instance  the spudd algorithm by hoey et al         has been used to solve
mdps with hundreds of millions of states optimally  producing logical descriptions of value
functions that involve only hundreds of distinct values  this work demonstrates that large
   

fiflucap  a heuristic search planner for first order mdps

mdps  described in a logical fashion  can often be solved optimally by exploiting the logical
structure of the problem 
meanwhile  many realistic planning domains are best represented in first order terms 
however  most existing implemented solutions for first order mdps rely on propositionalization  i e   eliminate all variables at the outset of a solution attempt by instantiating terms
with all possible combinations of domain objects  this technique can be very impractical
because the number of propositions grows dramatically with the number of domain objects
and relations 
for example  consider the following goal statement taken from the colored blocksworld
scenario  where the blocks  in addition to unique identifiers  are associated with colors 
g   x        x    red x     green x     blue x     red x     red x   
red x     green x     green x     t ower x            x     
where t ower x            x    represents the fact that all eight blocks comprise one tower  we
assume that the number of blocks in the domain and their color distribution agrees with
that in the goal statement  namely there are eight blocks a  b          h in the domain  where
four of them are red  three are green and one is blue  then  the full propositionalization
of the goal statement g results in              different ground towers  because there are
exactly that many ways of arranging four red  three green and one blue block in a tower of
eight blocks with the required color characteristics 
the number of ground combinations  and hence  the complexity of reasoning in a propositional planner  depends dramatically on the number of blocks and  most importantly  on
the number of colors in the domain  the fewer colors a domain contains  the harder it is to
solve by a propositional planner  for example  a goal statement g    that is the same as g
above  but all eight blocks are of the same color  results in            ground towers  when
grounded 
to address these limitations  we propose a concise representation of fomdps within the
probabilistic fluent calculus which is a logical approach to modelling dynamically changing
systems based on first order logic  but first  we briefly describe the basics of the theory of
mdps 
    mdps
a markov decision process  mdp   is a tuple  z  a  p  r  c   where z is a finite set of
states  a is a finite set of actions  and p   z  z  a          written p z    z  a   specifies
transition probabilities  in particular  p z    z  a  denotes the probability of ending up at
state z   given that the agent was in state z and action a was executed  r   z  r is a realvalued reward function associating with each state z its immediate utility r z   c   a  r
is a real valued cost function associating a cost c a  with each action a  a sequential
decision problem consists of an mdp and is the problem of finding a policy    z  a that
maximizes the total expected discounted reward received when executing the policy  over
an infinite  or indefinite  horizon 
the value of state z  when starting in z and following the policy  afterwards  can be
computed by the following system of linear equations 
x
v  z    r z    c  z     
p z    z   z  v  z     
z   z

   

fiholldobler  karabaev   skvortsova

where        is a discount factor  we take  equal to   for indefinite horizon problems
only  i e   when a goal is reached the system enters an absorbing state in which no further
rewards or costs are accrued  the optimal value function v  satisfies 
x
v   z    r z    max c a    
p z    z  a v   z       
aa

z   z

for each z  z 
for the competition  the expected total reward model was used as the optimality criterion  without discounting  some care is required in the design of planning problems to
ensure that the expected total reward is bounded for the optimal policy  the following
restrictions were made for problems used in the planning competition 
   each problem had a goal statement  identifying a set of absorbing goal states 
   a positive reward was associated with transitioning into a goal state 
   a cost was associated with each action 
   a done action was available in all states  which could be used to end further accumulation of reward 
these conditions ensure that an mdp model of a planning problem is a positive bounded
model described by puterman         the only positive reward is for transitioning into a
goal state  since goal states are absorbing  that is  they have no outgoing transitions  the
maximum value of any state is bounded by the goal reward  furthermore  the done action
ensures that there is an action available in each state that guarantees a non negative future
reward 
    probabilistic fluent calculus
fluent calculus  fc  by holldobler and schneeberger        was originally set up as a
first order logic program with equality using slde resolution as the sole inference rule 
the probabilistic fluent calculus  pfc  is an extension of the original fc for expressing
planning domains with actions which have probabilistic effects 
states
formally  let  denote a set of function symbols  we distinguish two function symbols in
  namely the binary function symbol   which is associative  commutative  and admits
the unit element  and a constant    let              non variable   terms are
called fluents  the function names of fluents are referred to as fluent names  for example 
on x  table  is a fluent meaning informally that some block x is on the table  where on
is a fluent name  fluent terms are defined inductively as follows    is a fluent term  each
fluent is a fluent term  f  g is a fluent term  if f and g are fluent terms  for example 
on b  table   holding x  is a fluent term denoting informally that the block b is on the table
and some block x is in the robots gripper  in other words  freely occurring variables are
assumed to be existentially quantified 
   

fiflucap  a heuristic search planner for first order mdps

we assume that each fluent may occur at most once in a state  moreover  function
symbols  except for the binary  operator  constant    fluent names and constants  are
disallowed  in addition  the binary function symbol  is allowed to appear only as an
outermost connective in a fluent term  we denote a set of fluents as f and a set of fluent
terms as lf   respectively  an abstract state is defined by a pair  p  n    where p  lf and
n  lf   we denote individual states by z  z    z  etc   abstract states by z  z    z  etc 
and a set of abstract states lp n  
the interpretation over f  denoted as i  is the pair    i    where the domain  is a set
of all finite sets of ground fluents from f  and an interpretation function i which assigns
to each fluent term f a set f i   and to each abstract state z    p  n   a set z i  
as follows 
f i    d      f   d 
z i    d      p   d  n  n   d 
   n  i   
where  is a substitution  for example  figure   depicts the interpretation of an abstract
state z
z    on x  a   on a  table    on y  x   holding x      
that can be informally read  there exists a block x that is on the block a which is on
the table  there is no such block y that is on x and there exists no such block x   that
the robot holds  since z i contains all such finite sets of ground fluents that satisfy the
p  part and do not satisfy any of the elements of the n  part  we subtract all sets of ground
fluents that belong to each of ni  n from the set of ground fluents that correspond
to the p  part  thus  the bold area in figure   contains exactly those sets of ground
fluents  or  individual states  that do satisfy the p  part of z and none of the elements of
its n  part  for example  an individual state z     on b  a   on a  table   belongs to z i  
whereas z     on b  a   on a  table   holding c   does not  in other words  abstract states
are characterized by means of conditions that must hold in each ground instance thereof
and  thus  they represent clusters of individual states  in this way  abstract states embody
a form of state space abstraction  this kind of abstraction is referred to as first order state
abstraction 
actions
actions are first order terms starting with an action function symbol  for example  the
action of picking up some block x from another block y might be denoted as pickup  x  y   
formally  let na denote a set of action names disjoint with   an action space is a tuple
a    a  pre   eff    where a is a set of terms of the form a p            pn    referred to as
actions  with a  na and each pi being either a variable  or a constant  pre   a  lp n is
a precondition of a  and eff   a  lp n is an effect of a 
so far  we have described deterministic actions only  but actions in pfc may have
probabilistic effects as well  similar to the work by boutilier et al          we decompose a
stochastic action into deterministic primitives under natures control  referred to as natures
choices  we use a relation symbol choice   to model natures choice  consider the action
pickup  x  y   
choice  pickup  x  y    a  
 a   pickups  x  y    a   pickupf  x  y     
   

fiholldobler  karabaev   skvortsova

 on b a   on a table  
 on c a   on a table   on b d  
 on b a   on a table   holding c  
 on c a   on a table   on b c  
 on b a   on a table  
 on c a   on a table   on b d  
 on b a   on a table   holding c  
 on c a   on a table   on b c  

 b 

 a 
 on b a   on a table  

 on c a   on a table   on b d  
 on b a   on a table   holding c  
 on c a   on a table   on b c  

 c 
figure     a  interpretation of the fluent term f   on x  a   on a  table    b  bold area is
the interpretation of the abstract state z      on x  a   on a  table    on y  x    
 c  bold area is the interpretation of the abstract state z    on x  a  
on a  table    on y  x   holding x       

   

fiflucap  a heuristic search planner for first order mdps

where pickups  x  y   and pickupf  x  y   define two natures choices for action pickup  x  y   
viz   that it succeeds or fails  for example  the natures choice pickups can be defined as
follows 
pre  pickups  x  y        on x  y    e   on w  x   
eff  pickups  x  y        holding x    on x  y      
where the fluent e denotes the empty robots gripper  for simplicity  we denote the set of
natures choices of an action a as ch  a      aj  choice  a  aj     please note that nowhere
do these action descriptions restrict the domain of discourse to some pre specified set of
blocks 
for each of natures choices aj associated with an action a we define the probability
prob  aj   a  z  denoting the probability with which one of natures choices aj is chosen in a
state z  for example 
prob  pickups  x  y    pickup  x  y    z       
states that the probability for the successful execution of the pickup action in state z is
    
in the next step  we define the reward function for each state  for example  we might
want to give a reward of     to all states in which some block x is on block a and   
otherwise 
reward  z         z v  on x  a    
reward  z       z  v  on x  a      
where v denotes the subsumption relation  which will be described in detail in section       
one should observe that we have specified the reward function without explicit state enumeration  instead  the state space is divided into two abstract states depending on whether
or not  a block x is on block a  likewise  value functions can be specified with respect to
the abstract states only  this is in contrast to classical dp algorithms  in which the states
are explicitly enumerated  action costs can be analogously defined as follows 
cost pickup  x  y       
penalizing the execution of the pickup  action with the value of   
inference mechanism
herein  we show how to perform inferences  i e   compute successors of a given abstract state 
with action schemata directly  avoiding unnecessary grounding  we note that computation
of predecessors can be performed in a similar way 
let z    p  n   be an abstract state  a p            pn   be an action with parameters
p            pn   preconditions pre  a     pp   np   and effects eff  a     pe   ne    let  and 
be substitutions  an action a p            pn   is forward applicable  or simply applicable  to z
with  and   denoted as forward  z  a       if the following conditions hold 
 f    pp  u     ac  p
 f   np  np  n  n   p  n  u     ac   p  np    
   

fiholldobler  karabaev   skvortsova

where u  and u  are new ac  variables and ac  is the equational theory for  that is
represented by the following system of associativity  commutativity  and unit element
equations 
eac       x  y  z  x   y  z     x  y    z
 x  y   x  y   y  x
 x  x      x
  
in other words  the conditions  f   and  f   guarantee that z contains both positive and
negative preconditions of the action a  if an action a is forward applicable to z with  and
 then zsucc    p     n      where
p       pe  u   
n      n    np   ne 

   

is referred to as the a successor of z with  and  and denoted as succ z  a      
for example  consider the action pickups  x  y   as defined above  take z    p  n    
 on b  table   on x    b   e   on x    x       the action pickups  x  y   is forward applicable
to z with     x   x    y   b  u    on b  table   and     x    w  u        thus 
zsucc   succ z  pickups  x  y           p     n     with
p     holding x     on b  table  n      on x    b    

   first order lao 
we present a generalization of the symbolic lao algorithm by feng and hansen        
referred to as first order lao  folao    for solving fomdps  symbolic lao is a
heuristic search algorithm that exploits state abstraction for solving factored mdps  given
an initial state  symbolic lao uses an admissible heuristic to focus computation on the
parts of the state space that are reachable from the initial state  moreover  it specifies mdp
components  value functions  policies  and admissible heuristics using propositional adds 
this allows symbolic lao to manipulate sets of states instead of individual states 
despite the fact that symbolic lao shows an advantageous behaviour in comparison
to classical non symbolic lao by hansen and zilberstein        that evaluates states
individually  it suffers from an important drawback  while solving fomdps  symbolic
lao propositionalizes the problem  this approach is impractical for large fomdps  our
intention is to show how to improve the performance of symbolic lao by providing a
compact first order representation of mdps so that the heuristic search can be performed
without propositionalization  more precisely  we propose to switch the representational
formalism for fomdps in symbolic lao from propositional adds to probabilistic fluent
calculus  the folao algorithm is presented in figure   
as symbolic lao   folao has two phases that alternate until a complete solution
is found  which is guaranteed to be optimal  first  it expands the best partial policy and
evaluates the states on its fringe using an admissible heuristic function  then it performs
dynamic programming on the states visited by the best partial policy  to update their values
and possibly revise the current best partial policy  we note that we focus on partial policies
that map a subcollection of states into actions 
   

fiflucap  a heuristic search planner for first order mdps

policyexpansion   s     g 
e    f    
f rom    s  
repeat s
s
 succ z  aj        
to   
zf rom aj ch a 

where  a          z 
f    f   to  g 
e    e  f rom
f rom    to  g  e
until  f rom    
e    e  f
g    g  f
return  e  f  g 
fovi e  a  prob  reward  cost    v  
repeat
v      v
loop for each z  e
loop for each a  a
loop for each    such that forward  z  a     
q z  a   
p     reward z    cost a  

prob aj   a  z   v    succ z  aj       
aj ch a 

end loop
end loop
v  z     max q z  a     
 a   

end loop
v    normalize v  
r    kv  v   k
until stopping criterion
    extractp olicy v  
return  v    r 
folao  a  prob  reward  cost    s     h   
v    h
g    
for each z  s     initialize  with an arbitrary action
repeat
 e  f  g     policyexpansion   s     g 
 v    r     fovi e  a  prob  reward  cost    v  
until  f     and r  
return    v  

figure    first order lao algorithm 
in the policy expansion step  we perform reachability analysis to find the set f of states
that have not yet been expanded  but are reachable from the set s   of initial states by
following the partial policy   the set of states g contains states that have been expanded
so far  by expanding a partial policy we mean that it will be defined for a larger set of
states in the dynamic programming step  in symbolic lao   reachability analysis on adds
is performed by means of the image operator from symbolic model checking  that computes
   

fiholldobler  karabaev   skvortsova

the set to of successor states following the best current policy  instead  in folao   we apply
the succ operator  defined in equation    one should observe that since the reachability
analysis in folao is performed on abstract states that are defined as first order entities 
the reasoning about successor states is kept on the first order level  in contrast  symbolic
lao would first instantiate s   with all possible combinations of objects  in order to be
able to perform computations using propositional adds later on 
in contrast to symbolic lao   where the dynamic programming step is performed using
a modified version of spudd  we employ a modified first order value iteration algorithm
 fovi   the original fovi by holldobler and skvortsova        performs value iteration
over the entire state space  we modify it so that it computes on states that are reachable
from the initial states  more precisely  on the set e of states that are visited by the best current partial policy  in this way  we improve the efficiency of the original fovi algorithm by
using reachability analysis together with symbolic dynamic programming  fovi produces
a pfc representation of value functions and policies by constructing first order formulae
that partition the state space into abstract states  in effect  it performs value iteration on
top of abstract states  obviating the need for explicit state enumeration 
given a fomdp and a value function represented in pfc  fovi returns the best partial
value function v   the best partial policy  and the residual r  in order to update the values
of the states z in e  we assign the values from the current value function to the successors
of z  we compute successors with respect to all natures choices aj   the residual r is
computed as the absolute value of the largest difference between the current and the newly
computed value functions v   and v   respectively  we note that the newly computed value
function v is taken in its normalized form  i e   as a result of the normalize procedure that
will be described in section        extraction of a best partial policy  is straightforward 
one simply needs to extract the maximizing actions from the best partial value function v  
as with symbolic lao   folao converges to an  optimal policy when three conditions are met      its current policy does not have any unexpanded states      the residual
r is less than the predefined threshold   and     the value function is initialized with an admissible heuristic  the original convergence proofs for lao and symbolic lao by hansen
and zilberstein        carry over in a straightforward way to folao  
when calling folao   we initialize the value function with an admissible heuristic
function h that focuses the search on a subset of reachable states  a simple way to create
an admissible heuristic is to use dynamic programming to compute an approximate value
function  therefore  in order to obtain an admissible heuristic h in folao   we perform
several iterations of the original fovi  we start the algorithm on an initial value function
that is admissible  since each step of fovi preserves admissibility  the resulting value
function is admissible as well  the initial value function assigns the goal reward to each
state thereby overestimating the optimal value  since the goal reward is the maximal possible
reward 
since all computations of folao are performed on abstract states instead of individual
states  fomdps are solved avoiding explicit state and action enumeration and propositionalization  the first order reasoning leads to better performance of folao in comparison
to symbolic lao   as shown in section   
   

fiflucap  a heuristic search planner for first order mdps

from     z    
z 

a  

a  

z 
f g
z 

to     z     z    
f    z  z    
e     z     z     z   
g    z  z    

from     z    

z 

z 

g

fovia    z     z     z    

a 

a  

z 

a  

f
z 

from     z    
z 

to     z     z    
f    z  
e    z  

b 

to     z     z    
z   f     z   z  z  
 
 
 
 
 
 
z
z
z
 
e
 
   z    z    
 
 
 
 
z
 
z
z
g
g
   z    z    
 
 
a  

z 
z 

z 
a  

f

c 

z 

fovia     z     z     z     z     z      

figure    policy expansion 

    policy expansion
the policy expansion step in folao is very similar to the one in the symbolic lao
algorithm  therefore  we illustrate the expansion procedure by means of an example  assume that we start from the initial state z  and two nondeterministic actions a  and a  are
applicable in z    each having two outcomes a     a   and a     a     respectively  without loss
of generality  we assume that the current best policy  chooses a  as an optimal action at
state z    we construct the successors z  and z  of z  with respect to both outcomes a  
and a   of the action a   
the fringe set f as well as the set g of states expanded so far contain the states z 
and z  only  whereas  the set e of states visited by the best current partial policy gets the
state z  in addition  see figure  a  in the next step  fovi is performed on the set e  we
assume that the values have been updated in such a way that a  becomes an optimal action
in z    thus  the successors of z  have to be recomputed with respect to the optimal action
a    see figure  b 
one should observe that one of the a   successors of z    namely z    is an element of the
set g and thus  it has been contained already in the fringe f during the previous expansion
step  hence  the state z  should be expanded and its value recomputed  this is shown
in figure  c  where states z  and z  are a   successors of z    under assumption that a 
is an optimal action in z    as a result  the fringe set f contains the newly discovered
states z    z  and z  and we perform fovi on e    z    z    z    z    z     the state z  is
not contained in e  because it does not belong to the best current partial policy  and the
   

fiholldobler  karabaev   skvortsova

dynamic programming step is performed only on the states that were visited by the best
current partial policy 
    first order value iteration
in folao   the first order value iteration algorithm  fovi  serves two purposes  first  we
perform several iterations of fovi in order to create an admissible heuristic h in folao  
second  in the dynamic programming step of folao   we apply fovi on the states visited
by the best partial policy in order to update their values and possibly revise the current
best partial policy 
the original fovi by holldobler and skvortsova        takes a finite state space of
abstract states  a finite set of stochastic actions  real valued reward and cost functions  and
an initial value function as input  it produces a first order representation of the optimal
value function and policy by exploiting the logical structure of a fomdp  thus  fovi can
be seen as a first order counterpart of the classical value iteration algorithm by bellman
       
      normalization
following the ideas of boutilier et al          fovi relies on the normalization of the state
space that represents the value function  by normalization of a state space  we mean an
equivalence preserving procedure that reduces the size of a state space  this would have an
effect only if a state space contains redundant entries  which is usually the case in symbolic
computations 
although normalization is considered to be an important issue  it has been done by
hand so far  to the best of our knowledge  the preliminary implementation of the approach by boutilier et al         performs only rudimentary logical simplifications and the
authors suggest using an automated first order theorem prover for the normalization task 
holldobler and skvortsova        have developed an automated normalization procedure
for fovi that  given a state space  delivers an equivalent one that contains no redundancy 
the technique employs the notion of a subsumption relation 
more formally  let z     p    n    and z     p    n    be abstract states  then z  is said
to be subsumed by z    written z  v z    if and only if there exist substitutions  and  such
that the following conditions hold 
 s    p   u     ac  p 
 s   n   n   n   n    p   n   u     ac   p   n     
where u  and u  are new ac  variables  the motivation for the notion of subsumption
on abstract states is inherited from the notion of  subsumption between first order clauses
by robinson        with the difference that abstract states contain more complicated negative parts in contrast to the first order clauses 
for example  consider two abstract states z  and z  that are defined as follows 
z     on x    a   on a  table    red y     
z     on x    a    red x       
   

fiflucap  a heuristic search planner for first order mdps

n
 
 
 
 
 
 
 
 
 
 

number of states
supdate
snorm
 
 
  
  
  
  
   
  
   
  
   
  
   
  
   
  
   
  
   
  

time  msec
update norm
   
 
   
 
   
  
    
  
    
  
    
  
    
   
    
   
    
   
    
   

runtime  msec

runtime w o norm  msec

   
   
   
    
    
    
    
    
    
    

   
   
    
     
     
      
n a
n a
n a
n a

table    representative timing results for first ten iterations of fovi 
where z  informally asserts that some block x  is on the block a which is on the table and
no blocks are red  whereas z  informally states that some block x  is on the block a and
x  is not red  we show that z  v z    the relation holds since both conditions  s   and
 s   are satisfied  indeed 
 on x    a   u     ac  on x    a   on a  table 
and
 on x    a   on a  table   red y     u       on x    a   on a  table   red x    
with     x    x    u    on a  table   and     y    x    u       
one should note that subsumption in the language of abstract states inherits the complexity bounds of  subsumption  kapur   narendran         namely  deciding subsumption between two abstract states is np complete  in general  however  karabaev et al 
       have recently developed an efficient algorithm that delivers all solutions of the subsumption problem for the case where abstract states are fluent terms 
for the purpose of normalization  it is convenient to represent the value function as a
set of pairs of the form hz  i  where z is an abstract state and  is a real value  in essence 
the normalization algorithm can be seen as an exhaustive application of the following simplification rule to the value function v  
hz    i hz    i
z  v z 
hz    i
table   illustrates the importance of the normalization algorithm by providing some representative timing results for the first ten iterations of fovi  the experiments were carried
out on the problem taken from the colored blocksworld scenario consisting of ten blocks 
even on such a relatively simple problem fovi with the normalization switched off does
not scale beyond the sixth iteration 
the results in table   demonstrate that the normalization during some iteration of
fovi dramatically shrinks the computational effort during the next iterations  the columns
labelled supdate and snorm show the size of the state space after performing the value updates
   

fiholldobler  karabaev   skvortsova

and the normalization  respectively  for example  the normalization factor  i e   the ratio
between the number supdate of states obtained after performing one update step and the
number snorm of states obtained after performing the normalization step  at the seventh
iteration is       this means that more than ninety percent of the state space contained
redundant information  the fourth and fifth columns in table   contain the time update
and norm spent on performing value updates and on the normalization  respectively  the
total runtime runtime  when the normalization is switched on  is given in the sixth column 
the seventh column labelled runtime w o norm depicts the total runtime of fovi when the
normalization is switched off  if we would sum up all values in the seventh column and the
values in the sixth column up to the sixth iteration inclusively  subtract the latter from the
former and divide the result by the total time norm needed for performing normalization
during the first six iterations  then we would obtain the normalization gain of about three
orders of magnitude 

   experimental evaluation
we demonstrate the advantages of combining the heuristic search together with first order
state abstraction on a system  referred to as flucap  that has successfully entered the
probabilistic track of the      international planning competition  ipc       the experimental results were all obtained using redhat linux running on a    ghz pentium iv
machine with  gb of ram 
in table    we present the performance comparison of flucap together with symbolic
lao on examples taken from the colored blocksworld  bw  scenario that was introduced
during ipc     
our main objective was to investigate whether first order state abstraction using logic
could improve the computational behaviour of a planning system for solving fomdps  the
colored bw problems were our main interest since they were the only ones represented in
first order terms and hence the only ones that allowed us to make use of the first order
state abstraction  therefore  we have concentrated on the design of a domain dependent
planning system that was tuned for the problems taken from the blocksworld scenario 
the colored bw problems differ from the classical bw ones in that  along with the
unique identifier  each block is assigned a specific color  a goal formula  specified in firstorder terms  provides an arrangement of colors instead of an arrangement of blocks 
at the outset of solving a colored bw problem  symbolic lao starts by propositionalizing its components  namely  the goal statement and actions  only after that  the abstraction
using propositional adds is applied  in contrast  flucap performs first order abstraction on a colored bw problem directly  avoiding unnecessary grounding  in the following 
we show how an abstraction technique affects the computation of a heuristic function  to
create an admissible heuristic  flucap performs twenty iterations of fovi and symbolic
lao performs twenty iterations of an approximate value iteration algorithm similar to
apricodd by st aubin  hoey  and boutilier         the columns labelled h time and
nas show the time needed for computing a heuristic function and the number of abstract
states it covers  respectively  in comparison to flucap  symbolic lao needs to evaluate
fewer abstract states in the heuristic function but takes considerably more time  one can
   

fiflucap  a heuristic search planner for first order mdps

flucap

flucap

    
   
    
   
    
    
     
    
          
    
     
n a
     
    
     
          
n a
n a
n a
n a
n a
n a
n a
n a
n a
n a

lao 

lao 

flucap

fovi

flucap

lao 

flucap

                  
                  
                  
                    
                    
                   
                   
                   
                   
n a n a      n a
n a n a       n a
n a n a           
n a n a      n a
n a n a      n a

   
   
   
    
   
   
     
     
    
     
     
     
    
    

  
  
  
  
  
  
   
   
   
n a
n a
n a
n a
n a

   
   
  
    
   
   
    
    
   
    
    
    
    
     

    
   
   
    
    
   
     
    
    
n a
n a
    
n a
n a

    
    
    
    
    
    
    
    
    
n a
n a
n a
n a
n a

    
    
    
    
    
    
    
    
    
    
     
    
        
        

   
   
   
   
   
   
   
   
   
   
   
   
   
   

table    performance comparison of flucap  denoted as flucap  and symbolic lao
 denoted as lao    where the cells n a denote the fact that a planner did not
deliver a solution within the time limit of one hour  nas and ngs are number of
abstract and ground states  respectively 

conclude that abstract states in symbolic lao enjoy more complex structure than those
in flucap 
we note that  in comparison to fovi  flucap restricts the value iteration to a smaller
state space  intuitively  the value function  which is delivered by fovi  covers a larger
state space  because the time that is allocated for the heuristic search in flucap is now
used for performing additional iterations in fovi  the results in the column labelled  
justify that the harder the problem is  that is  the more colors it contains   the higher the
percentage of runtime spent on normalization  almost on all test problems  the effort spent
on normalization takes three percent of the total runtime on average 
in order to compare the heuristic accuracy  we present in the column labelled ngs the
number of ground states which the heuristic assigns non zero values to  one can see that the
heuristics returned by flucap and symbolic lao have similar accuracy  but flucap
takes much less time to compute them  this reflects the advantage of the plain first order
abstraction in comparison to the marriage of propositionalization with abstraction using
propositional adds  in some examples  we gain several orders of magnitude in h time 
the column labelled total time presents the time needed to solve a problem  during this
time  a planner must execute    runs from an initial state to a goal state  a one hour block
is allocated for each problem  we note that  in comparison to flucap  the time required
by heuristic search in symbolic lao  i e   difference between total time and h time  grows
considerably faster in the size of the problem  this reflects the potential of employing
   

 

fovi

  
  

   
   
   
   
   
   
   
   
   
n a
n a
n a
n a
n a

ngs     

nas
flucap

 

   
   
   
   
   
   
   
   
   
   
   
   
   
   

h time  sec 
lao 

 

   
   
   
   
   
   
   
   
   
n a
n a
n a
n a
n a

total time  sec 

flucap

 

fovi

 

c
 
 
 
 
 
 
 
 
 
 
 
 
 
 

flucap

b

total av  reward
lao 

problem

fiholldobler  karabaev   skvortsova

b
  
  
  
  
  
  
  
  
  

total av  reward     
     
     
     
     
     
     
     
     
n a

total time  sec 
     
     
     
     
      
      
      
      
n a

h time  sec 
    
     
     
     
     
      
     
     
n a

nas
   
   
    
    
    
    
    
    
n a

ngs      
   
        
        
        
         
         
         
        
n a

table    performance of flucap on larger instances of one color blocksworld problems 
where the cells n a denote the fact that a planner did not deliver a solution within
the time limit 

first order abstraction instead of abstraction based on propositional adds during heuristic
search 
the average reward obtained over    runs  shown in column total av  reward  is the
planners evaluation score  the reward value close to      which is the maximum possible
reward  simply indicates that a planner found a reasonably good policy  each time the
number of blocks b increases by    the running time for symbolic lao increases roughly
   times  thus  it could not scale to problems having more than seven blocks  this is
in contrast to flucap which could solve problems of seventeen blocks  we note that
the number of colors c in a problem affects the efficiency of an abstraction technique  in
flucap  as c decreases  the abstraction rate increases which  in turn  is reflected by the
dramatic decrease in runtime  the opposite holds for symbolic lao  
in addition  we compare flucap with two variants  the first one  denoted as fovi 
performs no heuristic search at all  but rather  employs fovi to compute the  optimal
total value function from which a policy is extracted  the second one  denoted as flucap  
performs trivial heuristic search starting with an initial value function as an admissible
heuristic  as expected  flucap that combines heuristic search and fovi demonstrates
an advantage over plain fovi and trivial heuristic search  these results illustrate the
significance of heuristic search in general  flucap vs  fovi  and the importance of heuristic
accuracy  in particular  flucap vs  flucap    fovi and flucap do not scale to problems
with more than seven blocks 
table   presents the performance results of flucap on larger instances of one color
bw problems with the number of blocks varying from twenty to thirty four  we believe that
flucap does not scale to problems of larger size because the implementation is not yet
well optimized  in general  we believe that the flucap system should not be as sensitive
to the size of a problem as propositional planners are 
our experiments were targeted at the one color problems only because they are  on the
one hand  the simplest ones for us and  on the other hand  the bottleneck for propositional
planners  the structure of one color problems allows us to apply first order state abstraction in its full power  for example  for a    blocks problem flucap operates on about
    thousand abstract states that explode to           individual states after proposition   

fiflucap  a heuristic search planner for first order mdps

total av  reward     
umass

michigan

purdue 

purdue 

purdue 

caracas

toulouse

c
 
 
 
 
 
 
 
 
 

dresden

b
 
 
  
 
 
  
  
  
  

canberra

problem

     
     
     
     
     
     
     
     
     

     
     
     
     
     
n a
n a
n a
n a

n a
n a
n a
     
n a
n a
n a
n a
n a

n a
n a
n a
n a
n a
n a
n a
n a
n a

     
     
     
     
     
     
     
     
     

     
     
     
     
     
     
     
     
     

     
     
     
     
   
     
     
n a
   

n a
n a
n a
     
     
     
     
n a
n a

n a
n a
n a
     
n a
n a
n a
n a
n a

table    official competition results for colored and non colored blocksworld scenarios 
may        the n a entries in the table indicate that either a planner was not
successful in solving a problem or did not attempt to solve it 

alization  a propositional planner must be highly optimized in order to cope with this
non trivial state space 
we note that additional colors in larger instances  more than    blocks  of bw problems
cause dramatic increase in computational time  so we consider these problems as being
unsolved  one should also observe that the number of abstract states nas increases with
the number of blocks non monotonically because the problems are generated randomly  for
example  the    blocks problem happens to be harder than the    blocks one  finally  we
note that all results that appear in tables   and   were obtained by using the new version of
the evaluation software that does not rely on propositionalization in contrast to the initial
version that was used during the competition 
table   presents the competition results from ipc      where flucap was competitive
in comparison with other planners on colored bw problems  flucap did not perform
well on non colored bw problems because these problems were propositional ones  that
is  goal statements and initial states are ground  and flucap does not yet incorporate
optimization techniques applied in modern propositional planners  the contestants are
indicated by their origin  for example  dresden   flucap  umass   symbolic lao etc 
because only the pickup action has cost    the gain of five points in total reward means
that the plan contains ten fewer actions on average  the competition domains and log files
are available in an online appendix of younes  littman  weissman  and asmuth        
although the empirical results that are presented in this work were obtained on the
domain dependent version of flucap  we have recently developed in  karabaev et al  
      an efficient domain independent inference mechanism that is the core of a domainindependent version of flucap 
   

fiholldobler  karabaev   skvortsova

   related work
we follow the symbolic dp  sdp  approach within situation calculus  sc  of boutilier
et al         in using first order state abstraction for fomdps  one difference is in the
representation language  we use pfc instead of sc  in the course of symbolic value iteration  a state space may contain redundant abstract states that dramatically affect the
algorithms efficiency  in order to achieve computational savings  normalization must be performed to remove this redundancy  however  in the original work by boutilier et al        
this was done by hand  to the best of our knowledge  the preliminary implementation of
the sdp approach within sc uses human provided rewrite rules for logical simplification 
in contrast  holldobler and skvortsova        have developed an automated normalization
procedure for fovi that is incorporated in the competition version of flucap and brings
the computational gain of several orders of magnitude  another crucial difference is that our
algorithm uses heuristic search to limit the number of states for which a policy is computed 
the rebel algorithm by kersting  van otterlo  and de raedt        relates to folao
in that it also uses a representation language that is simpler than situation calculus  this
feature makes the state space normalization computationally feasible 
in motivation  our approach is closely connected to relational envelope based planning
 rebp  by gardiol and kaelbling        that represents mdp dynamics by a compact set
of relational rules and extends the envelope method by dean et al          however  rebp
propositionalizes actions first  and only afterwards employs abstraction using equivalenceclass sampling  in contrast  folao directly applies state and action abstraction on the
first order structure of an mdp  in this respect  rebp is closer to symbolic lao than to
folao   moreover  in contrast to pfc  action descriptions in rebp do not allow negation
to appear in preconditions or in effects  in organization  folao   as symbolic lao   is
similar to real time dp by barto et al         that is an online search algorithm for mdps 
in contrast  folao works offline 
all the above algorithms can be classified as deductive approaches to solving fomdps 
they can be characterized by the following features      they are model based      they
aim at exact solutions  and     logical reasoning methods are used to compute abstractions 
we should note that fovi aims at exact solution for a fomdp  whereas folao   due
to the heuristic search that avoids evaluating all states  seeks for an approximate solution 
therefore  it would be more appropriate to classify folao as an approximate deductive
approach to fomdps 
in another vein  there is some research on developing inductive approaches to solving
fomdps  e g   by fern  yoon  and givan         the authors propose the approximate
policy iteration  api  algorithm  where they replace the use of cost function approximations
as policy representations in api with direct  compact state action mappings  and use a
standard relational learner to learn these mappings  in effect  fern et al  provide policylanguage biases that enable solution of very large relational mdps  all inductive approaches
can be characterized by the following features      they are model free      they aim at
approximate solutions  and     an abstract model is used to generate biased samples from
the underlying fomdp and the abstract model is altered based on them 
a recent approach by gretton and thiebaux        proposes an inductive policy construction algorithm that strikes a middle ground between deductive and inductive tech   

fiflucap  a heuristic search planner for first order mdps

niques  the idea is to use reasoning  in particular first order regression  to automatically
generate a hypothesis language  which is then used as input by an inductive solver  the
approach by gretton and thiebaux is related to sdp and to our approach in the sense that
a first order domain specification language as well as logical reasoning are employed 

   conclusions
we have proposed an approach that combines heuristic search and first order state abstraction for solving fomdps more efficiently  our approach can be seen as two fold 
first  we use dynamic programming to compute an approximate value function that serves
as an admissible heuristic  then heuristic search is performed to find an exact solution
for those states that are reachable from the initial state  in both phases  we exploit the
power of first order state abstraction in order to avoid evaluating states individually  as
experimental results show  our approach breaks new ground in exploring the efficiency of
first order representations in solving mdps  in comparison to existing mdp planners that
must propositionalize the domain  e g   symbolic lao   our solution scales better on larger
fomdps 
however  there is plenty remaining to be done  for example  we are interested in the
question of to what extent the optimization techniques applied in modern propositional
planners can be combined with first order state abstraction  in future competitions  we
would like to face problems where the goal and or initial states are only partially defined
and where the underlying domain contains infinitely many objects 
the current version of folao is targeted at the problems that allow for efficient
first order state abstraction  more precisely  these are the problems that can be polynomially translated into pfc  for example in the colored bw domain  existentially closed
goal descriptions were linearly translated into the equivalent pfc representation  whereas
universally closed goal descriptions would require full propositionalization  thus  the current version of pfc is less first order expressive than  e g   situation calculus  in the future 
it would be interesting to study the extensions of the pfc language  in particular  to find
the trade off between the pfcs expressive power and the tractability of solution methods
for fomdps based on pfc 

acknowledgements
we are very grateful to all anonymous reviewers for the thorough reading of the previous versions of this paper  we also thank zhengzhu feng for fruitful discussions and for
providing us with the executable of the symbolic lao planner  we greatly appreciate
david e  smith for his patience and encouragement  his valuable comments have helped
us to improve this paper  olga skvortsova was supported by a grant within the graduate programme grk     specification of discrete processes and systems of processes
by operational models and logics under auspices of the deutsche forschungsgemeinschaft
 dfg  
   

fiholldobler  karabaev   skvortsova

references
barto  a  g   bradtke  s  j     singh  s  p          learning to act using real time dynamic
programming  artificial intelligence                  
bellman  r  e          dynamic programming  princeton university press  princeton  nj 
usa 
boutilier  c   dean  t     hanks  s          decision theoretic planning  structural assumptions and computational leverage  journal of artificial intelligence research 
        
boutilier  c   reiter  r     price  b          symbolic dynamic programming for firstorder mdps  in nebel  b   ed    proceedings of the seventeenth international conference on artificial intelligence  ijcai       pp          morgan kaufmann 
dean  t   kaelbling  l   kirman  j     nicholson  a          planning under time constraints
in stochastic domains  artificial intelligence           
feng  z     hansen  e          symbolic heuristic search for factored markov decision processes  in dechter  r   kearns  m     sutton  r   eds    proceedings of the eighteenth
national conference on artificial intelligence  aaai       pp          edmonton 
canada  aaai press 
fern  a   yoon  s     givan  r          approximate policy iteration with a policy language
bias  in thrun  s   saul  l     scholkopf  b   eds    proceedings of the seventeenth annual conference on neural information processing systems  nips       vancouver 
canada  mit press 
gardiol  n     kaelbling  l          envelope based planning in relational mdps  in thrun 
s   saul  l     scholkopf  b   eds    proceedings of the seventeenth annual conference
on neural information processing systems  nips       vancouver  canada  mit
press 
gretton  c     thiebaux  s          exploiting first order regression in inductive policy
selection  in chickering  m     halpern  j   eds    proceedings of the twentieth conference on uncertainty in artificial intelligence  uai       banff  canada  morgan
kaufmann 
hansen  e     zilberstein  s          lao   a heuristic search algorithm that finds solutions
with loops  artificial intelligence            
hoey  j   st aubin  r   hu  a     boutilier  c          spudd  stochastic planning using
decision diagrams  in laskey  k  b     prade  h   eds    proceedings of the fifteenth conference on uncertainty in artificial intelligence  uai       pp         
stockholm  morgan kaufmann 
holldobler  s     schneeberger  j          a new deductive approach to planning  new
generation computing            
holldobler  s     skvortsova  o          a logic based approach to dynamic programming 
in proceedings of the workshop on learning and planning in markov processes
advances and challenges at the nineteenth national conference on artificial intelligence  aaai     pp        san jose  ca  aaai press 
   

fiflucap  a heuristic search planner for first order mdps

kapur  d     narendran  p          np completeness of the set unification and matching
problems  in siekmann  j  h   ed    proceedings of the eighth international conference in automated deduction  cade       pp          oxford  england  springer
verlag 
karabaev  e   ramme  g     skvortsova  o          efficient symbolic reasoning for firstorder mdps  in proceedings of the workshop on planning  learning and monitoring
with uncertainty and dynamic worlds at the seventeenth european conference on
artificial intelligence  ecai       riva del garda  italy  to appear 
kersting  k   van otterlo  m     de raedt  l          bellman goes relational  in brodley 
c  e   ed    proceedings of the twenty first international conference in machine
learning  icml       pp          banff  canada  acm 
puterman  m  l          markov decision processes   discrete stochastic dynamic programming  john wiley   sons  inc   new york  ny 
robinson  j          a machine learning logic based on the resolution principle  journal of
the association for computing machinery               
st aubin  r   hoey  h     boutilier  c          apricodd  approximate policy construction using decision diagrams  in leen  t  k   dietterich  t  g     tresp  v   eds   
proceedings of the fourteenth annual conference on neural information processing
systems  nips       pp            denver  mit press 
younes  h   littman  m   weissman  d     asmuth  j          the first probabilistic track
of the international planning competition  journal of artificial intelligence research 
           

   

fi