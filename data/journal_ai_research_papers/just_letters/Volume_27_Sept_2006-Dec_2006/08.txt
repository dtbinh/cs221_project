journal of artificial intelligence research                  

submitted        published      

uncertainty in soft temporal constraint problems  a general
framework and controllability algorithms for the fuzzy case
francesca rossi
kristen brent venable

frossi   math   unipd   it
kvenable   math   unipd   it

university of padova  department of pure and applied mathematics 
via trieste           padova italy

neil yorke smith

nysmith   ai   sri   com

sri international 
    ravenswood ave  menlo park  ca       usa

abstract
in real life temporal scenarios  uncertainty and preferences are often essential and coexisting
aspects  we present a formalism where quantitative temporal constraints with both preferences and
uncertainty can be defined  we show how three classical notions of controllability  that is  strong 
weak  and dynamic   which have been developed for uncertain temporal problems  can be generalized to handle preferences as well  after defining this general framework  we focus on problems
where preferences follow the fuzzy approach  and with properties that assure tractability  for such
problems  we propose algorithms to check the presence of the controllability properties  in particular  we show that in such a setting dealing simultaneously with preferences and uncertainty does not
increase the complexity of controllability testing  we also develop a dynamic execution algorithm 
of polynomial complexity  that produces temporal plans under uncertainty that are optimal with
respect to fuzzy preferences 

   introduction
current research on temporal constraint reasoning  once exposed to the difficulties of real life problems  can be found lacking both expressiveness and flexibility  in rich application domains it is
often necessary to simultaneously handle not only temporal constraints  but also preferences and
uncertainty 
this need can be seen in many scheduling domains  the motivation for the line of research
described in this paper is the domain of planning and scheduling for nasa space missions  nasa
has tackled many scheduling problems in which temporal constraints have been used with reasonable success  while showing their limitations in their lack of capability to deal with uncertainty and
preferences  for example  the remote agent  rajan  bernard  dorais  gamble  kanefsky  kurien 
millar  muscettola  nayak  rouquette  smith  taylor    tung        muscettola  morris  pell   
smith        experiments  which consisted of placing an ai system on board to plan and execute
spacecraft activities  represents one of the most interesting examples of this  remote agent worked
with high level goals which specified  for example  the duration and frequency of time windows
within which the spacecraft had to take asteroid images to be used for orbit determination for the
on board navigator  remote agent dealt with both flexible time intervals and uncontrollable events 
however  it did not deal with preferences  all the temporal constraints are hard  the benefit of
adding preferences to this framework would be to allow the planner to handle uncontrollable events
while at the same time maximizing the mission managers preferences 
c
    
ai access foundation  all rights reserved 

firossi   v enable    yorke  s mith

a more recent nasa application is in the rovers domain  dearden  meuleau  ramakrishnan 
smith    washington        bresina  jonsson  morris    rajan         nasa is interested in
the generation of optimal plans for rovers designed to explore a planetary surface  e g  spirit and
opportunity for mars   bresina et al          dearden et al         describe the problem of generating plans for planetary rovers that handle uncertainty over time and resources  the approach
involves first constructing a seed plan  and then incrementally adding contingent branches to this
plan in order to improve its utility  again  preferences could be used to embed utilities directly in
the temporal model 
a third space application  which will be used several times in this paper as a running example 
concerns planning for fleets of earth observing satellites  eos   frank  jonsson  morris    smith 
       this planning problem involves multiple satellites  hundreds of requests  constraints on when
and how to serve each request  and resources such as instruments  recording devices  transmitters
and ground stations  in response to requests placed by scientists  image data is acquired by an eos 
the data can be either downlinked in real time or recorded on board for playback at a later time 
ground stations or other satellites are available to receive downlinked images  different satellites
may be able to communicate only with a subset of these resources  and transmission rates will differ
from satellite to satellite and from station to station  further  there may be different financial costs
associated with using different communication resources  in  frank et al         the eos scheduling problem is dealt with by using a constraint based interval representation  candidate plans are
represented by variables and constraints  which reflect the temporal relationship between actions
and the constraints on the parameters of states or actions  also  temporal constraints are necessary
to model duration and ordering constraints associated with the data collection  recording  and downlinking tasks  solutions are preferred based on objectives  such as maximizing the number of high
priority requests served  maximizing the expected quality of the observations  and minimizing the
cost of downlink operations   uncertainty is present due to weather  specifically due to duration and
persistence of cloud cover  since image quality is obviously affected by the amount of clouds over
the target  in addition  some of the events that need to be observed may happen at unpredictable
times and have uncertain durations  e g  fires or volcanic eruptions  
some existing frameworks  such as simple temporal problems with preferences  stpps   khatib 
morris  morris    rossi         address the lack of expressiveness of hard temporal constraints by
adding preferences to the temporal framework  but do not take into account uncertainty  other models  such as simple temporal problems with uncertainty  stpus   vidal   fargier         account
for contingent events  but have no notion of preferences  in this paper we introduce a framework
which allows us to handle both preferences and uncertainty in simple temporal problems  the
proposed model  called simple temporal problems with preferences and uncertainty  stppus  
merges the two pre existing models of stpps and stpus 
an stppu instance represents a quantitative temporal problem with preferences and uncertainty
via a set of variables  representing the starting or ending times of events  which can be controllable
by the agent or not   and a set of soft temporal constraints over such variables  each of which includes an interval containing the allowed durations of the event or the allowed times between events 
a preference function associating each element of the interval with a value specifies how much that
value is preferred  such soft constraints can be defined on both controllable and uncontrollable
events  in order to further clarify what is modeled by an stppu  let us emphasize that graduality
is only allowed in terms of preferences and not of uncertainty  in this sense  the uncertainty represented by contingent stppu constraints is the same as that of contingent stpu constraints  all
   

fiu ncertainty

in soft temporal constraint problems

durations are assumed to be equally possible  in addition to expressing uncertainty  in stppus  contingent constraints can be soft and different preference levels can be associated to different durations
of contingent events 
on these problems  we consider notions of controllability similar to those defined for stpus 
to be used instead of consistency because of the presence of uncertainty  and we adapt them to
handle preferences  these notions  usually called strong  weak  and dynamic controllability  refer
to the possibility of controlling the problem  that is  of the executing agent assigning values to
the controllable variables  in a way that is optimal with respect to what nature has decided  or will
decide  for the uncontrollable variables  the word optimal here is crucial  since in stpus  where
there are no preferences  we just need to care about controllability  and not optimality  in fact  the
notions we define in this paper that directly correspond to those for stpus are called strong  weak 
and dynamic optimal controllability 
after defining these controllability notions and proving their properties  we then consider the
same restrictions which have been shown to make temporal problems with preferences tractable
 khatib et al         rossi  sperduti  venable  khatib  morris    morris         i e  semi convex
preference functions and totally ordered preferences combined with an idempotent operator  in
this context  for each of the above controllability notions  we give algorithms that check whether
they hold  and we show that adding preferences does not make the complexity of testing such
properties worse than in the case without preferences  moreover  dealing with different levels of
preferences  we also define testing algorithms which refer to the possibility of controlling a problem
while maintaining a preference of at least a certain level  called  controllability   finally  in the
context of dynamic controllability  we also consider the execution of dynamic optimal plans 
parts of the content of this paper have appeared in  venable   yorke smith        rossi  venable    yorke smith        yorke smith  venable    rossi        rossi  venable    yorke smith 
       this paper extends the previous work in at least two directions  first  while in those papers optimal and  controllability  strong or dynamic  were checked separately  now we can check
optimal  strong or dynamic  controllability and  if it does not hold  the algorithm will return the
highest  such that the given problem is  strong or  dynamic controllable  moreover  results are
presented in a uniform technical environment  by providing a thorough theoretical study of the properties of the algorithms and their computational aspects  which makes use of several unpublished
proofs 
this paper is structured as follows  in section   we give the background on temporal constraints
with preference and with uncertainty  in section   we define our formalism for simple temporal
problems with both preferences and uncertainty and  in section    we describe our new notions of
controllability  algorithms to test such notions are described respectively in section   for optimal
strong controllability  in section   for optimal weak controllability  and in section   for optimal
dynamic controllability  in section   we then give a general strategy for using such notions  finally  in section    we discuss related work  and in section    we summarize the main results and
we point out some directions for future developments  to make the paper more readable  the proofs
of all theorems are contained in the appendix 

   background
in this section we give the main notions of temporal constraints  dechter  meiri    pearl        and
the framework of temporal constraint satisfaction problems with preferences  tcspps   khatib

   

firossi   v enable    yorke  s mith

et al         rossi et al          which extend quantitative temporal constraints  dechter et al        
with semiring based preferences  bistarelli  montanari    rossi         we also describe simple
temporal problems with uncertainty  stpus   vidal   fargier        morris  muscettola    vidal 
       which extend a tractable subclass of temporal constraints to model agent uncontrollable
contingent events  and we define the corresponding notions of controllability  introduced in  vidal
  fargier        
    temporal constraint satisfaction problems
one of the requirements of a temporal reasoning system for planning and scheduling problems is
an ability to deal with metric information  in other words  to handle quantitative information on
duration of events  such as it will take from ten to twenty minutes to get home   quantitative
temporal networks provide a convenient formalism to deal with such information  they consider
instantaneous events as the variables of the problem  whose domains are the entire timeline  a
variable may represent either the beginning or an ending point of an event  or a neutral point of
time  an effective representation of quantitative temporal networks  based on constraints  is within
the framework of temporal constraint satisfaction problems  tcsps   dechter et al         
in this paper we are interested in a particular subclass of tcsps  known as simple temporal
problems  stps   dechter et al          in such a problem  a constraint between time points x i and
xj is represented in the constraint graph as an edge x i  xj   labeled by a single interval  aij   bij  
that represents the constraint aij  xj  xi  bij   solving an stp means finding an assignment
of values to variables such that all temporal constraints are satisfied 
whereas the complexity of a general tcsp comes from having more than one interval in a
constraint  stps can be solved in polynomial time  despite the restriction to a single interval per
constraint  stps have been shown to be valuable in many practical applications  this is why stps
have attracted attention in the literature 
an stp can be associated with a directed weighted graph g d    v  ed    called the distance
graph  it has the same set of nodes as the constraint graph but twice the number of edges  for
each binary constraint over variables x i and xj   the distance graph has an edge xi  xj which is
labeled by weight bij   representing the linear inequality x j xi  bij   as well as an edge xj  xi
which is labeled by weight aij   representing the linear inequality x i  xj  aij  
each path from xi to xj in the distance graph gd   say through variables xi    xi   xi    xi         
p
  xik   xj induces the following path constraint  x j xi  kh   bih  ih   the intersection of all
induced path constraints yields the inequality x j  xi  dij   where dij is the length of the shortest
path from xi to xj   if such a length is defined  i e  if there are no negative cycles in the distance
graph  an stp is consistent if and only if its distance graph has no negative cycles  shostak       
leiserson   saxe         this means that enforcing path consistency  by an algorithm such as
pc    is sufficient for solving stps  dechter et al          it follows that a given stp can be effectively specified by another complete directed graph  called a d graph  where each edge xi  xj is
labeled by the shortest path length d ij in the distance graph gd  
in  dechter et al         it is shown that any consistent stp is backtrack free  that is  decomposable  relative to the constraints in its d graph  moreover  the set of temporal constraints of the
form  dji   dij   is the minimal stp corresponding to the original stp and it is possible to find one
of its solutions using a backtrack free search that simply assigns to each variable any value that
satisfies the minimal network constraints compatibly with previous assignments  two specific solu 

   

fiu ncertainty

in soft temporal constraint problems

tions  usually called the latest and the earliest assignments  are given by s l    d             d n   and
se    d             dn     which assign to each variable respectively its latest and earliest possible time
 dechter et al         
the d graph  and thus the minimal network  of an stp can be found by applying floydwarshalls all pairs shortest path algorithm  floyd        to the distance graph with a complexity
of o n    where n is the number of variables  if the graph is sparse  the bellman ford single source
shortest path algorithm can be used instead  with a complexity equal to o ne   where e is the
number of edges  we refer to  dechter et al         xu   choueiry        for more details on
efficient stp solving 
    temporal csps with preferences
although expressive  tcsps model only hard temporal constraints  this means that all constraints
have to be satisfied  and that the solutions of a constraint are all equally satisfying  however  in
many real life situations some solutions are preferred over others and  thus  the global problem is to
find a way to satisfy the constraints optimally  according to the preferences specified 
to address this need  the tcsp framework has been generalized in  khatib et al         to
associate each temporal constraint with a preference function which specifies the preference for
each distance allowed by the constraint  this framework merges tcsps and semiring based soft
constraints  bistarelli et al         
definition    soft temporal constraint  a soft temporal constraint is a   tuple h x  y    i  a  f i
consisting of
 a set of two variables  x  y   over the integers  called the scope of the constraint 
 a set of disjoint intervals i     a    b              an   bn     where ai   bi  z  and ai  bi for all
i              n 
 a set of preferences a 
 a preference function f   i  a  which is a mapping of the elements of i into preference
values  taken from the set a 
given an assignment of the variables x and y   x   v x and y   vy   we say that this assignment
satisfies the constraint h x  y    i  a  f i iff there exists  a i   bi    i such that ai  vy  vx  bi   in
such a case  the preference associated with the assignment by the constraint is f  v y  vx     p  
when the variables and the preference set of an stpp are apparent  we will omit them and write
a soft temporal constraint just as a pair hi  f i 
following the soft constraint approach  bistarelli et al          the preference set is the carrier
of an algebraic structure known as a c semiring  informally a c semiring s   ha           i is
a set equipped with two operators satisfying some proscribed properties  for details  see bistarelli
et al           the additive operator   is used to induce the ordering on the preference set a  given
two elements a  b  a  a  b iff a   b   a  the multiplicative operator  is used to combine
preferences 

   

firossi   v enable    yorke  s mith

definition    tcspp  given a semiring s   ha           i  a temporal constraint satisfaction
problems with preferences  tcspp  over s is a pair hv  ci  where v is a set of variables and c is
a set of soft temporal constraint over pairs of variables in v and with preferences in a  
definition    solution  given a tcspp hv  ci over a semiring s  a solution is a complete assignment of the variables in v   a solution t is said to satisfy a constraint c in c with preference p if
the projection of t over the pair of variables of cs scope satisfies c with preference p  we will write
pref  t  c    p  
each solution has a global preference value  obtained by combining  via the  operator  the
preference levels at which the solution satisfies the constraints in c 
definition    preference of a solution  given a tcspp hv  ci over a semiring s  the preference
of a solution t   hv            vn i  denoted val t   is computed by cc pref  s  c   
the optimal solutions of a tcspp are those solutions which have the best global preference
value  where best is determined by the ordering  of the values in the semiring 
definition    optimal solutions  given a tcspp p   hv  ci over the semiring s  a solution t of
p is optimal if for every other solution t   of p   t   s t  
choosing a specific semiring means selecting a class of preferences  for example  the semiring
sf csp   h        max  min      i
allows one to model the so called fuzzy preferences  ruttkay        schiex         which associate
to each element allowed by a constraint a preference between   and    with   being the worst and
  being the best preferences   and gives to each complete assignment the minimal among all preferences selected in the constraints  the optimal solutions are then those solutions with the maximal
preference  another example is the semiring s csp   h f alse  true       f alse  truei  which
allows one to model classical tcsps  without preferences  in the more general tcspp framework 
in this paper we will refer to fuzzy temporal constraints  however  the absence of preferences
in some temporal constraints can always be modelled using just the two elements   and   in such
constraints  thus preferences can always coexists with hard constraints 
a special case occurs when each constraint of a tcspp contains a single interval  in analogy to
what is done in the case without preferences  such problems are called simple temporal problems
with preferences  stpps   this class of temporal problems is interesting because  as noted above 
stps are polynomially solvable while general tcsps are np hard  and the computational effect of
adding preferences to stps is not immediately obvious 
example   consider the eos example given in section    in figure   we show an stpp that
models the scenario in which there are three events to be scheduled on a satellite  the start time  ss 
and ending time  se  of a slewing procedure and the starting time  is  of an image retrieval  the
slewing activity in this example can take from   to    units of time  ideally between   to   units of
time  and the shortest time possible otherwise  the image taking can start any time between   and
   units of time after the slewing has been initiated  the third constraint  on variables is and se 
models the fact that it is better for the image taking to start as soon as the slewing has stopped  
   

fiu ncertainty

in soft temporal constraint problems

    
   

   
   
   
   

         

      

ss

se

 

     
   

   
   

   

   

   

   

   
 

  
is

       

       

 

 

 

figure    the stpp for example   
in the following example  instead  we consider an stpp which uses the set based semiring 
sset   h a         ai  notice that  as in the fuzzy semiring  the multiplicative operator  i e  
intersection  is idempotent  while the order induced by the additive operator  i e   union  is partial 
example   consider a scenario where three friends  alice  bob  and carol  want to meet for a drink
and then for dinner and must decide at what time to meet and where to reserve dinner depending
on how long it takes to get to the restaurant  the variables involved in the problem are  the global
start time x    with only the value   in its domain  the start time of the drink  ds   the time to
leave for dinner  de   and the time of arrival at the restaurant  rs   they can meet  for the drink 
between   and     pm and they will leave for dinner after half an hour  moreover  depending on
the restaurant they choose  it will take from    to    minutes to get to dinner  alice prefers to
meet early and have dinner early  like carol  bob prefers to meet at      and to go to the best
restaurant which is the farthest  thus  we have the following two soft temporal constraints  the first
constraint is defined on the variable pair  x    ds   the interval is             and the preference
function  fs   is such that  fs             alice  carol   fs             bob  and fs             
the second constraint is a binary constraint on pair  de rs   with interval          and preference
function fse   such that  fse         alice  carol  and fse         and fse         bob   there
is an additional hard constraint on the variable pair  ds  de   which can be modeled by the
interval          and a single preference equal to  alice  carol  bob   the optimal solution is
 x       ds           de           rs            with preference  alice  carol    
although both tcspps and stpps are np hard  in  khatib et al         a tractable subclass of
stpps is described  the tractability assumptions are  the semi convexity of preference functions 
the idempotence of the combination operator of the semiring  and a totally ordered preference set 
a preference function f of a soft temporal constraint hi  f i is semi convex iff for all y        the set
 x  i  f  x   y  forms an interval  notice that semi convex functions include linear  convex  and
also some step functions  the only aggregation operator on a totally ordered set that is idempotent
is min  dubois   prade         i e  the combination operator of the s f csp semiring 
if such tractability assumptions are met  stpps can be solved in polynomial time  in  rossi
et al         two polynomial solvers for this tractable subclass of stpps are proposed  one solver is

   

firossi   v enable    yorke  s mith

based on the extension of path consistency to tcspps  the second solver decomposes the problem
into solving a set of hard stps 
    simple temporal problems with uncertainty
when reasoning concerns activities that an agent performs interacting with an external world  uncertainty is often unavoidable  tcsps assume that all activities have durations under the control of
the agent  simple temporal problems with uncertainty  stpus   vidal   fargier        extend
stps by distinguishing contingent events  whose occurrence is controlled by exogenous factors
often referred to as nature 
as in stps  activity durations in stpus are modelled by intervals  the start times of all activities are assumed to be controlled by the agent  this brings no loss of generality   the end times 
however  fall into two classes  requirement  free in vidal   fargier        and contingent  the
former  as in stps  are decided by the agent  but the agent has no control over the latter  it only can
observe their occurrence after the event  observation is supposed to be known immediately after the
event  the only information known prior to observation of a time point is that nature will respect
the interval on the duration  durations of contingent links are assumed to be independent 
in an stpu  the variables are thus divided into two sets depending on the type of time points
they represent 
definition    variables  the variables of an stpu are divided into 
 executable time points  are those points  b i   whose time is assigned by the executing agent 
 contingent time points  are those points  e i   whose time is assigned by the external world  
the distinction on variables leads to constraints which are also divided into two sets  requirement and contingent  depending on the type of variables they constrain  note that as in stps all the
constraints are binary  formally 
definition   the constraints of an stpu are divided into 
 a requirement constraint  or link  r ij   on generic time points ti and tj     is an interval iij  
 lij   uij   such that lij   tj     ti    uij where  ti   is a value assigned to variable ti
 a contingent link ghk   on executable point bh and contingent point ek   is an interval ihk  
 lij   uij   which contains all the possible durations of the contingent event represented by b h
and ek   
the formal definition of an stpu is the following 
definition    stpu  a simple temporal problem with uncertainty  stpu  is a   tuple n  
 xe   xc   rr   rc   such that 
 xe    b            bne    is the set of executable time points 
 xc    e            enc    is the set of contingent time points 
   in general ti and tj can be either contingent or executable time points 

   

fiu ncertainty

start
cooking

in soft temporal constraint problems

       
end
cooking

      

requirement constr 

       

contingent constr 

start
dinner

contingent timepoint

end
dinner

executable timepoint

figure    the stpu for example   
 rr    ci  j            cic jc    is the set c of requirement constraints 
 rc    gi  j            gig jg    is the set g of contingent constraints  
example   this is an example taken from  vidal   fargier         which describes a scenario
which can be modeled using an stpu  consider two activities cooking and having dinner  assume
you dont want to eat your dinner cold  also  assume you can control when you start cooking and
when the dinner starts but not when you finish cooking or when the dinner will be over  the
stpu modeling this example is depicted in figure    there are two executable time points  startcooking  start dinner  and two contingent time points  end cooking  end dinner   moreover  the
contingent constraint on variables  start cooking  end cooking  models the uncontrollable duration
of fixing dinner which can take anywhere from    to    minutes  the contingent constraint on
variables  start dinner  end dinner  models the uncontrollable duration of the dinner that can last
from    to    minutes  finally  there is a requirement constraint on variables  end cooking  startdinner  that simply bounds to    minutes the time between when the food is ready and when the
dinner starts  
assignments to executable variables and assignments to contingent variables are distinguished 
definition    control sequence  a control sequence  is an assignment to executable time points 
it is said to be partial if it assigns values to a proper subset of the executables  otherwise complete  
definition     situation  a situation  is a set of durations on contingent constraints  if not all the
contingent constraints are assigned a duration it is said to be partial  otherwise complete  
definition     schedule  a schedule is a complete assignment to all the time points in x e and xc  
a schedule t identifies a control sequence  t   consisting of all the assignments to the executable
time points  and a situation  t   which is the set of all the durations identified by the assignments
in t on the contingent constraints  sol p   denotes the set of all schedules of an stpu  
it is easy to see that to each situation corresponds an stp  in fact  once the durations of the
contingent constraints are fixed  there is no more uncertainty in the problem  which becomes an
stp  called the underlying stp  this is formalized by the notion of projection 
definition     projection  a projection p    corresponding to a situation   is the stp obtained
leaving all requirement constraints unchanged and replacing each contingent constraint g hk with

   

firossi   v enable    yorke  s mith

the constraint h hk   hk  i  where hk is the duration of event represented by g hk in   p roj p   is
the set of all projections of an stpu p   
    controllability
it is clear that in order to solve a problem with uncertainty all possible situations must be considered 
the notion of consistency defined for stps does not apply since it requires the existence of a single
schedule  which is not sufficient in this case since all situations are equally possible   for this
reason  in  vidal   fargier         the notion of controllability has been introduced  controllability
of an stpu is  in some sense  the analogue of consistency of an stp  controllable means the agent
has a means to execute the time points under its control  subject to all constraints  the notion
of controllability is expressed  in terms of the ability of the agent to find  given a situation  an
appropriate control sequence  this ability is identified with having a strategy 
definition     strategy  a strategy s is a map s   p roj p    sol p    such that for every projection p   s p   is a schedule which induces the durations in  on the contingent constraints 
further  a strategy is viable if  for every projection p    s p   is a solution of p   
we will write  s p   x to indicate the value assigned to executable time point x in schedule
s p    and  s p    x the history of x in s p    that is  the set of durations of contingent constraints which occurred in s p   before the execution of x  i e  the partial solution so far 
in  vidal   fargier         three notions of controllability are introduced for stpus 
      s trong c ontrollability
the first notion is  as the name suggests  the most restrictive in terms of the requirements that the
control sequence must satisfy 
definition     strong controllability  an stpu p is strongly controllable  sc  iff there is an
execution strategy s s t  p  p roj p    s p   is a solution of p   and  s p    x    s p    x  
p    p  projections and for every executable time point x  
in words  an stpu is strongly controllable if there is a fixed execution strategy that works in all
situations  this means that there is a fixed control sequence that will be consistent with any possible
scenario of the world  thus  the notion of strong controllability is related to that of conformant
planning  it is clearly a very strong requirement  as vidal and fargier        suggest  sc may
be relevant in some applications where the situation is not observable at all or where the complete
control sequence must be known beforehand  for example in cases in which other activities depend
on the control sequence  as in the production planning area  
in  vidal   fargier        a polynomial time algorithm for checking if an stpu is strongly
controllable is proposed  the main idea is to rewrite the stpu given in input as an equivalent stp
only on the executable variables  what is important to notice  for the contents of this paper  is
that algorithm stronglycontrollable takes in input an stpu p    x e   xc   rr   rc   and returns in
output an stp defined on variables xe   the stpu in input is strongly controllable iff the derived
stp is consistent  moreover  every solution of the stp is a control sequence which guarantees
   tsamardinos        has augmented stpus to include probability distributions over the possible situations  in this
paper we implicitly assume a uniform  independent distribution on each link 

   

fiu ncertainty

in soft temporal constraint problems

strong controllability for the stpu  when the stp is consistent  the output of stronglycontrollable
is its minimal form 
in  vidal   fargier        it is shown that the complexity of stronglycontrollable is o n     
where n is the number of variables 
      w eak c ontrollability
on the other hand  the notion of controllability with the fewest restrictions on the control sequences
is weak controllability 
definition     weak controllability  an stpu p is said to be weakly controllable  wc  iff
p  p roj p   there is a strategy s s t  s  p   is a solution of p   
in words  an stpu is weakly controllable if there is a viable global execution strategy  there
exists at least one schedule for every situation  this can be seen as a minimum requirement since 
if this property does not hold  then there are some situations such that there is no way to execute
the controllable events in a consistent way  it also looks attractive since  once an stpu is shown
to wc  as soon as one knows the situation  one can pick out and apply the control sequence that
matches that situation  unfortunately in  vidal   fargier        it is shown that this property is not
so useful in classical planning  nonetheless  wc may be relevant in specific applications  as largescale warehouse scheduling  where the actual situation will be totally observable before  possibly
just before  the execution starts  but one wants to know in advance that  whatever the situation  there
will always be at least one feasible control sequence 
in  vidal   fargier        it is conjectured and in  morris   muscettola        it is proven
that the complexity of checking weak controllability is co np hard  the algorithm proposed for
testing wc in  vidal   fargier        is based on a classical enumerative process and a lookahead
technique 
strong controllability implies weak controllability  vidal   fargier         moreover  an
stpu can be seen as an stp if the uncertainty is ignored  if enforcing path consistency removes
some elements from the contingent intervals  then these elements belong to no solution  if so  it is
possible to conclude that the stpu is not weakly controllable 
definition     pseudo controllability  an stpu is pseudo controllable if applying path consistency leaves the intervals on the contingent constraints unchanged  
unfortunately  if path consistency leaves the contingent intervals untouched  we cannot conclude that the stpu is weakly controllable  that is  wc implies pseudo controllability but the
converse is false  in fact  weak controllability requires that given any possible combination of durations of all contingent constraints the stp corresponding to that projection must be consistent 
pseudo controllability  instead  only guarantees that for each possible duration on a contingent constraint there is at least one projection that contains such a duration and it is a consistent stp 
      dynamic c ontrollability
in dynamic applications domains  such as planning  the situation is observed over a time  thus
decisions have to be made even if the situation remains partially unknown  indeed the distinction
between strong and dynamic controllability is equivalent to that between conformant and conditional planning  the final notion of controllability defined in  vidal   fargier        address this
   

firossi   v enable    yorke  s mith

pseudocode of dynamicallycontrollable
   input stpu w 
   if w is not pseudo controllable then write not dc and stop 
   select all triangles abc  c uncontrollable  a before c 
such that the upper bound of the bc interval  v  is non negative 
   introduce any tightenings required by the precede case
and any waits required by the unordered case 
   do all possible regressions of waits 
while converting unconditional waits to lower bounds 
also introduce lower bounds as provided by the general reduction 
   if steps   and   do not produce any new  or tighter 
constraints  then return true  otherwise go to   
figure    algorithm dynamicallycontrollable proposed in  morris et al         for checking dc
of an stpu 
 x y 

a

c

requirement constr 
contingent constr 
contingent timepoint

 p q 

 u v 

executable timepoint

b

figure    a triangular stpu 
case  here we give the definition provided in  morris et al         which is equivalent but more
compact 
definition     dynamic controllability  an stpu p is dynamically controllable  dc  iff there
is a strategy s such that p    p  in p roj p   and for any executable time point x 
   if  s p     x    s p     x then  s p    x    s p    x  
   s p    is a solution of p  and s p    is a solution of p    
in words  an stpu is dynamically controllable if there exists a viable strategy that can be built 
step by step  depending only the observed events at each step  sc   dc and that dc  
wc  dynamic controllability  seen as the most useful controllability notion in practice  is also the
one that requires the most complicated algorithm  surprisingly  morris et al         and morris and
muscettola        proved dc is polynomial in the size of the stpu representation  in figure   the
pseudocode of algorithm dynamicallycontrollable is shown 
in this paper we will extend the notion of dynamic controllability in order to deal with preferences  the algorithm we will propose to test this extended property will require a good  even if not
complete  understanding of the dynamicallycontrollable algorithm  thus  we will now give the
necessary details on this algorithm 
   

fiu ncertainty

in soft temporal constraint problems

as it can be seen  the algorithm is based on some considerations on triangles of constraints  the
triangle shown in figure   is a triangular stpu with one contingent constraint  ac  two executable
time points  a and b  and a contingent time point c  based on the sign of u and v  three different
cases can occur 
 follow case  v       b will always follow c  if the stpu is path consistent then it is also dc
since  given the time at which c occurs after a  by definition of path consistency  it is always
possible to find a consistent value for b 
 precede case  u      b will always precede or happen simultaneously with c  then the
stpu is dynamically controllable if y  v  x  u  and the interval  p  q  on ab should be
replaced by interval  y  v  x  u   that is by the sub interval containing all the elements of
 p  q  that are consistent with each element of  x  y  
 unordered case  u     and v      b can either follow or precede c  to ensure dynamic
controllability  b must wait either for c to occur first  or for t   y  v units of time to go by
after a  in other words  either c occurs and b can be executed at the first value consistent with
cs time  or b can safely be executed t units of time after as execution  this can be described
by an additional constraint which is expressed as a wait on ab and is written   c  t    where
t   y  v  of course if x  y  v then we can raise the lower bound of ab  p  to y  v
 unconditional unordered reduction   and in any case we can raise it to x if x   p  general
unordered reduction   
it can be shown that waits can be propagated  in morris et al         the term regressedis used
  from one constraint to another  a wait on ab induces a wait on another constraint involving a 
e g  ad  depending on the type of constraint db  in particular  there are two possible ways in which
the waits can be regressed 
 regression    assume that the ab constraint has a wait hc  ti  then  if there is any db
constraint  including ab itself  with an upper bound  w  it is possible to deduce a wait hc  t 
wi on ad  figure   a  shows this type of regression 
 regression    assume that the ab constraint has a wait hc  ti  where t     then  if there
is a contingent constraint db with a lower bound  z  and such that b    c  it is possible to
deduce a wait hc  t  zi on ad  figure   b  shows this type of regression 
assume for simplicity and without loss of generality that a is executed at time    then  b
can be executed before the wait only if c is executed first  after the wait expires  b can safely be
executed at any time left in the interval  as figure   shows  it is possible to consider the follow and
precede cases as special cases of the unordered  in the follow case we can put a dummy wait
after the end of the interval  meaning that b must wait for c to be executed in any case  figure  
 a    in the precede case  we can set a wait that expires at the first element of the interval meaning
that b will be executed before c and any element in the interval will be consistent with c  figure  
 b    the unordered case can thus be seen as a combination of the two previous states  the part of
the interval before the wait can be seen as a follow case  in fact  b must wait for c until the wait
expires   while the second part including and following the wait can be seen as a precede case  after
the wait has expired  b can be executed and any assignment to b that corresponds to an element of
this part of interval ab will be consistent with any possible future value assigned to c  
   

firossi   v enable    yorke  s mith

 x y 
a

 x y 
c

contingent

 c t 

 c tw 

c

a

 u v 

contingent

 c t 

 c tz 

 p q 

d

 u v 

 p q 

b

b

d

 z w 

 z w 

requirement constr 
contingent constr 
controllable timepoint

requirement constr 
contingent constr 
controllable timepoint

contingent timepoint

contingent timepoint

 a  regression  

 b  regression  

figure    regressions in algorithm dynamicallycontrollable 

follow case

wait for c to be executed
wait

execute regardless c

precede case

wait

unordered case

wait fo c to be executed

execute regardless c

wait

figure    the resulting ab interval constraint in the three cases considered by the
dynamicallycontrollable algorithm 

the dynamicallycontrollable algorithm applies these rules to all triangles in the stpu and
regresses all possible waits  if no inconsistency is found  that is no requirement interval becomes
empty and no contingent interval is squeezed  the stpu is dc and the algorithm returns an stpu
where some constraints may have waits to satisfy  and the intervals contain elements that appear
in at least one possible dynamic strategy  this stpu can then be given to an execution algorithm
which dynamically assigns values to the executables according to the current situation 
the pseudocode of the execution algorithm  dc execute  is shown in figure    the execution
algorithm observes  as the time goes by  the occurrence of the contingent events and accordingly
executes the controllables  for any controllable b  its execution is triggered if it is     live  that
   

fiu ncertainty

in soft temporal constraint problems

pseudocode for dc execute
   input stpu p  
   perform initial propagation from the start time point 
   repeat
   immediately execute any executable time points that
have reached their upper bounds 
   arbitrarily pick an executable time point x that
is live and enabled and not yet executed  and whose waits 
if any  have all been satisfied 
   execute x 
   propagate the effect of the execution 
   if network execution is complete then return 
   else advance current time 
propagating the effect of any contingent time points that occur 
    until false 
figure    algorithm that executes a dynamic strategy for an stpu 
is  if current time is within its bounds  it is     enabled  that is  all the executables constrained to
happen before have occurred  and     all the waits imposed by the contingent time points on b have
expired 
dc execute produces dynamically a consistent schedule on every stpu on which algorithm
dynamicallycontrollable reports success  morris et al          the complexity of the algorithm is
o n  r   where n is the number of variables and r is the number of elements in an interval  since the
polynomial complexity relies on the assumption of a bounded maximum interval size  morris et al 
       conclude that dynamicallycontrollable is pseudo polynomial  a dc algorithm of strong
polynomial complexity is presented in  morris   muscettola         the new algorithm differs
from the previous one mainly because it manipulates the distance graph rather than the constraint
graph of the stpu  its complexity is o n      what is important to notice for our purposes is that 
from the distance graph produced in output by the new algorithm  it is possible to directly recover the
intervals and waits of the stpu produced in output by the original algorithm described in  morris
et al         

   simple temporal problems with preferences and uncertainty  stppus 
consider a temporal problem that we would model naturally with preferences in addition to hard
constraints  but one also features uncertainty  neither an stpp nor an stpu is adequate to model
such a problem  therefore we propose what we will call simple temporal problems with preferences and uncertainty  or stppus for short 
intuitively  an stppu is an stpp for which time points are partitioned into two classes  requirement and contingent  just as in an stpu  since some time points are not controllable by the
agent  the notion of consistency of an stp p  is replaced by that of controllability  just as in an
stpu  every solution to the stppu has a global preference value  just as in an stpp  and we seek
a solution which maximizes this value  while satisfying controllability requirements 

   

firossi   v enable    yorke  s mith

more precisely  we can extend some definitions given for stpps and stpus to fit stppus in
the following way 
definition    in a context with preferences 
 an executable time point is a variable  x i   whose time is assigned by the agent 
 a contingent time point is a variable  e i   whose time is assigned by the external world 
 a soft requirement link rij   on generic time points ti and tj     is a pair hiij   fij i  where iij  
 lij   uij   such that lij   tj     ti    uij where  ti   is a value assigned to variable ti   and
fij   iij  a is a preference function mapping each element of the interval into an element
of the preference set  a  of the semiring s   ha           i 
 a soft contingent link ghk   on executable point bh and contingent point ek   is a pair hihk   fhk i
where interval ihk    lhk   uhk   contains all the possible durations of the contingent event
represented by bh and ek and fhk   ihk  a is a preference function that maps each element
of the interval into an element of the preference set a  
in both types of constraints  the preference function represents the preference of the agent on
the duration of an event or on the distance between two events  however  while for soft requirement
constraints the agent has control and can be guided by the preferences in choosing values for the
time points  for soft contingent constraints the preference represents merely a desire of the agent
on the possible outcomes of nature  there is no control on the outcomes  it should be noticed that
in stppus uncertainty is modeled  just like in stpus  assuming complete ignorance on when
events are more likely to happen  thus  all durations of contingent events are assumed to be equally
possible  or plausible  and different levels of plausibility are not allowed 
we can now state formally the definition of stppus  which combines preferences from the
definition of an stpp with contingency from the definition of an stpu 
definition     stppu  a simple temporal problem with preferences and uncertainty  stppu 
is a tuple p    ne   nc   lr   lc   s  where 
 ne is the set of executable time points 
 nc is the set of contingent time points 
 s   ha           i is a c semiring 
 lr is the set of soft requirement constraints over s 
 lc is the set of soft contingent constraints over s  
note that  as stpps  also stppus can model hard constraints by soft constraints in which each
element of the interval is mapped into the maximal element of the preference set  further  without
loss of generality  and following the assumptions made for stpus  morris et al          we assume
that no two contingent constraints end at the same time point 
   again  in general ti and tj can be either contingent or executable time points 

   

fiu ncertainty

in soft temporal constraint problems

once we have a complete assignment to all time points we can compute its global preference 
as in stpps  this is done according to the semiring based soft constraint schema  first we project
the assignment on each soft constraint  obtaining an element of the interval and the preference
associated to that element  then we combine the preferences obtained on all constraints with the
multiplicative operator of the semiring  given two assignments with their preference  the best is
chosen using the additive operator  an assignment is optimal if there is no other assignment with a
preference which is better in the semirings ordering 
in the following we summarize some of the definitions given for stpus  extending them directly
to stppus 
definition    given an stppu p  
 a schedule is a complete assignment to all the time points in n e and nc  
 sched p  is the set of all schedules of p   while sol p  the set of all schedules of p that are
consistent with all the constraints of p  see definition    section      
 given a schedule s for p   a situation  usually written  s   is the set of durations of all contingent constraints in s 
 given a schedule s for p   a control sequence  usually written  s is the set of assignments to
executable time points in s 
 t  is a schedule such that  t   x     x     x  ne   and for every contingent constraint 
ghk  lc   defined on executable bh and contingent time point ek    t   ek   t   bh   hk  
where hk is the duration of ghk in  
 a projection p corresponding to a situation  is the stpp obtained from p by leaving all
requirement constraints unchanged and replacing each contingent constraint g hk with the soft
constraint h hk   hk    f  hk  i  where hk is the duration of the event represented by g hk in
  and f  hk   is the preference associated to such duration 
 given a projection p we indicate with sol p   the set of solutions of p and we define
optsol p      s  sol p      s   sol p    pref  s      pref  s    if the set of preferences is totally ordered we indicate with opt p    the preference of any optimal solution of
p  
 proj p  is the set of all projections of an stppu p 
 a strategy s is a map s   p roj p    sched p   such that for every projection p    s p   is
a schedule which includes  
 a strategy is viable if   s p   is a solution of p   that is  if it satisfies all its soft temporal
constraints  thus a viable strategy is a mapping s   p roj p    sol p    in this case
we indicate with pref  s p    the global preference associated to schedule s p    in stpp
p   
   regarding notation  as in the case with hard constraints  given an executable time point x  we will write  s p   x
to indicate the value assigned to x in s p    and  s p    x to indicate the durations of the contingent events that
finish prior to x in s p   

   

firossi   v enable    yorke  s mith

 

   
   

x  

  y

ec

sc
 

 

   

p  

   

   

   

u  

  q

  v

sa
requirement constr 

 

contingent constr 

   

contingent timepoint

   

ea

executable timepoint

s  

  t

figure    example stppu from the earth observing satellites domain 
example   consider as an example the following scenario from the earth observing satellites
domain  frank et al         described in section    suppose a request for observing a region of
interest has been received and accepted  to collect the data  the instrument must be aimed at the
target before images can be taken  it might be  however  that for a certain period during the time
window allocated for this observation  the region of interest is covered by clouds  the earlier the
cloud coverage ends the better  since it will maximise both the quality and the quantity of retrieved
data  but coverage is not controllable 
suppose the time window reserved for an observation is from   to   units of time and that we
start counting time when the cloud occlusion on the region of interest is observable  also  suppose 
in order for the observation to succeed  the aiming procedure must start before   units after the
starting time  ideally before   units  and it actually can only begin after at least   time unit after
the weather becomes observable  ideally the aiming procedure should start slightly after the cloud
coverage will end  if it starts too early  then  since the instrument is activated immediately after it is
aimed  clouds might still occlude the region and the image quality will be poor  on the other hand 
if it waits too long after the clouds have disappeared then precious time during which there is no
occlusion will be wasted aiming the instrument instead of taking images  the aiming procedure can
be controlled by the mission manager and it can take anywhere between   and   units of time  an
ideal duration is   or   units  since a short time of   units would put the instrument under pressure 
while a long duration  like   units  would waste energy 
this scenario  rather tedious to describe in words  can be compactly represented by the stppu
shown in figure   with the following features 
 a set of executable time points sc  start clouds   sa  start aiming   ea  end aiming  
 a contingent time point ec  end clouds  
 a set of soft requirement constraints on  sc  sa  sa  ec  sa  ea  
 a soft contingent constraint  sc  ec  

   

fiu ncertainty

in soft temporal constraint problems

 the fuzzy semiring sfcsp   h        max  min      i 
a solution of the stppu in figure   is the schedule s    sc      sa      ec      ea      
the situation associated with s is the projection on the only contingent constraint  sc  ec 
i e  s      while the control sequence is the assignment to the executable time points  i e   s  
 sc      sa      ea       the global preference is obtained by considering the preferences
associated with the projections on all constraints  that is pref        on sc  sa  pref         
on sa  ec  pref          on sa  ea  and pref          on sc  ec  the preferences
must then be combined using the multiplicative operator of the semiring  which is min  so the
global preference of s is      another solution s      sc      sa      ec      ea      has
global preference      thus s  is a better solution than s according to the semiring ordering since
max                  

   controllability with preferences
we now consider how it is possible to extend the notion of controllability to accommodate preferences  in general we are interested in the ability of the agent to execute the time points under its
control  not only subject to all constraints but also in the best possible way with respect to preferences 
it transpires that the meaning of best possible way depends on the types of controllability
required  in particular  the concept of optimality must be reinterpreted due to the presence of uncontrollable events  in fact  the distinction on the nature of the events induces a difference on the
meaning of the preferences expressed on them  as mentioned in the previous section  once a scenario is given it will have a certain level of desirability  expressing how much the agent likes such a
situation  then  the agent often has several choices for the events he controls that are consistent with
that scenario  some of these choices might be preferable with respect to others  this is expressed
by the preferences on the requirement constraints and such information should guide the agent in
choosing the best possible actions to take  thus  the concept of optimality is now relative to the
specific scenario  the final preference of a complete assignment is an overall value which combines
how much the corresponding scenario is desirable for the agent and how well the agent has reacted
in that scenario 
the concepts of controllability we will propose here are  thus  based on the possibility of the
agent to execute the events under her control in the best possible way given the actual situation  acting in an optimal way can be seen as not lowering further the preference given by the uncontrollable
events 
    strong controllability with preferences
we start by considering the strongest notion of controllability  we extend this notion  taking into
account preferences  in two ways  obtaining optimal strong controllability and  strong controllability  where   a is a preference level  as we will see  the first notion corresponds to a stronger
requirement  since it assumes the existence of a fixed unique assignment for all the executable timepoints that is optimal in every projection  the second notion requires such a fixed assignment to be
optimal only in those projections that have a maximum preference value not greater than   and to
yield a preference     in all other cases 

   

firossi   v enable    yorke  s mith

definition     optimal strong controllability  an stppu p is optimally strongly controllable
 osc  iff there is a viable execution strategy s s t 
    s p    x    s p    x   p    p   p roj p   and for every executable time point x 
   s p    optsol p    p  p roj p     
in other words  an stppu is osc if there is a fixed control sequence that works in all possible
situations and is optimal in each of them  in the definition  optimal means that there is no other
assignment the agent can choose for the executable time points that could yield a higher preference
in any situation  since this is a powerful restriction  as mentioned before  we can instead look at
just reaching a certain quality threshold 
definition      strong controllability  an stppu p is  strongly controllable   sc   with
  a a preference  iff there is a viable strategy s s t 
    s p    x    s p    x   p    p   p roj p   and for every executable time point x 
   s p    optsol p   p  p roj p   such that   s   optsol p   with pref  s       
   pref  s p        otherwise  
in other words  an stppu is  sc if there is a fixed control sequence that works in all situations and results in optimal schedules for those situations where the optimal preference level of the
projection is not    in a schedule with preference not smaller than  in all other cases 
    weak controllability with preferences
secondly  we extend similarly the least restrictive notion of controllability  weak controllability requires the existence of a solution in any possible situation  possibly a different one in each situation 
we extend this definition by requiring the existence of an optimal solution in every situation 
definition     optimal weak controllability  an stppu p is optimally weakly controllable
 owc  iff p  p roj p   there is a strategy s s t  s  p   is an optimal solution of p   
in other words  an stppu is owc if  for every situation  there is a control sequence that results
in an optimal schedule for that situation 
optimal weak controllability of an stppu is equivalent to weak controllability of the corresponding stpu obtained by ignoring preferences  as we will formally prove in section    the
reason is that if a projection p has at least one solution then it must have an optimal solution 
moreover  any stppu is such that its underlying stpu is either wc or not  hence it does not
make sense to define a notion of  weak controllability 
    dynamic controllability with preferences
dynamic controllability  dc  addresses the ability of the agent to execute a schedule by choosing
incrementally the values to be assigned to executable time points  looking only at the past  when
preferences are available  it is desirable that the agent acts not only in a way that is guaranteed to
be consistent with any possible future outcome but also in a way that ensures the absence of regrets
w r t  preferences 
   

fiu ncertainty

in soft temporal constraint problems

definition     optimal dynamic controllability  an stppu p is optimally dynamically controllable  odc  iff there is a viable strategy s such that p     p   p roj p   and for any executable
time point x 
   if  s p     x    s p     x then  s p    x    s p    x  
   s p     optsol p    and s p      optsol p     
in other words  an stppu is odc if there exists a means of extending any current partial control
sequence to a complete control sequence in the future in such a way that the resulting schedule will
be optimal  as before  we also soften the optimality requirement to having a preference reaching a
certain threshold 
definition      dynamic controllability  an stppu p is  dynamically controllable   dc 
iff there is a viable strategy s such that p     p   p roj p   and for every executable time point x 
   if  s p     x    s p     x then  s p    x    s p    x  
   s p     optsol p    and s p     optsol p    if   s   optsol p    with pref  s      
and   s   optsol p    with pref  s       
   pref s p         and pref s p         otherwise  
in other words  an stppu is  dc if there is a means of extending any current partial control
sequence to a complete sequence  but optimality is guaranteed only for situations with preference
     for all other projections the resulting dynamic schedule will have preference at not smaller
than  
    comparing the controllability notions
we will now consider the relation among the different notions of controllability for stppus 
recall that for stpus  sc   dc   w c  see section     we start by giving a similar
result that holds for the definitions of optimal controllability with preferences  intuitively  if there
is a single control sequence that will be optimal in all situations  then clearly it can be executed
dynamically  just assigning the values in the control sequence when the current time reaches them 
moreover if  whatever the final situation will be  we know we can consistently assign values to
executables  just looking at the past assignments  and never having to backtrack on preferences 
then it is clear that every situation has at least an optimal solution 
theorem   if an stppu p is osc  then it is odc  if it is odc  then it is owc 
proofs of theorems are given in the appendix  the opposite implications of theorem   do
not hold in general  it is in fact sufficient to recall that hard constraints are a special case of soft
constraints and to use the known result for stpus  morris et al         
as examples consider the following two  both defined on the fuzzy semiring  figure   shows
an stppu which is owc but is not odc  it is  in fact  easy to see that any assignment to a and c 
which is a projection of the stppu can be consistently extended to an assignment of b  however 
we will show in section   that the stppu depicted is not odc 
   

firossi   v enable    yorke  s mith

    
   

   
   
   
   

x    

   

a

 

 

     y

c

contingent

 
   

     
   

   

   
   

   

   

   

   

   

   

   
p      

    q

requirement constr 

u        

b

contingent constr 

   

 

 

contingent timepoint
executable timepoint

figure    an stppu which is owc but not odc 

 

 

a

 

c

 

 

 

 

b

 

requirement constr 
contingent constr 
contingent timepoint
executable timepoint

figure     an stppu which is odc but not osc 

   

 

 

  v

fiu ncertainty

in soft temporal constraint problems

figure     instead  shows an odc stppu which is not osc  a and b are two executable timepoints and c is a contingent time point  there are only two projections  say p   and p    corresponding respectively to point   and point   in the ac interval  the optimal preference level for both is   
in fact  ha      c      b    i is a solution of p   with preference   and ha      c      b    i is
a solution of p  with preference    the stppu is odc  in fact  there is a dynamic strategy s that
assigns to b value    if c occurs at    and value    if c occurs at    assuming a is always assigned
    however there is no single value for b that will be optimal in both scenarios 
similar results apply in the case of  controllability  as the following formal treatment shows 
theorem   for any given preference level   if an stppu p is  sc then it is  dc 
again  the converse does not hold in general  as an example consider again the stppu shown
in figure    and       assuming       such an stppu is   dc but  as we have shown above  it
is not   sc 
another useful result is that if a controllability property holds at a given preference level  say  
then it holds also      as stated in the following theorem 
theorem   given an stppu p and a preference level   if p is  sc  resp   dc   then it is  sc
 resp   dc       
let us now consider case in which the preference set is totally ordered  if we eliminate the
uncertainty in an stppu  by regarding all contingent time points as executables  we obtain an
stpp  such an stpp can be solved obtaining its optimal preference value opt  this preference level 
opt  will be useful to relate optimal controllability to  controllability  as stated in the following
theorem  an stppu is optimally strongly or dynamically controllable if and only if it satisfies the
corresponding notion of  controllability at    opt 
theorem   given an stppu p defined on a c semiring with totally ordered preferences  let opt  
maxt sol p   pref  t    then  p is osc  resp  odc  iff it is opt sc  resp  opt dc  
for owc  we will formally prove in section   that an stppu is owc iff the stpu obtained
by ignoring the preference functions is wc  as for the relation between  min  controllability and
controllability without preferences  we recall that considering the elements of the intervals mapped
in a preference  min coincides by definition to considering the underlying stpu obtained by
ignoring the preference functions of the stppu  thus   min  x holds iff x holds  where x is either
sc or dc 
in figure    we summarize the relationships holding among the various controllability notions
when preferences are totally ordered  when instead they are partially ordered  the relationships
opt  x and min  x  where x is a controllability notion  do not make sense  in fact  in the
partially ordered case  there can be several optimal elements and several minimal elements  not just
one 

   determining optimal strong controllability and  strong controllability
in the next sections we give methods to determine which levels of controllability hold for an stppu 
strong controllability fits when off line scheduling is allowed  in the sense that the fixed optimal
control sequence is computed before execution begins  this approach is reasonable if the planning
   

firossi   v enable    yorke  s mith

osc o


odc o

  opt sc

  opt dc

   sc


   dc

  min  sc o

  min  dc o



owc o

  sc


  dc


  wc

figure     comparison of controllability notions for total orders   min is the smallest preference
over any constraint  opt    min  
algorithm has no knowledge on the possible outcomes  other than the agents preferences  such a
situation requires us to find a fixed way to execute controllable events that will be consistent with
any possible outcome of the uncontrollables and that will give the best possible final preference 
    algorithm best sc
the algorithm described in this section checks whether an stppu is osc  if it is not osc  the
algorithm will detect this and will also return the highest preference level  such that the problem
is  sc 
all the algorithms we will present in this paper rely on the following tractability assumptions 
inherited from stpps      the underlying semiring is the fuzzy semiring s f csp defined in section          the preference functions are semi convex  and     the set of preferences        is discretized in a finite number of elements according to a given granularity 
the algorithm best sc is based on a simple idea  for each preference level   it finds all the
control sequences that guarantee strong controllability for all projections such that their optimal
preference is    and optimality for those with optimal preference   then  it keeps only those
control sequences that do the same for all preference levels    
the pseudocode is shown in figure     the algorithm takes in input an stppu p  line     as a
first step  the lowest preference min is computed  notice that  to do this efficiently  the analytical
structure of the preference functions  semi convexity  can be exploited 
in line   the stpu obtained from p by cutting it at preference level  min is considered  such
stpu is obtained by applying function  min  cut stppu g  with g p     in general  the result of
 cut p   is the stpu q  i e   a temporal problem with uncertainty but not preferences  defined
as follows 
 q has the same variables with the same domains as in p 
 for every soft temporal constraint  requirement or contingent  in p on variables x i   and xj  
say c   hi  f i  there is  in q   a simple temporal constraint on the same variables defined as
 x  i f  x     
notice that the semi convexity of the preference functions guarantees that the set  x  i f  x    
forms an interval  the intervals in q  contain all the durations of requirement and contingent events
that have a local preference of at least  
   notice that function  cut can be applied to both stpps and stppus  in the first case the output is an stp  while in
the latter case an stpu  notice also that   cut is a known concept in fuzzy literature 

   

fiu ncertainty

in soft temporal constraint problems

pseudocode for best sc
   input stppu p  
   compute min  
   stpu qmin  min  cut p   
   if  stronglycontrollable  qmin   inconsistent  write not min  sc and stop 
   else  
   stp p min  stronglycontrollable  qmin   
   preference   min     
   bool oscfalse  bool  scfalse 
   do  
   
stpu q   cut p   
   
if  pc q   inconsistent  osctrue 
   
else  
   
if  stronglycontrollable pc q     inconsistent   sc true 
   
else  
n
   
stp p   p  
stronglycontrollable pc q     

   
if  p inconsistent     sc  true   
   
else            
   
 
   
 
   
 while  osc false and  sc false  
    if  osc true  write p is osc 
    if   sc true  write p is        sc 
    se  earliest solution p      sl  latest solution p     
    return p     se   sl  
      
figure     algorithm best sc  it tests if an stppu is osc and finds the highest  such that
stppu p is  sc 

   

firossi   v enable    yorke  s mith

once stpu qmin is obtained  the algorithm checks if it is strongly controllable  if the stp
obtained applying algorithm stronglycontrollable  vidal   fargier        to stpu q min is not
consistent  then  according to theorem    there is no hope for any higher preference  and the algorithm can stop  line     reporting that the stppu is not  sc     and thus is not osc as well 
if  instead  no inconsistency is found  best sc stores the resulting stp  lines      and proceeds
moving to the next preference level  min        line    
in the remaining part of the algorithm  lines        three steps are performed at each preference
level considered 
 cut stppu p and obtain stpu q  line     
 apply path consistency to q considering it as an stp  pc q    line     
 apply strong controllability to stpu pc q     line     
let us now consider the last two steps in detail 
applying path consistency to stpu q  means considering it as an stp  that is  treating contingent constraints as requirement constraints  we denote as algorithm pc any algorithm enforcing
path consistency on the temporal network  see section     and dechter et al          it returns the
minimal network leaving in the intervals only values that are contained in at least one solution  this
allows us to identify all the situations    that correspond to contingent durations that locally have
preference   and that are consistent with at least one control sequence of elements in q    in
other words  applying path consistency to q  leaves in the contingent intervals only durations that
belong to situations such that the corresponding projections have optimal value at least   if such
a test gives an inconsistency  it means that the given stpu  seen as an stp  has no solution  and
hence that all the projections corresponding to scenarios of stppu p have optimal preference   
 line     
the third and last step applies stronglycontrollable to path consistent stpu pc q     reintroducing the information on uncertainty on the contingent constraints  recall that the algorithm
rewrites all the contingent constraints in terms of constraints on only executable time points  if the
stpu is strongly controllable  stronglycontrollable will leave in the requirement intervals only
elements that identify control sequences that are consistent with any possible situation  in our case 
applying stronglycontrollable to pc q    will find  if any  all the control sequences of pc q  
that are consistent with any possible situation in pc q    
however  if stpu pc q   is strongly controllable  some of the control sequences found might
not be optimal for scenarios with optimal preference lower than   in order to keep only those
control sequences that guarantee optimal strong controllability for all preference levels up to   the
stp obtained by stronglycontrollable pc q     is intersected with the corresponding stp found
in the previous step  at preference level       that is p    line      we recall that given two
two stps  p  and p    defined on the same set of variables  the stp p    p   p  has the same
variables as p  and p  and each temporal constraint  c ij   c ij  c ij   is the intersection of the
corresponding intervals of p  and p    if the intersection becomes empty on some constraint or the
stp obtained is inconsistent  we can conclude that there is no control sequence that will guarantee
strong controllability and optimality for preference level  and  at the same time  for all preferences
   by writing min     we mean the next preference level higher than min defined in terms of the granularity of the
preferences in the       interval 

   

fiu ncertainty

in soft temporal constraint problems

table    in this table each row corresponds to a preference level  and represents the intervals of
stpu q obtained by cutting the stppu in figure   at level  
stpu

 sc  ec 

 sc  sa 

 sa  ec 

q   
q   
q   
q   
q   
q 

      
      
      
      
      
      

      
      
      
      
      
      

      
      
      
      
      
      

table    in this table each row corresponds to a preference level  and represents the intervals of
stpu pc q   obtained applying path consistency to the stpus in table   
stpu
   

pc q  
pc q     
pc q     
pc q     
pc q     
pc q   

 sc  ec 

 sc  sa 

 sa  ec 

      
      
      
      
      
      

      
      
      
      
      
      

      
      
      
      
      
      

    line      if  instead  the stp obtained is consistent  algorithm best sc considers the next
preference level        and performs the three steps again 
the output of the algorithm is the stp  p     obtained in the iteration previous to the one
causing the execution to stop  lines        and two of its solutions  s e and sl   this stp  as we will
show shortly  contains all the control sequences that guarantee  sc up to         only if
    is the highest preference level at which cutting gives a consistent problem  then the stppu is
osc  the solutions provided by the algorithm are respectively the the earliest  s e   and the latest  sl  
solutions of p     in fact  as proved in  dechter et al         and mentioned in section      since
p   is minimal  the earliest  resp  latest  solution corresponds to assigning to each variable the
lower  resp  upper  bound of the interval on the constraint defined on x  and the variable  this is
indicated in the algorithm by procedures earliest solution and latest solution  let us also recall
that every other solution can be found from p   without backtracking 
before formally proving the correctness of algorithm best sc  we give an example 
example   consider the stppu described in example    and depicted in figure    for simplicity
we focus on the triangular sub problem on variables sc  sa  and ec  in their example   min       
table   shows the stpus q obtained cutting the problem at each preference level                   
table   shows the result of applying path consistency  line     to each of the stpus shown in
table    as can be seen  all of the stpus are consistent  finally  table   shows the stps defined
only on executable variables  sc and sa  that are obtained applying stronglycontrollable to the
stpus in table   

   

firossi   v enable    yorke  s mith

table    in this table each row corresponds to a preference level  and represents the intervals of
stp stronglycontrollable pc q   obtained applying the strong controllability check to
the stpus in table   
 sc  sa 

stp
   

stronglycontrollable pc q   
stronglycontrollable pc q      
stronglycontrollable pc q      
stronglycontrollable pc q      
stronglycontrollable pc q      
stronglycontrollable pc q    

      
      
      
      
      
      

by looking at tables   and   it is easy to deduce that the best sc will stop at preference level
   in fact  by looking more carefully at table    we can see that stp p     consists of interval       
on the constraint sc  sa  while stronglycontrollable pc q      consist of interval        on the
same constraint  obviously intersecting the two gives an inconsistency  causing the condition in
line    of figure    to be satisfied 
the conclusion of executing best sc on the example depicted in figure  is that it is     sc
but not osc  let us now see why this is correct  without loss of generality we can assume that sc
is assigned value    from the last line of table   observe that the only value that can be assigned to
sa that is optimal with both scenarios that have optimal preference    that is when ec is assigned
  or    is    however  assigning   to sa is not optimal if ec happens at    since this scenario has
optimal preference value      e g  if sa is assigned    while in this case it would have a global
preference      given in constraint sa  ec      
    properties of best sc
we will now prove that algorithm best sc correctly identifies whether an stppu p is osc  and 
if not  finds the highest preference level at which p is  sc  let us first consider the events in which
best sc stops 
 event    stronglycontrollable q min   is inconsistent  line    
 event    pc q   returns an inconsistency  line     
 event    pc q   is consistent but it is not strongly controllable  line     
 event    pc q   is strongly controllable  however the intersection of the stp obtained
by stronglycontrollable pc q    with the stp obtained at the previous preference level 
p     is inconsistent  line     
first notice that the algorithm terminates 
theorem   given any stppu p with a finite number of preference levels  the execution of algorithm best sc over p terminates 
   recall that in the fuzzy semiring context the global preference of any assignment is computed taking the minimum
preference assigned to any of its projections 

   

fiu ncertainty

in soft temporal constraint problems

intuitively  either one of the termination events occur or all the preference levels will be exhausted 
next  let us show that best dc is a sound and complete algorithm for checking if an stppu is
osc and for finding the highest preference level at which it is  sc 
as we have said before  cutting an stppu p at a preference level  gives an stpu q   
moreover  every situation                 l   of q can be seen as a situation of p such that
fj  j      j  this implies that every projection p   p roj q    which is an stp  corresponds to a projection p  p roj p   which is an stpp  for all situations  of q    in what follows
we will write always p which should be interpreted as an stp when seen as a projection of q 
and as an stpp when seen as a projection of p   in the following lemmas we state properties which
relate the solutions of such projections in the two contexts  without and with preferences 
theorem   consider an stppu p   hne   nc   lr   lc   sf csp i and preference level   and consider the stpu q   hne   nc   l r   l c i obtained by cutting p at   and stpu pc q    hne   nc  
l  r   l  c i  then 
    situation of p   p  p roj pc q    iff optp  p     
   for every control sequence    is a solution of t    stronglycontrollable pc q    iff p 
proj pc  q     t   sol p   and pref  t      
the first part of the theorem states that  by applying path consistency to stpu q   we remove
those situations that cannot be extended to complete solutions in q    and thus correspond to projections having optimal preference strictly less than   the second part of the lemma considers the
stp t  obtained applying stronglycontrollable after path consistency  in particular it is stated
that all the solutions of t  result  for all the projections of pc  q     in solutions with preference
at least   notice that this implies that they result in optimal solutions for those projections of p
having optimal preference exactly   they might not be optimal  however  for some projections
with optimal preference strictly greater than  
from the above theorem  we get the following corollary  which clarifies the relation between
the stpu obtained cutting an stppu at preference level   and the  sc of the stppu 
corollary   consider an stppu p and a preference level  and assume that    situation of p  
such that opt p      where p is the corresponding projection  then  if stpu pc q     obtained
by cutting p at   and then applying path consistency  is not sc the p is not  sc 
now if we consider all preference levels between  min and   and compute the corresponding
stps  say t min           t    each such stp will identify the assignments to executable variables guaranteeing strong controllability and optimality at each level  by intersecting all these stps we keep
only the common solutions and thus those which guarantee strong controllability and optimality for
all the situations of p with optimal preference smaller than or equal to  
theorem   consider an stppu p   and all preference levels from  min to   and assume that the
corresponding stps  t min           t  obtained by cutting p at preference levels n
min             and
enforcing strong controllability are consistent  then    sol p     where p    i min       t i  
iff p  p roj p    t   sol p    if opt p      then pref  t      opt p    otherwise
pref  t      
   

firossi   v enable    yorke  s mith

we now consider each of the events in which best sc can stop and for each of them we prove
which of the strong controllability properties hold 
theorem   if the execution of algorithm best sc on stppu p stops due to the occurrence of
event    line     then p is not  sc     
this is the case when the underlying stpu obtained from the stppu by ignoring the preference
functions is not strongly controllable  since cutting at higher preferences will give even smaller
intervals there is no hope for controllability at any level and the execution can halt 
theorem   if the execution of algorithm best sc on stppu p stops due to the occurrence of
event    line     at preference level   then
       opt   maxt sol p   pref  t   
 p is osc and a control sequence  is a solution of stp p opt  returned by the algorithm  iff
it is optimal in any scenario of p  
this event occurs when the algorithm cuts the stppu at a given preference level and the stpu
obtained  seen as an stp  is inconsistent  in particular  this means that no projection of p roj p  
has an optimal preference equal to or greater than this preference level  however  if such a level has
been reached  then up to the previous level  assignments guaranteeing sc and optimality had been
found  moreover  this previous level must have been also the highest preference of any solution of
p   opt p    this means that opt p   sc has been established  which by theorem   is equivalent to
osc 
theorem    if the execution of algorithm best sc on stppu p stops due to the occurrence of
event    line     or event    line     at preference level   then p is not osc but it is      sc and any solution  of stp p    returned by the algorithm  is such that  p   p roj p   
t   sol p    if opt p         then pref  t      opt p    otherwise pref  t         
intuitively  if the algorithm reaches  and stops in line     then there are projections of p with
optimal preference   but the corresponding set of situations is not sc  notice that this is exactly
the situation considered in corollary    if instead it stops in line     then this set of situations is sc 
but none of the assignments guaranteeing sc for these situations does the same and is optimal for
situations at all preference levels up to   in both cases the problem is not  sc  however  assuming
that  is the first level at which the execution is stopped the problem is     sc 
we conclude this section considering the complexity of best sc 
theorem    determining the osc or the highest preference level of  sc of an stppu with n
variables and   preference levels can be achieved in time o n      
notice that we cannot use a binary search over preference levels  in contrast to algorithms for
stpps   since the correctness of the procedure is based on the intersection of the result obtained at
a given preference level    with those obtained at all preference levels    
the above theorem allows us to conclude that the cost of adding preferences  and thus a considerable expressive power  is low  in fact  the complexity is still polynomial and it has grown only of
a factor equal to the number of preference levels 
   

fiu ncertainty

in soft temporal constraint problems

   determining optimal weak controllability
optimal weak controllability is the least useful property in practice and also the property in which
adding preferences has the smallest impact in terms of expressiveness  what owc requires is
the existence of an optimal solution in every possible scenario  this is equivalent to requiring the
existence of a solution for every situation  as stated in the following theorem 
theorem    stppu p is owc iff the stpu q  obtained by simply ignoring the preference functions on all the constraints wc 
by ignoring the preference functions we mean mapping each soft constraint hi  f i into a hard
constraint hii defined on the same variables  this theorem allows us to conclude that  to check
owc  it is enough to apply algorithm weaklycontrollable as proposed in  vidal   ghallab       
and described in section    if  instead  we are given a scenario   then we can find an optimal
solution of its projection  stpp p roj    by using one of the solvers described in  rossi et al  
      
let us now consider example   again  section   showed that the stpu obtained by cutting the
stppu of figure   at preference level  min is strongly controllable  since sc implies wc  we can
conclude that the stpu is weakly controllable and  thus  that the stppu in figure   is optimally
weakly controllable 

   determining optimal dynamic controllability and  dynamic controllability
optimal dynamic controllability  odc  is the most interesting and useful property in practice 
as described in section    many industrial applications can only be solved in a dynamic fashion 
making decisions in response to occurrences of events during the execution of the plan  this is
true in the space application domains  where planning for a mission is handled by decomposing the
problem into a set of scheduling subproblems  most of which depend on the occurrence of semipredictable  contingent events  frank et al         
in this section we describe an algorithm that tests whether an stppu p is odc and  if not odc 
it finds the highest  at which p is  dc  the algorithm presented bears some similarities with
best sc  in the sense it decomposes the problem into stpus corresponding to different preference
levels and performs a bottom up search for dynamically controllable problems in this space 
notice that the algorithm is attractive also in practice  since its output is the minimal form of the
problem where only assignments belonging to at least one optimal solution are left in the domains
of the executable time points  this minimal form is to be given as input to an execution algorithm 
which we also describe  that assigns feasible values to executable time points dynamically while
observing the current situation  i e   the values of the contingent time points that have occurred  
    a necessary and sufficient condition for testing odc
we now define a necessary and sufficient condition for odc  which is defined on the intervals of
the stppu  we then propose an algorithm which tests such a condition  and we show that it is a
sound and complete algorithm for testing odc 
the first claim is that  given an stppu  the dynamic controllability of the stpus obtained
by cutting the stppu and applying pc at every preference level is a necessary but not sufficient
condition for the optimal dynamic controllability of the given stppu 
   

firossi   v enable    yorke  s mith

theorem    given an stppu p   consider any preference level  such that stpu q    obtained
cutting p at   is consistent  if stpu pc q    is not dc then p is not odc and it is not  dc 
   
unfortunately this condition is not sufficient  since an stppu can still be not odc even if at
every preference level the stpu obtained after pc is dc  an example was shown in figure   and
is described below 
example   another potential application of stppus is scheduling for aircraft analysis of airborne
particles  coggiola  shi    young         as an example consider an aircraft which is equipped
with instruments as the small ice detector and a nevzorov probe  both of which are used to discriminate between liquid and ice in given types of clouds  such analysis is important for the prediction
of the evolution of precipitatory systems and of the occurrence and severity of aircraft icing  field 
hogan  brown  illingworth  choularton  kaye  hirst    greenaway         both instruments need
an uncertain amount of time to determine which is the predominant state  between liquid and ice 
when activated inside a cloud 
in the example shown in figure   we consider the sensing event represented by variables a
and c and the start time of a maneuver of the aircraft represented by variable b  due to how the
instruments function  an aircraft maneuver can impact the analysis  in the example constraint ac
represents the duration of the sensing event and the preference function models the fact that the
earlier the predominant state is determined the better  constraint ab models instead the fact that
the maneuver should start as soon as possible  for example  due to time constraints imposed by the
aircrafts fuel availability  constraint bc models the fact that the maneuver should ideally start just
before or just after the sensing event has ended 
let us call p the stppu depicted in figure    in order to determine the highest preference level
of any schedule of p we can  for example use algorithm chop solver  rossi et al          the
highest preference level at which cutting the functions gives a consistent stp is    interval        on
ab         on ac and interval        on bc is a consistent stp   the optimal solutions of p   regarded
as an stpp  will have global preference   
consider all the stpus obtained by cutting at every preference level from the highest     to the
lowest      the minimum preference on any constraint in p is  min       and  it is easy to see 
that all the stpus obtained by cutting p and applying pc at all preference levels from     to   are
dc  however  p is not odc  in fact  the only dynamic assignment to b that belongs to an optimal
solution of projections corresponding to elements      and   in  x  y  is    but executing b at   will
cause an inconsistency if c happens at     since           doesnt belong to  u  v   
we now elaborate on this example to find a sufficient condition for odc  consider the intervals
on ab   p   q     and the waits   c  t   obtained applying the dc checking algorithm at preference
level   these are shown in table   
if we look at the first and last intervals  resp   at      and         there is no way to assign a
value to b that at the same time induces a preference   on constraints ab and bc  if c occurs at     
or    and that also satisfies the wait   c       ensuring consistency if c occurs at     this depends
on the fact that the intersection of  p     q      i e        and the sub interval of  p       q       that satisfies
  c       that is          is empty 
we claim that the non emptiness of such an intersection  together with the dc of the stpus
obtained by cutting the problem at all preference levels is a necessary and sufficient condition for
   

fiu ncertainty

in soft temporal constraint problems

table    in this table each row corresponds to a preference level  and represents the corresponding
interval and wait on the ab constraint of the stppu shown in figure   


 p   q   

wait

 
   
   
   
   
   

      
      
      
      
      
      

  c     
  c     
  c     
  c     
  c     

odc  in the following section we will describe an algorithm which tests such a condition  then 
in section      we will prove that such an algorithm is sound and complete w r t  testing odc and
finding the highest level of  dc 
    algorithm best dc
the algorithm best dc echoes section  s algorithm for checking optimal strong controllability 
as done by best sc  it considers the stpus obtained by cutting the stppu at various preference
levels  for each preference level  first it tests whether the stpu obtained considering it as an stp
is path consistent  then  it checks if the path consistent stpu obtained is dynamically controllable 
using the algorithm proposed in  morris et al          thus  the control sequences that guarantee
dc for scenarios having different optimal preferences are found  the next step is to select only
those sequences that satisfy the dc requirement and are optimal at all preference levels 
the pseudocode is given in figure     algorithm best dc takes as input an stppu p  line   
and then computes the minimum preference   min   assigned on any constraint  line    
once min is known  the stpu obtained by cutting p at  min is computed  line     this
stpu can be seen as the stppu p with the same variables and intervals on the constraints as p
but with no preferences  such an stpu  which is denoted as q min   is given as input to algorithm
dynamicallycontrollable  if qmin is not dynamically controllable  then p is not odc nor dc  for any   min   hence for all    as shown in theorem     the algorithm detects the
inconsistency and halts  line     if  instead  q min is dynamically controllable  then the stpu that
is returned in output by dynamicallycontrollable is saved and denoted with p min  line     notice
that this stpu is minimal  in the sense that in the intervals there are only elements belonging to
at least one dynamic schedule  morris et al          in addition  since we have preferences  the
elements of the requirement intervals  as well as belonging to at least one dynamic schedule  are
part of optimal schedules for scenarios which have a projection with optimal preference equal to
min    
in line   the preference level is updated to the next value in the ordering to be considered  according to the given preference granularity   in line   two boolean flags  odc and  dc are
defined  setting flag odc to true will signal that the algorithm has established that the problem is odc  while setting flag  dc to true will signal that the algorithm has found the highest
preference level at which the stppu is  dc 
   in fact  they all have preference at least min by definition 

   

firossi   v enable    yorke  s mith

pseudocode for best dc
   input stppu p  
   compute min  
   stpu qmin  min  cut p   
   if  dynamicallycontrollable q min   inconsistent  write not min  dc and stop 
   else  
   stp p min  dynamicallycontrollable qmin   
   preference   min     
   bool odc  false  bool  dc  false 
   do  
   
stpu q   cut p   
   
if  pc q   inconsistent  odc  true 
   
else  
   
if  dynamicallycontrollable pc q     inconsistent   dc  true 
   
else  
   
stpu t   dynamicallycontrollable pc q    
   
if merge p     t    fails     dc  true  
   
else  
   
stpu p  merge p     t    
   
       
   
  
   
  
   
  
     while  odc false and  dc false  
    if  odc true  write p is odc 
    if   dc true  write p is        dc 
    return stppu f    resulting stppu p  p     
      
figure     algorithm that tests if an stppu is odc and  if not  finds the highest  such that stppu
p is  dc 

   

fiu ncertainty

in soft temporal constraint problems

pseudocode for merge
   input  stpu t    stpu t      
   stpu p     t   
   for each constraint ab  a and b executables  in p   
define interval  p    q     and wait t   
given   interval  p   q     wait t in t   
and   interval  p     q       wait t   in t       as follows  
   if  t   p and t     p      precede   precede 
   p   max p   p      q    min q    q       t   max t   t     
   if  q     p    return failed 
   if  p   t   q  and p    t     q       unordered   unordered or precede 
   t   max t   t      q    min q    q      
   if  q     t    return failed 
    output p     
figure     algorithm merge 
lines      contain the main loop of the algorithm  in short  each time the loop is executed  it
cuts p at the current preference level and looks if the cutting has produced a path consistent stpu
 seen as an stp   if so  it checks if the path consistent version of the stpu is also dynamically
controllable and  if also this test is passed  then a new stpu is created by merging the current
results with those of previous levels 
we now describe each step in detail  line    cuts p at the current preference level   in line   
the consistency of the stpu q is tested applying algorithm pc  if pc returns an inconsistency 
then we can conclude that p has no schedule with preference   or greater  
the next step is to check if stpu pc q    is dc  notice that this is required for all preference
levels up to the optimal level in order for p to be odc  and up to  in order for p to be  dc
 theorem      if applying algorithm dynamicallycontrollable detects that pc q    is not dynamically controllable  then the algorithm sets flag  dc to true  if  instead  pc q    is dynamically
controllable the resulting minimal stpu is saved and denoted t   line     
in line     the output of procedure merge is tested  this procedure is used to combine the
results up to preference     with those at preference   by applying it to the stpu obtained
at the end of the previous while iteration  p     and stpu t    the pseudocode for merge is
shown in figure     and we will describe it in detail shortly  if no inconsistency is found  the new
stpu obtained by the merging procedure is denoted with p   line     and a new preference level
is considered  line     
lines       take care of the output  lines    and    will write in output if p is odc or  if not 
the highest  at which it is  dc  in line    the final stppu  f   to be given in output  is obtained
from stpu p     that is  the stpu obtained by the last iteration of the while cycle which was
completed with success  i e   it had reached line      function resulting stppu restores all the
preferences on all the intervals of p   by setting them as they are in p   we will show that the
requirement constraints of f will contain only elements corresponding to dynamic schedules that
are always optimal  if the result is that p is odc  or are optimal for scenarios corresponding to
projections with optimal preference   and guarantee a global preference level of at least  in all
others  if the result is that p is  dc 
   

firossi   v enable    yorke  s mith

the pseudocode of procedure merge is given in figure     the input consists of two stpus
defined on the same set of variables  in describing how merge works  we will assume it is given in
input two stpus  t  and t      obtained by cutting two stppus at preference levels  and     
and applying  by hypothesis with success  pc and dynamicallycontrollable  line   figure     
in line    merge initializes the stpu which will be given in output to t    as will be formally proven in theorem     due to the semi convexity of the preference functions we have that
p roj t       p roj t     notice that merge leaves all contingent constraints unaltered  thus 
all the projection with optimal preference  or      are contained in the set of projections of p     
merge considers every requirement constraint defined on any two executables  say a and b 
respectively in t  and t      since we are assuming that algorithm dynamicallycontrollable has
been applied to both stpus  there can be some waits on the intervals  figure   illustrates the three
cases in which the interval on ab can be  if the wait expires after the upper bound of the interval
 figure    a    then the execution of b must follow the execution of every contingent time point
 follow case   if the wait coincides with the lower bound of the interval  figure    b    then the
execution of b must precede that of any contingent time point  precede case   finally  as shown
in figure    c   if the wait is within the interval  then b is in the unordered case with at least a
contingent time point  say c 
merge considers in which case the corresponding intervals are in t  and in t     line    
such intervals are respectively indicated as  p    q     with wait t   and  p     q       with wait t    
merge obtains a new interval  p    q     and new wait t    which will replace the old wait in t     
interval  p  q     will contain all and only the values which are projections on the ab constraint of
some optimal solution of some stpp corresponding to a situation in t  or t      wait t  is the wait
that should be respected during a dynamic execution in order to guarantee that the solution obtained
is optimal  if the projection corresponding to the final scenario has preference  or      
due to the semi convexity of the preference functions it cannot be the case that 
 ab is a follow or a precede case in t  and an unordered case in t     
 ab is a follow case in t  and a precede case in t     
 ab is a precede case in t  and a follow case in t     
this means that the cases which should be considered are 
 ab is a follow case in both t  and t     
 ab is a precede case in t  and in t     
 ab is a unordered case in t  and a precede or an unordered case in t     
in the first two cases the ab interval is left as it is in t     a formal motivation of this is
contained in the proof of theorem     however  informally  we can say that the ab interval in
t    already satisfies the desired property 
in lines   and   the case in which ab is in a precede case in both stpus is examined  here  b
will always occur before any contingent time point  the values in the  p    q     resp   p     q      
are assignments for b that will be consistent with any future occurrence of c mapped into a preference    resp          clearly the intersection should be taken in order not to lower the

   

fiu ncertainty

in soft temporal constraint problems

preference if c occurs with preference        line   considers the event in which such intersection is empty  this means that there is no common assignment to b  given that of a  that will be
optimal both in scenarios with optimal preference  and in scenarios with optimal preference      
in lines   and   two scenarios are considered  when ab is in the unordered case in t  and
in the precede case in t    and when ab is in the unordered case in both stpus  figure   
shows the second case  merge takes the union of the parts of the intervals preceding the wait and
the intersection of the parts following the wait  the intuition underlying this is that any execution
of b identifying an element of either  p    t   or  p     t     will be preceded by the execution of
all the contingent time points for which it has to wait  this means that when b is executed  for
any such contingent time point c  both the time at which c has been executed  say t c   and the
associated preference  say fac  tc    on constraint ac in stppu p will be known  the propagation
of this information will allow us to identify those elements of  p    t    resp   p     t      that have
a preference  fac  tc   and thus an optimal assignment for b  this means that all the elements in
both interval  p   t   and interval  p     t     are eligible to be chosen  for example  if f ac  tc    
 there might be values for b with preference equal to  that are optimal in this case but would not
if c occurred at a time such that fac  tc       but since in any case we know when and with what
preference c has occurred  it will be the propagation step that will prune non optimal choices for b 
in short  leaving all elements allows more flexibility in the propagation step  moreover  as will be
proven in theorem     p  p    
if instead we consider elements of interval  t    q     we know that they identify assignments
for b that can be executed regardless of when c will happen  however we know it will happen
with a preference greater     this means that we must take the intersection of this part with
the corresponding one   t     q       in order to guarantee consistency and optimality also when
c occurs at any time with preference         an easy way to see this is that interval  t    q   
may contain elements that in p are mapped into preference   these elements can be optimal in
scenarios in which c happens at a time associated with a preference    in the ac constraint 
however  they cannot be optimal in scenarios with c occurring at a time with preference      
line   handles the case in which the two parts of the intervals  following the waits  have an
empty intersection  in this case  optimality cannot be guaranteed neither at level  nor       in
particular if the contingent events occur after the waits expire 
    properties of best dc
we will now show that best dc is a sound and complete algorithm for testing odc and for finding
the highest preference level at which the stppu given in input is  dc  we recall  once more 
that all the results that follow rely on the tractability assumptions requiring semi convex preference
functions and the fuzzy semiring h        max  min      i as underlying structure 
let us consider stppu p and stpus t  and t      as defined in the previous section  then 
stpu p     merge  t    t      will have the same contingent constraints as t    and requirement constraints as defined by the merging procedure  we start by proving that merge is a sound
and complete algorithm for testing the existence of a viable dynamic strategy  common to both such
stpus  which is optimal for projections having optimal preference equal to either  or      
   we recall that the projections of t  coincide with the projections of stppu p with optimal preference    see
theorem     and that  due to the semi convexity of the preference functions  p roj t       p roj t    

   

firossi   v enable    yorke  s mith

interval ab
in stpu t   

interval ab
in stpu t 

 a 
  

  

  

p 

t 

q 







p 

q 

t 

merged interval ab




p 

t 

 b 

  

 c 

q 

figure     merging two intervals in the unordered case 
theorem    consider stppu p and stpus  t  and t      obtained by cutting p respectively at
level  and      and applying pc  without finding inconsistencies  and dynamicallycontrollable
with success  consider stpu p      merge t    t      
then  merge t    t      does not fail if and only if
 p    is dynamically controllable and
 there is a viable dynamic strategy s such that for every projection p i  p roj p      
 if opt pi      or opt pi          in p   pref  s pi      opt pi   
 otherwise pref  s pi          
the following theorem extends the result for the merging procedure to more than two preference
levels  in particular to all preference levels smaller or equal to a given threshold  
theorem    consider stppu p and for every preference level    define t  as the stpu obtained
by cutting p at   then applying pc and then dynamicallycontrollable  assume that     t 
is dc  consider stpu p   
p    merge merge       merge merge t min   t min       t min                t   
with min the minimum preference on any constraint in p  assume that  when applied  merge
always returned a consistent stpu  then  there is a viable dynamic strategy s  such that p i 
p roj p    if opt pi     then s pi   is an optimal solution of pi   otherwise pref  s pi          
theorem    allows us to prove the main result  informally  best dc applies merge from the
lowest preference to the highest threshold   above which the returned problem becomes inconsistent  if there is no projection of the stppu with an optimal solution higher than   then  by using
theorem     we can conclude that the stppu is odc  otherwise it is  dc 
let us start by enumerating the conditions at which best dc terminates 
   

fiu ncertainty

in soft temporal constraint problems

 event    best dc stops because the stpu obtained at level  min is not dc  line    
 event    best dc exits because it has reached a preference level  at which the stpu  seen
as an stp  is not path consistent  line     
 event    best dc stops because it has reached a preference level  at which the path consistent stpu is not dynamically controllable  line     
 event    best dc stops because procedure merge has found an inconsistency  line     
the following theorem shows that the execution of best dc always terminates 
theorem    given an stppu p  the execution of algorithm best dc on p terminates 
best dc considers each preference level  starting from the lowest and moving up each time of
one level according to the granularity of the preference set  it stops either when an inconsistency is
found or when all levels  which are assumed to be finite  have been precessed 
we are now ready to prove the soundness and completeness of best dc  we split the proof
into three theorems  each considering a different terminating condition  the first theorem considers
the case in which the underlying stpu obtained from p   by ignoring the preferences  is not dc  in
such a case the output is that the stppu is not  dc at any level and thus is not odc 
theorem    given an stppu p as input  best dc terminates in line   iff       such that p is
 dc 
the next theorem considers the case in which the highest preference level reached with success
by the merging procedure is also the highest optimal preference of any projection of p   in such a
case  the problem is odc 
theorem    given an stppu p as input  best dc terminates in line    iff p is odc 
the last result considers the case in which there is at least a projection with an optimal preference strictly higher than the highest reached with success by the merging procedure  in such case
the problem is not odc and best dc has found the highest level at which the stppu  dc 
theorem    given stppu p in input  best dc stops at lines    or    at preference level  iff p
is       dc and not odc 
as mentioned in section      in  morris   muscettola         it is proven that checking dc of
an stpu can be done in o n     where n is the number of variables  the revised algorithm processes the distance graph of the stpu  rather than its constraint graph  it also maintains additional
information  in the form of additional labeled edges which correspond to waits  the main feature
of the new algorithm  as noted earlier  it is a strongly polynomial algorithm for determining the
dynamic controllability of an stpu  what is important in our context is to stress the fact that the
output of the two algorithms  presented in  morris et al         and  morris   muscettola        
is essentially the same  in fact it is easy to obtain  in polynomial time o n      the constraint graph
with waits produced by dynamicallycontrollable starting from the distance graph produced by the
new algorithm  and vice versa 

   

firossi   v enable    yorke  s mith

theorem    the complexity of determining odc or the highest preference level  of  dc of an
stppu with n variables  a bounded number of preference levels   is time o n      
the complexity result given in theorem    is unexpectedly good  in fact  it shows that the cost
of adding a considerable expressive power through preferences to stpus is a factor equal to the
number of different preference levels  this implies that solving the optimization problem and  at
the same time  the controllability problem  remains in p  if the number of different preference levels
is bounded 
    the execution algorithm
the execution algorithm we propose is very similar to that for stpus presented in  morris et al  
       which we described in section   and shown in figure    of course the execution algorithm
for stppus will take in input an stppu to which best dc has been successfully applied  in
line   of figure    the algorithm performs the initial propagation from the starting point  the main
difference between our stppu execution algorithm and the stpu algorithm in  morris et al        
is that the definition of propagation also involves preferences 
definition     soft temporal propagation  consider an stppu p and a variable y  p and a
value vy  d y    then propagating the assignment y   v y in p   means 
 for all constraints  cxy involving y such that x is already assigned value v x  d x  
replace the interval on cxy with interval h vy  vx   vy  vx  i 
 cut p at preference level minx  fcxy  vy  vx     
we will call odc execute the algorithm dc execute where propagation is defined as in
definition     assume we apply odc execute to an odc or  dc stppu p to which best dc
has been applied  if  up to a given time t   the preference of the partial schedule was   then we
know that if p was odc or  dc with     by theorem    and theorem     the execution
algorithm has been assigning values in t      assume now that a contingent event occurs and
lowers the preference to      this will be propagated and the stppu will be cut at preference
level      from now on  the execution algorithm will assign values in t   and  by theorem   
and theorem     the new waits imposed will be such that the assignments for the executables will
be optimal in any situation where the optimal preference is       in all other situations such
assignments guarantee a preference of at least     

   using the algorithms
section     described the relations between our notions of controllability  as a general strategy 
given an stppu  the first property to consider is osc  if it holds  the solution obtained is feasible
and optimal in all possible scenarios  however  osc is a strong property and holds infrequently 
if the stppu is not osc  but we still need to have a control sequence before execution begins 
best sc will find the best solution that is consistent with all possible future situations 
most commonly  dynamic controllability will be more useful  if the control sequence needs
not be known before execution begins  odc is ideal  notice that  from the results in section     
an stppu may be not osc and still be odc  if  however  the stppu is not even odc  then

   

fiu ncertainty

in soft temporal constraint problems

best dc will give a dynamic solution with the highest preference  recall  as we have shown in
section      that for any given preference level    sc implies  dc but not vice versa  thus  it
may be that a given stppu is  sc and  dc with      being  sc means that there is a fixed
way to assign values to the executables such that it will be optimal only in situations with optimal
preference   and will give a preference at least  in all other cases  on the other hand   dc
implies that a solution obtained dynamically  by the odc execute algorithm  will be optimal for
all those situations where the best solution has preference   and will yield a preference   in all
other cases  thus  if      using the dynamic strategy will guarantee optimality in more situations
and a higher preference in all others 
the last possibility is to check owc  this will at least allow the executing agent to know in
advance if there is some situation that has no solution  moreover  if the situation is revealed just
before the execution begins  using any of the solvers for stpps described in  rossi et al         will
allow us to find an optimal assignment for that scenario 

   related work
in this section we survey work which we regard as closely related to ours  temporal uncertainty
has been studied before  but it has been defined in different ways according to the different contexts
where it has been used 
we start considering the work proposed by vila and godo         they propose fuzzy temporal constraint networks  which are stps where the interval in each constraint is mapped into a
possibility distribution  in fact  they handle temporal uncertainty using possibility theory  zadeh 
       using the term uncertainty to describe vagueness in the temporal information available 
their aim is to model statements as he called me more or less an hour ago  where the uncertainty
is the lack of precise information on a temporal event  their goal thus is completely different from
ours  in fact  we are in a scenario where an agent must execute some activities at certain times  and
such activities are constrained by temporal relations with uncertain events  our goal is to find a way
to execute what is in the agents control in a way that will be consistent whatever nature decides in
the future 
in  vila   godo         instead  they assume to have imprecise temporal information on events
happened in the past  their aim is to check if such information is consistent  that is  if there are
no contradictions implied and to study what is entailed by the set of constraints  in order to model
such imprecise knowledge  possibilities are again used  every element of an interval is mapped into
a value that indicates how possible that event is or how certain it is  thus  another major difference
with their approach is that they do not consider preferences  only possibilities  on the other hand  in
the work presented here we do not allow to express information on how possible or probable a value
is for a contingent time point  this is one of the lines of research we want to pursue in the future 
moreover  in  vila   godo         they are concerned with the classical notion of consistency
 consistency level  rather than with controllability 
another work related to the way we handle uncertainty is that of badaloni and giacomin        
they introduce flexible temporal constraints where soft constraints are used to express preferences
among feasible solutions and prioritized constraints are used to express the degree of necessity of the
constraints satisfaction  in particular  they consider qualitative allen style temporal relations and
they associate each such relation to a preference  the uncertainty they deal with is not on the time
of occurrence of an event but is on whether a constraint belongs or not to the constraint problem 

   

firossi   v enable    yorke  s mith

in their model  information coming from plausibility and information coming from preferences is
mixed and is not distinguishable by the solver  in other words  it is not possible to say whether a
solution is bad due to its poor preference on some relation or due to it violating a constraint with a
high priority  in our approach  instead  uncertainty and preferences are separated  the compatibility
with an uncertain event does not change the preference of an assignment to an executable  the
robustness to temporal uncertainty is handled intrinsically by the different degrees of controllability 
in  dubois  hadjali    prade      b  the authors consider fuzziness and uncertainty in temporal reasoning by introducing fuzzy allen relations  more precisely  they present an extension
of allen relational calculus  based on fuzzy comparators expressing linguistic tolerance  dubois
et al       b  want to handle situations in which the information about dates and relative positions
of intervals is complete but  for some reason  there is no interest in describing it in a precise manner  for example  when one wants to speak only in terms of approximate equality  or proximity
rather that in terms of precise equality  secondly  they want to be able to deal with available information pervaded with imprecision  vagueness or uncertainty  in the framework we have presented
we restrict the uncertainty to when an event will occur within a range  on the other hand  we put
ourselves into a complete ignorance position  that would be equivalent  in the context of  dubois
et al       b   to setting to   all possibilities of all contingent events  moreover  in  dubois et al  
    b  they do not allow preferences nor address controllability  instead  they consider  similarly
to  vila   godo         the notions of consistency and entailment  the first notion is checked by
computing the transitive closure of the fuzzy temporal relations using inference rules appropriately
defined  the second notion is checked by defining several patterns of inference 
another work which addresses also temporal uncertainty is presented in  dubois  fargier   
prade        and in  dubois  fargier    prade      a   in this work both preferences and activities
with ill known durations in the classical job shop scheduling problem are handled using the fuzzy
framework  there are three types of constraints  precedence constraints  capacity constraints and
due dates  and release time constraints  in order to model such unpredictable events they use possibility theory  as the authors mention in  dubois et al          possibility distributions can be viewed
as modeling uncertainty as well as preference  see dubois  fargier    prade         everything depends on whether the variable x on which the possibility distribution is defined is controllable or
not  thus dubois et al         distinguish between controllable and uncontrollable variables  however they do not allow to specify preferences on uncontrollable events  our preference functions
over contingent constraints would be interpreted as possibility distributions in their framework  in
some sense  our work is complementary to theirs  we assume a constraint possibility distribution
on contingent events always equal to   and we allow no representation of any further information
on more or less possible values  on the other hand  we allow to specify preferences also on uncontrollable events  they  on the contrary  allow to put possibility distributions on contingent events 
but not preferences 
finally  dubois et al         show that a scheduling problem with uncertain durations can be
formally expressed by the same kind of constraints as a problem involving what they call flexible
durations  i e  durations with fuzzy preferences   however the interpretation is quite different  in
the case of flexible durations  the fuzzy information comes from the specifications of preferences
and represents the possible values that can be assigned to a variable representing a duration  in the
case of imprecisely known durations  the fuzzy information comes from uncertainty about the real
value of some durations  the formal correspondence between the two constraints is so close that the
authors do not distinguish among them when describing the solving procedure  further  the problem
   

fiu ncertainty

in soft temporal constraint problems

they solve is to find the starting times of activities such that these activities take place within the
global feasibility window whatever the actual values of the unpredictable durations will be  clearly
this is equivalent to optimal strong controllability  they do not address the problem of dynamic or
weak controllability with preferences 

    summary and future work
we have defined a formalism to model problems with quantitative temporal constraints with both
preferences and uncertainty  and we have generalized to this formalism three classical notions of
controllability  that is  strong  weak and dynamic   we have then focused on a tractable class of
such problems  and we have developed algorithms that check the presence of these properties 
this work advances the state of the art in temporal reasoning and uncertainty since it provides a
way to handle preferences in this context  and to select the best solution  rather than a feasible one 
in the presence of uncontrollable events  moreover  it shows that the computational properties of
the controllability checking algorithms do not change by adding preferences  in particular  dynamic
controllability can still be checked in polynomial time for the considered class of problems  producing dynamically temporal plans under uncertainty that are optimal with respect to preferences 
among the future directions we want to pursue within this line of research  the first is a deeper
study of methods and algorithms for adding preferences different from fuzzy ones  notice that
the framework that we have proposed here is able to represent any kind on preference within the
soft constraint framework  however  our algorithms apply only to fuzzy preferences and semiconvex functions  in particular  we would like to consider the impact on the design and complexity
of algorithms when there are uncontrollable events and the underlying preference structures is the
weighted or the probabilistic semiring  both of these semirings are characterized by non idempotent
multiplicative operators  this can be a problem when applying constraint propagation  bistarelli
et al          such as path consistency  in such constraints  thus search and propagation techniques
will have to be adapted to an environment featuring uncertainty as well  it should be noticed that in
 peintner   pollack        some algorithms for finding optimal solutions of stps with preferences
in the weighted semiring have been proposed  another interesting class of preferences are utilitarian
ones  in such a context each preference represents a utility and the goal is to maximize the sum of
the utilities  such preferences have been used in a temporal context without uncertainty for example
in  morris  morris  khatib  ramakrishnan    bachmann        
recently  another approach for handling temporal uncertainty has been introduced in  tsamardinos        tsamardinos  pollack    ramakrishnan      a   probabilistic simple temporal problems  pstps   similar ideas are presented in  lau  ou    sim         in the pstp framework 
rather than bounding the occurrence of an uncontrollable event within an interval  as in stpus  a
probability distribution describing when the event is more likely to occur is defined on the entire set
of reals  as in stpus  the way the problem is solved depends on the assumptions made regarding
the knowledge about the uncontrollable variables  in particular they define the static scheduling
optimization problem  which is the equivalent to finding an execution satisfying sc in stpus  and
the dynamic scheduling optimization problem  equivalent to finding a dynamic execution strategy
in the context of stpus  in the above framework  optimal means with the highest probability
of satisfying all the constraints  preferences are not considered in this framework  we believe it
would be interesting to add preferences also to this approach  a first step could consists of keeping 
for each strategy  separately its global preference and its probability of success  in this way we

   

firossi   v enable    yorke  s mith

could use the existing frameworks for handling the two aspects  then  we can order the strategies
by giving priority to preferences  thus taking in some sense a risky attitude  or  on the contrary  by
giving priority to probabilities  adopting a more cautious attitude  a step in this direction has been
recently proposed in  morris  morris  khatib    yorke smith         where  however  the authors 
rather than actually extending the notions of consistency of pstps to handle preferences  consider
inducing preferences from probabilities  in contrast  our approach is preliminary advanced in  pini 
rossi    venable        
up to now we have focused our attention on non disjunctive temporal problems  that is  with
only one interval per constraint  we would like to consider adding uncertainty to disjunctive temporal problems  stergiou   koubarakis         and to consider scenarios where there are both
preferences and uncertainty  such problems are not polynomial even without preferences or uncertainty but it has been shown that the cost of adding preferences is small  peintner   pollack 
       so we hope that the same will hold in environments with uncertainty as well  surprisingly 
uncertainty in disjoint temporal problems has not been considered yet  although it is easy to see
how allowing multiple intervals on a constraint is itself a form of uncontrollability  we  thus  plan to
start defining dtpus  preliminary results are in venable and yorke smith        and then to merge
this approach with the existing one for dtpps 
extending conditional temporal problems  a framework proposed in  tsamardinos  vidal   
pollack      b   is also a topic of interest for us  in such model a boolean formula is attached to
each temporal variable  these formulae represent the conditions which must be satisfied in order
for the execution of events to be enabled  in this framework the uncertainty is on which temporal
variables will be executed  we believe that it would be interesting to extend this approach in order
to allow for conditional preferences  allowing preference functions on constraints to have different
shapes according to the truth values of some formulas  or the occurrence of some event at some
time  this would provide an additional gain in expressiveness  allowing one to express the dynamic
aspect of preferences that change over time 

appendix a
theorem   if an stppu p is osc  then it is odc  if it is odc  then it is owc 
proof  let us assume that p is osc  then there is a viable execution strategy s such that  p     p  
p roj p   and for every executable time point x   s p     x    s p    x and s p     optsol p   
and s p     optsol p     thus  in particular   s p    x    s p    x for every pair f projections
such that  s p     x    s p     x   this allows us to conclude that if p is osc then it is also odc
and any strategy which is a witness of osc is also a witness of odc 
let us now assume that p is odc  then  in particular  there is a viable dynamic strategy s such
that p   p roj p    s p    is an optimal solution of p    this clearly means that every projection
has at least an optimal solution  thus p is owc   
theorem   for any given preference level   if an stppu p is  sc then it is  dc 
proof  assume that p is  sc  then there is a viable strategy s such that   s p     x    s p    x  
p    p   p roj p   and for every executable time point x  and s p    is an optimal solution of
projection p   if there is no optimal solution of p  with preference    and pref  s p        
otherwise 
   

fiu ncertainty

in soft temporal constraint problems

thus   s p    x    s p    x also for all pairs of projections  p   and p  such that  s p     x  
 s p     x   this implies that p is  dc   
theorem   given an stppu p and a preference level   if p is  sc  resp   dc   then it is  sc
 resp   dc       
proof  if p is  sc then there is a viable strategy s such that   s p     x    s p    x   p    p  
p roj p   and for every executable time point x  and s p    is an optimal solution of p if there is
no optimal solution of p with preference    and pref  s p         otherwise  but  of course 
    the set of projections with no optimal solution with preference    is included in that of
projections with no optimal solution with preference     moreover  for all the other projections 
pz   pref  s pz        implies that pref  s pz        since      similarly for  dc  
theorem   given an stppu p   let opt   max t sol p   pref  t    then  p is osc  resp  odc  iff
it is opt sc  resp  opt dc  
proof  the result comes directly from the fact that p i  p roj p    opt pi    opt  and there is
always at least a projection  pj   such that opt pj     opt  
theorem   given any stppu p with a finite number of preference levels  the execution of algorithm best sc over p terminates 
proof  consider stppu p and its optimal preference value opt   max t sol p   pref  t    that is 
the highest preference assigned to any of its solutions  by definition  qopt   is not consistent  this
means that if the algorithm reaches level opt      that is  the next preference level higher than opt
in the granularity of the preferences  then the condition in line    will be satisfied and the execution
will halt  by looking at lines      we can see that either one of the events that cause the execution
to terminate occurs or the preference level is incremented in line     since there is a finite number
of preference levels  this allows us to conclude that the algorithm will terminate in a finite number
of steps   
theorem   consider an stppu p   hne   nc   lr   lc   sf csp i and preference level   and consider the stpu q   hne   nc   l r   l c i obtained by cutting p at   and stpu pc q    hne   nc  
l  r   l  c i  then 
    situation of p   p  p roj pc q    iff optp  p     
   for every control sequence    is a solution of t    stronglycontrollable pc q   iff  p 
proj pc  q     t   sol p   and pref  t      
proof  we will prove each item of the theorem 
       consider any situation  such that p   p roj pc q     since pc q   is path consistent  any consistent partial assignment  e g  that defined by   can be extended to a complete
consistent assignment  say t  of pc q    moreover  t   sol p    and pref  t      
since the preference functions are semi convex and every interval of pc q    is a subinterval
of the corresponding one in q   thus  opt p     in p       consider a situation  such
that opt p      this implies that t   sol p   such that pref  t       since we
   

firossi   v enable    yorke  s mith

are in the fuzzy semiring  this happens iff min cij lr lc fij  t    cij      thus it must
be that fij  t  cij      cij  lr  lc and thus  t    cij  c ij   where c ij  l r  l c  
this implies that p  p roj q    moreover  since t  is a consistent solution of p in q  
p  p roj pc q    
   by construction of t      sol t    iff  p  p roj pc q     t   sol p   
sol pc q     notice that the fact that t   sol pc q    implies that pref  t        
corollary   consider an stppu p and a preference level  and assume that    situation of p  
such that opt p      where p is the corresponding projection  then  if stpu pc q     obtained
by cutting p at   and then applying path consistency  is not sc the p is not  sc 
proof  from item   of theorem   we get that p  is a projection of p such that opt p    
iff p  p roj pc q     thus  there are complete assignments to controllable and contingent
variables of p with global preference   iff pc q    is consistent  i e   iff q is path consistent  let
us now assume that pc q   is not sc  then by item   of theorem    there is no fixed assignment to
controllable variables such that it is a solution of every projection in p roj pc q     and  for every
such projection  it gives a global preference   
this means that either such set of projections has no common solution in p or every common
solution gives a preference strictly lower that   thus  p is not  sc since this requires the existence
of a fixed assignment to controllable variables which must be an optimal solution for projections
with preference at most   definition     item   and    and give a preference   in all other
projections  definition     item    
theorem   consider an stppu p   and all preference levels from  min to   and assume that the
corresponding stps  t min           t  obtained by cutting p at preference levels n
min             and


enforcing strong controllability are consistent  then    sol p    where p   i min       t i  
iff p  p roj p    t   sol p    if opt p      then pref  t      opt p    otherwise
pref  t      
proof      let us first recall that given two stps  p  and p    defined on the same set of variables 
the stp p    p   p  has the same variables as p  and p  and each temporal constraint c ij  
c ij  c ij   that is  the intervals of p  are the intersection of the corresponding intervals of p   and
p    given this  and the fact that the set of projections of p is the same as the set of projections
of the stpu obtained cutting p at min   we can immediately derive from theorem   that any
solution of p  satisfies the condition      let us now consider a control sequence  of p such that
   sol p     then  j   min         such that    sol t j    from theorem   we can conclude
that p such that opt p     j   such that t  is not an optimal solution of p    
theorem   if the execution of algorithm best sc on stppu p stops due to the occurrence of
event    line     then p is not  sc     
proof  for every preference level    min   q   cut p     min  cut p   qmin   the occurrence of event   implies that qmin is not strongly controllable  so it must be the same for all
q     min   and thus p is not  sc   min   theorem   allows us to conclude the same
   min    

   

fiu ncertainty

in soft temporal constraint problems

theorem   if the execution of algorithm best sc on stppu p stops due to the occurrence of
event    line     at preference level   then
       opt   maxt sol p   pref  t   
 p is osc and a control sequence  is a solution of stp p opt  returned by the algorithm  iff
it is optimal in any scenario of p  
proof  if the condition of line    is satisfied by stpu q   it means that there are no schedules of
p that have preference   however  the same condition was not satisfied at the previous preference
level       which means that there are schedules with preference      this allows us to conclude
that     is the optimal preference for stppu p seen as an stpp  that is        opt  
maxt sol p   pref  t    since we are assuming that line    is executed by best sc at level opt     
the conditions in lines    and    must have not been satisfied at preference opt  this means that
at level opt the stp p opt  line     is consistent  by looking at line     we can see that stp p opt
satisfies the hypothesis of theorem   from preference min to preference opt  this allows us to
conclude that any solution of p opt is optimal in any scenario of p and vice versa  thus  p is opt sc
and  by theorem    it is osc   
theorem    if the execution of algorithm best sc on stppu p stops due to the occurrence of
event    line     or event    line     at preference level  then p is not osc but it is      sc and any solution  of stp p    returned by the algorithm  is such that  p   p roj p   
t   sol p    if opt p         then pref  t      opt p    otherwise pref  t         
proof  if event   or event   occurs the condition in line    must have not been satisfied at preference level   this means that stpu pc q    is consistent and thus there are schedules of p with
preference   if event   occurs  then the condition in line    must be satisfied  the stpu obtained
by cutting p at preference level  and applying path consistency is not strongly controllable  we
can thus conclude  using corollary    that p is not osc  however since the algorithm had executed
line    at preference level   at     it must have reached line     by looking at line    we can
see that stp p   satisfies the hypothesis of theorem   from preference min to preference level
     this allows us to conclude that p is     sc 
if instead event   occurs then it is p  to be inconsistent which  by theorem    means that there
is no common assignment to executables that is optimal for all scenarios with preference    and
at the same time for those with preference equal to   however since the execution has reached line
   at preference level   again we can assume it had successfully completed the loop at preference
    and conclude as above that p is     sc  
theorem    determining the optimal strong controllability or the highest preference level of  sc
of an stppu with n variables and   preference levels can be achieved in o n      
proof  notice first that the complexity of procedure  cut  lines   and     and of intersecting two
stps  line     is linear in the number of constraints and thus o n      assuming we have at most  
different preference levels  we can conclude that the complexity of best sc is bounded by that of
applying   times stronglycontrollable  that is o n       see section     
theorem    stppu p is owc iff the stpu q  obtained by simply ignoring the preference functions on all the constraints wc 
   

firossi   v enable    yorke  s mith

proof  if p is owc  then for every situation  of p there exists a control sequence  such that
schedule t  is consistent and optimal for projection p    for every projection p of p there is
a corresponding projection of q  say q    which is the stp obtained from the p  by ignoring the
preference functions  it is easy to see that definition   in section     implies that any assignment
which is an optimal solution of p is a solution of q   if stpu q is wc then for every projection
q there exists a control sequence  such that schedule t   is a solution of q   again by definition   in section     we can conclude that the corresponding stpp p  at least a solution and thus
it must have at least an optimal solution  that is a solution such that no other solution has a higher
preference   
theorem    given an stppu p   consider any preference level  such that stpu q    obtained
cutting p at   is consistent  if stpu pc q    is not dc then p is not odc and it is not  dc 
   
proof  assume that there is a preference level  such that pc q    is not dc  this means that
there is no viable execution strategy s    p roj pc q    sol pc q    such that p    p  in
p roj q   and for any executable x  if  s p     x    s p     x then  s p    x    s p    x  
let us recall that  due to the semi convexity of the preference functions  cutting the stppu
at any given preference level can only return smaller intervals on the constraints  thus  every
projection in p roj q    which is an stp  corresponds to a projection in p roj p   which is the
stpp obtained from the stp by restoring the preference functions as in p 
let us now assume  on the contrary  that p is odc and  thus  that there exists a viable strategy
 
s   p roj p    sol p   such that p    p   p roj p    if  s    p     x    s    p     x then
 s    p    x    s    p    x   and pref  s    pi      opt pi    i         consider  now the restriction of
s   to the projections in p roj pc q     since pref  s    p     opt p   for every p   it must
be that p  p roj  pc q     s    p    sol  pc q     thus the restriction of s   satisfies
the requirements of the strategy in the definition of dc  this is in contradiction with the fact that
pc q   is not dc  thus p cannot be odc 
by theorem    p  p roj p    p  p roj pc q    iff opt p      this allows us to
conclude that p is not  dc  finally  theorem   allows to conclude that p is not  dc     
 
lemma    useful for the proof of theorem     consider an stpu q on which dynamicallyco
ntrollable has reported success on q  consider any constraint ab  where a and b are executables
and the execution of a always precedes that of b  defined by interval  p  q  and wait t max      then 
there exists a viable dynamic strategy s such that q i  p roj q    s qi   b   s qi   a  tmax  
proof  such a dynamic strategy is produced by algorithm dc execute shown in figure    section    in fact  in line   it is stated that an executable b can be executed as soon as  at the current
time  the three following conditions are all satisfied      b is live  i e  the current time must lie between its lower and upper bounds      b is enabled  i e  all the variables which must precede b have
been executed  and     all waits on b have been satisfied  let us denote the current time as t   and
assume b is live and enabled at t   thus  t   s q i   a     p  q   the third requirement is satisfied
at t only in one of the two following scenarios  either the last contingent time point for which b
had to wait has just occurred and thus b can be executed immediately  or the waits for the contingent
    notice that tmax is the longest wait b must satisfy imposed by any contingent time point c on constraint ab 

   

fiu ncertainty

in soft temporal constraint problems

time points  among those for which b had to wait  which have not yet occurred have expired at t  
in both cases it must be that t  tmax    s qi  a    thus    s qi   b   t     s qi   a  tmax    
theorem    consider stppu p and stpus  t  and t      obtained by cutting p respectively at
level  and      and applying pc  without finding inconsistencies  and dynamicallycontrollable
with success  consider stpu p      merge t    t      
then  merge t    t      does not fail if and only if
 p    is dynamically controllable and
 there is a viable dynamic strategy s such that for every projection p i  p roj p      
 if opt pi      or opt pi          in p   pref  s pi      opt pi   
 otherwise pref  s pi          
proof   the following is a constructive proof in which  assuming merge has not failed  a strategy
s  satisfying the requirements of the theorem  is defined 
first notice that p roj p        p roj t     in fact  in line   of merge  p    is initialized to

t   and merge changes only requirement intervals leaving all contingent intervals unaltered 
furthermore  p roj t       p roj t     this can be seen using the first claim of theorem  
in section   
let s   and s    be the viable dynamic execution strategies obtained running dc execute respectively on t  and t      now  since p roj t       p roj t     the projections of t  will be
mapped into two  possibly different  schedules  one by s   and one by s      for every projection
pi  p roj p      and for every executable b  notice that if s     pi   b exists then it is equal to
s    pi   b   we can thus define the history of b  which we recall is the set of durations of all contingent events which have finished prior to b  in the new strategy s as s pi   b   s    pi   b for every
projection pi  p roj p        notice that s     pi   b is not defined if the history of b in pi contains
a duration which is mapped into a preference exactly equal to  and thus p i cannot be a projection
of t     
we will now consider how to define s depending on which case the ab constraint is in t and
in t     
 constraint ab is a follow or unordered in t  and follow in t      in both cases  merge
does not change interval ab  leaving it as it is in t   
let us first analyze the scenario in which ab is in the follow case in both stpus  in such
a case  the execution of b will always follow that of any contingent time point c in both
problems  thus  for every projection p   p roj p       we have s p   b     since
both problems are dynamically controllable  p    q        and  p     q           furthermore 
since path consistency has been enforced in both problems  the constraints are in minimal
form  see section     that is  for every value  ab in  p   q     resp   p     q       there is a
situation  of t   resp  t      such that t   sol p   and ab   ab   finally  since
p roj t       p roj t     it must be that  p     q        p   q    
next we consider the scenario in which ab is in the unordered case in t      let us start
by proving that  in such a case  it must be that  p      q        p   t    first  we show that
   

firossi   v enable    yorke  s mith

p    p   by definition  p   is such that there is a situation  such that p   p roj t     
and there is a schedule t   sol p   such that ab   p     since p roj t      
p roj t     then p     p   q     next let us prove that it must be t   q      notice that
the wait t induces a partition of the situations of t  into two sets  those such that  for every
contingent point c  ac   t   and those which for some contingent point c     ac    t  
in the first case  all the contingent events will have occurred before the expiration of the wait
and b will be executed before ta   t  where ta is the execution time of a   in the second
case it will be safe to execute b at ta   t   given that p roj t       p roj t     and that b
is constrained to follow the execution of every contingent time point in t      it must be that
all the projections of t    belong to the first set of the partition and thus q     t  
in both cases it is  hence  sufficient to define the new strategy s as follows  on all projections 
pi   pj  p roj p      such that  s pi    b    s pj    b then  s pi   b    s pj   b  
 s     pi   b if  s     pi   b exists  otherwise  s pi   b    s pj   b    s    pi   b   this assignment
guarantees to identify projections on constraints mapped into preferences     if  s     pi   b
exists and thus pi  p roj t       otherwise   for those projections in p roj t    but not
in p roj t      
 constraint ab is a precede case in t  and in t      b must precede any contingent timepoint c  this means that any assignment to a and b corresponding to a value in  p    q     resp 
 p     q       can be extended to a complete solution of any projection in p roj t     resp 
p roj t        interval  p    q     is  in fact  obtained by merge  by intersecting the two intervals 
since we are assuming that merge has not failed  such intersection cannot be empty  line  
of figure      we can  thus  for example  define s as follows  on any pair of projections
pi   pj  p roj p      if  s pi    b    s pj    b then  s pi   b     s pj   b     p   
 constraint ab is unordered in t  and unordered or precede in t      first let us recall
that the result of applying merge is interval  p     q      where p    p   q     min q    q      and
wait t    max t   t      since  by hypothesis  merge has not failed  it must be that t    q  
 line    figure    
notice that  due to the semi convexity of the preference functions  p   p     in fact  b will
be executed at ta   p  where ta is the time at which a has been executed  only if all the
contingent time points for which b has too wait for have occurred  let us indicate with x mlb

      where
 resp  x  
mlb   the maximum lower bound on any ac constraint in t  resp  in t

  
b has to wait for c  then it must be that p   xmlb  resp  p    xmlb    however due to
the semi convexity of the preference functions x mlb  x  
mlb  
in this case we will define strategy s as follows  for any pair of projections pi   pj 
p roj p       if  s pi    b   s pj    b then  s pi   b    s pj   b   max  s     pi   b  
 s    pi   b   whenever  s     pi   b is defined  otherwise  s pi   b   s pj   b    s    pi   b  
from lemma   we have that max  s     pi   b    s    pi   b    t    hence  s pi   b     s pj   b   
 p    q     
let us now consider the preferences induced on the constraints by this assignment  first
let us consider the case when max  s     pi   b    s    pi   b      s     pi   b   since s    is the
dynamic strategy in t    all its assignment identify projections with preference        if
instead max  s     pi   b    s    pi   b      s    pi   b   then it must be that  s    pi   b    s     pi   b  
   

fiu ncertainty

in soft temporal constraint problems

however we know  from lemma   that  s     pi   b  t    t  and that  s    pi   b  t   
this implies that  s    pi   b   p     t    and thus it is an assignment with preference    
   finally  if  s     pi   b is not defined  as noted above  then pi   p roj t      and thus
opt pi       since by theorem   in section   we have that p i  p roj t     opt pi   
   thus   s pi   b   s pj   b    s    pi   b   which  being an assignment in t    identifies
preferences     opt pi   
 we have just shown that  if merge does not fail  then there is a dynamic strategy  with the
required additional properties  which certifies that p   is dynamically controllable 
assume  instead  that merge fails on some constraint  there are two cases in which this can
happen  the first one is when ab is a precede case in both t and t    and  p   q     p     q     
    as proven in  morris et al          the projection on ab of any viable dynamic strategy for t 
is in  p   q    and the projection on ab of any viable dynamic strategy for t    is in  p     q      
the dynamic viable strategies of t  give optimal solutions for projections with optimal preference
equal to   the dynamic viable strategies of the t    give optimal solutions for projections with
optimal preference equal to       since the projections of t    are a subset of those in t    if
 p   q      p     q         then a strategy either is optimal for projection in t  but not for those in
t    or vice versa 
the second case occurs when merge fails on some constraint ab which is either an unordered
case in both t  and t    or is an unordered case in t  and a precede case in t      in such
cases the failure is due to the fact that  t    q      t     q          it must be that either q      t
or q    t     if the upper bound of the interval on ab is q    the there must be at at least a
contingent time point c such that executing b more than q    after a is either inconsistent with
some assignment of c or it gives a preference lower than       on the other side  if the wait on
constraint ab in t  is t there must be at least a contingent time point c   such that executing b
before t is either inconsistent or not optimal with some future occurrences of c  again there is no
way to define a viable dynamic strategy that is simultaneously optimal for projections with optimal
value equal to  and for those with optimal value        
lemma    useful for the proof of theorem     consider strategies s     s    and s as defined in
theorem     then
   for any projection of p      pi   pref  s pi     pref  s    pi    and for every projection  pz  
of t      pref  s pz          
   for any constraint ab   s pi   b  t   
proof 
   obvious  since in all cases either  s p i   b    s    pi   b or  s pi   b    s     pi    b and
pref  s     pi     pref  s    pi    since for every executable b  s     pi   b  t      moreover 
for every projection pz of t      for every executable b   s pz   b    s     pz   b  
   derives directly from the fact that either  s p i   b    s    pi   b or  s pi   b    s     pi   b and
lemma     

   

firossi   v enable    yorke  s mith

theorem    consider stppu p and for every preference level    define t  as the stpu obtained
by cutting p at   then applying pc and then dynamicallycontrollable  assume that     t 
is dc  consider stpu p   
p    merge merge       merge merge t min   t min       t min                t   
with min the minimum preference on any constraint in p  assume that  when applied  merge
always returned a consistent stpu  then  there is a viable dynamic strategy s  such that p i 
p roj p    if opt pi     then s pi   is an optimal solution of pi   otherwise pref  s pi          
proof  we will prove the theorem by induction  first  notice that  by construction p roj  t min    
p roj p    this allows us to conclude that p roj p      p roj p    since  every time merge is
applied  the new stpu has the same contingent constraints as the stpu given as first argument 
now  since t min is dynamically controllable any of its viable dynamic strategies  say s min
will be such that s min  pi   is optimal if opt pi     min and  otherwise  pref  s pi     min  
consider now p min     merge  t min  t min       then by theorem     we know that there is a
strategy  s min      such that s min     pi   is an optimal solution of pi if opt pi    min     and
pref  s pi     min     otherwise 
let us assume that stpu p min  k   as defined in the hypothesis  satisfies the thesis and that
p min  k     as defined in the hypothesis  where min   k        does not  notice that this
implies that there is a strategy  s min  k   such that s min  k  pi   is an optimal solution of pi if
opt pi    min   k and pref  s pi     min   k for all other projections  since  min  
k        then  by hypothesis we also have that t min  k   is dc  moreover  by construction 
p min  k    merge  p min  k  t min  k      since merge doesnt fail  thus  using theorem   
and using strategy s min  k for p min  k in the construction of theorem     by lemma    we will
obtain a dynamic strategy  s min  k     such that for every projection pi   pref  s min  k    pi    
pref  s min  k  pi    and such that s min  k    pj   is an optimal solution for all projections p j such
that opt pj     min   k     and pref  s pj     min   k     on all other projections  this
allows us to conclude that s min  k    ph   is an optimal solution for all projections p h such that
opt ph    min   k      this is contradiction with the assumption that p min  k   doesnt satisfy
the thesis of the theorem   
theorem    given an stppu p  the execution of algorithm best dc on p terminates 
proof  we assume that the preference set is discretized and that there are a finite number of different
preferences  best dc starts from the lowest preference and cuts at each level p  if  at a given level 
the stpu obtained is not consistent or not dynamically controllable or the merging procedure fails 
then best dc stops at that level  assume  instead  that  as it moves up in the preference ordering 
none of the events above occur  however at a certain point the cutting level will be higher than the
maximum on some preference function  or it will be outside of the preference set  in which case
cutting the problem will give an inconsistent stp  
theorem    given an stppu p as input  best dc terminates in line   iff       such that p is
 dc 
proof    assume best dc terminates in line    then  the stpu obtained by cutting p at
the minimum preference  min   on any constraint is not dc  however cutting at the minimum
   

fiu ncertainty

in soft temporal constraint problems

preference on any constraint or at preference level   gives the same stpu  by theorem    we can
conclude that p is not  dc     and  thus  not odc 
  assume p is not  dc for all preferences      then cutting p at the minimum preference
min cannot give a dynamically controllable problem  otherwise  p would be  min  dc  hence 
best dc will exit in line     
theorem    given an stppu p as input  best dc terminates in line    iff p is odc 
proof    assume best dc terminates in line    when considering preference level   then 
stpu q obtained by cutting stppu p at level  is not path consistent  from this we can immediately conclude that there is no projection p i  p roj pi   such that opt pi     
since best dc did not terminate before  we must assume that up to preference      all the
tests  path consistency  dynamic controllability  and merge  were successful 
now consider the stpu p   obtained at the end of the iteration corresponding to preference
level      it is easy to see that p   satisfies the hypothesis of theorem     this allows us
to conclude that there is a viable dynamic strategy s such that for every projection p i   such that
opt pi         s pi   is an optimal solution of pi   however since we know that all projections
of p are such that opt pi       this allows us to conclude that p is odc 
  if p is odc then there is a viable strategy s such that for every pair of projections  p i   pj 
p roj p    and for very executable b  if  s p i    b    s pj    b then  s pi   b    s pj   b and
s pi   is an optimal solution of pi and s pj   is an optimal solution of pj  
by theorem    we know that best dc cannot stop in line   
let us now consider line    and show that if best dc sets  dc to true in that line then p
cannot be odc  in fact the condition of setting  dc to true in line    is that the stpu obtained by
cutting p at preference level  is path consistent but not dynamically controllable  this means that
there are projections  e g  pj   of p such that opt pj       however  there is no dynamic strategy
for the set of those projections  thus  p cannot be odc 
let us now consider line     and show that  if p is odc best dc cannot set  dc to true  if
best dc sets  dc to true then merge failed  using theorem     we can conclude that there is no
dynamic viable strategy s such that for every projection of p   p i    remember that p roj p      
p roj p    s pi   is an optimal solution if opt pi      however  we know there are projections of
p with optimal preference equal to   since we are assuming best dc is stopping at line    and not
     thus  p cannot be odc  
theorem    given stppu p in input  best dc stops at lines    or    at preference level  iff p
is       dc and not odc 
proof    assume that best dc sets  dc to true in line     when considering preference level
  thus  the stpu obtained by cutting p at level  is path consistent but not dc  however since 
must be the first preference level at which this happens  otherwise the best dc would have stopped
sooner  we can conclude that the iteration at preference level     was successful  considering
p   and using theorem    we can conclude that there is a viable dynamic strategy s such that 
for every projection of p   pi   if opt pi        then s pi   is an optimal solution of pi and
pref  s pi         otherwise  but this is the definition of     dynamic controllability 
if best dc terminates in line     by theorem    and and theorem    we can conclude that 
while there is a viable dynamic strategy s such that for every projection of p   p i   if opt pi      
   

firossi   v enable    yorke  s mith

then s pi   is an optimal solution of pi and pref  s pi       otherwise  there is no such strategy
guaranteeing optimality also for projections with optimal preference   again  p is     dc 
  if p is  dc  for some     then by theorem     best dc does not stop in line    if p
is  dc  but not odc  for some     then by theorem     best dc does not stop in line     by
theorem     best dc always terminates  so it must stop at line    or     
theorem    the complexity of determining odc or the highest preference level  of  dc of an
stppu with n variables  a bounded number of preference levels l is o n      
proof  consider the pseudocode of algorithm best dc in figure    
the complexity of min  cut p   in line   is o n     since every constraint must be considered 
an there are up to o n    constraints  and for each constraint the time for finding the interval of
elements mapped into preference   min is constant  the complexity of checking if the stpu obtained is dc is o n     thus  lines   and    which are always performed  have an overall complexity
of o n     lines   and    clearly  take constant time 
let us now consider a fixed preference level  and compute the cost of a complete while iteration on  
  line     the complexity of  cut p   is o n     
  line     the complexity of applying pc for testing path consistency is o n      see section     
 dechter et al          
  line     the complexity of testing dc using dynamicallycontrollable is o n       see section   and morris and muscettola        
  line     constant time 
  line        the complexity of merge is o n      since at most o n    constraints must be
considered and for each constraint merging the two intervals has constant cost 
  line     constant time 
we can conclude that the complexity of a complete iteration at any given preference level is o n     
in the worst case  the while cycle is performed   times  we can  thus  conclude that the total
complexity of best dc is o n     since the complexity of the operations performed in lines      
is constant   

references
badaloni  s     giacomin  m          flexible temporal constraints  in  th conference on information processing and management of uncertainty in knowledge based system  ipmu       
pp           
bistarelli  s   montanari  u     rossi  f          semiring based constraint solving and optimization  journal of the acm                
bresina  j   jonsson  a   morris  p     rajan  k          activity planning for the mars exploration
rovers  in   th international conference on automated planning and scheduling  icaps
       pp       
   

fiu ncertainty

in soft temporal constraint problems

coggiola  m   shi  z     young  s          airborne deployment of an instrument for the real time
analysis of single aerosol particles  aerosol science and technology           
dearden  r   meuleau  n   ramakrishnan  s   smith  d     washington  r          contingency
planning for planetary rovers  in  rd intl  workshop on planning and scheduling for space 
dechter  r   meiri  i     pearl  j          temporal constraint networks  artificial intelligence 
              
dubois  d   fargier  h     prade  h          flexible constraint satisfaction problems with application to scheduling problems  tech  rep  report irit       r  i r i t   universite p 
sabatier 
dubois  d   fargier  h     prade  h          fuzzy constraints in job shop scheduling  journal of
intelligent manufacturing            
dubois  d   fargier  h     prade  h       a   fuzzy scheduling  modelling flexible constraints
vs  coping with incomplete knowledge  european journal of operational research      
       
dubois  d   hadjali  a     prade  h       b   fuzziness and uncertainty in temporal reasoning 
journal of universal computer science             
dubois  d     prade  h          a review of fuzzy set aggregation connectives  journal of information science                 
field  p   hogan  r   brown  p   illingworth  a   choularton  t   kaye  p   hirst  e     greenaway 
r          simultaneous radar and aircraft observations of mixed phase cloud at the    m
scale  quarterly journal of the royal meteorological society                
floyd  r  w          algorithm     shortest path  communication of the acm             
frank  j   jonsson  a   morris  r     smith  d          planning and scheduling for fleets of earth
observing satellites  in  th intl  symposium on ai  robotics  and automation in space  isairas    
khatib  l   morris  p   morris  r  a     rossi  f          temporal constraint reasoning with
preferences  in nebel  b   ed      th international joint conference on artificial intelligence 
 ijcai        pp          morgan kaufmann 
lau  h  c   ou  t     sim  m          robust temporal constraint networks  in proc  of   th ieee
conf  on tools with artificial intelligence  ictai     pp       hong kong 
leiserson  c  e     saxe  j  b          a mixed integer linear programming problem which is
efficiently solvable  journal of algorithms               
morris  p   morris  r   khatib  l   ramakrishnan  s     bachmann  a          strategies for global
optimization of temporal preferences  in wallace  m   ed    proceeding of the   th international conference on principles and practice of constraint programming  cp      vol      
of lecture notes in computer science  pp          springer 
   

firossi   v enable    yorke  s mith

morris  p  h   muscettola  n     vidal  t          dynamic control of plans with temporal uncertainty  in nebel  b   ed      th international joint conference on artificial intelligence
 ijcai        pp          morgan kaufmann 
morris  p  h     muscettola  n          managing temporal uncertainty through waypoint controllability  in dean  t   ed      th international joint conference on artificial intelligence
 ijcai     pp            morgan kaufmann 
morris  p  h     muscettola  n          temporal dynamic controllability revisited  in   th national
conference on artificial intelligence  aaai        pp            aaai press   the mit
press 
morris  r  a   morris  p  h   khatib  l     yorke smith  n          temporal planning with preferences and probabilities  in icaps   workshop on constraint programming for planning
and scheduling 
muscettola  n   morris  p  h   pell  b     smith  b  d          issues in temporal reasoning for
autonomous control systems  in agents  pp         
peintner  b     pollack  m  e          low cost addition of preferences to dtps and tcsps  in
mcguinness  d  l     ferguson  g   eds      th national conference on artificial intelligence  pp          aaai press   the mit press 
peintner  b     pollack  m  e          anytime  complete algorithm for finding utilitarian optimal
solutions to stpps  in   th national conference on artificial intelligence  aaai        pp 
        aaai press   the mit press 
pini  m  s   rossi  f     venable  k  b          possibility theory for reasoning about uncertain
soft constraints  in godo  l   ed     th european conference on symbolic and quantitative
approaches to reasoning with uncertainty  ecsqaru        vol       of lncs  pp     
     springer 
rajan  k   bernard  d  e   dorais  g   gamble  e  b   kanefsky  b   kurien  j   millar  w   muscettola  n   nayak  p  p   rouquette  n  f   smith  b  d   taylor  w     tung  y  w         
remote agent  an autonomous control system for the new millennium  in horn  w   ed   
  th european conference on artificial intelligence  ecai       pp          ios press 
rossi  f   sperduti  a   venable  k   khatib  l   morris  p     morris  r          learning and solving soft temporal constraints  an experimental study  in van hentenryck  p   ed    principles
and practice of constraint programming   th international conference  cp        vol      
of lncs  pp          springer 
rossi  f   venable  k  b     yorke smith  n          controllability of soft temporal constraint
problems  in   th international conference on principles and practice of constraint programming  cp      vol       of lncs  pp         
rossi  f   venable  k     yorke smith  n          preferences and uncertainty in simple temporal problems  in proc  cp   workshop  online       international workshop on online
constraints solving   handling change and uncertainty  
   

fiu ncertainty

in soft temporal constraint problems

ruttkay  z          fuzzy constraint satisfaction  in proceedings  st ieee conference on evolutionary computing  pp         orlando 
schiex  t          possibilistic constraint satisfaction problems or how to handle soft constraints   in dubois  d     wellman  m  p   eds     th annual conference on uncertainty in
artificial intelligence  uai     pp          morgan kaufmann 
shostak  r  e          deciding linear inequalities by computing loop residues  journal of the
acm                
stergiou  k     koubarakis  m          backtracking algorithms for disjunctions of temporal constraints  artificial intelligence                
tsamardinos  i          a probabilistic approach to robust execution of temporal plans with uncertainty  in vlahavas  i  p     spyropoulos  c  d   eds    methods and applications of artificial
intelligence  second hellenic conference on ai  setn        vol       of lncs  pp    
     springer 
tsamardinos  i   pollack  m  e     ramakrishnan  s       a   assessing the probability of legal execution of plans with temporal uncertainty  in workshop on planning under uncertainty and
incomplete information of the thirteenth international conference on automated planning
and scheduling  icaps       
tsamardinos  i   vidal  t     pollack  m  e       b   ctp  a new constraint based formalism for
conditional  temporal planning  constraints               
venable  k     yorke smith  n          simple temporal problems with preferences and uncertainty  in doctoral consortium of the   th international conference on automated planning
and scheduling  icaps        aaai press 
venable  k     yorke smith  n          disjunctive temporal planning with uncertainty  in   th
international joint conference on artificial intelligence  ijcai        pp          morgan
kaufmann 
vidal  t     fargier  h          handling contingency in temporal constraint networks  from consistency to controllabilities  journal of experimental and theoretical artificial intelligence 
            
vidal  t     ghallab  m          dealing with uncertain durations in temporal constraint networks
dedicated to planning  in wahlster  w   ed      th european conference on artificial intelligence  ecai     pp        john wiley and sons 
vila  l     godo  l          on fuzzy temporal constraint networks  mathware and soft computing 
          
xu  l     choueiry  b  y          a new efficient algorithm for solving the simple temporal problem  in   th intl  symposium on temporal representation and reasoning and fourth intl 
conf  on temporal logic  time ictp     pp         

   

firossi   v enable    yorke  s mith

yorke smith  n   venable  k  b     rossi  f          temporal reasoning with preferences and uncertainty  in gottlob  g     walsh  t   eds      th international joint conference on artificial
intelligence  ijcai     pp            morgan kaufmann 
zadeh  l  a          calculus of fuzzy restrictions  fuzzy sets and their applications to cognitive
and decision processes      

   

fi