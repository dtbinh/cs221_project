journal of artificial intelligence research                  

submitted        published      

an exact double oracle algorithm for zero sum
extensive form games with imperfect information
branislav bosansky

branislav bosansky agents fel cvut cz

agent technology center
department of computer science
faculty of electrical engineering
czech technical university in prague

christopher kiekintveld

cdkiekintveld utep edu

computer science department
university of texas at el paso  usa

viliam lisy
michal pechoucek

viliam lisy agents fel cvut cz
michal pechoucek agents fel cvut cz

agent technology center
department of computer science
faculty of electrical engineering
czech technical university in prague

abstract
developing scalable solution algorithms is one of the central problems in computational
game theory  we present an iterative algorithm for computing an exact nash equilibrium
for two player zero sum extensive form games with imperfect information  our approach
combines two key elements      the compact sequence form representation of extensiveform games and     the algorithmic framework of double oracle methods  the main idea of
our algorithm is to restrict the game by allowing the players to play only selected sequences
of available actions  after solving the restricted game  new sequences are added by finding
best responses to the current solution using fast algorithms 
we experimentally evaluate our algorithm on a set of games inspired by patrolling
scenarios  board  and card games  the results show significant runtime improvements in
games admitting an equilibrium with small support  and substantial improvement in memory use even on games with large support  the improvement in memory use is particularly
important because it allows our algorithm to solve much larger game instances than existing
linear programming methods 
our main contributions include     a generic sequence form double oracle algorithm for
solving zero sum extensive form games      fast methods for maintaining a valid restricted
game model when adding new sequences      a search algorithm and pruning methods for
computing best response sequences      theoretical guarantees about the convergence of
the algorithm to a nash equilibrium      experimental analysis of our algorithm on several
games  including an approximate version of the algorithm 

   introduction
game theory is a widely used methodology for analyzing multi agent systems by applying
formal mathematical models and solution concepts  one focus of computational game theory is the development of scalable algorithms for reasoning about very large games  the
c
    
ai access foundation  all rights reserved 

fibosansky  kiekintveld  lisy    pechoucek

need for continued algorithmic advances is driven by a growing number of applications of
game theory that require solving very large game instances  for example  several decision
support systems have recently been deployed in homeland security domains to recommend
policies based on game theoretic models for placing checkpoints at airports  pita  jain 
western  portway  tambe  ordonez  kraus    parachuri         scheduling federal air
marshals  tsai  rathi  kiekintveld  ordonez    tambe         and patrolling ports  shieh 
an  yang  tambe  baldwin  direnzo  meyer  baldwin  maule    meyer         the capabilities of these systems are based on a large amount of research in fast algorithms for
security games  tambe         another notable example is the algorithmic progress that
has led to game theoretic poker agents that are competitive with highly skilled human
opponents  e g   see zinkevich  bowling    burch        sandholm        
we focus on developing new algorithms for an important general class of games that
includes security games and poker  as well as many other familiar games  more precisely  we
study two player zero sum extensive form games  efgs  with imperfect information  this
class of games captures sequential interactions between two strictly competitive players in
situations where they make decisions under uncertainty  uncertainty can be caused either
by having a stochastic environment or by having opponent actions that are not directly
observable  we consider general models for both sequential interactions and uncertainty 
while many of the fast algorithms that have been developed for poker and security domains
rely on more specific game structure 
we propose a new class of algorithms for finding exact  or approximate  nash equilibrium solutions for the class of efgs with imperfect information  the leading exact
algorithm in the literature uses the compact sequence form representation and linear programming optimization techniques to solve games of this type  koller  megiddo    von
stengel        von stengel         our approach exploits the same compact representation  but we improve the solution methods by adopting the algorithmic framework based
on decompositions known in the computational game theory literature as oracle algorithms
 mcmahan  gordon    blum         oracle algorithms are related to the methods of constraint column generation used for solving large scale optimization problems  dantzig  
wolfe        barnhart  johnson  nemhauser  savelsbergh    vance        and exploit two
characteristics commonly found in games  first  in many cases finding a solution to a
game only requires using a small fraction of the possible strategies  so it is not necessary to
enumerate all of the strategies to find a solution  wilson        koller   megiddo        
second  finding a best response to a specific opponent strategy in a game is computationally
much less expensive than solving for an equilibrium  in addition  best response algorithms
can often make use of domain specific knowledge or heuristics to speed up the calculations
even further 
our sequence form double oracle algorithm integrates the decomposition ideas of oracle
algorithms with the compact sequence form representation for efgs with imperfect information  this results in an iterative algorithm that does not always need to generate the
complete linear program for the game to find a nash equilibrium solution  the main idea
of the algorithm is to create a restricted game in which the players choose from a limited
space of possible strategies  represented as sequences of actions   the algorithm solves
the restricted game and then uses a fast best response algorithm to find strategies in the
original unrestricted game that perform well against the current solution of the restricted
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

game  these strategies are added to the restricted game and the process iterates until no
best response can be found to improve the solution  in this case  the current solution is an
equilibrium of the original game  typically  a solution can be found by adding only a small
fraction of the strategies to the restricted game 
we begin by presenting related work  technical background  and our notation  we then
describe our main algorithm in three parts      methods for creating  solving  and expanding a valid restricted game      the algorithm for finding the best response strategies to be
added to the restricted game  and     variants of the main loop controlling the iterative
process of solving restricted games and adding new strategies  we present a formal analysis
and prove that our algorithm converges to a nash equilibrium of the original game  finally  we provide an experimental evaluation of the runtime performance and convergence
behavior of our algorithm on several realistic games with different characteristics including
a border patrolling scenario  phantom tic tac toe  and a simplified variant of poker  we
compare our results with state of the art algorithms for finding both exact and approximate solutions  linear programming using the sequence form  and counterfactual regret
minimization  cfr  zinkevich  johanson  bowling    piccione        lanctot        
the experimental results confirm that our algorithm requires only a fraction of all possible sequences to solve a game in practice and significantly reduces memory requirements
when solving large games  this advances the state of the art and allows us to exactly solve
much larger games compared to the existing algorithms  moreover  in games admitting
an equilibrium with small support  i e   only a few sequences have non zero probability in
an equilibrium   our algorithm also achieves significant improvements in computation time
and finds an equilibrium after only few iterations  these result hold without using any
domain specific knowledge  but we also show that incorporating domain specific heuristics
and bounds into the algorithm in a straightforward way can lead to even more significant
performance improvements  analysis of the convergence rate shows that the approximative
bounds on the value of the game are either similar or a bit worse during the early stages
compared to cfr  however  the convergence behavior of cfr algorithm has a very long
tail and our algorithm always finds an exact solution much faster than cfr 

   related work
solving imperfect information efgs is a computationally challenging task  primarily due
to uncertainty about the actions of the opponent and or a stochastic environment  the
leading exact algorithm  koller et al         von stengel        is based on formulating the
problem of finding an optimal strategy to play as a linear program  this algorithm exploits
a compact representation of strategies as sequences of individual actions  called the sequence
form  and results in a linear program of linear size in the size of the game tree  however 
this approach has limited applicability since the game tree grows exponentially with the
number of sequential actions in the game  a common practice for overcoming the limited
scalability of sequence form linear programming is to use an approximation method  the
best known approximative algorithms include counterfactual regret minimization  cfr 
zinkevich et al          improved versions of cfr with sampling methods  lanctot  waugh 
zinkevich    bowling        gibson  lanctot  burch  szafron    bowling         nesterovs
excessive gap technique  egt  hoda  gilpin  pena    sandholm         and variants of
   

fibosansky  kiekintveld  lisy    pechoucek

monte carlo tree search  mcts  algorithms applied to imperfect information games  e g  
see ponsen  de jong    lanctot        
the family of counterfactual regret minimization algorithms is based on learning methods that can be informally described as follows  the algorithm repeatedly traverses the
game tree and learns a strategy to play by applying a no regret learning rule that minimizes a specific variant of regret  counterfactual regret  in each information set  the
no regret learning converges to an optimal strategy in each information set  the overall
regret is bounded by the sum of the regret in each information set  hence  the strategy
as a whole converges to a nash equilibrium  the main benefits of this approach include
simplicity and robustness  as it can be adapted for more generic games  e g   see lanctot 
gibson  burch  zinkevich    bowling        where cfr is applied on games with imperfect
recall   however  the algorithm operates on the complete game tree and therefore requires
convergence in all information sets  which can be very slow for large games when one desires
a solution with small error 
another popular method is excessive gap technique that exploits the convex properties
of the sequence form representation and uses recent mathematical results on finding extreme
points of smooth functions  see hoda et al         for the details   the main idea is to approximate the problem of finding a pair of equilibrium strategies by two smoothed functions
and guiding them to find an approximate solution  although this approach achieves faster
convergence in comparison with cfr  the algorithm is less robust  it is not known whether
a similar approach can be used for more general classes of games  and less used in practice 
like cfr  egt also operates in the complete strategy space of all sequences 
monte carlo tree search  mcts  is another family of methods that has shown promise
for solving very large games  in particular perfect information board games such as go  e g  
lee et al          while the cfr and egt algorithms are guaranteed to find an  nash
equilibrium  convergence to an equilibrium solution has not been formally shown for any of
the variants of mcts in imperfect information games  on the contrary  the most common
version of mcts based on the upper confidence bounds  ucb  selection function can
converge to incorrect solutions even in simultaneous move games  shafiei  sturtevant   
schaeffer        that are the simplest class of imperfect information efgs  mcts algorithms therefore do not  in general  guarantee finding an  approximate  optimal solution in
imperfect information games  one exception is the recent proof of convergence of mcts
with certain selection methods for simultaneous move games  lisy  kovarik  lanctot   
bosansky         still  using mcts is sometimes a reasonable choice since it can produce
good strategies in practice  ponsen et al         
contrary to the existing approximative approaches  our algorithm aims to find an exact solution without explicitly considering the strategy in the complete game tree  our
work combines the compact sequence form representation and the double oracle algorithmic framework  previous work on the double oracle framework has focused primarily on
applications in normal form games  where the restricted game was expanded by adding pure
best response strategies in each iteration  one of the first examples of solving games using
the double oracle principle was by mcmahan et al          they introduced the doubleoracle algorithm  proved the convergence to a nash equilibrium  and experimentally verified
that the algorithm achieves computation time improvements on a search game where an
evader was trying to cross an environment without being detected by sensors placed by the
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

opponent  the double oracle algorithm reduced the computation time from several hours
to tens of seconds and allowed to solve much larger instances of this game  similar success
with the domain specific double oracle methods has been demonstrated on a variety of different domains inspired by pursuit evasion games  halvorson  conitzer    parr        and
security games played on a graph  jain  korzhyk  vanek  conitzer  tambe    pechoucek 
      letchford   vorobeychik        jain  conitzer    tambe        
only a few works have tried to apply the iterative framework of oracle algorithms to
efgs  primarily using pure and mixed strategies in efgs  the first work that exploited this
iterative principle is the predecessor of the sequence form linear program formulation  koller
  megiddo         in this algorithm  the authors use a representation similar to the sequence form only for a single player  while the strategies for the opponent are iteratively
added as constraints into the linear program  there is an exponential number of constraints
in their formulation   this approach can be seen as a specific variant of the oracle algorithms  where the strategy space is expanded gradually for a single player  our algorithm
is a generalization of this work  since our algorithm uses the sequence form representation
for both players and it also incrementally expands the strategy space for both players 
more recent work has been done by mcmahan in his thesis  mcmahan        and followup work  mcmahan   gordon         in these works the authors investigated an extension
of the double oracle algorithm for normal form games to the extensive form case  their
double oracle algorithm for efgs operates very similarly to the normal form variant and
uses pure and mixed strategies defined for efgs  the main disadvantage of this approach
is that in the basic version it still requires a large amount of memory since a pure strategy
for an efg is large  one action needs to be specified for each information set   and there
is an exponential number of possible pure strategies  to overcome this disadvantage  the
authors propose a modification of the double oracle algorithm that keeps the number of the
strategies in the restricted game bounded  the algorithm removes from the restricted game
those strategies that are the least used in the current solution of the restricted game  in
order to guarantee the convergence  the algorithm adds in each iteration into the restricted
game a mixed strategy representing the mean of all removed strategies  convergence is then
guaranteed similarly to fictitious play  see mcmahan   gordon        for the details  
bounding the size of the restricted game results in low memory requirements  however  the
algorithm converges extremely slowly and it can take a very long time  several hours for a
small game  for the algorithm to achieve a small error  see the experimental evaluation in
mcmahan        mcmahan   gordon        
a similar concept for using pure strategies in efgs is used in an iterative algorithm
designed for poker in the work of zinkevich et al          the algorithm in this work
expands the restricted game with strategies found by a generalized best response instead of
using pure best response strategies  generalized best response is a nash equilibrium in a
partially restricted game  the player computing the best response can use any of the pure
strategies in the original unrestricted game  while the opponent is restricted to use only the
strategies from the restricted game  however  the main disadvantages of using pure and
mixed strategies in efgs are still present and result in large memory requirements and an
exponential number of iterations 
in contrast  our algorithm directly uses the compact sequence form representation of
efgs and uses the sequences as the building blocks  i e   the restricted game is expanded
   

fibosansky  kiekintveld  lisy    pechoucek

by allowing new sequences to be played in the next iteration   using sequences and the
sequence form for solving the restricted game reduces the size of the restricted game and
the number of iterations  however  it also introduces new challenges when constructing and
maintaining the restricted game  and ensuring the convergence to a nash equilibrium  which
we must solve for our algorithm to converge to a correct solution 

   technical background
we begin by presenting the standard game theoretic model of extensive form games  followed by a discussion of the most common solution concepts and the algorithms for computing these solutions  then we present the sequence form representation and the state of theart linear program for computing solutions using this representation  finally  we describe
oracle algorithms as they are used for solving normal form games  a summary of the most
common notation is provided in table   for quick reference 
    extensive form games
extensive form games  efgs  model sequential interactions between players in a game 
games in the extensive form are visually represented as game trees  e g   see figure    
nodes in the game tree represent states of the game  each state of the game corresponds to
a sequence of moves executed by all players in the game  each node is assigned to a player
that acts in the game state associated with this node  an edge in the game tree from a
node corresponds to an action that can be performed by the player who acts in this node 
extensive form games model limited observations of the players by grouping the nodes into
information sets  so that a given player cannot distinguish between nodes that belong to
the same information set when the player is choosing an action  the model also represents
uncertainty about the environment and stochastic events by using a special nature player 
formally  a two player efg is defined as a tuple g    n  h  z  a  p  u  c  i   n is a set
of two players n           we use i to refer to one of the two players  either   or     and i
to refer to the opponent of i  h denotes a finite set of nodes in the game tree  each node
corresponds to a unique history of actions taken by all players and nature from the root of
the game  hence  we use the terms history and node interchangeably  we denote by z  h
the set of all terminal nodes of the game  a denotes the set of all actions and we overload
the notation and use a h   a to represent the set of actions available to the player acting
in node h  h  we specify ha   h   h to be node h  reached from node h by executing
action a  a h   we say that h is a prefix of h  and denote it by h v h    for each terminal
node z  z we define a utility function for each player i  ui   z  r   we study zero sum
games  so ui  z    ui  z  holds for all z  z 
the function p   h  n   c  assigns each node to a player who takes an action in the
node  where c means that the nature player selects an action in the node based on a fixed
probability distribution known to all players  we use function c   h         to denote
the probability of reaching node h due to nature  i e   assuming that both players play all
required actions to reach node h   the value of c h  is the product of the probabilities
assigned to all actions taken by the nature player in history h  imperfect observation of
player i is modeled via information sets ii that form a partition over the nodes assigned
to player i  h  h   p h    i   every information set contains at least one node and each
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

node belongs to exactly one information set  nodes in an information set of a player are
indistinguishable to the player  all nodes h in a single information set ii  ii have the
same set of possible actions a h   action a from a h  uniquely identifies information set
ii and there cannot exist any other node h   h that does not belong to information set
ii and for which a is allowed to be played  i e   a  a h      therefore we overload notation
and use a ii   to denote the set of actions defined for each node h in this information set 
we assume perfect recall  which means that players perfectly remember their own actions
and all information gained during the course of the game  as a result  all nodes in any
information set ii have the same history of actions for player i 
    nash equilibrium in extensive form games
solving a game requires finding a strategy profile  i e   one strategy for each player  that
satisfies conditions defined by a specific solution concept  nash equilibrium  ne  is the
best known solution concept in game theory and it describes the behavior of players under
certain assumptions about their rationality  in a nash equilibrium  every player plays a
best response to the strategies of the other players  let i be the set of pure strategies for
player i  in efgs  a pure strategy is an assignment of exactly one action to be played in
each information set  a mixed strategy is a probability distribution over the set of all pure
strategies of a player  we denote by i the set of all mixed strategies of player i  for any
pair of strategies               we use ui      ui  i   i   for the expected outcome
of the game for player i when players follow strategies   a best response of player i to
the opponents strategy i is a strategy ibr   for which ui  ibr   i    ui  i    i   for all
strategies i   i   a strategy profile             is a ne if and only if for each player i
it holds that i is a best response to i   a game can have multiple nes  in the zero sum
setting  all of these equilibria have the same value  i e   the expected utility for every player
is the same   this is called the value of the game  denoted v    the problem of finding a
ne in a zero sum game has a polynomial computational complexity in the size of the game 
the ne solution concept is somewhat weak for extensive form games  nash equilibrium
requires that both players act rationally  however  there can be irrational strategies selected
for the parts of the game tree that are not reachable when both players follow the ne
strategies  these parts are said to be off the equilibrium path   the reason is that ne does
not expect this part of the game to be played and therefore does not sufficiently restrict
strategies in these information sets  to overcome these drawbacks  a number of refinements
of ne have been introduced imposing further restrictions with the intention of describing
more sensible strategies  examples include subgame perfect equilibrium  selten        used
in perfect information efgs  the subgame perfect equilibrium forces the strategy profile
to be a nash equilibrium in each sub game  i e   in each sub tree rooted in some node h 
of the original game  unfortunately  sub games are not particularly useful in imperfectinformation efgs  hence  here the refinements include strategic from perfect equilibrium
 selten         sequential equilibrium  kreps   wilson         or quasi perfect equilibrium
 van damme        miltersen   srensen         the first refinement avoids using weakly
dominated strategies in equilibrium strategies for two player games  van damme       
p      and it is also known as the undominated equilibrium  sequential equilibrium tries
to exploit the mistakes of the opponent by using the notion of beliefs consistent with the
   

fibosansky  kiekintveld  lisy    pechoucek

strategy of the opponent even in information sets off the equilibrium path  the main
intuitions behind the first two refinements are combined in quasi perfect equilibrium 
even though the solution described by ne does not always prescribe rational strategies
off the equilibrium path  it is still valuable to compute exact ne of large extensive form
games for several reasons  we focus on zero sum games  so the ne strategy guarantees
the value of the game even off the equilibrium path  in other words  the strategy off
the equilibrium path does not optimally exploit the mistakes of the opponent  but it still
guarantees an outcome of at least value gained by following the equilibrium path  moreover 
a refined equilibrium is still a ne and calculating the value of the game is often a starting
point for many of the algorithms that compute these refinements  for example it is used
for computing undominated equilibrium  e g   see ganzfried   sandholm        cermak 
bosansky    lisy        and normal form proper equilibrium  miltersen   srensen        
    sequence form linear program
extensive form games with perfect recall can be compactly represented using the sequence
form  koller et al         von stengel         a sequence i is an ordered list of actions taken
by a single player i in a history h  the number of actions  i e   the length of sequence i  
is denoted by  i   and the empty sequence  i e   sequence with no actions  is denoted by  
the set of all possible sequences for player i is denoted by i and the set of sequences for all
players is           a sequence i  i can be extended by a single action a taken by
player i  denoted by i a   i   we use i v i  to denote that i is a prefix of i     in games
with perfect recall  all nodes in an information set ii share the same sequence of actions
for player i and we use seqi  ii   to denote this sequence  we overload the notation and use
seqi  h  to denote the
i leading to node h  and seqi  h      i  
s sequence of  actions of player
 
 
where seqi  h     h  h   seqi  h   for some h  h  since action a uniquely identifies
information set ii and all nodes in an information set share the same history of actions of
player i  each sequence uniquely identifies an information set  we use the function infi  i   
to denote the information set in which the last action of the sequence i  is taken  for an
empty sequence  function infi    is the information set of the root node 
finally  we define the auxiliary payoff function gi     r that extends the utility
function to all nodes in the game tree  the payoff function gi represents the expected
utility of all nodes reachable by sequentially executing the actions specified in a pair of
sequences  
x
gi  i   i    
ui  h   c h 
   
hz   jn j  seqj  h 

the value of the payoff function is defined to be   if no leaf is reachable by sequentially executing all of the actions in the sequences   either all actions from the pair of sequences 
are executed and an inner node  h  h   z  is reached  or during the sequential execution of the actions node h is reached  for which the current action a to be executed from
sequence  h  is not defined  i e   a 
  a h    formally we define a pair of sequences  to
be compatible if there exists node h  h such that sequence i of every player i equals to
seqi  h  
we can compute a nash equilibrium of a two player zero sum extensive form game
using a linear program  lp  of a polynomial size in the size of the game tree using the
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

sequence form  koller et al         von stengel         the lp uses an equivalent compact
representation of mixed strategies of players in a form of realization plans  a realization
plan for a sequence i is the probability that player i will play this sequence of actions
under the assumption that the opponent will choose compatible sequences of actions that
reach the information sets for which the actions specified in the sequence i are defined  we
denote the realization plan for player i by ri   i  r  the equilibrium realization plans
can be computed using the following lp  e g   see shoham   leyton brown        p       

vinfi  i   

x

max vinfi   
r v
x
 
vii

gi  i   i    ri  i  

  i  seq  i     
ii
i
i
i i

i  i

i i

ri       
x

   
   

ri  i a    ri  i  

ii  ii   i   seqi  ii  

   

i  i

   

aa ii  

ri  i     

solving the lp yields a realization plan for player i using variables ri   and expected values
for the information sets of player i  variables vii    the lp works as follows  player i
maximizes the expected utility value by selecting the values for the variables of realization plan that is constrained by equations       the probability of playing the empty
sequence is defined to be    equation     and the probability of playing a sequence i is
equal to the sum of the probabilities of playing sequences extended by exactly one action
 equation     finding such a realization plan is also constrained by the best responding
opponent  player i  this is ensured by equation      where player i selects in each
information set ii such action that minimizes the expected utility value vii in this information set  there is one constraint defined for each sequence i   where the last action of
this sequence determines the best action to be played in information set infi  i     ii  
the expected utility is composed of the expected utilities of the information sets reachable
after playing sequence i  sum of v variables on the left side  and of the expected utilities
of leafs to which this sequence leads  sum of g values on the right side of the constraint  
    double oracle algorithm for normal form games
we now describe the concept of column constraint generation techniques applied previously
in normal form games and known as the double oracle algorithm  mcmahan et al         
normal form games are represented using game matrices  rows of the matrix correspond
to pure strategies of one player  columns correspond to pure strategies of the opponent 
and values in the matrix cells represent the expected outcome of the game when players
play corresponding pure strategies  zero sum normal form games can be solved by linear
programming in polynomial time in the size of the matrix  e g   see shoham   leytonbrown        p      
figure   shows the visualization of the main structure of the double oracle algorithm for
normal form games  the algorithm consists of the following three steps that repeat until
convergence 
   

fibosansky  kiekintveld  lisy    pechoucek

figure    schematic of the double oracle algorithm for a normal form game 
   create a restricted game by limiting the set of pure strategies that each player is
allowed to play
   compute a pair of nash equilibrium strategies in this restricted game using the lp for
solving normal form games
   for each player  compute a pure best response strategy against the equilibrium strategy
of the opponent found in the previous step  the best response may be any pure strategy
in the original unrestricted game
the best response strategies computed in step   are added to the restricted game  the game
matrix is expanded by adding new rows and columns  and the algorithm continues with the
next iteration  the algorithm terminates if neither of the players can improve the outcome
of the game by adding a new strategy to the restricted game  in this case both players
play a best response to the strategy of the opponent in the original unrestricted game 
the algorithm maintains the values of the expected utilities of the best response strategies
throughout the iterations of the algorithm  these values provide bounds on the value of
the original unrestricted game v   from the perspective of player i  the minimal value
of all of her past best response calculations represents an upper bound of the value of the
original game  viu b   and the maximal value of all of past best response calculations of the
opponent represents the lower bound on the value of the original game  vilb   note that for
the bounds it holds that the lower bound for player i is equal to the negative of the value
of the upper bound for the opponent 
ub
vilb   vi

in general  computing best responses is computationally less demanding than solving the
game  since the problem is reduced to a single player optimization  due to the fact that bestresponse algorithms can operate very quickly  e g   also by exploiting additional domainspecific knowledge   they are called oracles in this context  if the algorithm incrementally
adds strategies only for one player  the algorithm is called a single oracle algorithm  if
the algorithm incrementally adds the strategies for both players  the algorithm is called a
double oracle algorithm  double oracle algorithms are typically initialized by an arbitrary
pair of strategies  one pure strategy for each player   however  we can also use a larger set
of initial strategies selected based on a domain specific knowledge 
the double oracle algorithm for zero sum normal form games runs in a polynomial time
in the size of the game matrix  since each iteration adds at least one pure strategy to
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

figure    example of a two player extensive form game visualized as a game tree  circle
player aims to maximize the utility value  box aims to minimize the utility value  the bold
edges represent the sequences of actions added to the restricted game 
the restricted game and there are finite pure strategies  the algorithm stops after at most
 i      i   iterations  each iteration is also polynomial  since it consists of solving the
linear program and computing best responses  the relative performance of the doubleoracle algorithm compared to solving the linear program for the original unrestricted game
closely depends on the number of iterations required for convergence  in the worst case  the
algorithm adds all pure strategies and solves the original game  although this is rarely the
case in practice  estimating the expected number of iterations needed for the double oracle
algorithm to converge  however  remains an open problem 
      towards extensive form games
the straightforward method of applying the double oracle algorithm for efgs is to use pure
strategies defined in efgs  i e   assignments of action for each information set  or realization
plans  and apply exactly the algorithm described in this section  i e   iteratively add
pure strategies from the unrestricted extensive form game into the restricted game matrix 
however  this can result in an exponential number of iterations and an exponentially large
restricted game in the worst case  our algorithm differs significantly from this idea since it
directly operates on  more compact  sequences instead of full strategies 

   sequence form double oracle algorithm for extensive form games
we now describe our sequence form double oracle algorithm for solving extensive form
games with imperfect information  first  we give an informal overview of our algorithm 
we use an example game depicted in figure   to illustrate some of the key concepts  afterwards  we formally define the restricted game and describe the key components of the
algorithm  following by a full example run of our algorithm 
the overall scheme of our algorithm is based on the double oracle framework described in
the previous section  the main difference is that our algorithm uses the sequences to define
the restrictions in the game tree  the restricted game in our model is defined by allowing
players to use  i e   to play with non zero probability  only a subset of the sequences from
the original unrestricted game  this restricted subset of sequences defines the subsets of
reachable actions  nodes  and information sets from the original game tree  consider our example in figure    a restricted game can be defined by sequences   a  ac  ad for the circle
player  and   x for the box player  these sequences represent actions allowed in the game 
   

fibosansky  kiekintveld  lisy    pechoucek

they define reachable nodes  using history we can reference them as   a  ax  axc  axd  
and reachable information sets  i    i  for the circle player and the only information set i
for the box player  
the algorithm iteratively adds new sequences of allowed actions into the restricted
game  similarly to the double oracle algorithm for normal form games  the restricted game
is solved as a standard zero sum extensive form game using the sequence form linear program  then a best response algorithm searches the original unrestricted game to find new
sequences to add to the restricted game  when the sequences are added  the restricted
game tree is expanded by adding all new actions  nodes  and information sets that are now
reachable based on the new sets of allowed sequences  the process of solving the restricted
game and adding new sequences iterates until no new sequences that improve the solution
can be added 
there are two primary complications that arise when we use sequences instead of full
strategies in the double oracle algorithm  both due to the fact that sequences do not necessarily define actions in all information sets      a strategy computed in the restricted game
may not be a complete strategy in the original game  because it does not define behavior
for information sets that are not in the restricted game  and     it may not be possible to
play every action from a sequence that is allowed in the restricted game  because playing
a sequence can depend on having a compatible sequence of actions for the opponent  in
our example game tree in figure    no strategy of the circle player in the restricted game
specifies what to play in information sets i  and i    the consequence of the second issue
is that some inner nodes of the original unrestricted game can  temporarily  become leafs
in the restricted game  for example  the box player can add sequence y into the restricted
game making node ay a leaf in the restricted game  since there are no other actions of the
circle player in the restricted game applicable in this node 
our algorithm solves these complications using two novel ideas  the first idea is the
concept of a default pure strategy  denoted idef  i    informally speaking  the algorithm
assumes that each player has a fixed implicit behavior that defines what the player does by
default in any information set that is not part of the restricted game  this is described by
the default strategy idef   which specifies an action for every information set  note that this
default strategy does not need to be represented explicitly  which could use a large amount
of memory   instead  it can be defined implicitly using rules  such as selecting the first action
from a deterministic method for generating the ordered set of actions a h  in node h  we
use the default pure strategies to map every strategy from the restricted game into a valid
strategy in the full game  specifically  the strategy in the original unrestricted game selects
actions according to the probabilities specified by a strategy for the restricted game in
every information set that is part of the restricted game  and for all other information sets
it plays according to the default pure strategy  recall our example in figure    where the
pure default strategy for the circle player can be ha  c  e  gi  i e   selecting the leftmost
action in each information set   hence  a strategy in the original unrestricted game can use
a strategy from the restricted game in information sets i  and i    and select pure actions
in e  g in information sets i  and i  respectively 
the second key idea is to use temporary utility values for cases where there are no
allowed actions that can be played in some node in the restricted game that is an inner
node in the original game  so called temporary leaf    to ensure the correct convergence of
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

h
zh
idef
ri   i   r
c   h   r
gi   h   r
seqi
infi   i   ii

game tree nodes   histories
leafs   terminal states
implicit default pure strategy for player i
realization plan of player i for a sequence
probability of reaching a node due to nature play
extension of the utility function to all nodes 
gi  h    ui  h   c h  if h  z and gi  h      if h is not a terminal node  h 
  z 
sequence s  of actions of player i leading to a node   a set of nodes  
  an information set
an information set in which the last action of the sequence was executed

table    an outline of the main symbols used in the paper 

the algorithm these temporary utilities must be assigned so that they provide a bound on
the expected value gained by continuing the play from the given node  our algorithm uses
a value that corresponds to the expected outcome of continuing the game play  assuming
the player making the choice in the temporary leaf uses the default strategy  while the
opponent plays a best response  assume we add sequence y for the box player into the
restricted game in our example tree in figure    the temporary utility value for node ay
would correspond to value    since the default strategy in information set i  is to play e
for the circle player  in the next section we formally describe this method and prove the
correctness of the algorithm given these temporary values 
we now describe in detail the key parts of our method  we first formally define the
restricted game and methods for expanding the restricted game  including the details of
both of the key ideas introduced above  then we describe the algorithm for selecting the
new sequences that are allowed in the next iteration  the decision of which sequences to add
is based on calculating a best response in the original unrestricted game using game tree
search improved with additional pruning techniques  finally  we discuss different variations
of the main logic of the double oracle algorithm that determines for which player s  the
algorithm adds new best response sequences in the current iteration 
    restricted game
this section formally defines the restricted game as a subset of the original unrestricted
game  a restricted game can be fully specified by the set of allowed sequences  we define
the sets of nodes  actions  and information sets as subsets of the original unrestricted sets
based on the allowed sequences  we denote the original unrestricted game by a tuple
g    n  h  z  a  p  u  c  i  and the restricted game by g     n  h     z     a    p  u    c  i      all
sets and functions associated with the restricted game use prime in the notation  the set of
players  and the functions p and c remain the same 
the restricted game is defined by a set of allowed sequences  denoted by      that
are returned by the best response algorithms  as indicated above  even an allowed sequence
i    might not be playable to the full length due to missing compatible sequences of the
opponent  therefore  the restricted game is defined using the maximal compatible set of
sequences      for a given set of allowed sequences     we define   as the maximal
   

fibosansky  kiekintveld  lisy    pechoucek

subset of the sequences from   such that 
 i   i   i   i   i h  h j  n seqj  h    j  

i  n

   

equation     means that for each player i and every sequence i in  i   there exists a
compatible sequence of the opponent i that allows the sequence i to be executed in full
 i e   by sequentially executing of all the actions in these sequences  some node h can be
reached such that seqj  h    j for all players j  n   
the set of sequences   fully defines the restricted game  because all other sets in the
tuple g  can be derived from     a node h is in the restricted game if and only if the
sequences that must be played to reach h are in the set   for both players 
h     h  h   i  n seqi  h      

   

if a pair of sequences is in     then all nodes reachable by executing this pair of sequences
are included in h     actions defined for a node h are in the restricted game if and only if
playing the action in this node leads to a node that is in the restricted game 
a   h    a  a h    ha  h    

h  h  

   

nodes from the restricted game corresponding to inner nodes in the original unrestricted
game may not be inner nodes in the restricted game  therefore  the set of leaves in the
restricted game is a union of leaf nodes of the original game and inner nodes from the
original game that currently do not have a valid continuation in the restricted game  based
on the allowed sequences 

z    z  h     h  h     z   a   h     
   
we explicitly differentiate between leaves in the restricted game that correspond to leaves in
the original unrestricted game  i e   z   z  and leaves in the restricted game that correspond
to inner nodes in the original unrestricted game  i e   z     z   since the algorithm assigns
temporary utility values to nodes in the latter case 
the information sets in the restricted game correspond to information sets in the original
unrestricted game  if some node h belongs to an information set ip h  in the original game 
then the same holds in the restricted game  we define an information set to be a part of
the restricted game if and only if at least one inner node that belongs to this information
set is included in the restricted game 
ii    ii  ii   h  ii h  h     z    

    

an information set in the restricted game ii  ii  consists only of nodes that are in the
restricted game  i e   h  ii   h  h    
finally  we define the modified utility function u  for the restricted game  the primary
reason for the modified utility function is to define the temporary utility values for leaves in
the set z    z  consider h  z    z to be a temporary leaf and player i to be the player acting
in this node  i   p h    moreover  let ui  h  be the expected outcome of the game starting
from this node assuming both players are playing ne strategies in the original unrestricted
game  the modified utility function u i for this leaf must return a value that is a lower bound
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

on value ui  h   due to the zero sum assumption  this value represents an upper bound on
value for the opponent i  setting the value this way ensures two things      player i is
likely to use sequences leading to node h in optimal strategies in the restricted game  since
the modified utility value is an upper bound of an actual value   and     player i adds new
sequences using best response algorithms that prolong sequence seqi  h  leading to node h
if there are sequences that would yield better expected value than u i   later we show a
counterexample where setting the value otherwise can cause the algorithm to converge to
an incorrect solution  we calculate the lower bound by setting the utility value so that it
corresponds to the outcome in the original game if the player i continues by playing the
br to this default strategy 
default strategy idef and the opponent plays a best response i
this is a valid lower bound since we consider only a single strategy for the player acting in
node h  which correspond to the default strategy  considering other strategies could allow
this player to improve the value of continuing from the node h  for all other leaf nodes
h  z    z we set u i  h   ui  h  
      solving the restricted game
the restricted game defined in this section is a valid zero sum extensive form game and
it can be solved using the sequence form linear programming described in section    the
algorithm computes a ne of the restricted game by solving a pair of linear programs using
the restricted sets     h     z     i     and the modified utility function u   
each strategy from the restricted game can be translated to the original game by using
the pure default strategy to extend the restricted strategy where it is not defined  formally 
if ri  is a mixed strategy represented as a realization plan of player i in the restricted
game  then we define the extended strategy r i to be a strategy identical to the strategy in
the restricted game for sequences included in the restricted game  and correspond to the
default strategy idef if a sequence is not included in the restricted game 
 
ri   i  
i   i
r i  i   
    
ri   i     idef  i   i    i 
   i   i    arg maxi    i   i   vi  i    
the realization plan of a sequence i not allowed in the restricted game  i e   i 
   i  
is equal to the realization probability of the longest prefix of the sequence allowed in the
restricted game  denoted by i     and setting the remaining part of the sequence  i e   i   i   
to correspond to the default strategy of player i  this computation is expressed as a
multiplication of two probabilities  where we overload the notation and use idef  i   i    to
be   if the remaining part of the sequence i corresponds to the default strategy of player i 
and   otherwise 
in each iteration of the double oracle algorithm one sequence form lp is solved for each
player to compute a pair of ne strategies in the restricted game  we denote these strategies
   and  r    r    when they are extended to the original unrestricted game using
as  ri   ri
i i
the default strategies 
      expanding the restricted game
the restricted game is expanded by adding new sequences to the set   and updating the
remaining sets according to their definition  after adding new sequences  the algorithm
   

fibosansky  kiekintveld  lisy    pechoucek

calculates and stores the temporary utility values for leaves in z     z so they can be used
in the sequence form lp 
after updating the restricted game  the linear programs are modified so that they correspond to the new restricted game  for all newly added information sets and sequences 
new variables are created in the linear programs and the constraints corresponding to these
information sets sequences are created  equations   and     moreover  some of the constraints already existing in the linear program need to be updated  if a sequence i is
added to the set  i and the immediate prefix sequence  i e   sequence i  v i such that
 i           i    was already a part of the restricted game  then we need to update the
constraint for information sets ii for which i    seqi  ii   to ensure the consistency of the
strategies  equation     and the constraint corresponding to sequence i   equation     in
addition  the algorithm updates equations     assigned to sequences of the opponent i
for which g i   i         finally  the algorithm updates all constraints that previously used
utilities for temporary leaf nodes that are no longer leaf nodes in the restricted game after
adding the new sequences 
new sequences for each player are found using the best response sequence  brs  algorithms described in section      from the perspective of the sequence form double oracle
algorithm  the brs algorithm calculates a pure best response for player i against a fixed
strategy of the opponent in the original unrestricted game  this pure best response specifies
an action to play in each information set that is currently reachable given the opponents
extended strategy ri   the best response can be formally defined as a pure realization
plan ribr that assigns only integer values   or   to the sequences  this realization plan
is not necessarily a pure strategy in the original unrestricted game because there may not
be an action specified for every information set  specifically  there is no action specified
for information sets that are not reachable     due to choices of player i  and     due to
zero probability in the realization plan of the opponent ri   omitting these actions does
not affect the value of the best response because these information sets are never reached 
hence  for ribr it holds that r i  i ui  ribr   ri    ui  r i   ri   and there exists a pure best
response strategy ibr  i such that ui  ribr   ri     ui  ibr   ri    the sequences that are
used in the best response pure realization plan with probability   are returned by brs
algorithm and we call these the best response sequences 
 i  i   ribr  i       

    

      example run of the algorithm
we now demonstrate the sequence form double oracle algorithm on an example game depicted in figure  a  in our example  there are two players  circle and box  circle aims to
maximize the utility value in the leafs  box aims to minimize the utility value  we assume
that choosing the leftmost action in each information set is the default strategy for both
players in this game 
the algorithm starts with an empty set of allowed sequences in the restricted game
     hence  the algorithm sets the current pair of  ri   ri   strategies to be equivalent to
def    next  the algorithm adds new sequences that correspond to the best response
 idef   i
to the default strategy of the opponent  in our example the best response sequences for
the circle player are    a  ad   and    y  for the box player  these sequences are added
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

 a  step  

 b  step  

 d  step  

 c  step  

 e  step  

figure    example of the steps of the sequence form double oracle algorithm in a two player
zero sum game  where circle player aims to maximize the utility value  box aims to minimize
the utility value  bold edges correspond to the sequences of actions added into the restricted
game  the dashed boxes indicate the information sets 
to the set of allowed sequences     next  the set of sequences of the restricted game   is
updated  the maximal compatible set of sequences from set   cannot contain sequence
ad because the compatible sequence of the box player  i e   x in this case  is not allowed
in the restricted game yet and sequence ad cannot be fully executed  moreover  by adding
sequences a and y  the restricted game will contain node ay for which actions e and f
are defined in the original unrestricted game  however  there is no continuation in the
current restricted game yet  hence  this node is a temporary leaf  belongs to z     z  and
the algorithm needs to define a new value for a modified utility function u  for this node 
the value u   ay  is equal to   and corresponds to the outcome of the game if the circle
player continues by playing the default strategy and the box player plays the best response 
to complete the first step of the algorithm we summarize the nodes and information sets
included in the restricted game  h   contains   nodes  the root  the node after playing an
action a and the node ay   and two information sets  the information set for node ay is
not added into the restricted game  because this node is now a leaf in the restricted game  
playing the sequences a and y with probability   is the nash equilibrium of the restricted
game  the situation is depicted in figure  b  the sequences in   are shown as bold edges 
the algorithm proceeds further and the complete list of steps of the algorithm is summarized in table    in the second iteration  new sequences b and bh are added into the
restricted game  the box player does not add new sequences in this iteration because y is
the best response to the extended equilibrium strategy of the circle player  i e   playing
sequences a  ac  ae with probability    ne in the updated restricted game changes to
playing sequences b  bh and sequence y  all with probability    in the third iteration the
situation changes and the box player adds sequence x  while there are no new sequences
   

fibosansky  kiekintveld  lisy    pechoucek

added for the circle player  after adding sequence x  sequence ad also becomes a part of
the set   as it can now be fully executed due to adding the compatible sequence x  ne in
the restricted game is now fully mixed  the sequences starting with a and with b are played
in a ratio of        x and y in a ratio of        in the fourth iteration  the algorithm adds
sequence af to the restricted game  the best response for the circle player   which removes
the assigned value u   ay  since the node no longer belongs to set z     the algorithm stops
after four iterations  no other sequences are added into the restricted game  the solution of
   can be translated to the solution in the original unrestricted
the restricted game  ri   ri


game  and  ri   ri   is nash equilibrium of the original game 
iteration
  
  
  
  

br
r
  a  ad
  b  bh
  b  bh
  a  af

br
r
  y
  y
  x
  y

 
  a
  a  b  bh
  a  ad  b  bh
  a  ad  af  b  bh

 
  y
  y
  y  x
  y  x

table    steps of the sequence form double oracle algorithm applied to the example 
consider now a small modification of the example game where there is a utility value
of   in the leaf following action f  i e   node ayf    in this case  the algorithm does not
need to add sequence af  nor ae  to the restricted game because it does not improve
the value of the restricted game  note that this modified example game shows why the
algorithm needs to set the utility values for nodes in z     z  if the algorithm simply uses
the unmodified utility function  then the node ay will be treated as if it had zero utility
value  this value overestimates the outcome of any actual continuation following this node
in the original game for the circle player and since sequences ae or af will never be a
part of the best response for the circle player  the algorithm can converge to an incorrect
solution 
    best response sequence algorithm
the purpose of the best response sequence  brs  algorithm is to generate new sequences
that will be added to the restricted game in the next iteration  or to prove that there is
no best response with better expected value that uses sequences currently not allowed in
the restricted game  throughout this section we use the term searching player to represent
the player for whom the algorithm computes the best response sequences  we refer to this
player as i 
the brs algorithm calculates the expected value of a pure best response to the opponents strategy ri   the algorithm returns both the set of best response sequences as well
as the expected value of the strategy against the extended strategy of the opponent 
the algorithm is based on a depth first search that traverses the original unrestricted
game tree  the behavior of the opponent i is fixed to the strategy given by the extended
realization plan ri   to save computation time  the best response algorithms use branch
and bound during the search for best response sequences  the algorithm uses a bound on
the expected value for each inner node  denoted by   this bound represents the minimal
utility value that the node currently being evaluated needs to gain in order to be a part
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

require  i   searching player  h   current node  iik   current information set  r i   opponents
strategy  min maxutility   bounds on utility values     lower bound for a node h
   w  r i  seqi  h    c h 
   if h  z then
  
return ui  h   w
   else if h  z     z then
  
return u i  h   w
   end if

   sort a  a h  based on probability wa  r  i seqi  ha   c ha 
   v h   
   for a  a h  
 wa     do

   
     v h    w  wa    maxutility
   
if    wa maxutility then
   
v    brsi  ha     
   
if v      then
   
return 
   
end if
   
vh  vh   v 
   
w  w  wa
   
else
   
return 
   
end if
    end for
    return v h

figure    brsi in the nodes of other players 

of a best response sequence  using this bound during the search  the algorithm is able to
prune branches that will certainly not be part of any best response sequence  the bound 
is set to minutility for the root node 
we distinguish   cases in the search algorithm  either the algorithm is evaluating an
information set  or more specifically a node h  assigned to the searching player i  or the
node is assigned to one of the other players  either to the opponent  player i  or it is a
chance node   the pseudocode for these two cases is depicted in figures   and   
      nodes of the opponent
we first describe the case used when the algorithm evaluates node h assigned to either
the opponent of the searching player or to nature  see figure     the main idea is to
calculate the expected utility for this node according to the  fixed  strategy of the player 
the strategy is known because it is either given by the extended realization plan ri   or by
the stochastic environment  c   throughout the algorithm  the variable w represents the
probability of this node based on the realization probability of the opponent and stochastic
environment  line     this value is iteratively decreased by values wa that represent realization probabilities of the currently evaluated action a  a h   finally  vh is the expected
utility value for this node 
the algorithm evaluates actions in the descending order according to the probability
of being played  based on r i and c  lines       first  we calculate a new lower bound
   

fibosansky  kiekintveld  lisy    pechoucek

  for the successor ha  line      the new lower bound is the minimal value that must
be returned from the recursive call brsi  ha  under the optimistic assumption that all the
remaining actions will yield the maximum possible utility  if the lower bound does not
exceed the maximum possible utility in the game  the algorithm is executed recursively
on the successors  line      note that the algorithm does not evaluate branches with zero
realization probability  line    
there are   possibilities for pruning in this part of the search algorithm  the first
pruning is possible if the currently evaluated node is a leaf in the restricted game  but this
node is an inner node in the original node  i e   h  z     z  line     the algorithm can
directly use the value from the modified utility function u  in this case  since it is calculated
as a best response of the searching player against the default strategy of the opponent that
will be applied in the successors of node h since h  z     secondly  a cut off also occurs
if the new lower bound for a successor is larger than the maximum possible utility in the
game  since this value can never be obtained in the successor  line      finally  a cut off
occurs if there was a cut off in one of the successors  line     
      nodes of the searching player
in nodes assigned to the searching player  the algorithm evaluates every action in each
state that belongs to the current information set  the algorithm traverses the states in
the descending order according to the probability of occurrence given the strategies of the
opponent and nature  line     similar to the previous case  in each iteration the algorithm
calculates a new lower bound for the successor node  line      the new lower bound  
is the minimal value that must be returned from the recursive call brsi  h  a  in order for
the action a to be selected as the best action for this information set under the optimistic
assumption that this action yields the maximum possible utility value after applying it in
each of the remaining states in this information set  the algorithm performs a recursive call
 line     only for an action that still could be the best in this information set  i e   the lower
bound does not exceed the maximal possible utility in the game   note that if a cut off
occurs in one of the successors  the currently evaluated action a can no longer be the best
action in this information set  hence  va is set to  and action a will not be evaluated for
any of the remaining nodes  when the algorithm determines which action will be selected
as the best one in an information set  it evaluates only this action for all remaining nodes
in the information set  finally  the algorithm stores the values for the best action for all
nodes in this information set  line      these are reused if the same information set is
visited again  i e   the algorithm reaches a different node h  from the same information set
ii   line    
a cut off occurs in this part of the search algorithm if the maximal possible value vah
is smaller than the lower bound  after evaluating node h  this means that regardless of
which action will be selected as the best action in this information set  the lower bound
for node h will not be reached  hence  the cut off occurs  line      if a cut off occurs in
an information set  this information set cannot be reached again and the sequences of the
searching player leading to this information set cannot be a part of the best response  this
is due to propagating the cut off to at least one previous information set of the searching
player  otherwise there will be no tight lower bound set  the bound is first set only in the
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

require  i   searching player  h   current node  iik   current information set  ri   opponents
strategy  min maxutility   bounds on utility values   lower bound for a node h
   if h  z then
  
return ui  h   r i  seqi  h    c h 
   end if
   if v h is already calculated then
  
return v h
   end if
   h     h    h   ii  
 
   sort h
to value ri  seqi  h      c h   
p descending according
 
   w  h  h   r i  seqi  h     c h   
    va    a  a h   maxaction  
    for h   h   do
   
wh   r i  seqi  h      c h   
   
for a  a h    do
   
if maxaction is empty then
   
   wh  minutility
   
else
   
    vmaxaction   w  minutility    va    w  wh     maxutility 
   
end if
   
if    wh   maxutility then
 
   
vah  brsi  h  a     
 
   
va  va   vah
   
end if
   
end for
   
maxaction  arg maxaa h    va
   
w  w  wh 

   
if h was evaluated  maxaa h  vah    then
   
return 
   
end if
    end for
 
h 
as v h h   h  
    store vmaxaction
h
    return vmaxaction

figure    brsi in the nodes of the searching player 

information sets of the searching player   therefore  there exists at least one action of the
searching player that will never be evaluated again  after a cut off  the value va for this
action is set to   and cannot be selected as the best action in the information set  since
we assume perfect recall  all nodes in information set ii share the same sequence of actions
seqi  ii    hence  no node h   ii can be reached again 
    main loop alternatives
we now introduce several alternative formulations for the main loop of the sequence form
double oracle algorithm  the general approach in the double oracle algorithm is to solve the
restricted game to find the equilibrium strategy for each player  compute the best responses
in the original game for both of the players  and continue with the next iteration  however 
the sequence form lp is formulated in our double oracle scheme in such a way that on each
   

fibosansky  kiekintveld  lisy    pechoucek

iteration the algorithm can solve the restricted game only from the perspective of a single
player i  in other words  we formulate a single lp as described in section     that computes
the optimal strategy of the opponent in the restricted game  player i   and then compute
the best response of player i to this strategy  this means that on each iteration we can
select a specific player i  for whom we compute the best response in this iteration  we call
this selection process the player selection policy 
there are several alternatives for the player selection policy that act as a domainindependent heuristics in double oracle algorithm  we consider three possible policies 
    the standard double oracle player selection policy of selecting both players on each iteration      an alternating policy  where the algorithm selects only one player and switches
between the players regularly  player i is selected in one iteration  player i is selected in
the following iteration   and finally     a worse player selection policy that selects the player
who currently has the worse bound on the solution quality  at the end of an iteration the
algorithm selects the player i for whom the upper bound on utility value is further away
from the current value of the restricted game  more formally 
fi
fi
arg max fiviu b  vilp fi
    
in

where vilp is the last calculated value of the restricted game for player i  the intuition
behind this choice is that either this bound is precise and there are some missing sequences
of this player in the restricted game that need to be added  or the upper bound is overestimated  in either case  the best response sequence algorithm should be run for this player
in the next iteration  either to add new sequences or to tighten the bound  in case of a tie 
the alternating policy is applied in order to guarantee regular switching of the players  we
experimentally compare these policies to show their impact on the overall performance of
the sequence form double oracle algorithm  see section    

   theoretical results
in this section we prove that our sequence form double oracle algorithm will always converge to a nash equilibrium of the original unrestricted game  first  we formally define the
strategy computed by the best response sequence  brs  algorithm  then we prove lemmas
about the characteristics of the brs strategies  and finally we prove the main convergence
result  note that variations of the main loop described in section     do not affect the
correctness of the algorithm as long as the player selection policy ensures that if no improvement is made by the brs algorithm for one player that the brs algorithm is run for
the opponent on the next iteration 
  be a realization plan of player i in some restricted game g    brs r    
lemma     let ri
i
returns sequences corresponding to a realization plan ribr in the unrestricted game  such that
ribr is part of a pure best response strategy to r i   the value returned by the algorithm is
the value of executing the pair of strategies ui  r i   ribr   
    searches the game tree and selects the action that maximizes the value
proof brs ri
of the game for player i in all information sets ii assigned to player i reachable given
the strategy of the opponent r i   in the opponents nodes  it calculates the expected value

   

fian exact double oracle algorithm for zero sum efgs with imperfect information

  where it is defined and the value according to the pure action of the default
according to ri
def
  is not defined  in chance nodes  it returns the expected value of
strategy i where ri
the node as the sum of the values of the successor nodes weighted by their probabilities  in
each node h  if the successors have the maximal possible value for i then node h also has
the maximal possible value for i  when playing against r i    the selections in the nodes
that belong to i achieves this maximal value  hence  they form a best response to strategy
r i   
     to denote the value returned by the brs algorithm 
for brevity we use v brs ri
which is equal to ui  r i   ribr   
  be a realization plan of player i in some restricted game g  and let
lemma     let ri

vi be the value of the original unrestricted game g for player i  then
 
v brs ri
    vi  

    

     is a value of the best response against r  
proof lemma     showed that v brs ri
i
       v  then
which is a valid strategy in the original unrestricted game g  if v brs ri
i
vi cannot be the value of the game since player i has a strategy r i that achieves better
utility  which is a contradiction  
  be a realization plan of player i that is returned by the lp for some
lemma     let ri
 
restricted game g and let vilp be the value of the restricted game returned by the lp  then
 
v brs ri
    vilp  

    

 
proof the realization plan ri
is part of the nash equilibrium strategy in a zero sum
lp
game that guarantees value vi
in g    if the best response computation in the original
unrestricted game g selects only the actions from restricted game g    it creates the best
response in game g  as well obtaining value vilp   if the best response selects an action
that is not allowed in the restricted game g    there are two cases 
case     the best response strategy uses an action in a temporary leaf h  z     z 
player i makes the decision in the leaf  because otherwise the value of the temporary leaf
would be directly returned by brs  the value of the temporary leaf has been underestimated for player i in the restricted game by the modified utility function u  and it is
def  
over estimated in the brs computation as the best response to the default strategy i
the value of the best response can only increase by including this action 
case     the best response strategy uses an action not allowed in g  in an internal node
of the restricted game h     z     this can occur in nodes assigned to player i  because the
actions of player i going out of g  have probability zero in r i   brs takes the action
with maximum value in the nodes assigned to player i  so the reason for selecting an action
leading outside g  is that it has greater or equal value to the best action in g    
       v lp then it
lemma     under the assumptions of the previous lemma  if v brs ri
i
returns sequences that are added to the restricted game g  in the next iteration 

   

fibosansky  kiekintveld  lisy    pechoucek

proof based on the proof of the previous lemma  brs for player i can improve over
the value of the lp  vilp   only by selecting an action a that is not present in g  but is
performed in a node h that is included in g   in which i makes decision   let  i   i   be
the pair of sequences leading to h  then in the construction of the restricted game for the
next iteration  sequence i is the sequence that ensures that i a can be executed in full
and will be part of the new restricted game  
note  that lemmas     and     would not hold if the utility values u  for temporary
leaves  h  z     z  are set arbitrarily  the algorithm sets the values in temporary leaf h
as if the player p h  continues by playing the default strategy and the opponent  p h   is
playing the best response  if the utility values for the temporary leaves are set arbitrarily
and used in the brs algorithms to speed up the calculation as proposed  see the algorithm
in figure    line     then lemma     does not need to hold in cases where the value in
node h strictly overestimates the optimal expected value for player p h   in this case  the
best response value of the opponent may be lower than the optimal outcome 


v brs rp h      vp h 
    
on the other hand  if the brs algorithm does not use the temporary values u  for such a
node  then lemma     is violated because the best response value will be strictly higher for
player p h  even though no new sequences are to be added into the restricted game 
theorem     the sequence form double oracle algorithm for extensive form games described in the previous section terminates if and only if
 
v brs ri
     v brs ri       vilp   vi  

    

which always happens after a finite number of iterations  because the game is finite   and
strategies  r i   r i   are a nash equilibrium of the original unrestricted game 
proof first we show that the algorithm continues until all equalities      hold  if
        v brs r      then from lemma     and lemma     we know that for
v brs ri
i
      v lp   so the restricted game in the following itersome player i it holds that brs ri
i
ation is larger by at least one action and the algorithm continues  in the worst case  the
restricted game equals the complete game g    g  and it cannot be extended any further 
in this case the brs cannot find a better response then vi and the algorithm stops due
to lemma     
if the condition in the theorem holds the algorithm has found a ne in the complete
br   brs r     is the best response to r   in
game  because from lemma     we know that ri
i
i
the complete game  however  if the value of the best response to a strategy in a zero sum
game is the value of the game  then the strategy r i is optimal and it is part of a nash
equilibrium of the game  

   experiments
we now present our experimental evaluation of the performance of the sequence form
double oracle algorithm for efgs  we compare our algorithm against two state of the art
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

baselines  the full sequence form lp  referred to as fulllp from now on   and counterfactual regret minimization  cfr   the first baseline is the standard exact method for
solving sequence form efg  while cfr is one of the leading approximate algorithms applied to efg  our experimental results demonstrate the advantages of the double oracle
algorithm on three different classes of realistic efgs  we also test the impact of the different
variants of the main loop of the algorithm described in section     
we compare three variants of the sequence form double oracle algorithm      do b
is a variant in which the best responses are calculated for both players in each iteration 
    do sa calculates the best response for a single player on each iteration according to
a simple alternating policy  and     do swp is a variant in which the best response is
calculated for a single player according to the worse player selection policy  for all of the
variants of the double oracle algorithm we use the same default strategy where the first
action applicable in a state is played by default 
since there is no standardized collection of zero sum extensive form games for benchmark purposes  we use several specific games to evaluate the double oracle algorithm and
to identify the strengths and weaknesses of the algorithm  the games were selected to
evaluate the performance under different conditions  so the games differ in the maximal
utility the players can gain  in the causes of the imperfect information  and in the structure
of the information sets  one of the key characteristics that affects the performance of the
double oracle algorithm is the relative size of the support of nash equilibria  i e   the number of sequences used in a ne with non zero probability   if there does not exist a ne with
small support  the algorithm must necessarily add a large fraction of the sequences into the
restricted game to find a solution  mitigating the advantages of the double oracle approach 
we present results for two types of games where the double oracle significantly outperforms the fulllp on all instances  a search game motivated by border patrol and phantom
tic tac toe  we also present results on a simplified version of poker for which the doubleoracle algorithm does not always improve the computation time  however  the fulllp
also has limited scalability due to larger memory requirements and cannot find solutions for
larger variants of poker  while the double oracle algorithm is able to solve these instances 
our principal interest is in developing new generic methods for solving extensive form
games  therefore  we implemented the algorithm in a generic framework for modeling arbitrary extensive form games   the algorithms do not use any domain specific knowledge in
the implementation  and do not rely on any specific ordering of the actions  the drawbacks
of this generic implementation are higher memory requirements and additional overhead
for the algorithms  a domain specific implementation could improve the performance by
eliminating some of the auxiliary data structures  we run all of the experiments using a
single thread on an intel i  cpu running at     ghz  each of the algorithms was given a
maximum of    gb of memory for java heap space  we used ibm cplex      for solving
the linear programs  with parameter settings to use a single thread and the barrier solution
algorithm 
in addition to runtimes  we analyze the speed of convergence of the double oracle algorithms and compare it to one of the state of the art approximative algorithms  counterfactual regret minimization  cfr   we implemented cfr in a domain independent way
   source code is available at the home pages of the authors 

   

fibosansky  kiekintveld  lisy    pechoucek

based on the pseudocode in the work of lanctot        p       in principle  it is sufficient
for cfr to maintain only a set of information sets and apply the no regret learning rule
in each information set  however  maintaining and traversing such a set effectively in a
domain independent manner could be affected by our implementation of generic extensiveform games data structures  i e   generating applicable actions in the states of the game 
applying the actions  etc    therefore we use an implementation where cfr traverses the
complete game tree that is held in memory to maintain the fairness of the comparison  and
to guarantee the maximal possible speed of convergence of the cfr algorithm  the time
necessary to build the game tree is not included in the computation time of cfr 
    test domains
search games our first test belongs to the class of search  or pursuit evasion  games 
often used in experimental evaluation of double oracle algorithms  mcmahan et al        
halvorson et al          the search game has two players  the patroller  or the defender 
and the evader  or the attacker   the game is played on a directed graph  see figure    
where the evader aims to cross safely from a starting node  e  to a destination node  d  
the defender controls two units that move in the intermediate nodes  the shaded areas 
trying to capture the evader by occupying the same node as the evader  during each turn
both players move their units simultaneously from the current node to an adjacent node 
or the units stay in the same location  the only exception is that the evader cannot stay in
the two leftmost nodes  if a pre determined number of turns is made without either player
winning  the game is a draw  this is an example of a win tie loss game and the utility
values are from the set           
players are unaware of the location and the actions of the other player with one exception
 the evader leaves tracks in the visited nodes that can be discovered if the defender visits
the nodes later  the game also includes an option for the evader to avoid leaving the tracks
using a special move  a slow move  that requires two turns to simulate the evader covering
the tracks 
figure   shows examples of the graphs used in the experiments  the patrolling units
can move only in the shaded areas  p  p    and they start at any node in the shaded
areas  even though the graph is small  the concurrent movement of all units implies a large
branching factor  up to     for one turn  and thus large game trees  up to       nodes  
in the experiments we used three different graphs  varied the maximum number of turns
of the game  from   to     and we altered the ability of the attacker to perform the slow
moves  labeled sa if the slow moves are allowed  sd otherwise  
phantom tic tac toe the second game is a blind variant of the well known game of
tic tac toe  e g   used in lanctot et al          the game is played on a      board  where
two players  cross and circle  attempt to place   identical marks in a horizontal  vertical 
or diagonal row to win the game  in the blind variant  the players are unable to observe
the opponents moves and each player only knows that the opponent made a move and it is
her turn  moreover  if a player tries to place her mark on a square that is already occupied
by an opponents mark  the player learns this information and can place the mark in some
other square  again  the utility values of this game are from the set           
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

figure    three variants of the graph used in the experiments on the search game  we refer
to them as g   left   g   middle   and g   right  
the uncertainty in phantom tic tac toe makes the game large       nodes   in
addition  since one player can try several squares before her move is successful  the players
do not necessarily alternate in making their moves  this rule makes the structure of the
information sets rather complicated and since the opponent never learns how many attempts
the first player actually performed  a single information set can contain nodes at different
depths in the game tree 
poker games poker is frequently studied in the literature as an example of a large
extensive form game with imperfect information  we include experiments with a simplified
two player poker game inspired by leduc holdem 
in our version of poker  each player starts with the same amount of chips and both
players are required to put some number of chips in the pot  called the ante   in the next
step  the nature player deals a single card to each player  the opponent is unaware of the
card  and the betting round begins  a player can either fold  the opponent wins the pot  
check  let the opponent make the next move   bet  being the first to add some amount of
chips to the pot   call  add the amount of chips equal to the last bet of the opponent into
the pot   or raise  match and increase the bet of the opponent   if no further raise is made
by any of the players  the betting round ends  the nature player deals one card on the
table  and the second betting round with the same rules begins  after the second betting
round ends  the outcome of the game is determined  a player wins if      her private card
matches the table card and the opponents card does not match      none of the players
cards matches the table card and her private card is higher than the private card of the
opponent  or     the opponent folds  the utility value is the amount of chips the player has
won or lost  if no player wins  the game is a draw and the pot is split 
in the experiments we alter the number of types of the cards  from   to    there are
  types of cards in leduc   the number of cards of each type  from   to    set to   in leduc  
the maximum length of sequence of raises in a betting round  ranging from   to    set to  
in leduc   and the number of different sizes of bets  i e   amount of chips added to the pot 
for bet raise actions  ranging from   to    set to   in leduc  
    results
search games the results for the search game scenarios show that the sequence form
double oracle algorithm is particularly successful when applied to games where nes with
small support exist  figure   shows a comparison of the running times for fulllp and
variants of the double oracle algorithm  note the logarithmic y scale   all variants of the
   

fibosansky  kiekintveld  lisy    pechoucek

   

   

   

   

fulllp
do b
do sa
do swp
time  s   log scale 

time  s   log scale 

   

g  sd

g  sd

g  sd

g  sa

g  sa

   

   

   

g  sa

search game scenarios   depth  

fulllp
do b
do sa
do swp

g  sd

g  sd

g  sd

g  sa

g  sa

g  sa

search game scenarios   depth  

figure    comparison of the running times on   different graphs with either slow moves
allowed  sa  or disallowed  sd   the depth is set to    left subfigure  or    right subfigure  
missing values for the fulllp algorithm indicate that the algorithm runs out of memory 

double oracle algorithm are several orders of magnitude faster than fulllp  this is most
apparent on the fully connected graph  g   that generates the largest game tree  when
slow moves are allowed and the depth is set to    it takes almost     seconds for fulllp
to solve the instance of the game but all variants of the double oracle algorithms solve the
game in less than   seconds  moreover  when the depth is increased to    fulllp was
unable to solve the game due to the memory constraints  while the fastest variant do swp
solved the game in less than   seconds  similar results were obtained for the other graphs 
the graph g  induced a game that was the most difficult for the double oracle algorithm 
when the depth is set to    it takes almost   minutes for fulllp to solve the instance  while
the fastest variant do swp solved the game in    seconds  the reason is that even though
the game tree is not the largest  there is a more complex structure of the information sets 
this is due to limited compatibility among the sequences of the players  when the patrolling
unit p  observes the tracks in the top row node  the second patrolling unit p  can capture
the evader only in the top row node  or in the middle row node 
comparing the different variants of the sequence form double oracle algorithm does
not show consistent results  there is no variant consistently better in this game since all
the double oracle variants are typically able to compute a nash equilibrium very quickly 
however  do swp is often the fastest and for some settings the difference is quite significant 
the speed up this variant offers is most apparent on the g  graph  on average through all
instances of the search game  do sa uses        of the computation time of do b  and
do swp uses        
table   shows a breakdown of the cumulative computation time spent in different components of the double oracle algorithm  solving the restricted game  lp   calculating best
responses  br   and creating a valid restricted game after selecting new sequences to add
 validity   the results show that due to the size of the game  the computation of the
best response sequences takes the majority of the time  typically around     on larger
instances   while creating the restricted game and solving it takes only a small fraction of
the total time  it is also noticeable that the size of the final restricted game is very small
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

do b

do sa

do swp

cfr

bounds interval size      log scale 

  
 
   
    
     
      
 e   
 

  

   
time  s 

   

   

figure    convergence of variants of the double oracle algorithm and cfr on the search
game domain  y axis displays the current approximation error 
algorithm
fulllp
do b
do sa
do swp

overall  s 
      
     
     
     

lp  s 

    
   
    

br  s 

     
     
     

validity  s 

     
    
    

iterations

   
   
   

    

              

            
            
            

    

              

           
           
           

table    cumulative running times for different components of the double oracle algorithm 
iterations  and size of the restricted game in terms of the number of sequences compared to
the size of the complete game  the results are shown for scenario g   depth    and allowed
slow moves 
compared to the original game  since the number of sequences for the second player  the
defender  is less than     there are         sequences for the defender  
finally  we analyze the convergence rate of the variants of the double oracle algorithm 
the results are depicted in figure    where the size of the interval given by the bounds
viu b and vilb defines the current error of the double oracle algorithm as  viu b  vilb   
the convergence rate of the cfr algorithm is also depicted  the error of cfr is calculated
in the same way  as a sum of the best response values to the current mean strategies from
the cfr algorithm  we can see that all variants of the double oracle algorithm perform
similarly  the error drops very quickly to   and a few iterations later each version of the
algorithm quickly converges to an exact solution  these results show that in this game the
double oracle algorithm can very quickly find the correct sequences of actions and compute
an exact solution  in spite of the size of the game  in comparison  the cfr algorithm can
also quickly learn the correct strategies in most of the information sets  but the convergence
has a very long tail  after     seconds  the error of cfr is equal to        and it is dropping
very slowly         after   hour   the error of cfr is quite significant considering the value
of the game in this case          
phantom tic tac toe the results on phantom tic tac toe confirm that this game is
also suitable for the sequence form double oracle algorithm  due to the size of the game 
both baseline algorithms  the fulllp and cfr  ran out of memory and were not able
   

fibosansky  kiekintveld  lisy    pechoucek

do sa

do swp
do b
do sa
do swp

 
time  s   log scale 

bounds interval size      log scale 

do b

   
    
     

   

      
 e   
 

    

     
     
time  s 

     

     

   

random

domain dependent

different action ordering in phantom tic tac toe

figure     left  comparison of the convergence rate of the double oracle variants for phantom tic tac toe   right  comparison of the performance of the double oracle variants for
phantom tic tac toe when domain specific move ordering and default strategy is used 
algorithm
fulllp
do b
do sa
do swp

overall  s 
n a
      
      
      

lp  s 

     
     
     

br  s 

      
      
      

validity  s 

   
   
   

iterations

   
   
   

    

              

             
             
             

    

              

              
             
             

table    cumulative running times for different components of the double oracle algorithm
for the game of phantom tic tac toe 
to solve the game  therefore  we only compare the times for different variants of the
double oracle algorithm  figure    left subfigure  shows the overall performance of all three
variants of the double oracle algorithm in the form of a convergence graph  we see that the
performance of two of the variants is similar  with the performance of do sa and do swp
almost identical  on the other hand  the results show that do b converges significantly
slower 
the time breakdown of the variants of the double oracle algorithm is shown in table   
similarly to the previous case  the majority of the time        is spent in calculating
the best responses  out of all variants of the double oracle algorithm  the do swp variant
is the fastest one  it converged in significantly fewer iterations compared to the do sa
variant  iterations are twice as expensive in the do b variant  
we now present the results that demonstrate the potential of combining the sequenceform double oracle algorithm with domain specific knowledge  every variant of the doubleoracle algorithm can use a move ordering based on domain specific heuristics  the move
ordering determines the default strategy  recall that our algorithm uses the first action as
the default strategy for each player   and the direction of the search in the best response
algorithms  by replacing the randomly generated move ordering with a heuristic one that
chooses better actions first  the results show a significant improvement in the performance
of all of the variants  see figure    right subfigure   even though there are no changes to
the rest of the algorithm  each variant was able to solve the game in less than   hours  and
it took   hours for the fastest do swp variant 
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

   

fulllp
do b
do sa
do swp
   
time  s   log scale 

   
time  s 

   

fulllp
do b
do sa
do swp

   

   

   

  

   

 
r 

r 

r 

r 

increasing number of allowed  raise actions 

b 

b 

b 

b 

increasing size of possible bets

figure     comparison of the running times on different variants of the simplified poker
game  the left subfigure shows the computation times with an increasing number of raise
actions allowed  the right subfigure shows the computation times with an increasing number
of different bet sizes for raise bet actions 
poker games poker represents a game where the double oracle algorithms do not perform as well and the sequence form lp is often faster on smaller instances  one significant
difference compared to the previous games is that the size of the ne support is larger
 around    of sequences for larger instances   secondly  the game trees of poker games
are relatively shallow and the only imperfect information in the game is due to nature 
as a result  the double oracle algorithms require a larger number of iterations to add more
sequences into the restricted game  up to     of all sequences for a player are added even
for the largest poker scenarios  in order to find the exact solution  however  with increasing
depth and or branching factor  the size of the game grows exponentially and fulllp is
not able to solve the largest instances due to the memory constraints 
figure    shows the selected results for simplified poker variants  the results in the
left subfigure show the computation times with increasing depth of the game by allowing
the players to re raise  players are allowed to re raise their opponent a certain number of
times   the remaining parameters are fixed to   types of cards    cards of each type  and  
different betting sizes  the size of the game grows exponentially  with the number of possible
sequences increasing to         for each player for the r  scenario  the computation time
for fulllp is directly related to the size of the tree and increases exponentially with the
increasing depth  note that there is a standard y scale   on the other hand  the increase is
less dramatic for all of the variants of the double oracle algorithm  the do swp variant is
the fastest for the largest scenario  while fulllp solved this instance in     seconds  it
took only     seconds for do swp  finally  fulllp is not able to solve the games if we
increase the length to r  due to memory constraints  while the computation time of all of
the double oracle algorithms increases only marginally 
the right subfigure of figure    shows the increase in computation time with an increasing number of different bet sizes for raise bet actions  the remaining parameters were
fixed to   types of cards    cards of each type  and   raise actions allowed  again  the
game grows exponentially with the increasing branching factor  the number of sequences
increases up to         for each player for the b  scenario  and the computation time of
   

fibosansky  kiekintveld  lisy    pechoucek

do b

do sa

do swp

cfr

do b

do swp

cfr

  
bounds interval size      log scale 

bounds interval size      log scale 

  

do sa

 
   
    
     
      
 e   

 
   
    
     
      
 e   

 

  

   

   

   
   
time  s 

   

   

   

 

   

   

   
   
time  s 

    

    

    

figure     comparison of the convergence of the variants of the double oracle algorithm
and cfr for two variants of the simplified poker with   types of cards  and   cards of each
type  there are   raise actions allowed    different bet sizes in the left subfigure  there are
  raise actions allowed    different bet sizes in the right subfigure 
algorithm
fulllp
do b
do sa
do swp

overall  s 
      
      
      
      

lp  s 

      
      
      

br  s 

     
     
     

validity  s 

     
     
    

iterations

   
   
   

    

              

             
             
             

    

              

             
             
             

table    cumulative running times for different components of the double oracle algorithm 
iterations  and sizes of the restricted game in terms of the number of sequences compared
to the size of the complete game  the results are shown for poker scenario with   raise
actions allowed    different betting values    types of cards  and   cards of each type 
all algorithms increases exponentially as well  note logarithmic y scale   the results show
that even with the increasing branching factor  the double oracle variants tend to be slower
than solving the fulllp  however  while the fulllp ran out of memory for the largest
b  setting  all of the double oracle variants were able to find the exact solution using less
memory 
comparing the different variants of the double oracle algorithm using the convergence
graph  see figure     and the decomposition of the computation times  see table    shows
that do swp is the fastest variant in the selected scenario  and in nearly all of poker
scenarios   decomposition of the overall time shows that the majority of the computation
time is spent in solving the restricted game lp  up to       the decomposition also shows
that do swp is typically faster due to the lower number of iterations  in addition  the
final size of the restricted game is typically the smallest for this variant  on average over
all instances of the poker games  do sa uses        of the computation time of do b 
and do swp uses       of the computation time 
convergence in poker games is slower compared to search games of similar size  note the
logarithmic scale in figure      comparing the double oracle algorithm variants with cfr
shows an interesting result in the left subfigure  due to the size of the game  the speed of
the cfr convergence is nearly the same as for the double oracle algorithms during the first
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

iterations  however  while the double oracle algorithms continue to converge at roughly the
same rate and are able to find an exact solution  the error of the cfr algorithm decreases
very slowly  in the scenario depicted in the left subfigure  the cfr algorithm converged
to an error of         the value of the game in this case is           after     seconds 
after   hour  the error dropped to         for scenarios with more shallow game trees and
larger branching factor  the convergence of cfr is faster at the beginning compared to the
double oracle algorithms  right subfigure of figure      however  the main disadvantage of
cfr having a long tail for convergence is still the case and the error after      seconds is
still over         the value of this game is           
    discussion of the results
the experimental results support several conclusions  the results demonstrate that the
sequence form double oracle algorithm is able to compute an exact solution for much larger
games compared to the state of the art exact algorithm based on the sequence form linear
program  moreover  we have experimentally shown that there are realistic games where only
a small fraction of sequences are necessary to find a solution of the game  in these cases 
the double oracle algorithms also significantly speed up the computation time  our results
indicate that the do swp variant is typically the fastest  but not in all cases  by selecting
the player that currently has the worse bound on performance  the do swp version can
add more important sequences  or prove that there are not any better sequences and adjust
the upper bound on the value faster 
comparing the speed of convergence of the double oracle algorithms with the state ofthe art approximative algorithm cfr showed that cfr quickly approximates the solution
during the first iterations  however  the convergence of cfr has a very long tail and cfr is
not able to find an exact solution for larger games in a reasonable time  another interesting
observation is that for some games the convergence rate of the double oracle algorithms
and cfr is similar in the first iterations  and while the double oracle algorithms continue
at this rate and find an exact solution  the long tail convergence remains for cfr  this is
despite the fact that our implementation of cfr has an advantage of having the complete
game tree including the states for all histories in memory 
unfortunately  it is difficult to characterize the exact properties of the games for which
the double oracle algorithms perform better in terms of computation time compared to the
other algorithms  certainly  the double oracle algorithm is not suitable for games were
the only equilibria have large support due to the necessity of large number of iterations 
however  having a small support equilibrium is not a sufficient condition  this is apparent
due to two graphs shown in the poker experiments  where either the depth of the game tree
or the branching factor was increased  even though the game grows exponentially and the
size of the support decreases to       in both cases  the behavior of the double oracle
algorithms is quite different  our conjecture is that games with longer sequences suit the
double oracle algorithms better  since several actions that form the best response sequences
can be added during a single iteration  this contrasts with shallow game trees with large
branching factors  where more iterations are necessary to add multiple actions  however 
a deeper analysis to identify the exact properties of the games that are suitable is an open
question that must be analyzed for normal form games first 
   

fibosansky  kiekintveld  lisy    pechoucek

   conclusion
we present a novel exact algorithm for solving two player zero sum extensive form games
with imperfect information  our approach combines the compact sequence form representation for extensive form games with the iterative algorithmic framework of double oracle
methods  this integrates two successful approaches for solving large scale games that have
not yet been brought together for the general class of games that our algorithm addresses 
the main idea of our algorithm is to restrict the game by allowing players to play only a
restricted set of sequences from the available sequences of actions  and to iteratively expand
the restricted game over time using fast best response algorithms  although in the worst
case the double oracle algorithm may need to add all possible sequences  the experimental
results on different domains prove that the double oracle algorithm can find an exact nash
equilibrium prior to constructing the full linear program for the complete game  therefore 
the sequence form double oracle algorithm reduces the main limitation of the sequence form
linear programmemory requirementsand it is able to solve much larger games compared
to state of the art methods  moreover  since our algorithm is able to identify the sequences
of promising actions without any domain specific knowledge  it can also provide a significant
runtime improvements 
the proposed algorithm also has another crucial advantage compared to the current state
of the art  the double oracle framework offers a decomposition of the problem of computing
a nash equilibrium into separate sub problems  including the best response algorithms  the
choice of the default strategy  and the algorithms for constructing and solving the restricted
game  we developed solutions for all of these sub problems in a domain independent manner  however  we can also view our algorithm as a more general framework that can be
specialized with domain specific components that take advantage of the structure of specific
problems to improve the performance of these sub problems  this can lead to substantial
improvements in the speed of the algorithm  the number of iterations  as well as reducing
the final size of the restricted game  we demonstrated the potential of the domain specific
approach on the game of phantom tic tac toe  another example is that fast best response
algorithms that operate on the public tree  i e   a compact representation of games with
publicly observable actions  see johanson  bowling  waugh    zinkevich        can be exploited for games like poker  finally  our formal analysis identifies the key properties that
these domain specific implementations need to satisfy to guarantee the convergence to the
correct solution of the game 
our algorithm opens up a large number of directions for future work  it represents a new
class of methods for solving extensive form games with imperfect information that operates
very differently than other common approaches  e g   counterfactual regret minimization  
and many possible alternatives to improve the performance of the algorithm remain to
be investigated  examples include more sophisticated calculation of utility values for the
temporary leaves  alternative strategies for expanding the restricted game  and removing
unused sequences from the restricted game  a broader analysis of using the sequenceform double oracle algorithm as an approximation technique should be performed  possibly
by exploring alternative approximative best response algorithms based on sampling  e g  
monte carlo  techniques 
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

there are also several theoretical questions that could be investigated  first  the performance of the double oracle algorithm depends strongly on the number of iterations and
sequences that need to be added  however  the theoretical question regarding the expected
number of iterations and thus the speed of the convergence of the double oracle algorithm
have not been explored even for simpler game models  e g   games in the normal form   an
analysis of these simpler models is needed to identify the general properties of games where
the double oracle methods tend to be faster and to identify the optimal way of expanding
the restricted game 

acknowledgements
earlier versions of this paper were published at the european conference on artificial
intelligence  ecai   bosansky  kiekintveld  lisy    pechoucek        and the conference
on autonomous agents and multi agent systems  aamas   bosansky  kiekintveld  lisy 
cermak    pechoucek         the major additions to this full version include     a novel 
more detailed description of all parts of the algorithm      introduction and analysis of
different policies for the player selection in the main loop of the double oracle algorithm 
    new experiments on the phantom tic tac toe domain together with a more thorough
analysis of the experimental results on all domains  including the analysis of the convergence
of the algorithm      experimental comparison with cfr  and finally     extended analysis
of related work 
this research was supported by the czech science foundation  grant no  p            
and by u s  army research office  award no  w   nf            

references
barnhart  c   johnson  e  l   nemhauser  g  l   savelsbergh  m  w  p     vance  p  h 
        branch and price  column generation for solving huge integer programs 
operations research             
bosansky  b   kiekintveld  c   lisy  v   cermak  j     pechoucek  m          doubleoracle algorithm for computing an exact nash equilibrium in zero sum extensiveform games  in proceedings of international conference on autonomous agents and
multiagent systems  aamas   pp         
bosansky  b   kiekintveld  c   lisy  v     pechoucek  m          iterative algorithm for
solving two player zero sum extensive form games with imperfect information  in
proceedings of the   th european conference on artificial intelligence  ecai   pp 
       
cermak  j   bosansky  b     lisy  v          practical performance of refinements of
nash equilibria in extensive form zero sum games  in proceedings of european
conference on artificial intelligence  ecai   pp         
dantzig  g     wolfe  p          decomposition principle for linear programs  operations
research            
ganzfried  s     sandholm  t          improving performance in imperfect information
games with large state and action spaces by solving endgames  in computer
   

fibosansky  kiekintveld  lisy    pechoucek

poker and imperfect information workshop at the national conference on artificial
intelligence  aaai  
gibson  r   lanctot  m   burch  n   szafron  d     bowling  m          generalized sampling and variance in counterfactual regret minimization  in proceedings of the   th
aaai conference on artificial intelligence  pp           
halvorson  e   conitzer  v     parr  r          multi step multi sensor hider seeker games 
in proceedings of the joint international conference on artificial intelligence  ijcai  
pp         
hoda  s   gilpin  a   pena  j     sandholm  t          smoothing techniques for computing
nash equilibria of sequential games  mathematics of operations research         
       
jain  m   conitzer  v     tambe  m          security scheduling for real world networks 
in proceedings of the international conference on autonomous agents and multiagent
systems  aamas   pp         
jain  m   korzhyk  d   vanek  o   conitzer  v   tambe  m     pechoucek  m          double
oracle algorithm for zero sum security games on graph  in proceedings of the   th
international conference on autonomous agents and multiagent systems  aamas  
pp         
johanson  m   bowling  m   waugh  k     zinkevich  m          accelerating best response
calculation in large extensive games  in proceedings of the   nd international joint
conference on artificial intelligence  ijcai   pp         
koller  d     megiddo  n          the complexity of two person zero sum games in
extensive form  games and economic behavior            
koller  d   megiddo  n     von stengel  b          efficient computation of equilibria for
extensive two person games  games and economic behavior                 
koller  d     megiddo  n          finding mixed strategies with small supports in extensive form games  international journal of game theory           
kreps  d  m     wilson  r          sequential equilibria  econometrica                
lanctot  m          monte carlo sampling and regret minimization for equilibrium computation and decision making in large extensive form games  ph d  thesis  university of alberta 
lanctot  m   gibson  r   burch  n   zinkevich  m     bowling  m          no regret
learning in extensive form games with imperfect recall  in proceedings of the   th
international conference on machine learning  icml        pp      
lanctot  m   waugh  k   zinkevich  m     bowling  m          monte carlo sampling
for regret minimization in extensive games  in advances in neural information
processing systems  nips   pp           
lee  c  s   wang  m  h   chaslot  g   hoock  j  b   rimmel  a   teytaud  o   tsai  s  r  
hsu  s  c     hong  t  p          the computational intelligence of mogo revealed
in taiwans computer go tournaments  ieee transactions on computational intelligence and ai in games          
   

fian exact double oracle algorithm for zero sum efgs with imperfect information

letchford  j     vorobeychik  y          optimal interdiction of attack plans  in proceedings of the   th international conference on automonous agents and multiagent
systems  aamas   pp         
lisy  v   kovarik  v   lanctot  m     bosansky  b          convergence of monte carlo tree
search in simultaneous move games  in advances in neural information processing
systems  nips   vol      pp           
mcmahan  h  b          robust planning in domains with stochastic outcomes  adversaries  and partial observability  ph d  thesis  carnegie mellon university 
mcmahan  h  b     gordon  g  j          a fast bundle based anytime algorithm for
poker and other convex games  journal of machine learning research   proceedings
track            
mcmahan  h  b   gordon  g  j     blum  a          planning in the presence of cost
functions controlled by an adversary  in proceedings of the international conference
on machine learning  pp         
miltersen  p  b     srensen  t  b          fast algorithms for finding proper strategies
in game trees  in proceedings of symposium on discrete algorithms  soda   pp 
       
miltersen  p  b     srensen  t  b          computing a quasi perfect equilibrium of a
two player game  economic theory                 
pita  j   jain  m   western  c   portway  c   tambe  m   ordonez  f   kraus  s     parachuri 
p          deployed armor protection  the application of a game theoretic model
for security at the los angeles international airport  in proceedings of the  th international conference on autonomous agents and multiagent systems  aamas   pp 
       
ponsen  m  j  v   de jong  s     lanctot  m          computing approximate nash equilibria and robust best responses using sampling  journal of artificial intelligence
research  jair              
sandholm  t          the state of solving large incomplete information games  and
application to poker  ai magazine  special issue on algorithmic game theory    
   
selten  r          reexamination of the perfectness concept for equilibrium points in
extensive games  international journal of game theory          
selten  r          spieltheoretische behandlung eines oligopolmodells mit nachfragetrgheit
 an oligopoly model with demand inertia   zeitschrift fur die gesamte staatswissenschaft              
shafiei  m   sturtevant  n     schaeffer  j          comparing uct versus cfr in simultaneous games  in ijcai workshop on general game playing 
shieh  e   an  b   yang  r   tambe  m   baldwin  c   direnzo  j   meyer  g   baldwin  c  w  
maule  b  j     meyer  g  r          protect   a deployed game theoretic system
to protect the ports of the united states  in international conference on autonomous
agents and multiagent systems  aamas   pp       
   

fibosansky  kiekintveld  lisy    pechoucek

shoham  y     leyton brown  k          multiagent systems  algorithmic  gametheoretic  and logical foundations  cambridge university press 
tambe  m          security and game theory  algorithms  deployed systems  lessons
learned  cambridge university press 
tsai  j   rathi  s   kiekintveld  c   ordonez  f     tambe  m          iris   a tool
for strategic security allocation in transportation networks categories and subject
descriptors  in proceedings of the  th international conference on autonomous agents
and multiagent systems  aamas   pp       
van damme  e          a relation between perfect equilibria in extensive form games
and proper equilibria in normal form games  game theory          
van damme  e          stability and perfection of nash equilibria  springer verlag 
von stengel  b          efficient computation of behavior strategies  games and economic
behavior             
wilson  r          computing equilibria of two person games from the extensive form 
management science                 
zinkevich  m   johanson  m   bowling  m     piccione  c          regret minimization
in games with incomplete information  advances in neural information processing
systems  nips                
zinkevich  m   bowling  m     burch  n          a new algorithm for generating equilibria
in massive zero sum games  in proceedings of national conference on artificial
intelligence  aaai   pp         

   

fi