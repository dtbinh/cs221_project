journal of artificial intelligence research                  

submitted        published     

exploiting single cycle symmetries in
continuous constraint problems
vicente ruiz de angulo
carme torras

ruiz iri upc edu
torras iri upc edu

institut de robotica i informatica industrial  csic upc 
llorens i artigas            barcelona  spain 
www home page  www iri upc edu

abstract
symmetries in discrete constraint satisfaction problems have been explored and exploited in the last years  but symmetries in continuous constraint problems have not received the same attention  here we focus on permutations of the variables consisting of
one single cycle  we propose a procedure that takes advantage of these symmetries by
interacting with a continuous constraint solver without interfering with it  a key concept
in this procedure are the classes of symmetric boxes formed by bisecting a n dimensional
cube at the same point in all dimensions at the same time  we analyze these classes and
quantify them as a function of the cube dimensionality  moreover  we propose a simple
algorithm to generate the representatives of all these classes for any number of variables at
very high rates  a problem example from the chemical field and the cyclic n roots problem
are used to show the performance of the approach in practice 

   introduction
symmetry exploitation in discrete constraint satisfaction problems  csps  has received a
great deal of attention lately  since csps are usually solved using ai search algorithms  the
approaches dealing with symmetries fall into two groups  those that entail reformulating the
problem or adding constraints before search  flener  frisch  hnich  kiziltan    miguel       
puget         and those that break symmetries along the search  meseguer   torras       
gent         permutations of variables  and interchangeability of values are commonly
addressed symmetries for which a repertoire of techniques have been developed  most of
them relying on computational group theory 
on the contrary  symmetries have been largely disregarded in continuous constraint
solving  despite the important growth in both theory and applications that this field has
recently experienced  sam haroud   faltings        benhamou   goualard        jermann
  trombettoni        porta  ros  thomas    torras         continuous  or numerical 
constraint solving is often tackled using branch and prune  b p  algorithms  hentenryck 
mcallester    kapur        vu  silaghi  sam haroud    faltings         which iteratively
locate solutions inside an initial domain box  by alternating box subdivision  branching 
and box reduction  pruning  steps 
motivated by a molecular conformation problem  in this paper we deal with the most
simple type of box symmetry  namely that in which some domain variables  i e   box dimensions  undergo a single cycle permutation leaving the constraints invariant  to be clear  if
the cycle involves n variables  our algorithm handles the n    symmetries  excluding the
c
    
ai access foundation  all rights reserved 

firuiz de angulo   torras

identity  generated by this cycle by composition  since the computational gain will be
shown to be roughly proportional to n  the longest cycle appearing in the problem formulation should be chosen as input to our algorithm 
this single cycle permutation that leaves the constraints unchanged is a form of constraint symmetry in the terminology introduced by cohen  jeavons  jefferson  petrie  and
smith         note that any constraint symmetry is also a solution symmetry  but not the
other way around  thus  the symmetries we deal with are a subset of all possible solution
symmetries  the advantage is that they can be assessed  although perhaps are difficult to
find  from the problem formulation  therefore being operative 
our approach to exploit symmetries in continuous constraint problems requires the
initial domain for the symmetric variables to be an n cube  as it starts by subdividing this
cube at the same point along all dimensions at once  since box symmetry is a transitive
relation  the subboxes resulting from the subdivision fall into equivalence classes  then  a
b p algorithm  or any similar continuous constraint solver  is called on only the subboxes
that are representatives of each symmetry equivalence class  finally  for each solution found 
all its symmetric ones are generated  note that symmetry handling doesnt interfere with
the inside workings of the constraint solver 

   symmetry in continuous constraint problems
we are interested in solving the following general continuous constraint satisfaction problem  continuous csp   find all points x    x            xn   lying in an initial box of rn satisfying
the constraints f   x   c            fm  x   cm   where fi is a function fi   rn  r  and ci is
an interval in r 
the only particular feature that we require of a continuous constraint solver  ccs 
is that it has to work with an axis aligned box in rn as input  also  we assume that the
ccs returns solution boxes  note that a ccs returning solution points is a limit case still
contained in our framework 
we say that a function s   rn  rn is a point symmetry of the problem if there exists an
associated permutation   m such that fi  x    f i   s x   and ci   c i    i              m 
we consider symmetry as a property that relates points that are equivalent as regards to a
continuous csp  concretely  from the above definition one can conclude that
 x is a solution to the problem iff s x  is a solution to the problem 
let s and t be two symmetries of a continuous csp with associated permutations s
and t   it is easy to see that the composition of symmetries s t    is also a symmetry with
associated permutation s  t     
an interesting type of symmetries are permutations  bijective functions of a set onto
itself  of the components of x  let d be a finite set  a cycle of length k is a permutation
 such that there exist distinct elements a          ak  d such that  ai      a i   mod k  
and  z    z for any other element z  d  such a cycle is represented as  a          ak   
every permutation can be expressed as a composition of disjoint cycles  i e  cycles without
common elements   which is unique up to the order of the factors  composition of cycles is
represented as concatenation  as for example  a          ak   b          bl    in this paper we focus
on a particular type of permutations  namely those constituted by a single cycle  in its
   

fiexploiting single cycle symmetries

simplest form    this is s x    x          xn      x      x            x n       x    x     xn   x     where
 i     i      mod n 
example  n      m      x    x    x    x                            
f   x   

x     x     x            x     x     x      

f   x   

 x   x           x   x     

f   x   

 x   x           x   x     

f   x   

 x   x           x   x     

there exists a symmetry s x    x    x       x    x    x     for which there is no need of reordering the variables  the constraint permutation associated to s is                  
         and         
generally there is not a unique symmetry for a given problem  if there exists a symmetry
s  then for example s   x    s s x   is another symmetry  in general  using the convention of
denoting s   x  the identity mapping   si  x   i           n   is the set of different symmetries
that can be obtained composing s x  with itself  while for i   n we have that si  x   
si mod n  x   thus  a single cycle symmetry generates by composition n    symmetries 
excluding the trivial identity mapping  some of them may have different numbers of cycles 
imagine for example that in a continuous csp with n     the permutation of variables   
       is a symmetry  then  the permutation obtained by composing it twice             
is also a symmetry of the problem  but has a different number of cycles  and the longest
cycle has length two instead of four  besides  the former permutation cannot be generated
from the latter  the algorithm presented in this paper deals with all the compositions
of a single cycle symmetry  even if some of them are not single cycle symmetries  the
gain obtained with the proposed algorithm will be shown to be roughly proportional to
the number of different compositions of the selected symmetry  therefore  when several
single cycle symmetries exist in a continuous csp problem  the algorithm should be used
with that generating the most symmetries by composition  i e   with that having the longest
cycle  note that the single cycle permutations we are dealing with need not encompass all
the problem variables  since the the remaining ones will be considered fixed  unitary cycles  

   box symmetry
since continuous constraint solvers work with boxes  we turn our attention now to the set
of points symmetric to those belonging to a box b  rn    
let s be a single cycle symmetry corresponding to the circular variable shifting  introduced in the preceding section  and b    x    x         xn   xn   a box in rn   the box symme   in general  the variables must be arranged in a suitable order before one can apply the circular shifting  thus  the general form of a single cycle symmetry is s x    h   g h x     where
h x          xn      x              x n       n is a general permutation that orders the variables  and
g x            xn      x            x n    is the circular shifting above  thus  the cycle  defining the symmetry can be expressed as              since the reordering does not change substantially the
presented concepts and algorithms  we have simplified notation in the paper by assuming that the order
of the component variables is the appropriate one  i e   that      
   this set  s x  s t  x  b  is also a box if s x     s   x           sn  x      g   x               gn  x n      where
si is the i th component of s   is an arbitrary permutation  and gi   r  r is any function such that if
i is an interval of r then  gi  x  s t  x  i  is also an interval of r 

   

firuiz de angulo   torras

try function s is defined as s b     s x  s t  x  b     x      x               x n    x n     
 x    x             xn   xn     x    x     the box symmetry function has also an associated constraint permutation   which is the same associated to s  s i will denote s composed i
times  we say  then  that b  and b  are symmetric boxes if there exists i s t  s i  b      b   
box symmetry is an equivalence relation defining symmetry equivalence classes  let
r b  be the set of different boxes in the symmetry class of b  r b     s i  b   i              n
     for instance  for box b                                                     r b     is composed
of s    b       b     s    b                                            and s    b                   
                          note that s    b     is again b   itself and that subsequent applications
of box symmetry would repeat the same sequence of boxes  we define the period p  b  of
a box b as p  b     r b    it is easily shown that r b     s i  b   i              p  b       
for example  for box b     r b        s    b      s    b      s    b      and p  b         
box symmetry has implications for the continuous csp  which are a direct consequence
of the point symmetry case 
 if there is no solution inside a box b  there is no solution inside any of its symmetric
boxes either 
 a box b  b is a solution iff s i  b    s i  b  is a solution box for all i           p  b  
   
sketch of proof for the first statement  assume there is no solution inside b and there is
some solution xsol inside s i  b   by definition of box symmetry there exists a point x sol  b
such that xsol   si  x sol    using the property highlighted in section   we deduce that x sol
must be also a solution  which contradicts the hypothesis 
sketch of proof for the second statement  a solution box is a box with at least a solution
point inside  assume b  b is a solution box containing the solution point xsol   inside
s i  b   there is the point si  xsol   that  by the property highlighted in section    must be
also a solution  conversely  assume now that s i  b    b is a solution box  thus it contains
at least a solution point  xsol   by definition of symmetric box  this point has a symmetric
point x sol  b such that xsol   si  x sol    using the property in section   again we conclude
that x sol must be also a solution and  thus  b is a solution box 
both statements can be rephrased as follows  
 if the set of solution boxes contained in a box b is solset  the set of solution boxes
contained in its symmetric box s i  b  is  s i  b   s t  b  solset 
this means that once the solutions inside b have been found  the solutions inside its
symmetric boxes s i  b   i           p  b      are available without hard calculations  in the
following sections we will show how to exploit this property to save much computing time
in a meta algorithm that uses a ccs as a tool without interfering with it 
    box symmetry classes obtained by bisecting a n cube
the algorithm we will propose to exploit box symmetry makes use of the symmetry classes
formed by bisecting a n dimensional cube i n  i e   of period    in all dimensions at the
same time and at the same point  resulting in  n boxes  we will denote l and h the
two subintervals into which the original range i is divided  for example  for n      we
   

fiexploiting single cycle symmetries

have the following set of boxes  l  l  l  h  h  l  h  h  whose periods are      
  and    respectively  and their symmetry classes are   l  l    l  h  h  l   and
 h  h   representing the two intervals l and h as   and    respectively  and dropping
the  symbol  the sub boxes can be coded as binary numbers  let srn be the set of
representatives  formed by choosing the smallest box in binary order from each class  for
example  sr                  note that the cube i n to be partitioned can be thought of
as the the set of binary numbers of length n  and that srn is nothing more than a subset
whose elements are different under circular shift 
the algorithm for exploiting symmetries and the way it uses srn are explained in the
next section  afterwards  in sections   and    we study how many components srn has 
how they are distributed and  more importantly  how can they be generated 

   algorithm to exploit box symmetry
algorithm    csym  algorithm 
input  a n cube   xl   xh         xl   xh   
a single cycle box symmetry  s 
a continuous constraint solver  ccs 
output  a set of boxes covering all solutions 

 

solutionboxset  emptyset
x  selectbisectionpoint xl   xh  
foreach b  srn do
b  generatesubbox b  xl   xh   x  
solutionboxset  solutionboxset  processrepresentative b 

 

return solutionboxset

 
 
 
 

the symmetry exploitation algorithm we propose uses the ccs as an external routine 
the internals of the ccs must not be modified or known 
the idea is to first divide the initial box into a number of symmetry classes  next  one
needs to process only a representative of each class with the ccs  at the end  by applying
box symmetries to the solution boxes obtained in this way  one would get all the solutions
lying in the space covered by the whole classes  i e   the initial box  the advantage of this
procedure is that the ccs would have to process only a fraction of the initial box  assuming
that the initial box is a n cube covering the same interval  xl   xh   in all dimensions  we can
directly apply the classes associated to srn   a procedure to exploit single cycle symmetries
in this way is presented in algorithm   
since srn is a set of codes not real boxes we need a translation of the codes into
boxes for the given initial box  the operator generatesubbox b  xl   xh   x   returns the
box v   v       vn corresponding to code b   b        bn when  xl   xh   is the range of the
initial box in all dimensions and x is the point in which this interval is bisected 
 
 xl   x   if bi     
vi  
   
 x   xh   if bi     
   

firuiz de angulo   torras

the point x calculated by selectbisectionpoint xl   xh   can be any such that xl  
  xh   but a reasonable one is  xl   xh      the iterations over line   generate a set of
representative boxes such that  together with their symmetries  cover the initial n cube 
processrepresentative b  returns all the solution boxes associated to b  that is  the
solutions inside r b   or still in other words  the solutions inside b and inside its symmetric
boxes  processrepresentative b  is based on the property stated at the end of section
   which allows to obtain all the solutions in the class of b by processing only b with the
ccs  solset is the set of solutions found inside the representative box of the class  b 
applysymmetry solset  s i   calculates the set of solutions of box s i  b  by applying s i
to each of the boxes in solset  since the number of symmetries of b is p  b   the benefits
of exploiting the symmetries of a class representative is proportional to its period 
x

algorithm    the processrepresentative function 
input  a box  b 
a single cycle box symmetry  s 
a continuous constraint solver  ccs 
output  the set of solution boxes contained in b and its symmetric boxes 

 

solset  ccs b 
t otalsolset  solset
for i    p  b     do
t otalsolset  t otalsolset  applysymmetry solset  s i  

 

return t otalsolset

 
 
 

the correctness of the algorithm is easy to check  the set of boxes in which it searches explicitly or implicitly  by means of symmetry  for solutions is u    r b  s t  b is a representative  
in fact  u is the set of boxes formed by bisecting the initial box in all dimensions at the same
time and at the same point  u covers the whole initial box and  thus  the algorithm finds
all the solutions of the problem  moreover  it finds each solution box only once  because
the boxes in u do not have any volume in common  they share at most a wall  
    discussion on the efficiency of csym 
the csym  algorithm launches the ccs algorithm on  srn   small boxes instead of on only
the original large one  three factors affect its efficiency as compared to that of the standard
approach 
   fraction of domain processed  only a fraction of the original domain is directly
dealt with by the ccs  this fraction is a function of the periods of the srn components  one element of period p represents a class formed by p boxes  only one of
which is processed with the ccs  since all the boxes of the classes are of equal size 
the above fraction can be calculated by dividing the number of representatives by the
n 
p  srn  
total number of boxes in the classes   sr
 n  
p  b    the expected time gain
p

bsrn

p  b 

n
is the inverse of this quantity  bsr
denoted by ifdp  inverse of the fraction
 srn  
of domain processed   when n grows  see section     the majority of the elements

   

fiexploiting single cycle symmetries

of srn have period n  and thus ifdp tends to n  however  for low n  ifdp can
be significantly smaller than n  this is the main factor determining the efficiency of
csym  
   smaller processed boxes  since the ccs initial boxes using csym  are  n times
smaller than the original initial box  the average size of the boxes processed by the
ccs is also smaller than in the standard case  prune  box reduction or contraction 
step is carried out more quickly on smaller boxes in branch and prune algorithms 
in fact  best branch and prune algorithms have box contraction operators exhibiting
second order convergence  but this contraction rate requires small enough boxes to
hold in practice 
   number of representatives  there is a disadvantage in fractioning excessively
the initial domain  we can see this by noting that  using the original large initial
box  if a contraction operator lowers the upper bound of a symmetric variable  this
information could be used to lower the upper bound of the same variable in many
representative boxes in srn   as commented above  this contraction operator would
act more strongly on the representatives themselves  but the loss of parallelization
effect is anyway present  this factor is irrelevant for small length cycle symmetries 
say up to n      because  srn   is very small  see section   again  as compared to the
number of boxes that a ccs must process in general  however  when n approaches
    the number of representatives begins to become overwhelming 

   two illustrative examples
the two problems below have been solved with the branch and prune ccs presented by
porta  ros  thomas  corcho  canto  and perez         it is a polytope based method
similar to that of sherbrooke e  c         with global consistency  which exhibits quadratic
convergence  the machine used to carry out all the experiments in the paper is a     ghz
g  apple computer 
    cycloheptane
molecules can be modeled as mechanical chains by making some reasonable approximations 
if two atoms are joined by a chemical bond  one can assume that there is a rigid link between
them  thus  the first approximation is that bond lengths are constant  the second one
is that the angles between two consecutive bonds are also constant  in other words  the
distances between the atoms in any subchain of three atoms are assumed to be constant  all
configurations of the atoms of the molecule that satisfy these distance constraints  sometimes
denoted rigid geometry hypothesis  are valid conformations of the molecule in a kinematic
sense  the constraints induced by the rigid geometry hypothesis are particularly strong
when the molecule topology forms loops  as in cycloalkanes  the problem of finding all
valid conformations of a molecule can be formulated as a distance geometry  blumenthal 
      problem in which some distances between points  atoms  are fixed and known  and
one must find the set of values of unknown  variable  distances that are compatible with
the embedding of the points in r    the unknown distances can be found by solving a set
   

firuiz de angulo   torras

of constraints consisting of equalities or inequalities of determinants formed with subsets of
the fixed and variable distances  blumenthal        

d 
d 

d 
d 

d 

d 

d 

figure    cycloheptane  disks represent carbon atoms  constant and variable distances
between atoms are represented with continuous and dashed lines  respectively 

figure    three dimensional projection of the cycloheptane solutions  the lightest  yellow 
boxes are the solutions found inside the representatives using the ccs  line   in
algorithm     the other colored boxes are the solutions obtained by applying
symmetries to the yellow boxes  line   in algorithm    

figure   displays the known and unknown distances of the cycloheptane  a molecule basically composed of a ring of seven carbon atoms  the distance between two consecutive atoms
of the ring is constant and equal everywhere  the distance between two atoms connected to
   

fiexploiting single cycle symmetries

a same atom is also known and constant no matter the atoms  the problem in underconstrained  having an infinite number of solutions of dimensionality    the problem has several
symmetries  we use one of them  s d            d       d      d              d         d    d          d    d    
the length of the only cycle of this symmetry is n      for which ifdp is     
the number of boxes processed using the raw ccs without symmetry handling is      
while using csym  the total number is      giving a ratio of       ifdp  the problem is
solved in      minutes using csym   which compares very favorably with the      minutes
spent when using the algorithm of porta et al         alone  a reduction by a factor of      
slightly greater than ifdp  this means that  although the number of representatives begins
to be relevant   sr           factor   in section     is more determining than factor   in
the same section  since the  small  time overhead introduced by handling box symmetries
is also included in the reported time  figure   shows a projection into d    d  and d  of the
solutions obtained using csym   the solutions were found inside five representative boxes
of period seven  containing              and   solution boxes  respectively  at the chosen level
of resolution  the total number of solutions boxes is therefore                     
    cyclic n roots problem
the following polynomial equation system is the n     instance of the so called cyclic
n roots problem as described by bjorck and froberg        

x    x    x    x    x     
x  x    x  x    x  x    x  x    x  x     
x  x  x    x  x  x    x  x  x    x  x  x    x  x  x     
x  x  x  x    x  x  x  x    x  x  x  x    x  x  x  x    x  x  x  x     

   

x  x  x  x  x        

there are ten real solutions to this problem  the system has a single cycle symmetry 
s x            x       x    x    x    x    x     as well as a multiple cycle symmetry not considered in
this paper  thus  the cycle length is n       sr         and the ifdp is    when running
the ccs alone using as initial box             the number of processed boxes is      while
exploiting the aforementioned symmetry with the csym  algorithm this number reduces
to     in the last case  two solutions were found in a representative box of period    which
through symmetry led to the ten solutions  running times are       seconds  ccs alone 
and      seconds  csym   giving a gain of more than eight  this is the double of the ifdp 
which highlights the benefits that factor   in section     can bring to the efficacy of the
approach  the number of representatives is very small compared to the number of boxes
processed by the ccs alone  making factor   in section     irrelevant in this case 
table   contains the results for n   to n   of the cyclic n roots problem in the         n
domain  except for n   for which the domain was           for n   and n   there is a
continuum of solutions which  with the chosen resolution  produces     and      solution
boxes  respectively  because of this  the number of processed boxes for n   is smaller
than for n    but logically smaller also than for n   to n    two observations can be
   

firuiz de angulo   torras

ifdp
number of processed boxes ccs alone
number of processed boxes csym 
rate of processed boxes
time ccs alone
time csym 
time gain csym 

n  

n  

n   

n  

   
    
   
   
    
   
   

   
   
  
   
    
   
   

   
    
   
   
     
    
   

   
     
    
   
       
      
   

n  
 reduced domain 
   
      
     
   
        
       
   

table    results for the n cyclic roots problem  times are given in seconds 

made  first  the time gains are always higher than the corresponding ifdps  implying a
preponderance of factor   in section     over factor    second  the time gain follows rather
accurately the rate between the number of processed boxes using the ccs alone and using
csym  
tests on the cyclic n roots problem using a classical ccsp solver  realpaver  granvilliers   benhamou         have been carried out  jermann         the results are preliminary and difficult to expose concisely  since there is a great variability depending on issues
such as the pruning method used  realpaver offers several options  and how the problem
is coded  factorized or not   in every case  however  we have observed time gains greater
than expected by the ifdp 

   analysis of srn   counting the number of classes
let us define some quantities of interest 
 nn   number of elements of srn  
 fp n   number of elements of srn that correspond to full period boxes  i e   boxes of period
n 
 nnm   number of elements of srn having m  s 
 fp nm   number of elements of srn that correspond to full period boxes having m  s 
polyas theorem  polya   read        could be used to determine some of these quantities for a given n by building a possibly huge polynomial and elucidating some of its
coefficients  we present a simpler way of calculating them and  at the same time  make the
reader familiar with the concepts that will be used in our algorithm to generate srn  
we begin by looking for the expression of fp n   when any number of  s is allowed 
the total number of binary numbers is  n   the only periods that can exist in these binary
numbers are divisors of n  thus  the following equation holds 
x

p fp p    n  

pdiv n 

segregating p   n 
   

   

fiexploiting single cycle symmetries

x

n fp n  

p fp p    n  

   

p
fp p  
n

   

pdiv n   p n

and solving for fp n  
fp n  

 n

n

x
pdiv n   p n

this recurrence has a simple baseline condition  fp       
then  nn follows easily from
nn  

x

fp p  

   

pdiv n 

segregating p   n  a more efficient formula is obtained 
nn  

 n
 
n

x
pdiv n   p n

np
fp p  
n

   

this formula is valid for n      the remaining case is n      

n
we will use similar techniques to obtain fp nm and nnm   there are m
binary numbers
having m  s and n  m  s  some of these binary numbers are circular shifts of others
 like        and          the number of shifted versions of a binary number is the period
of the box being represented by the binary number  for example        of period    has
only another shifted version        a binary number representing a box of period p can be
n
seen as a concatenation of n p numbers of length n p
  p and period p  this means that
m
these concatenated numbers are full period  and they have n p
 s  thus  the number of
binary numbers of period p when shifted numbers are counted as the same  i e   the number
n
m   only common divisors of n and m  which we denote
of classes of period p  is fp n p
n p
div n  m   can be periods  since there are p shifted versions of each binary number having
period p  we can write
 
x
n
n
m  
p fp n p
 
   
n p
m
pdiv n m 

with a change of variable f   n p we get
x
f div n m 

n
fp nf mf  
f

 
n
 
m

   

note that the index of the summation goes through the same values as before  we can
segregate the case f     from the summand 
 
x
n
n
n fp nm  
fp nf mf  
 
    
f
m
f div n m   f   

and  finally  we obtain
   

firuiz de angulo   torras

fp nm  

n
m



n

fp nf mf

x



f

f div n m   f   

 

    

this is a recurrence relation from which fp nm can be computed using the following
baseline conditions 
 
 
 
 

fp nn   fp n 

if n    
if n    

    

nnm is obtained adding up the number of classes of each period 
nnm  

x

fp nf mf  

    

f div n m 

segregating again f      a more efficient formula is obtained 
nnm  

 
n
 
m

x

n
 fp nf mf  
f

    

    p fp p mp  

    

   

f div n m   f   

then carrying out the change of variable p   n f  
nnm  

 
n
 
m

x

n

pdiv n m   p n

note the change in the summation range  this equation is valid whenever m     and
m   n  otherwise  nnm     
it is possible to extend the concept of fp n  and fp nm   to reflect the number of members
p
  
of srn having period p  and m  s   which we denote nnp  nnm
nnp

p
nnm

 
 
 
fp p

if p 
  div n 
otherwise

 
 
 
fp p  mp
n

if p 
  div n  m 
otherwise

    

    

figure   a  displays the number of classes  nn   as a function of n  the curve indicates
an exponential like behavior  this is confirmed in figure   b  using a larger logarithmic
scale  in which the curve appears almost perfectly linear  figure   is an example of the
distribution of classes by period for n       figure   shows the percentage of full period
classes in srn      nnn  nn    one can see that the percentage of classes with period different
from n is significant for low n  but approaches quickly   as n grows  finally  figures   a 
and   b  display the distribution of the classes in srn by number of  s for n      and
n        respectively  the majority of the classes concentrates in an interval in the middle
of the graphic  around n    this interval becomes relatively smaller when n grows 
   

finumber of classes of symmetric boxes

   
   
   
   
   
   
  
 

 

 

 

 

  

  

 x    
 x    
 x   
 x   
 x   
 x   
 x   
 x   
 x   
 x   
 x   
 

 

 

box dimensionality  i e   number of variables 

  

  

  

  

  

 b 

figure    number of elements of srn as a function of n 

   

  

 

 

 

 

 

  

box dimensionality  i e   number of variables 

 a 

number of classes of symmetric boxes

number of classes of symmetric boxes

exploiting single cycle symmetries

 

 

 

 

 

  

  

  

box period

figure    number of elements of sr   distributed by period 

   

  

firuiz de angulo   torras

   generating srn   the classes of symmetric boxes
the naive procedure to obtain srn would initially generate all boxes originated by bisecting
a n dimensional cube at the same point in all dimensions at the same time  then  one should
check each of the boxes in this set to detect whether it is a circular shift of some of the
others  the complete process of generating srn in this way involves a huge number of
operations even for rather small dimensions  although the srn for a few ns could be precomputed and stored in a database  we suggest here an algorithm capable of calculating
srn on the fly without significant computational overhead 

percentage of full period classes

   

  

  

  

  

 
 

 

 

 

  

  

  

  

  

  

box dimensionality  i e   number of variables 

figure    percentage of full period elements in srn as a function of n 

number of classes of symmetric boxes

number of classes of symmetric boxes

as made for counting  we distinguish different subsets of srn on the basis of the number
of  s and the period 
 srnm   subset of the elements of srn having m  s 
 srpnm   subset of the elements of srn having m  s and period p 
srpn   subset of the elements of srn having period p 
from a global point of view  the generation of srn is carried out as follows  first 
srn  is generated  which is constituted always by a unique member  afterwards  all srnm

  
  
  
  
  
  
  
 

 

 

 

 

 

  

  

 x    
 x    
 x    
 x    
 x    

 

 

  

  

  

  

   

number of  s in the code

number of  s in the code

 a 

 b 

figure    number of elements of srn distributed by number of  s   a  n       b  n     

   

fiexploiting single cycle symmetries

for m           n are generated  the generation of srnm is divided in each of the srpnm  
p  div n  m   that compose it  the algorithm classgen described below generates all
full period representatives for any given number of variables n     and number of ones
m      i e   it generates srnnm   the representatives of a lower period p  div n  m  are
obtained by concatenating one same block n p   f times  therefore  in order to obtain
srpnm   we generate srpp m with our same algorithm  and then concatenate their elements
f

f times  thus  without loss of generality  in what follows we describe the workings of the
algorithm classgen when it computes codes of full period  namely n 
we use a compact coding of the binary numbers representing the boxes consisting in
ordered lists or chains of numbers  the first number of the code is the number of  s
appearing before the first   in the binary number  the i th number of the code for i     is
the number of  s between the  i   th and the i th  s of the binary number  for example 
the number            is codified as        the length of this numerical codification is
the number of  s of the codified binary number  which has been denoted by m 
there are binary numbers that cannot be codified in this way  because their last digit
is    but  except for the all zeros case  there is always an element of its class that can be
codified correctly  for example      is an element of the class of        as our objective is
to have only a representative of each class  this is rather an advantage  because half of the
boxes are already eliminated from the very beginning  the all zeros box  srn    is common
to every n  and will be generated separately  as already mentioned 
the codification allows to determine if a box is full period in the same way as in the
binary representation  the box has period n iff after a number of circular shifts lower than
the length of the numerical chain the result is never equal to the original  for instance  the
example above is full period  but     corresponding to         is not  the only difference
is that  in the new representation  at most m shifts must be compared 
the code of a box can be seen as a number of base n  m  in a full period box  the m
circular shifts of the code are different numbers  and can be arranged in strictly increasing
numerical order  we will take as representative box of a class the largest element of the
class when expressed as a code  which is the smallest when expressed as a binary number  
for example  the class of     has two other elements that can be represented by our coding 
    and      the latter being the chosen representative of the class 
note that a box belonging to srnm has n  m  s or  equivalently  the sum of the
components of the code is n  m 
the output of the algorithm are all codes of length m  whose sum of components is
n  m  and which are both representatives of a class and full period  codes of length m
whose components sum up a desired number are rather easy to generate systematically 
the representativeness and full period conditions are more difficult to guarantee efficiently 
we can handle them by exploiting the properties of our codes stated below  which make
use of the definition of i compability 
we say that a code is i compatible or compatible for position i if a sub chain of it
beginning at position i     and ending at the last position m  thus of length m  i     
is strictly smaller in numerical terms than the sub chain of the same length beginning at
the first position  for example         is compatible for positions   and    but it is not
  compatible 
   

firuiz de angulo   torras

property   a code is a class representative and it is full period iff it is i compatible for
all i s t      i   m 
thus  instead of comparing chains of length m  i e   the code and its shifted versions  
we can determine the code validity comparing shorter sub chains  a second property helps
us to devise a still faster and simpler algorithm 
property   if a code is i compatible and the sub chain from position i to i   l is equal to
the sub chain from position   to     l then the code is also compatible for positions i    
through i   l 

algorithm    codevalidity algorithm 
input  a code of length m expressed as an array  a 
output  a boolean value indicating whether the code is valid  i e   whether it is
full period and a class representative 
 
 
 
 
 
 
 
 
 
  

i 
ctrol   
v alidcode  true
while v alidcode   i   m do
if a i    a ctrol  then v alidcode  f alse
else if a i    a ctrol  then ctrol   
else ctrol  ctrol     
ii  

   a i    a ctrol    

if a m   a ctrol  then v alidcode  f alse
return validcode

this property is interesting because it permits checking the validity of the code by
travelling along it at most once  as shown in algorithm    the trick is that when the decision
of i compatibility is being delayed because position i and the following numbers are the same
as those at the beginning of the string  if it finally resolves positively  the compatibility for
the intermediate numbers is also guaranteed  hence  i compatibility is either resolved with
a simple comparison or it requires l comparisons  in the latter case  either the compatibility
of l positions is also resolved  if the outcome is positive  or compatibility of intermediate
positions doesnt matter  because the outcome is negative and  thus  the code can be labelled
non valid without further checks   a ctrol variable is in charge of maintaining the last index
of the head sub chain that is being compared in the current compatibility check  when
examining the compatibility of the current position i  if its value is lower than that of the
ctrol position  the code is for sure i compatible and therefore we must only worry about
 i      compatibility by back warding ctrol to the first position  if the value of the ctrol
position is equal to that of the current position i  the compatibility of position i is still to be
ascertained  and we continue advancing the current and the ctrol positions until the equality
disappears  in other words  the only condition that must be fulfilled for non rejecting as
invalid a code at position i is that
   

fiexploiting single cycle symmetries

algorithm    classgen algorithm 
input  the sum of the numbers that remain to be written on the right  from
position pos to m   sum 
the index of the next position to be written  pos 
the index of the current control element  whose value cannot be surpassed in
the
next position  ctrol 
the length of the code  m 
array where class codes are being generated  a 
output  a set of codes representing classes  sr 
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  
  
  
  

sr  emptyset
if pos   m then
if sum   a ctrol  then
a m   sum
sr   a  

   otherwise  sr will remain emptyset   

else
if pos     then
lowerlimit   dsum me
u pperlimit  sum
else
lowerlimit    
u pperlimit  minimum a ctrol   sum 
for i   u pperlimit to lowerlimit do
a pos   i
if i   a ctrol sand pos      then
   i   a ctrol    u pperlimit   
sr  sr classgen sum  i  pos      ctrol      m  a 
else
   i   a ctrol  or pos       
s
sr  sr classgen sum  i  pos         m  a 

  
  

return sr

a i    a ctrol  

    

a condition that is transformed into a i    a ctrol  when i   m to resolve the last of the
pending compatibility checks  as an aside  note that our codes are more general than the
raw binary numbers  and that representativeness and full periodness are defined in the same
way for both  therefore  the three properties and the codevalidity algorithm apply also
to the raw binary numbers 
a rather direct way to generate srnnm would be to generate all the codes of length
m whose sum of components is n  m  the number of zeros when expressed as a binary
number  and then filter each of them with codevalidity  instead  we have taken a more
   

firuiz de angulo   torras

efficient approach  generating only the codes that satisfy the conditions that need to be
checked explicitly in codevalidity  therefore  algorithm    presented only for clarity
purposes  is not used 
our main procedure to obtain all full period representatives having m  s  i e   srnnm  
is the recursive program presented in algorithm    classgen n  m        m  a   where a
is an array of length m  must be called to obtain srnnm   for any given n      m      each
call to the procedure writes a single component of the code at the position of a indicated
by the parameter pos  beginning with pos      which is subsequently incremented at each
recursive call  the recursion finishes at the rightmost end of the code  when pos   m  the
first parameter  sum  is the sum of the components of the code that remain to be written 
the range of values written at each position pos is limited by lowerlimit and u pperlimit 
except for the last position m  in the following we show the correctness of the algorithm
by verifying that these limits are chosen to satisfy the two requirements of the code 
 the sum of the numbers of any code completed by the algorithm must be nm  first 
recall that the initial call to the algorithm is done using a parameter sum   n  m 
in any position    pos   m the number to be written must be greater than or
equal to the sum of the numbers still to be written  quantity represented by sum  so
that in subsequent positions it will be possible to write positive integers  or at least
zeros  this condition is imposed to u pperlimit in line   for pos     and in line   
 juxtaposed to code validity conditions  for     pos   m  the number written at
pos is substracted from the sum parameter in the next recursive call  finally  for
pos   m  the only possibility to satisfy the sum condition is to assign the value of
sum to the last element of the code 
 the code validity conditions  just as in codevalidity  are that the number to be
written in position pos must be smaller than or equal to a ctrol  for     pos   m 
and strictly lower than a ctrol  for pos   m  these conditions are reflected in the
u pperlimit assignments made in lines    and    respectively  lowerlimit is usually
 pos      line    set to the smallest possible element of the codes     but at the
beginning of the code  pos      line    a more tight value can be chosen since  for
a value lower than the upper rounded value dsum me  there is no way to distribute
what remains of sum among the other positions of the code without putting a value
greater than the initial one  which would make any such code non representative 
the maintenance of the ctrol variable is similar to that within the codevalidity
algorithm  if we write in pos something strictly minor than a ctrol   ctrol is back warded
to the first position  otherwise  ctrol is incremented by   for the next recursive call to write
pos     
the output of the algorithm is a list of valid codes in decreasing numerical order  for
instance  the output obtained when requesting sr    with classgen             a  is       
                                         in this example  the only case in which the recursion
arrives to pos   m without returning a valid code is the frustrated code      whose last
number is not written because the code is not full period 
figure   displays quantitative results that reflect the efficiency of classgen  the
dashed line accounts for the complete times required to generate all the class representatives
   

fiexploiting single cycle symmetries

total time
millions of representatives per second

   

  

   

 
  
   
  

   

total time  seconds 

number of representatives  millions second 

  

   

 

   
 
 

  

  

  

  

  

 

dimensionality  number of variables 

figure    total time  dashed line  to generate srn   and rates of generation  continuous
line  of class representatives as a function of n 

srn for n     to n       it is worth noting that only sr   requires more than a second to be
entirely generated  the continuous line encodes the division of  srn   by the time required
to generate srn   measured in millions of class representatives generated by second  it is
evident that the efficiency of classgen is very high and that it even grows slightly with
n  this behavior shows that the dead ends in the recursion are statistically insignificant 
which proves the tightness of the bounds used to enforce the values of the code numbers 

   conclusions
we have approached the problem of exploiting symmetries in continuous constraint satisfaction problems using continuous constraint solvers  our approach is general and can make
use of any box oriented ccs as a black box procedure  the particular symmetries we have
tackled are single cycle permutations of the problem variables 
the suggested strategy is to bisect the domain  the n cube initial box  simultaneously
in all dimensions at the same point  this forms a set of boxes that can be grouped in box
symmetry classes  a representative of each class is selected to be processed by the ccs
and all the symmetries of the representative are applied to the resulting solutions 
in this way  the solutions within the whole initial domain are found  while having processed only a fraction of it the set of representatives with the ccs  the time savings
obtained by processing a representative and applying its symmetries to the solutions tend
to be proportional to the number of symmetric boxes of the representative  therefore  symmetry exploitation is complete for full period representatives  since they have the maximum
number of symmetric boxes  another factor that improves the efficiency above what could
   

firuiz de angulo   torras

be expected by these considerations is the smaller average size of the boxes processed by
the ccs with our approach 
we have also studied the automatic generation of the classes resulting from bisecting a
n cube and analyzed their numerical properties  the algorithm for generating the classes
is very powerful  eliminating the convenience of any pre calculated table  the numerical
analysis of the classes revealed that the average number of symmetries of the class representatives tends quickly to n as the number of variables  n  grows  this is good news 
since n is the maximum number of symmetries attainable with single cycle symmetries of
n variables  leading to time reductions by a factor close to n  nevertheless  for small n
there is still a significant fraction of the representatives not having the maximum number
of symmetries  another weakness of the proposed strategy is the exponential growth in the
number of classes as a function of n 
the problems with small and large n should be tackled with a more refined subdivision
of the initial domain in box symmetry classes  which is left for near future work  we are
also currently approaching the extension of this work to deal with permutations of the
problem variables composed of several cycles  another complementary research line is the
addition of constraints before the search with the ccs  these constraints will be specific for
each symmetry class  finally  the extension to branch and bound algorithms for nonlinear
optimization could be envisaged 

acknowledgments
this is an extended version of work presented at cp       ruiz de angulo   torras        
the authors acknowledge support from the generalitat de catalunya under the consolidated
robotics group  the spanish ministry of science and education  under the project dpi           and the comunitat de treball dels pirineus under project     itt       

references
benhamou  f     goualard  f          universally quantified interval constraints  in
springer verlag  ed    cp     proceedings of the  th international conference on
principles and practice of constraint programming  pp       
bjorck  g     froberg  r          a faster way to count the solutions of inhomogeneous
systems of algebraic equations  with applications to cyclic n roots  j  symb  comput  
               
blumenthal  l          theory and aplications of distance geometry  oxford university
press 
cohen  d   jeavons  p   jefferson  c   petrie  k  e     smith  b  m          symmetry
definitions for constraint satisfaction problems  constraints                   
flener  p   frisch  a   hnich  b   kiziltan  z     miguel  i          breaking row and column
symmetries in matrix models  in cp     proceedings of the  th international conference on principles and practice of constraint programming  pp          springer 
   

fiexploiting single cycle symmetries

gent  i  p          groups and constraints  symmetry breaking during search  in in
proceedings of cp     lncs       pp          springer 
granvilliers  l     benhamou  f          realpaver  an interval solver using constraint
satisfaction techniques  acm trans  on mathematical software             
hentenryck  p  v   mcallester  d     kapur  d          solving polynomial systems using
a branch and prune approach  siam journal on numerical analysis             
jermann  c     trombettoni  g          inter block backtracking   exploiting the structure in continuous csps  in in   nd international workshop on global constrained
optimization and constraint satisfaction  pp        springer 
jermann  c          personal communication  
meseguer  p     torras  c          exploiting symmetries within constraint satisfaction
search  artif  intell                     
polya  g     read  r          combinatorial enumeration of groups  graphs and chemical
compounds  springer verlag 
porta  j  m   ros  l   thomas  f   corcho  f   canto  j     perez  j          complete
maps of molecular loop conformational spaces  journal of computational chemistry 
               
porta  j  m   ros  l   thomas  f     torras  c          a branch and prune solver for
distance constraints  ieee trans  on robotics             
puget  j  f          symmetry breaking revisited  constraints               
ruiz de angulo  v     torras  c          exploiting single cycle symmetries in branchand prune algorithms  in cp     proceedings of the   th international conference
on principles and practice of constraint programming  pp         
sam haroud  d     faltings  b          consistency techniques for continuous constraints 
constraints           
sherbrooke e  c   p  n  m          computation of the solution of nonlinear polynomial
systems  computer aided geometric design             
vu  x  h   silaghi  m   sam haroud  d     faltings  b          branch and prune search
strategies for numerical constraint solving  tech  rep  lia report    swiss federal
institute of technology  epfl  

   

fi