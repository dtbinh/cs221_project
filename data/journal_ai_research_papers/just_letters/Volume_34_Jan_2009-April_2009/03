journal artificial intelligence research                  

submitted        published     

exploiting single cycle symmetries
continuous constraint problems
vicente ruiz de angulo
carme torras

ruiz iri upc edu
torras iri upc edu

institut de robotica informatica industrial  csic upc 
llorens artigas            barcelona  spain 
www home page  www iri upc edu

abstract
symmetries discrete constraint satisfaction problems explored exploited last years  symmetries continuous constraint problems received attention  focus permutations variables consisting
one single cycle  propose procedure takes advantage symmetries
interacting continuous constraint solver without interfering it  key concept
procedure classes symmetric boxes formed bisecting n dimensional
cube point dimensions time  analyze classes
quantify function cube dimensionality  moreover  propose simple
algorithm generate representatives classes number variables
high rates  problem example chemical field cyclic n roots problem
used show performance approach practice 

   introduction
symmetry exploitation discrete constraint satisfaction problems  csps  received
great deal attention lately  since csps usually solved using ai search algorithms 
approaches dealing symmetries fall two groups  entail reformulating
problem adding constraints search  flener  frisch  hnich  kiziltan    miguel       
puget         break symmetries along search  meseguer   torras       
gent         permutations variables  interchangeability values commonly
addressed symmetries repertoire techniques developed 
relying computational group theory 
contrary  symmetries largely disregarded continuous constraint
solving  despite important growth theory applications field
recently experienced  sam haroud   faltings        benhamou   goualard        jermann
  trombettoni        porta  ros  thomas    torras         continuous  or numerical 
constraint solving often tackled using branch and prune  b p  algorithms  hentenryck 
mcallester    kapur        vu  silaghi  sam haroud    faltings         iteratively
locate solutions inside initial domain box  alternating box subdivision  branching 
box reduction  pruning  steps 
motivated molecular conformation problem  paper deal
simple type box symmetry  namely domain variables  i e   box dimensions  undergo single cycle permutation leaving constraints invariant  clear 
cycle involves n variables  algorithm handles n   symmetries  excluding
c
    
ai access foundation  rights reserved 

firuiz de angulo   torras

identity  generated cycle composition  since computational gain
shown roughly proportional n  longest cycle appearing problem formulation chosen input algorithm 
single cycle permutation leaves constraints unchanged form constraint symmetry terminology introduced cohen  jeavons  jefferson  petrie 
smith         note constraint symmetry solution symmetry 
way around  thus  symmetries deal subset possible solution
symmetries  advantage assessed  although perhaps difficult
find  problem formulation  therefore operative 
approach exploit symmetries continuous constraint problems requires
initial domain symmetric variables n cube  starts subdividing
cube point along dimensions once  since box symmetry transitive
relation  subboxes resulting subdivision fall equivalence classes  then 
b p algorithm  or similar continuous constraint solver  called subboxes
representatives symmetry equivalence class  finally  solution found 
symmetric ones generated  note symmetry handling doesnt interfere
inside workings constraint solver 

   symmetry continuous constraint problems
interested solving following general continuous constraint satisfaction problem  continuous csp   find points x    x            xn   lying initial box rn satisfying
constraints f   x  c            fm  x  cm   function   rn r  ci
interval r 
particular feature require continuous constraint solver  ccs 
work axis aligned box rn input  also  assume
ccs returns solution boxes  note ccs returning solution points limit case still
contained framework 
say function   rn rn point symmetry problem exists
associated permutation  x    f i   s x   ci   c i                 m 
consider symmetry property relates points equivalent regards
continuous csp  concretely  definition one conclude
x solution problem iff s x  solution problem 
let two symmetries continuous csp associated permutations
  easy see composition symmetries s t    symmetry
associated permutation  t     
interesting type symmetries permutations  bijective functions set onto
itself  components x  let finite set  cycle length k permutation
exist distinct elements a          ak  ai      a i   mod k  
 z    z element z d  cycle represented  a          ak   
every permutation expressed composition disjoint cycles  i e  cycles without
common elements   unique order factors  composition cycles
represented concatenation  example  a          ak   b          bl    paper focus
particular type permutations  namely constituted single cycle 
   

fiexploiting single cycle symmetries

simplest form    s x    x          xn      x      x            x n       x    x     xn   x    
 i     i      mod n 
example  n           x    x    x    x                         
f   x   

x     x     x          x     x     x      

f   x   

 x  x         x  x     

f   x   

 x  x         x  x     

f   x   

 x  x         x  x     

exists symmetry s x    x    x       x    x    x     need reordering variables  constraint permutation associated                  
                 
generally unique symmetry given problem  exists symmetry
s  example s   x    s s x   another symmetry  general  using convention
denoting s   x  identity mapping   si  x             n   set different symmetries
obtained composing s x  itself    n si  x   
si mod n  x   thus  single cycle symmetry generates composition n   symmetries 
excluding trivial identity mapping  may different numbers cycles 
imagine example continuous csp n     permutation variables   
       symmetry  then  permutation obtained composing twice             
symmetry problem  different number cycles  longest
cycle length two instead four  besides  former permutation cannot generated
latter  algorithm presented paper deals compositions
single cycle symmetry  even single cycle symmetries 
gain obtained proposed algorithm shown roughly proportional
number different compositions selected symmetry  therefore  several
single cycle symmetries exist continuous csp problem  algorithm used
generating symmetries composition  i e   longest
cycle  note single cycle permutations dealing need encompass
problem variables  since remaining ones considered fixed  unitary cycles  

   box symmetry
since continuous constraint solvers work boxes  turn attention set
points symmetric belonging box b rn    
let single cycle symmetry corresponding circular variable shifting introduced preceding section  b    x    x         xn   xn   box rn   box symme   general  variables must arranged suitable order one apply circular shifting  thus  general form single cycle symmetry s x    h   g h x    
h x          xn      x              x n     n general permutation orders variables 
g x            xn      x            x n    circular shifting above  thus  cycle defining symmetry expressed             since reordering change substantially
presented concepts algorithms  simplified notation paper assuming order
component variables appropriate one  i e      
   set  s x  s t  x b  box s x     s   x           sn  x      g   x               gn  x n     
si i th component s  arbitrary permutation  gi   r r function
interval r  gi  x  s t  x i  interval r 

   

firuiz de angulo   torras

try function defined s b     s x  s t  x b     x      x             x n    x n     
 x    x           xn   xn    x    x     box symmetry function associated constraint permutation   associated s  denote composed
times  say  then  b  b  symmetric boxes exists s t   b      b   
box symmetry equivalence relation defining symmetry equivalence classes  let
r b  set different boxes symmetry class b  r b     s  b               n
     instance  box b                                                r b     composed
   b       b        b                                               b                   
                          note    b     b   subsequent applications
box symmetry would repeat sequence boxes  define period p  b 
box b p  b     r b    easily shown r b     s  b               p  b      
example  box b     r b        s    b         b         b      p  b         
box symmetry implications continuous csp  direct consequence
point symmetry case 
solution inside box b  solution inside symmetric
boxes either 
box b b solution iff  b    b  solution box          p  b 
   
sketch proof first statement  assume solution inside b
solution xsol inside  b   definition box symmetry exists point x sol b
xsol   si  x sol    using property highlighted section   deduce x sol
must solution  contradicts hypothesis 
sketch proof second statement  solution box box least solution
point inside  assume b b solution box containing solution point xsol   inside
 b   point si  xsol   that  property highlighted section    must
solution  conversely  assume  b   b solution box  thus contains
least solution point  xsol   definition symmetric box  point symmetric
point x sol b xsol   si  x sol    using property section   conclude
x sol must solution and  thus  b solution box 
statements rephrased follows  
set solution boxes contained box b solset  set solution boxes
contained symmetric box  b   s  b   s t  b solset 
means solutions inside b found  solutions inside
symmetric boxes  b            p  b     available without hard calculations 
following sections show exploit property save much computing time
meta algorithm uses ccs tool without interfering it 
    box symmetry classes obtained bisecting n cube
algorithm propose exploit box symmetry makes use symmetry classes
formed bisecting n dimensional cube n  i e   period    dimensions
time point  resulting  n boxes  denote l h
two subintervals original range divided  example  n     
   

fiexploiting single cycle symmetries

following set boxes  l l  l h  h l  h h  whose periods      
     respectively  symmetry classes are   l l    l h  h l  
 h h   representing two intervals l h      respectively  dropping
symbol  sub boxes coded binary numbers  let srn set
representatives  formed choosing smallest box binary order class 
example  sr                  note cube n partitioned thought
set binary numbers length n  srn nothing subset
whose elements different circular shift 
algorithm exploiting symmetries way uses srn explained
next section  afterwards  sections      study many components srn has 
distributed and  importantly  generated 

   algorithm exploit box symmetry
algorithm    csym  algorithm 
input  n cube   xl   xh    xl   xh   
single cycle box symmetry  s 
continuous constraint solver  ccs 
output  set boxes covering solutions 

 

solutionboxset emptyset
x selectbisectionpoint xl   xh  
foreach b srn
b generatesubbox b  xl   xh   x  
solutionboxset solutionboxset processrepresentative b 

 

return solutionboxset

 
 
 
 

symmetry exploitation algorithm propose uses ccs external routine 
internals ccs must modified known 
idea first divide initial box number symmetry classes  next  one
needs process representative class ccs  end  applying
box symmetries solution boxes obtained way  one would get solutions
lying space covered whole classes  i e   initial box  advantage
procedure ccs would process fraction initial box  assuming
initial box n cube covering interval  xl   xh   dimensions 
directly apply classes associated srn   procedure exploit single cycle symmetries
way presented algorithm   
since srn set codes real boxes need translation codes
boxes given initial box  operator generatesubbox b  xl   xh   x   returns
box v   v  vn corresponding code b   b        bn  xl   xh   range
initial box dimensions x point interval bisected 
 
 xl   x   bi     
vi  
   
 x   xh   bi     
   

firuiz de angulo   torras

point x calculated selectbisectionpoint xl   xh   xl  
  xh   reasonable one  xl   xh      iterations line   generate set
representative boxes that  together symmetries  cover initial n cube 
processrepresentative b  returns solution boxes associated b  is 
solutions inside r b   still words  solutions inside b inside symmetric
boxes  processrepresentative b  based property stated end section
   allows obtain solutions class b processing b
ccs  solset set solutions found inside representative box class  b 
applysymmetry solset    calculates set solutions box  b  applying
boxes solset  since number symmetries b p  b   benefits
exploiting symmetries class representative proportional period 
x

algorithm    processrepresentative function 
input  box  b 
single cycle box symmetry  s 
continuous constraint solver  ccs 
output  set solution boxes contained b symmetric boxes 

 

solset ccs b 
otalsolset solset
i    p  b   
otalsolset otalsolset applysymmetry solset   

 

return otalsolset

 
 
 

correctness algorithm easy check  set boxes searches explicitly implicitly  by means symmetry  solutions u    r b  s t  b representative  
fact  u set boxes formed bisecting initial box dimensions
time point  u covers whole initial box and  thus  algorithm finds
solutions problem  moreover  finds solution box once 
boxes u volume common  they share wall  
    discussion efficiency csym 
csym  algorithm launches ccs algorithm  srn   small boxes instead
original large one  three factors affect efficiency compared standard
approach 
   fraction domain processed  fraction original domain directly
dealt ccs  fraction function periods srn components  one element period p represents class formed p boxes  one
processed ccs  since boxes classes equal size 
fraction calculated dividing number representatives
n 
p  srn  
total number boxes classes   sr
 n  
p  b    expected time gain
p

bsrn

p  b 

n
inverse quantity  bsr
denoted ifdp  inverse fraction
 srn  
domain processed   n grows  see section     majority elements

   

fiexploiting single cycle symmetries

srn period n  thus ifdp tends n  however  low n  ifdp
significantly smaller n  main factor determining efficiency
csym  
   smaller processed boxes  since ccs initial boxes using csym   n times
smaller original initial box  average size boxes processed
ccs smaller standard case  prune  box reduction contraction 
step carried quickly smaller boxes branch and prune algorithms 
fact  best branch and prune algorithms box contraction operators exhibiting
second order convergence  contraction rate requires small enough boxes
hold practice 
   number representatives  disadvantage fractioning excessively
initial domain  see noting that  using original large initial
box  contraction operator lowers upper bound symmetric variable 
information could used lower upper bound variable many
representative boxes srn   commented above  contraction operator would
act strongly representatives themselves  loss parallelization
effect anyway present  factor irrelevant small length cycle symmetries 
say n       srn   small  see section   again  compared
number boxes ccs must process general  however  n approaches
    number representatives begins become overwhelming 

   two illustrative examples
two problems solved branch and prune ccs presented
porta  ros  thomas  corcho  canto  perez         polytope based method
similar sherbrooke e  c         global consistency  exhibits quadratic
convergence  machine used carry experiments paper     ghz
g  apple computer 
    cycloheptane
molecules modeled mechanical chains making reasonable approximations 
two atoms joined chemical bond  one assume rigid link
them  thus  first approximation bond lengths constant  second one
angles two consecutive bonds constant  words 
distances atoms subchain three atoms assumed constant 
configurations atoms molecule satisfy distance constraints  sometimes
denoted rigid geometry hypothesis  valid conformations molecule kinematic
sense  constraints induced rigid geometry hypothesis particularly strong
molecule topology forms loops  cycloalkanes  problem finding
valid conformations molecule formulated distance geometry  blumenthal 
      problem distances points  atoms  fixed known 
one must find set values unknown  variable  distances compatible
embedding points r    unknown distances found solving set
   

firuiz de angulo   torras

constraints consisting equalities inequalities determinants formed subsets
fixed variable distances  blumenthal        

d 
d 

d 
d 

d 

d 

d 

figure    cycloheptane  disks represent carbon atoms  constant variable distances
atoms represented continuous dashed lines  respectively 

figure    three dimensional projection cycloheptane solutions  lightest  yellow 
boxes solutions found inside representatives using ccs  line  
algorithm     colored boxes solutions obtained applying
symmetries yellow boxes  line   algorithm    

figure   displays known unknown distances cycloheptane  molecule basically composed ring seven carbon atoms  distance two consecutive atoms
ring constant equal everywhere  distance two atoms connected
   

fiexploiting single cycle symmetries

atom known constant matter atoms  problem underconstrained  infinite number solutions dimensionality    problem several
symmetries  use one them  s d            d       d      d              d         d    d          d    d    
length cycle symmetry n      ifdp     
number boxes processed using raw ccs without symmetry handling      
using csym  total number      giving ratio      ifdp  problem
solved      minutes using csym   compares favorably      minutes
spent using algorithm porta et al         alone  reduction factor      
slightly greater ifdp  means that  although number representatives begins
relevant   sr           factor   section     determining factor  
section  since  small  time overhead introduced handling box symmetries
included reported time  figure   shows projection d    d  d 
solutions obtained using csym   solutions found inside five representative boxes
period seven  containing                solution boxes  respectively  chosen level
resolution  total number solutions boxes therefore                     
    cyclic n roots problem
following polynomial equation system n     instance so called cyclic
n roots problem described bjorck froberg        

x    x    x    x    x     
x  x    x  x    x  x    x  x    x  x     
x  x  x    x  x  x    x  x  x    x  x  x    x  x  x     
x  x  x  x    x  x  x  x    x  x  x  x    x  x  x  x    x  x  x  x     

   

x  x  x  x  x       

ten real solutions problem  system single cycle symmetry 
s x            x       x    x    x    x    x     well multiple cycle symmetry considered
paper  thus  cycle length n       sr         ifdp    running
ccs alone using initial box             number processed boxes     
exploiting aforementioned symmetry csym  algorithm number reduces
    last case  two solutions found representative box period   
symmetry led ten solutions  running times       seconds  ccs alone 
     seconds  csym   giving gain eight  double ifdp 
highlights benefits factor   section     bring efficacy
approach  number representatives small compared number boxes
processed ccs alone  making factor   section     irrelevant case 
table   contains results n   n   cyclic n roots problem         n
domain  except n   domain           n   n  
continuum solutions which  chosen resolution  produces          solution
boxes  respectively  this  number processed boxes n   smaller
n    logically smaller n   n    two observations
   

firuiz de angulo   torras

ifdp
number processed boxes ccs alone
number processed boxes csym 
rate processed boxes
time ccs alone
time csym 
time gain csym 

n  

n  

n   

n  

   
    
   
   
    
   
   

   
   
  
   
    
   
   

   
    
   
   
     
    
   

   
     
    
   
       
      
   

n  
 reduced domain 
   
      
     
   
        
       
   

table    results n cyclic roots problem  times given seconds 

made  first  time gains always higher corresponding ifdps  implying
preponderance factor   section     factor    second  time gain follows rather
accurately rate number processed boxes using ccs alone using
csym  
tests cyclic n roots problem using classical ccsp solver  realpaver  granvilliers   benhamou         carried  jermann         results preliminary difficult expose concisely  since great variability depending issues
pruning method used  realpaver offers several options  problem
coded  factorized not   every case  however  observed time gains greater
expected ifdp 

   analysis srn   counting number classes
let us define quantities interest 
 nn   number elements srn  
 fp n   number elements srn correspond full period boxes  i e   boxes period
n 
 nnm   number elements srn  s 
 fp nm   number elements srn correspond full period boxes  s 
polyas theorem  polya   read        could used determine quantities given n building possibly huge polynomial elucidating
coefficients  present simpler way calculating and  time  make
reader familiar concepts used algorithm generate srn  
begin looking expression fp n   number  s allowed 
total number binary numbers  n   periods exist binary
numbers divisors n  thus  following equation holds 
x

p fp p    n  

pdiv n 

segregating p   n 
   

   

fiexploiting single cycle symmetries

x

n fp n  

p fp p    n  

   

p
fp p  
n

   

pdiv n   p n

solving fp n  
fp n  

 n

n

x
pdiv n   p n

recurrence simple baseline condition  fp       
then  nn follows easily
nn  

x

fp p  

   

pdiv n 

segregating p   n  efficient formula obtained 
nn  

 n
 
n

x
pdiv n   p n

np
fp p  
n

   

formula valid n      remaining case n      

n
use similar techniques obtain fp nm nnm  
binary numbers
 s n  s  binary numbers circular shifts others
 like                 number shifted versions binary number period
box represented binary number  example        period   
another shifted version        binary number representing box period p
n
seen concatenation n p numbers length n p
  p period p  means

concatenated numbers full period  n p
 s  thus  number
binary numbers period p shifted numbers counted  i e   number
n
  common divisors n m  denote
classes period p  fp n p
n p
div n  m   periods  since p shifted versions binary number
period p  write

x
n
n
 
p fp n p
 
   
n p

pdiv n m 

change variable f   n p get
x
f div n m 

n
fp nf mf  
f


n
 


   

note index summation goes values before 
segregate case f     summand 

x
n
n
n fp nm  
fp nf mf  
 
    
f

f div n m   f   

and  finally  obtain
   

firuiz de angulo   torras

fp nm  

n




n

fp nf mf

x



f

f div n m   f   

 

    

recurrence relation fp nm computed using following
baseline conditions 
 
 
 
 

fp nn   fp n 

n    
n    

    

nnm obtained adding number classes period 
nnm  

x

fp nf mf  

    

f div n m 

segregating f      efficient formula obtained 
nnm  


n
 


x

n
 fp nf mf  
f

    

   p fp p mp  

    

  

f div n m   f   

carrying change variable p   n f  
nnm  


n
 


x

n

pdiv n m   p n

note change summation range  equation valid whenever    
  n  otherwise  nnm     
possible extend concept fp n  and fp nm   reflect number members
p
  
srn period p  and  s   denote nnp  nnm
nnp

p
nnm

 
 
 
fp p

p
  div n 
otherwise

 
 
 
fp p  mp
n

p
  div n  m 
otherwise

    

    

figure   a  displays number classes  nn   function n  curve indicates
exponential like behavior  confirmed figure   b  using larger logarithmic
scale  curve appears almost perfectly linear  figure   example
distribution classes period n       figure   shows percentage full period
classes srn      nnn  nn    one see percentage classes period different
n significant low n  approaches quickly   n grows  finally  figures   a 
  b  display distribution classes srn number  s n     
n        respectively  majority classes concentrates interval middle
graphic  around n    interval becomes relatively smaller n grows 
   

finumber classes symmetric boxes

   
   
   
   
   
   
  
 

 

 

 

 

  

  

 x    
 x    
 x   
 x   
 x   
 x   
 x   
 x   
 x   
 x   
 x   
 

 

 

box dimensionality  i e   number variables 

  

  

  

  

  

 b 

figure    number elements srn function n 

   

  

 

 

 

 

 

  

box dimensionality  i e   number variables 

 a 

number classes symmetric boxes

number classes symmetric boxes

exploiting single cycle symmetries

 

 

 

 

 

  

  

  

box period

figure    number elements sr   distributed period 

   

  

firuiz de angulo   torras

   generating srn   classes symmetric boxes
naive procedure obtain srn would initially generate boxes originated bisecting
n dimensional cube point dimensions time  then  one
check boxes set detect whether circular shift
others  complete process generating srn way involves huge number
operations even rather small dimensions  although srn ns could precomputed stored database  suggest algorithm capable calculating
srn fly without significant computational overhead 

percentage full period classes

   

  

  

  

  

 
 

 

 

 

  

  

  

  

  

  

box dimensionality  i e   number variables 

figure    percentage full period elements srn function n 

number classes symmetric boxes

number classes symmetric boxes

made counting  distinguish different subsets srn basis number
 s period 
 srnm   subset elements srn  s 
 srpnm   subset elements srn  s period p 
srpn   subset elements srn period p 
global point view  generation srn carried follows  first 
srn  generated  constituted always unique member  afterwards  srnm

  
  
  
  
  
  
  
 

 

 

 

 

 

  

  

 x    
 x    
 x    
 x    
 x    

 

 

  

  

  

  

   

number  s code

number  s code

 a 

 b 

figure    number elements srn distributed number  s   a  n       b  n     

   

fiexploiting single cycle symmetries

          n generated  generation srnm divided srpnm  
p div n  m   compose it  algorithm classgen described generates
full period representatives given number variables n     number ones
     i e   generates srnnm   representatives lower period p div n  m 
obtained concatenating one block n p   f times  therefore  order obtain
srpnm   generate srpp algorithm  concatenate elements
f

f times  thus  without loss generality  follows describe workings
algorithm classgen computes codes full period  namely n 
use compact coding binary numbers representing boxes consisting
ordered lists chains numbers  first number code number  s
appearing first   binary number  i th number code    
number  s  i   th i th  s binary number  example 
number            codified        length numerical codification
number  s codified binary number  denoted m 
binary numbers cannot codified way  last digit
   but  except zeros case  always element class
codified correctly  for example      element class        objective
representative class  rather advantage  half
boxes already eliminated beginning  zeros box  srn    common
every n  generated separately  already mentioned 
codification allows determine box full period way
binary representation  box period n iff number circular shifts lower
length numerical chain result never equal original  instance 
example full period      corresponding         not  difference
that  new representation  shifts must compared 
code box seen number base n m  full period box 
circular shifts code different numbers  arranged strictly increasing
numerical order  take representative box class largest element
class expressed code  which smallest expressed binary number  
example  class     two elements represented coding 
         latter chosen representative class 
note box belonging srnm n  s or  equivalently  sum
components code n m 
output algorithm codes length m  whose sum components
n m  representatives class full period  codes length
whose components sum desired number rather easy generate systematically 
representativeness full period conditions difficult guarantee efficiently 
handle exploiting properties codes stated below  make
use definition i compability 
say code i compatible compatible position sub chain
beginning position     ending last position  thus length     
strictly smaller numerical terms sub chain length beginning
first position  example         compatible positions     
  compatible 
   

firuiz de angulo   torras

property   code class representative full period iff i compatible
s t        m 
thus  instead comparing chains length  i e   code shifted versions  
determine code validity comparing shorter sub chains  second property helps
us devise still faster simpler algorithm 
property   code i compatible sub chain position   l equal
sub chain position       l code compatible positions    
  l 

algorithm    codevalidity algorithm 
input  code length expressed array  a 
output  boolean value indicating whether code valid  i e   whether
full period class representative 
 
 
 
 
 
 
 
 
 
  

i 
ctrol  
v alidcode true
v alidcode    
a i    a ctrol  v alidcode f alse
else a i    a ctrol  ctrol  
else ctrol ctrol     
ii  

   a i    a ctrol    

a m  a ctrol  v alidcode f alse
return validcode

property interesting permits checking validity code
travelling along once  shown algorithm    trick decision
i compatibility delayed position following numbers
beginning string  finally resolves positively  compatibility
intermediate numbers guaranteed  hence  i compatibility either resolved
simple comparison requires l comparisons  latter case  either compatibility
l positions resolved  if outcome positive  compatibility intermediate
positions doesnt matter  because outcome negative and  thus  code labelled
non valid without checks   ctrol variable charge maintaining last index
head sub chain compared current compatibility check 
examining compatibility current position i  value lower
ctrol position  code sure i compatible therefore must worry
 i      compatibility back warding ctrol first position  value ctrol
position equal current position i  compatibility position still
ascertained  continue advancing current ctrol positions equality
disappears  words  condition must fulfilled non rejecting
invalid code position
   

fiexploiting single cycle symmetries

algorithm    classgen algorithm 
input  sum numbers remain written right  from
position pos m   sum 
index next position written  pos 
index current control element  whose value cannot surpassed

next position  ctrol 
length code  m 
array class codes generated  a 
output  set codes representing classes  sr 
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  
  
  
  

sr emptyset
pos  
sum   a ctrol 
a m  sum
sr  a  

   otherwise  sr remain emptyset   

else
pos    
lowerlimit   dsum me
u pperlimit sum
else
lowerlimit    
u pperlimit minimum a ctrol   sum 
  u pperlimit lowerlimit
a pos 
  a ctrol sand pos     
     a ctrol    u pperlimit   
sr sr classgen sum i  pos      ctrol      m  a 
else
     a ctrol  pos       

sr sr classgen sum i  pos         m  a 

  
  

return sr

a i    a ctrol  

    

condition transformed a i    a ctrol    resolve last
pending compatibility checks  aside  note codes general
raw binary numbers  representativeness full periodness defined
way both  therefore  three properties codevalidity algorithm apply
raw binary numbers 
rather direct way generate srnnm would generate codes length
whose sum components n  the number zeros expressed binary
number  filter codevalidity  instead  taken
   

firuiz de angulo   torras

efficient approach  generating codes satisfy conditions need
checked explicitly codevalidity  therefore  algorithm    presented clarity
purposes  used 
main procedure obtain full period representatives  s  i e   srnnm  
recursive program presented algorithm    classgen n m        m  a  
array length m  must called obtain srnnm   given n          
call procedure writes single component code position indicated
parameter pos  beginning pos      subsequently incremented
recursive call  recursion finishes rightmost end code  pos   m 
first parameter  sum  sum components code remain written 
range values written position pos limited lowerlimit u pperlimit 
except last position m  following show correctness algorithm
verifying limits chosen satisfy two requirements code 
sum numbers code completed algorithm must nm  first 
recall initial call algorithm done using parameter sum   n m 
position   pos   number written must greater
equal sum numbers still written  quantity represented sum 
subsequent positions possible write positive integers  least
zeros  condition imposed u pperlimit line   pos     line   
 juxtaposed code validity conditions      pos   m  number written
pos substracted sum parameter next recursive call  finally 
pos   m  possibility satisfy sum condition assign value
sum last element code 
code validity conditions  codevalidity  number
written position pos must smaller equal a ctrol      pos   m 
strictly lower a ctrol  pos   m  conditions reflected
u pperlimit assignments made lines       respectively  lowerlimit usually
 pos      line    set smallest possible element codes    
beginning code  pos      line    tight value chosen since 
value lower upper rounded value dsum me  way distribute
remains sum among positions code without putting value
greater initial one  would make code non representative 
maintenance ctrol variable similar within codevalidity
algorithm  write pos something strictly minor a ctrol   ctrol back warded
first position  otherwise  ctrol incremented   next recursive call write
pos     
output algorithm list valid codes decreasing numerical order 
instance  output obtained requesting sr    classgen             a  is       
                                         example  case recursion
arrives pos   without returning valid code frustrated code      whose last
number written code full period 
figure   displays quantitative results reflect efficiency classgen 
dashed line accounts complete times required generate class representatives
   

fiexploiting single cycle symmetries

total time
millions representatives per second

   

  

   

 
  
   
  

   

total time  seconds 

number representatives  millions second 

  

   

 

   
 
 

  

  

  

  

  

 

dimensionality  number variables 

figure    total time  dashed line  generate srn   rates generation  continuous
line  class representatives function n 

srn n     n       worth noting sr   requires second
entirely generated  continuous line encodes division  srn   time required
generate srn   measured millions class representatives generated second 
evident efficiency classgen high even grows slightly
n  behavior shows dead ends recursion statistically insignificant 
proves tightness bounds used enforce values code numbers 

   conclusions
approached problem exploiting symmetries continuous constraint satisfaction problems using continuous constraint solvers  approach general make
use box oriented ccs black box procedure  particular symmetries
tackled single cycle permutations problem variables 
suggested strategy bisect domain  n cube initial box  simultaneously
dimensions point  forms set boxes grouped box
symmetry classes  representative class selected processed ccs
symmetries representative applied resulting solutions 
way  solutions within whole initial domain found  processed fraction set representatives ccs  time savings
obtained processing representative applying symmetries solutions tend
proportional number symmetric boxes representative  therefore  symmetry exploitation complete full period representatives  since maximum
number symmetric boxes  another factor improves efficiency could
   

firuiz de angulo   torras

expected considerations smaller average size boxes processed
ccs approach 
studied automatic generation classes resulting bisecting
n cube analyzed numerical properties  algorithm generating classes
powerful  eliminating convenience pre calculated table  numerical
analysis classes revealed average number symmetries class representatives tends quickly n number variables  n  grows  good news 
since n maximum number symmetries attainable single cycle symmetries
n variables  leading time reductions factor close n  nevertheless  small n
still significant fraction representatives maximum number
symmetries  another weakness proposed strategy exponential growth
number classes function n 
problems small large n tackled refined subdivision
initial domain box symmetry classes  left near future work 
currently approaching extension work deal permutations
problem variables composed several cycles  another complementary research line
addition constraints search ccs  constraints specific
symmetry class  finally  extension branch and bound algorithms nonlinear
optimization could envisaged 

acknowledgments
extended version work presented cp       ruiz de angulo   torras        
authors acknowledge support generalitat de catalunya consolidated
robotics group  spanish ministry science education  project dpi           comunitat de treball dels pirineus project     itt       

references
benhamou  f     goualard  f          universally quantified interval constraints 
springer verlag  ed    cp     proceedings  th international conference
principles practice constraint programming  pp       
bjorck  g     froberg  r          faster way count solutions inhomogeneous
systems algebraic equations  applications cyclic n roots  j  symb  comput  
               
blumenthal  l          theory aplications distance geometry  oxford university
press 
cohen  d   jeavons  p   jefferson  c   petrie  k  e     smith  b  m          symmetry
definitions constraint satisfaction problems  constraints                   
flener  p   frisch  a   hnich  b   kiziltan  z     miguel  i          breaking row column
symmetries matrix models  cp     proceedings  th international conference principles practice constraint programming  pp          springer 
   

fiexploiting single cycle symmetries

gent  i  p          groups constraints  symmetry breaking search 
proceedings cp     lncs       pp          springer 
granvilliers  l     benhamou  f          realpaver  interval solver using constraint
satisfaction techniques  acm trans  mathematical software             
hentenryck  p  v   mcallester  d     kapur  d          solving polynomial systems using
branch prune approach  siam journal numerical analysis             
jermann  c     trombettoni  g          inter block backtracking   exploiting structure continuous csps  in   nd international workshop global constrained
optimization constraint satisfaction  pp        springer 
jermann  c          personal communication  
meseguer  p     torras  c          exploiting symmetries within constraint satisfaction
search  artif  intell                     
polya  g     read  r          combinatorial enumeration groups  graphs chemical
compounds  springer verlag 
porta  j  m   ros  l   thomas  f   corcho  f   canto  j     perez  j          complete
maps molecular loop conformational spaces  journal computational chemistry 
               
porta  j  m   ros  l   thomas  f     torras  c          branch and prune solver
distance constraints  ieee trans  robotics             
puget  j  f          symmetry breaking revisited  constraints               
ruiz de angulo  v     torras  c          exploiting single cycle symmetries branchand prune algorithms  cp     proceedings   th international conference
principles practice constraint programming  pp         
sam haroud  d     faltings  b          consistency techniques continuous constraints 
constraints           
sherbrooke e  c   p  n  m          computation solution nonlinear polynomial
systems  computer aided geometric design             
vu  x  h   silaghi  m   sam haroud  d     faltings  b          branch and prune search
strategies numerical constraint solving  tech  rep  lia report    swiss federal
institute technology  epfl  

   


