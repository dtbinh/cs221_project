journal arti cial intelligence research                  

submitted      published     

pha   finding shortest path a  unknown
physical environment
ariel felner

department information systems engineering 
ben gurion university negev  beer sheva         israel

roni stern
asaph ben yair
sarit kraus
nathan netanyahu

department computer science  bar ilan university
ramat gan  israel       

felner bgumail bgu ac il
sternr  cs biu ac il
benyaya cs biu ac il
sarit cs biu ac il
nathan cs biu ac il

abstract
address problem nding shortest path two points unknown
real physical environment  traveling agent must move around environment
explore unknown territory  introduce physical a  algorithm  pha   solving
problem  pha  expands mandatory nodes a  would expand returns
shortest path two points  however  due physical nature
problem  complexity algorithm measured traveling eort moving
agent number generated nodes  standard a   pha  presented
two level algorithm  high level  a   chooses next node expanded
low level directs agent node order explore it  present
number variations high level low level procedures evaluate
performance theoretically experimentally  show travel cost best
variation fairly close optimal travel cost  assuming mandatory nodes
a  known advance  generalize algorithm multi agent case 
number cooperative agents designed solve problem  speci cally  provide
experimental implementation system  noted problem
addressed navigation problem  rather problem nding shortest
path two points future usage 

   introduction
paper address problem nding shortest path two points
unknown real physical environment  mobile agent must travel around
environment explore unknown territories  search spaces path  nding problems
commonly represented graphs  states associated search space
represented graph nodes  transition states captured graph edges 
graphs represent dierent environments  road maps  games  communication
networks  moving one node graph another done applying logical
operators manipulate current state actual agent move one
node another  sliding tile puzzle rubik s cube  korf        examples
c      ai access foundation  rights reserved 

fifelner  stern  ben yair  kraus    netanyahu

rst type  road map example second type  graphs search problems
divided following three classes 

fully known graphs  nodes edges graph stored com 

puter  graph fully known  input problems usually
complete graph represented adjacency matrix adjacency list 
relevant problem case would nd  example  shortest path
road map nodes edges known advance 

large graphs  graphs due storage time limitations completely known cannot fully stored storage device  many graphs
search problems exponential number nodes  example     tile puzzle problem      states cannot completely stored current machines 
input problems usually speci ed general structure state
search space  dierent operators  initial state  set goal states 
small portions graphs visited search algorithms
stored memory 

small  partially known graphs  third class contains graphs represent
partially known physical environment  example  mobile agent unknown
area without map full knowledge environment  given enough
time  however  agent fully explore environment since large 
due partial knowledge  small portion graph given input 

class fully known graphs  classical algorithms  dijkstra s single source
shortest path algorithm  dijkstra        bellman ford algorithm  bellman        
used nd optimal path two nodes  algorithms assume
node graph accessed algorithm constant time  assumption
valid since nodes edges graph known advance stored
computer s memory  thus time complexity algorithms measured
number nodes edges process course search 
second class graphs algorithms usually ecient  since
number nodes graph large  usually exponential   also  small
portion graph stored memory given time  a  algorithm  hart  nilsson    raphael        linear space versions  e g   ida   korf        rbfs  korf 
       common methods nding shortest paths large graphs  a  keeps
open list nodes generated yet expanded  chooses
promising node  the best node  expansion  node expanded moved
open list closed list  neighbors generated put open
list  search terminates goal node chosen expansion open
list empty  cost function a  f  n    g n    h n  g n  distance
traveled initial state n  h n  heuristic estimate cost node
n goal  h n  never overestimates actual cost node n goal  say
h n  admissible  using admissible heuristic h n   a  proved
admissible  complete  optimally eective  dechter   pearl         words 
heuristic  a  guaranteed always return shortest path  furthermore 
   

fipha   finding shortest path a  unknown physical environment

algorithm claiming return optimal path must expand least nodes
expanded a  given heuristic 
a  expansion cycle carried constant time  takes constant
amount time retrieve node open list  generate neighbors 
latter involves applying domain speci c operators expanded node  thus time
complexity a  measured terms number generated nodes  
paper deal nding shortest path graphs third class  i e  
small  partially known graphs correspond real physical environment  unlike
graphs two classes  constant number computer operations done
node expansion  cannot assume  type graphs  visiting node takes
constant time  many nodes edges graph known advance 
therefore  expand node known advance  mobile agent must rst travel
node order explore learn neighbors  cost search
case cost moving agent physical environment  i e   proportional
distance traveled agent  ecient algorithm would therefore minimize
distance traveled agent optimal path found  note since small graphs
considered here  omit actual computation time focus travel
time agent  paper introduce physical a  algorithm  pha   solving
problem  pha  expands mandatory nodes a  would expand returns
shortest path two points  however  complexity algorithm
measured traveling eort moving agent  order minimize traveling
shown  pha  designed minimize traveling eort agent
intelligently choosing next assignment traveling agent  described below  many
times agent chooses rst move nearby nodes even though immediately
contribute proceeding a  
unlike ordinary navigation tasks  cucka  netanyahu    rosenfeld       korf      
stentz       shmoulian   rimon         purpose agent reach goal
node soon possible  rather explore graph manner shortest
path retrieved future usage  hand  problem ordinary
exploration problem  bender  fernandez  ron  sahai    vadhan         entire
graph explored order mapped out  following two motivating
examples real world applications problem 

example    division troops ordered reach speci c location  coordinates location known  navigating entire division unknown
hostile territory reaching destination unreasonable inecient  common case team scouts search best path division
pass through  scouts explore terrain report best path division
move along order reach destination ecient manner 

   fact  a   open list stored priority queue  would take logarithmic time
retrieve best node  however  many problems  sliding tile puzzles rubik s cube 
simple rst in rst out queue suces  korf      ff taylor   korf      ff korf         likewise 
linear space versions  ida  rbfs  which based depth rst search   assumption
takes constant time per node valid  assume number neighbors
bounded 

   

fifelner  stern  ben yair  kraus    netanyahu

example    computer systems connected networks on  o line
dierent times  throughput seriously degraded due busy communication channels  therefore  many networks cannot represented xed  fully
known graphs  transferring large amounts data  e g   multimedia les 
two computers network often time consuming  since data may
routed many communication channels computer systems reaching
destination  finding optimal path computer systems could
improve transfer time large les  since network may fully known 
nding optimal path two nodes requires exploration network 
ecient elegant solution might send small packets  operating scouts 
explore network return optimal path  given network stable
least short period time  assuming computer system network
recognized neighboring systems  faced problem nding
optimal path real physical environment  

general  would worthwhile search optimal path following
conditions hold 
preliminary search  with usage scouts  possible cheap 
optimal path required future usage 
often one might settle suboptimal path  however  path needed
considerable trac volume  e g   path traveled large number times
path traveled simultaneously large number agents  nding
optimal path essential  paper focus solving problem 
paper organized follows  section   provides speci c formulation
problem question  section   discusses related work  section   presents
pha  algorithm single mobile agent  several  enhanced  variations introduced
discussed domain  followed extensive empirical results demonstrate
superiority enhanced variants pursued  section   provide analysis
pha  overall evaluation performance  section    provide number
generalizations multi agent case  number traveling agents available
solving problem  experimental results schemes presented discussed 
section   contains concluding remarks discusses future research  preliminary version
paper appeared earlier  felner  stern    kraus        
   research concerned high level  abstract graphs intend provide new
applicable routing algorithm  current routing technologies maintain large databases store best
paths node node  broadcast changes network  update paths necessary  thus
making essentially network graph fully known  also  network domains one create
destroy packages thus necessarily given number agents  algorithm
may relevant future network architectures routing technologies  routers use
databases  far fetched view  example  rapid growth internet 
thus conceivable future storing paths would become infeasible 

   

fipha   finding shortest path a  unknown physical environment

   problem specication
mentioned general terms  problem nd shortest path two
nodes unknown undirected graph  speci cally  assume weighted graph 
node represented   dimensional coordinate  i e   location real
world   weight edge euclidean distance two nodes 
input problem consists coordinates initial goal nodes 
nodes assumed known advance  agent assumed located
start node  task nd shortest path  unknown  graph
initial node goal node future usage  order accomplish that  agent
required traverse graph explore relevant parts leading desired solution 
agent allowed visit nodes travel one node another via existing edges 
assume node v visited search agent  neighboring
nodes discovered  well edges connecting v  assumption
unreasonable  considering  e g    trac  signs road intersection often indicate
neighboring destinations lengths corresponding road segments connect
locations  even without road signs  scouts reach new location 
look around  observe neighboring locations  assess distances current
location  general  assumption neighboring nodes discovered instantly
fairly common search problems algorithms  
since goal search nd best path goal  clear   given
admissible heuristic   agent must expand nodes expanded a   a 
optimally eective  dechter   pearl         let c length shortest path
initial node goal node  a  expand nodes  that  f  n   
g n    h n    c nodes f  n    c   refer nodes
 set mandatory  a  nodes  stated above  agent must visit a  nodes
order nd shortest path  however  may need visit additional nodes 
make following fundamental observations respect problem question 
first  even set a  nodes known advance  agent may need visit
additional nodes traversing related portions graph 
shortest path two a  nodes may include graph nodes
belong a  nodes  i e   f value greater c   given a  nodes 
nding shortest path visits   confused
shortest path origin node goal node   could considered
solving traveling salesman problem  tsp  respect set a  nodes 
note tsp solution may include nodes belong a  nodes 
second  agent know a  nodes advance  nodes added
open list expanded search progresses  thus agent cannot
use solution tsp  since tsp assumes nodes visited provided
input 
   are  however  domains assumption may hold  domains  node becomes
fully known agent reaches physically  work restrict
assumption  domains addressed part future work 

   

fifelner  stern  ben yair  kraus    netanyahu

cases  order a  nodes expanded dierent
order visited according tsp solution  thus minimal
path traversing a  nodes cannot used 
third  node added open list agent cannot know whether
belongs a  nodes  since c known search concluded  consider
node n open list  head open list  suppose
agent physically located near node  decide whether
slightly extend path visit node n skip n continue node
head open list  n turned belong a  nodes  visiting
may prove bene cial   this n might reach head open
list agent physically located far away it  visiting n
point incur signi cant travel cost   however  turns n
belong a  nodes   small  detour visiting proven useless 
intuitively  however  decision never visit would result bad strategy 
thus agent may visit nodes belong a  nodes future
expected bene ts  actual decision whether visit n depend
distance agent s location n  at time decision 
agent s estimate whether n belongs set a  nodes 
following sections present pha  algorithm ecient exploration
graph  order nd shortest path two given nodes single traveling
agent  well multiple agents  study dierent heuristics direct agent
make intelligent decision  attempt achieve small overall travel cost 

   related work
much research devoted guiding mobile agent exploring new unknown
environments order study map out  work dierent 
sense explores merely necessary regions graph order retrieve
shortest path two nodes entire graph  literature
area deals physical mobile robot moves real environment  published
research focuses usually issue assisting robot recognize physical objects
environment  refer reader  bender et al          contains extensive
survey various related approaches state art techniques 
another class algorithms navigation algorithms  navigation problem concerned
navigating mobile agent goal fast possible  necessarily via shortest
 optimal  path  navigator always proceed towards goal  ignoring whether
trail traversed thus far lies shortest path  deviations optimal path
neglected since navigation problem reconsidered every move respect
new source node  i e   current position agent  navigation algorithm halts
mobile agent reaches goal  path passed usually lacks importance usually
optimal  problem  hand  nd optimal path goal node
future usage  even agent nds path goal node  search continues
   

fipha   finding shortest path a  unknown physical environment

shortest path goal found  next  describe briey work done
navigation partially known graphs 
 cucka et al         introduced navigation algorithms sensory based environments automated robots moving room  used depth rst search
 dfs  based navigation algorithms  use heuristic function choosing next node
agent go to 
real time a   rta    korf        sophisticated version  learning realtime a   lrta    algorithms nding paths two nodes graph 
however  deal large graphs assume constraint time
computation move retrieve given constant time  thus limited
search performed  node best cost search frontier picked 
problem solver moves one step along path node  search continues
new state problem solver  merit node n  in rta  lrta  
f  n    g n    h n   similarly a   unlike a   though  g n  actual distance node
n current state problem solver  rather original initial state 
dierence rta  lrta  search terminated  lrta 
stores heuristic estimation value node visited problem solver 
method successor nodes chosen dierent two variations  korf  korf 
      proves large number runs  run start node selected
random  stored value node visited lrta  problem solver converges
optimal distance goal  rta  lrta  signi cantly dierent
approach  assume node expanded computer s memory
without agent physically visit node   also  algorithms designed
large graphs   furthermore  rta  nd optimal path goal  trivial
version lrta  could used solve problem  e g   limiting search depth
one level  every node visited agent could physically expanded  however 
variant competitive approach  perform simple
hill climbing procedure  addition  order attain optimal path  lrta 
select many start nodes random  relevant case  given
one initial node 
marta   knight        multi agent version rta   marta  every agent runs
rta  independently  kitamura et al   kitamura  teranishi    tatsumi        modi ed marta  using coordination strategies based attraction repulsion 
strategies employed tie breaking situations  using repulsion strategy 
idea spread agents  agent intends maximize distance
others  again  path provided algorithm optimal also  agents
need physically visit node order expand it  work inspired algorithms
presented paper  far handling multi agent mutual decision concerned 
life long planing a   lpa    koenig   likhachev      b  remarkable algorithm
generalizes a  handle dynamically changing graph  lpa  activated every time
graph changed order nd current shortest path given start
goal nodes  utilizes fact much old data explored previous runs
lpa  still valid current run  a  special case lpa  entire graph
explored yet 
   

fifelner  stern  ben yair  kraus    netanyahu

d  lite  koenig   likhachev      a  applies lpa  case mobile robot needs
nd shortest path unknown environment environment changes
dynamically  i e   edges added deleted times   lpa   start
node identical runs  d  lite  however  robot moves along path
calculates new shortest path current location  d  lite modi es lpa 
old data previous runs eciently used case start node
changed according new location robot  d  lite actually simpli ed version
previous algorithm d  stenz  stentz        
main dierence algorithms approach they  too  expand
node computer s memory without requiring mobile agent physically visit
node  indeed  following every move robot d  lite  changes graph
provided immediately robot need physically visit nodes order gather
rsthand information  task agent  context d   repeatedly
determine shortest path current location robot goal location
edge costs graph changes robot moves  d  lite nd path
returns it  simply navigation algorithm guides agent goal node
based previous new information terrain 
agent operating real world must often choose maximizing expected
utility  according current knowledge  world   learning
environment  attempt improve future gains  problem known tradeo exploitation exploration reinforcement learning  kaelbling   moore 
       argamon et al   argamon engelson  kraus    sina              address tradeo exploration exploitation agent moves repeatedly two
locations  propose utility based on line exploration algorithm takes
account cost attempting improve currently best route known
estimate potential bene ts future task repetitions  expected utility
exploration positive  agent takes actions improve route otherwise 
continues using known path  authors compare utility based on line exploration
heuristic backtracking search algorithm exhaustively searches graph
starting perform task  randomized interleaved exploration algorithm 
assume agent knows path two nodes  make
assumption 
argamon et al  suggest larger number times task repeated 
merit interleaved exploration diminishes  agent required move
back forth two nodes large number times  need decide
on line whether exploit explore instead  shortest path found soon
possible  thus good search algorithm may prove useful  respect work
complements argamon et al   provides ecient search algorithms situations
optimal path needed advance  contrast  applying techniques argamon et
al  situations yields poor results demonstrated experiments 
roadmap a   shmoulian   rimon        sophisticated single agent navigation
algorithm  chooses navigate node assumed close goal node 
algorithm supervised high level procedure called a   pearl   kim         instead
always selecting best node open list  a  allows search agent choose
set  good nodes   set called focal set  focal set nodes
   

fipha   finding shortest path a  unknown physical environment

open list whose f value greater value best node   
focal nodes determined  local search performed navigate agent
one nodes  believed close goal node  role high level
phase prevent navigating agent going wrong direction considering
path traveled thus far 
roadmap a     pre speci ed constant  determines trade o
local search a   example  a  a  a  local search  choosing
iteration node believed close goal node  algorithm
halts goal node reached  thus       optimal path might
known  paradigm roadmap a  similar ours  sense node known
agent explores it  fact  trivial case        roadmap a 
similar approach simple heuristic  shortest known path   presented
subsection     below   comments basic dierence roadmapa 
pha  provided section   
summary  listed algorithms navigation algorithms  i e  
necessarily require agent physically visit node order expand it 
necessarily return optimal path goal node  thus inherently solve dierent
problem one pursued paper 

   pha  single agent

turn description pha  algorithm  focusing rst case
single mobile agent available 
nodes environment divided explored unexplored nodes  exploring
node means physically visiting node agent  learning location
location neighbors  new algorithm pha  activates essentially a 
environment  however  order expand node a   node must rst explored
agent order obtain relevant data associated  i e   neighboring nodes
incident edges   throughout discussion paper treat pha  twolevel algorithm  although principle pha  could viewed one level algorithm
 see discussion subsection       nd two level presentation
well structured better understood conceptually  two level framework consists
high level low level routine  high level  which invokes low level various
stages pha    acts essentially regular a  search algorithm  chooses
cycle node open list expansion  heuristic function h n  used
euclidean distance n goal node   this heuristic admissible course 
de nition   node chosen high level explored agent 
low level  navigation algorithm  activated navigate agent node
explore it  node explored low level expandable high
level  chosen node already explored  neighbors already known 
readily expandable high level without need send agent visit
node  pseudo code high level given below 

   

fifelner  stern  ben yair  kraus    netanyahu

 
 
 
 
 
 
 

g

high level open list  f
 open list empty  f
target   best node open list
target unexplored
f
explore target  low level







g

g

expand target 

    low level algorithms

high level algorithm  a   chooses expand node smallest f value
open list  regardless whether agent already visited node  chosen
node visited agent  low level instructs agent visit node 
call node target node low level  order reach target node 
must use navigation algorithm  implemented number navigation variants
low level  rst describe simple algorithms use known information
graph  present ecient algorithms  explore graph
navigation provide new information high level  assume
agent current node needs navigate target node 
      simple navigation algorithms

tree path  every best  rst search  a  spans nodes generates

tree called search tree  every known node node search tree 
trivial way move one node search tree 
tree path algorithm instructs agent move current node target
node shortest path search tree  words 
agent walk tree current node reaches ancestor
target node  walk node target node  trivial
algorithm  presented mainly comparison purposes 

shortest known path  nodes search tree already

explored agent  incident edges known  search tree
nodes plus additional edges explored nodes viewed subgraph
fully known  nodes subgraph connected
part search tree  using subgraph  calculate shortest path
target node via known nodes edges  mentioned above  nding shortest
path known graph done easily  agent simply computes shortest
path target node travels along path  

aerial path  assuming agent able move freely environment

restricted edges graph  simply move agent

   navigation algorithm similar local a  search roadmap a  trivial case
       roadmap a   shortest path target node determined known graph
agent moves along path 

   

fipha   finding shortest path a  unknown physical environment

current node target node via straight line connecting nodes 
method may relevant search agents highly mobile  explore
environment agents restricted travel along edges  note
length due  aerial path  never greater length due  shortest
known path  
      dfs based navigation algorithms

simple navigation algorithms described above  exploration new nodes done
high level algorithm  thus low level add new knowledge
graph  sense inecient  propose intelligent navigation
approaches nding path target pass trough unexplored nodes 
approaches provide following advantages  paths currently known
agent may much longer paths explored yet  may
prove ecient navigate unknown parts graph seem lead
better path target  important advantage navigating
unknown parts graph  agent might visit new nodes explored
explore y  may save need travel back nodes
later time  selected expansion high level algorithm 
advantages suggest use dfs based navigation low level 
dfs based navigation algorithm  search agent moves neighboring node 
visited  typical dfs manner  algorithm backtracks upon reaching deadend search continues reaches target  one neighbor 
use heuristic evaluate neighbor likely lead faster target 
visit node rst  experimented following dfs based navigation
algorithms proposed  cucka et al         

positional dfs  p dfs   dfs based navigation algorithm sorts neighbors

according euclidean distance target node  choosing node
minimum distance target node rst 

directional dfs  d dfs   dfs based navigation algorithm sorts neigh 

bors according direction edges current node v 
rst chooses node u dierence angle line segments
 v u   v t  smallest  denotes target node  words 
nodes prioritized directional dierence target node 
giving priority nodes dier least 

a dfs  a dfs improved version p dfs  step agent chooses

neighbor w minimizes sum distances current node v
w w target node t  call a dfs since uses cost function
similar a   i e   f  n    g n    h n    note  however  cost
function used locally nd path current node target node 

   generalized version navigating cost function similar a  called  robotic a    ra   
proposed  cucka et al        ff node w either neighbor  of v  already visited
node 

   

fifelner  stern  ben yair  kraus    netanyahu

dierent high level a  uses cost function nd path
input initial state input goal state 
r
 

 


c

          
t          
          
          
           
           
          
          
           
           
          d
          
           
           
           
           
           
           

p

figure    illustration various low level navigation algorithms 
figure   illustrates navigation algorithms listed above  let r denote source
node  suppose search agent currently node c   high level
procedure chooses expand node   squared nodes already visited
agent  i e   already explored  nodes edges connecting
comprise tree spanned high level a  search  since yet explored 
low level procedure navigate target node   tree path navigate
along path c       r         whereas shortest known path navigate along
path c             note since node yet explored  path c via
known point  aerial path go directly c   using one
dfs based navigations  agent move via p   d  depending  respectively 
whether p dfs  d dfs  a dfs used  bene dfs based algorithms
explore new nodes navigation  nodes p   d 
example   revisit nodes  high level procedure expand
later stage 

    enhanced pha 
      pha  one level procedure

mentioned previous subsection  pha  presented principle one level
algorithm  done follows  whenever best node open list known
 i e   explored   expansion cycle a  takes place background 
new best node determined  upon arriving node  agent makes navigation
decision follows 
best node open list one current node s neighbors  agent
moves node 
otherwise  agent moves neighboring node minimizes relevant
heuristic function  among variants proposed previous subsection  
   

fipha   finding shortest path a  unknown physical environment

heuristics would valid heuristic function one level
algorithm   the latter confused heuristic function associated
a  expansion cycle   example  agent node v  using a dfs
visit neighbor w minimizes sum distances current node v
w w best current node open list 
compact one level presentation notwithstanding  prefer   reasons clarity
  use two level formulation pha   believe clear distinction
high level a  low level navigation procedure provides overall framework
well structured conceptually clearly understood  addition  twolevel framework lends naturally two enhancements presented following
subsections 
enhancements draw basic principle navigation might proceed
necessarily best node  dierent node fairly close current
location agent   the idea long run would prove bene cial  
principle realized two main scenarios      navigating best node 
agent might choose rst visit nearby neighbor      procedure might choose
ignore best node open list select instead dierent node open list
close agent s location  context two level framework 
rst scenario corresponds low level enhancement  see i a dfs below   second
scenario corresponds high level enhancement  see wina   subsection        
reasons  choose stick proposed two level approach
pha  
      improved low level  i a dfs

dfs based navigation algorithms explore new nodes traverse graph  thereby
avoiding future navigations nodes selected later expansion high
level  bene cial  seen experimental results next
subsection  take approach much further 
suppose agent navigating target node  along way  may pass near
nodes small f value without visiting them  path
target node according navigation algorithm  counter productive  since nodes
small f values likely chosen expansion high level near future 
visiting nodes agent nearby  may save lot traveling eort future 
order motivate agent visit nodes  want identify arti cially
decrease cost value  without changing value nodes  
incorporate notion  introduce improved a dfs  i a dfs  variant 
basic concept navigating target  low level select next node
visit considering approximate distance target node s f
value  way target  i a dfs tend visit  one hand  nodes
small f value  avoid visiting  hand  nodes completely track 
let n denote  respectively  target node neighboring node
currently evaluated  also  let f     denote f value node provided high level
a   let c    c  denote constants speci ed  used following heuristic function
selecting next node i a dfs 
   

fifelner  stern  ben yair  kraus    netanyahu


c 
 

dfs 
n
 
    c  ff  tn  
n   open
h n   
   

dfs n 
otherwise 
neighbor n open list  h n  value due a dfs remains intact  if 

however  neighboring node open list  i a dfs considers goodness
f value  node s h n  adjusted according product term decreases
node s f value  i e   node small f value assigned smaller heuristic    
speci cally  goodness f measured ratio f  t   f  n   target node
smallest f value among nodes open list  for otherwise would
selected expansion high level  therefore     f  t   f  n       f  t   f  n 
close    f  n  close f  t    case  highly probable node n
visited a  next steps  thus want assign higher priority node
visited agent  decreasing heuristic value  if  however  f  n     f  t  
 i e   f  t   f  n        highly unlikely node n selected anytime soon
high level a   interest raise node s priority  case 
a dfs heuristic retained  nodes open list 
expression provided     meets requirements  f  n  f  t   
term     f  t   f  n  becomes small  overall h value node decreases 
provides agent option visit nodes open list
small f values  even though a dfs heuristic best  if 
hand  f  n     f  t    term     f  t   f  n  approach    negligible eect
h n   main reason multiplying a dfs heuristic     f  t   f  n   and
f  n  f  t    example  leave intact cost value node relatively large
f value  continue compete  in local heuristic sense  nodes
open list  free parameters  c  c    aect qualitatively
performance i a dfs  merely add module s overall exibility 
experimented various constants c  c    attempt determine
optimal performance  extensive empirical studies shown c        
c        produced best performance  experiments demonstrated
using i a dfs yielded better results obtained navigation algorithms
listed subsection       
figure   illustrates dierence a dfs i a dfs  numeric values
nodes indicate order expanded a   suppose agent
currently located node c node   target  a dfs navigate
target via node    since node best f    g   h  value scenario described 
node    agent travel back side graph  node  
selected  by high level  expanded next  agent go back node  
eventually reach goal via node    i a dfs  hand  navigate
c node   via node   although node   assumed shortest path
node    smaller f value node    thus i a dfs chooses visit node   rst 
incorporating principle saves considerable amount travel cost  agent
located node   next node expanded node    high level
   since a dfs    f     measure distances graph  represent  essentially  scale 
thus combined directly 

   

fipha   finding shortest path a  unknown physical environment

r

 
 

c

 

 
 

a dfs
i a dfs

g

figure    example a dfs versus i a dfs navigation 
expand immediately  explored agent  thus
readily available  thus agent travel directly node   node   avoid
navigating back forth opposite sides graph 
      improved high level  wina 

a  expands nodes open list best  rst order according f value 
order optimal complexity expanding node o     however  real
physical environment  node expansion requires agent perform costly tasks 
always ecient expand current best node  consider  example  nearby node
best node open list  whose f value suciently small 
high probability would selected expansion a  next iterations 
intelligent agent choose explore node rst  even though currently
best node open list 

r
 
 

 
 

 

 

g
figure    example illustrating disadvantage a  
principle illustrated  example  subgraph figure  
contains two node clusters  numeric label node associated f value 
agent visiting nodes best  rst order  i e   order a  expands them  
travel back forth one cluster other  much better approach
   

fifelner  stern  ben yair  kraus    netanyahu

would explore nodes one cluster move cluster  thereby
traveling one cluster other 
order incorporate capability algorithm  generalized a 
call window a   wina    a  chooses expand node lowest f value 
wina  creates set  i e   window  k nodes smallest f values chooses
one node set expansion    window uses principle a   pearl
  kim        mentioned before  constructing window select
node expansion  objective minimize traveling eort agent 
reduce  necessarily  number expanded nodes  thus rather selecting
nodes small f value  choose nodes suciently close
location agent  experimented large number combinations 
concluded best way capturing two aspects simply taking
product  thus order nodes window cost function

c n    f  n  dist curr n 
n node evaluated  f  n  f value  dist curr n  distance n
current location agent  choose expand node smallest cost c 
 it sensible combine f  n  dist curr n  manner  expressed
distance units   note node small f value chosen
expansion  f value relative nodes open list tend decrease
time  f value newly generated nodes monotonically increasing 
heuristic used consistent admissible  property reduces chance
starvation   at least encountered phenomenon experiments  
intention demonstrate combining two factors  manner
favors nearby nodes small f value  indeed yields enhanced performance 
tried many functions combine two factors  e g  weighted sum  choose
paper discuss product  c n    f  n  dist curr n   since provided best
results 
combining modi ed high level variant low level navigation creates
technical diculties  due fact longer expand nodes open list
best  rst order  recall standard a  expands node generating neighbors
putting node closed list  node v closed list  shortest
path source node v known  hence  goal expanded found
shortest path it  search terminate  however  wina  node may
expanded although exists another node smaller f value
expanded yet  words  node v expanded  necessarily imply
best path v found  expanding node smaller f value might
discover better path  thus search cannot simply terminate goal node
chosen expansion 
problem solved splitting standard node expansion stage two phases 
   related algorithm derived  k best rst search  kbfs   felner  kraus    korf        
window size k determined open list  window nodes expanded
stage  neighbors nodes generated added open list 
new iteration begins 

   

fipha   finding shortest path a  unknown physical environment

   node expansion  expanding node means visiting node  generating
neighbors  adding open list  stage takes place immediately
node chosen high level 
   node closing  closing node means removing open list putting
closed list  takes place nodes smaller f value
explored  ensures  essentially  node placed closed
list best path source node found  see section  
comments   thus search continue  even goal node
expanded  placed closed list  goal node placed
closed list  search terminate 
following pseudo code wina   note standard expansion divided
according two phases  end cycle  algorithm attempts
close many nodes possible 
wina    f
 
 goal closed list  f
 
target   node window minimizes  node  dist current node 
 
target unexplored
 
explore target  low level
 
expand target 
 
 best node  with minimal f value  open list expanded 
 
close best node 
 
g





f





g

    experimental results

figure       node delaunay graph 
experimented delaunay graphs  okabe  boots    sugihara        
derived delaunay triangulations  latter computed set planar point
patterns  generated poisson point process  okabe et al          points distributed
   

fifelner  stern  ben yair  kraus    netanyahu

random unit square  using uniform probability density function  delaunay
triangulation planar point pattern constructed creating line segment
pair points  u v   exists circle passing u v encloses
point  triangulation characterized  sense  one
point joined line segment nearest neighbors points 
 we refer type delaunay graphs regular delaunay graphs   used
qhull software package  barber  dobkin    huhdanpaa        construct delaunay
triangulations  i e   delaunay graphs  sets points generated random
unit square  figure   illustrates    node delaunay graph 
principle  characteristic whereby node connected neighbors seems
suitable representing real road maps  main object research 
practice  however  additional characteristics accommodated capture adequately real road map  thus pursued sparse dense delaunay graphs
obtained regular delaunay graphs random deletion addition
edges  respectively   see appendix detailed discussion  
      low level experimental results
  
tree path
shrtest known path
aerial path
p dfs
d dfs
a dfs
i a dfs

  
  

search cost

  
  
  
  
  
  
 
   

    

    
    
    
    
number nodes graph

    

    

figure    search cost versus number nodes regular delaunay graphs various
low level algorithms 
figure   displays traveling distance  or search cost  agent function
number nodes delaunay graph  i e                         nodes  
graphs depicted correspond various low level algorithms pha  tested on 
every data point  here experiments  corresponds average    
dierent pairs initial goal nodes  picked random  average optimal
path observed        gure clearly demonstrates higher eciency
involved algorithms  particular  i a dfs consistently superior
algorithms graph sizes  graph size       example  outperformed
   note closeness average optimal path observed  i e         expected arc length
random graph dened set points  i e           ghosh        

   

fipha   finding shortest path a  unknown physical environment

simple algorithm factor     outperformed basic a dfs
factor    note search cost increases number nodes grows 
i e   domain becomes denser connected  attributed fact
number nodes grows  number nodes closed list i a dfs
procedure visit 
relative performance various algorithms considered remained
sparse dense delaunay graphs  see appendix a  
      experimental results wina 
 
    nodes
     nodes
     nodes

   
 

search cost

   
 
   
 
   
 
   
 

  

  

  

  
  
window size

  

  

  

figure    search cost wina  versus window size various sizes regular delaunay
graphs 
experiments show using wina  high level procedure pha  leads
signi cant improvement eciency algorithm  figure   presents average
distance traveled search agent optimal path found  function
window size  i a dfs employed low level algorithm  results shown
figure   indicate using window size larger    which corresponds standard
a   signi cantly improves algorithm s performance various graph sizes
experimented with  also  found optimal size window tends
vary size graph  based empirical observations  setting optimal
window size        times number nodes graph seemed provide
good approximation   for example  best window sizes observed           node
graphs        respectively   note window size becomes larger  i e  
number candidate nodes increases   algorithm tends select nodes large
f value  results performance degradation  additional results sparse dense
delaunay graphs presented appendix a 
rst glance  improvement wina  standard a   for high level  seems
somewhat modest  exceed      due fact i a dfs explores
many nearby nodes  already powerful begin with  wina  i a dfs
designed assign high priority nearby nodes  dierent stages
pha  algorithm  sense  compete  type improvement 
   

fifelner  stern  ben yair  kraus    netanyahu

indeed  using navigating algorithms  improvement wina  relative
standard a  much signi cant  however  dealing real physical agents  
let alone humans   even     time reduction wina   relative i a dfs 
viewed signi cant  similar results obtained sparse dense delaunay graphs
 see appendix a  

   analysis pha 
analyzing performance pha   distinguish following three parameters 
    cost returned path      shortest possible path agent travel      cost
actual path traveled agent  subsection     argue path reported
pha   for future use  optimal  addition  present subsection     extensive
empirical study compares          finally  provide subsection    
brief discussion pha  s underlying methodology overall performance 

    optimality solution

recall a  expands nodes best  rst order according f value  heuristic
function  h n   admissible  f  n    g n   h n  lower bound path goal
via node n  well known  paradigm  goal node selected
expansion  a  found optimal path  hart et al        karp   pearl       dechter
  pearl         put dierently  upon goal expansion f  goal    c  nodes
estimated paths f  n    c already expanded length optimal
path goal c  karp   pearl       dechter   pearl        
pha  supervised high level  activates admissible a    recall
h n  euclidean distance n goal  i e   admissible   design
algorithm  high level terminates goal node selected expansion  thus
properties admissible a   nodes smaller f value must already
expanded  f value goal optimal  note holds enhanced
pha  wina   see subsection         although wina  necessarily expand
nodes according best f value  designed remove node open list
smallest f value among nodes list  algorithm halts
goal node expanded removed open list  implying f value
smallest list  thus enhanced pha  variant compatible
admissible a  paradigm  path returns optimal  basic theoretical result
paper follows 
theorem  pha  enhanced versions return optimal path start
node goal 

    performance evaluation pha 
demonstrated above  complex algorithmic schemes provided dramatic improvement search time  interest assess  least extent  performance
best navigation variant  i e   wina   for high level  conjunction i a dfs
 for low level  
   

fipha   finding shortest path a  unknown physical environment

graph
size
  
  
  
   
   
   
   
   

closed
nodes
     
     
     
     
     
     
     
     

jtsp j
 

    
    
    
    
    
    
    
    

pha  ratio
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

table    comparison shortest paths nodes closed list actual paths
obtained pha  
agent s task visit essentially nodes expanded a  
nodes comprise set nodes closed list algorithm terminates 
general  invoking a  subgraph induced nodes  source
goal states heuristic function  exhibit behavior yield
open closed lists  thus given static graph  set nodes a  visit
xed  ideally  would agent visit set closed nodes along shortest
possible path  course infeasible  since nodes known advance 
rather determined y  however  order evaluate algorithm s performance 
compare output shortest possible path travels
nodes  computation latter carried o line  i e   set  closed 
nodes known 
speci cally  computed shortest possible path case respect
complete graph corresponding set closed nodes  weight w ni nj   associated
edge  ni nj    in complete graph  set length shortest path
ni nj  in original delaunay graph instance   finding shortest path
travels via given set nodes known traveling salesman problem  tsp  
notorious exponential running time  conventional tsp path travels
nodes returns start node  however  interested path
travels nodes without returning start node  denote path
tsp distinguish conventional tsp tour  tsp tour actually tsp tour
without last edge  view exponential nature problem  used
simple branch and bound tree search compute desired paths  however  solving
problem optimally feasible relatively small graph sizes 
table   provides comparison pha  shortest path travels
closed nodes various small sized graphs  table indicates pha 
algorithm quite ecient small graphs  speci cally  average travel cost  due
pha   greater shortest possible path  passing closed
 

 

   

fifelner  stern  ben yair  kraus    netanyahu

nodes       graphs     nodes less  number closed
nodes observed smaller     average cost cases computed   
random instances  graphs sizes greater      average cost computed
  instances only 
order evaluate  however  performance pha  graphs larger size  where
optimal path could computed reasonable amount time   employed
lower bound approximation cost tsp   speci cally  computed minimum
spanning tree  mst  complete graph  de ned set closed nodes   let jtsp j
jmstj denote  respectively  costs associated desired path minimum
spanning tree 
 

 

claim 

    jtsp j   jmstj jtsp j 
 

 

proof  claim follows basic graph theory  cormen  leiserson  rivest    stein 

       speci cally  inequality right hand side stems fact tsp
spanning tree complete graph  thus cost minimum spanning tree must
smaller  or equal to  jtsp j 
prove inequality left hand side  note triangular inequality
holds respect de ned complete graph   that is  three nodes  ni  
nj   nk   w nj nk   w ni nj     w nj nk     easily shown  based fact
triangular inequality holds respect original delaunay graphs
de nition edge weight complete graph  thus construct tour goes
twice around mst use triangular inequality shortcut edges 
hence
  jmstj jtspj   jtsp j
 

 

 

inequality left hand side follows   
given infeasible computation jtsp j  claim suggests jmstj  instead 
reasonably good approximation  speci cally  inequality right hand side implies
travel cost agent performing pha  is  say  c jmstj  travel cost
pha  greater c jtsp j  given merely lower bound  pha 
expected perform better practice 
table   provides comparison pha  mst lower bound shortest
path described above  average cost entered graph size computed
    randomly generated instances  table indicates that  average  cost
pha       times best possible path graph sizes      nodes
corresponding sets closed nodes     nodes 
 

 

    discussion

repeatedly noted  algorithm returns optimal solution must expand
least nodes expanded a   drawing basic premise  pha 
algorithm designed visit set  mandatory  nodes eciently possible 
rationale visiting nearby nodes  whose f value necessarily smallest 
nodes likely expanded next iterations  contrast 
   

fipha   finding shortest path a  unknown physical environment

graph
size
   
   
    
    
    
    

closed
nodes
     
     
     
      
      
      

jmstj

approx 
    
    
    
    
    
    

pha  ratio
    
    
    
    
    
    

    
    
    
    
    
    

table    comparison lower bounds shortest paths nodes closed list
actual paths obtained pha  
bene enhanced variation context navigation algorithm
presume return optimal solution 
reconsider roadmap a   example  a  activated prevent local navigation phase going wrong direction  however  since algorithm designed
return optimal solution  deviate stage promising route
visit nearby node may expanded later on  put dierently  notion
set mandatory nodes agent visit  furthermore  soon agent
reaches goal  search halts  conclusion  although pha  roadmap a 
two level navigation schemes  objectives dierent solve essentially
dierent problems 
based properties admissible a  design algorithm 
argued  enhanced  pha  returns path  for future use  optimal  addition 
absence theoretically known bound actual cost pha   run
extensive empirical study  comparing observed costs best possible costs
computed o line  given agent lacks priori information set mandatory
nodes  highly unlikely exists on line pha  like algorithm performs
eciently o line version  extensive empirical study demonstrates  nevertheless 
actual cost associated pha  order magnitude optimal
cost computed o line 

   mapha   multi agent pha 
section generalize techniques discussed previous sections multiagent case  number agents cooperate order nd shortest path  call
resulting algorithm multi agent physical a   mapha   
would divide traveling eort agents ecient way
possible  measure eciency multi agent case using two dierent criteria 
rst overall global time needed solve problem  second total
amount fuel consumed agents search  requirement
minimize cost moving agents time important  considering fuel
   

fifelner  stern  ben yair  kraus    netanyahu

cost mobilizing agents cost function choice  case  may wise
move agents agents remain idle  however  task nd best
path goal  soon possible  idle agents seem wasteful  better utilize
time exploration graph  case  available agents
moving times  introduce two algorithms two perspectives  namely
fuel ecient algorithm time ecient algorithm  note single agent case
two criteria coincide 
assume agent communicate freely agents share
data time  thus information gathered one agent available known
agents  framework obtained using model centralized
supervisor moves agents according complete knowledge gathered
them  reasonable assumption since many cases dispatcher
centralized controller gathers information agents instructs
accordingly  another possible model complete knowledge sharing agent
broadcasts new data graph agents  future research may
address restrictive communication model  limiting communication range
inducing communication errors 
assume search terminates  soon goal node expanded
moved closed list  objective minimize travel eort point 
care moving agents pre speci ed location  e g  
goal vertex start node   desired shortest path identi ed  convention
accordance many algorithms neglect report time spent  reset 
system  e g   garbage collection   desired solution arrived at 
main idea mapha  algorithm similar pha  single
agent  use two level framework  high level chooses nodes expand 
low level navigates agents nodes  studied multi agent
case enhanced techniques only  i e   wina  high level i a dfs
low level  problem deal assign dierent agents
explore eciently dierent nodes 

    mapha   fuel e cient algorithm

simplicity  assume amount fuel consumed agent equal
traveling distance search  since purpose algorithm case
minimize amount fuel consumed agents  regardless overall search time 
bene moving one agent time  moving
one agent  agent might gain new knowledge graph would allow
agents make informed intelligent moves 
beginning  agents situated source node  then  case
single agent  high level de nes window unexplored nodes open list
potential candidates expansion  pair  a n   agent n
node window  compute allocation cost function
c a n    f  n  dist a n 
f  n  f value node n dist a n  denotes distance location
agent node n  select agent target node minimize allocation
   

fipha   finding shortest path a  unknown physical environment

function  case tie breaking  e g   beginning search agents
located initial state   pick randomly one agent relevant candidates 
stage  low level algorithm navigates selected agent target node selected
window order explore node  single agent case  additional
knowledge graph obtained navigation many unexplored
nodes visited traveling agent  selected agent reaches target
new cycle activated high  low level procedures   following pseudo code
fuel ecient algorithm 
fuel efficient algorithm   f
 
 goal closed list  f
 
agent
 
select node window minimizes
 
best   agent minimizes   i  dist   
 
best unexplored
 
explore  best   low level using best
 
expand  best  
 
 best node open list expanded 
 
close best node 
 
g








n



n

n

n



fn

n

f  n  dist ai n 



g

    mapha   time e cient algorithm

time ecient algorithm similar described fuel ecient algorithm
one basic modi cation  instead moving one agent high level cycle 
move available agents since care time spent
agents fuel consumption  idle agent save time 
every moving agent help gather knowledge environment
additional cost  clock ticks away regardless time measured globally 
cannot use allocation function used fuel ecient
algorithm  agents located initially node  fuel ecient allocation
function choose node agents  main idea time ecient
strategy agents move simultaneously  thus ensure ecient performance
need distribute much possible  suppose p available agents k
nodes window  would distribute p agents k nodes eciently
possible  brute force approach randomly distribute agents nodes 
however  provide eective distribution  incorporate following three criteria
distribution formula time ecient procedure 
   since f values neighboring nodes somewhat correlated other 
nodes small f value likely generate new nodes small f
   implemented complex variant  whenever new unexplored node reached 
new high level cycle activated  results obtained signicantly dierent  omit
details variant simplicity  see  stern        comprehensive description 

   

fifelner  stern  ben yair  kraus    netanyahu

values nodes large f value  therefore  distribution favor
assigning agent node small f value 
   another attribute taken consideration distance target
node agent  would assign agent one nodes
manner  expected travel distance agent  for assignment 
minimized  words  agent assigned  preferably  relatively closeby node 
   order expand entire window prevent  starvation   would
distribution function raise priority nodes assigned small number
agents  thus keep track number agents assigned
node give preference nodes small number assignments 
note rst third criteria may contradict  i e  rst criterion prefer
nodes small f value third criterion favor nodes large f value 
small number agents assigned them 
found taking product values associated three criteria
gives good distribution function suitable load balancing criteria 
speci cally  agent allocation procedure iterates agents picks 
agent  node minimizes following allocation function 
alloc agent node    f  node  dist agent node   count node      
dist node agent  euclidean distance node agent  f  node 
node s f value  count node  counter keeps track number agents
already assigned explore node  count node  initially set  
incremented every time agent assigned node  thus load balancing
three factors kept throughout distribution process  beginning
search agents located start node  initial allocation
dierent nodes determined  essentially  count factor   without factor 
product f  n  dist agent n  would returned node n agents  
search progresses  agents move dierent locations get assigned step
nodes closer location small f value  thus product
three factors creates good distribution  of agents  dierent parts
graph 
consider  example  case illustrated figure    suppose     agents
located node x  window consists three nodes a  b  c located
equal distance x  suppose f  a       f  b      and  f  c      
numbers agents assigned nodes  using allocation procedure 
            respectively  good balance various requirements 
tried many variations distribution procedure found
performed well long three requirements met  see  stern       
discussion agent distribution 
before  agent navigates assigned target using enhanced low level algorithm  i a dfs  another high level iteration begins soon rst agent reaches
   

fipha   finding shortest path a  unknown physical environment

x


b

f a   

c
f c   

f b   

figure    example agent distribution according proposed allocation procedure 
target node    note computation time window agent
distribution allocation neglected  since care travel time
agents  following pseudo code time ecient algorithm 
time efficient algorithm   f
 
 goal closed list  f
 
free agent
 
select window node minimizes dist 
 
move agents agent reaches node
 
expand nodes currently visited agent
 
 best node open list expanded 
 
close best node 
 
g






n

n  f  n   count n     



g

    experimental results

experiments performed multi agent case conducted delaunay
graphs                             nodes  additional results sparse
dense delaunay graphs provided appendix a 
      mapha   results fuel efficient algorithm

provide results fuel ecient algorithm subsection      fuel consumption reported total fuel consumed agents   as before  graphs
generated unit square  average optimal path observed       
figure   presents costs fuel ecient algorithm function number
agents various sizes regular delaunay graphs   results sparse graphs  well
graphs edges added random  presented appendix a   gure clearly
    observed new iteration begins  almost every agent assigned node
assigned previous iteration  typically agent s location becomes
closer  its  target node  criteria change  thus practice  agents
go complete  original  tasks  agent reached target assigned new
goal node  see  stern        detailed discussion 

   

fifelner  stern  ben yair  kraus    netanyahu

   
    nodes
     nodes
     nodes
     nodes

 
   

fuel consumption

 
   
 
   
 
   
 
   
 

 

 

 

 
 
number agents

 

 

 

figure    fuel consumption function number agents various sizes regular
delaunay graphs 
demonstrates agents added  overall fuel consumption decreases
point adding agents tends increase overall consumption  thus
optimal number agents exists graphs  phenomenon due fact
a  usually characterized small number search regions  therefore  small
number agents suces cover regions  number agents increases  fuel
consumption goes up  phenomenon explained follows  large number agents
increases likelihood nearby agent assigned speci c node 
case relatively little exploration graph takes place  assigning  hand 
distant agent node would result larger degree graph exploration 
essential  long run  ecient navigation  especially i a dfs employed   thus
large number agents navigating small graph  which search regions   would
result excessive fuel consumption  see  stern        detailed explanation
phenomenon 
optimal number agents increases number nodes graph increases 
optimal number agents graph     nodes    number increases
  graph size       stems fact larger graphs search
regions thus agents needed explore them 
described before  one agent allowed move experiment  point
time  measured total amount fuel consumed
agents  interest nd whether work uniformly distributed among
agents  whether large portion work carried small number agents 
table   presents distribution work among agents    agents
active delaunay graphs size       graph instance  sorted agents
decreasing order fuel consumption  table shows relative fuel consumption
agents          activated agents 
general  remark overall work uniformly distributed  quite
balanced  example     agents activated      work done  
   

fipha   finding shortest path a  unknown physical environment

agent no    agents      agents       agents   
 
     
     
     
 
     
     
     
 
     
     
     
 
     
     
 
    
    
 
    
    
 
    
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    
table    work distribution among multiple agents running fuel ecient algorithm
delaunay graphs size      
agents  similar tendency observed graphs sizes  well sparse
dense delaunay graphs  see appendix a  
order improve eciency fuel ecient algorithm make overall
work distribution balanced  several improvements might suggested  example 
currently agents positioned initially source node  might consider
rst spread agents number directions invoke algorithm 
notwithstanding additional overhead may incurred spreading agents 
technique result balanced work distribution reduced overall fuel
consumption 
      mapha   results time efficient algorithm

subsection report results time ecient algorithm subsection     
explained  main objective conclude task fast possible 
fuel consumption concern  agents always moving  i e   none
idle point time  overall search time case
maximal distance either agent travels shortest path goal node found 
figure   shows search time obtained time ecient algorithm function
number agents  various regular delaunay graphs  note search time
never smaller time takes travel along shortest path goal 
results indicate  adding agents always ecient since measure overall
time elapsed goal found  makes algorithm interesting
ecient fact add agents  search time converges asymptotically
   

fifelner  stern  ben yair  kraus    netanyahu

  
    nodes
     nodes
     nodes
     nodes
     nodes

 
 

search time

 
 
 
 
 
 
 
 
 

 

 

 
 
number agents

  

  

  

figure    time consumption function number agents  various regular
delaunay graphs 
length shortest path  recall average length observed shortest path
approximately       indeed  large number agents tend nd optimal path
within time frame approaches limit  overall time    
single agent  reduced        agents graphs     nodes example 
using proposed agent allocation procedure  note asymptotically paths
initial state traveled breadth  rst search manner  say
suciently large team agents likely produce single agent travel along
actual shortest path little deviation it  similar results time  ecient
algorithm obtained types graphs  see appendix a  

    combined requirements fuel time

distinction time ecient algorithm fuel ecient algorithm
reasonable  may suitable many practical situations  practical considerations
time fuel resources may suggest combined approach  one described below 
consider  example  commander operating constraint fuel consumption
restriction number troops assigned certain task 
order complete task fast possible  commander may want use maximal
possible number agents without exceeding fuel consumption limit 
essence  seek generalize mapha   agents minimize cost
function combination time fuel consumption  suggest general cost
function takes account requirements measures  objective
activate mapha   minimize cost function  speci cally  suggest
following linear combination 

ctotal   wt time   wf fuel
wt wf  normalized  weights attached  respectively  time fuel
consumption  i e       wt wf     wt   wf         ctotal calculated globally  i e  
   

fipha   finding shortest path a  unknown physical environment

measure amount time beginning task optimal path
found  total amount fuel consumed agents  multiply
quantities corresponding weights report combined cost 
wt wf prespeci ed user  wt      time cost
fuel ecient algorithm appropriate one use  wf      fuel cost 
use time ecient algorithm  otherwise  neither wt wf   
use dierent algorithm minimize ctotal 
suggest two algorithms general case 
simple combined algorithm 
algorithm actually identical time ecient algorithm  number
participating agents parameter provided user  iteration
high level participating agents move according allocation function
time ecient algorithm  given formulation total cost  ctotal  would
determine optimal number agents  wt wf   note
trivial case wf      adding agents always valuable  since
consume resources  reduce time cost  however  wf increases 
large number agents may increase total cost 
improved combined algorithm 
main limitation simple combined algorithm even though cost
incurred fuel consumption  agents always moving  improved combined algorithm addresses problem suggests moving agents
simultaneously  using formalization  rst determine p  i e   number
agents participate task  given p  determine m  i e   number agents actually distributed nodes selected window  by
high level   remaining p   agents stay idle  note simple
combined algorithm p coincide  use mechanism time ecient
allocation function  except algorithm chooses  out p  agents
minimize allocation function  time ecient algorithm  rst
determine size window  i e   number nodes open list
expanded  then  invoke allocation function  whereas
time ecient case allocation terminates agents assigned nodes 
allocation stops agents selected  selected agents best
agents expansion cycle since minimize allocation function 

    results combined algorithm

provide experimental results combined algorithm introduced
previous subsection  results tables     obtained delaunay graphs
size      table entry represents average     problem instances 
column  bold face number smallest total cost corresponding wt  wf ratio 
minimal costs determine optimal number agents given wt  wf ratio 
table   provides total costs simple combined algorithm function
number agents various wt  wf ratios  leftmost column corresponds case
   

fifelner  stern  ben yair  kraus    netanyahu

wt
wf

   
   

  agents
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    

   
   

   
   

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    
    

    
    
    
    
    
    
    

    
         

   
   

   
   

   
   

   
   

                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   

   
   

   
   

   
   

   
   

              
              
              
              
              
              
              
              
              
              
              
              
              
               

    

    
    
    
    
    
    
    
    
    
    
     
     
     

table    ctotal simple combined algorithm function number agents 
various ratio wt  wf ratios 

   

fipha   finding shortest path a  unknown physical environment

time matters  thus entries identical values obtained timeecient algorithm  fuel consumption becomes signi cant  longer bene cial
increase number agents thus optimal number agents decreases 
wt   wf        ctotal       time       fuel  optimal number agents obtained
three  total cost       critical fuel consumption becomes 
bene cial use smaller number agents  rightmost column corresponds
extreme case  wf        i e   fuel consumption matters  note
entries column dier counterpart costs obtained fuel ecient
algorithm  dierence stems fact that  context simple combined
algorithm  picking p agents means moving simultaneously  whereas
case fuel ecient algorithm employed one agent  out p  allowed
move times  note fuel ecient algorithm essentially special case
improved combined algorithm     
table   provides total costs improved combined algorithm function
number agents various wt  wf ratios  number participating agents p     
 i e      available agents could move simultaneously   row corresponds
dierent m  i e   actual number moving agents   clearly    p       
before  column bold face number smallest total cost corresponding
wt  wf ratio  minimal costs determine optimal number moving agents
given wt  wf ratio 
top entry rightmost column identical cost obtained fuelecient algorithm     agents  case wf      one agent allowed
move point time  bottom entry leftmost column identical cost
obtained time ecient algorithm     agents  case wt     
   participating agents moving times 
signi cant fuel consumption becomes  less bene cial move many
agents  thus optimal number moving agents decreases  example  wt   wf  
     optimal number moving agents obtained three  total cost      
fuel consumption becomes crucial  would bene cial move smaller number
participating agents 
comparing results simple combined algorithm improved
combined algorithm reveals wt  wf ratio number
moving agents  which equal number participating agents simple
combined case  improved combined algorithm usually performs better 
pick moving agents larger sample  also  appears optimal number
moving agents smaller improved combined algorithm  algorithm 
moving agents picked clever manner cycle thus better utilized 
additional experiments conducted graph sizes  well sparse
dense delaunay graphs  results obtained cases rather consistent  future
work attempt predict advance best number agents 

   conclusions future work
addressed problem nding shortest path goal node unknown
graphs represent physical environments  presented two level algorithm 
   

fifelner  stern  ben yair  kraus    netanyahu

wt
wf

   
   

  agents
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    

   
   

   
   

   
   

    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    

    

         
         

              
    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

   
   

   
   

   
   

   
   

                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   

   
   

   
   

   
   

              
    
    
    
    
    
    
    
    
    
    
    
    
    

         
         
         
         
         
         
         
         
         
         
         
         
          

table    total costs improved combined algorithm function number
moving agents  out    participating agents   various wt  wf values 

   

fipha   finding shortest path a  unknown physical environment

pha   environments single search agent  mapha  algorithm
multiple agents  experimented several variations delaunay graphs  containing      nodes  enhanced single agent algorithm yielded signi cantly better
results ones obtained simpler variants  results fuel ecient
algorithm show using agents bene cial extent 
agents initially located source node consume fuel
move make  reason  bene using optimal number agents
opposed one agent modest  results time ecient algorithm
encouraging  since search time converges quickly optimum number
search agents increases  introduced cost function combines time
consumption fuel consumption  presented two algorithms paradigm 
results show combination exists optimal number agents
tends increase weight time cost increases 
future work pursued along following directions 
assumed upon reaching node  agent learn locations
neighbors  many domains model may valid  location
node known agent actually visits it  model
suggested  shmoulian   rimon         research done order
implement algorithms  context model 
used traveling agents solve shortest path problem  similar mechanism might used solving known graph problems  minimum
spanning tree  traveling salesman problem  problem requires
consideration node visited next 
proposed two algorithms combining time consumption fuel consumption  algorithms assume number agents determined priori  future
work try theoretically determine optimal number agents given constraints  also  future work done see whether changing number
would increase eciency algorithm  also  assumed agents
consume fuel move  measured total performance
time task  thus idle agents consume resources  however 
think model idle agents consume resources  e g   time energy  
assumed centralized model  agents share knowledge
times  future work assume communication paradigms  particular 
interested model communication
agents  model known ant robotics model  wagner   bruckstein      
yanovski  wagner    bruckstein         model  information spread
agents pheromones  i e   data written agent node  agents
read pheromones reaching nodes  currently working
towards applying mapha  algorithm model  believe
increase size data allowed written node 
agent able write complete knowledge node environment 
challenge applying a  model lies fact since a  maintains
global open list  data opposite sides graph inuence behavior
   

fifelner  stern  ben yair  kraus    netanyahu

algorithm  thus need knowledge sharing system large
possible  purpose  believe new type communication agents
introduced  agents type try increase search frontier
rather move around environment spread recent data available 

acknowledgments
preliminary version paper appeared proceedings first international joint
conference autonomous agents multi agent systems        felner et al         
work carried rst author bar ilan university  material
based upon work supported part nsf grant          isf grant
      

appendix a  additional experimental results
mentioned subsection      node regular delaunay graph connected
neighbors  property may always apply real road map  example 
nearby geographic locations may always connected road segment  due
existence obstacles mountain river  addition  distant locations often
connected highways  capture additional characteristics  considered so called sparse dense delaunay graphs  instances variants easily
obtained regular delaunay graphs random deletion addition edges  respectively  speci cally  generated sparse delaunay graph instances deleting roughly
    edges random  likewise  dense instances generated introducing    
edges random   a new edge created selecting random pair nodes  
run algorithms presented main body paper
delaunay graph variants  results obtained presented here 
expected  sparse graph  often agent runs deadends  indeed  algorithms required additional travel eort nd optimal path
edges removed  however  ratio travel cost two algorithms
seems remain  for various delaunay graph types   i a dfs exhibits
superior performance graph instances  see figures    a    b   behavior proved
consistent experiments  single agent multi agent environment 
also  figures    a    b  exhibit similar behavior search cost wina  versus window
size sparse delaunay graphs dense delaunay graphs  respectively  observed
regular delaunay graphs  see figure    
figures    a    b  present costs fuel ecient algorithm function
number agents various sizes sparse dense delaunay graphs  respectively 
overall fuel consumption recorded sparse delaunay graphs larger fuel
consumption recorded counterpart regular graphs  see figure    factor
     graphs simulating highways  i e   dense graphs  fuel consumption
decreases relative sparse regular delaunay graphs 
note optimal number agents navigating sparse graph increases  since
agents need backtrack often case  thus agents assist
   

fipha   finding shortest path a  unknown physical environment

   

  
tree path
shrtest known path
aerial path
p dfs
d dfs
a dfs
i a dfs

  
  

  
  

  

search cost

search cost

  

tree path
shrtest known path
aerial path
p dfs
d dfs
a dfs
i a dfs

  

  
  

  
  
  

  

  

  

 

  
 
   

    

    
    
    
    
number nodes graph

    

 
   

    

    

    
    
    
    
number nodes graph

    

    

 a 
 b 
figure     search cost versus number nodes of   a  sparse delaunay graphs   b 
dense delaunay graphs various low level algorithms 

 

 
    nodes
     nodes
     nodes

   

    nodes
     nodes
     nodes

   

 
 

 

search cost

search cost

   

   
 
   

   

 

   

 
 
   
 

   
 

  

  

  

  
  
window size

  

  

  

 

  

  

  

  
  
window size

  

 a 
 b 
figure     search cost wina  versus window size various sizes of   a  sparse delaunay
graphs   b  dense delaunay graphs 

   

  

  

fifelner  stern  ben yair  kraus    netanyahu

   

 
    nodes
     nodes
     nodes
     nodes

 
   

   
   
fuel consumption

 
fuel consumption

    nodes
     nodes
     nodes
     nodes

   

   
 
   

   
 
   

 

   

   

   

 

   

   

 
 

 

 

 

 
 
number agents

 

 

 

 

 

 

 

 
 
number agents

 

 

 

 a 
 b 
figure     fuel consumption function number agents various sizes of   a 
sparse delaunay graphs   b  dense delaunay graphs 
search  hand  adding random edges graphs causes opposite eect 
i e   less fuel consumed optimal number agents reduced  explained
fact new edges add connections nodes  i e   many  shortcuts 
created search carried faster smaller number agents 
  

   
    nodes
     nodes
     nodes
     nodes
     nodes

  
 

   

 
 

 
search time

search time

    nodes
     nodes
     nodes
     nodes
     nodes

 

 
 

   
 

 
 

   

 
 

 
 

   
 

 

 

 

 
 
number agents

 

 

 

 

 

 

 

 
 
number agents

 

 a 
 b 
figure     time consumption function number agents various sizes of   a 
sparse delaunay graphs   b  dense delaunay graphs 
figures    a    b  present costs time ecient algorithm function
number agents various sizes sparse dense delaunay graphs  respectively 
results con rm tendency observed regular delaunay graphs  see
   

 

 

fipha   finding shortest path a  unknown physical environment

figure     namely number agents grows  overall cost converges
length optimal path 

references
argamon engelson  s   kraus  s     sina  s          utility based on line exploration
repeated navigation embedded graph  articial intelligence                    
argamon engelson  s   kraus  s     sina  s          interleaved vs  priori exploration
repeated navigation partially known graph  international journal pattern
recognition articial intelligence                 
barber  c  b   dobkin  d  p     huhdanpaa  h          quickhull algorithm convex
hull  tech  rep   geometry center technical report gcg    university minnesota 
bellman  r          routing problem  quarterly applied mathematics                
bender  m  a   fernandez  a   ron  d   sahai  a     vadhan  s  p          power
pebble  exploring mapping directed graphs  proceedings thirtieth
annual acm symposium theory computing  pp           dallas  texas 
cormen  t  h   leiserson  c  e   rivest  r  l     stein  c          introduction algorithms  mit press  cambridge  massachusetts   nd edition 
cucka  p   netanyahu  n  s     rosenfeld  a          learning navigation  goal nding
graphs  international journal pattern recognition articial intelligence 
               
dechter  r     pearl  j          generalized best  rst search strategies optimality
a   journal association computing machinery                 
dijkstra  e  w          note two problems connexion graphs  numerische
mathematik             
felner  a   kraus  s     korf  r  e          kbfs  k best rst search  annals mathematics articial intelligence  press 
felner  a   stern  r     kraus  s          pha   performing a  unknown physical environments  proceedings first international joint conference autonomous
agents multi agent systems  pp           bologna  italy 
ghosh  b          random distances within rectangle two rectangles  bulletin
culcutta mathematical society            
hart  p  e   nilsson  n  j     raphael  b          formal basis heuristic determination minimum cost paths  ieee transactions systems science cybernetics 
scc               
kaelbling  l  p     moore  a  w          reinforcement learning  survey  journal
articial intelligence research             
karp  r     pearl  j          searching optimal path tree random costs 
articial intelligence                  
   

fifelner  stern  ben yair  kraus    netanyahu

kitamura  y   teranishi  k     tatsumi  s          organizational strategies multiagent real time search  proceedings second international conference
multi agent systems          
knight  k          many reactive agents better deliberative ones  
proceedings thirteenth international joint conference articial intelligence 
pp           chamb ery  france 
koenig  s     likhachev  m       a   d  lite  proceedings eighteenth national
conference articial intelligence  aaai   pp           edmonton  canada 
koenig  s     likhachev  m       b   incremental a   advances neural information
processing systems     nips   mit press  cambridge  ma 
korf  r  e          depth  rst iterative deepening  optimal admissible tree search 
articial intelligence                
korf  r  e          real time heuristic search  articial intelligence                 
korf  r  e          linear space best  rst search  articial intelligence               
korf  r  e          finding optimal solutions rubik s cube using pattern databases 
proceedings fourteenth national conference articial intelligence  pp 
         providence  rhode island 
korf  r  e          sliding tile puzzles rubik s cube ai research  ieee intelligent
systems           
okabe  a   boots  b     sugihara  k          spatial tessellations  concepts  applications voronoi diagrams  wiley  chichester  uk 
pearl  j     kim  j  h          studies semi admissible heursitics  ieee transactions
pattern analysis machine intelligence             
shmoulian  l     rimon  e          roadmap a   algorithm minimizing travel eort
sensor based mobile robot navigation  proceedings ieee international
conference robotics automation  pp           leuven  belgium 
stentz  a          optimal ecient path planning partially known environments 
proceedings ieee international conference robotics automation 
pp             san diego  ca 
stern  r          optimal path search unknown physical enviroments  m sc 
thesis  department computer science  bar ilan university  israel available
http   www cs biu ac il felner 
taylor  l     korf  r          pruning duplicate nodes depth  rst search  proceedings
eleventh national conference articial intelligence  pp           washington  d c 
wagner  a     bruckstein  a  m          ants  agents  networks  trees  subgraphs 
future generation computer systems journal                 
yanovski  v   wagner  i  a     bruckstein  a  m          vertex ant walk  robust method
ecient exploration faulty graphs  annals mathematics articial intelligence                  
   


