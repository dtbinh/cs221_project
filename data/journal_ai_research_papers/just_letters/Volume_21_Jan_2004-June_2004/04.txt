journal of arti cial intelligence research                  

submitted      published     

pha   finding the shortest path with a  in an unknown
physical environment
ariel felner

department of information systems engineering 
ben gurion university of the negev  beer sheva         israel

roni stern
asaph ben yair
sarit kraus
nathan netanyahu

department of computer science  bar ilan university
ramat gan  israel       

felner bgumail bgu ac il
sternr  cs biu ac il
benyaya cs biu ac il
sarit cs biu ac il
nathan cs biu ac il

abstract
we address the problem of nding the shortest path between two points in an unknown
real physical environment  where a traveling agent must move around in the environment
to explore unknown territory  we introduce the physical a  algorithm  pha   for solving
this problem  pha  expands all the mandatory nodes that a  would expand and returns
the shortest path between the two points  however  due to the physical nature of the
problem  the complexity of the algorithm is measured by the traveling eort of the moving
agent and not by the number of generated nodes  as in standard a   pha  is presented as
a two level algorithm  such that its high level  a   chooses the next node to be expanded
and its low level directs the agent to that node in order to explore it  we present a
number of variations for both the high level and low level procedures and evaluate their
performance theoretically and experimentally  we show that the travel cost of our best
variation is fairly close to the optimal travel cost  assuming that the mandatory nodes of
a  are known in advance  we then generalize our algorithm to the multi agent case  where
a number of cooperative agents are designed to solve the problem  speci cally  we provide
an experimental implementation for such a system  it should be noted that the problem
addressed here is not a navigation problem  but rather a problem of nding the shortest
path between two points for future usage 

   introduction
in this paper we address the problem of nding the shortest path between two points
in an unknown real physical environment  in which a mobile agent must travel around
the environment to explore unknown territories  search spaces of path  nding problems
are commonly represented as graphs  where states associated with the search space are
represented by graph nodes  and the transition between states is captured by graph edges 
graphs can represent dierent environments  such as road maps  games  and communication
networks  moving from one node of the graph to another can be done by applying logical
operators that manipulate the current state or by having an actual agent move from one
node to another  the sliding tile puzzle and rubik s cube  korf        are examples of the
c      ai access foundation  all rights reserved 

fifelner  stern  ben yair  kraus    netanyahu

rst type  while a road map is an example of the second type  graphs in search problems
can be divided into the following three classes 

fully known graphs  if all the nodes and edges of a graph are stored in the com 

puter  then the graph is fully known  the input for such problems is usually the
complete graph which is represented by an adjacency matrix or an adjacency list  a
relevant problem in this case would be to nd  for example  the shortest path in a
road map in which all the nodes and edges are known in advance 

very large graphs  graphs that due to storage and time limitations are not completely known and cannot be fully stored in any storage device  many graphs for
search problems have an exponential number of nodes  for example  the    tile puzzle problem has      states and cannot be completely stored on current machines 
the input for such problems is usually speci ed by the general structure of a state
in the search space  the dierent operators  an initial state  and a set of goal states 
only very small portions of such graphs are visited by the search algorithms or are
stored in memory 

small  partially known graphs  the third class contains graphs that represent a
partially known physical environment  for example  a mobile agent in an unknown
area without a map does not have full knowledge of the environment  given enough
time  however  the agent can fully explore the environment since it is not very large 
due to the partial knowledge  only a small portion of the graph is given as input 

for the class of fully known graphs  classical algorithms  such as dijkstra s single source
shortest path algorithm  dijkstra        and the bellman ford algorithm  bellman        
can be used to nd the optimal path between any two nodes  these algorithms assume that
each node of the graph can be accessed by the algorithm in constant time  this assumption
is valid since all the nodes and edges of the graph are known in advance and are stored in
the computer s memory  thus the time complexity of these algorithms is measured by the
number of nodes and edges that they process during the course of the search 
for the second class of graphs the above algorithms are usually not ecient  since the
number of nodes in the graph is very large  usually exponential   also  only a very small
portion of the graph is stored in memory at any given time  the a  algorithm  hart  nilsson    raphael        and its linear space versions  e g   ida   korf        and rbfs  korf 
       are the common methods for nding the shortest paths in large graphs  a  keeps an
open list of nodes that have been generated but not yet expanded  and chooses from it the
most promising node  the best node  for expansion  when a node is expanded it is moved
from the open list to the closed list  and its neighbors are generated and put in the open
list  the search terminates when a goal node is chosen for expansion or when the open
list is empty  the cost function of a  is f  n    g n    h n  where g n  is the distance
traveled from the initial state to n  and h n  is a heuristic estimate of the cost from node
n to the goal  if h n  never overestimates the actual cost from node n to the goal  we say
that h n  is admissible  when using an admissible heuristic h n   a  was proved to be
admissible  complete  and optimally eective  dechter   pearl         in other words  with
such a heuristic  a  is guaranteed to always return the shortest path  furthermore  any
   

fipha   finding the shortest path with a  in an unknown physical environment

other algorithm claiming to return the optimal path must expand at least all of the nodes
that are expanded by a  given the same heuristic 
an a  expansion cycle is carried out in constant time  this is because it takes a constant
amount of time to retrieve a node from the open list  and to generate all its neighbors  the
latter involves applying domain speci c operators to the expanded node  thus the time
complexity of a  can also be measured in terms of the number of generated nodes  
in this paper we deal with nding the shortest path in graphs of the third class  i e  
small  partially known graphs which correspond to a real physical environment  unlike
graphs of the other two classes  where a constant number of computer operations are done
for node expansion  we cannot assume  for this type of graphs  that visiting a node takes
constant time  many of the nodes and edges of this graph are not known in advance 
therefore  to expand a node that is not known in advance  a mobile agent must rst travel
to that node in order to explore it and learn about its neighbors  the cost of the search in
this case is the cost of moving an agent in a physical environment  i e   it is proportional
to the distance traveled by the agent  an ecient algorithm would therefore minimize the
distance traveled by the agent until the optimal path is found  note that since small graphs
are considered here  we can omit the actual computation time and focus only on the travel
time of the agent  in this paper we introduce the physical a  algorithm  pha   for solving
this problem  pha  expands all the mandatory nodes that a  would expand and returns
the shortest path between the two points  however  the complexity of the algorithm is
measured by the traveling eort of the moving agent  in order to minimize the traveling
as will be shown  pha  is designed to to minimize the traveling eort of the agent by
intelligently choosing the next assignment of the traveling agent  as described below  many
times the agent chooses to rst move to nearby nodes even though they do not immediately
contribute to the proceeding of a  
unlike ordinary navigation tasks  cucka  netanyahu    rosenfeld       korf      
stentz       shmoulian   rimon         the purpose of the agent is not to reach the goal
node as soon as possible  but rather explore the graph in such a manner that the shortest
path will be retrieved for future usage  on the other hand  our problem is not an ordinary
exploration problem  bender  fernandez  ron  sahai    vadhan         where the entire
graph should be explored in order for it to be mapped out  following are two motivating
examples of real world applications for our problem 

example    a division of troops is ordered to reach a speci c location  the coordinates of the location are known  navigating with the entire division through unknown
hostile territory until reaching its destination is unreasonable and inecient  it is common in such a case to have a team of scouts search for the best path for the division to
pass through  the scouts explore the terrain and report the best path for the division
to move along in order to reach its destination in an ecient manner 

   in fact  for a   if the open list is stored as a priority queue  then it would take logarithmic time to
retrieve the best node  however  for many problems  such as the sliding tile puzzles and rubik s cube 
a simple rst in rst out queue suces  korf      ff taylor   korf      ff korf         likewise  for the
linear space versions  such as ida  and rbfs  which are based on depth rst search   the assumption
that it takes constant time per each node is valid  also we assume that the number of neighbors is
bounded 

   

fifelner  stern  ben yair  kraus    netanyahu

example    computer systems connected to networks can be on  or o line at
dierent times  and their throughput can be seriously degraded due to busy communication channels  therefore  many networks cannot be represented as xed  fully
known graphs  transferring large amounts of data  e g   multimedia les  between
two computers over a network can often be time consuming  since the data may be
routed through many communication channels and computer systems before reaching
their destination  finding the optimal path between these computer systems could
improve the transfer time of large les  since the network may not be fully known 
nding an optimal path between two nodes requires some exploration of the network 
an ecient and elegant solution might be to send small packets  operating as scouts 
to explore the network and return the optimal path  given that the network is stable
for at least a short period of time  assuming that a computer system on the network
is recognized only by its neighboring systems  we are faced with the problem of nding
an optimal path in a real physical environment  

in general  it would be worthwhile to search for the optimal path when the following
conditions hold 
preliminary search  with the usage of scouts  is possible and cheap 
the optimal path is required for future usage 
often one might settle for a suboptimal path  however  if the path is needed for a
considerable trac volume  e g   the path should be traveled a large number of times or
the path should be traveled simultaneously by a large number of agents  then nding the
optimal path is essential  in this paper we focus on solving such a problem 
the paper is organized as follows  section   provides a more speci c formulation of
the problem in question  section   discusses related work  and section   presents the
pha  algorithm for a single mobile agent  several  enhanced  variations are introduced
and discussed for this domain  followed by extensive empirical results that demonstrate the
superiority of the more enhanced variants pursued  in section   we provide an analysis of
pha  and an overall evaluation of its performance  in section    we provide a number of
generalizations for the multi agent case  where a number of traveling agents are available for
solving the problem  experimental results for these schemes are presented and discussed 
section   contains concluding remarks and discusses future research  a preliminary version
of this paper appeared earlier  felner  stern    kraus        
   our research is concerned with high level  abstract graphs and we do not intend to provide here a new
applicable routing algorithm  current routing technologies maintain large databases that store the best
paths from node to node  broadcast changes in the network  and update the paths if necessary  thus
making essentially the network graph fully known  also  in some network domains one can create and
destroy packages at will and thus does not necessarily have a given number of agents  our algorithm
may be relevant to future network architectures and routing technologies  where routers will not use
these databases  this is not far fetched in view  for example  of the rapid growth of the internet  it is
thus conceivable that in the future storing all the paths would become infeasible 

   

fipha   finding the shortest path with a  in an unknown physical environment

   problem specication
as was mentioned in general terms  the problem is to nd the shortest path between two
nodes in an unknown undirected graph  more speci cally  we assume a weighted graph 
where each node is represented by a   dimensional coordinate  i e   its location in the real
world   and the weight of an edge is the euclidean distance between its two nodes  the
input to the problem consists of the coordinates of the initial and goal nodes  the other
nodes are assumed not to be known in advance  the agent is assumed to be located at
the start node  the task is to nd the shortest path in the  unknown  graph between the
initial node and the goal node for future usage  in order to accomplish that  the agent is
required to traverse the graph and explore its relevant parts leading to the desired solution 
the agent is allowed to visit nodes and travel from one node to another via existing edges 
we assume here that when a node v is visited by the search agent  the neighboring
nodes are discovered  as well as the edges connecting them to v  this assumption is not
unreasonable  considering  e g   that  trac  signs at a road intersection often indicate its
neighboring destinations and the lengths of the corresponding road segments that connect
it with these locations  even without road signs  as scouts reach a new location  they can
look around  observe the neighboring locations  and assess their distances from their current
location  in general  the assumption that the neighboring nodes are discovered instantly is
fairly common in search problems and algorithms  
since the goal of the search is to nd the best path to the goal  it is clear   given
an admissible heuristic   that the agent must expand all nodes expanded by a   as a 
is optimally eective  dechter   pearl         let c be the length of the shortest path
from the initial node to the goal node  a  will expand all the nodes  such that  f  n   
g n    h n    c and some of the nodes for which f  n    c   we will refer to these nodes
as the  set of mandatory  a  nodes  as stated above  the agent must visit all the a  nodes
in order to nd the shortest path  however  it may need to visit additional nodes 
we make the following fundamental observations with respect to the problem in question 
first  even if the set of a  nodes is known in advance  the agent may need to visit
additional nodes while traversing related portions of the graph  this is because the
shortest path between two of the a  nodes may include graph nodes that do not
belong to the a  nodes  i e   their f value is greater than c   given the a  nodes 
nding the shortest path that visits all of them   this should not be confused with
the shortest path between the origin node and the goal node   could be considered
as solving the traveling salesman problem  tsp  with respect to the set of a  nodes 
note that the tsp solution may include nodes that do not belong to the a  nodes 
second  the agent does not know the a  nodes in advance  these nodes are added to
the open list and they are expanded as the search progresses  thus our agent cannot
use a solution to the tsp  since tsp assumes that the nodes to be visited are provided
as input 
   there are  however  domains where this assumption may not hold  in such domains  a node becomes
fully known only when the agent reaches it physically  in this work we restrict ourselves to the above
assumption  other domains will be addressed as part of future work 

   

fifelner  stern  ben yair  kraus    netanyahu

in most of the cases  the order in which a  nodes are expanded is very dierent from
the order in which they are visited according to the tsp solution  thus the minimal
path traversing the a  nodes cannot be used 
third  when a node is added to the open list the agent cannot know whether or not it
belongs to the a  nodes  since c is known only after the search is concluded  consider
a node n that is in the open list  but is not at the head of the open list  suppose
further that the agent is physically located near that node  it should decide whether
to slightly extend its path and visit node n or skip n and continue to the node at
the head of the open list  if n turned out to belong to the a  nodes  then visiting it
now may prove very bene cial   this is because n might reach the head of the open
list when the agent will be physically located far away from it  so that visiting n at
that point will incur a signi cant travel cost   however  if it turns out that n does
not belong to the a  nodes  then the  small  detour of visiting it has proven useless 
intuitively  however  a decision never to visit such would result in a very bad strategy 
thus the agent may visit nodes that do not belong to the a  nodes because of future
expected bene ts  the actual decision as to whether or not to visit n will depend on
the distance between the agent s location and n  at the time of the decision  and on
the agent s estimate as to whether n belongs to the set of a  nodes 
in the following sections we present the pha  algorithm for ecient exploration of a
graph  in order to nd the shortest path between two given nodes by a single traveling
agent  as well as by multiple agents  we study dierent heuristics that direct the agent to
make an intelligent decision  in an attempt to achieve a small overall travel cost 

   related work
much research has been devoted to guiding a mobile agent for exploring new and unknown
environments in order to study them and map them out  our work is dierent  in the
sense that it explores merely the necessary regions of the graph in order to retrieve the
shortest path between two nodes and not the entire graph  most of the literature in this
area deals with a physical mobile robot that moves in a real environment  the published
research focuses usually on the issue of assisting the robot to recognize physical objects in
its environment  we refer the reader to  bender et al          which contains an extensive
survey of various related approaches and state of the art techniques 
another class of algorithms is navigation algorithms  a navigation problem is concerned
with navigating a mobile agent to the goal as fast as possible  not necessarily via the shortest
 optimal  path  a navigator will always proceed towards the goal  ignoring whether the
trail traversed thus far lies on the shortest path  deviations from the optimal path are
neglected since the navigation problem is reconsidered after every move with respect to a
new source node  i e   the current position of the agent  a navigation algorithm halts when
the mobile agent reaches the goal  the path passed usually lacks importance and is usually
not optimal  our problem  on the other hand  is to nd an optimal path to the goal node
for future usage  even if the agent nds a path to the goal node  the search continues until
   

fipha   finding the shortest path with a  in an unknown physical environment

the shortest path to the goal is found  next  we describe briey some of the work done on
navigation in partially known graphs 
 cucka et al         have introduced navigation algorithms for sensory based environments such as automated robots moving in a room  they have used depth rst search
 dfs  based navigation algorithms  that use a heuristic function for choosing the next node
that the agent should go to 
real time a   rta    korf        and its more sophisticated version  learning realtime a   lrta    are also algorithms for nding paths between two nodes in a graph 
however  they deal with large graphs and assume that there is a constraint on the time of
computation and that a move should be retrieve in a given constant time  thus a limited
search is performed  and the node with best cost in the search frontier is picked  the
problem solver then moves one step along the path to that node  the search then continues
from the new state of the problem solver  the merit of node n  in rta  and lrta   is
f  n    g n    h n   similarly to a   unlike a   though  g n  is the actual distance of node
n from the current state of the problem solver  rather than from the original initial state 
the dierence between rta  and lrta  is that after the search is terminated  lrta 
also stores the heuristic estimation value of each node visited by the problem solver  also
the method that successor nodes are chosen are dierent for the two variations  korf  korf 
      proves that over a large number of runs  where for each run the start node is selected
at random  the stored value of each node visited by the lrta  problem solver converges
to the optimal distance to the goal  both rta  and lrta  are signi cantly dierent from
our approach  as they assume that a node can be expanded in the computer s memory
without an agent having to physically visit that node   also  these algorithms are designed
for large graphs   furthermore  rta  does not nd the optimal path to the goal  a trivial
version of lrta  could be used to solve our problem  e g   by limiting the search depth to
one level  so that every node visited by the agent could be physically expanded  however 
such a variant will not be competitive with our approach  as it will perform like a simple
hill climbing procedure  in addition  in order to attain the optimal path  lrta  has to
select many start nodes at random  this is not relevant in our case  as we are given only
one initial node 
marta   knight        is a multi agent version of rta   in marta  every agent runs
rta  independently  kitamura et al   kitamura  teranishi    tatsumi        have modi ed marta  by using coordination strategies based on attraction and repulsion  these
strategies are employed only in tie breaking situations  when using a repulsion strategy 
the idea is to spread agents  such that each agent intends to maximize its distance from the
others  again  the path provided by this algorithm is not optimal and also  agents do not
need to physically visit a node in order to expand it  this work has inspired the algorithms
presented in this paper  as far as handling our multi agent mutual decision is concerned 
life long planing a   lpa    koenig   likhachev      b  is a remarkable algorithm
that generalizes a  to handle a dynamically changing graph  lpa  is activated every time
the graph was changed in order to nd the current shortest path from the same given start
and goal nodes  it utilizes the fact that much of the old data explored by previous runs of
lpa  are still valid in the current run  a  is a special case of lpa  where the entire graph
has not been explored yet 
   

fifelner  stern  ben yair  kraus    netanyahu

d  lite  koenig   likhachev      a  applies lpa  to the case that a mobile robot needs
to nd the shortest path in an unknown environment or in an environment that changes
dynamically  i e   where edges are added and deleted at all times   in lpa   the start
node is identical for all the runs  in d  lite  however  the robot moves along the path and
calculates a new shortest path from its current location  d  lite modi es lpa  so that
old data from previous runs will be eciently used in the case that the start node is also
changed according to the new location of the robot  d  lite is actually a simpli ed version
of a previous algorithm d  by stenz  stentz        
the main dierence between these algorithms and our approach is that they  too  expand
a node in the computer s memory without requiring that the mobile agent physically visit
that node  indeed  following every move of the robot in d  lite  changes in the graph are
provided immediately  the robot does not need to physically visit nodes in order to gather
rsthand this information  the task of the agent  in the context of d   is to repeatedly
determine the shortest path between the current location of the robot and the goal location
as the edge costs of the graph changes while the robot moves  d  lite does not nd a path
and returns it  it is simply a navigation algorithm that guides the agent to the goal node
based on previous and new information about the terrain 
an agent operating in the real world must often choose between maximizing its expected
utility  according to its current knowledge of the  world   and learning more about its
environment  in an attempt to improve its future gains  this problem is known as the tradeo between exploitation and exploration in reinforcement learning  kaelbling   moore 
       argamon et al   argamon engelson  kraus    sina              address the tradeo between exploration and exploitation for an agent that moves repeatedly between two
locations  they propose a utility based on line exploration algorithm which takes into
account both the cost of attempting to improve the currently best route known and an
estimate of the potential bene ts over future task repetitions  if the expected utility from
exploration is positive  then the agent takes actions to improve its route otherwise  it
continues using the known path  the authors compare the utility based on line exploration
with a heuristic backtracking search algorithm that exhaustively searches the graph before
starting to perform the task  and with a randomized interleaved exploration algorithm 
they assume that the agent knows a path between any two nodes  while we make no such
assumption 
argamon et al  also suggest that the larger the number of times that the task is repeated 
the more the merit of interleaved exploration diminishes  if the agent is required to move
back and forth between two nodes a large number of times  there is no need to decide
on line whether to exploit or explore instead  the shortest path should be found as soon
as possible  thus a good search algorithm may prove useful  in this respect our work
complements argamon et al   as it provides ecient search algorithms in situations where
the optimal path is needed in advance  in contrast  applying the techniques of argamon et
al  in these situations yields poor results as demonstrated in their experiments 
roadmap a   shmoulian   rimon        is a more sophisticated single agent navigation
algorithm  it chooses to navigate to a node that is assumed to be close to the goal node  the
algorithm is supervised by a high level procedure called a   pearl   kim         instead
of always selecting the best node from the open list  a  allows the search agent to choose
from a set of  good nodes   this set is called the focal set  the focal is a set of nodes from
   

fipha   finding the shortest path with a  in an unknown physical environment

the open list whose f value is greater than the value of the best node by no more than   
once the focal nodes are determined  a local search is performed to navigate the agent to
one of these nodes  which is believed to be close to the goal node  the role of the high level
phase is to prevent the navigating agent from going in the wrong direction by considering
also the path traveled thus far 
in roadmap a     is a pre speci ed constant  which determines the trade o between
the local search and a   for example  a  is a  while a  is just a local search  choosing
at each iteration any node that is believed to be close to the goal node  this algorithm
halts when the goal node is reached  and thus for       the optimal path might not be
known  the paradigm of roadmap a  is similar to ours  in the sense that a node is known
only after the agent explores it  in fact  in the trivial case where        roadmap a  is
very similar to our approach with the simple heuristic  shortest known path   presented in
subsection     below   further comments as to the basic dierence between roadmapa 
and pha  are provided in section   
in summary  most of the above listed algorithms are navigation algorithms  i e   they do
not necessarily require an agent to physically visit a node in order to expand it  and do not
necessarily return the optimal path to the goal node  thus they inherently solve a dierent
problem from the one pursued in this paper 

   pha  for a single agent

we now turn to the description of the pha  algorithm  focusing rst on the case where
only a single mobile agent is available 
nodes in the environment can be divided into explored and unexplored nodes  exploring
a node means physically visiting that node by the agent  and learning about its location
and the location of its neighbors  our new algorithm pha  activates essentially a  on the
environment  however  in order to expand a node by a   this node must rst be explored
by the agent in order to obtain the relevant data associated with it  i e   neighboring nodes
and incident edges   throughout the discussion in this paper we treat pha  as a twolevel algorithm  although in principle pha  could also be viewed as a one level algorithm
 see further discussion in subsection       we nd its two level presentation to be more
well structured and better understood conceptually  the two level framework consists of a
high level and a low level routine  the high level  which invokes the low level at various
stages of pha    acts essentially like a regular a  search algorithm  it chooses at each
cycle a node from the open list for expansion  the heuristic function h n  used here is the
euclidean distance between n and the goal node   this heuristic is admissible of course  by
de nition   if the node chosen by the high level has not been explored by the agent  the
low level  which is a navigation algorithm  is activated to navigate the agent to that node
and explore it  after a node has been explored by the low level it is expandable by the high
level  if the chosen node has already been explored  or if its neighbors are already known 
then it is readily expandable by the high level without the need to send the agent to visit
that node  the pseudo code for the high level is given below 

   

fifelner  stern  ben yair  kraus    netanyahu

 
 
 
 
 
 
 

g

high level open list  f
 open list is not empty  f
target   best node from open list
target is unexplored
f
explore target  by the low level

while

if

then

g

g

expand target 

    low level algorithms

the high level algorithm  a   chooses to expand the node with the smallest f value in the
open list  regardless of whether or not the agent has already visited that node  if the chosen
node has not been visited by the agent  the low level instructs the agent to visit that node 
we call this node the target node for the low level  in order to reach the target node  we
must use some navigation algorithm  we have implemented a number of navigation variants
for the low level  we rst describe simple algorithms which only use known information
about the graph  we then present more ecient algorithms  which also explore the graph
during the navigation and provide new information for the high level  we assume that the
agent is in the current node and that it needs to navigate to the target node 
      simple navigation algorithms

tree path  like every best  rst search  a  spans the nodes which it generates in a

tree which is called the search tree  every known node is a node in the search tree  the
most trivial way to move from one node to the other is through the search tree  the
tree path algorithm instructs the agent to move from the current node to the target
node through the shortest path between them in the search tree  in other words 
the agent will walk up the tree from the current node until it reaches an ancestor of
the target node  and then walk from that node to the target node  this is a trivial
algorithm  and is presented here mainly for comparison purposes 

shortest known path  some of the nodes of the search tree have already been

explored by the agent  so that all of their incident edges are known  the search tree
nodes plus the additional edges of the explored nodes can be viewed as a subgraph
that is fully known  all the nodes of this subgraph are connected because they are
all part of the search tree  using this subgraph  we can calculate the shortest path to
the target node via known nodes and edges  as mentioned above  nding the shortest
path in a known graph can be done easily  so the agent simply computes this shortest
path to the target node and travels along that path  

aerial path  assuming that the agent is able to move freely in the environment and

is not restricted to the edges of the graph  we can simply move the agent from the

   this navigation algorithm is similar to the local a  search in roadmap a  for the trivial case where
       in roadmap a   the shortest path to the target node is determined in the known graph and the
agent moves along that path 

   

fipha   finding the shortest path with a  in an unknown physical environment

current node to the target node via the straight line connecting these nodes  this
method may be relevant when the search agents are highly mobile  and they explore
the environment for agents that are restricted to travel only along the edges  note
that the length due to  aerial path  can never be greater than the length due  shortest
known path  
      dfs based navigation algorithms

in the simple navigation algorithms described above  the exploration of new nodes is done
only by the high level algorithm  thus the low level does not add any new knowledge about
the graph  and in that sense it is inecient  we propose here more intelligent navigation
approaches for nding a path to the target that can pass also trough unexplored nodes 
these approaches provide the following advantages  the paths that are currently known to
the agent may be much longer than other paths that have not been explored yet  it may
prove more ecient to navigate through unknown parts of the graph if they seem to lead to
a better path to the target  a more important advantage is that while navigating through
unknown parts of the graph  the agent might visit new nodes that have not been explored
and explore them on the y  this may save the need to travel back to those nodes at a
later time  should they be selected for expansion by the high level algorithm 
the above advantages suggest the use of a dfs based navigation for the low level  in
a dfs based navigation algorithm  the search agent moves to a neighboring node  that has
not been visited  in a typical dfs manner  the algorithm backtracks upon reaching a deadend and the search continues until it reaches the target  if there is more than one neighbor 
we use a heuristic to evaluate which neighbor is more likely to lead faster to the target 
and visit that node rst  we have experimented with the following dfs based navigation
algorithms that were proposed by  cucka et al         

positional dfs  p dfs   this dfs based navigation algorithm sorts the neighbors

according to their euclidean distance from the target node  choosing the node with
minimum distance to the target node rst 

directional dfs  d dfs   this dfs based navigation algorithm sorts the neigh 

bors according to the direction of the edges between them and the current node v  it
rst chooses the node u for which the dierence in angle between the line segments
 v u  and  v t  is the smallest  where t denotes the target node  in other words  the
nodes are prioritized by the directional dierence between them and the target node 
giving priority to nodes that dier the least 

a dfs  a dfs is an improved version of p dfs  at each step the agent chooses

the neighbor w that minimizes the sum of the distances from the current node v to
w and from w to the target node t  we call it a dfs since it uses a cost function
which is similar to that of a   i e   f  n    g n    h n    note  however  that this cost
function is used here locally to nd a path from the current node to the target node 

   a generalized version of navigating with a cost function similar to that of a  called  robotic a    ra   
was also proposed by  cucka et al        ff the node w is either a neighbor  of v  or an already visited
node 

   

fifelner  stern  ben yair  kraus    netanyahu

this is dierent from the high level a  which uses this cost function to nd a path
from the input initial state to the input goal state 
r
 

 
a

c

          
t          
          
          
           
           
          
          
           
           
          d
          
           
           
           
           
           
           

p

figure    illustration of various low level navigation algorithms 
figure   illustrates the navigation algorithms listed above  let r denote the source
node  and suppose that the search agent is currently at node c   and that the high level
procedure chooses to expand node t   the squared nodes have already been visited by the
agent  i e   they have already been explored  these nodes and the edges connecting them
comprise the tree spanned by the high level a  search  since t has yet to be explored  the
low level procedure will now navigate to the target node t   the tree path will navigate
along the path c       r       t   whereas the shortest known path will navigate along the
path c           t   note that since node a has yet to be explored  the path from c to t via
a is not known at this point  the aerial path will go directly from c to t   using one of the
dfs based navigations  the agent will move to t via p   d  or a depending  respectively 
on whether p dfs  d dfs  or a dfs was used  the bene t of the dfs based algorithms
is that they explore new nodes during the navigation  nodes p   d  and a in the above
example   and they will not revisit such nodes  should the high level procedure expand
them at a later stage 

    enhanced pha 
      pha  as a one level procedure

as mentioned in the previous subsection  pha  can be presented in principle as a one level
algorithm  this can be done as follows  whenever the best node in the open list is known
 i e   it has been explored   an expansion cycle of a  takes place in the background  and
a new best node is determined  upon arriving at a node  the agent makes a navigation
decision as follows 
if the best node in the open list is one of the current node s neighbors  then the agent
moves to that node 
otherwise  the agent moves to the neighboring node that minimizes the relevant
heuristic function  among the variants proposed in the previous subsection  
   

fipha   finding the shortest path with a  in an unknown physical environment

any of the these heuristics would be valid for a heuristic function of this one level
algorithm   the latter should not be confused with the heuristic function that is associated
with the a  expansion cycle   for example  if the agent is at node v  then using a dfs it
will visit the neighbor w that minimizes the sum of the distances from the current node v
to w and from w to the best current node in the open list 
the compact one level presentation notwithstanding  we prefer   for reasons of clarity
  to use the two level formulation of pha   we believe that the clear distinction between
the high level a  and the low level navigation procedure provides an overall framework
that is well structured and conceptually more clearly understood  in addition  the twolevel framework lends itself naturally to the two enhancements presented in the following
subsections 
these enhancements draw on the basic principle that navigation might proceed not
necessarily to the best node  but to a dierent node that is fairly close to the current
location of the agent   the idea being that in the long run this would prove bene cial   this
principle can be realized under two main scenarios      when navigating to the best node 
the agent might choose rst to visit a nearby neighbor  and     the procedure might choose
to ignore the best node in the open list and select instead a dierent node from the open list
which is very close to the agent s location  in the context of the two level framework  the
rst scenario corresponds to a low level enhancement  see i a dfs below   and the second
scenario corresponds to a high level enhancement  see wina   subsection        
for all of the above reasons  we choose to stick with our proposed two level approach of
pha  
      improved low level  i a dfs

the dfs based navigation algorithms explore new nodes as they traverse the graph  thereby
avoiding future navigations should these nodes be selected later for expansion by the high
level  while this is very bene cial  as can be seen from the experimental results of the next
subsection  we can take this approach much further 
suppose that the agent is navigating to a target node  along the way  it may pass near
nodes that have a small f value without visiting them  as they are not on the path to the
target node according to the navigation algorithm  this is counter productive  since nodes
with small f values are likely to be chosen for expansion by the high level in the near future 
visiting such nodes when the agent is nearby  may save a lot of traveling eort in the future 
in order to motivate the agent to visit such nodes  we want to identify them and arti cially
decrease their cost value  without changing the value of other nodes  
to incorporate this notion  we introduce the improved a dfs  i a dfs  variant  the
basic concept is that while navigating to a target  the low level will select the next node to
visit by considering not only its approximate distance from the target but also the node s f
value  on its way to the target  i a dfs should tend to visit  on the one hand  nodes with
a small f value  and avoid visiting  on the other hand  nodes that are completely o track 
let t and n denote  respectively  the target node and the neighboring node that is being
currently evaluated  also  let f     denote the f value of a node provided by the high level
a   and let c    c  denote constants to be speci ed  we used the following heuristic function
for selecting the next node by i a dfs 
   

fifelner  stern  ben yair  kraus    netanyahu


 c  
  
a
dfs 
n
 
     c  ff  tn  
if n   open
h n   
   

a dfs n 
otherwise 
if a neighbor n is not in the open list  then its h n  value due to a dfs remains intact  if 

however  the neighboring node is in the open list  then i a dfs considers also the goodness
of its f value  the node s h n  is adjusted according to a product term that decreases with
the node s f value  i e   a node with a small f value will be assigned a smaller heuristic    
speci cally  the goodness of f is measured by the ratio f  t   f  n   the target node t has
the smallest f value among the nodes in the open list  for otherwise it would not have been
selected for expansion by the high level  and therefore     f  t   f  n       if f  t   f  n  is
close to    then f  n  is close to f  t    in this case  it is highly probable that node n will be
visited by a  in the next few steps  thus we want to assign a higher priority to such a node
to be visited by the agent  by decreasing its heuristic value  if  however  f  n     f  t  
 i e   f  t   f  n        then it is highly unlikely that node n will be selected anytime soon
by the high level a   it is of no interest to raise the node s priority  in such a case  and its
a dfs heuristic should be retained  just like other nodes that are not in the open list 
the expression provided in     meets all of the above requirements  if f  n   f  t    then
the term     f  t   f  n  becomes small  and the overall h value for such a node decreases 
this provides the agent with an option to visit nodes that are in the open list and which
have small f values  even though their a dfs heuristic is not the best  if  on the other
hand  f  n     f  t    then the term     f  t   f  n  will approach    having a negligible eect
on h n   the main reason for multiplying the a dfs heuristic by     f  t   f  n   and not
by f  n  f  t    for example  is to leave intact the cost value of a node with a relatively large
f value  so that it can continue to compete  in a local heuristic sense  with nodes which
are not in the open list  the free parameters  c  and c    do not aect qualitatively the
performance of i a dfs  but merely add to the module s overall exibility 
we have experimented with various constants for c  and c    in an attempt to determine
optimal performance  our extensive empirical studies have shown that c         and
c        produced the best performance  our experiments have also demonstrated that
using i a dfs yielded better results than those obtained by the other navigation algorithms
listed in subsection       
figure   illustrates the dierence between a dfs and i a dfs  the numeric values of
the nodes indicate the order by which they are expanded by a   suppose that the agent
is currently located at node c and that node   is the target  a dfs will navigate to the
target via node    since this node has the best f    g   h  value for the scenario described 
once at node    the agent will have to travel back to the other side of the graph  as node  
is selected  by the high level  to be expanded next  the agent will then go back to node  
and eventually reach the goal via node    i a dfs  on the other hand  will navigate from
c to node   via node   although node   is not assumed to be on the shortest path to
node    it has a smaller f value than node    thus i a dfs chooses to visit node   rst 
incorporating this principle saves a considerable amount of travel cost  when the agent
will be located at node   and the next node to be expanded will be node    the high level
   since a dfs    and f     measure distances on the graph  they represent  essentially  the same scale 
thus they can be combined directly 

   

fipha   finding the shortest path with a  in an unknown physical environment

r

 
 

c

 

 
 

a dfs
i a dfs

g

figure    an example of a dfs versus i a dfs navigation 
will expand it immediately  as it has been explored before by the agent  and will thus be
readily available  thus the agent will travel directly from node   to node   and will avoid
navigating back and forth between opposite sides of the graph 
      improved high level  wina 

a  expands the nodes from the open list in a best  rst order according to their f value 
this order is optimal when the complexity of expanding a node is o     however  in a real
physical environment  where node expansion requires an agent to perform costly tasks  it is
not always ecient to expand the current best node  consider  for example  a nearby node
that is not the best node in the open list  but whose f value is suciently small  such that
with high probability it would be selected for expansion by a  in the next few iterations 
an intelligent agent will choose to explore such a node rst  even though it is not currently
the best node in the open list 

r
 
 

 
 

 

 

g
figure    an example illustrating the disadvantage of a  
the above principle is illustrated  for example  by the subgraph of figure   which
contains two node clusters  the numeric label of each node is associated with its f value 
an agent visiting the nodes in a best  rst order  i e   the order by which a  expands them  
will have to travel back and forth from one cluster to the other  a much better approach
   

fifelner  stern  ben yair  kraus    netanyahu

would be to explore all the nodes in one cluster and then move to the other cluster  thereby
traveling only once from one cluster to the other 
in order to incorporate this capability into our algorithm  we generalized a  to what we
call window a   wina    while a  chooses to expand the node with the lowest f value 
wina  creates a set  i e   a window  of k nodes with the smallest f values and then chooses
one node from the set for expansion    our window uses the same principle of a   pearl
  kim        which was mentioned before  after constructing the window we select from
it a node for expansion  our objective is to minimize the traveling eort of the agent 
and not to reduce  necessarily  the number of expanded nodes  thus rather than selecting
only those nodes that have a small f value  we choose also nodes that are suciently close
to the location of the agent  having experimented with a large number of combinations 
we concluded that the best way of capturing these two aspects was by simply taking their
product  thus we order the nodes of the window by the cost function

c n    f  n   dist curr n 
where n is the node evaluated  f  n  is its f value  and dist curr n  is the distance between n
and the current location of the agent  we choose to expand the node with the smallest cost c 
 it is sensible to combine f  n  and dist curr n  in the above manner  as both are expressed
in the same distance units   note that if a node with a small f value is not chosen for
expansion  then its f value relative to other nodes in the open list will tend to decrease over
time  this is because the f value of newly generated nodes is monotonically increasing 
as the heuristic used is consistent and admissible  this property reduces the chance for
starvation   at least we have not encountered this phenomenon in our experiments  
our intention was to demonstrate that combining these two factors  in a manner that
favors nearby nodes having a small f value  indeed yields enhanced performance  we have
tried many functions that combine the two factors  e g  weighted sum  but choose in this
paper to only discuss the product  c n    f  n   dist curr n   since it provided the best
results 
combining this modi ed high level variant with the low level navigation creates some
technical diculties  due to the fact that we no longer expand nodes from the open list
in a best  rst order  recall that standard a  expands a node by generating its neighbors
and putting the node in the closed list  when a node v is in the closed list  the shortest
path from the source node to v is known  hence  when the goal is expanded we have found
the shortest path to it  and the search can terminate  however  in wina  a node may
be expanded although there exists another node with a smaller f value that has not been
expanded yet  in other words  when a node v is expanded  it does not necessarily imply
that the best path to v has been found  expanding a node with a smaller f value might
discover a better path  thus the search cannot simply terminate once the goal node is
chosen for expansion 
this problem is solved by splitting the standard node expansion stage into two phases 
   in a related algorithm that we have derived  k best rst search  kbfs   felner  kraus    korf        
a window of size k is determined from the open list  and all of the window nodes are expanded at the
same stage  the neighbors of all the nodes are generated and added to the open list  and only then does
a new iteration begins 

   

fipha   finding the shortest path with a  in an unknown physical environment

   node expansion  expanding a node means visiting the node  generating all its
neighbors  and adding them to the open list  this stage takes place immediately for
each node chosen by the high level 
   node closing  closing a node means removing it from the open list and putting it
on the closed list  this takes place only after all the nodes with a smaller f value
have been explored  this ensures  essentially  that a node will be placed in the closed
list only when the best path to it from the source node has been found  see section  
for further comments   thus the search will continue  even if the goal node has been
expanded  until it is placed in the closed list  only when the goal node is placed in
the closed list  does the search terminate 
following is the pseudo code for wina   note that the standard expansion is divided
according to the above two phases  at the end of each cycle  the algorithm attempts to
close as many nodes as possible 
wina    f
 
 goal is not in closed list  f
 
target   node from window that minimizes  node   dist current node 
 
target is unexplored
 
explore target  by low level
 
expand target 
 
 best node  with minimal f value  in open list was expanded 
 
close best node 
 
g

while

if

f

then

while

g

    experimental results

figure    a    node delaunay graph 
we have experimented with delaunay graphs  okabe  boots    sugihara         which are
derived from delaunay triangulations  the latter are computed over a set of planar point
patterns  generated by a poisson point process  okabe et al          points are distributed
   

fifelner  stern  ben yair  kraus    netanyahu

at random over a unit square  using a uniform probability density function  a delaunay
triangulation of a planar point pattern is constructed by creating a line segment between
each pair of points  u v   such that there exists a circle passing through u and v that encloses
no other point  such a triangulation can be characterized  in a sense  as one where each
point is joined by a line segment to each of its nearest neighbors but not to other points 
 we will refer to this type of delaunay graphs as regular delaunay graphs   we have used
the qhull software package  barber  dobkin    huhdanpaa        to construct delaunay
triangulations  i e   delaunay graphs  over sets of points that were generated at random in
a unit square  figure   illustrates a    node delaunay graph 
in principle  the characteristic whereby each node is connected to all its neighbors seems
suitable for representing real road maps  which are the main object of our research  in
practice  however  additional characteristics should be accommodated to capture more adequately a real road map  thus we have also pursued sparse and dense delaunay graphs
that can be obtained from regular delaunay graphs by random deletion and addition of
edges  respectively   see appendix a for a more detailed discussion  
      low level experimental results
  
tree path
shrtest known path
aerial path
p dfs
d dfs
a dfs
i a dfs

  
  

search cost

  
  
  
  
  
  
 
   

    

    
    
    
    
number of nodes in the graph

    

    

figure    search cost versus the number of nodes of regular delaunay graphs for various
low level algorithms 
figure   displays the traveling distance  or search cost  of the agent as a function of
the number of nodes in the delaunay graph  i e                    and      nodes   the
graphs depicted correspond to the various low level algorithms that pha  was tested on 
every data point  here and in all the other experiments  corresponds to an average of    
dierent pairs of initial and goal nodes  that were picked at random  the average optimal
path observed was about        the gure clearly demonstrates the higher eciency of the
more involved algorithms  in particular  i a dfs is consistently superior to all the other
algorithms for all graph sizes  for a graph of size       for example  it outperformed the
   note the closeness between the average optimal path observed  i e         and the expected arc length of
a random graph dened over the same set of points  i e           ghosh        

   

fipha   finding the shortest path with a  in an unknown physical environment

most simple algorithm by a factor of more than     and outperformed the basic a dfs by
a factor of more than    note that the search cost increases as the number of nodes grows 
i e   as the domain becomes denser or more connected  this is attributed to the fact that as
the number of nodes grows  so does the number of nodes in the closed list that the i a dfs
procedure has to visit 
the relative performance of the various algorithms we have considered remained the
same for sparse and dense delaunay graphs  see appendix a  
      experimental results for wina 
 
    nodes
     nodes
     nodes

   
 

search cost

   
 
   
 
   
 
   
 

  

  

  

  
  
window size

  

  

  

figure    search cost of wina  versus window size for various sizes of regular delaunay
graphs 
our experiments show that using wina  as the high level procedure of pha  leads to
a signi cant improvement of the eciency of our algorithm  figure   presents the average
distance traveled by the search agent until the optimal path was found  as a function of
the window size  i a dfs was employed for the low level algorithm  the results shown in
figure   indicate that using a window of size larger than    which corresponds to standard
a   signi cantly improves the algorithm s performance for the various graph sizes that we
have experimented with  also  we have found that the optimal size of the window tends to
vary with the size of the graph  based on our empirical observations  setting the optimal
window size to        times the number of nodes in the graph seemed to provide a very
good approximation   for example  the best window sizes observed for      and      node
graphs were    and     respectively   note that as the window size becomes larger  i e  
the number of candidate nodes increases   the algorithm tends to select nodes with a large
f value  which results in performance degradation  additional results for sparse and dense
delaunay graphs are presented in appendix a 
at a rst glance  the improvement of wina  over standard a   for the high level  seems
somewhat modest  as it does not exceed      this is due to the fact that i a dfs explores
many nearby nodes  and is already very powerful to begin with  both wina  and i a dfs
are designed to assign high priority to nearby nodes  they do so at dierent stages of
the pha  algorithm  but in a sense they  compete  for the same type of improvement 
   

fifelner  stern  ben yair  kraus    netanyahu

indeed  using any of the other navigating algorithms  the improvement of wina  relative
to standard a  was much more signi cant  however  in dealing with real physical agents  
let alone humans   even the     time reduction by wina   relative to i a dfs  should
be viewed as signi cant  similar results were obtained for sparse and dense delaunay graphs
 see appendix a  

   analysis of pha 
analyzing the performance of pha   we distinguish between the following three parameters 
    cost of returned path      shortest possible path that the agent can travel  and     cost
of actual path traveled by the agent  in subsection     we argue that the path reported by
pha   for future use  is optimal  in addition  we present in subsection     an extensive
empirical study that compares between     and      finally  we provide in subsection    
a brief discussion of pha  s underlying methodology and overall performance 

    optimality of solution

recall that a  expands nodes in a best  rst order according to their f value  if the heuristic
function  h n   is admissible  then f  n    g n   h n  is a lower bound on a path to the goal
via node n  it is well known  under this paradigm  that once the goal node is selected for
expansion  a  has found an optimal path  hart et al        karp   pearl       dechter
  pearl         put dierently  if upon goal expansion f  goal    c  then all other nodes
with estimated paths of f  n    c have already been expanded and the length of the optimal
path to the goal is c  karp   pearl       dechter   pearl        
pha  is supervised by the high level  which activates an admissible a    recall that
h n  is the euclidean distance from n to the goal  i e   it is admissible   by design of the
algorithm  the high level terminates once the goal node is selected for expansion  thus by
the properties of admissible a   all the nodes having a smaller f value must have already
been expanded  and the f value of the goal is optimal  note that this also holds for enhanced
pha  with wina   see subsection         although wina  does not necessarily expand
nodes according to the best f value  it is designed to remove a node from the open list only
if it has the smallest f value among the nodes on the list  the algorithm halts only after
the goal node has been expanded and removed from the open list  implying that its f value
is the smallest on the list  thus our enhanced pha  variant is also compatible with the
admissible a  paradigm  and the path it returns is optimal  the basic theoretical result of
the paper follows 
theorem  pha  and its enhanced versions return the optimal path between the start
node and the goal 

    performance evaluation of pha 
as demonstrated above  the more complex algorithmic schemes provided a dramatic improvement in search time  it is of interest to assess  at least to some extent  the performance
of our best navigation variant  i e   wina   for the high level  in conjunction with i a dfs
 for the low level  
   

fipha   finding the shortest path with a  in an unknown physical environment

graph
size
  
  
  
   
   
   
   
   

closed
nodes
     
     
     
     
     
     
     
     

jtsp j
 

    
    
    
    
    
    
    
    

pha  ratio
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

table    comparison between shortest paths through nodes in closed list and actual paths
obtained by pha  
the agent s task is to visit essentially all the nodes that are expanded by a   these
nodes comprise the set of nodes that are in the closed list when the algorithm terminates 
in general  invoking a  on the subgraph induced by these nodes  with the same source and
goal states and the same heuristic function  will exhibit the same behavior and yield the
same open and closed lists  thus given a static graph  the set of nodes which a  should visit
is xed  ideally  we would like the agent to visit this set of closed nodes along the shortest
possible path  this is of course infeasible  since the nodes are not known in advance  but
rather determined on the y  however  in order to evaluate our algorithm s performance 
we can compare its output with the shortest possible path that travels through all these
nodes  the computation of the latter is carried out o line  i e   after the set of  closed 
nodes is known 
speci cally  we have computed the shortest possible path in each case with respect to the
complete graph of the corresponding set of closed nodes  the weight w ni nj   associated
with an edge  ni nj    in the complete graph  was set to the length of the shortest path
from ni to nj  in the original delaunay graph instance   finding the shortest path that
travels via a given set of nodes is known as the traveling salesman problem  tsp   which
is notorious for its exponential running time  a conventional tsp path travels through all
the nodes and then returns to the start node  however  we are interested in a path that
travels through all the nodes without returning to the start node  we denote this path by
tsp to distinguish it from the conventional tsp tour  a tsp tour is actually a tsp tour
without the last edge  in view of the exponential nature of the problem  we have used a
simple branch and bound tree search to compute the desired paths  however  solving this
problem optimally was feasible only for relatively small graph sizes 
table   provides a comparison between pha  and the shortest path that travels through
all the closed nodes for various small sized graphs  the table indicates that our pha 
algorithm is quite ecient for small graphs  speci cally  the average travel cost  due to
pha   was not greater than the shortest possible path  passing through all the closed
 

 

   

fifelner  stern  ben yair  kraus    netanyahu

nodes  by more than      for graphs having     nodes or less  the number of closed
nodes observed was smaller than     the average cost in these cases was computed over   
random instances  for graphs sizes greater than      the average cost was computed over
  instances only 
in order to evaluate  however  the performance of pha  for graphs of larger size  where
the optimal path could not be computed in a reasonable amount of time   we employed a
lower bound approximation to the cost of tsp   speci cally  we have computed a minimum
spanning tree  mst  of the complete graph  de ned by the set of closed nodes   let jtsp j
and jmstj denote  respectively  the costs associated with the desired path and the minimum
spanning tree 
 

 

claim 

     jtsp j   jmstj  jtsp j 
 

 

proof  the claim follows from basic graph theory  cormen  leiserson  rivest    stein 

       speci cally  the inequality on the right hand side stems from the fact that tsp is
a spanning tree of the complete graph  thus the cost of a minimum spanning tree must be
smaller than  or equal to  jtsp j 
to prove the inequality on the left hand side  we note that the triangular inequality
holds with respect to the above de ned complete graph   that is  for any three nodes  ni  
nj   and nk   w nj nk    w ni nj     w nj nk     this can be easily shown  based on the fact
that the triangular inequality holds with respect to the original delaunay graphs and by
de nition of an edge weight in the complete graph  thus we can construct a tour that goes
twice around the mst and then use the triangular inequality to shortcut some of its edges 
hence
   jmstj  jtspj   jtsp j
 

 

 

and the inequality on the left hand side follows   
given the infeasible computation of jtsp j  the claim suggests jmstj  instead  as a
reasonably good approximation  speci cally  the inequality on the right hand side implies
that if the travel cost of the agent performing pha  is  say  c  jmstj  then the travel cost
of pha  is no greater than c  jtsp j  given that this is merely a lower bound  pha  is
expected to perform better in practice 
table   provides a comparison between pha  and the mst lower bound on the shortest
path as described above  the average cost entered for each graph size was computed over
    randomly generated instances  the table indicates that  on the average  the cost of
pha  is at most      times that of the best possible path for graph sizes up to      nodes
and corresponding sets of closed nodes of up to     nodes 
 

 

    discussion

as was repeatedly noted  any algorithm that returns the optimal solution must expand at
least all the nodes that are expanded by a   drawing on this basic premise  our pha 
algorithm was designed to visit the set of  mandatory  nodes as eciently as possible  the
rationale of visiting also nearby nodes  whose f value is not necessarily the smallest  is that
such nodes are likely to be expanded in the next few iterations  in contrast  there is no
   

fipha   finding the shortest path with a  in an unknown physical environment

graph
size
   
   
    
    
    
    

closed
nodes
     
     
     
      
      
      

jmstj

approx 
    
    
    
    
    
    

pha  ratio
    
    
    
    
    
    

    
    
    
    
    
    

table    comparison between lower bounds on shortest paths through nodes in closed list
and actual paths obtained by pha  
bene t to this enhanced variation in the context of a navigation algorithm that does not
presume to return an optimal solution 
reconsider roadmap a   for example  a  is only activated to prevent the local navigation phase from going in the wrong direction  however  since this algorithm is not designed
to return an optimal solution  it will not deviate at any stage from its promising route to
visit a nearby node that may be expanded later on  put dierently  there is no notion here
of a set of mandatory nodes that the agent has to visit  furthermore  as soon as the agent
reaches the goal  the search halts  in conclusion  although both pha  and roadmap a 
are two level navigation schemes  their objectives are dierent and they solve essentially
dierent problems 
based on the properties of admissible a  and by design of our algorithm  we have
argued that  enhanced  pha  returns a path  for future use  that is optimal  in addition 
in the absence of a theoretically known bound on the actual cost of pha   we have run
an extensive empirical study  comparing between observed costs and the best possible costs
computed o line  given that the agent lacks a priori information as to the set of mandatory
nodes  it is highly unlikely that there exists an on line pha  like algorithm that performs as
eciently as an o line version  our extensive empirical study demonstrates  nevertheless 
that the actual cost associated with pha  is on the same order of magnitude as the optimal
cost computed o line 

   mapha   multi agent pha 
in this section we generalize the techniques discussed in the previous sections to the multiagent case  where a number of agents cooperate in order to nd the shortest path  we call
the resulting algorithm multi agent physical a   mapha   
we would like to divide the traveling eort between the agents in the most ecient way
possible  we can measure this eciency for the multi agent case using two dierent criteria 
the rst is the overall global time needed to solve the problem  the second is the total
amount of fuel that is consumed by all agents during the search  if the requirement is to
minimize the cost of moving the agents and time is not important  then considering the fuel
   

fifelner  stern  ben yair  kraus    netanyahu

cost of mobilizing the agents will be the cost function of choice  in this case  it may be wise
to move some agents while other agents remain idle  however  if the task is to nd the best
path to the goal  as soon as possible  idle agents seem wasteful  as they can better utilize
their time by further exploration of the graph  in such a case  all available agents should be
moving at all times  we introduce below two algorithms for these two perspectives  namely
a fuel ecient algorithm and a time ecient algorithm  note that in the single agent case
these two criteria coincide 
we assume that each agent can communicate freely with all the other agents and share
data at any time  thus any information gathered by one agent is available and known to
all of the other agents  this framework can be obtained by using a model of a centralized
supervisor that moves the agents according to the complete knowledge that was gathered
by all of them  this is a reasonable assumption since in many cases there is a dispatcher
or some centralized controller that gathers information from the agents and instructs them
accordingly  another possible model for complete knowledge sharing is that each agent
broadcasts any new data about the graph to all the other agents  future research may
address a more restrictive communication model  by limiting the communication range or
inducing communication errors 
we also assume that the search terminates  as soon as the goal node is expanded and
moved to the closed list  our objective is to minimize the travel eort up to that point 
and we do not care about moving all the agents to some pre speci ed location  e g   the
goal vertex or the start node   after the desired shortest path is identi ed  this convention
is in accordance with many algorithms which neglect to report the time spent to  reset  a
system  e g   garbage collection   once the desired solution is arrived at 
the main idea of the mapha  algorithm is very similar to that of pha  for a single
agent  we use again a two level framework  the high level chooses which nodes to expand 
while the low level navigates the agents to these nodes  we have studied the multi agent
case with our enhanced techniques only  i e   wina  for the high level and i a dfs for the
low level  the problem that we deal with below is how to assign the dierent agents to
explore eciently the dierent nodes 

    mapha   fuel ecient algorithm

for simplicity  we assume that the amount of fuel consumed by an agent is equal to its
traveling distance during the search  since the purpose of the algorithm in this case is to
minimize the amount of fuel consumed by the agents  regardless of the overall search time 
there is no bene t to moving more than one agent at a time  this is because by moving
only one agent  that agent might gain new knowledge of the graph that would allow the
other agents to make more informed and intelligent moves 
at the beginning  all the agents are situated at the source node  then  as in the case of
a single agent  the high level de nes a window of unexplored nodes from the open list that
are potential candidates for expansion  for each pair  a n   where a is an agent and n is a
node from the window  we compute the allocation cost function
c a n    f  n   dist a n 
where f  n  is the f value of node n and dist a n  denotes the distance from the location of
agent a to node n  we then select an agent and a target node that minimize that allocation
   

fipha   finding the shortest path with a  in an unknown physical environment

function  in the case of tie breaking  e g   at the beginning of the search where all agents are
located at the initial state   we pick randomly one agent from the relevant candidates  at
this stage  the low level algorithm navigates the selected agent to the target node selected
from the window in order to explore that node  as in the single agent case  additional
knowledge about the graph is being obtained during the navigation as many unexplored
nodes are visited by the traveling agent  only when the selected agent reaches its target is
a new cycle activated for the high  and low level procedures   following is the pseudo code
for the fuel ecient algorithm 
fuel efficient algorithm   f
 
 goal is not in closed list  f
 
each agent i
 
select node i from the window that minimizes
 
best   agent that minimizes   i   dist  i i  
 
best is unexplored
 
explore  best   by low level using best 
 
expand  best  
 
 best node in open list was expanded 
 
close best node 
 
g

while
for

a

a

if n

while

n

n

n

then

fn

a n

f  n   dist ai n 

a

g

    mapha   time ecient algorithm

the time ecient algorithm is very similar to the above described fuel ecient algorithm
with one basic modi cation  instead of moving only one agent during each high level cycle 
we now move all of the available agents since we only care about the time spent by the
agents and not about their fuel consumption  having an idle agent will not save any time 
every moving agent can only help gather more knowledge about the environment with no
additional cost  as the clock ticks away regardless and the time is measured globally 
we cannot use here the same allocation function that was used for the fuel ecient
algorithm  as all agents are located initially at the same node  and the fuel ecient allocation
function will choose the same node for all the agents  the main idea of the time ecient
strategy is that all agents move simultaneously  thus to ensure ecient performance we
need to distribute them as much as possible  suppose that we have p available agents and k
nodes in the window  we would like to distribute these p agents to the k nodes as eciently
as possible  a brute force approach will be to randomly distribute the agents to the nodes 
however  to provide an eective distribution  we incorporate the following three criteria
into our distribution formula for the time ecient procedure 
   since the f values of neighboring nodes are somewhat correlated with each other 
nodes with a small f value are more likely to generate new nodes with a small f
   we have also implemented a more complex variant  such that whenever a new unexplored node is reached 
a new high level cycle is activated  results obtained were not signicantly dierent  and we omit the
details of this variant for simplicity  see  stern        for a comprehensive description 

   

fifelner  stern  ben yair  kraus    netanyahu

values than nodes with a large f value  therefore  the distribution should favor
assigning an agent to a node with a small f value 
   another attribute that should be taken into consideration is the distance of the target
node from an agent  we would like to assign an agent to one of the nodes in such
a manner  that the expected travel distance of the agent  for that assignment  is
minimized  in other words  an agent will be assigned  preferably  to a relatively closeby node 
   in order to expand the entire window and prevent  starvation   we would also like our
distribution function to raise the priority of nodes that were assigned a small number
of agents  thus we should keep track of the number of agents that were assigned to
each node and give preference to nodes with a small number of assignments 
note that the rst and third criteria may contradict  i e  the rst criterion will prefer
nodes with a small f value while the third criterion will favor nodes with a large f value 
as only a small number of agents was assigned to them 
we have found that taking the product of the values associated with these three criteria
gives a good distribution function with a suitable load balancing between these criteria 
speci cally  the agent allocation procedure iterates through all the agents and picks  for
each agent  the node that minimizes the following allocation function 
alloc agent node    f  node   dist agent node    count node      
where dist node agent  is the euclidean distance between the node and the agent  f  node 
is that node s f value  and count node  is a counter that keeps track of the number of agents
that have already been assigned to explore that node  count node  is initially set to   and
is incremented every time an agent is assigned to that node  thus a load balancing between
the three factors is being kept throughout the distribution process  at the beginning of
the search all the agents are located at the start node  and their initial allocation to the
dierent nodes is determined  essentially  by the count factor   without this factor  the
product f  n   dist agent n  would have returned the same node n for all agents   as the
search progresses  the agents move to dierent locations and get assigned at each step to
nodes that are closer to their location and that have a small f value  thus the product of
the above three factors creates a good distribution  of the agents  over dierent parts of
the graph 
consider  for example  the case illustrated in figure    suppose that     agents are all
located at node x  and that the window consists of the three nodes a  b  and c that are located
at an equal distance from x  suppose also that f  a       f  b      and  f  c       the
numbers of agents that are assigned to these nodes  using the above allocation procedure 
are         and     respectively  this is a good balance between the various requirements 
we have tried many other variations for the distribution procedure and found that they
all performed well as long as the above three requirements were met  see  stern        for
further discussion on agent distribution 
as before  each agent navigates to its assigned target using our enhanced low level algorithm  i a dfs  another high level iteration begins as soon the the rst agent reaches
   

fipha   finding the shortest path with a  in an unknown physical environment

x
a

b

f a   

c
f c   

f b   

figure    an example of agent distribution according to the proposed allocation procedure 
its target node    note that the computation time of the window and that of the agent
distribution allocation can be neglected  since we only care about the travel time of the
agents  following is the pseudo code for the time ecient algorithm 
time efficient algorithm   f
 
 goal is not in closed list  f
 
each free agent i
 
select a window node i that minimizes dist  i
 
move all agents until an agent reaches a node
 
expand all nodes currently visited by an agent
 
 best node in open list was expanded 
 
close best node 
 
g

while
for

a

n

a n   f  n    count n     

while

g

    experimental results

the experiments performed for the multi agent case were also conducted on delaunay
graphs with                        and      nodes  additional results for sparse and
dense delaunay graphs are provided in appendix a 
      mapha   results for the fuel efficient algorithm

we provide here results for the fuel ecient algorithm of subsection      the fuel consumption reported is the total fuel consumed by all the agents   as before  the graphs were
generated on a unit square  for which the average optimal path observed was about       
figure   presents the costs of the fuel ecient algorithm as a function of the number
agents for various sizes of regular delaunay graphs   results for sparse graphs  as well
as graphs with edges added at random  are presented in appendix a   the gure clearly
    we have observed that when a new iteration begins  almost every agent is assigned to the same node
that it was assigned to in the previous iteration  typically this is because an agent s location becomes
closer to  its  target node  while the other criteria do not change  thus in practice  most of the agents
go on to complete their  original  tasks  and only the agent that has reached its target is assigned a new
goal node  see  stern        for a detailed discussion 

   

fifelner  stern  ben yair  kraus    netanyahu

   
    nodes
     nodes
     nodes
     nodes

 
   

fuel consumption

 
   
 
   
 
   
 
   
 

 

 

 

 
 
number of agents

 

 

 

figure    fuel consumption as a function of number of agents for various sizes of regular
delaunay graphs 
demonstrates that as more agents are added  the overall fuel consumption decreases up
to a point where adding more agents tends to increase the overall consumption  thus an
optimal number of agents exists for each of the graphs  this phenomenon is due to the fact
that a  is usually characterized by a small number of search regions  therefore  a small
number of agents suces to cover these regions  as the number of agents increases  the fuel
consumption goes up  this phenomenon is explained as follows  a large number of agents
increases the likelihood that a nearby agent will be assigned to a speci c node  in which
case relatively little exploration of the graph takes place  assigning  on the other hand 
a distant agent to the node would result in a larger degree of graph exploration  which is
essential  in the long run  for ecient navigation  especially if i a dfs is employed   thus
a large number of agents navigating in a small graph  which has few search regions   would
result in excessive fuel consumption  see  stern        for a more detailed explanation of
this phenomenon 
the optimal number of agents increases as the number of nodes in the graph increases 
while the optimal number of agents for a graph of     nodes is    this number increases up
to   for a graph of size       this stems from the fact that larger graphs have more search
regions and thus more agents are needed to explore them 
as described before  only one agent is allowed to move in this experiment  at any point
in time  up to now we have measured the total amount of fuel consumed by all of the
agents  it is of interest to nd out whether the work is uniformly distributed among the
agents  or whether a large portion of the work is carried out by a small number of agents 
table   presents the distribution of the work among the agents when up to    agents were
active on delaunay graphs of size       for each graph instance  we sorted the agents in
decreasing order of their fuel consumption  the table shows the relative fuel consumption
of the agents for       and    activated agents 
in general  we remark that while the overall work is not uniformly distributed  it is quite
balanced  for example  when    agents are activated      of the work is done by only  
   

fipha   finding the shortest path with a  in an unknown physical environment

agent no    agents      agents       agents   
 
     
     
     
 
     
     
     
 
     
     
     
 
     
     
 
    
    
 
    
    
 
    
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    
table    work distribution among multiple agents running our fuel ecient algorithm on
delaunay graphs of size      
agents  a similar tendency was observed for graphs of other sizes  as well as for sparse and
dense delaunay graphs  see appendix a  
in order to improve the eciency of the fuel ecient algorithm and to make the overall
work distribution more balanced  several improvements might be suggested  for example 
currently all the agents are positioned initially at the same source node  we might consider
to rst spread the agents in a number of directions and only then invoke the algorithm 
notwithstanding the additional overhead that may be incurred by spreading the agents 
this technique can result in a more balanced work distribution and in a reduced overall fuel
consumption 
      mapha   results for the time efficient algorithm

in this subsection we report the results for the time ecient algorithm of subsection     
as was explained  if our main objective is to conclude the task as fast as possible  such
that fuel consumption is of no concern  then all agents should always be moving  i e   none
of them should be idle at any point in time  the overall search time in this case is the
maximal distance that either agent travels until the shortest path to the goal node is found 
figure   shows the search time obtained by the time ecient algorithm as a function of
the number of agents  for various regular delaunay graphs  note that the search time can
never be smaller than the time it takes to travel along the shortest path to the goal  as the
results indicate  adding more agents is always ecient since we only measure the overall
time that has elapsed until the goal is found  what makes our algorithm interesting and
ecient is the fact that as we add more agents  the search time converges asymptotically to
   

fifelner  stern  ben yair  kraus    netanyahu

  
    nodes
     nodes
     nodes
     nodes
     nodes

 
 

search time

 
 
 
 
 
 
 
 
 

 

 

 
 
number of agents

  

  

  

figure    time consumption as a function of the number of agents  for various regular
delaunay graphs 
the length of the shortest path  recall that the average length observed of the shortest path
was approximately       indeed  a large number of agents will tend to nd the optimal path
within a time frame that approaches the above limit  while the overall time was     with
a single agent  it was reduced to     with    agents for graphs with     nodes for example 
using our proposed agent allocation procedure  we note that asymptotically all paths
from the initial state are traveled in a breadth  rst search manner  this is to say that a
suciently large team of agents is likely to produce a single agent that will travel along the
actual shortest path with very little deviation from it  similar results for the time  ecient
algorithm were also obtained for other types of graphs  see appendix a  

    combined requirements of fuel and time

while the distinction between the time ecient algorithm and fuel ecient algorithm is
reasonable  it may not be suitable in many practical situations  practical considerations of
time and fuel resources may suggest a combined approach  as the one described below 
consider  for example  a commander operating under a constraint of fuel consumption
but with no restriction on the number of troops that can be assigned to a certain task  in
order to complete the task as fast as possible  the commander may want to use the maximal
possible number of agents without exceeding the fuel consumption limit 
in essence  we seek to generalize mapha   such that the agents will minimize a cost
function which is a combination of time and fuel consumption  we suggest a general cost
function that takes into account the requirements on both these measures  the objective
will be to activate mapha   so as to minimize this cost function  speci cally  we suggest
the following linear combination 

ctotal   wt  time   wf  fuel
where wt and wf are the  normalized  weights attached  respectively  to the time and fuel
consumption  i e        wt wf      and wt   wf         ctotal is calculated globally  i e  
   

fipha   finding the shortest path with a  in an unknown physical environment

we measure the amount of time from the beginning of the task until the optimal path is
found  and the total amount of fuel consumed by all the agents  we then multiply these
quantities by their corresponding weights and report the combined cost 
both wt and wf are prespeci ed by the user  if wt      there is no time cost and the
fuel ecient algorithm will be the appropriate one to use  if wf      there is no fuel cost 
and we can use the time ecient algorithm  otherwise  if neither wt nor wf is    we should
use a dierent algorithm to minimize ctotal 
we suggest two algorithms for this general case 
simple combined algorithm 
this algorithm is actually identical to the time ecient algorithm  the number of
participating agents is a parameter provided by the user  at each iteration of the
high level all the participating agents move according to the allocation function of
the time ecient algorithm  given the formulation of the total cost  ctotal  we would
like to determine the optimal number of agents  for any wt and wf   note that in the
trivial case where wf      adding more agents is always valuable  since they do not
consume any resources  and can only reduce the time cost  however  as wf increases 
a large number of agents may increase the total cost 
improved combined algorithm 
the main limitation of the simple combined algorithm is that even though cost is
incurred for fuel consumption  all the agents are always moving  the improved combined algorithm addresses this problem and suggests moving only some of the agents
simultaneously  using this formalization  we rst determine p  i e   the number of
agents that will participate in the task  given p  we then determine m  i e   the number of agents that will actually be distributed to nodes selected from the window  by
the high level   the remaining p   m agents will stay idle  note that for the simple
combined algorithm p an m coincide  we use the same mechanism of the time ecient
allocation function  except that here the algorithm chooses only m  out of p  agents
that minimize this allocation function  as in the time ecient algorithm  we rst
determine the size of the window  i e   the number of nodes from the open list that
should be expanded  then  we invoke the same allocation function  whereas in the
time ecient case the allocation terminates once all the agents are assigned to nodes 
here the allocation stops after m agents are selected  the selected agents are the best
m agents for this expansion cycle since they minimize the allocation function 

    results for the combined algorithm

we provide experimental results for the combined algorithm that was introduced in the
previous subsection  the results in tables   and   were obtained for delaunay graphs
of size      each table entry represents the average of     problem instances  for each
column  the bold face number is the smallest total cost for the corresponding wt  wf ratio 
these minimal costs determine the optimal number of agents for a given wt  wf ratio 
table   provides total costs for the simple combined algorithm as a function of the
number of agents for various wt  wf ratios  the leftmost column corresponds to the case
   

fifelner  stern  ben yair  kraus    netanyahu

wt
wf

   
   

  agents
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    

   
   

   
   

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    
    

    
    
    
    
    
    
    

    
         

   
   

   
   

   
   

   
   

                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   

   
   

   
   

   
   

   
   

              
              
              
              
              
              
              
              
              
              
              
              
              
               

    

    
    
    
    
    
    
    
    
    
    
     
     
     

table    ctotal for the simple combined algorithm as a function of the number of agents 
for various ratio wt  wf ratios 

   

fipha   finding the shortest path with a  in an unknown physical environment

where only time matters  thus its entries are identical to the values obtained by the timeecient algorithm  as fuel consumption becomes more signi cant  it is no longer bene cial
to increase the number of agents and thus the optimal number of agents decreases  for
wt   wf        ctotal        time        fuel  the optimal number of agents obtained
is three  for a total cost of       the more critical fuel consumption becomes  the more
bene cial it is to use a smaller number of agents  the rightmost column corresponds to the
other extreme case  where wf        i e   when only fuel consumption matters  note that
the entries of this column dier from their counterpart costs obtained by the fuel ecient
algorithm  the dierence stems from the fact that  in the context of the simple combined
algorithm  picking p agents means that they will all be moving simultaneously  whereas in
case the fuel ecient algorithm is employed only one agent  out of p  will be allowed to
move at all times  note that the fuel ecient algorithm is essentially a special case of the
improved combined algorithm with m     
table   provides total costs for the improved combined algorithm as a function of the
number of agents for various wt  wf ratios  the number of participating agents was p     
 i e   up to    available agents could move simultaneously   each row corresponds to a
dierent m  i e   to the actual number of moving agents   clearly     m  p        as
before  for each column the bold face number is the smallest total cost for the corresponding
wt  wf ratio  these minimal costs determine the optimal number of moving agents for a
given wt  wf ratio 
the top entry of the rightmost column is identical to the cost obtained by the fuelecient algorithm  for    agents  in this case wf      and only one agent is allowed to
move at any point in time  the bottom entry of the leftmost column is identical to the cost
obtained by the time ecient algorithm  for    agents  in this case wt      and all of the
   participating agents are moving at all times 
the more signi cant fuel consumption becomes  the less bene cial it is to move many
agents  thus the optimal number of moving agents decreases  for example  for wt   wf  
     the optimal number of moving agents obtained was three  for a total cost of       as
fuel consumption becomes more crucial  it would be bene cial to move a smaller number of
participating agents 
comparing the results of the simple combined algorithm with those of the improved
combined algorithm reveals that for the same wt  wf ratio and for the same number of
moving agents  which is equal to the number of all participating agents in the simple
combined case  the improved combined algorithm usually performs better  this is because
it can pick the moving agents from a larger sample  also  it appears that the optimal number
of moving agents is smaller for the improved combined algorithm  in this algorithm  the
moving agents are picked in a clever manner at each cycle and thus can be better utilized 
additional experiments were conducted for other graph sizes  as well as for sparse and
dense delaunay graphs  the results obtained in all cases were rather consistent  future
work will attempt to predict in advance the best number of agents 

   conclusions and future work
we have addressed the problem of nding the shortest path to a goal node in unknown
graphs that represent physical environments  we have presented the two level algorithm 
   

fifelner  stern  ben yair  kraus    netanyahu

wt
wf

   
   

  agents
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    

   
   

   
   

   
   

    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    

    

         
         

              
    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

   
   

   
   

   
   

   
   

                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   

   
   

   
   

   
   

              
    
    
    
    
    
    
    
    
    
    
    
    
    

         
         
         
         
         
         
         
         
         
         
         
         
          

table    total costs for the improved combined algorithm as a function of the number of
moving agents  out of    participating agents   for various wt  wf values 

   

fipha   finding the shortest path with a  in an unknown physical environment

pha   for such environments for a single search agent  and the mapha  algorithm for
multiple agents  we have experimented with several variations of delaunay graphs  containing up to      nodes  the enhanced single agent algorithm yielded signi cantly better
results than the ones obtained by the simpler variants  the results for the fuel ecient
algorithm show that using more agents is bene cial only to some extent  this is because all
the agents are initially located at the same source node and they all consume fuel for each
move they make  for the same reason  the bene t of using the optimal number of agents
as opposed to only one agent is modest  the results for the time ecient algorithm are
very encouraging  since the search time converges quickly to the optimum as the number of
search agents increases  we have also introduced a cost function that combines both time
consumption and fuel consumption  and have presented two algorithms for this paradigm 
the results show that for each combination there exists an optimal number of agents which
tends to increase as the weight of the time cost increases 
future work can be pursued along the following directions 
we have assumed that upon reaching a node  the agent can learn the locations of
all of its neighbors  in many domains this model may not be valid  and the location
of a node is known only when the agent actually visits it  such a model was also
suggested in  shmoulian   rimon         further research should be done in order
to implement our algorithms  in the context of such a model 
we have used traveling agents to solve the shortest path problem  a similar mechanism might be used for solving other known graph problems  such as the minimum
spanning tree  the traveling salesman problem  or any other problem that requires
consideration as to which node should be visited next 
we have proposed two algorithms for combining time consumption and fuel consumption  both algorithms assume that the number of agents is determined a priori  future
work can try to theoretically determine the optimal number of agents given the constraints  also  future work can be done to see whether changing this number on the y
would increase the eciency of these algorithm  also  we have assumed that agents
consume fuel only when they move  and have measured only the total performance
time of a task  thus idle agents do not consume any resources  however  we can
think of a model where idle agents do consume resources  e g   time and energy  
we have assumed a centralized model  where all the agents share their knowledge at
all times  future work can assume other communication paradigms  in particular 
we are interested in a model where there is no communication at all between the
agents  this model is known as the ant robotics model  wagner   bruckstein      
yanovski  wagner    bruckstein         in this model  information is spread to other
agents by pheromones  i e   data that are written by an agent at a node  other agents
can read these pheromones when reaching those nodes  we are currently working
towards applying our mapha  algorithm to such a model  we believe that if we
increase the size of the data that are allowed to be written at each node  then each
agent will be able to write its complete knowledge at a node of the environment  the
challenge of applying a  in such a model lies in the fact that since a  maintains a
global open list  data from opposite sides of the graph can inuence the behavior of
   

fifelner  stern  ben yair  kraus    netanyahu

the algorithm  thus we need the knowledge sharing of such a system to be as large
as possible  for this purpose  we believe that a new type of communication agents
should be introduced  agents of this type will not try to increase the search frontier
but rather move around the environment and spread the most recent data available 

acknowledgments
a preliminary version of this paper appeared in proceedings of the first international joint
conference on autonomous agents and multi agent systems        felner et al         
the work was carried out while the rst author was at bar ilan university  this material is
based upon work supported in part by nsf under grant          and by isf under grant
      

appendix a  additional experimental results
as mentioned in subsection      each node in a regular delaunay graph is connected to
all its neighbors  this property may not always apply to a real road map  for example 
nearby geographic locations may not always be connected by a road segment  due to the
the existence of obstacles like a mountain or a river  in addition  distant locations are often
connected by highways  to capture these additional characteristics  we have also considered so called sparse and dense delaunay graphs  instances of these variants can be easily
obtained from regular delaunay graphs by random deletion and addition of edges  respectively  speci cally  we have generated sparse delaunay graph instances by deleting roughly
    of the edges at random  likewise  dense instances were generated by introducing    
edges at random   a new edge is created by selecting at random a pair of nodes  
we have run all of the algorithms presented in the main body of the paper also on the
above delaunay graph variants  the results obtained are presented here 
as can be expected  the more sparse the graph  the more often the agent runs into deadends  indeed  all the algorithms required additional travel eort to nd the optimal path
after edges were removed  however  the ratio between the travel cost of any two algorithms
seems to remain the same  for the various delaunay graph types   and i a dfs exhibits
superior performance for all graph instances  see figures    a    b   this behavior proved
consistent in all of our experiments  for both a single agent and a multi agent environment 
also  figures    a    b  exhibit similar behavior of search cost of wina  versus window
size for sparse delaunay graphs and dense delaunay graphs  respectively  to that observed
for regular delaunay graphs  see figure    
figures    a    b  present the costs of the fuel ecient algorithm as a function of the
number agents for various sizes of sparse and dense delaunay graphs  respectively  the
overall fuel consumption recorded for the sparse delaunay graphs is larger than the fuel
consumption recorded for their counterpart regular graphs  see figure    by a factor of
about      for graphs simulating highways  i e   the dense graphs  the fuel consumption
decreases relative to both sparse and regular delaunay graphs 
note that the optimal number of agents navigating in a sparse graph also increases  since
agents need to backtrack more often in this case  thus having more agents will assist the
   

fipha   finding the shortest path with a  in an unknown physical environment

   

  
tree path
shrtest known path
aerial path
p dfs
d dfs
a dfs
i a dfs

  
  

  
  

  

search cost

search cost

  

tree path
shrtest known path
aerial path
p dfs
d dfs
a dfs
i a dfs

  

  
  

  
  
  

  

  

  

 

  
 
   

    

    
    
    
    
number of nodes in the graph

    

 
   

    

    

    
    
    
    
number of nodes in the graph

    

    

 a 
 b 
figure     search cost versus the number of nodes of   a  sparse delaunay graphs  and  b 
dense delaunay graphs for various low level algorithms 

 

 
    nodes
     nodes
     nodes

   

    nodes
     nodes
     nodes

   

 
 

 

search cost

search cost

   

   
 
   

   

 

   

 
 
   
 

   
 

  

  

  

  
  
window size

  

  

  

 

  

  

  

  
  
window size

  

 a 
 b 
figure     search cost of wina  versus window size for various sizes of   a  sparse delaunay
graphs  and  b  dense delaunay graphs 

   

  

  

fifelner  stern  ben yair  kraus    netanyahu

   

 
    nodes
     nodes
     nodes
     nodes

 
   

   
   
fuel consumption

 
fuel consumption

    nodes
     nodes
     nodes
     nodes

   

   
 
   

   
 
   

 

   

   

   

 

   

   

 
 

 

 

 

 
 
number of agents

 

 

 

 

 

 

 

 
 
number of agents

 

 

 

 a 
 b 
figure     fuel consumption as a function of the number of agents for various sizes of   a 
sparse delaunay graphs  and  b  dense delaunay graphs 
search  on the other hand  adding random edges to the graphs causes the opposite eect 
i e   less fuel is consumed and the optimal number of agents is reduced  this is explained
by the fact that new edges add more connections between nodes  i e   many  shortcuts  are
created and the search can be carried out faster and with a smaller number of agents 
  

   
    nodes
     nodes
     nodes
     nodes
     nodes

  
 

   

 
 

 
search time

search time

    nodes
     nodes
     nodes
     nodes
     nodes

 

 
 

   
 

 
 

   

 
 

 
 

   
 

 

 

 

 
 
number of agents

 

 

 

 

 

 

 

 
 
number of agents

 

 a 
 b 
figure     time consumption as a function of the number of agents for various sizes of   a 
sparse delaunay graphs  and  b  dense delaunay graphs 
figures    a    b  present the costs of the time ecient algorithm as a function of the
number agents for various sizes of sparse and dense delaunay graphs  respectively  the
results con rm the same tendency that was observed for regular delaunay graphs  see
   

 

 

fipha   finding the shortest path with a  in an unknown physical environment

figure     namely that as the number of agents grows  the overall cost converges to the
length of the optimal path 

references
argamon engelson  s   kraus  s     sina  s          utility based on line exploration for
repeated navigation in an embedded graph  articial intelligence                    
argamon engelson  s   kraus  s     sina  s          interleaved vs  a priori exploration
for repeated navigation in a partially known graph  international journal of pattern
recognition and articial intelligence                 
barber  c  b   dobkin  d  p     huhdanpaa  h          the quickhull algorithm for convex
hull  tech  rep   geometry center technical report gcg    university of minnesota 
bellman  r          on a routing problem  quarterly of applied mathematics                
bender  m  a   fernandez  a   ron  d   sahai  a     vadhan  s  p          the power
of a pebble  exploring and mapping directed graphs  in proceedings of the thirtieth
annual acm symposium on the theory of computing  pp           dallas  texas 
cormen  t  h   leiserson  c  e   rivest  r  l     stein  c          introduction to algorithms  mit press  cambridge  massachusetts   nd edition 
cucka  p   netanyahu  n  s     rosenfeld  a          learning in navigation  goal nding
in graphs  international journal of pattern recognition and articial intelligence 
               
dechter  r     pearl  j          generalized best  rst search strategies and the optimality
of a   journal of the association for computing machinery                 
dijkstra  e  w          a note on two problems in connexion with graphs  numerische
mathematik             
felner  a   kraus  s     korf  r  e          kbfs  k best rst search  annals of mathematics and articial intelligence  in press 
felner  a   stern  r     kraus  s          pha   performing a  in unknown physical environments  in proceedings of the first international joint conference on autonomous
agents and multi agent systems  pp           bologna  italy 
ghosh  b          random distances within a rectangle and between two rectangles  bulletin
of the culcutta mathematical society            
hart  p  e   nilsson  n  j     raphael  b          a formal basis for the heuristic determination of minimum cost paths  ieee transactions on systems science and cybernetics 
scc               
kaelbling  l  p     moore  a  w          reinforcement learning  a survey  journal of
articial intelligence research             
karp  r     pearl  j          searching for an optimal path in a tree with random costs 
articial intelligence                  
   

fifelner  stern  ben yair  kraus    netanyahu

kitamura  y   teranishi  k     tatsumi  s          organizational strategies for multiagent real time search  in proceedings of the second international conference on
multi agent systems          
knight  k          are many reactive agents better than a few deliberative ones   in
proceedings of the thirteenth international joint conference on articial intelligence 
pp           chamb ery  france 
koenig  s     likhachev  m       a   d  lite  in proceedings of the eighteenth national
conference on articial intelligence  aaai   pp           edmonton  canada 
koenig  s     likhachev  m       b   incremental a   in advances in neural information
processing systems     nips   mit press  cambridge  ma 
korf  r  e          depth  rst iterative deepening  an optimal admissible tree search 
articial intelligence                
korf  r  e          real time heuristic search  articial intelligence                 
korf  r  e          linear space best  rst search  articial intelligence               
korf  r  e          finding optimal solutions to rubik s cube using pattern databases 
in proceedings of the fourteenth national conference on articial intelligence  pp 
         providence  rhode island 
korf  r  e          sliding tile puzzles and rubik s cube in ai research  ieee intelligent
systems           
okabe  a   boots  b     sugihara  k          spatial tessellations  concepts  and applications of voronoi diagrams  wiley  chichester  uk 
pearl  j     kim  j  h          studies in semi admissible heursitics  ieee transactions
on pattern analysis and machine intelligence             
shmoulian  l     rimon  e          roadmap a   an algorithm for minimizing travel eort
in sensor based mobile robot navigation  in proceedings of the ieee international
conference on robotics and automation  pp           leuven  belgium 
stentz  a          optimal and ecient path planning for partially known environments 
in proceedings of the ieee international conference on robotics and automation 
pp             san diego  ca 
stern  r          optimal path search in unknown physical enviroments  m sc 
thesis  department of computer science  bar ilan university  israel available on
http   www cs biu ac il felner 
taylor  l     korf  r          pruning duplicate nodes in depth  rst search  in proceedings
of the eleventh national conference on articial intelligence  pp           washington  d c 
wagner  a     bruckstein  a  m          ants  agents  networks  trees  and subgraphs 
future generation computer systems journal                 
yanovski  v   wagner  i  a     bruckstein  a  m          vertex ant walk  a robust method
for ecient exploration of faulty graphs  annals of mathematics and articial intelligence                  
   

fi