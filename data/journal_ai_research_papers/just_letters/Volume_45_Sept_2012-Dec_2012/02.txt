journal of artificial intelligence research                 

submitted        published      

an approximative inference method for solving so
satisfiability problems
hanne vlaeminck
joost vennekens
marc denecker
maurice bruynooghe

hanne vlaeminck cs kuleuven be
joost vennekens cs kuleuven be
marc denecker cs kuleuven be
maurice bruynooghe cs kuleuven be

department of computer science 
celestijnenlaan    a
     heverlee  belgium

abstract
this paper considers the fragment so of second order logic  many interesting problems  such as conformant planning  can be naturally expressed as finite domain satisfiability problems of this logic  such satisfiability problems are computationally hard  p
    and
many of these problems are often solved approximately  in this paper  we develop a general
approximative method  i e   a sound but incomplete method  for solving so satisfiability
problems  we use a syntactic representation of a constraint propagation method for firstorder logic to transform such an so satisfiability problem to an so id  satisfiability
problem  second order logic  extended with inductive definitions   the finite domain satisfiability problem for the latter language is in np and can be handled by several existing
solvers  inductive definitions are a powerful knowledge representation tool  and this motivates us to also approximate so id  problems  in order to do this  we first show how
to perform propagation on such inductive definitions  next  we use this to approximate
so id  satisfiability problems  all this provides a general theoretical framework for a
number of approximative methods in the literature  moreover  we also show how we can
use this framework for solving practical useful problems  such as conformant planning  in
an effective way 

   introduction
finite model generation is a logical paradigm for solving constraint problems  a successful
instance is the field of sat  where efficient solvers for the low level cnf language are developed  other instances  but for more expressive languages  are answer set programming
 asp   baral        and model expansion  mx  for  extensions of  first order logic  in asp 
e g   finite herbrand models of an answer set program are computed  baral         model
expansion  mx   mitchell   ternovska        generalizes herbrand model generation and
aims at computing one or more models of a theory t that expand a finite interpretation i 
for a  possibly empty  subset of symbols of t   mx for first order logic  mx fo   is formally
equivalent to the finite domain satisfiability checking problem for existential second order
logic  sat  so    which is known from fagins celebrated theorem to capture np  fagin 
       that is  the problems in np are exactly those that are in a precise sense equivalent
to an so satisfiability problem  and hence an mx fo  problem  a range of solvers exists
   or more specifically  to the search problem for a witness of such a problem 
c
    
ai access foundation  all rights reserved 

fivlaeminck  vennekens  denecker   bruynooghe

for finite model generation  e g   an overview of state of the art asp and mx fo    solvers
 here  fo   refers to the family of extensions of fo  can be found in the reports of the
asp competition  e g   denecker  vennekens  bond  gebser    truszczynski        
example      here is a bounded planning problem modeled as a finite model generation
problem  the problem is deliberately kept simple as it will serve as the running example
in this paper  a glass may be clean or not  and can be cleaned by the action of wiping  we
can represent this dynamic domain by the following fo theory tact  
t    clean t       clean t   w ipe t   
clean     initiallyclean 

   
   

the bounded planning problem we are considering is then to turn a dirty glass into a clean
one in n steps  where n  n is a given constant  this can indeed be formulated as a
model expansion problem  find a model that satisfies tact while initiallyclean is false 
and clean n  true  we can formulate this problem equivalently as an so finite domain
satisfiability problem  namely as the satisfiability problem in the range          n  of time
points of the following so formula 
w ipe  clean  initiallyclean    act  initiallyclean  clean n   

   

where with act we denote the conjunction of sentences in tact   for n      this formula is
indeed satisfiable in the suitable interpretation of constants   and n and the binary function
   and  moreover  each witness w for its satisfiability provides a plan  for instance  wiping
at time point   does the job  as is verified by the witness w for which w ipew       and
cleanw               n  
while a large number of search problems can indeed be seen as finite model generation
problems  there are also a number of problems that are of a higher complexity than np 
and consequently cannot be formulated as an mx fo  problem  indeed  in this paper we
are not interested in np  but in the next level p  of the polynomial hierarchy  perhaps
the prototypical such problem is finite domain satisfiability for so  satisfaction in finite
interpretations is in p  for every so sentence and is p   hard for some such sentences
 immerman         an interesting p  problem is that of conformant planning  which we
discuss in detail in section    but already introduce in the next example 
example      extending example      suppose that we do not know whether the object is
initially clean or dirty  but still want a plan that is guaranteed to make it clean  no matter
what the initial situation was  this is no longer a standard planning problem  but is called
a conformant planning problem  we can formulate this as the following so satisfiability
problem 
 w ipe initiallyclean  clean    act  clean n   
   
in words  we need an assignment to the action w ipe such that the goal clean n  is satisfied
for every initial situation initiallyclean and fluent clean that satisfy the action theory 
solving problems like this would require us to make a choice for the existentially quantified predicates and then check that the implication is satisfied for every interpretation of
  

fian approximative inference method for so

the universally quantified predicates  while this can be done in principle  in practice it
is often too expensive  in this paper  we explore an alternative based on a propagation
method for first order logic developed by wittocx  denecker  and bruynooghe         this
method computes in polynomial time  for a given theory t and a partial interpretation i 
an approximation of what has to be certainly true    true in all models of t that expand
i  and certainly false    false in all such models   now  an interesting property of this
propagation method is that it can be syntactically represented as a monotone inductive
definition  denecker   ternovska        that defines  in an approximative way  these underestimates of the predicates in t and of their complements  such a monotone inductive
definition is essentially just a set of propagation rules  similar to a definite logic program 
that is interpreted by the least fixpoint of its immediate consequence operator  for any
given theory t we can obtain this approximating definition by a linear transformation of
the original fo formula 
returning to the above example  we need to find an interpretation for the action predicates  such that for every interpretation of the other predicates  the implication act 
clean n  is satisfied  i e   such that without knowing anything about these other predicates  we should already be certain that the implication is satisfied  the basic idea behind
our method is to approximate an so problem of the form p q   using the approximate definition from wittocx et al  to check whether an interpretation for the existentially
quantified predicates p has the property of making  true  regardless of the predicates q 
essentially  this reduces an so problem to an so id  problem  where with so id  we
refer to so extended with inductive definitions  
in section    we extend our method to so id  problems  as argued by denecker
and ternovska  inductive definitions are a useful tool for knowledge representation  for
example  many dynamic domains can be formulated naturally and in a modular way using
inductive definitions  while this can be quite tedious in fo  we already mentioned conformant planning as a typical so satisfiability problem  typically  these conformant
planning problems require the modeling of a dynamic domain  we will come back to the
syntax and semantics of inductive definitions in the next section  but the dynamic domain of
example     can  as an alternative to the action theory tact   be formulated as the following
inductive definition act  


 clean t       clean t  

clean t       w ipe t  
   


clean   
 initiallyclean 
the conformant planning problem can then be formulated alternatively as the satisfiability problem of the formula  w ipe initiallyclean  clean    act  clean n    however 
this is no longer a so satisfiability problem  but a so id  satisfiability problem 
this motivates us to see how we can extend our approximation method to such so id 
satisfiability problems  for this purpose  we first show how to symbolically represent propagation on inductive definitions  next  we show how we can use this together with the
representation of propagation for fo to approximate finite domain so id  satisfiability
problems 
our approximation method has a number of benefits  first of all  it is a general method 
that can be applied automatically to approximately solve any so problem  second  the
  

fivlaeminck  vennekens  denecker   bruynooghe

required computation can be carried out by any off the shelf mx fo id   solver  allowing
our method to benefit effortlessly from improvements in solver technology  such as the
idp system by marien  wittocx  and denecker         finally  as we show in section   
our method elegantly generalizes a number of approximate reasoning methods from the
literature  e g   baral  gelfond    kosheleva        son  tu  gelfond    morales       
denecker  cortes calabuig  bruynooghe    arieli        doherty  magnusson    szalas 
      son et al         
parts of this work have already been presented at the jelia      conference  vlaeminck  wittocx  vennekens  denecker    bruynooghe        

   preliminaries
we assume familiarity with classical first order logic  fo  and second order logic  so   in
this section we introduce some of the notations and conventions used throughout this paper 
    first order logic
a vocabulary  is a finite set of predicate symbols p and function symbols f   each with
an associated arity  constants are function symbols with arity    we often denote a symbol
s with arity n by s n  a interpretation i consists of a domain d and an assignment
of a relation p i  dn to each predicate symbol p n   and an assignment of a function
f i   dn  d to each function symbol f n    we assume that p contains the equality
predicate   interpreted as the identity relation  a pre interpretation of  consists of a
domain and an interpretation of the function symbols  if i is a  interpretation and     
we denote by i   the restriction of i to the symbols of     if   and   are two disjoint
vocabularies  i a    interpretation with domain d and j a    interpretation with the same
domain  then i   j denotes the unique         interpretation with domain d such that
 i   j      i and  i   j      j 
terms and formulas over a vocabulary  are defined as usual  an expression of the form
 where p is an n ary predicate and d  dn is called a domain atom  a domain literal
p  d 
 or the negation p  d 
 thereof  as usual  we denote a formula 
is a domain atom p  d 
by  x  to indicate that the set of free variables of  is a subset of x  a formula without
free variables is called a sentence  the satisfaction relation    is defined as usual  for an
 we
interpretation i  a formula  with n free variables and a tuple of n domain elements d 


use i     d  as a shorthand for i   x   d      x   where  is a variable assignment  and
 is the variable assignment that is the same as  except that it maps the variables
 x   d 
 we define the truth evaluation function   d  
 i as follows 
x to the domain elements d 
i
i



  d     t iff i     d  and   d     f otherwise  we say that a formula  is in negation
normal form if  contains no implications or equivalences  and all negations occur directly
in front of atoms  we define the inverse on truth values as follows   f      t and  t     f  
we also define the following strict order on the truth values  f  t t  the truth order
point wise extends to interpretations  if i and j are two  interpretations  then we say
that i t j if for every predicate symbol p and tuple of domain elements d it holds that
 t p j  d  

p i  d 
similar to how a real number r can be approximated by an interval  l  u  such that l  r 
u  in this paper we approximate  interpretations k by a pair  i  j  of  interpretations 
  

fian approximative inference method for so

such that i t k t j  we denote by  i  j  the interval of all such interpretations k 
this interval is empty if and only if i  t j  it follows easily from well known monotonicity
results  that if we evaluate all positive occurrences  i e   in the scope of an even number of
negations  of atoms in some formula  by i  and all negative occurrences  i e   in the scope
of an odd number of negations  by j  we are underestimating the truth of  in the interval
 i  j   conversely  if we evaluate positive occurrences in j and negative occurrences in i 
we are overestimating the truth of  in  i  j   to state this property more formally  we
introduce the following notation 
definition      pos neg evaluation relation  ij    let  be a  formula and let i and j
be  interpretations  we define the pos neg evaluation of  in i and j  denoted by  ij  
by induction over the size of  
 for an atom    p  t    ij   i  
 for       ij      ji     
 for            ij   t iff i ij   t for both i        
 for    x    ij   t iff there is a d  d such that   i x d j x d    t 
we now indeed have that  for each k   i  j    ij  k   ji   also  we have
that k    kk  
there is an intimate connection between the approximation of an interpretation by a
pair of interpretations and belnaps four valued logic         we denote the truth values
true  false  unknown and inconsistent of four valued logic by respectively t  f   u and i  on
these truth values  the truth order t and precision order p are defined as shown in figure
  
a four valued relation of arity n on some domain d is a function from dn to  t  f   u  i  
a four valued interpretation i of vocabulary  consists of a pre interpretation and of p i  
a four valued relation of arity n on d for each predicate symbol p n    again  the
precision order pointwise extends to interpretations  if i and j are two  interpretations 
then we say that i p j if for every predicate symbol p and tuple of domain elements d it
 p p j  d  
 similarly  also the truth order is extended to interpretations 
holds that p i  d 
 t 
 t

 p

 t

u 

 i

 p

f 

 t

 t

 i 

 t
 p

 p

u

f

figure    the truth and precision order
  

fivlaeminck  vennekens  denecker   bruynooghe

there is a natural isomorphism between belnaps four truth values and pairs of the two
standard truth values 
  t  t    t 
  f   t    u 
  t  f     i 
  f   f     f  
intuitively  this mapping  interprets its first argument as an underestimate to the real
truth value  and its second argument as an overestimate  if the underestimate is f and the
overestimate is t  then the real truth value is indeed unknown  whereas  if the underestimate
is t and the overestimate if f   then there cannot exist a real truth value  since t   f   so we
end up with inconsistency  this isomorphism  extends in an obvious way to an isomorphism
between pairs  i  j  of two valued interpretations and four valued interpretations i which
all share the same pre interpretations   i  j  and i are isomorphic iff  for each predicate
     p i  d  
 p j  d   
 we also denote this isomorphism by   
p n and tuple d  dn   p i  d 
there is a tight link between the pos neg evaluation function  ij and the belnap
evaluation i  
i      ij    ji    where   i  j    i 
when i is a three valued structure  i e   it never assigns i  this corresponds to the standard
kleene evaluation         in the rest of this paper  we will often omit the isomorphism   
and  e g   simply denote the four valued truth value of a formula  in a pair of interpretations
 i  j  as  i j    an important property  that we already stated above in different notation 
is that  i j  p k for all k   i  j  
there is a natural and well known alternative way of using an interval  i  j  for which
i t j to assign a truth value to a formula   the supervaluation  van fraassen        
definition      supervaluation sv i j        the supervaluation sv i j     of a sentence 
in a pair of interpretations  i  j   or equivalently  a three valued interpretation   i  j   is
defined as
sv i j       glbp   k  k   i  j    
it is easy to see that always sv i j     p  i j    this inequality may be strict  for
instance  if we take    q  q and interpretations i and j such that q i j    u  then
sv i j       t  but  i j    u  the supervaluation has the following interesting property 
let i be an interpretation for the free vocabulary of a so formula    q   and let  j    j   
  u
be the least precise pair of interpretations for q in the domain d of i  i e   q j   j     d 
n

for all q n  q and d  d    we then have that sv i j   i j         t if and only if i   t 
key to our approach is that we can simulate the four valued truth evaluation in pairs
of interpretations by encoding what is certainly true and certainly false  using a single
two valued structure i tf over a new vocabulary tf   as we show in the next section  this
gives us a convenient vocabulary to syntactically represent the construction of such an
approximation  the new vocabulary tf contains the function symbols f of  and  for
each predicate p  p   two symbols p ct and p cf   the interpretations of p ct and p cf
 is certainly true and those for
in i tf contain  respectively  those tuples d for which p i  d 
which it is certainly false  formally  for a vocabulary  and a four valued  interpretation
  

fian approximative inference method for so

i     i  j   the tf  interpretation i tf has the same pre interpretation as i  and is defined
by 
 p ct  i

tf

 i  d 
 p t    p i  
   d p

 p cf  i

tf

 i  d 
 p f     dn   p j  
   d p
tf

tf

an interpretation i is three valued iff  p ct  i and  p cf  i are disjoint for any p    i
tf
tf
is two valued iff  p ct  i and  p cf  i are each others complement in dn   also  if i p j  
tf
tf
tf
tf
then  for each p    p ct  i   p ct  j and  p cf  i   p cf  j  
definition      ct and cf    for any given  formula  x   let ct  x  be the tf  formula
obtained by first reducing to negation normal form and then replacing all occurrences of
positive literals p  t  by p ct  t  and all negative literals p  t  by p cf  t   and let cf  x  be
the formula   x  ct  
an interesting property of the formulas ct and cf is that they do not contain negations 
also  the following proposition is well known 
proposition      feferman         for every  formula  and interpretation i  it holds
 i p t if and only if  d 
  ij   t if and only if  ct  d  
 i tf   t  also   d 
 i p f
that  d 
tf
 ji
cf
i


if and only if  d 
  f if and only if    d  
  t 
    fo id 
in this subsection we recall fo id   denecker   ternovska         the extension of fo
with a construct to respresent some of the most common forms of inductive definitions 
such as monotone induction  induction over a well founded order or iterated induction  as
illustrated by denecker and ternovska  fo id  can be used to represent different sorts
of common knowledge  such as temporal and dynamic domains  the closed world assumption  defaults  causality  etc  in this paper  we use definitions to symbolically represent
propagation  not only for fo formulas  as already mentioned in the introduction  but also
propagation for inductive definitions themselves 
a definitional rule over a vocabulary  is an expression of the form x p  t    where
p  t  is an atomic formula and  an fo formula  the symbol  is a new connective  called
the definitional implication  to be distinguished from the fo material implication symbol
  or its converse    a definition  is a finite set of definitional rules  a predicate
symbol p in the head of a rule of  is called a defined predicate  all other predicate and
function symbols in  are called the open symbols or the parameters of the definition  the
set of defined predicates is denoted def     the remaining symbols open    note that
open   therefore also includes f   
given an interpretation for its open predicates  each definition will have a unique model 
that can be constructed by firing its rules in an appropriate order  before defining this
formally  we first consider an example 
example      reachability in a graph is not expressible in fo  that is  there is no fo
formula  over the vocabulary consisting of two predicates edge   and reach   such that
in any model m of    d    d     reachm iff there is a non empty path from d  to d  in the
  

fivlaeminck  vennekens  denecker   bruynooghe

graph represented by edgem   we can represent reachability with an inductive definition
however  the following definition defines the predicate reach in terms of the open predicate
edge 
 
 
xy reach x  y   edge x  y  
xy reach x  y   z reach x  z   reach z  y   
o    with a definition  and a given open   interpretation o 
definition      operator t
o on two valued def    interpretations
we define the immediate consequence operator t
o
such that t  i    j iff for each defined predicate p n and tuple d  dn   it holds that
   t iff there exists a rule x p  t    x   such that t o i    d and  o i   d 
   t 
p j  d 

the model of a positive definition  i e   no defined predicates occur negatively in the
body of rules  can be defined as the least fixpoint of this immediate consequence operator 
we use m odi open      to denote the model of the definition  extending the restriction
of i to the open predicates and function symbols of   when  has no open predicates 
we omit the subscript and simply use m od    we postpone going into more detail about
how to construct the model of a general  non monotonic  inductive definition until section
   in the next two sections  we only use positive definitions 
fo id  formulas are inductively defined by the same rules as standard fo formulas 
augmented with one extra case 
 a definition  over  is an fo id  formula  over    
note that rule bodies do not contain definitions  and that rules only occur inside definitions
and are not fo id  formulas themselves whereas definitions can be used in fo id  formulas
anywhere atoms can be used 
we can now define the satisfaction relation i     of fo id  using the standard inductive
rules of fo  augmented with one extra rule 
 i     if i   m odi open      
from now on  we assume without loss of generality that for any definition   it holds that
every defined predicate p  def    is defined by exactly one rule  denoted by x p  x  
p  x    indeed  any definition  can be brought into this form by a process similar to
predicate completion  the transformation consists of first transforming rules of the form
x p  t     into equivalent rules y p  y   x y   t      next  one merges all rules
of the form x p  x   i  x   into x p  x      x          n  x   

   propagation for fo
in this section we give a general  symbolic representation of propagation for first order logic 
for this  we base ourselves on the work by wittocx et al          we come back to the
precise relation between the material presented in this section and their work at the end of
this section 
suppose we have an fo theory t in vocabulary   a pre interpretation of   and a
finite three valued interpretation i that represents some  incomplete  knowledge about the
  

fian approximative inference method for so

t  clean t        clean t   w ipe t    
t

a 
act
 

clean t        clean t   w ipe t  
t for t    

clean t     
f for t    

a   t 
act
     

clean t   w ipe t 
t for t    

clean t 
t for t    

a   t 
act
     

clean t     
cleancf    

w ipe t 
t for t    

clean t 
cleancf    

w ipe t 
w ipecf    

figure    propagation for fo 
predicates of   we would now like to know the implications of this knowledge  assuming
the theory t is satisfied in the context of i  to find this out  we can look at the set m
of all models of t that complete this three valued interpretation  i e   m    m   m   
t and i p m    given the partial information i  everything that is true in all m  m
must certainly be true according to t   while everything that is false in all such m must
certainly be false according to t   in other words  all the information that t allows us to
derive from i can be captured by the greatest lower bound g   glbp m 
in general  computing this greatest lower bound may be too expensive  the data complexity is in p    to be of practical use  however  we may still achieve useful results by
computing some approximation m such that i p m p g  we can compute such an
approximation by propagating the three valued interpretation i through the parse tree of
t   we illustrate this with the following example 
example      consider the sentence   t clean t       clean t   w ipe t   rewriting
this into negation normal form  it becomes 
t clean t        clean t   w ipe t   
now  assume that  is satisfied  and that we know that clean is false at timepoint   
from the knowledge that  is satisfied  it immediately follows that  for all timepoints t 
the disjunctive formula clean t        clean t   w ipe t   is satisfied  using the fact
that clean is false at timepoint    we can now deduce that the conjunction  clean t  
w ipe t   is true for timepoint    therefore  in all models of  where clean is false at
timepoint    w ipe and clean have to be false at timepoint    this reasoning process is
illustrated on the left part of figure   
we now construct a symbolic representation of this propagation process  first  we
introduce some additional vocabulary aux to refer to the different nodes of the parse
tree on which this process operates  we then use this additional vocabulary to transform
an fo formula into an equivalence normal form formula  this is similar to the tseitin
transformation        for propositional logic 
definition      en f      for an fo formula  in negation normal form  we introduce
a new predicate symbol a of arity n for each non literal subformula  x  of  with n
  

fivlaeminck  vennekens  denecker   bruynooghe

free variables  we denote the set of these new predicates by aux    each of these new
predicate symbols is defined by a formula eq a   as follows  to make notation simpler
we assume that each             n is a non literal subformula  the definitions are analogous
whenever a i is a literal  but instead of ai the literal i itself is used in the body of the
definition 
 if  x  is a subformula of the form    x        x            n  xn    then eq a   is
x  a  x   a   x     a   x            an  xn    
 if  x  is a subformula of the form    x        x            n  xn    then eq a   is
x  a  x   a   x     a   x            an  xn    
 if  x  is a subformula of the form y    x  y   then eq a   equals x  a  x  
y a   x  y   
 if  x  is a subformula of the form y    x  y   then eq a   equals x  a  x  
y a   x  y   
we define the equivalence normal form of  as the set of all such eq a    and denote
it as en f    
example      according to this definition  the en f    theory from example     is 
a   t a   t  
t a   t   clean t       a   t  
t a   t   clean t   w ipe t  
this is illustrated in the right side of figure   
using the auxiliary vocabulary  we can now write down the propagations shown in
figure   as the following implications 
a 
a       clean   
a     
a     






a      
a      
clean    
w ipe    

note that these rules are all top down rules  that is  implications that propagate information
about a subformula down the parse tree  to a component of that subformula  possibly
using also information about other components of the subformula  as in the implication
a     clean     a        in general  also bottom up propagations are of course possible 
for instance  from clean    we could derive a       for every predicate a   we can derive
from eq a   a set of implications        such that each such propagation corresponds
to deriving the consequent   from the antecedent    so  different implications can be
logically equivalent   this is defined in table    the last column of this table indicates
whether the rule is top down  td  or bottom up  bu  
definition      in f      given an equivalence   en f    for a certain formula   we
denote with imp   the set of all implications obtained through table   
s we define the implication normal form of   denoted by in f     as follows  in f      en f    imp   
  

fian approximative inference method for so

   eq a  

imp  

x  l  l          ln   

x
x
x
x

 l          ln  l  
 li  l  
 l  li   
 l  l          li   li           ln  li   

 in
 in
 in

bu
bu
td
td

x  l  l          ln   

x
x
x
x

 l          ln  l  
 li  l  
 in
 l  li   
 in
 l  l          li   li           ln  li       i  n

bu
bu
td
td

x  l x   y l   x  y   

x   y l   x  y    l x   
x y l   x  y    l x   
xy  l x   l   x  y   
xy   l x   z  y    z  l   x  y  y z     l   x  y   

bu
bu
td
td

x  l x   y l   x  y   

x   y l   x  y    l x   
x y l   x  y    l x   
xy  l x   l   x  y   
xy   l x   z  y    z  l   x  y  y z     l   x  y   

bu
bu
td
td

table    from enf to inf

in the work of wittocx et al         it is proven that models of  and models of in f   
where a is true correspond  in the sense that the restriction of a model of in f     a
to  is also a model of   and vice versa  every model of  can be extended to a model
of in f     a   these implications will form the core of our approximation method 
while our approximation could be made more complete by adding more implications to
in f     the above definition tries to strike a balance between completeness and the ease
of automatically deriving the implications 
example      for each of the three formulas  in en f    in example      the following
table shows the corresponding set of implications imp    the complete theory in f   
consists of the union of these three sets 
a   t a   t  
 t a   t    a   
 t a   t    a   
t  a   a   t   
t   a   t   t    t 
 a   t       a   t   

t  a   t   clean t       a   t   
t  clean t       a   t   a   t   
t  clean t       a   t   
t  a   t   a   t   
t  a   t   clean t       
t  a   t   a   t   
t  a   t   a   t   clean t       
t  a   t   clean t       a   t   

t  a   t    clean t   w ipe t    
t  clean t   w ipe t   a   t   
t  clean t   a   t   
t  w ipe t   a   t   
t  a   t   clean t   
t  a   t   w ipe t   
t  a   t   w ipe t   clean t   
t  a   t   clean t   w ipe t   

the reader can verify that the four implications representing the propagation in example    
all indeed belong to in f    
the propagation process in example     can now be described as a least fixpointcomputation  where we apply the implications  i e   infer the head when the body is
already inferred   until we no longer can infer any new information  we will represent this
fixpoint computation as an inductive definition in the syntax of fo id   however  there are
two complications 
  

fivlaeminck  vennekens  denecker   bruynooghe

first  in this paper  we do not always need all of the implications in in f     indeed 
there will typically be some subset    of symbols about which we already know all there
is to know  in the conformant planning example  for instance  this will be the case for the
existentially quantified predicate w ipe    simply because we will use a model expansion
system to guess a complete interpretation for this predicate  the job of the propagation
process is then to figure out the consequences of each particular guess  for this  the implications with a predicate from   i e   w ipe    in their head are obviously not needed 
second  the fixpoint computation not only needs to infer that atoms are true but also
that they are false  however  the syntax of fo id  does not allow negative literals in the
heads of rules  therefore  our definition will not contain rules with the predicates p of the
original vocabulary  in their head  but will instead use predicates p ct and p cf from the
tf  vocabulary  since we do not need rules with the fully known predicates  in the head 
we will only introduce these p ct and p cf predicates for those p that are in      for a
ct
ct
given formula   we therefore define ct
 as the formula   see definition      but with p
cf
replaced by p and p by p for every predicate p   
definition      approx      for a formula  and     we define approx    as the
inductive definition that contains  for every sentence x    l x   of in f    in which l
ct
is a literal of a predicate not in   the definitional rule x l x ct
      we also define
td
approxbu
     and approx     in the same way as approx     but only containing
definitional rules coming from the bottom up  respectively  top down  rules of in f    
we can often assume without loss of generality that      whenever this is the case
we drop the  and use approx   rather than approx     to denote the approximative
definition 
example      using the implications in f    of example      we obtain the definition
shown in figure   for approx    if we take     w ipe   we get the same definition for
approx    as in figure    apart from the last seven definitional rules that are replaced by
the following five definitional rules 


  




 






ct
cf


a
 t 

clean
 t 

w
ipe t  


 


 cf

ct
a   t 
 clean  t  


 w ipe t  
 acf

   t 




cf
ct




clean
 t 

a
 t  
 






cf
ct
clean  t   a   t   w ipe t  
in contrast with approx   this definition no longer approximates the predicate w ipe  the
definition approx    can be used to find out what certainly holds or not holds given a two
valued interpretation for the predicates in  
example      for a larger example  we look again at the example      let us again take
   act and     w ipe   then the definition approx    can be found in the appendix
a 
this approximative definition has some useful properties  which we formulate in the
next two theorems  the first property is that  when using the approximative definition
  

fian approximative inference method for so

 ct
a 



cf


a
 


ct


a   t 




acf

   t 







acf

   t 


ct

a

    t 

ct


a   t 



cleancf  t     


 cf
a   t 
cleanct  t     




act

   t 







act

   t 


cf

a

   t 


cf


a
   t 


cf


clean
 t 


cf


w
ipe
 t 




cleanct  t 



w ipect  t 


 t act

   t  




 t acf
 t  
 


ct


 a   


cf
 
 
ct  

 a   t  t    t  a   t    







cf
cf
 clean  t       a   t   



ct

 clean  t      



ct

 a   t  



cf


 a   t  



cf
 a   t  
cf

 act
   t   a   t  


ct


 a   t   cleancf  t      






cf
cf

 clean  t   w ipe  t   




 cleanct  t  





 w ipect  t  




 act
 t  
 




 act
 t  
 


cf

cf

 a   t   w ipe  t  



cf
cf
 a   t   clean  t  

a 
t
a   t 


a   t 

clean t     



clean t 

w ipe t 

figure    example of an approximative definition
together with an encoding of a three valued interpretation i of the original vocabulary  we
can give an exact characterization of what the approximative definition computes  indeed 
in this setting  approxbu    actually encodes the three valued kleene evaluation of  in
i  moreover  adding the top down rules does not change this  since they will not compute
actually anything  as long as only information about the original vocabulary is provided
as input  before we can formally state this property  we need to define how we encode a
four valued interpretation as a definition  from here on  we assume that for any vocabulary
 and  pre interpretation i   contains a constant symbol cd for every domain element
d in the domain d of i  and that for the pre interpretation i it holds that  cd  i   d  this
allows us to identify cd and d and therefore  abusing notation  we will use d to denote cd
in what follows 
definition      i    given a four valued  interpretation i  the definition associated to
i is denoted by i and is defined by
i

 

  t   p i  d 
 p t 
 p ct  d 
cf
i


  p  d   t   p  d  p f  

theorem      given a  formula  and a four valued  interpretation i  the following
holds 
a  in the case that i is three valued it holds that approx    i is logically equivalent
to approxbu     i   that is  m od approx    i     m od approxbu     i  
  

fivlaeminck  vennekens  denecker   bruynooghe

b  let m be m od approx    i    v  the truth value of act
 in m and v  be the truth
i
value of acf
 in m   then  v    v    corresponds to the four valued truth value    i e  
 i     v    v    

proof  see appendix b 
in summary  what this theorem says is that  first of all  the approximation always
computes the four valued belnap evaluation of  in the four valued structure i  moreover 
this computation is done by the bottom up rules of the approximation alone  if i is threevalued  then the top down rules actually have no effect at all  if i is four valued  then
they may still serve a purpose  however  once the bottom up rules have derived that some
subformula is inconsistent  they can then propagate this information to derive that smaller
formulas are also inconsistent  to see this  consider the following formula p  q  and take
for i the four valued interpretation such that p   i and q   t  then one can verify that
cf
the bottom up rules in approx    i will infer that both act
p q and ap q are true 
however  now the top down rules can also infer that qcf has to be true 
in the theorem above the only information we add to the approximative definition is in
the form of the definition i   i e   we only assert the truth  resp  falsity of domain atoms 
the following definition now allows us to assert the truth or the falsity of any grounded

subformula  d  
definition          given a  formula   a  pre interpretation i  and a set  of
 such that  x  is a subformula of  of arity n and d  dn where d is the
formulas    d  
domain of i  we then define  as follows 
cf 



    act
  d   t    d       a  d   t    d     

if we assert in this way the truth  or the falsity  of a set of grounded subformulas  
then we will obtain an approximation of everything that holds  respectively  does not hold 
in all models of   however  as opposed to the theorem above  the next theorem does not
give an exact characterization of the approximation we get 
theorem      given a  formula   a set  as defined above and a subformula    x    of
cf  
   
 
  let m be m od approx        if m    act
   d    resp  a   d     then       d  
 resp         d     
note that an interesting special case of this theorem is where we take  equal to    and
thus add act
  t to approx    then this definition gives an approximation of everything
that is certainly true resp  certainly false in all models of  
returning now to the exact relationship between the work of wittocx et al         and
the content of this section  we see that wittocx et al  are only interested in this special
case  i e   in approximating all models of a theory  for this reason their transformation
from a formula  to en f    already includes a formula a  t  which will cause the rule
act
  t to always be included in the approximating definition  all their soundness results
have also been formulated and proven in this setting  however  it is not difficult to see that
the proofs can be trivially adapted to a proof of theorem     in the more general setting
used in this section 
  

fian approximative inference method for so

   approximating so satisfiability problems
we now use the approximate definition from the previous section to approximate the following problem  take an so formula f   p q     for ease of presentation  we
assume that the second order formulas in this paper contain no free predicate symbols  but
all results generalize to the setting where there are free predicate symbols  we also assume
that q contains only predicate symbols  in what follows  we denote the vocabulary of 
by   the question we want to answer is whether the formula f is satisfied in a given
finite domain pre interpretation i of the constant and function symbols of the formula 
this satisfiability problem boils down to deciding whether we can find a witness for the
satisfiability of this formula  in the following sense 
definition      witness   we call j a witness for the satisfiability of a formula p q   
given a finite  pre interpretation i  if j is an interpretation of    q extending i  i e   j
is an interpretation of the whole vocabulary without the universally quantified predicates 
such that q    is satisfied in j  equivalently  j is a witness if in the three valued  it holds that
interpretation j that expands j by assigning u to each domain atom q d  
svj      t 
our goal in this section is now to approximate an so satisfiability problems by an
so satisfiability problem in the following sense 
definition      sound approximation   consider the so satisfiability problem for a
formula p q     where  is an fo formula in alphabet   an so id  formula of
the form p r        where    is an fo id  formula in the alphabet    q  r  is a sound
approximation of this satisfiability problem if  whenever j is a witness for the satisfiability
of p r        then j  q is a witness for the satisfiability of p q    
in other words  a sound approximation g of the satisfiability problem for an so
formula f is a stronger so id  formula  i e   one that has fewer witnesses for p  
    a naive method
we can now use the results of theorem     to construct a sound approximation for a given
so formula 
definition      app f     given a formula f   p q     take  to be the alphabet
of all function symbols in  and the predicates p   we define app f   as the so formula
tf
p r   approx     act
 in the vocabulary   r  where r    q  aux     
the intuition here is that for any  interpretation i  approx    will give the result
of the four valued evaluation  i in the  interpretation i that expands i by assigning unknown to all universally quantified predicates q  if the entire fo formula  evaluates to
true in this four valued interpretation  we know that  will be satisfied in any  interpretation that expands i  in other words  for every interpretation of the q predicates   and thus
that i is a witness for the satisfiability of the entire formula f   the auxiliary predicates
aux    introduced by the transformation to enf  are needed because of the way in
which the propagation works  but their value is completely determined by that of p  
  

fivlaeminck  vennekens  denecker   bruynooghe

proposition      for each so formula f of the form p q     it holds that app f  
is a sound approximation of f  
proof  this follows immediately from theorem      where we take as three valued inter i   u for all q  q and d  dn   and
pretation  the interpretation i such that  q d  
 i    p  d  
 i for all p  p and d  dn   with d the domain of i 
 p  d  
for example  if we take f to be the formula p q    where    p  q  then app f  
becomes 
 ct

ct
a

p

q






 acf  p  qcf 

cf
ct
cf
ct

p  q   q   a   a  
 act
 
ct  act  p
q







 cf

q  acf

we start from an interpretation o of the open predicate p of the definition approx p      
let us take the interpretation o that makes p true  the unique model i of the definition
ct
cf and
that extends o is then the interpretation that assigns true to act
 and false to q   q
ct
acf
   therefore  this i satisfies both approx p      and a   hence  it is a witness for the
satisfiability of app f    and  indeed  it is also a witness for the satisfiability of the original
formula p q   p  q 
this approximation method is sound  but for many applications still too incomplete 
indeed  let us look at the following formula  f   q   q  q  then app f   becomes 



 qct  qcf 
act






cf
cf  qct 


a

q






 qct  act  qct 

cf

 
 
a
qct   qcf   act
 act

 
cf  acf



q






cf 


qcf  act


 q




 qct  acf



the definition does not entail that act
   so app f   is unsatisfiable  even though the original formula f is clearly always satisfied  the problem here is that  as we showed in the
previous section  the definition encodes the three valued kleene evaluation  which is not
strong enough to find out that the formula f is satisfied  to do this  we need the stronger
supervaluation 
recall that in the preliminaries we saw that supervaluation and kleene evaluation are
in general not equal  however  for some formulas  they are equal  in the literature  several
classes of formulas for which they agree have been proposed  e g   in the context of locally
closed databases  denecker et al          or in the context of reasoning with incomplete
first order knowledge  liu   levesque         the latter introduces a normal form n f for
first order formulas  for which the supervaluation coincides with the kleene evaluation  and
proves for certain classes of formulas that they are in the normal form n f  one such class
is that of all cnf formulas in which every two literals are conflict free  a pair of literals
is conflict free if they either have the same polarity  or they use different predicates  or
they use different constants at some argument position  it immediately follows that our
  

fian approximative inference method for so

approximation is complete for so formulas in which the first order formula satisfies this
condition 
proposition      each so formula f of the form p q     where  is in the n f
normal form  according to liu   levesque        is satisfiable with respect to a given finite
pre interpretation i if and only if the so formula app f   is satisfiable w r t  i 
proof  this follows immediately from the results by liu and levesque and theorem     
    a more complete method
unfortunately  many applications give rise to formulas in which the first order part falls
outside the class n f  which means that completeness of our method is not guaranteed 
particularly troublesome in practice are formulas of the common form p q         
for such formulas  the naive approximation method of the previous section tries to find
interpretations for p such that the implication            holds for all q  however  if
we look at the details of the approximative definitions  we find that act
 is defined by a rule
cf
ct
with a body        in other words  the approximation will only derive that  holds for
all q if it is either the case that   is false for all q or that   is true for all q  however 
this will rarely be the case  in most practical applications  the witnesses of interest will
typically satisfy the implication      not because they always falsify   or always
satisfy     but rather because each interpretation for q that satisfies   also satisfies   
for instance  in the conformant planning example  there will always be interpretations for
the fluents that do not satisfy the action theory act   because they arbitrarily assign some
fluent a value that is wrong for its initial value and the actions that are performed  even if
a set of actions is a completely correct conformant plan  it therefore cannot make the goal
certainly true  because it will still be unsatisfied in some of these wrong interpretations of
the fluents  of course  this should not bother a good method for finding conformant plans 
the only thing that should matter is that the goal is satisfied in those interpretations of
the fluents that do satisfy the action theory 
luckily  our approximation method can also be used to discover this kind of witnesses 
the only thing that is required is to add to the approximative definition    approx   
a rule act
   t  by doing do  we seed our approximation with the assumption that  
holds  starting from this assumption  the top down rules will then derive properties of
the predicates q that are shared by all interpretations for q that actually satisfy     the
bottom up rules will then propagate this information upwards and discover whether these
properties suffice to ensure that   also holds  if they do  then we know that   indeed
must hold in every interpretation for q that satisfies   and that we therefore have found
a witness for our formula 
if we want to find both witnesses of this kind and degenerate witnesses that either make
  false for all q or   true for all q  we could simply combine our new method with the old
ct
ct
one and check either whether act
  holds according to    a   t  or whether a holds
according to just  itself  however  it turns out that this is not necessary  we can achieve
ct
the same effect by just checking whether    act
   t  implies a   this is because  first 
ct
the definition    act
   t  will be able to derive a whenever  itself can  if  can
ct
ct
derive that a  then    a   t  will obviously still be able to do so  if  would be
  

fivlaeminck  vennekens  denecker   bruynooghe

ct
able to derive that acf
    then    a   t  will also be able to do so  simply because
our approximation has no flow of information between the ct and cf variants of the same
formula  so the additional assumption that act
  holds will not change the original derivation
ct
ct
ct
of acf
    second  if    a   t  can derive a    then it also derives a   simply because
cf
ct
it contains the rule act
  a   a    therefore  we can find both kinds of witnesses by
ct
checking whether act
 is implied by the single definition    a   t  

definition      app   f     for an so formula f   p q     where  is of the
 is the definition
form        we define app   f   as p r     act
   where 
ct
approx           a   t  
note that we obtain definition     as a special case when taking the trivial formula t
for     this approximation method is still sound  as the following proposition states 
proposition      given a formula f of the form p q     where           the
so id  formula app   f   is a sound approximation of f  
proof  see appendix c 
since the approximative definition  in app   f   contains all the rules of approx f   
it is not hard to see that this new approximation method is at least as complete as the one
using app f    definition       moreover  as can be seen from the following example  it is
also strictly more complete 
example      let us consider the following formula f   p q    q  p    q  we have
that p   t is clearly a witness for this satisfiability problem  if we denote  q  p    q
by   and  q  p   by     then app f   is the following so formula 

act

 


cf


a



 ct 
a 
p r  

acf
 



ct

q


 cf
q








ct
acf
   q
ct
a   qcf
p  qct
p  qcf
act
   p
acf
 











 act
   










now  even for p   t  the definition in the body of this formula will not entail act
    t 

therefore  app f   is not satisfiable  on the other hand  app  f   is the same formula
as above  apart from that the definition contains one more rule  that is  the rule act
   t 
it is easy to verify that app   f   is satisfiable  and indeed has p   t as a witness 
obviously  the new method is still complete on formulas        where     
satisfies the normal form n f  however  our method also works for many formulas outside
this class  unfortunately  it is difficult to characterize precisely how much more complete the
new method is  for instance  one source of loss in completeness comes from the fact that our
current translation to enf cannot recognize multiple occurrences of the same subformula 
and will introduce a different tseitin predicate for each occurrence  even though we cannot
  

fian approximative inference method for so

guarantee completeness for our method in general  we always found all solutions in the
conformant planning benchmarks we considered in section   
a final remark about this method is that the approximative definition approx    
    contains a number of rules that are superfluous in our context  indeed  with our method 
this definition takes as its input an interpretation for p together with the assumption that
  is certainly true  it then uses the bottom up and top down rules derived from   to
compute the effect of these inputs on the predicates q  finally  the rules derived from  
then compute whether the derived information about q suffices to make   certainly true 
however  as we know from theorem      only the bottom up rules for   are needed for
this  therefore  the top down rules for   actually contribute nothing and could just as

td
well be removed  adapting definition     to use 
bu      approx      instead of

 leads to the following definition 
definition      app 
bu  f     for an so formula f   p q     where  is of the
ct

form        we define app 
bu  f   as p r   bu  a   where
td
ct

bu   approx           approx        a   t  

it follows directly from theorem     and proposition     that this too is a sound approximation  having removed the top down rules from the approximation of     the remaining
rules just serve  as we already know  to compute the kleene evaluation of     they do
this by computing the kleene evaluation of each subformula  of     for which they use
pt
the tseitin predicates act
 and a   an alternative is to avoid these tseitin predicates by
defining act
  directly by the single rule 
ct
act
       

this variant is summarized in the following definition 
definition      app 
bu u nf  f     for an so formula f   p q     where  is
ct

       we define app 
bu u nf  f   as p r   bu u nf  a   where
ct
ct
ct

bu u nf   approx      approx        a            a   t  

this approximation is actually equivalent to that of def       this follows from the
fact that all bottom up rules for   are positive and non recursive  which allows us to
eliminate the tseitin predicates introduced for the parse tree of   by applying the unfolding
procedure from tamaki and sato         by iteratively applying this equivalence preserving
procedure  we can reduce all the rules that were generated to approximate   to just the
ct
single rule act
         

   approximating so id  satisfiability problems
inductive definitions are important for knowledge representation  as argued by denecker
and ternovska         inductive definitions are not only used to represent mathematical
concepts  but also the sort of common sense knowledge that is often represented by logic
programs  such as dynamic domains  the closed world assumption  defaults  causality  etc 
  

fivlaeminck  vennekens  denecker   bruynooghe

therefore  inductive definitions can make the task of representing a problem in logic considerably easier  an example of this is the use of inductively defined situation calculus for
reasoning about actions  denecker   ternovska         recall that in the introduction we
showed how to represent tact from example     as an inductive definition act  


 clean t       clean t  

clean t       w ipe t  
 


clean   
 initiallyclean 
the associated conformant planning problem can then be expressed as an so id  satisfiability problem 
w ipe clean  initiallyclean   act  clean n  
as we will show in more detail in section    a general conformant planning problem can
be seen as a satisfiability problem of the form
 f    act  init     prec  goal   
ai
where the predicates a represent the actions  i the initial fluents and f the other fluents 
the definition act defines how the fluents change in terms of the action  init is a first
order formula about the initial situation  prec describes the preconditions of the actions
and goal the goal  this motivates the extension of our approximation method to formulas
including definitions  however  we do not analyze the general case where definitions may
appear at arbitrary locations in a formula  but instead restrict attention to formulas of the
form
p q              
where  is a definition such that def     q and   and   are fo formulas  even
though these restrictions are not strictly necessary  they allow us to keep the technical
details relatively simple  in particular  we avoid the need for approximation rules that infer
that a definition as a whole is certainly true false   while still covering the way in which
definitions are typically used  under the assumption that all predicates indeed are what the
definition  and the formula   say they should be    then states what properties they
should satisfy 
to extend our approximative method to           satisfiability problems  we
need a syntactic representation  i e   an approximative definition  that describes sound
inferences that can be made from the definition in a three valued context  in this section
we propose two ways to obtain such an approximative definition  and accordingly  two ways
to approximate           satisfiability problems  before we can continue  we first
need to recall some more preliminaries 
    preliminaries on the well founded semantics for inductive definitions
earlier  we defined the model of a positive inductive definition given a two valued interpretation for the open predicates  from here on  the inductive definitions are no longer only
positive definitions  so the model of a definition can no longer always be computed as the
least fixpoint of the immediate consequence operator introduced in section    moreover 
  

fian approximative inference method for so

in what follows we want to use inductive definitions together with four valued information
about the open predicates  for example  information obtained through propagation on a
first order theory   therefore  we now recall  see  e g   denecker   ternovska        how to
define the well founded model of a non monotone inductive definition   that is  negation
in the body of rules is allowed   given some four valued information o about its open predicates  which we denote by w f mo     in order to do this  we first need to define some
additional concepts  recall that p denotes the body of the unique rule with predicate p
in the head 
definition      operator to    for a definition  and a given  potentially   valued 
open   interpretation o  we define the operator to on   valued def    interpretations
with the same domain as open   such that to  i    j iff for each defined predicate p n
and n tuple d  dn   it holds that
   o i  d 

p j  d 
p
recall that in the preliminaries we defined the isomorphism  that maps a pair of
interpretations  i  j  to the corresponding four valued interpretation i 
definition      w f mo      we define the well founded model of  in o as the   valued
o 
interpretation   i  j  such that  i  j  is the maximal oscillation pair of the operator st
o
o
where st is the operator j lf p k t  k  j       i e    i  j  is the least precise pair of
  valued interpretations such that
o
o
i   st
 j  and j   st
 i  

some explanation is in order  first look at the operator k to  k  j      this operator takes a def    structure k  turns it into a   valued one by combining it with j 
applies the operator to   and projects the result on its first argument  we can see that
k to  k  j       l iff for each defined predicate p n and n tuple d  dn   it holds that
   t iff  p  d  
   o   l  o   j    t
p l  d 
in other words  positive occurrences of atoms are evaluated in o    l  negative occurrences
in o    j  for each j  this operator k to  k  j     is monotone  and therefore has a
o now maps j to this least fixpoint  it can be proven that
least fixpoint  the operator st
this operator is antimonotone  and therefore has a maximal oscillation pair  the definition
o is a nonof the well founded model as the maximal oscillation pair of the operator st
constructive definition  this maximal oscillation pair can be constructed by iterating the
following operator  starting from the least precise interpretation i that extends o  until it
reaches its least fixpoint 
o
definition      stable operator st o
    we define the operator st  on pairs of interpretations as 
o
o
st o
  i  j     st  j   st  i   

the stable operator is monotone w r t  the precision order p on pairs of interpretations
and its fixpoints therefore form a complete lattice  the fixpoints of this operator are called
  

fivlaeminck  vennekens  denecker   bruynooghe

the four valued stable fixpoints of   and the least precise of these fixpoints is precisely the
well founded model of  given o 
we can now define the semantics of inductive definitions in the general case  the
reader can easily verify that this indeed generalizes the definition of m odo    for positive
definitions we gave in section     
definition      satisfaction relation for definitions   i     iff  i def      i def      is the
well founded model of  in i open    
note that when the definition  has a three valued well founded model for every possible
interpretation of the open predicates open    the definition has no model  i e  there
does not exists an interpretation i such that i       we call a definition total if it has
a two valued well founded model for every possible two valued interpretation of its open
predicates 
the above definitions generalize in a rather obvious way the standard well founded
semantics of propositional logic programs and are strongly linked to the stable semantics  gelfond   lifschitz         in the case of a propositional logic program   where
open         the operator k t  k  j     is nothing else than the immediate consequence operator tj of the gelfond lifschitz reduct j of   and the operator that maps
j to lf p k t  k  j     is the stable operator of   as shown by van gelder         its
maximal oscillation pair is indeed the well founded model of  
    approximating so id  satisfiability problems
assume we have a formula   where  is an fo id  formula instead of an fo  the
concepts of witness  definition      and sound approximation  definition      can straightforwardly be generalised for  being a fo id  formula  this allows us to develop two
approaches  the first one  in section        replaces the definition by its completion and
then applies the method of section    however  the completion can be weaker than the
definition  therefore  in section        we develop another approach that constructs an
approximation for the conjunction of a definition with a fo formula 
      using the completion of a definition
our first approach is based on the use of the completion  clark         the completion
of a definition  is the conjunction of the equivalences x p  x   p  x  for all predicates
p  def     where p  x  is the body of the unique rule with p in its head  a useful
property is that each definition  implies its completion compl    moreover  if  is nonrecursive  then the two are actually equivalent  replacing the definition by its completion
in           we obtain the formula  comp             as every model of  is
a model of comp    every model of  comp           is a model of          
and every witness of the   compl           satisfiability problem is a witness of the
           satisfiability problem  hence we can use the results of section   and
formulate the following proposition 
proposition      the formula app 
bu   compl             is a sound approximation
of p q           
   

fian approximative inference method for so

the disadvantage of using the completion is that no matter how complete the approximation method defined in definition     is  it will never be able to infer something that
follows from  but not from compl    for instance  the inductive definition  p  p  
entails p   but its completion p  p does not 
denecker and ternovska        have proven that  in addition to non recursive definitions  a class of recursive definitions are equivalent to their completion  in particular  this
is the case for definitions over a strict well founded order     we can therefore replace
those definitions by their completion without losing precision  the theory tact in example
    is actually the completion of the definition act   since act is a recursive definition
over a strict well founded order  we can make use of the time argument in the predicates
to construct such a well founded order   act and tact are equivalent 
the gaspipe conformant planning problem  son et al          on the other hand  uses
a dynamic domain for which the completion does not suffice  summarized  the objective
of this conformant planning problem is to start a flame in a burner which is connected to
a gas tank through a pipe line  the pipe line consists of sections connected to each other
with valves  when a valve is opened with gas on one side and not on the other  the gas
will spread as far as possible  this can be formalized by an inductive definition of the
reachability relation on the pipe line 
 
 
x  t gas x  t   y gas y  t   v connected x  y  v   open v  t  
x  t gas x  t   t ank x  
such reachability definitions are not equivalent to their completion  therefore  the approximative method presented in this subsection will not work  the problem with the completion
in this case is that it does not correctly minimize the defined predicates in the presence of
recursion  which would allow models in which a loop in the pipe line is filled with gas even
when it is not connected to a tank  what is missing  therefore  is the unfounded set reasoning that allows the well founded semantics to correctly minimize the defined predicates 
      using a certainly true possibly true approximation
the approximative definition approx    used in section   has the nice property that it
defines  for each subformula of   including  itself   whether it is certainly true or certainly
false  it was this property that allowed us to find witnesses by simply asserting that act

had to hold according to this definition  if we want to apply the same method to formulas
 that contain a definition   we have to construct an approximative definition that defines
whether each of the subformulas of   including  itself  is certainly true or certainly
false  in section        our naive method managed to do this by simply replacing  by its
completion  we now want to improve on this method by constructing an approximation that
also takes into account the unfounded set reasoning that is performed by the well founded
semantics 
once we also take this aspect of the well founded semantics into account  however 
it becomes difficult to define when a definition as a whole is certainly true or certainly
false  luckily  this is not needed if we stick to our assumption that definitions appear only
in the antecedent of the implication   indeed  because we approximate implications by
   an order   is well founded if there are no infinite descending chains         xn   xn            x 

   

fivlaeminck  vennekens  denecker   bruynooghe

assuming that their antecedent is certainly true  definition       all that we really need
is an approximation of the consequences of a definition  to this end  we will transform
the original definition  into an approximative definition   such that the well founded
model of     given an approximation o of the open predicates of   approximates each
of the well founded models of  given an interpretation o for the open predicates that is
approximated by o  in other words  we construct an approximative definition   whose
two valued well founded model encodes the potentially four valued well founded model of
the original definition   given a potentially four valued interpretation for the predicates of
  we therefore again represent a four valued interpretation of the orginal vocabulary  of
 by a two valued interpretation of a larger vocabulary     however  instead of introducing 
for each predicate p of   a predicate p ct  p is certainly true  and p cf  p is certainly false  
as we did before  we now introduce predicates p ct and p pt  p is possibly true  i e   p is not
certainly false   let ct pt denote this vocabulary f   p ct   p      p pt   p     for
a four valued  interpretation i  we define the corresponding ct pt  interpretation i ct pt
ct pt
as the interpretation with the same pre interpretation as i such that  p ct  i
   d  
ct pt
i
pt
i
i



p  d  p t  and  p  
   d    p  d  p t   
also  for a  formula   we define the formula ct pt as the formula that we obtain after
replacing all positive occurrences of a predicate p in  by p ct   and all negative occurrences
by p pt   and finally reducing to negational normal form  it is easy to see that ct pt can also
be obtained from ct by replacing  for every predicate p   all occurrences of p cf by p pt  
unlike ct   ct pt is not always a positive formula as it can contain negations  in particular 
p ct occurs only positively while p pt occurs only negatively  for a subvocabulary    
ct pt

again denotes ct pt but with both p ct and p pt replaced by p for every predicate
p    again  in what follows we will use  to denote predicates that do not need to be
approximated because we have two valued information about them 
ct pt

ct pt

definition      app      for a definition   we define app
 rct  rpt   where rct consists of the rules

   as the definition

x p ct  x   ct pt
 

and rpt consists of the rules
x p pt  x     ct pt
 

for every definitional rule x  p  x     in  
we again assume for the rest of this paragraph without loss of generality that  is empty 
ct pt
and we drop it in the notation of app  
example      consider the following inductive definition 


b  b  a
a  d
assume        then

appct pt

 ct
b


 ct
a
 
pt
b


 pt
a





   

b ct  apt
dpt
b pt  act
dct









 

fian approximative inference method for so

we see that for a three valued interpretation  d   u   which translates to  dct   f   dpt  
t   the approximative definition will correctly infer that b ct is false and b pt is true  if we
take  d   f   as an interpretation for the open predicate d  we see that the approximative
definition correctly infers that both b ct and b pt are false  this is an example of unfounded
set reasoning  once a is known to be true  the approximation detects that b could only be
derived from b itself and therefore must be false  this kind of reasoning could not be done
by our previous  completion based approximation method  since it is only sound w r t  the
semantics of the definition itself  and not w r t  its weaker completion 
this example also demonstrates why we have to use the vocabulary ct pt instead of
ct cf   since the latter would have yielded a definition 
 ct

b
 b ct  acf 



 ct

a
 dcf
 
b cf  b cf  act 



 cf

a
 dct
for  d   f    this definition would fail to infer b cf   intuitively  the reason for this is that
the unfounded set reasoning of the well founded semantics tries to minimize the extension
of the defined predicates by making as many atoms false as possible  using the ct cf
vocabulary  the well founded semantics of the approximating definition therefore attempts
 as possible  which actually corresponds to maximizing the
to falsify as many atoms p cf  d 
possible extension of the original predicates p   instead of minimizing it as the well founded
semantics of the original definition does 
each two valued interpretation of the double vocabulary ct pt corresponds to a fourvalued interpretation of the original vocabulary   we again want to establish a link
ct pt
between the well founded model of the original definition  and that of app   a complict pt
cating factor here is that  as the above example shows  the definition app
is no longer
monotone and therefore it is no longer guaranteed to have a two valued well founded model 
because a three valued interpretation of ct pt no longer corresponds to even a four valued
interpretation of the original vocabulary   we can only prove such a correspondence if the
ct pt
well founded model of app
is two valued 
theorem      let o be a four valued interpretation for the open predicates of a definition
  appct pt    has a two valued well founded model given oct pt if and only if  has a
unique four valued stable fixpoint given o  moreover  if appct pt    has a two valued wellfounded model i  then the unique four valued stable fixpoint of  is the unique interpretation
i for which i ct pt   i 
proof  see appendix d 
this theorem requires that  has a unique four valued stable model for each four valued
input interpretation o  this is a stronger requirement than the more common condition of
totality  which only requires a definition to have a two valued well founded model given a
two valued input interpretation o  as the following example shows  this stronger condition
is indeed necessary 
   

fivlaeminck  vennekens  denecker   bruynooghe

example      consider the following definition 




 a  b 

b  a  c 




c  o  o 
this definition is total  because  for each two valued interpretation for the open predicate
o  it has   a    a   as its two valued well founded model  however  for the three valued
interpretation       o    i e   o is unknown  for the open predicate o  the three valued
well founded model       o  a  b  c   is not the unique three valued stable fixpoint  since
  a    o  a  c   is also such a fixpoint  and indeed  we find that
 ct
a





b ct



 c ct
ct pt
app
    

apt



 b pt



 pt
c

 b pt  






 apt  c ct   


ct
pt 
 o  o  

 b ct  



ct
pt 
 a  c   


pt
ct 
 o  o  

does not have a two valued well founded model given  opt    the easiest way to see this is
to fill in the fact that we know that opt is t and oct is f and propagate this information 
 ct

a  b pt  






ct
pt
ct



b  a  c  






 c ct  f  t 



apt  b ct  








pt
ct
pt


b

a

c
 




 pt

c  t  f  

 ct

a  b pt  






ct
pt



b  a  f  









 ct

a  b pt  


















 ct

a  b pt  




















apt  b ct  








pt
ct


b

a

t 




 pt

c 


apt  f   







pt
ct 


b

a
 




 pt

c 



apt 








pt
ct


b

a
 




 pt

c 

so  we are left with a loop over negation  which means that act and b pt will remain unknown
in the three valued well founded model   apt   c pt     act   apt   c pt   b pt    of the definition 
by computing the three valued well founded model of  given o  the approximative definition appct pt    can produce more precise results than the approximation of compl   
in particular it can detect that atoms in an unfounded set must be false  as illustrated in
example     above  to use appct pt    in an approximation of an        problem 
we still need to show how it can be combined with the approximation approx    of  to
produce a sound approximation of     to do this  we need to combine one definition of
ct cf predicates with another definition of ct pt predicates  we achieve this by first merging
the two definitions and then adding rules that copy information from the one vocabulary
to the other 
   

fian approximative inference method for so

definition      d    given a vocabulary   a subvocabulary     an inductive
definition  and first order formula   we define d as the following inductive definition 
ct pt

app

 ocf

  

approx      act
  t 

 opt  ocf   for every predicate o  open      

 p cf  p pt   for every predicate p  def       

ct
 f   o  f   for every predicate o  open      that does not occur in  

this definition indeed contains both the rules from the approximation of  and the rules
from the approximation of   that is  appct pt    and approx     act
  t   respectively 
but also a number of extra rules that make a connection between these two approximations 
to approximate a defined predicate q the approximation of  uses the pair of predicates
qct and qpt while the approximation of  uses qct and qcf   hence  a number of extra
rules are needed to transfer information between the predicates qpt and qcf   the rules
 opt  ocf   transfer information that the approximation of  has derived about the
truth of an open predicate o  by means of ocf   to the corresponding predicate opt of the
approximation of the definition  the rules  p cf  p pt   in turn propagate information
derived about the truth of a defined predicate in the approximation of the definition to the
corresponding predicate p cf of the approximation of   finally  the rules  ocf  f   oct 
f   make sure that ocf and oct are defined atoms  instead of open ones  and that their
default value is u  the following proposition relates the well founded model of d with
the models of    
proposition      given a vocabulary   a subvocabulary  and an fo id  formula    
  resp  p cf  d   
 then it holds
then  for every  interpretation i  if w f mi  d      p ct  d 
  resp  m    p  d   

for every model m of    extending i that m    p  d 
proof  see appendix e 
this proposition is the analogue for inductive definitions of the result that theorem    
states for fo formulas  one difference between the two results is that the above proposition always assumes that the definition  itself holds  while theorem     makes no such
assumption about the fo formula  that is approximated  as discussed in the beginning of
this section  this restriction is not a problem  because of the way in which we approximate
implications and because we only allow definitions to appear in the antecedent  a second
difference is that theorem     applies to arbitrary subformulas  of   while the above
 it is  however  an easy corrolary of this proposition
proposition only considers atoms p  d  
that the result in fact holds for each formula  that contains only predicates defined by
  or  cf  d   
 then for every model m of   
d   i e   whenever w f mi  d       ct  d 
  resp  m     d   

extending i  it holds that m     d 
we introduced the approximation appct pt    with the aim of being more complete than
the completion based approximation  as long as only a single definition  was considered
   

fivlaeminck  vennekens  denecker   bruynooghe

in isolation  we succeeded in this goal  however  now that we have also incorporated the
additional formula   this is no longer the case  for instance  consider the following fo id 
theory 

 
q  p  q 
here  the approximation d cannot derive that p is certainly true  simply because the
ct pt approximation appct pt    does not contain rules for head to body propagation  i e  
there are no rules to infer something about the body of a definitional rule  given information
about its head  by contrast  the approximation of the completion does contain such rules
and therefore has no problems reaching this conclusion  this motivates us to not just use
d but to use d compl    instead  because each definition implies its completion 
this is sound 
to obtain a sound approximation for an so id  formula p q  with      
       we now just need to plug in our approximation d compl    for  into a
suitable so id  formula  similar to the one we defined in definition     for an so
formula p q        a small complication  however  is that  as discussed previously 
cf
our approximation of a definition does not define predicates act
 and a that tell us when
the definition  as a whole is certainly true or certainly false  therefore  we can no longer
use our normal approximation of when the entire implication  is certainly true  before
we present the approximation for so id   let us first introduce a reformulation of our
original approximation for so  that avoids the use of this act
 
proposition      for an so formula f   p q     where  is of the form       
the approximation defined in definition      i e   the formula
ct
p r    approx           act
   t    a

is equivalent to
cf
ct
p r    approx       appox        act
   t     a   a   

proof  this is obvious from the fact that the difference between approx         and
approx       appox      is precisely a set of rules that ensure that act
 is equivalent to
ct
acf
   a   

our approximation for so id  now essentially consists of just replacing approx     
compl  
cf
  act
and acf
 in the above form 
   t  and a  respectively by d
proposition      given an so id  formula f   p q           we define
app wf  f   as the following so id  formula 
ct
p r    dcompl    approx         acf
  a    

then app wf  f   is a sound approximation of f  
compl  

in some cases  the approximating d
instead of d will not gain us anything  for instance  consider an p q        problem  where  only contains open
predicates of   as is the case for the conformant planning problems we consider in the next
   

fian approximative inference method for so

sections   in this case  we will never need head to body propagation  and therefore d
compl  
is just as complete as d
  and we are therefore better off using the former 
as was the case for our approximation method for so   here as well not all rules from
the definition in app wf are necessary  indeed  only the bottom up rules from approx     
are needed  and can be unfolded into a single rule  therefore  below we define two more
variants of definition     
definition      app wf
bu  f     given an so id  formula f   p q          
wf
we define app bu  f   as the following so id  formula 
cf
ct
p r    dcompl    approxbu
         a  a    

and we define app wf
bu u nf  f   as the following so id  formula 
ct
cf
ct
p r    dcompl     act
             a  a    

   experimental evaluation
in this paper we have seen a number of methods to approximate so and so id 
satisfiability problems  in this subsection  we explore  through a number of experiments 
how we can use these methods to solve practically useful problems as fast as possible  we
performed these experiments on a number of conformant planning benchmarks from the
paper of son et al          as we show in section    all these benchmarks are of the
form f       where  is a stratified definition  and is therefore equivalent to its
completion  therefore  f is equivalent to the so formula  compl      which
we denote by f cp   all experiments were run on a dual core     ghz cpu      gb ram
linux machine  using the idp model expansion system for fo id   marien et al         
a time out of twenty minutes was used 
a first question we want to answer is whether for these definitions  the completion
based approximation is faster than the ct pt approximation  it is not hard to see that  even
though approx compl    is linear in the size of the parse tree of compl    this definition
may contain more rules than appct pt     and moreover  these rules may contain a lot of
recursion  this can pose a challenge for current solvers  and suggests that it is likely to be
more efficient to use the ct pt approximation for definitions  the first column in table  
shows times for using the completion of the definition   that is  app   f cp    while for the
second column  the ct pt approximation of  was used  that is  app wf  f    as expected 
the ct pt approximation was consistently faster 
table   also compares solving times of the full completion based approximative definition
cp
 in the first column  with the approximation app 
bu  f    def        from which the topdown propagation rules for  have been removed  third column   we see that in the bt
and btc benchmarks we get an order of magnitude improvement  the fourth column of
cp
table   shows timings for the unfolded approximation of     app 
bu u nf  f    in which the
intermediate tseitin predicates have been removed  def        we see that this unfolding
consistently provides a speed up 
these results suggest that combining the above techniques  that is  using the ct pt
approximation for  and the unfolding of the bottom up approximation of   together  will
   

fivlaeminck  vennekens  denecker   bruynooghe

app   f cp  

app wf  f  

cp
app 
bu  f  

cp
app 
bu u nf  f  

app wf
bu u nf  f  

bt     
bt     
bt     
bt     
bt      

     
     
     
 

     
     
     
 

     
     
     
     
 

     
     
     
     
 

     
     
     
     
     

btc     
btc     
btc     
btc     

     
 

     
 

     
      
 

     
     
 

     
     
     
      

     
     
     
      
 

     
     
     
     
     

     
     
     
      
 

     
     
     
      
 

     
     
     
     
     

     
 

     
 

     
 

     
 

     
     
     
       
    

problem

domino     
domino     
domino     
domino      
domino      
ring   
ring   
ring   
ring   
ring    

table    the first column gives the name of the benchmark and the other ones different
execution times  the second column gives the execution time for the approximation of the
completion and the third for the cp pt approximation  the fourth and fifth column use
variants of the completion approximation  for the fourth column  the top down rules for
  are removed while in addition  for the fifth column  the remaining bottom up rules are
unfolded  the last column combines the cp pt approximation with both other changes   
means the execution was interrupted after    minutes 
give us the fastest way of approximating           satisfiability problems  indeed 
this is what formula app wf
bu u nf  f    definition      does  and the results of this method
are shown in the last column of table    as expected  this is by far the fastest method 

   applications and related work
in the literature  many examples can be found of approaches that perform some kind of
approximate reasoning about the models of a logical theory  often  these approaches  which
are specific to the problem at hand  seem to boil down to an instantiation of the general
methods presented here  in this section we give some examples 
    conformant planning
in general  a conformant planning problem is a planning problem in a non deterministic
domain where the initial state may be not fully known  the goal is to come up with a
plan  i e   a sequence of actions  that is nevertheless guaranteed to work  this is a hard
problem  the decision problem of deciding whether a conformant plan with a fixed length
k exists is p   complete   baral  kreinovich    trejo        turner         therefore  one
   for planning domains where the executability of actions in a given state cannot be determined polynomially  this is even p
   turner       

   

fian approximative inference method for so

typically attempts to solve it approximately  in this section  we show how we can apply our
approximative methods to solve conformant planning problems 
example      let us consider the clogged bombs in the toilet domain  mcdermott       
son et al          there are a number of packages and a toilet  each of the packages may
contain a bomb which can be disarmed by dunking the package in the toilet  dunking a
package into a toilet also clogs the toilet and we cannot throw a package in a clogged toilet 
flushing the toilet unclogs it  the effects of the actions on the fluents are modeled by the
following definition act   and the preconditions by the conjunction prec of sentences in
tprec  

act



clogged     init clogged 





 clogged t       p   dunk p  t    clogged t   f lush t   

 


armed p      init armed p  






armed p  t       armed p  t   dunk p  t  

tprec

 p t   dunk p  t   clogged t  
  p t   dunk p  t   f lush t   
 
 p p  t   dunk p  t   dunk p    t   p   p   
 p t t    dunk p  t   dunk p  t     t   t   

now consider the following regular planning problem  given a completely specified initial
situation  specified by a formula init    find a plan such that all packages are disarmed  we
can formulate this problem as the following formula 
a  f   i   act  prec  init   t p armed p  t   
where with a  we denote the action predicates  dunk    f lush     with f we denote
the fluent predicates  armed    clogged    and with i we denote the predicates used to
describe the initial situation  init clogged    init armed     now imagine that initial
situation is not specified  and we want to find a plan that works for all possible initial
situations  in other words a conformant plan  we can formulate the problem of finding such
a plan as follows 
a f   i   act   prec  t p armed p  t   
all this can be formalized in general as follows 
definition      conformant planning   let  be a vocabulary  consisting of a set of
predicates a  denoting actions  i  denoting initial fluents  and f denoting fluents  let
tact be an fo id  theory and tinit   tprec and tgoal fo theories  all over   such that tact
specifies the values of the fluents given an interpretation for the actions and initial fluents 
tinit is a theory specifying the initial situation  tprec contains preconditions for the actions 
and tgoal specifies the goal of the planning problem  with act we denote the conjunction
of the sentences and possibly definitions in tact and similarly for the other theories  the
problem of conformant planning is then to decide the satisfiability of the following formula 
a i f    act  init     prec  goal   
   

   

fivlaeminck  vennekens  denecker   bruynooghe

ar  


cloggedct    



ct  t     

clogged




armedct  p    




armedct  p  t     




cloggedpt    




cloggedpt  t     




armedpt  p    




armedpt  p  t     




init cloggedct




init
armedct  p 

init cloggedpt


init cloggedcf




init
armedpt  p 




armedcf
init



cf  t 

clogged



cf  p  t 

armed




act

 

































init cloggedct  
p   dunk p  t    cloggedct  t   f lush t   
init armedct  p  
armed p  t   dunk p  t  
init cloggedpt  
p   dunk p  t    cloggedpt  t   f lush t   
init armedpt  p  
armed p  t   dunk p  t  
f 
f 
init cloggedcf  
f 
init armedcf  p  
f 
cloggedpt  t  
armedpt  p  t  
pt   dunk p  t   cloggedcf  t 
  pt   dunk p  t   f lush t  
 p  p  t   dunk p  t   dunk p    t   p    p 
 pt  t    dunk p  t     dunk p  t     t    t 
 tp   armedcf  p  t  














































































act
   

figure    the complete approximation of the clogged bombs in the toilet example 
in words  there must be a plan  a   such that no matter how the nondeterministic
 f    as long as the specification of the effects of the actions  act  
aspects turn out  i 
and the  partial  specification of the initial situation  init   are obeyed  the plan will be
executable  prec   and achieve the goal  goal   
formula   is now exactly of the form we assumed above  and we can thus use one of our
methods to approximate conformant planning problems 
example       continued  continuing the clogged bombs in the toilet example  by
using the ct pt approximation for the definition  and unfolding the constraint  prec 
t p armed p  t  ct   we get the approximating so formula app wf
bu u nf  definition      
shown in figure    where r are the ct  and cf predicates introduced by the approximation
method 
the result of applying our general approximation method to a conformant planning
problem  as specified by tact   tprec   tgoal and tinit as above  is very similar to the approximation of an al action theory by a logic program as in the work of son et al         
however  there are some small differences in the details that make it difficult to formally
compare the two  nevertheless  for all experiments discussed in this section  our method
always finds a correct solution  unless it times out   as does the method of son et al 
moreover  the two approaches also found these solutions in comparable execution times 
in more detail  table   presents the following results  we implemented a conformant
planner by iteratively calling the idp model generator for fo id   marien et al        
on our approximation  giving it an increasing number of timesteps until either a plan is
   

fian approximative inference method for so

problem

idp

smodels

cmodels

bt     
bt     
bt     
bt     
bt      

     
     
     
    
    

     
     
     
    
 

     
     
     
    
    

btc     
btc     
btc     
btc     

     
     
    
    

     
     
    
 

     
     
    
   

cleaner     
cleaner     
cleaner      
cleaner     
cleaner     
cleaner      
cleaner     
cleaner     

     
    
    
    
    
 

     
    
    
 

     
    
    
    
 

domino     
domino     
domino     
domino      
domino      

     
     
     
     
     

     
     
     
     
    

     
     
     
     
    

     
    
    
   
    

     
     
    
 

     
     
     
      
   

ring   
ring   
ring   
ring   
ring    

table    comparison idp vs cmodels vs smodels

found or a maximum number of timesteps is reached  we then compared this planner to
the cpasp conformant planner  son et al          using the same experimental setup as
in section    cpasp takes an action theory in the action language al  and encodes an
approximation of the transition diagram corresponding to that action theory  by means of
an answer set program  then any answer set solver can be used to find conformant plans 
as son et al   we used as the asp solver behind cpasp both cmodels  e  giunchiglia  
maratea        and smodels  niemela  simons    syrjanen         as table   shows  the
combination of our approximation and the idp system is comparable to  but overall slightly
worse  than the combination of cmodels and son et al s approximation  when compared
to the same approximation given to smodels  our method tends to be a bit better  these
results are in line with results from the asp competition  denecker et al         concerning
the performance of smodels  cmodels and idp in general  suggesting that  for conformant
planning  our approximation and that of son et al  are of comparable quality 
another approximative method for solving conformant planning problems can be found
in the work of palacios and geffner         in their paper  the authors consider conformant
planning problems  specified in the language strips extended with conditional effects and
negation  they define a transformation k  that transforms such a conformant planning
problem into a classical planning problem in a sound but incomplete way  for each fluent
literal l in the conformant planning specification  two new literals kl and kl are created 
   

fivlaeminck  vennekens  denecker   bruynooghe

denoting that l is known to be true  resp  known to be not true  and the initial situation 
action preconditions and effects are translated into an initial situation  preconditions and
effects with reference to these new knowledge literals  it is not hard to verify that our
approximation method generalizes this transformation  if we take an so encoding of a
conformant planning problem p   the so approximation obtained by our method can be
interpreted as a classical planning problem in the ct cf vocabulary  this planning problem
will exactly be the planning problem specified by k   p    i e   the action preconditions and
effects correspond   apart from the initial situation  the k  transformation does not do
propagation on knowledge about the initial situation  given an initial situation i  specified
as a set of clauses   then k   i  consists of only those literals kl where l is a unit clause
in i  this means that  e g   for an initial situation i    p  q  p    k   i  will not include
the literal kq  while our method will be able to infer that qct holds  which means our
approximation method will be more complete than the k  transformation  
being a general method  ours does not only allow for solving conformant planning problems  but also allows for approximating a number of related problems in temporal domains 
consider  for example  the following problem  given that a certain action a happens at
timepoint t  will this certainly lead to a property  being true   this can be formalized as
the following so satisfiability problem  to which our method applies again 
aif     act  init  prec  a t      
this formula is true if for all possible plans in which a t  happens  the property  holds 
a variant on this problem is the so called projection problem  given that we exactly know
which actions happened  we can thus assume that the preconditions were satisfied   does
the property  hold   in order to formulate this problem as a so satisfiability problem  we
need to express that these and only these actions happened  this can be done  for example 
by using an inductive definition a   the projection problem can then be expressed as the
aif     act  init  a      satisfiability problem  another variant is the following
problem  if the property   holds for a certain plan  does property   also hold   which
can be expressed as the aif   act  init  prec           satisfiability problem 
    querying and reasoning in open databases
approximate methods similar to ours have been used in the context of databases without
complete information  in particular in databases without cwa  such as open databases
 baral et al         liu   levesque        or databases that make forms of local closed
world assumptions  denecker et al         doherty et al          in most of these papers
the goal is to compute certain or possible answers to queries  because this task has a
high complexity  from conp for a locally closed database without integrity constraints to
possibly p  for databases with first order constraints   assuming a given finite domain  
approximate methods are presented which translate an fo query into an approximate fo
or fo fp   query that can be solved directly against the database tables using standard
 polynomial  query methods 
the method presented in this paper can provide a similar functionality  let db be a
set of ground literals  representing an incomplete database  let  be a background theory 
   fo fp  is the extension of fo with least and greatest fixpoint constructs 

   

fian approximative inference method for so

it may contain integrity constraints  view definitions  datalog view programs are a special
case of fo id  definitions   local closed world statements expressed in fo  etc  for a given
 holds in all herbrand models
fo query q  x   the goal is to find all tuples d such that q  d 
of db    the problem of deciding whether a given tuple d is an answer corresponds to
the satisfiability problem of the formula

r db    q  d   

   

and we can directly use our approximation method on this problem  while this allows us
to answer yes no queries as well as to decide whether a given tuple d is a certain answer
to a query  our approximation method does not directly provide a method to compute  an
approximation of  all such tuples 
however  let us look at the following so satisfiability problem 
r    ddb  approxbu  q  x   
it looks very much like our approximation of           satisfiability problems  as
formulated in proposition       we again have the definition ddb approximating the
database db and background knowledge   note that  possibly contains definitions   and
the bottom up evaluation of the query  only now the constraint act
q has been dropped 
the definition ddb  approxbu  q  x   consists of rules describing propagations allowed by the database and the theory   and rules defining the predicate symbol act
q   where
aq is the tseitin predicate representing the query q  x   in the unique herbrand model
of this definition  the interpretation of act
q contains those tuples for which our propagation
can derive that they certainly satisfy the query  a sound approximation of the full set of
answers 
in the work of denecker et al          a locally closed database lcdb is assumed  such
a locally closed database consists of a standard database db  i e  a set of atoms  together
with a set of local closed world assumptions lcwa p  x    x    each of these lcwa
statements expresses that the databases knowledge about p is complete for those tuples x
 is therefore true if it is in db and it is false
that satisfy the formula  x   an atom p  d 
 holds in the domain
if it is not in db and there is a lcwa p  x    x   such that  d 
of discourse  otherwise it is unknown  the authors then present an approximate reasoning
method for query answering in locally closed databases and show how this approximate
query answering can be formulated as a fixpoint query  basically  this boils down to the
following  one constructs the following definition




   






 p ct  x   p  x 

 
lcwa  
 p cf  x   p ct  x   ct


p  x 






   
for every relation p and every local closed world assumption lcwa p  x    x    although
the authors do not phrase it in this form  their method for finding an approximation of the
certain answers to a query q  x  actually boils down to solving the following satisfiability
problem 
r    db  cw a db   lcwa  approxbu  q  x   
   

fivlaeminck  vennekens  denecker   bruynooghe

here r  denotes all predicates and auxiliary predicates occurring in the body of the existential formula  with cw a db   we denote the formula expressing closed world assumption
for the database db  the presence of this closed world assumption might seem strange at
first sight  since the whole idea behind locally closed world databases is to not assume cwa
per default  however  in order to correctly apply the local closed world assumptions  we
need an exact specification of what is in the database and what is not  and this is precisely
what is expressed by db  cw a db   indeed  given db  cw a db   lcwa can be
seen as an approximative definition of what is certainly true and false in the context of the
locally closed world assumptions  again the predicate act
q will contain an approximate
answer to the query q  x   i e   a lower bound on all the tuples for which the query q  x 
is certainly true  similarly  the predicate acf
q will contain a lower bound on all the tuples
for which the query is false 
a limitation of the approach by denecker et al  is that they extend the above method
for only one type of integrity constraints  namely functional dependencies  the way these
functional dependencies are handled is by extending lcwa with extra propagation rules
taking these functional dependencies into account  by contrast  our more general method
can be used to easily extend this to arbitrary integrity constraints  this works as follows 
let tint be a set of first order integrity constraints  we can then approximate the problem
of finding certain queries by the following satisfiability problem 
bu
ct  t   db  cw a db   lcwa  approx
 q  t   
r    approx tint     atint

again  the predicate act
q will contain an approximate answer to the query q  x  
doherty et al          propose yet another approach to asking queries to an incomplete
database  the authors use the term approximate database to denote a database  consisting
of two layers  an extentional and an intensional layer  both of these layers have an external
representation towards the user  and an internal representation 
the extentional database consists of positive and negative literals  and is internally
stored as a classical database  using the feferman transformation  for example  the extentional database  edb   as entered by a user 
color car   black   color car   red   color car   red  
is internally stored as
colorct  car   black   colorcf  car   red   colorct  car   red  
the intentional database consists of rules to infer additional information from the facts in
the edb  the user can write down rules of the form   p   x          pn  xn      p  x   
which are then internally stored as    p   x    ct            pn  xn   ct     p  x   ct   an
example of such a idb rule is the following rule
color x  y     y     y   color x  y    
which is internally stored as
colorct  x  y     y     y   colorcf  x  y    
   

fian approximative inference method for so

to evaluate a query  a naive algorithm based on exhaustively applying all rules on the edb
is used 
the rules in the idb resemble our in f formulas in the sense that both describe valid
inferences that can be made based on incomplete information  the internal representation
of the idb is indeed similar to our representation of in f formulas as definitional rules 
however  a key difference is that in the approach of doherty et al   when a user wants to add
a property  to the database  e g   a car can only have one color   he has to write down all
inferences that are valid according to that property  while in our approach these inference
rules are automatically generated from the property itself  manually writing down all valid
inferences sanctioned by a property is not an easy task  for example  take the property a
car has to be inspected if and only if it was suspect and black from the paper by doherty
et al   this can be expressed in fo as the formula    c suspect c   color c  black  
investigate c    while  in our method  approx   constructs an approximation of all valid
inferences that can be made from this formula  the user has to write down the following
rules in doherty et al s approach 
suspect c   color c  black   investigate c 
suspect c   investigate c   color c  black 
suspect c   investigate c 
   
our method therefore generalizes the work of doherty et al  by deriving these rules automatically from a general first order theory 
liu and levesque        propose another type of reasoning in open databases  they
only consider a simple form of first order knowledge bases  called proper knowledge bases 
an interesting feature of these knowledge bases is that it is easy to obtain a complete
characterization of what is certainly true  resp  certainly false  in our terminology  that
 if and only if     p ct  d 

means that one can construct a definition   such that kb    p  d 
cf

and kb    p  d  if and only if     p   it holds that every two valued extension of the
three valued interpretation encoded by  is a model of the kb  then levesque et al  use
an evaluation procedure based on the three valued kleene evaluation to check whether a
query holds in the knowledge base  as mentioned earlier  they also define a normal form
n f for queries  for which they prove that the kleene evaluation is complete  our work
extends their work  in the sense that we can take a general first order knowledge base
and approximately solve queries  as we have shown above  of course  since in general we
can no longer guarantee a complete characterization of what is certainly true false  we can
no longer guarantee completeness  even if the query is in the normal form n f  another
difference between the work of liu and levesque and our work here  is that they assume a
fixed countable infinite domain  while we assume a fixed finite domain  while this is indeed
a theoretical difference  in practice it does not make any difference  since their evaluation
method only considers a finite set of domain elements that can be determined up front 

   conclusions and future work
even if a problem is computationally hard in general  specific instances of it might still
be solved efficiently  this is why approximate methods are important  they cannot solve
   

fivlaeminck  vennekens  denecker   bruynooghe

every instance  but the instances they can solve  they solve quickly  in computational
logic  hard problems arise quite readily  it is therefore not surprising that the literature
contains numerous examples of algorithms that perform approximate reasoning tasks for
various logical formalisms in various specific contexts  since many of these algorithms share
common ideas  it is a natural question whether they can be seen as instances of some more
general method for a more general language 
this paper presents such a method  we start from the propagation method for fo  
developed by wittocx  marien  and denecker        and its symbolic expression  wittocx 
      and generalize this to a method for approximating the p   complete so id  satisfiability problem by solving an np problem  importantly  this is a syntactic method that
transforms the so id  formula into an so id  formula  this affords us the freedom
to use any off the shelf solver for such a language to perform the approximative reasoning 
moreover  it also makes it significantly easier to update the method by adding  or removing 
specific propagations 
since our method is an approximation  it is necessarily incomplete  nevertheless  our
experiments have shown that  in practice  it often does manage to find a solution  an
interesting topic for future work is to determine classes of problems  for which our method
can be shown to be complete 
in summary  the contributions of this paper are that     we have extended the logical
representation describing the propagation process to a general method for approximating
sat  so  problems      we have shown how to approximate inductive definitions  and use
this to approximate a class of useful sat  so id   problems  and     we have examined
how existing approximation methods fit into our general framework 

acknowledgments
this work is supported by research foundation   flanders fwo vlaanderen  projects
g         and g         and by research fund kuleuven  project goa         hanne
vlaeminck is supported by iwt vlaanderen 

appendix a  an example of an approximation
figure   shows the full approximation of act as in example     

appendix b  proof of theorem    
proof  first  remark that feferman        showed that the four valued evaluation of a
formula  in an interpretation i can be simulated by computing the standard two valued
evaluation of ct and cf in i tf   it is easy to verify that the bottom up rules in approx  
inductively encode this evaluation  we split the proof in two parts  first we assume that i
is three valued  we show that in this case only the bottom up rules are used  i e   leaving
out the top down rules does not change the model of the definition  this proves the first
part of the theorem  and together with the above remark also proves the second part of
the theorem for the case that i is three valued  then  all that is left to prove  is that the
second part of the theorem also holds for four valued i 
   

fian approximative inference method for so

























































































































































































act
act
acf
act
acf
act
act
 
act
 
acf
 
acf
 









act
 
acf
 
act
   t 
acf
   t 
acf
   t 
acf
   t 
act
   t 
act
   t 
acf
   t 
act
   t 
acf
   t 
act
   t 
act
   t 
acf
   t 
cleanct  t     
cleancf  t     
acf
   t 
act
   t 
act
   t 
act
   t 
acf
   t 
cleancf  t 
cleanct  t 
act
   t 
act
   t 
acf
   t 
acf
   t 
act
   t 
cleancf   t      
cleanct   t      
acf
   t 
acf
   t 
act
   t 
cleancf  t 
cleanct  t 





































acf
 
acf
 
act
 
act
 
acf
 
act
  
acf
  
act
 
 t   act
act
   t   
 
 t   acf
acf
   t   
 
act
cleanct    
  
ct
cf
 acf
    t     t    t  a   t        clean    
cf
acf
 t  
initiallyclean
 
cf
a   t  
initiallycleanct
ct
ct
 a   t   a   t   
act
  
act
 t  
act
 
  
ct
 acf
acf
   t   a   t   
  
ct
a   t  
acf
  
ct
 acf
act
  
   t   a   t   
cleancf   t       
cleancf    
act
 t  
cleanct    
 
cf
ct
 clean  t        a   t   
act
  
cf
a   t  
acf
  
cf
 act
initiallycleancf
   t   a   t   
cf
a   t  
initiallycleanct
ct
 act
   t   clean  t       
cleanct  t  
w ipe t  
 cleancf  t   w ipe t   
acf
   t  
 act
   t   w ipe t   
act
   t  
cleanct  t      
cf
 acf
   t   clean  t       
cf
a   t  
cf
 act
   t   clean  t       
cf
a   t  
cf
 act
   t   a   t   
ct
clean  t  
w ipe t  
 cleancf  t   w ipe t   
act
   t  
 acf
   t   w ipe t   
ct
act
   a   
cf
a   
acf
   
act
act  
act
act  
ct
acf
act  a   
cf
aact  act
  



























acf
   
acf
    
ct
 act
   a     
ct
a   
ct
 acf
   a     
ct
a   
ct
 acf
   a    
cf
clean     
initiallycleanct  
 cleanct      initiallycleancf   
acf
   
cf
 act
   initiallyclean   
acf
 
 
ct
 act
   clean     
ct
a    
cleanct     
cf
 acf
    clean      
cf
a    
cf
 act
    clean      
acf
 
  
cf
 act
    a     
initiallycleancf  
initiallycleanct  
act
    
acf
    

























































































































































































figure    approx w ipe   act    with act taken from example     
so let us assume that i is three valued  we prove that m od approxbu     i    
m od approx    i   by contradiction  assume there is a predicate act
  the proof goes
cf
ct
analogously for a   such that m od approx    i      a but m od approxbu    
i       act
   in the preliminaries we recalled that the model of a positive inductive definition
o   the model of such a
is the least fixpoint of the immediate consequence operator t
   

fivlaeminck  vennekens  denecker   bruynooghe

definition is thus the limit of a sequence of applications of the immediate consequence
operator  one can prove  see  e g   denecker   ternovska        that we do not have to
apply the immediate consequence operator of the complete definition in every step  i e  
applying the immediate consequence operator of a subset of the definition  until there no
longer exists such a immediate consequence operator that will give something new  gives
the same model  suppose we take such a sequence where we first apply all the bottom up
rules  and only after no bottom up rules are applicable we try to apply the top down rules 
suppose act
 is the first atom we infer with the top down rules in this sequence  obviously
act
cannot
be the top level atom act

   since there are no top down rules for this  we can now
do a case study on the type of  sub formula  occurs in  e g   assume that  is a subformula
of the formula  where          from the fact that act
 is true  it follows that the body
cf
cf
ct
ct
of the top down rule a  a  a  has to be true  and thus that act
 and a  are true 
ct
since act
 was the first atom to be inferred by a top down rule  we have that since a is
ct
ct
ct
true  also a  a  must be true  now since a only became true in the last step of the
sequence  we have that act
  must have been true already  this means that after applying
cf
the bottom up rules act
  and a  are both true  which is a contradiction with the fact that
i was three valued and that the bottom up rules encode the four valued evaluation  the
proof is analogous for the other types of subformulas 
now in the case that i is four valued  and not three valued it is no longer the case
that only the bottom up rules contribute to the model  i e   m od approxbu     i     
m od approx    i     to see this  consider the following formula p  q  and take for
i the four valued interpretation such that p   i and q   t  then one can verify that
cf
the bottom up rules in approx    i will infer that both act
p q and ap q are true 
however  now the top down rules can also infer that qcf has to be true  what happens is
that once an inconsistency is inferred for a certain subformula  this propagates back down
the parse tree  however  similar to above  we can again do a case study on the structure of
cf
 to prove that  for the top formula    m od approxbu     i      act
  a if and only
cf
bu    is clearly a direct
if m od approx    i      act
  a   now since since approx
encoding of the four valued evaluation  this concludes the proof 

appendix c  proof of proposition    
proof  take a witness i for the satisfiability of app   f    first let us remark that
open approx           act
   t       from the fact that i is a witness of the
satisfiability of app   f   we know that the model m of this definition extending i concf
tains act
 and by construction of approx         it must also contain either a  or
act
   
assume first that acf
  is true in m   then application of theorem      where we take
        and         gives  if m extends i and m        then m         so the assumption
that m      results in a contradiction and hence m         in which case      holds
for every m extending i  and thus is i a witness for the satisfiability of f  
next  assume that act
  is true in m   again applying theorem      where this time
        and         gives  if m extends i and m      then m        hence also in this
   

fian approximative inference method for so

case does      hold for every m extending i  and again this means that i is a witness
of the satisfiability of f  

appendix d  proof of theorem    
a key ingredient in the proof of theorem     is the following property of appct pt    
oct pt
its immediate consequence operator tapp
ct pt    on two valued interpretations simulates
 o  o  

the immediate consequence operator t     on four valued interpretations of the original
definition  this is made more precise in the following lemma 
definition d    for a pair of  interpretations  i  j   we use t i  j  to denote the ct pt interpretation  i  j ct pt  
lemma d    for each  o    o    and  i  j  
 o   o   

t

 o   o   

proof  let  i     j     be t

t o  o  

 i  j    t   tapp ct pt      t i  j    
t o  o  

 i  j  and let f   tapp ct pt      t i  j    we first show that

f  ct   i     since f  ct depends only on the rules of appct pt    with a predicate from ct  
we can discard all rules with a head from pt   as a result  we are left with a single copy of 
in which positive occurrences of atoms have been replaced by their ct variant and negative
ones by their pt variant  this implies that the evaluation of the bodies of these remaining
rules according to t o   i  o   j  will be identical to the evaluation of the bodies of the
original rules by  o   i  o   j  in the construction of i     thus proving the equality  the
proof of the remaining equality f  pt   j   is analoguous 
proof of theorem      first  recall that  given some partial knowledge  o    o     the threevalued well founded models of   resp  appct pt    are the least fixpoints of operators
 o  o  
t o  o   
st      resp  st app ct pt
 note that since t o    o    is two valued  we abuse notation
  
here and in the rest of the proof and denote the two valued pair  t o    o     t o    o     by
t o    o     
now  the latter operator is rather peculiar  in the sense that it is actually juggling four
different interpretations of the original alphabet   in more detail  each element in its
domain looks like this 


ict
jct
 i  j           
ipt
jpt
where ict and jct interpret the alphabet ct   and ipt and jpt interpret pt   if we now apply
t o  o   
the operator st app ct pt
  we obtain a new such pair 
  

 
 
ict
jct
 i     j              
 
 
ipt
jpt


   

fivlaeminck  vennekens  denecker   bruynooghe

 
 
from the general definition of the st o
 construction  it is obvious that ict ipt depends only
on jct  jpt   however  in this particular case  the operator exhibits even more structure 
 o  o   
the operator stapp ct pt
 j  uses its argument j as a fixed interpretation for the negative
  
occurrences  which remains constant throughout the least fixpoint computation over the
positive occurrences  now  appct pt    contains two copies of  which interact only through
negative occurrences  that is  all occurrences of a pt predicate in the body of a rule with
a ct predicate in its head are always negative ones  and vice versa   this means that as
long as we keep the interpretation of the negative occurrence fixed to a constant value j 
    we can discard
these two copies of  do not interact at all  consequently  to construct ict
all rules with a pt predicate in its head  this means we are left with rules whose head
is a ct predicate and whose body contains only positive occurrences of ct predicates and
  depends only on j   moreover  the
negative occurrences of pt predicates  therefore  ict
pt
  will be such that if we map its symbols back to the original alphabet   let
value of ict
      st  o   o     orig j     similarly 
orig  ct     orig  pt      for all      then orig ict
pt

we also obtain that 
 o   o   

 orig jct    

 o   o   

 orig ipt    

 o   o   

 orig ict    

 
orig ipt
    st

 
orig jct
    st

 
orig jpt
    st

in other words 
 o  o   

 
 
 orig ict
   orig jpt
     st   
 
 
 orig ipt
   orig jct
     st

 orig ict    orig jpt    

 o   o   
 orig ipt    orig jct    


now  if we consider the construction of the well founded model of appct pt     we have a
sequence of this form 

  

  

 

  
 
 
 

ict
jct
ict
jct
ict
jct
ict
jct
                                    
 
 
 
 
 
 


ipt
jpt
ipt
jpt
ipt
jpt
ipt
jpt
let  i i   j i  i  be the well founded model construction for the original definition   i e   for
 i     f and
all predicates p n  def    and domain tuples d  dn we have that  p  d  
 j     t  and  i n     j n       st  o   o     i n   j n   for n     it is easy to see that we have
 p  d  

   j        i   j    this provides a base case  while the above equation provides
that t   ict
   
pt
i  j i    in other words  the
the inductive step to prove that  for each i   i i   j i     t   ict
pt
well founded model construction for the original definition  is tracked by these elements
of the well founded model construction for appct pt    
  

  

  

 

ict

ict

ict

ict

                                    
 
 
 


jpt

jpt

jpt

jpt
what about the other diagonal  there we have that t   j ct  i ct            which is
the most precise element  p in the lattice of pairs of interpretations  therefore  we find
   

fian approximative inference method for so

 o  o  

that the other diagonal actually tracks the construction of the greatest fixpoint of st       
combining these two results  we see that if  l    l    and  g    g    are these least and greatest
fixpoint  respectively  the well founded model of appct pt    looks like this 


l 
g 
      
g 
l 
note that a unique four valued stable fixpoint is both the least and greatest stable fixpoint
and hence also the well founded fixpoint  this immediately concludes the proof 

appendix e  proof of proposition    
lemma e    given a  definition   and a fo formula   let  be a subset of    a
renamed copy of    consider the definition
d   appct pt      p ct  p  ct  p    opt  o pt  oopen      
assume that we have a three valued interpretation i that approximates all models of    
then it holds that w f mi ct pt  d  also approximates     i e  
  w f m ct pt  d   then          p  d  

  if p ct  d 
i
   w f m ct pt  d   then          p  d  

  if p pt  d 
i
proof  we prove this through induction over a well founded model construction alternative
to the one we described in this paper  which can be found in the work by denecker and
vennekens         assume we have an induction sequence  ii   in   of four valued def  d interpretations such that i  is the interpretation in which everything is completely unknown 
and in   w f mi ct pt  d   we prove for every i that ii is a sound approximation of    
this is trivially the case for n      so now assume that ik is a sound approximation of
    we have to prove that this is also the case for ik     we need to prove two things for
 cannot be true in ik   if p  d 
 is not true in all models of    
this  first  an atom p ct  d 
pt
 cannot be false in ik   if it is not false in all models of
and second  that an atom p  d 
    we prove both cases by contradiction 
we start with the first case  so assume that in the k th well founded induction step 
 is incorrectly deduced  i e   there
for a certain predicate p and domain tuple d  p ct  d 

 was inferred in the k th step 
exists a model m        s t  m     p  d   since p ct  d 
ct
 that is   p  ct  d 
 was already made
this means that the body of the rule defining p  d  
true in a previous step  the induction hypothesis then tells us that in every model m of
 but then the semantics of inductive definitions says that
   it holds that m    p  d  
also m    p   which is a contradiction with our assumption 
next  we consider the second case  this time  assume that in the k th well founded
 is inferred to be false  while there exists a model m of     s t 
induction step  p pt  d 

m        p  d   now  using this alternative version of the well founded semantics  there
are two ways for a domain atom to become false  indeed  a domain atom can become false
   

fivlaeminck  vennekens  denecker   bruynooghe

because the body of the defining rule was already false  or because it is part of an unfounded
set 
 was made false because the body of the defining rule  p  pt was already false 
if p pt  d 
an argument completely analogous to the one above   using the induction hypothesis   again

gives a contradiction with the assumption  so now  all that is left to prove  is that p pt  d 
pt

cannot be incorrectly made false through the application of an unfounded set rule  if p  d 
is made false through the application of the unfounded set rule  this means that there is a
set u s of atoms  that are unknown in ik   such that when made false in the bodies of the
rules defining these atoms  the kleene evaluation of these bodies returns false  it is possible
to verify that we can always find an u s such that it only contains pt  atoms 
now let us take such a model m of     such an m is obviously also a model
 such that
of   consider the corresponding set u s     consisting of domain atoms p  d  
pt
pt
pt


p  d   u s  for every atom q  d  in the body  p   not in the set u s  the induction
 m t  qpt  d  
 ik   similarly  for every atom qct in
hypothesis actually tells us that  q d  
pt
ct
i
 k t  q d  
 m   now  since qpt atoms occur only
the body of  p     it says that  q  d  
positively and and qct only negatively in  p  pt   it follows that m interprets literals that
are not in u s   in a more false way than ik   thus  u s   is also an unfounded set  indeed 
turning all the atoms in u s   to false will make all the bodies of the defining rules false   and
 which is again a contradiction with the assumption  and which concludes
thus m    p  d  
the proof of this lemma 

proof of proposition      the proof of this proposition is now an easy proof over induction
on the construction of the well founded model of d   using the lemma above  and the
soundness of approx   

references
baral  c          knowledge representation  reasoning  and declarative problem solving 
cambridge university press  new york  ny  usa 
baral  c   gelfond  m     kosheleva  o          expanding queries to incomplete databases
by interpolating general logic programs  j  log  program                  
baral  c   kreinovich  v     trejo  r          computational complexity of planning and
approximate planning in the presence of incompleteness  artif  intell                 
    
belnap  n  d          a useful four valued logic  in dunn  j  m     epstein  g   eds   
modern uses of multiple valued logic  pp       reidel  dordrecht  invited papers
from the fifth international symposium on multiple valued logic  held at indiana
university  bloomington  indiana  may             
clark  k  l          negation as failure  in logic and data bases  pp          plenum
press 
denecker  m   cortes calabuig  a   bruynooghe  m     arieli  o          towards a logical
reconstruction of a theory for locally closed databases  acm transactions on database
systems                    
   

fian approximative inference method for so

denecker  m     ternovska  e          a logic of non monotone inductive definitions and
its modularity properties  in lifschitz  v     niemela  i   eds    lpnmr  vol      
of lncs  pp        springer 
denecker  m     ternovska  e          inductive situation calculus  artificial intelligence 
                  
denecker  m     ternovska  e          a logic of nonmonotone inductive definitions  acm
transactions on computational logic  tocl          article    
denecker  m     vennekens  j          well founded semantics and the algebraic theory of
non monotone inductive definitions  in baral  c   brewka  g     schlipf  j  s   eds   
lpnmr  vol       of lncs  pp        springer 
denecker  m   vennekens  j   bond  s   gebser  m     truszczynski  m          the second
answer set programming competition  in erdem  e   lin  f     schaub  t   eds   
lpnmr  vol       of lncs  pp          springer 
doherty  p   magnusson  m     szalas  a          approximate databases  a support tool
for approximate reasoning  journal of applied non classical logics                  
e  giunchiglia  y  l     maratea  m          cmodels homepage  http   www cs utexas 
edu users tag cmodels html 
fagin  r          generalized first order spectra and polynomial time recognizable sets 
complexity of computation          
feferman  s          toward useful type free theories  journal of symbolic logic         
      
gelfond  m     lifschitz  v          the stable model semantics for logic programming  in
kowalski  r  a     bowen  k  a   eds    iclp slp  pp            mit press 
immerman  n          descriptive complexity  springer verlag 
kleene  s  c          introduction to metamathematics  van nostrand 
liu  y     levesque  h  j          a completeness result for reasoning with incomplete
first order knowledge bases  in kr  pp       
marien  m   wittocx  j     denecker  m          the idp framework for declarative problem
solving  in search and logic  answer set programming and sat  pp       
mcdermott  d          a critique of pure reason  computational intelligence            
mitchell  d  g     ternovska  e          a framework for representing and solving np
search problems  in veloso  m  m     kambhampati  s   eds    aaai  pp         
aaai press   the mit press 
niemela  i   simons  p     syrjanen  t          smodels  a system for answer set programming  in proceedings of the  th international workshop on non monotonic reasoning 
breckenridge  colorado  usa  corr  cs ai         
palacios  h     geffner  h          compiling uncertainty away in conformant planning
problems with bounded width  journal of artificial intelligence research  jair      
       
   

fivlaeminck  vennekens  denecker   bruynooghe

son  t  c   tu  p  h   gelfond  m     morales  a  r          an approximation of action
theories of and its application to conformant planning  in baral  c   greco  g   leone 
n     terracina  g   eds    lpnmr  vol       of lncs  pp          springer 
tamaki  h     sato  t          unfold fold transformations of logic programs  in iclp 
pp         
tseitin  g  s          on the complexity of derivation in propositional calculus  in slisenko 
a  o   ed    studies in constructive mathematics and mathematical logic ii  pp     
     consultants bureau  n y 
turner  h          polynomial length planning spans the polynomial hierarchy  in jelia 
pp         
van fraassen  b          singular terms  truth value gaps and free logic  journal of philosophy                  
van gelder  a          the alternating fixpoint of logic programs with negation  journal
of computer and system sciences                 
vlaeminck  h   wittocx  j   vennekens  j   denecker  m     bruynooghe  m          an
approximate method for solving so problems  in fisher  m   van der hoek  w  
konev  b     lisitsa  a   eds    jelia  lecture notes in computer science  pp 
        springer 
wittocx  j          finite domain and symbolic inference methods for extensions of firstorder logic  ph d  thesis  department of computer science  k u leuven  leuven 
belgium 
wittocx  j   denecker  m     bruynooghe  m          constraint propagation for extended
first order logic  corr  abs           
wittocx  j   marien  m     denecker  m          approximate reasoning in first order logic
theories  in brewka  g     lang  j   eds    kr  pp          aaai press 

   

fi