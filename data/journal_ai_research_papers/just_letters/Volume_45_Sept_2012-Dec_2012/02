journal artificial intelligence research                 

submitted        published      

approximative inference method solving
satisfiability problems
hanne vlaeminck
joost vennekens
marc denecker
maurice bruynooghe

hanne vlaeminck cs kuleuven be
joost vennekens cs kuleuven be
marc denecker cs kuleuven be
maurice bruynooghe cs kuleuven be

department computer science 
celestijnenlaan    a
     heverlee  belgium

abstract
paper considers fragment second order logic  many interesting problems  conformant planning  naturally expressed finite domain satisfiability problems logic  satisfiability problems computationally hard  p
   
many problems often solved approximately  paper  develop general
approximative method  i e   sound incomplete method  solving satisfiability
problems  use syntactic representation constraint propagation method firstorder logic transform satisfiability problem so id  satisfiability
problem  second order logic  extended inductive definitions   finite domain satisfiability problem latter language np handled several existing
solvers  inductive definitions powerful knowledge representation tool  motivates us approximate so id  problems  order this  first show
perform propagation inductive definitions  next  use approximate
so id  satisfiability problems  provides general theoretical framework
number approximative methods literature  moreover  show
use framework solving practical useful problems  conformant planning 
effective way 

   introduction
finite model generation logical paradigm solving constraint problems  successful
instance field sat  efficient solvers low level cnf language developed  instances  expressive languages  answer set programming
 asp   baral        model expansion  mx   extensions of  first order logic  asp 
e g   finite herbrand models answer set program computed  baral         model
expansion  mx   mitchell   ternovska        generalizes herbrand model generation
aims computing one models theory expand finite interpretation i 
 possibly empty  subset symbols   mx first order logic  mx fo   formally
equivalent finite domain satisfiability checking problem existential second order
logic  sat  so    known fagins celebrated theorem capture np  fagin 
       is  problems np exactly precise sense equivalent
satisfiability problem  hence mx fo  problem  range solvers exists
   specifically  search problem witness problem 
c
    
ai access foundation  rights reserved 

fivlaeminck  vennekens  denecker   bruynooghe

finite model generation  e g   overview state of the art asp mx fo    solvers
 here  fo   refers family extensions fo  found reports
asp competition  e g   denecker  vennekens  bond  gebser    truszczynski        
example      bounded planning problem modeled finite model generation
problem  problem deliberately kept simple serve running example
paper  glass may clean not  cleaned action wiping 
represent dynamic domain following fo theory tact  
   clean t      clean t  w ipe t   
clean    initiallyclean 

   
   

bounded planning problem considering turn dirty glass clean
one n steps  n n given constant  indeed formulated
model expansion problem  find model satisfies tact initiallyclean false 
clean n  true  formulate problem equivalently finite domain
satisfiability problem  namely satisfiability problem range          n  time
points following formula 
w ipe  clean  initiallyclean    act initiallyclean clean n   

   

act denote conjunction sentences tact   n      formula
indeed satisfiable suitable interpretation constants   n binary function
   and  moreover  witness w satisfiability provides plan  instance  wiping
time point   job  verified witness w w ipew      
cleanw               n  
large number search problems indeed seen finite model generation
problems  number problems higher complexity np 
consequently cannot formulated mx fo  problem  indeed  paper
interested np  next level p  polynomial hierarchy  perhaps
prototypical problem finite domain satisfiability so  satisfaction finite
interpretations p  every sentence p   hard sentences
 immerman         interesting p  problem conformant planning 
discuss detail section    already introduce next example 
example      extending example      suppose know whether object
initially clean dirty  still want plan guaranteed make clean  matter
initial situation was  longer standard planning problem  called
conformant planning problem  formulate following satisfiability
problem 
w ipe initiallyclean  clean    act clean n   
   
words  need assignment action w ipe goal clean n  satisfied
every initial situation initiallyclean fluent clean satisfy action theory 
solving problems would require us make choice existentially quantified predicates check implication satisfied every interpretation
  

fian approximative inference method

universally quantified predicates  done principle  practice
often expensive  paper  explore alternative based propagation
method first order logic developed wittocx  denecker  bruynooghe        
method computes polynomial time  given theory partial interpretation i 
approximation certainly true    true models expand
i  certainly false    false models   now  interesting property
propagation method syntactically represented monotone inductive
definition  denecker   ternovska        defines  in approximative way  underestimates predicates complements  monotone inductive
definition essentially set propagation rules  similar definite logic program 
interpreted least fixpoint immediate consequence operator 
given theory obtain approximating definition linear transformation
original fo formula 
returning example  need find interpretation action predicates  every interpretation predicates  implication act
clean n  satisfied  i e   without knowing anything predicates  already certain implication satisfied  basic idea behind
method approximate problem form p q   using approximate definition wittocx et al  check whether interpretation existentially
quantified predicates p property making true  regardless predicates q 
essentially  reduces problem so id  problem  where so id 
refer extended inductive definitions  
section    extend method so id  problems  argued denecker
ternovska  inductive definitions useful tool knowledge representation 
example  many dynamic domains formulated naturally modular way using
inductive definitions  quite tedious fo  already mentioned conformant planning typical satisfiability problem  typically  conformant
planning problems require modeling dynamic domain  come back
syntax semantics inductive definitions next section  dynamic domain
example     can  alternative action theory tact   formulated following
inductive definition act  


clean t      clean t  

clean t      w ipe t  
   


clean   
initiallyclean 
conformant planning problem formulated alternatively satisfiability problem formula w ipe initiallyclean  clean    act clean n    however 
longer satisfiability problem  so id  satisfiability problem 
motivates us see extend approximation method so id 
satisfiability problems  purpose  first show symbolically represent propagation inductive definitions  next  show use together
representation propagation fo approximate finite domain so id  satisfiability
problems 
approximation method number benefits  first all  general method 
applied automatically approximately solve problem  second 
  

fivlaeminck  vennekens  denecker   bruynooghe

required computation carried off the shelf mx fo id   solver  allowing
method benefit effortlessly improvements solver technology 
idp system marien  wittocx  denecker         finally  show section   
method elegantly generalizes number approximate reasoning methods
literature  e g   baral  gelfond    kosheleva        son  tu  gelfond    morales       
denecker  cortes calabuig  bruynooghe    arieli        doherty  magnusson    szalas 
      son et al         
parts work already presented jelia      conference  vlaeminck  wittocx  vennekens  denecker    bruynooghe        

   preliminaries
assume familiarity classical first order logic  fo  second order logic  so  
section introduce notations conventions used throughout paper 
    first order logic
vocabulary finite set predicate symbols p function symbols f  
associated arity  constants function symbols arity    often denote symbol
arity n s n  interpretation consists domain assignment
relation p dn predicate symbol p n assignment function
f   dn function symbol f n   assume p contains equality
predicate   interpreted identity relation  pre interpretation consists
domain interpretation function symbols   interpretation    
denote i   restriction symbols         two disjoint
vocabularies     interpretation domain j    interpretation
domain    j denotes unique        interpretation domain
 i   j       i   j      j 
terms formulas vocabulary defined usual  expression form
p n ary predicate dn called domain atom  domain literal
p  d 
negation p  d 
thereof  usual  denote formula
domain atom p  d 
 x  indicate set free variables subset x  formula without
free variables called sentence  satisfaction relation    defined usual 

interpretation i  formula n free variables tuple n domain elements d 


use     d  shorthand i   x   d      x   variable assignment 
variable assignment except maps variables
 x   d 
define truth evaluation function   d  
follows 
x domain elements d 





  d     iff     d    d     f otherwise  say formula negation
normal form contains implications equivalences  negations occur directly
front atoms  define inverse truth values follows   f       t     f  
define following strict order truth values  f  t t  truth order
point wise extends interpretations  j two  interpretations  say
j every predicate symbol p tuple domain elements holds
p j  d  

p  d 
similar real number r approximated interval  l  u  l r
u  paper approximate  interpretations k pair  i  j   interpretations 
  

fian approximative inference method

k j  denote  i  j  interval interpretations k 
interval empty  t j  follows easily well known monotonicity
results  evaluate positive occurrences  i e   scope even number
negations  atoms formula i  negative occurrences  i e   scope
odd number negations  j  underestimating truth interval
 i  j   conversely  evaluate positive occurrences j negative occurrences i 
overestimating truth  i  j   state property formally 
introduce following notation 
definition      pos neg evaluation relation  ij    let  formula let j
 interpretations  define pos neg evaluation j  denoted  ij  
induction size  
atom   p  t    ij    
     ij      ji     
         ij   iff i ij          
  x    ij   iff  i x d j x d    t 
indeed that  k  i  j    ij k  ji   also 
k    kk  
intimate connection approximation interpretation
pair interpretations belnaps four valued logic         denote truth values
true  false  unknown inconsistent four valued logic respectively t  f   u i 
truth values  truth order precision order p defined shown figure
  
four valued relation arity n domain function dn  t  f   u  i  
four valued interpretation vocabulary consists pre interpretation p  
four valued relation arity n predicate symbol p n   again 
precision order pointwise extends interpretations  j two  interpretations 
say p j every predicate symbol p tuple domain elements
p p j  d  
similarly  truth order extended interpretations 
holds p  d 
 t 
 t

 p

 t

u 

 i

 p

f 

 t

 t

 i 

 t
 p

 p

u

f

figure    truth precision order
  

fivlaeminck  vennekens  denecker   bruynooghe

natural isomorphism belnaps four truth values pairs two
standard truth values 
 t  t    t 
 f   t    u 
 t  f     i 
 f   f     f  
intuitively  mapping interprets first argument underestimate real
truth value  second argument overestimate  underestimate f
overestimate t  real truth value indeed unknown  whereas  underestimate
overestimate f   cannot exist real truth value  since   f  
end inconsistency  isomorphism extends obvious way isomorphism
pairs  i  j  two valued interpretations four valued interpretations
share pre interpretations   i  j  isomorphic iff  predicate
   p  d  
p j  d   
denote isomorphism  
p n tuple dn   p  d 
tight link pos neg evaluation function  ij belnap
evaluation  
    ij    ji     i  j    i 
three valued structure  i e   never assigns i  corresponds standard
kleene evaluation         rest paper  often omit isomorphism  
and  e g   simply denote four valued truth value formula pair interpretations
 i  j   i j    important property  already stated different notation 
 i j  p k k  i  j  
natural well known alternative way using interval  i  j 
j assign truth value formula   supervaluation  van fraassen        
definition      supervaluation sv i j        supervaluation sv i j     sentence
pair interpretations  i  j   or equivalently  three valued interpretation  i  j  
defined
sv i j       glbp   k  k  i  j    
easy see always sv i j     p  i j    inequality may strict 
instance  take   q q interpretations j q i j    u 
sv i j       t   i j    u  supervaluation following interesting property 
let interpretation free vocabulary formula   q   let  j    j   
 u
least precise pair interpretations q domain  i e   q j   j     d 
n

q n q    sv i j   i j           t 
key approach simulate four valued truth evaluation pairs
interpretations encoding certainly true certainly false  using single
two valued structure tf new vocabulary tf   show next section 
gives us convenient vocabulary syntactically represent construction
approximation  new vocabulary tf contains function symbols f and 
predicate p p   two symbols p ct p cf   interpretations p ct p cf
certainly true
tf contain  respectively  tuples p  d 
certainly false  formally  vocabulary four valued  interpretation
  

fian approximative inference method

   i  j   tf  interpretation tf pre interpretation i  defined
by 
 p ct  i

tf

 d 
p t    p  
   d p

 p cf  i

tf

 d 
p f     dn   p j  
   d p
tf

tf

interpretation three valued iff  p ct  i  p cf  i disjoint p  
tf
tf
two valued iff  p ct  i  p cf  i others complement dn   also  p j  
tf
tf
tf
tf
then  p    p ct  i  p ct  j  p cf  i  p cf  j  
definition      ct cf    given  formula  x   let ct  x  tf  formula
obtained first reducing negation normal form replacing occurrences
positive literals p  t  p ct  t  negative literals p  t  p cf  t   let cf  x 
formula   x  ct  
interesting property formulas ct cf contain negations 
also  following proposition well known 
proposition      feferman         every  formula interpretation i  holds
p  d 
 ij    ct  d  
tf   t  also   d 
p f
 d 
tf
 ji
cf



 d 
  f    d  
  t 
    fo id 
subsection recall fo id   denecker   ternovska         extension fo
construct respresent common forms inductive definitions 
monotone induction  induction well founded order iterated induction 
illustrated denecker ternovska  fo id  used represent different sorts
common knowledge  temporal dynamic domains  closed world assumption  defaults  causality  etc  paper  use definitions symbolically represent
propagation  fo formulas  already mentioned introduction 
propagation inductive definitions themselves 
definitional rule vocabulary expression form x p  t 
p  t  atomic formula fo formula  symbol new connective  called
definitional implication  distinguished fo material implication symbol
 or converse    definition finite set definitional rules  predicate
symbol p head rule called defined predicate  predicate
function symbols called open symbols parameters definition 
set defined predicates denoted def     remaining symbols open    note
open   therefore includes f   
given interpretation open predicates  definition unique model 
constructed firing rules appropriate order  defining
formally  first consider example 
example      reachability graph expressible fo  is  fo
formula vocabulary consisting two predicates edge   reach  
model    d    d    reachm iff non empty path d  d 
  

fivlaeminck  vennekens  denecker   bruynooghe

graph represented edgem   represent reachability inductive definition
however  following definition defines predicate reach terms open predicate
edge 
 
 
xy reach x  y  edge x  y  
xy reach x  y  z reach x  z  reach z  y   
   definition given open   interpretation o 
definition      operator
two valued def    interpretations
define immediate consequence operator

 i    j iff defined predicate p n tuple dn   holds
  iff exists rule x p  t   x   t o i     o i   d 
  t 
p j  d 

model positive definition  i e   defined predicates occur negatively
body rules  defined least fixpoint immediate consequence operator 
use odi open      denote model definition extending restriction
open predicates function symbols   open predicates 
omit subscript simply use od    postpone going detail
construct model general  non monotonic  inductive definition section
   next two sections  use positive definitions 
fo id  formulas inductively defined rules standard fo formulas 
augmented one extra case 
definition fo id  formula  over    
note rule bodies contain definitions  rules occur inside definitions
fo id  formulas whereas definitions used fo id  formulas
anywhere atoms used 
define satisfaction relation    fo id  using standard inductive
rules fo  augmented one extra rule 
     odi open      
on  assume without loss generality definition   holds
every defined predicate p def    defined exactly one rule  denoted x p  x 
p  x    indeed  definition brought form process similar
predicate completion  transformation consists first transforming rules form
x p  t    equivalent rules y p  y  x y       next  one merges rules
form x p  x   x   x p  x     x        n  x   

   propagation fo
section give general  symbolic representation propagation first order logic 
this  base work wittocx et al          come back
precise relation material presented section work end
section 
suppose fo theory vocabulary   pre interpretation  
finite three valued interpretation represents  incomplete  knowledge
  

fian approximative inference method

 clean t       clean t  w ipe t    


a 
act
 

clean t       clean t  w ipe t  
   

clean t     
f    

a   t 
act
     

clean t  w ipe t 
   

clean t 
   

a   t 
act
     

clean t     
cleancf    

w ipe t 
   

clean t 
cleancf    

w ipe t 
w ipecf    

figure    propagation fo 
predicates   would know implications knowledge  assuming
theory satisfied context i  find out  look set
models complete three valued interpretation  i e      m     
p    given partial information i  everything true
must certainly true according   everything false must
certainly false according   words  information allows us
derive captured greatest lower bound g   glbp m 
general  computing greatest lower bound may expensive  the data complexity p    practical use  however  may still achieve useful results
computing approximation p p g  compute
approximation propagating three valued interpretation parse tree
  illustrate following example 
example      consider sentence   clean t      clean t  w ipe t   rewriting
negation normal form  becomes 
clean t       clean t  w ipe t   
now  assume satisfied  know clean false timepoint   
knowledge satisfied  immediately follows that  timepoints t 
disjunctive formula clean t       clean t  w ipe t   satisfied  using fact
clean false timepoint    deduce conjunction  clean t 
w ipe t   true timepoint    therefore  models clean false
timepoint    w ipe clean false timepoint    reasoning process
illustrated left part figure   
construct symbolic representation propagation process  first 
introduce additional vocabulary aux refer different nodes parse
tree process operates  use additional vocabulary transform
fo formula equivalence normal form formula  similar tseitin
transformation        propositional logic 
definition      en f      fo formula negation normal form  introduce
new predicate symbol arity n non literal subformula  x  n
  

fivlaeminck  vennekens  denecker   bruynooghe

free variables  denote set new predicates aux    new
predicate symbols defined formula eq a   follows  make notation simpler
assume             n non literal subformula  definitions analogous
whenever literal  instead ai literal used body
definition 
 x  subformula form    x       x          n  xn    eq a  
x  a  x  a   x    a   x           xn    
 x  subformula form    x       x          n  xn    eq a  
x  a  x  a   x    a   x           xn    
 x  subformula form    x  y   eq a   equals x  a  x 
a   x  y   
 x  subformula form    x  y   eq a   equals x  a  x 
a   x  y   
define equivalence normal form set eq a    denote
en f    
example      according definition  en f    theory example     is 
a  a   t  
a   t  clean t      a   t  
a   t  clean t  w ipe t  
illustrated right side figure   
using auxiliary vocabulary  write propagations shown
figure   following implications 
a 
a      clean   
a     
a     






a      
a      
clean    
w ipe    

note rules top down rules  is  implications propagate information
subformula parse tree  component subformula  possibly
using information components subformula  implication
a     clean    a        general  bottom up propagations course possible 
instance  clean    could derive a       every predicate   derive
eq a   set implications       propagation corresponds
deriving consequent   antecedent    so  different implications
logically equivalent   defined table    last column table indicates
whether rule top down  td  bottom up  bu  
definition      in f      given equivalence en f    certain formula  
denote imp   set implications obtained table   
define implication normal form   denoted f     follows  f      en f    imp   
  

fian approximative inference method

  eq a  

imp  

x  l l        ln   

x
x
x
x

 l        ln l  
 li l  
 l li   
 l l        li  li         ln li   

 in
 in
 in

bu
bu
td
td

x  l l        ln   

x
x
x
x

 l        ln l  
 li l  
 in
 l li   
 in
 l l        li  li         ln li      n

bu
bu
td
td

x  l x  l   x  y   

x   y l   x  y   l x   
x y l   x  y   l x   
xy  l x  l   x  y   
xy   l x  z  y    z l   x  y  y z    l   x  y   

bu
bu
td
td

x  l x  l   x  y   

x   y l   x  y   l x   
x y l   x  y   l x   
xy  l x  l   x  y   
xy   l x  z  y    z l   x  y  y z    l   x  y   

bu
bu
td
td

table    enf inf

work wittocx et al         proven models models f   
true correspond  sense restriction model f   
model   vice versa  every model extended model
f      implications form core approximation method 
approximation could made complete adding implications
f     definition tries strike balance completeness ease
automatically deriving implications 
example      three formulas en f    example      following
table shows corresponding set implications imp    complete theory f   
consists union three sets 
a  a   t  
 t a   t   a   
 t a   t   a   
 a  a   t   
  a  t   t    t 
a   t      a   t   

 a   t  clean t      a   t   
 clean t      a   t  a   t   
 clean t      a   t   
 a   t  a   t   
 a   t  clean t       
 a   t  a   t   
 a   t  a   t  clean t       
 a   t  clean t      a   t   

 a   t   clean t  w ipe t    
 clean t  w ipe t  a   t   
 clean t  a   t   
 w ipe t  a   t   
 a   t  clean t   
 a   t  w ipe t   
 a   t  w ipe t  clean t   
 a   t  clean t  w ipe t   

reader verify four implications representing propagation example    
indeed belong f    
propagation process example     described least fixpointcomputation  apply implications  i e   infer head body
already inferred   longer infer new information  represent
fixpoint computation inductive definition syntax fo id   however 
two complications 
  

fivlaeminck  vennekens  denecker   bruynooghe

first  paper  always need implications f     indeed 
typically subset symbols already know
know  conformant planning example  instance  case
existentially quantified predicate w ipe    simply use model expansion
system guess complete interpretation predicate  job propagation
process figure consequences particular guess  this  implications predicate  i e   w ipe    head obviously needed 
second  fixpoint computation needs infer atoms true
false  however  syntax fo id  allow negative literals
heads rules  therefore  definition contain rules predicates p
original vocabulary head  instead use predicates p ct p cf
tf  vocabulary  since need rules fully known predicates head 
introduce p ct p cf predicates p    
ct
ct
given formula   therefore define ct
formula  see definition      p
cf
replaced p p p every predicate p  
definition      approx      formula   define approx   
inductive definition contains  every sentence x   l x   f    l
ct
literal predicate   definitional rule x l x ct
   define
td
approxbu
    and approx     way approx     containing
definitional rules coming bottom up  respectively  top down  rules f    
often assume without loss generality     whenever case
drop use approx   rather approx     denote approximative
definition 
example      using implications f    example      obtain definition
shown figure   approx    take    w ipe   get definition
approx    figure    apart last seven definitional rules replaced
following five definitional rules 


  




 






ct
cf



 t 

clean
 t 

w
ipe t  


 


cf

ct
a   t 
clean  t  


w ipe t  
acf

   t 




cf
ct




clean
 t 


 t  
 






cf
ct
clean  t  a   t  w ipe t  
contrast approx   definition longer approximates predicate w ipe 
definition approx    used find certainly holds holds given two
valued interpretation predicates  
example      larger example  look example      let us take
  act    w ipe   definition approx    found appendix
a 
approximative definition useful properties  formulate
next two theorems  first property that  using approximative definition
  

fian approximative inference method

ct
a 



cf



 


ct


a   t 




acf

   t 







acf

   t 


ct



   t 

ct


a   t 



cleancf  t     


cf
a   t 
cleanct  t     




act

   t 







act

   t 


cf



   t 


cf



   t 


cf


clean
 t 


cf


w
ipe
 t 




cleanct  t 



w ipect  t 


act

   t  




acf
 t  
 


ct


a   


cf
 
 
ct  

a   t    a   t    







cf
cf
clean  t      a   t  



ct

clean  t      



ct

a   t  



cf


a   t  



cf
a   t  
cf

act
   t  a   t  


ct


a   t  cleancf  t      






cf
cf

clean  t  w ipe  t  




cleanct  t  





w ipect  t  




act
 t  
 




act
 t  
 


cf

cf

a   t  w ipe  t  



cf
cf
a   t  clean  t  

a 

a   t 


a   t 

clean t     



clean t 

w ipe t 

figure    example approximative definition
together encoding three valued interpretation original vocabulary 
give exact characterization approximative definition computes  indeed 
setting  approxbu    actually encodes three valued kleene evaluation
i  moreover  adding top down rules change this  since compute
actually anything  long information original vocabulary provided
input  formally state property  need define encode
four valued interpretation definition  on  assume vocabulary
 pre interpretation i  contains constant symbol cd every domain element
domain i  pre interpretation holds  cd  i   d 
allows us identify cd therefore  abusing notation  use denote cd
follows 
definition      i    given four valued  interpretation i  definition associated
denoted defined


 

  p  d 
p t 
 p ct  d 
cf



 p  d    p  d  p f  

theorem      given  formula four valued  interpretation i  following
holds 
a  case three valued holds approx   logically equivalent
approxbu      is  od approx       od approxbu     
  

fivlaeminck  vennekens  denecker   bruynooghe

b  let od approx      v  truth value act
v  truth

value acf
   v    v    corresponds four valued truth value   i e  
   v    v    

proof  see appendix b 
summary  theorem says that  first all  approximation always
computes four valued belnap evaluation four valued structure i  moreover 
computation done bottom up rules approximation alone  threevalued  top down rules actually effect all  four valued 
may still serve purpose  however  bottom up rules derived
subformula inconsistent  propagate information derive smaller
formulas inconsistent  see this  consider following formula p q  take
four valued interpretation p   q   t  one verify
cf
bottom up rules approx   infer act
p q ap q true 
however  top down rules infer qcf true 
theorem information add approximative definition
form definition   i e   assert truth  resp  falsity domain atoms 
following definition allows us assert truth falsity grounded

subformula  d  
definition          given  formula    pre interpretation i  set
 x  subformula arity n dn
formulas    d  
domain i  define follows 
cf



   act
 d     d     a  d     d    

assert way truth  or falsity  set grounded subformulas  
obtain approximation everything holds  respectively  hold 
models   however  opposed theorem above  next theorem
give exact characterization approximation get 
theorem      given  formula   set defined subformula    x   
cf  
   
 
  let od approx         act
   d    resp  a   d         d  
 resp        d     
note interesting special case theorem take equal   
thus add act
approx    definition gives approximation everything
certainly true resp  certainly false models  
returning exact relationship work wittocx et al        
content section  see wittocx et al  interested special
case  i e   approximating models theory  reason transformation
formula en f    already includes formula t  cause rule
act
always included approximating definition  soundness results
formulated proven setting  however  difficult see
proofs trivially adapted proof theorem     general setting
used section 
  

fian approximative inference method

   approximating so satisfiability problems
use approximate definition previous section approximate following problem  take formula f   p q     ease presentation 
assume second order formulas paper contain free predicate symbols 
results generalize setting free predicate symbols  assume
q contains predicate symbols  follows  denote vocabulary
  question want answer whether formula f satisfied given
finite domain pre interpretation constant function symbols formula 
satisfiability problem boils deciding whether find witness
satisfiability formula  following sense 
definition      witness   call j witness satisfiability formula p q  
given finite pre interpretation i  j interpretation   q extending  i e   j
interpretation whole vocabulary without universally quantified predicates 
q   satisfied j  equivalently  j witness three valued holds
interpretation j expands j assigning u domain atom q d  
svj      t 
goal section approximate satisfiability problems
satisfiability problem following sense 
definition      sound approximation   consider satisfiability problem
formula p q     fo formula alphabet   so id  formula
form p r         fo id  formula alphabet   q r  sound
approximation satisfiability problem if  whenever j witness satisfiability
p r       j  q witness satisfiability p q    
words  sound approximation g satisfiability problem
formula f stronger so id  formula  i e   one fewer witnesses p  
    naive method
use results theorem     construct sound approximation given
formula 
definition      app f     given formula f   p q     take alphabet
function symbols predicates p   define app f   formula
tf
p r   approx    act
vocabulary r  r    q aux     
intuition  interpretation i  approx    give result
four valued evaluation  interpretation expands assigning unknown universally quantified predicates q  entire fo formula evaluates
true four valued interpretation  know satisfied interpretation expands  in words  every interpretation q predicates   thus
witness satisfiability entire formula f   auxiliary predicates
aux   introduced transformation enf needed way
propagation works  value completely determined p  
  

fivlaeminck  vennekens  denecker   bruynooghe

proposition      formula f form p q     holds app f  
sound approximation f  
proof  follows immediately theorem      take three valued inter   u q q dn  
pretation  interpretation  q d  
   p  d  
p p dn   domain i 
 p  d  
example  take f formula p q     p q  app f  
becomes 
ct

ct


p

q






acf p qcf

cf
ct
cf
ct

p  q   q      
act
 
ct act p
q







cf

q acf

start interpretation open predicate p definition approx p      
let us take interpretation makes p true  unique model definition
ct
cf
extends interpretation assigns true act
false q   q
ct
acf
  therefore  satisfies approx p        hence  witness
satisfiability app f    and  indeed  witness satisfiability original
formula p q   p q 
approximation method sound  many applications still incomplete 
indeed  let us look following formula  f   q   q q  app f   becomes 



qct qcf
act






cf
cf qct




q






qct act qct

cf

 
 

qct   qcf   act
act

 
cf acf



q






cf


qcf act


q




qct acf



definition entail act
  app f   unsatisfiable  even though original formula f clearly always satisfied  problem that  showed
previous section  definition encodes three valued kleene evaluation 
strong enough find formula f satisfied  this  need stronger
supervaluation 
recall preliminaries saw supervaluation kleene evaluation
general equal  however  formulas equal  literature  several
classes formulas agree proposed  e g   context locally
closed databases  denecker et al          context reasoning incomplete
first order knowledge  liu   levesque         latter introduces normal form n f
first order formulas  supervaluation coincides kleene evaluation 
proves certain classes formulas normal form n f  one class
cnf formulas every two literals conflict free  pair literals
conflict free either polarity  use different predicates 
use different constants argument position  immediately follows
  

fian approximative inference method

approximation complete formulas first order formula satisfies
condition 
proposition      formula f form p q     n f
normal form  according liu   levesque        satisfiable respect given finite
pre interpretation so formula app f   satisfiable w r t  i 
proof  follows immediately results liu levesque theorem     
    complete method
unfortunately  many applications give rise formulas first order part falls
outside class n f  means completeness method guaranteed 
particularly troublesome practice formulas common form p q        
formulas  naive approximation method previous section tries find
interpretations p implication          holds q  however 
look details approximative definitions  find act
defined rule
cf
ct
body       words  approximation derive holds
q either case   false q   true q  however 
rarely case  practical applications  witnesses interest
typically satisfy implication     always falsify   always
satisfy     rather interpretation q satisfies   satisfies   
instance  conformant planning example  always interpretations
fluents satisfy action theory act   arbitrarily assign
fluent value wrong initial value actions performed  even
set actions completely correct conformant plan  therefore cannot make goal
certainly true  still unsatisfied wrong interpretations
fluents  course  bother good method finding conformant plans 
thing matter goal satisfied interpretations
fluents satisfy action theory 
luckily  approximation method used discover kind witnesses 
thing required add approximative definition   approx   
rule act
  t  do  seed approximation assumption  
holds  starting assumption  top down rules derive properties
predicates q shared interpretations q actually satisfy    
bottom up rules propagate information upwards discover whether
properties suffice ensure   holds  do  know   indeed
must hold every interpretation q satisfies   therefore found
witness formula 
want find witnesses kind degenerate witnesses either make
  false q   true q  could simply combine new method old
ct
ct
one check either whether act
  holds according  a  t  whether holds
according itself  however  turns necessary  achieve
ct
effect checking whether  act
  t  implies   because  first 
ct
definition  act
  t  able derive whenever can 
ct
ct
derive a   a  t  obviously still able so  would
  

fivlaeminck  vennekens  denecker   bruynooghe

ct
able derive acf
     a  t  able so  simply
approximation flow information ct cf variants
formula  additional assumption act
  holds change original derivation
ct
ct
ct
acf
    second   a  t  derive a    derives   simply
cf
ct
contains rule act
a  a    therefore  find kinds witnesses
ct
checking whether act
implied single definition  a  t  

definition      app  f     formula f   p q    
definition
form       define app  f   p r   act
 
ct
approx         a  t  
note obtain definition     special case taking trivial formula
    approximation method still sound  following proposition states 
proposition      given formula f form p q            
so id  formula app  f   sound approximation f  
proof  see appendix c 
since approximative definition app  f   contains rules approx f   
hard see new approximation method least complete one
using app f    definition       moreover  seen following example 
strictly complete 
example      let us consider following formula f   p q    q p   q 
p   clearly witness satisfiability problem  denote  q p   q
   q p       app f   following formula 

act

 


cf






ct 
a 
p r  

acf
 



ct

q


cf
q








ct
acf
  q
ct
a  qcf
p qct
p qcf
act
  p
acf
 











act
   










now  even p   t  definition body formula entail act
    t 

therefore  app f   satisfiable  hand  app  f   formula
above  apart definition contains one rule  is  rule act
  t 
easy verify app  f   satisfiable  indeed p   witness 
obviously  new method still complete formulas          
satisfies normal form n f  however  method works many formulas outside
class  unfortunately  difficult characterize precisely much complete
new method is  instance  one source loss completeness comes fact
current translation enf cannot recognize multiple occurrences subformula 
introduce different tseitin predicate occurrence  even though cannot
  

fian approximative inference method

guarantee completeness method general  always found solutions
conformant planning benchmarks considered section   
final remark method approximative definition approx   
    contains number rules superfluous context  indeed  method 
definition takes input interpretation p together assumption
  certainly true  uses bottom up top down rules derived  
compute effect inputs predicates q  finally  rules derived  
compute whether derived information q suffices make   certainly true 
however  know theorem      bottom up rules   needed
this  therefore  top down rules   actually contribute nothing could

td
well removed  adapting definition     use
bu     approx      instead

leads following definition 
definition      app
bu  f     formula f   p q    
ct

form       define app
bu  f   p r   bu  
td
ct

bu   approx          approx       a  t  

follows directly theorem     proposition     sound approximation  removed top down rules approximation     remaining
rules serve  already know  compute kleene evaluation    
computing kleene evaluation subformula     use
pt
tseitin predicates act
  alternative avoid tseitin predicates
defining act
  directly single rule 
ct
act
      

variant summarized following definition 
definition      app
bu u nf  f     formula f   p q    
ct

      define app
bu u nf  f   p r   bu u nf  
ct
ct
ct

bu u nf   approx      approx       a          a  t  

approximation actually equivalent def       follows
fact bottom up rules   positive non recursive  allows us
eliminate tseitin predicates introduced parse tree   applying unfolding
procedure tamaki sato         iteratively applying equivalence preserving
procedure  reduce rules generated approximate  
ct
single rule act
        

   approximating so id  satisfiability problems
inductive definitions important knowledge representation  argued denecker
ternovska         inductive definitions used represent mathematical
concepts  sort common sense knowledge often represented logic
programs  dynamic domains  closed world assumption  defaults  causality  etc 
  

fivlaeminck  vennekens  denecker   bruynooghe

therefore  inductive definitions make task representing problem logic considerably easier  example use inductively defined situation calculus
reasoning actions  denecker   ternovska         recall introduction
showed represent tact example     inductive definition act  


clean t      clean t  

clean t      w ipe t  
 


clean   
initiallyclean 
associated conformant planning problem expressed so id  satisfiability problem 
w ipe clean  initiallyclean   act clean n  
show detail section    general conformant planning problem
seen satisfiability problem form
f    act init    prec goal   
ai
predicates represent actions  initial fluents f fluents 
definition act defines fluents change terms action  init first
order formula initial situation  prec describes preconditions actions
goal goal  motivates extension approximation method formulas
including definitions  however  analyze general case definitions may
appear arbitrary locations formula  instead restrict attention formulas
form
p q            
definition def    q     fo formulas  even
though restrictions strictly necessary  allow us keep technical
details relatively simple  in particular  avoid need approximation rules infer
definition whole certainly true false   still covering way
definitions typically used  assumption predicates indeed
definition formula   say be    states properties
satisfy 
extend approximative method         satisfiability problems 
need syntactic representation  i e   approximative definition  describes sound
inferences made definition three valued context  section
propose two ways obtain approximative definition  accordingly  two ways
approximate         satisfiability problems  continue  first
need recall preliminaries 
    preliminaries well founded semantics inductive definitions
earlier  defined model positive inductive definition given two valued interpretation open predicates  on  inductive definitions longer
positive definitions  model definition longer always computed
least fixpoint immediate consequence operator introduced section    moreover 
  

fian approximative inference method

follows want use inductive definitions together four valued information
open predicates  for example  information obtained propagation
first order theory   therefore  recall  see  e g   denecker   ternovska       
define well founded model non monotone inductive definition  that is  negation
body rules allowed   given four valued information open predicates  denote w f mo     order this  first need define
additional concepts  recall p denotes body unique rule predicate p
head 
definition      operator    definition given  potentially   valued 
open   interpretation o  define operator   valued def    interpretations
domain open    i    j iff defined predicate p n
n tuple dn   holds
  o i  d 

p j  d 
p
recall preliminaries defined isomorphism maps pair
interpretations  i  j  corresponding four valued interpretation i 
definition      w f mo      define well founded model   valued
o 
interpretation  i  j   i  j  maximal oscillation pair operator st


st operator j lf p k t  k  j       i e    i  j  least precise pair
  valued interpretations


  st
 j  j   st
 i  

explanation order  first look operator k to  k  j      operator takes def    structure k  turns   valued one combining j 
applies operator   projects result first argument  see
k to  k  j       l iff defined predicate p n n tuple dn   holds
  iff  p  d  
  o   l  o   j   
p l  d 
words  positive occurrences atoms evaluated o    l  negative occurrences
o    j  j  operator k to  k  j     monotone  therefore
maps j least fixpoint  proven
least fixpoint  operator st
operator antimonotone  therefore maximal oscillation pair  definition
nonof well founded model maximal oscillation pair operator st
constructive definition  maximal oscillation pair constructed iterating
following operator  starting least precise interpretation extends o 
reaches least fixpoint 

definition      stable operator st
   define operator st pairs interpretations as 


st
 i  j     st  j   st  i   

stable operator monotone w r t  precision order p pairs interpretations
fixpoints therefore form complete lattice  fixpoints operator called
  

fivlaeminck  vennekens  denecker   bruynooghe

four valued stable fixpoints   least precise fixpoints precisely
well founded model given o 
define semantics inductive definitions general case 
reader easily verify indeed generalizes definition odo    positive
definitions gave section     
definition      satisfaction relation definitions      iff  i def      i def     
well founded model i open    
note definition three valued well founded model every possible
interpretation open predicates open    definition model  i e 
exists interpretation       call definition total
two valued well founded model every possible two valued interpretation open
predicates 
definitions generalize rather obvious way standard well founded
semantics propositional logic programs strongly linked stable semantics  gelfond   lifschitz         case propositional logic program  
open         operator k t  k  j     nothing else immediate consequence operator tj gelfond lifschitz reduct j   operator maps
j lf p k t  k  j     stable operator   shown van gelder        
maximal oscillation pair indeed well founded model  
    approximating so id  satisfiability problems
assume formula   fo id  formula instead fo 
concepts witness  definition      sound approximation  definition      straightforwardly generalised fo id  formula  allows us develop two
approaches  first one  section        replaces definition completion
applies method section    however  completion weaker
definition  therefore  section        develop another approach constructs
approximation conjunction definition fo formula 
      using completion definition
first approach based use completion  clark         completion
definition conjunction equivalences x p  x  p  x  predicates
p def     p  x  body unique rule p head  useful
property definition implies completion compl    moreover  nonrecursive  two actually equivalent  replacing definition completion
        obtain formula  comp           every model
model comp    every model  comp         model        
every witness  compl         satisfiability problem witness
        satisfiability problem  hence use results section  
formulate following proposition 
proposition      formula app
bu   compl           sound approximation
p q         
   

fian approximative inference method

disadvantage using completion matter complete approximation method defined definition     is  never able infer something
follows compl    instance  inductive definition  p p  
entails p   completion p p not 
denecker ternovska        proven that  addition non recursive definitions  class recursive definitions equivalent completion  particular 
case definitions strict well founded order     therefore replace
definitions completion without losing precision  theory tact example
    actually completion definition act   since act recursive definition
strict well founded order  we make use time argument predicates
construct well founded order   act tact equivalent 
gaspipe conformant planning problem  son et al          hand  uses
dynamic domain completion suffice  summarized  objective
conformant planning problem start flame burner connected
gas tank pipe line  pipe line consists sections connected
valves  valve opened gas one side other  gas
spread far possible  formalized inductive definition
reachability relation pipe line 
 
 
x  gas x  t  gas y  t  v connected x  y  v  open v  t  
x  gas x  t  ank x  
reachability definitions equivalent completion  therefore  approximative method presented subsection work  problem completion
case correctly minimize defined predicates presence
recursion  would allow models loop pipe line filled gas even
connected tank  missing  therefore  unfounded set reasoning allows well founded semantics correctly minimize defined predicates 
      using certainly true possibly true approximation
approximative definition approx    used section   nice property
defines  subformula  including itself   whether certainly true certainly
false  property allowed us find witnesses simply asserting act

hold according definition  want apply method formulas
contain definition   construct approximative definition defines
whether subformulas  including itself  certainly true certainly
false  section        naive method managed simply replacing
completion  want improve method constructing approximation
takes account unfounded set reasoning performed well founded
semantics 
take aspect well founded semantics account  however 
becomes difficult define definition whole certainly true certainly
false  luckily  needed stick assumption definitions appear
antecedent implication   indeed  approximate implications
   order   well founded infinite descending chains         xn   xn            x 

   

fivlaeminck  vennekens  denecker   bruynooghe

assuming antecedent certainly true  definition       really need
approximation consequences definition  end  transform
original definition approximative definition   well founded
model     given approximation open predicates   approximates
well founded models given interpretation open predicates
approximated o  words  construct approximative definition   whose
two valued well founded model encodes potentially four valued well founded model
original definition   given potentially four valued interpretation predicates
  therefore represent four valued interpretation orginal vocabulary
two valued interpretation larger vocabulary     however  instead introducing 
predicate p   predicate p ct  p certainly true  p cf  p certainly false  
before  introduce predicates p ct p pt  p possibly true  i e   p
certainly false   let ct pt denote vocabulary f  p ct   p    p pt   p   
four valued  interpretation i  define corresponding ct pt  interpretation ct pt
ct pt
interpretation pre interpretation  p ct  i
   d  
ct pt

pt





p  d  p t   p  
   d    p  d  p t   
also   formula   define formula ct pt formula obtain
replacing positive occurrences predicate p p ct   negative occurrences
p pt   finally reducing negational normal form  easy see ct pt
obtained ct replacing  every predicate p   occurrences p cf p pt  
unlike ct   ct pt always positive formula contain negations  particular 
p ct occurs positively p pt occurs negatively  subvocabulary  
ct pt

denotes ct pt p ct p pt replaced p every predicate
p   again  follows use denote predicates need
approximated two valued information them 
ct pt

ct pt

definition      app      definition   define app
 rct rpt   rct consists rules

   definition

x p ct  x  ct pt
 

rpt consists rules
x p pt  x    ct pt
 

every definitional rule x  p  x     
assume rest paragraph without loss generality empty 
ct pt
drop notation app  
example      consider following inductive definition 


b b

assume      

appct pt

ct
b


ct

 
pt
b


pt






   

b ct apt
dpt
b pt act
dct









 

fian approximative inference method

see three valued interpretation  d   u   translates  dct   f   dpt  
t   approximative definition correctly infer b ct false b pt true 
take  d   f   interpretation open predicate d  see approximative
definition correctly infers b ct b pt false  example unfounded
set reasoning  known true  approximation detects b could
derived b therefore must false  kind reasoning could done
previous  completion based approximation method  since sound w r t 
semantics definition itself  w r t  weaker completion 
example demonstrates use vocabulary ct pt instead
ct cf   since latter would yielded definition 
ct

b
b ct acf



ct


dcf
 
b cf b cf act



cf


dct
 d   f    definition would fail infer b cf   intuitively  reason
unfounded set reasoning well founded semantics tries minimize extension
defined predicates making many atoms false possible  using ct cf
vocabulary  well founded semantics approximating definition therefore attempts
possible  actually corresponds maximizing
falsify many atoms p cf  d 
possible extension original predicates p   instead minimizing well founded
semantics original definition does 
two valued interpretation double vocabulary ct pt corresponds fourvalued interpretation original vocabulary   want establish link
ct pt
well founded model original definition app   complict pt
cating factor that  example shows  definition app
longer
monotone therefore longer guaranteed two valued well founded model 
three valued interpretation ct pt longer corresponds even four valued
interpretation original vocabulary   prove correspondence
ct pt
well founded model app
two valued 
theorem      let four valued interpretation open predicates definition
  appct pt    two valued well founded model given oct pt
unique four valued stable fixpoint given o  moreover  appct pt    two valued wellfounded model i  unique four valued stable fixpoint unique interpretation
ct pt   i 
proof  see appendix d 
theorem requires unique four valued stable model four valued
input interpretation o  stronger requirement common condition
totality  requires definition two valued well founded model given
two valued input interpretation o  following example shows  stronger condition
indeed necessary 
   

fivlaeminck  vennekens  denecker   bruynooghe

example      consider following definition 




b 

b c 




c o 
definition total  because  two valued interpretation open predicate
o    a    a   two valued well founded model  however  three valued
interpretation       o    i e   unknown  open predicate o  three valued
well founded model       o  a  b  c   unique three valued stable fixpoint  since
  a    o  a  c   fixpoint  indeed  find
ct






b ct



c ct
ct pt
app
    

apt



b pt



pt
c

b pt  






apt c ct  


ct
pt
 

b ct  



ct
pt
c  


pt
ct
 

two valued well founded model given  opt    easiest way see
fill fact know opt oct f propagate information 
ct

b pt  






ct
pt
ct



b c  






c ct f t 



apt b ct  








pt
ct
pt


b



c
 




pt

c f  

ct

b pt  






ct
pt



b f  









ct

b pt  


















ct

b pt  




















apt b ct  








pt
ct


b



t 




pt

c


apt f  







pt
ct


b


 




pt

c



apt








pt
ct


b


 




pt

c

so  left loop negation  means act b pt remain unknown
three valued well founded model   apt   c pt     act   apt   c pt   b pt    definition 
computing three valued well founded model given o  approximative definition appct pt    produce precise results approximation compl   
particular detect atoms unfounded set must false  illustrated
example     above  use appct pt    approximation       problem 
still need show combined approximation approx   
produce sound approximation   this  need combine one definition
ct cf predicates another definition ct pt predicates  achieve first merging
two definitions adding rules copy information one vocabulary
other 
   

fian approximative inference method

definition      d    given vocabulary   subvocabulary   inductive
definition first order formula   define following inductive definition 
ct pt

app

 ocf

  

approx     act
t 

 opt ocf   every predicate open      

 p cf p pt   every predicate p def       

ct
f   f   every predicate open     occur  

definition indeed contains rules approximation rules
approximation   is  appct pt    approx    act
t   respectively 
number extra rules make connection two approximations 
approximate defined predicate q approximation uses pair predicates
qct qpt approximation uses qct qcf   hence  number extra
rules needed transfer information predicates qpt qcf   rules
 opt ocf   transfer information approximation derived
truth open predicate  by means ocf   corresponding predicate opt
approximation definition  rules  p cf p pt   turn propagate information
derived truth defined predicate approximation definition
corresponding predicate p cf approximation   finally  rules  ocf f   oct
f   make sure ocf oct defined atoms  instead open ones 
default value u  following proposition relates well founded model
models  
proposition      given vocabulary   subvocabulary fo id  formula  
 resp  p cf  d   
holds
then  every  interpretation i  w f mi  d      p ct  d 
 resp     p  d   

every model extending    p  d 
proof  see appendix e 
proposition analogue inductive definitions result theorem    
states fo formulas  one difference two results proposition always assumes definition holds  theorem     makes
assumption fo formula approximated  discussed beginning
section  restriction problem  way approximate
implications allow definitions appear antecedent  second
difference theorem     applies arbitrary subformulas  
is  however  easy corrolary proposition
proposition considers atoms p  d  
result fact holds formula contains predicates defined
 or cf  d   
every model
  i e   whenever w f mi  d      ct  d 
 resp      d   

extending i  holds     d 
introduced approximation appct pt    aim complete
completion based approximation  long single definition considered
   

fivlaeminck  vennekens  denecker   bruynooghe

isolation  succeeded goal  however  incorporated
additional formula   longer case  instance  consider following fo id 
theory 


q p q 
here  approximation cannot derive p certainly true  simply
ct pt approximation appct pt    contain rules head to body propagation  i e  
rules infer something body definitional rule  given information
head  contrast  approximation completion contain rules
therefore problems reaching conclusion  motivates us use
use d compl    instead  definition implies completion 
sound 
obtain sound approximation so id  formula p q    
      need plug approximation d compl   
suitable so id  formula  similar one defined definition    
formula p q       small complication  however  that  discussed previously 
cf
approximation definition define predicates act
tell us
definition whole certainly true certainly false  therefore  longer
use normal approximation entire implication certainly true 
present approximation so id   let us first introduce reformulation
original approximation so  avoids use act
 
proposition      formula f   p q     form      
approximation defined definition      i e   formula
ct
p r    approx         act
  t  

equivalent
cf
ct
p r    approx      appox       act
  t    a  a   

proof  obvious fact difference approx       
approx      appox      precisely set rules ensure act
equivalent
ct
acf
  a   

approximation so id  essentially consists replacing approx     
compl  
cf
 act
acf
form 
  t  a  respectively
proposition      given so id  formula f   p q         define
app wf  f   following so id  formula 
ct
p r    dcompl   approx        acf
a    

app wf  f   sound approximation f  
compl  

cases  approximating
instead gain us anything  instance  consider p q      problem  contains open
predicates  as case conformant planning problems consider next
   

fian approximative inference method

sections   case  never need head to body propagation  therefore
compl  
complete
  therefore better using former 
case approximation method   well rules
definition app wf necessary  indeed  bottom up rules approx     
needed  unfolded single rule  therefore  define two
variants definition     
definition      app wf
bu  f     given so id  formula f   p q        
wf
define app bu  f   following so id  formula 
cf
ct
p r    dcompl   approxbu
       a a    

define app wf
bu u nf  f   following so id  formula 
ct
cf
ct
p r    dcompl    act
           a a    

   experimental evaluation
paper seen number methods approximate so id 
satisfiability problems  subsection  explore  number experiments 
use methods solve practically useful problems fast possible 
performed experiments number conformant planning benchmarks
paper son et al          show section    benchmarks
form f     stratified definition  therefore equivalent
completion  therefore  f equivalent formula compl    
denote f cp   experiments run dual core     ghz cpu      gb ram
linux machine  using idp model expansion system fo id   marien et al         
time out twenty minutes used 
first question want answer whether definitions  completion
based approximation faster ct pt approximation  hard see that  even
though approx compl    linear size parse tree compl    definition
may contain rules appct pt     moreover  rules may contain lot
recursion  pose challenge current solvers  suggests likely
efficient use ct pt approximation definitions  first column table  
shows times using completion definition   is  app  f cp   
second column  ct pt approximation used  is  app wf  f    expected 
ct pt approximation consistently faster 
table   compares solving times full completion based approximative definition
cp
 in first column  approximation app
bu  f    def        topdown propagation rules removed  third column   see bt
btc benchmarks get order magnitude improvement  fourth column
cp
table   shows timings unfolded approximation     app
bu u nf  f   
intermediate tseitin predicates removed  def        see unfolding
consistently provides speed up 
results suggest combining techniques  is  using ct pt
approximation unfolding bottom up approximation   together 
   

fivlaeminck  vennekens  denecker   bruynooghe

app  f cp  

app wf  f  

cp
app
bu  f  

cp
app
bu u nf  f  

app wf
bu u nf  f  

bt     
bt     
bt     
bt     
bt      

     
     
     
 

     
     
     
 

     
     
     
     
 

     
     
     
     
 

     
     
     
     
     

btc     
btc     
btc     
btc     

     
 

     
 

     
      
 

     
     
 

     
     
     
      

     
     
     
      
 

     
     
     
     
     

     
     
     
      
 

     
     
     
      
 

     
     
     
     
     

     
 

     
 

     
 

     
 

     
     
     
       
    

problem

domino     
domino     
domino     
domino      
domino      
ring   
ring   
ring   
ring   
ring    

table    first column gives name benchmark ones different
execution times  second column gives execution time approximation
completion third cp pt approximation  fourth fifth column use
variants completion approximation  fourth column  top down rules
  removed addition  fifth column  remaining bottom up rules
unfolded  last column combines cp pt approximation changes   
means execution interrupted    minutes 
give us fastest way approximating         satisfiability problems  indeed 
formula app wf
bu u nf  f    definition      does  results method
shown last column table    expected  far fastest method 

   applications related work
literature  many examples found approaches perform kind
approximate reasoning models logical theory  often  approaches 
specific problem hand  seem boil instantiation general
methods presented here  section give examples 
    conformant planning
general  conformant planning problem planning problem non deterministic
domain initial state may fully known  goal come
plan  i e   sequence actions  nevertheless guaranteed work  hard
problem  decision problem deciding whether conformant plan fixed length
k exists p   complete   baral  kreinovich    trejo        turner         therefore  one
   planning domains executability actions given state cannot determined polynomially  even p
   turner       

   

fian approximative inference method

typically attempts solve approximately  section  show apply
approximative methods solve conformant planning problems 
example      let us consider clogged bombs toilet domain  mcdermott       
son et al          number packages toilet  packages may
contain bomb disarmed dunking package toilet  dunking
package toilet clogs toilet cannot throw package clogged toilet 
flushing toilet unclogs it  effects actions fluents modeled
following definition act   preconditions conjunction prec sentences
tprec  

act



clogged    init clogged 





clogged t      p   dunk p  t   clogged t  f lush t   

 


armed p     init armed p  






armed p       armed p  t  dunk p  t  

tprec

p   dunk p  t  clogged t  
  p   dunk p  t  f lush t   
 
p p    dunk p  t  dunk p    t  p   p   
p t    dunk p  t  dunk p  t      t   

consider following regular planning problem  given completely specified initial
situation  specified formula init    find plan packages disarmed 
formulate problem following formula 
a  f     act prec init  t p armed p  t   
a  denote action predicates  dunk    f lush     f denote
fluent predicates  armed    clogged    denote predicates used
describe initial situation  init clogged    init armed     imagine initial
situation specified  want find plan works possible initial
situations  words conformant plan  formulate problem finding
plan follows 
f     act  prec p armed p  t   
formalized general follows 
definition      conformant planning   let vocabulary  consisting set
predicates a  denoting actions  i  denoting initial fluents  f denoting fluents  let
tact fo id  theory tinit   tprec tgoal fo theories    tact
specifies values fluents given interpretation actions initial fluents 
tinit theory specifying initial situation  tprec contains preconditions actions 
tgoal specifies goal planning problem  act denote conjunction
sentences possibly definitions tact similarly theories 
problem conformant planning decide satisfiability following formula 
f    act init    prec goal   
   

   

fivlaeminck  vennekens  denecker   bruynooghe

ar  


cloggedct    



ct  t     

clogged




armedct  p    




armedct  p      




cloggedpt    




cloggedpt  t     




armedpt  p    




armedpt  p      




init cloggedct




init
armedct  p 

init cloggedpt


init cloggedcf




init
armedpt  p 




armedcf
init



cf  t 

clogged



cf  p  t 

armed




act

 

































init cloggedct  
p   dunk p  t   cloggedct  t  f lush t   
init armedct  p  
armed p  t  dunk p  t  
init cloggedpt  
p   dunk p  t   cloggedpt  t  f lush t   
init armedpt  p  
armed p  t  dunk p  t  
f 
f 
init cloggedcf  
f 
init armedcf  p  
f 
cloggedpt  t  
armedpt  p  t  
pt   dunk p  t  cloggedcf  t 
 pt   dunk p  t  f lush t  
p  p    dunk p  t  dunk p    t  p    p 
pt  t    dunk p  t    dunk p  t    t    t 
tp   armedcf  p  t  














































































act
   

figure    complete approximation clogged bombs toilet example 
words  must plan  a   matter nondeterministic
f    long specification effects actions  act  
aspects turn  i 
 partial  specification initial situation  init   obeyed  plan
executable  prec   achieve goal  goal   
formula   exactly form assumed above  thus use one
methods approximate conformant planning problems 
example       continued  continuing clogged bombs toilet example 
using ct pt approximation definition  unfolding constraint  prec
p armed p  t  ct   get approximating formula app wf
bu u nf  definition      
shown figure    r ct  cf predicates introduced approximation
method 
result applying general approximation method conformant planning
problem  specified tact   tprec   tgoal tinit above  similar approximation al action theory logic program work son et al         
however  small differences details make difficult formally
compare two  nevertheless  experiments discussed section  method
always finds correct solution  unless times out   method son et al 
moreover  two approaches found solutions comparable execution times 
detail  table   presents following results  implemented conformant
planner iteratively calling idp model generator fo id   marien et al        
approximation  giving increasing number timesteps either plan
   

fian approximative inference method

problem

idp

smodels

cmodels

bt     
bt     
bt     
bt     
bt      

     
     
     
    
    

     
     
     
    
 

     
     
     
    
    

btc     
btc     
btc     
btc     

     
     
    
    

     
     
    
 

     
     
    
   

cleaner     
cleaner     
cleaner      
cleaner     
cleaner     
cleaner      
cleaner     
cleaner     

     
    
    
    
    
 

     
    
    
 

     
    
    
    
 

domino     
domino     
domino     
domino      
domino      

     
     
     
     
     

     
     
     
     
    

     
     
     
     
    

     
    
    
   
    

     
     
    
 

     
     
     
      
   

ring   
ring   
ring   
ring   
ring    

table    comparison idp vs cmodels vs smodels

found maximum number timesteps reached  compared planner
cpasp conformant planner  son et al          using experimental setup
section    cpasp takes action theory action language al  encodes
approximation transition diagram corresponding action theory  means
answer set program  answer set solver used find conformant plans 
son et al   used asp solver behind cpasp cmodels  e  giunchiglia  
maratea        smodels  niemela  simons    syrjanen         table   shows 
combination approximation idp system comparable to  overall slightly
worse  combination cmodels son et al s approximation  compared
approximation given smodels  method tends bit better 
results line results asp competition  denecker et al         concerning
performance smodels  cmodels idp general  suggesting that  conformant
planning  approximation son et al  comparable quality 
another approximative method solving conformant planning problems found
work palacios geffner         paper  authors consider conformant
planning problems  specified language strips extended conditional effects
negation  define transformation k  transforms conformant planning
problem classical planning problem sound incomplete way  fluent
literal l conformant planning specification  two new literals kl kl created 
   

fivlaeminck  vennekens  denecker   bruynooghe

denoting l known true  resp  known true  initial situation 
action preconditions effects translated initial situation  preconditions
effects reference new knowledge literals  hard verify
approximation method generalizes transformation  take encoding
conformant planning problem p   approximation obtained method
interpreted classical planning problem ct cf vocabulary  planning problem
exactly planning problem specified k   p    i e   action preconditions
effects correspond   apart initial situation  k  transformation
propagation knowledge initial situation  given initial situation  specified
set clauses   k   i  consists literals kl l unit clause
i  means that  e g   initial situation    p q  p    k   i  include
literal kq  method able infer qct holds  which means
approximation method complete k  transformation  
general method  allow solving conformant planning problems  allows approximating number related problems temporal domains 
consider  example  following problem  given certain action happens
timepoint t  certainly lead property true   formalized
following satisfiability problem  method applies again 
aif     act init prec a t     
formula true possible plans a t  happens  property holds 
variant problem so called projection problem  given exactly know
actions happened  we thus assume preconditions satisfied  
property hold   order formulate problem satisfiability problem 
need express actions happened  done  example 
using inductive definition   projection problem expressed
aif     act init     satisfiability problem  another variant following
problem  property   holds certain plan  property   hold  
expressed aif   act init prec         satisfiability problem 
    querying reasoning open databases
approximate methods similar used context databases without
complete information  particular databases without cwa  open databases
 baral et al         liu   levesque        databases make forms local closed
world assumptions  denecker et al         doherty et al          papers
goal compute certain possible answers queries  task
high complexity  from conp locally closed database without integrity constraints
possibly p  databases first order constraints   assuming given finite domain  
approximate methods presented translate fo query approximate fo
fo fp   query solved directly database tables using standard
 polynomial  query methods 
method presented paper provide similar functionality  let db
set ground literals  representing incomplete database  let background theory 
   fo fp  extension fo least greatest fixpoint constructs 

   

fian approximative inference method

may contain integrity constraints  view definitions  datalog view programs special
case fo id  definitions   local closed world statements expressed fo  etc  given
holds herbrand models
fo query q  x   goal find tuples q  d 
db   problem deciding whether given tuple answer corresponds
satisfiability problem formula

r db q  d   

   

directly use approximation method problem  allows us
answer yes no queries well decide whether given tuple certain answer
query  approximation method directly provide method compute  an
approximation of  tuples 
however  let us look following satisfiability problem 
r    ddb approxbu  q  x   
looks much approximation         satisfiability problems  as
formulated proposition       definition ddb approximating
database db background knowledge  note possibly contains definitions  
bottom evaluation query  constraint act
q dropped 
definition ddb approxbu  q  x   consists rules describing propagations allowed database theory   rules defining predicate symbol act
q  
aq tseitin predicate representing query q  x   unique herbrand model
definition  interpretation act
q contains tuples propagation
derive certainly satisfy query sound approximation full set
answers 
work denecker et al          locally closed database lcdb assumed 
locally closed database consists standard database db  i e  set atoms  together
set local closed world assumptions lcwa p  x    x    lcwa
statements expresses databases knowledge p complete tuples x
therefore true db false
satisfy formula  x   atom p  d 
holds domain
db lcwa p  x    x    d 
discourse  otherwise unknown  authors present approximate reasoning
method query answering locally closed databases show approximate
query answering formulated fixpoint query  basically  boils
following  one constructs following definition




   






p ct  x  p  x 

 
lcwa  
p cf  x  p ct  x  ct


p  x 






   
every relation p every local closed world assumption lcwa p  x    x    although
authors phrase form  method finding approximation
certain answers query q  x  actually boils solving following satisfiability
problem 
r    db cw a db  lcwa approxbu  q  x   
   

fivlaeminck  vennekens  denecker   bruynooghe

r  denotes predicates auxiliary predicates occurring body existential formula  cw a db   denote formula expressing closed world assumption
database db  presence closed world assumption might seem strange
first sight  since whole idea behind locally closed world databases assume cwa
per default  however  order correctly apply local closed world assumptions 
need exact specification database not  precisely
expressed db cw a db   indeed  given db cw a db   lcwa
seen approximative definition certainly true false context
locally closed world assumptions  predicate act
q contain approximate
answer query q  x   i e   lower bound tuples query q  x 
certainly true  similarly  predicate acf
q contain lower bound tuples
query false 
limitation approach denecker et al  extend method
one type integrity constraints  namely functional dependencies  way
functional dependencies handled extending lcwa extra propagation rules
taking functional dependencies account  contrast  general method
used easily extend arbitrary integrity constraints  works follows 
let tint set first order integrity constraints  approximate problem
finding certain queries following satisfiability problem 
bu
ct t  db cw a db  lcwa approx
 q  t   
r    approx tint    atint

again  predicate act
q contain approximate answer query q  x  
doherty et al          propose yet another approach asking queries incomplete
database  authors use term approximate database denote database  consisting
two layers  extentional intensional layer  layers external
representation towards user  internal representation 
extentional database consists positive negative literals  internally
stored classical database  using feferman transformation  example  extentional database  edb   entered user 
color car   black   color car   red   color car   red  
internally stored
colorct  car   black   colorcf  car   red   colorct  car   red  
intentional database consists rules infer additional information facts
edb  user write rules form   p   x          pn  xn     p  x   
internally stored    p   x    ct          pn  xn   ct    p  x   ct  
example idb rule following rule
color x  y    y     y  color x  y    
internally stored
colorct  x  y    y     y  colorcf  x  y    
   

fian approximative inference method

evaluate query  naive algorithm based exhaustively applying rules edb
used 
rules idb resemble f formulas sense describe valid
inferences made based incomplete information  internal representation
idb indeed similar representation f formulas definitional rules 
however  key difference approach doherty et al   user wants add
property database  e g   car one color   write
inferences valid according property  approach inference
rules automatically generated property itself  manually writing valid
inferences sanctioned property easy task  example  take property
car inspected suspect black paper doherty
et al   expressed fo formula   c suspect c  color c  black 
investigate c    while  method  approx   constructs approximation valid
inferences made formula  user write following
rules doherty et al s approach 
suspect c  color c  black  investigate c 
suspect c  investigate c  color c  black 
suspect c  investigate c 
   
method therefore generalizes work doherty et al  deriving rules automatically general first order theory 
liu levesque        propose another type reasoning open databases 
consider simple form first order knowledge bases  called proper knowledge bases 
interesting feature knowledge bases easy obtain complete
characterization certainly true  resp  certainly false  terminology 
   p ct  d 

means one construct definition   kb    p  d 
cf

kb    p  d     p   holds every two valued extension
three valued interpretation encoded model kb  levesque et al  use
evaluation procedure based three valued kleene evaluation check whether
query holds knowledge base  mentioned earlier  define normal form
n f queries  prove kleene evaluation complete  work
extends work  sense take general first order knowledge base
approximately solve queries  shown above  course  since general
longer guarantee complete characterization certainly true false 
longer guarantee completeness  even query normal form n f  another
difference work liu levesque work here  assume
fixed countable infinite domain  assume fixed finite domain  indeed
theoretical difference  practice make difference  since evaluation
method considers finite set domain elements determined up front 

   conclusions future work
even problem computationally hard general  specific instances might still
solved efficiently  approximate methods important  cannot solve
   

fivlaeminck  vennekens  denecker   bruynooghe

every instance  instances solve  solve quickly  computational
logic  hard problems arise quite readily  therefore surprising literature
contains numerous examples algorithms perform approximate reasoning tasks
various logical formalisms various specific contexts  since many algorithms share
common ideas  natural question whether seen instances
general method general language 
paper presents method  start propagation method fo  
developed wittocx  marien  denecker        symbolic expression  wittocx 
      generalize method approximating p   complete so id  satisfiability problem solving np problem  importantly  syntactic method
transforms so id  formula so id  formula  affords us freedom
use off the shelf solver language perform approximative reasoning 
moreover  makes significantly easier update method adding  or removing 
specific propagations 
since method approximation  necessarily incomplete  nevertheless 
experiments shown that  practice  often manage find solution 
interesting topic future work determine classes problems  method
shown complete 
summary  contributions paper     extended logical
representation describing propagation process general method approximating
sat  so  problems      shown approximate inductive definitions  use
approximate class useful sat  so id   problems      examined
existing approximation methods fit general framework 

acknowledgments
work supported research foundation   flanders fwo vlaanderen  projects
g         g         research fund kuleuven  project goa         hanne
vlaeminck supported iwt vlaanderen 

appendix a  example approximation
figure   shows full approximation act example     

appendix b  proof theorem    
proof  first  remark feferman        showed four valued evaluation
formula interpretation simulated computing standard two valued
evaluation ct cf tf   easy verify bottom up rules approx  
inductively encode evaluation  split proof two parts  first assume
three valued  show case bottom up rules used  i e   leaving
top down rules change model definition  proves first
part theorem  together remark proves second part
theorem case three valued  then  left prove 
second part theorem holds four valued i 
   

fian approximative inference method

























































































































































































act
act
acf
act
acf
act
act
 
act
 
acf
 
acf
 









act
 
acf
 
act
   t 
acf
   t 
acf
   t 
acf
   t 
act
   t 
act
   t 
acf
   t 
act
   t 
acf
   t 
act
   t 
act
   t 
acf
   t 
cleanct  t     
cleancf  t     
acf
   t 
act
   t 
act
   t 
act
   t 
acf
   t 
cleancf  t 
cleanct  t 
act
   t 
act
   t 
acf
   t 
acf
   t 
act
   t 
cleancf   t      
cleanct   t      
acf
   t 
acf
   t 
act
   t 
cleancf  t 
cleanct  t 





































acf
 
acf
 
act
 
act
 
acf
 
act
  
acf
  
act
 
 t   act
act
   t   
 
 t   acf
acf
   t   
 
act
cleanct    
  
ct
cf
 acf
   t     t    a   t        clean    
cf
acf
 t  
initiallyclean
 
cf
a   t  
initiallycleanct
ct
ct
 a   t  a   t   
act
  
act
 t  
act
 
  
ct
 acf
acf
   t  a   t   
  
ct
a   t  
acf
  
ct
 acf
act
  
   t  a   t   
cleancf   t       
cleancf    
act
 t  
cleanct    
 
cf
ct
 clean  t       a   t   
act
  
cf
a   t  
acf
  
cf
 act
initiallycleancf
   t  a   t   
cf
a   t  
initiallycleanct
ct
 act
   t  clean  t       
cleanct  t  
w ipe t  
 cleancf  t  w ipe t   
acf
   t  
 act
   t  w ipe t   
act
   t  
cleanct  t      
cf
 acf
   t  clean  t       
cf
a   t  
cf
 act
   t  clean  t       
cf
a   t  
cf
 act
   t  a   t   
ct
clean  t  
w ipe t  
 cleancf  t  w ipe t   
act
   t  
 acf
   t  w ipe t   
ct
act
  a   
cf
a   
acf
   
act
act  
act
act  
ct
acf
act a   
cf
aact act
  



























acf
   
acf
    
ct
 act
  a     
ct
a   
ct
 acf
  a     
ct
a   
ct
 acf
  a    
cf
clean     
initiallycleanct  
 cleanct     initiallycleancf   
acf
   
cf
 act
  initiallyclean   
acf
 
 
ct
 act
  clean     
ct
a    
cleanct     
cf
 acf
   clean      
cf
a    
cf
 act
   clean      
acf
 
  
cf
 act
   a     
initiallycleancf  
initiallycleanct  
act
    
acf
    

























































































































































































figure    approx w ipe   act    act taken example     
let us assume three valued  prove od approxbu       
od approx     contradiction  assume predicate act
 the proof goes
cf
ct
analogously   od approx        od approxbu   
      act
  preliminaries recalled model positive inductive definition
  model
least fixpoint immediate consequence operator
   

fivlaeminck  vennekens  denecker   bruynooghe

definition thus limit sequence applications immediate consequence
operator  one prove  see  e g   denecker   ternovska       
apply immediate consequence operator complete definition every step  i e  
applying immediate consequence operator subset definition 
longer exists immediate consequence operator give something new  gives
model  suppose take sequence first apply bottom up
rules  bottom up rules applicable try apply top down rules 
suppose act
first atom infer top rules sequence  obviously
act
cannot
top level atom act

  since top down rules this 
case study type  sub formula occurs in  e g   assume subformula
formula       fact act
true  follows body
cf
cf
ct
ct
top rule a  true  thus act
a  true 
ct
since act
first atom inferred top down rule  since
ct
ct
ct
true  a  must true  since became true last step
sequence  act
  must true already  means applying
cf
bottom up rules act
  a  true  contradiction fact
three valued bottom up rules encode four valued evaluation 
proof analogous types subformulas 
case four valued  three valued longer case
bottom up rules contribute model  i e   od approxbu        
od approx       see this  consider following formula p q  take
four valued interpretation p   q   t  one verify
cf
bottom up rules approx   infer act
p q ap q true 
however  top down rules infer qcf true  happens
inconsistency inferred certain subformula  propagates back
parse tree  however  similar above  case study structure
cf
prove  for top formula   od approxbu         act

cf
bu    clearly direct
od approx        act
  since since approx
encoding four valued evaluation  concludes proof 

appendix c  proof proposition    
proof  take witness satisfiability app  f    first let us remark
open approx         act
  t       fact witness
satisfiability app  f   know model definition extending concf
tains act
construction approx        must contain either a 
act
   
assume first acf
  true   application theorem      where take
               gives  extends                assumption
     results contradiction hence         case     holds
every extending i  thus witness satisfiability f  
next  assume act
  true   applying theorem      where time
               gives  extends             hence
   

fian approximative inference method

case     hold every extending i  means witness
satisfiability f  

appendix d  proof theorem    
key ingredient proof theorem     following property appct pt    
oct pt
immediate consequence operator tapp
ct pt    two valued interpretations simulates
 o  o  

immediate consequence operator     four valued interpretations original
definition  made precise following lemma 
definition d    pair  interpretations  i  j   use t i  j  denote ct pt interpretation  i  j ct pt  
lemma d     o    o     i  j  
 o   o   



 o   o   

proof  let  i     j    

t o  o  

 i  j    t   tapp ct pt      t i  j    
t o  o  

 i  j  let f   tapp ct pt      t i  j    first show

f  ct       since f  ct depends rules appct pt    predicate ct  
discard rules head pt   result  left single copy
positive occurrences atoms replaced ct variant negative
ones pt variant  implies evaluation bodies remaining
rules according t o  i  o  j  identical evaluation bodies
original rules  o  i  o  j  construction     thus proving equality 
proof remaining equality f  pt   j   analoguous 
proof theorem      first  recall that  given partial knowledge  o    o     threevalued well founded models   resp  appct pt    least fixpoints operators
 o  o  
t o  o   
st     resp  st app ct pt
 note since t o    o    two valued  abuse notation
  
rest proof denote two valued pair  t o    o     t o    o    
t o    o     
now  latter operator rather peculiar  sense actually juggling four
different interpretations original alphabet   detail  element
domain looks this 


ict
jct
 i  j       
ipt
jpt
ict jct interpret alphabet ct   ipt jpt interpret pt   apply
t o  o   
operator st app ct pt
  obtain new pair 
  

 
 
ict
jct
 i     j          
 
 
ipt
jpt


   

fivlaeminck  vennekens  denecker   bruynooghe

 
 
general definition st
construction  obvious ict ipt depends
jct jpt   however  particular case  operator exhibits even structure 
 o  o   
operator stapp ct pt
 j  uses argument j fixed interpretation negative
  
occurrences  remains constant throughout least fixpoint computation
positive occurrences  now  appct pt    contains two copies interact
negative occurrences  that is  occurrences pt predicate body rule
ct predicate head always negative ones  vice versa   means
long keep interpretation negative occurrence fixed constant value j 
    discard
two copies interact all  consequently  construct ict
rules pt predicate head  means left rules whose head
ct predicate whose body contains positive occurrences ct predicates
  depends j   moreover 
negative occurrences pt predicates  therefore  ict
pt
  map symbols back original alphabet  let
value ict
      st  o   o     orig j     similarly 
orig  ct     orig  pt        orig ict
pt

obtain that 
 o   o   

 orig jct    

 o   o   

 orig ipt    

 o   o   

 orig ict    

 
orig ipt
    st

 
orig jct
    st

 
orig jpt
    st

words 
 o  o   

 
 
 orig ict
   orig jpt
     st  
 
 
 orig ipt
   orig jct
     st

 orig ict    orig jpt    

 o   o   
 orig ipt    orig jct    


now  consider construction well founded model appct pt    
sequence form 

 

 



 
 
 
 

ict
jct
ict
jct
ict
jct
ict
jct
                 
 
 
 
 
 
 


ipt
jpt
ipt
jpt
ipt
jpt
ipt
jpt
let  i   j  i  well founded model construction original definition   i e  
    f
predicates p n def    domain tuples dn  p  d  
j     t   i n     j n       st  o   o     i n   j n   n    easy see
 p  d  

  j        i   j    provides base case  equation provides
t   ict
   
pt
j    words 
inductive step prove that  i   i   j     t   ict
pt
well founded model construction original definition tracked elements
well founded model construction appct pt    
 

 

 



ict

ict

ict

ict

                 
 
 
 


jpt

jpt

jpt

jpt
diagonal  t   j ct i ct           
precise element  p lattice pairs interpretations  therefore  find
   

fian approximative inference method

 o  o  

diagonal actually tracks construction greatest fixpoint st      
combining two results  see  l    l     g    g    least greatest
fixpoint  respectively  well founded model appct pt    looks this 


l 
g 
   
g 
l 
note unique four valued stable fixpoint least greatest stable fixpoint
hence well founded fixpoint  immediately concludes proof 

appendix e  proof proposition    
lemma e    given  definition   fo formula   let subset    a
renamed copy    consider definition
  appct pt     p ct p  ct  p  opt o pt  oopen      
assume three valued interpretation approximates models  
holds w f mi ct pt  d  approximates   i e  
w f ct pt  d          p  d  

  p ct  d 

  w f ct pt  d          p  d  

  p pt  d 

proof  prove induction well founded model construction alternative
one described paper  found work denecker
vennekens         assume induction sequence  ii   in   four valued def  d interpretations i  interpretation everything completely unknown 
  w f mi ct pt  d   prove every ii sound approximation  
trivially case n      assume ik sound approximation
  prove case ik     need prove two things
cannot true ik   p  d 
true models  
this  first  atom p ct  d 
pt
cannot false ik   false models
second  atom p  d 
  prove cases contradiction 
start first case  assume k th well founded induction step 
incorrectly deduced  i e  
certain predicate p domain tuple d  p ct  d 

inferred k th step 
exists model      s t      p  d   since p ct  d 
ct
is   p  ct  d 
already made
means body rule defining p  d  
true previous step  induction hypothesis tells us every model
semantics inductive definitions says
holds    p  d  
   p   contradiction assumption 
next  consider second case  time  assume k th well founded
inferred false  exists model   s t 
induction step  p pt  d 

   p  d   now  using alternative version well founded semantics 
two ways domain atom become false  indeed  domain atom become false
   

fivlaeminck  vennekens  denecker   bruynooghe

body defining rule already false  part unfounded
set 
made false body defining rule  p  pt already false 
p pt  d 
argument completely analogous one   using induction hypothesis  

gives contradiction assumption  now  left prove  p pt  d 
pt

cannot incorrectly made false application unfounded set rule  p  d 
made false application unfounded set rule  means
set u atoms  unknown ik   made false bodies
rules defining atoms  kleene evaluation bodies returns false  possible
verify always find u contains pt  atoms 
let us take model   obviously model

  consider corresponding set u     consisting domain atoms p  d  
pt
pt
pt


p  d  u s  every atom q  d  body  p   set u s  induction
 qpt  d  
ik   similarly  every atom qct
hypothesis actually tells us  q d  
pt
ct

k  q d  
  now  since qpt atoms occur
body  p     says  q  d  
positively qct negatively  p  pt   follows interprets literals
u   false way ik   thus  u   unfounded set  indeed 
turning atoms u   false make bodies defining rules false  
contradiction assumption  concludes
thus    p  d  
proof lemma 

proof proposition      proof proposition easy proof induction
construction well founded model   using lemma above 
soundness approx   

references
baral  c          knowledge representation  reasoning  declarative problem solving 
cambridge university press  new york  ny  usa 
baral  c   gelfond  m     kosheleva  o          expanding queries incomplete databases
interpolating general logic programs  j  log  program                  
baral  c   kreinovich  v     trejo  r          computational complexity planning
approximate planning presence incompleteness  artif  intell                 
    
belnap  n  d          useful four valued logic  dunn  j  m     epstein  g   eds   
modern uses multiple valued logic  pp       reidel  dordrecht  invited papers
fifth international symposium multiple valued logic  held indiana
university  bloomington  indiana  may             
clark  k  l          negation failure  logic data bases  pp          plenum
press 
denecker  m   cortes calabuig  a   bruynooghe  m     arieli  o          towards logical
reconstruction theory locally closed databases  acm transactions database
systems                    
   

fian approximative inference method

denecker  m     ternovska  e          logic non monotone inductive definitions
modularity properties  lifschitz  v     niemela  i   eds    lpnmr  vol      
lncs  pp        springer 
denecker  m     ternovska  e          inductive situation calculus  artificial intelligence 
                  
denecker  m     ternovska  e          logic nonmonotone inductive definitions  acm
transactions computational logic  tocl          article    
denecker  m     vennekens  j          well founded semantics algebraic theory
non monotone inductive definitions  baral  c   brewka  g     schlipf  j  s   eds   
lpnmr  vol       lncs  pp        springer 
denecker  m   vennekens  j   bond  s   gebser  m     truszczynski  m          second
answer set programming competition  erdem  e   lin  f     schaub  t   eds   
lpnmr  vol       lncs  pp          springer 
doherty  p   magnusson  m     szalas  a          approximate databases  support tool
approximate reasoning  journal applied non classical logics                  
e  giunchiglia  y  l     maratea  m          cmodels homepage  http   www cs utexas 
edu users tag cmodels html 
fagin  r          generalized first order spectra polynomial time recognizable sets 
complexity computation          
feferman  s          toward useful type free theories  journal symbolic logic         
      
gelfond  m     lifschitz  v          stable model semantics logic programming 
kowalski  r  a     bowen  k  a   eds    iclp slp  pp            mit press 
immerman  n          descriptive complexity  springer verlag 
kleene  s  c          introduction metamathematics  van nostrand 
liu  y     levesque  h  j          completeness result reasoning incomplete
first order knowledge bases  kr  pp       
marien  m   wittocx  j     denecker  m          idp framework declarative problem
solving  search logic  answer set programming sat  pp       
mcdermott  d          critique pure reason  computational intelligence            
mitchell  d  g     ternovska  e          framework representing solving np
search problems  veloso  m  m     kambhampati  s   eds    aaai  pp         
aaai press   mit press 
niemela  i   simons  p     syrjanen  t          smodels  system answer set programming  proceedings  th international workshop non monotonic reasoning 
breckenridge  colorado  usa  corr  cs ai         
palacios  h     geffner  h          compiling uncertainty away conformant planning
problems bounded width  journal artificial intelligence research  jair      
       
   

fivlaeminck  vennekens  denecker   bruynooghe

son  t  c   tu  p  h   gelfond  m     morales  a  r          approximation action
theories application conformant planning  baral  c   greco  g   leone 
n     terracina  g   eds    lpnmr  vol       lncs  pp          springer 
tamaki  h     sato  t          unfold fold transformations logic programs  iclp 
pp         
tseitin  g  s          complexity derivation propositional calculus  slisenko 
a  o   ed    studies constructive mathematics mathematical logic ii  pp     
     consultants bureau  n y 
turner  h          polynomial length planning spans polynomial hierarchy  jelia 
pp         
van fraassen  b          singular terms  truth value gaps free logic  journal philosophy                  
van gelder  a          alternating fixpoint logic programs negation  journal
computer system sciences                 
vlaeminck  h   wittocx  j   vennekens  j   denecker  m     bruynooghe  m         
approximate method solving problems  fisher  m   van der hoek  w  
konev  b     lisitsa  a   eds    jelia  lecture notes computer science  pp 
        springer 
wittocx  j          finite domain symbolic inference methods extensions firstorder logic  ph d  thesis  department computer science  k u leuven  leuven 
belgium 
wittocx  j   denecker  m     bruynooghe  m          constraint propagation extended
first order logic  corr  abs           
wittocx  j   marien  m     denecker  m          approximate reasoning first order logic
theories  brewka  g     lang  j   eds    kr  pp          aaai press 

   


