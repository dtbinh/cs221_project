journal artificial intelligence research                  

submitted        published      

graduality argumentation
claudette cayrol
marie christine lagasquie schiex

ccayrol irit fr
lagasq irit fr

irit ups      route de narbonne
      toulouse cedex  france

abstract
argumentation based exchange valuation interacting arguments  followed
selection acceptable  for example  order take decision 
make choice   starting framework proposed dung       purpose
introduce graduality selection best arguments  i e  able
partition set arguments two usual subsets selected
non selected arguments order represent different levels selection  basic idea
argument acceptable preferred attackers  first 
discuss general principles underlying gradual valuation arguments based
interactions  following principles  define several valuation models abstract
argumentation system  then  introduce graduality concept acceptability
arguments  propose new acceptability classes refinement existing classes
taking advantage available gradual valuation 

   introduction
shown dung         argumentation frameworks provide unifying powerful
tool study several formal systems developed common sense reasoning  well
giving semantics logic programs  argumentation based exchange
valuation interacting arguments support opinions assertions  applied 
among others  legal domain  collective decision support systems negotiation
support 
fundamental characteristic argumentation system interaction arguments  particular  relation attack may exist arguments  example 
argument takes form logical proof  arguments proposition arguments
proposition advanced  case  attack relation relies logical
inconsistency 
argumentation process usually divided two steps  valuation relative
strength arguments  followed selection acceptable arguments 
valuation step  usual distinguish two different types valuations 
intrinsic valuation  here  value argument independent interactions
arguments  enables simply express extent argument
increases confidence statement supports  see pollock        krause  ambler  elvang    fox        parsons        prakken   sartor        amgoud   cayrol 
      kohlas  haenni    berzati        pollock        
c
    
ai access foundation  rights reserved 

ficayrol  lagasquie schiex

example  work krause et al          using following knowledge base 
composed  formula  probability  pairs                                        
                         two arguments produced   
a                            
a                             

arguments weight                   formula  
weight                             
interaction based valuation  value argument depends attackers
 the arguments attacking it   attackers attackers  the defenders   etc   
several approaches proposed along line  see dung        amgoud  
cayrol        jakobovits   vermeir        besnard   hunter        differ
sets values used  usually  two values considered  however 
proposals use two values  three values jakobovits   vermeir 
      infinity values besnard   hunter        
example  work besnard hunter         set values
interval real line         case  set arguments   a    a    a   
considering a  attacks a  attacks a    value argument a 
 resp  a    a       resp            
intrinsic valuation interaction based valuation often used separately  according considered applications  recent works however consider combination
approaches  see amgoud   cayrol        karacapilidis   papadias        pollock 
      
considering selection acceptable arguments  usual distinguish
two approaches 
individual acceptability  here  acceptability argument depends
properties  example  argument said acceptable
attacker  in case  interaction arguments considered 
see elvang goransson et al          context intrinsic valuation  argument said acceptable better attackers
 see amgoud   cayrol        
collective acceptability  case  acceptability set arguments explicitly
defined  example  acceptable  set arguments may contain two
   here  arguments form explanation conclusion pair  one possible way
compute arguments  see lin   shoham        vreeswijk        pollock        prakken   sartor 
      simari   loui        elvang goransson  fox    krause        kohlas et al         amgoud  
cayrol        
   weights probabilities  weight argument probability conjunction
formulae argument  weight   probability disjunction a  a   
   here  consider interactions corresponding attacks arguments  exist
types interactions  for example  arguments reinforce arguments instead attacking them  see karacapilidis   papadias        verheij         kind interaction  graduality
considered 
   here  initial knowledge base useless 

   

figraduality argumentation

arguments one attacks  interactions arguments used  
dungs        framework well suited kind approach allows
binary classification  argument belongs belong acceptable set 
clear except intrinsic valuations  proposals allow gradual
notion valuation acceptability  i e  low number levels describe values
acceptability usually binary   aim therefore introduce graduality
two steps 
however  processes valuation selection often linked together 
case selection done basis value arguments  selection
defines binary valuation arguments  therefore 
first consider discuss general principles concerning definition gradual
interaction based valuation define valuation models abstract
argumentation system 
then  introduce notion graduality definition acceptability using
previously defined gradual valuations  classical mechanisms 
graduality already introduced argumentation systems  instance 
work pollock         degrees justification beliefs computed  arguments
sequences conclusive and or prima facie inferences  arguments collected graph
node represents conclusion argument  support link ties node nodes
inferred  attack link indicates attack nodes  degree
justification belief computed strength arguments concluding
belief strength arguments concluding attacker belief 
work takes place abstract framework since consider argument
structure  valuation models based interactions arguments directly
apply arguments 
use framework defined dung         set arguments binary attack
relation arguments  use graphical representation argumentation systems  see section     gradualisation interaction based valuations presented
section    then  section    consider different mechanisms leading gradual
acceptability  sometimes relying gradual valuations defined section   
conclude section   
proofs properties stated sections     given appendix a 

   dungs        framework graphical representation
consider abstract framework introduced dung         argumentation system
 a  r  set arguments binary relation r called attack relation 
consider ai aj a  ai raj means ai attacks aj aj attacked ai  also
denoted  ai   aj   r  
   example  using besnard hunters        valuation  decide arguments whose
value       selected      mean value set values  another possibility 
different valuations  interaction based intrinsic   accept argument value better
value attackers 

   

ficayrol  lagasquie schiex

argumentation system well founded infinite sequence     a   
                i  ai ai   rai  
here  interested structure arguments consider arbitrary
attack relation 
notation   a  r  defines directed graph g called attack graph  consider a 
set r  a  set arguments attacking a  set r   a  set
arguments attacked a   
example  
system  a    a    a    a    a     r     a    a      a    a      a    a      defines following graph g root  a   
a 

a 
a 
a 

definition    graphical representation argumentation system  let g
attack graph associated argumentation system  a  r   define 
leaf attack graph leaf g argument without attackers   
path attack graph path b sequence arguments c   a 
      that 
  a   
a  ra   
    
an  ran  
  b 
length path n    the number edges used path 
denoted lc  
special case path   whose length   
set paths b denoted c a  b  
   r  a     ai a ai ra  
   r   a     ai a arai   
   word root used informal sense  it means graph paths
leading node   term terms  leaf  branch  path          used
document standard graph theory may different definition  usual terms
argumentation domain  please see definition   order know precise meaning document 
definitions simply take account fact directed edges graph link attackers
attacked argument  
   leaf iff r  a     
    assume exists infinity paths  assumption greatly simplifies handling
leaves later paper 

   

figraduality argumentation

dependence  independence  root dependence path
consider   paths ca c a      cb c b    bm   
two paths said dependent iff ai ca   bj cb ai   bj  
otherwise independent 
two paths said root dependent iff   bm ai    ca  
  bj cb ai   bj  
cycles attack graph cycle   path c   a        a  i  j
    n      j  ai    aj  
cycle c isolated iff c    b bra b   c 
two cycles ca   a        a  cb   b        bm b  interconnected
iff     n   j     m  ai   bj  
use notions direct indirect attackers defenders  notions introduced
inspired related definitions first introduced dung        strictly
equivalent    
definition    direct indirect attackers defenders argument  consider
a 
direct attackers elements r  a  
direct defenders direct attackers elements r  a  
indirect attackers elements ai defined by 
c c ai   a  lc    k      k   
indirect defenders elements ai defined by 
c c ai   a  lc    k  k   
argument attacker  direct indirect  argument b  say
attacks b  or b attacked a   way  argument defender
 direct indirect  argument b  defends b  or b defended a  
note attacker defender  for example  a  attacks a  attacks
a    a  attacks a     way  direct attacker indirect attacker
 for example  a  attacks a  attacks a  attacks a    a  attacks a   
thing may occur defenders 
definition    attack branch defence branch argument  consider
a  attack branch  resp  defence branch  path g leaf whose
length odd  resp  even   say root attack branch  resp  defence
branch  
    definition cycle corresponds definition elementary cycle graph theory  an
elementary cycle contain   edges initial extremity  ending extremity  
    dungs        work  direct attackers  resp  defenders  indirect attackers  resp  defenders 
true definitions 

   

ficayrol  lagasquie schiex

note notion defence basis usual notion reinstatement  b attacks
c  attacks b c reinstated a   paper  reinstatement taken
account indirectly  value argument c possibility selecting
c increased thanks presence a 
notions illustrated following example 
example  

graph g  see 
path c  whose length    c  b  a  
  cycles a  a  a  a  a  a  a  a    length
   isolated  note a  a  a  a 
a  a  a  cycle definition  
two previous cycles interconnected  in a  a    
paths d  c  b  c  b  independent 
paths d  c  b  c  b  root dependent
paths d  c  b  c  b  dependent 
d    c    e  leaves g 
d  c  b  attack branch whose length
   c  b  defence branch whose length   
c    b  b  direct attackers a 
c    c   which already direct attacker a  c 
direct defenders a 
d  d  two indirect attackers a 
e  indirect defender a 

a 

a 

a 

a 


b 

b 

c 

d 

c 

c 

d 

e 

   graduality interaction based valuations
consider two different valuation methods taking account quality attackers
defenders argument order define value argument using
interaction arguments    
first approach  value argument depends values direct
attackers argument  therefore  defenders taken account
attackers  approach called local 
second approach  value argument represents set attack
defence branches argument  approach called global 
main difference two approaches illustrated following example 


c 

c

b

b

c 

    pursue work initiated  cayrol   lagasquie schiex      c  propose improvements 

   

figraduality argumentation

local approach  b two direct attackers  c  c    whereas b   one
 c      thus b   better b  since b   suffers one attack whereas b suffers two attacks  
global approach  two branches  one attack one defence  lead b whereas
one branch attack leads b     thus b better b    since least one
defence whereas b   none   case  c  loses negative status attacker  since
fact carrying defence b 
    local approach  generic valuation 
existing proposals already considered examples local valuations 
jakobovits vermeirs        approach  labelling set arguments assigns
status  accepted  rejected  undecided  argument using labels set          
   resp       represents accepted  resp  rejected  undecided  status  intuitively 
argument labelled   supported weakened 
definition    jakobovits vermeirs labellings        let  a  r  argumentation system  complete labelling  a  r  function lab           
that 
   lab a        b r  a  lab b        
   lab a         b r  a  r   a   lab b       
underlying intuition argument weakened  label    one
direct attackers supported  condition     argument get support
direct attackers weakened argument supported  label      weakens
arguments attacks  condition     so 





attacker lab a      
lab a     b r  a  lab b     
 b r  a   lab b      lab a      
lab a      b r  a  r   a   lab b     

every argumentation system completely labelled  associated semantics
acceptable set arguments iff exists complete labelling lab  a  r 
   a lab a       
types labellings introduced jakobovits vermeir        among
so called rooted labelling induces corresponding rooted semantics  idea
reject arguments attacked accepted arguments  attack undecided
argument rooted since undecided attacker may become rejected 
definition    jakobovits vermeirs labellings       continuation 
complete labelling lab rooted iff a  lab a    b r  a 
lab b      
rooted semantics enables clarify links semantics introduced
jakobovits vermeir        semantics introduced dung        
   

ficayrol  lagasquie schiex

example   following example 


an 

a 

a 

n even  obtain lab an     lab an              lab a        lab an     
lab an              lab a       
n odd  obtain lab an     lab an              lab a        lab an     
lab an              lab a     
another type local valuation introduced recently besnard hunter       
deductive arguments  approach characterised follows  argument
structured pair hsupport  conclusioni  support consistent set formulae
enables prove formula conclusion  attack relation considered strict
cycles allowed  notion tree arguments allows concise
exhaustive representation attackers defenders given argument  root tree 
function  called categoriser  assigns value tree arguments  value
represents relative strength argument  root tree  given attackers
defenders  another function  called accumulator  synthesises values assigned
argument trees whose root argument  resp  against  given conclusion 
phase categorisation therefore corresponds interaction based valuation  besnard
hunter        introduce following function cat 
r  a      cat a     
r  a     r  a     a               cat a   

 
  cat a        cat an  

intuitively  larger number direct attackers argument  lower value 
larger number defenders argument  larger value 
example    continuation  obtain 
cat a
n        cat an           cat an            cat an                   cat a     

         n  this value inverse golden ratio     
so  have 
n even cat an          cat a    cat a    cat a          cat an      
n odd cat an          cat a    cat a    cat a          cat an      
approach local valuations generalisation two previous proposals
sense besnard hunters        cat function jakobovits vermeirs       
labellings instances approach 
main idea value argument obtained composition two
functions 
one aggregating values direct attackers argument  so 
function computes value direct attack 
computing effect direct attack value argument 
value direct attack increases value argument decreases 
value direct attack decreases value argument increases 
    golden ratio famous number since antiquity several interesting properties
several domains  architecture  example  

   

figraduality argumentation

let  w    totally ordered set minimum element  vmin   subset v w  
contains vmin maximum element vmax  
definition    generic gradual valuation  let  a  r  argumentation system 
valuation function v   v that 
   a  v a  vmin
   a  r  a      v a    vmax
   a  r  a     a                   v a    g h v a             v an    
h   v w  v denotes set finite sequences elements v  
h x    x
h     vmin
permutation  xi            xin    x            xn    h xi            xin     h x            xn  
h x            xn   xn     h x            xn  
xi x i h x            xi           xn   h x            x i           xn  
g   w v
g vmin     vmax
g vmax     vmax
g non increasing  if x g x  g y  
note h x            xn   max x            xn   logical consequence properties
function h 
first property function g explains behaviour local valuation case
argument root one branch  like example    
property   function g satisfies n   
g vmax   g    vmax         g  n    vmax   g  n  vmax         g    vmax   vmax
moreover  g strictly non increasing g vmax     vmin   previous inequalities
become strict 
second property shows local valuation induces ordering relation arguments 
property    complete preordering  let v valuation sense definition   
v induces complete   preordering set arguments defined by  b iff
v a  v b  
third property handles cycles 
    complete preordering means two elements comparable 

   

ficayrol  lagasquie schiex

property    value cycle  let c isolated cycle attack graph  whose
length n  n odd  arguments cycle value value
fixpoint function g  n even  value argument cycle
fixpoint function g n  
following property shows underlying principles satisfied local valuations
defined according schema 
property    underlying principles  gradual valuation given definition   respects following principles 
p  valuation maximal argument without attackers non maximal
attacked undefended argument 
p  valuation argument function valuation direct attackers  the
direct attack  
p  valuation argument non increasing function valuation direct
attack 
p  attacker argument contributes increase valuation direct
attack argument 
last properties explain jakobovits vermeir        besnard hunter
       propose instances local valuation described definition   
property    link jakobovits   vermeir       
every rooted labelling  a  r  sense jakobovits vermeir       
defined instance generic valuation that 
v   w                    
vmin    
vmax     
g defined g        g        g      
h function max 
property    link besnard   hunter        gradual valuation besnard
hunter        defined instance generic valuation that 
v          
w         
vmin     
vmax     
 
g   w v defined g x      x
h defined h x            xn     x            xn  
   

figraduality argumentation

note that  work besnard hunter         valued graphs acyclic  however  easy show valuation proposed besnard hunter       
generalised graphs cycles  in case  must solve second degree equations see
example    

















































b b b 









































c 

c 





c 
c 























































d 












d 
d 

































































e 















































































example   consider following graph 

b 

example  generic valuation  obtain 
v e      v d      v d      v c      v b      vmax
v d      v c      v c      v b      g vmax  
v c      v b      g    vmax  
v b      g h g    vmax    g vmax    
v a    g h g h g    vmax    g vmax      g    vmax    g vmax    vmax   
so  have 
e             c     b 

c     b 

    c     c     b 
however  constraints v a  v b    insufficient compare b 
arguments 
problem exists reduce example hatched part graph
previous figure  obtain e    d  c  d    c    b  cannot compared
arguments    
now  use instance generic valuation proposed besnard hunter        
v e      v d      v d      v c      v b        
v d      v c      v c      v b          
v c      v b          
    v a    g    h g    vmax   g vmax     v b      g h g    vmax    g vmax     

   

ficayrol  lagasquie schiex

 
 
v b        
  
v a         

so  have 
e             c     b 

c     b 

    c     c     b 

b 


however  reduce example hatched part graph  value
  
     so  v a  better v b    v d     v c     a becomes better
defender  
example    isolated cycle  consider following graph reduced isolated cycle 


b

 

generic valuation gives v a    v b    fixpoint g    
use instance proposed besnard hunter         v a  v b  solutions
following second degree equation 
x    x       

    
so  obtain  v a    v b   
       the inverse golden ratio again  
 
    global approach  with tuples 
consider second approach valuation step  called global approach  here 
key idea value must describe subgraph whose root a  so 
want memorise length branch leading tuple  for attack branch 
odd integer  defence branch  even integer  
approach  main constraint must able identify branches
leading argument compute lengths  easy case
acyclic graph  therefore introduce first global gradual valuation acyclic graphs 
then  next sections  extend proposition case graphs cycles 
study properties global gradual valuation 
      gradual valuation tuples acyclic graphs
first  order record lengths branches leading arguments  use
notion tuples define operations tuples 
   

figraduality argumentation

definition    tuple  tuple sequence integers  tuple                      
 
 z
 
denoted     tuple                       denoted    
 
 z
 





notation   denotes set tuples built positive integers 
definition    operations tuples  two kinds operations tuples 
concatenation two tuples defined function    
                 

 x            xn             x             x n            sort x            xn           x             x n         
sort function orders tuple increasing values 
addition tuple integer defined function  




  k    k 
   k     

 x            xn   k    x    k          xn   k 

 x            xn          k    x    k          xn   k          x            xn              
note allow infinite tuples  among reasons  needed later
order compute ordering relations described section        in particular
graph cyclic  
operations tuples following properties 
property    properties    
concatenation   commutative associative 
tuple integers k k      t k  k      k   k     
integer k tuples t  different        t   t    k    t k     t  k  
order valuate arguments  split set lengths branches leading
argument two subsets  one lengths defence branches  even integers 
one lengths attack branches  odd integers   captured
notion tupled values 
definition    tupled value  tupled value pair tuples vt    vtp   vti   with 
vtp tuple even integers ordered increased values  tuple called even
component vt 
vti tuple odd integers ordered increased values  tuple called odd
component vt 
    otherwise false         p   k    p   k   whereas    k      p  k     k     p   k     k  p   k  

   

ficayrol  lagasquie schiex

notation   v denotes subset tupled values  so  vt v  vt pair
tuples satisfying definition    
using notion tupled values  define computation process gradual
valuation tuples   case acyclic graphs 
definition     valuation tuples acyclic graphs  let  a  r  argumentation system without cycles  valuation tuples function v   v
that 
leaf

v a             

direct attackers denoted b            bn        
v a     vp  a   vi  a   with 

vp  a     vi  b             vi  bn          
vi  a     vp  b             vp  bn          

notes  choice value          leaves justified fact value
argument memorises lengths branches leading argument  using
constraint  either vp  a  vi  a  may empty both    
note set direct attackers argument infinite  this property
used take account argumentation graph cycles  
example   graph  valuation tuples gives following results 

b 

b 

c 

d 

graph g  have 

c 

c 

d 

v d      v c      v e               
v c      v d                
v c                
v b                 
v b                
v a                     

e 

    definition different definition given  cayrol   lagasquie schiex      c   ideas
formalisation different 
    proof following  
leaf  least one tuples empty  exists least one branch
whose length     leading  see definitions       
and  leaf  exists least one defence branch path
allowed length    in fact  infinity paths see definition    attack
branch leading leaf  see definition     
so  value leaf           impossible vp  a    vi  a       

   

figraduality argumentation

      study cycles
handling cycles raises important issues  notion branch always useful
cycle  for example  unattacked cycle examples       notion
useful  length branch defined different ways 
let us consider different examples 
example    unattacked cycle  graph reduced unattacked cycle b
attacks argument c 


b

c

notion branch useless case  leaf graph 
two possibilities 
first  one consider cycle infinite branch   resp  b 
root one branch whose length   parity length branch
undefined  impossible say branch attack branch defence
branch 
second possibility consider cycle infinity branches 
 resp  b  root infinity attack branches defence branches whose
lengths known finite 
second possibility means cycle may two representations acyclic
infinite graphs  one root one root b  
rewriting process cycle 
b 

a 

b 

b 

b 

a 

a 

a 

b 

b 

b 

a 

a 

a 

b 

b 

b 

a 

a 

a 

b



ai bi must new arguments created rewriting process cycle 
example    attacked cycle  cycle b attacked least one argument
belong cycle  here  attacker unattacked argument d  
   

ficayrol  lagasquie schiex





b

c

e

case  notion branch useful exists one leaf graph 
difficulty compute length branch  example    consider either
one infinite branch  so  impossible know branch attack
defence branch   infinity attack branches defence branches
whose lengths known finite 
second case  graph rewritten following structures 




a 

a 





b 

a 

a 



b 

a 

a 



b 

b 

b 

b 

a 

a 

a 



b

c

e

ai bi must new arguments created rewriting process graph 
previous examples  chosen manage cycle infinity attack
branches defence branches whose lengths known finite would
able apply definition    cases  acyclic graphs graphs cycles   however 
need rewriting process graph cycles acyclic graph  two
different cases  one unattacked cycles one attacked cycles 
definition     rewriting unattacked cycle  let c   a  a        an  a 
unattacked cycle  graph g contains c rewritten follows 
   

figraduality argumentation

   cycle c removed 
   replaced infinite acyclic graphs  one ai             n   

 
ai   

 
ai   

ai   

ai
   
   
   
   
   

 

ai n 
 

ai n 
 
   

ai n 
n 

ai n 

ai n 
   

ai nn 

ai nn

 

ai n  
 

ai n  
 
   

ai n  
n 

ai n  
n

ai n  
n  

   
   
   
   
   
   
   
   
   
   
   

   edges ai argument belong c kept 
example   unattacked cycle  continuation  graph g containing unattacked
cycle b argument c  attacked a  rewritten follows 
c


 
a  

 
a  

a  

b
a  

a  

a  

 
b  

   
   
   
   
   
   

 
b  

b  

b  

b  

b  

   
   
   
   
   
   

alk bkl new arguments 
definition     rewriting attacked cycle  let c   a  a        an  a 
attacked cycle  direct attacker ai denoted bi   exists  graph g
contains c rewritten follows 
   cycle c removed 
   replaced infinite acyclic graphs  one ai           n   
   

ficayrol  lagasquie schiex

 
bi

 
ai   


b i  n  mod n

ai
   
   
   
   
   

ai n 
 

ai n 
 
   

ai n 
n 


ai n 

ai n 
   

ai nn 

ai nn

bi

b i    mod n

ai n  
 

ai n  
 
   

ai n  
n 

ai n  
n

ai n  
n  


b i  n  mod n

   
   
   
   
   
   
   
   
   
   
   
   
   

 the branches leading bk exist iff bk exists     
   edges ai argument belong c kept 
   edges bi argument belong c kept 
example   attacked cycle  continuation  graph g containing cycle
b attacked argument argument c  resp  e  attacked
 resp  b  rewritten follows 
e

b

c


 



a  

a  



a  

a  

a  

a  



 
b  



   
   
   
   
   
   
   
   
   
   

alk bkl new arguments 
    operator mod modulo function 

   


b  

b  

b  



b  

b  

b  

b  

b  



   
   
   
   
   
   
   
   
   
   
   
   

figraduality argumentation

note  exist several cycles graph  two cases 
interconnected  rewrite cycle  valuation resulting
graph rewriting depend order cycles select rewrite
valuation process uses length branches 
interconnected  considered metacyle turn attacked unattacked previous methodology used leading
complex rewriting process formalized  see details examples
appendix b  
      gradual valuation tuples general graphs
using definitions given sections              gradual valuation tuples
given definition    applicable arbitrary graphs rewriting process 
let us apply rewriting process definition    different examples 
example   unattacked cycle  continuation 
consider following graph 


b

c

rewriting graph given section       
definition    produces 
vp  a     vi  a                   vi  an              
vi  a     vp  a                   vp  an              
applying definition    different arguments rewritten graph produces following
equalities 
v ann              n  
v ann                n  


v am
n      vp  an        vi  an        n   n    

so  using equalities formulae giving vp  a  vi  a   define two sequences tuples   sequence  xk   k    infinite tuples even integers  sequence
 yk   k    infinite tuples odd integers
n
xk          vi  a k  
 k                  vi  a k              
n
yk          vp  a k  
 k                  vp  a k              

   

ficayrol  lagasquie schiex

results stated property    easy prove vp  a    x  k   
xk          xk      
similarly  vi  a    y  k    yk          yk      
equations enable prove  
even integer p p      p belongs tuple xi     
odd integer p  p belongs tuple yi     

proof done induction p 
so  v a    v b                                         
then  v c                                         
note results readily extended unattacked cycle length n 
n   
property    properties unattacked cycles 
unattacked cycle  argument cycle  v a                                         
example   attacked cycle  continuation 

consider following graph 





b

c

e

rewriting graph given section       
definition    produces 
vp  a     vi  d        vi  a                   vi  a n
              
vi  a     vp  d        vp  a                   vp  a n
              

v d            
v ann               n  
done treatment example    formulae giving vp  a  vi  a  rewritten
order bring light interesting sequences tuples 
   

figraduality argumentation

  k p 

x k    vi  a k
 k                  vi  a k              
  k p 

yk           vp  a k
 k                  vp  a k              
then  easy prove vp  a    x   k    x k    x k      
 
   
similarly  vi  a    y   k    yk           yk  

first equation enables prove x   empty tuple    
second equation already solved produces y                      
so  v a                            b  reason a  v b                           
then  v c                            v e                          
notation  order simplify writing  repeat values inside tuples
 we indicate value many times appears   example 
                                                                            
denoted
       z 
      z 
      z 
                  z 
      z 
      z 
           
 

 

 

 

 

 

conclusion cycles cycles expensive since values obtained infinite 
appendix b  introduce algorithm computing tupled values  uses
process value propagation parameterised maximum number runs
cycle  number used order stop propagation mechanism
obtain finite  thus incomplete  tupled values 
      comparison tupled values
section  define comparison relation arguments  so  particular tupled values   using following idea  argument better argument
b iff better defence  for it  lower attack  against it  
first idea use lexicographic ordering tuples  lexicographic ordering
denoted lex defined by 
    proof following  
x   contains even integers 
k  x k      since x k result addition tuple integer 
x   empty  let e  denote least even integer present x     x     x      x   empty
e  denote least integer present x     e    e       so  able build
sequence positive even integers e    e           strictly decreasing  impossible  so 
x        

   

ficayrol  lagasquie schiex

definition     lexicographic ordering tuples 
let  x            xn           y            ym            finite infinite tuples  
 x            xn           lex  y            ym          iff   that 
j   i  xj   yj
yi exists and 
either tuple  x            xn          finite number elements equal  
 so  xi exist  
xi exists xi   yi  
 x            xn           lex  y            ym          iff tuples contain number p   
elements i    p  xi   yi  
so  define   x            xn          lex  y            ym          iff
 x            xn           lex  y            ym           x            xn           lex  y            ym          
ordering  lex generalisation classical lexicographic ordering  see xuong 
      case infinite tuples  ordering complete well founded  there
exist infinite sequences strictly non increasing       lex         lex        lex
                       lex        lex         
since even values odd values tupled value argument play
role  cannot use classical lexicographic comparison  so  compare tupled
values two steps 
first step compares number attack branches number defence
branches argument  so  two criteria  one defence
attack   criteria aggregated using cautious method  conclude
one arguments defence branches  it better according defence
criterion  less attack branches argument  it better according
attack criterion   note conclude positively criteria
agree  one arguments defence branches  it better according
defence criterion  attack branches argument  it worse
according attack criterion   arguments considered incomparable 
else  arguments number defence branches number
attack branches  second step compares quality attacks
quality defences using length branch  comparison made
lexicographic principle  see definition     gives two criteria
aggregated using cautious method  case disagreement  arguments
considered incomparable 
let us consider examples 
           better               less attack branches first
tupled value second tupled value  numbers defence branches
 first step  
           incomparable                  less defence branches
less attack branches first tupled value second tupled value  first
step  
   

figraduality argumentation

           better            weaker attack branches first
tupled value second tupled value  the attack branch first tupled
value longer one second tupled value   defence branches
 second step  using lexicographic comparison applied even parts
odd parts tupled values  
           better            stronger defence branches
first tupled value second tupled value  the defence branch shorter
first tupled value second tupled value   attack branches
 second step  
           incomparable            worse attack branches
better defence branches first tupled value second tupled value
 second step  
comparison arguments done using algorithm   implements principle
double comparison  first quantitative  qualitative  two criteria  one defence
criterion one attack criterion  using cautious method 
algorithm    comparison two tupled values
  description parameters 
  v  w    tupled values
  notations 
 
 vp    resp   wp     number elements even component v  resp  w 
 
vp  resp  wp   infinite  vp    resp   wp    taken equal
 
 vi    resp   wi     number elements odd component v  resp  w 
 
vi  resp  wi   infinite  vi    resp   wi    taken equal
 
usual  denote strict relation associated defined by 
 
v w iff v w not w v  

 
 
 
 
 
 
 
 
 

begin
v   w v w w v
  case    
 
else
 
 vi      wi    vp      wp  
  lexicographic comparisons vp wp vi wi  
 
vp lex wp vi lex wi v w
  case    
 
else
 
vp lex wp vi lex wi v w
  case    
 
else v   w v   w
  incomparable tupled values  case    
 

 
 
  
  
  

else
 vi    wi    vp    wp   v w
  case    
else
 vi    wi    vp    wp   v w
  case    
else v   w v   w
  incomparable tupled values  case    

end

algorithm   defines partial preordering set v a  
property    partial preordering  algorithm   defines partial preordering
set v a  
   

ficayrol  lagasquie schiex

tupled value          maximal value partial preordering  
tupled value          minimal value partial preordering  
notation  partial preordering set v a  induces partial preordering
arguments  the partial preordering denoted partial preordering
v a    b v a  v b     
order present underlying principles satisfied global valuation  first
consider different ways modifying defence part attack part argument 
definition     adding removing branch argument 
let argument whose tupled value v a     vp  a   vi  a   vp  a     xp            xpn  
vi  a     xi            xim    vp  a  vi  a  may empty simultaneously  
adding  resp  removing  defence branch defined by 
vp  a  becomes sort xp            xpn   xpn     xpn   length added branch  resp 
j     n  vp  a  becomes  xp            xpj    xpj             xpn    
thing vi  a  adding  resp  removing  attack branch a 
definition     increasing decreasing length branch argument 
let argument whose tupled value v a     vp  a   vi  a   vp  a     xp            xpn  
vi  a     xi            xim    vp  a  vi  a  may empty simultaneously  
increasing  resp  decreasing  length defence branch defined by 
p
p
 p
p
j     n  vp  a  becomes  xp            xpj    x p
j   xj             xn   xj   xj  resp 
p
 p
p
x p
j   xj   parity xj parity xj  
thing vi  a  increasing  resp  decreasing  attack branch a 
definition     improvement degradation defences attacks 
let argument whose tupled value v a     vp  a   vi  a    vp  a  vi  a  may
empty simultaneously   define 
improvement  resp  degradation  defence consists
adding defence branch initially vp  a        resp  removing
defence branch a  
decreasing  resp  increasing  length defence branch a 
removing defence branch leading  resp  adding defence branch leading initially vp  a        
improvement  resp  degradation  attack consists
adding  resp  removing  attack branch a 
decreasing  resp  increasing  length attack branch a 
property     underlying principles  let v valuation tuples  definition    
associated algorithm    v respects following principles 
p   valuation maximal argument without attackers non maximal
argument attacked  whether defended not  
    use notation b defined by  b iff b 

   

figraduality argumentation

p   valuation argument takes account branches rooted
argument 
p   improvement defence degradation attack argument leads
increase value argument 
p   improvement attack degradation defence argument leads
decrease value argument 
example    continuation 

valuation tuples  obtain 

v e      v d      v d      v c      v b               
v d      v c      v c      v b                
v c      v b                
v b                 
v a                        
so  have 
e             c     b 

c     b 

b 

    c     c     b 



e             c     b 



incomparable almost arguments  except leaves graph  
similarly  hatched part graph  obtain following results 
e    d  c   b       c  
comparable arguments  in particular  worse
defender c  direct attacker b    
    main differences local global valuations
cayrol lagasquie schiex      c  give comparison approaches existing approaches  dung        jakobovits   vermeir        besnard   hunter        
comparison local approaches global approach  improvement
global approach proposed paper modify main results
comparison 
let us recall example essential point differentiates  this example
already presented beginning section    


c 

c

b
c 

   

b

ficayrol  lagasquie schiex

local approach  b   better b  since b   suffers one attack whereas b suffers
two attacks  
global approach  b better b    since least defence whereas b  
none   case  c  loses negative status attacker  since fact carrying
defence b 
following table synthesises results different proposed valuations 
global approach
arguments
ing
branches

havattack



arguments
attack
branches

defence
branches



arguments
defence
branches



arguments
never attacked

local approach
arguments
arguments
havonly one attacked
ing

one


direct
attacker
unattacked direct
 possibly
defended 
attacker
arguments several attacked direct attackers  possibly defended 

arguments
several unattacked
direct attackers



arguments
never attacked

difference local approaches global approach illustrated
following property 
property     independence branches global approach 
let argument following direct attackers 
a  whose value v a        a p            a pm     a i            a im    
 
 
    
whose value v an       anp            anpmn     ani            animn    
let a  argument following direct attackers 
a p  whose value v a p        a p       
    
a pm whose value v a pm       a pm      
 

 

 

a i  whose value v a i          a i     
    
a im whose value v a im         a im    
 
 
 
    
anp  whose value v anp        anp       
    
   

figraduality argumentation

anpmn whose value v anpmn       anpmn      
ani  whose value v ani          ani     
    
animn whose value v animn         animn    
v a    v a    
property illustrates independence branches computation
values global approach  even branches graphically independent 
following example  a  value            though root
different subgraphs 
c 

c 
b

b 



c 

c 

b 

property satisfied local approach since  using underlying principles
local approach  see property     value argument must least
good  and sometimes better than     value argument a   a one direct
attacker  a  two direct attackers  
    conclusion valuation step
proposed two different gradual valuation models able make
distinction different arguments using preordering associated valuation
model  valuations used selection arguments  see section    

   graduality acceptability
section  shift selection step introduce graduality notion
acceptability    
basic idea select argument depending non selection direct attackers 
following idea  propose two different methods 
first method consists refining classical partition issued dungs collective acceptability  refinement may achieved using gradual valuations
defined section   
second method takes place individual acceptability consists defining
new acceptability using gradual valuations defined section   
    dungs        collective acceptability
framework collective acceptability  consider acceptability set
arguments  acceptability defined respect properties sets
satisfy properties called acceptable sets extensions  argument
said acceptable belongs extension 
    valuation proposed besnard hunter         obtain  v a       v a          
    work presented workshop  cayrol   lagasquie schiex      b  

   

ficayrol  lagasquie schiex

definition     basic properties extensions following dung       
let  a  r  argumentation system  have 
conflict free set set e conflict free   a  b e arb 
collective defence consider e a  a  e collectively defends
b a  bra  c e crb  e defends elements
e  e collectively defends a 
dung        defines several semantics collective acceptability  mainly  admissible
semantics  preferred semantics stable semantics  with corresponding extensions 
admissible sets  preferred extensions stable extensions  
definition     some semantics extensions following dung        let  a  r 
argumentation system 
admissible semantics  admissible set  set e admissible e
conflict free e defends elements 
preferred semantics  preferred extension  set e preferred extension
e maximal set inclusion among admissible sets 
stable semantics  stable extension  set e stable extension e
conflict free e attacks argument belong e  a   e 
b e bra  
note definitions  attacker given argument considered
separately  the direct attack whole considered   dung        proves that 
admissible set  a  r  included preferred extension  a  r  
always exists least one preferred extension  a  r  
 a  r  well founded one preferred extension
stable extension 
stable extension preferred extension  the converse false  
always stable extension 
property    set leaves  i e   a r  a       included every preferred extension every stable extension 
    different levels collective acceptability
given semantics  following dung  acceptability argument depends
membership extension semantics  consider three possible cases     
    terminology used section used domain nonmonotonic reasoning  see pinkas
  loui         word uni comes word universal synonym word skeptical 
word exi comes word existential synonym word credulous 
chosen use words uni exi recall logical quantificators  for all   exists
least one  

   

figraduality argumentation

argument uni accepted  belongs extensions semantics 
argument exi accepted  belongs least one extension
semantics 
argument not accepted belong extension
semantics 
however  three levels seem insufficient  example  concluded
case two arguments b exi accepted arb bra 
so  introduce new definition takes account situation argument
w r t  attackers  refines class exi accepted arguments given
semantics s 
definition     cleanly accepted argument  consider a  cleanly accepted
belongs least one extension b bra  b
belong extension s 
thus  capture idea argument better accepted  attackers
not accepted 
property    consider semantics extension conflictfree  uni accepted cleanly accepted  converse false 
notion cleanly accepted argument refines class exi accepted arguments 
semantics argument a  following states 
uni accepted  belongs extensions  so 
cleanly accepted  
cleanly accepted  so  definition exi accepted   note
possible argument uni accepted 
only exi accepted  cleanly accepted  exi accepted 
not accepted belong extension s 
example   consider following argumentation system 
two preferred extensions  d  c    a  g 
j
 d  c    e  g  i   so  preferred semantics  aci
ceptability
levels following 
e

g
h



b

f

c 

c 

d  c  g uni accepted 
cleanly accepted uni accepted 
e only exi accepted 
b  c    f   h j not accepted 

note that  cases one extension  first three levels acceptability coincide     case 
    one extension fact belongs extensions equivalent
fact belongs least one extension  moreover  one extension containing a 
attackers belong extension  so  cleanly accepted 

   

ficayrol  lagasquie schiex

preferred semantics  even cycle  see doutre        
basic semantics  another semantics proposed dung see dung       
doutre       presented one extension  
looking closely  prove following result  proof appendix a  
property    stable semantics  class uni accepted arguments coincides
class cleanly accepted arguments 
then  using result issued work dunne bench capon             
reused doutre        shows that  odd cycle  preferred
extensions stable     apply property    obtain following consequence 
consequence   preferred semantics  odd cycle  class
uni accepted arguments coincides class cleanly accepted arguments 
finally  exploitation gradual interaction based valuations  see section    allows
us define new levels collective acceptability 
let v gradual valuation let associated preordering  partial complete 
a  preordering used inside acceptability level  for example  level
exi accepted arguments  order identify arguments better accepted
others 
example    continuation 
graph 

two different gradual valuations applied

     

     

     

j



e

     

h

g      

     
    b


 

c 

f

   

c   

   

besnard   hunters        valuation
instance generic valuation proposed besnard hunter         see
section       obtain following comparisons 
d  c  e g j c    f h b
    corresponds consistent argumentation system proposed dung        

   

figraduality argumentation

 
 

                 
   
 
 
 

                
     

j

                
              

e
h

     

   

               
             


g         

 
 
 

 
 

                
   
               

 
 
 

                 
     
               
 
 



         



b

c 

              

f         

c                

        

valuation tuples

global valuation tuples presented section      obtain following comparisons 
d  c  g b f  c 
d  c  e
d  c  h e
d  c 
d  c  j
so  arguments belonging cycle incomparable g  b  f   c   and  even
them  comparison results 
apply preordering induced valuation without respecting acceptability
levels defined section  counter intuitive situations may happen  example   
obtain 
valuation besnard hunter        preferred semantics 
e g despite fact g uni accepted e only exi accepted 
valuation tuples preferred semantics  h e despite
fact e only exi accepted h not accepted 
counter intuitive situations illustrate difference acceptability definition valuation definitions  even use interaction arguments 
use way  
   

ficayrol  lagasquie schiex

    towards gradual individual acceptability
individual acceptability based comparison argument attackers 
first proposal select argument attacker
 see elvang goransson et al         
later extended amgoud cayrol        where  using preference
relation arguments  an intrinsic valuation   argument accepted
preferred attackers 
following proposal  propose mechanism interaction based
valuation 
given v gradual valuation  preordering induced v directly used order
compare  acceptability point view  argument attackers     
defines new class acceptable arguments  well defended arguments 
definition     well defended argument  consider a  well defended  for v 
b bra  b   a 
thus  capture idea argument better accepted least good
direct attackers  or incomparable case partial ordering  
set well defended arguments depend valuation used 
using new notion  set arguments partitioned three classes 
first class contains arguments attacked 
second class contains arguments attacked well defended 
third class contains arguments  attacked well defended  
note set well defended arguments corresponds union two first
classes  refinement uses gradual valuation inside classes
section     
example   presented section      well defended arguments are 
d  c    g  h  a incomparable b better e  valuation
tuples 
though valuation besnard hunter        well defended arguments
d  c    g  e  e better a  
note that  semantics dung         definition    considers attackers
one one  suitable valuation handles direct attack whole
 as valuation besnard hunter        see counterexamples presented
section      
    idea used notion defeat proposed bench capon         so  link
well defended argument argument attacked sense benchcapon        direct attackers  note that  work bench capon         valuation
extra knowledge added argumentation framework  contrast  here  v preference extracted
attack graph 

   

figraduality argumentation

    compatibility acceptability gradual valuation
following previous sections  set arguments partitioned two different
ways 
first  given semantics gradual valuation v  possible use partition
issued dung        refined 
uni
accepted
cleanly
accepted

exi
accepted

onlyexi
accepted


accepted

refinement level gradual valuation v

second  given gradual valuation v  possible use partition induced
notion well defended arguments 
attaked
welldefended
arguments

attaked
arguments


















welldefended





valuation
v
















unattacked
arguments

natural interesting question is  possible find semantics gradual
valuation v associated partitions compatibilities 
following examples show class well defended arguments correspond class cleanly accepted arguments  in cases  uni accepted
arguments even well defended  
   

ficayrol  lagasquie schiex

      examples showing non compatibility general case
give examples usual valuation  the global valuation tuples   instances
generic local valuation  besnard   hunter        jakobovits   vermeir       
classical semantics acceptability  preferred semantics stable semantics
dung        
cleanly accepted argument well defended    examples  each using distinct valuation  one global valuation two two well known instances
local valuation  
argument cleanly accepted well defended 


   

   

b 

b 

b 
   

c 

c 
 

   

c 
 

 

  preferred stable extension     c   c   c   a 
b   b   b  belong preferred extension
bi
forall          

argument cleanly accepted well defended 
 

c

  preferred stable extensions    c a   d a 
b doesnt belong preferred extension
b





b
 

 

argument cleanly accepted well defended 
           

             

b

c

        

        


        
h
        

e

f
           

g
           


           

  preferred stable extension    a c f i 
g doesnt belong preferred extension
g


well defended argument cleanly accepted  similarly  three valuations 
have 
argument c well defended cleanly accepted 
 

 


 

b
c
 

  preferred stable extension    d  b 
c
b
c doesnt belong preferred stable extension

argument f well defended cleanly accepted 
   

figraduality argumentation

     

  preferred stable extensions    a h e   b h f 
f belongs preferred stable extension
f
e e belongs preferred stable extension
e attacks f

     
b



e

g
   

     

h
 

f
     

argument g well defended cleanly accepted 
           

              

b

c

        

        


        

e

f
           

g
           


           

h
        

  preferred stable extension    a c f i 
g
f
g doesnt belong preferred stable extension

      particular cases leading compatibility
context argumentation system finite relation r without cycles     
stable preferred semantics provide one extension levels uni accepted 
exi accepted  cleanly accepted coincide 
context  least two particular cases leading compatibility 
first case  deals global valuation tuples 
theorem   let g graph associated  a  r    a  r  argumentation
system finite relation r without cycles satisfying following condition 

xi   leaf g  one path xi a  xi        xili xi    xi
li length path  if li even  path defence branch a  else
attack branch  
paths xi root dependent a 
ai a  xj leaf g ai belongs path xj a 
let v valuation tuples  let semantics  preferred  stable  
   b a  b    a  b  exi  uni  cleanly  accepted iff b well defended v 
    exi  uni  cleanly  accepted well defended v  the converse
false  
   well defended v branches leading defence branches
 exi  uni  cleanly  accepted s 
    so   a  r  well founded 

   

ficayrol  lagasquie schiex

note theorem   is  general  satisfied local valuation  see following
counterexample valuation besnard hunter        
   

   

 

b 

c 

   

b 

  c 

   

b 

  c 

graph satisfies condition stated theorem    set well defended arguments
 c    c    c     so  well defended   nevertheless   c    c    c    a  preferred
extension 
second case  second case concerns generic local valuation 
theorem   let  a  r  argumentation system finite relation r without
cycles  let semantics  preferred  stable   let v generic local valuation
satisfying following condition    
 i           n  g xi   xi    g h x            xn    h x            xn   
  
a   exi  uni  cleanly  accepted iff well defended v 
theorem direct consequence following lemma 
lemma   let  a  r  argumentation system finite relation r without cycles 
let semantics  preferred  stable   let v generic local valuation satisfying
condition    
 i  exi accepted one direct attacker b b 
 ii  b not accepted b one direct attacker c c b 
remark  condition    stated theorem   is 
false local valuation proposed besnard hunter        shown
following graph 
   

   

 

know g x   

 
  x



b 

c 

   

b 

   

b 

  c 

  c 
h x            xn     ni   xi

 see property     get 

             xi   v bi         
             g xi           g xi   xi  
nevertheless g h x    x    x       v a          h x    x    x          
   

figraduality argumentation

false local valuations defined h n     h x            xn    
max x            xn    for functions g strictly non increasing   see previous graph
h x    x    x          max x    x    x          
true local valuations defined h   max  for functions g   h   max
g h x            xn      g max x            xn      g xj    xj maximum xi  
and  assumption  g xi   xi   xi   particular xj   so  get 
g h x            xn      g xj   xj   max x            xn     h x            xn   

   conclusion
paper  introduced graduality two main related issues argumentation
systems 
valuation arguments 
acceptability arguments 
regarding first issue  defined two formalisms introducing interaction based
gradual valuation arguments 
first  generic gradual valuation covers existing proposals  for example besnard
  hunter       jakobovits   vermeir         approach essentially local
since computes value argument value direct attackers 
then  approach based labelling takes form pair tuples 
labelling memorises structure graph representing interactions  the
attack graph   associating branch length  number edges
leaf current node  attack graph  if length branch even
integer  branch defence branch current node  otherwise branch
attack branch current node   approach said global since
computes value argument using whole attack graph influencing
argument 
shown valuations induces preordering set arguments  brought light main differences two approaches 
regarding second issue  two distinct approaches proposed 
first  context collective acceptability dung         three levels
acceptability  uni accepted  exi accepted  not accepted  already defined 
graduality introduced collective acceptability using notion cleanlyaccepted arguments  those whose direct attackers not accepted  
then  context individual acceptability  using previously defined gradual
valuations  new notion well defended arguments introduced  those
preferred direct attackers sense given gradual valuation
v  
first concept induces refinement level exi accepted two sublevels  cleanlyaccepted arguments only exi accepted arguments   gradual valuation allows graduality inside level collective acceptability 
   

ficayrol  lagasquie schiex

second concept induces two new levels acceptability  well defended arguments
not well defended arguments   gradual valuation allows graduality inside
level individual acceptability 
regarding initial purpose introducing graduality definition acceptability 
adopted basic principle 
acceptability strongly related interactions arguments  represented
graph interactions  
argument acceptable preferred direct attackers 
then  followed two different directions  one based refinement existing
partition remains framework dungs work  one based
original concept well defended  deserves investigation  particular
computational point view 

acknowledgements
thanks reviewers interesting constructive comments 
thanks thomas schiex help 

appendix a  proofs
section  give proofs properties presented sections     
proof
 of property    induction vmin g vmax     vmax applying
function g twice 


proof
 of property    valuation function v associates argument
value v a  belonging set v subset completely ordered set
w 


proof
 of property    let c   an        a  a  cycle 
n even  n    k v a      g v a               g  k   v a k     
g  k  v a      so  v a    fixpoint g  k   g n   ai  
   k 
however  ai may different values  example  n     
valuation jakobovits vermeir         v a        v a     
g      g        ai value 
value fixpoint g  because v a      g v a       g v a      
   

figraduality argumentation

n odd  n    k     v a      g v a               g  k  v a k       
g  k    v a      so  v a    fixpoint g  k     g n  
ai      k     
since function g non increasing  function g  k   nonincreasing apply following result  non increasing function fixpoints  fixpoints identical     so  v a             
v a k      but  v a      g v a       g v a      v a    fixpoint g 
so     k      v ai   fixpoint g 

proof
 of property   
p  satisfied because  a  direct attacker  r  a  empty  
v a    vmax g vmax     vmax  
p  satisfied r  a     a               h v a             v an    evaluates
direct attack a 
p  satisfied function g supposed non increasing 
p  satisfied due properties function h 



proof
 of property    valuation proposed jakobovits vermeir       
following 
let  a  r  argumentation system  complete labelling  a  r 
function et            that 
   et a        b r  a  et b        

   et a         b r  a  r   a   et b       
moreover  jakobovits vermeir        define complete rooted labelling
et with  a  et a    b r  a  et b      

translation et local gradual valuation easy 

g defined g        g        g       h function max 



proof
 of property    besnard hunter        introduce following function
cat  in context deductive arguments acyclic graph  
r  a      cat a     
    proof  let g non increasing function  let two fixpoints g       may suppose
    g   g    since g non increasing    since fixpoints g  
contradiction assumption    

   

ficayrol  lagasquie schiex

r  a     r  a     a               cat a   

 
  cat a        cat an  

translation cat gradual valuation is  v           w         
 
h
vmin     vmax     g   w v defined g x      x
defined h  x            xn      x      xn  

proof
 of property    let    x            xn           t     y            yn           t      z            zn         
tuples 
commutativity      t    t    two cases 
t        property given definition   
t        
  t    sort x            xn           y            yn         
  sort y            yn           x            xn         
  t   
associativity     t   t      t        t    t     two cases 
t  t         simplify expression  example 
     
 t   t      t     t    t  
     t    t    
t  t  t         
 t   t      t     sort x            xn           y            yn           z            zn         
     t    t    
property    t k  k      k   k     have 
 t k  k      x    k          xn   k         k  

   x    k   k             xn   k   k           

   k   k    
distributivity   t   t    k    t k     t  k  have 
 t   t    k   sort x            xn           x             x n          k

  sort x    k          xn   k          x     k          x n   k        

   t k     t  k 


   

figraduality argumentation

proof
 of property    first  show relation defined algorithm  
partial ordering 
let u  v  w three tupled values  relation defined algorithm   is 
reflexive  u u u   u  u u u u  case  
algorithm    
transitive  suppose u v v w consider
possible cases 
u   v 
v   w  u   w u w 
 vi    wi    vp      wp     vi      ui    wi  
 vp      up      wp    u w 
 vi      wi    vp    wp     vi      ui      wi  
 vp      up    wp    u w 
 vi      wi    vp      wp   vp lex wp
vi lex wi    vi      ui      wi    vp      up      wp  
vp   lex wp vi   ui lex wi   u w 
 ui    vi    up      vp   
v   w   ui    vi      wi    up      vp      wp  
u w 
 vi    wi    vp      wp     ui    vi    wi  
 up      vp      wp    u w 
 vi      wi    vp    wp     ui    vi      wi  
 up      vp    wp    u w 
 vi      wi    vp      wp     ui    vi      wi  
 up      vp      wp    u w 
 ui      vi    up    vp   
v   w   ui      vi      wi    up    vp      wp  
u w 
 vi    wi    vp      wp     ui      vi    wi  
 up    vp      wp    u w 
 vi      wi    vp    wp     ui      vi      wi  
 up    vp    wp    u w 
 vi      wi    vp      wp     ui      vi      wi  
 up    vp      wp    u w 
 ui      vi    up      vp   lex vp ui lex
vi  
v   w   ui      vi      wi    up      vp      wp  
lex vp   wp ui lex vi   wi u w 
 vi    wi    vp      wp     ui      vi    wi  
 up      vp      wp    u w 
   

ficayrol  lagasquie schiex

 vi      wi    vp    wp     ui      vi      wi  
 up      vp    wp    u w 
 vi      wi    vp      wp   vp lex wp
vi lex wi    ui      vi      wi    up      vp      wp  
lex vp lex wp ui lex vi lex wi  
u w 
cases  u w 
now  consider maximal minimal values 
tupled value          unique maximal element preordering
  let v tupled value v               vp    vi     
compare          v algorithm                v case number
  used  then            vi           vp   two
cases 
 vp      vi        case   algorithm   applied
         v 
else  vp    vi      case   algorithm   applied
         v 
tupled value          unique minimal element preordering
  let v tupled value v               vi    vp     
compare          v algorithm                v case number
  used  then            vp           vi   two
cases 
 vi      vp        case   algorithm   applied
         v 
else  vi    vp      case   algorithm   applied
         v 

proof
 of property     principle p   satisfied definition   
fact          unique maximal element v a   see property    
principle p   satisfied definition    
principles p   p   satisfied  possible cases improvement degradation defence attack given argument  see definition    
applied case case     case leads new argument  using algorithm    comparison argument application
case shows principle p    or p     depending applied case 
    work case case order avoid complex cases several simultaneous simple
modifications  example  modification length branch changes status
branch  an even integer replaced odd integer  complex case corresponding two simple cases 
removal branch given status  addition new branch different status 

   

figraduality argumentation

satisfied 



proof
 of property     definition    



proof
 of property     first  consider case preferred extensions  let
e preferred extension a  assume e contain
unattacked arguments a  so  let unattacked argument
  e 
consider e  a  
e  a  conflict free then  unattacked argument e
preferred extension  e  a  collectively defends itself  e  a 
admissible e e  a   contradicts fact e preferred
extension 
e  a  contains least one conflict  then 

b e bra  impossible since unattacked 
b e arb  but  since unattacked   c e
cra  so  e collectively defend b 
contradiction fact e preferred extension 

so  assumption e contain unattacked arguments
cannot hold 
now  consider stable extensions  let e stable extension a  assume
e contain unattacked arguments a  so  let
unattacked argument   e 
since   e exists e another argument b attacks a 
impossible since unattacked 
so  assumption e contain unattacked arguments
cannot hold 


proof
 of property     argument one direct attackers cannot belong
extension sense dung        extension must
conflict free  so  since uni accepted  means belongs
extensions  none direct attackers belongs extensions 
converse  use following counterexample case preferred
semantics 
   

ficayrol  lagasquie schiex

f



k

c

b
h

j

e

g

two preferred extensions
 k  h  g   a  e  k  h   argument cleanly accepted  b
c belong preferred extension  belongs least one
two extensions   but 
uni accepted belong
preferred extensions 



proof
 of property     first  uni accepted cleanly accepted result
property    
conversely  let cleanly accepted argument  exists least one stable extension e e b  bra  b   e     e   stable extension 
using reductio ad absurdum  assume exists stable extension
e      e      but    e      means b e    bra 
so  direct attacker b belongs stable extension  so  contradiction assumption  a cleanly accepted   so  e    exist
uni accepted 


proof
 of theorem   
   consider arguments b b    a  let xi leaf 
path c c xi   a  xi        xili xi    xi li denoting
length path  if li even  path defence branch a  else
attack branch  
constraints xi  xili following 
xi  xi        xili xili         xi  xi  li odd  

xi  xi        xili   xili       xi  xi  li even  
so  path xi        xili   set well defended arguments
 xi    xi            xili   li odd   xi    xi            xili     otherwise  this
set arguments value strictly better
direct attackers   set denoted accepi  
definition  set conflict free  defends elements  because
contains leaf path arguments defended
leaf  attacks arguments path  try
   

figraduality argumentation

include another argument path x  xi            xili    accepi  
obtain conflict  because arguments path attacked
elements accepi    so   xi            xili    accepi
preferred stable extension 
consider a       a   r  restriction r a   
union accep  accepi   union accep preferred
stable extension  a    r    
so  b a  b    a  b accepted iff b well defended 

   now  consider a  accepted union accep  a 
preferred stable extension  a  r   so  i  xili belong
extension  then  i  xili   xili   therefore  branch leading
defence branch a  so  i  v xili         li      so  v a   
  l    l            ln       then  i  v a  v xili    therefore  well defended 
using following example  show converse false 
          

a 

       

b 

c 
           

       

b 

       

c 
           

       

b 

c 
           

well defended  a b    b  incomparable a   
accepted 
   now  well defended branches leading defence
branches a  union accep  a  conflict free defended
direct attackers  because xili   union accep
branch i   so  union accep  a  preferred stable extension
 a  r  accepted 


proof
 of lemma    let  a  r  argumentation system finite relation
r without cycles  so  one non empty preferred stable extension
denoted e   know that 
exi accepted direct attacker denoted b b
not accepted 
    r  restriction r a  r      a  b  arb  a    b a    

   

ficayrol  lagasquie schiex

b not accepted exists least one argument c
crb c exi accepted  because b belong e e
stable  c must e   so  fortiori  b not accepted
one direct attacker c  c exi accepted 
proof done induction depth proof tree c 
basic case  i   exi accepted one direct attacker b  bra 
c        cn direct attackers b  so  proof tree whose
depth   one unattacked ci   example c    so 
v b    g h v c             v cn    
g v c    

h v c             v cn    h v c       v c   

g non increasing

g vmax  

v c      vmax

so 

v a    g v b  
g    vmax  
but  property   says g    vmax   g vmax    v a  v b  
basic case  ii   crb c direct attacker b  so 
proof tree whose depth   c  i e  c unattacked  so  v c    vmax
v b    g vmax   v c   following definition    
general case  i   exi accepted one direct attacker b
 bra  c        cn direct attackers b  one ci exiaccepted  example c    consider subgraph leading c 
add c  rbra  assume 
g v c     v c     induction assumption issued  ii  
so 

v b    g h v c             v cn    
g v c    
v c   

reasons basic case
induction assumption

h v c             v cn   

property h

non increasing g 

v a    g v b  
g h v c             v cn       v b 
   

figraduality argumentation

general case  ii   b not accepted  c exi accepted  assume
c several direct attackers d        dp not accepted
 because c exi accepted   consider subgraph leading di
add di rcrb assume 
          p  g v di    v di    induction assumption issued  i  
so 
v c    g h v d             v dp    
h v d             v dp   

application condition   
since induction assumption
corresponds premise   

so 
v b    g v c  
g h v d             v dp       v c 

proof
 of theorem    assume    true consider exiaccepted  let bi             n  direct attackers a  then   
        n  subgraph leading bi completed bi ra  apply
lemma obtain  g v bi    v bi              n  thus  have 
v a    g h v b             v bn    
h v b             v bn   

v bi              n

applying   
property h

so  well defended 
converse  let well defended  let b            bn direct
attackers assume exi accepted  then  exists
least one direct attacker bi bi exi accepted  because
one preferred stable extension   apply  ii  lemma
subgraph leading bi completed bi ra obtain g v bi    v bi   
so  exists bi direct attacker that 

v a    g h v b             v bn    
g v bi   

v bi  

property h non increasing g
using lemma
   

ficayrol  lagasquie schiex

contradiction well defended  so  exi accepted 



appendix b  computation tupled values
propose algorithm computing tupled values arbitrary graph  cyclic
acyclic  cycles may isolated not   algorithm uses principle propagation
values  argument evaluated values direct attackers known 
must consider cycles meta arguments evaluated direct
attackers cycle  i e  direct attackers one elements cycle
belong cycle  evaluated 
beginning process follows  consider arguments
initial value           leaves graph marked final
values  thus  following partition graph g 
gv   part graph already evaluated  at beginning  part contains
leaves graph  
gv   part graph evaluated  at beginning  part contains
arguments graph g except leaves  
algorithm relies special data structure denoted l giving list
cycles graph main characteristics 
list arguments belong cycle 
list arguments belong cycle direct attackers outside
cycle  these arguments called inputs cycle  used
order propagate values across cycle case non isolated cycle  
list empty case isolated cycle 
remark  sake efficiency  interconnected cycles  see definition   
considered whole algorithm used meta cycle  example 
two cycles b b c b direct attacker outside
cycles  described data structure l one meta cycle
following lists 
a  b  c 
nothing  because isolated meta cycle  
order avoid ambiguity  meta cycles defined mcycles 
definition     mcycle  let g attack graph  let cc set cycles
g  let cc   cc cc      c            cn   set cycles 
let acc   set   aj ci cc   aj ci   
cc   satisfies following properties 
aj   ak acc     path aj ak element  arguments edges
arguments  path belongs cycles cc    
ck cc   cc       ci cc   ck interconnected ci  
   

figraduality argumentation

union ci belonging cc   mcycle 
thus  make partition cc using notion interconnection cycles 
element partition different mcycle  see following example 


j
c

b

e

f

g



k

l

graph    cycles 
 j  
 i  j  k  
 k  l  
 b  c  d  
 c  e  
 f  g  
  mcycles 
 i  j  k  l  
 b  c  d  e  
 f  g  
algorithm   main algorithm used computing tupled values 
function add node  respectively remove node  whose parameters subgraph
gx attack graph node s  adds  resp  removes   resp  of  gx  
functions described  cayrol   lagasquie schiex      a  
algorithm   applied example step rewriting  see figure     note
order make understanding results easier  created new
arguments  as definitions         course  would necessary rigorous
formalization 

   

ficayrol  lagasquie schiex

algorithm    algorithm computing tupled values
  description parameters 
 
g  attack graph  partitioned gv gv  
 
l  data structure describing mcycles
 
n  number propagation steps mcycles
  used variables 
 
a  current argument  to evaluated 
 
c  current mcycle  to evaluated   containing a 
 
lad  list direct attackers c
 
bi   current direct attackers a  c

begin
least one argument gv
 
  choose argument gv  
 
belong mcycle c described l
 
bi r  a   bi already evaluated
 
gv   add node gv  evaluate node a  r  a      

 
 
 
 
 
 
 
 
 

 

gv   remove node gv   a 

 
 
 
 
  
  
  
  
  
  

  value
  value
  direct attackers
  add  
  see definition   

else
c isolated
gv   add mcycle gv  evaluate mcycle isolated g  c  n  
gv   remove mcycle gv   c 

else
lad   find direct attackers mcycle c  g 
bi lad  bi already evaluated
gv   add mcycle gv  
evaluate mcycle not isolated g  c  lad n  
gv   remove mcycle gv   c 

return g
end

  

   

 
 
 
 
 

figraduality argumentation



c

b



e

g

f

previous argumentation graph rewritten follows 









b

b

b

c



c



c



b

b



b

b

e

c

c

e

c

c

c











b

b



b

c



c

b



c



b

b

c

b

b

e



c

c

c

c

c

b

b

b

    

    
b

c

    


    
e

g
f

results valuation obtained one propagation step are 
v a                       
v b                                       
v c                                 
v d                              
v e                      
v f                                        
v g                                 
figure    example rewriting

   

ficayrol  lagasquie schiex

references
amgoud  l     cayrol  c          acceptability arguments preference based
argumentation  cooper  g  f     moral  s   eds    proc    th uncertainty
artificial intelligence  pp      madison  wisconsin  morgan kaufmann 
amgoud  l     cayrol  c          inferring inconsistency preference based argumentation frameworks  journal automated reasoning             
bench capon  t  j          value based argumentation frameworks  benferhat   
giunchiglia  eds    proc   th international workshop nonmonotonic reasoning  session argument  dialogue decision   pp          toulouse  france 
besnard  p     hunter  a          logic based theory deductive arguments  artificial
intelligence                    
cayrol  c     lagasquie schiex  m  c       a   critique et amelioration de levaluation
graduelle par tuples pour le traitement des circuits  rapport de recherche         r 
institut de recherche en informatique de toulouse  i r i t    france 
cayrol  c     lagasquie schiex  m  c       b   gradual acceptability argumentation
systems  proc   rd cmna  international workshop computational models
natural argument   pp        acapulco  mexique 
cayrol  c     lagasquie schiex  m  c       c   gradual handling contradiction argumentation frameworks  bouchon meunier  b   l foulloy    yager  r   eds   
intelligent systems information processing  representation applications 
chap  reasoning  pp          elsevier 
doutre  s          autour de la semantique preferee des systemes dargumentation  these 
universite paul sabatier  irit 
dung  p  m          acceptability arguments fundamental role nonmonotonic reasoning  logic programming n person games  artificial intelligence 
           
dunne  p  e     bench capon  t  j          coherence finite argument systems  technical
report         university liverpool  department computer science  u l c s   
dunne  p  e     bench capon  t  j          coherence finite argument system  artificial
intelligence                    
elvang goransson  m   fox  j     krause  p          dialectic reasoning inconsistent
information  heckerman  d     mamdani  a   eds    proc   th uai  pp 
        washington  dc  morgan kaufmann 
jakobovits  h     vermeir  d          robust semantics argumentation frameworks 
journal logic computation               
karacapilidis  n     papadias  d          computer supported argumentation collaborative decision making  hermes system  information systems                 
kohlas  j   haenni  r     berzati  d          probabilistic argumentation systems
abduction  proc   th international workshop non monotonic reasoning
  special session uncertainty frameworks non monotonic reasoning  pp     
     breckenridge  colorado 
   

figraduality argumentation

krause  p   ambler  s   elvang  m     fox  j          logic argumentation reasoning
uncertainty  computational intelligence                 
lin  f     shoham  y          argument systems   uniform basis non monotonic
reasoning  proc  first international conference principles knowledge
representation reasoning  kr   pp         
parsons  s          normative argumentation qualitative probability  proc 
first international joint conference qualitative quantitative practical reasoning  ecsqaru fapr  lnai       pp          germany 
pinkas  g     loui  r  p          reasoning inconsistency  taxonomy principles
resolving conflict  allen  j   fikes  r     sandewall  e   eds    proc   rd
kr  pp          cambridge  ma  morgan kaufmann 
pollock  j  l          reason defeasibly  artificial intelligence          
pollock  j  l          defeasible reasoning variable degrees justification  artificial
intelligence              
prakken  h     sartor  g          argument based extended logic programming defeasible priorities  journal applied non classical logics          
simari  g     loui  r          mathematical treatment defeasible reasoning
implementation  artificial intelligence             
verheij  b          existence multiplicity extension dialectical argumentation  benferhat  s     giunchiglia  e   eds    proceedings  th international
workshop non monotonic reasoning  nmr       pp         
vreeswijk  g          abstract argumentation systems  artificial intelligence             
xuong  n          mathematiques discretes et informatique  masson 

   


