journal of artificial intelligence research                 

submitted        published      

planning through automatic portfolio configuration 
the pbp approach
alfonso emilio gerevini
alessandro saetti

alfonso gerevini unibs it
alessandro saetti unibs it

dipartimento di ingegneria dellinformazione
universita degli studi di brescia
via branze     i       brescia  italy

mauro vallati

m vallati hud ac uk

school of computing and engineering
university of huddersfield
huddersfield  west yorkshire  hd   dh  uk

abstract
in the field of domain independent planning  several powerful planners implementing
different techniques have been developed  however  no one of these systems outperforms
all others in every known benchmark domain  in this work  we propose a multi planner
approach that automatically configures a portfolio of planning techniques for each given
domain  the configuration process for a given domain uses a set of training instances to 
 i  compute and analyze some alternative sets of macro actions for each planner in the
portfolio identifying a  possibly empty  useful set   ii  select a cluster of planners  each
one with the identified useful set of macro actions  that is expected to perform best  and
 iii  derive some additional information for configuring the execution scheduling of the
selected planners at planning time  the resulting planning system  called pbp  portfoliobased planner   has two variants focusing on speed and plan quality  different versions of
pbp entered and won the learning track of the sixth and seventh international planning
competitions  in this paper  we experimentally analyze pbp considering planning speed
and plan quality in depth  we provide a collection of results that help to understand pbps
behavior  and demonstrate the effectiveness of our approach to configuring a portfolio of
planners with macro actions 

   introduction
during the last fifteen years  the field of automated plan generation has achieved significant
advancements  and several powerful domain independent planners are today available  e g  
for propositional planning  ff  hoffmann   nebel         lpg  gerevini  saetti    serina 
       sgplan  chen  hsu    wah         fast downward  helmert         and lama
 richter   westphal         moreover  while each of such systems performs very well on a
 more or less large  class of planning domains and problems  it is well known that no one
outperforms all the others in every available benchmark domain  see  e g   roberts   howe 
       it would then be useful to have a multi planner system that automatically selects
and combines the most efficient planner s  in a portfolio for each given domain 
c
    
ai access foundation  all rights reserved 

figerevini  saetti    vallati

the performance of the current planning systems is typically affected by the structure
of the search space  which depends on the considered planning domain  for many domains 
the planning performance can be improved by exploiting some knowledge about the domain
structure that is not explicitly given as part of the input formalization  but that can be
automatically derived from it  in particular  several approaches encoding additional knowledge in the form of macro actions have been proposed  e g   botea  enzenberger  muller 
  schaeffer        newton  levine  fox    long         a macro action  macro for short 
is a sequence of actions that can be planned at one time like a single action  when using
macros there is an important tradeoff to consider  while their use can speedup the planning
process  because it reduces the number of search steps required to reach a solution  it also
increases the search space size  which could slow down the planning process  moreover 
it is known that the effectiveness of macros can depend on the planning algorithm  a set
of macros can increase the performance of a planner  but decrease it  or be irrelevant  for
another 
in this paper  we propose an approach to automatically configuring a portfolio of existing
planners  possibly using a useful set of macros for each of them  the configuration relies on
a statistical analysis of the performance of the planners in the portfolio and the usefulness of
some automatically generated sets of macros  considering a set of training problem instances
in a given domain  the configuration knowledge that is automatically generated by this
analysis consists of a cluster of planners defined by  an ordered subset of the planners in
the initial portfolio  which at planning time are combined using a round robin strategy  a
set of useful macros for each planner  and some sets of planning time slots  the planning
time slots specify the amount of cpu time to be allocated to each planner in the cluster
during planning  the resulting planning system is called pbp  portfolio based planner  
the current implementation of pbp incorporates two systems for the generation of
macros and nine efficient planners  but its architecture is open to consider any other  current
or future  planner as an additional or alternative system  if pbp is used without configuration knowledge  all planners in the portfolio are scheduled  without macros  by a simple
round robin strategy where some predefined cpu time slots are assigned to the  randomly
ordered  planners  if pbp is used with the configuration knowledge for the domain under consideration  only the selected cluster of planners  possibly using the relative selected
sets of macros  is scheduled  their ordering favors the planners that during configuration
performed best  and the planning time slots are defined by the computed configuration
knowledge  as for the selection and exploitation of macros in pbp  it is worth noting that
the planners in the portfolio configured by pbp do not necessarily use the macros learned
for them  in the configuration process  the system evaluates each planner in the portfolio
with each set of macros computed for it  as well as with the empty macro set  as if they
were independent planning systems 
pbp has two main variants  pbp s  focusing on speed  and pbp q  focusing on plan
quality  a preliminary implementation of pbp s  gerevini  saetti    vallati        entered
the learning track of the sixth international planning competition  ipc   and was the overall
winner of this competition track  fern  khardon    tadepalli          more recently  a
   as observed by the ipc  organizers  surprisingly  for the ipc  problems the use of the configuration
knowledge does not considerably speedup this version of pbp s  the reasons are some implementation bugs concerning both the configuration phase and the planning phase  and the inefficient use of

   

fiplanning through automatic portfolio configuration  the pbp approach

revised and optimized version of pbp with both the speed and quality variants entered
the learning track of the seventh competition  ipc    and it was again the winner of this
competition track  coles  coles  olaya  celorrio  lopez  sanner    yoon        
a large experimental analysis presented in this paper provides a collection of results that
help to understand the performance behavior of pbp and the effectiveness of its portfolio
configuration methods  in particular  the analysis  i  confirms the very good performance
of pbp in the context of the ipc    benchmarks   ii  compares pbp with other existing
approaches to configure a planner portfolio   iii  evaluates the accuracy of pbps approach
to identify an effective cluster of planners and the strength of using a  configured and
unconfigured  multi planner with respect to a single planner   iv  investigates the usefulness
of macros in the considered benchmarks  showing that pbp selects useful macro sets  and
 v  examines the execution scheduling configuration of pbp for the selected planners in the
configured portfolio  demonstrating that its default strategy works well compared to other
possible strategies considered in the analysis 
several ideas and techniques investigated in the context of pbp use or build on previous
work  besides presenting and evaluating an effective approach to configuring a planner
portfolio  the research presented in this paper corroborates  validates or evaluates some
hunches and empirical studies done by other researchers in planning  in particular  our
experimental analysis confirms that certain sets of macros can be very useful to accelerate
planning speed or improve plan quality  botea et al         coles   smith        newton
et al         while others are harmful  that diversity of the planning techniques is important
in the construction of an effective planner portfolio  as observed by  e g   roberts and howe
        and that the round robin scheduling of the planner execution times is a robust
strategy for a planner portfolio  howe  dahlman  hansen  vonmayrhauser    scheetz       
roberts   howe        
the remainder of the paper is organized as follows  section   discusses related work 
section   describes the pbp approach  section   presents the results of our experimental
study  finally  section   gives the conclusions 

   related work
in this section  after a brief presentation of the most prominent work on algorithm portfolio
design in automated reasoning  we describe related work by others on planner portfolio
design in the automated planning  pointing out some important differences between pbp
and the most related work  other specific differences and similarities will be indicated in
the following sections presenting our technical results 
    algorithm portfolio design in automated reasoning
in the field of automated reasoning  the idea of using a portfolio of techniques has been
investigated by several researchers  a prominent example is the work by gomes and selman
        who conducted a theoretical and experimental study on the parallel run of stochastic
algorithms for solving computationally hard search problems  their work shows under what
some linux shell scripts  evident especially for small or easy problems   which were corrected after the
competition obtaining much better results  gerevini et al         

   

figerevini  saetti    vallati

conditions running different stochastic algorithms in parallel can give a computational gain
over running multiple copies of the same stochastic algorithm in parallel 
many papers on algorithm portfolio design concern the definition of models to select
the best algorithm s  for an instance of a certain problem according to the values of some
predetermined features of the instance  rice         for example  algorithm portfolios have
been designed with this aim to solve instances of sat  maxsat  and qbf  matos  planes 
letombe    marques silva        pulina   tacchella        xu  hutter  hoos    leytonbrown         satzilla is a prominent example of an algorithm portfolio designed for sat
 xu et al          satzilla uses machine learning techniques to build a predictor of the
runtime of a class of sat solvers  when satzilla attempts to solve an instance of the sat
problem  it computes the values of some features of the instance  predicts the performance
of the sat solvers it incorporates  selects the most promising sat solvers and order them
accordingly to their predicted performance  and finally runs the selected sat solvers using
the established ordering and the predicted required cpu times 
matos et al         propose an algorithm portfolio solving the maxsat problem  the
portfolio computes the values of several features of a given instance of the maxsat problem 
estimates the runtime for each solver in the portfolio  and then solves the instance with
the estimated fastest solver  the estimation is done using a  linear  model configured by
performing ridge regression  marquardt   snee         similarly  pulina and tacchella
       study an algorithm portfolio solving the qbf problem  they identify some features
of the qbf problem  and investigate the usage of four inductive models to select the best
solver to use according to the values of the identified features 
    planner portfolio design in automated planning
regarding automated planning  some prominent planners combining one or more algorithms
have been proposed  blackbox  kautz   selman        can use a variety of satisfiability engines  the initial version also included the graphplan algorithm   and ff  hoffmann   nebel 
       lpg  gerevini et al         gerevini  saetti    serina        and sgplan   chen et al  
      include a backup strategy using an alternative search technique that is run when
the default method fails  the algorithm combination in these systems is straightforward
and does not use an automatic portfolio configuration 
previous work on planner portfolios includes the approach proposed by howe and collaborators  howe et al         roberts   howe              roberts  howe  wilson   
desjardins         in the rest of the paper  we will refer to howe and collaborators approach using the name of their first planner portfolio  bus  howe et al          although
our analysis of this approach will consider their most recent techniques for the planner
portfolio configuration  their approach learns models of performance for a set of planners 
at planning time  the round robin policy is used to schedule the runs of the planners in
such a set  and the learned models are exploited to determine the order of the runs  the
configuration knowledge derived by this approach is domain independent  the performance
models of the planners are built by using several predictive models of the weka data mining
package  witten   frank         and the set of planners forming the portfolio is determined
through a set covering algorithm over the solved training problems across several different
planning domains 
   

fiplanning through automatic portfolio configuration  the pbp approach

the work on bus originally inspired our approach  pbp has some similarities with it  but
it computes and uses very different configuration knowledge  and the methods for selecting
and ordering the portfolio planners are considerably different  the portfolio configuration
of pbp generates domain optimized clusters of planners  and the selection and ordering of
pbp is based on a statistical analysis of the planners performance over a set of training
problems using the wilcoxon sign rank test  also known as the wilcoxon matched pairs
test  wilcoxon   wilcox          finally  their system does not compute  analyze or use
macros  and does not consider plan quality 
similarly to the work of howe et al          and roberts and howe         the techniques used by cenamor  de la rosa  and fernandez         and fawcett  vallati  hutter 
hoffmann  hoos  and leyton brown        learn models of performance of a set of planners
according to some predetermined features  in the work of cenamor et al          such features are derived from the sas  representation of the planning problem  in this approach 
the learned models are used to determine which planners should be run  in which order  and
for how long  the selected planners run sequentially either using an amount of cpu time
uniformly assigned or determined from the predicted execution time  the experimental results in the work of cenamor et al         show that for problems in domains different from
those used to learn the models  the configured portfolios perform worse than running an
unconfigured portfolio consisting of all the incorporated planners with uniform cpu time
assigned to each of them 
the work described by fawcett et al         is focused on generating models for accurately predicting planners runtime  such models exploit a large set of instance features 
derived from the pddl and sas  representations of the problem  a sat encoding of the
planning problem  and  short  runs of planners  the experimental results in the work of
fawcett et al         indicate that the generated performance models are able to produce
very accurate runtime predictions 
fast downward stone soup  here abbreviated fdss  is an approach to selecting and combining a set of forward state planning techniques  helmert  roger    karpas         using
the ipc  scoring function  fdss evaluates a class of candidate techniques on the basis
of their performance over a set of training problem instances from different domains  and
builds a domain independent sequential portfolio of forward planners by a hill climbing algorithm searching a space of possible sequential combinations of the evaluated candidate
techniques  the automatic portfolio configuration in fdss and pbp aims at building different types of planning systems  a single efficient domain independent planner portfolio
in fdss  an efficient domain optimized portfolio planner for each given domain in pbp 
the configuration processes and the resulting configured portfolios of fdss and pbp are
significantly different  in particular  pbp configures a portfolio of generic planners  using
different styles of planning   each one with a  possibly empty  set of useful learned macros 
which are not considered in fdss because of its domain independent purpose  moreover 
the execution scheduling strategy of pbp runs the selected planners in round robin rather
than sequentially 
   in the context of planning  the wilcoxon sign rank test has been previously used also in the work of
long and fox         gerevini  haslum  long  saetti  and dimopoulos         gerevini et al         
and roberts and howe        

   

figerevini  saetti    vallati

parlpg  vallati  fawcett  gerevini  hoos    saetti      b  and fast downward autotune
 fawcett  helmert  hoos  karpas  roger    seipp        configure the parameters of planners lpg and fast downward  helmert         respectively  using a set of training problems
of a given domain in order to obtain combinations of parameters for these two planners that
perform especially well in the given domain  both these frameworks uses the stochastic local
search procedure paramils to search for high performance configurations of parameters by
evaluating promising configurations  hutter  hoos    stutzle        hutter  hoos  leytonbrown    stutzle         an extended version of fdss  seipp  braun  garimort    helmert 
      involves twenty one configurations of fast downward  obtained by configuring its parameters through fast downward autotune for twenty one different domains  fawcett et al  
       that are combined by several alternative sequential strategies allocating the cpu
times to them 
asap  vallati  chrpa    kitchin      a  is a recent system for selecting the most promising planner from a set of candidates planners that derives much of its power from the use
of entanglements  chrpa   bartak        chrpa   mccluskey         entanglements are
relations between planning operators and predicates used to reformulate the domain model
by removing unpromising operator instances or restricting the applicability of some actions
to certain states  a problem over the resulting modified domain can become significantly
easier to solve for a planner  on the other hand  since asap uses an approximate method to
decide entanglements  which is pspace complete  chrpa  mccluskey    osborne         a
problem that is solvable with the original domain can become unsolvable with the reformulated domain  given a planning domain modified by entanglements and a set of planners 
asap identifies the most promising of these planners as the one with the highest ipc score
 jimenez  coles    coles        over a set of training problems 

   automated planner portfolio design in pbp
in this section  after introducing some preliminaries defining the problem of configuring a
planner portfolio and its execution to solve planning problems  we describe the architecture
and techniques of our approach to configure and execute a planner portfolio 
    preliminaries on configuring and executing a planner portfolio
differently from most of the existing work on algorithm portfolio design of which we are
aware  pbp does not design the planner portfolio for solving a specific instance of the
planning problem according to the values of some predetermined features of the instance 
instead  planning problems are gathered according to their planning domains  and the planner portfolio is designed for the whole domain  the basis of this choice is the empirical
observation that often there exists a single planner or a combination of planners that performs generally better for all or most of the problems of a domain  this seems something
peculiar to automated planning that does not hold for other types of reasoning problems 
and it makes pbp somewhat atypical in the general literature on algorithm portfolio design 
let d be a planning domain  t a cpu time limit  and p a set of n planners  initial
portfolio   each of which with its predefined parameter values  the problem of configuring
p for d consists of computing a set of triples  hpi   mi   si i   i           m   where     m  n 
pi  p  mi is a  possibly empty  set of macro operators learned for pi in domain d  and si
   

fiplanning through automatic portfolio configuration  the pbp approach

is a sequence of increasing cpu times  these cpu times  real numbers  are called planning
time slots  and are such that each time is lower than or equal to t  
the output set of triples identified by a portfolio configuration algorithm is the configured
 planner  portfolio of p for d  which in the rest of the paper will also be called a selected
planner cluster  or simply cluster   depending on how planners  macros and planning
time slots are chosen  there can be many candidate solutions to a portfolio configuration
problem  a special case  that we call the unconfigured  planner  portfolio  is defined as
 hpi     spre i   i            p    where spre is predefined as h                     i  in seconds  
like bus  pbp uses the round robin policy for scheduling the runs of the planners in the
configured portfolio  let     hpi   mi   si i   i           m  be a planner portfolio configured
for a domain d  portfolio  is executed to solve a planning problem in d by a roundrobin scheduling of m processes where  each process corresponds to running a planner pi
with macros mi  pi   mi for short   according to an order and time slices derived from
sequences s    m   more precisely  the circular order of the m planners in  is determined
by considering the m values t    m defined by the first planning time slot in each of the m
sequences s        sm   if ti   tj   pi is ordered before pj   if ti   tj   the relative order of pi and
pj is arbitrarily decided  i e   in this case pi runs before pj iff i   j   for every i  j          m
with i    j  each planner pi   mi is initially run until the total cpu time allocated to this
process is ti   or the planner terminates earlier  if a planner pi   mi does not terminate
within the assigned planning time slot ti   then it is suspended  and it resumes the next time
a time slot is assigned to it  no additional cpu time is assigned to those processes that
have already terminated  when  according to the circularity of the order  a planner pi   mi
resumes its execution  the total cpu time assigned to it  from the start of its execution 
is equal to the next unprocessed time slot in si  i e   the j th value of si for the j th time
pi   mi runs  
figure   shows an example of the round robin scheduling for portfolio  hp    m   
h                   ii  hp    m    h                   ii   assuming that p    m  terminates after using
   cpu time units  and p    m  after using     cpu time units  p    m  runs before
planner p    m    because the first time slot of p    m   i e       is lower than the first
time slot of p    m   i e        the round robin scheduler suspends p    m  after    time
units  and gives p    m     time units of cpu time  this process is repeated suspending
p    m  when the total execution of p    m  has consumed    time units  and suspending
p    m  when the total execution of p    m  has consumed    time units  at the next
iteration  p    m  should be suspended when its total execution time reaches    time units 
but  before the end of its third time slot  i e   at time      p    m  terminates and needs
no more cpu time  then  p    m  resumes its run  and terminates at time      in this
example  the planners of the portfolio use only their first three time slots 
given a set of training problems in a domain d  we propose an approach to configuring
an initial planner portfolio for d through a statistical analysis about the performance of
the planners in the initial portfolio with some alternative sets of computed macros  the
effectiveness of the determined configured portfolios can then be evaluated over a set of test
problems in d  that in our experimental analysis are disjoint from the training problem set
and that  if not specified otherwise  are always formed by known benchmark problems 
the proposed approach is implemented in a planning system called pbp  portfolio based
planner   in the following  depending on the context  pbp will be used to indicate either
   

figerevini  saetti    vallati

p  with m 
p  with m 
  

  

  

   

   

   

time

figure    an example of the round robin scheduling of pbp when running portfolio  hp    m    h                   ii   hp    m    h                   ii  on a given planning
problem  assuming that planner p  using macros m  takes a total of    cputime units to terminate and p  with m  takes a total of     cpu time units 

its method for configuring the planner portfolio  or the generated configured portfolio  in
the experimental evaluation of the configured portfolios generated by pbp  as a baseline
planner portfolio  we will use the unconfigured planner portfolio  that will be also called
the unconfigured version of pbp and denoted with pbp nok  while pbp will indicate the
generated configured planner portfolio  
    architecture and components of pbp
the architecture of pbp consists of the following five main components  which are combined
as described in figure   
      macro actions computation
for each integrated planner  pbp computes some sets of alternative macros using the following two approaches 
 wizard  phd thesis version  newton et al          this system implements three
learning techniques based on offline evolutionary methods  which use genetic operators
to compute macros for a given planner from the plans solving a set of training problem
instances of an input domain  the three learning techniques are called chunking 
bunching  and clumping  chunking learns individual macros from the original domain
operators  bunching learns bunches of macros from a given pool of macros  such
as the macros learned by the chunking process   and clumping learns both individual
macros and sets of macros simultaneously  the learned macros are filtered by a fitness
value  the fitness value reflects some filtering criteria including the number of solved
problems and the cpu time required to solve the training problems using the domain
operators augmented with the learned macros  for each computed macros  if the
fitness value of a macro is lower than a threshold  the macro is discarded  therefore 
for each planner incorporated into pbp  expect macro ff   pbp using wizard can
generate at most three sets of macros for the planner  in order to determine the sets
of macros to be used in the configured portfolio  the performance of the planner will
then be evaluated by pbp with without using the sets of learned and filtered macros
over the training problems  this evaluation is performed by the planner cluster
   

fiplanning

planning through automatic portfolio configuration  the pbp approach

incorporated planners 

domain and
problem to solve

multi planner by
round robin scheduling
time limit t

fast downward  helmert       

cluster of planners with macros

planning time
time slots
slots computation

lpg td  gerevini  saetti   serina       
macro ff  botea et al        
marvin  coles   smith       
metric ff  hoffmann   nebel       
sgplan   chen  wah   hsu       

portfolio configuration

lama  richter   westphal       

yahsp  vidal       

solution plan
or failure

planner cluster
selection   ordering

performance of planners with macros

macro actions
computation
wizard

planners with macros

performance
measurement

macroff

planners

domain and
training probs

time limit t

parlpg  vallati et al        

figure    a sketch of pbps architecture 
selection and ordering component  for simplicity  the sets of learned macros will be
identified by the names of the techniques used to derive them 
 macro ff  botea et al         botea  muller    schaeffer      b   the approach
implemented in macro ff  botea et al         computes macros by analyzing the solutions of a set of training problem instances  so that the macros that appear frequently
and that significantly reduce the required search effort are preferred  in particular 
first macro ff solves the training problems using an enhanced version of ff  then
it generates macros by considering the frequency the sequences of actions forming
macros appear in the computed solutions   after the macro generation  macro ff
solves the training problems using the computed macros  ranks the macros in terms
of the obtained search effort gain  and using this ranking selects at most five sets of
macros m       where mi with i        is the set of macros formed by the i best learned
macros  the version of the approach integrated into pbp contains the enhancements
described by botea et al       b   since the macros learned by macro ff are coded
using an ad hoc language  in pbp the five learned sets of macros m     are used only
by the macro ff planner 

      planner performance measurement
this is the most expensive computation step in the configuration of the portfolio  pbp
runs each integrated planner expect macro ff with and without the three sets of macros
   in our experiments presented in section    we observed that macro ff computes no macros only if the
enhanced version of ff solves no training problem 

   

figerevini  saetti    vallati

learned for it by wizard on the input training problem set  using the input cpu time
limit t for each planner run  similarly  macro ff runs with and without the five sets of
macros learned by itself  the current implementation of pbp incorporates eight well known
successful planners  fast downward  helmert         lama  richter   westphal        
lpg td  gerevini et al          macro ff  botea et al             b   marvin  coles   smith 
       metric ff  hoffmann         sgplan   chen et al          yahsp  vidal        and
a recent version of lpg  parlpg  using a dedicated configuration phase to automatically
optimize the setting of a collection of parameters governing the behavior of several parts of
the system  vallati et al       b   basically  running parlpg consists in running lpg using
a domain specific parameter configuration  every other incorporated planner runs using its
default parameter configuration  for marvin  this implies that during planning it can learn
and memorize macros to escape from plateaus  for each run  pbp measures the planner
performance in terms of  number of problems solved within t   cpu time required for solving
the training problems  and quality of the computed solutions  for the incremental planners 
i e   lpg  parlpg and lama  pbp measures the quality of all the solutions generated for
each problem and the corresponding cpu times  finally  note that for the macro actions
computation macro ff and wizard already run the incorporated planners and hence  in
principle  the performance of the planners with macros could be measured when macro ff
and wizard compute them  however  this has some technical difficulties and  for simplicity 
pbp duplicates the runs of the  incorporated  planners 
      planning time slots computation
the method for computing the planning time slots in pbp is a variant of the cpu time allocation strategy proposed by roberts and howe        for the round robin planner scheduling  let hp            pn i be a sequence of increasing percentages  and tpi  i              n   the
minimum cpu time required by a planner p with a set of macros m learned for it  p   m
for short  in order to solve a percentage of training problems equal to pi   during pbps
configuration of the planner portfolio  the planning time slots s of p   m are defined as
s   htp            tpn i 
the difference between the planning time slots in pbp and in the approach of roberts
and howe can be explained by the following example  assume that the computed planning
time slots for planner a using macros ma  a ma   are h                               i and that
those for planner b using macros mb  b   mb   are h                   i  then  for this pair
of planners  differently from the approach of roberts and howe  pbp extends the first time
slot for a   ma        to       i e   to the greatest time slot of a   ma which is smaller than
the first time slot of b   mb   similarly for the subsequent time slots  if the first time slot
of a   ma were not extended  the slowest planner b   mb would initially run for a cpu
time much greater than the cpu time initially assigned to the fastest planner a   ma  
and for many problems that planner a   ma quickly solves  e g   using one cpu second  
pbp would perform much slower  it is worth noting that using this time slot extension we
observed a high performance gain only for small and easy problems 
in the rest of the paper  the sequence of increasing percentages hp         pn i used to define
the planning time slots is called the problem coverage percentage vector  pcpv   the default
   

fiplanning through automatic portfolio configuration  the pbp approach

pcpv in pbp is the sequence h                                  i  n       which is the same
used in the work of roberts and howe        
      planner cluster selection and ordering
this is the last step of the configuration process of pbp  pbp selects a cluster of planners
in the initial portfolio  as described in section       each one with a  possibly empty  set
of useful macros  according to the measured performance and the computed planning time
slots 
as for the macro selection  note that pbp has no explicit independent mechanism for
selecting the macros to be used in the configured portfolio  and that macros are not shared
between planners because the tools used to learn them  wizard and macro ff  generate
macro sets for a specific input planner  planners and their macro sets are selected together 
since the planner cluster selection of pbp considers a candidate planner using two different
sets of macros learned for it as two different candidate planners 
the execution order of the planners in the selected cluster is implicitly defined by the
increasing first planning time slots associated with the planners  section     describes the
planner cluster selection in detail 
      multi planner by round robin scheduling
after pbp has configured the planner portfolio for the domain under consideration  when
a problem instance of this domain is encountered  pbp runs the selected ordered cluster
of planners  each one using the relative selected set of macro actions  by a round robin
scheduling algorithm using the computed planning time slots  that is similar to the one investigated in many portfolio algorithms  see  e g   howe et al         roberts   howe       
       alternative planner scheduling strategies are possible  such as sequential execution
or and using configured planning time slots  however  according to the experimental results
that will be presented in section      the default round robin strategy with the planning
time slots derived from the default pcpv is robust and performs generally well  concerning
termination of the resulting multi planner  pbp s terminates if either a given  execution 
cpu time limit t is exceeded  returning failure  or one among the selected planners computes a solution  output of pbp s   pbp q terminates if either time t is exceeded  or all
the selected planners terminate  if pbp q generates no solution within t  it returns failure 
otherwise  it returns the best computed solution 
    selecting a planner cluster
after the performance measurement and time slot computation phases  pbp analyzes the
obtained results to identify the best cluster of planners and macros for the domain under
consideration and the given cpu time limit t   this is done by simulating  for every cluster
c of at most k planners  each with a  possibly empty  set of macros  the round robin execution of the planners in c for solving the same training problems used in the performance
measurement phase   the simulation is done using the data from the runs conducted for
   in our experiments parameter k is set to    if k were greater than    we experimentally observed that
for the considered benchmark domains and problems the cluster selected by pbp would be the same 
the maximum number of possible combinations between the planners currently incorporated into pbp

   

figerevini  saetti    vallati

the performance measurement phase  the planners are not re run   ignoring the data of the
planners that always perform worse than another incorporated planner  i e   any planner
that performs worse than another one across all the training problems of the domain is
discarded   the cpu time limit for each simulated execution of a cluster is t  the same
time given to each run of a single planner during the performance measurement phase   the
performances of the simulated cluster runs are compared by a statistical analysis based on
the wilcoxon sign rank test  wilcoxon   wilcox         this test applies to a set of paired
observations  a sample from a larger population   and tells us if it is plausible to assume
that there is no correlation between the pairwise observed quantities  in our case  these
paired observations are  e g   the simulated runtimes of two clusters on the same training
problem instance  and no correlation between them means it is equally likely that we will
see one cluster solving a problem faster than the other as it is that we will see the opposite
on a sample of problems 
for our purposes  the wilcoxon sign rank test is appropriate because it does not require
us to know the sample distribution  and makes no assumption about this distribution  that
is  we have no way to know a priori how hard a planning problem is  and hence we have
no distribution of the simulated performance of the clusters  consequently  as stated by
gibbons and chakraborti         it is critical that we use a non parameterized test  such
as the wilcoxon sign rank test  we have also investigated the usage of other methods to
compare the performance of the simulated runs of planner clusters  including the ipc score
function that was also used by vallati et al       a   however  we experimentally observed
that  for the ipc  domains  such a method is less effective than the usage of the wilcoxon
sign rank test 
in pbp  the performance measure considers either the cpu time  pbp s  or the plan
quality  pbp q   the data for carrying out the test in pbp s are derived as follows  for
each planning problem  the system computes the difference between the simulated execution
times of the compared clusters  if a planner cluster does not solve a problem  the corresponding simulated time is twice the cpu time limit   if no cluster solves the problem 
this problem is not considered  the difference between the simulated times is normalized
by the value of the best simulated time under comparison  e g   if cluster c  requires    
seconds and cluster c       then the difference is     in favor of c     the absolute values
of these differences are then ranked by increasing numbers  starting from the lowest value 
 the lowest value is ranked    the next lowest value is ranked    and so on   the ranks
of the positive differences and the ranks of the negative differences are summed  yielding
two values r  and r   respectively  if the performance of the two compared clusters is not
significantly different  then the number of the positive differences r  is approximately equal
to the number of the negative differences r   and the sum of the ranks in the set of the
positive differences is approximately equal to the sum of the ranks in the other set  intuitively  the test considers a weighted sum of the number of times a cluster performs better
and the considered sets of macros
hence  with k      the maximum number of clusters that can be
p is    
  
evaluated by run simulation is i k
        this is the number of clusters with at most   different
i  
i
combinations of planners and macros over the    in the current implementation 
   this is the minimum value that ensures the performance gap for a problem solved by one cluster of
planners and unsolved by the other compared cluster is bigger than the performance gap for any problem
solved by both the compared clusters 

   

fiplanning through automatic portfolio configuration  the pbp approach

than the other compared one  the sum is weighted because the test uses the performance
gap to assign a rank to each performance difference 
when the number of samples is sufficiently large  the t distribution used by the wilcoxon
sign rank test is approximately a normal distribution  which is characterized by two parameters called the z value and the p value  the higher the z value  the more significant the
difference of the performance is  the p value represents the level of significance in the
performance gap  if the p value is greater than       then the null hypothesis that the
performance of the compared pair of planners is statistically similar is refused  and the alternative hypothesis that their performance is statistically different is accepted  otherwise 
there is no statistically significant evidence that they perform differently  and pbp considers
that they perform pretty much similarly 
the results of the wilcoxon sign rank test are used to form a directed graph where
the nodes are the compared clusters  and an edge from a cluster c  to another cluster c 
indicates that c  performs better than c    such a graph has already been used by long
and fox to present the results of the  rd international planning competition  long   fox 
       each strongly connected component of this graph is collapsed into a single node
representing the elements in the clusters of the collapsed nodes  from the resulting dag 
pbp considers only the nodes without incoming edges  the graph root nodes   if there is
only one root node  this is the selected cluster  otherwise pbp uses some secondary criteria
to select the most promising cluster among the root nodes  these criteria are the number of
solved problems  the sums of the ratios between the  simulated  cpu times of the planners
in the compared clusters  and the first planning cpu time slots of the involved planners 
specifically  pbp selects the cluster among the root nodes such that its simulation solves the
highest number of training problems  to break the ties  for every pair of selected clusters x
 sx sy  
and y pbp computes the ratio max s
  where sx and sy are the sums of the  simulated 
x  sy  
cpu times of clusters x and y  respectively  if such a ratio is greater than threshold      
the compared cluster with the worst sum of cpu times is discarded  if the number of
remaining clusters is still greater than one  pbp selects the cluster with the lowest first
planning cpu time slots of the involved planners  finally  the remaining ties are broken by
selecting the cluster randomly  but in our experiments no cluster has ever been randomly
selected 
the method used to select a cluster of planners and macros in pbp q is similar  but it
applies to the plan qualities resulting from the cluster execution simulation  rather than to
the cpu times as done by pbp s  for this simulation  pbp q considers also the intermediate
solutions  i e   those that are generated before the last one  which has the best quality 
and the relative cpu times computed by the basic incremental planners in the considered
clusters  if these solutions were ignored  the simulated plan quality for the clusters including
incremental planners could be much worse than the actual quality  for example  assume
that the cpu time limit is     seconds  ff computes a solution with quality    using    
seconds  lama computes two solutions with quality    and    using     and     seconds 
respectively  if the intermediate solutions of lama were ignored  the estimated plan quality
for the cluster formed by planners ff and lama would be equal to the quality of the plan
generated by ff  the second solution generated by lama could be computed by the cluster
using     seconds  but this is greater than the cpu time limit   although the intermediate
 first  solution of lama is much better than the ffs solution 
   

figerevini  saetti    vallati

finally  note that if the performance of the incorporated planners is measured with
cpu time limit t   then the portfolio of pbp s q can be  re configured for any time limit
t  t by simply ignoring the solutions computed after time t in the simulation of the
planner cluster performance  if t  t   then t  t is equally distributed among the planners
in the selected cluster  if a planner terminates before its allocated time  the remaining time
is also equally distributed to the other planners that are still running 
    the integrated basic planners
in this subsection  we give a very brief description of each of the nine basic planners that
are currently incorporated in pbp  much more detailed information is available from the
corresponding referred papers 
metric ff  version      hoffmann         metric ff inherits the main ideas used in ff
 hoffmann   nebel         ffs search strategy is a variation of hill climbing over the space
of the world states  and in ff the goal distance is estimated by solving a relaxed task for
each successor world state  compared to the first version of ff  metric ff is enhanced with
goal orderings pruning techniques and with the ordering knowledge provided by the goal
agenda  moreover  it deals with level   of pddl     fox   long         i e   numerical state
variables  numerical action preconditions and effects 
yahsp  version      vidal         yahsp extends the search procedure of ff with some
information extracted from ffs relaxed plan  for each evaluated world state  yahsp
exploits a look ahead strategy in a complete best first search by employing actions from the
relaxed plans in order to find the beginning of a valid plan that can lead to a reachable
world state 
macroff  botea et al             b   macro ff extends ff with support for using macrooperators during the search  and with engineering enhancements  one of the main features
of the planner version integrated into pbp is the use of iterative macros  botea et al       b  
i e   runtime combinations of macro operators  which are instantiated by attempting to use
as many actions from ffs relaxed plan as possible  in the search procedure of ff  the
iterative macros that can be successfully instantiated are considered for the generation of
the next world states 
marvin  release    coles   smith         marvin is another planner based on ff  the
main improvement w r t  ff is memorizing the plateau escaping action sequences discovered
during the  local  search of ff  these action sequences form macros  which can be applied
later when plateaus are once again encountered by ffs search in order to escape from these
plateaus quickly 
sgplan  version       chen et al         with domain modification script  coles   coles 
       sgplan  exploits a partition and resolve strategy to partition the mutual exclusion
constraints of a planning problem by its subgoals into subproblems  solves the subproblems individually using a modified version of the metric ff planner  and resolves those
violated global constraints iteratively across the subproblems  it has been observed that
the performance of sgplan are affected by some rules detecting the domain name and the
number of domain operators  coles   coles         in our work  we intend to consider the
   

fiplanning through automatic portfolio configuration  the pbp approach

available implemented systems that have chances to perform well  possibly in combination
with others  for at least one domain over a range of varied existing benchmark domains 
sgplan is definitely one of these systems  however  in order to prevent the usage of the
domain specific detection rules in sgplan that  differently from the other planners incorporated in pbp  would make sgplan domain specific for some domains  we have induced
sgplan to behave domain independently by a domain modification script  as proposed by
coles and coles         such a script changes the domain name  adds a never applicable
action to the domain  and then runs sgplan over the obtained domain  in addition  our
domain modification script also changes the names of domain operators 
fast downward  version        helmert         fast downward  abbreviated with fd 
translates the input pddl problem specification into its multi valued state variable representation sas   backstrom   nebel         and searches for a plan in the space of the
world states using a heuristic derived from the causal graph  a particular graph representing
the causal dependencies of sas  variables  pbp integrates the      version of the planner 
the main improvement compared to the earlier version of the planner that in      won the
propositional satisficing track of ipc  is the addition of safe abstraction  a form of problem
simplification that allows the planner to solve certain kinds of simple problems without
search 
lama  version       richter   westphal         lama is built on fast downward  using
sas  state variables and multi heuristic search  its core feature is the use of a pseudoheuristic derived from landmarks  propositions that must be true in every solution of a
planning task  moreover  a weighted a  search is used with iteratively decreasing weights 
so that the planner continues to search for plans of better quality 
lpg td  gerevini et al          lpg td inherits the main ideas used in lpg  gerevini et al  
       lpg uses stochastic local search in a space of partial plans represented through action
graphs  the search steps are certain graph modifications transforming an action graph into
another one  lpg td includes more accurate heuristics for selecting the graph modifications
than those in lpg 
parlpg  version ipc   vallati et al       b   parlpg is a recent system based on the
idea of automatically configuring a generic  parameterized planner using a set of training
planning problems in order to obtain speed optimized planners that perform especially well
for the domains of these problems  parlpg uses the focusedils variant of the off the shelf 
state of the art automatic algorithm configuration procedure paramils  hutter et al        
       and the planning system lpg  ver        which has several components that can be
configured very flexibly via many exposed configurable parameters 

   experimental analysis
in this section  we present the results of a large experimental study about pbp with the
following main goals 
 g   describing the configured portfolios and analyzing the configuration process of pbp
 section      
   

figerevini  saetti    vallati

 g   analyzing the efficiency of pbp s q in terms of speed and plan quality in the context
of the planning competitions ipc     section      
 g   comparing the performance of the planner portfolio configured by pbp s q versus other
planning systems based on planner portfolios  section      
 g   evaluating the effectiveness of using the  automatically computed  domain specific
configuration knowledge in pbp s q  section      
 g   comparing the performance of the planner portfolio configured by pbp s q versus the
single basic planners in the portfolio  and evaluating the accuracy of the planner
cluster selection in pbp s q  section      
 g   analyzing which kind of macros is selected by pbp for the planners in the configured
portfolio  evaluating the effectiveness of using the selected macro set  and understanding pbp s qs accuracy for selecting the most useful set  section      
 g   investigating some possible alternative methods for scheduling the execution of the
planners in the selected cluster  and understanding the effectiveness of the default
round robin strategy in pbp s q  section      
this experimental study uses various versions of pbp  the most important of which
are listed in table    for g   we show the cpu time of each configuration step  and we
evaluate if the size of the training problem set can be important to derive effective configured
portfolios  for g   pbp is compared with the planners that entered the learning track of
ipc    and the winner of the deterministic track of ipc   for g   the performance of
pbp is analyzed w r t  fdss  seipp et al         and bus  the portfolio approach proposed
by roberts and howe         although both bus and fdss propose to design domainindependent planner portfolios  in principle they can also be used  like pbp  to generate
domain optimized planning systems  we will experimentally investigate also such an use of
these approaches  comparing them with pbp  for g   we show the results of three different
experimental comparisons  comparison between pbp configured using the learned domainspecific knowledge  dsk   the unconfigured version of pbp  pbp nok  and the randomly
configured version of pbp  pbp rand   comparison of the performance gaps of pbp and
pbp nok w r t  the gaps of the ipc    planners with without their learned knowledge  and
comparison of pbp using the dsk  pbp configured for a single domain but without using
macros  and pbp configured across all ipc  domains  pbp alld   for g   we have conducted
three experiments in which  the performance of pbp and of each incorporated planners are
compared  the performance of pbp is analyzed w r t  the best incorporated planner  without
using macros  for every ipc  domain  and  finally  pbp is compared with the best cluster of
incorporated planners  possibly using macros  for every ipc  domain  for g   we compare
the performance of the planners forming the clusters selected by pbp using  i  no macros 
 ii  the set of macros selected by pbp  and  iii  the best performing set of macros  moreover 
we show and comment some features of the sets of macros selected and used by pbp  finally 
for g  we perform two experimental analysis  comparison of the clusters selected by pbp
using some different scheduling strategies  and comparison of the performance of pbp using
different pcpvs  pbp with r  r  s  s   
   

fiplanning through automatic portfolio configuration  the pbp approach

pbp  default 
pbp ipc 
pbp ipc 
pbp nok
pbp rand
pbp nom
pbp alld
pbp with s 
pbp with s 
pbp with r   pbp
pbp with r 
pbp with         

pbp versions
last version of pbp configured by computing the domain specific knowledge  dsk 
version of pbp that entered ipc  configured using dsk
version of pbp that entered ipc  configured using dsk
unconfigured portfolio
randomly configured portfolio
configuration without macros
configuration without macros and across all ipc  domains
configuration using sequential scheduling of the planners with uniform time slots
configuration using sequential scheduling of the planners with non uniform time slots
configuration using round robin scheduling of the planners with the default pcpv
configuration using round robin scheduling of the planners with different pcpvs
configuration using          training problems

table    main variants of pbp generating different types of planner portfolio configurations
used in the experimental analysis 

before presenting and discussing the results of the experimental analysis  we describe
the experimental settings 
    experimental settings
the experiment evaluating pbp s q with respect to the other ipc    planners considers
all ipc    benchmark domains  fern et al         jimenez et al          while the other
experiments focus on the most recent ipc  domains  regarding the training problems used
in the experiments  for the ipc  domains they are the same as those of ipc   for the ipc 
domains  they are a set of     problems of various sizes     problems for each ipc  domain 
unless otherwise specified for the particular experiment under consideration  that have been
generated using the problem generator made available by the organizers of ipc   for ipc  
no explicit set of training problems was provided   the training problems are used for both
learning macros and configuring the portfolio  since the learning procedure of wizard can
run a planner over the training problems several times  in order to make the training not
too much time consuming  half of the training problem set was designed to be formed by
problems that took up to    seconds to solve by some planner  the other half is formed by
problems that took up to about     seconds  half of the cpu time limit used in the testing
phase  to solve 
regarding the test problems  we used the same problems as those used in ipc     the
ipc  test problems were used for evaluating the performance of pbp s q with respect to
the planners that entered ipc   the ipc  test problems  that are generally larger and much
more difficult than the ipc  problems  were used for evaluating pbp s q with respect to
the ipc  planners  as well as for all other experiments in our analysis 
all our experiments have been conducted using the last version of pbp s q  which is not
exactly the same as the one that entered and won ipc   pbp ipc  for short  for three reasons    a  pbp ipc  was not properly compiled because of the lack of some c libraries on the
competition machine  which was discovered only after competition   b  pbp ipc  contains a
very minor syntax bug about the format of the output plans that for few ipc  domains made
all generated plans invalid to the program validating them used in the competition  howey 
   the code of the last version of pbp is available from http   chronus ing unibs it pbp  

   

figerevini  saetti    vallati

long    fox         and  c  pbp ipc  s uses sgplan  without the domain modification
script that induces sgplan  to behave domain independently  point  a  negatively affected
the performance of pbp ipc  s q  because one of the incorporated planners  macro ff 
could not run when selected  for  b   many valid plans generated by pbp ipc  s q were
rejected by the plan validator of ipc   point  c  changed the composition of some clusters selected by pbp ipc  q that include sgplan   but it does not make the performance
of pbp q and pbp ipc  q substantially different  the only difference between the planner
clusters selected by pbp ipc  s and those of pbp s concerns domain blocksworld  as the
cluster of pbp ipc  s consists of parlpg without macros  while the cluster selected by pbp s
is parlpg using the bunching set of macros computed by wizard 
for the comparison with the ipc  planners  the results of pbp s q were obtained by
running its last version on a machine similar to  same cpu frequency and amount of ram 
the one used to obtain the official ipc  data  an intel core tm  quad processor q     with
  gbytes of ram   for the comparison of pbp s q and the ipc  planners  all systems were
run using the same machine of ipc   a quad core intel xeon      ghz with   gbytes of
ram  that the ipc organizers made available to us for this experiment  unless otherwise
specified  the other experiments were conducted using a quad core intel xeon tm      
ghz with   gbytes of ram 
the experimental analysis required many days of cpu time  unless otherwise indicated 
as in ipc     the cpu time limit of each run of pbp s q was    minutes  pbp s q used the
default configuration process  the cpu time limit for each simulated execution of a planner
cluster was    minutes   and the planners of the configured portfolio were run by the roundrobin scheduling described in section      the performance data of each planner in pbp s q
incorporating a randomized algorithm  i e   lpg  parlpg and lama  were obtained by a
single run for each considered problem instance 
the experimental comparisons with the test instances will generally use three alternative
methods  the average of the performance data  the ipc  score function  jimenez et al  
       and the same wilcoxon sign rank test used for the planner cluster selection during
configuration  given two compared planners and a problem set  the average cpu time of
each planner is computed over the problems in the set that are solved by at least one of the
compared planners  and using the cpu time limit      seconds  as the cpu time of the
planner when it does not solve a problem  the average plan quality is computed over the
problems solved by both the compared planners 
the ipc  score function is defined as follows  concerning planning speed  if a planner
p solves a problem  using t cpu time  it gets a time score equal to   log    t t     where
  
t is the best time over the times required by the planners under comparison for solving
  concerning plan quality  if p generates a plan with l actions solving   it gets a quality

score equal to ll   where l is the number of actions in the shortest plan over those computed
by the compared planners for   if p does not solve   then it gets zero score  both for
speed and quality   given a domain d  the time  quality  score of planner p for d is the
sum of the time  quality  scores assigned to p over all the considered test problems in d 
the ipc  score function for speed is a refinement of the ipc  score function  both the
ipc  and ipc  time scores are defined according to how much slower a planner performs
than the best performing one  but the ipc  score penalizes slowdowns more heavily than
   

fiplanning through automatic portfolio configuration  the pbp approach

the ipc  score  for our experiments  we observed that using the ipc  function  instead of
the ipc  function  gives similar general results that are slightly more favorable to pbp s 
as for the wilcoxon sign rank test  the null hypothesis is that the performance of a
compared pair of planning systems is statistically similar  the level of confidence we used
is p          if the analysis involves the comparison of more than two planning systems 
then  in order to maintain the confidence level used when only one hypothesis is tested
 i e   only a pair of planners is compared   the confidence level has been modified by the
bonferronis correction  shaffer         for our analysis  the usage of the bonferronis
correction implies that  if the experimental result we obtain by the wilcoxon sign rank test
derives from the comparison of n planning systems  then the used confidence level is      
n   
moreover  for the plan quality comparison using the wilcoxon sign rank test  the quality of
the plans computed by two compared planners is normalized by the length of the best plan
for all the test problems solved by these planners  since the wilcoxon sign rank test uses a
ranking of the differences between values in each sample pair  if we compared the absolute
plan length directly  without normalization  such differences in values between domains
could result in an unintended bias  with small relative differences in a benchmark domain
with large solution plans weighted as more important than larger relative differences in a
domain with small plans 
    overview of the configured portfolios generated by pbp
this section concerns experimental goal g   we give some information about the configured portfolios  multi planners  generated by the default version of pbp s q  see table    
the relative cpu times used for the automated portfolio configuration  and the size of the
training problem set used for configuring pbp  table   shows the planners in the clusters selected by pbp for every ipc    domain  for each planner in the cluster  the table
also indicates in brackets the sets of macros selected by pbp  which are available from
http   chronus ing unibs it pbp  the computed planning time slots in the clusters are
omitted for brevity and clarity   for example  for depots  pbp q selects the cluster formed
by  i  macro ff with the two learned macros that most frequently appear in the macro ffs
plans solving the training problems   ii  parlpg without any of the computed macros  and
 iii  sgplan  with the set of macros obtained by the chunking macro generation method of
wizard  from the configured portfolios in table   we can derive the following observation 
experimental result       the planner clusters selected by pbp often are formed by different sets of planners and macros  overall all nine basic planners are helpful  each of them
is selected by pbp s q at least once   and different sets of macros are considered more helpful
than others  including  in few cases  the empty set 
concerning planning speed  we observe that for most domains pbp s relies on a single
planner possibly using a set of macros  in particular  for   of the    considered domains
parlpg outperforms the other incorporated planners  and hence for these domains the
selected cluster contains only parlpg  the main reason of the better performance of parlpg
is that it uses lpg with a parameter configuration that is  automatically  optimized for
every considered domain  and this can greatly speedup the planner  vallati et al       b  
   

figerevini  saetti    vallati

domains
ipc  domains
gold miner
matching bw
n puzzle
parking
sokoban
thoughtful
ipc  domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

pbp s

pbp q

yahsp  cl 
parlpg   
parlpg   
macro ff  m  
parlpg   
ff     yahsp   

macro ff  m    lama  b   lpg    
marvin      lama     lpg  b 
fast downward     lama     lpg    
ff      lama   
macro ff  m    lpg  b 
macro ff  m    marvin     lama   

sgplan   b 
parlpg  b 
macro ff  m    parlpg    
parlpg   
macro ff  m  
parlpg   
parlpg   
parlpg   
macro ff  m  

sgplan   cl   ff     lama   
parlpg     lpg  b 
macro ff  m    parlpg      sgplan   ch 
marvin     parlpg   
ff      lama   
lama     parlpg   
parlpg     marvin    
lpg   
lama     sgplan   ch 

table    planners and sets of macros  in round brackets  in the cluster selected by pbp
for the ipc    domains   and   indicate that no macros was generated and
selected  respectively  ch  b and cl abbreviate the three sets of macros
chunking  bunching and clumping generated by wizard  respectively  m m  are
the five sets of macros generated by macro ff  the order of the planners listed in
the clusters corresponds to the order in which they run 

we observed that  in a previous version of pbp that entered ipc  without parlpg  the
selected clusters were even more varied 
it is interesting to observe that when pbp selects macro ff for the configured portfolio
this planner always uses a non empty set of macros  the fact that in the selected cluster macro ff always uses one among the learned sets of macros indicates that the macro
construction and exploitation methods incorporated into macro ff are effective for this
planning system 
table   gives the cpu times used by pbp s for the different phases of the portfolio
configuration applied to the ipc  domains  for which a machine with a quad core intel
xeon tm       ghz and   gbytes of ram was used   the configuration times of pbp q
are similar to those of pbp s for the macro extraction and cluster simulation phases  while
they are higher for the performance measurement  because the incorporated incremental
planners can use the whole cpu time limit in order to find good quality plans  although
configuring pbp for a specific domain requires a considerable amount of cpu time  it should
be considered that such a configuration needs to be done only once  since the generated
configured portfolio  selected planner cluster  can be used for all the problems in the domain 
finally  in order to understand if small sets of training problems can be sufficient to
derive informative dsk for test problems that are larger than the training ones  we have
   for every ipc  domain  the parameter configuration of parlpg required about      hours 

   

fiplanning through automatic portfolio configuration  the pbp approach

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

macro extraction
macro ff wizard
    
    
    
    
   
    
    
    
    
    
    
   
    
    
    
   
    
   

performance
measure
     
    
    
    
     
    
    
     
    

simulation  
selection
    
    
    
    
    
    
    
    
    

total
     
     
     
     
     
    
     
     
    

table    cpu hours used by the configuration of pbp s for the ipc  domains  extraction of
macros with macro ff and wizard   nd and  rd columns   performance measurement phase   th column   cluster run simulation and best cluster selection   th
column   total configuration time   th column  

compared the performance of pbp configured using the default number of    training problems and using half and one sixth of these training problems   the range of the problem
size is the same for each of the three sets of training problems   the results of this analysis
are in table    of course  the lower the number of training problems is  the cheaper the
training of pbp is  on the other hand  the dsk computed using few training problems can
sometime be much less effective and informative than the dsk obtaining using larger sets 
for depots  pbp s with the dsk derived from    training problems performs much
better than with the dsks derived from    and    training problems  for all the other
domains  the performance of pbp s with the three compared dsks is similar or the same  it
is interesting to observe that depots is the only domain for which the cluster of pbp s has two
planners  for this domain  the cluster of pbp s derived from    training problems consists
of macro ff and parlpg  for    training problems parlpg hands a solution to pbp s  while
for the other    training problems the solution of pbp s is obtained by macro ff  if the
dsk is derived from    or    training problems  either macro ff or parlpg is not part of
the configured cluster of pbp s and this makes pbp s performing worse 
for depots  satellite and tpp  pbp q with the dsk derived from    training problems
performs much better than with the dsk derived from    or    training problems  for all
the other domains  the performance of pbp q is similar or the same 
    performance of pbp and the ipc    planners
this section concerns experimental goal g   we experimentally evaluate the performance
of pbp in the context of ipc    with the aim of showing that it is competitive with other
recent planning systems using domain specific learned knowledge  since at the time of
writing several ipc    planners and the relative domain specific knowledge are not available 
for this experiment we used the official competition data  cpu times  plan qualities and
number of solved problems  and the results we obtained by running the last version of pbp 
   

figerevini  saetti    vallati

ipc 
domains

depots
parking
all domains
ipc 
domains

blocksworld
depots
parking
satellite
tpp
all domains

time score
  
  
    
   
   
   
    
   

  
   
   
   

mean cpu time
  
  
  
    
           
                 
                 

  solved problems
  
  
  
  
 
 
 
 
 
  
 
  

quality score
  
  
  
    
         
    
   
   
   
   
   
    
   
    
    
   
   
               

mean plan length
  
  
  
                 
                 
    
    
    






                 

  solved problems
  
  
  
  
  
  
  
  
  
 
 
 
  
 
  
  
 
 
   
  
   

table    time quality score  average cpu time plan length and number of solved problems
of pbp s q configured with dsk computed by using a set of either     default
version of pbp      or    training problems  the domains considered are the
ipc  domains for which the training phase of pbp s q derives different dsks for
training problem sets with different sizes 

in the learning track of ipc  and ipc   the competing teams were not aware of the
domains used for the evaluation before submitting their systems  after code submission 
the contest had two phases  in the first phase  the domains were released and the learning
parts of the planners were run to automatically derive  for each domain  some additional
knowledge using a set of training problems in the domain  in the second phase  after submitting the learned knowledge to the ipc organizers  the planners were run with the relative
learned knowledge  and the resulting performance data were compared using the ipc score
function  the interested reader can find more details about the ipc    organization as
well as a collection of short papers describing the ipc    planners that entered the learning
track in the work of fern et al          and jimenez et al         
for pbp  the knowledge derived in the first phase of the competition is the portfolio configuration knowledge described in the previous section of the paper  the knowledge learned by ipc  planner obtusewedge consists of some special patterns  that extend
the notion of an n gram to include argument relations  and are used with the aim of
speeding up the enforced hill climbing search  yoon  fern    givan         the ipc 
planning systems wizard ff and wizard sgplan learn a set of macro actions for planners ff and sgplan   respectively  as for the ipc  planners  bootstrap planner learns a
domain specific heuristic by combining a set of existing heuristics with weights obtained
by evaluating the performance of the heuristics on the training problems  arfaee  zilles   
holte         finally  the knowledge learned by oaldaeyashp  brendel   schoenauer 
       parlpg  fast downward autotune speed and fast downward autotune quality  fawcett
et al         consists of domain specific parameter configurations 
table   gives an overall experimental evaluation of the best performing planners in
ipc   using the ipc  domains  and of the best performing planners in ipc   using the
   

fiplanning through automatic portfolio configuration  the pbp approach

best ipc  planners
pbp s
pbp q
obtusewedge
pbp ipc  s
pbp ipc  q
rfa 
wizard ff
wizard sgplan
best ipc  planners
pbp s
pbp q
bootstrap planner
fast downward autotune speed
fast downward autotune quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
lama     

problem solved
   
    
    
    
    
    
    
    
    

time score
 max       
     
    
    
    
    
    
    
    

quality score
 max       
     
     
    
     
     
    
    
    

problem solved
   
    
    
    
    
    
    
     
     
     
     

time score
 max       
     
    
    
     
    
    
     
     
    
       st sol  

quality score
 max       
     
     
     
     
    
    
     
     
     
      last sol  

table    percentage of solved problems within    cpu minutes  and time and quality scores
of pbp s q and the  best performing  planners that took part in the learning track
of ipc    for the domains and problems of ipc     larger scores indicate better
performances  pbp ipc  and pbp ipc  indicate the versions of pbp that took part
in ipc  and ipc   respectively  lama      is the winner of the deterministic track
of ipc  

ipc  domains   in terms of percentage of solved problems  planning speed and plan quality 
all compared planners were run with the relative learned knowledge  from the data in
table    the following general experimental result can be derived 
experimental result       for the ipc    domains and problems  pbp s is generally
faster than the compared ipc    planners  pbp q performs generally better in terms of plan
quality  and pbp s q solves many more problems  
remarkably  pbp s q solves a very high percentage of the ipc    benchmark problems
within    cpu minutes  and pbp q almost always computes a plan that is better than the
plan computed by any other competitor  in contrast  the time score of pbp q is low  since
   the version of pbp used for the comparison does not suffer the technical problems indicated in section
    that affected the performance of pbp at ipc   at ipc  other planners may have suffered similar
problems  and their implementation might also have improved versions which we have not considered 
however  we note that even the version of pbp s q that entered ipc  performs generally better than the
other competing planners 

   

figerevini  saetti    vallati

pbp q usually runs more than one planner and stops only when all the selected planners
terminate or the cpu time limit is exceeded 
an analysis of the competition results  planner cpu times and plan qualities  using the
wilcoxon sign rank test instead of the ipc score functions for the performance comparison
confirms that pbp q generates significantly better quality plans  z          p        
     the
p value obtained by this analysis is        with z value equal to         since the p value is
not below the adjusted critical value of      
    the null hypothesis  the performance of pbp is
similar to the performance of the other ipc    planners in terms of speed  is accepted  and
thus the research hypothesis  the performance of pbp is statistically different  is rejected 
however  it is worth pointing out that the critical value of       is quite hard to reach 
especially given that we also apply an experiment wise error adjustment  if we had set a
less stringent critical value  say       then the adjusted critical value would be     
           
and p value of       would be significant 
table   gives details about the performance comparison for each ipc  domain  in
terms of speed  pbp s has the best performance in eight out of the nine domains considered in the analysis  the only domain where it does not perform best is parking  where
fast downward autotune speed performs better  similarly  in terms of quality  pbp q has
the best performance in seven out of nine domains  it performs as well as parlpg and
pbp q in one domain  spanner   and it performs worse than fast downward autotune speed
in two domains  parking and tpp   it is worth noting that in principle a portfolio approach
should incorporate the planners most promising for attempting the problems of a domain 
the current version of pbp integrates the planners that have established the state of the art
when pbp was developed  and at that time fast downward autotune speed was not available  the results in table   indicate that our portfolio based approach would reach better
performance  if it also incorporated such a planner  for instance  it is likely that pbp would
select this planner for domain parking  greatly improving its performance for this domain 
finally  we comment on the relative performance of pbp and the winner of the deterministic satisficing track of ipc   the      version of lama  of course  we cannot expect
that a domain independent planner  such lama  performs better than a planner exploiting
 learned  specific domain knowledge  on the other hand  it is definitely a desired property
that the other way around holds  a planning system that uses some form of  automatically
acquired  domain specific knowledge is effective only if it performs better than a state ofthe art domain independent planner that does not use such additional knowledge 
the last lines of tables   and   indicate the global and domain by domain performance
of lama      with respect to the planners of the learning track of ipc   considering the
score functions of this competition track   for this comparison  the cpu time limit used
to run lama is    minutes  the same time limit as the one used to run pbp s q and the
other planners that took part in the learning track of ipc   it is worth noting that the
ipc  domains of the learning track are propositional  and the ipc  problems do not require
the optimization of an explicit specified plan metric  for these problems  both lama and
pbp minimize the number of actions  it can be seen that pbp s q performs substantially
   although the experimental comparison considers both planning time scores and plan quality scores  it
should be noted that the deterministic track of ipc  focused on plan quality  and hence lama      has
presumably been developed focusing on quality rather than speed  in this sense  the results about plan
quality in our comparison with lama      are more meaningful than those about planning speed 

   

fiplanning through automatic portfolio configuration  the pbp approach

ipc  planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
pbp s
pbp q
lama   

solved problems

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

 
  
 
 
 
  
  
  
  
 

  
  
  
  
  
  
  
  
  
  

 
  
 
 
  
  
  
  
  
 

 
  
 
 
  
  
  
  
  
 

 
  
 
 
 
 
 
 
 
 

 
  
  
 
  
  
  
  
  
  

 
  
 
 
  
  
  
  
  
  

 
 
 
 
  
  
  
  
  
 

 
  
  
 
  
 
 
  
  
  

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

   
    
   
   
   
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    

   
    
   
   
    
    
    
    
    
   

   
    
    
   
    
    
    
    
    
   

   
    
    
   
   
   
    
    
    
   

   
    
    
   
    
    
    
    
    
    

   
    
    
   
    
    
    
    
    
   

   
    
    
   
    
    
    
    
    
   

   
    
    
   
    
   
   
    
    
    

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

   
    
   
   
   
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    

   
    
   
   
    
    
    
    
    
   

   
    
   
   
    
    
    
    
    
   

   
    
    
   
   
   
    
    
    
   

   
    
    
   
    
    
    
    
    
    

   
    
    
   
    
    
    
    
    
    

   
   
   
   
    
    
    
    
    
   

   
    
    
   
    
   
   
    
    
    

ipc  planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
pbp s
pbp q
lama      st sol  

time score

ipc  planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
pbp s
pbp q
lama     last sol  

quality score

table    number of solved problems  and time quality scores of the  best performing 
ipc  planners for each ipc  domain  fda  lama     bw and sat abbreviate
fast downward autotune  lama       blocksworld and satellite  respectively 

better than lama       the results in table   show that pbp s q solves many more ipc 
problems  and it achieves considerably better overall time and quality scores with respect
to lama     s first and best quality solutions  respectively  the results in table   show
that  pbp s has a much higher speed performance for every domain  and a much higher
quality performance for most of the domains  pbp q has a much higher quality performance
for seven domains  while it performs similarly for the other two domains  and it has a much
higher speed performance for most of the domains 
moreover  since in the deterministic track of ipc  the cpu time limit was    minutes 
we compared lama      and pbp s q over the problems of the learning track using this
limit for the first planner  but keeping    cpu minutes for the second  the extra cpu
time for lama      does not considerably change the results of the comparison  overall 
   

figerevini  saetti    vallati

the total time scores of lama      and pbp s q are      and              respectively 
the total quality scores of lama      and pbp s q are      and              respectively 
lama      solves     problems while pbp s q solve         problems 
the previous experimental analysis of pbp s q and lama      is summarized in the
following claim  suggesting that if a portfolio based planner is  automatically  configured for
a given domain  it can perform much better than a state of the art fully domain independent
planner 
experimental result       for the benchmark domains of the learning track of ipc  
the configured versions of pbp s q perform better than the ipc  winner of the deterministic
track 
since pbp without configuration knowledge  pbp nok  is a fully domain independent
planner  it is also interesting to see how well pbp nok performs w r t  lama       for this
experimental comparison  we also used the benchmark domains and problems of the deterministic track of ipc   with the same cpu time limit of ipc  for each run     minutes  
moreover  since the deterministic track of ipc  focused on plan quality  measured as total
action cost  we considered only the quality version of pbp nok  while lama      optimizes
total action cost  pbp nok q and the incorporated planners consider number of actions for
plan quality  although our analysis relies on the total action cost  and hence is somewhat
in favor of lama       we observed that pbp nok q is competitive with lama       for
the problems of the ipc  deterministic track  the total quality score and number of solved
problems are slightly lower for pbp nok q than for lama             against        and
    against      respectively   the lower quality score of pbp q is mainly because of two of
the fourteen ipc  domains  elevator and parcprinter   where pbp nok q obtains much
lower scores      against      and     against       respectively   for the test problems of
the learning track of ipc   pbp nok q performs even better than lama       ipc quality
score        versus       solved problems      versus      

experimental result       for the benchmark domains of the deterministic and learning
tracks of ipc   pbp q without configuration knowledge  pbp nok q  is competitive with the
winner of the ipc  deterministic track 

given that pbp q without configuration performs already well  a performance improvement obtained by exploiting the computed configuration knowledge is even more notable 
section     shows that the portfolio configuration of pbp s q is very useful to improve
performance 
    performance of pbp and other planner portfolios
this section concerns experimental goal g   we compare pbp with two planner portfolio
approaches  fdss  helmert et al         and bus  roberts   howe        
   

fiplanning through automatic portfolio configuration  the pbp approach

      pbp versus fdss
table   shows the performance of pbp s q w r t  fdss with and without using macros   
the results of this comparison can be summarized as follows 
experimental result       for the benchmark domains of the learning track of ipc   in
terms of number of solved problems pbp s q performs always better than fdss  except for
domains rovers and tpp  where fdss solves few problems more than pbp s and pbp q 
respectively  in terms of time score  pbp s always performs better than fdss  in terms of
quality score  pbp q performs always better except for tpp 
we think there are at least four reasons why in our experiments pbp performed generally
better than fdss  the main reason is that  while pbp is separately configured for every
considered domain  fdss always uses the same configuration determined from the problem
instances of ipc    that were designed using problem distributions quite different from
those of the learning track of ipc   seipp et al          other reasons are  a  the diversity
of the planning methods implemented in the planners incorporated into pbp and fdss   b 
the usage of macros in pbp s q  and  c  the different portfolio configuration techniques of
the two compared systems  concerning  a   if we consider for instance domain spanner 
pbp s q outperforms fdss because pbps configured portfolios use parlpg lpg  see table
    while every planner incorporated into fdss uses heuristic forward search techniques 
parlpg lpg uses heuristic techniques searching a space of partial plans  which seems more
effective for this domain  as for  b   we tried to learn macros for fdss using wizard  but
unfortunately no useful macro was learned for this planning system  therefore  we tested
the performance of fdss using the same macros learned by wizard and selected by pbp s q
for the planners in the configured portfolios  see table     the results in table   indicate
that  while using these macros sometimes greatly improves the performance of pbp  they
are not really effective for fdss 
finally  in order to better understand the importance of  c   we also developed and compared with pbp a new variant of fdss  called fdssd   restricting the differences between
fdss and pbp to their configuration techniques  specifically  fdssd has the following similarities and differences w r t  the original fdss  while fdssd uses the same configuration
techniques of fdss  it configures the planner portfolio separately for each input domain
 instead of for a set of domains altogether   uses macros  and integrates the same planners
as pbp  instead of a set of forward state planners   then  the most important differences
between pbp and fdssd are the method for the planner cluster selection and the scheduling
strategy used for running the planners forming the clusters that  as described in section   
are substantially different 
like for pbp  we computed two sets of domain optimized portfolio configurations of
fdssd   fdss sd focusing on speed  and fdss qd focusing on plan quality  for all the ipc 
domains except depots  the planner clusters selected by fdss s are the same as those of
pbp s  for depots  the cluster of fdss s consists of macro ff using macro set m  and
macro ff using macro set m   while the cluster of pbp s consists of parlpg using no macro
and macro ff using macro set m   for all domain in which fdss s and pbp s have the
    the version of fdss that was run in this experiment uses    of the    variants of fast downward analyzed
by helmert et al         

   

figerevini  saetti    vallati

planners
pbp s
pbp q
fdss
fdss m
pbp nok s
pbp nok q

  solved problems

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

  
  
 
 
  
  

  
  
  
  
  
  

  
  
 
 
 
 

  
  
 
 
  
  

 
 
 
 
 
 

  
  
  
  
  
  

  
  
  
  
  
  

  
  
 
 
  
  

  
  
  
  
 
  

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

    
    
   
   
   
   

    
    
   
   
   
   

    
    
   
   
   
   

    
    
   
   
    
   

   
    
   
   
   
   

    
    
    
    
   
   

    
    
   
   
   
   

    
   
   
   
   
   

    
   
   
   
   
   

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

    
    
   
   
    
    

    
    
    
    
    
    

    
    
   
   
   
   

    
    
   
   
    
    

   
   
   
   
   
   

    
    
    
    
    
    

    
    
    
    
   
   

    
    
   
   
    
    

    
    
    
    
   
   

planners
pbp s
pbp q
fdss
fdss m
pbp nok s
pbp nok q

time score

planners
pbp s
pbp q
fdss
fdss m
pbp nok s
pbp nok q

total
   
   
  
  
   
   

total
     
    
    
    
    
    

quality score
total
     
     
    
    
     
     

table    number of solved problems  and time quality scores of pbp  pbp nok  fdss
with without using macros for each ipc  domain  fdss m  bw and sat abbreviate fdss using macros  blocksworld and satellite  respectively 

same cluster  the cluster is formed by a single planner  hence  running it by the sequential
scheduling and by the round robin scheduling is the same thing  and the compared planner
portfolios have the same performance 
the planner clusters selected by fdss q are in table    for domains gripper  satellite
and tpp  they are the same as those of pbp q but  in these cases they are formed by more
than one planner  for domains satellite and gripper we observed that fdss q performs
differently from pbp q because of the different scheduling strategy  table   shows the results of the experimental comparison between pbp and fdssd  results are omitted when
the compared clusters are the same and they are formed by a single planner   overall  we
can derive the following observation 
experimental result       for almost all the benchmark problems and domains of the
learning track of ipc   pbp s is as fast as fdss sd   and for depots it is slightly faster 
pbp q computes plans that are always as good as or better than those computed by fdss qd  
and solves more problems 
the performance gap between pbp and fdssd is lower than the gap between pbp and
fdss  but for depots pbp s performs slightly better in terms of speed and number of
solved problems  and over all the ipc  domains pbp q performs considerably better in
terms of plan quality  a rationale for this behavior is that  as we will show in section     
   

fiplanning through automatic portfolio configuration  the pbp approach

ipc  domain
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

fdss qd
s  cl   ff  l  m
m  b   ff  ch   mff  m    ff  b  p  l  lpg  ch   lpg  b 
lpg  m  ff  ch   mff  m    ff  cl   s  ch   s  cl   p  mff  m    l
m  p
ff  ch   ff  l
ff  mff  m    l  lpg
p  m
p
l     s  ch 

table    planners and sets of macros  in round brackets  in the cluster selected by fdssd
for the ipc  domains  s  l  m  mff and p abbreviate sgplan   lama  marvin 
macro ff and parlpg  respectively  ch  b and cl are the three sets of
macros chunking  bunching and clumping generated by wizard  m m  are the
five sets of macros generated by macro ff 

running planner clusters by a round robin scheduling can be more robust than running them
sequentially using possibly inadequate values of planning time slots  another explanation 
especially for the high performance difference in terms of plan quality  is the different way
in which pbp and fdssd explore their portfolio configuration spaces  fdssd searches the
planner cluster to use by a hill climbing algorithm over the space of possible clusters  while
pbp explores the whole space of possible clusters  with a bound on the number of planners
in clusters   the selected clusters of pbp s and fdss sd are almost always the same because
for the ipc  domains and the considered training problems configuring the planner portfolio
focusing on speed is quite easy  as in most cases a single planner  possibly using macros 
outperforms every other planner  on the contrary  for these domains and the training
problems  configuring the planner portfolio focusing on plan quality is more difficult for
fdssd   because its search space contains local minima that prevent fdssd from finding the
best performing configuration  planner cluster   while a complete exploration of the search
space allows pbp to identify it 
it is worth noting that the space of the planner clusters of pbp is much smaller than the
spaces of fdss and fdssd   since in the space of pbp there cannot be two different clusters
formed by the same planners and the same relative macros  but different relative sequences
of planning time slots  the sequence of planning time slots for a planner with the relative
set of macros is derived according to the default pcpv   if this were not the case  the space
of the clusters of pbp would be orders of magnitude greater  and the time required by pbp
for simulating the cluster execution would not be negligible w r t  the time for the other
configuration phases  see table    
the performance comparison of pbp s and fdssd using the wilcoxon sign rank test
gives a statistical result that is compatible with the performance data in table   and
experimental result        over all the ipc  domains  there is no statistical difference
between the planning cpu times of pbp s and fdss sd  z          p           while 
   

figerevini  saetti    vallati

ipc 
domains
depots

max
score
  

time score
pbp s
fdss sd
    
    

mean cpu time
pbp s
fdss sd
    
     

  solved problems
pbp s
fdss sd
  
  

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains

max
score
  
  
  
  
  
  
  
  
  
   

quality score
pbp q
fdss qd
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
fdss qd
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved problems
pbp q
fdss qd
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

table    maximum score  time quality score  average cpu time plan length and number
of solved problems of pbp and fdssd on benchmark problems from depots for
planning speed  and from all the ipc  domains for plan quality 

in terms of plan quality  pbp q performs significantly better than fdss qd  z         
p          
      pbp versus bus
although bus was originally designed to generate a domain independent configured planner portfolio  like fdss  in principle it can also be used to build domain specific configured
portfolios  domain specificity can be obtained simply by having all the training problems over the same domain  a fully automated executable of bus is not available  as the
experimental results presented by roberts and howe        were derived by simulation
 roberts   howe         thereby  in order to compare pbp and bus  we implemented the
bus approach using the same planners and macros integrated into pbp  and we generated
domain specific configured portfolios using this implementation of bus 
bus selects the planners for the configured portfolio through a greedy set covering
approximation algorithm over the sets of problems solved by the incorporated planners 
and then the planners forming the clusters are ordered according to the ranking algorithm
by simon and kadane         the greedy set covering approximation algorithm iteratively
selects a planner and reduces the set covering problem into a smaller one  until the original
input set is fully covered  cormen  stein  rivest    leiserson         let d be the planning
domain  p the set of selected planners  and s the set of test problems to cover  initially  p
is empty and s contains all    training problems  at each iteration  the algorithm chooses
the planner with the largest set of solved problems in s  removes these problems from
s  and adds the selected planner to p   if the number of planners with the largest set of
solved problems in s is greater than one  the algorithm selects the first evaluated planner
   

fiplanning through automatic portfolio configuration  the pbp approach

 the planner evaluation order is random   the process terminates when s is empty  the
resulting set p contains the planners of the configured portfolio 
we experimentally observed that for almost every considered domain  since more than
one incorporated planner solves all training problems in the domain  the set of planners
forming the cluster selected by bus for the domain consists of only one planner  except
for domain parking that has two selected planners  lama and ff using macro set clumping   moreover  the choice of this planner among those that solve all training problems is
drastically affected by the random order in which the greedy set covering approximation
algorithm evaluates the coverage of the planners  hence  to derive an indication about the
performance that can be reached by our implementation of bus  we ran the portfolio configuration of bus nine times  tested the obtained nine configured portfolios  and analyzed
three sets of experimental results for the cpu time and three sets of experimental results
for the plan quality  these three sets were derived using  the median performing configured
portfolio over the nine generated for each considered domain  and the best worst performing configured portfolio over all the possible portfolios that can be generated by the greedy
set covering approximation algorithm of bus  the results of this experimental comparison
are given in table    and summarized in the following observation 
experimental result       for the benchmark domains of the learning track of ipc   in
terms of time score and average cpu time  pbp s q performs much better than the worst
and the median configured portfolios derived by bus  pbp s performs slightly better than
the best configured portfolio that an oracle would select among those that can be derived by
bus  while pbp q performs slightly worse  in terms of problem coverage  the criterion used
by bus to select the planners in the cluster   pbp s solves the same number of problems as
the best configured portfolio that can be derived by bus 
the results of table    show that the performance obtained by the configured portfolios
generated by bus varies greatly  indicating that the planner selection method of bus is
not very accurate to derive efficient domain specific configured portfolios  we think that
the main reason of this is that for the planner selection bus only considers the problem
coverage and ignores the cpu time and plan quality of the incorporated planners  however 
it is important to note that the planner selection method of bus was originally proposed for
different kinds of data sets  problem instances over a set of domains considered altogether
and different from those used in our experiment  and with a different purpose  generating a
domain independent planner portfolio   for which bus is a prominent approach that showed
good performance  roberts   howe        
    effectiveness of the computed configuration knowledge
this section concerns experimental goal g   in order to understand the effectiveness of the
automated portfolio configuration in pbp  we compare the performance of pbp with the
computed configuration knowledge  pbp s q   with no configuration  pbp nok s q   and
with a random configuration  pbp rand s q   in pbp nok s q  all planners in the initial
portfolio are selected  macros are not used  the planning time slots are the same for all
planners  and their execution order is random  pbp rand s q  is the same as pbp nok s q
except that a subset of at most three randomly chosen planners with a  possibly empty 
   

figerevini  saetti    vallati

ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

pbp s

all domains

    
    
    
    
   
    
    
    
    
     

ipc 
domains

pbp q

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains

    
    
    
    
   
    
    
    
    
     

time score
bus
w s
m s
   
    
   
    
   
    
    
    
   
   
   
   
   
   
    
    
   
   
    
     
quality score
bus
w q
m q
   
    
   
    
   
    
    
    
   
   
   
    
   
   
    
    
   
    
    
     

mean cpu time
bus
w s
m s
b s
   
     
   
   
   
     
     
    
     
     
           
    
     
    
    
     
     
     
     
    
     
     
    
    
     
     
    
    
     
     
    
     
     
     
     
    
     
     
    

  solved problems
pbp s
bus
w s m s b s
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
  
 
  
  
  
 
 
  
  
  
  
  
  
 
  
  
   
  
       

mean plan length
bus
w q
m q


     
     
     
     
     
     
    
    
     
     


     
     


     
     

  solved problems
pbp q
bus
w q m q b q
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
  
 
  
  
  
 
 
  
  
  
  
  
  
 
  
  
   
  
       

pbp s

b s
    
    
    
    
   
    
    
    
    
     

pbp q
b q
    
    
    
    
   
    
    
    
    
     


     
     
     
    
     

     

     

b q

     
     
     
    
     

     

     

table     time quality score  mean cpu time plan length and number of solved problems
of pbp s q  and the worst  median and best portfolios that can be derived by
using bus for each ipc  domains  w s  m s and b s denote the worst  median
and best portfolios among those that bus can derive with the lowest  median  and
highest time score for each considered ipc  test problems  respectively  similarly
w q  m q and b q denote the worst  median and best portfolios with the lowest 
median  and highest quality score  respectively 

randomly chosen set of learned macros is used  instead of all planners  and a different
random configuration of pbp s q has been generated for every ipc  problem 
figure   gives an overall picture of the results for all problems in the ipc  domains
considering different amounts of cpu times for the portfolio configuration  specifically  the
time on the x axis is the cpu time limit given to each run of a planner  with a set of
macros  during the performance measurement simulation phase  to each  simulated  run of
the candidate clusters of planners during the planning cluster selection and ordering phase 
and to each run of the configured portfolio during the test phase  the marked points on the
curves for pbp s q correspond to performance scores of the different configured portfolios
obtained for the different considered cpu time limits  these results indicate that  for every
considered cpu time limit in the configuration phase  pbp s q clearly performs better than
pbp nok and pbp rand  moreover  a refined analysis considering each domain separately
shows that pbp s q has the best performance also for every single considered domain  and
that in terms of problem coverage for every considered cpu time limit the gaps between
   

fiplanning through automatic portfolio configuration  the pbp approach

ipc  domains

time score
   

pbp s
pbp nok s
pbp rand s

   

ipc  domains

quality score
   

pbp q
pbp nok q
pbp rand q

   

   

   

   

   

  

  

  

  

 

 
 

  

   

    

 

  

   

    

figure    time score  left plot  and quality score  right plot  of pbp  pbp nok and pbp rand
with respect to an increasing cpu time limit t  ranging from   to      seconds 
for the ipc  domains 

pbp s q and the other two compared version of pbp are very similar to the gaps in the plots
of figure   
experimental result       the computed configuration knowledge can considerably improve the performance of pbp s q w r t  the unconfigured and randomly configured versions
of pbp  pbp nok and pbp rand  respectively  
in terms of planning speed  the performance comparison of the three considered versions of pbp s q  using the wilcoxon sign rank test gives a similar general result  pbp s
is statistically faster than the other versions  z           p        
     in terms of plan
quality  pbp q performs statistically better than the unconfigured version  z          
p        
     for the comparison between pbp q and pbp rand q  we analyzed    out of the
    problems solved by pbp q  because pbp rand q solves few problems and for the plan
quality comparisons we consider only problems that are solved by both the compared planners  the results of the wilcoxon test indicates that pbp q performs similarly to pbp rand q
 z          p           however  it should be noted that the low number of considered
problems makes the statistical comparison through the wilcoxon sign rank test not very
accurate and informative for deriving general conclusions about the relative performance in
this case 
we have also tested a version of pbp nok in which the incorporated planners are run
using the predetermined time slot sequence spre and the planner runs are ordered using
the same method used by pbp  which considers the relative performance of the planners on
the set of the training problems instead of the random order  overall the performance of
pbp nok remains much worse than the performance of  the planner cluster selected by  the
configured version of pbp 
table    analyzes the impact on performance of using dsk  i e   for pbp  the computed
configuration knowledge  in the best performing planners that entered the learning track of
ipc     the results of this comparison confirm the strong positive impact of pbps dsk 
   

figerevini  saetti    vallati

planner
best ipc  planners
obtusewedge
pbp ipc  s
pbp ipc  q
wizard ff
wizard sgplan
pbp s
pbp q
best ipc  planners
bootstrapplanner
fast downward autotune speed
fast downward autotune quality
oaldaeyashp
parlpg speed
pbp ipc  s
pbp ipc  q
pbp s
pbp q

solved    

time

quality

     
    
    
   
   
    
    

     
      
    
     
     
     
    

     
   
    
    
   
   
     

    
     
     
    
    
    
    
      
      

    
     
     
    
     
      
     
      
     

     
     
     
    
     
     
     
     
     

table     performance gaps of the best performing ipc    planners with without dsk in
terms of percentage of solved problems  time and quality scores for the ipc   
benchmark domains and problems  planner rfa  is omitted because it works
only with dsk 

experimental result       for the ipc  domains and problems  the dsk computed for
pbp s and pbp q has the strongest impact among the dsk of the ipc  planners in terms
of improved speed  time  and plan quality  quality   respectively  the dsk computed
for obtusewedge has the strongest impact in terms of percentage of additional solved ipc 
problems 
the reason why the impact of the dsk computed by pbp is quite low in terms of additional
solved ipc  problems is that pbp s q solves almost all these problems even without dsk 
experimental result       for the ipc  domains and problems  the dsk computed for
pbp s has the strongest impact in terms of improved speed  time  among the dsk of the
ipc  planners  the use of the computed dsk in fast downward autotune speed has the
strongest impact in terms of percentage of additional solved problems and improved plan
quality 
although in terms of percentage of additional solved problems and improved plan quality the use of dsk in pbp s q has not the highest impact  it leads to high improvements also in pbp s q  allowing it to achieve performance that is generally better than
fast downward autotune speed  see the quality score column of table    
finally  we conducted an experiment to understand if configuring pbp for a specific domain generates dsk that leads to better performance w r t  configuring the planner portfolio
   

fiplanning through automatic portfolio configuration  the pbp approach

over a set of domains altogether  table    compares the performance of pbp s q with the
dsk  the dsk obtained without using macros  pbp nom s q   and the configuration knowledge computed across all ipc  domains  pbp alld s q   the planner cluster of pbp alld s
is formed by lpg and sgplan   while the planner cluster of pbp alld q is formed by lama 
marvin and sgplan   the results in table    indicate that  even without considering the
usage of macros  the portfolio configuration over all the considered domains together greatly
decreases the performance of pbp 
experimental result       for the ipc  domains  in terms of time score  average cpu
time and number of solved problems  pbp s performs much better than both pbp nom s and
pbp alld s  in terms of quality score and number of solved problems  pbp q performs much
better than both pbp nom q and pbp alld q  in terms of average plan length  both pbp q
and pbp nom q perform usually better than pbp alld q 
the results of the wilcoxon sign rank test applied to the comparison between pbp
and pbp nom confirm that  over all the ipc  domains  pbp s is significantly faster than
pbp nom s  z          p          and  in terms of plan quality  pbp q performs significantly better than pbp nom q  z          p           the high performance gap between
pbp and pbp nom  that is in favor of pbp  clearly indicates the usefulness of using macros 
showing that a portfolio of planners and macros can be much more efficient than a portfolio
of only planners 
    accuracy of the planner cluster selection
this section concerns experimental goal g   in order to test the accuracy of the planner
cluster selection in pbp  we carried out three related experiments in which the performance
of pbp using the computed configuration knowledge was compared with the performance
of  a  every basic planner incorporated in the initial portfolio   b  the best performing
incorporated planner  without using macros  in each considered domain  and  c  the best
performing planner cluster  possibly using macros  in each considered domain  in the
following  section       presents experiments  a  and  b   section       experiment  c  
      pbp and the basic portfolio planners
figure   gives an overall picture of the performance of pbp s q w r t  the performance of the
basic planners  without macros  in terms of speed and plan quality  using a cpu time limit
for each run ranging from   to      seconds  the time quality scores of each compared
system was derived by summing up the corresponding scores obtained by the system in each
ipc  domain  this analysis indicates that  for every considered cpu time limit  pbp s with
dsk is generally much faster than the incorporated basic planners  and pbp q generates
better quality plans 
experimental result       for the ipc  domains  there is no basic planner in the considered input portfolio of pbp that achieves an overall performance better than or similar
to the performance of pbp s for speed  and of pbp q for plan quality  except for very low
cpu time limits  where all compared planners perform similarly in terms of plan quality  
   

figerevini  saetti    vallati

ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains
ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains

time score
pbp s
nom
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
           

alld
    
   
   
    
   
    
    
    
   
    

mean
pbp s
   
   
    
    

    
    
    

    

cpu time
nom
alld
    
     
    
     
    
     
    
     


    
     
    
     
    
     


    
     

  solved problems
pbp s nom alld
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
  
  
  
  
  
  
  
  
  
  
  
 
   
   
   

quality score
pbp q
nom
alld
    
    
   
    
    
    
    
   
   
    
    
    
   
   
   
    
    
    
    
    
   
    
    
   
    
    
    
                

mean
pbp q

     
     
     
    
     
     
     
     
     

plan length
nom
alld


           
           
           
    
    
           
           
           
           
           

  solved problems
pbp q nom alld
  
  
 
  
  
  
  
 
 
  
  
  
 
 
 
  
  
  
  
  
 
  
  
 
  
  
  
   
   
  

table     time quality score  average cpu time plan length and number of solved problems for the speed and quality versions of pbp  pbp nom  abbreviated with nom 
and pbp alld  abbreviated with alld  for the ipc  domains 

the results of the wilcoxon sign rank test applied to this experiment confirm that pbp s
is significantly faster than every incorporated planner  z          p        
     and that
in terms of plan quality pbp q performs significantly better than all them  z         
p        
    except parlpg  according to the wilcoxon sign rank test  there is no statistical
difference between the quality performances of pbp q and parlpg  the discrepancy between
the results of this analysis and those in figure   is generated by the different ways in which
unsolved problems are handled by the quality score function and the wilcoxon sign rank
test for comparing plan quality performance  the first considers all problems attempted by
the compared planners  explicitly penalizing a planner with zero score for each unsolved
problem   while the second considers only the subset of the test problems solved by both
the compared planners  pbp q solves many more problems than parlpg      against      
and this is reflected in the relative curves of figure   for plan quality 
we observed that for domains rovers  satellite and gripper all solutions of pbp q
are computed by parlpg  for domains blocksworld and depots  pbp q using parlpg solves
  and   problems  respectively  for the other considered domains  parlpg is not part of the
selected cluster of running planners  to better understand the importance of parlpg in pbp 
we have analyzed the performance of a version of pbp that does not incorporate parlpg 
   

fiplanning through automatic portfolio configuration  the pbp approach

ipc  domains

time score
   

pbp s
fd
lama   st sol  
lpg td   st sol  
macro ff
marvin
metric ff
sgplan 
yahsp
parlpg

   
   
   
  

ipc  domains

quality score
   

pbp q
fd
lama  last sol  
lpg td  last sol  
macro ff
marvin
metric ff
sgplan 
yahsp
parlpg

   
   
   
  
  

  

  

 

 
 

  

   

    

 

  

   

    

figure    time  left plot  and quality  right plot  scores of pbp s q with the relative computed configuration knowledge compared to the time and quality scores of the
basic incorporated planners for the ipc  domains  using an increasing cpu time
limit  fd abbreviates fast downward 

for the ipc  domains  if pbp s q does not incorporate parlpg  the problems solved by
pbp s q decrease by about         and  in terms of time score  pbp s without parlpg
performs worse than parlpg        vs          however  in terms of quality score  pbp q
without parlpg performs still much better than parlpg        vs          the results of
this analysis show that the performance of pbp in terms of speed is drastically affected by
parlpg  on the other hand  the importance of having parlpg in pbp q is limited because
the parameter configuration of parlpg focused on speed 
the two main reasons explaining the observation derived from experimental result      
about the globally best performance of pbp s q are that no basic incorporated planner
 even parlpg  outperforms all the others in every considered benchmark domain  and that
pbp effectively selects and combines the most efficient planners for each domain under
consideration  possibly using a useful set of macro actions  
one may wonder if the picture can be different when pbp s q is compared with the basic
incorporated planners using a  possibly empty  set of macros  figure   shows the results
of this comparison  using a cpu time limit for each run ranging from   to      seconds 
for the sake of readability  the names of the    combinations of basic incorporated planners
and sets of macros  learned by wizard and macro ff  have been omitted  the time quality
scores of each compared system was derived by summing up the corresponding scores obtained by any compared system in each ipc  domain  if for a domain the combination of
a planner p and a macro set m has m empty  then for that domain the combination is
restricted to p  
the results in figure   show that  in terms of cpu time  for the ipc  domains there is
no basic planner in pbp that  by using a learned macro set  achieves an overall performance
better than or similar to the performance of pbp s  except for very low cpu time limits 
where some compared planners with macros perform similarly   in terms of plan quality  for
cpu time limits lower than    seconds  there exist some basic incorporated planners using
macros that perform better than pbp q  for high cpu time limits  pbp q performs much
better than every compared planner with macros  the combinations of basic incorporated
   

figerevini  saetti    vallati

ipc  domains

time score
   

pbp s
any planner with a set of macros

   

ipc  domains

quality score
   

pbp q
any planner with a set of macros

   

   

   

   

   

  

  

  

  

 

 
 

  

   

    

 

  

   

    

figure    time  left plot  and quality  right plot  scores of pbp s q with the relative computed configuration knowledge compared to the time and quality scores of the   
combinations of incorporated planners and sets of macros for the ipc  domains 

planners and sets of macros that for low cpu time limits perform better than pbp q are
sgplan  using any set of learned macros  parlpg using macro set bunching  and yahsp
using macro set clumping  for low cpu time limits  these combinations of planners and
macros have an overall performance better than pbp q  essentially because they dominate
over a single domain  barman for sgplan   blocksworld for parlpg and yahsp 
since the analysis of figure   considered the test domains altogether  in order to verify
the supposition that also for a given single domain pbp performs better or not worse than
every basic incorporated planner  we have compared pbp s q with the best performing basic
planner  according to the test problems and the relative ipc scores  for each considered
domain  such a planner  indicated with bestp s q  is the single planner  without macros 
that we would use if we had an oracle specifying the best basic incorporated planner for the
test problems of a specific domain  the results of this experiment are shown in table    
for domains gripper  rovers  satellite and spanner the planner cluster of pbp s is
the same as bestp s  for the other considered domains  the time score and the average
cpu time of pbp s are much better than bestp s  in terms of problem coverage  for three
domains pbp s solves a much higher number of problems  while for the other domains
problem coverage is the same as bestp s  these results show that  in order to achieve
higher planning speed  using a cluster of planners or a useful set of macro actions selected
by pbp s can be much better than using a single planner without macros  sections      
and     will study the usefulness of using a properly selected cluster of planners and a
non empty set of macros  respectively 
experimental result       there is no ipc  domain for which any basic planner in the
considered input portfolio of pbp s is faster  achieves better time score  or solves more
problems than pbp s 
concerning plan quality  bestp q contributes a great deal to the success of pbp q  since
for all domains except barman and spanner it is included in the cluster selected by pbp q
 see table     for barman  gripper  parking  rovers  satellite  spanner  and tpp  in
most cases bestp q provides the solution to pbp q 
   

fiplanning through automatic portfolio configuration  the pbp approach

ipc 
domains

bestp s

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

sgplan 
parlpg
parlpg
parlpg
ff
parlpg
parlpg
parlpg
parlpg


all domains
ipc 
domains

bestp q

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

sgplan 
parlpg
parlpg
parlpg
ff
parlpg
parlpg
parlpg
lama


all domains

max
score
  
  
  
  
  
  
  
  
  
   

time score
pbp s
bestp s
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean cpu time
pbp s
bestp s
   
    
   
    
     
     
    
    
     
     
    
    
    
    
    
    
     
     
    
    

  solved problems
pbp s
bestp s
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

max
score
  
  
  
  
  
  
  
  
  
   

quality score
pbp q
bestp q
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
bestp q
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved problems
pbp q
bestp q
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

table     maximum score  time quality score  average cpu time plan length  and number
of problems solved by pbp s q and the best planner  bestp s q  for the ipc 
domains 

experimental result       for the ipc  domains  in terms of plan quality  the relative
performance of pbp q and the best performing basic planner  bestp q  that an oracle would
choose is generally slightly in favor of pbp q  for blocksworld and depots pbp q performs
better  for parking bestp q performs slightly better  and in the rest of the ipc  domains
they perform similarly 
concerning parking  table    shows that  for the used benchmark problems  the
bestp q planner is ff  which is correctly contained in the cluster selected by pbp q for this
domain  see table     however  this cluster also includes an additional planner  lama 
that  for the tested problems and the considered cpu time limit  does not give a useful
contribution to pbp q  no solution is found by lama   introducing some noise in the
cluster selection  this and the fact that for parking no useful set of macros is computed by
pbp q are the main reasons why pbp q performs slightly worse than the bestp q planners
for the considered test problems in domain parking 
the wilcoxon sign rank test applied to this experiment confirms that  overall  pbp s is
significantly faster than the bestp s planner of each domain  z          p          while
in terms of plan quality  the test results indicate that the performances of pbp q and the
   

figerevini  saetti    vallati

bestp q planner are not significantly different  z          p           in other words  the
test cannot derive that one system performs statistically better than the other 
finally  we have compared pbp s q and the best performing combination p   m of a
basic planner p with a non empty set m of macros learned for p in each ipc  domain 
except spanner for which no macro are computed  in this experiment  the best macro set
m for p in a domain d was chosen considering the performance of p   m over the training
problems of d  overall  in terms of speed score and problem coverage  pbp s performs
similarly to p   m in five domains  while it performs much better in three domains  in
terms of quality score  pbp q performs similarly in four domains and much better in other
four domains  one of the reasons why p   m can perform worse than pbp s q is that in
some domains macros are harmful  and pbp s q correctly decides not to use them  this
will be discussed also in the context of an experiment presented in section      where we
analyze the usefulness of macros and the accuracy of their selection in pbp s q 
      pbp and the best performing portfolio configuration
in order to test the accuracy of the planner cluster selection in pbp s q  we have also
compared pbp with the computed configuration knowledge and the best performing cluster
of planners  with the useful macros  for each considered test domain   the worst performing
cluster solves no problem   table    shows the results of this experiment considering two
best performing clusters with at most three planners  for each considered ipc  domain 
bestc s is the planner cluster with the highest time score among those that can be obtained
by pbp s using the default pcpv  similarly  bestc q is the planner cluster with the highest
quality score  therefore the data in the time quality score columns bestc s q are the
maximum values over the time quality score sums of all planner clusters for the set of test
problems of each ipc  domain 
for every domain except depots  the time score of pbp s is the same as the one of the
best cluster and is much greater than zero  and thus much better than the score of the
worst cluster   also in terms of average cpu time and problem coverage the performance
of pbp s and the best cluster are almost always the same  only for domain depots pbp s
and bestc s perform slightly differently  in this case  the planners and relative macros in
the cluster of pbp s are different from those in bestc s  in particular  macro ff is selected
with a different set of macros  and this makes pbp s slightly slower 
concerning pbp q  overall  in terms of plan quality there is no high performance gap
with respect to the best cluster  although pbp q performs worse for domain tpp  for this
domain  the training problems used by pbp q are not informative enough  this observation
is supported by the fact that the best cluster computed using the training problems  instead
of the test problems  is different from the one derived for the test problems  on the other
hand  we observed that  if the size of the training problems is similar to the size of the test
problems  the configured portfolios of pbp q and bestc q are the same 
the wilcoxon sign rank test confirms that  overall  the performance of pbp s q and the
best cluster is not statistically significantly different  z          p          for the speed
analysis  z          p          for the quality analysis   moreover  we have also observed
that pbp s q without configuration  pbp nok s q  performs generally much worse than the
   

fiplanning through automatic portfolio configuration  the pbp approach

ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains
ipc 
domains

bestc s
sgplan   b 
parlpg  b 
macro ff  m  
parlpg   
macro ff  m  
parlpg   
parlpg   
parlpg   
macro ff  m  

bestc q

barman
sgplan   cl 
blocksworld
parlpg   
depots
mff m   mff m  
gripper
parlpg   
parking
ff    
rovers
parlpg   
satellite
parlpg   
spanner
lpg   
tpp
macro ff  m  
all domains

 

max
score
  
  
  
  
  
  
  
  
  
   

time score
pbp s bestc s
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean cpu time
pbp s
bestc s
   
   
   
   
     
    
    
    
     
     
    
    
    
    
    
    
     
     
    
    

  solved probs
pbp s bestc s
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

max
score
  
  
  
  
  
  
  
  
  
   

quality score
pbp q bestc q
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
bestc q
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved probs
pbp q bestc q
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

table     maximum score  time quality score  average cpu time plan length  and number
of problems solved by pbp s q and the best cluster  bestc s q  for the ipc 
domains  mff abbreviates macro ff  the order of the planners listed in the
cluster for depots corresponds to the order in which they are run 

best cluster for speed and quality  overall  from our experimental results we can derive the
following observation 
experimental result       for the ipc  benchmarks  in terms of time score  average
cpu time and problem coverage  pbp s performs as well as or  for depots  similarly to
bestc s  in terms of quality score  average plan length and problem coverage  pbp q performs as well as or similarly to bestc q  except for tpp  in which the plan quality score and
problem coverage of pbp q are worse 
table    also shows that very often an oracle would use a single planner to either quickly
solve the ipc  problems or compute high quality plans for them  hence  one may argue
that using clusters formed by more than one planner  possibly with a set of useful macros 
is not useful  the rationale why the best clusters in table    are formed by a single planner
is that often any incorporated planner  even using macros  requires almost all the cpu
time to solve each ipc  test problem  except for domain depots   thus the remaining time
is usually not enough to improve the coverage or the quality of the  first  computed plan
by running more than one planner  for the purpose of computing high quality plans  if we
use a set of test problems smaller than the ipc  problems  then the picture is different 
   

figerevini  saetti    vallati

table    compares the performance of pbp and the best performing cluster of planners for
some sets of randomly generated medium size problems of the ipc  domains  i e   with
size ranging between the largest training problems and the smallest testing problems   in
this table  bestc s q indicates the clusters that an oracle would use to solve these sets of
medium size problems 
experimental result       for test problems over the ipc  domains with sizes ranging
between the training problem sizes and the ipc  test problem sizes  for most of the ipc 
domains the best planner clusters for deriving high quality plans are formed by more than
one planner 
in general  a cluster of planners containing a certain planner performs worse than this
planner alone when most of the planning problems of the domain for which the planner
portfolio is configured are efficiently solved by the planner alone  and thus running also the
other planners of the cluster is a waste of cpu time  a cluster formed by more than one
planner performs better than any single portfolio planner only if for the considered domain
there is no planner dominating all others in terms of either problem coverage and cpu
time  or problem coverage and plan quality 
interestingly  we observed that sometimes the cluster selected by pbp q and the best
cluster for the intermediate size test problems are formed by a planner that solves all the
problems  but produces low quality plans  and other planners that produce higher quality
plans  but solve few problems  this is the case for barman and tpp  for these domains 
although the quality of the plans of sgplan  is low  having sgplan  in the cluster is very
useful because it contributes to greatly improve the problem coverage of the cluster 
finally  the results in table    also indicate that sometimes the effectiveness of the
configured portfolio can be greatly affected by the difference between the size hardness of the
training problems and the size hardness of the test problems  in particular  the performance
gap between pbp q and the best cluster for the considered randomly generated intermediatesize problems of domain tpp is lower than between pbp q and the best cluster for the ipc 
test problems of tpp  this indicates that  in terms of plan quality  the effectiveness of the
planner portfolio configuration in pbp q computed using relatively small training problems
can gradually decrease when the size hardness of the test problems is increased 
    macro usefulness and selection accuracy
this section concerns experimental goal g   we analyze the effectiveness of using the set
of macros selected by pbp for each planner  and the accuracy of pbp for selecting the most
useful set of macros among those computed by wizard or macro ff for each planner in the
configured portfolio  while it has been shown that wizard and macro ff can often generate
useful sets of macros that speed up planners  botea et al       b  newton et al          it
is also known that there is no guarantee that using macros always leads to improving the
speed of a planner  and a bad set of macros could even make a planner slower  moreover 
usually the degree of usefulness of a set of macros depends on the specific planner that uses
them 
concerning macros in pbp s  for each ipc  domain with at least one non empty set of
computed macros and each planner in the selected cluster  see table     we compared the
   

fiplanning through automatic portfolio configuration  the pbp approach

ipc  domains

bestc s

 medium probs 

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains
ipc  domains

s  b 
parlpg  b 
mff  m    parlpg    
parlpg   
mff  m  
parlpg   
parlpg   
parlpg   
macro ff  m  

bestc q

 medium probs 

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains

s  cl   ff     m   
p     mff  m    lpg  b 
mff  m    p     lpg   
parlpg   
ff     lama   
parlpg   
parlpg     marvin   
lpg   
mff  m    l     s  ch 


time score
pbp s bestc s
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
     

mean cpu time
pbp s
bestc s
   
   
   
   
    
    
    
    
     
     
    
    
    
    
    
    
    
    
    
    

  solved probs
pbp s bestc s
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   

quality score
pbp q bestc q
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
bestc q
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved probs
pbp q bestc q
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   

table     time quality score  average cpu time plan length  and number of problems
solved by pbp s q and the best cluster  bestc s q  for sets of medium size
problems of the ipc  domains  s  m  mff  p  l abbreviate sgplan   marvin 
macro ff  parlpg  and lama  respectively  the order of the planners listed in
the clusters corresponds to the order in which they run 

number of solved problems  number of visited search nodes  average cpu time and time
score using   a  no macros   b  the set of macros identified by pbp s as useful for the planner 
and  c  the set of macros among those computed for the planner that in terms of time score
makes it perform best over the test problems  from the results of this experiment  which
are given in table     the following general observation can be derived 
experimental result       for the ipc  domains  very often there is a candidate set of
macros for a planner  computed by wizard or macro ff  that greatly increases the speed
performance of the configured portfolio  and pbp s correctly selects it 
table    also indicates that  for most of the considered domains  the performance of
the selected planners obtained using their sets of macros identified as useful by pbp s is
usually the same as the performance they can achieve when using their best sets of macros 
this gives strong positive evidence about the effectiveness of pbp ss approach to selecting
a useful set of macros for each planner in the configured portfolio  in particular  the best
set of macros is the same as the set of macros selected by pbp s  see table     the only
exception where the sets of macros identified by pbp s is different from the best set is the
   

figerevini  saetti    vallati

domain  
planner
barman
sgplan 
blocksworld
parlpg
depots
macro ff
parking
macro ff
tpp
macro ff

 s

with no macros
 n
t

ts

 s

with pbp s macros
 n
t
ts

 s

with best macros
 n
t
ts

  



    

    

  



   

    

  



   

    

  

    

    

    

  

     

   

    

  

     

   

    

 

      



   

  

     

     

    

  

     

     

    

 

    

     

   

 

     

    

   

 

     

    

   

 

     

     

   

  

    

     

    

  

    

     

    

table     number of solved problems   s   number of visited search nodes   n   average
cpu time  t  and time score  ts  of the planners forming the cluster selected
by pbp s using no macro  the set of macros selected by pbp s  and the best performing set of computed macros  the domains considered are the ipc  domains
with at least one non empty set of computed macros  we indicate with  that
the number of nodes visited by sgplan  could not be measured 

case of macro ff in domain depots  however  as shown in table    for depots pbp s
selects a cluster that contains both macro ff with macro set m  and parlpg  obtaining an
overall performance that we experimentally observed to be very similar to the performance
of macro ff with the best set of macros  m   it is worth noting that the candidate sets of
macros computed for parlpg and depots are harmful  i e   they make its speed performance
much worse  and pbp s correctly detects this  choosing to run parlpg with zero macros
 denoted with parlpg     in table    
the study of computing and using macros has usually been pursued with the main goal
of speeding up planning  possibly making the quality of the computed plan lower than when
macros are not used  interestingly  in the context of pbp q  in several cases macros are useful
also for improving plan quality  specifically  for nine over the fifteen ipc    domains  the
configuration phase of pbp q selects clusters of planners with at least one planner using a
non empty set of macros  see table     we experimentally observed  with both the training
problems and the test problems  that there are two reasons why macros are useful to pbp q 
 for some domains there are individual planners for which using macros leads to better
quality plans  this is the case  e g   for domains barman and blocksworld using planners sgplan  and lpg  first solution   respectively  this behavior has been observed
also by botea et al          coles and smith         and newton et al         
 if the selected cluster includes a planner configured to use a set of macros  usually
such a planner quickly computes a solution  this can be somewhat helpful also for
the test problems that another planner in the cluster can solve with better solutions 
if it has enough cpu time  because a quick termination of the planner with macros
leaves more cpu time to run the other cluster planner s   having more cpu time 
can be important especially for the incremental planner s  included in the selected
   

fiplanning through automatic portfolio configuration  the pbp approach

cluster  like lama and parlpg  there are many problem instances of domains depots 
satellite and tpp for which we observed this behavior 
experimental result       for the ipc  domains  the use of the macros selected by
pbp q can lead to better quality solutions 
in general  the use of macros can make the plan search more effective because  e g  
by planning multiple actions in one search step the size of the possible plateaus and the
depth of the local minima can be reduced  on the other hand  if a large number of macros
is added to the domain  the size of the search space can drastically increase  making the
problem harder to solve  in the rest of this section  we analyze the kind and number of
macros selected and used by pbp  we consider both macro operators  i e   parameterized
macros defined as sequences of  primitive  domain operators  and macro actions  i e   macros
derived by instantiating the parameters of the macro operators 
table    describes the macro operators in the sets selected by pbp s for a planner
in the configured portfolio  see table    in terms of  number of aggregated operators 
number of involved parameters  average numbers of macro actions and primitive actions in
the augmented domain  average plan lengths obtained by the considered planners without
using macros  and using them but counting each planned macro actions as a single action 
from the data in table     we can derive some interesting observations about the macros
used by pbp for the considered domains  first  the macro operators used by pbp for a
planner are no more than three  and often they aggregate few primitive operators  secondly 
for the planners that handle macros by simply adding instantiated macro operators to
the domain definition  sgplan  and parlpg   the average number of macro actions in
the augmented domains is much lower or comparable to the number of primitive domain
actions  even for domain barman where sgplan  uses a large macro operators involving
seven primitive operators and six parameters  hence  for these planners and domains 
macro actions do not drastically increase the search space  the picture is quite different for
macro ff  for which the macro operators selected by pbp s in domains depots  parking
and tpp  if instantiated  generate a number of macro actions that on average is one or more
orders of magnitude greater than the number of primitive domain actions  the reason why
macro ff can successfully use macro operators even if the number of domain macro actions
is huge is that this planner instantiates macro operators and filters macro actions at search
time  according to a relaxed plan heuristic applied to the current search state  rather than
simply adding all macro actions to the original domain before planning 
the fact that in our experiment pbp never generates configured portfolios with large
sets of macro actions added to the domain description seems to indicate that  if the number
of macro actions is very high w r t  the number of primitive actions  this macro exploitation
method usually makes the performance of a planner using them much worse  this observation was confirmed by an additional experiment in which we added the pddl description
of the macro operators learned by macro ff for domain depots to the original description
of depots  and run macro ff using the resulting augmented domain  as shown in table    
for depots the number of learned macro actions is about one order of magnitude greater
than the number of primitive actions  we experimentally observed that with the augmented
domain macro ff  without its own method of using macros  solves no depots problem 
   

figerevini  saetti    vallati

domain  
planner
barman
sgplan  b
blocksworld
parlpg b
depots
macro ff m 
parking
macro ff m 
tpp
macro ff m 

 operators
for every m 
   

 parameters
for every m 
   

     

     

   

   

   

   

 

 

 grounded
macros
    
     
     
      
      
        
billions
 billions 
billions
 billions 

 actions
     
      
     
      
     
      
      
        
      
       

plan length
without m 
   
    
   
     

   
    


plan length
with m 
   
    
   
    
   
    
  
    
   
    

table     number of  primitive  operators forming each of the selected macro operators 
number of parameters in each macro operator  average number of instantiated
macro actions  average number of domain  primitive  actions  average plan length
without using macros  and average plan length using macros and counting each
planned macro action as a single action  each number in the  nd and  rd columns
refers to a different macro operator  numbers in brackets are standard deviations  the domains considered are the ipc  domains with at least one non empty
set of learned macros selected by pbp s  b abbreviates the bunching macro
set learned by wizard  m m  are two of the five sets of macros generated by
macro ff  we indicate with  that no solution was found within the given
cpu time limit 

moreover  the results about the average plan length in table     show that plans with
macro actions are much shorter than those computed from the original domain  if we count
each macro as a single action  given that during planning the application to the current
search state of a macro  or possibly a combination of macros in macro ff  generates a single
successor state  for the considered planners and domains  on average the distance between
the initial search state and a goal state is much shorter when the search space includes
macros  and hence searching a solution plan in this space can be much faster 
to conclude  we note that the usefulness of macros can also depend on factors different
from those considered in our analysis  such as  e g   the ratio between the number of useful instantiations of a macro operator  providing shortcuts towards a goal state  and the
number of instantiations that guides the search towards a wrong direction  botea  muller 
  schaeffer      a   further factors that might affect the usefulness of macro operators in
planning are conjectured in the work by mccluskey and porteous        
    planner cluster scheduling
this section concerns experimental goal g   we experimentally analyze some possible alternative strategies for scheduling the execution of the planners during the portfolio configuration of pbp and at planning time  in the first experiment  we investigate the use in
pbp of four sequential and round robin strategies with predefined and configured planning
time slots  in the second experiment  we study the importance of choosing a specific pcpv
   

fiplanning through automatic portfolio configuration  the pbp approach

defining the planning time slots  as described in section      and in particular of pbps
default pcpv 
let t be the input cpu time limit  k the maximum number of planners in the cluster 
and n the number of single planners  combined with a set of macros  in the portfolio  in
our experiment  t       seconds  k      and    n     depending on the number
of computed macro sets   we experimentally compare the performance of pbp using the
following strategies for the planner cluster execution during the portfolio configuration   
s   sequential execution of each tuple of at most k planners with tk seconds for the run of

p
every planner  the number of candidate configured portfolios is ki   i  ni   for this
and the next  s   strategies  when a planner terminates before the end of its time
slot  the remaining time of this slot is used to  uniformly  increase the slots of the
subsequently running planners 
s   for every combination of time slots t    k such that ti                             
                          i        k  and t         tk   t   sequential execution of
each tuple of k planners with ti seconds for the runp
of the i th
 planner in the sequence 
the number of candidate configured portfolios is ki   ni  o ui     where u is the
number of non zero planning time slots lower than      in our experiment u      
r   round robin execution of each set of at most k planners with the planning time slots
derived from the default pcpv defined in section      this isppbps default
scheduling

strategy   the number of candidate configured portfolios is ki   ni  
r   for every pcpv p   hp         p  i in set p  defined below   round robin execution
of each set of at most k planners with the planning
 time uslots derived from p  the
pk
n
number of candidate configured portfolios is i   i  o s    where s is the number
of increments considered for each pi  in our experiment s      
set p in r  is formed by more than         pcpvs obtained by setting each percentage
in the pcpv to a value ranging from li to ui   with  l         l  equal to                        
            u         u  equal to                                      and increment step of pi
equal to ui  li   for instance  if i      we have that the increment step of p  is     
     
 
consequently  the values used for the first percentage p  of the considered pcpvs are    
               
concerning the execution order of the planners in a cluster  for each considered sequence
in strategies s  and s   the order is defined by the planner order in the sequence  two
sequences formed by the same planners are considered different clusters if the planners are
differently ordered or they use different time slots   for each cluster of planners in strategies
r  and r   the execution order is determined according to the increasing planning time slots
associated with the planners in the cluster  this is the default execution order strategy  
the configuration phase of pbp using each of the four scheduling strategies generates four
alternative clusters of planners  with relative planning time slots  which  at planning time 
are run with the same corresponding scheduling strategies that were used at configuration
time  it should be noted that the portfolio configuration using strategies s  and r  is
    the planners of each candidate cluster are executed by simulation  as described in section     

   

figerevini  saetti    vallati

computationally much heavier than the configuration using s  and r   respectively  since
many more candidate configured portfolios are considered  on the other hand  since pbp
with s  and r  examines larger portfolio configuration spaces  in principle  it could obtain
more accurate configured portfolios 
tables    and    compare the performance of pbp configured using s  s  and r  r 
for solving the ipc  domains and problems  we observed that  in terms of speed  for
all ipc  benchmark domains except depots  the considered scheduling strategies do not
affect the selection of the best cluster  since pbp s always selects the cluster formed by a
single planner  possibly using macros   for depots  as shown in tables    and     pbp s
with the round robin scheduling strategies solves more problems and is faster than with the
sequential scheduling strategies 
concerning plan quality  the best cluster selected by pbp q contains more than one
planner for every ipc  domain  overall  the following observation can be derived 
experimental result       for the ipc  benchmark domains and problems  pbp q with
r  r  solves more problems than pbp q with s  s  and  in terms of plan quality  overall
it performs similarly to pbp q with s  s  
we think that the explanation why pbp q with r  r  performs better in terms of number of solved problems is that using a round robin strategy makes pbp q more robust than
using a sequential strategy with respect to possible incorrect ordering of the planner runs
and inadequate values of the planning time slots decided at configuration time  when the
training problems are not as difficult as those used at testing time  usually they are easier  
some inaccurate estimation about the effectiveness of the learned configuration knowledge
can arise  an under estimation of the time slot values or an incorrect planner execution
order can damage more severely the sequential execution of the planners in the selected
cluster  since each of these planners is run only once  using at most the estimated time slot 
while in the round robin execution each of them is iteratively run with its  multiple  time
slots  until the total cpu time limit is reached or all planners terminate 
in terms of plan quality evaluated through the ipc quality scores  pbp q with r  r 
tends to perform better than pbp q with s  s   the main reason is that pbp q with r r  solves more problems than pbp q with s  s   and the quality score for an unsolved
problem is zero  if we consider the average plan quality  last four columns of tables   
and      we observe mixed results  in two domains pbp q with r  r  performs best  in
two worse  and in the other ones about the same  the discrepancy in the evaluation results
using quality scores and average plan qualities is only apparent  since the quality score
and the average quality evaluations have different assumptions about the way they consider
unsolved problems  for the average plan quality  only the subset of the test problems solved
by pbp using all the compared strategies are considered  while for the quality score  all test
problems are considered 
seipp et al         show that a sequential portfolio of    domain independent statebased forward planners can solve more problems when the planning time slots are uniform 
rather than configured over a set of training problems  because  for the considered planners
and test problems  a planner either quickly solves a problem or does not solve it at all 
in our context  we observed that if we sequentially run all n planners of pbp q  i e   up
to    combinations of the   basic planners with without the computed sets of macros 
   

fiplanning through automatic portfolio configuration  the pbp approach

ipc 
domains
depots

s 
    

time score of pbp s
s 
r 
r 
    
    
    

problems solved by pbp s
s 
s 
r 
r 
  
  
  
  

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains

quality score of pbp q
s 
s 
r 
r 
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
   
   
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                       

problems solved by pbp q
s 
s 
r 
r 
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
 
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   
   
   

table     time quality score and number of solved problems of pbp s q using scheduling
strategies s  s  and r  r  for the ipc  benchmark domains and problems 

using uniform time slots  then only     test problems are solved  against the     solved
by pbp   the n planners uniform strategy performs as well as pbp q only if the cpu time
limit is increased by several times  keeping     seconds for pbp q   differently from what
observed in the work of seipp et al          our experimental evaluation includes many
problems that the n planners of pbp q solve using considerable cpu time  e g   the number
of problems that can be solved by any planner incorporated in pbp  even using macros 
within    seconds is only      probably a reason of this different behavior is that the test
problems of the ipc  learning track are on average more difficult than the problems of
the ipc  deterministic track  which are the test problems used in the work of seipp et al 
       
on the other hand  if pbp sequentially runs at most   planners  as in strategies s s   instead of all the    possible combinations between the incorporated planners and the
learned macros  we obtain a behavior similar to that observed by seipp et al          in
particular  the results in tables    and    show that in terms of number of solved problems
and speed  configuring the planning time slots for the sequential scheduling in some cases
can even degrade the performance of pbp w r t  using the uniform distribution of cpu time
 see the results in tables    and    of pbp s using s  and s  for depots and of pbp q using
s  and s  for satellite   however  in our context the uniform distribution of cpu time
over the planners in the cluster selected by pbp is not the best one  since we experimentally
observed that pbp with s  clearly outperforms pbp with s  if the configuration is done
using the test problems rather than the training problems  we believe that the main reason
for this behavior is that in our experiment the training problems are much smaller and
easier than the test problems  which in several cases makes pbp with s   configured with
the training problems  underestimate the cpu times required to solve the test problems 
   

figerevini  saetti    vallati

ipc 
domains
depots

average cpu time of pbp s
s 
s 
r 
r 
                 
     

std  dev  of cpu time of pbp s
s 
s 
r 
r 
     
     
     
    

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
all domains

average plan quality of
s 
s 
r 
                 
                 
                 
                 
    
    
    
                 
                 
                 
                 
                 

std  dev  of plan
s 
s 
    
    
    
    
     
     
    
    
    
    
     
     
     
     
    
    
     
     
     
     

pbp q
r 
     
     
     
     
    
     
     
     
     
     

quality of pbp q
r 
r 
    
    
    
    
    
    
    
    
    
    
     
     
     
     
    
    
    
    
     
     

table     average and standard deviation of the cpu time plan quality of pbp s q using
scheduling strategies s  s  and r  r  for the ipc  benchmark domains and
problems 

contrary to pbp with s  s   pbp with r  r  performs similarly according to all three
evaluation criteria  solved problems  speed and plan quality   this result indicates that
configuring the planning time slots by considering many alternative pcpvs does not lead
to high improvements with respect to using the default predefined planning time slots 
that in pbp configuring the values of the planning time slots is less crucial when using a
round robin strategy than when using a sequential strategy  and that pbp with r  r  is
less sensitive to the different size of the problems used for configuration and testing 
experimental result       for the ipc  benchmark domains and problems  pbp s q
with r  r  is less sensitive to the definition of the planning time slots than pbp s q with
s  s  
in the rest of this section  we study the problem of configuring the pcpv used to define
the planning time slots in the round robin planner scheduling of pbp  in particular  we
address the following questions focusing on the ipc  benchmarks  how important is setting
the pcpv to a particular value for a given domain  if we had an oracle specifying the best
pcpv for the test problems of a specific domain  how good would the default pcpv be with
respect to it 
the data used in this analysis were obtained as follows  for each pcpv p in the set p
defined as well as for the scheduling strategy r  of the previous experiment  pbp s q was
run using the cluster selected by simulating the round robin scheduling with the planning
time slots derived from p as described in section      thereby pbp s q was configured more
than         times with different predefined pcpvs and  consequently  different predefined
planning time slots  the resulting configured portfolios were then run  by simulation  over
the test problems of the learning track of ipc  
   

fiplanning through automatic portfolio configuration  the pbp approach

time score

quality score

  

  

  

  

  

  

  

  

  

  

 

 

 

 
barman

bw

depots grip  parking rovers

sat  spanner tpp

barman

bw

depots grip  parking rovers

sat  spanner tpp

figure    distribution of the time  left plot  and quality  right plot  scores of pbp s q using
more than         pcpvs for the ipc  problems  bw  grip  and sat  abbreviate
blocksworld  gripper and satellite  respectively 

figure   analyzes the time and quality scores of these configured portfolios through box
and whisker plots  in each plot  the bottom of a whisker is the worst score  the bottom
of a box is the lower quartile score  the band in a box is the median score  the top of a
box is the upper quartile score  the top of a whisker is the best score  finally  each cross is
the score of pbp s q for a domain using the default predefined pcpv  in the following  the
pcpv corresponding to the configured portfolio obtaining the best time or quality score for
a domain is called the best performing pcpv for that domain  since the best performing
pcpv is derived from the observed performance on the test problems  it can be considered
the best pcpv over p that an oracle would give us  from the experimental data used for
figure    we derive the following observation 
experimental result       different ipc  domains have different best performing pcpvs
for pbp 
for each ipc  domain where the length of the whisker in figure   is zero  the cluster
selected by pbp s q with any pcpv is formed by only a single planner  and hence for these
cases the definition of the pcpv used to derive the planning time slots do not affect the
performance of pbp  all available cpu time is assigned to the single selected planner   in
the plot about speed this happens for all domains except depots  while in the plot about
plan quality  it happens only in domain spanner  for domain barman  all clusters selected
by pbp q using the configured pcpvs include sgplan  with a learned set of macros  and
this is the only planner in the cluster finding solutions for the test problems of this domain 
for the domains in which pbp s q does not always select the same singleton planner
cluster for all the pcpvs considered  the specific used pcpv can have a high impact on
pbps performance  as shown especially for domains depots  gripper and satellite in
the quality score plot of figure    interestingly  we can observe that the default predefined
pcpv used in pbp s q is generally a good choice  since very often the crosses in the plots
appear at  or near to  the top position of the corresponding whiskers 
   

figerevini  saetti    vallati

experimental result       for every ipc  domain  the cluster selected by pbp s q using
the default pcpv h                                  i performs similarly to pbp s q using the
best performing pcpv  except for pbp q in domains parking and tpp 
for parking  the best performance is obtained by running planners ff and lama with
pcpv equal to h                                      i  for tpp  it is obtained by running planners lama  macro ff and sgplan  with pcpv equal to h                                  i 
for these two domains  pbp q with the default pcpv does not perform as well as with
the best performing pcpv  but still better than the median performing pcpv   the main
reason is that for these domains the ipc  test problems are much larger  and harder  than
those used for the training  which  as also observed in section      can affect the accuracy
of the portfolio configuration for the test problems in terms of the selected planner cluster
and configured pcpvs 
overall  the results of the experiment about configured and default pcpvs for pbp
indicate that  if the round robin planner scheduling is used  tuning the pcpv  and consequently the planning time slots  for a specific ipc  domain does not greatly improve the
performance of the resulting configured portfolio  since very often the default pcpv performs as well as the best pcpv specified by an oracle  consequently  given that without the
pcpv tuning the portfolio configuration is much simpler and faster  pbp uses the default
version 

   conclusions
the existing automated planning technology offers a large  growing set of powerful techniques and efficient domain independent planners  but none of them outperforms all the
others in every planning domain  from a practical perspective  it is then useful to consider
a portfolio based approach to planning that involves several techniques and planners  in
this paper  we have proposed an approach to automatically configuring a portfolio of planners and learned macros for any given domain  that is implemented in the portfolio based
planner pbp  the computed configuration knowledge consists of a promising combination
of basic planners in the portfolio  each one with a  possibly empty  set of useful macros 
and some scheduling information for specializing their execution at planning time  the
configured portfolio is obtained through an automated statistical analysis about the performance of a set of candidate clusters of planners and relative candidate sets of macros  using
a collection of training problems in the given domain  the planner cluster performance is
computed by simulating the cluster execution using the performance data from the runs of
the individual basic planners  and relative sets of macros  in the portfolio 
the proposed approach to the portfolio planner configuration has been evaluated through
a large experimental analysis  focusing on the ipc    domains  with the aim of demonstrating its high efficiency  understanding the effectiveness of the automatic configuration  and
investigating the importance of the main design choices  several results have been derived
from the various experiments of this analysis  the most important experimental results
indicate that 
 the configured planner portfolios generated by pbp s q perform very well compared
to other state of the art planning systems using learning techniques  and much better
   

fiplanning through automatic portfolio configuration  the pbp approach








than pbp nok  i e   the unconfigured planner portfolio of pbp  which is competitive
with lama  a state of the art domain independent planner  
pbp s q performs much better than the other existing domain independent portfoliobased planners  and often better than other domain optimized planner portfolio approaches 
the computed configuration knowledge is very useful and the selection of the planner
cluster forming the configured portfolio is generally accurate for the given planning
domain 
while macros in a planning domain are not always helpful to a planner for improving
its planning speed or plan quality  pbp s q generally selects helpful sets of macros 
in the context of the proposed approach  the round robin scheduling strategy of the
planner cluster execution is a robust strategy with respect to the execution order of
the cluster planners and their planning time slots  moreover  configuring the planning
time slots is not crucial given the good default technique for deriving them currently
implemented in pbp s q 

besides evaluating the approach of pbp to configuring a planner portfolio with macros 
the experimental analysis corroborates and validates some results  observations or empirical
studies in previous work on other researchers in planning  these include the usefulness or
harmfulness of macros for a set of prominent existing planners  the importance of diversity
of the planning techniques in the construction of an effective planner portfolio  and the
robustness of the round robin scheduling of the execution times in a multi planner system 
while the current version of pbp uses a portfolio formed by a specific set of selected
techniques for plan synthesis  computation of macros and planner parameter tuning  the
architecture of pbp is open in the sense that additional or alternative  current or future 
techniques can be integrated  moreover  although we have chosen the wilcoxon sign rank
test for comparing the candidate planner clusters and macro sets  demonstrating its effectiveness  other methods could be considered 
a limit of the current approach  which affects also other systems relying on knowledge
learned from examples  is that when the training problem set is not representative of the
test problems  e g   most problems are much smaller or easier than the test problems   the
computed portfolio configuration might not be very accurate for these problems  knowing
at configuration time enough information characterizing the test problems can obviously
be very useful for generating representative training problem sets  for planning with pbp 
we experimentally observed that  when the minimum maximum number of objects involved
in test problems is known  randomly generated training problem sets under these object
bounds are sufficiently representative for an effective configuration of pbp 
we think that in future work it will be important to study and incorporate into pbp
additional methods supporting the problem based configuration of the portfolio planner 
such methods could refine the current domain based configuration so that problems with
different size or heuristically estimated hardness can have different  specialized configured
portfolios  moreover  it will also be important to extend pbp q so that plan quality is
measured in terms of plan action costs rather than number of plan actions 
other directions for further research are investigating the use of pbp s q for optimal
planning and for metric temporal domains  fox   long         and extending the portfolios
   

figerevini  saetti    vallati

with additional automatically extracted domain specific knowledge  such as entanglements
 vallati et al       a   finally  we intend to investigate the idea of making pbp fully domainindependent by computing many portfolio configurations  planner clusters  for different
known domains  and using a classifier to match a new domain with the most promising
stored configuration in terms of expected performance for the new domain  a similar idea
was successfully developed for sat  e g   xu et al         

acknowledgments
many ideas  techniques  and systems investigated in the paper use or build on important
previous work in planning and portfolio design  without which our research would have
not been possible  we thank all authors of such work  and in particular the authors of
the planning systems and macro generators incorporated in pbp  a special thank to mark
roberts and adele howe for clarifications on the configuration of their planner portfolio 
to beniamino galvani for his help with the implementation of part of a preliminary version
of pbp s  and to the ipc  organizers for letting us use the competition machine in one
of the experiments conducted after the the competition  we would also like to thank the
organizers of ipc  and ipc  for having developed and made available a large collection of
useful benchmark domains  problems and some software tools that we used in our analysis 
finally  we thank the anonymous reviewers and the associate editor for their very helpful
and detailed comments 

references
arfaee  s   j   zilles  s     holte  r   c          bootstrap learning of heuristic functions 
in proceedings of the third annual symposium on combinatorial search  socs     
pp        aaai press 
backstrom  c     nebel  b          complexity results for sas  planning  computational
intelligence              
botea  a   enzenberger  m   muller  m     schaeffer  j          macro ff  improving ai
planning with automatically learned macro operators  journal of artificial intelligence research             
botea  a   muller  m     schaeffer  j       a   fast planning with iterative macros  in
proceedings of the twentieth international joint conference on artificial intelligence
ijcai     pp            aaai press 
botea  a   muller  m     schaeffer  j       b   learning partial order macros from solutions 
in proceedings of the fifteenth international conference on automated planning and
scheduling  icaps      pp          aaai press 
brendel  m     schoenauer  m          instance based parameter tuning for evolutionary ai planning  in proceedings of the thirteenth annual genetic and evolutionary
computation conference  gecco      pp          acm 
cenamor  i   de la rosa  t     fernandez  f          learning predictive models to configure planning portfolios  in proceedings of the icaps    workshop on planning and
learning 
   

fiplanning through automatic portfolio configuration  the pbp approach

chen  y   hsu  c     wah  b          temporal planning using subgoal partitioning and
resolution in sgplan  journal of artificial intelligence research             
chrpa  l     bartak  r          reformulating planning problems by eliminating unpromising actions  in proceedings of the eighth symposium on abstraction  reformulation 
and approximation   sara      pp        aaai press 
chrpa  l     mccluskey  t   l          on exploiting structures of classical planning problems  generalizing entanglements  in proceedings of the twentieth european conference on artificial intelligence  ecai      pp          ios press 
chrpa  l   mccluskey  t     osborne  h          reformulating planning problems  a
theoretical point of view  in proceedings of the twenty fifth international florida
artificial intelligence research society conference  flairs      pp        aaai
press 
coles  a     coles  a          lprpg p  relaxed plan heuristics for planning with preferences  in proceedings of the twenty first international conference on automated
planning and scheduling  icaps      pp        aaai press 
coles  a   coles  a   olaya  a   celorrio  s   lopez  c   sanner  s     yoon  s          a
survey of the seventh international planning competition  ai magazine         
coles  a     smith  k   a          marvin  a heuristic search planner with online macroaction learning  journal of artificial intelligence research             
cormen  t  h   stein  c   rivest  r  l     leiserson  c  e          introduction to algorithms
  rd edition   mcgraw hill 
fawcett  c   helmert  m   hoos  h   karpas  e   roger  g     seipp  j          fd autotune 
domain specific configuration using fast downward  in proceedings of the icaps   
workshop on planning and learning 
fawcett  c   vallati  m   hutter  f   hoffmann  j   hoos  h   h     leyton brown  k         
improved features for runtime prediction of domain independent planners  in proceedings of the   th international conference on automated planning and scheduling
 icaps   pp          aaai press 
fern  a   khardon  r     tadepalli  p          the first learning track of the international
planning competition  machine learning                
fox  m     long  d          pddl     an extension to pddl for expressing temporal
planning domains  journal of artificial intelligence research            
gerevini  a   haslum  p   long  d   saetti  a     dimopoulos  y          deterministic
planning in the fifth international planning competition  pddl  and experimental
evaluation of the planners  artificial intelligence                    
gerevini  a   saetti  a     serina  i          planning through stochastic local search and
temporal action graphs  journal of artificial intelligence research             
gerevini  a   saetti  a     serina  i          an approach to temporal planning and scheduling in domains with predictable exogenous events  journal of artificial intelligence
research             
   

figerevini  saetti    vallati

gerevini  a   saetti  a     vallati  m          an automatically configurable portfolio based
planner with macro actions  pbp  in proceedings of the nineteenth international
conference on automated planning   scheduling  icaps      pp          aaai
press 
gibbons  j     chakraborti  s          nonparametric statistical inference  fourth edition 
revised and expanded  statistics  a series of textbooks and monographs  crc press 
gomes  c   p     selman  b          algorithm portfolios  artificial intelligence            
     
helmert  m          the fast downward planning system  journal of artificial intelligence
research             
helmert  m   roger  g     karpas  e          fast downward stone soup  a baseline for
building planner portfolios  in proceedings of the icaps    workshop of planning
and learning 
hoffmann  j          the metric ff planning system  translating ignoring delete lists
to numeric state variables  journal of artificial intelligence research             
hoffmann  j     nebel  b          the ff planning system  fast plan generation through
heuristic search  journal of artificial intelligence research             
howe  a   dahlman  e   hansen  c   vonmayrhauser  a     scheetz  m          exploiting
competitive planner performance  in proceedings of the fifth european conference
on planning  ecp      pp        springer 
howey  r   long  d     fox  m          val  automatic plan validation  continuous effects
and mixed initiative planning using pddl  in proceedings of the sixteenth ieee
international conference on tools with artificial intelligence  ictai      pp     
     ieee 
hutter  f   hoos  h   h     stutzle  t          automatic algorithm configuration based on
local search  in proceedings of the twenty second national conference on artificial
intelligence  aaai      pp            aaai press 
hutter  f   hoos  h  h   leyton brown  k     stutzle  t          paramils  an automatic
algorithm configuration framework  journal of artificial intelligence research     
       
jimenez  s   c   coles  a     coles  a          seventh international planning competition
ipc   learning part  in http   www plg inf uc m es ipc     learning 
kautz  h   a     selman  b          unifying sat based and graph based planning  in
proceedings of the sixteenth international joint conferences on artificial intelligence
 ijcai      pp          aaai press 
long  d     fox  m          the third international planning competition  results and
analysis  journal of artificial intelligence research          
marquardt  d   w     snee  d          ridge regression in practice  the american statistician             
   

fiplanning through automatic portfolio configuration  the pbp approach

matos  p   planes  j   letombe  f     marques silva  j          a max sat algorithm
portfolio  in proceedings of the eighteenth european conference on artificial intelligence  ecai      pp          ios press 
mccluskey  t   l     porteous  j   m          engineering and compiling planning domain
models to promote validity and efficiency  artificial intelligence              
newton  m   levine  j   fox  m     long  d          learning macro actions for arbitrary
planners and domains  in proceedings of the seventeenth international conference on
automated planning   scheduling  icaps      pp          aaai press 
pulina  l     tacchella  a          a multi engine solver for quantified boolean formulas 
in proceedings of the thirteenth international conference on principles and practice
of constraint programming  cp      pp          springer 
rice  j  r          the algorithm selection problem  advances in computers            
richter  s     westphal  m          the lama planner  guiding cost based anytime
planning with landmarks  journal of artificial intelligence research             
roberts  m     howe  a          directing a portfolio with learning  in proceedings of the
aaai      workshop on learning for search  pp         
roberts  m     howe  a          learned models of performance for many planners  in
proceedings of the icaps    workshop of ai planning and learning 
roberts  m     howe  a          learning from planner performance  artificial intelligence 
                  
roberts  m     howe  a          personal communication  december    
roberts  m   howe  a   e   wilson  b     desjardins  m          what makes planners
predictable   in proceedings of the eighteenth international conference on automated
planning and scheduling  icaps      pp          aaai press 
seipp  j   braun  m   garimort  j     helmert  m          learning portfolios of automatically tuned planners  in proceedings of the twenty second international conference
on automated planning   scheduling  icaps      pp          aaai press 
shaffer  j   p          multiple hypothesis testing  annual review of psych             
simon  h     kadane  j          optimal problem solving search  all or none solutions 
artificial intelligence            
vallati  m   chrpa  l     kitchin  d       a   an automatic algorithm selection approach
for planning  in ieee international conference on tools with artificial intelligence
 ictai   pp      ieee 
vallati  m   fawcett  c   gerevini  a   hoos  h     saetti  a       b   automatic generation of efficient domain optimized planners from generic parametrized planners  in
proceedings of the  th annual symposium on combinatorial search  socs      pp 
        aaai press 
vidal  v          a lookahead strategy for heuristic search planning  in proceedings of the
fourteenth international conference on automated planning and scheduling  icaps     pp          aaai press 
   

figerevini  saetti    vallati

wilcoxon  f     wilcox  r   a          some rapid approximate statistical procedures 
american cyanamid co   pearl river  n y 
witten  i   h     frank  e          data mining  practical machine learning tools and
techniques  morgan kaufmann  san francisco 
xu  l   hutter  f   hoos  h   h     leyton brown  k          satzilla  portfolio based
algorithm selection for sat  journal of artificial intelligence research             
yoon  s   fern  a     givan  r          learning control knowledge for forward search
planning  journal of machine learning research            

   

fi