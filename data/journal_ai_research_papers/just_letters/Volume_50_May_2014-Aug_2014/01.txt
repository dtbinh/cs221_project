journal of artificial intelligence research                

submitted        published      

knowledge forgetting in answer set programming
yisong wang

csc   yswang   gzu   edu   cn

department of computer science 
guizhou university  guiyang  china

yan zhang
yi zhou

yan   scem   uws   edu   au
yzhou   scem   uws   edu   au

artificial intelligence research group 
university of western sydney  australia

mingyi zhang

zhangmingyi      gmail   com

guizhou academy of sciences  guiyang  china

abstract
the ability of discarding or hiding irrelevant information has been recognized as an important
feature for knowledge based systems  including answer set programming  the notion of strong
equivalence in answer set programming plays an important role for different problems as it gives
rise to a substitution principle and amounts to knowledge equivalence of logic programs  in this
paper  we uniformly propose a semantic knowledge forgetting  called ht  and flp forgetting  for
logic programs under stable model and flp stable model semantics  respectively  our proposed
knowledge forgetting discards exactly the knowledge of a logic program which is relevant to forgotten variables  thus it preserves strong equivalence in the sense that strongly equivalent logic
programs will remain strongly equivalent after forgetting the same variables  we show that this
semantic forgetting result is always expressible  and we prove a representation theorem stating that
the ht  and flp forgetting can be precisely characterized by zhang zhous four forgetting postulates under the ht  and flp model semantics  respectively  we also reveal underlying connections
between the proposed forgetting and the forgetting of propositional logic  and provide complexity
results for decision problems in relation to the forgetting  an application of the proposed forgetting
is also considered in a conflict solving scenario 

   introduction
motivated by lin and reiters seminal work  lin   reiter         the notion of forgetting in propositional and first order logics  distilling from a knowledge base only the part that is relevant to
a subset of the alphabet  has attracted extensive interests in the kr community   e g   see lang
  marquis        zhou   zhang         in recent years  researchers have developed forgetting
notions and theories in other non classical logic systems from various perspectives  such as forgetting in description logics  kontchakov  wolter    zakharyaschev        wang  wang  topor   
pan        lutz   wolter        packer  gibbins    jennings         forgetting in logic programs
 zhang   foo        eiter   wang        wong        wang  wang    zhang         and forgetting in modal logic  zhang   zhou        su  sattar  lv    zhang        van ditmarsch  herzig 
lang    marquis        liu   wen         as a logical notion  forgetting has also been studied
under some different terms such as variable elimination  lang  liberatore    marquis         irrelevance  independence  irredundancy  novelty  or separability  bobrow  subramanian  greiner   
c
    
ai access foundation  all rights reserved 

fiwang   z hang   z hou     z hang

pearl         it has been shown that in the study of modeling agents behaviors  forgetting plays an
important role in conflict resolution  zhang   foo        lang   marquis        
in propositional logic  the result of forgetting an atom p from a formula   written forget    p   
is the formula  p     p     where  p   and  p    is the formula obtained from  by replacing each occurrence of atom p with   false  and    true  respectively  forgetting a set of atoms
from a formula  is defined as forget   v   p     forget forget    p    v    lin         it is
easy to see that the forgetting preserves logical equivalence  that is  logically equivalent formulas
 theories  will remain logically equivalent after forgetting the same atoms  it is well known that  if
 does not mention any atoms from v then
     iff forget   v       
in this sense the forgetting in propositional logic  called propositional forgetting  is a knowledge
forgetting since forget   v   exactly contains the logical content of  that is irrelevant to v  
for logic programs under stable model answer set semantics  gelfond   lifschitz         the issue of logical equivalence is rather complicated due to its different notions of equivalence   weak 
equivalence and strong equivalence  two logic programs   and   are  weakly  equivalent if and
only if   and   have the same stable models    and   are strongly equivalent if and only if
    and     are equivalent for every logic program   it is well known that strong equivalence is an important concept in answer set programming  asp   because it amounts to knowledge
equivalence which captures the logical content of a logic program  osorio   zacarias        osorio
  cuevas        delgrande  schaub  tompits    woltran         and can be used for simplifying
logic programs where two strongly equivalent rules may be interchangeable without affecting the
original logic programs stable models  pearce  tompits    woltran        ferraris  lee    lifschitz        lin   chen        lin   zhou         the strong equivalence can be characterized
in the logic here and there  ht   viz  two logic programs are strongly equivalent if and only if they
have the same ht models  lifschitz  pearce    valverde         for instance  a rule of the following form p  p   has the same ht models as that of    tautology   where  can be an arbitrary
formula  thus it can be safely removed from every logic programs without changing their stable
models 
besides the stable model answer set semantics of logic programs  gelfond   lifschitz        
flp stable model semantics also steadily gains its importance  faber  pfeifer    leone       
truszczynski         the notion of strong equivalence is similarly generalized to logic programs
under flp stable models semantics  two theories   and   are strongly flp equivalent if and only
if     and     have the same flp stable models for every logic program   it is shown that
this strong equivalence can be characterized in terms of flp models  viz  two logic programs are
strongly flp equivalent if and only if they have the same flp models  truszczynski        
when we develop the notion of forgetting in logic programs  preserving strong equivalence is
important  like that the propositional forgetting preserves equivalence of propositional logic  consider that two agents need to achieve an agreement for a certain goal  where each agents knowledge
base is represented by a logic program  suppose that there are two consistent  logic programs  but
their combination is inconsistent  to achieve a consistent combination  one may forget some atoms
from each of the logic programs  so that the combination of their forgetting results is consistent 
then forgetting may be effectively used to solve the conflict between the two agents knowledge
   a logic program is consistent if it has some stable models 

  

fik nowledge f orgetting

in

a nswer s et p rogramming

bases  zhang   foo        eiter   wang        lang   marquis         for the purpose of simplicity  on the other hand  agents may also replace their knowledge bases with strongly equivalent
but syntactically simpler ones 
let us consider a simple yale shooting scenario where the logic program  consisting of the
following rules  
shoot  not aux 

aux  not shoot 

 aux  shoot 

here aux is used to generate possible occurrences of action shoot  one can be interested in which
logic program represents the same knowledge as that of  when the auxiliary atom aux is ignored 
this intuitively results in a logic program   consisting of the rule   
shoot  not not shoot 
which captures exactly the knowledge of  that is irrelevant to aux  we will see that   can be
obtained from  by ht forgetting aux  cf  example   with other atom names   while it cannot be
obtained in terms of previous forgetting approaches in logic programming  cf  example     
it turns out that preserving strong equivalence in forgetting is challenging  there have been
several attempts to define the notion of forgetting in logic programs  but none of these approaches
is fully satisfactory  zhang and foo        first defined syntax oriented weak and strong forgetting
notions for normal logic programs  but these forgetting notions preserve neither  weak  equivalence
nor strong equivalence  eiter and wang        then proposed a semantic forgetting for consistent
disjunctive logic programs  which preserves equivalence but not strong equivalence  they specifically indicated the importance of preserving strong equivalence in logic programming forgetting
and raised this issue as a future work  wong        proposed two forgetting operators for disjunctive logic programs  although the two operators indeed preserve strong equivalence  it may lose the
intuition of weakening under various circumstances  see section   for details   a recently proposed
forgetting for logic programs may introduce extra knowledge  cf   see wang et al         ex     
thus it is not a knowledge forgetting 
together with preserving strong equivalence  expressiveness is another desired criterion for
logic programming forgetting  ideally we would expect that the result of forgetting some atoms
from a logic program is still expressible by a logic program  this is particularly necessary when we
view agents knowledge bases as logic programs and forgetting is employed as a means of conflict
solving among these agents knowledge bases  zhang   foo         while previous logic programming forgetting approaches all meet this criterion  as we will see in this paper  once we consider
forgetting in arbitrary logic programs  retaining expressibility is challenging objective to achieve for
a semantic forgetting notion 
finally  we believe that as a way of weakening  knowledge forgetting in logic programs should
obey some common intuitions shared by forgetting in classical logics  for instance  forgetting
something from a logic program should lead to a weaker program in certain sense  on the other
hand  such weakening should only be associated to the relevant information that has been forgotten 
for this purpose  zhang and zhou        proposed four forgetting postulates to formalize these
common intuitions and showed that forgetting in propositional logic and modal logic s  can be
precisely captured by these postulates  surprisingly  none of previous forgetting notions in logic
   this is due to one of the anonymous reviewers 
   the rule is strongly equivalent to the choice rule   shoot   but it is not a normal rule 

  

fiwang   z hang   z hou     z hang

programs actually satisfies zhang zhous postulates  in this sense these previous forgetting notions
for logic programs are not knowledge forgetting operators 
in summary  we consider the following criteria that a knowledge forgetting notion in logic programs should meet 
 expressibility  the result of forgetting in an arbitrary logic program should also be expressible via a logic program 
 preserving strong equivalence  two strongly equivalent logic programs should remain strongly
equivalent after forgetting the same variables 
 satisfying common intuitions of forgetting  preferably  forgetting in logic programs should
be semantically characterized by zhang zhous four forgetting postulates 
in this paper we present a comprehensive study on knowledge forgetting in the context of arbitrary logic programs  propositional theories  under stable model and flp stable models semantics 
called ht  and flp forgetting respectively  we show that the ht  and flp forgetting meet all above
criteria  and hence have primary advantages when compared to previous logic program forgetting
notions 
the main contributions of the paper may be summarized as follows  where     ht  flp   
  as a starting point  we investigate the model theoretical characterization for strong equivalence of logic programs under stable model and flp stable model semantics  and explore their
strong equivalence by the equivalence in propositional logic 
  we propose a semantic   forgetting for logic programs under   stable model semantics respectively  here ht stable model means stable model  the   forgetting result is always
expressible via a logic program and it preserves strong equivalence under stable model and
flp stable model semantics 
  we investigate semantic properties of the   forgetting  and show that the   forgetting satisfies
zhang zhous four postulates under the   model respectively  in particular  the forgetting
result consists of the logical content that is irrelevant to forgotten atoms 
  we establish the underlying connections between   forgetting and propositional forgetting 
based on which we provide complexity results for some decision problems in relation to  forgetting  in particular  we show that resulting checking  deciding if a logic program is a
result of   forgetting a set of atoms from a logic program  is p   complete  while the related
inference problem in terms of   forgetting varies from co np complete to p   complete 
the theoretical negative results confirm that it is not a easy task to simplify logic programs
by forgetting  but fortunately  this kind of simplification can be computed offline in general 
for instance  a problem domain description involves a lot of auxiliary propositional variables 
one can firstly simplify the description by forgetting  part of  the auxiliary propositional
variables  like a kind of compilation  lang et al         
  finally we consider an application of knowledge forgetting in the solving of conflicts in the
context of logic programming 
  

fik nowledge f orgetting

in

a nswer s et p rogramming

the rest of the paper is organized as follows  section   briefly reviews necessary concepts and
notions of answer set programming  section   presents the characterizations for strong equivalence
of logic programs  we firstly present a uniform definition of the knowledge forgetting for logic
programs in section    and then explore their expressibility  forgetting postulates  relationship with
propositional forgetting  computational complexity and an application of knowledge forgetting in
conflict solving  section   discusses other forgetting approaches in logic programs  and finally 
section   concludes the paper with some remarks  all the proofs in the paper are deferred to
appendix for clarity 
this paper is the revised and extended version of a paper which appeared in proceedings of kr
      wang  zhang  zhou    zhang        

   answer set programming
in this section we briefly recall the basic notions of logic programming under stable model semantics  including its syntax  reduction  stable model  ferraris        and flp stable models  truszczynski        and strong equivalence  lifschitz et al         truszczynski         in the paper a stable
model is called an ht stable model for convenience  and we assume     ht   flp   
we assume a propositional language la over the finite set a of propositional atoms  which is
called the signature of the language la  
    syntax
the formulas of la are built from the signature  a and the   place connective   false  using
the binary connectives    and  as follows 
        p               

   

where p  a     true  is the shorthand of      for     and    for         
   a theory is a set of formulas 
an interpretation is a set i of atoms from a  where each atom of a is viewed to be true if it is in
i  and false otherwise  in propositional logic  the notions of model and satisfaction relation    are
defined as usual  in the following we denote a   x by x for x  a  mod   for  m  m      
  m  where
   for mod     mod    i e   is equivalent to   and m for  i  a i 
a
m      a formula  is irrelevant to a set v of atoms  written ir   v    if there exists a formula
 mentioning no atoms from v such that    
for convenience 
we
w
v also define the following notations  let s be a finite set of formulas 
w
we denote sv resp 
s  the disjunction  resp  conjunction  of all formulas in s  where 
denotes  and  denotes    and  s  the cardinality of s  similarly by s  resp  s  we mean
      s   resp        s   
    reduct and stable models
let  be a formula and x  a  the   reduct of  w r t  x  written red     x   is recursively and
uniformly defined as follows 
   in the rest of this paper  whenever there is no confusion  we may not explicitly mention the signature when we talk
about formulas of la  

  

fiwang   z hang   z hou     z hang

   r   red     x     
   r   red   p  x    p if x    p  and  otherwise 
   r   red          x    red       x   red       x  if x         where         and
 otherwise 
 ht r   redht         x    redht      x   redht      x  if x           and  otherwise 

    redflp      x   if x          
 flp r   redflp         x   
  
if x        

 
otherwise  i e  x            

definition   a set x  a is a   stable model of a formula  if x is a minimal  under set inclusion 
model of red     x   we denote the set of   stable models of  by sm      
please note that  traditionally  the ht reduct is named reduct  red ht    x  is written as x  
ht stable model is called stable model  ferraris         and redflp    x  is written as x 
 truszczynski        
it is known that  ht stable models and flp stable models are not comparable in the sense that
some ht stable models are not flp stable models  and some flp stable models are not ht stable
models  cf   see truszczynski        exs          and    
example   let us consider the following formulas 
 let    p  p  p  we have that
redht         redht     p       redflp         redht     p    p 
thus sm ht        while sm flp        p   
 let     p  p and     p  p  we have the following 
redht  i        and redht  i    p    p  for i        
redflp            red flp       p    p  redflp            redflp       p      
thus  while sm flp       

sm ht     

      p    sm flp           

definition   two formulas   and   are   sm  equivalent  under   stable model semantics   written    sm     iff they have the same   stable models 
here the notion of ht sm  equivalence is indeed the notion of equivalence in logic programs
under stable model semantics  cf   see lifschitz et al         thm     
  

fik nowledge f orgetting

in

a nswer s et p rogramming

    strong equivalence and knowledge of logic programs
unlike the equivalence in propositional logic  the equivalence of logic programs does not allow
equivalent replacement i e       and     may have different stable models  even though  
and   are equivalent 
example   let     p  q and     p  p  as sm          sm                and   are
  sm equivalent  however  p    has a   stable model  p  q  while the unique   stable model of
p    is  p   thus it does not allow replacing   by   in p      it also indicates that   has
different knowledge from   under the   stable model semantics 
this motivates the notion of strong equivalence 
definition   two formulas   and   are strongly   equivalent  under   stable model semantics 
iff      sm     for every formula   in the case   and   are strongly   equivalent  they
are   knowledge equivalent 
it is known that the notion of strong   equivalence can be captured in terms of   models  where
a   interpretation is a pair hx  y i such that x  y  a  the   satisfiability  thus   models  
denoted by       is recursively defined as follows 
   s   hx  y i       
   s   hx  y i     p if p  x 
   s   hx  y i          if hx  y i       or hx  y i        
   s   hx  y i          if hx  y i       and hx  y i        
 ht s   hx  y i   ht      if y           and hx  y i   ht   implies hx  y i   ht    
 flp s   hx  y i   flp      if y           and y       or x       or hx  y i   flp    
by mod     we denote the set of all   models of formula   please note here that    can be
either ht or flp   in particular  modht     resp  modflp     denotes the set of all ht models  resp 
flp models  of   for the formulas   and   in example    one can check that none of h   p i 
h p    p i or h p    p  q i is a   model of     while every   interpretation is a   model of    
definition   a formula  is a logical   consequence of a formula   written        iff mod     
mod      two formulas  and  are   equivalent  under   model semantics   written      iff
mod       mod     
in the following proposition  item  i  is proved by lifschitz  tang  and turner  cf   see lifschitz
et al          iii  of prop     
proposition   let a  b  c  d be set of atoms  we have the following
v
w
v
w
 i   a  b    d  c  ht  a  b  c   d 
v
w
v
w
 ii   a  b    d  c    flp  a  b  c   d 
  

fiwang   z hang   z hou     z hang

please note here that the inverse of  ii  does not generally hold  for instance  p  p flp  
while h   p i    flp p  p 
given two formulas   and     it is known that   and   are strongly ht equivalent under
ht  stable model semantics if and only if they are ht  equivalent  viz     ht       and   are
strongly flp  equivalent under flp  stable model semantics if and only if they are flp  equivalent 
viz    flp    cf   see truszczynski        thm      it is commonly recognized that strong
equivalence amounts to knowledge equivalence of formulas  that is  strong   equivalence captures
the logical content of a formula under   stable model semantics  osorio   zacarias        osorio
  cuevas        delgrande et al          now we formally define the knowledge of logic programs 
definition   the   knowledge of a formula  under   stable model semantics  written cn     
consists of the logical   consequence of   viz  cn                  
the   knowledge of a formula stands for the   logical content of the formula  for instance 
cnht       cnht  p  p   cnht  p  q  
recall that  under   model semantics  every formula can be transformed into a conjunction of
formulas in the following normal form 
 
 
 b  c    a  d 
   
where a  b  c  d are sets of atoms  cf   for     ht  see cabalar   ferraris        thm    
truszczynski        thm    for     flp    that is  for every formula   there is a conjunction
of formulas in the form     which is strongly   equivalent to  
a formula of the form     is called a rule  which is also generally written as
a            al   not d            not dn  b            bk   not c            not cm

   

where a    ai     i  l   b    bi     i  k   c    ci     i  m  and d    di     i  n  
a logic program is a finite set of rules  let r be a rule of the form      it is said to be
 disjunctive if d    
 positive if c   d    
 normal if  a     and d     and
 horn if  a     and c   d    
a logic program is disjunctive  resp  positive  normal  and horn  iff it consists of disjunctive
 resp  positive  normal  horn  rules  a logic program is   consistent  under   stable model semantics  if it has at least one   stable model 
it is known that every logic program has the same ht models and flp models  cf   see truszczynski        prop     
proposition   every logic program has the same ht  and

flp models 

   characterizations of knowledge equivalence
in the section  from the perspective of   models  we consider the characterization for knowledge
equivalence of various logic programs firstly  and relate the knowledge equivalence to the equivalence of propositional logic secondly 
  

fik nowledge f orgetting

in

a nswer s et p rogramming

    model theoretical characterization
we firstly recall some basic properties of the   satisfiability  ferraris   lifschitz        ferraris 
      truszczynski        
proposition   let  be a formula and x  y  a 
 i  if hx  y i      then hy  y i       i e   y      
 ii  hx  y i      iff y     
 iii  hx  y i      iff x    red     y   
a collection m of   interpretations is   expressible whenever there exists a formula  such that
mod       m  a collection m of   interpretations may be not   expressible  for instance  there
is no formula whose   models are the ones in m    h   p i   the reason is that if there is a
formula  such that mod       m then we have h p    p i      by  i  of proposition    this
requires h p    p i belonging to mod      a contradiction 
given a formula  and x  y  a  hx  y i is a   countermodel of  if hx  y i       and
hy  y i       hy  y i is a   countermodel of  if hy  y i        let x  y  a  we define the
following formulas 
 
 x  y      y   x    y   x   
 
 
flp  x  y      x  y     x  y   
 
 y  y      y  y     
 
 
 x  y      x  y     y   x  
ht  x  y    

 

   
   
   
   

here    x  y   and  y  y   is to capture the   countermodel hx  y i and hy  y i respectively 
the following lemma shows that the   countermodel can be captured by a formula  cf   for
    ht  see cabalar   ferraris        prop     truszczynski        props    and   for     flp   
lemma   let x  y  a and u  v  a 
 i  hu  v i is a   countermodel of    x  y   iff u   x and v   y  
 ii  hu  v i is a   countermodel of  y  y   iff v   y  
proposition   a collection m of   interpretations is   expressible iff
hx  y i  m implies hy  y i  m 
actually  if m satisfy condition     then the following logic program
        x  y   hx  y i 
  m and hy  y i  m     y  y   hy  y i 
  m 
captures m in the sense that mod         m 
  

   

fiwang   z hang   z hou     z hang

note that wong        presented a model theoretical characterization for the ht models of
disjunctive logic programs  cf   see wong        thm        formally speaking  a collection m of
ht interpretations is disjunctively ht expressible  i e   there is a disjunctive logic program  such
that modht      m  iff the condition     and the following one hold 
if hx  y i  m  y  y   and hy     y   i  m then hx  y   i  m 

   

together with proposition    we have
corollary   a collection m of
tions     and     hold 

flp  interpretations

is disjunctively

flp  expressible

iff the condi 

actually  if m satisfies the conditions     and     then the following disjunctive logic program
captures m 
     x  y   hx  y i 
  m and hy  y i  m     y  y   hy  y i 
  m  
lemma
v
w  let a  b bevtwo sets
w of atoms  and x  y  a  hx  y i    
b  a and y    b  a 

v

b 

w

a iff x   

proposition   a set m of   interpretations is positively   expressible  i e   there is a positive logic
program  s t mod       m  iff m satisfies the criteria 
hx  y i  m iff x  y  hx  xi  m and hy  y i  m 

    

as
va matter
w of fact  in the case m satisfies the condition       the positive logic program   
  m  captures m 
  x  x hx  xi 

corollary   two positive logic programs are strongly   equivalent if and only if they are equivalent
in propositional logic 

eiter  fink  tompits  and woltran        have showed that a disjunctive logic program  is
strongly equivalent to a normal logic program if and only if  is closed under here intersection  i e  
for every pair of ht models hx  y i and hx     y i of   hx  x     y i is also an ht model of   cf  
see eiter et al         thms    and     in terms of the characterization of disjunctive logic programs
and proposition    we obtain a   model characterization for normal logic programs as follows 
corollary   a set m of   interpretations is normally   expressible  i e   there is a normal logic
program  such that mod       m  iff m satisfies  in addition to     and      the following
criteria 
if hx  y i  m and hx     y i  m then hx  x     y i  m 
    
proposition   a collection m of   interpretations is horn   expressible  i e   there is a horn logic
program  such that mod       m  iff m satisfies  in addition to       the following criteria 
hx  y i  m and hh  t i  m  hx  h  y  t i  m 
  

    

fik nowledge f orgetting

in

a nswer s et p rogramming

    relating knowledge equivalence to propositional logic
it is proved that strong equivalence of logic programs under stable model semantics can be related
to the equivalence in propositional logic  pearce et al         lin         this holds for the strong
flp equivalence of logic programs as we will show in the following 
firstly  we extend the language la to laa  where a     p   p  a  and p  s are fresh atoms 
for each expression  of la   by   we denote the result obtained from  by replacing each atom p
from a by the corresponding atom p  in a    in the following we denote
 a     p  p    p  a  

    

please note that  for each model m of  a   m has a splitting ma and ma  where ma   m  a
and ma    m  a  and  for every p  ma   the atom p  of a  belongs to ma    for m  a  we
denote by m  the set  p  a p   m   
definition   ht     and flp     are recursively defined as follows 
 t           
 t      p    p 
 t                              where        
 ht t   ht                       ht       ht       
 flp t   flp                              flp       
please note that the translation ht is same to the translation  defined by pearce  tompits  and
woltran         one can verify that ht         ht     while flp          given a
theory  of la   we define                     it is evident that      is in linear size of  
example   let    p  p  p  we have that
ht        p   p     p       p  p  p     p   p   
flp        p   p     p       p  p    p   p     p   p   p 
the unique flp model  over the signature  p   of  is h p    p i  however   has two ht models
h   p i and h p    p i  over the signature  p  p     one can easily check that  ht       a  has
two models  p  p    and  p     while  flp       a  has a unique model  p  p    
v
w
proposition   let     b  c    a  d   where a  b  c  d are subsets of a  then we
have  a     flp     ht    
the following proposition connects the   equivalence with the equivalence in classical propositional logic  cf   for     ht  see pearce et al         lem     
proposition   let  be a formula of la and x  y  a  then hx  y i is a   model of  iff
x  y   is a model of  a          
  

fiwang   z hang   z hou     z hang

the following theorem shows that the strong   equivalence of logic programs under   stable
model semantics can be reduced to the equivalence in propositional logic  cf   for     ht  see
ferraris et al         thm     or lin   zhou            of thm     
theorem   two formulas  and  have the same   models  over a  iff  a        and  a 
       have the same models  over a  a    
based on the theorem  we obtain the following complexity result  cf   for    
tompits    woltran        thms    and     

ht  

see pearce 

proposition    i  the problem of deciding if a formula is   satisfiable is np complete 
 ii  the problem of deciding if two formulas are   equivalent is co np complete 

   knowledge forgetting in logic programs
as mentioned in the introduction  we concentrate on the knowledge forgetting of logic programs
under stable model semantics  it is formally stated as following 
definition    knowledge forgetting  let  be a logic program and v  a  a logic program  is
a result of   knowledge forgetting v from   if and only if  consists of the   knowledge of  that
mentions no atom from v  
we will show that such a knowledge forgetting result always exists and it is unique up to strong
equivalence  cf  theorem    after a semantic   forgetting is defined and explored 
let v  x  y be sets of atoms  the set y is v  bisimilar to x  written y v x  if y  v   x  v  
it intuitively states that the interpretations x and y agree with each other on those atoms not in v  
two   interpretations hh  t i and hx  y i are v  bisimilar  written hh  t i v hx  y i  if h v x
and t v y   now  we are in the position to define the semantic knowledge forgetting in terms of
bisimulation 
definition    semantic knowledge forgetting  let  be a formula and v  a  a formula  is a
result of  semantic    forgetting v from  whenever  for every   interpretation m  
m  mod     iff m    mod     s t m v m    

    

according the definition  one can see that the   models of  can somehow exactly constructed from
those of   this motivates us to define the following notion of extension 
let v  x  y be sets of atoms  the v  extension of x  denoted by xv   is the collection of
interpretations that are v  bisimilar to x  the v  extension of a   interpretation hh  t i  denoted
by hh  t iv   is the collection of   interpretations that are v  similar to hh  t i  for instance  let
hh  t i   h p  q    p  q i and v    q  r   then hh  t iv contains h p    p i  h p    p  q i 
h p    p  q  r i  h p  q  r    p  q  r i and so on  intuitively speaking  the v  extension of an interpretation m is the collection of interpretations formed from m by freely adding or removing some
atoms
sin v   the v  extension of a collection m of     interpretations  written mv   is the collection m v  
in classical propositional logic if m corresponds to a formula   i e  m   mod    then mv
corresponds to a formula whose truth value has nothing to do with the atoms in v   the intended
meaning in the case of   models is similar when mv corresponds to a formula under   model
  

fik nowledge f orgetting

in

a nswer s et p rogramming

semantics that is relevant to only the atoms not in v   in other words  suppose mv   mod     
if hx  y i      then hh  t i      where h  resp  t   is obtained from x  resp  y   by freely
adding or removing any atoms in v whenever h  t   the following lemma shows an equivalent
condition for the semantic   knowledge forgetting 
lemma   let  be a formula and v  a  a formula  is a result of   forgetting v from   iff the
following condition holds 
mod       mod    v  
    
this condition of   forgetting is a generalization of the forgetting in propositional logic  lin  
reiter        in terms of the following corollary 
corollary   a formula  is a result of forgetting a set v of atoms in a formula  iff mod    
mod  v   where mod    refers to classical propositional logic 
a syntactic counterpart of the forgetting in propositional logic is defined as follows  lin       
lang et al         
forget    p      p     p    
forget   v   p     forget forget    p    v  
where  p     resp   p    is the formula obtained from  by replacing every occurrence of the
atom p with    resp    
as   interpretations are related to the given signature a  in what follows  we shall assume that
the signature of a formula theory is implicitly given by the atoms occurring in the formula theory 
unless explicitly stated otherwise  the example below illustrates how   forgetting results can be
computed 
example   let  be the following formula
 p  q    q  p    p      q    
over the signature  p  q   we have mod        h   p  q i  h p  q    p  q i   please note here
that   can be either ht or flp  then from definition    we can verify that mod     p   
 h   q i  h q    q i  p    it corresponds to the formula     p  q      p  q    under
the   model semantics by proposition    as a matter of fact  we have    q     q 
note that forget    p      p      p    q and q    q  it shows that  unlike the
syntactic counterpart of the forgetting in classical propositional logic  the   forgetting results cannot
be computed via  p      p   as mod   q     h   q i  h q    q i   while mod   q   
 h q    q i   over the signature  q   

    expressibility
please note that definition   does not guarantee the existence of the forgetting results  however the
next theorem shows that the   forgetting result always exists  it also implies that the   forgetting
result is unique  up to strong   equivalence  
  

fiwang   z hang   z hou     z hang

theorem    expressibility theorem  let  be a formula and v a set of atoms  there exists a
formula  such that mod       mod    v  
here  the uniqueness up to strong   equivalence of the   forgetting result follows from the fact
that  if a formula    is a result   forgetting v from  as well then mod          mod    v  
mod      which shows that  and    are strongly   equivalent under the   stable model semantics 
based on the expressibility result and by abusing the denotation  we denote the forgetting result
by forget     v   
definition   let  be a formula and v  a  forget     v   is a formula  s t mod      
mod    v   i e   forget     v   is a result of   forgetting v from  
in this sense forget  is an operator which maps a formula and a set of atoms to a formula  according
to definition   and the expressibility theorem  the following corollary easily follows 
corollary   let    be formulas  v   v  and v  be sets of atoms 
 i  forget   forget      v     v      forget   forget      v     v    
 ii  if     then forget     v     forget     v   
it firstly states that   forgetting is independent of the order of forgotten atoms  and secondly  the
  forgetting preserves strong   equivalence of logic programs under   stable model semantics 
to further investigate the properties of the forgetting  we introduce a notion of irrelevance under
  model semantics 
definition    a formula  is   irrelevant to a set v of atoms  denoted as ir     v    if there exists
a formula  mentioning no atoms from v and     
some basic properties on   forgetting are presented below 
proposition    let  and  be two formulas and v a set of atoms 
 i  ir   forget      v    v   
 ii   has a   model iff forget     v   has 
 iii       forget     v   
 iv  if       then forget     v       forget     v   
 v  forget       v     forget     v    forget     v   
 vi  forget       v       forget     v    forget     v   
 vii  forget       v     forget     v     if ir     v   
  

fik nowledge f orgetting

in

a nswer s et p rogramming

intuitively   i  of the proposition says that the   forgetting result is irrelevant to atoms in v  
i e   those forgotten atoms  in this sense  the signature of   forgetting result can be constrained
to a   v   the intended meaning of the others can be easily read out  e g   item  iii  says that this
forgetting is a kind of weakening  while item  v  shows that the forgetting has a distributive property
for disjunction 
as mentioned earlier  disjunctive programs  positive programs  normal logic programs and horn
programs are four types of special cases of  arbitrary  logic programs under our setting  then it is
interesting to consider whether the expressibility result also holds for each of these special programs 
for instance  we would like to know whether the result of   forgetting in a disjunctive  positive 
normal  and horn  logic program is still expressible by a disjunctive  resp  positive  normal  and
horn  logic program 
as indicated by the following two examples  ht  and flp forgetting in disjunctive  positive and
normal logic programs is possibly not expressible in either disjunctive or positive logic programs 
for simplicity  we identify a singleton set    as  when it is clear from its context  and thus we
denote forget      p   as forget     p   and ir      p   as ir     p   and m p  as mp etc  
example   consider the following normal logic program  over signature  p  q  
 p  q    q  p    p  q    
we have that mod        h p    p i  h q    q i  and
mod    p    h  i  h q    q i  p   
here h p    p i p    h  i p    it implies that forget     p    q  q  it can be easily seen that
q  q cannot be expressed as a disjunctive logic program because mod    p does not satisfy     
hence forget     p  cannot be expressed by a normal logic program 
please note that q  q ht q  q  thus q  q is also a result of ht forgetting p from  
however  q  q is not a result of flp forgetting p from  as q  q flp    flp q  q  
example   let  be a positive logic program over signature  p  q  r  as follows 
 p  q  r    p  q  r    p  r  q    q  r  p  
it is not difficult to verify that  over the signature  p  r   mod     q  consists of
h  i  h   p  r i  h p    p i  h p    p  r i  h r    r i  h r    p  r i  h p  r    p  r i 
clearly it does not satisfy the condition      hence it can not captured by a disjunctive logic program  as a matter of fact  we have the following
forget ht    q  ht ht     p    ht     r      r  p  p    p  r  r  
forget flp    q  flp flp     p    flp     r      r  p  r  p    p  p  r  r 
in terms of proposition    interestingly  this example also shows that  though a logic program may
have the same ht models as flp models  its ht forgetting result may be different from its flpforgetting result 

  

fiwang   z hang   z hou     z hang

the ht  and flp forgetting in horn logic programs is of special interest  because unlike disjunctive  positive and normal logic programs  the result of ht  and flp forgetting result in a horn
logic program is always expressible by a horn logic program  as we show below 
theorem    horn expressibility  let  be a horn logic program and v  a  there is a horn
logic program   such that forget     v        
having obtained the model theoretical characterization of the classes of disjunctive and normal
logic programs respectively  we can easily derive a sufficient and necessary condition for ht  and
flp forgetting results to remain in the same class  i e   the result of ht  and flp forgetting a set of
atoms in a disjunctive  resp  normal  logic program is a disjunctive  resp  normal  logic program 
proposition    let  be a disjunctive logic program  v  a  we have that forget     v   is
expressible in disjunctive logic programs if and only if 
hh    t  i       ht    t  i      and t   t   hh    t  i      such that hh    t  i v hh    t  i 
proposition    let  be a normal logic program  v  a  then forget     v   is expressible in
normal logic programs if and only if  in addition to condition       the following condition holds 
hh    t  i       hh    t  i      and t  v t 
 hh    t  i      such that h  v h   h  and  t  v t  or t  v t    

    

    forgetting postulates
zhang and zhou        proposed four forgetting postulates in their work of knowledge forgetting 
and showed that their knowledge forgetting can be precisely characterized by the four postulates 
they further argued that these postulates should be viewed as a general semantic characterization
for knowledge forgetting in other logics  indeed  the classical propositional forgetting can be also
characterized by these postulates  in terms of forgetting in logic programs  as we addressed in the
introduction  imposing these postulates is not feasible for existing approaches  in the following 
we show that   forgetting is exactly captured by these postulates  which we think is one major
advantage over other logic program forgetting approaches 
the notion of forgetting is closely related to that of uniform interpolation property  visser       
goranko   otto         for instance  the forgetting in description logics  lutz   wolter        and
the semantic forgetting in logic programs  gabbay  pearce    valverde         the following
corollary follows from theorem    which actually implies the uniform interpolation property of the
logics under   model semantics  namely  for any formulas  and  with        there exists a
formula  such that              and  contains only the atoms occurring in both  and   the
formula  is called a uniform interpolant of  and   this is stated as 
corollary   let  and  be two formulas  v a set of atoms and ir     v   
     

iff

forget     v        

let  and  be two formulas and v a set of atoms  the following are zhang zhous four
postulates for logic programs under   model semantics 
  

fik nowledge f orgetting

in

a nswer s et p rogramming

 w  weakening        
 pp  positive persistence  if ir     v   and       then       
 np  negative persistence  if ir     v   and        then        
 ir  irrelevance  ir     v   
by specifying    forget     v     w    pp    np  and  ir  are called postulates for knowledge
forgetting in logic programs under   stable model semantics  viz   is a result of   forgetting v
in   based on the uniform interpolation property  cf  corollary     we can show the following
representation theorem 
theorem     representation theorem  let  and  be two formulas and v a set of atoms  then
the following statements are equivalent 
 i     forget     v   
 ii                 and ir       v    
 iii  postulates  w    pp    np  and  ir  hold 
this theorem justifies that the knowledge forgetting  cf  definition    exists and is unique up to
strong equivalence 
an obvious consequence follows from the representation theorem is that
forget     v               and ir     v    
it says that the result of   forgetting v from  consists of the   logical consequence of  that
is   irrelevant to v   for this reason the forgetting is a knowledge forgetting of logic programs
under stable models semantics  as we have mentioned in the introduction that none of the other
forgetting approaches in logic programs is a knowledge forgetting since it does not satisfy some of
the postulates  see section   for details  
one should note that the representation theorem is applicable for the forgetting in classical
propositional logic  viz  forget   v             and ir   v    
    relating to propositional forgetting
it has been shown that strong equivalence of logic programs may be related to the equivalence of
propositional logic  pearce et al         lin         as the   forgetting preserves strong equivalence
of logic programs under   stable model semantics  it is worth exploring further connections between
  forgetting and the forgetting in propositional logic  in this section  we undertake an in depth
investigation on this aspect 
we first provide a direct connection between   forgetting and propositional forgetting via the
following proposition 
proposition    let        be formulas and v  a such that    forget     v   and   
forget   v    then
 i       
  

fiwang   z hang   z hou     z hang

 ii         
the result  i  in proposition    simply says that the result of   forgetting and classical propositional forgetting are equivalent in classical propositional logic  thus the forgetting in classic propositional logic can be computed by a   forgetting in logic programs  however as we have seen in
example    forget     v   is possibly not   equivalent to forget   v    the reverse of  ii  does not
hold generally  for instance  forget   p  q    p  while forget p  q   p  and evidently
p      p  from this result and theorem    we immediately have the following corollary 
corollary    let  be a horn logic program and v a set of atoms  then forget   v   is expressible by a horn logic program 
the following result states that  for horn logic programs    forgetting and the forgetting of
propositional logic are strongly   equivalent  thus it provides a method of computing   forgetting
results of horn logic programs through the propositional forgetting 
proposition    let  and   be two horn logic programs  and v a set of atoms such that   
forget   v    then     forget     v   
the following proposition states that the   forgetting of double negative formulas is closely
connected with the classical propositional forgetting  which will be used to prove some complexity
results later 
proposition    let  and  be two formulas and v a set of atoms 
 i    forget   v   iff    forget     v   
 ii  forget   v    forget   v   iff forget     v     forget     v   
as it is known that the strong equivalence of logic programs is closed related to the equivalence
in propositional logic by translating logic programs into propositional theories  pearce et al        
lin         this motivates us to investigate the connection between the forgettings in the view of
the translations  now our main result of this section is stated as follows 
theorem       forgetting vs propositional forgetting  let  and  be two formulas of la and
v  a  then
   forget     v   iff  a           forget  a           v  v     
by theorem     we know that to check whether a formula  is a result of   forgetting a set
v of atoms from a formula   it is equivalent to check whether      is classically equivalent
to forget  a           v  v     under the theory  a   the following example shows an
application of this theorem 
example    example   continued  recall that  is the following formula 
 p  q    q  p    p  q   
  

fik nowledge f orgetting

in

a nswer s et p rogramming

and forget     p    q  q  over the signature  p  q    a     p  p      q  q     and  the
program translation yields 
       p   q    p   q       q    p    q    p      p   q     
now we have that forget        a    p  p     is equivalent to 
 q  q       q  q     

i e 

 q    q    q  q    

which is equivalent to q    q under the theory   q      q  q      one can further check that
   q  q    q    q  q  q    q  under the theory   q     thus the formula q  q is a result
of   forgetting p from  by theorem    

the following example further shows that  a  occurring in forget           a   v  v    
is necessary for theorem    
example    continued from example    recall that a    p  q  r    a     p  p    q  q     r 
r     and  consists of
 p  q  r    p  q  r    p  r  q    q  r  p  
we have that 
ht        
 a              
flp      p  q  r    p  q  p   q    r    p  r  p   r    q    q  r  q    r    p   
where     p   q    r       p   r    q       q    r    p    
one can check that
forget ht      q  q         
 a     forget flp      q  q         
recall that the formula      r  p  p    p  r  r  is a result of ht forgetting q from  
and      r  p  r  p    p  p  r  r  is a result of flp forgetting q from   we have
that
ht            r  r    p  p  p      p  p   r  r  r     
flp            r  r    p  r  p      p  p   p  r  r     
under the theory  a   we have
 a     ht        p   p  r       r    r  p    
 a     ht        p   p  r       r    r  p    
one can verify further that the model  p    of  a  is not a model of ht       nor it is a model of
flp       i e   a      ht         and  a      flp          actually  we have that 
 a     forget          a    q  q         p   r       p  r    p   r      
one can check further that
 a      p   p  r       r    r  p       p   r       p  r    p   r      
which shows that    resp      is a result of ht forgetting  resp 
  

flp forgetting 

q from  



fiwang   z hang   z hou     z hang

the following result states that we can reduce checking whether the   forgetting results of two
formulas are strongly   equivalent to checking whether the propositional forgetting results of corresponding two formulas are equivalent 
proposition    let  and  be two formulas of la and v a set of atoms  then forget     v    
forget     v   iff the following condition holds 
forget          a   v  v      forget          a   v  v     
    computation and complexity
theorem   and propositions   and    imply a naive approach to compute   forgetting results  formally speaking  given a formula  over a signature a and a set v of atoms  forget     v   can be
computed as follows 
 step    evaluating all   models of   denoted by m 
 step    restrict m to a   v   denoted by m v   i e 
m v    hh   v  t   v i hh  t i  m  
 step    enumerating the following formulas  over the signature a   v   from m v  
    x  y   if hx  y i 
  m v but hy  y i  m v  
  y  y   if hy  y i 
  m v  
 step    finally  conjunct all the constructed formulas  denoted by  
corollary    let   v and  be given as above  then    forget     v   
alternatively  in terms of theorem     we can compute forget     v   by enumerating the  consequences of  that are   irrelevant to v   as there exist sound and complete axiomatic systems
for the ht logic  jongh   hendriks         checking ht consequence relation is axiomatically
doable  though a sound and complete axiomatic system for flp logic is recently unknown  we still
can enumerate all the formulas of form     over the signature a   v and check if they are flpconsequence of   nevertheless  it is also observed that from a computational viewpoint  like the
propositional forgetting  each of the above two approaches would be expensive  this appears to be
inevitable in terms of the following complexity results  unless the complexity hierarchy collapses 
theorem    let  and  be two formulas and v a set of atoms 
 i  the problem of deciding if    forget     v   is co np complete 
 ii  the problem of deciding if forget     v     forget     v   is p   complete 
 iii  the problem of deciding if    forget     v   is p   complete 
  

fik nowledge f orgetting

in

a nswer s et p rogramming

according to our representation theorem  i e  theorem      the result  i  in theorem    means
that checking if  is   irrelevant to v   i e  ir     v    is intractable  the result  ii  of theorem    
on the other hand  presents the complexity of   forgetting equivalence checking  i e   if two formulas
are strongly   equivalent when they are restricted to a common signatures  the last result  iii  of
theorem    states that checking if a formula is a result of   forgetting is generally difficult 
proposition    let  and  be two formulas and v a set of atoms 
 i  the problem of deciding whether      forget     v   is p   complete 
 ii  the problem of deciding whether forget     v        is co np complete 
theorem    and proposition    tell us that for   forgetting  in general the complexity of resulting checking and inference problems is located at the same level of the complexity polynomial
hierarchy as the propositional forgetting 
    conflict solving based on knowledge forgetting
in the following  we consider the application of the proposed forgetting in conflict solving for logic
program contexts  that represent a knowledge system consisting of knowledge bases of multiple
agents 
definition    a logic program context is an n ary tuple                 n   where i is a consistent
logic program   is   conflict free if        n is consistent under   stable model semantics 
definition    let                 n   be a logic program context  a   solution of  is a minimal
subset s of a such that  forget       s           forget   n   s   is   conflict free  where a is the
underlying signature 
it is obvious that  is a   solution of   conflict free logic program context  
we consider the following simplified zhang and foos conflict solving scenario  cf   see zhang
  foo        ex     
example   a couple john and mary are discussing their family investment plan  there are four
different shares sharea  shareb  sharec and shared  where sharea and shareb are of high risk
but also have high return  sharec and shared are of low risk and may be suitable for a long term
investment  johns and marys investment preference over these shares are encoded as the following
logic programs j and m respectively 
j  

m  

r   sa  not sb 

r    sc  

r   sc  not sd 

r    sd  

r   sd  not sc 

r    sb  not sa  not sc 

r     sc  sd 
r      sa  sb 
where s  stands for share   the intuitive meaning of these rules can be easily read out  e g  rule r 
says that john wants to buy sharea if he dont buy shareb  while rules r    r  and r  mean that john
wants to buy sharec or shared  but not both of them 
  

fiwang   z hang   z hou     z hang

as one can see that j  m has no   stable model due to the confliction between rule r  and
r     r     the logic program context     j   m   is not   conflict free 
for s    sd   we have the following
forget ht  j   s  ht  sa  not sb 
forget ht  m   s  ht  sc  

sc  not sc   

sb  not sa  not sc 

 sa  sb  

one can check that forget ht  j   s   forget ht  m   s  has a unique ht stable model  sa  sc  
thus s is an ht solution of   it can be said that john and mary may have an agreement on
their investment plan about shares sharea  shareb and sharec if they agree to give up the belief
 knowledge  about shared  it results in an investment to shares sharea and sharec  but not to
shareb 
one can further check that  under the flp stable model semantics  if john and mary can give up
the belief about shared then it results in the same investment plan to shares sharea and sharec  but
not to share shareb  the reason is that forget flp  j   s forget flp  m   s  has a unique flp stable
model  sa  sc  

   related work
in this section we compare the   forgetting with weak and strong forgetting  zhang   foo        
semantic forgetting  eiter   wang        and the forgetting operators fs and fw  wong        
    weak and strong forgetting
let  be a normal logic program and p a propositional atom  the reduction of  with respect to p 
denoted by red    p    is the normal logic program obtained from  by
    for each rule r of  with p  head r   if there is a rule r   in  such that p  body   r      then
replacing r   with
head r      body r   body r        p  
    if there is such a rule r   in  and it has been replaced by a new rule in the previous step  then
removing the rule r from the remaining normal logic program 
let x be a set of propositional atoms  then the reduction of  with respect to x is inductively
defined as follows 
red        
red   x   p     red red    p    x  
the strong forgetting p in a normal logic program  is the normal logic program sforget    p  
obtained from red    p   by removing each rule r if either r is valid   or p  head r  
body   r   body  r   the weak forgetting p in  is the normal logic program wforget    p  
obtained from red    p   by firstly removing each rule r if either r is valid  or p  head r  
body   r  and then removing not p from the remaining rules 
   a rule r is valid if head r   body   r      or body   r   body  r      

  

fik nowledge f orgetting

in

a nswer s et p rogramming

let x be a set of atoms  the strong  and weak  forgetting x in  is recursively defined as
sforget        

wforget        

sforget   x   p     sforget sforget    p    x  
wforget   x   p     wforget wforget    p    x  
it is known that the two forgetting operators are independent of the ordering of forgotten atoms in
the sense of strong ht equivalence of logic programs under ht stable model semantics  cf   see
zhang   foo        prop     
example    consider the below two normal logic programs 
    p  q 

q  p 

r  not p  

    p  q 

q  p 

r  not q  

one can check that  and  are strongly equivalent  we have that
sforget    p      

wforget    p      r   

sforget    p     wforget    p      r  not q  
the example shows that neither weak forgetting preserves strong equivalence  nor is strong forgetting  one can further verify that      q  r   and       r for     ht  flp    thus
the strong forgetting does not satisfy positive persistence  and the weak forgetting does not satisfy weakening and negative persistence  actually  for ht  and flp forgetting  we have the
following
forget ht    p  ht forget ht    p  ht  q  r    
forget flp    p  flp forget flp    p  flp  q  r    
here  flp  follows from the fact that  ht  and proposition   



    semantic forgetting
having addressed certain issues of weak and strong forgetting  eiter and wang        proposed
a semantic forgetting for consistent disjunctive logic programs  formally speaking  let  be a
consistent disjunctive logic program and p an atom  a set m of atoms is a p stable model of  iff
m is a stable model of  and there is no stable model m  of  such that m     p   m    p   a
disjunctive logic program   represents the result of forgetting about p in   if
   does not mention the atom p  and
 a set m   of atoms is a stable model of   iff  has a p stable model m such that m   p m  
in terms of the above definition  such forgetting results are not unique under strong equivalence 
this means  their forgetting does not preserve strong equivalence  to compute the result of forgetting an atom in a consistent disjunctive logic program  they proposed three algorithms forget   
forget  and forget   eiter   wang         the example below further demonstrates the difference
between this semantic forgetting and the   forgetting 
  

fiwang   z hang   z hou     z hang

example    let     p  q  be a program over signature a    p  q  r   although program  has nothing to do with the atom r  we have that forgeti    r      i             which
seems not intuitive as it loses some information irrelevant to what we want to forget  however
forget     r     

this example also shows that the semantic forgetting does not satisfy positive persistence
postulate as      q  p  which is lost in the semantic forgetting result forgeti    r  for i           
    forgetting operators fs and fw
wong        developed his forgetting for disjunctive logic programs  differently from the work
of zhang and foo         and eiter and wang         wongs forgetting is defined based on the
ht logic  in this sense  his approach probably shares a common logic ground with ht forgetting 
wong also defined two forgetting operators fs and fw   which correspond to two series of program
transformations  see appendix d for the detailed definitions 
the interesting feature of wongs forgetting is that it preserves strong equivalence  however 
a major issue with this forgetting is that  on one hand  the forgetting fs may cause unnecessary
information loss  on the other hand  the forgetting fw may also introduce extra information that
one does not want  as illustrated by the following example 
example    let us consider the normal logic program  consisting of 
a  x 

y  a  not z 

q  not p 

p  not q 

 p  q 

then we have 
fs     a  p   ht  y  x  not z  
fw     a  p   ht  y  x  not z 

 x 

forget ht     a  p   ht  y  x  not z 
forget flp     a  p   flp  y  x  not z 

q   
q  not not q  
q  not not q  

since    ht  q  not not q   which is irrelevant to atoms a and p  it seems to us that forgetting
 a  p  from  should not affect this fact  but fs     a  p      ht  q  not not q   in this sense 
we see that fs has lost some information that we wish to keep  this shows that the operator fs does
not satisfy positive persistence postulate 
on the other hand  from the fact that     ht q but fw     a  p     ht q  it appears that fw may
introduce unnecessary information  which indeed conflicts our intuition of program weakening via
forgetting  i e   it does not satisfy the weakening postulate 

as we mentioned in the introduction  the following example confirms that an expected result
can not be obtained from either one of the above three forgetting approaches 
example     continued from example    for the normal logic program  
 p  q    q  p    p  q    
  

fik nowledge f orgetting

in

a nswer s et p rogramming

we have the following 
sforget    p     forget      p     fs     p      
wforget    p     fw     p      q  
here  the expected logic program that represents the same information of  when the auxiliary atom
p is ignored should be q  q 


   concluding remarks
in this paper two semantic knowledge forgetting approaches  called ht  and flp forgetting respectively  were proposed for logic programs under stable model and flp stable model semantics respectively  these knowledge forgetting results can be captured by the corresponding logical consequence of forgotten logic programs that are irrelevant to forgotten atoms  it consequently preserves
strong equivalence of logic programs under ht  and flp stable model semantics respectively  this
is a major advantage when compared to other existing forgetting approaches in logic programming 
as a starting point  we investigated the model theoretical characterization of logic programs under ht  and flp stable model semantics  and studied their respective strong equivalence problems
using classical propositional logic equivalence  many properties of forgetting have been explored 
such as existence of forgetting results  a representation theorem  and the complexity of some decision problems related to these forgettings  we also considered an application of knowledge forgetting in conflict solving 
although we have presented abstract approaches to computing the forgetting results and we
showed the underlying difficulties of the computation  it is valuable to study practical algorithms
for different subclasses of logic programs  another challenging future work is to extend the knowledge forgetting to other nonmonotonic systems  and in particular first order logic programs  ferraris
et al          as we have mentioned in the introduction that forgetting can be effectively used to
solve some confliction  e g  the strong and weak forgetting  zhang   foo        and the propositional forgetting  lang   marquis         such an application of knowledge forgetting deserves
further studying 
as what we concentrate upon in this paper is knowledge forgetting in logic programs  which is
based on the notion of strong equivalence  an interesting work is to consider forgetting under the
stable model semantics of logic programs along the work  wang et al          last but not least 
logic programs under supported model semantics enjoys some similar properties as that of logic
programs under ht  and flp stable models semantics  truszczynski         we will consider the
knowledge forgetting for logic programs under the supported model semantics in another paper 

acknowledgments
we thank mirek truszczynski for encouraging us to consider knowledge forgetting for logic programs under the flp stable model semantics  we thank the anonymous reviewers for their insightful comments  and robin bianchi for his help on formatting the paper  yisong wang is partially
supported by the national natural science foundation of china grant          and stadholder
foundation of guizhou province under grant          
  

fiwang   z hang   z hou     z hang

appendix a  proofs for section  
proposition   let a  b  c  d be set of atoms  we have the following
v
w
v
w
 i   a  b    d  c  ht  a  b  c   d 
v
w
v
w
 ii   a  b    d  c    flp  a  b  c   d 

v
w
proof 
 ii 
suppose
hx 
y
i
is
an
flp model of  a  b    d  c  but not an flp model
v
w
of  a  b  c   d  it follows that the following conditions hold 
v
v
 a  x     a  b  c   which implies x     a  b  
v
v
v
 b  y     a  b  c   which implies y     a  b   c  and
w
w
 c  hx  y i    flp d  i e  x     d 
w
w
w
the conditions  a  and  b  show that hx  y i   flp  d  c   i e  x    d or y    c 
together with the conditions  b  and  c   a contradiction follows 


appendix b  proofs for section  
proposition   a collection m of   interpretations is   expressible iff
hx  y i  m implies hy  y i  m 

    

actually  if m satisfy condition      then the following logic program
        x  y   hx  y i 
  m and hy  y i  m     y  y   hy  y i 
  m 
captures m in the sense that mod         m 
proof  the direction from left to right follows from  i  of proposition    we prove the other
direction  let   be the propositional theory consisting of  for every x  y  a 
    x  y   if hx  y i 
  m and hy  y i  m  and
  y  y   if hy  y i 
  m 
by lemma    mod         m 



lemma
v
w  let a  b bevtwo sets
w of atoms  and x  y  a  hx  y i    
b  a and y    b  a 

v

b 

w

a iff x   

proof  according to  iii  of proposition   and proposition    it is sufficient to show that  for the
case     ht 
 
 
 
 
 
 
x      b 
a y iff x   
b
a and y   
b
a 

v
w
v
w y
note that y    b  a and x      b y implies x
v    w
v      a    suppose x    
b  a  i e  b  x and a  x     it follows that y    b due to b  y   and then
  

fik nowledge f orgetting

in

a nswer s et p rogramming

w
v
v
v
w
y    a wi e  a  y      thus we have x      b y since   b y   b  by x      a y
i e  x    a  we have x  a      a contradiction 
v
w
v
w
  vwe need only to show
x      b y    a y since y   
b 
a  suppose
w
x   v  b yw and x       a y   the former implies b  x  y   thus x  a     by
x    b  a  the latter implies x   a  y       which means x  a    since x  y   a
contradiction 

proposition   a set m of   interpretations is positively   expressible  i e   there is a positive logic
program  s t mod       m  iff m satisfies the criteria 
hx  y i  m iff x  y  hx  xi  m and hy  y i  m 

    

actually  if m satisfy condition      then the following logic program
 
 
x hx  xi 
  m 
      x 

captures m in the sense that mod         m 

proof  it suffices to prove the case     ht by proposition   
   let  be a positive logic program whose ht models are exact the ones in m  for every
ht interpretation hx  y i  by lemma    hx  y i    ht  iff x  y   x     i e  hx  xi    ht  
and hy  y i   ht  i e  y     since every rule of  is positive  the condition      follows 
   let n    x  a hx  xi  m   we construct the propositional theory  consisting of
 
 
x
x

for every x  n     a   n   
firstly we show
v mod  
w   n   suppose x     and x   n   we have that x  n   it follows
that x      as x  x belongs to   on the
v other hand 
w suppose x  n and x       it
follows that there exists x    n such that x     x    x     i e   x    x and x  x      
from which we have x   x   thus x  n   a contradiction 
secondly we show modht      m  on the one hand  let hx  y i   ht   we have that x    
and y     by lemma    it follows x  y  n   which implies hx  xi  m and hy  y i  m 
thus hx  y i  m by       on the other hand  let hx  y i  m  in terms of       we have
hx  xi  m and hy  y i  m  thus x  n and y  n   i e  x     and y      thus
hx  y i   ht  by lemma   

proposition   a collection m of   interpretations is horn   expressible  i e   there is a horn logic
program  such that mod       m  iff m satisfies  in addition to       the following criteria 
hx  y i  m and hh  t i  m  hx  h  y  t i  m 

    

proof  it suffices to prove the case     ht by proposition   
   suppose  is a horn logic program such that modht      m  by proposition   
modht    satisfies       suppose hx  y i and hh  t i are two ht models of   it follows that
x  y  h and t are models of  by lemma    thus x  h     and y  t      by which
hx  h  y  t i     due to x  h  y  t  
  

fiwang   z hang   z hou     z hang

   let n and  be the ones defined in the proof of proposition    if x  y  n then x  y 
n according to       it follows that there exists a horn logic program  a set of horn clauses  whose
 
models are exactly the
vones inwn   as a matter of fact  the horn program  can be constructed from
 by replacing each x  y with
 
 
x  p            x  pk
    

t
where x  y    and  y     x x  y   and y    n      p            pk   
we firstly show     by proving


 
  
 
 
x
y  x
   
pi 
 ik

v
w
where pi     i  k  are defined in       the direction from right to left is trivial as v x  w y
belongs to v
  let us consider the other direction  suppose h      h is a model of x  y
and h     x  pi for some i     i  k   we have that x  h and h  y      it follows
that h is some element of  y     x x  y   and y    n   and then  p            pk    h  it is a
contradiction 
finally modht        m follows from modht      m and proposition   

v
w
proposition   let     b  c    a  d   where a  b  c  d are subsets of a  then we
have  a     flp     ht    
proof  note that ht  p    p  p  and flp  p    p    we have
ht        

 

 

b

 c  c    

cc

 

a

 

 

 d  d     

dd

 

 
flp        
 b  c  b    c       a  d      

since  a     p  p   p    we have that
 

 a     ht      

 
 
 
 
 
 
d  
 b  c   
a
dd

 

 a     flp      
it completes the proof 

 


 
 b  c     a  d      
 



proposition   let  be a formula of la and x  y  a  hx  y i is a   model of  iff x  y   is
a model of  a          
proof  we prove the case    

flp

by induction on the structures of   let x  y  a 

    p or      it is trivial for      on the other hand  hx  y i   flp p iff x    p iff
x  y      p 
  

fik nowledge f orgetting

in

a nswer s et p rogramming

         where         it follows from the inductive assumption 
           we have flp                              flp        recall that
hx  y i   flp      iff
 y            and 
 either  a  x         or  b  y         or  c  hx  y i   flp    
note that
 y            iff y             iff x  y               and
  a  x       iff x  y            b  y       iff y          iff x  y            and  c 
hx  y i   flp   iff x  y      flp      by the inductive assumption 
it follows that hx  y i   flp      iff x  y      flp         


this completes the proof 

theorem   two formulas  and  have the same   models  over la   iff  a          and
 a          have the same models  over laa    
proof  we prove the case     flp  
   m     a    flp    
iff ma  ma      a    flp    
 

 i   
iff hma   ma
 
flp  by proposition    here ma     p p  ma   

iff hma   ma  i   flp  since  flp 
iff ma  ma      a    flp     by proposition  
iff m     a    flp     
   hx  y i   flp 
iff x  y       a    flp     by proposition    here y      p   p  y  
iff x  y       a    flp     since  a    flp       a    flp    
iff hx  y i   flp  by proposition   



proposition    i  the problem of deciding if a formula is   satisfiable is np complete 
 ii  the problem of deciding if two formulas are   equivalent is co np complete 
proof   i  membership  if a formula  is flp satisfiable then there exists an flp interpretation
hh  t i such that hh  t i   flp   it is feasible to guess such an flp interpretation and check the
condition hh  t i   flp   thus the problem is in np 
hardness  it follows from the fact that  is flp satisfiable iff  is satisfiable  which is nphard  by  ii  of proposition    this shows that the problem is np hard 
 ii  membership  if   flp  then there exists hh  t i such that  either
 a  hh  t i   flp  and hh  t i    flp   or
 b  hh  t i    flp  and hh  t i   flp  
  

fiwang   z hang   z hou     z hang

to guess such an flp interpretation hh  t i and to check the conditions  a  and  b  are feasible in
polynomial time in the size of  and   thus the problem in co np 
hardness  we have that  flp 
iff  has no flp model
iff  has no model by  ii  of proposition  
iff  is valid  which is co np hard  thus the problem is co np hard 


appendix c  proofs for section  
lemma   let  be a formula and v  a  a formula  is a result of   forgetting v from   iff the
following condition holds 
mod       mod    v  
proof   is a result of   knowledge forgetting v from 
iff  for every   interpretation m   m      iff there exists m        s t  m v m  
iff mod        m is an   interpretation   m        and m v m    
iff mod       mod  v  



lemma   let x  y  h  t and v be subsets of a 
 i  if x v h and y v t then x  y v h  t and x  y v h  t  
 ii  if x v h and y   v   t   then h  t   v v   x  y    
proof   i  note that  x  y     v
  x   v     y   v  
  h   v     t   v   due to x v h and y v t
  h  t     v  
thus x  y v t  t   we can similarly prove x  y v h  t  
 ii  please note that y      p   p  y    v      p   p  v   and t      p   p  v    we have that
 h  t        v  v     
   h    v  v        t      v  v     
   h   v     t     v     since h  v      and t    v   
   x   v     y     v     since h v h and t   v   y  
   x    v  v        y      v  v      since x  v      and y    v   
   x  y        v  v     

it follows that h  t   v v   x  y    
theorem    expressibility theorem  let  be a formula and v a set of atoms  there exists a
formula  such that mod       mod    v  
proof  for every hx  y i  mod    v   there exists hh  t i      such that hh  t i v hx  y i 
i e  x v h and y v t   by  i  of proposition    ht  t i       thus hy  y i  mod    v
due to hy  y i v ht  t i  it follows that the collection mod    v satisfies the condition      then
there is a formula  such that mod       mod    v by proposition   

lemma   a formula  is   irrelevant to a set v of atoms iff hh  t i      implies hx  y i     
for every two   interpretations hx  y i and hh  t i with hx  y i v hh  t i
  

fik nowledge f orgetting

in

a nswer s et p rogramming

proof   is   irrelevant to v
iff there exists a formula  mentioning no atoms in v such that    
iff there exists a formula  mentioning no atoms in v s t mod       mod    
iff mod        hx  y i x  y and hh  t i v hx  y i s t hh  t i      
iff hh  t i      implies hx  y i      for every two   interpretations hx  y i and hh  t i such that
hx  y i v hh  t i 

proposition    let  and  be two formulas and v a set of atoms 
 i  ir   forget      v    v   
 ii   has a   model iff forget     v   has 
 iii       forget     v   
 iv  if       then forget     v       forget     v   
 v  forget       v     forget     v    forget     v   
 vi  forget       v       forget     v    forget     v   
 vii  forget       v     forget     v     if ir     v   
proof   i  it immediately follows from lemma   
 ii  it is evident that mod         iff mod    v     by definition   
 iii  it is easy to see that mod      mod    v by definition   
 iv  let        and hh  t i     forget     v    i e  hh  t i  mod    v   in terms of
definition    there exists hh     t   i      such that hh  t i v hh     t   i  it implies that hh     t   i    
 since        thus hh  t i  mod    v   i e  hh  t i     forget     v   
 v  hh  t i     forget       v  
iff hh  t i  mod      v
iff hh     t   i        such that hh  t i v hh     t   i
iff hh     t   i such that hh  t i v hh     t   i and  either hh     t   i      or hh     t   i     
iff hh  t i  mod    v or hh  t i  mod    v
iff hh  t i     forget     v   or hh  t i     forget     v  
iff hh  t i     forget     v    forget     v   
 vi  hh  t i     forget       v  
 hh  t i  mod      v
 hh     t   i        such that hh  t i v hh     t   i
 hh     t   i such that  hh  t i v hh     t   i  hh     t   i      and hh     t   i     
 hh  t i  mod    v and hh  t i  mod    v
 hh  t i     forget     v   and hh  t i     forget     v  
 hh  t i     forget     v    forget     v   
 vii  the direction from left to right follows from  vi  and the fact ir   v    i e  forget     v    
  let us consider the other direction 
hh  t i     forget     v    
 hh  t i     forget     v   and hh  t i     
 hh     t   i      such that hh  t i v hh     t   i  and hh  t i     
  

fiwang   z hang   z hou     z hang

 hh  t i v hh     t   i such that hh     t   i        by ir   v   and lemma  
 hh  t i  mod      v
 hh  t i     forget       v   



theorem    horn expressibility  let  be a horn logic program and v  a  there is a horn
logic program   such that forget     v        
proof  in terms of proposition    it suffices to prove for     ht  let m   modht   v   by
proposition    it is sufficient to show that m satisfies conditions     and      
we first prove that m satisfies      for each ht interpretation hx  y i  m  we have that
x  y   and there exists hh  t i  modht    such that hx  y i v hh  t i  note that  is positive 
which shows that hh  hi and ht  t i are ht models of  by lemma    thus hx  xi  m and
hy  y i  m due to x v h and t v y   on the other hand  suppose hx  xi  m  hy  y i  m
and x  y   there exist two ht models hh     t   i and hh      t    i of  such that hh     t   i v hx  xi
and hh      t    i v hy  y i  by lemma    we have h        t        h        and t         since
models of horn theories are closed under set intersection  alfred         h    h         by
lemma   again  we have hh    h      t    i   ht   by lemma    h    h    v x  y    x   thus
hh    h      t    i v hx  y i  it follows hx  y i  m 
now we show that m satisfies       suppose hx  y i and hh  t i are two ht interpretations
in m  it follows that there are two ht models hx     y   i and hh     t   i of  such that hx     y   i v
hx  y i and hh     t   i v hh  t i  since  is horn  we have that hh    x     t    y   i   ht  by
proposition    by lemma    we have h    x   v h  x and y    t   v y  t   it implies
hh    x     t    y   i v hx  h  y  t i  thus hx  h  y  t i  m 

proposition    let  be a disjunctive logic program  v  a  we have that forget     v   is
expressible in disjunctive logic programs if and only if 
hh    t  i       ht    t  i      and t   t   hh    t  i      such that hh    t  i v hh    t  i 
proof  by proposition    it suffices to prove     ht  let   ht forget ht    v    the direction
from left to right is obvious  we show the other direction 
suppose that   is not expressible in disjunctive logic programs  there exists hx  y i   ht    
y  y   and hy     y   i   ht   such that hx  y   i    ht     it follows that  for each hh    t  i   ht 
and ht    t  i   ht  such that hh    t  i v hx  y i  t  v y   and t   t    there exists no
hh    t  i   ht  such that hh    t  i v hh    t  i  viz  hh    t  i v hx  y   i by hx  y   i v
hh    t  i  a contradiction 

proposition    let  be a normal logic program  v  a  then forget     v   is expressible in
normal logic programs if and only if  in addition to condition       the following condition holds 
hh    t  i       hh    t  i      and t  v t 
 hh    t  i      such that h  v h   h  and  t  v t  or t  v t    

    

proof  by proposition    it suffices to prove     ht  let   ht forget ht    v    the direction
from left to right is easy  we consider the other direction in what follows 
in terms of proposition    and corollary    it is sufficient to show that  for each hx  y i   ht  
and hx     y i   ht     hx  x     y i   ht   according to corollary    suppose that hx  y i and
  

fik nowledge f orgetting

in

a nswer s et p rogramming

hx     y i are two ht models of     there are two ht models hh    t  i and hh    t  i of  such
that hx  y i v hh    t  i and hx     y i v hh    t  i  it follows that t  v t  and  by condition       there exists an ht model hh    t  i of  satisfying either hh    t  i v hh   h    t  i or
hh    t  i v hh   h    t  i  which shows hh    t  i v hx  x     y i  hence hx  x     y i   ht
   

theorem     representation theorem  let  and  be two formulas and v a set of atoms  then
the following statements are equivalent 
 i     forget     v   
 ii                 and ir       v    
 iii  postulates  w    pp    np  and  ir  hold 
proof  let               and ir     v     it is evident that ir       v   
the equivalence between  i  and  ii  follows from corollary     ii  obviously implies  iii   it
suffices to show  iii    ii  
by positive persistence  we have       for each       from which follows mod     
mod        on the other hand  by   w        and  ir  ir     v    it follows       thus
mod        mod      thus       

proposition    let        be formulas and v  a such that    forget     v   and   
forget   v    then
 i       
 ii         
proof   i  t    
iff ht  t i      by  i  of proposition  
iff ht  t i     forget     v   since    forget     v  
iff hy  y i      such that ht  t i v hy  y i by definition  
iff y     such that t v y by  i  of proposition  
iff t    forget   v   by corollary  
iff t      since    forget   v   
 ii  hh  t i      
 t      by  i  of proposition  
 t    forget   v   since    forget   v  
 y     such that y v t by corollary  
 hh   v  y i      such that y v t by  ii  of proposition  
 hh  t i     forget     v   due to hh   v  y i v hh  t i and definition  
 hh  t i      due to forget     v      



proposition    let  and   be two horn logic programs  and v a set of atoms such that   
forget   v    then     forget     v   
  

fiwang   z hang   z hou     z hang

proof  by proposition    it suffices to show     ht 
   hh     t   i   ht  
 h        and t        by lemma  
 h  t such that h      t      h v h   and t v t   by    forget   v  
 h  t such that h  t      t      h  t v h   and t v t  
 h  t such that hh  t  t i   ht  and hh  t  t i v hh     t   i
 hh     t   i   ht forget ht    v   
   hh     t   i   ht forget ht    v  
 hh  t i   ht  such that hh     t   i v hh  t i
 h  t such that h      t     and hh     t   i v hh  t i by lemma  
 h      forget   v   and t      forget   v  
 h        and t        due to    forget   v  
 hh     t   i   ht    
proposition    let  and  be two formulas and v a set of atoms 
 i    forget   v   iff    forget     v   
 ii  forget   v    forget   v   iff forget     v     forget     v   
proof   i     hh  t i     
iff t      i e  t     by  ii  of proposition  
iff t    forget   v   since   forget   v  
iff y     i e  y     such that y v t by corollary  
iff hh   v  y i       h   v  t   v   y   v   by  ii  of proposition  
iff hh  t i     forget     v   by definition   
   t     i e  t    
iff hh  t i      by  ii  of proposition  
iff hh  t i     forget     v   for h  t since    forget     v  
iff hx  y i      such that hh  t i v hx  y i by definition  
iff y     such that y v t by  ii  or proposition  
iff t    forget   v   by corollary   
 ii     hh  t i     forget     v  
iff hx  y i      such that hx  y i v hh  t i by definition  
iff y     i e  y     such that y v t by  ii  of proposition  
iff t    forget   v   by corollary  
iff t    forget   v   since forget   v    forget   v  
iff y       i e  y       such that y   v t by definition  
iff hx   v  y   i      by  ii  of proposition    x   v  y   v   y     v  
iff hh  t i     forget     v   by hh  t i v hx   v  y   i and definition   
   t    forget   v  
iff y     i e  y     such that y v t by corollary  
iff hx  y i      such that y v t by  ii  of proposition  
iff hx   v  t i     forget     v   hx   v  t i v hx  y i and by definition  
iff hx   v  t i     forget     v   since forget     v     forget     v  
iff hx     y   i      such that hx   v  t i v hx     y   i by definition  
  



fik nowledge f orgetting

in

a nswer s et p rogramming

iff y       i e  y       such that t v y   by  ii  of proposition  
iff t    forget   v   by corollary   



theorem       forgetting vs propositional forgetting  let  and  be two formulas of la and
v  a  then
   forget     v   iff  a           forget  a           v  v     
 be a model of  a  
proof     let m   ma  ma
 
m     a         
 i     by proposition  
iff hma   ma
 
 
 i    forget    v   since   forget    v  
iff hma   ma
 
 
 
 
 
 i by definition  
iff hh  t i      such that hh  t i v hma   ma
 

iff hh  t i      such that h v ma and t v ma
 
 
iff h  t     a          and h v ma and t   v   ma  by proposition  
iff h  t       a          and h  t   v v   ma  ma  by lemma  
iff ma  ma     forget  a           v  v     by definition  
iff m    forget  a           v  v     
   hx  y i     
iff x  y       a          by proposition  
iff x  y       a   forget  a           v  v    
iff m     a          such that m v v   x  y  
 i     such that m  m   x  y by proposition  
iff hma   ma
 
v
 
a
a 
 i by definition   
iff hx  y i     forget     v   due to hx  y i v hma   ma
 



proposition    let  and  be two formulas of la and v a set of atoms  then forget     v    
forget     v   iff the following condition holds 
forget          a   v  v      forget          a   v  v     
proof     we show forget         a   v  v        forget         a   v  v      the
other side can be similarly proved 
m    forget          a   v  v    
 n  a  a  such that n v v   m and n             a 
 hx  y i      with n   x  y   by proposition  
 hx  y i     forget     v   by  iii  of proposition   
 hx  y i     forget     v   as forget     v     forget     v  
 hh  t i      such that hh  t i v hx  y i by definition  
 h  t             a  by proposition  
 x  y      forget          a   v  v     as h  t   v v   x  y  
 m    forget          a   v  v     by m v v   x  y      n   
   we show forget     v       forget     v    the other side is similar 
hh  t i     forget     v  
 hx  y i      such that hh  t i v hx  y i  by definition  
 x  y               a  by proposition  
 x  y      forget          a   v  v    
  

fiwang   z hang   z hou     z hang

 x  y      forget          a   v  v    
 h   t               a  such that h   t   v v   x  y  
 hh    t  i      by proposition  
 hx  y i     forget     v   as hx  y i v hh    t  i by definition  
 hh  t i     forget     v   as hx  y i v hh  t i 



theorem    let  and  be two formulas and v a set of atoms 
 i  the problem of deciding if    forget     v   is co np complete 
 ii  the problem of deciding if forget     v     forget     v   is p   complete 
 iii  the problem of deciding if    forget     v   is p   complete 
proof   i  membership  recall that      forget     v   by  iii  of proposition     we have
    forget     v  
iff forget     v        
iff hx  y i     forget     v   and hx  y i      
iff hh  t i      such that hh  t i v hx  y i and hx  y i       
since both guessing hh  t i  hx  y i and checking the   satisfiability can be done in polynomial
time in the size of  and v   thus the complement of     forget     v    i e     forget     v   
is in co np 
the hardness follows from the fact that  by  i  of proposition        forget     v   iff
  forget   v    which is co np complete  cf   see lang et al         prop      
 ii  membership  if forget     v      forget     v   then there exists a   interpretation hh  t i
such that either
 a  hh  t i     forget     v   and hh  t i      forget     v    or
 b  hh  t i      forget     v   and hh  t i     forget     v   
on the one hand  to guess a   interpretation hh  t i is feasible by a nondeterministic turing machine  on the other hand  checking if hh  t i      is feasible by a deterministic turing machine 
and hh  t i     forget     v   iff there exists hx  y i      such that hx  y i v hh  t i  thus
checking the conditions  a  and  b  can be done in polynomial time in the size of  and  by calling
a nondeterministic turing machine  thus the problem is in p   
note that  by  ii  of proposition     forget     v     forget     v   iff forget   v   
forget   v    which is p   complete  cf   see lang et al         prop       thus the hardness
follows 
 iii  membership  note that     forget     v   iff there is a   interpretation hh  t i such that
 hh  t i      and hh  t i      forget     v    or
 hh  t i       and hh  t i     forget     v   
similar to the case of  ii   the guessing and checking are in polynomial time in the size of    and
v by calling a nondeterministic turing machine  thus the problem is in p   
note that    forget     v   iff    forget     v   and forget     v     forget     v   
the latter is p   hard by  ii   then the hardness follows 

  

fik nowledge f orgetting

in

a nswer s et p rogramming

proposition    let  and  be two formulas and v a set of atoms 
 i  the problem of deciding whether      forget     v   is p   complete 
 ii  the problem of deciding whether forget     v        is co np complete 
proof   i  membership  recall that       forget     v   iff there exists a   model hh  t i of 
such that hh  t i     forget     v    as hh  t i     forget     v   iff hx  y i      for every  interpretation hx  y i such that hx  y i v hh  t i  such hh  t i can be guessed in polynomial
time in the size of    and v   checking hh  t i     forget     v   is possible in polynomial time
in the size of    and v by calling a nondeterministic turing machine  thus the original problem
is in p   
hardness  it follows from the following fact 
      forget     v  
iff     forget     v  
iff    forget   v   by  i  of proposition           
iff the qbf v v  is valid  which is p   complete  papadimitriou        
 ii  membership  note that
forget     v        
iff hh  t i     forget     v   such that hh  t i     
iff hx  y i      such that hx  y i v hh  t i and hh  t i      
since the guessing and checking are both polynomial in the size of    and v   the original problem
is in co np 
hardness follows from the fact that
forget     v       
iff       by  ii  of proposition   
iff  has no   model  which is co np complete by proposition   


appendix d  forgetting operators fw and fs
wong proposed six postulates and argued that the postulates should to respected by all forgetting
operators in disjunctive logic programs under strong equivalence 
 f    if    ht  then f    a    ht f    a  
 f    if a does not appear in   then f   r     a  ht f   r   a    
 f    f    a  does not contain any atoms not in  
 f    if f    a    ht r then f   s   a    ht r for some s  cn   
 f    if f    a    ht  a  b  not c   then    ht  a  b  not c  not a  
 f    f  f    a   b  ht f  f    b   a 
where f is a forgetting operator     and  are disjunctive logic programs  a and b are atoms  r is
a disjunctive rule  and
cn     r  r is a disjunctive rule such that    ht r and var r   var    
  

fiwang   z hang   z hou     z hang

where var   is the set of atoms occurring in  
accordingly  he proposed two forgetting operators fs and fw   the result of forgetting an atom
a from a disjunctive logic program  is defined by the below procedure 
    let     cn   
    form     remove rules of the form  a  b  a  not c   replace each rule of the form  a 
 a   b  not c  not a  with  a  b  not c  not a   let the resulting logic program be    
    replace or remove each rule in     of the form  a  b  not c  not a  or  a   a  
b  not c  according to the following table 
s
w

a  b  not c  not a
 remove 
a  b  not c

a   a   b  not c
 remove 
a  b  not c

let   be the resulting logic program 
the logic program   is the result of forgetting p from  

references
alfred  h          on sentences which are true of direct unions of algebras  the journal of symbolic
logic              
bobrow  d  g   subramanian  d   greiner  r     pearl  j   eds            special issue on relevance
          artificial intelligence journal 
cabalar  p     ferraris  p          propositional theories are strongly equivalent to logic programs 
theory and practice of logic programming               
delgrande  j  p   schaub  t   tompits  h     woltran  s          a model theoretic approach to
belief change in answer set programming  acm transactions on computational logic        
a  a    
eiter  t   fink  m   tompits  h     woltran  s          on eliminating disjunctions in stable logic
programming  in principles of knowledge representation and reasoning  proceedings of
the ninth international conference  kr       pp          whistler  canada  aaai press 
eiter  t     wang  k          semantic forgetting in answer set programming  artificial intelligence 
                  
faber  w   pfeifer  g     leone  n          semantics and complexity of recursive aggregates in
answer set programming  artificial intelligence                 
ferraris  p          answer sets for propositional theories  in logic programming and nonmonotonic reasoning   th international conference  vol       of lecture notes in computer science  pp          diamante  italy  springer 
ferraris  p   lee  j     lifschitz  v          stable models and circumscription  artificial intelligence                 
ferraris  p     lifschitz  v          mathematical foundations of answer set programming  in
artemov  s  n   barringer  h   davila garcez  a  s   lamb  l  c     woods  j   eds    we will
show them  essays in honour of dov gabbay  vol     pp          college publications 
  

fik nowledge f orgetting

in

a nswer s et p rogramming

gabbay  d  m   pearce  d     valverde  a          interpolable formulas in equilibrium logic and
answer set programming  journal of artificial intelligence research             
gelfond  m     lifschitz  v          the stable model semantics for logic programming  in proceedings of the fifth international conference and symposium on logic programming  pp 
          seattle  washington  mit press 
goranko  v     otto  m          handbook of modal logic  vol     chap    model theory of modal
logic  pp          elsevier 
jongh  d  d     hendriks  l          characterization of strongly equivalent logic programs in
intermediate logics  theory and practice of logic programming               
kontchakov  r   wolter  f     zakharyaschev  m          can you tell the difference between dl lite
ontologies   in principles of knowledge representation and reasoning  proceedings of the
eleventh international conference  kr       pp          sydney  australia  aaai press 
lang  j   liberatore  p     marquis  p          propositional independence  formula variable independence and forgetting  journal of artificial intelligence research             
lang  j     marquis  p          reasoning under inconsistency  a forgetting based approach  artificial intelligence                     
lifschitz  v   pearce  d     valverde  a          strongly equivalent logic programs  acm transactions on computational logic               
lifschitz  v   tang  l  r     turner  h          nested expressions in logic programs  annals of
mathematics and artificial intelligence                  
lin  f          on strongest necessary and weakest sufficient conditions  artificial intelligence 
                 
lin  f          reducing strong equivalence of logic programs to entailment in classical propositional logic  in proceedings of the eights international conference on principles and knowledge representation and reasoning  kr      pp          toulouse  france  morgan kaufmann 
lin  f     chen  y          discovering classes of strongly equivalent logic programs  journal of
artificial intelligence research             
lin  f     reiter  r          forget it   in in proceedings of the aaai fall symposium on relevance 
pp         
lin  f     zhou  y          from answer set logic programming to circumscription via logic of gk 
artificial intelligence                 
liu  y     wen  x          on the progression of knowledge in the situation calculus  in ijcai
      proceedings of the   nd international joint conference on artificial intelligence  pp 
        barcelona  catalonia  spain  ijcai aaai 
lutz  c     wolter  f          foundations for uniform interpolation and forgetting in expressive
description logics  in ijcai       proceedings of the   nd international joint conference on
artificial intelligence  pp          barcelona  catalonia  spain  ijcai aaai 
osorio  m     cuevas  v          updates in answer set programming  an approach based on basic
structural properties  tplp               
  

fiwang   z hang   z hou     z hang

osorio  m     zacarias  f          on updates of logic programs  a properties based approach  in
seipel  d     torres  j  m  t   eds    foiks  vol       of lecture notes in computer science 
pp          springer 
packer  h  s   gibbins  n     jennings  n  r          an on line algorithm for semantic forgetting  in ijcai       proceedings of the   nd international joint conference on artificial
intelligence  pp            barcelona  catalonia  spain  ijcai aaai 
papadimitriou  c  h          computational complexity  addison wesley 
pearce  d   tompits  h     woltran  s          encodings for equilibrium logic and logic programs
with nested expressions  in proceedings of the  th portuguese conference on artificial intelligence on progress in artificial intelligence  knowledge extraction  multi agent systems 
logic programming and constraint solving  pp          london  uk  springer verlag 
pearce  d   tompits  h     woltran  s          characterising equilibrium logic and nested logic
programs  reductions and complexity  theory and practice of logic programming       
       
su  k   sattar  a   lv  g     zhang  y          variable forgetting in reasoning about knowledge 
journal of artificial intelligence research             
truszczynski  m          reducts of propositional theories  satisfiability relations  and generalizations of semantics of logic programs  artificial intelligence                       
van ditmarsch  h  p   herzig  a   lang  j     marquis  p          introspective forgetting  synthese 
               
visser  a          uniform interpolation and layered bisimulation  in godel    pp         
wang  y   wang  k     zhang  m          forgetting for answer set programs revisited  in ijcai
      proceedings of the   rd international joint conference on artificial intelligence  pp 
          beijing  china  ijcai aaai 
wang  y   zhang  y   zhou  y     zhang  m          forgetting in logic programs under strong
equivalence  in principles of knowledge representation and reasoning  proceedings of the
thirteenth international conference  pp          rome  italy  aaai press 
wang  z   wang  k   topor  r  w     pan  j  z          forgetting for knowledge bases in dl lite 
annuals of mathematics and artificial intelligence                  
wong  k  s          forgetting in logic programs  ph d  thesis  the university of new south
wales 
zhang  y     foo  n  y          solving logic program conflict through strong and weak forgettings 
artificial intelligence                   
zhang  y     zhou  y          knowledge forgetting  properties and applications  artificial intelligence                       
zhou  y     zhang  y          bounded forgetting  in proceedings of the twenty fifth aaai
conference on artificial intelligence  aaai       pp          san francisco  california 
usa  aaai press 

  

fi