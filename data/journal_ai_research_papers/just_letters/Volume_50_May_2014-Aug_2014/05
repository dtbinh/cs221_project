journal artificial intelligence research                 

submitted        published      

planning automatic portfolio configuration 
pbp approach
alfonso emilio gerevini
alessandro saetti

alfonso gerevini unibs it
alessandro saetti unibs it

dipartimento di ingegneria dellinformazione
universita degli studi di brescia
via branze     i       brescia  italy

mauro vallati

m vallati hud ac uk

school computing engineering
university huddersfield
huddersfield  west yorkshire  hd   dh  uk

abstract
field domain independent planning  several powerful planners implementing
different techniques developed  however  one systems outperforms
others every known benchmark domain  work  propose multi planner
approach automatically configures portfolio planning techniques given
domain  configuration process given domain uses set training instances to 
 i  compute analyze alternative sets macro actions planner
portfolio identifying  possibly empty  useful set   ii  select cluster planners 
one identified useful set macro actions  expected perform best 
 iii  derive additional information configuring execution scheduling
selected planners planning time  resulting planning system  called pbp  portfoliobased planner   two variants focusing speed plan quality  different versions
pbp entered learning track sixth seventh international planning
competitions  paper  experimentally analyze pbp considering planning speed
plan quality depth  provide collection results help understand pbps
behavior  demonstrate effectiveness approach configuring portfolio
planners macro actions 

   introduction
last fifteen years  field automated plan generation achieved significant
advancements  several powerful domain independent planners today available  e g  
propositional planning   hoffmann   nebel         lpg  gerevini  saetti    serina 
       sgplan  chen  hsu    wah         fast downward  helmert         lama
 richter   westphal         moreover  systems performs well
 more less large  class planning domains problems  well known one
outperforms others every available benchmark domain  see  e g   roberts   howe 
       would useful multi planner system automatically selects
combines efficient planner s  portfolio given domain 
c
    
ai access foundation  rights reserved 

figerevini  saetti    vallati

performance current planning systems typically affected structure
search space  depends considered planning domain  many domains 
planning performance improved exploiting knowledge domain
structure explicitly given part input formalization 
automatically derived it  particular  several approaches encoding additional knowledge form macro actions proposed  e g   botea  enzenberger  muller 
  schaeffer        newton  levine  fox    long         macro action  macro short 
sequence actions planned one time single action  using
macros important tradeoff consider  use speedup planning
process  reduces number search steps required reach solution 
increases search space size  could slow planning process  moreover 
known effectiveness macros depend planning algorithm  set
macros increase performance planner  decrease it  irrelevant 
another 
paper  propose approach automatically configuring portfolio existing
planners  possibly using useful set macros them  configuration relies
statistical analysis performance planners portfolio usefulness
automatically generated sets macros  considering set training problem instances
given domain  configuration knowledge automatically generated
analysis consists cluster planners defined by  ordered subset planners
initial portfolio  planning time combined using round robin strategy 
set useful macros planner  sets planning time slots  planning
time slots specify amount cpu time allocated planner cluster
planning  resulting planning system called pbp  portfolio based planner  
current implementation pbp incorporates two systems generation
macros nine efficient planners  architecture open consider  current
future  planner additional alternative system  pbp used without configuration knowledge  planners portfolio scheduled  without macros  simple
round robin strategy predefined cpu time slots assigned  randomly
ordered  planners  pbp used configuration knowledge domain consideration  selected cluster planners  possibly using relative selected
sets macros  scheduled  ordering favors planners configuration
performed best  planning time slots defined computed configuration
knowledge  selection exploitation macros pbp  worth noting
planners portfolio configured pbp necessarily use macros learned
them  configuration process  system evaluates planner portfolio
set macros computed it  well empty macro set 
independent planning systems 
pbp two main variants  pbp s  focusing speed  pbp q  focusing plan
quality  preliminary implementation pbp s  gerevini  saetti    vallati        entered
learning track sixth international planning competition  ipc   overall
winner competition track  fern  khardon    tadepalli          recently 
   observed ipc  organizers  surprisingly  ipc  problems use configuration
knowledge considerably speedup version pbp s  reasons implementation bugs concerning configuration phase planning phase  inefficient use

   

fiplanning automatic portfolio configuration  pbp approach

revised optimized version pbp speed quality variants entered
learning track seventh competition  ipc    winner
competition track  coles  coles  olaya  celorrio  lopez  sanner    yoon        
large experimental analysis presented paper provides collection results
help understand performance behavior pbp effectiveness portfolio
configuration methods  particular  analysis  i  confirms good performance
pbp context ipc    benchmarks   ii  compares pbp existing
approaches configure planner portfolio   iii  evaluates accuracy pbps approach
identify effective cluster planners strength using  configured
unconfigured  multi planner respect single planner   iv  investigates usefulness
macros considered benchmarks  showing pbp selects useful macro sets 
 v  examines execution scheduling configuration pbp selected planners
configured portfolio  demonstrating default strategy works well compared
possible strategies considered analysis 
several ideas techniques investigated context pbp use build previous
work  besides presenting evaluating effective approach configuring planner
portfolio  research presented paper corroborates  validates evaluates
hunches empirical studies done researchers planning  particular 
experimental analysis confirms certain sets macros useful accelerate
planning speed improve plan quality  botea et al         coles   smith        newton
et al         others harmful  diversity planning techniques important
construction effective planner portfolio  observed by  e g   roberts howe
        round robin scheduling planner execution times robust
strategy planner portfolio  howe  dahlman  hansen  vonmayrhauser    scheetz       
roberts   howe        
remainder paper organized follows  section   discusses related work 
section   describes pbp approach  section   presents results experimental
study  finally  section   gives conclusions 

   related work
section  brief presentation prominent work algorithm portfolio
design automated reasoning  describe related work others planner portfolio
design automated planning  pointing important differences pbp
related work  specific differences similarities indicated
following sections presenting technical results 
    algorithm portfolio design automated reasoning
field automated reasoning  idea using portfolio techniques
investigated several researchers  prominent example work gomes selman
        conducted theoretical experimental study parallel run stochastic
algorithms solving computationally hard search problems  work shows
linux shell scripts  evident especially small easy problems   corrected
competition obtaining much better results  gerevini et al         

   

figerevini  saetti    vallati

conditions running different stochastic algorithms parallel give computational gain
running multiple copies stochastic algorithm parallel 
many papers algorithm portfolio design concern definition models select
best algorithm s  instance certain problem according values
predetermined features instance  rice         example  algorithm portfolios
designed aim solve instances sat  maxsat  qbf  matos  planes 
letombe    marques silva        pulina   tacchella        xu  hutter  hoos    leytonbrown         satzilla prominent example algorithm portfolio designed sat
 xu et al          satzilla uses machine learning techniques build predictor
runtime class sat solvers  satzilla attempts solve instance sat
problem  computes values features instance  predicts performance
sat solvers incorporates  selects promising sat solvers order
accordingly predicted performance  finally runs selected sat solvers using
established ordering predicted required cpu times 
matos et al         propose algorithm portfolio solving maxsat problem 
portfolio computes values several features given instance maxsat problem 
estimates runtime solver portfolio  solves instance
estimated fastest solver  estimation done using  linear  model configured
performing ridge regression  marquardt   snee         similarly  pulina tacchella
       study algorithm portfolio solving qbf problem  identify features
qbf problem  investigate usage four inductive models select best
solver use according values identified features 
    planner portfolio design automated planning
regarding automated planning  prominent planners combining one algorithms
proposed  blackbox  kautz   selman        use variety satisfiability engines  the initial version included graphplan algorithm    hoffmann   nebel 
       lpg  gerevini et al         gerevini  saetti    serina        sgplan   chen et al  
      include backup strategy using alternative search technique run
default method fails  algorithm combination systems straightforward
use automatic portfolio configuration 
previous work planner portfolios includes approach proposed howe collaborators  howe et al         roberts   howe              roberts  howe  wilson   
desjardins         rest paper  refer howe collaborators approach using name first planner portfolio  bus  howe et al          although
analysis approach consider recent techniques planner
portfolio configuration  approach learns models performance set planners 
planning time  round robin policy used schedule runs planners
set  learned models exploited determine order runs 
configuration knowledge derived approach domain independent  performance
models planners built using several predictive models weka data mining
package  witten   frank         set planners forming portfolio determined
set covering algorithm solved training problems across several different
planning domains 
   

fiplanning automatic portfolio configuration  pbp approach

work bus originally inspired approach  pbp similarities it 
computes uses different configuration knowledge  methods selecting
ordering portfolio planners considerably different  portfolio configuration
pbp generates domain optimized clusters planners  selection ordering
pbp based statistical analysis planners performance set training
problems using wilcoxon sign rank test  known wilcoxon matched pairs
test  wilcoxon   wilcox          finally  system compute  analyze use
macros  consider plan quality 
similarly work howe et al          roberts howe         techniques used cenamor  de la rosa  fernandez         fawcett  vallati  hutter 
hoffmann  hoos  leyton brown        learn models performance set planners
according predetermined features  work cenamor et al          features derived sas  representation planning problem  approach 
learned models used determine planners run  order 
long  selected planners run sequentially either using amount cpu time
uniformly assigned determined predicted execution time  experimental results work cenamor et al         show problems domains different
used learn models  configured portfolios perform worse running
unconfigured portfolio consisting incorporated planners uniform cpu time
assigned them 
work described fawcett et al         focused generating models accurately predicting planners runtime  models exploit large set instance features 
derived pddl sas  representations problem  sat encoding
planning problem   short  runs planners  experimental results work
fawcett et al         indicate generated performance models able produce
accurate runtime predictions 
fast downward stone soup  here abbreviated fdss  approach selecting combining set forward state planning techniques  helmert  roger    karpas         using
ipc  scoring function  fdss evaluates class candidate techniques basis
performance set training problem instances different domains 
builds domain independent sequential portfolio forward planners hill climbing algorithm searching space possible sequential combinations evaluated candidate
techniques  automatic portfolio configuration fdss pbp aims building different types planning systems  single efficient domain independent planner portfolio
fdss  efficient domain optimized portfolio planner given domain pbp 
configuration processes resulting configured portfolios fdss pbp
significantly different  particular  pbp configures portfolio generic planners  using
different styles planning   one  possibly empty  set useful learned macros 
considered fdss domain independent purpose  moreover 
execution scheduling strategy pbp runs selected planners round robin rather
sequentially 
   context planning  wilcoxon sign rank test previously used work
long fox         gerevini  haslum  long  saetti  dimopoulos         gerevini et al         
roberts howe        

   

figerevini  saetti    vallati

parlpg  vallati  fawcett  gerevini  hoos    saetti      b  fast downward autotune
 fawcett  helmert  hoos  karpas  roger    seipp        configure parameters planners lpg fast downward  helmert         respectively  using set training problems
given domain order obtain combinations parameters two planners
perform especially well given domain  frameworks uses stochastic local
search procedure paramils search high performance configurations parameters
evaluating promising configurations  hutter  hoos    stutzle        hutter  hoos  leytonbrown    stutzle         extended version fdss  seipp  braun  garimort    helmert 
      involves twenty one configurations fast downward  obtained configuring parameters fast downward autotune twenty one different domains  fawcett et al  
       combined several alternative sequential strategies allocating cpu
times them 
asap  vallati  chrpa    kitchin      a  recent system selecting promising planner set candidates planners derives much power use
entanglements  chrpa   bartak        chrpa   mccluskey         entanglements
relations planning operators predicates used reformulate domain model
removing unpromising operator instances restricting applicability actions
certain states  problem resulting modified domain become significantly
easier solve planner  hand  since asap uses approximate method
decide entanglements  pspace complete  chrpa  mccluskey    osborne        
problem solvable original domain become unsolvable reformulated domain  given planning domain modified entanglements set planners 
asap identifies promising planners one highest ipc score
 jimenez  coles    coles        set training problems 

   automated planner portfolio design pbp
section  introducing preliminaries defining problem configuring
planner portfolio execution solve planning problems  describe architecture
techniques approach configure execute planner portfolio 
    preliminaries configuring executing planner portfolio
differently existing work algorithm portfolio design
aware  pbp design planner portfolio solving specific instance
planning problem according values predetermined features instance 
instead  planning problems gathered according planning domains  planner portfolio designed whole domain  basis choice empirical
observation often exists single planner combination planners performs generally better problems domain  seems something
peculiar automated planning hold types reasoning problems 
makes pbp somewhat atypical general literature algorithm portfolio design 
let planning domain  cpu time limit  p set n planners  initial
portfolio   predefined parameter values  problem configuring
p consists computing set triples  hpi   mi   si             m   where    n 
pi p  mi  possibly empty  set macro operators learned pi domain d  si
   

fiplanning automatic portfolio configuration  pbp approach

sequence increasing cpu times  cpu times  real numbers  called planning
time slots  time lower equal  
output set triples identified portfolio configuration algorithm configured
 planner  portfolio p d  rest paper called selected
planner cluster  or simply cluster   depending planners  macros planning
time slots chosen  many candidate solutions portfolio configuration
problem  special case  call unconfigured  planner  portfolio  defined
 hpi     spre              p    spre predefined h                     i  in seconds  
bus  pbp uses round robin policy scheduling runs planners
configured portfolio  let    hpi   mi   si             m  planner portfolio configured
domain d  portfolio executed solve planning problem roundrobin scheduling processes where  process corresponds running planner pi
macros mi  pi   mi short   according order time slices derived
sequences s    m   precisely  circular order planners determined
considering values t    m defined first planning time slot
sequences s        sm   ti   tj   pi ordered pj   ti   tj   relative order pi
pj arbitrarily decided  i e   case pi runs pj iff   j   every i  j        
   j  planner pi   mi initially run total cpu time allocated
process ti   planner terminates earlier  planner pi   mi terminate
within assigned planning time slot ti   suspended  resumes next time
time slot assigned it  additional cpu time assigned processes
already terminated  when  according circularity order  planner pi   mi
resumes execution  total cpu time assigned  from start execution 
equal next unprocessed time slot si  i e   j th value si j th time
pi   mi runs  
figure   shows example round robin scheduling portfolio  hp    m   
h                   ii  hp    m    h                   ii   assuming p    m  terminates using
   cpu time units  p    m  using     cpu time units  p    m  runs
planner p    m    first time slot p    m   i e       lower first
time slot p    m   i e        round robin scheduler suspends p    m     time
units  gives p    m     time units cpu time  process repeated suspending
p    m  total execution p    m  consumed    time units  suspending
p    m  total execution p    m  consumed    time units  next
iteration  p    m  suspended total execution time reaches    time units 
but  end third time slot  i e   time      p    m  terminates needs
cpu time  then  p    m  resumes run  terminates time     
example  planners portfolio use first three time slots 
given set training problems domain d  propose approach configuring
initial planner portfolio statistical analysis performance
planners initial portfolio alternative sets computed macros 
effectiveness determined configured portfolios evaluated set test
problems d  experimental analysis disjoint training problem set
that  specified otherwise  always formed known benchmark problems 
proposed approach implemented planning system called pbp  portfolio based
planner   following  depending context  pbp used indicate either
   

figerevini  saetti    vallati

p  m 
p  m 
  

  

  

   

   

   

time

figure    example round robin scheduling pbp running portfolio  hp    m    h                   ii   hp    m    h                   ii  given planning
problem  assuming planner p  using macros m  takes total    cputime units terminate p  m  takes total     cpu time units 

method configuring planner portfolio  generated configured portfolio 
experimental evaluation configured portfolios generated pbp  baseline
planner portfolio  use unconfigured planner portfolio  called
unconfigured version pbp denoted pbp nok  while pbp indicate
generated configured planner portfolio  
    architecture components pbp
architecture pbp consists following five main components  combined
described figure   
      macro actions computation
integrated planner  pbp computes sets alternative macros using following two approaches 
wizard  phd thesis version  newton et al          system implements three
learning techniques based offline evolutionary methods  use genetic operators
compute macros given planner plans solving set training problem
instances input domain  three learning techniques called chunking 
bunching  clumping  chunking learns individual macros original domain
operators  bunching learns bunches macros given pool macros  such
macros learned chunking process   clumping learns individual
macros sets macros simultaneously  learned macros filtered fitness
value  fitness value reflects filtering criteria including number solved
problems cpu time required solve training problems using domain
operators augmented learned macros  computed macros 
fitness value macro lower threshold  macro discarded  therefore 
planner incorporated pbp  expect macro ff   pbp using wizard
generate three sets macros planner  order determine sets
macros used configured portfolio  performance planner
evaluated pbp with without using sets learned filtered macros
training problems  evaluation performed planner cluster
   

fiplanning

planning automatic portfolio configuration  pbp approach

incorporated planners 

domain
problem solve

multi planner
round robin scheduling
time limit

fast downward  helmert       

cluster planners macros

planning time
time slots
slots computation

lpg td  gerevini  saetti   serina       
macro ff  botea et al        
marvin  coles   smith       
metric ff  hoffmann   nebel       
sgplan   chen  wah   hsu       

portfolio configuration

lama  richter   westphal       

yahsp  vidal       

solution plan
failure

planner cluster
selection   ordering

performance planners macros

macro actions
computation
wizard

planners macros

performance
measurement

macroff

planners

domain
training probs

time limit

parlpg  vallati et al        

figure    sketch pbps architecture 
selection ordering component  simplicity  sets learned macros
identified names techniques used derive them 
macro ff  botea et al         botea  muller    schaeffer      b   approach
implemented macro ff  botea et al         computes macros analyzing solutions set training problem instances  macros appear frequently
significantly reduce required search effort preferred  particular 
first macro ff solves training problems using enhanced version ff 
generates macros considering frequency sequences actions forming
macros appear computed solutions   macro generation  macro ff
solves training problems using computed macros  ranks macros terms
obtained search effort gain  using ranking selects five sets
macros m       mi        set macros formed best learned
macros  version approach integrated pbp contains enhancements
described botea et al       b   since macros learned macro ff coded
using ad hoc language  pbp five learned sets macros m     used
macro ff planner 

      planner performance measurement
expensive computation step configuration portfolio  pbp
runs integrated planner expect macro ff without three sets macros
   experiments presented section    observed macro ff computes macros
enhanced version solves training problem 

   

figerevini  saetti    vallati

learned wizard input training problem set  using input cpu time
limit planner run  similarly  macro ff runs without five sets
macros learned itself  current implementation pbp incorporates eight well known
successful planners  fast downward  helmert         lama  richter   westphal        
lpg td  gerevini et al          macro ff  botea et al             b   marvin  coles   smith 
       metric ff  hoffmann         sgplan   chen et al          yahsp  vidal       
recent version lpg  parlpg  using dedicated configuration phase automatically
optimize setting collection parameters governing behavior several parts
system  vallati et al       b   basically  running parlpg consists running lpg using
domain specific parameter configuration  every incorporated planner runs using
default parameter configuration  marvin  implies planning learn
memorize macros escape plateaus  run  pbp measures planner
performance terms of  number problems solved within   cpu time required solving
training problems  quality computed solutions  incremental planners 
i e   lpg  parlpg lama  pbp measures quality solutions generated
problem corresponding cpu times  finally  note macro actions
computation macro ff wizard already run incorporated planners hence 
principle  performance planners macros could measured macro ff
wizard compute them  however  technical difficulties and  simplicity 
pbp duplicates runs  incorporated  planners 
      planning time slots computation
method computing planning time slots pbp variant cpu time allocation strategy proposed roberts howe        round robin planner scheduling  let hp            pn sequence increasing percentages  tpi  i             n  
minimum cpu time required planner p set macros learned  p  
short  order solve percentage training problems equal pi   pbps
configuration planner portfolio  planning time slots p   defined
  htp            tpn i 
difference planning time slots pbp approach roberts
howe explained following example  assume computed planning
time slots planner using macros  a ma   h                              
planner b using macros mb  b   mb   h                   i  then  pair
planners  differently approach roberts howe  pbp extends first time
slot                i e   greatest time slot   smaller
first time slot b   mb   similarly subsequent time slots  first time slot
  extended  slowest planner b   mb would initially run cpu
time much greater cpu time initially assigned fastest planner    
many problems planner   quickly solves  e g   using one cpu second  
pbp would perform much slower  worth noting using time slot extension
observed high performance gain small easy problems 
rest paper  sequence increasing percentages hp         pn used define
planning time slots called problem coverage percentage vector  pcpv   default
   

fiplanning automatic portfolio configuration  pbp approach

pcpv pbp sequence h                                  i  n      
used work roberts howe        
      planner cluster selection ordering
last step configuration process pbp  pbp selects cluster planners
initial portfolio  as described section       one  possibly empty  set
useful macros  according measured performance computed planning time
slots 
macro selection  note pbp explicit independent mechanism
selecting macros used configured portfolio  macros shared
planners tools used learn  wizard macro ff  generate
macro sets specific input planner  planners macro sets selected together 
since planner cluster selection pbp considers candidate planner using two different
sets macros learned two different candidate planners 
execution order planners selected cluster implicitly defined
increasing first planning time slots associated planners  section     describes
planner cluster selection detail 
      multi planner round robin scheduling
pbp configured planner portfolio domain consideration 
problem instance domain encountered  pbp runs selected ordered cluster
planners  each one using relative selected set macro actions  round robin
scheduling algorithm using computed planning time slots  similar one investigated many portfolio algorithms  see  e g   howe et al         roberts   howe       
       alternative planner scheduling strategies possible  sequential execution
or and using configured planning time slots  however  according experimental results
presented section      default round robin strategy planning
time slots derived default pcpv robust performs generally well  concerning
termination resulting multi planner  pbp s terminates either given  execution 
cpu time limit exceeded  returning failure  one among selected planners computes solution  output pbp s   pbp q terminates either time exceeded 
selected planners terminate  pbp q generates solution within t  returns failure 
otherwise  returns best computed solution 
    selecting planner cluster
performance measurement time slot computation phases  pbp analyzes
obtained results identify best cluster planners macros domain
consideration given cpu time limit   done simulating  every cluster
c k planners   possibly empty  set macros  round robin execution planners c solving training problems used performance
measurement phase   simulation done using data runs conducted
   experiments parameter k set    k greater    experimentally observed
considered benchmark domains problems cluster selected pbp would same 
maximum number possible combinations planners currently incorporated pbp

   

figerevini  saetti    vallati

performance measurement phase  the planners re run   ignoring data
planners always perform worse another incorporated planner  i e   planner
performs worse another one across training problems domain
discarded   cpu time limit simulated execution cluster  the
time given run single planner performance measurement phase  
performances simulated cluster runs compared statistical analysis based
wilcoxon sign rank test  wilcoxon   wilcox         test applies set paired
observations  a sample larger population   tells us plausible assume
correlation pairwise observed quantities  case 
paired observations are  e g   simulated runtimes two clusters training
problem instance  correlation means equally likely
see one cluster solving problem faster see opposite
sample problems 
purposes  wilcoxon sign rank test appropriate require
us know sample distribution  makes assumption distribution 
is  way know priori hard planning problem is  hence
distribution simulated performance clusters  consequently  stated
gibbons chakraborti         critical use non parameterized test 
wilcoxon sign rank test  investigated usage methods
compare performance simulated runs planner clusters  including ipc score
function used vallati et al       a   however  experimentally observed
that  ipc  domains  method less effective usage wilcoxon
sign rank test 
pbp  performance measure considers either cpu time  pbp s  plan
quality  pbp q   data carrying test pbp s derived follows 
planning problem  system computes difference simulated execution
times compared clusters  planner cluster solve problem  corresponding simulated time twice cpu time limit   cluster solves problem 
problem considered  difference simulated times normalized
value best simulated time comparison  e g   cluster c  requires    
seconds cluster c       difference     favor c     absolute values
differences ranked increasing numbers  starting lowest value 
 the lowest value ranked    next lowest value ranked    on   ranks
positive differences ranks negative differences summed  yielding
two values r  r   respectively  performance two compared clusters
significantly different  number positive differences r  approximately equal
number negative differences r   sum ranks set
positive differences approximately equal sum ranks set  intuitively  test considers weighted sum number times cluster performs better
considered sets macros
hence  k      maximum number clusters
p    
  
evaluated run simulation i k
        number clusters   different
i  

combinations planners macros    current implementation 
   minimum value ensures performance gap problem solved one cluster
planners unsolved compared cluster bigger performance gap problem
solved compared clusters 

   

fiplanning automatic portfolio configuration  pbp approach

compared one  sum weighted test uses performance
gap assign rank performance difference 
number samples sufficiently large  t distribution used wilcoxon
sign rank test approximately normal distribution  characterized two parameters called z value p value  higher z value  significant
difference performance is  p value represents level significance
performance gap  p value greater       null hypothesis
performance compared pair planners statistically similar refused  alternative hypothesis performance statistically different accepted  otherwise 
statistically significant evidence perform differently  pbp considers
perform pretty much similarly 
results wilcoxon sign rank test used form directed graph
nodes compared clusters  edge cluster c  another cluster c 
indicates c  performs better c    graph already used long
fox present results  rd international planning competition  long   fox 
       strongly connected component graph collapsed single node
representing elements clusters collapsed nodes  resulting dag 
pbp considers nodes without incoming edges  the graph root nodes  
one root node  selected cluster  otherwise pbp uses secondary criteria
select promising cluster among root nodes  criteria number
solved problems  sums ratios  simulated  cpu times planners
compared clusters  first planning cpu time slots involved planners 
specifically  pbp selects cluster among root nodes simulation solves
highest number training problems  break ties  every pair selected clusters x
 sx sy  
pbp computes ratio max s
  sx sy sums  simulated 
x  sy  
cpu times clusters x y  respectively  ratio greater threshold      
compared cluster worst sum cpu times discarded  number
remaining clusters still greater one  pbp selects cluster lowest first
planning cpu time slots involved planners  finally  remaining ties broken
selecting cluster randomly  experiments cluster ever randomly
selected 
method used select cluster planners macros pbp q similar 
applies plan qualities resulting cluster execution simulation  rather
cpu times done pbp s  simulation  pbp q considers intermediate
solutions  i e   generated last one  best quality 
relative cpu times computed basic incremental planners considered
clusters  solutions ignored  simulated plan quality clusters including
incremental planners could much worse actual quality  example  assume
cpu time limit     seconds  computes solution quality    using    
seconds  lama computes two solutions quality       using         seconds 
respectively  intermediate solutions lama ignored  estimated plan quality
cluster formed planners lama would equal quality plan
generated  the second solution generated lama could computed cluster
using     seconds  greater cpu time limit   although intermediate
 first  solution lama much better ffs solution 
   

figerevini  saetti    vallati

finally  note performance incorporated planners measured
cpu time limit   portfolio pbp s q  re configured time limit
simply ignoring solutions computed time simulation
planner cluster performance    equally distributed among planners
selected cluster  planner terminates allocated time  remaining time
equally distributed planners still running 
    integrated basic planners
subsection  give brief description nine basic planners
currently incorporated pbp  much detailed information available
corresponding referred papers 
metric ff  version      hoffmann         metric ff inherits main ideas used
 hoffmann   nebel         ffs search strategy variation hill climbing space
world states  goal distance estimated solving relaxed task
successor world state  compared first version ff  metric ff enhanced
goal orderings pruning techniques ordering knowledge provided goal
agenda  moreover  deals level   pddl     fox   long         i e   numerical state
variables  numerical action preconditions effects 
yahsp  version      vidal         yahsp extends search procedure
information extracted ffs relaxed plan  evaluated world state  yahsp
exploits look ahead strategy complete best first search employing actions
relaxed plans order find beginning valid plan lead reachable
world state 
macroff  botea et al             b   macro ff extends support using macrooperators search  engineering enhancements  one main features
planner version integrated pbp use iterative macros  botea et al       b  
i e   runtime combinations macro operators  instantiated attempting use
many actions ffs relaxed plan possible  search procedure ff 
iterative macros successfully instantiated considered generation
next world states 
marvin  release    coles   smith         marvin another planner based ff 
main improvement w r t  memorizing plateau escaping action sequences discovered
 local  search ff  action sequences form macros  applied
later plateaus once again encountered ffs search order escape
plateaus quickly 
sgplan  version       chen et al         domain modification script  coles   coles 
       sgplan  exploits partition and resolve strategy partition mutual exclusion
constraints planning problem subgoals subproblems  solves subproblems individually using modified version metric ff planner  resolves
violated global constraints iteratively across subproblems  observed
performance sgplan affected rules detecting domain name
number domain operators  coles   coles         work  intend consider
   

fiplanning automatic portfolio configuration  pbp approach

available implemented systems chances perform well  possibly combination
others  least one domain range varied existing benchmark domains 
sgplan definitely one systems  however  order prevent usage
domain specific detection rules sgplan that  differently planners incorporated pbp  would make sgplan domain specific domains  induced
sgplan behave domain independently domain modification script  proposed
coles coles         script changes domain name  adds never applicable
action domain  runs sgplan obtained domain  addition 
domain modification script changes names domain operators 
fast downward  version        helmert         fast downward  abbreviated fd 
translates input pddl problem specification multi valued state variable representation sas   backstrom   nebel         searches plan space
world states using heuristic derived causal graph  particular graph representing
causal dependencies sas  variables  pbp integrates      version planner 
main improvement compared earlier version planner     
propositional satisficing track ipc  addition safe abstraction  form problem
simplification allows planner solve certain kinds simple problems without
search 
lama  version       richter   westphal         lama built fast downward  using
sas  state variables multi heuristic search  core feature use pseudoheuristic derived landmarks  propositions must true every solution
planning task  moreover  weighted a  search used iteratively decreasing weights 
planner continues search plans better quality 
lpg td  gerevini et al          lpg td inherits main ideas used lpg  gerevini et al  
       lpg uses stochastic local search space partial plans represented action
graphs  search steps certain graph modifications transforming action graph
another one  lpg td includes accurate heuristics selecting graph modifications
lpg 
parlpg  version ipc   vallati et al       b   parlpg recent system based
idea automatically configuring generic  parameterized planner using set training
planning problems order obtain speed optimized planners perform especially well
domains problems  parlpg uses focusedils variant off the shelf 
state of the art automatic algorithm configuration procedure paramils  hutter et al        
       planning system lpg  ver        several components
configured flexibly via many exposed configurable parameters 

   experimental analysis
section  present results large experimental study pbp
following main goals 
 g   describing configured portfolios analyzing configuration process pbp
 section      
   

figerevini  saetti    vallati

 g   analyzing efficiency pbp s q terms speed plan quality context
planning competitions ipc     section      
 g   comparing performance planner portfolio configured pbp s q versus
planning systems based planner portfolios  section      
 g   evaluating effectiveness using  automatically computed  domain specific
configuration knowledge pbp s q  section      
 g   comparing performance planner portfolio configured pbp s q versus
single basic planners portfolio  evaluating accuracy planner
cluster selection pbp s q  section      
 g   analyzing kind macros selected pbp planners configured
portfolio  evaluating effectiveness using selected macro set  understanding pbp s qs accuracy selecting useful set  section      
 g   investigating possible alternative methods scheduling execution
planners selected cluster  understanding effectiveness default
round robin strategy pbp s q  section      
experimental study uses various versions pbp  important
listed table    g   show cpu time configuration step 
evaluate size training problem set important derive effective configured
portfolios  g   pbp compared planners entered learning track
ipc    winner deterministic track ipc   g   performance
pbp analyzed w r t  fdss  seipp et al         bus  portfolio approach proposed
roberts howe         although bus fdss propose design domainindependent planner portfolios  principle used  pbp  generate
domain optimized planning systems  experimentally investigate use
approaches  comparing pbp  g   show results three different
experimental comparisons  comparison pbp configured using learned domainspecific knowledge  dsk   unconfigured version pbp  pbp nok  randomly
configured version pbp  pbp rand   comparison performance gaps pbp
pbp nok w r t  gaps ipc    planners with without learned knowledge 
comparison pbp using dsk  pbp configured single domain without using
macros  pbp configured across ipc  domains  pbp alld   g   conducted
three experiments which  performance pbp incorporated planners
compared  performance pbp analyzed w r t  best incorporated planner  without
using macros  every ipc  domain  and  finally  pbp compared best cluster
incorporated planners  possibly using macros  every ipc  domain  g   compare
performance planners forming clusters selected pbp using  i  macros 
 ii  set macros selected pbp   iii  best performing set macros  moreover 
show comment features sets macros selected used pbp  finally 
g  perform two experimental analysis  comparison clusters selected pbp
using different scheduling strategies  comparison performance pbp using
different pcpvs  pbp r  r  s  s   
   

fiplanning automatic portfolio configuration  pbp approach

pbp  default 
pbp ipc 
pbp ipc 
pbp nok
pbp rand
pbp nom
pbp alld
pbp s 
pbp s 
pbp r  pbp
pbp r 
pbp         

pbp versions
last version pbp configured computing domain specific knowledge  dsk 
version pbp entered ipc  configured using dsk
version pbp entered ipc  configured using dsk
unconfigured portfolio
randomly configured portfolio
configuration without macros
configuration without macros across ipc  domains
configuration using sequential scheduling planners uniform time slots
configuration using sequential scheduling planners non uniform time slots
configuration using round robin scheduling planners default pcpv
configuration using round robin scheduling planners different pcpvs
configuration using          training problems

table    main variants pbp generating different types planner portfolio configurations
used experimental analysis 

presenting discussing results experimental analysis  describe
experimental settings 
    experimental settings
experiment evaluating pbp s q respect ipc    planners considers
ipc    benchmark domains  fern et al         jimenez et al         
experiments focus recent ipc  domains  regarding training problems used
experiments  ipc  domains ipc   ipc 
domains  set     problems various sizes     problems ipc  domain 
unless otherwise specified particular experiment consideration 
generated using problem generator made available organizers ipc   for ipc  
explicit set training problems provided   training problems used
learning macros configuring portfolio  since learning procedure wizard
run planner training problems several times  order make training
much time consuming  half training problem set designed formed
problems took    seconds solve planner  half formed
problems took     seconds  half cpu time limit used testing
phase  solve 
regarding test problems  used problems used ipc    
ipc  test problems used evaluating performance pbp s q respect
planners entered ipc   ipc  test problems  generally larger much
difficult ipc  problems  used evaluating pbp s q respect
ipc  planners  well experiments analysis 
experiments conducted using last version pbp s q 
exactly one entered ipc   pbp ipc  short  three reasons    a  pbp ipc  properly compiled lack c libraries
competition machine  discovered competition   b  pbp ipc  contains
minor syntax bug format output plans ipc  domains made
generated plans invalid program validating used competition  howey 
   code last version pbp available http   chronus ing unibs it pbp  

   

figerevini  saetti    vallati

long    fox          c  pbp ipc  s uses sgplan  without domain modification
script induces sgplan  behave domain independently  point  a  negatively affected
performance pbp ipc  s q  one incorporated planners  macro ff 
could run selected   b   many valid plans generated pbp ipc  s q
rejected plan validator ipc   point  c  changed composition clusters selected pbp ipc  q include sgplan   make performance
pbp q pbp ipc  q substantially different  difference planner
clusters selected pbp ipc  s pbp s concerns domain blocksworld 
cluster pbp ipc  s consists parlpg without macros  cluster selected pbp s
parlpg using bunching set macros computed wizard 
comparison ipc  planners  results pbp s q obtained
running last version machine similar  same cpu frequency amount ram 
one used obtain official ipc  data  an intel core tm  quad processor q    
  gbytes ram   comparison pbp s q ipc  planners  systems
run using machine ipc   a quad core intel xeon      ghz   gbytes
ram  ipc organizers made available us experiment  unless otherwise
specified  experiments conducted using quad core intel xeon tm      
ghz   gbytes ram 
experimental analysis required many days cpu time  unless otherwise indicated 
ipc     cpu time limit run pbp s q    minutes  pbp s q used
default configuration process  the cpu time limit simulated execution planner
cluster    minutes   planners configured portfolio run roundrobin scheduling described section      performance data planner pbp s q
incorporating randomized algorithm  i e   lpg  parlpg lama  obtained
single run considered problem instance 
experimental comparisons test instances generally use three alternative
methods  average performance data  ipc  score function  jimenez et al  
       wilcoxon sign rank test used planner cluster selection
configuration  given two compared planners problem set  average cpu time
planner computed problems set solved least one
compared planners  using cpu time limit      seconds  cpu time
planner solve problem  average plan quality computed
problems solved compared planners 
ipc  score function defined follows  concerning planning speed  planner
p solves problem using cpu time  gets time score equal   log    t t    
  
best time times required planners comparison solving
  concerning plan quality  p generates plan l actions solving   gets quality

score equal   l number actions shortest plan computed
compared planners   p solve   gets zero score  both
speed quality   given domain d  time  quality  score planner p
sum time  quality  scores assigned p considered test problems d 
ipc  score function speed refinement ipc  score function 
ipc  ipc  time scores defined according much slower planner performs
best performing one  ipc  score penalizes slowdowns heavily
   

fiplanning automatic portfolio configuration  pbp approach

ipc  score  experiments  observed using ipc  function  instead
ipc  function  gives similar general results slightly favorable pbp s 
wilcoxon sign rank test  null hypothesis performance
compared pair planning systems statistically similar  level confidence used
p          analysis involves comparison two planning systems 
then  order maintain confidence level used one hypothesis tested
 i e   pair planners compared   confidence level modified
bonferronis correction  shaffer         analysis  usage bonferronis
correction implies that  experimental result obtain wilcoxon sign rank test
derives comparison n planning systems  used confidence level      
n   
moreover  plan quality comparison using wilcoxon sign rank test  quality
plans computed two compared planners normalized length best plan
test problems solved planners  since wilcoxon sign rank test uses
ranking differences values sample pair  compared absolute
plan length directly  without normalization  differences values domains
could result unintended bias  small relative differences benchmark domain
large solution plans weighted important larger relative differences
domain small plans 
    overview configured portfolios generated pbp
section concerns experimental goal g   give information configured portfolios  multi planners  generated default version pbp s q  see table    
relative cpu times used automated portfolio configuration  size
training problem set used configuring pbp  table   shows planners clusters selected pbp every ipc    domain  planner cluster  table
indicates brackets sets macros selected pbp  available
http   chronus ing unibs it pbp  the computed planning time slots clusters
omitted brevity clarity   example  depots  pbp q selects cluster formed
 i  macro ff two learned macros frequently appear macro ffs
plans solving training problems   ii  parlpg without computed macros 
 iii  sgplan  set macros obtained chunking macro generation method
wizard  configured portfolios table   derive following observation 
experimental result       planner clusters selected pbp often formed different sets planners macros  overall nine basic planners helpful  each
selected pbp s q least once   different sets macros considered helpful
others  including  cases  empty set 
concerning planning speed  observe domains pbp s relies single
planner possibly using set macros  particular       considered domains
parlpg outperforms incorporated planners  hence domains
selected cluster contains parlpg  main reason better performance parlpg
uses lpg parameter configuration  automatically  optimized
every considered domain  greatly speedup planner  vallati et al       b  
   

figerevini  saetti    vallati

domains
ipc  domains
gold miner
matching bw
n puzzle
parking
sokoban
thoughtful
ipc  domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

pbp s

pbp q

yahsp  cl 
parlpg   
parlpg   
macro ff  m  
parlpg   
    yahsp   

macro ff  m    lama  b   lpg    
marvin      lama     lpg  b 
fast downward     lama     lpg    
     lama   
macro ff  m    lpg  b 
macro ff  m    marvin     lama   

sgplan   b 
parlpg  b 
macro ff  m    parlpg    
parlpg   
macro ff  m  
parlpg   
parlpg   
parlpg   
macro ff  m  

sgplan   cl       lama   
parlpg     lpg  b 
macro ff  m    parlpg      sgplan   ch 
marvin     parlpg   
     lama   
lama     parlpg   
parlpg     marvin    
lpg   
lama     sgplan   ch 

table    planners sets macros  in round brackets  cluster selected pbp
ipc    domains    indicate macros generated
selected  respectively  ch  b cl abbreviate three sets macros
chunking  bunching clumping generated wizard  respectively  m m 
five sets macros generated macro ff  order planners listed
clusters corresponds order run 

observed that  previous version pbp entered ipc  without parlpg 
selected clusters even varied 
interesting observe pbp selects macro ff configured portfolio
planner always uses non empty set macros  fact selected cluster macro ff always uses one among learned sets macros indicates macro
construction exploitation methods incorporated macro ff effective
planning system 
table   gives cpu times used pbp s different phases portfolio
configuration applied ipc  domains  machine quad core intel
xeon tm       ghz   gbytes ram used   configuration times pbp q
similar pbp s macro extraction cluster simulation phases 
higher performance measurement  incorporated incremental
planners use whole cpu time limit order find good quality plans  although
configuring pbp specific domain requires considerable amount cpu time 
considered configuration needs done once  since generated
configured portfolio  selected planner cluster  used problems domain 
finally  order understand small sets training problems sufficient
derive informative dsk test problems larger training ones 
   every ipc  domain  parameter configuration parlpg required      hours 

   

fiplanning automatic portfolio configuration  pbp approach

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

macro extraction
macro ff wizard
    
    
    
    
   
    
    
    
    
    
    
   
    
    
    
   
    
   

performance
measure
     
    
    
    
     
    
    
     
    

simulation  
selection
    
    
    
    
    
    
    
    
    

total
     
     
     
     
     
    
     
     
    

table    cpu hours used configuration pbp s ipc  domains  extraction
macros macro ff wizard   nd  rd columns   performance measurement phase   th column   cluster run simulation best cluster selection   th
column   total configuration time   th column  

compared performance pbp configured using default number    training problems using half one sixth training problems   the range problem
size three sets training problems   results analysis
table    course  lower number training problems is  cheaper
training pbp is  hand  dsk computed using training problems
sometime much less effective informative dsk obtaining using larger sets 
depots  pbp s dsk derived    training problems performs much
better dsks derived       training problems 
domains  performance pbp s three compared dsks similar same 
interesting observe depots domain cluster pbp s two
planners  domain  cluster pbp s derived    training problems consists
macro ff parlpg     training problems parlpg hands solution pbp s 
   training problems solution pbp s obtained macro ff 
dsk derived       training problems  either macro ff parlpg part
configured cluster pbp s makes pbp s performing worse 
depots  satellite tpp  pbp q dsk derived    training problems
performs much better dsk derived       training problems 
domains  performance pbp q similar same 
    performance pbp ipc    planners
section concerns experimental goal g   experimentally evaluate performance
pbp context ipc    aim showing competitive
recent planning systems using domain specific learned knowledge  since time
writing several ipc    planners relative domain specific knowledge available 
experiment used official competition data  cpu times  plan qualities
number solved problems  results obtained running last version pbp 
   

figerevini  saetti    vallati

ipc 
domains

depots
parking
domains
ipc 
domains

blocksworld
depots
parking
satellite
tpp
domains

time score
  
  
    
   
   
   
    
   

  
   
   
   

mean cpu time
  
  
  
    
           
                 
                 

  solved problems
  
  
  
  
 
 
 
 
 
  
 
  

quality score
  
  
  
    
         
    
   
   
   
   
   
    
   
    
    
   
   
               

mean plan length
  
  
  
                 
                 
    
    
    






                 

  solved problems
  
  
  
  
  
  
  
  
  
 
 
 
  
 
  
  
 
 
   
  
   

table    time quality score  average cpu time plan length number solved problems
pbp s q configured dsk computed using set either     default
version pbp         training problems  domains considered
ipc  domains training phase pbp s q derives different dsks
training problem sets different sizes 

learning track ipc  ipc   competing teams aware
domains used evaluation submitting systems  code submission 
contest two phases  first phase  domains released learning
parts planners run automatically derive  domain  additional
knowledge using set training problems domain  second phase  submitting learned knowledge ipc organizers  planners run relative
learned knowledge  resulting performance data compared using ipc score
function  interested reader find details ipc    organization
well collection short papers describing ipc    planners entered learning
track work fern et al          jimenez et al         
pbp  knowledge derived first phase competition portfolio configuration knowledge described previous section paper  knowledge learned ipc  planner obtusewedge consists special patterns  extend
notion n gram include argument relations  used aim
speeding enforced hill climbing search  yoon  fern    givan         ipc 
planning systems wizard ff wizard sgplan learn set macro actions planners sgplan   respectively  ipc  planners  bootstrap planner learns
domain specific heuristic combining set existing heuristics weights obtained
evaluating performance heuristics training problems  arfaee  zilles   
holte         finally  knowledge learned oaldaeyashp  brendel   schoenauer 
       parlpg  fast downward autotune speed fast downward autotune quality  fawcett
et al         consists domain specific parameter configurations 
table   gives overall experimental evaluation best performing planners
ipc   using ipc  domains  best performing planners ipc   using
   

fiplanning automatic portfolio configuration  pbp approach

best ipc  planners
pbp s
pbp q
obtusewedge
pbp ipc  s
pbp ipc  q
rfa 
wizard ff
wizard sgplan
best ipc  planners
pbp s
pbp q
bootstrap planner
fast downward autotune speed
fast downward autotune quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
lama     

problem solved
   
    
    
    
    
    
    
    
    

time score
 max       
     
    
    
    
    
    
    
    

quality score
 max       
     
     
    
     
     
    
    
    

problem solved
   
    
    
    
    
    
    
     
     
     
     

time score
 max       
     
    
    
     
    
    
     
     
    
       st sol  

quality score
 max       
     
     
     
     
    
    
     
     
     
      last sol  

table    percentage solved problems within    cpu minutes  time quality scores
pbp s q  best performing  planners took part learning track
ipc    domains problems ipc     larger scores indicate better
performances  pbp ipc  pbp ipc  indicate versions pbp took part
ipc  ipc   respectively  lama      winner deterministic track
ipc  

ipc  domains   terms percentage solved problems  planning speed plan quality 
compared planners run relative learned knowledge  data
table    following general experimental result derived 
experimental result       ipc    domains problems  pbp s generally
faster compared ipc    planners  pbp q performs generally better terms plan
quality  pbp s q solves many problems  
remarkably  pbp s q solves high percentage ipc    benchmark problems
within    cpu minutes  pbp q almost always computes plan better
plan computed competitor  contrast  time score pbp q low  since
   version pbp used comparison suffer technical problems indicated section
    affected performance pbp ipc   ipc  planners may suffered similar
problems  implementation might improved versions considered 
however  note even version pbp s q entered ipc  performs generally better
competing planners 

   

figerevini  saetti    vallati

pbp q usually runs one planner stops selected planners
terminate cpu time limit exceeded 
analysis competition results  planner cpu times plan qualities  using
wilcoxon sign rank test instead ipc score functions performance comparison
confirms pbp q generates significantly better quality plans  z          p        
    
p value obtained analysis        with z value equal         since p value
adjusted critical value      
    null hypothesis  the performance pbp
similar performance ipc    planners terms speed  accepted 
thus research hypothesis  the performance pbp statistically different  rejected 
however  worth pointing critical value       quite hard reach 
especially given apply experiment wise error adjustment  set
less stringent critical value  say       adjusted critical value would     
           
p value       would significant 
table   gives details performance comparison ipc  domain 
terms speed  pbp s best performance eight nine domains considered analysis  domain perform best parking 
fast downward autotune speed performs better  similarly  terms quality  pbp q
best performance seven nine domains  performs well parlpg
pbp q one domain  spanner   performs worse fast downward autotune speed
two domains  parking tpp   worth noting principle portfolio approach
incorporate planners promising attempting problems domain 
current version pbp integrates planners established state of the art
pbp developed  time fast downward autotune speed available  results table   indicate portfolio based approach would reach better
performance  incorporated planner  instance  likely pbp would
select planner domain parking  greatly improving performance domain 
finally  comment relative performance pbp winner deterministic satisficing track ipc        version lama  course  cannot expect
domain independent planner  lama  performs better planner exploiting
 learned  specific domain knowledge  hand  definitely desired property
way around holds  planning system uses form  automatically
acquired  domain specific knowledge effective performs better state ofthe art domain independent planner use additional knowledge 
last lines tables     indicate global domain by domain performance
lama      respect planners learning track ipc   considering
score functions competition track   comparison  cpu time limit used
run lama    minutes  time limit one used run pbp s q
planners took part learning track ipc   worth noting
ipc  domains learning track propositional  ipc  problems require
optimization explicit specified plan metric  problems  lama
pbp minimize number actions  seen pbp s q performs substantially
   although experimental comparison considers planning time scores plan quality scores 
noted deterministic track ipc  focused plan quality  hence lama     
presumably developed focusing quality rather speed  sense  results plan
quality comparison lama      meaningful planning speed 

   

fiplanning automatic portfolio configuration  pbp approach

ipc  planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
pbp s
pbp q
lama   

solved problems

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

 
  
 
 
 
  
  
  
  
 

  
  
  
  
  
  
  
  
  
  

 
  
 
 
  
  
  
  
  
 

 
  
 
 
  
  
  
  
  
 

 
  
 
 
 
 
 
 
 
 

 
  
  
 
  
  
  
  
  
  

 
  
 
 
  
  
  
  
  
  

 
 
 
 
  
  
  
  
  
 

 
  
  
 
  
 
 
  
  
  

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

   
    
   
   
   
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    

   
    
   
   
    
    
    
    
    
   

   
    
    
   
    
    
    
    
    
   

   
    
    
   
   
   
    
    
    
   

   
    
    
   
    
    
    
    
    
    

   
    
    
   
    
    
    
    
    
   

   
    
    
   
    
    
    
    
    
   

   
    
    
   
    
   
   
    
    
    

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

   
    
   
   
   
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    

   
    
   
   
    
    
    
    
    
   

   
    
   
   
    
    
    
    
    
   

   
    
    
   
   
   
    
    
    
   

   
    
    
   
    
    
    
    
    
    

   
    
    
   
    
    
    
    
    
    

   
   
   
   
    
    
    
    
    
   

   
    
    
   
    
   
   
    
    
    

ipc  planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
pbp s
pbp q
lama      st sol  

time score

ipc  planners
bootstrap planner
fda speed
fda quality
oaldaeyashp
parlpg
pbp ipc  s
pbp ipc  q
pbp s
pbp q
lama     last sol  

quality score

table    number solved problems  time quality scores  best performing 
ipc  planners ipc  domain  fda  lama     bw sat abbreviate
fast downward autotune  lama       blocksworld satellite  respectively 

better lama       results table   show pbp s q solves many ipc 
problems  achieves considerably better overall time quality scores respect
lama     s first best quality solutions  respectively  results table   show
that  pbp s much higher speed performance every domain  much higher
quality performance domains  pbp q much higher quality performance
seven domains  performs similarly two domains  much
higher speed performance domains 
moreover  since deterministic track ipc  cpu time limit    minutes 
compared lama      pbp s q problems learning track using
limit first planner  keeping    cpu minutes second  extra cpu
time lama      considerably change results comparison  overall 
   

figerevini  saetti    vallati

total time scores lama      pbp s q                   respectively 
total quality scores lama      pbp s q                   respectively 
lama      solves     problems pbp s q solve         problems 
previous experimental analysis pbp s q lama      summarized
following claim  suggesting portfolio based planner  automatically  configured
given domain  perform much better state of the art fully domain independent
planner 
experimental result       benchmark domains learning track ipc  
configured versions pbp s q perform better ipc  winner deterministic
track 
since pbp without configuration knowledge  pbp nok  fully domain independent
planner  interesting see well pbp nok performs w r t  lama      
experimental comparison  used benchmark domains problems deterministic track ipc   cpu time limit ipc  run     minutes  
moreover  since deterministic track ipc  focused plan quality  measured total
action cost  considered quality version pbp nok  lama      optimizes
total action cost  pbp nok q incorporated planners consider number actions
plan quality  although analysis relies total action cost  hence somewhat
favor lama       observed pbp nok q competitive lama      
problems ipc  deterministic track  total quality score number solved
problems slightly lower pbp nok q lama                   
         respectively   lower quality score pbp q mainly two
fourteen ipc  domains  elevator parcprinter   pbp nok q obtains much
lower scores                     respectively   test problems
learning track ipc   pbp nok q performs even better lama       ipc quality
score        versus       solved problems      versus      

experimental result       benchmark domains deterministic learning
tracks ipc   pbp q without configuration knowledge  pbp nok q  competitive
winner ipc  deterministic track 

given pbp q without configuration performs already well  performance improvement obtained exploiting computed configuration knowledge even notable 
section     shows portfolio configuration pbp s q useful improve
performance 
    performance pbp planner portfolios
section concerns experimental goal g   compare pbp two planner portfolio
approaches  fdss  helmert et al         bus  roberts   howe        
   

fiplanning automatic portfolio configuration  pbp approach

      pbp versus fdss
table   shows performance pbp s q w r t  fdss without using macros   
results comparison summarized follows 
experimental result       benchmark domains learning track ipc  
terms number solved problems pbp s q performs always better fdss  except
domains rovers tpp  fdss solves problems pbp s pbp q 
respectively  terms time score  pbp s always performs better fdss  terms
quality score  pbp q performs always better except tpp 
think least four reasons experiments pbp performed generally
better fdss  main reason that  pbp separately configured every
considered domain  fdss always uses configuration determined problem
instances ipc    designed using problem distributions quite different
learning track ipc   seipp et al          reasons  a  diversity
planning methods implemented planners incorporated pbp fdss   b 
usage macros pbp s q   c  different portfolio configuration techniques
two compared systems  concerning  a   consider instance domain spanner 
pbp s q outperforms fdss pbps configured portfolios use parlpg lpg  see table
    every planner incorporated fdss uses heuristic forward search techniques 
parlpg lpg uses heuristic techniques searching space partial plans  seems
effective domain   b   tried learn macros fdss using wizard 
unfortunately useful macro learned planning system  therefore  tested
performance fdss using macros learned wizard selected pbp s q
planners configured portfolios  see table     results table   indicate
that  using macros sometimes greatly improves performance pbp 
really effective fdss 
finally  order better understand importance  c   developed compared pbp new variant fdss  called fdssd   restricting differences
fdss pbp configuration techniques  specifically  fdssd following similarities differences w r t  original fdss  fdssd uses configuration
techniques fdss  configures planner portfolio separately input domain
 instead set domains altogether   uses macros  integrates planners
pbp  instead set forward state planners   then  important differences
pbp fdssd method planner cluster selection scheduling
strategy used running planners forming clusters that  described section   
substantially different 
pbp  computed two sets domain optimized portfolio configurations
fdssd   fdss sd focusing speed  fdss qd focusing plan quality  ipc 
domains except depots  planner clusters selected fdss s
pbp s  depots  cluster fdss s consists macro ff using macro set m 
macro ff using macro set m   cluster pbp s consists parlpg using macro
macro ff using macro set m   domain fdss s pbp s
    version fdss run experiment uses       variants fast downward analyzed
helmert et al         

   

figerevini  saetti    vallati

planners
pbp s
pbp q
fdss
fdss m
pbp nok s
pbp nok q

  solved problems

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

  
  
 
 
  
  

  
  
  
  
  
  

  
  
 
 
 
 

  
  
 
 
  
  

 
 
 
 
 
 

  
  
  
  
  
  

  
  
  
  
  
  

  
  
 
 
  
  

  
  
  
  
 
  

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

    
    
   
   
   
   

    
    
   
   
   
   

    
    
   
   
   
   

    
    
   
   
    
   

   
    
   
   
   
   

    
    
    
    
   
   

    
    
   
   
   
   

    
   
   
   
   
   

    
   
   
   
   
   

barman

bw

depots

gripper

parking

rovers

sat

spanner

tpp

    
    
   
   
    
    

    
    
    
    
    
    

    
    
   
   
   
   

    
    
   
   
    
    

   
   
   
   
   
   

    
    
    
    
    
    

    
    
    
    
   
   

    
    
   
   
    
    

    
    
    
    
   
   

planners
pbp s
pbp q
fdss
fdss m
pbp nok s
pbp nok q

time score

planners
pbp s
pbp q
fdss
fdss m
pbp nok s
pbp nok q

total
   
   
  
  
   
   

total
     
    
    
    
    
    

quality score
total
     
     
    
    
     
     

table    number solved problems  time quality scores pbp  pbp nok  fdss
with without using macros ipc  domain  fdss m  bw sat abbreviate fdss using macros  blocksworld satellite  respectively 

cluster  cluster formed single planner  hence  running sequential
scheduling round robin scheduling thing  compared planner
portfolios performance 
planner clusters selected fdss q table    domains gripper  satellite
tpp  pbp q but  cases formed
one planner  domains satellite gripper observed fdss q performs
differently pbp q different scheduling strategy  table   shows results experimental comparison pbp fdssd  results omitted
compared clusters formed single planner   overall 
derive following observation 
experimental result       almost benchmark problems domains
learning track ipc   pbp s fast fdss sd   depots slightly faster 
pbp q computes plans always good better computed fdss qd  
solves problems 
performance gap pbp fdssd lower gap pbp
fdss  depots pbp s performs slightly better terms speed number
solved problems  ipc  domains pbp q performs considerably better
terms plan quality  rationale behavior that  show section     
   

fiplanning automatic portfolio configuration  pbp approach

ipc  domain
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

fdss qd
 cl   ff  l 
 b    ch   mff  m     b  p  l  lpg  ch   lpg  b 
lpg  m   ch   mff  m     cl    ch    cl   p  mff  m    l
m  p
 ch   ff  l
ff  mff  m    l  lpg
p 
p
l      ch 

table    planners sets macros  in round brackets  cluster selected fdssd
ipc  domains  s  l  m  mff p abbreviate sgplan   lama  marvin 
macro ff parlpg  respectively  ch  b cl three sets
macros chunking  bunching clumping generated wizard  m m 
five sets macros generated macro ff 

running planner clusters round robin scheduling robust running
sequentially using possibly inadequate values planning time slots  another explanation 
especially high performance difference terms plan quality  different way
pbp fdssd explore portfolio configuration spaces  fdssd searches
planner cluster use hill climbing algorithm space possible clusters 
pbp explores whole space possible clusters  with bound number planners
clusters   selected clusters pbp s fdss sd almost always
ipc  domains considered training problems configuring planner portfolio
focusing speed quite easy  cases single planner  possibly using macros 
outperforms every planner  contrary  domains training
problems  configuring planner portfolio focusing plan quality difficult
fdssd   search space contains local minima prevent fdssd finding
best performing configuration  planner cluster   complete exploration search
space allows pbp identify it 
worth noting space planner clusters pbp much smaller
spaces fdss fdssd   since space pbp cannot two different clusters
formed planners relative macros  different relative sequences
planning time slots  the sequence planning time slots planner relative
set macros derived according default pcpv   case  space
clusters pbp would orders magnitude greater  time required pbp
simulating cluster execution would negligible w r t  time
configuration phases  see table    
performance comparison pbp s fdssd using wilcoxon sign rank test
gives statistical result compatible performance data table  
experimental result        ipc  domains  statistical difference
planning cpu times pbp s fdss sd  z          p           while 
   

figerevini  saetti    vallati

ipc 
domains
depots

max
score
  

time score
pbp s
fdss sd
    
    

mean cpu time
pbp s
fdss sd
    
     

  solved problems
pbp s
fdss sd
  
  

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

max
score
  
  
  
  
  
  
  
  
  
   

quality score
pbp q
fdss qd
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
fdss qd
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved problems
pbp q
fdss qd
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

table    maximum score  time quality score  average cpu time plan length number
solved problems pbp fdssd benchmark problems depots
planning speed  ipc  domains plan quality 

terms plan quality  pbp q performs significantly better fdss qd  z         
p          
      pbp versus bus
although bus originally designed generate domain independent configured planner portfolio  fdss  principle used build domain specific configured
portfolios  domain specificity obtained simply training problems domain  fully automated executable bus available 
experimental results presented roberts howe        derived simulation
 roberts   howe         thereby  order compare pbp bus  implemented
bus approach using planners macros integrated pbp  generated
domain specific configured portfolios using implementation bus 
bus selects planners configured portfolio greedy set covering
approximation algorithm sets problems solved incorporated planners 
planners forming clusters ordered according ranking algorithm
simon kadane         greedy set covering approximation algorithm iteratively
selects planner reduces set covering problem smaller one  original
input set fully covered  cormen  stein  rivest    leiserson         let planning
domain  p set selected planners  set test problems cover  initially  p
empty contains    training problems  iteration  algorithm chooses
planner largest set solved problems s  removes problems
s  adds selected planner p   number planners largest set
solved problems greater one  algorithm selects first evaluated planner
   

fiplanning automatic portfolio configuration  pbp approach

 the planner evaluation order random   process terminates empty 
resulting set p contains planners configured portfolio 
experimentally observed almost every considered domain  since
one incorporated planner solves training problems domain  set planners
forming cluster selected bus domain consists one planner  except
domain parking two selected planners  lama using macro set clumping   moreover  choice planner among solve training problems
drastically affected random order greedy set covering approximation
algorithm evaluates coverage planners  hence  derive indication
performance reached implementation bus  ran portfolio configuration bus nine times  tested obtained nine configured portfolios  analyzed
three sets experimental results cpu time three sets experimental results
plan quality  three sets derived using  median performing configured
portfolio nine generated considered domain  best worst performing configured portfolio possible portfolios generated greedy
set covering approximation algorithm bus  results experimental comparison
given table    summarized following observation 
experimental result       benchmark domains learning track ipc  
terms time score average cpu time  pbp s q performs much better worst
median configured portfolios derived bus  pbp s performs slightly better
best configured portfolio oracle would select among derived
bus  pbp q performs slightly worse  terms problem coverage  the criterion used
bus select planners cluster   pbp s solves number problems
best configured portfolio derived bus 
results table    show performance obtained configured portfolios
generated bus varies greatly  indicating planner selection method bus
accurate derive efficient domain specific configured portfolios  think
main reason planner selection bus considers problem
coverage ignores cpu time plan quality incorporated planners  however 
important note planner selection method bus originally proposed
different kinds data sets  problem instances set domains considered altogether
different used experiment  different purpose  generating
domain independent planner portfolio   bus prominent approach showed
good performance  roberts   howe        
    effectiveness computed configuration knowledge
section concerns experimental goal g   order understand effectiveness
automated portfolio configuration pbp  compare performance pbp
computed configuration knowledge  pbp s q   configuration  pbp nok s q  
random configuration  pbp rand s q   pbp nok s q  planners initial
portfolio selected  macros used  planning time slots
planners  execution order random  pbp rand s q  pbp nok s q
except subset three randomly chosen planners  possibly empty 
   

figerevini  saetti    vallati

ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

pbp s

domains

    
    
    
    
   
    
    
    
    
     

ipc 
domains

pbp q

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

    
    
    
    
   
    
    
    
    
     

time score
bus
w s
m s
   
    
   
    
   
    
    
    
   
   
   
   
   
   
    
    
   
   
    
     
quality score
bus
w q
m q
   
    
   
    
   
    
    
    
   
   
   
    
   
   
    
    
   
    
    
     

mean cpu time
bus
w s
m s
b s
   
     
   
   
   
     
     
    
     
     
           
    
     
    
    
     
     
     
     
    
     
     
    
    
     
     
    
    
     
     
    
     
     
     
     
    
     
     
    

  solved problems
pbp s
bus
w s m s b s
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
  
 
  
  
  
 
 
  
  
  
  
  
  
 
  
  
   
  
       

mean plan length
bus
w q
m q


     
     
     
     
     
     
    
    
     
     


     
     


     
     

  solved problems
pbp q
bus
w q m q b q
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
  
 
  
  
  
 
 
  
  
  
  
  
  
 
  
  
   
  
       

pbp s

b s
    
    
    
    
   
    
    
    
    
     

pbp q
b q
    
    
    
    
   
    
    
    
    
     


     
     
     
    
     

     

     

b q

     
     
     
    
     

     

     

table     time quality score  mean cpu time plan length number solved problems
pbp s q  worst  median best portfolios derived
using bus ipc  domains  w s  m s b s denote worst  median
best portfolios among bus derive lowest  median 
highest time score considered ipc  test problems  respectively  similarly
w q  m q b q denote worst  median best portfolios lowest 
median  highest quality score  respectively 

randomly chosen set learned macros used  instead planners  different
random configuration pbp s q generated every ipc  problem 
figure   gives overall picture results problems ipc  domains
considering different amounts cpu times portfolio configuration  specifically 
time x axis cpu time limit given run planner  with set
macros  performance measurement simulation phase   simulated  run
candidate clusters planners planning cluster selection ordering phase 
run configured portfolio test phase  marked points
curves pbp s q correspond performance scores different configured portfolios
obtained different considered cpu time limits  results indicate that  every
considered cpu time limit configuration phase  pbp s q clearly performs better
pbp nok pbp rand  moreover  refined analysis considering domain separately
shows pbp s q best performance every single considered domain 
terms problem coverage every considered cpu time limit gaps
   

fiplanning automatic portfolio configuration  pbp approach

ipc  domains

time score
   

pbp s
pbp nok s
pbp rand s

   

ipc  domains

quality score
   

pbp q
pbp nok q
pbp rand q

   

   

   

   

   

  

  

  

  

 

 
 

  

   

    

 

  

   

    

figure    time score  left plot  quality score  right plot  pbp  pbp nok pbp rand
respect increasing cpu time limit  ranging        seconds 
ipc  domains 

pbp s q two compared version pbp similar gaps plots
figure   
experimental result       computed configuration knowledge considerably improve performance pbp s q w r t  unconfigured randomly configured versions
pbp  pbp nok pbp rand  respectively  
terms planning speed  performance comparison three considered versions pbp s q  using wilcoxon sign rank test gives similar general result  pbp s
statistically faster versions  z           p        
     terms plan
quality  pbp q performs statistically better unconfigured version  z          
p        
     comparison pbp q pbp rand q  analyzed   
    problems solved pbp q  pbp rand q solves problems plan
quality comparisons consider problems solved compared planners  results wilcoxon test indicates pbp q performs similarly pbp rand q
 z          p           however  noted low number considered
problems makes statistical comparison wilcoxon sign rank test
accurate informative deriving general conclusions relative performance
case 
tested version pbp nok incorporated planners run
using predetermined time slot sequence spre planner runs ordered using
method used pbp  considers relative performance planners
set training problems instead random order  overall performance
pbp nok remains much worse performance  the planner cluster selected by 
configured version pbp 
table    analyzes impact performance using dsk  i e   pbp  computed
configuration knowledge  best performing planners entered learning track
ipc     results comparison confirm strong positive impact pbps dsk 
   

figerevini  saetti    vallati

planner
best ipc  planners
obtusewedge
pbp ipc  s
pbp ipc  q
wizard ff
wizard sgplan
pbp s
pbp q
best ipc  planners
bootstrapplanner
fast downward autotune speed
fast downward autotune quality
oaldaeyashp
parlpg speed
pbp ipc  s
pbp ipc  q
pbp s
pbp q

solved    

time

quality

     
    
    
   
   
    
    

     
      
    
     
     
     
    

     
   
    
    
   
   
     

    
     
     
    
    
    
    
      
      

    
     
     
    
     
      
     
      
     

     
     
     
    
     
     
     
     
     

table     performance gaps best performing ipc    planners with without dsk
terms percentage solved problems  time quality scores ipc   
benchmark domains problems  planner rfa  omitted works
dsk 

experimental result       ipc  domains problems  dsk computed
pbp s pbp q strongest impact among dsk ipc  planners terms
improved speed  time  plan quality  quality   respectively  dsk computed
obtusewedge strongest impact terms percentage additional solved ipc 
problems 
reason impact dsk computed pbp quite low terms additional
solved ipc  problems pbp s q solves almost problems even without dsk 
experimental result       ipc  domains problems  dsk computed
pbp s strongest impact terms improved speed  time  among dsk
ipc  planners  use computed dsk fast downward autotune speed
strongest impact terms percentage additional solved problems improved plan
quality 
although terms percentage additional solved problems improved plan quality use dsk pbp s q highest impact  leads high improvements pbp s q  allowing achieve performance generally better
fast downward autotune speed  see quality score column table    
finally  conducted experiment understand configuring pbp specific domain generates dsk leads better performance w r t  configuring planner portfolio
   

fiplanning automatic portfolio configuration  pbp approach

set domains altogether  table    compares performance pbp s q
dsk  dsk obtained without using macros  pbp nom s q   configuration knowledge computed across ipc  domains  pbp alld s q   planner cluster pbp alld s
formed lpg sgplan   planner cluster pbp alld q formed lama 
marvin sgplan   results table    indicate that  even without considering
usage macros  portfolio configuration considered domains together greatly
decreases performance pbp 
experimental result       ipc  domains  terms time score  average cpu
time number solved problems  pbp s performs much better pbp nom s
pbp alld s  terms quality score number solved problems  pbp q performs much
better pbp nom q pbp alld q  terms average plan length  pbp q
pbp nom q perform usually better pbp alld q 
results wilcoxon sign rank test applied comparison pbp
pbp nom confirm that  ipc  domains  pbp s significantly faster
pbp nom s  z          p          and  terms plan quality  pbp q performs significantly better pbp nom q  z          p           high performance gap
pbp pbp nom  favor pbp  clearly indicates usefulness using macros 
showing portfolio planners macros much efficient portfolio
planners 
    accuracy planner cluster selection
section concerns experimental goal g   order test accuracy planner
cluster selection pbp  carried three related experiments performance
pbp using computed configuration knowledge compared performance
 a  every basic planner incorporated initial portfolio   b  best performing
incorporated planner  without using macros  considered domain   c  best
performing planner cluster  possibly using macros  considered domain 
following  section       presents experiments  a   b   section       experiment  c  
      pbp basic portfolio planners
figure   gives overall picture performance pbp s q w r t  performance
basic planners  without macros  terms speed plan quality  using cpu time limit
run ranging        seconds  time quality scores compared
system derived summing corresponding scores obtained system
ipc  domain  analysis indicates that  every considered cpu time limit  pbp s
dsk generally much faster incorporated basic planners  pbp q generates
better quality plans 
experimental result       ipc  domains  basic planner considered input portfolio pbp achieves overall performance better similar
performance pbp s speed  pbp q plan quality  except low
cpu time limits  compared planners perform similarly terms plan quality  
   

figerevini  saetti    vallati

ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains
ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

time score
pbp s
nom
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
           

alld
    
   
   
    
   
    
    
    
   
    

mean
pbp s
   
   
    
    

    
    
    

    

cpu time
nom
alld
    
     
    
     
    
     
    
     


    
     
    
     
    
     


    
     

  solved problems
pbp s nom alld
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
  
  
  
  
  
  
  
  
  
  
  
 
   
   
   

quality score
pbp q
nom
alld
    
    
   
    
    
    
    
   
   
    
    
    
   
   
   
    
    
    
    
    
   
    
    
   
    
    
    
                

mean
pbp q

     
     
     
    
     
     
     
     
     

plan length
nom
alld


           
           
           
    
    
           
           
           
           
           

  solved problems
pbp q nom alld
  
  
 
  
  
  
  
 
 
  
  
  
 
 
 
  
  
  
  
  
 
  
  
 
  
  
  
   
   
  

table     time quality score  average cpu time plan length number solved problems speed quality versions pbp  pbp nom  abbreviated nom 
pbp alld  abbreviated alld  ipc  domains 

results wilcoxon sign rank test applied experiment confirm pbp s
significantly faster every incorporated planner  z          p        
    
terms plan quality pbp q performs significantly better  z         
p        
    except parlpg  according wilcoxon sign rank test  statistical
difference quality performances pbp q parlpg  discrepancy
results analysis figure   generated different ways
unsolved problems handled quality score function wilcoxon sign rank
test comparing plan quality performance  first considers problems attempted
compared planners  explicitly penalizing planner zero score unsolved
problem   second considers subset test problems solved
compared planners  pbp q solves many problems parlpg           
reflected relative curves figure   plan quality 
observed domains rovers  satellite gripper solutions pbp q
computed parlpg  domains blocksworld depots  pbp q using parlpg solves
    problems  respectively  considered domains  parlpg part
selected cluster running planners  better understand importance parlpg pbp 
analyzed performance version pbp incorporate parlpg 
   

fiplanning automatic portfolio configuration  pbp approach

ipc  domains

time score
   

pbp s
fd
lama   st sol  
lpg td   st sol  
macro ff
marvin
metric ff
sgplan 
yahsp
parlpg

   
   
   
  

ipc  domains

quality score
   

pbp q
fd
lama  last sol  
lpg td  last sol  
macro ff
marvin
metric ff
sgplan 
yahsp
parlpg

   
   
   
  
  

  

  

 

 
 

  

   

    

 

  

   

    

figure    time  left plot  quality  right plot  scores pbp s q relative computed configuration knowledge compared time quality scores
basic incorporated planners ipc  domains  using increasing cpu time
limit  fd abbreviates fast downward 

ipc  domains  pbp s q incorporate parlpg  problems solved
pbp s q decrease         and  terms time score  pbp s without parlpg
performs worse parlpg        vs          however  terms quality score  pbp q
without parlpg performs still much better parlpg        vs          results
analysis show performance pbp terms speed drastically affected
parlpg  hand  importance parlpg pbp q limited
parameter configuration parlpg focused speed 
two main reasons explaining observation derived experimental result      
globally best performance pbp s q basic incorporated planner
 even parlpg  outperforms others every considered benchmark domain 
pbp effectively selects combines efficient planners domain
consideration  possibly using useful set macro actions  
one may wonder picture different pbp s q compared basic
incorporated planners using  possibly empty  set macros  figure   shows results
comparison  using cpu time limit run ranging        seconds 
sake readability  names    combinations basic incorporated planners
sets macros  learned wizard macro ff  omitted  time quality
scores compared system derived summing corresponding scores obtained compared system ipc  domain  domain combination
planner p macro set empty  domain combination
restricted p  
results figure   show that  terms cpu time  ipc  domains
basic planner pbp that  using learned macro set  achieves overall performance
better similar performance pbp s  except low cpu time limits 
compared planners macros perform similarly   terms plan quality 
cpu time limits lower    seconds  exist basic incorporated planners using
macros perform better pbp q  high cpu time limits  pbp q performs much
better every compared planner macros  combinations basic incorporated
   

figerevini  saetti    vallati

ipc  domains

time score
   

pbp s
planner set macros

   

ipc  domains

quality score
   

pbp q
planner set macros

   

   

   

   

   

  

  

  

  

 

 
 

  

   

    

 

  

   

    

figure    time  left plot  quality  right plot  scores pbp s q relative computed configuration knowledge compared time quality scores   
combinations incorporated planners sets macros ipc  domains 

planners sets macros low cpu time limits perform better pbp q
sgplan  using set learned macros  parlpg using macro set bunching  yahsp
using macro set clumping  low cpu time limits  combinations planners
macros overall performance better pbp q  essentially dominate
single domain  barman sgplan   blocksworld parlpg yahsp 
since analysis figure   considered test domains altogether  order verify
supposition given single domain pbp performs better worse
every basic incorporated planner  compared pbp s q best performing basic
planner  according test problems relative ipc scores  considered
domain  planner  indicated bestp s q  single planner  without macros 
would use oracle specifying best basic incorporated planner
test problems specific domain  results experiment shown table    
domains gripper  rovers  satellite spanner planner cluster pbp s
bestp s  considered domains  time score average
cpu time pbp s much better bestp s  terms problem coverage  three
domains pbp s solves much higher number problems  domains
problem coverage bestp s  results show that  order achieve
higher planning speed  using cluster planners useful set macro actions selected
pbp s much better using single planner without macros  sections      
    study usefulness using properly selected cluster planners
non empty set macros  respectively 
experimental result       ipc  domain basic planner
considered input portfolio pbp s faster  achieves better time score  solves
problems pbp s 
concerning plan quality  bestp q contributes great deal success pbp q  since
domains except barman spanner included cluster selected pbp q
 see table     barman  gripper  parking  rovers  satellite  spanner  tpp 
cases bestp q provides solution pbp q 
   

fiplanning automatic portfolio configuration  pbp approach

ipc 
domains

bestp s

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

sgplan 
parlpg
parlpg
parlpg

parlpg
parlpg
parlpg
parlpg


domains
ipc 
domains

bestp q

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp

sgplan 
parlpg
parlpg
parlpg

parlpg
parlpg
parlpg
lama


domains

max
score
  
  
  
  
  
  
  
  
  
   

time score
pbp s
bestp s
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean cpu time
pbp s
bestp s
   
    
   
    
     
     
    
    
     
     
    
    
    
    
    
    
     
     
    
    

  solved problems
pbp s
bestp s
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

max
score
  
  
  
  
  
  
  
  
  
   

quality score
pbp q
bestp q
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
bestp q
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved problems
pbp q
bestp q
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

table     maximum score  time quality score  average cpu time plan length  number
problems solved pbp s q best planner  bestp s q  ipc 
domains 

experimental result       ipc  domains  terms plan quality  relative
performance pbp q best performing basic planner  bestp q  oracle would
choose generally slightly favor pbp q  blocksworld depots pbp q performs
better  parking bestp q performs slightly better  rest ipc  domains
perform similarly 
concerning parking  table    shows that  used benchmark problems 
bestp q planner ff  correctly contained cluster selected pbp q
domain  see table     however  cluster includes additional planner  lama 
that  tested problems considered cpu time limit  give useful
contribution pbp q  no solution found lama   introducing noise
cluster selection  fact parking useful set macros computed
pbp q main reasons pbp q performs slightly worse bestp q planners
considered test problems domain parking 
wilcoxon sign rank test applied experiment confirms that  overall  pbp s
significantly faster bestp s planner domain  z          p        
terms plan quality  test results indicate performances pbp q
   

figerevini  saetti    vallati

bestp q planner significantly different  z          p           words 
test cannot derive one system performs statistically better other 
finally  compared pbp s q best performing combination p  
basic planner p non empty set macros learned p ipc  domain 
except spanner macro computed  experiment  best macro set
p domain chosen considering performance p   training
problems d  overall  terms speed score problem coverage  pbp s performs
similarly p   five domains  performs much better three domains 
terms quality score  pbp q performs similarly four domains much better
four domains  one reasons p   perform worse pbp s q
domains macros harmful  pbp s q correctly decides use them 
discussed context experiment presented section     
analyze usefulness macros accuracy selection pbp s q 
      pbp best performing portfolio configuration
order test accuracy planner cluster selection pbp s q 
compared pbp computed configuration knowledge best performing cluster
planners  with useful macros  considered test domain   the worst performing
cluster solves problem   table    shows results experiment considering two
best performing clusters three planners  considered ipc  domain 
bestc s planner cluster highest time score among obtained
pbp s using default pcpv  similarly  bestc q planner cluster highest
quality score  therefore data time quality score columns bestc s q
maximum values time quality score sums planner clusters set test
problems ipc  domain 
every domain except depots  time score pbp s one
best cluster much greater zero  and thus much better score
worst cluster   terms average cpu time problem coverage performance
pbp s best cluster almost always same  domain depots pbp s
bestc s perform slightly differently  case  planners relative macros
cluster pbp s different bestc s  particular  macro ff selected
different set macros  makes pbp s slightly slower 
concerning pbp q  overall  terms plan quality high performance gap
respect best cluster  although pbp q performs worse domain tpp 
domain  training problems used pbp q informative enough  observation
supported fact best cluster computed using training problems  instead
test problems  different one derived test problems 
hand  observed that  size training problems similar size test
problems  configured portfolios pbp q bestc q same 
wilcoxon sign rank test confirms that  overall  performance pbp s q
best cluster statistically significantly different  z          p          speed
analysis  z          p          quality analysis   moreover  observed
pbp s q without configuration  pbp nok s q  performs generally much worse
   

fiplanning automatic portfolio configuration  pbp approach

ipc 
domains

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains
ipc 
domains

bestc s
sgplan   b 
parlpg  b 
macro ff  m  
parlpg   
macro ff  m  
parlpg   
parlpg   
parlpg   
macro ff  m  

bestc q

barman
sgplan   cl 
blocksworld
parlpg   
depots
mff m   mff m  
gripper
parlpg   
parking
   
rovers
parlpg   
satellite
parlpg   
spanner
lpg   
tpp
macro ff  m  
domains

 

max
score
  
  
  
  
  
  
  
  
  
   

time score
pbp s bestc s
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean cpu time
pbp s
bestc s
   
   
   
   
     
    
    
    
     
     
    
    
    
    
    
    
     
     
    
    

  solved probs
pbp s bestc s
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

max
score
  
  
  
  
  
  
  
  
  
   

quality score
pbp q bestc q
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
bestc q
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved probs
pbp q bestc q
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
  
  
   
   

table     maximum score  time quality score  average cpu time plan length  number
problems solved pbp s q best cluster  bestc s q  ipc 
domains  mff abbreviates macro ff  order planners listed
cluster depots corresponds order run 

best cluster speed quality  overall  experimental results derive
following observation 
experimental result       ipc  benchmarks  terms time score  average
cpu time problem coverage  pbp s performs well or  depots  similarly
bestc s  terms quality score  average plan length problem coverage  pbp q performs well similarly bestc q  except tpp  plan quality score
problem coverage pbp q worse 
table    shows often oracle would use single planner either quickly
solve ipc  problems compute high quality plans them  hence  one may argue
using clusters formed one planner  possibly set useful macros 
useful  rationale best clusters table    formed single planner
often incorporated planner  even using macros  requires almost cpu
time solve ipc  test problem  except domain depots   thus remaining time
usually enough improve coverage quality  first  computed plan
running one planner  purpose computing high quality plans 
use set test problems smaller ipc  problems  picture different 
   

figerevini  saetti    vallati

table    compares performance pbp best performing cluster planners
sets randomly generated medium size problems ipc  domains  i e  
size ranging largest training problems smallest testing problems  
table  bestc s q indicates clusters oracle would use solve sets
medium size problems 
experimental result       test problems ipc  domains sizes ranging
training problem sizes ipc  test problem sizes  ipc 
domains best planner clusters deriving high quality plans formed
one planner 
general  cluster planners containing certain planner performs worse
planner alone planning problems domain planner
portfolio configured efficiently solved planner alone  thus running
planners cluster waste cpu time  cluster formed one
planner performs better single portfolio planner considered domain
planner dominating others terms either problem coverage cpu
time  problem coverage plan quality 
interestingly  observed sometimes cluster selected pbp q best
cluster intermediate size test problems formed planner solves
problems  produces low quality plans  planners produce higher quality
plans  solve problems  case barman tpp  domains 
although quality plans sgplan  low  sgplan  cluster
useful contributes greatly improve problem coverage cluster 
finally  results table    indicate sometimes effectiveness
configured portfolio greatly affected difference size hardness
training problems size hardness test problems  particular  performance
gap pbp q best cluster considered randomly generated intermediatesize problems domain tpp lower pbp q best cluster ipc 
test problems tpp  indicates that  terms plan quality  effectiveness
planner portfolio configuration pbp q computed using relatively small training problems
gradually decrease size hardness test problems increased 
    macro usefulness selection accuracy
section concerns experimental goal g   analyze effectiveness using set
macros selected pbp planner  accuracy pbp selecting
useful set macros among computed wizard macro ff planner
configured portfolio  shown wizard macro ff often generate
useful sets macros speed planners  botea et al       b  newton et al         
known guarantee using macros always leads improving
speed planner  bad set macros could even make planner slower  moreover 
usually degree usefulness set macros depends specific planner uses
them 
concerning macros pbp s  ipc  domain least one non empty set
computed macros planner selected cluster  see table     compared
   

fiplanning automatic portfolio configuration  pbp approach

ipc  domains

bestc s

 medium probs 

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains
ipc  domains

 b 
parlpg  b 
mff  m    parlpg    
parlpg   
mff  m  
parlpg   
parlpg   
parlpg   
macro ff  m  

bestc q

 medium probs 

barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

 cl         
p     mff  m    lpg  b 
mff  m    p     lpg   
parlpg   
    lama   
parlpg   
parlpg     marvin   
lpg   
mff  m    l      ch 


time score
pbp s bestc s
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
     

mean cpu time
pbp s
bestc s
   
   
   
   
    
    
    
    
     
     
    
    
    
    
    
    
    
    
    
    

  solved probs
pbp s bestc s
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   

quality score
pbp q bestc q
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
     

mean plan length
pbp q
bestc q
     
     
     
     
     
     
     
     
    
    
     
     
     
     
     
     
     
     
     
     

  solved probs
pbp q bestc q
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   

table     time quality score  average cpu time plan length  number problems
solved pbp s q best cluster  bestc s q  sets medium size
problems ipc  domains  s  m  mff  p  l abbreviate sgplan   marvin 
macro ff  parlpg  lama  respectively  order planners listed
clusters corresponds order run 

number solved problems  number visited search nodes  average cpu time time
score using   a  macros   b  set macros identified pbp s useful planner 
 c  set macros among computed planner terms time score
makes perform best test problems  results experiment 
given table     following general observation derived 
experimental result       ipc  domains  often candidate set
macros planner  computed wizard macro ff  greatly increases speed
performance configured portfolio  pbp s correctly selects it 
table    indicates that  considered domains  performance
selected planners obtained using sets macros identified useful pbp s
usually performance achieve using best sets macros 
gives strong positive evidence effectiveness pbp ss approach selecting
useful set macros planner configured portfolio  particular  best
set macros set macros selected pbp s  see table    
exception sets macros identified pbp s different best set
   

figerevini  saetti    vallati

domain  
planner
barman
sgplan 
blocksworld
parlpg
depots
macro ff
parking
macro ff
tpp
macro ff

 s

macros
 n


ts

 s

pbp s macros
 n

ts

 s

best macros
 n

ts

  



    

    

  



   

    

  



   

    

  

    

    

    

  

     

   

    

  

     

   

    

 

      



   

  

     

     

    

  

     

     

    

 

    

     

   

 

     

    

   

 

     

    

   

 

     

     

   

  

    

     

    

  

    

     

    

table     number solved problems   s   number visited search nodes   n   average
cpu time  t  time score  ts  planners forming cluster selected
pbp s using macro  set macros selected pbp s  best performing set computed macros  domains considered ipc  domains
least one non empty set computed macros  indicate
number nodes visited sgplan  could measured 

case macro ff domain depots  however  shown table    depots pbp s
selects cluster contains macro ff macro set m  parlpg  obtaining
overall performance experimentally observed similar performance
macro ff best set macros  m   worth noting candidate sets
macros computed parlpg depots harmful  i e   make speed performance
much worse  pbp s correctly detects this  choosing run parlpg zero macros
 denoted parlpg     table    
study computing using macros usually pursued main goal
speeding planning  possibly making quality computed plan lower
macros used  interestingly  context pbp q  several cases macros useful
improving plan quality  specifically  nine fifteen ipc    domains 
configuration phase pbp q selects clusters planners least one planner using
non empty set macros  see table     experimentally observed  training
problems test problems  two reasons macros useful pbp q 
domains individual planners using macros leads better
quality plans  case  e g   domains barman blocksworld using planners sgplan  lpg  first solution   respectively  behavior observed
botea et al          coles smith         newton et al         
selected cluster includes planner configured use set macros  usually
planner quickly computes solution  somewhat helpful
test problems another planner cluster solve better solutions 
enough cpu time  quick termination planner macros
leaves cpu time run cluster planner s   cpu time 
important especially incremental planner s  included selected
   

fiplanning automatic portfolio configuration  pbp approach

cluster  lama parlpg  many problem instances domains depots 
satellite tpp observed behavior 
experimental result       ipc  domains  use macros selected
pbp q lead better quality solutions 
general  use macros make plan search effective because  e g  
planning multiple actions one search step size possible plateaus
depth local minima reduced  hand  large number macros
added domain  size search space drastically increase  making
problem harder solve  rest section  analyze kind number
macros selected used pbp  consider macro operators  i e   parameterized
macros defined sequences  primitive  domain operators  macro actions  i e   macros
derived instantiating parameters macro operators 
table    describes macro operators sets selected pbp s planner
configured portfolio  see table    terms of  number aggregated operators 
number involved parameters  average numbers macro actions primitive actions
augmented domain  average plan lengths obtained considered planners without
using macros  using counting planned macro actions single action 
data table     derive interesting observations macros
used pbp considered domains  first  macro operators used pbp
planner three  often aggregate primitive operators  secondly 
planners handle macros simply adding instantiated macro operators
domain definition  sgplan  parlpg   average number macro actions
augmented domains much lower comparable number primitive domain
actions  even domain barman sgplan  uses large macro operators involving
seven primitive operators six parameters  hence  planners domains 
macro actions drastically increase search space  picture quite different
macro ff  macro operators selected pbp s domains depots  parking
tpp  instantiated  generate number macro actions average one
orders magnitude greater number primitive domain actions  reason
macro ff successfully use macro operators even number domain macro actions
huge planner instantiates macro operators filters macro actions search
time  according relaxed plan heuristic applied current search state  rather
simply adding macro actions original domain planning 
fact experiment pbp never generates configured portfolios large
sets macro actions added domain description seems indicate that  number
macro actions high w r t  number primitive actions  macro exploitation
method usually makes performance planner using much worse  observation confirmed additional experiment added pddl description
macro operators learned macro ff domain depots original description
depots  run macro ff using resulting augmented domain  shown table    
depots number learned macro actions one order magnitude greater
number primitive actions  experimentally observed augmented
domain macro ff  without method using macros  solves depots problem 
   

figerevini  saetti    vallati

domain  
planner
barman
sgplan  b
blocksworld
parlpg b
depots
macro ff m 
parking
macro ff m 
tpp
macro ff m 

 operators
every m 
   

 parameters
every m 
   

     

     

   

   

   

   

 

 

 grounded
macros
    
     
     
      
      
        
billions
 billions 
billions
 billions 

 actions
     
      
     
      
     
      
      
        
      
       

plan length
without m 
   
    
   
     

   
    


plan length
m 
   
    
   
    
   
    
  
    
   
    

table     number  primitive  operators forming selected macro operators 
number parameters macro operator  average number instantiated
macro actions  average number domain  primitive  actions  average plan length
without using macros  average plan length using macros counting
planned macro action single action  number  nd  rd columns
refers different macro operator  numbers brackets standard deviations  domains considered ipc  domains least one non empty
set learned macros selected pbp s  b abbreviates bunching macro
set learned wizard  m m  two five sets macros generated
macro ff  indicate solution found within given
cpu time limit 

moreover  results average plan length table     show plans
macro actions much shorter computed original domain  count
macro single action  given planning application current
search state macro  or possibly combination macros macro ff  generates single
successor state  considered planners domains  average distance
initial search state goal state much shorter search space includes
macros  hence searching solution plan space much faster 
conclude  note usefulness macros depend factors different
considered analysis  as  e g   ratio number useful instantiations macro operator  providing shortcuts towards goal state 
number instantiations guides search towards wrong direction  botea  muller 
  schaeffer      a   factors might affect usefulness macro operators
planning conjectured work mccluskey porteous        
    planner cluster scheduling
section concerns experimental goal g   experimentally analyze possible alternative strategies scheduling execution planners portfolio configuration pbp planning time  first experiment  investigate use
pbp four sequential round robin strategies predefined configured planning
time slots  second experiment  study importance choosing specific pcpv
   

fiplanning automatic portfolio configuration  pbp approach

defining planning time slots  as described section      particular pbps
default pcpv 
let input cpu time limit  k maximum number planners cluster 
n number single planners  combined set macros  portfolio  in
experiment        seconds  k        n    depending number
computed macro sets   experimentally compare performance pbp using
following strategies planner cluster execution portfolio configuration   
s   sequential execution tuple k planners tk seconds run

p
every planner  number candidate configured portfolios ki   i  ni  
next  s   strategies  planner terminates end time
slot  remaining time slot used  uniformly  increase slots
subsequently running planners 
s   every combination time slots t    k ti                            
                             k  t      tk     sequential execution
tuple k planners ti seconds runp
i th
planner sequence 
number candidate configured portfolios ki   ni o ui     u
number non zero planning time slots lower      in experiment u      
r   round robin execution set k planners planning time slots
derived default pcpv defined section      this isppbps default
scheduling

strategy   number candidate configured portfolios ki   ni  
r   every pcpv p   hp         p  set p  defined below   round robin execution
set k planners planning
time uslots derived p 
pk
n
number candidate configured portfolios i   o s    number
increments considered pi  in experiment      
set p r  formed         pcpvs obtained setting percentage
pcpv value ranging li ui   with  l         l  equal                        
            u         u  equal                                      increment step pi
equal ui  li   instance       increment step p      
     
 
consequently  values used first percentage p  considered pcpvs    
               
concerning execution order planners cluster  considered sequence
strategies s  s   order defined planner order sequence  two
sequences formed planners considered different clusters planners
differently ordered use different time slots   cluster planners strategies
r  r   execution order determined according increasing planning time slots
associated planners cluster  this default execution order strategy  
configuration phase pbp using four scheduling strategies generates four
alternative clusters planners  relative planning time slots  which  planning time 
run corresponding scheduling strategies used configuration
time  noted portfolio configuration using strategies s  r 
    planners candidate cluster executed simulation  described section     

   

figerevini  saetti    vallati

computationally much heavier configuration using s  r   respectively  since
many candidate configured portfolios considered  hand  since pbp
s  r  examines larger portfolio configuration spaces  principle  could obtain
accurate configured portfolios 
tables       compare performance pbp configured using s  s  r  r 
solving ipc  domains problems  observed that  terms speed 
ipc  benchmark domains except depots  considered scheduling strategies
affect selection best cluster  since pbp s always selects cluster formed
single planner  possibly using macros   depots  shown tables        pbp s
round robin scheduling strategies solves problems faster
sequential scheduling strategies 
concerning plan quality  best cluster selected pbp q contains one
planner every ipc  domain  overall  following observation derived 
experimental result       ipc  benchmark domains problems  pbp q
r  r  solves problems pbp q s  s  and  terms plan quality  overall
performs similarly pbp q s  s  
think explanation pbp q r  r  performs better terms number solved problems using round robin strategy makes pbp q robust
using sequential strategy respect possible incorrect ordering planner runs
inadequate values planning time slots decided configuration time 
training problems difficult used testing time  usually easier  
inaccurate estimation effectiveness learned configuration knowledge
arise  estimation time slot values incorrect planner execution
order damage severely sequential execution planners selected
cluster  since planners run once  using estimated time slot 
round robin execution iteratively run  multiple  time
slots  total cpu time limit reached planners terminate 
terms plan quality evaluated ipc quality scores  pbp q r  r 
tends perform better pbp q s  s   main reason pbp q r r  solves problems pbp q s  s   quality score unsolved
problem zero  consider average plan quality  last four columns tables   
     observe mixed results  two domains pbp q r  r  performs best 
two worse  ones same  discrepancy evaluation results
using quality scores average plan qualities apparent  since quality score
average quality evaluations different assumptions way consider
unsolved problems  average plan quality  subset test problems solved
pbp using compared strategies considered  quality score  test
problems considered 
seipp et al         show sequential portfolio    domain independent statebased forward planners solve problems planning time slots uniform 
rather configured set training problems  because  considered planners
test problems  planner either quickly solves problem solve all 
context  observed sequentially run n planners pbp q  i e  
   combinations   basic planners with without computed sets macros 
   

fiplanning automatic portfolio configuration  pbp approach

ipc 
domains
depots

s 
    

time score pbp s
s 
r 
r 
    
    
    

problems solved pbp s
s 
s 
r 
r 
  
  
  
  

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

quality score pbp q
s 
s 
r 
r 
    
    
    
    
    
    
    
    
   
   
    
    
    
    
    
    
   
   
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                       

problems solved pbp q
s 
s 
r 
r 
  
  
  
  
  
  
  
  
 
 
  
  
  
  
  
  
 
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   
   
   

table     time quality score number solved problems pbp s q using scheduling
strategies s  s  r  r  ipc  benchmark domains problems 

using uniform time slots      test problems solved  against     solved
pbp   n planners uniform strategy performs well pbp q cpu time
limit increased several times  keeping     seconds pbp q   differently
observed work seipp et al          experimental evaluation includes many
problems n planners pbp q solve using considerable cpu time  e g   number
problems solved planner incorporated pbp  even using macros 
within    seconds      probably reason different behavior test
problems ipc  learning track average difficult problems
ipc  deterministic track  test problems used work seipp et al 
       
hand  pbp sequentially runs   planners  strategies s s   instead    possible combinations incorporated planners
learned macros  obtain behavior similar observed seipp et al         
particular  results tables       show terms number solved problems
speed  configuring planning time slots sequential scheduling cases
even degrade performance pbp w r t  using uniform distribution cpu time
 see results tables       pbp s using s  s  depots pbp q using
s  s  satellite   however  context uniform distribution cpu time
planners cluster selected pbp best one  since experimentally
observed pbp s  clearly outperforms pbp s  configuration done
using test problems rather training problems  believe main reason
behavior experiment training problems much smaller
easier test problems  several cases makes pbp s   configured
training problems  underestimate cpu times required solve test problems 
   

figerevini  saetti    vallati

ipc 
domains
depots

average cpu time pbp s
s 
s 
r 
r 
                 
     

std  dev  cpu time pbp s
s 
s 
r 
r 
     
     
     
    

ipc 
domains
barman
blocksworld
depots
gripper
parking
rovers
satellite
spanner
tpp
domains

average plan quality
s 
s 
r 
                 
                 
                 
                 
    
    
    
                 
                 
                 
                 
                 

std  dev  plan
s 
s 
    
    
    
    
     
     
    
    
    
    
     
     
     
     
    
    
     
     
     
     

pbp q
r 
     
     
     
     
    
     
     
     
     
     

quality pbp q
r 
r 
    
    
    
    
    
    
    
    
    
    
     
     
     
     
    
    
    
    
     
     

table     average standard deviation cpu time plan quality pbp s q using
scheduling strategies s  s  r  r  ipc  benchmark domains
problems 

contrary pbp s  s   pbp r  r  performs similarly according three
evaluation criteria  solved problems  speed plan quality   result indicates
configuring planning time slots considering many alternative pcpvs lead
high improvements respect using default predefined planning time slots 
pbp configuring values planning time slots less crucial using
round robin strategy using sequential strategy  pbp r  r 
less sensitive different size problems used configuration testing 
experimental result       ipc  benchmark domains problems  pbp s q
r  r  less sensitive definition planning time slots pbp s q
s  s  
rest section  study problem configuring pcpv used define
planning time slots round robin planner scheduling pbp  particular 
address following questions focusing ipc  benchmarks  important setting
pcpv particular value given domain  oracle specifying best
pcpv test problems specific domain  good would default pcpv
respect it 
data used analysis obtained follows  pcpv p set p
defined well scheduling strategy r  previous experiment  pbp s q
run using cluster selected simulating round robin scheduling planning
time slots derived p described section      thereby pbp s q configured
        times different predefined pcpvs and  consequently  different predefined
planning time slots  resulting configured portfolios run  by simulation 
test problems learning track ipc  
   

fiplanning automatic portfolio configuration  pbp approach

time score

quality score

  

  

  

  

  

  

  

  

  

  

 

 

 

 
barman

bw

depots grip  parking rovers

sat  spanner tpp

barman

bw

depots grip  parking rovers

sat  spanner tpp

figure    distribution time  left plot  quality  right plot  scores pbp s q using
        pcpvs ipc  problems  bw  grip  sat  abbreviate
blocksworld  gripper satellite  respectively 

figure   analyzes time quality scores configured portfolios box
whisker plots  plot  bottom whisker worst score  bottom
box lower quartile score  band box median score  top
box upper quartile score  top whisker best score  finally  cross
score pbp s q domain using default predefined pcpv  following 
pcpv corresponding configured portfolio obtaining best time quality score
domain called best performing pcpv domain  since best performing
pcpv derived observed performance test problems  considered
best pcpv p oracle would give us  experimental data used
figure    derive following observation 
experimental result       different ipc  domains different best performing pcpvs
pbp 
ipc  domain length whisker figure   zero  cluster
selected pbp s q pcpv formed single planner  hence
cases definition pcpv used derive planning time slots affect
performance pbp  all available cpu time assigned single selected planner  
plot speed happens domains except depots  plot
plan quality  happens domain spanner  domain barman  clusters selected
pbp q using configured pcpvs include sgplan  learned set macros 
planner cluster finding solutions test problems domain 
domains pbp s q always select singleton planner
cluster pcpvs considered  specific used pcpv high impact
pbps performance  shown especially domains depots  gripper satellite
quality score plot figure    interestingly  observe default predefined
pcpv used pbp s q generally good choice  since often crosses plots
appear  or near to  top position corresponding whiskers 
   

figerevini  saetti    vallati

experimental result       every ipc  domain  cluster selected pbp s q using
default pcpv h                                  i performs similarly pbp s q using
best performing pcpv  except pbp q domains parking tpp 
parking  best performance obtained running planners lama
pcpv equal h                                      i  tpp  obtained running planners lama  macro ff sgplan  pcpv equal h                                  i 
two domains  pbp q default pcpv perform well
best performing pcpv  but still better median performing pcpv   main
reason domains ipc  test problems much larger  and harder 
used training  which  observed section      affect accuracy
portfolio configuration test problems terms selected planner cluster
configured pcpvs 
overall  results experiment configured default pcpvs pbp
indicate that  round robin planner scheduling used  tuning pcpv  and consequently planning time slots  specific ipc  domain greatly improve
performance resulting configured portfolio  since often default pcpv performs well best pcpv specified oracle  consequently  given without
pcpv tuning portfolio configuration much simpler faster  pbp uses default
version 

   conclusions
existing automated planning technology offers large  growing set powerful techniques efficient domain independent planners  none outperforms
others every planning domain  practical perspective  useful consider
portfolio based approach planning involves several techniques planners 
paper  proposed approach automatically configuring portfolio planners learned macros given domain  implemented portfolio based
planner pbp  computed configuration knowledge consists promising combination
basic planners portfolio  one  possibly empty  set useful macros 
scheduling information specializing execution planning time 
configured portfolio obtained automated statistical analysis performance set candidate clusters planners relative candidate sets macros  using
collection training problems given domain  planner cluster performance
computed simulating cluster execution using performance data runs
individual basic planners  and relative sets macros  portfolio 
proposed approach portfolio planner configuration evaluated
large experimental analysis  focusing ipc    domains  aim demonstrating high efficiency  understanding effectiveness automatic configuration 
investigating importance main design choices  several results derived
various experiments analysis  important experimental results
indicate that 
configured planner portfolios generated pbp s q perform well compared
state of the art planning systems using learning techniques  much better
   

fiplanning automatic portfolio configuration  pbp approach








pbp nok  i e   unconfigured planner portfolio pbp  which competitive
lama  state of the art domain independent planner  
pbp s q performs much better existing domain independent portfoliobased planners  often better domain optimized planner portfolio approaches 
computed configuration knowledge useful selection planner
cluster forming configured portfolio generally accurate given planning
domain 
macros planning domain always helpful planner improving
planning speed plan quality  pbp s q generally selects helpful sets macros 
context proposed approach  round robin scheduling strategy
planner cluster execution robust strategy respect execution order
cluster planners planning time slots  moreover  configuring planning
time slots crucial given good default technique deriving currently
implemented pbp s q 

besides evaluating approach pbp configuring planner portfolio macros 
experimental analysis corroborates validates results  observations empirical
studies previous work researchers planning  include usefulness
harmfulness macros set prominent existing planners  importance diversity
planning techniques construction effective planner portfolio 
robustness round robin scheduling execution times multi planner system 
current version pbp uses portfolio formed specific set selected
techniques plan synthesis  computation macros planner parameter tuning 
architecture pbp open sense additional alternative  current future 
techniques integrated  moreover  although chosen wilcoxon sign rank
test comparing candidate planner clusters macro sets  demonstrating effectiveness  methods could considered 
limit current approach  affects systems relying knowledge
learned examples  training problem set representative
test problems  e g   problems much smaller easier test problems  
computed portfolio configuration might accurate problems  knowing
configuration time enough information characterizing test problems obviously
useful generating representative training problem sets  planning pbp 
experimentally observed that  minimum maximum number objects involved
test problems known  randomly generated training problem sets object
bounds sufficiently representative effective configuration pbp 
think future work important study incorporate pbp
additional methods supporting problem based configuration portfolio planner 
methods could refine current domain based configuration problems
different size heuristically estimated hardness different  specialized configured
portfolios  moreover  important extend pbp q plan quality
measured terms plan action costs rather number plan actions 
directions research investigating use pbp s q optimal
planning metric temporal domains  fox   long         extending portfolios
   

figerevini  saetti    vallati

additional automatically extracted domain specific knowledge  entanglements
 vallati et al       a   finally  intend investigate idea making pbp fully domainindependent computing many portfolio configurations  planner clusters  different
known domains  using classifier match new domain promising
stored configuration terms expected performance new domain  similar idea
successfully developed sat  e g   xu et al         

acknowledgments
many ideas  techniques  systems investigated paper use build important
previous work planning portfolio design  without research would
possible  thank authors work  particular authors
planning systems macro generators incorporated pbp  special thank mark
roberts adele howe clarifications configuration planner portfolio 
beniamino galvani help implementation part preliminary version
pbp s  ipc  organizers letting us use competition machine one
experiments conducted competition  would thank
organizers ipc  ipc  developed made available large collection
useful benchmark domains  problems software tools used analysis 
finally  thank anonymous reviewers associate editor helpful
detailed comments 

references
arfaee  s   j   zilles  s     holte  r   c          bootstrap learning heuristic functions 
proceedings third annual symposium combinatorial search  socs     
pp        aaai press 
backstrom  c     nebel  b          complexity results sas  planning  computational
intelligence              
botea  a   enzenberger  m   muller  m     schaeffer  j          macro ff  improving ai
planning automatically learned macro operators  journal artificial intelligence research             
botea  a   muller  m     schaeffer  j       a   fast planning iterative macros 
proceedings twentieth international joint conference artificial intelligence
ijcai     pp            aaai press 
botea  a   muller  m     schaeffer  j       b   learning partial order macros solutions 
proceedings fifteenth international conference automated planning
scheduling  icaps      pp          aaai press 
brendel  m     schoenauer  m          instance based parameter tuning evolutionary ai planning  proceedings thirteenth annual genetic evolutionary
computation conference  gecco      pp          acm 
cenamor  i   de la rosa  t     fernandez  f          learning predictive models configure planning portfolios  proceedings icaps    workshop planning
learning 
   

fiplanning automatic portfolio configuration  pbp approach

chen  y   hsu  c     wah  b          temporal planning using subgoal partitioning
resolution sgplan  journal artificial intelligence research             
chrpa  l     bartak  r          reformulating planning problems eliminating unpromising actions  proceedings eighth symposium abstraction  reformulation 
approximation   sara      pp        aaai press 
chrpa  l     mccluskey  t   l          exploiting structures classical planning problems  generalizing entanglements  proceedings twentieth european conference artificial intelligence  ecai      pp          ios press 
chrpa  l   mccluskey  t     osborne  h          reformulating planning problems 
theoretical point view  proceedings twenty fifth international florida
artificial intelligence research society conference  flairs      pp        aaai
press 
coles  a     coles  a          lprpg p  relaxed plan heuristics planning preferences  proceedings twenty first international conference automated
planning scheduling  icaps      pp        aaai press 
coles  a   coles  a   olaya  a   celorrio  s   lopez  c   sanner  s     yoon  s         
survey seventh international planning competition  ai magazine         
coles  a     smith  k   a          marvin  heuristic search planner online macroaction learning  journal artificial intelligence research             
cormen  t  h   stein  c   rivest  r  l     leiserson  c  e          introduction algorithms
  rd edition   mcgraw hill 
fawcett  c   helmert  m   hoos  h   karpas  e   roger  g     seipp  j          fd autotune 
domain specific configuration using fast downward  proceedings icaps   
workshop planning learning 
fawcett  c   vallati  m   hutter  f   hoffmann  j   hoos  h   h     leyton brown  k         
improved features runtime prediction domain independent planners  proceedings   th international conference automated planning scheduling
 icaps   pp          aaai press 
fern  a   khardon  r     tadepalli  p          first learning track international
planning competition  machine learning                
fox  m     long  d          pddl     extension pddl expressing temporal
planning domains  journal artificial intelligence research            
gerevini  a   haslum  p   long  d   saetti  a     dimopoulos  y          deterministic
planning fifth international planning competition  pddl  experimental
evaluation planners  artificial intelligence                    
gerevini  a   saetti  a     serina  i          planning stochastic local search
temporal action graphs  journal artificial intelligence research             
gerevini  a   saetti  a     serina  i          approach temporal planning scheduling domains predictable exogenous events  journal artificial intelligence
research             
   

figerevini  saetti    vallati

gerevini  a   saetti  a     vallati  m          automatically configurable portfolio based
planner macro actions  pbp  proceedings nineteenth international
conference automated planning   scheduling  icaps      pp          aaai
press 
gibbons  j     chakraborti  s          nonparametric statistical inference  fourth edition 
revised expanded  statistics  series textbooks monographs  crc press 
gomes  c   p     selman  b          algorithm portfolios  artificial intelligence            
     
helmert  m          fast downward planning system  journal artificial intelligence
research             
helmert  m   roger  g     karpas  e          fast downward stone soup  baseline
building planner portfolios  proceedings icaps    workshop planning
learning 
hoffmann  j          metric ff planning system  translating ignoring delete lists
numeric state variables  journal artificial intelligence research             
hoffmann  j     nebel  b          planning system  fast plan generation
heuristic search  journal artificial intelligence research             
howe  a   dahlman  e   hansen  c   vonmayrhauser  a     scheetz  m          exploiting
competitive planner performance  proceedings fifth european conference
planning  ecp      pp        springer 
howey  r   long  d     fox  m          val  automatic plan validation  continuous effects
mixed initiative planning using pddl  proceedings sixteenth ieee
international conference tools artificial intelligence  ictai      pp     
     ieee 
hutter  f   hoos  h   h     stutzle  t          automatic algorithm configuration based
local search  proceedings twenty second national conference artificial
intelligence  aaai      pp            aaai press 
hutter  f   hoos  h  h   leyton brown  k     stutzle  t          paramils  automatic
algorithm configuration framework  journal artificial intelligence research     
       
jimenez  s   c   coles  a     coles  a          seventh international planning competition
ipc  learning part  http   www plg inf uc m es ipc     learning 
kautz  h   a     selman  b          unifying sat based graph based planning 
proceedings sixteenth international joint conferences artificial intelligence
 ijcai      pp          aaai press 
long  d     fox  m          third international planning competition  results
analysis  journal artificial intelligence research          
marquardt  d   w     snee  d          ridge regression practice  american statistician             
   

fiplanning automatic portfolio configuration  pbp approach

matos  p   planes  j   letombe  f     marques silva  j          max sat algorithm
portfolio  proceedings eighteenth european conference artificial intelligence  ecai      pp          ios press 
mccluskey  t   l     porteous  j   m          engineering compiling planning domain
models promote validity efficiency  artificial intelligence              
newton  m   levine  j   fox  m     long  d          learning macro actions arbitrary
planners domains  proceedings seventeenth international conference
automated planning   scheduling  icaps      pp          aaai press 
pulina  l     tacchella  a          multi engine solver quantified boolean formulas 
proceedings thirteenth international conference principles practice
constraint programming  cp      pp          springer 
rice  j  r          algorithm selection problem  advances computers            
richter  s     westphal  m          lama planner  guiding cost based anytime
planning landmarks  journal artificial intelligence research             
roberts  m     howe  a          directing portfolio learning  proceedings
aaai      workshop learning search  pp         
roberts  m     howe  a          learned models performance many planners 
proceedings icaps    workshop ai planning learning 
roberts  m     howe  a          learning planner performance  artificial intelligence 
                  
roberts  m     howe  a          personal communication  december    
roberts  m   howe  a   e   wilson  b     desjardins  m          makes planners
predictable   proceedings eighteenth international conference automated
planning scheduling  icaps      pp          aaai press 
seipp  j   braun  m   garimort  j     helmert  m          learning portfolios automatically tuned planners  proceedings twenty second international conference
automated planning   scheduling  icaps      pp          aaai press 
shaffer  j   p          multiple hypothesis testing  annual review psych             
simon  h     kadane  j          optimal problem solving search  all or none solutions 
artificial intelligence            
vallati  m   chrpa  l     kitchin  d       a   automatic algorithm selection approach
planning  ieee international conference tools artificial intelligence
 ictai   pp      ieee 
vallati  m   fawcett  c   gerevini  a   hoos  h     saetti  a       b   automatic generation efficient domain optimized planners generic parametrized planners 
proceedings  th annual symposium combinatorial search  socs      pp 
        aaai press 
vidal  v          lookahead strategy heuristic search planning  proceedings
fourteenth international conference automated planning scheduling  icaps     pp          aaai press 
   

figerevini  saetti    vallati

wilcoxon  f     wilcox  r   a          rapid approximate statistical procedures 
american cyanamid co   pearl river  n y 
witten  i   h     frank  e          data mining  practical machine learning tools
techniques  morgan kaufmann  san francisco 
xu  l   hutter  f   hoos  h   h     leyton brown  k          satzilla  portfolio based
algorithm selection sat  journal artificial intelligence research             
yoon  s   fern  a     givan  r          learning control knowledge forward search
planning  journal machine learning research            

   


