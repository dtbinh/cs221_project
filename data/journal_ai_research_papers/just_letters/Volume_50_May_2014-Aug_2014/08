journal artificial intelligence research                  

submitted        published      

mdd propagation sequence constraints
david bergman

david bergman business uconn edu

school business  university connecticut
     hillside road  unit       storrs  ct      

andre a  cire
willem jan van hoeve

acire andrew cmu edu
vanhoeve andrew cmu edu

tepper school business  carnegie mellon university
     forbes avenue  pittsburgh  pa       usa

abstract
study propagation sequence constraint context constraint programming based limited width mdds  first contribution proving establishing
mdd consistency sequence np hard  yet  show task fixed parameter tractable respect length sub sequences  addition  propose
partial filtering algorithm relies specific decomposition constraint
novel extension mdd filtering node domains  experimentally evaluate performance proposed filtering algorithm  demonstrate strength
mdd propagation increases maximum width increased  particular  mdd propagation outperform conventional domain propagation sequence reducing
search tree size solving time several orders magnitude  similar improvements
observed respect current best mdd approach applies decomposition
sequence among constraints 

   introduction
central inference process constraint programming constraint propagation  rossi 
van beek    walsh        dechter        apt         traditional constraint processing
techniques designed explicitly defined relations small arity  state of the art constraint programming solvers apply specialized constraint propagation algorithms global
constraints arity  often based efficient combinatorial methods network
flows  van hoeve   katriel        regin        
conventional constraint propagation algorithms  or domain filtering algorithms  operate individual constraints given problem  role identify remove
values variable domains inconsistent respect constraint
consideration  whenever domain variable updated  i e   value removed  
constraints variable appears reconsidered inspection 
cascading process propagating changes variable domains constraints
continues fixed point reached  constraint programming solvers assume
variable domains finite  ensures termination constraint propagation
process  note constraint propagation may sufficient determine
resolution given problem  therefore  constraint propagation normally applied
search state systematic search process 
c
    
ai access foundation  rights reserved 

fibergman  cire   van hoeve

major benefit propagating variable domains implemented efficiently
many cases  however  inherent weakness domain propagation implicitly
represents cartesian product variable domains potential solution space 
communicating domain changes  limits amount information shared
constraints 
address shortcoming domain propagation  andersen  hadzic  hooker 
tiedemann        proposed use multi valued decision diagrams  mdds  alternative variable domains context constraint propagation  mdds directed
acyclic layered graphs can  principle  compactly represent solutions combinatorial problem  wegener         andersen et al         showed mdds limited
width provide much stronger relaxation solution space traditional
cartesian product variable domains  consequence mdds allow represent
communicate refined information constraints  propagating mdds
rather variable domains  huge reductions search tree size computation time
realized  andersen et al         hadzic  hooker  osullivan    tiedemann      a 
hadzic  hooker    tiedemann      b  hadzic  omahony  osullivan    sellmann       
hoda  van hoeve    hooker        cire   van hoeve              
mdds used represent individual  global  constraints  subsets constraints 
constraints given problem  representing individual constraints 
work hawkins  lagoon  stuckey        cheng yap         higher level
information carried mdd lost projecting variable domains
traditional domain propagation  highest potential mdd propagation instead
appears representing specific subsets constraints within mdd  is 
given set constraints  create maintain one single limited width mdd 
propagated constraint set  since mdd defined respect
fixed variable ordering  useful select subset constraints compatible
ordering  applied way  mdd propagation implemented parallel
existing domain propagation constraint programming systems  thus complementing
potentially strengthening domain propagation process  example  cire van hoeve
       introduced mdd propagation subset constraints representing disjunctive
scheduling problems  embedded custom global constraint ilog cp
optimizer constraint programming solver  greatly improved performance 
    methodology
constraint propagation based limited width mdds amounts mdd filtering mdd
refinement  role mdd filtering algorithm remove provably inconsistent arcs
mdd  hadzic et al       b  hoda et al          mdd refinement algorithm
hand  aims splitting nodes mdd accurately reflect solution
space  hadzic et al       a   order make approach scalable efficient  refinement
algorithms must ensure mdd remains within given maximum size  typically
restricting maximum widththe number nodes layer   increasing
maximum width  mdd relaxation strengthened desired level 
is  maximum width   would correspond traditional cartesian product
variable domains  infinite maximum width would correspond exact mdd
   

fimdd propagation sequence constraints

representing solutions  however  increasing size mdd immediately impacts
computation time  one typically needs balance trade off strength
mdd associated computation time 
order characterize outcome mdd filtering algorithm  notion mdd
consistency introduced andersen et al          similar domain consistency
finite domain constraint programming  given mdd  constraint mdd consistent
arcs mdd belong least one solution constraint  consequence
richer data structure mdd represents  establishing mdd consistency may
difficult establishing domain consistency  example  andersen et al  show
establishing mdd consistency alldifferent constraint np hard 
establishing traditional domain consistency done polynomial time  regin        
    contributions
main focus paper sequence constraint  defined specific conjunction among constraints  among constraint restricts occurrence
set values sequence variables within lower upper bound  beldiceanu
  contejean         sequence constraint finds applications in  e g   car sequencing
employee scheduling problems  regin   puget        van hoeve  pesant  rousseau   
sabharwal         known classical domain consistency established sequence polynomial time  van hoeve  pesant  rousseau    sabharwal        van hoeve
et al         brand  narodytska  quimper  stuckey    walsh        maher  narodytska 
quimper    walsh        downing  feydy    stuckey         furthermore  hoda et al 
       present mdd filtering algorithm among constraints establishing mdd consistency polynomial time  however  remained open question whether mdd
consistency sequence established polynomial time well 
work  answer question negatively first contribution showing
establishing mdd consistency sequence constraint np hard 
important result perspective mdd based constraint programming  namely 
global constraints  sequence constraint perhaps suitable combinatorial
structure mdd approach  prescribed variable ordering  combines subconstraints contiguous variables  existing approaches handle constraint
fully using bounds reasoning only 
second contribution  show establishing mdd consistency sequence constraint fixed parameter tractable respect lengths subsequences  the among constraints   provided mdd follows order sequence constraint  proof constructive  follows generic algorithm filter
one mdd another 
third contribution partial mdd propagation algorithm sequence 
necessarily establish mdd consistency  relies decomposition sequence
cumulative sums  new extension mdd filtering information
stored nodes 
last contribution experimental evaluation proposed partial mdd propagation algorithm  evaluate strength algorithm mdds various maximum
widths  compare performance existing domain propagators sequence 
   

fibergman  cire   van hoeve

compare algorithm currently best known mdd approach uses
natural decomposition sequence among constraints  hoda et al         
experiments demonstrate mdd propagation outperform domain propagation
sequence reducing search tree size  solving time  several orders magnitude  similar results observed respect mdd propagation among constraints 
results thus provide evidence power mdd propagation context
constraint programming 
remainder paper structured follows  section    provide necessary definitions mdd based constraint programming sequence constraint 
section    present proof establishing mdd consistency sequence nphard  section   describes establishing mdd consistency fixed parameter tractable 
section    partial mdd filtering algorithm presented  section   shows experimental results  present final conclusions section   

   definitions
first recall basic definitions mdd based constraint programming  following
work andersen et al         hoda et al          work  ordered multivalued
decision diagram  mdd  directed acyclic graph whose nodes partitioned n    
 possibly empty  subsets layers l            ln     layers l            ln correspond
respectively variables x            xn   l  contains single root node r  ln   contains
single terminal node t  node u mdd  let l  u  denote index
layer  mdd   width w m   maximum number nodes layer 
maxni     li     mdd based cp  mdds typically given fixed maximum width 
arcs mdd directed upper lower layer  is  node
li node lj   j  purposes convenient assume
 without loss generality  arc connects two adjacent layers  arc
layer li labeled element domain d xi   xi   arc a  refer
label represents   a   notational convenience  write   u  v  instead
   u  v   arc  u  v   element d xi   appears label
arcs given node u li   set a u  v  arcs node u node v may
contain multiple arcs  denote label  let  u  denote set arcs
comingfi node u  define size anfi mdd number arcs  i e  
 m     fi a    u   u li                n     fi 
arc label v leaving node layer represents assignment xi   v 
path mdd r denoted arc labels v            vn path
identified solution  x            xn      v            vn    path v            vn feasible
given constraint c setting  x            xn      v            vn   satisfies c  constraint c feasible
mdd mdd contains feasible path c 
constraint c called mdd consistent given mdd every arc mdd
lies feasible path  thus mdd consistency achieved redundant arcs
 i e   arcs feasible path  removed  say mdd mdd
consistent respect c  domain consistency c equivalent mdd consistency
mdd width one represents variable domains  is  equivalent
   

fimdd propagation sequence constraints

mdd consistency mdd layer li contains single node si  
a si   si       d xi                n 
lastly  formally recall definitions among  beldiceanu   contejean        
sequence  beldiceanu   contejean         gen sequence  van hoeve et al        
constraints  among constraint counts number variables assigned
value given set s  ensures number given lower upper
bound 
definition   let x set variables  l  u integer numbers   l u  x  
xx d x  subset domain values  define among x  l  u  s 
x
l
 x s  u 
xx

note expression  x s  evaluated binary value  i e   resulting   x
  x
  s  sequence constraint conjunction given among constraint
applied every sub sequence length q sequence n variables 
definition   let x ordered set n variables  q  l  u integer numbers
  q n    l u q  xx d x  subset domain values 
sequence x  q  l  u  s   

nq  
 

among si   l  u  s  

i  

si represents sub sequence xi           xi q   
finally  generalized sequence constraint extends sequence constraint allowing
among constraints specified different lower upper bounds  subsequence length 
definition   let x ordered set n variables  k natural number   s   l   u vectors
length k si sub sequence x  li   ui n    li ui n                 k 
xx d x  subset domain values 
gen sequence x   s   l   u  s   

k
 

among si   li   ui   s  

i  

   mdd consistency sequence np hard
stated before  known non trivial np hardness result global constraint
context mdd based constraint programming andersen et al        
alldifferent constraint  challenge determining whether global constraint
made mdd consistent polynomial time must guaranteed
given mdd  is  addition combinatorics global constraint itself 
shape mdd adds another layer complexity establishing mdd consistency 
proving np hardness  particular difficulty making sure reduction  mdd
remains polynomial size  sequence constraints  far unknown whether
polynomial time mdd consistency algorithm exists  section answer question
negatively prove following result 
   

fibergman  cire   van hoeve

theorem   establishing mdd consistency sequence arbitrary mdd nphard even mdd follows variable ordering sequence constraint 
proof  proof reduction   sat  classical np complete problem  garey
  johnson         show instance   sat satisfied
particular sequence constraint particular mdd polynomial size solution 
therefore  establishing mdd consistency sequence arbitrary mdd least
hard   sat 
consider   sat instance n variables x            xn   consisting clauses c            cm  
first construct mdd represents basic structure   sat formula  see
example   proof illustration   introduce binary variables yi j i j
representing literals xj xj per clause ci                j              n  xj xj
may may exist ci    order variables sequence   first index
clauses  index variables  yi j   i j clause ci variable
xj   is    y            y                  y  n     n           ym     m            ym n   m n  
construct mdd layered graph  k th layer corresponds k th
variable sequence  
clause ci represented  n consecutive layers corresponding yi             i n  
part mdd  identify precisely paths lead solution satisfying
clause  basis diamond structure pair literals  yi j   i j   
assigns either               pair  variable appear clause 
represent using diamond part mdd representing clause  thus
ensuring variable take assignment respect clause 
variables appear clause  explicitly list allowed combinations 
precisely  clause ci   first define local root node ri representing layer l  yi     
set tag ri     unsat  node u layer l  yi j    for j              n  
following  variable xj appear ci   tag u  sat  create two nodes v  v  
l i j   one single node w l  yi j      arcs  u  v  label     u  v     label   
 v  w  label     v     w  label    corresponds diamond structure 
set tag w    tag u   otherwise  i e   tag u  unsat yi j appears ci    create
two nodes v  v   l i j   two nodes w  w  l  yi j      arcs  u  v  label     u  v    
label     v  w  label     v     w    label    ci contains literal yi j   set
tag w    sat tag w      unsat  otherwise  ci contains i j    set tag w    unsat
tag w      sat 
procedure initialized single root node r representing l  y     
iteratively append mdds two consecutive clauses ci ci   merging nodes
last layer ci marked sat single node  let node
local root ci     finalize procedure merging nodes last layer
marked sat single terminal node t  construction  ensure one
yij ij set    furthermore  variable assignment corresponding
path layers l  yi     l  yi       satisfy clause ci   exactly n literals
chosen accordingly path 
next need ensure feasible path mdd  variable xj
correspond literal yi j i j clause ci   end  impose
   

fimdd propagation sequence constraints

r
c 

  
  

y   

y   
y   
y   
y   
y   
y   
y   
c 

y   

y   
y   
y   
y   
y   
y   
y   


figure    mdd corresponding example   
constraint
sequence y  q    n  l   n  u   n        

   

mdd described above  sub sequence length  n starts positive
literal yi j   definition exactly n variables take value    sub sequence
starts negative literal i j instead  last variable sequence corresponds
value xj next clause ci     i e   yi   j   observe variables except
first last sequence take value   already n   times  therefore 
first last variable sequence  which represent xj complement xj
order   one take value    is  xj must take value clause ci
ci     since holds sub sequences  variables xj must take value
clauses 
mdd contains  mn     layers  layer contains six nodes 
therefore  polynomial size  in size   sat instance   overall construction needs polynomial time 

   

fibergman  cire   van hoeve

  
  

x 
 

 

x 
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

x 

x 

x 

x 

figure    exact mdd sequence constraint example   

example   consider   sat instance four boolean variables x    x    x    x  clauses
c     x  x  x    c     x  x  x     corresponding mdd used reduction
given figure   

   mdd consistency sequence fixed parameter tractable
section show establishing mdd consistency sequence arbitrary
mdd fixed parameter tractable  respect length sub sequences q 
already shown van hoeve et al               exact mdd sequence
constraint exists o n q   nodes  i e   unfolded automaton regular constraint   illustrated next example 
example   consider constraint sequence x  q      l      u            
x    x    x            x    ordered set binary variables  corresponding exact mdd 
following order x  presented figure    convenience  node mdd
labeled last q   labels represent sub sequence node  starting
q   layers up   example  second node third layer represents decisions x     
x       corresponding sub sequence     construct next layer  either append
    sub sequence  and remove first symbol   leading nodes labeled   
    respectively  note nodes labeled    must take arc label   
l      similarly nodes labeled    must take arc label    u      q
   

fimdd propagation sequence constraints

layers  possible sub sequences created  maximally o  q      thus defines
width subsequent layers 
however  since given arbitrary mdd  necessarily exact mdd  need
additional steps exploit connection  apply generic approach
show fixed parameter tractability sequence  fact applied
determine whether mdd consistency tractable constraint 
goal establish mdd consistency given mdd respect another
mdd   set variables  compatible earlier definitions since
  interpreted define constraint  is  mdd consistent respect
  every arc belongs path  solution  exists     purposes 
assume   follow variable ordering 
establish mdd consistency first taking intersection    
removing arcs compatible intersection  computing
intersection two mdds well studied  present top down intersection algorithm
follows definitions algorithm    description adapted melding
procedure presented knuth        
intersection mdd  denoted i  represents possible paths  solutions 
present     partial path root ri node u thus
exist     respective endpoints v  v     information captured
associating node u state s u     v  v     representing nodes v
v       root initialized ri s ri       r  r    r r 
respective roots    lines       algorithm then  top down traversal 
considers layer lii i  augments node u lii s u     v  v     arc
  arc label v v   respectively  lines
      next layer already contains node u state re use node 
otherwise add new node u lii   add arc  u  u  i  note last layer
contains single terminal ti state s ti      t  t     provided empty 
last step  line     clean removing arcs nodes belong
feasible path  done bottom up traversal i  observe algorithm
necessarily create reduced mdd 
algorithm   presents algorithm establish mdd consistency respect
 
  first compute intersection    line     traverse
top down traversal  layer lm
identify remove infeasible arcs  this 
define boolean array support u  l   initialized    represents whether arc
node u label l support  line     line    consider arcs
layer lii i  arc    v  v  exists lii label l s v     u  u     mark
associated arc u supported setting support u  l        lines      
remove arcs lm
support  lines       lastly  clean
removing arcs nodes belong feasible path  line     
theorem   algorithm   establishes mdd consistency respect   o  m  
w m     time space 
proof  correctness algorithm   follows induction number layers 
prove algorithm   establishes mdd consistency  consider arc    u  u 
   

fibergman  cire   van hoeve

algorithm   intersection m  m    
input  mdd root r  mdd   root r      defined
ordered sequence n variables 
output  mdd layers li            lin   arc set ai   node u
associated state s u  
   create node r state s r       r  r    
   li      r  
       n
  
lii        
  
u lii s u     v  v    
  
   v  v  a     v     v         a      a   
  
create node u state s u      v  v    
  
w lij   s w    s u  u    w
  
else lii      u end
   
add arc  u  u  label   a  arc set ai
   
end
   
end
    end
    remove arcs nodes path r ti lin  
    return

algorithm   mdd consistency m  m    
input  mdd root r  mdd   root r      defined
ordered sequence n variables 
output  mdd consistent respect  
   create    intersection m  m    
       n
  
create array support u  l       u lm
arcs u label l
  
arcs    v  v  ai s v     u  u    v lii
  
support u    a       
  
end
  
arcs    u  u  u lm

  
support u    a       remove end
  
end
    end
    remove arcs nodes path r lm
n  
    return

   

fimdd propagation sequence constraints

applying algorithm  exists node v s v     u  u    solutions
represented paths r u r  u    equivalent 
exists arc ai    v  v  ai label a  consider s v     w  w     since
decision diagrams  label appears arc node 
therefore  w   u  since ai belongs i  exist paths w  or u 
w  t    equivalent  hence  belongs feasible path  from r
u  along u terminating t  equivalent path exists  
 from r  u    w  terminating t    
regarding time complexity computing intersection  coarse upper bound
multiplies n  line     w m   w m      line     d max  line     dmax represents
maximum degree node  maxxx  d x    amortize steps since forloops lines     consider arc comparison arcs     arc
compared w m     arcs  line     assume check constant
time whether node outgoing arc given label  using arc label list  
gives total time complexity o  m   w m       memory requirements bounded
size intersection  o n w m   w m     dmax     o  m   w m      
dominates complexity algorithm    since lines      performed linear
time space  in size   

observe algorithm   longer ensures solution represented
path     case intersection  mdd consistency merely establishes
arc belongs solution     although mdd intersections
stronger mdd consistency  limitation width intersection
mdd may large product widths     therefore intersecting
multiple mdds will  general  increase size resulting mdd exponentially 
next apply theorem   sequence constraint 
corollary   let x ordered sequence variables  c   sequence x  q  l  u  s 
sequence constraint  arbitrary mdd following variable ordering x  establishing mdd consistency c fixed parameter tractable respect parameter q 
proof  know exists exact mdd   size o n q    represents c
 van hoeve et al                applying theorem   gives mdd consistency algorithm
time space complexity o  m    q     result follows 

note theorem   applied obtain tractability establishing
mdd consistency constraints  consider example constraint among x    x   
        xn   l  u  s   variable ordering  construct exact mdd top down
procedure associating node v number variables taking value along
path r v  representing length path  nodes length
equivalent merged  largest layer u     different path
lengths  exact mdd size o nu   theorem   establishing mdd consistency
tractable among  indeed  hoda et al         showed mdd consistency
established constraint  quadratic time complexity 
   

fibergman  cire   van hoeve

converse theorem   hold  exist constraints mdd
consistency established polynomial time given mdd  minimal
reduced exact mdd hasp
exponential size  specific example  consider linear inequality
constraints form ni   ai xi b xi integer variable  ai constant 
             n  b constant  mdd consistency established constraints
linear time  given mdd  computing arc longest r t path  relative
coefficients ai   uses arc  andersen et al          however  hosaka  takenaga 
kaneda  yajima       
provide following explicit linear inequality  k even
p
n   k     consider  i jk aij xij k   k       xij binary variable 
aij    i     k j      i  j k  show that  variable order 
size

n  
reduced ordered bdd inequality bounded   
  

   partial mdd filtering sequence
many practical situations value q lead prohibitively large exact mdds
establishing mdd consistency  limits applicability corollary    therefore
next explore practical partial filtering algorithm polynomial q 
one immediate approach propagate sequence constraint mdds
natural decomposition among constraints  apply mdd filtering algorithms
among proposed hoda et al          however  well known classical
constraint propagation based variable domains  among decomposition substantially improved dedicated domain filtering algorithm sequence  van hoeve
et al               brand et al         maher et al          therefore  goal section provide mdd filtering sequence stronger practice mdd
filtering among decomposition  stronger domain filtering sequence 
follows  assume mdd hand respects ordering variables
sequence constraint 
    cumulative sums encoding
proposed algorithm extends original domain consistency filtering algorithm
sequence van hoeve et al         mdds  following cumulative sums encoding proposed brand et al          representation takes following form 
sequence variables x   x    x            xn   constraint sequence x  q  l  u  s  
first introduce variables y    y            yn   respective initial domains d yi         i 

pi              n  variables represent cumulative sums x  i e   yi represents
j    xj s               n  rewrite sequence constraint following
system constraints 
            n  

   

yi q yi l

            n q  

   

yi q yi u

            n q  

   

yi   yi     xi  

  x        indicator function set s  i e    x      x
 x      x
  s  brand et al  show establishing singleton bounds consistency
system suffices establish domain consistency original sequence constraint 
   

fimdd propagation sequence constraints

order apply similar reasoning context mdds  crucial observation
domains variables y            yn naturally represented nodes
mdd  words  node v layer li represents domain yi    restricted
solution space formed r t paths containing v  let us denote information
node v explicitly interval  lb v   ub v    refer node domain
v  following approach hoda et al          compute information linear
time one top down pass  using equation      follows 
lb v    min u v ain  v   lb u       u  v     
ub v    max u v ain  v   ub u       u  v     

   

nodes v    r   lb r   ub r            
individual among constraints posted yi q yi l yi q yi u 
need compute node v layer li   ancestors layer li  
done maintaining vector av length q     node v  av  i  represents
set ancestor nodes v i th layer v               q  initialize
ar     r                apply recursion
av  i     u v ain  v  au  i   

                q 

av        v  
resulting top down pass takes linear time  in size mdd   direct
implementation recursive step node takes o q  w m       operations
mdd   now  relevant ancestor nodes node v layer li q stored av  q  
subset layer li   similarly compute descendant nodes v vector dv
length q      dv  i  contains descendants v i th layer v 
                q  initialize dt     t               
however  purposes need maintain minimum maximum value
union domains av   resp   dv   constraints         inequalities 
see application av dv rules     below  makes recursive step
efficient  taking o qw m    operations per node 
alternatively  approximate information maintaining minimum
maximum node domain value layer  instead list ancestor layers 
compromise filtering  may efficient practice  requires
maintain two integers per layer 
    processing constraints
next process constraints               turn remove provably inconsistent arcs  time filter node information 
starting ternary constraints type      remove arc  u  v  lb u   
   u  v     ub v   updating  lb v   ub v   node v done similar rules    
above 


lb v    max lb v   min u v ain  v   lb u       u  v     
   


ub v    min ub v   min u v ain  v   ub u       u  v     
   

fibergman  cire   van hoeve

  
  

y 

    

     

x 

x 
     

     

     

y 

     

x 

x 
     

     

     

     

     

     

y 
x 

x 
     

     

     

     

     

     

y 
x 

x 
     

     

     

     

     

     

y 
x 

x 
     

     

a  initial mdd

b  node domains

y 

c  mdd filtering

figure    mdd propagation constraint sequence x  q      l      u            
example   

fact  resulting algorithm special case mdd consistency equality propagator hadzic et al       a   thus inherit mdd consistency ternary
constraints 
next  process constraints         node v layer li    i              n  
recall relevant ancestors li  q av  q   relevant descendants
li   q dv  q   variable corresponding node v yi   participates
four constraints 
yi l   yiq  
yi u   yiq  
   
yi yi q l 
yi yi q u 
observe apply constraints filter node domain  lb v   ub v  
corresponding yi   namely  node domains corresponding variables yiq
yi q may find support nodes layer li   v  update lb v 
ub v  according equations     
lb v    max  lb v  

l   min lb u  
uav  q 

ub v    min  ub v   u   max ub u  
uav  q 

min lb w  u   
wdv  q 

max ub w  l   

   

wdv  q 

resulting algorithm specific instance generic mdd consistent binary
constraint propagator presented hoda et al          inherit mdd
consistency constraints  process constraints linear time  in size
mdd  top down bottom up pass mdd 
   

fimdd propagation sequence constraints

example   consider constraint sequence x  q      l      u            
ordered sequence binary variables x    x    x    x    x    x     assume given
mdd figure   a  figure   b  show node domains result processing
rules      figure   c  shows resulting mdd processing constraints via
rules          example  consider middle node fourth layer  corresponding
variable y    let node v  initial domain         av  q  contains
root node  domain         since l      reduce domain v        
next consider arcs v  conclude value   domain supported 
reduces domain v         allows us eliminate one incoming arc
 from first node previous layer  
resulting mdd figure   c  reflects possible deductions made
partial algorithm  established mdd consistency however  witnessed
infeasible path                 
observe proposed algorithm applied immediately general
gen sequence constraints among constraint individual l  u q 
cumulative sums encoding adjusted straightforward manner represent
different values 
    formal analysis
next formally compare outcome partial mdd filtering algorithm mdd
propagation among encoding domain propagation sequence  first 
recall following theorem 
theorem    brand et al         thm     bounds consistency cumulative sums
encoding incomparable bounds consistency among encoding sequence 
note since variable domains among cumulative sums encoding
ranges  intervals integer values   bounds consistency equivalent domain consistency 
corollary   mdd consistency cumulative sums encoding incomparable mdd
consistency among encoding sequence 
proof  apply examples proof theorem   work brand et al  
consider constraint sequence x  q      l      u             ordered
sequence binary variables x    x    x    x    x    domains d xi             
         d x           apply trivial mdd width   representing cartesian
product variable domains  establishing mdd consistency cumulative sums
encoding yields
y          y          y          y          y         
x          x          x       x         
establishing mdd consistency among encoding  however  yields
x          x       x       x      
   

fibergman  cire   van hoeve

consider constraint sequence x  q      l      u             ordered
sequence binary variables x    x    x    x    x    domains d xi             
         d x           again  apply mdd width   representing cartesian
product variable domains  establishing mdd consistency cumulative sums
encoding yields
y          y          y          y          y         
x       x          x          x      
establishing mdd consistency among encoding prune value 
additional illustration corollary    consider example   figure    mdd
propagation among encoding eliminate value x      infeasible
path                  whereas example showed mdd propagation cumulative sums
detect this 
theorem   mdd consistency cumulative sums encoding sequence incomparable domain consistency sequence 
proof  first example proof corollary   shows domain consistency
sequence stronger mdd consistency cumulative sums encoding 
show opposite  consider constraint sequence x  q  l  u         set
binary variables arbitrary size  arbitrary values q  l  u    x     let
mdd defined x consisting two disjoint paths r t  arcs one path
label    arcs value    since projection onto
variable domains gives x        x x  domain consistency deduce
infeasibility  however  establishing mdd consistency respect cumulative
sums encoding detect this 

even though formally mdd propagation based cumulative sums incomparable
domain propagation sequence mdd propagation among constraints 
next section show practice algorithm reduce search space
orders magnitude compared methods 

   computational results
purpose computational results evaluate empirically strength partial mdd propagator described section    perform three main comparisons  first 
want assess impact increasing maximum width mdd filtering 
second  want compare mdd propagation classical domain propagation
sequence  particular  wish evaluate computational overhead mdd
propagation relative domain propagation  extent mdd propagation
outperform domain propagation  third  compare filtering strength mdd
propagator sequence filtering strength mdd propagators individual among constraints  best mdd approach sequence far  hoda et al  
      
   

fimdd propagation sequence constraints

implemented mdd propagator sequence custom global constraint
ibm ilog cplex cp optimizer       using c   interface  recall section  
applying rules     either maintain minimum maximum value q
previous ancestors descendants node  approximate maintaining
values simply layer  evaluated strategies found latter
reduce amount filtering  nonetheless resulted much efficient performance
 about twice fast average   hence  reported results use implementation 
mdd propagator among  apply code  hoda et al         
domain propagation  applied three models  first uses domain consistent propagator sequence van hoeve et al          running o n    time  second uses
domain consistent propagator sequence based network flow representation
maher et al          runs o n    time   third model  applied decomposition cumulative sums  uses explicit global constraint sequence 
propagating decomposition takes o n    worst case  considers o n  variables constraints variable domains contain n elements  note
almost test instances  cumulative sums encoding established domain consistency
sequence  additional advantage  cumulative sums encoding permits
insightful comparison mdd propagator  since based cumulative
sums decomposition 
note brand et al         introduce multiple sequence constraint
represents conjunction multiple sequence constraints set ordered
variables  as experimental setup   narodytska        shows establishing bounds
consistency system already np hard  presents domain consistent propagator
encodes system automaton regular constraint  algorithm runs
o nmq   time  n represents number variables  number sequence
constraints  q length largest subsequence 
order compare algorithms multiple sequence constraint  conducted experiments identify suitable testbed  found instances
multiple sequence constraint would run memory could solved instantly
using domain propagator individual sequence constraints  creating
data structures multiple sequence constraint took substantially time average  instances challenging  as described next sections  
multiple sequence constraint could applied due memory issues  therefore
excluded algorithm comparisons sections below 
single sequence constraints solved polynomial time  consider
instances multiple sequence constraints experiments  assume
defined ordered set variables  measure impact different
propagation methods correctly  approaches apply fixed search strategy  i e  
following given ordering variables  lexicographic value ordering heuristic 
method  measure number backtracks failed search state well
solving time  experiments performed using     ghz intel xeon machine 
   thank nina narodytska sharing implementation us 

   

fibergman  cire   van hoeve

    systems sequence constraints
first consider systems multiple sequence constraints defined set
variables  generate instances n      variables domain                    
  sequence constraints  sequence constraint  set length subsequence uniform randomly     n   
q    rand     n            
here  rand   refers standard c   random number generator  i e   rand   k selects
number range     k     without minimum length    many instances
would easy solve either method  next define difference l
u     rand   q   set
l     rand    q    
u    l    
lastly  define set values first defining cardinality  rand           
selecting many values uniformly random                     generated    
instances total  
solve instance using domain consistency propagator sequence 
cumulative sums encoding  domain propagation   mdd propagator maximum
widths                           method given maximum time limit       seconds
per instance 
compare performance domain propagation mdd propagation figure    figure  report given time point many instances could
solved within time specific method  three domain propagation methods
represented cumulative sums  the cumulative sums decomposition   sequence   hprs
 the sequence propagator van hoeve et al                sequence   flow  the
flow based propagator maher et al          observe cumulative sums domain
propagation  although guaranteed establish domain consistency  outperforms
domain consistent sequence propagators  also  mdd propagation maximum width
  already substantially outperform domain propagation  observe
larger maximum widths require time mdds processed  end
allow solve instances  maximum mdd width     permits solve    
instances within given time limit  whereas domain propagation respectively solve
     sequence   flow        sequence   hprs        cumulative sums  instances 
illustrate difference domain mdd propagation detail  figure   presents scatter plots comparing domain propagation  cumulative sums  mdd
propagation  maximum width      comparison particularly meaningful
propagation methods rely cumulative sums representation  instance 
figure   a depicts number backtracks figure   b depicts solving time
methods  instances solved within time limit collected
 time out  method  figure   a demonstrates mdd propagation lead
dramatic search tree reductions  several orders magnitude  naturally  mdd
   instances available http   www andrew cmu edu user vanhoeve mdd  

   

fi   
   
   

mdd width    
mdd width   
mdd width  
domain  cumulative sums 
domain  sequence hprs 
domain  sequence flow 

 

  

number instances solved

   

mdd propagation sequence constraints

   

   

   

   

   

   

time s 

figure    performance comparison domain mdd propagators sequence
constraint  data point reflects total number instances solved
particular method within corresponding time limit 

propagation comes computational cost  figure   b shows almost instances  especially harder ones   search tree reductions correspond faster solving
times  often several orders magnitude 
next evaluate impact increasing maximum widths mdd propagator 
figure    present method survival function respect number
backtracks  a   solving time  b    formally  applied combinatorial backtrack search algorithms  survival function represents probability run taking
x backtracks  gomes  fernandez  selman    bessiere         case 
approximate function taking proportion instances need least x backtracks  figure   a   respectively seconds  figure   b   observe log log plots 
respect search tree size  figure   a clearly shows strengthening mdd
propagation maximum width increased  particular  domain propagation
reflects linear behavior several orders magnitude typical heavy tailed
runtime distributions  naturally  similar behavior present mdd propagation 
much weaker form increasing maximum mdd widths  associated solving times
presented figure   b  reflects similar behavior  takes account
initial computational overhead mdd propagation 
   

fi   
   
   
   

   

mdd propagator  width     time  s 

   
   
   
   

mdd propagator  width     backtracks



   

bergman  cire   van hoeve

   

   

   

   

   



   

   

   

   

   

domain propagator  cumulative sums  time  s 

domain propagator  cumulative sums  backtracks

b  solving time

a  number backtracks

figure    comparing domain mdd propagation sequence constraints  data
point reflects number backtracks  a   resp  solving time seconds  b  
specific instance  solved best domain propagator  cumulative
sums encoding  mdd propagator maximum width     instances
either method needed   backtracks  a   less      seconds  b  
excluded  here  stands timeout represents specific instance
could solved within      s  fig  b    figure a   instances
labeled separately  at tick mark        note reported number
backtracks       seconds may much less     instances 
reported instances fewer     backtracks solved within time
limit 

    nurse rostering instances
next consider structured problem class inspired nurse rostering problems 
problem design work schedule nurse given horizon n days 
day  nurse either work day shift  d   evening shift  e   night shift  n  
day  o   introduce variable xi day              n  domain
d xi      o  d  e  n   representing shift  impose eight sequence constraints
modeling requirements listed table   
combinatorial nature problem  size cp search tree turns
largely independent length time horizon  lexicographic search  by
increasing day i  applied  however consider instances various time horizons
 n                     address potential scaling issues 
results presented table    columns domain sequence show total
number backtracks  bt  solving time seconds  cpu  domain consistent
sequence propagator  similarly  columns domain cumul  sums show infor   

fimdd propagation sequence constraints

   
   
   
    

survival function

   

domain consistency
mdd width  
mdd width  
mdd width  
mdd width   
mdd width   
mdd width   
mdd width    

          

    
          

survival function

   

   

domain consistency
mdd width  
mdd width  
mdd width  
mdd width   
mdd width   
mdd width   
mdd width    

   

   

   

   

   

   

   

   

   

backtracks

   

   

   

   

   

time  s 

a  survival function respect backtracks

b  survival function respect solving time

figure    evaluating impact increased width mdd propagation via survival function plots respect search backtracks  a   solving time  b    plots
log log scale  data point reflects percentage instances require least many backtracks  a   resp  seconds  b   solved
particular method 

requirement

sequence x  q  l  u  s 

least    work shifts every    days 
least   off days every    days 
    night shifts every    days 
    evening shifts every    days 
nights shifts cannot appear consecutive days 
    evening night shifts every   days 
  work shifts every   days 

sequence x               d  e  n   
sequence x              o  
sequence x             n   
sequence x             e  
sequence x            n   
sequence x            e  n   
sequence x            d  e  n   

table    nurse rostering problem specification  variable set x represents shifts
assigned sequence days  possible shifts day  d   evening  e  
night  n   day  o  

mation cumulative sums domain propagation  subsequent columns show
numbers mdd propagator  mdds maximum width             note
propagating mdd width   corresponds domain propagation  indeed associated number backtracks equivalent domain propagator cumulative sums 
first observation  maximum width   already reduces number backtracks
factor      maximum width   mdd propagation even allows solve
   

fibergman  cire   van hoeve

n
  
  
  
   

domain
sequence
bt
cpu
             
             
              
              

domain
cumul  sums
bt
cpu
       
       
       
       

     
     
     
     

mdd
width  
bt
cpu
             
             
              
              

mdd
width  
bt
cpu
      
      
      
      

     
     
     
     

mdd
width  
bt cpu
   
   
   
   

    
    
    
    

mdd
width  
bt cpu
 
 
 
 

    
    
    
    

table    comparing domain propagation mdd propagation sequence nurse
rostering instances  here  n stands number variables  bt number
backtracks  cpu solving time seconds 

problem without search  computation times correspondingly reduced  e g  
   s  resp    s  domain propagators     s mdd propagator  width   
instance n        lastly  observe case mdd propagation
suffer scaling issues compared domain propagation 
final remark  attempted solve nurse rostering instances using
sequence domain propagator cp optimizer  ilosequence   able solve
instance n            seconds  none others instances solved within
time limit       seconds 
    comparing mdd filtering sequence among
last experiment  compare sequence mdd propagator mdd propagator among constraints hoda et al          main goal determine whether
large mdd sufficient solve problem  irrespective propagating among
cumulative sums decomposition   whether additional information obtained
sequence propagator makes difference 
apply methods  mdd propagation sequence mdd propagation
among  data set section     containing     instances  time limit
      seconds  run propagators maximum mdd widths               
first compare performance mdd propagators among sequence
figure    figure depicts number instances solved within given
time limit various methods  plot indicates among propagators
much weaker sequence propagator  moreover larger maximum widths
alone suffice  using sequence propagator maximum width   outperforms
among propagators maximum widths     
scatter plot figure   compares mdd propagators among sequence
detail  widths                instances take   backtracks  resp  less
     seconds  either method discarded figure   a  resp    b   smaller
widths  several instances among propagator solve faster 
relative strength sequence propagator increases larger widths  width
     sequence propagator achieve orders magnitude smaller search trees
   

fi   
   
   

sequence width    
sequence width   
sequence width  
sequence width  
among width    
among width   
among width  
among width  

 

  

number instances solved

   

mdd propagation sequence constraints

   

   

   

   

   

   

time s 

   
   
   
   
   

sequence mdd propagator time  s 

width  
width  
width   
width    

   

   

   

   

width  
width  
width   
width    

   

sequence mdd propagator backtracks



figure    performance comparison mdd propagation sequence among
various maximum widths  data point reflects total number instances
solved particular method within corresponding time limit 

   

   

   

   

   



   

   

   

   

   

among mdd propagator time  s 

among mdd propagator backtracks

b  solving time

a  number backtracks

figure    evaluating mdd propagation sequence among various maximum
widths via scatter plots respect search backtracks  a   solving time
 b    plots log log scale follow format figure   

   

fibergman  cire   van hoeve

solving time among propagators  demonstrates advantage
mdd propagation sequence compared among decomposition 

   conclusion
constraint propagation limited width mdds recently shown powerful
alternative conventional propagation variable domains constraint programming 
work  studied mdd propagation sequence constraint  appears in  e g   rostering scheduling applications  first proved establishing
mdd consistency sequence np hard  however  shown task
fixed parameter tractable respect length sub sequences defined
constraint  provided mdd follows variable ordering specified constraint 
proposed practical mdd propagation algorithm sequence polynomial length sub sequences  based cumulative decomposition 
provided extensive experimental results comparing mdd propagator sequence
domain propagators sequence well existing mdd propagator among 
computational experiments shown mdd propagator sequence
outperform domain propagators orders magnitude terms search tree size
solving time  similar results obtained compared existing mdd propagator among  demonstrates practice large mdd alone sufficient
solve problems  specific mdd propagators global constraints sequence
lead orders magnitude speedups 

acknowledgments
material based upon work supported national science foundation
grant no  cmmi          google research award  thank reviewers
whose comments helped improve paper 

references
andersen  h  r   hadzic  t   hooker  j  n     tiedemann  p          constraint store
based multivalued decision diagrams  proceedings cp  vol       lncs 
pp          springer 
apt  k  r          principles constraint programming  cambridge university press 
beldiceanu  n     contejean  e          introducing global constraints chip  journal
mathematical computer modelling                 
brand  s   narodytska  n   quimper  c   stuckey  p     walsh  t          encodings
sequence constraint  proceedings cp  vol       lncs  pp          springer 
cheng  k     yap  r          maintaining generalized arc consistency ad hoc r ary
constraints  proceedings cp  vol       lncs  pp          springer 
cire  a  a     van hoeve  w  j          mdd propagation disjunctive scheduling 
proceedings icaps  pp        aaai press 
   

fimdd propagation sequence constraints

cire  a  a     van hoeve  w  j          multivalued decision diagrams sequencing
problems  operations research                   
dechter  r          constraint processing  morgan kaufmann 
downing  n   feydy  t     stuckey  p          explaining flow based propagation 
proceedings cpaior  vol       lncs  pp          springer 
garey  m     johnson  d          computers intractability   guide theory
np completeness  freeman 
gomes  c  p   fernandez  c   selman  b     bessiere  c          statistical regimes across
constrainedness regions  constraints                 
hadzic  t   hooker  j  n   osullivan  b     tiedemann  p       a   approximate compilation constraints multivalued decision diagrams  proceedings cp  vol 
     lncs  pp          springer 
hadzic  t   hooker  j  n     tiedemann  p       b   propagating separable equalities
mdd store  proceedings cpaior  vol       lncs  pp          springer 
hadzic  t   omahony  e   osullivan  b     sellmann  m          enhanced inference
market split problem  proceedings ictai  pp          ieee 
hawkins  p   lagoon  v     stuckey  p          solving set constraint satisfaction problems
using robdds  jair                 
hoda  s   van hoeve  w  j     hooker  j  n          systematic approach mdd based
constraint programming  proceedings cp  vol       lncs  pp         
springer 
hosaka  k   takenaga  y   kaneda  t     yajima  s          size ordered binary decision
diagrams representing threshold functions  theoretical computer science            
knuth  d  e          art computer programming  volume    fascicle    bitwise
tricks   techniques  binary decision diagrams  addison wesley professional 
maher  m   narodytska  n   quimper  c  g     walsh  t          flow based propagators
sequence related global constraints  proceedings cp  vol      
lncs  pp          springer 
narodytska  n          reformulation global constraints  ph d  thesis  university
new south wales 
regin  j  c          filtering algorithm constraints difference csps 
proceedings aaai  vol     pp          aaai press 
regin  j  c          global constraints  survey  van hentenryck  p     milano  m 
 eds    hybrid optimization  pp         springer 
regin  j  c     puget  j  f          filtering algorithm global sequencing constraints  proceedings cp  vol       lncs  pp        springer 
rossi  f   van beek  p     walsh  t   eds            handbook constraint programming 
elsevier 
van hoeve  w  j     katriel  i          global constraints  rossi  f  van beek  p    
walsh  t   eds    handbook constraint programming  chap     elsevier 
   

fibergman  cire   van hoeve

van hoeve  w  j   pesant  g   rousseau  l  m     sabharwal  a          revisiting
sequence constraint  proceedings cp  vol       lncs  pp          springer 
van hoeve  w  j   pesant  g   rousseau  l  m     sabharwal  a          new filtering
algorithms combinations among constraints  constraints             
wegener  i          branching programs binary decision diagrams  theory applications  siam monographs discrete mathematics applications  society
industrial applied mathematics 

   


