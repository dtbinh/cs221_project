journal artificial intelligence research                  

submitted        published      

probabilistic planning continuous dynamic systems
bounded risk
masahiro ono

ono   appi   keio   ac   jp

keio university
       hiyoshi  kohoku ku
yokohama  kanagawa           japan

brian c  williams

williams   mit  edu

massachusetts institute technology
   massachusetts avenue
cambridge        usa

lars blackmore

lars   blackmore   spacex   com

spacex
  rocket road
hawthorne  ca       usa

abstract
paper presents model based planner called probabilistic sulu planner p sulu
planner  controls stochastic systems goal directed manner within user specified risk
bounds  objective p sulu planner allow users command continuous  stochastic
systems  unmanned aerial space vehicles  manner intuitive safe 
end  first develop new plan representation called chance constrained qualitative state
plan  ccqsp   users specify desired evolution plant state well
acceptable level risk  example ccqsp statement go b within   
minutes  less        probability failure  develop p sulu planner 
tractably solve ccqsp planning problem  order enable ccqsp planning  develop
following two capabilities paper     risk sensitive planning risk bounds    
goal directed planning continuous domain temporal constraints  first capability
ensures probability failure bounded  second capability essential planner
solve problems continuous state space vehicle path planning  demonstrate
capabilities p sulu planner simulations two real world scenarios  path planning
scheduling personal aerial vehicle well space rendezvous autonomous cargo
spacecraft 

   introduction
increasing need risk sensitive optimal planning uncertain environments 
guaranteeing acceptable probability success  motivating example article
boeing concept future aerial personal transportation system  pts   shown figure   
pts consists fleet small personal aerial vehicles  pav  enable flexible point to point
transportation individuals families 
c
    
ai access foundation  rights reserved 

fio   w illiams     b lackmore

order provide safety  pts highly automated        us  pilot error
listed primary cause       fatal general aviation accidents  according      joseph
t  nall report  aircraft owners pilots association air safety foundation         automated
path planning  scheduling  collision avoidance  traffic management significantly improve
safety pts  well efficiency  challenges operating system include
adapting uncertainties environment  storms turbulence  satisfying
complicated needs users 
substantial body work planning uncertainty relevant  however 
approach distinctive three key respects  first  planner  p sulu planner  allows
users explicitly limit probability constraint violation  capability particularly important risk sensitive missions impact failure significant  second  planner
goal directed  mean achieves time evolved goals within user specified temporal constraints  third  planner works continuous state space  continuous state space
representation fits naturally many real world applications  planning aerial  space 
underwater vehicles  important problems resources 

figure    personal transportation system  pts    courtesy boeing company 
figure   shows sample pts scenario  passenger pav starts provincetown 
wants go bedford within    minutes  passenger wants go scenic
area remain      minutes flight  no fly zone  nfz 
storm must avoided  however  storms future location uncertain  vehicles
location uncertain well  due control error exogenous disturbances  thus risk
penetrating nfz storm  passengers want limit risk        
order handle planning problem  introduce novel planner called probabilistic
sulu planner  p sulu planner   building upon prior work model based plan executive called
sulu  leaute   williams         p sulu planner provides following three capabilities 
order meet needs described scenario     goal directed planning continuous
domain     near optimal planning     risk sensitive planning risk bounds 
goal directed planning continuous domain p sulu planner must plan actions
continuous effects achieve time evolved goals specified users  case pts
scenario figure    pav must sequentially achieve two temporally extended goals  called
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure    sample plan personal aerial vehicle  pav 

episodes  going scenic area arriving bedford  additional
temporal constraints goals inherent scenario  temporal constraints
come physical limitations  fuel capacity  others come passenger requirements 
near optimal stochastic planning cost reduction performance improvement important issues system  pts scenario  passengers may want minimize trip
time fuel usage  p sulu planner finds near optimal control sequence according
user defined objective function  satisfying given constraints 
risk sensitive planning risk bounds real world systems subject various uncertainties  state estimation error  modeling uncertainty  exogenous disturbance 
case pavs  position velocity vehicle estimated kalman filter
typically involve gaussian distributed uncertainties  system model used planning
control perfect  vehicles subject unpredictable disturbances turbulence  uncertainty  executed result plan inevitably deviates
original plan hence involves risk constraint violation  deterministic plan execution
particularly susceptible risk optimized order minimize given cost function 
since optimal plan typically pushes one constraint boundaries  hence
leaves margin error  example  shortest path pts scenario shown figure
  cuts close nfzs storm  generally  constraint boundaries  then 
tiny perturbation planned path may result penetration obstacles 
risk reduced setting safety margin path obstacles  cost
longer path length  however  often impossible guarantee zero risk  since typically non zero probability disturbance large enough push vehicle
feasible region  therefore  passengers vehicle must accept risk 
time need limit certain level  generally  users autonomous
system uncertainty able specify bounds risk  planner must
guarantee system able operate within bounds  constraints called
chance constraints 
   

fio   w illiams     b lackmore

    overview planner
section describes inputs outputs p sulu planner informally  rigorously
defined section   
      nputs
initial condition p sulu planner plans control sequence starting current state 
typically estimated noisy sensor measurements  therefore  p sulu planner takes
probability distribution  instead point estimate  current state initial condition 
stochastic plant model control community planning problem generate sequence
control inputs actuate physical system  called plant  action model plant
typically system real valued equations control  state observable variables  psulu planner takes input linear stochastic plant model  specifies probabilistic state
transitions continuous domain  stochastic extension continuous plant model used
leaute williams         paper limit focus gaussian distributed uncertainty 
chance constrained qualitative state plan  ccqsp  order provide users intuitive way command stochastic systems  develop new plan representation called chanceconstrained qualitative state plan  ccqsp   extension qualitative state plan  qsp   developed used leaute williams         hofmann williams         blackmore 
li  williams         ccqsp specifies desired evolution plant state time 
defined set discrete events  set episodes  impose constraints plant state
evolution  set temporal constraints events  set chance constraints specify
reliability constraints success sets episodes plan 
ccqsp may depicted directed acyclic graph  shown figure    circles
represent events squares represent episodes  flexible temporal constraints represented
simple temporal network  stn   dechter  meiri    pearl         specifies upper lower
bounds duration two events  shown pairs numbers parentheses  
plan figure   describes pts scenario depicted figure    stated informally as 
start provincetown  reach scenic region within    time units  remain
     time units  end flight bedford  probability
failure episodes must less     times  remain safe region
avoiding no fly zones storm  limit probability penetrating
obstacles          entire flight must take    time units 
formal definition ccqsp given section       
objective function user p sulu planner specify objective function  e g   cost
function   assume convex function 
      utput
executable control sequence p sulu planner plans finite horizon  one two
outputs p sulu planner executable control sequence horizon satisfies
constraints specified input ccqsp  case pts scenario  outputs vehicles actuation inputs  acceleration ladder angle  result nominal paths shown
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure    example chance constrained qualitative state plan  ccqsp   new plan representation specify desired evolution plant state acceptable levels
risk  pts scenario figure    passengers pav would go
provincetown bedford  fly scenic region way  safe region
means entire state space except obstacles  risk episodes must within
risk bounds specified chance constraints 

figure    order control sequence executable  must dynamically feasible 
example  curvature pavs path must exceed vehicles maneuverability 
optimal schedule output p sulu planner optimal schedule  set execution time steps events input ccqsp minimizes given cost function  case
pts scenario shown figure    schedule specifies leave scenic region
arrive bedford  example  p sulu planner finds schedule satisfies simple
temporal constraints specified ccqsp  minimizes cost function 
two outputs control sequence schedule must consistent other 
time evolved goals achieved optimal schedule applying control sequence
given initial conditions 
    approach
p sulu planner must solve difficult problem generating executable control sequence
ccqsp  involves combinatorial optimization discrete schedule non convex
optimization continuous control sequence  approach article develop p sulu
planner three technical steps  call spirals 
first spiral  described section    solve special case ccqsp planning problem  feasible state space convex  e g   path planning problem without obstacles 
schedule fixed  shown figure    a   problem transformed convex optimization problem risk allocation approach  presented previous work  ono
  williams      a   obtain feasible  near optimal solution ccqsp planning problem
optimally solving convex optimization using interior point method  blackmore   ono 
      
second spiral  presented section    consider ccqsp problem
non convex state space order include obstacles  figure    b   develop branch
bound based algorithm  called non convex iterative risk allocation  nira   subproblems
branch and bound search nira convex chance constrained optimal control problems 
solved first spiral  nira algorithm cannot handle problem flexible schedule 
   

fio   w illiams     b lackmore

third spiral  described section    develop another branch boundbased algorithm  namely p sulu planner  solve general ccqsp planning problem
flexible schedule obstacles  subproblems branch and bound search psulu planner non convex chance constrained optimal control problems  solved
nira algorithm 
dp suluw  section   

nira  section   

 ono   williams     b   section   

fixed schedule

fixed schedule

t  

simple temporal
constraints

     

t  
t  

c

t  

goal

     

goal

c

obstacle
start

start

 a  convex  fixed schedule

obstacle

waypoint

waypoint

waypoint
start

 b  non convex  fixed schedule

goal

     

 c  non convex  flexible schedule

figure    three spiral approach ccqsp planning problem

    related work
recall ccqsp planning problem distinguished use time evolved goals  continuous states actions  stochastic optimal solutions chance constraints  planning
control disciplines explored aspects problem  solution total novel 
approach solving problem efficiently risk allocation novel 
specifically  extensive literature planning discrete actions achieve
temporally extended goals  tegs   tlplan  bacchus   kabanza        talplan
 kvarnstrom   doherty         treat tegs temporal domain control knowledge prune
search space progressing temporal formula  however  since teg planners assume
discrete state spaces  cannot handle problems continuous states effects without discretization  ignoring chance constraints  representation time evolved goals used tlplan
p sulu planner similar  tlplan uses version metric interval temporal logic  mitl 
 alur  feder    henzinger        applied discrete states  p sulu planner uses qualitative state plans  qsps   leaute   williams        hofmann   williams        li       
continuous states  li        shows that  given state space  qsp expressed mitl 
key difference defines p sulu planner addition chance constraints  together
use continuous variables 
several planners  particularly employed components model based executives  command actions continuous state space  example  sulu  leaute   williams       
takes input deterministic linear model qsp  specifies desired evolution plant
state well flexible temporal constraints  outputs continuous control sequence  chekhov
 hofmann   williams        takes input qsp nonlinear deterministic system model 
outputs continuous control sequence  order enable fast real time plan execution  chekhov
precomputes flow tubes  sets continuous state trajectories end goal regions specified given plan  kongming  li        provides generative planning capability hybrid
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

systems  involving continuous discrete actions  employs compact representation
hybrid plans  called hybrid flow graph  combines strengths planning graph
discrete actions flow tubes continuous actions  planners adapt effects uncertainty  explicitly reason effects uncertainty planning  example 
sulu employs receding horizon approach  continuously replans control sequence using
latest measurements  chekhovs flow tube representation feasible policies allows executive generate new control sequences response disturbances on line  p sulu planner
distinct continuous planners plans model uncertainty dynamics  instead reacting it  plan guarantees user specified probability success explicitly
reasoning effects uncertainty 
ai planning literatures  planning domain description language  pddl   supports mixed
discrete continuous planning domains  fox   long         probabilistic pddl  younes   littman 
      relational dynamic influence diagram language  rddl   sanner        handle stochastic systems  recently  coles  coles  fox  long        developed forward chaining
heuristic search planner named colin  deal continuous linear change durationdependent effects  however  planners handle chance constraints  note
outputs p sulu planner continuous space discrete time  time dependent mdp
developed boyan littman        handle continuous time encoding time state 
extension p sulu planner continuous time planning would interesting future direction 
work within ai community probabilistic planning focused planning discrete domains builds upon markov decision process  mdp  framework  growing subcommunity focused extensions mdps continuous domain  however  tractability
issue  since typically require partitioning approximation continuous state space 
straightforward partitioning continuous state action spaces discrete states actions often leads exponential blow up running time  furthermore  feasible state
space unbounded  impossible partition space finite number compact subspaces  alternative approach function approximation  boyan   moore        
convergence guaranteed approximation error bounded  bertsekas   tsitsiklis 
      lagoudakis   parr         time dependent mdps  boyan   littman        feng  dearden 
meuleau    washington        efficient partitioning continuous state space  make
assumption set available states actions finite  i e   discrete   hence  planning
mdps continuous state space  rn   requires approximate state space
finite number discrete states  approach essentially different mdp approaches
continuous variables directly optimized convex optimization without discretization continuous state space  hence  continuity state space harm tractability
p sulu planner 
second point comparison treatment risk  p sulu planner  mdp
framework offers approach marrying utility risk  however  mdp algorithms balance
utility risk assigning large negative utility event constraint violation 
approach cannot guarantee bounds probability constraint violation  constrained mdp
approach  altman        explicitly impose constraints  dolgov durfee        showed
stationary deterministic policies constrained mdps obtained solving mixed
integer linear program  milp   however  constrained mdp framework impose bounds
expected value costs  again  cannot guarantee strict upper bounds probability
   

fio   w illiams     b lackmore

constraint violation  contrast  p sulu planner allows users impose chance constraints 
explicitly restrict probability constraint violation  far authors know 
risk sensitive reinforcement learning approach proposed geibel wysotzki       
work considers chance constraints mdp framework  developed reinforcement
learning algorithm mdps constraint probability entering error states  work
distinct p sulu planner goal directed  mean achieves
time evolved goals within user specified temporal constraints  summarize  prior mdp work
supports continuous state actions combination general continuous noise transitions
ensuring probability failure bounded 
risk sensitive control methods continuous domain extensively studied discipline control theory  example  celebrated h control method minimizes effect
disturbances output system guaranteeing stability system  stoorvogel 
       risk sensitive control approaches allow users choose level risk averseness
minimization expected exponentiated cost function  jacobson        fleming   mceneaney         however  approaches address chance constraints optimal scheduling  several methods proposed solving stochastic optimal control problems
continuous variables chance constraints  method proposed van hessem        turns
stochastic problem deterministic problem using conservative ellipsoidal relaxation 
blackmore        proposes sampling based method called particle control  evaluates joint
chance constraints monte carlo simulation  instead using conservative bound  result 
stochastic planning problem reduced milp problem  although theoretical guarantee obtain exactly optimal solution infinite number samples used 
computation time issue  blackmore et al         nemirovski shapiro        employed
booles inequality decompose joint chance constraint individual chance constraints  although booles inequality less conservative ellipsoidal relaxation  approach still
non negligible conservatism since fixes individual risk bound uniform value 
approach builds upon approach  modifications allow flexible individual risk bounds 
best authors knowledge  p sulu planner first goal directed planner
able plan continuous state space chance constraints 
    innovations
p sulu planner enabled six innovations presented article 
first  order allow users command stochastic systems intuitively  develop new plan
representation  ccqsp  section        
second  order decompose chance constraint disjunctive clause disjunction
individual chance constraints  introduce risk selection approach  section        
third  order obtain lower bounds branch and bound search nira  develop
fixed risk relaxation  frr   linear program relaxation subproblems  section        
fourth  minimize search space optimal schedule introducing new forward
checking method efficiently prunes infeasible assignment execution time steps  section      
fifth  order enhance computation time schedule optimization  introduce method
obtain lower bound branch and bound solving fixed schedule planning problems
partial assignment schedule   section     
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

sixth  order minimize number non convex subproblems solved branch andbound search  introduce variable ordering heuristic  namely convex episode first  cef 
heuristic  explores episodes convex feasible state region ones
non convex state region  section        
rest article organized follows  section   formally defines ccqsp
states ccqsp planning problem  section   derives encoding problem chanceconstrained optimization problem  well encodings two limited versions ccqsp
planning problem  one fixed schedule convex state space  another fixed
schedule non convex state space  section   reviews solution fixed schedule ccqsp
planning problem convex state space  section   develops nira algorithm  solves
fixed schedule ccqsp planning problem non convex state space  section   introduces
p sulu planner  solves ccqsp planning problem flexible schedule nonconvex state space  finally  section   shows simulation results various scenarios  including
personal transportation system  pts  

   problem statement
recall p sulu planner takes input linear stochastic plant model  specifies
effects actions  initial state description  describing distribution initial states  ccqsp 
specifies desired evolutions state variables  well acceptable levels risk 
objective function  output executable control sequence optimal schedule  planning
performed finite horizon  since p sulu planner incorporated finite horizon
optimal control  first define variables used problem formulations  define
elements inputs outputs 
    definition time step
consider series discretized finite time steps            n fixed time interval
  integer n size planning horizon  since time interval take
positive real value  suffices consider time steps integer indices approximate
systems dynamics  use term time step mean integer index discretized time
steps  using term time mean real valued time  define sets follows 
             n   


             n    

   
   

limit scope article discrete time stochastic system  optimizing
control sequence continuous time stochastic system requires solving stochastic differential
equation  sde  repeatedly  performing computation tractable except simple
problems 
    definitions events
event denotes start end episode behavior plan representation 
definition    event e e instance executed certain time step t 
   

fio   w illiams     b lackmore

define two special events  start event e  end event ee   without loss generality 
assume e  executed      end event ee represents termination entire
plan 
    definitions variables
variables used problem formulation involve discrete schedule  continuous state vector 
continuous control vector 
formally define event well schedule follows 
definition    execution time step s e  integer valued scalar represents
time step event e e executed  schedule     s e     s e     s ee   
sequence execution time steps events e e  finally  partial schedule   
  e    e e e  ordered set execution time steps subset events e  
definition  start event executed     i e  s e         following notation
schedule  denote  e  execution time event e e   see definition
schedule  definition    
consider continuous state space  state vector state sequence defined
follows 
definition    state vector xt rnx real valued vector represents state plant
time step t  state sequence x  n     x  xn   vector state variables time step  
n  
actions assignments continuous decision variables  referred control
vector 
definition    control vector ut rnu real valued vector represents control input
system time step t  control sequence u  n       u  un     vector control inputs
time   n   
    definitions inputs
subsection defines four inputs p sulu planner  initial condition  stochastic plant
model  ccqsp  objective function 
      nitial c ondition
belief state beginning plan represented initial state  assumed
gaussian distribution known mean x  covariance matrix x   
x  n  x    x    

   

parameters     specified initial condition  defined follows 
definition    initial condition pair   x    x    x  mean initial state
x  covariance matrix initial state 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

      tochastic p lant odel
p sulu planner controls dynamical systems actions correspond settings continuous control variables  whose effects continuous state variables  p sulu planner
specifies actions effects plant model  plant model considered state
transition model continuous space  employ variant linear plant model additive
gaussian uncertainty commonly used context chance constrained stochastic optimal control  charnes   cooper        nemirovski   shapiro        oldewurtel  jones    morari 
      van hessem         modification consider controller saturation  specifically 
assume following plant model 
xt     xt   b u  ut     wt

   

wt rnx state independent disturbance t th time step zero mean gaussian
distribution given covariance matrix denoted wt  
wt n     wt   

   

although model prohibits state dependent disturbance  types noise involved
target applications state independent  example  pts scenario introduced section
   primary source uncertainty wind turbulence  typically dependent
state vehicle  space rendezvous scenario discussed section      main sources
perturbations space craft tidal force unmodeled gravitational effects sun  moon 
planets  wertz   wiley j  larson         noises modeled state dependent
noise practice scale planned actions significantly smaller solar
system 
dependent state space craft  note problem formulation encode
time varying noise specifying different covariance matrices wt time step 
set u rnu compact convex set represents continuous domain feasible
control inputs  infeasible control input ut
  u given plant  actuators saturate 
function u      rnu   u     represents effect actuator saturation follows 
 
u
 if u u 
u  u    
 
pu  u   otherwise 
pu  u  projection u u  example  u one dimensional u    l  u  
pu  u    max min u  u   l   note u introduces nonlinearity plant 
parameters         specified stochastic plant model  defined
follows 
definition    stochastic plant model four tuple   a  n     b   n     w  n     u 
a  n   b   n   sets n matrices a  n       a    a         b   n     
 b     b     b n      w  n   set n covariance matrices w  n      w    w      wn     
u rnu compact convex set represents domain feasible control inputs 
note xt   well wt   random variable  ut deterministic variable  figure
  illustrates plant model  typical plant model  probability circles grow time since
disturbance wt added every time step  drawn figure  effect represents commonly
observed tendency distant future involves uncertainty near future 
   

fio   w illiams     b lackmore

x 

x 

     
   
   

x 
x 

     
   

x 

     
   
   

nominal
path

x 

   

x 

figure    illustration stochastic plant model used p sulu planner 
order mitigate accumulation uncertainty  employ close loop control approach 
generates control input ut incorporating nominal control input ut rnu
error feedback  follows 
ut   ut   k  xt xt   
   
k matrix representing constant stabilizing feedback gain time xt
nominal state vector  nominal state xt obtained following recursion 
x     x 
xt     xt   b ut  

   
   

closed loop control approach employed geibel wysotzki        oldewurtel
et al         context chance constrained optimal control shown significantly
improves performance 
closed loop planning method  nominal control input ut planned execution  actual control input ut computed real time using      feedback term
    linearly responds error xt xt   choosing feedback gain k appropriately 
growth probability circles figure   slowed down  neglecting effect controller
saturation  i e   assuming u   rnx    follows         xt gaussian distribution
covariance matrix xt   evolves follows 
xt      at   b k  xt  at   b k  t   wt  

   

typical plant  eigenvalues one  therefore  error feedback
 i e   k       size xt grows wt iteration  choosing k
norm largest eigenvalue  at   b k   less one  covariance xt grow
continuously  feedback gain found using standard control techniques 
linear quadratic regulator  lqr   bertsekas         since consider finite horizon  discretetime planning problem  optimal time varying lqr gain k obtained solving finitehorizon  discrete time riccati equation  practice  often suffices use steady state  i e  
time invariant  lqr gain  obtained solving infinite horizon  discrete time riccati
equation simplicity  note feedback gain k optimized real time 
approach often used robust stochastic model predictive controls  goulart  kerrigan   
maciejowski        oldewurtel et al         ono         however  extension beyond
scope paper 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

issue that  error xt xt happens large  control input ut may exceed
feasible domain u  resulting actuator saturation  therefore      hold due
nonlinearity function u     address issue risk allocation approach 
specifically  impose chance constraints control saturation  allocate risk state
control constraints  approach discussed detail section       
      c hance   constrained q ualitative tate p lan  ccqsp 
qualitative state plan  qsp   leaute   williams        temporally flexible plan specifies
desired evolution plant state  activities qsp called episodes specify
constraints plant state  ccqsp extension qsps stochastic plans involve
chance constraints  defined follows 
definition    chance constrained qualitative state plan  ccqsp  four tuple p   e  a    c 
e set discrete events  set episodes  set simple temporal constraints 
c set chance constraints 
four elements ccqsp defined precisely moment  qsp  ccqsp
illustrated diagrammatically directed acyclic graph discrete events e
represented vertices  drawn circles  episodes arcs ovals  ccqsp start
event e  end ee   corresponds beginning end mission  respectively 
example  figure   shows ccqsp pts scenario  state regions obstacles
ccqsp illustrated figure    involves four events  e    e    e    e    ee    meanings
described follows 
   start event e  corresponds take pav provincetown 
   second event e  corresponds time step pav reaches scenic region 
   event e  associated time instant pav left scenic region 
   end event ee corresponds arrival pav bedford 
ccqsp four episodes    a    a    a    a    two chance constraints c    c    c    
natural language expression ccqsp is 
start provincetown  reach scenic region within    time units  remain
     time units  end flight bedford  probability
failure activities must less     times  remain safe region
avoiding no fly zones storm  limit probability penetrating
obstacles          entire flight must take    time units 
formally define three types constraints   episodes  temporal constraints 
chance constraint 
episodes episode specifies desired state system control time
interval 

definition    episode   esa   ee
   ts   te    ra associated start event ea end
n
event ee
  ra r region state space  set time steps state xt
must region ra  

   

fio   w illiams     b lackmore

feasible region ra subset rn   approximate ra set linear
constraints later section       
 ts   te   subset given function episodes start time step ts   s esa  
end time step te   s ee
   different forms  ts   te   result various types episodes 
following three types episodes particularly interest us 
   start in episode   ts   te      ts  
   end in episode   ts   te      te  
   remain in episode   ts   te      ts   ts        te  
given episode a  set time steps plant state must region ra
obtained substituting s esa   s ee
   execution time steps start event end
event episode  ts and  te   other  words  episode requires plant state
ra time steps s esa    s ee
    rest article  use following
abbreviated notation 
 
 
 s     s esa    s ee
a   
using notation  episode equivalent following state constraint 

xt ra  

    

ta  s 

example  ccqsp shown figure    four episodes  a   start  provincetown    a   remain  scenic region    a   end bedford   a   remain  safe region   
section    solve relaxed optimization problem partial schedule  definition   
order obtain lower bound optimal objective value  relaxed problems 
subset episodes relevant given partial schedule imposed  formally
define partial episode set partial schedule follows 
definition    given partial schedule   a   partial episode set  subset
involves episodes whose start event end event assigned execution time steps 
 
 
a       esa e ee
e  
definition e given definition   
chance constraint recall chance constraint probabilistic constraint requires
constraints defining episode satisfied within user specified probability  ccqsp
multiple chance constraints  chance constraint associated least one episode 
chance constraint formally defined follows 
definition     chance constraint c   c   c constraint requiring that 



pr
xt ra   c  

    

ac ta  s 

c user specified risk bound c set episodes associated chance
constraint c 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

note every episode ccqsp must associated exactly one chance constraint 
episode must involved one chance constraint unassociated
chance constraint 
example  ccqsp shown figure   two chance constraints  c  c    associated episodes c     a    a    a    c     a     therefore  c  requires probability
satisfying three episodes a    a    a   colored green       c 
requires probability satisfying episode a            
make following assumption  necessary order guarantee convexity
constraints section     
assumption   
c    
assumption requires risk bounds less      claim assumption
constrain practical applications  since typically user autonomous system would
accept     risk 
temporal constraint ccqsp includes simple temporal constraints  stcs   dechter et al  
       impose upper lower bounds duration episodes temporal
distances two events e 
min max constraint  specifydefinition     simple temporal constraint   es   ee
  b   b
ing duration start event es end event ee
real valued interval
max          
 bmin
 
b



temporal constraints represented diagrammatically arcs nodes  labeled
max    labels episodes  example  ccqsp shown figure  
time bounds  bmin
  b
four simple temporal constraints  one requires time e  e    
time units  one requires time e  e  least   units    units  one
requires time e  ee    time units  one requires time e 
ee    time units 
schedule feasible satisfies temporal constraints ccqsp  number
feasible schedules finite  since discrete finite  denote sf domain feasible
schedules  formally defined follows 
sf    s t e   


max
bmin
 s ee
  

  s e    b

    

 e  number events ccqsp  temporal duration multiplied time
real valued time  set discrete time steps t 
bmin
interval bmin


      bjective f unction
section  formally define objective function 
definition     objective function j   un xn sf   r real valued function
nominal control sequence u  n     nominal state sequence x  n   schedule s  assume
j convex function x  n u  n    
   

fio   w illiams     b lackmore

typical example objective function quadratic sum control inputs  requires
total control efforts minimized 
j u  n     x  n   s   

n
 


  ut      

t  

another example is 
j u  n     x  n   s    s ee   

    

minimizes total plan execution time  requiring end event ee qualitative
state plan scheduled soon possible 
often need minimize expectation cost function  note that  case 
expectation function x  n u  n   reduced function u  n  
follows         probability distributions x  n u  n   uniquely determined
u  n   k   practice  often convenient express objective function
function u  n   x  n   rather function u  n     since x  n specified
u  n   using      two expressions equivalent  conversion expectation cost
function function nominal values conducted priori 
controller saturation  conversion often obtained closed form 
conversion particularly straight forward cost function polynomial  since
expectation equivalent combination raw moments  readily derived
cumulants  note third higher cumulants gaussian distribution zero 
show examples conversion regarding three commonly used cost functions  linear  quadratic 
manhattan norm 
e xt     xt
e xtt qxt  

    
  xtt qxt  

nx


e   xt        

xt  i

i  

tr qxt  
 
 
x t i
 
   
 
  f     

     x t  i

    
    

q positive definite matrix  xt  i ith diagonal element xt     f    
confluent hypergeometric function  functions convex  expectation function
ut transformed function ut manner  note second term
right hand side      constant  hence  minimizing xtt qxt yields solution
minimizing e xtt qxt   
controller saturation  difficult obtain conversion closed form due
nonlinearity u         practice  use approximation assumes saturation 
since closed loop control approach explicitly limits probability controller saturation
small probability  see section       detail   approximation error trivial  claim
empirically validated section       
    definitions outputs
output p sulu planner optimal solution  consists optimal control sequence u  n   un optimal schedule sf  
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

definition     optimal solution pair u  n       solution satisfies constraints
given ccqsp  definition     initial condition i  stochastic plant model  
solution minimizes given objective function j u  n     x  n   s   definition     
    problem statement
formally define ccqsp planning problem 
problem    ccqsp planning problem
given stochastic plant model   a  n     b   n     w  n     initial condition  
x    x    ccqsp p   e  a    c  objective function j u  n     x  n   s   ccqsp
planning problem find optimal solution u  n     m  i  p   j 
note p sulu planner gives near optimal solution problem    p sulu planner
employs two approximations  namely risk allocation  section        risk selection  section
        sake computational tractability  result  solution strictly optimal
general  however  empirically show section   suboptimality due risk allocation
risk selection significantly smaller existing approximation methods 

   problem encoding
section encodes ccqsp planning problem stated previous section mathematical programming problem  sections       address solve form mathematical
problem  recall build ccqsp planner  p sulu planner  three spirals  first
present problem encoding general ccqsp planning problem non convex state space
flexible schedule  figure    c   subsection      present encodings two
special cases ccqsp planning problem subsections          one non convex
state space fixed schedule  figure    b    one convex state space fixed schedule  figure    a   
    encoding ccqsp planning problem non convex state space flexible
schedule
      e ncoding f easible r egions
order encode problem   mathematical programming problem  geometric constraint
      xt ra   must represented algebraic constraints  purpose  approximate
feasible state regions ra set half spaces  represented linear state
constraint 
figure   shows two simple examples  feasible region  a  outside obstacle 
approximated triangle  feasible region  b  inside pickup region 
approximated triangle  feasible region approximated set linear constraints
follows 
 a 

 


hti x g  

 b 

i  

 


hti x g  

i  

approximate feasible regions set linear constraints sufficient condition
original state constraint xt ra  
   

fio   w illiams     b lackmore

figure    approximate representation feasible regions set linear constraints

assume set linear state constraints approximates feasible region
reduced conjunctive normal form  cnf  follows 




hta k j xt ga k j   

    

kka jja k

ka           ka    jc i           jc i    sets indices  replacing xt ra
           chance constraint c encoded follows 

pr










htc a k j xt gc a k j     c  

    

ac ta  s  kka jja k

order simplify notation  merge indices c    s  
k ka new
index ic  s   ic  s            ic  s     ic  s      ka   ac  a  s    let ai  
ki   ti indices correspond combined index i  let hc i j   hc ai  ki  j   using
notations  three conjunctions      combined one  obtain following
encoding chance constraint 

pr






htc i j xti gc i j     c  

    

iic  s  jjc i

specification chance constraints given      requires  ic  s   disjunctive clauses
state constraints must satisfied probability   c   ith disjunctive clause cth
chance constraint composed  jc i   linear state constraints 
      ccqsp p lanning p roblem e ncoding
using                           ccqsp planning problem  problem     solved
third spiral  encoded follows 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

problem    general ccqsp planning problem
min
u  n    s
s t 

j u  n     x  n   s 

    

sf

    

xt     xt   b u  ut     wt  





    



ut   ut   k  xt xt   




pr
htc i j xti gc i j     c  
cc

    
    

iic  s  jjc i

x  n  x    x    

wt n     wt   



    

recall sf   formally defined       set schedules satisfy temporal constraints given ccqsp  ccqsp execution problem hybrid optimization problem
discrete variables  schedule  continuous variables u  n    control sequence   note
temporal constraints within problem   solved section    similar problem encoding
employed chance constraint mdp proposed geibel wysotzki         however 
encoding differs geibel wysotzki two respects     optimize continuous control sequence u  n   discrete schedule temporal constraints    
allow joint chance constraints  require satisfaction multiple state constraints given
probability  problem   solved section   
    encoding ccqsp planning problem non convex state space fixed
schedule
restricted version ccqsp planning problem fixed schedule  solved
second spiral  obtained fixing problem   follows 
problem    ccqsp planning problem fixed schedule
j  s    min
u  n  
s t 

j  u  n     x  n  

    

xt     xt   b u  ut     wt  




ut   ut   k  xt xt   




pr
htc i j xti gc i j     c  
cc

    
    
    

iic  s  jjc i

x  n  x    x    

wt n     wt   



    

j  s  optimal objective value ccqsp planning problem schedule fixed
s  note schedule s  decision variable problem    treated constant
problem    therefore  objective function j function control sequence mean
   

fio   w illiams     b lackmore

state  since fixed schedule  since assumed j convex function regarding
u  n   x  n   j convex function  section   solves problem   
    encoding ccqsp planning problem convex state space fixed schedule
restrictive version ccqsp planning problem fixed schedule convex state
space  solved first spiral  obtained removing disjunctions chance
constraints problem   follows 
problem    ccqsp planning problem fixed schedule convex state space

min
u  n  

j  u  n     x  n  

    

xt     xt   b u  ut     wt  




ut   ut   k  xt xt   




pr
htc i xti gc i     c  
cc

    
    
    

iic  s 

x  n  x    x    

wt n     wt   



    

section   solves problem   

   ccqsp planning convex state space fixed schedule
section presents solution methods problem    ccqsp planning problem
convex state space fixed schedule  shown figure    a   obstacles
environment execution time steps achieve time evolved goals fixed  ccqsp
planning problem reduced convex chance constrained finite horizon optimal control problem 
past work presented risk allocation approach  conservatively approximates
chance constrained finite horizon optimal control problem tractable convex optimization
problem  ono   williams      a      b  blackmore   ono         although optimal solution
approximated convex optimization problem exactly optimal solution original convex chance constrained finite horizon optimal control problem  suboptimality significantly smaller previous approaches  section gives brief overview risk allocation
approach  well solution convex chance constrained finite horizon optimal control
problem 
    deterministic approximation problem  
evaluating whether joint chance constraint      satisfied requires computing integral
multivariate probability distribution arbitrary region  since probability      involves
multiple constraints  integral cannot obtained closed form  address issue
decomposing intractable joint chance constraint      set individual chance constraints 
involves univariate probability distribution  key feature individual
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

goal

goal
walls

walls

nominal path
safety margin

start

start

 a  uniform risk allocation

 b  optimal risk allocation

figure    risk allocation strategies racing car example

chance constraint transformed equivalent deterministic constraint
evaluated analytically 
      r isk llocation pproach
decomposition considered allocation risk  decomposition  risk
bound joint chance constraint distributed individual chance constraints 
many feasible risk allocations  problem find risk allocation results minimum
cost  offer readers intuitive understanding risk allocation approach using example
below 

racing car example consider racing car example  shown figure    dynamics
vehicle gaussian distributed uncertainty  task plan path minimizes time
reach goal  guarantee probability crashing wall race less
      chance constraint   planning control sequence equivalent planning nominal
path  shown solid lines figure    limit probability crashing wall 
good driver would set safety margin  colored dark gray figure    plan
nominal path outside safety margin 
driver wants set safety margin small possible order make nominal path
shorter  however  since probability crashing race bounded  certain
lower bound size safety margin  given constraint  different ways
setting safety margin  figure   a  width margin uniform  figure   b  safety
margin narrow around corner  wide places 
intelligent driver would take strategy  b   since knows going closer wall
corner makes path shorter  straight line not  key observation
taking risk  i e   setting narrow safety margin  corner results greater reward
 i e  time saving  taking risk straight line  gives rise notion risk
allocation  good risk allocation strategy save risk reward small  taking
reward great  illustrated example  risk allocation must optimized
order minimize objective function joint chance constrained stochastic optimization
problem 
   

fio   w illiams     b lackmore

      ecomposition c onjunctive j oint c hance c onstraints r isk
llocation
derive mathematical representation risk allocation reformulating chance constraint conjunction constraints conjunction chance constraints  reformulation
initially presented prekopa        introduced chance constrained optimal control
ono williams      b   concept risk allocation originally developed ono
williams      a   let ci proposition either true false  following lemma
holds 
lemma   
pr

 n


 
ci  



n


  

i  

pr  ci    

i  

n




i  

proof 
pr

 n


 
ci   pr

i  





 n

i  
n


 
ci

    

   
pr ci

    

cc i  

 
 

n

i  
n

i  

n

   
pr ci

i  

pr  ci    

n


 

    

i  

overline c negation literal c  use following booles inequality obtain     
     
 
 n
n


pr cc i   
pr
cc i
i  

i  

following result immediately follows lemma   substituting linear constraint
htc i xti gc i   ci chance constraint c 
corollary    following set constraints sufficient condition joint chance constraint
     problem   





 
 
c i  
pr hc i xti gc i     c i
c i c
    


cc

iic  s 

iic  s 

newly introduced variables c i represent upper bounds probability violating
linear state constraint  refer individual risk bounds  individual risk bound 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

c i   viewed amount risk allocated ith clause  fact c i bound
probability implies   c i    second term      requires total amount risk
upper bounded original risk bound c   find analogue resource allocation
problem  allocation resource optimized upper bound total amount
available resource  likewise  allocation risk c i must optimized order minimize
cost  therefore  call decomposition method risk allocation 
      c onservatism r isk llocation pproach
mentioned previously  risk allocation approach gives conservative approximation
original chance constraint  subsection evaluates level conservatism risk allocation
approach 
let pf ail true probability failure  defined probability solution violates
constraints  i e   left hand side        since      sufficient necessary condition
      pf ail smaller equal risk bound general  pf ail   hence 
conservatism introduced risk allocation represented
pf ail  
best case scenario risk allocation approach violations constraints
mutually exclusive  meaning solution violates one constraint always satisfies
constraints  case       becomes necessary sufficient condition      hence 
risk allocation involve conservatism  therefore 
pf ail     
hand  worst case scenario constraints equivalent  meaning
solution violates one constraint always violates constraints  case 
pf ail  

n  
 
n

n number constraints 
practical problems lie somewhere best case scenario worst case scenario  typically closer best case worst case scenario  example 
two separate obstacles path planning problem  collisions two obstacles mutually
exclusive events  collision obstacle one time step usually imply collisions
time steps  rough approximation real world situation assume satisfaction constraints probabilistically independent  assumption  true probability
failure is 


pf ail  
pr  qc i  u      
     
iic

iic

ic set index state constraints  note   therefore  conservatism introduced risk allocation second order  
pf ail o     
example        true probability failure approximately pf ail       
practical cases  users prefer set small risk bounds  typically less     cases 
conservatism introduced risk allocation becomes small 
   

fio   w illiams     b lackmore

      c onversion eterministic c onstraints
individual chance constraint      involves single linear constraint  furthermore 
assuming actuator saturation  xti gaussian distribution covariance
matrix given      hence  htc i xti univariate gaussian distribution  following lemma
transforms individual chance constraint equivalent deterministic constraint involves
mean state variables  instead random state variables 
lemma    following two conditions equivalent 
 
 
pr htc i xti gc i     c i htc i xti gc i mc i  c i  

mc i  c i    



 htc i x ti hc i erf     c i    

    

note erf  inverse gauss error function x ti covariance matrix
xti   lemma holds mc i    inverse cumulative distribution function
univariate  zero mean gaussian distribution variance htc i x ti hc i  
      r isk llocation pproach c losed   loop c ontrol p olicy
close loop control policy employed  i e   k           risk actuator
saturation  since nonlinearity function u        makes probability distribution
xti non gaussian  mc i    cannot obtained       although theoretically possible
derive mc i    non gaussian distributions  difficult case since inverse
cumulative distribution function xti cannot obtained closed form 
solution issue summarized lemma   below  allows us assume xti
gaussian distributed hence use       even possibility actuator saturation 
approach enabled imposing additional chance constraints bound risk actuator
saturation follows 
pr  ut u       
    
bound risk actuator saturation time step t  using method presented
section        approximate u polytope follows 

ut u
hu i ut gu i  
iiu

assuming xti gaussian distributed  use lemma   transform      deterministic
constraints nominal control inputs follows 


hu i ut gu i mu t i  t i  
t i    
    
iiu

iiu


mu t i  c i    



 htu i x t hu i erf     c i    

following lemma holds 
   

    

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

lemma    following set constraints sufficient condition joint chance constraint
     problem   


c i     
htc i xti gc i mc i  c i  

cc iic  s 

tcmax




c i  
t i c

t   iiu
iic  s 


hu i ut gu i mu t i  t i   
    
tt iiu

    
mc i    mu t i given            tcmax last time step episodes
associated chance constraint c executed  given schedule s 
tcmax   max s ee
  
ac

intuitively  constraint      requires that  probability   c   episode constraints
satisfied actuators saturate episodes associated c executed 
proof  consider two plants    a  n     b   n     w  n     u
  a  n     b   n     w  n     rnu   u rnu compact convex set  see definition
    difference two plants possibility actuator saturation 
not  result  probability distribution state variables non gaussian 
gaussian  note result different probability distributions xti
ut   order explicitly show plant model considered  use notations xm
ti


ut proof 
first consider   follows lemmas     that 


max

tc










pr
htc i xm

g

 

u

u

 


 
      
c i
c
ti



cc

t  

iic  s 

let w  n       w  wn      define feasible disturbance set  wc  v   n     s  rn nx  
follows 


max

tc












htc i xm
u

u
 

g

 

wc  v   n     s     w  n   rn nx
c i
ti




iic  s 

t  

    
then  definition 


max
tc





u   pr  w  n   wc  v   n     s    
pr
htc i xm
um
ti gc i  

iic  s 

t  

   

fio   w illiams     b lackmore

next consider   note identical long actuator saturations

 i e   um
u   therefore  given w   n   wc  v   n     s   follows      xt  




xm
ut   ut   hence 

max

tc




w  n   wc  v   n     s   
htc i xm
um
ti gc i  
u  
t  

iic  s 

accordingly  given c c 




htc i xm
pr
ti gc i  
iic  s 





pr





tcmax


htc i xm
ti gc i  





um
u

t  

iic  s 

pr  w  n   wc  v   n     s  
max


tc





um
u
  pr
htc i xm

ti gc i  
t  

iic  s 

  c  
completes proof lemma  
note lemma   probabilistic extension closed loop robust model predictive
control  rmpc  methods proposed acikmese  carson iii  bayard        richards
        methods avoid risk actuator saturation imposing tightened control
constraints ut   since consider stochastic uncertainty  replace constraint tightening
chance constraints 
    convex programming solution problem  
using lemma    replace stochastic optimization problem  problem    deterministic
convex optimization problem 
problem    deterministic approximation problem  
min
u  n  c i   t i  
s t 

j  u  n   x  n  
 


    

xt  

hc i xti

  xt   b ut

    

gc i mc i  c i  

    

cc iic  s 



tt

hu i ut gu i mu t i  t i  

    

iiu



tcmax

c i  

cc iic  s 

   


t   iiu

t i c  

    

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

follows immediately corollaries     feasible solution problem   always
feasible solution problem    furthermore  blackmore ono        showed optimal
solution problem   near optimal solution problem    following lemma guarantees
tractability problem   
lemma    problem   convex optimization problem 
proof  inverse error function erf   x  concave x  since assume section      
c      feasible ranges upperbounded      since safety margin function
mc i  c i   mu t i  t i   convex     c i         t i      constraints     
     convex within feasible region  constraints convex since
linear  finally  objective function convex assumption  section         therefore  problem
  convex optimization problem 
since problem   convex optimization problem  solved interior point method
optimally efficiently  completes first spiral  planning ccqsps fixed schedule
convex constraints  next section present solution method non convex problem
branch and bound algorithm  whose subproblems convex problems 

   ccqsp planning non convex state space
next  consider second spiral  comprised problem   section      variant ccqsp
planning problem involves fixed schedule non convex constraints  obstacles 
shown figure    b   again  encoded chance constrained optimization problem 
addition obstacle avoidance constraints requires disjunctive state constraints  hence 
problem results non convex  chance constrained optimization  section introduces
novel algorithm  called non convex iterative risk allocation  nira   optimally solves deterministic approximation problem   
solution ccqsp planning problem non convex state space two fold 
first step  described section      obtain deterministic approximation problem    order
handle disjunctive chance constraints  develop additional decomposition approach called
risk selection  reformulates chance constraint disjunction constraints disjunction individual chance constraints  chance constraints      decomposed
set individual chance constraints risk allocation risk selection  technique
section       used obtain equivalent deterministic constraints  result  obtain
disjunctive convex programming problem  problem   section        
deterministic disjunctive convex programming problem solved second step  described sections          introduce nira algorithm  algorithm    significantly reduces computation time without making compromise optimality solution 
reduction computation time enabled new bounding approach  fixed risk relaxation
 frr   frr relaxes nonlinear constraints subproblems branch and bound algorithm
linear constraints  many cases  frr nonlinear subproblems formulated linear
programming  lp  approximated lp  nira obtains strictly optimal solution problem
  solving subproblems exactly without frr unpruned leaf nodes search tree 
subproblems solved approximately frr order reduce computation time 
   

fio   w illiams     b lackmore

    deterministic approximation
section    first obtain deterministic approximation problem   
      r isk election pproach
deterministic approximation obtained decomposing non convex joint chance constraint
     set individual chance constraints  risk allocation risk selection  revisit
race car example explain concept risk selection intuitively 

figure    racing car example  risk selection approach guarantees      risk bound
paths  lets vehicle choose better one 

racing car example consider example shown figure    vehicle uncertain
dynamics plans path minimizes time reach goal  vehicle allowed choose
one two routes shown figure    impose chance constraint limits probability
crashing wall mission      
satisfaction chance constraint guaranteed following process  first 
routes  find safety margin limits probability crash throughout route
     start goal  then  let vehicle plan nominal path operates within
safety margins  since routes      safety margin  chance constraint satisfied
matter route vehicle chooses  therefore  vehicle optimize path choosing
route results smaller cost  optimization process considered selection
risk  vehicle given two options figure    routes  a   b   involve
level risk  vehicle selects one results less cost  hence  name
decomposition approach risk selection 
      ecomposition c onjunctive j oint c hance c onstraint r isk
election
subsection  derive mathematical representation risk selection  let ci proposition either true false  following lemma holds 

   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

lemma   
pr

 n


 
ci  

i  

n


pr  ci    

i  

proof  following inequality always holds 


pr

 n


 
ci pr  ci    

    

i  

hence 

pr

 n


 
ci   pr  ci    

i  

n


pr  ci      

    

i  

following corollary follows immediately lemmas     
corollary    following set constraints sufficient condition disjunctive joint chance
constraint      problem   

c i     



cc







iic  s  jjc i



tcmax

c i  



tt


t   iiu

iic  s 



htc i j xti gc i j mc i  c i  

t i c





 

hu i ut gu i mu t i  t i   

    

iiu

note resulting set constraints      sufficient condition original chance
constraint       therefore  solution satisfies      guaranteed satisfy       furthermore 
although      conservative approximation       conservatism introduced risk selection
generally small many practical applications  claim empirically validated section
      
      eterministic pproximation p roblem  
using corollary    non convex fixed schedule ccqsp planning problem  problem    approximated following deterministic convex optimization problem  later convenience 
label part optimization problem  objective function    plant model   c  chance
constraints states    chance constraints control inputs   r  risk allocation constraint  
   

fio   w illiams     b lackmore

problem    deterministic approximation problem  
min
u  n  c i   t i  
s t 

 o   

j  u  n   x  n  

    

 m      xt     xt   b ut

 c   
htc i j xti gc i j mc i j  c i  

    
    

cc iic  s  jjc i

 d   



hu i ut gu i mu t i  t i  

    

tt iiu

 r   



tcmax

c i  

cc iic  s 



t i c  

    

t   iiu

follows immediately corollary   optimal solution problem   guaranteed
feasible solution original problem regard satisfying chance constraints
 problem     furthermore  empirically demonstrate section       near optimal
solution problem   applications 
    nira  branch bound based solution problem  
next present non convex iterative risk allocation  nira  algorithm  recall nira
optimally solves problem   branch and bound algorithm  standard branch and bound
solution problems involving disjunctive nonlinear constraints  problem   
use bounding approach nonlinear convex relaxed subproblems constructed
removing non convex constraints corresponding disjunction  approach
used balas        li williams        different problem known disjunctive linear
programming  whose subproblems lps instead convex programmings  however  although
standard branch and bound algorithm guaranteed find globally optimal solution problem   
computation time slow algorithm needs solve numerous nonlinear subproblems
order compute relaxed bounds 
new bounding approach  fixed risk relaxation  frr   addresses issue computing
lower bounds efficiently  observe relaxed subproblems nonlinear convex optimization problems  frr relaxes nonlinear constraints linear constraints  particularly 
objective function linear  frr subproblem  problem    lp 
efficiently solved  optimal objective value frr subproblem lower bound
optimal objective value original subproblem 
nira solves frrs subproblems order efficiently obtain lower bounds 
solving original subproblems exactly without relaxation unpruned leaf nodes order obtain
exact optimal solution  result  nira achieves significant reduction computation time 
without loss optimality 
      nira lgorithm overview
algorithm   shows pseudocode nira algorithm  input deterministic approximation non convex chance constrained optimal control problem  problem     five tuple
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

algorithm   non convex iterative risk allocation  nira  algorithm
function nira problem  returns optimal solution problem  
   set queue filo queue
   incumbent
   rootsubproblem obtainrootsubproblem problem 
   queue rootsubproblem
   queue empty
  
subproblem last entry queue
  
remove subproblem queue
  
lb obtainlowerbound subproblem 
  
lb incumbent
   
c    c     ic  s  
   
 j  u   solve subproblem 
   
j   incumbent

   
incumbent j  u u   update optimal solution
   
end
   
else
   
ii  
   
   ic  s  
   
c c       
   
end
   
j jc i
   
newsubproblems expand subproblem problem c i j 
   
add newsubproblems queue
   
end
   
end
   
end
    end

    return u

o  m  c  d  r  well fixed schedule s  output optimal nominal control sequence

u     u  un     
node branch and bound search tree corresponds subproblem convex
chance constrained optimization problem  problem     use filo queue store subproblems
search conducted depth first manner  line     node  corresponding
subproblem solved obtain lower bound objective value subsequent subproblems
 line     details bounding approaches explained subsection      lower bound
larger incumbent  algorithm prunes branch  otherwise  branch expanded
 line      branch expanded leaf without pruned  subproblems solved exactly
 line      subsection     explains expansion procedure detail  nira algorithm always

results globally optimal solution problem    since solution u obtained solving
subproblems leaf nodes exactly  next two subsections introduces branching bounding
methods 
   

fio   w illiams     b lackmore

    branching
subsection explains nira constructs root subproblem  line   algorithm    
well expands nodes  line    algorithm     root subproblem convex
optimal ccqsp planning problem without chance constraints  node expanded 
subproblems children nodes constructed adding one constraint disjunction
subproblem parent node  order simplify notations  let cc i j represent individual
chance constraint      problem   
 
rue  if htc i j gc i j xti mc i j  c i   
cc i j   
f alse  otherwise  
      walk   e xample
first present walk through example intuitively explain branching procedure  example instance problem    involves four individual chance constraints 


ht  i j xti g  i j m  i j    i  
    
i      j     

using notation defined above  set individual chance constraints      represented
follows 
 c      c         c      c       

    

figure    a  shows tree obtained dividing original problem subproblems sequentially 
subproblems corresponding trees four leaf nodes  nodes     figure    a   exhaust
conjunctive  i e   convex  combinations among chance constraints       hand 
subproblems corresponding three branch nodes  nodes     figure    a   involve disjunctive
 i e   nonconvex  clauses chance constraints  relax non convex subproblems convex
subproblems removing clauses contain disjunctions order obtain search tree
shown figure    b  

figure    branch and bound search tree sample disjunctive convex programming problem
 problem    constraints        a  tree non convex subproblems   b  tree relaxed convex subproblems 

   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

non convex problem  problem    optimally solved repeatedly solving relaxed
convex subproblems using algorithms presented section    following subsections introduce algorithms construct search tree relaxed convex subproblems  one
figure    b  
      r elaxed c onvex ubproblem
formulation relaxed convex subproblems given problem    represent index
j j c  i  since convex relaxation chooses one disjunct disjunction specified
optimal objective value relaxed
 c  i   let ic set indices i  denote jsp
subproblem 
problem    convex relaxed subproblem nira


jsp
 

min
u  n  c i   t i  
s t 

 o    j  u  n   x  n  
 m   
 c   

  xt     xt   b ut

htc i j c i  xti gc i j c i  mc i j c i   c i       
cc iic

 d   



hu i ut gu i mu t i  t i  

    

tt iiu

 r   



tcmax

c i  

cc iic



t i c  

    

t   iiu

note problem   identical problem    hence  algorithms introduced section  
used solve relaxed subproblems 
      c onstruction root ubproblem
root subproblem special case problem   ic empty set c c 
function presented algorithm   used line   nira algorithm  algorithm   
construct root subproblem branch and bound tree  note that  algorithm   
use object oriented notation  subproblem o  represent objective function
subproblem  resulting root subproblem follows 
      e xpansion ubproblems
order create child subproblem subproblem  function described algorithm  
used line    nira algorithm  algorithm     adds individual chance constraint
specified indices  c  i  j  conjunct  note resulting child subproblem still
convex optimization  individual chance constraint added conjunctively  nira
algorithm  algorithm    enumerates children nodes disjuncts jc i  lines        
   

fio   w illiams     b lackmore

algorithm   construction root subproblem nira
function obtainrootsubproblem problem  returns root subproblem
   rootsubproblem o problem o
   rootsubproblem m problem m
   rootsubproblem d problem d
   c c
  
rootsubproblem ic max
tc
  
rootsubproblem rc  lhs t  
iiu t i
  
rootsubproblem rc  rhs problem rc  rhs
   end
   return rootsubproblem
algorithm   expansion subproblem nira
function
expand subproblem  problem  c  i  j 
lem
   subproblem ic subproblem ic
   subproblem rc  lhs subproblem rc  lhs   c i
   return subproblem

returns



child

subprob 

    bounding
subsection  present two implementations obtainlowerbound function line  
algorithm    first one uses optimal solution convex subproblems  problem   
lower bounds  approach typically results extensive computation time  second one solves
lp relaxation convex subproblems  called fixed risk relaxation  frr   frr dramatically
reduces computation time compared first implementation  nira algorithm employs
second implementation 
      imple b ounding
algorithm   shows straightforward way obtain lower bounds  simply solves
convex relaxed subproblems  problem    using methods presented section      optimal
objective value relaxed subproblem gives lower bound optimal objective value
subproblems it  example  optimal solution relaxed subproblem node  
figure    b  gives lower bound objective value subproblems nodes     
constraints relaxed subproblems always subset constraints
subproblems below  note optimization problems formulated minimizations 
however  despite simplicity approach  computation time slow algorithm needs solve myriad subproblems  example  simple path planning problem
algorithm   simple implementation obtainlowerbound function line   algorithm  
function obtainlowerbound naive subproblem  returns lower bound
   solve subproblem using algorithms presented section    
   return optimal objective value

   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

ten time steps one rectangular obstacle requires solution                   worst
case  although branch and bound process often significantly reduces number subproblems
solved  moreover  subproblems  problem    nonlinear convex optimization problems
due nonlinearity mc i j mu t i            general nonlinear optimization problem requires significantly solution time specific classes optimization problems 
linear programmings  lps  quadratic programmings  qps  
      f ixed r isk r elaxation
new relaxation approach  fixed risk relaxation  frr   addresses issue  frr linearizes
nonlinear constraints           problem   fixing individual risk allocations 
c i t i   upper bound   objective function linear  frr lp 
frr convex piecewise linear objective function reformulated lp
introducing slack variables  see section       example    general convex objective function
approximated convex piecewise linear function  hence  many cases  frrs
subproblems result lps  solved efficiently  fixed risk relaxation problem
  follows 
problem    fixed risk relaxation problem  

jf rr   min
u  n
s t 

j  u  n   x  n  
 


xt     xt   b ut
htc i xti gc i mc i j c i   c  

    

cc iic  s 



hu i ut gu i mu t i  c  

    

tt iiu

note nonlinear terms            mc i j mu t i   become constant fixing c i
t i c   constant  optimal objective value frr provides tightest lower
bound among linear relaxations constraints            following lemmas hold 
lemma    problem   gives lower bound optimal objective value problem   

jf rr jsp

proof  mc i j    mu t i    monotonically decreasing functions  since c i c t i
c   individual chance constraints           fixed risk relaxation less stricter
first conjunct            therefore  cost optimal solution fixed risk
relaxation less equal original subproblem 
lemma    frr gives tightest lower bound among linear relaxations constraints     
     
proof  linear relaxation           becomes tighter fixing c i t i lesser value 
however  setting c i t i values less c may exclude feasible solutions  one
   

fio   w illiams     b lackmore

algorithm   frr implementation obtainlowerbound function line   algorithm  
function obtainlowrebound frr subproblem  returns lower bound
    c  i  j  subproblem c
  
subproblem cc i j  rhs mc i j  c     apply fixed risk relaxation
   end
    t  i 
  
subproblem dt i  rhs mu t i   apply fixed risk relaxation
   end
   remove subproblem r
   solve subproblem using lp solver
   return optimal objective value

sets c i   c  c  i   hence  frr tightest linear relaxation           
resulting tightest lower bound 
note optimal solution fixed risk relaxation  problem    typically infeasible
solution problem    since setting c i   t i   c violates constraint      
algorithm   implements fixed risk relaxation  lp relaxation solved lp solver 
optimal objective value returned 
completes second spiral  planning ccqsps fixed schedule nonconvex
constraints  next section  turn final spiral  involves flexible temporal constraints 

   ccqsp planning flexible schedule
section presents complete p sulu planner  efficiently solves general ccqsp
planning problem flexible schedule non convex state space  problem   section
        problem find schedule events satisfies simple temporal constraints 
well nominal control sequence u  n   satisfies chance constraints minimizes cost 
approach first generate feasible schedule extend control sequence
schedule  iteratively improving candidate schedules using branch and bound 
build p sulu planner upon nira algorithm presented previous section  recall
nira optimizes nominal control sequence u  n   given fixed schedule s  p sulu
planner uses nira subroutine takes schedule input  outputs optimal
objective value well executable control sequence  denote optimal objective value
given schedule j  s   using notation  ccqsp planning problem flexible
schedule  problem    rewritten schedule optimization problem follows 
min j  s  

ssf

    

recall domain feasible schedules sf  definition     finite set  since consider
discretized  finite set time steps  see section       hence  schedule optimization problem
     combinatorial constraint optimization problem  constraints given form
simple temporal constraints 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

algorithm   p sulu planner
function psulu ccqsp  returns optimal schedule control sequence
   incumbent  
   set queue filo queue
   e     e        e       
  initialize partial schedule
   queue e     
   queue empty
  
e   last entry queue
  
remove e   queue
  
 j   u  n     obtainlowerbound ccqsp  e    
  
j   incumbent
   
e   e
   
incumbent j   optctlsequence u  n     optschedule
   
else
   
expand ccqsp  queue  e  e    
   
end
   
end
    end
    return optctlsequence  optschedule

    algorithm overview
solution approach use branch and bound algorithm  branch and bound
search  p sulu planner incrementally assigns execution time step event order
find schedule minimizes j  s        objective function evaluated solving
fixed schedule ccqsp planning problem using nira algorithm  although combination
two branch and bound searches p sulu planner nira equivalent one unified
branch and bound search practice  treat separately ease explanation 
shown figure     branch and bound algorithm searches optimal schedule
incrementally assigning execution time steps event depth first manner  node
search tree corresponds partial schedule  definition     assigns execution time steps
subset events included ccqsp  partial schedule root node involves
assignment start node e    tree expanded assigning execution time step one new
event time  example  node  e        figure     a  represents partial schedule
assigns execution time step     event e      e    leaving ee unassigned 
p sulu planner obtains lower bound objective function value j  s  solving
ccqsp planning problem partial schedule extended s  p sulu
planner minimizes search space dynamically pruning domain forward checking 
specifically  execution time assigned event iteration branch andbound search  p sulu planner runs shortest path algorithm tighten real valued upper
lower bounds execution time step unassigned events according newly assigned
execution time step 
algorithm   shows pseudocode algorithm  node search tree  fixedschedule ccqsp planning problem solved given partial schedule  node
   

fio   w illiams     b lackmore

leaf tree optimal objective value less incumbent  optimal solution
updated  line      node leaf  optimal objective value corresponding
subproblem lower bound optimal objective value subsequent nodes  lower
bound less incumbent  node expanded enumerating feasible execution time
assignments unassigned event  line      otherwise  node expanded  hence
pruned  details branch and bound process described later subsections 

figure      a  example ccqsp   b  plan satisfies ccqsp  a 

figure      a  directed distance graph representation ccqsp figure     a    b  dgraph  a   shows shortest distances nodes   c  updated d graph
execution time     assigned event e   

 e      
 e  

 e      

 
 

 

 e      

 

 ee 

 ee 
 a 

 
 

 
 

 
 

 b 

figure     branch and bound search schedule s  assume time interval  
      a 
node  e        expanded  de                 given  e        
  max
since de     dmin
      
e                 figure     b    b 
 
  node  emin
  
 
   

expanded  dee           given  e         e         since dmax
e
e
           figure     c  

   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

walk through example present walk through example give readers insight solution process  consider ccqsp shown figure     a   ccqsp specifies mission
go waypoint get goal region b avoiding obstacle c  shown
figure     b   assume time interval       
figures       illustrate solution process  p sulu planner algorithm initialized
assigning execution time   start event e    figure     a  distance graph representation simple temporal constraints  dechter        ccqsp  note simple chance
constraint equivalently represented pair inequality constraints follows 
s e  s e    l  u  s e  s e   u s e   s e  l 
two inequality constraints represented two directional edges two nodes
distance graph  p sulu planner runs all pair shortest path algorithm distance
graph obtain d graph shown figure     b   d graph completed distance graph
edge labeled shortest path length  d graph represents tightest temporal
constraints  algorithm enumerates feasible execution time assignments event
e  using d graph  according d graph  execution time event e  must
         since consider discrete time steps time interval        feasible
execution time steps e             idea behind enumerating feasible execution time
steps assign event  thus tighten bounds unassigned events order ensure
feasibility 
node  e         p sulu planner solves frr fixed schedule ccqsp
planning problem end episode execution schedule  e        
words  tries find optimal path goes      neglects goal b
obstacle c  solution exists  optimal cost gives lower bound objective value
feasible paths go      assume solution exist  then 
p sulu planner prunes node  e         goes next node  e         solves
frr corresponding fixed schedule subproblem find best path goes
     assume p sulu planner finds solution  then  p sulu planner expands
node following process  first  fixes execution time  e        d graph 
runs shortest path algorithm order tighten temporal constraints      c    psulu planner uses updated d graph enumerate feasible execution time assignments
event ee           visits nodes solves fixed schedule subproblems exactly
episodes fully assigned schedule  example  node  ee        computes
best path goes     reaches b     avoiding obstacle c 
shown figure     b   assume optimal objective values subproblems     
 ee            ee        algorithm records solution  ee       cost
    incumbent 
algorithm backs visits node  e         relaxed subproblem
end episode solved obtain lower bound objective value subsequent
nodes  lower bound turns      exceeds incumbent  therefore  branch
pruned  since nodes expand  algorithm terminated  incumbent
solution returned 
   

fio   w illiams     b lackmore

algorithm   implementation expand function line    algorithm  
function expand ccqsp  queue  e  e    
   fix distance e  e  e t d graph ccqsp
   update d graph running shortest path algorithm
   choose e e e
  choose unassigned event
   e    e e
max
   de           dmin
e    tt de    
   de   
 
 e   e e  

  
 e    
  update partial schedule

 e   e  
  
queue e  
   end
    branching
algorithm   outlines implementation expand   function algorithm    takes partial
schedule input  adds queue set schedules assign execution time step
additional event e   words  domain newly added schedules e one
assigned event domain input partial schedule e   details algorithm  
explained following parts subsection 
      e numeration f easible ime tep ssignments using   graph
enumerating feasible time steps  simple temporal constraints must respected 
accomplish this  use d graph translate bounds durations two events
bounds execution time step event  shown dechter et al        
set feasible execution times event e bounded distance e e  dgraph  d graph directed graph  weights edges represent shortest distances
nodes  figure     b   order obtain d graph representation  first translate
simple temporal constraints directed distance graph  figure     a   weight
edge two nodes  events  corresponds maximum duration time origin node
destination node  specified corresponding simple temporal constraint  distance
takes negative value represent lower bounds  d graph  figure     b   obtained
distance graph  figure     a   running all pair shortest path algorithm  dechter et al         
forward checking d graph p sulu planner algorithm incrementally assigns
execution time step event  explained walk through example  p sulu planner
minimizes search space forward checking using d graph  forward checking
methods constraint programming  method prunes values unassigned variables  i e  
execution times unassigned event  violate simple temporal constraints  different
normal forward checking back tracking performed  due decomposability
d graph  forward checking conducted following process  execution time step
assigned event e  i e    e    t   distance e  e fixed tt   distance
e e  fixed tt distance graph  line   algorithm     recall
index discretized time steps fixed interval   temporal bounds given
real valued times  section       run shortest path algorithm update d graph  line
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

    given partial schedule   denote updated shortest distance start event e  e

min
d graph dmax
e     distance e e  de    
example  execution time   assigned event e  figure     c   i e    e         
distance e  e  fixed   distance opposite direction fixed
   run shortest path algorithm update d graph  result  obtain
min
updated distances dmax
ee          dee          
max
dechter et al         showed de    corresponds upper bound feasible execution time unassigned event e   dmin
ee    corresponds negative lower bound 
hence  partial schedule assigned events e e   updated domain unassigned
max
event e
  e bounded dmin
e    de     note domain execution time steps
max
e included in  equal  dmin
e     de      consider discrete execution
time steps finite set t  forward checking  p sulu planner computes
max

real valued bounds  dmin
e     de      feasible values unassigned variable e

enumerated search tree expanded e  
enumerating domain execution time steps unassigned event readily
extract feasible execution time steps unassigned event e
  e updated d graph
partial schedule   let de    domain execution time steps unassigned event
e
  e   given partial schedule   finite domain de    obtained follows 
max
de           dmin
e    tt de     

note de    may empty temporal constraints tight  even though feasible  user p sulu planner must make small enough de empty 
example  figure     b  d graph given partial schedule   e          according
d graph  e  must executed          assuming      set feasible
execution time steps e  de                  shown figure     a   likewise  figure     c 
d graph given partial schedule   e          e          feasible execution time ee
         hence  set feasible execution time steps ee dee             
shown figure     b  
enumeration conducted line   algorithm    algorithm creates extensions
input partial schedule assigning time steps e  line     puts extended
partial schedules queue  line    
      e fficient variable rdering b ranch    b ound earch
choosing next event assign time step line   algorithm    two variable ordering
heuristics found effective order reduce computation time 
first heuristic new convex episode first  cef  heuristic  prioritizes events
associated non convex constraints  idea cef heuristic based
observation subproblems branch and bound algorithm particularly difficult solve
episodes a e   involve non convex state constraints  remain r   c   d
plane minus obstacle c  episode walk through example figures    example
non convex episodes  therefore  effective approach reduce computation time
p sulu planner minimize number non convex subproblems solved branch andbound process  idea realized sorting events episodes convex
feasible region always examined branch and bound process episodes
   

fio   w illiams     b lackmore

non convex feasible region  walk through example  note visited event e 
event ee example  end episode involves convex state
constraint remain r   c   d plane minus obstacle c  non convex 
second one well known constrained variable heuristic  p sulu planner
expands node  counts number feasible time steps unassigned events  chooses
one least number feasible time steps  second heuristic used break ties
first heuristic 

    bounding
next present implementation obtainlowerbound   function line   algorithm   
algorithm obtains lower bound solving relaxed ccqsp planning problem fixed
partial schedule 
algorithm   outlines implementation obtainlowerbound   function  takes partial
schedule input  outputs lower bound objective function  well optimal
control sequence  given partial schedule   constructs relaxed optimization problem 
involves episodes whose start end events assigned execution time steps  line    
optimization problem involves non convex constraints  nira algorithm used obtain
solution problem  line     otherwise solve frr convex optimization problem
obtain lower bound efficiently  line     input fully assigned schedule  e   e  
corresponding node leaf node  case obtain exact solution ccqsp
planning problem fixed schedule running nira algorithm  line     details
algorithm   explained subsequent part subsection 

algorithm   implementation obtainlowerbound function line   algorithm  
function obtainlowerbound ccqsp  e     returns optimal objective value control sequence
   subprblem problem   given ccqsp
   e   e a   episodes non convex state regions 
  
 j   u  n     nira subprblem    algorithm  
   else
  
j obtainlowrebound frr subprblem    algorithm  
  
u  n  
   end
   return  j   u  n    

      r elaxed ptimization p roblem partial chedule
consider relaxed optimization problem follows 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

problem    relaxed optimization problem partial schedule
j     

min
u  n   un
s t 

j u  n     x  n    

    

  xt     xt   b ut




    
htc a k j xt gc a k j mc a k j  c a k  

cc a c a    ta    kka jja k

    



c a k   c  

    

kka  a c a   

j    optimal objective value relaxed subproblem partial schedule  
recall a   partial episode set   involves episodes whose start
end nodes assigned execution time steps partial schedule  definition    
notational simplicity  merge three conjunctions      obtain following 

htc i j xti gc i j mc i j  c i   
cc iic    jjc i

note chance constraint exactly       except partial schedule
specified instead fully assigned schedule s  hence  problem   instance non convex
ccqsp planning problem fixed schedule  problem     optimally solved
nira algorithm  note fully assigned schedule leaf node branch andbound search tree 
optimal objective value problem   gives lower bound optimal objective value
subsequent subproblems branch and bound tree  property formally stated
lemma   below  order prove feature  first define concept extension
partial schedule follows 
definition     schedule   e   extension partial schedule   e  
assign time steps events domain  
 e    s e  e e  
example  figure     b   fully assigned schedule  s e         s e         s ee       
 s e         s e         s ee        extension partial schedule   e          e         
following lemma always holds 
lemma    schedule extension partial schedule   optimal objective value
problem   lower bound optimal objective value s 
j    j  s  
proof  since partial schedule  e e  hence a   a  also  since  e    s e 
e e   state constraints chance constraint      problem   partial schedule
included problem full schedule s  means feasible state space
   

fio   w illiams     b lackmore

problem subset one   hence  chance constraint      problem
satisfied  chance constraint      problem satisfied  therefore 
problem always results better  less  equal cost problem  
former looser constraints 

example  figure     b   e  assigned execution time step ee not 
therefore  node  e         chance constrained optimization problem end
episode solved partial schedule   e          e          see figure     a    gives
lower bound cost problems fully assigned schedules  s e         s e     
   s ee         s e         s e         s ee        
algorithm   obtains lower bound solving problem   exactly using nira algorithm 
involves episodes non convex state regions  line     function called leaf node 
problem   solved exactly nira  solutions leaf subproblems
candidate solutions optimal solution overall problem  hence  solving exactly 
ensure optimality branch and bound search 
      f urther b ounding frr
relaxed subproblem  problem    convex  p sulu planner solves frr subproblem  instead solving exactly nira  order obtain lower bound efficiently
 line   algorithm     many practical ccqsp execution problems one episode
non convex feasible region  example  ccqsp planning problem shown figures
     safe region  r  minus obstacles  non convex  provincetown  start
region   scenic region  bedford  goal region  convex  case subproblems
solved exactly leaf nodes  lower bounds always evaluated approximate
solutions frrs subproblems non leaf nodes 

   results
section empirically demonstrate p sulu planner efficiently operate various
systems within given risk bound  first present simulation settings section      section     presents simulation results nira algorithm  validates claim
efficiently compute feasible near optimal solution  section     demonstrates p sulu planner two different benchmark problems  simulation results highlight p sulu planners
capability operate within user specified risk bound  section     deploys p sulu planner
pts scenarios  section     applies p sulu planner space rendezvous
autonomous cargo spacecraft international space station 
    simulation settings
recall that  stated section      p sulu planner takes four inputs  stochastic plant model
m  initial condition i  ccqsp p   objective function j  section specifies
j  commonly used problems sections          specify p
problem corresponding section 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

      tochastic p lant odel
section explains plant model used sections            section     uses different plant
model described detail section        consider point mass double integrator plant 
shown            parameters  umax   vmax       set individually
problem  plant model commonly assumed literatures unmanned aerial vehicle  uav 
path planning  kuwata   how        leaute        wang  yadav    balakrishnan        
state vector xt consists positions velocities x directions  control
vector consists accelerations 
xt     x vx vy  t  

ut     ax ay  t  

plant model specified following matrices 





     
t    
 
     


 
t    
  b  
  w  
a 
     




 
     
 
 

t    ut    umax     cxt    vmax  
 


c 

       
       

   
   
   
   

 
 
 
 


 
 
    
 
 
    

 
 

first constraint      imposed order limit acceleration  nonlinear constraint
approximated following set linear constraints 
t  r n ut umax  n           nr  
 
 
 n
 n
  sin
r n   cos
nr
nr
choose nr       second constraint      imposed order limit velocity  use
linear approximation above 
      bjective f unction
sections                  cost function manhattan norm control input
planning horizon  follows 
j xti   u   s   




  ux t      uy t     

t  

cost function represents total change momentum  roughly proportional
fuel consumption aerial vehicle  note minimization problem piece wise linear
cost function equivalently replaced following minimization problem
linear cost function additional linear constraints introducing slack variables x t y t  
min




 x t   y t  

t  

s t 

t 

x t ux t x t ux t y t uy t y t uy t
   

fio   w illiams     b lackmore

section        minimize expected quadratic cost follows 


 
 
j xti   u   s   
e u x t   u y t  

    

t  

      c omputing environment
simulations except ones section     conducted machine dual core
intel xeon cpu clocked      ghz     gb ram  algorithms implemented
c c    run debian       os  simulations section     conducted machine
quad core intel core i  cpu clocked      ghz    gb ram  algorithms
implemented matlab  run windows   os  used ibm ilog cplex optimization
solver academic edition version      linear program solver  snopt version      
convex optimization solver 
    nira simulation results
first statistically compare performance nira prior art  recall nira
solver ccqsp planning problems non convex state constraints fixed schedule
 problem     used subroutine p sulu planner 
      c ompared lgorithms
two existing algorithms solve problem 
   fixed risk allocation  blackmore et al           approach fixes risk allocation
uniform value  result  assumption cost function linear  problem  
reformulated mixed integer linear programming  milp  problem 
solved efficiently milp solver  cplex 
   particle control  blackmore          particle control sampling based method 
uses finite number samples approximate joint chance constraints  control
sequence optimized number samples violate constraints less c np  
np total number samples  optimization problem reformulated
milp  assumption cost function linear 
compare nira mdp section        although mdp solve
exactly problem nira  avoid risk considering penalty cost constraint
violations  purpose comparison highlight capabilities chance constrained
planning provide guarantee probability failure 
      p roblem ettings
compare closed loop open loop niras two algorithms   d path planning
problem randomized location obstacle  shown figure     vehicle starts
       heads goal             avoiding rectangular obstacle  obstacle
edge length     placed random location within square region corners        
                        consider ten time steps time interval        require
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

mean state                  risk bound set         set standard
deviation disturbance         use expected quadratic cost function given      
steady state lqr gain used closed loop nira q   i  r        i   
n n identity matrix q r cost matrices state control variables 
respectively 
 

nira  closed loop 
nira  open loop 
fixed risk allocation
particle control

   

nira  closed loop 
nira  open loop 

 
   

   

   

   

   

   

   
 

 
 

   

   

   

   

 

 

 a  nominal trajectories

   

   

   

   

 

 b  nominal trajectories   ellipses

figure      a  instance   d path planning problem used        obstacle
fixed size randomly placed within unit square run   b  mean
standard deviation closed loop open loop niras 

      p erformance c omparison
recall solution nira algorithm  used p sulu planner solve subproblems  exactly optimal solution problem    since risk allocation  section       
risk selection  section        replace chance constraint      sufficient condition     
      since chance constraint      difficult evaluate  previously proposed
methods solve optimization approximation  provide empirical evidence risk
allocation selection approach results solution significantly closer optimal solution
prior art  satisfaction original constraint      guaranteed 
evaluate suboptimality solutions difference risk bound   
       resulting probability constraint violation  pf ail   estimated monte carlo simulation    pf ail equal left hand side value      problem    hence  chance
constraint      equivalent to 
pf ail  
strictly optimal solution problem achieve pf ail     although exact
solution unavailable  since algorithm solve problem   exactly  solution suboptimal pf ail     ratio  pf ail represents degree suboptimality  solution
violates chance constraint pf ail    
   

fio   w illiams     b lackmore

algorithm
nira  closed loop 
nira  open loop 
fixed risk allocation
particle control
     particles 

computation time
 sec 
         
         
         

probability failure

cost

             
             
               

           
           
           

         

           

           

table    averages standard deviations computation time  probability constraint violation  cost four algorithms  algorithms run     times
random location obstacle  risk bound set         note particle
control results less cost two methods solutions violate
chance constraint 

table   compares performance four algorithms  values table averages standard deviations     runs random locations obstacle  probability
constraint violation  pf ail   evaluated monte carlo simulations     samples 
comparison closed loop open loop niras comparing nira existing algorithms  first compare two variants nira  closed loop open loop niras  table
  shows closed loop nira results less cost open loop nira  importantly 
former outperforms latter     test cases  reduction cost closed loop
approach explained figure     b   shows   ellipses probability distribution
state  since closed loop nira assumes feedback control  future position less uncertain  result  plan generated closed loop nira less conservative  fact  table
  shows pf ail closed loop nira closer risk bound open loop
nira  however  closed loop planning problem requires twice much solution time
open loop one since complicated due additional chance constraints control input 
comparison fixed risk allocation approach table   shows closed open niras
result average probabilities failure               respectively  within userspecified risk bound         hand  fixed risk allocation approach results
conservative probability failure  pf ail                 smaller  
result indicates solution nira significantly closer exactly optimal solution
fixed risk allocation approach  fact  nira algorithm results less cost fixed risk
allocation approach     runs  optimizes risk allocation
fixed risk allocation approach uses predetermined risk allocation 
figure    shows suboptimality measure  pf ail open loop nira different settings risk bound   values   suboptimality nira significantly smaller
fixed risk allocation approach  graph shows tendency suboptimality nira
gets smaller less   suboptimality fixed risk allocation approach approximately constant 
nira achieves improvement solution optimality cost computation time  table
  shows nira takes longer computation time risk allocation approach factor
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

pfail  

figure     suboptimality nira fixed risk allocation approach  strictly optimal solution
 pf ail      smaller value  pf ail indicates solution suboptimal 

two  hence  nira fixed risk allocation approach provide users trade off
suboptimality computation time 
comparison particle control table   shows average probability failure
particle control approach higher risk bound         meaning approach
tends generate infeasible solutions  hand  nira guarantees satisfaction
chance constraint since employs conservative approximation joint chance constraint 
particle control guarantee solution converges optimal solution increasing number samples infinity  however  using large number samples impractical 
since computation time memory usage grow exponentially number samples increases 
example  used     samples analysis table    using     samples  took
     seconds  about     hours  solve problem obstacles centered            
computation      samples could conducted  shortage memory 
hand  computation time nira significantly shorter pc  guaranteeing
feasibility solution 
      ptimal p lanning e xpected c ost
next demonstrate capability p sulu planner handle expected cost  instead cost
expected trajectory  path planning problem presented above  specifically 
consider expected quadratic cost function shown       conducting open loop planning 
cost function transformed function nominal control inputs constant term
using equality       however  performing closed loop planning  equality
exact  due controller saturation  nevertheless  use      approximation expected
cost  explained section        subsection empirically evaluate error
approximation 
   

fio   w illiams     b lackmore

approximate expected cost
                       

actual expected cost
                       

table    comparison approximate expected cost obtained closed loop nira
actual expected cost  table shows mean variance     runs random
location obstacle 

table   compares approximate expected cost function value obtained closed loop
nira actual expected cost estimated monte carlo simulation one million samples 
path planning problem solved     times randomized location obstacle  risk
bound set         shown table  approximate cost almost exactly agrees
actual cost  closed loop planning approach explicitly bounds risk
controller saturation 
      c omparison mdp
next compare nira mdp formulation  sake tractability mdp 
consider single integrator dynamics two dimensional state space two dimensional
control input  specifies velocity vehicle  rest problem setting same 
except state space discretized     by     grid  implement finite horizon
mdp based path planner  imposes penalty c event failure minimizes
expected cost based explicit state dynamic programming  mdp based path planner imposes
cost follows 
 
 
 
 
u x t   u y t   ci xt    
e
t  

i xt   indicator function one xt obstacle zero otherwise 
resulting optimization problem solved via dynamic programming 
ran mdp based path planner three values penalty c             
choice c  conducted     simulations randomized obstacle position  figure    shows
typical output mdp based path planner  note that  small penalty  c       path
planner chooses take      risk failure ignoring obstacle  simply
penalty failure smaller expected reduction cost going obstacle 
issue utilitarian approaches mdps minimization unconstrained cost
sometimes lead impractical solution 
table   shows mean standard deviation path lengths  well maximum 
minimum  mean resulting probability failure among     runs  expected 
imposing larger penalty  mdp path planner chooses risk averse path 
longer nominal path length  sense  mdp conduct trade off cost
risk  mdp particularly useful primary concern user cost failure instead
probability failure  hand  user would impose hard bound
probability failure  chance constrained planning approach advantage  observe that 
even penalty value  mdp based path planner results wide range failure
probabilities depending location obstacle  notably  c      
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

paths move directly across obstacle  doing  accept      probability failure 
others go around obstacle  undesirable behaviors  crossing obstacle  likely
suppressed imposing greater penalty  without guarantee  moreover  imposing heavy
penalty failure often results overly conservative  risk averse solution  hand 
behavior nira regarding risk predictable  sense path guaranteed
go around obstacle  regardless location  chance constraint requires
exists margin path boundary obstacle  p sulu planner
inherits property nira 

 

   

   

   

   

c  
c   
c    

 
 

   

   

   

   

 

figure     optimal paths generated mdp based planner different penalty levels   c 
red rectangle represents obstacle  note path c     cuts
obstacle 

penalty c

path length

 
  
   

         
         
         

probability failure
max
mean min
                 
                 
                  

table        runs randomized obstacle location

    p sulu planner simulation results
next present simulation results p sulu planner two problems  order illustrate
capability planning schedule constraints  empirically evaluate scalability
p sulu 
   

fio   w illiams     b lackmore

figure     sample ccqsp personal aerial vehicles path planning scheduling problem 

figure     output p sulu planner ccqsp figure    three different settings
risk bound obs   compared path planned deterministic planner  sulu 
consider chance constraints 

      path p lanning bstacles
simulation test p sulu planner path planning problem environment shown
figure     input ccqsp shown figure     ccqsp requires vehicle arrive
goal region within    minutes  going waypoint   waypoint   temporal
constraints specified figure     imposes two chance constraints  one requires
vehicle achieve time evolved goals     certainty  another requires vehicle
limit probability violating obstacles obs   set                
figure    shows plans generated p sulu planner three different risk bounds 
obs                      computation times      seconds       seconds 
     seconds  respectively  figure    shows plan generated sulu  deterministic planner
explicitly consider uncertainty  leaute   williams         observe sulu leaves
margin path obstacles  result  sulu path results       probability
hitting obstacles  estimated monte carlo simulation     samples  hand 
p sulu planner leaves margins path obstacles order satisfy risk bound 
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

specified chance constraint  margins larger plans smaller risk bounds 
probabilities failure three plans generated p sulu planner  estimated monte carlo
simulations     samples                            respectively  hence chance
constraints satisfied  schedule optimized p sulu planner  s e         s e     
   s e          s ee          satisfies temporal constraints ccqsp 
figure     appears path cuts across obstacle  due discretization
time  optimization problem requires vehicle locations discrete time step
satisfy constraints  consider state between  issue addressed
constraint tightening method  kuwata        
      path p lanning ndoor e nvironment

figure     sample ccqsp path planning problem indoor environment 

     
    
      

   
 
goal
   
   
   
   
 

start

   
   

 

   

   

   

   

 

   

figure     output p sulu planner ccqsp figure    three different settings
risk bound obs  

next give p sulu planner ccqsp shown figure     simulates path planning problem indoor environment  vehicle must get goal region side
room three five seconds  remain safe region episode requires vehicle stay
   

fio   w illiams     b lackmore

within room outside obstacle five second planning horizon  ccqsp
imposes two chance constraints shown figure     set                    
given ccqsp  planner faces choice  heading straight goal going
narrow passage left wall obstacle minimizes path length  involves
higher risk constraint violation  making detour around right side obstacle involves
less risk  results longer path 
figure    shows p sulu planners outputs obs                  computation times      seconds       seconds       seconds  respectively  result consistent
intuition  p sulu planner allowed     risk  planner chooses go straight
goal  resulting cost function value       user gives         risk bound 
chooses risk averse path  resulting cost function values            respectively 
example demonstrates p sulu planners capability make intelligent choice order
minimize cost  limiting risks user specified levels 
      calability nalysis
subsection conduct empirical analysis scalability p sulu planner 
environment becomes increasingly constrained   shown figure     measured computation time solve path planning problem different numbers obstacles waypoints 
simulations  path starts         ends square region centered           figure   
shows twenty simulation results  zero three obstacles zero four waypoints  obstacles
waypoints represented blue red squares figure  respectively  positions
center obstacles                              positions center
waypoints                                     computation time shown caption
subfigure figure    
comparing results figure    horizontally  observe exponential growth computation time number obstacles  result expected since number disjunctive
clauses state constraint p sulu planner increases exponentially number
obstacles  building tractable extension p sulu planner large number obstacles
future work  hand  comparing results vertically  find computation
time number obstacles different number waypoints stays order
magnitude  adding extra waypoint increases number conjunctive
clauses state constraints 
remaining sections describe application psulu two real world problems  air
vehicle space vehicle control  third application  building energy management  using variant
p sulu planner  reported ono  graybill  williams        
    pts scenarios
next  deploy p sulu planner pts scenarios  robotic air taxi system introduced
section   
      cenarios
consider three scenarios  specified ccqsps shown figure     scenarios    
similar scenic flight scenario introduced beginning paper  see figure    
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

      sec

      sec

      sec

      sec

      sec

      sec

      sec

      sec

      sec

      sec

      sec

     sec

      sec

      sec

      sec

     sec

      sec

      sec

      sec

     sec

  
  
 

  
  
 

  
  
 

  
  
 

  
  
 
 

 

  

  

 

 

  

  

 

 

  

  

 

 

  

  

figure     computation time p sulu planner path planning problem different numbers obstacles waypoints 

scenario    personal aerial vehicle  pav  takes runway    provincetown municipal
airport  kpvc  provincetown  massachusetts  fly scenic region  lands runway   
hanscom field  kbed  bedford  massachusetts  vehicle required stay within
scenic region least   minutes    minutes  entire flight must take
   minutes less    minutes  scenario   scenario    except runways
used take off landing 
scenario   simulates leisure flight coast massachusetts  pav takes runway  
provincetown municipal airport  flies two regions whales often seen 
vehicle lands runway    hanscom field 
place three no fly zones  shown figure     entire flight must take   
minutes less    minutes  scenario three chance constraints   c    c    c     shown
figure     first one  c    concerned vehicles operation  requires vehicle
take land right runways right airports less      probability
failure  second chance constraint  c    concerned leisure activities  requires
vehicle fly scenic regions less      probability failure  finally  c 
concerned passengers safety  requires vehicle limit risk penetrating
no fly zones        
   runway airport specified number  represents clockwise angle north  example 
runway   points    degrees away north 

   

fio   w illiams     b lackmore

      p lant parameters
set umax       m s  approximates maximum cruise speed private jet airplanes 
gulfstream v  maximum acceleration determined maximum bank angle 
assuming aircraft flying constant speed  lateral acceleration given function
bank angle follows 
  g tan  
g acceleration gravity  typically passenger aircraft limits bank angle   
degrees passenger comfort  even though aircraft capable turning larger bank
angle  hence  use 
umax       m s  tan            m s   
set            seconds 
      imulation r esults
figure    shows paths planned p sulu planner three scenarios  scenarios 
episode requirements ccqsps figure    met within specified temporal
chance constraints 
table   compares performance sulu p sulu planner  expected  sulus plans
result excessive probabilities failure scenarios  sulu consider
uncertainty planning process  although pav subject disturbance reality 
hand  p sulu planner successfully limits probability failure within user specified
risk bounds three scenarios  furthermore  although p sulu planner significantly reduces
risk failure  cost higher sulu               capability
limiting risk maximizing efficiency time desirable feature pts 
transports passengers 
scenario number
planner
computation time  sec 
pf ail  
pf ail  
pf ail  
cost function value j

 
sulu
    
     
     
     
    

 

p sulu
    
        
        
        
    

sulu
    
     
     
     
    

p sulu
   
        
        
        
    

 
sulu
    
     
     
     
    

p sulu
   
        
        
        
    

table    performance comparison prior art  sulu  p sulu planner  pf ail     pf ail    
pf ail   represent probabilities failure regarding chance constraints c    c   
c  figure     respectively 

   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure     ccqsps pts scenarios 

figure     paths planned p sulu planner 

   

fio   w illiams     b lackmore

shown table    p sulu planner typically takes several minutes compute plan 
length computation time would allowed pts applications  since assume psulu planner used preplanning  take off  passengers pav specify requirements 
p sulu planner creates risk sensitive flight plan  assume real time plan executive
executes plan take off 
note desirable real time risk sensitive plan executive  since risk factors  location storms  change time  future work reduce computation
time p sulu planner used real time execution 
    space rendezvous scenario
p sulu planner general planner whose application limited specific plant model 
order show generality planner  deployed p sulu planner system whose
plant model significantly different pts 
specifically  chose autonomous space rendezvous scenario h ii transfer vehicle
 htv   shown figure     subject  htv unmanned cargo spacecraft developed
japanese aerospace exploration agency  jaxa   used resupply international space
station  iss   collision vehicle iss may result fatal disaster  even collision
speed low  example  august       russian unmanned resupply vehicle progress m   collided mir space station failed attempt automatic rendezvous docking 
result  one modules mir permanently depressurized  order avoid
accident  htv required follow specified safety sequence automated rendezvous 
described following subsection 

figure     h ii transfer vehicle  htv   japanese unmanned cargo vehicle  conducts autonomous
rendezvous international space station  image courtesy nasa 

      htv r endezvous equence
htvs autonomous rendezvous mission  final approach phase starts approach initiation  ai  point  located   km behind iss  shown figure     first  htv moves
r bar initiation  ri  point  located     iss  guided relative gps
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

navigation  ri point  htv switches navigation mode rendezvous sensor  rvs  navigation  rvs navigation  htv measures distance iss precisely beaming laser
reflector placed nadir  earth facing  side iss  then  htv proceeds hold point
 hp   located     iss  required hold hp order perform     degree
yaw around maneuver  new orientation htv allows vehicle abort rendezvous
quickly case emergency  yaw around maneuver  htv resumes approach 
holds parking point  pp      iss  finally  htv approaches
distance    meters iss  stops within capture box  cb  isss robotic
arm  robotic arm grabs htv docks iss  please refer report japan
aerospace exploration agency        details rendezvous sequence 
ri

hp

pp cb


iss

    m

   m    m

iss orbit

    

x

earth
ai  approach initiation
ri  r bar initiation
hp  hold point
pp  parking point
cb  capture box

ai point
     

figure     htvs final approach sequence  japan aerospace exploration agency        
rendezvous sequence described represented ccqsp shown figure    
addition time evolved goals specified actual rendezvous sequence  specify temporal
constraints chance constraints simulation  shown figure  require htv hold
intermediate goal least     seconds  transition goals must take
least     seconds  order make sure vehicle moves slowly enough  entire mission
must completed within      seconds    hour    minutes   require htv stay within
safe zone  conic area iss  rvs navigation phase       probability 
since otherwise laser may reflected back htv properly  assume goals
square regions     sides ri hp    sides pp    sides cb  finally 
require htv achieves time evolved goals       success probability 
      rbital dynamics
rendezvous considered two body problem  chaser spacecraft  e g   htv 
moves relation target spacecraft  e g   iss   circular orbit  problem 
convenient describe motion chaser spacecraft using rotating frame fixed
target space craft  known hill coordinate frame  schaub   junkins         shown
figure     set x axis pointing away center earth y axis along
   

fio   w illiams     b lackmore

figure     ccqsp representation htvs final approach sequence  assume
time evolved goals ones used actual flight missions  temporal constraints
chance constraints added authors 

orbital velocity target spacecraft  since htvs path within x y plane  dont consider
z axis 
known relative motion chase spacecraft hill coordinate frame described following clohessy wiltshire  cw  equation  vallado        
x           x   fx
    x   fy
angular speed target spacecrafts orbit  fx fy force per unit
mass  acceleration x directions  first terms right hand sides represent
coriolis force 
object follows cw equation moves unintuitive manner  unforced motion
straight line due coriolis effect  general  object cannot stay position
without external force  example  figure    shows fuel optimal path visit two waypoints 
b  come back start  seen figure  optimal path typically
straight line  virtue p sulu planner handle irregular dynamic systems
way regular systems  setting b matrices plant model    
appropriately 
state vector consists positions velocity x plane 
x    x vx vy  t
obtain discrete time cw equation using impulse invariant discretization 
xk     axk   buk  
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk



start

b

figure     typical motion spacecraft hill coordinate frame  solid line fuel
optimal path visits b returns start    minutes  note
optimal path straight line hill coordinate frame 






 




b  


    cos t  
  t sin t   
  sin t  
    cos t   

 
 
 
 

sin t  

   cos t   


   cos t   

  sin t  
 t


cos t  
  sin t  


  sin t  
  cos t    

sin t  

   cos t   


   cos t   

  sin t  
 t


cos t  
  sin t  

  sin t  
  cos t    












use isss orbital angular speed             rad sec  station goes around
earth    minutes  choose interval       seconds  number time steps n
set     hence  entire plan      seconds    hour    minutes   discretization 
assumed impulse inputs follows 
 

fx
fy

 
 

n
 


 t k uk  

k  

   dirac delta function  assumption justified thrusters
reaction control system  rcs  spacecraft  used final approach maneuver 
operate short duration           seconds  burn  wertz   wiley j  larson        
consider stochastic uncertainty w  added discrete time dynamic equation 
xk     axk   buk   w 
assumption additive uncertainty commonly used past research autonomous
rendezvous formation flight space  shields  sirlin    wette        smith   hadaegh       
   

fio   w illiams     b lackmore

campbell   udrea         assume w
following covariance matrix 
 
  
 
 
   
w  
 
 
 
 

zero mean gaussian distribution 

 
 
 
 


 
 
 
 
 

      bjective f unction
employ objective function j requires p sulu planner minimize fuel consumption  follows tsiolkovsky rocket equation fuel consumption spacecraft
proportional total change velocity  called delta v v  wertz   wiley j  larson        
total fuel consumption summation fuel consumption reaction jets x
directions time steps  hence objective function described follows 
j u  n     vx   vy
 n   t
 
 fx      fy  dt
 



k n
 n   t

  fifi  n   t


 
 t k ux k dtfi  
 t k uy k dtfi

 
 

 

k  
k n
 

 ux k      uy k   

k  

      imulation r esult
figure    shows planning result p sulu planner  compare result sulu 
well nominal planning approach  assume htv moves ai ri using
two impulse transition  called cw guidance law   matsumoto  dubowsky  jacobsen    ohkami 
      vallado         ri cb  follows predetermined path goes center
safe zone  shown figure     b   constant speed 
shown figure     optimal paths generated p sulu planner sulu
straight  curved paths exploit coriolis effect minimize fuel consumption 
table   compares performance three planning approaches  two rows regarding
probabilities failure correspond two chance constraints specified ccqsp  shown
figure     probabilities evaluated monte carlo simulation one million samples 
expected  probabilities failure path generated p sulu planner less
risk bounds specified ccqsp  shown figure     hand  again 
sulus path results almost      probability failure  sulu minimizes fuel
consumption without considering uncertainty  resulting path pushes boundaries
feasible regions  evident figure     c   note that  although p sulu planner
significantly reduces probability constraint violation compared sulu  cost  delta v 
higher sulu       p sulu planner results significantly smaller cost  delta
v  nominal planning approach       m sec reduction delta v equivalent
     kg saving fuel  assuming         kg mass vehicle     sec specific impulse
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

figure     planning results sulu  p sulu planner  nominal planning approach 
input ccqsp shown figure    

 isp   thrusters  although p sulu planner takes longer compute plan
two approaches       second computation time negligible compared   hour   
minute plan duration 

computation time  sec 
probability failure pf ail  navigation 
probability failure pf ail  goals 
cost function value  delta v  j  m sec 

sulu
   
    
   
    

p sulu planner
    
      
      
    

nominal
    
     
     
    

table    performance comparison sulu  p sulu planner  nominal approach
htv rendezvous scenario 

   

fio   w illiams     b lackmore

   conclusions
article introduced model based planner  p sulu planner  operates within userspecified risk bounds  p sulu planner optimizes continuous control sequence discrete
schedule  given input continuous stochastic plant model  objective function  newly
developed plan representation  chance constrained qualitative state plan  ccqsp   ccqsp
involves time evolved goals  simple temporal constraints  chance constraints  specify
users acceptable levels risk subsets plan 
approach developing p sulu planner two fold  first step  developed
efficient algorithm  called non convex iterative risk allocation  nira   plan nonconvex state space fixed schedule  solved problem based key concept
risk allocation risk selection  achieves tractability allocating specified risk individual constraints mapping result equivalent disjunctive convex program 
nira algorithm employs branch and bound algorithm solve disjunctive convex program 
subproblems fixed schedule ccqsp problems convex state space  solved
previously developed algorithms  blackmore   ono         developed novel relaxation method called fixed risk relaxation  frr   provides tightest linear relaxation
nonlinear constraints convex subproblems 
second step  developed p sulu planner  solve ccqsp planning problem flexible schedule  scheduling problem formulated combinatorial constrained
optimization problem  cop   solved branch and bound algorithm  subproblem branch and bound search ccqsp planning problem fixed schedule 
solved nira  domain feasible schedule pruned running shortest path algorithm d graph representation given temporal constraints  lower bounds optimal objective value subproblems obtained solving fixed schedule ccqsp planning
problems subset state constraints imposed  proposed efficient variable
ordering prioritizes convex subproblems non convex ones  demonstrated p sulu
planner various examples  personal aerial transportation system autonomous space
rendezvous  showed efficiently solve ccqsp planning problems small suboptimality  compared past algorithms 

acknowledgments
paper based upon work supported part boeing company grant no  mitba gta   national science foundation grant no  iis          opinions 
findings  conclusions recommendations expressed publication authors
necessarily reflect view sponsoring agencies  would thank michael
kerstetter  scott smith  ronald provine  hui li boeing company support  thanks
robert irwin advice draft 

references
acikmese  b   carson iii  j  m     bayard  d  s          robust model predictive control algorithm
incrementally conic uncertain nonlinear systems  international journal robust
nonlinear control                
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

aircraft owners pilots association air safety foundation              joseph t  nall report
  accident trands factors       
altman  e          constrained markov decision processes  stochastic modeling  chapman  
hall crc 
alur  r   feder  t     henzinger  t  a          benefits relaxing punctuality  journal
acm     
bacchus  f     kabanza  f          planning temporally extended goals  annals mathematics
artificial intelligence  pp      
balas  e          disjunctive programming  annals discrete mathematics 
bertsekas  d  p          dynamic programming optimal control volume  third edition  
athena scientific 
bertsekas  d  p     tsitsiklis  j  n          neuro dynamic programming   st edition   athena
scientific 
blackmore  l          probabilistic particle control approach optimal  robust predictive control 
proceedings aiaa guidance  navigation control conference 
blackmore  l   li  h     williams  b  c          probabilistic approach optimal robust path
planning obstacles  proceedings american control conference 
blackmore  l     ono  m          convex chance constrained predictive control without sampling 
proceedings aiaa guidance  navigation control conference 
boyan  j  a     littman  m  l          exact solutions time dependent mdps  advances
neural information processing systems  pp            mit press 
boyan  j  a     moore  a  w          generalization reinforcement learning  safely approximating value function  advances neural information processing systems   
campbell  m  e     udrea  b          collision avoidance satellite clusters  proceedings
american control conference 
charnes  a     cooper  w  w          chance constrained programming  management science    
     
coles  a  j   coles  a   fox  m     long  d          colin  planning continuous linear numeric
change  j  artif  intell  res   jair           
dechter  r          constraint processing  elsevier 
dechter  r   meiri  i     pearl  j          temporal constraint networks  artificial intelligence     
     
dolgov  d     durfee  e          stationary deterministic policies constrained mdps multiple rewards  costs  discount factors  proceedings nineteenth international
joint conference artificial intelligence  ijcai     pp           
feng  z   dearden  r   meuleau  n     washington  r          dynamic programming structured
continuous markov decision problems  proceedings proceedings twentieth
conference annual conference uncertainty artificial intelligence  uai      pp     
     arlington  virginia  auai press 
   

fio   w illiams     b lackmore

fleming  w     mceneaney  w          risk sensitive control infinite time horizon  siam
journal control optimization                  
fox  m     long  d          modelling mixed discrete continuous domains planning  journal
artificial intelligence research             
geibel  p     wysotzki  f          risk sensitive reinforcement learning applied control
constraints  journal artificial intelligence research            
goulart  p  j   kerrigan  e  c     maciejowski  j  m          optimization state feedback
policies robust control constraints  automatica                 
hofmann  a  g     williams  b  c          robust execution temporally flexible plans bipedal
walking devices  proceedings international conference automated planning
scheduling  icaps     
jacobson  d          optimal stochastic linear systems exponential performance criteria
relation deterministic differential games  automatic control  ieee transactions on 
               
japan aerospace exploration agency         htv   mission press kit  available on line http 
  www jaxa jp countdown h bf  pdf presskit htv e pdf 
kuwata  y     how  j  p          cooperative distributed robust trajectory optimization using receding horizon milp  ieee transactions control systems technology                
kuwata  y          real time trajectory design unmanned aerial vehicles using receding horizon
control  masters thesis  massachusetts institute technology 
kvarnstrom  j     doherty  p          talplanner  temporal logic based forward chaining planner 
annals mathematics artificial intelligence 
lagoudakis  m  g     parr  r          least squares policy iteration  journal machine learning
research          
leaute  t          coordinating agile systems model based execution temporal plans 
masters thesis  massachusetts institute technology 
leaute  t     williams  b  c          coordinating agile systems model based execution temporal plans  proceedings twentieth national conference artificial
intelligence  aaai  
li  h     williams  b  c          generalized conflict learning hybrid discrete linear optimization  proc    th international conf  principles practice constraint programming 
li  h  x          kongming  generative planner hybrid systems temporally extended
goals  ph d  thesis  massachusetts institute technology 
matsumoto  s   dubowsky  s   jacobsen  s     ohkami  y          fly by approach guidance
uncontrolled rotating satellite capture  proceedings aiaa guidance  navigation 
control conference exhibit 
nemirovski  a     shapiro  a          convex approximations chance constrained programs 
siam journal optimization             
   

fip robabilistic p lanning c ontinuous dynamic ystems b ounded r isk

oldewurtel  f   jones  c  n     morari  m          tractable approximation chance constrained
stochastic mpc based affine disturbance feedback  proceedings conference decision control 
ono  m          closed loop chance constrained mpc probabilistic resolvability  proceedings ieee conference decision control 
ono  m   graybill  w     williams  b  c          risk sensitive plan execution connected sustainable home   proceedings  th acm workshop embedded systems  buildsys  
ono  m     williams  b  c       a   efficient motion planning algorithm stochastic dynamic
systems constraints probability failure  proceedings twenty third aaai
conference artificial intelligence  aaai     
ono  m     williams  b  c       b   iterative risk allocation  new approach robust model
predictive control joint chance constraint  proceedings   th ieee conference
decision control 
prekopa  a          use discrete moment bounds probabilistic constrained stochastic
programming models  annals operations research           
richards  a     how  j          robust stable model predictive control constraint tightening 
american control conference        p    pp 
sanner  s          relational dynamic influence diagram language  rddl   language description 
available http   users cecs anu edu au ssanner ippc      rddl 
pdf 
schaub  h     junkins  j  l          analytical mechanics space systems  american institute
aeronautics astronautics  inc 
shields  j   sirlin  s     wette  m          metrology sensor characterization pointing control
formation interferometer testbed  fit   proceedings ieee aerospace conference 
smith  r     hadaegh  f          distributed estimation  communication control deep space
formations  iet control theory applications 
stoorvogel  a          h control problem  state space approach  prentice hall 
vallado  d  a          fundamentals astrodynamics applications  second edition  microcosm press 
van hessem  d  h          stochastic inequality constrained closed loop model predictive control
application chemical process operation  ph d  thesis  delft university technology 
wang  x   yadav  v     balakrishnan  s  n          cooperative uav formation flying obstacle collision avoidance  ieee transactions control systems technology        
wertz  j  r     wiley j  larson  e          space mission analysis design  third edition  
microcosm springer 
younes  h  l  s     littman  m  l          ppddl     extension pddl expressing planning
domains probabilistic effects  tech  rep   carnegie mellon university 

   


