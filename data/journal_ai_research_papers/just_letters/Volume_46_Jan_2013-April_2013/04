journal artificial intelligence research                 

submitted        published      

description logic knowledge action bases
babak bagheri hariri
diego calvanese
marco montali

bagheri   inf  unibz  
calvanese   inf  unibz  
montali   inf  unibz  

krdb research centre knowledge data
free university bozen bolzano
piazza domenicani          bolzano  italy

giuseppe de giacomo
riccardo de masellis
paolo felli

degiacomo   dis   uniroma   
demasellis   dis   uniroma   
felli   dis   uniroma   

dipartimento di ingegneria informatica automatica e gestionale
sapienza universita di roma
via ariosto           roma  italy

abstract
description logic knowledge action bases  kab  mechanism providing
semantically rich representation information domain interest terms description logic knowledge base actions change information time  possibly introducing
new objects  resort variant dl lite unique name assumption enforced
equality objects may asserted inferred  actions specified sets
conditional effects  conditions based epistemic queries knowledge base
 tbox abox   effects expressed terms new aboxes  setting  address
verification temporal properties expressed variant first order  calculus quantification across states  notably  show decidability verification  suitable restriction inspired
notion weak acyclicity data exchange 

   introduction
recent work business processes  services databases bringing forward need considering data processes first class citizens process service design  nigam   caswell 
      bhattacharya  gerede  hull  liu    su        deutsch  hull  patrizi    vianu        vianu 
      meyer  smirnov    weske         particular  so called artifact centric approaches 
advocate sort middle ground conceptual formalization dynamic systems
actual implementation  promising effective practice  cohn   hull        
verification temporal properties presence data represents significant research challenge  for survey  see calvanese  de giacomo    montali         since taking account
data evolve time results systems infinite number states  neither finite state
model checking  clarke  grumberg    peled        current techniques infinitestate model checking  mostly tackle recursion  burkart  caucal  moller    steffen        
apply case  recently  advancements issue  cangialosi  de giacomo  de masellis    rosati        damaggio  deutsch    vianu        bagheri hariri  calvanese 
de giacomo  de masellis    felli        belardinelli  lomuscio    patrizi         context
suitably constrained relational database settings 
c
    
ai access foundation  rights reserved 

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

work based maintaining information relational database 
sophisticated applications foreseen enrich data intensive business processes semantic
level  information maintained semantically rich knowledge base allows
operating incomplete information  calvanese  de giacomo  lembo  montali    santoso       
limonad  de leenheer  linehan  hull    vaculin         leads us look combine
first order data  ontologies  processes  maintaining basic inference tasks  specifically
verification  decidable  setting  capture domain interest terms semantically
rich formalisms provided ontological languages based description logics  dls 
 baader  calvanese  mcguinness  nardi    patel schneider         languages natively deal
incomplete knowledge modeled domain  additional flexibility comes added
cost  however  differently relational databases  evaluate queries need resort logical
implication  moreover  incomplete information combined ability evolving system
actions results notoriously fragile setting w r t  decidability  wolter   zakharyaschev 
    b      a  gabbay  kurusz  wolter    zakharyaschev         particular  due nature
dl assertions  which general definitions constraints models   get one
difficult kinds domain descriptions reasoning actions  reiter        
amounts dealing complex forms state constraints  lin   reiter        
overcome difficulty  virtually solutions aim robustness based so called
functional view knowledge bases  levesque         kb provides ability querying
based logical implication  ask   ability progressing new kb forms
updates  tell   baader  ghilardi    lutz        calvanese  de giacomo  lenzerini    rosati 
       notice functional view tightly related epistemic interpretation kb
 calvanese  de giacomo  lembo  lenzerini    rosati      a   indeed work related
epistemic dynamic logic  van ditmarsch  van der hoek    kooi         and  though
scope paper  decidability results presented could find application context
research well 
follow functional view kbs  however  key point work execution step external information incorporated system form new individuals  denoted
function terms   is  systems closed w r t  available information  makes
framework particularly interesting challenging  particular  presence individuals requires specific treatment equality  since system progresses new information
acquired  distinct function terms may inferred denote object 
specifically  introduce so called knowledge action bases  kabs   kab
equipped ontology or  precisely  tbox expressed  case  variant dllitea  calvanese  de giacomo  lembo  lenzerini    rosati      b   extends core
web ontology language owl   ql  motik  cuenca grau  horrocks  wu  fokoue    lutz       
particularly well suited data management  tbox captures intensional information
domain interest  similarly uml class diagrams conceptual data models  though
software component used run time  kab includes abox  acts
storage state  abox maintains data interest  accessed relying query answering based logical implication  certain answers   notably  variant dl litea without
unique name assumption  una   allow explicit equality assertions abox 
way suitably treat function terms represent individuals acquired execution 
technically  need dealing equality breaks first order rewritability dl litea query
answering  requires that  addition rewriting process  inference equality performed
   

fid escription l ogic k nowledge action bases

 artale  calvanese  kontchakov    zakharyaschev         query language  use unions
conjunctive queries  possibly composing certain answers full fol constructs 
gives rise epistemic query language asks known current kb  calvanese et al       a   apart kb  kab contains actions  whose execution changes
state kb  i e   abox  actions specified sets conditional effects 
conditions  epistemic  queries kb effects expressed terms new aboxes 
actions static pre conditions  whereas process used specify actions
executed step  simplicity  model processes condition action rules 
condition expressed query kb 
setting  address verification temporal dynamic properties expressed firstorder variant  calculus  park        stirling         atomic formulae queries
kb refer constants function terms  controlled form
quantification across states allowed  notice previous decidability results actions
dl kbs assumed information coming outside system  sense
new individual terms added executing actions  calvanese et al         baader et al        
rosati   franconi         paper  instead  allow arbitrary introduction new terms 
unsurprisingly  show even simple kabs temporal properties  verification
undecidable  however  show rich class kabs  verification fact decidable
reducible finite state model checking  obtain result  following cangialosi et al         
bagheri hariri et al          rely recent results data exchange finiteness
chase tuple generating dependencies  fagin  kolaitis  miller    popa         though  case 
need extend approach deal  i  incomplete information   ii  inference equality 
 iii  quantification across states verification language 
paper organized follows  section   give preliminaries dl litea without
una   going knowledge base formalism  section   describes kab framework detail  section   discusses execution semantics  section   introduce
verification formalism kabs  section    show verification kabs general undecidable  even considering simple temporal properties kabs  section    give
main technical result  verification weakly acyclic kabs decidable e xp ime  section   
extensively survey related work  section   concludes paper 

   knowledge base formalism
description logics  dls   baader et al         knowledge representation formalisms
tailored representing domain interest terms concepts  or classes   denoting sets
objects  roles  or relations   denoting binary relations objects  dl knowledge bases
 kbs  based alphabet concept role names  alphabet individuals 
dl kb formed two distinct parts  tbox  represents intensional level kb
contains description domain interest terms universal assertions concepts
roles  abox  represents instance level kb contains extensional
information participation individuals concepts roles 
expressing kbs use dl litenu   variant dl litea language  poggi  lembo 
calvanese  de giacomo  lenzerini    rosati        calvanese  de giacomo  lembo  lenzerini   
rosati        drop unique name assumption  una  line standard web
ontology language  owl     bao et al          essentially  dl litenu extends owl   ql
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

profile owl    including functionality assertions possibility state equality
individuals 
syntax concept role expressions dl litenu follows 
r p   p  
v r   r 

b n   r 
c b   b 

n denotes concept name  p role name  p inverse role 
formally  dl litenu kb  t  a   tbox finite set tbox assertions form
b v c 

r v v 

 funct r  

called respectively concept inclusions  role inclusions  functionality assertions  follow
usual assumption dl lite  according tbox may contain neither  funct p  
 funct p   contains r v p r v p   role r  poggi et al         calvanese et al  
       condition expresses roles functionality assertions cannot specialized 
dl litenu tboxes able capture essential features conceptual modeling formalisms 
uml class diagrams  or entity relationship schemas   namely isa classes
associations  relationships   disjointness classes associations  typing associations  association multiplicities  in particular  mandatory participation functionality  
main missing feature completeness hierarchies  would require introduction
disjunction would compromise good computational properties dl lite 
abox dl litenu kb  t  a  finite set abox assertions form
n  t    

p  t    t    

t    t   

called respectively  concept  membership  assertions  role  membership  assertions  equality
assertions  t    t  terms denoting individuals  see below   presence equality assertions abox requires specific treatment equality goes beyond usual reasoning
techniques dl lite based first order rewritability  although reasoning remains polynomial
 artale et al          hand  allow explicit disequality  though one use
membership disjoint concepts assert two individuals different 
dl litenu admits complex terms denoting individuals  terms inductively defined
starting finite set constants  applying finite set  uninterpreted  functions
various arity greater    result  set individual terms countably infinite 
call function terms terms involving functions  also  structure terms impact
inference equality  congruence relation structure terms  i e   ti   t i  
            n   f function symbol arity n  f  t            tn     f  t             t n    apart
aspect related equality  treat individuals denoted terms simply ordinary
individual constants dls 
adopt standard semantics dls based fol interpretations    i     
interpretation domain interpretation function ti   n  
p   term t concept name n   role name p   coherently congruence
relation terms   f  t            tn   i    f  t             t n   i   whenever tii   t i  
            n  
complex concepts roles interpreted follows 
 r i
 b i

   o   o    o  o    ri   
    b  

 p  i
 r i
   

    o    o       o    o    p   
    r  

fid escription l ogic k nowledge action bases

interpretation satisfies assertion form 
b v c  b c  
r v v   ri v  
 funct r   o  o    o  that    o  o      o  o     ri   o    o   
n  t     ti  n  
p  t    t      ti    ti    p  
t    t    ti    ti   
model kb  t  a  satisfies assertions a  kb  t  a  satisfiable
model  say abox consistent w r t  tbox kb  t  a  satisfiable 
assertion logically implied kb  t  a   denoted  t  a       every model  t  a 
satisfies well 
following characterization satisfiability logical implication dl litenu easy
consequence results artale et al         
theorem   checking satisfiability logical implication dl litenu pt ime complete 
proof  pt ime lower bound immediate consequence lower bound established
artale et al         dl litenu allow use complex individual terms 
upper bound  artale et al         provide pt ime algorithm based first using
functionality assertions exhaustively propagate equality  resorting pt ime algorithm
 in combined complexity  reasoning dl lite absence una  adapt
algorithm changing first step  propagate  pt ime  equality terms
active domain due functionalities  due congruence 
next introduce queries  usual  cf  owl     answers queries formed constants terms denoting individuals explicitly mentioned abox   active  domain
abox a  denoted adom a    finite  set constants terms appearing concept  role 
equality assertions a   predicate  alphabet kb  t  a   denoted alph  t  a   set
concept role names occurring a 
union conjunctive queries  ucq  q kb  t  a  fol formula form
 y   conj     x   y     yn  conj n   x   yn   free variables  x existentially quantified variables  y             yn   conj   x  y i   q conjunction atoms form n  z   p  z  z    
n p respectively denote concept role name occurring alph  t  a    z  z  
constants adom a  variables  x y i               n   certain answers q
 t  a  set ans  q  t  a  substitutions  free variables q constants terms
adom a  q evaluates true every model  t  a   i e   q logically implied
 t  a   following notation used assertions  denote  t  a     q  q free
variables  called boolean certain answers either empty substitution denoting
true nothing denoting false 
again  easy consequence results artale et al          obtain following
characterization query answering dl litenu  
theorem   computing ans  q  t  a  ucq q dl litenu kb  t  a  pt ime complete
size a 
   customary  view substitution simply tuple constants  assuming ordering free
variables q 

   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

proof  proof theorem    first propagate pt ime equality terms
active domain using functionality congruence closure  resort query answering
dl lite presence una  pt ime combined size tbox
abox resulting equality propagation  actually  ac  size abox  
consider extension ucqs  called ecqs  queries query language
eql lite ucq   calvanese et al       a   is  fol query language whose atoms ucqs
evaluated according certain answer semantics above  ecq kb  t  a  possibly
open formula form
q  q     x   y    q   q  q    x q 
 q  denotes certain answers ucq q  t  a    x   y  denotes certain answers
x    t  a   is  set  hx  yi adom a     t  a      x   y    logical operators
usual meaning  quantification ranges elements adom a  
formally define relation q holds  t  a  substitution free variables
q  written t  a     q  inductively follows 
t  a 
t  a 
t  a 
t  a 
t  a 

    q 
    x   y 
   q
   q  q 
   x q







 t  a     q 
 t  a      x   y  
t  a      q 
t  a     q  t  a     q   
exists adom a  t  a   x t     q 

 x t  denotes substitution obtained assigning x constant term  if x
already present value replaced t  not  pair x t added substitution  
certain answer q  t  a   denoted ans  q  t  a   set substitutions
free variables q q holds  t  a    i e  
ans  q  t  a 

      t  a     q  

following line proof calvanese et al       a   considering theorem  
basic step evaluating ucq  get 
theorem   computing ans  q  t  a  ecq q dl litenu kb  t  a  pt imecomplete size a 
recall dl lite enjoys rewritability property  states every ucq q
every dl lite kb  t  a  
ans  q  t  a 

  ans  rew  q     a  

rew  q  ucq computed reformulation algorithm calvanese et al       b  
notice that  way  compiled away tbox  result extended ecqs
well  i e   every ecq q  ans  q  t  a    ans  rew  q     a  query rew  q 
obtained q substituting atom  q   where q ucq   rew  q    calvanese et al  
    a   setting  exploit rewritability  pre processed
abox  in pt ime  propagating equalities individual terms adom a  according
functionality assertions congruence terms 
   

fid escription l ogic k nowledge action bases

say two aboxes a  a  equivalent w r t  tbox predicate alphabet  
denoted
a  t  a   
every abox assertion   a  either concept assertion n  t  n   role
assertion p  t    t    p   equivalence assertion t    t     t  a           viceversa  every abox assertion   a    either concept assertion n  t  n  
role assertion p  t    t    p   equivalence assertion t    t     t  a          
notice a  t  a    every ecq q whose concept role names belong
ans  q  t  a      ans  q  t  a     notice that  applying theorem   boolean
query    corresponding abox assertion   a  a    obtain abox
equivalence checked pt ime 

   knowledge action bases
knowledge action base  kab  tuple k    t  a        a  form
knowledge component  or knowledge base   form action component  or action
base   practice  k stores information interest kb  formed fixed tbox
initial abox a    evolves executing actions according sequencing established
process   evolution new individuals acquired kb  individuals
witnesses new pieces information inserted kab environment kab
runs  i e   external world   represent new objects function terms  kab
evolves  identity individuals intuitively preserved induces necessity
remembering equalities terms denoting individuals discovered past  describe
detail components kab 
    tbox
dl litenu tbox  used capture intensional knowledge domain interest 
tbox fixed all  evolve execution kab 
    abox
a  dl litenu abox  stores extensional information interest  notice a 
abox initial state kab  kab evolves due effect actions 
abox  indeed state system  evolves accordingly store up to date information 
actions acquire new information external world using calls external
services represented functions  given information services 
except name parameters passed them  functions remain uninterpreted 
assume result service calls depends passed parameters  hence 
represent new individuals returned service calls function terms  presence
function terms impact treatment equality  since principle need close equality
w r t  congruence  closure generates infinite number logically implied equality
assertions  going keep assertions implicit  computing needed 
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

    actions
finite set actions  action modifies current abox adding deleting
assertions  thus generating new abox a    action form
act  x     e            en   
act  x  signature  e            en    finite  set effects forming effect
specification   action signature constituted name act list  x individual input
parameters  need instantiated actual individuals execution time   effect ei
form
 qi    q
a i  
   


qi  ucq  i e   positive query  extracts bulk data process  obtained
certain answers qi     free variables qi  include action parameters 
 
q
arbitrary ecq  whose free variables occur among free variables qi  
refines  using negation quantification  result qi    query  qi    q

whole extracts individual terms used form new state kab  notice
ucq ecq division convenience readily available positive part
condition  exploit later  

a i set  non ground  abox assertions  include terms  constants a    free
variables qi    function terms f   x  arguments  x free variables qi   
terms  grounded values extracted  qi    q
  give rise  ground  abox
assertions  contribute form next state kab 
precisely  given current abox k substitution input parameters
action   denote action instantiated actual parameters coming  
firing state a  get new state a  computed simultaneously applying
instantiated effects follows 
effect ei form     extracts set ans    qi    q
   t  a  tuples
terms adom a  and  tuple   asserts set a i abox assertions obtained
a i applying substitution free variables qi    function term
f   x  appearing a i   new ground term introduced form f   x  
terms represent new constants coming external environment kab running
in 
denote ei  a  overall set abox assertions  i e  
 

ei  a   

a i  

ans    qi   q
  t a 

   disregard specific treatment output parameters  assume instead user freely pose queries
kb  extracting whatever information she he interested in 

   

fid escription l ogic k nowledge action bases

moreover  let eq t  a     t    t    ht    t  ans   x    x     t  a    observe that  due
semantics queries  terms eq t  a  must appear explicitly adom a  
is  possibly infinite number equalities due congruence appear eq t  a  
though logically implied  hence  equalities eq t  a  equality assertions involving terms adom a  either appear explicitly a  obtained
closing functionality congruence terms 
overall effect action parameter substitution new abox a   
 t  a   
 
ei  a  
 t  a      eq t  a 
 in

notice presence function terms action effects makes domain aboxes obtained executing actions continuously changing general unbounded size  notice
persistence assumption equalities  i e   implicitly copy equalities holding current state new one  implies that  system evolves  acquire new
information equalities terms  never lose information equalities already acquired 
finally  observe execution mechanism persistence frame assumption  except equality  made  principle every move substitute whole old state  i e   abox 
new one  hand  clear easily write effect specifications
copy big chunks old state new one  example   p  x  y  
p  x  y  copies
entire set assertions involving role p   sense  execution mechanism adopted
paper basic address elaboration tolerance issues typical
reasoning actions  frame problem  ramification problem qualification problem
 reiter           consider irrelevant  contrary  relevant
research issues desirable  adopt basic mechanism simply
general enough expose difficulties need overcome order get decidability
verification setting 
    process
process component kab possibly nondeterministic program uses kab aboxes
store  intermediate final  computation results  actions atomic instructions 
aboxes arbitrarily queried kab tbox   updated
actions   specify process component adopt rule based specification 
specifically  process finite set condition action rules  condition action rule
expression form
q    
action q ecq  whose free variables exactly parameters
  rule expresses that  tuple condition q holds  action actual
parameters executed  processes force execution actions constrain them 
user process able choose action rules forming process allow 
moreover  processes inherit entirely states kab knowledge component  tbox
abox   see  e g   cohn   hull        
   see work kowalski sadri        

   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

villain v character
livesin v character
livesin v city
character v livesin
 funct livesin 
enemy v villain
enemy v superhero
defeated v villain
defeated v superhero
defeated v enemy
alterego v superhero
alterego v character
 funct alterego 

    

alterego
enemy

superhero

character

    

livesin

city

villain

 subset 
defeated

figure    kabs tbox example  
observe adopt basic rule based specification because  spite simplicity 
able expose difficulties setting  choices possible  particular 
process could maintain state besides one kab  long additional
state finite  embeddable kab itself  results would easily extend case 
example   let us consider kab k    t  a        describing super heroes comics world 
cities characters live  figure   shows tbox rendering
uml class diagram  relationship uml class diagrams description logics
general dl lite particular  refer work berardi  calvanese  de giacomo
       calvanese  de giacomo  lembo  lenzerini  poggi  rodrguez muro  rosati
        dynamics domain  characters superheroes  super villains 
fight other  classic plot  superheroes help endeavors law enforcement
fighting villains threatening city live in  villain reveals perpetrating
nefarious purposes citys peace  consequently becomes declared enemy
superheroes living city  character lives one city time  common trait
superheroes secret identity  superhero said alter ego character 
identity common life  hence  abox assertion alterego s  p  means superhero
alter ego character p  villains always try unmask superheroes  i e   find secret identity 
order exploit knowledge defeat them  notice subtle difference here  use
alterego s  p  assertion model fact alter ego p  whereas asserting   p
capture knowledge p semantically denote individual  may include
actions following ones 
becomesh p  c       character p  livesin p  c  v villain v  livesin v  c  
 superhero sh p    alterego sh p   p   
copyall  
states exists least one villain living city c  new superhero sh p  created 
purpose protecting c  superhero p alter ego  copyall shortcut
explicitly copying concept role assertions new state  equality assertions always
   

fid escription l ogic k nowledge action bases

implicitly copied   action
unmask s  p       alterego s  p  
copyall  

 s   p  

states superhero s  alter ego p  gets unmasked asserting equality
p  it known   p   action
fight v  s      p  villain v  character p  alterego s  p    s   p 
copyall  

 defeated v  s   

states villain v fights superhero s  defeats unmasked  i e   known
equal alter ego  action
challenge v  s   
   villain v  superhero s  p alterego s  p  livesin p  sc    defeated v  s  
 livesin v  sc   enemy v  s   
copyall  
states villain v challenges superhero defeated him  next lives
city enemy s  action
threatencity v  c   
   villain v  superhero s  p alterego s  p  livesin p  c  
 enemy v  s  livesin v  c  
copyall  
states villain v threatens city c  becomes enemy superheroes
live c 
process might include following rules 
 character p    s superhero s  livesin s  c  
 superhero s  character c  
 enemy v  s    v    defeated v     s  
 villain v  superhero s  
 villain v  city c   v     villain v     livesin v     c    v   v     

 
 

 
 
 

becomesh p  c  
unmask s  c  
fight v  s  
challenge v  s  
threatencity v  c  

instance  first rule states character become superhero city already
one  whereas last one states villain threaten city  city
another villain  known be  distinct him her 
notice that  execution  reasoning kb performed  instance  consider
initial abox
a      superhero batman   villain joker   alterego batman  bruce  
livesin bruce  gotham   livesin batman  gotham   livesin joker  city     
state  bruce batman live city  batman alter ego bruce 
known whether denote individual  executing challenge joker  batman  a   
indeed allowed process   generates new abox added assertions enemy joker 
batman   livesin joker  gotham   gotham   city  implied functionality livesin 

   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

   kab transition system
semantics kabs given terms possibly infinite transition systems represent
possible evolutions kab time  actions executed according process  notice
transition systems must equipped semantically rich states  since full kb associated them  formally define kind transition system need follows  transition
system tuple form  u  t    s    abox      where 
u countably infinite set terms denoting individuals  called universe 
tbox 
set states 
s  initial state 
abox function that  given state returns abox associated
individuals terms u  conforms  
transition relation pairs states 
convenience 
introduce active domain whole transition system  defined
adom      adom  abox  s    introduce  predicate  alphabet alph   
set concepts roles occurring co domain abox  
kab generates transition system form execution  formally  given
kab k    t  a         define  generated  transition system k    u  t    s    abox    
follows 
u formed constants function terms inductively formed starting
adom  a    applying functions occurring actions  
tbox kab 
abox identity function  i e   state simply abox  
s    a  initial state 
defined mutual induction smallest sets satisfying following property    rule q     evaluate q and  tuple returned 
 t  abox  s     consistent w r t    s  s     t  abox  s     
notice alphabet alph k   k simply formed set alph k  concepts
roles occur k 
kab transition system k infinite tree infinitely many different aboxes
nodes  general  fact  get transition system infinite  enough perform
indefinitely simple action adds new terms step  e g   action form
        c x  

 c f  x     copyall   

hence classical results model checking  clarke et al          developed finite
transition systems  cannot applied directly verifying kabs 
   

fid escription l ogic k nowledge action bases

   verification formalism
specify dynamic properties kabs  use first order variant  calculus  stirling       
park          calculus virtually powerful temporal logic used model checking
finite state transition systems  able express linear time logics ltl psl 
branching time logics ctl ctl   clarke et al          main characteristic
 calculus ability expressing directly least greatest fixpoints  predicate transformer 
operators formed using formulae relating current state next one  using fixpoint
constructs one easily express sophisticated properties defined induction co induction 
reason virtually logics used verification considered fragments
 calculus  technically   calculus separates local properties  asserted current state
states immediate successors current one  properties talking states
arbitrarily far away current one  stirling         latter expressed use
fixpoints 
work  use first order variant  calculus  allow local properties
expressed ecqs  time allow arbitrary first order quantification across
states  given nature ecqs used formulating local properties  first order quantification
ranges terms denoting individuals  formally  introduce logic la defined follows 
q           x    hi   z   z  
q possibly open ecq z second order predicate variable  of arity     make use
following abbreviations  x     x                       hi 
z    z  z z   formulae z  z  respectively denote least
greatest fixpoint formula  seen predicate transformer z    usual  calculus 
formulae form z   and z   must obey syntactic monotonicity w r t  z 
states every occurrence variable z must within scope even number
negation symbols  ensures least fixpoint z   as well greatest fixpoint z  
always exists 
semantics la formulae defined possibly infinite transition systems form
hu  t    s    abox   seen above  since la contains formulae individual
predicate free variables  given transition system   introduce individual variable valuation
v  i e   mapping individual variables x u  predicate variable valuation v   i e  
mapping predicate variables z subsets   three notions place 
assign meaning formulae associating   v  v extension function   
v v   maps

formulae subsets   formally  extension function   v v defined inductively follows 
 q 
v v
  
v v
      
v v
 x  
v v
 hi 
v v
 z 
v v
 z  
v v

 
 
 
 
 
 
 

 s   ans  qv  t  abox  s     true  
    
v v  

    
v v     v v  
 s   t t adom abox  s     
v x t  v   

 
 
 
 s    s   v v   
v  z  

 e     
v v  z e  e  

qv stands  boolean  ecq obtained q substituting free variables according
v  intuitively    
v v assigns constructs following meaning 
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

boolean connectives expected meaning 
quantification individuals done terms current abox  notice
terms referred later states associated abox include
terms anymore 
extension hi consists states that  state s  transition
s    formula holds s  valuation v  
extension    consists states that  states s  transition s   
formula holds s  valuation v 
extension z  smallest subset e that  assigning z
extension e   resulting extension  under valuation v  contained e   is 
extension z  least fixpoint operator   
v v  z e    v  z e  denotes
predicate valuation obtained v forcing valuation z e 
similarly  extension z  greatest subset e that  assigning
z extension e   resulting extension contains e   is  extension
z 


 
 e

 e
 
formally 
 z  
greatest fixpoint operator   
v v
v v  z e 
  
v v  z e    
closed formula    
v v depend v v   denote extension

simply      closed formula holds state      case  write
       closed formula holds   denoted        s       call model
checking problem verifying whether    holds 
next example shows simple temporal properties expressed la  
example   considering kab example    easily express temporal properties
following ones 
current superheroes live gotham live gotham forever  a form
safety  
x  superhero x  livesin x  gotham   z   livesin x  gotham     z  
eventually current superheroes unmasked  a form liveness  
x  superhero x   z   alterego x  x     z  
exists possible future situation current superheroes unmasked  another form liveness  
x  superhero x   z   alterego x  x   hiz  
along every future  always true  every superhero  exists evolution
eventually leads unmask  a form liveness holds every moment  
y  x  superhero x   z   alterego x  x   hiz     y 
   

fid escription l ogic k nowledge action bases

consider two transition systems sharing universe predicate alphabet 
say behaviorally equivalent satisfy exactly la formulas 
formally capture equivalence  make use notion bisimulation  milner        
suitably extended deal query answering kbs 
given two transition systems  
 
hu  t      s     abox        
 
hu  t      s     abox       sharing universe u  tbox  
alph        alph          bisimulation     relation b    
 s    s    b implies that 
   abox  s    t  abox  s    
   s    s     exists s   s    s    s     s     b 
   s    s     exists s   s    s    s     s     b 
say two states s  s  bisimilar exists bisimulation b  s    s   
b  two transition systems   initial state s     initial state s   bisimilar
 s     s     b  following theorem states formula evaluation la indeed invariant
w r t  bisimulation  equivalently check bisimilar transition systems 
theorem   let     two transition systems share universe  tbox 
predicate alphabet  bisimilar  then  two states s    s   
 including initial ones  bisimilar  closed la formulas  
s     

iff

s       

proof  proof analogous standard proof bisimulation invariance  calculus  stirling         though taking account bisimulation  guarantees ecqs evaluated
identically bisimilar states  notice assumption two transition systems share
universe predicate alphabet makes easy compare answers queries 
making use notion bisimulation  can  example  redefine transition system
generated kab k    t  a        maintaining bisimilarity  modifying definition
k   hu  t    s    abox   given section   follows 
 i  modify do   function term t  introduced generated abox a 
current abox  already term  t  a       t   
 ii  abox a    do t  abox  s     obtained current state logically equivalent
abox abox  s      already generate state s     generate new state 
simply add s   k  

   verification kabs
immediate see verification kabs undecidable general easy represent
turing machines using kab  actually using fragment capabilities
kabs  shown next lemma 
lemma   checking formulas form z  n  a  hiz   n atomic concept
individual occurring a    undecidable already kab k    t  a        where 
   note terms present current abox preserved new abox  together equalities
terms 

   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

 first c  
 value c  x  
 value c  av    
 cell cr   aq    
 cell n c   aq     next c  n c    last n c   
 last c  
 cell c     
 cell cr      
 stop    

 first c  
 cell c     value c  x  
 cell c  aq   value c  av   
 cell c  aq   value c  av   next c  cr   
 cell c  aq   value c  av   last c  
 cell c     last c  
 cell c     first c  
 cell c     next c  cr   
 cell c  aqf   

figure    effects action used encode transition  q  v  q     v     r  turing machine
empty tbox 
actions make use negation equality 
trivial process poses restriction executability actions 
proof  given turing machine   hq    q      qf   i  show construct corresponding
kab km      a        mimics behavior m  specifically  encode halting
problem verification problem km   roughly speaking  km maintains tape
state information  current  abox  encodes transitions actions 
construction makes use tape initially contains unique cell  represented constant
   extended on the fly needed  cells right   represented function terms
form n n          cells left   represented function terms form
p p          then  make use one constant aq state q q  one constant av
tape symbol value v   special constant    following concepts roles 
cell c  h  models cell tape  c cell identifier  h corresponds current
state m  head currently points c    head currently point
c 
next cl   cr   models relative position cells  stating cr cell immediately following cl  
value c  v  models cell c currently contains value v  v  
first c  last c  respectively denote current first cell last cell portion
tape explored far 
stop c  used detect halts 
initial state km contains unique cell defined
a      cell    aq     value       first     last      
action component  contains action parameters transition  
process poses restriction executability actions  i e   contains rule true     
action  
provide specification actions  detailing case right shift transition
 q  v  q     v     r   corresponding action specification consists set effects shown
figure    first effect maintains first position tape unaltered  second third
   

fid escription l ogic k nowledge action bases

effects deal cell values  remain except current cell  updated
according transition  next three effects deal right shift turing machine
state  current cell next cell therefore last one  head moved
next cell state change recorded there  case last cell remains
same  instead current cell last one  moving head tape must properly
extended  function n   used create identifier new successor cell  starting
identifier current one  furthermore  since transition corresponds right shift one
cell  first cell cells immediately following cell marked   marked  
next state  finally  last effect used identify case reached final state 
marked inserting new state special assertion stop    
construction left shift transition done symmetrically  using function p   create
new predecessor cell  construction  km satisfies conditions theorem  observe that 
transition system km generated km   every action corresponding every transition
executed abox state km   since empty  actually generate
successor state s  however  state   unique  action corresponds actually
executed transition generate successor state containing abox assertion form
cell c  aq    state q m  therefore  aboxes states properly corresponding
configurations could eventually lead abox state km stop    holds 
latter happen halts  precisely  one show induction length
respectively halting computation shortest path initial state km
state stop    holds  halts km    z   stop     hiz  
concludes proof 
previous lemma  shows undecidability already special case  immediately
obtain following result 
theorem   verification la formulae kabs undecidable 
observe lemma   uses kb constituted abox containing concept
role assertions  makes use conjunctive queries defining actions effects  moreover  formula check makes use quantification all  simply seen
propositional ctl formula form ef p  expressing proposition p eventually holds along
one path 

   verification weakly acyclic kabs
spite theorem    next introduce notable class kabs verification arbitrary
la properties decidable  so  rely syntactic restriction resembles notion
weak acyclicity data exchange  fagin et al            guarantees boundedness aboxes
generated execution kab and  turn  decidability verification 
ready introduce notion weak acyclicity context  introduce
edge labeled directed dependency graph kab k    t  a         defined follows  nodes 
called positions  obtained tbox t  node every concept name n  
two nodes every role name p   corresponding domain range p   edges
   use original definition weak acyclicity  however  results applied variants weak
acyclicity  see discussion section    

   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

villain

livesin  

livesin  

city

enemy  

character

alterego  

defeats  

 
defeats  

 

 

alterego  

 
superhero

enemy  

figure    weakly acyclic dependency graph example   
drawn considering every effect specification  q     q
a  action contained
  tracing values copied contribute generate new values system progresses 
particular  let p position corresponding concept role component rewriting rew  q    
q   variable x  every position p  a  variable x  include normal
edge p p    every position p   a  function term f   t  x  t  include

special edge p
p     say k weakly acyclic dependency graph cycle going
special edge 
example   kab example   weakly acyclic  dependency graph  shown figure   
contain cycle going special edges  readability  self loops shown
figure  but present nodes   dashed edges used compactly represent
contributions given rewriting queries  e g   dashed edge form villain character
denotes every outgoing edge character  exists outgoing edge villain
type target  hence  w r t  weak acyclicity dashed edges simply replaced
normal edges 
ready state main result work  going prove remainder
section 
theorem   verification la properties weakly acyclic kab decidable e xp ime
size kab 
observe restriction imposed weak acyclicity  or variants  severe 
many real cases kabs indeed weakly acyclic transformed weakly acyclic ones
cost redesign  indeed  weakly acyclic kabs cannot indefinitely generate new values
old ones  depend chain unboundedly many previous values  words 
current values depend bounded number old values  unbounded systems exist
theory  e g   turing machines  higher level processes  business process management
service oriented modeling  typically require boundedness practice  systematically
transform systems weakly acyclic ones remains open issue 
remainder section present proof theorem    several steps 
   normalized kab  first introduce normalized form k kab k  isolates
contribution equalities tbox actions effects kab  important point
normalizing kab preserves weak acyclicity 
   

fid escription l ogic k nowledge action bases

   normalized do    then  introduce normalized version norm    do    avoids
consider equalities generating bulk set tuples used effects generate
next abox  transition system k norm generated normalized version
norm       normalized kab k bisimilar transition system k generated do   k  hence two transition systems satisfy la formulae 

   positive dominant  next step introduce call positive dominant k  
normalized kab k  obtained k essentially dropping equalities  negations 
tbox  however k   contains enough information positive part that 
drop features  active domain transition system k   generated
k   overestimates active domain transition system k norm generated
normalized kab k  moreover  normalized  and hence original  kab weakly
acyclic  positive dominant  finally positive dominant weakly acyclic
size active domain transition system k   polynomially bounded size
initial abox  hence size active domain k norm   implies
size k norm finite exponential size initial abox 
   putting together  tying results together  get claim 
following  detail steps 
    normalized kab
given kab k    t  a         build kab k    t  a         called normalized form
k  applying sequence transformations preserve semantics k producing
kab format easier study 
   view abox partitioned part collecting concept role assertions 
part collecting equality assertions  denote a e q former eq t  a 
latter  closed w r t   the functionality assertions in  tbox   notice
closure computed polynomial time size  
   k individuals appearing equality assertions abox occur special concept assertions form dummy t   concept dummy unrelated
concepts roles kab  by 
adding concept assertions dummy t  equality assertion a 
appear elsewhere 
adding right hand part action effect ei concept assertion dummy t 
equality assertion right hand part ei  
adding action effect specification form
 dummy x  

 dummy x   

notice that  result transformation  get aboxes containing additional
concept dummy  however never queried actions effects rules forming
process  impact transformation simply adom a  aboxes
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

kab transition system readily identified set terms occurring
concept role assertion  without looking equality assertions  
given abox a  denote result two transformations  respectively add closure equalities extension dummy 
   manipulate resulting effect specification
 q     q

a 

follows 
     replace  q     q  rew  q      rew  q    calvanese et al       a   exploiting
results calvanese et al       b  artale et al          guarantee that 
every ecq q every abox equalities closed functionality
congruence 
ans  q  t  a 

  ans  rew  q     a  

     replace effect specification  rew  q      rew  q  
a    resulting
 

step      set effect specifications  qi   rew  q  
a    one cq qi
 
ucq rew  q   
     effect specification  qi    rew  q  
a    re express qi  make
equalities used join terms explicit remove constants qi    specifically 
replace effect specification
 qi     q   rew  q  

a   

where 
qi   cq without repeated variables obtained qi   i  replacing
variable x occurring qi    j th occurrence x except first one  x j   
 ii  replacing constant c new variable xc  
v
v
q      x   x j     xc   c   i  first conjunction contains one equality
 x   x j    variable x qi  variable x j  introduced step
above   ii  second conjunction contains one equality constant c
qi   
clarify latter consider following example 
example   given query
 
 qi       n  x  p   x  y  p   c  x   
step     replaces  qi     q    
 
qi     n  x  p   x      y  p   xc   x      
   

 
q      x   x       x   x       xc   c  

fid escription l ogic k nowledge action bases

correctness
step      immediate notice  qi    equivalent  qi  
v
v
 j 
 x   x    xc   c    equivalence latter  qi    q   consequence
construction artale et al          shows query entailment presence
equalities reduced query evaluation saturating equalities w r t  transitivity 
reflexivity  symmetry  functionality 
given action   denote action normalized above 
since transformations preserve logical equivalence  as long query dummy  

lemma   do t  a    t alph k  do t  a    
normalization kab preserves weak acyclicity  crucial consideration
later results 
lemma   k weakly acyclic  k weakly acyclic 
proof  consider effect specification  q     q
a  belonging action k 
contribution effect specification dependency graph g k limited cq qi
ucq rew  q      set concept role assertions a    observe
qi corresponds query qi   k variable qi occurs exactly once  every free
variable x qi appears a    every occurrence x qi itself  edge included
g  dependency graph g k  one edges appears  corresponding single
occurrence variable x qi    
notice dummy omitted dependency graph g since  definition k 
dummy occur left hand side effects except trivial effect  dummy x  
 dummy x    true k  dummy needed  therefore  g indeed subgraph
g  hence weak acyclicity g implies weak acyclicity g 
    normalized do  
next give simplified version do    call norm     start observing
reformulate definition do   given section    that  first need define
suitable notion join two queries  let q  q  two ecqs  may free variables
common  let a  a  two aboxes  define ans  q      a       ans  q      a   
set substitutions free variables q  q  qi holds   ai   i e  
  ai      qi           then  given action parameters substitution abox
a 
 
 t  a     
apply  t  a  e    
e

effect specification e    q      q   q
apply  t  a  e   

 

 

a   
a 

ans  q      a   ans   q   q    a 

   

eq t  a  

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

instead  define norm   
norm  t  a   

 

 

apply norm  t  a  e    

e

where  effect specification e    q      q   q
apply norm  t  a  e   

a   
 

 

a 

eq t  a  

ans  q      a e q    ans   q   q    a 

notice difference do   norm    latter use a e q
instead compute answers cqs q     
following lemma shows applications do   norm    give rise logically
equivalent aboxes 
lemma    do t  a    t alph k  norm  t  a    
proof  order prove claim  enough show concept role assertion   norm  t  a    whose concept role name belongs alph k  
 t  do t  a            concept role assertion   do t  a    whose concept role name belongs alph k    t  norm  t  a            actually prove
slightly stronger result 
    abox assertion   apply norm  t  a  e      t  apply t  a  e       
   
    abox assertion   apply t  a  e      t  apply norm  t  a  e       
   
     monotonicity q    fact a e q a 
 
 
a 
contained
a   
 ans  q      a e q    ans   q   q    a  

 ans  q      a   ans   q   q    a  

hence claim follows 
     consider abox assertion apply t  a  e     definition apply    know
exists effect e    q      q   q
a  assignment free variables
  
 
q
 which include free variables q q    ans  q        a    
 
ans   q q      a   a    let  x            xn   free variables q     
   x  t            xn tn      variable xi   let n  xi    unique  concept atom
q    xi occurs  similar considerations hold xi occurs role atom   then 
either n  ti   a e q   t i   n  t i   a e q  ti   t i   eq t  a   former
case  let t  i denote ti   latter case let t  i denote t i   then  consider substitution
     x  t              xn t  n      construction    ans  q        a e q    since
ans   q   q      a    t  i   ti   eq t  a              n  
  ans  q        a e q      ans   q   q      a   since
a   
   

fid escription l ogic k nowledge action bases

  identical modulo eq t  a 
eq t  a  apply norm  t  a  e    
infer  t  apply norm  t  a  e          hence claim holds 
combining lemma   lemma     get do   k norm    k behave
equivalently  starting equivalent aboxes 
lemma    a  t alph k  a  do t  a      t alph k  norm  t  a      
proof  claim direct consequence lemma    lemma     equivalence a 
a    observation logical equivalence transitive 
given kab k normalized version k  call transition system generated
way k   using norm    k instead do   k  normalized transition system
generated k  denote k norm  
lemma    given kab k  transition systems k k norm bisimilar 
proof  let k    u  t    s    abox     k norm    u  t  norm   s    abox norm   norm   
define relation b norm follows   s    s    b iff abox  s    t alph k 
abox norm  s    show b bisimulation  so  prove b closed
definition bisimulation itself  indeed   s    s    b  then 
abox  s    t alph k  abox  s    definition 
s  s   exists action substitution s    
 t  abox  s        notice abox  s      s    s   consistent w r t    let
us consider s     norm  t  abox  s        since abox  s    t alph k  abox  s    
lemma     s   t alph k  s     therefore  s   consistent w r t    hence
s  norm s      s     s     b 
similarly  s  norm s   exists action substitution
s     norm  t  abox  s       s   consistent w r t    let us consider s    
 t  abox  s        since s  t alph k  s    lemma     s   t alph k 
s   therefore  s   consistent w r t    hence s  s     and  considering equivalence
enjoys symmetry   s     s     b 
proves claim 
direct consequence lemma that  considering bismulation invariance
theorem    faithfully check la formulas k norm instead k  
    positive dominant
next step show weakly acyclic kab k  normalized transition system k norm
finite  considering another transition system  behaviorally unrelated
k norm   hence k   whose active domain bounds active domain k norm  
obtain transition system essentially ignoring negative information equalities 
allows us refer back literature data exchange show boundedness  call
transition system positive dominant 
given normalized kab k    t  a         define positive dominant k kab
 e q

k       a            true        
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

action   without parameters effect specification constituted copyall
one effect form
 e q
 qi    
a i
effect  qi     qi  q
a i every action   observe parameters

actions become simply free variables    
notice   applicable every step process trivially always allows it 
resulting state always consistent  since k  empty tbox  moreover  equality assertion
ever generated  transition system k  constituted single run  incrementally
accumulates facts derived iterated application   increasing
abox  behavior closely resembles chase tuple generating dependencies  tgds  data
exchange  application   corresponds parallel chase step  deutsch  nash   
remmel        
technical point view  notice k  already normalized form  i e   k    k    
do   norm    identical since neither equality negation considered  hence
k    k   norm  
next lemma shows k  preserves weak acyclicity k 
lemma    k weakly acyclic positive dominant k  weakly acyclic 
proof  claim follows fact that  construction  dependency graph g   k 
equal g  indeed  qi   connection ai preserved k    hence  get
claim 
next show k  weakly acyclic active domain aboxes transition
system k  polynomially bounded active domain initial abox 
lemma    k  weakly acyclic  exists polynomial p  
 e q

 adom k       p  adom a      
proof  observe exists strict connection execution k  chase
set tgds data exchange  therefore  proof closely resembles one fagin et al 
       thm        shown weakly acyclic tgds  every chase sequence bounded 
let k     u      a   e q   abox      let g      v  e  dependency graph k   
let n    adom a   e q     every node p v   consider incoming path  finite
infinite  path ending p  let rank  p  maximum number special edges
incoming path  since k  weakly acyclic hypothesis  g   contain cycles going
special edges  therefore rank  p  finite  let r maximum among rank  pi  
nodes  observe r  v    indeed path lead node twice using special
edges  otherwise g   would contain cycle going special edges  thus breaking weak
acyclicity hypothesis  next observe partition nodes v according rank 
obtaining set sets  v    v            vr    vi set nodes rank i 
let us consider state obtained a   e q applying action   contained
k  arbitrary number times  prove  induction i  following claim 
every exists polynomial pi total number distinct values c occur
positions vi pi  n  
   

fid escription l ogic k nowledge action bases

 base case  consider p v    definition  p incoming path containing special edges 
therefore  new values stored p along run a   e q a  indeed p store
values part initial abox a   e q   holds nodes v  hence fix
p   n    n 
 inductive step  consider p vi               r   first kind values may stored
inside p values stored inside p a   e q   number values
n  addition  value may stored p two reasons  either copied
position p  vj    j  generated possibly new function term  built applying
effects contain function head 
first determine number fresh individuals generated function terms 
possibility generating storing new value p result action reflected
presence special edges  definition  special edge entering p must start node
 
p  v  vi   
p induction hypothesis  number distinct values exist p
bounded h n    j       i   pj  n   let ba maximum number special edges
enter position  positions tbox  ba bounds arity taken function term
contained   every choice ba values v  vi   one special edge
enter position   number new values generated position p bounded tf h n ba  
tf total number facts contained effects     note number
depend data a   e q   considering positions vi   total number values
generated bounded f n     vi   tf h n ba   clearly  f   polynomial 
tf ba determined    
count next number distinct values copied positions vi positions
vj   j    i  copy represented graph normal edge going node vj
node vi   j    i  observe first normal edges start nodes
v  vi    is  cannot start nodes vj j   i  prove contradiction 
assume exists p  p e  p vi p  vj j   i  case 
rank p would j   i  contradicts fact p vi   consequence  number
distinct values copied positions vi bounded total number values
v  vi    corresponds h n  previous consideration 
putting together  define pi  n    n   f n    h n   since pi    polynomial 
claim proven 
notice that  claim  bounded r  constant  hence  exists
fixed polynomial p   number distinct values exist every state
bounded p n   k  inflationary    applied copies concept role
assertions current next state  since k  contains single run  p n  bound
adom k    well 
following lemma shows key feature positive dominant 
lemma    adom k   adom k    
 e q

proof  let k    t  a        k       a            true        
first observe that  every abox k   adom a    adom a e q   definition k
 this role special concept dummy  
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

show induction construction k  u  t      a    abox       k   
 e q

 u        a    abox        state a    exists state a   
a   e q a   
 e q
base case holds initial states a  a  two transition systems definition 
inductive case  show that  given a    a    a   e q a   
a     a    a     unique state a     a    a   a   a    
show this  note a    a   exists action k substitution parameters
a     norm  t  a       similarly  taking account   parameters
always executable k    a     do t  a          norm  t  a        
construction k    effect e  form
e     q      q   q

a e   

effect e    form
e     q     

 e q

a e   

a e   e q obtained a e  removing equality assertions  induction hypothesis 
a   e q a    observing ans   q         a   e q      ans   q   q      a   
 e q
ans   q         a     obtain a e 
a e    a e    apply norm  t  a    e     
a e    apply   a    e       hence  get claim a    e q a    
since abox k active domain adom a  adom a e q   identical construction  since adom k   adom k    simply union active
domains generated aboxes  get claim 
    putting together
kab k weakly acyclic  then  lemma    normalized form k weakly acyclic well
and  lemma     positive dominant k    hence  lemma     size active
domain adom k    transition system k  k  polynomially related size
initial abox 
now  lemma    implies size active domain adom k norm  
transition system k k polynomially related size initial abox  hence  number
possible states k finite  fact exponential size initial abox 
follows checking la formulae k done e xp ime w r t  size k 
finally  lemma     k k bisimilar  bisimulation invariance theorem   
k k satisfy exactly la formulae  hence  check la formula k
sufficient check k   done e xp ime  concludes proof
theorem   

   related work
provide detailed review work related framework results presented
previous sections 
   

fid escription l ogic k nowledge action bases

    combining description logics temporal logics
work deeply related research studies combinations description logics temporal logics  indeed  actions progress knowledge time and  although temporal logics
mention actions  easily used describing progression mechanisms  including transition systems  see  e g   clarke et al         calvanese  de giacomo    vardi        
research mostly explored combination standard description logics standard
temporal logics level models  certainly natural form combination
logical point view  technically  form combination gives rise combined logic
two dimensional semantics  one dimension time dl domain
 schild        wolter   zakharyaschev      b      a  gabbay et al          unfortunately 
computational point view  form combination suffers key undecidability result 
makes fragile many practical purposes  possibility specifying roles
preserve extension time  the called rigid roles  causes undecidability    referring
domain interest example    would result  example  undecidability
theories specify instance character livesin city forever  moreover 
undecidability result already holds concept satisfiability w r t  fixed tbox  i e  
tbox axioms must hold time points   without aboxes  single rigid role  wolter
  zakharyaschev      b      a  gabbay et al          is  holds reasoning service
much simpler conjunctive query answering  calvanese  de giacomo    lenzerini        
even fixed tbox data  no abox assertions  hence individual terms  one
simplest kinds temporal formulae  namely forever something true  safety   clarke et al  
      
decidability regained by   i  dropping tboxes altogether  decision problem
still hard non elementary time  gabbay et al           ii  allowing temporal operators
concepts  schild        artale   franconi              gutierrez basulto  jung    lutz       
jamroga         case complexity depends crucially description logic   iii  allowing temporal operators tbox abox assertions  lutz  wolter    zakharyaschev 
      baader et al          fact cases  ii   iii  mixed  baader   laux        wolter
  zakharyaschev        
allowing temporal operators assertions  case  iii  above   tightly related
functional approach adopted paper  fact admit temporal operators front
assertions allows us consider temporal models whose time points actually sets models
description logic assertions  hence keeps temporal component distinct description
logic one  exactly here  particular  results baader et al         directly
compared ours  apart obvious differences formalism used  one key point get
decidability individual terms mentioned abox assertions fixed priori 
possible that  adapting techniques presented here  results could extended allow
functions denoting terms  hence allowing adding fresh individual terms temporal
evolution 

   lose decidability  suffices able specify verify persistence binary predicates roles  allows
one build infinite grid hence encode turing machine computation  robinson        van emde boas 
      

   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

    combining description logics actions
somehow hampered undecidability results mentioned beginning section 
combinations description logics action theories studied years  particular 
liu  lutz  milicic  wolter      b      a  study combinations description logics action
theories level models  w r t  two classical problems reasoning actions 
namely projection executability  problems require explicitly give sequence
actions check property resulting final state  projection   check executability
sequence actions  comes certain precondition  reiter        
sophisticated temporal properties  in particular  forever something true mentioned above  would
lead undecidability  way  notice undecidability result deeply questions
computational point view possibility adding  sound complete  automated reasoning
capabilities proposals owl s  semantic markup web services   martin  paolucci 
mcilraith  burstein  mcdermott  mcguinness  parsia  payne  sabou  solanki  srinivasan    sycara 
      
possibly first proposal based implicitly functional view kb pioneering
work de giacomo  iocchi  nardi  rosati         adopts epistemic description logic
 based certain answers  combined action formalism describe routines mobile
robot  again  one important point individual terms bounded fixed priori 
functional view approach first spelled calvanese  de giacomo  lenzerini 
rosati         calvanese et al          work  projection executability
studied  however distinction kb states actions  there specified
updates   framework gives rise single transition system whose states labeled
kbs  in fact tbox fixed abox changes state state   however  again 
individual terms considered fixed priori hence resulting transition system finite 
so  although studied work  sophisticated forms temporal properties proposed
readily verifiable setting  interestingly  apart kbs action  work
golog like programs considered  programs whose atomic actions defined
action formalism  combined using  usual less usual  programming constructs 
sequence  while loop  if then else  nondeterministic pick value  levesque  reiter 
lesperance  lin    scherl        de giacomo  lesperance    levesque         important
characteristic programs finite number control states  notice
memory storage programs kept action theory  kb case   although
scope paper  finiteness allows easily extending results program
well 
interesting alternative way combine description logics reasoning actions
one reported gu soutchanski         there  description logics kb  used special
fol theory describing initial situation situation calculus basic action theory  reiter        
notice result  tbox assertions act state constraints  lin   reiter        
would lead undecidability discussed  wolter   zakharyaschev      b      a  gabbay
et al          fact essentially persist way actions 

   actually mainly focus concepts description logic includes universal role  allows
one express tbox assertions concepts  baader et al         

   

fid escription l ogic k nowledge action bases

    description logics update
observe effects action setting seen basic form update previous
state  katsuno   mendelzon         although mechanism sidesteps semantic computational difficulties description logic kb update  liu et al       b  de giacomo  lenzerini  poggi 
  rosati        calvanese  kharlamov  nutt    zheleznyakov        lenzerini   savo       
simply rejecting execution actions would lead inconsistent state  adopting proper
forms update setting interesting issue future research 
    artifacts data aware processes
work closely related research verification artifact centric business processes
 nigam   caswell        bhattacharya et al          artifact centric approaches model business
processes giving equal importance control flow perspective data interest 
artifact typically represented tuple schema  models artifact type  together
set actions services specify information maintained artifact
manipulated time  action usually represented terms pre  post conditions
respectively used determine action eligible execution  relate
current artifact state successor state obtained action execution  pre  postconditions modeled first order formulae  post conditions employ existentially quantified
variables account external inputs environment  differently kabs 
approaches targeting artifact centric processes assume complete information data  using
relational database maintain artifacts information  paper  aim works
verify whether relational artifact centric process meets temporal dynamic property 
formalized using first order variants branching linear temporal logics 
work deutsch et al          infinite domain artifacts database equipped
dense linear order  mentioned pre conditions  post conditions  properties 
runs receive unbounded external input infinite domain  decidability verification
achieved avoiding branching time properties  restricting formulae used specify
pre   post conditions properties  particular  approach refers read only read write
database relations differently  querying latter checking whether contain given tuple constants  authors show restriction tight  integrity constraints cannot
added framework  since even single functional dependency leads undecidability
verification  damaggio et al         extend approach disallowing read write relations 
allows extension decidability result integrity constraints expressed embedded
dependencies terminating chase  decidable arithmetic  major difference
approach  concepts kab considered read write relations 
arbitrarily queried determine progression system  differently works 
belardinelli et al         consider first order variant ctl quantification across states
verification formalism  framework supports incorporation new values external environment parameters actions  corresponding execution semantics considers
possible actual values  thus leading infinite state transition systems  decidability verification  authors show that  assumption state system
 constituted union artifacts relational instances  bounded active domain  possible construct faithful abstract transition system which  differently original one 
finite number states  belardinelli  lomuscio  patrizi        improve results belar   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

dinelli et al         introducing semantic property uniformity which  roughly speaking 
says transition system representing execution process study able
distinguish among states constants patterns data  assumptions uniformity state boundedness  decidability verification achieved richer
logic  namely ctl quantification across states  interpreted active domain semantics 
notion state boundedness adopted independently developed framework
bagheri hariri  calvanese  de giacomo  deutsch  montali               first order
variants  calculus  similar one considered here  considered  there  beside differences
way data external information modeled  sufficient syntactic conditions guarantee state boundedness proposed  works developed within relational database
setting  extend trivially systems actions change dl knowledge bases 
connection data  artifact centric business processes data exchange exploit paper first established cangialosi et al          de giacomo  de masellis 
rosati         transition relation described terms tgds  map
current state  represented relational database instance  next one  null values used
model incorporation new  unknown data system  process evolution essentially
form chase  suitable weak acyclicity conditions chase terminates  guaranteeing 
turn  system finite state  decidability shown first order  calculus without
first order quantification across states  approach extended bagheri hariri et al         
tgds replaced actions rule based process follow structure
kab action component  revised framework  values imported external environment represented uninterpreted function terms  play role nulls
work cangialosi et al          de giacomo et al          since bagheri hariri et al 
        cangialosi et al          de giacomo et al         rely purely relational setting  choice leads ad hoc interpretation equality  null value function term
considered equal itself  differently works  allow sophisticated
schema constraints  i e   tbox itself  provide time fine grained treatment
equality  individuals inferred equal due application schema
constraints and or execution action  treatment equality differentiates work
one bagheri hariri  calvanese  de giacomo  de masellis         introduces preliminary version framework presented  una assumed equality
considered  specifically  bagheri hariri et al         propose semantic artifacts
means represent artifacts corresponding processes higher level abstraction relational artifacts  representing artifact data semantically rich knowledge base operating
incomplete information  kabs constitute general framework  seamlessly
customized account semantic artifacts  major difference work bagheri hariri
et al         constituted verification formalism  particular  works focus
form  calculus ecqs used query states system  bagheri hariri et al 
       support quantification across states  done here 
calvanese et al         investigate framework data centric processes mixes approach proposed bagheri hariri et al         relational artifacts notion knowledge
bases used here  particular  semantically governed data aware processes introduced
mechanism model dynamic system working relational database  providing
time conceptual representation manipulated data terms dl lite knowledge base 
relying ontology based data access  calvanese et al          declarative mappings used
   

fid escription l ogic k nowledge action bases

connect knowledge base underlying relational database  differently kabs 
system evolves relational layer  knowledge base used understand ultimately
govern execution higher level abstraction 
observe results presented fully subsume bagheri hariri et al         
underlying description logic owl   ql  one hand  remove possibility
asserting functionality roles knowledge component  equating individuals result action action component  precisely obtain setting presented bagheri hariri
et al          hand  frameworks established complexity upper bounds
same 

   conclusions
paper studied verification knowledge action bases  dynamic systems
constituted knowledge base  expressed description logics  action specification
changes knowledge base time  obtained interesting decidability result
relying notion weak acyclicity  based connection theory chase tgds
relational databases 
work  used original notion weak acyclicity  however  easy adopt
advanced forms acyclicity  since results depend ability finding finite
bound number distinct function terms generated  when applying chase  
majority approaches adopt forms weak acyclicity focus databases  marnette  
geerts        meier  schmidt  wei    lausen         cuenca grau  horrocks  krotzsch  kupke 
magka  motik  wang        investigate sophisticated forms acyclicity context
knowledge bases without una  results thus seamlessly applied kabs  interestingly 
manage impact equalities setting without una  resort singularization technique presented marnette         closely resembles normalization kabs introduced
section   
weak acyclicity allows us gain decidability bounding number distinct function
terms occur transition system  alternative approach gain decidability bound
number distinct terms occurring abox assertions state  variants notion state
boundedness proposed recently contexts  belardinelli et al         de giacomo 
lesperance    patrizi        bagheri hariri et al          great interest explore
approach setting presented actions acting description logic knowledge base 
observe decidability result  as well ones commented section    
comes algorithm verification exponential size initial abox  precludes direct application techniques large scale systems  without careful analysis
modularized small units verified  almost  separately  important
direction investigation 
acknowledgments
research partially supported eu ict collaborative project acsi
 artifact centric service interoperation   grant agreement n  fp          large scale
integrating project  ip  optique  scalable end user access big data   grant agreement n  fp        
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

references
artale  a   calvanese  d   kontchakov  r     zakharyaschev  m          dl lite family
relations  j  artificial intelligence research          
artale  a     franconi  e          temporal description logic reasoning actions
plans  j  artificial intelligence research            
artale  a     franconi  e          temporal description logics  gabbay  d   fisher  m     vila  l 
 eds    handbook temporal reasoning artificial intelligence  foundations artificial
intelligence  elsevier 
baader  f   calvanese  d   mcguinness  d   nardi  d     patel schneider  p  f   eds           
description logic handbook  theory  implementation applications  cambridge university press 
baader  f   ghilardi  s     lutz  c          ltl description logic axioms  acm trans 
computational logic                   
baader  f     laux  a          terminological logics modal operators  proc    th
int  joint conf  artificial intelligence  ijcai     pp         
bagheri hariri  b   calvanese  d   de giacomo  g     de masellis  r          verification
conjunctive query based semantic artifacts  proc    th int  workshop description logic  dl        vol      ceur electronic workshop proceedings  http 
  ceur ws org  
bagheri hariri  b   calvanese  d   de giacomo  g   de masellis  r     felli  p          foundations
relational artifacts verification  proc   th int  conference business process
management  bpm        vol       lecture notes computer science  pp         
springer 
bagheri hariri  b   calvanese  d   de giacomo  g   deutsch  a     montali  m          verification relational data centric dynamic systems external services  corr technical report arxiv            arxiv org e print archive  available http   arxiv org abs 
          
bagheri hariri  b   calvanese  d   de giacomo  g   deutsch  a     montali  m          verification
relational data centric dynamic systems external services  proc    nd acm
sigact sigmod sigart symp  principles database systems  pods       
bao  j   et al          owl   web ontology language document overview  second edition   w c
recommendation  world wide web consortium  available http   www w  org 
tr owl  overview  
belardinelli  f   lomuscio  a     patrizi  f          verification deployed artifact systems via data
abstraction  proc   th int  joint conf  service oriented computing  icsoc       
vol       lecture notes computer science  pp          springer 
belardinelli  f   lomuscio  a     patrizi  f          abstraction technique verification
artifact centric systems  proc    th int  conf  principles knowledge
representation reasoning  kr        pp         
berardi  d   calvanese  d     de giacomo  g          reasoning uml class diagrams  artificial
intelligence                 
   

fid escription l ogic k nowledge action bases

bhattacharya  k   gerede  c   hull  r   liu  r     su  j          towards formal analysis artifactcentric business process models  proc   th int  conference business process
management  bpm        vol       lecture notes computer science  pp         
springer 
burkart  o   caucal  d   moller  f     steffen  b          verification infinite structures  
handbook process algebra  elsevier science 
calvanese  d   de giacomo  g   lembo  d   lenzerini  m   poggi  a   rodrguez muro  m    
rosati  r          ontologies databases  dl lite approach  tessaris  s     franconi  e   eds    reasoning web  semantic technologies informations systems  th int 
summer school tutorial lectures  rw        vol       lecture notes computer science  pp          springer 
calvanese  d   de giacomo  g   lembo  d   lenzerini  m     rosati  r       a   eql lite  effective first order query processing description logics  proc    th int  joint conf 
artificial intelligence  ijcai        pp         
calvanese  d   de giacomo  g   lembo  d   lenzerini  m     rosati  r       b   tractable reasoning efficient query answering description logics  dl lite family  j  automated
reasoning                
calvanese  d   de giacomo  g   lembo  d   lenzerini  m     rosati  r          data complexity
query answering description logics  artificial intelligence              
calvanese  d   de giacomo  g   lembo  d   montali  m     santoso  a          ontology based
governance data aware processes  proc   th int  conf  web reasoning rule
systems  rr        vol       lecture notes computer science  pp        springer 
calvanese  d   de giacomo  g     lenzerini  m          conjunctive query containment answering description logics constraints  acm trans  computational logic       
          
calvanese  d   de giacomo  g   lenzerini  m     rosati  r          actions programs description logic ontologies  proc    th int  workshop description logic  dl       
vol      ceur electronic workshop proceedings  http   ceur ws org   pp    
   
calvanese  d   de giacomo  g   lenzerini  m     rosati  r          actions programs
description logic knowledge bases  functional approach  lakemeyer  g     mcilraith 
s  a   eds    knowing  reasoning  acting  essays honour hector levesque  college
publications 
calvanese  d   de giacomo  g     montali  m          foundations data aware process analysis 
database theory perspective  proc    nd acm sigact sigmod sigart symp 
principles database systems  pods       
calvanese  d   de giacomo  g     vardi  m  y          reasoning actions planning
ltl action theories  proc   th int  conf  principles knowledge representation reasoning  kr        pp         
calvanese  d   kharlamov  e   nutt  w     zheleznyakov  d          updating aboxes dl lite 
proc   th alberto mendelzon int  workshop foundations data management
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

 amw        vol      ceur electronic workshop proceedings  http   ceur ws 
org   pp          
cangialosi  p   de giacomo  g   de masellis  r     rosati  r          conjunctive artifact centric
services  proc   th int  joint conf  service oriented computing  icsoc       
vol       lecture notes computer science  pp          springer 
clarke  e  m   grumberg  o     peled  d  a          model checking  mit press  cambridge 
ma  usa 
cohn  d     hull  r          business artifacts  data centric approach modeling business
operations processes  bull  ieee computer society technical committee data
engineering            
cuenca grau  b   horrocks  i   krotzsch  m   kupke  c   magka  d   motik  b     wang  z         
acyclicity conditions application query answering description logics 
proc    th int  conf  principles knowledge representation reasoning
 kr        pp         
damaggio  e   deutsch  a     vianu  v          artifact systems data dependencies
arithmetic  proc    th int  conf  database theory  icdt        pp       
de giacomo  g   de masellis  r     rosati  r          verification conjunctive artifact centric
services  int  j  cooperative information systems                
de giacomo  g   iocchi  l   nardi  d     rosati  r          theory implementation
cognitive mobile robots  j  logic computation               
de giacomo  g   lenzerini  m   poggi  a     rosati  r          instance level update erasure description logic ontologies  j  logic computation  special issue ontology
dynamics                
de giacomo  g   lesperance  y     levesque  h  j          congolog  concurrent programming
language based situation calculus  artificial intelligence                  
de giacomo  g   lesperance  y     patrizi  f          bounded situation calculus action theories
decidable verification  proc    th int  conf  principles knowledge
representation reasoning  kr        pp         
deutsch  a   hull  r   patrizi  f     vianu  v          automatic verification data centric business
processes  proc    th int  conf  database theory  icdt        pp         
deutsch  a   nash  a     remmel  j  b          chase revisited  proc    th acm
sigact sigmod sigart symp  principles database systems  pods        pp     
    
fagin  r   kolaitis  p  g   miller  r  j     popa  l          data exchange  semantics query
answering  theoretical computer science                
gabbay  d   kurusz  a   wolter  f     zakharyaschev  m          many dimensional modal logics 
theory applications  elsevier science publishers 
gu  y     soutchanski  m          description logic based situation calculus  ann  mathematics
artificial intelligence               
   

fid escription l ogic k nowledge action bases

gutierrez basulto  v   jung  j  c     lutz  c          complexity branching temporal description
logics  proc    th eur  conf  artificial intelligence  ecai        pp         
jamroga  w          concepts  agents  coalitions alternating time  proc    th eur 
conf  artificial intelligence  ecai        pp         
katsuno  h     mendelzon  a          difference updating knowledge base
revising it  proc   nd int  conf  principles knowledge representation
reasoning  kr     pp         
kowalski  r  a     sadri  f          abductive logic programming agents destructive
databases  ann  mathematics artificial intelligence                 
lenzerini  m     savo  d  f          updating inconsistent description logic knowledge bases 
proc    th eur  conf  artificial intelligence  ecai        pp         
levesque  h  j   reiter  r   lesperance  y   lin  f     scherl  r          golog  logic programming language dynamic domains  j  logic programming           
levesque  h  j          foundations functional approach knowledge representation  artificial
intelligence             
limonad  l   de leenheer  p   linehan  m   hull  r     vaculin  r          ontology dynamic
entities  proc    st int  conf  conceptual modeling  er       
lin  f     reiter  r          state constraints revisited  j  logic programming               
liu  h   lutz  c   milicic  m     wolter  f       a   reasoning actions using description
logics general tboxes  proc    th eur  conference logics artificial
intelligence  jelia        vol       lecture notes computer science  springer 
liu  h   lutz  c   milicic  m     wolter  f       b   updating description logic aboxes  proc 
  th int  conf  principles knowledge representation reasoning  kr       
pp       
lutz  c   wolter  f     zakharyaschev  m          temporal description logics  survey  proc 
  th int  symp  temporal representation reasoning  time        pp      
marnette  b          generalized schema mappings  termination tractability  proc 
  th acm sigact sigmod sigart symp  principles database systems
 pods        pp       
marnette  b     geerts  f          static analysis schema mappings ensuring oblivious termination  proc    th int  conf  database theory  icdt        pp         
martin  d   paolucci  m   mcilraith  s   burstein  m   mcdermott  d   mcguinness  d   parsia  b  
payne  t   sabou  m   solanki  srinivasan  n     sycara  k          bringing semantics
web services  owl s approach  proc   st int  workshop semantic web
services web process composition  swswpc       
meier  m   schmidt  m   wei  f     lausen  g          semantic query optimization presence
types           ed    proc    th acm sigact sigmod sigart symp 
principles database systems  pods       
meyer  a   smirnov  s     weske  m          data business processes  emisa forum        
    
   

fibagheri h ariri   c alvanese   e g iacomo   e asellis   f elli     ontali

milner  r          algebraic definition simulation programs  proc   nd int 
joint conf  artificial intelligence  ijcai     pp         
motik  b   cuenca grau  b   horrocks  i   wu  z   fokoue  a     lutz  c          owl   web ontology language profiles  second edition   w c recommendation  world wide web consortium  available http   www w  org tr owl  profiles  
nigam  a     caswell  n  s          business artifacts  approach operational specification 
ibm systems journal                
park  d  m  r          finiteness mu ineffable  theoretical computer science               
poggi  a   lembo  d   calvanese  d   de giacomo  g   lenzerini  m     rosati  r          linking
data ontologies  j  data semantics  x         
reiter  r          knowledge action  logical foundations specifying implementing
dynamical systems  mit press 
robinson  r          undecidability nonperiodicity tilings plane  inventiones math  
           
rosati  r     franconi  e          generalized ontology based production systems  proc 
  th int  conf  principles knowledge representation reasoning  kr        pp 
        aaai press 
schild  k          combining terminological logics tense logic  proc   th portuguese
conf  artificial intelligence  epia     vol      lecture notes computer science 
pp          springer 
stirling  c          modal temporal properties processes  springer 
van ditmarsch  h   van der hoek  w     kooi  b          dynamic epistemic logic  springer 
van emde boas  p          convenience tilings  sorbi  a   ed    complexity  logic 
recursion theory  vol      lecture notes pure applied mathematics  pp         
marcel dekker inc 
vianu  v          automatic verification database driven systems  new frontier  proc 
  th int  conf  database theory  icdt        pp      
wolter  f     zakharyaschev  m          satisfiability problem description logics modal
operators  proc   th int  conf  principles knowledge representation
reasoning  kr     pp         
wolter  f     zakharyaschev  m       a   modal description logics  modalizing roles  fundamenta
informaticae                
wolter  f     zakharyaschev  m       b   temporalizing description logic  gabbay  d    
de rijke  m   eds    frontiers combining systems  pp          studies press wiley 

   


