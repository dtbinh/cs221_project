journal of artificial intelligence research                  

submitted        published      

a hybrid lprpg heuristic for modelling numeric
resource flows in planning
amanda coles
andrew coles
maria fox
derek long

amanda coles kcl ac uk
andrew coles kcl ac uk
maria fox kcl ac uk
derek long kcl ac uk

department of informatics
kings college london
strand building
london  wc r  ls  uk

abstract
although the use of metric fluents is fundamental to many practical planning problems 
the study of heuristics to support fully automated planners working with these fluents
remains relatively unexplored  the most widely used heuristic is the relaxation of metric
fluents into interval valued variables  an idea first proposed a decade ago  other heuristics
depend on domain encodings that supply additional information about fluents  such as
capacity constraints or other resource related annotations 
a particular challenge to these approaches is in handling interactions between metric
fluents that represent exchange  such as the transformation of quantities of raw materials
into quantities of processed goods  or trading of money for materials  the usual relaxation
of metric fluents is often very poor in these situations  since it does not recognise that
resources  once spent  are no longer available to be spent again 
we present a heuristic for numeric planning problems building on the propositional
relaxed planning graph  but using a mathematical program for numeric reasoning  we
define a class of producerconsumer planning problems and demonstrate how the numeric
constraints in these can be modelled in a mixed integer program  mip   this mip is then
combined with a metric relaxed planning graph  rpg  heuristic to produce an integrated
hybrid heuristic  the mip tracks resource use more accurately than the usual relaxation 
but relaxes the ordering of actions  while the rpg captures the causal propositional aspects
of the problem  we discuss how these two components interact to produce a single unified
heuristic and go on to explore how further numeric features of planning problems can be
integrated into the mip  we show that encoding a limited subset of the propositional problem to augment the mip can yield more accurate guidance  partly by exploiting structure
such as propositional landmarks and propositional resources  our results show that the
use of this heuristic enhances scalability on problems where numeric resource interaction
is key in finding a solution 

   introduction
domain independent planning research in the last decade has focussed  for the most part 
on propositional planning  leading to important discoveries and powerful new heuristics for
planning in propositional domains  relatively little effort has been invested in planning with
metric fluents  despite their importance in representing many practical planning problems 
c
    
ai access foundation  all rights reserved 

ficoles  coles  fox   long

numbers are essential for efficiently encoding resources  such as money  fuel and materials 
the state of the art remains the influential approach proposed by hoffmann         which
extends the ignore delete effects relaxation from propositional fluents to metric fluents by
tracking the accumulating upper bound on increasing fluents and ignoring decreasing  negative  effects  a symmetrical treatment of the fluents for the purposes of determining a
lower bound leads to a representation which is equivalent to an interval for each metric
fluent  with goals and preconditions being satisfied provided that some value in the interval
is sufficient to satisfy each condition  although lpg  gerevini  saetti    serina        and
mips  edelkamp        are both capable of handling metric fluents  both depend on the
same relaxation heuristic to offer search guidance  other approaches have been explored
 do   kambhampati        koehler         but have been comparatively less successful 
planners using the metricff heuristic are generally not very effective at solving problems in which there are complex interactions between the values of numeric resources  such
as the exchange of quantities of one or more materials for the production of others  in
contrast  solving problems with numbers is at the heart of operational research and mathematical programming techniques  many powerful solvers have been developed for solving
linear programming problems  lps  and mixed integer programming problems  mips  
in which problems are expressed as linear constraints over variables  which  in the case of
mips  can be integers   although there have been efforts to exploit linear programming
in propositional planning  either to schedule actions  long   fox      a  or directly  as a
heuristic  van den briel  benton  kambhampati    vossen         relatively little work has
considered the exploitation of linear programming techniques to improve the behaviour of
numeric domain independent planners  kautz   walser        shin   davis        wolfman   weld        benton  van den briel    kambhampati         this work is further
considered in section      
in this paper  we revisit the issue of planning with numeric resources  beginning with the
metric relaxed planning graph  rpg  heuristic  hoffmann         we focus specifically
on domains that exclusively exhibit what we call producer consumer behaviour  defined in
section       in which actions increase or decrease numeric resources by fixed quantities 
of course  this represents only a subset of possible numeric behaviours  but it is a common
and intuitive one  furthermore  it is easy to recognise syntactically in a domain encoding 
so it is simple to resort to alternative strategies for domains that do not conform to this
constraint  which might include the use of producer consumer relaxations or approximations
of domains with more complex numeric behaviour 
we explore the behaviour of the rpg heuristic  demonstrating how the very typical
patterns of interactions in producer consumer numeric planning domains can lead to highly
uninformative heuristic guidance  particularly when domains offer opportunities for exchanges between metric variables  to address this  we introduce a novel heuristic based
on a mixed integer program  mip   used alongside the rpg  to better capture numeric
constraints  having described how the mip is constructed  and how it can be used to complement the rpg  we discuss extensions of it to improve identified weakness  and also to
encode more information about the propositional behaviour of the problem  we evaluate
the lp rpg heuristic by exploring the spectrum between  at one end  a strict separation of
numbers and propositions into the mip and rpg components  and  on the other  discarding
   

fia hybrid lp rpg heuristic for planning

the rpg entirely and encoding the preconditions and effects of actions entirely as a mip 
in doing so  we will determine where the best trade off between the two lies 
the work we report in this paper is an extension of our earlier work reporting development of lp rpg  coles  fox  long    smith         it extends that work both with
additional detail and with several variants of the core heuristic  exploring the impact of
tighter integration between the propositional and metric fluents in the heuristic 
    related work
the integration of linear programming  lp  or mip techniques into planning has been
considered in a number of contexts  the most relevant to the present work is the use of an
lp as the basis of a heuristic for propositional over subscription planning problems  benton 
do    kambhampati         in this setting  the goal of planning is to find a plan with
maximum utility  defined in terms of the reward for the goals achieved  minus the costs
occurred in achieving them  benton et al  use the lp as an optimisation tool to help to
decide which set of goals the planner should satisfy in order to achieve maximum reward 
both the work of benton et al  and the work described in this paper exploit a relaxation of
the action ordering rather than of their effects  and both employ an lp as well as an rpg
structure  the two key differences are that the focus in this work is on using the mip to
capture interactions within numeric planning problems  and we will rely on a conventional
relaxed planning graph  hoffmann   nebel        for propositional reasoning  rather than
also encoding this structure in the mip  the work of van den briel et al   van den briel et al  
      van den briel  vossen    kambhampati        also explores the use of mathematical
programming to encode and solve planning problems 
the structure in the lp and mip models proposed by benton et al         and van den
briel et al         makes them time consuming to solve  requiring actions to be selected
to satisfy preconditions and effects of other actions  and delete effects to be paired with
add effects  in contrast  the mip and lp models we propose do not attempt to capture
most of the causal plan structure  making the construction of solutions to our programs at
each state much more feasible  a further difference is in the interaction between the two
components  the integration between the mip and the rpg in lp rpg is much tighter 
with the mip being used in graph building to indicate variable bounds  and in relaxed plan
extraction to indicate the actions to use  by comparison  in the earlier approach  the mip
is used solely to introduce a bias into rpg action selection  giving preference to actions
used in the solution of the mip 
linear programming has been exploited in planning in other work  lpsat  wolfman
  weld        uses a planning as satisfiability approach  linked to the use on an lp solver
to ensure that literals representing  linear  constraints on metric fluents are maintained
during the plan construction  there is no heuristic guidance in the search  which is based
on a standard dpll search for a satisfying assignment combined with confirmation that
the corresponding lp is satisfiable  ip sat  kautz   walser        uses a mip encoding of
planning problems as the basis for solving them  as do vossen et al          in a similar way
to the later work of van den briel et al   van den briel et al          in these planners the mip
is used directly at the heart of the solver  with planning problems being translated into mips
rather than being used to guide the search  tm lpsat  shin   davis        uses the lpsat
   

ficoles  coles  fox   long

system to solve planning problems with continuous processes  kongming  li   williams 
      is another example of a planner that exploits compilation of planning problems into
mathematical programs  solved using cplex  to tackle hybrid mixed continuous planning
problems  our own colin system  coles  coles  fox    long        also uses lp encodings
to manage reasoning about the effects of continuous processes 
a completely different use of linear and mixed integer programming in planning lies in
work by ono and williams        and also blackmore  ono and williams        which uses
mixed integer programming as the foundation for solving the problem of risk allocation in
plan level control systems 
alternative approaches to handling numeric variables in planning include those implemented in metricff  discussed in detail in section    sapa  do   kambhampati       
and resource ipp  koehler         in sapa heuristic cost estimates generated using relaxed plan extraction are supplemented with additional costs representing the minimal set
of additional resource producing actions required to achieve the resource requirements of
the relaxed plans  this approach is straightforward to implement and is an interesting
modification of the pure relaxed plan heuristic  but it separates the problem of producing
resources from the solution of the rest of the problem  with the consequence that a relaxed
plan using a few steps with high resource demands will be constructed in preference to a
longer plan with lower demands  the heuristic value of the state will then be distorted by
the penalty attached to the relaxed plan to achieve its high resource requirement  potentially hugely overestimating the true distance of the state to the goal  resource ipp depends
on the identification of consumers and producers  as we do in this paper  and it then builds
a resource time map that tracks the production and consumption of the resources during
a graphplan based search for a plan  the approach leads to an extension of the mutex
relation that is used to constrain the search in graphplan  blum   furst         however 
the iterative deepening search used in graphplan based planners is not scalable to solve
large problems and forward state space search has proved a dominant strategy in the past
decade 

   problem definition
in this section we define the class of planning problems that we will consider in this paper 
they are a subset of the general class of pddl     non temporal  numeric planning problems 
which represent linear producerconsumer problems  we include as an example the settlers
domain  which will then be used throughout the paper to illustrate the ideas presented 
    pddl     numeric planning problems
in this work  we are concerned with finding sequential plans to solve non temporal  numeric
planning problems  as defined using  a subset of  pddl      fox   long         within
pddl  this class of problems can be defined as follows  
   pddl    also supports the specification of an objective function to measure plan quality  defined over the
numeric variables in the planning problem  but in this work we focus only on minimising plan length 

   

fia hybrid lp rpg heuristic for planning

 i is the initial state  where a state consists of a set of propositions  and or an assignment of values to a set of numeric variables  for notational convenience  we refer to
the vector of numeric values in a given state as v and the propositional facts as f  
 a  a set of actions  each a  a is a tuple hpre  eff i 
 pre the preconditions of a  these conditions must hold in the state in which a is
to be executed 
 eff the effects of a  when a is applied  the state is updated according to these
effects  eff consists of 
 eff    propositions to be deleted from the state 
 eff     propositions to added to the state 
 eff n   effects acting upon numeric variables 
 g  a goal  a set of propositions f   and a set of conditions over numeric variables 
n     each of these sets may be empty  a state hf  vi is a goal state if f    f and v
satisfies each condition in n    
in the general case  pddl numeric conditions  as used in pre and n     are expressed in
the form 
hf  v   op  ci
s t 
op                 c   
numeric effects  as in eff n  are expressed as 
hv  op  f  v i

s t 

op                  

in common with hoffmanns work on metricff        we restrict our attention to
preconditions that can be expressed in linear normal form  lnf   that is  the expression
f  v  within preconditions must be in the form of a weighted sum of the state variables
plus a constant  w v   k  likewise  we consider only numeric effects where f  v  is in lnf 
and op              these restrictions guarantee termination in the construction of
the rpg when evaluating a state  introducing non lnf preconditions  or scaling effects 
can lead to asymptotic numeric behaviour where certain conditions are only satisfied at an
infinite limit  for the lp rpg heuristic we describe in this work  we further require that the
numeric behaviour of actions can be represented as producerconsumer behaviour  that is 
all effects cause constant increments or decrements to the variables they affect and  apart
from in specific circumstances  we do not permit assignment effects  we will precisely define
these notions and the circumstances in which we allow assignment effects later in the paper 
a solution to a planning problem is a  sequential  plan  a sequence of actions that transforms the initial state into a goal state  respecting all preconditions on action application 
in a state hf  vi  the application of an action with effects eff   eff    eff n yields a successor
state hf     v  i  where 
f      f   eff     eff  
v   x  op  w v   c  if hv  op  w v   ci  eff n
v   x    v x 
otherwise
   

ficoles  coles  fox   long

    an example problem  settlers
the settlers domain  introduced in the      international planning competition  ipc   long
  fox      b  and used again in       hoffmann   edelkamp         is a good example
of a problem exhibiting interesting use of metric fluents  the aim in settlers problems is
to build up transport and building infrastructure through the extraction  refinement and
transportation of materials  the numeric structure of the domain is perhaps the most sophisticated of the ipc domains to date  first  there are six numeric resources and several
actions that act upon each  the available resources  and the effects of actions upon them
 consumption of a resource is shown as a negative value and production is shown as a
positive value  are shown in table      another interesting feature of this domain is that
not all resources can be directly produced  whilst the raw materials timber  stone and
ore can be directly extracted  wood  coal and iron must be refined from their respective
raw form  finally  the domain contains transferable resources  in addition to the actions
shown in the table  by which resources can be refined or consumed to fuel transportation 
resources can be loaded and unloaded from vehicles  the effect of such load and unload
actions is to increase or decrease the amount of a resource on a vehicle  and decrease or
increase the amount stored at a given location  apart from consuming or producing  i e 
releasing  the remaining cargo space of the vehicle  no resource is produced or consumed
during loading and unloading  it is only moved  however  expressing the model in pddl
requires the pair of effects described  decreasing one variable and increasing another  which
is indistinguishable from a combination of production and consumption 
    producerconsumer problems
we now define the constrained producerconsumer numeric behaviour considered in this
paper  we first define producer or consumer actions  with two categories of producer  using
these we then define the notion of a producerconsumer variable  the identification of
consumers and producers is not a new idea  it is common to identify resource producers
and consumers in scheduling  for example  laborie does so in his work on scheduling with
resource constraints  see laborie        
      producerconsumer actions
a simple production action is defined as follows 
definition      simple producer
a ground action a is a simple producer of a given numeric variable v iff 
 it has an effect  increase  v  c   where c is a positive constant  and
 it has no precondition that refers to v 
this definition has two important consequences 
   the table represents a debugged version of the original domain available at http   sourceforge net 
projects tsgp files 

   

fia hybrid lp rpg heuristic for planning

action
move cart
move train
move ship
fell timber
quarry stone
mine ore
saw wood
make coal
smelt iron
build cabin
build quarry
build mine
build saw mill
build iron works
build coal stack
build dock
build wharf
build house
build cart
build train
build ship
build rail

timber

stone

ore

wood

coal

iron

  
  
  
  
  
  
  

  
  
  

  

  

  
  
  

  

  
  
  

  

  
  
  

  
  

  
  
  

table    production and consumption in the settlers domain
   a simple producer produces uniformly  if a state s satisfies its preconditions  then
the effect by a upon v is always to increase its value by the same constant amount  c 
irrespective of the precise details of s 
   the potential maximum value of v that can be attained through the use of a is not
restricted by the value of v itself  there are no minimum or maximum bounds on v
that must hold to allow production 
we define a bounded producer as follows 
definition      bounded producer
a ground action a is a bounded producer of a numeric variable v iff 
 it has an effect  increase  v  c   where c is a positive constant  
 it has a precondition      v     ub c   and
 it has no other preconditions depending on v 
a bounded producer  a  can only be applied if v   ub  c   therefore  the maximum
amount of v that can be attained using a  denoted max prod  a  v   is ub  achieved by
applying a in a state where v    ub  c    in practice  such a state might not be reachable
and the actual upper bound on the value of v reachable using a might be lower than ub  
for an simple producer  a    we assume max prod  a    v     
   

ficoles  coles  fox   long

we define a bounded consumer as follows 
definition      bounded consumer
a ground action a is a consumer with respect to a given numeric variable v iff 
 it has a precondition      v     lb c    
 it has an effect  decrease  v  c   where c is a constant and
 it has no other preconditions depending on v 
this definition is analogous to the bounded producer  since it requires that v exceed a
minimum value before allowing consumption  as a consequence  lb is the minimum amount
of v that can be attained using a  denoted min cons a  v   by applying a in a state where
v   lb   c  
there are  of course  many other resource use behaviours that might be encoded in
planning domains  the producer consumer behaviour we identify is a natural and intuitive
one  a producer produces a fixed quantity of a resource and a consumer consumes a fixed
quantity and depends on the availability of that quantity   there are variants that can
be compiled into this form  e g  consumers that must leave a fixed sized store of resource
untouched simply translate the origin of the resource measurement  and we also consider 
below  other possible extensions of this basic behaviour  nonetheless  we must emphasise
that the heuristic we develop in this paper is targeted at this producer consumer behaviour
and its usefulness depends on how common such domains are in practice  the frequent
occurrence of this model in scheduling with resources suggests that it is a natural and
useful behaviour 
      producerconsumer variables
with these definitions of  bounded  producer and consumer actions  we define properties
of the variables that they manipulate 
definition      producerconsumer variable
a variable v denotes a resource that is produced consumed iff 
 the set prod  v  of actions that increase the value of v contains only bounded producers 
 the set cons v  of actions that decrease the value of v contains only consumers 
 the upper bound on v is the same in all bounded producers for v and
 the lower bound on v is the same in all consumers for v 

   

fia hybrid lp rpg heuristic for planning

      handling integer resources
consumer actions  definition      each require that the amount of a resource available
for consumption must be at least as much as the consumer actually consumes  in some
domain encodings  behaviour that is essentially consistent with producerconsumer patterns
is represented using a precondition on a consumer action that consumes c units of v in the
form v   k rather than v  c  and k   c   in the general case  where v     all we know is
that if v  k     where epsilon is infinitesimal and positive   c units of v can be consumed 
suggesting a lower bound on v of  k  c      however  in the case that all consumers
consume integral quantities  we can rewrite the strict inequality since  must be   in this
case  consider  for example  this fragment of a load action from settlers 
 precondition     available timber l     
 effect
 decrease  available timber l     
because the effects that change the quantities of available resources are integral  this
can be rewritten 
 precondition      available timber l     
 effect
 decrease  available timber l     
a similar transformation can be used when all the constant effects on a variable are
rational  simply by finding the least common multiple  lcm   of the denominators of the
fractions involved and using      lcm  

   metricff revisited
in this section we briefly review the way in which metricff  hoffmann        handles metric
fluents and highlight some of the weaknesses in this approach when faced with particular
kinds of numeric behaviours in planning domains 
    the metric relaxed planning graph heuristic
the metric rpg heuristic is based on performing a relaxed reachability analysis forwards
from the state to be evaluated  where the reachability analysis is captured in a planning
graph  blum   furst        structure  two elements of the domain are relaxed  delete
conditions of actions are ignored and optimistic upper and lower bounds are used to record
the interval of possible values that a metric fluent may reach  positive effects on a metric
variable increase the upper bound on its reachable values and negative effects decrease its
lower bound  satisfaction of preconditions is tested by checking some value in the interval of
each variable satisfies each metric condition in the precondition  it is interesting to note that
preconditions are tested individually  so it is possible  in principle  that no single value could
satisfy all the conditions simultaneously  even though each condition is separately satisfied
by some value  conjunctions of convex preconditions  which includes linear conditions  will
be satisfiable by some value in the case that each condition is satisfiable in the interval
associated with a variable  except in the case that the conjunction is inconsistent  which is
likely to arise only in erroneous domain encodings 
   

ficoles  coles  fox   long

metricff allows preconditions to combine multiple variables  and effects to depend
on the values of other variables  in lp rpg we allow linear combinations of variables in
preconditions  but effects must conform to the producerconsumer definitions above and
allow only constant increases or decreases 
heuristic evaluation of a state using the metric rpg heuristic is undertaken in two
phases  the graph expansion phase and the solution extraction phase  we now remind the
reader of these two processes for convenience of reference in the discussion that follows 
      metric rpg expansion
graph expansion can be concisely defined as follows 
definition      rpg expansion
let f  i  denote a fact layer  comprising 
 f p  i   a set of propositions 
 f v  i   an array of upper  and lower  bound pairs for each task numeric variable v
a i  denotes an action layer  consisting of a list of ground actions  an rpg begins with a
fact layer  f      defined based on the state s to be evaluated 
 f p     contains the propositions that hold in s 
 each entry hlbv   ubv i  f v     is set to hs v   s v i  i e  the value of v in s 
the rpg is expanded by adding successive action layers  followed by new fact layers 
 action layer a i      contains all actions a  a  such that 
 the propositional preconditions of a are in f p  i  
 the numeric preconditions of a are satisfied for some values of the variables in
f v  i  
 fact layer f p  i      is then determined from a i      
 the propositions f p  i      are each of f p  i   plus any new facts added by an
action in a i      
 the values of the numeric values f v  i      are first set to f v  i   then updated
by extending the interval for each variable to include the values achieved by the
maximum and minimum possible assignment effects  for each action a  a i     
in turn 
 until the termination condition is met  the rpg is expanded with further actionlayerfact layer pairs 
the reachability analysis therefore consists of alternate steps  determining which actions
are applicable  and hence instantiating the next action layer  and then using these to extend
the next fact layer  this process is presented graphically in figure    for a small problem
with facts f     fn and numeric variables v    v    considering first the propositions 
   

fia hybrid lp rpg heuristic for planning

fi

a i  

f i  

f 

a i  

f i  

f 

f 

f 

a

f 

a

f 

f 

b

f 

b

f 

f 

f 

f 

v      

v      
 

v      

  

f 

  

  

 

c

  

 

c

v      
 

v      

v      

figure    portion of a relaxed planning graph  where c produces   units of v   but consumes
  units of v 
 arrows from fact to action layers denote the precondition dependencies of actions 
for instance  action a can appear in layer a i      because f  is present in f  i  
 arrows from action to fact layers denote effects  for instance  f  is in f  i     
because it was added by a 
for the numeric variables v    v    the bounds are shown in square brackets  action c
can be seen to have one precondition  v      and two effects  increase v  by    decrease v 
by     c exhibits producerconsumer behaviour  it consumes   units of v    and produces
  units of v    its preconditions are satisfied in f  i  and therefore its effects are applied in
layer a i       where the upper bound on v  has increased and the lower bound on v  has
decreased  moreover  the bounds change again in layer f  i       through a further possible
application of c 
because variable bounds can continue to diverge in this way  rpg expansion needs a
well defined termination condition  in the positive case  we can terminate with success at
the first layer f  i  where all goal propositions are in f p  i  and all goal numeric expressions
are satisfied by f v  i   in the relaxed sense   in the negative case  we terminate with failure
at f  i  if all three of the following hold 
   no actions appear in a i      that were not present in a i   and hence no new propositions would be present in f p  i       
   for all hitherto unsatisfied preconditions v  c  of any action  u b v  would not change
between f v  i  and f v  i       and
   for all hitherto unsatisfied preconditions v  c  of any action  lb v  would not change
between f v  i  and f v  i      
   

ficoles  coles  fox   long

algorithm    adding an action to a relaxed plan
data  r  a metric rpg  a  an action to include in the relaxed plan  q  the subgoal
queue
  foreach propositional precondition pre of a do
 
l  layer at which pre first appears 
 
if l     then insert pre into q l  prop 
 
 
 

foreach numeric precondition pre of a do
l  layer at which pre first appears 
if l     then insert pre into q l  num 

the intuition behind these conditions is that the monotonic expansion of the rpg
implies that  if no new facts are appearing and no more numeric preconditions could become satisfied at a future layer  graph expansion has stagnated and the relaxed problem is
unsolvable 
      metric rpg solution extraction
having expanded the planning graph and found that a relaxed solution exists  all the
goals have appeared   the next step is to extract a relaxed solution plan  this is done
by regressing through the planning graph  using a priority queue of intermediate sub goals
 latest layer first   for each subgoal  an achieving action is added to the relaxed plan and
its preconditions are added to the queue as goals to be achieved at an earlier layer 
the relaxed plan extraction algorithm is shown in algorithm    in lines      the priority
queue is initialised with the top level goals of the problem  both propositional and numeric
goals are added to the priority queue to be achieved in the earliest fact layer in which they
appeared  once the priority queue is seeded  solution extraction proceeds by regressing
layer by layer  for propositions  it suffices to find an action that adds the fact and then
to increment the heuristic value by one and add the preconditions of the achieving action
to the queue  using algorithm    for numeric preconditions  the process is slightly more
involved 
 if the subgoal is to achieve v  k or v  k at layer f  l   and there is an action in a l 
that assigns the value of k to v  then that action is chosen to satisfy the subgoal 
 otherwise  if v  k  or v  k  must be achieved at layer f  l   then actions increasing
 decreasing  v are chosen from those in a l  until the residual value of k  i e  the
original value of k adjusted to take into account the effects of the selected actions  is
small enough  large enough  to be reachable in layer f  l      the residual condition
v  k  v  k  is added to the queue as a subgoal to be achieved in f  l      with the
modified value of k 
note that at lines                and     the actions chosen from action layer   are
recorded by adding them to the set ha  these are used as the basis of the helpful action set 
any action with an effect in common with the action set ha is considered helpful  helpful
actions are an important element in the performance of metricff  the actions that achieve
effects that are exploited in the relaxed solution from a state are promoted in the search
from that state 
   

fia hybrid lp rpg heuristic for planning

algorithm    relaxed plan extraction

 

data  r   a metric rpg  f     n     problem goals
result  ha   helpful actions  h   a heuristic value
ha    h    
q  deepest first priority queue of goal layers 
foreach p  f   do
l  layer at which p first appears 
insert p into q l  prop 

 
 
 

foreach f  n   do
l  layer at which f first holds 
insert f into q l  num 

 

while q not empty do
 l  hprop  numi   pop q  
foreach p  prop do
h  h      a  an achiever for p 
if a in action layer   then add a to ha 
prop  prop   add effects of a 
call algorithm   with r  a  q 

 
 
 
 

  
  
  
  
  
  
  
  
  
  
  
  

foreach  v  c   num do
if an action a  a l  assigned v   k  k  c then
h  h     
if l     then add a to ha 
call algorithm   with r  a  q 
remove all  v  c     c   k and  v  c     c   k from num 

  
  
  
  
  

foreach  v  c   num do
if an action a  a l  assigned v   k  k  c then
h  h     
if l     then add a to ha 
call algorithm   with r  a  q 
remove all conditions  v  c   c  k from num 

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

foreach  v  c   num do
while f v  l     v  upper   c do
h  h      a  next increaser of v 
decrease c by  v  a  
if l is   then add a to ha 
call algorithm   with r  a  q 
if l     then insert  v  c  into q l     num 
foreach  v  c   num do
while f v  l     v  lower   c do
h  h      a  next decreaser of v 
increase c by  v  a  
if l is   then add a to ha 
call algorithm   with r  a  q 
if l     then insert  v  c  into q l     num 

   

ficoles  coles  fox   long

      use of the relaxed plan during search
the relaxed plan  computed during heuristic calculation  is used in two ways during search 
metricff makes use of a two stage search approach  and in both the number of actions
in the relaxed plan is used as a heuristic goal distance estimate  the first search phase 
enforced hill climbing  ehc   is a greedy hill climbing search approach  it can be thought
of as performing breadth first search forward from the initial state i  with state progression
through action application  until a state with new global best heuristic value is found 
when such a state  s  is found  all other states are discarded and ehc search continues
in the same manner from s  this search strategy is incomplete due to its greedy nature 
discarding all states other than s could lead to the loss of a solution  as such  it is followed
by a complete wa  search  in order to guarantee completeness of the planner  subject to
sufficient time and memory  
since the ehc phase is already incomplete  but designed to find solutions quickly 
metricff makes use of another completeness sacrificing technique in order to attempt to
guide the planner to solutions more quickly  this technique is referred to as helpful action
pruning  here  only actions that are in the helpful action set for each state are considered
for successor generation  the actions that are not helpful are discarded  note this pruning
is not used in best first search as it would compromise completeness  in practice helpful
action pruning improves the performance of metricff on many domains  however  it can
lead to difficulties if the actions needed to find a solution from a given state do not appear
in the helpful action set  to attempt to compensate for this  if ehc terminates after
considering only helpful actions  it returns to the state with the last global best heuristic
value  and searches again considering all applicable actions  until either it terminates once
again  leading to wa   or a state with a new global best heuristic value is found  at which
point helpful action pruning is re enabled  and ehc continues 
    problems with the metric rpg heuristic
although the metric rpg is a powerful tool to support planning with metric fluents  there
are some common situations in planning problems in which the heuristic gives very flawed
guidance  these problems include resource persistence and cyclical resource transfer  we
discuss how each of these phenomena can result in misleading heuristic guidance through
the relaxed plan length poorly approximating the actual solution length and through helpful
action distortion 
      resource persistence
resource persistence is a consequence of using a relaxation that ignores negative effects 
when a resource is consumed it does not disappear in the relaxation of negative effects 
the opportunity to reuse the resource can suggest that there is a significantly shorter plan
available than is the case in reality  although this problem occurs for both propositional
and metric fluents  the fact that metric fluents commonly encode resources that must be
carefully managed means that the problem is often more acute in domains with metric
fluents  for example  in a state in the settlers domain in which   units of each resource
have been produced and no ship is required  either as a goal or as a means of travel to an
   

fia hybrid lp rpg heuristic for planning

otherwise inaccessible location   no relaxed plan will require the production of any further
resources  see table    
one approach for approximating the number of missing resource production actions
was introduced in the planner sapa  do   kambhampati         if v   s in the state
being evaluated  and the relaxed plan consumes c units of v  but only produces p  then
if  c  p    s  there is a shortfall on production of v  which would necessitate additional
actions being added to the relaxed plan  in this case  if the maximum amount of v that can
be produced by a single action is v  the heuristic value is increased by 


cps
 
v
this increase is a lower bound on the number of additional actions needed and  while it does
not indicate what the actions might be  serves to increase the heuristic value of states whose
relaxed plans have resource production shortfalls  it does  however  have two main limitations  first  relaxed plan extraction  such as the approach shown in algorithm    chooses
actions without consideration for their undesirable resource consumption side effects  a
good search choice might lead to a state with a worse heuristic value purely because of an
accident of the choice of achieving actions  consuming resource unnecessarily   second  by
increasing the heuristic value without adding specific additional actions to the relaxed plan 
the helpful actions do not record the fact that appropriate resource production is helpful 
      cyclical resource transfer
the phenomenon of cyclical resource transfer  crt  is a consequence of the encoding
of actions that move resources around  combined with the relaxation of negative effects 
to encode movement of a resource  it is removed from one location and added to another 
the removal is encoded as a decrease and this is relaxed when building the metric rpg 
as a result  moving resources appears to generate new resource at the destination  making
movement a spuriously attractive alternative to production  consider a state in which  
unit of timber and a cart are at a location  p   and the goal is to have   units of timber
at p   clearly  the solution plan must involve the production of more timber  however  a
valid relaxed plan solution  found using the metric rpg heuristic  is 
  
  

 load v  p  timber 
 unload v  p  timber 

      helpful action distortion
the problems of resource persistence and crt have an important consequence for ehc
search  not only do they result in relaxed plans with misleadingly short lengths  but the
relaxed plans typically contain too few production actions and useless transfer actions  in
this situation  production actions often do not appear in the helpful action set  and are
therefore not included in ehc search  even in states where they could conveniently be
applied  we refer to this problem as helpful action distortion  to illustrate how this arises 
again with reference to the settlers domain  consider a state in which there is a unit of
timber at location a  and the goal is to have a unit of timber at location b  a relaxed
plan can use the timber to construct a cart and then load the same timber onto the cart to
transport it  the planner will therefore not consider producing more timber 
   

ficoles  coles  fox   long

   compiling producerconsumer behaviour into a mathematical
program
in this section we describe how a mathematical program can be built to characterise the
interaction between numeric variables and action choices in the producerconsumer framework 
    constraints for producerconsumer variables and actions
the definition of producerconsumer variables  definition      implies that actions have the
useful property that all preconditions on the variables can be derived from the effects of
actions  together with the global variable bounds  specifically  for each action a 
 if a produces c units of v and has a precondition requiring v  d  then d   ub v   c 
where ub v  is the global upper bound on v after a has been applied  this condition
expresses both the effect of a on the upper bound and the precondition on the value
of v  since v  ub v   
 if a consumes c units of v then v must satisfy v  lb v    c before the action is
applied  again  this expression leads to the effect and precondition being tied into
one constraint 
if the ordering of actions is relaxed  that is  the causal relations that force them to be
ordered are ignored  then the value of v after a series of actions has been applied  v     is
given by 
x
v    v  
ca   v  a 
   
aa

where ca is a non negative  count  variable indicating how many times the action a is
applied  v     lb v   ub v   and  v  a  is defined as follows 
 if a produces c units of v then  v  a    c 
 if a consumes c units of v then  v  a    c 
 otherwise   v  a      
note that this equation is linear  since definitions     and     require that  v  a  is constant
for any v and a 
these equations support the construction of a mathematical program consisting of one
variable for each action  a  and one variable and flow equation for each producerconsumer
variable  v  the program is  in fact  a mixed integer program  mip   because the variables
 the action counts  a  represent applications of actions  which can only be integral  however 
a further relaxation can be exploited to allow the action count variables to take non integral
values  yielding a linear program  lp   the significant potential benefit of doing so is that
lps can be solved far more efficiently than mips 
   

fia hybrid lp rpg heuristic for planning

    bounding action variables
within the equation associated with each state variable  i e  each equation     each action
has a corresponding variable denoting how many times it has been applied  in general there
is no limit on the number of times an action can be applied  however  numeric decrease
effects and propositional delete effects may impose constraints in practice  due to limited
availability of resources  for example  if applying an action a increases v at the expense
of decreasing w  where w is a resource for which there is no producer  then the limit on
ca will be an implicit consequence of the instance of equation   governing the value of w 
specifically  ai can never exceed w  w  a   the value of w divided by the change a causes in
w  moreover  because w is monotonically decreasing and  w  a  is constant for each action
a  the global upper bound on ca can be set to w i   w  a   where w i  is the value of w
in the initial state  i 
if an action a increases v at the expense of irreversibly deleting some fact p  a fact it has
as a precondition  then clearly a can only be applied once  it is a one shot action  coles 
coles  fox    long         however  in contrast with the numeric delete effects discussed
above  this will not be captured by the producerconsumer constraints which are concerned
only with numeric change  however  the constraint on the use of a can be captured by
setting the upper bound on ca to    moreover  if a collection of actions a     an  each
depend on a fact p and each irreversibly delete it  we can say that they form a one shot
action set over p  and add the constraint 
ca    ca          can    

   

    assignment constraints
in general  direct assignments of values to variables cannot be represented directly in constraints following the form of equation    assignments correspond  effectively  to statedependent increases or decreases  for instance  an assignment of the value   to a variable
v  in a state where v      is equivalent to producing   units  but is equivalent to consuming
  unit when applied in a state where v      however  in the producerconsumer equations
there is no notion of state  only coefficients on action variables to denote their production or
consumption  therefore  the state variables can only be subject to constant valued change
and the mip cannot be used to encode general assignment effects without extending it to
allow quadratic constraints  that is  constraints involving products of pairs of variables  
however  there are some specific conditions under which assignments can be safely modelled
within the mathematical program while retaining the linearity of constraints 
one class of assignment effects that can be encoded in the mip is that in which the
actions with assignment effects to a variable  v   k  can only be applied in states in
which v   c for some known constant  c  in this case  the effect can be rewritten as an
increase effect on v of k  c  making the assignment actions follow the standard pattern for
producer consumer actions  a particular case in which this rewriting is made possible is if
the following conditions hold of the set of actions a 
   no action can depend upon or affect v before some condition is satisfied that is
achieved by each of the actions in a and only by actions in a 
   applying any action in a precludes any further assignments to v 
   

ficoles  coles  fox   long

these conditions ensure that the set of actions that can assign to v form a one shot action
set and the value of v can be assumed to be   prior to application of one of the actions in
this set  with each action in the set being rewritten to increase v by its assignment value 
this situation is one that arises in encodings in which objects are created by certain actions
and those objects have associated metric variables that are initialised on object creation
 such as the capacity of a newly created vehicle in the settlers domain  

   the linear programmingrelaxed planning graph heuristic
we have defined producerconsumer behaviour and shown how it supports construction of a
mip in which action ordering is relaxed  a mip is  in principle  hard to solve  constructing
solutions is np hard   so as the basis of a heuristic evaluation of states it seems sensible
to further relax the integrality constraints on action variables to reduce the problem to a
linear program  we will first consider how the lp can be used in the two stages of heuristic
evaluation of a state  reachability analysis and relaxed plan extraction  and then we will
reconsider the question of whether the relaxation to a linear program is necessary in practice
and what compromise there might be between the full mip and the lp 
    overview
the context for the use of the lp is in a forward state space search planner  the task
for which we intend to use it is the heuristic evaluation of states  thus  we can assume
that we have a state  a complete assignment to the variables that define the problem  both
propositional and numeric  and we are interested in estimating the number of actions that
will be required to transition to a goal state  the approach we will use is based on the same
strategy as is used in metricff  first construct a reachability analysis using a layered graph
of alternating facts and actions and then extract a relaxed plan  to determine whether
an action can be applied in the reachability stage we check propositional preconditions in
the usual way and numeric preconditions are checked by determining whether some values
in the reachable ranges recorded for the metric variables will satisfy the condition  the
reachable ranges are calculated using the lp we have described  as we explain below 
extraction of the relaxed plan involves determining which actions support required
conditions  both goals and preconditions of selected actions   and where the conditions
involve numeric variables we use the lp to decide which actions will be required and how
many of them will be used 
    using the lp during graph expansion
the graph expansion phase in calculation of the metric rpg heuristic can be seen as
a layer by layer relaxed propositional reachability analysis  synchronised with a relaxed
numeric bounds analysis  definition     shows that numeric variable bounds appear in the
graph expansion algorithm in two places  first  at f  i  they are used to determine which
actions can appear in a i       the next action layer  those whose preconditions are within
the reachable range   then  the actions deemed applicable are used to update the variable
bounds for the subsequent fact layer  f  i      
   

fia hybrid lp rpg heuristic for planning

maximise  v  
v           cc
v          cc
v     
v     
c 

v  
 
 

v  

 

cc
  
 

 
 




 
 
 

 a  equations

max
 
 
 
 
 

v          
v          
 c  solutions for min max

 b  rowcolumn

figure    lp to maximise the value of v  in layer f  i      of figure    treating layer fi as
the initial state for this construction 

due to the relaxed nature of the way numeric values are considered  the metric rpg
tends to produce highly optimistic bounds on the numeric values  returning to figure   
we can see that  in effect  the action c converts two units of v  into two units of v  and 
initially  just two units of v  are present  hence  at most  we could hope to produce two of
v    but in f v  i       the upper bound on v  is already    ignoring the consumption effect
of c makes it possible to produce arbitrary amounts of v    c is applicable if the upper
bound on v  is greater than or equal to two  which in reality is only true so long as c has
not yet been applied 
a more accurate estimate of the variable bounds in layer f v  i  can be found using the
lp encoding described in section      the model is parameterised as follows 
 only those action variables corresponding to actions in a i  are used  which ensures
that only reachable actions are considered in computing resource bounds  any relevant
one shot action constraints are included  the absence of any restriction on the number
of action applications contrasts with the constraint used in metric ff that each action
may only be applied once per action layer  in practice to prevent the lp variables
becoming unbounded  we set a finite  but large maximum value for action variables 
 the initial value of each variable v is set from the state  s  being evaluated 
 the post value of a variable  v     is f v  i  v   the range of values it could reach by
f v  i   as always  v     lb v   ub v   
substituting these parameters into the producerconsumer equation  equation    yields 
x
f v  i  v    s v   
ca   v  a 
   
aa i 

with this model  we can then use an lp solver to find upper and lower bounds on each
f v  i  v   by setting the objective function accordingly 
returning to our example  consider finding the upper bounds on the variables in f  i   
of figure   starting from a state corresponding to the one given as fi in that figure  thus  we
are considering the constraints in layer   following the state we are treating as our starting
point   the corresponding lp is shown in figure    where the primed variables are the ones
   

ficoles  coles  fox   long

we use to represent the values of the numeric variables in the layer of interest  i e  in this
case the layer   ahead of the state being evaluated   maximising v     i e  using the upper
bound of f v  i  v     yields the result    no greater value is possible  since setting c to a
value greater than    and thus producing more v    would lead to a violation of the constraint
v       the ranges of the variables computed  using the lp four times  minimising and
maximising each of the two variables   are shown in figure  c  as can be seen  these
improve over the bounds calculated in the same situation by metricff  figure     which
are v           and v           respectively 
      notes on lp efficiency
as the lp has to be solved up to twice per variable per layer when expanding the planning
graph  it is important that steps are taken to minimise the computational cost  we reduce
the costs using a combination of techniques  some that avoid needing to solve the lp when
computing the bound on a given variable  and others which reduce the cost of solving the
lp itself 
   first  as a consequence of the termination criteria for rpg expansion  section        
there is no need to compute the upper  lower  bound on a given variable if its current
value is large enough  small enough  to satisfy all the preconditions and goals in which
it appears  in this case  we can avoid having to solve the lp to determine the variable
bound  and instead can re use the bound computed at the previous layer  without
affecting the behaviour of the heuristic 
   if a variable never appears in a numeric precondition or a goal  it can be entirely
excluded from the lp 
   the bounds on variables change monotonically as additional layers are added to the
planning graph  therefore  when computing the new upper  lower  bound on a variable v we can temporarily add to the lp the constraints corresponding to the bounds
computed at the preceding layer  each is added separately as the variable is first minimised and then maximised   by doing so  we refuse to admit a tighter variable bound
than in the previous layer 
   finally  if no actions with an increase  decrease  effect on a variable have yet been
added to the lp  we do not need to compute the upper  lower  bound on the variable 
as there is no effect by which the bound on the variable can be increased  decreased 
beyond the value in the state being evaluated 
    basic use of the lp during solution extraction
we now consider how the lp can be used to give guidance in action selection during relaxed
plan extraction  first  we observe that the lp is not directly affected by propositions  and
hence cannot be used to find which actions are able to achieve a given fact  thus  we
concern ourselves with how the lp can be used to identify which actions to use to attain
numeric subgoals  either the top level numeric goals  or the numeric preconditions of
actions chosen during solution extraction 
   

fia hybrid lp rpg heuristic for planning

algorithm    adding a weighted action to a relaxed plan

 
 
 
 
 
 
 
 
 
  
  
  

data  r  a metric rpg  a  an action to include in the relaxed plan  q  the subgoal
queue  w  a weight
foreach propositional precondition pre of a do
l  layer at which pre first appears 
if l     then
if  pre  k   q l  prop then
if k   w then k  w 
else insert  pre  w  into q l  prop 
foreach numeric precondition pre of a do
l  layer at which pre first appears 
if l     then
if   pre   k   q l  num then
if k   w then k  w 
else insert   pre   w  into q l  num 

the first key difference when using the lp during the relaxed plan extraction concerns
the choice of actions to achieve numeric preconditions  in the original metric rpg heuristic 
a given numeric precondition  e g  x  c  in fact layer i     was regressed through all the
beneficial numeric effects at layer i  giving a residual numeric precondition  e g  x  c    to
then be achieved in fact layer i   this process is shown in lines    to    in algorithm     in
the lp rpg case  shown in algorithm    a numeric precondition at layer l is  temporarily 
added to the lp generated for layer l  as a constraint  line      to find the actions to use
to achieve this  the lp is solved  line      with the objective being to minimise a weighted
sum across the action variables  one possible weighting scheme that will suffice for this
purpose is to minimise the sum of the action variables  though we return to the question of
appropriate weighting schemes later in the paper   finally  the actions whose corresponding
variables are non zero  line     are added to the relaxed plan  lines    to     
second  we must accommodate the fact that the lp  being a relaxation of an underlying
mip  in which the action variables are integers   may be solved by applying actions a nonintegral number of times  as a simple example  if there are several actions that increment a
given variable  and any of them alone would suffice to achieve a goal value for the variable 
then a valid optimal solution to the lp is any for which the sum of the variables corresponding to these actions is    if every action that had a non zero action count variable in the
solution were considered applied then the relaxed plan length could greatly over estimate
the required number of actions  to mitigate this problem  each subgoal  e g  x  c  arising
during solution extraction is associated with a weight  and these weights  along with the
values given to action variables in the lp  are used to update the relaxed plan length  the
weights are manipulated throughout algorithms   and    and their use can be summarised
as follows 

 initially  each goal fact is added to the subgoal queue with associated weight    i e 
each has to be achieved  entirely  also note that  in contrast with algorithm    the
   

ficoles  coles  fox   long

algorithm    relaxed plan extraction with lp

 
 
 
 
 

data  r   a metric rpg  p g   propositional goals 
n g   numeric goals
result  ha   helpful actions  h   a heuristic value
ha    h    
q  deepest first priority queue of goal layers 
foreach p  p g do
l  layer at which p first appears 
insert  p     into q l  prop 

if  n g      then
l  final layer of r 
 
insert  n g     into q l  num 

 
 

 
  
  
  

else
f  the fact in n g 
l  layer at which f first holds 
insert   f       into q l  num 

while q not empty do
 l  hprop  numi   pop q  
foreach  p  w   prop do
h  h   w 
a  achiever for p 
if a in action layer   then add a to ha 
  
call algorithm   with r  a  q  w 
  
prop  prop   add effects of a 

  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  

foreach  g  w   num do
lp  lp l    the constraint s  g 
solve lp  minimising weighted action sum 
av   action variable  a   c   lp   c       
foreach a  av do
h  h   w c 
if a is in layer   then add a to ha 
foreach propositional precondition pre of a do
l  layer at which pre first appears 
c  min c     
if  pre  k   q l  prop then
if k   w c then k  w c 
remove  pre  k  from q l  prop 
else insert  pre  w c  into q l  prop 

subgoal queue here records the layer at which the goal is introduced as well as its
associated weight 
 an action a can be chosen to be applied ca times to achieve a queued propositional numeric sub goal g  if either 
 it is chosen to be applied once  i e  ca      as the achiever for some propositional
subgoal g  with associated weight w 
   

fia hybrid lp rpg heuristic for planning

 the action was applied  given a non zero value for ca   when solving the lp to
achieve some numeric subgoal g  with associated weight w 
 in both of these cases  the relaxed plan length is incremented by ca  w 
 the weight given to the preconditions of a is then w    w min ca       the weights
of these preconditions are used to update the weight attached to achieving the corresponding sub goals at earlier layers 
 if a propositional precondition p of a is already a recorded subgoal at an earlier
layer  with some weight k  then its weight is updated to be max k  w     otherwise 
p is added as a subgoal to the rpg  to be satisfied in the first layer at which it
appears  with weight w   
 in the case of a being added to support a propositional sub goal  if a numeric
precondition p of a is already a recorded subgoal at an earlier layer  with some
weight k  then its weight is updated to be max k  w     otherwise  p is added as a
subgoal to the rpg  to be satisfied in the first layer at which it appears  with
weight w   
    consequences of the use of the lp during solution extraction
use of the lp to aid in the identification and selection of actions to support achievement
of numeric goals and subgoals in the extraction of a relaxed solution can lead to some
important consequences on the heuristic guidance offered by the relaxed solution  we have
already noted the problem that non integral fragments of actions might be combined to
achieve numeric effects and indicated that this can be managed by handling fractional
preconditions and fractional action costs  however  there are other potential problems as
we now discuss 
      partially applied helpful actions
consider a situation in which there are precisely five possible ways to achieve a particular
numeric goal  and each of these uses three actions  a simple example of this is a small
problem in the settlers domain  where there are five carts and a unit of timber available at
location a  the goal of having one unit of timber at location b can be achieved by loading
timber onto any of the carts at a  moving it from a to b  and then unloading it at b 
if the metric rpg heuristic were used to achieve this goal  three actions would be used 
working backwards from the goal  the selected actions would be 
 in action layer three  an unload action  from cart c  to increase the amount of timber
at b 
 in action layer two  an action to move a cart c from a to b 
 in action layer one  an action to load a unit of timber at a onto the cart c 
when solving the lp to achieve the same goal  ignoring propositional preconditions  
with the objective of minimising the sum of the action variables  the solution returned will
   

ficoles  coles  fox   long

have an objective value of    if we denote the relevant load unload action variable pair for
cart i as  li   ui    the pool of solutions that could be returned is any satisfying 


li   ui

i      

 

x

 li   ui       

i      

then  for any non zero variable ui   k the relevant action to move cart i from a to b will
also be added to the relaxed plan  with weight k  line     algorithm    
for the purposes of providing a contribution to the relaxed plan length  it is unimportant
which of these solutions is returned  the sum of the action variables in each is    and the
sum of the move actions added is    giving a total relaxed plan length of    however  as
discussed in section        the relaxed plan is also used to determine a set of helpful actions 
those with an effect in common with the actions in the relaxed plan that were chosen from
action layer one  in this example  action layer one consists of the action  or actions  to
load a unit of timber onto a cart at a  in the original metric rpg case  exactly one action
would be used  however  using the lp up to five actions could be  fractionally  used  the
consequence of this is that within the pool of lp solutions that could be returned  some
will lead to search having a much greater branching factor  in this case up to a factor of
five greater 
the source of this problem is the relaxation of integrality constraints on the action
variables and the extent to which it affects search depends on the precise solution returned
by the lp solver  different solvers may have a greater or lesser tendency to return solutions
in which the action variables are assigned non integral values  an extreme response to this
problem would be to revert to the mip and require all action variables to be integral rather
than real valued  alternatively  focussing on the issue identified here  one could require only
the action variables corresponding to actions from action layer one to be integers  in either
case  the result is a mixed integer programming problem  but since the cost of mip solving
is exponential in the number of integer variables  the difference between the variants can
be significant  this change only need be made at the point where we switch to using the
lp for solution extraction rather than graph expansion as  prior to this  the assignments
to the action variables are unimportant  only the value of the objective function is used  
of course  the price we pay is potentially very significant  because mip solving is np hard 
while lp solving is polynomial  however  in exchange for this shift in complexity  in the
example given above  we are left with only a single helpful action  as it is no longer possible
to fractionally load timber onto a cart  one cart must be chosen  the extent to which these
two possible integer modifications affect search performance will be considered later in the
evaluation 
      preferring earlier actions
within the metric rpg heuristic there is an explicit preference for using actions that
appear earlier in the relaxed planning graph  as shown in algorithm    when a fact is
needed  either as a goal or to satisfy a precondition of an action chosen for insertion into
the relaxed plan  it is queued as a sub goal to be satisfied at the first fact layer in which
it appeared  then  when an action is chosen to support that fact  it will be amongst the
earliest possible achievers  the intuition behind this preference for earlier actions is based
   

fia hybrid lp rpg heuristic for planning

on the observation that  the later an action appears in the relaxed planning graph  the
greater the number of actions that need to be added to the relaxed plan to support its
preconditions  therefore  preferring earlier actions usually leads to shorter relaxed plans
and hence to closer approximations of the optimal relaxed plan length 
within the lp  if the objective is set to minimise the sum of the action variables  i e  use
as few actions as possible   then there is no distinction between actions that appear earlier
in the rpg and those that appear later  recalling that the lp disregards the propositional
preconditions of actions  failing to take into account when an action is first added to the
rpg can lead to lp based relaxed plan extraction generating very poor quality solutions
and  consequently  very poor search guidance 
to address this  the pressure generated within the lp by the objective function has to
be tuned to prefer actions that need fewer supporting actions in the relaxed plan  this is
achieved by forcing the lp to favour actions that appear in the rpg earlier  we encode
a preference for earlier actions with the weighting scheme for the action variables in the
objective function  actions appearing earlier are given smaller weights than those that
appear later  we propose  and  later  will evaluate  two ways of achieving this  the first 
and simpler  is to use a geometric series to dictate the coefficient given to an action variable
a based on the layer l in which it first appears  in this case  the objective coefficient on a
is 
kl
k     k     
the value of k controls the extent to which earlier actions are preferred  and can be interpreted as treating k n actions selected from layer l as exactly as good as selecting n actions
from layer l      so anything less than k n actions from layer l will be preferable to selecting
n actions in layer l       throughout the remainder of the paper  we refer to this scheme
as layer weighting with value k 
the second option is to record  as a cost for each action  an estimate of the number
of actions needed to support its propositional preconditions  and use this as its weight in
the objective function  this can be achieved by using the rpg cost propagation algorithm
from sapa  do   kambhampati         to achieve this  as the planning graph is expanded 
costs for each fact and action are recorded and updated at each layer  initially  for each fact
p in the state being evaluated  its cost at fact layer zero  cost p      is zero   for each fact
p not true at time zero  cost p          these fact costs are then used to derive action
costs  using rules akin to those used by hadd  hmax  bonet   geffner         the cost of an
action a at layer t  cost a  t  is defined according to one of either 
cost max  a  t    max cost p  t    
ppre a 

cost sum  a  t   

x

cost p  t     

ppre a 

these action costs  in turn  are used to update the costs of each proposition in the
subsequent fact layer  with the cost of each fact being reduced if there is now a cheaper
way to achieve it  for an action a in layer t  it can potentially reduce the cost of each of
the propositions p that it adds 
cost p  t    cost a  t      iff  cost a  t         cost p  t    
  cost p  t     otherwise
   

ficoles  coles  fox   long

as the planning graph is expanded  this process of alternating action cost estimation 
and fact cost estimation  is used to propagate cost information through the rpg  when
setting the objective of the lp  we can use the cost of an action  cost a  t   as the coefficient
of the action variable corresponding to a  using the cost propagation as described  the
costs are derived solely on the basis of propositional preconditions and effects  therefore 
cost a  t  is an estimate of the number of actions needed to support the preconditions of
a  for our purposes  this is desirable  the lp will  itself  add actions to support numeric
preconditions  so an estimate of the number of actions needed to support the propositional
preconditions of an action is a measure of the cost impact upon the relaxed plan due to an
action being selected 

   adding propositions to the lp
benton et al         explore the idea of using an lp to guide search in propositional planning
problems in the context of over subscription planning  in that work the lp is used to
determine which goal subset to achieve  to gain maximum utility  whilst successful in
achieving that aim  the authors observe that the use of the lp as a heuristic to guide search
is very expensive  indeed too expensive to be feasible  with the propositions encoded in the
lp in the way they propose  the task of solving the lp becomes equivalent to solving the
entire planning problem with relaxed action ordering and non integer action variables  in
this section  we reconsider the inclusion of propositions in the lp  considering the spectrum
of possibilities between including no propositions and a way to include all propositions 
even though the focus of this work is on numeric problems  including some propositions
in the lp might still be of interest  for instance  supporting a propositional goal might
require the consumption of numeric resources  in the worst case  one could compile a
problem so that all the numeric goals become preconditions of an action that achieves a
dummy propositional fact goal  and modify the problem so that the only goal is goal  since
there are no numeric goals in this modified problem  the lp will then only be used to solve
the individual preconditions of the dummy action when it is  inevitably  chosen  rather than
requiring the goals to be satisfied in conjunction  as described in section      since this
dummy goal model is merely a reformulation of the original problem  the same information
should theoretically be accessible to be conveyed to the lp  more generally  we can hope to
identify intermediate landmark propositions  as well as final goals  that could usefully be
encoded in the lp 
    adding propositional goals to the lp
although the lp we describe in section   does not contain specific reference to propositions  and hence propositional goals  we can formulate constraints that act as a proxy for
them  by considering which actions achieve them  we do not need to introduce additional
variables  instead  we add constraints to ensure that at least one achiever is chosen for each
propositional goal  for each goal fact g that is not true in the state being evaluated  then
for the list of actions  a    an    that achieve g  we can add as a constraint to the lp for the
most recent layer in the planning graph 
a          an     
   

fia hybrid lp rpg heuristic for planning

that is  at least one achieving action must be used or  more specifically  given actions
can be partially applied  a total of at least one achieving action must be used  an lp
containing these constraints can be used to augment the positive termination criteria for
graph expansion  detailed in section        we then terminate at the first fact layer i where 
   all goal propositions f   are in f p  i   as before  
   all goal numeric expressions n   are satisfied  individually  by f v  i   as before  
   the lp used to compute the numeric bounds for layer f  i  is still solvable when all
the constraints for propositional goals are added 
use of the goal checking lp has two key consequences  first  if the actions up to layer
f  i  cannot be used to satisfy the goals whilst respecting the other numeric constraints
in the lp  additional layers are added to the planning graph until the necessary actions
have appeared  or the termination criterion is reached   thus  in reasoning about resource
persistence  section         the heuristic is now better able to recognise cases where  although the propositional goals might appear to be individually reachable  either additional
production is needed to meet them collectively  alternative actions need to be used  or the
state is a dead end  second  the solution to the lp used to confirm point     above  is used
to indicate which actions to add to the relaxed plan to achieve the propositional goals  the
propositional preconditions of these actions will be satisfied in the usual way  line    of
algorithm    
by requiring only that the sum of the action variables selected to achieve the goals is
at least one  and allowing such variables to be real valued  the lp could  in theory  provide
weaker guidance than the rpg  this is a similar issue to that noted in section       when
considering helpful actions  and could be ameliorated in a similar manner  namely by making
the goal achieving action variables integral  we will return to this issue in the evaluation 
considering whether or not this benefits search 
    using landmarks in the lp
a landmark fact  hoffmann  porteous    sebastia        is a propositional fact that must
be true at some point in every solution plan to a given planning problem  the first work
on landmarks  porteous  sebastia    hoffmann        proposed a method for extracting a
subset of the landmarks from a planning problem based on regressing from the goals using
the delete relaxation of ff  since introduction of the idea in       porteous et al         
landmarks have have come to play an increasingly important role in planning  recent development of new techniques for extracting landmarks  richter  helmert    westphahl       
zhu   givan        and the development of heuristics based on different relaxations  richter
  westphal        domshlak  katz    lefler        helmert   domshlak        karpas  
domshlak        have allowed the planning community to exploit landmarks more successfully 
the relaxed plan extraction phase of the lp rpg heuristic relaxes action ordering and
propositional preconditions and effects and might benefit substantially from delete relaxation
landmarks  the use of landmark facts in the lp offers a further mechanism by which to
more tightly couple the lp and the rpg  allowing increased information sharing between
   

ficoles  coles  fox   long

the propositional and numeric components of the heuristic  if we know that a landmark
fact must occur in any solution plan  and it has not yet appeared on the path to a state
being evaluated  we can add constraints representing this to the lp  just as we did for
propositional goals  that is  that the sum of the action variables  a    an    achieving a
given landmark must be greater than or equal to    as with propositional goals  this constraint introduces the need to provide numeric support for the action s  chosen to support
the landmark  goals are a special case of landmarks  but an important feature of goals is
that  even if they have been achieved on the path to the current state  if they are not true
in the current state then they must be reachieved  constraints can be added to the lp to
ensure this  to reflect landmarks that have been achieved on the path to the current state 
the state is modified to record them and the record updated as new landmarks are seen 
this approach is similar to lama  richter   westphal        
a set of disjunctive landmarks is a set of propositional facts  any one of which must be
true in any solution to a planning problem  the extraction of disjunctive landmarks has
been considered  gregory  cresswell  long    porteous        but it is even more difficult
than is the case with conjunctive landmarks to exploit them in planning systems  the
knowledge that a certain fact must be true can allow the planner to infer that certain actions
that must be present in solution plans  which can inform heuristics  however  disjunctive
landmarks are less informative  disjunctive landmarks often arise from problem symmetry 
for example  we might know that in order to deliver a package from one place to another it
will have to be loaded in to a truck  but not which truck  a disjunctive landmark in which
the package is in some truck can be generated  even if we do not know which truck to use 
we know that one of the disjunctive landmarks must hold  thus  in the context of numeric
resources  some truck must be fueled  assuming they all start empty   which might entail
other additional costs  it is therefore of interest to take account of disjunctive landmarks
in numeric reasoning 
we are able to make use of disjunctive landmarks in the lp to further constrain the
problem  ensuring that support is given to at least one fact within each  unreached  disjunctive landmark  when dealing with standard conjunctive landmarks  the constraint is
that a sum of at least one achiever must be added for each propositional landmark  for
disjunctive landmarks  however  the constraint is slightly different  a disjunctive landmark
set l is satisfied if any of its constituent landmarks are satisfied  that is  if we apply any
of the actions 
achieves l     a   eff    a   l      
to encode the disjunctive landmarks in the lp  assuming it has not yet been met  there
are two possibilities  the first is to add a binary variable sf for each fact f  l  with
constraints such that sf can only take the value   if there is at least a total of one action
adding f   and that at least one such variable sf has to take the value    that is  at least
one of the disjunctive landmarks has top
be fully met  an alternative  potentially cheaper 
approach is to add a constraint that   achieves l       this allows the disjunctive
landmark to be considered satisfied if the sum across the action variables supporting any of
its constituent facts is at least    this is somewhat weaker than the constraint for individual 
non disjunctive landmarks  as it does not guarantee that there is support of at least   for
any individual constituent fact  for instance  a two fact disjunctive landmark is satisfied
if the support for each constituent fact is      we considered both of these approaches and
   

fia hybrid lp rpg heuristic for planning

found that there is a negligible difference in performance  time taken and nodes expanded 
between the two encodings so no real saving is achieved by using the relaxed approach 
    managing propositional preconditions and effects
so far  we have considered propositions that must be achieved in a planning problem due to
goals and landmarks  however  there is a second class of propositions  those that  given the
values assigned to the action variables in the lp  must also have supporting actions added
to the solution relaxed plan 
to extend the lp to capture propositional preconditions and effects  we first introduce
a binary variable f  an integer whose value is   or    for each fact f that is not true in
the state being evaluated  this is then involved in two constraints  first  for the actions
 
 a 
     an    that add f  
 
a 
          an   f 
in the case that the proposition corresponding to f is a goal  f     and hence one or more
of the achieving actions must have a positive value  since the constraint is expressed using
continuous variables  the actions might only be partially applied in the relaxation   then 
for the actions  ap    apm    that have f as a precondition 
n f  ap          apm 
where we use n to denote a  sufficiently  large number  this constraint ensures that if at
least one of the actions depending on the proposition corresponding to f is used in a relaxed
plan  then f must be positive  that is  the corresponding proposition is required to be true
within the relaxation   the use of n is to ensure that f     is sufficient to satisfy the
preconditions of many actions  this pair of constraints is effectively a conditional version
of the constraint to meet a propositional goal  described in section      in cases where the
proposition is neither a goal nor a landmark  these constraints serve to enforce that at least
one action that adds f is chosen  has a positive value  in the lp if any action requiring f
is chosen even partially  
    recognising propositional resources
finally  we consider one other case where it is potentially useful to model propositions in
an equivalent numeric form  in pddl  finite domain integer resources can be modelled in
two ways  as numeric variables  or as a set of propositions  consider the following two
formulations of the fell timber action from the settlers domain  for simplicity the effect
on the metric tracking variable labour is omitted  
  action fell timber
 parameters   p   place 
 precondition  has cabin  p 
   it is tempting to consider replacing this constraint  with its slightly troublesome n   with constraints of
the form f  api for each i  unfortunately  this is not appropriate because an action variable  api   can
be greater than    due to multiple applications of the action  and yet f     is sufficient to satisfy the
precondition of all the action applications 

   

ficoles  coles  fox   long

 effect  increase  available timber  p    
 
  action fell timber
 parameters   p   place  n   n    value 
 precondition  and  has cabin  p 
 timber  p  n  
 less than  n   n   
 effect  and  not  timber  p  n   
 timber  p  n   
 
each of these representations models the same situation  but each uses a different mechanism to do so  the first uses numeric variables  while the second uses propositions  when
using either the numeric or propositional formulations with the metricff heuristic  there
is little practical difference in the guidance given  in the numeric case  once the fell timber
action has been applied  the upper bound on the amount of timber at place p is increased 
this means that any action consuming this amount of timber can be executed at subsequent
layers  regardless of how many other actions using the resource have also been applied  in
the propositional case  the delete effect on timber  i e  that deleting the fact that there
previously was some  is also relaxed so  again  any number of actions requiring this amount
of timber can be applied 
turning our attention to the lp rpg heuristic  however  we can observe that although
the rpg part of the heuristic exhibits the same weakness as the propositional case  the
different relaxation used in the lp for numeric reasoning means that the consumption
of timber would not be disregarded  the lp relaxes action ordering  rather than delete
effects  or production consumption effects   so if the resource is modelled numerically  this
interaction can be captured and accounted for  it is therefore in our interests when using
lp rpg to convert resources modelled propositionally into a numeric formulation  so that
these can be reasoned with in the lp  rather than in the rpg 
although the formulation of resources in the above example is an instance of a common
idiom used to capture numeric resources in a propositional encoding  there are situations in
which it is more natural to model resources propositionally from the outset  this is often
the case with binary resources  resources that are either present or not  such resources are 
of course  a special case of the more general resource model described above  consider the
propositional and numeric counterparts of an action to switch on a water pump 
  action activate
 parameters   p   pump 
 precondition  off  p 
 effect  and  not  off  p  
 on  p  
 
  action activate
 parameters   p   pump 
   

fia hybrid lp rpg heuristic for planning

 precondition      pumping  p    
 effect  increase  pumping  p    
 
corresponding actions can similarly be created to switch the pump off  the fact  on
 p  is deleted and  off  p  added  or equivalently a unit of  pumping  p  is consumed  
in many senses  the most natural formulation of this action is the first  using propositions 
this is the way most binary resources are encoded in benchmark domains  however  the
second formulation is equivalent  assuming the value of  pumping  p  in the initial state is
  or     if there is no interaction between a propositional resource and the other resources
identified in the planning problem  there is little motivation to add it to the lp  since no
numeric support is required  in the case where a binary resource has an impact on another
numeric variable it is  as we shall see  most efficient to model both as numeric resources 
suppose we have some water pumps that can control the flow of water  two ways to model
this in pddl are shown below 
  action activate
 parameters   p   pump 
 precondition  off  p 
 effect
 and  increase  water flow    
 not  off  p  
 on  p  
 
  action activate
 parameters   p   pump 
 precondition      pumping  p    
 effect  and  increase  pumping  p    
 increase  water flow     
 
the first of these two actions switches on a pump  a binary  propositional resource  and
produces a unit of  water flow   if other actions in the domain have preconditions over the
water flow  such as an action to run a water wheel with a precondition    water flow    
then there is an interaction between the propositional and numeric variables of the problem 
if we use the first model of the action  the rpg will capture the propositional part of the
action  whether the pump is on or off  and the lp will encode only the numeric part of the
action  since the rpg relaxes delete effects it will not represent the fact that  off  p  is no
longer true and  hence  will not prevent the pump from being switched on many times  in
the lp built using the first formulation  the action activate does not consume any numeric
resources  so it can be used arbitrarily often to increase the water flow  the fact that
switching off is necessary to achieve this increase is ignored  thus  mixing the propositions
and numeric resources in the action degrades the information available from the lp 
using the second formulation  the state of the pump appears in the lp as a variable 
and if we use activate and deactivate to denote the actions for activating and deactivating
   

ficoles  coles  fox   long

a pump  the constraints on the pumping   variable are 
pumping     init   activate  deactivate
pumping     
pumping     
it is now clear that the activate action can only be applied once  if it is applied again
then deactivate must be applied  with the corresponding effect on water flow  in order to
satisfy the last of the above constraints  this provides useful guidance  as it indicates that
the water flow cannot reach   units using only these actions  actions to control more pumps 
or other means of increasing flow  need to be added to the lp  through further expansion
of the planning graph  if no means to attain sufficient flow can be found  then a dead end
has been discovered that would otherwise have wasted search effort 
static analysis techniques capable of identifying propositional resources have been developed  such as the tim system described in long   fox         these can be used in a
preprocessing stage to recognise propositional resources in planning domains and translate
them into equivalent numeric resources  we use this translation approach for all recognised
resources  with the resulting numeric preconditions and effects being included in the lp in
the same way as other numeric variables  in doing so  the lp order relaxation rather than
the rpg delete relaxation is used to compute heuristic values  preventing impossible reuse
of the same resource in cases such as that described 

   extending the scope of numeric reasoning in the lp
in section   we discussed an lp encoding that captures the producerconsumer behaviour of
actions  as used in the first version of lprpg  coles et al          in this section we discuss
how this encoding can be enhanced  with the use of further numeric information representing
the structure of the planning problem  to improve the guidance that the resulting heuristic
can provide to the planner  we address two key issues here  ensuring that conjunctions
over numeric goals can be satisfied  and considering the issue of fractionally applied actions
in the lp 
    checking numeric goals alongside propositional goals
in section     we noted that we can constrain the lp so that it finds actions to achieve
propositional goals  we can extend this further  to capture numeric goals  n     adding
each numeric goal directly to the lp as a constraint  as with propositional goals  this has
clear advantages in terms of resource persistence  section         by insisting all goals are
simultaneously achievable  rather than just individually achievable  additionally  though 
it raises the expressive power of the numeric goals we are able to handle to anything that
can be expressed in linear normal form  lnf   any lnf formula can be added to the
lp as a constraint 
    catalytic resources
so far we have only considered numeric variables that conform to producerconsumer behaviour  however  there is another related class of variables that can also be expressed in
   

fia hybrid lp rpg heuristic for planning

the lp in a similar way to producerconsumer variables  these are variables that represent resources that must be present in order for an action to be applied  but are not then
consumed  the same resources can be used to support many actions    an example of such
a resource is a catalyst in a chemical reaction  a catalyst must be either created through
reactions  or bought  but once present  it enables other reactions  or allows them to take
place more quickly  for these catalytic reactions  the resource must be present  but is not
consumed  though it could be that other non catalytic reactions may consume the resource 
another example one might consider is the building of a unit in a plant  to support some
process  the unit must be there in order for the process to occur  but once built it can
be used many times to enable other actions without necessitating its destruction  often
in planning problems  the presence of such structures is represented by propositions  but
this need not be the case  if many indistinguishable processing units are present  or several
units of a catalyst are needed  it often makes more sense to represent these numerically   
to extend the lp rpg heuristic to provide guidance in such problems  where some
actions require v  c but do not affect the value of v  we encounter the difficulty that the
lp encodes no notion of time  ordering of actions is relaxed  so it is impossible to ascertain
the value of v at a specific time in order to determine whether the  catalyst  precondition is
satisfied or not  we therefore add additional constraints to the lp to determine the upper
and lower bounds on v obtained for the most optimistic or pessimistic possible ordering of
the actions whose variables are non zero  to find an optimistic upper and lower bound on
v  v  and v  respectively  we add the constraints 
x
v   v  
a  max  v  a     
   
aa
v   v  

x

a  min  v  a     

   

aa
the upper bound is equivalent to ordering all production actions before all consumption
actions  for the lower bound  this is reversed  being equivalent to all consumption actions
being ordered before all production actions  the bounds are not the same as those computed
for the possible values of resource variables in the reachability graph  because here we are
considering only the actions that are actually selected for execution in the relaxed plan 
rather than those that could possibly be applied  as can be seen  neither requires an
explicit notion of time 
using these bounds  if an action a with a precondition v  c is to be applied  even
fractionally  then it must be the case that v  c  otherwise the precondition on the action
could never be met with any ordering of the actions chosen  of course  if v  c  we cannot
guarantee that there is a legal ordering of the producers and consumers that achieves this
value  this need to have at least a feasible opportunity to satisfy the precondition can be
added to the lp through the introduction of a binary         integer  variable and a pair
of constraints  for the actions  a    an    requiring a precondition v  c  then using n to
   we note that there is a complementary class of variables whose values must remain below a certain level
in order for actions to be applied  but are not then produced  these seem less useful in real problems 
but nonetheless can be handled in an analogous way 
   in section   we show how these could be captured in the lp even if they are expressed propositionally 

   

ficoles  coles  fox   long

denote a large number  and s to denote a new binary variable  we add the pair of constraints 
n s  a          an 
v   lb v     c  lb v   s

   

the first constraint forces s to take the value   if any of the actions requiring the
precondition v  c are applied  the second constraint then determines the lower bound on
v  based on the value of s  if s      then the lower bound on v  is lb v   the global lower
bound on v  otherwise  s      since an action needing the precondition has been applied 
and thus v  c  if there is no constraint that s     then this implies that at least one
of the actions  a     an    is applied  however  since a non zero value of s only makes the
lp harder to solve  there is no pressure to set s     for any reason other than that the
precondition must be satisfied  it is important to note that these constraints are only being
added to the lp in problems where v  c preconditions are not matched by a v   c effect 
the modified heuristic is able to support planning models that it previously could not  its
behaviour on domains without these characteristics is entirely unaffected 

   results
in this section we present a thorough evaluation of the lp rpg heuristic  comparing it to
state of the art numeric planners  considering the use of different lp solvers and performing
ablation studies to determine the most effective of the many potential different configurations of lp rpg discussed in this paper  these include the weighting of action variables in
the lp according to the rpg layer in which they appear  the inclusion of propositions and
numeric goals in the lp and the consideration of which variables in the lp should remain
integer and which should be relaxed to real numbers  all our tests were run on    ghz
pentium iv machines and were limited to    minutes and    gb of memory  if a planner
or planner configuration fails to report a solution within these limits it is deemed to have
failed to solve the problem 
    evaluation domains
first we discuss our selection of evaluation domains  out purpose in selecting these domains
is to select or construct examples that are informative in evaluating the behaviour of our
heuristic  domains with numeric variables that do not conform to the producer consumer
behaviour can be identified syntactically and a different planning strategy can then be
employed  since the syntactic analysis is trivial  the overhead in making this decision is
negligible  so we can assume that the performance on domains to which our approach is not
applicable is consistent with whichever alternative strategy is selected for deployment 
we consider both existing competition benchmarks with producerconsumer behaviour 
and introduce some new domains that exhibit this behaviour  there are few current benchmarks that exhibit interesting producerconsumer behaviour  but in order to make a comparison that is as informative as possible we make use of those that do 
 the mprime domain from ipc   
 the rovers domain  numeric variant  from ipc   
   

fia hybrid lp rpg heuristic for planning

 the settlers domain from ipc   
 an alternative encoding of the settlers domain  described below  
 the pathways domain from ipc     we developed a metric domain derived from
the metric time variant  by replacing the durative actions with comparable nontemporal actions  
in addition to the standard ipc problem set for settlers  problems       we introduce
some new problems that make full use of the scope of the domain  the domain allows
for building ships and transporting materials between disjoint islands  however  in the
benchmark set none of the problems require this  as building ships requires a large amount
of infrastructure  we therefore add some problems to further challenge the planners  where
materials must be imported from overseas in order to achieve goals  the first of our problems
     requires merely the building of a ship     requires the import of timber from overseas 
and    requires building housing overseas     adds some further goals to     requiring the
planner to achieve both goals on the mainland and build housing on the island  the final
problem      considers   disjoint islands from which resources must be combined to achieve
a goal on each island  each of these problems requires building much greater infrastructure
than required in the original ipc   settlers problems  we consider two variants of the
settlers domain  the standard ipc   domain  and an encoding based on the representation
of carts proposed by gregory and rendl         here  the number of carts at a given
location is represented as a numeric variable  carts at  location   there are then two
possible move actions for carts  one that moves a cart and a unit of a resource from one
location to another  and one that moves the cart without moving any resources  i e  the
cart moves whilst being empty  this encoding is possible because carts can only transport
a single unit of material  so it is not necessary to maintain specific named identities and
capacities for each cart 
in addition to the benchmark domains  we use two domains created during the development of lp rpg 
 the market trader domain  coles et al         
 the hydro power domain 
in the market trader domain  a trader begins with a small amount of money  and
the goal is to have increased that to a certain level  this must be achieved by travelling
between markets  each of which sells some collection of goods at a certain price for each
good type  and buys at another  lower  price  money can be made by buying items where
they are cheaper and transporting them  via camel  to other locations where they command
a higher price  moving has an associated cost as food is required for the camel  this is a
representation of a more general class of real world trading problems where the aim is to
make money through buying  transporting and selling goods  the hydro power domain
is also concerned with financial gains  but the domain has a different structure  rather
than transportation  it is concerned with energy storage using hydroelectric reservoirs  by
buying electricity to pump water uphill during periods of low demand  when electricity is
cheaper  and storing this potential energy  the electricity can be sold at a higher price at
   

ficoles  coles  fox   long

domain
market trader
hydro power
pathways metric
settlers
settlers numeric carts
mprime
rovers numeric
sugar
total

lp rpg
  
  
  
  
  
  
  
  
   

lp rpg ff
 
 
  
 
  
  
  
 
  

metricff
 
 
  
 
 
  
  
  
  

lpgtd
 
 
 
  
 
  
  
  
   

table    coverage achieved by different planners

times of greater demand  the domain encoding is augmented to take into account energy
loss  purchasing one unit of energy will not be sufficient to provide one unit of energy later
as there are losses in the storage process  in this problem  despite the temporal axis  we
are only interested in profit being made  so we do not force the planner to advance time
to a specific point  we only ask that sufficient profit has been made and the planner can
choose to advance time if necessary  in general this problem models continuous processes 
customer demand changes continuously  here  we simplify the problem by discretising into
   minute time intervals  using the demand schedule from the transformer domain  bell 
coles  coles  fox    long         based on the uk national grid figures  like the original
transformer model we represent temporal features of the problem with an advance time
action  rather than temporal pddl  since lp rpg is not a temporal planner 
the final domain we consider is the sugar domain  radzi         here  the objective
is to produce sugar through industrial processes  refining it from raw cane  this domain is
taken from a set of domains designed for optimisation planning  in each there are several
paths to the goal  originally included to allow the planner a choice of trajectories with the
challenge being to find better quality solutions  as this set of domains was designed to be
challenging as metric optimisation problems  most of the domains in the set are trivial for
standard metricff  if the plan metric is ignored then almost all of the problems are solved
in less than   second    therefore  of these domains  we consider only the sugar domain 
which remains challenging to metricff even when optimisation is not required  the number
of paths that appear to lead to the goal is so large that without good guidance it is difficult
to find any solution to the problem 

   this is not to say that the other domains are uninteresting  they present an interesting challenge that
is explored by radzi         using a carefully modified variant of lp rpg  however  the challenge is to
find good quality plans  where quality is determined by a more complex metric than simple plan length 
neither metricff nor lp rpg in the form discussed here have difficulty finding poor quality plans for
these problems 

   

fia hybrid lp rpg heuristic for planning

markettrader
   

hydropower
     

lprpg

    

lprpg
lprpg ff
ff
lpg

   
  

time  s 

time  s 

  

 

 
   
    
   

     
 

 

 

 

  
  
problem number

  

  

  

  

 

  

  
  
problem number

     

lprpg
lprpg ff
ff
metric lpg

   

  

sugar

pathwaysmetric
    

  

    

lprpg
lprpg ff
ff
lpg

   
  

time  s 

time  s 

  

 

 

   
   
    

    

     

     
 

  

  
  
problem number

  

  

 

 

 

 

  
  
problem number

settlers
     

    

  

  

  

  

settlersnumeric
    

lprpg
lprpg ff
ff
lpg

lprpg
lprpg ff
ff
lpg

   

time  s 

time  s 

   

  

  

 
 
   

   

    

    
 

  
  
problem number

  

  

 

  
  
problem number

mprime
    

   

  

roversnumeric
    

lprpg
lprpg ff
ff
lpg

   

lprpg
lprpg ff
ff
lpg

  
time  s 

  
time  s 

  

 

 

   

   

    

    

     

     
 

  

  
  
problem number

  

  

 

 

 

 

  
  
problem number

  

  

  

figure    comparison to metricff and lpgtd  time taken to solve problems

   

  

ficoles  coles  fox   long

market trader
   

hydro power
   

lprpg
best known

lprpg
lprpg ff
ff
lpg
best known

   
   
   
   
solution quality

solution quality

   
   
   

   

   
  
  
  
  

 
 

 

 

 

  
  
problem number

  

  

  

  

 

  

  
problem number

pathways metric
    

    

  

lprpg
lprpg ff
ff
lpg
best known

   

   
solution quality

    
solution quality

  

sugar
   

lprpg
lprpg ff
ff
metric lpg
best known

    

  

    
    

   

    

   

    
  
    
 

 
 

  

  
problem number

  

  

  

 

 

 

 

  
  
problem number

settlers
   

   

    

  

  

lprpg
lprpg ff
ff
lpg
best known

   
solution quality

   
solution quality

  

settlers num  carts
    

lprpg
lprpg ff
ff
lpg
best known

   

  

   
   
   

   

   

   
   
   
 

 
 

  

  
problem number

  

  

 

  

m prime
   

   

  

  

rovers numeric
   

lprpg
lprpg ff
ff
lpg
best known

   

lprpg
lprpg ff
ff
lpg
best known

   
solution quality

   
solution quality

  
problem number

   

   

   

   

  

  

 

 
 

  

  
problem number

  

  

  

 

 

 

 

  
  
problem number

  

figure    comparison to metricff and lpgtd  plan length

   

  

  

  

fia hybrid lp rpg heuristic for planning

    comparison to other planners
we first compare the performance of lp rpg to existing numeric planners  we use what
was found to be a strong  though not uniformly best  configuration of the planner  as we
will demonstrate in subsequent sections 
 landmarks and propositional goals are added to the lp  as in section      
 the weight of an action variable in the objective function used during solution extraction is  l   where l is the layer at which it appeared during rpg expansion 
 action variables corresponding to actions in action layer   are integral 
 ibm ilog cplex version        is used as the lp solver 
we compare to the two historically most successful numeric planners  metricff  hoffmann        and lpgtd  gerevini et al          these remain state of the art  as many
modern planners  e g  lama  do not handle numeric preconditions  only action costs  to
further clarify any differences in performance  we also compare to lp rpg ff  a reimplementation of metricff based on our lp rpg code with the difference that  when computing
upper  and lower bounds on numeric variables during rpg expansion  lp rpg ff allows
actions to be applied many times at the same action layer  rather than only once per action
layer as in metricff  since the publication of our earlier comparison to lpgtd  coles et al  
       a new and improved version of lpgtd has been produced  this version of lpgtd
performs much better than the earlier version  and we use it in our results here  we also
consider a variant of lpgtd  metric lpgtd  gerevini  saetti    serina         designed to
be more responsive to plan metrics based on numeric variables  our experiments showed
that metric lpgtd does not perform significantly differently to lpgtd in generating first
feasible plans for problems where plan length is the metric  apart from in the pathways domain where lpgtd crashes on all problems  therefore  we report performance for lpgtd
in all domains except pathways where we report figures for metric lpgtd 
an interesting pattern emerges in the relative performance of the planners across our set
of evaluation domains  shown in figure    the domains are organised with those at the top
being the most strongly numeric  relying on few propositions  and those towards the bottom
having more propositional structure and consequently less numeric structure  on the two
most heavily propositional domains  mprime and rovers  lpgtd is generally the most
successful planner  solving all of the problems in the evaluation sets  and often being the
fastest planner on these problems  the same pattern holds for the standard competition
problems        in the competition formulation of the settlers domain  metricff also
performs quite well on the mprime and rovers domains  but struggles on the settlers
domain due to the numeric structure present 
in the more strongly numeric domains  however  lpgtd performs poorly  indeed it fails
to solve a single problem in the pathways and market trader domains  this is not due to
crashing  rather the planner just searches until it exhausts resource limits without finding
a solution  in hydro power  lpgtd solves the five easiest problems  but is not able to
scale beyond this  in our experiments we have observed that lpgtd struggles on domains
where there is limited propositional structure more generally  and the search guidance it gets
from the numeric problems is poor  comparing the two settlers variants also gives some
   

ficoles  coles  fox   long

interesting insights  when the carts are turned in to a numeric resource  lpgtd struggles
much more solving    instead of    problems  whereas the performance of lp rpg is in fact
improved  note that although lpgtd is successful on the ipc   problems  it cannot solve
the richer problems where ship building and overseas transport is required  whereas lp rpg
is capable of solving such instances 
turning our attention to the comparison with metricff we can observe that problems
solved by both planners are generally solved more quickly by metricff  particularly on
the domains with more propositional structure  this is because lp rpg has the additional
overhead of solving an lp at each state  and partly  of course  due to the highly efficient
metricff code base   occasionally the general pattern is broken  with lp rpg being faster 
this is because slight variations in the ordering of heuristically equivalent states can lead
to significant differences in performance  the results for lp rpg ff show similar over
all coverage to those for metricff  although sometimes solving different problems  again
branch orderings and a different code base can cause such differences  which are most marked
in the pathways and sugar domains   but serve to demonstrate that it is not our basic ff
implementation performing drastically differently to standard metricff that is causing the
gains we observe 
looking at the numeric domains in particular  the lp rpg heuristic is able to provide much better guidance  allowing lp rpg to solve many more problems than metricff 
notably  in the market trader domain neither metricff nor lp rpg ff can solve any
problems  this is due to the poor guidance the standard rpg heuristic gives in this domain  relaxing the transfer of numeric resources  the relaxed plan is to buy an item then
repeatedly sell the same item until sufficient profit has been made  again  in hydro power 
a similar situation occurs  once one unit of energy has been pumped up  the same unit of
energy can be repeatedly sold at any future time of day  making sufficient profit without any
guidance  in pathways  where chemical reactions must take place  the relaxation used by
metricff will allow units of the same substance to be used repeatedly  in several different
reactions  despite the fact that when they are used they are consumed  the lp rpg heuristic does not permit this and therefore gives much better search guidance  allowing lp rpg
to solve all problems in this domain  the numeric resource transfer present in the settlers
domain leads to poor guidance from the metricff heuristic and metricff is able to solve
very few problems as a result  the use of the lp is very effective in this domain allowing
more problems to be solved  the different formulations seem to make little difference to
coverage for metricff  with neither making the problems easier for metricff to solve 
the quality of solutions  plan length  produced by the different planners is displayed in
figure    we emphasize here that lp rpg in its current form is not making any attempt
to minimise a general measure of plan quality  these results are merely intended to give an
indication as to whether there is a large degradation  or indeed a fortuitous increase  in
quality in moving from using a standard rpg heuristic to the hybrid lp rpg approach 
the potential to improve plan quality using an lp rpg style approach has been explored
in other work for domains with preferences  coles   coles        and also for a range of
different metrics  radzi         none of the problems we use have specified metric functions
to minimise  so instead we use the number of actions in the solution plan  this is the value
that the rpg heuristic will tend to minimise  none of the planners are run in optimisation
mode  where that is available  and all simply report the first plan found in search  on
   

fia hybrid lp rpg heuristic for planning

most domains the quality of solutions produced by lp rpg is comparable to that of those
produced by metricff and lpgtd  in the sugar domain the lp rpg heuristic compares
favourably to lpgtd  although we could perhaps hope that running lpgtd in quality mode
would enable it to produce better solutions  in pathways  lp rpg produces particularly
long solutions  but there is a trade off  as it is also able to scale to solve far more problems 
we will return to the issue of solution length in this domain when considering the weighting
of action variables in the lp during solution extraction 
in summary  lpgtd seems to be generally successful on domains where there is sufficient propositional structure and metricff is generally very efficient on problems that it
is capable of solving  when the structure of the domain becomes heavily numeric both of
these planners perform poorly  lp rpg  however  is able to solve many more problems than
any of the other planners  making use of search guidance in the lp that captures numeric
interactions well 
    lp solvers
in lp rpg the construction and use of an lp is performed using functions commonly
available in a wide range of lp solvers  adding variables or constraints to a model  setting
variable bounds  marking whether variables are real or integer valued  changing the objective
function  and so on  the current implementation employs a minimal abstraction layer
between lp rpg and the lp solver itself  so that almost any lp solver can be used  in this
section  we consider the use of three lp solvers 
 ibm ilog cplex version         a commercial mixed integer linear programming
solver 
 coin or lp  clp  version         an open source lp solver  where models feature
integer variables  clp is used within coin or branch and cut  cbc  version       
which is  again  open source 
 lpsolve version           an open source mixed integer linear programming solver 
in our experiments with these lp solvers  we found that cplex is substantially more
robust than the other two  particularly when the lp is extended to include satisfying
propositional goals and landmarks  thus  for the purposes of the comparison here  we will
use a configuration of lp rpg  equivalent to that used in our earlier paper  coles et al  
       that is not as efficient as those presented elsewhere in the paper  but is most robust
 caused clp and lpsolve to crash less often  under testing 
 propositional goals and landmarks are not added to the lp  it encodes numeric goals
only 
 the only integer variables are  potentially  helpful actions  or those with assignment
effects 
 the layer weighting scheme with k       is used 
we refer to this configuration as limited lp rpg 
   

ficoles  coles  fox   long

market trader
    

hydro power
  

cplex
lpsolve
clp

cplex
lpsolve
clp

   
 
time  s 

time  s 

  

 
   
   

    

    
 

 

 

 

  
  
problem number

  

  

  

  

 

  

  
  
problem number

pathways metric
    

   

  

  

sugar
     

cplex
lpsolve
clp

cplex
lpsolve
clp

    

   

time  s 

time  s 

  

 

  
   
 

    

     

   
 

  

  

  

  

  

 

 

 

 

problem number

settlers
     

  

  

  

  

  

  

problem number

settlers numeric carts
     

cplex
lpsolve
clp

    

    

cplex
lpsolve
clp

   
time  s 

time  s 

   

  

  
 
 

   

   

    
 

  
  
problem number

  

  

 

  
  
problem number

m prime

  

rovers numeric
    

cplex
lpsolve
clp

   

   

  

  

time  s 

time  s 

    

  

 

 

   

   

    

cplex
lpsolve
clp

    
 

  

  
  
problem number

  

  

 

 

 

 

  
  
problem number

  

  

  

  

figure    time taken by limited lp rpg to solve problems using different lp solvers

   

fia hybrid lp rpg heuristic for planning

market trader
   

hydro power
   

cplex
clp
lpsolve

   

   
plan length

   
plan length

cplex
clp
lpsolve

   

   

   

   

   

  

  

 

 
 

 

 

 

  
  
problem number

  

  

  

  

 

  

  
problem number

pathways metric
    

    

  

  

sugar
  

cplex
clp
lpsolve

cplex
clp
lpsolve

  
  
  

    

  

plan length

plan length

  

    

  
  

    

  
  

   

  
 

 
 

  

  
  
problem number

  

  

 

 

 

 

settlers
   
   

  
  
problem number

  

  

  

  

settlers num  carts
   

cplex
clp
lpsolve

   

cplex
clp
lpsolve

   
   
   
plan length

plan length

   
   
   

   
   
   

   
   
   
   

  
 

 
 

  
  
problem number

  

  

 

  
  
problem number

m prime
  

  

  

rovers numeric
   

cplex
clp
lpsolve

   

cplex
clp
lpsolve

  
plan length

  
plan length

  

  

  

  

  

  

  

 

 
 

  

  
problem number

  

  

  

 

 

 

 

  
  
problem number

  

  

  

  

figure    lengths of plans produced by limited lp rpg using different lp solvers

   

ficoles  coles  fox   long

domain
market trader
hydro power
pathways metric
sugar
settlers
settlers numeric carts
mprime
rovers numeric
total

cplex
  
  
  
 
  
  
  
  
   

clp
  
  
 
  
  
  
  
  
   

lpsolve
  
  
 
 
  
 
  
  
   

table    coverage of limited lp rpg with different lp solvers

the results of these tests are shown in figure    and table    beginning with the market
trader domain  it is quite clear that cplex is faster than clp in this domain  lpsolve 
in turn  substantially out performs cplex on many problems  by two orders of magnitude 
this speed  though  comes at a cost in terms of robustness  cplex solves all    problems 
but lpsolve solves only     lpsolve also demonstrates strong performance in the hydro
power domain  while clp falls between lpsolve and cplex 
the pathways metric domain illustrates the robustness of cplex to extension beyond
a basic producerconsumer model encoding  this domain contains actions with numeric
preconditions that must be true  but are not affected by the action  as described in section      encoding this requires an integer variable for each such precondition  this domain
also contains goals referring to multiple numeric variables  e g 
        available cycdp    available c myc max       
as can be seen  in this domain  cplex is the only lp solver which allows lp rpg
to solve anything but the smallest problems  beyond problem    clp is unable to solve
the lp to reach the goals from the initial state  using lpsolve  solvable lps are reported
unsolvable  so whilst the planner can make an attempt at search  erroneous state pruning
happening as a result of lps being falsely declared unsolvable renders it unable to find
solutions 
in the sugar domain  no solver leads to the planner performing particularly well  with no
more than    problems being solved  this contrasts with earlier results  shown in table   
where a different configuration of lp rpg  using cplex and richer lps  was able to solve
   problems  however  as noted at the start of this section  we have had to compromise the
performance of the planner when using cplex to allow a reasonable comparison with clp
and lpsolve  using the richer lp models here  cplex solves    problems but lpsolve and
clp both perform far worse  falsely claiming lps are unsolvable  or returning suboptimal
solutions  to the detriment of the performance of the planner  
in the two different encodings of the settlers domain  where carts are represented either explicitly or using the carts at function  we can see how cplex is more robust
under alternative domain encodings  in the original ipc domain model  lpsolve performs
particularly well  while clp is not markedly different to cplex  using the numeric carts
   

fia hybrid lp rpg heuristic for planning

domain

lpsolve
clp
cplex
build  ms solve  ms build  ms solve  ms build  ms solve  ms 
market trader
   
     
   
     
    
    
hydro power
   
   
   
   
   
   
pathways metric
   
   
   
   
   
   
sugar
   
   
   
    
    
    
settlers
   
    
   
     
     
    
settlers num  carts
   
    
   
    
    
    
mprime
   
   
   
    
    
   
rovers numeric
   
   
   
   
    
   
average
   
    
   
    
    
    
table    time spent in lp building and solving using different lp solvers

encoding  however  cplex is considerably better than the other solvers  being robust to
the change in the lp structure arising from this alternative domain encoding 
in the mprime and rovers domain  clp and lpsolve are consistently faster than
cplex 
summarising  we can see that if limited lp rpg can solve a problem using clp or
lpsolve  it is usually faster than using cplex  but cplex offers better coverage and its
greater robustness grants access to the richer encodings that allow better performance 
in order to investigate in more detail why the planner takes much longer to solve problems using cplex we devised some further tests  table   shows the average time spent 
per state  building and solving the lp for each lp solver   the building time is the time
required to integrate constraints inserted by lp rpg into the internal model used by the
particular solver   note that these results are not necessarily directly comparable  the planners do not necessarily take the same paths through the state space  so might be evaluating
different states  the paths are  nonetheless  often similar and the times can be taken as
strongly indicative  to give the fairest possible comparison  we include in this table only
data for problems that were solved by all three configurations  so the data is presented for
each planner across exactly the same problem set  a startling observation is that cplex
typically spends an order of magnitude longer building lps than the other two solvers  in
settlers two orders of magnitude   so  while it often solves the lps more quickly  the total time spent handling the lps is generally greater  indeed  for cplex  the time spent
solving the lps is  in   out of   domains  dominated by time spent building them  this
indicates that  although cplex should be a good choice to use as the lp solver  it solves
the lps efficiently   in practice other solvers are faster due to the substantial overheads of
building the large number of lps necessary  at least one per state   these results suggest
that a robust lp solver with low lp building overheads could dramatically improve the
performance of lp rpg 
when considering solution quality we note that the only way in which the lp solvers can
direct search on to a different trajectory is if the solvers return different optimal solutions
to the same lp at some point during search  recall that no planner configuration seeks
to directly minimise plan length  the objective function in the lps uses a weighted sum
   

ficoles  coles  fox   long

domain
market trader
hydro power
pathways metric
sugar
settlers
settlers numeric carts
mprime
rovers numeric
total

 l
  
  
  
  
  
  
  
  
   

   l
  
  
  
 
  
  
  
  
   

 l
  
  
  
  
  
  
  
  
   

 l
  
  
  
  
  
  
  
  
   

  l
  
  
  
  
  
  
  
  
   

hmax
  
  
  
  
  
  
  
  
   

hadd
  
  
  
  
  
  
  
  
   

table    coverage when varying lp objective function weighting schemes

of the number of actions  figure   shows that a similar picture arises in plan length as in
time performance  lpsolve often leads the planner to shorter solutions than cplex  also
helping to explain why it is often faster  since it explores the search tree to a smaller depth  
in particular this happens in the rovers numeric and sugar domains as well as the settlers
variants  across other domains there is little variation in the quality of solutions produced 
    lp objective function weighting schemes
when using the lp during the solution extraction phase  one open issue is what weighting
scheme to use in the objective function  since the lp ignores the propositional preconditions
of actions  using the simple objective of minimising the sum of action variables  layerweighting scheme with k      gives the lp solver freedom to select equally between actions
appearing in any layers of the rpg  regardless of how many actions subsequently need to
be added to the relaxed plan to support them  as discussed earlier  using a layer weighting
scheme with k      or using a weighting scheme based on estimated costs of achieving
the preconditions of the actions  should encourage the lp solutions to favour actions that
are cheaper to apply  the hmax or hadd heuristics are both candidates on which to base
estimates for the cost of application of actions  of course  there will be cases in which
the choice of an earlier action  or of one that has lower costs to achieve its preconditions 
will be a flawed choice  worse than the choice that would have been made using the k    
layer weighting scheme  that is simply the nature of heuristics 
in this section  we evaluate a range of lp action variable layer weighting schemes and
also action cost estimate schemes  we use k                   for the layer weighting schemes 
we consider setting action variable weights to   plus the cost of meeting their propositional
preconditions with hmax or hadd for the action cost estimate schemes  the other parameters
of the planners are set to sensible defaults  action variables in the first action layer are
integral  and propositional goals and landmarks are included in the goal checking lp 
results showing coverage of each of these configurations are shown in table    our first
observation is that any other weighting scheme is better than using a layer weighting with
k     for action variables  this is particularly noticeable in the settlers domain  where
there are several situations in which the earlier actions should be preferred  for example 
   

fia hybrid lp rpg heuristic for planning

weight   vs weight      time
sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

weight      nodes 

   

weight      time  s  

weight   vs weight      nodes expanded

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

  

 

   

  
   

    
    

 
   

 

  
weight    time  s  

   

    

 

  

weight   vs weight  
sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

weight   nodes 

weight    time  s  

   

    

weight   vs weight    nodes expanded

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

   
weight    nodes 

  

 

   

  
   

    
    

 
   

 

  
weight    time  s  

   

    

 

  

   
weight    nodes 

weight   vs weight    time
sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

weight   nodes 

   

weight    time  s  

weight   vs weight    nodes expanded

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

    

  

 

   

  
   

    
    

 
   

 

  
weight    time  s  

   

    

 

  

weight   vs weight     time

weight     time  s  

   

    

weight   vs weight     nodes expanded

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

weight    nodes 

    

   
weight    nodes 

  

 

   

  
   

    
    

 
   

 

  
weight    time  s  

   

    

 

  

   
weight    nodes 

    

figure    layer weighting schemes in the lp  k     versus k   x for different values of x 

   

ficoles  coles  fox   long

weight   vs h max  nodes expanded

weight   vs h max  time

h max  time  s  

   

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

h max  nodes 

    

  

 

   

  
   

    
    

 
   

 
  
weight    time  s  

   

 

    

  

   
weight   nodes 

weight   vs h add  nodes expanded

weight   vs h add  time

h add  time  s  

   

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

h add  nodes 

    

    

  

 

   

  
   

    
    

 
   

 
  
weight    time  s  

   

 

    

  

   
weight    nodes 

    

figure    action weighting schemes in lp objective function  layer weighting with k    
versus action cost estimate based schemes using hadd or hmax  
supposing a cart is at location a  and a unit of a resource  initially available at both a
and b  needs to be moved to location c  there are two two action solutions to the lp 
annotating each action with the layer at which it appears  these are 
 load cart at a      unload cart at c     
 load cart at b      unload cart at c     
using the layer weighting scheme with k     these two solutions are indistinguishable
 each has cost     however  if the latter is selected  two actions are needed as support in the
relaxed plan  moving the cart to b and moving the cart to c  any of the alternative action
variable weighting schemes set the weight of loading the cart at b to be higher than that
of loading it at a  leading to a preference for the first solution  which is a better outcome
for search guidance  a similar phenomenon occurs in the rovers domain  where favouring
earlier actions increases the preference for recharging the rovers at or close to their current
locations  in this domain this leads to better avoidance of dead ends  since postponing
recharging actions risks the possibility that the rover will have too little charge left to get
back to a recharging location 
the data for the layer weighting schemes show that the results peak at k      a reasonable trade off between minimising the number of actions chosen in the lp solution and
favouring earlier actions  the overall performance of hmax is the same  losing performance
   

fia hybrid lp rpg heuristic for planning

time taken
nodes expanded
plan length
k 
           hmax hadd            hmax hadd            hmax hadd
k   x x x x x
x x x x x x
x   x x x x
x
k      
x x x  
 
x x x  
x
x x x x
x
k  
    x
x
    x
x
x x x
x
k  
x x
x
  x
 
  x
x
k     
x
x
x
 
x
x
hmax
 
x
 

table    results of two tailed wilcoxon signed rank tests comparing different lp weighting schemes  x indicates significance             colour indicates the better performer
 faster  fewer nodes expanded or shorter plans  

in sugar and rovers but gaining in settlers and hydro power  using hadd gives further
gains in settlers  leading to very slightly better coverage than the layer weighting scheme
with k      the difference in performance between k     and hadd weighting schemes is
domain dependent  hadd only increases the weight of an action above   if it has propositional preconditions which are not true in the state being evaluated  in the settlers domain 
where it gives particularly good performance  this is a sound approach  neatly capturing
the example case discussed earlier in this section  loading or unloading from a cart at its
current location is preferable to doing so at later locations  in domains where earlier actions
are preferable even if their propositional preconditions require little or no support  hadd fails
to give an adequate bias  and the layer weighting scheme with higher k performs better 
for instance  in the sugar domain  the best coverage is obtained by using k       and the
k     scheme also performs more strongly than hadd here 
examining the performance of the configurations in more detail  comparing the time
taken to find solution plans and the number of nodes evaluated  scatterplots comparing
each of the configurations tested to layer weighting with k     are shown in figures  
and    for other layer weighting schemes and action cost estimate based schemes  as lprpg usually exhausts the time limit of    minutes before the memory limit  the time taken
scatterplots are closely similar to the coverage table  coverage is directly reflected in the
number of points on the far right of the graphs  indicating where a layer weighting scheme
with k      the x axis  was unable to find a solution within    minutes  but lp rpg using
a different weighting scheme was able to solve the problem  there are more such points for
k     and hadd than the other schemes  with the points for hadd appearing predominantly
in the settlers domain and those for k     spread across the domains 
since it is not always clear from the scatterplots whether one configuration is better than
the other or whether the differences are significant  we have used the two tailed wilcoxon
signed rank test to compare each pair of tested configurations in terms of time taken and
nodes evaluated  and also plan length   all tests are performed with p         the results
of these tests are summarised in table    a number of interesting observations can be made 
   the wilcoxon signed rank test is a non parametric statistical test used to compare a set of matched
samples  such as the pairs of results for two different planners on the same sequence of problems  to
assess whether their population mean ranks differ  i e  it is a paired difference test   it is useful when
the absolute values are not necessarily comparable and when the samples are drawn from a completely

   

ficoles  coles  fox   long
 l vs    l  plan length
     

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    
 l  plan length 

    
   l  plan length 

 l vs  l  plan length
     

   

   

  

  

 

 
 

  

   

    

     

 

  

   

 l  plan length 

 l vs  l  plan length
     

  l  plan length 

 l  plan length 

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

   

  

   

  

 

 
 

  

   

    

     

 

  

 l  plan length 

    

     

    

     

 l vs hadd  plan length
     

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

hadd

    

   
 l  plan length 

   l vs hmax
     

hmax  plan length 

     

 l vs   l  plan length
     

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

    

 l  plan length 

   

  

   

  

 

 
 

  

   

    

     

l

 

  

   
l

     plan length 

   plan length 

figure    effect on quality of varying action weighting schemes in lp objective function

 while k     gives better coverage than k     or k       it does not take a significantly
different amount of time nor explore a significantly different number of nodes 
 there is  however  a significant difference in time taken and nodes  in favour of k     
when compared to all the other configurations tested 
 the action cost based weighting schemes are slower than the layer weighting schemes
for k     furthermore  when compared to k      they expand more nodes 
unknown distribution  the two tailed version makes no assumption about which of the two contenders
has the better performance  i e  the lower mean rank  

   

fia hybrid lp rpg heuristic for planning

 the key strength of the action cost based weighting schemes lies in the quality of the
solutions found  as a general trend  layer weighting schemes gain coverage but lose
quality as k increases  the action cost based schemes generate significantly shorter
plans than any other configuration tested  including layer weighting with k     
the increase in plan length for plans found using the layer weighting scheme with increasing k can be seen in figure    the reason for this increase is quite clear  the basic
objective function for the lp is to minimise number of actions  however  when weightings
are added to the actions according to the rpg layer in which they appear  longer plans
that make use of earlier actions can become more attractive  the increase in plan length is 
however  largely restricted to two domains  the first  and worst affected  is pathways metric  where the increase in k causes a preference for reactions that are less efficient  in terms
of the number of actions needed  but can be performed using actions from the earliest layers
of the planning graph  the second is settlers with numeric carts  where the increase in k
leads again to solutions with a preference for resource production and refinement approaches
that are less efficient  but comprise actions that appear earlier in the planning graphs  as is
perhaps to be expected  when these two domains are excluded from the statistical analysis 
there is no significant difference in plan length between k     and the action cost based
schemes 
of the weighting schemes tested the best results are obtained using k     and hadd  
there is no single best option  the former is faster  expands fewer nodes  and gives a good
balance in coverage across the domains used  the latter is less prone to variations in plan
quality in some domains  and its strong performance in the settlers domain leads to two
more problems being solved overall within the test domains 
    the use of integer constraints
in section       we discussed the fact that the lp is a relaxation of a mip  and proposed that
in certain situations it may be beneficial to not relax some action variables  making them
integral  in this section  we will explore this hypothesis  considering five configurations of
lp rpg 
   minimal integers  only actions with assignment effects  as in section      are integers 
   first layer  as above  but variables for actions appearing in rpg layer    the potentially helpful actions  are also integral 
   propositional goal achievers  as above  but the variables for any actions that achieve
propositional goals or landmarks are also integral 
   numeric goal achievers  as above  but additionally  the variables for actions affecting
numeric state variables that appear in numeric goals are also integral 
   all  all  action  variables are integral 
the coverage of each of these configurations is shown in tables   and    for layerweighting using k       and k      respectively  for the k     results  the coverage is fairly
insensitive to the configuration used  there is a peak in coverage with the numeric goal
   

ficoles  coles  fox   long

domain

minimal
first layer prop  goal num  goal
all
 assignments  actions
achievers achievers variables
market trader
  
  
  
  
  
hydro power
  
  
  
  
  
pathways metric
  
  
  
  
  
settlers
  
  
  
  
  
settlers num  carts
  
  
  
  
  
mprime
  
  
  
  
  
rovers numeric
  
  
  
  
  
sugar
  
 
 
 
  
total
   
   
   
   
   
table    coverage varying which action variables are integer in the mip  layer weighting
with k       

domain

minimal
first layer prop  goal num  goal
all
 assignments  actions
achievers achievers variables
market trader
  
  
  
  
  
hydro power
  
  
  
  
  
pathways metric
  
  
  
  
  
settlers
  
  
  
  
  
settlers num  carts
  
  
  
  
  
mprime
  
  
  
  
  
rovers numeric
  
  
  
  
  
sugar
  
  
  
  
  
total
   
   
   
   
   
table    coverage varying which action variables are integer in the mip  layer weighting
with k     

achievers configuration  though the difference between that and the worst configuration
is only   problems  using k        there is a marked increase in coverage when all action
variables are integral  this is due to the sugar domain  compared to the preceding configuration in the table  an additional    problems are solved  in the same domain  when
using k      though  even better coverage is obtained when using only the minimal number
of integral action variables  thus  it appears the need for integral variables in this domain
is reduced once the objective preference for earlier actions is sufficiently high  disregarding
the sugar domain  the results for k       in other domains are very close  as in the k    
configuration 
it is interesting that  even with many integers in the mip  the performance of lp rpg
in terms of coverage is not very different from using no integers at all  considering the
computational complexity of solving a mip  rather than solving an lp  the time spent
calculating the heuristic should be considerably higher  rendering an all integers approach
   

fia hybrid lp rpg heuristic for planning

minimal ints vs first layer actions  time

   

minimal ints vs first layer actions  nodes expanded

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

first layer actions  nodes 

first layer actions  time  s  

    

  

 

   

  

   

    
    

 
   

 
  
minimal ints  time  s  

   

    

 

  

minimal ints vs  first layer actions    prop goal achievers  time

   

    

minimal ints vs  first layer actions    prop goal achievers  nodes expanded

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

prop goal achievers  nodes 

prop goal achievers  time  s  

    

   
minimal ints  nodes 

  

 

   

  

   

    
    

 
   

 
  
minimal ints  time  s  

   

    

 

minimal ints vs  first layer actions   prop goal achievers  numeric goal achievers  time

   

   
minimal ints  nodes 

    

minimal ints vs  first layer actions   prop goal achievers  numeric goal achievers  nodes exp  and

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

num  goal achievers  nodes 

num  goal achievers  time  s  

    

  

  

 

   

  

   

    
    

 
   

 
  
minimal ints  time  s  

   

    

 

  

minimal ints vs all ints  time

all ints  time  s  

   

    

minimal ints vs all ints  nodes expanded

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

all ints  nodes 

    

   
minimal ints  nodes 

  

 

   

  
   

    
    

 
   

 
  
minimal ints  time  s  

   

    

 

  

   
minimal ints  nodes 

figure     changing which variables are integer  k     

   

    

ficoles  coles  fox   long

time taken
first prop  num 
layer goal goal
acts ach  ach 
minimal ints
x
x
x
first layer acts
 
x
prop  goal ach 
x
num  goal ach 

nodes expanded
plan length
all first prop  num  all first prop  num  all
in  layer goal goal in  layer goal goal ints acts ach  ach  ts acts ach  ach  ts
x
 
 
 
 
 
 
 
 
x
 
x x
 
 
 
x
x x
 
 
x
 
 

table    results of two tailed wilcoxon signed rank tests comparing different sets of
variables as integers in the mip  using a layer weighting of k         x indicates significance
 p          colour indicates the better performer  faster  fewer nodes expanded or shorter
plans  

time taken
first prop  num 
layer goal goal
acts ach  ach 
minimal ints
x
x
x
first layer acts
x
x
prop  goal ach 
x
num  goal ach 

nodes expanded
plan length
all first prop  num  all first prop  num  all
in  layer goal goal in  layer goal goal ints acts ach  ach  ts acts ach  ach  ts
x
 
 
 
 
 
 
 
 
x
 
x x
 
 
 
x
 
x
 
 
x
 
 

table     results of two tailed wilcoxon signed rank tests comparing different sets of
variables as integers in the mip  using a layer weighting of k       x indicates significance
 p          colour indicates the better performer  faster  fewer nodes expanded or shorter
plans  

impractical  investigating this further  scatterplots of the time taken and the number of
nodes expanded are shown in figure      the results shown are for k      but the overall
picture is the same if k       is used   each configuration is compared to the minimal
integers configuration  the general trend  as one moves down the left column  increasing
the proportion of action variables that are integral   is for more points to drift above the line
y   x  i e  the time taken to solve problems increases  at the same time  though  moving
down the right hand column there is a decrease in the number of nodes evaluated  thus 
increasing the proportion of integral action variables seems to improve search guidance 
though not sufficiently to allow a pay off in terms of the time taken to solve problems 
to confirm significance of these observations  we applied two tailed wilcoxon signed
rank tests  the results of which are in tables   and     for k       and k      respectively 
in both cases  there is a consistent increase in the time taken to solve problems as the
proportion of integral action variables is increased  this difference is significant in every
case other than when using k       and comparing first layer actions to propositional
goal achievers  there is no significant difference in plan length between any pair of
configurations  the results for nodes are somewhat less clear  it does not appear that
using minimal integers leads to expansion of a significantly different number of nodes 
   

fia hybrid lp rpg heuristic for planning

domain

minimal ints
first layer actions
all ints
build  ms solve  ms build  ms solve  ms build  ms solve  ms 
market trader    
    
    
    
    
    
    
hydro power     
   
   
   
   
    
   
pathways metric     
    
     
    
     
    
      
sugar     
    
    
    
    
    
     
settlers    
     
    
     
     
     
     
settlers num  carts           
     
     
     
     
     
mprime     
    
   
    
   
    
   
rovers numeric     
    
   
    
   
    
   
average
     
    
     
     
     
     
table     time spent in building and solving lp varying which variables are integer in the
mip  numbers shown with domains indicate how many problem instances were solved and
used in computing the reported average

when compared to any other configuration  in part this is due to a limitation of the
tests  only pairwise solved problems can be included  so the difference in coverage is not
reflected in the data analysed in the test  considering the other configurations  though 
all integers evaluates fewer nodes than first layer actions and propositional goal
achievers  regardless of which weight is used  but cannot be shown to expand fewer nodes
than numeric goal achievers  the configuration that offered better coverage in table   
although we have seen that increasing the number of integer variables makes the planner
slower  it is somewhat surprising that the amount by which the planner is made slower is
not greater than it is  in theory we would expect that making all variables integer would
dramatically decrease the performance of the planner  however  it appears this is not so 
to investigate this further we consider how long was spent building and solving the lp in
each state for each configuration  table    gives an indication of why we are seeing this
surprising result  in   out of   domains the solving time of the lp is less than the building
time  for the all ints configuration   showing again that a key bottleneck in using the lp
solver is  in fact  in building the lp  building time is  of course  not likely to vary between
configurations  the only variation is due to different states being expanded  and compared
to this the solving time is small  in two of the three remaining domains  pathways and
sugar  we see some increase in the cost of solving the lp when first layer actions are made
integral  and a much larger increase when all actions are made integral  this is the pattern
that we expected  in the final domain  market trader  the main increase occurs when
first layer action variables are integral  the structure of this domain means that integral
first layer actions often causes the variables in other layers to also become integral  solving
times does  however  remain within an order of magnitude of building time  so the overhead
is not particularly large in this domain compared to the previous two 
   

ficoles  coles  fox   long

    including the numeric goal conjunct
in section     we discussed the possibility of including the entire numeric goal conjunct for
the problem in the lp  as well as theoretically increasing the ability to detect dead ends 
by insisting all goals are attainable at the same time  rather than individually  this also
allows arbitrary lnf goals to be used  as found in domains such as pathways  in this
section  we will investigate the impact of this extension  in particular  we explore whether
the use of a numeric goal checking lp including the numeric goal conjunct improves or
worsens performance  to ensure that there is no goal checking lp in the case where the
numeric goal conjunction is not being used  for these tests  in both configurations  we
disable the inclusion of propositional goals and landmarks in the lp  to gain insights into
how the impact of a numeric goal checking lp is affected by the choice of action variable
layer weighting schemes  we consider two  k       and k     
domain

market trader
hydro power
pathways metric
sugar
settlers
settlers num  carts
mprime
rovers numeric
total  excl  pathways 
total

with
num goal
 k     
  
  
  
  
  
  
  
  
   
   

without
num  goal
 k     
  
  
 
  
  
  
  
  
   
   

with
num  goal
 k       
  
  
  
 
  
  
  
  
   
   

without
num  goal
 k       
  
  
 
  
  
  
  
  
   
   

table     coverage varying whether the numeric goal conjunct is included in the lp  with 
or not  without 

the coverage results for running lp rpg with and without the numeric goal conjunct
are shown in table     looking at the results excluding the pathways domain  which
can only be solved if the numeric goal conjunct is included  since the goals are expressed
as an arbitrary lnf   one can make two immediate observations  the use of the numeric
goal conjunct improves performance with actions weighted as k      solving   additional
problems  but its use worsens performance with actions weighted as k        solving  
fewer problems  this difference in impact is an interesting consequence of the relationship
between the rpg structure and the lp 
 in the no goal conjunct case  if a goal appears at fact layer l  the lp used to meet
this goal is lp  l   the lp containing the actions up to action layer l  algorithm   
line      this favours the earlier actions in the rpg  precluding any actions after
layer l from being used 
 in the numeric goal conjunct case  the lp is extended until the layer l  at which 
first  all goals appear  and second  an lp constrained to meet all the goals  using the
actions up to layer l    can be satisfied  for individual goals  this point may be later
   

fia hybrid lp rpg heuristic for planning

with vs without numeric goal conjunct  nodes expanded

with vs without numeric goal conjunct  time
sugar
rovers numeric
m prime
settlers num  carts
settlers
hydro power
market trader

   

with numeric goal conjunct  nodes 

with numeric goal conjunct  time  s  

    

  

 

   

    

     
     

    

   
 
  
   
without numeric goal conjunct  time  s  

sugar
rovers numeric
m prime
settlers num  carts
settlers
hydro power
market trader

    

   

  

 

    

 

sugar
rovers numeric
m prime
settlers num  carts
settlers
hydro power
market trader

  

 

   

    

     
     

    

   
 
  
   
without numeric goal conjunct  time  s  

sugar
rovers numeric
m prime
settlers num  carts
settlers
hydro power
market trader

    
with numeric goal conjunct  nodes 

with numeric goal conjunct  time  s  

   

    

with vs without numeric goal conjunct  weight     nodes expanded

with vs without numeric goal conjunct  weight     time
    

  
   
without numeric goal conjunct  nodes 

   

  

 

    

 

  
   
without numeric goal conjunct  nodes 

    

figure     including the numeric goals in the lp
than the layer l at which they first appeared  in which case actions that are in l  but
not l can be chosen to meet these goals  whereas in the previous case they could not 
it is this difference in the actions that are available to support a given goal that makes
the action variable weighting scheme important  the use of k     rather than k      
means that while actions added between layer l and layer l   inclusive  are available to meet
a goal that first appeared at layer l  the objective function leads to a preference to use
earlier actions 
the coverage results in these experiments do not give an unequivocal picture of the
impact of this feature on performance  figure    shows scatterplots of the time taken to
solve problems  and the number of nodes evaluated  when the numeric goal conjunct is
used or not  for each of k       and k      there appears to be a general trend for the
inclusion of the numeric goal conjunct to reduce the number of nodes evaluated  in the case
of weighting by k      a two tailed wilcoxon signed rank test confirms that the use of
a numeric goal conjunct reduces the number of nodes evaluated  p          using k      
suggests a similar trend  but the results are not significant 
with both weighting schemes  the use of the numeric goal conjunct introduces a small
but statistically significant time overhead  this is due to the additional time taken to
evaluate each state  the rpg must be extended to the point at which all goals can be
satisfied together  rather than individually  whether this pays off  i e  whether the reduction
in nodes evaluated is sufficient to offset this  depends on the domain and appears to be
   

ficoles  coles  fox   long

correlated with the extent to which the numeric goals interact  at one extreme  in the
rovers domain  all the goals are propositional and there is no difference in performance 
on the other hand  in the sugar domain  and the settlers domain when numeric carts are
used  it is beneficial  both of these domains concern production and reprocessing of raw
materials  in one form or another  leading to interaction between goals  for instance  a unit
of a resource may be sufficient to satisfy goals individually  but additional production may
be required to support them both  in these cases use of the numeric goal conjunct improves
time performance  inclusion of the numeric goal conjunct has no significant impact on the
length of plans produced  according to a two tailed wilcoxon signed rank test  
to summarise the results in this section  the main benefit from the use of the numeric
goal conjunct is to be able to extend the expressivity of the planner to domains where
the goals are written using arbitrary lnf  the success of the approach in other domains
varies  in terms of coverage  whether or not it is better to use the numeric goal conjunct on
the evaluation domains depends on the weighting scheme  when using the layer weighting
scheme  k      the inclusion of the numeric goal conjunct is slightly beneficial and lp rpg
is therefore set to use this configuration by default 
    including propositions in the lp
in the previous section  we observed that the inclusion of the numeric goal conjunct in a
goal checking lp has variable impact on performance  depending on the weighting scheme
used  perhaps a more interesting use of a goal checking lp is when using the lp to meet
propositional goals  and landmarks  as described in section      to evaluate this technique
we consider four configurations 
   no propositions  using a goal checking lp containing only the numeric goal conjunct 
   propositional goals  as in previous case  but also including the propositional goals in
the goal checking lp 
   landmarks  as in previous case  but also including landmarks 
   all propositions  as in previous case  but also constrained to ensure that if an action
variable is non zero  actions are added to meet its propositional preconditions  as
described in section      
these form a spectrum  from the case in which no information about propositions is
included in the lp at all  to the last in which the goal checking lp must not only meet the
propositional goals  but also the preconditions of the actions chosen to do so  we consider
two layer weighting schemes  k       and k       and action variables for actions in the
first action layer are integral 
the coverage results for k       are shown in table    and those for k     in table    
as can be seen  in both cases  a general pattern emerges  coverage improves up to and
including the configuration in which landmarks are included in the lp  but then declines
in the final all propositions configuration  including all propositions appears  however  to
remain better than including no propositions at all 
scatterplots illustrating the time taken and the number of nodes evaluated when solving
problems are shown in figures    and     for weights k       and k      respectively  
   

fia hybrid lp rpg heuristic for planning

no props vs propositional goals  time

   

no props vs propositional goals  nodes expanded
     

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

  

 

sugar
rovers numeric
m prime
settlers numeric carts
settlers
pathways metric
hydro power
market trader

    

propositional goals  nodes 

propositional goals  time  s  

    

   

  

   

    
    

 
   

 
  
no props  time  s  

   

    

 

  

no props vs landmarks  time

landmarks  time  s  

   

    

     

no props vs landmarks  nodes expanded
     

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers numeric carts
settlers
pathways metric
hydro power
market trader

    
landmarks  nodes 

    

   
no props  nodes 

  

 

   

  
   

    
    

 
   

 
  
no props  time  s  

   

    

 

  

no props vs all props  time

all props  time  s  

   

    

     

no props vs all props  nodes expanded
     

sugar
rovers num 
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers numeric carts
settlers
pathways metric
hydro power
market trader

    
all props  nodes 

    

   
no props  nodes 

  

 

   

  
   

    
    

 
   

 
  
no props  time  s  

   

    

 

  

   
no props  nodes 

    

figure     varying which propositions are included in the lp  k       

   

     

ficoles  coles  fox   long

no props vs propositional goals  time

prop goals  time  s  

   

no props vs propositional goals  nodes expanded

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

propositional goals  nodes 

    

  

 

   

  

   

    
    

 
   

 
  
no props  time  s  

   

    

 

  

no props vs landmarks  time

landmarks  time  s  

   

    

no props vs landmarks  nodes expanded

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

   

landmarks

    

   
no props  nodes 

  

 
  
   

    
    

 
   

 
  
no props  time  s  

   

    

 

  

no props vs all props  time

all props  time  s  

   

    

no props vs all props  nodes expanded

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

sugar
rovers numeric
m prime
settlers num  carts
settlers
pathways metric
hydro power
market trader

    

all props  nodes 

    

   
no props

  

 

   

  
   

    
    

 
   

 
  
no props  time  s  

   

    

 

  

   
no props  nodes 

figure     varying which propositions are included in the lp  k     

   

    

fia hybrid lp rpg heuristic for planning

domain
market trader
hydro power
pathways metric
sugar
settlers
settlers numeric
mprime
rovers numeric
total

no props
  
  
  
 
  
  
  
  
   

prop goals
  
  
  
 
  
  
  
 
   

landmarks
  
  
  
 
  
  
  
  
   

all props
  
  
  
  
  
  
  
  
   

table     coverage when varying which propositions are included in the lp  using k       

domain
market trader
hydro power
pathways metric
sugar
settlers
settlers numeric
mprime
rovers numeric
total

no props
  
  
  
  
  
  
  
  
   

prop goals
  
  
  
  
  
  
  
  
   

landmarks
  
  
  
  
  
  
  
  
   

all props
  
  
  
  
  
  
  
  
   

table     coverage when varying which propositions are included in the lp  using k     

each scatterplot compares one of the configurations    in the enumerated list above to
configuration    no propositions   comparing the propositional goals and landmarks
configurations suggests that the inclusion of landmarks leads to more problems being
solved more quickly compared to the no propositions configuration  this is particularly
evident in the settlers  settlers numeric carts  mprime and rovers numeric domains 
whether using landmarks offer gains over propositional goals alone depends on the structure of the problems  in the two settlers variants  including propositional goals  such as
 connected by rail p  p   or  has ironworks p    necessitates the use of specific actions   build rail p  p   or  build ironworks p    respectively   since these actions
consume numeric resources  including propositional goals is sufficient to cause the lp to
introduce the production actions necessary to support the resource consumption  in rovers 
the goals are to have communicated data generated from rock samples  soil analyses and
images  the actions adding these facts consume a number of units of energy  so there
is some benefit from including propositional goals in the lp  however  these actions also
have propositional preconditions  for instance  for a rover to communicate rock data  it
must have taken a sample of the rock  these propositional preconditions will be included
as landmarks in the lp  thereby forcing the production of not only the energy needed to
   

ficoles  coles  fox   long

communicate the requisite data  but also the energy to have acquired it  this leads to the
inclusion of additional recharge actions or  if no suitable actions are available  better deadend detection  a similar situation arises in mprime  the actions that achieve the goal facts
do not consume any resources  but the actions that achieve the  landmark  preconditions
of these actions do  so including the landmarks improves informedness of the heuristic 
two tailed wilcoxon signed rank tests  shown in tables    and     confirm
 p         that with either k       or k     the use of propositional goals improves over
no propositions  and the use of landmarks improves over propositional goals  indeed 
with p        we have a total ordering on time performance for k     
no propositions  propositional goals  landmarks
the results show similar behaviour for numbers of nodes evaluated  the right hand
columns of figures    and     although not all of the differences are statistically significant 
wilcoxon tests also show that with neither k       or k     is the difference between
propositional goals and landmarks statistically significant  note  however  that using
landmarks allows more problems to be solved  the comparisons for no propositions 
propositional goals and landmarks  with weight k        are significant  the latter two both
improving upon the former  with weight k     the same tests are inconclusive  although
using landmarks allows    additional problems to be solved  recall that the comparisons
are restricted to the problems solved by both variants in the comparison  

no props
prop goals
landmarks

time taken
prop landall
goals marks props
x
x
 
x
x
x

nodes expanded
prop landall
goals marks props
x
x
x
 
x
x

plan length
prop landall
goals marks props
 
 
x
 
x
x

table     results of two tailed wilcoxon signed rank tests comparing inclusion of different propositions in the lp  using layer weighting k         x indicates significance
 p          colour indicates the better performer  faster  fewer nodes expanded or shorter
plans  

no props
prop goals
landmarks

time taken
prop landall
goals marks props
x
x
 
x
x
x

nodes expanded
prop landall
goals marks props
x
 
x
 
x
x

plan length
prop landall
goals marks props
 
 
x
 
x
x

table     results of two tailed wilcoxon signed rank tests comparing inclusion of different propositions in the lp  using layer weighting k       x indicates significance  p         
colour indicates the better performer  faster  fewer nodes expanded or shorter plans  

   

fia hybrid lp rpg heuristic for planning

domain

no props
landmarks
all props
build  ms solve  ms build  ms solve  ms build  ms solve  ms 
market trader     
    
    
    
    
    
    
hydro power     
   
   
   
   
    
   
pathways metric     
    
     
    
     
    
     
sugar     
    
    
    
    
    
    
settlers    
     
     
     
     
     
      
settlers num  carts           
     
     
     
     
      
mprime     
    
   
    
   
    
    
rovers numeric     
    
   
    
   
    
    
average
     
     
     
     
     
     
table     time spent building and solving the lp  varying which propositions are included 
numbers shown with domains indicate how many problem instances were solved and used
in computing the reported average

the results shown at the bottom of figures    and    indicate that the all propositions
configuration has less consistent performance 
we can show  however   p         that with k       or k      the all propositions
configuration takes longer to solve problems than both the propositional goals configuration
and the landmarks configuration  it is perhaps surprising that it is feasible to consider
including propositions in the lp in this manner  given the results reported by van den briel
et al          the key difference is that we are disregarding delete effects  so if a fact is
needed as a precondition it need only be added at most once  in the work reported by van
den briel et al   however  in cases where a fact is required as a precondition but also deleted 
the delete effect must be balanced by an equivalent number of add effects  less one if the
fact was true initially  
looking at the number of nodes evaluated when using the all propositions configuration
we find an important result  as shown in the bottom right of figures    and     whichever
weight is used  all propositions tends to expand fewer nodes  furthermore  all propositions expands fewer nodes than all three of the other configurations and is the overall
best configuration in terms of nodes expanded  significant result  p          unfortunately 
the overhead associated with each node is higher and this results in poorer coverage and
time performance  this result indicates that numericpropositional separation used in the
lp rpg heuristic is a sensible trade off  with the use of the rpg to meet propositional
preconditions sacrificing some performance in terms of nodes expanded in exchange for a
reduction in time taken to solve problems 
table    shows the increase in costs associated with solving lps including propositions 
these results are taken only from problems solved by all three configurations  although it
remains the case that the configurations will not expand exactly the same states in solving
the same problems  in three domains  hydro power  mprime and rovers numeric 
the cost of building lps dominates the cost of solving them  so there are no significant
decreases in performance in these domains  of course  the cost of building lps increases
as more propositions are included since more variables are required  in the settlers domain
   

ficoles  coles  fox   long

there is an order of magnitude increase in the time spent solving lps  indicating that
including all propositions in the lps makes them more difficult to solve  sometimes the
more informed search guidance gleaned from this information allows the planner to find
solutions expanding far fewer nodes 
adding landmarks to the lp appears to make solving the lp slightly faster  this is
partly a side effect of the landmarks configuration needing to solve fewer lps per state 
since it uses one lp to meet all the goals instead of one lp per goal  the all propositions
configuration often only needs to solve one lp in the solution extraction phase  however 
the size and difficulty of this lp means that any benefits of solving fewer lps  in terms of
time taken  are negated 
tables    and    show the results of statistical tests comparing the lengths of the plans
found by the various configurations  the only significant results are that  regardless of
the weight used  all propositions finds shorter plans than the other configurations  if all
propositions are included in the lp  then typically only a single lp call is made during
solution extraction  simultaneously achieving all goals and action preconditions  in the
other configurations  first  an lp call is made for the goals  and then  for each action a
added to support a propositional precondition of an action implied by the solution to this
lp  the numeric preconditions of a are met by another lp call  thus  there can be several
lp calls rather than just one  by fragmenting the production of a relaxed plan in this
way  the efficacy of the relaxed plan is eroded  as an example  plan lengths are improved
in the two variants of settlers  here  the production of some resources requires building
infrastructure  a sawmill is required to refine timber into wood  and so on  if two units of
wood are to be made  then if the lp has no knowledge of propositional preconditions  there
is no difference in the lp between building two units of wood at location a  or one unit
at location b and one at location c  the need to build one or two sawmills  depending
on which option is chosen  will only be discovered when actions are then chosen to meet
the propositional preconditions of the actions required by the solution to the lp  if the lp
includes all propositions  then in cases such as this  there is a difference between building
one sawmill and two  so the lp will prefer the single sawmill solution  ultimately leading to
better search guidance  thus  all propositions produces plans that are significantly shorter 
in domains where the fact that propositions are outside the lp disguises the true costs of
the action choices in the solution to an lp 
    propositional resource analysis
at the end of section      we identified conditions under which it is possible to turn propositions that model resources into an equivalent numeric representation  for our purposes 
with lp rpg  this would allow the resource  within the heuristic  to be managed by the lp
rather than the rpg  to this end  we use three domains containing propositional stacks that
represent resources  and evaluate how this encoding affects the performance of lp rpg  and
other numeric planners  the five planners evaluated are metricff  lpgtd  lp rpg  using
the analysis that translates propositional resource stacks into an equivalent numeric representation as described in long   fox         lp rpg with this analysis disabled  and
lp rpg ff  the three domains we use are 
   

fia hybrid lp rpg heuristic for planning

domain

metricff

lpgtd

lp rpg ff

settlers prop  timber
settlers prop  carts
mprime prop 
total

 
 
  
  

 
 
  
  

 
  
  
  

lp rpg
no anal 
anal 
 
  
  
  
  
  
  
  

table     coverage with and without propositional resource analysis

 a variant of the ipc  settlers domain  where the amount of timber at a given location
 or in a given vehicle  is represented by a stack of propositions  in the range n  to
n   
 a variant of the settlers numeric carts encoding  where the number of carts at a
given location is represented by a stack of propositions 
 the mprime domain from ipc   which in its encoding represents fuel level as a stack
of propositions 
in the first two of these  the propositional encoding enforces a limit of    on the amount
of timber  respectively  number of carts  at a given location  this is a necessary limitation forced by action grounding  in a numeric representation  decreasing one resource
and increasing another can be done by a single ground action  with appropriate numeric
effects and conditions  the ground action does not need to stipulate the precise levels of
the resource before and after the operation  so long as the limits on the resource levels are
respected  in the propositional case  however  one ground action is needed for each pair of
discrete levels of the two resources  with parameters to the action stipulating the pre  and
post values of each resource  the level of    was chosen to avoid placing overly restrictive
bounds on the resource levels  while creating a manageable number of ground actions  this
issue of grounding also accounts for the limited choice of domains  a propositional stack
can only be used to represent resources that can take a modest range of discrete values  in
the rovers domain  for example  the set of reachable energy levels for each rover is in the
range          in the market trader domain  the amount of money that could be held at
a given time is a real value with one decimal place  this is a consequence of the choice of
problem files   greater than or equal to zero 
results for these domains are shown in table     comparing  first  lp rpg without
analysis to lp rpg with analysis  we can see that encoding the resources in the lp as
numbers grants a consistent improvement in performance  figure    shows that the time
taken to find solutions is similarly improved  perhaps most strikingly in the second settlers
variant  with propositional cart levels  
while metricff and lpgtd perform well in the mprime domain  in the two settlers
encodings  lp rpg with the resource analysis performs markedly better  with the other
planners solving only a handful of problems  this contrasts with their earlier results  shown
in table    where lpgtd in particular performed well on the settlers domain  it is an
interesting contrast to see that here  the propositional timber variant  derived from the
ipc   model on which lpgtd performs well  leads to considerably worse performance 
   

ficoles  coles  fox   long

settlers propositional stack timber
     

    

settlers propositional stack carts
     

lprpg analysis
lprpg ff
ff
lpg
lprpg no analysis

    

time  s 

   

time  s 

   

lprpg analysis
lprpg ff
ff
lpg
lprpg no analysis

  

  

 

 

   

   
 

  

  
problem number

  

  

 

  

  
problem number

  

  

m prime propositional resource stack
     

    

lprpg analysis
lprpg ff
ff
lpg
lprpg no analysis

time  s 

   

  

 

   

    
 

  

  
problem number

  

  

  

figure     using propositional resource analysis

this supports the role of resource analysis in allowing lp rpg to be robust to which of
a number of almost equivalent domain encodings is used  with mixed propositional and
numeric encodings of resource levels  we observed no significant change in the length of
plans produced by lp rpg with or without propositional resource analysis 

   conclusions and future work
most modern planning systems are ineffective at reasoning with numbers  however  managing complex numeric interactions is an important part of driving ai planning towards
future real world application  in this paper we have shown that  by using a linear program
to model numeric resource flows  the ability of planners to reason with domains involving
such complex numeric interactions can be greatly improved 
the key contribution is the separation of the heuristic search control into a relaxed
planning graph  based on delete relaxation  and a linear program that allows exact reasoning
about numeric constraints and relaxes action ordering 
we have explored how different configurations of the heuristic  in which we put more
or less information in to the lp  impact on the performance of the planner as a whole  an
exploration of different lp solvers reveals that they are more or less efficient at handling
various combinations of constraints  we found that  while lpsolve and clp  in conjunction
with the limited version of lp rpg published in       coles et al          can solve simple
   

fia hybrid lp rpg heuristic for planning

problems quickly  cplex coupled with the full power of the extended lprpg is needed
to handle the most complex test instances 
our work so far has focussed on developing search control methods that can perform
well on numeric planning problems with a particular character  the producer consumer
behaviour we define in sectionsect prodcondefinition  although we believe that this is a
common behaviour  in practice  numeric domains exhibit a range of other behaviours  there
are several possible ways to exploit the lp rpg approach in these domains  one is to use the
approach on those actions that conform to the constraints of producer consumer behaviour 
while pushing other numeric behaviour into a metric rpg in the same way that we currently
handle propositional goals and preconditions in a separate rpg  this would yield the
benefits of potentially better estimates for reachable ranges and action use costs for those
parts of the domain that we can express as producer consumer behaviour  more challenging
is to consider how other behaviours can be relaxed into producer consumer behaviour to
obtain useful heuristic information  for example  actions with production effects that vary
could be encoded as a family of producers of increasing capability  discretising the range of
production options and introducing them into the reachability analysis as their increased
production capabilities become available  in general  the relaxations must make reachability
at least as permissive as actual reachability  that is  an action must be applicable in the
relaxed reachability analysis at least as early as the action is actually reachable  and the
relaxed plan extraction should minimise the estimated cost to goal effectively  this is more
difficult because the relaxed plan is not optimal   within these constraints  we believe that
the use of lp approximations can provide a tool for tackling a wider range of behaviours
than those we explore in this paper 
a further exciting challenge for our future work is to integrate lp rpg with a method
for optimising plans according to a given objective function  the recent      and     
planning competitions highlighted the importance of optimising planning with their emphasis on solution quality  this development is  however  non trivial  the challenges lie in
the integration of cost optimisation between the lp and the rpg as well as in deciding
how to use a heuristic that trades off goal distance for quality during search  a first step in
this direction was accomplished by radzi in her phd thesis  radzi         but the advances
in numeric planning described in this paper open up many possibilities for extending that
initial work 

references
bell  k  r  w   coles  a  j   coles  a  i   fox  m     long  d          the role of ai planning
as a decision support tool in power substation management  artificial intelligence
communications               
benton  j   do  m  b     kambhampati  s          over subscription planning with numeric goals  in proceedings of the   th international joint conference on artificial
intelligence  ijcai   pp           
benton  j   van den briel  m     kambhampati  s          a hybrid linear programming
and relaxed plan heuristic for partial satisfaction planning problems  in proceedings
of the   th international conference on planning and scheduling  icaps  
   

ficoles  coles  fox   long

blackmore  l   ono  m     williams  b          chance constrained optimal path planning
with obstacles  robotics  ieee transactions on                    
blum  a     furst  m          fast planning through planning graph analysis  in proceedings
of the   th international joint conference on artificial intelligence  ijcai      pp 
         
bonet  b     geffner  h          heuristic search planner      artificial intelligence magazine               
coles  a   coles  a   fox  m     long  d          colin  planning with continuous linear
numeric change  journal of artificial intelligence research          
coles  a  i   fox  m   long  d     smith  a  j          a hybrid relaxed planning graph lp
heuristic for numeric planning domains  in proceedings of the eighteenth international
conference on automated planning and scheduling  icaps     
coles  a  j     coles  a  i          lprpg p  relaxed plan heuristics for planning with
preferences  in proceedings of the   st international conference on automated planning and scheduling  icaps  
coles  a  j   coles  a  i   fox  m     long  d          extending the use of inference
in temporal planning as forwards search  in proceedings of the   th international
conference on automated planning and scheduling  icaps     
do  m  b     kambhampati  s          sapa  a domain independent heuristic metric temporal planner  in proceedings of the european conference on planning  ecp    
do  m  b     kambhampati  s          sapa  a multi objective metric temporal planner 
journal of artificial intelligence research             
domshlak  c   katz  m     lefler  s          when abstractions met landmarks  in proceedings of the   th international conference on planning and scheduling  icaps  
edelkamp  s          taming numbers and durations in the model checking integrated
planning system  journal of artificial intelligence research             
fox  m     long  d          pddl     an extension of pddl for expressing temporal
planning domains  journal of artificial intelligence research            
gerevini  a   saetti  a     serina  i          an approach to temporal planning and scheduling in domains with predictable exogenous events  journal of artificial intelligence
research             
gerevini  a   saetti  a     serina  i          an approach to efficient planning with numerical
fluents and multi criteria plan quality  artificial intelligence                    
gregory  p     rendl  a          a constraint model for the settlers planning domain  in
aylett  r   ed    proceedings of the uk planning special interest group  plansig  
herriot watt university 
gregory  p   cresswell  s   long  d     porteous  j          on the extraction of disjunctive landmarks from planning problems via symmetry reduction   in proceedings of
conference on symmetry in search  symcon        pp       
   

fia hybrid lp rpg heuristic for planning

helmert  m     domshlak  c          landmarks  critical paths and abstractions  whats
the difference anyway   in proceedings of the   th international conference on planning and scheduling  icaps   pp         
hoffmann  j          the metric ff planning system  translating ignoring delete lists
to numeric state variables  journal of artificial intelligence research             
hoffmann  j     edelkamp  s          the deterministic part of ipc    an overview  journal
of artificial intelligence research             
hoffmann  j   porteous  j     sebastia  l          ordered landmarks in planning  journal
of artificial intelligence research             
hoffmann  j     nebel  b          the ff planning system  fast plan generation through
heuristic search  journal of artificial intelligence research             
karpas  e     domshlak  c          cost optimal planning with landmarks  in proceedings
of the   st international joint conference on artificial intelligence  ijcai      pp 
         
kautz  h     walser  j          integer optimization models of ai planning problems 
knowledge engineering review                 
koehler  j          planning under resource constraints  in proceedings of the european
conference on artificial intelligence  ecai     pp         
laborie  p          algorithms for propagating resource constraints in ai planning and
scheduling  existing approaches and new results  artificial intelligence              
    
li  h  x     williams  b  c          generative planning for hybrid systems based on flow
tubes  in proceedings of the   th international conference on automated planning
and scheduling  icaps  pp         
long  d     fox  m          automatic synthesis and use of generic types in planning  in
proceedings of artificial intelligence planning and scheduling  aips   pp         
long  d     fox  m       a   exploiting a graphplan framework in temporal planning 
in proceedings of the international conference on artificial intelligence planning and
scheduling  icaps  
long  d     fox  m       b   the  rd international planning competition  results and
analysis  journal of artificial intelligence research          
ono  m     williams  b  c          an efficient motion planning algorithm for stochastic
dynamic systems with constraints on probability of failure  in proceedings of the   rd
aaai conference on artificial intelligence  aaai  pp           
porteous  j   sebastia  l     hoffmann  j          on the extraction  ordering  and usage
of landmarks in planning  in proceedings of the  th european conference on planning
 ecp     
radzi  n  h  m          multi objective planning using linear programming  ph d  thesis 
university of strathclyde 
   

ficoles  coles  fox   long

richter  s   helmert  m     westphahl  m          landmarks revisited  in proceedings of
the   rd aaai conference on artificial intelligence  aaai      pp         
richter  s     westphal  m          the lama planner  guiding cost based anytime
planning with landmarks   journal of artificial intelligence research             
shin  j  a     davis  e          processes and continuous change in a sat based planner 
journal of artificial intelligence research              
van den briel  m   benton  j   kambhampati  s     vossen  t          an lp based heuristic
for optimal planning  in principles and practice of constraint programming  cp
       pp         
van den briel  m  h  l   vossen  t     kambhampati  s          loosely coupled formulations for automated planning  an integer programming perspective  journal of
artificial intelligence research             
vossen  t   ball  m  o   lotem  a     nau  d  s          on the use of integer programming
models in ai planning  in proceedings of the   th international joint conference on
artificial intelligence  ijcai      pp         
wolfman  s     weld  d          combining linear programming and satisfiability solving
for resource planning  knowledge engineering review         
zhu  l     givan  r          landmark extraction via planning graph propagation  in proceedings of the doctoral consortium at the   th international conference on planning
and scheduling  icaps dc      pp         

   

fi