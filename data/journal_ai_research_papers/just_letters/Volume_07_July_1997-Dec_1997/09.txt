journal of artificial intelligence research                 

submitted         published        

when gravity fails  local search topology

jeremy frank

frank tiziano arc nasa gov

caelum research corp 
nasa ames research center
mail stop n     
moffett field  ca           

peter cheeseman

cheesem ptolemy arc nasa gov

riacs
nasa ames research center
mail stop n     
moffett field  ca           

john stutz

stutz ptolemy arc nasa gov

nasa ames research center
mail stop n     
moffett field  ca           

abstract

local search algorithms for combinatorial search problems frequently encounter a sequence of states in which it is impossible to improve the value of the objective function 
moves through these regions  called plateau moves  dominate the time spent in local search 
we analyze and characterize plateaus for three different classes of randomly generated
boolean satisfiability problems  we identify several interesting features of plateaus that
impact the performance of local search algorithms  we show that local minima tend to be
small but occasionally may be very large  we also show that local minima can be escaped
without unsatisfying a large number of clauses  but that systematically searching for an
escape route may be computationally expensive if the local minimum is large  we show
that plateaus with exits  called benches  tend to be much larger than minima  and that
some benches have very few exit states which local search can use to escape  we show that
the solutions  i e   global minima  of randomly generated problem instances form clusters 
which behave similarly to local minima  we revisit several enhancements of local search algorithms and explain their performance in light of our results  finally we discuss strategies
for creating the next generation of local search algorithms 

   introduction
local search algorithms have been heavily studied as an alternative to complete search
for np  hard problems  a typical local search algorithm  such as gradient descent or
greedy search  employs an objective function to rank states  and picks a  neighboring 
state maximizing the improvement to the objective function  a compelling  if inexact 
analogy is that of dropping a marble on a smooth surface and observing it roll downhill into
a local valley  the typical greedy objective function acts like gravity  pulling the current
state downhill  this procedure can result in the algorithm becoming trapped in a local
minimum  local search algorithms tend to find solutions to satisfiable decision problems
more quickly than complete search algorithms  however  these algorithms may terminate

c      ai access foundation and morgan kaufmann publishers  all rights reserved 

fifrank  cheeseman    stutz

procedure gsat  maxflips  maxtries 

   is the problem instance to be solved
  a is the current variable assignment
for i   to maxtries
a   n  bit string selected uniformly at random
for j     to maxflips
if solved problem a   

return a
else

possflips   neighbors of a minimizing the number of unsatisfied clauses
a   one element of possips selected uniformly at random

end else
end for
end for
return fail
end

figure    gsat algorithm sketch
either without finding a solution when one exists or guaranteeing that a problem instance
does not have a solution 
gsat is a local search procedure for the boolean satisfiability problems  selman 
levesque    mitchell        that has proven to be effective at quickly finding solutions
to satisfiable problem instances  a sketch of gsat appears in figure    in the figure  
refers to the problem instance gsat is to solve  gsat s search space is the space of all
complete assignments of values to variables  the gsat algorithm is typically given a fixed
number of tries  denoted in the figure as maxtries  and a fixed number of moves per try
 denoted maxflips  to solve a problem instance  during each move  gsat examines all
states reachable by changing the value of a single variable  and selects moves that minimize
the number of unsatisfied clauses  gsat typically encounters a sequence of states where
the best move available at each state leaves the number of unsatisfied clauses unchanged 
these moves are referred to as plateau moves or sideways moves  studied in  gent   walsh 
    a  and  hampson   kibler         plateau moves dominate the time gsat spends doing search  gent   walsh      a   it is believed that all combinatorial search problems with
discrete objective functions have plateaus that cause plateau moves during local search  but
it is unlikely that search problems with real valued objective functions have plateaus  when
gsat encounters a plateau  it randomly searches until it either runs out of ips or finds a
neighboring state with fewer unsatisfied clauses  thereby exiting the plateau  returning to
the marble analogy  there is no gravity on the plateaus  and hence the marble simply rolls at
random until it finds an exit or runs out of momentum  numerous variants of gsat have
been developed to avoid random plateau search and improve gsat performance  gent  
walsh      b  selman   kautz        gent   walsh        
the nature of plateau behavior of local search algorithms is not well understood  some
researchers suggest that algorithms like gsat become trapped in local minima  i e   parts
   

fiwhen gravity fails  local search topology

of the search space from which there is no escape to a better part of the search space  if this
is true  local minima detection and avoidance is the most important problem in local search
algorithm development  other researchers have suggested that local search could become
trapped in  at  regions of the search space that have exits to better states  which we call
benches  this may happen because benches are large  or because they contain few exits and
random plateau search has a small probability of finding an exit  rather than designing
algorithms and testing them on problem classes  we undertook an empirical examination of
the nature of plateaus for a variety of   sat problems 
this paper presents several surprising discoveries concerning the topological structures
leading to plateau behavior and their impact on local search  we define plateaus as a feature
of the search space and break plateaus into two classes  local minima and benches  plateaus
are defined as any maximally connected region of the local search space over which the
objective function is constant  local minima are plateaus surrounded by regions of the
search space where the objective function takes on values exceeding that of the plateau 
with the result that purely greedy local search cannot escape once finding a state on the
local minimum  benches are defined as plateaus with exits to regions of the search space
with lower values of the objective function  our results show that local minima are more
common than benches when the number of unsatisfied clauses is close to    but local minima
also occur frequently at higher numbers of unsatisfied clauses  most local minima tend to be
small  but their size exhibits high variability  often the largest local minima exceeds       
states in a problem instance containing     variables  also surprising was the behavior
of solutions  solutions are grouped together into global minima of highly variable size 
our results also show that benches tended to be much larger than local minima  most
benches have a large number of exits  but a small fraction have very few exits  with the
result that local search can spend a large amount of time trying to escape them  plateau
characteristics are dependent on many features of a problem instance  we found differences in
plateau characteristics based on the ratio of clauses to variables  solvability of the problem
instances  and problem classes  the results on plateau characteristics allowed us to reinterpret the success of many modifications to local search  including history lists  gent  
walsh      b   random walk  kautz   selman        and tabu search  glover        
the paper is organized as follows  in section   we present some definitions used throughout the rest of the paper  next in sections   and   we present an empirical analysis of
properties of plateaus for several problem spaces  in section   we present an analysis of
previous results in light of our findings  we then suggest how to apply our work to the
creation of new local search algorithms in section    and finally in section   we conclude
and discuss ideas for future work 

   definitions
in this section we will define some terms used throughout the paper  we restrict our discussion to the boolean satisfiability problems in conjunctive normal form with three distinct
literals per clause  abbreviated   sat  but many of the concepts presented here translate
to other discrete combinatorial search problems  we first present informal definitions  and
provide more formal definitions at the end of the section 
   

fifrank  cheeseman    stutz

a way of visualizing the local search space for   sat is by mapping each full variable
assignment to a node of an n dimensional hypercube  where n is the number of variables
in the problem instance  if two assignments differ by one variable assignment they are
adjacent nodes in the hypercube  each problem instance i defines a function on nodes of
the hypercube  mapping the node to the number of unsatisfied clauses of the instance under
the assignment of values corresponding to the node  we refer to the number of unsatisfied
clauses under an assignment as the level of the assignment  a plateau is a maximal connected
region of the assignment space where all states have the same level  and the level of the
plateau is the level of the states in the plateau  even a single state can be a plateau  if all of
its neighbors are of a different level than the state itself  we define the border of a plateau
to be the set of nodes in the hypercube that are neighbors of some state on the plateau but
have a different level than the plateau  a plateau is a minimum if all states on the border
have a higher level than the plateau  if a plateau is not a minimum  then there is some
state on the border with a lower level than the states on the plateau  states on the plateau
that are adjacent to these lower level states are called exits  plateaus with exits are called
benches  some benches consist entirely of exits  a local search algorithm may then explore
only one state of such a bench before moving off of it  we call these benches contours  for
  sat  a plateau is a global minimum if it is of level    but unsatisfiable problem instances
can have global minima of levels higher than   
plateau
no exits

exits

minima

bench

lowest level

global minima

higher level

local minima

all states exits

contour

figure    a taxonomy of plateaus
in summary  a plateau is a part of the space that is  at  from the perspective of the
objective function  all the states neighboring the plateau are of a different level from the
plateau  if all the neighboring states are at a higher level  the plateau is a local or global
minimum  otherwise it is a bench  if every state on the plateau is a neighbor of a state of
lower level  the bench is a contour  figure   shows a taxonomy of different types of plateaus 
a further illustration of these definitions using a simple problem instance is presented in
appendix a 
we realize that there are different ways of defining topological structures of local search
spaces  our definition of plateaus includes structures which do not lead to plateau behavior 
local search will not exhibit plateau behavior as it passes a contour  for example  these
definitions show that the observed plateau behavior of local search can be caused by a variety
of structures in the local search topology  in retrospect  it is clear that a definition of benches
that specifically excludes contours would better serve to characterize the plateau behavior
of greedy algorithms  we caution the reader that our results for benches are contingent
upon our current definition of benches  and that there is at least one reasonable alternate
   

fiwhen gravity fails  local search topology

definition that is expected to give somewhat different results  this will be discussed further
in section   
we end this section by providing more formal definitions of these ideas  throughout
the following definitions  let h be an n dimensional hypercube representing the possible
assignments of a   sat problem instance i   two vertices of the hypercube h    h  are
neighbors  i e   have an edge between them  if they correspond to assignments differing in
exactly   variable 

definition      level  let i   h   z   be a function mapping assignments to integers
such that i  h    z if and only if the assignment corresponding to h results in z unsatisfied
clauses in problem instance i   then z is defined as the level of the assignment 
definition      plateau  let p be a connected subgraph of h and let z   z   be a constant  then p is a plateau if p is a maximal connected subgraph of h such that i  p    z
for all p   p   further  z is defined to be the level of the plateau 
definition      border  let p be a plateau in a hypercube h   let n  p  be the set of

neighboring vertices of vertex p in the hypercube  let v  p   be a function that returns the
vertex set of a graph p   define b  p       p p n  p     v  p    i e   the set b  p   contains b
if b is a neighbor of a vertex p   p and b is not in p itself  then b  p   is the border of
the plateau 

definition      minimum  local minimum  global minimum  let p be a plateau
in a hypercube h   then p is a minimum if all vertices in b  p   have higher level than the
level of p   also  p is a local minimum if p is a minimum and there is another minimum

q such that the level of q is smaller than the level of p   if p is a minimum that is not a
local minimum then p is a global minimum 

definition      bench  exit  contour  let p be a plateau of a hypercube h   then p
is a bench if p is not a minimum  and hence there exists b   b  p   such that the level
of b is smaller than the level of p   also  p is an exit from the bench if p   p and p is a
neighbor of b   b  p   such that the level of b is smaller than the level of p   finally  p is a
contour if every state of p is an exit from p  

   probabilistically painting plateaus

armed with the definitions from the previous section we examined the landscape of plateaus
for randomly generated   sat problem instances  we generated problem instances for
which the ratio of the number of clauses c to the number of variables n ranged from
    to     according to the uniform  sat problem generation model  selman et al        
crawford   auton         the algorithm for generating these instances is presented in
appendix b  problems in this region straddle the  phase transition  in satisfiability  for
which the satisfiability of randomly generated problems exhibits a rapid transition with
respect to the ratio of clauses to variables  and for which complete search and gsat require
the longest time on the average to find solutions  cheeseman  kanefsky    taylor       
crawford   auton        clark  frank  gent  macintyre  tomov    walsh         problem
   

fifrank  cheeseman    stutz

instances with nc       are referred to as  under constrained  since they lie below the
observed transition in satisfiability  while problem instances with nc       are called  overconstrained   we guaranteed that each problem instance used in this set of experiments
was satisfiable by finding a solution using a complete search algorithm 
local search seems to have the most diculty when the level of the assignment becomes
close to    consequently  we decided to analyze plateaus at these levels  it is quite dicult to
randomly sample plateaus of a fixed level for a problem instance  the probability of randomly
generating an assignment with one unsatisfied clause  for instance  is very small for problem
instances with     variables  we used gsat to find the plateaus analyzed in this paper 
this biases our investigation of plateaus to those found by one local search method  but
hopefully provides a first picture of the plateau structure of local search spaces  due to the
clumsiness of language  we do not remind the reader throughout the text that our findings
are dependent on our plateau sampling methodology  further  because gsat employs
random starting points  the bias of our results depends only on the gradient following
procedure  to sample plateaus we first used gsat to find a state of a pre determined level 
that is  we generated an initial state and ran a single try of gsat until it encountered a
state with the specified number of unsatisfied clauses  we then used breadth first search to
find all of the states on the plateau found by gsat  naturally breadth first search records
each state found so that redundant states are not double counted  we then recorded the
size of the plateau  i e   the number of states on the plateau   and the number of exits the
plateau contained 

    characterizing plateaus
we first analyzed the relative proportions of benches and minima of satisfiable problem
instances for plateaus whose level was close to    we generated problem instances of    
variables and         clauses in increments of    clauses  for each problem size we generated
     problem instances and guaranteed each instance had a solution using a complete search
algorithm  using the procedure described above  for each problem instance generated we
found one plateau of each level from   to   and measured the proportion of these plateaus
that are local minima and benches  this analysis does not provide any idea of the number
of benches or local minima in these problem instances  note that all plateaus of level   are
global minima of satisfiable problem instances 
figure   shows the proportion of plateaus that are local minima graphed against the
number of clauses in the problem instances  as described above  we used gsat to find
plateaus and breadth first search to determine whether the plateaus were local minima
or benches  here we see that the proportion of plateaus that are minima grows with the
number of clauses in the problem instance for plateaus of levels      hence there are more
local minima of identical levels in over constrained problems than in under constrained
problems  the rate of growth diminishes as the plateau level decreases  until it is roughly
at for plateaus of level    about     of plateaus of level   are minima for     variable
problem instances over all numbers of clauses investigated 
figures   shows the same data  except in this case we have graphed against the level
of the plateau  as the level grows the proportion of local minima declines for problem
instances of all numbers of clauses  however  plateaus at level   may still be local minima
   

fiwhen gravity fails  local search topology

 
   

proportion of plateaus which are minima

   
   
   
   
   
   
level   plateaus
level   plateaus
level   plateaus
level   plateaus
level   plateaus

   
   
 
   

   

   

   

   
   
number of clauses

   

   

   

figure    proportion of plateaus that are local minima vs  number of clauses for randomly generated     variable problem instances

 

proportion of plateaus which are minima

   

    clauses
    clauses
    clauses
    clauses
    clauses
    clauses
    clauses
    clauses
    clauses

   
   
   
   
   
   
   
   
 
 

 

 

 

 

 

plateau level

figure    proportion of plateaus that are local minima vs  plateau level for     randomly
generated variable problem instances with varying numbers of clauses

   

fifrank  cheeseman    stutz

even for problems with     variables and     clauses  hence local minima are a fact of life
even for under constrained problems  and become more likely for over constrained problems 
finally  we note that between plateaus of level   and   there is a reordering of the proportion
of local minima  for example  problems with     clauses have the lowest proportion of local
minima of level    but the highest proportion of local minima of level    we do not have an
explanation for this result 
 
   

proportion of plateaus which are minima

   
   
   
   
   

level   plateaus
level   plateaus
level   plateaus
level   plateaus
level   plateaus
level   plateaus

   
   
   
 
  

  

  

   
problem size

   

   

   

figure    proportion of plateaus that are local minima vs  plateau level for variable
sized randomly generated problem instances with c n    
we also analyzed how the relative proportions of benches to minima changed as problems
grew larger  we found one plateau each of levels     for each of      problem instances
with    to     variables in increments of     with nc        figure   shows the proportion
of plateaus of levels     that are local minima for nc       graphed against the problem
size  we see that  for each level  the proportion of minima grows with the problem size 
which bodes ill for the performance of local search on larger problem instances  we see
that the proportion of local minima of higher level decreases less rapidly for these larger
problems  we conjecture that  for larger problems  the proportion of local minima decreases
significantly for plateaus of levels higher than    but we cannot predict the exact behavior
from the data at hand 
the cost of detecting local minima is proportional to the size of the local minima  so
understanding the size distribution of local minima is important  the cost of escaping
benches is dependent on the size of the bench and the proportion of the states on a bench
that are exits  and so understanding these properties is also important  in the next two
sections we analyze these characteristics of benches and minima  to do so  we generated
statistics from the plateaus we found in the experiment used to generate figure    for
instance      of the plateaus of level   for problem instances of     clauses are local
   

fiwhen gravity fails  local search topology

minima  so we had     local minima and     benches to analyze the characteristics of
plateaus  in all cases we had over     data points available for analysis 

    minima characteristics
   
    variables      clauses

   

number of minima

   

   

   

  

 
 

   

   

   

   

   
   
size of minima

   

   

   

    

figure    histogram of sizes of level   minima for randomly generated problem instances
of     variables      clauses  note that some minima exceeded      states 
in this section we analyze the size distribution of local minima  figure   shows the
distribution of the size of the level   minima for problem instances with     variables and
    clauses  the median minima size is     yet the tail shows that some minima are larger
than      states  in fact     of the     minima are larger than      states and some had
as many as        states  we examined the distribution of minima sizes for levels other
than   and found similar results  the main differences are in the lengths of the tails of the
histograms  a consequence of this discovery is that escaping local minima by explicit local
minima detection is normally very easy  but occasionally can be very expensive  figure  
shows the distribution of sizes of minima that are smaller than     states  we see here that
there are fewer minima of size     than of size       a detailed analysis reveals that there
are three minima of size    and fifteen minima of size   
due to the long tails of the distribution of minima size  the median provides a more
stable summary statistic than the mean  we therefore examined the median size of local
minima of levels     for different numbers of clauses to determine how the size of local
minima varies  figure   shows the median size of local minima plotted against the number
of clauses in the problem instances  the most striking feature of these results is that most
minima tend to be quite small  this suggests it is possible to devise local search algorithms
to detect local minima using exhaustive search and then propel themselves into a more
fruitful part of the search space  while the distribution shown in figure   indicates that
   

fifrank  cheeseman    stutz

   
    variables      clauses
  
  

number of minima

  
  
  
  
  
  
  
 
 

 

  

  

  

  

  

  

  

           
size of minima

  

  

  

  

  

  

      

figure    histogram of sizes of level   minima smaller than     states for randomly
generated problem instances of     variables      clauses

   
level   minima
level   minima
level   minima
level   minima
level   minima
level   minima

   

median minima size

   

  

  

  

 
   

   

   

   

   
   
number of clauses

   

   

   

figure    median size of minima vs  problem size for     variable randomly generated
problem instances with varying numbers of clauses

   

fiwhen gravity fails  local search topology

some local minima can be very large  explicit detection of minima below a fixed size  the
median  for instance  may be a successful addition to local search  the second feature of
note is that the median size of level   minima  i e   solutions  follows the same pattern
as local minima  but that level   minima tend to be smaller than local minima  the last
feature of note is that the median size of local minima decreases for minima of level     as
the number of clauses in the problem instances increases  the median size of local minima
of level   and   increases for problems with         clauses  one possible explanation for
this is that the sampled problem instances were guaranteed to have solutions  which means
that the added clauses must contribute to larger minima and benches at higher levels  if
this is true it is not clear why the minima of levels     do not increase in size  another
possible explanation is the small amount of data for plateaus of levels   and   relative to
the amount available for the other plateau sizes as indicated in figure   
   
level   minima
level   minima
level   minima
level   minima
level   minima

   

median minima size

  

  

  

  

 
  

  

  

   
problem size

   

   

   

figure    median size of minima vs  plateau level for variable sized randomly generated
problem instances with c n    
we also examined the median size of local minima of levels     as the number of variables
in the problem instances increases  figure   shows the median minima size for the various
levels of minima graphed against problem size for problem sizes from    to     variables for
c
n        we observe that  as problem sizes grow large  beyond     variables   the median
size of minima of lower levels appears smaller than that of minima of higher levels  we
also observe that for fixed minima level  there appears to be a problem instance size that
maximizes the median minima size  we do not have an explanation for the large number
of minima of level   for problem instances of    variables 
recall that a global minima for a satisfiable problem instance is a plateau where all
states are solutions  how many global minima are there in satisfiable problem instances 
is there only one  or are the solutions broken into multiple global minima  if there is more
   

fifrank  cheeseman    stutz

than a single global minima  can the size of the global minima tell us anything about how
likely it is that local search will encounter a particular solution  to answer these questions
we used gsat to find      global minima for a single problem instance with     variables
and     clauses  and determined which minima were distinct  we found that     of the
     minima were unique  and that the global minima for this instance ranged in size from
  to      states  furthermore  we found that the vast majority of the minima are small 
with the median size being around     we repeated the experiment for    more problem
instances and found that solutions for these problem instances are typically divided into
separate global minima and that the global minima vary widely in size  due to space
considerations we do not present this data in the paper 
assuming we could detect local minima  how dicult is it for local search to escape
minima in order to explore a new part of the search space  if local search is in a local
minimum it must temporarily move to states of higher level in order to find a more promising
part of the search space  two sources of computational complexity contribute to the cost
of escaping minima  the cost of detecting the minimum  and the cost of finding a path to
a better part of the search space  the size of the minimum is a measure of the detection
cost  we chose the minimum increase in level as a measure of the diculty of escaping local
minima  to understand this idea  consider all sequences of neighboring states out of a
minimum such that the level increases  then decreases  we are interested in the minimum
increase required before the level decreases again  to determine this we generated     
problem instances of    variables and     clauses each  generated an initial state  and then
ran gsat for      ips  this was sucient to reach a local or global minimum    in order
to find the minimum level required to escape  we used breadth first search  we begin
with the states of the local minimum  we then explore a state on the border  queuing all
those states not explored before in increasing order of level  this ensures states of lower
level are explored first  once we encounter a state of lower level than its neighbor  we have
found a path out of the local minimum  the level of the state with a neighbor of lower
level is the minimum level required to escape the local minimum  our results indicate
that local minima can usually be escaped by increasing the level by only    that is  only
unsatisfying one additional clause  however  it is not obvious which border state to use
to escape  breadth first search may expand tens of thousands of states before finding an
escape route  and so this may not always be an effective escape strategy 
in summary  the data presented in figures   to   shows that local minima tend to be
very small much of the time  and therefore may be easily detectable and escaped  local
minima can typically be escaped by unsatisfying only a single additional clause  but it is
still not clear how to escape local minima effectively  further  the size distribution of global
minima behaves much like the size distribution of local minima  instances tend to have
many global minima of highly variable size  and there is evidence that local search is more
likely to encounter small sized local minima and global minima than large ones 

    bench characteristics
   the local minima ranged in level from   to    we did not measure the level required to escape from
benches or global minima 

   

fiwhen gravity fails  local search topology

  
    variables      clauses
  

number of benches

  

  

  

  

  

  

 
 

    

    

    

    

    
    
size of benches

    

    

    

     

figure     histogram of bench sizes of level   for randomly generated problem instances
of     variables      clauses

recall that a bench is a plateau that has exits to other states of lower level  two
important characteristics of benches that impact the performance of local search are the
size of the benches and the number of exits  we first analyzed the distribution of the size of
benches  figure    shows the distribution of bench sizes of level   for problem instances of
    variables and     clauses  again we found long tails  implying that while most benches
are small  some can be very large  the distributions tend to be much atter than those for
minima 
we next analyzed how median bench size varies with the number of clauses in the
problem  the appearance of long tails of the distribution of bench sizes again indicates
that the median is a more stable measure than the mean  figure    shows how the median
size of benches varies with the number of clauses in problems for different levels of benches 
the most interesting feature is the very large median size of the benches when compared
to the size of local minima  benches are typically       times as large as local minima 
depending on the level and number of clauses in the problem instance  problem instances
with more clauses tend to have smaller benches  while for some of the under constrained
instances the median bench size begins growing rapidly with bench level even for the small
range of plateau levels analyzed here 
we also examined how bench size depends on problem size  for small problems  i e        variables  benches tended to be much larger than for problems with more variables  our
explanation for this is that there are so few clauses that they do not adequately distinguish
between assignments when we examine states at low enough levels  problems with    
   

fifrank  cheeseman    stutz

    
level   benches
level   benches
level   benches
level   benches
level   benches

    

median bench size

    

    

    

    

    

 
   

   

   

   

   
   
number of clauses

   

   

   

figure     median size of benches vs  problem size for     variable randomly generated
problem instances
variables have few benches with more than        states  we exclude these benches from
our analysis   
large benches may be dicult to escape if the number of exits is small  or if exits are
clustered together  some benches have very few exits  while others have many exits  we
used the ratio of exits from benches to the bench size as a measure of the diculty of
escaping from benches  we did not investigate whether or not exits from benches are close
together  which may also have an impact on the diculty of escaping benches 
figure    shows the distribution of proportion of exits to bench size for benches of level
  for problems with     variables and     clauses  the distribution of these proportions
indicates that plateaus have highly variable numbers of exits  we note that some benches
are in fact contours  in figure    contours show up as benches whose ratio of exits to bench
size is    we observed that all six of the benches with ratio of exits to bench size at least
     in figure    are in fact contours  figure    shows the distribution of the proportion of
exits for benches of level    there are proportionally more contours     of the    benches in
the rightmost column of the histogram are contours   and the mean ratio of exits to bench
size has increased  the difference between these two plots indicates that benches of lower
levels tend to have fewer exits than benches of higher level  even if we exclude contours
from the measurements 
to further understand how to escape benches of different levels  we next present plots
of the mean proportion of the number of exits to bench size graphed against problem size
   breadth first search stores an enormous number of states  and as such we terminated the program if
the bench size exceeded        states  since we had so few large benches and used the median statistic 
this caused few diculties in the analysis 

   

fiwhen gravity fails  local search topology

  
    variables      clauses  level   benches

number of occurences

  

 

 
 

   

   

   

   
   
   
proportion of exits to bench size

   

   

   

 

figure     exits from level   benches for randomly generated problem instances of    
variable      clauses

  
    variables      clauses  level   benches

  
  
  
  

number of occurences

  
  
  
  
  
  
  
  
  
  
 
 
 

   

   

   

   
   
   
proportion of exits to bench size

   

   

   

 

figure     exits from level   benches for randomly generated problem instances of    
variables      clauses

   

fifrank  cheeseman    stutz

in figure     when taken in consideration with the histograms in figure     we hope this
will create an accurate picture of how benches tend to look 
we see in figure    that the proportion of exits from benches increases with the level of
the benches  for problems with     to     clauses the mean number of exits of benches of
level   increases sharply  indicating that for over constrained solvable problems benches of
level   are less of an obstacle to finding solutions  we should point out that our inclusion
of contours in the definition of benches may artificially inate these proportions  in some
cases considerably 
   
level   benches
level   benches
level   benches
level   benches
level   benches

mean proportion of exits to bench size

   

   

   

   

   

   
   

   

   

   

   
   
number of clauses

   

   

   

figure     mean proportion of exits from benches vs problem size for randomly generated problem instances of     variables
we analyzed benches to determine whether or not there was some relationship between
the number of exits from a bench and its size  but found no such relationship for all clause
sizes and benches of all levels we investigated  this lack of relationship is unfortunate  since
it tells us little about how to escape large benches 
in summary  the data presented in figures    to    shows that benches are occasionally
very large  but there are often many exits from benches  as a result  only occasionally
will local search become trapped on a very large bench from which there is little chance
to escape  we also found that benches of higher level have more exits than benches of
lower level  we showed that contours are common for benches of level   but may also occur
at level    finally  we found no obvious relationship between bench size and the number
of exits  we conclude that local minima are more often a problem for local search than
benches since most benches seem to be easy to escape 
   

fiwhen gravity fails  local search topology

   plateau characteristics across problem classes

in the previous section we analyzed plateaus for satisfiable   sat problem instances from
one problem instance class  there is little reason to suspect that plateaus behave similarly
across problem instance classes  there may also be differences between satisfiable and
unsatisfiable instances of the same class  in recent years numerous algorithm designers
have begun testing algorithms on random problem classes that have pre specified desirable
properties  among these are problem instances that have guaranteed solutions  tsuji  
gelder         and problems that have some structure that is hidden from the algorithm 
a class of  cluster  problems was presented by kask and dechter         these problems
consist of a number of satisfiability problems over independent sets of variables with some
number of clauses connecting the clusters  we repeated our experiments on these problem
distributions to determine if plateaus in these instances exhibit different properties than
the uniform  sat class  and how this might alter the effectiveness of local search  we also
repeated the experiments on unsatisfiable instances of the uniform  sat distribution  due
to space considerations we do not repeat in full the analysis performed above  but discuss
some differences between the characteristics of the classes we investigated 

    unsatisfiable problems
 
satisfiable problems
unsatisfiable problems

proportion of plateaus which are minima

   
   
   
   
   
   
   
   
   
 
 

 

 

 

 

 
 
plateau level

 

 

 

  

figure     proportion of plateaus that are local minima for randomly generated satisfiable and unsatisfiable problems of     variables      clauses
a major drawback to local search is its inability to distinguish satisfiable problem instances from unsatisfiable problems  we analyzed the plateau structure of unsatisfiable
problem instances from the uniform  sat instance distribution to determine whether there
are differences which would allow local search to determine that a problem instance is unsatisfiable  we repeated the previous empirical studies and collected data on the proportion
   

fifrank  cheeseman    stutz

and size of plateaus but limited our investigation to problems with     variables and    
clauses  we first present data on the proportion of plateaus that are local minima for unsatisfiable problem instances of     variables and     clauses  we generated      unsatisfiable
instances using the same problem generation technique used in the previous set of experiments and guaranteed the problem instances were unsatisfiable using a complete search
algorithm  we used gsat to find states of level       then generated the corresponding
plateaus  we contrast this data with the same data for satisfiable problem instances of    
variables and     clauses in figure    
figure    shows that the proportion of plateaus that are local minima is similar for
satisfiable and unsatisfiable problems as the plateau level decreases  except that for plateaus
of levels   to   the proportion is shifted to the right by ome level  a possible interpretation
of this result comes from noting that frequently adding a single randomly generated clause
can turn a random satisfiable instance into an unsatisfiable instance  hence local search
may become trapped at a higher level in local minima for unsatisfiable problems than for
satisfiable problems 
  

  

satisfiable problems
unsatisfiable problems

median minima size

  

  

  

  

  

 
 

 

 

 

 

 

plateau level

figure     median size of local minima for randomly generated satisfiable and unsatisfiable problems of     variables      clauses
next we analyzed the median size of local minima of unsatisfiable problem instances for
minima of levels   to    again we analyzed the data from the plateaus found to generate
figure     since the number of minima is very small for minima of levels       we could
not gather sucient data for analysis in a reasonable amount of time  however  as figure
   shows  local minima for unsatisfiable problems tend to be much smaller than local minima for satisfiable problems  figure    shows the median size of benches for unsatisfiable
problem instances  we found that the median bench size for unsatisfiable instances tended
to be smaller than benches for satisfiable problems  we conjecture that local search may
converge to local minima faster for unsatisfiable problems and that the minima tend to be
   

fiwhen gravity fails  local search topology

at a higher level  since minima and benches are smaller and there are more minima at higher
levels  local search should be able to descend faster on the average and become stuck earlier 
unfortunately  the differences are slight enough that there seems little hope of using these
results to improve the ability of local search to identify unsatisfiable problem instances 
    
satisfiable problems
unsatisfiable problems

median bench size

   

   

   

   

 
 

 

 
plateau level

 

 

figure     median size of benches for randomly generated satisfiable and unsatisfiable
problems of     variables      clauses

    instances with guaranteed solutions

we next present data on problems with guaranteed solutions as described in  tsuji  
gelder         this generator is the hardsolvable  sat generator presented in appendix
b  briey  this generator selects an assignment to be a guaranteed solution  then during
generation rejects both clauses that are not satisfied by the assignment and a set of additional clauses that enforce an even distribution of signs for each variable  as before  we
generated      problem instances  each with     variables and         clauses  for each
problem instance we used gsat to find a state with     unsatisfied clauses  then determined
whether the corresponding plateau was a bench or a local minimum  figure    shows the
proportion of plateaus that are minima graphed against the number of clauses in problem
instances of     variables  the proportion of local minima for these problems is similar but
not identical to the proportions of local minima for the uniform  sat class as shown in
figure    one difference is that local minima appear more prevalent for over constrained
problems from the hardsolvable  sat class than for the uniform  sat class  the second
difference is in the data for plateaus of level    the proportion of minima rises slightly from
    clauses to     clauses  then dips sharply  hence there are more benches of level   in
figure    than in figure    a detailed analysis of the reasons for the differences is beyond
the scope of this paper  but the generation process seems to eliminate clause combinations
   

fifrank  cheeseman    stutz

 
   

proportion of plateaus which are minima

   
   
   
   
   
   
level   plateaus
level   plateaus
level   plateaus
level   plateaus
level   plateaus

   
   
 
   

   

   

   

   
   
number of clauses

   

   

   

figure     proportion of plateaus that are local minima vs  number of clauses for    
variable problem instances with guaranteed solutions
that make for level   local minima at the expense of making more minima of higher levels 
the higher percentages of local minima for over constrained problem instances indicate that
local search may have a harder time solving these problems 
we analyzed the median size of local minima of different levels for the hardsolvable sat class and found results similar to those reported for the uniform  sat class in figure
   the median minima size for most levels of the hardsolvable  sat class are larger than
those of the uniform  sat class for under constrained instances and somewhat smaller
for over constrained instances  we also found that the bench size distribution for the
hardsolvable  sat class matched that of the uniform  sat class  the median bench size
is somewhat smaller for hardsolvable  sat instances than for uniform  sat instances
as the number of clauses in the problem instances grows  we also found that problems
that were guaranteed to have solutions had a higher proportion of exits to bench size than
randomly generated problems  it should not be surprising that this problem class is very
similar to the previously investigated class since the problem generation algorithms are
similar 

    cluster problem instances
we next present an analysis of plateaus for cluster problem instances  the generation
procedure cluster  sat is presented in appendix b  these instances were created by generating    clusters of    variables and       clauses such that no variables are shared between
clusters  the clusters are then linked with    connecting clauses such that each linking
clause contains variables from distinct clusters  the total number of clauses in these instances ranges from     to      as in the earlier experiments  we guaranteed each instance
   

fiwhen gravity fails  local search topology

 
   

proportion of plateaus which are minima

   
   
   
   
   
   
   

level   plateaus
level   plateaus
level   plateaus
level   plateaus
level   plateaus

   
 
   

   

   

   
number of clauses

   

   

   

figure     proportion of plateaus that are local minima vs  number of clauses for    
variable cluster problem instances
had a solution using complete search  for each number of clauses in the clusters  we generated      instances and again used gsat to find plateaus at different levels  we found
these instances took considerably longer to solve than the previous classes  similar to the
results reported in kask and dechter         cpu times are not shown in this paper  
figure    shows the proportion of plateaus that are local minima graphed against the
total number of clauses for cluster problem instances of     variables  the proportion of
plateaus that are local minima are less dependent on the number of clauses in comparison
to figures   and     as a result there tend to be proportionally fewer local minima for overconstrained cluster problem instances in comparison to uniform  sat instances  figure   
shows the median local minima size plotted against the number of clauses in the problem
instances  the local minima for these problem instances are larger than the minima of
uniform  sat instances analyzed by a factor of about       as seen in figure    we were
unable to collect data for level   minima due to the excessive cpu requirements 
figure    shows the median bench sizes plotted against the number of clauses in the
problem instances  when compared to the median bench size of uniform  sat instances
in figure     we see that the median size of benches for cluster problems is dramatically
different  cluster problem instances with fewer clauses per cluster resulted in enormous
benches  in some cases larger than benches for uniform  sat instances by a factor of    
the increase in the size of benches of cluster problem instances over randomly generated
instances is accompanied by a decrease in the proportion of exits to bench size  figure   
shows the mean proportion of exits to bench size versus total number of clauses for cluster
problem instances  in comparison to the same measure for uniform  sat instances  shown
in figure     we see that benches for cluster problems have fewer exits than benches for
uniform  sat instances for all bench sizes from   to    the increase in bench size coupled
   

fifrank  cheeseman    stutz

    
level   minima
level   minima
level   minima
level   minima
level   minima

    

median minima size

    

   

   

   

 
   

   

   

   
number of clauses

   

   

   

figure     median size of local minima vs  total number of clauses for     variable
cluster problem instances

     
level   benches
level   benches
level   benches
level   benches
level   benches

    
    

median bench size

    
    
    
    
    
    
    
 
   

   

   

   
number of clauses

   

   

   

figure     size of benches vs  total number of clauses for     variable cluster problem
instances

   

fiwhen gravity fails  local search topology

with the decrease in exits means that local search is likely to have a much harder time
escaping benches for cluster problems than for the other problem classes  this counters the
good news that there are fewer minima for these problems 
   
level   benches
level   benches
level   benches
level   benches
level   benches

mean proportion of exits to bench size

   

   

   

   

   

   
   

   

   

   
number of clauses

   

   

   

figure     mean proportion of exits to bench size vs  size of benches for     variable
cluster problem instances

    summary

in summary  we see that the behavior of plateaus in unsatisfiable uniform  sat problem
instances differs from the behavior of satisfiable instances from the same class  unsatisfiable instances have proportionally more local minima  smaller minima and smaller benches
than satisfiable instances  problems from the hardsolvable  sat class have more minima
than those from the uniform  sat class  and benches in the hardsolvable  sat class instances have more exits than benches in the uniform  sat instances  as a result we expect
problems in the hardsolvable  sat class to be harder for local search because local search
algorithms will be more frequently trapped in local minima  cluster problem instances
have fewer local minima than uniform  sat instances  but tend to have larger benches
with fewer exits  we expect these problems to be harder because local search will have
more trouble escaping benches 

   previous work

numerous researchers have studied local search techniques for np  hard problems  addressing plateau behavior and local minima and how to escape them  however  the research has
largely centered on analyzing the performance of the algorithms and less on the structure
of the problem  hence  improvements in algorithms are credited to a mechanism without
   

fifrank  cheeseman    stutz

a clear understanding of the properties of the problem that make the mechanism work  in
this section we review some previous analysis of both algorithms and properties of local
search spaces in light of our new discoveries  while this discussion focuses on gsat and
similar local search algorithms for the   sat problem  we discuss the potential impact of
our work on local search for other algorithms in the next section 

    analyzing properties of problem spaces

clark et al         studied how the number of solutions affected local search algorithm performance for both   sat problems and for constraint satisfaction problems  they showed
that both the number of solutions and number of constraints play a role in determining
how well gsat works  our work complements this study by adding to the understanding
of how local search is affected by problem instance structure  we also add to their results
by showing that solutions tend to occur in disconnected subgraphs of variable size 
hampson and kibler        studied how plateaus affect local search s ability to solve
  sat problem instances and showed how a local search algorithm could be modified by
performing complete search when a plateau is encountered  they analyzed the ratio of the
number of exits off of benches versus the size of the benches for randomly generated problem
instances at nc        they found that benches at higher levels are easier to escape on the
average  which is consistent with our findings  however  they failed to mention the high
variance in the proportion of exits of benches  and also failed to report the existence of local
minima  they also report that local search  augmented with complete search of plateaus 
generally performed worse than the original local search  we believe that large plateaus 
while rare  contributed to the large cpu times reported in their paper 
gent and walsh      a  investigated how gsat solved problem instances by aggregating statistics of gsat performance  they collected information on the number of satisfied
clauses as a function of gsat s ip number  the number of best ips as a function of ip
number  and other statistics averaged over many runs and problem instances  their study
indicates that gsat satisfies an average of     of the clauses after  n ips on instances
with nc        this works out to be     clauses for instances with     variables  our evidence that there are local minima and hard to escape benches at level    i e       satisfied
clauses  is consistent with these results  gent and walsh also report that the number of
ips gsat spends on benches before escaping is highly variable during the second half of
search  when the number of satisfied clauses is very high  gent   walsh      a   this is
consistent with our finding that benches can be either very easy or very hard to escape 

    revisiting local search algorithms

when gsat encounters a plateau it randomly searches the plateau  if the plateau is a
bench  then gsat can escape  however it may take a very long time if the bench has very
few exits relative to its size  or if the exits are highly clustered in one region of the bench 
if gsat encounters a local minimum it will never escape  even if it made a move off the
minimum to a state of higher level  gsat will simply move back to the minimum  because
every state on the minimum looks better than every state leading away from it  we should
point out that gsat can escape a local minimum of size   because it is forced to make
a move  however  either gsat will return immediately to this minimum or to another
   

fiwhen gravity fails  local search topology

adjacent to the neighbor  as we found so few minima of size   and since gsat doesn t
exhibit such cycling behavior this is a minor consideration 
hsat  gent   walsh      b  augments gsat with a heuristic designed to break ties 
if hsat has several ips that are equally good in terms of the number of satisfied clauses 
then it ips the variable ipped longest ago  hsat will explore benches more effectively
than gsat by ensuring that variables are ipped  fairly   as long as hsat remains on a
bench it will not ip a variable that keeps hsat on the bench until all other such variables
are ipped  therefore  hsat s improved performance may be due to its ability to escape
benches faster than gsat  however  hsat is still unable to escape local minima 
tabu search  glover        mazure  sais    gregoire        augments local search with
a fixed length list of previously made moves  the algorithm is not allowed to reverse a move
that is on the tabu list  local search augmented with tabu lists may escape local minima 
the memory structure will either explicitly or implicitly store states on the plateau and
force local search to make moves away from that part of the space  however  due to the
nature of the tabu list  it is possible that local search with one of these variants will ignore
a move which reduces the objective function simply because it is on the tabu list  this is
because tabu search frequently stores moves  not states  as a result  different tabu search
implementations allow moves to states with fewer unsatisfied clauses than ever detected to
date  even if the required move is on the tabu list  and thus can avoid this problem  this can
result in tabu search missing exits from benches  whether this results in poor performance
is unknown 
gsat with random walk  gent   walsh        ips a randomly selected variable with
probability p and uses the standard criteria to select ips with probability     p  this feature
will allow gsat to escape either local minima or benches  but does not guarantee that the
next move will not simply bring gsat back into the minima it escaped from this will not
happen if there are multiple  equivalently good moves available  gent and walsh      a 
report that  when the number of unsatisfied clauses is very small  the number of available
moves leading to a reduction in level for gsat tends to be    however  the effectiveness
of random walk suggests that a random ip will move gsat into a place where it can
proceed to a solution  also  if p is large  then two random walk steps can follow each other
in succession  improving the chances of escaping local minima  the fact that this variant
results in substantial improvements even when used with other modifications to gsat such
as tie breaking heuristics  gent   walsh        complements our discovery in section  
that local minima tend to be shallow  random walk may effectively promote escape from
these local minima into other parts of the search space 
walksat  kautz   selman        does not examine all possible neighbors before moving  instead  walksat randomly selects an unsatisfied clause and only investigates states
reachable by ipping variables in the selected clause  as a result the neighborhood examined changes from ip to ip  and the reverse move may not be in the next neighborhood
examined  walksat performs much of its search blind to the features we have uncovered 
walksat can escape local minima by simply not choosing a neighborhood containing moves
back onto the minima  or it may take a series of worse moves to escape a bench with many
exits simply because its neighborhood did not contain them 
simulated annealing  kirkpatrick  gelatt    vecchi        only examines a single neighbor of the current assignment  moves leading to improvements in the objective function are
   

fifrank  cheeseman    stutz

always accepted  while moves that worsen the objective function are accepted probabilistically  the probability is based on how much worse the move is and how long the search
has progressed  like walksat  simulated annealing conducts much of its search blind to
plateau features  simulated annealing can make a backwards move on a bench or minimum
even if a neighboring state results in a forward move  while this can help escape minima
and large benches  it may be a sub optimal strategy early in search 

   next generation local search algorithms
we have identified and analyzed a number of features of local search topology that may
inuence the success of local search  how can our results be used to improve local search
algorithms  one contribution of this study is to identify features of the local search space
that are worth investigating before beginning construction of a local search algorithm to
solve a new problem  a rapid exploration of the properties of benches and local minima
can be undertaken to determine which local search tactics are likely to work best for this
search problem class  for instance  such an examination might reveal that for one problem
local minima are very prevalent but uniformly small  indicating that explicit local minima
detection and avoidance is likely to be an effective tactic  also  it is possible to use results
such as those in figure   to determine an adaptive schedule for resetting the probability of
random walk or optimizing the size of the tabu list  as is done in mazure et  al          it is
also possible that new classes of local search algorithms could learn which tactics work best
in a manner similar to multitac  minton         our study provides a first step towards
identifying features that should be tracked by these self modifying local search algorithms 
when a local search algorithm starts exhibiting plateau behavior  it may be on a small
minima  a large minima  a bench with many exits  or a bench with few exits   we ignore
the case of a small bench  since it is not too hard to escape in these cases   the problem
is to identify which case the search process is stuck in  and then choose the proper tactic
to handle it  standard tactics include continuing search as normal  invoking a special
detection procedure  randomly ipping one variable as in random walk  randomly ipping
a small number of variables as in jump sat  gent   walsh        or randomly generating
new values for all variables as in randomly restarting 
small minima can be detected easily using an algorithm such as breadth first search 
as was done by hampson and kibler         once a local search algorithm has detected
and escaped a local minima  it is desirable to prevent it from revisiting the minima it
has escaped  local search could proceed by  filling in  local minima as they are found
in order to prevent revisiting them  this is approximately how tabu search works  and
other schemes can be used as well  the small size of most local minima indicates that
memory requirements for such a scheme are small as long as only small numbers of minima
are encountered  an algorithm using this mechanism could then explore numerous local
minima that are close together in the solution space without restarting 
large benches and minima are more dicult to recognize and escape  the question
becomes one of determining the utility of continuing to search versus changing tactics  the
studies we have done provide algorithm designers the information required to implement
the utility computation so that a local search algorithm can intelligently choose from among
its tactics  for instance  knowing that a problem instance is a cluster problem is indicative
   

fiwhen gravity fails  local search topology

that large benches with few exits are more likely to inhibit local search than local minima 
hence explicit local minima detection is not a good strategy for this problem class  jumping
or random restart might be a better strategy 
we should point out that while many enhancements like those proposed above are in
place for local search algorithms to solve   sat problems  these enhancements have not been
applied to other problem classes such as graph k coloring  we expect these extensions to be
successful at improving the performance of local search algorithms to solve these problems 
one way to approach new problems is to spend time gathering information on the topology
of the search space  as we have done in this paper  a second option  as we mentioned
above  is to use knowledge of the local search topology to learn the best tactics while
solving instances  detailed information on the appearance of local minima  distribution of
local minima size  bench size  and prevalence of exits from benches can then be used to
construct very good local search procedures that explicitly take these factors into account 

   conclusions and future work
we have presented an analysis of important properties of plateau structures in local search
spaces that can be used by local search algorithm designers to construct better local search
algorithms  we have defined a set of topological structures of local search spaces and shown
how they affect local search  we have provided conclusive evidence of the existence of local
minima in search spaces  and shown that they become more prevalent as the number of
unsatisfied clauses becomes close to    we have also shown that plateau behavior in local
search is caused by both local minima and benches  our results show that both local minima
and benches vary widely in size  while both are most often small  large local minima and
benches may defy detection and avoidance by local search algorithms  we also show how
the characteristics of these structures change with different problem classes  our analysis
has made it possible to interpret previous work on improving local search in terms of the
search space structure  illuminating the importance of escaping benches early in search and
detecting local minima later in search 
we have made suggestions in the previous section that might be used to create new
versions of local search that are better than the current crop of algorithms  an obvious
next step is to implement these algorithms and analyze their performance  especially in
comparison to existing algorithms that already attempt to escape plateaus 
we have barely begun analyzing the topology of plateaus  while we have some empirical
evidence that local minima of low level  i e   near    can be escaped by unsatisfying only
one additional clause  this may not be true for more structured problem classes  the
evidence that benches may have many exits does not always imply they are easy to escape 
highly clustered exits may make benches hard to escape  further analysis of the topology
of plateaus for a variety of problem instances will lead to more concrete results that can
inuence local search algorithm development 
it is clear that the nature of plateaus is highly dependent on the problem class being
tested  extending this form of analysis to other problem classes might reveal differences
in plateau structure that motivate substantially different gsat variants  furthermore 
plateaus in graph coloring problem and the traveling salesperson problem may manifest
themselves in different ways than those for   sat  and local search algorithms for these
   

fifrank  cheeseman    stutz

problems will explore plateaus differently  these differences must be studied in order to
determine how best to apply a new understanding of local search topology  it is also unclear
how this study will extend to such problems as traveling salesperson problem where the
search space may be much  smoother  
while we have collected a large amount of data on local search spaces  we have not
had much success in modeling the features we defined  while it is possible to compute the
probability that an individual state in a search space is on a local minima or is on a bench
with exits  it is very dicult to compute the expected size of a bench or minimum without
making horrendous independence assumptions  further work on such modeling may result
in a better understanding of local search topology 
as mentioned in section    it is possible to alter our definition of benches to specifically
exclude contours as a type of bench  the rationale is that contours provide no impediment
to greedy local search  and very little impediment to the semi greedy variations  one
possibility is to change the definition of plateau to only include states without neighbors of
both higher and lower level  there are several predictable effects of this change  first  we
know that some of our reported benches are pure contour regions  these would be eliminated
from consideration in reporting proportions of plateaus that are benches  second  the size
of the benches would exclude these states  and so we expect to find smaller benches under
the exclusive bench definition  third  the measurements of the mean proportion of states
on benches that are exits would also change  because excluding contours reduces the mean 
fourth  these states provide a potential means of linking bench regions that would be disjoint
under the exclusive definition  thus it is possible that use of the exclusive definition will
cause a dramatic reduction in average bench size  accompanied by an increase in bench
numbers  it might even eliminate the large size tails in the bench size distributions that
we observed using the inclusive definition  this would significantly alter our conclusions
regarding how benches impede local greedy search  and our recommendations regarding
how to deal with such benches  exploring the impact of such revised definitions in the
explanation of plateau behavior is worth investigating 
finally  our analysis of topological structures is geared towards analyzing local search
algorithms with greedy objective functions based on the number of unsatisfied constraints 
many local search algorithm designers are experimenting with new objective functions that
are modified continuously throughout search  as in clause weighting schemes  selman  
kautz         work of this type may lead to more innovations in the design of objective
functions  since plateau behavior is rooted in the objective function used  our analysis is
not suitable for analyzing these methods  but may provide insight into how to conduct a
similar study for self modifying algorithms of this type 

acknowledgements
we gratefully acknowledge the comments of the jair reviewers and editors  we also acknowledge the comments of phil rogaway and chip martel  both of u c  davis 
   

fiwhen gravity fails  local search topology

appendix a  sample problem

this section illustrates some of the terms defined in section    consider the following  
variable     clause   sat problem instance 
 a   b   c     a   b   c     a   b   c   
 a   b   c     a   b   c     a   b   c   
 a   b   c     a   b   d    a   b   d  
 a   c   d    a   b   d    a   b   d  
 a   c   d    a   c   d 
for the duration of this section we will abbreviate assignments of values to variables in
the following way    is false    is true  and hence a string of  s and  s of length   encodes
an assignment to the variables abcd in order 
this problem instance has a global minimum comprised of a single solution at      
the single state      is local minimum of size   and level    i e   has one unsatisfied clause 
the border of this local minimum consists of the states                      states     
and      have level   and the other two states have level   
the following states constitute a bench of level               and            is an exit
since ipping c results in       the solution  similarly       is also an exit since ipping b
results in the solution  the neighbors of      that are not on the bench are      and      
each of these has level three  so      is not an exit 
state comment
level unsatisfied clauses
     solution
 
     local minimum
 
 a   b   c  
     border of minimum  
 a   b   c     a   c   d 
     border of minimum  
 a   b   c     a   b   d 
     border of minimum  
 a   b   c     a   b   d    a   c   d 
     border of minimum  
 a   b   c     a   b   d 
     bench
 
 a   b   c  
     bench
 
 a   b   c  
     bench
 
 a   b   c  
     border of bench
 
     border of bench
 
 a   b   c     a   b   d    a   c   d 
     border of bench
 
 a   b   c     a   b   d 
     contour
 
 a   b   c     a   c   d 
     contour
 
 a   b   d    a   b   c  
     contour
 
 a   b   c     a   b   d 
     border of contour  
 a   b   c  
     border of contour  
 a   b   d 
     border of contour  
 a   b   c  
figure     some topological structures of the sample problem instance
the states            and      form a level   bench which also is a contour       is a
neighbor of the local minimum at level         is adjacent to      which is at level    and
     is adjacent to      which is at level   
   

fifrank  cheeseman    stutz

the states      and      form a bench of level   which is a contour  each of the states
           are also contours of level   by themselves  since there are no states unsatisfying
more than three clauses these contours are in fact local maxima 
these features are summarized in figure    

appendix b  random problem generation
this appendix contains pseudo code for the random problem classes studied in this paper 
first we present the uniform  sat class  parameters to this generator are c the number
of clauses and n the number of variables  in this class the procedure selects three literals
without replacement from n and assigns each a negative sign with probability      this
procedure was first presented in crawford and auton        and appears in figure    
procedure uniform  sat c  n  
  
for  i   to c  

clause    distinct variables selected uniformly from    n
negate each variable in clause with probability   
      clause

end for
return 
end

figure     random problem generation algorithm sketch
next we present the cluster  sat problem generator  the parameters are the number of
clauses c   the number of variables n per cluster  the number of clusters m   and the number
of linking clauses l  this generator builds instances by first creating m independent subproblems of c clauses and n variables each  using the uniform  sat generation procedure
described above  the variables of these sub problems are relabeled so that no sub problem
shares variables with any other sub problem  sub problems are then linked by generating
l linking clauses  each linking clause contains variables from three distinct sub problems 
kask and dechter generate these problems using the hardsolvable  sat procedure defined
below as described in kask and dechter         the procedure appears in figure    
finally we present the hardsolvable  sat generator  the parameters are the number
of clauses c and the number of variables n   instances are generated by first selecting
an assignment s to be a guaranteed solution  clauses are generated as in uniform  sat 
however if a clause has either zero or two satisfied literals under the selected assignment it is
rejected  for instance  the clause  a   b   c   would be rejected if the assignment s was    
since it has two satisfied literals under this assignment  this preserves a uniform balance of
signs for each variable in the limit  resulting in little information about the solution being
present in sign balances in the problem instance  this method is discussed further in tsuji
and van gelder        and the algorithm is given in figure    
   

fiwhen gravity fails  local search topology

procedure cluster  sat c  n  m  l 

  first generate m sub problems with distinct variables
for i   to m
 i  uniform  sat   c  n  
re label literals in  i so that no sub problem shares variables
    m
i    i
end for

  next generate linking clauses
for i     to l
randomly select   distinct sub problems  a    b    c from the  i s
clause  one variable randomly selected from each of  a    b    c
negate each variable in clause with probability   
      clause

end for
return 
end

figure     cluster problem generation algorithm sketch

procedure hardsolvable  sat c  n  
  

s   randomly generated assignment to the variables
while  i   c  

clause    distinct variables selected uniformly from    n
negate each variable in clause with probability   
  check to make sure clause allowed in formula under s
if    or   literals of clause true under s  
      clause
i  

end if
end while
return 
end

figure      hard  guaranteed satisfiable problem generation algorithm sketch

   

fifrank  cheeseman    stutz

a final note on random problem instance generation is in order  none of these procedures
guarantees that the resulting problem instance will contain all the variables  if a large
number of variables and a small number of clauses are used as parameters  then the resulting
problem may not contain all variables  however  for the ranges of clauses and variables used
in this work all problem instances had the full range of variables 

references
cheeseman  p   kanefsky  b     taylor  w          where the really hard problems are 
  th international joint conference on artificial intelligence          
clark  d   frank  j   gent  i   macintyre  e   tomov  n     walsh  t          local
search and the number of solutions  proceedings of the  d international conference
on principles and practices of constraint programming          
crawford  j     auton  l          experimental results on the crossover point in satisfiability problems  proceedings of the   th national conference on artificial intelligence 
      
gent  i     walsh  t       a   an empirical analysis of search in gsat  journal of artificial
intelligence research           
gent  i     walsh  t       b   towards an understanding of hill climbing procedures for
sat  proceedings of the   th national conference on artificial intelligence        
gent  i     walsh  t          unsatisfied variables in local search  in hallam  j   ed   
hybrid problems  hybrid solutions  pp         ios press 
glover  f          tabu search part i  orsa journal on computing                 
hampson  d     kibler  s          large plateaus and plateau search in boolean satisfiability problems  when to give up searching and start again  in johnson  d     trick 
m   eds    dimacs series in discrete mathematics and theoretical computer science  cliques  colors and satisfiability  vol      pp           american mathematical
society 
kask  k     dechter  r          gsat and local consistency  proceedings of the   th
international conference on artificial intelligence          
kautz  h     selman  b          pushing the envelope  planning  propositional logic and
stochastic search  proceedings of the   th national conference on artificial intelligence            
kirkpatrick  s   gelatt  c     vecchi  m          optimization by simulated annealing 
science                      
mazure  b   sais  l     gregoire  e          tabu search for gsat  proceedings of the   th
national conference on artificial intelligence          
   

fiwhen gravity fails  local search topology

minton  s          automatically configuring constraint satisfaction programs  a case
study  constraints              
selman  b     kautz  h          domain independent versions of gsat  solving large
structured satisfiability problems    th international joint conference on artificial
intelligence          
selman  b   levesque  h     mitchell  d          a new method for solving hard satisfiability
problems  proceedings of the   th national conference on artificial intelligence      
    
tsuji  y     gelder  a  v          incomplete thoughts about incomplete satisfiability
procedures  proceedings of the  d dimacs challenge 

   

fi