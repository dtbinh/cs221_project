journal of artificial intelligence research                 

submitted       published      

bidirectional heuristic search reconsidered
hermann kaindl
gerhard kainz

hermann kaindl siemens at
gerhard kainz siemens at


siemens ag osterreich 
pse
geusaugasse   
a      vienna  austria

abstract

the assessment of bidirectional heuristic search has been incorrect since it was first
published more than a quarter of a century ago  for quite a long time  this search strategy
did not achieve the expected results  and there was a major misunderstanding about the
reasons behind it  although there is still wide spread belief that bidirectional heuristic
search is aicted by the problem of search frontiers passing each other  we demonstrate
that this conjecture is wrong  based on this finding  we present both a new generic approach
to bidirectional heuristic search and a new approach to dynamically improving heuristic
values that is feasible in bidirectional search only  these approaches are put into perspective
with both the traditional and more recently proposed approaches in order to facilitate a
better overall understanding  empirical results of experiments with our new approaches
show that bidirectional heuristic search can be performed very eciently and also with
limited memory  these results suggest that bidirectional heuristic search appears to be
better for solving certain dicult problems than corresponding unidirectional search  this
provides some evidence for the usefulness of a search strategy that was long neglected  in
summary  we show that bidirectional heuristic search is viable and consequently propose
that it be reconsidered 

   background and introduction
when a problem is represented as a state space graph  solutions to such a problem are
paths from a given start node s to some goal target node t  finding such a solution can
be attempted by searching this graph  if the search is guided by heuristic information  it
is called a heuristic search  most of the work on heuristic search for problem solving deals
with unidirectional approaches  that start from s heading towards some node t  see  e g  
pearl        
when there is one goal node t explicitly given and the search operators are reversible 
bidirectional search is possible  which proceeds both in the forward direction from s to t and
in the backward direction from t to s  see  e g   nilsson         strictly speaking  it is not
even required that operators have inverses  it is just necessary that for a given node n the
set of parent nodes pi can be determined for which there exist operators that lead from pi
to n  searching backwards means generating parent nodes successively from the goal node t
 see  e g   russell   norvig         in other words  backward search implements reasoning
about the operators in the backward direction 
as an illustrating example of a class of problems where bidirectional search can be
usefully applied  consider finding find a shortest path between two given places s and t
using a given map of some city  in case of one way streets  bidirectional search implements
c      ai access foundation and morgan kaufmann publishers  all rights reserved 

fikaindl   kainz

reasoning like the following   in order to arrive at t  some one way street leading towards
t may be used   in a slightly adapted problem class  the cost of driving some street may

be different  depending on the driving direction  a steep street to the top of a mountain
may serve as an example  bidirectional search works also correctly in such a case  the
backward search implements reasoning in the backward direction but takes account of the
cost of driving in the forward direction  more formally  k  m  n    k  n  m  is the cost of an
optimal path from m to n  k  is used for notational convenience only   all the bidirectional
search algorithms dealt with in this paper work correctly under these conditions and do
not require that the operators are reversible or that the cost of a path is the same in either
direction 
bidirectional search was shown to be more ecient than its unidirectional counterpart
when heuristic knowledge is unavailable  but the inverse result was originally found in
experiments for bidirectional heuristic search by pohl         since this kind of search did
not work as expected  there was consensus about the conjecture that bidirectional heuristic
search is aicted by the problem of search frontiers passing each other without intersecting 
this situation was metaphorically compared by pohl to missiles that pass each other  and
illustrated in a figure that was reprinted by nilsson        fig         nilsson conjectured
that in such a case the bidirectional search may expand twice as many nodes as would a
unidirectional one 
while the original algorithm bhpa proposed by pohl        may actually show such
inecient performance  the missile metaphor is wrong and misleading  we demonstrate
that bidirectional heuristic search is actually not aicted by the problem of search frontiers
passing each other  the performance of bhpa is much worse than originally expected
because of two very different reasons 
   bhpa s search frontiers typically go through each other 
   the major effort is spent after the search frontiers have already met  for finding
better solutions than the one found at the first meeting of the search frontiers up to
an optimal one  and finally for proving that there is indeed no better solution possible 
the first reason is specific for bhpa and was incidentally resolved by some of the technical improvements introduced in the related algorithm bs  by kwa         the second
issue  however  is also the major obstacle for eciency of bs  and actually for any bidirectional search algorithm that performs heuristic front to end evaluations  i e   evaluations
that estimate the minimal cost of some path from the evaluated node on the search front to
t  note  that this is the kind of evaluations also performed by typical unidirectional search 
because of the common belief in the missile metaphor  however  so called wave shaping
algorithms were developed by de champeaux         de champeaux and sint         and
politowski and pohl         with the idea to steer the search  wave fronts  together  in
contrast to bhpa and bs   these algorithms perform front to front evaluations  i e   evaluations that estimate the minimal cost of some path from the evaluated node on one search
front to the nodes in the opposing front  in fact  these algorithms achieve large reductions
in the number of nodes searched compared to algorithms that perform front to end evaluations  however  they are either excessively computationally demanding  or they have no
   the notation is explained in the appendix 

   

fibidirectional heuristic search reconsidered

restriction on the solution quality  still  where do these reductions in the number of nodes
searched using front to front evaluations come from  after all  the algorithms performing
front to end evaluations do not suffer from the problem of search frontiers passing each
other 
in order to answer this important question  let us shortly focus on a common property
of heuristic evaluation functions that estimate the minimal cost of some path by applying
heuristic knowledge to the static information encoded in the state information of the node
evaluated  such static evaluation functions typically evaluate with some error  i e   the
difference between the minimal cost of a path and its heuristic estimate is in most cases
greater than zero  an approach to improve the accuracy of a given static evaluation function
is to perform a search and to utilize its results  since this involves dynamic changes  we call
it a dynamic evaluation function  dynamic evaluations through bounded look ahead search
were studied in various contexts by kaindl and scheucher        
the static evaluation errors are typically smaller for paths with smaller cost  as also
observed by pearl         front to front evaluations are therefore typically more accurate
than front to end evaluations  in addition  the costs of the paths from the nodes on the
opposing search frontier to t  or s  respectively  are known  and so the overall evaluations by
the front to front algorithms are much more accurate than front to end evaluations  since
the former utilize the results of the search in the opposing direction  we may view this as an
approach to dynamically improving heuristic values from the static evaluation function  due
to this asset  wave shaping algorithms achieve large reductions in terms of nodes generated
since they perform front to front evaluations  however  they are quite expensive in terms
of running time  per node examined   which calls for finding an appropriate balance  in
fact  dillenburg and nelson        as well as manzini        developed a more recent nontraditional approach to bidirectional search called perimeter search that achieves exactly
this 
we devised a new and computationally much cheaper approach to dynamic improvements that we call difference approach  it utilizes differences of known costs and their
heuristic estimates from a given evaluation function to improve other heuristic estimates
from this function  this difference approach can be applied in bidirectional heuristic search
algorithms that perform heuristic front to end evaluations  it is exemplified in two new
methods for dynamic improvements of heuristic evaluations during search 
we also devised a new approach to bidirectional heuristic search that performs heuristic
front to end evaluations  where these dynamic improvements of heuristic evaluations during
search can be embedded eciently and effectively  this approach is generic in the sense
that it encompasses a whole class of  non traditional  bidirectional search algorithms  as
we show in this paper  it can be instantiated for the case of the availability of sucient
memory as well as for the case of limited memory 
our results from experiments suggest that bidirectional heuristic search can improve
on unidirectional heuristic search with respect to both generated nodes and running time
 for certain problems of finding optimal solutions   since the missile metaphor is wrong 
bidirectional heuristic search can do so using our approach without the very time consuming
front to front evaluations  so  bidirectional heuristic search is viable and we propose that
it be reconsidered 
   

fikaindl   kainz

this paper is organized in the following manner  first  we discuss previous work and
present some new theoretical and empirical results on existing approaches to bidirectional
heuristic search  then we describe our new generic approach to non traditional bidirectional
search and two of its instantiations  thereafter we propose a new approach to dynamically
improving heuristic values that is based on differences between known costs and heuristic
estimates  after the presentation of experimental results from applying these approaches 
we discuss them in the context of the various approaches to bidirectional heuristic search
that were previously proposed 

   previous work

in order to make this paper self contained  we sketch here the essentials of previous work
on heuristic search algorithms with a focus on bidirectional heuristic search  without going
into more detail than necessary to understand both our new results on this previous work
and our new approaches 

    unidirectional heuristic search algorithms

many unidirectional search algorithms have been presented  so it would be prohibitive to
review all of them here  rather  we focus on those unidirectional algorithms that form the
basis of bidirectional search as discussed in this paper  first  we review the traditional
best first search algorithm a   hart  nilsson    raphael         then  we shortly explain
the linear space algorithm ida   iterative deepening a   proposed by korf         finally 
we review an algorithm called trans  reinefeld   marsland        that implements a form
of enhanced iterative deepening search 
a  maintains the set open of so called open nodes that have been generated but not
yet expanded  i e   the frontier nodes  much as any best first search algorithm  it always
selects a node from open with minimum estimated cost  one of those it considers  best  
this node is expanded and moved from open to closed  a  specifically estimates the
cost of some node n with an evaluation function of the form f  n    g  n   h n   where g  n 
is the  sum  cost of a path found from s to n  and h n  is a heuristic estimate of the cost
of reaching a goal from n  i e   the cost of an optimal path from s to some goal t  if h n 
never overestimates this cost  it is said to be admissible  and if a solution exists  then a  is
guaranteed to return an optimal  minimum cost  solution  it is also said to be admissible  
under certain conditions  a  is optimal over admissible unidirectional heuristic search
algorithms using the same information  in the sense that it never expands more nodes than
any of these  dechter   pearl         we emphasize here that this optimality result of
a  only compares it with unidirectional competitors  so a bidirectional approach may well
improve on the performance of a   the major limitation of a  is its memory requirement 
which is proportional to the number of nodes stored and therefore in most practical cases
exponential 
ida  was designed to address this memory problem  while using the same heuristic
evaluation function f  n  as a   ida  performs iterations of depth first searches  consequently  it has linear space requirements only  although performing depth first searches
iteratively deeper and deeper has been heavily used in computer chess programs in the
context of alpha beta minimax search since the sixties and is still in use  see kaindl        
   

fibidirectional heuristic search reconsidered

b 
k  a b  

a

k  a b   b 
h  b  

g  a 

h  b  

k  a b  
h  a 

b 
s

h  b  

h  a    max  h  a   min  k  a bi    h  bi     

t

i

figure    an illustration of the back up idea 
the application of this approach in problem solving searches marked a breakthrough for
solving more dicult problems  ida  s depth first searches are guided by a threshold that
is initially set to the estimated cost of s  the threshold for each succeeding iteration is the
minimum f  value that exceeded the threshold on the previous iteration 
while ida  shows its best performance on trees  one of its major problems is that in its
pure form it cannot deal with duplicate nodes in the sense of transpositions  a transposition
arises  when several paths lead to the same node  and such a search space is represented
by a directed acyclic graph  dag   this disadvantage of ida  relates to its advantage of
requiring only linear space 
fortunately  most computers have more memory available than needed for ida   this
memory can be utilized for recognizing duplicate nodes in two ways  using a finite state machine  taylor   korf         or a transposition table implemented as a hash table  reinefeld
  marsland         due to its more general applicability in a wider variety of domains  and
since our bidirectional algorithms partly make use of it  we focus on the latter technique 
the algorithm trans proposed by reinefeld and marsland        uses a transposition
table for ida   since the size of such a table can be deliberately parameterized  this is an
approach to utilizing limited memory  analogously to earlier applications of transposition
tables in computer chess programs  trans utilizes its table actually for two purposes 

 for recognizing transpositions 
 for caching the best heuristic values acquired dynamically 
since the latter use is more dicult to understand  we explain its underlying idea in
more depth  this back up idea is illustrated in fig     when during the normal search the
nodes bi are statically evaluated but not stored  these values can still be used by backing
them up to some node a that is stored   in the case of trans in its transposition table  the
dynamic value of a is the minimum of the estimated costs of the best paths found through
the nodes bi   unless the static evaluator is consistent  it is useful to store the maximum
of the dynamic and the static value of a node  when such a cached node is re searched 
an improved value can often be used instead of the value assigned directly by the static
evaluation function 
apart from its use in trans  this back up idea is actually widely applied in many algorithms like ma   chakrabarti  ghose  acharya    desarkar         mrec  sen   bagchi 
       rta   korf         sma   russell        and its  ghosh  mahanti    nau        
   

fikaindl   kainz

its advantages are very little overhead and steady  though often modest  improvement with
increasing memory size  in addition  this idea also works when a goal condition instead of a
goal node is specified  i e   it does not require that a goal node is explicitly given  however 
it is only applicable for re searched and cached nodes  and we cannot see how it could make
sense in the context of traditional best first search like a  

    the traditional approach to bidirectional heuristic search
first  we look at the older approach to bidirectional heuristic search where forward and
backward searches alternate  we call this the traditional approach  it encompasses both
algorithms performing front to end and others performing front to front evaluations 
      front to end evaluations

since the first proposed algorithm on bidirectional heuristic search called bhpa  pohl       
performed front to end evaluations  let us begin with this approach  it employs heuristic
evaluation functions hd  n  that estimate the cost of an optimal path from the evaluated
node n to t or s  respectively  depending on the search direction d  more precisely  h   n 
estimates the cost of an optimal path from n to t in the forward search  and h   n  from
s to n in the backward search  note  that always an optimal path from s to t is to be
found  i e   not from t to s  and therefore also the cost of such a path is estimated by the
evaluation function fd that uses hd as its heuristic component  from the viewpoint of the
backward search that targets node s  however  it may seem that the cost from its frontier to
s is estimated heuristically  while it is more precisely the cost from s to the frontier  this
issue matters when the cost of some path is not the same in either direction 
we can view a bhpa search essentially as two a  type searches in opposite directions 
i e   traditional best first searches   these are performed quasi simultaneously  i e   on a
sequential machine one node is expanded after another  but the search direction is changed
 at least  from time to time  the decision for searching in the forward or backward direction
is made anew for each node expansion according to the cardinality criterion  pohl        

if jopen j  jopen j then d   else d  
whenever the search frontiers meet at some node n  a solution is found  its cost is
g  n    g  n   i e   the cost of the path found by the forward search from s to n  plus the
cost of the path found by the backward search from n to t  even when the two parts of such
a solution of the forward and the backward search are optimal  however  the concatenated
solution path is not necessarily optimal  therefore  such an algorithm requires a special
termination condition for guaranteeing optimal solutions  the termination condition of
   more precisely  bhpa can be viewed to consist of two hpa searches  pohl        in opposing directions 
as long as the heuristic function used is consistent and its values are weighted equally as the gd  values 
the only relevant difference is a check whether open has become empty  for admissible but not consistent
heuristic functions  the option to move nodes back from closed to open is important  if a new better
gd  value is found  a heuristic function is consistent if hd  m   hd  n    kd  m  n  for all nodes m and n 
this implies that hd is admissible  i e   the heuristic function never overestimates the real cost 

   

fibidirectional heuristic search reconsidered

bhpa is as follows 

lmin  max  min f  x   min f   x  
x open 

x open 

   

this condition essentially means that the cost lmin of the best  least costly  complete
path from s to t found so far is not larger than an estimate computed from the fd  values
in both search frontiers  if the heuristic used for these estimates is admissible  this path
must already be an optimal solution in order to satisfy this termination condition  since
understanding this condition is important for this paper  we elaborate it in more depth
below 
implicitly this is also the condition for successful termination of the improved algorithm
bs   kwa         which removes all nodes n whose fd  values are  lmin and terminates
when open  or open  is empty  this technique of removing nodes is called trimming in
bs   and such newly generated nodes are not placed into the sets of open nodes at all 
which is called screening  while these techniques improve on bhpa  just  with respect to
saving memory  bs  additionally includes improvements that reduce the number of nodes
generated  these major improvements are the following 

 nipping  if a node is selected for expansion which is already in closed in the opposite search tree  it can just be put into closed in the current search tree without
expansion 
 pruning  in the same situation  descendants of this node in open in the opposite
search tree can be removed 

both bhpa and bs  are admissible if fd is consistent  however  bhpa s results were
clearly less ecient than those of a  for finding optimal solutions  and also bs  was never
shown to be really more ecient than a  
koll and kaindl        were the first to conjecture that the missile metaphor is misleading as an explanation and provided some  preliminary  evidence for this finding  based on
it and realizing that fulfilling the termination condition     is a key issue  they developed
ecient   admissible search algorithms  that typically find solutions with a known error
bound faster and generate fewer nodes than a corresponding derivative of a  that guarantees the same error bound  these algorithms provided  however  no improvements for
finding optimal solutions  and they require exponential space like bhpa  bs  and a  
based on the same approach  kaindl and khorsand        showed that bidirectional
heuristic search using limited memory is possible through using a unidirectional search
algorithm that can cope with limited memory   sma   russell         however  the
runtime eciency was insucient 
      front to front evaluations

since for a long time there was consensus about the belief that the search frontiers would
pass each other  research focused on algorithms that would force the  wavefronts  to meet
through  wave shaping  techniques  bhffa  de champeaux   sint         bhffa 
 de champeaux         d node retargeting  politowski   pohl        and a generalized
algorithm  encompassing bhpa and bhffa    davis  pollack    sudkamp         these
   

fikaindl   kainz

a
h a b  

g  a 
b 

h  a 

k  t b  
h a b  

t
s

h a b  

b  k  t b  
k  t b  

h  a    max  h  a   min  h a bi    k  t bi     
i

b 

figure    an illustration of the front to front idea 
algorithms perform front to front evaluations and they show that bidirectional heuristic
search can be ecient in terms of the number of nodes generated 
since the basic idea of front to front evaluations is important for understanding this
paper  we illustrate it using fig     when for the evaluation of some node a the nodes bi
on the opposite search front are available in storage  the costs of optimal paths from a to
every bi can be estimated  adding these to known costs of paths from bi to the goal node
t  normally more accurate dynamic estimates can be gained than from a static front to end
evaluator that directly estimates the cost from a to t 
however  the algorithms performing front to front evaluations are either excessively computationally demanding  or they have no restriction on the solution quality  they have to
compute heuristic estimates between all nodes in one search frontier and all nodes in the
other  in order to estimate all the paths going through all nodes in the opposite frontier
and vice versa  so  their effort for the evaluations needed for a single node selection and
expansion may even seem to be proportional to the cross product of the numbers of nodes
in both frontiers  through the use of appropriate data structures  this effort can be reduced to become proportional to the number of descendants of the expanded node times
the size of the opposite search frontier   still  this is excessively computationally demanding for frontiers that may contain in the order of millions of nodes  for keeping this effort
practical for non trivial problems  such an algorithm may either restrict this computation
to a certain  small  number of nodes with promising values or keep the search direction
focused on a single target node of the opposing frontier for several steps before retargeting
it  both approaches typically terminate with non optimal solutions and therefore obviously
lose admissibility  i e  the guarantee for finding optimal solutions 

    the non traditional approach to bidirectional heuristic search

so  the traditional approaches did not succeed to improve on unidirectional search for
finding and guaranteeing optimal solutions  in particular  all these algorithms are based
on traditional best first search that has exponential storage requirements  it may seem
that bidirectional search needs to store nodes of at least one frontier so that the search
from the opposing side can recognize meeting this frontier  typically implemented through
some hashing scheme   instead of storing both frontiers for having forward and backward
searches alternate  it is possible to search in one direction first storing nodes  and then to
   according to personal communication with dennis de champeaux 

   

fibidirectional heuristic search reconsidered

search in the other direction  we call this here the non traditional approach to bidirectional
heuristic search 
such an approach is the perimeter search  dillenburg   nelson        manzini        
in perimeter search  a breadth first search generates and stores all the nodes around t up to
a predetermined  and fixed  perimeter depth  the final frontier of this breadth first search
is called perimeter  after this search is finished and the nodes are stored  a forward search
starts from s  targeting all of the perimeter nodes  depending on the given problem and
the available storage  this forward search can be performed in an a  or ida  fashion  the
former is implemented in ps   dillenburg   nelson         and the latter both in idps 
 dillenburg   nelson        and in bida   manzini         for the same perimeter depth 
idps  and bida  search exactly the same nodes  however  bida  temporarily removes
from the perimeter the nodes that cannot affect the computation of its evaluation function
and consequently reduces the number of heuristic front to front evaluations compared to
idps   due to this improvement  bida  is far more ecient in terms of running time than
idps  
bida  achieves very good results in the  sliding tile  fifteen puzzle domain  we investigate below why this is the case in contrast to the traditional approaches to bidirectional
heuristic search  in particular  we show the results of experiments with varying perimeter
depth  i e   varying perimeter size or storage use 

   some new results on the previous approaches

still  it seems that these previous approaches to bidirectional heuristic search are not understood properly  therefore  we present some new results about them before we propose
our new approaches 

    theoretical results

we present some new theoretical results on bounds on the number of nodes expanded by
traditional bidirectional heuristic search with front to end evaluations  since its runtime
performance is proportional to the number of nodes expanded  these are bounds on the
potential eciency  we assume the availability of a consistent heuristic evaluation function
hd in both directions 
first we make explicit a principally known result in the form of a lemma  since we need
this particular result for proving the new results  in addition  understanding it is important
for understanding these results  note  however  that this termination condition for bidirectional search is significantly different from termination conditions for unidirectional search
like a  as given by pearl        

lemma      a sucient condition for successful termination of bhpa or bs   

if there is a solution path from s to t  bhpa or bs  terminate successfully  i e   by
finding such a path  iff both the following conditions are satisfied 
 i  in at least one of the search frontiers d of bhpa or bs  the minimum f  value must
have been raised at least to the value of an optimal solution c    that is  minx opend fd  x  
c   and
 ii  an optimal solution must have been found  that is  lmin   c   
   

fikaindl   kainz

proof  we need not be concerned about whether these algorithms indeed find optimal

solutions  since the corresponding proofs were given by pohl        and kwa         respectively  we only focus here on how exactly the termination condition in formula    
is fulfilled   for bhpa this is the explicit termination condition  for bs  it is implicit as
explained above  the minimum f  values of opend are at first the values f   s  and f   t  
respectively  since fd is consistent they do not exceed c    the minimum f  values of opend
increases only gradually until all the nodes with f  values   c  of at least one search frontier
are expanded  or nipped or pruned by bs    since the maximum of the minimum f  values
of opend is used  only one but at least one of them must become  c   during the search 
lmin  c  always holds  and when an optimal solution is found  lmin   c  
 
in order to establish bounds on the number of node expansions  let us first focus on an
upper bound on the number of nodes expanded by bhpa 

theorem     the number of node expansions of bhpa can be bounded from above by
  bhpa      a        a  

proof  in the worst case  bhpa may have to perform its a  type searches in both
directions completely  with the exception of at least one node expansion  even when lmin  
c  is achieved only in the last node expansion in one direction  immediately thereafter the
termination condition is fulfilled according to lemma    therefore  in the opposite direction
at least one node expansion can be saved 
 
in some sense  this bound may look quite weak  but actually nilsson        conjectured that a bidirectional heuristic search may expand twice as many nodes as would a
corresponding unidirectional one  this conjecture was based on the assumption originally
published by pohl        that the search frontiers may pass each other without intersecting 
more recently  however  some empirical evidence was found by koll and kaindl       
that this assumption is invalid  i e   the frontiers typically meet rather early even without
using wave shaping techniques  so  the question may arise as to whether and under which
conditions the result of theorem     is reasonable and useful  in order to show such conditions  we define a strong symmetry property of search spaces  although this may seem
to be a completely unrealistic assumption  it is not too dicult to imagine a search space
with this property  searches for optimal solutions to tsp  traveling salesman problem 
instances need to generate nodes that represent visiting all the neighboring cities of the
start city  since this same city is also the final city to be visited  a reverse search in the
opposing direction needs to generate nodes for exactly the same cities  etc  so  at least a
straight forward implementation of bidirectional search for the tsp works in a symmetric
space  for symmetric tsp instances  where the arc costs are the same independent of
the direction  and for usual heuristic evaluations functions for the tsp  like the minimum
spanning tree heuristic   it turns out to be a perfectly a  symmetric search space 
definition     let f     h  s   f           f k    f k   c  be the different f  values of expanded

nodes in the forward direction and analogously f     h   t   f           f k    f k   c  in the
backward direction  a search space is perfectly a  symmetric iff a  expands the same
number of nodes for each f  value in the forward direction as in the backward direction  that
is   j  a      j  a    for each j          k 
 
   

fibidirectional heuristic search reconsidered

theorem     if the search space is perfectly a  symmetric and the f  values are all distinct
in each direction  then

  bhpa         a     with       

proof  in a perfectly a  symmetric search space  the numbers of nodes expanded in both
directions by the a  type searches within bhpa is strictly the same up to the last but  
f  values  because no termination is possible up to this point  and since these are all distinct
in each direction  this amounts to   nodes each for the remaining   f  values 
  a            a      
depending on when lmin   c  is achieved    up to   more nodes must be expanded to
fulfill the termination condition  summing up proves the theorem 
 
since in practice the f  values are normally not all distinct  in each direction   we show
the consequence of a more realistic assumption   the occurrence of many different f  values 
this is meant in the sense that the number of nodes with the same f  value is small compared
to the number of nodes expanded 

corollary     if the search space is perfectly symmetric and there are many different f values  then

  bhpa        a 

proof  since there can be several nodes with the same f  value  the expansion of more
than   nodes may be saved when an optimal solution has already been found  because the
number of nodes with the same f  value is small compared to the number of nodes expanded 
however      bhpa  
 
so  under this strong assumption on symmetry bhpa expands close to twice as many
nodes as a   how is it possible that this conjecture of nilsson        is supported although
its original assumption appears not to be valid 
the point is that the search frontiers of bhpa meet early  i e   they do not pass each
other without intersecting  but they go through each other  so  there is a possibly large
region of the search space explored twice  as illustrated in fig     
bs  avoids such double exploration  see again fig      unfortunately  it appears to be
dicult to quantify the size of this region  so  we cannot determine a tighter upper bound
on the number of nodes expanded by bs  without further assumptions 
fig    also illustrates that the search frontiers of bs  are typically  ragged   this
means that the meetings occur in the  middle  as well as near s or t  as observed in our
experiments  
now let us have a look at lower bounds on the number of nodes expanded by bhpa 
we do not need the assumption on symmetry here but we can show more general results 
theorem     the numbers of nodes expanded by bhpa can be bounded from below by
min x   x          bhpa 
   

fikaindl   kainz

a 

t

s

bhpa

t

s

region of search space explored twice

bs 

t

s

nipping

pruning

figure    an illustration of traditional bidirectional heuristic search with front to end evaluations 
where xd    d  a      kd  a  is the number of nodes that a would expand in search
direction d minus the number of nodes with value fdk   c  
proof  this lower bound represents the case of earliest termination according to lemma
    at least   node is expanded in each direction  
 
corollary     if the f  values are all distinct in each direction  then the number of nodes
expanded by bhpa can be bounded from below by
min     a      a      bhpa 
proof  xd    d  a      since there is only   node n with fd n    c  
 
corollary     the maximal improvement of bhpa over a is given by
  a    min x   x       
proof  min x   x       is the minimum number of nodes expanded by bhpa 
 
in essence  we have shown that under certain conditions traditional bidirectional heuristic search with front to end evaluations as exemplified by bhpa can expand close to twice
as many nodes as a   while the original conjecture for such a result was based on an
apparently wrong assumption  we found that another   even more obvious   effect is
 partly  responsible 
in addition  we have shown that bhpa cannot be much more ecient than a  with
respect to node expansions even in the best case  for a variant of bs  without the pruning
technique  the same lower bound on the number of nodes expanded applies  in general  the
major problem of traditional bidirectional heuristic search with front to end evaluations is
the cost of satisfying the termination condition 
   

fibidirectional heuristic search reconsidered

    empirical results

in order to provide evidence that the missile metaphor is misleading  we present some new
empirical data on the performance of bs   since perimeter search seems to become more
and more ecient with increasing perimeter depth  manzini         we have investigated its
behavior through experiments in two different domains  we present new empirical results
from these experiments and provide some explanation why perimeter search works so well
in the fifteen puzzle domain 
      bs 

bs  is a classical best first search algorithm and requires exponential memory  so  we are
not aware of any bs  implementation yet that is able to solve dicult problem instances
of the fifteen puzzle  given no domain specific knowledge about the puzzle other than the
manhattan distance heuristic  in our experiments  bs  was able to solve    of the    
instances used by korf         having available up to     mbytes of main storage  on a
convex c      
we gathered some data during these runs of bs  which provide empirical evidence that
the missile metaphor is misleading  in addition to the data already given by koll and kaindl
         in the average  bs  found the first solution after the generation of     percent of
the total number of nodes generated  the quality of this solution is on average just    
percent worse than that of an optimal solution  after continuing its searches  bs  found
optimal solutions after the generation of      percent of the total number of nodes generated
 again on average   that is  most of the search effort of bs  was spent to verify optimality 
that means that the search frontiers of bs  meet relatively early without the use of
wave shaping techniques  and even optimal solutions are found rather quickly  however 
even when bs  has already found an optimal solution to some problem instance  it does
not  know  that this solution is optimal  so  it must continue the search and generate the
remaining nodes in order to prove that there is in fact no better solution available 
relatively to its overall higher effort  bhpa would find a first solution even  earlier 
than bs   of course  bhpa needs exactly the same number of nodes as bs  for having
its search frontiers meet  after this first meeting  however  it would have to generate more
nodes than bs  because its search frontiers go through each other  if the search frontiers
would  however  pass each other as illustrated by the missile metaphor  solutions could not
be found that early 
      perimeter search

perimeter search achieved very good results in the fifteen puzzle domain  where it can solve
any fifteen puzzle problem instance relatively fast and with limited memory  however  this
approach to bidirectional heuristic search also seems not to be understood suciently yet 
so  we made experiments with increasing perimeter depth in two different domains  the
results may seem to be quite surprising  while we cannot yet explain them theoretically 
they are important in their own right  and we try to explain them intuitively 
for these experiments  it was feasible to use the complete set of     fifteen puzzle
problem instances as used by korf         fig    shows that in this domain bida  works
very well  especially in terms of the number of nodes generated  the data are normalized
   

firesults relative to korfs ida  in  

kaindl   kainz

  

nodes generated

  

running time

  

    

    

    

  

    

    

    

  

    

    

    

    

  
  
  
  
 

   

   

   

   

   

   

   

   

   

   

 
  

  

  

  

  

  

  

  

  

  

bida  perimeter depth

figure    comparison of bida  for different perimeter depths on the fifteen puzzle     
instances    time optimum 
to the respective search effort of ida   in korf s implementation   since it was the first
algorithm able to solve random instances of the fifteen puzzle   also the running times
are very good  
consistently with  manzini        table     fig    shows a steady decrease of both the
number of nodes generated and the required running time for increasing perimeter depth
until it reaches     at this perimeter depth  however  bida  achieves its minimum running
time  the exact perimeter depth where such an optimum occurs may depend on several
factors such as the machine used and the eciency of the implementation  the new and
important finding is  however  that such an optimum actually exists for bida   while an
optimum perimeter depth was shown to exist for ps  by dillenburg and nelson        
the data presented by manzini        suggested that for increasing perimeter depth the
number of evaluations performed by bida  even decreases  for larger perimeter depths 
however  the savings in terms of node generation are obviously outweighed by the larger cost
of the front to front evaluations  note  that the data presented by manzini        did not
show this optimum because of the amount of memory required for storing the perimeter for
depths greater than    that exhausted the resources available for the experiments reported
there 
   just to give an idea of the overall diculty of the given problem set  note that ida  generates some    
million nodes on average  which needs slightly less than half an hour on a convex c     
   bida  s result here is worse than the data reported by manzini         this is primarily due to the use
of a different machine and a different implementation that is based on the very ecient code of ida  for
the puzzle provided to us by korf that we are using  in such an implementation the overhead especially
of wave shaping shows up more clearly even when using the runtime optimizations described by manzini
        while we had no access to the implementation by manzini  in e mail communication with him
we were given some hints about it  and there was agreement about the overall effect on the relative
running times due to the different implementations of ida  

   

fibidirectional heuristic search reconsidered

knowing about the existence of such an optimum helps us better understand the improvement of perimeter search over the traditional approach to bidirectional heuristic search
based on front to front evaluations as exemplified  e g   by bhffa  the advantage of improved evaluation accuracy is to be balanced with the large overhead in time consumption
for node evaluations  while bida  can be tuned towards this optimum  an algorithm like
bhffa is typically out of balance in this regard  while bhffa can for this reason only
find optimal solutions to quite easy problems  perimeter search is comparably much cheaper
per node searched  since a much smaller frontier is  targeted  
although the performance of perimeter search cannot be improved deliberately through
using more and more memory  the optimum running time of bida  for the fifteen puzzle
problems is very good  so  we wanted to see whether and how such results can also be
achieved in another domain which we used for experimenting with our own algorithms 
we made experiments of finding optimal solutions to a set of maze problems   for these
problems  bida  based on ida  is inecient due to the high number of iterations  so  we
used here ps   dillenburg   nelson        which implements the common underlying idea
  perimeter search   based on a   while a  works very well for such maze problems  it
seems that the runtime optimization of bida  cannot be practically used in an a  based
algorithm due to excessive storage requirements  since for every node in open information
about every perimeter node would have to be stored that may affect the computation of
the front to front evaluations  in fact  manzini        only states that his technique can be
applied to any depth first search algorithm 
based on these experiments  the perimeter search approach appears not to work satisfactorily as illustrated in fig      neither in terms of generated nodes nor in terms of
running time  the data are normalized to the respective search effort of a   since it seems
to be the most ecient algorithm for such problem instances that fit into memory  see also
the optimality result of a  over unidirectional competitors by dechter   pearl         
even for comparably larger perimeter depths                         the numbers of generated
nodes only marginally improve  up to      percent of the number of nodes generated by a 
as shown in this figure   while the running time becomes quite high  up to       percent  
the running time can be reduced for perimeter depths smaller than     but for these no
real savings in the number of nodes generated and therefore no improvement over a  can
be observed 
when considering these very different performances of perimeter search in these domains  the question arises  why it works so well for the fifteen puzzle and why not satisfactorily for the maze  let us consider a reason for the good results first  having a closer look
at the case of perimeter depth    this minimal perimeter around the node t in the fifteen
   our use of this domain was inspired through its use by rao et al          problem instances in this
domain model the task of navigation in the presence of obstacles      instances were drawn randomly
using the approach behind the xwindows demo package xmaze  as a heuristic evaluator  we use the
manhattan distance like rao et al         
for our experiments  we made the following adaptations  in order to allow transpositions  we do not
 install  a wall in three percent of the cases  this leads to roughly the same  density  of transpositions
as in the fifteen puzzle  moreover  we use much larger mazes               and in order to focus on
the more dicult instances of these  we only use instances with h   s        
   just to give an idea of the overall diculty of the given problem set  note that a  generates some    
million nodes on average  which needs less than two minutes on a convex c     

   

fikaindl   kainz

     
   

nodes generated

results relative to a  in  

     

running time

   

     

   
     

   
   
   

     
     
    

    

    

    

    

    

  
 
  

  

   

   

   

   

ps  perimeter depth

figure    comparison of ps  for different perimeter depths on the maze problems     
instances  
puzzle just contains two nodes  still  the perimeter approach saves about half of the node
generations of ida  
this major improvement can be explained quite simply when looking at an approach
to improving the heuristic evaluation function  perimeter search  discovers  during the
search an analogous improvement of the manhattan distance heuristic to that presented by
korf and taylor        p        under the name  last moves heuristic   more precisely the
part dealing exactly with the very last move    more precisely  in most cases the dynamic
values increase h   n  by two units  i e   twice the  unit  cost of either of the arcs from the
two perimeter nodes   through such improved evaluations  many node generations can be
saved even when using just very few perimeter nodes 
still  the question remains why such improvements are not observed in the maze domain 
while in both domains the arcs have unit costs  we found some major differences that help us
explain this phenomenon  fifteen puzzle problems have relatively short  optimal  solutions 
and due to the unit costs of the arcs the overall cost of a solution is also relatively small      
on average   in comparison  maze problems  in mazes of the size we used  have relatively
long  optimal  solutions and relatively high cost of such a solution       on average   these
   this heuristic is based on the last move of a solution  which must return the blank to its goal position 
in order to allow the blank to this position  those tiles next to the blank in the goal position must be in
certain places  if they are not then the manhattan distance will not accommodate a corresponding path
and can therefore be increased by two units 
   this also relates to a property of the manhattan distance heuristic itself  in most cases  the increase of
the cost through the known arc  with cost    is added to an increase of the heuristic estimate from the
evaluated node to the perimeter node  also by    compared to the estimate to t  in the remaining cases 
the heuristic estimate from the evaluated node to the perimeter node reduces  by    compared to the
estimate to t  which cancels out the cost through the known arc 

   

fibidirectional heuristic search reconsidered

differences are also reected in differences of the heuristic values  although we used in both
domains more or less the same heuristic   for the given set of fifteen puzzle problem
instances  h   s         is on average much smaller than h   s         for the given set of
problem instances in the maze domain  while we do not have data on the heuristic values in
the  think a dot  problems as used by dillenburg and nelson         note that the mean
path length was given there as       i e   even much smaller than for the fifteen puzzle 
let us assume now that in both the fifteen puzzle and the maze domain with the
same number of perimeter nodes twice the cost of an arc  i e   two units  can be added 
this means that the resulting dynamic evaluation improves on the static evaluation by the
same absolute amount  but by a quite different relative amount      percent for the fifteen
puzzle compared to      percent in the maze domain  so  the dynamic improvement of the
heuristic is in effect much higher for the fifteen puzzle  which leads to much larger savings
in terms of node generations for the same effort through front to front evaluations 
in summary  for the fifteen puzzle just some few perimeter nodes improve the static
evaluation  since twice the  unit  costs of their arcs or even more is in most cases simply
added  this has a large effect in this domain where the heuristic values are typically smaller
than about     in the maze instances of the size we experimented with  the heuristic values
are two orders of magnitude larger  and therefore many more perimeter nodes would be
required to achieve much effect  these  however  make perimeter search very expensive
both in terms of running time and probably also in storage requirement 
from these considerations  it should be clear that the effect of front to front evaluations
is not so much steering the frontiers together  but rather to improve the heuristic evaluations
dynamically  in particular  the example of having just two perimeter nodes illustrates both
that  wave shaping  is not the real effect  but rather improvement of evaluation accuracy 

   a generic approach to non traditional bidirectional search
we developed a new generic approach to bidirectional heuristic search that integrates various
search algorithms and typically leads to hybrid combinations  since this approach does not
allow for changing the search direction more than once  it can be viewed as a non traditional
form of bidirectional search 
the major steps of our generic approach are   
   assign a search direction and some or even nearly all of the available memory to the
traditional best first search 
   perform traditional best first search in the assigned direction using the given memory 
   unless the best first search has already found an optimal solution  perform a search
in the reverse direction  use the memory structure built up by the previous best first
search  possibly together with additional memory that is still available  but compute
and use front to end evaluations 
it would not be too dicult to perceive an even more general approach that subsumes
perimeter search  because of the expensive front to front evaluations  however  we wanted
    this approach is different from the one that we proposed earlier  kaindl  kainz  leeb    smetana        

   

fikaindl   kainz

transpositions

linear space search

s

best first search
t

figure    a specialization of our generic approach 
to devise an approach that avoids the need to find a balance between the cost of such
evaluations and their beneficial effect 
a useful specialization of our generic approach that uses memory on both sides of the
search space is illustrated in fig     the traditional best first search uses its assigned
memory as usual  e g   in a   and the linear space search uses as much memory as still
available in a transposition table  reinefeld   marsland         the former first of all orders
the sequence of node generations and finds transpositions  the latter uses its memory for
finding transpositions in another part of the search space  and for caching more accurate
heuristic evaluations closer to t 
when limited memory is available  this approach is very exible  for instance  when
no memory for a transposition table is assigned  this approach combines linear space search
with conventional best first search in a bidirectional style  while this may look quite similar
to bida   note that our approach in contrast performs front to end evaluations  the
memory of the best first search is used to find solutions earlier by meeting its frontier
 rather than t  
when sucient memory is available even for solving the most dicult problem instances
in a domain  also the search in the reverse direction may be performed as a traditional bestfirst search like a   after all  a  is under certain conditions and in a certain sense optimal
with respect to node expansions  dechter   pearl        

    instantiating for limited memory
first we show how our generic approach can be instantiated when only limited memory is
available  of course  any such instantiation should make use of any available domain specific
information  in particular  it should combine those unidirectional search algorithms that
best suit the properties of the domain  see  e g   rao et al         zhang   korf         for
example  in some domains ida  is the choice  while in others depth first branch and bound
 lawler   wood        is much better  in the case of limited memory  either of them is to
be preferred over a  
below we will present experimental results on the fifteen puzzle  a domain that is
characterized by having only few distinct cost values  under this condition  it is reasonable
to select ida  as a linear space search algorithm  since dicult problem instances of the
fifteen puzzle require too much memory using a   when only the manhattan distance
heuristic is used  since a  makes good use of consistent heuristics like this one  dechter  
pearl         we select it for the part of the best first search 
   

fibidirectional heuristic search reconsidered

based on the key idea of bidirectional search  we let a  and ida  search in opposite
directions in steps   and   of our generic approach  respectively  this instantiation of our
generic approach leads to bai  bidirectional a    ida   
optionally  we may also give the ida  search some part of the available memory as a
transposition table  fig    illustrates this instantiation  we call this variant of bai due to
the use of this table bai trans 
if a  cannot find a solution using the given memory  then ida  searches in the reverse
direction towards the frontier of the prior search  since we consider the case of finding
optimal solutions  this search cannot always terminate immediately after a solution is found 
a better solution may exist  and the algorithm must find an optimal one and subsequently
prove that it is optimal 
more technically  the ida  part must be changed slightly  instead of having to find
the goal node  a solution is found whenever the depth first search meets the frontier of the
opposing a  search  if the cost of this solution is smaller than the cost of the best solution
found so far  or if it is the first solution found  then its value is stored  of course  the cost of
the best solution found so far may be sub optimal  or the algorithm does not yet know that
it is already optimal  however  if the stored value does not exceed the non overestimating
threshold of the ida  part  then its depth first search is exited successfully with an optimal
solution 
in addition to these necessary changes  the ida  part has the advantage to start with
an increased initial threshold based on an admissible estimate of the optimal solution cost
as determined by the a  part  since we assume a consistent heuristic h  the minimum of
f   g   h for all nodes in open is always an admissible estimate  therefore  if this estimate
is higher than the usual initial threshold of ida   then it can be used here instead 
moreover  it is not necessary to have the ida  part search again in the space already
explored by a   more technically  when the depth first search invoked by ida  meets a
closed node of the opposing a  search frontier  this branch can be cut off  meeting an open
node is in general insucient   we call this nipping according to the analogous method
described by kwa        
in an ecient implementation of the fifteen puzzle even the effort of hashing at every
node causes an overhead that cannot be ignored  therefore  we implemented bai in such
a way that it avoids hashing at those nodes where   based on the heuristic estimate   it
knows that the frontier of the opposing a  search is still out of reach 
according to step   of our generic approach  the search directions must be assigned to
the a  and the ida  part  respectively  for traditional bidirectional search  pohl       
proposed and used a cardinality criterion for the problem of determining the frontier from
which to select a node for expansion  continue searching from the frontier with fewer open
nodes  while this is utilized for each node expansion in traditional bidirectional search
algorithms  bai has to decide this issue once at the very beginning of the whole search 
when the search space is suciently symmetric  the initial search direction can be
determined at random  when the search space is at least slightly asymmetric and no
specific knowledge for determining the search direction is available  it seems reasonable to
make shallow probes into the search space from both sides and to use the idea behind the
cardinality criterion  since bai incorporates ida   using this algorithm also for probing
is consistent with the overall approach  for example in the fifteen puzzle  the first few
   

fikaindl   kainz

iterations of ida  are searched from both sides  and the direction with fewer generated
nodes is assigned to the ida  part of the overall search  since especially for dicult problems
it will have to search much deeper than the a  part 
let us shortly discuss the behavior of bai  in the best case  it would seem to be the
same as a   in fact  bai can even be better than pure a   bai assigns the search direction
dynamically  which can lead to better results than systematically going in one direction 
in the worst case  bai has to perform the part of a   without savings in the ida  part
 except the effect of nipping  
a key question is how bai saves effort without having enough memory available for
completing the a  search  primarily  it can save one or more of ida  s iterations  due
to the better initial threshold  some of the early iterations can be saved  since the earlier
iterations are comparably cheap  this helps much less than saving the last iteration  the
search can also be terminated after a complete iteration of ida  if the cost of the best
solution already found is not larger than the new increased threshold  therefore  large
savings are possible when bai terminates earlier than pure ida  

    instantiating for sucient memory
now let us sketch how our generic approach can be instantiated for the case that sucient
memory is available in the sense that even for solving the most dicult problem instances
in a domain  traditional best first search can terminate successfully with the given memory 
this case is of interest in order to see whether bidirectional search can be better than a  
which is in some sense optimal over unidirectional algorithms 
when sucient memory is available  instead of ida   or depth first branch and bound 
the reverse search can employ a   in fact  it is easy to construct such an algorithm analogously to bai as described above  just by using a  instead of ida   this instantiation
of our generic approach leads to baa  bidirectional a    a    this algorithm changes
the search direction only once in contrast to bs   for a better utilization of our approach
to dynamically improving heuristic values based on differences  we will introduce a slight
variation of this algorithm below 

   an approach to dynamically improving heuristic values based on
differences
our new approach to dynamic improvements of heuristic evaluations during search is based
on differences between known costs and heuristic estimates  such differences are utilized
by two concrete methods as presented below  the basic idea common to these methods
is that for many nodes during the search  the actual cost of a path to or from them is
already known  since the static heuristic values can normally be gained rather cheaply  the
differences can be computed that signify the error made in their evaluation compared to the
cost of the known path  these differences are utilized to improve other heuristic estimates
during the same search 
in order to be able to compute such differences  the search must be bidirectional  we
focus here on the context of our non traditional approach to bidirectional heuristic search
described above  actually  application is also possible in the context of traditional bidirec   

fibidirectional heuristic search reconsidered

a
b 
h  a 

g  a 

search
frontier

s

g   b  

diff   b  
h  b  

t
b  diff   b  

diff   bi    g   bi    h  bi 

diff   b  

mindiff    min  diff   bi   

b 

i

h  a    h  a    mindiff 

figure    an illustration of the add idea 
tional search like bs   this involves  however  intricacies that are beyond the scope of this
paper  so  the interested reader is referred to  kainz        

    the add method

the first method instantiates this approach by adding a constant derived from such differences to the heuristic values of the static evaluation function  therefore  we call it the add
method 
note  that adding a constant to all evaluations does not change the order of node
expansions in a unidirectional search algorithm like a   so  the benefit from this approach
may not be immediately obvious  however  in bidirectional search algorithms using frontto end evaluations  estimates are compared to the cost of the best solution found so far
 which is not necessarily already an optimal one   and having better estimates available for
such comparisons improves the eciency due to earlier termination  we explain in more
detail below how we apply this approach in the context of our non traditional approach to
bidirectional heuristic search 
see fig    for the key idea of this method  we assume consistency of the static heuristic
evaluator hd   around the goal node t  a search has examined a part of the graph and stored
all the optimal paths from nodes bi on its closed fringe to t  for each node bi   its heuristic
value h   bi   is computed and subtracted from the optimal path cost g  bi     g  bi    
h   bi    resulting in diff   bi    this is actually the error made by the heuristic evaluation
of node bi   the minimum of diff  bi   for all nodes bi on the fringe is computed   we
call it mindiff   
the point of the add method is that any consistent heuristic value h   a  for some
node a outside this stored graph underestimates h   a  by at least mindiff    we prove this
precisely below  but first we need to show a result about diff  

lemma     if the heuristic h  is consistent  then on any optimal path from some node n
to t with an intermediary node m

diff  m   diff  n 
holds  i e   diff  can only decrease on an optimal path with decreasing distance to the goal
node t 
   

fikaindl   kainz

proof  if the heuristic h  is consistent  then we have
h   n   h   m    k   n  m 
from this we simply obtain

g  m    h   m   g  m    k  n  m    h   n 
since n and m are on one optimal path to t  we know that

g  n    g  m    k   n  m 
after substitutions we obtain

g  m    h   m   g  n    h   n 
and equivalently
diff  m   diff  n 

 

which proves the lemma 

theorem     if the heuristic h  is consistent  then it is possible to compute an admissible

heuristic h  for some node a outside the search frontier around t by

h  a    h  a    mindiff   h   a 

proof  when some path exists from node a to t  also an optimal path must exist  and
let it go through the frontier node bj    if no such path exists  h   a  is infinite and the
theorem holds   from lemma   and the definition of mindiff  we know that
mindiff   diff  bj    diff   a 

since diff  is the error made by the heuristic h    we can write

h   a    diff  a    h   a 
after substitution we obtain

h  a    mindiff   h   a 

 

which proves the theorem 

corollary     h  a  is also an admissible estimate if a is a frontier node 
proof  we can replace a by bj in the proof of theorem     without changing its validity 
 

   

fibidirectional heuristic search reconsidered

theorem     if the heuristic h  is consistent  then h  is consistent 
proof  if the heuristic h  is consistent  then we have
h   n   h   m    k   n  m 
adding the constant mindiff  on both sides leads to

h   n    mindiff   h   m    mindiff    k  n  m 
this means that

h  n   h  m    k  n  m 
which proves the theorem 
 
now let us sketch how this add method can be utilized in the context of our nontraditional approach to bidirectional heuristic search  when using it in baa  for example 
the first a  search must be used to compute some value mindiff   we assume that it starts
from node t   optimal paths to all nodes within the search frontier are guaranteed but not
to all frontier nodes themselves  if a suboptimal path was found to some frontier node 
however  it is known that an optimal path leads through another frontier node with an
optimal path to t  so  this does not change fmin  since the costs of suboptimal paths
cannot inuence the minimum  mindiff  is during the reverse a  search just a constant to
be added to h    we call the resulting algorithm add baa 
of course  a larger value of mindiff  is to be preferred for a given amount of search 
so  the search starting around t should be better guided by expanding always one of those
nodes n with minimal diff   n   we call this variant here add bda   
it is also necessary to check  whether a node to be evaluated is outside or on the fringe of
the graph around t  this is simply achieved in add baa and add bda through hashing 
which is to be done anyway  when a node on the fringe of the first a  search is matched  a
solution is already found  and when the first node of a path inside the stored graph around
t is matched  this path need not be pursued any further  since its optimal continuation is
already known  so  only the evaluator h  is actually used  which is consistent  and therefore
a  does not have to re open nodes  pearl         the search terminates when it selects
some node n for expansion with f   n    g   n    h   n  not being smaller than the cost of
the best solution found so far  which is proven this way to be an optimal one 
for more details on this method and its theoretical properties we refer the interested
reader to  kainz        

    the max method

the second method computes its own estimate based on such differences and uses the
maximum of this and the static estimate  therefore  we call it the max method 
see fig    for the key idea of this method  we assume consistency of the static heuristic
evaluator hd   and that a path from s to a with cost g  a  is known  so we know for its
evaluation of node a  h   a   g  a   the difference is diff   a    g   a    h   a   we
use this difference for the construction of an admissible estimate f   a  of the cost of an
    earlier we called it add a   kainz   kaindl        

   

fikaindl   kainz

a

k  a b  

g  a 
h  a 

diff  a 
h  a 

b 

h  b  

g 
  b  

h  b  

s

h  b  

diff  a    g  a    h  a 
fmin    min  g    bi    h  bi   

 
b  g  b  

t
g   b  

b 

i

h  a    max  h  a   fmin    h  a   
f  a    max  f  a   fmin    diff  a   

figure    an illustration of the max idea 
optimal path from s to t that is constrained to go through a  note  that g  a    g  a  is
not necessary  so we call the difference used here diff  a  instead of diff   a  
in addition  we assume that a search has been performed from t in the reverse direction 
from this search  we assume that from all nodes bi on its closed fringe optimal paths to t
are known  with cost g  bi    therefore  it is possible to compute
fmin    min
 g  b     h   bi   
i   i

based on these assumptions  we can again construct a dynamic evaluation function as
follows 
theorem     if the heuristic h  is consistent  then it is possible to compute an admissible
heuristic h   for some node a outside the search frontier around t by
h   a    fmin    h  a   h   a 
proof  every path from a to t must go through some frontier node bj   the cost cj of
any such path is bounded from below as follows 
cj  k  a  bj     g  bj  
if h  is consistent  it is possible to estimate the optimal cost of a path between two nodes
through
k  a  bj    h   bj     h   a 
therefore  we can write
cj  h  bj     h   a    g  bj  
since fmin    min
 g  b     h   bi     we can also write
i   i

cj  fmin    h   a 
this is valid for the cost of any path from a to t including an optimal one  and so we can

conclude

which proves the theorem 

h  a   fmin    h   a 
   

 

fibidirectional heuristic search reconsidered

corollary     h   a  is also an admissible estimate if a is a frontier node 
proof  we can replace a by bj in the proof of theorem     without changing its validity 
 

this dynamic evaluation function is not necessarily better for all nodes than the static
function  and so it is useful to combine these functions 

h  a    max h  a   fmin    h   a  
since both are admissible the resulting function is also admissible  when the value fmin 
changes during the search  however  h  is not consistent 
since in the formula for computing h  the originally derived difference diff   a   
g  a    h   a  is not included  we also derive here the overall evaluation function

f   a    max f  a   fmin    diff   a  
now let us sketch how this max method can be utilized in the context of our nontraditional approach to bidirectional heuristic search  when using it in bai  for example 
the a  search starting first must be used to compute some value fmin   we assume that
it starts from node t   again  like in the add method  it is not necessary that optimal
paths from t to all frontier nodes are known  for getting values fmin  that are as large as
possible for a given amount of search  the usual strategy of selecting a node with minimal
f  is appropriate here 
the subsequent ida  search within bai must perform hashing in the graph stored
around t in order to check  whether a node to be evaluated is outside or on the fringe of the
graph around t  in the latter case a new solution is found  we call the resulting algorithm
max bai  when a transposition table  reinefeld   marsland        is used in addition as
in bai trans  we call it max bai trans 
most interestingly  ida  can also utilize the max method without additional storage
requirements  let us sketch the basic approach for such a linear space application of this
method here  while ida  normally searches in one direction only  we let it alternate the
search direction after each iteration until a solution is found  actually  this procedure is
outside our generic approach to bidirectional search as presented above  but we include it
here since a linear space approach is of special interest  fmini is computed in one iteration
to be used in the subsequent iteration  which must search in the alternate direction so that
it can use this value  for example  in an iteration searching from t to s  the adapted ida 
computes hmax    max h   bi    for all nodes bi   this value is used as an estimate in
the subsequent iteration for checking  whether a node a to be evaluated is  outside   if
h   a    hmax  is true  then node a cannot be  inside  and h  a  can be safely used  this
check substitutes hashing in a stored graph  since the static heuristic function normally
underestimates  however  for some nodes the heuristic h  is not used although it would
theoretically be correct to use it  we call the resulting algorithm that is based on this idea
max ida  
for more details on this method and its theoretical properties we refer the interested
reader to  kainz        
   

fikaindl   kainz

results relative to korf s ida  in  

           

nodes generated

   

running time
    

  

    

         
    

  

    

  

    

    

    

    
    

    

  

   

   
 
maxida 

ida 

ida probing

idps 
depth  

trans

bida 
depth   

baitrans

max baitrans

figure    comparison on the fifteen puzzle      instances  

   results of experiments with these new approaches

in order to provide some empirical evidence for the effectiveness and the eciency of our
new approaches  we made experiments in two different domains  fifteen puzzle and mazes 

    fifteen puzzle

first let us have a look on specific experimental results for finding optimal solutions to a
set of fifteen puzzle problems  once again the complete set of     instances used by korf
        we compare algorithms that achieve the previously best results in this domain with
our new algorithms  all the compared algorithms use no domain specific knowledge about
the puzzle other than the manhattan distance heuristic    the main storage available on
the convex c     used was up to     mbytes 
fig    shows a comparison of several algorithms in terms of the average number of node
generations and their running times  the data are normalized to the respective search
effort of ida   in korf s implementation   as already noted above  ida  needs on average
slightly less than half an hour on the machine that we used to find an optimal solution to
one problem instance  so  even slight improvements mean notable savings in time 
ida   max ida  and ida  probing are linear space algorithms that use no additional
storage  and so their performance cannot compete with the algorithms that use up to    
mbytes  max ida  generates only      percent of the number of nodes generated by ida 
due to its dynamic improvements of the heuristic evaluations according to our difference
approach  since these  however  imply some overhead per node searched  it needs     
percent of ida  s running time  ida  probing is a variant of ida  that just uses our
probing idea for selecting the search direction  although the search space of the sliding tile
puzzle appears to be quite symmetric  it is interesting to see how much can be gained here
just by selecting the search direction dynamically  since ida  probing has no overhead in
running time  it is even faster than max ida   in order to see how well probing via three
iterations already indicates the better search direction  we compared its result with that
    with much improved heuristic functions  much more ecient searches result  culberson   schaeffer 
      and even solving twenty four puzzle instances has become feasible  korf   taylor        

   

fibidirectional heuristic search reconsidered

of a perfect oracle  using it would still generate    percent of ida  s nodes  i e   ida probing with an overhead in generated nodes for determining the search direction of only
less than     percent is overall just   percent worse than this  systematically searching in
the backward direction  however  is not significantly better than systematically searching
in the forward direction due to high standard deviations  although it saves    percent 
idps  uses just some few nodes of additional storage for its perimeter  due to the
related overhead of the front to front evaluations  it needs about the same running time as
ida  probing  although it generates much fewer nodes   
trans  using     mbytes of memory  achieves savings of about half of the running time
compared to ida   it saves even much more node generations with this amount of memory 
but the effort for hashing slows it down   
another technique to prune duplicate nodes was proposed by taylor and korf        
using a finite state machine  its results are not included in fig     since we lack data on
the running time  no such data are given by taylor and korf         and we did not reimplement this technique   ida  employing this pruning technique generated       million
nodes on the same set of instances as reported by taylor and korf         which means
     percent of the number of nodes generated by pure ida   the finite state machine that
achieved this result contained        states  requiring only a modest amount of storage 
of course  the finite state machine must be built in a pre processing stage first  but its
use during the search involves only a small and constant overhead in running time  so 
for the sliding tile puzzles  this approach seems to be better than transposition tables for
eliminating duplicates  it actually appears to represent the most successful approach yet
to solving fifteen puzzle problems using unidirectional search 
in principle  we have provided all the available storage to bida   manzini         the
most ecient algorithm of the perimeter approach  in the given     mbytes of storage 
bida  can store a maximum of   million perimeter nodes  this would correspond to a
perimeter depth of     where bida  generates just     percent of the number of nodes
generated by ida   but needs    percent of ida  s running time  so  as shown in fig 
  above it can use more memory for further savings in the number of nodes generated 
but it has an optimum in running time for a smaller perimeter size       that we show in
fig     also with the reduced perimeter  bida  achieves the best result in terms of nodes
    the results reported by dillenburg and nelson        are based on runs using a different sample set of
the fifteen puzzle  and a different perimeter depth  using the same perimeter depth      the results on
korf s set with our re implementation are even better in terms of the number of node generations  but
very much slower in terms of running time  even slower than ida    in personal communication with
john dillenburg it turned out that their implementation of ida  is slower than korf s one  which we are
using  by a factor of about    per generated node  in such an implementation the overhead especially
of wave shaping does not show up that clearly as it does in an ecient one  since smaller perimeter
depth means fewer stored nodes and therefore less overhead through wave shaping  the perimeter depth
  results in better running time  and consequently we show these data in our figure 
    the data in the figure were gained using a re implementation of trans based on ecient code provided
by jonathan shaeffer  note the different way of presenting the results  absolute data in our figure vs 
relative to problem diculty by reinefeld and marsland         we had to re implement trans  since no
data about the performance of trans with the amount of memory that we used were available  and since
we integrate this technique into some of our algorithms  actually  trans move is the best algorithm
described by reinefeld and marsland         but its absolute results are less than one percent better
than those of trans  therefore  we did not re implement trans move and cannot include it into the
figure 

   

fikaindl   kainz

generated   just     percent of the number of nodes generated by ida   while bida  s
overhead for computing front to front evaluations is smaller than that of idps   bida 
needs      percent of ida  s running time   
our algorithms bai trans and max bai trans can store a maximum of   million nodes
in our implementation of these algorithms in the given     mbytes of storage  bai trans
generates clearly more nodes       percent of ida   than bida   but since its overhead
per node is much smaller  its running time is even slightly better       percent   max baitrans   additionally utilizing our new difference approach   achieves the fastest searches 
needing just      percent of the time needed by ida   for achieving this result  it uses
  million nodes for the max method  and bai  and   million nodes for trans  in order
to see the inuence of trans  we compare this result with that of max bai  not shown in
fig    in order not to clutter it  that uses just the   million nodes for the max method
 and bai   needing      percent of the time used by ida   it is just slightly slower than
max bai trans  which shows the comparably modest inuence of trans 
in summary  our new approach to bidirectional heuristic search enhanced by our max
method achieves the fastest searches for finding optimal solutions on the fifteen puzzle of
all those using the manhattan distance heuristic as the only knowledge source  the superiority of max bai trans in terms of running time over previous algorithms is statistically
significant  for example  the probability that the improvement of the running time over
bida  is due to chance uctuation is smaller than      percent according to a test that
compares the means of the paired samples of the absolute running times  and it is even much
smaller according to the same test for the data relative to the diculty of each instance as
well as according to the sign test    when using less ecient implementations of ida  as
the basis  the difference would become smaller  since our approach has less overhead per
node searched and therefore  gains  less compared to pure ida   however  we prefer to
compare the algorithms using the most ecient implementation that we have available  for
more details on these results see  kainz        

    mazes

in order to get a better understanding of the usefulness of our new approach  we made
also experiments in a second domain   finding shortest paths in a maze  these are the
same maze problems as described above in subsection      in addition to these           
mazes  we also made experiments with much smaller            mazes  in order to see
whether the size inuences the relative performance of the various algorithms  we compare
known algorithms that achieve the best results in this domain  as far as we found  with our
algorithms add baa and add bda  the traditional shortest path algorithm by dijkstra
       corresponds to a  without using heuristic knowledge  so we need not explicitly
include it in our experiments  also in these experiments  all the compared algorithms use
no domain specific knowledge other than the manhattan distance heuristic  and the main
storage available on the convex c     used was up to     mbytes 
    as noted already above in subsection      bida  s result here is worse than the data reported by manzini
        which is primarily due to using a different machine and a different implementation that is based
on the very ecient code of ida  for the puzzle provided to us by korf that we are using 
    for more details on the statistic tests used we refer the interested reader to  kaindl  leeb    smetana 
      kaindl   smetana        

   

fibidirectional heuristic search reconsidered

results relative to a  in  

   

nodes generated

     

running time

   
   

     
     

    

       

    
    

   

         

  
  
  
  
 
bs 

ps 
depth   

a 

add baa

add bda

figure     comparison on the maze problems      instances  
fig     shows a comparison of several algorithms in terms of the average number of
node generations and their running times  the data are normalized to the respective search
effort of a   as already noted above  a  needs on average less than two minutes on the
machine that we used to find an optimal solution to one problem instance 
bs  generates slightly more nodes for solving these problems than a         percent  
and its running time is even worse  while it may seem that the implementation of bs 
could be further optimized  it is clear that there is some overhead as compared to a   so 
bs  can certainly not improve on a  here 
ps   dillenburg   nelson          using perimeter search  i e   the front to front
method   generates      percent of the number of nodes of a   but it needs       percent
of the time used by a   these data correspond to a perimeter depth of     and they are the
best results of those shown in fig    above in terms of running time  see also the discussion
in subsection       so  also ps  cannot really improve on a  here 
our algorithms add baa and add bda generate clearly fewer nodes than a       
and      percent  respectively   the better performance of add bda reects the higher
mindiff  value that is achieved through guiding the first of the two best first searches by
expanding always one of those nodes n with minimal diff  n   more precisely  add bda
achieved mindiff          from a reverse search of    k nodes   while add baa achieved
only mindiff         from a reverse search of even     k nodes   the performance of addbaa in terms of running time is  however  still much the same as that of a   at least in this
implementation as derived from bs    add bda achieves the fastest searches  needing just
     percent of the time needed by a   so  the application of our approach to dynamically
improving heuristic values is feasible here with very little overhead 
the superiority of add bda over previous algorithms is statistically significant  for
example  the probability that the improvement in terms of running time over a  is due
to chance uctuation is smaller than       percent according to all the three statistic tests
that we made analogously to those for the fifteen puzzle data  the same significance result
holds for the improvement with respect to the number of node generations  both add bda
and a  as well as the other algorithms compared here generate all child nodes at once
in node expansions  and the superiority of add bda over these algorithms is statistically
   

fikaindl   kainz

table    overview of approaches to bidirectional heuristic search 
front to front
front to end
traditional
bhffa  bhffa  bhpa  bs 
non traditional ps   idps   bida  max bai trans  add bda
significant also in this respect  this is particularly interesting  since the optimality result
of a  over unidirectional algorithms is stated in the sense that a  never expands a node
that could be skipped by some other  unidirectional  algorithm  dechter   pearl        
since the relative results on the            mazes are very similar  we do not show
them explicitly here  see  however  kainz         they provide some empirical evidence
that the performance of these algorithms is not just peculiar for a certain size of mazes 

   discussion
after this presentation of our new approach to bidirectional heuristic search and its experimental results  let us put it into perspective  table   provides an overview of the existing
approaches according to the way of evaluating and the way of organizing the change s 
of search direction  the algorithms that instantiate our new generic approach fall into the
category of non traditional bidirectional heuristic search algorithms  that change the search
direction only once  and that perform front to end evaluations  while this approach allows
coping with limited memory  e g   in max bai and max bai trans   it is also useful in the
case of sucient memory  e g   add bda  
due to avoiding expensive front to front evaluations  our approach to dynamically improving heuristic evaluations is less effective than perimeter search in saving node generations  at least in the fifteen puzzle domain   however  it has less overhead and is therefore
more ecient per node searched in terms of running time 
from the viewpoint of table    our approach somehow  completes  the picture of bidirectional heuristic search   note  however  that the non traditional approach was found
independently of the work on perimeter search   still  there should be ample opportunity
for further research on bidirectional search  especially when looking at it from other perspectives  another issue is  e g   whether linear space search is involved or not  we propose
in this paper max ida   an algorithm that alternates the search direction before every
iteration in order to be able to use information from the previous iteration for improving
the heuristic evaluations dynamically  yet another perspective is whether an algorithm is
designed to find optimal solutions or not  in this paper  we only focused on admissible
search algorithms  as discussed above  however  there also exist   admissible bidirectional
search algorithms that guarantee solutions with a known error bound  as well as others that
find solutions without any guarantee about their quality  e g   d node retargeting  
when contrasting the traditional and the non traditional approaches to bidirectional
heuristic search  it may appear to be strange that the less exible approach delivers the
better results  why should it be  better  to change the search direction just once  while
it is dicult to provide a generally convincing answer to this question  let us summarize
some observations 
   

fibidirectional heuristic search reconsidered

 traditional bidirectional search typically requires exponential space  kaindl and

khorsand        showed that such a search is possible using limited memory  but
because of the complexity of such algorithms the runtime eciency was insucient 

 for the perimeter depths where perimeter search is successful  its perimeters are

much smaller than the frontiers of traditional front to front algorithms  through
parameterizing the perimeter depth it is possible to balance the effort for front tofront evaluations with their effect of improving heuristic evaluations dynamically 

 the runtime optimizations of bida  over idps  are only feasible when the perimeter
stays constant  at least for each iteration  

 the mindiff value of the add method becomes higher when the search for computing

it generates more nodes  so  in the context of a traditional bidirectional search it is
initially small 

 applying the max idea becomes much more complex  e g   in bs  where both search
frontiers change  kainz        

in general  one of the major problems of heuristic search is how to use available but
limited memory effectively  pure unidirectional approaches to utilizing limited memory led
to less convincing results  chakrabarti et al         sen   bagchi        russell       
ghosh et al         reinefeld   marsland        than the non traditional approaches to
bidirectional search as shown in table    in particular  our generic approach allows very
exible and effective use of available memory  this is  however  partly due to its integration
of various unidirectional strategies  future work may investigate the direct use of such unidirectional approaches to utilizing limited memory in instantiations of our generic approach
to bidirectional search 
in addition  bidirectional search allows the use of memory for dynamically improving
heuristic evaluations in ways that are infeasible for strictly unidirectional search  this is
demonstrated by the front to front approach as well as by our difference method  the
following simple idea implicitly behind these approaches may further illustrate this  given
a breadth first  uniform cost  search to some depth d  any node outside its frontier must
be at least d     steps away from its start s  a reverse search towards s may use this
fact to compute an estimate for any node outside this frontier that is at least d      this
idea cannot be used in a strictly unidirectional search  note  however  that the approaches
discussed here are much more complex and useful than this simple idea  since they take
known costs and heuristic estimates as well as differences of these into account  they can
provide much better estimates especially for nodes that are far outside the already given
opposite search frontier 
in some sense  it is also possible to view our difference approach as learning  since also
there differences between predicted and actual outcomes are important  usual machine
learning research  however  strives for using the results from one problem instance for solving
subsequent instances  which we did not attempt  an in depth discussion of this relationship
is outside the scope of this paper  note  however  that also the approaches using front tofront evaluations could be considered from this viewpoint 
   

fikaindl   kainz

   conclusion

based on new insights about previous approaches to bidirectional heuristic search  we propose in this paper

 a new generic approach to non traditional bidirectional search with front to end evaluations  and

 a new approach to dynamically improving heuristic values in this context 
we showed how to successfully instantiate this generic approach for the very important
case when available memory is limited  this memory can also be utilized for eciently
improving heuristic values  for certain problems where sucient memory is available  we
proposed an instantiation in the form of an algorithm that challenges a   which is in a
certain sense optimal over unidirectional search algorithms  the optimality result of a  over
unidirectional competitors by dechter and pearl        does not imply that bidirectional
search cannot be more ecient  and in our experiments we found some empirical evidence
that our new algorithm can be more ecient than a  both in terms of node expansions and
running time  we also showed that our approach was more ecient in terms of running time
than any other bidirectional or unidirectional search approach using the same information
in two different domains  these results are statistically significant 
while traditional bidirectional search did not yet achieve improvements over admissible unidirectional search  the non traditional way of performing the opposing searches in
sequence   as exemplified by perimeter search and by our approach   seems to have
great potential  in this sense  we show that bidirectional heuristic search is viable and
consequently propose that this search strategy be reconsidered 

acknowledgements

over the years  several people cooperated with the first author on research in heuristic
search and in particular bidirectional search  aliasghar khorsand  andreas koll  angelika
leeb  harald smetana and roland steiner  some of their work served as a basis for the work
presented in this paper  for our experiments we had a convex c     at the computing
center of the tu vienna available  our implementations are based on the very ecient
code of ida  and a  for the puzzle made available by richard korf and an ecient hashing
schema by jonathan shaeffer  finally  we acknowledge the useful comments on earlier drafts
by andreas auer  dennis de champeaux  stefan kramer  giovanni manzini  ira pohl and
roland steiner  parts of this paper already appeared in proc  fourteenth international
joint conference on artificial intelligence  ijcai     and in proc  thirteenth national
conference on artificial intelligence  aaai     

appendix  glossary of notation
s  t
d

c

start node and goal target node  respectively 
current search direction index  when search is in the forward
direction d      and when in the backward direction d     
cost of an optimal path from s to t 
   

fibidirectional heuristic search reconsidered

kd  m  n 
gd n 
hd  n 
gd n   hd n 
fd  n 
fdj
hd n 
fd  n 
lmin
opend
closedd
jopendj

  a 
 d  a 
 jd  a 

cost of an optimal path from m to n if d      or from n to m if d     
cost of an optimal path from s to n if d      or from n to t if d     
cost of an optimal path from n to t if d      or from s to n if d     
estimates of gd n  and hd  n   respectively 
static evaluation function  gd  n    hd  n  
one of the f  values of expanded nodes in search direction d 
dynamic estimate of hd  n  
dynamic evaluation function  gd  n    hd  n  
cost of the best  least costly  complete path found so far from s to t 
the set of open nodes in search direction d 
the set of closed nodes in search direction d 
number of nodes in opend  
number of nodes expanded by algorithm a 
number of nodes expanded by algorithm a in search direction d 
number of those nodes with value fdj expanded by algorithm a in
search direction d 

references

chakrabarti  p   ghose  s   acharya  a     desarkar  s          heuristic search in restricted memory  artificial intelligence                  
culberson  j     schaeffer  j          searching with pattern databases  in mccalla  g 
 ed    advances in artificial intelligence  pp           springer verlag  berlin 
davis  h   pollack  r     sudkamp  t          towards a better understanding of bidirectional search  in proc  fourth national conference on artificial intelligence  aaai     pp         menlo park  ca  aaai press   the mit press 
de champeaux  d          bidirectional heuristic search again  j  acm                
de champeaux  d     sint  l          an improved bidirectional heuristic search algorithm 
j  acm                  
dechter  r     pearl  j          generalized best first strategies and the optimality of a 
j  acm                  
dijkstra  e          a note on two problems in connexion with graphs  in numerische
mathematik    pp          
dillenburg  j     nelson  p          perimeter search  artificial intelligence                  
ghosh  s   mahanti  a     nau  d          its  an ecient limited memory heuristic
tree search algorithm  in proc  twelfth national conference on artificial intelligence
 aaai      pp             menlo park  ca  aaai press   the mit press 
hart  p   nilsson  n     raphael  b          a formal basis for the heuristic determination of
minimum cost paths  ieee transactions on systems science and cybernetics  ssc  
ssc                
   

fikaindl   kainz

kaindl  h          tree searching algorithms  in marsland  t     schaeffer  j   eds   
computers  chess  and cognition  pp           springer verlag  new york 
kaindl  h   kainz  g   leeb  a     smetana  h          how to use limited memory in
heuristic search  in proc  fourteenth international joint conference on artificial intelligence  ijcai      pp           san francisco  ca  morgan kaufmann publishers 
kaindl  h     khorsand  a          memory bounded bidirectional search  in proc  twelfth
national conference on artificial intelligence  aaai      pp             menlo park 
ca  aaai press   the mit press 
kaindl  h   leeb  a     smetana  h          improvements on linear space search algorithms  in proc  eleventh european conference on artificial intelligence  ecai     
pp           chichester  england  wiley 
kaindl  h     scheucher  a          reasons for the effects of bounded look ahead search 
ieee transactions on systems  man  and cybernetics  smc                    
kaindl  h     smetana  h          experimental comparison of heuristic search algorithms 
in aaai    workshop on experimental evaluation of reasoning and search methods 
pp        
kainz  g          heuristische suche in graphen mit der differenz methode  diplomarbeit 
technische universitat wien  vienna  austria 
kainz  g          neue algorithmen fur die bidirektionale heuristische suche  doctoral
dissertation  technische universitat wien  vienna  austria 
kainz  g     kaindl  h          dynamic improvements of heuristic evaluations during
search  in proc  thirteenth national conference on artificial intelligence  aaai     
pp           menlo park  ca  aaai press   the mit press 
koll  a     kaindl  h          bidirectional best first search with bounded error  summary
of results  in proc  thirteenth international joint conference on artificial intelligence
 ijcai      pp           san francisco  ca  morgan kaufmann publishers 
korf  r          depth first iterative deepening  an optimal admissible tree search  artificial intelligence                 
korf  r          real time heuristic search  artificial intelligence                    
korf  r     taylor  l          finding optimal solutions to the twenty four puzzle  in proc 
thirteenth national conference on artificial intelligence  aaai      pp            
menlo park  ca  aaai press   the mit press 
kwa  j          bs   an admissible bidirectional staged heuristic search algorithm 
artificial intelligence                 
lawler  e     wood  d          branch and bound methods  a survey  operations research 
                
   

fibidirectional heuristic search reconsidered

manzini  g          bida   an improved perimeter search algorithm  artificial intelligence 
                
nilsson  n          principles of artificial intelligence  tioga  palo alto  ca 
pearl  j          heuristics  intelligent search strategies for computer problem solving 
addison wesley  reading  ma 
pohl  i          first results on the effect of error in heuristic search  in meltzer  b    
michie  d   eds    machine intelligence    pp           edinburgh university press 
edinburgh 
pohl  i          bi directional search  in machine intelligence    pp          edinburgh 
edinburgh university press 
politowski  g     pohl  i          d node retargeting in bidirectional heuristic search  in
proc  fourth national conference on artificial intelligence  aaai      pp          
menlo park  ca  aaai press   the mit press 
rao  v   kumar  v     korf  r          depth first vs best first search  in proc  ninth
national conference on artificial intelligence  aaai      pp           menlo park 
ca  aaai press   the mit press 
reinefeld  a     marsland  t          enhanced iterative deepening search  ieee transactions on pattern analysis and machine intelligence  pami                    
russell  s          ecient memory bounded search methods  in proc  tenth european
conference on artificial intelligence  ecai      pp       chichester  england  wiley 
russell  s     norvig  p          artificial intelligence  a modern approach  prentice hall 
englewood cliffs  nj 
sen  a     bagchi  a          fast recursive formulations for best first search that allow
controlled use of memory  in proc  eleventh international joint conference on artificial intelligence  ijcai      pp           san francisco  ca  morgan kaufmann
publishers 
taylor  l     korf  r          pruning duplicate nodes in depth first search  in proc 
eleventh national conference on artificial intelligence  aaai      pp          
menlo park  ca  aaai press   the mit press 
zhang  w     korf  r          depth first vs  best first search  new results  in proc 
eleventh national conference on artificial intelligence  aaai      pp          
menlo park  ca  aaai press   the mit press 

   

fi