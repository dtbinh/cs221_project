journal artificial intelligence research                 

submitted       published      

bidirectional heuristic search reconsidered
hermann kaindl
gerhard kainz

hermann kaindl siemens at
gerhard kainz siemens at


siemens ag osterreich 
pse
geusaugasse   
a      vienna  austria

abstract

assessment bidirectional heuristic search incorrect since first
published quarter century ago  quite long time  search strategy
achieve expected results  major misunderstanding
reasons behind it  although still wide spread belief bidirectional heuristic
search aicted problem search frontiers passing other  demonstrate
conjecture wrong  based finding  present new generic approach
bidirectional heuristic search new approach dynamically improving heuristic
values feasible bidirectional search only  approaches put perspective
traditional recently proposed approaches order facilitate
better overall understanding  empirical results experiments new approaches
show bidirectional heuristic search performed eciently
limited memory  results suggest bidirectional heuristic search appears
better solving certain dicult problems corresponding unidirectional search 
provides evidence usefulness search strategy long neglected 
summary  show bidirectional heuristic search viable consequently propose
reconsidered 

   background introduction
problem represented state space graph  solutions problem
paths given start node goal target node t  finding solution
attempted searching graph  search guided heuristic information 
called heuristic search  work heuristic search problem solving deals
unidirectional approaches  start heading towards node  see  e g  
pearl        
one goal node explicitly given search operators reversible 
bidirectional search possible  proceeds forward direction
backward direction  see  e g   nilsson         strictly speaking 
even required operators inverses  necessary given node n
set parent nodes pi determined exist operators lead pi
n  searching backwards means generating parent nodes successively goal node
 see  e g   russell   norvig         words  backward search implements reasoning
operators backward direction 
illustrating example class problems bidirectional search
usefully applied  consider finding find shortest path two given places
using given map city  case one way streets  bidirectional search implements
c      ai access foundation morgan kaufmann publishers  rights reserved 

fikaindl   kainz

reasoning following   in order arrive t  one way street leading towards
may used   slightly adapted problem class  cost driving street may

different  depending driving direction  steep street top mountain
may serve example  bidirectional search works correctly case 
backward search implements reasoning backward direction takes account
cost driving forward direction  formally  k  m  n    k  n  m  cost
optimal path n  k  used notational convenience only   bidirectional
search algorithms dealt paper work correctly conditions
require operators reversible cost path either
direction 
bidirectional search shown ecient unidirectional counterpart
heuristic knowledge unavailable  inverse result originally found
experiments bidirectional heuristic search pohl         since kind search
work expected  consensus conjecture bidirectional heuristic
search aicted problem search frontiers passing without intersecting 
situation metaphorically compared pohl missiles pass other 
illustrated figure reprinted nilsson        fig         nilsson conjectured
case bidirectional search may expand twice many nodes would
unidirectional one 
original algorithm bhpa proposed pohl        may actually show
inecient performance  missile metaphor wrong misleading  demonstrate
bidirectional heuristic search actually aicted problem search frontiers
passing other  performance bhpa much worse originally expected
two different reasons 
   bhpa s search frontiers typically go other 
   major effort spent search frontiers already met  finding
better solutions one found first meeting search frontiers
optimal one  finally proving indeed better solution possible 
first reason specific bhpa incidentally resolved technical improvements introduced related algorithm bs  kwa         second
issue  however  major obstacle eciency bs  actually bidirectional search algorithm performs heuristic front to end evaluations  i e   evaluations
estimate minimal cost path evaluated node search front
t  note  kind evaluations performed typical unidirectional search 
common belief missile metaphor  however  so called wave shaping
algorithms developed de champeaux         de champeaux sint        
politowski pohl         idea steer search  wave fronts  together 
contrast bhpa bs   algorithms perform front to front evaluations  i e   evaluations estimate minimal cost path evaluated node one search
front nodes opposing front  fact  algorithms achieve large reductions
number nodes searched compared algorithms perform front to end evaluations  however  either excessively computationally demanding 
   notation explained appendix 

   

fibidirectional heuristic search reconsidered

restriction solution quality  still  reductions number nodes
searched using front to front evaluations come from  all  algorithms performing
front to end evaluations suffer problem search frontiers passing
other 
order answer important question  let us shortly focus common property
heuristic evaluation functions estimate minimal cost path applying
heuristic knowledge static information encoded state information node
evaluated  static evaluation functions typically evaluate error  i e  
difference minimal cost path heuristic estimate cases
greater zero  approach improve accuracy given static evaluation function
perform search utilize results  since involves dynamic changes  call
dynamic evaluation function  dynamic evaluations bounded look ahead search
studied various contexts kaindl scheucher        
static evaluation errors typically smaller paths smaller cost 
observed pearl         front to front evaluations therefore typically accurate
front to end evaluations  addition  costs paths nodes
opposing search frontier  or s  respectively  known  overall evaluations
front to front algorithms much accurate front to end evaluations  since
former utilize results search opposing direction  may view
approach dynamically improving heuristic values static evaluation function  due
asset  wave shaping algorithms achieve large reductions terms nodes generated
since perform front to front evaluations  however  quite expensive terms
running time  per node examined   calls finding appropriate balance 
fact  dillenburg nelson        well manzini        developed recent nontraditional approach bidirectional search called perimeter search achieves exactly
this 
devised new computationally much cheaper approach dynamic improvements call difference approach  utilizes differences known costs
heuristic estimates given evaluation function improve heuristic estimates
function  difference approach applied bidirectional heuristic search
algorithms perform heuristic front to end evaluations  exemplified two new
methods dynamic improvements heuristic evaluations search 
devised new approach bidirectional heuristic search performs heuristic
front to end evaluations  dynamic improvements heuristic evaluations
search embedded eciently effectively  approach generic sense
encompasses whole class  non traditional  bidirectional search algorithms 
show paper  instantiated case availability sucient
memory well case limited memory 
results experiments suggest bidirectional heuristic search improve
unidirectional heuristic search respect generated nodes running time
 for certain problems finding optimal solutions   since missile metaphor wrong 
bidirectional heuristic search using approach without time consuming
front to front evaluations  so  bidirectional heuristic search viable propose
reconsidered 
   

fikaindl   kainz

paper organized following manner  first  discuss previous work
present new theoretical empirical results existing approaches bidirectional
heuristic search  describe new generic approach non traditional bidirectional
search two instantiations  thereafter propose new approach dynamically
improving heuristic values based differences known costs heuristic
estimates  presentation experimental results applying approaches 
discuss context various approaches bidirectional heuristic search
previously proposed 

   previous work

order make paper self contained  sketch essentials previous work
heuristic search algorithms focus bidirectional heuristic search  without going
detail necessary understand new results previous work
new approaches 

    unidirectional heuristic search algorithms

many unidirectional search algorithms presented  would prohibitive
review here  rather  focus unidirectional algorithms form
basis bidirectional search discussed paper  first  review traditional
best first search algorithm a   hart  nilsson    raphael         then  shortly explain
linear space algorithm ida   iterative deepening a   proposed korf         finally 
review algorithm called trans  reinefeld   marsland        implements form
enhanced iterative deepening search 
a  maintains set open so called open nodes generated
yet expanded  i e   frontier nodes  much best first search algorithm  always
selects node open minimum estimated cost  one considers  best  
node expanded moved open closed  a  specifically estimates
cost node n evaluation function form f  n    g  n   h n   g  n 
 sum  cost path found n  h n  heuristic estimate cost
reaching goal n  i e   cost optimal path goal t  h n 
never overestimates cost  it said admissible  solution exists  a 
guaranteed return optimal  minimum cost  solution  it said admissible  
certain conditions  a  optimal admissible unidirectional heuristic search
algorithms using information  sense never expands nodes
 dechter   pearl         emphasize optimality result
a  compares unidirectional competitors  bidirectional approach may well
improve performance a   major limitation a  memory requirement 
proportional number nodes stored therefore practical cases
exponential 
ida  designed address memory problem  using heuristic
evaluation function f  n  a   ida  performs iterations depth first searches  consequently  linear space requirements only  although performing depth first searches
iteratively deeper deeper heavily used computer chess programs
context alpha beta minimax search since sixties still use  see kaindl        
   

fibidirectional heuristic search reconsidered

b 
k  a b  



k  a b   b 
h  b  

g  a 

h  b  

k  a b  
h  a 

b 


h  b  

h  a    max  h  a   min  k  a bi    h  bi     





figure    illustration back up idea 
application approach problem solving searches marked breakthrough
solving dicult problems  ida  s depth first searches guided threshold
initially set estimated cost s  threshold succeeding iteration
minimum f  value exceeded threshold previous iteration 
ida  shows best performance trees  one major problems
pure form cannot deal duplicate nodes sense transpositions  transposition
arises  several paths lead node  search space represented
directed acyclic graph  dag   disadvantage ida  relates advantage
requiring linear space 
fortunately  computers memory available needed ida  
memory utilized recognizing duplicate nodes two ways  using finite state machine  taylor   korf         transposition table implemented hash table  reinefeld
  marsland         due general applicability wider variety domains 
since bidirectional algorithms partly make use it  focus latter technique 
algorithm trans proposed reinefeld marsland        uses transposition
table ida   since size table deliberately parameterized 
approach utilizing limited memory  analogously earlier applications transposition
tables computer chess programs  trans utilizes table actually two purposes 

recognizing transpositions 
caching best heuristic values acquired dynamically 
since latter use dicult understand  explain underlying idea
depth  back up idea illustrated fig     normal search
nodes bi statically evaluated stored  values still used backing
node stored   case trans transposition table 
dynamic value minimum estimated costs best paths found
nodes bi   unless static evaluator consistent  useful store maximum
dynamic static value node  cached node re searched 
improved value often used instead value assigned directly static
evaluation function 
apart use trans  back up idea actually widely applied many algorithms ma   chakrabarti  ghose  acharya    desarkar         mrec  sen   bagchi 
       rta   korf         sma   russell         ghosh  mahanti    nau        
   

fikaindl   kainz

advantages little overhead steady  though often modest  improvement
increasing memory size  addition  idea works goal condition instead
goal node specified  i e   require goal node explicitly given  however 
applicable re searched cached nodes  cannot see could make
sense context traditional best first search a  

    traditional approach bidirectional heuristic search
first  look older approach bidirectional heuristic search forward
backward searches alternate  call traditional approach  encompasses
algorithms performing front to end others performing front to front evaluations 
      front to end evaluations

since first proposed algorithm bidirectional heuristic search called bhpa  pohl       
performed front to end evaluations  let us begin approach  employs heuristic
evaluation functions hd  n  estimate cost optimal path evaluated
node n s  respectively  depending search direction d  precisely  h   n 
estimates cost optimal path n forward search  h   n 
n backward search  note  always optimal path
found  i e   s  therefore cost path estimated
evaluation function fd uses hd heuristic component  viewpoint
backward search targets node s  however  may seem cost frontier
estimated heuristically  precisely cost frontier 
issue matters cost path either direction 
view bhpa search essentially two a  type searches opposite directions 
i e   traditional best first searches   performed quasi simultaneously  i e  
sequential machine one node expanded another  search direction changed
 at least  time time  decision searching forward backward direction
made anew node expansion according cardinality criterion  pohl        

jopen j jopen j   else  
whenever search frontiers meet node n  solution found  cost
g  n    g  n   i e   cost path found forward search n  plus
cost path found backward search n t  even two parts
solution forward backward search optimal  however  concatenated
solution path necessarily optimal  therefore  algorithm requires special
termination condition guaranteeing optimal solutions  termination condition
   precisely  bhpa viewed consist two hpa searches  pohl        opposing directions 
long heuristic function used consistent values weighted equally gd  values 
relevant difference check whether open become empty  admissible consistent
heuristic functions  option move nodes back closed open important  new better
gd  value found  heuristic function consistent hd  m  hd  n    kd  m  n  nodes n 
implies hd admissible  i e   heuristic function never overestimates real cost 

   

fibidirectional heuristic search reconsidered

bhpa follows 

lmin max  min f  x   min f   x  
x open 

x open 

   

condition essentially means cost lmin best  least costly  complete
path found far larger estimate computed fd  values
search frontiers  heuristic used estimates admissible  path
must already optimal solution order satisfy termination condition  since
understanding condition important paper  elaborate depth
below 
implicitly condition successful termination improved algorithm
bs   kwa         removes nodes n whose fd  values lmin terminates
open  open  empty  technique removing nodes called trimming
bs   newly generated nodes placed sets open nodes all 
called screening  techniques improve bhpa  just  respect
saving memory  bs  additionally includes improvements reduce number nodes
generated  major improvements following 

nipping  node selected expansion already closed opposite search tree  put closed current search tree without
expansion 
pruning  situation  descendants node open opposite
search tree removed 

bhpa bs  admissible fd consistent  however  bhpa s results
clearly less ecient a  finding optimal solutions  bs  never
shown really ecient a  
koll kaindl        first conjecture missile metaphor misleading explanation provided  preliminary  evidence finding  based
realizing fulfilling termination condition     key issue  developed
ecient   admissible search algorithms  typically find solutions known error
bound faster generate fewer nodes corresponding derivative a  guarantees error bound  algorithms provided  however  improvements
finding optimal solutions  require exponential space bhpa  bs  a  
based approach  kaindl khorsand        showed bidirectional
heuristic search using limited memory possible using unidirectional search
algorithm cope limited memory   sma   russell         however 
runtime eciency insucient 
      front to front evaluations

since long time consensus belief search frontiers would
pass other  research focused algorithms would force  wavefronts  meet
 wave shaping  techniques  bhffa  de champeaux   sint         bhffa 
 de champeaux         d node retargeting  politowski   pohl        generalized
algorithm  encompassing bhpa bhffa    davis  pollack    sudkamp        
   

fikaindl   kainz


h a b  

g  a 
b 

h  a 

k  t b  
h a b  




h a b  

b  k  t b  
k  t b  

h  a    max  h  a   min  h a bi    k  t bi     


b 

figure    illustration front to front idea 
algorithms perform front to front evaluations show bidirectional heuristic
search ecient terms number nodes generated 
since basic idea front to front evaluations important understanding
paper  illustrate using fig     evaluation node nodes bi
opposite search front available storage  costs optimal paths
every bi estimated  adding known costs paths bi goal node
t  normally accurate dynamic estimates gained static front to end
evaluator directly estimates cost t 
however  algorithms performing front to front evaluations either excessively computationally demanding  restriction solution quality 
compute heuristic estimates nodes one search frontier nodes
other  order estimate paths going nodes opposite frontier
vice versa  so  effort evaluations needed single node selection
expansion may even seem proportional cross product numbers nodes
frontiers  use appropriate data structures  effort reduced become proportional number descendants expanded node times
size opposite search frontier   still  excessively computationally demanding frontiers may contain order millions nodes  keeping effort
practical non trivial problems  algorithm may either restrict computation
certain  small  number nodes promising values keep search direction
focused single target node opposing frontier several steps retargeting
it  approaches typically terminate non optimal solutions therefore obviously
lose admissibility  i e  guarantee finding optimal solutions 

    non traditional approach bidirectional heuristic search

so  traditional approaches succeed improve unidirectional search
finding guaranteeing optimal solutions  particular  algorithms based
traditional best first search exponential storage requirements  may seem
bidirectional search needs store nodes least one frontier search
opposing side recognize meeting frontier  typically implemented
hashing scheme   instead storing frontiers forward backward
searches alternate  possible search one direction first storing nodes 
   according personal communication dennis de champeaux 

   

fibidirectional heuristic search reconsidered

search direction  call non traditional approach bidirectional
heuristic search 
approach perimeter search  dillenburg   nelson        manzini        
perimeter search  breadth first search generates stores nodes around
predetermined  and fixed  perimeter depth  final frontier breadth first search
called perimeter  search finished nodes stored  forward search
starts s  targeting perimeter nodes  depending given problem
available storage  forward search performed a  ida  fashion 
former implemented ps   dillenburg   nelson         latter idps 
 dillenburg   nelson        bida   manzini         perimeter depth 
idps  bida  search exactly nodes  however  bida  temporarily removes
perimeter nodes cannot affect computation evaluation function
consequently reduces number heuristic front to front evaluations compared
idps   due improvement  bida  far ecient terms running time
idps  
bida  achieves good results  sliding tile  fifteen puzzle domain  investigate case contrast traditional approaches bidirectional
heuristic search  particular  show results experiments varying perimeter
depth  i e   varying perimeter size storage use 

   new results previous approaches

still  seems previous approaches bidirectional heuristic search understood properly  therefore  present new results propose
new approaches 

    theoretical results

present new theoretical results bounds number nodes expanded
traditional bidirectional heuristic search front to end evaluations  since runtime
performance proportional number nodes expanded  bounds
potential eciency  assume availability consistent heuristic evaluation function
hd directions 
first make explicit principally known result form lemma  since need
particular result proving new results  addition  understanding important
understanding results  note  however  termination condition bidirectional search significantly different termination conditions unidirectional search
a  given pearl        

lemma      a sucient condition successful termination bhpa bs   

solution path t  bhpa bs  terminate successfully  i e  
finding path  iff following conditions satisfied 
 i  least one search frontiers bhpa bs  minimum f  value must
raised least value optimal solution c   is  minx opend fd  x 
c  
 ii  optimal solution must found  is  lmin   c  
   

fikaindl   kainz

proof  need concerned whether algorithms indeed find optimal

solutions  since corresponding proofs given pohl        kwa         respectively  focus exactly termination condition formula    
fulfilled   bhpa explicit termination condition  bs  implicit
explained above  minimum f  values opend first values f   s  f   t  
respectively  since fd consistent exceed c   minimum f  values opend
increases gradually nodes f  values   c least one search frontier
expanded  or nipped pruned bs    since maximum minimum f  values
opend used  one least one must become c   search 
lmin c always holds  optimal solution found  lmin   c  
 
order establish bounds number node expansions  let us first focus
upper bound number nodes expanded bhpa 

theorem     number node expansions bhpa bounded
  bhpa      a        a  

proof  worst case  bhpa may perform a  type searches
directions completely  exception least one node expansion  even lmin  
c achieved last node expansion one direction  immediately thereafter
termination condition fulfilled according lemma    therefore  opposite direction
least one node expansion saved 
 
sense  bound may look quite weak  actually nilsson        conjectured bidirectional heuristic search may expand twice many nodes would
corresponding unidirectional one  conjecture based assumption originally
published pohl        search frontiers may pass without intersecting 
recently  however  empirical evidence found koll kaindl       
assumption invalid  i e   frontiers typically meet rather early even without
using wave shaping techniques  so  question may arise whether
conditions result theorem     reasonable useful  order show conditions  define strong symmetry property search spaces  although may seem
completely unrealistic assumption  dicult imagine search space
property  searches optimal solutions tsp  traveling salesman problem 
instances need generate nodes represent visiting neighboring cities
start city  since city final city visited  reverse search
opposing direction needs generate nodes exactly cities  etc  so  least
straight forward implementation bidirectional search tsp works symmetric
space  symmetric tsp instances  where arc costs independent
direction  usual heuristic evaluations functions tsp  like minimum
spanning tree heuristic   turns perfectly a  symmetric search space 
definition     let f     h  s   f           f k    f k   c different f  values expanded

nodes forward direction analogously f     h   t   f           f k    f k   c
backward direction  search space perfectly a  symmetric iff a  expands
number nodes f  value forward direction backward direction 
is   j  a      j  a    j          k 
 
   

fibidirectional heuristic search reconsidered

theorem     search space perfectly a  symmetric f  values distinct
direction 

  bhpa        a       

proof  perfectly a  symmetric search space  numbers nodes expanded
directions a  type searches within bhpa strictly last  
f  values  termination possible point  since distinct
direction  amounts   nodes remaining   f  values 
  a            a      
depending lmin   c achieved      nodes must expanded
fulfill termination condition  summing proves theorem 
 
since practice f  values normally distinct  in direction   show
consequence realistic assumption   occurrence many different f  values 
meant sense number nodes f  value small compared
number nodes expanded 

corollary     search space perfectly symmetric many different f values 

  bhpa      a 

proof  since several nodes f  value  expansion
  nodes may saved optimal solution already found 
number nodes f  value small compared number nodes expanded 
however    bhpa  
 
so  strong assumption symmetry bhpa expands close twice many
nodes a   possible conjecture nilsson        supported although
original assumption appears valid 
point search frontiers bhpa meet early  i e   pass
without intersecting  go other  so  possibly large
region search space explored twice  as illustrated fig     
bs  avoids double exploration  see fig      unfortunately  appears
dicult quantify size region  so  cannot determine tighter upper bound
number nodes expanded bs  without assumptions 
fig    illustrates search frontiers bs  typically  ragged  
means meetings occur  middle  well near  as observed
experiments  
let us look lower bounds number nodes expanded bhpa 
need assumption symmetry show general results 
theorem     numbers nodes expanded bhpa bounded
min x   x         bhpa 
   

fikaindl   kainz

a 





bhpa





region search space explored twice

bs 





nipping

pruning

figure    illustration traditional bidirectional heuristic search front to end evaluations 
xd    d  a      kd  a  number nodes would expand search
direction minus number nodes value fdk   c  
proof  lower bound represents case earliest termination according lemma
    at least   node expanded direction  
 
corollary     f  values distinct direction  number nodes
expanded bhpa bounded
min     a      a     bhpa 
proof  xd    d  a      since   node n fd n    c  
 
corollary     maximal improvement bhpa given
  a    min x   x       
proof  min x   x       minimum number nodes expanded bhpa 
 
essence  shown certain conditions traditional bidirectional heuristic search front to end evaluations exemplified bhpa expand close twice
many nodes a   original conjecture result based
apparently wrong assumption  found another   even obvious   effect
 partly  responsible 
addition  shown bhpa cannot much ecient a 
respect node expansions even best case  variant bs  without pruning
technique  lower bound number nodes expanded applies  general 
major problem traditional bidirectional heuristic search front to end evaluations
cost satisfying termination condition 
   

fibidirectional heuristic search reconsidered

    empirical results

order provide evidence missile metaphor misleading  present new
empirical data performance bs   since perimeter search seems become
ecient increasing perimeter depth  manzini         investigated
behavior experiments two different domains  present new empirical results
experiments provide explanation perimeter search works well
fifteen puzzle domain 
      bs 

bs  classical best first search algorithm requires exponential memory  so 
aware bs  implementation yet able solve dicult problem instances
fifteen puzzle  given domain specific knowledge puzzle
manhattan distance heuristic  experiments  bs  able solve       
instances used korf         available     mbytes main storage  on
convex c      
gathered data runs bs  provide empirical evidence
missile metaphor misleading  in addition data already given koll kaindl
         average  bs  found first solution generation     percent
total number nodes generated  quality solution average    
percent worse optimal solution  continuing searches  bs  found
optimal solutions generation      percent total number nodes generated
 again average   is  search effort bs  spent verify optimality 
means search frontiers bs  meet relatively early without use
wave shaping techniques  even optimal solutions found rather quickly  however 
even bs  already found optimal solution problem instance 
 know  solution optimal  so  must continue search generate
remaining nodes order prove fact better solution available 
relatively overall higher effort  bhpa would find first solution even  earlier 
bs   course  bhpa needs exactly number nodes bs 
search frontiers meet  first meeting  however  would generate
nodes bs  search frontiers go other  search frontiers
would  however  pass illustrated missile metaphor  solutions could
found early 
      perimeter search

perimeter search achieved good results fifteen puzzle domain  solve
fifteen puzzle problem instance relatively fast limited memory  however 
approach bidirectional heuristic search seems understood suciently yet 
so  made experiments increasing perimeter depth two different domains 
results may seem quite surprising  cannot yet explain theoretically 
important right  try explain intuitively 
experiments  feasible use complete set     fifteen puzzle
problem instances used korf         fig    shows domain bida  works
well  especially terms number nodes generated  data normalized
   

firesults relative korfs ida   

kaindl   kainz

  

nodes generated

  

running time

  

    

    

    

  

    

    

    

  

    

    

    

    

  
  
  
  
 

   

   

   

   

   

   

   

   

   

   

 
  

  

  

  

  

  

  

  

  

  

bida  perimeter depth

figure    comparison bida  different perimeter depths fifteen puzzle     
instances    time optimum 
respective search effort ida   in korf s implementation   since first
algorithm able solve random instances fifteen puzzle   running times
good  
consistently  manzini        table     fig    shows steady decrease
number nodes generated required running time increasing perimeter depth
reaches     perimeter depth  however  bida  achieves minimum running
time  exact perimeter depth optimum occurs may depend several
factors machine used eciency implementation  new
important finding is  however  optimum actually exists bida  
optimum perimeter depth shown exist ps  dillenburg nelson        
data presented manzini        suggested increasing perimeter depth
number evaluations performed bida  even decreases  larger perimeter depths 
however  savings terms node generation obviously outweighed larger cost
front to front evaluations  note  data presented manzini       
show optimum amount memory required storing perimeter
depths greater    exhausted resources available experiments reported
there 
   give idea overall diculty given problem set  note ida  generates    
million nodes average  needs slightly less half hour convex c     
   bida  s result worse data reported manzini         primarily due use
different machine different implementation based ecient code ida 
puzzle provided us korf using  implementation overhead especially
wave shaping shows clearly even using runtime optimizations described manzini
        access implementation manzini  e mail communication
given hints it  agreement overall effect relative
running times due different implementations ida  

   

fibidirectional heuristic search reconsidered

knowing existence optimum helps us better understand improvement perimeter search traditional approach bidirectional heuristic search
based front to front evaluations exemplified  e g   bhffa  advantage improved evaluation accuracy balanced large overhead time consumption
node evaluations  bida  tuned towards optimum  algorithm
bhffa typically balance regard  bhffa reason
find optimal solutions quite easy problems  perimeter search comparably much cheaper
per node searched  since much smaller frontier  targeted  
although performance perimeter search cannot improved deliberately
using memory  optimum running time bida  fifteen puzzle
problems good  so  wanted see whether results
achieved another domain used experimenting algorithms 
made experiments finding optimal solutions set maze problems  
problems  bida  based ida  inecient due high number iterations  so 
used ps   dillenburg   nelson        implements common underlying idea
  perimeter search   based a   a  works well maze problems 
seems runtime optimization bida  cannot practically used a  based
algorithm due excessive storage requirements  since every node open information
every perimeter node would stored may affect computation
front to front evaluations  fact  manzini        states technique
applied depth first search algorithm 
based experiments  perimeter search approach appears work satisfactorily illustrated fig      neither terms generated nodes terms
running time  data normalized respective search effort a   since seems
ecient algorithm problem instances fit memory  see
optimality result a  unidirectional competitors dechter   pearl         
even comparably larger perimeter depths                         numbers generated
nodes marginally improve  up      percent number nodes generated a 
shown figure   running time becomes quite high  up       percent  
running time reduced perimeter depths smaller    
real savings number nodes generated therefore improvement a 
observed 
considering different performances perimeter search domains  question arises  works well fifteen puzzle satisfactorily maze  let us consider reason good results first  closer look
case perimeter depth    minimal perimeter around node fifteen
   use domain inspired use rao et al          problem instances
domain model task navigation presence obstacles      instances drawn randomly
using approach behind xwindows demo package xmaze  heuristic evaluator  use
manhattan distance rao et al         
experiments  made following adaptations  order allow transpositions 
 install  wall three percent cases  leads roughly  density  transpositions
fifteen puzzle  moreover  use much larger mazes              order focus
dicult instances these  use instances h   s       
   give idea overall diculty given problem set  note a  generates    
million nodes average  needs less two minutes convex c     

   

fikaindl   kainz

     
   

nodes generated

results relative a   

     

running time

   

     

   
     

   
   
   

     
     
    

    

    

    

    

    

  
 
  

  

   

   

   

   

ps  perimeter depth

figure    comparison ps  different perimeter depths maze problems     
instances  
puzzle contains two nodes  still  perimeter approach saves half node
generations ida  
major improvement explained quite simply looking approach
improving heuristic evaluation function  perimeter search  discovers 
search analogous improvement manhattan distance heuristic presented
korf taylor        p        name  last moves heuristic   more precisely
part dealing exactly last move    precisely  cases dynamic
values increase h   n  two units  i e   twice  unit  cost either arcs
two perimeter nodes   improved evaluations  many node generations
saved even using perimeter nodes 
still  question remains improvements observed maze domain 
domains arcs unit costs  found major differences help us
explain phenomenon  fifteen puzzle problems relatively short  optimal  solutions 
due unit costs arcs overall cost solution relatively small      
average   comparison  maze problems  in mazes size used  relatively
long  optimal  solutions relatively high cost solution       average  
   heuristic based last move solution  must return blank goal position 
order allow blank position  tiles next blank goal position must
certain places  manhattan distance accommodate corresponding path
therefore increased two units 
   relates property manhattan distance heuristic itself  cases  increase
cost known arc  with cost    added increase heuristic estimate
evaluated node perimeter node  also    compared estimate t  remaining cases 
heuristic estimate evaluated node perimeter node reduces  by    compared
estimate t  cancels cost known arc 

   

fibidirectional heuristic search reconsidered

differences ected differences heuristic values  although used
domains less heuristic   given set fifteen puzzle problem
instances  h   s         average much smaller h   s         given set
problem instances maze domain  data heuristic values
 think a dot  problems used dillenburg nelson         note mean
path length given       i e   even much smaller fifteen puzzle 
let us assume fifteen puzzle maze domain
number perimeter nodes twice cost arc  i e   two units  added 
means resulting dynamic evaluation improves static evaluation
absolute amount  quite different relative amount      percent fifteen
puzzle compared      percent maze domain  so  dynamic improvement
heuristic effect much higher fifteen puzzle  leads much larger savings
terms node generations effort front to front evaluations 
summary  fifteen puzzle perimeter nodes improve static
evaluation  since twice  unit  costs arcs even cases simply
added  large effect domain heuristic values typically smaller
    maze instances size experimented with  heuristic values
two orders magnitude larger  therefore many perimeter nodes would
required achieve much effect  these  however  make perimeter search expensive
terms running time probably storage requirement 
considerations  clear effect front to front evaluations
much steering frontiers together  rather improve heuristic evaluations
dynamically  particular  example two perimeter nodes illustrates
 wave shaping  real effect  rather improvement evaluation accuracy 

   generic approach non traditional bidirectional search
developed new generic approach bidirectional heuristic search integrates various
search algorithms typically leads hybrid combinations  since approach
allow changing search direction once  viewed non traditional
form bidirectional search 
major steps generic approach are   
   assign search direction even nearly available memory
traditional best first search 
   perform traditional best first search assigned direction using given memory 
   unless best first search already found optimal solution  perform search
reverse direction  use memory structure built previous best first
search  possibly together additional memory still available  compute
use front to end evaluations 
would dicult perceive even general approach subsumes
perimeter search  expensive front to front evaluations  however  wanted
    approach different one proposed earlier  kaindl  kainz  leeb    smetana        

   

fikaindl   kainz

transpositions

linear space search



best first search


figure    specialization generic approach 
devise approach avoids need find balance cost
evaluations beneficial effect 
useful specialization generic approach uses memory sides
search space illustrated fig     traditional best first search uses assigned
memory usual  e g   a   linear space search uses much memory still
available transposition table  reinefeld   marsland         former first orders
sequence node generations finds transpositions  latter uses memory
finding transpositions another part search space  caching accurate
heuristic evaluations closer t 
limited memory available  approach exible  instance 
memory transposition table assigned  approach combines linear space search
conventional best first search bidirectional style  may look quite similar
bida   note approach contrast performs front to end evaluations 
memory best first search used find solutions earlier meeting frontier
 rather t  
sucient memory available even solving dicult problem instances
domain  search reverse direction may performed traditional bestfirst search a   all  a  certain conditions certain sense optimal
respect node expansions  dechter   pearl        

    instantiating limited memory
first show generic approach instantiated limited memory
available  course  instantiation make use available domain specific
information  particular  combine unidirectional search algorithms
best suit properties domain  see  e g   rao et al         zhang   korf        
example  domains ida  choice  others depth first branch and bound
 lawler   wood        much better  case limited memory  either
preferred a  
present experimental results fifteen puzzle  domain
characterized distinct cost values  condition  reasonable
select ida  linear space search algorithm  since dicult problem instances
fifteen puzzle require much memory using a   manhattan distance
heuristic used  since a  makes good use consistent heuristics one  dechter  
pearl         select part best first search 
   

fibidirectional heuristic search reconsidered

based key idea bidirectional search  let a  ida  search opposite
directions steps     generic approach  respectively  instantiation
generic approach leads bai  bidirectional a    ida   
optionally  may give ida  search part available memory
transposition table  fig    illustrates instantiation  call variant bai due
use table bai trans 
a  cannot find solution using given memory  ida  searches reverse
direction towards frontier prior search  since consider case finding
optimal solutions  search cannot always terminate immediately solution found 
better solution may exist  algorithm must find optimal one subsequently
prove optimal 
technically  ida  part must changed slightly  instead find
goal node  solution found whenever depth first search meets frontier
opposing a  search  cost solution smaller cost best solution
found far  or first solution found  value stored  course  cost
best solution found far may sub optimal  algorithm yet know
already optimal  however  stored value exceed non overestimating
threshold ida  part  depth first search exited successfully optimal
solution 
addition necessary changes  ida  part advantage start
increased initial threshold based admissible estimate optimal solution cost
determined a  part  since assume consistent heuristic h  minimum
f   g   h nodes open always admissible estimate  therefore  estimate
higher usual initial threshold ida   used instead 
moreover  necessary ida  part search space already
explored a   technically  depth first search invoked ida  meets
closed node opposing a  search frontier  branch cut  meeting open
node general insucient   call nipping according analogous method
described kwa        
ecient implementation fifteen puzzle even effort hashing every
node causes overhead cannot ignored  therefore  implemented bai
way avoids hashing nodes   based heuristic estimate  
knows frontier opposing a  search still reach 
according step   generic approach  search directions must assigned
a  ida  part  respectively  traditional bidirectional search  pohl       
proposed used cardinality criterion problem determining frontier
select node expansion  continue searching frontier fewer open
nodes  utilized node expansion traditional bidirectional search
algorithms  bai decide issue beginning whole search 
search space suciently symmetric  initial search direction
determined random  search space least slightly asymmetric
specific knowledge determining search direction available  seems reasonable
make shallow probes search space sides use idea behind
cardinality criterion  since bai incorporates ida   using algorithm probing
consistent overall approach  example fifteen puzzle  first
   

fikaindl   kainz

iterations ida  searched sides  direction fewer generated
nodes assigned ida  part overall search  since especially dicult problems
search much deeper a  part 
let us shortly discuss behavior bai  best case  would seem
a   fact  bai even better pure a   bai assigns search direction
dynamically  lead better results systematically going one direction 
worst case  bai perform part a   without savings ida  part
 except effect nipping  
key question bai saves effort without enough memory available
completing a  search  primarily  save one ida  s iterations  due
better initial threshold  early iterations saved  since earlier
iterations comparably cheap  helps much less saving last iteration 
search terminated complete iteration ida  cost best
solution already found larger new increased threshold  therefore  large
savings possible bai terminates earlier pure ida  

    instantiating sucient memory
let us sketch generic approach instantiated case sucient
memory available sense even solving dicult problem instances
domain  traditional best first search terminate successfully given memory 
case interest order see whether bidirectional search better a  
sense optimal unidirectional algorithms 
sucient memory available  instead ida   or depth first branch and bound 
reverse search employ a   fact  easy construct algorithm analogously bai described above  using a  instead ida   instantiation
generic approach leads baa  bidirectional a    a    algorithm changes
search direction contrast bs   better utilization approach
dynamically improving heuristic values based differences  introduce slight
variation algorithm below 

   approach dynamically improving heuristic values based
differences
new approach dynamic improvements heuristic evaluations search based
differences known costs heuristic estimates  differences utilized
two concrete methods presented below  basic idea common methods
many nodes search  actual cost path
already known  since static heuristic values normally gained rather cheaply 
differences computed signify error made evaluation compared
cost known path  differences utilized improve heuristic estimates
search 
order able compute differences  search must bidirectional 
focus context non traditional approach bidirectional heuristic search
described above  actually  application possible context traditional bidirec   

fibidirectional heuristic search reconsidered


b 
h  a 

g  a 

search
frontier



g   b  

diff   b  
h  b  


b  diff   b  

diff   bi    g   bi    h  bi 

diff   b  

mindiff    min  diff   bi   

b 



h  a    h  a    mindiff 

figure    illustration add idea 
tional search bs   involves  however  intricacies beyond scope
paper  so  interested reader referred  kainz        

    add method

first method instantiates approach adding constant derived differences heuristic values static evaluation function  therefore  call add
method 
note  adding constant evaluations change order node
expansions unidirectional search algorithm a   so  benefit approach
may immediately obvious  however  bidirectional search algorithms using frontto end evaluations  estimates compared cost best solution found far
 which necessarily already optimal one   better estimates available
comparisons improves eciency due earlier termination  explain
detail apply approach context non traditional approach
bidirectional heuristic search 
see fig    key idea method  assume consistency static heuristic
evaluator hd   around goal node t  search examined part graph stored
optimal paths nodes bi closed fringe t  node bi   heuristic
value h   bi   computed subtracted optimal path cost g  bi     g  bi    
h   bi    resulting diff   bi    actually error made heuristic evaluation
node bi   minimum diff  bi   nodes bi fringe computed  
call mindiff   
point add method consistent heuristic value h   a 
node outside stored graph underestimates h   a  least mindiff    prove
precisely below  first need show result diff  

lemma     heuristic h  consistent  optimal path node n
intermediary node

diff  m  diff  n 
holds  i e   diff  decrease optimal path decreasing distance goal
node t 
   

fikaindl   kainz

proof  heuristic h  consistent 
h   n  h   m    k   n  m 
simply obtain

g  m    h   m  g  m    k  n  m    h   n 
since n one optimal path t  know

g  n    g  m    k   n  m 
substitutions obtain

g  m    h   m  g  n    h   n 
equivalently
diff  m  diff  n 

 

proves lemma 

theorem     heuristic h  consistent  possible compute admissible

heuristic h  node outside search frontier around

h  a    h  a    mindiff  h   a 

proof  path exists node t  optimal path must exist 
let go frontier node bj    if path exists  h   a  infinite
theorem holds   lemma   definition mindiff  know
mindiff  diff  bj   diff   a 

since diff  error made heuristic h    write

h   a    diff  a    h   a 
substitution obtain

h  a    mindiff  h   a 

 

proves theorem 

corollary     h  a  admissible estimate frontier node 
proof  replace bj proof theorem     without changing validity 
 

   

fibidirectional heuristic search reconsidered

theorem     heuristic h  consistent  h  consistent 
proof  heuristic h  consistent 
h   n  h   m    k   n  m 
adding constant mindiff  sides leads

h   n    mindiff  h   m    mindiff    k  n  m 
means

h  n  h  m    k  n  m 
proves theorem 
 
let us sketch add method utilized context nontraditional approach bidirectional heuristic search  using baa  example 
first a  search must used compute value mindiff   we assume starts
node t   optimal paths nodes within search frontier guaranteed
frontier nodes themselves  suboptimal path found frontier node 
however  known optimal path leads another frontier node
optimal path t  so  change fmin  since costs suboptimal paths
cannot uence minimum  mindiff  reverse a  search constant
added h    call resulting algorithm add baa 
course  larger value mindiff  preferred given amount search 
so  search starting around better guided expanding always one
nodes n minimal diff   n   call variant add bda   
necessary check  whether node evaluated outside fringe
graph around t  simply achieved add baa add bda hashing 
done anyway  node fringe first a  search matched 
solution already found  first node path inside stored graph around
matched  path need pursued further  since optimal continuation
already known  so  evaluator h  actually used  consistent  therefore
a  re open nodes  pearl         search terminates selects
node n expansion f   n    g   n    h   n  smaller cost
best solution found far  proven way optimal one 
details method theoretical properties refer interested
reader  kainz        

    max method

second method computes estimate based differences uses
maximum static estimate  therefore  call max method 
see fig    key idea method  assume consistency static heuristic
evaluator hd   path cost g  a  known  know
evaluation node a  h   a  g  a   difference diff   a    g   a    h   a  
use difference construction admissible estimate f   a  cost
    earlier called add a   kainz   kaindl        

   

fikaindl   kainz



k  a b  

g  a 
h  a 

diff  a 
h  a 

b 

h  b  

g 
  b  

h  b  



h  b  

diff  a    g  a    h  a 
fmin    min  g    bi    h  bi   

 
b  g  b  


g   b  

b 



h  a    max  h  a   fmin    h  a   
f  a    max  f  a   fmin    diff  a   

figure    illustration max idea 
optimal path constrained go a  note  g  a    g  a 
necessary  call difference used diff  a  instead diff   a  
addition  assume search performed reverse direction 
search  assume nodes bi closed fringe optimal paths
known  cost g  bi    therefore  possible compute
fmin    min
 g  b     h   bi   
 

based assumptions  construct dynamic evaluation function
follows 
theorem     heuristic h  consistent  possible compute admissible
heuristic h   node outside search frontier around
h   a    fmin    h  a  h   a 
proof  every path must go frontier node bj   cost cj
path bounded follows 
cj k  a  bj     g  bj  
h  consistent  possible estimate optimal cost path two nodes

k  a  bj   h   bj     h   a 
therefore  write
cj h  bj     h   a    g  bj  
since fmin    min
 g  b     h   bi     write
 

cj fmin    h   a 
valid cost path including optimal one 

conclude

proves theorem 

h  a  fmin    h   a 
   

 

fibidirectional heuristic search reconsidered

corollary     h   a  admissible estimate frontier node 
proof  replace bj proof theorem     without changing validity 
 

dynamic evaluation function necessarily better nodes static
function  useful combine functions 

h  a    max h  a   fmin    h   a  
since admissible resulting function admissible  value fmin 
changes search  however  h  consistent 
since formula computing h  originally derived difference diff   a   
g  a    h   a  included  derive overall evaluation function

f   a    max f  a   fmin    diff   a  
let us sketch max method utilized context nontraditional approach bidirectional heuristic search  using bai  example 
a  search starting first must used compute value fmin   we assume
starts node t   again  add method  necessary optimal
paths frontier nodes known  getting values fmin  large
possible given amount search  usual strategy selecting node minimal
f  appropriate here 
subsequent ida  search within bai must perform hashing graph stored
around order check  whether node evaluated outside fringe
graph around t  latter case new solution found  call resulting algorithm
max bai  transposition table  reinefeld   marsland        used addition
bai trans  call max bai trans 
interestingly  ida  utilize max method without additional storage
requirements  let us sketch basic approach linear space application
method here  ida  normally searches one direction only  let alternate
search direction iteration solution found  actually  procedure
outside generic approach bidirectional search presented above  include
since linear space approach special interest  fmini computed one iteration
used subsequent iteration  must search alternate direction
use value  example  iteration searching s  adapted ida 
computes hmax    max h   bi    nodes bi   value used estimate
subsequent iteration checking  whether node evaluated  outside  
h   a    hmax  true  node cannot  inside  h  a  safely used 
check substitutes hashing stored graph  since static heuristic function normally
underestimates  however  nodes heuristic h  used although would
theoretically correct use it  call resulting algorithm based idea
max ida  
details method theoretical properties refer interested
reader  kainz        
   

fikaindl   kainz

results relative korf s ida   

           

nodes generated

   

running time
    

  

    

         
    

  

    

  

    

    

    

    
    

    

  

   

   
 
maxida 

ida 

ida probing

idps 
depth  

trans

bida 
depth   

baitrans

max baitrans

figure    comparison fifteen puzzle      instances  

   results experiments new approaches

order provide empirical evidence effectiveness eciency
new approaches  made experiments two different domains  fifteen puzzle mazes 

    fifteen puzzle

first let us look specific experimental results finding optimal solutions
set fifteen puzzle problems  complete set     instances used korf
        compare algorithms achieve previously best results domain
new algorithms  compared algorithms use domain specific knowledge
puzzle manhattan distance heuristic    main storage available
convex c     used     mbytes 
fig    shows comparison several algorithms terms average number node
generations running times  data normalized respective search
effort ida   in korf s implementation   already noted above  ida  needs average
slightly less half hour machine used find optimal solution
one problem instance  so  even slight improvements mean notable savings time 
ida   max ida  ida  probing linear space algorithms use additional
storage  performance cannot compete algorithms use    
mbytes  max ida  generates      percent number nodes generated ida 
due dynamic improvements heuristic evaluations according difference
approach  since these  however  imply overhead per node searched  needs     
percent ida  s running time  ida  probing variant ida  uses
probing idea selecting search direction  although search space sliding tile
puzzle appears quite symmetric  interesting see much gained
selecting search direction dynamically  since ida  probing overhead
running time  even faster max ida   order see well probing via three
iterations already indicates better search direction  compared result
    much improved heuristic functions  much ecient searches result  culberson   schaeffer 
      even solving twenty four puzzle instances become feasible  korf   taylor        

   

fibidirectional heuristic search reconsidered

perfect oracle  using would still generate    percent ida  s nodes  i e   ida probing overhead generated nodes determining search direction
less     percent overall   percent worse this  systematically searching
backward direction  however  significantly better systematically searching
forward direction due high standard deviations  although saves    percent 
idps  uses nodes additional storage perimeter  due
related overhead front to front evaluations  needs running time
ida  probing  although generates much fewer nodes   
trans  using     mbytes memory  achieves savings half running time
compared ida   saves even much node generations amount memory 
effort hashing slows down   
another technique prune duplicate nodes proposed taylor korf        
using finite state machine  results included fig     since lack data
running time  no data given taylor korf         reimplement technique   ida  employing pruning technique generated       million
nodes set instances reported taylor korf         means
     percent number nodes generated pure ida   finite state machine
achieved result contained        states  requiring modest amount storage 
course  finite state machine must built pre processing stage first 
use search involves small constant overhead running time  so 
sliding tile puzzles  approach seems better transposition tables
eliminating duplicates  actually appears represent successful approach yet
solving fifteen puzzle problems using unidirectional search 
principle  provided available storage bida   manzini        
ecient algorithm perimeter approach  given     mbytes storage 
bida  store maximum   million perimeter nodes  would correspond
perimeter depth     bida  generates     percent number nodes
generated ida   needs    percent ida  s running time  so  shown fig 
  use memory savings number nodes generated 
optimum running time smaller perimeter size       show
fig     reduced perimeter  bida  achieves best result terms nodes
    results reported dillenburg nelson        based runs using different sample set
fifteen puzzle  different perimeter depth  using perimeter depth      results
korf s set re implementation even better terms number node generations 
much slower terms running time  even slower ida    personal communication
john dillenburg turned implementation ida  slower korf s one  which
using  factor    per generated node  implementation overhead especially
wave shaping show clearly ecient one  since smaller perimeter
depth means fewer stored nodes therefore less overhead wave shaping  perimeter depth
  results better running time  consequently show data figure 
    data figure gained using re implementation trans based ecient code provided
jonathan shaeffer  note different way presenting results  absolute data figure vs 
relative problem diculty reinefeld marsland         re implement trans  since
data performance trans amount memory used available  since
integrate technique algorithms  actually  trans move best algorithm
described reinefeld marsland         absolute results less one percent better
trans  therefore  re implement trans move cannot include
figure 

   

fikaindl   kainz

generated       percent number nodes generated ida   bida  s
overhead computing front to front evaluations smaller idps   bida 
needs      percent ida  s running time   
algorithms bai trans max bai trans store maximum   million nodes
implementation algorithms given     mbytes storage  bai trans
generates clearly nodes       percent ida   bida   since overhead
per node much smaller  running time even slightly better       percent   max baitrans   additionally utilizing new difference approach   achieves fastest searches 
needing      percent time needed ida   achieving result  uses
  million nodes max method  and bai    million nodes trans  order
see uence trans  compare result max bai  not shown
fig    order clutter it  uses   million nodes max method
 and bai   needing      percent time used ida   slightly slower
max bai trans  shows comparably modest uence trans 
summary  new approach bidirectional heuristic search enhanced max
method achieves fastest searches finding optimal solutions fifteen puzzle
using manhattan distance heuristic knowledge source  superiority max bai trans terms running time previous algorithms statistically
significant  example  probability improvement running time
bida  due chance uctuation smaller      percent according test
compares means paired samples absolute running times  even much
smaller according test data relative diculty instance
well according sign test    using less ecient implementations ida 
basis  difference would become smaller  since approach less overhead per
node searched therefore  gains  less compared pure ida   however  prefer
compare algorithms using ecient implementation available 
details results see  kainz        

    mazes

order get better understanding usefulness new approach  made
experiments second domain   finding shortest paths maze 
maze problems described subsection      addition          
mazes  made experiments much smaller           mazes  order see
whether size uences relative performance various algorithms  compare
known algorithms achieve best results domain  as far found 
algorithms add baa add bda  traditional shortest path algorithm dijkstra
       corresponds a  without using heuristic knowledge  need explicitly
include experiments  experiments  compared algorithms use
domain specific knowledge manhattan distance heuristic  main
storage available convex c     used     mbytes 
    noted already subsection      bida  s result worse data reported manzini
        primarily due using different machine different implementation based
ecient code ida  puzzle provided us korf using 
    details statistic tests used refer interested reader  kaindl  leeb    smetana 
      kaindl   smetana        

   

fibidirectional heuristic search reconsidered

results relative a   

   

nodes generated

     

running time

   
   

     
     

    

       

    
    

   

         

  
  
  
  
 
bs 

ps 
depth   

a 

add baa

add bda

figure     comparison maze problems      instances  
fig     shows comparison several algorithms terms average number
node generations running times  data normalized respective search
effort a   already noted above  a  needs average less two minutes
machine used find optimal solution one problem instance 
bs  generates slightly nodes solving problems a         percent  
running time even worse  may seem implementation bs 
could optimized  clear overhead compared a   so 
bs  certainly improve a  here 
ps   dillenburg   nelson          using perimeter search  i e   front to front
method   generates      percent number nodes a   needs       percent
time used a   data correspond perimeter depth    
best results shown fig    terms running time  see discussion
subsection       so  ps  cannot really improve a  here 
algorithms add baa add bda generate clearly fewer nodes a       
     percent  respectively   better performance add bda ects higher
mindiff  value achieved guiding first two best first searches
expanding always one nodes n minimal diff  n   precisely  add bda
achieved mindiff          from reverse search    k nodes   add baa achieved
mindiff         from reverse search even     k nodes   performance addbaa terms running time is  however  still much a   at least
implementation derived bs    add bda achieves fastest searches  needing
     percent time needed a   so  application approach dynamically
improving heuristic values feasible little overhead 
superiority add bda previous algorithms statistically significant 
example  probability improvement terms running time a  due
chance uctuation smaller       percent according three statistic tests
made analogously fifteen puzzle data  significance result
holds improvement respect number node generations  add bda
a  well algorithms compared generate child nodes
node expansions  superiority add bda algorithms statistically
   

fikaindl   kainz

table    overview approaches bidirectional heuristic search 
front to front
front to end
traditional
bhffa  bhffa  bhpa  bs 
non traditional ps   idps   bida  max bai trans  add bda
significant respect  particularly interesting  since optimality result
a  unidirectional algorithms stated sense a  never expands node
could skipped  unidirectional  algorithm  dechter   pearl        
since relative results           mazes similar  show
explicitly  see  however  kainz         provide empirical evidence
performance algorithms peculiar certain size mazes 

   discussion
presentation new approach bidirectional heuristic search experimental results  let us put perspective  table   provides overview existing
approaches according way evaluating way organizing change s 
search direction  algorithms instantiate new generic approach fall
category non traditional bidirectional heuristic search algorithms  that change search
direction once  perform front to end evaluations  approach allows
coping limited memory  e g   max bai max bai trans   useful
case sucient memory  e g   add bda  
due avoiding expensive front to front evaluations  approach dynamically improving heuristic evaluations less effective perimeter search saving node generations  at least fifteen puzzle domain   however  less overhead therefore
ecient per node searched terms running time 
viewpoint table    approach somehow  completes  picture bidirectional heuristic search   note  however  non traditional approach found
independently work perimeter search   still  ample opportunity
research bidirectional search  especially looking perspectives  another issue is  e g   whether linear space search involved not  propose
paper max ida   algorithm alternates search direction every
iteration order able use information previous iteration improving
heuristic evaluations dynamically  yet another perspective whether algorithm
designed find optimal solutions not  paper  focused admissible
search algorithms  discussed above  however  exist   admissible bidirectional
search algorithms guarantee solutions known error bound  well others
find solutions without guarantee quality  e g   d node retargeting  
contrasting traditional non traditional approaches bidirectional
heuristic search  may appear strange less exible approach delivers
better results   better  change search direction once 
dicult provide generally convincing answer question  let us summarize
observations 
   

fibidirectional heuristic search reconsidered

traditional bidirectional search typically requires exponential space  kaindl

khorsand        showed search possible using limited memory 
complexity algorithms runtime eciency insucient 

perimeter depths perimeter search successful  perimeters

much smaller frontiers traditional front to front algorithms 
parameterizing perimeter depth possible balance effort front tofront evaluations effect improving heuristic evaluations dynamically 

runtime optimizations bida  idps  feasible perimeter
stays constant  at least iteration  

mindiff value add method becomes higher search computing

generates nodes  so  context traditional bidirectional search
initially small 

applying max idea becomes much complex  e g   bs  search
frontiers change  kainz        

general  one major problems heuristic search use available
limited memory effectively  pure unidirectional approaches utilizing limited memory led
less convincing results  chakrabarti et al         sen   bagchi        russell       
ghosh et al         reinefeld   marsland        non traditional approaches
bidirectional search shown table    particular  generic approach allows
exible effective use available memory  is  however  partly due integration
various unidirectional strategies  future work may investigate direct use unidirectional approaches utilizing limited memory instantiations generic approach
bidirectional search 
addition  bidirectional search allows use memory dynamically improving
heuristic evaluations ways infeasible strictly unidirectional search 
demonstrated front to front approach well difference method 
following simple idea implicitly behind approaches may illustrate this  given
breadth first  uniform cost  search depth d  node outside frontier must
least     steps away start s  reverse search towards may use
fact compute estimate node outside frontier least     
idea cannot used strictly unidirectional search  note  however  approaches
discussed much complex useful simple idea  since take
known costs heuristic estimates well differences account 
provide much better estimates especially nodes far outside already given
opposite search frontier 
sense  possible view difference approach learning  since
differences predicted actual outcomes important  usual machine
learning research  however  strives using results one problem instance solving
subsequent instances  attempt  in depth discussion relationship
outside scope paper  note  however  approaches using front tofront evaluations could considered viewpoint 
   

fikaindl   kainz

   conclusion

based new insights previous approaches bidirectional heuristic search  propose paper

new generic approach non traditional bidirectional search front to end evaluations 

new approach dynamically improving heuristic values context 
showed successfully instantiate generic approach important
case available memory limited  memory utilized eciently
improving heuristic values  certain problems sucient memory available 
proposed instantiation form algorithm challenges a  
certain sense optimal unidirectional search algorithms  optimality result a 
unidirectional competitors dechter pearl        imply bidirectional
search cannot ecient  experiments found empirical evidence
new algorithm ecient a  terms node expansions
running time  showed approach ecient terms running time
bidirectional unidirectional search approach using information
two different domains  results statistically significant 
traditional bidirectional search yet achieve improvements admissible unidirectional search  non traditional way performing opposing searches
sequence   exemplified perimeter search approach   seems
great potential  sense  show bidirectional heuristic search viable
consequently propose search strategy reconsidered 

acknowledgements

years  several people cooperated first author research heuristic
search particular bidirectional search  aliasghar khorsand  andreas koll  angelika
leeb  harald smetana roland steiner  work served basis work
presented paper  experiments convex c     computing
center tu vienna available  implementations based ecient
code ida  a  puzzle made available richard korf ecient hashing
schema jonathan shaeffer  finally  acknowledge useful comments earlier drafts
andreas auer  dennis de champeaux  stefan kramer  giovanni manzini  ira pohl
roland steiner  parts paper already appeared proc  fourteenth international
joint conference artificial intelligence  ijcai     proc  thirteenth national
conference artificial intelligence  aaai     

appendix  glossary notation
s 


c

start node goal target node  respectively 
current search direction index  search forward
direction      backward direction     
cost optimal path t 
   

fibidirectional heuristic search reconsidered

kd  m  n 
gd n 
hd  n 
gd n   hd n 
fd  n 
fdj
hd n 
fd  n 
lmin
opend
closedd
jopendj

  a 
 d  a 
 jd  a 

cost optimal path n      n     
cost optimal path n      n     
cost optimal path n      n     
estimates gd n  hd  n   respectively 
static evaluation function  gd  n    hd  n  
one f  values expanded nodes search direction d 
dynamic estimate hd  n  
dynamic evaluation function  gd  n    hd  n  
cost best  least costly  complete path found far t 
set open nodes search direction d 
set closed nodes search direction d 
number nodes opend  
number nodes expanded algorithm a 
number nodes expanded algorithm search direction d 
number nodes value fdj expanded algorithm
search direction d 

references

chakrabarti  p   ghose  s   acharya  a     desarkar  s          heuristic search restricted memory  artificial intelligence                  
culberson  j     schaeffer  j          searching pattern databases  mccalla  g 
 ed    advances artificial intelligence  pp           springer verlag  berlin 
davis  h   pollack  r     sudkamp  t          towards better understanding bidirectional search  proc  fourth national conference artificial intelligence  aaai     pp         menlo park  ca  aaai press   mit press 
de champeaux  d          bidirectional heuristic search again  j  acm                
de champeaux  d     sint  l          improved bidirectional heuristic search algorithm 
j  acm                  
dechter  r     pearl  j          generalized best first strategies optimality a 
j  acm                  
dijkstra  e          note two problems connexion graphs  numerische
mathematik    pp          
dillenburg  j     nelson  p          perimeter search  artificial intelligence                  
ghosh  s   mahanti  a     nau  d          its  ecient limited memory heuristic
tree search algorithm  proc  twelfth national conference artificial intelligence
 aaai      pp             menlo park  ca  aaai press   mit press 
hart  p   nilsson  n     raphael  b          formal basis heuristic determination
minimum cost paths  ieee transactions systems science cybernetics  ssc  
ssc                
   

fikaindl   kainz

kaindl  h          tree searching algorithms  marsland  t     schaeffer  j   eds   
computers  chess  cognition  pp           springer verlag  new york 
kaindl  h   kainz  g   leeb  a     smetana  h          use limited memory
heuristic search  proc  fourteenth international joint conference artificial intelligence  ijcai      pp           san francisco  ca  morgan kaufmann publishers 
kaindl  h     khorsand  a          memory bounded bidirectional search  proc  twelfth
national conference artificial intelligence  aaai      pp             menlo park 
ca  aaai press   mit press 
kaindl  h   leeb  a     smetana  h          improvements linear space search algorithms  proc  eleventh european conference artificial intelligence  ecai     
pp           chichester  england  wiley 
kaindl  h     scheucher  a          reasons effects bounded look ahead search 
ieee transactions systems  man  cybernetics  smc                    
kaindl  h     smetana  h          experimental comparison heuristic search algorithms 
aaai    workshop experimental evaluation reasoning search methods 
pp        
kainz  g          heuristische suche graphen mit der differenz methode  diplomarbeit 
technische universitat wien  vienna  austria 
kainz  g          neue algorithmen fur die bidirektionale heuristische suche  doctoral
dissertation  technische universitat wien  vienna  austria 
kainz  g     kaindl  h          dynamic improvements heuristic evaluations
search  proc  thirteenth national conference artificial intelligence  aaai     
pp           menlo park  ca  aaai press   mit press 
koll  a     kaindl  h          bidirectional best first search bounded error  summary
results  proc  thirteenth international joint conference artificial intelligence
 ijcai      pp           san francisco  ca  morgan kaufmann publishers 
korf  r          depth first iterative deepening  optimal admissible tree search  artificial intelligence                 
korf  r          real time heuristic search  artificial intelligence                    
korf  r     taylor  l          finding optimal solutions twenty four puzzle  proc 
thirteenth national conference artificial intelligence  aaai      pp            
menlo park  ca  aaai press   mit press 
kwa  j          bs   admissible bidirectional staged heuristic search algorithm 
artificial intelligence                 
lawler  e     wood  d          branch and bound methods  survey  operations research 
                
   

fibidirectional heuristic search reconsidered

manzini  g          bida   improved perimeter search algorithm  artificial intelligence 
                
nilsson  n          principles artificial intelligence  tioga  palo alto  ca 
pearl  j          heuristics  intelligent search strategies computer problem solving 
addison wesley  reading  ma 
pohl  i          first results effect error heuristic search  meltzer  b    
michie  d   eds    machine intelligence    pp           edinburgh university press 
edinburgh 
pohl  i          bi directional search  machine intelligence    pp          edinburgh 
edinburgh university press 
politowski  g     pohl  i          d node retargeting bidirectional heuristic search 
proc  fourth national conference artificial intelligence  aaai      pp          
menlo park  ca  aaai press   mit press 
rao  v   kumar  v     korf  r          depth first vs best first search  proc  ninth
national conference artificial intelligence  aaai      pp           menlo park 
ca  aaai press   mit press 
reinefeld  a     marsland  t          enhanced iterative deepening search  ieee transactions pattern analysis machine intelligence  pami                    
russell  s          ecient memory bounded search methods  proc  tenth european
conference artificial intelligence  ecai      pp       chichester  england  wiley 
russell  s     norvig  p          artificial intelligence  modern approach  prentice hall 
englewood cliffs  nj 
sen  a     bagchi  a          fast recursive formulations best first search allow
controlled use memory  proc  eleventh international joint conference artificial intelligence  ijcai      pp           san francisco  ca  morgan kaufmann
publishers 
taylor  l     korf  r          pruning duplicate nodes depth first search  proc 
eleventh national conference artificial intelligence  aaai      pp          
menlo park  ca  aaai press   mit press 
zhang  w     korf  r          depth first vs  best first search  new results  proc 
eleventh national conference artificial intelligence  aaai      pp          
menlo park  ca  aaai press   mit press 

   


