journal of artificial intelligence research                  

submitted        published     

the planning spectrum  one  two  three  infinity
marco pistore

pistore dit unitn it

department of information and communication technology
university of trento
via sommarive           povo  trento   italy

moshe y  vardi

vardi cs rice edu

department of computer science
rice university
     s  main street  houston  texas

abstract
linear temporal logic  ltl  is widely used for defining conditions on the execution
paths of dynamic systems  in the case of dynamic systems that allow for nondeterministic
evolutions  one has to specify  along with an ltl formula   which are the paths that are
required to satisfy the formula  two extreme cases are the universal interpretation a  
which requires that the formula be satisfied for all execution paths  and the existential
interpretation e   which requires that the formula be satisfied for some execution path 
when ltl is applied to the definition of goals in planning problems on nondeterministic
domains  these two extreme cases are too restrictive  it is often impossible to develop plans
that achieve the goal in all the nondeterministic evolutions of a system  and it is too weak
to require that the goal is satisfied by some execution 
in this paper we explore alternative interpretations of an ltl formula that are between
these extreme cases  we define a new language that permits an arbitrary combination of
the a and e quantifiers  thus allowing  for instance  to require that each finite execution
can be extended to an execution satisfying an ltl formula  ae    or that there is some
finite execution whose extensions all satisfy an ltl formula  ea    we show that only
eight of these combinations of path quantifiers are relevant  corresponding to an alternation
of the quantifiers of length one  a and e   two  ae and ea   three  aea and eae   and
infinity   ae  and  ea     we also present a planning algorithm for the new language
that is based on an automata theoretic approach  and study its complexity 

   introduction
in automated task planning  fikes   nilsson        penberthy   weld        ghallab  nau 
  traverso         given a description of a dynamic domain and of the basic actions that can
be performed on it  and given a goal that defines a success condition to be achieved  one has
to find a suitable plan  that is  a description of the actions to be executed on the domain in
order to achieve the goal  classical planning concentrates on the so called reachability
goals  that is  on goals that define a set of final desired states to be reached  quite often
practical applications require plans that deal with goals that are more general than sets of
final states  several planning approaches have been recently proposed  where temporal logic
formulas are used as goal language  thus allowing for goals that define conditions on the
whole plan execution paths  i e   on the sequences of states resulting from the execution of
plans  bacchus   kabanza              calvanese  de giacomo    vardi        cerrito  
c
    
ai access foundation  all rights reserved 

fipistore   vardi

mayer        dal lago  pistore    traverso        de giacomo   vardi        kvarnstrom
  doherty        pistore   traverso         most of these approaches use linear temporal
logic  ltl   emerson        as the goal language  ltl allows one to express reachability
goals  e g   f q  reach q   maintainability goals  e g   g q  maintain q   as well as goals
that combine reachability and maintainability requirements  e g   f g q  reach a set of
states where q can be maintained   and boolean combinations of these goals 
in planning in nondeterministic domains  cimatti  pistore  roveri    traverso       
peot   smith        warren         actions are allowed to have different outcomes  and it is
not possible to know at planning time which of the different possible outcomes will actually
take place  nondeterminism in action outcome is necessary for modeling in a realistic way
several practical domains  ranging from robotics to autonomous controllers to two player
games   for instance  in a realistic robotic application one has to take into account that
actions like pick up object might result in a failure  e g   if the object slips out of the
robots hand   a consequence of nondeterminism is that the execution of a plan may lead to
more than one possible execution path  therefore  one has to distinguish whether a given
goal has to be satisfied by all the possible execution paths  in this case we speak of strong
planning   or only by some of the possible execution paths  weak planning   in the case
of an ltl goal   strong planning corresponds to interpreting the formula in a universal
way  as a   while weak planning corresponds to interpreting it in an existential way  as
e  
weak and strong plans are two extreme ways of satisfying an ltl formula  in nondeterministic planning domains  it might be impossible to achieve goals in a strong way  for
instance  in the robotic application it might be impossible to fulfill a given task if objects
keep slipping from the robots hand  on the other hand  weak plans are too unreliable 
since they achieve the goal only under overly optimistic assumptions on the outcomes of
action executions 
in the case of reachability goals  strong cyclic planning  cimatti et al         daniele 
traverso    vardi        has been shown to provide a viable compromise between weak and
strong planning  formally  a plan is strong cyclic if each possible partial execution of the
plan can always be extended to an execution that reaches some goal state  strong cyclic
planning allows for plans that encode iterative trial and error strategies  like pick up an
object until succeed  the execution of such strategies may loop forever only in the case
the action pick up object continuously fails  and a failure in achieving the goal for such
an unfair execution is usually acceptable  branching time logics like ctl and ctl  allow
for expressing goals that take into account nondeterminism  indeed  daniele et al        
show how to encode strong cyclic reachability goals as ctl formulas  however  in ctl
and ctl  path quantifiers are interleaved with temporal operators  making it difficult to
extend the encoding of strong cyclic planning proposed by daniele et al         to generic
temporal goals 
in this paper we define a new logic that allows for exploring the different degrees in which
an ltl formula  can be satisfied that exist between the strong goal a  and the weak goal
e   we consider logic formulas of the form    where  is an ltl formula and  is a
path quantifier that generalizes the a and e quantifiers used for strong and weak planning 
   see the work of ghallab et al         for a deeper discussion on the fundamental role of nondeterminism
in planning problems and in practical applications 

   

fithe planning spectrum  one  two  three  infinity

a path quantifier is a  finite or infinite  word on alphabet  a  e   the path quantifier can
be seen as the definition of a two player game for the selection of the outcome of action
execution  player a  corresponding to symbol a  chooses the action outcomes in order to
make goal  fail  while player e  corresponding to symbol e  chooses the action outcomes
in order to satisfy the goal   at each turn  the active player controls the outcome of action
execution for a finite number of actions and then passes the control to the other player  
we say that a plan satisfies the goal   if the player e has a winning strategy  namely if 
for all the possible moves of player a  player e is always able to build an execution path
that satisfies the ltl formula  
different path quantifiers define different alternations in the turns of players a and e 
for instance  with goal a  we require that the formula  is satisfied independently of how
the hostile player a chooses the outcomes of actions  that is  we ask for a strong plan 
with goal e  we require that the formula  is satisfied for some action outcomes chosen
by the friendly player e  that is  we ask for a weak plan  with goal ae  we require that
every plan execution led by player a can be extended by player e to a successful execution
that satisfies the formula   in the case of a reachability goal  this corresponds to asking
for a strong cyclic solution  with goal ea  we require that  after an initial set of actions
controlled by player e  we have the guarantee that formula  will be satisfied independently
of how player a will choose the outcome of the following actions  as a final example  with
goal  ae      aeaea      we require that formula  is satisfied in all those executions
where player e has the possibility of controlling the action outcome an infinite number of
times 
path quantifiers can define arbitrary combinations of the turns of players a and e  and
hence different degrees in satisfying an ltl goal  we show  however  that  rather surprisingly  only a finite number of alternatives exist between strong and weak planning  only
eight canonical path quantifiers give rise to plans of different strength  and every other
path quantifier is equivalent to a canonical one  the canonical path quantifiers correspond
to the games of length one  a and e   two  ae and ea   and three  aea and eae   and
to the games defining an infinite alternation between players a and e   ae  and  ea    
we also show that  in the case of reachability goals    f q  the canonical path quantifiers
further collapse  only three different degrees of solution are possible  corresponding to weak
 e  f q   strong  a  f q   and strong cyclic  ae  f q  planning 
finally  we present a planning algorithm for the new goal language and we study its
complexity  the algorithm is based on an automata theoretic approach  emerson   jutla 
      kupferman  vardi    wolper         planning domains and goals are represented
as suitable automata  and planning is reduced to the problem of checking whether a given
automaton is nonempty  the proposed algorithm has a time complexity that is doubly
exponential in the size of the goal formula  it is known that the planning problem is
 exptime complete for goals of the form a   pnueli   rosner         and hence the
complexity of our algorithm is optimal 
the structure of the paper is as follows  in section   we present some preliminaries
on automata theory and on temporal logics  in section   we define planning domains and
plans  in section   we define ae ltl  our new logic of path quantifier  and study its basic
   if the path quantifier is a finite word  the player that has the last turn chooses the action outcome for
the rest of the infinite execution 

   

fipistore   vardi

properties  in section   we present a planning algorithm for ae ltl  while in section  
we apply the new logic to the particular cases of reachability and maintainability goals  in
section   we make comparisons with related works and present some concluding remarks 

   preliminaries
this section introduces some preliminaries on automata theory and on temporal logics 
    automata theory
given a nonempty alphabet   an infinite word on  is an infinite sequence                   of
symbols from   finite state automata have been proposed as finite structures that accept
sets of infinite words  in this paper  we are interested in tree automata  namely in finite
state automata that recognize trees on alphabet   rather than words 
definition    tree  a  leafless  tree  is a subset of n such that 
    is the root of the tree 
 if x   then there is some i  n such that x  i    
 if x  i     with x  n and i  n  then also x    
 if x   i        with x  n and i  n  then also x  i    
the arity of x   is the number of its children  namely arity x      i   x  i       let
d  n  tree  is a d tree if arity x   d for each x     a  labelled tree is a pair       
where  is a tree and        in the following  we will denote  labelled tree       as
   and let    dom    
let  be a  labelled tree  a path p of  is a  possibly infinite  sequence x    x          of nodes
xi  dom    such that xk     xk  ik     in the following  we denote with p      the set of
finite paths and with p      the set of infinite paths of    given a  finite or infinite  path p 
we denote with   p  the string   x       x         where x    x          is the sequence of nodes
of path p  we say that a finite  resp  infinite  path p  is a finite  resp  infinite  extension of
the finite path p if the sequence of nodes of p is a prefix of the sequence of nodes of p   
a tree automaton is an automaton that accepts sets of trees  in this paper  we consider
a particular family of tree automata  namely parity tree automata  emerson   jutla        
definition    parity tree automata  a parity tree automaton with parity index k is a
tuple a   h  d  q  q      i  where 
  is the finite  nonempty alphabet 
 d  n is a finite set of arities 
 q is the finite set of states 
 q   q is the initial state 
   

fithe planning spectrum  one  two  three  infinity



d

    q    d   q is the transition function  where  q    d    q  
    q              k  is the parity mapping 
a tree automaton accepts a tree if there is an accepting run of the automaton on the tree 
intuitively  when a parity tree automaton is in state q and it is reading a d ary node of the
tree that is labeled by   it nondeterministically chooses a d tuple hq            qd i in  q    d 
and then makes d copies of itself  one for each child node of the tree  with the state of the
i th copy updated to qi   a run of the parity tree automaton is accepting if  along every
infinite path  the minimal priority that is visited infinitely often is an even number 
definition    tree acceptance  the parity tree automaton a   h  d  q  q      i accepts the  labelled d tree  if there exists an accepting run r for    namely there exists a
mapping r     q such that 
 r     q   
 for each x   with arity x    d we have hr x            r x   d   i   r x     x   d  
 along every infinite path x    x          in
for infinitely many nodes xi is even 

   the minimal integer h such that  r xi      h

the tree automaton a is nonempty if there exists some tree



that is accepted by a 

emerson and jutla        have shown that the emptiness of a parity tree automaton can
be decided in a time that is exponential in the parity index and polynomial in the number
of states 
theorem   the emptiness of a parity tree automaton with n states and index k can be
determined in time no k   
    temporal logics
formulas of linear temporal logic  ltl   emerson        are built on top of a set prop
of atomic propositions using the standard boolean operators  the unary temporal operator
x  next   and the binary temporal operator u  until   in the following we assume to have
a fixed set of atomic propositions prop  and we define     prop as the set of subsets of
prop 
definition    ltl  ltl formulas  on prop are defined by the following grammar  where
q  prop 
     q           x     u 
we define the following auxiliary operators  f      u   eventually in the future   and
g     f   always in the future    ltl formulas are interpreted over infinite words
on   in the following  we write w   ltl  whenever the infinite word w satisfies the ltl
formula  
definition    ltl semantics  let w                 be an infinite word on  and let  be
an ltl formula  we define w  i   ltl   with i  n  as follows 
   

fipistore   vardi

 w  i   ltl q iff q  i  
 w  i   ltl  iff it does not hold that w  i   ltl  
 w  i   ltl     iff w  i   ltl  and w  i   ltl    
 w  i   ltl x  iff w  i     ltl  
 w  i   ltl  u   iff there is some j  i such that w  k   ltl  for all i  k   j and
w  j   ltl    
we say that w satisfies   written w   ltl   if w      ltl  
ctl   emerson        is an example of branching time logic  path quantifiers a
 for all paths  and e  for some path  can prefix arbitrary combinations of linear time
operators 
definition    ctl   ctl  formulas  on prop are defined by the following grammar 
where q  prop 
     q           a    e 
                x     u 
ctl  formulas are interpreted over  labelled trees  in the following  we write
whenever  satisfies the ctl  formula  



  ctl  

definition    ctl  semantics  let  be a  labelled tree and let  be a ctl  formula 
we define    x   ctl    with x     as follows 


   x   ctl  q iff q    x  



   x   ctl   iff it does not hold that    x   ctl   



   x   ctl     



   x   ctl  a  iff    p   ctl   holds for all infinite paths p   x    x          with x    x 



 x

where

iff

  ctl  e  iff
x    x 

   x   ctl   and    x   ctl     

 p

  ctl   holds for some infinite path p   x    x          with

   p   ctl    with p  p       is defined as follows 



   p   ctl   iff p   x    x          and    x    ctl   



   p   ctl   iff it does not hold that    p   ctl   



   p   ctl     



   p   ctl  x  iff    p    ctl    where p    x    x          if p   x    x    x          



   p   ctl   u   iff there is some j    such that    pk   ctl   for all    k   j
and    pj   ctl      where pi   xi   xi           if p   x    x          

iff

   p   ctl   and    p   ctl     

   

fithe planning spectrum  one  two  three  infinity

put b on a
a

b

c

b
a

put c on b
c

c
b
a

figure    a possible scenario in the blocks world domain 
we say that



satisfies the ctl  formula   written



  ctl    if

      ctl   

the following theorem states that it is possible to build a tree automaton that accepts
all the trees satisfying a ctl  formula  the tree automaton has a number of states that is
doubly exponential and a parity index that is exponential in the length of the formula  a
proof of this theorem has been given by emerson and jutla        
theorem   let  be a ctl  formula  and let d  n be a finite set of arities  one can
build a parity tree automaton ad
 that accepts exactly the  labelled d trees that satisfy  
 
the automaton ad
 has  
formula  

o    

states and parity index  o       where    is the length of

   planning domains and plans
a  nondeterministic  planning domain  cimatti et al         can be expressed in terms of a
set of states  one of which is designated as the initial state  a set of actions  and a transition
function describing how  the execution of  an action leads from one state to possibly many
different states 
definition    planning domain  a planning domain is a tuple d   h      a  ri where 
  is the finite set of states 
     is the initial state 
 a is the finite set of actions 
 r     a    is the transition relation 
we require that for each    there is some a  a and some      such that     r   a  
we assume that states  are ordered  and we write r   a    h                n i whenever
r   a                     n   and              n  
example   consider a blocks world domain consisting of a set of blocks  which are initially
on a table  and which can be stacked on top of each other in order to build towers  see
figure    
the states  of this domain are the possible configurations of the blocks  in the case of
three blocks there are    states  corresponding to all the blocks on the table    configuration  
a   block tower and the remaining block on the table    configurations   and a   block tower
   possible configurations   we assume that initially all blocks are on the table 
   

fipistore   vardi

the actions in this domain are put x on y   put x on table  and wait  where x and
y are two  different  blocks  actions put x on y and put x on table are possible only if
there are no blocks on top of x  otherwise we could not pick up x   in addition  action
put x on y requires that there are no blocks on top of y  otherwise we could not put x
on top of y   
we assume that the outcome of action put x on y is nondeterministic  indeed  trying
to put a block on top of a tower may fail  in which case the tower is destroyed  also action
wait is nondeterministic  it is possible that the table is bumped and that all its towers are
destroyed 
a plan guides the evolution of a planning domain by issuing actions to be executed 
in the case of nondeterministic domains  conditional plans  cimatti et al         pistore  
traverso        are required  that is  the next action issued by the plan may depend on
the outcome of the previous actions  here we consider a very general definition of plans  a
plan is a mapping from a sequence of states  representing the past history of the domain
evolution  to an action to be executed 
definition    plan  a plan is a partial function        a such that 
 if  w      a  then     r   a  for some     
 if  w      a  then     r   a  iff w        dom   
 if w    dom   with w      then w  dom   
    is defined iff      is the initial state of the domain 
the conditions in the previous definition ensure that a plan defines an action to be executed
for exactly the finite paths w    that can be reached executing the plan from the initial
state of the domain 
example   a possible plan for the blocks world domain of example   is represented in figure    we remark the importance of having plans in which the action to be executed depends
on the whole sequence of states corresponding to the past history of the evolution  indeed 
according to the plan if figure    two different actions put c on a and put c on table are
performed in the state with block b on top of a  depending on the past history 
since we consider nondeterministic planning domains  the execution of an action may
lead to different outcomes  therefore  the execution of a plan on a planning domain can be
described as a  a  labelled tree  component  of the label of the tree corresponds to
a state in the planning domain  while component a describes the action to be executed in
that state 
definition     execution tree  the execution tree for domain d and plan  is the
 a  labelled tree  defined as follows 


           a    where  

is the initial state of the domain and a         
   

fithe planning spectrum  one  two  three  infinity

w

 w 

abc

put b on a

b
abc  ac

put c on b

b
abc  ac

c
b
 a

b
abc  ac

c
b
 a

b
 ac

b
abc  ac

c
b
 a

b
 ac

put c on table

any other history

put b on table

 abc

wait
wait

figure    a plan for the blocks world domain 
 if p   x            xn  p      with   p         a          a        n   an    and if r n   an    
 
h             d 
i  then for every    i   d the following conditions hold  xn  i  dom   
and   xn  i     i    a i   with a i            n  i    
a planning problem consists of a planning domain and of a goal g that defines the set
of desired behaviors  in the following  we assume that the goal g defines a set of execution
trees  namely the execution trees that exhibit the behaviors described by the goal  we say
that these execution trees satisfy the goal  
definition     planning problem  a planning problem is a pair  d  g   where d is a
planning domain and g is a goal  a solution to a planning problem  d  g  is a plan  such
that the execution tree for  satisfies the goal g 

   a logic of path quantifiers
in this section we define a new logic that is based on ltl and that extends it with the
possibility of defining conditions on the sets of paths that satisfy the ltl property  we
start by motivating why such a logic is necessary for defining planning goals 
example   consider the blocks world domain introduced in the previous section  intuitively  the plan of example   is a solution to the goal of building a tower consisting of
blocks a  b  c and then of destroying it  this goal can be easily formulated as an ltl
   

fipistore   vardi

formula 
    f   c on b  b on a  a on table   f  c on table  b on table  a on table   
notice however that  due to the nondeterminism in the outcome of actions  this plan may
fail to satisfy the goal  it is possible  for instance  that action put c on b fails and the
tower is destroyed  in this case  the plan proceeds performing wait actions  and hence the
tower is never finished  formally  the plan is a solution to the goal which requires that there
is some path in the execution structure that satisfies the ltl formula    
clearly  there are better ways to achieve the goal of building a tower and then destroying
it  if we fail building the tower  rather than giving up  we can restart building it and keep
trying until we succeed  this strategy allows for achieving the goal in most of the paths 
only if we keep destroying the tower when we try to build it we will not achieve the goal  as
we will see  the logic of path quantifiers that we are going to define will allow us to formalize
what we mean by most of the paths 
consider now the following ltl formula 
    f g   c on b  b on a  a on table  
the formula requires building a tower and maintaining it  in this case we have two possible
ways to fail to achieve the goal  we can fail to build the tower  or  once built  we can fail to
maintain it  remember that a wait action may nondeterministically lead to a destruction of
the tower   similarly to the case of formula     a planning goal that requires satisfying the
formula   in all paths of the execution tree is unsatisfiable  on the other hand  a goal that
requires satisfying it on some paths is very weak  our logic allows us to be more demanding
on the paths that satisfy the formula 
finally  consider the following ltl formula 
    g f   c on b  b on a  a on table  
it requires that the tower exists infinitely many time  i e   if the tower gets destroyed  then
we have to rebuild it  intuitively  this goal admits plans that can achieve it more often  i e  
on more paths  than     once again  a path logic is needed to give a formal meaning to
more paths 
in order to be able to represent the planning goals discussed in the previous example 
we consider logic formulas of the form    where  is an ltl formula and  is a path
quantifier and defines a set of infinite paths on which the formula  should be checked  two
extreme cases are the path quantifier a  which is used to denote that  must hold on all the
paths  and the path quantifier e  which is used to denote that  must hold on some paths 
in general  a path quantifier is a  finite or infinite  word on alphabet  a  e  and defines an
alternation in the selection of the two modalities corresponding to e and a  for instance 
by writing ae  we require that all finite paths have some infinite extension that satisfies
  while by writing ea  we require that all the extensions of some finite path satisfy  
the path quantifier can be seen as the definition of a two player game for the selection of
the paths that should satisfy the ltl formula  player a  corresponding to a  tries to build
a path that does not satisfy the ltl formula  while player e  corresponding to e  tries to
   

fithe planning spectrum  one  two  three  infinity

build the path so that the ltl formula holds  different path quantifiers define different
alternations in the turns of players a and e  the game starts from the path consisting only
of the initial state  and  during their turns  players a and e extend the path by a finite
number of nodes  in the case the path quantifier is a finite word  the player that moves last
in the game extends the finite path built so far to an infinite path  the formula is satisfied
if player e has a winning strategy  namely if  for all the possible moves of the player a  it
is always able to build a path that satisfies the ltl formula 
example   let us consider the three ltl formulas defined in example    and let us see
how the path quantifiers we just introduced can be applied 
in the case of formula     the plan presented in example   satisfies requirement e    
there is a path on which the tower is built and then destroyed  it also satisfies the stronger
requirement ea   that stresses the fact that  in this case  once the tower has been built and
destroyed  we can safely give the control to player a  formula   can be satisfied in a
stronger way  however  indeed  the plan that keeps trying to build the tower satisfies the
requirement ae     as well as the requirement aea     player a cannot reach a state where
the satisfaction of the goal is prevented 
let us now consider the formula     in this case  we can find plans satisfying ae    
but no plan can satisfy requirement aea     indeed  player a has a simple strategy to win 
if he gets the control after we built the tower  bump the table  similar considerations hold
also for formula     also in this case  we can find plans for requirement ae     but not for
requirement aea     in this case  however  plans exist also for requirement aeaeae        
if player e gets the control infinitely often  then it can rebuild the tower if needed 
in the rest of the section we give a formal definition and study the basic properties of
this logic of path quantifiers 
    finite games
we start considering only games with a finite number of moves  that is path quantifiers
corresponding to finite words on  a  e  
definition     ae ltl  an ae ltl formula is a pair g      where  is an ltl
formula and    a  e   is a path quantifier 
the following definition describes the games corresponding to the finite path quantifiers 
definition     semantics of ae ltl  let p be a finite path of a  labelled tree
then 
 p    a  if for all finite extensions p  of p it holds that p       
 p    e  if for some finite extension p  of p it holds that p       
 p    a  if for all infinite extensions p  of p it holds that

  p      ltl  

 p    e  if for some infinite extension p  of p it holds that
   

  p      ltl  

 

fipistore   vardi

we say that the  labelled tree  satisfies the ae ltl formula g  and we write
p     g  where p     is the root of   



   g  if

ae ltl allows for path quantifiers consisting of an arbitrary combination of as and
es  each combination corresponds to a different set of rules for the game between a and
e  in theorem   we show that all this freedom in the definition of the path quantifier is
not needed  only six path quantifiers are sufficient to capture all the possible games  this
result is based on the concept of equivalent path quantifiers 
consider formulas a  f p and ae  f p  it is easy to see that the two formulas are equisatisfiable  i e   if a tree  satisfies a  f p then it also satisfies ae  f p  and vice versa  in
this case  path quantifiers a and ae have the same power  but this depends on the fact
that we use the path quantifiers in combination with the ltl formula f p  if we combine
the two path quantifiers with different ltl formulas  such as g p  it is possible to find
trees that satisfy the latter path quantifier but not the former  for this reason  we cannot
consider the two path quantifiers equivalent  indeed  in order for two path quantifiers to
be equivalent  they have to be equi satisfiable for all the ltl formulas  this intuition is
formalized in the following definition 
definition     equivalent path quantifiers  let  and   be two path quantifiers  we
say that  implies     written 
    if for all  labelled trees  and for all ltl formulas
 
        implies         we say that  is equivalent to     written       if 
 
 
and 
 
the following lemma describes some basic properties of path quantifiers and of the
equivalences among them  we will exploit these results in the proof of theorem   
lemma   let       a  e    the following implications and equivalences hold 
   aa   a  and ee   e   
   a 

  and  

e    if   is not empty 

   a 

aea  and eae 

e   

   aeae   ae  and eaea   ea   
proof  in the proof of this lemma  in order to prove that  
   we prove that  given
 
an arbitrary tree  and an arbitrary ltl formula   p       implies p         for every
finite path p of    indeed  if p        implies p         for all finite paths p  then it is easy
to prove  by induction on   that p        implies p         for all finite paths p  in the
following  we will refer to this proof technique as prefix induction 
   we show that  for every finite path p  p    aa    if and only if p    a     then the
equivalence of aa  and a  follows by prefix induction 
let us assume that p    aa     we prove that p    a     that is  that p        
for every finite  extension p  of p  since p    aa     by definition    we know that 
   we assume that   is not the empty word  the proof in the case   is the empty word is similar 

   

fithe planning spectrum  one  two  three  infinity

for every finite extension p  of p  p     a     hence  again by definition     we know
that for every finite extension p   of p    p           since p  is a finite extension of p   
we can conclude that p          therefore  p         holds for all finite extensions p 
of p 
let us now assume that p    a     we prove that p    aa     that is  for all finite
extensions p  of p  and for all finite extensions p   of p    p           we remark that
the finite path p   is also a finite extension of p  and therefore p          holds since
p    a    
this concludes the proof of the equivalence of aa  and a    the proof of the
equivalence of ee  and e  is similar 
   let us assume first that   is not an empty word  we distinguish two cases  depending
on the first symbol of     if     a     then we should prove that aa  
a    
 
  
which we already did in item   of this lemma  if    e   then we show that  for
every finite path p  if p    ae     then p    e      then a 
  follows by
  
prefix induction  let us assume that p    ae    then  for all finite extensions p  of
p there exists some finite  extension p   of p  such that p           let us take p    p 
then we know that there is some finite extension p   of p such that p           that is 
according to definition     p    e    
let us now assume that   is the empty word  by hypothesis         so  is not
empty  we distinguish two cases  depending on the last symbol of   if      a  then
we should prove that   aa
  a  which we already did in item   of this lemma 
if       e  then we prove that for every finite path p  if p    ea  then p    e  
then    ea
   e follows by prefix induction  let us assume that p    ea   by
definition     there exists some finite extension p  of p such that  for every infinite
extension p   of p  we have   p       ltl   let p   be any infinite extension of p    we
know that p   is also an infinite extension of p  and that   p       ltl   then  by
definition    we deduce that p    e  
this concludes the proof that a 

    the proof that  

e  is similar 

   by item   of this lemma we know that a 
aa  and by item   we know that
 
 
aa
aea   this concludes the proof that a 
aea    the proof that
eae 
e  is similar 
   by item   of this lemma we know that  a eae 
 a e    moreover  again
 
 
by item    we know that a e  
aea e    therefore  we deduce ae  
 
 
aeae   the proof that ea  eaea  is similar 

we can now prove the first main result of the paper  each finite path quantifier is
equivalent to a canonical path quantifier of length at most three 
theorem   for each finite path quantifier  there is a canonical finite path quantifier
    a  e ae  ea aea  eae 
   we assume that    is not the empty word  the proof in the case where    is empty is similar 

   

fipistore   vardi

such that       moreover  the following implications hold between the canonical finite
path quantifiers 
   
a  o  o  o   aea o   o  o   ae
o

o

o

o

o

o
 
o
 
 
 
o
ea
eae  o  o o    e


o

proof  we first prove that each path quantifier  is equivalent to some canonical path
quantifier     by an iterative application of lemma       we obtain from  a path quantifier
   such that      and    does not contain two adjacent a or e  then  by an iterative
application of lemma       we can transform    into an equivalent path quantifier   of
length at most    the canonical path quantifiers in     are precisely those quantifiers of
length at most   that do not contain two adjacent a or e 
for the implications in     
a

aea and eae

e come from lemma      

 aea

ea and ae

eae come from lemma      

 aea

ae and ea

eae come from lemma      



we remark that lemma   and theorem   do not depend on the usage of ltl for formula
  they depend on the general observation that 
  whenever player e can select for
game   a set of paths which is a subset of those selected for game  
    infinite games
we now consider infinite games  namely path quantifiers consisting of infinite words on
alphabet  a  e   we will see that infinite games can express all the finite path quantifiers
that we have studied in the previous subsection  but that there are some infinite games  corresponding to an infinite alternation of the two players a and e  which cannot be expressed
with finite path quantifiers 
in the case of infinite games  we assume that player e moves according to a strategy 
that suggests how to extend each finite path  we say that        where  is an infinite
game  if there is some winning strategy  for player e  a strategy  is winning if  whenever
p is an infinite path of  obtained according to   i e   by allowing player a to play in an
arbitrary way and by requiring that player e follows strategy   then p satisfies the ltl
formula  
definition     strategy  a strategy for a  labelled tree  is a mapping    p      
p      that maps every finite path p to one of its finite extensions  p  
definition     semantics of ae ltl  let           with i   a  e  be an infinite
path quantifier  an infinite path p is a possible outcome of game  with strategy  if there
is a generating sequence for it  namely  an infinite sequence p    p          of finite paths such
that 
 pi are finite prefixes of p 
   

fithe planning spectrum  one  two  three  infinity

 p     is the root of tree

 

 if i   e then pi      pi   
 if i   a then pi   is an  arbitrary  extension of pi  
we denote with p      the set of infinite paths of  that are possible outcomes of game 
with strategy   the tree  satisfies the ae ltl formula g      written     g  if there
is some strategy  such that   p    ltl  for all paths p  p      
we remark that it is possible that the paths in a generating sequence stop growing  i e  
that there is some pi such that pi   pj for all j  i  in this case  according to the previous
definition  all infinite paths p that extend pi are possible outcomes 
in the next lemmas we extend the analysis of equivalence among path quantifiers to
infinite games   the first lemma shows that finite path quantifiers are just particular cases
of infinite path quantifiers  namely  they correspond to those infinite path quantifiers that
end with an infinite sequence of a or of e 
lemma   let  be a finite path quantifier  then  a   a and  e   e 
proof  we prove that  a   a  the proof of the other equivalence is similar 
first  we prove that  a 
a  let  be a tree and  be an ltl formula such that
     a     moreover  let  be any strategy such that all p  p   a      satisfy   in
order to prove that     a  it is sufficient to use the strategy  in the moves of player
e  namely  whenever we need to prove that p    e    according to definition     we take
p     p  and we move to prove that p          in this way  the infinite paths selected by
definition    for a coincide with the possible outcomes of game  a    and hence satisfy
the ltl formula  
this concludes the proof that  a 
a  we now prove that a
 a    we distinguish
three cases 
 case     a n   with n    
in this case  a  a  lemma       and  a     a    let  be a tree and  be an
ltl formula  then     a  if and only if all the paths of  satisfy formula   it is
easy to check that also      a    if and only if all the paths of  satisfy formula  
this is sufficient to conclude that  a na   a n  a   
 case    e   
in this case  a  ea  indeed  a is an arbitrary path quantifier that starts with e
and ends with a  by lemma       we can collapse adjacent occurrences of a and of
e   thus obtaining a   ea n for some n      moreover  by lemma      we have
 ea n  ea 
let  be a tree and  be an ltl formula  then     ea  if and only if there is
some finite path p of  such that all the infinite extensions of p satisfy   now  let
   the definitions of the implication and equivalence relations  definition     also apply to the case of
infinite path quantifiers 

   

fipistore   vardi

 be any strategy such that      p  then every infinite path p  p  e   a     
satisfies   indeed  since player e has the first turn  all the possible outcomes are
infinite extensions of      p 
this concludes the proof that e a

e   a   

 case     a n e    with n     
reasoning as in the proof of the previous case  it is easy to show that a  aea 
let  be a tree and  be an ltl formula  then     aea  if and only if for
every finite path p of  there is some finite extension p  of p such that all the infinite
extensions of p  satisfy the formula   let  be any strategy such that p     p  is a
finite extension of p such that all the infinite extensions of p  satisfy   then every
infinite path p  p   a n e   a      satisfies   indeed  let p    p            pn   pn           be
a generating sequence for p  then pn      pn   and p is an infinite extension of pn    
by construction of  we know that p satisfies  
this concludes the proof that  a n e a

 a n e   a   

every finite path quantifier  falls in one of the three considered cases  therefore  we can
conclude that a
 a  for every finite path quantifier  

the next lemma defines a sufficient condition for proving that 
is useful for the proofs of the forthcoming lemmas 

    this condition

lemma   let  and   be two infinite path quantifiers  let us assume that for all  labelled
trees and for each strategy  there is some strategy    such that p            p       then

   
proof  let us assume that        then there is a suitable strategy  such that all
p  p      satisfy the ltl formula   let    be a strategy such that all p           
p       by hypothesis  all possible outcomes for game   and strategy    satisfy the ltl
formula   and hence          this concludes the proof that 
   

in the next lemma we show that all the games where players a and e alternate infinitely
often are equivalent to one of the two games  ae  and  ea    that is  we can assume that
each player extends the path only once before the turn passes to the other player 
lemma   let  be an infinite path quantifier that contains an infinite number of a and
an infinite number of e  then    ae  or    ea   
proof  let     a m   e n   a m   e n     with mi   ni      we show that    ae   
first  we prove that  ae 
  let  be a strategy for the tree  and let p be an infinite
path of    we show that if p  p      then p  p   ae       by lemma   this is
sufficient for proving that  ae 
 
let p    p          be a generating sequence for p according to  and   moreover  let p      
p  i     pm   n    mi   ni   mi and and p  i     pm   n    mi   ni   mi      it is easy to
check that p     p     p           is a valid generating sequence for p according to game  ae  and
strategy   indeed  extensions p    p     p    p     p    p           are moves of player a 
   

fithe planning spectrum  one  two  three  infinity

and hence can be arbitrary  extensions p    p     p    p           correspond to extensions
pm   pm       pm   n   m   pm   n   m               which are moves of player e and hence
respect strategy  
we now prove that 
 ae    let  be a strategy for the tree    we define a strategy 
 then p  p       by lemma   this is sufficient for proving
such that if p  p   ae      

that 
 ae   
    kp  p  with kp   p p  ni   that is  strategy  on path
let p be a finite path  then  p 
i  
p is obtained by applying kp times strategy   the number of times strategy  is applied
depends on the length  p  of path p 
 then p is a possible
we show that  if p is a possible outcome of the game  with strategy  

outcome of the game  ae  with strategy   let p    p          be a generating sequence for p
 then
according to  ae  and  
p    p         p     p         p           n   p     p         p   
   z    
 z
     z  
m  times

m  times
n  times
 
n 
 p       p            p     p         p       

 

 z

n  times

     z  
m  times

is a valid generating sequence for p according to  and   the extensions corresponding to
an occurrence of symbol e in  consist of an application of the strategy  and are hence valid
for player e  moreover  extension  ni  p i     p i   is a valid move for player a because
p i   is an extension of  ni  p i     indeed   ni  p i    is a prefix of p i  and hence of p i    
p p i   
  i       kp i   p i    and kp
since p i    p
 i   
x   nx  ni   since  p i     i  the
other conditions of definition    can be easily checked 
this concludes the proof that    ae  for     a m   e n   a m   e n       the proof that
   ea  for     e m   a n   e m   a n     is similar 

the next lemma contains other auxiliary results on path quantifiers 
lemma   let  be a finite path quantifier and   be an infinite path quantifier 
   a 
    a 

  and  

e   

a  and e 

 e   

proof 
   we prove that a 
    let  be a strategy for tree  and let p be an infinite
path of    we show that if p  p        then p  p  a       let p    p         
be a generating sequence for p according to   and   then it is easy to check that
p    p            pi    pi   pi   pi            where i is the length of   is a valid generating sequence
for p according to a  and   indeed  the extension pi  pi is a valid move for player
a  this concludes the proof that a 
   
now we prove that  
e    if      e    then e    e e     e       
and e 
  is trivially true  if       e    we can assume  without loss of
generality  that     a     in this case  let  be a strategy for tree  and let p be a
   

fipistore   vardi

path of    we show that if p  p  e      then p  p         let p    p          be
a generating sequence for p according to e  and   then it is easy to check that
p    p            pi   pi            where i is the length of   is a valid generating sequence for p
according to   and   indeed  extension pi  pi   is valid  as it corresponds to the
first symbol of   and we have assumed it to be symbol a  this concludes the proof
that  
e   
   we prove that  a 

    the proof that  

 e  is similar 

let  be a strategy for tree  and let p be an infinite path of    we show that if
p  p   a      then p  p         let p    p          be a generating sequence for p
according to   and   then it is easy to check that p    p          is a valid generating sequence for p according to  a  and   in fact   a  defines less restrictive
conditions on generating sequences than    
this is sufficient to conclude that  a 

   



we can now complete the picture of theorem    each finite or infinite path quantifier is
equivalent to a canonical path quantifier that defines a game consisting of alternated moves
of players a and e of length one  two  three  or infinity 
theorem   for each finite or infinite path quantifier  there is a canonical path quantifier
    a  e ae  ea aea  eae   ae     ea   
such that       moreover  the following implications hold between the canonical path
quantifiers 
   
a  o  o  o   aea  o  o  o    ae   o  o  o   ae
o

o

o


o

ea  o  o  o  

o


o

o

 ea 

o


o

 o  o o    eae  o  o o    e

proof  we first prove that each path quantifier is equivalent to a canonical path quantifier 
by theorem    this is true for the finite path quantifiers  so we only consider infinite path
quantifiers 
let  be an infinite path quantifier  we distinguish three cases 
  contains an infinite number of a and an infinite number of e  then  by lemma    
is equivalent to one of the canonical games  ae  or  ea   
  contains a finite number of a  in this case   ends with an infinite sequence of e 
and  by lemma         for some finite path quantifier      by theorem       is
equivalent to some canonical path quantifier  and this concludes the proof for this
case 
  contains a finite number of e  this case is similar to the previous one 
for the implications in     
   

fithe planning spectrum  one  two  three  infinity

  ae 
 ae   

 ea  comes from lemma       by taking the empty word for  and    

 aea
 ae     ae 
and      

ae  ea

 ea    and  ea 

eae come from lemmas  

 the other implications come from theorem   



    strictness of the implications
we conclude this section by showing that all the arrows in the diagram of theorem  
describe strict implications  namely  the eight canonical path quantifiers are all different 
let us consider the following  i  p  q  labelled binary tree  where the root is labelled by i
and each node has two children labelled with p and q 
    
   
im
qqq mmmmm
q
q
mmm
q
m 
qqq
    
    
    
    
p  xq
q
 

    
 


  
 

  

 




    
    
    
    
    
    
    
    
p 
q 
p 
q 
     
     
     
     








    
    
    
    
    
    
    
    
    
    
    
    
    
p     
p
p     
q
q
p
q
q     

let us consider the following ltl formulas 
 f p  player e can satisfy this formula if he moves at least once  by visiting a p labelled
node 
 g f p  player e can satisfy this formula if he can visit an infinite number of p labelled
nodes  that is  if he has the final move in a finite game  or if he moves infinitely often
in an infinite game 
 f g p  player e can satisfy this formula only if he takes control of the game from a
certain point on  that is  only if he has the final move in a finite game 
 g q  player e can satisfy this formula only if player a never plays  since player a
can immediately visit a q labelled node 
 x p  player e can satisfy this formula by playing the first turn and moving to the left
child of the root node 
the following graph shows which formulas hold for which path quantifiers 
fp

gfp

fgp

g q

a  o o    aea  o    ae   o o    ae
o

xp

o

o


o

o


o

o

o


o

ea  o o     ea   o o    eae  o  o o    e
   

fipistore   vardi

   a planning algorithm for ae ltl
in this section we present a planning algorithm for ae ltl goals  we start by showing
how to build a parity tree automaton that accepts all the trees that satisfy a given ae ltl
formula  then we show how this tree automaton can be adapted  so that it accepts only
trees that correspond to valid plans for a given planning domain  in this way  the problem
of checking whether there exists some plan for a given domain and for an ae ltl goal is
reduced to the emptiness problem on tree automata  finally  we study the complexity of
planning for ae ltl goals and we prove that this problem is  exptime complete 
    tree automata and ae ltl formulas
berwanger  gradel  and kreutzer        have shown that ae ltl formulas can be expressed directly as ctl  formulas  the reduction exploits the equivalence of expressive
power of ctl  and monadic path logic  moller   rabinovich         a tree automaton
can be obtained for an ae ltl formula using this reduction and theorem    however 
the translation proposed by berwanger et al         has an upper bound of non elementary
complexity  and is hence not useful for our complexity analysis  in this paper we describe
a different  more direct reduction that is better suited for our purposes 
a  labelled tree  satisfies a formula   if there is a suitable subset of paths of the
tree that satisfy   the subset of paths should be chosen according to   in order to
characterize the suitable subsets of paths  we assume to have a w marking of the tree   
and we use the labels w to define the selected paths 
definition     w marking  a w marking of the  labelled tree  is a   w  w   labelled tree w such that dom      dom w   and  whenever   x      then w  x       w 
or w  x       w  
we exploit w markings as follows  we associate to each ae ltl formula   a ctl 
formula       such that the tree  satisfies the formula   if and only if there is a wmarking of  that satisfies       
definition     ae ltl and ctl   let   be an ae ltl formula  the ctl  formula
      is defined as follows 
  a      a 
  e      e 
  ea      ef w  a f w   
  aea      ag ef w  a f w   
  ae      ag exg w  a f g w   
  eae      ef ag exg w  a f g w   
   ae        ag ef w  a g f w   
   ea        ef ag ef w  a g f w   
in the case of path quantifiers a and e  there is a direct translation into ctl  that does
not exploit the w marking  in the other cases  the ctl  formula       is the conjunction
   

fithe planning spectrum  one  two  three  infinity

of two sub formulas  the first one characterizes the good markings according to the path
quantifier   while the second one guarantees that the paths selected according to the
marking satisfy the ltl formula   in the case of path quantifiers ea and aea  we mark
with w the nodes that  once reached  guarantee that the formula  is satisfied  the selected
paths are hence those that contain a node labelled by w  formula f w   in the case of
path quantifiers ae and eae  we mark with w all the descendants of a node that define an
infinite path that satisfies   the selected paths are hence those that  from a certain node
on  are continuously labelled by w  formula f g w   in the case of path quantifiers  ae 
and  ea    finally  we mark with w all the nodes that player e wants to reach according
to its strategy before passing the turn to player a  the selected paths are hence those that
contain an infinite number of nodes labelled by w  formula g f w   that is  the paths along
which player e moves infinitely often 
theorem    a  labelled tree  satisfies the ae ltl formula   if and only if there is
some w marking of  that satisfies formula       
proof  in the proof  we consider only the cases of    aea     ae and     ae    the
other cases are similar 
assume that a tree  satisfies    then we show that there exists a w marking w of 
that satisfies       
 case    aea  according to definition     if the tree  satisfies aea   then every
finite path p of  can be extended to a finite path p  such that all the infinite extensions
p   of p  satisfy   let us mark with w all the nodes of w that correspond to the
extension p  of some path p  by construction  the marked tree satisfies ag ef w  it
remains to show that the marked tree satisfies a f w    
let us consider any path p   in the tree that satisfies f w  and let us show that p   also
satisfies   since p   satisfies f w  we know that it contains nodes marked with w  let
p  be the finite prefix of path p   up to the first node marked by w  by construction 
there exists a finite path p such that p  is a finite extension of p and all the infinite
extensions of p  satisfy   as a consequence  also p   satisfies  
 case    ae  according to definition     if the tree  satisfies ae   then for all the
finite paths p there is some infinite extension of p that satisfies   therefore  we can
define a mapping m   p       p      that associates to a finite path p an infinite
extension m p  that satisfies   we can assume  without loss of generality  that  if p 
is a finite extension of p and is also a prefix of m p   then m p      m p   that is  as
far as p  extends the finite path p along the infinite path m p  then m associates to
p  the same infinite path m p  
for every finite path p  let us mark with w the node of w that is the child of p
along the infinite path m p   by construction  the marked tree satisfies ag exg w 
it remains to show that the marked tree satisfies a f g w    
let us consider a path p   in the tree that satisfies f g w  and let us show that p   also
satisfies   since p   satisfies f g w  we know that there is some path p such that all
the descendants of p along p   are marked with w  in order to prove that p   satisfies 
   

fipistore   vardi

we show that p     m p   assume by contradiction that m p     p   and let p  be the
longest common prefix of m p  and p     we observe that p is a prefix of p    and hence
m p    m p     this implies that the child node of p  along p   is not marked with w 
which is absurd  since by definition of p all the descendants of p along p   are marked
with w 
 case     ae    according to definition     if the tree  satisfies  ae     then
there exists a suitable strategy  for player e so that all the possible outcomes of game
 with strategy  satisfy   let us mark with w all the nodes in w that correspond
to the extension  p  of some finite path p  that is  we mark with w all the nodes
that are reached after some move of player e according to strategy   the marked
tree satisfies the formula ag ef w  that is  every finite path p can be extended to a
finite path p  such that the node corresponding to p  is marked with w  indeed  by
construction  it is sufficient to take p     p     for some extension p   of p  it remains
to show that the marked tree satisfies a g f w    
let us consider a path p in the tree that satisfies g f w  and let us show that p also
satisfies   to this purpose  we show that p is a possible outcome of game  with
strategy   we remark that  given an arbitrary finite prefix p  of p it is always possible
to find some finite extension p   of p  such that  p     is also a prefix of p  indeed  the
set of paths p    p    p  is a finite prefix of p  is infinite  as there are infinite nodes
marked with w in path p 
now  let p    p    p          be the sequence of finite paths defined as follows  p       is
the root of the three  p k   is the shortest extension of p k such that  p k     is a
prefix of p  and p k      p k      it is easy to check that p    p    p          is a generating
sequence for p according to  ae  and   hence  by definition     the infinite path p
satisfies the ltl formula  
this concludes the proof that if  satisfies    then there exists a w marking of  that
satisfies       
assume now that there is a w marked tree w that satisfies        we show that  satisfies
  
 case    aea  the marked tree satisfies the formula ag ef w  this means that for
each finite path p  ag  there exists some finite extension p  such that the final node
of p  is marked by w  ef w    let p   be any infinite extension of such a finite path p   
we show that p   satisfies the ltl formula   clearly  p   satisfies the formula f w 
since the tree satisfies the formula a f w     all the infinite paths that satisfy f w
also satisfy   therefore  p   satisfies the ltl formula  
 case    ae  the marked tree satisfies the formula ag exg w  then  for each
finite path p  ag  there exists some infinite extension p  such that  from a certain
node on  all the nodes of p  are marked with w  exg w   we show that  if p  is the
infinite extension of some finite path p  then p  satisfies the ltl formula   clearly 
p  satisfies the formula f g w  since the tree satisfies the formula a f g w     all
the infinite paths that satisfy f g w also satisfy   therefore  p  satisfies the ltl
formula  
   

fithe planning spectrum  one  two  three  infinity

 case     ae    let  be any strategy so that  for every finite path p  the node
corresponding to  p  is marked with w  we remark that it is always possible to define
such a strategy  in fact  the marked tree satisfies the formula ag ef w  and hence 
each finite path p can be extended to a finite path p  such that the node corresponding
to p  is marked with w 
let p be a possible outcome of game  with strategy   we should prove that p satisfies
the ltl formula   by definition     the infinite path p contains an infinite set of
nodes marked by w  these are all the nodes reached after a move of player e  hence 
p satisfies the formula g f w  since the tree satisfies the formula a g f w     all
the infinite paths that satisfy g f w also satisfy   therefore  path p satisfies the ltl
formula  
this concludes the proof that  if there exists a w marking of tree
then       



that satisfies       


kupferman        defines an extension of ctl  with existential quantification over
atomic propositions  egctl   and examines complexity of model checking and satisfiability
for the new logic  we remark that ae ltl can be seen as a subset of egctl   indeed 
according to theorem     a  labelled tree satisfies an ae ltl formula   if and only if
it satisfies the egctl  formula w       
in the following definition we show how to transform a parity tree automaton for the
ctl  formula       into a parity tree automaton for the ae ltl formula    this
transformation is performed by abstracting away the information on the w marking from
the input alphabet and from the transition relation of the tree automaton 
definition    let a   h w  w   d  q  q      i be a parity tree automaton  the parity
tree automaton aw   h  d  q  q    w   i  obtained from a by abstracting away the wmarking  is defined as follows  w  q    d     q     w   d    q     w   d  
lemma    let a and aw be two parity tree automata as in definition     aw accepts
exactly the  labelled trees that have some w marking which is accepted by a 
proof  let w be a   w  w   labelled tree and let  be the corresponding  labelled
tree  obtained by abstracting away the w marking  we show that if w is accepted by a 
then  is accepted by aw   let r     q be an accepting run of w on a  then r is also
an accepting run of  on aw   indeed  if x     arity x    d  and w  x       m  with
m   w  w   then we have hr x              r x  d  i   r x      m   d   then   x     
and  by definition of aw   we have hr x              r x  d  i  w  r x     d  
now we show that  if the  labelled tree  is accepted by aw   then there is a   w  w  labelled tree w that is a w marking of  and that is accepted by a  let r     q be an
accepting run of  on aw   by definition of run  we know that if x     with arity x    d
and   x      then hr x              r x  d  i  w  r x     d   by definition of w   we
know that hr x              r x  d  i   r x      w   d    r x      w   d   let us define
w  x       w  if hr x              r x  d  i   r x      w   d   and w  x       w  otherwise 
it is easy to check that r is an accepting run of w on a 

   

fipistore   vardi

now we have all the ingredients for defining the tree automaton that accepts all the
trees that satisfy a given ae ltl formula 
definition     tree automaton for ae ltl  let d  n be a finite set of arities  and
let   be an ae ltl formula  the parity tree automaton ad
  is obtained by applying the
transformation described in definition    to the parity automaton ad
      built according to
theorem   
theorem    the parity tree automaton ad
  accepts exactly the  labelled d trees that
satisfy the formula   
proof  by theorem    the parity tree automaton ad
      accepts all the d trees that satisfy
the ctl  formula        therefore  the parity tree automaton ad
  accepts all the d trees
that satisfy the formula   by lemma    and theorem    

the parity tree automaton ad
  has a parity index that is exponential and a number of
states that is doubly exponential in the length of formula  
 
proposition    the parity tree automaton ad
  has  

o    

states and parity index  o      

proof  the construction of definition    does not change the number of states and the
parity index of the automaton  therefore  the proposition follows from theorem   

    the planning algorithm
we now describe how the automaton ad
  can be exploited in order to build a plan for goal
  on a given domain 
we start by defining a tree automaton that accepts all the trees that define the valid
plans of a planning domain d   h      a  ri  we recall that  according to definition   
transition relation r maps a state    and an action a  a into a tuple of next states
h                n i   r   a  
in the following we assume that d is a finite set of arities that is compatible with domain
d  namely  if r   a    h            d i for some    and a  a  then d  d 
definition     tree automaton for a planning domain  let d   h      a  ri be a
planning domain and let d be a set of arities that is compatible with domain d  the
d
tree automaton ad
d corresponding to the planning domain is ad   ha  d        d     i 
where h            d i  d       a   d  if h            d i   r   a  with d      and          for
all    
according to definition     a  a  labelled tree can be obtained from each plan  for
domain d  now we show that also the converse is true  namely  each  a  labelled tree
accepted by the tree automaton ad
d induces a plan 
definition     plan induced by a tree  let  be a  a  labelled tree that is accepted by automaton ad
d   the plan  induced by  on domain d is defined as follows                   n     a if there is some finite path p in  with   p         a    
     a        n   an   and a   an  
   

fithe planning spectrum  one  two  three  infinity

the following lemma shows that definitions    and    define a one to one correspondence between the valid plans for a planning domain d and the trees accepted by automaton
ad
d 
lemma    let  be a tree accepted by automaton ad
d and let  be the corresponding
induced plan  then  is a valid plan for domain d  and  is the execution tree corresponding
to   conversely  let  be a plan for domain d and let  be the corresponding execution
structure  then  is accepted by automaton ad
d and  is the plan induced by   
proof  this lemma is a direct consequence of definitions    and    



we now define a parity tree automaton that accepts only the trees that correspond to the
plans for domain d and that satisfy goal g      this parity tree automaton is obtained
by combining in a suitable way the tree automaton for ae ltl formula g  definition    
and the tree automaton for domain d  definition     
definition     instrumented tree automaton  let d be a set of arities that is compatible with planning domain d  let also ad
g   h  d  q  q      i be a parity tree automaton that accepts only the trees that satisfy the ae ltl formula g  the parity tree
automaton ad
d g corresponding to planning domain d and goal g is defined as follows 
d
ad g   ha  d  q   q                 i  where h q                  qd   d  i       q        a   d  if
hq            qd i   q    d  and h            d i   r   a  with d      and where     q       q  
the following lemmas show that solutions to planning problem  d  g  are in one to one
correspondence with the trees accepted by the tree automaton ad
d g  
lemma    let  be a  a  labelled tree that is accepted by automaton ad
d g   and let 
be the plan induced by  on domain d  then the plan  is a solution to planning problem
 d  g  
proof  according to definition     we have to prove that the execution tree corresponding
to  satisfies the goal g  by lemma     this amounts to proving that the tree  satisfies g 
by construction  it is easy to check that if a  a  labeled tree  is accepted by ad
d g   then
d
it is also accepted by ag   indeed  if rd g     q   is an accepting run of  on ad
d g  
d
then rg     q is an accepting run of  on ag   where rg  x    q whenever rd g    q   
for some    

lemma    let  be a solution to planning problem  d  g   then the execution tree of 
is accepted by automaton ad
d g  
proof  let  be the execution tree of   by lemma    we know that  is accepted by ad
d 
moreover  by definition of solution of a planning problem  we know that  is accepted also
by ad
g   by construction  it is easy to check that if a  a  labeled tree  is accepted by
d
d
ad and by ad
g   then it is also accepted by ad g   indeed  let rd      be an accepting
d
run of  on ad
d and let rg     q be an accepting run of  on ag   then rd g     q  
d
is an accepting run of  on ad g   where rd g  x     q    if rd  x     and rg  x    q 

   

fipistore   vardi

as a consequence  checking whether goal g can be satisfied on domain d is reduced to
the problem of checking whether automaton ad
d g is nonempty 
theorem    let d be a planning domain and g be an ae ltl formula  a plan exists for
goal g on domain d if and only if the tree automaton ad
d g is nonempty 
proposition    the parity tree automaton ad
d g for domain d          a  r  and goal
g     has       

o    

states and parity index  o      

proof  this is a consequence of proposition    and of the definition of automaton ad
d g   
    complexity
we now study the time complexity of the planning algorithm defined in subsection     
given a planning domain d  the planning problem for ae ltl goals g     can
be decided in a time that is doubly exponential in the size of the formula  by applying
theorem   to the tree automaton ad
d g  
lemma    let d be a planning domain  the existence of a plan for ae ltl goal g    
o    
on domain d can be decided in time   
 
proof  by theorem    the existence of a plan for goal g on domain d is reduced to the
emptiness problem on parity tree automaton ad
d g   by proposition     the parity tree
o    

 
automaton ad
    states and parity index  o       since we assume that
d g has  
domain d is fixed  by theorem    the emptiness of automaton ad
d g can be decided in time

  

o    

 



the doubly exponential time bound is tight  indeed  the realizability problem for an
ltl formula   which is known to be  exptime complete  pnueli   rosner         can
be reduced to a planning problem for the goal a   in a realizability problem one assumes
that a program and the environment alternate in the control of the evolution of the system 
more precisely  in an execution               the states i are decided by the program if i is
even  and by the environment if i is odd  we say that a given formula  is realizable if
there is some program such that all its executions satisfy  independently on the actions of
the environment 
theorem    let d be a planning domain  the problem of deciding the existence of a plan
for ae ltl goal g     on domain d is  exptime complete 
proof  the realizability of formula  can be reduced to the problem of checking the exis
tence of a plan for goal a  on planning domain d    init       p  e    init     e   r  
with 
r init                e  
 

r init  e    

 

r    p             e  

r    p   e    

 

r    e   e           p         

r    e        
   

fithe planning spectrum  one  two  three  infinity

for all        
states    p  are those where the program controls the evolution through actions      
states    e  are those where the environment controls the evolution  only the nondeterministic action e can be performed in this state  finally  state init is used to assign the initial
move to the program 
since the realizability problem is  exptime complete in the size of the ltl formula
 pnueli   rosner         the planning problem is  exptime hard in the size of the goal
g      the  exptime completeness follows from lemma    

we remark that  in the case of goals of the form e   an algorithm with a better
complexity can be defined  in this case  a plan exists for e  if and only if there is an
infinite sequence               of states that satisfies  and such that i    r i   ai   for some
action ai   that is  the planning problem can be reduced to a model checking problem
for ltl formula   and this problem is known to be pspace complete  sistla   clarke 
       we conjecture that  for all the canonical path quantifiers  except e  the doubly
exponential bound of theorem    is tight 
some remarks are in order on the complexity of the satisfiability and validity problems
for ae ltl goals  these problems are pspace complete  indeed  the ae ltl formula
  is satisfiable if and only if the ltl formula  is satisfiable    and the latter problem is
known to be pspace complete  sistla   clarke         a similar argument holds also for
validity 
the complexity of the model checking problem for ae ltl has been recently addressed
by kupferman and vardi         kupferman and vardi introduce mctl   a variant of
ctl   where path quantifiers have a memoryful interpretation  they show that memoryful quantification can express  with linear cost  the semantics of path quantifiers in our
ae ltl  for example  the ae ltl formula ae  is expressed in mctl  by the formula
ag e   kupferman and vardi show that the model checking problem for the new logic is
expspace complete  and that this result holds also for the subset of mctl  that corresponds to formulas ae   therefore  the model checking problem for ae ltl with finite
path quantifiers is also expspace complete  to the best of our knowledge the complexity
of model checking ae ltl formulas  ae    and  ea    is still an open problem 

   two specific cases  reachability and maintainability goals
in this section we consider two basic classes of goals that are particularly relevant in the
field of planning 
    reachability goals
the first class of goals are the reachability goals corresponding to the ltl formula f q 
where q is a propositional formula  most of the literature in planning concentrates on this
class of goals  and there are several works that address the problem of defining plans of
different strength for this kind of goals  see  e g   cimatti et al        and their citations  
   if a tree satisfies   then some of its paths satisfy   and a path that satisfies  can be seen also as a
tree that satisfies   

   

fipistore   vardi

in the context of ae ltl  as soon as player e takes control  it can immediately achieve
the reachability goal if possible at all  the fact that the control is given back to player a
after the goal has been achieved is irrelevant  therefore  the only significant path quantifiers
for reachability goals are a  e  and ae 
proposition    let q be a propositional formula on atomic propositions prop  then  the
following results hold for every labelled tree        e  f q iff     ea  f q iff     eae  f q
iff      ea    f q  moreover     ae  f q iff     aea  f q iff      ae    f q 
proof  we prove that     ae  f q iff     aea  f q iff      ae    f q  the other cases are
similar 
let us assume that     ae  f q  moreover  let p be a finite path of    we know that p
can be extended to an infinite path p  such that   p       f q  according to the semantics of
ltl    p       f q means that there is some node x in path p  such that q    x   clearly 
all infinite paths of  that contain node x also satisfy the ltl formula f q  therefore 
there is a finite extension p   of p such that all the infinite extensions of p   satisfy the ltl
formula f q  it is sufficient to take as p   an finite extension of p that contains node x  since
this property holds for every finite path p  we conclude that     aea  f q 
we have proven that     ae  f q implies     aea  f q  by theorem   we know that
aea
 ae 
ae  and hence     aea  f q implies      ae    f q implies     ae  f q 
this concludes the proof 

the following diagram shows the implications among the significant path quantifiers for
reachability goals 
   
a  o  o  o   ae  o  o  o   e
we remark that the three goals a  f q  e  f q  and ae  f q correspond  respectively  to the
strong  weak  and strong cyclic planning problems of cimatti et al         
    maintainability goals
we now consider another particular case  namely the maintainability goals g q  where q is
a propositional formula  maintainability goals have properties that are complementary to
the properties of reachability goals  in this case  as soon as player a takes control  it can
violate the maintainability goal if possible at all  the fact that player e can take control
after player a is hence irrelevant  and the only interesting path quantifiers are a  e  and
ea 
proposition    let q be a propositional formula on atomic propositions prop  then  the
following results hold for every labelled tree    then     a  g q iff     ae  g q iff    
aea  g q iff      ae    g q  moreover     ea  g q iff     eae  g q iff      ea    g q 
proof  the proof is similar to the proof of proposition    



the following diagram shows the implications among the significant path quantifiers for
maintainability goals 
a  o  o  o   ea  o  o  o   e
   

fithe planning spectrum  one  two  three  infinity

the goals a  g q  e  g q  and ea  g q correspond to maintainability variants of strong  weak 
and strong cyclic planning problems  indeed  they correspond to requiring that condition q is
maintained for all evolutions despite nondeterminism  a  g q   that condition q is maintained
for some of the evolutions  e  g q   and that it is possible to reach a state where condition
q is always maintained despite nondeterminism  ea  g p  

   related works and concluding remarks
in this paper we have defined ae ltl  a new temporal logic that extends ltl with the
possibility of declaring complex path quantifiers that define the different degrees in which an
ltl formula can be satisfied by a computation tree  we propose to use ae ltl formulas
for expressing temporally extended goals in nondeterministic planning domains  we have
defined a planning algorithm for ae ltl goals that is based on an automata theoretic
framework  the existence of a plan is reduced to checking the emptiness of a suitable parity
tree automaton  we have studied the time complexity of the planning algorithm  proving
that it is  exptime complete in the length of the ae ltl formula 
in the field of planning  several works use temporal logics for defining goals  most of
these approaches  bacchus   kabanza              calvanese et al         cerrito   mayer 
      de giacomo   vardi        kvarnstrom   doherty        use linear temporal logics
as the goal language  and are not able to express conditions on the degree in which the goal
should be satisfied with respect to the nondeterminism in the execution  notable exceptions
are the works described by pistore  bettin  and traverso         pistore and traverso       
and by dal lago et al          pistore et al         and pistore and traverso        use ctl
as goal language  while dal lago et al         define a new branching time logic that allows
for expressing temporally extended goals that can deal explicitly with failure and recovery
in goal achievement  in these goal languages  however  path quantifiers are interleaved with
the temporal operators  and are hence rather different from ae ltl 
in the field of temporal logics  the work on alternating temporal logic  atl   alur 
henzinger    kupferman        is related to our work  in atl  the path quantifiers in
ctl and ctl  are replaced by game quantifiers  nevertheless  there is no obvious way to
expressed formulas of the form    where  is a path quantifier and  is an ltl formula
in atl   which is the most expressive logic studied by alur et al          our conjecture
is that our logic and atl are of incomparable expressiveness 
some comments are in order on the practical impact of the  exptime complexity of
the planning algorithm  first of all  in many planning problems we expect to have very
complex and large domains  but goals that are relatively simple  see  e g   the experimental
evaluation performed by pistore et al         in the case of planning goals expressed as ctl
formulas   in these cases  the doubly exponential complexity of the algorithm in the size of
the formula may not be a bottleneck  for larger ae ltl goals  a doubly exponential time
complexity may not be feasible  but it should be noted that this is worst case complexity 
we also note that improved algorithms for plan synthesis is an active research area  including
the analysis of simpler ltl goals  alur   la torre        and the development of improved
automata theoretic algorithms  kupferman   vardi        
the automata theoretic framework that we have used in the paper is of wider applicability than ae ltl goals  an interesting direction for future investigations is the application
   

fipistore   vardi

of the framework to variants of ae ltl that allow for nesting of path quantifiers  or for
goals that combine ae ltl with propositional or temporal operators  this would allow 
for instance  to specify goals which compose requirements of different strength  a simple
example of such goals is  ae  f p  a  g p   which requires to achieve condition p in a strong
cyclic way  maintaining condition q in a strong way  the impossibility to define such kind
of goals is  in our opinion  the strongest limitation of ae ltl with respect to ctl and
ctl  
another direction for future investigations is the extension of the approach proposed in
this paper to the case of planning under partial observability  de giacomo   vardi        
where one assumes that the agent executing the plan can observe only part of the state and
hence its choices on the actions to execute may depend only on that part 
we also plan to explore implementation issues and  in particular  the possibility of
exploiting bdd based symbolic techniques in a planning algorithm for ae ltl goals  in
some cases  these techniques have shown to be able to deal effectively with domains and
goals of a significant complexity  despite the exponential worst case time complexity of the
problems  bertoli  cimatti  pistore  roveri    traverso        pistore et al         

acknowledgments
a shorter version of this paper  without proofs  has been published by pistore and vardi
        the authors would like to thank erich gradel for his comments on the reduction
of ae ltl formulas to ctl  formulas 

references
alur  r   henzinger  t     kupferman  o          alternating time temporal logic  journal
of the acm                 
alur  r     la torre  s          deterministic generators and games for ltl fragments 
acm trans  comput  log              
bacchus  f     kabanza  f          planning for temporally extended goals  ann  of
mathematics and artificial intelligence          
bacchus  f     kabanza  f          using temporal logic to express search control knowledge
for planning  artificial intelligence                    
bertoli  p   cimatti  a   pistore  m   roveri  m     traverso  p          mbp  a model
based planner  in proc  of ijcai   workshop on planning under uncertainty and
incomplete information 
berwanger  d   gradel  e     kreutzer  s          once upon a time in the west   determinacy  definability  and complexity of path games  in prof  of   th int  conf on logic
for programming  artificial intelligence  and reasoning  lpar     pp         
calvanese  d   de giacomo  g     vardi  m          reasoning about actions and planning
in ltl action theories  in proc  of  th int  conf  on the principles of knowledge
representation and reasoning  kr     pp         
   

fithe planning spectrum  one  two  three  infinity

cerrito  s     mayer  m          bounded model search in linear temporal logic and its
application to planning  in proc  of  nd int  conf  on analytic tableaux and related
methods  tableaux     vol       of lnai  pp          springer verlag 
cimatti  a   pistore  m   roveri  m     traverso  p          weak  strong  and strong cyclic
planning via symbolic model checking   artificial intelligence                  
dal lago  u   pistore  m     traverso  p          planning with a language for extended
goals  in proc  of   th national conf  on artificial intelligence  aaai     aaai
press 
daniele  m   traverso  p     vardi  m          strong cyclic planning revisited  in proc 
of  th european conf  in planning  ecp     vol       of lnai  pp        springer
verlag 
de giacomo  g     vardi  m          automata theoretic approach to planning with temporally extended goals  in proc  of  th european conf  in planning  ecp     vol 
     of lnai  pp          springer verlag 
emerson  e  a          temporal and modal logic  in van leeuwen  j   ed    handbook of
theoretical computer science  volume b  formal models and semantics  elsevier 
emerson  e     jutla  c          the complexity of tree automata and logics of programs 
in proc  of   th ieee symp  on foundations of computer science  pp         
emerson  e     jutla  c          tree automata   calculus and determinacy  in proc  of
  nd ieee symp  on foundations of computer science  pp         
fikes  r     nilsson  n          strips  a new approach to the application of theorem
proving to problem solving  artificial intelligence                  
ghallab  m   nau  d     traverso  p          automated planning  theory and practice 
elsevier 
kupferman  o          augmenting branching temporal logics with existential quantification over atomic propositions  journal of logic and computation                
kupferman  o     vardi  m          safraless decision procedures  in proc  of   th ieee
symp  on foundations of computer science  focs     pp          ieee computer
society 
kupferman  o     vardi  m          memoryful branching time logic  in proc  of the
  th ieee symposium on logic in computer science  lics        ieee computer
society 
kupferman  o   vardi  m     wolper  p          an automata theoretic approach to branching time model checking  journal of the acm         
kvarnstrom  j     doherty  p          talplanner  a temporal logic based forward chaining
planner  ann  of mathematics and artificial intelligence             
moller  f     rabinovich  a          on the expressive power of ctl   in proc  of   th
annual ieee symposium on logic in computer science  lics     pp         
ieee computer science press 
   

fipistore   vardi

penberthy  j     weld  d          ucpop  a sound  complete  partial order planner for
adl  in proc  of  rd int  conf  on the principles of knowledge representation and
reasoning  kr    
peot  m     smith  d          conditional nonlinear planning  in proc  of  st int  conf 
on ai planning systems  aips     pp          morgan kaufmann publisher 
pistore  m   bettin  r     traverso  p          symbolic techniques for planning with
extended goals in non deterministic domains  in proc  of  th european conf  in
planning  ecp    
pistore  m     traverso  p          planning as model checking for extended goals in nondeterministic domains  in proc  of   th int  joint conf  on artificial intelligence
 ijcai     aaai press 
pistore  m     vardi  m          the planning specturm  one  two  three  infinity  in
proc  of the   th ieee symposium on logic in computer science  lics        pp 
       
pnueli  a     rosner  r          distributed reactive systems are hard to synthesize  in
proc  of   st ieee symp  on foundation of computer science  pp         
sistla  a     clarke  e          the complexity of propositional linear temporal logic 
journal acm             
warren  d          generating conditional plans and programs  in proc  of the summer
conf  on artificial intelligence and simulation of behaviour  aisb     pp         

   

fi