journal artificial intelligence research                  

submitted        published      

engineering note
optiplan  unifying ip based graph based planning
menkes h l  van den briel

menkes asu edu

department industrial engineering
arizona state university  tempe  az       usa

subbarao kambhampati

rao asu edu

department computer science engineering
arizona state university  tempe  az       usa

abstract
optiplan planning system first integer programming based planner
successfully participated international planning competition  engineering note
describes architecture optiplan provides integer programming formulation
enabled perform reasonably well competition  touch upon
recent developments make integer programming encodings significantly competitive 

   introduction
optiplan planning system uses integer linear programming  ip  solve strips
planning problems  first system take part international planning
competition  ipc  judged second best performer four competition domains
optimal track propositional domains  optiplans underlying integer programming
formulation extends state change model vossen colleagues         architecture similar blackbox  kautz   selman        gp csp  do  
kambhampati         instead unifying satisfiability  sat  constraint satisfaction
 csp  graph based planning  optiplan uses integer programming  blackbox
gp csp  optiplan works two phases  first phase planning graph built
transformed ip formulation  second phase ip formulation solved
using commercial solver ilog cplex  ilog inc         
practical difference original state change model optiplan
former takes input ground actions fluents initialized plan steps 
latter takes input actions fluents instantiated graphplan
 blum   furst         well known use planning graphs significant
effect size final encoding matter combinatorial transformation method
 ip  sat  csp  used  instance  kautz selman        well kambhampati
       pointed blackboxs success satplan  kautz   selman        mainly
explained graphplans ability produce better  refined  propositional structures
satplan  addition  optiplan allows propositions deleted without required
preconditions  state changes modeled original state change model 
therefore optiplan considered general encoding  one more  although
c
    
ai access foundation  rights reserved 

fivan den briel    kambhampati

minor  implementation detail optiplan state change model optiplan
reads pddl files 
engineering note organized follows  section   provides brief background
integer programming section   discusses previous ip approaches planning  section
  describes optiplan planning system underlying ip formulation  section  
give experimental results look optiplans performance international
planning competition       ipc    conclusions brief discussion recent
developments given section   

   background
linear program represented linear objective function set inequalities 
min cx   ax b  x    x n dimensional column vector variables 
n matrix  c n dimensional row vector  b m dimensional column vector 
variables constrained integers integer  linear  program 
variables restricted     values binary integer program 
widely used method solving general integer programs using branch
bound linear programming relaxation  branch bound general search
method subproblems created restrict range integer variables 
linear programming relaxation linear program obtained original integer
program omitting integrality constraints  ideal formulation integer program
one solution linear programming relaxation integral  even though
every integer program ideal formulation  wolsey         practice hard
characterize ideal formulation may require exponential number inequalities 
problems ideal formulation cannot determined  often desirable find
strong formulation integer program  suppose p    min cx   a  x b    x   
p    min cx   a  x b    x    linear programming relaxations two ip
formulations problem  say formulation p  stronger formulation p 
p  p    is  set solutions p  subsumed set solutions p   

   integer programming approaches planning
despite vast amount research conducted field ai planning 
use linear programming  lp  integer linear programming explored
marginal level  quite surprising since  mixed  integer linear programming provide
feasible environments using numeric constraints arbitrary linear objective functions 
two important aspects real world planning problems 
handful works explored use lp ip techniques ai planning 
bylander        developed ip formulation classical planning used lp relaxation heuristic partial order planning  results  however  seem scale
well compared planning graph satisfiability based planners 
difficulty developing strong ip formulations performance often depends way ip formulation constructed  vossen et al         compared two
formulations classical planning  first  consider straightforward ip formulation
based converting propositional representation given satplan  kautz   selman 
   

fioptiplan  unifying ip based graph based planning

      ip formulation variables take value   certain proposition
true    otherwise  formulation  assertions expressed ip constraints
directly correspond logical conditions propositional representation  second 
consider ip formulation original propositional variables replaced
state change variables  state change variables take value   certain proposition
added  deleted  persisted    otherwise  vossen et al  show formulation based
state change variables outperforms straightforward formulation based converting
propositional representation 
dimopoulos        improves ip formulation based state change variables identifying valid inequalities tighten formulation  yet  even stronger ip formulations
given bockmayr dimopoulos               ip formulations contain
domain dependent knowledge are  therefore  limited solving problems specific
problem domains only 
lp ip techniques explored non classical planning  dimopoulos
gerevini        describe mixed integer programming formulation temporal planning wolfman weld        use lp formulation combination sat
formulation solve resource planning problems  kautz walser        use ip
formulations resource planning problems but  addition  incorporate action costs
complex objectives 
far  none ip approaches ai planning ever participated ipc  making
harder assess relative effectiveness line work  optiplan  planner based
state change formulation  first ip based planner so 

   optiplan
optiplan planning graph based planner works follows  first build
planning graph level goal fluents appear non mutex  compile
planning graph integer program solve it  plan found  planning
graph extended one level new graph compiled integer program
solved again  process repeated plan found 
remainder section give ip formulation used optiplan 
order present ip formulation use following notation  f set fluents
set actions  operators   fluents true initial state
fluents must true goal given g respectively  furthermore 
use sets 
pref a  f f  set actions fluent f precondition 
addf a  f f  set actions fluent f add effect 
delf a  f f  set actions fluent f delete effect 
variables defined layer   planning graph 
variables actions variables possible state changes fluent
make  variables reachable relevant planning graph analysis
instantiated  a          action variables
   

fivan den briel    kambhampati

ya t  



  action executed period t 
  otherwise 

no op actions included ya t variables represented separately
state change variable xmaintain
 
f t
optiplan based state change formulation  vossen et al          formulation fluents represented explicitly  instead state change variables used model
transitions world state  is  fluent true added state
preadd
xadd
  persisted previous state xmaintain
  optiplan extends
f t xf t
f t
state change formulation  vossen et al         introducing extra state change
variable  xdel
f t   allows actions delete fluents without requiring preconditions 
original state change formulation allow actions  therefore added
new state change variables keep track state changes altered model
take new variables account  ipc  domains airport psr
many actions delete fluents without requiring preconditions  therefore making
original state change formulation ineffective  also  optiplan instantiates
variables constraints reachable relevant planning graph analysis 
therefore creates smaller encoding original one  f f         
following state change variables 

  fluent f propagated period t 
maintain
 
xf t
  otherwise 

  action executed period pref
  delf  
preadd
xf t
 
  otherwise 

  action executed period pref delf  
predel
xf t
 
  otherwise 

  action executed period
  pref addf  
 
xadd
f t
  otherwise 

  action executed period tsuch
  pref delf  
xdel
 
f t
  otherwise 
summary  xmaintain
    truth value fluent propagated  xpreadd
   
f t
f t
action executed requires fluent delete it  xpredel
    action
f t
add
executed requires fluent deletes it  xf t     action executed
require fluent adds it  xdel
f t     action executed require
fluent deletes it  complete ip formulation optiplan given following
objective function constraints 

    objective
classical ai planning problems  minimization maximization required  instead
want find feasible solution  search solution  however  may guided
   

fioptiplan  unifying ip based graph based planning

objective function minimization number actions  currently
implemented optiplan  objective function given by 
min

xx

ya t

   

aa

since constraints guarantee feasibility could used linear objective function  example  could easily set objective deal cost sensitive plans
 in context non uniform action cost   utility sensitive plans  in context oversubscription goal utilities   metric transformed linear
expression  indeed flexibility handle linear objective function one advantages ip formulations 

    constraints
requirements initial goal transition given by 
xadd
f      
maintain preadd
xadd
  xf  
f     xf  
maintain
xadd
  xpreadd
f t   xf t
f t

f

   

  

f
 i

   

 

f g

   

constraints          add initial fluents step   used
actions appear first layer  step    planning graph  constraints
    represent goal state requirements  is  fluents appear goal must
added propagated step  
state change variables linked actions following effect implication
constraints  f f   have 
x
ya t xadd
   
f t
aaddf  pref

ya t xadd
f t
x

ya t

addf   pref

xdel
f t

   
   

adelf  pref

ya t xdel
f t
x

delf   pref

ya t xpreadd
f t

   
   

apref  delf

ya t xpreadd
f t
x

ya t   xpredel
f t

pref   delf

    
    

apref delf

constraints          represent logical relations action
state change variables  equality sign      actions f
   

fivan den briel    kambhampati

precondition delete effect mutually exclusive  means
substitute xpredel
variables  done implementation
f t
optiplan  will  however  use variables clarity  mutexes appear
different state change variables expressed constraints follows 

predel
maintain
 
  xdel
xadd
f t   xf t
f t   xf t

    

predel
xpreadd
  xmaintain
  xdel
 
f t
f t   xf t
f t

    

constraints           restrict certain state changes occurring parallel 
del
example  xmaintain
 propagating fluent f step t  mutually exclusive xadd
f t
f t   xf t  
xpredel
 adding deleting f t  
f t
finally  backward chaining requirements binary constraints represented by 

add
maintain
xpreadd
  xmaintain
  xpredel
xpreadd
f t
f t
f t
f t    xf t    xf t 

f f         

    

del maintain
xpreadd
  xpredel
  xadd
      
f t   xf t   xf t
f t
f t

    

ya t       

    

constraints      describe backward chaining requirements  is  fluent
f added maintained step t  state f changed action step
xpreadd
  xpredel
  propagated xmaintain
  constraints     
f t
f t
f t
     binary constraints state change action variables respectively 

loc 

truck 

loc 

truck 

figure    simple logistics example

    example
example  show constraints initialized comment
interaction state change variables action variables 
consider simple logistics example two locations  two trucks 
one package  package transported one location another one
trucks  built formulation three plan steps  initial state package
   

fioptiplan  unifying ip based graph based planning

trucks location   given figure    initial state constraints are 
xadd
pack 

loc   

xadd
truck 

loc   
add
xtruck  loc   
add maintain preadd
xf     xf  
  xf  

  
  
  
  

f   

goal get package location   three plan steps  expressed
follows 
xadd
pack 

loc   

  xmaintain
pack 

loc   

  xpreadd
pack 

loc   

 

write effect implication constraints  comment
them  xadd
f t     certain fluent f   execute least one action
f add effect precondition  example 
yunload

truck  loc  t

  yunload

truck  loc  t

xadd
pack 

loc  t

preadd
state changes xdel
similar requirement  change
f t xf t
state del preadd must execute least one action corresponding effects  hand  execute action must change
fluent states according effects a  example 

yunload

truck  loc  t

xadd
pack 

yunload

truck  loc  t



yunload

truck  loc  t

 

loc  t
preadd
xtruck loc  t
xpredel
pack  truck  t

one to one correspondence  note equality sign  execution
actions xpredel
state change variables  because  actions
f t
predel effect must mutex  mutexes present state changes  example 
fluent f maintained  propagated  cannot added deleted  two state
changes mutex add preadd  add state
change behaves preadd state change corresponding fluent already present
state world  introduce two separate mutex constraints  one
includes add state change one includes preadd  example
constraints mutex state changes follows 
xadd
pack 

truck  t

xpreadd
pack 

truck  t

  xmaintain
pack 

truck  t

  xdel
pack 

truck  t

  xpredel
pack 

truck  t

 

  xmaintain
pack 

truck  t

  xdel
pack 

truck  t

  xpredel
pack 

truck  t

 

state fluent change another state correct state changes
occurred previously  hence  fluent deleted  propagated  used preconditions
step added propagated step    example 
xpreadd
pack 

predel
maintain
truck  t   xpack  truck  t   xpack  truck  t
add
maintain
xpreadd
pack  truck  t    xpack  truck  t    xpack  truck  t 

   



fivan den briel    kambhampati

t  
xadd
pack 
xadd
truck 
xadd
truck 

loc   

t  
yload truck  loc   
xadd
pack  truck   
xpredel
pack  loc   
xpreadd
truck  loc   

loc   

xmaintain
truck 

loc   

t  
ydrive truck  loc  loc   
xmaintain
pack  truck   
xadd
truck 
xpredel
truck 

loc   

t  
yunload truck  loc   
xadd
pack  loc   
xpredel
pack  truck   
xpreadd
truck  loc   

loc   

loc   

table    solution simple logistics example  displayed variables value  
variables value   

simple problem total     variables     action    state change 
   constraints  however  planning graph analysis fixes    variables     action    state
change  zero  substituting values applying presolve techniques
built ilog cplex solver  problem    variables    constraints 
solution example given table    note that  actions
actively delete f   nothing ensures xmaintain
true whenever f
f t
true preceding state  for example  see fluent truck  loc    since negative
preconditions allowed  option letting xmaintain
false
f t
true cannot cause actions become executable be 
miss solutions constraints     ensure goal fluents satisfied 
therefore forcing xmaintain
true whenever helps us generate plan 
f t

   experimental results
first compare optiplan original state change model  check
optiplan performed ipc      
optiplan original state change formulation implemented two different
languages  optiplan implemented c   using concert technology  set
libraries allow embed ilog cplex optimizers  ilog inc         
original state change model implemented ampl  fourer  gay    kernighan        
modeling language mathematical programming  order compare
formulations produced two implementations  written output
file using mps format  mps standard data format often used transferring
linear integer linear programming problems different applications 
mps file  contains ip formulation planning problem  written  read
solved ilog cplex     pentium      ghz      gb ram 
table   shows encoding size two implementations  encoding size
characterized number variables number constraints formulation 
encoding size applying ilog cplex presolve given  presolve
problem reduction technique  brearley  mitra    williams        helps linear
programming problems simplifying  reducing eliminating redundancies  short 
   

fioptiplan  unifying ip based graph based planning

problem
bw sussman
bw   step
bw large a
att log 
log easy
log a

state change model
presolve
presolve
 var   cons   var   cons 
   
   
   
   
    
    
    
    
    
     
    
    
    
    
  
  
     
     
    
    
     
     
    
    

optiplan
presolve
presolve
 var   cons   var   cons 
   
   
   
   
    
    
   
    
    
    
    
    
   
   
 
 
    
    
   
   
    
    
    
    

table    encoding size original state change formulation optiplan
ilog cplex presolve   var   cons  give number variables
constraints respectively 

problem
bw sussman
bw   step
bw large a
bw large b
att log 
att log 
att log 
att log 
att log 
att loga
rocket a
rocket b
log easy
log a
log b
log c

 var 
   
    
    
    
  
   
   
    
    
    
    
    
    
    
    
    

state change model
 cons   nodes
   
 
    
  
    
 
     
  
  
 
   
 
   
  
    
  
    
  
    
   
    
   
    
   
    
  
    
   
    
   
    
   

time
    
    
    
      
    
    
    
    
    
      
     
    
    
      
     
      

 var 
   
   
    
    
 
  
  
   
   
    
   
    
   
    
    
    

optiplan
 cons   nodes
   
 
    
  
    
 
    
  
 
 
  
 
  
 
   
 
   
 
    
  
    
  
    
  
   
 
    
  
    
   
    
  

time
    
    
    
     
    
    
    
    
    
    
    
    
    
    
     
     

table    performance encoding size original state change formulation optiplan   var   cons  give number variables constraints
ilog cplex presolve   nodes give number nodes explored
branch and bound finding first feasible solution 

   

fivan den briel    kambhampati

presolve tries remove redundant constraints fixed variables formulation 
aggregate  substitute out  variables possible 
encoding size presolve  actual encoding size problem 
see significant use planning graphs is  optiplan  instantiates
fluents actions reachable relevant planning graph
analysis  produces encodings cases one order magnitude smaller
encodings produced original state change model  instantiates ground
fluents actions  although difference encoding size reduces substantially
applying presolve  planning graph analysis still finds redundancies presolve fails
detect  consequently  encodings produced optiplan still smaller
encodings produced original state change model 
performance  and encoding size presolve  optiplan original
state change model given table    performance measured time find
first feasible solution  results show overall effectiveness using planning graph
analysis  problems optiplan generates smaller encodings performs
better encodings generated state change model 
    ipc results
optiplan participated propositional domains optimal track ipc      
track  planners could either minimize number actions  bfhsp semsyn 
minimize makespan  cpt  hsp a  optiplan  satplan    tp    minimize
metric 
ipc results makespan optimal planners given figure    results
evaluated competition organizers looking runtime plan quality graphs 
also  planners compared estimating asymptotic runtime
analyzing solution quality performance  seven competition domains 
optiplan judged second best four them  quite remarkable integer
programming hitherto considered competitive planning 
optiplan reached second place optical telegraph philosopher domains 
domains optiplan one order magnitude slower satplan   
clearly outperforms participating planners  pipesworld tankage domain 
optiplan awarded second place together satplan    satellite domain
optiplan  cpt  semsyn tied second place  domains optiplan
perform well  airport domain  optiplan solves first    problems
problem     takes time so  pipesworld notankage
psr domains  optiplan slowest solves fewest number problems
among participating planners 
looking domains problems optiplan difficulty scaling  notice
problems lead large ip encodings  since size encoding
function plan length  optiplan often fails solve problems long solution plans 
one way resolve issue de link encoding size solution length 
done recent work  van den briel  vossen    kambhampati 
       fact  year following ipc  developed novel ip encodings    
   

fioptiplan  unifying ip based graph based planning

model transitions individual fluents separate loosely coupled network flow
problems      control encoding length generalizing notion parallelism 

   conclusions
optiplan planning system performs significantly better original state change
model vossen colleagues         performed respectably ipc   still
lags behind sat  csp based planners  blackbox chaff   satplan   siege  
gp csp  believe  however  performance gap ip techniques
inferior sat csp  rather reflection types ip formulations
tried far  specifically  encodings tried
tailored strengths ip solvers  chandru   hooker        
experience optiplan encouraged us continue working improved ip
formulations ai planning  recent work  van den briel  vossen    kambhampati 
      model fluents loosely coupled network flow problems control encoding
length generalizing notion parallelism  resulting ip encodings solved
within branch and cut algorithm yield impressive results  also  new approach
shown highly competitive state of the art sat based planners 

references
blum  a     furst  m          fast planning planning graph analysis  proceedings
  th international joint conference artificial intelligence  ijcai      pp 
         
bockmayr  a     dimopoulos  y          mixed integer programming models planning problems  working notes cp    constraint problem reformulation
workshop 
bockmayr  a     dimopoulos  y          integer programs valid inequalities planning problems  proceedings european conference planning  ecp     
pp          springer verlag 
brearley  a   mitra  g     williams  h          analysis mathematical programming
problems prior applying simplex algorithm  mathematical programming    
     
bylander  t          linear programming heuristic optimal planning  aaai   iaai    proceedings  pp         
chandru  v     hooker  j          optimization methods logical inference  john wiley
  sons  new york 
dimopoulos  y          improved integer programming models heuristic search
ai planning  proceedings european conference planning  ecp      pp 
        springer verlag 
   

fivan den briel    kambhampati

     

     

    

    

   
time sec 

time sec 

   
  
optiplan

 

  
 
optiplan

satplan  
   

   

cpt

    

    
 

 

  

  

  

  

  

  

  

  

satplan  
cpt

tp 

 

  

 

  

     

     

    

    

   

   

time sec 

time sec 

  

  

  

  

  

satellite problem nr 

airport problem nr 

  
optiplan

 

  
 

satplan  
   

optiplan
   

cpt

satplan  

tp 

cpt

    

    
 

 

  

  

  

  

  

  

  

  

  

 

 

  

  

  

  

    

    

   

   

  

time sec 

     

optiplan
satplan  

 

hsps a
 

 

 

 

 

 

 

  

  

     

 

  

 

satplan  

cpt

tp 

  

  

  

philosophers problem nr 

optical telegraph problem nr 

     
optiplan

    

satplan  
hsps a

   

tp 
cpt

  
 
   
    
 

  

optiplan
hsps a

    

    
 

  

 
   

tp 

 

  

  

cpt
   

 

  

pipesworld tankge problem nr 

     

time sec 

time sec 

pipesworld notankage problem nr 

  

 

  

  

  

  

  

  

  

  

  

psr problem nr 

figure    ipc      results makespan optimal planners 

   

  

fioptiplan  unifying ip based graph based planning

dimopoulos  y     gerevini  a          temporal planning mixed integer programming  proceeding aips workshop planning temporal domains 
pp     
do  m     kambhampati  s          planning constraint satisfaction  solving planning graph compiling csp  artificial intelligence                  
fourer  r   gay  d     kernighan  b          ampl  modeling language mathematical programming  duxbury press  belmont  ca 
ilog inc   mountain view  ca         ilog cplex     users manual 
kambhampati  s          challenges bridging plan synthesis paradigms  proceedings
  th international joint conference artificial intelligence  ijcai      pp 
     
kautz  h     selman  b          planning satisfiability  proceedings european
conference artificial intelligence  ecai  
kautz  h     selman  b          blackbox  unifying sat based graph based planning 
proceedings   th international joint conference artificial intelligence
 ijcai      pp         
kautz  h     walser  j          state space planning integer optimization  aaai   iaai    proceedings  pp         
van den briel  m   vossen  t     kambhampati  s          reviving integer programming approaches ai planning  branch and cut framework  proceedings
international conference automated planning scheduling  icaps      pp 
       
vossen  t   ball  m   lotem  a     nau  d          use integer programming
models ai planning  proceedings   th international joint conference
artificial intelligence  ijcai      pp         
wolfman  s     weld  d          lpsat engine application resource planning  proceedings   th international joint conference artificial intelligence  ijcai      pp         
wolsey  l          integer programming  wiley interscience series discrete mathematics
optimization  john wiley   sons  new york 

   


