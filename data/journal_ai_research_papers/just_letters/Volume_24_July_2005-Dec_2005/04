journal artificial intelligence research                  

submitted        published      

first probabilistic track
international planning competition
hakan l  s  younes

lorens cs cmu edu

computer science department
carnegie mellon university
pittsburgh  pa       usa

michael l  littman
david weissman
john asmuth

mlittman cs rutgers edu
dweisman cs rutgers edu
jasmuth cs rutgers edu

department computer science
rutgers university
piscataway  nj       usa

abstract
     international planning competition  ipc    included probabilistic planning
track first time  describe new domain specification language created
track  evaluation methodology  competition domains developed 
results participating teams 

   background
fourth international planning competition  ipc    held part international conference planning scheduling  icaps    vancouver  british columbia
june       request icaps   organizers  sven koenig shlomo zilberstein 
asked create first probabilistic planning track part ipc   
overriding goal first probabilistic planning track bring together two
communities converging similar set research issues aid creating comparable tools evaluation metrics  one community consists markov decision process
 mdp  researchers interested developing algorithms apply powerfully expressive
representations environments  consists planning researchers incorporating
probabilistic decision theoretic concepts planning algorithms  cross fertilization begun  intent probabilistic planning track create set
shared benchmarks metrics could crystallize efforts area study 
created new domain description language called ppddl     described section    ppddl stands probabilistic planning domain definition language  analogy pddl  mcdermott         introduced ipc    ppddl modeled
pddl     fox   long         domain description language deterministic domains
used ipc    syntactically  language strips adl like flavor  includes
probabilistic constructs  focus energy participants issues dealing uncertainty  chose include constructs durative actions ppddl    
basing domain description language pddl  sought remain spirit
existing planning competition  hope bring communities
c
    
ai access foundation  rights reserved 

fiyounes  littman  weissman   asmuth

together  ppddl representation relational  although representations
explicit objects traditional feature mdp based domain description languages 
algorithms exploit features begun appear  expected participants
propositionalize domains running planning algorithms and 
part  so 
fully functional parser ppddl provided participants c   form
plan validator simple planner  basic tools convert ppddl decisiondiagram representation provided  many ways  handling rich constructs
ppddl main hurdle many participants tried provide much
assistance could dimension 
although ppddl supports numerical fluents  feature used fullest
extent competition  numerical quantities used representing reward
values  reward effects required additive 
since classical track well established point  helpful contrast
probabilistic track differs  defining difference  course  actions
uncertain effects  is  pickup action blocksworld might behave differently
different occasions  even state  single difference number
significant consequences  first  optimal action choices reaching goal may
function probabilistic outcomes along waya single sequence actions may
sufficient  result  difficult output plan  reason 
decided separate plan synthesis execution two phases  instead evaluated
planners online  second  unpredictability effects  even optimal plan
reaching goal may get unlucky fail probability  reason 
evaluated planner multiple times problem include separate
optimal planner track  addition  since planners may fail reach goal state
executions  needed way trading goal attainment action
cost  decided score execution goal reward minus action cost chose goal
reward problem  section   describes evaluation methodology detail 
total  designed eight domains competition  section     domains
simply noisy versions classical planning domains  domains designed
specifically thwart greedy replanning approaches ignore uncertainty 
ten planners seven different groups entered competition  results
competition presented section    deterministic replanner performed best overall 
primarily due disproportionate number noisy classical planning problems
evaluation suite  domains proved challenging participating planners 
latter domains could serve basis future probabilistic planning competitions 

   probabilistic pddl
section describes input language  ppddl     used probabilistic
track  ppddl    essentially syntactic extension levels     pddl     fox
  long         complete syntax ppddl    given appendix a  assume
reader familiar pddl     focus new language features 
include probabilistic effects rewards  detailed account ppddl    provided
   

fithe first probabilistic track ipc

name
bomb in package package 
bomb in package package 
toilet clogged
bomb defused

type
boolean
boolean
boolean
boolean

init  
true
false
false
false

init  
false
true
false
false

table    state variables initial values bomb toilet problem 
younes littman         semantics ppddl    planning problem given
terms discrete time markov decision process  howard              puterman        
    probabilistic effects
define probabilistic decision theoretic planning problems  need add support
probabilistic effects  syntax probabilistic effects
 probabilistic p  e        pk ek  
meaning
pk effect ei occurs probability pi   require constraints pi  
i   pi     fulfilled  probabilistic effect declares exhaustive set probabilityweighted outcomes  do  however  allow probability effect pair left
effect empty  words 
 probabilistic p  e        pl el  


pl

i   pi

    syntactic sugar
 probabilistic p  e        pl el q  and  
pl

q     i   pi  and  representing empty effect  that is  state changes  
example  effect  probabilistic      clogged   means probability    
state variable clogged becomes true next state  probability    
state remains unchanged 
figure   shows encoding ppddl bomb toilet example described
kushmerick  hanks  weld         requirements flag  probabilistic effects
signals probabilistic effects used domain definition  problem 
two packages  one contains bomb  bomb defused dunking
package containing bomb toilet       probability toilet becoming
clogged package placed it  thus rendering goal state unreachable 
problem definition figure   shows initial conditions ppddl
probabilistic  particular example  define two possible initial states equal
probability       true initial state given execution  table   lists
state variables bomb toilet problem values two possible initial
states  intuitively  think initial conditions ppddl planning problem
effects action forced scheduled right time    also  note
goal problem involves negation  problem definition declares
 negative preconditions requirements flag 
   

fiyounes  littman  weissman   asmuth

 define  domain bomb and toilet 
  requirements  conditional effects  probabilistic effects 
  predicates  bomb in package  pkg   toilet clogged 
 bomb defused  
  action dunk package
 parameters   pkg 
 effect  and  when  bomb in package  pkg 
 bomb defused  
 probabilistic       toilet clogged     
 define  problem bomb and toilet 
  domain bomb and toilet 
  requirements  negative preconditions 
  objects package  package  
  init  probabilistic      bomb in package package  
     bomb in package package    
  goal  and  bomb defused   not  toilet clogged     
figure    ppddl encoding bomb toilet example 

ppddl allows arbitrary nesting conditional probabilistic effects  see example
figure     feature contrast popular encodings  probabilistic strips
operators  psos  kushmerick et al         factored psos  dearden   boutilier        
allow conditional effects nested inside probabilistic effects  arbitrary
nesting add expressiveness language  allow exponentially
compact representations certain effects given set state variables
actions  rintanen         ppddl action can  however  translated set psos
polynomial increase size representation  consequently  follows
results littman        ppddl  grounding  that is  full instantiation
action schemata   representationally equivalent dynamic bayesian networks  dean
  kanazawa         another popular representation mdp planning problems 
still  worth noting single ppddl action schema represent large number
actions single predicate represent large number state variables  meaning
ppddl often represent planning problems succinctly representations  example  number actions represented using objects n
action schemata arity c nc   bounded polynomial size
original representation  m   n   grounding means prerequisite ppddl
planning  planners could conceivably take advantage compact representation
working directly action schemata 
    rewards
markovian rewards  associated state transitions  encoded using fluents  numeric
state variables   ppddl reserves fluent reward   accessed  reward  reward 
represent total accumulated reward since start execution  rewards associated
   

fithe first probabilistic track ipc

 define  domain coffee delivery 
  requirements  negative preconditions
 disjunctive preconditions
 conditional effects  mdp 
  predicates  in office   raining   has umbrella   is wet 
 has coffee   user has coffee  
  action deliver coffee
 effect  and  when  and  in office   has coffee  
 probabilistic
     and  user has coffee 
 not  has coffee  
 increase  reward       
     and  probabilistic      not  has coffee   
 when  user has coffee 
 increase  reward          
 when  and  not  in office    has coffee  
 and  probabilistic      not  has coffee   
 when  user has coffee 
 increase  reward         
 when  and  not  has coffee    user has coffee  
 increase  reward       
 when  not  is wet  
 increase  reward         
     

figure    part ppddl encoding coffee delivery domain 

state transitions update rules action effects  use reward fluent
restricted action effects form  hadditive opi hreward fluenti hf expi  
hadditive opi either increase decrease  hf expi numeric expression involving reward   action preconditions effect conditions allowed refer
reward fluent  means accumulated reward considered
part state space  initial value reward zero  restrictions use
reward fluent allow planner handle domains rewards without
implement full support fluents 
new requirements flag   rewards  introduced signal support rewards
required  domains require probabilistic effects rewards declare  mdp
requirements flag  implies  probabilistic effects  rewards 
figure   shows part ppddl encoding coffee delivery domain described
dearden boutilier         reward     awarded user coffee
deliver coffee action executed  reward     awarded is wet false
execution deliver coffee  note total reward     awarded
result executing deliver coffee action execution action leads state
user  has coffee is wet hold 
   

fiyounes  littman  weissman   asmuth

    plan objectives
regular pddl goals used express goal type performance objectives  goal statement
  goal   probabilistic planning problem encodes objective probability
achieving maximized  unless explicit optimization metric specified
planning problem  planning problems instantiated domain declaring
 rewards requirement  default plan objective maximize expected reward 
goal statement specification reward oriented planning problem identifies set
absorbing states  addition transition rewards specified action effects  possible
associate one time reward entering goal state  done using   goal reward
f   construct  f numeric expression 
general  statement   metric maximize f   problem definition means
expected value f maximized  reward oriented problems  example problem instance coffee delivery domain figure    would declare   metric maximize
 reward   optimization criterion  this declaration default  rewards
requirement specified   ppddl defines goal achieved special optimization
metric  used explicitly specify plan objective maximize  or
minimize  probability goal achievement  value goal achieved fluent  
execution ends goal state  expected value goal achieved therefore equal
probability goal achievement  declaration   metric maximize  goal achieved  
takes precedence reward specifications domain problem definition 
default  rewards requirement specified  for example  bomb
toilet problem figure    
    ppddl semantics
completeness  present formal semantics ppddl planning problems terms
mapping probabilistic transition system rewards  planning problem defines
set state variables v   possibly containing boolean numeric state variables 
although consider planning problems without numeric state variables
section  assignment values state variables defines state  state space
planning problem set states representing possible assignments values
variables  addition
v   planning problem defines initial state distribution
p
p           ss p   s       that is  p  probability distribution states  
formula g v characterizing set goal states g    s      g    one time reward
rg associated entering goal state  set actions instantiated ppddl
action schemata  goal directed planning problems  without explicit rewards  use
rg     
      probability reward structure
action consists precondition effect ea   action applicable
state    g   error apply state
    g   goal states absorbing  action may applied state satisfying
g   requirement must hold order applicable consistent
semantics pddl     fox   long        permits modeling forced chains
actions  effects recursively defined follows  see also  rintanen        
   

fithe first probabilistic track ipc

     null effect  represented ppddl  and  
   b b effects b v boolean state variable 
   r v  v r  effect 
   c e effect c formula v e effect 
   e  en effect e            en effects 
   p
  e           pn en effect e            en effects  pi               n  
p
n
i   pi     
effect b sets boolean state variable b true next state  b sets b false
next state  effects form r v used associate rewards transitions
described below 
action   ha   ea defines transition probability matrix pa state reward
vector ra   pa  i  j  probability transitioning state j applying
state i  ra  i  expected reward executing action state i 
readily compute entries reward vector action effect formula ea   let c
characteristic function boolean formula c  is  c  s       c  
otherwise  expected reward effect e applied state s  denoted r e  s  
computed using following inductive definition 
 
r    s     
 
r b  s     
 
r b  s     
 
r r v  s    v
 
r c e  s    c  s  r e  s 
n
  x
r e  en   s   
r ei   s 
i  
n
  x
r p  e           pn en   s   
pi r ei   s  
i  

factored representation probability matrix pa obtained generating
dynamic bayesian network  dbn  representation action effect formula ea  
use bayesian inference dbn obtain monolithic representation pa  
structure factored representation exploited algorithms decision
theoretic planning  see  example  work boutilier  dearden    goldszmidt       
hoey  st aubin  hu    boutilier        boutilier  dean    hanks        guestrin  koller 
parr    venkataraman        
bayesian network directed graph  node graph represents state
variable  directed edge one node another represents causal dependence 
node associated conditional probability table  cpt   cpt state variable
xs node represents probability distribution possible values x conditioned
values state variables whose nodes parents xs node  bayesian network
   

fiyounes  littman  weissman   asmuth

factored representation joint probability distribution variables represented
network 
dbn bayesian network specific structure aimed capturing temporal
dependence  state variable x  create duplicate state variable x     x
representing situation present time x   representing situation one time
step future  directed edge present time state variable x future time
state variable   encodes temporal dependence  edges two presenttime state variables  future time present time state variable  the present
depend future   can  however  edge two future time state
variables  edges  called synchronic edges  used represent correlated effects 
dbn factored representation joint probability distribution present time
future time state variables  transition probability matrix discrete time
markov process 
show generate dbn representing transition probability matrix
ppddl action  avoid representational blowup  introduce multi valued auxiliary
variable probabilistic effect action effect  auxiliary variables introduced indicate possible outcomes probabilistic effect occurs  allowing
representation correlate effects specific outcome  auxiliary variable
associated probabilistic effect n outcomes take n different values 
ppddl effect e size  e  consist o  e   distinct probabilistic effects  hence 
number auxiliary variables required encode transition probability matrix
action effect e o  e    future time versions auxiliary
variables necessary  ppddl problem boolean state variables  need
order  m   maxaa  ea   nodes dbns representing transition probability
matrices actions 
provide compositional approach generating dbn represents transition probability matrix ppddl action precondition effect ea   assume
effect consistent  is  b b occur outcome
overlapping conditions  dbn empty effect   simply consists  m nodes 
present time node x connected future time counterpart x     cpt x  
non zero entries pr x         x          pr x       x         
holds reward effect r v  change value state variables 
next  consider simple effects b b  let xb state variable associated
ppddl atom b  effects  eliminate edge xb xb    cpt
xb  entry pr xb           effect b pr xb          effect b 
conditional effects  c e  take dbn e add edges presenttime state variables mentioned formula c future time state variables
dbn e   entries cpt state variable x   correspond settings
present time state variables satisfy c remain unchanged  entries set
  x true   otherwise  the value x change effect condition
satisfied  
dbn effect conjunction e  en constructed dbns
n effect conjuncts  value pr x         x  dbn conjunction set
   transformation increase size dbns exponentially unless context specific dbns
used  boutilier  friedman  goldszmidt    koller        

   

fithe first probabilistic track ipc

r

r

r 
hu 
iw  
uhc 
hc 
io 

raining
has umbrella
is wet
user has coffee
has coffee
in office

hu

hu

iw

iw

uhc

uhc

aux 

hc

hc

aux 

io

io

aux 

aux   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

io
 
 
 
 




 
 
 
 





hc
 
 


 
 


 
 


 
 



uhc
 

 

 

 

 

 

 

 


uhc  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

figure    dbn structure  left  deliver coffee action coffee delivery domain  cpt uhc    the future time version state variable
user  has coffee  shown right 

maximum pr x         x  dbns conjuncts  maximum used
state variable set true  false  conjunctive effect set true
 false  one effect conjuncts  effects assumed consistent  result
taking maximum separate probability tables still probability table  
finally  construct dbn probabilistic effect p  e           pn en   introduce
auxiliary variable   used indicate one n outcomes occurred 
node   parents  entries cpt pr y     i    pi  
given dbn ei   add synchronic edge   state variables x 
value pr x         x      j  set pr x         x  j     otherwise 
transformation repeated n outcomes  results n dbns  dbns
trivially combined single dbn probabilistic effect
mutually exclusive preconditions  the value y  
example  figure   shows dbn encoding transition probability matrix
deliver coffee action  whose ppddl encoding given figure   
three auxiliary variables action effect contains three probabilistic effects 
node labeled uhc    the future time version state variable user  has coffee  four
parents  including one auxiliary variable  consequently  cpt node
        rows  shown right figure    
      optimality criteria
shown construct mdp ppddl encoding planning problem 
plan objective maximize expected reward mdp  objective
interpreted different ways  example expected discounted reward expected total
   

fiyounes  littman  weissman   asmuth

reward  suitable interpretation depends problem  process oriented planning problems  for example  coffee delivery problem   discounted reward typically
desirable  total reward often interpretation chosen goal oriented problems
 for example  bomb toilet problem   ppddl include facility
enforcing given interpretation specifying discount factor 
competition  used expected total reward optimality criterion  without
discounting  care required design planning problems ensure
expected total reward bounded optimal policy  following restrictions
made problems used planning competition 
   problem goal statement  identifying set absorbing goal states 
   positive reward associated transitioning goal state 
   negative reward  cost  associated action 
   done action available states  could used end accumulation reward 
conditions ensure mdp model planning problem positive bounded
model  puterman         positive reward transitioning goal state 
since goal states absorbing  that is  outgoing transitions   maximum
value state bounded goal reward  furthermore  done action ensures
action available state guarantees non negative future reward 

   evaluation methodology
classical planning  plan series operators  successful plan one that 
applied initial state  achieves goal  probabilistic planning  many
proposals plan representations  straight line plans  plan trees  policy graphs  triangle
tables  example   none considered widely accepted standard  addition  even
simple plans challenging evaluate exactly non deterministic environment 
possible outcomes need checked results combined  littman  goldsmith   
mundhenk        
reasons  chose evaluate planners simulation  is  plan validator server  individual planning algorithms acted clients  planners connected
validator  received initial state  returned operator action  dialog
continued terminating condition reached point validator evaluated
performance planner trajectory initial state terminating condition  entire process repeated several times results averaged multiple
runs 
evaluation scheme blurs distinction planner executor 
means computation longer one time preprocessing cost  something integrated action selection itself  planner quality  therefore  needs combination
expected utility running time  simplicity  set time threshold allowed
reward gathered time ran out  time threshold known competitors 
whose planners could take consideration deciding balance computation
   

fithe first probabilistic track ipc

action  since know whether participants would reuse results one trajectory speed planning next  set overall time limit applied total
repetitions evaluator given domain 
concretely  evaluations  participants presented twenty previously unseen problems ppddl format  evaluate problem  participants connected one
evaluation servers  at cmu rutgers   server provided planner
initial state planner selected returned action  dialogue iterated
goal reached  time ran out  planner sent done action  value
obtained problem goal reward  goal reached  minus sum
action costs  if any   problem  procedure repeated    times maximum
   minutes results averaged 
two types problems evaluation set  reward problems goal
problems  goal problems  success percentage determined participants score
problem  no action costs   reward problems  every action fixed cost  times
completion recorded  explicitly used ranking  planners completed
less    runs    minutes given score   unfinished runs 
design server  believed time needed computation
planner would far outweigh possible communication delay  however  preliminary
evaluations  participantsespecially halfway across worldexperienced disruptive levels latency evaluating planners connecting remotely server 
formal evaluation  offered participants local accounts cmu nearly
availed option 
    communication client server
communication participants client program server took place
xml  made decision two reasons  first parsing messages
easily managed format trivial parties involvedmany solid xml parsers exist
public domain  second bandwidth great concernas mentioned
previous section  participants ran clients machine hosted
server  true excessively large messages take valuable processing
time  specific case large messages corresponded large state spaces 
took somewhat longer process altogether  xml parsing limiting
factor 
client connected server  would request certain problem run 
server would lead client running problem    times  sending state
problem  receiving clients action  creating new state old
state action  sending back again  figure   gives schematic illustration
conversation client server  specific format xml element
described appendix b 
prior competition  example client written c   distributed
participants minimize difficulties dealing nuts bolts protocol 
allowing instead focus design algorithms 
   

fiyounes  littman  weissman   asmuth

client  hsession requesti
server  hsession initi
loop    rounds
client  hround requesti
server  hround initi
loop termination conditions
server  hstatei
client  hacti   hnoopi   hdonei
server  hend round
server  hend sessioni

figure    interaction client  planners  server  environment  evaluation system 

    generator based domains
several example domains provided participants advance serve testbeds
parser planner development  addition  parameterized problem generators
provided two domain classesblocksworld boxworld  described detail
section    availability domains served allow participants learn  either manually automatically  domains create domain specific solutions 
approaches evaluated independently separate category 

   competition domains
section describes domains used competition  machine readable versions
domains found online competition web site 
http   www cs rutgers edu mlittman topics ipc   pt 
    blocksworld  traditional 
traditional blocksworld domain stray far original blocksworld domain  domain consists two types objects  blocks tables  domain
exactly one table problem instance number blocks  the number
blocks problem specific   actions domain pick up block from putdown block on  problem instance  initial configuration goal configuration
blocks given  goal problem move blocks initial configuration goal configuration  domain comes two flavors  goal version
reward version  within reward version  cost one unit every time action
pick up block from executed  reward     reaching goal configuration 
domains used competition  blocksworld domain
incorporates probabilistic effects adding slip probability  is 
time block picked put down  block slip fall onto table
   

fithe first probabilistic track ipc

probability        of course  intended action put block onto table 
effect always achieved   blocksworld domain extremely simple
domain  yet offers lot insight planning process  two important features
domain are 
   basic policy solve domain is 
 a  initial configuration  place blocks onto table block
top another block 
 b  starting bottom up  place block place final configuration 
note without noise  n blocks  policy takes  n steps    steps
block part  a    steps block part  b  hence costs  n
units  so  basic  inexpensive way solve domain 
   state space domain increases exponentially number blocks 
thus  domain aims testing planners could find easy  maybe slightly
expensive  policy state space large find good policy  far
complexity domain concerned  one easier domains plan
hope many planners would quite well domain 
generation program random traditional blocksworld domains provided
participants competition problems generated program 
availability generator allowed participants test planners many problems
liked advance evaluation 
    blocksworld  color 
colored blocksworld domain variant traditional blocksworld presented above 
traditional blocksworld  colored blocksworld consists two types objects 
tables blocks  again  domain exactly one table problem instance
number blocks  actions domain still pick up block from
put down block on  domain comes two flavors  goal reward 
major difference traditional blocksworld domain block colored
blocksworld domain assigned color  goal configuration specified terms
block colors rather specific blocks  thus  general  many different valid goal
configurations  goal conditions expressed existential quantification  example 
ppddl fragment
  goal  and  exists   b    is green  b   
 exists   b    and  is blue  b    on top of  b   b      
states goal green block top blue block 
noise colored blocksworld domain traditional blocksworld domain  is  colored blocksworld domain incorporates probabilistic effects
adding slip probability  time block picked put down  block
slip fall onto table probability      
   

fiyounes  littman  weissman   asmuth

notice although goal configuration existentially quantified hence precisely specified  basic policy used solve traditional blocksworld
used solve colored blocksworld  solve colored blocksworld problem 
unstack blocks then  bottom fashion  choose block satisfies
color constraint place appropriate position 
colored blocksworld domain aims add complexity traditional blocksworld domain incorporating existential quantification goal configuration 
indeterminacy goal colored blocksworld domain make planning problem
considerably harder traditional counterpart  thus  colored blocksworld problem
may impossible given planner solve reasonable amount time  whereas
planner would problem traditional blocksworld problem
size  
generation program random colored blocksworld domains provided participants competition problems generated program 
    boxworld
boxworld domain modeled traditional logistics domain  domain consists
four types objects  cities  boxes  trucks planes  problem  graph
superimposed cities two different types edges  one denoting ability
drive one city another denoting ability fly one city
other  actions domain load box on truck in city  unload boxfrom truck in city  load box on plane in city  unload box from plane in city  drivetruck fly plane  goal reward versions domain included
evaluation  within reward version  cost   unit every time either
load box on truck in city load box on plane in city executed  cost   units
every time drive truck executed cost    units every time fly plane
executed  problem instance  initial configuration determines graph
superimposed cities  identifies locations boxes  trucks planes
determines final destination box arrive  goal configuration
specifies destination every box  goal problem move initial
configuration state box destined location 
noise enters domain action drive truck  action executed 
desired effect achieved probability      that is  probability     truck
end expected destination   however  probability      truck get lost
end wrong destination  city  three cities truck
may get lost trying execute drive truck action  truck actually gets
lost end cities equal probability  that is  probability
     
blocksworld domains  generation program random boxworld domains
provided participants competition problems generated
program 
   important note existentially quantified goal formula colored blocksworld 
grounded  excessively long  fact serious bottleneck larger instances domain 
planners avoid grounding benefit here  competition
plan validator grounded goal formula 

   

fithe first probabilistic track ipc

    exploding blocksworld
exploding blocksworld domain dead end version traditional blocksworld
domain described earlier  traditional blocksworld domain  two types
objects  tables blocks  two actions  pick up block from put down blockon   initial configuration goal configuration blocks given goal
domain move blocks initial configuration goal configuration 
key difference domain traditional blocksworld domain
every block exploding blocksworld domain initially set detonate  every time
put down block action executed  block put yet
detonated detonate probability      noise domain 
block detonates executing put down block action  object beneath block
 whether table another block  destroyed longer accessible within
domain  block detonates  safe longer detonate 
exploding blocksworld domain aims testing planners ability think ahead 
formally  actions executed possible reach state goal
cannot reached  consider  example  executing standard blocksworld approach
blocks unstacked table goal configuration constructed 
seven blocks unstacked                    probability
table destroyed  rendering problem unsolvable 
one strategy solving exploding blocksworld problem never place unsafe
block top something valuable  the table block needed final stack   instead 
block first disarmed  placing top block needed
final configuration  block exists 
illustrate strategy problem instance used planning competition  shown figure    four blocks needed goal configuration          
    start repeatedly picking block   placing block   block  
detonates  next  detonate block   way using block     block  
block   safe  place block   table block   top block    completes left most tower  stage  safe moves blocks    
clear  pick block   put block    last action leads failure
probability      successful  right most tower completed  block   clear
use detonate block    block   safely placed top block    finally 
center tower completed placing block   top block    result failure
probability      total  success probability given plan                 
which  fact  optimal given problem  there action costs  
along several test domains  exploding blocksworld specifically designed
replanning strategy performs suboptimally  gets stuck high probability  
replanning strategy would ignore     probability detonation try replan
something unexpected happens  however  high probability approach
render goal state unreachable 
    fileworld
fileworld fairly basic domain  consists k files n folders files
filed into  actions domain get type  reports folder given file
   

fiyounes  littman  weissman   asmuth

initial state
 
 
 
 

 
 

 

 
 

 

goal

  

 
 

 
 
 

 
 

figure    exploding blocksworld problem used planning competition  note
goal condition require block   table 

belongs in   get folder fi  one             n     retrieves folder filing
cabinet   file fi  one             n     inserts given file folder i 
return fi  one            n     returns folder filing cabinet  
domain comes reward version  cost     executing action
get folder fi cost   executing action file fi  actions
explicit costs since must used conjunction get folder fi file fi 
initial configuration problem specifies many folders  the competition
problem used    files   folders  goal configuration specifies files
must filed  note initial configuration specify folder file go
into  files cannot filed folder  constraint noise comes
domain 
file filed  destination folder must determined  destination
folder file obtained executing action get type file question
parameter  action executed  file passed parameter assigned folder 
folder files destination equal probability  that is  probability   n  
file destination folder  filed  and this  folder 
fileworld domain tests planners ability consider strategies choose
one minimizes cost  particular  straightforward plan achieve goal
carry following series actions file turn 
   get type get type
   get destination folder executing get folder fi
   place file appropriate folder executing file fi action
   return folder executing return fi action
although plan works  costly  cost would    k k number
files  get folder fi  expensive  file fi  cheap  executed every file 
less costly  in fact  optimal  plan described  first executes get type every
file  then  folder             n    least one file destination 
runs get folder fi  next  files every file belongs folder using file fi 
uses return fi preparation getting next folder 
   

fithe first probabilistic track ipc

expected reward optimal plan         n   k   n number
folders k number files  this analysis gives    optimal expected reward
competition problem   domain designed reward planners able
reason initial destination uncertainty files recognize second
plan much less costly preferred straightforward brute force plan 
    tireworld
tireworld another domain tests planners ability plan ahead uncertainty 
domain consists one type object  namely locations  domain comes two
flavors  goal version reward version  actions common versions
move car  load tire change tire  reward version  additional
action call aaa 
within reward version  cost   every time one actions move car 
load tire change tire executed cost     every time action callaaa executed  initial configuration problem defines set locations 
superimposed graph locations  roads   subset locations representing
locations spare tires  starting location graph  goal configuration
defines destination location graph  goal problem move
starting location goal location 
noise tireworld comes action move car  time action
executed  car drives one city another get flat tire probability
      car flat tire  cannot execute action move car
tire fixed  car ability store one spare tire  pick
executing action load tire location spare tire  car
holding spare tire  change tire action invoked fix flat  however 
car currently spare action disabled  goal version 
flat tire may result dead end car gets flat carries spare tire 
reward version  planner choice executing one actions change tire  if
car spare  call aaa  at high cost  repair flat  thus  reward
version  dead ends goal always reachable  notice since cost
call aaa large compared costs change tire load tire  fixing flat
always less expensive car spare tire 
figure   illustrates tireworld problem used competition  next compare
probability reaching goal state two different plans problem illustrate
ideal plan looks domain 
optimal plan would look ahead attempt keep spare tires accessible
possible avoid dead ends  start state  car must make three steps without
flat tire reach first spare cc  occur probability             now 
car needs go four steps without getting two flats make next spare d  
gets zero flats probability            one flat probability             
      four step segment traversed probability                    one
spare tire  three four step segments must traversed successfully reach
ck  finally  spare  last two steps traveled certainty  thus  total
success probability event sequence                  note estimate
   

fiyounes  littman  weissman   asmuth

spare tire
 all boxed locations 
start

goal
d 

d 

ca
c 

cn

cd

cc

c 

cm

cb
c 

ce

cf

cg

ch

ci
c 

c 

c 

cj

ck

c  c 

c 

cl
c 
d 

d 
d 

d 

d 

figure    tireworld domain used competition 
lower bound success probability optimal strategy  factor
probability getting flat tire upon arrival state spare tire  furthermore 
car location cf ch spare flat  unnecessary traverse
loop pick spare tire location d  cm  accounting factors get
success probability      
contrast  greedy replanning algorithm would gather spares  since utility
comes realization something might go wrong  planner  best
plan go directly c  c  shortest    step  route  success probability
               percent best success probability computed above 
reward version planning problem  optimal success probability one
call aaa action always available  however  cost action equals
reward reaching goal  always better end execution done
action repair flat tire call aaa action  hence  best strategy
goal version optimal reward version well gives reward
    greedy strategy outlined would result expected reward    
call aaa action used fix flat tires  expected reward drops    
    towers hanoise
name suggests  domain noisy version famous towers hanoi
problem  domain two types objects  disks pegs  problem
used competition five disks three pegs  actions domain
single move big not moved  single move big moved  double move big not moved
double move big moved  action names suggest  one move either one two
   

fithe first probabilistic track ipc

disks time  single move double move  outcome move dependent
whether biggest disk moved yet  big not moved big moved   objective domain maximize probability reaching goal configuration  no
rewards  
initial configuration defines starting positions disks  as towers
hanoi  five disks stacked first peg bottom top  largest smallest
order   goal configuration defines destination positions disks  again 
destination positions towers hanoi  namely five disks
stacked order initial configuration last peg   goal
problem move disks starting configuration goal configuration 
actions towers hanoise noisy outcomes  particular  executing action
possible drop disk lost forever  thus bringing execution dead
end  success probabilities are 

action
single move big not moved
single move big moved
double move big not moved
double move big moved

success probability
    
    
    
    

notice probability succeeding move dependent number disks
moved whether big disk moved yet 
every sequence actions success probability less one problem 
possible reach goal certainty  maximize probability reaching
goal  careful comparison must made  move big disk first last
peg  necessary move four smaller disks middle peg  subgoal
achieved executing single move big not moved fifteen times smaller disks 
resulting success probability              accomplished moving
four smaller disks two units two using double move big not moved three times 
resulting low success probability approximately      
next  big disk moved first last peg success probability
      single move big not moved   then  four smaller disks need moved 
time middle peg last peg  big disk moved 
success probabilities change two strategies yield success probabilities     
single move big moved      double move big moved 
planner chooses optimally step would switch single moves double
moves big disk place resulting total success probability       
                one ignores probabilities always uses single moves lower
success probability                          planner ignores probabilities
minimizes number steps always using double moves lower success probability
still                     thus  optimum performance  planner must realize
policy consider success probabilities actions influenced
status big disk 
   

fiyounes  littman  weissman   asmuth

    zeno travel
last domain zeno travel  based domain used ipc    problem instances
domain involve using airplanes move people cities  airplane requires fuel fly  flown two different speedsthe higher speed requiring
fuel  problem instance used one aircraft  two people  three cities seven
fuel levels  actions domain start boarding  complete boarding  startdebarking  complete debarking  start refueling  complete refueling  start flying 
complete flying  start zooming  complete zooming  initial configuration
specifies location plane  initial fuel level plane location
people  as well initializations allow arithmetic type operations
fuel level objects   goal configuration specifies destination plane destinations people  noise domain comes family complete x
actions  time complete x action executed desired effect
probability   k positive integer k  note k function action executed  specifically k      complete boarding k      complete debarking  
desired effect achieved effect  occurs probability
     k   structure meant represent actions random duration  durative action x represented two primitive actions start x complete x  giving
x duration geometrically distributed 
ultimately  problem presented real challenge neglected include
action costs  since actions either standard desired effect none all  planner
simple continue execute action effect achieved  without incurring cost 

   competition results
based initial announcement competition  put together mailing list
   researchers expressing interest  development ppddl  server  evaluation
criteria  practice domains progressed  kept community informed releasing
series faqs  may       faq      september       faq      november      faq       
early       core group participants became evident competition logistics
finalized  leading june       participants ran planners previously
unseen test problems  tabulated scores set evaluation categories
presented icaps   vancouver  canada 
following subsections describe competitions participants  evaluation tracks 
results 
    participants
although twenty teams registered competition initially  seven teams four continents ultimately competed  produced ten different planners  evaluated
various subsets problem domains  groups planners were 
group c  umass
participants  zhengzhu feng  university massachusetts  eric hansen  mississippi state university  
   

fithe first probabilistic track ipc

description  symbolic heuristic search 
group e  dresden  flucap  formerly fcplanner 
participants  eldar karabaev olga skvortsova  both dresden university
technology  
description  first order heuristic search 
group g  anu  nmrdpp 
participants  charles gretton  david price sylvie thiebaux  all australian
national university  
descriptions  g   planner primarily designed domains non markovian rewards  g   nmrdpp augmented control knowledge 
group j  purdue
participants  sungwook yoon  alan fern robert givan  all purdue university  
descriptions  j   human written policy classys policy language  purdue humans   j   offline policy iteration reduction classification  automatically acquiring domain specific policy  classy   j   deterministic replanner using
 ff replan  
group p  simon bolvar  mgpt 
participants  blai bonet  universidad simon bolvar  hector geffner  universitat
pompeu fabra  
description  labeled rtdp lower bounds extracted problem description 
group q  michigan tech  probapop 
participants  nilufer onder  garrett c  whelan li li  all michigan technological university  
description  pop style planner  no sensing  
group r  cert
participants  florent teichteil konigsbuch patrick fabiani  both cert  
description  probabilistic reachability heuristic dbns 
    evaluation tracks
clear discussions leading competition different groups
prioritizing efforts differently  wanted ensure diverse set powerful
approaches recognized decided tabulate results several different ways
acknowledge value different approaches  six tracks were 
   

fiyounes  littman  weissman   asmuth

overall  track used reward based evaluation criterion domains  goal
achievement counted     goal based domains   domains  blocksworld    problems   colored blocksworld      boxworld      exploding blocksworld      fileworld
     tireworld      towers hanoise      zeno travel     
goal based  track  ignored action costs counted goal achievement
unit reward  thus emphasizing approaches maximized probability
reaching goal state   domains problems used
overall track  blocksworld      colored blocksworld      boxworld      exploding
blocksworld      fileworld      tireworld      towers hanoise      zeno travel     
overall  non blocks box  blocksworld boxworld dominated full set
wanted see subtler problems handled  domains  exploding
blocksworld      fileworld      tireworld      towers hanoise      zeno travel     
domain specific  domain specific allowed human tuned rules  domain specific 
tuning  only automatically generated rules specific domain
allowed   evaluated using generated domains  blocksworld      colored
blocksworld      boxworld     
conformant  planners category produce straight line plans  blind
intermediate states encountered  prepared unobservable versions domains
evaluate planners category  domains  blocksworld      colored blocksworld
     boxworld      exploding blocksworld      fileworld      tireworld      towers
hanoise      zeno travel     
    results
display results evaluation track  plotted cumulative reward achieved
participant set evaluation problems  reward accumulated left right  
reward based tracks  goal achievement counted     problems without
explicitly specified goal reward  plots highlight one planner advantage
another  greater slope  well total difference score  height difference
lines  
figure   displays results overall category  two planners  j  p  produced
significantly positive results others  replanning algorithm j  clearly
dominating others  j  crowned overall winner  p runner up  figure
displays results conformant category  consisted solely q 
uncontested winner category 
similar results visible goal based track  displayed figure    j 
comes ahead p achieving runner up status  comparing figures    
reveals margin victory j  p  r g  diminished goalbased category  suggests j  sensitive rewards themselveschoosing
cheaper paths among multiple paths available goal  set problems used
competition  distinction significant graphs look similar 
however  different set test problems might revealed fundamental tradeoff
   

fi   
zeno travel

tower hanoise

tireworld  reward 

tireworld  goal 

fileworld

exploding blocksworld

boxworld          goal 

boxworld         goal 

boxworld         

boxworld         

boxworld        

colored blocksworld     goal 

colored blocksworld    

blocksworld     goal 

blocksworld     

blocksworld     

blocksworld     

    

blocksworld     

blocksworld    

blocksworld    

cumulative reward

first probabilistic track ipc

j 
p
c
g 
r
q

    

    

    

    

 

figure    competition results overall category  result conformant category line marked q  numbers parentheses indicate problem size 
number blocks blocksworld domains  number cities boxes  respectively  boxworld domains 

fiyounes  littman  weissman   asmuth

j 
p
c
g 
r
q

  

cumulative goal probability

  

  

 

 

 

 

zeno travel

tower hanoise

tireworld  reward 

tireworld  goal 

fileworld

exploding blocksworld

boxworld          goal 

boxworld         goal 

boxworld         

boxworld         

boxworld        

colored blocksworld     goal 

colored blocksworld    

blocksworld     goal 

blocksworld     

blocksworld     

blocksworld     

blocksworld     

blocksworld    

blocksworld    

 

figure    competition results goal based category 
seeking maximize reward seeking reach goal high probability 
future competitions could attempt highlight important issue 
interesting note j s outstanding performance stems primarily
early problems  blocksworld boxworld problems amenable
replanning  later problems set handled well j 
planners 
figure   displays results non block box category  indeed  j  performed
much poorly problems category  planner c taking top spot 
runner up spot closely contested planners r g   g  pulled ahead
last problem claim honors  planner p performed nearly well
set 
figure    gives detailed view results non blocks box category 
optimal score problem indicated graphs   note planner cs
performance tireworld domain well optimal  result now fixed bug
competition server allowed disabled actions executed  planner p displayed
outstanding performance fileworld goal based tireworld problems 
attempt solve tower hanoise therefore fell behind g  r overall  planner r
used time per round planner g  zeno travel domain  ultimately
cost r second place could complete       runs domain 
note planners received negative score reward oriented problems 
   optimal scores necessarily apply planner q  conformant planner 

   

fithe first probabilistic track ipc

c
g 
r
p
j 
q

    

cumulative reward

   

   

   

   

zeno travel

tower hanoise

tireworld  reward 

tireworld  goal 

fileworld

exploding blocksworld

 

figure    summary competition results overall  non blocks box category 
counted negative scores individual problems zero overall evaluation
give advantage planners even attempt solve problems  planner q
entrant  except  possibly  c  receive positive score reward based
tireworld problem  planners negative score problem used expensive
call aaa action ensure goal always reached 
results domain specific planners shown figure     highest scoring
planners j  g   difference primarily due two largest
blocksworld problems  j  solved effectively g   performance
five domain specific planners colored blocksworld problems virtually indistinguishable  mentioned earlier  grounding goal condition validator prevented us
using larger problem instances  might otherwise separated planners
domain 
two planners domain specific category ineligible
tuning subcategory hand tuned domains  thus  j  j 
took top spots subcategory  interesting note j  spite
general purpose plannerit not  fact  created domain specific  overtook
j  due two small boxworld problems j  solved j  missed 
figure    summarizes competition results six evaluation categories 

   conclusion
happy outcomes first probabilistic track international planning
competition  addition bringing attention important set planning challenges 
   

fiyounes  littman  weissman   asmuth

exploding blocksworld

tireworld  goal 

 

 

  
max prob 

   

goal probability

   
   
   
 

   
   
   
   

 
c

g 

 
p

j 

 
q

 
r

 
c

 

   
 

 

 

 
    

prob 
max prob 
reward
max reward
g 

j 

q

r

p

q

prob 
max prob 
reward
max reward

   

   

c

p

  

   
goal probability

 
   
   
   
   
 

j 

tireworld  reward 

reward

goal probability

fileworld

g 

   

  
  

   

  

   

  

 

    

reward

goal probability

max prob 

 

    

   

    
r

c

g 

tower hanoise

j 

p

q

r

zeno travel
max prob 

 

 

   

goal probability

goal probability

max prob 

   
   
   
 

   
   
   
   

 
c

g 

j 

 
p

 
q

 
r

c

g 

j 

p

q

r

figure     competition results non blocks box problems    indicates planner
attempt solve problem     indicates anomalous results due bug
server allowed execution disabled actions   note two
graphs center reward scales right 

   

fithe first probabilistic track ipc

j  
g  
j 
j 
e 

    
    

cumulative reward

    
    
    
    
    
    

boxworld          goal 

boxworld         goal 

boxworld         

boxworld         

boxworld        

colored blocksworld      goal 

colored blocksworld     goal 

colored blocksworld     goal 

colored blocksworld     

colored blocksworld    

colored blocksworld    

blocksworld     goal 

blocksworld     

blocksworld     

blocksworld     

blocksworld     

blocksworld    

blocksworld    

 

figure     competition results domain specific categories  tuning
category results  ignore j   g   e lines graph  marked
asterisks  

category
overall
goal based domains
overall  non blocks box
domain specific  tuning
domain specific
conformant

 st
j 
j 
c
j 
j 
q

 nd
p
p
g 
j 
g 

figure     summary competition results category 

   

fiyounes  littman  weissman   asmuth

appears helped spur community use uniform comparison problems
providing domain language set benchmarks  yoon  fern    givan        
spite success  feel changes could made future competitions would increase value community  first  competition logistics
side  server logged outcomes interactions planners domains 
keep exhaustive record actions taken timing information  retrospect 
information would helpful identifying planners addressed
domains whether took suboptimal actions got unlucky  addition 
server provisions security  simple password and or reservation system would
helped evaluations go much smoothly would prevented inadvertent
access server one group another assigned evaluation slot 
domain side  hope future competitions able focus interesting
domains  found simply adding noisy action failures deterministic domain
enough produce interesting probabilistic problemsfor domains  straightforward replanning effective  non blocksworld domains created
mastered planners hope retained form future
evaluations 
progression competitions classical track  hope future competitions
probabilistic track move toward domains grounded real life data real world
problems including handling partially observability time  second competition
slated held conjunction ipc      urge interested members
planning community participate help keep competition moving productive
direction benefit field 

acknowledgments
appreciate support national science foundation royal swedish
academy engineering sciences  well feedback sven koenig  shlomo zilberstein  paul batchis  bob givan  hector geffner participants contributed
design competition  jair editor david smith anonymous reviewers provided invaluable insights document tried reflect final manuscript 
material based upon work supported national science foundation
grant no          royal swedish academy engineering sciences  iva 
grants hans werthen fund  opinions  findings  conclusions recommendations expressed material author s  necessarily reflect
views national science foundation iva 

   

fithe first probabilistic track ipc

appendix a  bnf grammar ppddl   
provide full syntax ppddl    using extended bnf notation following conventions 
rule form hnon terminal     expansion 
alternative expansions separated vertical bar     
syntactic element surrounded square brackets       optional 
expansions optional syntactic elements superscripted requirements flag
available requirements flag specified domain problem currently
defined  example   htypes def i  typing syntax domain definitions
means htypes def may occur domain definitions include  typing
flag requirements declaration 
asterisk     following syntactic element x means zero occurrences
x   plus      following x means least one occurrence x 
parameterized non terminals  example htyped list  x  i  represent separate rules
instantiation parameter 
terminals written using typewriter font 
syntax lisp like  particular  case significant  for example   x  x
equivalent   parenthesis essential part syntax semantic
meaning extended bnf notation  number whitespace characters
 space  newline  tab  etc   may occur tokens 
a   domains
syntax domain definitions pddl     except durative actions
allowed  declarations constants  predicates  functions allowed
order respect one another  must come type declarations
precede action declarations 
hdomaini

hrequire def
hrequire keyi
htypes def
hconstants def
hpredicates def

      define   domain hnamei  
 hrequire def i 
 htypes def i  typing
 hconstants def i 
 hpredicates def i 
 hfunctions def i  fluents
hstructure def i   
       requirements hrequire keyi   
    see section a  
       types htyped list  name i  
       constants htyped list  name i  
       predicates hatomic formula skeletoni   
   

fiyounes  littman  weissman   asmuth

hatomic formula skeletoni
hpredicatei
hfunctions def
hfunction skeletoni
hfunction symbol
hstructure def
haction def
htyped list  x  i
htypei
hprimitive typei
hfunction typed list  x  i
hfunction typei

      hpredicatei htyped list  variable i  
    hnamei
       functions hfunction typed list  function skeleton i  
      hfunction symbol htyped list  variable i  
    hnamei
    haction def
    see section a  
    hx i    typing hx i    htypei htyped list  x  i
      either hprimitive typei      hprimitive typei
    hnamei
    hx i 
  typing hx i    hfunction typei hfunction typed list  x  i
    number

hnamei string characters starting alphabetic character followed
possibly empty sequence alphanumeric characters  hyphens      underscore characters      hvariablei hnamei immediately preceded question mark     
example  in office ball   names   gripper variable 
a   actions
action definitions goal descriptions syntax pddl    
haction def

       action haction symbol
  parameters   htyped list  variable i   
haction def bodyi  
haction symbol
    hnamei
haction def bodyi
      precondition hgdi 
  effect heffecti 
hgdi
    hatomic formula  term i     hgdi   
  equality     htermi htermi  
  equality       htermi htermi    
  negative preconditions   hatomic formula  term i  
  disjunctive preconditions   hgdi  
  disjunctive preconditions   hgdi   
  disjunctive preconditions   imply hgdi hgdi  
  existential preconditions   exists   htyped list  variable i  
hgdi  
  universal preconditions   forall   htyped list  variable i  
hgdi  
  fluents hf compi
hatomic formula  x  i       hpredicatei hx i      hpredicatei
htermi
    hnamei   hvariablei
hf compi
      hbinary compi hf expi hf expi  
hbinary compi
                       
hf expi
    hnumber   hf head  term i
   

fithe first probabilistic track ipc

hf head  x  i
hbinary opi

    hbinary opi hf expi hf expi         hf expi  
      hfunction symbol hx i      hfunction symbol
                 

hnumber sequence numeric characters  possibly single decimal point    
position sequence  negative numbers written    hnumber i  
syntax effects extended allow probabilistic effects 
arbitrarily interleaved conditional effects universal quantification 
heffecti

    hp effecti     heffecti   
  conditional effects   forall   htyped list  variable i   heffecti  
  conditional effects   hgdi heffecti  
  probabilistic effects   probabilistic hprob effecti   
hp effecti
    hatomic formula  term i     hatomic formula  term i  
  fluents   hassign opi hf head  term i hf expi  
  rewards   hadditive opi hreward fluenti hf expi  
hprob effecti
    hprobabilityi heffecti
hassign opi
    assign   scale up   scale down   hadditive opi
hadditive opi     increase   decrease
hreward fluenti       reward     reward

hprobabilityi hnumber value interval        
a   problems
syntax problem definitions extended allow specification
probability distribution initial states  permit association one time
reward entering goal state  otherwise identical syntax pddl   
problem definitions 
hproblemi

hobjects def
hiniti
hinit el
hp init el
hprob init el
ha init el
hgoal
hgoal speci
hmetric speci

      define   problem hnamei  
   domain hnamei  
 hrequire def i 
 hobjects def i 
 hiniti 
hgoal  
       objects htyped list  name i  
       init hinit el i   
    hp init el
  probabilistic effects   probabilistic hprob init el i   
    hatomic formula  name i   fluents     hf head  name i hnumber  
    hprobabilityi ha init el
    hp init el     hp init el i   
    hgoal speci  hmetric speci    hmetric speci
       goal hgdi       goal reward hground f expi    rewards
       metric hoptimizationi hground f expi  
   

fiyounes  littman  weissman   asmuth

hoptimizationi     minimize   maximize
hground f expi     hnumber   hf head  name i
    hbinary opi hground f expi hground f expi  
      hground f expi  
    total time     total time
    goal achieved     goal achieved
  rewards hreward fluenti
a   requirements
table requirements ppddl     requirements imply others 
abbreviations common sets requirements  domain stipulates requirements 
assumed declare requirement  strips 
requirement
 strips
 typing
 equality
 negative preconditions
 disjunctive preconditions
 existential preconditions
 universal preconditions
 quantified preconditions
 conditional effects
 probabilistic effects
 rewards
 fluents
 adl

 mdp

description
basic strips style adds deletes
allow type names declarations variables
support   built in predicate
allow negated atoms goal descriptions
allow disjunctive goal descriptions
allow exists goal descriptions
allow forall goal descriptions
   existential preconditions
   universal preconditions
allow forall action effects
allow probabilistic action effects
allow reward fluent action effects
optimization metric
allow numeric state variables
   strips    typing    equality
   negative preconditions
   disjunctive preconditions
   quantified preconditions
   conditional effects
   probabilistic effects    rewards

   

fithe first probabilistic track ipc

client

server

  session request  
 
 
  session init  
 
 

  round request  
 
 
  round init  
 
 

  state  
 
 
  action
 

spec   

  
 
  state  
 
 
  action
 

spec   

  end round  
 
 










repeat










  end session  
 
 

figure     successful communication session 

appendix b  communication protocol
adopt xml like syntax client server communication protocol  use
extended bnf notation appendix describe syntax protocol messages 
hnamei hnumber terminals defined exactly way ppddl 
hinteger nonempty string numeric characters  hmessagei arbitrary character
string  possibly empty 
figure    shows expected sequence messages  session starts client
sending hsession requesti message server  server replies hsession initi
message  tells client number evaluation rounds run  start
evaluation round  client sends hround requesti message  server replies
hround initi message  point evaluation round starts  server sends
hturn responsei message client  hstatei message hend round
message  every hstatei message client receives  sends haction speci message
return  client receives hend round message  ends current evaluation
round  client starts new evaluation round hround requesti message
server  waits hend sessioni message server case rounds
already run  server sends herror message client error occurs 
example server receives unexpected message client 
   

fiyounes  littman  weissman   asmuth

b   client messages
client messages following form 
hsession requesti      session request 
 name  hnamei   name 
 problem  hnamei   problem 
  session request 
hround requesti

     round request  

haction speci
hactioni
htermi

     act  hactioni   act     done  
     action   name  hnamei   name  htermi    action 
     term  hnamei   term 

b   server messages
server messages following form 
hsession initi

     session init 
 sessionid  hinteger   sessionid 
 setting 
 rounds  hinteger   rounds 
 allowed time  hinteger   allowed time 
 allowed turns  hinteger   allowed turns 
  setting 
  session init 

hround initi

     round init 
 round  hinteger   round 
 sessionid  hinteger   sessionid 
 time left  hinteger   time left 
 rounds left  hinteger   rounds left 
  round init 

hturn responsei     hstatei   hend round
hend round
     end round 
hstatei   goal reached   
 time spent  hinteger   time spent 
 turns used  hinteger   turns used 
  end round 
hstatei
     state    is goal    hatomi  hfluenti    state 
hatomi
     atom  hpredicatei htermi    atom 
hfluenti
     fluent  hfunctioni htermi  hvaluei   fluent 
hpredicatei
     predicate  hnamei   predicate 
hfunctioni
     function  hnamei   function 
htermi
     term  hnamei   term 
   

fithe first probabilistic track ipc

hvaluei

     value  hnumber   value 

hend sessioni

     end session 
 sessionid  hinteger   sessionid 
 problem  hnamei   problem 
 rounds  hinteger   rounds 
 goals 
 failed  hinteger   failed 
 reached 
 successes  hinteger   successes 
  time average  hnumber   time average  
  reached 
  goals 
  metric average  hnumber   metric average  
  end session 

herror

     error  hmessagei   error 

   

fiyounes  littman  weissman   asmuth

references
boutilier  c   dean  t     hanks  s          decision theoretic planning  structural assumptions computational leverage  journal artificial intelligence research 
        
boutilier  c   dearden  r     goldszmidt  m          exploiting structure policy construction  mellish  c  s   ed    proceedings fourteenth international joint
conference artificial intelligence  pp            montreal  canada  morgan kaufmann publishers 
boutilier  c   friedman  n   goldszmidt  m     koller  d          context specific independence bayesian networks  proceedings twelfth annual conference
uncertainty artificial intelligence  uai      pp          portland  or 
dean  t     kanazawa  k          model reasoning persistence causation 
computational intelligence                
dearden  r     boutilier  c          abstraction approximate decision theoretic planning  artificial intelligence                  
fox  m     long  d          pddl     extension pddl expressing temporal
planning domains  journal artificial intelligence research            
guestrin  c   koller  d   parr  r     venkataraman  s          efficient solution algorithms
factored mdps  journal artificial intelligence research             
hoey  j   st aubin  r   hu  a     boutilier  c          spudd  stochastic planning using
decision diagrams  laskey  k  b     prade  h   eds    proceedings fifteenth
conference uncertainty artificial intelligence  pp          stockholm  sweden 
morgan kaufmann publishers 
howard  r  a          dynamic programming markov processes  john wiley   sons 
new york  ny 
howard  r  a          dynamic probabilistic systems  vol  i  markov models  john wiley
  sons  new york  ny 
kushmerick  n   hanks  s     weld  d  s          algorithm probabilistic planning 
artificial intelligence                  
littman  m  l          probabilistic propositional planning  representations complexity  proceedings fourteenth national conference artificial intelligence 
pp          providence  ri  american association artificial intelligence  aaai
press 
littman  m  l   goldsmith  j     mundhenk  m          computational complexity
probabilistic planning  journal artificial intelligence research         
mcdermott  d               ai planning systems competition  ai magazine         
     
puterman  m  l          markov decision processes  discrete stochastic dynamic programming  john wiley   sons  new york  ny 
   

fithe first probabilistic track ipc

rintanen  j          expressive equivalence formalisms planning sensing 
giunchiglia  e   muscettola  n     nau  d  s   eds    proceedings thirteenth international conference automated planning scheduling  pp          trento 
italy  aaai press 
yoon  s   fern  a     givan  r          learning measures progress planning domains 
proceedings twentieth national conference artificial intelligence  pp 
         
younes  h  l  s     littman  m  l          ppddl     extension pddl expressing
planning domains probabilistic effects  tech  rep  cmu cs         carnegie
mellon university  pittsburgh  pa 

   


