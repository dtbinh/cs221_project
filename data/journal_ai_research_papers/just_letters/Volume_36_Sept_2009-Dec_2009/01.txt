journal of artificial intelligence research             

submitted        published      

prime implicates and prime implicants 
from propositional to modal logic
meghyn bienvenu

meghyn informatik uni bremen de

department of mathematics and computer science
university of bremen  germany

abstract
prime implicates and prime implicants have proven relevant to a number of areas of
artificial intelligence  most notably abductive reasoning and knowledge compilation  the
purpose of this paper is to examine how these notions might be appropriately extended from
propositional logic to the modal logic k  we begin the paper by considering a number of
potential definitions of clauses and terms for k  the different definitions are evaluated with
respect to a set of syntactic  semantic  and complexity theoretic properties characteristic of
the propositional definition  we then compare the definitions with respect to the properties
of the notions of prime implicates and prime implicants that they induce  while there is
no definition that perfectly generalizes the propositional notions  we show that there does
exist one definition which satisfies many of the desirable properties of the propositional
case  in the second half of the paper  we consider the computational properties of the
selected definition  to this end  we provide sound and complete algorithms for generating
and recognizing prime implicates  and we show the prime implicate recognition task to be
pspace complete  we also prove upper and lower bounds on the size and number of prime
implicates  while the paper focuses on the logic k  all of our results hold equally well for
multi modal k and for concept expressions in the description logic alc 

   introduction
prime implicates and prime implicants are important notions in artificial intelligence  they
have given rise to a significant body of work in automated reasoning and have been applied
to a number of different sub areas in ai  traditionally  these concepts have been studied
in the context of propositional logic  but they have also been considered for many valued
 ramesh   murray        and first order logic  marquis      a      b   not much is
known  however  about prime implicates and prime implicants in other logics  in particular 
no definition of prime implicate or prime implicant has ever been proposed for a modal or
description logic  nor has it been shown that no reasonable definition can be provided 
given the increasing interest in modal and description logics as knowledge representation
languages  one naturally wonders whether these notions can be suitably generalized to these
more expressive logics 
we recall that in propositional logic the prime implicates of a formula are defined to be
its logically strongest clausal consequences  the restriction to clauses is made in order to
reduce redundant elements from a formulas set of consequences  there is no use in keeping
around the consequence a  b when one already has the consequences a and b  the decision
to consider only the logically strongest clausal consequences is motivated by a desire to
eliminate irrelevant weaker consequences  if we already have the consequence a  there is
c
    
ai access foundation  all rights reserved 

fibienvenu

no point in retaining the consequences a  b or a  b  prime implicates thus provide a
complete yet compact representation of the set of logical consequences of a formula  what
is particularly nice about this representation is that it makes many computational tasks
simpler  satisfiability  tautology  entailment  and equivalence queries and the conditioning
and forgetting transformations are all tractable for formulae represented by their prime
implicates  darwiche   marquis         this is why prime implicates are considered an
interesting target language for knowledge compilation  cadoli   donini        darwiche
  marquis         prime implicates have also proved relevant to other sub areas of ai 
like distributed reasoning  adjiman  chatalic  goasdoue  rousset    simon         belief
revision  bittencourt        pagnucco         non monotonic reasoning  cf  przymusinski 
       and characterizations of relevance  lakemeyer        lang  liberatore    marquis 
      
the dual notion to prime implicates is prime implicants  which are defined to be the
logically weakest terms    conjunctions of literals  which imply a given formula  the main
application domain for prime implicants is in abduction and diagnosis  we recall that in
abduction  one is given a background theory and an observation  and the objective is to
find an explanation for the observation  in logical terms  an explanation is a formula which
logically entails the observation when taken together with the background theory  as the
set of explanations for an abduction problem can be very large  an important question
is how to select a representative subset of explanations  one very common approach is
to use prime implicants  the relevant explanations for an observation o with respect to a
background theory t are taken to be the prime implicants of t  o  de kleer  mackworth 
  reiter        eiter   makino        
for many applications in ai  the expressive power of propositional logic proves insufficient  first order logic provides a much greater level of expressivity  but at the price of
undecidability  modal and description logics offer an interesting trade off between expressivity and complexity  as they are generally more expressive than propositional logic yet
are better behaved computationally than first order logic  this explains the growing trend
towards using such languages for knowledge representation 
a prototypical description logic is alc  which extends propositional logic with restricted
forms of universal and existential quantification  an example expression in alc is
f emale  haschild f emale  haschild  doctor  p rof essor   hasp et dog
which describes the set of individuals who are female  have at least one daughter and one
pet dog  and are such that all of their children are either doctors or professors  the above
concept expression can be represented equally well in the modal logic k  by the formula 
f emale     f emale      doctor  p rof essor      dog
schild        proved a general result which showed that the description logic alc with n
binary relations is in fact a notational variant of the multi modal logic kn   this means that
results concerning kn can be transferred to alc  and vice versa 
in this paper  we investigate the notions of prime implicates and prime implicants for
the modal logic k   k    but actually all of our results hold for formulae in kn   and hence
also for concept expressions in alc  the decision to present our results in terms of k
  

fiprime implicates and prime implicants in modal logic

rather than in terms of kn or alc was motivated solely by a desire to simplify notation
and increase the readability of the proofs 
the question of how the notions of prime implicates and prime implicants can be suitably
defined for the logic k is clearly of interest from a theoretical point of view  we argue 
however  that this question is also practically relevant  to support this claim  we briefly
discuss two application areas in which the study of prime implicates and prime implicants
in k might prove useful 
the first domain of application we will consider is abductive reasoning in k  as noted
above  one of the key foundational issues in abductive reasoning is the selection of an
interesting subset of explanations  this issue is especially crucial for logics like k which
allow for an infinite number of non equivalent formulae  since this means that the number of
non equivalent explanations for an abduction problem is not just large but in fact infinite 
making it simply impossible to enumerate the entire set of explanations  as prime implicants
are a widely accepted means of characterizing relevant explanations in propositional logic 
a reasonable starting point for research into abductive reasoning in the logic k is the study
of different possible definitions of prime implicant in k and their properties 
the investigation of prime implicates in k is also relevant to the development of knowledge compilation procedures for k  we recall that knowledge compilation  cf  darwiche
  marquis        is a general technique for coping with the intractability of reasoning
which consists in an off line phase in which a knowledge base is rewritten as an equivalent
knowledge base which allows for tractable reasoning  followed by an online phase in which
reasoning is performed on the compiled knowledge base  the idea is that the initial cost
of compiling the knowledge base will be offset by computational savings on later queries 
currently  most work on knowledge compilation is restricted to propositional logic  even
though this technique could prove highly relevant for modal and description logics  which
generally suffer from an even higher computational complexity than propositional logic  as
prime implicates are one of the better known mechanisms for compiling formulae in propositional logic  it certainly makes sense to investigate whether this approach to knowledge
compilation can be fruitfully extended to logics like k 
our paper is organized as follows  after some preliminaries  we consider how to appropriately generalize the notions of clauses and terms to k  as there is no obvious definition 
we enumerate a list of syntactic  semantic  and complexity theoretic properties of the propositional definitions  which we then use to compare the different candidate definitions  we
next consider the different definitions in light of the notions of prime implicate and prime
implicant they induce  once again  we list some basic properties from the propositional
case that we would like to satisfy  and we see how the different definitions measure up 
in the second half of the paper  we investigate the computational properties of the most
satisfactory definition of prime implicates  we consider the problems of prime implicate
generation and recognition  and we provide sound and complete algorithms for both tasks 
we also study the complexity of the prime implicate recognition problem  showing it to be
pspace complete and thus of the same complexity as satisfiability and deduction in k  we
conclude the paper with a discussion of the relevance of our results to the two application
areas cited above and some directions for future research  in order to enhance the readability of the paper  proofs have been omitted from the body of the text  full proofs can be
found in the appendix 
  

fibienvenu

   preliminary definitions and notation
we briefly recall the basics of the modal logic k  refer to blackburn  de rijke    venema 
      blackburn  van benthem    wolter        for good introductions to modal logic  
formulae in k are built up from a set of propositional variables v  the standard logical
connectives      and    and the modal operators   and    we will call a formula of
the form    resp     a   formula  resp    formula   where convenient we will use
   as an abbreviation for     we adopt the shorthand  k   resp   k   to refer to
the formula consisting of  preceded by k copies of    resp      with the convention that
              we will use var   to refer to the set of propositional variables appearing
in a formula   the modal depth of a formula   written     is defined as the maximal
number of nested modal operators appearing in   e g     a   a   a       we define the
length of a formula   written     to be the number of occurrences of propositional variables 
logical connectives  and modal operators in   for example  we would have   a  b      
and    a  b    a      
negation normal form  nnf  is defined just as in propositional logic  a formula is said
to be in nnf if negation only appears directly before propositional variables  every formula
 in k can be transformed into an equivalent formula in nnf using the recursive procedure
nnf defined as follows 
nnf  l  l  for propositional literals l 
nnf         nnf     nnf     
nnf           nnf     nnf     
nnf         nnf     nnf     
nnf           nnf     nnf     

nnf      nnf   
nnf      nnf   
nnf      nnf   
nnf      nnf   
nnf    nnf   

for example  applying nnf to the formula   a    b  c   results in the formula   a 
  b c   which is in nnf  the transformation nnf takes linear time  and yields a formula
which is no more than double the size of the original formula and has the same modal depth
and propositional variables as the original 
a model for k is a tuple m   hw  r  vi  where w is a non empty set of possible worlds 
r  w  w is a binary relation over worlds  and v   w  v   true  f alse  is a valuation
of the propositional variables at each world  models can be understood as labelled directed
graphs  in which the vertices correspond to the elements of w  the directed edges represent
the binary relation r  and the vertices are labeled by propositional valuations which specify
the propositional variables which are true in the corresponding possible world 
satisfaction of a formula  in a model m at the world w  written m  w      is defined
inductively as follows 
 m  w    a if and only if v w  a    true
 m  w     if and only if m  w     
 m  w       if and only if m  w     and m  w    
 m  w       if and only if m  w     or m  w    
 m  w      if and only if m  w     for all w such that wrw
  

fiprime implicates and prime implicants in modal logic

 m  w      if and only if m  w     for some w such that wrw
if we think of models as labeled directed graphs  then determining the satisfaction of a
formula   at vertex w consists in evaluating  at all of the vertices which can be reached
from w via an edge    is satisfied at w just in the case that  holds in each of these
successor vertices  similarly  in order to decide whether a formula   holds at a vertex w 
we consider each of the successors of w in the graph and check whether at least one of these
vertices satisfies  
a formula  is said to be a tautology  written      if m  w     for every model m and
world w  a formula  is satisfiable if there is some model m and some world w such that
m  w      if there is no m and w for which m  w      then  is called unsatisfiable  and
we write      
ladner        showed that satisfiability and unsatisfiability in k are pspace complete 
for pspace membership  ladner exhibited a polynomial space tableaux style algorithm for
deciding satisfiability of k formulae  pspace hardness was proven by means of a reduction
from qbf validity  the canonical pspace complete problem  
in modal logic  the notion of logical consequence  or entailment  can be defined in one
of two ways 
 a formula  is a global consequence of  if whenever m  w     for every world w of
a model m  then m  w     for every world w of m
 a formula  is a local consequence of  if m  w     implies m  w     for every model
m and world w
in this paper  we will only consider the notion of local consequence  and we will take     
to mean that  is a local consequence of   when       we will say that  entails  
two formulae  and  will be called equivalent  written     if both      and      
a formula  is said to be logically stronger than  if      and       
we now highlight some basic properties of logical consequence and equivalence in k
which will play an important role in the proofs of our results 
theorem    let            m              n be formulae in k  and let  be a propositional
formula  then
                      
                       
           m        n            or i      n     for some i 
                  m            n       or            m  i for some i 
                  n      i for some i
             m            n
           m               m           n          m  
  

fibienvenu

statement   of theorem   shows how the three reasoning tasks of entailment  unsatisfiability  and tautology testing can be rephrased in terms of one another  statement   tells us
how entailment between two    or   formulae can be reduced to entailment between those
formulae with the first modality removed  statements   and   define the conditions under
which a conjunction  resp  disjunction  of propositional literals and    and   formulae
is unsatisfiable  resp  a tautology   statement   gives us the conditions under which a
  formula implies a disjunction of   formulae  statement   demonstrates the interaction
between    and   formulae in a disjunction 
theorem    let  be a disjunction of propositional literals and    and   formulae  then
each of the following statements holds 
   if      for some non tautological propositional clause   then every disjunct of  is
either a propositional literal or an unsatisfiable   formula
   if               n   then every disjunct of  is a   formula
   if               n and               n   then every disjunct of  is either a
  formula or an unsatisfiable   formula
theorem    let                m            n and                 p 
          q be formulae in k  if  and   are both propositional and        then

       and
        m            p and
     

for every i there is some j such that i            p  j
theorems   and   concern entailment relations between formulae which are disjunctions
of propositional literals and    and   formulae  theorem   tells us what kinds of formulae
of this type can entail a propositional clause  a disjunction of   formulae  or a disjunction
of   formulae  while theorem   outlines the conditions under which two formulae of this
type can be related to each other by the entailment relation  we illustrate theorem   on a
small example 
example    consider the formula    b    a   c     d   a     c  d   then
according to theorem    we have 
     b  d    a  d    c  since b    b  d and  a   c    d   a     a  d and
c  d    c   a  d 
      a   c  since b     a
      a  b    a  c   since  a   c    d   a      a  c
      b    a   a    c  since c  d     c   a   a 
  

fiprime implicates and prime implicants in modal logic

   literals  clauses  and terms in k
as we have seen in the introduction  the notions of prime implicates and implicants are
straightforwardly defined using the notions of clauses and terms  thus  if we aim to provide
suitable definitions of prime implicates and implicants for the logic k  we first need to decide
upon a suitable definition of clauses and terms in k  unfortunately  whereas clauses and
terms are standard notions in both propositional and first order logic    there is no generally
accepted definition of clauses and terms in k  indeed  several quite different notions of
clauses and terms have been proposed in the literature for different purposes 
instead of blindly picking a definition and hoping that it is appropriate  we prefer to
list a number of characteristics of literals  clauses  and terms in propositional logic  giving
us a principled means of comparing different candidate definitions  each of the properties
below describes something of what it is to be a literal  clause  or term in propositional logic 
although our list cannot be considered exhaustive  we do believe that it covers the principal
syntactic  semantic  and complexity theoretic properties of the propositional definition 
p  literals  clauses  and terms are in negation normal form 
p  clauses do not contain   terms do not contain   and literals contain neither  nor  
p  clauses  resp  terms  are disjunctions  resp  conjunctions  of literals 
p  the negation of a literal is equivalent to another literal  negations of clauses  resp 
terms  are equivalent to terms  resp  clauses  
p  every formula is equivalent to a finite conjunction of clauses  likewise  every formula
is equivalent to a finite disjunction of terms 
p  the task of deciding whether a given formula is a literal  term  or clause can be accomplished in polynomial time 
p  the task of deciding whether a clause  resp  term  entails another clause  resp  term 
can be accomplished in polynomial time 
one may wonder whether there exist definitions of literals  clauses  and terms for k
satisfying all of these properties  unfortunately  we can show this to be impossible 
theorem    any definition of literals  clause  and terms for k that satisfies properties p 
and p  cannot satisfy p  
the proof of theorem   only makes use of the fact that  does not distribute over  
and  does not distribute over    which means that our impossibility result holds equally
well for most standard modal and description logics 
we will now consider a variety of possible definitions and evaluate them with respect
to the above criteria  the first definition that we will consider is that proposed by cialdea
   one might wonder why we do not simply translate our formulae in k into first order formulae and then
put them into clausal form  the reason is simple  we are looking to define clauses and terms within the
language of k  and the clauses we obtain on passing by first order logic are generally not expressible in k 
moreover  if we were to define clauses in k as those first order clauses which are representable in k  we
would obtain a set of clauses containing no   modalities  thereby losing much of the expressivity of k 

  

fibienvenu

mayer and pirri        in a paper on abductive reasoning in modal logic  they define terms
to be the formulae which can be constructed from the propositional literals using only     
and    modal clauses and literals are not used in the paper but can be defined analogously 
yielding the following definition   
d 

l     a   a    l    l
c     a   a    c    c   c  c
t     a   a    t    t   t  t

it is easy to see by inspection that this definition satisfies properties p  p   p   and p  
property p  is not satisfied  however  since there are clauses that are not disjunctions of
literals  take for instance   a  b   from theorem   and the fact that both p  and p  are
satisfied  we can conclude that property p  cannot hold  at first glance  it may seem that
entailment between clauses or terms could be accomplished in polynomial time  but this is
not the case  in fact  we can show this problem to be np complete  the proof relies on the
very strong resemblance between terms of d  and concept expressions in the description
logic ale  for which both unsatisfiability and deduction are known to be np complete  
by using a slightly different definition  we can gain p  
d 

l     a   a    l    l
c     l   c  c
t     l   t  t

it can be easily verified that definition d  satisfies properties p  p  and p   as definition
d  does not satisfy p   and definition d  is even less expressive  it follows that d  does not
satisfy p  either  this reduced expressiveness does not however improve its computational
complexity  property p  is still not satisfied as we can show that entailment between
clauses or terms is np complete using the same reduction as was used for definition d  
the fact that even an extremely inexpressive definition like d  does not allow for polynomial
entailment between clauses and terms suggests that property p  cannot be satisfied by any
reasonable definition of clauses and terms for k 
let us now consider some more expressive options  we begin with the following definition
of clauses that was proposed by enjalbert and farinas del cerro        for the purpose of
modal resolution 
d 
c     a   a    c    conjc   c  c
conjc     c   conjc  conjc
this definition of clauses can be extended to a definition of terms and literals which satisfies
p  or p   but there is no extension which satisfies both properties  let us first consider
one of the possible extensions which satisfies p  and a maximal subset of p  p  
d a

l     a   a    l    l
c     a   a    c    conjc   c  c
conjc     c   conjc  conjc
t     a   a    disjt    t   t  t
disjt     t   disjt  disjt

   note that here and in what follows  we let a range over propositional variables and l  c  and t range
over the sets of literals  clauses  and terms  respectively 

  

fiprime implicates and prime implicants in modal logic

this definition satisfies p  and p  p   satisfaction of p  was shown in enjalbert   farinas
del cerro         it does not satisfy p  as there are clauses that are not disjunctions of
literals  take for example   a  b   given that definition d a is strictly more expressive
than definitions d  and d   it follows that entailment between clauses or terms must be
np hard  which means that d a does not satisfy p   in fact  we can show that entailment
between clauses or terms of definition d a is pspace complete  to do so  we modify the
polynomial translation of qbf into k used to prove pspace hardness of k so that the
translated formula is a conjunction of clauses with respect to d a  we then notice that
a formula  is unsatisfiable if and only if   entails   a  a   we thus reduce qbf
validity to entailment between clauses  making this task pspace hard  and hence  being a
subproblem of entailment in k  pspace complete  this same idea is used to show pspacecompleteness for definitions d b and d  below 
if instead we extend d  so as to enforce property p   we obtain the following definition 
l     a   a    c    conjc
c     a   a    c    conjc   c  c
conjc     c   conjc  conjc
t     l   t  t
this definition satisfies all of the properties except p   p   and p   property p  fails to
hold because the negation of the literal   a  b  is not equivalent to any literal  the proof
that p  holds is constructive  we use standard logical equivalences to rewrite formulae as
equivalent conjunctions of clauses and disjunctions of terms  this is also what we do for
definitions d  and d  below  
we now consider two rather simple definitions that satisfy properties p   p   and p  
the first definition  which is inspired by the notion of modal atom proposed by giunchiglia
and sebastiani         defines literals as the set of formulae in nnf that cannot be decomposed propositionally 
d b

l     a   a    f    f
c     l   c  c
t     l   t  t
f     a   a   f  f   f  f    f    f
d  satisfies all of the properties except p  and p   for p   we note that an arbitrary formula  in nnf is unsatisfiable  a pspace complete problem  if and only if        a  a  
definition d  is very liberal  imposing no structure on the formulae behind modal operators  if we define literals to be the formulae in nnf that cannot be decomposed modally
 instead of propositionally   we obtain a much stricter definition which satisfies exactly the
same properties as d  
d 

d 

l     a   a    c    t
c     l   c  c
t     l   t  t

a summary of our analysis of the different definitions with respect to properties p  p 
is provided in the following table 
theorem    the results in figure   hold 
  

fibienvenu

p 
p 
p 
p 
p 
p 
p 

d 
d 
yes
yes
yes
yes
no
yes
yes
yes
no
no
yes
yes
no  unless p np 

d a d b d  d 
yes
yes
yes yes
no
no
no
no
no
yes
yes yes
yes
no
yes yes
yes
yes
yes yes
yes
yes
yes yes
no  unless p pspace 

figure    properties of the different definitions of literals  clauses  and terms 

clearly deciding between different candidate definitions is more complicated than counting up the number of properties that the definitions satisfy  the simple reason being that
some properties are more important than others  take for instance property p  which
requires clauses and terms to be expressive enough to represent all of the formulae in k  if
we just use the standard propositional definition of clauses and terms  thereby disregarding
the modal operators   then we find that it satisfies every property except p   and hence
more properties than any of the definitions considered in this section  and yet we would be
hard pressed to find someone who considers the propositional definition an appropriate definition for k  this demonstrates that expressiveness is a particularly important property 
so important in fact that we should be willing to sacrifice properties p  and p  to keep it 
among the definitions that satisfy p   we prefer definitions d  and d  to definitions d a
and d b  as the latter definitions have less in common with the propositional definition
and present no advantages over d  and d  
of course  when it comes down to it  the choice of a definition must depend on the
particular application in mind  there may very well be circumstances in which a less
expressive or less elegant definition may prove to be the most suitable  in this paper we
are using clauses and terms to define prime implicates and prime implicants  so for us the
most important criteria for choosing a definition will be the quality of the notions of prime
implicates and prime implicants that the definition induces 

   prime implicates implicants in k
once a definition of clauses and terms has been fixed  we can define prime implicates and
prime implicants in exactly the same manner as in propositional logic 
definition    a clause  is an implicate of a formula  if and only if        is a prime
implicate of  if and only if 
    is an implicate of 
   if  is an implicate of  such that       then     
definition    a term  is an implicant of the formula  if and only if        is a prime
implicant of  if and only if 
    is an implicant of 
  

fiprime implicates and prime implicants in modal logic

   if  is an implicant of  such that        then     
of course  the notion of prime implicate  resp  implicant  that we get will be determined by the definition of clause  resp  term  that we have chosen  we will compare different definitions using the following well known properties of prime implicates implicants
in propositional logic 
finiteness the number of prime implicates  resp  prime implicants  of a formula is finite
modulo logical equivalence 
covering every implicate of a formula is entailed by some prime implicate of the formula 
conversely  every implicant of a formula entails some prime implicant of the formula 
equivalence a model m is a model of  if and only if m is a model of all the prime
implicates of  if and only if m is a model of some prime implicant of    
implicant implicate duality every prime implicant of a formula is equivalent to the
negation of some prime implicate of the negated formula  conversely  every prime
implicate of a formula is equivalent to the negation of a prime implicant of the negated
formula 
distribution if  is a prime implicate of         n   then there exist prime implicates
         n of          n such that           n   likewise  if  is a prime implicant
of         n   then there exist prime implicants          n of          n such that
          n
finiteness ensures that the prime implicates implicants of a formula can be finitely
represented  while covering means the prime implicates provide a complete representation
of the formulas implicates  equivalence guarantees that no information is lost in replacing a formula by its prime implicates implicants  whereas implicant implicate duality
allows us to transfer results and algorithms for prime implicates to prime implicants  and
vice versa  finally  distribution relates the prime implicates implicants of a formula to
the prime implicates implicants of its sub formulae  this property will play a key role in
the prime implicate generation algorithm presented in the next section 
we can show that definition d  satisfies all five properties  for finiteness and covering  we first demonstrate that every implicate  of a formula  is entailed by some implicate
 of  with var     var   and having depth at most         and similarly for implicants   as there are only finitely many non equivalent formulae on a finite language and
with bounded depth  it follows that there are only finitely many prime implicates implicants
of a given formula  and that there can be no infinite chains of increasingly stronger implicates  or increasingly weaker implicants   equivalence follows directly from covering
and the property p  of the previous section  we use p  to rewrite  as a conjunction
of clauses  each of which is implied by some prime implicate of  because of covering 
the property implicant implicate duality is an immediate consequence of the duality
   the property equivalence is more commonly taken to mean that a formula is equivalent to the conjunction of its prime implicates and the disjunction of its prime implicants  we have chosen a model theoretic
formulation in order to allow for the possibility that the set of prime implicates implicants is infinite 

  

fibienvenu

between clauses and terms  p    distribution can be shown using covering plus the
fact that a disjunction of clauses is a clause and a conjunction of terms is a term  p   
theorem    the notions of prime implicates and prime implicants induced by definition
d  satisfy finiteness  covering  equivalence  implicant implicate duality  and
distribution 
we remark by way of contrast that in first order logic the notion of prime implicate induced by the standard definition of clauses has been shown to falsify finiteness  covering 
and equivalence  marquis      a      b  
we now show that definition d  is the only one of our definitions to satisfy all five
properties  for definitions d  and d   we show that equivalence does not hold  this
is a fairly straightforward consequence of the fact that these definitions do not satisfy
property p  
theorem     the notions of prime implicates and prime implicants induced by definitions
d  and d  do not satisfy equivalence 
for the notions of prime implicates induced by definitions d a  d b  and d   we show
in the appendix that the clause    k a    a  b   k a  is a prime implicate of   a  b 
for every k       we thereby demonstrate not only that these definitions admit formulae
with infinitely many distinct prime implicates but also that they allow seemingly irrelevant
clauses to be counted as prime implicates  this gives us strong grounds for dismissing these
definitions as much of the utility of prime implicates in applications comes from their ability
to eliminate such irrelevant consequences 
theorem     the notions of prime implicates and prime implicants induced by d a  d b 
and d  falsify finiteness 
while the comparison in the last section suggested that d  was at least as suitable as
d  as a definition of clauses and terms  the results of this section rule out d  as a suitable
definition for prime implicates and prime implicants  in the remainder of the paper  we will
concentrate our attention on the notions of prime implicates and prime implicants induced
by definition d   as these have been shown to be the most satisfactory generalizations of
the propositional case 

   prime implicate generation and recognition
in this section  we investigate the computational aspects of modal prime implicates  as we
will be primarily focusing on the notion of prime implicate induced by definition d   for
the remainder of the paper we will use the words clause  term  and prime implicate
to mean clause  term  and prime implicate with respect to definition d   except where
explicitly stated otherwise 
we remark that  without loss of generality  we can restrict our attention to prime implicates since by implicant implicate duality  theorem    any algorithm for generating
or recognizing prime implicates can be easily adapted into an algorithm for generating or
recognizing prime implicants 
   for d   the only prime implicate of   a  b  is itself 

  

fiprime implicates and prime implicants in modal logic

function dnf     
input  a formula 
output  a set of d  terms
return the set of terms output by iter dnf    nnf      
function iter dnf    s 
input  a set s of formulae in nnf
output  a set of d  terms  which are output one by one
if s         s    then do iter dnf    s          
else if s         s    then do iter dnf    s        then do iter dnf    s      
v
else output s  if it is consistent  and nothing otherwise 
figure    helper functions dnf    and iter dnf    

    generating prime implicates
we start by considering the problem of generating the set of prime implicates of a given
formula  this task is important if we want to produce abductive explanations  or if we want
to compile a formula into its set of prime implicates 
for our generation algorithm  we will require a means of transforming the input formula
into an equivalent disjunction of simpler formulae  to this end  we introduce in figure  
the helper function dnf      which returns a set of satisfiable terms with respect to d 
whose disjunction is equivalent to   the function dnf    is defined in terms of another
function iter dnf    which takes an input a set s of formulae in nnf and returns in an
iterative fashion a set of satisfiable terms whose disjunction is equivalent to s  the following
lemmas highlight some important properties of these functions 
lemma     iter dnf   terminates and requires only polynomial space in the size of its
input 
lemma     the output of dnf   on input  is a set of satisfiable terms with respect to
d  whose disjunction is equivalent to  
lemma     there are at most     terms in dnf      each of the terms has length at
most      depth at most     and contains only those propositional variables appearing in
var   
we present in figure   the algorithm genpi which computes the set of prime implicates
of a given formula  our algorithm works as follows  in step    we check whether  is
unsatisfiable  outputting a contradictory clause if this is the case  for satisfiable   we
set t equal to a set of satisfiable terms whose disjunction is equivalent to   because of
distribution  we know that every prime implicate of  is equivalent to some disjunction
of prime implicates of the terms in t   in step    we set  t   equal to the propositional
  

fibienvenu

function genpi  
input  a formula 
output  a set of clauses
    if  is unsatisfiable  return    a  a    otherwise  set t   dnf      
    for each t  t   let lt be the set of propositional literals in t and let dt
be the set of formulae  such that   is in t   if there are no literals of the
form   in t   then set  t     lt         dt    otherwise  set  t    
lt    t         t       dt  
where t is the conjunction
of formulae  such that   is in t  
w
    set candidates     t t t   t   t    
    for each j  candidates  remove j from candidates if k    j for some
k  candidates with k   j  or if both j    k and j     k for k   j 
    return candidates 
figure    algorithm for prime implicate generation 

literals in t  lt   plus the strongest   literal implied by t   t   plus the strongest  literals implied by t       t       dt     it is not too hard to see that every prime
implicate of t must be equivalent to one of the elements in  t    this means that in
step   we are guaranteed that every prime implicate of the input formula is equivalent to
some candidate prime implicate in candidates  during the comparison phase in step   
non prime candidates are eliminated  and exactly one prime implicate of each equivalence
class will be retained 
we illustrate the behavior of genpi on an example 
example     we run genpi on input    a      b  c    b     b    c  d    e   f    
step    as  is satisfiable  we call the function dnf    on   and it returns the two terms
t    a    b  c    b and t    a   b    c  d    e   f  
step    we have lt     a   dt     b  c  b   and there are no   literals in t    so we
get  t       a    b  c    b   for t    we have lt     a   dt     b  c  d   and
t    e  f   giving us  t       a    e  f      b  e  f       c  d   e  f    
step    the set candidates will contain all the different possible disjunctions of elements
in  t    with elements in  t     of which there are     aa  a  ef    a  bef   
a     c  d   e  f      b  c   a    b  c     e  f      b  c     b  e  f   
  bc    cd ef     ba   b  ef     b  bef    and  b   cd ef   
step    we will remove from candidates the clauses a    e  f    a    b  e  f   
a     c  d   e  f      b  c   a  and  b  a since they are strictly weaker than
a  a  we will also eliminate the clauses  b    e  f     b    b  e  f    and
  

fiprime implicates and prime implicants in modal logic

 b     c  d   e  f   since they are weaker than the clauses   b  c     e  f   
  b  c     b  e  f      b  c      c  d   e  f   
step    genpi will return the four remaining clauses in candidates  which are a  a 
  b  c     e  f      b  c     b  e  f    and   b  c      c  d   e  f   
our algorithm can be shown to be a sound and complete procedure for generating prime
implicates 
theorem     the algorithm genpi always terminates and outputs exactly the set of
prime implicates of the input formula 
by examining the prime implicates produced by the algorithm  we can place an upper
bound on the length of a formulas prime implicates 
theorem     the length of the smallest clausal representation of a prime implicate of a
formula is at most single exponential in the length of the formula 
this upper bound is optimal as we can find formulae with exponentially large prime
implicates  this situation contrasts with propositional logic  where the length of prime
implicates is linearly bounded by the number of propositional variables in the formula 
theorem     the length of the smallest clausal representation of a prime implicate of a
formula can be exponential in the length of the formula 
it is interesting to note that the formula used in the proof of theorem    has a depth
of    which means that we cannot avoid this worst case spatial complexity by restricting
our attention to formulae of shallow depth  nor can we escape this exponential worst case
spatial complexity by dropping down to one of the less expressive notions of prime implicates
examined in the previous section  as the following theorem attests 
theorem     if prime implicates are defined using either d  or d   then the length of
the smallest clausal representation of a prime implicate of a formula can be exponential in
the length of the formula 
an examination of the set of candidate prime implicates constructed by our algorithm
allows us to place a bound on the maximal number of non equivalent prime implicates a
formula can possess 
theorem     the number of non equivalent prime implicates of a formula is at most
double exponential in the length of the formula 
this bound can also be shown to be optimal  this situation contrasts with propositional
logic  where there can be at most single exponentially many non equivalent prime implicates
of a given formula 
theorem     the number of non equivalent prime implicates of a formula may be double
exponential in the length of the formula 
again  this worst case result is robust in that it can be improved neither by restricting the depth of formulae  nor by using less expressive notions of prime implicate  as the
following theorem demonstrates 
  

fibienvenu

theorem     if prime implicates are defined using either d  or d   then the number of
non equivalent prime implicates of a formula may be double exponential in the length of the
formula 
theorems    and    together suggest that definitions d  or d  do not yield especially interesting approximate notions of prime implicate  as they induce a significant loss
of expressivity without any improvement in the size or number of prime implicates in the
worst case 
our generation algorithm genpi corresponds to the simplest possible implementation
of the distribution property  and it is quite clear that it does not represent a practicable
way for producing prime implicates  one major source of inefficiency is the large number
of clauses that are generated  so if we want to design a more efficient algorithm  we need
to find ways to generate fewer candidate clauses  there are a couple of different techniques
that could be used  one very simple method which could yield a smaller number of clauses
is to eliminate from  t   those elements which are not prime implicates of t   thereby
decreasing the cardinalities of the  t   and hence of candidates  to do this  we simply
test whether t is a tautology  and remove it if it is  and then compare the   literals in
 t    discarding any weaker elements  if we apply this technique to example     we would
remove  b from  t     thereby reducing the cardinality of candidates from    to   
more substantial savings could be achieved by using a technique developed in the framework of propositional logic  cf  marquis        which consists in calculating the prime implicates of t    then the prime implicates of t   t    then those of t   t   t    and so on until
we get the prime implicates of the full disjunction of terms  by interleaving comparison
and construction  we can eliminate early on a partial clause that cannot give rise to prime
implicates instead of producing all of the extensions of the partial clause and then deleting
them one by one during the comparison phase  in our example  there were only two terms 
but imagine that there was a third term t    then by applying this technique  we would
first produce the   prime implicates of t   t  and then we would compare the    t    
candidate clauses of t   t   t    compare this with the current algorithm which generates
and then compares     t     candidate clauses 
given that the number of elements in candidates can be double exponential in the
length of the input  cutting down on the size of the input to genpi could yield significant
savings  one obvious idea would be to break conjunctions of formulae into their conjuncts 
and then calculate the prime implicates of each of the conjuncts  unfortunately  however 
we cannot apply this method to every formula as the prime implicates of the conjuncts are
not necessarily prime implicates of the full conjunction  one solution which was proposed
in the context of approximation of description logic concepts  cf  brandt   turhan       
is to identify simple syntactic conditions that guarantee that we will get the same result
if we break the formula into its conjuncts  for instance  one possible condition is that the
conjuncts do not share any propositional variables  the formula  in our example satisfies
this condition since the variables in a and     b  c    b     b    c  d    e   f    are
disjoint  by generating the prime implicates of the conjuncts separately  we can directly
identify the prime implicate a  and we only have   candidate clauses of     b  c    b  
  b    c  d    e   f    to compare  if we also remove weaker elements from the  ti   as
  

fiprime implicates and prime implicants in modal logic

suggested above  we get only   candidate clauses for     bc  b   b  cd  e f    
all of which are prime implicates of  
another important source of inefficiency in our algorithm is the comparison phase in
which we compare all candidate clauses one by one in order to identify the strongest ones 
the problem with this is of course that in the worst case there can be a double exponential
number of candidate clauses  simply because there may be double exponentially many
distinct prime implicates  and each prime implicate must be equivalent to some candidate
clause  keeping all of these double exponentially many clauses in memory will generally
not be feasible  fortunately  however  it is not necessary to keep all of the candidate clauses
in memory at once since we can generate them on demand from the sets  t    indeed  as
we demonstrate in the appendix  by implementing our algorithm in a more clever fashion 
we obtain an algorithm which outputs the prime implicates iteratively while requiring only
single exponential space  the output of the algorithm could of course be double exponentially
large because of theorem     
theorem     there exists an algorithm which runs in single exponential space in the size
of the input and incrementally outputs  without duplicates  the set of prime implicates of
the input formula 
although our modified algorithm has a much better spatial complexity than the original 
it still does not yield a practicable means for generating prime implicates  the reason is that
we still need to compare each of the candidate clauses against all the other candidate clauses
in order to decide whether a candidate is a prime implicate or not  given that the set of
candidate clauses may be double exponential in number  this means that our algorithm may
need to perform double exponentially many entailment tests before producing even a single
prime implicate  a much more promising approach would be to test directly whether or not
a candidate clause is a prime implicate without considering all of the other candidate clauses 
in order to implement such an approach  we must of course come up with a procedure for
determining whether or not a given clause is a prime implicate  this will be our objective
in the following section 
    recognizing prime implicates
the focus of this section is the problem of recognizing prime implicates  that is  the problem
of deciding whether a clause  is a prime implicate of a formula   as has been discussed
in the previous subsection  this problem is of central importance  as any algorithm for
generating prime implicates must contain  implicitly or explicitly  some mechanism for
ensuring that the generated clauses are indeed prime implicates 
in propositional logic  prime implicate recognition is bh   complete  marquis        
being as hard as both satisfiability and deduction  in k  satisfiability and unsatisfiability are
both pspace complete  so we cannot hope to find a prime implicate recognition algorithm
with a complexity of less than pspace 
theorem     prime implicate recognition is pspace hard 
in order to obtain a first upper bound  we can exploit theorem    which tells us that
there exists a polynomial function f such that every prime implicate of a formula  is
  

fibienvenu

equivalent to some clauses of length at most  f        this leads to a simple procedure for
determining if a clause  is a prime implicate of a formula   we simply check for every
clause  of length at most  f      whether  is an implicate of  which implies  but is not
implied by   if this is the case  then  is not a prime implicate  we have found a logically
stronger implicate of    otherwise  there exists no stronger implicate  so  is a prime
implicate  it is not too hard to see that this algorithm can be carried out in exponential
space  which gives us an expspace upper bound 
of course  the problem with this naive approach is that it does not at all take into
account the structure of   so we end up comparing a huge amount of irrelevant clauses 
which is exactly what we were hoping to avoid  the algorithm that we propose later in this
section avoids this problem by exploiting the information in the input formula and clause
in order to cut down on the number of clauses to test  the key to our algorithm is the
following theorem which shows how the general problem of prime implicate recognition can
be reduced to the more specialized tasks of prime implicate recognition for propositional
formulae    formulae  and   formulae  to simplify the presentation of the theorem  we
let    refer to the set of prime implicates of   and we use the notation     l         ln  
to refer to the clause obtained by removing each of the literals li from   for example
 a  b   c     a   c  refers to the clause b 
theorem     let  be a formula of k  and let           k           n         
 m  j propositional literals  be a non tautologous clause such that  a  i  i      n
for all i  and  b  there is no literal l in  such that       l   then      if and only
if the following conditions hold 
           k                   k    
     i          n             i     for every i
             n                       n    
we remark that the restriction to clauses for which i  i          m for all i
and for which        l  for all l is required  if we drop the first requirement  then there
are some non prime implicates that satisfy all three conditions  and if we drop the second 
there are prime implicates which fail to satisfy one of the conditions    these restrictions are
without loss of generality however since every clause can be transformed into an equivalent
clause satisfying them  for the first condition  we replace each  i by   i          m   
thereby transforming a clause        k          m           n into the equivalent
        k          m               m           n          m    then to make
the clause satisfy the second condition  we simply remove from  those literals for which
      l  until no such literal remains 
theorem    shows how prime implicate recognition can be split into three more specialized sub tasks  but it does not tell us how to carry out these tasks  thus  in order to turn
   for the first restriction  consider the formula      abc  a and the clause      ab   ab  
it can be easily shown that  is an implicate of   but  is not a prime implicate of  since there exist
stronger implicates  e g   itself   nonetheless  it can be verified that both   a  b   a  b   
          a  b     and   a  b             a  b      for the second restriction  consider the
formula  a and the clause  a  ab   we have   ab      a  a   even though  a  ab    a
is a prime implicate of  a 

  

fiprime implicates and prime implicants in modal logic

this theorem into an algorithm for prime implicate recognition  we need to figure out how
to test whether a propositional clause  a   formula  or a   formula is a prime implicate of
a formula 
determining whether a propositional clause is a prime implicate of a formula in k is
conceptually no more difficult than determining whether a propositional clause is a prime
implicate of a propositional formula  we first ensure that the clause is an implicate of the
formula and then make sure that all literals appearing in the clause are necessary 
theorem     let  be a formula of k  and let  be a non tautologous propositional clause
such that      and such that there is no literal l in  such that       l   then     
if and only if          l  for all l in  
we now move on to the problem of deciding whether a clause of the form   is a prime
implicate of a formula   we remark that if   is implied by   then it must also be implied
by each of the terms ti dnf       but if ti       then by theorem    it must be the
case that the conjunction of the   literals in ti implies    this means that the formula
          n  where i is the conjunction of the formulae  such that   is in ti   is an
implicate of  which implies    and moreover it is the strongest such implicate  it follows
then that   is a prime implicate of  just in the case that                n   which
is true if and only if     i for some i  by theorem     thus  by comparing the formula 
with the formulae i associated with the terms of   we can decide whether or not   is a
prime implicate of  
theorem     let  be a formula of k  and let      be a non tautologous clause such
that       then      if and only if there exists some term t dnf     such that
    t   where t is the conjunction of formulae  such that   is in t  
finally let us turn to the problem of deciding whether a clause   is a prime implicate
of a formula   now we know by covering that if   is an implicate of   then there must
be some prime implicate  of  which implies    it follows from theorem   that  must
be
w a disjunction of   literals  and from theorem    that  is equivalent to a disjunction
t dnf       dt where  dt is an element of  t   for every t  refer back to figure   for
the definition of  tw
    according to definition      is awprime implicate of  just in
the case that      t dnf       dt   or equivalently     t dnf      dt   thus    is
not a prime implicate of w
 just in the case that there iswa choice of  dt   t   for each
    t dnf      dt  
t  dnf      such that t dnf      dt     and w
testing directly whether  entails some formula t dnf      dt could take exponential
space in the worst case since there may be exponentially many terms in dnf       luckily 
w however  we can get around this problem by exploiting the structure of the formula
t dnf      dt   we remark that because of the way  t   is defined the formula dt must
be a conjunction of formulae  such that   or   appears in nnf    outside the scope of
modal operators  we will use x w
to denote the set of formulae  satisfying this condition  we
show in the appendix
that      t dnf      dt implies the existence of a subset s  x such
w
that  a       s  and  b  every dt has at least w
one conjunct from the set s  conversely 
the existence of such a subset of x implies      t dnf      dt   this observation is the
basis for the algorithm test pi given in figure    the basic idea behind the algorithm is
to try out each of the different subsets of x in order to see whether some subset satisfies the
  

fibienvenu

function test pi     
input  a clause   and a formula  such that      
output  yes or no
    if       return yes if      and no otherwise 
    set x equal to the set of formulae  such that   or   appears in nnf    outside
the scope of modal operators 
    for each w
s  x   test whether the following two conditions hold 
 a       s 
 b  for each ti  dnf       there exists conjuncts  i    i           i k i  of ti
such that 
 i   i   i          i k i     s    
 ii    i  i         i k i        
return no if some s satisfies these conditions  and yes otherwise 
figure    algorithm for identifying prime implicates of the form   

aforementioned conditions  if we find a suitable subset  this proves that   is not a prime
implicate  and if no such subset exists  then we can be sure there is no stronger implicate
than    the algorithm can be shown to run in polynomial space since there can be at
most    elements in x   and we can consider the terms in dnf      one at a time 
theorem     let  be a formula  and let   be an implicate of   then the algorithm
test pi returns yes on input       if and only if   is a prime implicate of  
theorem     the algorithm test pi runs in polynomial space 
we now illustrate the algorithm test pi with two examples 
example     we use test pi to test whether the clause      ab  is a prime implicate
of    a     b  c     e  f       a  b  
step    as  is satisfiable  we pass directly to step   
step    we set x equal to the set of formulae  such that   or   appears in nnf   
outside the scope of modal operators  in our case  we set x    b  c  e  f  a  b 
since   nnf    and b  c  e  f   and a  b are the only formulae satisfying the
requirements 
step    we examine each of the different subsets of x to determine whether they satisfy
conditions  a  and  b   in particular  we consider the subset s    b  c  e  f    we
remark that this subset satisfies condition  a  since a  b      b  c    e  f    in order
to check condition  b   we first call the function dnf    on  which returns the two
terms t    a    b  c     a  b  and t    a    e  f      a  b   we notice that
the conjuncts   a  b  and   b  c  of t  satisfy conditions  i  and  ii  since b  c  s
and   a  b   b  c        we then notice that the conjuncts   a  b  and   e  f   of
t  also satisfy conditions  i  and  ii  since e  f  s and   a  b   e  f         that
  

fiprime implicates and prime implicants in modal logic

function testpi    
input  a clause  and a formula 
output  yes or no
    if        return no 
    if       then return yes if      and no if not 
if      then return yes if     and no otherwise 
    for each li in    l        ln   test if     li      and if so  remove li from  
let d               m   be the set of   literals in   if d is non empty  replace
each disjunct   of  by the literal             m   
    let p be the set of propositional literals which are disjuncts of   for each
l  p  check whether         l   and return no if so 
    let b be the set of   formulae appearing as disjuncts in   check for each  
in b whether there is some t in dnf                for which the formula
            k   implies the conjunction of   literals in t   and return no
if not 
w
    if d is empty  return yes  otherwise return test pi    m
i   i          d   
figure    algorithm for identifying prime implicates 

means that we have found a subset s of x which satisfies conditions  a  and  b   so
the algorithm returns no  this is the correct output since   a  b    b  c    e  f    
is an implicate of  which is strictly stronger than  
example     we use test pi to test whether the clause      a  b  c  is a prime
implicate of    a     b  c     e  f       a  b     e  f   a  b  c   
step    we proceed directly to step   since  is satisfiable 
step    we set x    b  c  e  f  a  b  e  f   a  b  c    since nnf    a     b 
c     e  f       a  b     e  f   a  b  c   
step    we check whether there is some subset of x satisfying conditions  a  and  b   we
claim that there is no such subset  to see why  notice that a    b  c     a  b  
  e  f   a  b  c   is the only term in dnf       moreover  there is only one
set of conjuncts of this term which implies   a  b  c   namely    a  b     b  c   
but that means that s must contain either a  b or b  c in order to satisfy condition
 b  i   as a  b  c implies both a  b and b  c  we are guaranteed that a  b  c
will imply the disjunction of elements in s  thereby falsifying condition  a   it follows
that there is no subset of x satisfying the necessary conditions  so test pi returns
yes  which is the desired result 
in figure    we present our algorithm for testing whether a clause  is a prime implicate
of a formula   the first two steps of the algorithm treat the limit cases where  is not
an implicate or where one or both of  and  is a tautology or contradiction  in step   
  

fibienvenu

we apply equivalence preserving transformations to  to make it satisfy the requirements
of theorem     then in steps       and   we use the procedures from theorems        
and    to test whether the three conditions in theorem    are verified  if the three tests
succeed  then by theorem     the clause is a prime implicate  so we return yes  if some
test fails  we return no as the clause has been shown not to be a prime implicate 
theorem     the algorithm testpi always terminates  and it returns yes on input   
  if and only if  is a prime implicate of  
we demonstrate the use of testpi on an example 
example     we use testpi to test if the clauses     b       b    e  f        a   c 
      a  b   and       a  b  c     a  b  c  f      e  f   are prime implicates of
   a     b  c     e  f       a  b  
    we output no in step   since         
    we skip steps   and   since       and neither      nor        in step    we
make no changes to   since it contains no redundant literals nor any   literals  we
skip step   since   has no propositional disjuncts  in step    we return no since
dnf             b       a    b  c     a  b     e  f    and  b       b  c  
    we proceed directly to step   since                and         no modifications
are made to   in step   as it does not contain any redundant literals or   literals 
in step    we test whether or not          a   as       c  we proceed on to step
   and then directly on to step   since   contains no   literals  in step    we call
test pi  c           c     which outputs no since          c       and
c      
    steps     are all inapplicable  so we skip directly to step    in this step  we call
test pi with as input the clause   a b  and the formula         a b       
we have already seen in example    above that test pi returns no on this input 
which means that testpi also returns no 
    we proceed directly to step    where we delete the redundant literal   a  b  c  f  
and then modify the literal   ef    at the end of this step  we have       abc 
   ef   abc    step   is not applicable since there are no propositional disjuncts
in     in step    we continue since dnf               e  f   a  b  c       
 a  ef    ab   abc    and     ef  abc   abc     
  e  f      a  b  c   in step    we return yes since we call test pi on input
   a  b  c             a  b  c      and we have previously shown in example
   that test pi returns yes on this input 
we show in the appendix that the algorithm testpi runs in polynomial space  as we
have already shown that testpi decides prime implicate recognition  it follows that this
problem is in pspace 
theorem     prime implicate recognition is in pspace 
  

fiprime implicates and prime implicants in modal logic

by putting together theorems    and     we obtain a tight complexity bound for the
prime implicate recognition task 
corollary     prime implicate recognition is pspace complete 

   conclusion and future work
the first contribution of this work is a detailed comparison of several different possible
definitions of clauses  terms  prime implicates  and prime implicants for the modal logic k 
the results of this investigation were largely positive  although we have shown that no
perfect definition exists  we did exhibit a very simple definition  d   which satisfies most of
the desirable properties of the propositional case  the second contribution of our work is a
thorough investigation of the computational aspects of the selected definition d   to this
end  we presented a sound and complete algorithm for generating prime implicates  as well
as a number of optimizations to improve the efficiency of the algorithm  an examination of
the structure of the prime implicates generated by our algorithm allowed us to place upper
bounds on the length of prime implicates and on the number of prime implicates a formula
can possess  we showed these bounds to be optimal by exhibiting matching lower bounds 
and we further proved that the lower bounds hold even for some much less expressive notions of prime implicates  finally  we constructed a polynomial space algorithm for deciding
prime implicate recognition  thereby showing this problem to be pspace complete  which is
the lowest complexity that could reasonably be expected  although the focus of the paper
was on the logic k  all of our results can be easily lifted to multi modal k and to concept
expressions in the well known description logic alc 
as was mentioned in the introduction  one of the main applications of prime implicants
in propositional logic is to the area of abductive reasoning  where prime implicants play
the role of abductive explanations  the results of our paper can be directly applied to the
problem of abduction in k  our notion of prime implicants can be used as a definition of
abductive explanations in k  and our prime implicate generation algorithm provides a means
of producing all of the abductive explanations to a given abduction problem  moreover 
because the notion of term underlying our definition of abductive explanations is more
expressive than that used by cialdea mayer and pirri         we are able to find explanations
which are overlooked by their method  for instance  if we look for an explanation of the
observation c given the background information   a  b   c  we obtain   a  b   whereas
their framework yields  a and  b  this is an argument in favor of our approach since
generally in abduction one is looking to find the weakest conditions guaranteeing the truth
of the observation given the background information 
also of interest are our results on the size and number of prime implicates  as these
yield corresponding lower bounds on the size and number of abductive explanations  in
particular  our results imply that the abductive explanations of cialdea mayer and pirri
       can have exponential size and be double exponentially many in number in the worst
case  and thus behave no better in these respects than the notion of abductive explanation
induced by our preferred definition d   moreover  the fact that these lower bounds hold
even in the case of the extremely inexpressive notion of abductive explanations induced
by definition d  suggests that these high worst case complexity results really cannot be
  

fibienvenu

avoided  in light of these intractability results  an interesting question for future research
would be to study the problem of generating a single prime implicate  since in some applications it may prove sufficient to produce a single minimal explanation for an observation 
another interesting subject for future work which is relevant from the point of view of abduction is the investigation of the notion of prime implicate over a fixed vocabulary  the
development of generation algorithms for this more refined notion of prime implicate would
allow one to generate only those abductive explanations which are built up from a given set
of propositional variables 
the second domain of application which was mentioned in the introduction was the
area of knowledge compilation  in propositional logic  one well known target language for
knowledge compilation is prime implicate normal form  in which a formula is represented
as the conjunction of its prime implicates  a natural idea would be to use our selected
definition of prime implicate to define in an analogous manner a notion of prime implicate
normal form for k formulae  unfortunately  the normal form we obtain satisfies few of the
nice properties of the propositional case  for instance  we find that entailment between two
formulae in prime implicate normal form is no easier than between arbitrary k formulae 
to see why  consider any pair of formulae  and  in negation normal form  the formulae
  and   are their own prime implicates and hence are in prime implicate normal form
according to the naive definition  as      just in the case that         we can reduce
entailment between arbitrary k formulae in nnf to entailment between formulae in prime
implicate normal form  as the former problem is known to be pspace complete  it follows
that the latter is pspace complete as well 
at first sight  this appears to be quite a disappointing result as one would hope that the
computational difficulty of representing a formula by its prime implicates would be offset
by some good computational properties of the resulting formula  as it turns out  however 
the problem lies not in our definition of prime implicates but rather in the naive way of
defining prime implicate normal form  indeed  in a continuation of the present work  bienvenu         we proposed a more sophisticated definition of prime implicate normal form 
in which we specify which of the many different clausal representations of a prime implicate
should be used  this normal form was shown to enjoy a number of desirable properties
which make it interesting from the viewpoint of knowledge compilation  most notably  it
was proven that entailment between formulae in k in our prime implicate normal form can
be carried out in polynomial time using a simple structural comparison algorithm which is
reminiscent of the structural subsumption algorithms used in subpropositional description
logics  it should be noted that the proof of this and other results by bienvenu        make
ample use of the material presented in the current paper 
in this work  we studied prime implicates with respect to the local consequence relation 
so a natural direction for future work would be the investigation of prime implicates with respect to the global consequence relation  this question is particularly interesting given that
global consequence is the type of consequence used in description logic ontologies  unfortunately  our preliminary investigations suggest that defining and generating prime implicates
with respect to the global consequence relation will likely prove more difficult than for the
local consequence relation  for one thing  if we use a definition of clause which is reasonably
  

fiprime implicates and prime implicants in modal logic

expressive  then the notion of prime implicate we obtain does not satisfy covering since
we can construct infinite sequences of stronger and stronger implicates  take for instance
the formula  a  b    b   b  which implies  using the global consequence relation 
each of the increasingly stronger clauses in the infinite sequence a   b  a    b   b  
a    b    b   b        this is a familiar situation for description logic practitioners since
these infinite sequences are responsible for the non existence of most specific concepts in
many common dls  cf  kusters   molitor        and the lack of uniform interpolation for
alc tboxes  ghilardi  lutz    wolter         a standard solution to this problem is to
simply place a bound on the depth of formulae to be considered  effectively blocking these
problematic infinite sequences  this will not allow us to regain covering  but it will give
us a weaker version of this property  which should be sufficient for most applications  the
development of generation algorithms for the global consequence relation may also prove
challenging  since it is unclear at this point whether we will be able to draw inspiration from
pre existing methods  despite these potential difficulties  we feel that this subject is worth
exploring since it could contribute to the development of more flexible ways of accessing
and structuring information in description logic ontologies 
finally  another natural direction for future research would be to extend our investigation of prime implicates and prime implicants to other popular modal and description logics 
particularly of interest are modal logics of knowledge and belief and expressive description
logics used for the semantic web  we are confident that the experience gained from our
investigation of prime implicates and prime implicants in k will prove a valuable asset in
the exploration of other modal and description logics 

acknowledgments
this paper corrects and significantly extends an earlier conference publication  bienvenu 
       this paper was written while the author was a phd student working at irit 
universite paul sabatier  france  the author would like to thank her thesis supervisors
andreas herzig  jerome lang  and jerome mengin  as well as the anonymous reviewers for
very helpful feedback 

appendix a  proofs
theorem   let            m              n be formulae in k  and let  be a propositional
formula  then
                      
                       
           m        n            or i      n     for some i 
                  m            n       or            m  i for some i 
                  n      i for some i
  

fibienvenu

             m            n
           m               m           n          m  
proof  the first statement is a well known property of local consequence  but we prove it
here for completeness 
     






m  w     implies m  w     for all m  w
m  w      or m  w     for all m  w
m  w     or m  w     for all m  w
     
m  w        for all m  w
      

for the second statement  if        then there is some m  w such that m  w       
create a new model m from m by adding a new world w and placing a single arc from
w to w  then m   w          which means that      is satisfiable and hence
         since        for the other direction  suppose          then there
exists m  w such that m  w                but this means that there is some
w for which     hence        to complete the proof  we use the following chain of
equivalences                                     
for    suppose that             m            n       then there exist m  w
such that m  w              m            n   as m  w      we cannot have
      nor can we have i          n     since for each i there is some w such
that m  w    i          n   now for the other direction suppose that  and all of the
i          n are satisfiable  then there is some propositional model w of   and for
each i  we can find mi   wi such that mi   wi    i          n   now we construct a new
kripke structure which contains the models mi and the world w and in which there are arcs
going from w to each of the wi   it is not hard to see that in this new model mnew we have
mnew   w              m          n   so           m            n      
statement   follows easily from the third statement  we simply notice that      
      m            n is a tautology just in the case that its negation      
      n            m is unsatisfiable 
for    we use statements   and   to get the following chain of equivalences 
               n
                 n
      i for some i
     i for some i
the first implication of the equivalence in   is immediate since           m   
          m and  i      i          m   for all i  for the other direction  we remark
that by using statements   and    we get the following equivalences 
  i          m       i            m
   i          m      i            m      
   i          m     i            m    
  i          m    i          m    
  

fiprime implicates and prime implicants in modal logic

as  i          m    i          m is clearly unsatisfiable  it follows that
  i          m       i            m for every i and hence that           m 
             m           n          m                m            n  
completing the proof 
theorem   let  be a disjunction of propositional literals and    and   formulae  then
each of the following statements holds 
   if      for some non tautological propositional clause   then every disjunct of  is
either a propositional literal or an unsatisfiable   formula
   if               n   then every disjunct of  is a   formula
   if               n and               n   then every disjunct of  is either a
  formula or an unsatisfiable   formula
proof  for      let  be a non tautologous propositional clause such that       and suppose
for a contradiction that  contains a disjunct   or a disjunct   where        in the
first case  we have        and hence         it follows from theorem   that
     contradicting our assumption that  is not a tautology  in the second case  we have
       and thus         by theorem    either     or      in both cases  we
reach a contradiction since we have assumed that       and       it follows then that 
cannot have any   formulae or satisfiable   formulae as disjuncts 
the proofs of     and     proceed similarly 
theorem   let                m            n and                 p 
          q be formulae in k  if  are   are both propositional and        then

       and

        m            p and
     

for every i there is some j such that i            p  j
proof  since we have        we know that       and             p  i for all i  using this
information together with theorem    we get the following equivalences 
     


          m     



 i     



                  p            m
      
     
          m      
                p            m              q
           p           m  
        m            p
                p  i              q
there is some j such that            p  i  j
there is some j such that i            p  j

to complete the proof  we use the fact      if and only if                  m      
and  i     for every i 
  

fibienvenu

theorem   any definition of literals  clause  and terms for k that satisfies properties p 
and p  cannot satisfy p  
proof  we remark that the set of clauses  resp  terms  with respect to definition d  is
precisely the set of formulae in nnf which do not contain   resp     i e  d  is the most
expressive definition satisfying both p  and p   thus  to show the result  it suffices to
show that d  does not satisfy p  
suppose for a contradiction that d  does satisfy p   then there must exist clauses          n
such that   a  b           n   each of the clauses i is a disjunction li          li pi   by
distributing  over   we obtain the following 
n
 

 

  a  b  

li ji

 j       jn        p             pn  i  

from which we can infer that for each  j         jn             p                   pn   we have
n
 

li ji      a  b 

i  

vn

consider some  j         jn   such that i   li ji is consistent  there must be at least one such
tuple  otherwise we would have   a  b      the formulae li ji are eithervpropositional
literals or formulae of the form   or   for some clause   it follows that ni   li ji must
have the following form 
        k            m            n
where          k are propositional
literals and         
v m            n are clauses with respect
v
to d   as we know that ni   li ji      a  b  and ni   li ji       by theorem    there must
be some  q such that
 q            n      a  b 
we now show that  q       a  b   and hence that             n    suppose for a
contradiction that this is not the case  then we must have q    a and q    b  but by
theorem    every disjunct of q  which we recall is a d  clause  must either be unsatisfiable
or equal to both a and b  as the latter
v is impossible  it follows that q      which is a
contradiction since we assumed that ni   li ji is satisfiable  it follows then that in order to
get  q            n      a  b   there must be some r which is not a tautology 
now let us consider the formula
 
 
 j       jn
  j       jn  

vn

i   li ji   

v
where  j       jn is a non tautological   formula appearing in ni   li ji  we have just shown
that such a formula must exist   clearly it must be the case that
n
 

 

 j       jn        p             pn  i  

  

li ji    

fiprime implicates and prime implicants in modal logic

from which we get 
  a  b     
but according to theorem    a satisfiable   formula cannot imply a disjunction of  formulae unless that disjunction is a tautology  so we must have       however  this is
impossible since it would imply  theorem    that there is some j       jn which is a tautology 
contradicting our earlier assumption to the contrary  we can thus conclude that there is
no set of clauses          n with respect to d  such that   a  b           n   and hence
that any definition which satisfies p  and p  cannot satisfy p  
in order to prove theorem    we will make use of the following lemmas 
lemma     definition d  satisfies p  
proof  we demonstrate that any formula in k in nnf is equivalent to a conjunction of
clauses with respect to definition d   the restriction to formulae in nnf is without loss
of generality as every formula is equivalent to a formula in nnf  the proof proceeds by
induction on the structural complexity of formulae  the base case is propositional literals 
which are already conjunctions of clauses since every propositional literal is a clause with
respect to d   we now suppose that the statement holds for formulae   and   and show
that it holds for more complex formulae 
we first consider           by assumption  we can find clauses i and j such
that            n and            m   thus   is equivalent to the formula
        n          m   which is a conjunction of clauses with respect to d  
next we consider           by the induction hypothesis  we have            n
and            m for some clauses i and j   thus             n             m   
which can be written equivalently as    i j        n        m  i  j    since the union of
two clauses produces another clause  all of the i  j are clauses  completing the proof 
we now consider the case where         by assumption             n   where each
i is a clause  so          n    but we also know that        n           n  
it follows that  is equivalent to           n   which is a conjunction of clauses since the
 i are all clauses 
finally  we consider         using the induction hypothesis  we have       
     n   for clauses i   but since the i are clauses  each i is a disjunction of literals
li         li pi   after distributing  over  and  over    we find that  is equivalent to the
formula
 
  l  j   l  j        ln jn  
 j       jn        p             pn 

which is a clause with respect to d  
the proof that every formula is equivalent to a disjunction of terms with respect to d 
proceeds analogously 
lemma     every clause  resp  term  with respect to d  is a clause  resp  term  with
respect to definitions d a  d b  and d  
proof  we will show by induction on the structural complexity of formulae that 
  

fibienvenu

   every clause c with respect to d  is a clause with respect to definitions d a  d b 
and d  and a disjunction of terms with respect to d a
   every term t with respect to d  is a term with respect to definitions d a  d b  and
d  and a conjunction of clauses with respect to d a and d b
we require this stronger formulation of the statement to prove some of the sub cases 
the base case for our induction is propositional literals  which are both clauses and
terms with respect to d   it is easy to see that     and     are verified since propositional
literals are both clauses and terms with respect to definitions d a  d b  and d   and
hence they are also disjunctions of terms with respect to d a and conjunctions of clauses
with respect to d a and d b  
for the induction step  we will show that the above statements hold for arbitrary clauses
or terms with respect to d  under the assumption that the statments hold for all of their
proper sub clauses and sub terms 
we begin with clauses  let c be a d  clause such that all proper sub clauses and subterms of c satisfy     and      now since c is a clause with respect to d   it can either
be a propositional literal or a formula of the form c   c  for clauses c  and c     c  for
some clause c    or  t  for some term t    the case where c is a propositional literal has
already been treated in the base case  let us thus consider the case where c   c   c   
the first part of     holds since by the induction hypothesis both c  and c  are clauses
with respect to definitions d a  d b  and d   and for all three definitions the disjunction
of two clauses is a clause  the second half of     is also verified since both c  and c  are
disjunctions of terms with respect to d a  and thus so is their disjunction c   c    we
next consider the case where c    c  for some clause c  with respect to d   the first
part of     follows easily as we know that c  must also be a clause with respect to d a 
d b  and d   and for all of these definitions putting a   before a clause yields another
clause  the second part of     holds as well since c  is a disjunction of terms with respect
to d a and thus  c  is a term with respect to this same definition  we now suppose that
c    t  for some term t  with respect to d   for definitions d a and d b  we know
from the induction hypothesis that t  is a conjunction of clauses with respect to d a and
d b and hence that  t  is a clause with respect to these definitions  for d   the result
obviously holds since we are allowed to put any formula in nnf behind    the second part
of     holds since by the induction hypothesis t  is a term with respect to d a and hence
 t  is also a term with respect to this definition 
we next consider terms  let t be a d  term such that all proper sub clauses and subterms of t satisfy     and      then t must be either a propositional literal or a formula of
the form t   t  for terms t  and t     c  for some clause c    or  t  for some term t    if
t   t   t    the first half of     holds since we know t  and t  to be terms with respect to
d a  d b  and d   and conjunctions of terms are also terms for all three definitions  the
second half is also verified since both t  and t  are assumed to be conjunctions of clauses
with respect to d a and d b  which means that t is also a conjunction of clauses with
respect to these definitions  next suppose that t    c    for definitions d b and d   it is
easy to see that t is a literal and hence a term  for d a  the induction hypothesis tells us
that c  is a disjunction of terms  from which we can deduce that  c  is a term  moreover 
since c  is known to be a clause with respect to d a and d b  then  c  must also be a
   

fiprime implicates and prime implicants in modal logic

clause with respect to these definitions  so t is a conjunction of clauses with respect to both
d a and d b  finally  we treat the case where t    t    for d a  we use the fact that
t  is a term with respect to d a  which means that  t  must also be a term  for d b 
we use the supposition that t  is a conjunction of clauses with respect to d b  from which
we get that  t  is a literal and hence a term  the first part of     clearly also holds for d 
since any formula behind   yields a literal and thus a term  the second half of     follows
from the fact that by the induction hypothesis t  is a conjunction of clauses with respect
to d a and d b  so  t  is a clause  and hence a conjunction of clauses  with respect to
these definitions 

u  s               m  
where the i j are defined inductively as follows

 i   j   if either i  n  ui  sj   or i   n and uin  sj
i j  
 i   j   if either i  n  ui   sj   or i   n and uin   sj
for i            n  and  n   j     and         
   z    
 n

figure    the formula u  s which codes an instance u    u         un    s    s         sm   of
the exact cover problem 

lemma     entailment between terms or clauses is np complete for both definitions d 
and d  
proof  in the proofs of both np membership and np hardness  we will exploit the relationship between terms with respect to definitions d  and d  and concept expressions in
the description logic ale  cf  baader  mcguiness  nardi    patel schneider         we
recall that concept expressions in this logic are constructed as follows  we use a modal logic
syntax and assume a single modal operator in order to facilitate comparison between the
formalisms  
           a   a             
the semantics of the symbols  and  is as one would expect  m  w     and m  w      for
every model m and world w  the semantics of atomic literals  conjunctions  and universal
and existential modalities is exactly the same as for k 
it is not hard to see that every term with respect to d  or d  is a concept expression in
ale  as entailment between ale expressions is decidable in nondeterministic polynomial
time  cf  donini  lenzerini  nardi  hollunder  nutt    marchetti spaccamela         it
follows that deciding entailment between terms with respect to either d  or d  can also
be accomplished in nondeterministic polynomial time  i e  these problems belong to np 
it remains to be shown that these problems are np hard  to prove this  we show how
the polynomial time reduction of donini         adapted from the original np hardness
proof by donini et al         of the np complete exact cover  xc  problem  garey  
   

fibienvenu

johnson        to unsatisfiability in ale can be modified so as to give a polynomial time
reduction from xc to entailment between terms with respect to d  or d  
the exact cover problem is the following  given a set u    u         un   and a set s  
 s         sm   of subsets of u  determine whether there exists
sqan exact cover  that is  a subset
 si         siq   of s such that sih  sik    for h    k and k   sik   u  donini has proven
       that u  s has an exact cover if and only if the formula u  s pictured in figure   is
unsatisfiable  notice that u  s is not a term with respect to either d  and d  as it uses
the symbols  and   we would like to find a similar formula which is a term with respect
to our definitions and which is satisfiable if and only if u  s is  consider the formula
u  s               m   
where i j and   are defined exactly like i j and  except that we replace  by a and
 by a  it is easy to verify that u  s is indeed a term with respect to both d  and
d   moreover  it is not too hard to see that             m      n  if and only if
            m      n a and hence that u  s and u  s are equisatisfiable  as u  s has an
exact cover if and only if u  s is unsatisfiable  and u  s is unsatisfiable just in the case that
u  s is  it follows that u  s has an exact cover if and only if u  s is unsatisfiable  moreover 
u  s can be produced in linear time from u  s   so we have a polynomial time reduction
from xc to unsatisfiability of terms in d  or d   but a formula is unsatisfiable just in
the case that it entails the term a  a  so  xc can be polynomially reduced to entailment
between terms with respect to either d  or d   making these problems np hard and hence
np complete 
in order to show the np completeness of clausal entailment  we remark that for both
definitions d  and d   the function nnf transforms negations of clauses into terms and
negations of terms into clauses  this means that we can test whether a clause  entails a
clause  by testing whether the term nnf     entails the term nnf     likewise  we
can test whether a term  entails another term  by testing whether the clause nnf    
entails the clause nnf     as the nnf transformation is polynomial  it follows that
entailment between clauses is exactly as difficult as entailment between terms  so clausal
entailment is np complete 
lemma     for definition d   entailment between clauses or terms is pspace complete 
proof  membership in pspace is immediate since entailment between arbitrary formulae
in k can be decided in polynomial space  to prove pspace hardness  we adapt an existing
proof of pspace hardness of k 
figure   presents an encoding of a qbf    q  p     qm pm  in a k formula f    that
is used in section     of  blackburn et al         to demonstrate the pspace hardness of
k  the formula f    has the property that it is satisfiable just in the case that  is a
qbf validity  as the formula f    can be generated in polynomial time from   and the
qbf validity problem is known to be pspace hard  it follows that satisfiability of formulae
in k is pspace hard as well 
in figure    we show a modified encoding  we claim the following 
    f    and f     are logically equivalent
   

fiprime implicates and prime implicants in modal logic

 i  q 
vm
 ii  i     qi  j  i qj      qi  j  i qj          m  qi  j  i qj   
vm
 iiia  i     qi   qi        qi   qi            m  qi   qi     
v
 iiib   i qi     i  qi     qi    pi        qi    pi      
v
vm  j
 iv  m 
i     j i     pi   pi     pi   pi    

 v   m  qm   

figure    the formula f    is the conjunction of the above formulae 
 i  q 
vm v
 ii  i     j  i   qi  qj      qi  qj          m  qi  qj    
vm
 iiia  i     qi   qi        qi   qi            m  qi   qi     
v
 iiib   i qi     i  qi    qi    pi        i  qi    qi    pi     
vm  vm 
 iv  i     j i   j  pi   pi     j  pi   pi    

 v   m  qm              m  qm  l  

figure    the formula f     is the conjunction of the above formulae  where the formulae
i in  v  are propositional clauses such that           l  

    if  is in cnf  then f     is a conjunction of clauses with respect to d 
    if  is in cnf  then f     can be generated in polynomial time from f   
to show      it suffices to show that  i  i    ii  ii    iiia  iiia    iiib  iiib    iv  iv  
and  v  v   the first equivalence is immediate since  i  and  i  are identical   ii  ii 
follows from the fact that  k  qi  j  i qj    j  i  k  qi  qj     iiia  iiia  holds
since  iiia  is just  iiia  with qi   qi   replaced with qi   qi     we have  iiib  iiib 
since  i  qi     qi    pi        qi    pi         i  qi    qi    pi        i  qi 
  qi    pi       the equivalence  iv  iv  holds as  j   pi   pi     pi   pi    
 j  pi   pi     j  pi   pi    finally  we have  v  v  since           l   thus  f   
and f     are logically equivalent 
to prove      we show that each of the component formulae in f     is a conjunction
of clauses with respect to d   provided that  is in cnf  clearly this is the case for  i 
as  i  is a propositional literal  the formula  ii  is also a conjunction of clauses with
respect to d  since it is a conjunction formulae of the form  k  qi  qj    similarly 
 iiia    iiib   and  iv  are all conjunctions of clauses since the formulae  k  qi   qi     
 i  qi    qi    pi        i  qi    qi    pi        k  pi   pi    and  k  pi   pi   are
all clauses with respect to d   the formula  v  must also be a conjunction of clauses since
the i are assumed to be propositional clauses  making each  m  qm  i   a clause with
respect to d   and  v  a conjunction of clauses with respect to d  
   

fibienvenu

for      it is clear that we can transform  i    iiia    iiib   and  iv  into  i    iiia    iiib  
and  iv  in polynomial time as the transformations involve only simple syntactic operations
and the resulting formulae are at most twice as large  the transformation from  ii  to  ii 
is very slightly more involved  but it is not too hard to see the resulting formula is at most
m times as large as the original  and m can be no greater than the length of f      the
only step which could potentially result in an exponential blow up is the transformation
from  v  to  v   as we put  into cnf  but under the assumption that  is already in cnf 
the transformation can be executed in polynomial time and space  as all we have to do is
separate  into its conjuncts and rewrite the  qm  i   as  qm  i   
now let    q  p     qm pm  be a qbf such that            l for some propositional
clauses i   let f     be the formula as defined in figure    by     above  we know that
f               p for some clauses i with respect to d   now consider the following
formula
               p     a  a  
we can show that f     is satisfiable if and only if  is satisfiable as follows 
 is unsatisfiable
           p     a  a  is unsatisfiable
         p    a  a  is unsatisfiable
         p is unsatisfiable
 f     is unsatisfiable
but we also know from     above that f      f     and from  blackburn et al        
that f    is satisfiable just in the case that  is a qbf validity  it is also easy to see
that  is satisfiable if and only if  does not entail the contradiction   a  a   putting
this altogether  we find that  is valid just in the case that  does not entail   a  a  
as  and   a  a  are both clauses and terms with respect to d   we have shown that
the qbf validity problem for qbf with propositional formulae in cnf can be reduced to
the problems of entailment of clauses or terms with respect to d   moreover  this is a
polynomial time reduction since it follows from     that the transformation from  to 
can be accomplished in polynomial time  this suffices to show pspace hardness  since it is
well known that qbf validity remains pspace hard even when we restrict the propositional
part  to be a formula in cnf  cf  papadimitriou        
theorem   the results in figure   hold 
proof  the satisfaction or dissatisfaction of properties p  and p  can be immediately
determined by inspection of the definitions  as can the satisfaction of p  by definitions d  
d b  d   and d   counterexamples to p  for definitions d  and d a were provided in
body of the paper  the formula   a  b  is a clause but not a disjunction of literals with
respect to both definitions 
in order to show that definition d b does not satisfy p   we remark that the negation
of the literal   a  b  is equivalent to   a  b  which cannot be expressed as a literal
in d b  for each of the other definitions  it can be shown  by a straightforward inductive
proof  that nnf  l  is a literal whenever l is a literal  that nnf  c  is a term whenever
   

fiprime implicates and prime implicants in modal logic

c is a clause  and that nnf  t   is a clause whenever t is a term  this is enough to prove
that these definitions satisfy p  since nnf    is equivalent to  
since we know that definitions d  and d  satisfy both properties p  and p   it follows
by theorem   that these definitions do not satisfy p   we have seen in lemma     that
definition d  does satisfy p   i e  that every formula is equivalent to some conjunction of
clauses with respect to d  and some disjunction of terms with respect to d   as every
clause  resp  term  of d  is also a clause  resp  term  with respect to definitions d a  d b 
and d   by lemma       it follows that every formula is equivalent to some conjunction of
clauses and some disjunction of terms with respect to these definitions  which means they
all satisfy p  
it is easy to see that property p  is satisfied by all of the definitions since all of our
definitions are context free grammars  and it is well known that deciding membership for
context free grammars can be accomplished in polynomial time  cf  younger        
from lemma      we know that deciding entailment between clauses or terms with
respect to either d  or d  is np complete  and hence not in p  unless p np   entailment
between clauses terms is pspace complete for d   lemma       as every clause  resp 
term  of d  is also a clause  resp  term  with respect to definitions d a  d b  and d 
 from lemma       it follows that entailment between clauses or terms is pspace hard for
these definitions  membership in pspace is immediate since entailment between arbitary
k formulae is in pspace 
we prove theorem   in several steps 
lemma     the notions of prime implicates and prime implicants induced by d  satisfy
implicant implicate duality 
proof  suppose for a contradiction that we have a prime implicant  of some formula 
which is not equivalent to the negation of a prime implicate of   let  be a clause which
is equivalent to   there must exist such a clause because of property p   cf  theorem
    the clause  is an implicate of  since      and     as we have assumed that
 is not a prime implicate  there must be some implicate  of  such that      and
        but then let  be a term equivalent to   here again we use p    now  must
be an implicant of  since        moreover   is strictly weaker than  since     
and       and    and      but this means that  cannot be a prime implicant 
contradicting our earlier assumption  hence  we can conclude that every prime implicant
of a formula  is equivalent to the negation of some prime implicate of   the proof that
every prime implicate of a formula  is equivalent to the negation of a prime implicant of
 proceeds analogously 
lemma     if clauses and terms are defined according to definition d   then every implicate  of a formula  is entailed by some implicate  of  with var     var   and
with depth at most         and every implicant  of  entails an implicant  of  with
var     var   and depth at most        
proof  we intend to show that the following statement holds  for any formula  and any
implicate  of   there exists a clause  such that          and var     var   and
   

fibienvenu

            so let  be an arbitrary formula  and let  be some implicate of   if 
is a tautology  then we can set    a  a  where a  var     if     then we can set
     a  a   where a  var     as this clause verifies all of the necessary conditions 
now we consider the case where neither  nor  is a tautology or a falsehood  and we
show how to construct the clause    the first thing we do is use dnf   to rewrite  as
a disjunction of satisfiable terms ti with respect to d  such that the ti contain only the
variables appearing in  and have depth at most    
   t        tz
as       it must be the case that ti     for every ti   our aim is to find a clause i for
each of the terms ti such that ti    i     and var i    var ti   and  i     ti    so
consider some ti   since ti is a term  it has the form         k            m     
      n   where          k are propositional literals  as  is a clause  it must be of the form
        p            q            r   where          p are propositional literals  as
ti      it must be the case that the formula
        k            m            n 
        p            q            r
is unsatisfiable  by theorem    one of the following must hold 
 a  there exists u and v such that u  v
 b  there exists u such that u          n          q    
 c  there exists u such that u          n          q    
now if  a  holds  we can set i   u since ti    u       u         ti    and var u   
var ti    if it is  b  that holds  then it must be the case that
u          n            q
and hence that
  u          n                q    
we can set i     u          n    since ti      u          n           u    
     n      ti    and var   u          n     var ti    finally  if  c  holds  then it
must be the case that
        n            q  u
and hence that
          n                q   u    
so we can set i             n    as ti              n                   n      ti   
and var           n     var ti    thus  we have shown that for every ti   there is some
i such that ti    i     and var i    var ti   and  i     ti    but then         z is
a clause implied by every ti   and hence by   and such that var i    i var ti    var  
and  i    maxi  ti       
now let  be an implicant of   and let  be the formula nnf     we know that
the nnf transformation is equivalence preserving  hence     and it is straightforward
   

fiprime implicates and prime implicants in modal logic

to show that  must be a clause with respect to d   but then  is an implicate of  
so there must be some clause  with var     var     var   and depth at most
                such that           let  be nnf      it can be easily verified
that  is a term  moreover  by properties of the nnf transformation  we have     
var      var      var     and                  but then  is a term such that
var     var                 and          
lemma     the notions of prime implicates and prime implicants induced by d  satisfy
finiteness 
proof  consider an arbitrary formula   from lemma      we know that for each prime
implicate  of   there must be an implicate  of  containing only those propositional
atoms appearing in  and such that             and       but since  is a prime
implicate  we must also have      and hence      thus  every prime implicate of
 is equivalent to some clause built from the finite set of propositional symbols in  and
having depth at most         as there are only finitely many non equivalent formulae
on a finite alphabet and with fixed depth  it follows that there can be only finitely many
distinct prime implicates  by lemma      every prime implicant of  is equivalent to the
negation of some prime implicate of   it follows then that every formula can only have
finitely many distinct prime implicants 
lemma     the notions of prime implicates and prime implicants induced by d  satisfy
covering 
proof  let  be an arbitrary formula  from lemma      we know that every implicate of
 is entailed by some implicate of  whose propositional variables are contained in var  
and whose depth is at most         now consider the following set
              is a clause  var    var               
and define another set  from  as follows 
                      and         
in other words   is the set of all of the logically strongest implicates of  having depth at
most        and built from the propositional letters in   we claim the following 
    every    is a prime implicate of 
    for every implicate  of   there is some    such that     
we begin by proving      suppose that     does not hold  that is  that there is some   
which is not a prime implicate of   since  is by definition an implicate of   it follows that
there must be some implicate  of  such that      and        but by lemma      there
is some implicate  of  such that              var     var    and       but
that means that  is an element of  which implies but is not implied by   contradicting
the assumption that  is in   we can thus conclude that every element of  must be a
prime implicate of  
   

fibienvenu

for      let  be some implicate of   then by lemma      there exists some clause
   such that       if     we are done  otherwise  there must exist some   
such that      and        if     we are done  otherwise  we find another stronger
member of   but as  has finitely many elements modulo equivalence  after a finite number
of steps  we will find some element which is in  and which implies   since we have just
seen that all members of  are prime implicates of   it follows that every implicate of  is
implied by some prime implicate of  
for the second part of covering  let  be an implicant of   and let  be a clause
equivalent to   there must be one because d  satisfies p    now since       we must
also have       according to what we have just shown  there must be some prime
implicate  of  such that           by lemma       must be equivalent to the
negation of some prime implicant  of   but since    and      and     it
follows that       completing the proof 
lemma     the notions of prime implicates and prime implicants induced by d  satisfy
equivalence 
proof  let  be some formula in k  and suppose that m is a model of every prime implicate
of   as d  is known to satisfy property p   by theorem     we can find a conjunction of
clauses which is equivalent to   by covering  lemma       each of these clauses is implied
by some prime implicate of   so m must be a model of each of these clauses  it follows
that m is a model of   for the other direction  we simply note that by the definition of
prime implicates if m is a model of   then it must also be a model of every prime implicate
of   we have thus shown that m is a model of  if and only if it is a model of every prime
implicate of   using a similar argument  we can show that m is a model of  if and only
if it is a model of some prime implicant of  
lemma     the notions of prime implicates and prime implicants induced by d  satisfy
distribution 
proof  let  be a prime implicate of         n   now for each i   we must have i     
from covering  we know that there must exist some prime implicate i for each i such
that i      this means that the formula         n  which is a clause because it is a
disjunction of clauses  entails   but since  is a prime implicate  it must also be the case
that             n   and hence           n   the proof for prime implicants is entirely
similar 
theorem   the notions of prime implicates and prime implicants induced by definition
d  satisfy finiteness  covering  equivalence  implicant implicate duality  and
distribution 
proof  follows directly from lemmas         
theorem    the notions of prime implicates and prime implicants induced by definitions
d  and d  do not satisfy equivalence 
   

fiprime implicates and prime implicants in modal logic

proof  the proof is the same for both definitions  suppose that equivalence holds  then
for every formula   the set  of prime implicates of  is equivalent to   but this means
that the set      is inconsistent  and hence by compactness of k  cf  blackburn et al  
      p      that there is some finite subset s       which is inconsistent  if     
then we know that the set s must contain  because the set of prime implicates of 
cannot be inconsistent  but then the conjunction of elements in s      is a conjunction
of clauses which is equivalent to   it follows that every formula  is equivalent to some
conjunction of clauses  as we have shown earlier in the proof of theorem   that there are
formulae which are not equivalent to a conjunction of clauses with respect to d  or d   it
follows that equivalence cannot hold for these definitions 
theorem    the notions of prime implicates and prime implicants induced by definitions
d a  d b  and d  do not satisfy finiteness 
proof  suppose that clauses are defined with respect to definition d a  d b  or d   the
proof is the same for all three definitions   consider the formula      a  b   it follows
from theorem   that  implies k      k a     a  b   k a  for every k     as the
formulae k are clauses  with respect to d a  d b  and d    the k are all implicates
of   to complete the proof  we show that every k is a prime implicate of   since the k
are mutually non equivalent  because  p a      q a whenever p    q   it follows that  has
infinitely many prime implicates modulo equivalence 
consider some k and some implicate              m            n of  that
implies it  by theorem   there cannot be any propositional literals in    using theorem  
and the fact that         k   we get the following 
 a  a  b    i  i       m for some i
 b  i      k a    a  b   k a  for every i
 c          m    a  b   k a
let i be such that a  b    i  i       m   we remark that i must be satisfiable since
otherwise we can combine  a  and  c  to get a  b    a  b   k a  now by  b   we know that
i      k a    a  b   k a  and hence that i    k a    a  b   ka  is inconsistent  it
follows that both i    k a   a and i    k a   b are inconsistent  using theorem   
we find that either i     k a or i    a  b  as i is a satisfiable clause with respect to
definitions d a  d b  and d   it cannot imply a  b  so we must have i     k a  by
putting  a  and  c  together  we find that
a  b  i            m    a  b   k a
it follows that i     k a  i e   k a    i   we thus have i   k a and         m 
a  b   k a  as  k a    i and a  b   k a            m   by theorem   we get
   k a     a  b   k a      i   i        m     and hence k    we have thus
shown that any implicate of  which implies k must be equivalent to k   this means that
each k is a prime implicate of   completing the proof 
   

fibienvenu

lemmas         and    follow easily from known properties of the disjunctive normal
form transformation in propositional logic  cf  bienvenu        ch     
in the proof of theorem     we will make use of the following lemmas 
lemma      the algorithm genpi always terminates 
proof  we know from lemma    that the algorithm dnf    always terminates and returns
a finite set of formulae  this means that there are only finitely many terms t to consider 
for each t   the set  t   contains only finitely many elements  this is immediate given
the definition of  t     which means that the set candidates also has finite cardinality 
in the final step  we compare at most once each pair of elements in candidates  as the
comparison always terminates  and there are only finitely many pairs to check  it follows
that the algorithm genpi terminates 
lemma      the algorithm genpi outputs exactly the set of prime implicates of the input
formula 
proof  we first prove that every prime implicate of a satisfiable term t is equivalent to
some element in  t    let t           k            m            n be some
satisfiable term  and let            p            q            r be one of its
prime implicates  we restrict our attention to the interesting case in which both t and 
are non tautologous  as t      it must be the case that
        k            m            n 
        p            q            r
is unsatisfiable  by theorem    one of the following must hold 
 a  there exists u and v such that u  v
 b  there exists u such that u          n            q
 c  there exists u such that         n    u          q
if  a  holds  then u      so  must be equivalent to u or else we would have found a
stronger implicate  contradicting our assumption that  is a prime implicate of t   but then
the result holds since u is in  t    if  b  holds  then the formula   u          n  
is an implicate of t which implies   so     u          n    we are done since
  u          r   is a member of  t    finally we consider the case where  c  holds  in
this case            n   is an implicate of t which implies   and so is equivalent to   as
 is a prime implicate   but then we have the desired result since           n   is one
of the elements in  t    thus we can conclude that every prime implicate of a term t is
equivalent to some element in  t    by lemma     the elements in dnf      are terms 
and their disjunction is equivalent to   as d  satisfies distribution  it follows that every
prime implicate of the input  is equivalent to some element in candidates  this means
that if an element i in candidates is not a prime implicate of   then there is some prime
implicate  of  that implies but is not implied by i   and hence some j  candidates
such that j    i and i     j   thus  during the comparison phase  this clause will be
removed from candidates  now suppose that the clause  is a prime implicate of   then
   

fiprime implicates and prime implicants in modal logic

we know that there must be some i  candidates such that i    and moreover  we
can choose i so that there is no j with j   i such that j    i   when in the final step we
compare i with all the clauses j with j    i  we will never find that j    i for j   i  nor
that j    i     j for some j   i  otherwise  would not be a prime implicate  it follows
then that i remains in the set candidates which is returned by the algorithm  we have
thus shown that the set of formulae output by genpi on input  is precisely the set of
prime implicates of  
theorem    the algorithm genpi always terminates and outputs exactly the set of prime
implicates of the input formula 
proof  follows directly from lemmas      and      
theorem    the length of the smallest clausal representation of a prime implicate of a
formula is at most single exponential in the length of the formula 
proof  prime implicates generated by genpi can have at most     disjuncts as there are
at most     terms in dnf      by lemma     moreover  each disjunct has length at most
     also by lemma      this gives us a total of          symbols  to which we must
add the at most        disjunction symbols connecting the disjuncts  we thus find that
the length of the smallest representation of a prime implicate of a formula  is at most
                    
theorem    the length of the smallest clausal representation of a prime implicate of a
formula can be exponential in the length of the formula 
proof  consider the formula
 

n
 

  ai     ai    

i  

and the clause
 

 

 j       jn

  a  j   a  j        an jn  

      n

where ak l    am p whenever k    m or l    p  it is not difficult to see that  and  are
equivalent  which means that  must be a prime implicate of   all that remains to be
shown is that any clause equivalent to  must have length at least     this yields the result
since  clearly has size exponential in n  whereas the length of  is only linear in n 
let  be a shortest clause which is equivalent to   as  is equivalent to   it follows
from theorem   that  is a disjunction of   literals and of inconsistent   literals  but
since  is assumed to be a shortest representation of   it cannot contain any inconsistent
  literals or any redundant   literals  since we could remove them to find an equivalent
shorter clause  so  must be of the form           m   where l     k whenever l    k 
now since       every disjunct  p must also imply   as  is a disjunction of   literals 
it follows from theorem   that every disjunct  p of  implies some disjunct  q of   but
that means that every  p must have length at least  n      since each p is a satisfiable
formula which implies a conjunction of n distinct propositional variables  we also know
that every disjunct  q of  implies some disjunct  p of  since        we now wish
   

fibienvenu

to show that no two disjuncts of  imply the same disjunct of    suppose that this is not
the case  that is  that there are distinct disjuncts    and    of  and some disjunct  p
of  such that        p and        p   now since    and    are distinct disjuncts 
there must be some i such that       ai   and       ai   or       ai   and       ai    
we know that  p     q for some q   and that every q implies either ai  or ai    so either
 p     ai  or  p     ai    but we know that the  q each imply either  ai   or  ai  
but not both  so one of    and    must not imply  p   this contradicts our earlier
assumption that        p and        p   so each disjunct of  must imply a distinct
disjunct of    we have thus demonstrated that  contains just as many disjuncts as  
as we have already shown that the disjuncts of  are no shorter than the disjuncts of   it
follows that          and hence           we conclude that every clause equivalent to 
has length at least     completing the proof 
for theorem     we will prove that the following clause
 
 
 q     qn c
 q       qn      n

is a prime implicate  with respect to both d  and d   of the formula


 

     b   b        b   b      

n
 

   i  bi   i  bi  

i  



n 
 

 i      bi   bi     bi     n      bn   bn    c  

i  

and moreover that there is no shorter way to represent  
the proof of theorem    makes use of the following lemmas 
lemma      let l        lm be a d  clause which implies q     qn a  where qi         and
a is a propositional variable  then l        lm  q     qn a 
proof  in the proof  we will make use of the fact that every d  clause is satisfiable  this
is very straightforwardly shown by structural induction  the base case is propositional
literals  which are clearly satisfiable  for the induction step  we consider a d  clause 
such that all its proper sub clauses are satisfiable  there are three possibilities  either 
is of the form    or    where  is a satisfiable d  clause  or a disjunction      of
satisfiable d  clauses   and     in all three cases  we find that  must also be satisfiable 
the proof of the lemma is by induction on n  when n      we have just l        lm    a 
according to theorem    every disjunct of l        lm must be either a or some unsatisfiable
formula  but we have shown in the previous paragraph that every d  clause is satisfiable 
so l        lm  a 
now suppose the result holds whenever n  k  and suppose that we have l        lm   
q     qk   a  for every li   we must have li    q     qk   a  and hence    li  q     qk   a  using
theorem    we arrive at the following four possibilities 
   

fiprime implicates and prime implicants in modal logic

 a     q     qk   a
 b  li  
 c  q      and li   li and li    q     qk   a
 d  q      and li   li and li    q     qk   a
we can eliminate case  a  since     q     qk   a for every string of modalities q     qk     we can
also eliminate  b  since all of the li must be satisfiable as they are d  clauses  we remark
that if  c  holds  then according to the induction hypothesis  li   q     qk   a  similarly  if
 d  holds  then li   q     qk   a  it follows then that each li is equivalent to q     qk   a  and
so l        lm  q     qk   a 
v
n   and let t    q  b  b      n
k
lemma
    
fix
 q
 
    
q
 

   
  
 
n
 
 
 
k     qk bk   
vn  k  
   bk   bk     bk     n      bn   bn    c    then t     r     rn c if and
k    
only if rk   qk for all    k  n 
proof  we begin by showing that for all    i  n    the formula
bi   bi   

n
 

n 
 

 ki  qk bk     

k i  

 ki   bk   bk      bk       ni   bn   bn    c 

k i

entails the formula ri      rn c just in the case that qi      qn   ri      rn  
the proof is by induction on i  the base case is i   n     we have
bn   bn   qn bn    bn   bn      bn        bn   bn    c     rn c

   

if and only if
bn   bn   qn bn   bn      bn   bn    c     rn c
if and only if  theorem    either
qn     and rn     and bn     bn   bn    c     c
or
qn   rn and bn   bn    bn   bn    c     c
as bn     bn   bn    c      c  we cannot have the first alternative  it follows then that
if equation     holds  then the second alternative must hold  in which case we get qn   rn  
as desired  for the other direction  we simply note that bn   bn    bn   bn    c     c
is a valid entailment  which means qn   rn implies equation     
next let us suppose that the above statement holds for all     j  i  n     and let us
prove the statement holds when i   j     then
bj   bj    

n
 

kj

 

qk bk     

k j

n 
 

 kj    bk   bk   bk    

k j 

  nj     bn   bn    c 

   rj    rn c
   

   

fibienvenu

if and only if one of the following holds 
 a  qj     and rj     and
bj    

n
 

n 
 

 kj  qk bk     

k j  

 kj   bk   bk     bk       nj   bn   bn    c 

k j

   rj      rn c

 b  qj   rj and
bj   bj   

n
 

n 
 

 kj  qk bk     

k j  

 kj   bk   bk     bk      nj   bn   bn    c 

k j

   rj      rn c

we will first show that the entailment in  a  does not hold  consider the model m  
hw  r  vi defined as follows 
 w    wj        wn  
 r     wj   wj            wn    wn   
 v c  w    f alse for all w  w
 for w    wj   v bk   w    true if and only if w   wk
 v bk   wj     true if and only if k   j   
notice that since each world  excepting wn   has exactly one successor  the    and  quantifiers have the same behaviour  except at wn    it can easily be verified that m  wj
satisfies the left hand side of the abovev
entailment for any tuple qj      qn   we have m  wj   
bj  by definition  we have m  wj    nk j    kj  qk bk because m  wk    bk for k    j 
vn  kj
we have m  wj    k j
    bk   bk     bk     since m  wj     bj and m  wk     bk  for
k    j  and finally we have m  wj     nj   bn   bn    c  since wn     bn    however  the
right hand side rj      rn c is not satisfied at wj   the only world accessible from wj in n  j
steps is wn which does not satisfy c 
we have just shown that case  a  cannot hold  which means that equation     holds if
and only if  b  does  but if we apply the induction hypothesis to the entailment in  b   we
find that it holds just in the case that qj      qn   rj      rn   it follows then that equation    
if and only if qj    qn   rj    rn   as desired  this completes our proof of the above statement 
we now proceed to the proof of the lemma  by theorem   
 q   b   b      

n
 

n 
 

 k qk bk     

k  

 k      bk   bk     bk     n      bn   bn    c  

k  

    r     rn c

holds just in the case that
q   b   b      

n
 

k  

 k  qk bk   

n 
 

 k    bk   bk     bk     n    bn   bn    c  

k  

   r     rn c
   

fiprime implicates and prime implicants in modal logic

which in turn holds if and only if one of the following statements holds 
 i  q      and r      and
 

n
 

n 
 

 k  qk bk     

k  

 k    bk   bk     bk       n    bn   bn    c     r     rn c

k  

 ii  q    r  and
b   b    

n
 

k  

n 
 

 k  qk bk     

 k    bk   bk     bk       n    bn   bn    c 

k  

   r     rn c

we remark that if we set j     in  a  above  then the left hand side of the entailment in  i 
is logically weaker than that in  a   and the right hand side matches that in  a   as we have
already shown that the entailment in  a  does not hold  it follows that the entailment in
 i  cannot hold either  thus  we find that the desired entailment relation in the statement
of the lemma holds if and only if  ii  does  this completes the proof since we have already
shown in the induction above that the entailment in  ii  holds if and only if q     qn   r     rn  
i e   ii  is true just in the case that q     qn   r    rn  
lemma      there is no d  clause equivalent to  and with strictly smaller size than  
proof  let  be a d  clause which is equivalent to   suppose furthermore that  is a
shortest such clause  as  is non tautologous and contains only   literals as disjuncts  it
follows that every disjunct of  must be either unsatisfiable or a   literal  cf  theorem    
but d  clauses are always satisfiable  cf  proof of lemma        so  must contain only
  literals 
since       every disjunct  l of  must imply some disjunct  q     qn c of   also 
every disjunct  l of  must be implied by some disjunct  q     qn c of   since otherwise we
could remove  l from  while preserving the equivalence between  and   
it follows then that each disjunct of  is implied by some disjunct of  and implies
some disjunct of   but since the disjuncts of  do not imply each other  because of lemma
       it follows that each disjunct of  is equivalent to some disjunct of   and moreover
that every disjunct of  is equivalent to some disjunct of   
this completes the proof since it is clear that the disjuncts  q     qn c of  cannot be
more compactly represented 
our proof works equally well for d   since every d  clause is also a d  clause 
theorem    if prime implicates are defined using either d  or d   then the length of
the smallest clausal representation of a prime implicate of a formula can be exponential in
the length of the formula 
proof  we begin with definition d   let  and  be as defined on page      we begin by
distributing  over  in order to transform  into an equivalent disjunction of d  terms 
 

tq       qn
 q       qn      n

   

fibienvenu

where tq       qn is equal to
 q   b   b      

n
 

  i q i bi   

n 
 

 i      bi   bi     bi     n      bn   bn    c  

i  

i  

by lemma       tq       qn     q     qn c  and hence tq       qn      we thus have      
we now show that there is no stronger clause with respect to d  which is implied by
  let  be a d  clause such that           as  is a non tautologous disjunction of
  literals  we know from lemma   that every disjunct of  must be of the form  l where
l is a d  clause such that l    r     rn c for some quantifier string r     rn   but according to
lemma       if l    r     rn c  then l is equivalent to r     rn c  it follows that  is equivalent
to a clause having only disjuncts of the forms  r     rn c 
as        it must be the case that each of the terms tq       qn implies    or equivalently
tq       qn        as we have shown above that the disjuncts of  are all   literals  it
follows from theorem   that each term implies some disjunct of    moreover  we know
from the preceding paragraph that each of the disjuncts of  is equivalent to some formula
of the form  r     rn c  by lemma       the only formula of this type which is implied by
tq       qn is the formula  q     qn c  this means that for every tuple of quantifiers  q         qn   
there is a disjunct of  which is equivalent to  q     qn c  it follows that every disjunct of
 is equivalent to some disjunct of    giving us        we can thus conclude that  is a
prime implicate of  
this completes the proof  since we have already shown in lemma      that there is no
shorter d  clause which is equivalent to  than  itself 
the above proof also works for definition d  since every d  clause is also a d  clause 
in particular this means that any d  clause which is a prime implicate with respect to d 
is also a prime implicate with respect to d   and that any d  clause which is shortest
among all equivalent d  clauses is also shortest among d  clauses 
theorem    the number of non equivalent prime implicates of a formula is at most double
exponential in the length of the formula 
proof  we know from theorem    that every prime implicatewof  is equivalent to some
clause returned by genpi  every such clause is of the form t dnf      t where t 
 t    as there can be at most     terms in dnf      by lemma     these clauses can have
no more than     disjuncts  moreover  there are at most     choices for each disjunct t
since the cardinality of  t   is bounded above by the size of t   which we know from lemma
  
    to be no more than      it follows then that there are at most        clauses returned
  
by genpi  hence at most        non equivalent prime implicates of  
theorem    the number of non equivalent prime implicates of a formula may be double
exponential in the length of the formula 
proof  let n be some natural number  and let a     a          an    an    b     b     b          bn   
bn  be  n distinct propositional variables  consider the formula  defined as
n
 

   ai    bi       ai    bi    

i  

   

fiprime implicates and prime implicants in modal logic

it is not hard to see that there will be  n terms in dnf       corresponding to the  n ways
of deciding for each i           n  whether to take the first or second disjunct  each term
t  dnf      will be of the form
n
 

  ai f  i t     bi f  i t    

i  

where f  i  t           for all i  for each t   denote by d t   the set of formulae    a f  i t   
b  f    t         bn f  n t           i  n   now consider the set of clauses c defined as
 

 

dt   dt  d t   

t dnf     
n

notice that there are n  clauses in c since each clause corresponds to a choice of one of
the n elements in d t   for each of the  n terms t in dnf       this number is double
exponential in    since the length of  is linear in n  in order to complete the proof  we
show that  i  all of the clauses in c are prime implicates of  and  ii  that the clauses in c
are mutually non equivalent 
we begin by showing that         for every pair of distinct elements   and   in c 
this immediately gives us  ii  and will prove useful in the proof of  i   let   and   be
distinct clauses in c  as   and   are distinct  there must be some term t  dnf     
for which   and   choose different elements from d t    let d  be the element from
d t   appearing as a disjunct in     let d  be the element in d t   which is a disjunct in
    and let aj k be the a literal which appears in d   and hence not in d     consider the
formula      aj k  b  k        bn kn    where the tuple  k         kn   is just like the tuple
associated with t except that the  s and  s are inversed  clearly d    is consistent 
since the variables in  do not appear in d    but  is inconsistent with every disjunct in
    since by construction every disjunct in   contains a literal whose negation appears in
  it follows that       but         and hence          
we now prove  i   let  be a clause in c  and let  be a prime implicate of  which
implies   by theorem     we know that  must be equivalent to one of the clauses output
by genpi  and more specifically to a clause output by genpi which is a disjunction of
  literals  because of theorem     we remark that the set c is composed of exactly those
candidate clauses which are disjunctions of   literals  so  must be equivalent to some
clause in c  but we have just shown that the only element in c which implies  is  itself 
it follows that     which means that  is a prime implicate of  
theorem    if prime implicates are defined using either d  or d   then the number of
non equivalent prime implicates of a formula may be double exponential in the length of the
formula 
proof  let  and  be as defined on page      set  equal to the formula obtained from 
by replacing c in the last conjunct of  by c  d  set  equal to the set of clauses that can
be obtained from  by replacing zero or more occurrences of c by d  for example  if n     
n
then       c    c    d    c    c    d    d    d   there are    elements in
 since we choose for each of the  n disjuncts of  whether to change c into d  we intend
   

fibienvenu

to show that the clauses in  are all pairwise non equivalent prime implicates of    the
proof that every element in  is indeed a prime implicate of   with respect to both d 
and d   proceeds quite similarly to the proof that  is a prime implicate of   see proof
of theorem      so we will not repeat it here  instead we will show that all of the elements
in  are pairwise non equivalent  to do so  we consider any two distinct elements  and 
of   since  and  are distinct  there must be some string of quantifiers q     qn such that
 has a disjunct  q     qn      c  d   which is not a disjunct of   now if       then we
would have  q     qn       and hence  q     qn      r     rn  for some disjunct r     rn  of  
but by using lemma       we see that this can only happen if r     rn   q     qn and      
i e  if  q     qn is a disjunct of   this is a contradiction  so we must have        it follows
that the elements of  are pairwise non equivalent  and hence that  possesses a double
exponential number of prime implicates 
theorem    there exists an algorithm which runs in single exponential space in the size
of the input and incrementally outputs  without duplicates  the set of prime implicates of
the input formula 
proof  let the sets t and candidates and the function  be defined as in figure   
we assume that t is ordered  t    t         tn    for each ti  t   we let max i denote
the number of elements in  ti    and we assume an ordering on the elements of  ti   
 ti      i          i max i    notice that the tuples in         max                    max n   can be
ordered using the standard lexicographic ordering  lex    a         an    lex  b         bn   if and
only if there is some    j  n such that aj   bj and ak  bk for all    k  j     now
set maxindex   ni   maxi   and let f           max                    max n             maxindex  
be the bijection defined as follows  f  a         an     m if and only if  a         an   is the m th
tuple in the lexicographic ordering of         max                    max n    we will denote by
m the unique clause of form   a        n an such that f  a         an     m  we remark
that given an index m           maxindex   and the sets  t           tn    it is possible to
generate in polynomial space  in the size of the sets  t           tn    the clause m   we
make use of this fact in our modified version of algorithm genpi  which is defined as follows 
function itergenpi  
    same as in genpi 
    same as in genpi 
    for i     to maxindex   if j     i for all j   i and either j     i or i    j
for every i   j  maxindex   then output i  
the proofs of termination  correctness  and completeness of itergenpi are very similar to corresponding results for genpi  theorem      so we will omit the details  we
will instead focus on the spatial complexity of itergenpi  the first step of itergenpi
clearly runs in single exponential space in     since deciding the satisfiability of  takes
only polynomial space in     and generating the elements in dnf      takes at most
single exponential space in     refer to lemma      step   also uses no more than singleexponential space in     since each of the sets  t   associated with a term ti  t has
polynomial size in ti   finally  for step    we use the above observation that the generation of a given i from its index i can be done in polynomial space in the size of the sets
   

fiprime implicates and prime implicants in modal logic

 t           tn    and hence in single exponential space in     this is sufficient since for
the comparisons in step    we only need to keep two candidate clauses in memory at any
one time  and deciding whether one candidate clause entails another can be accomplished
in single exponential space  since both clauses have single exponential size in     
theorem    prime implicate recognition is pspace hard 
proof  the reduction is simple  a formula  is unsatisfiable if and only if   a  a  is a
prime implicate of   this suffices as the problem of checking the unsatisfiability of formulae
in k is known to be pspace complete 
we will need the following two lemmas for theorem    
lemma      let  be a formula from k  and let            k            m 
          n  j propositional literals  be a non tautologous clause  suppose furthermore
that there is no literal l in  such that       l   if       then         k 
                 k     and           n                       m     and for every
i    i          m             i     
proof  we will prove the contrapositive  if         k                    k     or
          n                        m     or there is some i for which   i    
     m              i      then        we will only consider the case where
     because if       then we immediately get       
let us first suppose that      k                k      since       we must also
have             k            k   so      k is an implicate of             k    
as         k is known not to be a prime implicate of                 k     it follows that
there must be some clause  such that                 k                   k        now
consider the clause                m            n   we know that      since
                k          and that      because             k   we also have      
since  must be equivalent to a propositional clause  by theorem    and the propositional
part of   namely         k   does not imply    it follows then that                
so       
next suppose that           n                        m      now           n  
must be an implicate of                   m    since we have assumed that      
as           n   is not a prime implicate of                   m     it follows that
there is some  such that                   m                     n          let
        k         n   because of theorem    we know that  is a disjunction
of   literals  so according to theorem   we must have       since           n         
we also know that      since                   m        and that      since
              n    that means that                 so       
finally consider the case where there is some i for which   i          m    
         i      we know that      and hence that         i        i  
moreover  since       i        j for all j  we have         i         i 
        m    thus  if   i          m              i      it must mean
that there is some  such that         i             i          m         
by assumption   is not a tautology  so   i          m   cannot be a tautology
   

fibienvenu

either  as       i          m   and   i          m   is not a tautology 
it follows from theorem   that  is equivalent to some formula           p   let
           k            m            i              p     i          n  
as         i                 p   it must be the case that        also  we know
that there can be no j such that i    j          m because otherwise we would have
i          m    j and hence   i          m                p   similarly 
there can be no k    i such that  i      k          m   because this would mean
that        i    contradicting our assumption that there are no superfluous disjuncts
in   it follows then by theorem   that         thus                  which means
      
lemma      let  be a formula of k  and let         k        m        n
 j propositional literals  be a non tautologous clause  suppose furthermore that there is no
literal l in  such that       l   then if        either         k         
          k     or           m                 k               m           n 
        m     or   i          m              i     for some i 
proof  we will only consider the case where      because if       then we immediately
get the result  suppose then that       and       by definition    there must be some
         o            p            q such that                 since        
by proposition   we know that either         k             o or         m             p
or there is some i for which i     j          p for all j 
we begin with the case where         k             o   as       by theorem   
     p         m and for every i there is some j such that i         m j   it
follows then  also by theorem    that              o        m        n  
and hence that             k            o   as      o         k          o  
we have found an implicate of                 k    which is stronger than         k   so
        k                    k     
next suppose that      m          p   as       it follows from theorem   that

     o         k and that for every i there is some j such that i         m j  
we thereby obtain                 k            p               m        
  n          m    from this  we can infer that            k              
m           n          m                 p              m               p  
as           m            m    it follows that           m                
k               m           n          m     
finally suppose that i     j          p for all j and furthermore that         m   

        p  we have already shown the result holds when         m            
p    now   i          m   is an implicate of         i     so to show that
  i          m   is not a prime implicate of         i      we must find some
stronger implicate  consider the set s    s           q    s    i          m and s    
k      m for k    i   we note that there must be at least one element in s as we have
assumed           i    now since         o            k           p            m  for
     m   and s    s for s  s  we
every s   s there is some r    i such that sw   r    w

get      w
        k        m   j  i  j    w
ss  s    it follows that   

  i       ss   s      m    which means that ss   s      m   is an
   

fiprime implicates and prime implicants in modal logic

w
implicate of     i     moreover  ss   s      m        i      m  
since by construction s    i          m for every s  s 
w
it remains to be shown that   i          m       ss   s          m   
suppose
for a contradiction that the contrary holds  then   i          m     
w

ss   s          m    so by theorem    there must be some s  s for which
i          m    s          m   but then i    s          m   and thus
i    s          p since we have assumed         m            p   this contradicts
our earlier assumption that w
i     j          p for all j  thus  we have shown that
  i          m       ss   s          m    so   i          m    
         i     
theorem    let  be a formula of k  and let         k        n        m
 j propositional literals  be a non tautologous clause such that  a  i  i          n
for all i  and  b  there is no literal l in  such that       l   then      if and only
if the following conditions hold 
           k                   k    
     i          n             i     for every i
             n                       n    
proof  the forward direction was shown in lemma       the other direction follows from
lemma      together with the hypothesis that i  i          n for all i  which
ensures that            k               m           n          m    
                  n     
theorem    let  be a formula of k  and let  be a non tautologous propositional clause
such that      and such that there is no literal l in  such that       l   then     
if and only if          l  for all l in  
proof  consider a formula  and a non tautologous propositional clause  such that     
and such that there is no literal l in  such that       l   suppose that         l 
for some l in   as we know that        l   it follows that     l  is an implicate of
 which is strictly stronger than   so  is not a prime implicate of   for the other
direction  suppose that        then it must be the case that there is some clause 
such that                since       it follows from theorem   that each literal in 
is a propositional literal of  or is inconsistent  if all of the literals in  are inconsistent 
then both  and  must be inconsistent  so clearly         l  for every l in   otherwise 
 is equivalent to a propositional clause  and more specifically to a propositional clause
containing only those literals appearing in   since        as  is strictly stronger than  
there must be some literal l in  which does not appear in   but that means         l 
and so         l   completing the proof 
theorem    let  be a formula of k  and let      be a non tautologous clause such
that       then      if and only if there exists some term t dnf     such that
    t   where t is the conjunction of formulae  such that   is in t  
   

fibienvenu

proof  let  be some formula  and let      be a non tautologous clause such that      
for the first direction  suppose that there is no term t dnf      such that     t   where
t is the conjunction of formulae  such that   is in t   there are two cases  either there
are no terms in dnf      because  is unsatisfiable  or there are terms but none satisfy the
condition  in the first case    is not a prime implicate of   since any contradictory
clause
w
 e g    a  a   is stronger  in the second case  consider the clause    t  t   where
t is the conjunction of formulae  such that   is in t   now for every t we must
w have
 t       otherwise we would have t        and hence
w         moreover      t  t
since t     t for every t   but by theorem          t  t since      t for all t   so
we have                 which means that  is not a prime implicate of  
for the other direction  suppose that   is not a prime implicate of  and that       
then
must have t      for all t dnf      
w dnf      is non empty  as        we w
so t  t also implies    we now show
  we let
w that t  t is a primewimplicate of w
 be some implicate of  which implies t  t   now since     t  t and t  t is
non tautologous  it follows from theorem   that             n for some formulae i  
as       we must have t              n for all t w
dnf       but that can only
wbe the
case if  t              n for all t   which w
means t  t              n   as t  t
implies every implicate w
of  that implies it  t  t must be a prime implicate of   but
this means that       t  t   since we have assumed that   is not a prime implicate
of   it follows from theorem   that      t for all t dnf      
in order to show theorem    we will need the following lemmas 
lemma      if   is an implicate of  which is not a prime implicate  the algorithm
test pi returns no on input       
proof  suppose that   is not a prime implicate of   if  is unsatisfiable  then  must
be satisfiable  so we will return no in the first step  if  is satisfiable  then since we have
assumed that   is an implicate of   there must be some clause  such that          
but         as        it follows from theorem   that  is equivalent to a disjunction
of   formulae  and hence to some clause     
we know from lemma    that  is equivalent to the disjunction of terms in dnf      
it must thus be the case that ti       for all ti  dnf       since each ti is a satisfiable
conjunction of propositional literals and    and   formulae  it follows that there exists a set
  i    i           i k i    of conjuncts of ti such that   i i      i k i            otherwise
ti would fail to imply      moreover  all of the elements of   i    i           i k i    must
appear in the nnf of  outside modal operators  so the formulae i   i          i k i  must all
be elements of the set x   it is immediate that both
 

 
 i  i         i k i              
i

and
       

 

 i  i         i k i   

i

   

   

fiprime implicates and prime implicants in modal logic

w
the latter implies that the formula       i  i  i         i k i     must be consistent 
which means that
 
 
     i  i         i k i         i  i         i k i   
i

i

must be consistent as well  but then itvmust be the case that we can select for each i some
i   i   i          i k i    such that   i i is consistent  let s be the set of i   the set
s satisfies the condition of the algorithm since 
 sx
     

w

s

  because we know  

v

i

i to be consistent 

 for each ti  dnf       the conjuncts  i    i           i k i  of ti are such that 
  i   i          i k i     s      since s contains i   i   i          i k i    
   i  i         i k i          follows from     above 
since there exists a set s  x satisfying these conditions  the algorithm returns no 
lemma      if the algorithm test pi returns no on input        then   is not a
prime implicate of  
proof  suppose test pi returns no on input        if this happens during the first
step  it must be the case that  is unsatisfiable and   is unsatisfiable  in which case   is
not a prime implicate of   the other possibility is that the algorithm returns no in step   
which means w
there must be some s  x satisfying 
 a       s 
 b  for each ti  dnf       there exist conjuncts  i    i           i k i  of ti
such that 
 i   i   i          i k i     s    
 ii    i  i         i k i        
w
let  be the clause i   i  i   w
      i k i 
w    we remark that for each ti   we have ti   
  i i      i k i     and hence
t
  
i
i
i   i i      i k i    
w
w from the definition of
dnf       we also have   i ti   it immediately follows that     i   i i      i k i   
and hence w
      from    b   ii   we have that   i  i         i k i         for every i 
and hence i   i  i         i k i        which yields        from    b   i   we have
that  i   i          i k i     s     and hence that for every
i there is some   s w
such that
w
i  i        i k i w     from this we can infer that i   i  i        i k i       w
s   
and hence       s   but we know from    a  and theorem   that         s  
it follows then that         putting all this together  we see that there exists a clause 
such that           but         and hence that   is not a prime implicate of  
theorem    let  be a formula  and let   be an implicate of   then the algorithm
test pi returns yes on input       if and only if   is a prime implicate of  
   

fibienvenu

proof  it is clear that test pi terminates since unsatisfiability testing and the nnf transformation always terminate  and there are only finitely many s and ti   lemmas      and
     show us that the algorithm always gives the correct response 
theorem    the algorithm test pi runs in polynomial space 
proof  we remark that the sum of the lengths of the elements in x is bounded by the
length of the formula nnf    and hence by lemma    the sum of thew lengths of the
elements of a particular s  x cannot exceed      testing whether      s  can thus
be accomplished in polynomial v
space in the length of  and  as it involves testing the
satisfiability of the formula   s  whose length is clearly polynomial in  and  
now let us turn to step    b   we notice that it is not necessary to keep all of the ti in
memory at once  since we can generate the terms ti one at a time using only polynomial
space by lemma     by lemma     the length of any ti in dnf      can be at most     
it follows that checking whether  i   i          i k i     s      or whether   i  i        
i k i         can both be accomplished in polynomial space in the length of  and   we
conclude that the algorithm test pi runs in polynomial space 
in order to show theorem     we use the following lemmas 
lemma      if  is a clause that is not a prime implicate of   then testpi outputs no
on this input 
proof  let us begin by considering a formula  which is a clause but that is not a prime
implicate of   there are two possible reasons for this  either  is not an implicate of   or
it is an implicate but there exists some stronger implicate  in the first case  testpi returns
no in step    as desired  we will now focus on the case where  is an implicate but not a
prime implicate  we begin by treating the limit cases where one or both of  and  is a
tautology or contradiction  given that we know  to be a non prime implicate of   there
are only two possible scenarios  either      and      or      and        in both cases 
the algorithm returns no in step   
if  is an implicate of   and neither  nor  is a tautology or contradiction  then the
algorithm will continue on to step    in this step  any redundant literals will be deleted
from   and if  contains   literals  we add an extra disjunct to the   literals so that 
satisfies the syntactic requirements of theorem     let       k            m     
      n be the clause  at the end of step   once all modifications have been made  as
the transformations in step   are equivalence preserving  theorem     the modified  is
equivalent to the original  so  is still a non tautologous non prime implicate of   this
means  and  now satisfy all of the conditions of theorem     it follows then that one of
the following holds 
 a          k                    k   
 b    i          n              i     for some i
 c            n                        n    
   

fiprime implicates and prime implicants in modal logic

suppose that  a  holds  now         k is a non tautologous propositional clause implied
by                 k    which contains no redundant literals  this means that      
          k    and      k satisfy the conditions of theorem     according to this theorem 
as         k                    k     then there must be some j such that      
          k               j   j         k   this means that         j    so the algorithm
returns no in step   
suppose next that  b  holds  and let i be such that   i          n       
      i      by theorem     this means that there is no t dnf      such that
  i          n   entails the conjunction of   formulae conjuncts of t   it follows that
the algorithm returns no in step   
finally consider the case
then in step   
wm where neither  a  nor  b  holds but  c wdoes 
m
we will call test pi    i   i                      m      as    i   i   is not a prime
implicate of               m     and we have shown test pi to be correct  theorem
     test pi will return no  so testpi will return no as well  as we have covered each of
the possible cases  we can conclude that if  is a clause that is not a prime implicate of  
then testpi outputs no 
lemma      if testpi outputs no with input      and  is a clause  then  is not a
prime implicate of  
proof  there are   different ways for testpi to return no  these occur in steps            
and     let us consider each of these in turn  the first way that the algorithm can return
no is in step   if we find that        this is correct since  cannot be a prime implicate if
it is not a consequence of   in step    we return no if  is unsatisfiable but  is not  or if
 is a tautology but  is not  this is also correct since in both cases  cannot be a prime
implicate since there exist stronger implicates  any contradictory clause if     and any
non tautologous implicate of  if      in step    we may modify   but the resulting
formula is equivalent to the original  and so it is a prime implicate just in the case that the
original clause was  let       k            m            n be the clause at the end
of step    now in step    we return no if we find some propositional literal l in  for which
      l   now since in step    we have removed redundant literals from   we can be sure
that     l  is strictly stronger than   so we have         l      and          l   which
means that  is not a prime implicate of   we now consider step   of testpi  in this step 
we return no if for some disjunct  i there is no term t in dnf        i     for which
  i          m   entails the conjunction of   literals in t   according to theorem    
this means that   i          m   is not a prime implicate of         i     which
means that  is not a prime implicate
w of  by theorem       in this step  we return no
if test pi returns no on input     ki   i                      m      by theorem    
w
we know that this happens just in the case that    ki   i   is not a prime implicate of
                  m     it follows from theorem    that  is not a prime implicate
of  
theorem    the algorithm testpi always terminates  and it returns yes on input   
  if and only if  is a prime implicate of  
   

fibienvenu

proof  the algorithm testpi clearly terminates because steps   to   involve a finite number
of syntactic operations on  and a finite number of entailment checks  moreover  the call
to test pi in step   is known to terminate  theorem      correctness and completeness
have already been shown in lemmas      and      
we make use of the following lemma in the proof of theorem    
lemma      the algorithm testpi provided in figure   runs in polynomial space in the
length of the input 
proof  it is clear that steps   through   can be carried out in polynomial space in the length
of the input  since they simply involve testing the satisfiability of formulae whose lengths are
polynomial in        step   can also
w be carried out in polynomial space since by theorem
   deciding whether the formula   w m
i   i   is a prime implicate of                 m    
takes only polynomial space in     m
i   i                         m       and hence in
         we can thus conclude that the algorithm testpi runs in polynomial space in the
length of the input 
theorem    prime implicate recognition is in pspace 
proof  we have show in theorem    that testpi always terminates and returns yes whenever the clause is a prime implicate and no otherwise  this means that testpi is a decision
procedure for prime implicate recognition  since the algorithm has been shown to run in
polynomial space  lemma        we can conclude that prime implicate recognition is in
pspace 
corollary    prime implicate recognition is pspace complete 
proof  follows directly from theorems    and    

references
adjiman  p   chatalic  p   goasdoue  f   rousset  m  c     simon  l          distributed
reasoning in a peer to peer setting  application to the semantic web  journal of
artificial intelligence research             
baader  f   mcguiness  d  l   nardi  d     patel schneider  p   eds            the description logic handbook  cambridge university press 
bienvenu  m          prime implicates and prime implicants in modal logic  in proceedings
of the twenty second conference on artificial intelligence  aaai     pp         
bienvenu  m          prime implicate normal form for alc concepts  in proceedings of the
twenty third conference on artificial intelligence  aaai     pp         
bienvenu  m          consequence finding in modal logic  ph d  thesis  universite de
toulouse 
bittencourt  g          combining syntax and semantics through prime form representation  journal of logic and computation               
   

fiprime implicates and prime implicants in modal logic

blackburn  p   de rijke  m     venema  y          modal logic  cambridge university
press 
blackburn  p   van benthem  j     wolter  f   eds            handbook of modal logic 
elsevier 
brandt  s     turhan  a          an approach for optimized approximation  in proceedings
of the ki      workshop on applications of description logics  kidlws    
cadoli  m     donini  f  m          a survey on knowledge compilation  ai communications                   
cialdea mayer  m     pirri  f          propositional abduction in modal logic  logic
journal of the igpl                
darwiche  a     marquis  p          a knowledge compilation map  journal of artificial
intelligence research             
de kleer  j   mackworth  a  k     reiter  r          characterizing diagnoses and systems 
artificial intelligence             
donini  f  m          the description logic handbook  chap  complexity of reasoning 
cambridge university press 
donini  f  m   lenzerini  m   nardi  d   hollunder  b   nutt  w     marchetti spaccamela 
a          the complexity of existential qualification in concept languages  artificial
intelligence             
eiter  t     makino  k          on computing all abductive explanations  in proceedings of
the eighteenth national conference on artificial intelligence  aaai     pp       
enjalbert  p     farinas del cerro  l          modal resolution in clausal form  theoretical
computer science              
garey  m  r     johnson  d  s          computers and intractability  a guide to the theory
of np completeness  w  h  freeman 
ghilardi  s   lutz  c     wolter  f          did i damage my ontology  a case for conservative extensions in description logics  in proceedings of the tenth international
conference on principles of knowledge representation and reasoning  kr     pp 
       
giunchiglia  f     sebastiani  r          a sat based decision procedure for alc  in
proceedings of the fifth international conference on principles of knowledge representation and reasoning  kr     pp         
kusters  r     molitor  r          approximating most specific concepts in logics with
existential restrictions  ai communications               
ladner  r          the computational complexity of provability in systems of modal propositional logic  siam journal of computing                
lakemeyer  g          a logical account of relevance  in proceedings of the fourteenth
international joint conference on artificial intelligence  ijcai     pp         
   

fibienvenu

lang  j   liberatore  p     marquis  p          propositional independence  formulavariable independence and forgetting  journal of artificial intelligence research     
       
marquis  p       a   contribution a letude des methodes de construction dhypotheses en
intelligence artificielle  in french  universite de nancy i 
marquis  p       b   extending abduction from propositional to first order logic  in proceedings of fundamentals of artificial intelligence research workshop  pp         
marquis  p          handbook on defeasible reasoning and uncertainty management systems  vol     chap  consequence finding algorithms  pp         kluwer 
pagnucco  m          knowledge compilation for belief change  in proceedings of the
nineteenth australian conference on artificial intelligence  ai     pp       
papadimitriou  c          computational complexity  addison welsey 
przymusinski  t          an algorithm to compute circumscription  artificial intelligence 
             
ramesh  a     murray  n          computing prime implicants implicates for regular logics 
in proceedings of the twenty fourth ieee international symposium on multiplevalued logic  pp         
schild  k          a correspondence theory for terminological logics  preliminary report 
in proceedings of the twelth international joint conference on artificial intelligence
 ijcai     pp         
younger  d  h          recognition and parsing of context free languages in time n   
information and control                 

   

fi