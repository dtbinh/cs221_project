journal of artificial intelligence research                 

submitted        published      

interactive cost configuration over decision diagrams
henrik reif andersen

hra configit com

configit a s
dk      copenhagen  denmark

tarik hadzic

t hadzic  c ucc ie

cork constraint computation centre
university college cork
cork  ireland

david pisinger

pisinger man dtu dk

dtu management
technical university of denmark
dk      kgs  lyngby  denmark

abstract
in many ai domains such as product configuration  a user should interactively specify
a solution that must satisfy a set of constraints  in such scenarios  offline compilation
of feasible solutions into a tractable representation is an important approach to delivering efficient backtrack free user interaction online  in particular  binary decision diagrams
 bdds  have been successfully used as a compilation target for product and service configuration  in this paper we discuss how to extend bdd based configuration to scenarios
involving cost functions which express user preferences 
we first show that an efficient  robust and easy to implement extension is possible if
the cost function is additive  and feasible solutions are represented using multi valued decision diagrams  mdds   we also discuss the effect on mdd size if the cost function is
non additive or if it is encoded explicitly into mdd  we then discuss interactive configuration in the presence of multiple cost functions  we prove that even in its simplest form 
multiple cost configuration is np hard in the input mdd  however  for solving two cost
configuration we develop a pseudo polynomial scheme and a fully polynomial approximation scheme  the applicability of our approach is demonstrated through experiments over
real world configuration models and product catalogue datasets  response times are generally within a fraction of a second even for very large instances 

   introduction
interactively specifying a solution that must satisfy a number of combinatorial restrictions
is an important problem in many ai domains related to decision making  from buying a
product online  selling an insurance policy to setting up a piece of equipment  solutions
are often modeled as assignments to variables over which constraints are imposed  when
assigning variables without sufficient guidance  a user might be forced to backtrack  since
some of the choices he made cannot be extended in a way that would satisfy all of the
succeeding constraints  to improve the usability of interaction it is therefore important
to indicate to a user all values that participate in at least one remaining solution  if a
c
    
ai access foundation  all rights reserved 

fiandersen  hadzic    pisinger

user is assigning only such values he is guaranteed to be able to reach any feasible solution
while never being forced to backtrack  we refer to the task of computing such values
as calculating valid domains  cvd   since this is a computationally challenging  np hard 
problem  and short execution times are important in an interactive setting  it has been
suggested to compile offline  prior to user interaction  the set of all feasible solutions into a
representation form that supports efficient execution of cvd during online interaction 
mller  andersen  and hulgaard        and hadzic  subbarayan  jensen  andersen 
mller  and hulgaard        investigated such an approach by using binary decision diagrams  bdds  as a compilation target  bdds are one of the data structures investigated in
the knowledge compilation community which preprocess original problem formulations into
more tractable representations to enhance solving the subsequent tasks  cvd is just one of
such tasks occurring in the configuration domain  knowledge compilation has been successfully applied to a number of other areas such as planning  diagnosis  model checking etc 
beside bdds  a number of other structures  such as various sublanguages of negation normal forms  nnfs   darwiche   marquis         and or diagrams  mateescu  dechter   
marinescu         finite state automata  vempaty        amilhastre  fargier    marquis 
      and various extensions of decision diagrams  drechsler        wegener        meinel
  theobald        are used as compilation targets  some of them are suitable for interactive configuration as well  in particular  vempaty        suggested compiling constraints
into an automaton  however  bdds are the most investigated data structures with a tool
support unrivaled by other emerging representations  there are many highly optimized
open source bdd packages  e g   somenzi        lind nielsen        that allow easy and
efficient manipulation of bdds  in contrast  publicly available  open source compilers are
still being developed for many newer representations  in particular  the application of bdds
to configuration resulted in a patent approval  lichtenberg  andersen  hulgaard  mller   
rasmussen        and the establishment of the spinoff company configit a s   
the work in this paper is motivated by decision making scenarios where solutions are
associated with a cost function  expressing implicitly properties such as price  quality  failure probability etc  a user might prefer one solution over another given the value of such
properties  a natural way in which a user expresses his cost preferences in a configuration
setting is to bound the minimal or maximal cost of any solution he is willing to accept 
we therefore study the problem of calculating weighted valid domains  wcvd   where we
eliminate those values that in every valid solution are more expensive than a user provided
maximal cost  we present a configurator that supports efficient cost bounding for a wide
class of additive cost functions  our approach is easily implementable and scales well for
all the instances that were previously compiled into bdds for standard interactive configuration  the cornerstone of our approach is to reuse the robust compilation of constraints
into a bdd  and then extract a corresponding multi valued decision diagram  mdd   the
resulting mdd allows us to label edges with weights and utilize efficient shortest path algorithms to label nodes and filter expensive values on mdd edges  while our mdd extraction
technique is novel  labeling edges in a decision diagram is suggested in other works as well 
in its most generic interpretation  wilson         edges of a decision diagram can be labeled
with elements of a semiring to support algebraic computations relevant for probabilistic rea   http   www configit com

   

fiinteractive cost configuration over decision diagrams

soning  optimization etc  amilhastre et al         suggest labeling edges of an automaton to
reason abut optimal restorations and explanations  in general  many knowledge compilation
structures have their weighted counterparts  many of which are captured in the framework
of valued negation normal forms  vnnfs   fargier   marquis         these structures
are utilized for probabilistic reasoning  diagnosis  and other tasks involving reasoning about
real valued rather than boolean functions  some of them can in principle be used for wcvd
queries  but the public tool support for weighted variants is less available or is tailored for
tasks outside the configuration domain 
we further extend our approach to support valid domains computation in the presence
of multiple cost functions  a user often has multiple conflicting objectives  that should be
satisfied simultaneously  traditional approaches in multi criteria optimization  figueira 
greco    ehrgott        ehrgott   gandibleux        typically interact with a user in a
way that is unsuitable in a configuration setting  cost functions are combined in a single
objective and in each interaction step few non dominated solutions are sampled and displayed to a user  based on user selections a more adequate aggregation of costs is performed
before the next interaction step  we suggest a more configuration oriented interaction approach where domains are bounded with respect to multiple costs  we prove that this is a
particularly challenging problem  computing valid domains over an mdd in the presence of
two cost functions    wcvd  is np hard  even in the simplest extension of linear inequalities
with positive coefficients and boolean variables  despite this negative result  we provide
an implementation of   wcvd queries in pseudo polynomial time and space and develop a
fully polynomial time approximation scheme  fptas   we prove that no pseudo polynomial
algorithm and hence no fully polynomial approximation scheme exists for computing domains in the presence of arbitrarily many cost functions since that is an np hard problem
in the strong sense  finally  we demonstrate through experimental evaluation the applicability of both the wcvd and   wcvd query over large real world configuration models and
product catalogue datasets  to the best of our knowledge  we present the first interactive configurator supporting configuration wrt  cost restrictions in a backtrack free and
complete manner  this constitutes a novel addition to both existing product configuration
approaches as well as to approaches within multi criteria decision making  figueira et al  
      
the remainder of the paper is organized as follows  in section   we describe background
work and notation  in section   we describe our approach to implementing wcvd query over
an mdd while in section   we show how to compile such an mdd  in section   we discuss
configuring in the presence of multiple costs  in section   we present empirical evaluation
of our approach  in section   we describe related work and finally we conclude in section   

   preliminaries
we will briefly review the most important concepts and background 
    constraint satisfaction problems
constraint satisfaction problems  csps  form a framework for modeling and solving combinatorial problems  where a solution to a problem can be formulated as an assignment to
   

fiandersen  hadzic    pisinger

variables that satisfy certain constraints  in its standard form  csp involves only a finite
number of variables  defined over finite domains 
definition    csp  a constraint satisfaction problem  csp  is a triple  x  d  f   where
x is a set of variables  x            xn    d   d       dn is the cartesian product of their finite
domains d            dn and f    f         fm   is a set of constraints defined over variables x 
each constraint f is a function defined over a subset of variables xf  x called the scope
of f   it maps each assignment to the xf variables into        where   indicates that f is
satisfied and   indicates that f is violated by the assignment  the solution is an assignment
to all variables x that satisfies all constraints simultaneously 
formally  an assignment of values a            an to variables x            xn is denoted as a set
of pairs      x    a              xn   an     the domain of an assignment dom   is the set of
variables which are assigned  dom      xi   a  di   xi   a     and if all variables
are assigned  i e  dom     x  we refer to  as a total assignment  we say that a total
assignment  is valid if it satisfies all the rules  which is denoted as     f   a partial
assignment   dom    x is valid if it can be extended to a total assignment     that
is valid      f   we define the solution space sol as the set of all valid total assignments 
i e  sol           f  dom     x  
    interactive configuration
interactive configuration is an important application domain where a user is assisted in
specifying a valid configuration  of a product  a service or something else  by interactively
providing feedback on valid options for unspecified attributes  such a problem arises in a
number of domains  for example  when buying a product  a user should specify a number of
product attributes  some attribute combinations might not be feasible and if no guidance
is provided  the user might reach a dead end when interacting with the system  he will be
forced to backtrack  which might seriously decrease the user satisfaction 
in many cases  valid configurations can be implicitly described by specifying restrictions
on combining product attributes  we use a csp model to represent such restrictions  and
each csp solution corresponds to a valid configuration  each configurable attribute is
represented with a variable  so that each attribute option corresponds to a value in the
variable domain  in example   we illustrate a simple configuration problem and its csp
model 
example   to specify a t shirt we have to choose the color  black  white  red  or blue  
the size  small  medium  or large  and the print  men in black   mib or save the
whales   stw   if we choose the mib print then the color black has to be chosen as well 
and if we choose the small size then the stw print  including a large picture of a whale 
cannot be selected as the picture of a whale does not fit on the small shirt  the configuration
problem  x  d  f   of the t shirt example consists of variables x    x    x    x    representing
color  size and print  variable domains are d                  black   white  red   blue   d   
           small   medium  large   and d            mib   stw    the two rules translate to
f    f    f     where f  is x       x       mib  black   and f  is  x       x       
 small  not stw    there are  d    d    d         possible assignments  eleven of these
assignments are valid configurations and they form the solution space shown in fig     
   

fiinteractive cost configuration over decision diagrams

 black   small   mib  
 black   medium  mib  
 black   medium  stw  
 black   large  mib  

 black   large  stw  
 white  medium  stw  
 white  large  stw  
 red   medium  stw  

 red   large  stw  
 blue  medium  stw  
 blue  large  stw  

figure    solution space for the t shirt example 
the fundamental task that we are concerned with in this paper is calculating valid
domains  cvd  query  for a partial assignment  representing previously made user assignments  the configurator calculates and displays a valid domain vd i     di for each
unassigned variable xi  x   dom    a domain is valid if it contains those and only those
values with which  can be extended to a total valid assignment     in our example  if a
user selects a small t shirt  x        valid domains should be restricted to a mib print
v d        and black color v d        
definition    cvd  given a csp model  x  d  f    for a given partial assignment  compute valid domains 
vdi       a  di            f and     xi   a        
this task is of main interest since it delivers important interaction requirements  backtrackfreeness  user should never be forced to backtrack  and completeness  all valid configurations
should be reachable   hadzic et al          there are other queries relevant for supporting
user interaction such as explanations and restorations from a failure  recommendations of
relevant products  etc   but cvd is an essential operation in our mode of interaction and is
of primary importance in this paper 
    decision diagrams
decision diagrams form a family of rooted directed acyclic graphs  dags  where each node
u is labeled with a variable xi and each of its outgoing edges e is labeled with a value a  di  
no node may have more than one outgoing edge with the same label  the decision diagram
contains one or more terminal nodes  each labeled with a constant and having no outgoing
edges  the most well known member of this family are binary decision diagrams  bdds 
 bryant        which are used for manipulating boolean functions in many areas  such
as verification  model checking  vlsi design  meinel   theobald        wegener       
drechsler        etc  in this paper we will primarily operate with the following variant of
multi valued decision diagrams 
definition    mdd  an mdd denoted m is a rooted directed acyclic graph  v  e   where
v is a set of vertices containing the special terminal vertex   and a root r  v   further 
var   v              n      is a labeling of all nodes with a variable index such that var     
n      each edge e  e is denoted with a triple  u  u    a  of its start node u  its end node u 
and an associated value a 
we work only with ordered mdds  a total ordering   of the variables is assumed such
that for all edges  u  u    a   var u    var u     for convenience we assume that the variables
   

fiandersen  hadzic    pisinger

in x are ordered according to their indices  ordered mdds can be considered as being
arranged in n layers of vertices  each layer being labeled with the same variable index  we
will denote with vi the set of all nodes labeled with xi   vi    u  v   var u    i   similarly 
we will denote with ei the set of all edges originating in vi   i e  ei    e u  u    a   e  
var u    i   unless otherwise specified  we assume that on each path from the root to the
terminal  every variable labels exactly one node 
an mdd encodes a csp solution set sol  d          dn   defined over variables
 x            xn    to check whether an assignment a    a            an    d          dn is in sol we
traverse m from the root  and at every node u labeled with variable xi   we follow an edge
labeled with ai   if there is no such edge then a is not a solution  i e   a   sol  otherwise  if
the traversal eventually ends in terminal   then a  sol  we will denote with p   u 
u 
any path in mdd from u  to u    also  edges between u and u  will be sometimes denoted
as e   u  u    a value a of an edge e u  u    a  will be sometimes denoted as v e   we will not
make distinction between paths and assignments  hence  the set of all solutions represented
by the mdd is sol    p   p   r
    in fact  every node u  vi can be associated with a
subset of solutions sol u     p   p   u
    di         dn  
x 
 

 

x 
 
x 

 

x 
 

 

 
x 

 

x 

   

 

 

 

x 
 

 

   

x 

x 

 

 

x 

x 

x 

x 

 

 

 

 

x 
 

 

 

x 
 

x 

     
x 

x 

   

   

x 
     

x 
 

 

 a  an mdd before merging 

 b  a merged mdd 

figure    an uncompressed and merged mdd for the t shirt example 
decision diagrams can be exponentially smaller than the size of the solution set they
encode by merging isomorphic subgraphs  two nodes u    u  are isomorphic if they encode
the same solution set sol u      sol u     in figure   we show a fully expanded mdd   a 
and an equivalent merged mdd   b  for the t shirt solution space  in addition to merging
isomorphic subgraphs  another compression rule is usually utilized  removing redundant
nodes  a node u  vi is redundant if it has di outgoing edges  each pointing to the same
node u    such nodes are eliminated by redirecting incoming edges from u to u  and deleting u
from v   this introduces long edges that skip layers  an edge e u  u    a  is long if var u     
var u     in this case  e encodes the set of solutions   a   dvar u            dvar u       we
will refer to an mdd where both merging of isomorphic nodes and removal of redundant
nodes have taken place as a reduced mdd  which constitutes a multi valued generalization
of bdds which are typically reduced and ordered  a reduced mdd for the t shirt csp
is shown in figure    in this paper  unless emphasized otherwise  by mdd we always
assume an ordered merged but not reduced mdd  since exposition is simpler  and removal
of redundant nodes can have at most a linear effect on size  given a variable ordering
   

fiinteractive cost configuration over decision diagrams

there is a unique merged mdd for a given csp  x  d  f   and its solution set sol  the
size of mdd depends critically on the ordering  and could vary exponentially  it can grow
exponentially with the number of variables  but in practice  for many interesting problems
the size is surprisingly small 
x 
   
x 

   
x 

 
x 

  
   

 

x 
 

 

figure    a reduced mdd for the t shirt example 
interactive configuration over decision diagrams  a particularly attractive property of decision diagrams is that they support efficient execution of a number of important
queries  such as checking for consistency  validity  equivalence  counting  optimization etc 
this is utilized in a number of application domains where most of the problem description is
known offline  diagnosis  verification etc    in particular  calculating valid domains is linear
in the size of the mdd  since calculating valid domains is an np hard problem in the size
of the input csp model  it is not possible to guarantee interactive response in real time 
in fact  the unacceptably long worst case response times have been empirically observed
in a purely search based approach to computing valid domains  subbarayan et al         
therefore  by compiling csp solutions off line  prior to user interaction  into a decision
diagram  we can efficiently  in the size of the mdd  compute valid domains during online
interaction with a user  it is important to note that the order in which the user decides
variables is completely unconstrained  i e  it does not depend on the ordering of mdd variables  in our previous work we utilized binary decision diagrams  bdds  to represent all
valid configurations so that cvd queries can be executed efficiently  hadzic et al         
of course  bdds might be exponentially large in the input csp  but for many classes of
constraints they are surprisingly compact 

   interactive cost processing over mdds
the main motivation for this work is extending the interactive configuration approach of
mller et al          hadzic et al          subbarayan et al         to situations where in
addition to a csp model  x  d  f   involving only hard constraints  there is also a cost
function 
c   d          dn  r 
in product configuration setting  this could be a product price  in uncertainty setting  the
cost function might indicate a probability of an occurrence of an event represented by a
   

fiandersen  hadzic    pisinger

solution  failure of a hardware component  withdrawal of a bid in an auction etc    in
any decision support context  the cost function might indicate user preferences  there is a
number of cost related queries in which a user might be interested  e g  finding an optimal
solution  or computing a most probable explanation  we  however  assume that a user is
interested in tight control of both the variable values as well as the cost of selected solutions 
for example  a user might desire a specific option xi   a  but he would also care about how
would such an assignment affect the cost of the remaining optimal solutions  we should
communicate this information to the user  and allow him to strike the right balance between
the cost and variable values by allowing him to interactively limit the maximal cost of the
product in addition to assigning variable values  therefore  in this paper we are primarily
concerned with implementing a weighted cvd  wcvd  query  for a user specified maximum
cost k  we should indicate which values in the unassigned variable domains can be extended
to a total assignment that is valid and costs less than k  from now on  we assume that a
user is interested in bounding the maximal cost  limiting the minimal cost is symmetric  
definition    wcvd  given a csp model  x  d  f    a cost function c   d  r and a
maximal cost k  for a given partial assignment  a weighted cvd  wcvd  query requires
computation of the valid domains 
vdi    k     a  di            f and     xi   a      and c      k  
in this section we assume that an mdd representation of all csp solutions is already
generated in an offline compilation step  we postpone discussion of mdd compilation to
section   and discuss only delivering efficient online interaction on top of such mdd  we
will first discuss the practicability of implementing wcvd queries through explicit encoding of
costs into an mdd  we will then provide a practical and efficient approach to implementing
wcvd over an mdd when the cost function is additive  finally  we will discuss further
extensions to handling more expressive cost functions 
    handling costs explicitly
an immediate approach to interactively handling a cost function is to treat the cost as any
other solution attribute  i e  to add a variable y to variables x and add the constraint
y   c x            xn  

   

to formulas f to enforce that y is equal to the total cost  the resulting configuration model
is compiled into an mdd m   and a user is able to bound the cost by restricting the domain
of y 
assuming the variable ordering x            xn in the original csp model  x  d  f   
and assuming we inserted a cost variable into the i th position  the new variable set x  
has a variable ordering x             x n   s t  x     x            x i    xi    x i   y and x i    
xi           x n     xn   the domain di  of variable x i is the set of all feasible costs c sol   
 c s    s  sol   we will now demonstrate that the mdd m   may be exponentially larger
than m  
lemma    ei      c sol   
   

fiinteractive cost configuration over decision diagrams

proof   for the i th layer of mdd m   corresponding to variable y  for each cost c  c sol 
there must be at least one path p   r
  with c p    c  and for such a path  an edge e  ei 
at the i th layer must be labeled with v e    c  hence  for each cost there must be at least
one edge in ei    this proves the lemma 
 
furthermore  at least one of the layers of nodes vi    vi  
has a number of nodes greater
p  
than  ei    this follows from the following lemma 
      e     
lemma   for the i th layer of mdd m      vi      vi  
i

    pairs of nodes  u   u    v   v     the statement
proof   since there are at most  vi    vi  
   
i  
i
follows from the fact that for each pair  u    u    there can be at most one edge e   u   u   
namely  every solution p  formed by concatenating paths p    r
u  and p    u 
  has
a unique cost c p     however  if there were two edges e    e    u   u    they would have to
have different values v e       v e     but then  the same solution c p    would correspond to
two different costs v e     v e    

from the above considerations we see that whenever the range of possible costs c sol 
is exponential  the resulting mdd m   would be exponentially large as well  this would
result in a significantly increased size  v      v    particularly when there is a large number of
isomorphic nodes in m that would become non isomorphic once the variable y is introduced
 since they root paths with different costs   an extreme instance of such a behavior is
presented in example    furthermore  even if c sol  is not large  there could be orders of
magnitude of increase in the size of m   due to breaking of isomorphic nodes in the mdd
as will be empirically demonstrated in section    table    for a number of configuration
instances  this is a major disadvantage as otherwise efficient cvd algorithms become
unusable since they operate over a significantly larger structure 
example   consider a model c x  d  f   with no constraints f       and boolean variables dj           j             n  the solution space includes all assignments sol   d  
       dn and a corresponding mdd m  v  e  has one vertex and two
at each layer 
pnedgesj 
 xj   there is
 v     n       e       n  if we use the cost function  c x            xn     j    
an exponential number of feasible costs c sol                 n      hence   ei      n and for
    is greater
the i th layer corresponding to variable y  at least one of the layers  vi      vi  

n  
than  n      
however  if there was no significant node isomorphism in m   adding a y variable does
not necessarily lead to a significant increase in size  an extreme instance of this is an mdd
with no isomorphic nodes  for example when every edge is labeled with a unique value  for
such an mdd  the number of non terminal nodes is n   sol   by adding a cost variable
y  the resulting mdd would add at most one node per path  leading to an mdd with at
most  n        sol  nodes  this translates to a minor increase in size   v      v      n      n 
this property will be empirically demonstrated in section    table    for product catalogue
datasets  in the remainder of this paper we develop techniques tailored for instances where
a large increase in size occurs  we avoid explicit cost encoding and aim to exploit the
structure of the cost function to implement wcvd 
   

fiandersen  hadzic    pisinger

    processing additive cost functions
one of the main contributions of this paper is a practical and efficient approach to deliver
wcvd queries if the cost function is additive  an additive cost function has the form
c x            xn    

n
x

ci  xi  

i  

where a cost ci  ai    r is assigned for every variable xi and every value in its domain
ai  di  
additive functions are one of the most important and frequently used modeling constructs  a number of important combinatorial problems are modeled as integer linear programs where often both the constraints and the objective function are linear  i e  represent
special cases of additive cost functions  in multi attribute utility theory user preferences
are under certain assumptions aggregated into a single additive function through weighted
summation of utilities of individual attributes  in a product configuration context  many
properties are additive such as the memory capacity of a computer or the total weight  in
particular  based on our experience in commercially applying configuration technology  the
price of a product can often be modeled as the  weighted  sum of prices of individual parts 
      the labeling approach
assuming that we are given an mdd representation of the solution space sol and a cost
function c  our approach to answering wcvd queries is based on three steps     restricting
mdd wrt  the latest user assignment     labeling remaining nodes by executing shortest
path algorithms and    filtering too expensive values by using node labels 
restricting mdd  we are given a user assignment xi   ai   where xi can be any of the
unassigned variables  regardless of its position in the mdd variable ordering  we initialize
mdd pruning by removing all edges e u  u    a   that are not in agreement with the latest
assignment  i e  where var u    i and a    ai   this might cause a number of other edges
and nodes to become unreachable from the terminal or the root if we removed the last edge
in the set of children edges ch u  or parent edges p  u     any unreachable edge must be
removed as well  the pruning is repeated until a fixpoint is reached  i e  until no more
nodes or edges can be removed  algorithm   implements this scheme in o  v      e   time
and space by using a queue q to maintain the set of edges that are yet to be removed 
note that unassigning a user assignment xi   ai can be easily implemented in linear
time as well  it suffices to restore a copy of the initial mdd m   and perform restriction wrt 
a partial assignment      xi   ai    where  is a current assignment  algorithm   is easily
extended for this purpose by initializing the edge removal list q with edges incompatible
wrt  any of the assignments in  
computing node labels  remaining edges e u  u    a  in each layer ei are implicitly
labeled with c e    ci  a   in the second step we compute for each mdd node u  v an
upstream cost of the shortest path from the root r to u  denoted as u  u   and a downstream
cost of the shortest path from u to the terminal    denoted as d u  
 
 
 
 
x
x
u  u    min
c e 
   
c e    d u    min
p r

u

p u

ep

   

 

ep

fiinteractive cost configuration over decision diagrams

algorithm    restrict mdd 
data  mdd m  v  e   variable xi   value ai
foreach e  ei   v e     ai do
q push e  
while q     do
e u  u    a   q pop   
delete e from m  
if ch u     then
foreach e   u    u do
q push e  
if p  u       then
foreach e   u   u   do
q push e  

algorithm   computes u  u  and d u  labels in   v      e   time and space 
algorithm    update u  d labels 
data  mdd m  v  e   cost function c
d       d        
foreach i   n            do
foreach u  vi do
foreach e   u  u  do
d u    min d u   c e    d u    
u        u  r      
foreach i              n do
foreach u  vi do
foreach e   u  u  do
u  u      min u  u     c e    u  u  

computing valid domains  once the upstream and downstream costs u  d are computed  we can efficiently compute valid domains vdi wrt  any maximal cost bound k
since 
vdi  k     v e    u  u    c e    d u     k  e   u  u    u  vi  
   
this can be achieved in a linear time traversal   v      e   as shown in algorithm   
algorithm    compute valid domains 
data  mdd m  v  e   cost function c  maximal cost k
foreach i              n do
v di    
foreach u  vi do
foreach e   u  u  do
if u  u    c e    d u     k then
v di  v di   v e   

hence the overall interaction is as follows  given a current partial assignment   mdd is
restricted wrt   through algorithm    labels u  d are then computed through algorithm  
and valid domains are computed using algorithm    the execution of all of these algorithms
   

fiandersen  hadzic    pisinger

requires   v      e   time and space  hence  when an mdd representation of the solution
space is available  we can interactively enforce additive cost restrictions in linear time and
space 
    processing additive costs over long edges
our scheme can be extended to mdds containing long edges  while for multivalued csp
models with large domains space savings due to long edges might not be significant  for
binary models and binary decision diagrams  bdds  more significant savings are possible 
furthermore  in a similar fashion  our scheme might be adopted over other versions of
decision diagrams that contain long edges  with different semantics  such as zero suppressed
bdds where a long edge implies that all skipped variables are assigned   
recall that in reduced mdds  redundant nodes u  vi which have di outgoing edges 
each pointing to the same node u    are eliminated  an edge e u  u    a  with var u   
k and var u      l is long if k       l  and in this case  e encodes a set of solutions 
 a   dk           dl    the labeling of edges can be generalized to accommodate such
edges as well  let domains dj    j              n represent variable domains updated wrt  the
current assignment  i e  dj    dj if xj is unassigned  and dj      xj    otherwise  an edge
e u  u    a    var u    k  var u      l  is removed if a   dk  in an analogous way to the mdd
pruning in the previous subsection  otherwise  it is labeled with
c e    ck  a   

l 
x

j k  

min cj  a   

a  dj 

   

which is the cost of the cheapest assignment to xk           xl  consistent with the edge and
the partial assignment   once the edges are labeled  the upstream and downstream costs
u  d are computed in   v      e   time  in the same manner as in the previous subsection 
however  computing valid domains has to be extended  as before  a sufficient condition
for a  vd i is the existence of an edge e   u  u    originating in the i th layer u  vi such
that v e    a and
u  u    c e    d u     k 
   
however  this is no longer a necessary condition  as even if there is no edge satisfying     
there could exist a long edge skipping the i th layer that still allows a  vd i   we therefore 
for each layer i  have to compute the cost of the cheapest path skipping the layer 
p  i    min u  u    c e    d u      e   u  u   e  var u    i   var u    

   

if there is no edge skipping the i th layer  we set p  i      let cmin  i  denote the cheapest
value in di    i e  cmin  i    minadi  ci  a   to determine if there is a long edge allowing
a  vd i   for an unassigned variable xi   the following must hold 
p  i    ci  a   cmin  i   k

   

finally  a sufficient and necessary condition for a  vd i is that one of the conditions     and
    holds  if variable xi is assigned with a value drawn from a valid domain in a previous
step  we are guaranteed that v di     xi    and no calculations are necessary  labels p  i 
   

fiinteractive cost configuration over decision diagrams

algorithm    update p labels 
data  mdd m  v  e   cost function c
p       
foreach i              n do
foreach u  vi do
foreach e   u  u  do
foreach j   var u               var u        do
p  j    min p  j   u  u    c e    d u     

can be computed by algorithm   in worst case o  e   n  time  note that this bound is
over pessimistic as it assumes that every edge in  e  is skipping every variable in x 

once the auxiliary structures u  d  p are computed  valid domains can be efficiently
extracted using algorithm    for each unassigned variable xi   value a  di is in a valid
domain vdi  k  iff the following holds  condition     is satisfied or for an edge e u  u    a   e
condition     is satisfied  for each non assigned variable i  the algorithm first checks for
each value a  di whether it is supported by a skipping edge p  i   afterwards  it scans the
i th layer and extracts
p values supported by edges ei   this is achieved in   d     v      e  
time  where  d    ni    di   
algorithm    computing valid domains v di  
data  mdd m  v  e   cost function c  maximal cost k
foreach i              n do
v di    
if xi assigned to ai then
v di   ai   
continue 
foreach a  di do
if p  i    ci  a   cmin  i   k then
v di  v di   a  
foreach u  vi do
foreach e   u  u  do
if u  u    c e    d u     k then
v di  v di   v e   

again  the overall interaction remains the same  labels p can be incrementally updated
in worst case o  e   n  time  valid domains are then extracted in   d     v      e   time 
in response to changing a cost restriction k  auxiliary labels need not be updated  valid
domains are extracted directly using algorithm   in   d     v      e   time 
    handling non additive cost functions
in certain interaction settings  the cost function is not additive  for example  user preferences might depend on an entire package of features rather than a selection of each individual
feature  similarly  the price of a product need not be a simple sum of costs of individual
parts  but might depend on combinations of parts that are selected  in general  our cost
   

fiandersen  hadzic    pisinger

function c x            xn   might be a sum of non unary cost functions ci   i              k 
c x            xn    

k
x

ci  xi  

i  

where each cost function ci expresses a unique contribution of combination of features within
a subset of variables xi  x 
y
dj  r 
ci  
jxi

      non unary labeling
our approach can be extended to handle non unary costs by adopting labeling techniques
that are used with other graphical representations  e g   wilson 
      mateescu et al  
pk
       assume we are given a cost function c x            xn     i   ci  xi    let a i  denote
the set of all cost functions cj such that xi is the last variable in the scope of cj  
a i     cj   xi  xj and xi    xj   i    i  
given assignment a a            ai   to variables x            xi   we can evaluate every function cj 
ai   if the scope of cj is a strict subset of  x            xi    we set cj  a  to be the value of
u  u 
cj  xj  a   where xj  a  is a projection of a onto xj   now  for every path p   r
vi     and its last edge  in the i th layer  e  ei   we label e with the sum of all cost functions
that have become completely instantiated after assigning xi   ai  
x
cj  p  
   
c e  p   
cj a i 

with respect to such labeling  ap
cost of a solution represented by a path p would indeed
be the sum of costs of its edges  ep c e  p   in order to apply our approach developed for
additive cost functions in section      each edge should be labeled with a cost that is the
same for any incoming path  however  this is not possible in general  we therefore have
to expand the original mdd  by creating multiple copies of e and splitting incoming paths
to ensure that any two paths p    p  sharing a copy e  of an edge e induce the same edge
cost c e    p      c e    p     such an mdd  denoted as mc   can be generated using for example
search with caching isomorphic nodes as suggested by wilson         or by extending the
standard apply operator to handle weights as suggested by mateescu et al         
      impact on the size
the increase in size of mc relatively to the cost oblivious version m depends on the additivity of the cost function c  for example  for fully additive cost functions  each scope
xi contains a single variable  mc   m   since a label on c e  is the same regardless of the
incoming path  however  if the entire cost function c is a single non additive component
c   x    with global scope  x    x   then only the edges in the last mdd layer are labeled 
as in the case of explicit cost encoding into mdd from section      there must be at least
c sol  edges in the last layer  one for each feasible cost  hence  if the range of costs c sol 
   

fiinteractive cost configuration over decision diagrams

is exponential  so is the size of mc   furthermore  even if c sol  is of limited size  an increase in mc might be significant due to breakup of node isomorphisms in previous layers 
in case of explicit cost encoding  section      such an effect is demonstrated empirically in
section    a similar effect on the size would occur in other graphical representations  for
example  in representations exploiting global csp structure   such as weighted cluster trees
 pargamin          adding non additive cost functions increases the size of the clusters  as
it is required that for each non additive component ci  xi   at least one cluster contains the
entire scope xi   furthermore  criteria for node merging of wilson        and mateescu
et al         are more refined  since nodes are no longer isomorphic if they root the same
set of feasible paths  but the paths must be of the same cost as well 
      semiring costs and probabilistic queries
note that our approach can be further generalized to accommodate more general aggregation of costs as discussed by wilson         cost functions ci need not map assignments
of xi variables into the set of real numbers r but to any set a equipped with operators
   such that a    a            is a semiring  the mdd property that is computed is
p r   ep c e   operator  aggregates edge costs while operator  aggregates path costs 
in a semiring  distributes over   and the global computation can be done efficiently by local node based aggregations  much as a shortest path is computed  our framework is based
on reasoning about paths of minimal cost which corresponds to using a    r          min    
but different semirings could be used  in particular  by taking a    r               we can
handle probabilistic reasoning  each cost function ci corresponds to a conditional probability table  the cost of an edge c e   e   u  u   ei corresponds to the probability
of
q
p  xi   v e   given any of the assignments p   r
u  the cost of a path c p    ep c e 
is a probability of an event represented by the path  and
pfor a given value a  di we  can
get the marginal probability of p  xi   a  by computing e u u   a ei  u  u   c e   d u    

   compiling mdds
in the previous section we showed how to implement cost queries once the solution space
is represented as an mdd  in this section  we discuss how to generate such mdds from a
csp model description  x  d  f    our goal is to develop an efficient and easy to implement
approach that can handle all instances handled previously through bdd based configuration
 hadzic et al         
variable ordering  the first step is to choose an ordering for csp variables x  this
is critical since different variable orders could lead to exponential differences in mdd size 
this is a well investigated problem  especially for binary decision diagrams  for a fixed
formula  deciding if there is an ordering such that the resulting bdd would have at most t
nodes  for some threshold t   is an np hard problem  bollig   wegener         however 
there are well developed heuristics  that either exploit the structure of the input model or
use variable swapping in existing bdd to improve the ordering in a local search manner
 meinel   theobald         for example  fan in and weight heuristics are popular when the
input is in the form of a combinational circuits  if the input is a csp  a reasonable heuristic
is to choose an ordering that minimizes the path width of the corresponding constraint graph 
   

fiandersen  hadzic    pisinger

as an mdd is in worst case exponential in the path width  bodlaender        wilson       
mateescu et al          investigating heuristics for variable ordering is out of the scope of
our work  and in the remainder of this paper we assume that the ordering is already given 
in all experiments we use default orderings provided for the instances 
compilation technique  our approach is to first compile a csp model into a binary
decision diagrams  bdd  by exploiting highly optimized and stable bdd packages  e g  
somenzi        and afterwards extract the corresponding mdd  dedicated mdd packages
are rare  provide limited functionality and their implementations are not as optimized as
bdd packages to offer competitive performance  miller   drechsler         an interesting
recent alternative is to generate bdds through search with caching isomorphic nodes  such
an approach was suggested by huang and darwiche        to compile bdds from cnf
formulas  and it proved to be a valuable addition to standard compilation based on pairwise
bdd conjunctions  however  such compilation technology is still in the early stages of
development and an open source implementation is not publicly available 
    bdd encoding
regardless of the bdd compilation method  the finite domain csp variables x first have
to be encoded by boolean variables  choosing a proper encoding is important since the
intermediate bdd might be too large or inadequate for subsequent extraction  in general 
each csp variable xi would be encoded with ki boolean variables  xi            xiki    each a  di
has to be mapped into a bit vector enci  a     a            aki          ki such that for different
values a    a  we get different vectors enci  a     enci  a     there are several standard boolean
encodings of multi valued variables  walsh         in the log encoding scheme each xi is
encoded with ki   dlog di  e boolean variables  each representing a digit in binary notation 
a multivalued assignment xi   a is translated into a set of assignments xij   aj such
p i j  i
pki j 
  xj    di   is added
aj   additionally  a domain constraint kj  
that a  
j    
i
i
to forbid those bit assignments  a            aki   that encode values outside domain di   the
direct encoding  or   hot encoding  is also common  and especially well suited for efficient
propagation when searching for a single solution  in this scheme  each multi valued variable
xi is encoded with  di   boolean variables  xi            xiki    where each variable xij indicates
whether the j th value in domain aj  di is assigned  for each variable xi   exactly one
value from di has to be assigned  therefore  we enforce a domain constraint xi         xiki    
for each i              n  hadzic  hansen  and osullivan        have empirically demonstrated
that using log encoding rather than direct encoding yields smaller bdds 
sn thei set of i boolean variables is fixed as the union of all encoding variables  xb  
i    x            xki   but we still have to specify the ordering  a common ordering that
is well suited for efficiently answering configuration queries is clustered ordering  here 
boolean variables  xi            xiki   are grouped into blocks that respect the ordering among
finite domain variables x            xn   that is 
xij     xij    i    i    i    i   j    j    
there might be other orderings that yield smaller bdds for specific classes of constraints 
bartzis and bultan        have shown that linear arithmetic constraints can be represented
   

fiinteractive cost configuration over decision diagrams

more compactly if boolean variables xij are grouped wrt  bit position j rather than the
finite domain variable xi   i e  xij     xij    j    j    j    j   i    i     however 
configuration constraints involve not only linear arithmetic constraints  and space savings
reported by bartzis and bultan        are significant only when all the variable domains
have a size that is a power of two  furthermore  clustered orderings yield bdds that
preserve essentially the same combinatorial structure which allows us to extract mdds
efficiently as will be seen in section     
example   recall that in the t shirt example d                  d               d   
        the log encoding variables are x     x     x     x     x     inducing a variable set
xb                    the log bdd with clustered variable ordering is shown in figure   a  

x 

x 
x 

       

x 

x 

x 

x 

x 

x 

 
x 

x 
x 

x 

   
 

x 
 

 

 

 a  a log bdd 

  

x 

 b  an extracted mdd 

figure    a log bdd with clustered ordering  and an extracted mdd for the t shirt example  for bdd  we draw only the terminal node   while terminal node   and
its incoming edges are omitted for clarity  each node corresponding to a boolean
encoding variable xij is labeled with the corresponding csp variable xi   edges
labeled with   and   are drawn as dashed and full lines  respectively 

    mdd extraction
once the bdd is generated using clustered variable ordering we can extract a corresponding
mdd using a method which was originally suggested by hadzic and andersen        and
that was subsequently expanded by hadzic et al          in the following considerations 
we will use a mapping cvar xij     i to denote the csp variable xi of an encoding variable
xij and  with a slight abuse of notation  we will apply cvar also to bdd nodes u labeled
with xij   for terminal nodes  we define cvar      cvar      n      recall that bdd has two
terminal nodes   and   indicating false and true respectively   analogously  we will use a
mapping pos xij     j to denote the position of a bit that the variable is encoding 
our method is based on recognizing a subset of bdd nodes that captures the core of
the mdd structure  and that can be used directly to construct the corresponding mdd 
   

fiandersen  hadzic    pisinger

in each block of bdd layers corresponding to a csp variable xi   li   vxi         vxi   it
 
ki
suffices to consider only those nodes that are reachable by an edge from a previous block of
layers 
ini    u  li    u   u e cvar u      cvar u   

 
 
for the first layer
sn  we take in     r   the resulting mdd m  v   e   m contains only nodes
 
in ini   v   i   ini and is constructed using extraction algorithm    an edge e u  u    a 
is added to e   whenever traversing bdd b from u wrt  encoding of a ends in u       
traversals are executed using algorithm    starting from u  in each step the algorithm
traverses bdd by taking the low branch when corresponding bit ai     or high branch
when ai      traversal takes at most ki steps  terminating as soon as it reaches a node
labeled with a different csp variable  the mdd extracted from a log bdd in figure   a 
is shown in figure   b  

algorithm    extract mdd 
data  bdd b v  e 
e       v     r  
foreach i              n do
foreach u  ini do
foreach a  di do
 
u   traverse u  a  
if u       then
e    e      u  u    a   
v    v     u   
return  v     e     

algorithm    traverse bdd 
data  bdd b v  e   u  a
i  cvar u  
 a            aki    enci  v  
repeat
s  pos u  
if as     then
u  low u  
else
u  high u  
until cvar u     i  
return u 

since each traversal  in linep
  of algorithm    takes o dlog di  e  steps  the running time
for the mdd extraction
is o  ni    ini     di    dlog di  e   the resulting mdd m  v     e    
pn
has at most o  i    ini     di    edges because we
pnadd at most  di   edges for every node
 
u  ini   since we keep only nodes in ini    v     i    ini     v   
    input model and implementation details

an important factor for usability of our approach is the easiness of specifying the input
csp model  bdd packages are callable libraries with no default support for csp like input
language  to the best of our knowledge  the only open source bdd compilation tool that
   

fiinteractive cost configuration over decision diagrams

accepts as an input a csp like model is clab  jensen         it is a configuration interface
on top of a bdd package buddy  lind nielsen         clab constructs a bdd for each
input constraint and conjoins them to get the final bdd  furthermore clab generates a
bdd using log encoding with clustered ordering which suits well our extraction approach 
therefore  our compilation approach is based on using clab to specify the input model and
generate a bdd that will be used by our extraction algorithm   
note that after extracting the mdd  we preprocess it for efficient online querying 
we expand the long edges and merge isomorphic nodes to get a merged mdd  we then
translate it into a more efficient form for online processing  we rename bdd node names
to indexes from             v    where root has index   and terminal   has index  v    this
allows for subsequent efficient implementation of u and d labels  as well as an efficient
access to children and parent edges of each node  in our initial experiments we got an order
of magnitude speed up of wcvd queries after we switched from bdd node names  which
required using less efficient mapping for u   d  ch and p structures  

   interactive configuration with multiple costs
in a number of domains  a user should configure in the presence of multiple cost functions
which express often conflicting objectives that a user wants to achieve simultaneously  for
example  when configuring a product  a user wants to minimize the price  while maximizing the quality  reducing the ecological impact  shortening delivery time etc  we assume
therefore that in addition to the csp model  x  d  f   whose solution space is represented
by a merged mdd m   we are given k additive cost functions
ci  x            xn    

n
x

cij  xi    i             k

j  

expressing multiple objectives  multi cost scenarios are often considered within the multicriteria optimization framework  figueira et al         ehrgott   gandibleux         it
is usually assumed that there is an optimal  but unknown  way to aggregate multiple
objectives into a single objective function that would lead to a solution that achieves the
best balance in satisfying various objectives  the algorithms sample few efficient solutions
 nondominated wrt  objective criteria  and display them to the user  through user input 
the algorithms learn how to aggregate objectives more adequately which is then used for
the next sampling of efficient solutions etc  in some approaches a user is asked to explicitly
assign
pkweights wi to objectives ci which are then aggregated through weighted summation
c   i   wi ci  
while adopting these techniques to run over a compiled representation of solution space
would immediately improve their complexity guarantees and would be useful in many scenarios where multi criteria techniques are traditionally used  we believe that in a configuration
setting  a more explicit control over variable values is needed  a user should easily explore
the effect of assigning various variable values on other variables as well as cost functions 
we therefore suggest to directly extend our wcvd query so that a user could explore the
effect of cost restrictions in the same way he explores interactions between regular variables  the key query that we want to deliver is computing valid domains wrt  multiple cost
restrictions 
   

fiandersen  hadzic    pisinger

definition    k wcvd  given a csp model  x  d  f    additive cost functions cj   d  r 
and maximal costs kj   j              k  for a given partial assignment   compute 
vd i     kj  kj        a  di            f and     xi   a      and

k
 

j  

cj       kj   

we are particularly interested in two cost configuration as it is more likely to occur
in practice and has strong connections to existing research in solving knapsack problems
and multi criteria optimization  in the reminder of the section we will first discuss the
complexity of   wcvd queries and then develop a practical implementation approach  we
will then discuss the general k wcvd query 
    complexity of   wcvd query
we assume that as an input to the problem we have a merged mdd m   additive cost
functions c    c  and cost bounds k    k    the first question is whether it is possible for
some restricted forms of additive cost functions c    c  to implement   wcvd in polynomial
time  for this purpose we formulate a decision version of the   wcvd problem 
problem      wcvd sat  given csp  x  d  f   and mdd
pnm representation of its solution space  and given two additive cost functions ci  x    j   cij  xj    i        with cost
restrictions k    k    decide whether f  c   x   k   c   x   k  is satisfiable 
unfortunately  the answer is no even if both constraints involve only positive coefficients 
and have binary domains  to show this we reduce from the well known two partition
problem  tpp  which is np hard  garey   johnson         for a given set of positive
integers s    s            sn    the tpp asks to decide whether it is possible to split a set of
indexes
i  p            n  into two sets a and i   a such that the sum in each set is the same 
p
s
ii a si  
ia i  

proposition   the   wcvd sat problem defined over boolean variables and involving only
linear cost functions with positive coefficients is np hard 

proof   we show the stated by reduction from tpp  in order to reduce tpp to two cost
configuration we introduce  n binary variables x            x n such that i  a if and only
if x i      and i  a   i if and only if x i      we construct an mdd for f  
 x     x p
          x n     x n   and introduce
p two linear cost functions with positive coefficients 
c   x    ni   si p
x i  and c   x    ni   si  x i   the overall capacity constraints are set
to k    k   
ii si     by setting a    i  i   x i       it is easily seen that
f  c   x   k   c   x   k  is satisfiable if and only if the tpp has a feasible solution 
hence  if we were able to solve   wcvd sat with boolean variables and positive linear cost
functions in polynomial time  we would also be able to solve the tpp problem polynomially 
    pseudo polynomial scheme for   wcvd
in the previous subsection we demonstrated that answering   wcvd queries is np hard even
for the simplest class of positive linear cost functions over boolean domains  hence  there
   

fiinteractive cost configuration over decision diagrams

is no hope of solving   wcvd with guaranteed polynomial execution time unless p   n p  
however  we still want to provide a practical solution to the   wcvd problem  we hope
to avoid worst case performance by exploiting the specific nature of the cost functions we
are processing  in this subsection we therefore show that   wcvd can be solved in pseudopolynomial time by extending our labeling approach from section      furthermore  we
show how to adopt advanced techniques used for the knapsack problem  kellerer  pferschy 
  pisinger        
      overall approach
our algorithm runs analogous to the single cost approach developed in section      after
restricting the mdd wrt  a current assignment  we calculate upstream and downstream
costs u  d  which are no longer constants but lists of tuples   and use them to check for
each edge e  whether v e  is in a valid domain 
for a given edge e   u  u    labeled with costs c   e   c   e   it follows v e   v di iff
there are paths p   r
u  and p    u 
  such that c   p    c   e    c   p     k  and
 
c   p    c   e    c   p    k    at each node u it suffices to store two sets of labels 
u  u      c   p   c   p     p   r

u 

d u      c   p   c   p     p   u

  

then  for given cost restrictions k    k    and an edge e   u  u    u  vi   domain v di  k    k   
contains v e  if for some  a    a     u  u  and  b    b     d u  it holds
a    c   e    b   k   a    c   e    b   k 

   

      exploiting pareto optimality
while in the single cost case it was sufficient to store at u  u   d u  only the minimal value
 the cost of the shortest path to root terminal   in multi cost case we need to store multiple
tuples  the immediate extension would require storing at most k   k  tuples at each node 
however  we need to store only non dominated tuples in u and d lists  if there are two
tuples  a    a    and  a     a     in the same list such that
a   a   and a   a  
then we may delete  a     a     as if test     succeeds for  a     a     it will also succeed for  a    a    
the remaining entries are the costs of pareto optimal solutions  a solution is pareto optimal
wrt  solution set s and cost functions c    c  if it is not possible to find a cheaper solution
in s with respect to one cost without increasing the other  path p   r
  represents a
pareto optimal solution in sol iff for each node u on the path  both sub paths p    r
u
and p    u
  are pareto optimal wrt  the sets of paths  p   r
u  and  p   u
  
respectively  hence  for each node u it suffices to store 
u  u      c   p   c   p     p   r

u  p   r

u  c   p 

 c   p      c   p   c   p     

d u      c   p   c   p     p   u

   p   u

   c   p 

 c   p      c   p   c   p     

   

fiandersen  hadzic    pisinger

note that due to pareto optimality  for each a               k    and each a               k   
there can be at most one tuple in u or d where the first coordinate is a  or the second
coordinate is a    therefore  for each node u  u  u  and d u  can have at most min k    k   
entries  hence  the space requirements of our algorithmic scheme are in worst case o  v  k 
where k   min k    k    
      computing u and d sets
we will now discuss how to compute the u and d sets efficiently by utilizing advanced
techniques for solving knapsack problems  kellerer et al          we recursively update u
and d sets in a layer by layer manner as shown in algorithm    the critical component of
each recursion step in the algorithm is merging lists in lines   and    in this operation a
new list is formed such that all dominated tuples are detected and eliminated  in order to
do this efficiently  it is critical to keep both u and d lists sorted wrt  the first coordinate 
i e 
 a    a      a     a      a    a   
if u and d are sorted  they can be merged in o k  time using the list merging algorithm
for knapsack optimization from  kellerer et al         section      
algorithm    update u  d labels 

 
 

 
 

data  mdd m   cost functions c    c    bounds k    k 
u              u  r             
foreach i              n do
foreach u  vi do
foreach e   u  u  do
s   
foreach  a    a     u  u  do
if a    c   e   k   a    c   e   k  then
s  s   a    c   e   a    c   e   
u  u     m ergelists s  u  u     
d             d               
foreach i   n            do
foreach u  vi do
foreach e   u  u  do
s   
foreach  a    a     d u    do
if a    c   e   k   a    c   e   k  then
s  s   a    c   e   a    c   e   
d u   m ergelists s  d u   

the time complexity is determined by populating list s  in lines   and    and merging
 in lines   and     each of these updates takes o k  in worst case  since we perform these
updates for each edge e  e  the total time complexity of algorithm   is o  e   k  in the
worst case 
   

fiinteractive cost configuration over decision diagrams

      valid domains computation
once the u  d sets are updated we can extract valid domains in a straightforward manner
using algorithm    for each edge e   u  u  the algorithm evaluates whether v e   v di in
worst case o  u  u     d u        o k     steps  hence  valid domain extraction takes in worst
case o  e   k     steps 
algorithm    compute valid domains 
data  mdd m   cost functions c    c    cost bounds k    k    labels u  d
foreach i              n do
vdi   
foreach u  vi do
foreach e   u  u  do
foreach  a    a     u  u    b    b     d u    do
if a    c   e    b   k   a    c   e    b   k  then
vdi  vdi   v e   
break 

however  we can improve the running time of valid domains computation by exploiting
    pareto optimality and     the fact that the sets u  d are sorted  it is critical to observe
that given an edge e   u  u    for each  a    a     u  u  it suffices to perform the validity
test     only for a tuple  b    b     d u     where b  is a maximal first coordinate satisfying
a    c   e    b   k    i e 
b    max b     b    b     d u     a    c   e    b   k    

namely  if the test succeeds for some  b     b     where b     b    it will also succeed for  b    b   
since due to pareto optimality  b     b   b    b   and hence a   c   e  b    a   c   e  b   
k    since the lists are sorted  comparing all relevant tuples can be performed efficiently by
traversing u  u  in increasing order  while traversing d u    in decreasing order  algorithm
   implements the procedure 
algorithm     extract edge value 

 
 

data  mdd m   cost constraints c    c    bounds k    k    edge e   u  u  in ei
a a    a      u  u  begin   
b b    b      d u    end   
while a       b     do
if a    c   e    b    k  then
b b    b     d u    previous   
continue 
else if a    c   e    b   k   a    c   e    b   k  then
vdi  vdi   v e   
return 
a a    a     u  u  next   

the algorithm relies on several list operations  given list l of sorted tuples  operations
l begin   and l end   return the first and the last tuple respectively wrt  the list ordering 
   

fiandersen  hadzic    pisinger

operations l next   and l previous   return the next and the previous element in the
list wrt  the ordering  elements   and  indicate two special elements that appear after
the last and before the first element in the list respectively  they indicate that we have
passed beyond the boundary of the list  the algorithm terminates  line    as soon as the
test succeeds  otherwise  it keeps iterating over tuples until we have processed either the
last tuple in u  u  or the first tuple in d u     in that case the algorithm terminates as
it is guaranteed that v e    v di   in each step  we traverse at least one element from
u  u  or d u     hence  in total we can execute at most u  u    d u      k operations 
therefore  the time complexity of single edge traversal is o k  and the complexity of valid
domains computation of algorithm    after replacing the quadratic loop with algorithm
    is o  e   k  where k   min k    k    
in conclusion  we have developed a pseudo polynomial scheme for computing valid domains wrt  two cost functions    wcvd   the space complexity is dominated by storing u
and d sets at each node  in worst case we have to store o  v    k  entries  the time
complexity to compute u and d labels and extract valid domains takes o  e   k  steps 
the overall interaction is similar to the single cost approach  after assigning a variable 
we have to recompute the labels as well as extract domains  if we tighten cost restrictions
k    k  to k    k    k    k  we only need to extract domains  however  if we relax either
of the cost restrictions  such as k     k  we need to recompute the labels as well  more
precisely  labels u  d need to be recomputed only if k    k max where k max was the initial
cost restriction after the last assignment 
      further extensions
note that our approach can  in principle  be extended to handle general k wcvd query for a
fixed k  lists u and d would contain the set of non dominated k tuples  ordered such that 
 a            ak     a             a k   iff for the smallest coordinate j for which aj    a j it holds aj   a j  
both the list merging as well as valid domains extraction would be directly generalized to
operate over such ordered sets  although the time complexity for testing dominans will
increase  the worst case complexity would depend on the size of an efficient frontier  which
for k cost functions with cost bounds k is bounded by o k k     in practice however  we
could expect that the number of non dominated tuples be much smaller  especially for cost
functions over smaller scopes and with smaller coefficients  note that our approach can
also be extended to accommodate non additive cost functions by expanding the mdd to
accommodate non unary labels in the same fashion as discussed in section     
    approximation scheme for   wcvd
in this subsection we analyze the complexity of answering   wcvd queries in approximative
manner  i e  how can we improve running time guarantees by settling for an approximate
solution  assume that one of the constraints k  is fixed while the second constraint may be
exceeded with a small tolerance     k    for example  a user might be willing to tolerate a
small increase in price as long as strict quality restrictions are met  in this section we present
a fully polynomial time approximation scheme  fptas  for calculating valid domains in
time o en     for this problem  the fptas should satisfy that no feasible solution with
respect to the original costs should be fathomed  and that any feasible configuration found
   

fiinteractive cost configuration over decision diagrams

by use of the fptas in the domain restriction should satisfy the cost constraint within
      k    finally  the fptas should have running time polynomial in    and the input
size 
in order to develop the fptas we use a standard scaling technique  schuurman  
woeginger        originally presented by ibarra and kim         given an   let n be
the number of decision variables  set t   k    n      and determine new costs c   e   
bc   e  t c and new bounds k    dk   t e  we then perform the valid domains computation
 label updating and domain extraction  as described in section      using the scaled weights 
the following propositions prove that we obtained a fptas scheme 
proposition   the running time of valid domains computation is o    en 
proof   we may assume that k    k  as otherwise we may interchange the two costs 
the running time becomes
 
n  
    o en  
o e k      o ek   t     o ek 
k 

since n  v this is polynomial in the input size o v   e  and the precision    
proposition   if a solution was feasible with respect to the original costs  then it is also
feasible with respect to the scaled costs 
p
proof   assume that ep c   e   k    then
x
x
 
 
 x
c   e   k   d k  e   k 
c   e   
bc   e  t c 
t ep
t
t
ep
ep
proposition   any solution that was feasible with respect to the scaled costs c   e  satisfies
original constraints within       k   
p
proof   assume that ep c   e   c    then
p
p
p
p
ep c   e    t n
ep  bc   e  t c       t
ep c   e  t  t
ep c   e    t
 t k    t n   t dk   t e   t n  t  k   t        t n

  k    t  n     

since t   k    n      we get
x
c   e   k     n     k    n              k 
ep

which shows the stated 

the time complexity can be further improved using techniques from kellerer et al        
for the knapsack problem  but we are here only interested in showing the existence of a
fptas 
by the considerations in previous subsections we have fully analyzed the complexity
of answering   wcvd queries  we first showed that this is an np hard problem  we then
developed a pseudo polynomial scheme for solving it  and finally we devised a fully polynomial time approximation scheme  even though we cannot provide polynomial running time
guarantees  based on these considerations  we can hope to provide a reasonable performance
for practical instances  as it will be demonstrated in section   
   

fiandersen  hadzic    pisinger

    complexity of k wcvd query
we conclude this section by discussing complexity of general k wcvd queries  while our
practical implementation efforts are focused on implementing   wcvd queries  or other wcvd
queries where the number of cost constraints is known in advance  for completeness we
consider a generic problem of delivering k wcvd for arbitrary k  i e  where k is part of the
input to the problem 
we will prove now that for such a problem there is no pseudo polynomial scheme unless
np p  we will show that decision version of such problem k wcvd sat is np hard in the
strong sense  garey   johnson        by reduction from the bin packing problem  bpp 
which is strongly np hard  garey   johnson         in the decision form the bpp asks
whether a given set of numbers s            sn can be placed into k bins of size k each  notice 
that we cannot use reduction below for showing np hardness of   wcvd sat  since k is a
part of the input in bpp 
theorem   the k wcvd sat problem with variable k  is strongly np hard 
proof   for a given instance of bpp we reduce it to a k wcvd sat instance as follows 
we construct an mdd for a csp  x  d  f   over n variables x    x            xn   each with
a domain of size k  di               k   i              n  we set f     so that resulting mdd
allows all assignments  it has n nonterminal nodes u            un corresponding to the numbers
s            sn   between two nodes ui   ui   we have k edges with costs  c   e   c   e           ck  e  
set to
 si                      si                         si                                      si   
the first node u  is the root u    r while the last node un is connected to the terminal
un        the overall capacity constraints are  k            kk      k          k  
it is easily seen that we may find a path from r to   if and only if the bpp has a
feasible solution  since the bpp is strongly np hard we have shown that k wcvd sat also
is strongly np hard 

   experimental evaluation
we implemented our compilation scheme and the algorithms for wcvd and   wcvd queries 
we performed a number of experiments to evaluate the applicability of our approach as
well as to confirm various hypotheses made throughout the paper  we used two sets of
instances whose properties are presented in table    the first set corresponds to real world
configuration problems available at configuration benchmarks library clib    these are csp
models with configuration constraints  they correspond to highly structured configuration
problems with a huge number of similar solutions  the second set of instances represents
product catalogue datasets used by nicholson  bridge  and wilson         these catalogues
are defined explicitly  as tables of solutions  they represent a much smaller and sparser set
of solutions 
   http   www itu dk research cla externals clib 

   

fiinteractive cost configuration over decision diagrams

instance
esvs
fs
bike 
pc 
pc
big pc
renault
travel
laptops
cameras
lettings

sol
   
   
   
   
   
   
   
    
   
   
   

x
  
  
  
  
  
   
  
 
  
 
 

dmin
 
 
 
 
 
 
 
 
 
 
 

dmax
  
  
  
  
  
  
  
   
   
   
   

davg
 
 
 
 
 
  
 
   
  
  
  

table    first seven instances are real world configuration problems available at configuration benchmarks library clib  remaining four instances are product catalogues
used by nicholson et al          for each instance we provide the number of solutions sol  number of variables x  the minimal  maximal and average domain
size 

    mdd size
in the first set of experiments  for each instance we generated a log encoded bdd b using
clab  jensen         we then extracted a corresponding mdd m from b  finally  we
expanded long edges in m and merged isomorphic nodes to generate a merged mdd m    
we compare the sizes of b  m and m   in table    for each structure we provide the number
of nodes v and edges e  we also provide the size of the bdd b  we conclude from the
table that both bdds and mdds are exponentially smaller than the size of the solution
space for configuration instances while not as significantly smaller for more diverse product
configuration catalogues  furthermore  we can see that the number of edges in merged
mdds m   is not significantly larger in comparison to extracted mdds m   hence  due to
simpler online algorithms  using merged mdds seems well suited for online reasoning  we
can also see that multi valued encoding in many cases reduces the number of nodes and
edges in comparison to bdds  even though compilation times are less important since the
generation of the mdd is performed offline  it is worth noting that for the largest instance 
renault  it took around  min and   sec to compile the instance into a bdd and extract an
mdd 
      encoding cost explicitly
we also investigated the impact of encoding cost information explicitly into an mdd 
for each instance we compared the size of the mdd without and with cost variables  m
and m c respectively   for configuration
benchmarks we introduce an additional variable
p
y             such that y   ni   ai xi where coefficients ai are randomly drawn from the
interval          we put variable y as the last in the ordering since for other positions we
get mdds of similar size  and putting y at the end allows easier theoretical analysis  since
   

fiandersen  hadzic    pisinger

instance
esvs
fs
bike 
pc 
pc
big pc
renault
travel
laptops
cameras
lettings

vb
   
     
     
      
      
       
       
    
    
    
    

eb
   
     
     
      
      
       
       
      
      
     
     

kb
 
  
  
   
   
     
     
   
   
  
  

vm
  
   
   
     
    
       
       
    
    
   
   

em
   
     
     
     
    
       
       
    
    
   
    

vm 
  
   
   
    
    
       
       
    
    
   
   

em 
   
    
    
    
    
       
       
    
    
   
    

table    comparison between bdds and mdds for instances from table    the second 
third and fourth column give the number of non terminal bdd nodes vb   the
number of edges eb and the size on disk of the bdd in kilobytes kb  the fifth
and the sixth column give the number of vertices vm and edges em in an mdd
m extracted from the bdd using algorithm   on page      the final two columns
provide the number of nodes and edges in a merged mdd  m     where all long
edges from extracted mdd m have been expanded 

product catalogues already contain the cost variable y  price   we produce a cost oblivious
version m by existentially quantifying y  m   y m c  
in table   we compare the mdds m and m c   for both structures we provide the number
of edges as well as the representation size in kilobytes  we also show the size of cost range
c sol   we observe that for configuration instances that have a high level of sharing and
compression  introducing cost information explicitly induces an order of magnitude increase
in size even when the cost range c sol  is limited      times increase for bike  instance  
mdds for the two largest instances could not be generated  however  for product catalogues
which have much less sharing  removing cost information does not have a dramatic effect 
in the worst case  the number of edges in m c is two times larger than in m   hence  the
experimental results confirm that introducing cost explicitly could have a dramatic effect
for mdd representations of highly compressed solution spaces  usually implicitly defined
through conjunction of combinatorial constraints  however  the effect of adding explicit cost
information might be modest when the solution space is defined explicitly  as a  sparse  list
of database entries  such as the case for product catalogues  furthermore  the size of the
cost range c sol  needs not be significant for a large increase in size to take place 
    response times for wcvd queries
in the second set of experiments  we evaluated the performance of wcvd queries over merged
mdd representations of configuration instances  we report the running times for both
computing u and d labels  algorithm    as well as computing valid domains  algorithm    
in table   we report both average and worst case running times over initial merged mdds
   

fiinteractive cost configuration over decision diagrams

instance
esvs
fs
bike 
pc 
pc
big pc
renault
travel
laptops
cameras
lettings

e
   
     
     
     
     
       
       
    
    
   
   

kb
 
  
  
   
   
     
     
  
  
  
 

ec
       
       
       
         
         
    
    
   
    

kb
     
      
      
      
      
   
   
  
  

c sol 
     
     
     
     
     
   
   
   
   

table    effect of explicitly encoding cost information  the second and third column indicate the number of edges and the representation size in kilobytes for cost oblivious
mdd  while the fourth and fifth column show the same for the mdd containing
cost information  column c sol  indicates the range of available costs over all
solutions 

from table    we also report the time necessary to restrict the mdd wrt  an assignment
 algorithm     we randomly create an additive cost function c by assigning for each variable
xi and each value a  di a cost ci  a  from          valid domains are computed wrt  the
maximal cost restriction k that is set to a value larger than the the length of the longest
mdd path wrt  cost function c  this ensures the longest execution time of algorithm   
each data point in the table is an average or a maximum over      executions on a fedora
  operating system  using dual quad core intel xeon processor running at      ghz  only
one core is used for each instance  empirical evaluation demonstrates that response times
are easily within acceptable interaction bounds even for the largest instances  where in worst
case the mdd nodes are labeled within      seconds  valid domains are computed within
     seconds and mdd is restricted wrt  an assignment within      seconds 
    response times for   wcvd query
we generated analogous statistics for   wcvd in table    we tested the performance of
our algorithms under the computationally most demanding circumstances  we operate over
the original  fully sized  mdd  even though during interaction it would be reduced due
to user assignments  furthermore  both cost functions c    c  have a global scope  and we
use no cost restrictions when computing u and d labels  i e  we ignore the condition in
line   of algorithm    and hence  u     and d r  correspond to an entire efficient frontier  
normally  cost functions would involve only a subset of variables and only a fraction of the
labels on the efficient frontier  within restrictions k    k    would be relevant for the user  we
generate cost functions c    c  by drawing costs ci  a  randomly from          for computing
valid domains  we use restrictions k    k  larger than the lengths of corresponding longest
   

fiandersen  hadzic    pisinger

instance
esvs
fs
bike 
pc 
pc
big pc
renault

labeling u  d
avg
max
      
    
      
    
      
    
      
    
      
    
      
    
      
    

valid domain
avg
max
      
    
      
    
      
    
      
    
      
    
      
    
      
    

restrict
avg
max
           
           
           
           
           
           
           

table    interaction time in seconds for wcvd queries  we report time required for computing u and d labels  valid domain computation and restriction wrt  a single
assignment 

paths  so that all possible solutions in the efficient frontier are allowed  this would lead to
the longest execution time of algorithm   
our algorithms can easily handle the first five instances  for the largest two instances 
if u and d labels are known  calculating valid domains can be done within a fraction of a
second  hence  a user can efficiently explore the effect of various cost restrictions k    k  wrt 
a fixed partial assignment  after a user assigns a variable  recomputing u and d labels
takes in total on average less than      seconds  or in worst case less than     seconds 
while this is already within acceptable interaction times  the usability of the system can be
further enhanced  e g  by using a layered display of information  always reacting with the
information that is fastest to compute  such as cvd or wcvd   and while the user is analyzing
it  execute more time consuming operations  in particular  the entire efficient frontier is
known as soon as u labels are generated  in worst case within      seconds  at this
stage  a user can explore the cost space while d labels are computed  on average within
the next      seconds   note that the running times can be reduced through a number of
additional schemes  e g  by computing u and d labels in parallel  if two or more processors
are present 

instance
esvs
fs
bike 
pc 
pc
big pc
renault

labeling u
avg
max
           
           
           
           
           
           
           

labeling d
avg
max
           
           
           
           
           
           
           

valid domain
avg
max
      
    
      
    
      
    
      
    
      
    
      
    
      
    

table    interaction time in seconds for   wcvd query 

   

fiinteractive cost configuration over decision diagrams

our empirical evaluation demonstrates the practical value of our approach  even the
np hard   wcvd query can be implemented with response times suitable for interactive use 
when applied to huge configuration instances  note  however  that in order to achieve such
performance it is critical to optimize mdd implementation as well as to utilize advanced
list operation techniques  our initial implementation efforts that failed to do so  led to
response times measured in tens of seconds for the largest instances 

   related work
there are several directions of related work  there is a large variety of representations
investigated in the area of knowledge compilation that might be suitable for supporting
interactive decision making with cost restrictions  there are also a number of approaches
to handle multiple cost functions in multi criteria optimization 
    compiled knowledge representation forms
in this paper we used binary decision diagrams  bdds  and multi valued decision diagrams
 mdds  as compiled representations of our csp model  however  there might be other compiled representations that might be more suitable for supporting interactive configuration 
any compiled representation that supports efficient consistency checking and conditioning
would in theory support polytime interactive configuration  to calculate valid domains it
suffices for each value to restrict the representation and check if it is consistent  any representation that supports efficient optimization and conditioning would support polytime
cost restrictions  it would suffice to restrict the representation with a value and check if the
minimum is smaller than a threshold value  we will therefore briefly survey some of the
related compiled representations and evaluate their suitability for our framework 
knowledge compilation structures  probably the most well known framework for
comparing various compiled forms of propositional theories is based on viewing them as
special classes of negation normal form  nnf  languages  darwiche   marquis        
nnfs are directed acyclic graphs where internal nodes are associated with conjunctions   
or disjunctions     while leaf nodes are labeled with literals  x x  or constants true or
false  by imposing various restrictions we get subclasses of nnf languages that support
efficient execution of various queries and transformations  more restrictive representations
are less succinct i e  they can be exponentially larger for some instances  but they support
a larger number of queries and transformations in polytime  a comprehensive overview of
such representations is presented by darwiche and marquis        
the critical restriction that makes nnf languages more tractable is decomposability 
it exploits variable independencies by enforcing that children of an  node have nonoverlapping
t variable scopes  hence  for a propositional formula f   f   f  such that
var f    var f        to evaluate satisfiability of f it suffices to independently evaluate
f  and f    a resulting language is decomposable negation normal form  dnnf  which
already supports in polytime two operations critical for calculating valid domains  consistency checking and conditioning  however  no general dnnf compiler exists  current
compilation approach based on exhaustive dpll search with caching isomorphic nodes
 huang   darwiche        constructs subsets of dnnf that satisfy an additional property
   

fiandersen  hadzic    pisinger

of determinism  any two children of an  node are mutually exclusive  the resulting structure is called deterministic decomposable negation normal form  d dnnf   this structure
would be an interesting target for cost configuration  for boolean csp models  additive
cost functions could be efficiently optimized over d dnnfs  for multi valued models however  more research is necessary on how to encode finite domain values in a way that allows
efficient cost processing  the tool support for compiling d dnnfs so far takes as an input
only cnf formulas  and we are unaware of extensions allowing direct compilation of general
csp models 
other known knowledge representation forms can be retrieved by enforcing additional
properties  for example  by further enforcing that all nodes are decision nodes and that
each variable is encountered at most once on each path  read once property  we get free
bdds  fbdds   after enforcing that all decision nodes appear wrt  fixed ordering we get
ordered bdds  obdds   in fact  the d dnnf compiler of huang and darwiche        can
be specialized to compile obdds  which proved to be a valuable alternative way to bdd
compilation 
weighted and multi valued knowledge compilation structures  most of the compiled representations for propositional theories have valued counterparts  many of them can
be seen as special cases of valued nnfs  vnnf   fargier   marquis         roughly  every
valued counterpart is obtained by changing the semantics of nodes  from logical operators
 such as     to general operators   that could be arithmetic  such as   and    values
of functions represented by these structures are no longer in        but in r  furthermore 
functions need not be defined over boolean domains  but could take finite domain values  in
general  subsets of vnnf that satisfy decomposability and operator distributivity support
efficient optimization  fargier   marquis        and could  in principle  be used to support
cost configuration 
construction of mdds based on encoding into bdds has been discussed by srinivasan 
kam  malik  and brayton         amilhastre et al         augmented automata of vempaty        with edge weights to reason about optimal restorations and explanations  these
weighted extensions correspond closely to our weighted mdds since the variant of automata
used by vempaty        is equivalent to merged mdds  hadzic et al          however  the
weights are used to compute different queries and while we generate mdds based on widely
available bdd packages  vempaty        does not report compilation tools used  semiring
labeled decision diagrams  sldds   wilson        label edges of an  unordered  mdd with
values from a semiring and allow computation of a number of queries relevant for reasoning
under uncertainty  due to relaxed ordering  sldds are more succinct than our weighted
mdds and are therefore an attractive target for cost based configuration  however  the
proposal for now seems to be theoretic  and does not seem to be implemented  arithmetic
circuits are directed acyclic graphs where internal nodes are labeled with summation and
multiplication operators while leaf nodes are labeled with constants or variables  darwiche 
       they could be seen as a valued extension of d dnnfs and hence are more succinct
than sldds  furthermore  they support efficient optimization when all coefficients are
positive  in bayesian context   they support efficient computing of most probable explanations   compilation technology for acs is not directly applicable to general csp models  as
it is used primarily for representing bayesian networks  it is based on compiling d dnnfs
or tree clustering approaches  darwiche               in our context  acs might be use   

fiinteractive cost configuration over decision diagrams

ful when optimizing non additive objective functions with multiplicative coefficients such
as multi linear functions induced by bayesian networks  however  for purely propositional
constraints over which an additive cost function should be optimized  a purely propositional
representation form  such as d dnnf  would be more adequate  furthermore  efficient optimization queries based on acs implicitly assume that all constants  at leaf nodes  are
positive  which is the case when modeling bayesian networks  but does not hold for general
cost functions 
global structure approaches  a number of techniques based on tree clustering  dechter
  pearl        and variable elimination  dechter        exploit variable independencies that
are present globally in a csp model  both time and space complexity of these techniques
turn out to be bounded exponentially in the size of an important graph connectivity notion
of tree width  bodlaender         while most of these techniques are geared towards enhancing search for a single  optimal  solution  adaptive consistency  bucket elimination etc  
the same concepts can be utilized for compiling representations of all solutions  and or
mdds  mateescu et al         when restricted to boolean variables are a subset of d dnnf
formulas  where variable labeling respects a pseudo tree obtained by a variable elimination
order  due to utilization of variable independencies through  nodes  they are more succinct than mdds and are therefore an attractive compilation target for cost configuration 
furthermore  they are already extended to handle weighted graphical models to support
bayesian reasoning  however  publicly available tool support is limited and does not allow
processing weighted cvd queries  tree driven automata  fargier   vilarem        utilize
tree clustering  dechter   pearl         to generate a partial variable ordering that is used
to generate an automaton  tree driven automata are equivalent to and or mdds and
when restricted to the boolean case they represent a subset of d dnnf languages called
strongly ordered decomposable decision graphs  so ddg   fargier   marquis         like
and or mdds they are more succinct than mdds and therefore are an interesting target
for cost configuration  however  tools for compiling tree driven automata are yet to become publicly available  and so far they have not been extended to handle costs  weighted
cluster trees of pargamin        are a weighted extension of cluster trees used to support
interactive configuration with preferences  however  there is no publicly available compilation tool  an internal company based implementation was presented   and the clusters are
represented explicitly without utilizing compressions based on local structure through decision diagrams or other compiled representations  tree of bdds  tob   subbarayan       
directly exploit tree clustering by representing each cluster as a bdd  however  they do not
support conditioning in polytime which is a fundamental transformation in supporting user
interaction  assigning variables   however  they can be compiled for instances for which
d dnnf compilation fails  and empirical evaluation shows that on average conditioning
times are short 
bdd extensions  there is a large variety of weighted extensions of binary decision diagrams  that represent real valued functions f         n  r rather than boolean functions
f         n          these extensions are limited to boolean variables and their adoption in
future would have to consider encoding techniques of multi valued variables that avoid explosion in size and support cost processing  comprehensive overviews of these extensions are
presented by drechsler         wegener         and meinel and theobald         an immediate extension is in the form of algebraic decision diagrams  adds   bahar  frohm  gaona 
   

fiandersen  hadzic    pisinger

hachtel  macii  pardo    somenzi         also known as multi terminal bdds  mtbdds  
that are essentially bdds with multiple terminal nodes   one for each cost value  this is a
structure oblivious approach to encoding cost  much as our approach of explicitly encoding
cost as a variable  the size grows quickly with increase of the number of terminals  therefore a number of bdd extensions are introduced based on labeling edges with weights  they
differ mostly on cost operators and decomposition types associated with nodes  edge valued
bdds  evbdds   lai   sastry        label every edge with an additive cost value c e  so
that for an edge e   u  u    the value val u    c e    val u    when v e       otherwise
val u    val u      factored evbdds  fevbdds   tafertshofer   pedram        introduce multiplicative weights  so that when v e       value val u    c e    w e   val u   
 otherwise val u    val u      affine adds  aadds  of sanner and mcallester       
further introduce additive and multiplicative edge weights for any edge  regardless of v e   
then val u    c e    w e   val u    for every edge  it has been shown that aadds are a
special case of valued nnfs  fargier   marquis        
an orthogonal extension of bdds is to change decomposition type of nodes  obdds are
based on shannon decomposition fu   xi fu   xi fu    we can change this decomposition
type to positive davio  pd  decomposition fu   f   xi f  or negative davio nd  decomposition fu   f   xi f    by using pd decomposition we get ordered functional decision
diagrams  ofdds   kebschull   rosenstiel         these structures are incomparable to
obdds  i e  they might be exponentially larger or smaller than obdds depending on the
instance  however  ordered kronecker functional decision diagrams  okfdds  drechsler 
sarabi  theobald  becker    perkowski        allow all three decomposition types  thus generalizing both obdds and ofdds  extending ofdds with additive edge weights leads
to binary moment diagrams  bmds   bryant   chen         adding also multiplicative
edge weights leads to multiplicative binary moment diagrams   bm ds   analogously  by
extending okfdds with additive and multiplicative edge weights we get kronecker binary
moment diagrams  kbmds  and k  bm ds respectively  drechsler  becker    ruppertz 
      
it is unclear whether boolean structures with advanced cost labeling schemes can be
used directly to represent multi valued csp models with cost functions  however  we could
compare the generalizations of such labeling schemes to multi valued structures  a multivalued generalization of evbdds would correspond roughly to our weighted mdds  however  introducing both additive and multiplicative weights as in aadds would correspond
to a generalization of our labeling scheme that could prove to be useful for labeling multilinear cost functions  namely  through introduction of multiplicative weights there would
be more subgraph sharing  and not as many nodes would have to be refined to accommodate non additive costs  however  due to multiplicative factors  it is not obvious if our
cashing technique based on computing u  d can be directly extended  especially if some of
the coefficients are negative  in case of additive cost functions though  all of these schemes
would correspond to our labeling scheme  most of these structures pay the price in less
efficient operators  such as apply operator  and larger memory requirements as they maintain more information  therefore  for compiling boolean functions  using these structures
would pose an unnecessary overhead in comparison to obdds  hence  for models with
a large number of propositional  configuration  constraints  and an additive cost function 
we would not gain from compiling using these structures even in the boolean case  when
   

fiinteractive cost configuration over decision diagrams

the cost function is non additive  introducing more elaborate cost representations might
prove beneficial for reducing memory requirements  but might make our label computing
technique unapplicable  from a practical point of view  while there are implementations
supporting boolean versions of these structures  we are not aware of any tool supporting
multi valued generalizations of these structures nor input language format that can be used
for specifying general propositional constraints 
    multi objective cost processing
our multiple cost configuration is close to approaches within a framework of multi criteria
optimization where a decision maker should find a solution subject to multiple  often conflicting  objectives  figueira et al         ehrgott   gandibleux         in particular  our
mdd based algorithms are very close to the approaches for solving multiobjective shortest
path problem  where for a given graph  v  e  each arc is labeled with multiple costs  and the
goal is typically to compute the set of pareto optimal  efficient  non dominated  solutions
 ehrgott   gandibleux        muller hannemann   weihe        tarapata        reinhardt   pisinger         it has been shown that the multi objective shortest path problem
is intractable  in particular  the number of pareto optimal solutions can grow exponentially with the number of vertices  v    but a fptas  fully polynomial time approximation
scheme  has been developed for approximating the set of pareto optimal solutions  however  the way in which the solution space of multi criteria optimization problems is explored
is significantly different from our approach  typically  in each interaction step a subset of
pareto optimal solutions is computed and afterwards a decision maker interactively navigates through the set in order to reach the satisfying compromising solution  interactive
methods in multi criteria optimization usually compute a subset of solutions on the efficient
frontier  suggest it to the user for evaluation  and based on his input compute a new set of
solutions  figueira et al         chapter      these techniques would use the user input to
better estimate the way to aggregate multiple objectives  and some of them would require
the user to explicitly assign weights of importance to objectives  in contrast  instead of being primarily driven by the costs of solutions  our interactive approach supports reasoning
about the variable assignments in the solutions themselves through valid domains computation  it is an inherently different way of exploring the solution space which is more adequate
for users that want explicit control over variable assignments and not just indicating the
importance of cost functions 
most of the approaches in the csp community model preferences as soft constraints
 meseguer  rossi    shiex        that can be partially satisfied or violated  with a goal to
find the most satisfying or the least violating solution  this usually presupposes that preferences can be aggregated via algebraic operators  and as such is more related to single cost
optimization problems  however  the approach by rollon and larrosa        deals with
multiple costs explicitly  it utilizes global structure  i e  variable independencies  of the
weighted csp model to compute an efficient frontier through bucket based variable elimination  a highly related approach that utilizes global structure of the generalized additive
independence  gai  network is presented by dubus  gonzales  and perny         in order
to compute the efficient frontier  the authors use a message passing computation mechanism which is analogous to computing buckets  in addition  the authors develop a fully
   

fiandersen  hadzic    pisinger

polynomial approximation scheme to approximate the efficient frontier and demonstrate
the significant improvement in performance  however  neither of these methods can exploit
the fact that the solution space of hard constraints is available in a compiled representation 
instead  these methods operate only over an unprocessed model specification  whether it is
a weighted csp or a gai network  treating both the hard and soft constraints uniformly
and hence allowing the scope of hard constraints to decrease the variable independencies in
the model  and thus decrease the performance of the algorithms   furthermore  the result
of computation of these methods does not allow a full exploration of efficient solutions  for
each value on the frontier only a single supporting efficient solution is maintained while we
maintain for each efficient value the set of all supporting efficient solutions  hence  it is not
possible to efficiently retrieve valid domains even after the algorithms terminate  it would
be interesting to see however  whether these methods could be adopted to work over mdd
representations of a solution space 
knapsack constraints are special case of two cost configuration problems over a universally true mdd  trick        used dynamic programming to propagate knapsack constraints during csp search  fahle and sellmann        presented an approximated filtering
algorithm  based on various integer programming bounds for the knapsack problem  sellmann        presented a fully polynomial time approximation algorithm for approximated
filtering  however  these techniques were considered in constraint propagation context and
none of them considered processing over existing mdd structure 

   conclusions and future work
in this paper we presented an extension of bdd based interactive configuration to configuring in the presence of cost restrictions  we guarantee polynomial time cost configuration
when the cost function is additive and feasible solutions are represented using multi valued
decision diagram  we process cost restrictions over an mdd which is extracted from an
underlying bdd  we therefore strictly extend bdd based configuration of hadzic et al 
       to support cost bounding of additive cost functions without incurring exponential
increase in complexity  our implementation delivers running times that easily satisfy interactive response time requirements  furthermore  our approach can be extended to support
bounding in the presence of non additive and semiring based costs 
we further extended our approach by considering cost bounding wrt  multiple costs 
we proved that this is an np hard problem in the input mdd size even when processing
only two linear inequalities with positive coefficients and boolean variables  however  we
provided a pseudo polynomial scheme and fully polynomial approximation scheme for twocost configuration  which  in principle  can be extended to any k cost configuration for a
fixed k   our empirical evaluation demonstrated that despite inherent hardness of this
problem we can still provide satisfying performance in interactive setting  our interaction
based on computing valid domains wrt  multiple cost restrictions is a novel addition to
interaction modes within multiple criteria decision making  figueira et al          we
provide an explicit control over variable assignments as well as cost functions 
in the future we plan to investigate other compiled representations over which delivering
cost configuration might be efficient and to investigate practical approaches to processing
non unary cost functions  in particular  we plan to examine whether existing methods to
   

fiinteractive cost configuration over decision diagrams

multiobjective non unary optimization  e g   rollon   larrosa        dubus et al        
can be adopted to operate over mdd representation of a solution space 

acknowledgments
we would like to thank the anonymous reviewers for their extensive comments that helped
us improve the paper  we would also like to thank erik van der meer for providing the
t shirt example  the first version of this paper was created while tarik hadzic was at the
it university of copenhagen  while the updated version was made at the cork constraint
computation centre with a support from an ircset embark initiative postdoctoral fellowship scheme 

references
amilhastre  j   fargier  h     marquis  p          consistency restoration and explanations
in dynamic csps application to configuration  artificial intelligence                
    
bahar  r   frohm  e   gaona  c   hachtel  e   macii  a   pardo  a     somenzi  f         
algebraic decision diagrams and their applications  in ieee acm international conference on cad  pp         
bartzis  c     bultan  t          construction of efficient bdds for bounded arithmetic
constraints  in garavel  h     hatcliff  j   eds    tacas  vol       of lecture notes
in computer science  pp          springer 
bodlaender  h  l          a tourist guide through treewidth  acta cybernetica          
bollig  b     wegener  i          improving the variable ordering of obdds is np complete 
computers  ieee transactions on                  
bryant  r  e          graph based algorithms for boolean function manipulation  ieee
transactions on computers             
bryant  r  e     chen  y  a          verification of arithmetic circuits with binary
moment diagrams  in in proceedings of the   nd acm ieee design automation
conference  pp         
darwiche  a     marquis  p          a knowledge compilation map  journal of artificial
intelligence research             
darwiche  a          a logical approach to factoring belief networks  in fensel  d  
giunchiglia  f   mcguinness  d     williams  m  a   eds    kr      principles
of knowledge representation and reasoning  pp         san francisco  california 
morgan kaufmann 
darwiche  a          a differential approach to inference in bayesian networks  journal of
the acm                 
   

fiandersen  hadzic    pisinger

dechter  r          bucket elimination  a unifying framework for reasoning  artificial
intelligence                  
dechter  r     pearl  j          tree clustering for constraint networks  artificial intelligence                 
drechsler  r   sarabi  a   theobald  m   becker  b     perkowski  m  a          efficient
representation and manipulation of switching functions based on ordered kronecker
functional decision diagrams  in dac     proceedings of the   st annual conference
on design automation  pp         new york  ny  usa  acm 
drechsler  r          binary decision diagrams in theory and practice  international journal
on software tools for technology transfer  sttt                 
drechsler  r   becker  b     ruppertz  s          k bmds  a new data structure for
verification  in edtc     proceedings of the      european conference on design
and test  p    washington  dc  usa  ieee computer society 
dubus  j  p   gonzales  c     perny  p          multiobjective optimization using gai
models  in boutilier  c   ed    ijcai  pp           
ehrgott  m     gandibleux  x          a survey and annotated bibliography of multiobjective combinatorial optimization  or spektrum             
fahle  t     sellmann  m          cost based filtering for the constrained knapsack
problem  annals of operations research            
fargier  h     marquis  p          on the use of partially ordered decision graphs in
knowledge compilation and quantified boolean formulae  in proceedings of aaai
      pp       
fargier  h     marquis  p          on valued negation normal form formulas  in proceedings of ijcai       pp         
fargier  h     vilarem  m  c          compiling csps into tree driven automata for
interactive solving  constraints                
figueira  j  r   greco  s     ehrgott  m          multiple criteria decision analysis  state
of the art surveys  springer verlag  boston  dordrecht  london 
garey  m  r     johnson  d  s          computers and intractability a guide to the theory
of np completeness  w h freeman   co 
hadzic  t   subbarayan  s   jensen  r  m   andersen  h  r   mller  j     hulgaard  h 
        fast backtrack free product configuration using a precompiled solution
space representation  in in proceedings of peto conference  pp          dtutryk 
hadzic  t     andersen  h  r          a bdd based polytime algorithm for cost bounded
interactive configuration  in proceedings of aaai       pp       
   

fiinteractive cost configuration over decision diagrams

hadzic  t   hansen  e  r     osullivan  b          on automata  mdds and bdds in
constraint satisfaction  in proceedings of the ecai      workshop on inference
methods based on graphical structures of knowledge 
huang  j     darwiche  a          using dpll for efficient obdd construction  in
proceedings of sat       pp         
huang  j     darwiche  a          dpll with a trace  from sat to knowledge compilation 
in kaelbling  l  p     saffiotti  a   eds    ijcai  pp          professional book
center 
ibarra  o     kim  c          fast approximation algorithms for the knapsack and sum of
subset problem  journal of the acm             
jensen  r  m          clab  a c   library for fast backtrack free interactive product
configuration  http   www itu dk people rmj clab  
kebschull  u     rosenstiel  w          efficient graph based computation and manipulation of functional decision diagrams  design automation        with the european
event in asic design  proceedings    th  european conference on         
kellerer  h   pferschy  u     pisinger  d          knapsack problems  springer  berlin 
germany 
lai  y  t     sastry  s          edge valued binary decision diagrams for multi level hierarchical verification  in dac     proceedings of the   th acm ieee conference
on design automation  pp         los alamitos  ca  usa  ieee computer society
press 
lichtenberg  j   andersen  h  r   hulgaard  h   mller  j     rasmussen  a  s         
method of configuring a product  us patent no            
lind nielsen  j         
buddy   a binary
http   sourceforge net projects buddy 

decision

diagram

package 

mateescu  r   dechter  r     marinescu  r          and or multi valued decision diagrams  aomdds  for graphical models  journal of artificial intelligence research 
           
meinel  c     theobald  t          algorithms and data structures in vlsi design 
springer 
meseguer  p   rossi  f     shiex  t          soft constraints  in rossi  f   van beek 
p     walsh  t   eds    handbook of constraint programming  foundations of artificial intelligence  chap     pp          elsevier science publishers  amsterdam  the
netherlands 
miller  d  m     drechsler  r          on the construction of multiple valued decision
diagrams  in proceedings of the   nd international symposium on multiple valued
logic  ismvl     p      washington  dc  usa  ieee computer society 
   

fiandersen  hadzic    pisinger

mller  j   andersen  h  r     hulgaard  h          product configuration over the internet 
in informs conference on information systems and technology 
muller hannemann  m     weihe  k          pareto shortest paths is often feasible in
practice  in wae     proceedings of the  th international workshop on algorithm
engineering  pp         london  uk  springer verlag 
nicholson  r   bridge  d  g     wilson  n          decision diagrams  fast and flexible
support for case retrieval and recommendation  in proceedings of eccbr      
pp         
pargamin  b          extending cluster tree compilation with non boolean variables in
product configuration  a tractable approach to preference based configuration  in
ijcai   workshop on configuration 
reinhardt  l  b     pisinger  d          multi objective and multi constrained nonadditive shortest path problems  computers and operations research  submitted 
technical report version available at  http   man dtu dk upload institutter 
ipl publ publikationer        rapport      pdf 
rollon  e     larrosa  j          bucket elimination for multiobjective optimization problems  journal of heuristics                   
sanner  s     mcallester  d  a          affine algebraic decision diagrams  aadds  and
their application to structured probabilistic inference  in proceedings of ijcai      
pp           
schuurman  p     woeginger  g  j          approximation schemes  a tutorial  in
moehring  r   potts  c   schulz  a   woeginger  g     wolsey  l   eds    lectures on
scheduling  forthcoming 
sellmann  m          the practice of approximated consistency for knapsack constraints 
in mcguinness  d  l     ferguson  g   eds    aaai  pp          aaai press   the
mit press 
somenzi  f          cudd  colorado university decision diagram package  ftp   vlsi
 colorado edu pub  
srinivasan  a   kam  t   malik  s     brayton  r  k          algorithms for discrete
function manipulation  in international conference on cad  pp       
subbarayan  s   jensen  r  m   hadzic  t   andersen  h  r   hulgaard  h     mller  j 
        comparing two implementations of a complete and backtrack free interactive
configurator  in proceedings of cp   cspia workshop  pp        
subbarayan  s  m          on exploiting structures for constraint solving  ph d  thesis 
it university of copenhagen  copenhagen 
tafertshofer  p     pedram  m          factored edge valued binary decision diagrams  in
formal methods in system design  vol      pp          kluwer 
   

fiinteractive cost configuration over decision diagrams

tarapata  z          selected multicriteria shortest path problems  an analysis of complexity  models and adaptation of standard algorithms  international journal of applied
mathematics and computer science                 
trick  m          a dynamic programming approach for consistency and propagation for
knapsack constraints  in  rd international workshop on integration of ai and or
techniques in constraint programming for combinatorial optimization problems cpai or  pp         
vempaty  n  r          solving constraint satisfaction problems using finite state automata 
in proceedings of the tenth national conference on artificial intelligence  pp     
    
walsh  t          sat v csp  in dechter  r   ed    proceedings of cp       lecture notes
in computer science  pp         
wegener  i          branching programs and binary decision diagrams  society for industrial and applied mathematics  siam  
wilson  n          decision diagrams for the computation of semiring valuations  in
proceedings of the nineteenth international joint conference on artificial intelligence
 ijcai      pp         

   

fi