journal of artificial intelligence research                 

submitted        published      

modularity aspects of disjunctive stable models
tomi janhunen
emilia oikarinen

tomi janhunen tkk fi
emilia oikarinen tkk fi

helsinki university of technology
department of information and computer science
p o  box       fi       tkk  finland

hans tompits
stefan woltran

tompits kr tuwien ac at
woltran dbai tuwien ac at

technische universitt wien
institut fr informationssysteme
favoritenstrae      a      vienna  austria

abstract
practically all programming languages allow the programmer to split a program into
several modules which brings along several advantages in software development  in this
paper  we are interested in the area of answer set programming where fully declarative and
nonmonotonic languages are applied  in this context  obtaining a modular structure for
programs is by no means straightforward since the output of an entire program cannot in
general be composed from the output of its components  to better understand the effects
of disjunctive information on modularity we restrict the scope of analysis to the case of
disjunctive logic programs  dlps  subject to stable model semantics  we define the notion
of a dlp function  where a well defined input output interface is provided  and establish
a novel module theorem which indicates the compositionality of stable model semantics
for dlp functions  the module theorem extends the well known splitting set theorem and
enables the decomposition of dlp functions given their strongly connected components
based on positive dependencies induced by rules  in this setting  it is also possible to split
shared disjunctive rules among components using a generalized shifting technique  the
concept of modular equivalence is introduced for the mutual comparison of dlp functions
using a generalization of a translation based verification method 

   introduction
practically all programming languages used in software development allow the programmer
to split a program into several modules which interact through well dened input output
interfaces  given this  the entire program can be viewed as a composition of its component modules which are typically linked together in the respective run time environment 
the expected benets of modular program development are manifold  first  it imposes a
good programming style to be followed by the programmer  a complex software system
is much easier to develop as a set of interacting components rather than a monolithic program  second  a modular architecture allows for additional exibility as regards delegating
programming tasks amongst a team of programmers  in this setting  the goal of each programmer is to implement desired input output behavior s  in terms of concrete module s 
which together implement the software system being developed  third  modular program
c
    
ai access foundation  all rights reserved 

fijanhunen  oikarinen  tompits   woltran

design can also be exploited in order to boost the execution of programs  program optimization is also facilitated by structural information encompassed by module interfaces 
answer set programming  asp   marek   truszczyski        niemel        gelfond
  leone        is a paradigm for declarative problem solving in which solutions of problems
are described in terms of rules subject to a nonmonotonic semantics based on stable models
 gelfond   lifschitz         in typical problem representations  a tight correspondence
between solutions and stable models is sought for  and default negation is fully exploited
in order to obtain concise encodings of relations involved in such problem descriptions 
furthermore  recursive denitions enable  e g   the representation of closures of relations
in a very natural way  due to ecient implementations and emerging applications  the
paradigm has received increasing attention during the past two decades   in the meantime 
a number of extensionssuch as disjunctions  weight constraints  and aggregateshave been
proposed to the basic syntax of normal logic programs  in this paper  we concentrate on the
class of disjunctive logic programs  dlps  which is appropriate for solving search problems
residing up to the second level of the polynomial time hierarchy  the semantical account
of dlps is based on the respective generalization of stable model semantics  gelfond  
lifschitz        
in this paper  our goal is to investigate modularity in the context of dlps and stablemodel semantics  since stable models are dened only over complete programs  they do not
lend themselves to modular programming prima facie  perhaps for this reason  the concept
of a module has not yet raised too much attention in the realm of answer set programming 
except for a few dedicated papers  gaifman   shapiro        eiter  gottlob    veith      b 
baral  dzifcak    takahashi         modules mostly appeared as a by product in studies
of formal properties like stratication  splitting  or  more lately  in work on equivalence
relations between programs  lifschitz   turner        eiter  gottlob    mannila      a 
eiter  ianni  lukasiewicz  schindlauer    tompits         in a recent approach of oikarinen
and janhunen      a   the modular architecture put forth by gaifman and shapiro       
is accommodated for the classes of normal and smodels programs  the main result is
a module theorem which links stable models associated with individual modules to those
of their composition  such a result is signicant as it indicates that stable models are
compositional in very much the same sense as classical models are in propositional logic 
the only major restriction implied by the module theorem is that the denition of any set
of positively interdependent atoms must be given within the same module 
besides the general benets of modular program development discussed above  we are
also looking for potential computational advantages of modularizing reasoning tasks in asp 
in this context  the search for stable models is probably the most central reasoning task 
results like the module theorem discussed above provide the basis for modularizing the
search task  extra care  however  is required because the computation of stable models
for modules in separation is not necessarily ecient  more sophisticated methods  such as
identifying cones of influence in boolean circuits  junttila   niemel         can be devised
to identify modules which are relevant for the search of stable modelsthe rest is only used
to expand a qualied stable model to one for the entire program  this strategy alleviates the
treatment of extremely large program instances and it is also amenable to query evaluation 
   the   th anniversary of stable model semantics was celebrated at iclp   which was held in udine 
italy  in december      

   

fimodularity aspects of disjunctive stable models

unfortunately  contemporary disjunctive answer set solvers  such as claspd  drescher
et al          cmodels  giunchiglia  lierler    maratea         dlv  leone et al          and
gnt  janhunen  niemel  seipel  simons    you         exhibit little support for modular
reasoning although related techniques like strongly connected components are exploited internally  there are also other reasoning tasks that can be boosted with a modular approach 
for instance  the optimization of answer set programs gives rise to the problem of verifying
whether dierent versions of programs have the same answer sets  as demonstrated by
oikarinen and janhunen         such verication tasks may benet from modularization 
and  in particular  if approximation techniques based on modular equivalence are introduced 
following this idea  the rst modular o line optimizer of answer set programs  called modopt  has recently been implemented  janhunen      b  
there are also other interesting applications of modules in sight  gebser et al       a 
propose an incremental technique for answer set solving  the idea is to gradually extend a
program instance in terms of additional modules  e g   when solving ai planning problems 
moreover  theoretical results like the splitting set theorem  lifschitz   turner        and the
module theorem can be directly exploited in correctness proofs  for instance  it is proved
by oikarinen and janhunen      b  that the models of a prioritized circumscription can
be captured with disjunctive stable models using a particular translation  a similar proof
strategy is adopted in theorem     of this paper 
we anticipate that compositional semantics can also prove useful if one tries to boost the
search for stable models via parallelization  e g   by computing stable models for modules in
parallel  however  in order to avoid excessive communication costs  extra caution is needed
when stable models computed in separation are linked together and potentially rejected 
one possibility is to identify mutually independent modules as the basis for distribution 
besides this aspect  modularization may also lead to novel methods for the  non parallelized 
computation of stable models  other than the traditional ones 
structure and preview of results in this paper  we concentrate on the formal underpinnings of modular programming in the context of disjunctive logic programs under
stable model semantics  we proceed as follows  our rst goal is to generalize the theory
developed for normal programs and smodels programs  oikarinen   janhunen      a  to
the case of disjunctive programs  to this end  we rst introduce the notion of a dlpfunction in section    the term goes back to gelfond and gabaldon        who introduced
lp functions as  partial  denitions of new relations in terms of old  known ones  to enable such a functional view of disjunctive programs  they are endowed with a well dened
input output interface  the idea is to partition the signature of a program encapsulated in
this way into input atoms  output atoms  and hidden  or local   atoms  these distinctions
provide the basis for the systematic composition of larger disjunctive logic programs out
of program modules  however  arbitrary combinations of program modules are not meaningful and  rst of all  we adopt syntactic restrictions introduced by gaifman and shapiro
       from the context of negation disjunction free logic programs  the interplay of default negation and disjunctions brings along new factors which lead to a relaxation of the
restrictions in the sense that program modules are allowed to share rules  then  having
the basic syntactic issues of dlp functions laid out  we concentrate on their semantics in
section    in this respect  we follow a strict model theoretic approach and  in particular 
   

fijanhunen  oikarinen  tompits   woltran

address the role of input atoms when it comes to viewing dlp functions as mathematical
functions  we proceed step by step and assign three dierent classes of models to each
dlp function  viz  classical models  minimal models  and stable models  the last provides
an appropriate generalization of disjunctive stable models  gelfond   lifschitz        in the
presence of input atoms 
our second objective is to establish the adequacy of the concept of a dlp function in
view of a compositional semantics  this will be witnessed by the main result of the paper 
viz  the module theorem which shows how stable models of a dlp function    can be
alternatively obtained as unions of compatible stable models for the modules constituting
  the proof of the theorem is based on the notions of completion  clark        and loop
formulas  lin   zhao        lee   lifschitz        which are rst lifted to the case of dlpfunctions in section   as a preparatory step  the proof of the module theorem follows as the
main topic of section    the result is non trivial because the underlying semantics based on
stable models is inherently nonmonotonic  this feature was already recognized by gaifman
and shapiro        in a much simpler setting of denite programsneither involving default
negation nor disjunctions  as observed by them  too  syntactic restrictions on program
composition are necessary in order to guarantee compositionality properties for the semantics
based on herbrand models   in the current paper  we strive for analogous results but in
the case of programs permitting both default negation and disjunctions  it turns out that
strongly connected components of positive dependency graphs provide a key criterion when
it comes to conning program composition  the compositionality properties of disjunctive
programs under stable model semantics have also arisen in the context of the so called
splitting set theorem  lifschitz   turner        eiter et al       a         in fact  the
module theorem established herein is a proper generalization of its predecessor  oikarinen  
janhunen      a   we illustrate the potential of our modular architecture by the evaluation
of quantied boolean formulas  qbfs   which serve as canonical representatives of the classes
of the polynomial time hierarchy  ph   due to basic complexity results established by eiter
and gottlob         it is natural from our perspective to concentrate on the second level of
the ph in the case of disjunctive programs 
the third aim of this paper is to have a look at some particular applications of the module theorem in disjunctive logic programming  in section    we take an opposite view to
the modular construction of dlp functions and consider possibilities for their decomposition
even in the absence of any other structural information  it turns out that strongly connected
components can also be exploited in this respect but  in addition  the occurrences of hidden
atoms must be taken into account when splitting a dlp function into its components  as
demonstrated in section    our results open new prospects as regards unwinding disjunctions
using the principle of shifting  gelfond  przymusinska  lifschitz    truszczyski        dix 
gottlob    marek        eiter  fink  tompits    woltran         a proper generalization
of this principle that partially covers also programs involving head cycles is formulated and
proved correct  moreover  due to the modular nature of dlp functions  it makes perfect
sense to compare them as modules  the notion of modular equivalence is introduced for this
purpose in section    interestingly  modular equivalence supports substitutions of equivalent
programs and it also lends itself for translation based verification as put forth by oikarinen
   the main concern of gaifman and shapiro        is modularity with respect to the logical consequences
of a definite program and hence the intersection of its herbrand models 

   

fimodularity aspects of disjunctive stable models

and janhunen              in the related cases of ordinary equivalence and smodels programs  section   contrasts our approach with related work  finally  section    provides a
brief summary of results and concludes this paper 

   the class of dlp functions
the topic of this section is the syntax of dlp functions as well as syntactic restrictions
imposed on composition of dlp functions  a disjunctive rule is an expression of the form
a       an  b            bm   c            ck  

   

where n  m  k     and a            an   b            bm   and c            ck are propositional atoms  since
the order of atoms is considered insignicant  we write a  b  c as a shorthand for rules of
form      where a    a            an    b    b            bm    and c    c            ck   are the respective
sets of atoms  the basic intuition behind a rule a  b  c is that if each atom in the
positive body b can be inferred and none of the atoms in the negative body c  then some
atom in the head a can be inferred  when both b and c are empty  we have a disjunctive
fact  written a   if a is empty  then we have a constraint  written   b  c 
a disjunctive logic program  dlp  is conventionally formed as a nite set of disjunctive
rules  additionally  we want a distinguished input and output interface for each dlp  to this
end  we extend a denition originally proposed by gaifman and shapiro        to the case
of disjunctive programs   it is natural that such an interface imposes certain restrictions on
the rules allowed in a module  given a set r of disjunctive rules  we write at r  for the
signature of r  i e   the set of  ground  atoms eectively appearing in the rules of r 
definition     a dlp function    is a quadruple hr  i  o  hi  where i  o  and h are
pairwise distinct sets of input atoms  output atoms  and hidden atoms  respectively  and r
is a dlp such that for each rule a  b  c  r 
   a  b  c  i  o  h  and
   if a      then a   o  h      
a dlp function    hr  i  o  hi is occasionally identied with r and  by a slight abuse
of notation  we write a  b  c   to denote a  b  c  r  by the rst condition
of denition      the rules in a dlp function  must obey the interface specication of  
i e   at r   i  o  h  as regards the sets of atoms i  o  and h involved in the module
interface  the atoms in i  o are considered to be visible and hence accessible to other
dlp functions conjoined with   either to produce input for  or to utilize the output of
  on the other hand  the hidden atoms in h are used to formalize some auxiliary concepts
of  which may not make sense in the context of other dlp functions but may save space
substantially as demonstrated  e g   by janhunen and oikarinen        example       the
second condition of denition     is concerned with the set of atoms o  h defined by the
rules of r  the principle is that each non empty disjunctive head must involve at least one
atom from o  h  this is just to ensure that a dlp function  must not interfere with
   similar approaches within the area of asp have previously been introduced by gelfond and gabaldon
        janhunen         and oikarinen and janhunen      a  

   

fijanhunen  oikarinen  tompits   woltran

the denitions of its input atoms i in terms of rules a  b  c satisfying a  i  but
otherwise  the rules of  may be conditioned by input atoms   given a set s of atoms  we
distinguish the set of rules that dene the atoms of s in r  i e   the set of defining rules
def r  s     a  b  c  r   a  s      

   

our next objective is to specify the conditions on which the composition of dlp functions
may take place  roughly speaking  the idea is that larger dlp functions can be formed in
a modular fashion using smaller dlp functions as components  as observed already by
gaifman and shapiro         syntactic restrictions on program composition are necessary in
order to guarantee compositionality properties for the semantics based on herbrand models  even for the simple case of denite programs  thus  program union as operator for
composition without further restrictions is not satisfactory with respect to compositionality 
we start by adapting the construction of gaifman and shapiro        to the case of
disjunctive programs 
definition     two dlp functions     hr    i    o    h  i and     hr    i    o    h  i respect the input output interfaces of each other if and only if
    i   o   h     h     
    i   o   h     h     
   o   o     
   def r   o      def r  r   o     and
   def r   o      def r  r   o    
the rst three of the conditions above are due to gaifman and shapiro        and
they imply that the sets o    h    o    and h  are mutually pairwise distinct  violations
with respect to the rst two conditions can be circumvented by a renaming strategy  for
instance  if an atom a  h  appears in i   o   h    hence violating the second condition 
it is possible to replace all occurrences of a in   by a new atom a   i   o   h  not
appearing in     this removes the conict with respect to a and so forth  
on the other hand  the last two conditions of denition     concern the distribution
of rules involved in the definitions     of sets of atoms o  and o    i e   the sets of rules
def r   o    and def r   o     in r  and r    respectively  as regards disjunctive rules  the
principle is that these sets of dening rules must remain intact when the union r   r 
is formed which means that each module is supposed to have copies of all rules that form
the denition of its output atoms  in spite of this  two modules   and   subject to
the conditions of denition     may eectively share disjunctive rules a  b  c with a
non empty head a such that a  o      and a  o       as to be demonstrated next 
   in particular  input atoms in the head a of a rule act very much like atoms in the negative body c 
   an opposite view to program composition is considered in section    where possibilities for decomposing a disjunctive program into smaller dlp functions are studied  as a counterpart to renaming  a
revealing operator introduced in definition     can be used for circumventing the first two conditions in
definition     

   

fimodularity aspects of disjunctive stable models

example     consider the following two dlp functions  
 b 
a  b  c 
d  a  d
 a  c 

and

 a 
a  b  c 
e  a  e
 b  c 

more formally  we have     hr     a  c    b    d i and     hr     b  c    a    e i such that
r   r     a  b  c   we show that   and   respect the input output interfaces of
each other  first  both hidden atoms d and e occur in exactly one of the two programs and
thus the first two conditions in definition     are satisfied  second  we have disjoint output
atoms  viz  atom b in   and atom a in     finally  we have def r    b     def r  r    b    
def r    a     def r  r    a      a  b  c   which shows that also the final two conditions
in definition     are satisfied  and as far as syntax is concerned  it makes sense to compose
a larger dlp function which is obtained as a kind of a union of   and     see     below 
in contrast to disjunctive programs  shared rules do not arise in the context of normal
logic programs since only one head atom is allowed in each rule  the same can be stated
about smodels programs  simons  niemel    soininen        although such programs
may contain  among other rule types  choice rules of the form
 a            an    b  c

   

with heads of cardinality greater than one  as observed by oikarinen and janhunen      a  
the heads of choice rules possessing multiple atoms can be freely split without aecting
their semantics  when splitting such rules into n dierent rules  ai    b  c where
   i  n  the only concern is the creation of n copies of the rule body b  c which could
reserve a quadratic space in the worst case  a new atom can be introduced to circumvent
this  but the nature of proper disjunctive rules      the subject of study in this paper  is
somewhat dierent  unlike choice rules  disjunctive rules may interact through rule heads 
in example      the denition of a depends on b and vice versa  however  given a choice rule
 a  b   c for instance  the choices regarding a and b are independent of each other  if c is
true  both atoms can have any truth value  this is quite dierent from the interpretation of
ab  c which makes either a or b true given that c is true  to grasp the interaction of a and
b it is natural to have b as an input to the denition of a and  conversely  a as input to that of
b  as to be demonstrated in section    shared rules can be rewritten so that input atoms are
removed from the rule head but as a drawback of the rewriting technique  the compactness
of the representation is partly lost  therefore  we appreciate the extra exibility provided
by shared rules and interpret them to reect the true nature of disjunctive rules 
in general  dlp functions are composed according to the following principle 

   here and henceforth we make use of a tabular format to represent dlp functions  the output signature
is given on the top  the input signature at the bottom  and the rules are listed in between  thus  the
declaration of the hidden signature remains implicit 

   

fijanhunen  oikarinen  tompits   woltran

o 
l

i 
h 

h 
i 

 

o 

i   o 

o 

h 

i 

i   i 

i 

h 

o 

o   i 

figure    treatment of signatures by the composition operator  
definition      composition  let     hr    i    o    h  i and     hr    i    o    h  i be
two dlp functions that respect the input output interfaces of each other  then  the composition of   and   is defined and determined by
       hr   r     i    o      i    o     o   o    h   h  i 

   

the treatment of atom types under denitions     and     is summarized in figure   
the two symmetric gures on the left hand side illustrate the signatures of dlp functions
    hr    i    o    h  i and     hr    i    o    h  i subject to composition  input signatures
and output signatures are emphasized by light gray and dark gray shadings  respectively 
the superposition of the two gures yields the diagram given on the right which represents
the resulting nine categories of atoms  only three of them may involve shared atoms that
originate from both   and     the interface conditions introduced above should be intuitive
to readers acquainted with the principles of object oriented programming 
   although   and   must not share hidden atoms  they may share input atoms  i e  
i   i      is allowed  output atoms are treated dierently as o   o     is assumed 
   an input atom of   becomes an output atom in      if it appears as an output
atom in     i e     provides the input for   in this setting  the input atoms of  
are treated in a symmetric fashion 
   the hidden atoms of   and   retain their status in       
example     recall example     in which we showed that dlp functions   and   respect
the input output interfaces of each other  thus  the composition of   and   is defined  and
     is hr   r    i  o  hi where the set i of input atoms is   a  c     a      b  c     b    
 c   the set o of output atoms is  a    b     a  b   and the set h of hidden atoms is
 d    e     d  e   i e   using our tabular format to represent modules  we have
 b 
a  b  c 
d  a  d
 a  c 



 a 
a  b  c 
e  a  e
 b  c 

 

 a  b 
a  b  c 
d  a  d 
e  a  e
 c 

the definitions of a and b in      share the rule a  b  c  thanks to the flexibility of
definition      we are also able to split      into its components whenever appropriate 
   

fimodularity aspects of disjunctive stable models

following previous approaches  gelfond   gabaldon        oikarinen   janhunen 
    a   we dene the signature at   of a dlp function    hr  i  o  hi as i  o  h  
for notational convenience  we distinguish the visible and hidden parts of at   by setting
atv      i  o and ath      h   at     atv     respectively  moreover  ati    and
ato    are used to refer to the sets of input and output atoms of   respectively  these
notations provide us a way to access the module interface when it is left implicit  e g   to
neglect the internal structure of modules  lastly  for any set s  at   of atoms  we denote the projections of s on ati     ato     atv     and ath    by si   so   sv   and sh  
respectively 
in formal terms  a dlp function    hr  i  o  hi is designed to provide a mapping
from subsets of i to a set of subsets of o  h in analogy to lp functions formalized by
gelfond and gabaldon         however  the exact denition of this mapping is deferred
until section   where the semantics of dlp functions will be anchored  in the sequel  the
 syntactic  class of dlp functions is denoted by d  it is assumed  for the sake of simplicity 
that d spans over a xed  at most denumerable  signature at d   so that at    at d 
holds for each dlp function   d  given dlp functions         and   that pairwise
respect the input output interfaces of each other  it holds that
       d  closure  
                 for the empty dlp function    h      i  identity  
              commutativity   and
                          associativity  
the theory of modules put forth by oikarinen and janhunen      a  is based on a more
restrictive operator for program composition  viz  the join   the idea behind this operator
is to forbid positive dependencies between programs which is to be explicated next 
technically speaking  we dene the positive dependency graph dg     of a dlp function
   hr  i  o  hi using only positive dependenciesfollowing the denition by ben eliyahu
and dechter         however  we exclude input atoms from the graph as their denitions
are external to  anyway  thus  we let dg       ho  h    i where b   a holds for a
pair of atoms a  b  o  h if and only if there is a rule a  b  c  r such that a  a
and b  b  the reexive and transitive closure of   gives rise to the dependency relation
 over ato     ath     a strongly connected component  scc  s of the graph dg     is
a maximal set s  ato     ath    such that b  a for every pair a  b  s of atoms  given
that      is dened  we say that   and   are mutually dependent i dg         
has an scc s such that s  ato          and s  ato           oikarinen   janhunen 
    a   i e   the component s is shared by the dlp functions   and   in this way  if  
and   are not mutually dependent  we also call them mutually independent 
definition      joins  given two dlp functions   and     if the composition     
is defined and   and   are mutually independent  then the join         of   and  
is defined and it coincides with       
   consequently  the length of  in symbols  denoted by kk  gives an upper bound for  at    which is
important when one considers the computational cost of translating programs  janhunen        
   in practice  this set could be the set of all identifiers  names for propositions or similar objects  

   

fijanhunen  oikarinen  tompits   woltran

in case that      is dened  and thus   and   are mutually independent  exactly
one of the following conditions holds for each scc s of dg          
s  ato       ath       or

   

s  ato       ath      

   

example     recall the programs   and   from example     for which we obtain the
positive dependency graph dg            h a  b  d  e    ha  di  ha  ei i  hence  the sccs of
the graph are simply singletons  a    b    d   and  e   together with the observation that
ato      and ato      are disjoint  we derive that   and   are not mutually dependent 
thus  the join             is defined since the composition      is defined on the
basis of the analysis performed in example     
example     as an example of two dlp functions which have their composition defined
yet which are ineligible for a join  consider the following situation 
 b 
a  b  c 
b  a  c
 a  c 



 a 
a  b  c 
a  b  c
 b  c 

 

 a  b 
a  b  c 
a  b  c 
b  a  c
 c 

here  the result of composition involves an scc s    a  b  in the respective positive dependency graph  which has a non empty intersection with the output signatures of the programs
subject to composition  hence  the respective join of the modules in question is not defined 

   model theory and stable model semantics
having the syntax of dlp functions dened  we now turn to their semantics  we proceed
in three steps and introduce  correspondingly  three kinds of models  viz  classical models 
minimal models  and  nally  stable models for each dlp function  the last provide the
intended semantics for a dlp function whereas the rst two serve as auxiliary concepts 
as usual  an interpretation for a dlp function  is dened as an arbitrary subset of
at    given a particular interpretation m  at    an atom a  at   is true under m  
denoted m    a  i a  m   otherwise a is false under m   denoted m     a  for a negative
literal a  we dene m    a i m     a  a set l of literals is satisfied by m   denotedwby
m    l  i m    l  for everywliteral l  l  we also dene the disjunctive interpretation l
of a set l of literals  m    l i m    l for some literal l  l 
to begin with  we cover dlp functions with a pure classical semantics  which treats
disjunctive rules as classical implications  it should be emphasized that classical models of
a dlp function  are specic interpretations as dened above and hence subsets of at   
definition     an interpretation m  at   is a  classical  model of a dlp function
   hr  i  o  hi  denoted m      iff m    r  i e   for every rule a  b  c  r 
w
m    b  c implies m    a 
   

fimodularity aspects of disjunctive stable models

the set of all classical models of  is denoted by cm   
classical models provide an appropriate level of abstraction to address the role of input
atoms in dlp functions  given a dlp function  and an interpretation m  at    the
projection mi can be viewed as the actual input for  which may  or may not  produce the
respective output mo   depending on the semantics assigned to   the treatment of input
atoms in the sequel will be based on partial evaluation  the idea is to pre interpret input
atoms appearing in  with respect to mi  
definition     for a dlp function    hr  i  o  hi and an actual input mi  i for  
the instantiation of  with respect to mi   denoted by  mi   is the quadruple hr     o  hi
where r contains a reduced rule
 a   i    b   i    c   i 

   

for each rule a  b  c  r such that mi    ai  bi  ci  
example     consider the following dlp function  
 a  b 
a  b  c 
a  c  b 
b  c  a
 c 
for the actual input  c   ati     the reduct   c  is the dlp function
h a  b  b  a      a  b   i 
on the other hand  with the actual input   ati     we obtain the reduct
    h a  b      a  b   i 
the rules of form     are free of input atoms which indicates that the reduct  mi is a
dlp function without input  atoms in ato     ath    are not aected in  mi  
proposition     let  be a dlp function and m  at   an interpretation that defines
an actual input mi  ati    for   for all interpretations n  at   such that ni   mi  
n      no  nh     mi  
proof  consider any n  at   such that ni   mi  
    suppose that n      assume that no  nh does not satisfy     for some rule
a  b  c in   it follows that mi    ai  bi  ci   and therefore ni    ai  bi  ci  
thus  n     a  b  c  a contradiction  it follows that no  nh     mi  
    let no  nh   w mi hold  assuming n     a  b  c for a rule of  implies
n    b  c and n     a  it follows that ni    ai  bi  ci and the corresponding
rule     is included in  mi as ni   mi   but this rule is not satised by no  nh since
   

fijanhunen  oikarinen  tompits   woltran

w
n     a  b  c implies no  nh     b   i    c   i  and no  nh      a   i   a
contradiction  hence  we have that n     

thus  the input reduction  as given in denition      is fully compatible with classical
semantics and we can characterize the semantic operator cm also in terms of the equation
 
 mi  n   n  cm  mi    
   
cm    
mi ati   

recall that the models of any dlp function  are subsets of at    hence  we have here
that each n  cm  mi   is a subset of at  mi   and thus mi n    for each mi  ati   
since no atom from ati    occurs in  mi by denition 
handling input atoms is slightly more complicated in the case of minimal models but
the primitives of parallel circumscription  lifschitz        mccarthy        provide us with
a straightforward way to address them  the rough idea is to keep the interpretation of input
atoms fixed while minimizing  i e   falsifying  others as far as possible 
definition     let    hr  i  o  hi be a dlp function  a model m  at   of  is
i minimal iff there is no model n of  such that ni   mi and n  m  
in the sequel  the set of i minimal models of    hr  i  o  hi is denoted by mm   and
we treat input atoms by stipulating i minimality of models  using this idea  proposition    
lifts for minimal models given the fact that ati   mi      
proposition     let  be a dlp function and m  at   an interpretation that defines
an actual input mi  ati    for   for all interpretations n  at   such that ni   mi  
n  mm    no  nh  mm  mi   
proof  consider any n  at   such that ni   mi  
    let n  mm    it follows by proposition     that no  nh     mi   assume
that no  nh 
  mm  mi    recall that ati   mi       thus  there is an interpretation
s  no  nh such that s     mi   it follows by proposition     that n      for an
interpretation n    mi  s  but then ni   ni and n   n jointly contradict n  mm   
    suppose that no  nh  mm  mi    so  no  nh     mi   and n     follows
by proposition      let us then assume that n   mm    i e   there is a model n     
with ni   ni and n   n   thus  we have  no  nh     no  nh    and since ni   ni   mi
it follows that no  nh     mi by proposition      then  however  no  nh     mi is in
contradiction with no  nh  mm  mi   

the set mm   of ati    minimal models is sucient to determine the semantics of
a positive dlp function   i e   whose rules are of the form a  b  recall that for such
rules a   ati        holds whenever a      in order to cover arbitrary dlp functions  we
interpret negative body literals in the way proposed by gelfond and lifschitz        
definition     given a dlp function    hr  i  o  hi and an interpretation m  at   
the reduct of  with respect to m is the positive dlp function m   hrm   i  o  hi where
rm    a  b   a  b  c  r and m    c  
   

   

fimodularity aspects of disjunctive stable models

definition     an interpretation m  at   is a stable model of a dlp function  with
an input signature ati    iff m  mm m    i e   m is an ati    minimal model of m  
hidden atoms play no special role in denition      in contrast to this  they will aect
possibilities for program decomposition  as to be presented in section    and their status
will be nally explicated when the notion of modular equivalence is introduced in section   
denition     covers also the case of an ordinary disjunctive logic program  which is simply
a dlp function    hr    o  i  a model m  at     o of  is stable i m is a
minimal model of rm   the denition of stable models gives rise to a semantic operator
at d 
sm   d    
for dlp functions 
sm      m  at     m  mm m    

    

proposition     provides us a way to dismiss ati    minimality in the denition of stable
models if desirable  given a stable model m of   the projection n   mo  mh is a minimal
model of   mi  n and hence a stable model of  mi   in other words  we have
  mi  m     mi  mo mh   m  mi  
thus  we can derive the following result 
corollary     for any dlp function   we have
sm      m  at     mo  mh  sm  mi    
example      recall the dlp function  from example      having no hidden atoms 
given as follows 
 a  b 
a  b  c 
a  c  b 
b  c  a
 c 
 has four stable models in total  m     a   m     b   m     a  c   and m     b  c  
which are the  c  minimal models of the respective reducts of  
m 
m 
m 
m 

  h a  b   a  c    c    a  b   i 
  h a  b   b  c    c    a  b   i 
  h a  c    c    a  b   i  and
  h b  c    c    a  b   i 

now  it is easy to verify that each mj is a  c  minimal model of the reduct mj  
for illustrating corollary      recall the reducts
  c    h a  b  b  a      a  b   i and
    h a  b      a  b   i 
then  we have that sm   c       a    b   and sm        a    b   
   

fijanhunen  oikarinen  tompits   woltran

an immediate observation is that we loose the general antichain property of stable
models when input signatures are introduced  for instance  we have m   m  and m   m 
in example       however  since the interpretation of input atoms is xed by the semantics 
we perceive antichains locally  i e   the set  n  sm     ni   mi   of stable models forms an
antichain  for each input mi  ati     in example       the sets of stable models associated
with actual inputs  and  c  are  m    m    and  m    m     respectively 

   characterizations using classical logic
it is well known how the set of stable models of an ordinary disjunctive logic program  i e   a
dlp function  of the form hr    o  i  can be characterized via classical propositional logic 
using the concepts of completion  clark        and loop formulas  lin   zhao        lee  
lifschitz         in this section  we generalize these concepts to arbitrary dlp functions  to
this end  the main concern is the role of input atoms and how to incorporate them into these
concepts  furthermore  we extend the tightness property of programs  erdem   lifschitz 
      to dlp functions by introducing the notion of i tightness in section     
    program completion and loop formulas
given a dlp function   a loop of  is any non empty subset of a strongly connected
component of the positive dependency graph dg      recall that dg     has only the
atoms of ato     ath    as its nodes  in particular  each singleton  a  with a  ato    
ath    is thus a loop 
example     consider dlp functions   and   defined as follows 

   

 b  c 
a  c  b 
ba
 a 

   

 a  b 
a  c  b 
ba
 c 

here    has only singleton loops  b  and  c   in particular   a  b  is not a loop as it
contains the input atom a  on the other hand  for   we have loops  a    b   and  a  b  
in what follows 
we use wfor a set s of propositional
w formulas  or atoms   s to denote
v
a conjunction ss s and s as a shorthand for ss s  moreover  if appearing within a
formula  a set s is implicitly understood as a conjunction of its elements  for a dlp function
 and an atom a  ato     ath     we dene the set of supporting formulas
suppf a       b  c   a    a     a  b  c   and a  a 
and for a loop l  ato     ath    of   the set of externally supporting formulas
esuppf l       b  c   a   l    a  b  c    a  l      and b  l     
clarks completion procedure and  conjunctive  loop formulas can be generalized for dlpfunctions in the following way 
definition     for a dlp function   the completion of  is the set of formulas
   

fimodularity aspects of disjunctive stable models

w
comp      b  c
w  a   a  b  c    
 a  suppf a      a  ato     ath    

and the set of loop formulas for  is
w
lf      l  esuppf l      l  ato     ath    is a loop of    

observe that in the case of ati        i e   ato     ath      at    the completion
comp   reduces to the denition provided by lee and lifschitz        and the same holds
for the set lf   of loop formulas  generally speaking  the propositional theories comp  
and lf   characterize the set sm   of stable models in the following sense 

theorem     for a dlp function  and an interpretation m  at   
m  sm   if and only if m    comp   and m    lf   
proof  we rst relate the sets suppf a    and esuppf l     as introduced above for
a dlp function   with the respective sets of complementary rules
suppcr a       a    a   b  c   a  b  c   and a  a  and
esuppcr l       a   l  b  c   a  b  c    a  l      and b  l     
first  it is straightforward that  for each interpretation m  at    we have m    comp  
i jointly m     and for each a  m   ato     ath      m     suppcr a     quite
similarly  it holds that m    lf   i  for each loop l  m   ato     ath     of  
m     esuppcr l     on the other hand  by viewing suppcr a    and esuppcr l   
as dlp functions having the same signatures as   we can apply proposition     in order
to evaluate input atoms  thus  we obtain the following relationships for each dlp function
  interpretation m  at    atom a  ato     ath     and loop l  ato     ath   
of  
   m     i mo  mh     mi  
   m    suppcr a    i mo  mh    suppcr a   mi    and
   m    esuppcr l    i mo  mh    esuppcr l   mi   
finally  recall that for each interpretation m  at    we have ato      ato   mi   and
ath      ath   mi    inspecting the denition of comp   and lf   again  we can
conclude for each interpretation m  at   that m    comp    lf   i mo  mh   
comp  mi    lf  mi    in turn  we know that mo  mh    comp  mi    lf  mi   i
mo  mh is a stable model of the program  mi by the results of lee and lifschitz        
recall that  mi is an ordinary disjunctive program without any input atoms  finally  we
have sm      m  at     mo  mh  sm  mi    by corollary      this equality shows
the claim 

example     let us demonstrate the functioning of program completion and loop formulas on the dlp functions from example      i e   on     hr   a    b  c   i and    
hr   c    a  b   i  where r    a  c  b  b  a   the completions are
   although it may seem that the case of a singleton loop l    a  is somewhat redundant  this is not so 
since some tautological rules such as a  b  a make a difference 

   

fijanhunen  oikarinen  tompits   woltran

comp        b  a  c  a  b    b  a  c  b  a  and
comp        b  a  c  a  b    b  a  a  b  c  
furthermore  the sets of loop formulas are
w
w
lf        b  esuppf  b        c  esuppf  c       
   b  a 
w c  b  a  and
w
lf        b  esuppf  b  
     a  esuppf  a       
w
a  b  esuppf  a  b       
   b  a  a  b  c  a  b    
in the last formula  the w
occurrence of  is in view of esuppf  a  b           which
yields an empty disjunction esuppf  a  b          as usual 
computing the classical models of comp      lf       comp     yields two such
models  m     a  b  and m      one can check that these are indeed the stable models of
  by recalling that ati         a   thus  m  relates to an actual input m   ati         a 
whereas m  is based on m   ati          on the other hand  the classical models of
comp      lf     are m     c  and m      which again relate to the two possible
inputs over ati         c   finally  we note that  a  b  is also a model of comp     but
ruled out by lf     
    tight dlp functions
we now extend the well known concept of tightness  erdem   lifschitz        to dlpfunctions  this is of interest since we can exploit the fact that the positive dependency
graph dg     is reduced modulo input atoms  in other words  since the dependency graph
dg     has only the atoms of ato     ath    as its nodes  tightness for dlp functions
can be dened with respect to the input signature 
in the beginning of section    loops were dened as arbitrary non empty subsets of
strongly connected components in dg      thus  if dg     is acyclic then  has only
singleton loops  however  the converse is not necessarily true  since  for a program  having
only singleton loops  dg     may have edges ha  ai  i e   cycles of length one 
definition     a dlp function  is ati    tight  or tight  for short   if the positive dependency graph dg     is acyclic 
example     recall dlp functions     hr   a    b  c   i and     hr   c    a  b   i
based on r    a  c  b  b  a  from example      here    is  a  tight since the potential
non singleton loop  a  b  contains the input atom a  on the other hand    is not  c  tight 
it is worth mentioning that the ordinary variant of     viz  dlp function hr     a  b  c   i 
is not  tightin particular  since r is not tight in the usual sense 
we note that the last observation  viz  that a dlp function hr  i  o  hi may be i tight
although r is not a tight program  relies on the use of disjunctions in the program  in fact 
for dlp functions hr  i  o  hi  where r is a set of normal rules of the form a  b  c  we
have that a dlp function    hr  i  o  hi is i tight i r is tight  to verify this  note that
the second item of denition     implies that the head atom of a normal rule a  b  c
must not appear in i  and thus no loop of  may involve atoms from i 
   

fimodularity aspects of disjunctive stable models

we now show that the notion of tightness introduced in denition     enables us to
characterize the stable models of a dlp function by the classical models of its completion 
since each ordinary program can be represented as a dlp function  we thus properly
generalize the well known completion semantics  clark         the following lemma is
already sucient for this result in view of denition     and theorem     
lemma     for any tight dlp function   lf    comp   
w
proof  recall that for each a  ato     ath     a  suppf a    is contained in
comp    moreover wsince  is tight   has only singleton loops  and thus lf   contains
only formulas a  esuppf  a      again for each a  ato     ath     it remains
to show that  for each atom a  suppf a    is equivalent to esuppf  a     whenever the
positive dependency graph dg     is acyclic  we repeat the denition of suppf a    and
give the denition for esuppf l     simplied for the case l    a  
suppf a       b  c   a    a     a  b  c   and a  a  
esuppf  a        b  c   a    a     a  b  c    a  a  and b   a      
now it is easy to see that for an acyclic dependency graph dg      a  a implies b a    
for every rule a  b  c    thus  we conclude that suppf a      esuppf  a    
holds for each a  ato     ath     hence  the claim follows 

example     recalling the dlp function     hr   a    b  c   i from example     with
r    a  c  b  b  a   we obtain
comp        b  a
w c  a  b    b  a  cw b  a  and
lf        b  esuppf  b        c  esuppf  c       
   b  a  c  b  a  
now    is tight and we observe that lf      comp     as expected 
the observations presented so far lead us to the following result 
theorem     for a tight dlp function  and an interpretation m  at   
m  sm   if and only if m    comp   
in particular  this result is compatible with an existing characterization of stable models
in the case of ati        i e   if ato     ath      at    then  the notion of ati   tightness coincides with ordinary tightness  and the denition of the completion comp  
reduces to the one provided by lee and lifschitz        

   compositional semantics
in what follows  our objective is to establish the main result of this paper  i e   to show
that stable model semantics  as given by denition      is fully compositional when larger
dlp functions  are formed as joins           n of dlp functions  more precisely  the
interconnection of sm   and sm              sm n   is explicated in section      in analogy
   

fijanhunen  oikarinen  tompits   woltran

to section    we follow a quite rigorous approach and consider such a relationship for classical
models rst  then for minimal models  and eventually cover the case of stable models which
comprises our module theorem  then  in section      we use quantied boolean formulas
from the second level of polynomial hierarchy and their modular representation in terms
of dlp functions to illustrate the module theorem  finally  we devote section     to a
comparison with the splitting set theorem proven by lifschitz and turner        
    module theorem
to begin with  we formalize the criteria for combining interpretations as well as models 
definition     given two dlp functions   and     interpretations m   at     and
m   at     are mutually compatible  with respect to   and      or just compatible  if
m   atv        m   atv      

    

according to       any two compatible interpretations m  and m  for   and     respectively  agree about the truth values of their joint visible atoms in atv       atv       a
quick inspection of figure   reveals the three cases that may arise when the join       
is dened and joint output atoms for   and   are thereafter disallowed  there may exist
   joint input atoms in ati      ati       ati       or
   atoms in ato       ati      that are output atoms in   and input atoms in     or
   by symmetry  atoms in ati       ato      
recall that according to denition      atoms in the last two categories end up in ato   
when         is formed  atoms in atv       atv      provide the basis to combine
compatible interpretations for   and    
definition     let   and   be two dlp functions such that         is defined 
given any sets of interpretations a    at     and a    at       the natural join of a  and
a  with respect to atv       atv       denoted by a  
 a    is the set of interpretations
a  
 a     m   m    m   a    m   a    and m  and m  are compatible  

    

our rst modularity result is formulated for dlp functions under classical semantics as
dened in section    the combination of classical models is understood as in      
proposition     for all positive dlp functions   and   such that      is defined 
cm          cm     
 cm     

    

proof  consider an interpretation m  at       and its projections m    m at    
and m    m  at     with respect to     hr    i    o    h  i and     hr    i    o    h  i  it
follows that m  and m  are compatible and m   m   m  so that
   

fimodularity aspects of disjunctive stable models

m  cm        




m    r   r 
m     r  and m     r 
m   cm     and m   cm    
m  cm     
 cm     



generalizing proposition     for stable models of dlp functions is much more elaborate 
we will cover the case of positive dlp functions under minimal models rst  the proof of
theorem     exploits program completion  loop formulas  as well as the characterization of
stable and minimal models from section   as follows 
lemma     for all dlp functions   and   such that      is defined  the following
conditions hold 
comp          comp      comp     
lf          lf      lf     

    
    

proof  we begin the proof by analyzing how formulas introduced by clarks completion
and loop formulas are related with joins of dlp functions  to this end  we will now establish
that the sets of formulas associated with      are directly obtained as unions of sets
of formulas associatedwwith     hr    i    o    h  i and     hr    i    o    h  i  first  an
implication b  c  a belongs to comp        if and only if it belongs to comp     
comp      or both in case of a shared rule  second  let us consider any atom a  o  h 
where o   o   o  and h   h   h  are disjoint because      is dened  for the same
reason  either a  o  h  or a  o  h    i e   the atom a is dened either by   or     thus 
we have either def r   a    def r  r   a  or def r   a    def r  r   a  by denition      which
implies that either suppf a       w  suppf a      or suppf a          suppf a      
it follows that the implication
       if
w a  suppf a         is a member of comp 
w
and only if either  i  a  suppf a      belongs to comp     or  ii  a  suppf a     
belongs to comp      thus  we may conclude      for the completions involved 
third  recall that each loop l  at        of      is contained in some scc s of
       it follows by           and denition     that either
   l  o   h  is a loop of   and def r   l    def r  r   l   or
   l  o   h  is a loop of   and def r   l    def r  r   l  
in the cases above  we have either esuppf l          esuppf l w
    or esuppf l    
      esuppf l       thus  the respective loop formula l 
esuppf l        
belongs to lf        if and only if it is contained in lf      lf     

theorem     for all positive dlp functions   and   such that      is defined 
mm          mm     
 mm     

    

proof  consider any m  at        and the respective projections m    m  at    
and m    m  at     which are compatible and  moreover  m   m   m    we obtain the
following chain of equivalences 
   

fijanhunen  oikarinen  tompits   woltran

m  mm         m
    comp        and m    lf       
m     comp     and m     lf    

m     comp     and m     lf    
 m   mm     and m   mm    
 m  mm     
 mm     

 theorem     
      and      
 theorem     
 denition     


example     let us demonstrate the result of theorem     in a practical setting using dlpfunctions   and   as visualized below and their composition    hr     a  b  c  d  e   i 

   

 a  b  c 
a  b  
a  b 
b  a 
a  c 
c  d  e  a  b
 d  e 

   

 d  e 
d  c 
e  d 
d  e 
c  d  e  a  b
 a  b  c 

the join      is defined because the sccs of the composition  are s     a  b  c 
and s     d  e   the ati      minimal models of   are  a  b  c    a  b  d    a  b  e   and
 a  b  d  e   likewise  calculating mm      we get
mm           a    b    c  d  e    a  b  d  e    a  c  d  e    b  c  d  e    a  b  c  d  e   
hence  the only minimal model of  is m    a  b  d  e  and the compatibility condition
underlying      correctly excludes n    a  b  c  d  e    mm    note that there is no support
to c being true in   when d and e are true  accordingly  c  d  e  a  b is not active 
we are now prepared to present our central result 
theorem      module theorem  for all dlp functions   and   such that     
is defined 
sm          sm     
 sm     
    
proof  again  we take an interpretation m  at        and the respective compatible
projections m    m  at     and m    m  at     into consideration  the proof of     
can be based on      once a number of preliminary facts has been established 
m 
 
   the composition m
is dened 
    

since      is dened  we know that      is dened  this indicates that   and
 
and
  respect the input output interfaces of each other  the construction of m
 
m 
m 
m 
  does not aect this property which implies that      is dened 
m 
 
is dened 
   the join m
    
m 
 
by the preceding item  the positive dependency graph dg   m
       is dened 
m 
m 
let us assume that   and   are mutually dependent  i e   there is an scc s
m 
 
of the graph above such that s  ato  m
        and s  ato           since
the dependency graph has potentially fewer dependencies than the respective graph

   

fimodularity aspects of disjunctive stable models

dg         for   and     it follows that s is contained in some scc s  of the latter 
m 

 
since ato  m
      ato      and ato        ato       we obtain s  ato          and
s   ato           thus    and   are mutually dependent  a contradiction 
m 
 
   the reduct        m coincides with m
      

a rule a  b belongs to        m if and only if there is a rule a  b  c in    
    or both such that c  m     equivalently  there is a rule a  b  c in   such
that c  m      or there is a rule a  b  c in   such that c  m      i e  
 
 
a  b  m
or a  b  m
 
   
we therefore get the following chain of equivalences 
m  sm        






m  mm        m  
m 
 
m  mm m
      
 
 
m  mm m
 mm m
   
   
m 
 
m   mm m
    and m   mm    
m   sm     and m   sm    
m  sm     
 sm     

 denition     
 item   above 
 theorem     
 denition     
 denition     
 denition     



the moral of theorem     and denition     is that stable semantics supports modularization as long as positively interdependent atoms are enforced in the same module 
example     let   and   be dlp functions as defined below and         their
join  which is clearly defined  
 b 
a  b  
bc
 a  c 



 c 
a  c  
bc
 a  b 

 

 b  c 
a  b  
a  c  
bc
 a 

it is straightforward to verify that sm         b    a  b    a  c    b  c   and sm      
  c    a  b    a  c    b  c    since atv       atv         a  b  c   we obtain
sm     
 sm       sm      sm         a  b    a  c    b  c   
a simple cross check confirms that sm   is indeed given by this set 
example     consider the dlp functions   and   from example      then  sm      
    a  b    b  c   and sm           a  b    a  c    as shown in example      the join of  
and   is undefined  thus  theorem     is not applicable  concerning the composition
       we note that sm              a  c    b  c    
      a  b     sm     
 sm     
theorem     can be easily extended for dlp functions consisting of more than two
modules  in view of this  we say that a nite sequence m            mn of stable models for
modules             n   respectively  is compatible  i mi and mj are pairwise compatible  for
all   
s i  j  n  this property guarantees that each mi can be recovered from the union
m   ni   mi by taking the respective projection m  at i     mi  
   

fijanhunen  oikarinen  tompits   woltran

corollary      let             n be a sequence of dlp functions such that the join     
n is defined  then 
sm        n     sm     
  
 sm n   

    

example      the following example simply extends example     
 b 
a  b  
bc
 a  c 



 c 
a  c  
bc
 a  b 

 a 
a  b  
ac
 b  c 



 

 a  b  c 
a  b  
a  c  
bc


now we have sm         b    a  b    a  c    b  c    sm         c    a  b    a  c    b  c   
and sm         a    a  b    a  c    b  c    thus  we learn from corollary      that
sm             sm     
 sm     
 sm         a  b    a  c    b  c   
    modular representation of quantified boolean formulas
our next objective is to illustrate the theory developed so far in terms of a more extensive
unsat as depicted
example  to this end  we consider the pair of dlp functions sat
n and n
in figure    their purpose is the evaluation of quantified boolean formulas  qbfs  of the
form
n
 
xy
 ai  bi  ci  di   
    
i  

where each aj   bj   cj   and dj is a set of boolean variables  and the parameter n gives
the number of disjuncts in the matrix which is a boolean formula  insdisjunctive normal
form  dnf     without loss of generality  we may assume that x   ni    ai  bi    y  
s
n
i    ci  di    and x  y    hold for the sets x and y of boolean variables in      
it is important to point out that in general the evaluation of qbfs of the form      constitutes a p   complete decision problem which perfectly matches the complexity of checking
the existence of stable models for a disjunctive program  given this completeness property 
it follows that in principle any decision problem in p  can be turned into a qbf of the form
      albeit more direct representations can be obtained for particular problem domains  in
this respect  let us address three specic domains prior to detailing the generic approach 
   the strategic companies domain is identied by leone et al         as one of the rst
practical domains involving decision problems on the second level of the polynomialtime hierarchy and solved using asp techniques  the simplied encoding provided by
koch  leone  and pfeifer        is based on two kinds of disjunctive rules 
strat x     strat x     strat x     strat x     prod y  x    x    x    x    

    

strat x   ctrl x  x    x    x    x     strat x     strat x     strat x     strat x    

    

    also  recall the shorthands s  

v

ss

s and s  

v

   

ss

s introduced right after example     

fimodularity aspects of disjunctive stable models

function sat
n  

function unsat
 
n

x
for    i  n and x  ai    x  act i  
for    i  n and x  bi   x  act i  
for    i  n  ai  bi   act i 
 act             act n  

ci   u   di   act i  
y  u 
u  u
 act             act n  

for    i  n 
for y  y  

unsat
figure    dlp functions sat
n and n wfor the evaluation of a quantied boolean formula
xy  having a matrix    ni    ai  bi  ci  di   

where predicates strat x   prod y  x    x    x    x     and ctrl x  x    x    x    x     respectively 
denote that a company x is strategic  a product y is produced by companies x            x   
and a company x is controlled by companies x            x    obviously  instances of the
predicate strat arising from the rules of the forms      and      create positive dependencies in such a program   the resulting sccs can be used to split the program into
modules             n so that              n is dened  by theorem      the status
of a specic company x can be decided using the module i which denes strat x 
rather than the entire encoding  
   the model based diagnosis of digital circuitry provides another interesting application
area  quite recently  oikarinen and janhunen      b  presented an ecient encoding
of prioritized circumscription as a disjunctive program  and thus  as a special case  of
parallel circumscription as well enabling a concise representation of minimal diagnoses in the sense of reiter         the resulting disjunctive rules involve head cycles
 see section   for details  which typically pre empt a polynomial time translation into
a computationally easier normal logic program  this observation suggests completeness on the second level of the polynomial time hierarchy although we are not aware of
an exact hardness result  the correctness proof of the encoding exploits two modules
and the module theorem 
   finally  let us mention that gebser  schaub  thiele  usadel  and veber      b  identify
minimal inconsistent cores in large biological networks with disjunctive programs  the
decision problem in question is dp  complete which also indicates the appropriateness
of disjunctive logic programs for the representation of this domain  since any dp complete decision problem can be described as an independent combination of an npcomplete decision problem p  and a conp complete decision problem p    we foresee a
representation in the form of a join sat  unsat   where sat has a stable model i p 
has a succinct certicate  and unsat has a unique stable model i p  has no succinct
   

fijanhunen  oikarinen  tompits   woltran

 x    x   
x   act    
 x    act    
 x    act     x   act    
x   act    
 x    act    
x   act    
 x    act    
x   x    act   
 act     act     act     act    


u  y    y    act    
u  y   y    act    
u  y   y    act    
u  y   y   act    
y   u  y   u  u  u
 act     act     act     act    

unsat  
figure    particular instances of sat
  and  

certicates  the required dlps can be worked out via reductions into propositional
 un satisability  in particular  the test for unsatisability can be realized in analogy
to unsat
analyzed below 
n
in the general case  we use boolean variables and propositional atoms interchangeably
in order to describe how the validity problem of      is captured by dlp functions from
unsat is based on the explanatory approach from janhunen
figure    the design of sat
n and n
et al          where      is equivalently viewed as a formula xy  having the matrix
 in conjunctive normal form  cnf   a clause    ai  bi  ci  di in  is active
whenever ai  bi is false and the truth of the clause becomes dependent on ci  di   or
to put it dually  ai  bi is true and the truth of ai  bi  ci  di depends on ci  di  
the validity of the formula xy  is captured as follows  given an input interpretation
mi   act             act n    the upper dlp function sat
n from figure   tries to explain the
activation statuses of the clauses in  by checking that the respective theory  ai  bi  
act i   mi     ai  bi   act i    mi   is satisable  the lower dlp function  unsat
  plays
n
the role of a conp oracle  it captures a test for the theory  ci  di   act i   mi   being
unsatisable  the correctness of the representation provided by these dlp functions will
be addressed soon  but it is enough to understand their syntax and intuitive meaning for
the moment  a concrete qbf instance is evaluated as follows 
unsat from figure   in the case of qbf
example      consider dlp functions sat
n and n

x  x  y  y    x  y  y    x  y  y    x  y  y    x  x  y  y          
thus  the parameter for this instance is n      and the input signature is  act             act    
unsat   as illustrated in figure    the output signature of the former dlpfor both sat
  and  
function is  x    x    and all other atoms  i e   y    y    and u  remain hidden in the latter 
the joint input signature is used to specify the active part of the matrix in       the dlpfunction sat
provides an explanation  i e   an assignment to variables x  and x  as its
 
output  whereas unsat
is only responsible for the respective unsatisfiability check  as regards
 
the validity of the qbf given in       the input interpretation  act     act     act     act    
yields a positive answer  the respective explanation  i e   the output interpretation found by
sat
    is  x     it is easy to check that when x  is true and x  is false then the remainder of
the matrix is true whatever values are assigned to y  and y    hence  the qbf      is valid 
    for the purposes of this section  we interpret disjunctions a  b of sets a and b    b   b  b  of
positive and negative literals  respectively  as disjunctions of their elements 

   

fimodularity aspects of disjunctive stable models

unsat in figure    they have identical
as regards the general dlp functions sat
n and n
sat
input signatures  only n has output atoms  and the hidden atoms of unsat
are fully
n
sat
unsat
respected  hence  the composition n  n
is dened  moreover  the atoms appearing
in rules that involve positive dependencies belong to disjoint sets x and y   u   it is
unsat   cannot have an scc s such that s  x     and
therefore clear that dg   sat
n  n
unsat is dened regardless of the qbf      in
s   y   u        this implies that sat
n  n
question  let us exploit this fact in the context of specic dlp functions of example      

example      there are four stable models for the dlp function sat
   
 act     act     act     act     x      act     act     x    x      act      and  x    
listed in decreasing level of activation  on the other hand  the dlp function unsat
has a
 
unique stable model  act     act     act     act     y    y    u   i e   the interpretation  y    y    u 
  act     act     act     act     where the set of rules is
is the unique stable model of unsat
 
given by
  u  y    y    u  y   y    u  y   y    u  y   y    y   u  y   u  u  u   
 mi has no stable models for any other input interpretation mi   moreover  we
and unsat
 
unsat   by combining compatible pairs
may apply the module theorem to calculate sm sat
    
of models  there is only one such pair 
 act     act     act     act     x     sm sat
    and
 act     act     act     act     y    y    u   sm unsat
  
 
thus   act     act     act     act     x    y    y    u  is the unique stable model of the join sat
  
sat  unsat   is non empty  we conclude that      is indeed valid 
unsat
 
since
sm 
 
 
 
it is natural to ask what can be stated about the stable models of the general dlpfunctions unsat
and sat
n
n associated with the qbf xy  given in       if m is a stable
sat
model of n   then the respective projection mx   x m determines m   i e   it holds for all
   i  n in the matrix  that act i   m if and only if mx    ai bi   moreover  the model
mx is minimal in the sense that there is no strictly smaller interpretation n  mx with
this property  this is an additional feature brought along the minimality of stable models 
as a consequence  the dlp function sat
n does not capture all possible truth assignments to
variables in x but no relevant truth assignments are lost  on the other hand  any stable
indicates that the respective theory
model m of unsat
n
 ci  di      i  n  act i   m  
w
is inconsistent  or alternatively  the formula  in act i m ci  di is valid 
concerning the correctness of the representation given in figure    due to an existing
proof by janhunen et al          we only present the main stepsfully exploiting the benets
from our modular approach 
unsat   is non empty 
theorem      a qbf xy  of the form      is valid iff sm sat
n n

proof sketch  consider any qbf xy  of the form       the following are equivalent 
   

fijanhunen  oikarinen  tompits   woltran

   the formula xy  is valid 
   there is a minimal interpretation n  x such that  for the set i       i  n  
n     ai  bi   of indices determined by n with n     ai  bi   i  i  ai  bi  
i   i   the theory  ci  di   i  i  is unsatisable 
unsat have compatible stable models m   n   act i   
   the dlp functions sat
 
n and n
i  i  and m     act i    i  i   y   u   respectively 
unsat has a stable model
   the dlp function sat
n  n

m   m   m    n   act i    i  i   y   u  
in the second item  the minimality of n means that there is no n   n such that     i  n  
n      ai  bi     i  this can be assumed without loss of generality 

theorem      and the module theorem suggest an approximation strategy for verifying
unsat   is empty  we know
the validity of qbfs of the form       if either sm sat
n   or sm n
unsat      
directly that the formula is not valid  otherwise  we check whether sm sat
n  n
    splitting sets
for the sake of comparison  we formulate the splitting set theorem  lifschitz   turner 
      for a dlp function    hr    o  i  which essentially forms an ordinary disjunctive
program  splitting sets are sets of atoms that are closed in the following sense 
definition      given a dlp function    hr    o  i  a set u  o of atoms is a splitting set for  if and only if  for every rule a  b  c  r 
a  u     implies a  b  c  u  
by denitions     and       the sets  and o are always splitting sets for   however 
one is mostly interested in other non trivial splitting sets   u  o for   but such sets
need not exist  nevertheless  any splitting set u divides the respective set of rules r in two
parts  the bottom  bu  r   of r with respect to u contains all rules a  b  c  r such
that a  b  c  u   whereas the top  tu  r   of r is r   bu  r   the splitting of r into
bu  r  and tu  r  becomes a proper one  i e   bu  r      and tu  r       if
   u is non trivial and
   every atom a  o has at least one dening rule a  b  c  r such that a  a 
according to lifschitz and turner         a solution to r with respect to u  o is a pair
hx  y i where x  u   y  o  u   x  sm bu  r    and y  sm tu  r  x   here  tu  r  x
denotes the partial evaluation of tu  r  in the sense of denition     using x  u as an
input interpretation  using a similar idea  let us introduce dlp functions corresponding to
bu  r  and tu  r   given a splitting set u for   the join    b  t   where
b   hbu  r     u  i and t   htu  r   u  o   u  i
is dened  then  the following result is implied by theorem     
   

fimodularity aspects of disjunctive stable models

corollary       splitting set theorem from lifschitz   turner        for every
dlp function    hr    o  i corresponding to a set r of disjunctive rules  every splitting
set u  o for   and every interpretation m  at     o  the following conditions are
equivalent 
   m is a stable model of  
   m  u  sm b   and m  sm t   
   hm  u   m   u i is a solution to r with respect to u  
in fact  theorem     is strictly stronger than the splitting set theorem  as previously
demonstrated by oikarinen and janhunen      a   splitting sets are applicable to dlpfunctions like    h a  b  b  a      a  b   i only in the trivial way  i e   only u    
are u     a  b  are splitting sets for   in contrast  theorem     applies to the preceding
dlp function in more versatile ways  i e       is dened for     h a  b    b    a   i
and     h b  a    a    b   i  as a consequence of      being dened  it is possible
to determine the sets of stable models sm         a    b     sm     in separation  if
appropriate  and then conclude that sm     sm     
 sm         a    b   holds as
well  yet another generality aspect of splitting concerns the role of input atomsthey are
assumed nonexistent above  theorem      however  enables us to treat them as well 

   decomposing dlp functions
the objectives of this section are contrary to the construction of a dlp function as a join of
modules  the idea is to exploit the strongly connected components of dg      for a dlpfunction   in order to decompose  into smaller components  e g   when there is no a priori
information about the internal structure of   for simplicity  we will rst consider dlpfunctions  having no hidden atoms  i e   where ath        the eects of hidden atoms on
the decomposition of dlp functions will be addressed thereafter  as dened in conjunction
with denition      the sccs in dg     are induced by the positive dependency relation
 which is reexive and transitive  i e   a preorder by denition  in the sequel  the set of
sccs in dg     is denoted by scc      the positive dependency relation  lifts for the
elements of scc     as follows  s   s  if and only if there are atoms a   s  and a   s 
such that a   a    to this end  it does not matter which pair of atoms is inspected 
lemma     for any dlp function  and any components s    s   scc      s   s  if
and only if a   a  for every a   s  and a   s   
proof      if s   s    there are b   s  and b   s  such that b   b    consider any
a   s  and a   s    it follows that a   b  and b   a  by the denition of sccs  thus 
a   a  as  is transitive 
    this holds trivially as sccs are non empty 

proposition     the relation  over scc     is reflexive  transitive  and antisymmetric 
   

fijanhunen  oikarinen  tompits   woltran

proof  the relation  over scc     is reexive and transitive by denition  for antisymmetry  consider any s    s   scc     such that s   s  and s   s    it follows by
lemma     that  for every a   s  and a   s    a   a  and a   a    thus  s    s  by the
maximality of components in scc     

 
consequently  we may conclude that hscc     i is a partially ordered set  since  is
nite by denition  hscc      i has maxima and minima but these elements need not be
unique  in particular  for each s  scc     there is a minimum element s   scc    
such that s   s and s   s  implies s    s    for any s   scc      thus  we may
apply the principle of well founded induction using the minima of hscc      i as basis 
given the structure hscc      i  the dlp function    hr  i  o  i can be decomposed in the following way  the set of rules associated with s  scc     is def r  s 
from      i e   the set of defining rules for s in r  in general  the head of an arbitrary rule
a  b  c  r may coincide in the sense of     with several sccs  which implies that
the rule is included in def r  s  for several s  scc      however  such a distribution of
rules is in perfect harmony with the last two conditions of denition      we must also
bear in mind integrity constraints   b  c which are not included in def r  s  for any
s  scc      to access the integrity constraints of any set r of rules  we dene
ic r     a  b  c  r   a     

    

we are now ready to present a decomposition of  based on scc     
definition     given a dlp function    hr  i  o  i  the decomposition induced by
scc     includes a dlp function
    hic r   at ic r     i   at r      i

    

and  for each s  scc      a dlp function
s   hdef r  s   at def r  s     s  s  i 

    

the purpose of the extra module   is to keep track of integrity constraints as well
as input atoms that are not mentioned by the rules of r  the other modules involved
in the decomposition  are induced by sccs  each s refers to other modules using
at def r  s     s as its input signature and provides the dening rules  if any  for every
atom in s  recall that an output atom having no dening rules will be falsied by default 
proposition     for a dlp function    hr  i  o  i and its decomposition based on
scc      the join
f
    
     sscc     s  
is defined and equal to  

proof  let us consider   and s for any s  scc      the composition    s
is dened because these modules involve no hidden atoms  ato          and we have
def r          def r  r     and def r   s    def r  s    def r  r   s  for the sets of rules
r    ic r  and r    def r  s   the join    s is dened as the respective composition
is and the integrity constraints in   do not create any dependencies in dg      s   
   

fimodularity aspects of disjunctive stable models

let us perform a similar analysis for s  and s  based on two dierent components
s    s   scc      it is clear that s   s  is dened since these modules involve no
hidden atoms  s   s      and we have that def r   s      def r  s      def r  r   s    and
def r   s      def r  s      def r  r   s     for r    def r  s    and r    def r  s    
since all pairwise joins are dened  also the overall join      is dened  by denition    
and the denition of scc      the outcome is equal to  because
s
   ic r   sscc     def r  s    r 
s
   sscc     s   o  and
s

    at ic r     o     i   at r     o   sscc      at def r  s     o    i 
corollary     for a dlp function  with ath       and its decomposition based on
scc     
sm     sm     
   sscc     sm s    




example     consider the following dlp function  
 a  b  c  d 
a  b  c  d  
 a  c   b  c 
 a  d   b  d 
a  b 
c  d 
b  a 
d  c 

so  ati        ato       a  b  c  d   and ath        there are two sccs in dg     
viz  s     a  b  and s     c  d   the resulting decomposition of  consists of
    h  a  c   a  d   b  c   b  d    a  b  c  d     i 
s    h a  b  c  d   a  b  b  a    c  d    a  b   i  and
s    h a  b  c  d   c  d  d  c    a  b    c  d   i 
the respective sets of stable models are
sm    
sm s   
sm s   
sm  

 
 
 
 

  a  b    c  d    a    b    c    d     
  a  b    c    d    c  d   
  c  d    a    b    a  b    and
  a  b    c  d   

next  we address the case of dlp functions involving hidden atoms  i e   for which
ath        holds  then  the components in dg     are subsets of ato     ath    and
we have to revise      accordingly  for a dlp function    hr  i  o  hi and s  scc     
s   hdef r  s   at def r  s     s  s  o  s  hi 

    

unfortunately  a decomposition based on modules of the form      is likely to be too negrained  for certain components s    s   scc     such that s     s    the respective
   

fijanhunen  oikarinen  tompits   woltran

modules s  and s  conforming to      might not respect hidden atoms of each other  a
similar setting may arise with   and an individual module s based on some s  scc    
if the integrity constraints of  refer to hidden atoms of s   the problem would disappear
if all hidden atoms of  were revealed but this is hardly appropriatethere are good reasons
to hide certain atoms from a knowledge representation perspective 
a way to approach this problem is to distinguish components s   scc     and
s   scc     for which the respective modules s  and s  would not respect the hidden
atoms of each other  i e   a hidden atom dened by one would be referred by the othereither
positively or negatively  similar conicts could also arise due to integrity constraints packed
into the module   distinguished in denition      at rst sight  we should amalgamate  
with any other module whose hidden atoms occur in the integrity constraints of     but 
in order to avoid fusions of this kind as far as possible  it is worth redistributing integrity
constraints referring to hidden atoms  this is clearly possible for integrity constraints referring to hidden atoms involved in a single component only  to formalize the ideas presented
so far  we distinguish a precise relation among the components of scc     as follows 
definition     given a dlp function   components s    s   scc     do not respect
the hidden atoms of each other  denoted by s   h s    if and only if s     s  and there is
   a hidden atom h  ath  s    such that h  ati  s     or
   a hidden atom h  ath  s    such that h  ati  s     or
   there are hidden atoms h   ath  s    and h   ath  s    which both have an occurrence in some integrity constraint  b  c of  
it is clear that  h is irreexive and symmetric for the components of scc     for
any dlp function   moreover  the transitive closure of  h   denoted by   
h   gives rise
 
to a repartitioning of scc     each maximal block s            sn of components such that
si   
h sj holds for every i    j induces a module s as determined by      for the union
s   s          sn   the key observation is that modules associated with dierent blocks
of components respect hidden atoms of each other which makes theorem     applicable at
that level of abstraction  to summarize the treatment of dlp functions involving hidden
atoms in their rules  we revise denition     accordingly 
definition     given a dlp function    hr  i  o  hi  the decomposition induced by
scc     and   
h includes a dlp function
    hic   r   at ic   r     i   at r      i

    

where ic   r      b  c  r    b  c   h     and  for each maximal block s            sn
of components of scc     such that si   
h sj for every i    j  a dlp function
s   hdef r  s   ics  r   at def r  s   ics  r     s  s  o  s  hi

    

where s   s          sn and ics  r      b  c  r    b  c    s  h       
as regards example      denitions     and     yield identical decompositions for the
dlp function in question  the eects of hiding are demonstrated by the following example 
   

fimodularity aspects of disjunctive stable models

example     consider a dlp function    hr    o  hi  for
r     a  c  a  b   b  c  d   c  d  d  c  b 
and o  h    a  b  c  d   where the exact partitioning of atoms in o and h varies from case
to case as analyzed below  the sccs in scc     are s     a   s     b   and s     c  d  
   if we take all atoms visible in   i e   if h     the decomposition of  yields three modules  s    h a  b     b    a   i  s    h a  b   b  c  d     a  c  d    b   i 
and s    h b  c  d   c  d  d  c  b    b    c  d   i  in addition to the module
    h  a  c    a  c     i encompassing integrity constraints 
   if we hide h    a  in   we obtain s   h s  by the disjunctive rule a  b   therefore  components s  and s  must be placed in the same block which is also maximal
giving rise to a module s   h  a  c  a  b   b  c  d     c  d    b    a i where
s   s   s     a  b   the other modules are      and s  listed above 
   finally  if we set h    a  c  for   we obtain s   h s  by b  c  d  and s   h s 
by  a  c in addition to s   h s  as stated above  since       the decomposition
of  effectively collapses to a single module s     where s    s   s   s   
we note about the non trivial modules mentioned above that
sm s   
sm s   
sm s   
sm    
sm s  

 
 
 
 
 

  a    b   
  b    a  b    b  c    a  c    b  d    a  d    b  c  d    a  c  d   
  b    c  d   
    c    a  c    and
  b    a  c    b  c    b  d    a  c  d    b  c  d   

but  regardless of the decomposition obtained  it holds for the respective joins that
sm    
 
 
 

sm s    
 sm s    
 sm s    
 sm    
sm s   
 sm s    
 sm  
sm s    
 sm  
  a  c  d    b   

in the calculations involving 
 it is important to notice that the allowed combinations
of stable models are determined in terms of joint visible atoms of the modules involved 
for instance  we have atv  s     atv  s       a  b    b  c  d     b  so that sm s    

sm s    is   a    c  d    b    b       a  c  d    b   by denition      thus  interestingly 
the role of the remaining two modules s  and   is merely to approve upon these two
models  recalling the discussion from the introduction  this suggests a strategy which gives
precedence to
   an evaluation of modules having only few stable models  and
   a combination of stable models for modules that have only few visible atoms in common 
   

fijanhunen  oikarinen  tompits   woltran

   shifting disjunctions
in this section  we continue the pursuit of applications for the module theorem established in
section    we now generalize the principle of shifting disjunctive rules  gelfond et al        
dix et al         by applying the results of this paper  roughly speaking  the idea behind
shifting is to translate a disjunctive rule a  b  c into several normal  non disjunctive 
rules by shifting head atoms h  a to negative literals h in the body  for instance  a
simple disjunctive rule a  b  c  is captured by normal rules
a  b  c 

b  a  c 

and

c  a  b 

as shown by eiter et al          such a local shifting transformation preserves ordinary
equivalence  i e   stable models    the application of this technique is  however  pre empted
in the presence of head cycles  ben eliyahu   dechter         such a cycle is provided by
an scc s that intersects with the head a of some disjunctive rule a  b  c of  such
that  s  a       for instance  local shifting is no longer applicable to the rule a  b  c  in
the presence of a  b and b  a which create a strongly connected component s    a  b  
as a consequence  the respective dlp functions
    h a  b  c   a  b  b  a      a  b  c   i 

    

    h a  b  c  b  a  c  c  a  b  a  b  b  a      a  b  c   i

    

have dierent stable models  sm         a  b    c   and sm         c    such a discrepancy of stable models can be settled by applying the decomposition technique from
section    in fact  it leads to a proper generalization of the local shifting transformation
which is formalized below for dlp functions and their strongly connected components 
definition     let    hr  i  o  hi be a dlp function and scc     the respective set
of sccs  the general shifting of  is the dlp function gsh     hic r   r   i  o  hi 
where r is the set of rules
  a  s   b  c   a   s    a  b  c  r  s  scc     and a  s      

    

hence  the idea is to project the head a of the rule with respect to each component s 
and atoms in the dierence a   s are shifted to the negative body  this can be viewed as
the contribution of a disjunctive rule a  b  c for a particular component s 
example     for   from       we have scc           a  b    c    so that
gsh       h a  b  c  c  a  b  a  b  b  a      a  b  c   i 
most importantly  we have sm gsh          a  b    c     sm      in contrast to the set
sm         c   of stable models for   from      
    in addition to ordinary equivalence  also uniform equivalence  eiter   fink        is preserved by local
shifting but not strong equivalence  lifschitz  pearce    valverde        

   

fimodularity aspects of disjunctive stable models

we now prove the correctness of the general shifting principle from denition      the
aim is to exploit the decomposition of  from denition     together with the modular
reconstruction of  from proposition     and the compositionality of stable semantics from
corollary      to extend the coverage of corollary      we introduce explicit operators for
revealing and hiding atoms of dlp functions as follows 
definition     let    hr  i  o  hi be a dlp function  then 
   reveal   a    hr  i  o  a  h   ai  for a set a  h of hidden atoms  and
   hide   a    hr  i  o   a  h  ai  for a set a  o of output atoms 
since the denition of stable models does not make a dierence between output atoms
and hidden atoms  the following properties are easy to verify  the role of hidden atoms
becomes important in section   when dlp functions are compared with each other 
proposition     let  be any dlp function 
   for any a  ath     sm     sm reveal   a   
   for any a  ato     sm     sm hide   a   
lemma     let  be a dlp function with ath        s a component in scc      and
s the respective module in the decomposition of  according to definition      then 
sm s     sm gsh s    

    

proof  recall that s   hdef r  s   i  s  i  where the input signature i   at def r  s    
s  notice that s is the only component in scc   s   and hence gsh s   has a set of rules
r     a  s   b  c   a   s    a  b  c  def r  s   
consider any interpretation m  i  s  where i and s are the input and output signatures
of s   respectively  thus  mi   m  i and mo   m  s  then  the following equivalences
hold 






a  b   def r  s  mi  mo
a  b  c  def r  s  mi such that mo    c
a  b    c   def r  s  such that a   ao   b   bo   c   co  
mi    ai  bi  ci   and mo    co
a  b    c    ai  r such that a   ao   b   bo   c   co  
mi    ai  bi  ci   and mo    co
a  b  c  r  mi such that mo    c
a  b   r  mi  mo  

thus  we conclude that  def r  s  mi  mo coincides with  r  mi  mo   and  consequently  mo 
mm  def r  s  mi  mo   if and only if mo  mm  r  mi  mo    therefore  sm s  mi    
sm gsh s   mi    since m and  in particular  mi were arbitrarily chosen in the beginning 
we obtain the equality of stable models stated in      directly by corollary     

   

fijanhunen  oikarinen  tompits   woltran

theorem     for any dlp function    hr  i  o  hi  sm     sm gsh    
proof  since  may have hidden atoms  corollary     is not applicable to its decomposition based on scc      thus  we have to start with    reveal   h    hr  i  o  h  i
rather than  itself  since sccs are independent of hiding  we have scc        scc    
and gsh      reveal gsh   
h   since ath        by construction  we know by
f

proposition     that      sscc     s        applying gsh   to this equation yields
f
gsh           sscc     gsh s    

    

as regards the respective sets of stable models  we obtain
sm   

 



  
sm    


 

sm gsh     

 

sm     
 

 

sscc     

sm s   

 corollary     

sscc     

sm gsh s    

 lemma     
 corollary     and      

it follows by proposition     that sm hide    h     sm      sm gsh      
sm hide gsh     h    since hide    h     and hide gsh     h    gsh    we
have established that sm     sm gsh    as desired 

according to denition      decompositions of dlp functions create multiple copies of
disjunctive rules whose heads intersect with several sccs  the introduction of such copies
can be circumvented by applying the general shifting technique from denition     
example     for the dlp function  from example      we obtain r     ab  c  d 
a  b  b  a  and r     c  d  a  b  c  d  d  c  as the sets of rules associated with     hr     c  d    a  b   i and     hr     a  b    c  d   i  for which       
hr   r       a  b  c  d   i is defined 

these observations enable us to view disjunctive rules which are shared by the modules
associated with sccs as syntactic sugar  however  a clever implementation can save space
using shared rules  in the worst case  unwinding a rule a       an  b  c that coincides
with the respective sccs s            sn such that a   s            an  sn may create n copies of
the body b  c  such a quadratic blow up can be partly alleviated by introducing a new
atom b as a name for the body  thus the result of shifting a   s            an  sn becomes
a   b  a            an  
  
 
ai  b  a            ai    ai             an  
  
 
an  b  a            an 
together with the dening rule b  b  c for b  there is an implementation of the general
shifting principle called dencode    if requested to do so  it calculates beforehand whether
it pays o to introduce a new atom for the body for each disjunctive rule or not 
    available at http   www tcs hut fi software asptools  for experimenting 

   

fimodularity aspects of disjunctive stable models

   equivalence of dlp functions
the concept of visible equivalence was originally introduced in order to neglect hidden atoms
when logic programs  or other theories of interest  are compared on the basis of their models  janhunen         oikarinen and janhunen      a  extended this idea to the level of
logic program modulesgiving rise to the notion of modular equivalence for logic programs 
in this section  we generalize the concept of modular equivalence for dlp functions and
introduce a translation based method for checking modular equivalence of dlp functions
following analogous approaches of oikarinen and janhunen              
    modular equivalence
module interfaces must be taken properly into account when dlp functions are compared 
for this reason  we consider two dlp functions   and   to be compatible if and only if
ati        ati      and ato        ato      
definition     dlp functions   and   are modularly equivalent  denoted by   m    
if and only if
     and   are compatible and
   there is a bijection f   sm      sm     such that for all interpretations m 
sm      m  atv        f  m    atv      
the proof that m is congruent for  lifts from the case of normal programs  oikarinen
  janhunen      a  to the disjunctive case using theorem     
proposition     let         and  be dlp functions  if   m   and both     and
    are defined  then     m     
proof  let     hr    i    o    h  i and     hr    i    o    h  i be dlp functions such that
  m     and    hr  i  o  hi a dlp function acting as an arbitrary context for   and
  such that     and     are dened  consider any m  sm       theorem    
implies that m    m  at      sm     and n   m  at    sm    since   m    
we have i    i    o    o    and there is a bijection f   sm      sm     such that
m    i   o      f  m      i   o   

    

holds for m    dene m    f  m     since m  and n are compatible by denition and     
holds  the models m  and n are compatible as i    i  and o    o    thus  m   n 
sm      by theorem     and we have eectively described how m is mapped to a model
in sm      by a function g   sm       sm      dened by
g m     f  m  at        m  at    
clearly  g maps the set of visible atoms in m to itself  that is 
m   i   i  o   o    g m     i   i  o   o  
the justications for g being a bijection are as follows 
   

fijanhunen  oikarinen  tompits   woltran

 g is an injection  m    n implies g m      g n   for all m  n  sm       since
f  m  at         f  n  at      or m  at      n  at   
 g is a surjection  for any n  sm       m   f    n  at        n  at    
sm      and g m     n   since f is a surjection 
the inverse function g     sm       sm      of g can be dened by setting
  f    n  at        n  at     thus      m     

note that  m gsh   follows directly from theorem      applying proposition     in
the context of theorem     indicates that shifting can be localized to a particular component
  in a larger dlp function     since     m gsh       

g    n  

    verifying modular equivalence
oikarinen and janhunen        proposed a translation based method for the verication
of weak equivalence of disjunctive logic programs  two logic programs are weakly equivalent i they have exactly the same set of stable models  thus  weak equivalence can
be seen as a special case of modular equivalence for dlp functions   and   where
ati       ath        ati       ath          this motivates us to adjust the translationbased technique for the verication of modular equivalence  as observed in previous work
 janhunen   oikarinen        oikarinen   janhunen      a   the verication of visible modular equivalence involves a counting problem in general  a reduction of computational time complexity can be achieved for programs that have enough visible atoms 
referred to as the eva property for short   janhunen   oikarinen         for any dlpfunction    hr  i  o  hi  we dene the hidden part of  as the restricted dlp function
h   hdef r  h   i  o  h  i which enables the evaluation of hidden atoms in h given
arbitrary truth values for all other atoms in i  o  recalling denition      we use an
instantiation of h with respect to an interpretation mv  ati  h    i e   h  mv   to dene
the eva property for the dlp function  
definition     a dlp function    hr  i  o  hi has enough visible atoms iff h  mv has
a unique stable model for each mv  atv      ati  h   
the idea behind the translation based method of oikarinen and janhunen        is
that ordinary disjunctive programs r  and r  are weakly equivalent i their translations
tr r    r    and tr r    r    have no stable models  in the following  we propose a modied
version of the translation function adjusted to verication of modular equivalence  in order
to be able to verify modular equivalence  we need to take the semantics of the atoms in the
input signature into account as well as the role of hidden atoms when modular equivalence
of programs is under consideration  in the case of dlp functions  we transform any pair  
and   of compatible dlp functions into a dlp function eqt         that has a stable
model i there is some stable model m  sm     for which there is no stable model
n  sm     with m  atv        n  atv       we form the translation as a composition
of dlp functions in order to fully exploit the compositionality of the stable model semantics
when justifying the correctness of the method 
in what follows  we use new atoms a   a   and a not appearing in at      at    
for any atom a  and we use the shorthand a    a   a  a  for any set a of atoms  and
   

fimodularity aspects of disjunctive stable models

analogously dened shorthands a and a   moreover  diff  unsat  unsat   and ok are new
atoms not appearing in at      at      the translation eqt          which is to be
summarized by denition     below  consists of the following three parts 
 i  the dlp function   naturally captures a stable model m  sm     
 ii  the dlp function hidden       hrh   i  o  h    i provides a representation for the
hidden part of     hr  i  o  hi evaluated with respect to the visible part of m   the
input signature of hidden     consists of the visible atoms in atv        atv        i 
o  the set rh contains a rule ah  bv bh    av cv ch   for each a  b  c  r
such that ah      i e   a  b  c  def r  h   the hidden parts of rules are renamed
systematically using atoms from ath        this is to capture the unique stable model
n for     h  mv expressed in ath      rather than ath       note that the existence
and uniqueness of such an n is guaranteed by the eva property 
 iii  finally  the dlp function
tr       hrtr   i  o  h    o  h    unsat  unsat   diff  ok   o  h  i
provides a minimality check  the set rtr contains
   a rule unsat  bv  bh    av  ah  cv  ch   for each rule a  b  c  r 
   rules a  a  a   unsat and a  a  a   unsat for each a  o  and rules
a  a   a   unsat and a  a   a   unsat for each a  h 
   a rule unsat  bi  bo  bh    ai  ao  ah  cv  ch    unsat for each rule
a  b  c  r 
   a rule diff  a  a   unsat for each a  o  and a rule diff  a   a   unsat for
each a  h  and
   the following rules 
ok  unsat 

ok  diff  unsat  unsat  

and   ok 

the intuition behind the translation tr     is as follows  the rules in the rst
item check whether an interpretation l  at     corresponding to the actual input
k    l   i  o     a   a  l  h   atv       ath      for tr     satises the
rules in     if the rules of   are satised  then the rules in items    are activated
by the literals unsat in their bodies  the rules in the second item are used to
generate a subset l of l such that l  ati        l  ati       this is achieved by
introducing a new atom a for each a  ato       ath       the rules in the third
item check whether the representation of l in ati       ato       ath        i e  
k     l  i    a   a  l   o  h    satises the rules in l
    the rules in the
fourth item check whether l is a proper subset of l  finally  the rules in the fth
item summarize the reasons why l cannot be a stable model of     i e   either the
rules in   are not satised in l  or l is not a minimal model of l
    as the net eect
of this construction  tr     k has a stable model i l is not a stable model of    
   

fijanhunen  oikarinen  tompits   woltran

definition     let   and     hr  i  o  hi be compatible dlp functions having enough
visible atoms  then  the translation eqt         is given by    hidden      tr     
the translation tr     for the minimality check essentially contains the same rules as
tr r    r      r    where tr r    r    is the translation dened by oikarinen and janhunen
       for sets r  and r  of disjunctive rules  there are two further aspects  however 
first  occurrences of hidden atoms from h are additionally represented using their counterparts from h    second  we only need renamed versions of atoms in o  h because the
interpretation of atoms in the input signature i is kept xed  finally  we note that for
dlp functions   and   which correspond to ordinary disjunctive logic programs  i e  
for     hr      o  i and     hr      o  i  the translation eqt         coincides with
tr r    r    
theorem     let   and   be compatible dlp functions having enough visible atoms 
then    m   iff both sm eqt             and sm eqt             
proof sketch  let   and     hr  i  o  hi be compatible dlp functions having enough
visible atoms  by theorem      given compatible interpretations m   at      m  
at hidden       and m   at tr       m   m  m  m  is a stable model of the translation eqt         i m   sm      m   sm hidden       and m   sm tr       given
any interpretation m   at      there is a unique stable model m   sm hidden     
compatible with m    since   has the eva property  hence  hidden     does not constrain
stable models in the composition eqt          whenever m  is compatible with both m 
and m    it holds that m   i oh       m  m    i oh    and m   sm tr      i
the interpretation m   i o  a  h   a  m    is not a stable model of   as established
by oikarinen and janhunen        theorem    

when verifying modular equivalence of dlp functions of the forms     and     
it is possible to further streamline the translations involved in the verication task 
theorem     let   and   be compatible dlp functions having enough visible atoms 
and  a dlp function such that     and     are defined  then      m    
iff both sm eqt               and sm eqt               
the context  can be an arbitrary dlp function  i e   it is not necessary for  to have the
eva property  as long as     and     are dened  to prove theorem      notice
that due to the structure of the translation  eqt           is dened whenever     is
dened  and then theorems     and     can be applied 

   related work
eiter et al       a  consider the use of disjunctive datalog programs as query programs over
relational databases  in their approach  query programs are formalized as triples h  r  si
where  is a set of disjunctive rules and r and s are the signatures for the input and output
relations  respectively  whereas auxiliary  hidden  predicates are left implicit  hence  in the
propositional case  the only notable dierence with respect to denition     is that input
atoms are not allowed to occur in the heads of disjunctive rules  as regards semantics  the
   

fimodularity aspects of disjunctive stable models

program  is reduced with respect to a complete input database d specied in terms of
r  yielding the instantiation  d   and  among others  stable model semantics is applied to
 d  in analogy to denition      however  in contrast to our modular architecture  eiter
et al       a  take both positive and negative dependencies into account and no recursion
between modules is tolerated  the resulting hierarchy of complete components admits a
straightforward generalization of the splitting sequences  lifschitz   turner         the
essential dierence is that a partial order rather than a total order of modules is assumed 
in this respect  it is worth pointing out that partial orders of dlp functions are permitted
by  
modularity has gained more attention in the context of conventional  monotonic  logic
programming  see the work of bugliesi  lamma  and mello        for a survey  two mainstream approaches are identied  the rst is called programming in the large in which algebraic operators are introduced for the construction of logic programs out of modules  the
approach of our paper falls into this categorythe join  being an example of such operators 
the other  and quite dierent programming in the small approach  is to extend the underlying logical language in terms of abstraction mechanisms  in the approach of eiter et al 
     b   for instance  logic program modules are viewed as generalized quantifiers which are
allowed to nest but only in a hierarchical fashion  to give an idea of this approach  consider
a module that formalizes the transitive closure of a relation denoted by a predicate rel     
tclo x  y   rel x  y  

tclo x  y   tclo x  z   rel z  y  

here  tclo     acts as the output predicate of the module tclo rel  whereas rel     is its only
input predicate  the module can be invoked to create the transitive closure of any binary
relation substituted for rel     above  consider  for instance  the rule
loop x   tclo edge  x  y   tclo edge  y  x 
which captures nodes involved in the loops of a directed graph whose edges are supposed to
be represented with the predicate edge      in our approach  the call tclo edge  would result
in one module as part of the respective ground program with input and output signatures
in    edge x  y       x  y  n  and on    tclo x  y       x  y  n 
in the case of n vertices  however  in the architecture of eiter et al       b   the module
tclo rel  can be invoked several times to form transitive closures of dierent relations  in our
eectively propositional approach  each invocation of tclo rel  would map to a new module 
although these modules could be obtained by straightforward renaming of predicates  this
aspect illustrates the power of the programming in the small approach  here  tclo rel  acts
as a new parameterized connective which the programmer can concisely refer to as a new
relation  viz  the transitive closure of rel in this case  but  in spite of succinctness at this
point  such relations may have to be unwound in an actual implementation  this aspect is
made explicit in the modular action description  mad  language proposed by lifschitz and
ren         a modular action description is turned into a single module description in a
recursive fashion  the outcome determines the meaning of the modular description via an
embedding into asp  lifschitz   turner        
faber  greco  and leone        apply the magic set method in the evaluation of datalog
programs with negation  their notion of a module is based on the concept of an independent
   

fijanhunen  oikarinen  tompits   woltran

set  for a non disjunctive logic program    hr    o  i  such a set s  o satises  for any
a  s  the following two conditions 
   if there is a rule h  b  c  r such that h   a  then b  c  s  and
   if a  b  c for some dangerous rule h  b  c  r  then  h   b  c  s 
we skip the exact denition of dangerous rules which  roughly speaking  may interfere with
the existence of stable models  it is clear that independent sets are splitting sets in the sense
of denition       but not vice versa in general  hence  the module theorem provided by
faber et al         can be viewed as a special case of the splitting set theorem and  therefore 
observations presented in section     apply to independent sets as well 

    conclusion and discussion
in this paper  we introduced a formal framework for modular programming in the context
of disjunctive logic programs under stable model semantics  the framework is based on the
notion of a dlp function which puts into eect appropriate input output interfacing for
disjunctive logic programs  analogous module concepts have already been studied in the
cases of normal logic programs and smodels programs  oikarinen   janhunen      a  and
even propositional theories  janhunen      a   but the special characteristics of disjunctive
rules are properly taken into account in the syntactic and semantic denitions of dlpfunctions presented herein  in this respect  we would like to draw the readers attention to
denition      item     denition      items      as well as denition     
undoubtedly  the main result of this paper is the module theorem  i e   theorem     
which is proved for dlp functions in generalthus covering the class of disjunctive programs  the module theorem is important as it provides a compositional semantics for
disjunctive programs and it generalizes existing approaches such as those based on splitting sets  lifschitz   turner        and magic sets  faber et al          although our
approach is based on a number of design decisions  e g   as regards the denition of module
composition  it nevertheless brings out the limits of modular programming in the context
of a nonmonotonic declarative language  the module theorem can be exploited in a number of ways in asp based on disjunctive logic programs  as demonstrated in section    it
provides the basis for decomposing disjunctive programs into their components and hence
the localization of reasoning tasks  moreover  as established in section    the technique of
shifting disjunctive rules can be generalized for disjunctive programs involving head cycles 
actually  the generalized form enables us to remove shared disjunctive rules altogether but
this might not be desirable due to higher space requirements  finally  the theory of modular
equivalence is fully applicable to dlp functions as demonstrated in section   
in addition to the results discussed above  we anticipate further applications of the module theorem in the future  we strongly believe that research in this direction not only yields
results of theoretical interest but also leads to the development of practicably useful software
engineering methods for asp  in fact  rst tools for decomposing and linking programs have
already been implemented in the context of the smodels system    the results of section   enable the development of analogous tools to be used with disjunctive solvers such as
    see modlist and lpcat in the asp tools collection at http   www tcs hut fi software asptools  

   

fimodularity aspects of disjunctive stable models

claspd  cmodels  dlv  and gnt  there is also an implementation of the general shifting
principle  called dencode  in the asp tool collection  the results of section   pave the way
for extending a translation based verication tool  dlpeq  janhunen   oikarinen        
for the verication of modular equivalence  such an extension is already available in the
respective tool  lpeq  for smodels programs  oikarinen   janhunen          
acknowledgments this work was partially supported by the academy of finland under projects          advanced constraint programming techniques for large structured problems  and          methods for constructing and solving large constraint
models   and by the austrian science foundation  fwf  under projects p       formal methods for comparing and optimizing nonmonotonic logic programs  and p     
 methods and methodologies for developing answer set programs   the authors would
like to thank the anonymous referees for their constructive comments as well as martin gebser and torsten schaub for their suggestion to exploit program completion and loop formulas
in the proof of the module theorem  a preliminary version of this paper appeared in the
proceedings of the  th international conference on logic programming and nonmonotonic
reasoning  lpnmr     vol       of lncs  pp          tempe  az  usa  springer 

references
baral  c   dzifcak  j     takahashi  h          macros  macro calls and use of ensembles in
modular answer set programming  in etalle  s     truszczyski  m   eds    proceedings
of the   nd international conference on logic programming  iclp      vol       of
lncs  pp          seattle  wa  usa  springer 
ben eliyahu  r     dechter  r          propositional semantics for disjunctive logic programs  annals of mathematics and artificial intelligence                
bugliesi  m   lamma  e     mello  p          modularity in logic programming  journal of
logic programming                
clark  k  l          negation as failure  in gallaire  h     minker  j   eds    logic and
data bases  pp          plenum press  new york 
dix  j   gottlob  g     marek  v  w          reducing disjunctive to non disjunctive
semantics by shift operations  fundamenta informaticae                  
drescher  c   gebser  m   grote  t   kaufmann  b   knig  a   ostrowski  m     schaub 
t          conict driven disjunctive answer set solving  in brewka  g     lang  j 
 eds    proceedings of the   th international conference on principles and knowledge
representation and reasoning  pp          sydney  australia  aaai press 
eiter  t     fink  m          uniform equivalence of logic programs under the stable model
semantics  in palamidessi  c   ed    proceedings of the   th international conference
on logic programming  iclp     vol       of lncs  pp          mumbay  india 
springer 
    verification tools mentioned here are available at http   www tcs hut fi software lpeq  

   

fijanhunen  oikarinen  tompits   woltran

eiter  t   fink  m   tompits  h     woltran  t          simplifying logic programs under
uniform and strong equivalence  in lifschitz  v     niemel  i   eds    proceedings of
the  th international conference on logic programming and nonmonotonic reasoning
 lpnmr      vol       of lnai  pp        fort lauderdale  fl  usa  springer 
eiter  t     gottlob  g          on the computational cost of disjunctive logic programming 
propositional case  annals of mathematics and artificial intelligence               
    
eiter  t   gottlob  g     mannila  h       a   disjunctive datalog  acm transactions on
database systems                 
eiter  t   gottlob  g     veith  h       b   modular logic programming and generalized
quantiers  in dix  j   furbach  u     nerode  a   eds    proceedings of the  th
international conference on logic programming and nonmonotonic reasoning  lpnmr      vol       of lncs  pp          dagstuhl  germany  springer 
eiter  t   ianni  g   lukasiewicz  t   schindlauer  r     tompits  h          combining
answer set programming with description logics for the semantic web  artificial
intelligence                       
erdem  e     lifschitz  v          tight logic programs  theory and practice of logic
programming                  
faber  w   greco  g     leone  n          magic sets and their application to data integration  journal of computer and system sciences             
gaifman  h     shapiro  e          fully abstract compositional semantics for logic programs  in proceedings of the   th annual acm symposium on principles of programming languages  pp          austin  tx  usa  acm press 
gebser  m   kaminski  r   kaufmann  b   ostrowski  m   schaub  t     thiele  s       a  
engineering an incremental asp solver  in de la banda  m     pontelli  e   eds   
proceedings of the   th international conference on logic programming  iclp    
vol       of lncs  pp          udine  italy  springer 
gebser  m   schaub  t   thiele  s   usadel  b     veber  p       b   detecting inconsistencies in large biological networks with answer set programming  in de la banda 
m     pontelli  e   eds    proceedings of the   th international conference on logic
programming  iclp     vol       of lncs  pp          udine  italy  springer 
gelfond  m     gabaldon  a          building a knowledge base  an example  annals of
mathematics and artificial intelligence                   
gelfond  m     leone  n          logic programming and knowledge representation  the
a prolog perspective  artificial intelligence                 
gelfond  m     lifschitz  v          the stable model semantics for logic programming  in
kowalski  r  a     bowen  k  a   eds    proceedings of the  th international conference on logic programming  iclp     pp            seattle  wa  usa  mit
press 
   

fimodularity aspects of disjunctive stable models

gelfond  m     lifschitz  v          classical negation in logic programs and disjunctive
databases  new generation computing            
gelfond  m   przymusinska  h   lifschitz  v     truszczyski  m          disjunctive defaults  in allen  j  f   fikes  r     sandewall  e   eds    proceedings of the  nd international conference on principles and knowledge representation and reasoning  pp 
        cambridge  ma  usa  morgan kaufmann 
giunchiglia  e   lierler  y     maratea  m          answer set programming based on
propositional satisability  journal of automated reasoning                 
janhunen  t          some  in translatability results for normal logic programs and propositional theories  journal of applied non classical logics                
janhunen  t       a   modular equivalence in general  in ghallab  m   spyropoulos  c  
fakotakis  n     avouris  n   eds    proceedings of the   th european conference on
artificial intelligence  ecai     pp        patras  greece  ios press 
janhunen  t       b   removing redundancy from answer set programs  in de la banda 
m     pontelli  e   eds    proceedings of the   th international conference on logic
programming  iclp     vol       of lncs  pp          udine  italy  springer 
janhunen  t   niemel  i   seipel  d   simons  p     you  j  h          unfolding partiality
and disjunctions in stable model semantics  acm transactions on computational
logic             
janhunen  t     oikarinen  e          lpeq and dlpeq  translators for automated equivalence testing of logic programs  in lifschitz  v     niemel  i   eds    proceedings of
the  th international conference on logic programming and nonmonotonic reasoning
 lpnmr      vol       of lnai  pp          fort lauderdale  fl  usa  springer 
janhunen  t     oikarinen  t          automated verication of weak equivalence within
the smodels system  theory and practice of logic programming                
junttila  t     niemel  i          towards an ecient tableau method for boolean circuit
satisability checking  in lloyd  j  w   et al   eds    proceedings of the first international conference on computational logic  cl        vol       of lncs  pp         
london  uk  springer 
koch  c   leone  n     pfeifer  g          enhancing disjunctive logic programming systems
by sat checkers  artificial intelligence                    
lee  j     lifschitz  v          loop formulas for disjunctive logic programs  in palamidessi 
c   ed    proceedings of the   th international conference on logic programming
 iclp      vol       of lncs  pp          mumbay  india  springer 
leone  n   pfeifer  g   faber  w   eiter  t   gottlob  g     scarcello  f          the dlv
system for knowledge representation and reasoning  acm transactions on computational logic                
   

fijanhunen  oikarinen  tompits   woltran

lifschitz  v          computing circumscription  in joshi  a  k   ed    proceedings of the
 th international joint conference on artificial intelligence  ijcai      pp         
los angeles  ca  usa  morgan kaufmann 
lifschitz  v   pearce  d     valverde  a          strongly equivalent logic programs  acm
transactions on computational logic                
lifschitz  v     ren  w          a modular action description language  in proceedings
of the   st national conference on artificial intelligence  aaai     pp         
boston  ma  usa  aaai press 
lifschitz  v     turner  h          splitting a logic program  in hentenryck  p  v   ed   
proceedings of the   th international conference on logic programming  iclp     
pp        santa margherita ligure  italy  mit press 
lifschitz  v     turner  h          representing transition systems by logic programs  in
gelfond  m   leone  n     pfeifer  g   eds    proceedings of the  th international
conference on logic programming and nonmonotonic reasoning   lpnmr      vol 
     of lnai  pp         el paso  tx  usa  springer 
lin  f     zhao  y          assat  computing answer sets of a logic program by sat
solvers  artificial intelligence                    
marek  v  w     truszczyski  m          stable models and an alternative logic programming paradigm  in apt  k  r   marek  v  w   truszczyski  m     warren 
d  s   eds    the logic programming paradigm  a    year perspective  pp         
springer 
mccarthy  j          applications of circumscription to formalizing commonsense knowledge  artificial intelligence            
niemel  i          logic programs with stable model semantics as a constraint programming
paradigm  annals of mathematics and artificial intelligence                  
oikarinen  e     janhunen  t          verifying the equivalence of logic programs in the
disjunctive case  in lifschitz  v     niemel  i   eds    proceedings of the  th international conference on logic programming and nonmonotonic reasoning  lpnmr     
vol       of lnai  pp          fort lauderdale  fl  usa  springer 
oikarinen  e     janhunen  t       a   achieving compositionality of the stable model
semantics for smodels programs  theory and practice of logic programming         
       
oikarinen  e     janhunen  t       b   implementing prioritized circumscription by computing disjunctive stable models  in dochev  d   pistore  m     traverso  p   eds   
artificial intelligence  methodology  systems  and applications    th international
conference  aimsa     vol       of lncs  pp          varna  bulgaria  springer 
oikarinen  e     janhunen  t          a translation based approach to the verication of
modular equivalence  journal of logic and computation              
   

fimodularity aspects of disjunctive stable models

reiter  r          a theory of diagnosis from rst principles  artificial intelligence         
     
simons  p   niemel  i     soininen  t          extending and implementing the stable
model semantics  artificial intelligence                   

   

fi