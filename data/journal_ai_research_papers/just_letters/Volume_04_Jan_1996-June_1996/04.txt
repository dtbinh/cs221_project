journal of artificial intelligence research                 

submitted       published      

a principled approach towards symbolic
geometric constraint satisfaction
sanjay bhansali

bhansali eecs wsu edu

school of eecs  washington state university
pullman  wa           

glenn a  kramer

gak eit com

enterprise integration technologies      el camino real
menlo park  ca      

tim j  hoar

timhoar microsoft com

microsoft corporation
one microsoft way        
redmond  wa      

abstract
an important problem in geometric reasoning is to find the configuration of a collection of
geometric bodies so as to satisfy a set of given constraints  recently  it has been suggested that this
problem can be solved efficiently by symbolically reasoning about geometry  this approach  called
degrees of freedom analysis  employs a set of specialized routines called plan fragments that
specify how to change the configuration of a set of bodies to satisfy a new constraint while
preserving existing constraints  a potential drawback  which limits the scalability of this approach 
is concerned with the difficulty of writing plan fragments  in this paper we address this limitation
by showing how these plan fragments can be automatically synthesized using first principles about
geometric bodies  actions  and topology 

   introduction
an important problem in geometric reasoning is the following  given a collection of geometric
bodies  called geoms  and a set of constraints between them  find a configuration  i e   position 
orientation  and dimension  of the geoms that satisfies all the constraints  solving this problem
is an integral task for many applications like constraint based sketching and design  geometric
modeling for computer aided design  kinematics analysis of robots and other mechanisms
 hartenberg   denavit         and describing mechanical assemblies 
general purpose constraint satisfaction techniques are not well suited for solving constraint
problems involving complicated geometry  such techniques represent geoms and constraints as
algebraic equations  whose real solutions yield the numerical values describing the desired
configuration of the geoms  such equation sets are highly non linear and highly coupled and in
the general case require iterative numerical solutions techniques  iterative numerical techniques
are not particularly efficient and can have problems with stability and robustness  press 
flannery  teukolsky   vetterling         for many tasks  e g   simulation and optimization of
mechanical devices  the same equations are solved repeatedly which makes a compiled solution
desirable  in theory  symbolic manipulation of equations can often yield a non iterative  closed
form solution  once found  such a closed form solution can be executed very efficiently 
     ai access foundation and morgan kaufmann publishers  all rights reserved 

fibhansali  kramer   hoar

however  the computational intractability of symbolic algebraic solution of the equations renders
this approach impractical  kramer        liu   popplestone        
in earlier work kramer describes a system called gce that uses an alternative approach
called degrees of freedom analysis               this approach is based on symbolic reasoning
about geometry  rather than equations  and was shown to be more efficient than systems based on
algebraic equation solvers  the approach uses two models  a symbolic geometric model is used
to reason symbolically about how to assemble the geoms so as to satisfy the constraints
incrementally  the  assembly plan  thus developed is used to guide the solution of the complex
nonlinear equations   derived from the second  numerical model   in a highly decoupled  stylized
manner 
the gce system was used to analyze problems in the domain of kinematics and was shown
to perform kinematics simulation of complex mechanisms  including a stirling engine  an
elevator door mechanism  and a sofa bed mechanism  much more efficiently than pure numerical
solvers  kramer         the gce has subsequently been integrated in a commercial system
called bravotm by applicon where it is used to drive the  d sketcher  brown associates        
several academic systems are currently using the degrees of freedom analysis for other
applications like assembly modeling  anantha  kramer   crawford         editing and
animating planar linkages  brunkhart         and feature based design  salomons        shah  
rogers        
gce employs a set of specialized routines called plan fragments to create the assembly plan 
a plan fragment specifies how to change the configuration of a geom using a fixed set of
operators and the available degrees of freedom  so that a new constraint is satisfied while
preserving all prior constraints on the geom  the assembly plan is completed when all
constraints have been satisfied or the degrees of freedom is reduced to zero  this approach is
canonical  the constraints may be satisfied in any order  the final status of the geom in terms of
remaining degrees of freedom is the same  p         kramer         the algorithm for finding
the assembly procedure has a time complexity of o cg  where c is the number of constraints and
g is the number of geoms  p       kramer        
since the crux of problem solving is taken care of by the plan fragments  the success of the
approach depends on ones ability to construct a complete set of plan fragments meeting the
canonical specification  the number of plan fragments needed grows geometrically as the
number of geoms and constraints between them increase  worse  the complexity of the plan
fragments increases exponentially since the various constraints interact in subtle ways creating a
large number of special cases that need to be individually handled  this is potentially a serious
limitation in extending the degrees of freedom approach  in this paper we address this problem
by showing how plan fragments can be automatically generated using first principles about
geoms  actions  and topology 
our approach is based on planning  plan fragment generation can be reduced to a planning
problem by considering the various geoms and the invariants on them as describing a state 
operators are actions  such as rotate  that can change the configuration of geoms  thereby
violating or achieving some constraint  an initial state is specified by the set of existing
invariants on a geom and a final state by the additional constraints to be satisfied  a plan is a
sequence of actions that when applied to the initial state achieves the final state 
with this formulation  one could presumably use a classical planner  such as strips  fikes
  nilsson         to automatically generate a plan fragment  however  the operators in this
domain are parametric operators with a real valued domain  thus  the search space consists of an
infinite number of states  even if the real valued domain is discretized by considering realvalued intervals there is still a very large search space and finding a plan that satisfies the
   

fiprincipled symbolic geometric constraint satisfaction

specified constraints would be an intractable problem  our approach uses loci information
 representing a set of points that satisfy some constraints  to reason about the effects of various
operators and thus reduces the search problem to a problem in topology  involving reasoning
about the intersection of various loci 
an issue to be faced in using a conventional planner is the frame problem  how to determine
what properties or relationships do not change as a result of an action  a typical solution is to use
the assumption  an action does not modify any property or relationship unless explicitly stated as
an effect of the action  such an approach works well if one knows a priori all possible
constraints or invariants that might be of interest and relatively few constraints get affected by
each action   which is not true in our case  we use a novel scheme for representing effects of
actions  it is based on reifying  i e   treating as first class objects  actions in addition to geometric
entities and invariant types  we associate  with each pair of geom and invariants  a set of actions
that can be used to achieve or preserve that invariant for that geom  whenever a new geom or
invariant type is introduced the corresponding rules for actions that can achieve preserve the
invariants have to be added  since there are many more invariant types than actions in this
domain  this scheme results in simpler rules  borgida  mylopoulos   reiter        propose a
similar approach for reasoning with program specifications  a unique feature of our work is the
use of geometric specific matching rules to determine when two or more general actions that
achieve preserve different constraints can be reformulated to a less general action 
another shortcoming of using a conventional planner is the difficulty of representing
conditional effects of operators  in gce an operations effect depends on the type of geom as
well as the particular geometry  for example  the action of translating a body to the intersection
of two lines on a plane would normally reduce the bodys translational degrees of freedom to
zero  however  if the two lines happen to coincide then the body still retains one degree of
translational freedom and if the two lines are parallel but do not coincide then the action fails 
such situations are called degeneracies  one approach to handling degeneracies is to use a
reactive planner that dynamically revises its plan at run time  however  this could result in
unacceptable performance in many real time applications  our approach makes it possible to precompile all potential degeneracies in the plan  we achieve this by dividing the planning
algorithm into two phases  in the first phase a skeletal plan is generated that works in the normal
case and in the second phase  this skeletal plan is refined to take care of singularities and
degeneracies  the approach is similar to the idea of refining skeletal plans in molgen
 friedland        and the idea of critics in hacker  sussman        to fix known bugs in a
plan  however  the skeletal plan refinement in molgen essentially consisted of instantiating a
partial plan to work for specific conditions  whereas in our method a complete plan which works
for a normal case is extended to handle special conditions like degeneracies and singularities 
    a plan fragment example 
we will use a simple example of a plan fragment specification to illustrate our approach 
domains such as mechanical cad and computer based sketching rely heavily on complex
combinations of relatively simple geometric elements  such as points  lines  and circles and a
small collection of constraints such as coincidence  tangency  and parallelism  figure  
illustrates some fairly complex mechanisms  all implemented in gce  using simple geoms and
constraints 

   

fibhansali  kramer   hoar

automobile suspension

elevator doors
stirling engine
figure    modeling complex mechanisms using simple geoms and constraints  all the constraints
needed to model the joints in the above mechanisms are solvable using the degrees of freedom approach 

our example problem is illustrated in figure   and is specified as follows 
geom type  circle
name   c
invariants   fixed distance line  c  l   dist  bias counterclockwise 
to be achieved   fixed distance line  c  l   dist  bias clockwise 
in this example  a variable radius circle  c  has a prior constraint specifying that the circle is
at a fixed distance  dist  to the left of a fixed line  l   or alternatively  that a line drawn parallel
to  l  at a distance  dist  from the center of  c is tangent in a counterclockwise direction to the
circle   the new constraint to be satisfied is that the circle be at a fixed distance  dist  to the
right of another fixed line  l  

 l 
 l 
 c
 c

 dist 

 l 

 dist 
 l 

figure    example problem  initial state 

 we use the following conventions  symbols preceded by   represent constants  symbols preceded by  
represent variables  expressions of the form     parent subpart  denote the subpart of a compound term  parent 

   

fiprincipled symbolic geometric constraint satisfaction

to solve this problem  three different plans can be used   a  translate the circle from its
current position to a position such that it touches the two lines  l  and  l  shown in the figure
 b  scale the circle while keeping its point of contact with  l  fixed  so that it touches  l   c 
scale and translate the circle so that it touches both  l  and  l  
each of the above action sequences constitute one plan fragment that can be used in the
above situation and would be available to gce from a plan fragment library  note that some of
the plan fragments would not be applicable in certain situations  for example  if  l  and  l  are
parallel  then a single translation can never achieve both the constraints  and plan fragment  a 
would not be applicable  in this paper we will show how each of the plan fragments can be
automatically synthesized by reasoning from more fundamental principles 
the rest of the paper is organized as follows  section   gives an architectural overview of the
system built to synthesize plan fragments automatically with a detailed description of the various
components  section   illustrates the plan fragment synthesis process using the example of
figure    section   describes the results from the current implementation of the system  section
  relates our approach to other work in geometric constraint satisfaction  section   summarizes
the main results and suggests future extensions for this work 

   overview of system architecture
figure   gives an overview of the architecture of our system showing the various knowledge
components and the plan generation process  the knowledge represented in the system is broadly
categorized into a geom knowledge base that contains knowledge specific to particular
geometric entities and a geometry knowledge base that is independent of particular geoms and
can be reused for generating plan fragments for any geom 
knowledge components
geometry knowledge base
geom knowledge base
geoms

actions

invariants

action matching rules
action rules

loci

reformulation rules

signatures

measurements

plan fragment
specification

planner
phase i

prioritization strategy

skeletal
plan

planner
phase ii

plan fragment

figure    architectural overview of the plan fragment generator

    geom knowledge base
the geom specific knowledge base can be further decomposed into seven knowledge
components 
   

fibhansali  kramer   hoar

      actions
these describe operations that can be performed on geoms  in the gce domain  three actions
suffice to change the configuration of a body to an arbitrary configuration   translate g v  which
denotes a translation of geom g by vector v   rotate g pt ax amt  which denotes a rotation of
geom g  around point pt  about an axis ax  by an angle amt  and  scale g pt amt  where g is a
geom  pt is a point on the geom  and amt is a scalar  the semantics of a scale operation depends
on the type of the geom  for example  for a circle  a scale indicates a change in the radius of the
circle and for a line segment it denotes a change in the line segments length  pt is the point on
the geom that is fixed  e g   the center of a circle  
      invariants
these describe constraints to be solved for the geoms  the initial version of our system has been
designed to generate plan fragments for a variable radius circle and a variable length linesegment on a fixed workplane  with constraints on the distances between these geoms and points 
lines  and other geoms on the same workplane  there are seven invariant types to represent these
constraints  examples of two such invariants are 



 invariant point g pt glb coords  which specifies that the point pt of geom g is
coincident with the global coordinates glb coords  and
 fixed distance point g pt dist bias  which specifies that the geom g lies at a fixed
distance dist from point pt  bias can be either bias inside or bias outside
depending on whether g lies inside or outside a circle of radius dist around point pt 

      loci
these represent sets of possible values for a geom parameter  such as the position of a point on a
geom  the various kinds of loci can be grouped into either a  d locus  representable by a set of
parametric equations in one parameter  or a  d locus  representable by a set of parametric
equations in two variables   for  example a line is a  d locus specified as  make line locus
through pt direc  and represents an infinite line passing through through pt and having a
direction direc  other loci represented in the system include rays  circles  parabolas  hyperbolas 
and ellipses 
      measurements
these are used to represent the computation of some function  object  or relationship between
objects  these terms are mapped into a set of service routines which get called by the plan
fragments  an example of a measurement term is    d intersection  d locus   d locus    this
represents the intersection of two  d loci  in the normal case  the intersection of two  dimensional loci is a point  however  there may be singular cases  for example  when the two
loci happen to coincide  in such a case their intersection returns one of the locus instead of a
point  there may also be degenerate cases  for example  when the two loci do not intersect  in
such a case  the intersection is undefined  these exceptional conditions are also represented with
each measurement type and are used during the second phase of the plan generation process to
elaborate a skeletal plan  see section      
   

fiprincipled symbolic geometric constraint satisfaction

      geoms
these are the objects of interest in solving geometric constraint satisfaction problems  examples
of geoms are lines  line segments  circles  and rigid bodies  geoms have degrees of freedoms
which allow them to vary in location and size  for example  in  d space a circle with a variable
radius  has three translational  two rotational  and one dimensional degree of freedom 
the configuration variables of a geom are defined as the minimal number of real valued
parameters required to specify the geometric entity in space unambiguously  thus  a circle has
six configuration variables  three for the center  one for the radius  and two for the plane
normal   in addition  the representation of each geom includes the following 





name  a unique symbol to identify the geom 
action rules  a set of rules that describe how invariants on the geom can be
preserved or achieved by actions  see below  
invariants  the set of current invariants on the geom 
invariants to be achieved  the set of invariants that need to be achieved for the
geom 

      action rules
an action rule describes the effect of an action on an invariant  there are two facts of interest to
a planner when constructing a plan      how to achieve an invariant using an action and     how
to choose actions that preserve as many of the existing invariants as possible  in general  there
are several ways to achieve an invariant and several actions that will preserve an invariant  the
intersection of these two sets of actions is the set of feasible solutions  in our system  the effect
of actions is represented as part of geom specific knowledge in the form of action rules  whereas
knowledge about how to compute intersections of two or more sets of actions is represented as
geometry specific knowledge  since it does not depend on the particular geom being acted on  
an action rule consists of a three tuple  pattern  to preserve  to  re achieve   pattern is the
invariant term of interest  to preserve is a list of actions that can be taken without violating the
pattern invariant  and to  re achieve is a list of actions that can be taken to achieve the invariant
or re achieve an existing invariant clobbered by an earlier action  these actions are stated in
the most general form possible  the matching rules in the geometry knowledge base are then
used to obtain the most general unifier of two or more actions  an example of an action rule 
associated with variable radius circle geoms is 
pattern    d constrained point  circle      circle center    dlocus 
to preserve   scale  circle      circle center   any 
 translate  circle  v        dlocus arbitrary point 
     circle center  
to  re achieve   translate  circle  v        dlocus arbitrary point 
     circle center  

 ar   

this action rule is used to preserve or achieve the constraint that the center of a circle geom
lie on a  d locus  there are two actions that may be performed without violating this constraint 
    scale the circle about its center  this would change the radius of the circle but the position of
the center remains the same and hence the  d constrained point invariant is preserved     
   

fibhansali  kramer   hoar

translate the circle by a vector that goes from its current center to an arbitrary point on the  dimensional locus   v  a b  denotes a vector from point b to point a   to achieve this invariant
only one action may be performed  translate the circle so that its center moves from its current
position to an arbitrary position on the   dimensional locus 
      signatures
for completeness  it is necessary that there exist a plan fragment for each possible combination
of constraints on a geom  however  in many cases  two or more constraints describe the same
situation for a geom  in terms of its degrees of freedom   for example  the constraints that
ground the two end points of a line segment and the constraints that ground the direction  length 
and one end point of a line segment both reduce the degrees of freedom of the line segment to
zero and hence describe the same situation  in order to minimize the number of plan fragments
that need to be written  it is desirable to group sets of constraints that describe the same situation
into equivalence classes and represent each equivalence class using a canonical form 
the state of a geom  in terms of the prior constraints on it  is summarized as a signature  a
signature scheme for a geom is the set of canonical signatures for which plan fragments need to
be written  in kramers earlier work        the signature scheme had to be determined manually
by examining each signature obtained by combining constraint types and designating one from a
set of equivalent signatures to be canonical  our approach allows us to construct the signature
scheme for a geom automatically by using reformulation rules  described shortly   a
reformulation rule rewrites one or more constraints into a simpler form  the signature scheme is
obtained by first generating all possible combinations of constraint types to yield the set of all
possible signatures  these signatures are then reduced using the reformulation rules until each
signature is reduced to the simplest form  the set of  unique  signatures that are left constitute
the signature scheme for the geom 
as an example  consider the set of constraint types on a variable radius circle  the signature
for this geom is represented as a tuple  center  normal  radius  fixedpts  fixedlines  where 







center denotes the invariants on the center point and can be either free  i e   no
constraint on the center point   l   i e   center point is constrained to be on a  dimensional locus   l   i e   center point is constrained to be on a   dimensional
locus   or fixed 
normal denotes the invariant on the normal to the plane of the circle and can be
either free  l   or fixed  in  d it is always fixed  
radius denotes the invariant on the radius and can be either free or fixed 
fixedpts denotes the number of fixed distance point invariants and can be either     
or   
fixedlines denotes the number of fixed distance line invariants and can be either
     or   

l  and l  denote a  d and  d locus respectively  if we assume a  d geometry  the l  invariant
on the center is redundant  and the normal is always fixed  there are then   x   x   x   x       
possible signatures for the geom  however  several of these describe the same situation  for
example  the signature 
 center free radius free  fixedpts   fixedlines   
which describes a circle constrained to be at specific distances from two fixed lines  can be
rewritten to 
   

fiprincipled symbolic geometric constraint satisfaction

 center l   radius free fixedpts   fixedlines   
which describes a circle constrained to be on a   dimensional locus  in this case the angular
bisector of two lines   using reformulation rules  we can derive the signature scheme for variable
radius circles consisting of only    canonical signatures given below 
 center free radius free  fixedpts   fixedlines   
 center free radius free  fixedpts   fixedlines   
 center free radius free  fixedpts   fixedlines   
 center free radius fixed  fixedpts   fixedlines   
 center l  radius free  fixedpts   fixedlines   
 center l  radius free  fixedpts   fixedlines   
 center l  radius free  fixedpts   fixedlines   
 center l  radius fixed  fixedpts   fixedlines   
 center fixed radius free  fixedpts   fixedlines   
 center fixed radius fixed  fixedpts   fixedlines   
similarly  the number of signatures for line segments can be reduced from     to    using
reformulation rules 
    geometry specific knowledge
the geometry specific knowledge is organized as three different kinds of rules 
      matching rules
these are used to match terms using geometric properties  the planner employs a unification
algorithm to match actions and determine whether two actions have a common unifier  however 
the standard unification algorithm is not sufficient for our purposes  since it is purely syntactic
and does not use knowledge about geometry  to illustrate this  consider the following two
actions 
 rotate  g  pt   vec   amt    and
 rotate  g  pt   vec   amt   
the first term denotes a rotation of a fixed geom  g  around a fixed point  pt  about an
arbitrary axis by an arbitrary amount  the second term denotes a rotation of the same geom
around a different fixed point  pt  with the rotation axis and amount being unspecified as before 
standard unification fails when applied to the above terms because no binding of variables
makes the two terms syntactically equal   however  resorting to knowledge about geometry  we
can match the two terms to yield the following term 
 rotate  g  pt   v   pt   pt    amt  
which denotes a rotation of the geom around the axis passing through points  pt  and  pt   the
point around which the body is rotated can be any point on the axis  here it is arbitrarily chosen
to be one of the fixed points   pt   and the amount of rotation can be anything 
the planner applies the matching rules to match the outermost expression in a term first  if
no rule applies  it tries subterms of that term  and so on  if none of the matching rules apply  then
  specifically  unification fails when it tries to unify  pt  and  pt  

   

fibhansali  kramer   hoar

this algorithm degenerates to standard unification  the matching rules can also have conditions
attached to them  the condition can be any boolean function  however  for the most part they
tend to be simple type checks 
      reformulation rules
as mentioned earlier  there are several ways to specify constraints that restrict the same degrees
of freedom of a geom  in gce  plan fragments are indexed by signatures which summarize the
available degrees of freedom of a geom  to reduce the number of plan fragments that need to be
written and indexed  it is desirable to reduce the number of allowable signatures  this is
accomplished with a set of invariant reformulation rules which are used to rewrite pairs of
invariants on a geom into an equivalent pair of simpler invariants  using a well founded
ordering   here equivalence means that the two sets of invariants produce the same range of
motions in the geom  this reduces the number of different combinations of invariants for which
plan fragments need to be written  an example of invariant reformulation is the following 
 fixed distance line  c  l   d  bias counterclockwise 
 fixed distance line  c  l   d  bias clockwise 



 rr   

  d constrained point  c      c center   angular bisector
 make displaced line  l  bias left  d  
 make displaced line  l  bias right  d  
bias counterclockwise
bias clockwise  

this rule takes two invariants      a geom is at a fixed distance to the left of a given line  and
    a geom is at a fixed distance to the right of a given line  the reformulation produces the
invariant that the geom lies on the angular bisector of two lines that are parallel to the two given
lines and at the specified distance from them  either of the two original invariants in conjunction
with the new one is equivalent to the original set of invariants 
besides reducing the number of plan fragments  reformulation rules also help to simplify
action rules  currently all action rules  for variable radius circles and line segments  use only a
single action to preserve or achieve an invariant  if we do not restrict the allowable signatures on
a geom  it is possible to create examples where we need a sequence of  more than one  actions in
the rule to achieve the invariant  or we need complex conditions that need to be checked to
determine rule applicability  allowing sequences and conditionals on the rules increases the
complexity of both the rules and the pattern matcher  this makes it difficult to verify the
correctness of rules and reduces the efficiency of the pattern matcher 
using invariant reformulation rules allows us to limit action rules to those that contain a
single action  unfortunately  it seems that we still need conditions to achieve certain invariants 
for example  consider the following invariant on a variable radius circle 
 fixed distance point  circle  pt  dist bias outside 
which states that a circle   circle be at some distance  dist from a point  pt and lie outside a
circle around  pt with radius  dist  one action that may be taken to achieve this constraint is 
 scale  circle
     circle center 
   

fiprincipled symbolic geometric constraint satisfaction

 minus      v       circle center   pt 
magnitude 
 dist 
that is  scale the circle by setting its radius to the distance between its center and the point  pt
minus the scalar amount  dist  see figure     however  this action achieves the constraint only
when the circle happens to lie outside the circular region of radius  dist and center  pt 

 c
 c

figure    the geom  c can be scaled to touch  c only if the center of  c lies in the shaded region 

therefore  we need a pre condition to the rule that checks if this is indeed the case  note that
the above action is necessary for completeness  otherwise the planner would not be able to solve
certain cases which have a solution   instead of allowing conditional rules  we use rules without
condition and in the second phase of the plan generation check to see that there are no
exceptions  thus  in the above example  an exception would be detected since the third argument
of the scale operation returns a negative number  considered an exception condition for a scale
operation 
      prioritizing strategy
given a set of invariants to be achieved on a geom  a planner generally creates multiple
solutions  all of these are valid solutions and in the absence of exception conditions will yield
the same configuration of a geom  however  some plan fragments will contain redundant action
sequences  e g   two consecutive translations   moreover  when the geom is under constrained or
when there are exception conditions  some plan fragments will be able to provide a solution
whereas others will not  the prioritization strategy is used to prioritize the skeletal plan
fragments so that plan fragments with the least redundancy and most flexibility can be chosen 
eliminating plan fragments with redundant actions turns out to be straightforward  we
assume that there is only one degree of dimensional freedom for each geometric body  under
this assumption it can be proved that   translation    rotation  and   scale is sufficient to change
the configuration of an object to an arbitrary configuration in  d space  therefore  any plan
fragment that contains more than one instance of an action type contains redundancies and can
be rewritten to an equivalent plan fragment by eliminating redundant actions  or combining two
or more action into a single composite action  as an example  consider the following pair of
translations on a geom 


 translate  g  vec 
   

fibhansali  kramer   hoar



 translate  g  v   to        g center   

where  vec represents an arbitrary vector and  to  represents an arbitrary position  if  to  is
independent of any positional parameter of the geom  then the first translate action is redundant
and can be removed  hence all plan fragments that contain such redundant actions can be
eliminated 
to prioritize the remaining plan fragments the following principle is used 
prefer solutions that subsume an alternative solution 
the rationale for this principle is that it permits greater flexibility in solving constraints when
there are exception conditions  for example  suppose there are two solutions for a circle geom 
solution    translate the circle so that the center lies at a fixed position on a  dimensional locus 
solution    translate the circle so that the center lies at an arbitrary point on a  dimensional locus  then scale by some fixed amount  which is a function of the
position of the arbitrary point  
the first solution is subsumed by the second solution since we can always choose the
arbitrary point in solution   to be at the fixed position specified in solution    the scale operation
in that case leaves the dimension of the circle unchanged   therefore solution   is preferred over
solution   
the subsumption relation imposes a partial order on the set of skeletal plan fragments  the
prioritization strategy selects the maximal elements of this partial order  at runtime each of these
is tried in turn until one of them yields a solution 

    plan fragment generation
the plan fragment generation process is divided into two phases  figure     in the first phase a
specification of the plan fragment is taken as input  and a planner is used to generate a set of
skeletal plans  these form the input to the second phase which chooses one or more of the
skeletal plans and elaborates them to take care of singularities and degeneracies  the output of
this phase are complete plan fragments 
    phase i
a skeletal plan is generated using a breadth first search process  figure   gives the general form
of a search tree produced by the planner  the first action is typically a reformulation where the
planner uses the reformulation rules to rewrite the geom invariants into a canonical form  next 
the planner searches for actions that produce a state in which at least   invariant in the preserved
list is preserved or at least   action in the to be achieved  tba  list is achieved  the preserved
and achieved invariants are pushed into the preserved list  and the clobbered or unachieved
invariants are pushed into the tba list of the child state 
the above strategy will produce intermediate nodes in the search tree which might clobber
one or more preserved invariant without achieving any new invariant or might produce a state
which is identical to its parent state in terms of the invariants on the preserved

   

fiprincipled symbolic geometric constraint satisfaction

preserved  p
tba  a
reformulate
preserved  p
tba  a
action  
preserved  p 
tba  a 

action  
action  
preserved  p 
tba  a 

preserved  p 
tba  a 

actions
preserved  p   a
tba  nil
figure    overview of the search tree produced by the planner

and tba list  this is because in the initial state a geom may be in some arbitrary configuration
 among a set of allowable configurations  and it may be necessary to first move the geom to an
alternative allowable configuration to find the optimal solution 
to illustrate this need  consider the example in figure    in this example  there is one prior
constraint on the variable radius circle geom  its center lies on a   dimensional locus  the new
constraint to be achieved is  the geom should lie at a fixed distance from a line  in order to
achieve this constraint only one of the following two actions may be taken     scale

 a 

 b  scale

 c  translate

 d  translate   scale

figure    example to illustrate the need for actions that produce a state equivalent to the parent state 

   

fibhansali  kramer   hoar

the circle so that it is at a fixed distance from the line  figure  b   or    translate the circle to a
new position on the   dimensional locus so that it touches the line  figure  c   however  there
are an infinite number of additional solutions consisting of combinations of scale and translation
 figure  d   these solutions can be derived if the planner first changes the configuration of the
geom so that it only preserves the existing invariant without achieving the new invariant  i e  
scale by an arbitrary amount or translate to an arbitrary point on the   dimensional locus 
followed by an action that achieves the new invariant  therefore the planner also creates child
states that are identical to the parent state in terms of invariants on the preserved and tba lists 
the planner iteratively expands each leaf node in the search tree until one of the following is
true 
   the node represents a solution  that is  the tba list is nil 
   the node represents a cycle  that is  the invariants in the preserved and tba lists are
identical to one of the ancestor nodes 
the node is then marked as terminal and the search tree is pruned at that point  if all leaf nodes
are marked as terminal  then the search terminates  the planner then collects all terminal nodes
that are solutions  the plan steps of each of those solution nodes represents a skeletal plan
fragment  when multiple skeletal plan fragments are obtained by the planner  one of them is
chosen using the prioritizing rule described earlier and is passed to the second phase of the plan
fragment generation 
    phase i  example
we use the example of section   to illustrate phase i of the planner  the planner begins by
attempting to reformulate the given constraints  it uses reformulation rule rr   described earlier
and repeated below for convenience 
 fixed distance line  c  l   d  bias counterclockwise 
 fixed distance line  c  l   d  bias clockwise 



 rr   

  d constrained point  c      c center   angular bisector
 make displaced line  l  bias left  d  
 make displaced line  l  bias right  d  
bias counterclockwise
bias clockwise  

ii

l 
i

iii

iv

l 

figure    four possible angular bisectors of two lines l  and l   the bias symbols for l  and
l  corresponding to ray  i  is bias counterclockwise   bias clockwise respectively 

   

fiprincipled symbolic geometric constraint satisfaction

in the above rule there are two measurement terms  make displaced line and angular bisector 
make displaced line takes three arguments  a line  l  a bias symbol indicating whether the
displaced line should be to the left or right of l  and a distance  d  it returns a line parallel to the
given line l at a distance d to the left or right of the line depending on the bias  angular bisector
takes two lines  l  and l   and two bias symbols and returns one of the four rays that bisects the
lines l  and l  depending on the bias symbols  see figure     after reformulation  the state of the
search tree is as shown in figure    no further reformulation rules are applicable at this point 

preserved   fixed distance line  c  l   dist  bias counterclockwise 
tba 
 fixed distance line  c  l   dist  bias clockwise 

reformulation

preserved   fixed distance line  c  l   dist  bias counterclockwise 
tba 
  d constrained point  c
     c center 
 angular bisector
 make displaced line  l   bias left  dist  
 make displaced line  l   bias right  dist  
bias counterclockwise
bias clockwise  
figure    search tree after reformulating invariants

next  the planner searches for actions that can achieve the new invariant or preserve the
existing invariant or do both  we only describe the steps involved in finding actions that satisfy
the maximal number of constraints  in this case  two   the planner first finds all actions that
achieve the  d constrained point invariant by examining the action rules associated with the
variable circle geom  the action rule ar   contains a pattern that matches the  d constrainedpoint invariant 
pattern    d constrained point  circle      circle center    dlocus 
to preserve   scale  circle      circle center   any 
 translate  circle  v        dlocus arbitrary point 
     circle center  
to  re achieve   translate  circle  v        dlocus arbitrary point 
     circle center  
with the following bindings 

 ar   

  circle    c    d locus    angular bisector  make displaced  line           
substituting these bindings we obtain the following action 

   

fibhansali  kramer   hoar

 translate  c  v       angular bisector  make displaced line  l  bias left  dist  
 make displaced line  l  bias right  dist  
arbitrary point 
     c center   
 a  
which can be taken to achieve the constraint  similarly  the planner finds all actions that will
preserve the fixed distance line invariant  the relevant action rule is the following 
pattern   fixed distance line  circle  line  distance 
 ar   
to preserve   translate  circle  v       make line locus      circle center 
     line direction  
arbitrary point 
     circle center  
to  re achieve   translate  circle  v       make displaced line
 line
bias left

 plus  distance      circle radius   
arbitrary point 
     circle center   
the relevant action after the appropriate substitutions is 
 translate  c  v       make line locus
     c center 
    l  direction  
arbitrary point 
     c center  

 a  

now  to find an action that both preserves the preserved invariant and achieves the tba
invariant  the planner attempts to match the preserving action  a   with the achieving action  a   
the two actions do not match using standard unification  but match employing the following
geometry specific matching rule 
  to move to an arbitrary point on two
  different loci  move to the point that
  is the intersection of the two loci

 v        d locus  arbitrary point   to 
 v        d locus  arbitrary point   to 



 v    d intersection   d locus    d locus    to 
to yield the following action 
 translate  c  v    d intersection  angular bisector
 make displaced line          
 make line locus      c center       l  direction  
     c center   
this action moves the circle to the point shown in figure   and achieves both the constraints 
this simple one step plan constitutes a skeletal plan fragment 
   

fiprincipled symbolic geometric constraint satisfaction

 l 

 c

angular bisector
make line locus

 dist 
 dist 
 l 

figure    the

denotes the point to which the circle is moved 

there are two other actions that are generated by the planner in the first iteration  one of
these achieves the new constraint but clobbers the prior invariant  the other moves the circle to
another configuration without achieving the new constraint but preserving the prior constraint 
the first action produces a terminal state since there are no more constraints to be achieved 
hence the search tree is pruned at that point  however  the planner continues to search for
alternative solutions by expanding the other two nodes  after two iterations the following
solutions are obtained 
   translate to the intersection of the angular bisector and make line locus 
   translate to an arbitrary point on the angular bisector  followed by a translation to
the intersection point 
   translate to an arbitrary point of make line locus  followed by a translation to the
intersection point 
   translate to an arbitrary point on the angular bisector and then scale 
at this stage the first phase of the plan fragment generation is terminated and the skeletal
plan fragments are passed on to the second phase of the planner 
    phase ii  elaboration of skeletal plan fragment
the purpose of phase   planning is to i  select one or more skeletal plan fragments  and ii 
elaborate them so that they generate the most desirable configuration when the geom is under
constrained as well as handle exception conditions 
      selection of skeletal plan fragments
there are two primary considerations in selecting a skeletal plan fragment  reduce redundant
actions in the plan and increase generality of the plan  these considerations are used to formulate
a prioritization strategy described in section    the strategy is implemented as a lookup table
that assigns weights to the various plan fragments  the plan fragments with the maximal weights
are selected for elaboration by phase    readers interested in the implementation details are
referred to  hoar        
      plan fragment elaboration
plan fragment elaboration refines a skeletal plan fragment in two ways  first  it refines actions
   

fibhansali  kramer   hoar

that are under constrained  e g   translate to an arbitrary point on a locus  by appropriate
instantiation of the unconstrained parameters  e g   selecting a specific point on a locus   second 
it handles exception conditions that result in under constrained or over constrained systems  both
action refinement and exception handling are treated using a common technique 
plan elaboration is based on the  principle of least motion   when there are multiple
solutions for a problem choose the solution that minimizes the total amount of perturbation
 motion  in the system  implementing the principle requires the definition of a motion function 
ca g for each action  a  and geom type  g  for example  for a translation of a geom  the motion
function  ct circle could be the square of the displacement of the center of the geom from its
initial to its final position  we also need a motion summation function   g that sums the motion
produced by individual actions on a geom g  an example of the summation function is the
normal addition operator  plus  the total motion produced in a geom is computed using the
summation function and the motion functions for action  geom pairs 
when a plan fragment is under constrained  the expression representing the total motion
would contain one or more variables representing the ungrounded parameters of the geom 
formal optimization techniques  based on finite difference methods  can be used to obtain values
of the parameters that would minimize the motion function  however  we use a more efficient 
algorithm based on hill climbing which does not guarantee optimality but yields good results in
practice  the use of this heuristic algorithm is justified in many interactive applications like
sketching  where a fast  sub optimal solution is preferable to a computationally expensive 
optimal one 
the algorithm begins by segmenting all continuous loci into discrete intervals  it then
systematically searches the resultant  discrete n dimensional space  the algorithm first finds a
local minima along one dimension while holding the other variables at constant values  then it
holds the first variable at the minimum value found and searches for a lower local minima along
the second dimension and so on  although this algorithm does not guarantee finding a global or
even a local minima  it is very efficient and yields good results in practice  the implemented
algorithm is somewhat more complex than the simple description above  further details can be
found elsewhere  hoar        
exception conditions can be handled using the same technique as above  exception
conditions are identified when a service routine returns a set of solutions or no solution  e g   a
routine to compute the intersection of two   dimensional loci returns a   dimensional locus or
nil   multiple solutions represent an under constrained system and requires a search among the
set of solutions returned  these conditions are handled exactly as described in the previous
paragraph  when a no solution exception occurs  the system aborts the plan fragment and prints
a diagnostic message explaining why the constraint could not be solved 
    phase ii  example
four skeletal plan fragments were generated in the first phase of the planner  section       using
the rule for eliminating redundant translations given earlier  the second and third plan fragments
can be reduced to single translation plan fragments equivalent to the first plan fragment  this
leaves only two distinct plan fragment solutions to consider 
using the prioritizing rule  the system concludes that the first plan fragment consisting of a
single translation is subsumed by the second plan fragment consisting of a translation and a
scale  thus  the second plan fragment is chosen as the preferred solution 
this plan fragment is not deterministic since it contains an action that translates the circle
   

fiprincipled symbolic geometric constraint satisfaction

geom to an arbitrary point on the angular bisector  therefore  the system inserts an iterative loop
that computes the amount of motion of the circle for various points on the angular bisector 
breaking out of the loop when it finds a minima  similarly  for each service routine that may
return an exception  the system inserts a case statement which contains a loop to handle
situations when more than one solution is returned  online appendix   contains a complete
example of a plan fragment generated by the system 

    results
the plan fragment generator described here has been implemented using clos  common lisp
object system   we have implemented parts of the geometric constraint engine  gce  described
by kramer in c   with an xmotif based graphical user interface  we have also written a
translator that translates the synthesized plan fragments into c    a complete plan fragment
library for a representative geom  line segment  has been synthesized and integrated with the
constraint engine  using this we have been able to successfully demonstrate the solution of
several geometric constraints  we present below an evaluation of the system 
the primary contribution of this research is not a novel geometric constraint satisfaction
approach  from the perspective of constraint satisfaction techniques  the novel feature of our
approach   degrees of freedom analysis   has already been described in earlier works by the
second author  kramer               the goal of this research was to develop automated
techniques that will enable the degrees of freedom approach to scale up by reducing the amount
of effort needed in creating plan fragment libraries  hence  our evaluation is based on how
successful we have been in automating the plan fragment synthesis process 
we have used the plan fragment generator described above to automatically synthesize plan
fragments for two representative geoms    line segments and circles    in  d  there are seven
types of constraints and thirty four rules in the system     action rules for line segments    action
rules for circles    reformulation rules  and   matching rules   using these rules we have
successfully generated skeletal plan fragments for various combinations of constraints on line
segments       and circles       the largest search tree produced by the planner is on the order
of a few hundred nodes and takes a few minutes on a macintosh quadra  for evaluation
purposes  we present data for one representative geom   line segment 
    programming effort
figure    shows the number of lines of code comprising the current system  the areas in solid
represent code that was written manually  this includes about      lines of clos code for the
plan fragment synthesizer       lines of c c   for the user interface  and      lines of c c  
for the support routines  the hatched area represent code that was synthesized by the plan
fragment generator  it represents about       lines of c   code  for plan fragments for the linesegment geom   the size of the synthesized plan fragment  about     lines average  is much less
than that of plan fragments written manually  in c  in the original version of gce  thus  using
an automated plan fragment generator has considerably reduced the amount of programming 
while a reduction ratio of     is a good indicator of the reduction in programming effort  it is
subject to criticism since it compares code in two very different programming languages and
comprising different degrees of difficulty 
a more accurate evaluation is obtained by comparing the total effort required in writing plan
fragments manually against the total effort required in synthesizing them using the
   

fibhansali  kramer   hoar

     clos 

     c c   

   
 c   

user interface

    c c   

support routines

generator

plan fragments

figure     lines of code in different parts of the system

technique described in this paper  it is extremely difficult  if not impossible  to do this in any
controlled experimental setting because of the number of factors and cost involved  the best that
can be done is to compare the empirical data based on our experience in developing the system 
the following table shows the effort in person days in developing the plan fragment library for
the line segment geom using our technique 

plan fragment generator
manually

research
  
 

development
   
   

total
   
   

table    effort  in person days  in creating plan fragments
for the effort involved in writing plan fragments manually  we use a conservative estimate
of   person days for each plan fragment   the table shows that using the plan fragment generator
we obtained a     reduction in effort in creating the plan fragment library  the testing and
debugging time has been ignored and assumed to be the same for both cases  although we
believe that this time is much more for manually generated plan fragments  
    scalability
a much stronger evidence in support of our technique is obtained when we look at the effort
  this estimate is based both on the effort required in developing the plan fragment library for gce as well as
experimental data obtained by having two graduate students write a few plan fragments manually 

   

fiprincipled symbolic geometric constraint satisfaction

required in extending the plan fragment library by adding more features  e g   new kinds of
geoms or constraints   to evaluate the scalability of the approach  we decided to extend the plan
fragments to  d where geoms have added degrees of rotational and translational freedom  such
an extension when done manually would be significant exercise in software maintenance since it
requires changes to each plan fragment in the library  using the plan fragment generator we only
needed to revise the rules used by the planner and make changes to the support routines  since
the support routines were written manually  the cost to modify them is the same in both
approaches  and only the effort needed to rewrite the rules is relevant  it took only   week of
effort to rewrite and debug the action rules and synthesize the complete plan fragment library for
 d  and link it successfully with the constraint engine  this is a significant result in
demonstrating that our technique can be used to scale up degrees of freedom analysis to more
complex geoms and geometries 
    correctness
an important issue that has been ignored so far is  how does one verify the correctness and
completeness of the plan fragment generator  we have done extensive testing and evaluation of
the plan fragments synthesized by the plan fragment generator  table   summarizes the results 
number of plan fragment specifications
specs  with no solutions 
completeness
no solution exists
missing rules
no symbolic solution
total
plan fragments with errors 
correctness
faults due to errors in logic
support routine errors
total

   
  
  
 
  
 
  
  

table    completeness and correctness of synthesized plan fragments
there were eighty plan fragment specifications for which the planner failed to produce a
solution  in sixty five of these specifications  there were no solutions in the general case    these
specifications represent overconstrained problems  such as constraining one end point of a linesegment to be on a one dimensional locus when previous constraints have already reduced that
end points translational degrees of freedom to zero  the only action the planner can take in such
cases is to check that the new constraint is already satisfied  thirteen of the cases had no
solutions because of two missing rules  one action rule  and one reformulation rule  once the two
rules were added all the thirteen specifications were solved  finally  there were only two plan
fragments for which the planner failed to produce an analytical solution  the cases are shown in
figure     to solve such problems we need a reformulation rule that reformulates the existing
invariant to a constraint that the endpoint of  lseg is the curve  l   instead of representing
complex   dimensional  and higher dimensional  loci like  l   we assume that the constraint
engine would call a numerical solver that computes the solution iteratively  an alternative would
be to extend the set of support routines to handle such complex loci and their intersections 

   

fibhansali  kramer   hoar

 
 l 

 p
 l 

 lseg

 l 

figure     example of problem that generated no symbolic solution   lseg is a line segment
which is constrained to have one end point on  l   have a fixed length  and be tangent to a
circle centered at  p  the new constraint is that the other end point of  lseg be on  l  

to check for the correctness of plan fragments  we did an exhaustive evaluation of all the
plan fragments  as can be seen from table    the code that has been synthesized is not perfect 
about     of the plan fragments do not function correctly  we analyzed the reasons for the
failure by manually inspecting the plan fragments  the most significant finding was that none of
the failures were due to logical errors in the plan fragments  in other words the skeletal plan
fragments being generated by phase i were correct and complete  most of the failures were
because of bugs in the mathematical support routines called by the plan fragments  in a few
instances the failures were traced to bugs in implementing phase   of the plan fragment  either
selecting the wrong skeletal plan fragment or not computing the least motion correctly  we had
not expected the first version of the automatically generated plan fragments to be completely
bug free  indeed  the high percentage of plan fragments that do function correctly  almost     
is a very positive result and reflects a significant increase in quality and a corresponding
decrease in maintenance effort for building geometric constraint satisfaction systems using our
approach 

    related work
geometric constraint satisfaction is an old problem  probably the first application of this problem
to constraint based sketching was the sketchpad program developed by sutherland         the
sketchpad program was based on constraint relaxation and was limited to problems that were
modeled with point variables 
in the field of mechanical design  a graph based approach to constraint satisfaction has been
described by serrano         in serranos approach the constraints are modeled using a
constraint network  a constraint satisfaction engine finds the values of constrained variables that
satisfy the constraints in the network using constraint propagation techniques  the approach
identifies loops or cycles in the network  collapses them into supernodes  and then applies
conventional sequential local propagation  this approach uses numerical iterative techniques
which can have problems with stability  the computational advantage of this approach reduces
when equations are tightly coupled 
most of the commercial systems that do kinematics analysis are based on numerical iterative
techniques or algebraic techniques or a combination of the two  although these approaches are in
principle robust  they have several shortcomings that make them inappropriate for real time
applications 
among non commercial systems  a notable new approach to constraint based sketching is
   

fiprincipled symbolic geometric constraint satisfaction

the juno   being developed at dec src  heydon   nelson         constraints in juno   are
specified using an expressive  declarative constraint language which seems powerful enough to
express most constraints that arise in practice  juno   uses a combination of symbolic and
numerical techniques to solve geometric constraints efficiently  a key difference between juno  and the degrees of freedom approach is that in juno   the symbolic reasoning is done in the
domain of equations  for example  juno   uses symbolic techniques like local propagation 
unpacking  and unification closure to reduce the number of unknowns in a system of equations 
the equations are then solved by newtons method  in degrees of freedom analysis  the symbolic
reasoning is done in the domain of geometry rather than equations 
geometric constraints also arise in robotics  where the primary issues are concerned with
finding a physically realizable path through space for a robot manipulator or a part of an
assembly  a fundamental analytical tool for solving motion planning problems in robotics is the
configuration space framework  lozano perez         in configuration space approach  the
problem of planning the motion of a part through a space of obstacles is transformed into an
equivalent but simpler problem of planning the motion of a point through a space of enlarged
configuration space obstacles  degrees of freedom analysis finesses this problem since it uses
the notion of incremental assembly only as a metaphor for solving geometric constraint systems 
no physical meaning is ascribed to how objects move from where they are to where they need to
be   a factor that is quite important in a real world assembly problem arising in robotics  the
only use of the plan is to guide the solution of the complicated non linear equations arising from
formulating and solving the problems algebraically 

    conclusions
we have described a plan fragment generation methodology that can synthesize plan fragments
for a geometric constraint satisfaction systems by reasoning from first principles about geometric
entities  actions  and topology  the technique has been used to successfully synthesize plan
fragments for a realistic set of constraints and geoms  it may seem that we have substituted one
hard task   writing a complete set of correct plan fragments for various combinations of geoms
and constraints   by an even harder task  creating the knowledge base of rules to automate the
process  the rules are difficult to write and we have found that it is necessary to spend some
effort in debugging the rules  however  we estimate that the total effort to write and debug rules
is still an order of magnitude less than writing and debugging manually written plan fragment
code  our future work is to investigate how this approach scales up to more complex constraints
and geometries 
another useful extension of this work would be concerned with pushing the automation one
level further so as to automatically acquire some types of knowledge from simpler building
blocks  for example  a technique for automatically synthesizing the least motion function from
some description of the geometry would be very useful 
in our method the plan fragment generation is divided into two disjoint phases  an
alternative method would be to explore how the two phases can be interleaved  one possibility is
that when there is a degeneracy because of a redundant constraint  the planner could reformulate
the problem by removing the redundant constraint and re synthesize a skeletal plan fragment
with the new set of constraints  the resultant plan would form a part of the original plan
fragment to deal with the degenerate cases  in other words  plan fragments would be generated
on the fly as needed by the constraint solver 

   

fibhansali  kramer   hoar

acknowledgments
we thank qiqing xia who helped in implementing parts of the system described in this paper 
we also acknowledge the support and resources provided by the school of electrical
engineering and computer science  washington state university  this work originated while
the first author was at the knowledge systems laboratory  stanford university  and the second
author was at the schlumberger laboratory of computer science  austin 

references
anantha  r   kramer  g     crawford  r          an architecture to represent over  under  and
fully constrained assemblies  in proceedings of asme winter annual meeting          
borgida  a   mylopoulos  j     reiter  r              and nothing else changes  the frame problem
in procedure specifications  in proceedings of the   th international conference on
software engineering  baltimore  md 
brown associates          applicons gce  a strong technical framework  brown associates
inc 
brunkhart  m  w          interactive geometric constraint systems  masters thesis  tr no 
csd         department of ee cs  university of california  berkeley 
fikes  r  e     nilsson  n  j          strips  a new approach to the applicatiion of theorem
proving to problem solving  artificial intelligence             
friedland  p  e          knowledge based experiment design in molecular genetics  tech  report
csd         department of computer science  stanford university 
hartenberg  r  s     denavit  j          kinematic synthesis of linkages  new york  mcgraw
hill 
heydon  a     nelson  g          the juno   constraint based drawing editor  src research
report    a  digital systems research center  palo alto  ca 
hoar  t          automatic program synthesis for geometric constraint satisfaction  masters
thesis  school of eecs  washington state university 
kramer  g  a          solving geometric constraint systems  a case study in kinematics 
cambridge  ma  mit press 
kramer  g  a          a geometric constraint engine  artificial intelligence                   
liu  y     popplestone  r  j            symmetry constraint inference in assembly planning 
automatic assembly configuration specification  in proceedings of aaai     boston  ma 
          
lozano perez  t          spatial planning  a configuration space approach  ieee transactions
on computers  c             
   

fiprincipled symbolic geometric constraint satisfaction

press  w  h   flannery  b  p   teukolsky  s  a     vetterling  w  t          numerical recipes 
the art of scientific computing  cambridge  england  cambridge university press 
salomons  o          computer support in the design of mechanical products  ph d  thesis 
universiteit twente  netherlands 
serrano  d          constraints in conceptual design  ph d  thesis  massachusetts institute of
technology 
shah  j  j     rogers  m  t          assembly modeling as an extension of feature based design 
research in engineering design             
sussman  g  j          a computer model of skill acquisition  new york  american elsevier 
sutherland  i  e          sketchpad  a man machine graphical communication system  ph d 
thesis  massachusetts institute of technology 

   

fi