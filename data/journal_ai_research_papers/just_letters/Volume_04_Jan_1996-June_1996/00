journal artificial intelligence research              

submitted       published     

design experimental analysis algorithms
temporal reasoning
peter van beek
dennis w  manchak

department computing science  university alberta
edmonton  alberta  canada t g  h 

vanbeek cs ualberta ca
dmanchak vnet ibm com

abstract

many applications from planning scheduling problems molecular biology 
rely heavily temporal reasoning component  paper  discuss design
empirical analysis algorithms temporal reasoning system based allen s uential
interval based framework representing temporal information  core system
algorithms determining whether temporal information consistent  and  so 
finding one scenarios consistent temporal information  two
important algorithms tasks path consistency algorithm backtracking
algorithm  path consistency algorithm  develop techniques result
ten fold speedup already highly optimized implementation 
backtracking algorithm  develop variable value ordering heuristics shown
empirically dramatically improve performance algorithm  well  show
previously suggested reformulation backtracking search problem reduce
time space requirements backtracking search  taken together  techniques
develop allow temporal reasoning component solve problems practical
size 

   introduction
temporal reasoning essential part many artificial intelligence tasks  desirable 
therefore  develop temporal reasoning component useful across applications 
applications  planning scheduling  rely heavily temporal reasoning component success application depend eciency
underlying temporal reasoning component  paper  discuss design empirical analysis two algorithms temporal reasoning system based allen s       
uential interval based framework representing temporal information  two algorithms  path consistency algorithm backtracking algorithm  important two
fundamental tasks  determining whether temporal information consistent  and  so 
finding one scenarios consistent temporal information 
stress designing algorithms robust ecient practice 
path consistency algorithm  develop techniques result ten fold
speedup already highly optimized implementation  backtracking algorithm 
develop variable value ordering heuristics shown empirically dramatically
improve performance algorithm  well  show previously suggested
reformulation backtracking search problem  van beek        reduce time
space requirements backtracking search  taken together  techniques develop
c      ai access foundation morgan kaufmann publishers  rights reserved 

fivan beek   manchak

relation
symbol inverse
x
b
bi
x meets

mi
x overlaps

oi
x starts



si

x



di

x finishes

f



x equal

eq

eq

meaning
x

x

x

x

x

x

x


figure    basic relations intervals
allow temporal reasoning component solve problems realistic size  part
evidence support claim  evaluate techniques improving algorithms
large problem arises molecular biology 

   representing temporal information
section  review allen s        framework representing relations intervals  discuss set problems chosen test algorithms 

    allen s framework

thirteen basic relations hold two intervals  see figure    allen 
      bruce         order represent indefinite information  relation two
intervals allowed disjunction basic relations  sets used list
disjunctions  example  relation fm o sg events b represents
disjunction   a meets b     a overlaps b     a starts b   let set basic
relations  fb bi m mi o oi s si d di f fi eqg  allen allows relation two events
subset  
use graphical notation vertices represent events directed edges
labeled sets basic relations  graphical convention  never show edges
 i  i   show edge  i  j    show edge  j  i   edge
explicit knowledge relation labeled   convention edges
shown  call networks labels arbitrary subsets   interval
algebra ia networks 
example    allen koomen        show ia networks used non linear
planning concurrent actions  example representing temporal information using
ia networks  consider following blocks world planning problem  three blocks 
a  b  c  initial state  three blocks table  goal state
 

fialgorithms temporal reasoning

simply tower blocks b b c  associate states  actions 
properties intervals hold over  immediately write
following temporal information 
initial conditions
goal conditions
initial fdg clear a 
goal fdg on a b 
initial fdg clear b 
goal fdg on b c 
initial fdg clear c 
action called  stack   effect stack action on x     block x
top block   action successfully executed  conditions clear x 
clear y   must hold  neither block x block block them  planning introduces
two stacking actions following temporal constraints 
stacking action
stacking action
stack a b  fbi mig initial
stack b c  fbi mig initial
stack a b  fdg clear a 
stack b c  fdg clear b 
stack a b  ffg clear b 
stack b c  ffg clear c 
stack a b  fmg on a b 
stack b c  fmg on b c 
graphical representation ia network planning problem shown
figure  a  two fundamental tasks determining whether temporal information
consistent  and  so  finding one scenarios consistent temporal
information  ia network consistent exists mapping
real interval  u  event vertex u network relations events satisfied  i e   one disjuncts satisfied   example  consider
small subnetwork figure  a consisting events on a b   on b c   goal 
subnetwork consistent demonstrated assignment   on a b            
 on b c              goal            change subnetwork insist
on a b  must on b c   mapping would exist subnetwork
would inconsistent  consistent scenario ia network non disjunctive subnetwork  i e   every edge labeled single basic relation  consistent 
planning example  finding consistent scenario network corresponds finding
ordering actions accomplish goal stacking three blocks  one
consistent scenario reconstructed qualitative mapping shown figure  b 
example    golumbic shamir        discuss ia networks used
problem molecular biology  examining structure dna organism  benzer         intervals ia network represent segments dna  experiments
performed determine whether pair segments either disjoint intersects 
thus  ia networks result contain edges labeled disjoint  fb big   intersects
 fm mi o oi s si d di f fi eqg     set basic relations which indicates experiment performed  ia network consistent  evidence hypothesis
dna linear structure  inconsistent  dna nonlinear  it forms loops 
example   golumbic shamir        show determining consistency restricted version ia networks np complete  show problems arise
application often solved quickly practice 
 

fivan beek   manchak










 






  

 





 r

 







pp  

hyhhphpppppq j 
jj  
hh
hhh
jj   
z 
zzj  
hhh z
hh


 a  ia network block stacking example 

fbi mig
fdg

fdg

 
initial

fdg

fbi mig

fdg

 
clear a 
 
clear b 
 
clear c 

 
stack a b 
ffg

fdg

ffg

fmg

 
on a b 
 
on b c 

fmg

pip
 pp

fdg
fdg

 
goal

 
stack b c 

 b  consistent scenario 
initial

stack b c 
goal
stack a b 
clear c 
on b c 
clear b 
on a b 
clear a 

figure    representing qualitative relations intervals

    test problems
tested well heuristics developed improving path consistency backtracking algorithms perform test suite problems 
purpose empirically testing algorithms determine performance
algorithms proposed improvements  typical  problems  two
approaches   i  collect set  benchmark  problems representative problems
arise practice   ii  randomly generate problems  investigate algorithmic
performance depends problem characteristics     learn predict algorithm
perform given problem class   hooker        
ia networks  existing collection large benchmark problems actually
arise practice as opposed to  example  planning toy domain blocks
world  start collection  propose ia network     intervals arose
problem molecular biology  benzer        pp           see example    above  
proposed benchmark problem strictly speaking temporal reasoning problem
 

fialgorithms temporal reasoning

intervals represent segments dna  intervals time  nevertheless 
formulated temporal reasoning problem  value benchmark problem
arose real application  refer problem benzer s matrix 
addition benchmark problem  paper use two models random ia
network  denoted b n  s n  p   evaluate performance algorithms  n
number intervals  p probability  non trivial  constraint two
intervals  model b n  intended model problems arise molecular biology  as
estimated problem discussed benzer         model s n  p  allows us study
algorithm performance depends important problem characteristic sparseness
underlying constraint graph  models  course  allow us study algorithm
performance depends size problem 
b n   random instances generated follows 
step    generate  solution  size n follows  generate n real intervals randomly
generating values end points intervals  determine ia network determining  pair intervals  whether two intervals either intersect disjoint 
step    change constraints edges trivial constraint setting
label   set    basic relations  represents case experiment
performed determine whether pair dna segments intersect disjoint 
constraints changed percentage non trivial constraints  approximately
   intersects     disjoint  distribution graph similar
benzer s matrix 
s n  p   random instances generated follows 
step    generate underlying constraint graph indicating possible  n  
edges present  let edge present probability p  independently presence
absence edges 
step    edge occurs underlying constraint graph  randomly chose label
edge set possible labels  excluding empty label  label
chosen equal probability  edge occur  label edge   set
   basic relations 
step    generate  solution  size n follows  generate n real intervals randomly
generating values end points intervals  determine consistent scenario
determining basic relations satisfied intervals  finally  add solution
ia network generated steps     
hence  consistent ia networks generated s n  p   omit step   
shown analytically empirically almost different possible
ia networks generated distribution inconsistent inconsistency
easily detected path consistency algorithm  avoid potential pitfall  test
algorithms consistent instances problem  method appears generate
reasonable test set temporal reasoning algorithms problems range easy
hard  found  example  instances drawn s n       hard problems
backtracking algorithms solve  whereas values p either side  s n      
s n        problems easier 
 

fivan beek   manchak

   path consistency algorithm
path consistency transitive closure algorithms  aho  hopcroft    ullman        mackworth        montanari        important temporal reasoning  allen        shows
path consistency algorithm used heuristic test whether ia network
consistent  sometimes algorithm report information consistent
really not   path consistency algorithm useful backtracking search
consistent scenario used preprocessing algorithm  mackworth       
ladkin   reinefeld        algorithm interleaved backtracking search  see next section  nadel        ladkin   reinefeld         section 
examine methods speeding path consistency algorithm 
idea behind path consistency algorithm following  choose three
vertices i  j   k network  labels edges  i  j    j  k  potentially
constrain label edge  i  k  completes triangle  example  consider
three vertices stack a b   on a b   goal figure  a  stack a b  fmg
on a b  on a b  fdig goal deduce stack a b  fbg goal therefore
change label edge   set basic relations  singleton
set fbg  perform deduction  algorithm uses operations set intersection
    composition    labels checks whether c   c   c c   c
label edge  i  k   c updated  may constrain labels   i  k 
added list processed turn  provided edge already list 
algorithm iterates changes possible  unary operation  inverse 
used algorithm  inverse label inverse elements
 see figure   inverses basic relations  
designed experimentally evaluated techniques improving eciency
path consistency algorithm  starting point variation allen s        algorithm
shown figure    implementation algorithm ecient  intersection
composition operations labels must ecient  steps          intersection
made ecient implementing labels bit vectors  intersection two labels
simply logical two integers  composition harder make ecient 
unfortunately  impractical implement composition two labels using table
lookup table would need size              possible labels 
experimentally compared two practical methods composition
proposed literature  allen        gives method composition uses table
size        table gives composition basic relations  see allen       
table   composition two labels computed nested loop forms
union pairwise composition basic relations labels  hogge        gives
method composition uses four tables size                            
composition two labels computed taking union results four array
references  h  kautz independently devised similar scheme   experiments 
implementations two methods differed composition computed 
both  list  l  edges processed implemented using first in  first out policy
 i e   stack  
experimentally evaluated methods reducing number composition operations need performed  one idea examined improving eciency
ik

ik

 

ik

ij

jk

ik

fialgorithms temporal reasoning

 c  n 

path consistency

   l f i  j   j     j ng
    l empty 
   select delete  i  j   l
  
k   n  k    k    j
  
c   c c
  
 t    c  
  
c
  
c
inverse t 
  
l
l   f i  k  g
   

c
 c
c
   
 t    c  
   
c
   
c
inverse t 
   
l
l   f k  j  g
ik

ij

jk

ki

ij

ik

ik

ki

kj

kj

kj

jk

figure    path consistency algorithm ia networks
avoid computation predicted result constrain
label edge completes triangle  three cases identified shown
figure    another idea examined  first suggested mackworth        p       
order edges processed affect eciency algorithm 
reason following  edge appear list  l  edges processed
many times progressively gets constrained  number times particular edge
appears list reduced good ordering  example  consider edges
              figure  a  process edge        first  edge        updated
fo oi s si d di f fi eqg added l  k     steps       process edge
        edge        updated fo s dg added l second time  however 
process edge        first         immediately updated fo s dg
added l once 
three heuristics devised ordering edges shown figure    edges
assigned heuristic value processed ascending order  new edge
added list  steps          edge inserted appropriate spot according
new heuristic value  little work ordering heuristics path consistency
algorithms  wallace freuder        discuss ordering heuristics arc consistency
algorithms  closely related path consistency algorithms  two heuristics
cannot applied context heuristics assume constraint satisfaction problem
finite domains  whereas ia networks examples constraint satisfaction problems
infinite domains  third heuristic  due b  nudel        closely corresponds
cardinality heuristic 
experiments performed sun         megabytes memory 
report timings rather measure number iterations believe
gives accurate picture whether results practical interest  care
 

fivan beek   manchak

computation  c   c c   skipped known result
composition constrain label edge  i  k  
a  either c c equal   result composition therefore
constrain label edge  i  k   thus  step   figure    edges
labeled added list edges process 
b  condition 
ik

ij

ij

jk

jk

 b   c

ij  

bi   c      bi   c

ij  

jk

b   c      d   c
jk

ij  

di   c   
jk

true  result composing c c   condition quickly tested
using bit operations  thus  condition true step    steps    
skipped  similar condition formulated tested step    
c  point computation c c determined result
accumulated far would constrain label c   rest computation
skipped 
ij

jk

ij

jk

ik

figure    skipping techniques
taken always start base implementation algorithm add
enough code implement composition method  new technique  heuristic
evaluating  well  every attempt made implement method heuristic
eciently could 
given implementations  hogge s method composition found
ecient allen s method benchmark problem random instances
 see figures       much surprising  however  addition skipping
techniques  two methods became close eciency  skipping techniques sometimes
dramatically improved eciency methods  ordering heuristics improve
eciency  although results less dramatic  cardinality heuristic
constraintedness heuristic tried ordering edges  found
cardinality heuristic costly compute weight heuristic
perform it  constraintedness heuristic reduced number iterations proved
costly compute  illustrates balance must struck effectiveness
heuristic additional overhead heuristic introduces 
s n  p   skipping techniques weight ordering heuristic together result
ten fold speedup already highly optimized implementation using hogge s
method composition  largest improvements eciency occur ia networks
sparse  p smaller   encouraging appears problems arise
planning molecular biology sparse  b n  benzer s matrix  speedup
approximately four fold  perhaps importantly  execution times reported indicate
path consistency algorithm  even though o n    algorithm  used
practical sized problems  figure    show well algorithms scale up 
 

fialgorithms temporal reasoning

allen

     

hogge

    

allen skip

   

hogge skip

   

hogge skip weight

   

figure    effect heuristics time  sec   path consistency algorithms applied
benzer s matrix

time  sec  

   

  

 

allen
hogge
allen skip
hogge skip
hogge skip weight

   
  

  

   
n

   

   

figure    effect heuristics average time  sec   path consistency algorithms 
data point average     tests random instances ia networks drawn
b n   coecient variation  standard deviation   average  set
    tests bounded     
seen algorithm includes weight ordering heuristic performs others 
however  algorithm requires much space largest problem able solve
    intervals  algorithms included skipping techniques
able solve much larger problems running space  up      intervals 
constraint time took solve problems 

 

fivan beek   manchak

   

time  sec  

  

 

allen
hogge
allen skip
hogge skip
hogge skip weight

   
   

   

   
p

   

 

figure    effect heuristics average time  sec   path consistency algorithms 
data point average     tests random instances ia networks drawn
s      p   coecient variation  standard deviation   average 
set     tests bounded     
    
    
s n      

allen skip
hogge skip
hogge skip weight

    

time  sec  

    

b n  

allen skip
hogge skip
hogge skip weight

    
    
    
    
    
 
   

   

   

   

   

   
n

   

   

   

    

figure    effect heuristics average time  sec   path consistency algorithms 
data point average    tests random instances ia networks drawn
s n       b n   coecient variation  standard deviation   average  set    tests bounded     
  

fialgorithms temporal reasoning

   backtracking algorithm

allen        first propose backtracking algorithm  golomb   baumert 
      could used find consistent scenario ia network  worst case 
backtracking algorithm take exponential amount time complete  worst
case applies vilain kautz              show finding consistent
scenario np complete ia networks  spite worst case estimate  backtracking
algorithms work well practice  section  examine methods speeding
backtracking algorithm finding consistent scenario present results well
algorithm performs different classes problems  particular  compare eciency
algorithm two alternative formulations problem  one previously
proposed others one proposed  van beek         improve
eciency algorithm designing heuristics ordering instantiation
variables ordering values domains variables 
starting point  modeled backtracking algorithm ladkin
reinefeld        results experimentation suggests successful
finding consistent scenarios quickly  following ladkin reinefeld algorithm
following characteristics  preprocessing using path consistency algorithm  static order
instantiation variables  chronological backtracking  forward checking pruning
using path consistency algorithm  chronological backtracking  search reaches
dead end  search simply backs next recently instantiated variable
tries different instantiation  forward checking  haralick   elliott        technique
determined recorded instantiation current variable restricts
possible instantiations future variables  technique viewed hybrid
tree search consistency algorithms  see nadel        nudel          see dechter       
general survey backtracking  

    alternative formulations

let c matrix representation ia network  c label edge  i  j   
traditional method finding consistent scenario ia network search
subnetwork network c that 
 a  c  
 b  js j      i  j  
 c  consistent 
find consistent scenario simply search different possible  s satisfy
conditions  a   b  it simple matter enumerate them until find one
satisfies condition  c   allen        first propose using backtracking search
search potential  s 
alternative formulation based results two restricted classes ia networks 
denoted sa networks nb networks  ia networks  relation two
intervals subset   set thirteen basic relations  sa networks
 vilain   kautz         allowed relations two intervals subsets
translated  using relations f               g  conjunctions
ij

ij

ij

ij

  

fivan beek   manchak

relations endpoints intervals  example  ia network figure  a
sa network  specific example  interval relation  a fbi mig b 
expressed conjunction point relations   b    b       a    a       a  b    
a  a  represent start end points interval a  respectively   see ladkin
  maddux        van beek   cohen        enumeration allowed relations
sa networks   nb networks  nebel   burckert         allowed relations
two intervals subsets translated  using relations f  
            g  conjunctions horn clauses express relations
endpoints intervals  set nb relations strict superset sa relations 
alternative formulation follows  describe method terms sa
networks  method applies nb networks  idea that  rather
search directly consistent scenario ia network previous work  first
search something general  consistent sa subnetwork ia network 
is  use backtrack search find subnetwork network c that 
 a 

sij cij

 b 

sij

 c 



 

allowed relation sa networks  i  j  

consistent 

previous work  search alternative singleton labelings edge  i e  
js j      key idea proposal decompose labels largest
possible sets basic relations allowed sa networks search
decompositions  considerably reduce size search space  example 
suppose label edge fb bi m o oi sig  six possible ways label
edge singleton label  fbg  fbig  fmg  fog  foig  fsig  two possible ways
label edge decompose labels largest possible sets basic relations
allowed sa networks  fb m og fbi oi sig  another example  consider
network shown figure  a  searching alternative singleton labelings 
worst case size search space c   c   c          the edges labeled
must included calculation   decomposing labels largest
possible sets basic relations allowed sa networks searching
decompositions  size search space    backtracking necessary  in general 
search is  course  always backtrack free  
test whether instantiation variable consistent instantiations past
variables possible instantiations future variables  use incremental path
consistency algorithm  in step   figure   instead initializing l edges 
initialized single edge changed   result backtracking algorithm
consistent sa subnetwork ia network  report ia network inconsistent 
backtracking completes  solution sa network found using fast
algorithm given van beek        
ij

    ordering heuristics

backtracking proceeds progressively instantiating variables  consistent instantiation
exists current variable  search backs up  order variables
  

fialgorithms temporal reasoning

weight  weight heuristic estimate much label edge restrict
labels edges  restrictiveness measured basic relation successively composing basic relation every possible label summing cardinalities
results  results suitably scaled give table shown below 
relation b bi mi oi si di f eq
weight                          
weight label sum weights elements  example  weight
relation fm o sg               
cardinality  cardinality heuristic variation weight heuristic  here 
weight every basic relation set one 
constraint  constraintedness heuristic estimate much change label
edge restrict labels edges  determined follows  suppose
edge interested  i  j    constraintedness label edge  i  j  
sum weights labels edges  k  i   j  k   k           n  k    i  k    j  
intuition comes examining path consistency algorithm  figure    would
propagate change label c   see c composed c  step   
c  step      k           n  k    i  k    j  
ij

ij

ki

jk

figure    ordering heuristics
instantiated order values domains tried possible
instantiations greatly affect performance backtracking algorithm various
methods ordering variables  e g  bitner   reingold        freuder        nudel 
      ordering values  e g  dechter   pearl        ginsberg et al         haralick
  elliott        proposed 
idea behind variable ordering heuristics instantiate variables first
constrain instantiation variables most  is  backtracking search
attempts solve highly constrained part network first  three heuristics
devised ordering variables  edges ia network  shown figure   
alternative formulation  cardinality redefined count decompositions rather
elements label  variables put ascending order  experiments
ordering static it determined backtracking search starts
change search progresses  context  cardinality heuristic similar
heuristic proposed bitner reingold        studied purdom        
idea behind value ordering heuristics order values domains
variables values likely lead solution tried first  generally 
done putting values first constrain choices variables least 
propose novel technique value ordering based knowledge structure
solutions  idea first choose small set problems class problems 
find consistent scenario instance without using value ordering 
set solutions  examine solutions determine values domains
  

fivan beek   manchak

   

   

si

sa

time  sec  

  

  

  

  

 
  

   

   
n

   

   

figure     effect decomposition method average time  sec   backtracking algorithm  data point average     tests random instances ia
networks drawn b n   coecient variation  standard deviation  
average  set     tests bounded     
likely appear solution values least likely  information
used order values subsequent searches solutions problems
class problems  example  five problems generated using model s          
consistent scenarios found using backtracking search variable ordering
heuristic constraintedness weight cardinality  rounding two significant digits 
relations occurred solutions following frequency 
relation
b  bi d  di o  oi
value                  

eq
  

m  mi f  s  si
  
     

example using information order values domain  suppose
label edge fb bi m o oi sig  decomposing labels singleton labels 
would order values domain follows  most preferred first   fbg  fbig  fog 
foig  fmg  fsig  decomposing labels largest possible sets basic
relations allowed sa networks  would order values domain
follows  fb m og  fbi oi sig  since                                    technique
used whenever something known structure solutions 

    experiments

experiments performed sun        megabytes memory 
first set experiments  summarized figure     examined effect problem
formulation execution time backtracking algorithm  implemented three
  

fialgorithms temporal reasoning

     
random value ordering  random
heuristic value ordering  random
random value ordering  best heuristic
heuristic value ordering  best heuristic

variable
variable
variable
variable

ordering
ordering
ordering
ordering

time

    

   

  
 

  

  

  

  

  
test

  

  

  

  

   

figure     effect variable value ordering heuristics time  sec   backtracking
algorithm  curve represents     tests random instances ia networks
drawn s           tests ordered time taken solve
instance  backtracking algorithm used sa decomposition method 
versions algorithm identical except one searched singleton
labelings  denoted hereafter figure    si method  two searched
decompositions labels largest possible allowed relations sa networks nb networks  respectively  methods solved set random
problems drawn b n  applied benzer s matrix  denoted  
figure      problem  amount time required solve given ia network recorded  mentioned earlier  ia network preprocessed path
consistency algorithm backtracking search  timings include preprocessing
time  experiments indicate speedup using sa decomposition method
three fold si method  well  sa decomposition method
able solve larger problems running space  n       versus n        
nb decomposition method gives exactly result sa method
problems structure constraints  tested three methods
set random problems drawn s      p   p                    
experiments  sa nb methods consistently twice fast si method 
well  nb method showed advantage sa method problems 
surprising branching factor  hence size search space  smaller
nb method sa method 
second set experiments  summarized figure     examined effect
execution time backtracking algorithm heuristically ordering variables
values domains variables backtracking search begins  variable
ordering  six permutations cardinality  constraint  weight heuristics tried
  

fivan beek   manchak

primary  secondary  tertiary sorting keys  respectively  basis comparison 
experiments included case heuristics  figure    shows approximate cumulative
frequency curves experimental results  thus  example  read
curve representing heuristic value ordering best heuristic variable ordering
approximately     tests completed within    seconds  whereas random value
variable ordering approximately    tests completed within    seconds 
read curves                    percentiles data sets  where
value median   th percentile value   th test   curves
truncated time             hour   backtracking search aborted
time limit exceeded 
experiments found s           represents particularly dicult class
problems different heuristics resulted dramatically different performance  heuristic case different heuristics 
value ordering  best heuristic variable ordering combination constraintedness weight cardinality constraintedness primary sorting key
remaining keys used break subsequent ties  somewhat surprisingly  best heuristic
variable ordering changes heuristic value ordering incorporated  combination weight constraintedness cardinality works much better  heuristic together
value ordering particularly effective   attening out  distribution allowing much greater number problems solved reasonable amount time 
s      p   p                     problems much easier three
hundreds tests completed within    seconds  problems  heuristic used
result significantly different performance 
summary  experiments indicate changing decomposition method
able solve larger problems running space  n       vs n      
machine   megabytes  see figure      experiments indicate good heuristic
orderings essential able find consistent scenario ia network
reasonable time  good heuristic ordering able solve much larger problems
running time  see figure      experiments provide additional evidence
ecacy ladkin reinefeld s              algorithm  nevertheless  even
improvements  problems still took considerable amount time solve 
consideration  surprising  all  problem known np complete 

   conclusions
temporal reasoning essential part tasks planning scheduling  paper  discussed design empirical analysis two key algorithms temporal
reasoning system  algorithms path consistency algorithm backtracking algorithm  temporal reasoning system based allen s        interval based framework
representing temporal information  emphasis make algorithms
robust ecient practice problems vary easy hard  path consistency algorithm  bottleneck performing composition operation  developed
methods reducing number composition operations need performed 
methods result almost order magnitude speedup already highly
optimized implementation algorithm  backtracking algorithm  developed
  

fialgorithms temporal reasoning

variable value ordering heuristics showed alternative formulation
problem considerably reduce time taken find solution  techniques allow
interval based temporal reasoning system applied larger problems perform
eciently existing applications 

references

aho  a  v   hopcroft  j  e     ullman  j  d          design analysis computer
algorithms  addison wesley 
allen  j  f          maintaining knowledge temporal intervals  comm  acm     
        
allen  j  f     koomen  j  a          planning using temporal world model  proceedings
eighth international joint conference artificial intelligence  pp         
karlsruhe  west germany 
benzer  s          topology genetic fine structure  proc  nat  acad  sci  usa 
              
bitner  j  r     reingold  e  m          backtrack programming techniques  comm  acm 
            
bruce  b  c          model temporal references application question
answering program  artificial intelligence          
dechter  r          local global consistency  artificial intelligence             
dechter  r     pearl  j          network based heuristics constraint satisfaction problems  artificial intelligence           
freuder  e  c          sucient condition backtrack free search  j  acm            
ginsberg  m  l   frank  m   halpin  m  p     torrance  m  c          search lessons learned
crossword puzzles  proceedings eighth national conference artificial
intelligence  pp          boston  mass 
golomb  s     baumert  l          backtrack programming  j  acm              
golumbic  m  c     shamir  r          complexity algorithms reasoning
time  graph theoretic approach  j  acm                
haralick  r  m     elliott  g  l          increasing tree search eciency constraint
satisfaction problems  artificial intelligence              
hogge  j  c          tplan  temporal interval based planner novel extensions  department computer science technical report uiucdcs r     university illinois 
hooker  j  n          needed  empirical science algorithms  operations research 
            
  

fivan beek   manchak

ladkin  p     reinefeld  a          effective solution qualitative interval constraint
problems  artificial intelligence              
ladkin  p     reinefeld  a          symbolic approach interval constraint problems 
calmet  j     campbell  j   eds    artificial intelligence symbolic mathematical
computing  springer lecture notes computer science      springer verlag 
ladkin  p  b     maddux  r  d          binary constraint networks  technical report 
kestrel institute  palo alto  calif 
mackworth  a  k          consistency networks relations  artificial intelligence    
       
montanari  u          networks constraints  fundamental properties applications
picture processing  inform  sci             
nadel  b  a          constraint satisfaction algorithms  computational intelligence    
        
nebel  b     burckert  h  j          reasoning temporal relations  maximal
tractable subclass allen s interval algebra  j  acm            
nudel  b          consistent labeling problems algorithms  expected complexities
theory based heuristics  artificial intelligence              
purdom  jr   p  w          search rearrangement backtracking polynomial average
time  artificial intelligence              
van beek  p          reasoning qualitative temporal information  artificial intelligence              
van beek  p     cohen  r          exact approximate reasoning temporal
relations  computational intelligence             
vilain  m     kautz  h          constraint propagation algorithms temporal reasoning 
proceedings fifth national conference artificial intelligence  pp         
philadelphia  pa 
vilain  m   kautz  h     van beek  p          constraint propagation algorithms
temporal reasoning  revised report  weld  d  s     de kleer  j   eds    readings
qualitative reasoning physical systems  pp           morgan kaufmann 
wallace  r  j     freuder  e  c          ordering heuristics arc consistency algorithms 
proceedings ninth canadian conference artificial intelligence  pp      
    vancouver  b c 

  


