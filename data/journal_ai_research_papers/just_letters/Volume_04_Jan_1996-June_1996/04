journal artificial intelligence research                 

submitted       published      

principled approach towards symbolic
geometric constraint satisfaction
sanjay bhansali

bhansali eecs wsu edu

school eecs  washington state university
pullman  wa           

glenn a  kramer

gak eit com

enterprise integration technologies      el camino real
menlo park  ca      

tim j  hoar

timhoar microsoft com

microsoft corporation
one microsoft way        
redmond  wa      

abstract
important problem geometric reasoning find configuration collection
geometric bodies satisfy set given constraints  recently  suggested
problem solved efficiently symbolically reasoning geometry  approach  called
degrees freedom analysis  employs set specialized routines called plan fragments
specify change configuration set bodies satisfy new constraint
preserving existing constraints  potential drawback  limits scalability approach 
concerned difficulty writing plan fragments  paper address limitation
showing plan fragments automatically synthesized using first principles
geometric bodies  actions  topology 

   introduction
important problem geometric reasoning following  given collection geometric
bodies  called geoms  set constraints them  find configuration i e   position 
orientation  dimension geoms satisfies constraints  solving problem
integral task many applications constraint based sketching design  geometric
modeling computer aided design  kinematics analysis robots mechanisms
 hartenberg   denavit         describing mechanical assemblies 
general purpose constraint satisfaction techniques well suited solving constraint
problems involving complicated geometry  techniques represent geoms constraints
algebraic equations  whose real solutions yield numerical values describing desired
configuration geoms  equation sets highly non linear highly coupled
general case require iterative numerical solutions techniques  iterative numerical techniques
particularly efficient problems stability robustness  press 
flannery  teukolsky   vetterling         many tasks  e g   simulation optimization
mechanical devices  equations solved repeatedly makes compiled solution
desirable  theory  symbolic manipulation equations often yield non iterative  closed
form solution  found  closed form solution executed efficiently 
     ai access foundation morgan kaufmann publishers  rights reserved 

fibhansali  kramer   hoar

however  computational intractability symbolic algebraic solution equations renders
approach impractical  kramer        liu   popplestone        
earlier work kramer describes system called gce uses alternative approach
called degrees freedom analysis               approach based symbolic reasoning
geometry  rather equations  shown efficient systems based
algebraic equation solvers  approach uses two models  symbolic geometric model used
reason symbolically assemble geoms satisfy constraints
incrementally   assembly plan  thus developed used guide solution complex
nonlinear equations   derived second  numerical model   highly decoupled  stylized
manner 
gce system used analyze problems domain kinematics shown
perform kinematics simulation complex mechanisms  including stirling engine 
elevator door mechanism  sofa bed mechanism  much efficiently pure numerical
solvers  kramer         gce subsequently integrated commercial system
called bravotm applicon used drive  d sketcher  brown associates        
several academic systems currently using degrees freedom analysis
applications assembly modeling  anantha  kramer   crawford         editing
animating planar linkages  brunkhart         feature based design  salomons        shah  
rogers        
gce employs set specialized routines called plan fragments create assembly plan 
plan fragment specifies change configuration geom using fixed set
operators available degrees freedom  new constraint satisfied
preserving prior constraints geom  assembly plan completed
constraints satisfied degrees freedom reduced zero  approach
canonical  constraints may satisfied order  final status geom terms
remaining degrees freedom  p         kramer         algorithm finding
assembly procedure time complexity o cg  c number constraints
g number geoms  p       kramer        
since crux problem solving taken care plan fragments  success
approach depends ones ability construct complete set plan fragments meeting
canonical specification  number plan fragments needed grows geometrically
number geoms constraints increase  worse  complexity plan
fragments increases exponentially since various constraints interact subtle ways creating
large number special cases need individually handled  potentially serious
limitation extending degrees freedom approach  paper address problem
showing plan fragments automatically generated using first principles
geoms  actions  topology 
approach based planning  plan fragment generation reduced planning
problem considering various geoms invariants describing state 
operators actions  rotate  change configuration geoms  thereby
violating achieving constraint  initial state specified set existing
invariants geom final state additional constraints satisfied  plan
sequence actions applied initial state achieves final state 
formulation  one could presumably use classical planner  strips  fikes
  nilsson         automatically generate plan fragment  however  operators
domain parametric operators real valued domain  thus  search space consists
infinite number states  even real valued domain discretized considering realvalued intervals still large search space finding plan satisfies
   

fiprincipled symbolic geometric constraint satisfaction

specified constraints would intractable problem  approach uses loci information
 representing set points satisfy constraints  reason effects various
operators thus reduces search problem problem topology  involving reasoning
intersection various loci 
issue faced using conventional planner frame problem  determine
properties relationships change result action  typical solution use
assumption  action modify property relationship unless explicitly stated
effect action  approach works well one knows priori possible
constraints invariants might interest relatively constraints get affected
action   true case  use novel scheme representing effects
actions  based reifying  i e   treating first class objects  actions addition geometric
entities invariant types  associate  pair geom invariants  set actions
used achieve preserve invariant geom  whenever new geom
invariant type introduced corresponding rules actions achieve preserve
invariants added  since many invariant types actions
domain  scheme results simpler rules  borgida  mylopoulos   reiter        propose
similar approach reasoning program specifications  unique feature work
use geometric specific matching rules determine two general actions
achieve preserve different constraints reformulated less general action 
another shortcoming using conventional planner difficulty representing
conditional effects operators  gce operations effect depends type geom
well particular geometry  example  action translating body intersection
two lines plane would normally reduce bodys translational degrees freedom
zero  however  two lines happen coincide body still retains one degree
translational freedom two lines parallel coincide action fails 
situations called degeneracies  one approach handling degeneracies use
reactive planner dynamically revises plan run time  however  could result
unacceptable performance many real time applications  approach makes possible precompile potential degeneracies plan  achieve dividing planning
algorithm two phases  first phase skeletal plan generated works normal
case second phase  skeletal plan refined take care singularities
degeneracies  approach similar idea refining skeletal plans molgen
 friedland        idea critics hacker  sussman        fix known bugs
plan  however  skeletal plan refinement molgen essentially consisted instantiating
partial plan work specific conditions  whereas method complete plan works
normal case extended handle special conditions degeneracies singularities 
    plan fragment example 
use simple example plan fragment specification illustrate approach 
domains mechanical cad computer based sketching rely heavily complex
combinations relatively simple geometric elements  points  lines  circles
small collection constraints coincidence  tangency  parallelism  figure  
illustrates fairly complex mechanisms  all implemented gce  using simple geoms
constraints 

   

fibhansali  kramer   hoar

automobile suspension

elevator doors
stirling engine
figure    modeling complex mechanisms using simple geoms constraints  constraints
needed model joints mechanisms solvable using degrees freedom approach 

example problem illustrated figure   specified follows 
geom type  circle
name   c
invariants   fixed distance line  c  l   dist  bias counterclockwise 
to be achieved   fixed distance line  c  l   dist  bias clockwise 
example  variable radius circle  c  prior constraint specifying circle
fixed distance  dist  left fixed line  l   or alternatively  line drawn parallel
 l  distance  dist  center  c tangent counterclockwise direction
circle   new constraint satisfied circle fixed distance  dist 
right another fixed line  l  

 l 
 l 
 c
 c

 dist 

 l 

 dist 
 l 

figure    example problem  initial state 

 we use following conventions  symbols preceded   represent constants  symbols preceded  
represent variables  expressions form     parent subpart  denote subpart compound term  parent 

   

fiprincipled symbolic geometric constraint satisfaction

solve problem  three different plans used   a  translate circle
current position position touches two lines  l   l  shown figure
 b  scale circle keeping point contact  l  fixed  touches  l   c 
scale translate circle touches  l   l  
action sequences constitute one plan fragment used
situation would available gce plan fragment library  note
plan fragments would applicable certain situations  example   l   l 
parallel  single translation never achieve constraints  plan fragment  a 
would applicable  paper show plan fragments
automatically synthesized reasoning fundamental principles 
rest paper organized follows  section   gives architectural overview
system built synthesize plan fragments automatically detailed description various
components  section   illustrates plan fragment synthesis process using example
figure    section   describes results current implementation system  section
  relates approach work geometric constraint satisfaction  section   summarizes
main results suggests future extensions work 

   overview system architecture
figure   gives overview architecture system showing various knowledge
components plan generation process  knowledge represented system broadly
categorized geom knowledge base contains knowledge specific particular
geometric entities geometry knowledge base independent particular geoms
reused generating plan fragments geom 
knowledge components
geometry knowledge base
geom knowledge base
geoms

actions

invariants

action matching rules
action rules

loci

reformulation rules

signatures

measurements

plan fragment
specification

planner
phase

prioritization strategy

skeletal
plan

planner
phase ii

plan fragment

figure    architectural overview plan fragment generator

    geom knowledge base
geom specific knowledge base decomposed seven knowledge
components 
   

fibhansali  kramer   hoar

      actions
describe operations performed geoms  gce domain  three actions
suffice change configuration body arbitrary configuration   translate g v 
denotes translation geom g vector v   rotate g pt ax amt  denotes rotation
geom g  around point pt  axis ax  angle amt   scale g pt amt  g
geom  pt point geom  amt scalar  semantics scale operation depends
type geom  example  circle  scale indicates change radius
circle line segment denotes change line segments length  pt point
geom fixed  e g   center circle  
      invariants
describe constraints solved geoms  initial version system
designed generate plan fragments variable radius circle variable length linesegment fixed workplane  constraints distances geoms points 
lines  geoms workplane  seven invariant types represent
constraints  examples two invariants are 



 invariant point g pt glb coords  specifies point pt geom g
coincident global coordinates glb coords 
 fixed distance point g pt dist bias  specifies geom g lies fixed
distance dist point pt  bias either bias inside bias outside
depending whether g lies inside outside circle radius dist around point pt 

      loci
represent sets possible values geom parameter  position point
geom  various kinds loci grouped either  d locus  representable set
parametric equations one parameter   d locus  representable set parametric
equations two variables   for  example line  d locus specified  make line locus
through pt direc  represents infinite line passing through pt
direction direc  loci represented system include rays  circles  parabolas  hyperbolas 
ellipses 
      measurements
used represent computation function  object  relationship
objects  terms mapped set service routines get called plan
fragments  example measurement term is    d intersection  d locus   d locus   
represents intersection two  d loci  normal case  intersection two  dimensional loci point  however  may singular cases  example  two
loci happen coincide  case intersection returns one locus instead
point  may degenerate cases  example  two loci intersect 
case  intersection undefined  exceptional conditions represented
measurement type used second phase plan generation process
elaborate skeletal plan  see section      
   

fiprincipled symbolic geometric constraint satisfaction

      geoms
objects interest solving geometric constraint satisfaction problems  examples
geoms lines  line segments  circles  rigid bodies  geoms degrees freedoms
allow vary location size  example   d space circle variable
radius  three translational  two rotational  one dimensional degree freedom 
configuration variables geom defined minimal number real valued
parameters required specify geometric entity space unambiguously  thus  circle
six configuration variables  three center  one radius  two plane
normal   addition  representation geom includes following 





name  unique symbol identify geom 
action rules  set rules describe invariants geom
preserved achieved actions  see below  
invariants  set current invariants geom 
invariants to be achieved  set invariants need achieved
geom 

      action rules
action rule describes effect action invariant  two facts interest
planner constructing plan      achieve invariant using action    
choose actions preserve many existing invariants possible  general 
several ways achieve invariant several actions preserve invariant 
intersection two sets actions set feasible solutions  system  effect
actions represented part geom specific knowledge form action rules  whereas
knowledge compute intersections two sets actions represented
geometry specific knowledge  since depend particular geom acted on  
action rule consists three tuple  pattern  to preserve  to  re achieve   pattern
invariant term interest  to preserve list actions taken without violating
pattern invariant  to  re achieve list actions taken achieve invariant
re achieve existing invariant clobbered earlier action  actions stated
general form possible  matching rules geometry knowledge base
used obtain general unifier two actions  example action rule 
associated variable radius circle geoms is 
pattern    d constrained point  circle      circle center    dlocus 
to preserve   scale  circle      circle center   any 
 translate  circle  v        dlocus arbitrary point 
     circle center  
to  re achieve   translate  circle  v        dlocus arbitrary point 
     circle center  

 ar   

action rule used preserve achieve constraint center circle geom
lie  d locus  two actions may performed without violating constraint 
    scale circle center  would change radius circle position
center remains hence  d constrained point invariant preserved     
   

fibhansali  kramer   hoar

translate circle vector goes current center arbitrary point  dimensional locus   v  b  denotes vector point b point a   achieve invariant
one action may performed  translate circle center moves current
position arbitrary position   dimensional locus 
      signatures
completeness  necessary exist plan fragment possible combination
constraints geom  however  many cases  two constraints describe
situation geom  in terms degrees freedom   example  constraints
ground two end points line segment constraints ground direction  length 
one end point line segment reduce degrees freedom line segment
zero hence describe situation  order minimize number plan fragments
need written  desirable group sets constraints describe situation
equivalence classes represent equivalence class using canonical form 
state geom  terms prior constraints it  summarized signature 
signature scheme geom set canonical signatures plan fragments need
written  kramers earlier work        signature scheme determined manually
examining signature obtained combining constraint types designating one
set equivalent signatures canonical  approach allows us construct signature
scheme geom automatically using reformulation rules  described shortly  
reformulation rule rewrites one constraints simpler form  signature scheme
obtained first generating possible combinations constraint types yield set
possible signatures  signatures reduced using reformulation rules
signature reduced simplest form  set  unique  signatures left constitute
signature scheme geom 
example  consider set constraint types variable radius circle  signature
geom represented tuple  center  normal  radius  fixedpts  fixedlines  where 







center denotes invariants center point either free  i e  
constraint center point   l   i e   center point constrained  dimensional locus   l   i e   center point constrained   dimensional
locus   fixed 
normal denotes invariant normal plane circle
either free  l   fixed  in  d always fixed  
radius denotes invariant radius either free fixed 
fixedpts denotes number fixed distance point invariants either     
  
fixedlines denotes number fixed distance line invariants either
       

l  l  denote  d  d locus respectively  assume  d geometry  l  invariant
center redundant  normal always fixed    x   x   x   x       
possible signatures geom  however  several describe situation 
example  signature 
 center free radius free  fixedpts   fixedlines   
describes circle constrained specific distances two fixed lines 
rewritten to 
   

fiprincipled symbolic geometric constraint satisfaction

 center l   radius free fixedpts   fixedlines   
describes circle constrained   dimensional locus  in case angular
bisector two lines   using reformulation rules  derive signature scheme variable
radius circles consisting    canonical signatures given below 
 center free radius free  fixedpts   fixedlines   
 center free radius free  fixedpts   fixedlines   
 center free radius free  fixedpts   fixedlines   
 center free radius fixed  fixedpts   fixedlines   
 center l  radius free  fixedpts   fixedlines   
 center l  radius free  fixedpts   fixedlines   
 center l  radius free  fixedpts   fixedlines   
 center l  radius fixed  fixedpts   fixedlines   
 center fixed radius free  fixedpts   fixedlines   
 center fixed radius fixed  fixedpts   fixedlines   
similarly  number signatures line segments reduced        using
reformulation rules 
    geometry specific knowledge
geometry specific knowledge organized three different kinds rules 
      matching rules
used match terms using geometric properties  planner employs unification
algorithm match actions determine whether two actions common unifier  however 
standard unification algorithm sufficient purposes  since purely syntactic
use knowledge geometry  illustrate this  consider following two
actions 
 rotate  g  pt   vec   amt   
 rotate  g  pt   vec   amt   
first term denotes rotation fixed geom  g  around fixed point  pt 
arbitrary axis arbitrary amount  second term denotes rotation geom
around different fixed point  pt  rotation axis amount unspecified before 
standard unification fails applied terms binding variables
makes two terms syntactically equal   however  resorting knowledge geometry 
match two terms yield following term 
 rotate  g  pt   v   pt   pt    amt  
denotes rotation geom around axis passing points  pt   pt  
point around body rotated point axis  here arbitrarily chosen
one fixed points   pt   amount rotation anything 
planner applies matching rules match outermost expression term first 
rule applies  tries subterms term  on  none matching rules apply 
  specifically  unification fails tries unify  pt   pt  

   

fibhansali  kramer   hoar

algorithm degenerates standard unification  matching rules conditions
attached them  condition boolean function  however  part
tend simple type checks 
      reformulation rules
mentioned earlier  several ways specify constraints restrict degrees
freedom geom  gce  plan fragments indexed signatures summarize
available degrees freedom geom  reduce number plan fragments need
written indexed  desirable reduce number allowable signatures 
accomplished set invariant reformulation rules used rewrite pairs
invariants geom equivalent pair simpler invariants  using well founded
ordering   equivalence means two sets invariants produce range
motions geom  reduces number different combinations invariants
plan fragments need written  example invariant reformulation following 
 fixed distance line  c  l   d  bias counterclockwise 
 fixed distance line  c  l   d  bias clockwise 



 rr   

  d constrained point  c      c center   angular bisector
 make displaced line  l  bias left  d  
 make displaced line  l  bias right  d  
bias counterclockwise
bias clockwise  

rule takes two invariants      geom fixed distance left given line 
    geom fixed distance right given line  reformulation produces
invariant geom lies angular bisector two lines parallel two given
lines specified distance them  either two original invariants conjunction
new one equivalent original set invariants 
besides reducing number plan fragments  reformulation rules help simplify
action rules  currently action rules  for variable radius circles line segments  use
single action preserve achieve invariant  restrict allowable signatures
geom  possible create examples need sequence  more one  actions
rule achieve invariant  need complex conditions need checked
determine rule applicability  allowing sequences conditionals rules increases
complexity rules pattern matcher  makes difficult verify
correctness rules reduces efficiency pattern matcher 
using invariant reformulation rules allows us limit action rules contain
single action  unfortunately  seems still need conditions achieve certain invariants 
example  consider following invariant variable radius circle 
 fixed distance point  circle  pt  dist bias outside 
states circle   circle distance  dist point  pt lie outside
circle around  pt radius  dist  one action may taken achieve constraint is 
 scale  circle
     circle center 
   

fiprincipled symbolic geometric constraint satisfaction

 minus      v       circle center   pt 
magnitude 
 dist 
is  scale circle setting radius distance center point  pt
minus scalar amount  dist  see figure     however  action achieves constraint
circle happens lie outside circular region radius  dist center  pt 

 c
 c

figure    geom  c scaled touch  c center  c lies shaded region 

therefore  need pre condition rule checks indeed case  note
action necessary completeness  otherwise planner would able solve
certain cases solution   instead allowing conditional rules  use rules without
condition second phase plan generation check see
exceptions  thus  example  exception would detected since third argument
scale operation returns negative number considered exception condition scale
operation 
      prioritizing strategy
given set invariants achieved geom  planner generally creates multiple
solutions  valid solutions absence exception conditions yield
configuration geom  however  plan fragments contain redundant action
sequences  e g   two consecutive translations   moreover  geom constrained
exception conditions  plan fragments able provide solution
whereas others not  prioritization strategy used prioritize skeletal plan
fragments plan fragments least redundancy flexibility chosen 
eliminating plan fragments redundant actions turns straightforward 
assume one degree dimensional freedom geometric body 
assumption proved   translation    rotation    scale sufficient change
configuration object arbitrary configuration  d space  therefore  plan
fragment contains one instance action type contains redundancies
rewritten equivalent plan fragment eliminating redundant actions  combining two
action single composite action  example  consider following pair
translations geom 


 translate  g  vec 
   

fibhansali  kramer   hoar



 translate  g  v   to        g center   

 vec represents arbitrary vector  to  represents arbitrary position   to 
independent positional parameter geom  first translate action redundant
removed  hence plan fragments contain redundant actions
eliminated 
prioritize remaining plan fragments following principle used 
prefer solutions subsume alternative solution 
rationale principle permits greater flexibility solving constraints
exception conditions  example  suppose two solutions circle geom 
solution    translate circle center lies fixed position  dimensional locus 
solution    translate circle center lies arbitrary point  dimensional locus  scale fixed amount  which function
position arbitrary point  
first solution subsumed second solution since always choose
arbitrary point solution   fixed position specified solution    the scale operation
case leaves dimension circle unchanged   therefore solution   preferred
solution   
subsumption relation imposes partial order set skeletal plan fragments 
prioritization strategy selects maximal elements partial order  runtime
tried turn one yields solution 

    plan fragment generation
plan fragment generation process divided two phases  figure     first phase
specification plan fragment taken input  planner used generate set
skeletal plans  form input second phase chooses one
skeletal plans elaborates take care singularities degeneracies  output
phase complete plan fragments 
    phase
skeletal plan generated using breadth first search process  figure   gives general form
search tree produced planner  first action typically reformulation
planner uses reformulation rules rewrite geom invariants canonical form  next 
planner searches actions produce state least   invariant preserved
list preserved least   action to be achieved  tba  list achieved  preserved
achieved invariants pushed preserved list  clobbered unachieved
invariants pushed tba list child state 
strategy produce intermediate nodes search tree might clobber
one preserved invariant without achieving new invariant might produce state
identical parent state terms invariants preserved

   

fiprincipled symbolic geometric constraint satisfaction

preserved  p
tba 
reformulate
preserved  p
tba 
action  
preserved  p 
tba  a 

action  
action  
preserved  p 
tba  a 

preserved  p 
tba  a 

actions
preserved  p  
tba  nil
figure    overview search tree produced planner

tba list  initial state geom may arbitrary configuration
 among set allowable configurations  may necessary first move geom
alternative allowable configuration find optimal solution 
illustrate need  consider example figure    example  one prior
constraint variable radius circle geom  center lies   dimensional locus  new
constraint achieved is  geom lie fixed distance line  order
achieve constraint one following two actions may taken     scale

 a 

 b  scale

 c  translate

 d  translate   scale

figure    example illustrate need actions produce state equivalent parent state 

   

fibhansali  kramer   hoar

circle fixed distance line  figure  b      translate circle
new position   dimensional locus touches line  figure  c   however 
infinite number additional solutions consisting combinations scale translation
 figure  d   solutions derived planner first changes configuration
geom preserves existing invariant without achieving new invariant  i e  
scale arbitrary amount translate arbitrary point   dimensional locus 
followed action achieves new invariant  therefore planner creates child
states identical parent state terms invariants preserved tba lists 
planner iteratively expands leaf node search tree one following
true 
   node represents solution  is  tba list nil 
   node represents cycle  is  invariants preserved tba lists
identical one ancestor nodes 
node marked terminal search tree pruned point  leaf nodes
marked terminal  search terminates  planner collects terminal nodes
solutions  plan steps solution nodes represents skeletal plan
fragment  multiple skeletal plan fragments obtained planner  one
chosen using prioritizing rule described earlier passed second phase plan
fragment generation 
    phase i  example
use example section   illustrate phase planner  planner begins
attempting reformulate given constraints  uses reformulation rule rr   described earlier
repeated convenience 
 fixed distance line  c  l   d  bias counterclockwise 
 fixed distance line  c  l   d  bias clockwise 



 rr   

  d constrained point  c      c center   angular bisector
 make displaced line  l  bias left  d  
 make displaced line  l  bias right  d  
bias counterclockwise
bias clockwise  

ii

l 


iii

iv

l 

figure    four possible angular bisectors two lines l  l   bias symbols l 
l  corresponding ray  i  bias counterclockwise   bias clockwise respectively 

   

fiprincipled symbolic geometric constraint satisfaction

rule two measurement terms  make displaced line angular bisector 
make displaced line takes three arguments  line  l  bias symbol indicating whether
displaced line left right l  distance  d  returns line parallel
given line l distance left right line depending bias  angular bisector
takes two lines  l  l   two bias symbols returns one four rays bisects
lines l  l  depending bias symbols  see figure     reformulation  state
search tree shown figure    reformulation rules applicable point 

preserved   fixed distance line  c  l   dist  bias counterclockwise 
tba 
 fixed distance line  c  l   dist  bias clockwise 

reformulation

preserved   fixed distance line  c  l   dist  bias counterclockwise 
tba 
  d constrained point  c
     c center 
 angular bisector
 make displaced line  l   bias left  dist  
 make displaced line  l   bias right  dist  
bias counterclockwise
bias clockwise  
figure    search tree reformulating invariants

next  planner searches actions achieve new invariant preserve
existing invariant both  describe steps involved finding actions satisfy
maximal number constraints  in case  two   planner first finds actions
achieve  d constrained point invariant examining action rules associated
variable circle geom  action rule ar   contains pattern matches  d constrainedpoint invariant 
pattern    d constrained point  circle      circle center    dlocus 
to preserve   scale  circle      circle center   any 
 translate  circle  v        dlocus arbitrary point 
     circle center  
to  re achieve   translate  circle  v        dlocus arbitrary point 
     circle center  
following bindings 

 ar   

  circle    c    d locus    angular bisector  make displaced  line           
substituting bindings obtain following action 

   

fibhansali  kramer   hoar

 translate  c  v       angular bisector  make displaced line  l  bias left  dist  
 make displaced line  l  bias right  dist  
arbitrary point 
     c center   
 a  
taken achieve constraint  similarly  planner finds actions
preserve fixed distance line invariant  relevant action rule following 
pattern   fixed distance line  circle  line  distance 
 ar   
to preserve   translate  circle  v       make line locus      circle center 
     line direction  
arbitrary point 
     circle center  
to  re achieve   translate  circle  v       make displaced line
 line
bias left

 plus  distance      circle radius   
arbitrary point 
     circle center   
relevant action appropriate substitutions is 
 translate  c  v       make line locus
     c center 
    l  direction  
arbitrary point 
     c center  

 a  

now  find action preserves preserved invariant achieves tba
invariant  planner attempts match preserving action  a   achieving action  a   
two actions match using standard unification  match employing following
geometry specific matching rule 
  move arbitrary point two
  different loci  move point
  intersection two loci

 v        d locus  arbitrary point   to 
 v        d locus  arbitrary point   to 



 v    d intersection   d locus    d locus    to 
yield following action 
 translate  c  v    d intersection  angular bisector
 make displaced line          
 make line locus      c center       l  direction  
     c center   
action moves circle point shown figure   achieves constraints 
simple one step plan constitutes skeletal plan fragment 
   

fiprincipled symbolic geometric constraint satisfaction

 l 

 c

angular bisector
make line locus

 dist 
 dist 
 l 

figure   

denotes point circle moved 

two actions generated planner first iteration  one
achieves new constraint clobbers prior invariant  moves circle
another configuration without achieving new constraint preserving prior constraint 
first action produces terminal state since constraints achieved 
hence search tree pruned point  however  planner continues search
alternative solutions expanding two nodes  two iterations following
solutions obtained 
   translate intersection angular bisector make line locus 
   translate arbitrary point angular bisector  followed translation
intersection point 
   translate arbitrary point make line locus  followed translation
intersection point 
   translate arbitrary point angular bisector scale 
stage first phase plan fragment generation terminated skeletal
plan fragments passed second phase planner 
    phase ii  elaboration skeletal plan fragment
purpose phase   planning i  select one skeletal plan fragments  ii 
elaborate generate desirable configuration geom
constrained well handle exception conditions 
      selection skeletal plan fragments
two primary considerations selecting skeletal plan fragment reduce redundant
actions plan increase generality plan  considerations used formulate
prioritization strategy described section    strategy implemented lookup table
assigns weights various plan fragments  plan fragments maximal weights
selected elaboration phase    readers interested implementation details
referred  hoar        
      plan fragment elaboration
plan fragment elaboration refines skeletal plan fragment two ways  first  refines actions
   

fibhansali  kramer   hoar

constrained  e g   translate arbitrary point locus  appropriate
instantiation unconstrained parameters  e g   selecting specific point locus   second 
handles exception conditions result constrained over constrained systems 
action refinement exception handling treated using common technique 
plan elaboration based  principle least motion   multiple
solutions problem choose solution minimizes total amount perturbation
 motion  system  implementing principle requires definition motion function 
ca g action  a  geom type  g  example  translation geom  motion
function  ct circle could square displacement center geom
initial final position  need motion summation function  g sums motion
produced individual actions geom g  example summation function
normal addition operator  plus  total motion produced geom computed using
summation function motion functions action  geom pairs 
plan fragment constrained  expression representing total motion
would contain one variables representing ungrounded parameters geom 
formal optimization techniques  based finite difference methods  used obtain values
parameters would minimize motion function  however  use efficient 
algorithm based hill climbing guarantee optimality yields good results
practice  use heuristic algorithm justified many interactive applications
sketching  fast  sub optimal solution preferable computationally expensive 
optimal one 
algorithm begins segmenting continuous loci discrete intervals 
systematically searches resultant  discrete n dimensional space  algorithm first finds
local minima along one dimension holding variables constant values 
holds first variable minimum value found searches lower local minima along
second dimension on  although algorithm guarantee finding global
even local minima  efficient yields good results practice  implemented
algorithm somewhat complex simple description above  details
found elsewhere  hoar        
exception conditions handled using technique above  exception
conditions identified service routine returns set solutions solution  e g  
routine compute intersection two   dimensional loci returns   dimensional locus
nil   multiple solutions represent constrained system requires search among
set solutions returned  conditions handled exactly described previous
paragraph  no solution exception occurs  system aborts plan fragment prints
diagnostic message explaining constraint could solved 
    phase ii  example
four skeletal plan fragments generated first phase planner  section       using
rule eliminating redundant translations given earlier  second third plan fragments
reduced single translation plan fragments equivalent first plan fragment 
leaves two distinct plan fragment solutions consider 
using prioritizing rule  system concludes first plan fragment consisting
single translation subsumed second plan fragment consisting translation
scale  thus  second plan fragment chosen preferred solution 
plan fragment deterministic since contains action translates circle
   

fiprincipled symbolic geometric constraint satisfaction

geom arbitrary point angular bisector  therefore  system inserts iterative loop
computes amount motion circle various points angular bisector 
breaking loop finds minima  similarly  service routine may
return exception  system inserts case statement contains loop handle
situations one solution returned  online appendix   contains complete
example plan fragment generated system 

    results
plan fragment generator described implemented using clos  common lisp
object system   implemented parts geometric constraint engine  gce  described
kramer c   xmotif based graphical user interface  written
translator translates synthesized plan fragments c    complete plan fragment
library representative geom  line segment  synthesized integrated
constraint engine  using able successfully demonstrate solution
several geometric constraints  present evaluation system 
primary contribution research novel geometric constraint satisfaction
approach  perspective constraint satisfaction techniques  novel feature
approach   degrees freedom analysis   already described earlier works
second author  kramer               goal research develop automated
techniques enable degrees freedom approach scale reducing amount
effort needed creating plan fragment libraries  hence  evaluation based
successful automating plan fragment synthesis process 
used plan fragment generator described automatically synthesize plan
fragments two representative geoms    line segments circles     d  seven
types constraints thirty four rules system     action rules line segments    action
rules circles    reformulation rules    matching rules   using rules
successfully generated skeletal plan fragments various combinations constraints line
segments       circles       largest search tree produced planner order
hundred nodes takes minutes macintosh quadra  evaluation
purposes  present data one representative geom   line segment 
    programming effort
figure    shows number lines code comprising current system  areas solid
represent code written manually  includes      lines clos code
plan fragment synthesizer       lines c c   user interface       lines c c  
support routines  hatched area represent code synthesized plan
fragment generator  represents       lines c   code  for plan fragments linesegment geom   size synthesized plan fragment  about     lines average  much less
plan fragments written manually  in c  original version gce  thus  using
automated plan fragment generator considerably reduced amount programming 
reduction ratio     good indicator reduction programming effort 
subject criticism since compares code two different programming languages
comprising different degrees difficulty 
accurate evaluation obtained comparing total effort required writing plan
fragments manually total effort required synthesizing using
   

fibhansali  kramer   hoar

     clos 

     c c   

   
 c   

user interface

    c c   

support routines

generator

plan fragments

figure     lines code different parts system

technique described paper  extremely difficult  impossible 
controlled experimental setting number factors cost involved  best
done compare empirical data based experience developing system 
following table shows effort person days developing plan fragment library
line segment geom using technique 

plan fragment generator
manually

research
  
 

development
   
   

total
   
   

table    effort  in person days  creating plan fragments
effort involved writing plan fragments manually  use conservative estimate
  person days plan fragment   table shows using plan fragment generator
obtained     reduction effort creating plan fragment library  testing
debugging time ignored assumed cases  although
believe time much manually generated plan fragments  
    scalability
much stronger evidence support technique obtained look effort
  estimate based effort required developing plan fragment library gce well
experimental data obtained two graduate students write plan fragments manually 

   

fiprincipled symbolic geometric constraint satisfaction

required extending plan fragment library adding features  e g   new kinds
geoms constraints   evaluate scalability approach  decided extend plan
fragments  d geoms added degrees rotational translational freedom 
extension done manually would significant exercise software maintenance since
requires changes plan fragment library  using plan fragment generator
needed revise rules used planner make changes support routines  since
support routines written manually  cost modify
approaches  effort needed rewrite rules relevant  took   week
effort rewrite debug action rules synthesize complete plan fragment library
 d  link successfully constraint engine  significant result
demonstrating technique used scale degrees freedom analysis
complex geoms geometries 
    correctness
important issue ignored far is  one verify correctness
completeness plan fragment generator  done extensive testing evaluation
plan fragments synthesized plan fragment generator  table   summarizes results 
number plan fragment specifications
specs  solutions 
completeness
solution exists
missing rules
symbolic solution
total
plan fragments errors 
correctness
faults due errors logic
support routine errors
total

   
  
  
 
  
 
  
  

table    completeness correctness synthesized plan fragments
eighty plan fragment specifications planner failed produce
solution  sixty five specifications  solutions general case   
specifications represent overconstrained problems  constraining one end point linesegment one dimensional locus previous constraints already reduced
end points translational degrees freedom zero  action planner take
cases check new constraint already satisfied  thirteen cases
solutions two missing rules  one action rule  one reformulation rule  two
rules added thirteen specifications solved  finally  two plan
fragments planner failed produce analytical solution  cases shown
figure     solve problems need reformulation rule reformulates existing
invariant constraint endpoint  lseg curve  l   instead representing
complex   dimensional  and higher dimensional  loci  l   assume constraint
engine would call numerical solver computes solution iteratively  alternative would
extend set support routines handle complex loci intersections 

   

fibhansali  kramer   hoar

 
 l 

 p
 l 

 lseg

 l 

figure     example problem generated symbolic solution   lseg line segment
constrained one end point  l   fixed length  tangent
circle centered  p  new constraint end point  lseg  l  

check correctness plan fragments  exhaustive evaluation
plan fragments  seen table    code synthesized perfect 
    plan fragments function correctly  analyzed reasons
failure manually inspecting plan fragments  significant finding none
failures due logical errors plan fragments  words skeletal plan
fragments generated phase correct complete  failures
bugs mathematical support routines called plan fragments 
instances failures traced bugs implementing phase   plan fragment  either
selecting wrong skeletal plan fragment computing least motion correctly 
expected first version automatically generated plan fragments completely
bug free  indeed  high percentage plan fragments function correctly  almost     
positive result reflects significant increase quality corresponding
decrease maintenance effort building geometric constraint satisfaction systems using
approach 

    related work
geometric constraint satisfaction old problem  probably first application problem
constraint based sketching sketchpad program developed sutherland        
sketchpad program based constraint relaxation limited problems
modeled point variables 
field mechanical design  graph based approach constraint satisfaction
described serrano         serranos approach constraints modeled using
constraint network  constraint satisfaction engine finds values constrained variables
satisfy constraints network using constraint propagation techniques  approach
identifies loops cycles network  collapses supernodes  applies
conventional sequential local propagation  approach uses numerical iterative techniques
problems stability  computational advantage approach reduces
equations tightly coupled 
commercial systems kinematics analysis based numerical iterative
techniques algebraic techniques combination two  although approaches
principle robust  several shortcomings make inappropriate real time
applications 
among non commercial systems  notable new approach constraint based sketching
   

fiprincipled symbolic geometric constraint satisfaction

juno   developed dec src  heydon   nelson         constraints juno  
specified using expressive  declarative constraint language seems powerful enough
express constraints arise practice  juno   uses combination symbolic
numerical techniques solve geometric constraints efficiently  key difference juno  degrees freedom approach juno   symbolic reasoning done
domain equations  example  juno   uses symbolic techniques local propagation 
unpacking  unification closure reduce number unknowns system equations 
equations solved newtons method  degrees freedom analysis  symbolic
reasoning done domain geometry rather equations 
geometric constraints arise robotics  primary issues concerned
finding physically realizable path space robot manipulator part
assembly  fundamental analytical tool solving motion planning problems robotics
configuration space framework  lozano perez         configuration space approach 
problem planning motion part space obstacles transformed
equivalent simpler problem planning motion point space enlarged
configuration space obstacles  degrees freedom analysis finesses problem since uses
notion incremental assembly metaphor solving geometric constraint systems 
physical meaning ascribed objects move need
  factor quite important real world assembly problem arising robotics 
use plan guide solution complicated non linear equations arising
formulating solving problems algebraically 

    conclusions
described plan fragment generation methodology synthesize plan fragments
geometric constraint satisfaction systems reasoning first principles geometric
entities  actions  topology  technique used successfully synthesize plan
fragments realistic set constraints geoms  may seem substituted one
hard task   writing complete set correct plan fragments various combinations geoms
constraints   even harder task  creating knowledge base rules automate
process  rules difficult write found necessary spend
effort debugging rules  however  estimate total effort write debug rules
still order magnitude less writing debugging manually written plan fragment
code  future work investigate approach scales complex constraints
geometries 
another useful extension work would concerned pushing automation one
level automatically acquire types knowledge simpler building
blocks  example  technique automatically synthesizing least motion function
description geometry would useful 
method plan fragment generation divided two disjoint phases 
alternative method would explore two phases interleaved  one possibility
degeneracy redundant constraint  planner could reformulate
problem removing redundant constraint re synthesize skeletal plan fragment
new set constraints  resultant plan would form part original plan
fragment deal degenerate cases  words  plan fragments would generated
on the fly needed constraint solver 

   

fibhansali  kramer   hoar

acknowledgments
thank qiqing xia helped implementing parts system described paper 
acknowledge support resources provided school electrical
engineering computer science  washington state university  work originated
first author knowledge systems laboratory  stanford university  second
author schlumberger laboratory computer science  austin 

references
anantha  r   kramer  g     crawford  r          architecture represent over  under 
fully constrained assemblies  proceedings asme winter annual meeting          
borgida  a   mylopoulos  j     reiter  r              nothing else changes  frame problem
procedure specifications  proceedings   th international conference
software engineering  baltimore  md 
brown associates          applicons gce  strong technical framework  brown associates
inc 
brunkhart  m  w          interactive geometric constraint systems  masters thesis  tr no 
csd         department ee cs  university california  berkeley 
fikes  r  e     nilsson  n  j          strips  new approach applicatiion theorem
proving problem solving  artificial intelligence             
friedland  p  e          knowledge based experiment design molecular genetics  tech  report
csd         department computer science  stanford university 
hartenberg  r  s     denavit  j          kinematic synthesis linkages  new york  mcgraw
hill 
heydon  a     nelson  g          juno   constraint based drawing editor  src research
report    a  digital systems research center  palo alto  ca 
hoar  t          automatic program synthesis geometric constraint satisfaction  masters
thesis  school eecs  washington state university 
kramer  g  a          solving geometric constraint systems  case study kinematics 
cambridge  ma  mit press 
kramer  g  a          geometric constraint engine  artificial intelligence                   
liu  y     popplestone  r  j            symmetry constraint inference assembly planning 
automatic assembly configuration specification  proceedings aaai     boston  ma 
          
lozano perez  t          spatial planning  configuration space approach  ieee transactions
computers  c             
   

fiprincipled symbolic geometric constraint satisfaction

press  w  h   flannery  b  p   teukolsky  s  a     vetterling  w  t          numerical recipes 
art scientific computing  cambridge  england  cambridge university press 
salomons  o          computer support design mechanical products  ph d  thesis 
universiteit twente  netherlands 
serrano  d          constraints conceptual design  ph d  thesis  massachusetts institute
technology 
shah  j  j     rogers  m  t          assembly modeling extension feature based design 
research engineering design             
sussman  g  j          computer model skill acquisition  new york  american elsevier 
sutherland  i  e          sketchpad  man machine graphical communication system  ph d 
thesis  massachusetts institute technology 

   


