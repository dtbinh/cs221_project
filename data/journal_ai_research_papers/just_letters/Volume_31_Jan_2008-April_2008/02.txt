journal of artificial intelligence research                 

submitted        published      

cui networks  a graphical representation for conditional
utility independence
yagil engel
michael p  wellman

yagil umich edu
wellman umich edu

university of michigan  computer science   engineering
     hayward st  ann arbor  mi             usa

abstract
we introduce cui networks  a compact graphical representation of utility functions
over multiple attributes  cui networks model multiattribute utility functions using the
well studied and widely applicable utility independence concept  we show how conditional
utility independence leads to an effective functional decomposition that can be exhibited
graphically  and how local  compact data at the graph nodes can be used to calculate
joint utility  we discuss aspects of elicitation  network construction  and optimization  and
contrast our new representation with previous graphical preference modeling 

   introduction
modern ai decision making is based on the notion of expected utility  in which probability distributions are used to weigh the utility values for each of the possible outcomes 
the representation of probability distribution functions by markov or bayesian networks
 pearl       exploiting conditional independence to achieve compactness and computational efficiencyhas led to a plethora of new techniques and applications  despite their
equal importance to decision making  preferences and utilities have generally not received
the level of attention ai researchers have devoted to beliefs and probabilities  nor have the
 increasing  efforts to develop representations and inference methods for utility achieved a
degree of success comparable to the impact of graphical models on probabilistic reasoning 
recognizing that utility functions over multidimensional domains may also be amenable to
factoring based on independence  keeney   raiffa         several have aimed to develop
models with analogous benefits  bacchus   grove        boutilier  bacchus    brafman 
      la mura   shoham        wellman   doyle         this is our goal as well  and we
compare our approach to these and other methods in the related work section       
the development of compact representations for multiattribute utility begins with the
notion of preferential independence  pi   or separability of subdomains in the outcome space 
a subdomain of outcomes is separable in the pi sense if the preference order over this subdomain does not depend on the rest of the domain  when all subsets of attributes induce
separable subdomains  the ordinal utility  value  function decomposes additively over its
variables  debreu        fishburn        gorman         a cardinal utility function represents not only preferences over outcomes but also a notion of strength of preferences  most
notably to represent preferences over actions with uncertain outcomes  or lotteries  direct
adaptation of the pi concept to cardinal utility requires a generalization of this notion 
a set of attributes is utility independent  ui  if the preference order over lotteries on the

c
    
ai access foundation  all rights reserved 

fiengel   wellman

induced subdomain does not depend on the values of the rest of the attributes  a stronger
judgement is to assert that the preference order over the joint domain depends only on its
margins over some attribute subsets  the latter leads to powerful additive decompositions 
either fully additive  when the subsets of attributes are disjoint   or generalized  which is an
additive decomposition over overlapping subsets  fishburn        bacchus   grove        
utility independence leads to less convenient decompositions  such as multilinear  keeney
  raiffa        or hierarchical  von stengel        wellman   doyle         most previous
efforts in the ai community to adapt modern graphical modeling to utility functions employ the generalized additive decomposition  bacchus   grove        boutilier et al        
gonzales   perny         in contrast  our work continues the other thread  based on the
weaker utility independence assumption  we elaborate on the difference between the types
of independence following the presentation of formal definitions 

   background
our utility theoretic terminology follows the definitive text by keeney and raiffa        
in the multiattribute utility framework  an outcome is represented by a vector of values
for n variables  called attributes  the decision makers preferences are represented by a
total pre order    over the set of outcomes  in common applications decision makers do
not have the ability to choose a certain outcome  but rather an action that results in a
probability distribution over outcomes  also called a lottery  the decision maker is hence
 over the set of possible lotteries  given a standard set
assumed to have a preference order 

of axioms   can be represented by a real valued utility function over outcomes  u     such
that numeric ranking of probabilistic outcomes by expected utility respects the ordering by
 the utility function is unique up to positive affine transformations  a positive linear
 
transform of u    represents the same preferences  and is thus strategically equivalent 
the ability to represent utility over probability distributions by a function over outcomes
provides some structure  but in multiattribute settings the outcome space is n dimensional 
unless n is quite small  therefore  an explicit  e g   tabular  representation of u    will
generally not be practical  much of the research in multiattribute utility theory aims to
identify structural patterns that enable more compact representations  in particular  when
subsets of attributes respect various independence relationships  the utility function may
be decomposed into combinations of modular subutility functions of smaller dimension 
let s    x            xn   be a set of attributes  in the following definitions  and the rest of
the work  capital letters denote subsets of attributes  small letters  with or without numeric
subscripts  denote specific attributes  and x denotes the complement of x with respect to
s  we denote the  joint  domain of x by d x   and indicate specific attribute assignments
with prime signs or superscripts  to represent an instantiation of subsets x and y at the
same time we use a sequence of instantiation symbols  as in x   y    
in order to meaningfully discuss preferences over subsets of attributes  we need a notion
of preferences over a subset given fixed values for the rest of the attributes 
 

 

definition    outcome y   is conditionally preferred to outcome y    given y   if y   y 
 
 
y    y   we denote the conditional preference order over y given y by y    

  

ficui networks

  
similarly we define conditional preference order over lotteries  the preference order 
y
 
over lotteries on y is represented by a conditional utility function  u  y  y   
definition    y is preferential independent  pi  of y if y   does not depend on the value
 
chosen for y  
preferential independence can be very useful for qualitative preference assessment  firstorder preferential independence  i e   independence of a single attribute from the rest  is a
natural assumption in many domains  for example  in typical purchase decisions greater
quantity or higher quality is more desirable regardless of the values of other attributes  preferential independence of higher order  however  requires invariance of the tradeoffs among
some attributes with respect to variation in others  a more stringentthough still often
satisfiableindependence condition  the standard pi condition applies to a subset with respect to the full complement of remaining attributes  the conditional version of pi specifies
independence with respect to a subset of the complement  holding the remaining attributes
fixed 
definition    y is conditionally preferential independent  cpi  of x given z  z   xy   
if for any z     x   z   does not depend on the value chosen for x     we denote this relationship
by cpi y  x   z  
the counterpart of preferential independence that considers probability distributions
over outcomes is called utility independence 
definition    y is utility independent  ui  of y   if the conditional preference order for
     does not depend on value chosen for y    
lotteries over y   
y
in our notations  we apply ui and the conditions defined below to sets of attributes or
to specific attributes 
given ui y  x   taking x   y   the conditional utility function over y given x   is
invariant up to positive affine transformations  for any fixed value x     this fact can be
expressed by the decomposition
u  x  y     f  x    g x u  x     y   

g       

note that the functions f    and g   may be different for each particular choice of x     since
u  x     y   is a function only of y   we sometimes use the notation ux    y   
utility independence has a conditional version as well 
definition    y is conditionally utility independent  cui  of x given z  z   xy   if for
 x   z   does not depend on the value chosen for x     we denote this relationship by
any z     
cui y  x   z  
cui also supports functional decomposition  for any z     the conditional utility function
over y given x   z   is strategically equivalent to this function given a different instantiation
of x  however  the transformation depends not only on x  but also on z     hence we can
write 
u  x  y  z    f  x  z    g x  z u  x     y  z   g       
   
  

fiengel   wellman

that is  we can fix x on some arbitrary level x   and use two transformation functions f and
g to get the value of u    for other levels of x  a stronger  symmetric form of independence
which leads to additive decomposition of the utility function is called additive independence 
we provide the definition for its conditional version 
definition    x and y are conditionally additive independent given z  cai x  y   z  
 z   depends only on the marginal conditional probability disif for any instantiation z     
 
tributions over xz and y z    
this means that for any value z     and for any two probability distributions p  q such
that p x    z      q x    z      and p   y  z      q   y  z      the decision maker is indifferent
between p and q  a necessary  but not always sufficient  condition for this to hold is that
the utility differences u  x     y  z      u  x      y  z      for any x     x      do not depend on the
value of y  
cai leads to the following decomposition  keeney   raiffa        
u  x  y  z    f  x  z    g y  z  
other variations of utility independence were considered in the theoretical literature 
leading to various decomposition results  fishburn        krantz  luce  suppes    tversky 
      fuhrken   richter        
    motivation
the most obvious benefit of a model based on  conditional  utility independence is the
generality admitted by a weaker independence condition  in comparison to additive independence  whereas additivity practically excludes any interaction between utility of one
attribute or subset  x in definition    to the value of another  y    utility independence
allows substitutivity and complementarity relationships  as long as the risk attitude towards one variable is not affected by the value of another  one could also argue that ui is
particularly intuitive  based as it is on an invariance condition on the preference order  in
contrast   conditional  additive independence requires a judgment about the effects of joint
versus marginal probability distributions  moreover  additive independence is symmetric 
whereas the condition u i x  y   does allow the preference order over y to depend on x 
bacchus and grove exemplify the difference between additive and utility independence
on a simple state space of two boolean attributes  health and wealth  in their example 
shown in table    the attributes are not additive independent  it can be immediately seen
using preference differences   because h and w are complements  having both is worth
more than the sum of having each one without the other  we would have considered the
two attributes substitutes if  for example  u  w  h      and u  w  h       in both cases
h and w are nonetheless preferential independent  since we always prefer to be richer  all
else being equal  and healthier  all else being equal   for boolean variables  preferential and
utility independence are equivalent  we always prefer lotteries that give higher probability
to the preferred level  and therefore health and wealth are also ui of each other 
 conditional  additive independence and its resulting additive decomposition can be
generalized to multiple subsets that are not necessarily disjoint  this condition is called

  

ficui networks

w
w

h
 
 

h
 
 

table    utility values for the health and wealth example  bacchus   grove        
generalized additive independence  gai   if gai holds  u    decomposes to a sum of independent functions fi    over the gai subsets xi   as shown by bacchus and grove  cai
conditions can be accumulated to a global gai decomposition  see section       the latter
may also exist without any cai conditions leading to it  but such a gai condition is hard
to identify  whereas each cai condition corresponds to the independence of two attributes
or two subsets  a global gai condition does not have such an intuitive interpretation 
in the next example  no cardinal independence condition exists  except for a non symmetric cui  the example also shows the difference between pi and ui  and hence requires
the domains of h and w to include at least three values each  we also add a third attribute to the outcome space  location  l   indicating whether we live in the city or in the
countryside  table     in order to show that u i h   w  l   does not hold it is enough
to find that it is violated for one pair of lotteries  given the partial outcome wr   lci we
prefer the equal chance lottery over   hf   hs    whose expected utility is     
    to the sure
outcome hg  value     whereas given wp   lci we are indifferent  expected utility of   to
both lotteries   intuitively  it may be the case that the additional value we get from fitness
 over good health  is higher if we are also rich  making it more significant than the value
hg adds over hs   similarly  u i w   h  l   does not hold  by comparing the even chance
gamble over   wr   wp   and the sure outcome wm   first given hf   lci and then given
hs   lci  
w and h are therefore not utility independent  but they are preferential independent 
l  however  is not  when we are rich we would rather live in the city  and the other way
round when we are poor  except for the case of being poor and sick under which we prefer
the city 

wr
wm
wp

hf
  
 
 

lci
hg
 
 
 

hs
 
 
 

hf
  
 
 

lco
hg
 
 
   

hs
 
 
 

table    utility values for the health  wealth and location example  wr means rich  wm is
medium income  wp means poor  hf is healthy and at top fitness  hg means good health 
and hs means sick  lci stands for city location  and lco means countryside location 
therefore  no symmetric independence condition exists here  and that rules out any additive or multiplicative independence  conditional or not  between any subsets of attributes 
also  since no single variable is unconditionally ui  then no subset can be unconditionally
ui  further  the fact that preferences over l depend on the combination of h and w rules
out a gai decomposition of the form  w  l    w  h    h  l  
  

fiengel   wellman

we can  however  achieve decomposition using cui  it is the case that cui w  l h  
since each column on the left matrix  lci   is an affine transformation of its counterpart on
the right side  lco    for example  to transform the first column  hf    multiply by    and
add   
this example illustrates the subtlety of utility independence  in particular  whereas
preferences over l depend on w   w may still be  conditionally  ui of l  a cai assumption for the same attributes must inevitably ignore the reversal of preferences over l for
different values of w   hence a decision maker that will be queried for preferences under this
assumption may not be able to provide meaningful answers 
the interaction with a system that requires preference representation normally requires
the identification of structure  and then the population of the utility values that are required
by the compact representation  it is therefore most important that these two aspects are
simplified as possible  whereas the functional form handled by the system may be more
sophisticated  this is exactly the tradeoff made by cui nets  compared to a gai based
representation  if the gai condition is based on cai  cui nets achieve lower dimensionality
 section     and therefore easier elicitation  if a gai condition is not based on a collection
of cai conditions  it is hard to identify  cui nets simplify these bottleneck aspects  by
driving the complexity into the algorithms and into the functional form that is handled
behind the scenes 
    related work
perhaps the earliest effort to exploit separable preferences in a graphical model was the extension of influence diagrams by tatman and shachter        to decompose value functions
into sums and products of multiple value nodes  this structure provided computational
advantages  enabling the use of dynamic programming techniques exploiting value separability 
bacchus and grove        were first to develop a graphical model based on conditional
independence structure  in particular  they establish that the cai condition has a perfect
map  pearl   paz         that is  a graph with attribute nodes s such that node separation
reflects exactly the set of cai conditions on s  more specifically  for any two sets of nodes
x  y  s  cai x  y  xy   holds if and only if there is no direct edge between a node in x
and a node in y   we use the term cai map of s when referring to the graph which reflects
the perfect map of cai conditions  in the context of a preference order over d s   bacchus
and grove go on to show that the utility function has a gai decomposition over the set of
maximal cliques of the cai map  as we show in section    the cui network representation
developed here achieves weakly better dimensionality than cai maps due to the greater
generality of the independence assumption 
initiating another important line of work  boutilier et al         introduced cp networks  an efficient representation for ordinal preferences over multiple attributes  in a
cp network  each variable is conditionally pi of the rest given its parents  ordinal multiattribute preference representation schemes  for decision making under certainty   and
especially cp networks  can dramatically simplify the preference elicitation process  based
as they are on intuitive relative preference statements that avoid magnitude considerations 
however  the limited expressive power of cp networks may not suffice for complex decision

  

ficui networks

problems  in which tradeoff resolution may hinge in a complicated way on attribute settings
over rich domains  this problem is particularly acute when continuous or almost continuous
attributes are involved  such as money or time 
boutilier et al         subsequently extended this approach to numeric  cardinal utility
in ucp networks  a graphical model that utilizes the gai decomposition combined with
a cp net topology  this requires dominance relations between parents and their children 
somewhat limiting the applicability of the representation  the gai structure was also
applied for graphical models by gonzales and perny         who employ the clique graph
of the cai map  the gai network   for elicitation purposes 
in earlier work  la mura and shoham        redefine utility independence as a symmetric multiplicative condition  taking it closer to its probability analog  and supporting a
bayes net like representation  although multiplicative independence is different from additive independence  it is not necessarily weaker  recent work by abbas        defines
a subclass of utility functions on which a multiplicative notion of ui obeys an analog of
bayess rule 
the only graphical decomposition suggested in the past for utility functions that is based
on the original  non symmetric notion of utility independence is the utility tree  von stengel 
      see also wellman and doyle        for discussion in an ai context   the utility tree
decomposes the utility function using multilinear or multiplicative decomposition  keeney
  raiffa         and then further tries to decompose each subset similarly  using these
hierarchical steps the utility function becomes a nested expression over functions of its
smallest separable subsets and their complements 
    graphical models of cui
in their concluding remarks  bacchus and grove        suggest investigating graphical
models of other independence concepts  in particular utility independence  founding a
graphical model on ui is more difficult  however  as utility independence does not decompose
as effectively as does additive independence  in particular  the condition u i y  x  ensures
that y has a subutility function  but since x does not have one it is harder to carry on
the decomposition into x  hence in the case that x is large the dimensionality of the
representation may remain too high  our approach therefore employs cui conditions on
large subsets y   in which case the decomposition can be driven further by decomposing the
conditional utility function of y using more cui conditions 
in the sequel we show how serial application of cui leads to functional decomposition 
the corresponding graphical model  a cui network  provides a lower dimension representation of the utility function in which the function for any vertex depends only on the node
and its parents  we demonstrate the use of cui networks by constructing an example
for a relatively complex domain  next we elaborate on the technical and semantic properties of the model and knowledge required to construct it  subsequent technical sections
present optimization algorithms and techniques for further reducing the complexity of the
representation 

  

fiengel   wellman

   cui networks
we begin by constructing a dag representing a set of cui conditions  followed by a derivation of the functional decomposition over the nodes of the dag 
    cui dag
suppose that we obtain a set  of cui conditions on the variable set s    x            xn    such
that for each x  s   contains a condition of the form
cui s     x   p  x     x   p  x   
in other words  there exists a set p  x  that separates the rest of the variables from x  such
p  x  always exists  because for p  x    s    x  the condition above trivially holds  the set
 can be represented graphically by the following procedure  which we name procedure c 
   define an order on the set s  for convenience we assume the ordering x            xn   
   define the set of parents of x  as p a x      p  x    
   for each i              n
 i    as the set of nodes in
 define the set of intermediate descendants of xi   dn x
x            xi  that turned out to be descendants of xi   that is those for which xi is
 i   is the smallest
a parent or another descendant of xi is a parent  formally  dn x
set that satisfies the following condition 
 i    p a xj  
j              i       xi  p a xj    or k              i     xk  dn x
 i        
 xj  dn x
 define the parents of xi to be the nodes in p  xi   which are not already descendants of xi  
 i   
p a xi     p  xi     dn x
this procedure defines a dag  we denote dn x  as the final set of descendants of x  it
is the set defined by equation      when replacing             i     with             n    by their

definitions  dn x   dn x  
hence

p a x   dn x   p a x   dn x 
  p  x  

   

proposition    consider the dag defined by procedure c for a set of attributes s  for
any x  s 
cui s     x   p a x   dn x     x   p a x   dn x   
   

proof  by the definitions of p a x  and p  x       holds when replacing dn x  with dn x  
from the definition of cui  it is straightforward that
cui s    y  w     y   w    cui s    y  w  z    y   w  z  
because invariance of preference order over s    y  w   implies invariance of preference
order over its subset s    y  w  z   when the difference set z is fixed  given      and


taking w   p a x   dn x 
and z   dn x    dn x  
we get     
  

ficui networks

as an example  we show the construction of the structure on a small set of variables
s    x    x    x    x    x    x     for which we are given the following set of cui conditions 
    cui  x    x    x     x     x    x      cui  x    x    x     x     x    x     
cui  x    x    x     x     x    x      cui  x    x    x     x     x    x     
cui x    x     x    x    x    x      cui  x    x    x    x     x    x     
construction of the network using the order implied by the indices results in the cui
dag illustrated in figure    the minimal separating set for x  is  x    x     for x    we get
        x     and the only non descendant variable that is required to separate it from
dn x
the rest is x    which is therefore its only parent  the rest of the graph is constructed in
a similar way  when x  is placed  we find that p  x       x    x     therefore  x  becomes
       x       x    x    
descendant of x  after x  is placed  in other words dn x      dn x
ix 

ix 
 z

z
 x

  ix
z
i
 



 
 x

i
 

 

z

z

 i
z
 x

 

figure    cui dag given  and order x          x   

definition    let u  s  be a utility function representing cardinal preferences over d s  
a cui dag for u    is a dag  such that for any x  s      holds 
procedure c yields a cui dag by proposition    as the other direction  any given cui
dag g  in which parents and descendants are denoted by p ag     dng     respectively 
can be constructed using c  as follows  define p  x    p ag  x   dng  x  and a variable
ordering according to the reverse topological order of g  and complete the execution of c 
it is straightforward to show that the set of parents selected for each xi is exactly p ag  xi   
hence the result is a dag which is identical to g 
    cui decomposition
we now show how the cui conditions  guaranteed by proposition    can be applied iteratively to decompose u    to lower dimensional functions  we first pick a variable ordering
that agrees with the reverse topological order of the cui dag  to simplify the presentation 
we rename the variables so the ordering is again x            xn   the cui condition     on x 
implies the following decomposition  according to     
u  s    f   x    p a x     dn x       g   x    p a x     dn x    ux    s    x     

   

note that dn x       
we assume that we have specified a reference point s     which is an arbitrary value chosen
for each attribute x  s  denoted by x    ux      on the right hand side is the conditional
  

fiengel   wellman

utility function on s given that x  is fixed at a reference point x     for convenience we omit
attributes whose values are fixed from the list of arguments 
by applying the decomposition based on the cui condition of x  on the conditional
utility function ux       we get
ux    s    x       f   x  p a x     dn x       g   x    p a x     dn x    ux    x    s    x    x         
note that dn x      x     and x  is fixed to x     hence f  and g  effectively depend only on
x  and p a x     this point is exploited below 
substituting ux      in     according to     yields 
u  s    f    g   f    g  ux    x    s    x    x        f    g  f    g  g  ux    x    s    x    x     
the list of arguments to the functions fj   gj are always  xj   p a xj    dn xj     and we omit
it for readability 
we continue in this fashion and get
u  s   

i 
x

k 
y

 fk

j  

k  

gj    

i
y

gj ux        x   xi           xn   
i 

j  

and apply the cui condition of xi  
ux        x   xi   xi           xn    
i 

fi  xi   p a xi    dn xi      gi  xi   p a xi    dn xi   ux        x   xi             xn       
i

for convenience  we define the constant function fn    ux        x n     ultimately we obtain
u  s   

n  
x

i 
y

i  

j  

 fi  xi   p a xi    dn xi   

gj  xj   p a xj     dn xj    

   

the variable ordering is restricted to agree with the reverse topological order of the graph 
hence in      dn xi     x            xi     therefore  all the variables in dn xi   on the righthand side of     are fixed on their reference points  so fi and gi only depend on xi and
p a xi    formally  let y            yk be the variables in dn xi    with some abuse of notation 
we define 
fi  xi   p a xi      fi  xi   p a xi    y             yk    
gi  xi   p a xi      gi  xi   p a xi    y             yk    

   

now     becomes
u  s   

n  
x

i 
y

i  

j  

 fi  xi   p a xi   

gj  xj   p a xj     

    

this term is a decomposition of the multiattribute utility function to lower dimensional
functions  whose dimensions depend on the number of variables of p a x   as a result  the
  

ficui networks

dimensionality of the representation is reduced  as in bayesian networks  to the maximal
number of parents of a node plus one 
we illustrate how the utility function is decomposed in the example of figure    we
pick the ordering x    x    x    x    x    x  that agrees with the reverse topological order of
the graph  note that we are not renaming the variables here   to simplify notation we
denote the conditional utility function in which xi is fixed on the reference point by adding
a subscript i to u    
u  s    f   x  x  x      g   x  x  x   u   s    x    
u   s    x       f   x  x  x      g   x  x  x   u     s    x  x    
u     s    x  x       f   x      g   x   u       x  x  x   
u       x  x  x      f   x  x      g   x  x   u         x  x   
u         x  x      f   x  x      g   x  x   u           x   
u           x      f   x      g   x   u              
note that each fi and gi depends on xi and its parents  merging the above equations  and
using the definition f   u               produces
u  s    f    g  f    g  g  f    g  g  g  f    g  g  g  g  f    g  g  g  g  g  f    g  g  g  g  g  g  f        
we established that u  s  can be represented using a set of functions f  that includes 
for any x  s  the functions  fx   gx   resulting from the decomposition     based on the cui
condition      this means that to fully specify u  s  it is sufficient to obtain the data for
functions in f  this aspect is discussed in section    
definition    let u  s  be a utility function representing cardinal preferences over d s  
a cui network for u    is a triplet  g  f  s      g    s  e  is a cui dag for u  s   s   is
a reference point  and f is the set of functions  fi  xi   p a xi     gi  xi   p a xi      i             n 
defined above 
the utility value for any assignment to s can be calculated from the cui network
according to       using any variable ordering that agrees with the reverse topological order
of the dag  in our example  we can choose a different variable ordering than the one used
above  such as x    x    x    x    x    x    leading to the following expression 
u  s    f    g  f    g  g  f    g  g  g  f    g  g  g  g  f    g  g  g  g  g  f    g  g  g  g  g  g  f   
this sum of product is different than the one in       however  it is based on the same cui
decompositions and therefore the same functions  fi   gi   
    properties of cui networks
based on procedure c and the decomposition following it  we conclude the following 
proposition    let s be a set of attributes  and  a set of cui conditions on s  if 
includes a condition of the form cui s    x  zx    x   zx   for each x  s  then  can be
represented by a cui network whose dimensionality does not exceed maxx   zx        
  

fiengel   wellman

note that zx denotes here a minimal set of attributes  variables  that renders the rest
cui of x  this bound on the dimensionality will be obtained regardless of the variable
ordering  we can expect the maximal dimension to be lower if the network is constructed
using a good variable ordering  a good heuristic in determining the ordering would be to
use attributes with smaller dependent sets first  so that the attributes with more dependents
would have some of them as descendants  based on such an ordering we would expect the
less important attributes to be lower in the topology  while the more crucial attributes
would either be present higher or have a larger number of parents 
from this point we usually omit the third argument when referring to a cui condition 
as in cui x  y    which is taken equivalent to cui x  y   s    x  y    
in order to achieve a low dimensional cui networks  we are required to detect cui
conditions over large sets  this may be a difficult task  and we address it through an
example in section    the task is made somewhat easier by the fact that the set has to be
cui of a single variable  note that the condition cu i y  x  is weaker than the condition
cu i y  x  when x  x  furthermore  section   shows how the dimensionality can be
reduced if the initial cui decomposition is not sufficiently effective 
based on properties of cui  we can read additional independence conditions off the
graph  first  we observe that cui has a composition property at the second argument 
lemma    let cui x  y    x  y  s   and cui a  b   a  b  s   then
cui a  x   y  b  
this property leads to the following claim  which allows us to derive additional cui
conditions once the graph is constructed 
proposition
   consider s
a cui network for a set of attributes s  define p a x   
s
p
a x 
and
dn x 
 
xx dn x   then for any x  s 
xx
cui s    x  p a x   dn x     x  
proof  by recursion on x  using lemma   and proposition   
we also consider the other direction  by defining the set of nodes that renders a set cui
of the rest  this dual perspective becomes particularly useful for optimization  section    
because optimization based on the preference order over an attribute is meaningful only
when holding enough other attributes fixed to make it cpi or cui of the rest  let ch x 
denote the union of children of nodes in x  and let an x  denote all of the ancestors of
nodes in x  in both cases excluding nodes which are themselves in x 
proposition    consider a cui network for a set of attributes s  cui x  s   x an x 
ch x    for any x  s 
proof  let y 
  x  ch x   an x   then clearly x  x  x 
  p a y   dn y   hence from
proposition    cui x  y   we apply lemma   iteratively for each y 
  x  ch x   an x 
 note that the first argument is x for each cui condition  so it is x in the result as well  
and get the desired result 
we conclude this section by relating cui networks to cai maps 
  

ficui networks

proposition    let g    x  e  be a cai map  and x            xn an ordering over the nodes
in x  let g     x  e     be the dag such that there is a directed arc  xi   xj   in e   iff i   j
and  xi   xj    e  then g  is a cui network 
we note  however  that cai maps decompose the utility function over the maximal
cliques  whereas cui networks decompose over nodes and their parents  section   bridges
this gap  in addition  this result is used in section     

   cui modeling example
to demonstrate the potential representational advantage of cui networks we require a domain that is difficult to simplify otherwise  the example we use is the choice of a software
package by an enterprise that wishes to automate its sourcing  strategic procurement  process  we focus on the softwares facilities for running auction or rfq  request for quotes 
events  and tools to select winning suppliers either manually or automatically 
we identified nine key features of these kinds of software packages  in our choice scenario 
the buyer evaluates each package on these nine features  graded on a discrete scale  e g  
one to five   the features are  in brief 
interactive negotiations  in   allows a separate bargaining procedure with each supplier 
multi stage  ms   allows a procurement event to be comprised of separate stages of different types 
cost formula  cf   buyers can formulate their total cost of doing business with each
supplier 
supplier tracking  st   allows long term tracking of supplier performance 
multiattribute  ma  bidding over multiattribute items  potentially using a scoring function  
event monitoring  em   provides an interface to running events and real time graphical
views 
bundle bidding  bb   bidding for bundles of goods 
grid bidding  gb   adds a bidding dimension corresponding to an aspect such as time
or region 
decision support  ds   tools for optimization and for aiding in the choice of the best
supplier s  
we observe first that additive independence does not widely apply in this domain  for
example  multi stage makes several other features more useful or important  interactive
negotiations  often useful as a last stage   decision support  to choose which suppliers
   we hope the fact that the software itself may include facilities for multiattribute decision making does
not cause undue confusion  naturally  we consider this an important feature 

  

fiengel   wellman

proceed to the next stage   and event monitoring  helps keep track of how useful was each
stage in reducing costs   conversely  in some circumstances multi stage can substitute for
the functionality of other features  multiattribute  by bidding on different attributes in different stages   bundle bidding  bidding on separate items in different stages   grid bidding
 bidding on different time regions in different stages  and supplier tracking  by extracting
supplier information in a request for information stage   the potential dependencies for
each attribute are shown in table   
attr
em
in
cf
st
ma
ms
ds
gb
bb

complements
cf st ms
st ms ma
em ms ds ma gb bb
em ms in ds
in ds cf
ds em in st
cf ma gb st bb ms
cf ds
cf ds

substitutes

ds
ma
ms bb st gb
gb bb ma cf
ma ms bb
ma ms gb

cui set
in ds ma gb bb
em cf st ds gb bb
ma gb bb
in cf gb bb
gb bb
ma gb bb
in em
ma bb
ma gb

table    dependent and independent sets for each attribute 
the presence of a complement or substitute relation precludes additive independence 
from this fact we can identify a set of six attributes that must be mutually  additive  dependent   bb   gb   ds   ma  ms   cf    in consequence  the best case dimensionality achieved
by a cai map  and other cai based representations  see section       for this domain would
be six  the size of the largest maximal clique 
in order to construct a cui network we first identify  for each attribute x  a set y that is
cui of it  we can first guess such a set according to the complement substitute information
in table    typically  the set of attributes that are neither complements nor substitutes would
be cui  this is the approach taken for the attributes em and ds   however  attributes that
are complements or substitutes may still be cui of each other  and we therefore attempt
to detect and verify potentially larger cui sets  keeney and raiffa        provide several
useful results that can help in detection of ui  and those results can be generalized to cui 
in particular they show that we can first detect a conditional preferential independence
 cpi  condition in which one element is also cui  based on this result  in order to verify
for example that
cui  bb   gb   ma   cf   s    bb   gb   ma  cf    

    

the following two conditions are sufficient 
cpi  bb   gb   ma   cf   s    bb   gb   ma  cf    

    

cui bb    gb   ma  cf     s    bb   gb   ma  cf    

    

detection and verification of these conditions are also discussed by keeney and raiffa        
for our example  we observe that the features bb   gb   and ma each add a qualitative
  

ficui networks

element to the bidding  each bidding element is best exploited when cost formulation
is available  so complements cf   the complementarity is similar for each feature  thus
implying       moreover  bb is a crucial feature and therefore the risk attitude towards it
is not expected to vary with the level of cf   ma  and gb   and that implies       together
leading to      
in a similar fashion  we observe that the nature of the substitutivity of the three
mechanisms bb   gb   ma in ms is similar  each can be simulated using multiple stages 
that means that the tradeoffs among the three do not depend on ms   meaning that
cpi  bb   gb   ma   ms   holds  next  the dependency among the triplet  bb   gb   ma  is
also a result of the option to substitute one by another  as a result  each pair is cpi of the
third  finally  we find that the complementarity of st and in is marginal and does not
affect the tradeoffs with other attributes  we can therefore verify the following conditions 
cui  bb   gb   ma   ms    cui  bb   gb    ma   cui  st   em   cf   ds   gb   bb    in   
and cui  gb   bb   cf   in    st    the resulting maximal cui sets for each attribute are
shown in table   
to construct the network we start with the variable with the largest cui set  in   which
needs only ms and ma as parents  after which it is em that gets cf   ms   and st as
parents  next  we consider st which needs four attributes in its conditional set  but em is
a descendant  therefore only ds   ms   and ma are needed as parents  the next variable to
choose is ms   which needs only cf and ds as parents since the other dependant variables
are descendants  had we chosen cf before ms it would have needed four parents  in   ms  
st   and ds  note that although in is cui of cf and so is the set  bb   gb   ma   this
is not the case for the union  bb   gb   ma  in     now that we choose cf after ms it has
ms   st   and in as descendants and therefore only ds is a parent  the complete variable
ordering is in   em   st   ms   cf   ds   ma  gb   bb   and the resulting cui network is
depicted in figure    the maximal dimension is four 
the structure we obtained over the utility function in the above example is based largely
on objective domain knowledge  and may be common to various sourcing departments 
this demonstrates an important aspect of graphical modeling captured by cui networks 
encoding qualitative information about the domain  thus making the process of extracting
the numeric information easier  this structure in some cases differs among decision makers 
but in other cases  as above  it makes sense to extract such data from domain experts and
reuse this structure across decision makers 

   representation and elicitation
in this section  we derive an expression for local node data in terms of conditional utility functions  and discuss how to elicit utility information from judgments about relative
preference differences 
    node data representation
representing u by a cui network requires that we determine the f and g functions for each
cui condition  at any node y the functions f  g represent the affine transformation of the
conditional utility function u  x    y  z   here z   p a x   to strategically equivalent utility
functions for other values of x  like the transformation functions for ui  keeney   raiffa 
  

fiengel   wellman

figure    cui network for the example  the maximal number of parents is    leading to
dimension   

       the transformation functions for cui can be represented in terms of the conditional
utility functions u  x  y     z  and u  x  y     z  for suitable values y   and y    see below  
we can determine f and g by solving the system of two equations below  both based on
applying     for these specific values of y  
u  x  y     z    f  x  z    g x  z u  x    y     z  
u  x  y     z    f  x  z    g x  z u  x    y     z  
yielding
u  x  y     z   u  x  y     z 
 
u  x    y     z   u  x    y     z 
f  x  z    u  x  y     z   g x  z u  x    y     z  
g x  z   

    
    

the only restriction on the choice of y     y   is that the decision maker must not be
indifferent between them given x  and the current assignment to z  for example  y     y  
may differ on any single attribute y  y that is strictly essential 
    elicitation of measurable value functions
a utility function that is a used for choosing an action that leads to a known probability
distribution over the outcomes  should be obtained through elicitation of preferences over
lotteries  for example using even chance gambles and their certainty equivalents  keeney  
raiffa         based on the preceding discussion  to fully specify u    via a cui network 
we need to obtain the numeric values for the conditional utility functions u  x  y     p a x  
and u  x  y     p a x   for each node x  this is significantly easier than obtaining the full
n dimensional function  and in general can be done using methods described in preference
  

ficui networks

elicitation literature  keeney   raiffa         in this section we show how elicitation can
be conducted in cases when the choice is assumed to be done over certain outcomes  but a
cardinal representation is nevertheless useful 
for particular applications we can point out specific attributes that can be used as a
measurement for others  the most common example is preferences that are quasi linear in
a special attribute such as money or time  these kind of preferences can be represented by
a measurable value function  or mvf  krantz et al         dyer   sarin         an mvf
is a cardinal utility function defined under certainty and represents preference differences 
it has been shown  dyer   sarin        that ui has an analogous interpretation for mvf
with similar resulting decomposition  the extension to cui is straightforward 
for the case of monetary scaling  the preference difference over a pair of outcomes
represents the difference in willingness to pay  wtp  for each  a potential way to elicit the
mvf is by asking the decision maker to provide her wtp to improve from one outcome to
another  particularly when these outcomes differ over a single attribute 
under this interpretation  we first observe from      that g x  z  can be elicited in terms
of preference differences  between outcomes that possibly differ over a single attribute  the
result can convey qualitative preference information  assume y    y   and that x x   x 
then g x  z  is the ratio of the preference difference between y   and y   given x to the
same difference given x   z is fixed in all outcomes   hence  if y and x are complements
then g x  z      and increasing in x  if y and x are substitutes  g x  z      and decreasing
in x  this holds regardless of the choice for y     y     since by cui y  x   z  all attributes in
y maintain the same complementarity or substitutivity relationship to x  note also that
g x  z      iff cai y  x   z   another important observation is that though both y and x
may depend on z  in practice we do not expect the level of dependency between y and x to
depend on the particular value of z  in that case g becomes a single dimensional function 
independent of z 
f  x  z   intuitively speaking  is a measurement of wtp to improve from x  to x  the
value u  x    y     z  is multiplied by g x  z  to compensate for the interaction between y
and x  allowing f    to be independent of y   if we perform the elicitation obeying the
topological order of the graph  the function u  x    y     z  can be readily calculated for each
new node from data stored at its predecessors  choose y     y     and let z    z            zk   
ordered such that children precede parents  since y  x are fixed on the reference point 
k
i 
x
y
u  x   y   z   
 fzi
gzj  fn      
 

 

i  

j  

now we can obtain f  x  z  as follows  first we elicit the preference difference function
e x  z    u  x  y     z   u  x    y     z   then  assuming g x  z  was already obtained  calculate 
f  x  z    e x  z    g x  z     u  x    y     z  

   optimization
one of the primary uses of utility functions is to support optimal choices  as in selecting an
outcome or action  the complexity of the choice depends on the specific properties of the
  

fiengel   wellman

environment  when the choice is among a limited set of definite outcomes  we can recover
the utility of each outcome using the compact representation and choose the one with the
highest value  for instance  in the software example of section   we would normally choose
among an enumerated set of vendors or packages  in this procurement scenario we assume
the utility is an mvf  and we usually choose the outcome that yields the highest utility
net of price  in case of decision under uncertainty  when the choice is among actions that
lead to probability distributions over outcomes  the optimal choice is selected by computing
the expected utility of each action  if each action involves a reasonably bounded number of
outcomes with non zero probability  this again can be done by exhaustive computation 
nevertheless  it is often useful to directly identify the maximal utility outcome given a
quantitative representation of utility  in case of a direct choice over a constrained outcome
space  the optimization algorithm serves as a subroutine for systematic optimization procedures  and such can be adapted from the probabilistic reasoning literature  nilsson        
the algorithm may also be useful as a heuristic aid for optimization of expected utility or
net utility mentioned above  when the set of possible outcomes is too large for an explicit 
exhaustive choice 
in this section  we develop optimization algorithms for discrete domains  and show how
in many cases cui networks can provide leverage for optimization of cai maps  as is
typical for graphical models  our optimization algorithm is particularly efficient when the
graph is restricted to a tree 
    optimization over cui trees
definition    a cui tree is a cui network in which no node has more than one child 
note that this type of graph corresponds to an upside down version of a standard directed tree  or a forest  
let t be a cui tree  we assume wlog that t is connected  a forest can be turned
into a tree by adding arcs   as an upside down sort of tree  it has any number of roots  and
a single leaf  we denote the root nodes by ai   a            ak    the child of ai by bi   and so
on  for each root node ai   we define the function
hai  bi     arg   max u  bi   a i   
ai d ai  

denoting the selection of an optimal value of ai corresponding to a given value of its child 
from proposition    hai does not depend on the reference values chosen for s    ai   bi    the
function hai     which we call the optimal value function  ovf  of ai   is stored at node ai
since it is used by its descendants as described below 
next  each bi has no children or a single child ci   and any number of parents  for simplicity of exposition we present the case that bi has two parents  ai and aj   the maximization
function for bi is defined as
hbi  ci     arg   max u  ci   b i   hai  b i    haj  b i    
bi d bi  

in words  we pick the optimal value of bi for each assignment to its child and its parents 
but since we already know the optimum of the parents for each value of bi   we need only
consider this optimum for each evaluation on the domain of bi  
   

ficui networks

 a 

 b 

figure    cui networks in optimization examples   a  tree  b  non tree
the only external child of the set  ai   aj   bi   is ci   and it has no external ancestors 
hence  ai   aj   bi   is cui of the rest given ci   therefore the maximization above again does
not depend on the reference values of the rest of the attributes  similarly  when computing
hci  di   for the child ci of bi   each value for ci fixes bi  and any other parents of ci    and that
fixes ai and aj  and the other ancestors of ci    the last computation  at the leaf x  evaluates
each value of x  each value x  causes this cascade of fixed values to all of the ancestors 
meaning we finally get the optimal choice by comparing  d x   complete assignments 
we illustrate the execution of the algorithm on the cui tree of figure  a  we compute
ha  c  which is the optimal value of a for each value of c  and similarly hb  c   next  to
compute hc  e   for each value e  of e we compare all outcomes  e    c    ha  c     hb  c      c   d c  
at node d we compute hd  f    which is independent of the other nodes  at node e we compute
he  f     arg maxe  u  f  e    hc  e     hb  hc  e      ha  hc  e      node d can be ignored here  and at
node f it is
hf      arg max u  f     he  f      hd  f      hc  he  f       hb  hc  he  f        ha  hc  he  f       
f   d f  

note how each candidate value of f causes the cascade of optimal values to all of its
ancestors  the solution is then hf    and the resulting values of all the ancestors 
this optimization algorithm iterates over the nodes in topological order  and for each xi
it calculates the ovf hxi  xj    where xj is the child of xi   this calculation uses the values
of the ovf stored for its parents  and therefore involves comparison of  d xi    d xj   
outcomes  in case the numeric data at the nodes is available  factoring in the time it takes
to recover the utility value for each outcome  which is o n    the algorithm runs in time
o n  maxi  d xi       
    optimization over general dags
a common way in graphical models to apply tree algorithms to non trees is by using the
junction graph  however  the common notion of a junction graph for dag is a polytree 

   

fiengel   wellman

whereas our algorithm above is specialized to a  unit  tree  instead  we optimize the cui
network directly by generalizing the tree algorithm 
in the tree case  fixing the value of the child of a node x is sufficient in order to separate
x from the rest of the graph  excluding ancestors  we consider each value of the child at a
time  so it also determines the values for all the ancestors  in a general dag it is no longer
sufficient for the ovf to depend on the children  because they do not provide sufficient
information to determine the values of an x   hence we generalize this notion to be the
scope of x  sc x   defined below   which is a set of nodes on which the ovf of x must
depend  in order for an iterative computation of the ovf to be sound 
with this generalization  the dag algorithm is similar to the tree algorithm  let g be
a cui network  and x            xn a variable ordering that agrees with the topological order of
g  parents precede children   for each xi  according to the ordering   compute hxi  sc xi   
for any instantiation of sc xi    the optimal instantiation can now be selected backwards
from hxn     since for each node xi that is reached the values for sc xi   are already selected 
sc xi   is computed as follows  scan variables xi             xn in this order  when scanning
xj   add xj to sc xi   if the following conditions hold 
   there is an undirected path between xj and xi  
   the path is not blocked by a node already in sc xi   
by these conditions  sc xi   includes all the children of xi   but non of xi s ancestor since
they precede xi in the ordering  in addition  sc xi   includes all nodes that are needed to
block the paths that reach xi through its ancestors  for example  if xk   xj are children of
an ancestor xa of xi   and k   i   j  then xj must be in sc xi    because of the path through
xa   the children of xj are blocked by xj   so unless they have another path to xi they will
not be in sc xi    the children of xk   if ordered later than xi   will be in sc xi    but their
children will not   and so on 
figure  b is an example of a cui network that is not a tree  we consider the scopes
under the variable ordering a  b          j  the scope of roots always equals their set of children
 because there is no other path reaching them   meaning sc a     d  e   sc b     d  e  f   
sc c     e  f  h   sc i     j   the scope of d must include its child g and its siblings e
and f   all paths of h  j  and i to d are blocked by g  e  f therefore sc d     g  e  f    for e 
we must include its child g  and its younger sibling f   h has a blocked path to e through
f  sc e   but also a non blocked one through c 
  sc e   therefore sc e     g  f  h  
similarly  g and h are in the scope of f due to paths through b and c respectively  hence
sc f      g  h  j   for g  in addition to its child h we add j whose path to g through f  b  e
is not blocked  sc g     h  j   and finally sc h    sc i     j  and sc j       
the next step  computing the ovf  requires that we compare a set of outcomes that
differ on xi  co xi    where co xi   is a set of nodes whose ovf can be determined by
xi  sc xi    hence they are covered by xi    for this maximization to be valid  the condition
cui xi  co xi    s    xi  co xi    sc xi     must hold  we formally define co xi    and
establish this result which is proved in the appendix 
definition     co xi   is the smallest set of nodes that satisfied the following condition
j   i  sc xj      xi    sc xi    co xi     xj  co xi   
   

    

ficui networks

intuitively  xj is covered by xi if each node xk    xi in its scope  is either in the scope of xi
or was determined  according to its own scope  to be covered by xi   in figure  b  f  co g 
because sc f      g   sc g   e  co g  because sc e    g   sc g    f    moreover 
sc d     g  e  f   hence d  co g  as well  and similarly we find that a  b  co g   in this
example all the nodes preceding g in the ordering are covered  but this is not necessarily
always the case 
lemma    an assignment to xi and sc xi   is sufficient to determine hxj    for each xj 
co xi   
lemma    for any node xi   cui  xi    co xi    s     xi    co xi    sc xi      meaning
that xi and the nodes it covers are cui of the rest given sc xi   
when the algorithm reaches node xi   every choice of assignment to sc xi     xi   determines optimal values for co xi    lemma     we compare the  d xi    assignments which
differ over the values of xi and co xi    and select an optimal one as the value of hxi  sc xi    
this optimum does not depend on the nodes in s    xi  co xi  sc xi     due to lemma   
to illustrate  we examine what happens when the algorithm reaches node g in figure  b 
at this point hx  sc x   is known for any x that precedes g  as showed  all these nodes
are in co g   indeed  the assignment to sc g     g  h  j  directly determines the value for
hf     and then together with hf    it determines the value for he     and further it cascades
to the rest of the nodes  the cui network shows that cui  a  b  c  d  e  f  g    i    given
 h  j   and therefore the maximization operation  over the choice of value for g  is valid
regardless of the value of i 
the performance of the optimization algorithm is exponential in the size of the largest
scope  plus one   note that this would be seriously affected by the choice of variable ordering  also note  that in the case of a tree this algorithm specializes to the tree optimization
above  since there is no node that has a path to an ancestor of xi   except for other ancestors of xi which must precede xi in the ordering  therefore it is always the case that
sc xi     ch xi    meaning that hxi    is a function of its single child  based on that  we
expect the algorithm to perform better the more similar the cui network is to a tree 
    cui tree for optimization of cai maps
the optimization procedure for cui trees is particularly attractive due to the relatively
low amount of preference information it requires  in some cases the comparison can be
done directly  without even having the data that comprises the utility function  aside
from the direct benefit to cui networks  we are interested in applying this structure to the
optimization of cai maps  in some domains a cai map is a simple and effective way to
decompose the utility function  however  the optimization of cai maps is exponential in
the size of its tree width  and it requires the full data in terms of utility functions over its
maximal cliques  if a cai map happens to have a simple structure  such as a tree  or the
cp condition  faster optimization algorithms can be used  however  it could be the case
that a cai map is not a tree  but more subtle cui conditions might exist which cannot be
captured by cai conditions  if enough such conditions could be detected to turn the cai
map into a cui tree  or close enough to a tree   we could take advantage of our simple
optimization procedure 
   

fiengel   wellman

 a 

 b 

 c 

figure     a  a cai map containing a cycle   b  enhanced cai map  expressing cui of
 a  d  f   in b   c  an equivalent cui tree 
definition     let g    v  e  be a cai map  an enhanced cai map is a directed graph
g     v  a   in which a pair of arcs  u  v    v  u   a implies the same dependency as an
edge  u  v   e  and in addition for any node x  cui s     x   in x    x   in x  denoting
the set of nodes y for which  y  x   a   we call the pair of arcs  u  v    v  u   a a hard
link and an arc  u  v   a s t   v  u  
  a a weak link 
for any cai map  an enhanced cai map can be generated by replacing each edge  u  v 
with the arcs  u  v  and  v  u   this does not require any additional cui conditions because
these are entailed by the cai map  however  if additional cui conditions as above can be
detected  we might be able to remove one  or both  of the directions  figure  a shows a
cai map which contains a cycle  if we could detect that cui  a  d  f    b   we could remove
the direction  a  b  and get the enhanced cai map in figure  b  the set of cui conditions
implied by the enhanced cai map can now be expressed by a cui tree  as in figure  c 
proposition    consider an enhanced cai map g  let  be an ordering on the nodes of
g  and g  a dag which is the result of removing all arcs  u  v  whose direction does not
agree with   if for any such removed arc  v is an ancestor of u in g    then g  is a cui
network 
for hard links  the removal of  u  v  leaves v as a parent of u  so the condition trivially
holds  to obtain a cui tree  the key is therefore to find a variable ordering under which
enough weak links can be removed to turn the graph into a tree  maintaining the condition of
proposition    for a large number of variables  an exhaustive search over variable orderings
may not be feasible  however in many cases it can be effectively constrained  restricting
the number of orderings that we need to consider  for example  in order to break the cycle
in figure  b it is clear that the weak link  b  a  must be implied by the ordering  so that a
could be an ancestor of b  the only way for this to happen  given the existing hard links  
is that c is a parent of b  d is a parent of c  and a a parent of d 
proposition     let c    y            yk   be a cycle in an enhanced cai map g  assume that
c contains exactly one weak link   yi   yi     for some i   k  or  yk   y     let  be a variable
   

ficui networks

ordering that does not agree with the order of the path p    yi     yi             yk   y            yi   
then any cui network constructed from g and   by proposition     is not a tree 
therefore any cycle that contains one weak link leads to a constraint on the variable
ordering  cycles with more than one weak link also lead to constraints  if c above has
another weak link  yj   yj      one of the two links must be removed  and the ordering must
agree with either the path p above or the path p     yj     yj             yk   y            yj    assuming
wlog that j   i  the paths  yi             yj   and  yj             yi   are required for both p and
p    and therefore can be used as constraints  similarly we can find the intersection of the
paths implied by any number of weak links in a cycle 
sometimes the constraint set can lead to an immediate contradiction  and in such case
search is redundant  if it does not  it can significantly reduce the search space  however 
the major bottleneck in preference handling is usually elicitation  rather than computation 
therefore  given that a good variable ordering may lead to the reduction of the optimization
problem to a simpler  qualitative task  eliminating the need for a full utility elicitation  it
would be worthwhile to invest the required computation time 

   nested representation
from section     we conclude that node data can be represented by conditional utility functions depending on the node and its parents  but this may not be the best dimensionality
that can be achieved by a network  perhaps the set z   p a x  has some internal structure 
in the sense that the subgraph induced by z has maximal dimension lower than  z   in such
a case we could recursively apply cui decomposition to the conditional utility functions for
this subgraph  this approach somewhat resembles the hierarchical decomposition done for
the utility trees  keeney   raiffa        von stengel         for example  to represent f  for
the network of figure    we require the conditional utility function u  x    x     x     x     x    x    
however from the network we can see that cui x    x    x    x    x    x     hence we can decompose this conditional utility 
u  x    x     x     x     x    x      f    x    x      g    x    x   u  x    x    x     x     x     x     
we use the notation f   and g   since these are not the same as the f and g functions of the
top level decomposition 
a nested representation can be generated systematically  algorithm     by decomposing
each local function at node x  xs utility factors  whose argument set z  p a x  does not
form a clique  we do that by performing a complete cui decomposition over the subgraph
induced by z  keeping in mind that all the resulting factors depend also on x  
proposition     let g be a cui network for utility function u  s   then u  s  can be
represented by a set of conditional utility functions  each depending on a set of attributes
corresponding to  undirected  cliques in g 
    discussion
this result reduces the maximal dimensionality of the representation to the size of the
largest maximal clique of the cui network  for instance  applying it to the example in
   

fiengel   wellman

data  cui utility factors u  x  p a x   y    u  x  p a x   y   at each node x
   note  y   y  d y     
determine order x            xn  
for j              n do    initialization   
kj     xj    p a xj      scope of utility factors     
yj    s   kj     rest of variables     
q j   p a xj   
a j     dj     
end
for j              n do
for i              dj do    loop on factors in node j  
if qij     and kji is not a clique then
let gij be the subgraph induced by qij  
decompose uji  kji   according the cui network on gij  
foreach xr  qij do
let dr   dr      current num  of factors at xr   and denote d   dr  
adr   aij   xj    qdr   p a xr    qij  
krd   adr   xr    qdr   yrd   s   krd  
store new cui factors of xr   u  krd   yrd    u  krd   yrd   
  yrd   yrd are fixed assignments to yrd   
end
remove factors u  kji   yji     kji   yji   
end
end
end
algorithm    recursive cui decomposition  process node in reverse topological
order  outermost loop   decompose each factor stored at current node  whose parents
do not form a clique  at each such parent xr  innermost loop  store resulting new
factors  these are defined over xr   those of xr s parents that are also in p a xi    this
is qdr    and a clique adr on which the original factor depends  each time a factor is
decomposed its set q shrinks  when it is empty  k is a clique 

   

ficui networks

section   reduces dimensionality from four to three  an important implication is that we
can somewhat relax the requirement to find very large cui sets  if some variables end up
with many parents  we can reduce dimensionality using this technique  as the example
below illustrates  this technique aggregates lower order cui conditions to a more effective
decomposition 
the procedure may generate a complex functional form  decomposing a function multiple
times before the factors become restricted to a clique  the ultimate number of factors
required to represent u  s  is exponential in the number of such nesting levels  however 
each decomposition is based on a cui network on a subgraph  and therefore typically
reduces the number of entries that are maintained 
we expect the typical application of this technique to be for composition rather than
decomposition  we execute algorithm   without the actual data  resulting in a list of factors
per node  that are conditional utility functions over cliques of the graph   that means
that for elicitation purposes we can restrict attention to conditional utility functions over
maximal cliques  once these are obtained  we have sufficient data for all the factors  we can
then recover the original  more convenient cui network representation of the function and
store it as such  more on that in the example below   therefore  the effective dimensionality
for elicitation is that of the maximal cliques  the storage for efficient usage requires the
potentially higher dimension of the original cui network  but typically this is less of a
concern 
with this result and proposition    cui networks are shown to always achieve weakly
better dimensionality than cai maps  since both representations reduce the dimensionality
to the size of the maximal clique 
    example
we illustrate this result using a simple example  consider a domain with four attributes
 a  b  c  d   and the following cui conditions 
cui b  c   cui c  b   cui d  a 
the cui network corresponding to the variable ordering a  b  c  d is depicted in figure   
since the cui sets are small  a single variable each   for any variable ordering there must
be a node with two parents  meaning dimensionality of three  the nesting operation below
combines these lower order conditions to reduce the dimensionality to two 
initially  the utility function is represented using the conditional utility functions listed
according to their corresponding nodes in the column level   in table    to remove the
three dimensional factors  we need to decompose the functions of node a according to the
cui network on  b  c   which contains no arcs  this proceeds as follows 
u  a  b  c  d     
fb   a  c    gb   a  c u  a  b  c    d      fb   a  c    gb   a  c  fc   a  b    gc   a  b u  a  b    c    d    
u  a  b  c  d     
fb   a  c    gb   a  c u  abc  d      fb   a  c    gb   a  c  fc   a  b    gc   a  b u  a  b    c    d    
   

fiengel   wellman

figure    nesting example

the resulting functions are fbi  a  c   gbi  a  c   fci  a  b   gci  a  b   i         the functions
and gbi  a  c  can be represented using the conditional utility functions u  a  b    c  di  
and u  a  b    c  di    and similarly the other two functions  we can delete the factors of a 
u  a  b  c  di    and add the new lower dimensional factors as a second column to as parents
b and c  though we had to multiply the number of factors we store by four  all the new
factors are conditional utility functions over subdomains of the  deleted  higher dimensional
factors  the algorithm continues to node b  and loops over its six factors  if there are factors
that are defined over a set of parents of b that are not a clique it decomposes them and store
the new factors in the next table column  in case a factor from column level   could be
decomposed  we would add a level   column to store the result  in our simple example
no further decomposition is possible 
fbi  a  c 

attr
a
b
c
d

level    cui net 
u  a  b  c  d     u  a  b  c  d   
u  a    b  c    d  
u  a    b  c    d 
u  a    b    c  d  
u  a    b    c  d 
u  a    b    c    d 

level  
u  a  b  c    d    
u  a  b  c    d    
u  a  b    c  d    
u  a  b    c  d    

u  a  b  c    d   
u  a  b  c    d   
u  a  b    c  d   
u  a  b    c  d   

table    nested cui decomposition
the reverse direction mentioned above is done as follows  we run algorithm   without
any data  resulting in a table such as table    without the actual utility values   we then
elicit the data for the non deleted factors  all are limited to maximal cliques   next  we
recover the more convenient level   cui representation using the table  by computing
each deleted factor  going from rightmost columns to the left  as a function of the factors
stored at its parents 

   conclusions
we present a graphical representation for multiattribute utility functions  based on conditional utility independence  cui networks provide a potentially compact representation of
the multiattribute utility function  via functional decomposition to lower dimensional functions that depend on a node and its parents  cui is a weaker independence condition than
   

ficui networks

those previously employed as a basis for graphical utility representations  allowing common
patterns of complementarity and substitutivity relations disallowed by additive models 
we proposed techniques to obtain and verify structural information  and use it to construct the network and elicit the numeric data  in addition  we developed an optimization
algorithm that performs particularly well for the special case of cui trees  in some cases it
can also be leveraged for efficient optimization of cai maps  finally  we show how functions
can be further decomposed over the set of maximal cliques of the cui network  with this
technique  cui networks can achieve the same dimensionality of graphical models based on
cai and gai decompositions  yet with more broadly applicable independence conditions 

acknowledgments
a preliminary version of this paper was published in the proceedings of aaai     the
work was supported in part by nsf grant iis          and the stiet program under nsf
igert grant          we are grateful to the thorough work of the anonymous reviewers 
whose suggestions provided valued help in finalizing this paper 

appendix a  proofs
a   lemma  
proof  let z   s    x  y   and c   s    a  b   we simply apply the two independence
conditions consequentially  and we can define f  g such that 
u  s    u  xy z    f  y z    g y z uy  s   y     f  y z    g y z  f     bc    y  
  g     bc    y  uy b  s    y b      f zby c    g zby c u  s    y b   
since z y b c   s   ax   the last decomposition is equivalent to the decomposition
    for the condition cui a  x   y  b  
a   proposition  
proof  a cai condition is stronger than a cui condition  in that cai x  y   cui x  y  
cui y  x   to be a cui network  for each node xi it must be the case that all other nodes
are cui of it given its parents and descendants  this is obvious since xi is cai of all other
nodes given its parents and children 
a   lemma  
proof  to determine hxj     any y  sc xj   needs to be determined  if y   xi    sc xi  
we are done  if not its own scope is covered and therefore recursively determined by the
assignment to  xi    sc xi   
a   lemma  
we first introduce two additional lemmas 
lemma     ch  xi    co xi       xi    sc xi    co xi   
   

fiengel   wellman

proof  let xj   xi    co xi    and y  ch xj    if xj   xi the proof is immediate because
ch xi    sc xi    assume xj  co xi    we know from definition    that ch xj   
sc xj      xi    sc xi    co xi     and this proves the lemma 
lemma     an  xi    co xi     co xi  
proof  let xj  an xi    clearly j   i  therefore xj 
  sc xi     let xj   sc xj    then
j    j and there is an undirected path from xj  to xj   not blocked by sc xj    if j   i  then
xj   sc xi   xi   because it has an unblocked path to xj  and from there to xi    otherwise 
let xj   sc xj     and apply the same argument to xj    we continue until xjk such that
xy  sc xjk    y   i at which point xy  sc xi     xi   by the path xy   xjk           xj    xj   xi
and the recursion halts  note that it includes empty scopes   proving that xj  co xi   
it is left to prove that an co xi     co xi    let xj  co xi    y  an xj    applying
the first part of the proof on xj   we get that y  co xj    from definition of co xj    we get
y   j and w  sc y   either w   xj   w  sc xj   or w  co xj    to show that y  co xi   
we need to prove for each of the cases that w   xi    sc xi    co xi   
   if w   xj immediately w  co xi   
   if w  sc xj    from xj  co xi   we get that either w   xi   w  sc xi   or w  co xi   
   if w  co xj    we repeat the argument recursively z  sc w   note that z precedes
w therefore the recursion will halt at some point 

lemma    let x    xi    co xi    from lemma     x has no external ancestors  from
lemma     all external children of x are in sc xi    therefore s    x  an x   ch x    
s    x  sc xi    and the result is immediate from proposition   
a   proposition  
proof  let x be a node in g    let y   s    x  in x   in g and y   s    x  p a x   dn x  
in g    by definition of g  we know that cai y  x   so also cui y  x   let y 
  y  y    x  so
 
y  in x  in g   if y  y   then y 
  p a x    in x  in g   then the arc  y  x  was removed 
meaning that y  dn x   it therefore must be the case that y 
  y   therefore y  y hence
cui y   x  
a   proposition   
proof  for g to become a cui tree  for each cycle at least one weak link must be removed 
since  yi   yi     is the only weak link for c  it must be removed  by proposition    the
variable ordering must ensure that yi   is an ancestor of yi   this can be done through the
path according to the order of p  or there might be another path from yi   to yi   let p 
be such path  then the combination of p  and p is another cycle c    which therefore must
be broken  since p comprises of strong links  there must be at least one weak link  u  v  in
p    for  u  v  to be removed  v must be an ancestor of u  this can be done through the
path in the cycle c    and this path includes p  or through another path if such exists  for
which we can repeat the argument  at each stage we get a larger cycle ci   and a larger path
   

ficui networks

pi  pi    therefore at some point there will be just one path pi that must be guaranteed
by the variable ordering  and this path includes p 
a   proposition   
proof  we show that algorithm   leads to a functional decomposition over cliques  the
outer loop in the algorithm maintains the following iteration properties 
   a  aij   qij  p a a 
   uij is defined over kji
   aij  xj is a clique
these properties hold trivially after initialization  assume they are valid for all factors
stored in the network until outer iteration j and inner iteration i  we next show that they
remain valid for each factor urd that is created in iteration j  i 
   by definition adr   aij  xj   from previous iteration and definition of qdr   a 
aij   qdr  qij  p a a   from definitions of qij and qdr we get p a xj    qij  qdr   and
together it yields the result 
   urd is a factor in the cui decomposition of uji  kji   over gij   its scope contains   i 
the nodes that are not affected by the last cui decomposition  i e  in kji   qij  
aij  xj   adr    ii  its node xr   and  iii  the parents p a xr   which were not fixed
in uji  i e  p a xr  kji     we know kji   aij  xj  qij   and xj 
  p a xr    because
i
xr  p a xj     and also p a xr    aj     using a similar argument and property    
therefore  p a xr    kji    qij   and from  i   ii   iii  we get that krd   adr  xr  qdr  
   adr is a clique by its definition and the same property of previous iteration  xr  qij  
therefore from property   of previous iteration xr  p a a  for each a  aij   also xr 
qij  p a xj    the last containment is immediate from definition of qij    therefore xr
is a parent of all members of adr   and as a result adr  xr is a clique 
by the iteration properties  either krd is a clique  or qdr is non empty and decomposition
can be applied once we reach node r in the outer loop  at the end of the process all factors
which are not defined on cliques where removed  all the factors that remained are defined
on cliques  u  s  can be still represented by the new set of factors since we only applied
valid decompositions to its factors 

references
abbas  a          attribute dominance utility  decision analysis            
bacchus  f     grove  a          graphical models for preference and utility  in eleventh
conference on uncertainty in artificial intelligence  pp       montreal 
boutilier  c   bacchus  f     brafman  r  i          ucp networks  a directed graphical
representation of conditional utilities  in seventeenth conference on uncertainty in
artificial intelligence  pp        seattle 
   

fiengel   wellman

boutilier  c   brafman  r  i   hoos  h  h     poole  d          reasoning with conditional ceteris paribus preference statements  in fifteenth conference on uncertainty
in artificial intelligence  pp        stockholm 
debreu  g          topological methods in cardinal utility theory  in arrow  k   karlin  s  
  suppes  p   eds    mathematical methods in the social sciences  stanford university
press 
dyer  j  s     sarin  r  k          measurable multiattribute value functions  operations
research             
fishburn  p  c          independence in utility theory with whole product sets  operations
research           
fishburn  p  c          interdependence and additivity in multivariate  unidimensional
expected utility theory  international economic review            
fishburn  p  c          nondecomposable conjoint measurement for bisymmetric structures 
journal of mathematical psychology           
fuhrken  g     richter  m  k          polynomial utility  economic theory                
gonzales  c     perny  p          gai networks for utility elicitation  in ninth international
conference on principles of knowledge representation and reasoning  pp         
whistler  bc  canada 
gorman  w  m          the structure of utility functions  review of economic studies 
           
keeney  r  l     raiffa  h          decisions with multiple objectives  preferences and
value tradeoffs  wiley 
krantz  d  h   luce  r  d   suppes  p     tversky  a          foundations of measurement 
vol     academic press  new york 
la mura  p     shoham  y          expected utility networks  in fifteenth conference on
uncertainty in artificial intelligence  pp          stockholm 
nilsson  d          an efficient algorithm for finding the m most probable configurations
in probabilistic expert systems  statistics and computing                
pearl  j          probabilistic reasoning in intelligent systems  morgan kaufmann 
pearl  j     paz  a          graphoids  a graph based logic for reasoning about relevance
relations  in du boulay  b   ed    advances in artificial intelligence ii  north holland 
new york 
tatman  j  a     shachter  r  d          dynamic programming and influence diagrams  
           
von stengel  b          decomposition of multiattribute expected utility functions  annals
of operations research             
wellman  m  p     doyle  j          modular utility representation for decision theoretic
planning  in first international conference on artificial intelligence planning systems  pp          college park  md 

   

fi