journal artificial intelligence research             

submitted        published      

optimal any angle pathfinding practice
daniel harabor

daniel harabor nicta com au

university melbourne
national ict australia  victoria laboratory
    batman st  melbourne        australia

alban grastien

alban grastien nicta com au

national ict australia  canberra laboratory
  london circuit  canberra        australia

dindar oz

dindar oz yasar edu tr

yasar university
bornova  izmir         turkey

vural aksakalli

aksakalli sehir edu tr

istanbul sehir university
altunizade  istanbul         turkey

abstract
any angle pathfinding fundamental problem robotics computer games 
goal find shortest path pair points grid map
path artificially constrained points grid  prior research focused
approximate online solutions  number exact methods exist require
super linear space pre processing time  study  describe anya  new
optimal any angle pathfinding algorithm  works find approximate any angle
paths searching individual points grid  anya finds optimal paths
searching sets states represented intervals  interval identified on thefly  interval anya selects single representative point uses compute
admissible cost estimate entire set  anya always returns optimal path
one exists  moreover without offline pre processing introduction
additional memory overheads  range empirical comparisons show anya
competitive several recent  sub optimal  online pre processing based techniques
order magnitude faster common benchmark algorithm 
grid based implementation a  

   introduction
any angle pathfinding common navigation problem robotics computer games 
takes input pair points uniform two dimensional grid asks shortest
path artificially constrained points grid  anyangle paths desirable compute typically shorter grid constrained
counterparts following trajectory give appearance realism
intelligence  e g  player computer game  despite apparent simplicity anyc
    
ai access foundation  rights reserved 

fiharabor  grastien  oz   aksakalli

angle pathfinding surprisingly challenging  far many successful popular methods
proposed  yet involve trade offs kind  begin
examples highlight  broad strokes  main research trends limitations 
date 
communities artificial intelligence game development any angle
pathfinding problem often solved efficiently using technique known string pulling 
idea compute grid optimal path smooth result  either part
post processing step  e g  pinter        botea  muller    schaeffer        interleaving
string pulling online search  e g  ferguson   stentz        nash  daniel  koenig   
felner         regardless particular approach  string pulling techniques suffer
disadvantages   i  require computation finding path
and   ii  yield approximately shortest paths 
communities robotics computational geometry related general problem well studied  finding euclidean shortest paths polygonal
obstacles plane  visibility graphs  lozano perez   wesley        continuous dijkstra paradigm  mitchell  mount    papadimitriou        among best known
influential techniques originate line research  even though
methods optimal efficient practice nevertheless suffer
often undesirable properties   i  search graph  must pre computed offline
pre processing step   ii  map changes point search graph invalidated
must recomputed  usually scratch 
date  clear exists any angle pathfinding algorithm simultaneously online  optimal practically efficient  i e  least fast practice
grid based pathfinding using a  search   manuscript  present new work
answers open question affirmative introducing new any angle pathfinding
algorithm called anya  approach bears similarity existing works
literature  notably algorithms based continuous dijkstra paradigm 
rough overview 
methods search individual nodes grid  anya searches
contiguous sets states form intervals 
anya interval single representative point used derive admissible cost estimate  i e f  value  points set 
progress search process anya projects interval  one row grid
onto another  target reached 
anya always finds optimal any angle path  one exists  addition anya
rely pre computation introduce memory overheads  in form
auxiliary data structures  beyond required maintain open closed list 
theoretical description algorithm previously appeared literature  harabor
  grastien         study extend work several ways   i  give
   distinguish search graph input grid map  though contexts terms
coincide exactly true general  particular search graph may subset input
grid may related entirely separate data structure 

  

fioptimal any angle pathfinding practice

visible

visible

non visible

 

 

 

 

 

 

 

 
 

 

 

non visible

 
 

 
 

 

 

 

 

 

 
 

 

 

figure    examples visible non visible pairs points 

detailed conceptual description anya algorithm provide extended theoretical
argument optimality completeness   ii  discuss practical considerations
arise implementing algorithm give technical description one possible
efficient implementation   iii  make detailed empirical comparisons showing
anya competitive range recent sub optimal techniques literature 
including based offline pre processing  one order magnitude better
benchmark grid based implementation a    iv  discuss range possible
extensions improving current results 

   optimal any angle pathfinding problem
grid planar subdivision consisting w h square cells  cell open set
interior points traversable non traversable  vertices associated
cell called discrete points grid  edges grid interpreted
open intervals intermediate points  one representing transition two
discrete points  type point p    x  y  unique coordinate x     w  
      h   discrete points limited subset integer x values 
discrete intermediate point traversable adjacent least one traversable
cell  otherwise non traversable  discrete point common exactly four
adjacent cells called intersection  intersection three adjacent cells
traversable one called corner  two points visible one another
connected straight line path  i e  sequence adjacent points  either
intermediate discrete  not   i  pass non traversable point
 ii  pass intersection formed two diagonally adjacent non traversable cells 
figure   shows examples help better illustrate idea 
any angle path sequence points hp            pk pi visible pi 
pi     length cumulative distance every successive
pair points
p
 
 
 
 
d p    p          d pk    pk    function d p    x  y   p    x         x x       y     
uniform euclidean distance metric  say pi turning point segments
 pi    pi    pi   pi     form angle equal         finally  any angle pathfinding
problem one requires input pair discrete points  t  asks anyangle path connecting them  point designates source  equivalently  start  location
   well known turning points optimal any angle paths corner points  e g  shown
mitchell et al         

  

fiharabor  grastien  oz   aksakalli

point designates target  equivalently  goal  location  path optimal
exists alternative any angle path strictly shorter 
figure   provides example optimal any angle pathfinding problem 
seen source  target obstacles discrete positions however path
need follow grid  notice trajectory path appears much
realistic alternative restricted turning modulo    deg    deg 
 
 
 
 




 
 
 
 
 
 
 
 
 
 
figure    example any angle pathfinding problem together solution 

   overview anya
consider any angle instance shown figure    example optimal path
needs first head towards corner point n change direction
toward target t  one possible approach solving problem involves computing
visibility graph  i e   identifying pairs corners visible one another 
visible start target locations  searching path
graph  main drawback case visibility graph quite large  up
quadratic size grid  expensive compute 
alternative approach  avoids overheads  solve problem online 
unfortunately online search methods generally consider discrete points grid
immediate neighbours  example  expanding point common
generate neighbours                         example
figure   a 

f  value
three neighbours is  respectively                               
              using euclidean distance
heuristic   comparison optimal


any angle path cost               immediately see heuristic
hand satisfy one essential properties a  search  f  value
node always underestimate actual distance goal  without
property a  guaranteed optimal 
issue described comes fact optimal path go
points                         instead optimal path crosses row   point y   
part search space  ensure optimality consider points
y  rather discrete points grid  however many
points including e g   points y    leading          apriori seems reasonable
candidate expansion  appear optimal path 
  

fioptimal any angle pathfinding practice

 
 



 
n

 
 

y 

y  

 

y 


 
 

 

 

 

 

 

 

figure    pathfinding n  online algorithms a  theta 
expand discrete points grid never intermediate points yi  
general need consider potential yi points defined fraction wh
h             h  w             w    set quadratic n   min w  h   understand why  consider farey sequence order n  sequence  ordered increasing
number  rational numbers     written fraction whose
denominator integer lower n  instance  farey sequence order n    
is                                                               notice           explains length
sequence n n         still asymptotic cardinality sequence known
 
 n
 graham  knuth    patashnik        ch     
 
since quadratic behaviour farey sequence makes impractical enumerate
potential yi points propose consider  instead individual points  set points
appear together part contiguous interval grid  example figure  
would consider points lying                time
part single a  search node  framework need to 
define formally anya search node 
define set successors search node 
define compute f  value search node 
prove optimality returned path 
terminate search path available 
ensure anya algorithm efficient practice 
  

fiharabor  grastien  oz   aksakalli

   algorithm description
section presents detail anya algorithm properties  since anya
variant a  first present search space  search nodes  successors node
evaluation function used rank nodes search  give pseudo code
description algorithm discuss properties  improvements make anya
efficient practice presented next section 
    anya search nodes
define notion interval  core anya 
definition   grid interval set contiguous pairwise visible points drawn
discrete row grid  interval defined terms endpoints b 
possible exception b  interval contains intermediate discrete
non corner points 
definition  points interval share position  positive
integer  moreover  x position points interval  including endpoints
b  rational number    use normal parentheses     indicate
interval endpoint open square brackets     indicate interval endpoint
closed  example  interval    a  b  open  i e  include 
closed  i e  include  b 
identifying intervals simple  row grid naturally divided maximally contiguous sets traversable non traversable points  traversable set forms
tentative interval split  repeatedly necessary  corner points
end points intervals  intervals identified operation called projection  discuss procedure next sub section  note intervals
produced way projection non discrete non corner endpoints 
significant advantage anya construct intervals on the fly  allows
us start answering queries immediately discrete start target pair  similar
algorithms  e g  continuous dijkstra  mitchell et al          require pre processing step
queries answered single fixed start point 
definition   search node  i  r  tuple r   point called root
interval point p visible r  represent start node itself 
set    s  assume r located plane visible s  cost r
case zero 
a  search node  together parents  traditionally represents single path
defined travelling straight line points search nodes root
current node  anya search node similarly defines paths obtained visiting
roots nodes ending interval current node  node therefore
represents many paths root search node always last  common  turning
   per problem definition  every point  x  y  appearing optimal any angle path belongs
farey sequence points rational 

  

fioptimal any angle pathfinding practice

point paths  always either root parent node one end
points parent interval 
besides start node  treat special case  two types
search nodes  cone nodes flat nodes  example cone node shown figure   
nodes characterised fact root r row
associated interval i  notice example although interval    a  b  maximal 
endpoints obstacles  corners indeed even discrete points
grid  here left endpoint          right endpoint b            examples
flat nodes shown figure    two nodes are    a    b     r    a    b     r   flat
nodes characterised fact root r row interval i 
notice examples given a    r  resp  a    b    excluded first  resp 
second  interval  semantics every search node current position located
somewhere interval reach point any angle path whose
recent turning point r 
 

 


 

b

 

 

 

 

 

 

r   a 

b    a 

b 

 

r

 

 
 

 

 

 

 

 

 

figure    example cone search node 

 

 

 

 

 

 

 

figure    example two flat search nodes 

    searching anya  successors
successors search node n identified computing intervals sets traversable
points  row grid current node n rows immediately
adjacent  want guarantee point set reached root
n via local path taut  taut simply means pull endpoints
path cannot make shorter  provide formal definition successor
discuss definition applied practice 
definition   successor search node  i  r  search node  i     r   
   points p      exists point p local path hr  p  p  taut 
   r  last common point shared paths hr  p  p  i 
     maximal according points definition search node 
  

fiharabor  grastien  oz   aksakalli

first requirement  tautness  implies successor p    reached
root current node r path locally optimal  use property
next subsection show anya always finds globally optimal path one exists
all  third property  requiring successor interval maximal 
exists purpose practical efficiency  simply put  want arbitrarily
small arbitrarily many successors  instead  make successor interval
large possible  second property two interpretations  r    r say
successor node observable  similarly r    p say successor
non observable  explore ideas turn 
 
v 

 

v 

u 

u 

v 
r 



 

 b
u 

 
 

r

 
 

 

 

 

 

 

 

 

figure    successors cone search node  n     a  b   r   five successors    v    v     r    v    v     r  observable   r    u     r       v    u     r    
  u    u     r    not 

 
 


 
 

b

c



e

 
 
 

 

 

 

 

 

 

figure    successors flat search node  n     a  b   a   two successors    b  c   a 
observable   d  e   b  not 
  

fioptimal any angle pathfinding practice

algorithm   computing successor set
   function successors n    i  r  
  takes input current node
  
n start node
  
return generate start successors i    s  
  
end
  
successors
  
n flat node
  
p endpoint farthest r
  successor interval starts p
  
successors generate flat successors p  r 
  observable successors
  
p turning point taut local path beginning r
   
successors successors generate cone successors p  p  r    non observable successors
   
end
   
else
  node flat  must cone
   
left endpoint
   
b right endpoint
   
successors generate cone successors a  b  r 
  observable successors
   
turning point taut local path beginning r
   
successors successors generate flat successors a  r 
  non observable
   
successors successors generate cone successors a  a  r 
  non observable
   
end
   
b turning point taut local path beginning r
   
successors successors generate flat successors b  r 
  non observable
   
successors successors generate cone successors b  b  r 
  non observable
   
end
   
end
    end function

observable successor characterised fact points p    visible
current root point r  case last common point shared local paths
form hr  p  p  r  observable successors computed projecting current interval
next row  projection identifies maximal interval imax split
internal corner point point  interval produced split operation leads
new observable successor  successors share root point original
 parent  node  process illustrated figure   interval    a  b  projected
onto next row  projection identifies maximal observable interval imax    v    v   
subsequently split create two observable successors    v    v     r    v    v     r  
comparison  non observable successor characterised fact points
 
p   visible current root r  case local paths form
hr  p  p  must pass  visibility obstructing  corner point whose identity r     p 
figure   illustrates process computing non observable successors  first 
non observable points right current interval    a  b   construct single
flat successor      b  u    root r     b  non observable points exist
left current interval local path point  from r a 
taut  non observable successors found rows grid adjacent
current interval i  projecting corner endpoint b onto next row grid
construct two non observable successors    v    u     b    u    u     b  
algorithm   give overview procedure generates successor set
search node  overview sub functions appearing algorithm   given
  

fiharabor  grastien  oz   aksakalli

appendix  implementation straightforward  requiring nothing complicated
grid scanning operations linear projections 
important note stage anya perform visibility checks
generation successor nodes  visibility checks heart many contemporary online algorithms  including theta   nash   koenig         must determine
whether successor visible node  e g  grand parent node  
one hand visibility checks help theta  et al  find shorter paths expand fewer nodes
traditional a  search  hand  computational overhead introduced
checks means run times often larger a   comparison anya
projects interval i  one row grid next  process involves local
reasoning  particular determine projection imax valid  invalid
needs clipped simply testing traversability cells located above 
left right current interval proposed imax   elimination
visibility checks important practical advantage anya  see section   
anya finds shorter paths online methods theta  et al 
usually much efficient terms running time 
illustrate algorithm   using previous examples  consider flat node   a  b   a 
figure    point p line   set b observable flat successor   b  c   a 
generated line    furthermore since b turning point  line     interval
imax    d  e  considered  since imax contains interior corner points split
single non observable cone successor  i   imax   b  generated  line     
next  consider cone node   a  b   r  figure    first generate observable
successors  line      interval  a  b  projected maximal interval imax    v    v   
identified  imax split internal corner point v  leading two observable cone
successor nodes   i     v    v     r   i     v    v     r   notice line of sight visibility
check required here  next since b turning point look non observable successors
well  lines         flat successor   b  u     b  generated per previous example 
meanwhile maximal  non observable  cone interval imax    v    u    identified 
interval split internal corner point u  resulting two non observable cone
successor nodes   i     v    u     b   i     u    u     b  
algorithm   treats start node  lines      special case root point
located grid  successors start node  i  non observable intervals
root  ii  found left right start location  row
immediately start location row immediately below 
    evaluating anya search node
search procedure anya  similarly a   always expands promising node found far  therefore necessary evaluate root interval pair 
evaluation corresponds estimate f minimal length path
source target current interval  optimality condition a 
estimate optimistic  i e  never larger actual optimal path length  
classical a  search node n corresponds single point p grid value
f  n  computed sum g p   length path source p  h p  
 under estimation length shortest path p target 
  

fioptimal any angle pathfinding practice

search node n    i  r  represents set points f value minimum f value
points node 
f  n    inf f  s  r  p  t 
pi

f  s  r  p  t   under estimate shortest path r p 
noted that  set points p continuous potentially open 
minimum replaced infimum  since points interval visible r 
value broken follows 
f  s  r  p  t    g r    d r  p    h p 
d r  p  distance points r p 
finding point interval minimises f value may seem hard problem
since interval contains large number points want avoid generating
them  however straight line distance heuristic h  h p    d p  t   makes easy isolate
point p minimises f value  thanks two simple geometric observations 
precise heuristics available could make harder find point p 
lemma   let r two points s t  interval row row
rows r t  point p infimal f  value point
closest intersection straight line path ht  ri row i 
line r intersects interval point p intersection 
otherwise point p one endpoints interval  event precondition lemma   satisfied  possible replace mirrored version t 
thus satisfy precondition  case described lemma   
lemma   mirrored point t  target interval d p  t    d p  t   
p i 
lemma   trivial geometrical result  lemmas illustrated figure   
    search procedure
search procedure employed anya presented algorithm    follows pattern
a  uses priority queue  open  stores yet to be expanded search nodes
ordered f value  node stores pointer parent  step search
anya extracts best node open checks corresponding interval contains
target  event target found  line    returned path sequence
root points constructed following back pointers  current node start
location  target found current node expanded successors
added priority queue  line     successors may considered redundant
safely discarded without insertion priority queue  line     discuss
aspect algorithm section    suffices know successors
optimal path  expansion process continues target found
open list exhausted  case algorithm returns failure  line     
next sections prove fundamental properties algorithm 
correctness  optimality completeness 
  

fiharabor  grastien  oz   aksakalli

 

t 
t  

t 

 

t 

 



b

 

t 

 
 

 

 

r

 

 

 

 

figure    illustration lemmas      evaluate node n     a  b   r  
points t  t   correspond case row target intersects interval
i  t  t  not  t  mirrored target t   must used 

   correctness optimality
section prove anya correct always finds optimal path  particular
show  i  optimal path appears search space   ii  target
expanded found optimal path   iii  node search space
reached finite number steps  topics termination completeness
discussed section   
begin analysis recalling search node n    i  r  represents set potential
paths  from r r point p i   following semantics say
n search node path r intersects  
lemma   n    i  r  search node optimal path then  either n contains
target n least one successor n  search node  
proof  start node  n start node    s  r located grid  additionally  n search node  hypothesis   algorithm    line    scans traversable
algorithm   anya
  
  
  
  
  
  
  
  
  
   
   
   
   
   

input  grid  source location s  target location
open   i    s   r    
open empty
 i  r  pop open 

return path to i 
end
 i     r    successors i  r 
prune i     r   
open open   i     r    
end
end
end
return null

   

  start node root r  located grid

  successor pruning

fioptimal any angle pathfinding practice

points grid visible adjacent s  points located
left right located rows immediately immediately
row s  algorithm   assigns points interval    
associated successor node root r    s  every optimal path must pass
   s  traversable points reached without
passing interval associated successor s  sufficient satisfy
lemma 
nodes  n arbitrary node    if successors
done   definition r p  apriori unknown  intersection
interval i  two possibilities consider  depending whether
p turning point not  show cases successor n whose
interval   intersects   sufficient satisfy lemma 
case   p turning point  algorithm    lines       scans points
adjacent  straight line  visible r i  point assigned
successor observable interval   root point r  thus least one
successors n intersects every straight line path r p means
least one successor n intersects  
case   p turning point  case p must corner endpoint i  otherwise
taut thus cannot optimal  algorithm    lines                 scans
points adjacent reachable r p taut local path 
points located row p row immediately adjacent 
point assigned successor non observable interval   root
r   p  process exhaustive points reachable taut local path 
r though p  must assigned interval  thus must intersect least one
successors n 

corollary   path source target  open list always
contains search node optimal path  or node currently processed  
proof  induction 
base case  initial search node node path s 
inductive case  assume open list contains search node optimal path 
node removed expanded  node contain
target know lemma one successor generated search node
optimal path  therefore new search node optimal path inserted
open list 


lemma   first expanded node contains target corresponds one optimal
path t 
   

fiharabor  grastien  oz   aksakalli

proof  sketch  first notice f  value node indeed minimal value
nodes interval  means f estimate    actual cost
target  second notice that  given search node  i  r  successor  i     r    
point p      f  value p  greater equal f  value point
p   p   r  r     r  p intersection  r  p    otherwise   f function
therefore monotonically increasing  finally  f function search node  i  r 
length path i  hence f function nodes representing sub optimal
path eventually exceed optimal path distance  f function nodes
representing optimal path always remain value 


lemma   target reachable anya eventually expand node whose interval
includes target 
proof  contradiction  assume anya expand node whose interval includes
target  lemma   know failure expand node means anya
expand infinitely many nodes  shall prove implies f value
nodes unbounded and  therefore  target reachable 
search nodes  i     r     interval   different row parent
 i  r   therefore  nodes  value g p    larger value g p    more 
happen node flat  bounded number
successive flat nodes   hence infinite sequence successive anya nodes infinite length  finally anya node bounded number successors  meaning
infinite number expansions generate infinite number successive nodes 

   completeness termination
specified policy anya detect nodes
previously expanded  context optimal a  search policy essential
prevent cyclical re expansion ensure algorithm eventually terminates 
even path start target locations  section describe
policy anya  conceptually similar a  closed list approach works
tracking best g value associated every root location  cf  every search node 
encountered search 
motivating example consider figure   root r reached via two paths
different length  example green path strictly longer red path
points reached via green path g value strictly larger
point reached via red path  figure    shows similar example green
red paths reach root point r cost  resulting two identical copies
successor node  i  r   without strategy handle root level redundancies
search process generate many unnecessary nodes slow progress goal 
moreover  exists path start target location  search may
   and  furthermore  value g p  increase significantly unobservable flat cone 

   

fioptimal any angle pathfinding practice

 

 


 
r

 

 

 

 

 

 

 

r

 

 

 



 



 
 

 

 

 

 

 

 

figure    root r reached via two paths
different lengths 

 

 

 

 

 

 

figure     root r reached via two
paths equal length 

terminate  e g  input graph contains cycles possible endlessly generate
copies states ever increasing g values  
propose following strategy avoid root level redundancies 
   store hash table visited roots best g values  call table
root history apply similar way  and indeed lieu of  traditional
a  closed list 
   generating search node n check root already root history
g value less equal current g value 
   current g value root improves value stored root history
add node open list  update g cost root  root
history list 
   alternatively  current g value root improve value stored
root history simply discard node  i e  added open  
root history implemented hash table  size o n  n number
discrete points given input map  show keeping root history list
affect correctness optimality search anya indeed complete
terminate 
lemma   anya search prunes sub optimal paths 
   similar updates nodes closed list sometimes performed context incremental 
bounded cost bounded sub optimal search  updates performed part operation called
node re opening  updates node re opening  particular root points never
directly expanded thus never appear open list  anya search comprise root interval pairs  

   

fiharabor  grastien  oz   aksakalli

proof  trivial  search node root sub optimal g value  represents
sub optimal path 


lemma   anya always terminates 
proof  anya terminate  must explore paths arbitrary length  paths
must eventually involve root twice root different in between  let
n n  two search nodes  g value associated n  must higher
g value associated n and  therefore  node n  must pruned  indeed sufficiently
long paths pruned open list eventually empty 


lemma   anya redundant node pruning keeps least one optimal path 
proof  search node n    i  r  removed exists another search node n   but
different search parents  smaller  or equal  g value kept  assume
n search node optimal path p            pk   let pi point path
intersects i  since g value n similar n    exists another path

p             p i   pi             pk similar length  path pruned 

   practical pruning strategies
a  orders nodes expansion evaluating ranking promising appear
 i e  f  values   is  however  possible alter order expansion without
compromising guarantees provided a   correctness  optimality completeness 
indeed strategy even positive effect efficiency overall search 
section discuss two practical strategies modify expansion order speed
search  enhancements applied on the fly focus reducing size
priority queue  first strategy  cul de sac pruning  identifies nodes safely
discarded cannot possibly lead goal  second strategy  intermediate
pruning  similar works avoiding explicit generation nodes
single successor  these successors expanded immediately  without added
open list  
    cul de sac pruning
one way reducing size priority queue involves early identification culde sacs  cds   cds search node successor contain target 
definition cds need added open list since expansion cannot
lead target  simple test identify cds nodes given algorithm   way
procedure is cul de sac 
early pruning cds nodes speeds search  and reduces required memory  preventing unnecessary operations open reducing size list 
   

fioptimal any angle pathfinding practice

algorithm   cul de sac intermediate node pruning 
   function is cul de sac n    i  r  
  assumes contain target point
  
imax projection n
  flat projection cone projection depending n
  
imax valid
  valid means every p imax visible r
  
return f alse
  n cannot cul de sac  least one successor interval   imax
  
end
  
return true
  n cul de sac  cannot projected successors
   end function
   function is intermediate n    i  r  
  assumes contain target point
  
n flat node
   
p endpoint furthest r
   
p turning point taut local path prefix hr  pi
   
return f alse
  n least one non observable successor  cannot intermediate
   
end
   
else
  n flat node must cone node
   
closed endpoint corner point
   
return f alse
  n least one non observable successor  cannot intermediate
   
end
   
  interval projecting r
   
  contains corner points
   
return f alse
  n one observable successors  cannot intermediate
   
end
   
end
   
return true
    end function

makes every operation faster  reference  open list implemented
binary heap add remove operation time complexity log n  n
size list  examples cds pruning  cone nodes flat nodes  illustrated
figure    figure     cases current node root shown blue
intervals red pruned 
    intermediate pruning
second pruning strategy described pushing expansion one direction
far possible long increase branching factor  practically  search
node generated guaranteed one successor  immediately
generate successor instead originally intended node  said successor
one successor process recursively applied  examples showing application
intermediate pruning given figure    cone nodes figure    flat nodes 
simple test identify intermediate nodes given algorithm   way procedure
is intermediate 
first obvious benefit intermediate pruning reduction number operations open list  however second benefit pushing expansion node
lead cul de sac  happens node added open list 
helps keep size list small operations list fast 
potential issue intermediate pruning recursive application nonpromising successor nodes could costly  in terms time  simply adding
   

fiharabor  grastien  oz   aksakalli

 

 

 

 

 

 

c


 



e f
b

r



b

c

 
r

 

 
 

 

 

 

 

 

 

 

figure     cul de sacs cone nodes 
nodes   c  d   r    e  f    r  generated 

 
 

 

 

 

 

 

figure     cul de sac flat nodes  node
  b  c   r  generated 

 
 

 

 
r

 



b

c



 

r



b

c

 

 

 

 
 
 
 
 
 
 
figure     intermediate node   a  b   r 
one successor    c  d   r   immediately generated 

 
 
 
 
 
 
 
figure     intermediate node   a  b   r 
one successor    b  c   r  immediately generated 

nodes open  discuss issue detail section      note
run time experiments application intermediate pruning net positive effect
performance search 
    discussion
introduced two different ways nodes frontier search
pruned  cul de sac pruning intermediate pruning  modify expansion order
search improve performance along single fixed path  pruning
away sterile branches skipping intermediate locations actual branching
occurs  similar strategies previously discussed literature  example culde sac pruning based set principles dead end heuristic  bjornsson  
halldorsson         although method reasons locally applied purely online 
intermediate pruning shares similarities fast expansion  sun  yeoh  chen   
   

fioptimal any angle pathfinding practice

koenig         main difference prune nodes without reference f  value 
intermediate pruning similar jump point search  harabor   grastien       
applied outside context symmetry breaking extended sets points taken
intervals rather applied individual cells grid 
anyas root history list  discussed section    regarded type pruning
enhancement  case reason generally set possible paths
could used reach given point prune away successors cannot
possibly optimal path  approach taken similar principle
 but practice  pruning redundant states real time search  sturtevant  
bulitko        
pruning search nodes anya difficult classical a  search
many modern progenitors  anya node represents set positions
rather one  consider example figure     particularly interested
interval  a  b  generated root r  r    shortest path
r                r     however obstacle put
cell labeled o  optimal path switches r                 
diagram suggests that  given target two search nodes sharing
interval  may possible prune either them 
situation described figure    uncommon practice examples
may motivate us derive new sophisticated pruning rules enhance
performance anya algorithm  must careful however weigh improved
pruning power new techniques overhead applying first
instance  example  alternative  arguably  better  approach avoiding redundant
node expansions keep interval history list addition  or instead of  root history 
method would certainly avoid problem outlined figure    many
possible intervals roots  means size hash table potentially
much larger memory accesses potentially slower  additionally  comparing intervals
equality membership requires extra time may worth investment   

   attempted similar experiment results clearly positive 

   

fiharabor  grastien  oz   aksakalli



  
  


 
 
 
 


 

b

r 

 

r 

 
 



 
 
 

 

 

 

 

 

 

 

 

 

  

  

  

  

figure     illustrating search nodes cannot trivially pruned search nodes
n      a  b   r    n      a  b   r     obstacle optimal path
goes n   red   otherwise goes n   blue  

   experimental setup
conduct experiments seven benchmark problem sets taken nathan sturtevants
well known repository  sturtevant         three benchmarks originate popular
computer games often appear literature  are  baldurs gate ii   dragon
age origins starcraft  maps benchmarks vary size  several
thousand nodes several million  remaining four benchmarks comprise grids
size         randomly placed obstacles varying densities          
table   gives overview benchmark problems  give number maps
instances per problem set distribution number node expansions required
reference algorithm  a  using octile distance heuristic    solve problems
benchmark set  latter metric gives us baseline comparing difficulty
problems appearing benchmark set 
   octile distance analogous manhattan distance generalised   connected grids 

   

fioptimal any angle pathfinding practice

benchmark

 maps

 instances

baldurs gate ii
dragon age
starcraft
random    
random    
random    
random    

  
   
  
  
  
  
  

     
      
      
     
     
     
     

nodes expanded a 
min
q  median mean
q 
max stdev
 
   
              
     
    
 
   
                             
      
                              
 
   
   
         
     
    
 
   
               
     
    
      
                 
           
       
                              

table    overview seven benchmark problems used experiments  give
number maps problem instances benchmark distribution nodes expanded
reference algorithm  a   solving problems benchmark set 

compare purely online optimal anya algorithm number state ofthe art any angle techniques  are  theta   nash et al          lazy theta   nash 
koenig    tovey         field a   uras   koenig      a  any angle variant
two level subgoal graphs  sub tl   uras   koenig      b   approaches
near optimal guaranteed return shortest path  methods theta   lazy
theta  field a  purely online  sub tl relies offline pre processing
step improve performance search  use c   implementations
algorithms  source codes made publicly available uras koenig      a  
anya implemented java executed jvm      allow comparisons across
different implementation languages use a  algorithm  hart  nilsson    raphael 
       implemented c   java  reference point    compare performance anya java implementation a  algorithms
c   implementation a   experiments performed  ghz intel core i 
machine  gb ram running osx         source code implementation
anya available https   bitbucket org dharabor pathfinding 

   results
evaluate performance using three different metrics  search time  nodes expanded
path length  results presented relative benchmark algorithm  a  
combine standard octile distance heuristic  example  comparing search
time nodes expanded  give figures relative speedup algorithm vs
a   paradigm search time speedup   means twice fast node
expansion speedup   means half many nodes expanded  comparing path
length give percent improvement path length vs a   cases higher better 

   c   implementation due uras koenig      a   java implementation own 

   

fiharabor  grastien  oz   aksakalli

benchmark
baldurs gate ii
dragon age
starcraft    
random    
random    
random    
random    

avg  node expansion speedup
anya theta  l theta  f a  sub tl
     
    
                
     
    
         
     
     
    
                
    
    
         
    
    
    
         
    
    
    
         
    
    
    
         
    

avg  path length improvement    
anya theta  l theta  f a  sub tl
           
           
     
           
           
     
           
           
     
           
           
     
           
           
     
           
           
     
           
           
     

table    compare performance algorithm terms average node expansion speedup
average path length improvement  metrics taken respect reference algorithm
 a    cases higher better 
begin table   shows average performance figures nodes expanded
path length seven benchmark problem sets  make following observations 
anya best four purely online algorithms  expanding fewer nodes
five seven benchmarks  three benchmarks drawn real computer
games anya expands one order fewer nodes  average  nearest purelyonline contemporary  pre processing based sub tl algorithm expands fewer
nodes  average 
anya  methods comparison  struggles achieve speedup
four random benchmarks  two four cases performance
reference a  algorithm  again  pre processing based sub tl algorithm
able achieve consistent  though much reduced  node expansion speedup 
anya  optimal  shows best improvement path length  however algorithms comparison close optimal  average 
next  evaluate performance terms search time  rather taking simple
average per benchmark basis  or across benchmarks  instead sort instances
according difficulty  measured number node expansions required
reference a  algorithm solve problem  approach gives holistic overview
performance reduces effect bias associated selection instances
comprise benchmark set    results analysis given figure    
make following observations 
anya often one order magnitude faster reference a  algorithm benchmarks drawn real computer games  performance mixed
four random benchmarks  evaluated methods struggling achieve
speedup 
   per table    problem instances regarded easy often outnumber instances
regarded hard  difference effect skewing performance indicators
computed simple averages instances benchmark set 

   

fioptimal any angle pathfinding practice

benchmarks

baldur s gate ii
anya
theta 
lazy theta 
field a 
subtl

speedup vs a 

   

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

  

 

 

   

   
   

   

   
nodes expanded a 

   

   

   

   

dragon age origins

   
nodes expanded a 

   

   

starcraft
anya
theta 
lazy theta 
field a 
subtl

speedup vs a 

   

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

  

 

 

   

   
   

   

   
nodes expanded a 

   

   

   

random     x        obstacles

speedup vs a 

   

   

random     x        obstacles
anya
theta 
lazy theta 
field a 
subtl

   

   
nodes expanded a 

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

   

  

 

 

   

   
   

   

   
nodes expanded a 

   

   

   

random     x        obstacles

speedup vs a 

   

   

random     x        obstacles
anya
theta 
lazy theta 
field a 
subtl

   

   
nodes expanded a 

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

   

  

 

 

   

   
   

   

   
nodes expanded a 

   

   

   

   

   
nodes expanded a 

   

   

figure     search time speedup  compare performance seven benchmarks
terms search time  figures given relative speedup vs  reference a  algorithm 
problem instances sorted difficulty using a  node expansion rank  note
plot log log 

   

fiharabor  grastien  oz   aksakalli

anya fastest four purely online methods evaluation  performance often comparable pre processing based sub tl technique and 
particularly challenging instances starcraft domain  anya non dominated    
anyas performance terms search time less value suggested
 previously evaluated  node expansion metric  reflects fact node
expansion made anya involves analysing grid  looking roots searching
intervals 
    discussion
seen anya compares well current state of the art any angle pathfinding
algorithms   almost  apples to apples comparison three contemporary purely
online search technique  theta   lazy theta  field a   seen anya usually
expands fewer nodes per search terminates one order magnitude faster 
results underscored fact anya online algorithm
guaranteed return euclidean optimal path  may surmise that  many cases
applications  anya appears preferable alternative algorithms 
next  make apples to oranges comparison purely online anya algorithm near optimal offline enhanced sub tl algorithm  seen
anya usually fast sub tl performance sometimes comparable 
moreover  anya retains advantage solving especially challenging instances drawn
real computer games  sub tl appears preferable anya cases additional space time available create store associated subgoal graph cases
overheads amortised many online instances  extra space
time available  cases map subject change  e g  new obstacles
added existing obstacles removed   anya appears preferable sub tl 
main strength anya searches sets nodes grid rather
considering individual locations one time  expansion thus considered
macro operator  meaning anya bears similarity speedup techniques using
hierarchical abstraction  e g  hpa   botea et al          important difference
anya constructs abstract graph on the fly rather part pre processing step 
one current drawback associated anya nodes contain overlapping
intervals  occurs interval reachable two different root points  neither
pruned  e g  root locations reached first time 
illustrated figure      nodes are  either part whole  redundant
provided f  value smaller optimal distance goal
beget yet redundant successors  see behaviour especially results
benchmarks random     random     sub tl achieves speedup several
factors anya struggles maintain parity reference a  algorithm  seems
reasonable improve current algorithm attempting identify overlaps order
prune consideration  efficient effective algorithm achieving
goal subject work 
    pareto sense  i e  problem instances anya better sub tl according
metric interest node expansions search time

   

fioptimal any angle pathfinding practice

    related work
among simplest popular approaches solving any angle pathfinding
problem string pulling  main idea find path input grid map  often
using variant a   hart et al          post process path order
remove unnecessary turning points  several methods appeared literature
game development  e g  see work pinter        botea et al         
number algorithms improve string pulling interleaving node expansion
path post processing online search  particular examples include field d   ferguson
  stentz        field a   uras   koenig      a   use linear interpolation
smooth grid paths one cell time  theta   nash et al          introduces
shortcut time successful line of sight check made  parent current
node successors  though still sub optimal many cases approaches
nevertheless attractive able search purely online efficient
practice  addition two examples given numerous works  often
appearing literature artificial intelligence  apply improve basic
interleaving idea  refer interested reader nash   koenig       recent survey
overview 
accelerated a   sislak  volf    pechoucek        online any angle algorithm
conjectured optimal strong theoretical argument made  similar
theta   differs primarily line of sight checks performed set expanded
nodes rather single ancestor  size set loosely bounded and 
challenging problems  include large proportion nodes closed list 
one recent successful line research involves combination string pulling
offline pre processing step  works compelling significantly
improve performance purely online search  terms solution quality
running time  block a   yap  burch  holte    schaeffer        one example 
sub optimal algorithm pre computes database euclidean optimal distances
possible tile configurations certain size  e g  possible  x  blocks   database
obviates need explicit visibility checks indeed type online string pulling 
pre processing step needs performed exactly once  database remains valid
tiles map change indeed map changes entirely  another recent
work improves theta  combining algorithm pre processing based graph
abstraction technique  uras   koenig      b   approach  referred section  
sub tl  shown improve running time solution quality block a  
main disadvantage  vs  block a   abstract graph needs re computed
repaired time map changes 
euclidean shortest path problem well known well researched topic
areas computational geometry computer graphics  seen generalisation any angle pathfinding problem  asks shortest path plane
impose restrictions obstacle shape obstacle placement  cf  grid aligned
polygons made unit squares  
visibility graphs  lozano perez   wesley        family well known popular
techniques optimally solving euclidean shortest path problem  searching
graphs requires o n  log  n  time approach much faster practice 
   

fiharabor  grastien  oz   aksakalli

two main disadvantages   i  computing graph requires offline pre processing
step o n    space store   ii  graph static must recomputed repaired
environment changes  sophisticated variants tangent graphs  liu  
arimoto        silhouette points  young        particularly efficient variants
visibility graphs disadvantages apply 
another family exact approaches solving euclidean shortest path problem
based continuous dijkstra paradigm  mitchell et al          efficient algorithms  hershberger   suri        involves pre computation requiring o n log  n  space o n log  n  time  result shortest path map  planar
subdivision environment used find euclidean shortest path
o log  n  time  queries originating fixed source  visibility graphs 
approach introduces additional memory overheads  storing subdivision 
pre processing step must re executed time environment start location
changes 

    conclusion
study any angle pathfinding  problem commonly found areas robotics
computer games  problem involves finding shortest path two points grid
asks path artificially constrained fixed points grid 
best known online algorithms any angle problem  date  compute approximate
solutions rather optimal shortest paths  additionally online methods
able achieve consistent speedup vs  a  algorithm common reference point
measuring performance literature  work present new online  optimal practically efficient any angle technique  anya  works obtain good
performance reasoning grid level method considers sets points
grid taken together contiguous intervals  approach requires revisiting
classical definition search nodes successors requires introduction new
technique computing f  value node  give thorough algorithmic description new search paradigm give theoretical arguments completeness
optimality preserving characteristics 
 almost  apples to apples comparison evaluate anya three contemporary near optimal online techniques  theta   lazy theta  field a   show
that  range popular benchmarks  anya faster alternatives 
guaranteeing find optimal shortest path  apples to oranges comparison
evaluate anya sub tl  fast pre processing based near optimal any angle
technique  show anya non dominated compared sub tl even
maintains advantage particularly challenging instances drawn real computer games  another advantage that  unlike sub tl  anya assume map
static  i e  readily applied pathfinding problems involving dynamically changing
terrain 
any angle pathfinding received significant attention ai game development communities open question whether optimal
online algorithm exists  anya answers question affirmative 
   

fioptimal any angle pathfinding practice

     future work
several possible directions future work  perhaps obvious development improvements extensions current anya algorithm  example 
believe empirical performance anya could enhanced generating successors
nodes contain redundant  or partially redundant  intervals  one possibility
keep closed list previously encountered intervals  stronger variant idea
involves bounding g value grid intervals generating successor nodes
least one point inside candidate interval relaxed  related orthogonal improvement involves pre processing grid identifying intervals apriori  enhancement
speed search avoiding entirely grid scanning interval projection operations
currently necessary order generate node 
seen reasoning sets points grid  rather individual
locations  computationally beneficial  believe type search paradigm
employed anya generalised improve performance grid optimal search
addition any angle pathfinding 
final suggestion work  believe anya might generalised
two dimensional maps arbitrarily shaped polygonal obstacles  rather grids 
benefit generalisation would avoid discretisation world
path searched for  would even improve quality path returned
optimal any angle path often non optimal non discretised version map 

acknowledgements
thank tansel uras assistance source codes used experimental section
paper  thank adi botea patrik haslum helpful suggestions
early development work 
work daniel harabor alban grastien supported nicta  nicta
funded australian government represented department broadband 
communications digital economy australian research council
ict centre excellence program 
work dindar oz vural aksakalli supported scientific technological research council turkey  tubitak   grant no     m    

   

fiharabor  grastien  oz   aksakalli

appendix a 
provide additional details implementation anyas successor set generation
algorithm  method depends basic operations technically simple  grid
scanning  traversability tests linear projection operations  attempt reproduce mechanical details operations  instead focus presentation toward
intuitive understanding overall process 
algorithm   computing successor set  supplemental 
   function generate start successors a traversable discrete start location s 
 
  
construct maximal half closed interval imax
containing points observable left
 
  
construct maximal half closed interval imax
containing points observable right
 
  
construct maximal closed interval imax
containing points observable row
 
  
construct maximal closed interval imax
containing points observable row
k
  
intervals split imax
corner point take union
  
construct intervals new  cone flat  successor node r  
  
return start successors
   end function
    function generate flat successors an interval endpoint p  root point r 
   
p  first corner point  else farthest obstacle vertex  row p hr  p  p  taut
   
imax new maximal interval endpoints p  open  p   closed 
   
points r p row
  observable successors
   
successors new flat node n    imax   r 
   
else
   
successors new flat node n    imax   p 
  non observable flat successors
   
end
   
return successors
    end function
    function generate cone successors an interval endpoint a  interval endpoint b  root point r 
   
b r row
  non observable successors flat node
   
r  b  whichever farthest r
  previously established turning point
   
p point adjacent row  reached via right angle turn
  obstacle following
   
imax maximum closed interval  beginning p entirely observable r 
   
else    b
  non observable successors cone node
   
r 
   
p point adjacent row  computed via linear projection r
   
imax maximum closed interval  beginning p entirely observable r 
   
else
  observable successors cone node
   
r  r
   
p point adjacent row  computed via linear projection r
   
p  point adjacent row  computed via linear projection r b
   
imax maximum closed interval  endpoints b  entirely observable r 
   
end
   
  split imax corner point  
   
n  new search node interval root point r 
   
successors successors
   
end
   
return successors
    end function

   

fioptimal any angle pathfinding practice

references
bjornsson  y     halldorsson  k          improved heuristics optimal path finding
game maps  proceedings second artificial intelligence interactive
digital entertainment conference  june              marina del rey  california  pp 
    
botea  a   muller  m     schaeffer  j          near optimal hierarchical path finding 
journal game development             
ferguson  d     stentz  a          field d   interpolation based path planner
replanner  robotics research  results   th international symposium  isrr
      october              san francisco  ca  usa  pp         
graham  r  l   knuth  d  e     patashnik  o          concrete mathematics   foundation computer science  addison wesley 
harabor  d  d     grastien  a          optimal any angle pathfinding algorithm 
proceedings twenty third international conference automated planning
scheduling  icaps       rome  italy  june             
harabor  d  d     grastien  a          improving jump point search  proceedings
twenty fourth international conference automated planning scheduling 
icaps       portsmouth  new hampshire  usa  june             
hart  p  e   nilsson  n  j     raphael  b          formal basis heuristic determination minimum cost paths  ieee transactions systems science
cybernetics                
hershberger  j     suri  s          optimal algorithm euclidean shortest paths
plane  siam journal computing                   
liu  y  h     arimoto  s          path planning using tangent graph mobile
robots among polygonal curved obstacles  international journal robotics
research             
lozano perez  t     wesley  m  a          algorithm planning collision free paths
among polyhedral obstacles  communications acm                  
mitchell  j  s  b   mount  d  m     papadimitriou  c  h          discrete geodesic
problem  siam journal computing                 
nash  a   daniel  k   koenig  s     felner  a          theta   any angle path planning grids  proceedings twenty second aaai conference artificial
intelligence  july              vancouver  british columbia  canada  pp           
nash  a     koenig  s          any angle path planning  ai magazine            
nash  a   koenig  s     tovey  c  a          lazy theta   any angle path planning
path length analysis  d  proceedings twenty fourth aaai conference
artificial intelligence  aaai       atlanta  georgia  usa  july             
pinter  m          toward realistic pathfinding  game developer magazine        
   

fiharabor  grastien  oz   aksakalli

sislak  d   volf  p     pechoucek  m          accelerated a  trajectory planning  gridbased path planning comparison   th icaps workshop planning plan
execution real world systems 
sturtevant  n          benchmarks grid based pathfinding  transactions computational intelligence ai games                 
sturtevant  n  r     bulitko  v          learning going whence
came  h  g cost learning real time heuristic search    nd international joint conference artificial intelligence  ijcai       pp         
sun  x   yeoh  w   chen  p  a     koenig  s          simple optimization techniques
a  based search   th international joint conference autonomous agents
multiagent systems  aamas       budapest  hungary  may              volume   
pp         
uras  t     koenig  s       a   empirical comparison any angle path planning
algorithms  proceedings eighth annual symposium combinatorial search 
socs             june       ein gedi  dead sea  israel  pp         
uras  t     koenig  s       b   speeding up any angle path planning grids 
proceedings twenty fifth international conference automated planning
scheduling  icaps       jerusalem  israel  june             pp         
yap  p   burch  n   holte  r  c     schaeffer  j          block a   database driven search
applications any angle path planning  proceedings twenty fifth
aaai conference artificial intelligence  aaai       san francisco  california 
usa  august            
young  t          optimizing points of visibility pathfinding  game programming
gems    pp          charles river media 

   


