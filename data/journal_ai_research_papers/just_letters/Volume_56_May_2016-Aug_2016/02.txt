journal of artificial intelligence research             

submitted        published      

optimal any angle pathfinding in practice
daniel harabor

daniel harabor nicta com au

the university of melbourne and
national ict australia  victoria laboratory
    batman st  melbourne        australia

alban grastien

alban grastien nicta com au

national ict australia  canberra laboratory
  london circuit  canberra        australia

dindar oz

dindar oz yasar edu tr

yasar university
bornova  izmir         turkey

vural aksakalli

aksakalli sehir edu tr

istanbul sehir university
altunizade  istanbul         turkey

abstract
any angle pathfinding is a fundamental problem in robotics and computer games  the
goal is to find a shortest path between a pair of points on a grid map such that the
path is not artificially constrained to the points of the grid  prior research has focused
on approximate online solutions  a number of exact methods exist but they all require
super linear space and pre processing time  in this study  we describe anya  a new and
optimal any angle pathfinding algorithm  where other works find approximate any angle
paths by searching over individual points from the grid  anya finds optimal paths by
searching over sets of states represented as intervals  each interval is identified on thefly  from each interval anya selects a single representative point that it uses to compute
an admissible cost estimate for the entire set  anya always returns an optimal path if
one exists  moreover it does so without any offline pre processing or the introduction of
additional memory overheads  in a range of empirical comparisons we show that anya is
competitive with several recent  sub optimal  online and pre processing based techniques
and is up to an order of magnitude faster than the most common benchmark algorithm  a
grid based implementation of a  

   introduction
any angle pathfinding is a common navigation problem in robotics and computer games  it
takes as input a pair of points from a uniform two dimensional grid and asks for a shortest
path between them that is not artificially constrained to the points of the grid  such anyangle paths are desirable to compute as they are typically shorter than their grid constrained
counterparts and because following such a trajectory can give the appearance of realism and
intelligence  e g  to the player of a computer game  despite its apparent simplicity anyc
    
ai access foundation  all rights reserved 

fiharabor  grastien  oz   aksakalli

angle pathfinding is surprisingly challenging  so far many successful and popular methods
have been proposed  yet they all involve trade offs of some kind  we begin with a few
examples that highlight  in broad strokes  the main research trends and their limitations 
to date 
in the communities of artificial intelligence and game development the any angle
pathfinding problem is often solved efficiently using a technique known as string pulling 
the idea is to compute a grid optimal path and then smooth the result  either as part of a
post processing step  e g  pinter        botea  muller    schaeffer        or by interleaving
string pulling with online search  e g  ferguson   stentz        nash  daniel  koenig   
felner         regardless of the particular approach  all string pulling techniques suffer
from the same disadvantages   i  they require more computation than just finding a path
and   ii  they only yield approximately shortest paths 
in the communities of robotics and computational geometry a related and more general problem has been well studied  finding euclidean shortest paths between polygonal
obstacles in the plane  visibility graphs  lozano perez   wesley        and the continuous dijkstra paradigm  mitchell  mount    papadimitriou        are among the best known
and most influential techniques that originate from this line of research  even though both
of these methods are optimal and efficient in practice they nevertheless suffer from having
often undesirable properties   i  the search graph  must be pre computed during an offline
pre processing step   ii  if the map changes at any point the search graph is invalidated and
must be recomputed  usually from scratch 
to date  it is not clear if there exists an any angle pathfinding algorithm that is simultaneously online  optimal and also practically efficient  i e  at least as fast in practice as
grid based pathfinding using a  search   in this manuscript  we present new work that
answers this open question in the affirmative by introducing a new any angle pathfinding
algorithm called anya  our approach bears some similarity to existing works from the
literature  most notably those algorithms based on the continuous dijkstra paradigm  in
rough overview 
 where other methods search over the individual nodes of the grid  anya searches
over contiguous sets of states that form intervals 
 each anya interval has a single representative point that is used to derive an admissible cost estimate  i e f  value  for all points in the set 
 to progress the search process anya projects each interval  from one row of the grid
onto another  until the target is reached 
anya always finds an optimal any angle path  if one exists  in addition anya does not
rely on any pre computation nor does it introduce any memory overheads  in the form of
auxiliary data structures  beyond what is required to maintain an open and closed list  a
theoretical description of this algorithm has previously appeared in the literature  harabor
  grastien         in this study we extend that work in several ways   i  we give a
   we distinguish between the search graph and the input grid map  though in some contexts these terms
coincide exactly this is not true in general  in particular the search graph may be a subset of the input
grid or may be a related but entirely separate data structure 

  

fioptimal any angle pathfinding in practice

visible

visible

non visible

 

 

 

 

 

 

 

 
 

 

 

non visible

 
 

 
 

 

 

 

 

 

 
 

 

 

figure    examples of visible and non visible pairs of points 

detailed conceptual description of the anya algorithm and provide an extended theoretical
argument for optimality and completeness   ii  we discuss the practical considerations that
arise when implementing the algorithm and we give a technical description for one possible
and efficient implementation   iii  we make detailed empirical comparisons showing that
anya is competitive with a range of recent sub optimal techniques from the literature 
including those based on offline pre processing  and is up to one order of magnitude better
than our benchmark grid based implementation of a    iv  we discuss a range of possible
extensions for further improving the current results 

   the optimal any angle pathfinding problem
a grid is a planar subdivision consisting of w  h square cells  each cell is an open set
of interior points which are all traversable or all non traversable  the vertices associated
with each cell are called the discrete points of the grid  edges in the grid can be interpreted
as open intervals of intermediate points  each one representing a transition between two
discrete points  each type of point p    x  y  has a unique coordinate where x      w   and
y       h   with discrete points limited to the subset of integer x and y values 
a discrete or intermediate point is traversable if it is adjacent to at least one traversable
cell  otherwise it is non traversable  a discrete point which is common to exactly four
adjacent cells is called an intersection  any intersection where three of the adjacent cells
are traversable and one is not is called a corner  two points are visible from one another
if they can be connected by a straight line path  i e  a sequence of adjacent points  either
intermediate or discrete  that does not   i  pass through any non traversable point or
 ii  pass through an intersection formed by two diagonally adjacent non traversable cells 
figure   shows some examples that help to better illustrate this idea 
an any angle path  is a sequence of points hp            pk i where each pi is visible from pi 
and pi     the length of  is the cumulative distance between every successive
pair of points
p
 
 
 
 
d p    p          d pk    pk    the function d p    x  y   p    x   y       x  x       y  y     
is a uniform euclidean distance metric  we will say pi   is a turning point if the segments
 pi    pi   and  pi   pi     form an angle not equal to         finally  the any angle pathfinding
problem is one that requires as input a pair of discrete points  s and t  and asks for an anyangle path connecting them  the point s designates the source  equivalently  start  location
   it is well known that the turning points in optimal any angle paths are corner points  e g  as shown
by mitchell et al         

  

fiharabor  grastien  oz   aksakalli

while the point t designates the target  equivalently  goal  location  such a path is optimal
if there exists no alternative any angle path between s and t that is strictly shorter 
figure   provides an example of an optimal any angle pathfinding problem  as can be
seen the source  target and all obstacles have discrete positions however the path itself does
not need to follow the grid  notice also that the trajectory of this path appears much more
realistic than any alternative restricted to turning at modulo    deg or    deg 
 
 
 
 

s
t

 
 
 
 
 
 
 
 
 
 
figure    example of an any angle pathfinding problem together with its solution 

   an overview of anya
consider the any angle instance shown in figure    in this example the optimal path
between s and t needs to first head towards the corner point n and then change direction
toward the target t  one possible approach to solving this problem involves computing
a visibility graph  i e   identifying all pairs of corners that are visible from one another 
and also visible from the start and target locations  and then searching for a path on this
graph  the main drawback in this case is that the visibility graph can be quite large  up
to quadratic in the size of the grid  and very expensive to compute 
an alternative approach  which avoids these overheads  is to solve the problem online 
unfortunately online search methods generally consider only the discrete points of the grid
and their immediate neighbours  for example  when expanding the point s it is common to
only generate the neighbours                  and        in the example
of figure   the a 

f  value for
 each of the three neighbours is  respectively                               
and               using euclidean distance
as a heuristic   by comparison the optimal


any angle path has cost of               immediately we can see that the heuristic at
hand does not satisfy one of the essential properties of a  search  that the f  value of each
node should always be an underestimate of the actual distance to the goal  without this
property a  is not guaranteed to be optimal 
the issue described above comes from the fact that the optimal path does not go through
any of the points                 or         instead the optimal path crosses row   at point y   
which is not part of the search space  to ensure optimality we should consider all points
such as y  rather than just the discrete points of the grid  there are however many such
points including e g   points such as y    leading to          which apriori seems a reasonable
candidate for expansion  but which does not appear on any optimal path 
  

fioptimal any angle pathfinding in practice

 
 

t

 
n

 
 

y 

y  

 

y 
s

 
 

 

 

 

 

 

 

figure    when pathfinding from s to n  online algorithms such as a  and theta  only
expand discrete points from the grid and never intermediate points such as yi  
in general we need to consider all potential yi points defined as a fraction wh where
h              h  and w              w    this set is quadratic in n   min w  h   to understand why  we consider the farey sequence of order n  the sequence  ordered by increasing
number  of all rational numbers between   and   that can be written as a fraction whose
denominator is an integer lower than n  for instance  the farey sequence of order n    
is                                                               notice that           which explains why the length of this
sequence is not n n          still the asymptotic cardinality of this sequence is known to
 
be  n
 graham  knuth    patashnik        ch     
 
since the quadratic behaviour of the farey sequence makes it impractical to enumerate
all potential yi points we propose to consider  instead of individual points  a set of points
that appear together as part of a contiguous interval on the grid  in the example of figure  
we would consider all the points lying between        and         at the same time and as
part of a single a  search node  in this framework we need to 
 define formally an anya search node 
 define the set of successors of a search node 
 define how to compute the f  value of a search node 
 prove optimality of the returned path 
 terminate search when no path is available 
 ensure the anya algorithm is efficient in practice 
  

fiharabor  grastien  oz   aksakalli

   algorithm description
this section presents in detail the anya algorithm and its properties  since anya is a
variant of a  we first present its search space  the search nodes  the successors of a node
and the evaluation function used to rank nodes during search  we then a give pseudo code
description of the algorithm and discuss its properties  improvements that make anya
efficient in practice are presented in the next section 
    anya search nodes
we now define the notion of interval  which is at the core of anya 
definition   a grid interval i is a set of contiguous and pairwise visible points drawn
from any discrete row of the grid  each interval is defined in terms of its endpoints a and b 
with the possible exception of a and b  each interval contains only intermediate and discrete
non corner points 
by definition  all points in an interval share the same y position  which is a positive
integer  moreover  the x position of all points in an interval  including that of endpoints
a and b  is a rational number    we will use normal parentheses   or   to indicate an
interval endpoint that is open and square brackets   or   to indicate an interval endpoint
that is closed  for example  the interval i    a  b  is open at  i e  does not include  a and
closed at  i e  does include  b 
identifying intervals is simple  any row of the grid can be naturally divided into maximally contiguous sets of traversable and non traversable points  each traversable set forms
a tentative interval which we can split  repeatedly if necessary  until all corner points are
end points of intervals  intervals can also be identified through an operation called projection  we discuss this procedure in the next sub section  for now we note only that intervals
produced by way of projection can also have non discrete and non corner endpoints 
a significant advantage of anya is that we construct intervals on the fly  this allows
us to start answering queries immediately and for any discrete start target pair  similar
algorithms  e g  continuous dijkstra  mitchell et al          require a pre processing step
before any queries can be answered and then only from a single fixed start point 
definition   a search node  i  r  is a tuple where r   i is a point called the root and i is
an interval such that each point p  i is visible from r  to represent the start node itself 
set i    s  and assume r is located off the plane and visible only from s  the cost from r to
s in this case is zero 
an a  search node  together with its parents  traditionally represents the single path
defined by travelling in straight line between the points in the search nodes from the root
to the current node  an anya search node similarly defines paths obtained by visiting
the roots of each nodes and ending in the interval of the current node  a node therefore
represents many paths and the root of the search node is always the last  common  turning
   as per the problem definition  every point  x  y  appearing on an optimal any angle path belongs to a
farey sequence and all such points are rational 

  

fioptimal any angle pathfinding in practice

point of these paths  it will always be either the root of the parent node or one of the end
points of the parent interval 
besides the start node  which we treat as a special case  there are two other types of
search nodes  cone nodes and flat nodes  an example of a cone node is shown in figure   
such nodes are characterised by the fact that the root r is not on the same row as its
associated interval i  notice in the example that although the interval i    a  b  is maximal 
it does not have any endpoints which are obstacles  corners or indeed even discrete points of
the grid  here the left endpoint a is          while the right endpoint b is            examples
of flat nodes are shown in figure    the two nodes are    a    b     r  and   a    b     r   flat
nodes are characterised by the fact that the root r is on the same row as the interval i 
notice in the examples given that a    r  resp  a    b    is excluded from the first  resp 
second  interval  the semantics of every search node is that the current position is located
somewhere in the interval i and we reach that point by an any angle path whose most
recent turning point is r 
 

 
a

 

b

 

 

 

 

 

 

r   a 

b    a 

b 

 

r

 

 
 

 

 

 

 

 

 

figure    example of a cone search node 

 

 

 

 

 

 

 

figure    example of two flat search nodes 

    searching with anya  successors
the successors of a search node n are identified by computing intervals over sets of traversable
points  from the same row of the grid as the current node n and from the rows immediately
adjacent  we want to guarantee that each point in such a set can be reached from the root
of n via a local path which is taut  taut simply means that if we pull on the endpoints of
the path we cannot make it any shorter  we now provide a formal definition of a successor
and then discuss how this definition can be applied in practice 
definition   a successor of a search node  i  r  is a search node  i     r    such that
   for all points p   i     there exists a point p  i such that the local path hr  p  p  i is taut 
   r  is the last common point shared by all paths hr  p  p  i  and
   i   is maximal according to the points above and the definition of a search node 
  

fiharabor  grastien  oz   aksakalli

the first requirement  tautness  implies that each successor p   i   can be reached from
the root of the current node r by a path that is locally optimal  we will use this property
in the next subsection to show that anya always finds a globally optimal path if one exists
at all  the third property  requiring that each successor have an interval that is maximal 
exists for the purpose of practical efficiency  simply put  we do not want to have arbitrarily
small and arbitrarily many successors  instead  we will make each successor interval as
large as possible  the second property has two interpretations  when r    r we will say
that the successor node is observable  similarly when r    p we will say that the successor
is non observable  we explore each of these ideas in turn 
 
v 

 

v 

u 

u 

v 
r 

a

 

 b
u 

 
 

r

 
 

 

 

 

 

 

 

 

figure    successors of a cone search node  n     a  b   r   there are five successors    v    v     r  and   v    v     r  which are observable and   r    u     r       v    u     r     and
  u    u     r    which are not 

 
 
a

 
 

b

c

d

e

 
 
 

 

 

 

 

 

 

figure    successors of a flat search node  n     a  b   a   there are two successors    b  c   a 
which is observable and   d  e   b  which is not 
  

fioptimal any angle pathfinding in practice

algorithm   computing the successor set
   function successors n    i  r  
  takes as input the current node
  
if n is the start node s then
  
return generate start successors i    s  
  
end if
  
successors  
  
if n is a flat node then
  
p  endpoint of i farthest from r
  successor interval starts from p
  
successors  generate flat successors p  r 
  observable successors
  
if p is a turning point on a taut local path beginning at r then
   
successors  successors  generate cone successors p  p  r    non observable successors
   
end if
   
else
  if the node is not flat  it must be a cone
   
a  left endpoint of i
   
b  right endpoint of i
   
successors  generate cone successors a  b  r 
  observable successors
   
if a is a turning point on a taut local path beginning at r then
   
successors  successors  generate flat successors a  r 
  non observable
   
successors  successors  generate cone successors a  a  r 
  non observable
   
end if
   
if b is a turning point on a taut local path beginning at r then
   
successors  successors  generate flat successors b  r 
  non observable
   
successors  successors  generate cone successors b  b  r 
  non observable
   
end if
   
end if
    end function

an observable successor is characterised by the fact that all points p   i   are visible from
the current root point r  in this case the last common point shared by all local paths of the
form hr  p  p  i is r  observable successors are computed by projecting the current interval
on the next row  the projection identifies a maximal interval imax that we will split at
each internal corner point point  each interval produced by the split operation leads to a
new observable successor  and all such successors share the same root point as the original
 parent  node  this process is illustrated in figure   where the interval i    a  b  is projected
onto the next row  the projection identifies a maximal observable interval imax    v    v   
which is subsequently split to create two observable successors    v    v     r  and   v    v     r  
by comparison  a non observable successor is characterised by the fact that all points
 
p  i   are not visible from the current root r  in this case all local paths of the form
hr  p  p  i must pass through a  visibility obstructing  corner point whose identity is r     p 
figure   illustrates the process of computing non observable successors  first  from the
non observable points to the right of the current interval i    a  b   we construct a single
flat successor with i      b  u    and root r     b  non observable points also exist to the
left of the current interval i but the local path to each such point  from r through a  is
not taut  other non observable successors can be found on rows of the grid adjacent to the
current interval i  by projecting the corner endpoint b onto the next row of the grid we
can construct two further non observable successors    v    u     b  and   u    u     b  
in algorithm   we give an overview of the procedure that generates the successor set for
each search node  an overview of the sub functions appearing in algorithm   is given in
  

fiharabor  grastien  oz   aksakalli

the appendix  the implementation is straightforward  requiring nothing more complicated
than grid scanning operations and linear projections 
it is important to note at this stage that anya does not perform any visibility checks
during the generation of successor nodes  visibility checks are at the heart of many contemporary online algorithms  including theta   nash   koenig         which must determine
whether each successor is visible from some other node  e g  the grand parent node   on
the one hand visibility checks help theta  et al  find shorter paths and expand fewer nodes
than traditional a  search  on the other hand  the computational overhead introduced by
these checks means that run times can often be larger than a   by comparison when anya
projects an interval i  from one row of the grid to the next  the process involves only local
reasoning  in particular we can determine if the projection imax is valid  invalid or if it
needs to be clipped by simply testing the traversability of cells located above  below and
to the left and right of the current interval i and the proposed imax   the elimination of
visibility checks is an important practical advantage for anya  as we will see in section   
anya not only finds shorter paths than online methods such as theta  et al  it is also
usually much more efficient in terms of running time 
we now illustrate algorithm   using previous examples  consider the flat node   a  b   a 
of figure    the point p of line   is set to b and the observable flat successor   b  c   a  is
generated on line    furthermore since b is a turning point from a  line     the interval
imax    d  e  is considered  since imax contains no interior corner points it is not split and
a single non observable cone successor  i   imax   b  is generated  line     
next  consider the cone node   a  b   r  of figure    first we generate the observable
successors  line      the interval  a  b  is projected and the maximal interval imax    v    v   
is identified  imax is then split at the internal corner point v  leading to two observable cone
successor nodes   i     v    v     r  and  i     v    v     r   notice that no line of sight visibility
check is required here  next since b is a turning point we look for non observable successors
as well  lines         the flat successor   b  u     b  is generated as per the previous example 
meanwhile the maximal  non observable  cone interval imax    v    u    is also identified 
this interval is split at the internal corner point u  resulting in two non observable cone
successor nodes   i     v    u     b  and  i     u    u     b  
algorithm   treats the start node  lines      as a special case because its root point
is located off the grid  the successors of the start node  i  are all non observable intervals
from the root and  ii  can be found to the left and right of the start location  on the row
immediately above the start location and on the row immediately below 
    evaluating an anya search node
the search procedure of anya  similarly to that of a   always expands the most promising node found so far  it is therefore necessary to evaluate each root and interval pair 
this evaluation corresponds to an estimate f of the minimal length of a path from the
source to the target through the current interval  an optimality condition of a  is that
this estimate is optimistic  i e  it is never larger than the actual optimal path length   in
classical a  where a search node n corresponds to a single point p on the grid the value
f  n  is computed as the sum of g p   the length of the path from the source to p  and h p  
an  under estimation of the length of the shortest path from p to the target 
  

fioptimal any angle pathfinding in practice

as a search node n    i  r  represents a set of points its f value is the minimum f value
of the points in the node 
f  n    inf f  s  r  p  t 
pi

where f  s  r  p  t  is an  under estimate of the shortest path from s to t through r and p 
it should be noted that  because the set of points p is continuous and potentially open  the
minimum is replaced by the infimum  since all points in the interval are visible from r  this
value can be broken down as follows 
f  s  r  p  t    g r    d r  p    h p 
where d r  p  is the distance between the points r and p 
finding the point of the interval that minimises the f value may seem like a hard problem
since the interval contains a large number of points and we want to avoid generating all of
them  however the straight line distance heuristic h  h p    d p  t   makes it easy to isolate
the point p that minimises the f value  thanks to two simple geometric observations  more
precise heuristics are available but these could make it harder to find the point p 
lemma   let t and r be two points s t  the interval i is on the same row as t or on a row
between the rows of r and t  then the point p of i with infimal f  value is the point in i
closest to the intersection of the straight line path ht  ri with the row of i 
if the line between r and t intersects the interval then the point p is the intersection 
otherwise this point p is one of the endpoints of the interval  in the event that the precondition of lemma   is not satisfied  it is possible to replace t by its mirrored version t 
through i and thus satisfy the precondition  this case is described in lemma   
lemma   the mirrored point t  of target t through interval i is such that d p  t    d p  t   
for all p  i 
lemma   is a trivial geometrical result  both lemmas are illustrated on figure   
    search procedure
the search procedure employed by anya is presented in algorithm    it follows the pattern
of a  and uses priority queue  open  that stores all the yet to be expanded search nodes
ordered by f value  each node stores a pointer to its parent  at each step of the search
anya extracts the best node from open and checks if the corresponding interval contains
the target  in the event that the target is found  line    the returned path is a sequence
of root points constructed by following back pointers  from the current node to the start
location  if the target is not found the current node is expanded and its successors are
added to the priority queue  line     some successors may be considered redundant and
these can be safely discarded without insertion into the priority queue  line     we discuss
this aspect of the algorithm in section    for now it suffices to know that such successors
are not on any optimal path  the expansion process continues until the target is found or
the open list is exhausted  in which case the algorithm returns failure  line     
in the next sections we will prove some fundamental properties about this algorithm 
correctness  optimality and completeness 
  

fiharabor  grastien  oz   aksakalli

 

t 
t  

t 

 

t 

 

a

b

 

t 

 
 

 

 

r

 

 

 

 

figure    an illustration of lemmas   and    we evaluate the node n     a  b   r   the
points t  and t   correspond to the case where the row of the target t intersects the interval
i  t  and t  where it does not  t  where the mirrored target t   must be used 

   correctness and optimality
in this section we prove that anya is correct and always finds an optimal path  in particular
we will show  i  that the optimal path appears in the search space   ii  when the target
is expanded we have found an optimal path  and  iii  that each node in the search space
will be reached in a finite number of steps  the topics of termination and completeness are
discussed in section   
we begin the analysis by recalling that a search node n    i  r  represents a set of potential
paths  from s to r and from r to each point p  i   following these semantics we will say
that n is a search node of a path  if r   and i intersects  
lemma   if n    i  r  is a search node of an optimal path   then  either n contains the
target t or n has at least one successor n  that is also a search node of    
proof  start node  n is the start node with i    s  and r located off the grid  additionally  n is a search node of    hypothesis   algorithm    line    scans the traversable
algorithm   anya
  
  
  
  
  
  
  
  
  
   
   
   
   
   

input  grid  source location s  target location t
open    i    s   r    
while open is not empty do
 i  r   pop open 
if t  i then
return path to i 
end if
for all  i     r     successors i  r  do
if should prune i     r    then
open  open    i     r    
end if
end for
end while
return null

   

  start node with root r  located off the grid

  successor pruning

fioptimal any angle pathfinding in practice

points of the grid that are visible from and adjacent to s  these points are located to the
left and right of s and they are located on the rows immediately above and immediately
below the row of s  algorithm   assigns each of these points to an interval i   and each i   is
associated with a successor node that has as its root r    s  every optimal path must pass
through i    s  and there are no traversable points that can be reached from s without
passing through an interval associated with a successor of s  this is sufficient to satisfy the
lemma 
other nodes  n is an arbitrary node of   and t   i  if t  i there are no further successors
and we are done   by definition r    and p  i is the  apriori unknown  intersection of
  with the interval i  there are now two possibilities to consider  depending on whether
p is a turning point or not  we will show that in both cases there is a successor of n whose
interval i   intersects     which is sufficient to satisfy the lemma 
case   p  i is not a turning point  algorithm    lines   and     scans all points that are
adjacent to i and  straight line  visible from r through i  each point is assigned to
a successor with observable interval i   and root point r  thus at least one of the
successors of n intersects every straight line path from r through p which means at
least one successor of n intersects    
case   p  i is a turning point  in this case p must be a corner endpoint of i  otherwise  
is not taut and thus cannot be optimal  algorithm    lines                 scans all
points that are adjacent to i and reachable from r through p by a taut local path 
these points are located on the row of p or on a row that is immediately adjacent 
each such point is assigned to a successor with a non observable interval i   and root
r   p  as the process is exhaustive all points reachable by a taut local path  from
r though p  must be assigned to an interval  thus   must intersect at least one of
the successors of n 

corollary   if there is a path between the source and the target  then the open list always
contains a search node of an optimal path  or this node is currently being processed  
proof  by induction 
base case  the initial search node is a node of any path from s 
inductive case  assume that the open list contains a search node of an optimal path 
then this node can only be removed if it is expanded  if this node does not contain the
target then we know from lemma that one successor will be generated that is a search node
of this optimal path  therefore a new search node of an optimal path will be inserted in
the open list 


lemma   the first expanded node that contains the target t corresponds to one optimal
path to t 
   

fiharabor  grastien  oz   aksakalli

proof  sketch  first we notice that the f  value of a node is indeed the minimal value of
all the nodes in the interval  which means that f is an under estimate    of the actual cost
to the target  second we notice that  given a search node  i  r  and its successor  i     r     for
each point p   i     the f  value of p  is greater than or equal to the f  value of some point
p  i   p   r  if r     r  p is the intersection of i and  r  p    otherwise   the f function
is therefore monotonically increasing  finally  the f function of a search node  i  r  is the
length of the path if t  i  hence the f function of the nodes representing a sub optimal
path to t will eventually exceed the optimal path distance  while the f function of the nodes
representing the optimal path will always remain under this value 


lemma   if the target is reachable anya will eventually expand a node whose interval
includes the target 
proof  by contradiction  assume that anya does not expand a node whose interval includes
the target  from lemma   we know that failure to expand this node means that anya
expand infinitely many nodes  we shall prove that doing so implies that the f value of
these nodes is unbounded and  therefore  the target is not reachable 
for most search nodes  i     r     the interval i   is on a different row than that of its parent
 i  r   therefore  for those nodes  the value g p    is larger than the value g p  by   or more 
this does not happen when the node is flat  but there can be only a bounded number of
successive flat nodes   hence an infinite sequence of successive anya nodes has an infinite length  finally each anya node has a bounded number of successors  meaning that an
infinite number of expansions will have to generate an infinite number of successive nodes  

   completeness and termination
until now we have not specified any policy by which anya can detect nodes that have
been previously expanded  in the context of optimal a  search such a policy is essential
to prevent cyclical re expansion and to ensure that the algorithm eventually terminates 
even if there is no path between the start and target locations  in this section we describe
such a policy for anya  conceptually similar to the a  closed list our approach works
by tracking the best g value associated with every root location  cf  every search node 
encountered during search 
as a motivating example consider figure   where the root r is reached via two paths of
different length  in the example the green path is strictly longer than the red path and any
points reached via the green path will have a g value that is strictly larger than the same
point when reached via the red path  figure    shows a similar example where both green
and red paths reach the root point r with the same cost  resulting in two identical copies
of the successor node  i  r   without any strategy to handle such root level redundancies
the search process can generate many unnecessary nodes that slow progress to the goal 
moreover  if there exists no path between the start and target location  the search may not
   and  furthermore  the value g p  does not increase significantly only for an unobservable flat cone 

   

fioptimal any angle pathfinding in practice

 

 
i

 
r

 

 

 

 

 

 
s
 

r

 

 

 

i

 

s

 
 

 

 

 

 

 

 

figure    root r is reached via two paths
of different lengths 

 

 

 

 

 

 

figure     root r is reached via two
paths of equal length 

terminate  e g  when the input graph contains cycles it is possible to endlessly generate
copies of states with ever increasing g values  
we propose the following strategy to avoid root level redundancies 
   we store a hash table of all visited roots with their best g values  we call this table
the root history and apply it in a similar way to  and indeed in lieu of  a traditional
a  closed list 
   when generating a search node n we check if its root is already in the root history
with a g value less than or equal to its current g value 
   if the current g value of the root improves on the value stored in the root history we
add the node to the open list  we also update the g cost of the root  in the root
history list 
   alternatively  if the current g value of the root does not improve on the value stored
in the root history we simply discard the node  i e  it is not added to open  
the root history is implemented as a hash table  its size is o n  where n is the number of
discrete points on a given input map  we now show that keeping a root history list does
not affect the correctness or optimality of search and that anya is indeed complete and
does terminate 
lemma   anya search prunes only sub optimal paths 
   similar updates to nodes on the closed list are sometimes performed in the context of incremental 
bounded cost or bounded sub optimal search  such updates are performed as part of an operation called
node re opening  our updates are not the same as node re opening  in particular root points are never
directly expanded and thus never appear on the open list  anya search comprise root interval pairs  

   

fiharabor  grastien  oz   aksakalli

proof  trivial  if a search node has a root with a sub optimal g value  then it represents
a sub optimal path 


lemma   anya always terminates 
proof  for anya to not terminate  it must explore paths of arbitrary length  such paths
must eventually involve the same root twice with the root being different in between  let
n and n  be the two such search nodes  the g value associated with n  must be higher than
the g value associated with n and  therefore  node n  must be pruned  indeed all sufficiently
long paths will be pruned and the open list will eventually be empty 


lemma   anya with redundant node pruning keeps at least one optimal path 
proof  if a search node n    i  r  is removed there exists another search node n   but
with different search parents  with a smaller  or equal  g value that is kept  assume that
n is a search node of an optimal path p            pk   and let pi  i be the point of this path
that intersects i  since the g value of n is similar to that of n    there exists another path

p             p i   pi             pk of similar length  and this path is not pruned 

   practical pruning strategies
a  orders nodes for expansion by evaluating and ranking how promising they each appear
 i e  by their f  values   it is  however  possible to alter the order of expansion without
compromising the guarantees provided by a   correctness  optimality and completeness 
indeed such a strategy can even have a positive effect on the efficiency of the overall search 
in this section we discuss two practical strategies that modify expansion order and speed up
search  both enhancements are applied on the fly and both focus on reducing the size of the
priority queue  the first strategy  cul de sac pruning  identifies nodes that can be safely
discarded because they cannot possibly lead to the goal  the second strategy  intermediate
pruning  is similar but works by avoiding the explicit generation of nodes that have only
a single successor  these successors are expanded immediately  without being added to the
open list  
    cul de sac pruning
one way of reducing the size of the priority queue involves the early identification of culde sacs  cds   a cds is a search node that has no successor and does not contain the target 
by definition a cds does not need to be added to the open list since its expansion cannot
lead to the target  a simple test to identify cds nodes is given in algorithm   by way of
the procedure is cul de sac 
early pruning of cds nodes speeds up search  and reduces required memory  by preventing some unnecessary operations on open and also by reducing the size of the list  which
   

fioptimal any angle pathfinding in practice

algorithm   cul de sac and intermediate node pruning 
   function is cul de sac n    i  r  
  assumes i does not contain the target point
  
imax  projection of n
  flat projection or cone projection depending on n
  
if imax is valid then
  valid means every p  imax is visible from r
  
return f alse
  n cannot be a cul de sac  it has at least one successor with interval i    imax
  
end if
  
return true
  n is a cul de sac  it cannot be projected further and it has no successors
   end function
   function is intermediate n    i  r  
  assumes i does not contain the target point
  
if n is a flat node then
   
p  endpoint of i furthest from r
   
if p is a turning point for a taut local path with prefix hr  pi then
   
return f alse
  n has at least one non observable successor  it cannot be intermediate
   
end if
   
else
  n is not a flat node so it must be a cone node
   
if i has a closed endpoint that is also a corner point then
   
return f alse
  n has at least one non observable successor  it cannot be intermediate
   
end if
   
i    interval after projecting r through i
   
if i   contains any corner points then
   
return f alse
  n has more than one observable successors  it cannot be intermediate
   
end if
   
end if
   
return true
    end function

makes every other operation faster  for reference  when the open list is implemented as a
binary heap each add or remove operation has a time complexity of log n  where n is the
size of the list  examples of cds pruning  for cone nodes and for flat nodes  are illustrated in
figure    and figure     in both cases the current node and root are shown in blue while
the intervals in red can be pruned 
    intermediate pruning
our second pruning strategy can be described as pushing the expansion in one direction
as far as possible as long as it does not increase the branching factor  practically  if a search
node is generated that is guaranteed to have only one successor  then we immediately
generate this successor instead of the originally intended node  if said successor also has
only one successor the process can be recursively applied  examples showing the application
of intermediate pruning are given in figure    for cone nodes and on figure    for flat nodes 
a simple test to identify intermediate nodes is given in algorithm   by way of the procedure
is intermediate 
the first obvious benefit of intermediate pruning is a reduction in the number of operations on the open list  however a second benefit is that pushing the expansion of a node
can lead to a cul de sac  when this happens no node at all is added to the open list  which
helps keep the size of this list small and the operations on this list fast 
a potential issue with intermediate pruning is that that recursive application to nonpromising successor nodes could be more costly  in terms of time  than simply adding those
   

fiharabor  grastien  oz   aksakalli

 

 

 

 

 

 

c
a

 

d

e f
b

r

a

b

c

 
r

 

 
 

 

 

 

 

 

 

 

figure     cul de sacs in cone nodes 
nodes   c  d   r  and   e  f    r  are not generated 

 
 

 

 

 

 

 

figure     cul de sac on flat nodes  node
  b  c   r  is not generated 

 
 

 

 
r

 

a

b

c

d

 

r

a

b

c

 

 

 

 
 
 
 
 
 
 
figure     intermediate node   a  b   r  has
only one successor    c  d   r   which is immediately generated 

 
 
 
 
 
 
 
figure     intermediate node   a  b   r  has
only one successor    b  c   r  which is immediately generated 

nodes to open  we discuss this issue in more detail in section      we also note that in our
run time experiments the application of intermediate pruning has a net positive effect on
the performance of search 
    discussion
we have introduced two different ways in which nodes from the frontier of search can be
pruned  cul de sac pruning and intermediate pruning  both modify the expansion order
of search and both improve performance along a single fixed path  they do this by pruning
away sterile branches and by skipping over intermediate locations where no actual branching
occurs  similar strategies have been previously discussed in the literature  for example culde sac pruning is based on the same set of principles as the dead end heuristic  bjornsson  
halldorsson         although our method reasons more locally and is applied purely online 
intermediate pruning shares some similarities with fast expansion  sun  yeoh  chen   
   

fioptimal any angle pathfinding in practice

koenig         the main difference is that we prune nodes without reference to their f  value 
intermediate pruning is also similar to jump point search  harabor   grastien        but
applied outside the context of symmetry breaking and extended to sets of points taken as
intervals rather than applied over the individual cells of the grid 
anyas root history list  discussed in section    can also be regarded as a type of pruning
enhancement  in this case we reason more generally about the set of all possible paths that
could be used to reach a given point and prune away only those successors that cannot
possibly be on any optimal path  the approach we have taken here is similar in principle
 but not in practice  to the pruning of redundant states in real time search  sturtevant  
bulitko        
pruning search nodes in anya is more difficult than in classical a  search and its
many modern progenitors  this is because each anya node represents a set of positions
rather than just one  consider the example of figure     we are particularly interested
in the interval  a  b  which can be generated with root r  or r    the shortest path from
s to t is through r          against        for r     however if an obstacle is put on
the cell labeled with o  then the optimal path switches to r          against         
the diagram suggests that  when given the target and two search nodes sharing the same
interval  it may not be possible to prune either of them 
the situation described in figure    is not uncommon in practice and such examples
may motivate us to derive new and more sophisticated pruning rules to further enhance the
performance of the anya algorithm  we must be careful however to weigh the improved
pruning power of such new techniques against the overhead of applying them in the first
instance  for example  an alternative  arguably  better  approach to avoiding redundant
node expansions is to keep an interval history list in addition to  or instead of  a root history 
such a method would certainly avoid the problem outlined in figure    but there are many
more possible intervals than roots  which means the size of the hash table is potentially
much larger and memory accesses are potentially slower  additionally  comparing intervals
for equality and membership requires extra time and may not be worth the investment   

   we attempted a similar experiment but the results were not clearly positive 

   

fiharabor  grastien  oz   aksakalli

t

  
  

o
 
 
 
 
a

 

b

r 

 

r 

 
 

s

 
 
 

 

 

 

 

 

 

 

 

 

  

  

  

  

figure     illustrating that search nodes cannot be trivially pruned with search nodes
n      a  b   r    and n      a  b   r     if o is not an obstacle the optimal path between s and
t goes through n   red   otherwise it goes through n   blue  

   experimental setup
we conduct experiments on seven benchmark problem sets taken from nathan sturtevants
well known repository  sturtevant         three of the benchmarks originate from popular
computer games and often appear in the literature  they are  baldurs gate ii   dragon
age origins and starcraft  the maps in these benchmarks vary in size  from several
thousand nodes up to several million  the remaining four benchmarks comprise grids of
size          with randomly placed obstacles of varying densities  from     to     
table   gives an overview of the benchmark problems  we give the number of maps and
instances per problem set and a distribution for the number of node expansions required
by a reference algorithm  a  using an octile distance heuristic    to solve all problems in
each benchmark set  the latter metric gives us a baseline for comparing the difficulty of
problems appearing in each benchmark set 
   octile distance is analogous to manhattan distance but generalised to   connected grids 

   

fioptimal any angle pathfinding in practice

benchmark

 maps

 instances

baldurs gate ii
dragon age
starcraft
random    
random    
random    
random    

  
   
  
  
  
  
  

     
      
      
     
     
     
     

nodes expanded by a 
min
q  median mean
q 
max stdev
 
   
              
     
    
 
   
                             
      
                              
 
   
   
         
     
    
 
   
               
     
    
      
                 
           
       
                              

table    an overview of the seven benchmark problems used in our experiments  we give the
number of maps and problem instances in each benchmark and the distribution of nodes expanded
by a reference algorithm  a   when solving all problems in each benchmark set 

we compare our purely online and optimal anya algorithm with a number of state ofthe art any angle techniques  these are  theta   nash et al          lazy theta   nash 
koenig    tovey         field a   uras   koenig      a  and an any angle variant of
two level subgoal graphs  sub tl   uras   koenig      b   all of these approaches are
near optimal and are not guaranteed to return the shortest path  the methods theta   lazy
theta  and field a  are all purely online  only sub tl relies on an offline pre processing
step to further improve the performance of search  we use c   implementations for each of
these algorithms  the source codes are made publicly available by uras and koenig      a  
anya is implemented in java and executed on jvm      to allow for comparisons across
different implementation languages we use the a  algorithm  hart  nilsson    raphael 
       implemented in both c   and java  as a reference point    we compare the performance of anya against the java implementation of a  and all other algorithms with
the c   implementation of a   all experiments are performed on a  ghz intel core i 
machine with  gb of ram and running osx         source code for our implementation
of anya is available from https   bitbucket org dharabor pathfinding 

   results
we evaluate performance using three different metrics  search time  nodes expanded and
path length  all results are presented relative to a benchmark algorithm  a   which we
combine with a standard octile distance heuristic  for example  when comparing search
time or nodes expanded  we will give figures for the relative speedup of each algorithm vs
a   under this paradigm a search time speedup of   means twice as fast while a node
expansion speedup of   means half as many nodes were expanded  when comparing path
length we give the percent improvement in path length vs a   in all cases higher is better 

   the c   implementation is due to uras and koenig      a   the java implementation is our own 

   

fiharabor  grastien  oz   aksakalli

benchmark
baldurs gate ii
dragon age
starcraft    
random    
random    
random    
random    

avg  node expansion speedup
anya theta  l theta  f a  sub tl
     
    
                
     
    
         
     
     
    
                
    
    
         
    
    
    
         
    
    
    
         
    
    
    
         
    

avg  path length improvement    
anya theta  l theta  f a  sub tl
           
           
     
           
           
     
           
           
     
           
           
     
           
           
     
           
           
     
           
           
     

table    we compare the performance of each algorithm in terms of average node expansion speedup
and average path length improvement  both metrics are taken with respect to a reference algorithm
 a    in both cases higher is better 
we begin with table   which shows average performance figures for nodes expanded and
path length on each of our seven benchmark problem sets  we make the following observations 
 anya is the best of the four purely online algorithms  expanding fewer nodes in
five of the seven benchmarks  on the three benchmarks drawn from real computer
games anya expands one order fewer nodes  on average  than its nearest purelyonline contemporary  only the pre processing based sub tl algorithm expands fewer
nodes  on average 
 anya  as with all methods in our comparison  struggles to achieve a speedup on the
four random benchmarks  in two of the four cases its performance is below that of
the reference a  algorithm  again  only the pre processing based sub tl algorithm
is able to achieve a consistent  though much reduced  node expansion speedup 
 anya  being optimal  shows the best improvement in path length  however all algorithms in our comparison are very close to optimal  on average 
next  we evaluate performance in terms of search time  rather than taking a simple
average on a per benchmark basis  or across all benchmarks  we instead sort instances
according to difficulty  as measured by the number of node expansions required for the
reference a  algorithm to solve each problem  this approach gives a more holistic overview
of performance and reduces the effect of any bias associated with the selection of instances
that comprise each benchmark set    results from this analysis are given in figure     we
make the following observations 
 anya is often more than one order of magnitude faster than the reference a  algorithm on the benchmarks drawn from real computer games  performance is mixed
on the four random benchmarks  with all evaluated methods struggling to achieve a
speedup 
   as per table    problem instances that can be regarded as easy often outnumber instances that can
be regarded as hard  these difference have the effect of skewing performance indicators that are
computed as simple averages over all instances in each benchmark set 

   

fioptimal any angle pathfinding in practice

all benchmarks

baldur s gate ii
anya
theta 
lazy theta 
field a 
subtl

speedup vs a 

   

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

  

 

 

   

   
   

   

   
nodes expanded by a 

   

   

   

   

dragon age origins

   
nodes expanded by a 

   

   

starcraft
anya
theta 
lazy theta 
field a 
subtl

speedup vs a 

   

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

  

 

 

   

   
   

   

   
nodes expanded by a 

   

   

   

random     x        obstacles

speedup vs a 

   

   

random     x        obstacles
anya
theta 
lazy theta 
field a 
subtl

   

   
nodes expanded by a 

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

   

  

 

 

   

   
   

   

   
nodes expanded by a 

   

   

   

random     x        obstacles

speedup vs a 

   

   

random     x        obstacles
anya
theta 
lazy theta 
field a 
subtl

   

   
nodes expanded by a 

  

    

anya
theta 
lazy theta 
field a 
subtl

   

speedup vs a 

    

   

  

 

 

   

   
   

   

   
nodes expanded by a 

   

   

   

   

   
nodes expanded by a 

   

   

figure     search time speedup  we compare performance on each of our seven benchmarks
in terms of search time  figures are given as relative speedup vs  a reference a  algorithm 
problem instances are sorted by difficulty using a  node expansion rank  note that each
plot is log log 

   

fiharabor  grastien  oz   aksakalli

 anya is the fastest of the four purely online methods under evaluation  its performance is often comparable with the pre processing based sub tl technique and  on
particularly challenging instances from the starcraft domain  anya is non dominated    
 anyas performance in terms of search time is less than the value suggested by the
 previously evaluated  node expansion metric  this reflects the fact that each node
expansion made by anya involves analysing the grid  looking for roots and searching
for intervals 
    discussion
we have seen that anya compares well with current state of the art any angle pathfinding
algorithms  in an  almost  apples to apples comparison with three contemporary and purely
online search technique  theta   lazy theta  and field a   we have seen that anya usually
expands fewer nodes per search and terminates up to one order of magnitude faster  these
results are further underscored by the fact that anya is the only online algorithm that is
guaranteed to return a euclidean optimal path  we may surmise that  in many cases and
applications  anya appears preferable to each of these alternative algorithms 
next  we make an apples to oranges comparison between the purely online anya algorithm and the near optimal and offline enhanced sub tl algorithm  we have seen that
while anya is usually not as fast as sub tl its performance is sometimes comparable 
moreover  anya retains an advantage when solving especially challenging instances drawn
from real computer games  sub tl appears to be preferable to anya in cases where additional space and time is available to create and store its associated subgoal graph or in cases
where such overheads can be amortised over many online instances  when extra space and
time is not available  or in cases where the map is subject to change  e g  new obstacles are
added or existing obstacles are removed   anya appears to be preferable to sub tl 
the main strength of anya is that it searches over sets of nodes from the grid rather
than considering individual locations one at a time  expansion can thus be considered as
a macro operator  meaning that anya bears some similarity to speedup techniques using
hierarchical abstraction  e g  hpa   botea et al          an important difference is that
anya constructs its abstract graph on the fly rather than as part of a pre processing step 
one current drawback associated with anya is that nodes can contain overlapping
intervals  this occurs when an interval is reachable from two different root points  neither
of which can be pruned  e g  when both root locations are reached for the first time  as
illustrated in figure      such nodes are  either in part or in whole  redundant and 
provided their f  value is smaller than the optimal distance to the goal  will themselves
beget yet more redundant successors  we can see this behaviour especially in the results for
benchmarks random     and random     where sub tl achieves a speedup of several
factors while anya struggles to maintain parity with the reference a  algorithm  it seems
reasonable to improve the current algorithm by attempting to identify such overlaps in order
to prune them from consideration  an efficient and effective algorithm for achieving this
goal is the subject of further work 
    in the pareto sense  i e  there are problem instances where anya is better than sub tl according to
some metric of interest such as node expansions or search time

   

fioptimal any angle pathfinding in practice

    related work
among the simplest and most popular approaches for solving the any angle pathfinding
problem is string pulling  the main idea is to find a path on the input grid map  often
using some variant of a   hart et al          and then post process that path in order to
remove unnecessary turning points  several such methods have appeared in the literature
of game development  e g  see the work of pinter        and botea et al         
a number of algorithms improve on string pulling by interleaving node expansion and
path post processing during online search  particular examples include field d   ferguson
  stentz        and field a   uras   koenig      a   both of which use linear interpolation
to smooth grid paths one cell at a time  and theta   nash et al          which introduces a
shortcut each time a successful line of sight check is made  from the parent of the current
node to any of its successors  though still sub optimal in many cases such approaches
are nevertheless attractive for being able to search purely online and for being efficient in
practice  in addition to the two examples given there are numerous other works  often
appearing in the literature of artificial intelligence  that apply and improve on the basic
interleaving idea  we refer the interested reader to nash   koenig       for a recent survey
and overview 
accelerated a   sislak  volf    pechoucek        is an online any angle algorithm that is
conjectured to be optimal but for which no strong theoretical argument is made  similar to
theta   it differs primarily in that line of sight checks are performed from a set of expanded
nodes rather than a single ancestor  the size of the set is only loosely bounded and  for
challenging problems  can include a large proportion of nodes on the closed list 
one recent and successful line of research involves the combination of string pulling with
an offline pre processing step  such works are compelling because they can significantly
improve on the performance of purely online search  not just in terms of solution quality
but also running time  block a   yap  burch  holte    schaeffer        is one such example 
this sub optimal algorithm pre computes a database of euclidean optimal distances in all
possible tile configurations of a certain size  e g  all possible  x  blocks   the database
obviates the need for explicit visibility checks or indeed any type of online string pulling 
the pre processing step needs to be performed exactly once  the database remains valid if
the tiles on the map change or indeed if the map itself changes entirely  another recent
work improves on theta  by combining that algorithm with a pre processing based graph
abstraction technique  uras   koenig      b   this approach  referred to in section   as
sub tl  is shown to improve on both the running time and solution quality of block a  
the main disadvantage  vs  block a   is that the abstract graph needs to be re computed
or repaired each time the map changes 
the euclidean shortest path problem is a well known and well researched topic in the
areas of computational geometry and computer graphics  it can be seen as a generalisation of the any angle pathfinding problem  it asks for a shortest path in a plane but
does not impose any restrictions on obstacle shape or obstacle placement  cf  grid aligned
polygons made up of unit squares  
visibility graphs  lozano perez   wesley        are a family of well known and popular
techniques for optimally solving the euclidean shortest path problem  searching in such
graphs requires o n  log  n  time but the approach can be much faster in practice  there
   

fiharabor  grastien  oz   aksakalli

are two main disadvantages   i  computing the graph requires an offline pre processing
step and o n    space to store   ii  the graph is static and must be recomputed or repaired
if the environment changes  more sophisticated variants such as tangent graphs  liu  
arimoto        and silhouette points  young        are particularly efficient variants of
visibility graphs but the same disadvantages apply 
another family of exact approaches for solving the euclidean shortest path problem
is based on the continuous dijkstra paradigm  mitchell et al          the most efficient of these algorithms  hershberger   suri        involves a pre computation requiring o n log  n  space and o n log  n  time  the result is a shortest path map  a planar
subdivision of the environment that can be used to find a euclidean shortest path in just
o log  n  time  but only for queries originating at a fixed source  like visibility graphs 
this approach also introduces additional memory overheads  storing the subdivision  and
the pre processing step must be re executed each time the environment or the start location
changes 

    conclusion
we study any angle pathfinding  a problem commonly found in the areas of robotics and
computer games  the problem involves finding a shortest path between two points in a grid
but asks that the path is not artificially constrained to the fixed points of the grid  the
best known online algorithms for the any angle problem  to date  all compute approximate
solutions rather than optimal shortest paths  additionally no online methods have been
able to achieve a consistent speedup vs  the a  algorithm  a common reference point
for measuring performance in the literature  in this work we present a new online  optimal and practically efficient any angle technique  anya  where other works obtain good
performance by reasoning at the grid level our method considers sets of points from the
grid which are taken together as contiguous intervals  this approach requires revisiting the
classical definition of search nodes and successors and requires the introduction of a new
technique for computing the f  value of each node  we give a thorough algorithmic description of this new search paradigm and we give theoretical arguments for its completeness
and optimality preserving characteristics 
in an  almost  apples to apples comparison we evaluate anya against three contemporary near optimal and online techniques  theta   lazy theta  and field a   we show
that  on a range of popular benchmarks  anya is faster than each of these alternatives  all
while guaranteeing to find an optimal shortest path  in an apples to oranges comparison we
evaluate anya against sub tl  a very fast pre processing based near optimal any angle
technique  we show that anya is non dominated when compared to sub tl and even
maintains an advantage on some particularly challenging instances drawn from real computer games  another advantage is that  unlike sub tl  anya does not assume the map is
static  i e  it can be readily applied to pathfinding problems involving dynamically changing
terrain 
any angle pathfinding has received significant attention from the ai and game development communities but until now it has been an open question whether any optimal and
online algorithm exists  anya answers this question in the affirmative 
   

fioptimal any angle pathfinding in practice

     future work
there are several possible directions for future work  perhaps most obvious is the development of improvements and extensions to the current anya algorithm  for example  we
believe the empirical performance of anya could be enhanced by generating successors
nodes that do not contain any redundant  or partially redundant  intervals  one possibility
is to keep a closed list of previously encountered intervals  a stronger variant of this idea
involves bounding the g value of grid intervals and only generating successor nodes when at
least one point inside a candidate interval can be relaxed  a related and orthogonal improvement involves pre processing the grid and identifying intervals apriori  this enhancement
can speed up search by avoiding entirely all grid scanning and interval projection operations
that are currently necessary in order to generate each node 
we have seen that reasoning over sets of points from the grid  rather than individual
locations  is computationally beneficial  we believe the same type of search paradigm
employed by anya can be generalised to improve the performance of grid optimal search
in addition to any angle pathfinding 
as a final suggestion for further work  we believe anya might also be generalised to
two dimensional maps with arbitrarily shaped polygonal obstacles  rather than just grids 
a benefit of this generalisation would be to avoid the discretisation of the world in which
a path is searched for  this would even improve the quality of the path returned as the
optimal any angle path is often non optimal in the non discretised version of the map 

acknowledgements
we thank tansel uras for assistance with the source codes used in the experimental section
of this paper  we also thank adi botea and patrik haslum for helpful suggestions during
the early development of this work 
the work of daniel harabor and alban grastien is supported by nicta  nicta is
funded by the australian government as represented by the department of broadband 
communications and the digital economy and the australian research council through
the ict centre of excellence program 
the work of dindar oz and vural aksakalli is supported by the scientific and technological research council of turkey  tubitak   grant no     m    

   

fiharabor  grastien  oz   aksakalli

appendix a 
we provide additional details for the implementation of anyas successor set generation
algorithm  our method depends on basic operations which are technically simple  grid
scanning  traversability tests and linear projection operations  we do not attempt to reproduce the mechanical details of such operations  instead we focus our presentation toward
intuitive understanding of the overall process 
algorithm   computing the successor set  supplemental 
   function generate start successors a traversable and discrete start location s 
 
  
construct a maximal half closed interval imax
containing all points observable and to the left of s
 
  
construct a maximal half closed interval imax
containing all points observable and to the right of s
 
  
construct a maximal closed interval imax
containing all points observable and from the row above s
 
  
construct a maximal closed interval imax
containing all points observable and from the row below s
k
  
intervals  split each imax
at each corner point and take their union
  
construct for each i  intervals a new  cone or flat  successor node with r   s
  
return all start successors
   end function
    function generate flat successors an interval endpoint p  a root point r 
   
p   first corner point  else farthest obstacle vertex  on the row of p such that hr  p  p  i is taut
   
imax  new maximal interval with endpoints p  open  and p   closed 
   
if points r and p are on the same row then
  observable successors
   
successors  new flat node n    imax   r 
   
else
   
successors  new flat node n    imax   p 
  non observable flat successors
   
end if
   
return successors
    end function
    function generate cone successors an interval endpoint a  an interval endpoint b  a root point r 
   
if a and b and r are from the same row then
  non observable successors of a flat node
   
r   a or b  whichever is farthest from r
  previously established this is a turning point
   
p  a point from an adjacent row  reached via a right angle turn at a
  obstacle following
   
imax  a maximum closed interval  beginning at p and entirely observable from r 
   
else if a    b then
  non observable successors of a cone node
   
r   a
   
p  a point from an adjacent row  computed via linear projection from r through a
   
imax  a maximum closed interval  beginning at p and entirely observable from r 
   
else
  observable successors of a cone node
   
r   r
   
p  a point from an adjacent row  computed via linear projection from r through a
   
p   a point from an adjacent row  computed via linear projection from r through b
   
imax  a maximum closed interval  with endpoints a and b  which is entirely observable from r 
   
end if
   
for all i    split imax at each corner point   do
   
n   new search node with interval i and root point r 
   
successors  successors  i
   
end for
   
return successors
    end function

   

fioptimal any angle pathfinding in practice

references
bjornsson  y     halldorsson  k          improved heuristics for optimal path finding
on game maps  in proceedings of the second artificial intelligence and interactive
digital entertainment conference  june              marina del rey  california  pp 
    
botea  a   muller  m     schaeffer  j          near optimal hierarchical path finding 
journal of game development             
ferguson  d     stentz  a          field d   an interpolation based path planner and
replanner  in robotics research  results of the   th international symposium  isrr
      october              san francisco  ca  usa  pp         
graham  r  l   knuth  d  e     patashnik  o          concrete mathematics   a foundation for computer science  addison wesley 
harabor  d  d     grastien  a          an optimal any angle pathfinding algorithm 
in proceedings of the twenty third international conference on automated planning
and scheduling  icaps       rome  italy  june             
harabor  d  d     grastien  a          improving jump point search  in proceedings of
the twenty fourth international conference on automated planning and scheduling 
icaps       portsmouth  new hampshire  usa  june             
hart  p  e   nilsson  n  j     raphael  b          a formal basis for the heuristic determination of minimum cost paths  ieee transactions on systems science and
cybernetics                
hershberger  j     suri  s          an optimal algorithm for euclidean shortest paths in
the plane  siam journal on computing                   
liu  y  h     arimoto  s          path planning using a tangent graph for mobile
robots among polygonal and curved obstacles  international journal of robotics
research             
lozano perez  t     wesley  m  a          an algorithm for planning collision free paths
among polyhedral obstacles  communications of the acm                  
mitchell  j  s  b   mount  d  m     papadimitriou  c  h          the discrete geodesic
problem  siam journal on computing                 
nash  a   daniel  k   koenig  s     felner  a          theta   any angle path planning on grids  in proceedings of the twenty second aaai conference on artificial
intelligence  july              vancouver  british columbia  canada  pp           
nash  a     koenig  s          any angle path planning  ai magazine            
nash  a   koenig  s     tovey  c  a          lazy theta   any angle path planning and
path length analysis in  d  in proceedings of the twenty fourth aaai conference
on artificial intelligence  aaai       atlanta  georgia  usa  july             
pinter  m          toward more realistic pathfinding  game developer magazine        
   

fiharabor  grastien  oz   aksakalli

sislak  d   volf  p     pechoucek  m          accelerated a  trajectory planning  gridbased path planning comparison  in  th icaps workshop on planning and plan
execution for real world systems 
sturtevant  n          benchmarks for grid based pathfinding  transactions on computational intelligence and ai in games                  
sturtevant  n  r     bulitko  v          learning where you are going and from whence
you came  h  and g cost learning in real time heuristic search  in   nd international joint conference on artificial intelligence  ijcai       pp         
sun  x   yeoh  w   chen  p  a     koenig  s          simple optimization techniques for
a  based search  in  th international joint conference on autonomous agents and
multiagent systems  aamas       budapest  hungary  may              volume   
pp         
uras  t     koenig  s       a   an empirical comparison of any angle path planning
algorithms  in proceedings of the eighth annual symposium on combinatorial search 
socs             june       ein gedi  the dead sea  israel  pp         
uras  t     koenig  s       b   speeding up any angle path planning on grids  in
proceedings of the twenty fifth international conference on automated planning and
scheduling  icaps       jerusalem  israel  june             pp         
yap  p   burch  n   holte  r  c     schaeffer  j          block a   database driven search
with applications in any angle path planning  in proceedings of the twenty fifth
aaai conference on artificial intelligence  aaai       san francisco  california 
usa  august            
young  t          optimizing points of visibility pathfinding  in game programming
gems    pp          charles river media 

   

fi