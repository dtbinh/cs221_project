journal of artificial intelligence research                  

submitted        published      

efficient mechanism design for online scheduling
xujin chen
xiaodong hu

xchen amss ac cn
xdhu amss ac cn

amss  chinese academy of science  beijing  china

tie yan liu
weidong ma
tao qin

tyliu microsoft com
weima microsoft com
taoqin microsoft com

microsoft research  beijing  china

pingzhong tang

kenshin mail tsinghua edu cn

tsinghua university  beijing  china

changjun wang

wcj amss ac cn

beijing university of technology  beijing  china

bo zheng

zhengb   mails tsinghua edu cn

tsinghua university  beijing  china

abstract
this paper concerns the mechanism design for online scheduling in a strategic setting 
in this setting  each job is owned by a self interested agent who may misreport the release
time  deadline  length  and value of her job  while we need to determine not only the
schedule of the jobs  but also the payment of each agent  we focus on the design of
incentive compatible  ic  mechanisms  and study the maximization of social welfare  i e  
the aggregated value of completed jobs  by competitive analysis  we first derive two lower
bounds on the competitive ratio of any deterministic ic mechanism to characterize the
landscape of our research  one bound is    which holds for equal length jobs  the other
bound is ln      o     which holds for unequal length jobs  where  is the maximum ratio
between lengths of any two jobs  we then propose a deterministic ic mechanism and show
that such a simple mechanism works very well for two models      in the preemption restart
model  the mechanism can achieve the optimal competitive ratio of   for equal length jobs
 

and a near optimal ratio of      
    o     ln  for unequal length jobs  where         
is a small constant      in the preemption resume model  the mechanism can achieve the
optimal competitive ratio of   for equal length jobs and a near optimal competitive ratio
 within factor    for unequal length jobs 

   introduction
online scheduling has been widely studied in the literature  baruah  koren  mao  mishra 
raghunathan  rosier  shasha    wang        baruah  haritsa    sharma        porter 
      zheng  fung  chan  chin  poon    wong        ting         where each job is characterized by a release time  a deadline  a length  and a value for its successful completion
by the deadline  inspired by emerging areas like computational economics and cloud computing  we consider a strategic setting of the online scheduling problem  where each job is
owned by a self interested agent and she may have the incentive to manipulate the schedulc
    
ai access foundation  all rights reserved 

fichen  hu  liu  ma  qin  tang  wang   zheng

ing algorithm in order to be better off  to be specific  the agent may deliberately delay the
release time of her job  inflate its length  and misreport its value and deadline 
given this situation  a carefully designed online scheduling mechanism is needed to
regulate the strategic behaviors of the agents and to  approximately  optimize some system
objectives  in this work  we focus on the maximization of social welfare  i e   the total
value of completed jobs   we use competitive analysis  lavi   nisan        to evaluate
the performance of such a mechanism  which compares the social welfare implemented by
the mechanism  without any knowledge of all future jobs  with that of the optimal offline
allocation  with the knowledge of future jobs  
in this work  we consider two scheduling models  the preemption restart model  ting 
      and the preemption resume model  porter         once preempted  jobs in the first
model have to restart from the beginning  while jobs in the second model can resume from
the break point  since preemption is always assumed in this work  the two models are also
referred to as restart model and resume model  respectively  and their involved jobs are
called non resumable and resumable  respectively 
    problem formulation
we consider online scheduling models with infinite time period t   r    suppose there
is a single machine that processes at most one job at any given time  jobs come over
time  and we use j to denote the set of jobs  each job j  j is owned by a self interested
agent  which is also denoted as j for simplicity   and it is characterized by a private type
j    rj   dj   lj   vj    t  t  r    r     where rj is the release time    dj is the deadline 
lj is the length  i e   the processing time   and vj is the value if the job is completed by its
deadline 
a resumable job j is completed if and only if it is processed for lj time units in total
between its release time rj and deadline dj   while a non resumable job j is completed if and
only if it is processed for lj consecutive time units between its release time rj and deadline
dj  
let    maxi jj llji be the maximum ratio between the lengths of any two jobs  for
simplicity  we assume all job lengths are normalized  i e   lj        for all j  j  and assume
 is known in advance following the practice in the work of chan et al         and ting
       
we study direct revelation mechanisms  in which each agent participates by simply
declaring the type of her job j    rj   dj   lj   vj   at time rj   we use  to denote the profile
of reported types of all the agents  given the declared types of the agents  a mechanism
m is used to schedule allocate the jobs and determine the payment of each agent  here we
only consider reasonable mechanisms which     do not schedule a job after its reported
deadline and     do not schedule a job once it has been processed for a reported length 
given a certain mechanism m and a job sequence   we use qj    t  to denote whether
job j is completed by time t  if it is completed  qj    t       otherwise qj    t        then
   it is also referred as weighted throughput in the scheduling literature 
   note that release time is also referred as arrival time in the online auction literature  parkes         it
is the earliest time at which the agent has full knowledge of her job  thus it is the earliest time the job
is available to the scheduling process 

   

fiefficient mechanism design for online scheduling

the value that agent j extracts from the mechanism can be represented by qj    dj  vj   and
p
the social welfare of the mechanism can be represented by w  m      j qj    dj  vj  
let pj    denote the amount of money that the mechanism charges agent j  we assume that agents have quasi linear preferences  nisan         i e   the utility of agent j is
uj    j     qj    dj  vj  pj    
since agents are self interested  they may misreport their types in a strategic way  it is
easy to see that the misreport of a shorter length is a dominated strategy  otherwise  her
job cannot be completed even if it is scheduled by the mechanism  since lj   lj    therefore 
the agents will not underreport the lengths of their jobs  similar to the work of porter
        we assume that the system will not return a completed job to agent j until dj    in
this way  we restrict the agents report to be dj  dj   in addition  we assume that no agent
has knowledge about her job before its release time  so we also have rj  rj  
considering the potential misreport of the agents  we are concerned with incentive
compatible and individually rational mechanisms  a mechanism is incentive compatible
 ic  if  for any agent j  regardless of the behaviors of other agents  truthful reporting
her own type maximizes her utility  a mechanism is individually rational  ir  if for each
job j  truthful reporting leads to a non negative utility  in addition  we would also like the
mechanism to  approximately  maximize social welfare  we say a mechanism m is  strictly 
c competitive if there does not exist any job sequence  such that c  w  m      w  opt    
where opt denotes the optimal offline mechanism    sometimes we also say that m has a
competitive ratio of c 
    related work
the online scheduling problem has been studied in both the non strategic setting  lipton  
tomkins        borodin   el yaniv        bar noy  guha  naor    schieber        zheng
et al         kolen  lenstra  papadimitriou    spieksma        ting        nguyen       
 whose focus is algorithm design  and the strategic setting  nisan   ronen        lavi  
nisan        friedman   parkes        porter        hajiaghayi  kleinberg  mahdian   
parkes        parkes         whose focus is mechanism design  
non strategic setting  for the case of       a lower bound of   on the competitive
ratio of any deterministic algorithm is given by woeginger         a      competitive
deterministic algorithm is constructed by zheng et al         for the restart model  and
a      competitive deterministic algorithm is designed by kim        for both restart and
resume models  a   competitive randomized algorithm is introduced for restart model in
the work of fung et al          and a lower bound of       is provided in the work of epstein
and levin         by restricting release time and deadlines to be integers  a randomized
e
algorithm with competitive ratio e 
       is proposed by chin et al          and a

deterministic algorithm with competitive ratio               is proposed by englert et
   actually  it should be viewed as a decision by the mechanism designer rather than an assumption 
this decision is crucial to ensure the incentive compatibility which we will see later 
   since we only care about the social welfare performance of opt in the competitive analysis  which only
depends on the schedule  regardless of the payments  we also call opt as optimal offline allocation  or
simply optimal allocation 

   

fichen  hu  liu  ma  qin  tang  wang   zheng

al          the best lower bounds currently are      for randomized algorithms  chin  
fung        and       for deterministic algorithms  hajek        

for general values of   a lower bound of  on the competitive ratio of any deterministic
algorithm is derived in the work of chan et al          the lower bound is improved to

 
     
  ln     by ting and fung         and an algorithm with competitive ratio log    o 
is given for the restart model  the scheduling problem with discrete time is considered in
the work of durr  jez and nguyen         in particular  the lower bound is improved to


model  a
ln   o     and a      o     ln   competitive algorithm is designed for the resume q
randomized algorithm with competitive ratio o log    and a lower bound of   logloglog   
is provided by canetti and irani        
assuming the maximum ratio between the value densities  value divided by length  of

any two jobs is bounded above by a known number   a          competitive algorithm is

given by koren and shasha         the bound         is optimal as a matching lower
bound is given by baruah et al         
there is also a rich literature concerned with non preemptive scheduling  lipton  
tomkins        goldman  parwatikar    suri        goldwasser        ding   zhang 
      ding  ebenlendr  sgall    zhang        ebenlendr   sgall         however  it can
be easily verified that an algorithm with bounded competitive ratio cannot be designed in
the setting of unrestricted values and arbitrary release time  therefore  the most common
assumption added in the non preemptive scheduling problem is proportional values  i e   the
value of each job is proportional to the length  in the work of goldman et al          a
tight upper and lower bound of   are given for the deterministic competitiveness when all
jobs have equal length  thus  equal value   and a   blog  c      competitive randomized
algorithm is provided for general value of   matching the  log   lower bound  lipton  
tomkins        within a constant factor 
strategic setting  in the work of lavi and nisan         by assuming integer time
points  a scheduling problem for the      case is studied  the authors show that there
is no incentive compatible mechanism which can obtain a constant competitive ratio  if
the payment must be made when the job is completed  hence  they propose a family of
semi myopic algorithms with competitive ratio    under the assumption of semi myopic
strategies  in the work of hajiaghayi et al          a specific scheduling problem in which
     is considered under the restart model  a deterministic ic mechanism with competitive
ratio   is designed  and a lower bound of   is given to any deterministic ic mechanism 
however  to our knowledge  the case      in either the restart model or the resume model
has not been studied from the perspective of mechanism design  considering the incentive
issues   our work fills this gap 
assuming the maximum ratio between the value densities  value divided by length  of
any two jobs is bounded above by a known number   an ic mechanism with a competitive


ratio of             is designed by porter         and it is proved that             is a
lower bound of the competitive ratio for any deterministic mechanism 
recently  online scheduling mechanisms have been investigated in cloud computing  zaman   grosu        azar  ben aroya  devanur    jain        zhang  li  jiang  liu 
vasilakos    liu        lucier  menache  naor    yaniv        mashayekhy  nejad  grosu 
  vasilakos        wu  gu  li  tao  chen    ma         in these works  mechanisms are
   

fiefficient mechanism design for online scheduling

designed to allocate computational resources to users  and users can use those virtual machines during the entire period requested  in these model  jobs are non preemptive  which
differs from our setting 
    our results
our main results can be summarized as follows 
first  in order to characterize the boundary of our research  we derive two lower bounds
on the competitive ratio for any online deterministic ic mechanism  one bound is    which
holds for the situation where all the jobs have equal length  i e          this bound
improves the previous lower bound of    hajiaghayi et al          the other bound is

ln       o     which characterizes the asymptotical property of the competitive ratio when
the variance of job lengths  i e     is sufficiently large 
second  we design a simple mechanism   and prove that in both the restart and resume
models   is not only ic  but also achieves good social welfare 
 in the restart model    has a competitive ratio of                 when  is small  in
 

particular  the ratio is   for        and      
    o      ln  when  is large      
is enough   where          is a small constant 
 in the resume model    has a competitive ratio of                    when  is
 

small  in particular  the ratio is   for        and      
    o      ln  when  is large
      is enough   which is just slightly worse than that for the restart model  within
a factor of    
it is also worth mentioning that 
 comparing with the lower bounds  we can see that  in both the restart and resume
models    is optimal for equal length jobs         and near optimal  within a
constant factor  for unequal length jobs 
 in comparison with the best known algorithms without considering incentive compat 
 
 
ibility  asymptotically speaking    improves the best known ratio log
  o     ting 
 

      in the restart model to      
    o      ln    and improves the best known ratio
 

   o     ln  durr  jez    nguyen        in the resume model to      
   o     ln   
thus even if one does not care about the strategic aspect    would still be a very
nice algorithm to use 

note that designing mechanisms for online scheduling problems is generally difficult
since it combines the challenges of mechanism design  i e   ensuring incentive compatibility 
with the challenges of online algorithms  i e   dealing with uncertainty about future inputs  
we would like to highlight the main techniques used in this work to tackle these challenges 
    the allocation rule of mechanism   uses a carefully selected function to trade off
three key elements  value  length  and degree of completion  the trade off function is
delicate in the sense that it ensures both the efficiency and the monotonicity which is
crucial to the incentive compatibility 
   

fichen  hu  liu  ma  qin  tang  wang   zheng

    in order to obtain good competitive ratios for the resume model  we design two nontrivial virtual charging schemes to bound the performance of the proposed mechanism 
the integral charging scheme and the segmental charging scheme 
while we focus on single machine model in this paper  our work extends to multiple
identical machines  one way of the extension is similar to the work of lucier et al         
in which it is assumed that at most h machines can be allocated to each job at any given
time  and the parameter h stands for a common parallelism bound of the system  the
details of this extension can be found in appendix e  another way to extend our results to
multiple identical machines is to assume that each job j needs a fixed number of machines
when it is processed  please refer to our working paper  ma  zheng  qin  tang    liu 
      for more details  

   lower bounds
in this section  we present two lower bounds on the competitive ratio of any deterministic
ic mechanism  which hold for both the restart and resume models 
the competitive analysis can be interpreted as a game between the designer of the online
mechanism and an adversary  given mechanism     the adversary selects the sequence of
jobs that maximizes the competitive ratio  the ratio of the social welfare obtained by an
offline optimal algorithm over the social welfare obtained by     therefore  the key of
proving lower bounds is to construct subtle adversary behaviors 
we first introduce two notions  the dominant job and the shadow job 
definition      dominant job   for a deterministic ic mechanism with competitive
ratio c  job i is called a dominant job at its release time ri   if and only if vi is larger than
c times the total value of all other jobs whose release time is no later than ri  
it is easy to see that  in order to obtain a reasonable competitive ratio  if a dominant job
i has a tight deadline  then the mechanism must schedule i at its release time ri   otherwise 
consider the case in which no more jobs are released after ri   in this case  the mechanism
cannot obtain a competitive ratio of c if it gives up the dominant job i 
definition      shadow job   suppose a job i has a tight deadline  i e   di   ri   li   then
job i  is called a shadow job of i  if i  has the same parameters  ri   li   vi   as i  except for a
later deadline  d i   di   
clearly  the shadow job i  is more flexible and can be completed later  as for shadow
jobs  we show that the following lemma holds for any ic mechanism with a non trivial
competitive ratio 
lemma      shadow job argument   for a deterministic ic mechanism  with a
non trivial competitive ratio c  if  completes a job i  with tight deadline di   under some
scenario i  then under scenario i     which substitutes some shadow job i  for job i   must
also complete job i  at time di  
   in the working paper  we only consider the restart model  and ignore the misreport of release time or
deadline 

   

fiefficient mechanism design for online scheduling

proof  suppose  has not completed job i  at di under scenario i     we could consider a subsidiary scenario i      which includes all jobs in scenario i   and adds on several dominant jobs 
remember that we call some job dominant if its value is sufficiently large  see definition      
these dominant jobs are released one by one at di   di              di   bd i  di c respectively 
and denoted as               bd i  di c accordingly  where di is the deadline of job i and d i is the
deadline of shadow job i    whats more  each of these dominant jobs is of unit length and
has a tight deadline  we claim that  to achieve the desired  non trivial  competitive ratio 
 must complete all these dominant jobs  thus the time interval  di   d i   is occupied   the
reason is as follows  if  does not schedule any dominant job j                 bd i  di c   then
we consider a scenario i       which only includes jobs with release time no later than di   j
in i      since scenario i     is indistinguishable from i    up to time di   j  we know  does not
schedule the dominant job j in scenario i       hence cannot obtain a competitive ratio of c  
because the subsidiary scenario i    is indistinguishable from scenario i   up to time di  
job i  will not be completed at di   furthermore  because of the existence of dominant jobs 
job i  will not be completed finally  however  if job i  falsely declares its type to be the
same as that of job i  i e   misreports its deadline to be di   it would be completed at time
di and be better off  contradicting the incentive compatibility   
in the following  we will derive lower bounds leveraging lemma      first  the following
theorem specifies a lower bound when jobs have equal length  i e          note that our
result concerns the strategic setting  while woeginger        shows that the competitive
ratio of any deterministic algorithm in the non strategic setting is at least   
theorem      when       no deterministic ic mechanism can obtain a competitive ratio
less than   
to prove the theorem  in addition to using an adversary argument similar to that in the
work of woeginger         we need to further perturb the job sequence and leverage the
shadow job argument 
intuitively  we construct a special job set  in which tight deadline jobs are released one
by one  and any two jobs collide with each other  that is  the deadline of one job is later than
the release time of the other  and under any mechanism  it is impossible for these two jobs to
be both completed   the values of these jobs are carefully selected such that a later released
job is more valuable than the earlier one  predecessor   and the value difference between
such two neighboring jobs is constrained by a small enough additive constant  furthermore 
in such a job set  the values of the first and last jobs are set to obey a specific amplification 
along with the execution of any mechanism  the adversary would release a series of such job
sets  once the mechanism completes one job  the adversary stops releasing any job  the
subtleness lies in choosing the time to release such job sets  once the mechanism almost
completes some job a in a job set  the adversary may release a new job set whose jobs
all collide with job a but do not collide with the predecessor of job a  in this way  if the
mechanism would not abandon the current job a but complete it  then there should be an
optimal allocation which completes      several jobs in the previous job sets      the most
   the above scenario contradicts the monotonicity condition  see a strict definition at start of section      
and theorem      of the work of parkes        shows that monotonicity is necessary for incentive
compatibility 

   

fichen  hu  liu  ma  qin  tang  wang   zheng

valuable job  i e   the last job  in the newly released job set  and     the job a   however 
the mechanism can only complete job a  this discrepancy leads to the lower bound of
competitive ratio  the detailed proof can be found below 


   

set
r 


   

vq   w



   
v 
v    v

t

figure    structure of set  v  w  t   
proof  suppose by contradiction that there exists a deterministic ic mechanism  which
achieves a competitive ratio of     for some           we adopt the notation of set
introduced by woeginger         define set  v  w  t     for w  v      t     and      
as a set of jobs                q  satisfying the following properties 
    v    v  vq   w  and vj   vj    vj    for    j  q     hence  q can be any integer
no less than d wv
 e  we call  as the magnifying parameter of a set  
    lj   dj  rj      j  i e   all jobs are unit length and have tight deadlines 
       r         rq   t   d         dq   thus  any two jobs collide with each other  we
call t as the split point of a set  
we define the release time of a set as the release time of its first job  figure   shows the
visual structure of set  v  w  t     the adversary behavior is as follows 
adversary behavior  the adversary will release some set s one after another depending
on   first  set    set              is released at time    where          and       
from the definition of set   we know that the first job in set  has value    the last job
in set  has value   and the value difference between any two neighboring jobs is upper
bounded by  
next  we specify      when will the adversary release a new seti  i      and     how
the adversary sets the parameters of seti  i      for      we specify by algorithm    the
notations used in algorithm   are detailed in table   
   in the proof  we construct a new scenario  in which job a is perturbed to have later deadline  thus can
be completed later  we make use of the shadow job argument in the analysis  which makes the lower
bound increased by    compared with the previous lower bound in the non strategic setting 

   

fiefficient mechanism design for online scheduling

seti
job ij
rij   dij and vij
wi
ti
i
job i
job i

table    summary of notation in the proof of theorem    
i th released set   in full  set  vi    wi   ti   i  
j th job in seti  
release time  deadline and value of job ij 
value of the last job in seti
split point of seti
magnifying parameter of seti
trigger job in seti 
the preceding job of i in seti 

algorithm    the adversary behavior
   initial  release set  at time   
   while  has not completed any job  do
  
if  almost completes the j th job  j     in seti  precisely   has been executing
job ij for di j    rij period of time since rij    then
  
release seti   at time di j    
  
else
  
do not release any other job 
  
end if
   end while
it is worth mentioning that   i  seti   is only triggered when a non first job in seti
is almost completed  and we call such a job a trigger job   ii  no more set will be released
once some job is completed by  
suppose the trigger jobs in set            seti  are named             i successively  accordingly  we denote the job with release time just earlier than each trigger job as            i 
and we call them preceding jobs  from line   of algorithm    we know that each new seti
is released at the deadline of i  note that trigger job i and its preceding job i are both
located in seti   
we now specify the parameters of seti   set  vi    wi   ti   i    i     remember that
set  is defined as set               in which          and       
 the adversary sets vi  equal to the value of the trigger job i in seti    that is
vi   vi    note that vi  is the value of the first job in seti  
pi 
 the adversary sets i     i   wi   max      vi   j  
vj    vi    for i     and
w         v    
 the adversary sets ti    di   di      where di and di are deadlines of trigger job i
and its preceding job i  note that by setting ti    di   di      all jobs in seti are
released after di but before di   hence  all the new jobs collide with trigger job i and
none of them collides with job i 
figure   illustrates how the adversary releases a new set by an example  in this
example   almost completes the j th job  j     in seti   seti   is released at the
deadline of job i j      and the value of the first job of seti   is equal to vij  
   

fichen  hu  liu  ma  qin  tang  wang   zheng


   

   
ri 


   

seti

   

   
vi 

seti  

   
vij
vi j  

     

v i       vij

ti  
figure    an example of seti   and seti

according to algorithm    if  always gives up trigger jobs and switches to schedule
some job in the newly released set   the adversary will release new set s one after another 
one may wonder whether the adversary will release new set s infinitely  in other words 
will subscript of seti tend to infinity 
the answer is no  which can be seen from the definition of wi   since           by
lemma     of the work of woeginger         after a finite numberp denote k  of steps  vk 
must be no less than the corresponding sum term      vk   k 
j   vj    and wk   vk 
must hold  remember that vk  and wk denote the value of first job and last job in setk
respectively  thus there exists only one job in setk   according to algorithm    no matter
whether  completes this job or not  the adversary will not release any other job  therefore 
setk is the ultimate set and job k  is the ultimate job 
so far  we have clarified the adversarys behaviors  next  we show how to derive the
lower bound based on such an adversary 
according to algorithm   and the structure of set   we know the adversary allows 
to complete at most one job  actually  the completed job can be      the first job in set 
 i e   job          a trigger job i      i  k  or the first job in seti      i   k  i e   job
i    or     the ultimate job k   let us analyze them one by one 
    if  completes job     then we consider a scenario in which job    is substituted by its
shadow job       whose deadline is late enough  i e   even if it started being executed
from the deadline of last job in set    it still can be completed in time   according
to lemma      mechanism  must complete job     at time    and thus abandon the
last job  with value w      in set    therefore  it only obtains a social welfare of
v        however  the optimal allocation  which first completes the last job in set 
and then job       obtains a social welfare of       this contradicts the fact that 
has a competitive ratio of      since                          
    if  completes a trigger job i or a job i      i  k  without loss of generality 
we denote such job as job ij  and we know vij   vi   vi    if  completes job ij 
   i  k  then similarly  we consider a scenario in which job ij is substituted by
its shadow job  ij     whose deadline is late enough  by lemma       must complete
job  ij   at time dij   obtaining a social welfare of vij   vi   vi    however  social
welfare of the optimal allocation
p which completes jobs
p           i  the last job in seti  
and then job  ij     is at least ij   vj   wi   vij   ij    vj   j      wi   vij  
   

fiefficient mechanism design for online scheduling

p
          vi   i 
j   vj    vij         vi             vi    this
contradicts the fact that  has a competitive ratio of     

pi

j   vj 

    if  completes the ultimate job k   we consider a scenario in which the adversary
releases two copies of job k  in setk   clearly  in this scenario   will choose one
copy to complete  we denote the completed copy as job  k    and the other as job
 k      we then consider a scenario in which job  k    is substituted by its shadow job
 k      whose deadline is unit time later than that of job k   according to lemma     
 must complete job  k    at dk  and obtains a social welfare of vk    however  the
 
optimal allocation  which completes
pk jobs            k  job  k  
pk     and then job  k     can
obtain a social welfare of at least j   vj   vk    vk    j    vj   j      wk   vk   
pk
pk 
j   vj    vk          vk             vk    remember
j   vj           vk  
p
that in setk   we have vk    wk        vk   k 
j   vj    this contradicts the fact
that  has a competitive ratio of     

second  to understand the asymptotic property of the lower bound when  is large  we
construct scenarios inspired by the example of durr et al         and obtain the following
theorem 
theorem      when  is sufficiently large  no deterministic ic mechanism can obtain a
competitive ratio less than ln      o     in particular  no deterministic ic mechanism
can obtain a competitive ratio less than ln        for      
proof  for convenience of analysis  we denote   
let us consider the following adversary behaviors 


ln   

r   de     and assume      

adversary behavior  at time    a long job b with type b             is released  as
well as two short jobs a  and a  with the same type               moreover  at each integer
moment    t       if the mechanism schedules only job b in     t   then two short jobs
at   and at   of unit length are released at t  with tight deadline t      and no new job is
released otherwise  the values of jobs at and at satisfy 
 
 
if t    
v at     v at    
   
t
 
e
if t   
note that job at and job at are of the same type  and the cases analyzed below for at  can
be naturally applied to at   
according to the adversary behavior  we know the adversary allows  to complete at
most one job  actually  the completed job can be      a job at  with t          a job at 
with t     or     job b  we analyze these three cases as follows 
    if the mechanism schedules a job at  with t      then we consider a scenario that
includes jobs b  a    a            at      at      at  and job a t    here  job a t  with type  t  
                is a shadow job of at    according to lemma      the mechanism must
complete job a t  at t  and only obtains a social welfare of    however  in this scenario 
the optimal mechanism will complete job b first  and then schedule a t  at time  and
complete it  with the optimal social welfare       so the ratio is      
   

fichen  hu  liu  ma  qin  tang  wang   zheng

    if the mechanism schedules a job at  with t     then we consider a scenario that
includes jobs b  a    a            at      at      at    and job a t    here  job a t  with type  t  
   t          et        is a shadow job of at    according to lemma      the mechanism
should schedule job a t  at time t  and complete only a t    thus  the mechanism
only obtains a social welfare of v a t     however  one of the optimal mechanisms will
schedule and complete all jobs at for t              t    and then schedule a t  at time t 
and complete it  resulting in the following optimal social welfare
t 
x

de     

e

t
 


 e

t 
 


 r 

t 
x

e

t
 


 e

t 
 


z

t 

r

t

t 

e      e   

r

t r  

t de

t 

r 

t 

 r  e            e      f    r          e      f    r          v a t    
r

here  we have introduced a function f defined as f    r   r  e      considering
   ln and r        we have   r          as ex      x and both sides converge
to   as x approaches    we have
r

f    r    r  e     r   

r
    


   

and f    r  approaches   as  grows  so the ratio is       o    
    if the mechanism schedules and completes job b  obtaining a social welfare of  
then we consider a scenario that includes jobs a    a            a   a and job b     here  job
b   with type b                 is a shadow job of b  similarly  we claim that an
ic mechanism should schedule job b   at time   and complete it at time   thus 
the mechanism only obtains a social welfare of v b      however  one of the optimal
mechanisms will schedule and complete all  small jobs at from t     to      and
then schedule and complete job b     this leads to a social welfare at least
z 


x
x
t
t
t
 
 
de     
e      r  
e      
e     r  
r

t r  

t de
r
 



 



 


  e
     f    r    e
     f    r    eln     

ln 
ln 
 f    r           f    r      
     f    r      
    v b     
e
e
e
 r  e

   

when       we have e  ln   then the above equation is larger than f    r   
      v b      therefore the ratio is       o    
combining the three cases together  we prove the nonexistence of   ln      o    competitive mechanisms  since f    r        when       the competitive ratio is at
least ln        for      

   mechanism design
in this section  we describe a simple mechanism    whose allocation and payment rules
are given in algorithm     which works surprisingly well for both the restart and resume
   

fiefficient mechanism design for online scheduling

models  and handles the settings with different values of  in a unified framework  in
contrast  previous works  durr et al         need to design separate and very different
algorithms to deal with different values of  
    the mechanism  
before introducing our mechanism  we first introduce the concept of the valid active time
of an uncompleted job j  until time t  denoted as

 
t  min s x t      j  t    s  t    for the restart model
ej  t     r t
for the resume model
   x s    j ds 

   

where x t  is the mechanisms allocation function  which maps each time point to an available job  or to   if the machine is idle   and    is an indicator function that returns  
if the argument is true  and zero otherwise  note that ej    can also take a vector  as an
argument  for example  ej    t  is shorthand for the ej  t  for the job sequence  
it can be seen that in the restart model  at time t  if a job j has received an allocation
at time t    t and has not been preempted after that  then ej  t    t  t    in the resume
model  ej  t  is the accumulated processing time of job j until time t 
we say that a job j is feasible at time t if     its reported release time is before t      it
has not been completed yet  and     it has enough time to be completed before its reported
deadline  i e   dj  t  lj  ej  t   we use jf  t  to denote the set of all feasible jobs at time
t 
according to algorithm    at any time t    assigns a priority score  vj   lj ej   t   
to each feasible job j  jf  t   and always processes the feasible job with the highest
priority  ties are broken in favor of the job with the smaller rj    here  is located in       
and will be determined later during the competitive analysis  the payment rule of   is
essentially the critical value payment  parkes         which is similar to that of the secondprice auction  hence  the payment is equal to the minimum bid the agents have to make to
remain allocated   in the following pseudocode  j denotes the reported types of all jobs
other than j 

   in equation    since s t is a valid candidate for the minimization  if there does not exist an s  s t  
x t      j  t    s  t  in the restart model  then ej  t      
   note that we use the critical value payment  so the payment of a completed job j depends on other
jobs types between rj and dj   if our mechanism allows returning completed job before its reported
deadline  the calculation of critical value payment will face trouble  it is possible that agent j misreports
a much later deadline to obtain a cheaper payment  but his job is completed and returned before its
true deadline  that is the reason why we restrict our mechanism to return completed job at its reported
deadline  it is worth mentioning that  if the payment must be made when the job is completed   lavi
  nisan        has shown that there is no incentive compatible mechanism which can obtain a constant
competitive ratio 

   

fichen  hu  liu  ma  qin  tang  wang   zheng

algorithm   
allocation rule
for all time t do
if jf  t      then
x t   arg maxjjf  t   vj   lj ej   t   
else x t    
end
payment rule
for all job j do
if qj    dj       then
pj      min v    qj    rj   dj   lj   v      j    dj       
j

j

else pj       
end
the intuition of our mechanism is two fold  first  to ensure efficiency  one must trade
value against length  a job with a larger value has a higher priority  and a job with a larger
remaining length has a lower priority    uses a simple priority function to achieve the
tradeoff  as can be seen  the priority score vj   lj ej   t  of a job is positively correlated
with its value and negatively correlated with its remaining length  second  to ensure ic 
  uses the critical value payment rule and a monotone   allocation rule 
note that both the allocation rule and the payment rule can be implemented efficiently 
for the allocation rule  it is enough to consider the time point when some new jobs arrive
or some existing jobs are completed  and  we give algorithms in appendix a to show that
the payment for each agent can be computed in polynomial time 
clearly  because of the critical value payment rule    is individually rational  in the
following subsection  we prove its incentive compatibility 
    incentive compatibility
we call an allocation rule of a mechanism monotone  if a job with truthfully reported type
j    rj   dj   lj   vj   cannot be completed in the mechanism  then a dominated   declaration
of its type j    rj   dj   lj   vj   cannot make it completed either 
according to theorem      of the work of parkes         in order to establish the
truthfulness of a mechanism  it is enough to prove the monotonicity of its allocation rule 
theorem      mechanism   is incentive compatible  in both the restart model and resume
model 
proof  we prove the monotonicity of the allocation rule of     assume a job j is not
completed under   when j is truthfully declared  we denote this case as t rue   we now
show that j cannot be completed either by declaring j    rj   dj   lj   vj    where rj  rj  
lj  lj   dj  dj and vj  vj   and we denote any such case as f alse 
suppose job j has ever been executed for k     times in the t rue case  we define the
following points in the execution of job j  let tsi and tpi be the ith time that job j starts
    we have a strict definition of monotonicity at start of section     
    we say a type j is dominated by type j  denoted as j  j   if rj  rj   dj  dj   
lj  lj and vj  vj  

   

fiefficient mechanism design for online scheduling

execution and is preempted respectively  where i                 k  and let ta   arg inf t  ej  t   
dj  t   lj   be the time that job j is abandoned  if job j is never started  then we set
ts    tp    ta  
we also refer to p    rj   ts      tp    ts            tpk   ta     p   p         pk as the pending period
of job j  and a    ts    tp      ts    tp            tsk   tpk     a   a         ak as the executing period of
job j 
we first consider monotonicity with regard to rj   regardless of other variables  clearly 
from the definition of ta   declaring rj   ta could not cause the job to be completed  thus 
we can restrict our attention to rj   rj   ta     p  a 
a necessary condition for job j to be completed  in f alse  is that job j should be
executed sometime in the period p   however  according to lemma      see below   job j
cannot be executed in p   therefore  declaring rj  rj cannot cause the job to be completed 
intuitively  lemma     says that  under case t rue and f alse  the set of jobs that are
scheduled in the period p must be the same  thus  job j cannot be executed in period p  
we then consider dj   lj and vj   the proof is essentially the same as the proof of rj  
declaring dj  dj   lj  lj and vj  vj will not improve job js priority  and as a result  there
cannot be a change in the execution of jobs in the pending period p   so declaring dj  dj  
lj  lj and vj  vj cannot cause the job to be completed  this proves that the allocation
rule of   is monotone 
in the following  we formally introduce lemma      which is used in the above theorem 
for this lemma we introduce some additional notation  under case t rue and f alse  denote
by j and j respectively the set of jobs which have ever been executed in p   and denote
by i and i respectively the set of jobs which have ever been pending in a 
lemma          i  j         i  j         j   j 
proof  consider a job i  i  according to the defintion of i  under case t rue  job i has
lower priority than job j in period a  p  
relation     means that  under case t rue  job i cannot be executed in period p   it is
obvious  since job j  with higher priority than i  is pending in period p  
relation     means that  under case f alse  job i cannot be executed in period p either 
we prove this by contradiction  suppose job i is executed at some time point in p   we
denote ti   min t  p  x t    i   and assume ti  pn for    n  k  we have an observation
for the pending period pn      n  k 
h n 

observation      in pending period pn   if   schedules jobs by a sequence   of jn        jn
 h n      is the number of such active jobs in pn   under case t rue  then we know     the
h n 
release time of each job jn        jn is in the period pn   in particular  the release time of job
h n 
jn  in pn  n     is exactly time tpn     each job jn        jn is either completed or abandoned
in pn   and there is no idle time in pn  
here  we use fj  t  to denote the priority of job j at time t  suppose that  under case
h n 
t rue  it is job jni  one of jn        jn   that is executed at ti   and its priority is fjni  ti    then
    a job may appear more than once in the sequence if it is preempted and resumed restarted later 

   

fichen  hu  liu  ma  qin  tang  wang   zheng

under case f alse  since i is executed at ti   according to observation      we can deduce
that the priority of job i at time ti   i e   fi  ti   must be larger than fjni  ti   
therefore  we can deduce that i must have been executed sometime in the period ui  
 a       an    otherwise  i should also be executed at time ti under case t rue  contradicting
the fact that i  i  similarly  we denote si   min t  ui  x t    i   and assume si  am
for    m  n 
we claim  under case f alse  the priority of job i at time si   i e   fi  si   satisfies the
inequality as below 
 
p
fjni  ti      an    an      am      tm si    
fi  si    
p
fjni  ti      tm si    

if m  n    
if m   n 

otherwise  the priority of job i at time ti is at most fjni  ti    consider the case that all the
periods  si   tpm    am             an    an are allocated to i  
according to the definition of si   we know si is the first time that i is executed in period
a  therefore  the priority of job i at si remains the same when shifting from case t rue
to case f alse  however  under case t rue  job j is executed at time si  hence  with a
priority larger than fi  si     and all the periods  si   tpm    am             an    an are allocated to
j  therefore  at time ti   job j will have a priority larger than fjni  ti    contradicting the fact
that jni is executed at time ti  
relation     means that  no matter case t rue or case f alse  the jobs that are executed
in the period p are the same  relation     can be derived naturally from relation     

   competitive analysis
in this section  we show that mechanism   performs quite well in terms of social welfare
by comparison with the optimal offline allocation  which has full knowledge of the future
jobs at the beginning of the execution 
to perform the competitive analysis  we need to design virtual charging schemes  under
a certain virtual charging scheme  for every job j completed by the optimal allocation opt 
we charge its value  or partial value  to some job f completed by     if this virtual charging
scheme satisfies the property that every job f completed by   receives a total charge of
at most cvf   then we succeed in showing that   has a competitive ratio of at most c 
designing an ingenious virtual charging scheme is crucial to the competitive analysis  in
the following  we will design different virtual charging schemes to obtain the competitive
ratio of   for the restart model and the resume model respectively 
as we use a parameter  in the priority function of mechanism     we first derive
competitive ratios as functions of   we will specify later  in section      how to choose
a suitable   with respect to   to optimize the performance of     and derive competitive
ratios in terms of  
here  we introduce some notation which will be used in both section     and section     
denote by                f   the sequence of jobs completed by   over time  for each job f in
this sequence  let tf be the time when job f is completed  and for convenience denote t      
divide the time into f     intervals if    tf     tf    f                 f   and  tf      
   

fiefficient mechanism design for online scheduling

    analysis of the restart model
we study the restart model first  we assume  without loss of generality  that the optimal
allocation opt does not interrupt any allocation  since all interrupted jobs are non resumable 
we have the following theorem 
theorem      for the restart model    has a competitive ratio of

 
 

 

 


    

proof  we introduce the virtual charging scheme as follows  for any completed job j in
opt  if it is also completed in mechanism     then its value is charged to itself 
otherwise  i e   job j is not completed by      we consider the time sj at which j begins
execution in opt  note that opt does not interrupt any allocation  so j is exactly allocated
the time period  sj   sj   lj    then sj must be in some time interval if  recall if    tf     tf    
and we charge the value of j to f   define j    tf  sj to be the time amount between sj
and tf   as job j is feasible at time sj   according to lemma      we know that the priority
jobs j at time sj is at most vf  tf sj   vf  j   in the meanwhile  the priority of j at time
sj is vj  lj   we have vj  lj  vf  j   i e   vj  vf  j lj   we defer the formal statement and
the proof of lemma     to the end of this subsection 
we now calculate the maximum total value charged to a completed job f in     in the
time interval if   denote by                m   the sequence of jobs in opt whose starting time sj
belongs to if and ordered as s    s         sm   remember that we define j    tf  sj to
be the time amount between sj and tf   then it is clear that we have                  m
and j  lj  j  for    j  m  since j is allocated and completed during time interval
 sj   sj     furthermore  as the job lengths are normalized  i e      lj    we can deduce
that 
 
 
for j    
j 
   
j    for j    
recall that      p
and f may also be completed in opt  therefore the total charge to
job f is at most vf   m
j   vj   which is upper bounded by
vf   vf

m
x
j  



j lj

 vf      

l 

 

m
x



j 

   vf      

l 

 

j  

j  

 
 
this shows that mechanism   is    

m 
x

 


j

    vf      



 


x
j  

     competitive 

 
actually  the competitive ratio obtained in this way is tight  i e   the ratio  
       
is best possible for     we give an example in appendix b to show tightness 

lemma      for any time point sj  if   if job j     f   is feasible at time sj   then the
priority of j at sj is at most vf  tf sj   moreover  the value of j  vj   is at most vf  tf sj lj  
proof  note that  sj is in time interval if   and according to the definition of if   we know
that f is the unique job that is completed in if by     now we prove the lemma by
enumerating all possible cases 
    if the executing job at sj is job f   then we know that the priority of job f at time
sj is exactly vf  tf sj  because the priority of job f at time tf is vf    clearly  the priority
of j at sj is not larger than that of job f   and thus not larger than vf  tf sj  
   

 j   

fichen  hu  liu  ma  qin  tang  wang   zheng

    if the executing job at sj is not job f   then we assume that   executes job j            jk
and f successively   in the time period  sj   tf    where k     since f is the unique job
completed in if   we can deduce that  j  is preempted by j    j  is preempted by j       jk is
preempted by f   and finally f is completed at time tf   denote             k as the time points
at which j            jk are preempted respectively  we also denote fj  t  as the priority of job
j at time t  we now use backward induction  first  we know that the priority of job jk at
k is not larger than that of job f   i e   fjk  k    vf  tf k   then  since jk  is preempted
by jk at k    we know that the priority of jk  at k  is not larger than that of jk  
hence  we have fjk   k     fjk  k      fjk  k   k k   vf  tf k    and eventually 
we can get that fj        vf  tf t    since j  is executed at time sj   we can deduce that
fj   sj    vf  tf sj   clearly  the priority of j at time sj  i e   vj  lj   is not larger than that
of j    thus not larger than vf  tf sj  
by arranging vj  lj ej  sj    vf  tf sj   we can get vj  vf  tf sj lj  ej  sj    vf  tf sj lj  
where ej  sj      is the valid active time of job j at time sj  
some remarks on lemma          because f is the unique job completed by   in the
time interval if   the priorities of the executing jobs monotonically increase during if      
lemma     applies in both the restart model and resume model      lemma     provides
a useful tool to relate the priority of a feasible job  j  at some time point  sj  if   to the
completed job f  
    analysis of the resume model
compared with the restart model  the competitive analysis for the resume model is much
more complicated  because in the resume model  a job can be executed in several disjointed
time intervals  the charging scheme used in the previous subsection no longer works  and
we need to design a new virtual charging scheme 
before introducing the new virtual charging scheme  we introduce some notation that
will be used in this subsection  let  j  denote the number of disjoint time segments
 j 
allocated to a completed job j in opt  and s j   s j           sj denote the corresponding starting
time of each segment 
we say an allocation contains a violation if there exist two completed jobs i and j  each
of which has two segments with starting time sai   sci and sbj   sdj such that sai   sbj   sci   sdj  
an allocation is called standard if it does not contain a violation  this means if an allocation
is standard  for any completed job  if its starting time of execution is between two segments
of another jobs allocation  then its completion time is also in the same time interval  i e  
between the same two segments   we provide an obvious yet useful fact for the offline
optimal allocation below 
claim      there exists an optimal allocation that is standard 
for the detailed proof  please refer to appendix c  without loss of generality  we assume
that the optimal allocation opt is standard 
claim     presents an important property of the standard allocation  which will be used
in the following proofs 
    here  j  can be job j  which does not affect the analysis 

   

fiefficient mechanism design for online scheduling

claim      under the execution of opt  if a job js execution starting time is between two
segments of another jobs allocation  then job js completion time is also in the same time
interval  i e   between the same two segments  
to analyze the competitive ratio of   for the resume model  we propose two new virtual
charging schemes  referred to as integral charging scheme and segmental charging scheme 
respectively   in the integral charging scheme  we charge the whole value of job j in the
optimal allocation opt to some job completed by mechanism     while in the segmental
charging scheme  we charge the value of j by segment  and different segments of the same
job may be charged to different jobs completed by mechanism     by using these two
 
schemes  in theorem     we upper bound the competitive ratio of mechanism   by  
  
 
 
and      ln     respectively  as discussed in section      the two ratios work for situations
with different  values  i e   the first one works well for small  and the second one works
well for large  
theorem      for the resume model  the competitive ratio of   is at most

 
 

 

     in

particular  if  satisfies      the competitive ratio of   is at most min        
 
 ln       

 


 

the proof of the theorem will be given in section       and section       
      integral charging scheme
remember that we denote                f   as the sequence of jobs completed by   over time 
for each job f in this sequence  we denote the tf as the time that job f is completed 
in the integral charging scheme  we restrict the total number of jobs  excluding f itself 
that charged to job f   we does not allow this number to exceed btf tf   c    in particular 
we introduce the notation of saturation  in definition     
definition      saturated   for any job f   if the number of jobs  excluding f itself  
charged to f is less than btf  tf   c      we say that f is unsaturated  otherwise f is
saturated 
let w denote the set of jobs completed by opt  and wf  w denote the set of jobs
j  w with s j  if   let a denote the set of jobs in w whose values have already been
charged to some jobs completed by    
the integral charging scheme is described in scheme    for simplicity  we refer to line
     as step    line       as step    and line        as step   
here we give some intuitive explanations about step   and step   
in step    for each job f  f              f    we pick at most btf  tf   c     jobs from wf
and charge their values to f   the rule of picking jobs follows largest s j first  and the k th
picked job   with s j no later than tf  k     
    by slight abuse of notations  we still denote it as job j  and thus the start time of its first segment is s j  

   

fichen  hu  liu  ma  qin  tang  wang   zheng

scheme    integral charging scheme
   initial  a   
   for any job in w   if it is also completed by mechanism     charge its value to itself 
and add it to a 
   while w   a      do
  
for f     to f   do
  
for k     to btf  tf   c  do
  
j k     j      s j    tf  k    j    wf   a   
  
if j k      then
  
set j   arg maxj   j k  s j      add j to a  and charge its value to f  
  
end if
   
end for
   
end for
   
for f   f to    do
   
while wf   a      do
   
set j   arg maxj   wf  a  s j      and add j to a 
   
   
   
   
   
   
   
   

 j 

if sj  if  hj for some    hj  f  f   then
charge js value to the unsaturated job with smallest completion time in the
set  f              f   hj   
 j 
else if sj   tf       then
charge js value to the unsaturated job with smallest completion time in the
set  f              f   
end if
end while
end for
end while

in step    we consider jobs  in w   whose values are not charged to any job in the first
 j 
two steps  consider a job j with s j located in interval if and sj
located in if  hj  or
 tf        we charge its value to an unsaturated job in the job set  f              f   hj    or
 f              f     the rule of selecting the unsaturated job follows smallest completion time
first 
we will show that after three steps all jobs in w are charged to some completed jobs in
   see claim       first  we give two observations below 
observation      in the integral charging scheme  for any job f                 f   and any
time t  if   the number of jobs charged to f with their start time in opt being in  t  tf  
 charged at step    is no more than btf  tc     
observation      in the integral charging scheme  for any job f                 f   completed
by mechanism     the total number of jobs charged to f  excluding f itself   is at most
btf  tf   c     
observation     is derived from lines     in scheme    and observation     is derived
from the restriction that a saturated job can not be charged any more 

   

fiefficient mechanism design for online scheduling

claim      in the integral charging scheme  all jobs in w have been charged to some jobs
completed by mechanism    
proof  suppose on the contrary that there exists i  wf such that i is not charged to any job
rt
in  f  f              f   hi    here  we introduce a notation ei  t       opt s    i ds to denote
the valid active time of resumable job i at time t in opt  since the length of every job is at
least      there exists an allocation segment  s    s     of job i such that ei  s         ei  s        
and opt t    i for any t   s    s      suppose s   belongs to if  h   by the definition of hi   we
have h  hi  
according to the assumption  we know   a  i is not charged to f    b  all jobs in
 f      f              f   h  have been saturated in the above charging process when we charge
job i 
from point  a   we can deduce that in step    there are at least btf  s i c     jobs  whose
values are charged to f   with s j   s i   tf    by observation       otherwise i would be
charged to f in step    we denote ja as the set of these btf  s i c     jobs 
as for point  b   recall that a job f    f     f              f   h   is saturated if there are
bti ti  c    jobs whose values are charged to f    see definition       hence  we can deduce
that there are at least  btf     tf c              btf  h  tf  h  c      jobs  whose values
are charged to  f              f   h   with their starting time satisfying s j   s i   tf  h    in
particular  among these jobs  there are at most  btf  h  s   c      jobs with s j   s     tf  h  
 whose value must be charged to f   h     therefore  we can deduce that there are at least
 btf     tf c              btf  h  tf  h  c        btf  h  s   c     
jobs  whose values are charged to  f              f   h   with s j   s i   s      denote jb as the
set of these jobs  
note that ja jb     as all jobs in ja are charged to f   while all jobs in jb are charged to
 f              f   h   therefore  we deduce that the number of jobs with start time contained
in  s i   s     is at least  ja      jb    i e  
 btf  s i c         btf     tf c              btf  h  tf  h  c        btf  h  s   c     
  tf  h  s i     btf  h  s   c       bs    s i c    
   
so  there are more than bs    s i c    jobs different from i in  s i   s      recall that we assume
opt is standard  hence  these jobs are entirely scheduled in  s i   s      i e   all time segments
of such a job are allocated in  s i   s      claim       since the length of every job is at least
   we reach a contradiction 
according to the integral charging scheme  the charges to a completed job f have three
origins  corresponding to the three steps in scheme    from step    obviously  the charge
to job f is at most vf   we now calculate the maximum total charge from step   
    as stated in the problem formulation section  we assume job lengths are located in       for simplicity 
however  by scaling  all our results and proofs can be easily generalized to the case of  lmin     lmin   
where lmin is the shortest length of jobs 
    because   i  in step    there might be at most  btf  h  s   c      jobs with s j   s     tf  h   which could
be charged to f   h   ii  in step    the jobs with s j  if  h could not be charged to f   h 

   

fichen  hu  liu  ma  qin  tang  wang   zheng

suppose the total number of jobs charged to f from step   is m  we rename them as
              m according to           m   and claim vj  vf  j lj  lemma     is used
here   where j    tf  s j   for    j  m  according to the rule of picking jobs in step   
we have j  j     so it is clear that the sum of values of all these m jobs is at most
vf

m
x
j  

 j lj  vf

m
x

 j    vf

j  

m
x

 j  

   

j  

it remains to calculate the maximum total charge from step    according to observation
     we know that the number of jobs charged to f from step   is at most btf tf   c  m 
now we need to bound the value of each such job j  the key is to build a relationship
between its value and the value of job f   however  according to the charging rule in step
   the start time s j of job j is not located in the time interval if   in this case  we cannot
use lemma     directly to derive an inequality like vj  vf  j lj   because it remains to
check whether j is feasible at tf    note that tf   is the left endpoint of time interval if   
we define the critical time of a job as tj    dj  lj   if we can prove that tj  tf     then
job j must be feasible at time tf   for     thus  by applying lemma      we can easily get
vj  vf  tf tf   lj  vf  tf tf     

   

fortunately  the following lemma shows that tj  tf   holds 
lemma       according to the charging scheme  if j  wf is charged to a completed job
f   k  where    k  hj    then the critical time of job j satisfies tj  tf  k   
proof  we prove the lemma by contradiction and suppose tj   tf  k    then the total length
 j 

of all the other jobs whose opt allocation is between s j and sj
which is at most

 j 

is  sj

dj  s j  lj    dj  lj    s j   tj  s j   tf  k   s j  

 j 

  lj

   s j  lj  

   

since j is charged to f  k  from step   we know that all jobs in  f     f             f  k  
are saturated  thus  there are at least
 btf  s j c         btf     tf c              btf  k   tf  k  c       btf  k   s j c         
jobs whose start time belongs to the interval  s j   tf  k    
recall that opt is standard  hence  all these jobs allocated time segments are between
the first segment and the last segment of job j  according to claim       equation     and
equation      constitute a contradiction since every jobs length is at least   
combining the analysis above  we know that      the total charge to f from step   is
at most vf       assuming
jobs are charged to f from step    the total charge from these
pm m j
m jobs is at most vf j   
according to equation          the number of jobs charged
to f from step   is at most btf  tf   c      m according to definition      and the value
   

fiefficient mechanism design for online scheduling

of each job is at most vf  tf tf    according to equation      therefore  the total charge
to f is at most
vf   vf

m 
x

btf tf   c  

 j    btf  tf   c      m vf  tf tf     vf       

j  

x

 j   

j  



which is upper bounded by vf       
   indicating that the competitive ratio of mechanism

  is upper bounded by

 
 

    

      segmental charging scheme
 j 

recall that we use s j   s j           sj

to denote the starting time of all time segments allocated

 j 
 j    j           j

 j 

to job j in opt  let
denote those time segments  and lj    lj            lj denote
the length of them 
in the segmental charging scheme  each segment kj is given a value j ljk   in which
v
j    ljj is the value density of job j  we describe the segmental charging scheme in
scheme    for simplicity  we refer to line      as type   charge  line      as type  
charge  and line      as type   charge 
scheme    segmental charging scheme
  
  
  
  
  
  
  
  
  

for each segment kj in opt do
if mechanism   also completes j by its deadline  then
charge the value j ljk to j 
else if skj  if for some f                   f    and j  vf  j     where j    tf  skj  
then
charge the value j ljk to f  
else
charge j ljk to f    where f  is the first job completed by   from time tj on 
where tj is the critical time of job j 
end if
end for

it is clear that the type   charge received by a job f is at most vf   next  we bound the
type   and type   charges 
v

lemma       the total type   charge that a job f receives is at most   lnf   
proof  let r  denote the set of job segments whose charges to f are type    for each
kj  r    the charge from it is j ljk   and from line   in scheme    we know j  vf  j    
where j   tf  skj   thus the total type   charge is at most
x
kj r 

j ljk

 vf

x
kj r 

 j   ljk

 vf

x z
kj r 

j

j ljk



x 

z
dx  vf
 



 x  dx  

vf
 
 ln 

where the second inequity holds by       therefore  f receives a total type   charge of
v
at most   lnf   
   

fichen  hu  liu  ma  qin  tang  wang   zheng

in the following  we study the type   charge and denote r  as the set of job segments
which constitute type   charges to f  
first  we claim that  if  satisfies some condition  then we can get  skj   skj   ljk     tf   tf  
lj     tf   tf     for each kj  r   claim       
claim       if  satisfies the function  g x    x x   for    x    then we have
 skj   skj   ljk     tf   tf   lj    for each kj  r   
proof  to prove  skj   skj   ljk     tf   tf   lj    we only need to prove the inequality below 
tf  skj  tf   lj  ljk  

    

the inequality skj  tf   lj  ljk holds because  skj   ljk    lj  dj  lj   tj  tf  
next we prove tf  skj   suppose skj  if   for some f    if   is not later than if   and might
equal if    then according to the type   charging rule  we have j  

vj
lj

 

  vf    j     where

j    tf  skj  
we now use the condition for   g x    x x   for    x    then we have
 
v
v
l
lj  j    hence ljj  vj  lj     combining the above two inequalities   ljj   vf    j   and
 

vj
lj

 

 vj  lj      we have vj  lj   vf    j   thus vj   vf    j lj   which contradicts the fact
that f   is completed at tf   with priority vf    lemma     is used here   therefore  we have
tf  skj  
by claim       we know the allocation of all the segments p
with type   charges to f are
in a restricted interval  tf   tf      hence  we can derive that k r  ljk   
j

lemma       if  satisfies the function  g x    x x   for    x    then the total
   
type   charge that a job f receives is at most vf    
ln    
proof  according to the type   charging rule  j is not completed by the mechanism  if we
consider the critical point of j  i e   tj  in time interval if    then by applying lemma      we

v
v
can deduce that vj  lj  vf  tf tj  vf   therefore we have ljj  flj   now we can bound
lj 

the total type   charge that f receives
x
kj r 

j ljk  

x vj
x vf
x ljk
k
ljk 
l
 
v
 
f
lj
g lj  
lj  lj j
k
k
k

j r 

j r 

note that the function g lj     lj  lj is increasing for    lj 
 
lj  ln
   so we have
g lj   

 

 

for    lj 
for

 
ln 

    

j r 

 
ln 

 lj    if   

 
ln   

 
ln 

and decreasing for

    

by claim       we know  skj   skj   ljk     tf   tf   lj     tf   tf     for each kj  r   
 
a
therefore  on the one hand  for each kj  r  with ln
  lj    denote this set as r    
   

fiefficient mechanism design for online scheduling

k
kj r a lj

   on the other hand  for each kj  r  with lj 
p
 
set as r b    we have k rb ljk  ln
 
 
j
then       becomes

we have

p

x
kj r 

x

j ljk  vf

kj r 

x ljk
x ljk
ljk
  vf  
 
 
g lj  
g lj  
g lj  
k
a
k
b
j r 

p
 vf  

 
ln 

kj r a

 

ljk

p
 

kj r b



j r 

ljk

   vf  

which means the type   charge is bounded by vf    
ln   

 denote this

    

 
ln 


 
  
 


 
    

based on lemmas      and       we can obtain that when        the total charge
to a job f completed by mechanism   is at most vf        
ln        this implies that the
 
competitive ratio of mechanism   is upper bounded by      
ln      
    discussions
an advantage of our mechanism is that it can handle the settings with different values of
 in a unified framework  we only need to set parameter  to different values in theorem
    and theorem     so as to adapt to different settings of job lengths  as shown in the
following corollaries  
corollary       by setting           ln   where      is an arbitrary small constant 
 

mechanism   achieves a competitive ratio      
    o      ln  for the restart model and a
 
competitive ratio      
    o     


ln 

for the resume model 

the proof can be found in appendix d  as for corollary       we have the following
discussions 
 

    for the restart model  mechanism   achieves a competitive ratio of      
   o     ln   
 

 
 
which improves upon the best known algorithmic result log
   o     ting        for
the standard online scheduling without strategic behavior 

    for the resume model  when  is large  mechanism   achieves a competitive ratio of
 

     
    o      ln    which is slightly worse than the result obtained for the restart
model  within a factor of     asymptotically speaking    is near optimal  since
its competitive ratio has the same order  w r t    as the lower bound shown in
theorem      furthermore  our analysis generalizes the results obtained by durr et
al         to the continuous value of time and the strategic setting 
    when  is relatively small  the ratios given in corollary      will become loose  in
particular  when  approaches    the above ratios will approach infinity since ln 
approaches    in this case  we need a different setting of   see corollary       
 
 
    note that  the function g x    x x is increasing for    x  ln
and decreasing for x  ln
  therefore 


we only need to require      and we can naturally derive g x    x x   for    x   

   

fichen  hu  liu  ma  qin  tang  wang   zheng


corollary       by choosing      
  the competitive ratio of mechanism   is       
  
                 e for the restart model and                    for the resume model 

similarly  we have the following discussions 
    the competitive ratio of   is linear in   since          is bounded by e 
    in particular  when       the ratios in the above corollary become   for both the
restart and resume model  which matches the lower bound given in theorem      in
this regard  we say that   is optimal  on the other hand  this also shows that the
lower bound of   in theorem     is tight 

   conclusion and future work
in this paper  we studied the online scheduling problem in a strategic setting  as summarized in table    we proved that in both the restart model and the resume model  the
competitive ratio of any ic mechanism cannot be less than   when      and cannot be less
than ln      o    for large   we designed a simple ic mechanism   to schedule jobs on
a single machine and proved that it has near optimal approximation guarantees  in terms
of social efficiency  in both the restart model and the resume model through competitive
analysis  as shown in table    the mechanism is optimal in terms of competitive ratio in
both the restart model and the resume model when       and it is near optimal for the
restart model when  is large enough 
table    summary of bounds on competitive ratio
restart model
resume model
model
  
asymptotic 
  
asymptotic 


lb for any ic mech 
 
 
 

o   
 
ln 
ln       o   
 
 


ub of the proposed mech 
 
     
 
     
    o      ln 
    o      ln 
in proving the lower bounds  we introduce the shadow job argument which reflects the
ic constraint  this argument is very helpful in extending bounds in non strategic setting
to strategic setting  the second contribution of this work is that we design several virtual
charging schemes to analyze the competitive ratio of our mechanism  the ideas of these
virtual charging schemes are of methodological significance and may be used to address
other problems 
there are multiple directions to explore in the future 
it is an interesting problem whether an ic competitive mechanism can be designed for
the hybrid model  in which there exist both resumable and non resumable jobs  many new
strategic issues may arise in the hybrid model  for example  can a resumable job disguise
as a non resumable job to get better off 
another open problem is whether a tighter competitive analysis of   can be made for
the resume model  our conjecture is that the competitive ratio obtained by   has an
 
         for both the restart model and the resume model 
uniform form   
furthermore  given the popularity of cloud computing in todays it industry  it is of
practical importance to extend our work to the setting of job scheduling on multiple heterogeneous machines 
   

fiefficient mechanism design for online scheduling

appendix a  algorithms for the critical value payment
please note that the critical time point in algorithm   and algorithm   means the time
point when some new jobs arrive or some existing jobs are completed 
algorithm    compute the critical value payment in the restart model
for each job j which is completed do
run algorithm   without job j  let t be the set of all critical time points
t   rj   dj   
for every t  t do
if there exists job k such that x t    k  then define ft   vk  lk ek  t   
else ft     
end for
for every time point t   t   rj   dj  lj   do
 
define ft    max ft   t t   t   t   t    t    lj     
end for
let f    mint  ft   
pj   f    lj  
end
algorithm    compute the critical value payment in the resume model
for each job j which is completed do
run algorithm   without job j 
let  t    t            tm   be the set  denoted as t   of all critical time points in  rj   dj   
and t    rj  
denote the period between two critical time point as zi   ti  ti    where
i                 m 
for every ti  t do
if there exists job k such that x ti     k  then define fti   vk  lk ek  ti    
else fti     
end for
initially  t     h     
while h   lj do
t    arg minti t  t  fti   ties are broken in favor of smaller ti  
initially  e      
 
for every time point ti  t  that satisfies fti  ft   e do
e    e    zi   and
if ti 
  t  
then add ti to t    and h   h   zi  
end for
end while
let t   be the earliest critical time point in t    let t   arg maxti t  fti  
denote the critical time points in t  and between t   and t as t     t             t k  
denote the relevant periods of those critical time points as z     z             zk    and z   
 
 
pj   ft   lj  z    zk    
end
   

fichen  hu  liu  ma  qin  tang  wang   zheng

appendix b  an example for analysis tightness
example b    there are two types of jobs  long and short  the length of long jobs is  
while the length of short jobs is    let p be a large integer  and the number of long and short
jobs are p     and p    respectively  the first long job j l is released at time    and its type
is  l               for p     i     job jil has type il    i       i       i     i   
l
l
long job jp 
has type p 
    p           p           p        job jpl has type
l
p    p     p   p     p     here   and  are small constants satisfying p   
and     in the meanwhile  we have short jobs as follows  for j              p   we denote
jjs as the jth short job  whose type is js    j  p    j    p         j     p       
for j              p    
l
it can be verified that only one job jp 
can be completed in mechanism     with
 p  
a social welfare  
  while in the optimal solution  all the short jobs will be
l
l
will be completed successively  with a social welfare
completed  and after that  jp and jp 
 
 
 p  
  
 
        
      p      p   therefore  the competitive ratio of
p 
mechanism   is at least   p                             
          which tends
 
 
to  
         when p   

appendix c  proof of claim    
proof  suppose an optimal allocation opt is not standard  i e   there exist a completed job
i with two segments beginning at time sai and sci and a completed job j with two segments
beginning at time sbj and sdj such that sai   sbj   sci   sdj   we now do the following process
to obtain a standard optimal allocation  if the length of job js b th segment  denote as ljb  
is larger than that of is c th segment  denote as lic    we exchange is c th segment with js
b th segment located in  sbj   sbj   lic    otherwise  we exchange js b th segment with is c th
segment located in  sci   lic  ljb   scj   lic    for all the other segments  their order remains
unchanged  it is easy to see that the new allocation is still feasible and obtains the same
social welfare  we do such kind of exchanges until there is no violation  and then obtain a
standard optimal allocation 

appendix d  proof of corollary     
proof  for every constant c     and large enough x  we have     xc  x  e  when  is
large enough  by choosing               ln   we have      and
       ln       ln      ln 

 
 e    ln         o 
  

ln 
by using taylors theorem  we know
       

 ln         o                 o     
thus the competitive ratio is

 
 

c  ln 
 


 

               
    o      ln  for the restart model  and

 
 ln 

 

            c  ln       o       o  ln               
    o      ln  for the resume model 
respectively 

   

fiefficient mechanism design for online scheduling

appendix e  the multiple machines extension
suppose there are c identical machines  and each of them can process at most one job at
any given time  similar to the work of lucier et al          we assume that at most h
machines can be allocated to a single job at any given time  this parameter stands for a
common parallelism bound of the system 
the notion of preemption is specified as follow  a job may be processed on any number of
machines between   and h  and the number of machines allocated to this job may fluctuate 
and only if the number decreases to    we treat this job as preempted  thus  the notation
of preemption restart and preemption resume can be defined accordingly 
each job j  j is characterized by a private type j    rj   dj   sj   vj    instead of lj   where
we use sj to denote jobs size  e g   the number of machine hours required to complete the
job   without causing any confusion  we let  be the maximum ratio between the sizes of
any two jobs     maxi jj ssji   for simplicity  we assume all job sizes fall in        if      
all the jobs have the identical size  otherwise they have different sizes 
e   a simple case  h    
in this case  we design a new mechanism   based on the single machine mechanism    
the payment rule of   is exactly the same as     and its allocation rule is shown in
algorithm    which is also similar to that of     since each job can be processed on at
most one machine  the mechanism will choose the c jobs  if any  in jf  t  with the highest
priorities vi   si ei   t  to execute  note that here the valid active time of job j until time
t is computed as
c z t
x
ej  t   
 xi  s    j ds 
    
i  

t 

p
where    is an indicator function  and t    arg maxst   c
i    xi  s    j        that is
to say  we treating resumable jobs as non resumable jobs for simple  we summarize the
theoretical properties of   in theorem e   
algorithm    the allocation rule of mechanism  
for all t do
if  jf  t    c then
process the c jobs with highest priorities in jf  t  
else process all the jobs in jf  t  
end
theorem e    mechanism   is ic and has the following properties 

      
         

 in the restart model  by setting   
  
 

we can get a competitive ratio of       

    
for     by setting   
 ln for arbitrary small       we can get
 
another competitive ratio of          o      ln  
 in the resume model  by setting               ln for arbitrary small       we
 

can get a competitive ration of      
    o      ln   
as for the above theorem  we have the following discussions 
   

fichen  hu  liu  ma  qin  tang  wang   zheng

    similar to what we have done in the single machine setting  for the restart model 
we give two competitive ratios for     when  is small  the first ratio is better
 in particular  when       this competitive ratio becomes   and is thus optimal
according to theorem       when  is large  the second ratio is better instead and is
near optimal according to theorem     
    different from what we have obtained in the single machine setting  for the resume
model  we cannot match the lower bound   when      in the multi machine setting 
proof  the proof of theorem e   is essentially the same as the proof of single machine
setting  in our virtual charging scheme  we charge a completed job in the optimal allocation
to some job completed by   on the exactly same machine  the difference is that the
integral charging scheme for the resume model will not apply to the multiple machines
setting any more  we only use the segment charging scheme for the resume model 
e   general case  h   
to handle this general case  we design a new mechanism     which divides the c machines
into bc hc equally sized virtual machines  each consisting of h machines   and treats every
virtual machine as a single machine when performing the scheduling  that is  each virtual
machine will be used to process one job  and the remaining c  bc hc  h machines will be
idle 
algorithm    the allocation rule of mechanism  
    divide the c machines into bc hc equal sized virtual machines 
    run mechanism   under the following modification 
 capacity  bc hc 
 demand size  sj  h for each job j 
as compared to the case of h      the setting h    imposes more flexibilities to the
optimal offline allocation  for example  a job may be processed on any number of machines
between   and h in the optimal allocation and it might not always be executed on exactly
h machines  fortunately  we can use the similar segmental charging idea as h     case to
resolve the challenge and get the competitive ratio as shown in the following theorem 
 

theorem e    mechanism   is ic and has a competitive ratio of      
    o      ln  for

  by setting              
resume model 

ln 


for arbitrary small       no matter restart model or

we have the following discussions for the above theorem  the setting of h    is more
complicated and we could not always obtain the same results as in the setting of h     
in particular  if h divides c  there will be no idle machine and we may obtain the same
competitive ratio as in the setting of h      however  when h does not divide c  the idle
machines will introduce an additional factor of at most   to the competitive ratio  besides 
the competitive ratio for the restart model is no better than that for the resume model  and
the competitive ratio cannot reach   when      
   

fiefficient mechanism design for online scheduling

proof  here we only need to show that there exists an optimal allocation  we can view
all jobs as resumable jobs in the optimal allocation  such that at any time every job is
processed on either exactly h machines or no machine  assuming h divides c   then we
can directly use the results obtained for the special case h      suppose opt is an optimal
offline allocation and j  is the set of jobs completed under opt  for each j  j    we use
mj  t  to denote the number of machines processing j at time t under opt  then we can
divide the time into intervals  tk   tk      where k                 such that at any time interval
 tk   tk      mj  t  does not change for any j  j    now we show how to allocate the jobs at
any time interval  tk   tk      for the bc hc virtual machines  we allocate the jobs on them
one by one  i e   only if the previous virtual machine is full  we start to allocate jobs on
another empty virtual machine from tk  empty is only with respect to  tk  rtk       besides 
t
every job is allocated continuously one by one and the size of allocation is tkk   mj  t dt  it
can be easily verified that under this allocation every job j  j  is allocated legitimately
 j is allocated during  rj   dj   and processed by at most h machines at any time  and can
complete before its deadline since j is legitimately completed under opt 

references
azar  y   ben aroya  n   devanur  n  r     jain  n          cloud scheduling with setup
cost  in proceedings of the twenty fifth annual acm symposium on parallelism in
algorithms and architectures  pp          acm 
bar noy  a   guha  s   naor  j     schieber  b          approximating the throughput
of multiple machines in real time scheduling  siam journal on computing         
       
baruah  s   koren  g   mao  d   mishra  b   raghunathan  a   rosier  l   shasha  d    
wang  f          on the competitiveness of on line real time task scheduling  realtime systems                
baruah  s  k   haritsa  j     sharma  n          on line scheduling to maximize task
completions  in proceedings of real time systems symposium  pp          ieee 
borodin  a     el yaniv  r          online computation and competitive analysis  vol    
cambridge university press cambridge 
chin  f  y     fung  s  p          online scheduling with partial job values  does timesharing or randomization help   algorithmica                 
ding  j   ebenlendr  t   sgall  j     zhang  g          online scheduling of equal length
jobs on parallel machines  in proceedings of the   th annual european conference on
algorithms  pp          springer verlag 
ding  j     zhang  g          online scheduling with hard deadlines on parallel machines 
in algorithmic aspects in information and management  pp        springer 
durr  c   jez  l     nguyen  k  t          online scheduling of bounded length jobs to
maximize throughput  journal of scheduling                 
   

fichen  hu  liu  ma  qin  tang  wang   zheng

ebenlendr  t     sgall  j          a lower bound for scheduling of unit jobs with immediate
decision on parallel machines  in approximation and online algorithms  pp       
springer verlag 
friedman  e  j     parkes  d  c          pricing wifi at starbucks  issues in online mechanism
design  in proceedings of the  th acm conference on electronic commerce  pp     
     acm 
goldman  s  a   parwatikar  j     suri  s          online scheduling with hard deadlines 
journal of algorithms                 
goldwasser  m  h          patience is a virtue  the effect of slack on competitiveness for
admission control  journal of scheduling                
hajek  b          on the competitiveness of on line scheduling of unit length packets with
hard deadlines in slotted time  in proceedings of the   th annual conference on
information sciences and systems 
hajiaghayi  m   kleinberg  r   mahdian  m     parkes  d  c          online auctions with
re usable goods  in proceedings of the  th acm conference on electronic commerce 
pp          acm 
kolen  a  w   lenstra  j  k   papadimitriou  c  h     spieksma  f  c          interval
scheduling  a survey  naval research logistics  nrl                  
lavi  r     nisan  n          competitive analysis of incentive compatible on line auctions 
theoretical computer science              
lavi  r     nisan  n          online ascending auctions for gradually expiring items 
journal of economic theory            
lipton  r  j     tomkins  a          online interval scheduling  in in proceedings of the
fifth annual acm siam symposium on discrete algorithms  vol      pp         
lucier  b   menache  i   naor  j  s     yaniv  j          efficient online scheduling for
deadline sensitive jobs  in proceedings of the   th acm symposium on parallelism in
algorithms and architectures  pp          acm 
ma  w   zheng  b   qin  t   tang  p     liu  t          online mechanism design for cloud
computing  corr  abs           
mashayekhy  l   nejad  m  m   grosu  d     vasilakos  a  v          incentive compatible
online mechanisms for resource provisioning and allocation in clouds  in cloud computing  cloud        ieee  th international conference on  pp          ieee 
nguyen  k  t          improved online scheduling in maximizing throughput of equal length
jobs  in computer sciencetheory and applications  pp          springer 
nisan  n          introduction to mechanism design  for computer scientists   algorithmic
game theory           
nisan  n     ronen  a          algorithmic mechanism design  games and economic
behavior             
parkes  d  c          online mechanisms  algorithmic game theory  ed  n  nisan  t 
roughgarden  e  tardos  and v  vazirani  cambridge university press         
   

fiefficient mechanism design for online scheduling

porter  r          mechanism design for online real time scheduling  in proceedings of the
 th acm conference on electronic commerce  pp        acm 
ting  h  f          a near optimal scheduler for on demand data broadcasts  theoretical
computer science                
wu  x   gu  y   li  g   tao  j   chen  j     ma  x          online mechanism design for
vms allocation in private cloud  in network and parallel computing  pp         
springer 
zaman  s     grosu  d          an online mechanism for dynamic vm provisioning and
allocation in clouds  in  th international conference on cloud computing  cloud  
pp          ieee 
zhang  h   li  b   jiang  h   liu  f   vasilakos  a  v     liu  j          a framework for
truthful online auctions in cloud computing with heterogeneous user demands  in
proceedings of infocom  pp            ieee 
zheng  f   fung  s  p   chan  w  t   chin  f  y   poon  c  k     wong  p  w          improved on line broadcast scheduling with deadlines  in computing and combinatorics 
pp          springer 

   

fi