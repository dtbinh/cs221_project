journal of artificial intelligence research                  

submitted        published      

generating models of a matched formula
with a polynomial delay
petr savicky

savicky cs cas cz

institute of computer science  the czech academy of sciences
pod vodarenskou vez           praha    czech republic

petr kucera

kucerap ktiml mff cuni cz
department of theoretical computer science and mathematical logic
faculty of mathematics and physics  charles university in prague 
malostranske nam             praha    czech republic

abstract
a matched formula is a cnf formula whose incidence graph admits a matching which
matches a distinct variable to every clause  such a formula is always satisfiable  matched
formulas are used  for example  in the area of parametrized complexity  we prove that
the problem of counting the number of the models  satisfying assignments  of a matched
formula is  p complete  on the other hand  we define a class of formulas generalizing the
matched formulas and prove that for a formula in this class one can choose in polynomial
time a variable suitable for splitting the tree for the search of the models of the formula 
as a consequence  the models of a formula from this class  in particular of any matched
formula  can be generated sequentially with a delay polynomial in the size of the input 
on the other hand  we prove that this task cannot be performed efficiently for linearly
satisfiable formulas  which is a generalization of matched formulas containing the class
considered above 

   introduction
in this paper  we consider the problem of counting the models  satisfying assignments  and
generating subsets of the models of a given formula in conjunctive normal form  cnf   it is
well known that the problem of counting the models of a general cnf is  p complete  sipser 
       the problem of generating the models of a general cnf formula is clearly also hard 
because checking whether there is at least one satisfying assignment of the formula  the
sat problem  is np complete  garey   johnson        
in this paper  we mostly deal with the problem of enumerating models of a formula 
this problem is important in areas of research and applications  such as unbounded model
checking  kang   park        mcmillan        or data mining  coquery  jabbour  sais 
salhi  et al          the success of modern sat solvers inspired design of model counting
and enumeration algorithms as well  see e g  jabbour  lonlac  sais    salhi        morgado
  marques silva      a      b   in addition to the basic enumeration problem in which we
do not require the models to be generated in any prescribed order  other versions have been
considered  e g  generating models by non decreasing weight  creignou  olive    schmidt 
      
another line of research concentrated on studying special classes of boolean formulas
for which an enumeration algorithm with guaranteed complexity could be devised  one can
c
    
ai access foundation  all rights reserved 

fisavicky   kucera

easily find an example of a formula for which the set of models is exponentially larger than
the size of the formula itself  in such a case it is reasonable to include the size of the output
into the bound on the running time of an enumeration algorithm  more specifically we say
that an algorithm which enumerates models of a formula runs in output polynomial time
if its running time can be bounded by a polynomial in two variables  the size of the input
 i e  the input formula   and the size of the output  i e  the number of models of    in
this paper  we consider more restrictive setting as follows  the algorithm receives as input
a formula and generates a sequence of all its models in such a way that the time needed for
generating the first model and the time between generating any two consecutive models in
the sequence is polynomial in the length of the formula  this type of complexity bound is
called a polynomial delay  it should be clear that if we can enumerate models of a formula
with a polynomial delay  then we can construct an output polynomial algorithm for this
task as well  on the other hand  it can be much harder to get an enumeration algorithm
with polynomial delay than an output polynomial algorithm  for an overview of various
notions of enumeration complexity  see johnson  yannakakis    papadimitriou        
there are special classes of formulas for which polynomial delay enumeration algorithms
have been described  this includes   cnf formulas  horn formulas  generalized satisfiability
problems and others  see e g  aceto  monica  ingolfsdottir  montanari    sciavicco       
creignou   hebrard        dechter   itai        kavvadias  sideri    stavropoulos        
in this paper  we describe another class of formulas for which a polynomial delay enumeration algorithm based on backtrack free search can be described  on the contrary to such
algorithms known for   cnf or horn formulas  the splitting variable in each step cannot
be chosen arbitrarily  however  the existence of a suitable variable is guaranteed and it can
be efficiently identified 
in particular we consider the class of matched formulas introduced by franco and
van gelder         given a cnf formula   we consider its incidence graph i   defined as follows  i   is a bipartite graph with one part consisting of clauses of  and the
other part containing the variables of   an edge  x  c  for a variable x and a clause c is
in i   if x or x appears in c  it was observed by aharoni and linial        and tovey
       that if i   admits a matching  i e  a set of pairwise disjoint edges  of size m  where
m is the number of clauses in    then  is satisfiable  later the formulas satisfying this
condition were called matched formulas by franco and van gelder  since a matching of
maximum size in a bipartite graph can be found in polynomial time  see e g  lovasz  
plummer         one can check efficiently whether a given formula is matched 
given a general formula   we can measure how far it is from being matched by considering its maximum deficiency      the number of clauses which remain unmatched in a
maximum matching of i    a formula  is thus matched iff          a weaker notion
of deficiency      m  n  where m is the number of clauses and n the number of the
variables in   is also often being considered 
matched formulas play a significant role in the theory of satisfiability solving  since
their introduction matched formulas have been considered as a base class in parameterized
algorithms for satisfiability  see e g  the book of flum and grohe        for an overview of
parameterized algorithms theory  in particular  fleischner  kullmann  and szeider       
show that satisfiability of formulas with maximum deficiency bounded by a constant k can
be decided in time o kkno k    where kk is the length of the input formula  and n
   

figenerating models of a matched formula

denotes the number of its variables  this result was later improved by szeider        to
an algorithm for satisfiability parameterized with maximum deficiency of a formula with
complexity o  k n     parameterization based on backdoor sets with respect to matched
formulas were considered by szeider        
since all matched formulas are trivially satisfiable  we ask a stronger question  how
hard is it to count or enumerate the models of a matched formula  we prove that counting
the models of a matched formula is a  p complete problem  and turn our attention to
generating models of a matched formula  the main result of the paper is an algorithm
which generates models of a matched formula with a polynomial delay  the algorithm
constructs a splitting tree whose nodes correspond to either a matched or an unsatisfiable
formula  however  in some cases this strategy is not sufficient since some nodes of the tree
cannot be split in this way  we prove that such a node corresponds to a formula which
can be satisfied by iterated elimination of pure literals  formulas with this property will
be called pure literal satisfiable  these formulas were studied by kullmann        as a
subclass of linearly satisfiable formulas  if a node with a pure literal satisfiable formula is
reached  the algorithm switches to a simpler strategy  we prove that the models of a pure
literal satisfiable formula can be generated with a delay linear in the length of the formula 
on the other hand  the  sat problem for pure literal satisfiable formulas is  p complete 
because this problem is  p complete for monotone  cnfs  valiant      a      b   which
are pure literal satisfiable 
several generalizations of matched formulas have also been considered in the literature  kullmann        generalized matched formulas into the class of linearly satisfiable
formulas  autarkies based on matchings were studied by kullmann         szeider       
considered another generalization of matched formulas  the classes of biclique satisfiable
and var satisfiable formulas  unfortunately  for both biclique satisfiable and var satisfiable
formulas it is hard to check if a formula falls into one of these classes  szeider        
we show in this paper that our result does not transfer to the class of linearly satisfiable
formulas by demonstrating that it is not possible to generate models of a linearly satisfiable
formula with a polynomial delay unless p np 
the paper is organized as follows  after giving basic definitions in section    we describe
in section   a specific simple splitting property of a class of formulas  which allows to
generate the models of a formula from the class efficiently  in section    we consider pure
literal satisfiable formulas and prove that this class has the required splitting property  in
section    we consider the matched formulas and prove the required splitting property of a
class of formulas  which generalizes both the matched and pure literal satisfiable formulas
in a natural way  this implies an algorithm for generating all models of a matched formula
or a formula from the more general class with a polynomial delay  in section    we present
complexity bounds for efficient versions of the algorithms from the previous sections  in
section    we show the negative result concerning linearly satisfiable formulas  section  
contains concluding remarks and some directions for further research 

   definitions
in this section  we give the necessary definitions and summarize the results we use in this
paper 
   

fisavicky   kucera

    boolean functions
a boolean function of n variables is a mapping f         n          a literal is either
a variable  called positive literal  or its negation  called negative literal  the negation of
the variable x will be denoted x or x  a clause is a disjunction of a set of literals  which
contains at most one literal for each variable  formula  is in conjunctive normal form
 cnf  or  equivalently   is a cnf formula  if it is a conjuction of clauses  we often treat
a clause as a set of its literals and a cnf formula as a set of its clauses  it is a well known
fact that every boolean function can be represented by a cnf formula  see e g  genesereth
  nilsson         the size of a formula  is the number of the clauses in  and will be
denoted as     the length of a formula  is the total number of occurrences of literals in  
i e  the sum of the sizes of the clauses in   and will be denoted as kk  given a variable x
and a value a           x   a  denotes a formula originating from  by substituting x with
value a and the obvious simplifications consisting in removing falsified literals and satisfied
clauses  we extend this notation to negative literals as well by setting  x   a     x   a  
the formula obtained from  by assigning the values a            ak         to the variables
x            xk is denoted as  x    a    x    a            xk   ak    we say that a literal l is pure in
a cnf formula  if it occurs in the formula and the negated literal l does not  a literal
is irrelevant in a formula  if neither the literal nor its negation occurs in the formula  a
variable is pure  if it appears only positively  or only negatively in   i e  it appears in a
literal  which is pure in  
let  be a formula defining a boolean function f on n variables  an assignment of
values v        n is a model of   also a satisfying assignment  or a true point of    if
it satisfies f   i e  if f  v       the set of models of  is denoted as t     the models in
t    are defined on the variables which have an occurrence in   the set of the variables
of the function defined by a formula can be larger  however  we do not introduce a special
notation for this more general case  for algorithmic purposes  this is also not necessary 
since adding an irrelevant variable to a formula changes the set of the models by adding
this variable with both possible values to each element of the original set of models 
a partial assignment assigns values only to a subset of the variables  for a formula
of the variables x            xn   it can be represented as a ternary vector v          n   where
vi    denotes the fact that xi is not assigned a value by v 
note that an empty clause does not admit a satisfying assignment and an empty cnf
is satisfied by any assignment 
    matched formulas
in this paper we use standard graph terminology   see e g  bollobas         given an
undirected graph g    v  e   a subset of edges m  e is a matching in g if the edges
in m are pairwise disjoint  a bipartite graph g    a  b  e  is an undirected graph with
disjoint sets of vertices a and b  and the set of edges e satisfying e  a  b  for a set
w of vertices of g  let  w   denote the neighborhood of w in g  i e  the set of all vertices
adjacent to some element of w   we shall use the following well known result on matchings
in bipartite graphs 
theorem      halls theorem   let g    a  b  e  be a bipartite graph  a matching m
of size  m      a  exists if and only if for every subset s of a we have that  s     s   
   

figenerating models of a matched formula

let    c          cm be a cnf formula on n variables x    x            xn    we associate
a bipartite graph i        x  e  with   also called the incidence graph of    where
the vertices correspond to clauses in  and the variables x  a clause ci is connected to a
variable xj  i e   ci   xj    e  if ci contains xj or xj   a cnf formula  is matched if i  
has a matching of size m  i e  if there is a matching which pairs each clause with a unique
variable  we shall call such matching as clause saturated matching  note that a matched
cnf is trivially satisfiable  since each clause can be satisfied by the literal containing the
variable matched to the given clause  a variable  which is matched to some clause in a
given matching m   is called matched in m   it is free in m otherwise 
    generating models with a polynomial delay
the main goal of this paper is to describe an algorithm which  given a matched formula  
generates the set t    of models of  with a polynomial delay  let us state more formally
what we require of such an algorithm 
we say that an algorithm generates the models of a boolean formula  with a polynomial
delay  if there is a polynomial p  such that the algorithm  given a formula  as an input 
satisfies the following properties 
   it works in steps  each of which takes time o p kk   
   in each step  it either finds a model of  different from the models obtained in the
previous steps  in particular  any model in the first step  or determines that that there
is no such model  so the previous steps already found all the models of  
if an algorithm with the properties above exists  it follows that we can construct the
set t    of all models in time o   t           p kk    which means that the algorithm is
output polynomial  note that since t    may be of exponential size with respect to kk 
efficiency with respect to the size of the input and output is the best we can hope for when
constructing t    

   efficient splitting tree algorithm
the idea of the algorithm is to construct a decision tree for the function represented by a
given satisfiable cnf  such that every subtree larger than a single leaf contains a   leaf 
the depth of the tree is at most the number of the variables  if this tree is searched in
a dfs order  then the time needed in an arbitrary moment to reach a   leaf is at most n
times the time needed to split a node  in the following  we show that for some classes of
formulas including the matched formulas it is possible to find a splitting procedure which
yields a tree as described above 
a decision tree for a boolean function f is a labeled binary tree  where each inner node is
labeled with a variable  while leaves and edges have labels   or    a decision tree computes
f  x  for a given assignment x by a process which starts at the root and in each visited
node follows the edge labeled by the value of the variable  which is the label of the node 
the output is the label of the leaf reached by this process  if a computation path tests a
variable  which was tested in the previous part of the path  then this test is redundant  we
consider only trees without such redundant tests 
   

fisavicky   kucera

a decision tree representing the same function as a given cnf formula  can be constructed top down as follows  the root of the tree is assigned to   for each non leaf node
of the tree assigned to a formula   we choose an arbitrary split variable x which has an
occurrence in  and assign the restricted formulas  x      and  x      to the successors 
a node assigned to an empty formula becomes a   leaf and a node assigned to a formula 
which contains an empty clause  becomes a   leaf  the resulting decision tree represents
the function given by   although it can be too large for practical purposes  each path from
the root to an inner node u of the tree corresponds to a partial assignment which changes
 to a formula representing the function computed by the subtree whose root is u  the
depth of a tree for a function of n variables is at most n 
each leaf node labeled with   represents a set of models of   more precisely  a leaf
in depth d represents  nd models of   moreover  different leaves of the tree represent
disjoint sets of models  given a decision tree for the function represented by   we can  by
traversing it  generate all models of  in time proportional to its size  this process leads to
a large delay between generating successive models  if the tree contains large subtrees with
only   leaves  the following condition on a class of formulas describes a situation when this
can be avoided 
definition      let u be a class of formulas  let   u and let x be a variable with
an occurrence in   we say that x is a splitting variable for  relative to u   if for every
a          such that  x   a  is satisfiable  we have  x   a   u  
a class of formulas u has the splitting property  if every formula in u containing a
variable contains a splitting variable relative to u  
we shall associate a splitting problem with a class of formulas u having splitting property 
definition      let u be a class of formulas with splitting property  the splitting problem
relative to u is the following problem  given a formula   u   find a splitting variable for
 relative to u and the results of satisfiability tests for the formulas  x      and  x      
note that the complexity of the splitting problem relative to u is also an upper bound on
the time of a satisfiability test for formulas in u   this is because a formula  is satisfiable 
if and only if for any variable x we have that at least one of the formulas  x      and
 x      is satisfiable  the result of these satisfiability checks for a splitting variable x is a
required part of solution to the splitting problem 
theorem      if a class of formulas u has the splitting property and the splitting problem
relative to u can be solved in time c    where c    kk for each formula   u   then
the models of a formula   u with n variables can be generated with a delay o n  c    
proof  construct a tree for  in a dfs order using a splitting variable for every formula
assigned to a non leaf node  if a non leaf node is labeled by  and x is the splitting
variable  the successors are labeled by  x      and  x       if some of these formulas
is unsatisfiable  the corresponding successor becomes a   leaf  if some of these formulas is
empty  the corresponding successor becomes a   leaf  the root of the tree is split even if
 is unsatisfiable  however  other nodes labeled by an unsatisfiable formula are not split 
   

figenerating models of a matched formula

hence  except possibly of the root  there is no other node with two   leaves as successors 
since the length of every formula in the tree is at most kk  in each node  time o c   
is sufficient to choose a splitting variable  determine which of the successors is a leaf  and
construct the formulas for the successors of the node 
let us assume that u is a non leaf node of the constructed tree different from the root 
one of the successors of u can be labeled by an unsatisfiable formula  this is recognized
by the splitting algorithm and this successor is a   leaf  consequently  in time at most
o c     the construction of the tree continues at a satisfiable successor of u  hence  in at
most n splitting steps and time at most o n  c     a   leaf is reached   
remark      if  contains a unit clause and u is closed under unit propagation  then a
variable x contained in a unit clause is a splitting variable which can be identified efficiently 
the reason is that if  is known to be satisfiable  then one of the formulas  x   a  contains
an empty clause and  hence  the other is satisfiable 
remark      if a class u satisfies that
   the satisfiability of formulas in u can be tested in polynomial time  and
   u is closed under partial assignments 
then the splitting problem relative to u has polynomial complexity  indeed  in this case
any variable in a formula  from u is a splitting variable and the satisfiability tests for the
corresponding restrictions can be obtained in polynomial time  class u with this property
is sometimes also conservative  we can also say that this property is a particular form
of self reducibility  in a sense considered e g  by khuller   vazirani         all classes
of generalized satisfiability problem described by creignou and hebrard        have this
property in addition to other classes  consider  for instance  horn formulas  slur formulas 
 cnfs  q horn formulas  etc  as an immediate corollary of theorem      it is possible to
generate the models of formulas in these classes with a polynomial delay 
the main result of this paper is that the splitting problem relative to a slight generalization of matched formulas also has polynomial complexity although the class of matched
formulas is not closed under partial assignments 

   pure literal satisfiable formulas
before considering matched formulas  let us make a small detour to the class of formulas
which are satisfiable by iterated elimination of pure literals  which we call pure literal
satisfiable  these formulas have already been considered by kullmann        as a special
case of linearly satisfiable formulas 
a set of literals is called consistent  if it does not contain contradictory literals  if l
is a literal  let assign l  be the assignment to the variable contained in l  which satisfies
l  for a consistent set or sequence of literals l  let assign l  be the partial assignment
of the variables satisfying the literals in l  for a formula    l  is an abbreviation for
 assign l   
   

fisavicky   kucera

definition      a pure literal sequence for a formula  is a consistent sequence of literals
 l            lk    such that for every i              k  the literal li is either pure or irrelevant in the
formula  l            li     in particular  l  is pure or irrelevant in   a pure literal sequence is
called strict  if each of the literals li is pure in  l            li    
if l is a pure literal sequence for   the formula  l  will be called the reduced formula
corresponding to  and l  if  l  does not contain a pure literal  l will be called a maximal
pure literal sequence for  
definition      a formula  is pure literal satisfiable  if there is a pure literal sequence l
for   such that the reduced formula  l  is empty or  equivalently  assign l  is a satisfying
assignment of  
an autarky for a formula  is a partial assignment v of the variables  such that every
clause is either satisfied or unchanged by v  autarkies were studied e g  by kullmann
        note that every initial segment of a pure literal sequence defines an assignment
to the variables  which is an autarky  moreover  one can easily verify that this property
characterizes pure literal sequences 
let us note that pure literal satisfiable formulas are not closed under partial assignments 
consider a formula   which does not contain a pure literal  let  be the formula obtained
from  by adding a new variable x as a positive literal to every clause  formula  is
pure literal satisfiable  but  x         is not pure literal satisfiable  it follows that
pure literal satisfiable formulas do not satisfy the second property required in remark    
and we have to put more effort into showing that pure literal satisfiable formulas have the
splitting property and that the splitting problem relative to pure literal satisfiable formulas
has polynomial complexity 
for every cnf formula  it may be tested in polynomial time  whether it is pure literal
satisfiable  in order to find a pure literal sequence witnessing this fact  the procedure
findpls in algorithm   uses a greedy approach  which at each step chooses and satisfies
any pure literal in the current formula  this approach is meaningful  since if a literal
is pure at some stage of the procedure  it either remains pure or becomes irrelevant in
the following stages  the pure literal sequence obtained by the procedure depends on the
nondeterministic choices made by the procedure  however  by corollary      the resulting
reduced formula is uniquely determined by the input 
lemma      if a clause c of a cnf  is removed by some run of findpls  then it is
removed by every run of findpls with input  
proof  let l and k be pure literal sequences produced by different runs of findpls for
  the formulas  l  and  k  are the corresponding reduced formulas and let c be a
clause of  not contained in  l   hence  l contains some of the literals of c  since  k 
is a subset of   l is a pure literal sequence for  k   if some literal of l is contained in
 k   then the first of such literals is pure in  k   since  k  does not contain a pure
literal  no literal of l is contained in  k   in particular  c is not contained in  k    
the following is an immediate corollary 
   

figenerating models of a matched formula

algorithm   constructing pure literal sequence
require  a cnf formula  
ensure  a maximal strict pure literal sequence l for  and the corresponding reduced
formula 
   procedure findpls  
  

  
initialize a new empty list of literals l 
  
initialize pure   as a set of pure literals in  
  
while pure       do
  
choose a literal l from pure   
  
add l to l 
  
   l  
  
update pure   to consist of pure literals in  
   
end while
    end procedure

corollary      let  be a cnf formula and let l be a pure literal sequence obtained by
findpls for  
   the formula  l  is uniquely determined by  
   the formula  is pure literal satisfiable  if and only if  l  is empty 
since the running time of procedure findpls is polynomial in the length of the input
formula  a maximal pure literal sequence for a formula can be constructed in polynomial
time  the complexity of constructing a maximal pure literal sequence for a formula  is  in
fact  o kk  by lemma     
lemma      let l    l            ln   be a pure literal sequence for a formula   which contains
a literal for each variable of   for i              n  denote by xi the variable contained in li  
if xi is the variable with the largest index i among the variables  which have an occurence in
  then xi is a splitting variable for  relative to pure literal satisfiable formulas and each
of the formulas  xi      and  xi      is satisfiable  if and only if it does not contain an
empty clause 
proof  let  be one of the formulas  xi      and  xi      and let l    l            li    
clearly  l is a pure literal sequence for   moreover  if  does not contain an empty clause 
then l assigns a value to some of the literals in every clause of  and hence  satisfies it   
for now it is sufficient to show that the splitting problem relative to class of pure literal
satisfiable formulas has polynomial complexity  later in theorem     we shall show that
the splitting problem can in this case be solved in time o kk  
lemma      the splitting problem relative to class of pure literal satisfiable formulas has
polynomial complexity 
   

fisavicky   kucera

proof  if  is pure literal satisfiable  then a pure literal sequence  which satisfies it  can be
obtained by findpls in polynomial time  if the sequence does not contain literals for all
variables  it is extended in polynomial time by appending arbitrary literals for the missing
variables to obtain a pure literal sequence satisfying the assumption of lemma      then 
this lemma implies a method to select a splitting variable and obtain the results of the
satisfiability test for the corresponding restrictions in polynomial time   
if a pure literal sequence satisfies the assumption of lemma     for a formula   then
the same sequence can be used to find a splitting variable for all formulas in a splitting tree
for   using this  the models of a pure literal satisfiable formula can be generated with a
delay smaller than the general bound from theorem      see corollary     
remark      the sign of a literal for a given variable  which occurs in a strict pure literal
sequence  is not uniquely determined  each of the variables y  and y  can occur both
positively and negatively in a strict pure literal sequence for the formula
 x   y      x   y      x   y      x   y      y   y     
for example   x    y    x    y    and  x    y    x    y    are strict pure literal sequences for this formula 

   matched formulas
in this section we concentrate on matched formulas  let us start with showing that the
problem of determining the number of models of a matched formula   i e  the size  t     
is as hard as a general  sat problem 
theorem      the problem of determining  t     given a matched formula  is  pcomplete 
proof  let    c   c          cm be an arbitrary cnf formula on n variables  let
y            ym be new variables not appearing in  and let d    y   y          ym   be a clause 
let us define a cnf formula of n   m variables  equivalent to   d as
    c   d    c   d           cm  d   
clearly   is a matched formula and one can also observe that  t        t       n   m     
we have thus reduced the problem of counting the models of a general cnf formula 
 i e  the general  sat problem  to the problem of counting the models of a matched cnf
formula   i e  the  sat problem restricted to the matched formulas    
our goal is to show that we can generate the models of a matched formula with a
polynomial delay  theorem     cannot be used for this directly  since the class of the
matched formulas does not have the splitting property as can be seen from the following
example  consider the formula
 x   x      x   x      x   x     
   

figenerating models of a matched formula

this formula is matched  but it has no splitting variable  indeed  setting x  to   leads to
a satisfiable  yet not matched formula  x    x    x   x    and by symmetry this is true for
variables x  and x  as well  in order to achieve our objective  we have to consider a richer
class of formulas  the class we consider generalizes matched and pure literal satisfiable
formulas as follows  note that an empty formula is matched  since it corresponds to an
empty graph and we can formally assume that an empty graph possesses the required
matching 
definition      a formula  is called pure literal matched  if the reduced formula obtained
by procedure findpls for  is matched 
elimination of a pure literal preserves the property of being matched  since a pure literal
is an autarky  hence  a matched formula is pure literal matched  clearly  every pure literal
satisfiable formula is pure literal matched  since its reduced formula is empty and  hence 
matched 
the basic idea of an efficient splitting algorithm for the matched formulas is presented
in the following theorem  later we shall show in corollary     that the splitting problem
relative to pure literal matched formulas can be solved in time o n   kk  
theorem      the class of pure literal matched formulas has the splitting property and
the splitting problem relative to pure literal matched formulas has polynomial complexity 
in order to prove theorem      we have to show several statements concerning the
structure of a matched formula  if v is a set of variables  we say that a clause is limited to
v   if it contains only literals with variables from v  
definition      let v be a subset of the variables of a matched formula  and let c denote
the set of clauses in  which are limited to v   the set v will be called a critical block   if
 c     v    formally  if v is empty  it is also a critical block 
note that if  is a matched formula  v is a subset of its variables  and c is the set
of the clauses in  limited to v   then by halls theorem  theorem     above  we have
 c    c    v    critical blocks are those achieving the equality  these blocks have the
following property 
lemma      let v be a critical block of a matched formula   then  in every clause
saturated matching of i    the variables from v are matched to clauses limited to v  
proof  let  be a matched formula with a fixed clause saturated matching between the
variables and the clauses of   if v is a critical block  then there are  v   clauses limited
to v and these clauses are matched to the variables in v   since the variables matched to
these clauses are different  each of the variables in v is matched to one of these clauses   
another useful property of the set of the critical blocks is as follows 
lemma      the set of the critical blocks of a matched formula is closed under intersection 
proof  let  be a matched formula and let v    v  be critical blocks  if the intersection
v   v  is empty  the conclusion of the lemma is satisfied  if there is a variable x  v   v   
   

fisavicky   kucera

then by lemma      in every clause saturated matching of i    this variable is matched to
a clause  which is limited to v  and also to v    hence  the number of the clauses  which are
limited to v   v    is at least  v   v     since  is matched  the number of these clauses is
equal to  v   v    by halls theorem  hence  v   v  is a critical block as required   
if  is a formula and x is a variable contained in at least one critical block  then
lemma     implies that there is a unique inclusion minimal critical block of  containing
x  which is equal to the intersection of all critical blocks of  containing x  if a matched
formula has the same number of clauses and variables  then every variable is contained in
a critical block  since the set of all the variables of the formula is a critical block 
definition      if  is a matched formula with the same number of clauses and variables and x is one of its variables  then let bx denote the inclusion minimal critical block
containing x 
the notation bx does not specify the formula  since it will always be clear from the
context  our aim is to show that if a formula  is matched  then either we can find a
splitting variable for  relative to matched formulas  or  is actually pure literal satisfiable 
in order to show this property which is at the basis of our algorithm  we shall first investigate
the structure of critical blocks with respect to matchings 
lemma      let  be a matched formula with the same number of clauses and variables 
let l be a literal containing a variable x and let us assume that the formula  l  is not
matched  then
   the literal l is pure or irrelevant in the clauses of  limited to bx  
   if a clause c of  contains l  then in every matching for   c is matched to a
variable y  such that bx  by  where  denotes strict inclusion  
proof  by symmetry  we shall consider only the case l   x  hence  by the assumptions 
 x      is not a matched formula 
   the critical block bx is a subset of every critical block containing x  hence  in order
to prove the first part of the lemma  it is sufficient to show that there is at least one
critical block b containing x  such that x does not occur negatively in the clauses
limited to b  let c be any set of the clauses for which the halls condition for the
formula  x      is not satisfied so we have   c      c   let v    c  be the set of
the variables  which have an occurrence in some of the clauses of c  and let k    v   
there are at least k     clauses in c  since every clause of c is limited to v   there
are at least k     clauses of  x      limited to v   each of these clauses is either a
clause of  or is obtained from a clause of  by removing the literal x  consider the
set of the clauses of  limited to v   x   since  is matched  the halls condition
is satisfied for this set  hence   contains at most k     clauses limited to v   x  
setting x     leads to at least k     clauses limited to v   hence   contains precisely
k     clauses limited to v   x  and none of them contains the literal x  hence 
v   x  is a critical block with the required property and the proof of the first part
of the lemma is finished 
   

figenerating models of a matched formula

   let us fix a clause saturated matching m of clauses to variables in i   and let d
be a clause in  which is matched to x  since  x      is not matched  it follows
that d contains the positive literal x  otherwise the same matching would work for
 x      as well  let c be a clause containing x and let y be a variable to which c
is matched in m   since c is different from d  we have y    x  by the assumptions 
the set of all variables is a critical block for  and  hence  the critical block by is
well defined  since c is matched to y  we have that c is limited to by by lemma     
this implies x  by   because x  c  since by is a critical block containing x and
bx is the inclusion minimal critical block containing x  bx  by   by the first part of
the lemma  no clause limited to bx contains x which implies that c is not limited
to bx and thus bx    by   together we get that bx  by  
 
the structure of the critical blocks will be used to show the following proposition needed
to prove theorem     
theorem      let  be a matched formula  if for every variable x  which has an occurence
in   there is a          such that  x   a  is not matched  then  is pure literal satisfiable 
proof  let  be a matched formula satisfying the assumptions and let us fix a clause
saturated matching m of i    if there is a variable x in  which is not matched to a
clause  then assigning any value to x yields a matched formula  by assumption we can
therefore suppose that such variable does not exist in  and that each variable is matched
to a clause  in this case  the numbers of clauses and variables of  are equal and for each
variable x in   bx is well defined 
let n be the number of the variables and the clauses of   for each i              n  let li
be the literal containing the variable xi in the clause matched to this variable  for every
i              n  the formula  li   is matched and the formula  li   is not matched  consider
the strict partial order on the variables defined by
x   y  bx  by

   

where  means a strict inclusion  by lemma      the variables which are maximal in this
partial order are pure in   let us consider a total ordering of the variables  which is
consistent with the strict partial order      using an appropriate renaming of the variables 
we may assume that this ordering is x            xn   so for every i  j  if xi   xj   then i   j 
let us verify that using this ordering  the sequence ln   ln            l  is a satisfying pure literal
sequence for   let us show by induction on i   n            that xi is pure or irrelevant in
the formula  ln           li      it is true for i   n by lemma      because xn is maximal in the
order of variables induced by the inclusion of their critical blocks  let us now fix some i and
consider the partial assignment assign ln           li      by lemma      each clause containing
li is matched to a variable xj satisfying xi   xj   hence  these clauses are eliminated by
the considered partial assignment and the variable xi is pure or irrelevant in the formula
 ln           li       
proof of theorem      assume   is a pure literal matched formula  let l be a pure
literal sequence obtained by findpls procedure for  and let     l   which is  by the
   

fisavicky   kucera

assumption  a matched formula  since l is maximal   does not contain a pure literal  if 
is empty  then  is itself a pure literal satisfiable formula and we can find a splitting variable
for  by the method from lemma      if  is not empty  then it is matched and not pure
literal satisfiable  hence  by theorem      there is a variable x of   such that  x     
and  x      are both matched  since l does not contain a literal with the variable x  the
application of assign l  and x   a commute for each a          hence  l is a pure literal
sequence for the formula  x   a  and the application of assign l  to  x   a  leads to
 x   a   which is matched  hence  for each a          the formula  x   a  is pure literal
matched and the variable x is a splitting variable for the formula  
a time polynomial in the length of the formula is sufficient to select a splitting variable
x as in the proof above  if  is nonempty  the satisfiability of  x      and  x      is
guaranteed by the choice of x  if  is empty   is pure literal satisfiable and the method from
lemma     is used  hence  a splitting variable and the results of the required satisfiability
tests can be obtained in polynomial time   
similarly as the class of matched formulas  also the class of pure literal matched formulas
is closed under unit propagation  this implies that unit propagation can be used as part
of the construction of the splitting tree  in particular by remark     we can always select a
variable in a unit clause as a splitting variable 
proposition       the class of pure literal matched formulas is closed under unit propagation 
proof  assume   is a pure literal matched formula containing a unit clause c    l  where
l is a literal  let us prove that  l  is a pure literal matched formula 
let l be a pure literal sequence for   observe that l cannot be contained in l  because
 l  is unsatisfiable  in the rest of the proof  we distinguish  whether l is contained in l
or not 
if l is contained in l  let l  denote the sequence of literals in l before l and let l  be the
sequence of literals in l after l  for simplicity  this can be written as l    l    l  l     some
of the clauses of  are missing in  l  and some are changed by removing l  since l is not
contained in l    the sequence l  is a pure literal sequence for  l   since any assignments
to disjoint sets of variables commute  we have  l    l     l  l    and  hence  the sequence
l  is a pure literal sequence for both these formulas  hence  the sequence l    l    l    is
a pure literal sequence for  l   since  moreover   l    l  l       l  l    l     the application
of l to  l  leads to a matched formula  consequently   l  is pure literal matched 
let us now consider the case when l is not contained in l  in this case  l  is a matched
formula which contains a unit clause c    l   since this clause cannot be eliminated by
satisfying any of the literals in l  in every maximum matching of  l   clause c is matched
to l  thus satisfying l gives a matched formula  l  l   since  l  l     l  l  and l is a
pure literal sequence for  l   this formula is pure literal matched   

   algorithms and complexity
in this section  we prove specific complexity bounds for the algorithms presented in the
previous sections  the complexity bounds are derived for the ram model with the unit cost
   

figenerating models of a matched formula

measure and the word size o log kk   where  is the input formula  the data structures
used in the algorithms are similar to those described by minoux        or murakami and
uno         let us first concentrate on the pure literal satisfiable formulas 
lemma      a maximal pure literal sequence l for a cnf formula  can be constructed
in time o kk  
proof  we use the approach presented in the linear time algorithm for unit propagation
by minoux        to obtain an efficient version of procedure findpls in algorithm    in
addition to the initializations in algorithm    we initialize some auxiliary data structures 
these data structures are similar to those described by murakami and uno         in
particular  the occurences of the literals in the formula are represented as nodes arranged as
a sparse matrix  whose rows correspond to literals and columns correspond to clauses  each
node contains an identification of the clause and the literal  whose occurence it represents 
all the auxiliary data structures and their names are as follows 
 for each literal l we denote cl l  the row of the matrix  which is a doubly linked list
of nodes representing the occurences of l in  
 for each clause c   we denote lit c  the column of the matrix  which is a doublylinked list of nodes corresponding to the occurences of literals in c 
 for each literal l we denote cnt l  a counter  which contains the size of list lit c  that
is the number of clauses in which l appears 
 we initialize the set pure   as a queue which always contains pure literals in  
these are the literals l for which cnt l      and cnt l      
all these data structures can be initialized by traversing  in linear time  it is important
to note that each node represents an occurence of a literal l in a clause c  as such the
structure representing the node contains four pointers  two for doubly linked list lit c  and
two for double linked list cl l   thus removing this node from any of these lists can be
performed in constant time 
in procedure findpls we repeat the following steps  find a pure literal l in   add l to
l and apply assign l  to   finding a pure literal amounts to dequeueing it from pure   
when applying assign l  we remove all clauses containing l  these are now satisfied  and
remove l from the remaining clauses  let   consist of clauses in  which contain l and
let   consist of clauses in  which contain l  we claim that assign l  can be applied to
 in time o k  k         
   removing clauses in   means going through the list cl l  and for each clause c in
this list and each literal l in lit c   including l   remove the corresponding node from
cl l   and make the list lit c  inaccessible  this requires time o    for each literal l  
during this operation we also decrement the counters cnt l   of literals in lit c  and
if any of their negated counterparts becomes pure  we add it to queue pure   
   removing all occurrences of l means going through the list cl l  and for each clause
c in this list  remove the corresponding node from cl l  and from lit c   this can
be done in time o    for each occurrence of l 
   

fisavicky   kucera

repeating these steps for all literals which are included into l requires a constant number
of operations on each occurrence of a literal in the input formula  which implies the total
time o kk    

theorem      the splitting problem relative to pure literal satisfiable formulas can be
solved in time o kk  where  is the input pure literal satisfiable formula  moreover  the
set t    of the models of a pure literal satisfiable formula  can be generated with a delay
of o kk  
proof  using the efficient version of findpls guaranteed by lemma      all the operations
used in the proof of lemma     can be done in time o kk   this implies the first statement
of the theorem  the same procedure will be used as a preprocessing step for the algorithm
proving the second statement  in time o kk   the preprocessing produces a pure literal
sequence l    l            ln    which contains a literal for each variable of   the auxiliary data
structures cl l   lit c  and cnt l  used in the preprocessing will be used also later  so they
can be stored or reconstructed when needed 
by construction of l  the assumption of lemma     is satisfied for  and l  if the method
from lemma     is used to find a splitting variable for such a formula  then each of the
corresponding restrictions either contains an empty clause or also satisfies the assumption
of lemma     with l  hence  the sequence l can be used for selecting a splitting variable
in all nodes of a splitting tree for  
the dfs search is controlled by a stack of postponed nodes  which is initialized with
the root before the search starts  the search is split into a sequence of descending branches 
each of the descending branches starts by removing a node from the stack and resuming
the search from this node  if a visited node has two satisfiable successors  dfs continues to
one of them and the other is put onto the stack  if a node has a single satisfiable successor 
then the stack is not modified  each descending branch ends when a   leaf is found  for an
estimate of the delay  we estimate the total time needed to construct nodes in one of these
descending branches as follows 
the indices in l of the splitting variables chosen in a descending branch are monotonically decreasing  hence  the total time needed to search for all the splitting variables in
one descending branch is o n  and  hence  o kk  
the time needed for manipulations with the formula in one descending branch is as
follows  when a node is removed from the stack  the auxiliary data structures cl l   lit c 
and cnt l  are computed for the original formula  and then modified according to the
sequence of settings of the variables along the path from the root to the current node  this
can be done in time o kk   then  in each node of the descending branch  both assignments
of the chosen variable are computed and a satisfiable successor is selected  in one node  this
can be done in time o k   where k is the number of the occurrences of the chosen variable in
  when a satisfiable successor is selected  the auxiliary structures are updated according
to it  the total time needed for these operations in one descending branch is o kk  using
a similar argument as in the proof of corollary     
by combining the above estimates  the total time for constructing a descending branch
and  hence  the delay between generating two consecutive models  is o kk    
   

figenerating models of a matched formula

now let us concentrate on the time complexity of selecting a splitting variable of a pure
literal matched formula 
lemma      the splitting problem relative to pure literal matched formulas can be solved
in time o n  kk  where  is the input formula on n variables 
proof  following the proof of theorem      we first find a pure literal sequence l for 
which can be done in time o kk  by lemma      if     l  is an empty formula  the
last variable in l is a splitting variable  otherwise  is matched and we find a maximum

matching m for   this step can be performed in time o kk  n   see hopcroft   karp 
       then  we search for a variable x in   such that both  x      and  x      are
matched  such a variable exists by theorem      if the number of the clauses of  is less
than n  any variable not used in the matching has this property  otherwise  we check for
every variable  whether  x   a  is matched for a          if the assignment x   a satisfies
the matched literal containing x  then  x   a  is matched  in the rest of the proof  we
estimate the complexity of each of the at most n checks for the assignments falsifying a
matched literal 
partial assignment can be performed in time o kk    o kk   during partial assignment the satisfied clauses are removed and the occurences of variable x are removed from
the remaining clauses  we modify matching m into a matching n for  x   a  accordingly  that is we remove pairs containing a satisfied clause and the pair containing x  if in
 n     m  where m is the number of clauses in  x   a    we are done  otherwise we know
that  n     m     since at most one pair containing a clause of  x   a   specifically  the
pair containing a literal on x  was removed from m when forming n   it remains to check
whether n is already a maximum matching or whether there is a better matching  this
can be tested by looking for a single augmentating path in i  x   a   for matching n   an
augmentating path can be found using a breadth first search in time linear in the size of
the graph i  x   a    see e g  hopcroft   karp        lovasz   plummer         hence 
the test  whether  x   a  is matched can be done in time o kk    o kk    
as a corollary of lemma     and the general bound from theorem      we get the
following 
corollary      models of a pure literal matched formula  on n variables can be generated
with a delay o n   kk  
proof  by lemma     we can find a splitting variable for a pure literal matched formula 
in time o n  kk   in the same time we can determine the satisfiability of formulas  x     
and  x      as well  by theorem     we thus get that the delay is o n   kk    

   linearly satisfiable formulas
in this section we consider the class of linearly satisfiable formulas  by results of kullmann
        this class generalizes both the matched formulas and the pure literal satisfiable
formulas and  by combining the proofs  also the class of pure literal matched formulas  in
this section  we show that it is not possible to generate models of linearly satisfiable formulas
with a polynomial delay unless p np 
   

fisavicky   kucera

as a consequence  the splitting problem relative to linearly satisfiable formulas does not
have polynomial complexity unless p np  this consequence follows also unconditionally
from example       which presents a linearly satisfiable formula of   variables  which does
not have a splitting variable with respect to the class of linearly satisfiable formulas 
let us recall the notation introduced by kullmann  which is used below to present the
definition and basic facts concerning the linearly satisfiable formulas  if l is a literal  then
var l  is the variable in this literal  if v is a partial assignment  then v l  is the value of this
assignment on literal l 
definition      kullmann         let  be a cnf formula and let v be a non empty
partial assignment of the variables of   we say that v is a simple linear autarky  if there
is an associated weight function w which assigns each variable x evaluated by v a positive
real number w x  such that for all clauses c of  we have
x
x
w var l   
w var l    
   
lc v l   

lc v l   

clearly  if any literal in c is falsified by v  then there must be a literal satisfied by v as
well  therefore a simple linear autarky is an autarky  kullmann showed that we can check
whether there is a simple linear autarky v for a cnf formula  and find one  if it exists 
by solving several linear programs 
if a literal l is pure in a formula  then the partial assignment v l      with the weight
w var l       is a simple linear autarky for the formula  as another example  consider any
satisfying assignment of a satisfiable   cnfs  such an assignment with the same weight
for all variables forms a simple linear autarky  similarly  pure horn cnfs without unit
clauses are satisfiable by a simple linear autarky which assigns value   and equal weight to
all variables  on the other hand  if a pure horn cnf formula contains a unit clause  it can
be satisfiable and have no simple linear autarky  an example is the formula
 x      x   x      x   x      x   x   x     
which has no simple linear autarky by theorem     and lemma     below 
by considering iterative application of simple linear autarkies to a formula we can get
the class of linearly satisfiable formulas defined as follows 
definition      kullmann         the class of linearly satisfiable formulas is defined as
the smallest class satisfying the following two properties 
   an empty cnf is linearly satisfiable 
   let  be a cnf  such that there is a simple linear autarky v for  and  v  is linearly
satisfiable  then so is  
in other words  a cnf formula  is linearly satisfiable if by subsequent applications
of linear autarkies we obtain an empty formula  a composition of simple linear autarkies
is called linear autarky by kullmann        and the class of linearly satisfiable formulas
therefore consists of formulas which are satisfiable by a linear autarky  kullmann showed
that all matched formulas are linearly satisfiable  since a pure literal is a simple linear
   

figenerating models of a matched formula

autarky  any pure literal satisfiable formula is linearly satisfiable  similarly  any pure literal
matched formula defined in section   is linearly satisfiable by simple linear autarkies for
the pure literals concatenated with the linear autarky for the resulting matched formula 
while for matched and pure literal satisfiable formulas we have presented algorithms
which generate models of these formulas with polynomial delay  it is not possible to extend
this result to linearly satisfiable formulas unless p np  let us first present a construction 
which is used in a reduction argument 
let  be an arbitrary   cnf formula with variables x            xn and clauses c            cm  
consider new variables y    y    y  and let  be the formula consisting of the clauses
 y   y      y   y      y   y    
 cj  y   y   y    
j              m
 xi  y   
i              n  
recall that the number of the models of a formula is the number of the satisfying assignments
of the variables  which have an occurrence in it  hence  in the next lemma  t    and t   
are defined on different sets of the variables 
lemma      formula  is linearly satisfiable and the number of its models is  t      
 t         

proof  each clause ci of  contains three literals  hence  in each clause of   the number
of the positive literals is at least the number of the negative literals  it follows that the
assignment of all variables to   with equal weight for all variables defines a simple linear
autarky  which satisfies   hence  this formula is linearly satisfiable 
any model of  satisfies y    y    y    an assignment containing y    y    y      is a
model of  if and only if xi     for i              n  an assignment containing y    y    y     
is a model of  if and only if the assignment of the variables xi is a model of   this implies
the second part of the statement of the lemma   
since the formula  can be constructed for every   cnf formula   the lemma implies
the following immediate corollary 

corollary      it is an np complete problem to determine  whether a general linearly
satisfiable formula has at least   models 
note that this implies np hardness of  sat problem restricted to the linearly satisfiable formulas  this problem is  in fact  also  p complete  since it is  p complete to
count models of monotone formulas  which are pure literal satisfiable and  hence  linearly
satisfiable 
in example      below  we present a linearly satisfiable formula  which has no splitting
variable relative to the class of linearly satisfiable formulas  for analysis of this example  we
use a characterization of simple linear autarkies obtained using the clause variable matrix 
definition      let  be a cnf formula with clauses c            cm and variables x            xn  
the clause variable matrix of this formula is the matrix a    aj i   of the dimension m  n
defined as

   xi  cj
  xi  cj
aj i  

  otherwise  
   

fisavicky   kucera

if u  rm   then u    means uj    for all j              m  kullmann showed the following
proposition 
lemma      kullmann         a formula  with the clause variable matrix a has a simple
linear autarky  if and only if there is a nonzero z  rn   such that az     moreover  a
linear autarky can be obtained from such a vector z using the assignment

   if zi    
v xi    
  if zi    

 if zi    
and the weight function w xi      zi   
let us present the well known farkas lemma in the form used in the proof of theorem
    
theorem      farkas lemma   let a be an m  n real matrix and b  rn   then  exactly
one of the following statements is true 
   there is a vector y  rm   such that y    and y t a   bt  
   there is a vector z  rn   such that az    and bt z     
a linear combination of real vectors with non negative coefficients will be called  for
simplicity  a non negative combination 
theorem      assume   is a formula of n variables and m clauses and a is its clausevariable matrix of the dimension m  n  then  exactly one of the following statements is
true 
 a   has a linear autarky 
 b  every vector in rn is a non negative combination of the rows of a 
proof  first  assume  both  a  and  b  are satisfied  lemma     implies that there is a
non zero z  rn   such that az     by  b   there is a non negative vector y  rm   such
that y t a   z t   multiplying this by z from the right  we get
y t az   z t z      
this is a contradiction  since both y and az are non negative 
assume   b  is not satisfied  hence  there is a vector b  rn   which is not a non negative
combination of the rows of a  by farkas lemma  there is a vector z  rn   such that az   
and bt z      since the latter condition implies that z is non zero  there is a simple linear
autarky for  by lemma     which means that  a  is satisfied   
lemma      assume  a is a matrix of dimension m  n  such that rank a    n and there
is a vector u  rm with all components positive  such that ut a      then  every vector in
rn is a non negative combination of the rows of a 
   

figenerating models of a matched formula

proof  by the assumption  the linear space generated by the rows of a is rn   hence  for
every z  rn   there is v  rm   such that v t a   z  for a sufficiently large real number s 
the vector v   su has all components non negative and  v   su t a   z   
note that every linearly satisfiable cnf formula of at most   variables has a splitting
variable relative to the class of linearly satisfiable cnf formulas  since setting any variable
to a constant leads to a formula of at most   variables  which is at most quadratic and 
hence  is satisfiable if and only if it is linearly satisfiable 
example       denote e    a               a    a    a    a      and for every boolean
variable x  let x    x and x    x  the formula
 x    x    x    x     

 
   

xai i

ae i  

is linearly satisfiable  but has no splitting variable relative to the class of linearly satisfiable
formulas 
proof  in every clause  the number of positive literals is at least the number of negative
literals  hence  the formula  is linearly satisfiable by lemma     with z                
since  is invariant under any permutation of the variables  it is sufficient to prove that
x  is not a splitting variable  since every clause of  contains a negative literal  we have
                  it follows that the formula  x       is satisfiable  one can verify that
 x        

 
   

xai i  

ae  i  

where e     a               a    a    a       in order to prove that  x       is not
linearly satisfiable  consider its clause variable matrix with the columns corresponding to
x    x    x    which is


 
   
    
  


  

 
 


         


  
    
   

 

this matrix has rank    since each of the vectors                                 is a sum of two
rows out of the first three  moreover  the sum of all the rows of this matrix is the zero
vector  hence  the formula  x       does not have a linear autarky by lemma     and
theorem       

   conclusion and directions for further research
in this paper  we have shown that it is possible to generate the models of a matched formula
 of n variables with delay o n   kk   as a byproduct we have shown that the models
   

fisavicky   kucera

of a pure literal satisfiable formula   i e  a formula satisfiable by iterated pure literal
elimination  can be generated with delay o kk   we have also shown that this result
cannot be generalized for the class of linearly satisfiable formulas since it is not possible to
generate models of linearly satisfiable formulas with a polynomial delay unless p np 
let us mention that the procedure for generating the models with a bounded delay can
be extended to formulas for which a small strong backdoor set with respect to the class
of matched formulas with empty clause detection can be found  let us assume that b is
such a backdoor set for a formula   i e  b is a set of variables satisfying that any partial
assignment to variables in b leads to a matched formula  or to a formula containing an
empty clause  then we can generate the decision tree for   and thus generate its models 
in time o   b  kk   t  f   n  kk   unfortunately  searching for strong backdoor sets with
respect to the class of matched formulas is hard  szeider        
the algorithms described in this paper for the cases of pure literal satisfiable and pure
literal matched formulas can be used in a general algorithm for model enumeration which
is based on splitting tree  this  in turn  is any dpll based enumeration algorithm  to
this end  a similar approach to the one described by stefan szeider        can be used 
together with a formula  we would keep a maximum matching m of i    this maximum
matching can then be maintained through the reduction and assignment steps performed
in the enumeration algorithm  once the algorithm arrives at a matched formula  it can
select splitting variables in the way we have described in this paper which has guaranteed
polynomial delay 
an interesting question is whether our approach could be used with the parameterized
satisfiability algorithm based on maximum deficiency  see szeider        in order to get a
parameterized algorithm for generating the models of a general formula 

acknowledgments
petr savicky was supported by ce iti and gacr under the grant number gbp       g   
and by the institutional research plan rvo           petr kucera was supported by the
czech science foundation  grant ga        s  

references
aceto  l   monica  d   ingolfsdottir  a   montanari  a     sciavicco  g          logic for
programming  artificial intelligence  and reasoning    th international conference 
lpar     stellenbosch  south africa  december              proceedings  chap  an
algorithm for enumerating maximal models of horn theories with an application
to modal logics  pp       springer berlin heidelberg  berlin  heidelberg 
aharoni  r     linial  n          minimal non two colorable hypergraphs and minimal
unsatisfiable formulas  journal of combinatorial theory  series a                   
bollobas  b          modern graph theory  vol      of graduate texts in mathematics 
springer 
   

figenerating models of a matched formula

coquery  e   jabbour  s   sais  l   salhi  y   et al          a sat based approach for
discovering frequent  closed and maximal patterns in a sequence  in proceedings of
ecai 
creignou  n     hebrard  j  j          on generating all solutions of generalized satisfiability
problems  informatique theorique et applications                 
creignou  n   olive  f     schmidt  j          theory and applications of satisfiability
testing   sat         th international conference  sat       ann arbor  mi  usa 
june              proceedings  chap  enumerating all solutions of a boolean csp by
non decreasing weight  pp          springer berlin heidelberg  berlin  heidelberg 
dechter  r     itai  a          finding all solutions if you can find one  in aaai   
workshop on tractable reasoning  pp       
fleischner  h   kullmann  o     szeider  s          polynomial time recognition of minimal unsatisfiable formulas with fixed clause variable difference  theoretical computer
science                    
flum  j     grohe  m          parameterized complexity theory   st edition    vol    of
texts in theoretical computer science  an eatcs series  springer verlag berlin
heidelberg 
franco  j     van gelder  a          a perspective on certain polynomial time solvable
classes of satisfiability  discrete appl  math                     
garey  m     johnson  d          computers and intractability  a guide to the theory of
np completeness  w h  freeman and company  san francisco 
genesereth  m     nilsson  n          logical foundations of artificial intelligence  morgan
kaufmann  los altos  ca 
hopcroft  j  e     karp  r  m          an n    algorithm for maximum matchings in
bipartite graphs  siam journal on computing                
jabbour  s   lonlac  j   sais  l     salhi  y          extending modern sat solvers for
models enumeration  in ieee   th international conference on information reuse
and integration  iri         pp          ieee 
johnson  d  s   yannakakis  m     papadimitriou  c  h          on generating all maximal
independent sets  information processing letters                   
kang  h  j     park  i  c          sat based unbounded symbolic model checking 
computer aided design of integrated circuits and systems  ieee transactions on 
               
kavvadias  d  j   sideri  m     stavropoulos  e  c          generating all maximal models
of a boolean expression  information processing letters                  
khuller  s     vazirani  v  v          planar graph coloring is not self reducible  assuming
p    n p   theoretical computer science                   
kullmann  o          investigations on autark assignments  discrete applied mathematics 
                  
   

fisavicky   kucera

kullmann  o          lean clause sets  generalizations of minimally unsatisfiable clausesets  discrete applied mathematics                     the renesse issue on satisfiability 
lovasz  l     plummer  m  d          matching theory  north holland 
mcmillan  k  l          computer aided verification    th international conference 
cav      copenhagen  denmark  july            proceedings  chap  applying sat
methods in unbounded symbolic model checking  pp          springer berlin heidelberg  berlin  heidelberg 
minoux  m          ltur  a simplified linear time unit resolution algorithm for horn
formulae and computer implementation  information processing letters            
morgado  a     marques silva  j       a   algorithms for propositional model enumeration and counting  tech  rep   instituto de engenharia de sistemas e computadores 
investigacao e desenvolvimento  lisboa 
morgado  a     marques silva  j       b   good learning and implicit model enumeration  in tools with artificial intelligence        ictai       th ieee international
conference on  pp    pp     
murakami  k     uno  t          efficient algorithms for dualizing large scale hypergraphs 
discrete applied mathematics            
sipser  m          introduction to the theory of computation  vol     thomson course
technology boston 
szeider  s          minimal unsatisfiable formulas with bounded clause variable difference
are fixed parameter tractable  in warnow  t     zhu  b   eds    computing and
combinatorics  vol       of lecture notes in computer science  pp          springer
berlin heidelberg 
szeider  s          generalizations of matched cnf formulas  annals of mathematics and
artificial intelligence                   
szeider  s          matched formulas and backdoor sets  in marques silva  j     sakallah 
k  a   eds    theory and applications of satisfiability testing  sat       vol      
of lecture notes in computer science  pp        springer berlin heidelberg 
tovey  c  a          a simplified np complete satisfiability problem  discrete applied
mathematics                
valiant  l       a   the complexity of computing the permanent  theoretical computer
science                  
valiant  l       b   the complexity of enumeration and reliability problems  siam journal
on computing                

   

fi