journal artificial intelligence research                  

submitted       published     

asynchronous partial overlay  new algorithm solving
distributed constraint satisfaction problems
roger mailler

mailler ai sri com

sri international
    ravenswood dr
menlo park  ca       usa

victor r  lesser

lesser cs umass edu

university massachusetts  department computer science
    governors drive
amherst        usa

abstract
distributed constraint satisfaction  dcsp  long considered important
problem multi agent systems research  many real world problems
represented constraint satisfaction problems often present
distributed form  article  present new complete  distributed algorithm called
asynchronous partial overlay  apo  solving dcsps based cooperative mediation process  primary ideas behind algorithm agents  acting
mediator  centralize small  relevant portions dcsp  centralized subproblems overlap  agents increase size subproblems along critical paths
within dcsp problem solving unfolds  present empirical evidence shows
apo outperforms known  complete dcsp techniques 

   introduction
distributed constraint satisfaction problem become useful representation
used describe number problems multi agent systems including distributed
resource allocation  conry  kuwabara  lesser    meyer        distributed scheduling
 sycara  roth  sadeh    fox         researchers cooperative multi agent systems
focused developing methods solving problems based one key assumption  particularly  agents involved problem solving process autonomous 
means agents willing exchange information directly relevant
shared problem retain ability refuse solution obviously conflicts
internal goal 
researchers believe focus agent autonomy precludes use centralization forces agents reveal internal constraints goals
may  reasons privacy pure computational complexity  impossible achieve 
several algorithms developed explicit purpose allowing agents
retain autonomy even involved shared problem exhibits
interdependencies  probably best known algorithms fit description
found work yokoo et al  form distributed breakout  dba   yokoo  
hirayama         asynchronous backtracking  abt   yokoo  durfee  ishida    kuwabara 
       asynchronous weak commitment  awc   yokoo   hirayama        
c
    
ai access foundation  rights reserved 

fimailler   lesser

unfortunately  common drawback algorithms effort
provide agents complete privacy  algorithms prevent agents
making informed decisions global effects changing local allocation  schedule  value  etc  example  awc  agents try value wait another agent
tell work nogood message  this  agents never
learn true reason another agent set agents unable accept value 
learn value combination values doesnt work 
addition  techniques suffer complete distribution control  words  agent makes decisions based incomplete often inaccurate
view world  result leads unnecessary thrashing problem
solving agents trying adapt behavior agents 
turn trying adapt them  pathologically  behavior counter productive
convergence protocol fernandez  bejar  krishnamachari  gomes    selman        
iterative trial error approach discovering implicit implied constraints
within problem causes agents pass exponential number messages actually reveals great deal information agents constraints domain values
 yokoo  suzuki    hirayama         fact  order complete  agents using awc
willing reveal shared constraints domain values  key thing
note statement awc still allows agents retain autonomy
even forced reveal information variables constraints form
global constraint network 
paper  present cooperative mediation based dcsp protocol  called asynchronous partial overlay  apo   cooperative mediation represents new methodology
lies somewhere centralized distributed problem solving uses
dynamically constructed  partial centralization  allows cooperative mediation based
algorithms  apo  utilize speed current state of the art centralized solvers
taking advantage opportunities parallelism dynamically identifying relevant
problem structure 
apo works agents asynchronously take role mediator  agent
acts mediator  computes solution portion overall problem recommends value changes agents involved mediation session  if  result
recommendations  causes conflicts agents outside session  links
preventing repeating mistake future sessions 
awc  apo provides agents great deal autonomy allowing anyone
take mediator notice undesirable state current
solution shared problem  adding autonomy  agents ignore
recommendations changing local solution made agents  similar
way awc  apo sound complete agents willing reveal
domains constraints shared variables allows agents obscure
states  domains  constraints strictly local variables 
rest article  present formalization dcsp problem  section
    section    describe underlying assumptions motivation work 
present apo algorithm  section      give example protocols
execution simple   coloring problem  section       go give proofs
soundness completeness algorithm  section       section    present
   

fiasynchronous partial overlay  new algorithm dcsp

results extensive testing compares apo awc within distributed graph
coloring domain complete compatibility version sensordcsp domain  bejar 
krishnamachari  gomes    selman        across variety metrics including number
cycles  messages  bytes transmitted  serial runtime  cases  show
apo significantly outperforms awc  yokoo        hirayama   yokoo         section
  summarizes article discusses future research directions 

   distributed constraint satisfaction
constraint satisfaction problem  csp  consists following 

set n variables v    x            xn   

discrete  finite domains variables    d            dn   

set constraints r    r            rm   ri  di            dij   predicate
cartesian product di  dij returns true iff value assignments
variables satisfies constraint 

problem find assignment    d            dn  di di  
constraints r satisfied  csp shown np complete  making form
search necessity 
distributed case  dcsp  using variable based decomposition  agent assigned one variables along constraints variables  goal
agent  local perspective  ensure constraints variables
satisfied  clearly  agents goal independent goals agents
system  fact  simplest cases  goals agents strongly
interrelated  example  order one agent satisfy local constraints  another
agent  potentially directly related constraint  may change value
variable 
article  sake clarity  restrict case agent
assigned single variable given knowledge constraints variable 
since agent assigned single variable  refer agent name
variable manages  also  restrict considering binary constraints
form ri  di    di     since apo uses centralization core  easy
see algorithm would work restrictions removed  point
discussed part algorithm description section       
throughout article  use term constraint graph refer graph formed
representing variables nodes constraints edges  also  variables neighbors
variables shares constraints 
   

fimailler   lesser

   assumptions motivation
    assumptions
following assumptions made environments agents
protocol designed 
   agents situated  autonomous  computing entities  such  capable
sensing environment  making local decisions based model intentionality  acting decisions  agents rationally resource bounded 
result  agents must communicate gain information others state 
intentions  decisions  etc 
   agents within multi agent system share one joint goals  paper 
goal boolean nature stemming dcsp formulation 
   work focuses cooperative problem solving  agents cooperative 
necessarily imply share state  intentions  etc 
agents  are  degree  willing exchange information solve joint
goals  imply change intentions  state  decisions
based demands another agent  agents still maintain autonomy
ability refuse revise decisions agents based local state 
intentions  decisions  etc 
   agent capability computing solutions joint goal based
potentially limited rationality  follows naturally ability agents
make decisions  i e   every agent capable computing solution
portion joint goal based desires 
    motivation mediation based problem solving
websters dictionary defines act mediating follows 
mediate     act intermediary  especially work opposing sides
order resolve  as dispute  bring  as settlement      bring
about  influence  transmit acting intermediate controlling agent
mechanism   merriam webster       
definition  mediation implies degree centralizing shared problem
order group individuals derive conflict free solution  clearly situations
participants willing  cooperative   mediation powerful paradigm solving
disputes  rather strange  considering this  little done looking
mediation cooperative method solving dcsps 
probably  earliest mediation based approach solving conflicts amongst agents
airspace management application cammarata  mcarthur    steeb         work
investigates using various conflict resolution strategies deconflict airspace distributed
air traffic control system  author proposes method solving disputes
involved agents elect leader solve problem  elected  leader becomes
   

fiasynchronous partial overlay  new algorithm dcsp

s 

s 

     

     

figure    simple distributed problem two variables 
responsible recognizing dispute  devising plan correct it  acting
plan  various election schemes tested  unfortunately  leader authority
modify actions order resolve conflicts  obviously leads situations
plan suboptimal 
 hayden  carrick    yang         authors describe mediation one number possible coordination mechanisms  work  mediator acts intermediary
agents act coordinate behavior  intermediary  mediator routes messages  provides directory services  etc  provides loose coupling
agents  since need know mediator  mediator act
coordinate agents behavior tight interdependencies 
research work mediation based problem solving involved settling disputes
competitive semi competitive agents  probably one best examples
using mediation manner found persuader system sycara        
persuader designed settle conflicts adversarial parties involved
labor dispute  persuader uses case based reasoning suggest concessions order
converge satisfactory solution  another example using mediation way
found system called designer fabricator interpreter  dfi   werkman        
dfi  mediation used resolve conflicts one series problem solving steps 
whenever first step fails  case iterative negotiation  mediator agent steps
tries convince agents relax constraints  fails  mediator mandates
final solution 
may several reasons mediation deeply explored
cooperative problem solving method  first  researchers focused strongly using
distributed computing way exploiting concurrency distribute computation
needed solve hard problems  rao   kumar         this  even partially
and or temporarily centralizing sections problem viewed contradictory
central goal  second  researchers often claimed part power
distributed methods lies ability techniques solve problems naturally
distributed  example  supply chain problems generally central monitoring
authority  again  directly sharing reasons particular choice made form
constraint seem contradict use distributed methods  lastly  researchers often
claim reasons privacy security problem solved distributed
fashion  clearly  sharing information solve problem compromises agents ability
private and or violates security manner 
although  parallelism  natural distribution  security  privacy  may seem good
justifications entirely distributed problem solving  actuality  whenever problem
interdependencies distributed problem solvers  degree centralization
information sharing must take place order derive conflict free solution 
   

fimailler   lesser

consider  simple example  problem figure    figure  two problem
solvers  one variable  share common goal different value one
another  agents two allowable values          now  order solve
problem  agent must individually decide different value
agent  this  least  one agent must transmit value other 
this  removes half privacy  by revealing one possible values   eliminates
security  because agent could make send values telling
value good   partially centralizes problem solving  agent s  compute
solutions based solution s  presented decide problem solved agent
s  relies s  solve it   even simple example  achieving totally distributed
problem solving impossible 
fact  look details current approaches solving dcsps 
observe significant amount centralization occurring  approaches
perform centralization incrementally problem solving unfolds attempt
restrict amount internal information shared  unfortunately  problems
interdependencies among problem solvers  revealing agents information  such
potential values variables  unavoidable  fact  solutions derived
one agents conceals information regarding shared constraint
variable based incomplete information therefore may always sound 
follows then  since cannot avoid amount centralization  mediation
natural method solving problems contain interdependencies among distributed
problem solvers 

   asynchronous partial overlay
cooperative mediation based protocol  key ideas behind creation apo
algorithm
using mediation  agents solve subproblems dcsp using internal search 
local subproblems overlap allow rapid convergence
problem solving 
agents should  time  increase size subproblem work along
critical paths within csp  increases overlap agents ensures
completeness search 
    algorithm
figures               present basic apo algorithm  algorithm works constructing good list maintaining structure called agent view  agent view
holds names  values  domains  constraints variables agent linked 
good list holds names variables known connected owner
path constraint graph 
problem solving unfolds  agent tries solve subproblem centralized within good list determine unsolvable indicates entire global
problem over constrained  this  agents take role mediator attempt
   

fiasynchronous partial overlay  new algorithm dcsp

procedure initialize
di random di  
pi sizeof  neighbors      
mi true 
mediate false 
add xi good list 
send  init   xi   pi   di   mi   di   ci    neighbors 
initlist neighbors 
end initialize 
received  init   xj   pj   dj   mj   dj   cj   
add  xj   pj   dj   mj   dj   cj   agent view 
xj neighbor xk good list
add xj good list 
  good list
add xl agent view xl
connected good list 
pi sizeof  good list  
end if 
xj
  initlist
send  init   xi   pi   di   mi   di   ci    xj  
else
remove xj initlist 
check agent view 
end do 
figure    apo procedures initialization linking 

change values variables within mediation session achieve satisfied
subsystem  cannot achieved without causing violation agents outside
session  mediator links agents assuming somehow related
mediators variable  process continues one agents finds unsatisfiable
subsystem  conflicts removed 
order facilitate problem solving process  agent dynamic priority
based size good list  if two agents sized good list
tie broken using lexicographical ordering names   priorities used
agents decide mediates session conflicts arises  priority ordering
important two reasons  first  priorities ensure agent knowledge
gets make decisions  improves efficiency algorithm decreasing
effects myopic decision making  second  priorities improve effectiveness
mediation process lower priority agents expect higher priority agents mediate 
improves likelihood lower priority agents available mediation
request sent 
   

fimailler   lesser

received  ok    xj   pj   dj   mj   
update agent view  xj   pj   dj   mj   
check agent view 
end do 
procedure check agent view
initlist    mediate   false
return 
m i hasconf lict xi   
m i j  pj   pi mj     true 
 d i di    d i agent view conflict 
di conflicts exclusively lower priority neighbors
di d i  
send  ok    xi   pi   di   mi    xj agent view 
else
mediate 
else mi    m i
mi m i  
send  ok    xi   pi   di   mi    xj agent view 
end if 
end check agent view 

figure    procedures local resolution  updating agent view
good list 

      initialization  figure   
startup  agents provided value  they pick randomly one isnt
assigned  constraints variable  initialization proceeds
agents send init message neighbors  initialization message includes
variables name  xi    priority  pi    current value di    agents desire mediate  mi   
domain  di    constraints  ci    array initlist records names agents
initialization messages sent to  reason become immediately
apparent 
agent receives initialization message  either initialization
later link request   records information agent view adds
variable good list can  variable added good list
neighbor another variable already good list  ensures graph created
variables good list always remains connected  focuses agents internal
problem solving variables knows interdependency with  initlist
checked see message link request response link request 
agent initlist  means message response  agent removes
   

fiasynchronous partial overlay  new algorithm dcsp

procedure mediate
pref erences  
counter   
xj good list
send  evaluate    xi   pi    xj  
counter    
end do 
mediate true 
end mediate 
receive  wait    xj   pj   
update agent view  xj   pj   
counter     
counter      choose solution 
end do 
receive  evaluate    xj   pj   labeled dj   
record  xj   labeled dj   preferences 
update agent view  xj   pj   
counter     
counter      choose solution 
end do 
figure    procedures mediating apo session 
name initlist nothing further  agent initlist
means request  response init generated sent 
important note agents contained good list subset
agents contained agent view  done maintain integrity good list
allow links bidirectional  understand point  consider case
single agent repeatedly mediated extended local subproblem long
path constraint graph  so  links agents may limited
view therefore unaware indirect connection mediator  order
link bidirectional  receiver link request store name
requester agent view  cannot add good list path
identified  seen section      bi directionality links important ensure
protocols soundness 
      checking agent view  figure   
initialization messages received  agents execute check agent view
procedure  at end figure     procedure  current agent view  which contains
assigned  known variable values  checked identify conflicts variable
owned agent neighbors  if  check  called hasconflict
   

fimailler   lesser

procedure choose solution
select solution using branch bound search that 
   satisfies constraints agents good list
   minimizes violations agents outside session
satisfies constraints
broadcast solution 
xj agent view
xj pref erences
d j violates xk xk
  agent view
send  init   xi   pi   di   mi   di   ci    xk  
add xk initlist 
end if 
send  accept    d j   xi   pi   di   mi    xj  
update agent view xj
else
send  ok    xi   pi   di   mi    xj  
end if 
end do 
mediate false 
check agent view 
end choose solution 
figure    procedure choosing solution apo mediation 
figure   agent finds conflict one neighbors told
higher priority agent want mediate  assumes role mediator 
agent tell higher priority agent wants mediate flag
mentioned previous section  whenever agent checks agent view recomputes
value flag based whether existing conflicts neighbors 
flag set true indicates agent wishes mediate given
opportunity  mechanism acts two phase commit protocol  commonly seen
database systems  ensures protocol live lock dead lock free 
agent becomes mediator  first attempts rectify conflict s 
neighbors changing variable  simple  effective technique prevents
mediation sessions occurring unnecessarily  stabilizes system saves messages time  mediator finds value removes conflict  makes change
sends ok  message agents agent view  cannot find nonconflicting value  starts mediation session  ok  message similar init
message  contains information priority  current value  etc  variable 
      mediation  figures         
complex certainly interesting part protocol mediation 
previously mentioned section  agent decides mediate conflict
   

fiasynchronous partial overlay  new algorithm dcsp

received  evaluate    xj   pj   
mj true 
mediate    true k  pk   pj mk     true 
send  wait    xi   pi    
else
mediate true 
label di names agents
would violated setting di d 
send  evaluate    xi   pi   labeled di    
end if 
end do 
received  accept    d  xj   pj   dj   mj   
di d 
mediate false 
send  ok    xi   pi   di   mi    xj agent view 
update agent view  xj   pj   dj   mj   
check agent view 
end do 
figure    procedures receiving apo session 

one neighbors expecting session request higher priority
agent  mediation starts mediator sending evaluate  messages
agents good list  purpose message two fold  first  informs
receiving agent mediation begin tries obtain lock
agent  lock  referred mediate figures  prevents agent engaging
two sessions simultaneously local value change course
session  second purpose message obtain information agent
effects making change local value  key point  obtaining
information  mediator gains information variables constraints outside
local view without directly immediately link agents  allows
mediator understand greater impact decision used determine
extend view makes final decision 
agent receives mediation request  responds either wait 
evaluate  message  wait message indicates requester agent
currently involved session expecting request agent higher priority
requester  fact could itself  agent available  labels
domain elements names agents would conflict
asked take value  information returned evaluate  message 
size evaluate  message strongly related number variables
size agents domain  cases either extremely large  number
techniques used reduce overall size message  example techniques
   

fimailler   lesser

include standard message compression  limiting domain elements returned
ones actually create conflict simply sending relevant value variable pairs
mediator actually labeling  fact means largest evaluate  message
ever actually needed polynomial number agents  o v     implementation 
graph coloring  largest possible evaluate  message o  d      v    
noted agents need return names
privacy security reasons  effects completeness algorithm 
completeness relies one agents eventually centralizing entire
problem worst case  mentioned section      whenever agent attempts
completely hide information shared variable constraint distributed problem 
completeness necessarily effected 
mediator received either wait  evaluate  message agents
sent request to  chooses solution  mediator determines received
responses using counter variable set size good list
evaluate  messages first sent  mediator receives either wait 
evaluate  message  decrements counter  reaches    agents
replied 
agents sent wait  message dropped mediation agents
sent evaluate  message labeled domains specified message recorded
used search process  mediator uses current values along
labeled domains received evaluate  messages conduct centralized search 
currently  solutions generated using branch bound search  freuder   wallace 
      constraints good list must satisfied number outside
conflicts minimized  similar min conflict heuristic  minton 
johnston  philips    laird         notice although search takes variables
constraints good list consideration  solution generates may adhere
variable values agents dropped session  variables
actually considered outside session impact able change
values calculated part min conflict heuristic  causes search consider
current values dropped variables weak constraints final solution 
addition  domain variables good list ordered
variables current value first element  causes search use current
value assignments first path search tree tendency minimize
changes made current assignments  heuristics  combined together 
form lock key mechanism simultaneously exploits work previously
done mediators acts minimize number changes assignments 
presented section    simple feed forward mechanisms  combined
limited centralization needed solve problems  account considerable improvements
algorithms runtime performance 
satisfying assignments found search  mediator announces
problem unsatisfiable algorithm terminates  solution chosen 
accept  messages sent agents session  who  turn  adopt proposed
answer 
mediator sends ok messages agents agent view 
whatever reason session  simply keeps agents agent views up   

fiasynchronous partial overlay  new algorithm dcsp

to date  important determining solution reached  lastly  using
information provided evaluate  messages  mediator sends init messages
agent outside agent view  caused conflict choosing
solution  linking step extends mediators view along paths likely
critical solving problem identifying over constrained condition  step
ensures completeness protocol 
although termination detection explicitly part apo protocol  technique
similar  wellman   walsh        could easily added detect quiescence amongst
agents 
      multiple variables n ary constraints
removing restrictions presented section   fairly straightforward process 
apo uses linking part problem solving process  working n ary constraints
simply involves linking n agents within constraint initialization
post mediation linking needs occur  priorities scheme identical
used binary constraints 
removing single agent per variable restriction difficult fact
one strengths approach  using spanning tree algorithm initialization 
agents quickly identify interdependencies internal variables
use create separate good lists disconnected components
internal constraint graph  essence  startup  agents would treat
decomposed problems separate problem  using separate flag  priority 
good list  etc  problem solving unfolds  agent discovers connections
internal variables  through external constraints   decomposed problems could
merged together utilize single structure information 
technique advantages able ensure consistency dependent internal variables attempting mediate  because local checking
mediation   allows agent handle independent variables separate problems 
using situation aware technique one shown yield best results
previous work mammen   lesser         addition  technique allows agents
hide variables strictly internal  pre computation decomposed
problems  agents construct constraints encapsulate subproblems
n ary constraints n number variables external links  derived constraints sent part init message whenever agent receives
link request one external variables 
    example
consider   coloring problem presented figure    problem    agents 
variable    edges constraints them    coloring
problem  variable assigned one three available colors  black  red 
blue   goal find assignment colors variables two
variables  connected edge  color 
example  four constraints violation   nd  nd     nd  nd     nd  nd   
 nd  nd    following algorithm  upon startup agent adds
   

fimailler   lesser

figure    example   coloring problem   nodes    edges 
good list sends init message neighbors  upon receiving messages 
agents add neighbors good list able identify
shared constraint themselves 
startup completed  agents checks agent view 
agents  except nd   find conflicts  nd   priority    waits nd 
mediate  priority     nd  nd   priority    wait nd   priority    tie
nd  broken using lexicographical ordering   nd   equal number agents
good list  lower lexicographical order  waits nd  start mediation  nd  
knowing highest priority amongst neighbors  first checks see resolve
conflict changing value  case  cannot  nd  starts session
involves nd   nd   nd   nd   sends evaluate  message  nd 
highest priority amongst neighbors  unable resolve conflict locally 
starts session sending evaluate  messages nd   nd   nd   nd  
agents mediation receives evaluate  message  first
check see expecting mediation higher priority agent  case 
nd   nd   nd  expecting nd  tell nd  wait  label
domain elements names variables would conflict
result adopting value  information sent evaluate  message 
following labeled domains agents sent nd  
nd    black causes conflicts  red conflicts nd  nd   blue conflicts
nd  nd 
nd    black causes conflicts  red conflicts nd  nd   blue conflicts
nd 
nd    black conflicts nd   red conflicts nd   blue conflicts nd 
nd    black conflicts nd   red conflicts nd   blue conflicts nd 

   

fiasynchronous partial overlay  new algorithm dcsp

figure    state sample problem nd  leads first mediation 
following responses sent nd  
nd    wait 
nd    black causes conflicts  red conflicts nd   blue causes conflicts
nd    wait 
nd    wait 
responses received  mediators  nd  nd   conduct branch
bound searches attempt find satisfying assignment subproblems
minimizes amount conflict would created outside mediation  either
cannot find least one satisfying assignment  broadcasts solution cannot
found 
example  nd   limited information has  computes satisfying
solution changes color remain consistent would changed
colors nd  nd   since told nd  nd  wait  changes color 
sends accept   message nd  ok  messages nd   nd  nd  
information  nd  finds solution thinks solve subproblem without
creating outside conflicts  changes color red  nd  blue  nd  black
leaving problem state shown figure   
nd   nd   nd   nd  nd  inform agents agent view new
values  check conflicts  time  nd   nd   nd  notice values
conflict  nd   highest priority  becomes mediator mediates session
nd   nd   nd   nd   following protocol  nd  sends evaluate 
messages receiving agents label respond  following labeled domains
returned 
nd    black conflicts nd   red conflicts nd  nd   blue conflicts
nd 
   

fimailler   lesser

figure    final solution nd  leads second mediation 
nd    black conflicts nd   red causes conflicts  blue causes conflicts
nd    black conflicts nd   red conflicts nd   blue conflicts nd 
nd    black conflicts nd  nd   red conflicts nd   blue causes
conflicts
nd   receiving messages  conducts search finds solution solves
subproblem  chooses change color red  nd   nd   nd   nd   nd 
check agent view find conflicts  since  point  none agents
conflict  problem solved  see figure    
    soundness completeness
section show apo algorithm sound complete 
proofs  assumed communications reliable  meaning message sent
xi xj xj receive message finite amount time  assume
xi sends message m  sends message m  xj   m  received
m    lastly  assume centralized solver used algorithm sound
complete  prove soundness completeness  helps principal
lemmas established 
lemma   links bidirectional  i e  xi xj agent view eventually xj
xi agent view 
proof 
assume xi xj agent view xi agent view xj  
order xi xj agent view  xi must received init message
point xj   two cases 
case    xj initlist xi   case  xi must sent xj init message
first  meaning xj received init message therefore xi agent view 
contradiction 
   

fiasynchronous partial overlay  new algorithm dcsp

case    xj initlist xi   case  xi receives init message
xj   responds init message  means reliable communication
assumption holds  eventually xj receive xi init message add xi agent view 
contradiction 
lemma   agent xi linked xj xj changes value  xi eventually
informed change update agent view 
proof 
assume xi value agent view xj incorrect  would mean
point xj altered value without informing xi   two cases 
case    xj know needed send xi update  i e  xi xj
agent view  contradicts lemma   
case    xj inform agents agent view changes value 
clear code cannot happen  agents change values
check agent view  choose solution  accept  procedures  cases  informs
agents within agent view either sending ok  accept 
message change value occurred  contradiction 
lemma   xi conflict one neighbors  expect mediation
another higher priority agent agent view  currently session 
act mediator 
proof 
directly procedure check agent view 
lemma   xi mediates session solution  constraints
agents involved mediation satisfied 
proof 
assume two agents xj xk  either could xi   
mediated xi mediation conflict xj xk  
two ways could happened 
case    one agents must value xi assign
part mediation 
assume xj and or xk value xi assign  know since xi
mediated session including xj xk   xi receive wait  message
either xj xk   means could mediating  means
must set mediate flags true xi sent evaluate 
message  since times agent change value mediate flag
false  mediating  told mediator  xj and or xk could
changed values xi told to  contradicts assumption 
case    xi assigned value caused conflict one another 
lets assume xi assigned conflicting values  means xi chose
solution take account constraints xj xk   but  know
xi chooses satisfying solutions include constraints
agents good list  leads contradiction 
   

fimailler   lesser

lemma important says mediator successfully concluded
session  conflicts exist constraints outside
mediation  viewed mediator pushing constraint violations outside
view  addition  mediators get information violations
pushed establish links agents  time  gain context 
important point considering completeness algorithm 
theorem   apo algorithm sound  i e  reaches stable state either
found answer solution exists 
proof 
order sound  agents stop reached answer 
condition would stop without found answer one
agents expecting mediation request higher priority agent
send it  words  protocol deadlocked 
lets say   agents  xi   xj   xk pi   pj pk   pj  i could equal k 
xk conflict xj   two cases xj would mediate session
included xi   xi expecting to 
case    xi mj   true agent view actual value false 
assume xi mj   true agent view true value mj   false 
would mean point xj changed value mj false without informing
xi   one place xj changes value mj   check agent view
procedure  see figure     note procedure  whenever flag changes value
true false  agent sends ok message agents agent view  since
lemma   know xi agent view xj   xi must received message
saying mj   false  contradicting assumption 
case    xj believes xi mediating xi believe be 
i e  xj thinks mi   true pi   pj  
previous case  know xj believes mi   true must
case  need show pi   pj   lets say p i priority xj believes
xi assume xj believes p i   pj when  fact pi   pj   means
point xi sent message xj informing current priority p i   since
know priorities increase time  the good list gets larger   know
p i pi  xj always correct value underestimates priority xi    since pj   pi
pi p i pj   p i contradicts assumption 
important point considering algorithm behaves  proof
says agents always either know underestimate true value neighbors
priorities  this  agents attempt mediate fact sometimes 
shouldnt  side effect attempt  however  correct priorities
exchanged mistake doesnt get repeated  important thing mention
case priority values become equal  case  tie broken using
alphabetical order names agents  ensures always way
break ties 
definition   oscillation condition occurs subset v   v agents
infinitely cycling allowable values without reaching solution  words 
agents live locked
   

fiasynchronous partial overlay  new algorithm dcsp

definition  order considered part oscillation  agent within
subset must changing value  if stable  oscillating  must connected
members subset constraint  otherwise  actually part
oscillation  
theorem   apo algorithm complete  i e  solution exists  algorithm
find it  solution exist  report fact 
proof 
solution exist whenever problem over constrained  problem
over constrained  algorithm eventually produce good list variables
within associated constraints lead solution  since subset variables
unsatisfiable  entire problem unsatisfiable  therefore  solution possible 
algorithm terminates failure condition reached 
since shown theorem   whenever algorithm reaches stable
state  problem solved finds subset variables unsatisfiable terminates  need show reaches one two states finite
time  way agents reach stable state one
agents system oscillation 
two cases consider  easy case single agent oscillating
  v          case one agent oscillating   v          
case    agent xi caught infinite loop agents
stable 
lets assume xi infinite processing loop  means matter
changes value to  conflict one neighbors  changed
value something doesnt conflict neighbors  would solution
stop  changes value conflict xj higher priority it 
xj mediate xi   contradicting assumption agents stable 
xi changes value conflict lower priority agent  lemma   
act mediator neighbors  since assumed agents
stable state  agents xi good list participate session
lemma    agent xi conflicts removed  means xi
stable state contradicting assumption infinite loop 
case    two agents oscillation 
lets say set agents v   v oscillation  consider
agent xi within v     know conditions xi changes value
solve conflicts  a contradiction x wouldnt
considered part oscillation   mediator  receiver mediation
agent v     interesting case agent acts mediator 
consider case xi mediator call set agents mediating
vi   know according definition   mediation  least one
conflict must created remain otherwise oscillation would stop problem
would solved  fact  know remaining conflicts must contain
agent set v   vi lemma    know violated constraint
member vi   xi link agent part constraints
   

fimailler   lesser

member vi   next time xi mediates  set vi include members
number agents set v   vi reduced  fact  whenever xi mediates set
v   vi reduced  assuming told wait  one agents 
case  takes longer reduce set  proof still holds   eventually  o  v      
mediations  xi within v   must vi   v    every agent within set must
mediated  v     times order happen   agent mediates push
violations outside set v   solve subproblem lemma    either
conditions contradicts oscillation assumption  therefore  algorithm complete 
qed
fairly clear that  domains exponential  algorithms worsecase runtime exponential  space complexity algorithm is  however  polynomial 
agents retain names  priorities  values  constraints agents 

   evaluation
great deal testing evaluation conducted apo algorithm  almost
exclusively  test done comparing apo algorithm currently fastest
known  complete algorithm solving dcsps called asynchronous weak commitment
 awc  protocol  section describe awc protocol  section      
describe distributed   coloring domain present results extensive testing done
domain  section       testing compares two algorithms across variety
metrics  including cycle time  number messages  serial runtime 
next  describe tracking domain  section      present results testing
domain well  domain  modified core search algorithm apo
take advantage polynomial complexity problem  variant called  apoflow  described 
    asynchronous weak commitment  awc  protocol
awc protocol  yokoo        one first algorithms used solving dcsps 
apo algorithm  awc based variable decomposition  also  apo  awc
assigns agent priority value dynamically changes  awc  however  uses
weak commitment heuristic  yokoo        assign priorities values
gets name 
upon startup  agents selects value variable sends ok  messages
neighbors  agents shares constraint with   message includes variables
value priority  they start    
agent receives ok  message  updates agent view checks
nogood list violated nogoods  nogood composed set nogood pairs
describe combination agents values lead unsatisfiable condition  initially  nogoods agents nogood list constraints variable 
checking nogood list  agents check violations higher priority nogoods  priority nogood defined priority lowest priority variable
nogood  value greater priority agents variable  nogood
higher priority  based results check  one three things happen 
   

fiasynchronous partial overlay  new algorithm dcsp

   higher priority nogoods violated  agent nothing 
   higher priority nogoods violated repaired
simply changing agents variable value  agent changes value sends
ok  messages agents agent view  multiple possible
satisfying values  agent chooses one minimizes number violated
lower priority nogoods 
   violated higher priority nogoods cannot repaired changing
value variable  agent generates new nogood  nogood
previously generated nogood  nothing  otherwise  sends
new nogood every agent variable contained nogood raises
priority value variable  finally  changes variable value one causes
least amount conflict sends ok  messages 
upon receiving nogood message another agent  agent adds nogood
nogood list rechecks nogood violations  new nogood includes names
agents agent view links them  linking step essential
completeness search yokoo et al          causes agents communicate
nogoods ok  messages agents direct neighbors constraint
graph  overall effect increase messages reduction amount
privacy provided agents communicate potential domain values
information constraints exchange ok  nogood messages
larger number agents 
one recent advances awc protocol addition resolventbased nogood learning  hirayama   yokoo        adaptation classical nogood
learning methods  ginsberg        cha   iwana        frost   dechter        
resolvent method used whenever agent finds needs generate new
nogood  agents generate new nogoods domain values violation
least one higher priority nogood already nogood list  resolvent method
works selecting one higher priority nogoods domain values
aggregating together new nogood  almost identical resolvent
propositional logic referred resolvent based learning  awc
protocol used testing incorporates resolvent based nogood learning 
    distributed graph coloring
following directly definition csp  graph coloring problem  known
k colorability problem  consists following 
set n variables v    x            xn   
set possible colors variables    d            dn   di
exactly k allowable colors 
set constraints r    r            rm   ri  di   dj   predicate implements equals relationship  predicate returns true iff value assigned
xi differs value assigned xj  
   

fimailler   lesser

   

apo
awc

cycles

  

  

  

  

 
  

  

  

  

  

  

  

  

  

   

variables

figure     comparison number cycles needed solve satisfiable  low density  coloring problems various sizes awc apo 

problem find assignment    d            dn  di di  
constraints r satisfied  general csp  graph coloring shown
np complete values k     
test apo algorithm  implemented awc apo algorithms conducted experiments distributed   coloring domain  distributed   coloring problem   coloring problem n variables binary constraints agent
given single variable  conducted   sets graph coloring based experiments compare
algorithms computation communication costs 
      satisfiable graphs
first set experiments  created solvable graph instances      n  lowdensity        n  medium density        n  high density  according method
presented  minton et al          generating graphs way involves partitioning
variables k equal sized groups  edges added selecting two groups
random adding edge random member group  method ensures
resulting graphs satisfiable  tests limited likely easier
subset possible graphs  tests done traditionally used
researchers dcsps 
particular values chosen represent three major regions
within phase transition   colorability  culberson   gent         phase transition
csp defined based order parameter  case average node degree
d  transition occurs point random graphs created order value
yield half satisfiable half unsatisfiable instances  values order parameter
   

fiasynchronous partial overlay  new algorithm dcsp

   

apo
awc

cycles

   

   

  

 
  

  

  

  

  

  

  

  

  

   

variables

figure     comparison number cycles needed solve satisfiable  medium density
  coloring problems various sizes awc apo 

lower transition point  more     instance satisfiable  referred
left transition  opposite true values right 
phase transitions important strongly correlated overall difficulty finding solution graph  cheeseman  kanefsky    taylor        monasson 
zecchina  kirkpatrick  selman    troyansky        culberson   gent         within
phase transition  randomly created instances typically difficult solve  interestingly 
problems right left phase transitions tend much easier 
  colorability  value       left phase transition  region 
randomly created graphs likely satisfiable usually easy find solve 
       middle phase transition graph     chance
satisfiable usually hard solve       n  right phase transition 
graphs likely unsatisfiable and  again  easier solve 
number papers  yokoo   hirayama              hirayama   yokoo       
reported      n within critical phase transition   colorability  seems
caused misinterpretation previous work area cheeseman et al  
       although cheeseman  kanefsky  taylor reported      n within
critical region   colorability  using reduced graphs analysis 
reduced graph one trivially colorable nodes non relevant edges
removed  example  one easily remove node two edges
  coloring problem always trivially colored  additionally  nodes
possess unique domain element neighbors easily removed 
later work  culberson gent identified critical region approximately
      therefore included tests culberson   gent         one note 
however  phase transitions typically done completely random graphs
   

fimailler   lesser



   

   

   

nodes
  
  
  
  
  
  
overall
  
  
  
  
  
  
overall
  
  
  
  
  
  
overall

apo
mean
     
     
     
     
     
     

apo
stdev
    
     
     
     
     
     

awc
mean
     
     
     
     
     
     

awc
stdev
     
     
     
     
      
     

     
     
     
     
      
      

    
     
     
     
     
      

     
     
      
      
      
      

     
     
     
      
      
     

     
     
     
     
     
     

    
     
     
     
     
     

     
     
     
     
      
      

     
     
     
     
     
     

p aw c ap o 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

table    comparison number cycles needed solve satisfiable   coloring problems
various sizes densities awc apo 

   

fiasynchronous partial overlay  new algorithm dcsp

apo

   

awc
   

cycles

   
  
  
  
  
 
  

  

  

  

  

  

  

  

  

   

variables

figure     comparison number cycles needed solve satisfiable  high density
  coloring problems various sizes awc apo 

definition involves satisfiable unsatisfiable instances 
hard apply phase tranisition results graphs created using technique described
beginning section generates satisfiable instances  detailed
phase transition analysis done graph generation technique fact 
believe graphs tend easier randomly created satisfiable ones
size order 
evaluate relative strengths weakness approaches  measured
number cycles number messages used course solving
problems  cycle  incoming messages delivered  agent allowed
process information  messages created processing
added outgoing queue delivered beginning next cycle  actual
execution time given one agent cycle varies according amount work
needed process incoming messages  random seeds used create
graph instance variable instantiation saved used algorithms
fairness 
comparison awc apo  randomly generated    graphs size
n                               n     n     n instance generated    initial
variable assignments  therefore  combination n m  ran     trials making
total      trials  results experiment seen figures      
table    mention results testing awc obtained
experiments agree previous results  hirayama   yokoo        verifying correctness
implementation 
first glance  figure    appears indicate satisfiable low density graph instances  awc apo perform almost identically terms cycles completion  look   

fimailler   lesser

apo

awc

nodes
  
  
  
  
  
  
  
  
  
  
  
  

  links
mean
     
     
     
    
    
    
     
     
     
     
     
     

  links
stdev
    
    
    
    
    
    
     
    
    
    
    
    

  central
mean
     
     
     
     
     
     
     
     
     
     
     
     

  central
stdev
    
    
    
    
    
    
     
     
     
     
     
     

table    link statistics satisfiable  low density problems 

apo

awc

nodes
  
  
  
  
  
  
  
  
  
  
  
  

  links
mean
     
     
     
     
     
     
     
     
     
     
     
     

  links
stdev
    
    
    
    
    
    
     
     
     
     
     
     

  central
mean
     
     
     
     
     
     
     
     
     
     
     
     

  central
stdev
    
    
     
     
     
     
    
     
     
     
     
     

table    link statistics satisfiable  medium density problems 

   

fiasynchronous partial overlay  new algorithm dcsp

apo

awc

nodes
  
  
  
  
  
  
  
  
  
  
  
  

  links
mean
     
     
     
     
     
     
     
     
     
     
     
     

  links
stdev
    
    
    
    
    
    
     
     
     
     
     
     

  central
mean
     
     
     
     
     
     
     
     
     
     
     
     

  central
stdev
    
    
     
     
     
     
    
    
     
     
    
     

table    link statistics satisfiable  high density problems 
ing associated table  table     however  reveals overall  pairwise t test
indicates     confidence  apo outperforms awc graphs 
density  average degree  graph increases  difference becomes
apparent  figures       show apo begins scale much efficiently
awc  attributed ability apo rapidly identify strong interdependencies variables derive solutions using centralized search
partial subproblem 
tables      partially verify statement  see  average  less
    possible number links  n  n     used apo solving problems   
links column   addition  maximum amount centralization    central column 
occuring within single agent  i e  number agents agent view  remains fairly
low  highest degree centralization occurs small  high density graphs  intuitively 
makes lot sense graphs  single node likely high
degree start  combine fact dynamic priority ordering
result large amounts central problem solving 
profound differences algorithms seen figures           
table    apo uses least order magnitude less messages awc  table   shows
message savings lead large savings number bytes transmitted
well  even though apo uses twice many bytes per message awc  the messages
optimized all   total amount information passed around significantly
less almost every case 
again  looking linking structure awc produces gives insights
uses many messages apo  agents communicate
agents linked whenever value changes  large number changes
occur single cycle  awc tremendous amount thrashing behavior  apo 
hand  avoids problem process mediating implicitly creates
   

fimailler   lesser



   

   

   

nodes
  
  
  
  
  
  
overall
  
  
  
  
  
  
overall
  
  
  
  
  
  
overall

apo
mean
      
       
       
       
       
       

apo
stdev
      
      
       
       
       
       

awc
mean
      
       
       
        
        
        

awc
stdev
      
       
       
        
        
        

      
       
       
       
        
        

      
      
       
       
        
        

       
       
        
        
         
         

      
       
        
        
         
         

      
       
       
       
       
        

      
      
       
       
       
        

       
       
        
        
         
         

       
       
        
        
        
         

p aw c ap o 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

table    comparison number messages needed solve satisfiable   coloring problems various sizes densities awc apo 

   

fiasynchronous partial overlay  new algorithm dcsp



   

   

   

nodes
  
  
  
  
  
  
overall
  
  
  
  
  
  
overall
  
  
  
  
  
  
overall

apo
mean
        
        
        
        
         
         

apo
stdev
       
        
        
        
        
         

awc
mean
        
        
        
         
         
         

awc
stdev
        
        
         
         
         
         

        
        
        
         
         
         

       
        
        
         
         
         

        
        
         
          
          
          

        
         
         
          
          
          

        
        
         
         
         
         

       
        
        
        
         
         

        
         
         
         
          
          

        
         
         
         
          
          

p aw c ap o 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

table    comparison number bytes transmitted apo awc satisfiable
graph instances various sizes density 

   

fimailler   lesser

     

apo
awc

     

messages

     
     
     
     
    
 
  

  

  

  

  

  

  

  

  

   

variables

figure     comparison number messages needed solve satisfiable  low density
  coloring problems various sizes awc apo 

      

apo
awc

messages

      

      

      

     

 
  

  

  

  

  

  

  

  

  

   

variables

figure     comparison number messages needed solve satisfiable  mediumdensity   coloring problems various sizes awc apo 

regions stability problem landscape mediator decides solution 
addition  apo uses partial centralization solve problems  avoids use
large number messages discover implied constraints trial error 
   

fiasynchronous partial overlay  new algorithm dcsp

      

apo
awc

messages

      

      

     

 
  

  

  

  

  

  

  

  

  

   

variables

figure     comparison number messages needed solve satisfiable  high density
  coloring problems various sizes awc apo 

  satisfiable

 
   
   
   
   
 
   

 

   

   

   

   

density

figure     phase transition curve    node randomly generated graphs used testing 

see next two experiments  high degree centralization caused
unfocused linking degrades awcs performance even solving randomly
generated  possibly unsatisfiable  graph instances 
   

fimailler   lesser

   

apo

   

awc

cycles

   
   
   
   
   
   
 
   

 

   

   

   

   

density

figure     number cycles needed solve completely random    variable problems
various density using awc apo 

density
   
   
   
   
   
   
   
overall

apo
mean
     
     
      
      
     
     
     

apo
stdev
     
     
      
      
     
     
     

  apo
solved
   
   
   
   
   
   
   

awc
mean
     
      
      
      
      
      
      

awc
stdev
     
      
      
      
      
      
      

  awc
solved
   
  
  
  
  
  
  

p aw c ap o 
    
    
    
    
    
    
    
    

table    number cycles needed solve completely random    variable problems
various density using awc apo 

   

fiasynchronous partial overlay  new algorithm dcsp

   e   

apo
awc

   e   

messages

 e   
      
      
      
      
 
   

 

   

   

   

   

density

figure     number messages needed solve completely random    variable problems
various density using awc apo 

      random graphs
second set experiments  generated completely random    node graphs
average degrees            series conducted test completeness
algorithms  verify correctness implementations  study effects
phase transition performance  value d  generated     random
graphs single set initial values  graphs generate randomly choosing
two nodes connecting them  edge already existed  another pair chosen 
phase transition curve instances seen figure    
total       graphs generated tested  due time constraints  stopped
execution awc      cycles completed  apo never reached       
results experiments shown figures       tables     
graphs  apo significantly outperforms awc simplest problems
 see figure      results directly attributed awcs poor performance
unsatisfiable problem instances  fernandez et al          fact  region
phase transition  awc unable complete     graphs within      cycles 
addition  solve problems  awc uses least order magnitude
messages apo  results seen figure     looking table    easy
see occurs  awc high degree linking centralization  fact 
      graphs  awc reaches average     centralization     complete
inter agent linking 
contrast this  apo loose linking throughout entire phase transition
centralizes average around     entire problem  results encouraging reinforce idea partial overlays extending along critical paths yields
improvements convergence solutions 
   

fimailler   lesser

density
   
   
   
   
   
   
   
overall

apo
mean
       
       
        
        
       
       
       

apo
stdev
       
       
        
        
       
       
       

awc
mean
        
         
         
         
          
          
          

awc
stdev
        
         
         
         
         
         
         

p aw c ap o 
    
    
    
    
    
    
    
    

table    number messages needed solve completely random    variable problems
various density using awc apo 

apo

awc

density
   
   
   
   
   
   
   
   
   
   
   
   
   
   

  links
mean
    
     
     
     
     
     
     
     
     
     
     
     
     
     

  links
stdev
    
    
    
    
    
    
    
    
     
     
     
     
     
    

  central
mean
     
     
     
     
     
     
     
     
     
     
     
     
     
     

  central
stdev
    
     
     
     
     
     
     
     
     
     
    
    
    
    

table    link statistics    node random problems 
      runtime tests
third set experiments  directly compared serial runtime performance
awc apo  serial runtime measured using following formula 

serialtime  

cycles
x

x

i   aagents

   

time a  i 

fiseconds

asynchronous partial overlay  new algorithm dcsp

     
     
    
    
    
    
    
   
   
   
   
  
  
  
  

apo
awc
backtracking

  

  

  

  

  

  

nodes

seconds

figure     comparison number seconds needed solve random  low density  coloring problems various sizes awc  apo  centralized backtracking 

     
     
     
     
    
    
    
    
   
   
   
   
  
  
  
  

apo
awc
backtracking

  

  

  

  

  

  

nodes

figure     comparison number seconds needed solve random  medium density
  coloring problems various sizes awc  apo  centralized backtracking 

   

fiseconds

mailler   lesser

    
    
    
    
   
   
   
   
   
  
  
  
  

apo
awc
backtracking

  

  

  

  

  

  

nodes

figure     comparison number seconds needed solve random  high density  coloring problems various sizes awc  apo  centralized backtracking 


   

   

   

nodes
  
  
  
  
  
  
  
  
  
  
  
  

apo
mean
    
    
    
    
    
    
    
     
    
    
    
    

apo
stdev
    
    
    
    
    
    
    
     
    
    
    
    

awc
mean
    
     
      
      
    
      
       
        
    
     
      
       

awc
stdev
    
     
       
       
    
      
       
        
    
     
      
       

bt
mean
    
    
      
        
    
    
      
        
    
    
     
       

bt
stdev
    
    
      
        
    
    
      
         
    
    
     
       

table     comparison number seconds needed solve random   coloring problems
various sizes densities using awc  apo  centralized backtracking 

   

fiasynchronous partial overlay  new algorithm dcsp

total accumulated runtime needed solve problem one
agent allowed process time 
experiments  generated random graphs  time varying size
density graph  generated    graphs values n                 
densities                  total     test cases  show performance
difference apo awc caused speed central solver  ran
centralized backtracking algorithm graph instances  although  apo uses
branch bound algorithm  backtracking algorithm used test provides best
case lower bound runtime apos internal solver 
programs used test run identical    ghz pentium  
    mbytes ram  machines entirely dedicated tests
minimal amount interference competing processes  addition  computational cost
assigned message passing simulator passes messages cycles 
algorithms were  however  penalized amount time took process messages 
although realize specific implementation algorithm greatly effect
runtime performance  every possible effort made optimize awc implementation
used experiments effort fair 
results test series seen figures             note
scale used graphs logarithmic  looking results  two
things become apparent  obviously  first apo outperforms awc
every case  second  apo actually outperforms centralized solver graphs larger
   nodes  indicates two things  first  solver currently apo
poor second apos runtime performance direct result speed
centralized solver using  fact  tests show improved performance
apo awc caused apos ability take advantage problems structure 
replace centralized solver used tests state of the art
solver  would expect two things  first would expect serial runtime
apo algorithm decrease simply speedup caused centralized solver 
second  importantly  centralized solver would always outperform
apo  current csp solvers take advantage problem structure unlike
solver used tests  way making claim apo improves
centralized solver  simply stating apo outperforms awc reasons
speed current internal solver 
    tracking domain
test apos adaptability various centralized solvers  created implementation
complete compatibility version sensordcsp formulation  bejar et al        
krishnamachari  bejar    wicker        fernandez et al          domain 
number sensors number targets randomly placed within environment 
range restrictions  sensors within distance dist see
target  goal find assignment sensors targets target
three sensors tracking it 
following directly definition csp  sensordcsp problem consists
following 
   

fimailler   lesser

figure     example tracking problem     targets  labeled
name      sensors  black dots   lines connecting sensors targets indicate sensor assigned tracking target 

   

fiasynchronous partial overlay  new algorithm dcsp

set n targets    t            tn   
set possible sensors see targets    d             dn   
set constraints r    r            rm   ri  ai   aj   predicate implements intersects relationship  predicate returns true iff sensors
assigned ti elements common sensors assigned tj  
problem find assignment    a              constraints
r satisfied ai set  dci   sensors di c   min  di       
indicates target requires   sensors  enough available  sensors 
less   
since  implementation  sensors compatible one another 
overall complexity problem polynomial  using reduction feasible flow
bipartite graph krishnamachari         this  centralized solver used
apo agents changed modified version ford fulkerson maximum flow
algorithm  ford   fulkerson        cormen  leiserson    rivest        
proven run polynomial time 
example tracking problem seen figure     example 
    sensors  black dots  placed ordered pattern environment 
   targets  labeled names  randomly placed startup  lines
connecting sensors targets indicate sensor assigned target  note
instance problem satisfiable 
      modifying apo tracking domain
tracking domain closely related general csp formulation 
changes made either awc apo tests  did  however  decide test
adaptability apo new centralized problem solver  this  changed
centralized problem solver ford fulkerson max flow algorithm figure     fordfulkerson works repeatedly finding paths remaining capacity residual
flow network augmenting flows along paths  algorithm terminates
additional paths found  detailed explanation algorithm well proof
optimality found  cormen et al         
mapping bipartite graphs max flow  sensordcsp problem easily
mapped max flow  figures       see mapping simple sensor
allocation problem max flow problem  notice capacity flow
sensors targets    ensures sensor cannot used
single target  also  notice capacity targets    fact  value
min  di       
use algorithm within apo  mediator simply translates problem
network flow graph g using following rules whenever runs choose solution
procedure figure   
   add nodes g 
   ti add node ti edge  ti   t  capacity min  di       g 
   

fimailler   lesser

ford fulkerson  g  s  t 
edge  u  v  e g 
f  u  v    
f  v  u    
end do 
exists path p
residual network gf
cf  p  min cf  u  v     u  v  p  
edge  u  v  p
f  u  v  f  u  v    cf  p  
f  v  u  f  u  v  
end do 
end do 
end ford fulkerson 
figure     ford fulkerson maximum flow algorithm 

s 

s 

t 

s 

s 
t 
s 

s 

figure     simple sensor target allocation problem 
   unique sensor si domains ti   add node si   edge  s  si  
capacity    edge  si   ti   capacity   g 

   

fiasynchronous partial overlay  new algorithm dcsp

s 
 

 
s 

 
 

s 

 
 
 

t 

 




 

 
 

s 
 
s 

 
 

t 

 
s 

figure     flow network simple target allocation problem figure    
executes ford fulkerson algorithm  algorithm finishes  mediator
checks residual capacity edges targets t  edges
residual flow  problem unsatisfiable  otherwise  assignment derived
finding  si   ti   edges flow   
one nicest characteristics ford fulkerson algorithm works regardless order paths residual network chosen  implementation 
used breadth first search which  addition identifying paths residual network  minimized cost path  cost sense refers amount external
conflict created sensor assigned target  modification maintains
min conflict heuristic integral part extending mediators local view 
      results
test apo awc domain  ran test series used    f    f
environment     sensors placed ordered grid based pattern  chose place
sensors ordered fashion reduce variance obtained within results  ran
test series varied sensor target ratio                   targets 
increments     across spectrum mostly satisfiable mostly unsatisfiable
instances  see figure      conducted     trial runs random target placement
values get good statistical sampling 
total       test cases used  comparison  measured number messages
cycles taken algorithms find solution  random seeds used
place targets saved  apo awc tested using identical problem
   

fimailler   lesser

   
   

  satisfiable

   
   
   
   
   
   
   
 
  

  

  

  

  

  

  

  

  

targets

figure     phase transition curve     sensor environment used testing 

apo
awc

cycles

  

  

  

 

 
  

  

  

  

  

  

  

  

  

targets

figure     number cycles needed solve random target configurations field    
sensors using awc apo 

instances  correctness algorithms verified cross checking solutions
 satisfiable unsatisfiable  obtained tests  matched identically 
seen figure       tables        apo outperforms awc
simplest cases  part reason minimum   cycles takes apo
finish mediation session  problems sparsely connected interdependencies 
cost tends dominate  all in all  t tests indicate  apo significantly better
awc terms cycles completion number messages used problems
domain 
   

fiasynchronous partial overlay  new algorithm dcsp

targets
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
overall

apo
mean
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

apo
stdev
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
     
     
    
    
    
    
    
    
    
    

awc
mean
    
    
    
    
    
     
     
    
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    

awc
stdev
    
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

p aw c ap o 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

table     number cycles needed solve random target configurations field    
sensors using awc apo 

   

fimailler   lesser

targets
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
overall

apo
mean
     
     
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

apo
stdev
     
     
     
     
     
     
      
     
      
      
      
      
      
      
      
      
      
      
      
      
      
     
      
      
      
     
      

awc
mean
     
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
       
       
       
       
       
       
       
       

awc
stdev
      
      
      
      
      
      
      
      
      
      
      
      
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

p aw c ap o 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

table     number messages needed solve random target configurations targets
field     sensors using awc apo 

   

fiasynchronous partial overlay  new algorithm dcsp

apo

messages

    

awc

    

    

   

 
  

  

  

  

  

  

  

  

  

targets

figure     number messages needed solve random target configurations targets
field     sensors using awc apo 

   conclusions future directions
article  presented new complete  distributed constraint satisfaction protocol
called asynchronous partial overlay  apo   awc  apo allows agents retain
autonomy obscure completely hide internal variables constraints  addition  agents refuse solutions posed mediator  instead taking
mediator reason unhappy proposed solution 
presented example execution simple problem  section      proved
soundness completeness algorithm  section       extensive empirical
testing        graph instances graph coloring tracking domain 
showed apo significantly outperforms currently best known distributed constraint
satisfaction algorithm  awc  yokoo         tests shown apo better
awc terms cycles completion  message usage  runtime performance 
shown runtime characteristics directly attributed speed
centralized solver 
apos performance enhancements attributed number things  first 
apo exhibits hill climbing nature early search becomes focused
controlled time goes on  hill climbing techniques often leads satisfiable
solution early search  second  using partial overlaying information
agents use decision making  apo exploits work previously done
mediators  forms lock key mechanism promotes solution stability 
lastly  importantly  apo uses dynamic  partial centralization  agents
work smaller  highly relevant portions overall problem  identifying areas
decomposability  search space greatly reduced which  cases  improves
efficiency centralized search algorithm 
vast number improvements planned apo future  probably
important improve centralized solver uses  article  inefficient
solver chosen show strengths distributed portions apo  expect
   

fimailler   lesser

additional improvements algorithms runtime performance obtained
using faster centralized search engine  addition  modern solvers often use methods
graph reductions  unit propagation backbone guided search  conceivable
information gained centralized search engine could used prune domains
variables consistency reasons variables centralized subproblem
relevance reasons  expect focus efforts agents additionally
reducing search time communications usage algorithm 
along improvements selective use memory recording nogoods 
unlike awc uses nogoods ensure complete search  apos completeness relies
one agents centralizing entire problem worst case  key
difference  apo improved simply remembering small  powerful subset
nogoods discovers mediation session session  would allow algorithm
improve future search exploiting work done previously 
clear apo  cooperative mediation methodology
whole  opens new areas future exploration new questions answered
distributed problem solving  believe work shows great deal promise
addressing vast number problems represents bridge centralized
distributed problem solving techniques 

acknowledgments
special thanks bryan horling design implementation farm simulation
environment experiment run shlomo zilberstein  bart selman 
neil immerman  jose vidal making numerous suggestions development
work  lastly  authors would thank jair reviewers helpful
feedback suggestions carlos ansotegui jean charles regin lengthy
discussion final revision article 
effort represented paper sponsored defense advanced research projects agency  darpa  air force research laboratory  air force materiel
command  usaf  agreement number f                 views conclusions
contained herein authors interpreted necessarily representing official policies endorsements  either expressed implied  defense
advanced research projects agency  darpa   air force research laboratory  u s 
government  u s  government authorized reproduce distribute reprints
governmental purposes notwithstanding copyright annotation thereon 

references
bejar  r   krishnamachari  b   gomes  c     selman  b          distributed constraint
satisfaction wireless sensor tracking system  workshop distributed constraint reasoning  international joint conference artificial intelligence  seattle 
washington 
cammarata  s   mcarthur  d     steeb  r          strategies cooperation distributed
problem solving  proceedings  th international joint conference artificial
   

fiasynchronous partial overlay  new algorithm dcsp

intelligence  ijcai      vol     pp         
cha  b     iwana  k          adding new clauses faster local search  proceedings
thirteenth national conference artificial intelligence  aaai   pp         
cheeseman  p   kanefsky  b     taylor  w          really hard problems are 
proceedings   th international joint conference artificial intelligence
 ijcai      pp         
conry  s  e   kuwabara  k   lesser  v  r     meyer  r  a          multistage negotiation
distributed constraint satisfaction  ieee transactions systems  man 
cybernetics         
cormen  t  h   leiserson  c  e     rivest  r  l          introduction algorithms 
mcgraw hill 
culberson  j     gent  i          frozen development graph coloring  theoretical computer science                   
fernandez  c   bejar  r   krishnamachari  b   gomes  c     selman  b          distributed
sensor networks  multiagent perspective  chap  communication computation
distributed csp algorithms  pp          kluwer academic publishers 
ford  l  r     fulkerson  d          flows networks  princeton university press 
freuder  e  c     wallace  r  j          partial constraint satisfaction  artificial intelligence                
frost  d     dechter  r          dead end driven learning  proceedings twelfth
natioanl conference artificial intelligence  pp         
ginsberg  m  l          dynamic backtracking  journal artificial intelligence research 
        
hayden  s   carrick  c     yang  q          architectural design patterns multi agent
coordination  proceedings international conference agent systems  seattle  wa 
hirayama  k     yokoo  m          effect nogood learning distributed constraint
satisfaction    th international conference distributed computing systems
 icdcs   pp         
krishnamachari  b   bejar  r     wicker  s          distributed problem solving
boundaries self configuration multi hop wireless networks  hawaii international conference system sciences  hicss     
krishnamachari  b          phase transitions  structure  compleixty wireless networks  ph d  thesis  cornell university  ithaca  ny 
mammen  d  l     lesser  v  r          problem structure subproblem sharing
multi agent systems  third international conference multi agent systems     
    
merriam webster  ed            merriam webster dictionary  home office edition   springfield  il 
   

fimailler   lesser

minton  s   johnston  m  d   philips  a  b     laird  p          minimizing conflicts 
heuristic repair method constraint satisfaction scheduling problems  artificial
intelligence                   
monasson  r   zecchina  r   kirkpatrick  s   selman  b     troyansky  l          determining computational complexity characteristic phase transitions  nature      
       
rao  v  n     kumar  v          efficiency parallel backtracking  ieee transactions parallel distributed systems                
sycara  k   roth  s   sadeh  n     fox  m          distributed constrained heuristic search 
ieee transactions systems  man  cybernetics                   
sycara  k          resolving goal conflicts via negotiation  proceedings seventh
national conference artificial intelligence  pp         
wellman  m     walsh  w          distributed quiescence detection multiagent negotiation  aaai    workshop negotiation  settling conflicts identifying
opportunities 
werkman  k  j          knowledge based model negotiation using shared perspectives 
proceedings   th international workshop distributed artificial intelligence 
bandera  tx 
yokoo  m          weak commitment search solving constraint satisfaction problems 
proceedings   th national conference artificial intelligence  aaai     
vol     pp          seattle  wa  usa  aaai press       
yokoo  m          asynchronous weak commitment search solving distributed constraint
satisfaction problems   proceedings first international conference principles practice constraint programming  cp      lecture notes computer
science      pp         springer verlag 
yokoo  m   durfee  e  h   ishida  t     kuwabara  k          distributed constraint satisfaction formalizing distributed problem solving  international conference
distributed computing systems  pp         
yokoo  m     hirayama  k          distributed breakout algorithm solving distributed
constraint satisfaction problems   international conference multi agent systems
 icmas  
yokoo  m     hirayama  k          algorithms distributed constraint satisfaction 
review  autonomous agents multi agent systems                
yokoo  m   suzuki  k     hirayama  k          secure distributed constraint satisfaction  reaching agreement without revealing private information  proceeding
eighth international conference principles practice constraint programming  cp  

   


