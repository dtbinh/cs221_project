journal of artificial intelligence research               

submitted        published      

engineering note
engineering a conformant probabilistic planner
nilufer onder
garrett c  whelan
li li

nilufer mtu edu
gcwhelan mtu edu
lili mtu edu

department of computer science
michigan technological university
     townsend drive
houghton  mi      

abstract
we present a partial order  conformant  probabilistic planner  probapop which competed in the blind track of the probabilistic planning competition in ipc    we explain
how we adapt distance based heuristics for use with probabilistic domains  probapop
also incorporates heuristics based on probability of success  we explain the successes and
difficulties encountered during the design and implementation of probapop 

   introduction
probapop is a conformant probabilistic planner that took part in the probabilistic track of
the  th international planning competition  ipc     it was the only conformant planner
that competed  in the conformant probabilistic planning paradigm  hyafil   bacchus       
the actions and the state initialization can be probabilistic  i e   they can have several possible
outcomes annotated by a probability of occurrence  in addition  the planning problem is
conformant  i e   the planner has to construct the best plan possible without assuming that
the results of the actions performed can be observed  as an example of a conformant
probabilistic planning problem  consider a student applying for graduate studies  suppose
that the application needs to include several forms prepared by the student and a single
letter of recommendation written by a professor  one letter is sufficient but more than one
letter is acceptable   further assume that a typical professor in the students department
has     probability of sending a letter on time  in such a problem if the student asks
one professor for a letter  the probability of having a complete application is      if the
student observes that the professor has not sent a letter by the due date  there is no way
to complete the application because it would be too late to ask another professor  thus 
observation actions are useless and the only way the student can increase the chances of
getting a letter is to ask more than one professor to send in a letter  if   professors are
asked  the probability of getting a letter is          which is very close to    obviously 
asking too many people is costly  therefore the student has to weigh the benefits of increased
probability against the costs of asking several people 
a conformant probabilistic planners task is to find the best sequence of actions when
the possible results of actions have predefined probabilities but cannot be observed  in
that regard  conformant probabilistic planners can be classified as non observable markov
c
    
ai access foundation  all rights reserved 

fionder  whelan   li

decision processes  nomdps   boutilier  dean    hanks         fully observable mdps
 fomdp  are the other extreme of mdps where the agent has complete and cost free
sensors that indicate the current state  planners that adopt the fomdp framework can
generate policies that are functions from states to actions  nomdp based planners can
only generate unconditional sequences of actions based on a predictive model  because the
environment cannot be observed  boutilier et al          the middle ground is partially
observable mdps  pomdps  and contingency plans where only some of the domain is observable and the execution of actions may depend on the results of observations  kaelbling 
littman    cassandra        majercik   littman        onder   pollack        hansen
  feng        karlsson        hoffmann   brafman         there are also conformant
planners which model imperfect actions that may have multiple possible results but do not
model probability information  ferraris   giunchiglia        bertoli  cimatti    roveri 
      brafman   hoffmann        
our work on probapop is motivated by the incentive to have partial order planning
as a viable option for conformant probabilistic planning  the main reasons are threefold 
first  partial order planners have worked very well with parametric or lifted actions  which
are useful in coding large domains  second  due to its least commitment strategy in step
ordering  partial order planning  pop  produces plans that are highly parallelizable  third 
many planners that can handle rich temporal constraints have been based on the pop
paradigm  smith  frank    jonsson         given these advantages  our intuition in the
design of probapop was to bring together two paradigms that do not model states explicitly 
pop planners do not represent states because they search in a space of plans  and blind
planners cannot observe the state because no observation actions are available 
our basic approach is to form base plans by using deterministic partial order planning
techniques  and then to estimate the best way to improve these plans  recently  the repop
 nguyen   kambhampati        and vhpop  younes   simmons        planners have
demonstrated that the same heuristics that speed up non partial order planners can be used
to scale up partial order planning  we show that distance based heuristics  mcdermott 
      bonet   geffner        as implemented using relaxed plan graphs in partial order
planners such as repop and vhpop can be employed in probabilistic domains  these
heuristics coupled with selective plan improvement heuristics and incremental planning
techniques result in significant advantages  as a result  probapop makes partial order
planning feasible in probabilistic domains  our work on probapop has been invaluable
in understanding and identifying the key solutions to issues in probabilistic conformant
planning 

   probapop and partial order planning
for partial order probabilistic planning  we implemented the buridan  kushmerick  hanks 
  weld        probabilistic planning algorithm on top of vhpop  younes   simmons 
       a recent partial order planner  a partially ordered plan  is a   tuple   steps 
bind  ord  links  open  unsafe   representing sets of actions  binding constraints  ordering constraints  causal links  open conditions  and unsafe links  respectively  a binding
constraint is a constraint between action parameters and other action parameters or ground
literals  an ordering constraint si  sj represents the fact that step si precedes sj   a
 

fiengineering a conformant probabilistic planner

causal link is a triple   si   p  sj    where si is the producer step  sj is the consumer step
and p represents the condition supported by si for sj   an open condition is a pair   p  s   
where p is a condition needed by step s  a causal link   si   p  sj   is unsafe if the plan
contains a threatening step sk such that sk has p among its effects  and sk may intervene
between si and sj   open conditions and unsafe links are collectively referred to as flaws 
a planning problem is a quadruple   d  i  g  t    where  d is a domain theory consisting
of  probabilistic  operators  the initial state i is a probability distribution over states  g is
a set of literals that must be true at the end of execution  and t is a termination criterion
such as a probability threshold or a time limit  the objective of the planner is to find the
maximal probability plan that takes the agent from i to g  if several plans have the same
probability of success  then the one with the least number of steps or cost is preferred 
the probapop algorithm shown in figure   is based on the classical pop algorithm
 russell   norvig        younes   simmons         it first constructs an initial plan by
converting initial and goal into dummy initial and goal steps  and using those as the first
and last steps of a plan with an empty body  it then refines the plans in the search queue
until it meets the termination criterion  the termination criterion that were implemented
include a time limit  e g   stop after   minutes   a memory limit  e g   stop after    mb  
a probability threshold  e g   stop after finding a plan with     or higher probability   and
lack of significant progress  e g   stop if the probability of success cannot be increased more
than    it is possible to specify multiple termination criterion and use the earliest one that
becomes true  when a termination criterion is met the plan with the highest probability is
returned 
plan refinement operations involve repairing flaws  an open condition can be closed by
adding a new step from the domain theory  or reusing a step already in the plan  an unsafe
link is handled by the promotion  demotion  or separation  when lifted actions are used 
operations  or by confrontation  penberthy   weld         all of these techniques are part
of the vhpop implementation  consider a step sk threatening a causal link   si   p  sj   
promotion involves adding an extra ordering constraint such that sk comes after sj  sj  sk
is added to ord   demotion involves adding an extra ordering constraint such that s k
comes before si  sk  si is added to ord   separation involves adding an extra inequality
constraint to bind such that sk s threatening effect can no longer unify with p  finally 
when actions have multiple effects  confrontation can be used by making a commitment
to non threatening effects of sk   i e   those effects of sk that do not contain a proposition
that unifies with p  note that in deterministic domains  an action can have multiple
effects due to multiple secondary preconditions  when conditions   in probabilistic domains 
probabilistic actions always have multiple effects 
the search is conducted using an a  algorithm guided by the ranking function which
provides the f value  as usual for a plan   f      g     h    where g   is the cost of
the plan  and h   is the estimated cost of completing it  the ranking function is used at
the merge step of the algorithm to order the plans in the search queue  in the competition
probapop used a distance based heuristic  add  as explained in the next section  for the
flaw selection strategy in the select flaw method  it used vhpops static  which gives
priority to static open conditions  i e   a condition whose value is not altered by any action
in the domain theory  if the flaws of a plan do not contain any static open conditions
threats are handled next  the lowest priority is given to the remaining open conditions  we
 

fionder  whelan   li

function probapop  d  initial  goal  t 
returns a solution plan  or failure
   plans  make minimal plan initial  goal 
   bestplan  null
   loop do
     if a termination criterion is met then return bestplan
     if plans is empty then return failure
     plan  remove front plans 
     if solution  plan  then return plan
     plans  merge plans  refine plan plan  
   end
function refine plan  plan 
returns a set of plans  possibly null 
   if flaws plan  is empty then
     if probsuccess  plan    probsuccess  bestplan 
        bestplan  plan
     plan  reopen conditions plan 
   flaw  select flaw plan 
   if flaw is an open condition then choose 
       return reuse step plan  flaw 
       return add new step plan  flaw 
   if flaw is a threat then choose 
       return demotion plan  flaw 
       return promotion plan  flaw 
       return separation plan  flaw 
       return confrontation plan  flaw 

figure    the probabilistic pop algorithm 

comment on other heuristics and flaw selection techniques following the discussion of the
competition results 
in the deterministic pop algorithm  a plan is considered to be complete when it has no
flaws  i e   open   unsafe     in probabilistic domains  there is a possibility that complete
plans that have insufficient probability of success  e g   below      can be improved 
probapop improves such plans by conducting a search after reopening the conditions that
can fail as explained in the next section  probapop can be viewed as first searching for a
plan that is complete in the deterministic sense  and then searching for a way to improve
the plan  in our current implementation  we discard the search queue after finding the
first plan and all the subsequent improvements are made on the first complete plan found 
in the future  we plan to implement multiple search queues in order to be able to jump
between different plans and their improvements  in figure  a  we show an initial plan that
corresponds to the student application domain mentioned in the first section  the open
conditions are sending the forms  forms sent  and getting a letter of reference  letter sent  
probapop uses vhpop guided by the ranking and flaw selection heuristics to produce a
complete plan with     probability of success shown in figure  b  a straight line shows
a causal link between two actions and a zigzag line refers to a causal link from a plan
 

fiengineering a conformant probabilistic planner

fragment that has been omitted for clarity of exposition  probapop reopens the condition
letter sent  figure  a  and resumes its search using the same heuristics to come up with
an improved plan that involves asking two professors as shown in figure  b  assuming
that ask profx is the only action that has probabilistic effects  the probability of success
is     for the first complete plan and                for the second complete plan  several
such iterations of reopen and search leads probapop to find a plan with a probability of
          such a plan cannot be improved further with single precision arithmetic 
initial

initial

ask prof 

formssent

lettersent

formssent

lettersent

goal

goal

 a 

 b 

figure    starting with an empty plan and finding a first plan 

initial

initial

ask prof 

formssent

lettersent

ask prof 

lettersent

formssent

goal

lettersent

ask prof 

lettersent

goal

 a 

 b 

figure    starting with a complete plan and finding an improved plan 

   distance based ranking in probapop
the vhpop deterministic partial order planner described by younes and simmons       
supports distance based heuristics to provide an estimate of the total number of new actions
needed to close an open condition  before starting to search  the planner builds a planning
graph  blum   furst         which has the literals in the initial state in its first level  and
continues to expand the graph until it reaches a level where all the goal literals are present 
the planning graph is different than graphplans planning graph in the sense that it is
 

fionder  whelan   li

relaxed  i e   delete lists are ignored and thus mutex relationships are not computed  bonet
  geffner        
in order to be able to generate a relaxed planning graph when multiple probabilistic
effects are present  one would need to split into as many plan graphs as there are leaves in
a probabilistic action  to avoid this potential blow up  we split each action in the domain
theory into as many deterministic actions as the number of nonempty effect lists  each split
action represents a different way the original action would work  in figure    we show an
action a   which has two probabilistic effects a and b when p and q are true  one effect c
when p is true and q is false  and no effect otherwise  each split action corresponds to one
set of non empty effects  in probapop  while the plan graph uses split actions  the plans
constructed always contain the full original action so that the planner can correctly assess
the probability of success  by using the split actions  we can compute a good estimate of
the number of actions needed to complete a plan for use with distance based heuristics 
a 
p
q

prec  p  q

prec  p  q

a  

 p

a  
b

a

 q

prec  p   q
   

   

a

b

c

a  
c

figure    probabilistic action a  is split into deterministic actions a     a     and a    
an important distinction between deterministic partial order planning and probabilistic
partial order planning is multiple support for plan literals  in the deterministic case  an
open condition is permanently removed from the list of flaws once it is resolved  in the
probabilistic case  it can be reopened so that the planner can search for additional steps
that increase the probability of the literal  the buridan system implements this technique
by reopening all the previously closed conditions of a complete plan and resuming the search
to find another complete plan  our implementation employs selective reopening  sr  where
only those conditions that are not guaranteed to be achieved are reopened  in other words 
literals supported with a probability of   are not reopened  note that while checking the
probability of literals is costly for probabilistic plans  we save most of the cost by performing
the check during mandatory assessment of complete plans  obviously  avoiding redundant
searches is an advantage for the planner  in our current implementation we reopen all the
supported literals that have a probability less than    we leave the selection from among
this new set of preconditions to the flaw selection heuristic  our implementation does not
contain any probability based heuristics 
it is important to note that neither the split actions nor the selective reopening technique
change the base soundness and completeness properties of the buridan algorithm  the split
actions are only used in the relaxed plan graph  and the reopening technique does not block
any alternatives from being sought as they would already be covered by a plan in the search
queue 
 

fiengineering a conformant probabilistic planner

   probapop in ipc  
probapop was among the   domain independent planners that competed in the probabilistic
track of ipc    by domain independent we mean a planner that uses only the ppddl description of a domain to solve a planning problem and does not employ any previously coded
control information  in table   we show a brief description of these planners  edelkamp 
hoffman  littman    younes        younes  littman  weissman    asmuth        bonet
  geffner        fern  yoon    givan        thiebaux  gretton  slaney  price    kabanza 
       the competition was conducted as follows  each planner was given a set of   
problems written in probabilistic pddl  ppddl  and was allotted   minutes to solve the
problem  after this  the server simulated a possible way of executing the plan by sending a
sequence of states starting with the initial state and the planners responded to each state
with an action based on the solution they found     simulations were conducted for each
problem  for goal based problems success was measured by whether the goal was reached
at the end of the simulation  for reward based problems the total reward was calculated 
the set of    problems included both of these types 
the competition included various domains as listed below 
 blocksworld  includes the pick up and put down actions where each action can fail 
  problems with                  and    blocks were given  the goal was to build one
or more towers of blocks 
 colored blocksworld  the actions are the same as the blocksworld domain  each
block can be one of three colors  the goal towers were specified using existential
quantifiers  e g   there is a green block on the table  there is a red block on a green
block 
 exploding blocksworld  it is similar to the blocksworld domain but the first put down
action can permanently destroy the bottom object  block or table   replanning or
repetition based approaches fail easily due to the irreversible nature of the explosion 
 boxworld  it is a box transportation problem with load  unload  drive and fly actions 
the drive action can fail taking the truck to a wrong city 
 fileworld  the objective includes actions to put the papers into files of matching
type  the type of a paper can be found out by using an observation action that has
probabilistics outcomes 
 tireworld  the actions include moving between several cities and the tire can go flat
during a trip 
 towers of hanoise  it is a variation of the towers of hanoi problem where discs can
be moved in singles or doubles and discs may slip during a move 
 zeno travel  it is a travel domain that includes actions related to flying  some actions
such as boarding and flying can fail 
it should be noted that all of the competition domains were designed for full observability
and needed to be changed to incorporate a blind planner  for instance  the pickup action
 

fionder  whelan   li

planner  code 
umass  c 
nmrdpp  g  
classy  j  
ff replan  j  
mgpt  p 
probapop  q 
cert  r 

description
symbolic heuristic search based on symbolic ao  with loops  lao   and
symbolic real time dynamic programming  rtdp 
solving decision problems with non markovian  and hence markovian 
rewards
approximate policy iteration with inductive machine learning using
random walk problems
deterministic replanner using fast forward
labeled real time dynamic programming  lrtdp  with lower bounds
extracted from the deterministic relaxations of the mdp
pop style plan space a  search with distance based heuristics and failure
analysis
heuristic state space search with structured policy iteration algorithm 
factored mdps  and reachability analysis

table    domain independent planners listed in order of competition code 

in the blocksworld domain has a precondition that requires that the block to be picked
up is not being held by the arm  the action has two probabilistic effects  one resulting
in the block being held  and the other being not held  because the planner assumes no
observability  a plan involving a pickup action cannot be improved because an action
cannot be executed unless its preconditions hold  thus  the probapop planner cannot
insert a second pickup action to cover the case in which the first one fails  with the help
of the competition organizers  we implemented a workaround such that the actions that are
executed when their conditions do not hold have no effect rather than causing an error 
probapop  competition name q  attempted   of the    problems  the two planners
that attempted most of the problems were classy  j   and ff replan  j    the other
planners attempted between   to    problems as listed in table    probapop attempted a
small number of problems due to three reasons  first  when we started building probapop 
vhpops version was      the performance of vhpop was significantly improved with better
memory handling techniques in version     but we did not have time before the competition
to convert our implementation to the newer version  second  the competition blocksworld
domains included universally quantified preconditions which were not supported in vhpop 
our implementation of the preconditions including the forall keyword was not efficient 
third  our implementation disables the feature of vhpop which allows the use of multiple
search queues with different heuristics  this prohibited us from constructing several search
queues each with a different heuristic and using the one that finishes the earliest  we
therefore had to pick a single heuristic to run the competition problems  as a result  we
picked add as the ranking metric and static as the flaw selection technique and ran all the
problems with this combination 
after the competition results were announced  we observed that there were three domain
independent planners  namely classy  j    ff replan  j    and mgpt  p   that were
able to solve the largest blocksworld problems whereas probapop was only able to solve
the   blocks problem  the competition included domains with                   and   
 

fiengineering a conformant probabilistic planner

planner
umass  c 
nmrdpp  g  
classy  j  
ff replan  j  
mgpt  p 
probapop  q 
cert  r 

  of
problems
 
 
  
  
  
 
 

bw nc r  
  
  
  
  
  
  
  

tire nr
  
 

 
  
 
 

tire r
  
  

  
  
 
 

zeno
  
  

 
  
 
  

table    the number of successes in    trials obtained by the planners that do not use
domain knowledge  only the problems attempted by probapop  q  are listed 
a dash means that the planner did not attempt that problem  bw nc r   is the
blocksworld problem with   blocks  tire nr and tire r are the goal and reward
based problems from the tireworld domain  zeno is a problem using the zeno
travel domain problem 

blocks   therefore  we looked for ways of improving the performance of probapop on
these problems  we first reimplemented probapop on vhpops newer version      second 
we brought the language of the competition blocksworld domain closer to strips  in
particular  we removed the forall preconditions and when conditions  for example 
we replaced the ppddl pick up action shown in figure   with the two actions shown in
figure    however  the version upgrade and the language simplification were not sufficient to
enable probapop to solve the   blocks problem  as explained before  probapops strategy is
to first find a base plan and then to improve this plan at possible failure points  therefore
finding the base plan is crucial  we next looked for other heuristics and flaw selection
strategies that can make the blocksworld problems solvable  we begin discussing these by
explaining vhpops add heuristic in more detail 
  action pick up block from
   parameters   top   block  bottom 
   effect  when  and  not     top  bottom    on top of  top  bottom 
                    forall   b   block   not  holding  b   
                    forall   b   block   not  on top of  b  top    
              and  decrease  reward    
              probabilistic       and  holding  top   not  on top of  top  bottom   
                               when  not     bottom table  
                               and  not  on top of  top  bottom    on top of  top table       

figure    ppddls pick up action
the add heuristic achieves good performance by computing the sum of the step costs
of the open conditions from the relaxed planning graph  i e   the heuristic cost of a plan
is computed as h     hadd  op en      the cost of achieving a literal q is the level of
the first action that achieves q  hadd  q    minaga q  hadd  a  if ga q       where ga q 
 

fionder  whelan   li

  action pick up
   parameters   x 
   precondition  and  clear  x   ontable  x   handempty  
   effect
      probabilistic     
        and  not  ontable  x    not  clear  x    not  handempty    holding  x    
  action unstack
   parameters   x  y 
   precondition  and  on top of  x  y   clear  x   handempty  
   effect
      probabilistic     
        and  holding  x   clear  y   not  clear  x    not  handempty    not  on top of  x  y     

figure    simplified form of ppddls pick up action 
is an action that has an effect q  note that hadd  q  is   if q holds initially  and is 
if q never holds  the level of an action is the first level its preconditions become true 
hadd  a        hadd  p rec a    the addr heuristic is a modification of the add heuristic
that takes action reuse into account  thus in addition to the conditions described above  the
heuristic cost of a literal q is   if the plan already contains an action that can achieve q 
we observed that addr is more effective than add for the blocksworld domain and
tested a variety of flaw selection strategies implemented in vhpop together with addr 
we show the flaw selection strategies we tried in table    we adopt the notation given
by pollack et al         and revised by younes and simmons         in this notation 
each strategy is an ordered list of selection criteria where lr refers to least refinements
first  mcadd refers to most cost computed using add  and mwadd refers to most work
using add  open conditions are divided into three categories for use by some heuristics 
a static open condition is an open condition whose literal can only be provided by the
initial state  i e   no action has this literal as an effect  a local open condition refers to the
open conditions of the most recently added action and is used to maintain focus on the
achievement of a single goal  an unsafe open condition refers to an open condition whose
causal link would be threatened 
there are five main strategies which prioritize flaws differently  the ucpop strategy
gives priority to threats  the static strategy gives priority to static open conditions  the lcfr
strategy handles flaws in order of least expected cost  the mc strategy orders open conditions
with respect to cost extracted from the relaxed planning graph  and the mw strategy orders
open conditions with respect to expected work extracted from the relaxed planning graph 
a strategy with a loc annotation gives priority to local open conditions among the open
conditions  a strategy with a conf annotation gives priority to unsafe open conditions
among the open conditions  we refer the reader to the paper by younes and simmons
       for a thorough description of these heuristics as well as experimental results with
other domains 
we depict the results of our experiments with the blocksworld problems in the first and
third lines of table    the second and fourth lines in tables   and   will be explained later  
  

fiengineering a conformant probabilistic planner

strategy
ucpop
static
lcfr
lcfr loc
lcfr conf
lcfr loc conf
mc
mc dsep
mc loc
mc dsep
mw
mw dsep
mw loc
mw loc dsep

description
 n s  lifo    o  lifo
 t  lifo    n s  lifo    o  lifo
 n s o  lr
 n s l  lr
 n s u  lr    o  lr
 n s u  lr    l  lr
 n s  lr    o  mcadd
 n  lr    o  mcadd    s  lr
 n s  lr    l  mcadd
 n  lr    l  mcadd    s  lr
 n s  lr    o  mwadd
 n  lr    o  mwadd    s  lr
 n s  lr    l  mwadd
 n  lr    l  mwadd    s  lr

table    the description of a variety of flaw selection strategies in vhpop  n is a nonseparable threat  s is a separable threat  o is an open condition  t is a static
open condition  l is a local open condition  and u is an unsafe open condition 

it can be seen that only lcfr and mc strategies work for the problem with   blocks  the
larger problems were not solvable  because the actions are lifted  we tried to make the search
space smaller by delaying separable threats  peot and smith        explain that delaying
the separable threats may result in a decreased branching factor because there may be many
ways to add inequality constraints for separation  the delay might also help because the
threat can disappear as more variables are bound  we modified the best working strategies 
namely variants of mc and mw  and implemented the delay of separable threats  in table  
these are shown with the dsep suffix   we show the planning times for the experiments with
and without dsep in table    we repeat the columns from table   for comparison   the
results show that time improvement can be seen for the   blocks problem  the problems
with   blocks show an increase in time because each threat must be checked to see if it is
separable  delaying threats made the   blocks problem solvable using the mc loc  mw  and
mw loc strategies  however  larger problems were not solvable by any strategy 
the results of our experiments with various heuristics and strategies show that the
search time increases dramatically by going from   to   blocks and larger problems are not
solvable  we were not able to find a heuristic combination to solve the larger problems  we
noticed that the competition blocksworld problems list the goal towers from top to bottom
and the planner spends a lot of time with dead end plans when the original goal order is
preserved  if a tower is built from top to bottom  the initial goals almost always have to
be undone to achieve the later goals  we also concluded that such an interaction cannot
be detected with the heuristics we used because they are designed to consider subgoals in
isolation  koehler and hoffmann        describe a polynomial time algorithm that can
order goals to minimize the above type of undoing  the algorithm operates on ground
  

fionder  whelan   li

 
 o
 
 o

ucpop

static

lcfr

  
 



  
 



 
  
  k


lcfrloc
  
  



lcfrconf
   
  



lcfrloc conf
  
   



mc
  
 
  k
  k

mcloc
  
  



mw
 
 

  k

mwloc
  
  



mwloc conf
   
   



table    time  msec  required to find the base plan for blocksworld problems with   and
  blocks 

 
 o
 
 o

mc
  
 
  k
  k

mc dsep
 
 
  k
   k

mc loc
  
  



mc loc dsep
  
  
  k


mw
 
 

  k

mw dsep
 
 
  k
   k

mw loc
  
  



mw loc dsep
  
  
  k


table    time  msec  required to find the base plan by delaying separable threats for
blocksworld problems with   and   blocks 

action descriptions which can be generated from action schemas and was implemented in
the ff planning system  hoffman   nebel         we used this algorithm to order the
top level goals and repeated all the experiments with this ordering which essentially builds
towers from the bottom to the top  the results for ordered goals are shown in lines   and
  of tables   and    ordering the goals had mixed results  for example  for the   blocks
problem  it made the lcfr heuristic not usable but the mw heuristic usable  however  the
lowest time increased from   k to   k milliseconds and the larger problems were still not
solvable 
our final strategy was to combine the planning approach used by the ff planner with
pop style search  in particular  we ordered the top level goals using ffs ordering algorithm and ran vhpop n times for problems with n top level goals  the first problem had
only the first goal and when vhpop returned a plan  the steps were simulated to find the
resulting state  the second problem had this resulting state as the initial state and goals  
and   so that goal   would be preserved or redone and goal   would be achieved  when we
used this strategy with the default heuristics of vhpop to solve the problem with    blocks 
the total time was    milliseconds with most phases taking   milliseconds  koehler and
hoffmann        explain that this approach works well for invertible planning problems 
i e   problems such as the blocksworld where actions are reversible  in our case  the tradeoff
is the possibility of less optimal plans because a plan for the ith goal is set while working
on the i    st goal  the second tradeoff is getting several partially ordered plans with
breakpoints between problems rather than a single maximally parallel plan  we believe it
is worthwhile to work on an algorithm that combines the individual plans to preserve the
least commitment on ordering  possible strategies are to causally link action preconditions
  

fiengineering a conformant probabilistic planner

to latest producers or use the approach of edelkamp        and parallelize sequential plans
using critical path analysis 

   conclusion and future work
we presented the design and implementation of probapop  a partial order  probabilistic 
conformant planner  we described the distance based and condition probability based
heuristics that we used  we discussed the advantages and disadvantages of using an incremental algorithm where goals are first ordered and submitted one by one  our short
term plans involve implementing multiple search queues for different base plans and reincorporating the adl constructs in ppddl  our future work involves three threads  in one 
we are looking at improving the performance of probapop by adding probability information to the planning graph so that the probability of open conditions can be optimistically
estimated  we are also considering the addition of domain specific information  kuter  
nau        to probabilistic domains  in the second thread  we are exploring the middle
ground between no observability and full observability by considering pomdp like problems in a partial order setting  finally  we would like to incorporate hill climbing techniques
into our probabilistic framework  the current probapop     software is available through
www cs mtu edu nilufer 

acknowledgments
this work has been supported by a research excellence fund grant to nilufer onder from
michigan technological university  we thank jair ipc   special track editor david e 
smith  and the anonymous reviewers for their very helpful comments 

references
bertoli  p   cimatti  a     roveri  m          heuristic search   symbolic model checking
  efficient conformant planning  in proceedings of eighteenth international joint
conference on artificial intelligence  ijcai      pp         
blum  a  l     furst  m  l          fast planning through planning graph analysis  artificial
intelligence             
bonet  b     geffner  h          planning as heuristic search  artificial intelligence                
bonet  b     geffner  h          mgpt  a probabilistic planner based on heuristic search 
journal of artificial intelligence research             
boutilier  c   dean  t     hanks  s          decision theoretic planning  structural assumptions and computational leverage  journal of artificial intelligence research 
        
brafman  r  i     hoffmann  j          conformant planning via heuristic forward search  a
new approach  in proceedings of fourteenth international conference on automated
planning   scheduling  icaps      pp         
  

fionder  whelan   li

edelkamp  s          extended critical paths in temporal planning  in workshop on integrating planning into scheduling international conference on automated planning
and scheduling  icaps      pp       
edelkamp  s   hoffman  j   littman  m     younes  h          international planning competition  proceedings of fourteenth international conference on automated planning
  scheduling  icaps     
fern  a   yoon  s     givan  r          approximate policy iteration with a policy language
bias  solving relational markov decision processes  journal of artificial intelligence
research     
ferraris  p     giunchiglia  e          planning as satisfiability in nondeterministic domains  in proceedings of the seventeenth national conference on artificial intelligence
 aaai      pp         
hansen  e  a     feng  z          dynamic programming for pomdps using a factored
state representation  in proceedings of the fifth international conference on artificial
intelligence planning   scheduling  aips      pp         
hoffman  j     nebel  b          the ff planning system  fast plan generation through
heuristic search  journal of artificial intelligence research             
hoffmann  j     brafman  r  i          contingent planning via heuristic forward search
with implicit belief states  in proceedings of fifteenth international conference on
automated planning   scheduling  icaps      pp       
hyafil  n     bacchus  f          conformant probabilistic planning via csps  in proceedings of thirteenth international conference on automated planning   scheduling
 icaps      pp         
kaelbling  l  p   littman  m  l     cassandra  a  r          planning and acting in
partially observable stochastic domains  artificial intelligence             
karlsson  l          conditional progressive planning under uncertainty  in proceedings of
eighteenth international joint conference on artificial intelligence  ijcai      pp 
       
koehler  j     hoffmann  j          on reasonable and forced goal orderings and their use
in an agenda driven planning algorithm  journal of artificial intelligence research 
           
kushmerick  n   hanks  s     weld  d  s          an algorithm for probabilistic planning 
artificial intelligence             
kuter  u     nau  d          using domain configurable search control in probabilistic planners  in proceedings of the twentieth national conference on artificial intelligence
 aaai     
majercik  s  m     littman  m  l          contingent planning under uncertainty via
stochastic satisfiability  in proceedings of the sixteenth national conference on artificial intelligence  aaai      pp         
mcdermott  d          using regression match graphs to control search in planning  artificial intelligence                    
  

fiengineering a conformant probabilistic planner

nguyen  x     kambhampati  s          reviving partial order planning  in proceedings of
eighteenth international joint conference on artificial intelligence  ijcai      pp 
       
onder  n     pollack  m  e          conditional  probabilistic planning  a unifying algorithm and effective search control mechanisms  in proceedings of the sixteenth
national conference on artificial intelligence  aaai      pp         
penberthy  j  s     weld  d  s          ucpop  a sound  complete  partial order planner
for adl  in proceedings of third international conference on principles of knowledge
representation   reasoning  kr      pp         
peot  m  a     smith  d  e          threat removal strategies for partial order planning  in
proceedings of the eleventh national conference on artificial intelligence  aaai     
pp         
pollack  m  e   joslin  d     paolucci  m          flaw selection strategies for partial order
planning  journal of artificial intelligence research            
russell  s  j     norvig  p          artificial intelligence  a modern approach  second
edition  pearson education  upper saddle river  nj 
smith  d  e   frank  j     jonsson  a  k          bridging the gap between planning and
scheduling  knowledge engineering review               
thiebaux  s   gretton  c   slaney  j   price  d     kabanza  f          decision theoretic
planning with non markovian rewards  journal of artificial intelligence research     
younes  h  l   littman  m  l   weissman  d     asmuth  j          the first probabilistic
track of the international planning competition  journal of artificial intelligence
research             
younes  h     simmons  r          vhpop  versatile heuristic partial order planner 
journal of artificial intelligence research             

  

fi