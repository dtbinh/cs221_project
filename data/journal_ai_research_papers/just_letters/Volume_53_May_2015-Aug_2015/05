journal artificial intelligence research                  

submitted        published      

autofolio 
automatically configured algorithm selector
marius lindauer

lindauer cs uni freiburg de

university freiburg

holger h  hoos

hoos cs ubc ca

university british columbia

frank hutter

fh cs uni freiburg de

university freiburg

torsten schaub

torsten cs uni potsdam de

university potsdam
inria rennes

abstract
algorithm selection  as  techniques involve choosing set algorithms
one expected solve given problem instance efficiently substantially
improved state art solving many prominent ai problems  sat  csp 
asp  maxsat qbf  although several procedures introduced 
surprisingly  none dominates others across scenarios  furthermore 
procedures parameters whose optimal values vary across scenarios  holds
specifically machine learning techniques form core current procedures  hyperparameters  therefore  successfully apply new problems 
algorithms benchmark sets  two questions need answered   i  select
approach  ii  set parameters effectively  address problems
simultaneously using automated algorithm configuration  specifically  demonstrate
automatically configure claspfolio    implements large variety
different approaches respective parameters single  highly parameterized
algorithm framework  approach  dubbed autofolio  allows researchers practitioners across broad range applications exploit combined power many different
methods  demonstrate autofolio significantly improve performance
claspfolio        scenarios algorithm selection library  leads
new state of the art algorithm selectors   scenarios  matches state ofthe art performance  statistically  scenarios  compared best single
algorithm scenario  autofolio achieves average speedup factors    
     

   introduction
last decade  tremendous progress boolean constraint solving technology
achieved several areas within ai  sat  biere         asp  gebser  kaufmann 
  schaub         csp  tamura  taga  kitagawa    banbara         max sat  abrame
  habet        qbf  janota  klieber  marques silva    clarke        
areas  multiple algorithms complementary solving strategies exist  none dominates others kinds problem instances  fact exploited algorithm selection  as   rice        methods  use characteristics individual probc
    
ai access foundation  rights reserved 

filindauer  hoos  hutter    schaub

lem instances  so called instance features  choose promising algorithm instance  algorithm selectors empirically shown improve state art
solving heterogeneous instance sets and  result  many prizes competitions  instance  satzilla  xu  hutter  hoos    leyton brown        several
categories multiple sat competitions  claspfolio    gebser  kaminski  kaufmann 
schaub  schneider    ziller      b  np track      asp competition  cphydra  omahony  hebrard  holland  nugent    osullivan             csp
competition  isac    ansotegui  malitsky    sellmann        partial max sat
crafted industrial track      max sat competition  aqme  pulina  
tacchella        first stage main track      qbf competition 
although many new approaches proposed years  cf  smith miles 
      kotthoff         two flexible frameworks allow re implementing
comparing existing approaches fair uniform way  llama  kotthoff       
claspfolio    hoos  lindauer    schaub         these  claspfolio  
comprehensive  encompassing strategies algorithm selection systems  s  kadioglu 
malitsky  sabharwal  samulowitz    sellmann         aspeed  hoos  kaminski  lindauer 
  schaub         claspfolio    gebser et al       b   isac  kadioglu  malitsky  sellmann    tierney         me asp  maratea  pulina    ricca         snnap  collautti 
malitsky  mehta    osullivan        satzilla  xu et al         xu  hutter  hoos 
  leyton brown        
figure   illustrates performance benefits existing selection strategies  as realized claspfolio    yield across wide range benchmarks algorithm selection library  bischl et al       b      a   observe approach strengths
weaknesses different scenarios  satzilla   like approach  the default
claspfolio    performs best overall  achieves better performance
approaches considered      scenarios   s  aspeed isac yielding
better performance remaining cases 
note selection approaches used fixed default parameter
configuration might therefore fall short full performance potential  example  imputation missing instance features used approaches considered figure    use improve performance scenarios  e g  
asp potassco   yields improvements others  e g   sat   rand 
satzilla   like approach plus mean imputation outperforms single best algorithm
factor      
generally  well known performance many machine learning techniques
depends hyper parameter settings  e g   case svm  kernel  kernel hyperparameter soft margin  cf  bergstra  bardenet  bengio    kegl        snoek  larochelle 
  adams        thornton  hutter  hoos    leyton brown         however  hyperparameters machine learning models used figure   fixed manually  based
limited experiments  therefore  performance algorithm selection systems
considered could likely improved using carefully chosen hyper parameter
settings 
facing new algorithm selection problem  thus answer three salient questions   i  selection approach use   ii  set parameters selection
approach  and underlying machine learning model  effectively   iii  make
   

filio
   
  l
isa
ike
c l
ike

 as
p l
ike
sa
tzi
lla
   
 lik
sa
e
tzi
lla
   
 lik
au
e
tof
oli


cla

sp
fo


asp

ee

 s

 lik

e

autofolio  automatically configured algorithm selector

asp potassco
csp     
maxsat   pms
premarshalling
proteus     
qbf     
sat   hand
sat   indu
sat   rand
sat   all
sat   hand
sat   indu
sat   rand

   
   
   
   
    
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
    
   
   
    
   
   
   
   

geo  mean

   

   

   

   

   

   

   

   

figure    factors selection approach re implemented claspfolio   outperformed single best algorithm    aslib scenarios w r t  penalized average runtime
 par    counts timeout    times given runtime cutoff   results
   fold cross validation  ignoring test instances solved solver 
last row shows geometric mean    scenarios 

best use techniques augmenting pure as  pre solving schedules  xu et al        
kadioglu et al          instead common  manual trial and error approach  propose automatically answer questions using automated algorithm configuration
methods  hutter  hoos  leyton brown    stutzle        configure flexible frameworks  manual approach error prone  potentially biased requires substantial human expert time knowledge  approach introduce fully automatic 
unbiased  leverages full power broad range methods  thus facilitates
easier effective use algorithm selection makes techniques accessible
broader community 
specifically  present autofolio  general approach automatically determining
strong algorithm selection method particular dataset  using algorithm configuration
search flexible design space algorithm selection methods  provide
open source implementation autofolio  www ml aad org autofolio   based
algorithm configurator smac  hutter  hoos    leyton brown        algorithm
selection framework claspfolio    hoos et al          last column figure   previews
results obtained autofolio clearly shows significant improvements
claspfolio         scenarios aslib 
   

filindauer  hoos  hutter    schaub

instance

algorithm
portfolio

compute
features

select algorithm

solve instance
algorithm

figure    general outline algorithm selection 

   background  algorithm configuration selection
section  briefly introduce standard approaches algorithm selection algorithm configuration form basis autofolio approach 
    algorithm selection
figure   shows general outline algorithm selection  rice         given problem
instance  first compute cheap instance features  numerical characteristics 
including simple ones  such number variables clauses sat instance 
complex ones  such statistics gathered short probing runs actual sat
solver given instance   based features  appropriate algorithm
algorithm portfolio  huberman  lukose    hogg        gomes   selman        selected
solve given instance  overall workflow subject runtime cutoff 
one major challenge algorithm selection find good mapping instance
features algorithms  general offline algorithm selection approach consider 
done based training data  specifically  given portfolio algorithms set
problem instances i  use training data performance matrix size  i  a
feature matrix containing fixed size feature vector i  based training
data  learn mapping instance features algorithms using machine learning
techniques  k nn  maratea et al          g means  kadioglu et al         random
forests  xu et al         
      related work algorithm selection systems
recent successful algorithm selection systems include satzilla  xu et al         xu  hutter  hoos    leyton brown      a    s  kadioglu et al         malitsky  sabharwal  samulowitz    sellmann            b   isac  kadioglu et al         ansotegui et al         
cshc  malitsky  sabharwal  samulowitz    sellmann      a  claspfolio    gebser
et al       b   recent years  systems showed excellent performance competitions
sat  maxsat asp  briefly review following 
original version pioneering algorithm selection system satzilla  xu et al  
      learned mapping instance features algorithms training ridge regression models  regression model predicts performance algorithm given
instance  based predicted performances  satzilla selects algorithm
best predicted performance  satzillas latest version  xu et al         uses classification
models that  pair algorithms  predict better performing one  selects
algorithm run using simple voting predictions thus obtained  models
cost sensitive  is  training instance pairwise classification models
   

fiautofolio  automatically configured algorithm selector

weighted performance loss incurred selecting worse two algorithms 
furthermore  satzilla introduced concept pre solving schedules  is  short
instance independent schedule algorithms running limited amount time  one
algorithm pre solving schedule solves given instance  satzilla immediately
terminate successfully  saving time required compute instance features  furthermore 
pre solving schedules increase robustness algorithm selectors relying
one selected algorithm pre solvers solve given instance  one drawback
satzilla use grid search possible pre solving schedules three
pre solvers  schedule considered  satzilla performs algorithm subset selection
trains classification models  require substantial amounts time  in
experiments    cpu days  
 s  kadioglu et al         malitsky et al             b  uses k nearest neighbour
approach select algorithm  given problem instance solved  determines
set similar training instances instance feature space selects algorithm
best performance instance set  performance k nn approach
improved distance based weighting  that is  weighting algorithm performance
instance instances distance new given instance  using clusteringbased adaptive neighbourhood size  to adjust size neighbourhood different
areas feature space   furthermore   s uses mixed integer programming compute
pre solving schedules efficiently satzilla 
isac  kadioglu et al         clusters instances instance feature space using
g means algorithm stores cluster centre well best performing algorithm
cluster  new problem instance  determines nearest cluster centre
   nn  selects algorithm associated it 
cost sensitive hierarchical clustering system cshc  malitsky et al       a 
partitions feature space clusters  instead isacs unsupervised clustering
approach  creates partitioning supervised top down fashion  much decision
regression tree algorithm  starting instances  the entire feature space 
root tree  recursively splits instances associated node two child
nodes  choosing split along single feature value  performance
best performing algorithm child node optimized  cost sensitive supervised
approach based trees closely resembles cost sensitive random forests satzilla 
difference that  contrast satzillas pairwise voting approach  builds
single model 
last least  claspfolio    gebser et al       b  predecessor claspfolio    use  and describe section         contrast flexible framework claspfolio    claspfolio   inspired earlier version satzilla
uses regression approach  different machine learning method  support
vector regression instead ridge regression  
systems algorithm selection combine extend techniques  example  combining regression clustering approaches  collautti et al         
selecting algorithm portfolios  yun   epstein        lindauer  hoos    hutter      a 
schedules  amadini  gabbrielli    mauro        instead single algorithm  additional information  refer interested reader two recent surveys algorithm
selection  smith miles        kotthoff        
   

filindauer  hoos  hutter    schaub

feature
generator

training instances

algorithms

instance features
groups

algorithm
performance
aslib scenario

feature
preprocessing

performance
preprocessing
train
selection model s 



performance estimation

pre solving schedule
aspeed

selection

scheduling
offline training

 test  instance

compute features

select algorithm

failed
run backup
algorithm

run pre solving
schedule
successful
run selected
algorithm
online solving

figure    general workflow claspfolio    objects algorithms instances
shown rectangles  activities depicted rectangles rounded corners 
activities related algorithm selection shown red activities related algorithm
schedules yellow 
      algorithm selection framework claspfolio  
explain algorithm selection framework claspfolio    hoos et al         lindauer  hoos    schaub      c  detail  since provides basis
concrete implementation general autofolio approach  used experiments 
claspfolio   framework implements idea algorithm selection flexible
general way  provides general view individual components algorithm
selectors  based implements many different selection approaches associated
techniques  therefore  claspfolio   natural candidate serve basis
autofolio approach 
figure   shows workflow claspfolio    divided aslib scenario
input claspfolio    offline training selection scheduling  online solving
new instance 
aslib scenario  input  claspfolio   reads algorithm selection scenario  supporting format algorithm selection library  aslib  consists
performance matrix  instance features  groups instance features  optional information  cross validation splits ground truth problem
   note that  according definition aslib  feature group enables list instance features
computed common block feature computation code  jointly incur cost
running code 

   

fiautofolio  automatically configured algorithm selector

instances  for example  whether sat instance satisfiable unsatisfiable  
full specification aslib format  refer interested reader aslib net 
offline training selection  based given scenario  training  data  claspfolio  
pre processes instance features  for example  normalization feature imputation 
performance data  for example  log transformation   using machine learning
techniques  claspfolio   learns selection model maps instance features
algorithms 
offline training scheduling  compute efficient pre solving schedule  claspfolio   first estimates performance selection module using internal
cross validation training data  arrow i   based performance estimation 
claspfolio   computes timeout minimal pre solving schedule using answer set
programming aspeed  hoos et al          assigning algorithm  potentially
zero length  time slice overall runtime budget  estimation selection
module necessary compute runtime budget pre solving schedule 
selection module performs well  pre solving schedule may empty 
pre solving schedule cannot perform better perfect predictor  that is  predictor always selects best solver   contrast  prediction performs
poorly  for example  result non informative instance features   pre solving
schedule may allocated complete time budget  selection module
ignored 
online solving  solving workflow follows  feature generator computes
instance features new problem instance solved  computation fails
 for example  time memory constraints  feature imputation
strategy selected  backup solver i e   single best performing solver
offline training run instance  otherwise  previously trained selection
model uses instance features select algorithm expected perform well 
pre solving schedule available  schedule runs either instance feature
computation selection algorithm  depending parameter setting
claspfolio   latter version shown figure    former
advantage time compute instance features saved instance
solved pre solving  latter advantage algorithm chosen
selector removed pre solving schedule prevent running twice 
list techniques implemented modules given section     
    algorithm configuration
figure   shows general outline algorithm configuration methods  given parameterized algorithm possible parameter settings c  set training problem instances
i  performance metric   c r  objective algorithm configuration
problem find parameter configuration c c minimizes across instances
i  prominent examples performance metric optimized runtime 
solution quality  misclassification cost target algorithm achieves  configuration
   

filindauer  hoos  hutter    schaub

instances

algorithm
configuration space c

select c c

assess a c 
 

returns
best found
configuration c

return performance
configuration task

figure    general outline algorithm configuration 
procedure  or short configurator   iteratively evaluates performance parameter configurations c c  by running one instances i  uses
result decide next configurations evaluate  given budget configuration process exhausted  configurator returns best known parameter
configuration found then 
n parameters p            pn   respective domains d            dn   parameter
configuration space c   d  dn cross product domains 
parameter configuration c c assigns value parameter  several types
parameters  including real valued  integer valued categorical ones  which finite 
unordered domain  example  choice different machine learning algorithms  
furthermore  configuration spaces structured  specifically  parameter pi
conditional another parameter pj   value pi relevant parent
parameter pj set specific value  example  case pj categorical
choice machine learning algorithms  pi sub parameter one
algorithms  pi active pj chooses algorithm parameterizes further 
date  four general configuration procedures  paramils  hutter et al  
       gga  ansotegui  sellmann    tierney         irace  lopez ibanez  dubois lacoste 
stutzle    birattari         smac  hutter et al          principle  could use
configurator general autofolio approach  practice 
found smac often yield better results paramils gga  hutter et al        
hutter  lindauer  balint  bayless  hoos    leyton brown        lindauer  hoos  hutter   
schaub      b   thus use basis concrete implementation autofolio
discussed following  describe smac detail 
      smac  sequential model based algorithm configuration
sequential model based algorithm configuration method smac  hutter et al        
hutter  hoos    leyton brown      a  uses regression models approximate performance metric   c r  hutter  xu  hoos    leyton brown         follows
general algorithm configuration workflow above  alternating evaluations
parameter configurations instances decision phases  configurator uses
data gathered far select configurations evaluate next instances 
smacs decision phases involve constructing regression model   c r based
data observed far  using model  as well models uncertainty
predictions  select promising configurations try next  step automatically
   

fiautofolio  automatically configured algorithm selector

trades exploration  evaluating regions configuration space model
uncertain  exploitation  evaluating configurations predicted perform well  
order save time evaluating new configurations cnew c  smac first evaluates
single instance i  additional evaluations carried  using doubling
schedule  if  based evaluations date  cnew appears outperform smacs best
known configuration c  evaluated number runs cnew c 
cnew still performs better  smac updates best known configuration c cnew  
      previous applications algorithm configuration
algorithm configuration demonstrated effective optimizing algorithms wide range problems  including sat based formal verification  hutter  babic 
hoos    hu         timetabling  chiarandini  fawcett    hoos         multi objective optimization  lopez ibanez   stutzle         mixed integer programming  hutter  hoos   
leyton brown         ai planning  vallati  fawcett  gerevini  hoos    saetti         generation heuristics  mascia  lopez ibanez  dubois lacoste    stutzle         occupancy
scheduling  lim  van den briel  thiebaux  backhaus    bent        kidney exchange
matching  dickerson   sandholm         important special case algorithm configuration hyperparameter optimization machine learning  bergstra et al         snoek
et al         eggensperger et al         
previous line work related application configuration algorithm
selection auto weka  thornton et al          auto weka addresses combined
problem selecting machine learning algorithm weka framework  hall  frank 
holmes  pfahringer  reutemann    witten        optimizing hyperparameters 
autofolio needs solve combined algorithm selection hyperparameter
optimization problem  particular needs problem formulations
considers  regression  classification clustering  important design choices
autofolio pre solving parameters  well instance features use 
autofolio applies one meta solving strategy  algorithm configuration  another one
 algorithm selection   previous application meta solving strategy selfconfiguration paramils  hutter et al          however  case  self configuration
yielded modest improvement default configuration paramils  whereas
here  achieve substantial improvements default configuration claspfolio   
algorithm configuration algorithm selection previously combined
different way  using configuration find good parameter settings highly parameterized algorithm  using selection choose per instance
basis  two systems implement approach date  isac  kadioglu et al        
hydra  xu  hoos    leyton brown         isac first clusters training problem instances
homogeneous subsets  uses configurator find good solver parameterization
cluster  uses selector choose parameterizations  hydra
iteratively adds new solver parameterizations initially empty portfolio based selector 
step tasking configurator find solver parameterization improves
current portfolio 
   

filindauer  hoos  hutter    schaub

training data

test data

   fold cross validation      meta instances

figure    split instance sets algorithm selection scenarios  cross validation performed
inside configuration process  test set withheld evaluating configured selector 

   configuration algorithm selectors
present autofolio approach using algorithm configurators automatically
customize flexible algorithm selection  as  frameworks specific scenarios  apply
algorithm configuration context  need specify parameterized selector
configuration space  well performance metric judge performance 
    formal problem statement
judge performance algorithm selection  as  system scenario 
crucial partition given set problem instances training test set  use
system training set train selector s  evaluate test
set instances   if training set instead used evaluate performance  perfect
system could simply memorize best solver instance without learning anything
useful new problem instances   standard notion training test split
machine learning 
scenario includes algorithms a  problem instances i  performance feature
data d  loss function l   r minimized  for example  algorithms
runtime solution cost   data split disjoint sets dtrain dtest   let
s dtrain     denote selector learned system trained data
dtrain   then  performance s  p  s  average performance algorithms
selects instances test data set dtest  
p  s   

x
 

l s dtrain    i  
 dtest  

   

idtest

likewise  evaluate performance system sc parameterized
configuration c p  sc    however  perform algorithm configuration simply
minimizing p  sc   respect c c  would amount peeking test set
many times  even though would yield configuration c low p  sc    could
expected perform well instances contained dtest   instead  order
obtain unbiased evaluation configured selectors performance end  need
hold back test set instances touched configuration process 
order still able optimize parameters without access test set  standard
solution machine learning partition training set further  k cross validation
folds  overall  use instance set selection scenario illustrated figure   
 i  split full set instances training test set  ii  training data
   

fiautofolio  automatically configured algorithm selector

algorithm    autofolio  automated configuration algorithm selector
input   algorithm configurator ac  algorithm selector s  configuration space c
s  training data algorithm scenario  with performance feature
matrix   number folds k

 

randomly split d              d k 
start ac d              d k  meta instances  using average loss across
meta instances performance metric m  using target algorithm
configuration space c
configuration budget remaining
ac selects configuration c c meta instance n          k 
train sc d d n    assess loss d n  return loss ac

 

return best configuration c found ac

 
 

 
 

partitioned k folds  in experiments  use k        used
follows 
   
 k 
let dtrain           dtrain random partition training set dtrain   crossvalidation performance cv  sc   sc training set then 


k
x
x
 
 


 j 
cv  sc    
l sc  dtrain  dtrain    i 
   
 j 
k
 dtrain  
 j 
j  
idtrain

end  optimize performance cv  sc   determining configuration c c
selector good cross validation performance
c arg min cv  sc   

   

cc

evaluate c training selector sc entire training data evaluating
p  sc   dtest   defined equation   
 j 
following thornton et al          use k folds dtrain one instance within
configuration process  order avoid confusion instances
base level problem instances  e g   sat instances  solved inside instance 
refer instance meta instance  note many configurators  focusedils  hutter et al          irace  lopez ibanez et al         smac  hutter et al  
       discard configurations perform poorly subset meta instances
therefore evaluate k cross validation folds every configuration 
saves time lets us evaluate configurations within configuration
budget  based considerations  algorithm   outlines process configure
algorithm selector autofolio 
since instances scenario could split configuration testing sets
many different ways  one split necessarily yield representative performance
estimate  therefore  yield confident results evaluation  perform additional outer cross validation  as given aslib scenario  instead single training test
   

filindauer  hoos  hutter    schaub

split  is  consider multiple training test splits  configure selector training set  assess final configurations respective test data sets  average results 
note  however  practical application as  one would single training set  which would still split k cross validation splits internally  single test
set 
    configuration space selectors
existing algorithm selectors implement one specific algorithm selection approach  using
one specific machine learning technique  note  however  selection approaches 
least implicitly  admit flexibility  particular could used range
machine learning techniques  example  satzilla    xu et al         uses voting
pairwise performance predictions obtained cost sensitive random forest classifiers  but 
principle  could use cost sensitive binary classifiers instead random forests 
based observation  consider hierarchically structured configuration space
top level parameter determines overall algorithm selection approach
example  regression approach  used satzilla    xu et al         k nn
approach  used me asp  maratea et al          selection approaches 
choose different regression techniques  example  ridge regression  lasso
regression  support vector regression random forest regression  machine
learning techniques configured  hyper  parameters 
besides selection approach  techniques used preprocessing training data  for example  z score feature normalization feature preprocessing step
log transformation runtime data performance preprocessing step   preprocessing
techniques configured independently selection approach  therefore
handled top level parameters 
use third group parameters control pre solving schedules  kadioglu et al  
      xu et al          including parameters determine time budget pre solving
number pre solvers considered  pre solving techniques freely combined
selection approaches  always needed  added top level binary
parameter completely activates deactivates use pre solvers  presolving parameters conditional switch 
implemented choices claspfolio   system described section       
figure   illustrates complete configuration space thus obtained  current version 
use concrete implementation autofolio approach  covers six
different algorithm selection approaches 
 hierarchical  regression  inspired satzilla    xu et al         learns regression
model algorithm  new instace  selects algorithm best
predicted performance 
multiclass classification  inspired llama  kotthoff        learns classification
model directly selects algorithm based features new instance 
pairwise classification  inspired satzilla    xu et al         learns  cost sensitive 
classification model pairs algorithms  new instance  evaluates models selects algorithm votes 
   

fiautofolio  automatically configured algorithm selector

transformation

pre solving

yes

instance
weighting

contribution
filtering

normalization

approach

imputation

p   pca

performance preprocessing

max feature time

feature preprocessing

 
multi class
classification

pairwise
classification

c  svm 
gamma svm 

 hierarchical 
regression

clustering

snnap

k   k nn

max cluste r

k
best n

random
forest

svm

gradient
boosting

random
forest

svm

gradient
boosting

ridge

lasso

svr

random
forest

ridge

lasso

svr

random
forest

 

 

 

 

 

 

 

 

 

 

 

 

 

 

k means

gaussian
mixture

spectral
clustering

figure    configuration space claspfolio    including    categorial parameters    
integer valued parameters    continous parameters  parameters double boxes
top level parameters  single boxes represent algorithm selection approaches based classes
machine learning techniques  dashed boxes machine learning techniques dotted boxes
indicate number low level parameters  parameter boxes used default configuration filled grey 
clustering  inspired isac  kadioglu et al         determines subsets similar training
instances feature space best algorithm subsets  new
instance  determines nearest cluster center selects associated algorithm 
k nn  inspired  s  kadioglu et al         me asp  maratea et al         determines set similar training instances feature space given new instance
selects algorithm best performance instance set 
snnap  inspired collautti et al         predicts performance algorithm
regression models uses information k nn approach predicted
performance space 
approaches  claspfolio   covers least three different machine
learning techniques  where appropriate   listed figure    example  pairwise
classification based random forests  svms gradient boosting  with       
hyper parameters  respectively   preprocessing strategies  supports 
performance preprocessing 
transformation applies log  xu et al         z score normalization  collautti
et al         performance data 
instance weighting weights instances impact performance
algorithm selector  is  instances get low weight available algorithms perform equally  high weight algorithms differ substantially
performance  kotthoff  gent    miguel        
contribution filtering removes algorithms less specified contribution performance oracle  also known virtual best solver   xu
et al       a   form algorithm subset selection 

   

filindauer  hoos  hutter    schaub

feature preprocessing 
normalization transforms instance features min max  z score  decimalpoint  log scheme application pca 
p pca applies principal component analysis features selects top p
principal components  p parameter  if pca activated  
imputation fills missing feature values median  average frequent
value feature imputation deactivated feature vector incomplete
given instance  single best solver statically selected 
max feature time limits amount time spent collect features ensures
much time spent feature computation  however  result
incomplete features missing values  which get imputed imputation
active  
chose default configuration claspfolio    used initialize algorithm
configurator  satzilla   like configuration  since shown effective
sat  xu et al       a  asp  hoos et al          since overall high performance
evident results figure    configuration uses pairwise cost sensitive random
forest classifiers  z score feature normalization pre solving schedule three
pre solvers  since assume prior knowledge algorithm selection scenarios 
default configuration uses default instance features defined scenario designers 
chose claspfolio   basis autofolio  designed
flexible known perform well   note principle  selectors 
satzilla  xu et al          isac  kadioglu et al          snnap  collautti et al  
      llama  kotthoff         could generalized similar way 
addition using claspfolio   algorithm selection framework  current
version autofolio employs algorithm configurator smac  described section
        selection framework  configurator exchangeable  chose
smac  performed best across algorithm configuration problems studied
far  principle  configurators could used  as  gga  ansotegui et al  
      irace  lopez ibanez et al          preliminary results  lindauer et al       b 
showed paramils optimize performance claspfolio   
inferior smac one scenario  performance advantage small 

   empirical performance analysis
section  empirically analyze performance autofolio approach 
experiments  autofolio employs claspfolio   using well known machine learning package scikit learn  pedregosa et al          version         algorithm configurator smac  version           ran autofolio thirteen algorithm selection
scenarios make algorithm selection library      bischl et al       b   
   results performance claspfolio   compared state of the art algorithm selectors
found aslib net 
   note experiments aslib scenarios  claspfolio   algorithm selectors
need perform actual runs algorithms feature generators  aslib scenarios already

   

fiautofolio  automatically configured algorithm selector

shown table    scenarios comprise wide variety hard combinatorial
problems  includes performance data range solvers  between  
    set instances  instance features organized feature groups associated
costs  scenarios consider here  performance objective runtime minimization 
high level  scenarios comprise following data 
asp potassco  runtimes different parameter configurations asp solver
clasp broad range asp instances collected potassco group  gebser 
kaminski  kaufmann  ostrowski  schaub    schneider      a  
csp       runtimes single solver two different configurations  with
without lazy learning  gent  jefferson  kotthoff  miguel  moore  nightingale    petrie 
      collection csp instances 
maxsat   pms  runtime data      maxsat evaluation 
premarshalling  runtimes  based ida  based solvers premarshalling problem  real world  time sensitive pre marshalling problem instances
operations research literature 
proteus       runtimes different csp sat solvers range csp
instances  preprocessed various csp to sat translation techniques 
qbf       runtime data qbf solvers aqme system  pulina  
tacchella        qbf instances      qbf solver evaluation 
sat   hand  sat   indu sat   rand  runtime data respective tracks      sat competition 
sat   all  sat   hand  sat   indu sat   rand  runtimes various sat solvers broad range sat instances used train algorithm
selection system satzilla  xu  hutter  shen  hoos    leyton brown      b 
respective tracks      sat challenge 
refer bischl et al       b  details scenarios  including baseline
experiments showing algorithm selection applied effectively scenarios  point using common library allows us compare autofolio
fair uniform way algorithm selection methods  however  price pay
uniform comparison necessarily consider current state of the art
algorithms solving respective problems  since aslib data collected
several years ago  furthermore  note current version aslib consists
deterministic performance data  expect future versions consider scenarios stochastic performance data multiple runs per algorithm instance  using
different pseudo random number seeds  autofolio applied stochastic scenarios straightforward manner  optimizing mean performance across runs
instance
contain necessary performance data feature vectors  in order allow fair comparison
algorithm selectors based data  without confounding factor due hardware platform
used run experiments  

   

filindauer  hoos  hutter    schaub

scenario
asp potassco
csp     
maxsat   pms
premarshalling
proteus     
qbf     
sat   hand
sat   indu
sat   rand
sat   all
sat   hand
sat   indu
sat   rand

 i
    
    
   
   
    
    
   
   
   
    
   
    
    

 u  a  f  fg
  
   
   
 
   
   
  
  
   
  
   
   
   

  
 
 
 
  
 
  
  
 
  
  
  
  

   
  
  
  
   
  
   
   
   
   
   
   
   

 
 
 
 
 
 
  
  
  
  
  
  
  

tc
   
    
    
    
    
    
    
    
    
    
    
    
    

reference
 hoos et al        
 gent et al        
 malitsky et al        
 tierney   malitsky       
 hurley et al        
 pulina   tacchella       
 xu et al        
 xu et al        
 xu et al        
 xu et al       b 
 xu et al       b 
 xu et al       b 
 xu et al       b 

table    overview algorithm selection scenarios algorithm selection library 
showing number instances  i  number unsolvable instances  u  u i   number
algorithms  a  number features  f   number feature groups  fg   cutoff time tc
literature reference 

    algorithm configuration setup
following standard practice  hutter et al          performed multiple  in case     
independent runs algorithm configurator smac scenario selected
configuration claspfolio   best performance training data  configurator run allocated total time budget   cpu days  single run claspfolio  
limited   cpu hour  using runsolver tool  roussel         performance
metric  used penalized average runtime penalty factor     par     counts
timeout    times given runtime cutoff  runtime cutoffs differ aslib
scenarios   study optimization par   influenced metrics 
number timeouts  time required evaluate single configuration claspfolio   varied    cpu seconds   cpu hour reference machine  see
below   mostly depending difficulty optimizing pre solving schedules 
obtain robust estimate autofolios performance  used    fold outer crossvalidation given specific aslib scenarios  is  configured claspfolio   ten
times scenario  with different training test splits   therefore  total  performed
            configuration runs   cpu days three different configuration spaces
 see section      thirteen aslib benchmarks  requiring total      
cpu days     cpu years   note although thorough evaluation autofolio
required substantial amounts computation  applying single benchmark set
given training test split would require    independent configuration runs two
days could thus performed weekend modern desktop machine 
furthermore  applying autofolio new algorithm selection benchmark set cheap
comparison collecting data new benchmark set  instance  collect
   

fiautofolio  automatically configured algorithm selector

autofoliovote
autofolio
autofolioext

categorical

integer

real

conditionals

configurations

     
     
      

 
  
  

 
  
  

  
  
  

           
             
             

table    overview configuration spaces number categorical  integer valued
real valued parameters  number conditionals  estimation number
configurations ignoring real valued parameters  number categorical values
varies scenarios depending number algorithms  features feature
groups 
algorithm performance data aslib scenarios required      cpu days
 asp potassco        cpu days  proteus        average      
cpu days    times much configuration budget autofolio  
performed experiments bwunicluster karlsruhe  whose machines
equipped two octa core intel xeon e            ghz     mb cache  cpus
   gb ram each  running hat enterprise linux      note  however  runtimes
selected algorithms feature computations part aslib scenarios
depend hardware used 
    different configuration spaces
mentioned earlier  autofolio used optimize performance single approach algorithm selectors  satzilla  multi approach selectors  llama
claspfolio    much larger configuration spaces  see figure     therefore  studied three different parameter spaces autofolio based claspfolio   
autofolio considers configuration space described section     additionally
adds binary parameters enable disable feature groups  defined
specific algorithm selection scenario  algorithm subset selection done using
heuristic based marginal contribution algorithm oracle performance 
autofoliovote considers subset configuration space autofolio 
fixes algorithm selection approach pairwise classification voting scheme 
autofolioext considers configuration space autofolio  instead parameters feature group  added binary parameters instance feature
selectable algorithm  increases number parameters substantially example  adds     additional parameters proteus     
scenario 

   selected feature groups result empty feature set  claspfolio   statically select single
best algorithm training data 

   

filindauer  hoos  hutter    schaub

scenario
asp potassco
csp     
maxsat   pms
premarshalling
proteus     
qbf     
sat   hand
sat   indu
sat   rand
sat   all
sat   hand
sat   indu
sat   rand

default
par    tos
     
     
     
      
      
      
      
      
      
      
      
      
     

  
  
 
  
   
  
  
  
  
   
  
  
  

autofoliovote
par  
 tos
     
     
     
      
      
     
      
      
      
     
      
     
     

  
 
 
  
   
  
  
  
  
   
  
  
  

autofolio
par  
 tos
     
     
     
      
      
     
      
      
     
     
      
     
     

  
 
 
  
   
  
  
  
 
   
  
  
  

autofolioext
par  
 tos
     
     
     
      
      
     
      
      
      
      
      
     
     

  
 
 
  
   
  
  
  
  
   
  
  
  

table    comparing different configuration spaces autofolio based test performance  best performance shown bold face  indicate performance significantly better default configuration claspfolio   significance levels
              respectively  according one sided permutation test        
permutations  performances values that  according permutation test  significantly worse  at         best performance given scenario marked
 

fixed selection approach autofoliovote pairwise classification
voting scheme  since satzilla   like promising single approach experiments  see  e g   figure     hand  extended configuration space 
autofolioext   obtained adding algorithm subset selection feature selection
configuration task  feature selection well known improve many machine learning
models  often small subset instance features necessary predict runtime
algorithms  hutter  hoos    leyton brown        
note configuration autofoliovote found autofolio 
configuration autofolio part autofolioext   is  autofoliovote
autofolio autofolioext   table   gives overview configuration space sizes 
    analysis configuration process
table    compare performance default configuration claspfolio  
 namely  satzilla   like  configurations optimized autofoliovote  
autofolio autofolioext   selection scenarios  autofoliovote improved
performance test data comparison default configuration claspfolio   
autofolio improved one scenario autofolioext three scenarios 
performance improvements test data statistically significant             
ten seven scenarios autofoliovote   nine seven autofolio 
five four autofolioext   respectively  according one sided permutation test
        permutations 
   

fiautofolio  automatically configured algorithm selector

      aslib scenarios  configuration least one configuration
spaces considered led statistically significant improvements           discuss
remaining two scenarios  asp potassco csp       asp potassco 
performance improved substantially training data  autofolio reduced par  
score       transfer test data  with none differences
test performances statistically significant   note default configuration
claspfolio   manually optimized scenario  hoos et al         
autofolio found similar configurations similar performance  csp      autofolio variants improved default  insignificantly so 
note hard improve performance substantially benchmark 
contains two algorithms 
premarshalling  autofolio solved   additional problem instances reduced par        nevertheless  performance difference weakly
significant  at         due strong constraints pre solving schedule
default configuration claspfolio    at   solvers     seconds  
extensive pre solving schedules decreased number timeouts premarshalling  introduced overhead many instances
scenario  making harder autofolio achieve significant performance improvements  scatter plot figure  a shows autofolio produced fewer timeouts
default claspfolio    autofolio required higher runtime instances  points diagonal   similarly  autofolio solved lot instances
proteus      qbf       autofolio higher runtime
instances  see figure  c  b   however  number timeouts improved much proteus       from          performance improvement
statistically significant here  finally  sat   all example clear cut
case  autofolio improved performance claspfolio   instances
substantially reduced number timeouts  see figure  d  
overall  autofoliovote performed best experiments  followed autofolio 
distance  autofolioext   respect statistical significance  autofoliovote autofolio performed quite similarly  former better three times
latter better once  based results  suspect added flexibility
autofolio compared autofoliovote pays configuration budget
large enough evaluate enough configurations effectively search larger space 
case three sat   scenarios  autofolio reached best
performance  scenarios contain relatively problem instances  making
evaluation claspfolio   quite fast allowing smac evaluate        configurations within   days  contrast  evaluation configuration largest aslib
scenario  proteus       cost hour  smac evaluated    
configurations  enough explore design space autofolio  accordingly  performance autofolioext proteus      improved slightly
comparison default configuration  autofoliovote made progress faster
performed statistically significantly better autofolio  therefore  believe
autofolio good choice evaluate many configurations 
scenario small large configuration budget available  hand 
   

filindauer  hoos  hutter    schaub

   x

  x

 x

   x

  x

 x

 x

 x

    

    
  x

  x

   

   
   x

configured

configured

   x

  

  

 

 

   

   

    
    

   

 

  
default

   

    
    

    

   

 

  
default

   

    

 a  premarshalling  number timeouts  b  qbf       number timeouts reduced
reduced     default      configured  
    default      configured  
   x

  x

 x

   x

    

 x

  x

 x
 x

    
  x

   

  x

  

   x

   

configured

configured

   x

  

 

 

   

   
    
    

   

 

  
default

   

    
    

    

   

 

  
default

   

    

 c  proteus       number timeouts
 d  sat   all  number timeouts reduced
reduced      default       configured        default       configured  

figure    scatter plots comparing per instance performance default claspfolio  
 satzilla   like  autofolio  left  premarshalling  autofolio improved penalized average runtime  par    reducing number timeouts 
cost increased runtimes many instances  right  sat   all  autofolio
improved performance instances reduced number timeouts 

autofoliovote used larger scenarios configuration budget
quite small 
figure   shows progress configuration process terms training performance
function time sat   hand proteus       scenarios
   

fiautofolio  automatically configured algorithm selector

    
    
performance

par  

    
    
    

autofolio
autofolio ext
autofolio vote

    
  

   

   

   

       
time  s 

    
    

autofolio
autofolio ext
autofolio vote

    
    
   

   

   

  

   

 a  sat   hand

   

   

       
time  s 

   

   

   

 b  proteus     

figure    training par   performance best configuration time  line
shows median    folds outer cross validation filled area indicates
performance       quantile 

fewest configuration evaluations performed fixed configuration budget 
scenarios  large configuration space autofolioext resulted period
stagnation performance improved  proteus       performance started
improve near end configuration budget  contrast  autofolio
autofoliovote performed quite similarly scenarios  autofoliovote
somewhat faster make progress  note logarithmic time axis   surprisingly us 
different selection approaches chosen autofolio autofoliovote  
restricted configuration space  autofoliovote choose pairwise classification
voting scheme  autofolio used approaches outer folds
scenarios  regression    times two scenarios   clustering      times 
resp   snnap      times  resp   
figure    estimate influence configuration budget
performance final algorithm selector  example  halve configuration time
budget   day  penalized average runtime training set increases
   
    choices lead good performance 
analyze choices important autofolio  applied two complementary methods assessing parameter importance algorithm configuration spaces 
functional anova  hutter  hoos    leyton brown            b  global measure
parameter importance ablation analysis  fawcett   hoos      b      a  local
measure  high level overview parameters autofolio  refer back
section      full details  including default values ranges parameters  given
online appendix available www ml aad org autofolio 
   

filindauer  hoos  hutter    schaub

      functional anova  fanova 
functional anova  fanova  see  e g   sobol        general method partitioning
variance function components corresponding subsets arguments  hutter
et al         demonstrated technique applied efficiently quantify
importance algorithms parameters  approach re use performance data
collected configuration process purpose  without requiring new algorithm
executions  therefore computationally efficient  in experiments  required
minutes   overall approach fit empirical performance model  hutter  xu  hoos 
  leyton brown          c r measured performance data 
used predict performance arbitrary configurations instances  study
parameter importance model  fitting model  fanova marginalizes
across problem instances 
  x
f c   

m c  i  
   
 i 
ii

computes variance function f across entire configuration space c
partitions variance additive components due subset algorithms
parameters  particular interest unary subsets  often explain substantial part
variance tend easiest interpret  important note fanova
partitions variance f entire configuration space  provides
global measure parameter importance  takes account many poorly performing
configurations 
use fanova context study  aslib scenario  merged
performance data    independent smac runs removed data points reported timeout  resulted empty feature set  latter 
case claspfolio   statically selects single best solver  causing parameters
become unimportant performance claspfolio   
brevity  report results scenario sat   all  table   shows ten
important parameters autofolio autofolioext scenario 
configuration spaces  maximal time spent compute instance features  max featuretime  turned important parameter  parameter important 
setting small result features  or even none  disabling
selection mechanism  setting large lead increased overhead feature
computation  see figure    
second important parameter autofolio marginal contribution
filtering heuristic algorithm subset selection  algorithm subset selection especially important scenarios based sat solving  include many sat
solvers performance solvers often highly correlated  xu et al  
    a   autofolioext   contribution filtering heuristic less important 
configuration space includes binary parameters individual algorithm  allowing
configurator  here smac  directly perform subset selection  context  including mphasesatm marchrw special importance  solver mphasesatm
single best algorithm sat   all one highest marginal contributions
   observed timeouts particular configuration larger data sets  clustering approach
spectral clustering 

   

fiautofolio  automatically configured algorithm selector

parameter

main effect

max feature time
contr filter
approach
feature step cg
pre solving
impute
perf transformation
time pre solving
feature normalization
pre solving max solver

parameter

           
          
          
          
          
          
          
          
          
          

main effect

max feature time
approach
pre solving
contr filter
algorithms mphasesatm
imputation
f algorithms marchrw
time pre solving
pre solving sec mode
perf transformation

 a  autofolio

           
          
          
          
          
          
          
          
          
          

 b  autofolioext

table    average main effects   stdev  outer cross validation splits ten
important claspfolio   parameters sat   all according fanova 

marginal par   scores

    

    

     

                       
max feat time  sec 

figure    marginal performance predictions parameter max feature time data
one outer fold configuration space autofolio  blue line indicates mean
predicted marginal performance red area standard deviation 
oracle  similarly  marchrw high marginal contribution algorithm
whose performance highly correlated another solver  see exploratory
data analysis bischl et al       b  
note analysis determines global parameter importance
respect entire parameter space  example  importance maximal feature
computation time mostly high  crucial change improve
performance claspfolio    configuration space contains settings
drastically worsen performance  gain complementary insights parameters changed improve performance  next performed ablation analysis  
   note fanova used yield local analysis parameter importance partitioning variance performance high performance regions given configuration space  hutter

   

fi    

    

    

    

    

    

    

    
par  

par  

lindauer  hoos  hutter    schaub

    
    

    
    

   

    

   

   

   
ute ime lter lize  sp ans opt  cg eaf aps sic res jois
impture t ontr finorma  stepsnce trspeed  steps ples pl s ls s eps ba featups lob

c
ure ature n same ste ure st f max re ste
 fe
featperfor
fe f mi atur feat ing r eatu
max
vot f
ng r fe



v

   

e e e p f r c
s cg put tim  op aliz ran joi sap s s lea ure filte asi
tep im ature  speed normance teps lobps ls re stepmples x featcontr  teps b

e
te
 s

ur
 fe
form re s e s atu n s f m eature
feat
max
per featu featur fge rf mioting r
f
v
n
voti

 a   nd outer fold

 b   th outer fold

figure     ablation paths two outer folds sat   all   a   important
parameter impute feature step cg smaller effect   b   feature step cg
important parameter impute effect performance 

      ablation analysis
ablation analysis provides answer question changes parameter values
one configuration another caused biggest improvement performance  
iteratively changing parameter value largest impact performance
path two given configurations  e g   default configuration algorithm
optimized configuration  unlike fanova  ablation analysis attempt
summarize parameter importance across entire configuration space  focusses locally
paths configurations interest  results obtained ablation analysis
therefore complementary fanova  unfortunately  ablation costly 
since requires new algorithm runs assess performance configurations path
two given configurations  autofolio experiments sat   all 
allocated time budget   days maximum wall clock time permitted jobs
cluster ablation    outer cross validation folds  within
budget  obtained results   those 
ablation results indicate feature step cg boolean parameter enables
disables computation clause graph features single important parameter
change claspfolio  s default  default  feature step cg activated 
turns clause graph features often expensive compute within
time allow feature computation  therefore  indeed good decision
configuration procedure deactivate optional feature computation step  according
ablation results  done     outer cross validation folds and  average 
  folds  responsible     performance improvements achieved
et al          here  this  since used ablation analysis study parameter importance
locally 

   

fiautofolio  automatically configured algorithm selector

configuration  standard deviation         contrast  seen fanova results 
feature step cg quite unimportant globally  main effect        second
important parameter change activation feature imputation  impute  
average  responsible     overall performance improvement  standard
deviation      made   outer cross validation folds analyzed   however 
impute effect performance feature step cg deactivated
impute changed ablation path  case     ablation
paths  e g   see figure   a  hence  impute impact performance  
paths  e g   see figure   b   two parameters dependent effects  since imputation
particularly important clause graph features computed  features time
many large instances thus require imputation 
globally important parameter  according fanova  max feature time 
found rather unimportant change default value  parameter
changed default optimized configuration outer folds sat   all 
since default value already good average    overall performance improvement could attributed change  note along
ablation path  max feature time never flipped value resulted worse performance default configuration  many poorly performing values
exist explain globally high importance parameter 
    comparison algorithm selectors
table    compare autofolio satzilla     xu et al          snnap  version      collautti et al         isac  implementation snnap      kadioglu
et al            note isac snnap pure algorithm selectors  whereas
satzilla   claspfolio   additionally use pre solver schedules  furthermore 
added nave approach  randsel  simulating uninformed user selects uniformly random snnap  isac satzilla    overall  autofolio performed best      scenarios statistically indistinguishable
best system scenarios  according one sided permutation test        
permutations significance level         therefore  autofolio system
achieves state of the art performance scenarios 
satzilla   performed second best  yielded statistically significantly worse performance autofolio      scenarios  even though statistically significant 
satzilla   performed slightly better autofolio   scenarios  reason
   large standard deviation arises fact folds  parameter change actually
responsible      performance difference  folds  change alone would
sufficed achieve better performance optimized configuration 
   sum relative performance subset parameter improvements limited       since
computed relative difference default optimized configuration   
  ablation paths  parameter changes lead better performance final optimized
configuration  parameter changed worsened performance again 
   alexandre frechette  current main developer satzilla  provided internal new implementation
satzilla  version      b count cheap feat     longer limited sat 
    state of the art selectors   s  kadioglu et al         cshc  malitsky et al       a  
publicly available training procedures  therefore unable train
scenarios 

   

filindauer  hoos  hutter    schaub

asp potassco
csp     
maxsat   pms
premarshalling
proteus     
qbf     
sat   hand
sat   indu
sat   rand
sat   all
sat   hand
sat   indu
sat   rand

oracle

sb

snnap

isac

    
     
    
     
    
    
     
     
     
    
     
    
    

     
      
      
      
       
      
       
      
       
      
      
      
     

     
      
   
      
      
      
      
      
    
      
      
   
     

     
    
     
      
    
      
       
      
      
      
      
      
     

satzilla   randsel autofolio
   
   
     
      
      
      
      
      
     
     
      
     
     

     
     
     
    
      
      
    
      
      
      
      
      
     

   
   
     
      
      
   
      
      
   
   
    
     
   

table   
performance comparison autofolio  snnap  isac 
satzilla    well single best solver  sb  selected based par   training
set  baseline  oracle  also known virtual best solver  bound optimal performance algorithm selector  show par   scores averaged    outer
cross validation folds  instances solved solver removed test set
avoid artificially inflating par   scores  randsel column shows expected
performance picking uniformly random one snnap  isac satzilla   
best performance shown bold face  performance values statistically significantly better best performing system given scenario  according
one sided permutation test         permutations significance level        
marked  
might satzilla   performs extensive search determine best combination pre solving schedule  grid search   algorithm subset  iterated local search 
trained selection model 
note that  order compensate    cpu days spent find well performing
configuration autofolio  compared simply using single best solver  average
across scenarios autofolio would consecutively solve instances    cpu
days  standard deviation      less two times configuration budget 
although autofolio improved substantially single best solver  sb 
scenarios  up speedup factor      sat   rand   still gap
oracle performance  also known virtual best solver sat community  
gap could closed least two ways   i  using larger configuration budget
autofolio   ii  developing better instance features  basis
algorithm selection methods 

   conclusions
presented autofolio best knowledge  first approach automatically configuring algorithm selectors  using concrete realization approach based
highly parameterized algorithm selection framework claspfolio    showed
using state of the art algorithm configurators  algorithm selectors customized
   

fiautofolio  automatically configured algorithm selector

robustly achieve peak performance across range algorithm selection scenarios 
resulting approach performs significantly  and sometimes substantially  better manually configured selectors applied out of the box previously unseen algorithm
selection scenarios 
comprehensive experiments    algorithm selection scenarios different
domains  sat  max sat  csp  asp  qbf  container pre marshalling  make
algorithm selection library aslib  concrete realization autofolio outperformed
best single solver selection benchmark factors           geometric
average       terms par   scores  overall  autofolio established improved stateof the art performance      scenarios performed par previous
state of the art approaches scenarios  overall  clearly yielded robust
performance across diverse set benchmarks 
studied effect different configuration spaces  here  showed
medium size configuration space autofolio lead state of the art performance
configuration budget allows evaluation sufficiently many configurations 
contrast  selection scenario large  in terms number algorithms problem
instances   configuration budget limited  configuration constrained
space  used autofoliovote   typically leads better performance 
performance autofoliovote independently verified icon challenge
algorithm selection  kotthoff         evaluated   different systems
small configuration budget    cpu hours respect three metrics  par   score 
number instances solved misclassification penalty  throughout paper 
metric optimized autofolio par   score  autofolio ranked first
respect metric  ranked first respect number instances solved
second respect misclassification penalty  leading overall second place  
future work  plan investigate potential gains larger configuration
spaces  including feature algorithm subset selection  used effectively 
end  would  i  study performance larger configuration budgets
allow configurator assess configurations   ii  evaluate algorithm configurators  irace  lopez ibanez et al         gga  ansotegui et al           iii 
extend configuration space autofolio implementing algorithm selection
approaches  e g   cshc  malitsky et al       a    iv  shrink larger configuration space
based analysis parameter importance fanova  hutter et al        
ablation  fawcett   hoos      b   allowing configurator focus important parameters   v  automatically select pre configured algorithm selectors 
based features given algorithm selection scenario  improve performance
starting automatic configuration configurations thus selected  feurer  springenberg    hutter         another promising avenue reducing computational cost
approach would pre select algorithms  features  problem instances based
techniques proposed hoos et al         based collaborative filtering approach
misir sebag         finally  plan investigate extent autofolio
configure algorithm selection systems selecting parallel portfolios  lindauer et al  
    a  exploit increasing availability parallel computing resources 
overall  believe automated configuration algorithm selection systems improves performance versatility systems across broad range application
   

filindauer  hoos  hutter    schaub

domains  autofolio approach facilitates future improvements  making easier realize assess performance potential inherent new design choices
various components algorithm selection system  open source implementation
autofolio available www ml aad org autofolio  

acknowledgements
m  lindauer supported dfg  german research foundation  emmy
noether grant hu          project scha          h  hoos nserc discovery
grant  f  hutter dfg emmy noether grant hu          t  schaub
dfg project scha          respectively  work performed
computational resource bwunicluster funded ministry science  research arts
universities state baden wurttemberg  germany  within framework
program bwhpc 

references
abrame  a     habet  d          extension learning max sat  endriss  u  
  leite  j   eds    proceedings  th european starting ai researcher symposium
 stairs     vol      frontiers artificial intelligence applications  pp   
    ios press 
amadini  r   gabbrielli  m     mauro  j          sunny  lazy portfolio approach
constraint solving  theory practice logic programming                   
ansotegui  c   malitsky  y     sellmann  m          maxsat improved instance specific
algorithm configuration  brodley  c     stone  p   eds    proceedings twentyeighth national conference artificial intelligence  aaai     pp            aaai
press 
ansotegui  c   sellmann  m     tierney  k          gender based genetic algorithm
automatic configuration algorithms  gent  i   ed    proceedings
fifteenth international conference principles practice constraint programming  cp     vol       lecture notes computer science  pp          springerverlag 
bergstra  j   bardenet  r   bengio  y     kegl  b          algorithms hyper parameter
optimization  shawe taylor  j   zemel  r   bartlett  p   pereira  f     weinberger 
k   eds    proceedings   th international conference advances neural
information processing systems  nips     pp           
biere  a          lingeling  plingeling treengeling entering sat competition      
balint  a   belov  a   heule  m     jarvisalo  m   eds    proceedings sat competition       solver benchmark descriptions  vol  b        department
computer science series publications b  pp        university helsinki 
bischl  b   kerschke  p   kotthoff  l   lindauer  m   malitsky  y   frechette  a   hoos  h  
hutter  f   leyton brown  k   tierney  k     vanschoren  j       a   www aslib net 
   

fiautofolio  automatically configured algorithm selector

bischl  b   kerschke  p   kotthoff  l   lindauer  m   malitsky  y   frechette  a   hoos 
h   hutter  f   leyton brown  k   tierney  k     vanschoren  j       b   aslib 
benchmark library algorithm selection  computing research repository  corr  
abs            
chiarandini  m   fawcett  c     hoos  h          modular multiphase heuristic solver
post enrolment course timetabling  proceedings seventh international
conference practice theorysy automated timetabling  patat    pp 
   
collautti  m   malitsky  y   mehta  d     osullivan  b          snnap  solver based
nearest neighbor algorithm portfolios  blockeel  h   kersting  k   nijssen 
s     zelezny  f   eds    machine learning knowledge discovery databases
 ecml pkdd     vol       lecture notes computer science  pp         
springer verlag 
dickerson  j     sandholm  t          futurematch  combining human value judgments
machine learning match dynamic environments  bonet  b     koenig 
s   eds    proceedings twenty nineth national conference artificial intelligence  aaai     pp          aaai press 
eggensperger  k   feurer  m   hutter  f   bergstra  j   snoek  j   hoos  h     leyton brown 
k          towards empirical foundation assessing bayesian optimization
hyperparameters  nips workshop bayesian optimization theory practice 
fawcett  c     hoos  h       a   www cs ubc ca labs beta projects ablation  
fawcett  c     hoos  h       b   analysing differences algorithm configurations
ablation  journal heuristics      
feurer  m   springenberg  t     hutter  f          initializing bayesian hyperparameter
optimization via meta learning  bonet  b     koenig  s   eds    proceedings
twenty nineth national conference artificial intelligence  aaai     pp      
      aaai press 
gebser  m   kaminski  r   kaufmann  b   ostrowski  m   schaub  t     schneider  m 
     a   potassco  potsdam answer set solving collection  ai communications 
               
gebser  m   kaminski  r   kaufmann  b   schaub  t   schneider  m     ziller  s       b  
portfolio solver answer set programming  preliminary report  delgrande  j  
  faber  w   eds    proceedings eleventh international conference logic
programming nonmonotonic reasoning  lpnmr     vol       lecture notes
computer science  pp          springer verlag 
gebser  m   kaufmann  b     schaub  t          conflict driven answer set solving 
theory practice  artificial intelligence                
gent  i   jefferson  c   kotthoff  l   miguel  i   moore  n   nightingale  p     petrie  k 
        learning use lazy learning constraint solving  coelho  h   studer 
r     wooldridge  m   eds    proceedings nineteenth european conference
artificial intelligence  ecai     pp          ios press 
   

filindauer  hoos  hutter    schaub

gomes  c     selman  b          algorithm portfolios  artificial intelligence            
     
hall  m   frank  e   holmes  g   pfahringer  b   reutemann  p     witten  i         
weka data mining software  update  sigkdd explorations               
hoos  h   kaminski  r   lindauer  m     schaub  t          aspeed  solver scheduling via
answer set programming  theory practice logic programming             
hoos  h   kaufmann  b   schaub  t     schneider  m          robust benchmark set selection boolean constraint solvers  pardalos  p     nicosia  g   eds    proceedings
seventh international conference learning intelligent optimization
 lion     vol       lecture notes computer science  pp          springerverlag 
hoos  h   lindauer  m     schaub  t          claspfolio    advances algorithm selection
answer set programming  theory practice logic programming             
huberman  b   lukose  r     hogg  t          economic approach hard computational
problems  science            
hurley  b   kotthoff  l   malitsky  y     osullivan  b          proteus  hierarchical
portfolio solvers transformations  simonis  h   ed    proceedings
eleventh international conference integration ai techniques constraint programming  cpaior     vol       lecture notes computer science 
pp          springer verlag 
hutter  f   babic  d   hoos  h     hu  a          boosting verification automatic tuning
decision procedures  oconner  l   ed    formal methods computer aided
design  fmcad     pp        ieee computer society press 
hutter  f   hoos  h     leyton brown  k          automated configuration mixed integer
programming solvers  lodi  a   milano  m     toth  p   eds    proceedings
seventh international conference integration ai techniques constraint programming  cpaior     vol       lecture notes computer science 
pp          springer verlag 
hutter  f   hoos  h     leyton brown  k          sequential model based optimization
general algorithm configuration  coello  c   ed    proceedings fifth
international conference learning intelligent optimization  lion     vol 
     lecture notes computer science  pp          springer verlag 
hutter  f   hoos  h     leyton brown  k          efficient approach assessing
hyperparameter importance  xing  e     jebara  t   eds    proceedings   th
international conference machine learning   icml     vol      pp         
omnipress 
hutter  f   hoos  h     leyton brown  k       a   www ml aad org smac 
hutter  f   hoos  h     leyton brown  k       b   www ml aad org fanova 
hutter  f   hoos  h   leyton brown  k     stutzle  t          paramils  automatic
algorithm configuration framework  journal artificial intelligence research     
       
   

fiautofolio  automatically configured algorithm selector

hutter  f   hoos  h  h     leyton brown  k          identifying key algorithm parameters
instance features using forward selection  pardalos  p     nicosia  g   eds   
proceedings seventh international conference learning intelligent optimization  lion     vol       lecture notes computer science  pp         
springer verlag 
hutter  f   lindauer  m   balint  a   bayless  s   hoos  h     leyton brown  k         
configurable sat solver challenge  cssc   artificial intelligence  review 
hutter  f   xu  l   hoos  h     leyton brown  k          algorithm runtime prediction 
methods evaluation  artificial intelligence             
janota  m   klieber  w   marques silva  j     clarke  e          solving qbf counterexample guided refinement  cimatti  a     sebastiani  r   eds    proceedings
fifteenth international conference theory applications satisfiability testing  sat     vol       lecture notes computer science  pp         
springer verlag 
kadioglu  s   malitsky  y   sabharwal  a   samulowitz  h     sellmann  m          algorithm selection scheduling  lee  j   ed    proceedings seventeenth international conference principles practice constraint programming  cp    
vol       lecture notes computer science  pp          springer verlag 
kadioglu  s   malitsky  y   sellmann  m     tierney  k          isac   instance specific
algorithm configuration  coelho  h   studer  r     wooldridge  m   eds    proceedings nineteenth european conference artificial intelligence  ecai    
pp          ios press 
kotthoff  l          llama  leveraging learning automatically manage algorithms 
computing research repository  corr   abs           
kotthoff  l          algorithm selection combinatorial search problems  survey  ai
magazine       
kotthoff  l          icon challenge algorithm selection  
icon fet eu challengeas 

http   challenge 

kotthoff  l   gent  i     miguel  i          evaluation machine learning algorithm
selection search problems  ai communications                 
lim  b   van den briel  m   thiebaux  s   backhaus  s     bent  r          hvac aware
occupancy scheduling  bonet  b     koenig  s   eds    proceedings twentynineth national conference artificial intelligence  aaai     pp          aaai
press 
lindauer  m   hoos  h     hutter  f       a   sequential algorithm selection parallel
portfolio selection  dhaenens  c   jourdan  l     marmion  m   eds    proceedings nineth international conference learning intelligent optimization
 lion     lecture notes computer science  pp       springer verlag 
lindauer  m   hoos  h   hutter  f     schaub  t       b   autofolio  algorithm configuration algorithm selection  proceedings workshops twenty nineth
national conference artificial intelligence  aaai    
   

filindauer  hoos  hutter    schaub

lindauer  m   hoos  h     schaub  t       c   www cs uni potsdam de claspfolio  
lopez ibanez  m   dubois lacoste  j   stutzle  t     birattari  m          irace package 
iterated race automatic algorithm configuration  tech  rep   iridia  universite
libre de bruxelles  belgium 
lopez ibanez  m     stutzle  t          automatic configuration multi objective aco
algorithms  dorigo  m   m birattari  caro  g  d   doursat  r   engelbrecht 
a  p   floreano  d   gambardella  l   gro  r   sahin  e   sayama  h     stutzle 
t   eds    proceedings seventh international conference swarm intelligence
 ants     lecture notes computer science  pp         springer verlag 
malitsky  y   mehta  d     osullivan  b          evolving instance specific algorithm
configuration  helmert  m     roger  g   eds    proceedings sixth annual
symposium combinatorial search  socs     aaai press 
malitsky  y   sabharwal  a   samulowitz  h     sellmann  m          parallel sat solver
selection scheduling  milano  m   ed    proceedings eighteenth international conference principles practice constraint programming  cp    
vol       lecture notes computer science  pp          springer verlag 
malitsky  y   sabharwal  a   samulowitz  h     sellmann  m       a   algorithm portfolios
based cost sensitive hierarchical clustering  rossi  f   ed    proceedings
  rd international joint conference artificial intelligence  ijcai     pp     
    
malitsky  y   sabharwal  a   samulowitz  h     sellmann  m       b   boosting sequential solver portfolios  knowledge sharing accuracy prediction  pardalos  p  
  nicosia  g   eds    proceedings seventh international conference learning intelligent optimization  lion     vol       lecture notes computer
science  pp          springer verlag 
maratea  m   pulina  l     ricca  f          multi engine approach answer set programming  theory practice logic programming             
mascia  f   lopez ibanez  m   dubois lacoste  j     stutzle  t          grammar based
generation stochastic local search heuristics automatic algorithm configuration tools  computers   or             
misir  m     sebag  m          algorithm selection collaborative filtering problem 
tech  rep   inria   lri  universite paris sud xi 
omahony  e   hebrard  e   holland  a   nugent  c     osullivan  b          using casebased reasoning algorithm portfolio constraint solving  bridge  d   brown 
k   osullivan  b     sorensen  h   eds    proceedings nineteenth irish conference artificial intelligence cognitive science  aics    
pedregosa  f   varoquaux  g   gramfort  a   michel  v   thirion  b   grisel  o   blondel 
m   prettenhofer  p   weiss  r   dubourg  v   vanderplas  j   passos  a   cournapeau 
d   brucher  m   perrot  m     duchesnay  e          scikit learn  machine learning
python  journal machine learning research               
pulina  l     tacchella  a          self adaptive multi engine solver quantified boolean
formulas  constraints                
   

fiautofolio  automatically configured algorithm selector

rice  j          algorithm selection problem  advances computers            
roussel  o          controlling solver execution runsolver tool  journal
satisfiability  boolean modeling computation            
smith miles  k          cross disciplinary perspectives meta learning algorithm
selection  acm computing surveys         
snoek  j   larochelle  h     adams  r  p          practical bayesian optimization machine learning algorithms  bartlett  p   pereira  f   burges  c   bottou  l    
weinberger  k   eds    proceedings   th international conference advances
neural information processing systems  nips     pp           
sobol  i          sensitivity estimates nonlinear mathematical models  mathematical
modeling computational experiment                
tamura  n   taga  a   kitagawa  s     banbara  m          compiling finite linear csp
sat  constraints                 
thornton  c   hutter  f   hoos  h     leyton brown  k          auto weka  combined
selection hyperparameter optimization classification algorithms  i dhillon 
koren  y   ghani  r   senator  t   bradley  p   parekh  r   he  j   grossman  r    
uthurusamy  r   eds      th acm sigkdd international conference knowledge discovery data mining  kdd     pp          acm press 
tierney  k     malitsky  y          algorithm selection benchmark container premarshalling problem  dhaenens  c   jourdan  l     marmion  m   eds    proceedings nineth international conference learning intelligent optimization
 lion     lecture notes computer science  pp        springer verlag 
vallati  m   fawcett  c   gerevini  a   hoos  h     saetti  a          automatic generation
efficient domain optimized planners generic parametrized planners  helmert 
m     roger  g   eds    proceedings sixth annual symposium combinatorial
search  socs     aaai press 
xu  l   hoos  h     leyton brown  k          hydra  automatically configuring algorithms portfolio based selection  fox  m     poole  d   eds    proceedings
twenty fourth national conference artificial intelligence  aaai     pp         
aaai press 
xu  l   hutter  f   hoos  h     leyton brown  k          satzilla  portfolio based algorithm selection sat  journal artificial intelligence research             
xu  l   hutter  f   hoos  h     leyton brown  k          hydra mip  automated algorithm configuration selection mixed integer programming  rcra workshop
experimental evaluation algorithms solving problems combinatorial
explosion international joint conference artificial intelligence  ijcai  
xu  l   hutter  f   hoos  h     leyton brown  k       a   evaluating component solver
contributions portfolio based algorithm selectors  cimatti  a     sebastiani 
r   eds    proceedings fifteenth international conference theory applications satisfiability testing  sat     vol       lecture notes computer
science  pp          springer verlag 
   

filindauer  hoos  hutter    schaub

xu  l   hutter  f   shen  j   hoos  h     leyton brown  k       b   satzilla      improved
algorithm selection based cost sensitive classification models  balint  a   belov 
a   diepold  d   gerber  s   jarvisalo  m     sinz  c   eds    proceedings sat
challenge       solver benchmark descriptions  vol  b        department
computer science series publications b  pp        university helsinki 
yun  x     epstein  s          learning algorithm portfolios parallel execution 
hamadi  y     schoenauer  m   eds    proceedings sixth international conference learning intelligent optimization  lion     vol       lecture notes
computer science  pp          springer verlag 

   


