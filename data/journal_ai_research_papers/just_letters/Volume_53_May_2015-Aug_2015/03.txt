journal of artificial intelligence research                  

submitted        published      

placement of loading stations for electric vehicles 
no detours necessary 
stefan funke
andre nusser

funke fmi uni stuttgart de
nusser fmi uni stuttgart de

universitat stuttgart
institut fur formale methoden der informatik
      stuttgart  germany

sabine storandt

storandt cs uni freiburg de

albert ludwigs universitat freiburg
institut fur informatik
      freiburg  germany

abstract
compared to conventional cars  electric vehicles  evs  still suffer from considerably
shorter cruising ranges  combined with the sparsity of battery loading stations  the complete transition to e mobility still seems a long way to go  in this paper  we consider the
problem of placing as few loading stations as possible so that on any shortest path there
are sufficiently many not to run out of energy  we show how to model this problem and
introduce heuristics which provide close to optimal solutions even in large road networks 

   introduction
battery powered  electric vehicles  evs  are an important means towards a reduction of
carbon dioxide emissions when recharged using renewable energies  e g  from solar or wind
power  despite their environmental advantages evs still wait for their breakthrough with
the main reason being their limited cruising range  often less than    km  together with
the sparsity of battery loading stations  blss   planning a trip from a to b with an ev
nowadays is a non trivial undertaking  the locations of blss have to be taken into account 
and many destinations are completely out of range 
hence  in this early phase of e mobility an important goal is to establish a network of
blss so that using an ev becomes a worry free enterprise  as modern blss require only
little space  see figure    left  for an illustration   they can be placed almost everywhere 
but as this generates costs  a natural objective is to minimize the number of installed blss 
in previous work  storandt   funke         a heuristic was proposed to determine bls
locations such that one can get from anywhere to anywhere in the road network without
running out of energy  when choosing a suitable route   unfortunately  this approach
only guarantees connectivity but not reasonability of the routes  in fact  even rather close
destinations where routes with only one recharging stop are possible  might require long
detours with several recharging stops due to the placement of blss  a related approach by
lam  leung and chu        suffers from similar drawbacks  in the long run  e mobility
will only prevail if a road trip with an ev can be undertaken without unreasonable detours
c
    
ai access foundation  all rights reserved 

fifunke  nusser    storandt

figure    inner city battery loading station  left image   and feasible loading station cover
for a small map cut out  right image  

being introduced  in this paper we ask for a placement of the blss such that on any
shortest path there are enough blss not to get stranded when starting with a fully loaded
battery  just like it is typically the case with gas stations for conventional cars  we call
such a set of bls locations an ev shortest path cover  esc  and define the respective
optimization problem as follows 
definition    ev shortest path cover  esc    given a  di graph g v  e   edge costs
c   e  r  and a function  which for a path  decides whether this path can be traveled
along without recharging the ev  the problem of determining a minimum subset l  v of
blss such that every shortest path wrt c can be traveled without running out of energy is
called the ev shortest path cover problem 
see figure    right  for an idea of how a valid esc looks like  in the remainder we
will define n    v   and m    e  if not otherwise noted  also consider that for sake
of a clearer presentation we assume unique shortest paths  which can be enforced using
standard techniques like symbolic perturbation   we will describe how to deal with ambiguous shortest paths towards the end of the paper  the function  captures all the energy
characteristics of the network and the considered vehicle  typically  in mountainous areas
or on roads with rough surfaces  the minimal paths where an ev runs out of energy are
considerably shorter than in flat terrain or downhill  for our experiments we determined
the energy consumption of a road segment e    v  w   e with elevations h v   h w  as
distance e      max h w   h v      for some weighting parameter   dependent on the
ev   that is  the energy consumption is determined by the euclidean distance and the
height differences  similar to the energy model used in previous work  artmeier  haselmayr 
leucker    sachenbacher        but disregarding energy recuperation  negative edge costs  
the function  compares for a path  the accumulated energy consumption along its edges
with the evs battery capacity b  r  to determine if recharging is necessary  note that
one could employ any kind of monotonous function  here  all approaches we will introduce
in the following will work notwithstanding this particular choice 
   

fiplacement of loading stations for electric vehicles

    contribution
we describe how to model the esc problem as an instance of the hitting set problem
with the sets being shortest paths which require at least one battery recharge  this allows
us to use algorithms developed for solving hitting set problems  e g  the standard greedy
approach  unfortunately  it turns out that the difficulty of computing an esc solution
is already the instance construction  with  n     n    v   shortest paths in the network 
extracting and storing them naively requires too much time and space to be practical 
we therefore design new shortest path extraction and representation techniques  which
allow to tackle even very large road networks  moreover  we develop several refinements
and heuristics which provide feasible esc solutions more efficiently  while no a priori
approximation guarantee can be shown for the solutions  we can prove a posteriori  using
instance based lower bounds  that for real world instances the actual approximation ratio
is only a small constant 
in this extended version of the original paper  funke  nusser    storandt      b   we
present the following new results and insights regarding esc  we prove the esc problem to be np hard  and even hard to approximate   the proven hardness is motivation
and justification for the development of heuristic algorithms  furthermore  we explain how
to transform shortest paths from one  newly developed  representation into another  along
with a theoretical run time analysis and experiments  the ability to transform between representations allows for more flexibility and might prove useful for other applications where
compact representations of shortest paths are used  we also describe simple minimality
checks for shortest paths deciding whether they need to be considered in the respective hitting set instance  especially for large networks  such checks reduce the number of shortest
paths that have to be stored significantly  in addition  we provide details for more involved
lower bound constructions  finally  we lay out methods for dealing with ambiguous shortest
paths  for augmenting an already existing loading station set and for the case that loading
station locations are restricted to a subset of the nodes in the network 

   theoretical analysis
let us first prove the esc problem to be np hard  so there is no hope for efficient algorithms
that solve esc to optimality  unless p np   hence in the remainder of the paper we will
focus on designing algorithms that compute good approximate solutions 
theorem    hardness   the ev shortest path cover problem  esc  is np hard 
we prove np hardness of esc by a solution size preserving reduction from vertex cover
 vc   which is one of the classical np hard problems  we use the following definition and
notation for vc 
definition    vertex cover   given a graph g v  e   the goal is to find a vertex set c  v
of minimal cardinality such that e  e   e  c     
to prove theorem    we show that the ability to solve the esc problem efficiently implies
the ability to solve vc efficiently as well  hence  esc has to be np hard as otherwise we
would have a contradiction to the np hardness of vc  to that end we construct for a given
   

fifunke  nusser    storandt

 
 

 

 
 

 
 

 

 

 

 

 

 
 

figure    left  vertex cover instance with optimal solution of size    red circled nodes  
right  respective esc instance constructed by inserting an auxiliary edge per
node in the graph on the left  and augmenting all edges with cost    the circled
nodes indicate an optimal hitting set such that no path of cost at least   is unhit 

vc instance gvc  vvc   evc   a corresponding instance of esc specified by g v  e   c and  as
follows 
 v   vvc   e   evc i e  the esc instance initially contains all nodes and edges of the
vc instance
 for all v  v add an auxiliary vertex v   and an auxiliary edge  v  v     to g
 for all e  e set the costs c e  uniformly to  
  is true for all paths consisting of less than three edges and false otherwise  i e  every
shortest path that traverses at least three edges has to have a loading station on it to
make the set of loading stations a feasible esc
the construction requires only polynomial time in the size of gvc   figure   illustrates the
transformation from a vertex cover instance to an esc instance on a small example 
we first show that any vertex cover solution in gvc is also an esc solution for the esc
instance constructed as described above 
lemma    a vertex cover c in gvc yields an esc l for g  c   with  l     c  
proof  let c  vvc be a vc solution in gvc   as the esc graph g contains a corresponding
vertex for every v  vvc   we simply set l   c  so obviously  l     c    it remains to show
that after placing loading stations according to l  every shortest path in g can be traveled
without running out of energy  assume for contradiction that there exists a shortest path
in g consisting of three edges  u  v  v  w  w  x  and neither v nor w are in l  as every
edge e  evc has at least one of its two vertices in l  because l   c is a vertex cover
for evc    it follows that  v  w  has to be an auxiliary edge only present in g but not in
gvc   but auxiliary edges cannot be in the middle of a path containing three or more edges 
as every auxiliary vertex has degree    so every path consisting of three edges contains a
loading station  hence l is a valid esc 
to complete the proof of theorem    we have to show that a valid esc solution leads
to a valid vertex cover solution as well 
   

fiplacement of loading stations for electric vehicles

lemma    an esc l for g  c   yields a vertex cover c in gvc with  c    l  
proof  let l be a valid esc solution  as l might contain auxiliary vertices  we construct
c by replacing every auxiliary vertex v   in l with its respective original vertex v  as v
might also be part of l  we conclude that  c    l   to show that c is a valid vertex
cover in gvc   we prove that for every edge  v  w   evc either v or w or both are in c 
assume for contradiction that there exists an edge  v  w   evc with  v  w   c    
accordingly  neither v  nor w  nor the respective auxiliary vertices v   and w  were part of
the esc solution l  this implies a shortest path  v     v    v  w    w  w    of three edges with
no loading station on it in g  as this contradicts l being a valid esc solution  we conclude
that for every edge we have  v  w   c     and therefore c is a valid vertex cover 
if l is an optimal solution for esc  then obviously  c     l  is fulfilled in lemma    as
placing a loading station at an auxiliary vertex v   and the corresponding original vertex v at
the same time renders the loading station at v   superfluous  hence in an optimal solution 
we never have both vertices v and v   in l  so in combination with lemma    we showed
that for every instance of vc  we can construct in polynomial time an instance of esc
for which an optimal solution translates into an optimal solution for the vc instance of
the same size in a straightforward manner  therefore any hardness results for vc carry
over to esc  this proves theorem   and furthermore rules out the existence of       
polynomial time approximation schemes for esc via the proven apx hardness of a factor
better than        for vc  dinur   safra        
corollary    esc cannot be approximated better than        
with the proven hardness  efficient algorithms that solve the esc problem to optimality
might be difficult to design unless one can make use of certain problem aspects as the battery
capacity parameter or road network characteristics 

   modeling esc as a hitting set problem
in the following  we aim for good approximation algorithms and heuristics that solve the
esc problem in practice  in particular  we will exploit the fact that esc can be modeled
as an instance of the well known hitting set problem and therefore algorithms suitable for
hitting set computations transfer to esc  the classical hitting set  hs  problem is defined
as follows 
definition    hitting set   given a set system  u  s  with u being a universe of elements
and s a collection of subsets of u   the goal is to find a minimum cardinality subset l  u
such that each set s  s is hit by at least one element in l  i e  s  s   l  s     
in our case  u consists of all nodes of the road network  the possible bls locations   the
set s is composed of the vertex sets of all shortest s t paths  excluding s and t themselves 
for which a fully charged battery at s does not suffice to reach t  our function  characterizes
the paths where the energy consumption of traversing them exceeds the battery capacity
b  r   we call these paths b violating  clearly  we only need to consider set minimal
paths as supersets are hit automatically  theorem   shows that this hitting set formulation
indeed solves our esc problem  see also figure   for an illustration  
   

fifunke  nusser    storandt

v
s
b

l
l

v

l

s
b

s
b

s
b

t
v

t
t
t

figure    if a shortest path from s to t exhibits a b violating prefix  s v  marked red   then
according to the hitting set formulation there has to be a loading station l on
this subpath  as the vehicle fully reloads at l  the same argumentation applies
to the subpath l t  which is illustrated in the picture by cutting off the prefix
s l in every layer  the final s t path is not b violating anymore  therefore the
originally considered s t path can be traveled when visiting the three indicated
loading stations  the blue bs mark the nodes where the battery is fully loaded 
i e  where the charge level is equal to the battery capacity 

theorem    correctness   the hitting set formulation leads to a feasible esc solution 
i e  when placing loading stations according to the hitting set solution l  every shortest
path in g can be traversed with an ev without running out of energy according to  
proof  let  s  t  be a shortest path from s to t in g which is b violating  and let the ev
be fully loaded at s  let  s  v  be the minimal b violating prefix of  s  t   this prefix
has to be hit by a loading station l  l with l    s  l    v as demanded by the hitting set
formulation  the ev can reach l from s  as  s  v  is the minimal b violating prefix and l
appears before v on  s  v   at l the ev is fully re charged  hence the whole argumentation
transfers now to the subpath  l  t   applying this argument recursively  the ev will finally
reach a loading station on  s  t  from which the suffix of the path is no longer b violating 
therefore the ev will reach t via  s  t  without running out of energy 

note that there is no precision loss in reformulating esc as a hitting set problem
instance  since every solution to esc is a feasible solution of exactly the same cardinality
for the respective hitting set problem instance 
at this point  common hitting set solving techniques can be applied to solve esc  e g 
the standard greedy algorithm  the greedy algorithm repeatedly picks the node hitting
most so far unhit sets in s and adds it to the solution  it terminates as soon as all sets are
hit  a solution computed with the greedy algorithm is guaranteed to be a   ln  s         approximation  chvatal         we ignore the lower order term     from now on  in our
application  the number of sets in the system is upper bounded by the number of shortest
paths in the graph  therefore  we have  s   n  and hence the greedy algorithm provides
a   ln n  approximation guarantee  the running time of the greedy algorithm depends
crucially on fast access to the so far unhit sets in s in each round 
   

fiplacement of loading stations for electric vehicles

   
  

  
  
  
 

  

 
 

 

  

s

t

 

figure    cut out of a ch graph  black edges are original edges  blue edges indicate shortcuts  the red node labels reflect the contraction order  so  for example  at the
moment the node labeled   was contracted  the shortcut from node    to node  
was inserted as the shortest path from    to   went over    on the right side  the
search space for a query from the leftmost to the rightmost node is illustrated 
green edges show gout  s  and purple edges gin  t  

in the remainder of the paper  we will investigate the efficient construction of the set
system using different path extraction and representation schemes and study their influence
on the greedy algorithm 

   basics for practical esc computation
to determine suitable bls positions  we first have to construct the set of shortest paths
on which the ev would run out of energy  according to    computing the shortest path
between two nodes or from one to all other nodes is classically performed using dijkstras
algorithm  also shortly called dijkstra   in large street networks dijkstra is too slow to
process a large number of such queries  as it is necessary for our application   though 
therefore  we will instrument speed up techniques developed for accelerating shortest path
queries to achieve better running times for our approaches  in particular  we will employ
contraction hierarchies  ch   geisberger  sanders  schultes    delling        for this
purpose  the basic idea behind ch is to augment the graph g v  e  with a set e   of so
called shortcuts  which span  large  sections of shortest paths  using these shortcuts instead
of original edges allows for a dramatic reduction of operations in a dijkstra run 
the central operation in the ch preprocessing is that of a node contraction  considering
a graph g v  e  with a node v to be contracted  the goal is to remove v from g without
affecting shortest path distances between all remaining nodes  this can be achieved by
creating additional shortcut edges between neighbors of v as follows  for every pair of
neighbors u  w of v with  u  v    v  w   e  a shortcut  u  w  is created  with cost of the
path uvw  if uvw is the only shortest path from u to w  then the resulting graph  with
v removed and all necessary shortcuts added  exhibits the same shortest path distances as
the original graph  the ch preprocessing phase instruments this node contraction by first
assigning a label l   v  n to each node  then  the nodes are contracted in increasing label
order  having contracted all nodes and constructed a set of shortcuts e   on the way  we
   

fifunke  nusser    storandt

return as result of the preprocessing phase the ch graph g   v  e  e      that is  the original
graph augmented with the shortcuts  and the labeling   see figure    left  for an example 
according to these labels  original or shortcut edges  v  w  are referred to as upwards
if l v    l w  and downwards otherwise  paths are called up downwards if they consist
exclusively of edges of that type  it can be shown that by the way we created shortcuts 
for each node pair s  t  v a shortest path exists in g    g v  e  e     which can be
decomposed into an upward path starting at s followed by a downward path ending in t 
the highest node of the path wrt l is called the peak node in the following  this property of
the path allows to restrict a bidirectional dijkstra run to gout  s  and gin  t  which refer to
the subgraphs of g  containing only all upwards paths starting in s or all downwards paths
ending in t respectively  in figure    right   these subgraphs are illustrated  the resulting
optimal path found by the bidirectional dijkstra has the same costs as the shortest path
in the original graph  but the representation of the path is different  because the path
now consists  partly  of shortcuts  to get the shortest path in the original graph  an
unpacking procedure is applied  for every shortcut  the two edges  original or shortcut  it
directly spans are memorized during ch construction  thus  for unpacking one just has to
recursively replace shortcuts by these spanned edges until all original edges are identified 
note that the ch scheme can also be employed to just represent a shortest path 
very concisely by replacing as many subpaths of  as possible by shortcuts  we also call
this representation of  a ch path  in our experiments it turns out that ch paths are an
extremely economic representation scheme for shortest paths 
for the one to all shortest path problem  the phast algorithm  delling  goldberg 
nowatzyk    werneck        also takes advantage of the ch preprocessing scheme  here
in a first phase all nodes in gout  s  for a source s  v are settled via a dijkstra run  in the
second phase all downward edges  v  w  are relaxed in decreasing order induced by l w  
thereby computing correct distances to all nodes in v   so the second phase is simply a sweep
over a subset of the edges which requires only linear time  correctness of phast results
again from the fact that for every node t the shortest path from s to t can be decomposed
into an upwards path  with all contained nodes settled in the first phase  and a downwards
path  as the set of downwards edges forms a directed acyclic graph and the labels l w 
induce a topological order  a sweep over the edges in this order assures that at the moment
an edge  v  w  is relaxed  node v is already settled  hence phast computes exact shortest
path distances from s to all nodes in the network  note that for a single shortest path query
phast is not the method of choice  as other techniques like pure ch dijktra computations
normally run in time clearly sublinear in the number of edges in practice 

   construction of the set system
in this section  we investigate several strategies to extract the set system for a given esc
instance  i e  the set of all minimal shortest paths in g which are b violating  along with
different extraction strategies  we present different ways to represent and store the respective
set of shortest paths and discuss the advantages and disadvantages of these representations 
   

fiplacement of loading stations for electric vehicles

    naive extraction
the simplest approach that comes to mind is to compute the shortest path tree  via dijkstra 
for every s  v and to identify all nodes in the tree with accumulated energy cost values
above b  once all nodes in the priority queue of dijkstra have settled predecessors that
already belong to b violating paths  we can abort the exploration from that source s  the
respective paths in the search tree can then be backtracked and stored as e g  complete
vertex sets  for small exploration radii  small bounds b  this is a practical approach  but

for larger b the space consumption of o n  n   n    v   is enormous  assuming an average

path length of n   even if we only store the dijkstra search tree for each s  v via
predecessor labels  we still have a space consumption of o n     of course  we could easily
achieve linear space consumption in the number of b violating paths  by only storing the
source vertex s and the target vertex t for each path  but if we want to have access to the
nodes on a certain path  we again have to run a dijkstra computation in the network from
s to t  for huge sets of paths computing the nodes between s and t always on demand is
very time intensive  no matter which representation we use to store the paths  the time
complexity of o n   n log n   m    m    e  for the naive extraction already limits usability
for real world instances  o n log n   m  being the runtime for one dijkstra run 
in fact  this is also the main difficulty for other hitting set type problems on street
networks  for example  speed up techniques for shortest path queries like transit nodes
 tn   bast  funke    matijevic        or hub labeling  hl   abraham  delling  goldberg 
  werneck        are based on hitting a certain set of shortest paths as well  methods
for complete instance construction are impractical there  therefore several custom tailored
heuristics were developed that allow for efficient computation without explicitly constructing
s  arz  luxen    sanders         but their setting differs significantly from ours  as in our
setting  poses an additional criterion to c for identifying the paths contained in s  hence
the distance bound employed in their setting leads to a set of equal length paths  while
in our scenario  due to different energy consumption when driving uphill or downhill  the
lengths of minimal b violating paths differ vastly  so unfortunately these tn and hl  and
other related  heuristics do not carry over to our setting  therefore we need to explore new
ways of extracting and storing shortest path sets 
    phast based extraction
for large bounds b finding all b violating paths from a source node resembles the one to all
shortest path problem  phast was explicitly designed to solve this task efficiently  the
paths we can backtrack in the respective search tree are in ch representation  i e  they
consist partly of shortcuts  this is a huge advantage compared to conventional paths in
terms of storage  because with shortcuts spanning large portions of the shortest path the
number of nodes in the ch path is significantly smaller  about two orders of magnitude for
the street network of germany   there are some downsides  though  nodes are processed in
the second phase of phast in l order and not increasingly by distance  hence incorporating
b as stopping criterion seems difficult  moreover  if b is not that large or leads to paths with
vastly differing lengths  the  n    lower bound on the  accumulated  runtime of phast
from every source might already result in a large overhead  hence we propose a different
strategy which is also based on ch but has the potential of being significantly faster 
   

fifunke  nusser    storandt

p

b     
 

 
 
 
 

 

 

g 
        

g 

p

 

 
 

 
 

 
       

 
     

 

     

 

figure    left  schematic representation of a ch graph with the height of the nodes indicating the contraction order  for the blue marked peak p  g     gin  p  is colored
red and g     gout  p  is colored green  note that for all nodes in the bottom
layer  both g  and g  are empty and nothing has to be done  which in practice
is true for about     of the nodes   right  energy cost labels  black  assigned
to g  and g  resulting from two dijkstra runs starting at the blue node  the
resulting intervals for nodes in g  are expressed in purple  so if we  for example 
search for matching targets for the source node labeled   in g    the intervals
reveal that only the node labeled   in g  is a suitable candidate 

    peak node mapping  pnm 
a large number of b violating paths can originate from a source s  v   exploring all
these paths with dijkstra or phast is very time consuming  the core idea of pnm is to
enumerate b violating paths completely different but also taking the ch representation of
paths into consideration  as explained above  shortest ch paths are unimodal with respect
to the labeling l and the node with the maximal label is called the peak  intuitively  nodes
with a high label appear in more shortest paths as peaks  in fact  in real world graphs  the
   nodes with highest level constitute the peaks of all reasonably long shortest paths  this
gives rise to a path enumeration algorithm  which explores paths not from the source but
from the peak  resulting in dramatically reduced search spaces for the majority of nodes 
algorithm  our pnm algorithm works as follows  we consider one by one every node
p  v as potential peak  as all shortest paths with peak p can only contain further nodes
with a smaller label  we only need to search upwards paths ending in p and downwards paths
starting in p for prefix and suffix candidates  the respective subgraphs of the ch graph
g  containing these paths are called g     gin  p  and g     gout  p   see figure    left 
for an illustration  a conventional dijkstra run in each of g  and g   which are typically
very sparse  reveals the distances from p to the contained nodes  now we are interested
in combinations of shortest  upward  paths in g  and shortest  downward  paths in g 
leading to minimal b violating paths  testing them all naively is too expensive  therefore 
we construct for each p an interval tree  berg  cheong  kreveld    overmars        on the
nodes in g    the interval  a  b   which we associate with such a node t  denotes the range of
possible energy consumption values of a path prefix  s  p  in g  such that  s  p    p  t 
is a minimal b violating path  these intervals can easily be computed by a single pass over
the dijkstra search tree in g    see figure    right  for an example  so for every possible
   

fiplacement of loading stations for electric vehicles

figure    illustration of three methods for representing and storing shortest paths  stored
elements are always colored orange   on the left as complete vertex set  in the
middle as shortcut set ch path  the heights of the vertices in the image correspond to their l value   and on the right as triple consisting of source  target and
peak vertex 

source s  g    we query the interval tree for the set of targets t in time o log  g        t   
storing the resulting paths as quadruples  s  p  t  c s  p    c p  t    t  t   note that for the
employment of the interval trees we make use of the special choice of   for different choices
of  the interval computation procedure has to be adapted 
filtering  after all nodes are processed  we have a set of b violating paths from which 
unfortunately  not all are shortest paths  the concatenation of two shortest paths   s  p 
and  p  t   does not need to be a shortest path itself  so it remains to filter this set
appropriately  this can be achieved by using distance oracles with quasi constant look up
time as e g  provided by hl or by another pass over all nodes in the role of the peak  always
pruning a quadruple if for s  t a shorter path was found for p     p  note  that pruning
can already be employed during the construction phase if the intermediate path set sizes
become too large  the final set of paths is then stored as list of triples  s  p  t   an even
more compact representation than ch representation  in figure    a visual comparison is
provided for storing a path as vertex set  as shortcut set  or as pnm triple 
accessing all nodes in the respective shortest s t path in g as required for the greedy
hitting set algorithm is no longer trivial for our sophisticated representation schemes 
though  therefore  we develop suitable adaptions of the greedy algorithm to work on
the ch representations and on pnm triples in section   
    minimality checks
as mentioned when introducing the hitting set formulation of esc  we only need to extract
and store minimal b violating shortest paths  i e  paths with no subpath being b violating
as well  adding non minimal paths to the set system of course does not invalidate the
solution  but increases the complexity of storing all sets  and the running time of the greedy
algorithm later on 
for the naive extraction scheme  a b violating path    sv        vk t identified in a dijkstra run from s might not be minimal  as the path might still be b violating without some
prefix  more precisely  we have to check if the path remains b violating when removing the
first edge  s  v     and if so  we dont have to include  into s  the respective dijkstra run
when considering v  as source will ensure that no b violating path is missed 
   

fifunke  nusser    storandt

for the phast based extraction  the minimality check becomes more complex  as the
paths are in ch representation  we might not have direct access to the first edge of the path
in the original graph  if the path starts with a shortcut   so we have to unpack the first
shortcut before performing the minimality check 
for pnm both prefix and suffix deletion might lead to a subpath that is still b violating 
so immediately after the decision in favor of a triple  s  p  t   we check for the first edge on
the path from s to p and the last edge on the path from p to t if their removal will not
destroy the property of the path being b violating  again  like with phast  paths are in
ch representation during the construction  therefore we have to unpack the shortcuts first 
    transformability
note  that the extraction scheme does not tie us to a certain path representation  in fact 
all mentioned representations  vertex sets  source target pairs  ch paths  triples  can be
converted into each other  especially the transformation from vertex sets to ch paths will
turn out to be favorable  as ch paths yield a fair trade off between space consumption and
applicability of the greedy algorithm as explained in more detail in section    we will now
provide the details for all transformations including theoretical transformation times  for
the latter we assume that the complete vertex set representation contains k elements 
 from source target pairs to vertex sets  given s  t  the complete path is computed via
a dijkstra run in g and backtracking  requiring o n log n   m  time 
 from vertex sets to ch paths  we assume the ch labels l   v  n are available 
then a recursive procedure allows to turn the vertex set into a ch path  we first
identify the node v  in the vertex set with the highest l value  the peak   then we
split the vertex set into the prefix before v  and the suffix after v    for both of those
sub paths we again search for the node with the highest l value  providing us with
v    v    these two nodes are connected with v  via a direct edge shortcut in the chgraph  as all nodes in between were contracted before   so we have  v    v      v    v    
this again provides us with a prefix  nodes before v    and a suffix  nodes after v   
on which we recurse  the algorithm stops when the prefix is only s and the suffix
only t  or the prefix is monotonously increasing wrt l and the suffix monotonously
decreasing   see figure    top  for an illustration  assuming the ch representation
contains h shortcuts  the transformation can be performed in o k  h  
 from ch paths to pnm triples  we just need to extract the peak vertex  besides
source and target  which can be done in o h  if the ch path consists of h shortcuts 
 from pnm triples to ch paths  given source s  target t  and peak p  we run a dijkstra
starting at p in g     gin  p  and g     gout  p  until s and t are settled  as the
number of edges in a ch graph is assumed to be in o m   the runtime for a single
transformation is in o n log n m  just like for the transformation from source targetpairs to vertex sets  but as typically a peak with a small l value has very small g 
and g    and a peak with high l value generates many s t paths at once  the amortized
costs per path are considerably smaller 
   

fiplacement of loading stations for electric vehicles

figure    from vertex sets to ch paths and back  in the first row  a vertex set is given 
the l values derived in the ch construction are indicated by the vertex elevations 
then recursively the vertex with the highest l value  marked red in the images 
in the prefix and suffix of the path is extracted and shortcuts are added to span
path sections with lower l value  in the second row  a ch path is recursively
unpacked  shortcuts are colored blue  the red arrows point to their replacement
edges in the next unpacking step  the final path is the same we started from in
the first row  and does not contain any shortcuts 

 from ch paths to vertex sets  given a ch path  we apply the unpacking method
described in section    i e  we recursively replace shortcuts by their spanned edges
until the path consists of original edges only  see figure    bottom   if the resulting
path consists of k vertices  the unpacking can be performed in o k  
 from vertex sets to source target pairs  the first and the last vertex of the complete
path are stored and the rest is neglected  this transformation costs o    or o k  if
we consider the deletion of the k    other elements as well 
in the following  we will no longer investigate the source target pair representation  as
storing pnm triples requires only one item more per path but at the same time allows for
more efficient access to the paths vertices 

   greedy hitting set computation
as explained above  the greedy approach is a natural strategy to solve the hitting set
problem approximately  theoretically it yields solutions within a factor of   ln n  of the
optimum in our setting  but in practice greedy performs much better than the theoretical 
a priori approximation guarantee implies 
for all but the simplest set system representation the application of the greedy hitting
set algorithm is not straightforward and requires some deliberate operations on the set
system path representations as we will see in the following 
    complete vertex sets
if the paths are simply given as the set of contained vertices  a single scan over all these
sets can determine the best node hitting most paths  another scan can remove the paths
   

fifunke  nusser    storandt

that have been hit by the selected node  these two scans can also be combined into one
by updating the counter values when removing the newly hit paths  an initial count is
still necessary   unfortunately  the space consumption of this approach is enormous  also
making a single scan quite expensive 
    ch paths
when representing the minimal b violating paths as ch paths  we could convert the single
paths into original paths by unpacking the shortcuts and then operate on the complete
vertex set of the path  note that the paths would be processed one by one and only one
unpacked path would be kept in memory at a time  but there is a much better strategy
than just uncompressing every single ch path to get to the original node sets  maintaining
a usage counter for each edge  counting how many shortest paths use that edge   we first
scan over all edges of all ch paths in the set system to be hit  incrementing the respective
counters  then we traverse all shortcut edges of the graph in decreasing order of their
construction in the ch preprocessing  incrementing the counters of the spanned edges  the
node counters  maintained to identify the maximum node  can then be derived by a final
scan over all original  non shortcut  edges  keeping reverse information about which edges
are spanned by which shortcut also allows the identification of all sets that have been hit
by a node  if we update the edge counters when removing ch paths from the set  picking
a node requires only one scan over the edges to push the counts down on the non shortcut
edges  one scan over the usage counters and one scan over the set of ch paths 
    peak node triples
when paths are described as triples of source  target  and peak node  we can get the chpath representation as described in section      then we proceed as with the ch path
representation  note  that this ch path representation is computed on demand for each
peak in every round to avoid keeping all paths in ch representation permanently in memory 

   multi stage construction
for country sized graphs  even the improved set system extraction methods and representations do not reduce the space and time consumption enough to be practical  therefore
we introduce a procedure which interleaves the set extraction and the greedy hitting set
computation in a multi stage algorithm  this multi stage algorithm requires significantly
less space than the complete construction of the set system  and therefore can be applied
to considerably larger instances 
    nested hitting sets
for an instance of our esc problem determined by the battery capacity b  we make the
following important observation  for every capacity b    b  a hitting set l  for the
instance corresponding to b   is also feasible for the original instance  having enough blss
for a smaller battery capacity also suffices for a larger battery capacity   so  for example  if
b     kwh  solving the problem for e g  b      kwh would be feasible as well  while the
construction of l  for some b    b might be considerably faster due to smaller exploration
   

fiplacement of loading stations for electric vehicles

 

 
s
 
s

 

s

 

 

 

t

b        b  b       

t

b         b  b       

t

b         b  b      

 
 

 
 

t b     

 

 
 

s

 

 

 
 

 
 

figure    if the battery capacity is b      kwh  the shortest path from s to t needs to
be hit by a loading station as it exhibits energy costs of     in the conventional
construction  the complete s t path would be part of the hitting set instance 
the three lower images illustrate what happens when we use a nested construction with different values of b     the red purple dashed subpath indicates the
minimal b    violating path starting at s  the brown square is a possible hitter for
this path  the purple dashed blue path indicates the minimal  b b     violating
path starting at the brown square  this path is always a subpath of s t no matter how b   is chosen  so hitting the blue purple path  large dot in the image 
assures that all b violating paths are hit as well  the nodes marked by brown
squares are not part of the final solution 

radii  l  is typically also much larger than necessary for the instance defined by b  so
simply using the solution for b      kwh although the real battery capacity is b     kwh 
we expect a result with many superfluous loading stations 
but there is another advantage of first quickly computing a hitting set for a small value
b     it allows us to construct a new  smaller problem instance for which any feasible hitting
set l   is also feasible for our original problem  defined by b   and l   is hopefully much
smaller than l    this second instance is defined by the set of paths originating in l  that
are  b b     violating 
we prove in lemma   that the hitting set l   for the second instance is indeed also a
hitting set for the original instance 
lemma    given a battery capacity b  and a second capacity b     b  let l  be a feasible
esc solution for b     and l be a feasible hitting set for all minimal shortest  b b     violating
paths originating in l    then l is a valid esc solution for the battery capacity b 
proof  consider some b violating s t path  in the original instance  then  must be hit
by a node v  l  less than b   away from s  the path v          t from this hitter to the
target  or a prefix thereof  has to be in the new constructed path set of  b b     violating
paths originating in l    therefore this subpath has a hitter in l  hence l hits any bviolating shortest path  which makes l a valid esc solution for battery capacity b  figure
  illustrates the proof on a small example 
   

fifunke  nusser    storandt

    path cover
for very small values of b  we can even compute hitting sets without any exploration and
evaluation of the  function purely based on the connectivity structure of the graph using
a so called k hop path cover  funke  nusser    storandt      a  which is a generalization
of a vertex cover  we construct a set of vertices c  v such that any directed  not
necessarily shortest  k hop path in g contains at least one vertex from c  for k     this is
simply a vertex cover   then c is an esc solution for b  where b  is the maximal energy
cost of a k hop path  which can easily be upper bounded by k times the maximal energy
cost of an edge  for values k     this takes only a few minutes even on large graphs using
a variant of depth first search  making this step negligible for the overall running time 
    combination
in our implementation we combined nested hitting sets and k hop path covers to a multistage procedure  constructing a sequence of hitting sets lr   lr         l    l for a sequence
of values br   br         b    b  finally returning l as the hitting set for the given
instance 
the first br results from a k hop cover with small value of k  for all subsequent solutions
we apply the nested hitting set approach  and choose bi manually   there might be some
loss in terms of quality compared to the greedy algorithm on the full set system due to the
nested construction  our experimental evaluation will show  though  that the loss in terms
of quality is not that pronounced  but the running times are drastically improved  and the
graph sizes which we can handle with this approach are much larger 

   refinements and lower bounds
in this section we introduce a speed up strategy for the greedy algorithm which is independent of the employed set representation  then we develop algorithms to construct
instance based lower bounds for the esc solution  these bounds will be helpful in our
experimental evaluation  as they prove  a posteriori  after running our algorithms  that
the computed solutions are in fact pretty close to the optima 
    multiple hitters heuristic
even with the non naive representations  there is considerable work involved when picking
the next best node in the greedy algorithm  so it might be worthwhile to add several
nodes to the hitting set in each round  normally  we pick only the node which hits most
so far unhit sets  and refrain from picking other nodes in the same round as picking the
first node influences the hit counters of others  on the other hand  if we pick nodes that
do not interfere with each other  the quality of the solution should not decline too severely 
one way to achieve this is to generate the list of nodes sorted in ascending order of their
hit counters  always picking the first one and then going down the list selecting the next
nodes which have the shortest path distances of at least d to all nodes already picked 
here d is appropriately chosen  e g  an upper bound on the longest shortest path that is
not b violating  thereby we make sure no path in our set increased the hit counter of two
or more nodes picked in one round 
   

fiplacement of loading stations for electric vehicles

figure    set of seven node disjoint b violating paths  highlighted in grey  in a small example graph  every valid hitting set for all b violating paths in the graph has
to contain at least seven vertices  as no vertex can hit more than one of the grey
marked paths  therefore the size of a set of node disjoint paths is a feasible lower
bound for the optimal hitting set size 

    simple instance based lower bounds
to evaluate the quality of our heuristics  we would like to compare the outcome to the
optimal solution  but as the optimal value is typically unknown  we instead compare to a
good  but easily computable lower bound  in a study on transit nodes  eisner   funke 
      a rather involved lower bound was proposed  which takes an effort comparable to
solving the hitting set problem itself  we propose a much simpler alternative which suffices
for our purposes  as a by product of the generation of the set system itself we can obtain
a set of node disjoint b violating paths  so no two paths in the set have a non empty
intersection  clearly  any feasible solution must contain an extra node per path in this set 
hence the size of a set of such node disjoint paths yields a valid lower bound  see figure  
for an illustration 
in case we do not generate the set system explicitly  because we use nested hitting sets  
we can greedily extract a set of node disjoint paths by running dijkstra computations from
random sources and adding b violating paths to our set as long as they do not intersect
with previously selected ones  the size of the set provides a valid lower bound at any time 

   dealing with real world settings
throughout the paper  we made some assumptions about the esc problem for sake of a
clean definition and easier algorithm descriptions  as these assumptions are not necessarily
met in practice  we explain in the following how to adapt our algorithms to still perform
well under real world settings 
   

fifunke  nusser    storandt

    ambiguous shortest paths
in our exposition we always assume uniqueness of shortest paths  in this section we will
discuss necessary modifications in case shortest paths are ambiguous 
first of all  we can enforce uniqueness of shortest paths by symbolic perturbation  to
that end we define the cost of a path    v  v        vk not only as the sum c of its edge costs 
but by the vector  c   v    v            vk    two such cost vectors are compared lexicographically 
that is  if two s  t paths     sv        t and     sw        t have the same aggregated edge
costs  and i is minimal with vi    wi   then   is considered shorter if vi   wi   otherwise
  is considered shorter  this symbolic perturbation can easily be incorporated into e g 
dijkstras algorithm  during the computation of shortest paths from a node s we consider
as  possibly tentative  distance label of a node v from s not only the aggregated edge costs
ds  v  along the respective path but the tuple  ds  v   preds  v    where preds  v  denotes the
predecessor on the current path from s to v  the ordering in case of identical ds  v  values is
determined by the node id of the predecessor  edge relaxations as well as the organization
of the priority queue is made according to these augmented distance labels  it is easy to
see that this yields the canonical and unique shortest paths as described above 
with edge lengths typically measured at a precision of around one meter it rarely happens that two paths exhibit exactly the same length  under some circumstances  though 
it might be desirable to actually maintain multiple shortest paths between nodes  hitting
each of them   allowing to travel along each of them without running out of energy   fortunately  we can adapt our algorithms to cater for all shortest paths  there is a minimal
change when backtracking after a dijkstra exploration as well as in the pnm approach and
a slight change in the ch construction  for the former  when we retrieve paths sets  instead
of following a predecessor reference of a node v  which was set during edge relaxation   we
inspect all adjacent nodes and check whether their distance labels with the respective edge
cost sums up to the distance label at v  this yields all neighbors of v that lie on a shortest
path from s to v  recursing on these neighbors we obtain all shortest paths  in the ch
construction  the crucial operation is the contraction of a node v  in the original version 
for every pair of neighbors u  w of v with  u  v    v  w   e  a shortcut  u  w  is created
 with cost of the path uvw  if uvw is the only shortest path from u to w  to maintain all
shortest paths  we add the shortcut if uvw is a shortest path from u to w  but with possible
existence of other shortest paths   in this way every shortest path has a ch representation 
this comes at the cost of slightly more shortcuts added 
our lower bound construction in section     can be modified to also yield a lower bound
for the case with ambiguous shortest paths as follows  an s t pair can contribute to the
lower bound if all shortest paths between s and t require at least one recharging event  to
compute a valid lower bound we retrieve a maximal set of such vertex pairs  where for any
two vertex pairs in this set the respective shortest path node sets are not allowed to overlap 
this generalizes the idea of node disjoint shortest paths in case of ambiguous shortest paths 
our experiments showed  though  that considering all shortest paths does not yield
noticeably different results  mainly due to the rarity of reasonably long ambiguous shortest
paths  when we disregard ambiguities in our implementation  only for extremely small
battery capacities  corresponding to a cruising range of less than  km   we found ambiguous
   

fiplacement of loading stations for electric vehicles

shortest paths that were not covered by our bls placement  for all larger battery capacities
our bls placement in fact covered all  of the few  ambiguous shortest paths 
    restricted loading station placement
we assume in our esc problem definition that loading stations can be placed on every
node in the network  in practice  though  the set of possible locations might be restricted
due to technical  financial or legal reasons  if there is a set v    v of candidate nodes for
loading stations  we can incorporate this in our algorithms as follows  during construction
of the set system  we check for every shortest path whether at least one of its nodes is in
v     otherwise  we ignore the path completely  as it can never be hit anyway   for the
ch based extraction methods  we can set a flag for every edge shortcut indicating whether
the spanned path contains a node from v   or not  this allows to perform the check for a
ch path without having to unpack it  in the actual hitting set computation we simply
skip over nodes that are not in v   to compute a feasible solution 
note  that depending on the choice of v   the final hitting set might not allow to drive
on all shortest paths without running out of energy  though  to incorporate that some
locations are more suitable to become loading stations than others without losing global
reachability as demanded by our esc problem formulation  we introduce a prize function
p   v  r    the higher the prize the more complicated or expensive it is to place a
charging station at this node  then we can exploit the weighted hitting set problem as
basis for our computations  here the goal is to find a set l of elements in
p the universe
which hit all sets in the set system while minimizing the accumulated prize ll p l   our
set system extraction methods remain unaffected by the prizes  only in the greedy hitting
set computation step  the selection of the next best hitter changes  previously  we selected
the node next that hits most so far unhit sets  now  if s v  denotes the set of so far unhit
sets that contain v  we select the node that minimizes the average prize per set p v   s v   
the approximation guarantee of the greedy algorithm for the weighted hitting set problem
is the same as for the unweighted hitting set problem  chvatal         we expect the
solution to consist mainly of cheap charging stations and possibly some expensive ones that
are required to establish reachability between any two nodes 
    placement with given initial loading station set
another assumption made in the esc problem definition is that we try to construct a
network of loading stations from scratch  i e  starting with no loading stations at all  while
loading stations are still sparse in many areas  the ones that are already installed should
not be ignored  existing loading stations can easily be taken into account when solving the
esc problem  for a given initial set of loading stations l    we check during the extraction
of the set system for each path if it is already hit by l    if this is the case  the path can be
pruned  the remaining steps for the hitting set computation work just like before 

    experimental evaluation
our proposed techniques for computing esc solutions were evaluated in a multi threaded
implementation written in c   and executed on  nd generation intel core desktop hard   

fifunke  nusser    storandt

ware  an i          cores    gb of ram  for complete set generations and an i         
cores    gb ram  for the multi stage construction with nested hitting sets  we use the
following abbreviations to state results  k       m       s seconds  m minutes  h hours 
d days  gb     bytes  we distinguish between cpu time  total cpu usage  and real time
 wall clock time   several road networks of germany derived from openstreetmap data
region
pforzheim
tubingen
baden wurttemberg south
southern germany
germany

abb 
 pf 
 tu 
 bw 
 sg 
 ge 

 v  
   m
   m
   m
   m
    m

 e 
   m
   m
   m
   m
    m

table    test graph characteristics 
 osm        were used for evaluation  see table   for an overview  as edge cost function
c we used travel time along an edge  so the paths to hit are indeed quickest paths  the
term shortest paths is conventionally used for subsuming all kinds of metrics   energy consumption of an ev was modeled as explained in the introduction using distance data from
osm and elevations provided by the shuttle radar topography mission  nasa         b
corresponds to a battery capacity which translates to a certain terrain dependent cruising
range  we use a capacity b for pf and tu that allows to drive    kilometers on average 
and about     kilometers for the larger graphs  our   which models how much going uphill
increases the energy consumption  equals   
     dealing with complete set systems
construction and representation  let us first examine the time and space complexity of
extracting the complete set of minimal b violating paths  we constructed set systems
using the naive strategy  naive  representing each path as the complete sequence of
its vertices   the phast based exploration  phast  with paths in ch representation  
and peak node mapping  pnm  representing each path as source peak target triple   the
respective results can be found in table    unfortunately  only the two smallest instances
were feasible to process using all strategies  already for the bw graph  the time and space
consumption of naive exploded  extrapolated more than    gb and more than    cpu
days   in comparison  phast is about a factor of   faster than naive  and the space
consumption of ch paths is an improvement by at least an order of magnitude  pnm can
construct the bw instance in     cpu hours  compared to the week needed by phast  and
the space consumption using triples decreases by another factor of    note that for longer
paths the advantage of pnm vs  ch representation increases   but for sg and ge  also
phast and pnm took too much time and space  e g  extrapolated    gb    days for
phast   so for larger networks  constructing complete set systems seems to be infeasible 

comparison of path representations  as explained in section      the path extraction
scheme does not tie us to a path representation  instead  we can transform the extracted
   

fiplacement of loading stations for electric vehicles

graph

pf
tu
bw
graph

pf
tu
bw

  paths

  m
   m
    m

space consumption
naive
phast
pnm
vertex sets ch paths
triples
   gb
   gb
   gb
    gb
   gb
   gb
      gb 
    gb     gb

computation time
naive
phast
pnm
cpu
real
cpu
real
cpu
real
   h
   h     m    m
   m     m
    h
   h
   h
   h     m
   m
     d      d 
   d     h
   h     m

table    comparison of path extraction representation schemes  b corresponds to about
  km  pf and tu  or    km  bw  cruising range on flat terrain  timings include
the ch construction for phast pnm  values in brackets are extrapolated 

paths to any of the introduced representations before storing them  each representation
provides some trade off between space consumption and access times for single paths  figure
   illustrates these values for a small and a large benchmark instance  tu and ger  
note  that the access times for paths represented as triples are amortized  if we really
want to extract a single path only  the costs are comparable to the ones for the  s  t 
representation  but in the greedy algorithm  we require access to huge sets of paths in
every round  so the  s  p  t  representation pays off  for the ch representation  the access
times are reported in the figure purely for completeness  they are not significant for the
greedy hitting set computation  though  as our specialized greedy algorithm on ch paths
does not require to unpack those paths  in fact  the access times relevant for the greedy
algorithm are even below the ones for the vertex set representation  as the ch representation
contains far less elements we have to sweep over  hence  we regard ch paths as the best
path representation as soon as the set system fits in memory in this representation 
the transformation times between two path representations can be estimated from the
results reported in figure    as well  every transformation that runs in constant or linear
time according to our analysis has cost less or comparable to accessing paths in vertex
set representation  the transformation time for ch paths to vertex sets or vice versa
corresponds to the access time for paths in ch representation  and to transform triples
into ch paths  we need the time to access a path in triple form minus the time to unpack
a ch path 
hitting set computation  we evaluated both the standard greedy algorithm as well as the
multiple hitters  mh  variation on the set systems for pf  tu  and bw with varying choices
for b  figure    shows their performance in terms of quality  standard greedy vs  mh  as
well as running time  how much faster mh is compared to standard greedy   the ratios are
averaged over all test graphs  the bound b is chosen between almost zero and    percent of
   

fifunke  nusser    storandt

figure     comparison of several path representation schemes in terms of space consumption and access time  both axes are in log scale 

the maximum energy consumption of some shortest path in the respective network  in fact
for very long paths  the set systems got so simple that greedy even constructed the optimum 
hence the approximation ratio of   in figure      in all cases  greedy produces results much
closer to the optimum as the theoretical   ln n guarantee  the maximum deviation from the
lower bound was indeed less than      employing the mh strategy increases the hs size
slightly  but yields significantly decreased running times especially for smaller bounds b
 where more hitters have to be chosen   still  compared to the construction time of the
set systems  the hitting set computation times were negligible  so we do not state them
explicitly here  this will change when we employ the multi stage construction  though 
     multi stage construction
as the construction of the complete set system has proven to be infeasible for larger road
networks  we will make use of the idea of a multi stage construction 
k hop cover pnm  let us first examine how a compact set system can be constructed
using the pnm approach after an initial k hop path cover  for the bw network we
computed a k      hop cover c           nodes  which corresponds to an esc solution
with b           and cruising range of about  km in flat terrain   then pnm is used to
create a final compact set system by only considering  b  b     violating paths that start
at nodes in c  not surprisingly  the number of paths to be hit reduces drastically from
    m in table   to   m in table    the running times are still quite high  though  as
this approach does not save the exploration from each peak  therefore more stages will not
   

fiplacement of loading stations for electric vehicles

  
  
runtime ratio

 
quality greedy
quality mh
runtime greedy runtime mh

 

  
 

  
  

 

  
  

 

approximation factor

  

 
 

 
  

  
  
  
percentage of max b

  

  

figure     performance of the greedy algorithm and the multiple hitters variant  mh 
averaged over pf  tu and bw 
graph
bw
sg
ge

 c 
       
       
       

b 
    
     
     

cpu
   h
   h
    h

real
    m
   h
    h

  paths
  m
  m
    m

table    instance creation  b     k  via pnm with initial k hop solution c for k      
help much here   since further improvements in terms of running time using pnm in a
multi stage approach cannot be expected  let us now concentrate on the naive approach
with the extracted paths being converted into their ch representation 
multi stage hitting sets  we employ the following strategy  first  construct a k hop cover
c with e g  k      which yields an initial hitting set lr for some bound br   then we
construct a reduced set system consisting of all  br   br   violating paths starting at
nodes from lr only and compute a hitting set lr  for that set system  here  we use naive
graph
tu
sg
tu
sg
ge
ge
ge

br


   k
   k
    k
   k
    k

bi s of nested hs
 k  k   k
 k   k    k
   k   k
    k    k
    k     k    k
   k     k    k
    k     k     k    k

 l 
   
   
   
   
   
   
    

lb
  
  
  
  
   
   
   

apx
    
    
    
    
    
    
    

cpu
 m
   m
 m
   m
   m
    m
   m

real
 m
   m
 m
  m
   m
   m
   m

table    multi stage hitting set computation  lb   lower bound  apx   approximation
factor   the last two experiments can be seen in detail in table   

   

fifunke  nusser    storandt

i
 
 
 
 
p

bi
   k
   k
    k
   k

i
 
 
 
 
 
p

bi
    k
    k
    k
    k
   k

tss

   m
   m
   m
    m
tss

   m
   m
  m
   m
   m

 paths

    m
    m
    m

 paths

    m
    m
   m
   m


ths
  s
  m
  m
  m
  m
ths
  s
  m
  m
  m
  m
   m

 li  
    k
   k
  k
   

 li  
   k
   k
    k
    
    


cpu
  s
   m
   m
   m
    m
cpu
  s
   m
   m
  m
   m
   m

table    statistics for a   stage run starting with a k      hop cover  above   and a  stage construction initialized with a k      hop cover  below  on ge  the column
 paths gives the number of sets to hit in the respective stage  tss and ths
denote cpu time for the set system construction and the hitting set computation
respectively 

extraction but transform vertex sets to ch paths for more efficient storage  we proceed
iteratively until reaching b    b and the final hitting set l    l  it is intuitive to demand
that the gap between b  and b  should be large to make sure that the last hitting set
instance still faithfully characterizes the original hitting set instance  table   shows the
results for various choices of multi stage parameters  in table   we give a more detailed
account on the intermediate calculations for the large ge graph  the experiments confirm
that the larger the gap between b  and b  is  the better the quality of the final hitting
set  this comes at the cost of an expensive last stage  though  in contrast to the other
experiments  the first two calculations in table   have been conducted without an initial
k hop cover  the results obtained on tu and sg suggest that an initial k hop cover
accelerates the calculation while maintaining a similar hitting set size  furthermore  all
the apx values remain low even though the lower bounds were obtained in a naive way 
note that for example for the graph of germany  the a priori approximation guarantee of
the plain greedy algorithm  which is not feasible due to excessive running time and space
consumption  is   ln n        this proves the excellent quality of the hitting sets for the
particular instances  table   shows that introducing multiple stages keeps the intermediate
set systems rather compact  so efficient computation is actually possible 

    conclusions and future work
we showed how to model and solve a natural and important facility location problem in
the e mobility context  taking a radically different approach than previous ones avoiding
detours to loading stations for evs 
   

fiplacement of loading stations for electric vehicles

while a naive strategy only allows for the solution of small instances of few hundred
thousand nodes  our compact representation schemes for the underlying set systems and
heuristic modifications of the standard greedy approach make the computation of a solution
even for country sized networks like that of germany possible  instance based lower bounds
certify that the solution quality is close to optimal  within a factor of    and far from the
pessimistic theoretically achievable approximation bound  in fact it is remarkable that after
all  it was possible to compute a   approximate solution to a seemingly intractable hitting
set problem within a few hours on a quadcore desktop pc  our computation determined
around     locations where placing blss would establish complete coverage for germany 
our framework does not require the metric that decides which shortest paths have to
be hit to be identical with the metric that determines which paths are shortest  in fact this
was factored out using our  function  which  depending on the application scenario  can
also be used to implement other hitting criteria  e g  hop distances or risk values  
in future work we intend to examine how the exact hitting requirement can be relaxed 
naturally  it is not necessary that there is always a bls right on the respective shortest
path  but a nearby one suffices  this could be modeled by enlarging the vertex sets of
the respective shortest paths by surrounding vertices  hitting set sizes for this variant are
expected to be considerably smaller than for hitting all shortest paths directly  another
direction of research is to take into account capacity constraints of the blss  lam et al  
       in particular in urban areas it is certainly necessary to provide recharging stations
for a very large number of vehicles 

references
abraham  i   delling  d   goldberg  a  v     werneck  r  f          hierarchical hub
labelings for shortest paths  in european symposium on algorithms  esa   pp    
    springer 
artmeier  a   haselmayr  j   leucker  m     sachenbacher  m          the shortest path
problem revisited  optimal routing for electric vehicles  in german conference on
artificial intelligence  ki   pp         
arz  j   luxen  d     sanders  p          transit node routing reconsidered  in international
symposium on experimental algorithms  sea   pp        springer 
bast  h   funke  s     matijevic  d          ultrafast shortest path queries via transit
nodes  in the shortest path problem    th dimacs implemenation challenge  vol    
of dimacs series on discrete mathematics and theoretical computer science  pp 
        providence  ri  ams 
berg  m  d   cheong  o   kreveld  m  v     overmars  m          computational geometry 
algorithms and applications   rd ed  edition   springer verlag telos  santa clara 
ca  usa 
chvatal  v          a greedy heuristic for the set covering problem  math  of oper  res  
              
   

fifunke  nusser    storandt

delling  d   goldberg  a  v   nowatzyk  a     werneck  r  f  f          phast  hardwareaccelerated shortest path trees  in international parallel and distributed processing
symposium  ipdps   pp         
dinur  i     safra  s          on the hardness of approximating minimum vertex cover 
annals of mathematics            
eisner  j     funke  s          transit nodes   lower bounds and refined construction  in
algorithm engineering and experiments  alenex  
funke  s   nusser  a     storandt  s       a   on k path covers and their applications  in
international conference on very large databases  vldb  
funke  s   nusser  a     storandt  s       b   placement of loading stations for electric
vehicles  no detours necessary   in aaai conference on artificial intelligence 
geisberger  r   sanders  p   schultes  d     delling  d          contraction hierarchies 
faster and simpler hierarchical routing in road networks  in international workshop
on experimental algorithms  wea   pp          springer 
lam  a   leung  y  w     chu  x          electric vehicle charging station placement 
in international conference on smart grid communications  smartgridcomm   pp 
       
nasa         shuttle radar topography mission  online  http   www  jpl nasa gov srtm 
osm         the openstreetmap project  online  http   www openstreetmap org 
storandt  s     funke  s          enabling e mobility  facility location for battery loading
stations  in conference on artificial intelligence  aaai  

   

fi