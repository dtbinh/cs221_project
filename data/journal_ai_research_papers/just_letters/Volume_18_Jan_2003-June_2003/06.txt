journal of artificial intelligence research                  

submitted       published     

interactive execution monitoring of agent teams
david e  wilkins
thomas j  lee
pauline berry

wilkins   ai   sri   com
tomlee   ai   sri   com
berry   ai   sri   com

artificial intelligence center  sri international
    ravenswood ave   menlo park  ca       usa

abstract
there is an increasing need for automated support for humans monitoring the activity of
distributed teams of cooperating agents  both human and machine  we characterize the domainindependent challenges posed by this problem  and describe how properties of domains influence
the challenges and their solutions  we will concentrate on dynamic  data rich domains where humans are ultimately responsible for team behavior  thus  the automated aid should interactively
support effective and timely decision making by the human  we present a domain independent
categorization of the types of alerts a plan based monitoring system might issue to a user  where
each type generally requires different monitoring techniques  we describe a monitoring framework
for integrating many domain specific and task specific monitoring techniques and then using the
concept of value of an alert to avoid operator overload 
we use this framework to describe an execution monitoring approach we have used to implement execution assistants  eas  in two different dynamic  data rich  real world domains to assist
a human in monitoring team behavior  one domain  army small unit operations  has hundreds
of mobile  geographically distributed agents  a combination of humans  robots  and vehicles  the
other domain  teams of unmanned ground and air vehicles  has a handful of cooperating robots 
both domains involve unpredictable adversaries in the vicinity  our approach customizes monitoring behavior for each specific task  plan  and situation  as well as for user preferences  our
eas alert the human controller when reported events threaten plan execution or physically threaten
team members  alerts were generated in a timely manner without inundating the user with too
many alerts  less than     of alerts are unwanted  as judged by domain experts  

   introduction
as automation and reliable  high bandwidth communication networks become more common  humans are increasingly responsible for monitoring and controlling the activity of distributed teams of
cooperating agents  both human and machine  such control decisions in many realistic domains are
complex  and require human experience and judgment  our vision is that human decision makers
will be able to perform more important tasks than continuously monitoring incoming information
by relying on an automated execution aid to alert them when significant new information warrants
their attention  we are primarily interested in domains requiring human control and will describe
two such domains  however  the majority of our techniques and analysis also apply to completely
automated execution monitoring  in fact  in one of our domains we both interact with a human
controller and autonomously adjust robot behavior and plans 
to rapidly make effective control decisions for distributed agent teams  the human needs automated support  for several reasons  first  inexpensive sensors and reliable  high bandwidth communication networks provide large volumes of pertinent data arriving from sensors  team members 

c
    
ai access foundation and morgan kaufmann publishers  all rights reserved 

fiw ilkins   l ee     b erry

and other sources  without automated support  the human cannot cope with the volume of incoming
information  second  plans that coordinate the activity of several team members  as many as several
hundred in our first domain  can become too complex to monitor without automated help  third  we
are addressing domains that are dynamic  sometimes requiring responses in a few seconds or less 
fourth  the automated team members  robots  are complex  with different failure modes and recovery procedures  and automated support for controlling them is often essential  all these challenges
are magnified as the tempo of the decision cycle increases or the user becomes stressed  thus 
domains with the above properties require an interactive  automated assistant to support humans in
monitoring incoming information and controlling agent teams 
we will concentrate on dynamic  data rich domains where humans are ultimately responsible
for team behavior  realistic domains often have adversaries to overcome  these may range from
fairly benign forces of nature that introduce uncertainty  to intelligent adversaries that are trying to
actively thwart plans  an automated execution assistant should interactively support effective and
timely decision making by the human  and interact with the human to take advantage of knowledge
the human possesses that is not explicitly modeled in the machine  ideally  an execution assistant
would allow its human user to  among other things 
 guide the system with minimal effort
 focus on external events  assuming the system will alert the user when human attention is
desirable
 understand  evaluate  and modify the plans actions
 understand why and why not for each action or decision taken recommended rejected by the
system
 have constant multimodal feedback
 recommend actions and decisions that violate constraints when warranted
one key idea is that rich plan representations allow the execution aid to share context with users 
so both understand the semantics of plans and requests  understanding the plan is the key to helping
the user deal with the possible information glut created by advanced information systems  the
execution aid uses the plan to filter  interpret  and react to the large volume of incoming information 
and can alert the user appropriately when events threaten the plan or the users physical existence 
once the user develops trust in the execution aid  there will be a reduction of the need for human
monitoring of the display of the information system  while simultaneously increasing the amount
of relevant information monitored because the aid analyzes every piece of incoming data  relying
on alerts from an automated aid allows the human to pay attention to more important tasks than
monitoring incoming data  attending to the display only when alerted by the execution aid 
in the next section  we characterize the domain independent challenges posed by this problem 
concentrating those that are unique to interactive execution aids in dynamic domains with distributed
teams of cooperating agents  then  we describe how properties of various domains influence these
challenges and their solutions  in section    we present a domain independent categorization of the
types of alerts a plan based monitoring system might issue to a user  next  we describe the concept
of value of information and alerts that is key to reducing unwanted alerts  alarms   sections  
   

fii nteractive e xecution m onitoring of agent t eams

and   describe the execution assistants we implemented in the small unit operations and robotics
domains  respectively  sections     and     contain the results of evaluations performed in each
domain  finally  we discuss related work and present our conclusions 

   interactive monitoring challenges
there has been great interest in plan generation algorithms  but less work on using plans to dynamically control execution  much execution monitoring work describes monitors in specific domains 
so we first characterize the domain independent challenges of monitoring agent teams 
there are several universal challenges of execution monitoring that are not particular to dynamic  data rich domains or interactive monitoring  these issues should be part of a monitoring
ontology and are addressed in our eas  but we do not stress them in our discussion as they are
discussed elsewhere  kaminka  pynadath    tambe        jonsson  morris  muscettola    rajan 
      muscettola  nayak  pell    williams        myers        wilkins  myers  lowrance   
wesley        coiera        durfee  huber  kurnow    lee         the issues include the following 
 sensitivity of the monitor  its ability to detect problems or meet requirements  the system
must remain reactive to incoming data while performing monitoring tasks 
 temporal reasoning and temporal sensitivity  execution takes place over time and plans specify future actions  thus making temporal reasoning central 
 concurrent temporal processes  multiple tasks or agents may be executing concurrently 
 synchronization between agents  an execution assistant must get the right information to the
right team members at the right time to support the cooperative activity specified in the plan 
in some domains  this may require doing plan recognition on other team members  kaminka
et al         
 false and redundant alarms  unwanted alarms are ubiquitous in data rich domains such as
medicine  koski  makivirta  sukuvaara    kari        tsien        and the domains described in this paper 
 combining event driven and goal driven behavior  the execution assistant must respond to
unfolding events with acceptable latency while concurrently invoking actions that will continue execution of the  perhaps modified  plan and satisfy user requests  goal driven tasks
include responses to events  such as generating modified  new  or contingency plans  and
invoking standard operating procedures 
 adversarial reasoning  including plan and pattern recognition  many real world domains have
adversaries and their activity must be closely monitored 
we are concerned with execution monitoring of agent teams  where team members may be
any combination of humans and or machines  we concentrate on the challenges that are unique to
interactive execution aids in dynamic domains  and categorize these challenges into the following
four categories 
adaptivity  the output of an execution assistant must meet human requirements and preferences for monitoring behavior  providing high value alerts and suggestions  as in all execution
   

fiw ilkins   l ee     b erry

monitoring  sensitivity is crucial  but in interactive monitoring the sensitivity of the monitor must
also be adaptable  in addition to adapting to user preferences  the analysis done by an execution
assistant and its level of autonomy must be adjustable to operational tempo and incoming data rate 
the system should ideally adapt its output to the users capabilities and cognitive load 
plan and situation specific monitoring  coordinating the activities of many teams members
requires a plan shared by the team  we will assume that plans contain partial orders of tasks for
each team member  as well as any necessary coordinating instructions and commitments  grosz  
kraus         the plan representation also encodes some of the expected outcomes  effects  of plan
execution  so that execution aids can detect deviations  the analysis done by an execution assistant
and any suggested responses must depend on the plan and situation to be effective  because events
often cause a problem for some plans but not for others  we found that monitoring algorithms
must often be tailored to the specific tasks that compose plans  to facilitate interaction  the plan
representations must be understandable by both humans and the system  although the human might
be aided by multiple plan views of the internal representation in a user friendly interface 
reactivity  any execution monitor must react to events and uncertainty introduced by the environment  in dynamic  data rich domains  particular care must be taken to ensure that the system
remains reactive with high rates of incoming information and fast decision cycles  resources are
not generally available to perform all desired analyses for every input  for example  projecting
future problems with multiple simulation runs or searching for better plans may be computationally
expensive  there are often no obvious boundaries to the types of support an execution aid might
provide in a real world domain  therefore  a balance must be struck between the capabilities provided and resources used  a few examples show the types of issues that arise in practice  in our
first domain  only coarse terrain reasoning was used  as projections using fine grained terrain data
were computationally expensive  in our robot domain  we had to adjust the time quanta assigned
to processes by the scheduler so that our monitoring processes were executed at least every second  finally  in domains with dangerous or intelligent adversaries  reacting to their detected activity
becomes a high priority  there has been considerable research on guaranteeing real time response
 ash  gold  seiver    hayes roth        mouaddib   zilberstein         but the tradeoffs are generally different in every application and are usually a critical aspect of the design of an execution
assistant 
high value  user appropriate alerts  alerting on every occurrence of a monitored condition
that is possibly a problem is relatively easy  however  the user would quickly ignore any assistant
that gave so many alerts  the challenge is to not give false alarms and to not inundate the user with
unwanted or redundant alerts  the system must estimate the utility of information and alerts to the
user  give only high value alerts  and present the alerts in a manner appropriate to their value and the
users cognitive state  we found that a common challenge is to avoid cascading alerts as events get
progressively further away from expectations along any of a number of dimensions  such as time 
space  and resource availability   another challenge that we will not discuss in depth is aggregating
lower level data  e g   sensor fusion   which can reduce the number of alerts by consolidating inputs 
estimates of the value of alerts can be used to adjust alerting behavior to the users cognitive load 
interactive alerting during execution naturally leads to the equally important and challenging
topic of human directing of responses and plan modifications  our monitoring technologies have
been used in continuous planning frameworks  wilkins et al         myers         but we will limit
the scope of this paper to interactive alerting  we briefly mention some ongoing research on this
topic that we either are using or plan to use in conjunction with our execution aids 
   

fii nteractive e xecution m onitoring of agent t eams

agent systems that interact with humans are an active area of research  and the issues are discussed in the literature  myers   morley        ferguson   allen        schreckenghost   et al  
       myers and morley         for example  describe the taskable reactive agent communities
 trac  framework that supports human supervisors in directing agent teams  they address topics
such as adjustable agent autonomy  permission requirements  consultation requirements  and the
ability to communicate strategy preferences as guidance  trac is complementary to the execution
monitoring described in this paper 
another active research area that fits naturally with our execution monitoring approach is theories of collaboration  in fact  we use the sharedplans theory of collaboration  grosz   kraus       
in our second domain  ortiz   hsu        to direct agents in conjunction with the execution monitor  this theory models the elements of working together in a team as well as the levels of partial
information associated with states of an evolving shared plan  central to the theory of sharedplans
is the notion that agents should be committed to providing helpful support to team members  within
the theory  this notion of helpful behavior has been formally defined  ortiz         the work on
collaboration is complimentary with our monitoring approach  but will not be discussed in detail 

   monitoring approach determined by domain features
the domain features and monitoring challenges with which we are concerned are common in many
domains in addition to robot teams and small unit operations  suo   for example  they occur in
the monitoring of spacecraft  bonasso  kortenkamp    whitney        muscettola et al         and
monitoring in medicine  coiera        for icu patients or for anesthesia  these domains are also
data rich  medical clinicians have difficulty in using the vast amount of information that can
be presented to them on current monitoring systems  weigner   englund        coiera        
in particular  the problem of flooding human users with false or redundant alarms is ubiquitous in
medical monitoring  koski et al         tsien         one study found that     of alarms in a
pediatric icu were false alarms  tsien   fackler         false alarms distract humans from more
important tasks  such a false alarm rate would most likely make the monitor useless in fast paced
operations  research in these domains has concentrated on automated monitoring  with little or no
emphasis on interactive monitoring 
while the challenges described in the previous section apply to all interactive  dynamic domains  the properties of individual domains influence their solutions  one brief case study shows
how the features of the communication system and the use of legacy agents can indicate a different
monitoring approach for two similar problems  kaminka et al         address a problem similar to ours  many geographically distributed team members with a coordinating plan in a dynamic
environment  they use an approach based on applying plan recognition techniques to the observable actions of team members  rather than communicating state information among team members 
which they refer to as report based monitoring 
they list four problems with report based monitoring  kaminka et al              intrusive modifications are required to legacy agents to report state      the necessary state information changes
with the monitoring task      the monitored agents and the communication lines have heavy computational and bandwidth burdens  and     it assumes completely reliable and secure communication
between the team members  they say that     is their main concern  with     being next most
important 

   

fiw ilkins   l ee     b erry

plan constraint violated
policy constraint violated
new opportunity detected
adversarial activity detected
constraint violation  opportunity  or adversarial activity projected
contingency plan suggested
system problem detected
reporting requirement triggered
figure    top level categories in alert ontology 

in both of our domains  we use report based monitoring  our agents already report their state or
can easily be modified to do so  for example  by attaching global positioning  gps  devices  our
monitoring tasks can be performed using the reports already available  although one can imagine
adding further functionality that would change the reporting requirements  in our first domain 
reports are distributed by the situation awareness and information management  saim  system
on a high bandwidth network  saim uses novel peer to peer  p p  dissemination algorithms and
forward fusion of sensor reports  greatly reducing bandwidth requirements  p p is fault tolerant 
allowing any node to be a server  dissemination is based on an agents current task  geographic
location  and relationship in the hierarchical organization of team members 
in summary  report based monitoring works in our domains because we rely less on unmodifiable legacy agents  have more reliable communications  and have enough bandwidth available with
our network and dissemination algorithms  kaminkas approach provides more automated support 
but we must address the problem of modeling the value of information to the user  if kaminkas
system was extended to interact with humans  we believe our alert ontology and techniques for
avoiding operator overload would be applicable  whether alerts come from sources based on planrecognition or from reports  because we rely on humans as being ultimately responsible for team
behavior  we do not require as much state information nor complete reliability in communication 
unreliable communication will degrade monitoring performance  but the human decision maker
must take missing inputs into account when making a decision  the execution assistant can monitor
communications and alert the human to possible communications problems 

   types of alerts
alerts are used to focus the users attention on an aspect of the situation that the execution aid has
determined to be of high value  we discuss the problem of determining the value of information
and alerts in later sections  which determines whether and how an alert is presented  an alert may
indicate that a response is required  or may just be informative  many different types of alerts can
be given  and it is useful to categorize alerts  thus providing the beginning of a reusable  domainindependent ontology for execution monitoring 
figure   shows the top level categories for alerts that we identified by starting with a superset of the categories we found useful in our two domains and then generalizing them to cover a
broad range of domains  it is assumed that execution is directed by a plan that is shared by the
team  these categories generally require different monitoring techniques and different responses to
   

fii nteractive e xecution m onitoring of agent t eams

detected problems  for example  adversarial activity could have been a subclass of other relevant
classes  but it requires different monitoring techniques  the friendly location data is precise  within
the error of gps  and trustworthy  while adversarial data comes from fusion engines running on
data from sensor networks  the adversarial data is highly uncertain  may come at significantly different rates  and generally will have different algorithms for determining the value of information 
as adversarial entities are actively trying to thwart your plan and perhaps are trying to kill you 
the top level categories in our ontology generally differ along the following dimensions that
are important to monitoring 
 properties of data sources  such as reliability and uncertainty  
 rates of incoming data
 method of acquiring data  such as receiving messages  pulling data from databases  doing
plan recognition 
 monitoring algorithms  including tradeoff of complexity of analysis with reactivity
 desired responses to alerts
 value of information algorithms
the different monitoring techniques for each category are often domain specific  and can even
be task specific in some cases  adapting the monitoring as tasks in the plan are executed  our
monitoring framework integrates these various techniques and then uses the concept of value of an
alert to control interaction with the user 
we briefly discuss each of the top level categories  we have not provided the next lower level
of the ontology because the space of possibilities is large  with domain specific concerns important 
for example  adversarial alerts could include subclasses for fixed or mobile adversaries  for size
and capabilities of the adversarial team  for an alliance or tightly coordinated adversarial team  for
adversarial intent or plan  and so forth  later in the paper  we describe how alerts given by our
implemented execution assistants  eas  fit into these categories 
plan constraints  plans provide most of the expectations of how execution should proceed  so
this category has the richest set of alerts  a fairly large hierarchical ontology could be produced
to describe different types of alerts on plan constraints  gil and blythe        present a domainindependent ontology for representing plans and plan evaluations  each concept in their evaluation
ontology could be a source of an alert when the evaluation becomes sufficiently important to the
user  plans in real world domains are often hierarchical  so constraints from different levels or
layers may be violated  it may be desirable to customize alerts based on the hierarchical level of the
plan constraint in question  to indicate the range of possible alerts in this category  we list a few
common examples 
 a coordinating team member  or the agent  is out of position or late 
 the effects of the agents  or a team members  actions were not achieved as expected 
 a team member has retracted a commitment to perform a certain task  requiring a reallocation
of tasks or resources 
   

fiw ilkins   l ee     b erry

 conditions required by the plan are not true when expected 
 resources used by the plan are not available or degraded 
policy constraints  most real world domains have persistent constraints such as policies or
rules of engagement that must not be violated  while these could be considered as part of the
plan by representing them as maintenance conditions that extend over the entire plan  they are
significantly different in practice and are often monitored by different techniques  because they may
require additional domain knowledge or specialized monitoring algorithms  which must be invoked
efficiently  for example  in our domains  we never want our human team members to be killed or
our robots destroyed  therefore  we monitor the physical safety of our agents at all times and give
alerts to the user when some agent is in danger  dangers from adversarial agents are covered in
their own category  however  the system should also alert the user to threats from team members
 fratricide  and from the local agents own actions  e g   a robots battery running low  
new opportunities  even though the current plan can still be executed without change  it may
be possible to generate a better plan for the current situation as new opportunities arise  determining
if an execution time update to the world state permits a more desirable plan is a difficult problem
in general  similar to generating a new plan for the new situation  however  in real world domains 
there are often methods for detecting new opportunities that indicate a plan revision might be cost
effective  for example  certain key features  such as pop up targets in military domains  can
represent new opportunities  and there are often encoded standard operating procedures  sops 
that can be invoked when triggered by the current situation to improve the plan and or react to
events  because our monitoring is interactive  we can avoid the difficult decision of whether to
search for a better plan by alerting the user of high value opportunities and relying on the user to
judge the best response 
adversarial activity  this category assumes that our team members are operating in environments with adversaries that are trying to actively thwart team plans  when adversaries are dangerous
 e g   worthy human opponents   reacting to their detected activity becomes a top priority and  in
our experience  merits customized monitoring algorithms  recognizing immediate threats to a team
members physical existence or to the accomplishment of the plan is obviously important  in addition  information that allows the human to discern patterns or recognize the opponents plan or
intent is valuable  our eas recognize physical threats and adversarial activity not expected by the
plan  but do not currently perform automated plan or intent recognition on data about adversaries 
both automated plan recognition  kaminka et al         and inference of adversarial intent  franke 
brown  bell    mendenhall        bell  jr     brown        are active areas of research  if algorithms are developed that reliably recognize adversarial plans or intent while using acceptable
computational resources  they could easily be invoked within our monitoring framework 
projections  even though the current plan can still be executed without change for the time
being  it may be possible to predict that a future failure of plan or global constraints will occur  with
varying degrees of certainty  for example  suppose the plan requires a robot to move to location x
by time t  but the robot is getting progressively more behind schedule or more off course  at some
point before t  the system can predict with acceptable certainty that this location constraint will be
violated and alert the user  who may revise the plan  in addition  new opportunities and probable
adversarial activity could be projected  projection simulation algorithms can be computationally
expensive  so the execution monitor must adjust its calculation of projections to match available
resources and constraints 
   

fii nteractive e xecution m onitoring of agent t eams

contingency plans  the plan may specify contingency plans or subplans  which are to be
invoked when certain  specified conditions arise  the execution monitor should monitor these conditions and alert the user when a contingency plan has been triggered  the system can also notify
all team members automatically if the user decides to switch execution to a contingency plan  another desirable alert in some domains might be a suggestion by the system that new contingency
plans should be generated for certain situations as events unfold in an unexpected manner  our eas
monitor the triggering of contingencies but do not suggest their generation 
system problems  depending on the domain  the user may want to be alerted of problems with
incoming data streams or in the functioning of the execution assistant itself  for example  if no data
is arriving from the sensors  or over the network from other team members  this may be crucial to
helping the user interpret the situation and system alerts 
reporting requirements  one of our basic assumptions is that the human user has experience
and knowledge that are not modeled within the system  therefore  the system cannot always recognize how a new piece of information will affect plan execution  some information that does not
trigger the above alerts might still be valuable to the user  the system is given reporting requirements that allow it to recognize such information  one generally useful reporting requirement would
be execution status  so the user can quickly determine that execution is proceeding as planned  reporting requirements may take any number of forms  as appropriate to the domain  the comments
about recognizing new opportunities apply here  domains might specify requirements as sops 
key features  declarative statements  or heuristic algorithms  several things fall under this category 
such as information that reduces uncertainty and or indicates that the plan is executing as expected 
as another example  a robot might be told to immediately report any murder or fire it witnesses
while executing its planned tasks 

   value of information and alerts
algorithms that alert on constraint violations and threats in a straightforward manner inundate the
user in dynamic domains  unwanted alerts were a problem in both our domains and in many other
domains as well  such as medical monitoring  koski et al          an aid that gives alerts every
second will quickly be discarded by the user in stressful situations  if not immediately   to be useful 
an execution aid must produce high value  user appropriate alerts  alerts and their presentation may
also have to be adjusted to the situation  including the users cognitive state  or the computational
state of a software agent   for example  in high stress situations  tolerances could be increased
or certain types of alerts might be ignored or postponed  in this section  we provide a conceptual
framework for the alerting algorithms in our monitoring framework and our domain specific eas 
our approach is grounded in the concept of determining the value of an alert  first  the system
must estimate the value of new information to the user  information theory derives from communication theory and the work by shannon         in this theory  the value of information refers to
the reduction in uncertainty resulting from the receipt of a message  and not to the meaning that
the message  or the uncertainty reduction  has to the receiver  weinberger         we use the term
value of information  voi  in a different sense  namely  the pragmatic import the information has
relative to its receiver   of course  the reduction of uncertainty often has pragmatic import   like
weinberger         we assume that the practical value of information derives from its usefulness in
making informed decisions 

   

fiw ilkins   l ee     b erry

however  alerting the user to all valuable information could have a negative impact in certain
situations  such as when the alert distracts the user from more important tasks  or when too many
alerts overwhelm the user  we therefore introduce the concept of value of an alert  voa   which
is the pragmatic import  for making informed decisions  of taking an action to focus the users
attention on a piece of information  voa takes voi into account but weighs it against the costs and
benefits of interrupting the user  if the user is busy doing something significantly more important 
then issuing an alert might not be valuable  even when voi is high  voa must generally estimate
the users cognitive state and current activities  voa will generally determine the modality and
other qualities of alert presentation  e g   whether one should flash red text on a computer display or
issue a loud audible warning  
voi and voa are highly correlated in most situations  and most general comments about voi
apply to voa as well  however  voa may be low while voi is high if the user is highly stressed
or preoccupied with more important tasks  it is also possible to have a high voa and low voi 
for example  mission specific monitors might alert the user to information that has been known for
some time  and thus has little or no value as information  because the information is crucial to an
upcoming decision and the user may have forgotten it  or may be behaving in a way that indicates a
lack of awareness 
weinberger gives a quantitative definition of pragmatic information  assuming a finite set of
alternatives that lead to well defined outcomes  each of which has some value to the decision maker 
in realistic domains like ours  alternatives and outcomes are not precisely defined  furthermore 
information and decision theories  including weinbergers  assume that the decision maker is aware
of  or has processed  previous information and can devote sufficient resources to analyzing the
current information  under such assumptions of unlimited processing power  voa and voi are the
same  in most realistic domains  these assumptions do not hold  humans are resource bounded and 
during fast paced operations  alerts and information may be ignored and the user may not realize
the implications of information on a complex plan that coordinates many team members 
    estimating voi and voa
in interactive  dynamic  real world domains like suo  we cannot model all alternatives  their payoffs  nor all the other knowledge and probabilities required with enough precision to compute the
theoretical voi and voa  much knowledge about voi resides only with human experts  and
even they might have different preferences or opinions about voi  for example  in the suo domain  the user might be concerned about the public relations effects of how the plan execution is
reported in the international media  it is precisely because humans have knowledge not modeled
in the system that we want our execution assistants to be interactive  in such realistic domains 
there are generally no obvious boundaries to the types of support the system should provide  and
no precisely defined evaluation functions or payoff matrixes  thus  weinbergers theory and formal
techniques for computing the value of information  athey   levin        cannot be applied  horty
and pollack        develop some of the foundations for a theory of rational choice that involves
estimating the cost of decisions in the context of plans  their approach comes closer to addressing
our concerns  however  determining costs and utilities of actions will continue to require human
judgment in many domains  especially if human lives are being put at risk 
therefore  we developed algorithms that heuristically estimate voi using domain knowledge 
although quantitative voi functions can easily be used in our framework  the inputs to our al 

   

fii nteractive e xecution m onitoring of agent t eams

gorithms are described in section      these domain specific algorithms are  and must be  easily
customized and tuned for user preferences  as well as the situation  they are invoked in domainindependent ways for a variety of purposes by the monitoring framework  and were developed with
feedback from domain experts  we believe it is feasible to use machine learning techniques to
replace or supplement hand coded heuristics for voi voa estimation and or the user preferences
which affect it  but this was not explored 
voi and voa are computed qualitatively in our domains  using several domain specific quantitative measures in the qualitative reasoning process  issuing an alert is a discrete event  and generally
there are a small number of options for presenting an alert  therefore  estimating voa is primarily a problem of categorizing the potential alert into a small number of alert presentation types or
modalities  we need to determine when the voa crosses thresholds  defined by the voi voa
specification  indicating  for example  that it is valuable to issue an alert  or that the alert should be
issued as high priority  in our framework  the thresholds are customizable by the user and can be
mission specific  so they can change automatically as different missions in the plan are executed 
the voi algorithms also determine what information to include in an alert 
different alert presentations are handled by assigning a qualitative priority to each alert  for example  our suo ea divides alerts by voa into four equivalence classes for levels of priority  which
were already defined in the suo domain  each priority is presented differently to the user  from
using different modalities to simply using different colors or sizes of text or graphics  currently  we
use three priority levels in the robotics domain  but may add more in the future as collaborating team
members make more use of the ea  these priority levels can be used to adjust alerting behavior to
the users cognitive load  for example  during fast paced operations  only the highest priority alerts
could be presented 
there are several reasons for preferring qualitative reasoning  and we draw on forbuss work in
describing the advantages  donlon   forbus        forbus         qualitative models fit perfectly
with making decisions  which are discrete events  and effectively divide continuous properties at
their important transitions  thus  changes in qualitative value generally indicate important changes
in the underlying situation  qualitative models also facilitate communication because they are built
on the reasoning of human experts and thus are similar to peoples understanding  for example 
the priority levels used in our voa algorithms have long been named and defined in the military 
qualitative reasoning is important as a framework for integrating the results of various qualitative
computations in a way humans can understand  finally  the precision of quantitative models can
be a serious weakness if the underlying models do not accurately reflect the real world situation 
precise data can lead to precise but incorrect results in a low accuracy model  and the precise results
can lead to a false sense of security 
these advantages of qualitative reasoning are apparent in both common sense and military reasoning  common sense reasoning about continuous quantities is often done qualitatively  the
continuous value is of interest only when a different action or decision is required  for example 
you can ignore your fuel gauge when driving once you have decided whether or not you must refuel before reaching your destination  in addition to the priorities already mentioned  the military
quantizes many continuous properties used to describe terrain in ways that are relevant to military
operations  creating phase lines  decision points  named areas of interest  key terrain avenues of
approach  and so forth  the suo ea incorporates these quantizations to reason about terrains influence on voi and voa and to effectively communicate information in alerts  just as the military
has used them for years to facilitate communication  collaboration  and decision making 
   

fiw ilkins   l ee     b erry

    properties of voi and voa
voi and voa in our dynamic domain depends primarily on whether the information will influence
decisions responses  the execution aid must also ensure human awareness of high value data to
support decisions only the human user can make  thus  the system must estimate or model what the
human needs to know  e g   by specifying reporting requirements   even if the system cannot predict
how the information might influence a decision  for example  an emerging adversarial or friendly
pattern might be crucial  if the system does not have a human level ability to recognize plans and
patterns  then it should ensure the human decision maker is aware of the relevant data 
one obvious but important property of voi is that it is zero if the user is already aware of
the information  another property is that information indicating that plan execution is proceeding
according to plan can be valuable  because it influences the decision to continue as planned  the
value of such confirming information depends on the features of the domain  such information
will be more valuable in domains with high uncertainty and active adversaries 
another feature that may be useful in certain domains is classifying the responses suggested
by a piece of information or an alert  for example  any new report may require a significant plan
modification  a minor plan modification  the invocation of a contingency plan  the application of a
standard operating procedure  sop   or the identification of a new opportunity  however  the type of
response does not necessarily correlate with voi  as a minor plan modification might be life saving 
while a major modification might simply reduce resource usage by ten percent  the distinction is
important because the simpler responses can more likely be handled in an automated fashion  thus
reducing the need to involve the user 
determining what information to present in an alert requires addressing human factors  initially 
it is important to present an alert concisely so the human can determine its import at a glance 
and assess whether to divert his or her attention from other tasks  in our eas  the user can drill
down for more detailed information on any alert in order to assess the situation more accurately 
finally  some domains may have concerns other than making informed decisions  for example  the
emotional state of the user or recording data of scientific value might be beneficial  in particular 
if the concern is analyzing or debugging system performance rather than making good execution
decisions  a different voi estimator can be used to provide alerts about system behavior 
    voi and voa criteria
as described above  the voi and voa algorithms will generally be heuristic  domain specific  and
user customizable  here we identify most of the inputs that will be applicable to most interactive 
dynamic domains  we started with a superset of the voi criteria we found useful in our two domains
and then generalized them to be domain independent   the properties of the user listed below are
estimates from system models of the user  as the users mental state is not accessible  
 the plan
 policies
 users awareness of current situation
 systems view of current situation
 users cognitive load
   

fii nteractive e xecution m onitoring of agent t eams

 resources  especially time  available for analysis or response
 information about adversarial agents
 characterization of uncertainty
 age of information and age of users awareness
 source of information
the plan provides several voi criteria  the plan may provide explicit and implicit decision
points  high value places  times  team members  and so forth  the value of a task  constraint 
adversarial action  or team member is often determined by the plan structure and plan annotations 
the tasks in the plan can invoke task specific voi algorithms within our monitoring framework 
as described in section    domain policies  or specialized reasoners that implement them  and
reporting requirements should provide the knowledge necessary to determine the value of alerts
about various types of constraint violations and reports  for example  in our domains  we monitor
the physical safety of our agents  alerts on life threatening situations have the highest priority 
we noted that voi tends to zero to the extent the user is already aware of the information  thus 
determining voi must access the current view of the situation to determine if arriving reports offer
new information or simply confirm the existing view  in data rich domains  we assume that the
execution aid may have a more detailed description of the situation than the user  for the aspects of
the situation that are described by incoming data   because the user may be performing other tasks
and monitoring the situation only when he is alerted by the ea  therefore  the value of alerting
the user will depend on how much the new information differs from the users last situation update 
even if the system has more recent data that differs only slightly from the new information 
ideally  we would like to model the users cognitive load  and give lower values to noncritical
alerts when the user is consumed with addressing more critical aspects of the situation  similarly 
we do not want to overload the systems computational resources or ability to remain reactive  so
the value of certain information may depend on the time or resources available to analyze it 
when determining the value of information about adversaries  it is often useful to compare
developing patterns to any information about the adversarys plans or tendencies  which could be
obtained from human intelligence analysts or generated by plan recognition or pattern matching
algorithms  as mentioned above  information that reduces uncertainty is valuable in domains with
high uncertainty and active adversaries  voi can be estimated if we have a characterization of the
uncertainty present in our current view of the situation 
the age of information is also a factor in voi  outdated reports may have zero value if newer
information has already arrived  when modeling the users awareness  elapsed time is a factor  the
user will be aware of alerts issued in the last few minutes  but may no longer be aware of something
that was brought to her attention yesterday or last week  thus  the value of a proposed new alert
may increase with elapsed time since a similar alert was issued 
when a variety of sources of information exists  the source is a factor in voi  often  different
information sources have inherently different levels of certainty  authority  or importance  for example  the suo ea accepts reports from both human observers and automated sensors  an ea
with such inputs might want to weigh human observations differently depending on the human and
the situation  in later sections on our implemented eas  we describe our domain specific voi voa
algorithms  which have inputs corresponding to the inputs listed above 
   

fiw ilkins   l ee     b erry

   implementing execution monitors  small unit operations
we have developed an execution monitoring framework that can easily be adapted to produce interactive monitors for agent teams in dynamic domains  to support this claim  we describe two
dynamic  data rich  real world domains and the execution assistants  eas  we have implemented
using our framework  our first domain  army small unit operations  suo   has hundreds of mobile 
geographically distributed agents  which are a combination of humans  robots  and vehicles  the
other domain  uv robotics  ortiz  agno  berry    vincent         is described in section   and
has teams composed of a handful of cooperating  unmanned ground and air vehicles  ugvs and
uavs  and a human controller  both domains involve unpredictable adversaries in the vicinity of
the team members 
we originally developed our monitoring framework for the suo domain using several personmonths of effort  although the majority of the effort was in knowledge acquisition and modeling 
the suo monitoring framework  described below  was designed to be modular and to support the
easy insertion of domain specific  and user customized  system components  such as task models 
monitoring algorithms  and value of information estimators  our design was validated when we
implemented a complex execution monitor in the uv robotics domain in about one person week
 as described in section       the uv ea uses the same plan representation and basic architecture
as the suo ea  but the inputs are different as are the tasks and the monitoring algorithms that
respond to the inputs and generate alerts 
the majority of our framework also applies to completely automated execution monitoring as
demonstrated by the uv ea  a uv ea runs on each robot in the team and is used to autonomously
adjust the robot control by blending desired behaviors and automatically revising plans during execution  the uv ea also provides alerts to any human controller who is monitoring the robots 
while the framework described in this section is general  we follow it with some domain specific
details which clarify the concepts and tradeoffs  these details may not be of interest to all readers 
    suo problem description
small unit operations in the military involve hundreds of mobile  geographically distributed soldiers
and vehicles cooperatively executing fast paced actions against an unpredictable adversary  computational support is bandwidth restricted and must use lightweight and portable devices  currently 
the planning decisions are all made by humans  and the plans are not machine understandable 
we implemented the suo ea as part of a larger system  the situation awareness and information management  saim  system  which distributes timely  consistent situation data to all friendly
agents  saim uses new technologies to demonstrate a new concept of automated support  described
below  in the suo domain  we assume many small teams of agents  human  vehicles  and eventually robots   separated and dispersed throughout a large space  operating in concert to achieve
goals  we assume that each agent has equipment providing robust geolocation  gps   computing 
and communication capabilities  saim also assumes an unpredictable adversary  fast paced action 
and a rich population of sensors controlled by cooperating team members 
the key innovations of saim  in addition to the ea  are a self organizing peer to peer information architecture and forward fusion and tracking  fusion of information and tracking is distributed
and done close to the source to minimize latency  bandwidth requirements  and ambiguity  adjudication maintains consistency of distributed databases  the information architecture supports ad hoc
information dissemination based on multicast groups centered on mission  geography  or command 
   

fii nteractive e xecution m onitoring of agent t eams

self elected servers provide the same robustness for information dissemination that the peer to peer
network brings to the transport layer 
saim provides large volumes of geolocation data  too much information for a human controller to monitor  particularly in high stress situations  the ea alleviates this problem by using a
machine understandable plan to filter the information from saim and alert the user when events
threaten the user or the execution of the plan  a plan aware  situation aware  action specific ea
can alert appropriately for the situation  thus improving decision making by enabling hands free
operations  reducing the need for human monitoring  increasing the amount of relevant information
monitored  and prompting the user when action is required 
the complexities of plans  the number of agents  and the volume of data pose a challenge to
existing execution monitoring techniques  unlike a lot of ai planning work  particularly in robotics 
most actions in our domain are performed by external agents  mostly humans  and the monitor has
no access to the state of executing agents  status information must be obtained from external inputs 
we focus on the problem of alerting human users when the situation requires attention  we
assume that the human will modify the plan as needed  this was done for several reasons  first  the
users are unwilling to cede decision making to a machine  so we first develop trust by giving useful
alerts  a capability well suited for automation if the plan can be represented with enough fidelity  and
something that provides obvious value in dealing with the information glut  second  mistakes can
be a matter of life and death  so systems must be verifiably robust before they are given decisionmaking power  human decision makers must take imperfect information into account  including
reports from sensor networks  other humans  and execution assistants  third  demonstrating the
utility of automated  plan based monitoring in this large and complex domain is likely to facilitate
future acceptance by users of plan related automation 
name
battalion
company
platoon

abbrev
bn
co
plt

entities controlled
       
about    
about   

figure    echelons in the command hierarchy with eas 

execution monitoring requires coordination over multiple echelons  levels in the hierarchy   so
that users know what their subordinates are doing  figure   shows the echelons for which we have
demonstrated the ea  multiple agents at each echelon must coordinate fast paced activities over a
wide area in real time  our task requires the solution of three difficult problems  handling the large
volume of incoming information  developing a sufficiently rich plan representation for capturing
tactical army plans  and determining when to alert the user 
as mentioned before  the ea must give only high value alerts to be useful  for example  once
a unit is out of position or late  the system must recognize both the import of this condition and
when the situation has changed sufficiently to issue another alert  without issuing too many alerts 
consider the seemingly simple example of a plan specifying that a squad of    agents should move
to objective golf at       what is the location of the squad  an obvious solution is to compute
the centroid of each members location  however  no one is near the centroid if all members are
in a large semicircle with the centroid at the center  this situation arises when the squad follows a
   

fiw ilkins   l ee     b erry

road around a sweeping curve   if one member is now immobile with his gps still broadcasting  the
centroid may be seriously inaccurate  does the centroid need to be near golf  or is one member near
golf sufficient  or must all members be near golf  it depends on the mission  task  and situation  if
the mission is to observe a valley  one member is sufficient  but we might want all members for an
attack  our solution is to use mission specific algorithms  specified in the mission model described
in section      for reasoning about the location of units 
the ea must avoid cascading alerts as events get progressively further away from expectations
along any of a number of dimensions  such as time  space  and resource availability   in the above
example  how close in time to      should the squad be before there is a problem with achieving the
plans objectives  similarly  how close in distance to golf  again  the time and distance thresholds
that indicate a problem depend on the mission and situation  a human uses his background world
knowledge to quickly determine if a delay affects the plan  but execution aids must have much
knowledge encoded to do this  these problems become exacerbated as the plans and missions
become more complex  detecting friendly fire  fratricide  risks poses even more difficult issues 
because there are typically many friendly units in close proximity 
    suo approach
machine understanding of the plan is the key to helping humans deal with the information glut created by advanced situation awareness systems like saim  the plan specifies expectations for how
events will unfold  so the ea can compare actual events to the situations that were anticipated  we
use rich  knowledge based plan representations  wilkins   desjardins        to allow computers to
share context with users  so both understand the semantics of plans and requests 
we had two tasks involving significant knowledge acquisition and domain modeling      we
had to model suo plans and the actions that compose them  and     we had to model the value
of information and various types of alerts for users  we interacted with several domain experts to
develop these models  these tasks were aided by the centuries of analysis and modeling that have
already been done in this domain  for task    the army already has a standard plan representation
called the operations order  which has a required structure  but the entries are mostly free text 
primitive actions in this domain are referred to as missions  and there are army field manuals that
describe missions in detail  we modeled missions in a hierarchical mission model  our mission
model and plans are described in section      for task    there is extensive accumulated experience
and analysis of errors and opportunities that arise during execution of suo plans  but there are many
tradeoffs to be made  the tradeoffs and our models are described in sections           and     
mission specific execution monitoring is achieved by a novel integration of mission knowledge
represented as methods with an ai reactive control system  the ea invokes methods at appropriate
points during plan execution  the methods employ mission specific algorithms and in turn invoke
ea capabilities in a mission specific manner  much of the domain and mission knowledge is encoded in the mission model and not explicitly represented in the plan itself  which specifies a partial
order of missions for each team member  the ea uses the plan to invoke the knowledge in the
mission model at the appropriate time and with the appropriate arguments 
another feature of our approach  particularly for terrain reasoning  is the pervasive use of specialized programs  possibly external to the ea  to perform complex computations that are important
to system performance  by using alternative specialized programs  the ea can easily adapt the granularity of its reasoning and improve performance as better modules become available  for example 

   

fii nteractive e xecution m onitoring of agent t eams

api functions in our design can be used for terrain reasoning and to compute the enemy strength
from the current tracks 
our approach builds on sris continuous planning technology  wilkins   desjardins       
wilkins   myers        wilkins et al         and on the domain independent act formalism
 wilkins   myers         act represents procedural knowledge and plans as acts  provides a
rich set of goal modalities for encoding activity  see section       and has been used by several
institutions  wilkins   myers        durfee et al          the ea uses p rs  georgeff   ingrand 
      wilkins et al         as its reactive control system  other reactive control systems have similar capabilities  e g   um prs  durfee et al           p rs is a good framework for constructing the
ea because it supports parallel activities within an agent  and can smoothly interleave responses
to external requests and events with internal goal driven activities with its uniform processing of
goal  and event directed behavior  p rs uses procedures encoded as acts and its extensive graphical
tracing provides valuable insights into ea operation 
    suo architecture
the architecture of the ea and its interactions with the saim system are shown in figure    we
developed two major modules  the planning assistant  pa  and the execution assistant  ea   which
assist the user in generating and executing plans  respectively  we implemented only a skeletal
pa to produce machine understandable plans  using the s ipe   hierarchical task network planner
 wilkins et al          both the pa and ea use acts and a common knowledge base  ontology  and
mission model that is object based and easily extended  knowledge about actions is represented in
the mission model  and knowledge of plans  strategies  and procedures is represented as acts 
the inputs to the ea are plans to execute  location reports  sensor tracks  and messages from
other agents  e g   reporting mission success and failure  and ordering execution of new plans  
saim broadcasts up to date locations of all friendly agents  and broadcasts tracks that represent the
results of fusing sensor hits on nonfriendly entities  saim provides and the ea supports rates of
more than a dozen such inputs per second 
the ea monitors the current mission for every immediate subordinate of the ea owner  and
alerts on threats to subordinates  subordinate depth is customizable   if events threaten successful
execution of the plan  threaten the user or subordinate units  or trigger planned contingencies  the
ea issues an alert to the user  depending on the value of such an alert as determined by applying
our voa algorithms  the user must decide how to respond  our design and technology can also
suggest responses and or plan modifications  wilkins et al          but this was left for future work 
in addition to giving alerts  the suo ea can dynamically change the command hierarchy  abort
execution of one plan and switch to monitoring a new plan  and reduce unwanted alerts to avoid
inundating the user 
eas for every unit at every echelon process reports and give alerts locally  saim provides the
same tactical picture to all eas  modulo an eas registration in saim multicast groups   therefore 
it is not necessary for an ea to report a new threat to its superior  as the superiors ea  as well as
the ea of other affected team members  has the same information and would already have issued a
similar alert  this architecture is fault tolerant because eas do not rely on reports from subordinates
to determine most alerts  thus  each ea maintains most of its functionality even if it is not in contact
with other eas  as long as it gets saim position reports from one node 

   

fiw ilkins   l ee     b erry

pa

ea
pda domain kb

pda domain kb
acts used
for planning

plan
initializer

cue 
act 
 test  ready unit   
cue 

act 
answer query

executable
plan  act 

execution
manager
requests  updates

executable
plan

cue 

act 
answer query

executable plan 
monitors

advisable
planner agent
partial plan
task organization
assets
guidance

cue 
act 
 test  ready unit   

common  ontology
mission model

prs

common  ontology
mission model

sipe

acts used for
monitoring

requests
registrations
notifications
updates

simflex

watchman
prs

prs

saim  persistent data store  pds   disseminator     

situation
updates
requests
scripted events

figure    internal architecture of the ea and pa and their interaction with saim  the pds archives
plans and other data and has a continuously changing picture of the current situation 

as shown in figure    the ea is implemented as multiple asynchronous p rs agents  defined below  to alleviate the computational burden on the central ea manager agent  asynchronous agents
provide faster response and better alerts than would a synchronous architecture  because the agents
are always using the latest information available to them without having to wait to synchronize with
other agents  to implement the ea  we extended p rs to monitor temporal constraints and to batch
incoming facts so it could handle much higher data rates 
internal ea agents  as opposed to external team members  use the belief desire intention  bdi 
model of agency  rao   georgeff         each agent has beliefs about the state of the world  desires
to be achieved  and intentions representing actions that the agent has adopted to achieve its desires 
each ea agent has its own controller process  which operates on its own database of beliefs  its
own set of intentions  its own monitors  its own set of acts that encode procedural knowledge about
how to accomplish goals  and its own l isp functions that implement the primitive actions of the
agent  an ea agent continually applies its acts to accomplish its current intentions  tasks   the ea
appears as a single agent to saim and the outside world  the following are the internal ea agents 
plan initializer  this agent gets a plan from the pa and sends messages to the ea manager
agent after performing all initializations necessary to begin monitoring of plan execution  primarily 
this involves creating and loading plan monitors  and posting facts in the ea manager database 
watchman  this agent monitors incoming message traffic on the saim network  mainly by
querying for tracks and other information  it filters irrelevant or insignificantly changed reports 
and sends a message to the ea manager when any report or message requires its attention  it
simultaneously monitors files of scripted events when such monitoring is requested  the watchman
inserts events from scripts at appropriate times  interleaving them with live messages 

   

fii nteractive e xecution m onitoring of agent t eams

ea manager  this agent begins plan execution immediately after receiving a plan from the
plan initializer  the agent implements the core ea functionality  it compares reports from the
watchman agent to the plan and plan monitors  and generates high value alerts 
simflex  this agent provides a powerful and flexible way to define the execution semantics
of an action using acts  and thus the full power of prs   simflex  simulated  flexible execution 
enables mission specific execution monitoring  by having an act for each mission  and makes the
system easily extendible  for example  if certain missions were to automatically command robotic
vehicles or send messages to other eas  those actions could be easily implemented in simflex 
most of the actions in our plans are executed by external human agents  in which case this agent
does little except perhaps prompt the user  some actions  such as reorganizations  are automatically
executed in simflex by invoking the execute mission method defined in the mission model 
    suo alert types
while there is extensive accumulated experience regarding the execution of suo plans  selecting
which types of alerts to detect involved trading off several factors  such as whether the alert can be
detected from available data  the utility of the alert to the user  the cost of implementation  and the
ability to maintain reactivity given the computational expense of detecting the alert  we earlier gave
the example of balancing the usefulness of fine grained terrain reasoning for movement projection
with its computational impact on reactivity  thus  modeling the value of information and types of
alerts to be detected involved interaction between the domain experts and system developers  here
we describe the types of alerts we decided to detect  more details of how we implement these and
model the value of information and alerts is given in sections     and     
figure   describes the    types of alerts that are detected by the suo ea  most of these are
time and location checking  comparing these alerts to our categories in section    the proximity
alerts are all instances of adversarial activity detected  the adversarial alerts also fit this category
and the last three adversarial alerts are also of the type plan constraint violated because expectations and requirements specified in the plan  such as locations and routes to monitor  are violated 
the contingency alert  which can be triggered by either friendly or hostile actions  is of the type
contingency plan suggested  the out of position  coordination  and schedule alerts are of type plan
constraint violated  but would be of type constraint violation projected when the violation is projected  the fratricide alert is of type policy constraint violated  and the unknown position alert is of
type reporting requirement 
    suo plans and mission model
our hierarchical mission model specifies an ontology for the primitive actions  and has methods
that encode most of the domain knowledge about constraints and expected behaviors  tailoring
monitoring to each mission is crucial because most behaviors  even something as simple as denoting
the location of a unit  are mission specific  the plan representation is a novel combination of the
mission model and an extended version of the act formalism  wilkins   myers         
   ea plans represent plans as they are expressed in army operations orders  but only parts of the current army fiveparagraph order are represented in machine understandable form  primarily  task organization and the specific maneuver tasks and coordinating instructions from the execution paragraph are represented  but some other aspects are
encoded as well 

   

fiw ilkins   l ee     b erry

alert type
fratricide
out of position
unknown position
coordination
schedule
contingency
contingency
monitored
ave of approach
hostile expected
contact
distance
strength
proximity

friendly alerts
friendly units pose a threat to each other 
location constraints in plan violated 
unknown location of a subordinate coordinating unit 
coordinating units cannot synchronize as planned 
time constraint in plan violated 
an event has triggered a queued contingency 
adversarial alerts
an event has triggered a queued contingency 
activity at a monitored map location 
activity on a monitored route  avenue of approach  
expected hostile activity absent 
proximity alerts
a friendly units first contact with a hostile entity 
hostile entities are closer since last alert 
threat has grown stronger since last alert 
a merged alert of more than one of the above 

figure    types of alerts generated by the suo ea 

the act formalism is a domain independent ai language for representing the kinds of knowledge about activity used by both plan generation and reactive execution systems  it provides a rich
set of goal modalities for encoding activity  including notions of achievement  maintenance  testing  conclusion  and waiting  this expressiveness is necessary for representing suo plans  which
must coordinate distributed units  trigger preplanned contingencies  and enforce a variety of execution constraints  the basic unit of representation is an act  which can be used to encode plans 
strategies  and standard operating procedures  sops  
the ea can monitor any plan that is composed of missions from the mission model  the mission
model is derived from army field manuals and elaboration by domain experts  it includes a set of
mission templates  with associated parameters  that units at various echelons could be ordered to
perform  in either a written or verbal order  since the mission model is grounded in field manuals  it
is a first step toward formalizing a plan representation that is meaningful to end users yet amenable
for execution monitoring and other ai related capabilities  e g   plan generation  replanning  course
of action evaluation  
the mission model is a class hierarchy  implemented in l isp and clos  the common lisp
object system   with inherited methods that encode knowledge about how to monitor a particular
mission  each leaf class corresponds to a monitorable action that may occur in a plan  each nonleaf
class encapsulates common parameters and behaviors for its subclasses  the mission model allows
most aspects of system behavior to be tailored in a mission specific manner  thus  specialized
methods in the mission model can  for example  use mission specific algorithms for monitoring
progress of a movement  methods are invoked by the ea manager but can in turn invoke processing
in the ea manager by posting mission specific facts that invoke capabilities of the ea manager
 there is an api of such facts  important facts are described later  

   

fii nteractive e xecution m onitoring of agent t eams

each mission in the model contains a name and parameters that describe the mission  for example  the mission model contains the nonleaf movement mission class  which contains a destination
parameter and a method for checking that the executing unit has arrived at its destination  five
different movement missions inherit this behavior  the root class in the model is the mission class 
which encapsulates all parameters and behaviors that are shared by all missions  all missions inherit
start time and end time scheduling constraints and methods from this superclass 
coverage  the mission model formalizes a substantial subset of the missions mentioned in
army field manuals  we have enumerated    mission classes  and have implemented    of these  a
superset of those required by our scenarios  the mission model covers multiple echelons  with emphasis on battalion  company  and platoon  it does not model all aspects of missions  only those for
which saim can provide monitoring data  that is  those related to time and location  for example 
it does not alert on potential mission failure due to casualties incurred 
contingencies  the mission model contains the nonleaf contingent mission class  this class
and its leaf children classes are used to implement a mission sequence that is part of the plan but is
to be executed only when certain conditions are fulfilled  domain experts term these portions of the
plan branches and sequels  the missions under contingent mission contain parameters to describe
the condition  specified in the plan  that activates the contingency 
dynamic resubordination  army operations orders allow the command hierarchy  termed the
task organization  to be changed during the operation  although existing command and control software does not support dynamic changes to the command hierarchy  the reorganization mission
class provides this capability in the ea  when a reorganization mission is executed  it causes the
ea to update its representation of the command hierarchy accordingly  this has a substantial effect
on ea behavior  because many ea algorithms use the command hierarchy 
methods  each mission provides several methods that are invoked at appropriate times by the
ea to monitor execution of the mission  this set of methods serves as an api for mission specific
execution monitoring semantics  the following methods comprise the bulk of the api 
post execution constraints is the main api method invoked by the ea for monitoring a mission 
it invokes methods that post and enforce various constraints 
check initial location  check final location confirm that unit s  are positioned correctly at
the start and end of their mission respectively 
start time constraints  end time constraints check that a mission is beginning and ending
execution as scheduled  these methods usually post facts in the ea manager to invoke its
timed monitor mechanisms 
location constraints enforces location checking of friendly units and hostile tracks for a variety
of missions 
contingency satisfied determines whether a contingent mission sequence should be executed 
respond to monitored red activity is the algorithm for responding to hostile activity in places
where the plan calls for monitoring such activity 
execute mission invokes any processing required to execute a mission  it is invoked by posting
a goal in the simflex agent  and all internal agents continue p rs execution while executemission is running 
   

fiw ilkins   l ee     b erry

compute priority computes the priority of an alert 
desired strength ratio is a heuristic that expresses a desired friendly hostile ratio of combat
power 
red alert priority computes the priority of a proximity alert  or whether an alert should be issued
at all  based on recent changes to reported strengths of a friendly unit and nearby hostile
tracks 
wait until mission start  wait until mission end control interaction with the ea gui with regard to mission start and end times 
specialization of methods is useful for expressing desired behavior by the ea  for example 
the location constraints method is specialized on movement mission  coordination mission  and
several other missions  for movement missions  the ea checks whether the centroid of the moving
unit is at its destination  for coordination missions  the ea checks whether any elements of two
coordinating units are at the specified coordination point 
    suo execution monitoring
the ea manager continuously responds to new goals and facts posted in its database  the watchman agent is asynchronously posting facts to the ea manager database as it receives messages from
saim  facts so posted include confirmations of mission starts and completions  from subordinate
eas   orders for aborting the current plan or executing a new plan  from a superior ea   sensor
tracks  calls for fire  and location reports  from the saim network  
the methods in the mission model post facts to the ea manager to invoke mission specific
monitoring  examples of such fact invoked capabilities provided by the ea manager include monitoring several types of time constraints and monitoring a specified location for activity  with options
for friendly or enemy  and expected or unexpected  
the behavior of the ea manager is determined by the posted goals and facts  their relative timing  and the set of acts used to respond  the ea manager switches its focus to the highest priority
task on each execution cycle so that all goals and facts generate responses with acceptable latency
 georgeff   ingrand         execution cycles are on the order of milliseconds  system behavior
is nondeterministic because it depends on exactly which facts and goals are posted during each execution cycle  which may in turn depend on the cpu scheduling of the ea manager  watchman 
and saim processes  the number of alerts rarely varies  what does vary is the exact times of
alerts  which can vary by a few seconds   and the hostile strengths reported  which can change if
the watchman agent gets more or fewer cpu cycles to accumulate tracks before the ea manager
executes  
the ea manager must constantly monitor the status and behavior of currently executing missions  while simultaneously monitoring up to a dozen incoming facts per second and determining
their impact on the plan  while monitoring a plan  it typically has on the order of     intentions
it is trying to accomplish at any one time  and has     acts  procedures  to apply to its intentions 
most intentions can cause an alert to be generated  each unprocessed report and track forms an intention  typically  five subordinate missions are executing simultaneously  each produces multiple
intentions  at least one for detecting the start and end of each mission  and a few for each time and

   

fii nteractive e xecution m onitoring of agent t eams

location constraint  every mission has at least a start time and an end time constraint   for example  for each time constraint  the ea manager has intentions that monitor if the specified time has
elapsed and if the required event has occurred 
the plan based monitoring of the ea can be viewed as asynchronously and simultaneously
interleaving the following activities  we describe these in more detail below and mention the most
important design tradeoffs 
 initiating or aborting plan execution upon request
 monitoring incoming location and sensor reports
 monitoring progress of the missions and time constraints specified in executing plans
 responding to other types of incoming requests
      p lan monitoring
to monitor a plan  a request goal is posted in the database  this invokes an initialize plan act that
computes the conditions that should be globally monitored for this plan and posts facts to the ea
manager database declaring that there is a current plan with monitors  these facts in turn cause
acts to execute in the ea manager  which load and execute the plan  the ea manager traverses
through the parallel branches of this plan as missions complete 
the global monitors are computed using the api function compute plan monitoring data 
which can specify domain specific monitors  domain independent capabilities are also available 
such as having the system determine all predicates in plan preconditions that must be true initially
 as opposed to predicates that are achieved by plan actions that precede them   in the suo domain 
compute plan monitoring data finds all decision points and named areas of interest specified in
the plan  and sets up monitors for them  this monitoring is accomplished by posting facts in the ea
manager database that cause the ea to notice any adversarial activity in these locations 
the ea can abort monitoring of one plan and switch to monitoring a new plan  this process
involves removing facts for old missions and monitors from the ea manager database  aborting
execution of the acts currently intended for execution  and posting a goal to execute the new plan 
      l ocation reports
the blue report act in figure   is invoked every time a location report is posted in the ea manager
database  which can happen several times each second  however  the watchman agent filters location reports that are not of interest to the ea manager  e g   for entities irrelevant to the plan of the
ea owner  or because there is no change from the last report   and updates the representation of the
current situation in the ea  the blue report act is specific to the suo domain  but our framework
requires a similar act to be written for each type of input that is to be actively monitored  for example  there is a similar uv robotics act that responds to state updates  see section       these acts
are written using the act editor  wilkins   myers         a tool for graphically editing procedural
knowledge  acts  with an intuitive user interface 
this act begins by invoking a domain specific specialized reasoner to check for fratricide risk 
which may have the side effect of giving an alert  using the api function issue alert   the specialized reasoner can easily be replaced by better fratricide detection algorithms in the future  next  the
blue report act checks whether the current plan has any expectations for this unit  and if so  it calls
   

fiw ilkins   l ee     b erry

blue report fact  check blue report
cue 
 conclude
 blue report unit   x   y   time    
preconditions 
  no entry setting 
  no entry resources 
  no entry properties 
 authoring system act editor 

n  
 achieve  check fratricide risk unit   x   y   time    

n  
 test
 expected location unit   id  
dest map object   time   loc fuzz   

n  
 test
 not  expected location unit   id  
dest map object   time   loc fuzz     

comment 

n  

this act is invoked every time a
blue location report is posted in
the database  it invokes an api
function to check for fratricide
risk  and another to check the
units expected location
whenever the database has an
expected location  from the plan 
for the unit in the report 

 achieve
 check expected location unit   id  
dest map object   time   loc fuzz    in progress  

n  
 retract  blue report unit   x   y   time    

figure    graphical representation of the act that responds to every friendly location report 
the api function check expected location to compare the current location to the expected location 
again posting an alert if appropriate  finally  the report fact is removed from the database 
responding to a fused sensor track indicating adversarial activity is controlled by a similar red
report act  which compares adversarial activity to plan expectations  instead of analyzing fratricide
risk  the red report act invokes a reasoner for evaluating adversarial threats  as described in
section      this involves updating a threat envelope for each friendly unit 
      m ission monitoring
to explain mission monitoring  we give an example of how a move mission in a plan is monitored 
a move mission ready for execution has the following parameters 
 move mission unit start time constraint start time end time constraint end time destination
route formation march technique contingency contingency satisfied  

the ea manager begins execution by calling three methods defined in the mission model  starttime constraints  end time constraints  and location constraints  each of these posts facts in the
ea manager database to invoke mission specific monitoring capabilities  for example  locationconstraints  which is specialized to the class movement mission  posts facts about locations this
mission expects friendly units to occupy and at what time  derived from the destination and route
arguments   and might also post facts about locations where this mission expects adversarial activity
and where adversarial activity should be monitored alerted 
the ea receives confirmation of mission start from a subordinate ea  location reports are
continuously posted by the watchman  and the act in figure   analyzes them with respect to the
location facts posted by location constraints  sensor tracks are similarly analyzed by a different
act  let us suppose that at some point during mission execution  a track shows activity in a location monitored by this mission  the ea would detect this and invoke the mission specific method
   

fii nteractive e xecution m onitoring of agent t eams

respond to monitored red activity  which describes how this mission will respond to such an
event  for example  it could issue an alert  abort the move  execute a contingency plan  or ask the
user to choose from a set of such options 
type
asap
on order
start at
start nlt
start net
end at
end nlt
end net

meaning
start end not specified
start end when ordered
start exactly at given time
start no later than given time
start no earlier than given time
end exactly at given time
end no later than given time
end no earlier than given time

figure    temporal constraint types 

      t emporal monitoring
the mission model includes starting and ending time constraints for every mission  each time
constraint consists of a temporal constraint type and an absolute time  the temporal constraint
types in the ea are shown in figure    these constraints require two types of monitoring tasks 
detecting when time constraints in the plan have passed without being met  and detecting events
that occur before their specified time 
we extended p rs with a domain independent timed monitor mechanism that provides a general
capability covering all our temporal monitoring requirements  this capability was implemented
in the form of acts  with some supporting l isp code  four special types of timed monitors are
provided  invoked by posting facts with the predicates check not later than  check not earlierthan  check in window  and check near time  we describe our implementation for one of these 
the others are similar  the act check near time checks that an event occurs within a specified
threshold of some time point and can be invoked by a fact of the form 
 check near time event   time   mode   fuzz   
to succeed  event   must occur within fuzz   seconds of time    with mode   indicating whether
this time is absolute or relative  to the time at which this fact is posted   a timed monitor act sets
up a timer that expires at the given time  and p rs reacts appropriately to either the expiration of
the timer or the occurrence of the event  posting facts to the database to note the success or failure
of the temporal constraint  because the above acts are fact invoked  these mechanisms enable the
establishment of separate intentions to perform timing  without blocking other processing  this
modularization enables triggers to be set up to independently respond to timing results 
      d esign tradeoffs
as described in section    a balance must be struck between the capabilities provided and resources
used  the tradeoffs are different in every application and are usually a critical aspect of the design of
an execution assistant  in the suo domain  terrain reasoning is a key factor in this tradeoff  using

   

fiw ilkins   l ee     b erry

fine grained terrain data to analyze progress or project future failures can overload computational
resources  therefore  the ea uses coarse terrain reasoning  but our design allows higher fidelity
terrain reasoners to respond to a defined set of terrain analysis requests  this feature allows the
system to adjust its analysis to the tempo of operations 
other key features to consider when making tradeoffs between reactivity and capabilities are
the amount of processing done by the mission monitoring methods  the report monitoring acts  and
any specialized reasoners  such as terrain reasonsers  invoked by the methods or acts  the user
can adjust the frequency of monitoring at any time by customizing parameter settings  currently 
the suo ea is not computationally overburdened while analyzing every report in full  but adding
more computationally expensive projections or alerts in the future could cause reconsideration of
this design decision  finally  the amount of filtering of incoming reports done by the watchman
agent affects this balance 
      other

features and implementation

the ea responds to other requests  such as calls for fire  which are described in section      several
other capabilities were implemented to make the ea easier to use and understand  two are briefly
mentioned here  we implemented a gui  not meant for military users  but rather to facilitate evaluation and understanding of the ea  the gui displays all alerts in different scrollable windows for
each priority level  the current time  and the current mission of each subordinate of the ea owner 
the user can confirm mission starts and ends locally  although this might be done with voice or
some other modality in a fielded system  when a confirmation arrives from a subordinate ea  the
confirmation window for that mission is destroyed  thus  confirmations and prompts can be given
locally or received in messages  with a seamless interleaving of those two types of confirmation 
the ea  pa  mission model  p rs and s ipe   are implemented in c ommon l isp  clim  and
clos  the ea also contains procedural knowledge in the form of acts  saim was implemented
in c   and java  using the ace object request broker for corba  c   was used to interface the
ea to saim and corba 
    alert detection and voi voa
the central task of the ea is to notify the user of important changes to the situation that may demand
attention  the ea must also avoid excessive alerting  otherwise  the user would abandon the ea
as a nuisance  a model of the users cognitive state with respect to awareness of threats would
be ideal  but is unavailable  as described in section    we developed algorithms that heuristically
estimate voi and voa using domain knowledge  the inputs to these algorithms are described in
section      we avoid excessive alerts by issuing only high voa alerts  our techniques include
 keeping event histories for each friendly unit  for map coordinates and for important map
locations named in the plan  e g   decision points  
 having alerts expire in the sense that they can no longer be used to suppress future alerts 
 using alert histories for suppressing alerts by time  similar alert given recently   strength
 threat not significantly stronger   and distance  threat not significantly closer  
 merging several related alerts that apply to subordinates into one alert for the common parent 

   

fii nteractive e xecution m onitoring of agent t eams

 providing parameters so the user can customize alerting behavior and voi voa estimates 
the event histories are currently our only model of the users cognitive state  except for global
properties of the situation  such as operational tempo  our voa calculations take into account the
frequency and timing of alerts that have already been given  the histories include all alerts that were
issued to the object of the history  and may include additional events  as described in section     
we assume that the user is aware of information about which he or she has recently been alerted 
the idea behind having alerts expire is that the user may have forgotten information provided too
far in the past  thus  the ea will not use alerts older than a specified threshold to reduce its estimate
of the value of giving an alert now 
the eas behavior must be easily customizable  both by users and by the plan  because users
have different preferences and situations impose different requirements  the ea can be customized
in many different ways  our voa algorithms  which recommend alerts and classify them by priority level  are controlled by thresholds and repetition parameters  which allow alerting behavior
to be customized to the user or situation  examples of customizable voa parameters are the alert
expiration periods described above  default    minutes  and alert suppression intervals     seconds
for hostile alerts      seconds for alerts about friendly team members  during which alerts of the
same type about the same objects are suppressed for the given interval  in terms of voa  another
fratricide alert has no value for the first     seconds after the user has been alerted about a fratricide
risk from the same team member 
examples of customizable voi parameters are the out of position distance threshold      m  
thresholds on the strength of adversarial threats  and the time threshold for schedule alerts    
seconds   the time threshold  for example  would be smaller for tightly coordinated operations  and
larger for more loosely coordinated plans  in terms of voi  detecting that a team member is late has
no significant value until the tardiness reaches the given    second threshold  if certain missions in
the plan change this threshold  say to    seconds  it indicates that information about tardiness of   
to    seconds has more value in the context of these missions 
the problem of avoiding unnecessary repetition of similar alerts occurs with every type of alert 
schedule deviations can become progressively more off schedule  position deviations can become
progressively more out of position  threats can move progressively closer or become progressively
stronger  and fratricide threats can persist over time  an ea must avoid cascading alerts in each of
these cases  in our framework  customizable thresholds are often paired with either customizable
ratios or a customizable sequence of thresholds  which control how often to repeat the alert if the
mission deviates progressively more from expectations  repeated alerts generally have a lower
voa and are given lower priorities 
our evaluation showed that two types of alerts in the suo domain pose particular problems
for avoiding inundation of the user  these are proximity alerts about adversarial activity and alerts
about fratricide risks among team members  we developed voi voa algorithms especially for
these two types of alerts 
      p roximity

alerts

there can be a high volume of sensor tracks near friendly units prior to and during battle  it would
overwhelm the user to see an alert on every change to every track  we keep a threat envelope for
each friendly unit  consisting of tracks close enough to pose a threat to it  tracks are placed in zero

   

fiw ilkins   l ee     b erry

or more threat envelopes when they appear or move  only significant changes to the strength of the
aggregate force in an envelope or the closeness of the nearest track causes an alert 
      f ratricide risks
fratricide is one of the biggest dangers on the modern battlefield  this risk increases as the range 
lethality  and accuracy of weapons increase  increased range increases risk because there is a bigger
area in which every team member must be correctly identified  increased accuracy increases risk
because an incorrectly targeted team member is more likely to suffer harm  hopefully  tools like
the ea and saim will increase situational awareness and greatly reduce the frequency of incorrect
targeting  usually  a large number of friendly entities are in close proximity  so many potential
fratricide situations exist 
the ea detects two types of fratricide risks      from calls for fire from other team members
 which appear in messages from saim   and     friendly units near each other  which are detected
from the geolocation data   in the first case  the user who issues a call for fire is warned and asked for
confirmation if team members are within a given threshold of the target  if the request is confirmed 
a saim message is sent to team members  and the ea of any entity within the target threshold
immediately alerts its owner to the risk from the planned fire 
the second case produces far too many alerts if simple algorithms are used  our algorithms are
based on the armys notion of unit boundaries  which are specified in the plan  when two units
are within their boundaries  no alert is issued even if they are within weapons range of each other 
fratricide alerts are issued when one unit is in another units boundaries and within weapons range
of the other unit  we handle numerous special cases  such as when two units are both outside their
boundaries and within weapons range of each other  detection of other fratricide situations is left
for future work  e g   misoriented units within their boundary  
    suo evaluation
the ea was evaluated with respect to the usefulness of its output  frequency of unwanted alerts 
and real time performance with realistic data streams  saim and the ea were tested against data
produced by a high fidelity military simulator on two scenarios  the simulator has detailed models
of each type of vehicle and sensor  one scenario lasted      hours  but only the last    minutes
were simulated at high fidelity   the first    hours had a file of scripted events  with a few dozen
tracks and reports   the second scenario  on the same terrain  was simulated for    minutes  the
   minute simulation had more than        events passed to the watchman from saim  of which
       were passed on to the ea manager  which monitors only to the squad level    to    entities  
during the simulator run  scripted events also simulate messages from any team members that are
not running live  such as messages confirming mission starts and completions   the high fidelity of
the simulation provides realistic data rates and inputs  thus providing some evidence indicating that
the ea will perform as desired in the real world 
our formal evaluation ran live with saim  the simulator  and several team members  each running their own copy of saim and the ea on different physical machines  for a shorter development
cycle  we implemented an event generator that reproduces saim behavior  making the saim network unnecessary  the event generator creates messages from files of scripted events that include
confirmations of mission starts and completions  that normally would come from a subordinate
ea   orders for aborting the current plan or executing a new plan  that normally would come from

   

fii nteractive e xecution m onitoring of agent t eams

a superior ea   and sensor tracks and location reports  that normally would come from the saim
network   our event scripts contain all messages captured from a run that included the simulator
and saim 
      q uality

of alerts

figure   presents the total number of alerts by type at each echelon during a typical run  flash
is the highest of four priorities  and immediate the second highest  flash alerts are generally life
threatening  first contact with adversarial entities and fratricide   while lower priority alerts are only
plan threatening 
we analyzed and evaluated the alerts generated from our first and most challenging scenario 
analysis by sri and our domain experts indicates that all important situations were alerted  less
than     of alerts were judged to have such low value that they should not have been issued  and no
flash alerts were so judged  judging the voa for each alert is subjective  different domain experts
may have different alerting preferences  and each alert will have some new information  we have
no firm data on the number of unwanted alerts that would lead to performance degradation for a
typical user  or that would cause a user to shut off his ea   it is clear that the     false alarm rate
found in a pediatric icu  tsien   fackler        would not be acceptable on the battlefield  in our
judgment and that of our domain experts  the rates of low value alerts we achieved are acceptable 
the number of alerts in figure   is reasonable for a    minute interval of fast paced action  and
further elimination of alerts risks missing a high value alert  we purposefully erred on the side of
not missing any alerts 
we have compared the alerts generated by eas operating at different echelons  running on
different machines on the saim network  on the same simulation  our analysis shows that they
detect the same threat at the same time from the same tracks  when the threat is relevant to their
plans  the alerts show plan specific and mission specific behavior as expected  because of the
nondeterminism inherent in our asynchronous agents  the alerts do not always show the exact same
strength  bearing or location of a threat  figure   shows one example  the bn and a co alerts near
       at this time   nd plt  a co is moving outside its unit boundary specified in the plan  and a
hostile force appears to the north of a co moving south  note that both eas issue flash fratricide
alerts at       however  the other alerts are different  and specific to the plan and owner of that ea 
as we would expect 
the plan called for an attack by fire mission if tracks are observed at location dp   a decision
point at which hostile activity calls for a human decision   this immediate alert appears only on the
bn ea  because the contingent fire mission is in only the bn plan  and notifies the user that hostile
entities have entered dp   triggering the contingency  aa diamond is a route  defined in the bn
plan  along which adversaries are likely to approach  the second alert notifies the bn user  only 
of activity on the route and reports the number of entities detected 
both eas independently identify the fratricide risk at       as would the eas of the two platoons
involved  the message details the two platoons to facilitate a quick response  next  the bn ea
issues a distance alert after detecting tracks    m se of the recon plt  which was subordinated to
the bn earlier in the plan  so only the bn ea alerts   these tracks are now closer than when an
earlier first contact alert was issued  finally  the out of position alert at       indicates that   plt
is   km south of the route specified for its move mission   the   plt ea simultaneously alerts that
one or more of its subordinate squads are out of position  

   

fiw ilkins   l ee     b erry

number
  
  
 
 
  
 
 
 
  
  
 
 
 
 
 
 
 
 
 
 

type of alert
battalion ea      missions
total alerts over      hrs     flash
proximity alerts
schedule alerts
out of position alerts
avenue of approach alerts
triggers contingency alerts
at monitored alerts
fratricide alerts
a co ea      missions
total alerts over     hrs     flash
proximity alerts
schedule alerts
out of position alert
avenue of approach alerts
triggers contingency alerts
at monitored alerts
fratricide alerts
  plt  a co ea     missions
total alerts over     hrs    flash
proximity alerts
schedule alert
all other alerts

figure    number of alerts by type at each echelon  the number of missions for each echelon
indicates the size of its plan  only the last    minutes of the      hour scenario was
simulated at a high fidelity  of the    battalion alerts  all but   were issued over the last
   minutes 

      p erformance
our ea manager must handle more than     simultaneous intentions  while determining the import
of a dozen or more new facts a second and checking alert histories for redundancy  it was not clear
that our system could do all this and still alert the user within   seconds of a new fact arriving  as
required by our users  we tested the ea on both scenarios to determine if it met these requirements 
in real time  the ea generated alerts in less than   seconds from the receipt of a new fact  we found
that the ea can not only keep up  but can run at between   x and   x real time   there may be
anomalous schedule alerts because of granularity issues at high time expansion rates   thus  current
data rates are not close to stressing the system  at   x real time we are processing an average of   
events per second in our    minute simulation  which is double our design requirement of a dozen
events per second  we did not determine the multiple at which degradation would occur because
it is difficult to detect degradation in such a complex system  we did establish that the ea  using

   

fii nteractive e xecution m onitoring of agent t eams

from bn ea          
day          immediate notification 
red activity at dp  triggers contingency for attack by fire
day          routine notification 
enemy activity on ave of approach aa diamond    vehicles 
day          flash notification 
fratricide risk   plt  a co moved out of position near   plt  b
day          immediate notification 
closest threat  tracked  is now closer     m se of recon plt
from a co ea          
day          immediate notification 
  plt out of position for move mission is at gl        should be at line            m  n of   plt 
day          flash notification 
fratricide risk     plt is out of position near     b     

figure    bn and a co alerts around      on day    there was only one a co alert from      to
      during which time there were several bn alerts 

    meter map granularity  is easily sufficient for plan monitoring with saim data rates  running
on both sun ultra   s under solaris and pentium based machines under linux   
prior to implementation of the ea  we did a performance evaluation of p rs to determine if it
could handle the input data rates required by the ea  we briefly describe our results as many other
reactive control systems are based on p rs  e g   um prs  durfee et al          we found that it
could not handle more than    facts per second without unacceptably long delays  using randomly
generated facts for two predicates where each fact invoked only trivial processing  incrementing
a counter   we determined that the effects of combinatorial p rs algorithms could be avoided by
batching new facts each time through its control loop  we modified the control loop to do so  and
the performance improved remarkably  for a test case of       facts posted in   second  it reduced
time to respond to the first  any  fact by      reduced time to respond to all facts by      and
reduced memory usage by      experiments showed that a fact batch size near    was optimal for
reducing response time  and any value between roughly    and     was near optimal 
      l imitations
the ea is limited by what has been modeled  by the low fidelity of some models and heuristics  and
by the scenario specific population of the knowledge base  there are many aspects of plan execution
that we do not currently monitor  although our monitoring framework can be easily extended when
other aspects of plans are modeled  our selected capabilities are mostly a function of the available
input data and available funding for modeling  the ea can monitor a much broader range of plans
than were used in our scenarios  in fact  it can monitor any plan composed of a partial order of
defined missions for team members 
   all performance data are from a sun ultra    under solaris  all product and company names mentioned in this
document are the trademarks of their respective holders 

   

fiw ilkins   l ee     b erry

   monitoring robot teams
we are using a team of robots to cooperatively track and pursue enemy entities that have been detected  unmanned air vehicles  uavs  and unmanned combat air vehicles  ucavs  are a growing
research interest  musliner  durfee    shin         led by the availability of cheaper platforms that
are easier to use  the sri uv robotics project focuses on building a system to carry out a mission
objective using a team of ugvs and uavs  each ugv or uav is an autonomous agent with its own
view of the world  own onboard reasoning capabilities  and own set of resources  such as power 
computation  and a unique set of sensors   during a mission  there may be limited opportunity to
communicate with the human controller  therefore  the agents must rely on one another to complete the mission  our research concentrates on providing reactive regulation of low level sensor
systems and vehicle controllers so as to attain high level mission goals  while reacting to unforeseen
circumstances and taking advantage of the evolving situation 
the uv robotics domain resembles the suo domain in that it requires the rapid assessment of
the operational situation  the determination of the viability of existing plans and control policies 
and the modification of goals and objectives based on those findings and the available resources 
unlike the suo domain  the decisions are made by the  automated  agents themselves and the
agents must negotiate solutions in a cooperative fashion  one of the challenges of uvs  or any
physically mobile agent  is the need for a reactive system  perception of  and knowledge about 
events and actions in the physical world are generally imprecise  to perform tasks reliably and
repeatedly requires dynamic monitoring 
just as the suo ea filters alerts to avoid overloading the human decision maker  we must also
filter alerts to an autonomous agent to avoid overloading its computational resources  resources are
always limited  particularly on a mobile platform  so a balance must be struck between usefulness
and resources used  a good example of such balance is the computational resources available
onboard our robots  with an infinite number of cpu cycles  we would be able to generate large
numbers of contingency plans and evaluate each with simulation  however  we have only     of
the cpu available for robot control and monitoring  therefore  we have to make design decisions
that limit the complexity of both control and monitoring algorithms  possibly leaving extension
hooks in anticipation of greater processing power in the future 
    uv robotics  problem description
our long term goal is to build  test and validate an architecture for an agent that can support multiple
goals in a dynamic environment of cooperative mobile agents  initial tasks for our teams include
surveillance and reconnaissance  search and destroy  pursuit  and evasion  a team of robots would
be expected to perform these tasks with minimal supervision  key components of this architecture
were identified to be negotiation  strategic planning  execution and tasking control  execution monitoring  and recovery from failure  the challenge is to not only have several robots working together
but to have them understand the effects of their actions on common team goals 
one challenge is that an agent may be working toward multiple  possibly conflicting  goals 
thus  the agent must be constantly evaluating its commitment to actions  or tasks  that contribute to
the satisfaction of these goals  the imprecision of any action or sensory input has to be taken into
account  and its contribution toward the satisfaction of current goals or plans assessed  in addition 
the user must be kept informed of the progress of the team toward its goals  the user does not
want to be actively involved in robot control  but must be able to intervene when necessary  thus 
   

fii nteractive e xecution m onitoring of agent t eams

monitoring must both ensure robust autonomous operation and provide the user with a window into
the operation of the team 
    uv robotics  architecture
the sri uv robot architecture is based on several years of research at sri into intelligent reactive
control  planning  negotiation  and robot motion control  wilkins   myers        myers       
wilkins   myers        cheyer   martin        konolige   myers         it is similar to systems
like safer  holness  karuppiah    ravela        and srta  vincent  horling  lesser    wagner 
      in its ability to deal with multiple goals at once and evaluate when to discard goals  figure  
shows our multi level agent adaptation  mlaa  architecture  clearly  monitoring is pervasive
and serves each layer in the architecture as well as the user  not shown  
other agents
uses
coordination

policy maker
update ask achievable

query

uses

uses

strategic planner

team
level
strategic
level

update
update

resource mgr 

ea watchman
insert goal
update

query

ea plan initializer
ea plan manager

update

tactical
level
 prs 

process
query

task blender
primitive action
executor

update

control
level

low level actions

figure    multi level agent adaptation architecture 
the coordination module receives goal requests from the human commander or other agents 
the agent participates in a negotiation process to determine its role in achieving the goal  during
negotiation  the agent consults the strategic planner to create a plan  or plan segment  referred to
as a recipe   and assess the recipes viability given current commitments  if the negotiation process
results in the goal and its recipe being accepted  the ea manager  see figure    instantiates the
recipe and initiates its execution  the plan initializer also creates monitoring sentinels for use by
the ea to detect deviation from the recipe during execution  the execution of a recipe involves
activation of tasks that must be blended with other active tasks to maximize the satisfaction of
multiple goals  for example  if the robot needs to reach a waypoint by a set time  take a picture of
a location nearby  and also remain concealed  the task blender modifies the path planner at runtime

   

fiw ilkins   l ee     b erry

to achieve all three tasks  finally  the lowest layer in the architecture is the interface between the
tasking architecture and the physical  or simulated  robot controller 
the monitoring in figure   is done by the uv ea  which was created by using the architecture
and representations of the suo ea  the modular design of the suo ea made this adaptation
straightforward  the architecture and internal ea agents depicted in figure   were used with little
modification  as were the plan representation and the techniques for monitoring plans  applying
voi and voa calculations  and issuing alerts  our implementation of an initial uv ea  using code
from the suo ea  was done in about one person week  an impressive result given the complexity
of the task  the implementation included connecting to new data sources  parsing their messages 
determining and implementing the most valuable monitoring algorithms  integrating with the plans
and missions already defined  and writing domain specific voi voa algorithms  achieving some
missions requires recalculating waypoints at least every second while using only     of the cpu 
so we had to trade off speed and complexity in both waypoint calculation and monitoring  the
initial version of the uv ea detected the first five types of alerts listed in section     
    uv robotics  execution monitoring issues
the initial monitoring issues apparent within the uv robotics domain can be divided into the following four categories 
 monitoring the completion of  or progress toward  a basic action  e g   go to a waypoint 
 monitoring the satisfaction or completion of the multiple tasks to which the robot is currently
committed  e g   pursue evader  patrol area  photograph target every   hours 
 monitoring the activity of unknown or adversarial entities
 monitoring the state of the communication network  the robot  and other team members  e g  
communication network quality or integrity  robot mobility  or battery level 
comparing these to our ontology in section    the first two categories involve the general alert
types plan constraint violated and constraint violation projected  however  they exist at different
levels of abstraction and often have different temporal impact and associated monitoring requirements  the third category cleanly fits the adversarial activity detected alert type and triggers alerts
for both autonomous control and user reporting  the fourth category is essential both to team based
automated operation and effective user interaction  and involves policy constraint violated alerts 
reporting requirement alerts  and system problem detected alerts 
    the uv robotics execution assistant
like the suo ea  our robot controller uses a rich plan representation to allow team members to
share context and communicate with the user  primitive actions in this domain are basic motion control and communication requests to the physical robot  a goal request from the user is decomposed
into individual agent plans  recipes  and intentions to aid or interact with other agents  recipes are
composed of partially ordered sequences of tasks that in turn evolve into primitive actions 
the uv ea uses an internal architecture similar to the suo ea  as shown in figure    as in
the suo ea  the ea manager continually applies its acts to respond to new goals and facts posted

   

fii nteractive e xecution m onitoring of agent t eams

in its database  the acts correspond to algorithms for monitoring requirements at each layer in the
mlaa architecture  some implement user alerts and others implement autonomous control 
the inputs to the uv ea are plans to execute  policy declarations  status reports  including
location  speed and orientation  from its own sensor suite  and messages from other agents  these
messages include status reports of other agents  reports on mission success or failure  shared information  and requests for help  depending on communication conditions or policy restrictions 
an agent may  or may not  receive from team members status reports  up to date locations  of all
friendly agents and other entities within visual range  sentinels are extracted from plans and policy
declarations  are evaluated when status reports are received  and may produce alerts  the alerts
produced are designed to serve both the autonomous control via the plan manager component  and
the user  although the needs of each vary considerably 
for our initial experimentation  all monitoring alerts were derived from regular state messages
from each team member  a state message reports the current location  velocity  attitude  and sensor
imprecision of an agent  a uv robotics act similar to the suo act in figure   is invoked every
time a location report is posted in the ea manager database  such postings happen several times
each second  because each robot receives two such messages every second from its own sensors and
two from each team member  based on network conditions  it also receives similar state messages
about entities within its own field of vision  this means in a team of three robots each agent will be
handling a minimum of at least six state messages per second and possibly many more depending
on the environment  also  there are messages between agents for sharing information  which we
are not currently considering except when they update state knowledge about adversarial entities 
in the future  the uv ea will be extended to serve the higher layers of the architecture that have
more in common with the suo ea alert types and triggers 
our initial implementation of the uv ea detects the following types of alerts  we plan to
implement additional monitoring during the project 
 at goal  robot at current waypoint
 stuck  robot stuck and not at current waypoint
 divergent  robot diverging from current waypoint
 no status  robot no longer reporting its state
 target visible  robot has a target within its sensor range
 lost target  robot lost track of target during pursue mission
 target gone  target moved out of assigned sector during pursue mission
 collision  robot anticipates it will hit a nearby object in the next few seconds
 handoff  robot has delegated accepted a task to from another team member
the uv ea uses the same techniques as the suo ea  section      for estimating voa and
greatly reducing the number of low value alerts  in particular  the uv ea keeps event histories for
each team member being monitored  these histories are used to determine the value of information
and alerts  and to detect stuck  divergent  and no status alerts  for example  the history indicates
   

fiw ilkins   l ee     b erry

the time and the robot location at the last progress check  so if the current waypoint has not changed
and the robot is further away from the waypoint  then the value of issuing a divergent alert should
be calculated 
the value of issuing an alert takes into consideration customizable latency thresholds and repetition parameters  which are associated with both the automated agent and the user  some of the
agent parameters are customized to improve performance  while others are a function of the behavior of the robot  for example  the value of a divergent alert will be a function of the expected
velocity of the agent  because an agent traveling at speed will diverge more quickly than a slow
agent  similarly  a change in orientation will influence the value of an alert because a turning agent 
while not decreasing the distance to the waypoint  may indeed be making progress toward the goal 
an example of how monitoring is used to facilitate autonomous control is illustrated by the
situation where an agent is patrolling a designated area  when an evader becomes visible  the agent
receives a target visible alert  which is of type adversarial activity detected  reacting to either a
high priority policy to pursue evaders or an explicit plan step  the agent commits to a new goal
pursue named evader  this goal is achieved by the activation and blending of three tasks  follow
named evader  relocate named evader and search for named evader  thus  the robot will maintain
pursuit even when the evader slips in and out of its field of vision 
the users preferred strategy might be to report the first sighting of the evader or to track its
position  noting whenever it disappears from view  however  the autonomous control requires notification only if the likelihood of recovering visual contact is deteriorating and the robot is searching
aimlessly  at this point  a target lost alert  which is of type plan constraint violated  will be sent to
the agents ea manager  and possibly the user   in this example  a policy exists for reacting to this
type of alert  it will cause the pursuit goal to be dropped and the original patrol plan to be resumed 
    uv robotics  evaluation
the uv ea is being evaluated within an sri experimental framework called the sri augmented
reaility simulator  sars   ortiz et al          the framework allows our autonomous agent architecture and software to be tested within an entirely simulated environment  on a team of physical
robots  or a mixture of the two  the physical robots are three pioneer robots from equipped with
gps  as shown in figure     initial experiments were carried out in a simulated environment  we
then ran the system in an entirely physical world with a team of two cooperating robots searching
for and pursuing two independent evader robots  we have also run in environments composed of
a combination of physical robots and simulated entities to illustrate scalability and operation with
uavs  the monitoring technology was effective in ensuring robust execution in all environments 
and in giving human operators insight into the state and activity of each robot  this insight facilitated debugging and the process of moving from the simulated world to the physical robots as
problems were quickly identified 
sars is specifically designed to simulate robots and uavs  it produces the same output in terms
of sensors  actuators  and resources  battery status  communication range  and so forth   sars
computation and simulation is based on a precise  d model of the environment  sars is precise
enough that we can mix physical robots moving in the real world with virtual evaders and see the
physical robots following a virtual evader  thus  the name augmented reality  using sars  we
are able to simulate a team of ugvs moving and or uavs flying in a larger space than we have
available  the team of uavs may be larger than our available physical uavs  as well 

   

fii nteractive e xecution m onitoring of agent t eams

figure     sri experimental pioneer ugv 
the initial uv ea implementation was evaluated with respect to the usefulness of its output 
value of alerts  and real time performance with realistic data streams  our analysis shows that all
the important situations are alerted during simulated executions  and during tests with actual robots 
which are never exactly reproducible 
no status alerts have proven useful to the human user  as they indicate a hardware or software
problem on a robot or the network  such problems are recognized immediately  after the customizable interval of noncommunication has passed  with the uv ea  but take considerably longer to
detect without alerts from the ea  a customizable threshold  which currently defaults to   seconds 
determines the value of an alert when the robot has not reported its state for a certain interval 
at goal  stuck  and divergent are essential alerts for the autonomous control agent navigation
system  as well as being useful to a human user who wants to monitor the activity of a single
robot  knowing when the robot has reached a goal point  when it has stopped and is not making
progress toward a goal point  and when it is diverging from the planned route are essential to robust
autonomous operation  customizable intervals also control these alerts  subtleties of the domain
must be considered to avoid false alarms  for example  the robot may be paused because of gps
uncertainty and the gps should be given time to establish connection with satellites  also  a robot
takes time to turn and thus should not be regarded as stuck or divergent until turns and steering
adjustments have had time to complete 
target visible  target lost  and handoff are useful to both the user and the autonomous controller  particularly when the task is to monitor or pursue a target  the autonomous controller
requires immediate awareness of loss of sensor contact  so it can adjust its lower level behavior or
sensor parameters to find the evader  however  such immediate alerts would be unproductive for the
human user or the plan level controller  a customizable interval gives the agent time to relocate the

   

fiw ilkins   l ee     b erry

evader  possibly avoiding an alert to the human  these types of alerts are the most time critical in
our evaluation domain 
good tracking of an evader requires recalculating waypoints and orientation at least every second  the uv ea was able to keep up with data inputs  detect occurrences of the types of alerts
mentioned within   second  and recalculate waypoint and orientation twice per second  these constraints were not difficult to meet on our desktop machines  but the success of the uv ea on the
slower processors of the physical robot involved tradeoffs of speed with complexity of waypoint
calculation and monitoring  one useful technique is only using the latest state report for an agent
when more than one state report has accumulated during one cycle of the monitoring loop  the
relative cpu access of the various agents and processes also became important  for example  we
had to adjust the time quantum given by the scheduler to our ea processes to ensure that both the
process receiving messages and the various p rs agent processes in our ea were executed frequently
enough for waypoint recalculation  this problem has been alleviated with more recent upgrades in
the onboard computer  but could recur if more computationally expensive projections or alerts are
added to the ea 

   related work
plan generation has received a lot of attention recently  but rarely are the plans used to control
and monitor execution  even more rarely are plans monitored that involve the activity of hundreds
of agents requiring tight coordination  previous work on execution monitoring has focused on
models where the executor performs the planned actions  e g   a robot controller  and usually has
direct access to internal state information  in the suo domain  most actions are performed by
external agents  usually humans  and the monitor has no access to the state of its executing agents 
such indirect execution requires different monitoring techniques  as the executor must use incoming
messages to determine the status of agents and activities and whether actions have been initiated or
completed  the continuous planning and execution framework  myers        has addressed the
indirect execution problem  and our system builds on its ideas  however  our domain requires
monitoring of many more constraints with greater time sensitivity  we have much higher rates of
incoming data  and must customize monitoring of each action to generate appropriate  high value
alerts 
robot designers have often avoided the plan representations used by the ai plan generation
community because of their restrictive assumptions  pollack   mccarthy        arkin         both
our domains required an expressive plan representation  and our combination of the act formalism
with a hierarchical  object oriented mission model proved sufficiently expressive  providing a rich
set of goal modalities for encoding activity  including notions of achievement  maintenance  testing 
conclusion  and waiting 
the sam system  kaminka   tambe        at isi addresses a similar problem  automated
pilot agents on a battlefield  sam has direct access to its local automated agent and much lower
incoming data rates than the ea  it addresses the difficult problem of plan recognition  of the plans
of other friendly agents   because humans are not involved  sam does not need to produce alerts
tailored to human cognitive capabilities  experiments with sam showed that distributed monitoring
outperformed centralized monitoring while using simpler algorithms  our eas and saim use such
a distributed design  building on these insights 

   

fii nteractive e xecution m onitoring of agent t eams

more recent work at isi has produced a monitoring agent named overseer  kaminka et al  
       which also addresses a problem similar to ours  many geographically distributed team members with a coordinating plan in a dynamic environment  address the problem of modeling the value
of information to the user  overseer does not use the report based monitoring approach adopted
by our eas  because it must rely on unmodifiable legacy agents and does not have sufficient bandwidth and reliability in communication  a detailed analysis is given in section   
nasas remote agent on deep space one  jonsson et al         muscettola et al         does
autonomous execution monitoring on a spacecraft  our domains have many of the same requirements as nasas  including the core requirements of concurrent temporal processes and interacting
recoveries  however  nasas remote agent is fully automated  which places a heavier burden on
the module that generates plans and responses  but alleviates the burden of having to address human
interaction issues such as those considered in voa  monitoring algorithms are not described in detail  but are based on a procedural executive  which we assume is similar to our procedural reactive
control system  in nasas domain  the agents are mechanical devices onboard the spacecraft 
and their behaviors have been formally modeled  our agents include humans  whose behaviors are
not easily modeled  so our eas estimate the value of alerts as they interact with a human decision
maker  who ultimately is responsible for the control decisions 
work on rationale based monitoring  pollack   mccarthy        veloso  pollack    cox       
addressed the problem of monitoring the world during the plan generation process  in causal link
planners  to see if events invalidate the plan being generated  they monitor subgoals  preconditions 
usability conditions  and user preferences  all these are monitored in our framework when plans are
executed  and our eas have additional capabilities  such as monitoring policy constraints and applying mission specific monitoring methods  this rationale based work does not address time critical
monitoring during execution time  monitoring large volumes of incoming data  or the problem of
alerting users without overwhelming them 
doyle        describes a technique to focus the users attention on anomalous system behavior 
particularly sensor behavior  this work would be applicable within the lowest layer in our robotics
control module  it uses causal modeling to understand the normal behavior of a sensor  anomaly
detection is based on measures of causal distance and distance from normal behavior  the distance
measures are not related to the plan and its goals actions  instead they measure deviation from typical behavior  the user still has to relate the reported sensor anomaly to its higher level effects  such
as a threat to plan or action execution  this work provides a monitoring technique for specific sensor and system types that could easily be incorporated in our monitoring framework  the resulting
anomaly detection might give low level alerts or be a contributory factor in the reasoning process
for higher level alert classes 
the phoenix system uses the concept of a plan envelope  hart  anderson    cohen       
to represent the a priori expectations of an actions progress  envelopes are used when an action
executes over time and can be interrupted and altered during execution  the envelope captures
the range of possible performance of an action during successful execution  during execution  the
actual performance of the system is recorded and  if it deviates from the predefined envelope  a
possible failure is detected  this concept provides a useful monitoring technique for specific alerttypes  particularly those concerning actions that consume a variable amount of resources over time 
envelopes can also identify when an action is performing better than required allowing opportunistic alerts  envelopes could easily be incorporated in our monitoring framework as an additional
monitoring technique  and could be useful at the higher levels in both our domains 
   

fiw ilkins   l ee     b erry

the suo ea provides a capability that does not currently exist  because there is no machineunderstandable representation of the plan on the battlefield  currently  small unit warfighters must
monitor all incoming information for relevance  with manual notification of other team members 
the suo ea also improves on next generation army systems such as fbcb   force xxi battle
command brigade and below   garamone         unlike fbcb   the ea alerts only on important
changes  can automatically update the areas to be monitored as the plan is executed  can dynamically change the force structure  and can alert the user to many issues that are not monitored in
other systems  such as fratricide risks  triggering of contingencies  and schedule  coordination and
positional deviations from the plan 

   conclusions
we characterized the domain independent challenges posed by an execution aid that interactively
supports humans monitoring the activity of distributed teams of cooperating agents  both human and
machine  the most important issues for interactive monitoring are adaptivity  plan  and situationspecific monitoring  reactivity  and high value  user appropriate alerts  we showed how properties
of various domains influence these challenges and their solutions  we then presented a top level
domain independent categorization of the types of alerts a plan based monitoring system might
issue to a user  the different monitoring techniques generally required for each category are often
domain specific and task specific 
our monitoring framework integrates these various techniques and then uses the concept of
value of an alert to control interaction with the user  this conceptual framework facilitates integration of new monitoring techniques and provides a domain independent context for future discussions of monitoring systems  we discussed various design tradeoffs that must be made during the
application of our monitoring framework to a domain  sections     and      
we use this framework to describe a monitoring approach we developed and have used to implement execution assistants  eas  in two different dynamic  data rich  real world domains  our
approach is based on rich plan representations  which allow the execution aid to filter  interpret 
and react to the large volume of incoming information  and alert the user appropriately  an expressive plan representation is necessary for representing suo plans  which must coordinate distributed
units  trigger contingencies  and enforce a variety of constraints  it is equally important that this
representation be monitorable by machines and meaningful to humans  our plan representation
and mission model were able to model a representative suo scenario with enough fidelity to provide value  as judged by our domain experts  and was also sufficient for plans in the uv robotics
domain 
we developed a sufficiently rich plan representation by extending an existing plan representation
with a hierarchical  object oriented mission model that encodes knowledge about primitive actions
and mission specific monitoring methods  the suo ea implements a novel integration of these
hierarchical monitoring methods with a reactive control system  the ea invokes the most specific
methods defined in the hierarchy at appropriate points during monitoring 
one central challenge  in our domains as well as medical monitoring  is to avoid overwhelming
the user with unwanted alerts and or false alarms  we define the concepts of value of information
and value of giving an alert as the principles for determining when to give an alert  we describe the
properties of voi and voa  criteria for computing them  the advantages of qualitative reasoning in

   

fii nteractive e xecution m onitoring of agent t eams

our domains  and the successful use of these concepts in our applications  voi and voa algorithms
must be customizable to the user  plan  and situation 
by using an asynchronous multiagent architecture and an extended version of the p rs reactive
control system  we monitored the execution of both suo and uv robotics plans with acceptable
latency  given a dozen or more incoming events per second  p rs extensions include temporal monitors and efficiency improvements  methods from the mission model are used throughout the suo
monitoring process for action specific monitoring  our evaluation showed that our plan aware eas
generated appropriate alerts in a timely manner without overwhelming the user with too many alerts 
although a small percentage of the alerts were unwanted  we have shown the utility of using advanced ai planning and execution technologies in small unit operations 
the application to uv robotics showed the generality of our suo framework and monitoring
concepts  we implemented a complex execution assistant in about one person week  using code
from the suo ea  the uv ea uses the same plan representation and basic architecture as the suo
ea  but the inputs are different as are the tasks and the algorithms that respond to the inputs and
generate alerts 
future work  the most obvious area for future work in the suo domain is incorporation of
a planning assistant to complete the loop of continuous planning and execution  this integration
has already been accomplished in the uv robotics domain  but the difficulty in the suo domain
is an interface that allows a soldier to interact effectively with the planning tool  using a wearable
computer in a battlefield situation  several research programs are addressing this problem  some of
which are mentioned in section   
within the scope of execution monitoring  future work on our eas could model and detect other
types of plan deviations  such as loss of surprise or additional types of fratricide risks   project
future failures  and provide higher fidelity specialized reasoners  particularly for terrain reasoning 
additional theoretical work on voi and voa would support better quantitative estimates of voi
and voa  the suo mission model already has a method for projecting failures and a low fidelity
projection capability could be easily added  in the uv robotics domain  we plan to implement
additional types of alerts in the near future  and extend the uv ea to serve the higher layers of the
architecture that have more in common with the suo ea alert types and triggers  the fragility of
the uv communication network in hostile domains provides a set of interesting monitoring challenges that may result in the incorporation of specific monitoring related tasks within cooperative
team missions  monitoring strategies for uncertain communication environments is an important
research challenge for the uv robotics domain  additional alerts being considered for future implementation include monitoring movement of entities in and out of geographical sectors mentioned
in the plan  monitoring the deterioration or improvement of communication conditions  and monitoring the actions and intentions of coordinating team members to facilitate cooperative behavior 

   

fiw ilkins   l ee     b erry

acknowledgments
the suo research was supported by contract f         c      with the defense advanced research projects agency  from the darpa planning and decision aids program and the darpa
small unit operations program   under the supervision of air force research laboratory  rome 
the ucav research was supported by the office of naval research unmanned combat air vehicles program  contract n         c        the sri international artificial intelligence center
supported the writing of this paper  we thank the subject matter experts who assisted us  our primary collaborators and evaluators were kenneth sharpe of saic and richard diehl of the institute
for defense analyses  we also used the expertise of andy fowles  chris kearns  and david miller
of the u s  army dismounted battlespace battle laboratory  dbbl  at fort benning  and cpt
dan ray of the mounted maneuver battlespace laboratory  mmbl  at fort knox 

references
arkin  r          behavior based robotics  mit press 
ash  d   gold  g   seiver  a     hayes roth  b          guaranteeing real time response with
limited resources  artificial intelligence in medicine             
athey  s     levin  j          the value of information in monotone decision problems  tech  rep  
stanford university  stanford  ca 
bell  b   jr   e  s     brown  s  m          making adversary decision modeling tractable with intent
inference and information fusion  in proc  of the   th conference on computer generated
forces and behavioral representation  orlando  fl 
bonasso  r  p   kortenkamp  d     whitney  t          using a robot control architecture to automate space shuttle operations  in proc  of the      national conference on artificial intelligence  pp          providence  ri  aaai press 
cheyer  a     martin  d          the open agent architecture  journal of autonomous agents and
multi agent systems               
coiera  e          intelligent monitoring and control of dynamic physiological systems  artificial
intelligence in medicine           
donlon  j     forbus  k          using a geographic information system for qualitative spatial
reasoning about trafficability  in proc  of the qualitative reasoning workshop  loch awe 
scotland 
doyle  r  j          determining the loci of anomalies using minimal causal models  in proc  of
the      international joint conference on artificial intelligence  pp            montreal 
quebec  canada  morgan kaufmann publishers inc   san francisco  ca 
durfee  e  h   huber  m  j   kurnow  m     lee  j          taipe  tactical assistants for interaction
planning and execution  in proc  of autonomous agents     acm press  new york 
ferguson  g     allen  j          trips  an integrated intelligent problem solving assistant  in
proc  of the      national conference on artificial intelligence  pp          aaai press 
forbus  k  d          towards qualitative modeling of the battlespace  technical report unpublished manuscript  northwestern university  evanston  il 
   

fii nteractive e xecution m onitoring of agent t eams

franke  j   brown  s  m   bell  b     mendenhall  h          enhancing teamwork through teamlevel intent inference  in proc  of the      international conference on artificial intelligence 
las vegas  nv 
garamone  j          digital world meets combat during desert exercise  tech  rep   american
forces information service  www defenselink mil news apr      
georgeff  m  p     ingrand  f  f          decision making in an embedded reasoning system  in
proc  of the      international joint conference on ai  pp          detroit  mi  morgan
kaufmann publishers inc   san francisco  ca 
gil  y     blythe  j          a problem solving method for plan evaluation and critiquing  in proc 
of the tenth banff knowledge acquisition for knowledge based systems workshop  banff 
alberta  canada 
grosz  b     kraus  s          the evolution of sharedplans  in rao  a     wooldridge  m   eds   
foundations and theories of rational agencies  pp         
hart  d  m   anderson  s  d     cohen  p  r          envelopes as a vehicle for improving the
efficiency of plan execution  tech  rep  um cs           university of massachusetts 
amherst  ma 
holness  g   karuppiah  d and uppala  s     ravela  s  c          a service paradigm for reconfigurable agents  in proc  of the  nd workshop on infrastructure for agents  mas  and scalable
mas  agents        montreal  canada 
horty  j     pollack  m          evaluating new options in the context of existing plans  artificial
intelligence                 
jonsson  a   morris  p   muscettola  n     rajan  k          planning in interplanetary space 
theory and practice  in proc  of the      international conference on ai planning and
scheduling  pp          breckenridge  co  aaai press  menlo park  ca 
kaminka  g   pynadath  d     tambe  m          monitoring deployed agent teams  in proc  of
autonomous agents     pp          montreal  canada 
kaminka  g     tambe  m          experiments in distributed and centralized socially attentive
monitoring  in proc  of autonomous agents     pp          seattle  wa 
konolige  k     myers  k          artificial intelligence based mobile robots  case studies of
successful robot systems  chap  the saphira architecture  a design for autonomy  mit press 
koski  e   makivirta  a   sukuvaara  t     kari  a          frequency and reliability of alarms in
the monitoring of cardiac postoperative patients  international journal of clinical monitoring
and computing            
mouaddib  a  i     zilberstein  s          knowledge based anytime computation  in proc  of the
     international joint conference on artificial intelligence  pp          morgan kaufmann publishers inc   san francisco  ca 
muscettola  n   nayak  p  p   pell  b     williams  b  c          remote agent  to boldly go where
no ai system has gone before  artificial intelligence                
musliner  d  j   durfee  e  h     shin  k  g          circa  a cooperative intelligent real time
control architecture  ieee transactions on systems  man  and cybernetics        
   

fiw ilkins   l ee     b erry

myers  k  l          a procedural knowledge approach to task level control  in proc  of the     
international conference on ai planning systems  aaai press  menlo park  ca 
myers  k  l     morley  d  n          human directability of agents  in proc   st international
conference on knowledge capture  victoria  b c 
myers  k  l          cpef  a continuous planning and execution framework  ai magazine     
     
ortiz  c   agno  a   berry  p     vincent  r          multilevel adaptation in teams of unmanned
air and ground vehicles  in first aiaa unmanned aerospace vehicles  systems  technologies
and operations conference 
ortiz  c  l          introspective and elaborative processes in rational agents  annals of mathematics and artificial intelligence              
ortiz  c  l     hsu  e          structured negotiation  in proc  of the first international conference
on autonomous agents and multiagent systems 
pollack  m  e     mccarthy  c          towards focused plan monitoring  a technique and an
application to mobile robots  in proc  of the ieee international symposium on computational
intelligence in robotics and automation  cira   pp         
rao  a  s     georgeff  m  p          bdi agents  from theory to practice  in proc  of the first
intl  conference on multiagent systems  san francisco 
schreckenghost  d     et al          adjustable control autonomy for anomaly response in spacebased life support systems  in proc  of the ijcai workshop on autonomy  delegation  and
control 
shannon  c          a mathematical theory of communication  bell system technical journal     
               
tsien  c          reducing false alarms in the intensive care unit  a systematic comparison of four
algorithms  in proc  of the american medical informatics association annual fall symposium 
tsien  c     fackler  j          poor prognosis for existing monitors in the intensive care unit 
critical care medicine                
veloso  m   pollack  m     cox  m          rationale based monitoring for planning in dynamic
environments  in proc  of the      international conference on ai planning systems  pp 
        aaai press  menlo park  ca 
vincent  r   horling  b   lesser  v     wagner  t          implementing soft real time agent control 
in proceedings of the  th international conference on autonomous agents  acm press 
weigner  m  b     englund  c  e          ergonomic and human factors affecting anesthetic vigilance and monitoring performance in the operating room environment  anesthesiology        
        
weinberger  e          a theory of pragmatic information and its application to the quasispecies
model of biological evolution  biosystems                
wilkins  d  e     desjardins  m          a call for knowledge based planning  ai magazine        
      
   

fii nteractive e xecution m onitoring of agent t eams

wilkins  d  e     myers  k  l          a common knowledge representation for plan generation
and reactive execution  journal of logic and computation               
wilkins  d  e     myers  k  l          a multiagent planning architecture  in proc  of the     
international conference on ai planning systems  pp          pittsburgh  pa 
wilkins  d  e   myers  k  l   lowrance  j  d     wesley  l  p          planning and reacting
in uncertain and dynamic environments  journal of experimental and theoretical ai       
       

   

fi